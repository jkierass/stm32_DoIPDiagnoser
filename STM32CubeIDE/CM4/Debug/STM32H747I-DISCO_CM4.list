
STM32H747I-DISCO_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .shared_ram   000016f8  38000000  38000000  0002b000  2**2
                  ALLOC
  2 .text         000230b0  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000059e4  08123350  08123350  00024350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  08128d34  08128d34  00029d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000008  08128d3c  08128d3c  00029d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08128d44  08128d44  00029d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000090  10000000  08128d48  0002a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00011f8c  10000090  08128dd8  0002a090  2**3
                  ALLOC
  9 ._user_heap_stack 00002004  1001201c  08128dd8  0002b01c  2**0
                  ALLOC
 10 .lwip_sec     00024b83  10020000  10020000  0002b000  2**2
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002a090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005cd9b  00000000  00000000  0002a0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000bbeb  00000000  00000000  00086e5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003c38  00000000  00000000  00092a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002f4d  00000000  00000000  00096680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00056bda  00000000  00000000  000995cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0005268d  00000000  00000000  000f01a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001ec804  00000000  00000000  00142834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0032f038  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00011624  00000000  00000000  0032f07c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  003406a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000090 	.word	0x10000090
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08123338 	.word	0x08123338

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000094 	.word	0x10000094
 81002dc:	08123338 	.word	0x08123338

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <strlen>:
 8100380:	4603      	mov	r3, r0
 8100382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8100386:	2a00      	cmp	r2, #0
 8100388:	d1fb      	bne.n	8100382 <strlen+0x2>
 810038a:	1a18      	subs	r0, r3, r0
 810038c:	3801      	subs	r0, #1
 810038e:	4770      	bx	lr

08100390 <__aeabi_uldivmod>:
 8100390:	b953      	cbnz	r3, 81003a8 <__aeabi_uldivmod+0x18>
 8100392:	b94a      	cbnz	r2, 81003a8 <__aeabi_uldivmod+0x18>
 8100394:	2900      	cmp	r1, #0
 8100396:	bf08      	it	eq
 8100398:	2800      	cmpeq	r0, #0
 810039a:	bf1c      	itt	ne
 810039c:	f04f 31ff 	movne.w	r1, #4294967295
 81003a0:	f04f 30ff 	movne.w	r0, #4294967295
 81003a4:	f000 b96a 	b.w	810067c <__aeabi_idiv0>
 81003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 81003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81003b0:	f000 f806 	bl	81003c0 <__udivmoddi4>
 81003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 81003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81003bc:	b004      	add	sp, #16
 81003be:	4770      	bx	lr

081003c0 <__udivmoddi4>:
 81003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81003c4:	9d08      	ldr	r5, [sp, #32]
 81003c6:	460c      	mov	r4, r1
 81003c8:	2b00      	cmp	r3, #0
 81003ca:	d14e      	bne.n	810046a <__udivmoddi4+0xaa>
 81003cc:	4694      	mov	ip, r2
 81003ce:	458c      	cmp	ip, r1
 81003d0:	4686      	mov	lr, r0
 81003d2:	fab2 f282 	clz	r2, r2
 81003d6:	d962      	bls.n	810049e <__udivmoddi4+0xde>
 81003d8:	b14a      	cbz	r2, 81003ee <__udivmoddi4+0x2e>
 81003da:	f1c2 0320 	rsb	r3, r2, #32
 81003de:	4091      	lsls	r1, r2
 81003e0:	fa20 f303 	lsr.w	r3, r0, r3
 81003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 81003e8:	4319      	orrs	r1, r3
 81003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 81003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 81003f2:	fa1f f68c 	uxth.w	r6, ip
 81003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 81003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 81003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8100402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100406:	fb04 f106 	mul.w	r1, r4, r6
 810040a:	4299      	cmp	r1, r3
 810040c:	d90a      	bls.n	8100424 <__udivmoddi4+0x64>
 810040e:	eb1c 0303 	adds.w	r3, ip, r3
 8100412:	f104 30ff 	add.w	r0, r4, #4294967295
 8100416:	f080 8112 	bcs.w	810063e <__udivmoddi4+0x27e>
 810041a:	4299      	cmp	r1, r3
 810041c:	f240 810f 	bls.w	810063e <__udivmoddi4+0x27e>
 8100420:	3c02      	subs	r4, #2
 8100422:	4463      	add	r3, ip
 8100424:	1a59      	subs	r1, r3, r1
 8100426:	fa1f f38e 	uxth.w	r3, lr
 810042a:	fbb1 f0f7 	udiv	r0, r1, r7
 810042e:	fb07 1110 	mls	r1, r7, r0, r1
 8100432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100436:	fb00 f606 	mul.w	r6, r0, r6
 810043a:	429e      	cmp	r6, r3
 810043c:	d90a      	bls.n	8100454 <__udivmoddi4+0x94>
 810043e:	eb1c 0303 	adds.w	r3, ip, r3
 8100442:	f100 31ff 	add.w	r1, r0, #4294967295
 8100446:	f080 80fc 	bcs.w	8100642 <__udivmoddi4+0x282>
 810044a:	429e      	cmp	r6, r3
 810044c:	f240 80f9 	bls.w	8100642 <__udivmoddi4+0x282>
 8100450:	4463      	add	r3, ip
 8100452:	3802      	subs	r0, #2
 8100454:	1b9b      	subs	r3, r3, r6
 8100456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 810045a:	2100      	movs	r1, #0
 810045c:	b11d      	cbz	r5, 8100466 <__udivmoddi4+0xa6>
 810045e:	40d3      	lsrs	r3, r2
 8100460:	2200      	movs	r2, #0
 8100462:	e9c5 3200 	strd	r3, r2, [r5]
 8100466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810046a:	428b      	cmp	r3, r1
 810046c:	d905      	bls.n	810047a <__udivmoddi4+0xba>
 810046e:	b10d      	cbz	r5, 8100474 <__udivmoddi4+0xb4>
 8100470:	e9c5 0100 	strd	r0, r1, [r5]
 8100474:	2100      	movs	r1, #0
 8100476:	4608      	mov	r0, r1
 8100478:	e7f5      	b.n	8100466 <__udivmoddi4+0xa6>
 810047a:	fab3 f183 	clz	r1, r3
 810047e:	2900      	cmp	r1, #0
 8100480:	d146      	bne.n	8100510 <__udivmoddi4+0x150>
 8100482:	42a3      	cmp	r3, r4
 8100484:	d302      	bcc.n	810048c <__udivmoddi4+0xcc>
 8100486:	4290      	cmp	r0, r2
 8100488:	f0c0 80f0 	bcc.w	810066c <__udivmoddi4+0x2ac>
 810048c:	1a86      	subs	r6, r0, r2
 810048e:	eb64 0303 	sbc.w	r3, r4, r3
 8100492:	2001      	movs	r0, #1
 8100494:	2d00      	cmp	r5, #0
 8100496:	d0e6      	beq.n	8100466 <__udivmoddi4+0xa6>
 8100498:	e9c5 6300 	strd	r6, r3, [r5]
 810049c:	e7e3      	b.n	8100466 <__udivmoddi4+0xa6>
 810049e:	2a00      	cmp	r2, #0
 81004a0:	f040 8090 	bne.w	81005c4 <__udivmoddi4+0x204>
 81004a4:	eba1 040c 	sub.w	r4, r1, ip
 81004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 81004ac:	fa1f f78c 	uxth.w	r7, ip
 81004b0:	2101      	movs	r1, #1
 81004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 81004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 81004ba:	fb08 4416 	mls	r4, r8, r6, r4
 81004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 81004c2:	fb07 f006 	mul.w	r0, r7, r6
 81004c6:	4298      	cmp	r0, r3
 81004c8:	d908      	bls.n	81004dc <__udivmoddi4+0x11c>
 81004ca:	eb1c 0303 	adds.w	r3, ip, r3
 81004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 81004d2:	d202      	bcs.n	81004da <__udivmoddi4+0x11a>
 81004d4:	4298      	cmp	r0, r3
 81004d6:	f200 80cd 	bhi.w	8100674 <__udivmoddi4+0x2b4>
 81004da:	4626      	mov	r6, r4
 81004dc:	1a1c      	subs	r4, r3, r0
 81004de:	fa1f f38e 	uxth.w	r3, lr
 81004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 81004e6:	fb08 4410 	mls	r4, r8, r0, r4
 81004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 81004ee:	fb00 f707 	mul.w	r7, r0, r7
 81004f2:	429f      	cmp	r7, r3
 81004f4:	d908      	bls.n	8100508 <__udivmoddi4+0x148>
 81004f6:	eb1c 0303 	adds.w	r3, ip, r3
 81004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 81004fe:	d202      	bcs.n	8100506 <__udivmoddi4+0x146>
 8100500:	429f      	cmp	r7, r3
 8100502:	f200 80b0 	bhi.w	8100666 <__udivmoddi4+0x2a6>
 8100506:	4620      	mov	r0, r4
 8100508:	1bdb      	subs	r3, r3, r7
 810050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 810050e:	e7a5      	b.n	810045c <__udivmoddi4+0x9c>
 8100510:	f1c1 0620 	rsb	r6, r1, #32
 8100514:	408b      	lsls	r3, r1
 8100516:	fa22 f706 	lsr.w	r7, r2, r6
 810051a:	431f      	orrs	r7, r3
 810051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8100520:	fa04 f301 	lsl.w	r3, r4, r1
 8100524:	ea43 030c 	orr.w	r3, r3, ip
 8100528:	40f4      	lsrs	r4, r6
 810052a:	fa00 f801 	lsl.w	r8, r0, r1
 810052e:	0c38      	lsrs	r0, r7, #16
 8100530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8100534:	fbb4 fef0 	udiv	lr, r4, r0
 8100538:	fa1f fc87 	uxth.w	ip, r7
 810053c:	fb00 441e 	mls	r4, r0, lr, r4
 8100540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100544:	fb0e f90c 	mul.w	r9, lr, ip
 8100548:	45a1      	cmp	r9, r4
 810054a:	fa02 f201 	lsl.w	r2, r2, r1
 810054e:	d90a      	bls.n	8100566 <__udivmoddi4+0x1a6>
 8100550:	193c      	adds	r4, r7, r4
 8100552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8100556:	f080 8084 	bcs.w	8100662 <__udivmoddi4+0x2a2>
 810055a:	45a1      	cmp	r9, r4
 810055c:	f240 8081 	bls.w	8100662 <__udivmoddi4+0x2a2>
 8100560:	f1ae 0e02 	sub.w	lr, lr, #2
 8100564:	443c      	add	r4, r7
 8100566:	eba4 0409 	sub.w	r4, r4, r9
 810056a:	fa1f f983 	uxth.w	r9, r3
 810056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8100572:	fb00 4413 	mls	r4, r0, r3, r4
 8100576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 810057a:	fb03 fc0c 	mul.w	ip, r3, ip
 810057e:	45a4      	cmp	ip, r4
 8100580:	d907      	bls.n	8100592 <__udivmoddi4+0x1d2>
 8100582:	193c      	adds	r4, r7, r4
 8100584:	f103 30ff 	add.w	r0, r3, #4294967295
 8100588:	d267      	bcs.n	810065a <__udivmoddi4+0x29a>
 810058a:	45a4      	cmp	ip, r4
 810058c:	d965      	bls.n	810065a <__udivmoddi4+0x29a>
 810058e:	3b02      	subs	r3, #2
 8100590:	443c      	add	r4, r7
 8100592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8100596:	fba0 9302 	umull	r9, r3, r0, r2
 810059a:	eba4 040c 	sub.w	r4, r4, ip
 810059e:	429c      	cmp	r4, r3
 81005a0:	46ce      	mov	lr, r9
 81005a2:	469c      	mov	ip, r3
 81005a4:	d351      	bcc.n	810064a <__udivmoddi4+0x28a>
 81005a6:	d04e      	beq.n	8100646 <__udivmoddi4+0x286>
 81005a8:	b155      	cbz	r5, 81005c0 <__udivmoddi4+0x200>
 81005aa:	ebb8 030e 	subs.w	r3, r8, lr
 81005ae:	eb64 040c 	sbc.w	r4, r4, ip
 81005b2:	fa04 f606 	lsl.w	r6, r4, r6
 81005b6:	40cb      	lsrs	r3, r1
 81005b8:	431e      	orrs	r6, r3
 81005ba:	40cc      	lsrs	r4, r1
 81005bc:	e9c5 6400 	strd	r6, r4, [r5]
 81005c0:	2100      	movs	r1, #0
 81005c2:	e750      	b.n	8100466 <__udivmoddi4+0xa6>
 81005c4:	f1c2 0320 	rsb	r3, r2, #32
 81005c8:	fa20 f103 	lsr.w	r1, r0, r3
 81005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 81005d0:	fa24 f303 	lsr.w	r3, r4, r3
 81005d4:	4094      	lsls	r4, r2
 81005d6:	430c      	orrs	r4, r1
 81005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 81005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 81005e0:	fa1f f78c 	uxth.w	r7, ip
 81005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 81005e8:	fb08 3110 	mls	r1, r8, r0, r3
 81005ec:	0c23      	lsrs	r3, r4, #16
 81005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 81005f2:	fb00 f107 	mul.w	r1, r0, r7
 81005f6:	4299      	cmp	r1, r3
 81005f8:	d908      	bls.n	810060c <__udivmoddi4+0x24c>
 81005fa:	eb1c 0303 	adds.w	r3, ip, r3
 81005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8100602:	d22c      	bcs.n	810065e <__udivmoddi4+0x29e>
 8100604:	4299      	cmp	r1, r3
 8100606:	d92a      	bls.n	810065e <__udivmoddi4+0x29e>
 8100608:	3802      	subs	r0, #2
 810060a:	4463      	add	r3, ip
 810060c:	1a5b      	subs	r3, r3, r1
 810060e:	b2a4      	uxth	r4, r4
 8100610:	fbb3 f1f8 	udiv	r1, r3, r8
 8100614:	fb08 3311 	mls	r3, r8, r1, r3
 8100618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 810061c:	fb01 f307 	mul.w	r3, r1, r7
 8100620:	42a3      	cmp	r3, r4
 8100622:	d908      	bls.n	8100636 <__udivmoddi4+0x276>
 8100624:	eb1c 0404 	adds.w	r4, ip, r4
 8100628:	f101 36ff 	add.w	r6, r1, #4294967295
 810062c:	d213      	bcs.n	8100656 <__udivmoddi4+0x296>
 810062e:	42a3      	cmp	r3, r4
 8100630:	d911      	bls.n	8100656 <__udivmoddi4+0x296>
 8100632:	3902      	subs	r1, #2
 8100634:	4464      	add	r4, ip
 8100636:	1ae4      	subs	r4, r4, r3
 8100638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 810063c:	e739      	b.n	81004b2 <__udivmoddi4+0xf2>
 810063e:	4604      	mov	r4, r0
 8100640:	e6f0      	b.n	8100424 <__udivmoddi4+0x64>
 8100642:	4608      	mov	r0, r1
 8100644:	e706      	b.n	8100454 <__udivmoddi4+0x94>
 8100646:	45c8      	cmp	r8, r9
 8100648:	d2ae      	bcs.n	81005a8 <__udivmoddi4+0x1e8>
 810064a:	ebb9 0e02 	subs.w	lr, r9, r2
 810064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8100652:	3801      	subs	r0, #1
 8100654:	e7a8      	b.n	81005a8 <__udivmoddi4+0x1e8>
 8100656:	4631      	mov	r1, r6
 8100658:	e7ed      	b.n	8100636 <__udivmoddi4+0x276>
 810065a:	4603      	mov	r3, r0
 810065c:	e799      	b.n	8100592 <__udivmoddi4+0x1d2>
 810065e:	4630      	mov	r0, r6
 8100660:	e7d4      	b.n	810060c <__udivmoddi4+0x24c>
 8100662:	46d6      	mov	lr, sl
 8100664:	e77f      	b.n	8100566 <__udivmoddi4+0x1a6>
 8100666:	4463      	add	r3, ip
 8100668:	3802      	subs	r0, #2
 810066a:	e74d      	b.n	8100508 <__udivmoddi4+0x148>
 810066c:	4606      	mov	r6, r0
 810066e:	4623      	mov	r3, r4
 8100670:	4608      	mov	r0, r1
 8100672:	e70f      	b.n	8100494 <__udivmoddi4+0xd4>
 8100674:	3e02      	subs	r6, #2
 8100676:	4463      	add	r3, ip
 8100678:	e730      	b.n	81004dc <__udivmoddi4+0x11c>
 810067a:	bf00      	nop

0810067c <__aeabi_idiv0>:
 810067c:	4770      	bx	lr
 810067e:	bf00      	nop

08100680 <_ZN10LogPrinterC1Ev>:

#include <stdarg.h> // Include this for va_list and related functions

extern osMutexId_t printMutexHandle;

LogPrinter::LogPrinter() : mutexHandle(printMutexHandle) {}
 8100680:	b480      	push	{r7}
 8100682:	b083      	sub	sp, #12
 8100684:	af00      	add	r7, sp, #0
 8100686:	6078      	str	r0, [r7, #4]
 8100688:	4b05      	ldr	r3, [pc, #20]	@ (81006a0 <_ZN10LogPrinterC1Ev+0x20>)
 810068a:	681a      	ldr	r2, [r3, #0]
 810068c:	687b      	ldr	r3, [r7, #4]
 810068e:	601a      	str	r2, [r3, #0]
 8100690:	687b      	ldr	r3, [r7, #4]
 8100692:	4618      	mov	r0, r3
 8100694:	370c      	adds	r7, #12
 8100696:	46bd      	mov	sp, r7
 8100698:	f85d 7b04 	ldr.w	r7, [sp], #4
 810069c:	4770      	bx	lr
 810069e:	bf00      	nop
 81006a0:	100001ac 	.word	0x100001ac

081006a4 <_ZN10LogPrinter8instanceEv>:

LogPrinter& LogPrinter::instance()
{
 81006a4:	b580      	push	{r7, lr}
 81006a6:	af00      	add	r7, sp, #0
    static LogPrinter inst;
 81006a8:	4b10      	ldr	r3, [pc, #64]	@ (81006ec <_ZN10LogPrinter8instanceEv+0x48>)
 81006aa:	681b      	ldr	r3, [r3, #0]
 81006ac:	f3bf 8f5b 	dmb	ish
 81006b0:	f003 0301 	and.w	r3, r3, #1
 81006b4:	2b00      	cmp	r3, #0
 81006b6:	bf0c      	ite	eq
 81006b8:	2301      	moveq	r3, #1
 81006ba:	2300      	movne	r3, #0
 81006bc:	b2db      	uxtb	r3, r3
 81006be:	2b00      	cmp	r3, #0
 81006c0:	d010      	beq.n	81006e4 <_ZN10LogPrinter8instanceEv+0x40>
 81006c2:	480a      	ldr	r0, [pc, #40]	@ (81006ec <_ZN10LogPrinter8instanceEv+0x48>)
 81006c4:	f020 fe80 	bl	81213c8 <__cxa_guard_acquire>
 81006c8:	4603      	mov	r3, r0
 81006ca:	2b00      	cmp	r3, #0
 81006cc:	bf14      	ite	ne
 81006ce:	2301      	movne	r3, #1
 81006d0:	2300      	moveq	r3, #0
 81006d2:	b2db      	uxtb	r3, r3
 81006d4:	2b00      	cmp	r3, #0
 81006d6:	d005      	beq.n	81006e4 <_ZN10LogPrinter8instanceEv+0x40>
 81006d8:	4805      	ldr	r0, [pc, #20]	@ (81006f0 <_ZN10LogPrinter8instanceEv+0x4c>)
 81006da:	f7ff ffd1 	bl	8100680 <_ZN10LogPrinterC1Ev>
 81006de:	4803      	ldr	r0, [pc, #12]	@ (81006ec <_ZN10LogPrinter8instanceEv+0x48>)
 81006e0:	f020 fe7e 	bl	81213e0 <__cxa_guard_release>
    return inst;
 81006e4:	4b02      	ldr	r3, [pc, #8]	@ (81006f0 <_ZN10LogPrinter8instanceEv+0x4c>)
}
 81006e6:	4618      	mov	r0, r3
 81006e8:	bd80      	pop	{r7, pc}
 81006ea:	bf00      	nop
 81006ec:	100000b0 	.word	0x100000b0
 81006f0:	100000ac 	.word	0x100000ac

081006f4 <_ZN10LogPrinter10printDebugEPKcz>:

void LogPrinter::printDebug(const char* format, ...)
{
 81006f4:	b40e      	push	{r1, r2, r3}
 81006f6:	b580      	push	{r7, lr}
 81006f8:	b085      	sub	sp, #20
 81006fa:	af00      	add	r7, sp, #0
 81006fc:	6078      	str	r0, [r7, #4]
    osMutexAcquire(mutexHandle, portMAX_DELAY);
 81006fe:	687b      	ldr	r3, [r7, #4]
 8100700:	681b      	ldr	r3, [r3, #0]
 8100702:	f04f 31ff 	mov.w	r1, #4294967295
 8100706:	4618      	mov	r0, r3
 8100708:	f00f fb3a 	bl	810fd80 <osMutexAcquire>
    va_list args;
    va_start(args, format); // Initialize args
 810070c:	f107 0320 	add.w	r3, r7, #32
 8100710:	60fb      	str	r3, [r7, #12]
    vfprintf(stdout, format, args); // Use vfprintf to handle variable arguments
 8100712:	4b11      	ldr	r3, [pc, #68]	@ (8100758 <_ZN10LogPrinter10printDebugEPKcz+0x64>)
 8100714:	681b      	ldr	r3, [r3, #0]
 8100716:	689b      	ldr	r3, [r3, #8]
 8100718:	68fa      	ldr	r2, [r7, #12]
 810071a:	69f9      	ldr	r1, [r7, #28]
 810071c:	4618      	mov	r0, r3
 810071e:	f021 fa2d 	bl	8121b7c <vfiprintf>
    fprintf(stdout, "\r\n");
 8100722:	4b0d      	ldr	r3, [pc, #52]	@ (8100758 <_ZN10LogPrinter10printDebugEPKcz+0x64>)
 8100724:	681b      	ldr	r3, [r3, #0]
 8100726:	689b      	ldr	r3, [r3, #8]
 8100728:	2202      	movs	r2, #2
 810072a:	2101      	movs	r1, #1
 810072c:	480b      	ldr	r0, [pc, #44]	@ (810075c <_ZN10LogPrinter10printDebugEPKcz+0x68>)
 810072e:	f021 fd8b 	bl	8122248 <fwrite>
    fflush(stdout);
 8100732:	4b09      	ldr	r3, [pc, #36]	@ (8100758 <_ZN10LogPrinter10printDebugEPKcz+0x64>)
 8100734:	681b      	ldr	r3, [r3, #0]
 8100736:	689b      	ldr	r3, [r3, #8]
 8100738:	4618      	mov	r0, r3
 810073a:	f021 fc63 	bl	8122004 <fflush>
    va_end(args); // Clean up the va_list
    osMutexRelease(mutexHandle);
 810073e:	687b      	ldr	r3, [r7, #4]
 8100740:	681b      	ldr	r3, [r3, #0]
 8100742:	4618      	mov	r0, r3
 8100744:	f00f fb67 	bl	810fe16 <osMutexRelease>
}
 8100748:	bf00      	nop
 810074a:	3714      	adds	r7, #20
 810074c:	46bd      	mov	sp, r7
 810074e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8100752:	b003      	add	sp, #12
 8100754:	4770      	bx	lr
 8100756:	bf00      	nop
 8100758:	10000040 	.word	0x10000040
 810075c:	08123350 	.word	0x08123350

08100760 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8100760:	b580      	push	{r7, lr}
 8100762:	b082      	sub	sp, #8
 8100764:	af00      	add	r7, sp, #0
 8100766:	6078      	str	r0, [r7, #4]
    if((SemMask &  __HAL_HSEM_SEMID_TO_MASK(HSEM_RX_ID))!= 0)
 8100768:	687b      	ldr	r3, [r7, #4]
 810076a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810076e:	2b00      	cmp	r3, #0
 8100770:	d005      	beq.n	810077e <HAL_HSEM_FreeCallback+0x1e>
    {
        /* Re-Activate HSEM notification */
        HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_RX_ID));
 8100772:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8100776:	f00a fec7 	bl	810b508 <HAL_HSEM_ActivateNotification>
        /* New message received */
        prvCoreInterruptHandler();
 810077a:	f000 f845 	bl	8100808 <prvCoreInterruptHandler>
    }

    if((SemMask & __HAL_HSEM_SEMID_TO_MASK(HSEM_TX_WAKEUP)) !=0)
 810077e:	687b      	ldr	r3, [r7, #4]
 8100780:	2b00      	cmp	r3, #0
 8100782:	da05      	bge.n	8100790 <HAL_HSEM_FreeCallback+0x30>
    {
        /* Re-Activate HSEM notification */
        HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_TX_WAKEUP));
 8100784:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8100788:	f00a febe 	bl	810b508 <HAL_HSEM_ActivateNotification>
        /* TX queue is empty => wake-up task trying to send a message */
        prvCoreWakeupInterruptHandler();
 810078c:	f000 f860 	bl	8100850 <prvCoreWakeupInterruptHandler>
    }
}
 8100790:	bf00      	nop
 8100792:	3708      	adds	r7, #8
 8100794:	46bd      	mov	sp, r7
 8100796:	bd80      	pop	{r7, pc}

08100798 <ipc_init>:

int ipc_init(void)
{
 8100798:	b580      	push	{r7, lr}
 810079a:	b082      	sub	sp, #8
 810079c:	af02      	add	r7, sp, #8
#ifdef CORE_CM7
	memset((void*)(&shared_ram.cm7_to_cm4_buffer), 0, CM7_TO_CM4_BUFFER_SIZE);
	memset((void*)(&shared_ram.cm4_to_cm7_buffer), 0, CM4_TO_CM7_BUFFER_SIZE);
#endif
    shared_ram.cm7_to_cm4_handle = xMessageBufferCreateStatic(CM7_TO_CM4_BUFFER_SIZE, (uint8_t*)shared_ram.cm7_to_cm4_buffer,(StaticMessageBuffer_t*) &shared_ram.cm7_to_cm4_xmsg);
 810079e:	4b0e      	ldr	r3, [pc, #56]	@ (81007d8 <ipc_init+0x40>)
 81007a0:	9300      	str	r3, [sp, #0]
 81007a2:	4b0e      	ldr	r3, [pc, #56]	@ (81007dc <ipc_init+0x44>)
 81007a4:	2201      	movs	r2, #1
 81007a6:	2100      	movs	r1, #0
 81007a8:	f640 3054 	movw	r0, #2900	@ 0xb54
 81007ac:	f011 fbd2 	bl	8111f54 <xStreamBufferGenericCreateStatic>
 81007b0:	4603      	mov	r3, r0
 81007b2:	4a0b      	ldr	r2, [pc, #44]	@ (81007e0 <ipc_init+0x48>)
 81007b4:	6013      	str	r3, [r2, #0]
    shared_ram.cm4_to_cm7_handle = xMessageBufferCreateStatic(CM4_TO_CM7_BUFFER_SIZE, (uint8_t*)shared_ram.cm4_to_cm7_buffer,(StaticMessageBuffer_t*) &shared_ram.cm4_to_cm7_xmsg);
 81007b6:	4b0b      	ldr	r3, [pc, #44]	@ (81007e4 <ipc_init+0x4c>)
 81007b8:	9300      	str	r3, [sp, #0]
 81007ba:	4b0b      	ldr	r3, [pc, #44]	@ (81007e8 <ipc_init+0x50>)
 81007bc:	2201      	movs	r2, #1
 81007be:	2100      	movs	r1, #0
 81007c0:	f640 3054 	movw	r0, #2900	@ 0xb54
 81007c4:	f011 fbc6 	bl	8111f54 <xStreamBufferGenericCreateStatic>
 81007c8:	4603      	mov	r3, r0
 81007ca:	4a05      	ldr	r2, [pc, #20]	@ (81007e0 <ipc_init+0x48>)
 81007cc:	6053      	str	r3, [r2, #4]

    return 0;
 81007ce:	2300      	movs	r3, #0
}
 81007d0:	4618      	mov	r0, r3
 81007d2:	46bd      	mov	sp, r7
 81007d4:	bd80      	pop	{r7, pc}
 81007d6:	bf00      	nop
 81007d8:	38000008 	.word	0x38000008
 81007dc:	38000050 	.word	0x38000050
 81007e0:	38000000 	.word	0x38000000
 81007e4:	3800002c 	.word	0x3800002c
 81007e8:	38000ba4 	.word	0x38000ba4

081007ec <ipc_start>:

int ipc_start(void){
 81007ec:	b580      	push	{r7, lr}
 81007ee:	af00      	add	r7, sp, #0
    HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_RX_ID));
 81007f0:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 81007f4:	f00a fe88 	bl	810b508 <HAL_HSEM_ActivateNotification>
    HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_TX_WAKEUP));
 81007f8:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 81007fc:	f00a fe84 	bl	810b508 <HAL_HSEM_ActivateNotification>
    return 0;
 8100800:	2300      	movs	r3, #0
}
 8100802:	4618      	mov	r0, r3
 8100804:	bd80      	pop	{r7, pc}
	...

08100808 <prvCoreInterruptHandler>:

static void prvCoreInterruptHandler(void)
{
 8100808:	b580      	push	{r7, lr}
 810080a:	b082      	sub	sp, #8
 810080c:	af00      	add	r7, sp, #0
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 810080e:	2300      	movs	r3, #0
 8100810:	607b      	str	r3, [r7, #4]

    if (!xrx_data_buf)
 8100812:	4b0d      	ldr	r3, [pc, #52]	@ (8100848 <prvCoreInterruptHandler+0x40>)
 8100814:	681b      	ldr	r3, [r3, #0]
 8100816:	2b00      	cmp	r3, #0
 8100818:	d012      	beq.n	8100840 <prvCoreInterruptHandler+0x38>
    {
    	return;
    }

	xMessageBufferSendCompletedFromISR(xrx_data_buf, &xHigherPriorityTaskWoken);
 810081a:	4b0b      	ldr	r3, [pc, #44]	@ (8100848 <prvCoreInterruptHandler+0x40>)
 810081c:	681b      	ldr	r3, [r3, #0]
 810081e:	1d3a      	adds	r2, r7, #4
 8100820:	4611      	mov	r1, r2
 8100822:	4618      	mov	r0, r3
 8100824:	f011 fdf2 	bl	811240c <xStreamBufferSendCompletedFromISR>

    /* Normal FreeRTOS yield from interrupt semantics, where
       xHigherPriorityTaskWoken is initialzed to pdFALSE and will then get set
       to pdTRUE if the interrupt safe API unblocks a task that has a priority
       above that of the currently executing task. */
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8100828:	687b      	ldr	r3, [r7, #4]
 810082a:	2b00      	cmp	r3, #0
 810082c:	d009      	beq.n	8100842 <prvCoreInterruptHandler+0x3a>
 810082e:	4b07      	ldr	r3, [pc, #28]	@ (810084c <prvCoreInterruptHandler+0x44>)
 8100830:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8100834:	601a      	str	r2, [r3, #0]
 8100836:	f3bf 8f4f 	dsb	sy
 810083a:	f3bf 8f6f 	isb	sy
 810083e:	e000      	b.n	8100842 <prvCoreInterruptHandler+0x3a>
    	return;
 8100840:	bf00      	nop
}
 8100842:	3708      	adds	r7, #8
 8100844:	46bd      	mov	sp, r7
 8100846:	bd80      	pop	{r7, pc}
 8100848:	38000000 	.word	0x38000000
 810084c:	e000ed04 	.word	0xe000ed04

08100850 <prvCoreWakeupInterruptHandler>:

static void prvCoreWakeupInterruptHandler(void)
{
 8100850:	b580      	push	{r7, lr}
 8100852:	b082      	sub	sp, #8
 8100854:	af00      	add	r7, sp, #0
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8100856:	2300      	movs	r3, #0
 8100858:	607b      	str	r3, [r7, #4]

    if (!xtx_data_buf)
 810085a:	4b0d      	ldr	r3, [pc, #52]	@ (8100890 <prvCoreWakeupInterruptHandler+0x40>)
 810085c:	685b      	ldr	r3, [r3, #4]
 810085e:	2b00      	cmp	r3, #0
 8100860:	d012      	beq.n	8100888 <prvCoreWakeupInterruptHandler+0x38>
    {
    	return;
    }

	xMessageBufferReceiveCompletedFromISR(xtx_data_buf, &xHigherPriorityTaskWoken);
 8100862:	4b0b      	ldr	r3, [pc, #44]	@ (8100890 <prvCoreWakeupInterruptHandler+0x40>)
 8100864:	685b      	ldr	r3, [r3, #4]
 8100866:	1d3a      	adds	r2, r7, #4
 8100868:	4611      	mov	r1, r2
 810086a:	4618      	mov	r0, r3
 810086c:	f011 fe12 	bl	8112494 <xStreamBufferReceiveCompletedFromISR>

    /* Normal FreeRTOS yield from interrupt semantics, where
       xHigherPriorityTaskWoken is initialzed to pdFALSE and will then get set
       to pdTRUE if the interrupt safe API unblocks a task that has a priority
       above that of the currently executing task. */
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8100870:	687b      	ldr	r3, [r7, #4]
 8100872:	2b00      	cmp	r3, #0
 8100874:	d009      	beq.n	810088a <prvCoreWakeupInterruptHandler+0x3a>
 8100876:	4b07      	ldr	r3, [pc, #28]	@ (8100894 <prvCoreWakeupInterruptHandler+0x44>)
 8100878:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810087c:	601a      	str	r2, [r3, #0]
 810087e:	f3bf 8f4f 	dsb	sy
 8100882:	f3bf 8f6f 	isb	sy
 8100886:	e000      	b.n	810088a <prvCoreWakeupInterruptHandler+0x3a>
    	return;
 8100888:	bf00      	nop
}
 810088a:	3708      	adds	r7, #8
 810088c:	46bd      	mov	sp, r7
 810088e:	bd80      	pop	{r7, pc}
 8100890:	38000000 	.word	0x38000000
 8100894:	e000ed04 	.word	0xe000ed04

08100898 <vGenerateRemoteInterrupt>:

void vGenerateRemoteInterrupt(void * xUpdatedMessageBuffer)
{
 8100898:	b580      	push	{r7, lr}
 810089a:	b084      	sub	sp, #16
 810089c:	af00      	add	r7, sp, #0
 810089e:	6078      	str	r0, [r7, #4]
    MessageBufferHandle_t xUpdatedBuffer =
 81008a0:	687b      	ldr	r3, [r7, #4]
 81008a2:	60fb      	str	r3, [r7, #12]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81008a4:	f3bf 8f4f 	dsb	sy
}
 81008a8:	bf00      	nop
        (MessageBufferHandle_t)xUpdatedMessageBuffer;

	__DSB();
    if (xUpdatedBuffer == xtx_data_buf)
 81008aa:	4b12      	ldr	r3, [pc, #72]	@ (81008f4 <vGenerateRemoteInterrupt+0x5c>)
 81008ac:	685b      	ldr	r3, [r3, #4]
 81008ae:	68fa      	ldr	r2, [r7, #12]
 81008b0:	429a      	cmp	r2, r3
 81008b2:	d10b      	bne.n	81008cc <vGenerateRemoteInterrupt+0x34>
    {

        /* Take the HW Semaphore with Process1 ID  */
        if(HAL_HSEM_Take(HSEM_TX_ID, HSEM_PROCESS) == HAL_OK)
 81008b4:	211b      	movs	r1, #27
 81008b6:	201d      	movs	r0, #29
 81008b8:	f00a fdee 	bl	810b498 <HAL_HSEM_Take>
 81008bc:	4603      	mov	r3, r0
 81008be:	2b00      	cmp	r3, #0
 81008c0:	d114      	bne.n	81008ec <vGenerateRemoteInterrupt+0x54>
        {
            /* Release the HW Semaphore */
            HAL_HSEM_Release(HSEM_TX_ID, HSEM_PROCESS);
 81008c2:	211b      	movs	r1, #27
 81008c4:	201d      	movs	r0, #29
 81008c6:	f00a fe0b 	bl	810b4e0 <HAL_HSEM_Release>
		{
			/* Release the HW Semaphore */
			HAL_HSEM_Release(HSEM_RX_WAKEUP, HSEM_PROCESS);
		}
    }
}
 81008ca:	e00f      	b.n	81008ec <vGenerateRemoteInterrupt+0x54>
    else if(xUpdatedBuffer == xrx_data_buf){
 81008cc:	4b09      	ldr	r3, [pc, #36]	@ (81008f4 <vGenerateRemoteInterrupt+0x5c>)
 81008ce:	681b      	ldr	r3, [r3, #0]
 81008d0:	68fa      	ldr	r2, [r7, #12]
 81008d2:	429a      	cmp	r2, r3
 81008d4:	d10a      	bne.n	81008ec <vGenerateRemoteInterrupt+0x54>
		if(HAL_HSEM_Take(HSEM_RX_WAKEUP, HSEM_PROCESS) == HAL_OK)
 81008d6:	211b      	movs	r1, #27
 81008d8:	201e      	movs	r0, #30
 81008da:	f00a fddd 	bl	810b498 <HAL_HSEM_Take>
 81008de:	4603      	mov	r3, r0
 81008e0:	2b00      	cmp	r3, #0
 81008e2:	d103      	bne.n	81008ec <vGenerateRemoteInterrupt+0x54>
			HAL_HSEM_Release(HSEM_RX_WAKEUP, HSEM_PROCESS);
 81008e4:	211b      	movs	r1, #27
 81008e6:	201e      	movs	r0, #30
 81008e8:	f00a fdfa 	bl	810b4e0 <HAL_HSEM_Release>
}
 81008ec:	bf00      	nop
 81008ee:	3710      	adds	r7, #16
 81008f0:	46bd      	mov	sp, r7
 81008f2:	bd80      	pop	{r7, pc}
 81008f4:	38000000 	.word	0x38000000

081008f8 <ipc_sendmsg>:

size_t ipc_sendmsg(ipc_msg* msg, uint32_t size, int32_t timeout)
{
 81008f8:	b580      	push	{r7, lr}
 81008fa:	b086      	sub	sp, #24
 81008fc:	af00      	add	r7, sp, #0
 81008fe:	60f8      	str	r0, [r7, #12]
 8100900:	60b9      	str	r1, [r7, #8]
 8100902:	607a      	str	r2, [r7, #4]
	size_t len;

    if(xtx_data_buf == 0)
 8100904:	4b0f      	ldr	r3, [pc, #60]	@ (8100944 <ipc_sendmsg+0x4c>)
 8100906:	685b      	ldr	r3, [r3, #4]
 8100908:	2b00      	cmp	r3, #0
 810090a:	d101      	bne.n	8100910 <ipc_sendmsg+0x18>
      return 0;
 810090c:	2300      	movs	r3, #0
 810090e:	e015      	b.n	810093c <ipc_sendmsg+0x44>

    if(timeout < 0)
 8100910:	687b      	ldr	r3, [r7, #4]
 8100912:	2b00      	cmp	r3, #0
 8100914:	da09      	bge.n	810092a <ipc_sendmsg+0x32>
    	len = xMessageBufferSend(xtx_data_buf, msg, size, portMAX_DELAY);
 8100916:	4b0b      	ldr	r3, [pc, #44]	@ (8100944 <ipc_sendmsg+0x4c>)
 8100918:	6858      	ldr	r0, [r3, #4]
 810091a:	f04f 33ff 	mov.w	r3, #4294967295
 810091e:	68ba      	ldr	r2, [r7, #8]
 8100920:	68f9      	ldr	r1, [r7, #12]
 8100922:	f011 fbd1 	bl	81120c8 <xStreamBufferSend>
 8100926:	6178      	str	r0, [r7, #20]
 8100928:	e007      	b.n	810093a <ipc_sendmsg+0x42>
    else
    	len = xMessageBufferSend(xtx_data_buf, msg, size, (TickType_t)timeout);
 810092a:	4b06      	ldr	r3, [pc, #24]	@ (8100944 <ipc_sendmsg+0x4c>)
 810092c:	6858      	ldr	r0, [r3, #4]
 810092e:	687b      	ldr	r3, [r7, #4]
 8100930:	68ba      	ldr	r2, [r7, #8]
 8100932:	68f9      	ldr	r1, [r7, #12]
 8100934:	f011 fbc8 	bl	81120c8 <xStreamBufferSend>
 8100938:	6178      	str	r0, [r7, #20]

    return len;
 810093a:	697b      	ldr	r3, [r7, #20]
}
 810093c:	4618      	mov	r0, r3
 810093e:	3718      	adds	r7, #24
 8100940:	46bd      	mov	sp, r7
 8100942:	bd80      	pop	{r7, pc}
 8100944:	38000000 	.word	0x38000000

08100948 <ipc_recvmsg>:

size_t ipc_recvmsg(ipc_msg* msg, uint32_t size, int32_t timeout)
{
 8100948:	b580      	push	{r7, lr}
 810094a:	b086      	sub	sp, #24
 810094c:	af00      	add	r7, sp, #0
 810094e:	60f8      	str	r0, [r7, #12]
 8100950:	60b9      	str	r1, [r7, #8]
 8100952:	607a      	str	r2, [r7, #4]
    size_t len;

    if (timeout < 0)
 8100954:	687b      	ldr	r3, [r7, #4]
 8100956:	2b00      	cmp	r3, #0
 8100958:	da09      	bge.n	810096e <ipc_recvmsg+0x26>
        len = xMessageBufferReceive(xrx_data_buf, msg, size, portMAX_DELAY);
 810095a:	4b0b      	ldr	r3, [pc, #44]	@ (8100988 <ipc_recvmsg+0x40>)
 810095c:	6818      	ldr	r0, [r3, #0]
 810095e:	f04f 33ff 	mov.w	r3, #4294967295
 8100962:	68ba      	ldr	r2, [r7, #8]
 8100964:	68f9      	ldr	r1, [r7, #12]
 8100966:	f011 fc96 	bl	8112296 <xStreamBufferReceive>
 810096a:	6178      	str	r0, [r7, #20]
 810096c:	e007      	b.n	810097e <ipc_recvmsg+0x36>
    else
        len = xMessageBufferReceive(xrx_data_buf, msg, size, (TickType_t)timeout);
 810096e:	4b06      	ldr	r3, [pc, #24]	@ (8100988 <ipc_recvmsg+0x40>)
 8100970:	6818      	ldr	r0, [r3, #0]
 8100972:	687b      	ldr	r3, [r7, #4]
 8100974:	68ba      	ldr	r2, [r7, #8]
 8100976:	68f9      	ldr	r1, [r7, #12]
 8100978:	f011 fc8d 	bl	8112296 <xStreamBufferReceive>
 810097c:	6178      	str	r0, [r7, #20]

    return len;
 810097e:	697b      	ldr	r3, [r7, #20]
}
 8100980:	4618      	mov	r0, r3
 8100982:	3718      	adds	r7, #24
 8100984:	46bd      	mov	sp, r7
 8100986:	bd80      	pop	{r7, pc}
 8100988:	38000000 	.word	0x38000000

0810098c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 810098c:	b580      	push	{r7, lr}
 810098e:	b082      	sub	sp, #8
 8100990:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 1 */
    /* USER CODE END 1 */

    /* USER CODE BEGIN Boot_Mode_Sequence_1 */
    /*HW semaphore Clock enable*/
    __HAL_RCC_HSEM_CLK_ENABLE();
 8100992:	4b34      	ldr	r3, [pc, #208]	@ (8100a64 <main+0xd8>)
 8100994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100998:	4a32      	ldr	r2, [pc, #200]	@ (8100a64 <main+0xd8>)
 810099a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810099e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81009a2:	4b30      	ldr	r3, [pc, #192]	@ (8100a64 <main+0xd8>)
 81009a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81009a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81009ac:	607b      	str	r3, [r7, #4]
 81009ae:	687b      	ldr	r3, [r7, #4]
    /* Activate HSEM notification for Cortex-M4*/
    HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81009b0:	2001      	movs	r0, #1
 81009b2:	f00a fda9 	bl	810b508 <HAL_HSEM_ActivateNotification>
    /*
    Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
    perform system initialization (system clock config, external memory configuration.. )
    */
    HAL_PWREx_ClearPendingEvent();
 81009b6:	f00b fb43 	bl	810c040 <HAL_PWREx_ClearPendingEvent>
    HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81009ba:	2201      	movs	r2, #1
 81009bc:	2102      	movs	r1, #2
 81009be:	2000      	movs	r0, #0
 81009c0:	f00b fac4 	bl	810bf4c <HAL_PWREx_EnterSTOPMode>
    /* Clear HSEM flag */
    __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81009c4:	4b28      	ldr	r3, [pc, #160]	@ (8100a68 <main+0xdc>)
 81009c6:	681b      	ldr	r3, [r3, #0]
 81009c8:	091b      	lsrs	r3, r3, #4
 81009ca:	f003 030f 	and.w	r3, r3, #15
 81009ce:	2b07      	cmp	r3, #7
 81009d0:	d108      	bne.n	81009e4 <main+0x58>
 81009d2:	4b26      	ldr	r3, [pc, #152]	@ (8100a6c <main+0xe0>)
 81009d4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 81009d8:	4a24      	ldr	r2, [pc, #144]	@ (8100a6c <main+0xe0>)
 81009da:	f043 0301 	orr.w	r3, r3, #1
 81009de:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 81009e2:	e007      	b.n	81009f4 <main+0x68>
 81009e4:	4b21      	ldr	r3, [pc, #132]	@ (8100a6c <main+0xe0>)
 81009e6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 81009ea:	4a20      	ldr	r2, [pc, #128]	@ (8100a6c <main+0xe0>)
 81009ec:	f043 0301 	orr.w	r3, r3, #1
 81009f0:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

    /* USER CODE END Boot_Mode_Sequence_1 */
    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 81009f4:	f008 fb92 	bl	810911c <HAL_Init>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_MDMA_Init();
 81009f8:	f000 f904 	bl	8100c04 <_ZL12MX_MDMA_Initv>
    MX_GPIO_Init();
 81009fc:	f000 f91c 	bl	8100c38 <_ZL12MX_GPIO_Initv>
    MX_I2C4_Init();
 8100a00:	f000 f852 	bl	8100aa8 <_ZL12MX_I2C4_Initv>
    MX_USART1_UART_Init();
 8100a04:	f000 f89e 	bl	8100b44 <MX_USART1_UART_Init>
    /* USER CODE BEGIN 2 */
    ipc_init();
 8100a08:	f7ff fec6 	bl	8100798 <ipc_init>
    /* USER CODE END 2 */

    /* Init scheduler */
    osKernelInitialize();
 8100a0c:	f00f f826 	bl	810fa5c <osKernelInitialize>

    /* USER CODE BEGIN RTOS_MUTEX */
    /* add mutexes, ... */\
	printMutexHandle = osMutexNew(&printMutex_attributes);
 8100a10:	4817      	ldr	r0, [pc, #92]	@ (8100a70 <main+0xe4>)
 8100a12:	f00f f92f 	bl	810fc74 <osMutexNew>
 8100a16:	4603      	mov	r3, r0
 8100a18:	4a16      	ldr	r2, [pc, #88]	@ (8100a74 <main+0xe8>)
 8100a1a:	6013      	str	r3, [r2, #0]
    /* add queues, ... */
    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* creation of Task_EDaemonN */
    Task_EDaemonNHandle = osThreadNew(StartTask_EDaemonN, NULL, &Task_EDaemonN_attributes);
 8100a1c:	4a16      	ldr	r2, [pc, #88]	@ (8100a78 <main+0xec>)
 8100a1e:	2100      	movs	r1, #0
 8100a20:	4816      	ldr	r0, [pc, #88]	@ (8100a7c <main+0xf0>)
 8100a22:	f00f f87a 	bl	810fb1a <osThreadNew>
 8100a26:	4603      	mov	r3, r0
 8100a28:	4a15      	ldr	r2, [pc, #84]	@ (8100a80 <main+0xf4>)
 8100a2a:	6013      	str	r3, [r2, #0]

    /* creation of Task_EventMgrM4 */
    Task_EventMgrM4Handle = osThreadNew(StartTask_EventMgrM4, NULL, &Task_EventMgrM4_attributes);
 8100a2c:	4a15      	ldr	r2, [pc, #84]	@ (8100a84 <main+0xf8>)
 8100a2e:	2100      	movs	r1, #0
 8100a30:	4815      	ldr	r0, [pc, #84]	@ (8100a88 <main+0xfc>)
 8100a32:	f00f f872 	bl	810fb1a <osThreadNew>
 8100a36:	4603      	mov	r3, r0
 8100a38:	4a14      	ldr	r2, [pc, #80]	@ (8100a8c <main+0x100>)
 8100a3a:	6013      	str	r3, [r2, #0]

    /* creation of Task_EConnMgr */
    Task_EConnMgrHandle = osThreadNew(StartTask_EthernetConnMgr, NULL, &Task_EConnMgr_attributes);
 8100a3c:	4a14      	ldr	r2, [pc, #80]	@ (8100a90 <main+0x104>)
 8100a3e:	2100      	movs	r1, #0
 8100a40:	4814      	ldr	r0, [pc, #80]	@ (8100a94 <main+0x108>)
 8100a42:	f00f f86a 	bl	810fb1a <osThreadNew>
 8100a46:	4603      	mov	r3, r0
 8100a48:	4a13      	ldr	r2, [pc, #76]	@ (8100a98 <main+0x10c>)
 8100a4a:	6013      	str	r3, [r2, #0]

    /* creation of Task_CTemp */
    Task_CTempHandle = osThreadNew(StartTask_CTemp, NULL, &Task_CTemp_attributes);
 8100a4c:	4a13      	ldr	r2, [pc, #76]	@ (8100a9c <main+0x110>)
 8100a4e:	2100      	movs	r1, #0
 8100a50:	4813      	ldr	r0, [pc, #76]	@ (8100aa0 <main+0x114>)
 8100a52:	f00f f862 	bl	810fb1a <osThreadNew>
 8100a56:	4603      	mov	r3, r0
 8100a58:	4a12      	ldr	r2, [pc, #72]	@ (8100aa4 <main+0x118>)
 8100a5a:	6013      	str	r3, [r2, #0]
    /* USER CODE BEGIN RTOS_EVENTS */
    /* add events, ... */
    /* USER CODE END RTOS_EVENTS */

    /* Start scheduler */
    osKernelStart();
 8100a5c:	f00f f822 	bl	810faa4 <osKernelStart>

    /* We should never get here as control is now taken by the scheduler */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
 8100a60:	bf00      	nop
 8100a62:	e7fd      	b.n	8100a60 <main+0xd4>
 8100a64:	58024400 	.word	0x58024400
 8100a68:	e000ed00 	.word	0xe000ed00
 8100a6c:	58026400 	.word	0x58026400
 8100a70:	0812894c 	.word	0x0812894c
 8100a74:	100001ac 	.word	0x100001ac
 8100a78:	081288bc 	.word	0x081288bc
 8100a7c:	081057fd 	.word	0x081057fd
 8100a80:	1000019c 	.word	0x1000019c
 8100a84:	081288e0 	.word	0x081288e0
 8100a88:	08103275 	.word	0x08103275
 8100a8c:	100001a0 	.word	0x100001a0
 8100a90:	08128904 	.word	0x08128904
 8100a94:	081013e1 	.word	0x081013e1
 8100a98:	100001a4 	.word	0x100001a4
 8100a9c:	08128928 	.word	0x08128928
 8100aa0:	08106b15 	.word	0x08106b15
 8100aa4:	100001a8 	.word	0x100001a8

08100aa8 <_ZL12MX_I2C4_Initv>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8100aa8:	b580      	push	{r7, lr}
 8100aaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8100aac:	4b22      	ldr	r3, [pc, #136]	@ (8100b38 <_ZL12MX_I2C4_Initv+0x90>)
 8100aae:	4a23      	ldr	r2, [pc, #140]	@ (8100b3c <_ZL12MX_I2C4_Initv+0x94>)
 8100ab0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10C0ECFF;
 8100ab2:	4b21      	ldr	r3, [pc, #132]	@ (8100b38 <_ZL12MX_I2C4_Initv+0x90>)
 8100ab4:	4a22      	ldr	r2, [pc, #136]	@ (8100b40 <_ZL12MX_I2C4_Initv+0x98>)
 8100ab6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8100ab8:	4b1f      	ldr	r3, [pc, #124]	@ (8100b38 <_ZL12MX_I2C4_Initv+0x90>)
 8100aba:	2200      	movs	r2, #0
 8100abc:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8100abe:	4b1e      	ldr	r3, [pc, #120]	@ (8100b38 <_ZL12MX_I2C4_Initv+0x90>)
 8100ac0:	2201      	movs	r2, #1
 8100ac2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8100ac4:	4b1c      	ldr	r3, [pc, #112]	@ (8100b38 <_ZL12MX_I2C4_Initv+0x90>)
 8100ac6:	2200      	movs	r2, #0
 8100ac8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8100aca:	4b1b      	ldr	r3, [pc, #108]	@ (8100b38 <_ZL12MX_I2C4_Initv+0x90>)
 8100acc:	2200      	movs	r2, #0
 8100ace:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8100ad0:	4b19      	ldr	r3, [pc, #100]	@ (8100b38 <_ZL12MX_I2C4_Initv+0x90>)
 8100ad2:	2200      	movs	r2, #0
 8100ad4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8100ad6:	4b18      	ldr	r3, [pc, #96]	@ (8100b38 <_ZL12MX_I2C4_Initv+0x90>)
 8100ad8:	2200      	movs	r2, #0
 8100ada:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8100adc:	4b16      	ldr	r3, [pc, #88]	@ (8100b38 <_ZL12MX_I2C4_Initv+0x90>)
 8100ade:	2200      	movs	r2, #0
 8100ae0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8100ae2:	4815      	ldr	r0, [pc, #84]	@ (8100b38 <_ZL12MX_I2C4_Initv+0x90>)
 8100ae4:	f00a fd3c 	bl	810b560 <HAL_I2C_Init>
 8100ae8:	4603      	mov	r3, r0
 8100aea:	2b00      	cmp	r3, #0
 8100aec:	bf14      	ite	ne
 8100aee:	2301      	movne	r3, #1
 8100af0:	2300      	moveq	r3, #0
 8100af2:	b2db      	uxtb	r3, r3
 8100af4:	2b00      	cmp	r3, #0
 8100af6:	d001      	beq.n	8100afc <_ZL12MX_I2C4_Initv+0x54>
  {
    Error_Handler();
 8100af8:	f000 f936 	bl	8100d68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8100afc:	2100      	movs	r1, #0
 8100afe:	480e      	ldr	r0, [pc, #56]	@ (8100b38 <_ZL12MX_I2C4_Initv+0x90>)
 8100b00:	f00b f98c 	bl	810be1c <HAL_I2CEx_ConfigAnalogFilter>
 8100b04:	4603      	mov	r3, r0
 8100b06:	2b00      	cmp	r3, #0
 8100b08:	bf14      	ite	ne
 8100b0a:	2301      	movne	r3, #1
 8100b0c:	2300      	moveq	r3, #0
 8100b0e:	b2db      	uxtb	r3, r3
 8100b10:	2b00      	cmp	r3, #0
 8100b12:	d001      	beq.n	8100b18 <_ZL12MX_I2C4_Initv+0x70>
  {
    Error_Handler();
 8100b14:	f000 f928 	bl	8100d68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 2) != HAL_OK)
 8100b18:	2102      	movs	r1, #2
 8100b1a:	4807      	ldr	r0, [pc, #28]	@ (8100b38 <_ZL12MX_I2C4_Initv+0x90>)
 8100b1c:	f00b f9c9 	bl	810beb2 <HAL_I2CEx_ConfigDigitalFilter>
 8100b20:	4603      	mov	r3, r0
 8100b22:	2b00      	cmp	r3, #0
 8100b24:	bf14      	ite	ne
 8100b26:	2301      	movne	r3, #1
 8100b28:	2300      	moveq	r3, #0
 8100b2a:	b2db      	uxtb	r3, r3
 8100b2c:	2b00      	cmp	r3, #0
 8100b2e:	d001      	beq.n	8100b34 <_ZL12MX_I2C4_Initv+0x8c>
  {
    Error_Handler();
 8100b30:	f000 f91a 	bl	8100d68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8100b34:	bf00      	nop
 8100b36:	bd80      	pop	{r7, pc}
 8100b38:	100000b4 	.word	0x100000b4
 8100b3c:	58001c00 	.word	0x58001c00
 8100b40:	10c0ecff 	.word	0x10c0ecff

08100b44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8100b44:	b580      	push	{r7, lr}
 8100b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8100b48:	4b2c      	ldr	r3, [pc, #176]	@ (8100bfc <MX_USART1_UART_Init+0xb8>)
 8100b4a:	4a2d      	ldr	r2, [pc, #180]	@ (8100c00 <MX_USART1_UART_Init+0xbc>)
 8100b4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8100b4e:	4b2b      	ldr	r3, [pc, #172]	@ (8100bfc <MX_USART1_UART_Init+0xb8>)
 8100b50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8100b54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8100b56:	4b29      	ldr	r3, [pc, #164]	@ (8100bfc <MX_USART1_UART_Init+0xb8>)
 8100b58:	2200      	movs	r2, #0
 8100b5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8100b5c:	4b27      	ldr	r3, [pc, #156]	@ (8100bfc <MX_USART1_UART_Init+0xb8>)
 8100b5e:	2200      	movs	r2, #0
 8100b60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8100b62:	4b26      	ldr	r3, [pc, #152]	@ (8100bfc <MX_USART1_UART_Init+0xb8>)
 8100b64:	2200      	movs	r2, #0
 8100b66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8100b68:	4b24      	ldr	r3, [pc, #144]	@ (8100bfc <MX_USART1_UART_Init+0xb8>)
 8100b6a:	220c      	movs	r2, #12
 8100b6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8100b6e:	4b23      	ldr	r3, [pc, #140]	@ (8100bfc <MX_USART1_UART_Init+0xb8>)
 8100b70:	2200      	movs	r2, #0
 8100b72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8100b74:	4b21      	ldr	r3, [pc, #132]	@ (8100bfc <MX_USART1_UART_Init+0xb8>)
 8100b76:	2200      	movs	r2, #0
 8100b78:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8100b7a:	4b20      	ldr	r3, [pc, #128]	@ (8100bfc <MX_USART1_UART_Init+0xb8>)
 8100b7c:	2200      	movs	r2, #0
 8100b7e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8100b80:	4b1e      	ldr	r3, [pc, #120]	@ (8100bfc <MX_USART1_UART_Init+0xb8>)
 8100b82:	2200      	movs	r2, #0
 8100b84:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8100b86:	4b1d      	ldr	r3, [pc, #116]	@ (8100bfc <MX_USART1_UART_Init+0xb8>)
 8100b88:	2200      	movs	r2, #0
 8100b8a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8100b8c:	481b      	ldr	r0, [pc, #108]	@ (8100bfc <MX_USART1_UART_Init+0xb8>)
 8100b8e:	f00d fdb9 	bl	810e704 <HAL_UART_Init>
 8100b92:	4603      	mov	r3, r0
 8100b94:	2b00      	cmp	r3, #0
 8100b96:	bf14      	ite	ne
 8100b98:	2301      	movne	r3, #1
 8100b9a:	2300      	moveq	r3, #0
 8100b9c:	b2db      	uxtb	r3, r3
 8100b9e:	2b00      	cmp	r3, #0
 8100ba0:	d001      	beq.n	8100ba6 <MX_USART1_UART_Init+0x62>
  {
    Error_Handler();
 8100ba2:	f000 f8e1 	bl	8100d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100ba6:	2100      	movs	r1, #0
 8100ba8:	4814      	ldr	r0, [pc, #80]	@ (8100bfc <MX_USART1_UART_Init+0xb8>)
 8100baa:	f00e fe49 	bl	810f840 <HAL_UARTEx_SetTxFifoThreshold>
 8100bae:	4603      	mov	r3, r0
 8100bb0:	2b00      	cmp	r3, #0
 8100bb2:	bf14      	ite	ne
 8100bb4:	2301      	movne	r3, #1
 8100bb6:	2300      	moveq	r3, #0
 8100bb8:	b2db      	uxtb	r3, r3
 8100bba:	2b00      	cmp	r3, #0
 8100bbc:	d001      	beq.n	8100bc2 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8100bbe:	f000 f8d3 	bl	8100d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100bc2:	2100      	movs	r1, #0
 8100bc4:	480d      	ldr	r0, [pc, #52]	@ (8100bfc <MX_USART1_UART_Init+0xb8>)
 8100bc6:	f00e fe79 	bl	810f8bc <HAL_UARTEx_SetRxFifoThreshold>
 8100bca:	4603      	mov	r3, r0
 8100bcc:	2b00      	cmp	r3, #0
 8100bce:	bf14      	ite	ne
 8100bd0:	2301      	movne	r3, #1
 8100bd2:	2300      	moveq	r3, #0
 8100bd4:	b2db      	uxtb	r3, r3
 8100bd6:	2b00      	cmp	r3, #0
 8100bd8:	d001      	beq.n	8100bde <MX_USART1_UART_Init+0x9a>
  {
    Error_Handler();
 8100bda:	f000 f8c5 	bl	8100d68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8100bde:	4807      	ldr	r0, [pc, #28]	@ (8100bfc <MX_USART1_UART_Init+0xb8>)
 8100be0:	f00e fdf5 	bl	810f7ce <HAL_UARTEx_DisableFifoMode>
 8100be4:	4603      	mov	r3, r0
 8100be6:	2b00      	cmp	r3, #0
 8100be8:	bf14      	ite	ne
 8100bea:	2301      	movne	r3, #1
 8100bec:	2300      	moveq	r3, #0
 8100bee:	b2db      	uxtb	r3, r3
 8100bf0:	2b00      	cmp	r3, #0
 8100bf2:	d001      	beq.n	8100bf8 <MX_USART1_UART_Init+0xb4>
  {
    Error_Handler();
 8100bf4:	f000 f8b8 	bl	8100d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8100bf8:	bf00      	nop
 8100bfa:	bd80      	pop	{r7, pc}
 8100bfc:	10000108 	.word	0x10000108
 8100c00:	40011000 	.word	0x40011000

08100c04 <_ZL12MX_MDMA_Initv>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 8100c04:	b480      	push	{r7}
 8100c06:	b083      	sub	sp, #12
 8100c08:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8100c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8100c34 <_ZL12MX_MDMA_Initv+0x30>)
 8100c0c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8100c10:	4a08      	ldr	r2, [pc, #32]	@ (8100c34 <_ZL12MX_MDMA_Initv+0x30>)
 8100c12:	f043 0301 	orr.w	r3, r3, #1
 8100c16:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8100c1a:	4b06      	ldr	r3, [pc, #24]	@ (8100c34 <_ZL12MX_MDMA_Initv+0x30>)
 8100c1c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8100c20:	f003 0301 	and.w	r3, r3, #1
 8100c24:	607b      	str	r3, [r7, #4]
 8100c26:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

}
 8100c28:	bf00      	nop
 8100c2a:	370c      	adds	r7, #12
 8100c2c:	46bd      	mov	sp, r7
 8100c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c32:	4770      	bx	lr
 8100c34:	58024400 	.word	0x58024400

08100c38 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100c38:	b480      	push	{r7}
 8100c3a:	b089      	sub	sp, #36	@ 0x24
 8100c3c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8100c3e:	4b37      	ldr	r3, [pc, #220]	@ (8100d1c <_ZL12MX_GPIO_Initv+0xe4>)
 8100c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100c44:	4a35      	ldr	r2, [pc, #212]	@ (8100d1c <_ZL12MX_GPIO_Initv+0xe4>)
 8100c46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8100c4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100c4e:	4b33      	ldr	r3, [pc, #204]	@ (8100d1c <_ZL12MX_GPIO_Initv+0xe4>)
 8100c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8100c58:	61fb      	str	r3, [r7, #28]
 8100c5a:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100c5c:	4b2f      	ldr	r3, [pc, #188]	@ (8100d1c <_ZL12MX_GPIO_Initv+0xe4>)
 8100c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100c62:	4a2e      	ldr	r2, [pc, #184]	@ (8100d1c <_ZL12MX_GPIO_Initv+0xe4>)
 8100c64:	f043 0310 	orr.w	r3, r3, #16
 8100c68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100c6c:	4b2b      	ldr	r3, [pc, #172]	@ (8100d1c <_ZL12MX_GPIO_Initv+0xe4>)
 8100c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100c72:	f003 0310 	and.w	r3, r3, #16
 8100c76:	61bb      	str	r3, [r7, #24]
 8100c78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8100c7a:	4b28      	ldr	r3, [pc, #160]	@ (8100d1c <_ZL12MX_GPIO_Initv+0xe4>)
 8100c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100c80:	4a26      	ldr	r2, [pc, #152]	@ (8100d1c <_ZL12MX_GPIO_Initv+0xe4>)
 8100c82:	f043 0304 	orr.w	r3, r3, #4
 8100c86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100c8a:	4b24      	ldr	r3, [pc, #144]	@ (8100d1c <_ZL12MX_GPIO_Initv+0xe4>)
 8100c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100c90:	f003 0304 	and.w	r3, r3, #4
 8100c94:	617b      	str	r3, [r7, #20]
 8100c96:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100c98:	4b20      	ldr	r3, [pc, #128]	@ (8100d1c <_ZL12MX_GPIO_Initv+0xe4>)
 8100c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100c9e:	4a1f      	ldr	r2, [pc, #124]	@ (8100d1c <_ZL12MX_GPIO_Initv+0xe4>)
 8100ca0:	f043 0301 	orr.w	r3, r3, #1
 8100ca4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100ca8:	4b1c      	ldr	r3, [pc, #112]	@ (8100d1c <_ZL12MX_GPIO_Initv+0xe4>)
 8100caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100cae:	f003 0301 	and.w	r3, r3, #1
 8100cb2:	613b      	str	r3, [r7, #16]
 8100cb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100cb6:	4b19      	ldr	r3, [pc, #100]	@ (8100d1c <_ZL12MX_GPIO_Initv+0xe4>)
 8100cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100cbc:	4a17      	ldr	r2, [pc, #92]	@ (8100d1c <_ZL12MX_GPIO_Initv+0xe4>)
 8100cbe:	f043 0302 	orr.w	r3, r3, #2
 8100cc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100cc6:	4b15      	ldr	r3, [pc, #84]	@ (8100d1c <_ZL12MX_GPIO_Initv+0xe4>)
 8100cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100ccc:	f003 0302 	and.w	r3, r3, #2
 8100cd0:	60fb      	str	r3, [r7, #12]
 8100cd2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8100cd4:	4b11      	ldr	r3, [pc, #68]	@ (8100d1c <_ZL12MX_GPIO_Initv+0xe4>)
 8100cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100cda:	4a10      	ldr	r2, [pc, #64]	@ (8100d1c <_ZL12MX_GPIO_Initv+0xe4>)
 8100cdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8100ce0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100ce4:	4b0d      	ldr	r3, [pc, #52]	@ (8100d1c <_ZL12MX_GPIO_Initv+0xe4>)
 8100ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8100cee:	60bb      	str	r3, [r7, #8]
 8100cf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8100d1c <_ZL12MX_GPIO_Initv+0xe4>)
 8100cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100cf8:	4a08      	ldr	r2, [pc, #32]	@ (8100d1c <_ZL12MX_GPIO_Initv+0xe4>)
 8100cfa:	f043 0308 	orr.w	r3, r3, #8
 8100cfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100d02:	4b06      	ldr	r3, [pc, #24]	@ (8100d1c <_ZL12MX_GPIO_Initv+0xe4>)
 8100d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100d08:	f003 0308 	and.w	r3, r3, #8
 8100d0c:	607b      	str	r3, [r7, #4]
 8100d0e:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8100d10:	bf00      	nop
 8100d12:	3724      	adds	r7, #36	@ 0x24
 8100d14:	46bd      	mov	sp, r7
 8100d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d1a:	4770      	bx	lr
 8100d1c:	58024400 	.word	0x58024400

08100d20 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  *   None
  * @retval None
  */
extern "C" int __io_putchar(int ch)
{
 8100d20:	b580      	push	{r7, lr}
 8100d22:	b082      	sub	sp, #8
 8100d24:	af00      	add	r7, sp, #0
 8100d26:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the USART1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8100d28:	1d39      	adds	r1, r7, #4
 8100d2a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8100d2e:	2201      	movs	r2, #1
 8100d30:	4803      	ldr	r0, [pc, #12]	@ (8100d40 <__io_putchar+0x20>)
 8100d32:	f00d fd37 	bl	810e7a4 <HAL_UART_Transmit>

    return ch;
 8100d36:	687b      	ldr	r3, [r7, #4]
}
 8100d38:	4618      	mov	r0, r3
 8100d3a:	3708      	adds	r7, #8
 8100d3c:	46bd      	mov	sp, r7
 8100d3e:	bd80      	pop	{r7, pc}
 8100d40:	10000108 	.word	0x10000108

08100d44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8100d44:	b580      	push	{r7, lr}
 8100d46:	b082      	sub	sp, #8
 8100d48:	af00      	add	r7, sp, #0
 8100d4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8100d4c:	687b      	ldr	r3, [r7, #4]
 8100d4e:	681b      	ldr	r3, [r3, #0]
 8100d50:	4a04      	ldr	r2, [pc, #16]	@ (8100d64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8100d52:	4293      	cmp	r3, r2
 8100d54:	d101      	bne.n	8100d5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8100d56:	f008 fa3f 	bl	81091d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8100d5a:	bf00      	nop
 8100d5c:	3708      	adds	r7, #8
 8100d5e:	46bd      	mov	sp, r7
 8100d60:	bd80      	pop	{r7, pc}
 8100d62:	bf00      	nop
 8100d64:	40001000 	.word	0x40001000

08100d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100d68:	b480      	push	{r7}
 8100d6a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8100d6c:	b672      	cpsid	i
}
 8100d6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100d70:	bf00      	nop
 8100d72:	e7fd      	b.n	8100d70 <Error_Handler+0x8>

08100d74 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8100d74:	b580      	push	{r7, lr}
 8100d76:	b082      	sub	sp, #8
 8100d78:	af00      	add	r7, sp, #0
 8100d7a:	6078      	str	r0, [r7, #4]
 8100d7c:	6039      	str	r1, [r7, #0]
 8100d7e:	687b      	ldr	r3, [r7, #4]
 8100d80:	2b01      	cmp	r3, #1
 8100d82:	d124      	bne.n	8100dce <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8100d84:	683b      	ldr	r3, [r7, #0]
 8100d86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8100d8a:	4293      	cmp	r3, r2
 8100d8c:	d11f      	bne.n	8100dce <_Z41__static_initialization_and_destruction_0ii+0x5a>
QueueHandle_t queueToEventManagerCM4 = xQueueCreate(64, sizeof(SMessage));
 8100d8e:	2200      	movs	r2, #0
 8100d90:	211c      	movs	r1, #28
 8100d92:	2040      	movs	r0, #64	@ 0x40
 8100d94:	f010 f8e1 	bl	8110f5a <xQueueGenericCreate>
 8100d98:	4603      	mov	r3, r0
 8100d9a:	4a0f      	ldr	r2, [pc, #60]	@ (8100dd8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8100d9c:	6013      	str	r3, [r2, #0]
QueueHandle_t queueToNativeDaemon = xQueueCreate(16, sizeof(SMessage));
 8100d9e:	2200      	movs	r2, #0
 8100da0:	211c      	movs	r1, #28
 8100da2:	2010      	movs	r0, #16
 8100da4:	f010 f8d9 	bl	8110f5a <xQueueGenericCreate>
 8100da8:	4603      	mov	r3, r0
 8100daa:	4a0c      	ldr	r2, [pc, #48]	@ (8100ddc <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8100dac:	6013      	str	r3, [r2, #0]
QueueHandle_t queueToEthernetConnMgr = xQueueCreate(16, sizeof(SMessage));
 8100dae:	2200      	movs	r2, #0
 8100db0:	211c      	movs	r1, #28
 8100db2:	2010      	movs	r0, #16
 8100db4:	f010 f8d1 	bl	8110f5a <xQueueGenericCreate>
 8100db8:	4603      	mov	r3, r0
 8100dba:	4a09      	ldr	r2, [pc, #36]	@ (8100de0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8100dbc:	6013      	str	r3, [r2, #0]
QueueHandle_t queueToTemperature = xQueueCreate(4, sizeof(SMessage));
 8100dbe:	2200      	movs	r2, #0
 8100dc0:	211c      	movs	r1, #28
 8100dc2:	2004      	movs	r0, #4
 8100dc4:	f010 f8c9 	bl	8110f5a <xQueueGenericCreate>
 8100dc8:	4603      	mov	r3, r0
 8100dca:	4a06      	ldr	r2, [pc, #24]	@ (8100de4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8100dcc:	6013      	str	r3, [r2, #0]
}
 8100dce:	bf00      	nop
 8100dd0:	3708      	adds	r7, #8
 8100dd2:	46bd      	mov	sp, r7
 8100dd4:	bd80      	pop	{r7, pc}
 8100dd6:	bf00      	nop
 8100dd8:	100001b0 	.word	0x100001b0
 8100ddc:	100001b4 	.word	0x100001b4
 8100de0:	100001b8 	.word	0x100001b8
 8100de4:	100001bc 	.word	0x100001bc

08100de8 <_GLOBAL__sub_I_hi2c4>:
 8100de8:	b580      	push	{r7, lr}
 8100dea:	af00      	add	r7, sp, #0
 8100dec:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8100df0:	2001      	movs	r0, #1
 8100df2:	f7ff ffbf 	bl	8100d74 <_Z41__static_initialization_and_destruction_0ii>
 8100df6:	bd80      	pop	{r7, pc}

08100df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100df8:	b580      	push	{r7, lr}
 8100dfa:	b082      	sub	sp, #8
 8100dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100dfe:	4b10      	ldr	r3, [pc, #64]	@ (8100e40 <HAL_MspInit+0x48>)
 8100e00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100e04:	4a0e      	ldr	r2, [pc, #56]	@ (8100e40 <HAL_MspInit+0x48>)
 8100e06:	f043 0302 	orr.w	r3, r3, #2
 8100e0a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8100e40 <HAL_MspInit+0x48>)
 8100e10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100e14:	f003 0302 	and.w	r3, r3, #2
 8100e18:	607b      	str	r3, [r7, #4]
 8100e1a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8100e1c:	2200      	movs	r2, #0
 8100e1e:	210f      	movs	r1, #15
 8100e20:	f06f 0001 	mvn.w	r0, #1
 8100e24:	f008 fac4 	bl	81093b0 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 7, 0);
 8100e28:	2200      	movs	r2, #0
 8100e2a:	2107      	movs	r1, #7
 8100e2c:	207e      	movs	r0, #126	@ 0x7e
 8100e2e:	f008 fabf 	bl	81093b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8100e32:	207e      	movs	r0, #126	@ 0x7e
 8100e34:	f008 fad6 	bl	81093e4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100e38:	bf00      	nop
 8100e3a:	3708      	adds	r7, #8
 8100e3c:	46bd      	mov	sp, r7
 8100e3e:	bd80      	pop	{r7, pc}
 8100e40:	58024400 	.word	0x58024400

08100e44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8100e44:	b580      	push	{r7, lr}
 8100e46:	b0bc      	sub	sp, #240	@ 0xf0
 8100e48:	af00      	add	r7, sp, #0
 8100e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100e4c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8100e50:	2200      	movs	r2, #0
 8100e52:	601a      	str	r2, [r3, #0]
 8100e54:	605a      	str	r2, [r3, #4]
 8100e56:	609a      	str	r2, [r3, #8]
 8100e58:	60da      	str	r2, [r3, #12]
 8100e5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100e5c:	f107 0310 	add.w	r3, r7, #16
 8100e60:	22c8      	movs	r2, #200	@ 0xc8
 8100e62:	2100      	movs	r1, #0
 8100e64:	4618      	mov	r0, r3
 8100e66:	f021 fba3 	bl	81225b0 <memset>
  if(hi2c->Instance==I2C4)
 8100e6a:	687b      	ldr	r3, [r7, #4]
 8100e6c:	681b      	ldr	r3, [r3, #0]
 8100e6e:	4a27      	ldr	r2, [pc, #156]	@ (8100f0c <HAL_I2C_MspInit+0xc8>)
 8100e70:	4293      	cmp	r3, r2
 8100e72:	d146      	bne.n	8100f02 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8100e74:	f04f 0210 	mov.w	r2, #16
 8100e78:	f04f 0300 	mov.w	r3, #0
 8100e7c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8100e80:	2300      	movs	r3, #0
 8100e82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100e86:	f107 0310 	add.w	r3, r7, #16
 8100e8a:	4618      	mov	r0, r3
 8100e8c:	f00b fb00 	bl	810c490 <HAL_RCCEx_PeriphCLKConfig>
 8100e90:	4603      	mov	r3, r0
 8100e92:	2b00      	cmp	r3, #0
 8100e94:	d001      	beq.n	8100e9a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8100e96:	f7ff ff67 	bl	8100d68 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8100e9a:	4b1d      	ldr	r3, [pc, #116]	@ (8100f10 <HAL_I2C_MspInit+0xcc>)
 8100e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100ea0:	4a1b      	ldr	r2, [pc, #108]	@ (8100f10 <HAL_I2C_MspInit+0xcc>)
 8100ea2:	f043 0308 	orr.w	r3, r3, #8
 8100ea6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100eaa:	4b19      	ldr	r3, [pc, #100]	@ (8100f10 <HAL_I2C_MspInit+0xcc>)
 8100eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100eb0:	f003 0308 	and.w	r3, r3, #8
 8100eb4:	60fb      	str	r3, [r7, #12]
 8100eb6:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8100eb8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8100ebc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8100ec0:	2312      	movs	r3, #18
 8100ec2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100ec6:	2300      	movs	r3, #0
 8100ec8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100ecc:	2300      	movs	r3, #0
 8100ece:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8100ed2:	2304      	movs	r3, #4
 8100ed4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8100ed8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8100edc:	4619      	mov	r1, r3
 8100ede:	480d      	ldr	r0, [pc, #52]	@ (8100f14 <HAL_I2C_MspInit+0xd0>)
 8100ee0:	f00a f820 	bl	810af24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8100ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8100f10 <HAL_I2C_MspInit+0xcc>)
 8100ee6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100eea:	4a09      	ldr	r2, [pc, #36]	@ (8100f10 <HAL_I2C_MspInit+0xcc>)
 8100eec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8100ef0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100ef4:	4b06      	ldr	r3, [pc, #24]	@ (8100f10 <HAL_I2C_MspInit+0xcc>)
 8100ef6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100efa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8100efe:	60bb      	str	r3, [r7, #8]
 8100f00:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 8100f02:	bf00      	nop
 8100f04:	37f0      	adds	r7, #240	@ 0xf0
 8100f06:	46bd      	mov	sp, r7
 8100f08:	bd80      	pop	{r7, pc}
 8100f0a:	bf00      	nop
 8100f0c:	58001c00 	.word	0x58001c00
 8100f10:	58024400 	.word	0x58024400
 8100f14:	58020c00 	.word	0x58020c00

08100f18 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8100f18:	b580      	push	{r7, lr}
 8100f1a:	b082      	sub	sp, #8
 8100f1c:	af00      	add	r7, sp, #0
 8100f1e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C4)
 8100f20:	687b      	ldr	r3, [r7, #4]
 8100f22:	681b      	ldr	r3, [r3, #0]
 8100f24:	4a0c      	ldr	r2, [pc, #48]	@ (8100f58 <HAL_I2C_MspDeInit+0x40>)
 8100f26:	4293      	cmp	r3, r2
 8100f28:	d111      	bne.n	8100f4e <HAL_I2C_MspDeInit+0x36>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 8100f2a:	4b0c      	ldr	r3, [pc, #48]	@ (8100f5c <HAL_I2C_MspDeInit+0x44>)
 8100f2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100f30:	4a0a      	ldr	r2, [pc, #40]	@ (8100f5c <HAL_I2C_MspDeInit+0x44>)
 8100f32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8100f36:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4

    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8100f3a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8100f3e:	4808      	ldr	r0, [pc, #32]	@ (8100f60 <HAL_I2C_MspDeInit+0x48>)
 8100f40:	f00a f9a0 	bl	810b284 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 8100f44:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8100f48:	4805      	ldr	r0, [pc, #20]	@ (8100f60 <HAL_I2C_MspDeInit+0x48>)
 8100f4a:	f00a f99b 	bl	810b284 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8100f4e:	bf00      	nop
 8100f50:	3708      	adds	r7, #8
 8100f52:	46bd      	mov	sp, r7
 8100f54:	bd80      	pop	{r7, pc}
 8100f56:	bf00      	nop
 8100f58:	58001c00 	.word	0x58001c00
 8100f5c:	58024400 	.word	0x58024400
 8100f60:	58020c00 	.word	0x58020c00

08100f64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8100f64:	b580      	push	{r7, lr}
 8100f66:	b0bc      	sub	sp, #240	@ 0xf0
 8100f68:	af00      	add	r7, sp, #0
 8100f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100f6c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8100f70:	2200      	movs	r2, #0
 8100f72:	601a      	str	r2, [r3, #0]
 8100f74:	605a      	str	r2, [r3, #4]
 8100f76:	609a      	str	r2, [r3, #8]
 8100f78:	60da      	str	r2, [r3, #12]
 8100f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100f7c:	f107 0310 	add.w	r3, r7, #16
 8100f80:	22c8      	movs	r2, #200	@ 0xc8
 8100f82:	2100      	movs	r1, #0
 8100f84:	4618      	mov	r0, r3
 8100f86:	f021 fb13 	bl	81225b0 <memset>
  if(huart->Instance==USART1)
 8100f8a:	687b      	ldr	r3, [r7, #4]
 8100f8c:	681b      	ldr	r3, [r3, #0]
 8100f8e:	4a27      	ldr	r2, [pc, #156]	@ (810102c <HAL_UART_MspInit+0xc8>)
 8100f90:	4293      	cmp	r3, r2
 8100f92:	d146      	bne.n	8101022 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8100f94:	f04f 0201 	mov.w	r2, #1
 8100f98:	f04f 0300 	mov.w	r3, #0
 8100f9c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8100fa0:	2300      	movs	r3, #0
 8100fa2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100fa6:	f107 0310 	add.w	r3, r7, #16
 8100faa:	4618      	mov	r0, r3
 8100fac:	f00b fa70 	bl	810c490 <HAL_RCCEx_PeriphCLKConfig>
 8100fb0:	4603      	mov	r3, r0
 8100fb2:	2b00      	cmp	r3, #0
 8100fb4:	d001      	beq.n	8100fba <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8100fb6:	f7ff fed7 	bl	8100d68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8100fba:	4b1d      	ldr	r3, [pc, #116]	@ (8101030 <HAL_UART_MspInit+0xcc>)
 8100fbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8100fc0:	4a1b      	ldr	r2, [pc, #108]	@ (8101030 <HAL_UART_MspInit+0xcc>)
 8100fc2:	f043 0310 	orr.w	r3, r3, #16
 8100fc6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8100fca:	4b19      	ldr	r3, [pc, #100]	@ (8101030 <HAL_UART_MspInit+0xcc>)
 8100fcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8100fd0:	f003 0310 	and.w	r3, r3, #16
 8100fd4:	60fb      	str	r3, [r7, #12]
 8100fd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8100fd8:	4b15      	ldr	r3, [pc, #84]	@ (8101030 <HAL_UART_MspInit+0xcc>)
 8100fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100fde:	4a14      	ldr	r2, [pc, #80]	@ (8101030 <HAL_UART_MspInit+0xcc>)
 8100fe0:	f043 0301 	orr.w	r3, r3, #1
 8100fe4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100fe8:	4b11      	ldr	r3, [pc, #68]	@ (8101030 <HAL_UART_MspInit+0xcc>)
 8100fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100fee:	f003 0301 	and.w	r3, r3, #1
 8100ff2:	60bb      	str	r3, [r7, #8]
 8100ff4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8100ff6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8100ffa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100ffe:	2302      	movs	r3, #2
 8101000:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101004:	2300      	movs	r3, #0
 8101006:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810100a:	2300      	movs	r3, #0
 810100c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8101010:	2307      	movs	r3, #7
 8101012:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101016:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 810101a:	4619      	mov	r1, r3
 810101c:	4805      	ldr	r0, [pc, #20]	@ (8101034 <HAL_UART_MspInit+0xd0>)
 810101e:	f009 ff81 	bl	810af24 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8101022:	bf00      	nop
 8101024:	37f0      	adds	r7, #240	@ 0xf0
 8101026:	46bd      	mov	sp, r7
 8101028:	bd80      	pop	{r7, pc}
 810102a:	bf00      	nop
 810102c:	40011000 	.word	0x40011000
 8101030:	58024400 	.word	0x58024400
 8101034:	58020000 	.word	0x58020000

08101038 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101038:	b580      	push	{r7, lr}
 810103a:	b090      	sub	sp, #64	@ 0x40
 810103c:	af00      	add	r7, sp, #0
 810103e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101040:	687b      	ldr	r3, [r7, #4]
 8101042:	2b0f      	cmp	r3, #15
 8101044:	d827      	bhi.n	8101096 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8101046:	2200      	movs	r2, #0
 8101048:	6879      	ldr	r1, [r7, #4]
 810104a:	2036      	movs	r0, #54	@ 0x36
 810104c:	f008 f9b0 	bl	81093b0 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8101050:	2036      	movs	r0, #54	@ 0x36
 8101052:	f008 f9c7 	bl	81093e4 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8101056:	4a29      	ldr	r2, [pc, #164]	@ (81010fc <HAL_InitTick+0xc4>)
 8101058:	687b      	ldr	r3, [r7, #4]
 810105a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 810105c:	4b28      	ldr	r3, [pc, #160]	@ (8101100 <HAL_InitTick+0xc8>)
 810105e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101062:	4a27      	ldr	r2, [pc, #156]	@ (8101100 <HAL_InitTick+0xc8>)
 8101064:	f043 0310 	orr.w	r3, r3, #16
 8101068:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 810106c:	4b24      	ldr	r3, [pc, #144]	@ (8101100 <HAL_InitTick+0xc8>)
 810106e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101072:	f003 0310 	and.w	r3, r3, #16
 8101076:	60fb      	str	r3, [r7, #12]
 8101078:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 810107a:	f107 0210 	add.w	r2, r7, #16
 810107e:	f107 0314 	add.w	r3, r7, #20
 8101082:	4611      	mov	r1, r2
 8101084:	4618      	mov	r0, r3
 8101086:	f00b f9c1 	bl	810c40c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 810108a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810108c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 810108e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8101090:	2b00      	cmp	r3, #0
 8101092:	d106      	bne.n	81010a2 <HAL_InitTick+0x6a>
 8101094:	e001      	b.n	810109a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8101096:	2301      	movs	r3, #1
 8101098:	e02b      	b.n	81010f2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 810109a:	f00b f98b 	bl	810c3b4 <HAL_RCC_GetPCLK1Freq>
 810109e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 81010a0:	e004      	b.n	81010ac <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 81010a2:	f00b f987 	bl	810c3b4 <HAL_RCC_GetPCLK1Freq>
 81010a6:	4603      	mov	r3, r0
 81010a8:	005b      	lsls	r3, r3, #1
 81010aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 81010ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81010ae:	4a15      	ldr	r2, [pc, #84]	@ (8101104 <HAL_InitTick+0xcc>)
 81010b0:	fba2 2303 	umull	r2, r3, r2, r3
 81010b4:	0c9b      	lsrs	r3, r3, #18
 81010b6:	3b01      	subs	r3, #1
 81010b8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 81010ba:	4b13      	ldr	r3, [pc, #76]	@ (8101108 <HAL_InitTick+0xd0>)
 81010bc:	4a13      	ldr	r2, [pc, #76]	@ (810110c <HAL_InitTick+0xd4>)
 81010be:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 81010c0:	4b11      	ldr	r3, [pc, #68]	@ (8101108 <HAL_InitTick+0xd0>)
 81010c2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 81010c6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 81010c8:	4a0f      	ldr	r2, [pc, #60]	@ (8101108 <HAL_InitTick+0xd0>)
 81010ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81010cc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 81010ce:	4b0e      	ldr	r3, [pc, #56]	@ (8101108 <HAL_InitTick+0xd0>)
 81010d0:	2200      	movs	r2, #0
 81010d2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 81010d4:	4b0c      	ldr	r3, [pc, #48]	@ (8101108 <HAL_InitTick+0xd0>)
 81010d6:	2200      	movs	r2, #0
 81010d8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 81010da:	480b      	ldr	r0, [pc, #44]	@ (8101108 <HAL_InitTick+0xd0>)
 81010dc:	f00d f844 	bl	810e168 <HAL_TIM_Base_Init>
 81010e0:	4603      	mov	r3, r0
 81010e2:	2b00      	cmp	r3, #0
 81010e4:	d104      	bne.n	81010f0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 81010e6:	4808      	ldr	r0, [pc, #32]	@ (8101108 <HAL_InitTick+0xd0>)
 81010e8:	f00d f8a0 	bl	810e22c <HAL_TIM_Base_Start_IT>
 81010ec:	4603      	mov	r3, r0
 81010ee:	e000      	b.n	81010f2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 81010f0:	2301      	movs	r3, #1
}
 81010f2:	4618      	mov	r0, r3
 81010f4:	3740      	adds	r7, #64	@ 0x40
 81010f6:	46bd      	mov	sp, r7
 81010f8:	bd80      	pop	{r7, pc}
 81010fa:	bf00      	nop
 81010fc:	1000001c 	.word	0x1000001c
 8101100:	58024400 	.word	0x58024400
 8101104:	431bde83 	.word	0x431bde83
 8101108:	100001c0 	.word	0x100001c0
 810110c:	40001000 	.word	0x40001000

08101110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101110:	b480      	push	{r7}
 8101112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101114:	bf00      	nop
 8101116:	e7fd      	b.n	8101114 <NMI_Handler+0x4>

08101118 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101118:	b480      	push	{r7}
 810111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810111c:	bf00      	nop
 810111e:	e7fd      	b.n	810111c <HardFault_Handler+0x4>

08101120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101120:	b480      	push	{r7}
 8101122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101124:	bf00      	nop
 8101126:	e7fd      	b.n	8101124 <MemManage_Handler+0x4>

08101128 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101128:	b480      	push	{r7}
 810112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810112c:	bf00      	nop
 810112e:	e7fd      	b.n	810112c <BusFault_Handler+0x4>

08101130 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101130:	b480      	push	{r7}
 8101132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101134:	bf00      	nop
 8101136:	e7fd      	b.n	8101134 <UsageFault_Handler+0x4>

08101138 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101138:	b480      	push	{r7}
 810113a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810113c:	bf00      	nop
 810113e:	46bd      	mov	sp, r7
 8101140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101144:	4770      	bx	lr
	...

08101148 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8101148:	b580      	push	{r7, lr}
 810114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 810114c:	4802      	ldr	r0, [pc, #8]	@ (8101158 <TIM6_DAC_IRQHandler+0x10>)
 810114e:	f00d f8e5 	bl	810e31c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8101152:	bf00      	nop
 8101154:	bd80      	pop	{r7, pc}
 8101156:	bf00      	nop
 8101158:	100001c0 	.word	0x100001c0

0810115c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 810115c:	b580      	push	{r7, lr}
 810115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8101160:	4802      	ldr	r0, [pc, #8]	@ (810116c <ETH_IRQHandler+0x10>)
 8101162:	f008 fd37 	bl	8109bd4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8101166:	bf00      	nop
 8101168:	bd80      	pop	{r7, pc}
 810116a:	bf00      	nop
 810116c:	100002cc 	.word	0x100002cc

08101170 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 86.
  */
void ETH_WKUP_IRQHandler(void)
{
 8101170:	b580      	push	{r7, lr}
 8101172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8101174:	4802      	ldr	r0, [pc, #8]	@ (8101180 <ETH_WKUP_IRQHandler+0x10>)
 8101176:	f008 fd2d 	bl	8109bd4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 810117a:	bf00      	nop
 810117c:	bd80      	pop	{r7, pc}
 810117e:	bf00      	nop
 8101180:	100002cc 	.word	0x100002cc

08101184 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8101184:	b580      	push	{r7, lr}
 8101186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8101188:	f00a f9d0 	bl	810b52c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 810118c:	bf00      	nop
 810118e:	bd80      	pop	{r7, pc}

08101190 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8101190:	b480      	push	{r7}
 8101192:	af00      	add	r7, sp, #0
	return 1;
 8101194:	2301      	movs	r3, #1
}
 8101196:	4618      	mov	r0, r3
 8101198:	46bd      	mov	sp, r7
 810119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810119e:	4770      	bx	lr

081011a0 <_kill>:

int _kill(int pid, int sig)
{
 81011a0:	b480      	push	{r7}
 81011a2:	b083      	sub	sp, #12
 81011a4:	af00      	add	r7, sp, #0
 81011a6:	6078      	str	r0, [r7, #4]
 81011a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 81011aa:	4b05      	ldr	r3, [pc, #20]	@ (81011c0 <_kill+0x20>)
 81011ac:	2216      	movs	r2, #22
 81011ae:	601a      	str	r2, [r3, #0]
	return -1;
 81011b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 81011b4:	4618      	mov	r0, r3
 81011b6:	370c      	adds	r7, #12
 81011b8:	46bd      	mov	sp, r7
 81011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011be:	4770      	bx	lr
 81011c0:	10012014 	.word	0x10012014

081011c4 <_exit>:

void _exit (int status)
{
 81011c4:	b580      	push	{r7, lr}
 81011c6:	b082      	sub	sp, #8
 81011c8:	af00      	add	r7, sp, #0
 81011ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 81011cc:	f04f 31ff 	mov.w	r1, #4294967295
 81011d0:	6878      	ldr	r0, [r7, #4]
 81011d2:	f7ff ffe5 	bl	81011a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 81011d6:	bf00      	nop
 81011d8:	e7fd      	b.n	81011d6 <_exit+0x12>

081011da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 81011da:	b580      	push	{r7, lr}
 81011dc:	b086      	sub	sp, #24
 81011de:	af00      	add	r7, sp, #0
 81011e0:	60f8      	str	r0, [r7, #12]
 81011e2:	60b9      	str	r1, [r7, #8]
 81011e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81011e6:	2300      	movs	r3, #0
 81011e8:	617b      	str	r3, [r7, #20]
 81011ea:	e00a      	b.n	8101202 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 81011ec:	f3af 8000 	nop.w
 81011f0:	4601      	mov	r1, r0
 81011f2:	68bb      	ldr	r3, [r7, #8]
 81011f4:	1c5a      	adds	r2, r3, #1
 81011f6:	60ba      	str	r2, [r7, #8]
 81011f8:	b2ca      	uxtb	r2, r1
 81011fa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81011fc:	697b      	ldr	r3, [r7, #20]
 81011fe:	3301      	adds	r3, #1
 8101200:	617b      	str	r3, [r7, #20]
 8101202:	697a      	ldr	r2, [r7, #20]
 8101204:	687b      	ldr	r3, [r7, #4]
 8101206:	429a      	cmp	r2, r3
 8101208:	dbf0      	blt.n	81011ec <_read+0x12>
	}

return len;
 810120a:	687b      	ldr	r3, [r7, #4]
}
 810120c:	4618      	mov	r0, r3
 810120e:	3718      	adds	r7, #24
 8101210:	46bd      	mov	sp, r7
 8101212:	bd80      	pop	{r7, pc}

08101214 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8101214:	b580      	push	{r7, lr}
 8101216:	b086      	sub	sp, #24
 8101218:	af00      	add	r7, sp, #0
 810121a:	60f8      	str	r0, [r7, #12]
 810121c:	60b9      	str	r1, [r7, #8]
 810121e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101220:	2300      	movs	r3, #0
 8101222:	617b      	str	r3, [r7, #20]
 8101224:	e009      	b.n	810123a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8101226:	68bb      	ldr	r3, [r7, #8]
 8101228:	1c5a      	adds	r2, r3, #1
 810122a:	60ba      	str	r2, [r7, #8]
 810122c:	781b      	ldrb	r3, [r3, #0]
 810122e:	4618      	mov	r0, r3
 8101230:	f7ff fd76 	bl	8100d20 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101234:	697b      	ldr	r3, [r7, #20]
 8101236:	3301      	adds	r3, #1
 8101238:	617b      	str	r3, [r7, #20]
 810123a:	697a      	ldr	r2, [r7, #20]
 810123c:	687b      	ldr	r3, [r7, #4]
 810123e:	429a      	cmp	r2, r3
 8101240:	dbf1      	blt.n	8101226 <_write+0x12>
	}
	return len;
 8101242:	687b      	ldr	r3, [r7, #4]
}
 8101244:	4618      	mov	r0, r3
 8101246:	3718      	adds	r7, #24
 8101248:	46bd      	mov	sp, r7
 810124a:	bd80      	pop	{r7, pc}

0810124c <_close>:

int _close(int file)
{
 810124c:	b480      	push	{r7}
 810124e:	b083      	sub	sp, #12
 8101250:	af00      	add	r7, sp, #0
 8101252:	6078      	str	r0, [r7, #4]
	return -1;
 8101254:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101258:	4618      	mov	r0, r3
 810125a:	370c      	adds	r7, #12
 810125c:	46bd      	mov	sp, r7
 810125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101262:	4770      	bx	lr

08101264 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8101264:	b480      	push	{r7}
 8101266:	b083      	sub	sp, #12
 8101268:	af00      	add	r7, sp, #0
 810126a:	6078      	str	r0, [r7, #4]
 810126c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 810126e:	683b      	ldr	r3, [r7, #0]
 8101270:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8101274:	605a      	str	r2, [r3, #4]
	return 0;
 8101276:	2300      	movs	r3, #0
}
 8101278:	4618      	mov	r0, r3
 810127a:	370c      	adds	r7, #12
 810127c:	46bd      	mov	sp, r7
 810127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101282:	4770      	bx	lr

08101284 <_isatty>:

int _isatty(int file)
{
 8101284:	b480      	push	{r7}
 8101286:	b083      	sub	sp, #12
 8101288:	af00      	add	r7, sp, #0
 810128a:	6078      	str	r0, [r7, #4]
	return 1;
 810128c:	2301      	movs	r3, #1
}
 810128e:	4618      	mov	r0, r3
 8101290:	370c      	adds	r7, #12
 8101292:	46bd      	mov	sp, r7
 8101294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101298:	4770      	bx	lr

0810129a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 810129a:	b480      	push	{r7}
 810129c:	b085      	sub	sp, #20
 810129e:	af00      	add	r7, sp, #0
 81012a0:	60f8      	str	r0, [r7, #12]
 81012a2:	60b9      	str	r1, [r7, #8]
 81012a4:	607a      	str	r2, [r7, #4]
	return 0;
 81012a6:	2300      	movs	r3, #0
}
 81012a8:	4618      	mov	r0, r3
 81012aa:	3714      	adds	r7, #20
 81012ac:	46bd      	mov	sp, r7
 81012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012b2:	4770      	bx	lr

081012b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 81012b4:	b480      	push	{r7}
 81012b6:	b087      	sub	sp, #28
 81012b8:	af00      	add	r7, sp, #0
 81012ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 81012bc:	4a14      	ldr	r2, [pc, #80]	@ (8101310 <_sbrk+0x5c>)
 81012be:	4b15      	ldr	r3, [pc, #84]	@ (8101314 <_sbrk+0x60>)
 81012c0:	1ad3      	subs	r3, r2, r3
 81012c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 81012c4:	697b      	ldr	r3, [r7, #20]
 81012c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 81012c8:	4b13      	ldr	r3, [pc, #76]	@ (8101318 <_sbrk+0x64>)
 81012ca:	681b      	ldr	r3, [r3, #0]
 81012cc:	2b00      	cmp	r3, #0
 81012ce:	d102      	bne.n	81012d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 81012d0:	4b11      	ldr	r3, [pc, #68]	@ (8101318 <_sbrk+0x64>)
 81012d2:	4a12      	ldr	r2, [pc, #72]	@ (810131c <_sbrk+0x68>)
 81012d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 81012d6:	4b10      	ldr	r3, [pc, #64]	@ (8101318 <_sbrk+0x64>)
 81012d8:	681a      	ldr	r2, [r3, #0]
 81012da:	687b      	ldr	r3, [r7, #4]
 81012dc:	4413      	add	r3, r2
 81012de:	693a      	ldr	r2, [r7, #16]
 81012e0:	429a      	cmp	r2, r3
 81012e2:	d205      	bcs.n	81012f0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 81012e4:	4b0e      	ldr	r3, [pc, #56]	@ (8101320 <_sbrk+0x6c>)
 81012e6:	220c      	movs	r2, #12
 81012e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 81012ea:	f04f 33ff 	mov.w	r3, #4294967295
 81012ee:	e009      	b.n	8101304 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 81012f0:	4b09      	ldr	r3, [pc, #36]	@ (8101318 <_sbrk+0x64>)
 81012f2:	681b      	ldr	r3, [r3, #0]
 81012f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 81012f6:	4b08      	ldr	r3, [pc, #32]	@ (8101318 <_sbrk+0x64>)
 81012f8:	681a      	ldr	r2, [r3, #0]
 81012fa:	687b      	ldr	r3, [r7, #4]
 81012fc:	4413      	add	r3, r2
 81012fe:	4a06      	ldr	r2, [pc, #24]	@ (8101318 <_sbrk+0x64>)
 8101300:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101302:	68fb      	ldr	r3, [r7, #12]
}
 8101304:	4618      	mov	r0, r3
 8101306:	371c      	adds	r7, #28
 8101308:	46bd      	mov	sp, r7
 810130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810130e:	4770      	bx	lr
 8101310:	10048000 	.word	0x10048000
 8101314:	00001000 	.word	0x00001000
 8101318:	1000020c 	.word	0x1000020c
 810131c:	10012020 	.word	0x10012020
 8101320:	10012014 	.word	0x10012014

08101324 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8101324:	b480      	push	{r7}
 8101326:	b083      	sub	sp, #12
 8101328:	af00      	add	r7, sp, #0
 810132a:	6078      	str	r0, [r7, #4]
 810132c:	6039      	str	r1, [r7, #0]
 810132e:	683b      	ldr	r3, [r7, #0]
 8101330:	4618      	mov	r0, r3
 8101332:	370c      	adds	r7, #12
 8101334:	46bd      	mov	sp, r7
 8101336:	f85d 7b04 	ldr.w	r7, [sp], #4
 810133a:	4770      	bx	lr

0810133c <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       noexcept { return &_M_pod_data[0]; }
 810133c:	b480      	push	{r7}
 810133e:	b083      	sub	sp, #12
 8101340:	af00      	add	r7, sp, #0
 8101342:	6078      	str	r0, [r7, #4]
 8101344:	687b      	ldr	r3, [r7, #4]
 8101346:	4618      	mov	r0, r3
 8101348:	370c      	adds	r7, #12
 810134a:	46bd      	mov	sp, r7
 810134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101350:	4770      	bx	lr

08101352 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const noexcept { return &_M_pod_data[0]; }
 8101352:	b480      	push	{r7}
 8101354:	b083      	sub	sp, #12
 8101356:	af00      	add	r7, sp, #0
 8101358:	6078      	str	r0, [r7, #4]
 810135a:	687b      	ldr	r3, [r7, #4]
 810135c:	4618      	mov	r0, r3
 810135e:	370c      	adds	r7, #12
 8101360:	46bd      	mov	sp, r7
 8101362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101366:	4770      	bx	lr

08101368 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8101368:	b580      	push	{r7, lr}
 810136a:	b082      	sub	sp, #8
 810136c:	af00      	add	r7, sp, #0
 810136e:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8101370:	687b      	ldr	r3, [r7, #4]
 8101372:	689b      	ldr	r3, [r3, #8]
 8101374:	2b00      	cmp	r3, #0
 8101376:	d005      	beq.n	8101384 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8101378:	687b      	ldr	r3, [r7, #4]
 810137a:	689b      	ldr	r3, [r3, #8]
 810137c:	6878      	ldr	r0, [r7, #4]
 810137e:	6879      	ldr	r1, [r7, #4]
 8101380:	2203      	movs	r2, #3
 8101382:	4798      	blx	r3
    }
 8101384:	687b      	ldr	r3, [r7, #4]
 8101386:	4618      	mov	r0, r3
 8101388:	3708      	adds	r7, #8
 810138a:	46bd      	mov	sp, r7
 810138c:	bd80      	pop	{r7, pc}
	...

08101390 <_ZN29EthernetConnectionManagerTask8instanceEv>:
        ACCELERATION = EVENT_DATA_UPDATE_ACCELERATION,
        OIL_TEMPERATURE = EVENT_DATA_UPDATE_OIL_TEMPERATURE,
        ECU_DATA_END = EVENT_DATA_UPDATE_END
    };

    static EthernetConnectionManagerTask& instance()
 8101390:	b580      	push	{r7, lr}
 8101392:	af00      	add	r7, sp, #0
    {
        static EthernetConnectionManagerTask ecmt;
 8101394:	4b10      	ldr	r3, [pc, #64]	@ (81013d8 <_ZN29EthernetConnectionManagerTask8instanceEv+0x48>)
 8101396:	681b      	ldr	r3, [r3, #0]
 8101398:	f3bf 8f5b 	dmb	ish
 810139c:	f003 0301 	and.w	r3, r3, #1
 81013a0:	2b00      	cmp	r3, #0
 81013a2:	bf0c      	ite	eq
 81013a4:	2301      	moveq	r3, #1
 81013a6:	2300      	movne	r3, #0
 81013a8:	b2db      	uxtb	r3, r3
 81013aa:	2b00      	cmp	r3, #0
 81013ac:	d010      	beq.n	81013d0 <_ZN29EthernetConnectionManagerTask8instanceEv+0x40>
 81013ae:	480a      	ldr	r0, [pc, #40]	@ (81013d8 <_ZN29EthernetConnectionManagerTask8instanceEv+0x48>)
 81013b0:	f020 f80a 	bl	81213c8 <__cxa_guard_acquire>
 81013b4:	4603      	mov	r3, r0
 81013b6:	2b00      	cmp	r3, #0
 81013b8:	bf14      	ite	ne
 81013ba:	2301      	movne	r3, #1
 81013bc:	2300      	moveq	r3, #0
 81013be:	b2db      	uxtb	r3, r3
 81013c0:	2b00      	cmp	r3, #0
 81013c2:	d005      	beq.n	81013d0 <_ZN29EthernetConnectionManagerTask8instanceEv+0x40>
 81013c4:	4805      	ldr	r0, [pc, #20]	@ (81013dc <_ZN29EthernetConnectionManagerTask8instanceEv+0x4c>)
 81013c6:	f000 f875 	bl	81014b4 <_ZN29EthernetConnectionManagerTaskC1Ev>
 81013ca:	4803      	ldr	r0, [pc, #12]	@ (81013d8 <_ZN29EthernetConnectionManagerTask8instanceEv+0x48>)
 81013cc:	f020 f808 	bl	81213e0 <__cxa_guard_release>
        return ecmt;
 81013d0:	4b02      	ldr	r3, [pc, #8]	@ (81013dc <_ZN29EthernetConnectionManagerTask8instanceEv+0x4c>)
    }
 81013d2:	4618      	mov	r0, r3
 81013d4:	bd80      	pop	{r7, pc}
 81013d6:	bf00      	nop
 81013d8:	10000248 	.word	0x10000248
 81013dc:	10000210 	.word	0x10000210

081013e0 <_Z25StartTask_EthernetConnMgrPv>:
#include <cstring>

extern QueueHandle_t queueToEthernetConnMgr;

void StartTask_EthernetConnMgr(void *argument)
{
 81013e0:	b580      	push	{r7, lr}
 81013e2:	b084      	sub	sp, #16
 81013e4:	af00      	add	r7, sp, #0
 81013e6:	6078      	str	r0, [r7, #4]
    EthernetConnectionManagerTask& connMgrInstance = EthernetConnectionManagerTask::instance();
 81013e8:	f7ff ffd2 	bl	8101390 <_ZN29EthernetConnectionManagerTask8instanceEv>
 81013ec:	60f8      	str	r0, [r7, #12]
    /* Infinite loop */
    for (;;) {
        connMgrInstance.process();
 81013ee:	68f8      	ldr	r0, [r7, #12]
 81013f0:	f000 f9fa 	bl	81017e8 <_ZN29EthernetConnectionManagerTask7processEv>
        osDelay(1);
 81013f4:	2001      	movs	r0, #1
 81013f6:	f00e fc22 	bl	810fc3e <osDelay>
        connMgrInstance.process();
 81013fa:	bf00      	nop
 81013fc:	e7f7      	b.n	81013ee <_Z25StartTask_EthernetConnMgrPv+0xe>

081013fe <tcpRecvCb>:
    }
}

extern "C" err_t tcpRecvCb(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 81013fe:	b580      	push	{r7, lr}
 8101400:	b088      	sub	sp, #32
 8101402:	af02      	add	r7, sp, #8
 8101404:	60f8      	str	r0, [r7, #12]
 8101406:	60b9      	str	r1, [r7, #8]
 8101408:	607a      	str	r2, [r7, #4]
 810140a:	70fb      	strb	r3, [r7, #3]
    EthernetConnectionManagerTask& connMgrInstance = EthernetConnectionManagerTask::instance();
 810140c:	f7ff ffc0 	bl	8101390 <_ZN29EthernetConnectionManagerTask8instanceEv>
 8101410:	6178      	str	r0, [r7, #20]
    connMgrInstance.HandleTcpRecvCb(arg, tpcb, p, err);
 8101412:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8101416:	9300      	str	r3, [sp, #0]
 8101418:	687b      	ldr	r3, [r7, #4]
 810141a:	68ba      	ldr	r2, [r7, #8]
 810141c:	68f9      	ldr	r1, [r7, #12]
 810141e:	6978      	ldr	r0, [r7, #20]
 8101420:	f001 f82a 	bl	8102478 <_ZN29EthernetConnectionManagerTask15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa>
    return ERR_OK;
 8101424:	2300      	movs	r3, #0
}
 8101426:	4618      	mov	r0, r3
 8101428:	3718      	adds	r7, #24
 810142a:	46bd      	mov	sp, r7
 810142c:	bd80      	pop	{r7, pc}

0810142e <tcpConnectCb>:

extern "C" err_t tcpConnectCb(void *arg, struct tcp_pcb *tpcb, err_t err)
{
 810142e:	b580      	push	{r7, lr}
 8101430:	b086      	sub	sp, #24
 8101432:	af00      	add	r7, sp, #0
 8101434:	60f8      	str	r0, [r7, #12]
 8101436:	60b9      	str	r1, [r7, #8]
 8101438:	4613      	mov	r3, r2
 810143a:	71fb      	strb	r3, [r7, #7]
    EthernetConnectionManagerTask& connMgrInstance = EthernetConnectionManagerTask::instance();
 810143c:	f7ff ffa8 	bl	8101390 <_ZN29EthernetConnectionManagerTask8instanceEv>
 8101440:	6178      	str	r0, [r7, #20]
    connMgrInstance.HandleTcpConnectCb(arg, tpcb, err);
 8101442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8101446:	68ba      	ldr	r2, [r7, #8]
 8101448:	68f9      	ldr	r1, [r7, #12]
 810144a:	6978      	ldr	r0, [r7, #20]
 810144c:	f001 f90a 	bl	8102664 <_ZN29EthernetConnectionManagerTask18HandleTcpConnectCbEPvP7tcp_pcba>
    return ERR_OK;
 8101450:	2300      	movs	r3, #0
}
 8101452:	4618      	mov	r0, r3
 8101454:	3718      	adds	r7, #24
 8101456:	46bd      	mov	sp, r7
 8101458:	bd80      	pop	{r7, pc}

0810145a <tcpErrCb>:

extern "C" void tcpErrCb(void *arg, err_t err)
{
 810145a:	b580      	push	{r7, lr}
 810145c:	b084      	sub	sp, #16
 810145e:	af00      	add	r7, sp, #0
 8101460:	6078      	str	r0, [r7, #4]
 8101462:	460b      	mov	r3, r1
 8101464:	70fb      	strb	r3, [r7, #3]
    EthernetConnectionManagerTask& connMgrInstance = EthernetConnectionManagerTask::instance();
 8101466:	f7ff ff93 	bl	8101390 <_ZN29EthernetConnectionManagerTask8instanceEv>
 810146a:	60f8      	str	r0, [r7, #12]
    connMgrInstance.HandleTcpErrCb(arg, err);
 810146c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8101470:	461a      	mov	r2, r3
 8101472:	6879      	ldr	r1, [r7, #4]
 8101474:	68f8      	ldr	r0, [r7, #12]
 8101476:	f001 f951 	bl	810271c <_ZN29EthernetConnectionManagerTask14HandleTcpErrCbEPva>
}
 810147a:	bf00      	nop
 810147c:	3710      	adds	r7, #16
 810147e:	46bd      	mov	sp, r7
 8101480:	bd80      	pop	{r7, pc}

08101482 <udpRecvCb>:

extern "C" void udpRecvCb(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8101482:	b580      	push	{r7, lr}
 8101484:	b088      	sub	sp, #32
 8101486:	af02      	add	r7, sp, #8
 8101488:	60f8      	str	r0, [r7, #12]
 810148a:	60b9      	str	r1, [r7, #8]
 810148c:	607a      	str	r2, [r7, #4]
 810148e:	603b      	str	r3, [r7, #0]
    EthernetConnectionManagerTask& connMgrInstance = EthernetConnectionManagerTask::instance();
 8101490:	f7ff ff7e 	bl	8101390 <_ZN29EthernetConnectionManagerTask8instanceEv>
 8101494:	6178      	str	r0, [r7, #20]
    connMgrInstance.HandleUdpRecvCb(arg, pcb, p, addr, port);
 8101496:	8c3b      	ldrh	r3, [r7, #32]
 8101498:	9301      	str	r3, [sp, #4]
 810149a:	683b      	ldr	r3, [r7, #0]
 810149c:	9300      	str	r3, [sp, #0]
 810149e:	687b      	ldr	r3, [r7, #4]
 81014a0:	68ba      	ldr	r2, [r7, #8]
 81014a2:	68f9      	ldr	r1, [r7, #12]
 81014a4:	6978      	ldr	r0, [r7, #20]
 81014a6:	f000 fcdd 	bl	8101e64 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt>
}
 81014aa:	bf00      	nop
 81014ac:	3718      	adds	r7, #24
 81014ae:	46bd      	mov	sp, r7
 81014b0:	bd80      	pop	{r7, pc}
	...

081014b4 <_ZN29EthernetConnectionManagerTaskC1Ev>:


EthernetConnectionManagerTask::EthernetConnectionManagerTask() : event_bus(EventBus(queueToEthernetConnMgr, EVENT_CLIENT_ETHERNET_CONNECTION_MANAGER))
 81014b4:	b580      	push	{r7, lr}
 81014b6:	b082      	sub	sp, #8
 81014b8:	af00      	add	r7, sp, #0
 81014ba:	6078      	str	r0, [r7, #4]
 81014bc:	687b      	ldr	r3, [r7, #4]
 81014be:	4a16      	ldr	r2, [pc, #88]	@ (8101518 <_ZN29EthernetConnectionManagerTaskC1Ev+0x64>)
 81014c0:	6811      	ldr	r1, [r2, #0]
 81014c2:	2203      	movs	r2, #3
 81014c4:	4618      	mov	r0, r3
 81014c6:	f001 fdc5 	bl	8103054 <_ZN8EventBusC1EP15QueueDefinition12EEventClient>
 81014ca:	687b      	ldr	r3, [r7, #4]
 81014cc:	2200      	movs	r2, #0
 81014ce:	741a      	strb	r2, [r3, #16]
 81014d0:	687b      	ldr	r3, [r7, #4]
 81014d2:	2200      	movs	r2, #0
 81014d4:	619a      	str	r2, [r3, #24]
 81014d6:	687b      	ldr	r3, [r7, #4]
 81014d8:	2200      	movs	r2, #0
 81014da:	61da      	str	r2, [r3, #28]
 81014dc:	687b      	ldr	r3, [r7, #4]
 81014de:	3320      	adds	r3, #32
 81014e0:	2200      	movs	r2, #0
 81014e2:	601a      	str	r2, [r3, #0]
 81014e4:	605a      	str	r2, [r3, #4]
 81014e6:	609a      	str	r2, [r3, #8]
 81014e8:	60da      	str	r2, [r3, #12]
 81014ea:	687b      	ldr	r3, [r7, #4]
 81014ec:	22ff      	movs	r2, #255	@ 0xff
 81014ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 81014f2:	687b      	ldr	r3, [r7, #4]
 81014f4:	2200      	movs	r2, #0
 81014f6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
{
	MX_LWIP_Init();
 81014fa:	f004 fc47 	bl	8105d8c <MX_LWIP_Init>
    connection_events_internal_queue = xQueueCreate(16, sizeof(EConnectionEvent));
 81014fe:	2200      	movs	r2, #0
 8101500:	2101      	movs	r1, #1
 8101502:	2010      	movs	r0, #16
 8101504:	f00f fd29 	bl	8110f5a <xQueueGenericCreate>
 8101508:	4602      	mov	r2, r0
 810150a:	687b      	ldr	r3, [r7, #4]
 810150c:	60da      	str	r2, [r3, #12]
}
 810150e:	687b      	ldr	r3, [r7, #4]
 8101510:	4618      	mov	r0, r3
 8101512:	3708      	adds	r7, #8
 8101514:	46bd      	mov	sp, r7
 8101516:	bd80      	pop	{r7, pc}
 8101518:	100001b8 	.word	0x100001b8

0810151c <_ZN29EthernetConnectionManagerTask7OnEventE10EEventType12UMessageData12EEventClientS2_>:

void EthernetConnectionManagerTask::OnEvent(EEventType event, UMessageData msg, EEventClient eventSender, [[maybe_unused]] EEventClient eventReceiver)
{
 810151c:	b082      	sub	sp, #8
 810151e:	b580      	push	{r7, lr}
 8101520:	b084      	sub	sp, #16
 8101522:	af00      	add	r7, sp, #0
 8101524:	6078      	str	r0, [r7, #4]
 8101526:	f107 0018 	add.w	r0, r7, #24
 810152a:	e880 000c 	stmia.w	r0, {r2, r3}
 810152e:	460b      	mov	r3, r1
 8101530:	70fb      	strb	r3, [r7, #3]
	switch(event)
 8101532:	78fb      	ldrb	r3, [r7, #3]
 8101534:	2b83      	cmp	r3, #131	@ 0x83
 8101536:	d006      	beq.n	8101546 <_ZN29EthernetConnectionManagerTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x2a>
 8101538:	2b83      	cmp	r3, #131	@ 0x83
 810153a:	dc21      	bgt.n	8101580 <_ZN29EthernetConnectionManagerTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x64>
 810153c:	2b81      	cmp	r3, #129	@ 0x81
 810153e:	d013      	beq.n	8101568 <_ZN29EthernetConnectionManagerTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x4c>
 8101540:	2b82      	cmp	r3, #130	@ 0x82
 8101542:	d017      	beq.n	8101574 <_ZN29EthernetConnectionManagerTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x58>
        {
            onEventDataUnsubscribe(msg);
            break;
        }
		default:
			break;
 8101544:	e01c      	b.n	8101580 <_ZN29EthernetConnectionManagerTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x64>
            EConnectionEvent connEvent = msg.ethernet_plugged ? EVENT_ETHERNET_CONNECTED : EVENT_ETHERNET_DISCONNECTED;
 8101546:	7e3b      	ldrb	r3, [r7, #24]
 8101548:	2b00      	cmp	r3, #0
 810154a:	d001      	beq.n	8101550 <_ZN29EthernetConnectionManagerTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x34>
 810154c:	2300      	movs	r3, #0
 810154e:	e000      	b.n	8101552 <_ZN29EthernetConnectionManagerTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x36>
 8101550:	2301      	movs	r3, #1
 8101552:	73fb      	strb	r3, [r7, #15]
            xQueueSend(connection_events_internal_queue, &(connEvent), static_cast<TickType_t>(10000));
 8101554:	687b      	ldr	r3, [r7, #4]
 8101556:	68d8      	ldr	r0, [r3, #12]
 8101558:	f107 010f 	add.w	r1, r7, #15
 810155c:	2300      	movs	r3, #0
 810155e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8101562:	f00f fe7f 	bl	8111264 <xQueueGenericSend>
            break;
 8101566:	e00c      	b.n	8101582 <_ZN29EthernetConnectionManagerTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x66>
            onEventDataSubscribe(msg);
 8101568:	f107 0118 	add.w	r1, r7, #24
 810156c:	6878      	ldr	r0, [r7, #4]
 810156e:	f000 f80f 	bl	8101590 <_ZN29EthernetConnectionManagerTask20onEventDataSubscribeERK12UMessageData>
            break;
 8101572:	e006      	b.n	8101582 <_ZN29EthernetConnectionManagerTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x66>
            onEventDataUnsubscribe(msg);
 8101574:	f107 0118 	add.w	r1, r7, #24
 8101578:	6878      	ldr	r0, [r7, #4]
 810157a:	f000 f89b 	bl	81016b4 <_ZN29EthernetConnectionManagerTask22onEventDataUnsubscribeERK12UMessageData>
            break;
 810157e:	e000      	b.n	8101582 <_ZN29EthernetConnectionManagerTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x66>
			break;
 8101580:	bf00      	nop
	}
}
 8101582:	bf00      	nop
 8101584:	3710      	adds	r7, #16
 8101586:	46bd      	mov	sp, r7
 8101588:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810158c:	b002      	add	sp, #8
 810158e:	4770      	bx	lr

08101590 <_ZN29EthernetConnectionManagerTask20onEventDataSubscribeERK12UMessageData>:

void EthernetConnectionManagerTask::onEventDataSubscribe(const UMessageData& data)
{
 8101590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8101594:	b089      	sub	sp, #36	@ 0x24
 8101596:	af00      	add	r7, sp, #0
 8101598:	6178      	str	r0, [r7, #20]
 810159a:	6139      	str	r1, [r7, #16]
    for(int i = 1; i <= data.event_subscriptions[0]; i++)
 810159c:	2301      	movs	r3, #1
 810159e:	61fb      	str	r3, [r7, #28]
 81015a0:	e072      	b.n	8101688 <_ZN29EthernetConnectionManagerTask20onEventDataSubscribeERK12UMessageData+0xf8>
    {
        if(data.event_subscriptions[i] > 63)
 81015a2:	693a      	ldr	r2, [r7, #16]
 81015a4:	69fb      	ldr	r3, [r7, #28]
 81015a6:	4413      	add	r3, r2
 81015a8:	781b      	ldrb	r3, [r3, #0]
 81015aa:	2b3f      	cmp	r3, #63	@ 0x3f
 81015ac:	d934      	bls.n	8101618 <_ZN29EthernetConnectionManagerTask20onEventDataSubscribeERK12UMessageData+0x88>
        {
            subscribed_data[1] |= 1ULL << (data.event_subscriptions[i] - 64);
 81015ae:	697b      	ldr	r3, [r7, #20]
 81015b0:	e9d3 ab0a 	ldrd	sl, fp, [r3, #40]	@ 0x28
 81015b4:	693a      	ldr	r2, [r7, #16]
 81015b6:	69fb      	ldr	r3, [r7, #28]
 81015b8:	4413      	add	r3, r2
 81015ba:	781b      	ldrb	r3, [r3, #0]
 81015bc:	f1a3 0040 	sub.w	r0, r3, #64	@ 0x40
 81015c0:	f04f 0201 	mov.w	r2, #1
 81015c4:	f04f 0300 	mov.w	r3, #0
 81015c8:	f1a0 0620 	sub.w	r6, r0, #32
 81015cc:	f1c0 0120 	rsb	r1, r0, #32
 81015d0:	fa03 f500 	lsl.w	r5, r3, r0
 81015d4:	fa02 f606 	lsl.w	r6, r2, r6
 81015d8:	4335      	orrs	r5, r6
 81015da:	fa22 f101 	lsr.w	r1, r2, r1
 81015de:	430d      	orrs	r5, r1
 81015e0:	fa02 f400 	lsl.w	r4, r2, r0
 81015e4:	ea4a 0304 	orr.w	r3, sl, r4
 81015e8:	60bb      	str	r3, [r7, #8]
 81015ea:	ea4b 0305 	orr.w	r3, fp, r5
 81015ee:	60fb      	str	r3, [r7, #12]
 81015f0:	697b      	ldr	r3, [r7, #20]
 81015f2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 81015f6:	e9c3 120a 	strd	r1, r2, [r3, #40]	@ 0x28
            if(currentlyProcessedRequest == REQUEST_INVALID)
 81015fa:	697b      	ldr	r3, [r7, #20]
 81015fc:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8101600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101604:	d13d      	bne.n	8101682 <_ZN29EthernetConnectionManagerTask20onEventDataSubscribeERK12UMessageData+0xf2>
            {
                currentlyProcessedRequest = static_cast<EDoIPRequest>(data.event_subscriptions[i]);
 8101606:	693a      	ldr	r2, [r7, #16]
 8101608:	69fb      	ldr	r3, [r7, #28]
 810160a:	4413      	add	r3, r2
 810160c:	781b      	ldrb	r3, [r3, #0]
 810160e:	b25a      	sxtb	r2, r3
 8101610:	697b      	ldr	r3, [r7, #20]
 8101612:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8101616:	e034      	b.n	8101682 <_ZN29EthernetConnectionManagerTask20onEventDataSubscribeERK12UMessageData+0xf2>
            }
        }
        else
        {
            subscribed_data[0] |= 1ULL << data.event_subscriptions[i];
 8101618:	697b      	ldr	r3, [r7, #20]
 810161a:	e9d3 ab08 	ldrd	sl, fp, [r3, #32]
 810161e:	693a      	ldr	r2, [r7, #16]
 8101620:	69fb      	ldr	r3, [r7, #28]
 8101622:	4413      	add	r3, r2
 8101624:	781b      	ldrb	r3, [r3, #0]
 8101626:	4618      	mov	r0, r3
 8101628:	f04f 0201 	mov.w	r2, #1
 810162c:	f04f 0300 	mov.w	r3, #0
 8101630:	f1a0 0620 	sub.w	r6, r0, #32
 8101634:	f1c0 0120 	rsb	r1, r0, #32
 8101638:	fa03 f900 	lsl.w	r9, r3, r0
 810163c:	fa02 f606 	lsl.w	r6, r2, r6
 8101640:	ea49 0906 	orr.w	r9, r9, r6
 8101644:	fa22 f101 	lsr.w	r1, r2, r1
 8101648:	ea49 0901 	orr.w	r9, r9, r1
 810164c:	fa02 f800 	lsl.w	r8, r2, r0
 8101650:	ea4a 0308 	orr.w	r3, sl, r8
 8101654:	603b      	str	r3, [r7, #0]
 8101656:	ea4b 0309 	orr.w	r3, fp, r9
 810165a:	607b      	str	r3, [r7, #4]
 810165c:	697b      	ldr	r3, [r7, #20]
 810165e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8101662:	e9c3 1208 	strd	r1, r2, [r3, #32]
            if(currentlyProcessedRequest == REQUEST_INVALID)
 8101666:	697b      	ldr	r3, [r7, #20]
 8101668:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 810166c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101670:	d107      	bne.n	8101682 <_ZN29EthernetConnectionManagerTask20onEventDataSubscribeERK12UMessageData+0xf2>
            {
                currentlyProcessedRequest = static_cast<EDoIPRequest>(data.event_subscriptions[i]);
 8101672:	693a      	ldr	r2, [r7, #16]
 8101674:	69fb      	ldr	r3, [r7, #28]
 8101676:	4413      	add	r3, r2
 8101678:	781b      	ldrb	r3, [r3, #0]
 810167a:	b25a      	sxtb	r2, r3
 810167c:	697b      	ldr	r3, [r7, #20]
 810167e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    for(int i = 1; i <= data.event_subscriptions[0]; i++)
 8101682:	69fb      	ldr	r3, [r7, #28]
 8101684:	3301      	adds	r3, #1
 8101686:	61fb      	str	r3, [r7, #28]
 8101688:	693b      	ldr	r3, [r7, #16]
 810168a:	781b      	ldrb	r3, [r3, #0]
 810168c:	461a      	mov	r2, r3
 810168e:	69fb      	ldr	r3, [r7, #28]
 8101690:	4293      	cmp	r3, r2
 8101692:	dd86      	ble.n	81015a2 <_ZN29EthernetConnectionManagerTask20onEventDataSubscribeERK12UMessageData+0x12>
            }
        }
    }

    EConnectionEvent connEvent = EVENT_DATA_REQUESTED;
 8101694:	2306      	movs	r3, #6
 8101696:	76fb      	strb	r3, [r7, #27]
    xQueueSend(connection_events_internal_queue, &(connEvent), static_cast<TickType_t>(10000));
 8101698:	697b      	ldr	r3, [r7, #20]
 810169a:	68d8      	ldr	r0, [r3, #12]
 810169c:	f107 011b 	add.w	r1, r7, #27
 81016a0:	2300      	movs	r3, #0
 81016a2:	f242 7210 	movw	r2, #10000	@ 0x2710
 81016a6:	f00f fddd 	bl	8111264 <xQueueGenericSend>
}
 81016aa:	bf00      	nop
 81016ac:	3724      	adds	r7, #36	@ 0x24
 81016ae:	46bd      	mov	sp, r7
 81016b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

081016b4 <_ZN29EthernetConnectionManagerTask22onEventDataUnsubscribeERK12UMessageData>:

void EthernetConnectionManagerTask::onEventDataUnsubscribe(const UMessageData& data)
{
 81016b4:	b580      	push	{r7, lr}
 81016b6:	b084      	sub	sp, #16
 81016b8:	af00      	add	r7, sp, #0
 81016ba:	6078      	str	r0, [r7, #4]
 81016bc:	6039      	str	r1, [r7, #0]
    for (int i = 1; i <= data.event_subscriptions[0]; i++)
 81016be:	2301      	movs	r3, #1
 81016c0:	60fb      	str	r3, [r7, #12]
 81016c2:	e017      	b.n	81016f4 <_ZN29EthernetConnectionManagerTask22onEventDataUnsubscribeERK12UMessageData+0x40>
    {
        if (data.event_subscriptions[i] > 63)
 81016c4:	683a      	ldr	r2, [r7, #0]
 81016c6:	68fb      	ldr	r3, [r7, #12]
 81016c8:	4413      	add	r3, r2
 81016ca:	781b      	ldrb	r3, [r3, #0]
 81016cc:	2b3f      	cmp	r3, #63	@ 0x3f
 81016ce:	d907      	bls.n	81016e0 <_ZN29EthernetConnectionManagerTask22onEventDataUnsubscribeERK12UMessageData+0x2c>
        {
            subscribed_data[1] &= 0ULL << (data.event_subscriptions[i] - 64);
 81016d0:	6879      	ldr	r1, [r7, #4]
 81016d2:	f04f 0200 	mov.w	r2, #0
 81016d6:	f04f 0300 	mov.w	r3, #0
 81016da:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
 81016de:	e006      	b.n	81016ee <_ZN29EthernetConnectionManagerTask22onEventDataUnsubscribeERK12UMessageData+0x3a>
        }
        else
        {
            subscribed_data[0] &= 0ULL << data.event_subscriptions[i];
 81016e0:	6879      	ldr	r1, [r7, #4]
 81016e2:	f04f 0200 	mov.w	r2, #0
 81016e6:	f04f 0300 	mov.w	r3, #0
 81016ea:	e9c1 2308 	strd	r2, r3, [r1, #32]
    for (int i = 1; i <= data.event_subscriptions[0]; i++)
 81016ee:	68fb      	ldr	r3, [r7, #12]
 81016f0:	3301      	adds	r3, #1
 81016f2:	60fb      	str	r3, [r7, #12]
 81016f4:	683b      	ldr	r3, [r7, #0]
 81016f6:	781b      	ldrb	r3, [r3, #0]
 81016f8:	461a      	mov	r2, r3
 81016fa:	68fb      	ldr	r3, [r7, #12]
 81016fc:	4293      	cmp	r3, r2
 81016fe:	dde1      	ble.n	81016c4 <_ZN29EthernetConnectionManagerTask22onEventDataUnsubscribeERK12UMessageData+0x10>
        }
    }

    if(subscribed_data[0] == 0ULL && subscribed_data[1] == 0ULL)
 8101700:	687b      	ldr	r3, [r7, #4]
 8101702:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8101706:	4313      	orrs	r3, r2
 8101708:	d113      	bne.n	8101732 <_ZN29EthernetConnectionManagerTask22onEventDataUnsubscribeERK12UMessageData+0x7e>
 810170a:	687b      	ldr	r3, [r7, #4]
 810170c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8101710:	4313      	orrs	r3, r2
 8101712:	d10e      	bne.n	8101732 <_ZN29EthernetConnectionManagerTask22onEventDataUnsubscribeERK12UMessageData+0x7e>
    {
        currentlyProcessedRequest = REQUEST_INVALID;
 8101714:	687b      	ldr	r3, [r7, #4]
 8101716:	22ff      	movs	r2, #255	@ 0xff
 8101718:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        EConnectionEvent connEvent = EVENT_NO_DATA_TO_REQUEST;
 810171c:	2307      	movs	r3, #7
 810171e:	72fb      	strb	r3, [r7, #11]
        xQueueSend(connection_events_internal_queue, &(connEvent), static_cast<TickType_t>(10000));
 8101720:	687b      	ldr	r3, [r7, #4]
 8101722:	68d8      	ldr	r0, [r3, #12]
 8101724:	f107 010b 	add.w	r1, r7, #11
 8101728:	2300      	movs	r3, #0
 810172a:	f242 7210 	movw	r2, #10000	@ 0x2710
 810172e:	f00f fd99 	bl	8111264 <xQueueGenericSend>
    }
}
 8101732:	bf00      	nop
 8101734:	3710      	adds	r7, #16
 8101736:	46bd      	mov	sp, r7
 8101738:	bd80      	pop	{r7, pc}
	...

0810173c <_ZN29EthernetConnectionManagerTask17processConnectionEv>:

void EthernetConnectionManagerTask::processConnection()
{
 810173c:	b580      	push	{r7, lr}
 810173e:	b082      	sub	sp, #8
 8101740:	af00      	add	r7, sp, #0
 8101742:	6078      	str	r0, [r7, #4]
    switch(current_connection_state)
 8101744:	687b      	ldr	r3, [r7, #4]
 8101746:	7c1b      	ldrb	r3, [r3, #16]
 8101748:	2b04      	cmp	r3, #4
 810174a:	d812      	bhi.n	8101772 <_ZN29EthernetConnectionManagerTask17processConnectionEv+0x36>
 810174c:	a201      	add	r2, pc, #4	@ (adr r2, 8101754 <_ZN29EthernetConnectionManagerTask17processConnectionEv+0x18>)
 810174e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101752:	bf00      	nop
 8101754:	08101771 	.word	0x08101771
 8101758:	08101769 	.word	0x08101769
 810175c:	08101771 	.word	0x08101771
 8101760:	08101771 	.word	0x08101771
 8101764:	08101771 	.word	0x08101771
            //wait for connection event, do nothing until that happens
            break;
        }
        case STATE_SERVICE_DISCOVERY:
        {
            processStateDiscovery();
 8101768:	6878      	ldr	r0, [r7, #4]
 810176a:	f000 f885 	bl	8101878 <_ZN29EthernetConnectionManagerTask21processStateDiscoveryEv>
            break;
 810176e:	e000      	b.n	8101772 <_ZN29EthernetConnectionManagerTask17processConnectionEv+0x36>
            break;
 8101770:	bf00      	nop
            // do not do anything, wait for events
            break;
        }

    }
}
 8101772:	bf00      	nop
 8101774:	3708      	adds	r7, #8
 8101776:	46bd      	mov	sp, r7
 8101778:	bd80      	pop	{r7, pc}
 810177a:	bf00      	nop

0810177c <_ZZN29EthernetConnectionManagerTask7processEvENKUl10EEventType12UMessageData12EEventClientS2_E_clES0_S1_S2_S2_>:

void EthernetConnectionManagerTask::process()
{
	event_bus.receive([this](EEventType event, UMessageData msg, EEventClient eventSender, EEventClient eventReceiver){this->OnEvent(event, msg, eventSender, eventReceiver);});
 810177c:	b082      	sub	sp, #8
 810177e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8101780:	b089      	sub	sp, #36	@ 0x24
 8101782:	af06      	add	r7, sp, #24
 8101784:	6078      	str	r0, [r7, #4]
 8101786:	f107 0020 	add.w	r0, r7, #32
 810178a:	e880 000c 	stmia.w	r0, {r2, r3}
 810178e:	460b      	mov	r3, r1
 8101790:	70fb      	strb	r3, [r7, #3]
 8101792:	687b      	ldr	r3, [r7, #4]
 8101794:	681d      	ldr	r5, [r3, #0]
 8101796:	78fe      	ldrb	r6, [r7, #3]
 8101798:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 810179c:	9304      	str	r3, [sp, #16]
 810179e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 81017a2:	9303      	str	r3, [sp, #12]
 81017a4:	466c      	mov	r4, sp
 81017a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81017aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 81017ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 81017b2:	f107 0320 	add.w	r3, r7, #32
 81017b6:	cb0c      	ldmia	r3, {r2, r3}
 81017b8:	4631      	mov	r1, r6
 81017ba:	4628      	mov	r0, r5
 81017bc:	f7ff feae 	bl	810151c <_ZN29EthernetConnectionManagerTask7OnEventE10EEventType12UMessageData12EEventClientS2_>
 81017c0:	bf00      	nop
 81017c2:	370c      	adds	r7, #12
 81017c4:	46bd      	mov	sp, r7
 81017c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 81017ca:	b002      	add	sp, #8
 81017cc:	4770      	bx	lr

081017ce <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 81017ce:	b580      	push	{r7, lr}
 81017d0:	b082      	sub	sp, #8
 81017d2:	af00      	add	r7, sp, #0
 81017d4:	6078      	str	r0, [r7, #4]
 81017d6:	687b      	ldr	r3, [r7, #4]
 81017d8:	4618      	mov	r0, r3
 81017da:	f7ff fdc5 	bl	8101368 <_ZNSt14_Function_baseD1Ev>
 81017de:	687b      	ldr	r3, [r7, #4]
 81017e0:	4618      	mov	r0, r3
 81017e2:	3708      	adds	r7, #8
 81017e4:	46bd      	mov	sp, r7
 81017e6:	bd80      	pop	{r7, pc}

081017e8 <_ZN29EthernetConnectionManagerTask7processEv>:
{
 81017e8:	b590      	push	{r4, r7, lr}
 81017ea:	b08b      	sub	sp, #44	@ 0x2c
 81017ec:	af00      	add	r7, sp, #0
 81017ee:	6078      	str	r0, [r7, #4]
	event_bus.receive([this](EEventType event, UMessageData msg, EEventClient eventSender, EEventClient eventReceiver){this->OnEvent(event, msg, eventSender, eventReceiver);});
 81017f0:	687c      	ldr	r4, [r7, #4]
 81017f2:	687b      	ldr	r3, [r7, #4]
 81017f4:	61fb      	str	r3, [r7, #28]
 81017f6:	f107 021c 	add.w	r2, r7, #28
 81017fa:	f107 030c 	add.w	r3, r7, #12
 81017fe:	4611      	mov	r1, r2
 8101800:	4618      	mov	r0, r3
 8101802:	f001 fa0d 	bl	8102c20 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN29EthernetConnectionManagerTask7processEvEUlS0_S1_S2_S2_E_vEEOT_>
 8101806:	f107 030c 	add.w	r3, r7, #12
 810180a:	4619      	mov	r1, r3
 810180c:	4620      	mov	r0, r4
 810180e:	f001 fc74 	bl	81030fa <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE>
 8101812:	f107 030c 	add.w	r3, r7, #12
 8101816:	4618      	mov	r0, r3
 8101818:	f7ff ffd9 	bl	81017ce <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EED1Ev>
    processConnection();
 810181c:	6878      	ldr	r0, [r7, #4]
 810181e:	f7ff ff8d 	bl	810173c <_ZN29EthernetConnectionManagerTask17processConnectionEv>
    
    EConnectionState newState;
    EConnectionEvent connEvent;
    BaseType_t received = pdTRUE;
 8101822:	2301      	movs	r3, #1
 8101824:	627b      	str	r3, [r7, #36]	@ 0x24

	do
	{
		received = xQueueReceive(connection_events_internal_queue, &(connEvent), static_cast<TickType_t>(0));
 8101826:	687b      	ldr	r3, [r7, #4]
 8101828:	68db      	ldr	r3, [r3, #12]
 810182a:	f107 010b 	add.w	r1, r7, #11
 810182e:	2200      	movs	r2, #0
 8101830:	4618      	mov	r0, r3
 8101832:	f00f ff47 	bl	81116c4 <xQueueReceive>
 8101836:	6278      	str	r0, [r7, #36]	@ 0x24
		if(received == pdTRUE)
 8101838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810183a:	2b01      	cmp	r3, #1
 810183c:	d114      	bne.n	8101868 <_ZN29EthernetConnectionManagerTask7processEv+0x80>
		{
			newState = onConnectionEvent(connEvent);
 810183e:	7afb      	ldrb	r3, [r7, #11]
 8101840:	4619      	mov	r1, r3
 8101842:	6878      	ldr	r0, [r7, #4]
 8101844:	f000 f8ca 	bl	81019dc <_ZN29EthernetConnectionManagerTask17onConnectionEventENS_16EConnectionEventE>
 8101848:	4603      	mov	r3, r0
 810184a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            if(newState != current_connection_state)
 810184e:	687b      	ldr	r3, [r7, #4]
 8101850:	7c1b      	ldrb	r3, [r3, #16]
 8101852:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8101856:	429a      	cmp	r2, r3
 8101858:	d006      	beq.n	8101868 <_ZN29EthernetConnectionManagerTask7processEv+0x80>
            {
                // transtition happened
                current_connection_state = newState;
 810185a:	687b      	ldr	r3, [r7, #4]
 810185c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8101860:	741a      	strb	r2, [r3, #16]
                // Process again so that after every onEvent the processing state code is called at least once.
                // The chance of this happening is minimal, but not zero. 
                processConnection();
 8101862:	6878      	ldr	r0, [r7, #4]
 8101864:	f7ff ff6a 	bl	810173c <_ZN29EthernetConnectionManagerTask17processConnectionEv>
            }
		}
	} while(received == pdTRUE);
 8101868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810186a:	2b01      	cmp	r3, #1
 810186c:	d0db      	beq.n	8101826 <_ZN29EthernetConnectionManagerTask7processEv+0x3e>
}
 810186e:	bf00      	nop
 8101870:	bf00      	nop
 8101872:	372c      	adds	r7, #44	@ 0x2c
 8101874:	46bd      	mov	sp, r7
 8101876:	bd90      	pop	{r4, r7, pc}

08101878 <_ZN29EthernetConnectionManagerTask21processStateDiscoveryEv>:

void EthernetConnectionManagerTask::processStateDiscovery()
{
 8101878:	b580      	push	{r7, lr}
 810187a:	b084      	sub	sp, #16
 810187c:	af00      	add	r7, sp, #0
 810187e:	6078      	str	r0, [r7, #4]
    bool ret = false;
 8101880:	2300      	movs	r3, #0
 8101882:	73bb      	strb	r3, [r7, #14]

    uint8_t tryCnt = 0;
 8101884:	2300      	movs	r3, #0
 8101886:	73fb      	strb	r3, [r7, #15]
    do
    {
        ret = sendSSDP();
 8101888:	6878      	ldr	r0, [r7, #4]
 810188a:	f000 f9cb 	bl	8101c24 <_ZN29EthernetConnectionManagerTask8sendSSDPEv>
 810188e:	4603      	mov	r3, r0
 8101890:	73bb      	strb	r3, [r7, #14]
        tryCnt++;
 8101892:	7bfb      	ldrb	r3, [r7, #15]
 8101894:	3301      	adds	r3, #1
 8101896:	73fb      	strb	r3, [r7, #15]
        osDelay(10);
 8101898:	200a      	movs	r0, #10
 810189a:	f00e f9d0 	bl	810fc3e <osDelay>
    } while (ret == false && tryCnt < 4); // try 3 times
 810189e:	7bbb      	ldrb	r3, [r7, #14]
 81018a0:	2b00      	cmp	r3, #0
 81018a2:	d102      	bne.n	81018aa <_ZN29EthernetConnectionManagerTask21processStateDiscoveryEv+0x32>
 81018a4:	7bfb      	ldrb	r3, [r7, #15]
 81018a6:	2b03      	cmp	r3, #3
 81018a8:	d9ee      	bls.n	8101888 <_ZN29EthernetConnectionManagerTask21processStateDiscoveryEv+0x10>

    tryCnt = 0;
 81018aa:	2300      	movs	r3, #0
 81018ac:	73fb      	strb	r3, [r7, #15]
    do
    {
        ret = sendSLP();
 81018ae:	6878      	ldr	r0, [r7, #4]
 81018b0:	f000 fa0c 	bl	8101ccc <_ZN29EthernetConnectionManagerTask7sendSLPEv>
 81018b4:	4603      	mov	r3, r0
 81018b6:	73bb      	strb	r3, [r7, #14]
        tryCnt++;
 81018b8:	7bfb      	ldrb	r3, [r7, #15]
 81018ba:	3301      	adds	r3, #1
 81018bc:	73fb      	strb	r3, [r7, #15]
        osDelay(10);
 81018be:	200a      	movs	r0, #10
 81018c0:	f00e f9bd 	bl	810fc3e <osDelay>
    } while (ret == false && tryCnt < 4); // try 3 times
 81018c4:	7bbb      	ldrb	r3, [r7, #14]
 81018c6:	2b00      	cmp	r3, #0
 81018c8:	d102      	bne.n	81018d0 <_ZN29EthernetConnectionManagerTask21processStateDiscoveryEv+0x58>
 81018ca:	7bfb      	ldrb	r3, [r7, #15]
 81018cc:	2b03      	cmp	r3, #3
 81018ce:	d9ee      	bls.n	81018ae <_ZN29EthernetConnectionManagerTask21processStateDiscoveryEv+0x36>

    tryCnt = 0;
 81018d0:	2300      	movs	r3, #0
 81018d2:	73fb      	strb	r3, [r7, #15]
    do
    {
        ret = sendDoIPInit();
 81018d4:	6878      	ldr	r0, [r7, #4]
 81018d6:	f000 fa67 	bl	8101da8 <_ZN29EthernetConnectionManagerTask12sendDoIPInitEv>
 81018da:	4603      	mov	r3, r0
 81018dc:	73bb      	strb	r3, [r7, #14]
        tryCnt++;
 81018de:	7bfb      	ldrb	r3, [r7, #15]
 81018e0:	3301      	adds	r3, #1
 81018e2:	73fb      	strb	r3, [r7, #15]
        osDelay(10);
 81018e4:	200a      	movs	r0, #10
 81018e6:	f00e f9aa 	bl	810fc3e <osDelay>
    } while (ret == false && tryCnt < 4); // try 3 times
 81018ea:	7bbb      	ldrb	r3, [r7, #14]
 81018ec:	2b00      	cmp	r3, #0
 81018ee:	d102      	bne.n	81018f6 <_ZN29EthernetConnectionManagerTask21processStateDiscoveryEv+0x7e>
 81018f0:	7bfb      	ldrb	r3, [r7, #15]
 81018f2:	2b03      	cmp	r3, #3
 81018f4:	d9ee      	bls.n	81018d4 <_ZN29EthernetConnectionManagerTask21processStateDiscoveryEv+0x5c>
    osDelay(100);
 81018f6:	2064      	movs	r0, #100	@ 0x64
 81018f8:	f00e f9a1 	bl	810fc3e <osDelay>

}
 81018fc:	bf00      	nop
 81018fe:	3710      	adds	r7, #16
 8101900:	46bd      	mov	sp, r7
 8101902:	bd80      	pop	{r7, pc}

08101904 <_ZN29EthernetConnectionManagerTask15sendNextRequestEv>:

void EthernetConnectionManagerTask::sendNextRequest()
{
 8101904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8101908:	b085      	sub	sp, #20
 810190a:	af00      	add	r7, sp, #0
 810190c:	6078      	str	r0, [r7, #4]
    for (int i = currentlyProcessedRequest + 1; i < 129; i++) //it is 129 on purpose, because after 127th param is processed we will restart index to 0
 810190e:	6879      	ldr	r1, [r7, #4]
 8101910:	f991 1030 	ldrsb.w	r1, [r1, #48]	@ 0x30
 8101914:	3101      	adds	r1, #1
 8101916:	60f9      	str	r1, [r7, #12]
 8101918:	e056      	b.n	81019c8 <_ZN29EthernetConnectionManagerTask15sendNextRequestEv+0xc4>
    {
        if(i > 127)
 810191a:	68f9      	ldr	r1, [r7, #12]
 810191c:	297f      	cmp	r1, #127	@ 0x7f
 810191e:	dd01      	ble.n	8101924 <_ZN29EthernetConnectionManagerTask15sendNextRequestEv+0x20>
        {
            i = 0;
 8101920:	2100      	movs	r1, #0
 8101922:	60f9      	str	r1, [r7, #12]
        }
        if(i < 64)
 8101924:	68f9      	ldr	r1, [r7, #12]
 8101926:	293f      	cmp	r1, #63	@ 0x3f
 8101928:	dc23      	bgt.n	8101972 <_ZN29EthernetConnectionManagerTask15sendNextRequestEv+0x6e>
        {
            if (subscribed_data[0] & (1ULL << i))
 810192a:	6879      	ldr	r1, [r7, #4]
 810192c:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 8101930:	68fe      	ldr	r6, [r7, #12]
 8101932:	f1c6 0e20 	rsb	lr, r6, #32
 8101936:	f1a6 0c20 	sub.w	ip, r6, #32
 810193a:	fa20 f206 	lsr.w	r2, r0, r6
 810193e:	fa01 fe0e 	lsl.w	lr, r1, lr
 8101942:	ea42 020e 	orr.w	r2, r2, lr
 8101946:	fa21 fc0c 	lsr.w	ip, r1, ip
 810194a:	ea42 020c 	orr.w	r2, r2, ip
 810194e:	fa21 f306 	lsr.w	r3, r1, r6
 8101952:	f002 0801 	and.w	r8, r2, #1
 8101956:	f04f 0900 	mov.w	r9, #0
 810195a:	ea58 0109 	orrs.w	r1, r8, r9
 810195e:	d030      	beq.n	81019c2 <_ZN29EthernetConnectionManagerTask15sendNextRequestEv+0xbe>
            {
                auto dataType = static_cast<EDoIPRequest>(i);
 8101960:	68fb      	ldr	r3, [r7, #12]
 8101962:	72bb      	strb	r3, [r7, #10]
                sendRequestForData(dataType);
 8101964:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8101968:	4619      	mov	r1, r3
 810196a:	6878      	ldr	r0, [r7, #4]
 810196c:	f001 f81e 	bl	81029ac <_ZN29EthernetConnectionManagerTask18sendRequestForDataENS_12EDoIPRequestE>
                break;
 8101970:	e02e      	b.n	81019d0 <_ZN29EthernetConnectionManagerTask15sendNextRequestEv+0xcc>
            }
        }
        else
        {
            if (subscribed_data[1] & (1ULL << (i - 64)))
 8101972:	6879      	ldr	r1, [r7, #4]
 8101974:	e9d1 010a 	ldrd	r0, r1, [r1, #40]	@ 0x28
 8101978:	68fe      	ldr	r6, [r7, #12]
 810197a:	3e40      	subs	r6, #64	@ 0x40
 810197c:	f1c6 0e20 	rsb	lr, r6, #32
 8101980:	f1a6 0c20 	sub.w	ip, r6, #32
 8101984:	fa20 f406 	lsr.w	r4, r0, r6
 8101988:	fa01 fe0e 	lsl.w	lr, r1, lr
 810198c:	ea44 040e 	orr.w	r4, r4, lr
 8101990:	fa21 fc0c 	lsr.w	ip, r1, ip
 8101994:	ea44 040c 	orr.w	r4, r4, ip
 8101998:	fa21 f506 	lsr.w	r5, r1, r6
 810199c:	f004 0a01 	and.w	sl, r4, #1
 81019a0:	f04f 0b00 	mov.w	fp, #0
 81019a4:	ea5a 010b 	orrs.w	r1, sl, fp
 81019a8:	d00b      	beq.n	81019c2 <_ZN29EthernetConnectionManagerTask15sendNextRequestEv+0xbe>
            {
                auto dataType = static_cast<EDoIPRequest>(i - 64);
 81019aa:	68fb      	ldr	r3, [r7, #12]
 81019ac:	b2db      	uxtb	r3, r3
 81019ae:	3b40      	subs	r3, #64	@ 0x40
 81019b0:	b2db      	uxtb	r3, r3
 81019b2:	72fb      	strb	r3, [r7, #11]
                sendRequestForData(dataType);
 81019b4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 81019b8:	4619      	mov	r1, r3
 81019ba:	6878      	ldr	r0, [r7, #4]
 81019bc:	f000 fff6 	bl	81029ac <_ZN29EthernetConnectionManagerTask18sendRequestForDataENS_12EDoIPRequestE>
                break;
 81019c0:	e006      	b.n	81019d0 <_ZN29EthernetConnectionManagerTask15sendNextRequestEv+0xcc>
    for (int i = currentlyProcessedRequest + 1; i < 129; i++) //it is 129 on purpose, because after 127th param is processed we will restart index to 0
 81019c2:	68f9      	ldr	r1, [r7, #12]
 81019c4:	3101      	adds	r1, #1
 81019c6:	60f9      	str	r1, [r7, #12]
 81019c8:	68f9      	ldr	r1, [r7, #12]
 81019ca:	2980      	cmp	r1, #128	@ 0x80
 81019cc:	dda5      	ble.n	810191a <_ZN29EthernetConnectionManagerTask15sendNextRequestEv+0x16>
            }
        }
    }
}
 81019ce:	bf00      	nop
 81019d0:	bf00      	nop
 81019d2:	3714      	adds	r7, #20
 81019d4:	46bd      	mov	sp, r7
 81019d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

081019dc <_ZN29EthernetConnectionManagerTask17onConnectionEventENS_16EConnectionEventE>:

EthernetConnectionManagerTask::EConnectionState EthernetConnectionManagerTask::onConnectionEvent(EConnectionEvent event)
{
 81019dc:	b580      	push	{r7, lr}
 81019de:	b082      	sub	sp, #8
 81019e0:	af00      	add	r7, sp, #0
 81019e2:	6078      	str	r0, [r7, #4]
 81019e4:	460b      	mov	r3, r1
 81019e6:	70fb      	strb	r3, [r7, #3]
    switch(current_connection_state)
 81019e8:	687b      	ldr	r3, [r7, #4]
 81019ea:	7c1b      	ldrb	r3, [r3, #16]
 81019ec:	2b04      	cmp	r3, #4
 81019ee:	d830      	bhi.n	8101a52 <_ZN29EthernetConnectionManagerTask17onConnectionEventENS_16EConnectionEventE+0x76>
 81019f0:	a201      	add	r2, pc, #4	@ (adr r2, 81019f8 <_ZN29EthernetConnectionManagerTask17onConnectionEventENS_16EConnectionEventE+0x1c>)
 81019f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81019f6:	bf00      	nop
 81019f8:	08101a0d 	.word	0x08101a0d
 81019fc:	08101a1b 	.word	0x08101a1b
 8101a00:	08101a29 	.word	0x08101a29
 8101a04:	08101a37 	.word	0x08101a37
 8101a08:	08101a45 	.word	0x08101a45
    {
        case STATE_ETHERNET_DISCONNECTED:
        {
            return onEventEthDisconnected(event);
 8101a0c:	78fb      	ldrb	r3, [r7, #3]
 8101a0e:	4619      	mov	r1, r3
 8101a10:	6878      	ldr	r0, [r7, #4]
 8101a12:	f000 f823 	bl	8101a5c <_ZN29EthernetConnectionManagerTask22onEventEthDisconnectedENS_16EConnectionEventE>
 8101a16:	4603      	mov	r3, r0
 8101a18:	e01c      	b.n	8101a54 <_ZN29EthernetConnectionManagerTask17onConnectionEventENS_16EConnectionEventE+0x78>
            break;
        }
        case STATE_SERVICE_DISCOVERY:
        {
            return onEventDiscovery(event);
 8101a1a:	78fb      	ldrb	r3, [r7, #3]
 8101a1c:	4619      	mov	r1, r3
 8101a1e:	6878      	ldr	r0, [r7, #4]
 8101a20:	f000 f830 	bl	8101a84 <_ZN29EthernetConnectionManagerTask16onEventDiscoveryENS_16EConnectionEventE>
 8101a24:	4603      	mov	r3, r0
 8101a26:	e015      	b.n	8101a54 <_ZN29EthernetConnectionManagerTask17onConnectionEventENS_16EConnectionEventE+0x78>
            break;
        }
        case STATE_CONNECTING_TCP:
        {
            return onEventConnectingTCP(event);
 8101a28:	78fb      	ldrb	r3, [r7, #3]
 8101a2a:	4619      	mov	r1, r3
 8101a2c:	6878      	ldr	r0, [r7, #4]
 8101a2e:	f000 f848 	bl	8101ac2 <_ZN29EthernetConnectionManagerTask20onEventConnectingTCPENS_16EConnectionEventE>
 8101a32:	4603      	mov	r3, r0
 8101a34:	e00e      	b.n	8101a54 <_ZN29EthernetConnectionManagerTask17onConnectionEventENS_16EConnectionEventE+0x78>
            break;
        }
        case STATE_CONNECTED_ECU:
        {
            return onEventConnectedECUDefault(event);
 8101a36:	78fb      	ldrb	r3, [r7, #3]
 8101a38:	4619      	mov	r1, r3
 8101a3a:	6878      	ldr	r0, [r7, #4]
 8101a3c:	f000 f87b 	bl	8101b36 <_ZN29EthernetConnectionManagerTask26onEventConnectedECUDefaultENS_16EConnectionEventE>
 8101a40:	4603      	mov	r3, r0
 8101a42:	e007      	b.n	8101a54 <_ZN29EthernetConnectionManagerTask17onConnectionEventENS_16EConnectionEventE+0x78>
            break;
        }
        case STATE_WAITING_FOR_DATA_FROM_ECU:
        {
            return onEventWaitingForDataFromECU(event);
 8101a44:	78fb      	ldrb	r3, [r7, #3]
 8101a46:	4619      	mov	r1, r3
 8101a48:	6878      	ldr	r0, [r7, #4]
 8101a4a:	f000 f8a9 	bl	8101ba0 <_ZN29EthernetConnectionManagerTask28onEventWaitingForDataFromECUENS_16EConnectionEventE>
 8101a4e:	4603      	mov	r3, r0
 8101a50:	e000      	b.n	8101a54 <_ZN29EthernetConnectionManagerTask17onConnectionEventENS_16EConnectionEventE+0x78>
        }
        default:
            return STATE_ETHERNET_DISCONNECTED;
 8101a52:	2300      	movs	r3, #0
    }
}
 8101a54:	4618      	mov	r0, r3
 8101a56:	3708      	adds	r7, #8
 8101a58:	46bd      	mov	sp, r7
 8101a5a:	bd80      	pop	{r7, pc}

08101a5c <_ZN29EthernetConnectionManagerTask22onEventEthDisconnectedENS_16EConnectionEventE>:

EthernetConnectionManagerTask::EConnectionState EthernetConnectionManagerTask::onEventEthDisconnected(EConnectionEvent event)
{
 8101a5c:	b580      	push	{r7, lr}
 8101a5e:	b082      	sub	sp, #8
 8101a60:	af00      	add	r7, sp, #0
 8101a62:	6078      	str	r0, [r7, #4]
 8101a64:	460b      	mov	r3, r1
 8101a66:	70fb      	strb	r3, [r7, #3]
    switch(event)
 8101a68:	78fb      	ldrb	r3, [r7, #3]
 8101a6a:	2b00      	cmp	r3, #0
 8101a6c:	d104      	bne.n	8101a78 <_ZN29EthernetConnectionManagerTask22onEventEthDisconnectedENS_16EConnectionEventE+0x1c>
    {
        case EVENT_ETHERNET_CONNECTED:
        {
            udpConnect();
 8101a6e:	6878      	ldr	r0, [r7, #4]
 8101a70:	f000 fbce 	bl	8102210 <_ZN29EthernetConnectionManagerTask10udpConnectEv>
            return STATE_SERVICE_DISCOVERY;
 8101a74:	2301      	movs	r3, #1
 8101a76:	e001      	b.n	8101a7c <_ZN29EthernetConnectionManagerTask22onEventEthDisconnectedENS_16EConnectionEventE+0x20>
        }
        default:
        {
            //no transition
            return current_connection_state;
 8101a78:	687b      	ldr	r3, [r7, #4]
 8101a7a:	7c1b      	ldrb	r3, [r3, #16]
            break;
        }
    }
}
 8101a7c:	4618      	mov	r0, r3
 8101a7e:	3708      	adds	r7, #8
 8101a80:	46bd      	mov	sp, r7
 8101a82:	bd80      	pop	{r7, pc}

08101a84 <_ZN29EthernetConnectionManagerTask16onEventDiscoveryENS_16EConnectionEventE>:

EthernetConnectionManagerTask::EConnectionState EthernetConnectionManagerTask::onEventDiscovery(EConnectionEvent event)
{
 8101a84:	b580      	push	{r7, lr}
 8101a86:	b082      	sub	sp, #8
 8101a88:	af00      	add	r7, sp, #0
 8101a8a:	6078      	str	r0, [r7, #4]
 8101a8c:	460b      	mov	r3, r1
 8101a8e:	70fb      	strb	r3, [r7, #3]
    switch(event)
 8101a90:	78fb      	ldrb	r3, [r7, #3]
 8101a92:	2b01      	cmp	r3, #1
 8101a94:	d002      	beq.n	8101a9c <_ZN29EthernetConnectionManagerTask16onEventDiscoveryENS_16EConnectionEventE+0x18>
 8101a96:	2b02      	cmp	r3, #2
 8101a98:	d005      	beq.n	8101aa6 <_ZN29EthernetConnectionManagerTask16onEventDiscoveryENS_16EConnectionEventE+0x22>
 8101a9a:	e00c      	b.n	8101ab6 <_ZN29EthernetConnectionManagerTask16onEventDiscoveryENS_16EConnectionEventE+0x32>
    {
        case EVENT_ETHERNET_DISCONNECTED:
        {
            udpDisconnect();
 8101a9c:	6878      	ldr	r0, [r7, #4]
 8101a9e:	f000 fbe5 	bl	810226c <_ZN29EthernetConnectionManagerTask13udpDisconnectEv>
            return STATE_ETHERNET_DISCONNECTED;
 8101aa2:	2300      	movs	r3, #0
 8101aa4:	e009      	b.n	8101aba <_ZN29EthernetConnectionManagerTask16onEventDiscoveryENS_16EConnectionEventE+0x36>
        }
        case EVENT_DISCOVERY_COMPLETED:
        {
            udpDisconnect();
 8101aa6:	6878      	ldr	r0, [r7, #4]
 8101aa8:	f000 fbe0 	bl	810226c <_ZN29EthernetConnectionManagerTask13udpDisconnectEv>
            tcpConnect();
 8101aac:	6878      	ldr	r0, [r7, #4]
 8101aae:	f000 fc0b 	bl	81022c8 <_ZN29EthernetConnectionManagerTask10tcpConnectEv>
            return STATE_CONNECTING_TCP;
 8101ab2:	2302      	movs	r3, #2
 8101ab4:	e001      	b.n	8101aba <_ZN29EthernetConnectionManagerTask16onEventDiscoveryENS_16EConnectionEventE+0x36>
        }
        default:
        {
            //no transition
            return current_connection_state;
 8101ab6:	687b      	ldr	r3, [r7, #4]
 8101ab8:	7c1b      	ldrb	r3, [r3, #16]
            break;
        }
    }
}
 8101aba:	4618      	mov	r0, r3
 8101abc:	3708      	adds	r7, #8
 8101abe:	46bd      	mov	sp, r7
 8101ac0:	bd80      	pop	{r7, pc}

08101ac2 <_ZN29EthernetConnectionManagerTask20onEventConnectingTCPENS_16EConnectionEventE>:

EthernetConnectionManagerTask::EConnectionState EthernetConnectionManagerTask::onEventConnectingTCP(EConnectionEvent event)
{
 8101ac2:	b580      	push	{r7, lr}
 8101ac4:	b084      	sub	sp, #16
 8101ac6:	af00      	add	r7, sp, #0
 8101ac8:	6078      	str	r0, [r7, #4]
 8101aca:	460b      	mov	r3, r1
 8101acc:	70fb      	strb	r3, [r7, #3]
    switch(event)
 8101ace:	78fb      	ldrb	r3, [r7, #3]
 8101ad0:	2b04      	cmp	r3, #4
 8101ad2:	d00b      	beq.n	8101aec <_ZN29EthernetConnectionManagerTask20onEventConnectingTCPENS_16EConnectionEventE+0x2a>
 8101ad4:	2b04      	cmp	r3, #4
 8101ad6:	dc28      	bgt.n	8101b2a <_ZN29EthernetConnectionManagerTask20onEventConnectingTCPENS_16EConnectionEventE+0x68>
 8101ad8:	2b01      	cmp	r3, #1
 8101ada:	d002      	beq.n	8101ae2 <_ZN29EthernetConnectionManagerTask20onEventConnectingTCPENS_16EConnectionEventE+0x20>
 8101adc:	2b03      	cmp	r3, #3
 8101ade:	d00d      	beq.n	8101afc <_ZN29EthernetConnectionManagerTask20onEventConnectingTCPENS_16EConnectionEventE+0x3a>
 8101ae0:	e023      	b.n	8101b2a <_ZN29EthernetConnectionManagerTask20onEventConnectingTCPENS_16EConnectionEventE+0x68>
    {
        case EVENT_ETHERNET_DISCONNECTED:
        {
            tcpDisconnect();
 8101ae2:	6878      	ldr	r0, [r7, #4]
 8101ae4:	f000 fc86 	bl	81023f4 <_ZN29EthernetConnectionManagerTask13tcpDisconnectEv>
            return STATE_ETHERNET_DISCONNECTED;
 8101ae8:	2300      	movs	r3, #0
 8101aea:	e020      	b.n	8101b2e <_ZN29EthernetConnectionManagerTask20onEventConnectingTCPENS_16EConnectionEventE+0x6c>
        }
        case EVENT_TCP_CONNECTION_FAILED:
        {
            tcpDisconnect();
 8101aec:	6878      	ldr	r0, [r7, #4]
 8101aee:	f000 fc81 	bl	81023f4 <_ZN29EthernetConnectionManagerTask13tcpDisconnectEv>
            udpConnect();
 8101af2:	6878      	ldr	r0, [r7, #4]
 8101af4:	f000 fb8c 	bl	8102210 <_ZN29EthernetConnectionManagerTask10udpConnectEv>
            return STATE_SERVICE_DISCOVERY;
 8101af8:	2301      	movs	r3, #1
 8101afa:	e018      	b.n	8101b2e <_ZN29EthernetConnectionManagerTask20onEventConnectingTCPENS_16EConnectionEventE+0x6c>
        }
        case EVENT_TCP_CONNECTED:
        {
        	if((subscribed_data[0] != 0ULL) || (subscribed_data[1] != 0ULL))
 8101afc:	687b      	ldr	r3, [r7, #4]
 8101afe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8101b02:	4313      	orrs	r3, r2
 8101b04:	d104      	bne.n	8101b10 <_ZN29EthernetConnectionManagerTask20onEventConnectingTCPENS_16EConnectionEventE+0x4e>
 8101b06:	687b      	ldr	r3, [r7, #4]
 8101b08:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8101b0c:	4313      	orrs	r3, r2
 8101b0e:	d00a      	beq.n	8101b26 <_ZN29EthernetConnectionManagerTask20onEventConnectingTCPENS_16EConnectionEventE+0x64>
        	{
        		EConnectionEvent connEvent = EVENT_DATA_REQUESTED;
 8101b10:	2306      	movs	r3, #6
 8101b12:	73fb      	strb	r3, [r7, #15]
        		xQueueSend(connection_events_internal_queue, &(connEvent), static_cast<TickType_t>(10000));
 8101b14:	687b      	ldr	r3, [r7, #4]
 8101b16:	68d8      	ldr	r0, [r3, #12]
 8101b18:	f107 010f 	add.w	r1, r7, #15
 8101b1c:	2300      	movs	r3, #0
 8101b1e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8101b22:	f00f fb9f 	bl	8111264 <xQueueGenericSend>
        	}
            return STATE_CONNECTED_ECU;
 8101b26:	2303      	movs	r3, #3
 8101b28:	e001      	b.n	8101b2e <_ZN29EthernetConnectionManagerTask20onEventConnectingTCPENS_16EConnectionEventE+0x6c>
        }
        default:
        {
            //no transition
            return current_connection_state;
 8101b2a:	687b      	ldr	r3, [r7, #4]
 8101b2c:	7c1b      	ldrb	r3, [r3, #16]
            break;
        }
    }
}
 8101b2e:	4618      	mov	r0, r3
 8101b30:	3710      	adds	r7, #16
 8101b32:	46bd      	mov	sp, r7
 8101b34:	bd80      	pop	{r7, pc}

08101b36 <_ZN29EthernetConnectionManagerTask26onEventConnectedECUDefaultENS_16EConnectionEventE>:

EthernetConnectionManagerTask::EConnectionState EthernetConnectionManagerTask::onEventConnectedECUDefault(EConnectionEvent event)
{
 8101b36:	b580      	push	{r7, lr}
 8101b38:	b082      	sub	sp, #8
 8101b3a:	af00      	add	r7, sp, #0
 8101b3c:	6078      	str	r0, [r7, #4]
 8101b3e:	460b      	mov	r3, r1
 8101b40:	70fb      	strb	r3, [r7, #3]
    switch(event)
 8101b42:	78fb      	ldrb	r3, [r7, #3]
 8101b44:	2b06      	cmp	r3, #6
 8101b46:	d013      	beq.n	8101b70 <_ZN29EthernetConnectionManagerTask26onEventConnectedECUDefaultENS_16EConnectionEventE+0x3a>
 8101b48:	2b06      	cmp	r3, #6
 8101b4a:	dc22      	bgt.n	8101b92 <_ZN29EthernetConnectionManagerTask26onEventConnectedECUDefaultENS_16EConnectionEventE+0x5c>
 8101b4c:	2b01      	cmp	r3, #1
 8101b4e:	d002      	beq.n	8101b56 <_ZN29EthernetConnectionManagerTask26onEventConnectedECUDefaultENS_16EConnectionEventE+0x20>
 8101b50:	2b04      	cmp	r3, #4
 8101b52:	d005      	beq.n	8101b60 <_ZN29EthernetConnectionManagerTask26onEventConnectedECUDefaultENS_16EConnectionEventE+0x2a>
 8101b54:	e01d      	b.n	8101b92 <_ZN29EthernetConnectionManagerTask26onEventConnectedECUDefaultENS_16EConnectionEventE+0x5c>
    {
		case EVENT_ETHERNET_DISCONNECTED:
		{
			tcpDisconnect();
 8101b56:	6878      	ldr	r0, [r7, #4]
 8101b58:	f000 fc4c 	bl	81023f4 <_ZN29EthernetConnectionManagerTask13tcpDisconnectEv>
			return STATE_ETHERNET_DISCONNECTED;
 8101b5c:	2300      	movs	r3, #0
 8101b5e:	e01a      	b.n	8101b96 <_ZN29EthernetConnectionManagerTask26onEventConnectedECUDefaultENS_16EConnectionEventE+0x60>
		}
        case EVENT_TCP_CONNECTION_FAILED:
        {
            tcpDisconnect();
 8101b60:	6878      	ldr	r0, [r7, #4]
 8101b62:	f000 fc47 	bl	81023f4 <_ZN29EthernetConnectionManagerTask13tcpDisconnectEv>
            udpConnect();
 8101b66:	6878      	ldr	r0, [r7, #4]
 8101b68:	f000 fb52 	bl	8102210 <_ZN29EthernetConnectionManagerTask10udpConnectEv>
            return STATE_SERVICE_DISCOVERY;
 8101b6c:	2301      	movs	r3, #1
 8101b6e:	e012      	b.n	8101b96 <_ZN29EthernetConnectionManagerTask26onEventConnectedECUDefaultENS_16EConnectionEventE+0x60>
        }
        case EVENT_DATA_REQUESTED:
        {
            if(subscribed_data[0] == 0ULL && subscribed_data[1] == 0ULL)
 8101b70:	687b      	ldr	r3, [r7, #4]
 8101b72:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8101b76:	4313      	orrs	r3, r2
 8101b78:	d106      	bne.n	8101b88 <_ZN29EthernetConnectionManagerTask26onEventConnectedECUDefaultENS_16EConnectionEventE+0x52>
 8101b7a:	687b      	ldr	r3, [r7, #4]
 8101b7c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8101b80:	4313      	orrs	r3, r2
 8101b82:	d101      	bne.n	8101b88 <_ZN29EthernetConnectionManagerTask26onEventConnectedECUDefaultENS_16EConnectionEventE+0x52>
            {
                return STATE_CONNECTED_ECU;
 8101b84:	2303      	movs	r3, #3
 8101b86:	e006      	b.n	8101b96 <_ZN29EthernetConnectionManagerTask26onEventConnectedECUDefaultENS_16EConnectionEventE+0x60>
            }
            else
            {
                sendNextRequest();
 8101b88:	6878      	ldr	r0, [r7, #4]
 8101b8a:	f7ff febb 	bl	8101904 <_ZN29EthernetConnectionManagerTask15sendNextRequestEv>
            }
            return STATE_WAITING_FOR_DATA_FROM_ECU;
 8101b8e:	2304      	movs	r3, #4
 8101b90:	e001      	b.n	8101b96 <_ZN29EthernetConnectionManagerTask26onEventConnectedECUDefaultENS_16EConnectionEventE+0x60>
        }
        default:
        {
            //no transition
            return current_connection_state;
 8101b92:	687b      	ldr	r3, [r7, #4]
 8101b94:	7c1b      	ldrb	r3, [r3, #16]
            break;
        }
    }
}
 8101b96:	4618      	mov	r0, r3
 8101b98:	3708      	adds	r7, #8
 8101b9a:	46bd      	mov	sp, r7
 8101b9c:	bd80      	pop	{r7, pc}
	...

08101ba0 <_ZN29EthernetConnectionManagerTask28onEventWaitingForDataFromECUENS_16EConnectionEventE>:

EthernetConnectionManagerTask::EConnectionState EthernetConnectionManagerTask::onEventWaitingForDataFromECU(EConnectionEvent event)
{
 8101ba0:	b580      	push	{r7, lr}
 8101ba2:	b082      	sub	sp, #8
 8101ba4:	af00      	add	r7, sp, #0
 8101ba6:	6078      	str	r0, [r7, #4]
 8101ba8:	460b      	mov	r3, r1
 8101baa:	70fb      	strb	r3, [r7, #3]
    switch(event)
 8101bac:	78fb      	ldrb	r3, [r7, #3]
 8101bae:	3b01      	subs	r3, #1
 8101bb0:	2b07      	cmp	r3, #7
 8101bb2:	d830      	bhi.n	8101c16 <_ZN29EthernetConnectionManagerTask28onEventWaitingForDataFromECUENS_16EConnectionEventE+0x76>
 8101bb4:	a201      	add	r2, pc, #4	@ (adr r2, 8101bbc <_ZN29EthernetConnectionManagerTask28onEventWaitingForDataFromECUENS_16EConnectionEventE+0x1c>)
 8101bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101bba:	bf00      	nop
 8101bbc:	08101bdd 	.word	0x08101bdd
 8101bc0:	08101c17 	.word	0x08101c17
 8101bc4:	08101c17 	.word	0x08101c17
 8101bc8:	08101be1 	.word	0x08101be1
 8101bcc:	08101c17 	.word	0x08101c17
 8101bd0:	08101c17 	.word	0x08101c17
 8101bd4:	08101c13 	.word	0x08101c13
 8101bd8:	08101bf1 	.word	0x08101bf1
    {
        case EVENT_ETHERNET_DISCONNECTED:
        {
            return STATE_ETHERNET_DISCONNECTED;
 8101bdc:	2300      	movs	r3, #0
 8101bde:	e01c      	b.n	8101c1a <_ZN29EthernetConnectionManagerTask28onEventWaitingForDataFromECUENS_16EConnectionEventE+0x7a>
        }
        case EVENT_TCP_CONNECTION_FAILED:
        {
            tcpDisconnect();
 8101be0:	6878      	ldr	r0, [r7, #4]
 8101be2:	f000 fc07 	bl	81023f4 <_ZN29EthernetConnectionManagerTask13tcpDisconnectEv>
            udpConnect();
 8101be6:	6878      	ldr	r0, [r7, #4]
 8101be8:	f000 fb12 	bl	8102210 <_ZN29EthernetConnectionManagerTask10udpConnectEv>
            return STATE_SERVICE_DISCOVERY;
 8101bec:	2301      	movs	r3, #1
 8101bee:	e014      	b.n	8101c1a <_ZN29EthernetConnectionManagerTask28onEventWaitingForDataFromECUENS_16EConnectionEventE+0x7a>
        }
        case EVENT_TCP_READ_DATA_BY_ID_RECEIVED:
        {
            if(subscribed_data[0] == 0ULL && subscribed_data[1] == 0ULL)
 8101bf0:	687b      	ldr	r3, [r7, #4]
 8101bf2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8101bf6:	4313      	orrs	r3, r2
 8101bf8:	d106      	bne.n	8101c08 <_ZN29EthernetConnectionManagerTask28onEventWaitingForDataFromECUENS_16EConnectionEventE+0x68>
 8101bfa:	687b      	ldr	r3, [r7, #4]
 8101bfc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8101c00:	4313      	orrs	r3, r2
 8101c02:	d101      	bne.n	8101c08 <_ZN29EthernetConnectionManagerTask28onEventWaitingForDataFromECUENS_16EConnectionEventE+0x68>
            {
                return STATE_CONNECTED_ECU;
 8101c04:	2303      	movs	r3, #3
 8101c06:	e008      	b.n	8101c1a <_ZN29EthernetConnectionManagerTask28onEventWaitingForDataFromECUENS_16EConnectionEventE+0x7a>
            }
            else
            {
                sendNextRequest();
 8101c08:	6878      	ldr	r0, [r7, #4]
 8101c0a:	f7ff fe7b 	bl	8101904 <_ZN29EthernetConnectionManagerTask15sendNextRequestEv>
            }
            return STATE_WAITING_FOR_DATA_FROM_ECU;
 8101c0e:	2304      	movs	r3, #4
 8101c10:	e003      	b.n	8101c1a <_ZN29EthernetConnectionManagerTask28onEventWaitingForDataFromECUENS_16EConnectionEventE+0x7a>
        }
        case EVENT_NO_DATA_TO_REQUEST:
        {
            return STATE_CONNECTED_ECU;
 8101c12:	2303      	movs	r3, #3
 8101c14:	e001      	b.n	8101c1a <_ZN29EthernetConnectionManagerTask28onEventWaitingForDataFromECUENS_16EConnectionEventE+0x7a>
        }
        default:
        {
            //no transition
            return current_connection_state;
 8101c16:	687b      	ldr	r3, [r7, #4]
 8101c18:	7c1b      	ldrb	r3, [r3, #16]
        }
    }
    
}
 8101c1a:	4618      	mov	r0, r3
 8101c1c:	3708      	adds	r7, #8
 8101c1e:	46bd      	mov	sp, r7
 8101c20:	bd80      	pop	{r7, pc}
 8101c22:	bf00      	nop

08101c24 <_ZN29EthernetConnectionManagerTask8sendSSDPEv>:

bool EthernetConnectionManagerTask::sendSSDP()
{
 8101c24:	b580      	push	{r7, lr}
 8101c26:	b086      	sub	sp, #24
 8101c28:	af00      	add	r7, sp, #0
 8101c2a:	6078      	str	r0, [r7, #4]
    constexpr const char *ssdp_request =
 8101c2c:	4b23      	ldr	r3, [pc, #140]	@ (8101cbc <_ZN29EthernetConnectionManagerTask8sendSSDPEv+0x98>)
 8101c2e:	617b      	str	r3, [r7, #20]

    ip_addr_t multicast_ip;
    struct pbuf *p;
    
    // Set the multicast address for SSDP
    ipaddr_aton(SSDP_MULTICAST_IP, &multicast_ip);
 8101c30:	f107 030c 	add.w	r3, r7, #12
 8101c34:	4619      	mov	r1, r3
 8101c36:	4822      	ldr	r0, [pc, #136]	@ (8101cc0 <_ZN29EthernetConnectionManagerTask8sendSSDPEv+0x9c>)
 8101c38:	f014 fdf2 	bl	8116820 <ip4addr_aton>

    // Allocate buffer for SSDP data
    p = pbuf_alloc(PBUF_TRANSPORT, strlen(ssdp_request), PBUF_RAM);
 8101c3c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8101c40:	215e      	movs	r1, #94	@ 0x5e
 8101c42:	2036      	movs	r0, #54	@ 0x36
 8101c44:	f016 ffb6 	bl	8118bb4 <pbuf_alloc>
 8101c48:	6138      	str	r0, [r7, #16]
    if (!p)
 8101c4a:	693b      	ldr	r3, [r7, #16]
 8101c4c:	2b00      	cmp	r3, #0
 8101c4e:	d108      	bne.n	8101c62 <_ZN29EthernetConnectionManagerTask8sendSSDPEv+0x3e>
    {
        LOG_DEBUG("Failed to allocate pbuf for SSDP.");
 8101c50:	f7fe fd28 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 8101c54:	4603      	mov	r3, r0
 8101c56:	491b      	ldr	r1, [pc, #108]	@ (8101cc4 <_ZN29EthernetConnectionManagerTask8sendSSDPEv+0xa0>)
 8101c58:	4618      	mov	r0, r3
 8101c5a:	f7fe fd4b 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
        return false;
 8101c5e:	2300      	movs	r3, #0
 8101c60:	e027      	b.n	8101cb2 <_ZN29EthernetConnectionManagerTask8sendSSDPEv+0x8e>
    }

    // Copy data to the buffer
    memcpy(p->payload, ssdp_request, strlen(ssdp_request));
 8101c62:	693b      	ldr	r3, [r7, #16]
 8101c64:	685b      	ldr	r3, [r3, #4]
 8101c66:	225e      	movs	r2, #94	@ 0x5e
 8101c68:	4914      	ldr	r1, [pc, #80]	@ (8101cbc <_ZN29EthernetConnectionManagerTask8sendSSDPEv+0x98>)
 8101c6a:	4618      	mov	r0, r3
 8101c6c:	f020 fdef 	bl	812284e <memcpy>

    // Send SSDP
    if (udp_sendto(udp_pcb, p, &multicast_ip, 1900) != ERR_OK)
 8101c70:	687b      	ldr	r3, [r7, #4]
 8101c72:	6998      	ldr	r0, [r3, #24]
 8101c74:	f107 020c 	add.w	r2, r7, #12
 8101c78:	f240 736c 	movw	r3, #1900	@ 0x76c
 8101c7c:	6939      	ldr	r1, [r7, #16]
 8101c7e:	f01e ff4d 	bl	8120b1c <udp_sendto>
 8101c82:	4603      	mov	r3, r0
 8101c84:	2b00      	cmp	r3, #0
 8101c86:	bf14      	ite	ne
 8101c88:	2301      	movne	r3, #1
 8101c8a:	2300      	moveq	r3, #0
 8101c8c:	b2db      	uxtb	r3, r3
 8101c8e:	2b00      	cmp	r3, #0
 8101c90:	d00b      	beq.n	8101caa <_ZN29EthernetConnectionManagerTask8sendSSDPEv+0x86>
    {
        LOG_DEBUG("Failed to send SSDP request.");
 8101c92:	f7fe fd07 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 8101c96:	4603      	mov	r3, r0
 8101c98:	490b      	ldr	r1, [pc, #44]	@ (8101cc8 <_ZN29EthernetConnectionManagerTask8sendSSDPEv+0xa4>)
 8101c9a:	4618      	mov	r0, r3
 8101c9c:	f7fe fd2a 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
        pbuf_free(p);
 8101ca0:	6938      	ldr	r0, [r7, #16]
 8101ca2:	f017 fa6b 	bl	811917c <pbuf_free>
        return false;
 8101ca6:	2300      	movs	r3, #0
 8101ca8:	e003      	b.n	8101cb2 <_ZN29EthernetConnectionManagerTask8sendSSDPEv+0x8e>
    }

    // Release the buffer
    pbuf_free(p);
 8101caa:	6938      	ldr	r0, [r7, #16]
 8101cac:	f017 fa66 	bl	811917c <pbuf_free>
    return true;
 8101cb0:	2301      	movs	r3, #1
}
 8101cb2:	4618      	mov	r0, r3
 8101cb4:	3718      	adds	r7, #24
 8101cb6:	46bd      	mov	sp, r7
 8101cb8:	bd80      	pop	{r7, pc}
 8101cba:	bf00      	nop
 8101cbc:	0812339c 	.word	0x0812339c
 8101cc0:	081233fc 	.word	0x081233fc
 8101cc4:	0812340c 	.word	0x0812340c
 8101cc8:	08123430 	.word	0x08123430

08101ccc <_ZN29EthernetConnectionManagerTask7sendSLPEv>:

bool EthernetConnectionManagerTask::sendSLP()
{
 8101ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8101cce:	b08f      	sub	sp, #60	@ 0x3c
 8101cd0:	af00      	add	r7, sp, #0
 8101cd2:	6078      	str	r0, [r7, #4]
    uint8_t slp_request[36] =
 8101cd4:	4b30      	ldr	r3, [pc, #192]	@ (8101d98 <_ZN29EthernetConnectionManagerTask7sendSLPEv+0xcc>)
 8101cd6:	f107 0410 	add.w	r4, r7, #16
 8101cda:	461d      	mov	r5, r3
 8101cdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101cde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101ce0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101ce2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101ce4:	682b      	ldr	r3, [r5, #0]
 8101ce6:	8023      	strh	r3, [r4, #0]
 8101ce8:	2300      	movs	r3, #0
 8101cea:	867b      	strh	r3, [r7, #50]	@ 0x32
    };
    ip_addr_t broadcast_ip;
    struct pbuf *p;

    // Set the broadcast address
    ipaddr_aton(BROADCAST_IP, &broadcast_ip);
 8101cec:	f107 030c 	add.w	r3, r7, #12
 8101cf0:	4619      	mov	r1, r3
 8101cf2:	482a      	ldr	r0, [pc, #168]	@ (8101d9c <_ZN29EthernetConnectionManagerTask7sendSLPEv+0xd0>)
 8101cf4:	f014 fd94 	bl	8116820 <ip4addr_aton>

    // Allocate buffer for SLP data
    p = pbuf_alloc(PBUF_TRANSPORT, sizeof(slp_request), PBUF_RAM);
 8101cf8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8101cfc:	2124      	movs	r1, #36	@ 0x24
 8101cfe:	2036      	movs	r0, #54	@ 0x36
 8101d00:	f016 ff58 	bl	8118bb4 <pbuf_alloc>
 8101d04:	6378      	str	r0, [r7, #52]	@ 0x34
    if (!p)
 8101d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8101d08:	2b00      	cmp	r3, #0
 8101d0a:	d108      	bne.n	8101d1e <_ZN29EthernetConnectionManagerTask7sendSLPEv+0x52>
    {
        LOG_DEBUG("Failed to allocate pbuf for SLP.");
 8101d0c:	f7fe fcca 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 8101d10:	4603      	mov	r3, r0
 8101d12:	4923      	ldr	r1, [pc, #140]	@ (8101da0 <_ZN29EthernetConnectionManagerTask7sendSLPEv+0xd4>)
 8101d14:	4618      	mov	r0, r3
 8101d16:	f7fe fced 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
        return false;
 8101d1a:	2300      	movs	r3, #0
 8101d1c:	e037      	b.n	8101d8e <_ZN29EthernetConnectionManagerTask7sendSLPEv+0xc2>
    }

    // Copy data to the buffer
    memcpy(p->payload, slp_request, sizeof(slp_request));
 8101d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8101d20:	685b      	ldr	r3, [r3, #4]
 8101d22:	f107 0410 	add.w	r4, r7, #16
 8101d26:	469c      	mov	ip, r3
 8101d28:	f104 0e20 	add.w	lr, r4, #32
 8101d2c:	4665      	mov	r5, ip
 8101d2e:	4626      	mov	r6, r4
 8101d30:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8101d32:	6028      	str	r0, [r5, #0]
 8101d34:	6069      	str	r1, [r5, #4]
 8101d36:	60aa      	str	r2, [r5, #8]
 8101d38:	60eb      	str	r3, [r5, #12]
 8101d3a:	3410      	adds	r4, #16
 8101d3c:	f10c 0c10 	add.w	ip, ip, #16
 8101d40:	4574      	cmp	r4, lr
 8101d42:	d1f3      	bne.n	8101d2c <_ZN29EthernetConnectionManagerTask7sendSLPEv+0x60>
 8101d44:	4663      	mov	r3, ip
 8101d46:	4622      	mov	r2, r4
 8101d48:	6810      	ldr	r0, [r2, #0]
 8101d4a:	6018      	str	r0, [r3, #0]

    // Send SLP
    if (udp_sendto(udp_pcb, p, &broadcast_ip, SLP_PORT) != ERR_OK)
 8101d4c:	687b      	ldr	r3, [r7, #4]
 8101d4e:	6998      	ldr	r0, [r3, #24]
 8101d50:	f107 020c 	add.w	r2, r7, #12
 8101d54:	f240 13ab 	movw	r3, #427	@ 0x1ab
 8101d58:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8101d5a:	f01e fedf 	bl	8120b1c <udp_sendto>
 8101d5e:	4603      	mov	r3, r0
 8101d60:	2b00      	cmp	r3, #0
 8101d62:	bf14      	ite	ne
 8101d64:	2301      	movne	r3, #1
 8101d66:	2300      	moveq	r3, #0
 8101d68:	b2db      	uxtb	r3, r3
 8101d6a:	2b00      	cmp	r3, #0
 8101d6c:	d00b      	beq.n	8101d86 <_ZN29EthernetConnectionManagerTask7sendSLPEv+0xba>
    {
        LOG_DEBUG("Failed to send SLP request.");
 8101d6e:	f7fe fc99 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 8101d72:	4603      	mov	r3, r0
 8101d74:	490b      	ldr	r1, [pc, #44]	@ (8101da4 <_ZN29EthernetConnectionManagerTask7sendSLPEv+0xd8>)
 8101d76:	4618      	mov	r0, r3
 8101d78:	f7fe fcbc 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
        pbuf_free(p);
 8101d7c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8101d7e:	f017 f9fd 	bl	811917c <pbuf_free>
        return false;
 8101d82:	2300      	movs	r3, #0
 8101d84:	e003      	b.n	8101d8e <_ZN29EthernetConnectionManagerTask7sendSLPEv+0xc2>
    }

    // Release the buffer
    pbuf_free(p);
 8101d86:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8101d88:	f017 f9f8 	bl	811917c <pbuf_free>
    return true;
 8101d8c:	2301      	movs	r3, #1
}
 8101d8e:	4618      	mov	r0, r3
 8101d90:	373c      	adds	r7, #60	@ 0x3c
 8101d92:	46bd      	mov	sp, r7
 8101d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8101d96:	bf00      	nop
 8101d98:	081234a0 	.word	0x081234a0
 8101d9c:	08123450 	.word	0x08123450
 8101da0:	08123460 	.word	0x08123460
 8101da4:	08123484 	.word	0x08123484

08101da8 <_ZN29EthernetConnectionManagerTask12sendDoIPInitEv>:


bool EthernetConnectionManagerTask::sendDoIPInit()
{
 8101da8:	b580      	push	{r7, lr}
 8101daa:	b086      	sub	sp, #24
 8101dac:	af00      	add	r7, sp, #0
 8101dae:	6078      	str	r0, [r7, #4]
    const char doip_request[] = "\x00\x00\x00\x00\x00\x11";
 8101db0:	4a28      	ldr	r2, [pc, #160]	@ (8101e54 <_ZN29EthernetConnectionManagerTask12sendDoIPInitEv+0xac>)
 8101db2:	f107 030c 	add.w	r3, r7, #12
 8101db6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8101dba:	6018      	str	r0, [r3, #0]
 8101dbc:	3304      	adds	r3, #4
 8101dbe:	8019      	strh	r1, [r3, #0]
 8101dc0:	3302      	adds	r3, #2
 8101dc2:	0c0a      	lsrs	r2, r1, #16
 8101dc4:	701a      	strb	r2, [r3, #0]
    ip_addr_t broadcast_ip;
    struct pbuf *p;

    // Set the broadcast address for DoIP
    ipaddr_aton(BROADCAST_IP, &broadcast_ip);
 8101dc6:	f107 0308 	add.w	r3, r7, #8
 8101dca:	4619      	mov	r1, r3
 8101dcc:	4822      	ldr	r0, [pc, #136]	@ (8101e58 <_ZN29EthernetConnectionManagerTask12sendDoIPInitEv+0xb0>)
 8101dce:	f014 fd27 	bl	8116820 <ip4addr_aton>

    // Allocate buffer for DoIP data
    p = pbuf_alloc(PBUF_TRANSPORT, sizeof(doip_request) - 1, PBUF_RAM);
 8101dd2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8101dd6:	2106      	movs	r1, #6
 8101dd8:	2036      	movs	r0, #54	@ 0x36
 8101dda:	f016 feeb 	bl	8118bb4 <pbuf_alloc>
 8101dde:	6178      	str	r0, [r7, #20]
    if (!p)
 8101de0:	697b      	ldr	r3, [r7, #20]
 8101de2:	2b00      	cmp	r3, #0
 8101de4:	d108      	bne.n	8101df8 <_ZN29EthernetConnectionManagerTask12sendDoIPInitEv+0x50>
    {
        LOG_DEBUG("Failed to allocate pbuf for DoIP init.");
 8101de6:	f7fe fc5d 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 8101dea:	4603      	mov	r3, r0
 8101dec:	491b      	ldr	r1, [pc, #108]	@ (8101e5c <_ZN29EthernetConnectionManagerTask12sendDoIPInitEv+0xb4>)
 8101dee:	4618      	mov	r0, r3
 8101df0:	f7fe fc80 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
        return false;
 8101df4:	2300      	movs	r3, #0
 8101df6:	e028      	b.n	8101e4a <_ZN29EthernetConnectionManagerTask12sendDoIPInitEv+0xa2>
    }

    // Copy data to the buffer
    memcpy(p->payload, doip_request, sizeof(doip_request) - 1);
 8101df8:	697b      	ldr	r3, [r7, #20]
 8101dfa:	685b      	ldr	r3, [r3, #4]
 8101dfc:	f107 010c 	add.w	r1, r7, #12
 8101e00:	2206      	movs	r2, #6
 8101e02:	4618      	mov	r0, r3
 8101e04:	f020 fd23 	bl	812284e <memcpy>

    // Send DoIP
    if (udp_sendto(udp_pcb, p, &broadcast_ip, UDP_PORT) != ERR_OK)
 8101e08:	687b      	ldr	r3, [r7, #4]
 8101e0a:	6998      	ldr	r0, [r3, #24]
 8101e0c:	f107 0208 	add.w	r2, r7, #8
 8101e10:	f641 239b 	movw	r3, #6811	@ 0x1a9b
 8101e14:	6979      	ldr	r1, [r7, #20]
 8101e16:	f01e fe81 	bl	8120b1c <udp_sendto>
 8101e1a:	4603      	mov	r3, r0
 8101e1c:	2b00      	cmp	r3, #0
 8101e1e:	bf14      	ite	ne
 8101e20:	2301      	movne	r3, #1
 8101e22:	2300      	moveq	r3, #0
 8101e24:	b2db      	uxtb	r3, r3
 8101e26:	2b00      	cmp	r3, #0
 8101e28:	d00b      	beq.n	8101e42 <_ZN29EthernetConnectionManagerTask12sendDoIPInitEv+0x9a>
    {
        LOG_DEBUG("Failed to send DoIP init request.");
 8101e2a:	f7fe fc3b 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 8101e2e:	4603      	mov	r3, r0
 8101e30:	490b      	ldr	r1, [pc, #44]	@ (8101e60 <_ZN29EthernetConnectionManagerTask12sendDoIPInitEv+0xb8>)
 8101e32:	4618      	mov	r0, r3
 8101e34:	f7fe fc5e 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
        pbuf_free(p);
 8101e38:	6978      	ldr	r0, [r7, #20]
 8101e3a:	f017 f99f 	bl	811917c <pbuf_free>
        return false;
 8101e3e:	2300      	movs	r3, #0
 8101e40:	e003      	b.n	8101e4a <_ZN29EthernetConnectionManagerTask12sendDoIPInitEv+0xa2>
    }

    // Release the buffer
    pbuf_free(p);
 8101e42:	6978      	ldr	r0, [r7, #20]
 8101e44:	f017 f99a 	bl	811917c <pbuf_free>
    return true;
 8101e48:	2301      	movs	r3, #1
}
 8101e4a:	4618      	mov	r0, r3
 8101e4c:	3718      	adds	r7, #24
 8101e4e:	46bd      	mov	sp, r7
 8101e50:	bd80      	pop	{r7, pc}
 8101e52:	bf00      	nop
 8101e54:	08123510 	.word	0x08123510
 8101e58:	08123450 	.word	0x08123450
 8101e5c:	081234c4 	.word	0x081234c4
 8101e60:	081234ec 	.word	0x081234ec

08101e64 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt>:

void EthernetConnectionManagerTask::HandleUdpRecvCb(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8101e64:	b5b0      	push	{r4, r5, r7, lr}
 8101e66:	b0a4      	sub	sp, #144	@ 0x90
 8101e68:	af04      	add	r7, sp, #16
 8101e6a:	60f8      	str	r0, [r7, #12]
 8101e6c:	60b9      	str	r1, [r7, #8]
 8101e6e:	607a      	str	r2, [r7, #4]
 8101e70:	603b      	str	r3, [r7, #0]
    if (!p)
 8101e72:	683b      	ldr	r3, [r7, #0]
 8101e74:	2b00      	cmp	r3, #0
 8101e76:	d107      	bne.n	8101e88 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x24>
    {
        LOG_DEBUG("No data received, connection might be closed.");
 8101e78:	f7fe fc14 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 8101e7c:	4603      	mov	r3, r0
 8101e7e:	4992      	ldr	r1, [pc, #584]	@ (81020c8 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x264>)
 8101e80:	4618      	mov	r0, r3
 8101e82:	f7fe fc37 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>

        return;
 8101e86:	e1b4      	b.n	81021f2 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x38e>
    }

    LOG_DEBUG("Received UDP message from %s:%d", ipaddr_ntoa(addr), port);
 8101e88:	f7fe fc0c 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 8101e8c:	4604      	mov	r4, r0
 8101e8e:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8101e92:	f014 fdef 	bl	8116a74 <ip4addr_ntoa>
 8101e96:	4602      	mov	r2, r0
 8101e98:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8101e9c:	498b      	ldr	r1, [pc, #556]	@ (81020cc <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x268>)
 8101e9e:	4620      	mov	r0, r4
 8101ea0:	f7fe fc28 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>

    // Validate payload length
    if (p->len < 6)
 8101ea4:	683b      	ldr	r3, [r7, #0]
 8101ea6:	895b      	ldrh	r3, [r3, #10]
 8101ea8:	2b05      	cmp	r3, #5
 8101eaa:	d80b      	bhi.n	8101ec4 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x60>
    {
        LOG_DEBUG("Payload too short to process (length: %d bytes).", p->len);
 8101eac:	f7fe fbfa 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 8101eb0:	683b      	ldr	r3, [r7, #0]
 8101eb2:	895b      	ldrh	r3, [r3, #10]
 8101eb4:	461a      	mov	r2, r3
 8101eb6:	4986      	ldr	r1, [pc, #536]	@ (81020d0 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x26c>)
 8101eb8:	f7fe fc1c 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
        pbuf_free(p);
 8101ebc:	6838      	ldr	r0, [r7, #0]
 8101ebe:	f017 f95d 	bl	811917c <pbuf_free>
        return;
 8101ec2:	e196      	b.n	81021f2 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x38e>
    }

    // Cast payload to a uint8_t array for easier processing
    uint8_t *payload = (uint8_t *)p->payload;
 8101ec4:	683b      	ldr	r3, [r7, #0]
 8101ec6:	685b      	ldr	r3, [r3, #4]
 8101ec8:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Validate frame type based on first 4 bytes (we expected a specific DoIP identification frame)
    if (!(payload[0] == 0x00 && payload[1] == 0x00 && payload[2] == 0x00 && payload[3] == 0x32))
 8101eca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8101ecc:	781b      	ldrb	r3, [r3, #0]
 8101ece:	2b00      	cmp	r3, #0
 8101ed0:	d10e      	bne.n	8101ef0 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x8c>
 8101ed2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8101ed4:	3301      	adds	r3, #1
 8101ed6:	781b      	ldrb	r3, [r3, #0]
 8101ed8:	2b00      	cmp	r3, #0
 8101eda:	d109      	bne.n	8101ef0 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x8c>
 8101edc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8101ede:	3302      	adds	r3, #2
 8101ee0:	781b      	ldrb	r3, [r3, #0]
 8101ee2:	2b00      	cmp	r3, #0
 8101ee4:	d104      	bne.n	8101ef0 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x8c>
 8101ee6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8101ee8:	3303      	adds	r3, #3
 8101eea:	781b      	ldrb	r3, [r3, #0]
 8101eec:	2b32      	cmp	r3, #50	@ 0x32
 8101eee:	d00a      	beq.n	8101f06 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0xa2>
    {
        LOG_DEBUG("Unexpected frame type received, ignoring.");
 8101ef0:	f7fe fbd8 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 8101ef4:	4603      	mov	r3, r0
 8101ef6:	4977      	ldr	r1, [pc, #476]	@ (81020d4 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x270>)
 8101ef8:	4618      	mov	r0, r3
 8101efa:	f7fe fbfb 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
        pbuf_free(p);
 8101efe:	6838      	ldr	r0, [r7, #0]
 8101f00:	f017 f93c 	bl	811917c <pbuf_free>
        return;
 8101f04:	e175      	b.n	81021f2 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x38e>
    }

    // Extract length (first 4 bytes) and validate against p->len
    uint32_t data_length = (payload[0] << 24) | (payload[1] << 16) | (payload[2] << 8) | payload[3];
 8101f06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8101f08:	781b      	ldrb	r3, [r3, #0]
 8101f0a:	061a      	lsls	r2, r3, #24
 8101f0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8101f0e:	3301      	adds	r3, #1
 8101f10:	781b      	ldrb	r3, [r3, #0]
 8101f12:	041b      	lsls	r3, r3, #16
 8101f14:	431a      	orrs	r2, r3
 8101f16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8101f18:	3302      	adds	r3, #2
 8101f1a:	781b      	ldrb	r3, [r3, #0]
 8101f1c:	021b      	lsls	r3, r3, #8
 8101f1e:	4313      	orrs	r3, r2
 8101f20:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8101f22:	3203      	adds	r2, #3
 8101f24:	7812      	ldrb	r2, [r2, #0]
 8101f26:	4313      	orrs	r3, r2
 8101f28:	677b      	str	r3, [r7, #116]	@ 0x74
    // 6 bytes for header (length + type)
    if (data_length + 6 > p->len)
 8101f2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8101f2c:	3306      	adds	r3, #6
 8101f2e:	683a      	ldr	r2, [r7, #0]
 8101f30:	8952      	ldrh	r2, [r2, #10]
 8101f32:	4293      	cmp	r3, r2
 8101f34:	d90b      	bls.n	8101f4e <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0xea>
    {
        LOG_DEBUG("Data length mismatch: declared %u, received %u.", data_length, p->len);
 8101f36:	f7fe fbb5 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 8101f3a:	683b      	ldr	r3, [r7, #0]
 8101f3c:	895b      	ldrh	r3, [r3, #10]
 8101f3e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8101f40:	4965      	ldr	r1, [pc, #404]	@ (81020d8 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x274>)
 8101f42:	f7fe fbd7 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
        pbuf_free(p);
 8101f46:	6838      	ldr	r0, [r7, #0]
 8101f48:	f017 f918 	bl	811917c <pbuf_free>
        return;
 8101f4c:	e151      	b.n	81021f2 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x38e>
    }
    LOG_DEBUG("Data Length: %u", data_length);
 8101f4e:	f7fe fba9 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 8101f52:	4603      	mov	r3, r0
 8101f54:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8101f56:	4961      	ldr	r1, [pc, #388]	@ (81020dc <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x278>)
 8101f58:	4618      	mov	r0, r3
 8101f5a:	f7fe fbcb 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>

    // Extract message type (next 2 bytes)
    uint16_t message_type = (payload[4] << 8) | payload[5];
 8101f5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8101f60:	3304      	adds	r3, #4
 8101f62:	781b      	ldrb	r3, [r3, #0]
 8101f64:	021b      	lsls	r3, r3, #8
 8101f66:	b21a      	sxth	r2, r3
 8101f68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8101f6a:	3305      	adds	r3, #5
 8101f6c:	781b      	ldrb	r3, [r3, #0]
 8101f6e:	b21b      	sxth	r3, r3
 8101f70:	4313      	orrs	r3, r2
 8101f72:	b21b      	sxth	r3, r3
 8101f74:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
    LOG_DEBUG("Message Type: 0x%04X", message_type);
 8101f78:	f7fe fb94 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 8101f7c:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8101f80:	461a      	mov	r2, r3
 8101f82:	4957      	ldr	r1, [pc, #348]	@ (81020e0 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x27c>)
 8101f84:	f7fe fbb6 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>

    // Process diagnostic data if available
    if (p->len > 14)
 8101f88:	683b      	ldr	r3, [r7, #0]
 8101f8a:	895b      	ldrh	r3, [r3, #10]
 8101f8c:	2b0e      	cmp	r3, #14
 8101f8e:	f240 8125 	bls.w	81021dc <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x378>
    {
        uint8_t *diagnostic_data = &payload[14];
 8101f92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8101f94:	330e      	adds	r3, #14
 8101f96:	66fb      	str	r3, [r7, #108]	@ 0x6c
        size_t diagnostic_data_len = p->len - 14;
 8101f98:	683b      	ldr	r3, [r7, #0]
 8101f9a:	895b      	ldrh	r3, [r3, #10]
 8101f9c:	3b0e      	subs	r3, #14
 8101f9e:	66bb      	str	r3, [r7, #104]	@ 0x68

        // Search for MAC and VIN keywords
        char *mac_start = (char *)strstr((char *)diagnostic_data, "MAC");
 8101fa0:	4950      	ldr	r1, [pc, #320]	@ (81020e4 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x280>)
 8101fa2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8101fa4:	f020 fb1f 	bl	81225e6 <strstr>
 8101fa8:	6678      	str	r0, [r7, #100]	@ 0x64
        char *vin_start = (char *)strstr((char *)diagnostic_data, "VIN");
 8101faa:	494f      	ldr	r1, [pc, #316]	@ (81020e8 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x284>)
 8101fac:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8101fae:	f020 fb1a 	bl	81225e6 <strstr>
 8101fb2:	6638      	str	r0, [r7, #96]	@ 0x60

        if (mac_start && vin_start)
 8101fb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8101fb6:	2b00      	cmp	r3, #0
 8101fb8:	f000 8108 	beq.w	81021cc <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x368>
 8101fbc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8101fbe:	2b00      	cmp	r3, #0
 8101fc0:	f000 8104 	beq.w	81021cc <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x368>
        {
            mac_start += strlen("MAC");
 8101fc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8101fc6:	3303      	adds	r3, #3
 8101fc8:	667b      	str	r3, [r7, #100]	@ 0x64
            vin_start += strlen("VIN");
 8101fca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8101fcc:	3303      	adds	r3, #3
 8101fce:	663b      	str	r3, [r7, #96]	@ 0x60

            // Safely extract MAC Address (12 characters)
            if (mac_start + 12 <= (char *)diagnostic_data + diagnostic_data_len)
 8101fd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8101fd2:	f103 020c 	add.w	r2, r3, #12
 8101fd6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8101fd8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8101fda:	440b      	add	r3, r1
 8101fdc:	429a      	cmp	r2, r3
 8101fde:	f200 808f 	bhi.w	8102100 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x29c>
            {
                char mac_address_str[13] = {0};
 8101fe2:	2300      	movs	r3, #0
 8101fe4:	653b      	str	r3, [r7, #80]	@ 0x50
 8101fe6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8101fea:	2200      	movs	r2, #0
 8101fec:	601a      	str	r2, [r3, #0]
 8101fee:	605a      	str	r2, [r3, #4]
 8101ff0:	721a      	strb	r2, [r3, #8]
                strncpy(mac_address_str, mac_start, 12);
 8101ff2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8101ff6:	220c      	movs	r2, #12
 8101ff8:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8101ffa:	4618      	mov	r0, r3
 8101ffc:	f020 fae0 	bl	81225c0 <strncpy>

                //convert to format accepted by lwip arp
                uint8_t ecu_mac[6] = {0};
 8102000:	2300      	movs	r3, #0
 8102002:	64bb      	str	r3, [r7, #72]	@ 0x48
 8102004:	2300      	movs	r3, #0
 8102006:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
                for (int i = 0; i < 6; i++)
 810200a:	2300      	movs	r3, #0
 810200c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810200e:	e022      	b.n	8102056 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x1f2>
                {
                    if (sscanf(&mac_address_str[i * 2], "%2hhx", &ecu_mac[i]) != 1)
 8102010:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8102012:	005b      	lsls	r3, r3, #1
 8102014:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8102018:	18d0      	adds	r0, r2, r3
 810201a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 810201e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8102020:	4413      	add	r3, r2
 8102022:	461a      	mov	r2, r3
 8102024:	4931      	ldr	r1, [pc, #196]	@ (81020ec <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x288>)
 8102026:	f020 f995 	bl	8122354 <siscanf>
 810202a:	4603      	mov	r3, r0
 810202c:	2b01      	cmp	r3, #1
 810202e:	bf14      	ite	ne
 8102030:	2301      	movne	r3, #1
 8102032:	2300      	moveq	r3, #0
 8102034:	b2db      	uxtb	r3, r3
 8102036:	2b00      	cmp	r3, #0
 8102038:	d00a      	beq.n	8102050 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x1ec>
                    {
                        LOG_DEBUG("Failed to parse MAC address.");
 810203a:	f7fe fb33 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 810203e:	4603      	mov	r3, r0
 8102040:	492b      	ldr	r1, [pc, #172]	@ (81020f0 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x28c>)
 8102042:	4618      	mov	r0, r3
 8102044:	f7fe fb56 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
                        pbuf_free(p);
 8102048:	6838      	ldr	r0, [r7, #0]
 810204a:	f017 f897 	bl	811917c <pbuf_free>
 810204e:	e0d0      	b.n	81021f2 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x38e>
                for (int i = 0; i < 6; i++)
 8102050:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8102052:	3301      	adds	r3, #1
 8102054:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8102056:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8102058:	2b05      	cmp	r3, #5
 810205a:	ddd9      	ble.n	8102010 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x1ac>
                        return;
                    }
                }
                LOG_DEBUG("Extracted MAC Address: %s", mac_address_str);
 810205c:	f7fe fb22 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 8102060:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8102064:	461a      	mov	r2, r3
 8102066:	4923      	ldr	r1, [pc, #140]	@ (81020f4 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x290>)
 8102068:	f7fe fb44 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>

                // Add a static ARP entry for ECU
                struct eth_addr eth_mac;
                memcpy(eth_mac.addr, ecu_mac, 6);
 810206c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8102070:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8102074:	e892 0003 	ldmia.w	r2, {r0, r1}
 8102078:	6018      	str	r0, [r3, #0]
 810207a:	3304      	adds	r3, #4
 810207c:	8019      	strh	r1, [r3, #0]
                if (etharp_add_static_entry(addr, &eth_mac) == ERR_OK)
 810207e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8102082:	4619      	mov	r1, r3
 8102084:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8102088:	f012 fd74 	bl	8114b74 <etharp_add_static_entry>
 810208c:	4603      	mov	r3, r0
 810208e:	2b00      	cmp	r3, #0
 8102090:	bf0c      	ite	eq
 8102092:	2301      	moveq	r3, #1
 8102094:	2300      	movne	r3, #0
 8102096:	b2db      	uxtb	r3, r3
 8102098:	2b00      	cmp	r3, #0
 810209a:	d00c      	beq.n	81020b6 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x252>
                {
                    LOG_DEBUG("ARP entry for ECU added successfully.");
 810209c:	f7fe fb02 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 81020a0:	4603      	mov	r3, r0
 81020a2:	4915      	ldr	r1, [pc, #84]	@ (81020f8 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x294>)
 81020a4:	4618      	mov	r0, r3
 81020a6:	f7fe fb25 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
                    ecu_ip_addr = *addr;
 81020aa:	68fb      	ldr	r3, [r7, #12]
 81020ac:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 81020b0:	6812      	ldr	r2, [r2, #0]
 81020b2:	615a      	str	r2, [r3, #20]
 81020b4:	e02b      	b.n	810210e <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x2aa>
                }
                else
                {
                    LOG_DEBUG("Failed to add ARP entry for ECU.");
 81020b6:	f7fe faf5 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 81020ba:	4603      	mov	r3, r0
 81020bc:	490f      	ldr	r1, [pc, #60]	@ (81020fc <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x298>)
 81020be:	4618      	mov	r0, r3
 81020c0:	f7fe fb18 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
 81020c4:	e023      	b.n	810210e <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x2aa>
 81020c6:	bf00      	nop
 81020c8:	08123518 	.word	0x08123518
 81020cc:	08123548 	.word	0x08123548
 81020d0:	08123568 	.word	0x08123568
 81020d4:	0812359c 	.word	0x0812359c
 81020d8:	081235c8 	.word	0x081235c8
 81020dc:	081235f8 	.word	0x081235f8
 81020e0:	08123608 	.word	0x08123608
 81020e4:	08123620 	.word	0x08123620
 81020e8:	08123624 	.word	0x08123624
 81020ec:	08123628 	.word	0x08123628
 81020f0:	08123630 	.word	0x08123630
 81020f4:	08123650 	.word	0x08123650
 81020f8:	0812366c 	.word	0x0812366c
 81020fc:	08123694 	.word	0x08123694
                }
            }
            else
            {
                LOG_DEBUG("MAC address extraction exceeds data boundaries.");
 8102100:	f7fe fad0 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 8102104:	4603      	mov	r3, r0
 8102106:	493c      	ldr	r1, [pc, #240]	@ (81021f8 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x394>)
 8102108:	4618      	mov	r0, r3
 810210a:	f7fe faf3 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
            }

            // Safely extract VIN (17 characters)
            if (vin_start + 17 <= (char *)diagnostic_data + diagnostic_data_len)
 810210e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8102110:	f103 0211 	add.w	r2, r3, #17
 8102114:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8102116:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8102118:	440b      	add	r3, r1
 810211a:	429a      	cmp	r2, r3
 810211c:	d84e      	bhi.n	81021bc <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x358>
            {
                char vin[18] = {0};
 810211e:	2300      	movs	r3, #0
 8102120:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8102122:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8102126:	2200      	movs	r2, #0
 8102128:	601a      	str	r2, [r3, #0]
 810212a:	605a      	str	r2, [r3, #4]
 810212c:	609a      	str	r2, [r3, #8]
 810212e:	819a      	strh	r2, [r3, #12]
                strncpy(vin, vin_start, 17);
 8102130:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8102134:	2211      	movs	r2, #17
 8102136:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8102138:	4618      	mov	r0, r3
 810213a:	f020 fa41 	bl	81225c0 <strncpy>
                LOG_DEBUG("Extracted VIN: %s", vin);
 810213e:	f7fe fab1 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 8102142:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8102146:	461a      	mov	r2, r3
 8102148:	492c      	ldr	r1, [pc, #176]	@ (81021fc <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x398>)
 810214a:	f7fe fad3 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>

                EConnectionEvent connEvent = EVENT_DISCOVERY_COMPLETED;
 810214e:	2302      	movs	r3, #2
 8102150:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                if(xQueueSend(connection_events_internal_queue, &(connEvent), static_cast<TickType_t>(10000)) != pdPASS)
 8102154:	68fb      	ldr	r3, [r7, #12]
 8102156:	68d8      	ldr	r0, [r3, #12]
 8102158:	f107 012b 	add.w	r1, r7, #43	@ 0x2b
 810215c:	2300      	movs	r3, #0
 810215e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8102162:	f00f f87f 	bl	8111264 <xQueueGenericSend>
 8102166:	4603      	mov	r3, r0
 8102168:	2b01      	cmp	r3, #1
 810216a:	bf14      	ite	ne
 810216c:	2301      	movne	r3, #1
 810216e:	2300      	moveq	r3, #0
 8102170:	b2db      	uxtb	r3, r3
 8102172:	2b00      	cmp	r3, #0
 8102174:	d009      	beq.n	810218a <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x326>
                {
                    //In this case do not notify app and just wait for another message from ecu to try on the next call
                    LOG_DEBUG("[FATAL ERROR] Could not send internal connection event: %d", connEvent);
 8102176:	f7fe fa95 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 810217a:	4603      	mov	r3, r0
 810217c:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8102180:	491f      	ldr	r1, [pc, #124]	@ (8102200 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x39c>)
 8102182:	4618      	mov	r0, r3
 8102184:	f7fe fab6 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
 8102188:	e033      	b.n	81021f2 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x38e>
                    return;
                }
                
                UMessageData msgData;
                strncpy(msgData.ecu_connected_vin, vin_start, 17);
 810218a:	f107 0314 	add.w	r3, r7, #20
 810218e:	2211      	movs	r2, #17
 8102190:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8102192:	4618      	mov	r0, r3
 8102194:	f020 fa14 	bl	81225c0 <strncpy>
                event_bus.send(EVENT_ECU_CONNECTION_INITIALISED, msgData, EVENT_CLIENT_FRONTEND);
 8102198:	68fd      	ldr	r5, [r7, #12]
 810219a:	2300      	movs	r3, #0
 810219c:	9303      	str	r3, [sp, #12]
 810219e:	466c      	mov	r4, sp
 81021a0:	f107 031c 	add.w	r3, r7, #28
 81021a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 81021a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 81021ac:	f107 0314 	add.w	r3, r7, #20
 81021b0:	cb0c      	ldmia	r3, {r2, r3}
 81021b2:	2180      	movs	r1, #128	@ 0x80
 81021b4:	4628      	mov	r0, r5
 81021b6:	f000 ff67 	bl	8103088 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient>
            }
            else
            {
                LOG_DEBUG("VIN extraction exceeds data boundaries.");
            }
        }
 81021ba:	e017      	b.n	81021ec <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x388>
                LOG_DEBUG("VIN extraction exceeds data boundaries.");
 81021bc:	f7fe fa72 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 81021c0:	4603      	mov	r3, r0
 81021c2:	4910      	ldr	r1, [pc, #64]	@ (8102204 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3a0>)
 81021c4:	4618      	mov	r0, r3
 81021c6:	f7fe fa95 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
        }
 81021ca:	e00f      	b.n	81021ec <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x388>
        else
        {
            LOG_DEBUG("MAC or VIN markers not found in diagnostic data.");
 81021cc:	f7fe fa6a 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 81021d0:	4603      	mov	r3, r0
 81021d2:	490d      	ldr	r1, [pc, #52]	@ (8102208 <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3a4>)
 81021d4:	4618      	mov	r0, r3
 81021d6:	f7fe fa8d 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
 81021da:	e007      	b.n	81021ec <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x388>
        }
    }
    else
    {
        LOG_DEBUG("Payload too short to contain diagnostic data (length: %d bytes).", p->len);
 81021dc:	f7fe fa62 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 81021e0:	683b      	ldr	r3, [r7, #0]
 81021e2:	895b      	ldrh	r3, [r3, #10]
 81021e4:	461a      	mov	r2, r3
 81021e6:	4909      	ldr	r1, [pc, #36]	@ (810220c <_ZN29EthernetConnectionManagerTask15HandleUdpRecvCbEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3a8>)
 81021e8:	f7fe fa84 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
    }

    // Free the received buffer
    pbuf_free(p);
 81021ec:	6838      	ldr	r0, [r7, #0]
 81021ee:	f016 ffc5 	bl	811917c <pbuf_free>
}
 81021f2:	3780      	adds	r7, #128	@ 0x80
 81021f4:	46bd      	mov	sp, r7
 81021f6:	bdb0      	pop	{r4, r5, r7, pc}
 81021f8:	081236b8 	.word	0x081236b8
 81021fc:	081236e8 	.word	0x081236e8
 8102200:	081236fc 	.word	0x081236fc
 8102204:	08123738 	.word	0x08123738
 8102208:	08123760 	.word	0x08123760
 810220c:	08123794 	.word	0x08123794

08102210 <_ZN29EthernetConnectionManagerTask10udpConnectEv>:

void EthernetConnectionManagerTask::udpConnect()
{
 8102210:	b580      	push	{r7, lr}
 8102212:	b082      	sub	sp, #8
 8102214:	af00      	add	r7, sp, #0
 8102216:	6078      	str	r0, [r7, #4]
    udp_pcb = udp_new();
 8102218:	f01f f836 	bl	8121288 <udp_new>
 810221c:	4602      	mov	r2, r0
 810221e:	687b      	ldr	r3, [r7, #4]
 8102220:	619a      	str	r2, [r3, #24]
    if (udp_pcb)
 8102222:	687b      	ldr	r3, [r7, #4]
 8102224:	699b      	ldr	r3, [r3, #24]
 8102226:	2b00      	cmp	r3, #0
 8102228:	d00e      	beq.n	8102248 <_ZN29EthernetConnectionManagerTask10udpConnectEv+0x38>
    {
        udp_bind(udp_pcb, IP_ADDR_ANY, 0);  // Bind PCB with any port
 810222a:	687b      	ldr	r3, [r7, #4]
 810222c:	699b      	ldr	r3, [r3, #24]
 810222e:	2200      	movs	r2, #0
 8102230:	490b      	ldr	r1, [pc, #44]	@ (8102260 <_ZN29EthernetConnectionManagerTask10udpConnectEv+0x50>)
 8102232:	4618      	mov	r0, r3
 8102234:	f01e fec0 	bl	8120fb8 <udp_bind>
        udp_recv(udp_pcb, udpRecvCb, NULL);  // Register the UDP receiver callback (listen for car info)
 8102238:	687b      	ldr	r3, [r7, #4]
 810223a:	699b      	ldr	r3, [r3, #24]
 810223c:	2200      	movs	r2, #0
 810223e:	4909      	ldr	r1, [pc, #36]	@ (8102264 <_ZN29EthernetConnectionManagerTask10udpConnectEv+0x54>)
 8102240:	4618      	mov	r0, r3
 8102242:	f01e ffbf 	bl	81211c4 <udp_recv>
    }
    else
    {
        LOG_DEBUG("Failed to create UDP PCB.");
    }
}
 8102246:	e006      	b.n	8102256 <_ZN29EthernetConnectionManagerTask10udpConnectEv+0x46>
        LOG_DEBUG("Failed to create UDP PCB.");
 8102248:	f7fe fa2c 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 810224c:	4603      	mov	r3, r0
 810224e:	4906      	ldr	r1, [pc, #24]	@ (8102268 <_ZN29EthernetConnectionManagerTask10udpConnectEv+0x58>)
 8102250:	4618      	mov	r0, r3
 8102252:	f7fe fa4f 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
}
 8102256:	bf00      	nop
 8102258:	3708      	adds	r7, #8
 810225a:	46bd      	mov	sp, r7
 810225c:	bd80      	pop	{r7, pc}
 810225e:	bf00      	nop
 8102260:	081289b8 	.word	0x081289b8
 8102264:	08101483 	.word	0x08101483
 8102268:	081237d8 	.word	0x081237d8

0810226c <_ZN29EthernetConnectionManagerTask13udpDisconnectEv>:


void EthernetConnectionManagerTask::udpDisconnect()
{
 810226c:	b580      	push	{r7, lr}
 810226e:	b082      	sub	sp, #8
 8102270:	af00      	add	r7, sp, #0
 8102272:	6078      	str	r0, [r7, #4]
    if (udp_pcb != nullptr)
 8102274:	687b      	ldr	r3, [r7, #4]
 8102276:	699b      	ldr	r3, [r3, #24]
 8102278:	2b00      	cmp	r3, #0
 810227a:	d016      	beq.n	81022aa <_ZN29EthernetConnectionManagerTask13udpDisconnectEv+0x3e>
    {
        // Unregister callbacks
        udp_recv(udp_pcb, nullptr, nullptr); // Wyrejestrowanie callbacka
 810227c:	687b      	ldr	r3, [r7, #4]
 810227e:	699b      	ldr	r3, [r3, #24]
 8102280:	2200      	movs	r2, #0
 8102282:	2100      	movs	r1, #0
 8102284:	4618      	mov	r0, r3
 8102286:	f01e ff9d 	bl	81211c4 <udp_recv>
        // Close connection
        udp_remove(udp_pcb);
 810228a:	687b      	ldr	r3, [r7, #4]
 810228c:	699b      	ldr	r3, [r3, #24]
 810228e:	4618      	mov	r0, r3
 8102290:	f01e ffb8 	bl	8121204 <udp_remove>
        udp_pcb = nullptr;
 8102294:	687b      	ldr	r3, [r7, #4]
 8102296:	2200      	movs	r2, #0
 8102298:	619a      	str	r2, [r3, #24]
        LOG_DEBUG("UDP PCB removed and callback unregistered.");
 810229a:	f7fe fa03 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 810229e:	4603      	mov	r3, r0
 81022a0:	4907      	ldr	r1, [pc, #28]	@ (81022c0 <_ZN29EthernetConnectionManagerTask13udpDisconnectEv+0x54>)
 81022a2:	4618      	mov	r0, r3
 81022a4:	f7fe fa26 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
    }
    else
    {
        LOG_DEBUG("udp_pcb is already null, skipping removal.");
    }
}
 81022a8:	e006      	b.n	81022b8 <_ZN29EthernetConnectionManagerTask13udpDisconnectEv+0x4c>
        LOG_DEBUG("udp_pcb is already null, skipping removal.");
 81022aa:	f7fe f9fb 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 81022ae:	4603      	mov	r3, r0
 81022b0:	4904      	ldr	r1, [pc, #16]	@ (81022c4 <_ZN29EthernetConnectionManagerTask13udpDisconnectEv+0x58>)
 81022b2:	4618      	mov	r0, r3
 81022b4:	f7fe fa1e 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
}
 81022b8:	bf00      	nop
 81022ba:	3708      	adds	r7, #8
 81022bc:	46bd      	mov	sp, r7
 81022be:	bd80      	pop	{r7, pc}
 81022c0:	081237f4 	.word	0x081237f4
 81022c4:	08123820 	.word	0x08123820

081022c8 <_ZN29EthernetConnectionManagerTask10tcpConnectEv>:

bool EthernetConnectionManagerTask::tcpConnect()
{
 81022c8:	b580      	push	{r7, lr}
 81022ca:	b084      	sub	sp, #16
 81022cc:	af00      	add	r7, sp, #0
 81022ce:	6078      	str	r0, [r7, #4]
    LOCK_TCPIP_CORE();
 81022d0:	483f      	ldr	r0, [pc, #252]	@ (81023d0 <_ZN29EthernetConnectionManagerTask10tcpConnectEv+0x108>)
 81022d2:	f017 fa95 	bl	8119800 <sys_mutex_lock>
	tcp_pcb = tcp_new();
 81022d6:	f018 ffd3 	bl	811b280 <tcp_new>
 81022da:	4602      	mov	r2, r0
 81022dc:	687b      	ldr	r3, [r7, #4]
 81022de:	61da      	str	r2, [r3, #28]
    if (!tcp_pcb)
 81022e0:	687b      	ldr	r3, [r7, #4]
 81022e2:	69db      	ldr	r3, [r3, #28]
 81022e4:	2b00      	cmp	r3, #0
 81022e6:	d10b      	bne.n	8102300 <_ZN29EthernetConnectionManagerTask10tcpConnectEv+0x38>
    {
        LOG_DEBUG("Failed to create TCP PCB.");
 81022e8:	f7fe f9dc 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 81022ec:	4603      	mov	r3, r0
 81022ee:	4939      	ldr	r1, [pc, #228]	@ (81023d4 <_ZN29EthernetConnectionManagerTask10tcpConnectEv+0x10c>)
 81022f0:	4618      	mov	r0, r3
 81022f2:	f7fe f9ff 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
        UNLOCK_TCPIP_CORE();
 81022f6:	4836      	ldr	r0, [pc, #216]	@ (81023d0 <_ZN29EthernetConnectionManagerTask10tcpConnectEv+0x108>)
 81022f8:	f017 fa91 	bl	811981e <sys_mutex_unlock>
        return false;
 81022fc:	2300      	movs	r3, #0
 81022fe:	e062      	b.n	81023c6 <_ZN29EthernetConnectionManagerTask10tcpConnectEv+0xfe>
    }

    err_t bind_err = tcp_bind(tcp_pcb, IP_ADDR_ANY, 0); // Automatically assign port number
 8102300:	687b      	ldr	r3, [r7, #4]
 8102302:	69db      	ldr	r3, [r3, #28]
 8102304:	2200      	movs	r2, #0
 8102306:	4934      	ldr	r1, [pc, #208]	@ (81023d8 <_ZN29EthernetConnectionManagerTask10tcpConnectEv+0x110>)
 8102308:	4618      	mov	r0, r3
 810230a:	f017 fde5 	bl	8119ed8 <tcp_bind>
 810230e:	4603      	mov	r3, r0
 8102310:	73fb      	strb	r3, [r7, #15]
    if (bind_err != ERR_OK)
 8102312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8102316:	2b00      	cmp	r3, #0
 8102318:	d00f      	beq.n	810233a <_ZN29EthernetConnectionManagerTask10tcpConnectEv+0x72>
    {
        LOG_DEBUG("Failed to bind TCP PCB: %d", bind_err);
 810231a:	f7fe f9c3 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 810231e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8102322:	461a      	mov	r2, r3
 8102324:	492d      	ldr	r1, [pc, #180]	@ (81023dc <_ZN29EthernetConnectionManagerTask10tcpConnectEv+0x114>)
 8102326:	f7fe f9e5 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
        tcpDisconnect();
 810232a:	6878      	ldr	r0, [r7, #4]
 810232c:	f000 f862 	bl	81023f4 <_ZN29EthernetConnectionManagerTask13tcpDisconnectEv>
        UNLOCK_TCPIP_CORE();
 8102330:	4827      	ldr	r0, [pc, #156]	@ (81023d0 <_ZN29EthernetConnectionManagerTask10tcpConnectEv+0x108>)
 8102332:	f017 fa74 	bl	811981e <sys_mutex_unlock>
        return false;
 8102336:	2300      	movs	r3, #0
 8102338:	e045      	b.n	81023c6 <_ZN29EthernetConnectionManagerTask10tcpConnectEv+0xfe>
    }
    // callback registration
    tcp_arg(tcp_pcb, NULL);
 810233a:	687b      	ldr	r3, [r7, #4]
 810233c:	69db      	ldr	r3, [r3, #28]
 810233e:	2100      	movs	r1, #0
 8102340:	4618      	mov	r0, r3
 8102342:	f018 ffa5 	bl	811b290 <tcp_arg>
    tcp_recv(tcp_pcb, tcpRecvCb);
 8102346:	687b      	ldr	r3, [r7, #4]
 8102348:	69db      	ldr	r3, [r3, #28]
 810234a:	4925      	ldr	r1, [pc, #148]	@ (81023e0 <_ZN29EthernetConnectionManagerTask10tcpConnectEv+0x118>)
 810234c:	4618      	mov	r0, r3
 810234e:	f018 ffb1 	bl	811b2b4 <tcp_recv>
    tcp_err(tcp_pcb, tcpErrCb);
 8102352:	687b      	ldr	r3, [r7, #4]
 8102354:	69db      	ldr	r3, [r3, #28]
 8102356:	4923      	ldr	r1, [pc, #140]	@ (81023e4 <_ZN29EthernetConnectionManagerTask10tcpConnectEv+0x11c>)
 8102358:	4618      	mov	r0, r3
 810235a:	f018 ffcd 	bl	811b2f8 <tcp_err>

    tcp_nagle_disable(tcp_pcb);
 810235e:	687b      	ldr	r3, [r7, #4]
 8102360:	69db      	ldr	r3, [r3, #28]
 8102362:	8b5a      	ldrh	r2, [r3, #26]
 8102364:	687b      	ldr	r3, [r7, #4]
 8102366:	69db      	ldr	r3, [r3, #28]
 8102368:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 810236c:	b292      	uxth	r2, r2
 810236e:	835a      	strh	r2, [r3, #26]

    // establishing connection
    err_t err = tcp_connect(tcp_pcb, &ecu_ip_addr, TCP_PORT_ECU, tcpConnectCb);
 8102370:	687b      	ldr	r3, [r7, #4]
 8102372:	69d8      	ldr	r0, [r3, #28]
 8102374:	687b      	ldr	r3, [r7, #4]
 8102376:	f103 0114 	add.w	r1, r3, #20
 810237a:	4b1b      	ldr	r3, [pc, #108]	@ (81023e8 <_ZN29EthernetConnectionManagerTask10tcpConnectEv+0x120>)
 810237c:	f641 2291 	movw	r2, #6801	@ 0x1a91
 8102380:	f017 ff58 	bl	811a234 <tcp_connect>
 8102384:	4603      	mov	r3, r0
 8102386:	73bb      	strb	r3, [r7, #14]
    if (err != ERR_OK)
 8102388:	f997 300e 	ldrsb.w	r3, [r7, #14]
 810238c:	2b00      	cmp	r3, #0
 810238e:	d00f      	beq.n	81023b0 <_ZN29EthernetConnectionManagerTask10tcpConnectEv+0xe8>
    {
        LOG_DEBUG("Failed to connect to ECU: %d", err);
 8102390:	f7fe f988 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 8102394:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8102398:	461a      	mov	r2, r3
 810239a:	4914      	ldr	r1, [pc, #80]	@ (81023ec <_ZN29EthernetConnectionManagerTask10tcpConnectEv+0x124>)
 810239c:	f7fe f9aa 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
        tcpDisconnect();
 81023a0:	6878      	ldr	r0, [r7, #4]
 81023a2:	f000 f827 	bl	81023f4 <_ZN29EthernetConnectionManagerTask13tcpDisconnectEv>
        UNLOCK_TCPIP_CORE();
 81023a6:	480a      	ldr	r0, [pc, #40]	@ (81023d0 <_ZN29EthernetConnectionManagerTask10tcpConnectEv+0x108>)
 81023a8:	f017 fa39 	bl	811981e <sys_mutex_unlock>
        return false;
 81023ac:	2300      	movs	r3, #0
 81023ae:	e00a      	b.n	81023c6 <_ZN29EthernetConnectionManagerTask10tcpConnectEv+0xfe>
    }
    else
    {
        LOG_DEBUG("Connecting to ECU.");
 81023b0:	f7fe f978 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 81023b4:	4603      	mov	r3, r0
 81023b6:	490e      	ldr	r1, [pc, #56]	@ (81023f0 <_ZN29EthernetConnectionManagerTask10tcpConnectEv+0x128>)
 81023b8:	4618      	mov	r0, r3
 81023ba:	f7fe f99b 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
    }
    UNLOCK_TCPIP_CORE();
 81023be:	4804      	ldr	r0, [pc, #16]	@ (81023d0 <_ZN29EthernetConnectionManagerTask10tcpConnectEv+0x108>)
 81023c0:	f017 fa2d 	bl	811981e <sys_mutex_unlock>
    return true;
 81023c4:	2301      	movs	r3, #1
}
 81023c6:	4618      	mov	r0, r3
 81023c8:	3710      	adds	r7, #16
 81023ca:	46bd      	mov	sp, r7
 81023cc:	bd80      	pop	{r7, pc}
 81023ce:	bf00      	nop
 81023d0:	10011eb8 	.word	0x10011eb8
 81023d4:	0812384c 	.word	0x0812384c
 81023d8:	081289b8 	.word	0x081289b8
 81023dc:	08123868 	.word	0x08123868
 81023e0:	081013ff 	.word	0x081013ff
 81023e4:	0810145b 	.word	0x0810145b
 81023e8:	0810142f 	.word	0x0810142f
 81023ec:	08123884 	.word	0x08123884
 81023f0:	081238a4 	.word	0x081238a4

081023f4 <_ZN29EthernetConnectionManagerTask13tcpDisconnectEv>:


void EthernetConnectionManagerTask::tcpDisconnect()
{
 81023f4:	b580      	push	{r7, lr}
 81023f6:	b082      	sub	sp, #8
 81023f8:	af00      	add	r7, sp, #0
 81023fa:	6078      	str	r0, [r7, #4]
    LOCK_TCPIP_CORE();
 81023fc:	481b      	ldr	r0, [pc, #108]	@ (810246c <_ZN29EthernetConnectionManagerTask13tcpDisconnectEv+0x78>)
 81023fe:	f017 f9ff 	bl	8119800 <sys_mutex_lock>
    if (tcp_pcb != nullptr)
 8102402:	687b      	ldr	r3, [r7, #4]
 8102404:	69db      	ldr	r3, [r3, #28]
 8102406:	2b00      	cmp	r3, #0
 8102408:	d021      	beq.n	810244e <_ZN29EthernetConnectionManagerTask13tcpDisconnectEv+0x5a>
    {
        // Unregister callbacks
        tcp_arg(tcp_pcb, nullptr);
 810240a:	687b      	ldr	r3, [r7, #4]
 810240c:	69db      	ldr	r3, [r3, #28]
 810240e:	2100      	movs	r1, #0
 8102410:	4618      	mov	r0, r3
 8102412:	f018 ff3d 	bl	811b290 <tcp_arg>
        tcp_recv(tcp_pcb, nullptr);
 8102416:	687b      	ldr	r3, [r7, #4]
 8102418:	69db      	ldr	r3, [r3, #28]
 810241a:	2100      	movs	r1, #0
 810241c:	4618      	mov	r0, r3
 810241e:	f018 ff49 	bl	811b2b4 <tcp_recv>
        tcp_err(tcp_pcb, nullptr);
 8102422:	687b      	ldr	r3, [r7, #4]
 8102424:	69db      	ldr	r3, [r3, #28]
 8102426:	2100      	movs	r1, #0
 8102428:	4618      	mov	r0, r3
 810242a:	f018 ff65 	bl	811b2f8 <tcp_err>
        // Close connection
        tcp_close(tcp_pcb);
 810242e:	687b      	ldr	r3, [r7, #4]
 8102430:	69db      	ldr	r3, [r3, #28]
 8102432:	4618      	mov	r0, r3
 8102434:	f017 fc4e 	bl	8119cd4 <tcp_close>
        tcp_pcb = nullptr;
 8102438:	687b      	ldr	r3, [r7, #4]
 810243a:	2200      	movs	r2, #0
 810243c:	61da      	str	r2, [r3, #28]
        LOG_DEBUG("TCP PCB closed and callbacks unregistered.");
 810243e:	f7fe f931 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 8102442:	4603      	mov	r3, r0
 8102444:	490a      	ldr	r1, [pc, #40]	@ (8102470 <_ZN29EthernetConnectionManagerTask13tcpDisconnectEv+0x7c>)
 8102446:	4618      	mov	r0, r3
 8102448:	f7fe f954 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
 810244c:	e006      	b.n	810245c <_ZN29EthernetConnectionManagerTask13tcpDisconnectEv+0x68>
    }
    else
    {
        LOG_DEBUG("tcp_pcb is already null, skipping disconnection.");
 810244e:	f7fe f929 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 8102452:	4603      	mov	r3, r0
 8102454:	4907      	ldr	r1, [pc, #28]	@ (8102474 <_ZN29EthernetConnectionManagerTask13tcpDisconnectEv+0x80>)
 8102456:	4618      	mov	r0, r3
 8102458:	f7fe f94c 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
    }
    UNLOCK_TCPIP_CORE();
 810245c:	4803      	ldr	r0, [pc, #12]	@ (810246c <_ZN29EthernetConnectionManagerTask13tcpDisconnectEv+0x78>)
 810245e:	f017 f9de 	bl	811981e <sys_mutex_unlock>
}
 8102462:	bf00      	nop
 8102464:	3708      	adds	r7, #8
 8102466:	46bd      	mov	sp, r7
 8102468:	bd80      	pop	{r7, pc}
 810246a:	bf00      	nop
 810246c:	10011eb8 	.word	0x10011eb8
 8102470:	081238b8 	.word	0x081238b8
 8102474:	081238e4 	.word	0x081238e4

08102478 <_ZN29EthernetConnectionManagerTask15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa>:

void EthernetConnectionManagerTask::HandleTcpRecvCb(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8102478:	b580      	push	{r7, lr}
 810247a:	b088      	sub	sp, #32
 810247c:	af00      	add	r7, sp, #0
 810247e:	60f8      	str	r0, [r7, #12]
 8102480:	60b9      	str	r1, [r7, #8]
 8102482:	607a      	str	r2, [r7, #4]
 8102484:	603b      	str	r3, [r7, #0]
    if (!p || err != ERR_OK)
 8102486:	683b      	ldr	r3, [r7, #0]
 8102488:	2b00      	cmp	r3, #0
 810248a:	d003      	beq.n	8102494 <_ZN29EthernetConnectionManagerTask15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1c>
 810248c:	f997 3028 	ldrsb.w	r3, [r7, #40]	@ 0x28
 8102490:	2b00      	cmp	r3, #0
 8102492:	d03c      	beq.n	810250e <_ZN29EthernetConnectionManagerTask15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x96>
    {
        tcp_arg(tcp_pcb, nullptr);
 8102494:	68fb      	ldr	r3, [r7, #12]
 8102496:	69db      	ldr	r3, [r3, #28]
 8102498:	2100      	movs	r1, #0
 810249a:	4618      	mov	r0, r3
 810249c:	f018 fef8 	bl	811b290 <tcp_arg>
        tcp_recv(tcp_pcb, nullptr);
 81024a0:	68fb      	ldr	r3, [r7, #12]
 81024a2:	69db      	ldr	r3, [r3, #28]
 81024a4:	2100      	movs	r1, #0
 81024a6:	4618      	mov	r0, r3
 81024a8:	f018 ff04 	bl	811b2b4 <tcp_recv>
        tcp_err(tcp_pcb, nullptr);
 81024ac:	68fb      	ldr	r3, [r7, #12]
 81024ae:	69db      	ldr	r3, [r3, #28]
 81024b0:	2100      	movs	r1, #0
 81024b2:	4618      	mov	r0, r3
 81024b4:	f018 ff20 	bl	811b2f8 <tcp_err>
        // Close connection
        tcp_close(tcp_pcb);
 81024b8:	68fb      	ldr	r3, [r7, #12]
 81024ba:	69db      	ldr	r3, [r3, #28]
 81024bc:	4618      	mov	r0, r3
 81024be:	f017 fc09 	bl	8119cd4 <tcp_close>
        tcp_pcb = nullptr;
 81024c2:	68fb      	ldr	r3, [r7, #12]
 81024c4:	2200      	movs	r2, #0
 81024c6:	61da      	str	r2, [r3, #28]
        LOG_DEBUG("Connection closed or error occurred.");
 81024c8:	f7fe f8ec 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 81024cc:	4603      	mov	r3, r0
 81024ce:	4960      	ldr	r1, [pc, #384]	@ (8102650 <_ZN29EthernetConnectionManagerTask15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1d8>)
 81024d0:	4618      	mov	r0, r3
 81024d2:	f7fe f90f 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
        EConnectionEvent connEvent = EVENT_TCP_CONNECTION_FAILED;
 81024d6:	2304      	movs	r3, #4
 81024d8:	753b      	strb	r3, [r7, #20]
        if(xQueueSend(connection_events_internal_queue, &(connEvent), static_cast<TickType_t>(100000)) != pdPASS)
 81024da:	68fb      	ldr	r3, [r7, #12]
 81024dc:	68d8      	ldr	r0, [r3, #12]
 81024de:	f107 0114 	add.w	r1, r7, #20
 81024e2:	2300      	movs	r3, #0
 81024e4:	4a5b      	ldr	r2, [pc, #364]	@ (8102654 <_ZN29EthernetConnectionManagerTask15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1dc>)
 81024e6:	f00e febd 	bl	8111264 <xQueueGenericSend>
 81024ea:	4603      	mov	r3, r0
 81024ec:	2b01      	cmp	r3, #1
 81024ee:	bf14      	ite	ne
 81024f0:	2301      	movne	r3, #1
 81024f2:	2300      	moveq	r3, #0
 81024f4:	b2db      	uxtb	r3, r3
 81024f6:	2b00      	cmp	r3, #0
 81024f8:	f000 80a6 	beq.w	8102648 <_ZN29EthernetConnectionManagerTask15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1d0>
        {
            LOG_DEBUG("[FATAL ERROR] Could not send internal connection event: %d", connEvent);
 81024fc:	f7fe f8d2 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 8102500:	4603      	mov	r3, r0
 8102502:	7d3a      	ldrb	r2, [r7, #20]
 8102504:	4954      	ldr	r1, [pc, #336]	@ (8102658 <_ZN29EthernetConnectionManagerTask15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1e0>)
 8102506:	4618      	mov	r0, r3
 8102508:	f7fe f8f4 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
 810250c:	e09c      	b.n	8102648 <_ZN29EthernetConnectionManagerTask15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1d0>
        }
        return;
    }

    LOG_DEBUG("Received %d bytes of data:", p->len);
 810250e:	f7fe f8c9 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 8102512:	683b      	ldr	r3, [r7, #0]
 8102514:	895b      	ldrh	r3, [r3, #10]
 8102516:	461a      	mov	r2, r3
 8102518:	4950      	ldr	r1, [pc, #320]	@ (810265c <_ZN29EthernetConnectionManagerTask15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1e4>)
 810251a:	f7fe f8eb 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
    uint8_t *data = (uint8_t *)p->payload;
 810251e:	683b      	ldr	r3, [r7, #0]
 8102520:	685b      	ldr	r3, [r3, #4]
 8102522:	61fb      	str	r3, [r7, #28]

    const uint32_t udsPayloadLen = (data[0] << 24) | (data[1] << 16) | (data[2] << 8) | data[3];
 8102524:	69fb      	ldr	r3, [r7, #28]
 8102526:	781b      	ldrb	r3, [r3, #0]
 8102528:	061a      	lsls	r2, r3, #24
 810252a:	69fb      	ldr	r3, [r7, #28]
 810252c:	3301      	adds	r3, #1
 810252e:	781b      	ldrb	r3, [r3, #0]
 8102530:	041b      	lsls	r3, r3, #16
 8102532:	431a      	orrs	r2, r3
 8102534:	69fb      	ldr	r3, [r7, #28]
 8102536:	3302      	adds	r3, #2
 8102538:	781b      	ldrb	r3, [r3, #0]
 810253a:	021b      	lsls	r3, r3, #8
 810253c:	4313      	orrs	r3, r2
 810253e:	69fa      	ldr	r2, [r7, #28]
 8102540:	3203      	adds	r2, #3
 8102542:	7812      	ldrb	r2, [r2, #0]
 8102544:	4313      	orrs	r3, r2
 8102546:	61bb      	str	r3, [r7, #24]

    // check if declared payload length is correct (4 bytes length, 2 bytes checksum(?))
    if (udsPayloadLen + 6 > p->len)
 8102548:	69bb      	ldr	r3, [r7, #24]
 810254a:	3306      	adds	r3, #6
 810254c:	683a      	ldr	r2, [r7, #0]
 810254e:	8952      	ldrh	r2, [r2, #10]
 8102550:	4293      	cmp	r3, r2
 8102552:	d913      	bls.n	810257c <_ZN29EthernetConnectionManagerTask15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x104>
    {
        LOG_DEBUG("Data length mismatch: declared %u, received %u.", udsPayloadLen, p->len);
 8102554:	f7fe f8a6 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 8102558:	683b      	ldr	r3, [r7, #0]
 810255a:	895b      	ldrh	r3, [r3, #10]
 810255c:	69ba      	ldr	r2, [r7, #24]
 810255e:	4940      	ldr	r1, [pc, #256]	@ (8102660 <_ZN29EthernetConnectionManagerTask15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1e8>)
 8102560:	f7fe f8c8 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
        tcp_recved(tcp_pcb, p->len);
 8102564:	68fb      	ldr	r3, [r7, #12]
 8102566:	69da      	ldr	r2, [r3, #28]
 8102568:	683b      	ldr	r3, [r7, #0]
 810256a:	895b      	ldrh	r3, [r3, #10]
 810256c:	4619      	mov	r1, r3
 810256e:	4610      	mov	r0, r2
 8102570:	f017 fdae 	bl	811a0d0 <tcp_recved>
        pbuf_free(p);
 8102574:	6838      	ldr	r0, [r7, #0]
 8102576:	f016 fe01 	bl	811917c <pbuf_free>
        return;
 810257a:	e065      	b.n	8102648 <_ZN29EthernetConnectionManagerTask15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1d0>
    }

    // we skip 2 bytes becuase it is a checksum (?) used in confirmation frame
    const EECUAddress sourceAddr = static_cast<EECUAddress>(data[6]);
 810257c:	69fb      	ldr	r3, [r7, #28]
 810257e:	3306      	adds	r3, #6
 8102580:	781b      	ldrb	r3, [r3, #0]
 8102582:	75fb      	strb	r3, [r7, #23]
    const EECUAddress targetAddr = static_cast<EECUAddress>(data[7]);
 8102584:	69fb      	ldr	r3, [r7, #28]
 8102586:	3307      	adds	r3, #7
 8102588:	781b      	ldrb	r3, [r3, #0]
 810258a:	75bb      	strb	r3, [r7, #22]

    if(static_cast<uint8_t>(targetAddr) != DIAGNOSTIC_TOOL_INTERNAL_ADDR)
 810258c:	7dbb      	ldrb	r3, [r7, #22]
 810258e:	2bf4      	cmp	r3, #244	@ 0xf4
 8102590:	d00b      	beq.n	81025aa <_ZN29EthernetConnectionManagerTask15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x132>
    {
        // it means that it is echoed confirmation frame, discard.
    	tcp_recved(tcp_pcb, p->len);
 8102592:	68fb      	ldr	r3, [r7, #12]
 8102594:	69da      	ldr	r2, [r3, #28]
 8102596:	683b      	ldr	r3, [r7, #0]
 8102598:	895b      	ldrh	r3, [r3, #10]
 810259a:	4619      	mov	r1, r3
 810259c:	4610      	mov	r0, r2
 810259e:	f017 fd97 	bl	811a0d0 <tcp_recved>
        pbuf_free(p);
 81025a2:	6838      	ldr	r0, [r7, #0]
 81025a4:	f016 fdea 	bl	811917c <pbuf_free>
        return;
 81025a8:	e04e      	b.n	8102648 <_ZN29EthernetConnectionManagerTask15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1d0>
    }

    EUDSResponseSID SID = static_cast<EUDSResponseSID>(data[8]);
 81025aa:	69fb      	ldr	r3, [r7, #28]
 81025ac:	3308      	adds	r3, #8
 81025ae:	781b      	ldrb	r3, [r3, #0]
 81025b0:	757b      	strb	r3, [r7, #21]
    switch(SID)
 81025b2:	7d7b      	ldrb	r3, [r7, #21]
 81025b4:	2b7f      	cmp	r3, #127	@ 0x7f
 81025b6:	d023      	beq.n	8102600 <_ZN29EthernetConnectionManagerTask15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x188>
 81025b8:	7d7b      	ldrb	r3, [r7, #21]
 81025ba:	2b7f      	cmp	r3, #127	@ 0x7f
 81025bc:	d838      	bhi.n	8102630 <_ZN29EthernetConnectionManagerTask15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1b8>
 81025be:	7d7b      	ldrb	r3, [r7, #21]
 81025c0:	2b62      	cmp	r3, #98	@ 0x62
 81025c2:	d003      	beq.n	81025cc <_ZN29EthernetConnectionManagerTask15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x154>
 81025c4:	7d7b      	ldrb	r3, [r7, #21]
 81025c6:	2b6c      	cmp	r3, #108	@ 0x6c
 81025c8:	d00e      	beq.n	81025e8 <_ZN29EthernetConnectionManagerTask15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x170>
                xQueueSend(connection_events_internal_queue, &(connEvent), static_cast<TickType_t>(10000));
            }
        }
        default:
            // none other messages types are needed to be handled, so discard
            break;
 81025ca:	e031      	b.n	8102630 <_ZN29EthernetConnectionManagerTask15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1b8>
            handleReadDataByIdentifier(&data[11], udsPayloadLen - 5); 
 81025cc:	69fb      	ldr	r3, [r7, #28]
 81025ce:	f103 010b 	add.w	r1, r3, #11
 81025d2:	69bb      	ldr	r3, [r7, #24]
 81025d4:	3b05      	subs	r3, #5
 81025d6:	461a      	mov	r2, r3
 81025d8:	68f8      	ldr	r0, [r7, #12]
 81025da:	f000 f91b 	bl	8102814 <_ZN29EthernetConnectionManagerTask26handleReadDataByIdentifierEPhm>
            negativeResponseCount = 0;
 81025de:	68fb      	ldr	r3, [r7, #12]
 81025e0:	2200      	movs	r2, #0
 81025e2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
            break;
 81025e6:	e024      	b.n	8102632 <_ZN29EthernetConnectionManagerTask15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1ba>
            handleDynamicallyDefineDataIdentifier(&data[9], sourceAddr);
 81025e8:	69fb      	ldr	r3, [r7, #28]
 81025ea:	3309      	adds	r3, #9
 81025ec:	7dfa      	ldrb	r2, [r7, #23]
 81025ee:	4619      	mov	r1, r3
 81025f0:	68f8      	ldr	r0, [r7, #12]
 81025f2:	f000 f98f 	bl	8102914 <_ZN29EthernetConnectionManagerTask37handleDynamicallyDefineDataIdentifierEPh11EECUAddress>
            negativeResponseCount = 0;
 81025f6:	68fb      	ldr	r3, [r7, #12]
 81025f8:	2200      	movs	r2, #0
 81025fa:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
            break;
 81025fe:	e018      	b.n	8102632 <_ZN29EthernetConnectionManagerTask15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1ba>
            negativeResponseCount++;
 8102600:	68fb      	ldr	r3, [r7, #12]
 8102602:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8102606:	3301      	adds	r3, #1
 8102608:	b2da      	uxtb	r2, r3
 810260a:	68fb      	ldr	r3, [r7, #12]
 810260c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
            if(negativeResponseCount >= 20)
 8102610:	68fb      	ldr	r3, [r7, #12]
 8102612:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8102616:	2b13      	cmp	r3, #19
 8102618:	d90a      	bls.n	8102630 <_ZN29EthernetConnectionManagerTask15HandleTcpRecvCbEPvP7tcp_pcbP4pbufa+0x1b8>
                EConnectionEvent connEvent = EVENT_TCP_CONNECTION_FAILED;
 810261a:	2304      	movs	r3, #4
 810261c:	74fb      	strb	r3, [r7, #19]
                xQueueSend(connection_events_internal_queue, &(connEvent), static_cast<TickType_t>(10000));
 810261e:	68fb      	ldr	r3, [r7, #12]
 8102620:	68d8      	ldr	r0, [r3, #12]
 8102622:	f107 0113 	add.w	r1, r7, #19
 8102626:	2300      	movs	r3, #0
 8102628:	f242 7210 	movw	r2, #10000	@ 0x2710
 810262c:	f00e fe1a 	bl	8111264 <xQueueGenericSend>
            break;
 8102630:	bf00      	nop
    }

    tcp_recved(tcp_pcb, p->len);
 8102632:	68fb      	ldr	r3, [r7, #12]
 8102634:	69da      	ldr	r2, [r3, #28]
 8102636:	683b      	ldr	r3, [r7, #0]
 8102638:	895b      	ldrh	r3, [r3, #10]
 810263a:	4619      	mov	r1, r3
 810263c:	4610      	mov	r0, r2
 810263e:	f017 fd47 	bl	811a0d0 <tcp_recved>
    pbuf_free(p);
 8102642:	6838      	ldr	r0, [r7, #0]
 8102644:	f016 fd9a 	bl	811917c <pbuf_free>
}
 8102648:	3720      	adds	r7, #32
 810264a:	46bd      	mov	sp, r7
 810264c:	bd80      	pop	{r7, pc}
 810264e:	bf00      	nop
 8102650:	08123918 	.word	0x08123918
 8102654:	000186a0 	.word	0x000186a0
 8102658:	081236fc 	.word	0x081236fc
 810265c:	08123940 	.word	0x08123940
 8102660:	081235c8 	.word	0x081235c8

08102664 <_ZN29EthernetConnectionManagerTask18HandleTcpConnectCbEPvP7tcp_pcba>:

void EthernetConnectionManagerTask::HandleTcpConnectCb(void *arg, struct tcp_pcb *tpcb, err_t err)
{
 8102664:	b580      	push	{r7, lr}
 8102666:	b086      	sub	sp, #24
 8102668:	af00      	add	r7, sp, #0
 810266a:	60f8      	str	r0, [r7, #12]
 810266c:	60b9      	str	r1, [r7, #8]
 810266e:	607a      	str	r2, [r7, #4]
 8102670:	70fb      	strb	r3, [r7, #3]
    // accoring to documentation this always call with err == ERR_OK, so this impl is in case of LWiP updates
    if (err != ERR_OK)
 8102672:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8102676:	2b00      	cmp	r3, #0
 8102678:	d022      	beq.n	81026c0 <_ZN29EthernetConnectionManagerTask18HandleTcpConnectCbEPvP7tcp_pcba+0x5c>
    {
        LOG_DEBUG("Connection failed with error: %d", err);
 810267a:	f7fe f813 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 810267e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8102682:	461a      	mov	r2, r3
 8102684:	4921      	ldr	r1, [pc, #132]	@ (810270c <_ZN29EthernetConnectionManagerTask18HandleTcpConnectCbEPvP7tcp_pcba+0xa8>)
 8102686:	f7fe f835 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
        EConnectionEvent connEvent = EVENT_TCP_CONNECTION_FAILED;
 810268a:	2304      	movs	r3, #4
 810268c:	75fb      	strb	r3, [r7, #23]
        if(xQueueSend(connection_events_internal_queue, &(connEvent), static_cast<TickType_t>(100000)) != pdPASS)
 810268e:	68fb      	ldr	r3, [r7, #12]
 8102690:	68d8      	ldr	r0, [r3, #12]
 8102692:	f107 0117 	add.w	r1, r7, #23
 8102696:	2300      	movs	r3, #0
 8102698:	4a1d      	ldr	r2, [pc, #116]	@ (8102710 <_ZN29EthernetConnectionManagerTask18HandleTcpConnectCbEPvP7tcp_pcba+0xac>)
 810269a:	f00e fde3 	bl	8111264 <xQueueGenericSend>
 810269e:	4603      	mov	r3, r0
 81026a0:	2b01      	cmp	r3, #1
 81026a2:	bf14      	ite	ne
 81026a4:	2301      	movne	r3, #1
 81026a6:	2300      	moveq	r3, #0
 81026a8:	b2db      	uxtb	r3, r3
 81026aa:	2b00      	cmp	r3, #0
 81026ac:	d029      	beq.n	8102702 <_ZN29EthernetConnectionManagerTask18HandleTcpConnectCbEPvP7tcp_pcba+0x9e>
        {
            LOG_DEBUG("[FATAL ERROR] Could not send internal connection event: %d", connEvent);
 81026ae:	f7fd fff9 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 81026b2:	4603      	mov	r3, r0
 81026b4:	7dfa      	ldrb	r2, [r7, #23]
 81026b6:	4917      	ldr	r1, [pc, #92]	@ (8102714 <_ZN29EthernetConnectionManagerTask18HandleTcpConnectCbEPvP7tcp_pcba+0xb0>)
 81026b8:	4618      	mov	r0, r3
 81026ba:	f7fe f81b 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
        if(xQueueSend(connection_events_internal_queue, &(connEvent), static_cast<TickType_t>(100000)) != pdPASS)
        {
            LOG_DEBUG("[FATAL ERROR] Could not send internal connection event: %d", connEvent);
        }
    }
}
 81026be:	e020      	b.n	8102702 <_ZN29EthernetConnectionManagerTask18HandleTcpConnectCbEPvP7tcp_pcba+0x9e>
        LOG_DEBUG("Connected to ECU.");
 81026c0:	f7fd fff0 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 81026c4:	4603      	mov	r3, r0
 81026c6:	4914      	ldr	r1, [pc, #80]	@ (8102718 <_ZN29EthernetConnectionManagerTask18HandleTcpConnectCbEPvP7tcp_pcba+0xb4>)
 81026c8:	4618      	mov	r0, r3
 81026ca:	f7fe f813 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
        EConnectionEvent connEvent = EVENT_TCP_CONNECTED;
 81026ce:	2303      	movs	r3, #3
 81026d0:	75bb      	strb	r3, [r7, #22]
        if(xQueueSend(connection_events_internal_queue, &(connEvent), static_cast<TickType_t>(100000)) != pdPASS)
 81026d2:	68fb      	ldr	r3, [r7, #12]
 81026d4:	68d8      	ldr	r0, [r3, #12]
 81026d6:	f107 0116 	add.w	r1, r7, #22
 81026da:	2300      	movs	r3, #0
 81026dc:	4a0c      	ldr	r2, [pc, #48]	@ (8102710 <_ZN29EthernetConnectionManagerTask18HandleTcpConnectCbEPvP7tcp_pcba+0xac>)
 81026de:	f00e fdc1 	bl	8111264 <xQueueGenericSend>
 81026e2:	4603      	mov	r3, r0
 81026e4:	2b01      	cmp	r3, #1
 81026e6:	bf14      	ite	ne
 81026e8:	2301      	movne	r3, #1
 81026ea:	2300      	moveq	r3, #0
 81026ec:	b2db      	uxtb	r3, r3
 81026ee:	2b00      	cmp	r3, #0
 81026f0:	d007      	beq.n	8102702 <_ZN29EthernetConnectionManagerTask18HandleTcpConnectCbEPvP7tcp_pcba+0x9e>
            LOG_DEBUG("[FATAL ERROR] Could not send internal connection event: %d", connEvent);
 81026f2:	f7fd ffd7 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 81026f6:	4603      	mov	r3, r0
 81026f8:	7dba      	ldrb	r2, [r7, #22]
 81026fa:	4906      	ldr	r1, [pc, #24]	@ (8102714 <_ZN29EthernetConnectionManagerTask18HandleTcpConnectCbEPvP7tcp_pcba+0xb0>)
 81026fc:	4618      	mov	r0, r3
 81026fe:	f7fd fff9 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
}
 8102702:	bf00      	nop
 8102704:	3718      	adds	r7, #24
 8102706:	46bd      	mov	sp, r7
 8102708:	bd80      	pop	{r7, pc}
 810270a:	bf00      	nop
 810270c:	0812395c 	.word	0x0812395c
 8102710:	000186a0 	.word	0x000186a0
 8102714:	081236fc 	.word	0x081236fc
 8102718:	08123980 	.word	0x08123980

0810271c <_ZN29EthernetConnectionManagerTask14HandleTcpErrCbEPva>:

void EthernetConnectionManagerTask::HandleTcpErrCb(void *arg, err_t err)
{
 810271c:	b580      	push	{r7, lr}
 810271e:	b086      	sub	sp, #24
 8102720:	af00      	add	r7, sp, #0
 8102722:	60f8      	str	r0, [r7, #12]
 8102724:	60b9      	str	r1, [r7, #8]
 8102726:	4613      	mov	r3, r2
 8102728:	71fb      	strb	r3, [r7, #7]
    LOG_DEBUG("TCP connection error: %d", err);
 810272a:	f7fd ffbb 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 810272e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8102732:	461a      	mov	r2, r3
 8102734:	4910      	ldr	r1, [pc, #64]	@ (8102778 <_ZN29EthernetConnectionManagerTask14HandleTcpErrCbEPva+0x5c>)
 8102736:	f7fd ffdd 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
    EConnectionEvent connEvent = EVENT_TCP_CONNECTION_FAILED;
 810273a:	2304      	movs	r3, #4
 810273c:	75fb      	strb	r3, [r7, #23]
    if(xQueueSend(connection_events_internal_queue, &(connEvent), static_cast<TickType_t>(100000)) != pdPASS)
 810273e:	68fb      	ldr	r3, [r7, #12]
 8102740:	68d8      	ldr	r0, [r3, #12]
 8102742:	f107 0117 	add.w	r1, r7, #23
 8102746:	2300      	movs	r3, #0
 8102748:	4a0c      	ldr	r2, [pc, #48]	@ (810277c <_ZN29EthernetConnectionManagerTask14HandleTcpErrCbEPva+0x60>)
 810274a:	f00e fd8b 	bl	8111264 <xQueueGenericSend>
 810274e:	4603      	mov	r3, r0
 8102750:	2b01      	cmp	r3, #1
 8102752:	bf14      	ite	ne
 8102754:	2301      	movne	r3, #1
 8102756:	2300      	moveq	r3, #0
 8102758:	b2db      	uxtb	r3, r3
 810275a:	2b00      	cmp	r3, #0
 810275c:	d007      	beq.n	810276e <_ZN29EthernetConnectionManagerTask14HandleTcpErrCbEPva+0x52>
    {
        LOG_DEBUG("[FATAL ERROR] Could not send internal connection event: %d", connEvent);
 810275e:	f7fd ffa1 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 8102762:	4603      	mov	r3, r0
 8102764:	7dfa      	ldrb	r2, [r7, #23]
 8102766:	4906      	ldr	r1, [pc, #24]	@ (8102780 <_ZN29EthernetConnectionManagerTask14HandleTcpErrCbEPva+0x64>)
 8102768:	4618      	mov	r0, r3
 810276a:	f7fd ffc3 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
    }
}
 810276e:	bf00      	nop
 8102770:	3718      	adds	r7, #24
 8102772:	46bd      	mov	sp, r7
 8102774:	bd80      	pop	{r7, pc}
 8102776:	bf00      	nop
 8102778:	08123994 	.word	0x08123994
 810277c:	000186a0 	.word	0x000186a0
 8102780:	081236fc 	.word	0x081236fc

08102784 <_ZN29EthernetConnectionManagerTask7tcpSendEPhjb>:

bool EthernetConnectionManagerTask::tcpSend(uint8_t udsRequest[], size_t sizeOfUdsRequest, const bool tcpipThreadContext)
{
 8102784:	b580      	push	{r7, lr}
 8102786:	b086      	sub	sp, #24
 8102788:	af00      	add	r7, sp, #0
 810278a:	60f8      	str	r0, [r7, #12]
 810278c:	60b9      	str	r1, [r7, #8]
 810278e:	607a      	str	r2, [r7, #4]
 8102790:	70fb      	strb	r3, [r7, #3]
    if(!tcpipThreadContext)
 8102792:	78fb      	ldrb	r3, [r7, #3]
 8102794:	f083 0301 	eor.w	r3, r3, #1
 8102798:	b2db      	uxtb	r3, r3
 810279a:	2b00      	cmp	r3, #0
 810279c:	d002      	beq.n	81027a4 <_ZN29EthernetConnectionManagerTask7tcpSendEPhjb+0x20>
    {
        LOCK_TCPIP_CORE();
 810279e:	481b      	ldr	r0, [pc, #108]	@ (810280c <_ZN29EthernetConnectionManagerTask7tcpSendEPhjb+0x88>)
 81027a0:	f017 f82e 	bl	8119800 <sys_mutex_lock>
    }
    err_t res = tcp_write(tcp_pcb, udsRequest, sizeOfUdsRequest, TCP_WRITE_FLAG_COPY);
 81027a4:	68fb      	ldr	r3, [r7, #12]
 81027a6:	69d8      	ldr	r0, [r3, #28]
 81027a8:	687b      	ldr	r3, [r7, #4]
 81027aa:	b29a      	uxth	r2, r3
 81027ac:	2301      	movs	r3, #1
 81027ae:	68b9      	ldr	r1, [r7, #8]
 81027b0:	f01b fdae 	bl	811e310 <tcp_write>
 81027b4:	4603      	mov	r3, r0
 81027b6:	75fb      	strb	r3, [r7, #23]
    if (res != ERR_OK)
 81027b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 81027bc:	2b00      	cmp	r3, #0
 81027be:	d012      	beq.n	81027e6 <_ZN29EthernetConnectionManagerTask7tcpSendEPhjb+0x62>
    {
        LOG_DEBUG("Failed to send UDS request: %d", res);
 81027c0:	f7fd ff70 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 81027c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 81027c8:	461a      	mov	r2, r3
 81027ca:	4911      	ldr	r1, [pc, #68]	@ (8102810 <_ZN29EthernetConnectionManagerTask7tcpSendEPhjb+0x8c>)
 81027cc:	f7fd ff92 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
        if(!tcpipThreadContext)
 81027d0:	78fb      	ldrb	r3, [r7, #3]
 81027d2:	f083 0301 	eor.w	r3, r3, #1
 81027d6:	b2db      	uxtb	r3, r3
 81027d8:	2b00      	cmp	r3, #0
 81027da:	d002      	beq.n	81027e2 <_ZN29EthernetConnectionManagerTask7tcpSendEPhjb+0x5e>
        {
            UNLOCK_TCPIP_CORE();
 81027dc:	480b      	ldr	r0, [pc, #44]	@ (810280c <_ZN29EthernetConnectionManagerTask7tcpSendEPhjb+0x88>)
 81027de:	f017 f81e 	bl	811981e <sys_mutex_unlock>
        }
        return false;
 81027e2:	2300      	movs	r3, #0
 81027e4:	e00e      	b.n	8102804 <_ZN29EthernetConnectionManagerTask7tcpSendEPhjb+0x80>
    }

    tcp_output(tcp_pcb);
 81027e6:	68fb      	ldr	r3, [r7, #12]
 81027e8:	69db      	ldr	r3, [r3, #28]
 81027ea:	4618      	mov	r0, r3
 81027ec:	f01c fbd8 	bl	811efa0 <tcp_output>
    if(!tcpipThreadContext)
 81027f0:	78fb      	ldrb	r3, [r7, #3]
 81027f2:	f083 0301 	eor.w	r3, r3, #1
 81027f6:	b2db      	uxtb	r3, r3
 81027f8:	2b00      	cmp	r3, #0
 81027fa:	d002      	beq.n	8102802 <_ZN29EthernetConnectionManagerTask7tcpSendEPhjb+0x7e>
    {
        UNLOCK_TCPIP_CORE();
 81027fc:	4803      	ldr	r0, [pc, #12]	@ (810280c <_ZN29EthernetConnectionManagerTask7tcpSendEPhjb+0x88>)
 81027fe:	f017 f80e 	bl	811981e <sys_mutex_unlock>
    }
    return true;
 8102802:	2301      	movs	r3, #1
}
 8102804:	4618      	mov	r0, r3
 8102806:	3718      	adds	r7, #24
 8102808:	46bd      	mov	sp, r7
 810280a:	bd80      	pop	{r7, pc}
 810280c:	10011eb8 	.word	0x10011eb8
 8102810:	081239b0 	.word	0x081239b0

08102814 <_ZN29EthernetConnectionManagerTask26handleReadDataByIdentifierEPhm>:

void EthernetConnectionManagerTask::handleReadDataByIdentifier(uint8_t dataPayload[], uint32_t size)
{
 8102814:	b5b0      	push	{r4, r5, r7, lr}
 8102816:	b094      	sub	sp, #80	@ 0x50
 8102818:	af04      	add	r7, sp, #16
 810281a:	60f8      	str	r0, [r7, #12]
 810281c:	60b9      	str	r1, [r7, #8]
 810281e:	607a      	str	r2, [r7, #4]
    const char* mismatchingSizeLog = "Mismatching data size! Read data by identifier could not be read!";
 8102820:	4b39      	ldr	r3, [pc, #228]	@ (8102908 <_ZN29EthernetConnectionManagerTask26handleReadDataByIdentifierEPhm+0xf4>)
 8102822:	63fb      	str	r3, [r7, #60]	@ 0x3c
    switch(currentlyProcessedRequest)
 8102824:	68fb      	ldr	r3, [r7, #12]
 8102826:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 810282a:	2b00      	cmp	r3, #0
 810282c:	d002      	beq.n	8102834 <_ZN29EthernetConnectionManagerTask26handleReadDataByIdentifierEPhm+0x20>
 810282e:	2b15      	cmp	r3, #21
 8102830:	d021      	beq.n	8102876 <_ZN29EthernetConnectionManagerTask26handleReadDataByIdentifierEPhm+0x62>
            }
            break;
        }
        default:
            // return, because if data was successfully read then we always need to send an internat event
            return;
 8102832:	e065      	b.n	8102900 <_ZN29EthernetConnectionManagerTask26handleReadDataByIdentifierEPhm+0xec>
            if(size != 1)
 8102834:	687b      	ldr	r3, [r7, #4]
 8102836:	2b01      	cmp	r3, #1
 8102838:	d007      	beq.n	810284a <_ZN29EthernetConnectionManagerTask26handleReadDataByIdentifierEPhm+0x36>
                LOG_DEBUG(mismatchingSizeLog);
 810283a:	f7fd ff33 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 810283e:	4603      	mov	r3, r0
 8102840:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8102842:	4618      	mov	r0, r3
 8102844:	f7fd ff56 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
            break;
 8102848:	e03e      	b.n	81028c8 <_ZN29EthernetConnectionManagerTask26handleReadDataByIdentifierEPhm+0xb4>
                data.battery_voltage = dataPayload[0]; // skip 2 bytes because it is DID, which does not interest us as we know what data to expect and how to interpret it
 810284a:	68bb      	ldr	r3, [r7, #8]
 810284c:	781b      	ldrb	r3, [r3, #0]
 810284e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                event_bus.send(EVENT_DATA_UPDATE_BATTERY_VOLTAGE, data, EVENT_CLIENT_FRONTEND);
 8102852:	68fd      	ldr	r5, [r7, #12]
 8102854:	2300      	movs	r3, #0
 8102856:	9303      	str	r3, [sp, #12]
 8102858:	466c      	mov	r4, sp
 810285a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810285e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8102862:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8102866:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810286a:	cb0c      	ldmia	r3, {r2, r3}
 810286c:	2100      	movs	r1, #0
 810286e:	4628      	mov	r0, r5
 8102870:	f000 fc0a 	bl	8103088 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient>
            break;
 8102874:	e028      	b.n	81028c8 <_ZN29EthernetConnectionManagerTask26handleReadDataByIdentifierEPhm+0xb4>
            if(size != 2)
 8102876:	687b      	ldr	r3, [r7, #4]
 8102878:	2b02      	cmp	r3, #2
 810287a:	d007      	beq.n	810288c <_ZN29EthernetConnectionManagerTask26handleReadDataByIdentifierEPhm+0x78>
                LOG_DEBUG(mismatchingSizeLog);
 810287c:	f7fd ff12 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 8102880:	4603      	mov	r3, r0
 8102882:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8102884:	4618      	mov	r0, r3
 8102886:	f7fd ff35 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
            break;
 810288a:	e01c      	b.n	81028c6 <_ZN29EthernetConnectionManagerTask26handleReadDataByIdentifierEPhm+0xb2>
                data.rpm = (dataPayload[0] << 8) | dataPayload[1];
 810288c:	68bb      	ldr	r3, [r7, #8]
 810288e:	781b      	ldrb	r3, [r3, #0]
 8102890:	021b      	lsls	r3, r3, #8
 8102892:	b21a      	sxth	r2, r3
 8102894:	68bb      	ldr	r3, [r7, #8]
 8102896:	3301      	adds	r3, #1
 8102898:	781b      	ldrb	r3, [r3, #0]
 810289a:	b21b      	sxth	r3, r3
 810289c:	4313      	orrs	r3, r2
 810289e:	b21b      	sxth	r3, r3
 81028a0:	b29b      	uxth	r3, r3
 81028a2:	823b      	strh	r3, [r7, #16]
                event_bus.send(EVENT_DATA_UPDATE_RPM, data, EVENT_CLIENT_FRONTEND);
 81028a4:	68fd      	ldr	r5, [r7, #12]
 81028a6:	2300      	movs	r3, #0
 81028a8:	9303      	str	r3, [sp, #12]
 81028aa:	466c      	mov	r4, sp
 81028ac:	f107 0318 	add.w	r3, r7, #24
 81028b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 81028b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 81028b8:	f107 0310 	add.w	r3, r7, #16
 81028bc:	cb0c      	ldmia	r3, {r2, r3}
 81028be:	2115      	movs	r1, #21
 81028c0:	4628      	mov	r0, r5
 81028c2:	f000 fbe1 	bl	8103088 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient>
            break;
 81028c6:	bf00      	nop
    }
    EConnectionEvent connEvent = EVENT_TCP_READ_DATA_BY_ID_RECEIVED;
 81028c8:	2308      	movs	r3, #8
 81028ca:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    if(xQueueSend(connection_events_internal_queue, &(connEvent), static_cast<TickType_t>(100000)) != pdPASS)
 81028ce:	68fb      	ldr	r3, [r7, #12]
 81028d0:	68d8      	ldr	r0, [r3, #12]
 81028d2:	f107 013b 	add.w	r1, r7, #59	@ 0x3b
 81028d6:	2300      	movs	r3, #0
 81028d8:	4a0c      	ldr	r2, [pc, #48]	@ (810290c <_ZN29EthernetConnectionManagerTask26handleReadDataByIdentifierEPhm+0xf8>)
 81028da:	f00e fcc3 	bl	8111264 <xQueueGenericSend>
 81028de:	4603      	mov	r3, r0
 81028e0:	2b01      	cmp	r3, #1
 81028e2:	bf14      	ite	ne
 81028e4:	2301      	movne	r3, #1
 81028e6:	2300      	moveq	r3, #0
 81028e8:	b2db      	uxtb	r3, r3
 81028ea:	2b00      	cmp	r3, #0
 81028ec:	d008      	beq.n	8102900 <_ZN29EthernetConnectionManagerTask26handleReadDataByIdentifierEPhm+0xec>
    {
        LOG_DEBUG("[FATAL ERROR] Could not send internal connection event: %d", connEvent);
 81028ee:	f7fd fed9 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 81028f2:	4603      	mov	r3, r0
 81028f4:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 81028f8:	4905      	ldr	r1, [pc, #20]	@ (8102910 <_ZN29EthernetConnectionManagerTask26handleReadDataByIdentifierEPhm+0xfc>)
 81028fa:	4618      	mov	r0, r3
 81028fc:	f7fd fefa 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
    }
}
 8102900:	3740      	adds	r7, #64	@ 0x40
 8102902:	46bd      	mov	sp, r7
 8102904:	bdb0      	pop	{r4, r5, r7, pc}
 8102906:	bf00      	nop
 8102908:	081239d0 	.word	0x081239d0
 810290c:	000186a0 	.word	0x000186a0
 8102910:	081236fc 	.word	0x081236fc

08102914 <_ZN29EthernetConnectionManagerTask37handleDynamicallyDefineDataIdentifierEPh11EECUAddress>:

void EthernetConnectionManagerTask::handleDynamicallyDefineDataIdentifier(uint8_t dataPayload[], EECUAddress sourceEcuAddr)
{
 8102914:	b580      	push	{r7, lr}
 8102916:	b08e      	sub	sp, #56	@ 0x38
 8102918:	af00      	add	r7, sp, #0
 810291a:	60f8      	str	r0, [r7, #12]
 810291c:	60b9      	str	r1, [r7, #8]
 810291e:	4613      	mov	r3, r2
 8102920:	71fb      	strb	r3, [r7, #7]
    const uint8_t subSID = dataPayload[0];
 8102922:	68bb      	ldr	r3, [r7, #8]
 8102924:	781b      	ldrb	r3, [r3, #0]
 8102926:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    switch(subSID)
 810292a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 810292e:	2b01      	cmp	r3, #1
 8102930:	d01a      	beq.n	8102968 <_ZN29EthernetConnectionManagerTask37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0x54>
 8102932:	2b03      	cmp	r3, #3
 8102934:	d132      	bne.n	810299c <_ZN29EthernetConnectionManagerTask37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0x88>
    {
        case 0x03:
        {
            const size_t totalUDSRequestSize = secondReqDynDataSize + 6;
 8102936:	2310      	movs	r3, #16
 8102938:	633b      	str	r3, [r7, #48]	@ 0x30
            uint8_t payloadToSend[totalUDSRequestSize] = {0}; // + 4 for data len and +2 for "checksum" 
 810293a:	2300      	movs	r3, #0
 810293c:	61fb      	str	r3, [r7, #28]
 810293e:	f107 0320 	add.w	r3, r7, #32
 8102942:	2200      	movs	r2, #0
 8102944:	601a      	str	r2, [r3, #0]
 8102946:	605a      	str	r2, [r3, #4]
 8102948:	609a      	str	r2, [r3, #8]
            // response for the first dynamic assign sequence, so send next dynamic assign sequence packet
            prepareSecondRequestForDynamicData(payloadToSend, sourceEcuAddr, EDynamicDataIndentifierRequestCode::BATTERY_VOLTAGE); //TODO BATTERY_VOLTAGE na sztywno
 810294a:	79fa      	ldrb	r2, [r7, #7]
 810294c:	f107 011c 	add.w	r1, r7, #28
 8102950:	4b15      	ldr	r3, [pc, #84]	@ (81029a8 <_ZN29EthernetConnectionManagerTask37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0x94>)
 8102952:	68f8      	ldr	r0, [r7, #12]
 8102954:	f000 f8fc 	bl	8102b50 <_ZN29EthernetConnectionManagerTask34prepareSecondRequestForDynamicDataEPh11EECUAddress34EDynamicDataIndentifierRequestCode>
            tcpSend(payloadToSend, totalUDSRequestSize, true);
 8102958:	f107 011c 	add.w	r1, r7, #28
 810295c:	2301      	movs	r3, #1
 810295e:	2210      	movs	r2, #16
 8102960:	68f8      	ldr	r0, [r7, #12]
 8102962:	f7ff ff0f 	bl	8102784 <_ZN29EthernetConnectionManagerTask7tcpSendEPhjb>
            break;
 8102966:	e01a      	b.n	810299e <_ZN29EthernetConnectionManagerTask37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0x8a>
        }
        case 0x01:
        {
            const size_t totalUDSRequestSize = dataReqDataSize + 6;
 8102968:	230b      	movs	r3, #11
 810296a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uint8_t payloadToSend[totalUDSRequestSize] = {0}; // + 4 for data len and +2 for "checksum" 
 810296c:	2300      	movs	r3, #0
 810296e:	613b      	str	r3, [r7, #16]
 8102970:	f107 0314 	add.w	r3, r7, #20
 8102974:	2200      	movs	r2, #0
 8102976:	601a      	str	r2, [r3, #0]
 8102978:	f8c3 2003 	str.w	r2, [r3, #3]
            // response for the second dynamic assign sequence, so send request for data
            prepareDataRequest(payloadToSend, sourceEcuAddr, EUDSDID::DYNAMICALLY_DEFINED_DATA_IDENTIFIER_0);
 810297c:	79fa      	ldrb	r2, [r7, #7]
 810297e:	f107 0110 	add.w	r1, r7, #16
 8102982:	f44f 4373 	mov.w	r3, #62208	@ 0xf300
 8102986:	68f8      	ldr	r0, [r7, #12]
 8102988:	f000 f866 	bl	8102a58 <_ZN29EthernetConnectionManagerTask18prepareDataRequestEPh11EECUAddress7EUDSDID>
            tcpSend(payloadToSend, totalUDSRequestSize, true);
 810298c:	f107 0110 	add.w	r1, r7, #16
 8102990:	2301      	movs	r3, #1
 8102992:	220b      	movs	r2, #11
 8102994:	68f8      	ldr	r0, [r7, #12]
 8102996:	f7ff fef5 	bl	8102784 <_ZN29EthernetConnectionManagerTask7tcpSendEPhjb>
            break;
 810299a:	e000      	b.n	810299e <_ZN29EthernetConnectionManagerTask37handleDynamicallyDefineDataIdentifierEPh11EECUAddress+0x8a>
        }
        default:
            break;
 810299c:	bf00      	nop
    }
}
 810299e:	bf00      	nop
 81029a0:	3738      	adds	r7, #56	@ 0x38
 81029a2:	46bd      	mov	sp, r7
 81029a4:	bd80      	pop	{r7, pc}
 81029a6:	bf00      	nop
 81029a8:	46090101 	.word	0x46090101

081029ac <_ZN29EthernetConnectionManagerTask18sendRequestForDataENS_12EDoIPRequestE>:

void EthernetConnectionManagerTask::sendRequestForData(EDoIPRequest request)
{
 81029ac:	b580      	push	{r7, lr}
 81029ae:	b08a      	sub	sp, #40	@ 0x28
 81029b0:	af00      	add	r7, sp, #0
 81029b2:	6078      	str	r0, [r7, #4]
 81029b4:	460b      	mov	r3, r1
 81029b6:	70fb      	strb	r3, [r7, #3]
    currentlyProcessedRequest = request;
 81029b8:	687b      	ldr	r3, [r7, #4]
 81029ba:	78fa      	ldrb	r2, [r7, #3]
 81029bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    switch(request)
 81029c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 81029c4:	2b15      	cmp	r3, #21
 81029c6:	d01e      	beq.n	8102a06 <_ZN29EthernetConnectionManagerTask18sendRequestForDataENS_12EDoIPRequestE+0x5a>
 81029c8:	2b15      	cmp	r3, #21
 81029ca:	dc3e      	bgt.n	8102a4a <_ZN29EthernetConnectionManagerTask18sendRequestForDataENS_12EDoIPRequestE+0x9e>
 81029cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 81029d0:	d033      	beq.n	8102a3a <_ZN29EthernetConnectionManagerTask18sendRequestForDataENS_12EDoIPRequestE+0x8e>
 81029d2:	2b00      	cmp	r3, #0
 81029d4:	d139      	bne.n	8102a4a <_ZN29EthernetConnectionManagerTask18sendRequestForDataENS_12EDoIPRequestE+0x9e>
    {
        case BATTERY_VOLTAGE:
        {
            const size_t totalUDSRequestSize = firstReqDynDataSize + 6;
 81029d6:	230c      	movs	r3, #12
 81029d8:	623b      	str	r3, [r7, #32]
            uint8_t payloadToSend[totalUDSRequestSize] = {0}; // + 4 for data len and +2 for "checksum" 
 81029da:	2300      	movs	r3, #0
 81029dc:	617b      	str	r3, [r7, #20]
 81029de:	f107 0318 	add.w	r3, r7, #24
 81029e2:	2200      	movs	r2, #0
 81029e4:	601a      	str	r2, [r3, #0]
 81029e6:	605a      	str	r2, [r3, #4]
            prepareFirstRequestForDynamicData(payloadToSend, EECUAddress::ECU_DME_INTERNAL_ADDR);
 81029e8:	f107 0314 	add.w	r3, r7, #20
 81029ec:	2212      	movs	r2, #18
 81029ee:	4619      	mov	r1, r3
 81029f0:	6878      	ldr	r0, [r7, #4]
 81029f2:	f000 f871 	bl	8102ad8 <_ZN29EthernetConnectionManagerTask33prepareFirstRequestForDynamicDataEPh11EECUAddress>
            tcpSend(payloadToSend, totalUDSRequestSize, false);
 81029f6:	f107 0114 	add.w	r1, r7, #20
 81029fa:	2300      	movs	r3, #0
 81029fc:	220c      	movs	r2, #12
 81029fe:	6878      	ldr	r0, [r7, #4]
 8102a00:	f7ff fec0 	bl	8102784 <_ZN29EthernetConnectionManagerTask7tcpSendEPhjb>
            break;
 8102a04:	e022      	b.n	8102a4c <_ZN29EthernetConnectionManagerTask18sendRequestForDataENS_12EDoIPRequestE+0xa0>
        }
        case RPM:
        {
            const size_t totalUDSRequestSize = dataReqDataSize + 6;
 8102a06:	230b      	movs	r3, #11
 8102a08:	627b      	str	r3, [r7, #36]	@ 0x24
            uint8_t payloadToSend[totalUDSRequestSize] = {0}; // + 4 for data len and +2 for "checksum" 
 8102a0a:	2300      	movs	r3, #0
 8102a0c:	60bb      	str	r3, [r7, #8]
 8102a0e:	f107 030c 	add.w	r3, r7, #12
 8102a12:	2200      	movs	r2, #0
 8102a14:	601a      	str	r2, [r3, #0]
 8102a16:	f8c3 2003 	str.w	r2, [r3, #3]
            prepareDataRequest(payloadToSend, EECUAddress::ECU_KOMBI_INTERNAL_ADDR, EUDSDID::KOMBI_RPM);
 8102a1a:	f107 0108 	add.w	r1, r7, #8
 8102a1e:	f24d 1306 	movw	r3, #53510	@ 0xd106
 8102a22:	2260      	movs	r2, #96	@ 0x60
 8102a24:	6878      	ldr	r0, [r7, #4]
 8102a26:	f000 f817 	bl	8102a58 <_ZN29EthernetConnectionManagerTask18prepareDataRequestEPh11EECUAddress7EUDSDID>
            tcpSend(payloadToSend, totalUDSRequestSize, false);
 8102a2a:	f107 0108 	add.w	r1, r7, #8
 8102a2e:	2300      	movs	r3, #0
 8102a30:	220b      	movs	r2, #11
 8102a32:	6878      	ldr	r0, [r7, #4]
 8102a34:	f7ff fea6 	bl	8102784 <_ZN29EthernetConnectionManagerTask7tcpSendEPhjb>
            break;
 8102a38:	e008      	b.n	8102a4c <_ZN29EthernetConnectionManagerTask18sendRequestForDataENS_12EDoIPRequestE+0xa0>
        }
        case REQUEST_INVALID:
        {
            LOG_DEBUG("Requested to send data of type REQUEST_INVALID.");
 8102a3a:	f7fd fe33 	bl	81006a4 <_ZN10LogPrinter8instanceEv>
 8102a3e:	4603      	mov	r3, r0
 8102a40:	4904      	ldr	r1, [pc, #16]	@ (8102a54 <_ZN29EthernetConnectionManagerTask18sendRequestForDataENS_12EDoIPRequestE+0xa8>)
 8102a42:	4618      	mov	r0, r3
 8102a44:	f7fd fe56 	bl	81006f4 <_ZN10LogPrinter10printDebugEPKcz>
            break;
 8102a48:	e000      	b.n	8102a4c <_ZN29EthernetConnectionManagerTask18sendRequestForDataENS_12EDoIPRequestE+0xa0>
        }
        default:
            break;
 8102a4a:	bf00      	nop
    }
}
 8102a4c:	bf00      	nop
 8102a4e:	3728      	adds	r7, #40	@ 0x28
 8102a50:	46bd      	mov	sp, r7
 8102a52:	bd80      	pop	{r7, pc}
 8102a54:	08123a14 	.word	0x08123a14

08102a58 <_ZN29EthernetConnectionManagerTask18prepareDataRequestEPh11EECUAddress7EUDSDID>:

void EthernetConnectionManagerTask::prepareDataRequest(uint8_t preparedPayload[], EECUAddress targetEcuAddr, EUDSDID did)
{
 8102a58:	b480      	push	{r7}
 8102a5a:	b085      	sub	sp, #20
 8102a5c:	af00      	add	r7, sp, #0
 8102a5e:	60f8      	str	r0, [r7, #12]
 8102a60:	60b9      	str	r1, [r7, #8]
 8102a62:	4611      	mov	r1, r2
 8102a64:	461a      	mov	r2, r3
 8102a66:	460b      	mov	r3, r1
 8102a68:	71fb      	strb	r3, [r7, #7]
 8102a6a:	4613      	mov	r3, r2
 8102a6c:	80bb      	strh	r3, [r7, #4]
    // data len
    preparedPayload[0] = 0x00;
 8102a6e:	68bb      	ldr	r3, [r7, #8]
 8102a70:	2200      	movs	r2, #0
 8102a72:	701a      	strb	r2, [r3, #0]
    preparedPayload[1] = 0x00;
 8102a74:	68bb      	ldr	r3, [r7, #8]
 8102a76:	3301      	adds	r3, #1
 8102a78:	2200      	movs	r2, #0
 8102a7a:	701a      	strb	r2, [r3, #0]
    preparedPayload[2] = 0x00;
 8102a7c:	68bb      	ldr	r3, [r7, #8]
 8102a7e:	3302      	adds	r3, #2
 8102a80:	2200      	movs	r2, #0
 8102a82:	701a      	strb	r2, [r3, #0]
    preparedPayload[3] = dataReqDataSize;
 8102a84:	68bb      	ldr	r3, [r7, #8]
 8102a86:	3303      	adds	r3, #3
 8102a88:	2205      	movs	r2, #5
 8102a8a:	701a      	strb	r2, [r3, #0]

    // "checksum"
    preparedPayload[4] = 0x00;
 8102a8c:	68bb      	ldr	r3, [r7, #8]
 8102a8e:	3304      	adds	r3, #4
 8102a90:	2200      	movs	r2, #0
 8102a92:	701a      	strb	r2, [r3, #0]
    preparedPayload[5] = 0x01;
 8102a94:	68bb      	ldr	r3, [r7, #8]
 8102a96:	3305      	adds	r3, #5
 8102a98:	2201      	movs	r2, #1
 8102a9a:	701a      	strb	r2, [r3, #0]

    // addresses
    preparedPayload[6] = DIAGNOSTIC_TOOL_INTERNAL_ADDR;
 8102a9c:	68bb      	ldr	r3, [r7, #8]
 8102a9e:	3306      	adds	r3, #6
 8102aa0:	22f4      	movs	r2, #244	@ 0xf4
 8102aa2:	701a      	strb	r2, [r3, #0]
    preparedPayload[7] = static_cast<uint8_t>(targetEcuAddr);
 8102aa4:	68bb      	ldr	r3, [r7, #8]
 8102aa6:	3307      	adds	r3, #7
 8102aa8:	79fa      	ldrb	r2, [r7, #7]
 8102aaa:	701a      	strb	r2, [r3, #0]

    // SID
    preparedPayload[8] = static_cast<uint8_t>(EUDSRequestSID::READ_DATA_BY_IDENTIFIER);
 8102aac:	68bb      	ldr	r3, [r7, #8]
 8102aae:	3308      	adds	r3, #8
 8102ab0:	2222      	movs	r2, #34	@ 0x22
 8102ab2:	701a      	strb	r2, [r3, #0]

    // DID
    preparedPayload[9] = static_cast<uint8_t>((static_cast<uint16_t>(did) & 0xFF00) >> 8);
 8102ab4:	88bb      	ldrh	r3, [r7, #4]
 8102ab6:	0a1b      	lsrs	r3, r3, #8
 8102ab8:	b29a      	uxth	r2, r3
 8102aba:	68bb      	ldr	r3, [r7, #8]
 8102abc:	3309      	adds	r3, #9
 8102abe:	b2d2      	uxtb	r2, r2
 8102ac0:	701a      	strb	r2, [r3, #0]
    preparedPayload[10] = static_cast<uint8_t>(static_cast<uint16_t>(did) & 0x00FF);
 8102ac2:	68bb      	ldr	r3, [r7, #8]
 8102ac4:	330a      	adds	r3, #10
 8102ac6:	88ba      	ldrh	r2, [r7, #4]
 8102ac8:	b2d2      	uxtb	r2, r2
 8102aca:	701a      	strb	r2, [r3, #0]
    
}
 8102acc:	bf00      	nop
 8102ace:	3714      	adds	r7, #20
 8102ad0:	46bd      	mov	sp, r7
 8102ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ad6:	4770      	bx	lr

08102ad8 <_ZN29EthernetConnectionManagerTask33prepareFirstRequestForDynamicDataEPh11EECUAddress>:

void EthernetConnectionManagerTask::prepareFirstRequestForDynamicData(uint8_t preparedPayload[], EECUAddress targetEcuAddr)
{
 8102ad8:	b480      	push	{r7}
 8102ada:	b085      	sub	sp, #20
 8102adc:	af00      	add	r7, sp, #0
 8102ade:	60f8      	str	r0, [r7, #12]
 8102ae0:	60b9      	str	r1, [r7, #8]
 8102ae2:	4613      	mov	r3, r2
 8102ae4:	71fb      	strb	r3, [r7, #7]
    // data len
    preparedPayload[0] = 0x00;
 8102ae6:	68bb      	ldr	r3, [r7, #8]
 8102ae8:	2200      	movs	r2, #0
 8102aea:	701a      	strb	r2, [r3, #0]
    preparedPayload[1] = 0x00;
 8102aec:	68bb      	ldr	r3, [r7, #8]
 8102aee:	3301      	adds	r3, #1
 8102af0:	2200      	movs	r2, #0
 8102af2:	701a      	strb	r2, [r3, #0]
    preparedPayload[2] = 0x00;
 8102af4:	68bb      	ldr	r3, [r7, #8]
 8102af6:	3302      	adds	r3, #2
 8102af8:	2200      	movs	r2, #0
 8102afa:	701a      	strb	r2, [r3, #0]
    preparedPayload[3] = firstReqDynDataSize;
 8102afc:	68bb      	ldr	r3, [r7, #8]
 8102afe:	3303      	adds	r3, #3
 8102b00:	2206      	movs	r2, #6
 8102b02:	701a      	strb	r2, [r3, #0]

    // "checksum"
    preparedPayload[4] = 0x00;
 8102b04:	68bb      	ldr	r3, [r7, #8]
 8102b06:	3304      	adds	r3, #4
 8102b08:	2200      	movs	r2, #0
 8102b0a:	701a      	strb	r2, [r3, #0]
    preparedPayload[5] = 0x01;
 8102b0c:	68bb      	ldr	r3, [r7, #8]
 8102b0e:	3305      	adds	r3, #5
 8102b10:	2201      	movs	r2, #1
 8102b12:	701a      	strb	r2, [r3, #0]

    // addresses
    preparedPayload[6] = DIAGNOSTIC_TOOL_INTERNAL_ADDR;
 8102b14:	68bb      	ldr	r3, [r7, #8]
 8102b16:	3306      	adds	r3, #6
 8102b18:	22f4      	movs	r2, #244	@ 0xf4
 8102b1a:	701a      	strb	r2, [r3, #0]
    preparedPayload[7] = static_cast<uint8_t>(targetEcuAddr);
 8102b1c:	68bb      	ldr	r3, [r7, #8]
 8102b1e:	3307      	adds	r3, #7
 8102b20:	79fa      	ldrb	r2, [r7, #7]
 8102b22:	701a      	strb	r2, [r3, #0]

    // SID
    preparedPayload[8] = static_cast<uint8_t>(EUDSRequestSID::DYNAMICALLY_DEFINE_DATA_IDENTIFIER);
 8102b24:	68bb      	ldr	r3, [r7, #8]
 8102b26:	3308      	adds	r3, #8
 8102b28:	222c      	movs	r2, #44	@ 0x2c
 8102b2a:	701a      	strb	r2, [r3, #0]
    // sub SID
    preparedPayload[9] = 0x03;
 8102b2c:	68bb      	ldr	r3, [r7, #8]
 8102b2e:	3309      	adds	r3, #9
 8102b30:	2203      	movs	r2, #3
 8102b32:	701a      	strb	r2, [r3, #0]

    // DID
    preparedPayload[10] = static_cast<uint8_t>((static_cast<uint16_t>(EUDSDID::DYNAMICALLY_DEFINED_DATA_IDENTIFIER_0) & 0xFF00) >> 8);
 8102b34:	68bb      	ldr	r3, [r7, #8]
 8102b36:	330a      	adds	r3, #10
 8102b38:	22f3      	movs	r2, #243	@ 0xf3
 8102b3a:	701a      	strb	r2, [r3, #0]
    preparedPayload[11] = static_cast<uint8_t>(static_cast<uint16_t>(EUDSDID::DYNAMICALLY_DEFINED_DATA_IDENTIFIER_0) & 0x00FF);
 8102b3c:	68bb      	ldr	r3, [r7, #8]
 8102b3e:	330b      	adds	r3, #11
 8102b40:	2200      	movs	r2, #0
 8102b42:	701a      	strb	r2, [r3, #0]
}
 8102b44:	bf00      	nop
 8102b46:	3714      	adds	r7, #20
 8102b48:	46bd      	mov	sp, r7
 8102b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b4e:	4770      	bx	lr

08102b50 <_ZN29EthernetConnectionManagerTask34prepareSecondRequestForDynamicDataEPh11EECUAddress34EDynamicDataIndentifierRequestCode>:

void EthernetConnectionManagerTask::prepareSecondRequestForDynamicData(uint8_t preparedPayload[], EECUAddress targetEcuAddr, EDynamicDataIndentifierRequestCode ddirCode)
{
 8102b50:	b480      	push	{r7}
 8102b52:	b085      	sub	sp, #20
 8102b54:	af00      	add	r7, sp, #0
 8102b56:	60f8      	str	r0, [r7, #12]
 8102b58:	60b9      	str	r1, [r7, #8]
 8102b5a:	603b      	str	r3, [r7, #0]
 8102b5c:	4613      	mov	r3, r2
 8102b5e:	71fb      	strb	r3, [r7, #7]
    // data len
    preparedPayload[0] = 0x00;
 8102b60:	68bb      	ldr	r3, [r7, #8]
 8102b62:	2200      	movs	r2, #0
 8102b64:	701a      	strb	r2, [r3, #0]
    preparedPayload[1] = 0x00;
 8102b66:	68bb      	ldr	r3, [r7, #8]
 8102b68:	3301      	adds	r3, #1
 8102b6a:	2200      	movs	r2, #0
 8102b6c:	701a      	strb	r2, [r3, #0]
    preparedPayload[2] = 0x00;
 8102b6e:	68bb      	ldr	r3, [r7, #8]
 8102b70:	3302      	adds	r3, #2
 8102b72:	2200      	movs	r2, #0
 8102b74:	701a      	strb	r2, [r3, #0]
    preparedPayload[3] = secondReqDynDataSize;
 8102b76:	68bb      	ldr	r3, [r7, #8]
 8102b78:	3303      	adds	r3, #3
 8102b7a:	220a      	movs	r2, #10
 8102b7c:	701a      	strb	r2, [r3, #0]

    // "checksum"
    preparedPayload[4] = 0x00;
 8102b7e:	68bb      	ldr	r3, [r7, #8]
 8102b80:	3304      	adds	r3, #4
 8102b82:	2200      	movs	r2, #0
 8102b84:	701a      	strb	r2, [r3, #0]
    preparedPayload[5] = 0x01;
 8102b86:	68bb      	ldr	r3, [r7, #8]
 8102b88:	3305      	adds	r3, #5
 8102b8a:	2201      	movs	r2, #1
 8102b8c:	701a      	strb	r2, [r3, #0]

    // addresses
    preparedPayload[6] = DIAGNOSTIC_TOOL_INTERNAL_ADDR;
 8102b8e:	68bb      	ldr	r3, [r7, #8]
 8102b90:	3306      	adds	r3, #6
 8102b92:	22f4      	movs	r2, #244	@ 0xf4
 8102b94:	701a      	strb	r2, [r3, #0]
    preparedPayload[7] = static_cast<uint8_t>(targetEcuAddr);
 8102b96:	68bb      	ldr	r3, [r7, #8]
 8102b98:	3307      	adds	r3, #7
 8102b9a:	79fa      	ldrb	r2, [r7, #7]
 8102b9c:	701a      	strb	r2, [r3, #0]

    // SID
    preparedPayload[8] = static_cast<uint8_t>(EUDSRequestSID::DYNAMICALLY_DEFINE_DATA_IDENTIFIER);
 8102b9e:	68bb      	ldr	r3, [r7, #8]
 8102ba0:	3308      	adds	r3, #8
 8102ba2:	222c      	movs	r2, #44	@ 0x2c
 8102ba4:	701a      	strb	r2, [r3, #0]
    // sub SID
    preparedPayload[9] = 0x01;
 8102ba6:	68bb      	ldr	r3, [r7, #8]
 8102ba8:	3309      	adds	r3, #9
 8102baa:	2201      	movs	r2, #1
 8102bac:	701a      	strb	r2, [r3, #0]

    // DID
    preparedPayload[10] = static_cast<uint8_t>((static_cast<uint16_t>(EUDSDID::DYNAMICALLY_DEFINED_DATA_IDENTIFIER_0) & 0xFF00) >> 8);
 8102bae:	68bb      	ldr	r3, [r7, #8]
 8102bb0:	330a      	adds	r3, #10
 8102bb2:	22f3      	movs	r2, #243	@ 0xf3
 8102bb4:	701a      	strb	r2, [r3, #0]
    preparedPayload[11] = static_cast<uint8_t>(static_cast<uint16_t>(EUDSDID::DYNAMICALLY_DEFINED_DATA_IDENTIFIER_0) & 0x00FF);
 8102bb6:	68bb      	ldr	r3, [r7, #8]
 8102bb8:	330b      	adds	r3, #11
 8102bba:	2200      	movs	r2, #0
 8102bbc:	701a      	strb	r2, [r3, #0]

    // Dynamic data identifier request code
    preparedPayload[12] = static_cast<uint8_t>((static_cast<uint32_t>(ddirCode) & 0xFF000000) >> 24);
 8102bbe:	683b      	ldr	r3, [r7, #0]
 8102bc0:	0e1a      	lsrs	r2, r3, #24
 8102bc2:	68bb      	ldr	r3, [r7, #8]
 8102bc4:	330c      	adds	r3, #12
 8102bc6:	b2d2      	uxtb	r2, r2
 8102bc8:	701a      	strb	r2, [r3, #0]
    preparedPayload[13] = static_cast<uint8_t>((static_cast<uint32_t>(ddirCode) & 0x00FF0000) >> 16);
 8102bca:	683b      	ldr	r3, [r7, #0]
 8102bcc:	0c1a      	lsrs	r2, r3, #16
 8102bce:	68bb      	ldr	r3, [r7, #8]
 8102bd0:	330d      	adds	r3, #13
 8102bd2:	b2d2      	uxtb	r2, r2
 8102bd4:	701a      	strb	r2, [r3, #0]
    preparedPayload[14] = static_cast<uint8_t>((static_cast<uint32_t>(ddirCode) & 0x0000FF00) >> 8);
 8102bd6:	683b      	ldr	r3, [r7, #0]
 8102bd8:	0a1a      	lsrs	r2, r3, #8
 8102bda:	68bb      	ldr	r3, [r7, #8]
 8102bdc:	330e      	adds	r3, #14
 8102bde:	b2d2      	uxtb	r2, r2
 8102be0:	701a      	strb	r2, [r3, #0]
    preparedPayload[15] = static_cast<uint8_t>(static_cast<uint32_t>(ddirCode) & 0x000000FF);
 8102be2:	68bb      	ldr	r3, [r7, #8]
 8102be4:	330f      	adds	r3, #15
 8102be6:	683a      	ldr	r2, [r7, #0]
 8102be8:	b2d2      	uxtb	r2, r2
 8102bea:	701a      	strb	r2, [r3, #0]
}
 8102bec:	bf00      	nop
 8102bee:	3714      	adds	r7, #20
 8102bf0:	46bd      	mov	sp, r7
 8102bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bf6:	4770      	bx	lr

08102bf8 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8102bf8:	b480      	push	{r7}
 8102bfa:	b083      	sub	sp, #12
 8102bfc:	af00      	add	r7, sp, #0
 8102bfe:	6078      	str	r0, [r7, #4]
 8102c00:	687b      	ldr	r3, [r7, #4]
 8102c02:	461a      	mov	r2, r3
 8102c04:	2300      	movs	r3, #0
 8102c06:	6013      	str	r3, [r2, #0]
 8102c08:	6053      	str	r3, [r2, #4]
 8102c0a:	687b      	ldr	r3, [r7, #4]
 8102c0c:	2200      	movs	r2, #0
 8102c0e:	609a      	str	r2, [r3, #8]
 8102c10:	687b      	ldr	r3, [r7, #4]
 8102c12:	4618      	mov	r0, r3
 8102c14:	370c      	adds	r7, #12
 8102c16:	46bd      	mov	sp, r7
 8102c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c1c:	4770      	bx	lr
	...

08102c20 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN29EthernetConnectionManagerTask7processEvEUlS0_S1_S2_S2_E_vEEOT_>:
       */
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2774. std::function construction vs assignment
      template<typename _Functor,
	       typename _Constraints = _Requires<_Callable<_Functor>>>
	function(_Functor&& __f)
 8102c20:	b590      	push	{r4, r7, lr}
 8102c22:	b083      	sub	sp, #12
 8102c24:	af00      	add	r7, sp, #0
 8102c26:	6078      	str	r0, [r7, #4]
 8102c28:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	: _Function_base()
 8102c2a:	687b      	ldr	r3, [r7, #4]
 8102c2c:	461a      	mov	r2, r3
 8102c2e:	2300      	movs	r3, #0
 8102c30:	6013      	str	r3, [r2, #0]
 8102c32:	6053      	str	r3, [r2, #4]
 8102c34:	6093      	str	r3, [r2, #8]
 8102c36:	687b      	ldr	r3, [r7, #4]
 8102c38:	4618      	mov	r0, r3
 8102c3a:	f7ff ffdd 	bl	8102bf8 <_ZNSt14_Function_baseC1Ev>
 8102c3e:	687b      	ldr	r3, [r7, #4]
 8102c40:	2200      	movs	r2, #0
 8102c42:	60da      	str	r2, [r3, #12]
	      "std::function target must be constructible from the "
	      "constructor argument");

	  using _My_handler = _Handler<_Functor>;

	  if (_My_handler::_M_not_empty_function(__f))
 8102c44:	6838      	ldr	r0, [r7, #0]
 8102c46:	f000 f81b 	bl	8102c80 <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E21_M_not_empty_functionIS5_EEbRKT_>
 8102c4a:	4603      	mov	r3, r0
 8102c4c:	2b00      	cmp	r3, #0
 8102c4e:	d00e      	beq.n	8102c6e <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN29EthernetConnectionManagerTask7processEvEUlS0_S1_S2_S2_E_vEEOT_+0x4e>
	    {
	      _My_handler::_M_init_functor(_M_functor,
 8102c50:	687c      	ldr	r4, [r7, #4]
 8102c52:	6838      	ldr	r0, [r7, #0]
 8102c54:	f000 f81f 	bl	8102c96 <_ZSt7forwardIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 8102c58:	4603      	mov	r3, r0
 8102c5a:	4619      	mov	r1, r3
 8102c5c:	4620      	mov	r0, r4
 8102c5e:	f000 f825 	bl	8102cac <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIS5_EEvRSt9_Any_dataOT_>
					   std::forward<_Functor>(__f));
	      _M_invoker = &_My_handler::_M_invoke;
 8102c62:	687b      	ldr	r3, [r7, #4]
 8102c64:	4a04      	ldr	r2, [pc, #16]	@ (8102c78 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN29EthernetConnectionManagerTask7processEvEUlS0_S1_S2_S2_E_vEEOT_+0x58>)
 8102c66:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8102c68:	687b      	ldr	r3, [r7, #4]
 8102c6a:	4a04      	ldr	r2, [pc, #16]	@ (8102c7c <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN29EthernetConnectionManagerTask7processEvEUlS0_S1_S2_S2_E_vEEOT_+0x5c>)
 8102c6c:	609a      	str	r2, [r3, #8]
	    }
	}
 8102c6e:	687b      	ldr	r3, [r7, #4]
 8102c70:	4618      	mov	r0, r3
 8102c72:	370c      	adds	r7, #12
 8102c74:	46bd      	mov	sp, r7
 8102c76:	bd90      	pop	{r4, r7, pc}
 8102c78:	08102cd1 	.word	0x08102cd1
 8102c7c:	08102d21 	.word	0x08102d21

08102c80 <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E21_M_not_empty_functionIS5_EEbRKT_>:
	  _M_not_empty_function(const _Tp&) noexcept
 8102c80:	b480      	push	{r7}
 8102c82:	b083      	sub	sp, #12
 8102c84:	af00      	add	r7, sp, #0
 8102c86:	6078      	str	r0, [r7, #4]
	  { return true; }
 8102c88:	2301      	movs	r3, #1
 8102c8a:	4618      	mov	r0, r3
 8102c8c:	370c      	adds	r7, #12
 8102c8e:	46bd      	mov	sp, r7
 8102c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c94:	4770      	bx	lr

08102c96 <_ZSt7forwardIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102c96:	b480      	push	{r7}
 8102c98:	b083      	sub	sp, #12
 8102c9a:	af00      	add	r7, sp, #0
 8102c9c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102c9e:	687b      	ldr	r3, [r7, #4]
 8102ca0:	4618      	mov	r0, r3
 8102ca2:	370c      	adds	r7, #12
 8102ca4:	46bd      	mov	sp, r7
 8102ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102caa:	4770      	bx	lr

08102cac <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIS5_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8102cac:	b590      	push	{r4, r7, lr}
 8102cae:	b083      	sub	sp, #12
 8102cb0:	af00      	add	r7, sp, #0
 8102cb2:	6078      	str	r0, [r7, #4]
 8102cb4:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8102cb6:	6838      	ldr	r0, [r7, #0]
 8102cb8:	f7ff ffed 	bl	8102c96 <_ZSt7forwardIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 8102cbc:	4603      	mov	r3, r0
 8102cbe:	4622      	mov	r2, r4
 8102cc0:	4619      	mov	r1, r3
 8102cc2:	6878      	ldr	r0, [r7, #4]
 8102cc4:	f000 f84b 	bl	8102d5e <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8102cc8:	bf00      	nop
 8102cca:	370c      	adds	r7, #12
 8102ccc:	46bd      	mov	sp, r7
 8102cce:	bd90      	pop	{r4, r7, pc}

08102cd0 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN29EthernetConnectionManagerTask7processEvEUlS0_S1_S2_S2_E_E9_M_invokeERKSt9_Any_dataOS0_OS1_OS2_SC_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8102cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8102cd4:	b086      	sub	sp, #24
 8102cd6:	af02      	add	r7, sp, #8
 8102cd8:	60f8      	str	r0, [r7, #12]
 8102cda:	60b9      	str	r1, [r7, #8]
 8102cdc:	607a      	str	r2, [r7, #4]
 8102cde:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8102ce0:	68f8      	ldr	r0, [r7, #12]
 8102ce2:	f000 f855 	bl	8102d90 <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 8102ce6:	4604      	mov	r4, r0
 8102ce8:	68b8      	ldr	r0, [r7, #8]
 8102cea:	f000 f862 	bl	8102db2 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8102cee:	4605      	mov	r5, r0
 8102cf0:	6878      	ldr	r0, [r7, #4]
 8102cf2:	f000 f869 	bl	8102dc8 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8102cf6:	4606      	mov	r6, r0
 8102cf8:	6838      	ldr	r0, [r7, #0]
 8102cfa:	f000 f870 	bl	8102dde <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8102cfe:	4680      	mov	r8, r0
 8102d00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8102d02:	f000 f86c 	bl	8102dde <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8102d06:	4603      	mov	r3, r0
 8102d08:	9300      	str	r3, [sp, #0]
 8102d0a:	4643      	mov	r3, r8
 8102d0c:	4632      	mov	r2, r6
 8102d0e:	4629      	mov	r1, r5
 8102d10:	4620      	mov	r0, r4
 8102d12:	f000 f86f 	bl	8102df4 <_ZSt10__invoke_rIvRZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>
				     std::forward<_ArgTypes>(__args)...);
 8102d16:	bf00      	nop
      }
 8102d18:	3710      	adds	r7, #16
 8102d1a:	46bd      	mov	sp, r7
 8102d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08102d20 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN29EthernetConnectionManagerTask7processEvEUlS0_S1_S2_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8102d20:	b590      	push	{r4, r7, lr}
 8102d22:	b085      	sub	sp, #20
 8102d24:	af00      	add	r7, sp, #0
 8102d26:	60f8      	str	r0, [r7, #12]
 8102d28:	60b9      	str	r1, [r7, #8]
 8102d2a:	4613      	mov	r3, r2
 8102d2c:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8102d2e:	79fb      	ldrb	r3, [r7, #7]
 8102d30:	2b01      	cmp	r3, #1
 8102d32:	d109      	bne.n	8102d48 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN29EthernetConnectionManagerTask7processEvEUlS0_S1_S2_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8102d34:	68f8      	ldr	r0, [r7, #12]
 8102d36:	f000 f886 	bl	8102e46 <_ZNSt9_Any_data9_M_accessIPZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>
 8102d3a:	4604      	mov	r4, r0
 8102d3c:	68b8      	ldr	r0, [r7, #8]
 8102d3e:	f000 f827 	bl	8102d90 <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 8102d42:	4603      	mov	r3, r0
 8102d44:	6023      	str	r3, [r4, #0]
	    break;
 8102d46:	e005      	b.n	8102d54 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN29EthernetConnectionManagerTask7processEvEUlS0_S1_S2_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8102d48:	79fb      	ldrb	r3, [r7, #7]
 8102d4a:	461a      	mov	r2, r3
 8102d4c:	68b9      	ldr	r1, [r7, #8]
 8102d4e:	68f8      	ldr	r0, [r7, #12]
 8102d50:	f000 f886 	bl	8102e60 <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>
	return false;
 8102d54:	2300      	movs	r3, #0
      }
 8102d56:	4618      	mov	r0, r3
 8102d58:	3714      	adds	r7, #20
 8102d5a:	46bd      	mov	sp, r7
 8102d5c:	bd90      	pop	{r4, r7, pc}

08102d5e <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8102d5e:	b590      	push	{r4, r7, lr}
 8102d60:	b085      	sub	sp, #20
 8102d62:	af00      	add	r7, sp, #0
 8102d64:	60f8      	str	r0, [r7, #12]
 8102d66:	60b9      	str	r1, [r7, #8]
 8102d68:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8102d6a:	68f8      	ldr	r0, [r7, #12]
 8102d6c:	f7fe fae6 	bl	810133c <_ZNSt9_Any_data9_M_accessEv>
 8102d70:	4603      	mov	r3, r0
 8102d72:	4619      	mov	r1, r3
 8102d74:	2004      	movs	r0, #4
 8102d76:	f7fe fad5 	bl	8101324 <_ZnwjPv>
 8102d7a:	4604      	mov	r4, r0
 8102d7c:	68b8      	ldr	r0, [r7, #8]
 8102d7e:	f7ff ff8a 	bl	8102c96 <_ZSt7forwardIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 8102d82:	4603      	mov	r3, r0
 8102d84:	681b      	ldr	r3, [r3, #0]
 8102d86:	6023      	str	r3, [r4, #0]
	  }
 8102d88:	bf00      	nop
 8102d8a:	3714      	adds	r7, #20
 8102d8c:	46bd      	mov	sp, r7
 8102d8e:	bd90      	pop	{r4, r7, pc}

08102d90 <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 8102d90:	b580      	push	{r7, lr}
 8102d92:	b084      	sub	sp, #16
 8102d94:	af00      	add	r7, sp, #0
 8102d96:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8102d98:	6878      	ldr	r0, [r7, #4]
 8102d9a:	f000 f89b 	bl	8102ed4 <_ZNKSt9_Any_data9_M_accessIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERKT_v>
 8102d9e:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8102da0:	68f8      	ldr	r0, [r7, #12]
 8102da2:	f000 f8a3 	bl	8102eec <_ZSt11__addressofIKZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EPT_RS6_>
 8102da6:	4603      	mov	r3, r0
 8102da8:	bf00      	nop
	}
 8102daa:	4618      	mov	r0, r3
 8102dac:	3710      	adds	r7, #16
 8102dae:	46bd      	mov	sp, r7
 8102db0:	bd80      	pop	{r7, pc}

08102db2 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102db2:	b480      	push	{r7}
 8102db4:	b083      	sub	sp, #12
 8102db6:	af00      	add	r7, sp, #0
 8102db8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102dba:	687b      	ldr	r3, [r7, #4]
 8102dbc:	4618      	mov	r0, r3
 8102dbe:	370c      	adds	r7, #12
 8102dc0:	46bd      	mov	sp, r7
 8102dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102dc6:	4770      	bx	lr

08102dc8 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102dc8:	b480      	push	{r7}
 8102dca:	b083      	sub	sp, #12
 8102dcc:	af00      	add	r7, sp, #0
 8102dce:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102dd0:	687b      	ldr	r3, [r7, #4]
 8102dd2:	4618      	mov	r0, r3
 8102dd4:	370c      	adds	r7, #12
 8102dd6:	46bd      	mov	sp, r7
 8102dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ddc:	4770      	bx	lr

08102dde <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102dde:	b480      	push	{r7}
 8102de0:	b083      	sub	sp, #12
 8102de2:	af00      	add	r7, sp, #0
 8102de4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102de6:	687b      	ldr	r3, [r7, #4]
 8102de8:	4618      	mov	r0, r3
 8102dea:	370c      	adds	r7, #12
 8102dec:	46bd      	mov	sp, r7
 8102dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102df2:	4770      	bx	lr

08102df4 <_ZSt10__invoke_rIvRZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8102df4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8102df8:	b087      	sub	sp, #28
 8102dfa:	af02      	add	r7, sp, #8
 8102dfc:	60f8      	str	r0, [r7, #12]
 8102dfe:	60b9      	str	r1, [r7, #8]
 8102e00:	607a      	str	r2, [r7, #4]
 8102e02:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8102e04:	68f8      	ldr	r0, [r7, #12]
 8102e06:	f000 f87c 	bl	8102f02 <_ZSt7forwardIRZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS6_E4typeE>
 8102e0a:	4605      	mov	r5, r0
 8102e0c:	68b8      	ldr	r0, [r7, #8]
 8102e0e:	f7ff ffd0 	bl	8102db2 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8102e12:	4606      	mov	r6, r0
 8102e14:	6878      	ldr	r0, [r7, #4]
 8102e16:	f7ff ffd7 	bl	8102dc8 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8102e1a:	4680      	mov	r8, r0
 8102e1c:	6838      	ldr	r0, [r7, #0]
 8102e1e:	f7ff ffde 	bl	8102dde <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8102e22:	4604      	mov	r4, r0
 8102e24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8102e26:	f7ff ffda 	bl	8102dde <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8102e2a:	4603      	mov	r3, r0
 8102e2c:	9301      	str	r3, [sp, #4]
 8102e2e:	9400      	str	r4, [sp, #0]
 8102e30:	4643      	mov	r3, r8
 8102e32:	4632      	mov	r2, r6
 8102e34:	4629      	mov	r1, r5
 8102e36:	4648      	mov	r0, r9
 8102e38:	f000 f86e 	bl	8102f18 <_ZSt13__invoke_implIvRZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 8102e3c:	bf00      	nop
 8102e3e:	3714      	adds	r7, #20
 8102e40:	46bd      	mov	sp, r7
 8102e42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08102e46 <_ZNSt9_Any_data9_M_accessIPZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>:
      _M_access() noexcept
 8102e46:	b580      	push	{r7, lr}
 8102e48:	b082      	sub	sp, #8
 8102e4a:	af00      	add	r7, sp, #0
 8102e4c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8102e4e:	6878      	ldr	r0, [r7, #4]
 8102e50:	f7fe fa74 	bl	810133c <_ZNSt9_Any_data9_M_accessEv>
 8102e54:	4603      	mov	r3, r0
 8102e56:	4618      	mov	r0, r3
 8102e58:	3708      	adds	r7, #8
 8102e5a:	46bd      	mov	sp, r7
 8102e5c:	bd80      	pop	{r7, pc}
	...

08102e60 <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8102e60:	b590      	push	{r4, r7, lr}
 8102e62:	b085      	sub	sp, #20
 8102e64:	af00      	add	r7, sp, #0
 8102e66:	60f8      	str	r0, [r7, #12]
 8102e68:	60b9      	str	r1, [r7, #8]
 8102e6a:	4613      	mov	r3, r2
 8102e6c:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8102e6e:	79fb      	ldrb	r3, [r7, #7]
 8102e70:	2b03      	cmp	r3, #3
 8102e72:	d82a      	bhi.n	8102eca <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
 8102e74:	a201      	add	r2, pc, #4	@ (adr r2, 8102e7c <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x1c>)
 8102e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102e7a:	bf00      	nop
 8102e7c:	08102e8d 	.word	0x08102e8d
 8102e80:	08102e9b 	.word	0x08102e9b
 8102e84:	08102eaf 	.word	0x08102eaf
 8102e88:	08102ec1 	.word	0x08102ec1
	      __dest._M_access<const type_info*>() = nullptr;
 8102e8c:	68f8      	ldr	r0, [r7, #12]
 8102e8e:	f000 f876 	bl	8102f7e <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8102e92:	4603      	mov	r3, r0
 8102e94:	2200      	movs	r2, #0
 8102e96:	601a      	str	r2, [r3, #0]
	      break;
 8102e98:	e017      	b.n	8102eca <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8102e9a:	68f8      	ldr	r0, [r7, #12]
 8102e9c:	f7ff ffd3 	bl	8102e46 <_ZNSt9_Any_data9_M_accessIPZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>
 8102ea0:	4604      	mov	r4, r0
 8102ea2:	68b8      	ldr	r0, [r7, #8]
 8102ea4:	f7ff ff74 	bl	8102d90 <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 8102ea8:	4603      	mov	r3, r0
 8102eaa:	6023      	str	r3, [r4, #0]
	      break;
 8102eac:	e00d      	b.n	8102eca <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8102eae:	68b8      	ldr	r0, [r7, #8]
 8102eb0:	f7ff ff6e 	bl	8102d90 <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 8102eb4:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8102eb6:	4619      	mov	r1, r3
 8102eb8:	68f8      	ldr	r0, [r7, #12]
 8102eba:	f000 f86c 	bl	8102f96 <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIRKS5_EEvRSt9_Any_dataOT_>
	      break;
 8102ebe:	e004      	b.n	8102eca <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8102ec0:	4621      	mov	r1, r4
 8102ec2:	68f8      	ldr	r0, [r7, #12]
 8102ec4:	f000 f879 	bl	8102fba <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8102ec8:	bf00      	nop
	  return false;
 8102eca:	2300      	movs	r3, #0
	}
 8102ecc:	4618      	mov	r0, r3
 8102ece:	3714      	adds	r7, #20
 8102ed0:	46bd      	mov	sp, r7
 8102ed2:	bd90      	pop	{r4, r7, pc}

08102ed4 <_ZNKSt9_Any_data9_M_accessIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERKT_v>:
      _M_access() const noexcept
 8102ed4:	b580      	push	{r7, lr}
 8102ed6:	b082      	sub	sp, #8
 8102ed8:	af00      	add	r7, sp, #0
 8102eda:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8102edc:	6878      	ldr	r0, [r7, #4]
 8102ede:	f7fe fa38 	bl	8101352 <_ZNKSt9_Any_data9_M_accessEv>
 8102ee2:	4603      	mov	r3, r0
 8102ee4:	4618      	mov	r0, r3
 8102ee6:	3708      	adds	r7, #8
 8102ee8:	46bd      	mov	sp, r7
 8102eea:	bd80      	pop	{r7, pc}

08102eec <_ZSt11__addressofIKZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8102eec:	b480      	push	{r7}
 8102eee:	b083      	sub	sp, #12
 8102ef0:	af00      	add	r7, sp, #0
 8102ef2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8102ef4:	687b      	ldr	r3, [r7, #4]
 8102ef6:	4618      	mov	r0, r3
 8102ef8:	370c      	adds	r7, #12
 8102efa:	46bd      	mov	sp, r7
 8102efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f00:	4770      	bx	lr

08102f02 <_ZSt7forwardIRZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102f02:	b480      	push	{r7}
 8102f04:	b083      	sub	sp, #12
 8102f06:	af00      	add	r7, sp, #0
 8102f08:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102f0a:	687b      	ldr	r3, [r7, #4]
 8102f0c:	4618      	mov	r0, r3
 8102f0e:	370c      	adds	r7, #12
 8102f10:	46bd      	mov	sp, r7
 8102f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f16:	4770      	bx	lr

08102f18 <_ZSt13__invoke_implIvRZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8102f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8102f1c:	b08a      	sub	sp, #40	@ 0x28
 8102f1e:	af06      	add	r7, sp, #24
 8102f20:	7338      	strb	r0, [r7, #12]
 8102f22:	60b9      	str	r1, [r7, #8]
 8102f24:	607a      	str	r2, [r7, #4]
 8102f26:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8102f28:	68b8      	ldr	r0, [r7, #8]
 8102f2a:	f7ff ffea 	bl	8102f02 <_ZSt7forwardIRZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS6_E4typeE>
 8102f2e:	4680      	mov	r8, r0
 8102f30:	6878      	ldr	r0, [r7, #4]
 8102f32:	f7ff ff3e 	bl	8102db2 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8102f36:	4603      	mov	r3, r0
 8102f38:	781e      	ldrb	r6, [r3, #0]
 8102f3a:	6838      	ldr	r0, [r7, #0]
 8102f3c:	f7ff ff44 	bl	8102dc8 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8102f40:	4604      	mov	r4, r0
 8102f42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8102f44:	f7ff ff4b 	bl	8102dde <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8102f48:	4603      	mov	r3, r0
 8102f4a:	781d      	ldrb	r5, [r3, #0]
 8102f4c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8102f4e:	f7ff ff46 	bl	8102dde <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8102f52:	4603      	mov	r3, r0
 8102f54:	781b      	ldrb	r3, [r3, #0]
 8102f56:	9304      	str	r3, [sp, #16]
 8102f58:	9503      	str	r5, [sp, #12]
 8102f5a:	466d      	mov	r5, sp
 8102f5c:	f104 0308 	add.w	r3, r4, #8
 8102f60:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8102f64:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8102f68:	e894 000c 	ldmia.w	r4, {r2, r3}
 8102f6c:	4631      	mov	r1, r6
 8102f6e:	4640      	mov	r0, r8
 8102f70:	f7fe fc04 	bl	810177c <_ZZN29EthernetConnectionManagerTask7processEvENKUl10EEventType12UMessageData12EEventClientS2_E_clES0_S1_S2_S2_>
 8102f74:	bf00      	nop
 8102f76:	3710      	adds	r7, #16
 8102f78:	46bd      	mov	sp, r7
 8102f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08102f7e <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access() noexcept
 8102f7e:	b580      	push	{r7, lr}
 8102f80:	b082      	sub	sp, #8
 8102f82:	af00      	add	r7, sp, #0
 8102f84:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8102f86:	6878      	ldr	r0, [r7, #4]
 8102f88:	f7fe f9d8 	bl	810133c <_ZNSt9_Any_data9_M_accessEv>
 8102f8c:	4603      	mov	r3, r0
 8102f8e:	4618      	mov	r0, r3
 8102f90:	3708      	adds	r7, #8
 8102f92:	46bd      	mov	sp, r7
 8102f94:	bd80      	pop	{r7, pc}

08102f96 <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIRKS5_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8102f96:	b590      	push	{r4, r7, lr}
 8102f98:	b083      	sub	sp, #12
 8102f9a:	af00      	add	r7, sp, #0
 8102f9c:	6078      	str	r0, [r7, #4]
 8102f9e:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8102fa0:	6838      	ldr	r0, [r7, #0]
 8102fa2:	f000 f816 	bl	8102fd2 <_ZSt7forwardIRKZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS7_E4typeE>
 8102fa6:	4603      	mov	r3, r0
 8102fa8:	4622      	mov	r2, r4
 8102faa:	4619      	mov	r1, r3
 8102fac:	6878      	ldr	r0, [r7, #4]
 8102fae:	f000 f81b 	bl	8102fe8 <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIRKS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8102fb2:	bf00      	nop
 8102fb4:	370c      	adds	r7, #12
 8102fb6:	46bd      	mov	sp, r7
 8102fb8:	bd90      	pop	{r4, r7, pc}

08102fba <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8102fba:	b580      	push	{r7, lr}
 8102fbc:	b082      	sub	sp, #8
 8102fbe:	af00      	add	r7, sp, #0
 8102fc0:	6078      	str	r0, [r7, #4]
 8102fc2:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8102fc4:	6878      	ldr	r0, [r7, #4]
 8102fc6:	f000 f828 	bl	810301a <_ZNSt9_Any_data9_M_accessIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>
	}
 8102fca:	bf00      	nop
 8102fcc:	3708      	adds	r7, #8
 8102fce:	46bd      	mov	sp, r7
 8102fd0:	bd80      	pop	{r7, pc}

08102fd2 <_ZSt7forwardIRKZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102fd2:	b480      	push	{r7}
 8102fd4:	b083      	sub	sp, #12
 8102fd6:	af00      	add	r7, sp, #0
 8102fd8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102fda:	687b      	ldr	r3, [r7, #4]
 8102fdc:	4618      	mov	r0, r3
 8102fde:	370c      	adds	r7, #12
 8102fe0:	46bd      	mov	sp, r7
 8102fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fe6:	4770      	bx	lr

08102fe8 <_ZNSt14_Function_base13_Base_managerIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIRKS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8102fe8:	b590      	push	{r4, r7, lr}
 8102fea:	b085      	sub	sp, #20
 8102fec:	af00      	add	r7, sp, #0
 8102fee:	60f8      	str	r0, [r7, #12]
 8102ff0:	60b9      	str	r1, [r7, #8]
 8102ff2:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8102ff4:	68f8      	ldr	r0, [r7, #12]
 8102ff6:	f7fe f9a1 	bl	810133c <_ZNSt9_Any_data9_M_accessEv>
 8102ffa:	4603      	mov	r3, r0
 8102ffc:	4619      	mov	r1, r3
 8102ffe:	2004      	movs	r0, #4
 8103000:	f7fe f990 	bl	8101324 <_ZnwjPv>
 8103004:	4604      	mov	r4, r0
 8103006:	68b8      	ldr	r0, [r7, #8]
 8103008:	f7ff ffe3 	bl	8102fd2 <_ZSt7forwardIRKZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS7_E4typeE>
 810300c:	4603      	mov	r3, r0
 810300e:	681b      	ldr	r3, [r3, #0]
 8103010:	6023      	str	r3, [r4, #0]
	  }
 8103012:	bf00      	nop
 8103014:	3714      	adds	r7, #20
 8103016:	46bd      	mov	sp, r7
 8103018:	bd90      	pop	{r4, r7, pc}

0810301a <_ZNSt9_Any_data9_M_accessIZN29EthernetConnectionManagerTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>:
      _M_access() noexcept
 810301a:	b580      	push	{r7, lr}
 810301c:	b082      	sub	sp, #8
 810301e:	af00      	add	r7, sp, #0
 8103020:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8103022:	6878      	ldr	r0, [r7, #4]
 8103024:	f7fe f98a 	bl	810133c <_ZNSt9_Any_data9_M_accessEv>
 8103028:	4603      	mov	r3, r0
 810302a:	4618      	mov	r0, r3
 810302c:	3708      	adds	r7, #8
 810302e:	46bd      	mov	sp, r7
 8103030:	bd80      	pop	{r7, pc}

08103032 <_ZNKSt14_Function_base8_M_emptyEv>:
    bool _M_empty() const { return !_M_manager; }
 8103032:	b480      	push	{r7}
 8103034:	b083      	sub	sp, #12
 8103036:	af00      	add	r7, sp, #0
 8103038:	6078      	str	r0, [r7, #4]
 810303a:	687b      	ldr	r3, [r7, #4]
 810303c:	689b      	ldr	r3, [r3, #8]
 810303e:	2b00      	cmp	r3, #0
 8103040:	bf0c      	ite	eq
 8103042:	2301      	moveq	r3, #1
 8103044:	2300      	movne	r3, #0
 8103046:	b2db      	uxtb	r3, r3
 8103048:	4618      	mov	r0, r3
 810304a:	370c      	adds	r7, #12
 810304c:	46bd      	mov	sp, r7
 810304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103052:	4770      	bx	lr

08103054 <_ZN8EventBusC1EP15QueueDefinition12EEventClient>:
#include "EventBus.h"

extern QueueHandle_t queueToEventManagerCM4;

EventBus::EventBus(QueueHandle_t queueSelf, EEventClient senderSelf)
 8103054:	b480      	push	{r7}
 8103056:	b085      	sub	sp, #20
 8103058:	af00      	add	r7, sp, #0
 810305a:	60f8      	str	r0, [r7, #12]
 810305c:	60b9      	str	r1, [r7, #8]
 810305e:	4613      	mov	r3, r2
 8103060:	71fb      	strb	r3, [r7, #7]
					 : queue_self(queueSelf),
 8103062:	68fb      	ldr	r3, [r7, #12]
 8103064:	68ba      	ldr	r2, [r7, #8]
 8103066:	601a      	str	r2, [r3, #0]
					   sender_self(senderSelf),
 8103068:	68fb      	ldr	r3, [r7, #12]
 810306a:	79fa      	ldrb	r2, [r7, #7]
 810306c:	711a      	strb	r2, [r3, #4]
					   queue_event_manager(queueToEventManagerCM4){}
 810306e:	4b05      	ldr	r3, [pc, #20]	@ (8103084 <_ZN8EventBusC1EP15QueueDefinition12EEventClient+0x30>)
 8103070:	681a      	ldr	r2, [r3, #0]
 8103072:	68fb      	ldr	r3, [r7, #12]
 8103074:	609a      	str	r2, [r3, #8]
 8103076:	68fb      	ldr	r3, [r7, #12]
 8103078:	4618      	mov	r0, r3
 810307a:	3714      	adds	r7, #20
 810307c:	46bd      	mov	sp, r7
 810307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103082:	4770      	bx	lr
 8103084:	100001b0 	.word	0x100001b0

08103088 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient>:

bool EventBus::send(EEventType event, UMessageData message, EEventClient eventReceiver)
{
 8103088:	b082      	sub	sp, #8
 810308a:	b5b0      	push	{r4, r5, r7, lr}
 810308c:	b08a      	sub	sp, #40	@ 0x28
 810308e:	af00      	add	r7, sp, #0
 8103090:	6078      	str	r0, [r7, #4]
 8103092:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8103096:	e880 000c 	stmia.w	r0, {r2, r3}
 810309a:	460b      	mov	r3, r1
 810309c:	70fb      	strb	r3, [r7, #3]
	if(queue_event_manager)
 810309e:	687b      	ldr	r3, [r7, #4]
 81030a0:	689b      	ldr	r3, [r3, #8]
 81030a2:	2b00      	cmp	r3, #0
 81030a4:	d021      	beq.n	81030ea <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient+0x62>
	{
		SMessage msg = {event, message, sender_self, eventReceiver};
 81030a6:	78fb      	ldrb	r3, [r7, #3]
 81030a8:	723b      	strb	r3, [r7, #8]
 81030aa:	f107 040c 	add.w	r4, r7, #12
 81030ae:	f107 0538 	add.w	r5, r7, #56	@ 0x38
 81030b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81030b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81030b6:	682b      	ldr	r3, [r5, #0]
 81030b8:	6023      	str	r3, [r4, #0]
 81030ba:	687b      	ldr	r3, [r7, #4]
 81030bc:	791b      	ldrb	r3, [r3, #4]
 81030be:	f887 3020 	strb.w	r3, [r7, #32]
 81030c2:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 81030c6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
		BaseType_t ret = xQueueSend(queue_event_manager, static_cast<void*>(&msg), static_cast<TickType_t>(10));
 81030ca:	687b      	ldr	r3, [r7, #4]
 81030cc:	6898      	ldr	r0, [r3, #8]
 81030ce:	f107 0108 	add.w	r1, r7, #8
 81030d2:	2300      	movs	r3, #0
 81030d4:	220a      	movs	r2, #10
 81030d6:	f00e f8c5 	bl	8111264 <xQueueGenericSend>
 81030da:	6278      	str	r0, [r7, #36]	@ 0x24
		if( ret != pdPASS)
 81030dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81030de:	2b01      	cmp	r3, #1
 81030e0:	d001      	beq.n	81030e6 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient+0x5e>
		{
			return false;
 81030e2:	2300      	movs	r3, #0
 81030e4:	e002      	b.n	81030ec <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient+0x64>
		}
		return true;
 81030e6:	2301      	movs	r3, #1
 81030e8:	e000      	b.n	81030ec <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient+0x64>
	}
	return false;
 81030ea:	2300      	movs	r3, #0
}
 81030ec:	4618      	mov	r0, r3
 81030ee:	3728      	adds	r7, #40	@ 0x28
 81030f0:	46bd      	mov	sp, r7
 81030f2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 81030f6:	b002      	add	sp, #8
 81030f8:	4770      	bx	lr

081030fa <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE>:

void EventBus::receive(OnEventFunction on_event_function)
{
 81030fa:	b5b0      	push	{r4, r5, r7, lr}
 81030fc:	b090      	sub	sp, #64	@ 0x40
 81030fe:	af06      	add	r7, sp, #24
 8103100:	6078      	str	r0, [r7, #4]
 8103102:	6039      	str	r1, [r7, #0]
	if(queue_self)
 8103104:	687b      	ldr	r3, [r7, #4]
 8103106:	681b      	ldr	r3, [r3, #0]
 8103108:	2b00      	cmp	r3, #0
 810310a:	d027      	beq.n	810315c <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE+0x62>
	{
		SMessage msg;
		BaseType_t ret = pdTRUE;
 810310c:	2301      	movs	r3, #1
 810310e:	627b      	str	r3, [r7, #36]	@ 0x24

		while(xQueueReceive(queue_self, &(msg), static_cast<TickType_t>(0)) == pdTRUE)
 8103110:	e014      	b.n	810313c <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE+0x42>
		{
			on_event_function(msg.event_type, msg.message_data, msg.event_sender, msg.event_receiver);
 8103112:	7a3d      	ldrb	r5, [r7, #8]
 8103114:	f897 3020 	ldrb.w	r3, [r7, #32]
 8103118:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 810311c:	9204      	str	r2, [sp, #16]
 810311e:	9303      	str	r3, [sp, #12]
 8103120:	466c      	mov	r4, sp
 8103122:	f107 0314 	add.w	r3, r7, #20
 8103126:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 810312a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 810312e:	f107 030c 	add.w	r3, r7, #12
 8103132:	cb0c      	ldmia	r3, {r2, r3}
 8103134:	4629      	mov	r1, r5
 8103136:	6838      	ldr	r0, [r7, #0]
 8103138:	f000 f814 	bl	8103164 <_ZNKSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEclES0_S1_S2_S2_>
		while(xQueueReceive(queue_self, &(msg), static_cast<TickType_t>(0)) == pdTRUE)
 810313c:	687b      	ldr	r3, [r7, #4]
 810313e:	681b      	ldr	r3, [r3, #0]
 8103140:	f107 0108 	add.w	r1, r7, #8
 8103144:	2200      	movs	r2, #0
 8103146:	4618      	mov	r0, r3
 8103148:	f00e fabc 	bl	81116c4 <xQueueReceive>
 810314c:	4603      	mov	r3, r0
 810314e:	2b01      	cmp	r3, #1
 8103150:	bf0c      	ite	eq
 8103152:	2301      	moveq	r3, #1
 8103154:	2300      	movne	r3, #0
 8103156:	b2db      	uxtb	r3, r3
 8103158:	2b00      	cmp	r3, #0
 810315a:	d1da      	bne.n	8103112 <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE+0x18>
		}
	}
}
 810315c:	bf00      	nop
 810315e:	3728      	adds	r7, #40	@ 0x28
 8103160:	46bd      	mov	sp, r7
 8103162:	bdb0      	pop	{r4, r5, r7, pc}

08103164 <_ZNKSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEclES0_S1_S2_S2_>:
       *
       *  The function call operator invokes the target function object
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8103164:	b082      	sub	sp, #8
 8103166:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810316a:	b085      	sub	sp, #20
 810316c:	af02      	add	r7, sp, #8
 810316e:	6078      	str	r0, [r7, #4]
 8103170:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8103174:	e880 000c 	stmia.w	r0, {r2, r3}
 8103178:	460b      	mov	r3, r1
 810317a:	70fb      	strb	r3, [r7, #3]
      {
	if (_M_empty())
 810317c:	687b      	ldr	r3, [r7, #4]
 810317e:	4618      	mov	r0, r3
 8103180:	f7ff ff57 	bl	8103032 <_ZNKSt14_Function_base8_M_emptyEv>
 8103184:	4603      	mov	r3, r0
 8103186:	2b00      	cmp	r3, #0
 8103188:	d001      	beq.n	810318e <_ZNKSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEclES0_S1_S2_S2_+0x2a>
	  __throw_bad_function_call();
 810318a:	f01e fa03 	bl	8121594 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 810318e:	687b      	ldr	r3, [r7, #4]
 8103190:	68dc      	ldr	r4, [r3, #12]
 8103192:	687d      	ldr	r5, [r7, #4]
 8103194:	1cfb      	adds	r3, r7, #3
 8103196:	4618      	mov	r0, r3
 8103198:	f7ff fe0b 	bl	8102db2 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 810319c:	4606      	mov	r6, r0
 810319e:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 81031a2:	f7ff fe11 	bl	8102dc8 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 81031a6:	4680      	mov	r8, r0
 81031a8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 81031ac:	4618      	mov	r0, r3
 81031ae:	f7ff fe16 	bl	8102dde <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 81031b2:	4681      	mov	r9, r0
 81031b4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 81031b8:	4618      	mov	r0, r3
 81031ba:	f7ff fe10 	bl	8102dde <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 81031be:	4603      	mov	r3, r0
 81031c0:	9300      	str	r3, [sp, #0]
 81031c2:	464b      	mov	r3, r9
 81031c4:	4642      	mov	r2, r8
 81031c6:	4631      	mov	r1, r6
 81031c8:	4628      	mov	r0, r5
 81031ca:	47a0      	blx	r4
 81031cc:	bf00      	nop
      }
 81031ce:	370c      	adds	r7, #12
 81031d0:	46bd      	mov	sp, r7
 81031d2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 81031d6:	b002      	add	sp, #8
 81031d8:	4770      	bx	lr

081031da <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 81031da:	b580      	push	{r7, lr}
 81031dc:	b082      	sub	sp, #8
 81031de:	af00      	add	r7, sp, #0
 81031e0:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 81031e2:	687b      	ldr	r3, [r7, #4]
 81031e4:	2200      	movs	r2, #0
 81031e6:	701a      	strb	r2, [r3, #0]
      _M_reset();
 81031e8:	6878      	ldr	r0, [r7, #4]
 81031ea:	f000 f805 	bl	81031f8 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 81031ee:	687b      	ldr	r3, [r7, #4]
 81031f0:	4618      	mov	r0, r3
 81031f2:	3708      	adds	r7, #8
 81031f4:	46bd      	mov	sp, r7
 81031f6:	bd80      	pop	{r7, pc}

081031f8 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 81031f8:	b480      	push	{r7}
 81031fa:	b083      	sub	sp, #12
 81031fc:	af00      	add	r7, sp, #0
 81031fe:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 8103200:	687b      	ldr	r3, [r7, #4]
 8103202:	2200      	movs	r2, #0
 8103204:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 8103206:	687a      	ldr	r2, [r7, #4]
 8103208:	687b      	ldr	r3, [r7, #4]
 810320a:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 810320c:	687a      	ldr	r2, [r7, #4]
 810320e:	687b      	ldr	r3, [r7, #4]
 8103210:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8103212:	687b      	ldr	r3, [r7, #4]
 8103214:	2200      	movs	r2, #0
 8103216:	611a      	str	r2, [r3, #16]
    }
 8103218:	bf00      	nop
 810321a:	370c      	adds	r7, #12
 810321c:	46bd      	mov	sp, r7
 810321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103222:	4770      	bx	lr

08103224 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 8103224:	b580      	push	{r7, lr}
 8103226:	b082      	sub	sp, #8
 8103228:	af00      	add	r7, sp, #0
 810322a:	6078      	str	r0, [r7, #4]
 810322c:	687b      	ldr	r3, [r7, #4]
 810322e:	4618      	mov	r0, r3
 8103230:	f000 f936 	bl	81034a0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 8103234:	687b      	ldr	r3, [r7, #4]
 8103236:	4618      	mov	r0, r3
 8103238:	3708      	adds	r7, #8
 810323a:	46bd      	mov	sp, r7
 810323c:	bd80      	pop	{r7, pc}

0810323e <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 810323e:	b580      	push	{r7, lr}
 8103240:	b082      	sub	sp, #8
 8103242:	af00      	add	r7, sp, #0
 8103244:	6078      	str	r0, [r7, #4]
 8103246:	687b      	ldr	r3, [r7, #4]
 8103248:	4618      	mov	r0, r3
 810324a:	f7ff ffeb 	bl	8103224 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 810324e:	687b      	ldr	r3, [r7, #4]
 8103250:	4618      	mov	r0, r3
 8103252:	3708      	adds	r7, #8
 8103254:	46bd      	mov	sp, r7
 8103256:	bd80      	pop	{r7, pc}

08103258 <_ZN19EventManagerCM4TaskC1Ev>:
		/* event queues of clients */
		EVENT_QUEUE_DAEMON_NATIVE = EVENT_CLIENT_DAEMON_NATIVE,
		EVENT_QUEUE_ETHERNET_CONNECTION_MANAGER = EVENT_CLIENT_ETHERNET_CONNECTION_MANAGER
	};

	EventManagerCM4Task() {};
 8103258:	b580      	push	{r7, lr}
 810325a:	b082      	sub	sp, #8
 810325c:	af00      	add	r7, sp, #0
 810325e:	6078      	str	r0, [r7, #4]
 8103260:	687b      	ldr	r3, [r7, #4]
 8103262:	4618      	mov	r0, r3
 8103264:	f7ff ffeb 	bl	810323e <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 8103268:	687b      	ldr	r3, [r7, #4]
 810326a:	4618      	mov	r0, r3
 810326c:	3708      	adds	r7, #8
 810326e:	46bd      	mov	sp, r7
 8103270:	bd80      	pop	{r7, pc}
	...

08103274 <_Z20StartTask_EventMgrM4Pv>:
extern QueueHandle_t queueToEventManagerCM4;
extern QueueHandle_t queueToNativeDaemon;
extern QueueHandle_t queueToEthernetConnMgr;

void StartTask_EventMgrM4(void *argument)
{
 8103274:	b580      	push	{r7, lr}
 8103276:	b088      	sub	sp, #32
 8103278:	af00      	add	r7, sp, #0
 810327a:	6078      	str	r0, [r7, #4]
	EventManagerCM4Task eventManagerInstance;
 810327c:	f107 0308 	add.w	r3, r7, #8
 8103280:	4618      	mov	r0, r3
 8103282:	f7ff ffe9 	bl	8103258 <_ZN19EventManagerCM4TaskC1Ev>
	eventManagerInstance.addQueue(EventManagerCM4Task::EVENT_QUEUE_DAEMON_NATIVE, queueToNativeDaemon);
 8103286:	4b0d      	ldr	r3, [pc, #52]	@ (81032bc <_Z20StartTask_EventMgrM4Pv+0x48>)
 8103288:	681a      	ldr	r2, [r3, #0]
 810328a:	f107 0308 	add.w	r3, r7, #8
 810328e:	2107      	movs	r1, #7
 8103290:	4618      	mov	r0, r3
 8103292:	f000 f817 	bl	81032c4 <_ZN19EventManagerCM4Task8addQueueENS_11EEventQueueEP15QueueDefinition>
	eventManagerInstance.addQueue(EventManagerCM4Task::EVENT_QUEUE_ETHERNET_CONNECTION_MANAGER, queueToEthernetConnMgr);
 8103296:	4b0a      	ldr	r3, [pc, #40]	@ (81032c0 <_Z20StartTask_EventMgrM4Pv+0x4c>)
 8103298:	681a      	ldr	r2, [r3, #0]
 810329a:	f107 0308 	add.w	r3, r7, #8
 810329e:	2103      	movs	r1, #3
 81032a0:	4618      	mov	r0, r3
 81032a2:	f000 f80f 	bl	81032c4 <_ZN19EventManagerCM4Task8addQueueENS_11EEventQueueEP15QueueDefinition>

	for(;;)
	{
		eventManagerInstance.process();
 81032a6:	f107 0308 	add.w	r3, r7, #8
 81032aa:	4618      	mov	r0, r3
 81032ac:	f000 f81d 	bl	81032ea <_ZN19EventManagerCM4Task7processEv>
		osDelay(1);
 81032b0:	2001      	movs	r0, #1
 81032b2:	f00c fcc4 	bl	810fc3e <osDelay>
		eventManagerInstance.process();
 81032b6:	bf00      	nop
 81032b8:	e7f5      	b.n	81032a6 <_Z20StartTask_EventMgrM4Pv+0x32>
 81032ba:	bf00      	nop
 81032bc:	100001b4 	.word	0x100001b4
 81032c0:	100001b8 	.word	0x100001b8

081032c4 <_ZN19EventManagerCM4Task8addQueueENS_11EEventQueueEP15QueueDefinition>:
	}
}


void EventManagerCM4Task::addQueue(EEventQueue eventClient, QueueHandle_t queueHandle)
{
 81032c4:	b580      	push	{r7, lr}
 81032c6:	b086      	sub	sp, #24
 81032c8:	af00      	add	r7, sp, #0
 81032ca:	60f8      	str	r0, [r7, #12]
 81032cc:	460b      	mov	r3, r1
 81032ce:	607a      	str	r2, [r7, #4]
 81032d0:	72fb      	strb	r3, [r7, #11]
	queue_handles.emplace(eventClient, queueHandle);
 81032d2:	68f9      	ldr	r1, [r7, #12]
 81032d4:	f107 0010 	add.w	r0, r7, #16
 81032d8:	1d3b      	adds	r3, r7, #4
 81032da:	f107 020b 	add.w	r2, r7, #11
 81032de:	f000 f8f4 	bl	81034ca <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_>
}
 81032e2:	bf00      	nop
 81032e4:	3718      	adds	r7, #24
 81032e6:	46bd      	mov	sp, r7
 81032e8:	bd80      	pop	{r7, pc}

081032ea <_ZN19EventManagerCM4Task7processEv>:
	queue_handles.erase(eventClient);
}


void EventManagerCM4Task::process()
{
 81032ea:	b580      	push	{r7, lr}
 81032ec:	b086      	sub	sp, #24
 81032ee:	af00      	add	r7, sp, #0
 81032f0:	6078      	str	r0, [r7, #4]
	send(receive());
 81032f2:	f107 030c 	add.w	r3, r7, #12
 81032f6:	6879      	ldr	r1, [r7, #4]
 81032f8:	4618      	mov	r0, r3
 81032fa:	f000 f835 	bl	8103368 <_ZN19EventManagerCM4Task7receiveEv>
 81032fe:	f107 030c 	add.w	r3, r7, #12
 8103302:	4619      	mov	r1, r3
 8103304:	6878      	ldr	r0, [r7, #4]
 8103306:	f000 f855 	bl	81033b4 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE>
 810330a:	f107 030c 	add.w	r3, r7, #12
 810330e:	4618      	mov	r0, r3
 8103310:	f000 f8f5 	bl	81034fe <_ZNSt6vectorI8SMessageSaIS0_EED1Ev>
}
 8103314:	bf00      	nop
 8103316:	3718      	adds	r7, #24
 8103318:	46bd      	mov	sp, r7
 810331a:	bd80      	pop	{r7, pc}

0810331c <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 810331c:	b580      	push	{r7, lr}
 810331e:	b082      	sub	sp, #8
 8103320:	af00      	add	r7, sp, #0
 8103322:	6078      	str	r0, [r7, #4]
 8103324:	6878      	ldr	r0, [r7, #4]
 8103326:	f000 f915 	bl	8103554 <_ZNSaI8SMessageED1Ev>
 810332a:	687b      	ldr	r3, [r7, #4]
 810332c:	4618      	mov	r0, r3
 810332e:	3708      	adds	r7, #8
 8103330:	46bd      	mov	sp, r7
 8103332:	bd80      	pop	{r7, pc}

08103334 <_ZNSt12_Vector_baseI8SMessageSaIS0_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8103334:	b580      	push	{r7, lr}
 8103336:	b082      	sub	sp, #8
 8103338:	af00      	add	r7, sp, #0
 810333a:	6078      	str	r0, [r7, #4]
 810333c:	687b      	ldr	r3, [r7, #4]
 810333e:	4618      	mov	r0, r3
 8103340:	f000 f8f8 	bl	8103534 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implC1Ev>
 8103344:	687b      	ldr	r3, [r7, #4]
 8103346:	4618      	mov	r0, r3
 8103348:	3708      	adds	r7, #8
 810334a:	46bd      	mov	sp, r7
 810334c:	bd80      	pop	{r7, pc}

0810334e <_ZNSt6vectorI8SMessageSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 810334e:	b580      	push	{r7, lr}
 8103350:	b082      	sub	sp, #8
 8103352:	af00      	add	r7, sp, #0
 8103354:	6078      	str	r0, [r7, #4]
 8103356:	687b      	ldr	r3, [r7, #4]
 8103358:	4618      	mov	r0, r3
 810335a:	f7ff ffeb 	bl	8103334 <_ZNSt12_Vector_baseI8SMessageSaIS0_EEC1Ev>
 810335e:	687b      	ldr	r3, [r7, #4]
 8103360:	4618      	mov	r0, r3
 8103362:	3708      	adds	r7, #8
 8103364:	46bd      	mov	sp, r7
 8103366:	bd80      	pop	{r7, pc}

08103368 <_ZN19EventManagerCM4Task7receiveEv>:

std::vector<SMessage> EventManagerCM4Task::receive()
{
 8103368:	b580      	push	{r7, lr}
 810336a:	b08a      	sub	sp, #40	@ 0x28
 810336c:	af00      	add	r7, sp, #0
 810336e:	6078      	str	r0, [r7, #4]
 8103370:	6039      	str	r1, [r7, #0]
	std::vector<SMessage> receivedMessages;
 8103372:	6878      	ldr	r0, [r7, #4]
 8103374:	f7ff ffeb 	bl	810334e <_ZNSt6vectorI8SMessageSaIS0_EEC1Ev>
	SMessage msg;

	BaseType_t ret = pdTRUE;
 8103378:	2301      	movs	r3, #1
 810337a:	627b      	str	r3, [r7, #36]	@ 0x24
	do
	{
		ret = xQueueReceive(queueToEventManagerCM4, &(msg), static_cast<TickType_t>(0));
 810337c:	4b0c      	ldr	r3, [pc, #48]	@ (81033b0 <_ZN19EventManagerCM4Task7receiveEv+0x48>)
 810337e:	681b      	ldr	r3, [r3, #0]
 8103380:	f107 0108 	add.w	r1, r7, #8
 8103384:	2200      	movs	r2, #0
 8103386:	4618      	mov	r0, r3
 8103388:	f00e f99c 	bl	81116c4 <xQueueReceive>
 810338c:	6278      	str	r0, [r7, #36]	@ 0x24
		if(ret == pdTRUE)
 810338e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103390:	2b01      	cmp	r3, #1
 8103392:	d105      	bne.n	81033a0 <_ZN19EventManagerCM4Task7receiveEv+0x38>
		{
			receivedMessages.push_back(msg);
 8103394:	f107 0308 	add.w	r3, r7, #8
 8103398:	4619      	mov	r1, r3
 810339a:	6878      	ldr	r0, [r7, #4]
 810339c:	f000 f904 	bl	81035a8 <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_>
		}
	} while(ret == pdTRUE);
 81033a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81033a2:	2b01      	cmp	r3, #1
 81033a4:	d0ea      	beq.n	810337c <_ZN19EventManagerCM4Task7receiveEv+0x14>

	return receivedMessages;
 81033a6:	bf00      	nop
}
 81033a8:	6878      	ldr	r0, [r7, #4]
 81033aa:	3728      	adds	r7, #40	@ 0x28
 81033ac:	46bd      	mov	sp, r7
 81033ae:	bd80      	pop	{r7, pc}
 81033b0:	100001b0 	.word	0x100001b0

081033b4 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE>:

void EventManagerCM4Task::send(const std::vector<SMessage>& messages)
{
 81033b4:	b5b0      	push	{r4, r5, r7, lr}
 81033b6:	b092      	sub	sp, #72	@ 0x48
 81033b8:	af00      	add	r7, sp, #0
 81033ba:	6078      	str	r0, [r7, #4]
 81033bc:	6039      	str	r1, [r7, #0]
	for(auto msg : messages)
 81033be:	683b      	ldr	r3, [r7, #0]
 81033c0:	643b      	str	r3, [r7, #64]	@ 0x40
 81033c2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 81033c4:	f000 f916 	bl	81035f4 <_ZNKSt6vectorI8SMessageSaIS0_EE5beginEv>
 81033c8:	4603      	mov	r3, r0
 81033ca:	61bb      	str	r3, [r7, #24]
 81033cc:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 81033ce:	f000 f921 	bl	8103614 <_ZNKSt6vectorI8SMessageSaIS0_EE3endEv>
 81033d2:	4603      	mov	r3, r0
 81033d4:	617b      	str	r3, [r7, #20]
 81033d6:	e053      	b.n	8103480 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0xcc>
 81033d8:	f107 0318 	add.w	r3, r7, #24
 81033dc:	4618      	mov	r0, r3
 81033de:	f000 f953 	bl	8103688 <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEdeEv>
 81033e2:	4603      	mov	r3, r0
 81033e4:	f107 041c 	add.w	r4, r7, #28
 81033e8:	461d      	mov	r5, r3
 81033ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81033ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81033ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 81033f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	{
		auto eventReceiver = static_cast<EEventQueue>(msg.event_receiver);
 81033f6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 81033fa:	74fb      	strb	r3, [r7, #19]
		auto it = queue_handles.find(eventReceiver);
 81033fc:	687b      	ldr	r3, [r7, #4]
 81033fe:	f107 0213 	add.w	r2, r7, #19
 8103402:	4611      	mov	r1, r2
 8103404:	4618      	mov	r0, r3
 8103406:	f000 f94b 	bl	81036a0 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>
 810340a:	4603      	mov	r3, r0
 810340c:	60fb      	str	r3, [r7, #12]

		QueueHandle_t targetQueue;

		if(it != queue_handles.end())
 810340e:	687b      	ldr	r3, [r7, #4]
 8103410:	4618      	mov	r0, r3
 8103412:	f000 f954 	bl	81036be <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8103416:	4603      	mov	r3, r0
 8103418:	63bb      	str	r3, [r7, #56]	@ 0x38
 810341a:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 810341e:	f107 030c 	add.w	r3, r7, #12
 8103422:	4611      	mov	r1, r2
 8103424:	4618      	mov	r0, r3
 8103426:	f000 f957 	bl	81036d8 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 810342a:	4603      	mov	r3, r0
 810342c:	2b00      	cmp	r3, #0
 810342e:	d00a      	beq.n	8103446 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0x92>
		{
			targetQueue = queue_handles[eventReceiver];
 8103430:	687b      	ldr	r3, [r7, #4]
 8103432:	f107 0213 	add.w	r2, r7, #19
 8103436:	4611      	mov	r1, r2
 8103438:	4618      	mov	r0, r3
 810343a:	f000 f961 	bl	8103700 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 810343e:	4603      	mov	r3, r0
 8103440:	681b      	ldr	r3, [r3, #0]
 8103442:	647b      	str	r3, [r7, #68]	@ 0x44
 8103444:	e00c      	b.n	8103460 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0xac>
		}
		else
		{
			// if receiver not found, then it means i has to be on CM7 side, so send to IPC connection damon.
			targetQueue = queue_handles[EVENT_QUEUE_DAEMON_NATIVE];
 8103446:	687b      	ldr	r3, [r7, #4]
 8103448:	2207      	movs	r2, #7
 810344a:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 810344e:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8103452:	4611      	mov	r1, r2
 8103454:	4618      	mov	r0, r3
 8103456:	f000 f9af 	bl	81037b8 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_>
 810345a:	4603      	mov	r3, r0
 810345c:	681b      	ldr	r3, [r3, #0]
 810345e:	647b      	str	r3, [r7, #68]	@ 0x44
		}

		if(targetQueue)
 8103460:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8103462:	2b00      	cmp	r3, #0
 8103464:	d007      	beq.n	8103476 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0xc2>
		{
			xQueueSend(targetQueue, static_cast<void*>(&msg), portMAX_DELAY);
 8103466:	f107 011c 	add.w	r1, r7, #28
 810346a:	2300      	movs	r3, #0
 810346c:	f04f 32ff 	mov.w	r2, #4294967295
 8103470:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8103472:	f00d fef7 	bl	8111264 <xQueueGenericSend>
	for(auto msg : messages)
 8103476:	f107 0318 	add.w	r3, r7, #24
 810347a:	4618      	mov	r0, r3
 810347c:	f000 f8f3 	bl	8103666 <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEppEv>
 8103480:	f107 0214 	add.w	r2, r7, #20
 8103484:	f107 0318 	add.w	r3, r7, #24
 8103488:	4611      	mov	r1, r2
 810348a:	4618      	mov	r0, r3
 810348c:	f000 f8d3 	bl	8103636 <_ZN9__gnu_cxxneIPK8SMessageSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8103490:	4603      	mov	r3, r0
 8103492:	2b00      	cmp	r3, #0
 8103494:	d1a0      	bne.n	81033d8 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0x24>
		}
	}
}
 8103496:	bf00      	nop
 8103498:	bf00      	nop
 810349a:	3748      	adds	r7, #72	@ 0x48
 810349c:	46bd      	mov	sp, r7
 810349e:	bdb0      	pop	{r4, r5, r7, pc}

081034a0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 81034a0:	b580      	push	{r7, lr}
 81034a2:	b082      	sub	sp, #8
 81034a4:	af00      	add	r7, sp, #0
 81034a6:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 81034a8:	6878      	ldr	r0, [r7, #4]
 81034aa:	f000 f9e5 	bl	8103878 <_ZNSaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>
 81034ae:	687b      	ldr	r3, [r7, #4]
 81034b0:	4618      	mov	r0, r3
 81034b2:	f000 f9ed 	bl	8103890 <_ZNSt20_Rb_tree_key_compareISt4lessIN19EventManagerCM4Task11EEventQueueEEEC1Ev>
 81034b6:	687b      	ldr	r3, [r7, #4]
 81034b8:	3304      	adds	r3, #4
 81034ba:	4618      	mov	r0, r3
 81034bc:	f7ff fe8d 	bl	81031da <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 81034c0:	687b      	ldr	r3, [r7, #4]
 81034c2:	4618      	mov	r0, r3
 81034c4:	3708      	adds	r7, #8
 81034c6:	46bd      	mov	sp, r7
 81034c8:	bd80      	pop	{r7, pc}

081034ca <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_>:
       *
       *  Insertion requires logarithmic time.
       */
      template<typename... _Args>
	std::pair<iterator, bool>
	emplace(_Args&&... __args)
 81034ca:	b5b0      	push	{r4, r5, r7, lr}
 81034cc:	b084      	sub	sp, #16
 81034ce:	af00      	add	r7, sp, #0
 81034d0:	60f8      	str	r0, [r7, #12]
 81034d2:	60b9      	str	r1, [r7, #8]
 81034d4:	607a      	str	r2, [r7, #4]
 81034d6:	603b      	str	r3, [r7, #0]
		      }
		    return {__i, false};
		  }
	      }
#endif
	  return _M_t._M_emplace_unique(std::forward<_Args>(__args)...);
 81034d8:	68bc      	ldr	r4, [r7, #8]
 81034da:	6878      	ldr	r0, [r7, #4]
 81034dc:	f000 f9ef 	bl	81038be <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 81034e0:	4605      	mov	r5, r0
 81034e2:	6838      	ldr	r0, [r7, #0]
 81034e4:	f000 f9f6 	bl	81038d4 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 81034e8:	4603      	mov	r3, r0
 81034ea:	68f8      	ldr	r0, [r7, #12]
 81034ec:	462a      	mov	r2, r5
 81034ee:	4621      	mov	r1, r4
 81034f0:	f000 f9fb 	bl	81038ea <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJRS1_RS5_EEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_>
 81034f4:	bf00      	nop
	}
 81034f6:	68f8      	ldr	r0, [r7, #12]
 81034f8:	3710      	adds	r7, #16
 81034fa:	46bd      	mov	sp, r7
 81034fc:	bdb0      	pop	{r4, r5, r7, pc}

081034fe <_ZNSt6vectorI8SMessageSaIS0_EED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 81034fe:	b5b0      	push	{r4, r5, r7, lr}
 8103500:	b082      	sub	sp, #8
 8103502:	af00      	add	r7, sp, #0
 8103504:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8103506:	687b      	ldr	r3, [r7, #4]
 8103508:	681c      	ldr	r4, [r3, #0]
 810350a:	687b      	ldr	r3, [r7, #4]
 810350c:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 810350e:	687b      	ldr	r3, [r7, #4]
 8103510:	4618      	mov	r0, r3
 8103512:	f000 fa3f 	bl	8103994 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8103516:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8103518:	461a      	mov	r2, r3
 810351a:	4629      	mov	r1, r5
 810351c:	4620      	mov	r0, r4
 810351e:	f000 fa44 	bl	81039aa <_ZSt8_DestroyIP8SMessageS0_EvT_S2_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8103522:	687b      	ldr	r3, [r7, #4]
 8103524:	4618      	mov	r0, r3
 8103526:	f000 f821 	bl	810356c <_ZNSt12_Vector_baseI8SMessageSaIS0_EED1Ev>
 810352a:	687b      	ldr	r3, [r7, #4]
 810352c:	4618      	mov	r0, r3
 810352e:	3708      	adds	r7, #8
 8103530:	46bd      	mov	sp, r7
 8103532:	bdb0      	pop	{r4, r5, r7, pc}

08103534 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8103534:	b580      	push	{r7, lr}
 8103536:	b082      	sub	sp, #8
 8103538:	af00      	add	r7, sp, #0
 810353a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 810353c:	6878      	ldr	r0, [r7, #4]
 810353e:	f000 fa42 	bl	81039c6 <_ZNSaI8SMessageEC1Ev>
 8103542:	687b      	ldr	r3, [r7, #4]
 8103544:	4618      	mov	r0, r3
 8103546:	f000 fa4a 	bl	81039de <_ZNSt12_Vector_baseI8SMessageSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 810354a:	687b      	ldr	r3, [r7, #4]
 810354c:	4618      	mov	r0, r3
 810354e:	3708      	adds	r7, #8
 8103550:	46bd      	mov	sp, r7
 8103552:	bd80      	pop	{r7, pc}

08103554 <_ZNSaI8SMessageED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8103554:	b580      	push	{r7, lr}
 8103556:	b082      	sub	sp, #8
 8103558:	af00      	add	r7, sp, #0
 810355a:	6078      	str	r0, [r7, #4]
 810355c:	6878      	ldr	r0, [r7, #4]
 810355e:	f000 fa52 	bl	8103a06 <_ZNSt15__new_allocatorI8SMessageED1Ev>
 8103562:	687b      	ldr	r3, [r7, #4]
 8103564:	4618      	mov	r0, r3
 8103566:	3708      	adds	r7, #8
 8103568:	46bd      	mov	sp, r7
 810356a:	bd80      	pop	{r7, pc}

0810356c <_ZNSt12_Vector_baseI8SMessageSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 810356c:	b580      	push	{r7, lr}
 810356e:	b082      	sub	sp, #8
 8103570:	af00      	add	r7, sp, #0
 8103572:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8103574:	687b      	ldr	r3, [r7, #4]
 8103576:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8103578:	687b      	ldr	r3, [r7, #4]
 810357a:	689a      	ldr	r2, [r3, #8]
 810357c:	687b      	ldr	r3, [r7, #4]
 810357e:	681b      	ldr	r3, [r3, #0]
 8103580:	1ad3      	subs	r3, r2, r3
 8103582:	109b      	asrs	r3, r3, #2
 8103584:	4a07      	ldr	r2, [pc, #28]	@ (81035a4 <_ZNSt12_Vector_baseI8SMessageSaIS0_EED1Ev+0x38>)
 8103586:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 810358a:	461a      	mov	r2, r3
 810358c:	6878      	ldr	r0, [r7, #4]
 810358e:	f000 fa45 	bl	8103a1c <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j>
      }
 8103592:	687b      	ldr	r3, [r7, #4]
 8103594:	4618      	mov	r0, r3
 8103596:	f7ff fec1 	bl	810331c <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implD1Ev>
 810359a:	687b      	ldr	r3, [r7, #4]
 810359c:	4618      	mov	r0, r3
 810359e:	3708      	adds	r7, #8
 81035a0:	46bd      	mov	sp, r7
 81035a2:	bd80      	pop	{r7, pc}
 81035a4:	b6db6db7 	.word	0xb6db6db7

081035a8 <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_>:
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      _GLIBCXX20_CONSTEXPR
      void
      push_back(const value_type& __x)
 81035a8:	b580      	push	{r7, lr}
 81035aa:	b082      	sub	sp, #8
 81035ac:	af00      	add	r7, sp, #0
 81035ae:	6078      	str	r0, [r7, #4]
 81035b0:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 81035b2:	687b      	ldr	r3, [r7, #4]
 81035b4:	685a      	ldr	r2, [r3, #4]
 81035b6:	687b      	ldr	r3, [r7, #4]
 81035b8:	689b      	ldr	r3, [r3, #8]
 81035ba:	429a      	cmp	r2, r3
 81035bc:	d00d      	beq.n	81035da <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 81035be:	6878      	ldr	r0, [r7, #4]
 81035c0:	687b      	ldr	r3, [r7, #4]
 81035c2:	685b      	ldr	r3, [r3, #4]
 81035c4:	683a      	ldr	r2, [r7, #0]
 81035c6:	4619      	mov	r1, r3
 81035c8:	f000 fa3b 	bl	8103a42 <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 81035cc:	687b      	ldr	r3, [r7, #4]
 81035ce:	685b      	ldr	r3, [r3, #4]
 81035d0:	f103 021c 	add.w	r2, r3, #28
 81035d4:	687b      	ldr	r3, [r7, #4]
 81035d6:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 81035d8:	e008      	b.n	81035ec <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 81035da:	6878      	ldr	r0, [r7, #4]
 81035dc:	f000 fa44 	bl	8103a68 <_ZNSt6vectorI8SMessageSaIS0_EE3endEv>
 81035e0:	4603      	mov	r3, r0
 81035e2:	683a      	ldr	r2, [r7, #0]
 81035e4:	4619      	mov	r1, r3
 81035e6:	6878      	ldr	r0, [r7, #4]
 81035e8:	f000 fa66 	bl	8103ab8 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 81035ec:	bf00      	nop
 81035ee:	3708      	adds	r7, #8
 81035f0:	46bd      	mov	sp, r7
 81035f2:	bd80      	pop	{r7, pc}

081035f4 <_ZNKSt6vectorI8SMessageSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 81035f4:	b580      	push	{r7, lr}
 81035f6:	b084      	sub	sp, #16
 81035f8:	af00      	add	r7, sp, #0
 81035fa:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 81035fc:	687a      	ldr	r2, [r7, #4]
 81035fe:	f107 030c 	add.w	r3, r7, #12
 8103602:	4611      	mov	r1, r2
 8103604:	4618      	mov	r0, r3
 8103606:	f000 fb1f 	bl	8103c48 <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 810360a:	68fb      	ldr	r3, [r7, #12]
 810360c:	4618      	mov	r0, r3
 810360e:	3710      	adds	r7, #16
 8103610:	46bd      	mov	sp, r7
 8103612:	bd80      	pop	{r7, pc}

08103614 <_ZNKSt6vectorI8SMessageSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8103614:	b580      	push	{r7, lr}
 8103616:	b084      	sub	sp, #16
 8103618:	af00      	add	r7, sp, #0
 810361a:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 810361c:	687b      	ldr	r3, [r7, #4]
 810361e:	1d1a      	adds	r2, r3, #4
 8103620:	f107 030c 	add.w	r3, r7, #12
 8103624:	4611      	mov	r1, r2
 8103626:	4618      	mov	r0, r3
 8103628:	f000 fb0e 	bl	8103c48 <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 810362c:	68fb      	ldr	r3, [r7, #12]
 810362e:	4618      	mov	r0, r3
 8103630:	3710      	adds	r7, #16
 8103632:	46bd      	mov	sp, r7
 8103634:	bd80      	pop	{r7, pc}

08103636 <_ZN9__gnu_cxxneIPK8SMessageSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8103636:	b590      	push	{r4, r7, lr}
 8103638:	b083      	sub	sp, #12
 810363a:	af00      	add	r7, sp, #0
 810363c:	6078      	str	r0, [r7, #4]
 810363e:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8103640:	6878      	ldr	r0, [r7, #4]
 8103642:	f000 fb11 	bl	8103c68 <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8103646:	4603      	mov	r3, r0
 8103648:	681c      	ldr	r4, [r3, #0]
 810364a:	6838      	ldr	r0, [r7, #0]
 810364c:	f000 fb0c 	bl	8103c68 <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8103650:	4603      	mov	r3, r0
 8103652:	681b      	ldr	r3, [r3, #0]
 8103654:	429c      	cmp	r4, r3
 8103656:	bf14      	ite	ne
 8103658:	2301      	movne	r3, #1
 810365a:	2300      	moveq	r3, #0
 810365c:	b2db      	uxtb	r3, r3
 810365e:	4618      	mov	r0, r3
 8103660:	370c      	adds	r7, #12
 8103662:	46bd      	mov	sp, r7
 8103664:	bd90      	pop	{r4, r7, pc}

08103666 <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8103666:	b480      	push	{r7}
 8103668:	b083      	sub	sp, #12
 810366a:	af00      	add	r7, sp, #0
 810366c:	6078      	str	r0, [r7, #4]
	++_M_current;
 810366e:	687b      	ldr	r3, [r7, #4]
 8103670:	681b      	ldr	r3, [r3, #0]
 8103672:	f103 021c 	add.w	r2, r3, #28
 8103676:	687b      	ldr	r3, [r7, #4]
 8103678:	601a      	str	r2, [r3, #0]
	return *this;
 810367a:	687b      	ldr	r3, [r7, #4]
      }
 810367c:	4618      	mov	r0, r3
 810367e:	370c      	adds	r7, #12
 8103680:	46bd      	mov	sp, r7
 8103682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103686:	4770      	bx	lr

08103688 <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8103688:	b480      	push	{r7}
 810368a:	b083      	sub	sp, #12
 810368c:	af00      	add	r7, sp, #0
 810368e:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8103690:	687b      	ldr	r3, [r7, #4]
 8103692:	681b      	ldr	r3, [r3, #0]
 8103694:	4618      	mov	r0, r3
 8103696:	370c      	adds	r7, #12
 8103698:	46bd      	mov	sp, r7
 810369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810369e:	4770      	bx	lr

081036a0 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>:
       *  pointing to the sought after %pair.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */

      iterator
      find(const key_type& __x)
 81036a0:	b580      	push	{r7, lr}
 81036a2:	b082      	sub	sp, #8
 81036a4:	af00      	add	r7, sp, #0
 81036a6:	6078      	str	r0, [r7, #4]
 81036a8:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 81036aa:	687b      	ldr	r3, [r7, #4]
 81036ac:	6839      	ldr	r1, [r7, #0]
 81036ae:	4618      	mov	r0, r3
 81036b0:	f000 fae5 	bl	8103c7e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 81036b4:	4603      	mov	r3, r0
 81036b6:	4618      	mov	r0, r3
 81036b8:	3708      	adds	r7, #8
 81036ba:	46bd      	mov	sp, r7
 81036bc:	bd80      	pop	{r7, pc}

081036be <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 81036be:	b580      	push	{r7, lr}
 81036c0:	b082      	sub	sp, #8
 81036c2:	af00      	add	r7, sp, #0
 81036c4:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 81036c6:	687b      	ldr	r3, [r7, #4]
 81036c8:	4618      	mov	r0, r3
 81036ca:	f000 fb14 	bl	8103cf6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 81036ce:	4603      	mov	r3, r0
 81036d0:	4618      	mov	r0, r3
 81036d2:	3708      	adds	r7, #8
 81036d4:	46bd      	mov	sp, r7
 81036d6:	bd80      	pop	{r7, pc}

081036d8 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 81036d8:	b480      	push	{r7}
 81036da:	b083      	sub	sp, #12
 81036dc:	af00      	add	r7, sp, #0
 81036de:	6078      	str	r0, [r7, #4]
 81036e0:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 81036e2:	687b      	ldr	r3, [r7, #4]
 81036e4:	681a      	ldr	r2, [r3, #0]
 81036e6:	683b      	ldr	r3, [r7, #0]
 81036e8:	681b      	ldr	r3, [r3, #0]
 81036ea:	429a      	cmp	r2, r3
 81036ec:	bf14      	ite	ne
 81036ee:	2301      	movne	r3, #1
 81036f0:	2300      	moveq	r3, #0
 81036f2:	b2db      	uxtb	r3, r3
 81036f4:	4618      	mov	r0, r3
 81036f6:	370c      	adds	r7, #12
 81036f8:	46bd      	mov	sp, r7
 81036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036fe:	4770      	bx	lr

08103700 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 8103700:	b590      	push	{r4, r7, lr}
 8103702:	b08b      	sub	sp, #44	@ 0x2c
 8103704:	af02      	add	r7, sp, #8
 8103706:	6078      	str	r0, [r7, #4]
 8103708:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 810370a:	6839      	ldr	r1, [r7, #0]
 810370c:	6878      	ldr	r0, [r7, #4]
 810370e:	f000 fb03 	bl	8103d18 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 8103712:	4603      	mov	r3, r0
 8103714:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8103716:	6878      	ldr	r0, [r7, #4]
 8103718:	f7ff ffd1 	bl	81036be <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 810371c:	4603      	mov	r3, r0
 810371e:	60fb      	str	r3, [r7, #12]
 8103720:	f107 020c 	add.w	r2, r7, #12
 8103724:	f107 0308 	add.w	r3, r7, #8
 8103728:	4611      	mov	r1, r2
 810372a:	4618      	mov	r0, r3
 810372c:	f000 fb03 	bl	8103d36 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 8103730:	4603      	mov	r3, r0
 8103732:	2b00      	cmp	r3, #0
 8103734:	d112      	bne.n	810375c <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x5c>
 8103736:	6878      	ldr	r0, [r7, #4]
 8103738:	f000 fb11 	bl	8103d5e <_ZNKSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 810373c:	f107 0308 	add.w	r3, r7, #8
 8103740:	4618      	mov	r0, r3
 8103742:	f000 fb19 	bl	8103d78 <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 8103746:	4603      	mov	r3, r0
 8103748:	461a      	mov	r2, r3
 810374a:	f107 0310 	add.w	r3, r7, #16
 810374e:	6839      	ldr	r1, [r7, #0]
 8103750:	4618      	mov	r0, r3
 8103752:	f000 fb1f 	bl	8103d94 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8103756:	4603      	mov	r3, r0
 8103758:	2b00      	cmp	r3, #0
 810375a:	d001      	beq.n	8103760 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 810375c:	2301      	movs	r3, #1
 810375e:	e000      	b.n	8103762 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x62>
 8103760:	2300      	movs	r3, #0
 8103762:	2b00      	cmp	r3, #0
 8103764:	d01b      	beq.n	810379e <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8103766:	687c      	ldr	r4, [r7, #4]
 8103768:	f107 0208 	add.w	r2, r7, #8
 810376c:	f107 0314 	add.w	r3, r7, #20
 8103770:	4611      	mov	r1, r2
 8103772:	4618      	mov	r0, r3
 8103774:	f000 fb32 	bl	8103ddc <_ZNSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 8103778:	f107 0318 	add.w	r3, r7, #24
 810377c:	6839      	ldr	r1, [r7, #0]
 810377e:	4618      	mov	r0, r3
 8103780:	f000 fb1d 	bl	8103dbe <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8103784:	f107 0218 	add.w	r2, r7, #24
 8103788:	f107 031c 	add.w	r3, r7, #28
 810378c:	9300      	str	r3, [sp, #0]
 810378e:	4613      	mov	r3, r2
 8103790:	4a08      	ldr	r2, [pc, #32]	@ (81037b4 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb4>)
 8103792:	6979      	ldr	r1, [r7, #20]
 8103794:	4620      	mov	r0, r4
 8103796:	f000 fb31 	bl	8103dfc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 810379a:	4603      	mov	r3, r0
 810379c:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 810379e:	f107 0308 	add.w	r3, r7, #8
 81037a2:	4618      	mov	r0, r3
 81037a4:	f000 fae8 	bl	8103d78 <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 81037a8:	4603      	mov	r3, r0
 81037aa:	3304      	adds	r3, #4
      }
 81037ac:	4618      	mov	r0, r3
 81037ae:	3724      	adds	r7, #36	@ 0x24
 81037b0:	46bd      	mov	sp, r7
 81037b2:	bd90      	pop	{r4, r7, pc}
 81037b4:	0812895c 	.word	0x0812895c

081037b8 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_>:
      operator[](key_type&& __k)
 81037b8:	b590      	push	{r4, r7, lr}
 81037ba:	b08b      	sub	sp, #44	@ 0x2c
 81037bc:	af02      	add	r7, sp, #8
 81037be:	6078      	str	r0, [r7, #4]
 81037c0:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 81037c2:	6839      	ldr	r1, [r7, #0]
 81037c4:	6878      	ldr	r0, [r7, #4]
 81037c6:	f000 faa7 	bl	8103d18 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 81037ca:	4603      	mov	r3, r0
 81037cc:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 81037ce:	6878      	ldr	r0, [r7, #4]
 81037d0:	f7ff ff75 	bl	81036be <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 81037d4:	4603      	mov	r3, r0
 81037d6:	60fb      	str	r3, [r7, #12]
 81037d8:	f107 020c 	add.w	r2, r7, #12
 81037dc:	f107 0308 	add.w	r3, r7, #8
 81037e0:	4611      	mov	r1, r2
 81037e2:	4618      	mov	r0, r3
 81037e4:	f000 faa7 	bl	8103d36 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 81037e8:	4603      	mov	r3, r0
 81037ea:	2b00      	cmp	r3, #0
 81037ec:	d112      	bne.n	8103814 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_+0x5c>
 81037ee:	6878      	ldr	r0, [r7, #4]
 81037f0:	f000 fab5 	bl	8103d5e <_ZNKSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 81037f4:	f107 0308 	add.w	r3, r7, #8
 81037f8:	4618      	mov	r0, r3
 81037fa:	f000 fabd 	bl	8103d78 <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 81037fe:	4603      	mov	r3, r0
 8103800:	461a      	mov	r2, r3
 8103802:	f107 0310 	add.w	r3, r7, #16
 8103806:	6839      	ldr	r1, [r7, #0]
 8103808:	4618      	mov	r0, r3
 810380a:	f000 fac3 	bl	8103d94 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 810380e:	4603      	mov	r3, r0
 8103810:	2b00      	cmp	r3, #0
 8103812:	d001      	beq.n	8103818 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_+0x60>
 8103814:	2301      	movs	r3, #1
 8103816:	e000      	b.n	810381a <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_+0x62>
 8103818:	2300      	movs	r3, #0
 810381a:	2b00      	cmp	r3, #0
 810381c:	d01f      	beq.n	810385e <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_+0xa6>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 810381e:	687c      	ldr	r4, [r7, #4]
 8103820:	f107 0208 	add.w	r2, r7, #8
 8103824:	f107 0314 	add.w	r3, r7, #20
 8103828:	4611      	mov	r1, r2
 810382a:	4618      	mov	r0, r3
 810382c:	f000 fad6 	bl	8103ddc <_ZNSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					std::forward_as_tuple(std::move(__k)),
 8103830:	6838      	ldr	r0, [r7, #0]
 8103832:	f000 fb29 	bl	8103e88 <_ZSt4moveIRN19EventManagerCM4Task11EEventQueueEEONSt16remove_referenceIT_E4typeEOS4_>
 8103836:	4602      	mov	r2, r0
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8103838:	f107 0318 	add.w	r3, r7, #24
 810383c:	4611      	mov	r1, r2
 810383e:	4618      	mov	r0, r3
 8103840:	f000 fb3d 	bl	8103ebe <_ZSt16forward_as_tupleIJN19EventManagerCM4Task11EEventQueueEEESt5tupleIJDpOT_EES5_>
 8103844:	f107 0218 	add.w	r2, r7, #24
 8103848:	f107 031c 	add.w	r3, r7, #28
 810384c:	9300      	str	r3, [sp, #0]
 810384e:	4613      	mov	r3, r2
 8103850:	4a08      	ldr	r2, [pc, #32]	@ (8103874 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_+0xbc>)
 8103852:	6979      	ldr	r1, [r7, #20]
 8103854:	4620      	mov	r0, r4
 8103856:	f000 fb43 	bl	8103ee0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 810385a:	4603      	mov	r3, r0
 810385c:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 810385e:	f107 0308 	add.w	r3, r7, #8
 8103862:	4618      	mov	r0, r3
 8103864:	f000 fa88 	bl	8103d78 <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 8103868:	4603      	mov	r3, r0
 810386a:	3304      	adds	r3, #4
      }
 810386c:	4618      	mov	r0, r3
 810386e:	3724      	adds	r7, #36	@ 0x24
 8103870:	46bd      	mov	sp, r7
 8103872:	bd90      	pop	{r4, r7, pc}
 8103874:	0812895c 	.word	0x0812895c

08103878 <_ZNSaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8103878:	b580      	push	{r7, lr}
 810387a:	b082      	sub	sp, #8
 810387c:	af00      	add	r7, sp, #0
 810387e:	6078      	str	r0, [r7, #4]
 8103880:	6878      	ldr	r0, [r7, #4]
 8103882:	f000 fb73 	bl	8103f6c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>
 8103886:	687b      	ldr	r3, [r7, #4]
 8103888:	4618      	mov	r0, r3
 810388a:	3708      	adds	r7, #8
 810388c:	46bd      	mov	sp, r7
 810388e:	bd80      	pop	{r7, pc}

08103890 <_ZNSt20_Rb_tree_key_compareISt4lessIN19EventManagerCM4Task11EEventQueueEEEC1Ev>:
      _Rb_tree_key_compare()
 8103890:	b480      	push	{r7}
 8103892:	b083      	sub	sp, #12
 8103894:	af00      	add	r7, sp, #0
 8103896:	6078      	str	r0, [r7, #4]
      { }
 8103898:	687b      	ldr	r3, [r7, #4]
 810389a:	4618      	mov	r0, r3
 810389c:	370c      	adds	r7, #12
 810389e:	46bd      	mov	sp, r7
 81038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038a4:	4770      	bx	lr

081038a6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 81038a6:	b580      	push	{r7, lr}
 81038a8:	b082      	sub	sp, #8
 81038aa:	af00      	add	r7, sp, #0
 81038ac:	6078      	str	r0, [r7, #4]
      { return _M_mbegin(); }
 81038ae:	6878      	ldr	r0, [r7, #4]
 81038b0:	f000 fb90 	bl	8103fd4 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE9_M_mbeginEv>
 81038b4:	4603      	mov	r3, r0
 81038b6:	4618      	mov	r0, r3
 81038b8:	3708      	adds	r7, #8
 81038ba:	46bd      	mov	sp, r7
 81038bc:	bd80      	pop	{r7, pc}

081038be <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81038be:	b480      	push	{r7}
 81038c0:	b083      	sub	sp, #12
 81038c2:	af00      	add	r7, sp, #0
 81038c4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81038c6:	687b      	ldr	r3, [r7, #4]
 81038c8:	4618      	mov	r0, r3
 81038ca:	370c      	adds	r7, #12
 81038cc:	46bd      	mov	sp, r7
 81038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038d2:	4770      	bx	lr

081038d4 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81038d4:	b480      	push	{r7}
 81038d6:	b083      	sub	sp, #12
 81038d8:	af00      	add	r7, sp, #0
 81038da:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81038dc:	687b      	ldr	r3, [r7, #4]
 81038de:	4618      	mov	r0, r3
 81038e0:	370c      	adds	r7, #12
 81038e2:	46bd      	mov	sp, r7
 81038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038e8:	4770      	bx	lr

081038ea <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJRS1_RS5_EEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    template<typename... _Args>
      auto
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 81038ea:	b590      	push	{r4, r7, lr}
 81038ec:	b08d      	sub	sp, #52	@ 0x34
 81038ee:	af00      	add	r7, sp, #0
 81038f0:	60f8      	str	r0, [r7, #12]
 81038f2:	60b9      	str	r1, [r7, #8]
 81038f4:	607a      	str	r2, [r7, #4]
 81038f6:	603b      	str	r3, [r7, #0]
      _M_emplace_unique(_Args&&... __args)
      -> pair<iterator, bool>
      {
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
 81038f8:	6878      	ldr	r0, [r7, #4]
 81038fa:	f7ff ffe0 	bl	81038be <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 81038fe:	4604      	mov	r4, r0
 8103900:	6838      	ldr	r0, [r7, #0]
 8103902:	f7ff ffe7 	bl	81038d4 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8103906:	4603      	mov	r3, r0
 8103908:	f107 0018 	add.w	r0, r7, #24
 810390c:	4622      	mov	r2, r4
 810390e:	68b9      	ldr	r1, [r7, #8]
 8103910:	f000 fb6c 	bl	8103fec <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRS1_RS5_EEERSC_DpOT_>
	auto __res = _M_get_insert_unique_pos(__z._M_key());
 8103914:	f107 0318 	add.w	r3, r7, #24
 8103918:	4618      	mov	r0, r3
 810391a:	f000 fc20 	bl	810415e <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>
 810391e:	4602      	mov	r2, r0
 8103920:	f107 0310 	add.w	r3, r7, #16
 8103924:	68b9      	ldr	r1, [r7, #8]
 8103926:	4618      	mov	r0, r3
 8103928:	f000 fb94 	bl	8104054 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
	if (__res.second)
 810392c:	697b      	ldr	r3, [r7, #20]
 810392e:	2b00      	cmp	r3, #0
 8103930:	d015      	beq.n	810395e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJRS1_RS5_EEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_+0x74>
	  return {__z._M_insert(__res), true};
 8103932:	f107 0018 	add.w	r0, r7, #24
 8103936:	f107 0310 	add.w	r3, r7, #16
 810393a:	e893 0006 	ldmia.w	r3, {r1, r2}
 810393e:	f000 fc1c 	bl	810417a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>
 8103942:	4603      	mov	r3, r0
 8103944:	623b      	str	r3, [r7, #32]
 8103946:	2301      	movs	r3, #1
 8103948:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 810394c:	f107 0227 	add.w	r2, r7, #39	@ 0x27
 8103950:	f107 0320 	add.w	r3, r7, #32
 8103954:	4619      	mov	r1, r3
 8103956:	68f8      	ldr	r0, [r7, #12]
 8103958:	f000 fc28 	bl	81041ac <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEbEC1IS7_bLb1EEEOT_OT0_>
 810395c:	e011      	b.n	8103982 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJRS1_RS5_EEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_+0x98>
	return {iterator(__res.first), false};
 810395e:	693a      	ldr	r2, [r7, #16]
 8103960:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8103964:	4611      	mov	r1, r2
 8103966:	4618      	mov	r0, r3
 8103968:	f000 fc39 	bl	81041de <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 810396c:	2300      	movs	r3, #0
 810396e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8103972:	f107 022f 	add.w	r2, r7, #47	@ 0x2f
 8103976:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810397a:	4619      	mov	r1, r3
 810397c:	68f8      	ldr	r0, [r7, #12]
 810397e:	f000 fc15 	bl	81041ac <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEbEC1IS7_bLb1EEEOT_OT0_>
      }
 8103982:	f107 0318 	add.w	r3, r7, #24
 8103986:	4618      	mov	r0, r3
 8103988:	f000 fb4f 	bl	810402a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>
 810398c:	68f8      	ldr	r0, [r7, #12]
 810398e:	3734      	adds	r7, #52	@ 0x34
 8103990:	46bd      	mov	sp, r7
 8103992:	bd90      	pop	{r4, r7, pc}

08103994 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8103994:	b480      	push	{r7}
 8103996:	b083      	sub	sp, #12
 8103998:	af00      	add	r7, sp, #0
 810399a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 810399c:	687b      	ldr	r3, [r7, #4]
 810399e:	4618      	mov	r0, r3
 81039a0:	370c      	adds	r7, #12
 81039a2:	46bd      	mov	sp, r7
 81039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81039a8:	4770      	bx	lr

081039aa <_ZSt8_DestroyIP8SMessageS0_EvT_S2_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 81039aa:	b580      	push	{r7, lr}
 81039ac:	b084      	sub	sp, #16
 81039ae:	af00      	add	r7, sp, #0
 81039b0:	60f8      	str	r0, [r7, #12]
 81039b2:	60b9      	str	r1, [r7, #8]
 81039b4:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 81039b6:	68b9      	ldr	r1, [r7, #8]
 81039b8:	68f8      	ldr	r0, [r7, #12]
 81039ba:	f000 fc2b 	bl	8104214 <_ZSt8_DestroyIP8SMessageEvT_S2_>
    }
 81039be:	bf00      	nop
 81039c0:	3710      	adds	r7, #16
 81039c2:	46bd      	mov	sp, r7
 81039c4:	bd80      	pop	{r7, pc}

081039c6 <_ZNSaI8SMessageEC1Ev>:
 81039c6:	b580      	push	{r7, lr}
 81039c8:	b082      	sub	sp, #8
 81039ca:	af00      	add	r7, sp, #0
 81039cc:	6078      	str	r0, [r7, #4]
 81039ce:	6878      	ldr	r0, [r7, #4]
 81039d0:	f000 fc2d 	bl	810422e <_ZNSt15__new_allocatorI8SMessageEC1Ev>
 81039d4:	687b      	ldr	r3, [r7, #4]
 81039d6:	4618      	mov	r0, r3
 81039d8:	3708      	adds	r7, #8
 81039da:	46bd      	mov	sp, r7
 81039dc:	bd80      	pop	{r7, pc}

081039de <_ZNSt12_Vector_baseI8SMessageSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 81039de:	b480      	push	{r7}
 81039e0:	b083      	sub	sp, #12
 81039e2:	af00      	add	r7, sp, #0
 81039e4:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 81039e6:	687b      	ldr	r3, [r7, #4]
 81039e8:	2200      	movs	r2, #0
 81039ea:	601a      	str	r2, [r3, #0]
 81039ec:	687b      	ldr	r3, [r7, #4]
 81039ee:	2200      	movs	r2, #0
 81039f0:	605a      	str	r2, [r3, #4]
 81039f2:	687b      	ldr	r3, [r7, #4]
 81039f4:	2200      	movs	r2, #0
 81039f6:	609a      	str	r2, [r3, #8]
	{ }
 81039f8:	687b      	ldr	r3, [r7, #4]
 81039fa:	4618      	mov	r0, r3
 81039fc:	370c      	adds	r7, #12
 81039fe:	46bd      	mov	sp, r7
 8103a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a04:	4770      	bx	lr

08103a06 <_ZNSt15__new_allocatorI8SMessageED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8103a06:	b480      	push	{r7}
 8103a08:	b083      	sub	sp, #12
 8103a0a:	af00      	add	r7, sp, #0
 8103a0c:	6078      	str	r0, [r7, #4]
 8103a0e:	687b      	ldr	r3, [r7, #4]
 8103a10:	4618      	mov	r0, r3
 8103a12:	370c      	adds	r7, #12
 8103a14:	46bd      	mov	sp, r7
 8103a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a1a:	4770      	bx	lr

08103a1c <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8103a1c:	b580      	push	{r7, lr}
 8103a1e:	b084      	sub	sp, #16
 8103a20:	af00      	add	r7, sp, #0
 8103a22:	60f8      	str	r0, [r7, #12]
 8103a24:	60b9      	str	r1, [r7, #8]
 8103a26:	607a      	str	r2, [r7, #4]
	if (__p)
 8103a28:	68bb      	ldr	r3, [r7, #8]
 8103a2a:	2b00      	cmp	r3, #0
 8103a2c:	d005      	beq.n	8103a3a <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8103a2e:	68fb      	ldr	r3, [r7, #12]
 8103a30:	687a      	ldr	r2, [r7, #4]
 8103a32:	68b9      	ldr	r1, [r7, #8]
 8103a34:	4618      	mov	r0, r3
 8103a36:	f000 fc05 	bl	8104244 <_ZNSt16allocator_traitsISaI8SMessageEE10deallocateERS1_PS0_j>
      }
 8103a3a:	bf00      	nop
 8103a3c:	3710      	adds	r7, #16
 8103a3e:	46bd      	mov	sp, r7
 8103a40:	bd80      	pop	{r7, pc}

08103a42 <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8103a42:	b580      	push	{r7, lr}
 8103a44:	b084      	sub	sp, #16
 8103a46:	af00      	add	r7, sp, #0
 8103a48:	60f8      	str	r0, [r7, #12]
 8103a4a:	60b9      	str	r1, [r7, #8]
 8103a4c:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8103a4e:	6878      	ldr	r0, [r7, #4]
 8103a50:	f000 fc07 	bl	8104262 <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>
 8103a54:	4603      	mov	r3, r0
 8103a56:	461a      	mov	r2, r3
 8103a58:	68b9      	ldr	r1, [r7, #8]
 8103a5a:	68f8      	ldr	r0, [r7, #12]
 8103a5c:	f000 fc0c 	bl	8104278 <_ZNSt15__new_allocatorI8SMessageE9constructIS0_JRKS0_EEEvPT_DpOT0_>
	}
 8103a60:	bf00      	nop
 8103a62:	3710      	adds	r7, #16
 8103a64:	46bd      	mov	sp, r7
 8103a66:	bd80      	pop	{r7, pc}

08103a68 <_ZNSt6vectorI8SMessageSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8103a68:	b580      	push	{r7, lr}
 8103a6a:	b084      	sub	sp, #16
 8103a6c:	af00      	add	r7, sp, #0
 8103a6e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8103a70:	687b      	ldr	r3, [r7, #4]
 8103a72:	1d1a      	adds	r2, r3, #4
 8103a74:	f107 030c 	add.w	r3, r7, #12
 8103a78:	4611      	mov	r1, r2
 8103a7a:	4618      	mov	r0, r3
 8103a7c:	f000 fc17 	bl	81042ae <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8103a80:	68fb      	ldr	r3, [r7, #12]
 8103a82:	4618      	mov	r0, r3
 8103a84:	3710      	adds	r7, #16
 8103a86:	46bd      	mov	sp, r7
 8103a88:	bd80      	pop	{r7, pc}

08103a8a <_ZNSt6vectorI8SMessageSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8103a8a:	b580      	push	{r7, lr}
 8103a8c:	b082      	sub	sp, #8
 8103a8e:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8103a90:	4618      	mov	r0, r3
 8103a92:	f000 f805 	bl	8103aa0 <_ZNSt6vectorI8SMessageSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8103a96:	4603      	mov	r3, r0
      }
 8103a98:	4618      	mov	r0, r3
 8103a9a:	3708      	adds	r7, #8
 8103a9c:	46bd      	mov	sp, r7
 8103a9e:	bd80      	pop	{r7, pc}

08103aa0 <_ZNSt6vectorI8SMessageSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8103aa0:	b480      	push	{r7}
 8103aa2:	b083      	sub	sp, #12
 8103aa4:	af00      	add	r7, sp, #0
 8103aa6:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8103aa8:	2301      	movs	r3, #1
      }
 8103aaa:	4618      	mov	r0, r3
 8103aac:	370c      	adds	r7, #12
 8103aae:	46bd      	mov	sp, r7
 8103ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ab4:	4770      	bx	lr
	...

08103ab8 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 8103ab8:	b5b0      	push	{r4, r5, r7, lr}
 8103aba:	b08c      	sub	sp, #48	@ 0x30
 8103abc:	af00      	add	r7, sp, #0
 8103abe:	60f8      	str	r0, [r7, #12]
 8103ac0:	60b9      	str	r1, [r7, #8]
 8103ac2:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8103ac4:	4a5e      	ldr	r2, [pc, #376]	@ (8103c40 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x188>)
 8103ac6:	2101      	movs	r1, #1
 8103ac8:	68f8      	ldr	r0, [r7, #12]
 8103aca:	f000 fc00 	bl	81042ce <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc>
 8103ace:	62b8      	str	r0, [r7, #40]	@ 0x28
      pointer __old_start = this->_M_impl._M_start;
 8103ad0:	68fb      	ldr	r3, [r7, #12]
 8103ad2:	681b      	ldr	r3, [r3, #0]
 8103ad4:	627b      	str	r3, [r7, #36]	@ 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8103ad6:	68fb      	ldr	r3, [r7, #12]
 8103ad8:	685b      	ldr	r3, [r3, #4]
 8103ada:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8103adc:	68f8      	ldr	r0, [r7, #12]
 8103ade:	f000 fc3d 	bl	810435c <_ZNSt6vectorI8SMessageSaIS0_EE5beginEv>
 8103ae2:	4603      	mov	r3, r0
 8103ae4:	617b      	str	r3, [r7, #20]
 8103ae6:	f107 0214 	add.w	r2, r7, #20
 8103aea:	f107 0308 	add.w	r3, r7, #8
 8103aee:	4611      	mov	r1, r2
 8103af0:	4618      	mov	r0, r3
 8103af2:	f000 fc43 	bl	810437c <_ZN9__gnu_cxxmiIP8SMessageSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8103af6:	4603      	mov	r3, r0
 8103af8:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8103afa:	68fb      	ldr	r3, [r7, #12]
 8103afc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8103afe:	4618      	mov	r0, r3
 8103b00:	f000 fc56 	bl	81043b0 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj>
 8103b04:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8103b06:	69bb      	ldr	r3, [r7, #24]
 8103b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8103b0a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8103b0c:	69fa      	ldr	r2, [r7, #28]
 8103b0e:	4613      	mov	r3, r2
 8103b10:	00db      	lsls	r3, r3, #3
 8103b12:	1a9b      	subs	r3, r3, r2
 8103b14:	009b      	lsls	r3, r3, #2
 8103b16:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8103b18:	69bb      	ldr	r3, [r7, #24]
 8103b1a:	189d      	adds	r5, r3, r2
 8103b1c:	6878      	ldr	r0, [r7, #4]
 8103b1e:	f000 fba0 	bl	8104262 <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>
 8103b22:	4603      	mov	r3, r0
 8103b24:	461a      	mov	r2, r3
 8103b26:	4629      	mov	r1, r5
 8103b28:	4620      	mov	r0, r4
 8103b2a:	f7ff ff8a 	bl	8103a42 <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8103b2e:	2300      	movs	r3, #0
 8103b30:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8103b32:	f7ff ffaa 	bl	8103a8a <_ZNSt6vectorI8SMessageSaIS0_EE15_S_use_relocateEv>
 8103b36:	4603      	mov	r3, r0
 8103b38:	2b00      	cmp	r3, #0
 8103b3a:	d027      	beq.n	8103b8c <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd4>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8103b3c:	f107 0308 	add.w	r3, r7, #8
 8103b40:	4618      	mov	r0, r3
 8103b42:	f000 fc5d 	bl	8104400 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8103b46:	4603      	mov	r3, r0
 8103b48:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8103b4a:	68fb      	ldr	r3, [r7, #12]
 8103b4c:	4618      	mov	r0, r3
 8103b4e:	f7ff ff21 	bl	8103994 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8103b52:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8103b54:	69ba      	ldr	r2, [r7, #24]
 8103b56:	4621      	mov	r1, r4
 8103b58:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8103b5a:	f000 fc3d 	bl	81043d8 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8103b5e:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 8103b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8103b62:	331c      	adds	r3, #28
 8103b64:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8103b66:	f107 0308 	add.w	r3, r7, #8
 8103b6a:	4618      	mov	r0, r3
 8103b6c:	f000 fc48 	bl	8104400 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8103b70:	4603      	mov	r3, r0
 8103b72:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8103b74:	68fb      	ldr	r3, [r7, #12]
 8103b76:	4618      	mov	r0, r3
 8103b78:	f7ff ff0c 	bl	8103994 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8103b7c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8103b7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8103b80:	6a39      	ldr	r1, [r7, #32]
 8103b82:	4620      	mov	r0, r4
 8103b84:	f000 fc28 	bl	81043d8 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8103b88:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8103b8a:	e026      	b.n	8103bda <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x122>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8103b8c:	f107 0308 	add.w	r3, r7, #8
 8103b90:	4618      	mov	r0, r3
 8103b92:	f000 fc35 	bl	8104400 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8103b96:	4603      	mov	r3, r0
 8103b98:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8103b9a:	68fb      	ldr	r3, [r7, #12]
 8103b9c:	4618      	mov	r0, r3
 8103b9e:	f7ff fef9 	bl	8103994 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8103ba2:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8103ba4:	69ba      	ldr	r2, [r7, #24]
 8103ba6:	4621      	mov	r1, r4
 8103ba8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8103baa:	f000 fc34 	bl	8104416 <_ZSt34__uninitialized_move_if_noexcept_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>
 8103bae:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 8103bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8103bb2:	331c      	adds	r3, #28
 8103bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8103bb6:	f107 0308 	add.w	r3, r7, #8
 8103bba:	4618      	mov	r0, r3
 8103bbc:	f000 fc20 	bl	8104400 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8103bc0:	4603      	mov	r3, r0
 8103bc2:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8103bc4:	68fb      	ldr	r3, [r7, #12]
 8103bc6:	4618      	mov	r0, r3
 8103bc8:	f7ff fee4 	bl	8103994 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8103bcc:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8103bce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8103bd0:	6a39      	ldr	r1, [r7, #32]
 8103bd2:	4620      	mov	r0, r4
 8103bd4:	f000 fc1f 	bl	8104416 <_ZSt34__uninitialized_move_if_noexcept_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>
 8103bd8:	62f8      	str	r0, [r7, #44]	@ 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8103bda:	f7ff ff56 	bl	8103a8a <_ZNSt6vectorI8SMessageSaIS0_EE15_S_use_relocateEv>
 8103bde:	4603      	mov	r3, r0
 8103be0:	f083 0301 	eor.w	r3, r3, #1
 8103be4:	b2db      	uxtb	r3, r3
 8103be6:	2b00      	cmp	r3, #0
 8103be8:	d009      	beq.n	8103bfe <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x146>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8103bea:	68fb      	ldr	r3, [r7, #12]
 8103bec:	4618      	mov	r0, r3
 8103bee:	f7ff fed1 	bl	8103994 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8103bf2:	4603      	mov	r3, r0
 8103bf4:	461a      	mov	r2, r3
 8103bf6:	6a39      	ldr	r1, [r7, #32]
 8103bf8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8103bfa:	f7ff fed6 	bl	81039aa <_ZSt8_DestroyIP8SMessageS0_EvT_S2_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8103bfe:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8103c00:	68fb      	ldr	r3, [r7, #12]
 8103c02:	689a      	ldr	r2, [r3, #8]
 8103c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103c06:	1ad3      	subs	r3, r2, r3
 8103c08:	109b      	asrs	r3, r3, #2
 8103c0a:	4a0e      	ldr	r2, [pc, #56]	@ (8103c44 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x18c>)
 8103c0c:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 8103c10:	461a      	mov	r2, r3
 8103c12:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8103c14:	f7ff ff02 	bl	8103a1c <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 8103c18:	68fb      	ldr	r3, [r7, #12]
 8103c1a:	69ba      	ldr	r2, [r7, #24]
 8103c1c:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8103c1e:	68fb      	ldr	r3, [r7, #12]
 8103c20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8103c22:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8103c24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8103c26:	4613      	mov	r3, r2
 8103c28:	00db      	lsls	r3, r3, #3
 8103c2a:	1a9b      	subs	r3, r3, r2
 8103c2c:	009b      	lsls	r3, r3, #2
 8103c2e:	461a      	mov	r2, r3
 8103c30:	69bb      	ldr	r3, [r7, #24]
 8103c32:	441a      	add	r2, r3
 8103c34:	68fb      	ldr	r3, [r7, #12]
 8103c36:	609a      	str	r2, [r3, #8]
    }
 8103c38:	bf00      	nop
 8103c3a:	3730      	adds	r7, #48	@ 0x30
 8103c3c:	46bd      	mov	sp, r7
 8103c3e:	bdb0      	pop	{r4, r5, r7, pc}
 8103c40:	08123a44 	.word	0x08123a44
 8103c44:	b6db6db7 	.word	0xb6db6db7

08103c48 <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8103c48:	b480      	push	{r7}
 8103c4a:	b083      	sub	sp, #12
 8103c4c:	af00      	add	r7, sp, #0
 8103c4e:	6078      	str	r0, [r7, #4]
 8103c50:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8103c52:	683b      	ldr	r3, [r7, #0]
 8103c54:	681a      	ldr	r2, [r3, #0]
 8103c56:	687b      	ldr	r3, [r7, #4]
 8103c58:	601a      	str	r2, [r3, #0]
 8103c5a:	687b      	ldr	r3, [r7, #4]
 8103c5c:	4618      	mov	r0, r3
 8103c5e:	370c      	adds	r7, #12
 8103c60:	46bd      	mov	sp, r7
 8103c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c66:	4770      	bx	lr

08103c68 <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8103c68:	b480      	push	{r7}
 8103c6a:	b083      	sub	sp, #12
 8103c6c:	af00      	add	r7, sp, #0
 8103c6e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8103c70:	687b      	ldr	r3, [r7, #4]
 8103c72:	4618      	mov	r0, r3
 8103c74:	370c      	adds	r7, #12
 8103c76:	46bd      	mov	sp, r7
 8103c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c7c:	4770      	bx	lr

08103c7e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8103c7e:	b590      	push	{r4, r7, lr}
 8103c80:	b085      	sub	sp, #20
 8103c82:	af00      	add	r7, sp, #0
 8103c84:	6078      	str	r0, [r7, #4]
 8103c86:	6039      	str	r1, [r7, #0]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8103c88:	6878      	ldr	r0, [r7, #4]
 8103c8a:	f7ff fe0c 	bl	81038a6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8103c8e:	4604      	mov	r4, r0
 8103c90:	6878      	ldr	r0, [r7, #4]
 8103c92:	f000 fbd9 	bl	8104448 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8103c96:	4602      	mov	r2, r0
 8103c98:	683b      	ldr	r3, [r7, #0]
 8103c9a:	4621      	mov	r1, r4
 8103c9c:	6878      	ldr	r0, [r7, #4]
 8103c9e:	f000 fbdf 	bl	8104460 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8103ca2:	4603      	mov	r3, r0
 8103ca4:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8103ca6:	6878      	ldr	r0, [r7, #4]
 8103ca8:	f000 f825 	bl	8103cf6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8103cac:	4603      	mov	r3, r0
 8103cae:	60fb      	str	r3, [r7, #12]
 8103cb0:	f107 020c 	add.w	r2, r7, #12
 8103cb4:	f107 0308 	add.w	r3, r7, #8
 8103cb8:	4611      	mov	r1, r2
 8103cba:	4618      	mov	r0, r3
 8103cbc:	f000 f83b 	bl	8103d36 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 8103cc0:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8103cc2:	2b00      	cmp	r3, #0
 8103cc4:	d10d      	bne.n	8103ce2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x64>
	      || _M_impl._M_key_compare(__k,
 8103cc6:	687c      	ldr	r4, [r7, #4]
					_S_key(__j._M_node))) ? end() : __j;
 8103cc8:	68bb      	ldr	r3, [r7, #8]
	      || _M_impl._M_key_compare(__k,
 8103cca:	4618      	mov	r0, r3
 8103ccc:	f000 fbf9 	bl	81044c2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8103cd0:	4603      	mov	r3, r0
 8103cd2:	461a      	mov	r2, r3
 8103cd4:	6839      	ldr	r1, [r7, #0]
 8103cd6:	4620      	mov	r0, r4
 8103cd8:	f000 f85c 	bl	8103d94 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8103cdc:	4603      	mov	r3, r0
 8103cde:	2b00      	cmp	r3, #0
 8103ce0:	d004      	beq.n	8103cec <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8103ce2:	6878      	ldr	r0, [r7, #4]
 8103ce4:	f000 f807 	bl	8103cf6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8103ce8:	4603      	mov	r3, r0
 8103cea:	e000      	b.n	8103cee <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x70>
 8103cec:	68bb      	ldr	r3, [r7, #8]
    }
 8103cee:	4618      	mov	r0, r3
 8103cf0:	3714      	adds	r7, #20
 8103cf2:	46bd      	mov	sp, r7
 8103cf4:	bd90      	pop	{r4, r7, pc}

08103cf6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8103cf6:	b580      	push	{r7, lr}
 8103cf8:	b084      	sub	sp, #16
 8103cfa:	af00      	add	r7, sp, #0
 8103cfc:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8103cfe:	687b      	ldr	r3, [r7, #4]
 8103d00:	1d1a      	adds	r2, r3, #4
 8103d02:	f107 030c 	add.w	r3, r7, #12
 8103d06:	4611      	mov	r1, r2
 8103d08:	4618      	mov	r0, r3
 8103d0a:	f000 fa68 	bl	81041de <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8103d0e:	68fb      	ldr	r3, [r7, #12]
 8103d10:	4618      	mov	r0, r3
 8103d12:	3710      	adds	r7, #16
 8103d14:	46bd      	mov	sp, r7
 8103d16:	bd80      	pop	{r7, pc}

08103d18 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 8103d18:	b580      	push	{r7, lr}
 8103d1a:	b082      	sub	sp, #8
 8103d1c:	af00      	add	r7, sp, #0
 8103d1e:	6078      	str	r0, [r7, #4]
 8103d20:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8103d22:	687b      	ldr	r3, [r7, #4]
 8103d24:	6839      	ldr	r1, [r7, #0]
 8103d26:	4618      	mov	r0, r3
 8103d28:	f000 fbd7 	bl	81044da <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 8103d2c:	4603      	mov	r3, r0
 8103d2e:	4618      	mov	r0, r3
 8103d30:	3708      	adds	r7, #8
 8103d32:	46bd      	mov	sp, r7
 8103d34:	bd80      	pop	{r7, pc}

08103d36 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8103d36:	b480      	push	{r7}
 8103d38:	b083      	sub	sp, #12
 8103d3a:	af00      	add	r7, sp, #0
 8103d3c:	6078      	str	r0, [r7, #4]
 8103d3e:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8103d40:	687b      	ldr	r3, [r7, #4]
 8103d42:	681a      	ldr	r2, [r3, #0]
 8103d44:	683b      	ldr	r3, [r7, #0]
 8103d46:	681b      	ldr	r3, [r3, #0]
 8103d48:	429a      	cmp	r2, r3
 8103d4a:	bf0c      	ite	eq
 8103d4c:	2301      	moveq	r3, #1
 8103d4e:	2300      	movne	r3, #0
 8103d50:	b2db      	uxtb	r3, r3
 8103d52:	4618      	mov	r0, r3
 8103d54:	370c      	adds	r7, #12
 8103d56:	46bd      	mov	sp, r7
 8103d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d5c:	4770      	bx	lr

08103d5e <_ZNKSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8103d5e:	b590      	push	{r4, r7, lr}
 8103d60:	b083      	sub	sp, #12
 8103d62:	af00      	add	r7, sp, #0
 8103d64:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8103d66:	687b      	ldr	r3, [r7, #4]
 8103d68:	4618      	mov	r0, r3
 8103d6a:	f000 fbcd 	bl	8104508 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8103d6e:	bf00      	nop
 8103d70:	4620      	mov	r0, r4
 8103d72:	370c      	adds	r7, #12
 8103d74:	46bd      	mov	sp, r7
 8103d76:	bd90      	pop	{r4, r7, pc}

08103d78 <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8103d78:	b580      	push	{r7, lr}
 8103d7a:	b082      	sub	sp, #8
 8103d7c:	af00      	add	r7, sp, #0
 8103d7e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8103d80:	687b      	ldr	r3, [r7, #4]
 8103d82:	681b      	ldr	r3, [r3, #0]
 8103d84:	4618      	mov	r0, r3
 8103d86:	f000 fbca 	bl	810451e <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 8103d8a:	4603      	mov	r3, r0
 8103d8c:	4618      	mov	r0, r3
 8103d8e:	3708      	adds	r7, #8
 8103d90:	46bd      	mov	sp, r7
 8103d92:	bd80      	pop	{r7, pc}

08103d94 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8103d94:	b480      	push	{r7}
 8103d96:	b085      	sub	sp, #20
 8103d98:	af00      	add	r7, sp, #0
 8103d9a:	60f8      	str	r0, [r7, #12]
 8103d9c:	60b9      	str	r1, [r7, #8]
 8103d9e:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8103da0:	68bb      	ldr	r3, [r7, #8]
 8103da2:	781a      	ldrb	r2, [r3, #0]
 8103da4:	687b      	ldr	r3, [r7, #4]
 8103da6:	781b      	ldrb	r3, [r3, #0]
 8103da8:	429a      	cmp	r2, r3
 8103daa:	bf34      	ite	cc
 8103dac:	2301      	movcc	r3, #1
 8103dae:	2300      	movcs	r3, #0
 8103db0:	b2db      	uxtb	r3, r3
 8103db2:	4618      	mov	r0, r3
 8103db4:	3714      	adds	r7, #20
 8103db6:	46bd      	mov	sp, r7
 8103db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103dbc:	4770      	bx	lr

08103dbe <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1ILb1ELb1EEES3_>:
	: _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
	constexpr
	tuple(const _Elements&... __elements)
 8103dbe:	b580      	push	{r7, lr}
 8103dc0:	b082      	sub	sp, #8
 8103dc2:	af00      	add	r7, sp, #0
 8103dc4:	6078      	str	r0, [r7, #4]
 8103dc6:	6039      	str	r1, [r7, #0]
	noexcept(__nothrow_constructible<const _Elements&...>())
	: _Inherited(__elements...) { }
 8103dc8:	687b      	ldr	r3, [r7, #4]
 8103dca:	6839      	ldr	r1, [r7, #0]
 8103dcc:	4618      	mov	r0, r3
 8103dce:	f000 fbb4 	bl	810453a <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1ES3_>
 8103dd2:	687b      	ldr	r3, [r7, #4]
 8103dd4:	4618      	mov	r0, r3
 8103dd6:	3708      	adds	r7, #8
 8103dd8:	46bd      	mov	sp, r7
 8103dda:	bd80      	pop	{r7, pc}

08103ddc <_ZNSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8103ddc:	b480      	push	{r7}
 8103dde:	b083      	sub	sp, #12
 8103de0:	af00      	add	r7, sp, #0
 8103de2:	6078      	str	r0, [r7, #4]
 8103de4:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8103de6:	683b      	ldr	r3, [r7, #0]
 8103de8:	681a      	ldr	r2, [r3, #0]
 8103dea:	687b      	ldr	r3, [r7, #4]
 8103dec:	601a      	str	r2, [r3, #0]
 8103dee:	687b      	ldr	r3, [r7, #4]
 8103df0:	4618      	mov	r0, r3
 8103df2:	370c      	adds	r7, #12
 8103df4:	46bd      	mov	sp, r7
 8103df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103dfa:	4770      	bx	lr

08103dfc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8103dfc:	b5b0      	push	{r4, r5, r7, lr}
 8103dfe:	b08c      	sub	sp, #48	@ 0x30
 8103e00:	af02      	add	r7, sp, #8
 8103e02:	60f8      	str	r0, [r7, #12]
 8103e04:	60b9      	str	r1, [r7, #8]
 8103e06:	607a      	str	r2, [r7, #4]
 8103e08:	603b      	str	r3, [r7, #0]
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
 8103e0a:	6878      	ldr	r0, [r7, #4]
 8103e0c:	f000 fba4 	bl	8104558 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8103e10:	4604      	mov	r4, r0
 8103e12:	6838      	ldr	r0, [r7, #0]
 8103e14:	f000 fbab 	bl	810456e <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8103e18:	4605      	mov	r5, r0
 8103e1a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8103e1c:	f000 fbb2 	bl	8104584 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8103e20:	4603      	mov	r3, r0
 8103e22:	f107 001c 	add.w	r0, r7, #28
 8103e26:	9300      	str	r3, [sp, #0]
 8103e28:	462b      	mov	r3, r5
 8103e2a:	4622      	mov	r2, r4
 8103e2c:	68f9      	ldr	r1, [r7, #12]
 8103e2e:	f000 fbb4 	bl	810459a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEERSC_DpOT_>
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
 8103e32:	f107 031c 	add.w	r3, r7, #28
 8103e36:	4618      	mov	r0, r3
 8103e38:	f000 f991 	bl	810415e <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>
 8103e3c:	4603      	mov	r3, r0
 8103e3e:	f107 0014 	add.w	r0, r7, #20
 8103e42:	68ba      	ldr	r2, [r7, #8]
 8103e44:	68f9      	ldr	r1, [r7, #12]
 8103e46:	f000 fbcb 	bl	81045e0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	if (__res.second)
 8103e4a:	69bb      	ldr	r3, [r7, #24]
 8103e4c:	2b00      	cmp	r3, #0
 8103e4e:	d009      	beq.n	8103e64 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x68>
	  return __z._M_insert(__res);
 8103e50:	f107 001c 	add.w	r0, r7, #28
 8103e54:	f107 0314 	add.w	r3, r7, #20
 8103e58:	e893 0006 	ldmia.w	r3, {r1, r2}
 8103e5c:	f000 f98d 	bl	810417a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>
 8103e60:	4604      	mov	r4, r0
 8103e62:	e007      	b.n	8103e74 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x78>
	return iterator(__res.first);
 8103e64:	697a      	ldr	r2, [r7, #20]
 8103e66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8103e6a:	4611      	mov	r1, r2
 8103e6c:	4618      	mov	r0, r3
 8103e6e:	f000 f9b6 	bl	81041de <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8103e72:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
      }
 8103e74:	f107 031c 	add.w	r3, r7, #28
 8103e78:	4618      	mov	r0, r3
 8103e7a:	f000 f8d6 	bl	810402a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>
 8103e7e:	4623      	mov	r3, r4
 8103e80:	4618      	mov	r0, r3
 8103e82:	3728      	adds	r7, #40	@ 0x28
 8103e84:	46bd      	mov	sp, r7
 8103e86:	bdb0      	pop	{r4, r5, r7, pc}

08103e88 <_ZSt4moveIRN19EventManagerCM4Task11EEventQueueEEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8103e88:	b480      	push	{r7}
 8103e8a:	b083      	sub	sp, #12
 8103e8c:	af00      	add	r7, sp, #0
 8103e8e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8103e90:	687b      	ldr	r3, [r7, #4]
 8103e92:	4618      	mov	r0, r3
 8103e94:	370c      	adds	r7, #12
 8103e96:	46bd      	mov	sp, r7
 8103e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e9c:	4770      	bx	lr

08103e9e <_ZNSt5tupleIJON19EventManagerCM4Task11EEventQueueEEEC1EOS3_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8103e9e:	b580      	push	{r7, lr}
 8103ea0:	b082      	sub	sp, #8
 8103ea2:	af00      	add	r7, sp, #0
 8103ea4:	6078      	str	r0, [r7, #4]
 8103ea6:	6039      	str	r1, [r7, #0]
 8103ea8:	687b      	ldr	r3, [r7, #4]
 8103eaa:	683a      	ldr	r2, [r7, #0]
 8103eac:	4611      	mov	r1, r2
 8103eae:	4618      	mov	r0, r3
 8103eb0:	f000 fcd7 	bl	8104862 <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEEC1EOS3_>
 8103eb4:	687b      	ldr	r3, [r7, #4]
 8103eb6:	4618      	mov	r0, r3
 8103eb8:	3708      	adds	r7, #8
 8103eba:	46bd      	mov	sp, r7
 8103ebc:	bd80      	pop	{r7, pc}

08103ebe <_ZSt16forward_as_tupleIJN19EventManagerCM4Task11EEventQueueEEESt5tupleIJDpOT_EES5_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  /// std::forward_as_tuple
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
 8103ebe:	b580      	push	{r7, lr}
 8103ec0:	b082      	sub	sp, #8
 8103ec2:	af00      	add	r7, sp, #0
 8103ec4:	6078      	str	r0, [r7, #4]
 8103ec6:	6039      	str	r1, [r7, #0]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 8103ec8:	6838      	ldr	r0, [r7, #0]
 8103eca:	f000 fcac 	bl	8104826 <_ZSt7forwardIN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS2_E4typeE>
 8103ece:	4603      	mov	r3, r0
 8103ed0:	4619      	mov	r1, r3
 8103ed2:	6878      	ldr	r0, [r7, #4]
 8103ed4:	f000 fcb2 	bl	810483c <_ZNSt5tupleIJON19EventManagerCM4Task11EEventQueueEEEC1IJS1_ELb1ELb1EEEDpOT_>
 8103ed8:	6878      	ldr	r0, [r7, #4]
 8103eda:	3708      	adds	r7, #8
 8103edc:	46bd      	mov	sp, r7
 8103ede:	bd80      	pop	{r7, pc}

08103ee0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8103ee0:	b5b0      	push	{r4, r5, r7, lr}
 8103ee2:	b08c      	sub	sp, #48	@ 0x30
 8103ee4:	af02      	add	r7, sp, #8
 8103ee6:	60f8      	str	r0, [r7, #12]
 8103ee8:	60b9      	str	r1, [r7, #8]
 8103eea:	607a      	str	r2, [r7, #4]
 8103eec:	603b      	str	r3, [r7, #0]
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
 8103eee:	6878      	ldr	r0, [r7, #4]
 8103ef0:	f000 fb32 	bl	8104558 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8103ef4:	4604      	mov	r4, r0
 8103ef6:	6838      	ldr	r0, [r7, #0]
 8103ef8:	f000 fcc3 	bl	8104882 <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8103efc:	4605      	mov	r5, r0
 8103efe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8103f00:	f000 fb40 	bl	8104584 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8103f04:	4603      	mov	r3, r0
 8103f06:	f107 001c 	add.w	r0, r7, #28
 8103f0a:	9300      	str	r3, [sp, #0]
 8103f0c:	462b      	mov	r3, r5
 8103f0e:	4622      	mov	r2, r4
 8103f10:	68f9      	ldr	r1, [r7, #12]
 8103f12:	f000 fcc1 	bl	8104898 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJOS1_EESI_IJEEEEERSC_DpOT_>
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
 8103f16:	f107 031c 	add.w	r3, r7, #28
 8103f1a:	4618      	mov	r0, r3
 8103f1c:	f000 f91f 	bl	810415e <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>
 8103f20:	4603      	mov	r3, r0
 8103f22:	f107 0014 	add.w	r0, r7, #20
 8103f26:	68ba      	ldr	r2, [r7, #8]
 8103f28:	68f9      	ldr	r1, [r7, #12]
 8103f2a:	f000 fb59 	bl	81045e0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	if (__res.second)
 8103f2e:	69bb      	ldr	r3, [r7, #24]
 8103f30:	2b00      	cmp	r3, #0
 8103f32:	d009      	beq.n	8103f48 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x68>
	  return __z._M_insert(__res);
 8103f34:	f107 001c 	add.w	r0, r7, #28
 8103f38:	f107 0314 	add.w	r3, r7, #20
 8103f3c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8103f40:	f000 f91b 	bl	810417a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>
 8103f44:	4604      	mov	r4, r0
 8103f46:	e007      	b.n	8103f58 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x78>
	return iterator(__res.first);
 8103f48:	697a      	ldr	r2, [r7, #20]
 8103f4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8103f4e:	4611      	mov	r1, r2
 8103f50:	4618      	mov	r0, r3
 8103f52:	f000 f944 	bl	81041de <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8103f56:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
      }
 8103f58:	f107 031c 	add.w	r3, r7, #28
 8103f5c:	4618      	mov	r0, r3
 8103f5e:	f000 f864 	bl	810402a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>
 8103f62:	4623      	mov	r3, r4
 8103f64:	4618      	mov	r0, r3
 8103f66:	3728      	adds	r7, #40	@ 0x28
 8103f68:	46bd      	mov	sp, r7
 8103f6a:	bdb0      	pop	{r4, r5, r7, pc}

08103f6c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8103f6c:	b480      	push	{r7}
 8103f6e:	b083      	sub	sp, #12
 8103f70:	af00      	add	r7, sp, #0
 8103f72:	6078      	str	r0, [r7, #4]
 8103f74:	687b      	ldr	r3, [r7, #4]
 8103f76:	4618      	mov	r0, r3
 8103f78:	370c      	adds	r7, #12
 8103f7a:	46bd      	mov	sp, r7
 8103f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f80:	4770      	bx	lr

08103f82 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8103f82:	b480      	push	{r7}
 8103f84:	b083      	sub	sp, #12
 8103f86:	af00      	add	r7, sp, #0
 8103f88:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8103f8a:	687b      	ldr	r3, [r7, #4]
 8103f8c:	68db      	ldr	r3, [r3, #12]
 8103f8e:	4618      	mov	r0, r3
 8103f90:	370c      	adds	r7, #12
 8103f92:	46bd      	mov	sp, r7
 8103f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f98:	4770      	bx	lr

08103f9a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8103f9a:	b480      	push	{r7}
 8103f9c:	b083      	sub	sp, #12
 8103f9e:	af00      	add	r7, sp, #0
 8103fa0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8103fa2:	687b      	ldr	r3, [r7, #4]
 8103fa4:	689b      	ldr	r3, [r3, #8]
 8103fa6:	4618      	mov	r0, r3
 8103fa8:	370c      	adds	r7, #12
 8103faa:	46bd      	mov	sp, r7
 8103fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fb0:	4770      	bx	lr

08103fb2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8103fb2:	b580      	push	{r7, lr}
 8103fb4:	b082      	sub	sp, #8
 8103fb6:	af00      	add	r7, sp, #0
 8103fb8:	6078      	str	r0, [r7, #4]
 8103fba:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8103fbc:	6839      	ldr	r1, [r7, #0]
 8103fbe:	6878      	ldr	r0, [r7, #4]
 8103fc0:	f000 fc8d 	bl	81048de <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8103fc4:	6839      	ldr	r1, [r7, #0]
 8103fc6:	6878      	ldr	r0, [r7, #4]
 8103fc8:	f000 fc9e 	bl	8104908 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8103fcc:	bf00      	nop
 8103fce:	3708      	adds	r7, #8
 8103fd0:	46bd      	mov	sp, r7
 8103fd2:	bd80      	pop	{r7, pc}

08103fd4 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE9_M_mbeginEv>:
      _M_mbegin() const _GLIBCXX_NOEXCEPT
 8103fd4:	b480      	push	{r7}
 8103fd6:	b083      	sub	sp, #12
 8103fd8:	af00      	add	r7, sp, #0
 8103fda:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8103fdc:	687b      	ldr	r3, [r7, #4]
 8103fde:	689b      	ldr	r3, [r3, #8]
 8103fe0:	4618      	mov	r0, r3
 8103fe2:	370c      	adds	r7, #12
 8103fe4:	46bd      	mov	sp, r7
 8103fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fea:	4770      	bx	lr

08103fec <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRS1_RS5_EEERSC_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
 8103fec:	b590      	push	{r4, r7, lr}
 8103fee:	b085      	sub	sp, #20
 8103ff0:	af00      	add	r7, sp, #0
 8103ff2:	60f8      	str	r0, [r7, #12]
 8103ff4:	60b9      	str	r1, [r7, #8]
 8103ff6:	607a      	str	r2, [r7, #4]
 8103ff8:	603b      	str	r3, [r7, #0]
	  : _M_t(__t),
 8103ffa:	68fb      	ldr	r3, [r7, #12]
 8103ffc:	68ba      	ldr	r2, [r7, #8]
 8103ffe:	601a      	str	r2, [r3, #0]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 8104000:	6878      	ldr	r0, [r7, #4]
 8104002:	f7ff fc5c 	bl	81038be <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8104006:	4604      	mov	r4, r0
 8104008:	6838      	ldr	r0, [r7, #0]
 810400a:	f7ff fc63 	bl	81038d4 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 810400e:	4603      	mov	r3, r0
 8104010:	461a      	mov	r2, r3
 8104012:	4621      	mov	r1, r4
 8104014:	68b8      	ldr	r0, [r7, #8]
 8104016:	f000 fc89 	bl	810492c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRS1_RS5_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 810401a:	4602      	mov	r2, r0
 810401c:	68fb      	ldr	r3, [r7, #12]
 810401e:	605a      	str	r2, [r3, #4]
	  { }
 8104020:	68fb      	ldr	r3, [r7, #12]
 8104022:	4618      	mov	r0, r3
 8104024:	3714      	adds	r7, #20
 8104026:	46bd      	mov	sp, r7
 8104028:	bd90      	pop	{r4, r7, pc}

0810402a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>:
	~_Auto_node()
 810402a:	b580      	push	{r7, lr}
 810402c:	b082      	sub	sp, #8
 810402e:	af00      	add	r7, sp, #0
 8104030:	6078      	str	r0, [r7, #4]
	  if (_M_node)
 8104032:	687b      	ldr	r3, [r7, #4]
 8104034:	685b      	ldr	r3, [r3, #4]
 8104036:	2b00      	cmp	r3, #0
 8104038:	d007      	beq.n	810404a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev+0x20>
	    _M_t._M_drop_node(_M_node);
 810403a:	687b      	ldr	r3, [r7, #4]
 810403c:	681a      	ldr	r2, [r3, #0]
 810403e:	687b      	ldr	r3, [r7, #4]
 8104040:	685b      	ldr	r3, [r3, #4]
 8104042:	4619      	mov	r1, r3
 8104044:	4610      	mov	r0, r2
 8104046:	f7ff ffb4 	bl	8103fb2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	}
 810404a:	687b      	ldr	r3, [r7, #4]
 810404c:	4618      	mov	r0, r3
 810404e:	3708      	adds	r7, #8
 8104050:	46bd      	mov	sp, r7
 8104052:	bd80      	pop	{r7, pc}

08104054 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8104054:	b590      	push	{r4, r7, lr}
 8104056:	b08b      	sub	sp, #44	@ 0x2c
 8104058:	af00      	add	r7, sp, #0
 810405a:	60f8      	str	r0, [r7, #12]
 810405c:	60b9      	str	r1, [r7, #8]
 810405e:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8104060:	68b8      	ldr	r0, [r7, #8]
 8104062:	f7ff fc20 	bl	81038a6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8104066:	4603      	mov	r3, r0
 8104068:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 810406a:	68b8      	ldr	r0, [r7, #8]
 810406c:	f000 f9ec 	bl	8104448 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8104070:	4603      	mov	r3, r0
 8104072:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8104074:	2301      	movs	r3, #1
 8104076:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      while (__x != 0)
 810407a:	e01f      	b.n	81040bc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x68>
	  __y = __x;
 810407c:	69bb      	ldr	r3, [r7, #24]
 810407e:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8104080:	68bc      	ldr	r4, [r7, #8]
 8104082:	69bb      	ldr	r3, [r7, #24]
 8104084:	4618      	mov	r0, r3
 8104086:	f000 fc6d 	bl	8104964 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 810408a:	4603      	mov	r3, r0
 810408c:	461a      	mov	r2, r3
 810408e:	6879      	ldr	r1, [r7, #4]
 8104090:	4620      	mov	r0, r4
 8104092:	f7ff fe7f 	bl	8103d94 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8104096:	4603      	mov	r3, r0
 8104098:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 810409c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81040a0:	2b00      	cmp	r3, #0
 81040a2:	d005      	beq.n	81040b0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x5c>
 81040a4:	69bb      	ldr	r3, [r7, #24]
 81040a6:	4618      	mov	r0, r3
 81040a8:	f7ff ff77 	bl	8103f9a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 81040ac:	4603      	mov	r3, r0
 81040ae:	e004      	b.n	81040ba <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 81040b0:	69bb      	ldr	r3, [r7, #24]
 81040b2:	4618      	mov	r0, r3
 81040b4:	f7ff ff65 	bl	8103f82 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 81040b8:	4603      	mov	r3, r0
 81040ba:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 81040bc:	69bb      	ldr	r3, [r7, #24]
 81040be:	2b00      	cmp	r3, #0
 81040c0:	d1dc      	bne.n	810407c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x28>
      iterator __j = iterator(__y);
 81040c2:	697a      	ldr	r2, [r7, #20]
 81040c4:	f107 0310 	add.w	r3, r7, #16
 81040c8:	4611      	mov	r1, r2
 81040ca:	4618      	mov	r0, r3
 81040cc:	f000 f887 	bl	81041de <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 81040d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81040d4:	2b00      	cmp	r3, #0
 81040d6:	d01d      	beq.n	8104114 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc0>
	  if (__j == begin())
 81040d8:	68b8      	ldr	r0, [r7, #8]
 81040da:	f000 fc56 	bl	810498a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 81040de:	4603      	mov	r3, r0
 81040e0:	61fb      	str	r3, [r7, #28]
 81040e2:	f107 021c 	add.w	r2, r7, #28
 81040e6:	f107 0310 	add.w	r3, r7, #16
 81040ea:	4611      	mov	r1, r2
 81040ec:	4618      	mov	r0, r3
 81040ee:	f7ff fe22 	bl	8103d36 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 81040f2:	4603      	mov	r3, r0
 81040f4:	2b00      	cmp	r3, #0
 81040f6:	d008      	beq.n	810410a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xb6>
	    return _Res(__x, __y);
 81040f8:	f107 0214 	add.w	r2, r7, #20
 81040fc:	f107 0318 	add.w	r3, r7, #24
 8104100:	4619      	mov	r1, r3
 8104102:	68f8      	ldr	r0, [r7, #12]
 8104104:	f000 fc52 	bl	81049ac <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEERS1_Lb1EEEOT_OT0_>
 8104108:	e025      	b.n	8104156 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
	    --__j;
 810410a:	f107 0310 	add.w	r3, r7, #16
 810410e:	4618      	mov	r0, r3
 8104110:	f000 fc65 	bl	81049de <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8104114:	68bc      	ldr	r4, [r7, #8]
 8104116:	693b      	ldr	r3, [r7, #16]
 8104118:	4618      	mov	r0, r3
 810411a:	f000 f9d2 	bl	81044c2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 810411e:	4603      	mov	r3, r0
 8104120:	687a      	ldr	r2, [r7, #4]
 8104122:	4619      	mov	r1, r3
 8104124:	4620      	mov	r0, r4
 8104126:	f7ff fe35 	bl	8103d94 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 810412a:	4603      	mov	r3, r0
 810412c:	2b00      	cmp	r3, #0
 810412e:	d008      	beq.n	8104142 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xee>
	return _Res(__x, __y);
 8104130:	f107 0214 	add.w	r2, r7, #20
 8104134:	f107 0318 	add.w	r3, r7, #24
 8104138:	4619      	mov	r1, r3
 810413a:	68f8      	ldr	r0, [r7, #12]
 810413c:	f000 fc36 	bl	81049ac <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEERS1_Lb1EEEOT_OT0_>
 8104140:	e009      	b.n	8104156 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
      return _Res(__j._M_node, 0);
 8104142:	2300      	movs	r3, #0
 8104144:	623b      	str	r3, [r7, #32]
 8104146:	f107 0220 	add.w	r2, r7, #32
 810414a:	f107 0310 	add.w	r3, r7, #16
 810414e:	4619      	mov	r1, r3
 8104150:	68f8      	ldr	r0, [r7, #12]
 8104152:	f000 fc55 	bl	8104a00 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8104156:	68f8      	ldr	r0, [r7, #12]
 8104158:	372c      	adds	r7, #44	@ 0x2c
 810415a:	46bd      	mov	sp, r7
 810415c:	bd90      	pop	{r4, r7, pc}

0810415e <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>:
	_M_key() const
 810415e:	b580      	push	{r7, lr}
 8104160:	b082      	sub	sp, #8
 8104162:	af00      	add	r7, sp, #0
 8104164:	6078      	str	r0, [r7, #4]
	{ return _S_key(_M_node); }
 8104166:	687b      	ldr	r3, [r7, #4]
 8104168:	685b      	ldr	r3, [r3, #4]
 810416a:	4618      	mov	r0, r3
 810416c:	f000 fbfa 	bl	8104964 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8104170:	4603      	mov	r3, r0
 8104172:	4618      	mov	r0, r3
 8104174:	3708      	adds	r7, #8
 8104176:	46bd      	mov	sp, r7
 8104178:	bd80      	pop	{r7, pc}

0810417a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>:
	_M_insert(pair<_Base_ptr, _Base_ptr> __p)
 810417a:	b580      	push	{r7, lr}
 810417c:	b086      	sub	sp, #24
 810417e:	af00      	add	r7, sp, #0
 8104180:	60f8      	str	r0, [r7, #12]
 8104182:	1d3b      	adds	r3, r7, #4
 8104184:	e883 0006 	stmia.w	r3, {r1, r2}
	  auto __it = _M_t._M_insert_node(__p.first, __p.second, _M_node);
 8104188:	68fb      	ldr	r3, [r7, #12]
 810418a:	6818      	ldr	r0, [r3, #0]
 810418c:	6879      	ldr	r1, [r7, #4]
 810418e:	68ba      	ldr	r2, [r7, #8]
 8104190:	68fb      	ldr	r3, [r7, #12]
 8104192:	685b      	ldr	r3, [r3, #4]
 8104194:	f000 fc49 	bl	8104a2a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8104198:	4603      	mov	r3, r0
 810419a:	617b      	str	r3, [r7, #20]
	  _M_node = nullptr;
 810419c:	68fb      	ldr	r3, [r7, #12]
 810419e:	2200      	movs	r2, #0
 81041a0:	605a      	str	r2, [r3, #4]
	  return __it;
 81041a2:	697b      	ldr	r3, [r7, #20]
	}
 81041a4:	4618      	mov	r0, r3
 81041a6:	3718      	adds	r7, #24
 81041a8:	46bd      	mov	sp, r7
 81041aa:	bd80      	pop	{r7, pc}

081041ac <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEbEC1IS7_bLb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 81041ac:	b580      	push	{r7, lr}
 81041ae:	b084      	sub	sp, #16
 81041b0:	af00      	add	r7, sp, #0
 81041b2:	60f8      	str	r0, [r7, #12]
 81041b4:	60b9      	str	r1, [r7, #8]
 81041b6:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 81041b8:	68b8      	ldr	r0, [r7, #8]
 81041ba:	f000 fc73 	bl	8104aa4 <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceIS9_E4typeE>
 81041be:	4602      	mov	r2, r0
 81041c0:	68fb      	ldr	r3, [r7, #12]
 81041c2:	6812      	ldr	r2, [r2, #0]
 81041c4:	601a      	str	r2, [r3, #0]
 81041c6:	6878      	ldr	r0, [r7, #4]
 81041c8:	f000 fc77 	bl	8104aba <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 81041cc:	4603      	mov	r3, r0
 81041ce:	781a      	ldrb	r2, [r3, #0]
 81041d0:	68fb      	ldr	r3, [r7, #12]
 81041d2:	711a      	strb	r2, [r3, #4]
 81041d4:	68fb      	ldr	r3, [r7, #12]
 81041d6:	4618      	mov	r0, r3
 81041d8:	3710      	adds	r7, #16
 81041da:	46bd      	mov	sp, r7
 81041dc:	bd80      	pop	{r7, pc}

081041de <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 81041de:	b480      	push	{r7}
 81041e0:	b083      	sub	sp, #12
 81041e2:	af00      	add	r7, sp, #0
 81041e4:	6078      	str	r0, [r7, #4]
 81041e6:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 81041e8:	687b      	ldr	r3, [r7, #4]
 81041ea:	683a      	ldr	r2, [r7, #0]
 81041ec:	601a      	str	r2, [r3, #0]
 81041ee:	687b      	ldr	r3, [r7, #4]
 81041f0:	4618      	mov	r0, r3
 81041f2:	370c      	adds	r7, #12
 81041f4:	46bd      	mov	sp, r7
 81041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81041fa:	4770      	bx	lr

081041fc <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 81041fc:	b480      	push	{r7}
 81041fe:	b083      	sub	sp, #12
 8104200:	af00      	add	r7, sp, #0
 8104202:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8104204:	687b      	ldr	r3, [r7, #4]
 8104206:	695b      	ldr	r3, [r3, #20]
 8104208:	4618      	mov	r0, r3
 810420a:	370c      	adds	r7, #12
 810420c:	46bd      	mov	sp, r7
 810420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104212:	4770      	bx	lr

08104214 <_ZSt8_DestroyIP8SMessageEvT_S2_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8104214:	b580      	push	{r7, lr}
 8104216:	b082      	sub	sp, #8
 8104218:	af00      	add	r7, sp, #0
 810421a:	6078      	str	r0, [r7, #4]
 810421c:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 810421e:	6839      	ldr	r1, [r7, #0]
 8104220:	6878      	ldr	r0, [r7, #4]
 8104222:	f000 fc55 	bl	8104ad0 <_ZNSt12_Destroy_auxILb1EE9__destroyIP8SMessageEEvT_S4_>
    }
 8104226:	bf00      	nop
 8104228:	3708      	adds	r7, #8
 810422a:	46bd      	mov	sp, r7
 810422c:	bd80      	pop	{r7, pc}

0810422e <_ZNSt15__new_allocatorI8SMessageEC1Ev>:
 810422e:	b480      	push	{r7}
 8104230:	b083      	sub	sp, #12
 8104232:	af00      	add	r7, sp, #0
 8104234:	6078      	str	r0, [r7, #4]
 8104236:	687b      	ldr	r3, [r7, #4]
 8104238:	4618      	mov	r0, r3
 810423a:	370c      	adds	r7, #12
 810423c:	46bd      	mov	sp, r7
 810423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104242:	4770      	bx	lr

08104244 <_ZNSt16allocator_traitsISaI8SMessageEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8104244:	b580      	push	{r7, lr}
 8104246:	b084      	sub	sp, #16
 8104248:	af00      	add	r7, sp, #0
 810424a:	60f8      	str	r0, [r7, #12]
 810424c:	60b9      	str	r1, [r7, #8]
 810424e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8104250:	687a      	ldr	r2, [r7, #4]
 8104252:	68b9      	ldr	r1, [r7, #8]
 8104254:	68f8      	ldr	r0, [r7, #12]
 8104256:	f000 fc46 	bl	8104ae6 <_ZNSt15__new_allocatorI8SMessageE10deallocateEPS0_j>
 810425a:	bf00      	nop
 810425c:	3710      	adds	r7, #16
 810425e:	46bd      	mov	sp, r7
 8104260:	bd80      	pop	{r7, pc}

08104262 <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8104262:	b480      	push	{r7}
 8104264:	b083      	sub	sp, #12
 8104266:	af00      	add	r7, sp, #0
 8104268:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810426a:	687b      	ldr	r3, [r7, #4]
 810426c:	4618      	mov	r0, r3
 810426e:	370c      	adds	r7, #12
 8104270:	46bd      	mov	sp, r7
 8104272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104276:	4770      	bx	lr

08104278 <_ZNSt15__new_allocatorI8SMessageE9constructIS0_JRKS0_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8104278:	b5b0      	push	{r4, r5, r7, lr}
 810427a:	b084      	sub	sp, #16
 810427c:	af00      	add	r7, sp, #0
 810427e:	60f8      	str	r0, [r7, #12]
 8104280:	60b9      	str	r1, [r7, #8]
 8104282:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8104284:	68bb      	ldr	r3, [r7, #8]
 8104286:	4619      	mov	r1, r3
 8104288:	201c      	movs	r0, #28
 810428a:	f7fd f84b 	bl	8101324 <_ZnwjPv>
 810428e:	4604      	mov	r4, r0
 8104290:	6878      	ldr	r0, [r7, #4]
 8104292:	f7ff ffe6 	bl	8104262 <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>
 8104296:	4603      	mov	r3, r0
 8104298:	461d      	mov	r5, r3
 810429a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810429c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810429e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 81042a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 81042a6:	bf00      	nop
 81042a8:	3710      	adds	r7, #16
 81042aa:	46bd      	mov	sp, r7
 81042ac:	bdb0      	pop	{r4, r5, r7, pc}

081042ae <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 81042ae:	b480      	push	{r7}
 81042b0:	b083      	sub	sp, #12
 81042b2:	af00      	add	r7, sp, #0
 81042b4:	6078      	str	r0, [r7, #4]
 81042b6:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 81042b8:	683b      	ldr	r3, [r7, #0]
 81042ba:	681a      	ldr	r2, [r3, #0]
 81042bc:	687b      	ldr	r3, [r7, #4]
 81042be:	601a      	str	r2, [r3, #0]
 81042c0:	687b      	ldr	r3, [r7, #4]
 81042c2:	4618      	mov	r0, r3
 81042c4:	370c      	adds	r7, #12
 81042c6:	46bd      	mov	sp, r7
 81042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042cc:	4770      	bx	lr

081042ce <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 81042ce:	b590      	push	{r4, r7, lr}
 81042d0:	b087      	sub	sp, #28
 81042d2:	af00      	add	r7, sp, #0
 81042d4:	60f8      	str	r0, [r7, #12]
 81042d6:	60b9      	str	r1, [r7, #8]
 81042d8:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 81042da:	68f8      	ldr	r0, [r7, #12]
 81042dc:	f000 fc16 	bl	8104b0c <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>
 81042e0:	4604      	mov	r4, r0
 81042e2:	68f8      	ldr	r0, [r7, #12]
 81042e4:	f000 fc24 	bl	8104b30 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 81042e8:	4603      	mov	r3, r0
 81042ea:	1ae2      	subs	r2, r4, r3
 81042ec:	68bb      	ldr	r3, [r7, #8]
 81042ee:	429a      	cmp	r2, r3
 81042f0:	bf34      	ite	cc
 81042f2:	2301      	movcc	r3, #1
 81042f4:	2300      	movcs	r3, #0
 81042f6:	b2db      	uxtb	r3, r3
 81042f8:	2b00      	cmp	r3, #0
 81042fa:	d002      	beq.n	8104302 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 81042fc:	6878      	ldr	r0, [r7, #4]
 81042fe:	f01d f946 	bl	812158e <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8104302:	68f8      	ldr	r0, [r7, #12]
 8104304:	f000 fc14 	bl	8104b30 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 8104308:	4604      	mov	r4, r0
 810430a:	68f8      	ldr	r0, [r7, #12]
 810430c:	f000 fc10 	bl	8104b30 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 8104310:	4603      	mov	r3, r0
 8104312:	613b      	str	r3, [r7, #16]
 8104314:	f107 0208 	add.w	r2, r7, #8
 8104318:	f107 0310 	add.w	r3, r7, #16
 810431c:	4611      	mov	r1, r2
 810431e:	4618      	mov	r0, r3
 8104320:	f000 fc1c 	bl	8104b5c <_ZSt3maxIjERKT_S2_S2_>
 8104324:	4603      	mov	r3, r0
 8104326:	681b      	ldr	r3, [r3, #0]
 8104328:	4423      	add	r3, r4
 810432a:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 810432c:	68f8      	ldr	r0, [r7, #12]
 810432e:	f000 fbff 	bl	8104b30 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 8104332:	4602      	mov	r2, r0
 8104334:	697b      	ldr	r3, [r7, #20]
 8104336:	4293      	cmp	r3, r2
 8104338:	d306      	bcc.n	8104348 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x7a>
 810433a:	68f8      	ldr	r0, [r7, #12]
 810433c:	f000 fbe6 	bl	8104b0c <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>
 8104340:	4602      	mov	r2, r0
 8104342:	697b      	ldr	r3, [r7, #20]
 8104344:	4293      	cmp	r3, r2
 8104346:	d904      	bls.n	8104352 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x84>
 8104348:	68f8      	ldr	r0, [r7, #12]
 810434a:	f000 fbdf 	bl	8104b0c <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>
 810434e:	4603      	mov	r3, r0
 8104350:	e000      	b.n	8104354 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x86>
 8104352:	697b      	ldr	r3, [r7, #20]
      }
 8104354:	4618      	mov	r0, r3
 8104356:	371c      	adds	r7, #28
 8104358:	46bd      	mov	sp, r7
 810435a:	bd90      	pop	{r4, r7, pc}

0810435c <_ZNSt6vectorI8SMessageSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 810435c:	b580      	push	{r7, lr}
 810435e:	b084      	sub	sp, #16
 8104360:	af00      	add	r7, sp, #0
 8104362:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8104364:	687a      	ldr	r2, [r7, #4]
 8104366:	f107 030c 	add.w	r3, r7, #12
 810436a:	4611      	mov	r1, r2
 810436c:	4618      	mov	r0, r3
 810436e:	f7ff ff9e 	bl	81042ae <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8104372:	68fb      	ldr	r3, [r7, #12]
 8104374:	4618      	mov	r0, r3
 8104376:	3710      	adds	r7, #16
 8104378:	46bd      	mov	sp, r7
 810437a:	bd80      	pop	{r7, pc}

0810437c <_ZN9__gnu_cxxmiIP8SMessageSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 810437c:	b590      	push	{r4, r7, lr}
 810437e:	b083      	sub	sp, #12
 8104380:	af00      	add	r7, sp, #0
 8104382:	6078      	str	r0, [r7, #4]
 8104384:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8104386:	6878      	ldr	r0, [r7, #4]
 8104388:	f000 f83a 	bl	8104400 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 810438c:	4603      	mov	r3, r0
 810438e:	681c      	ldr	r4, [r3, #0]
 8104390:	6838      	ldr	r0, [r7, #0]
 8104392:	f000 f835 	bl	8104400 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8104396:	4603      	mov	r3, r0
 8104398:	681b      	ldr	r3, [r3, #0]
 810439a:	1ae3      	subs	r3, r4, r3
 810439c:	109b      	asrs	r3, r3, #2
 810439e:	4a03      	ldr	r2, [pc, #12]	@ (81043ac <_ZN9__gnu_cxxmiIP8SMessageSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_+0x30>)
 81043a0:	fb02 f303 	mul.w	r3, r2, r3
 81043a4:	4618      	mov	r0, r3
 81043a6:	370c      	adds	r7, #12
 81043a8:	46bd      	mov	sp, r7
 81043aa:	bd90      	pop	{r4, r7, pc}
 81043ac:	b6db6db7 	.word	0xb6db6db7

081043b0 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 81043b0:	b580      	push	{r7, lr}
 81043b2:	b082      	sub	sp, #8
 81043b4:	af00      	add	r7, sp, #0
 81043b6:	6078      	str	r0, [r7, #4]
 81043b8:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 81043ba:	683b      	ldr	r3, [r7, #0]
 81043bc:	2b00      	cmp	r3, #0
 81043be:	d006      	beq.n	81043ce <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj+0x1e>
 81043c0:	687b      	ldr	r3, [r7, #4]
 81043c2:	6839      	ldr	r1, [r7, #0]
 81043c4:	4618      	mov	r0, r3
 81043c6:	f000 fbdd 	bl	8104b84 <_ZNSt16allocator_traitsISaI8SMessageEE8allocateERS1_j>
 81043ca:	4603      	mov	r3, r0
 81043cc:	e000      	b.n	81043d0 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj+0x20>
 81043ce:	2300      	movs	r3, #0
      }
 81043d0:	4618      	mov	r0, r3
 81043d2:	3708      	adds	r7, #8
 81043d4:	46bd      	mov	sp, r7
 81043d6:	bd80      	pop	{r7, pc}

081043d8 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 81043d8:	b590      	push	{r4, r7, lr}
 81043da:	b087      	sub	sp, #28
 81043dc:	af02      	add	r7, sp, #8
 81043de:	60f8      	str	r0, [r7, #12]
 81043e0:	60b9      	str	r1, [r7, #8]
 81043e2:	607a      	str	r2, [r7, #4]
 81043e4:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 81043e6:	f88d 4000 	strb.w	r4, [sp]
 81043ea:	683b      	ldr	r3, [r7, #0]
 81043ec:	687a      	ldr	r2, [r7, #4]
 81043ee:	68b9      	ldr	r1, [r7, #8]
 81043f0:	68f8      	ldr	r0, [r7, #12]
 81043f2:	f000 fbd6 	bl	8104ba2 <_ZNSt6vectorI8SMessageSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 81043f6:	4603      	mov	r3, r0
      }
 81043f8:	4618      	mov	r0, r3
 81043fa:	3714      	adds	r7, #20
 81043fc:	46bd      	mov	sp, r7
 81043fe:	bd90      	pop	{r4, r7, pc}

08104400 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8104400:	b480      	push	{r7}
 8104402:	b083      	sub	sp, #12
 8104404:	af00      	add	r7, sp, #0
 8104406:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8104408:	687b      	ldr	r3, [r7, #4]
 810440a:	4618      	mov	r0, r3
 810440c:	370c      	adds	r7, #12
 810440e:	46bd      	mov	sp, r7
 8104410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104414:	4770      	bx	lr

08104416 <_ZSt34__uninitialized_move_if_noexcept_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>:

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8104416:	b590      	push	{r4, r7, lr}
 8104418:	b085      	sub	sp, #20
 810441a:	af00      	add	r7, sp, #0
 810441c:	60f8      	str	r0, [r7, #12]
 810441e:	60b9      	str	r1, [r7, #8]
 8104420:	607a      	str	r2, [r7, #4]
 8104422:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8104424:	68f8      	ldr	r0, [r7, #12]
 8104426:	f000 fbce 	bl	8104bc6 <_ZSt32__make_move_if_noexcept_iteratorI8SMessageSt13move_iteratorIPS0_EET0_PT_>
 810442a:	4604      	mov	r4, r0
 810442c:	68b8      	ldr	r0, [r7, #8]
 810442e:	f000 fbca 	bl	8104bc6 <_ZSt32__make_move_if_noexcept_iteratorI8SMessageSt13move_iteratorIPS0_EET0_PT_>
 8104432:	4601      	mov	r1, r0
 8104434:	683b      	ldr	r3, [r7, #0]
 8104436:	687a      	ldr	r2, [r7, #4]
 8104438:	4620      	mov	r0, r4
 810443a:	f000 fbd3 	bl	8104be4 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP8SMessageES2_S1_ET0_T_S5_S4_RSaIT1_E>
 810443e:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8104440:	4618      	mov	r0, r3
 8104442:	3714      	adds	r7, #20
 8104444:	46bd      	mov	sp, r7
 8104446:	bd90      	pop	{r4, r7, pc}

08104448 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8104448:	b480      	push	{r7}
 810444a:	b083      	sub	sp, #12
 810444c:	af00      	add	r7, sp, #0
 810444e:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8104450:	687b      	ldr	r3, [r7, #4]
 8104452:	3304      	adds	r3, #4
 8104454:	4618      	mov	r0, r3
 8104456:	370c      	adds	r7, #12
 8104458:	46bd      	mov	sp, r7
 810445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810445e:	4770      	bx	lr

08104460 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8104460:	b590      	push	{r4, r7, lr}
 8104462:	b087      	sub	sp, #28
 8104464:	af00      	add	r7, sp, #0
 8104466:	60f8      	str	r0, [r7, #12]
 8104468:	60b9      	str	r1, [r7, #8]
 810446a:	607a      	str	r2, [r7, #4]
 810446c:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 810446e:	e01a      	b.n	81044a6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8104470:	68fc      	ldr	r4, [r7, #12]
 8104472:	68b8      	ldr	r0, [r7, #8]
 8104474:	f000 fa76 	bl	8104964 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8104478:	4603      	mov	r3, r0
 810447a:	683a      	ldr	r2, [r7, #0]
 810447c:	4619      	mov	r1, r3
 810447e:	4620      	mov	r0, r4
 8104480:	f7ff fc88 	bl	8103d94 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8104484:	4603      	mov	r3, r0
 8104486:	f083 0301 	eor.w	r3, r3, #1
 810448a:	b2db      	uxtb	r3, r3
 810448c:	2b00      	cmp	r3, #0
 810448e:	d006      	beq.n	810449e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x3e>
	  __y = __x, __x = _S_left(__x);
 8104490:	68bb      	ldr	r3, [r7, #8]
 8104492:	607b      	str	r3, [r7, #4]
 8104494:	68b8      	ldr	r0, [r7, #8]
 8104496:	f7ff fd80 	bl	8103f9a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 810449a:	60b8      	str	r0, [r7, #8]
 810449c:	e003      	b.n	81044a6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __x = _S_right(__x);
 810449e:	68b8      	ldr	r0, [r7, #8]
 81044a0:	f7ff fd6f 	bl	8103f82 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 81044a4:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 81044a6:	68bb      	ldr	r3, [r7, #8]
 81044a8:	2b00      	cmp	r3, #0
 81044aa:	d1e1      	bne.n	8104470 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x10>
      return iterator(__y);
 81044ac:	f107 0314 	add.w	r3, r7, #20
 81044b0:	6879      	ldr	r1, [r7, #4]
 81044b2:	4618      	mov	r0, r3
 81044b4:	f7ff fe93 	bl	81041de <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 81044b8:	697b      	ldr	r3, [r7, #20]
    }
 81044ba:	4618      	mov	r0, r3
 81044bc:	371c      	adds	r7, #28
 81044be:	46bd      	mov	sp, r7
 81044c0:	bd90      	pop	{r4, r7, pc}

081044c2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 81044c2:	b580      	push	{r7, lr}
 81044c4:	b082      	sub	sp, #8
 81044c6:	af00      	add	r7, sp, #0
 81044c8:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 81044ca:	6878      	ldr	r0, [r7, #4]
 81044cc:	f000 fa4a 	bl	8104964 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 81044d0:	4603      	mov	r3, r0
 81044d2:	4618      	mov	r0, r3
 81044d4:	3708      	adds	r7, #8
 81044d6:	46bd      	mov	sp, r7
 81044d8:	bd80      	pop	{r7, pc}

081044da <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 81044da:	b590      	push	{r4, r7, lr}
 81044dc:	b083      	sub	sp, #12
 81044de:	af00      	add	r7, sp, #0
 81044e0:	6078      	str	r0, [r7, #4]
 81044e2:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 81044e4:	6878      	ldr	r0, [r7, #4]
 81044e6:	f7ff f9de 	bl	81038a6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 81044ea:	4604      	mov	r4, r0
 81044ec:	6878      	ldr	r0, [r7, #4]
 81044ee:	f7ff ffab 	bl	8104448 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 81044f2:	4602      	mov	r2, r0
 81044f4:	683b      	ldr	r3, [r7, #0]
 81044f6:	4621      	mov	r1, r4
 81044f8:	6878      	ldr	r0, [r7, #4]
 81044fa:	f7ff ffb1 	bl	8104460 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 81044fe:	4603      	mov	r3, r0
 8104500:	4618      	mov	r0, r3
 8104502:	370c      	adds	r7, #12
 8104504:	46bd      	mov	sp, r7
 8104506:	bd90      	pop	{r4, r7, pc}

08104508 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 8104508:	b480      	push	{r7}
 810450a:	b083      	sub	sp, #12
 810450c:	af00      	add	r7, sp, #0
 810450e:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8104510:	bf00      	nop
 8104512:	4618      	mov	r0, r3
 8104514:	370c      	adds	r7, #12
 8104516:	46bd      	mov	sp, r7
 8104518:	f85d 7b04 	ldr.w	r7, [sp], #4
 810451c:	4770      	bx	lr

0810451e <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>:
      _M_valptr()
 810451e:	b580      	push	{r7, lr}
 8104520:	b082      	sub	sp, #8
 8104522:	af00      	add	r7, sp, #0
 8104524:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8104526:	687b      	ldr	r3, [r7, #4]
 8104528:	3310      	adds	r3, #16
 810452a:	4618      	mov	r0, r3
 810452c:	f000 fb6b 	bl	8104c06 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>
 8104530:	4603      	mov	r3, r0
 8104532:	4618      	mov	r0, r3
 8104534:	3708      	adds	r7, #8
 8104536:	46bd      	mov	sp, r7
 8104538:	bd80      	pop	{r7, pc}

0810453a <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1ES3_>:
      _Tuple_impl(const _Head& __head)
 810453a:	b580      	push	{r7, lr}
 810453c:	b082      	sub	sp, #8
 810453e:	af00      	add	r7, sp, #0
 8104540:	6078      	str	r0, [r7, #4]
 8104542:	6039      	str	r1, [r7, #0]
      : _Base(__head)
 8104544:	687b      	ldr	r3, [r7, #4]
 8104546:	6839      	ldr	r1, [r7, #0]
 8104548:	4618      	mov	r0, r3
 810454a:	f000 fb68 	bl	8104c1e <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EEC1ES3_>
      { }
 810454e:	687b      	ldr	r3, [r7, #4]
 8104550:	4618      	mov	r0, r3
 8104552:	3708      	adds	r7, #8
 8104554:	46bd      	mov	sp, r7
 8104556:	bd80      	pop	{r7, pc}

08104558 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8104558:	b480      	push	{r7}
 810455a:	b083      	sub	sp, #12
 810455c:	af00      	add	r7, sp, #0
 810455e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8104560:	687b      	ldr	r3, [r7, #4]
 8104562:	4618      	mov	r0, r3
 8104564:	370c      	adds	r7, #12
 8104566:	46bd      	mov	sp, r7
 8104568:	f85d 7b04 	ldr.w	r7, [sp], #4
 810456c:	4770      	bx	lr

0810456e <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810456e:	b480      	push	{r7}
 8104570:	b083      	sub	sp, #12
 8104572:	af00      	add	r7, sp, #0
 8104574:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8104576:	687b      	ldr	r3, [r7, #4]
 8104578:	4618      	mov	r0, r3
 810457a:	370c      	adds	r7, #12
 810457c:	46bd      	mov	sp, r7
 810457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104582:	4770      	bx	lr

08104584 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8104584:	b480      	push	{r7}
 8104586:	b083      	sub	sp, #12
 8104588:	af00      	add	r7, sp, #0
 810458a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810458c:	687b      	ldr	r3, [r7, #4]
 810458e:	4618      	mov	r0, r3
 8104590:	370c      	adds	r7, #12
 8104592:	46bd      	mov	sp, r7
 8104594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104598:	4770      	bx	lr

0810459a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEERSC_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
 810459a:	b5b0      	push	{r4, r5, r7, lr}
 810459c:	b084      	sub	sp, #16
 810459e:	af00      	add	r7, sp, #0
 81045a0:	60f8      	str	r0, [r7, #12]
 81045a2:	60b9      	str	r1, [r7, #8]
 81045a4:	607a      	str	r2, [r7, #4]
 81045a6:	603b      	str	r3, [r7, #0]
	  : _M_t(__t),
 81045a8:	68fb      	ldr	r3, [r7, #12]
 81045aa:	68ba      	ldr	r2, [r7, #8]
 81045ac:	601a      	str	r2, [r3, #0]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 81045ae:	6878      	ldr	r0, [r7, #4]
 81045b0:	f7ff ffd2 	bl	8104558 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 81045b4:	4604      	mov	r4, r0
 81045b6:	6838      	ldr	r0, [r7, #0]
 81045b8:	f7ff ffd9 	bl	810456e <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 81045bc:	4605      	mov	r5, r0
 81045be:	6a38      	ldr	r0, [r7, #32]
 81045c0:	f7ff ffe0 	bl	8104584 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 81045c4:	4603      	mov	r3, r0
 81045c6:	462a      	mov	r2, r5
 81045c8:	4621      	mov	r1, r4
 81045ca:	68b8      	ldr	r0, [r7, #8]
 81045cc:	f000 fb36 	bl	8104c3c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 81045d0:	4602      	mov	r2, r0
 81045d2:	68fb      	ldr	r3, [r7, #12]
 81045d4:	605a      	str	r2, [r3, #4]
	  { }
 81045d6:	68fb      	ldr	r3, [r7, #12]
 81045d8:	4618      	mov	r0, r3
 81045da:	3710      	adds	r7, #16
 81045dc:	46bd      	mov	sp, r7
 81045de:	bdb0      	pop	{r4, r5, r7, pc}

081045e0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 81045e0:	b590      	push	{r4, r7, lr}
 81045e2:	b08d      	sub	sp, #52	@ 0x34
 81045e4:	af00      	add	r7, sp, #0
 81045e6:	60f8      	str	r0, [r7, #12]
 81045e8:	60b9      	str	r1, [r7, #8]
 81045ea:	607a      	str	r2, [r7, #4]
 81045ec:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 81045ee:	1d3b      	adds	r3, r7, #4
 81045f0:	4618      	mov	r0, r3
 81045f2:	f000 fb46 	bl	8104c82 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE13_M_const_castEv>
 81045f6:	4603      	mov	r3, r0
 81045f8:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 81045fa:	69bc      	ldr	r4, [r7, #24]
 81045fc:	68b8      	ldr	r0, [r7, #8]
 81045fe:	f7ff ff23 	bl	8104448 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8104602:	4603      	mov	r3, r0
 8104604:	429c      	cmp	r4, r3
 8104606:	bf0c      	ite	eq
 8104608:	2301      	moveq	r3, #1
 810460a:	2300      	movne	r3, #0
 810460c:	b2db      	uxtb	r3, r3
 810460e:	2b00      	cmp	r3, #0
 8104610:	d030      	beq.n	8104674 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x94>
	  if (size() > 0
 8104612:	68b8      	ldr	r0, [r7, #8]
 8104614:	f7ff fdf2 	bl	81041fc <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 8104618:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 810461a:	2b00      	cmp	r3, #0
 810461c:	d013      	beq.n	8104646 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 810461e:	68bc      	ldr	r4, [r7, #8]
 8104620:	68b8      	ldr	r0, [r7, #8]
 8104622:	f000 fb3f 	bl	8104ca4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8104626:	4603      	mov	r3, r0
 8104628:	681b      	ldr	r3, [r3, #0]
 810462a:	4618      	mov	r0, r3
 810462c:	f7ff ff49 	bl	81044c2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8104630:	4603      	mov	r3, r0
 8104632:	683a      	ldr	r2, [r7, #0]
 8104634:	4619      	mov	r1, r3
 8104636:	4620      	mov	r0, r4
 8104638:	f7ff fbac 	bl	8103d94 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 810463c:	4603      	mov	r3, r0
 810463e:	2b00      	cmp	r3, #0
 8104640:	d001      	beq.n	8104646 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 8104642:	2301      	movs	r3, #1
 8104644:	e000      	b.n	8104648 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x68>
 8104646:	2300      	movs	r3, #0
	  if (size() > 0
 8104648:	2b00      	cmp	r3, #0
 810464a:	d00c      	beq.n	8104666 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x86>
	    return _Res(0, _M_rightmost());
 810464c:	2300      	movs	r3, #0
 810464e:	61fb      	str	r3, [r7, #28]
 8104650:	68b8      	ldr	r0, [r7, #8]
 8104652:	f000 fb27 	bl	8104ca4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8104656:	4602      	mov	r2, r0
 8104658:	f107 031c 	add.w	r3, r7, #28
 810465c:	4619      	mov	r1, r3
 810465e:	68f8      	ldr	r0, [r7, #12]
 8104660:	f000 f9ce 	bl	8104a00 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8104664:	e0db      	b.n	810481e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8104666:	68fb      	ldr	r3, [r7, #12]
 8104668:	683a      	ldr	r2, [r7, #0]
 810466a:	68b9      	ldr	r1, [r7, #8]
 810466c:	4618      	mov	r0, r3
 810466e:	f7ff fcf1 	bl	8104054 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8104672:	e0d4      	b.n	810481e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8104674:	68bc      	ldr	r4, [r7, #8]
 8104676:	69bb      	ldr	r3, [r7, #24]
 8104678:	4618      	mov	r0, r3
 810467a:	f7ff ff22 	bl	81044c2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 810467e:	4603      	mov	r3, r0
 8104680:	461a      	mov	r2, r3
 8104682:	6839      	ldr	r1, [r7, #0]
 8104684:	4620      	mov	r0, r4
 8104686:	f7ff fb85 	bl	8103d94 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 810468a:	4603      	mov	r3, r0
 810468c:	2b00      	cmp	r3, #0
 810468e:	d057      	beq.n	8104740 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	  iterator __before = __pos;
 8104690:	69bb      	ldr	r3, [r7, #24]
 8104692:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8104694:	69bc      	ldr	r4, [r7, #24]
 8104696:	68b8      	ldr	r0, [r7, #8]
 8104698:	f000 fb10 	bl	8104cbc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 810469c:	4603      	mov	r3, r0
 810469e:	681b      	ldr	r3, [r3, #0]
 81046a0:	429c      	cmp	r4, r3
 81046a2:	bf0c      	ite	eq
 81046a4:	2301      	moveq	r3, #1
 81046a6:	2300      	movne	r3, #0
 81046a8:	b2db      	uxtb	r3, r3
 81046aa:	2b00      	cmp	r3, #0
 81046ac:	d00d      	beq.n	81046ca <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 81046ae:	68b8      	ldr	r0, [r7, #8]
 81046b0:	f000 fb04 	bl	8104cbc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 81046b4:	4604      	mov	r4, r0
 81046b6:	68b8      	ldr	r0, [r7, #8]
 81046b8:	f000 fb00 	bl	8104cbc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 81046bc:	4603      	mov	r3, r0
 81046be:	461a      	mov	r2, r3
 81046c0:	4621      	mov	r1, r4
 81046c2:	68f8      	ldr	r0, [r7, #12]
 81046c4:	f000 fb06 	bl	8104cd4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 81046c8:	e0a9      	b.n	810481e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 81046ca:	68bc      	ldr	r4, [r7, #8]
 81046cc:	f107 0314 	add.w	r3, r7, #20
 81046d0:	4618      	mov	r0, r3
 81046d2:	f000 f984 	bl	81049de <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEmmEv>
 81046d6:	4603      	mov	r3, r0
 81046d8:	681b      	ldr	r3, [r3, #0]
 81046da:	4618      	mov	r0, r3
 81046dc:	f7ff fef1 	bl	81044c2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 81046e0:	4603      	mov	r3, r0
 81046e2:	683a      	ldr	r2, [r7, #0]
 81046e4:	4619      	mov	r1, r3
 81046e6:	4620      	mov	r0, r4
 81046e8:	f7ff fb54 	bl	8103d94 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 81046ec:	4603      	mov	r3, r0
 81046ee:	2b00      	cmp	r3, #0
 81046f0:	d01f      	beq.n	8104732 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x152>
	      if (_S_right(__before._M_node) == 0)
 81046f2:	697b      	ldr	r3, [r7, #20]
 81046f4:	4618      	mov	r0, r3
 81046f6:	f7ff fc44 	bl	8103f82 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 81046fa:	4603      	mov	r3, r0
 81046fc:	2b00      	cmp	r3, #0
 81046fe:	bf0c      	ite	eq
 8104700:	2301      	moveq	r3, #1
 8104702:	2300      	movne	r3, #0
 8104704:	b2db      	uxtb	r3, r3
 8104706:	2b00      	cmp	r3, #0
 8104708:	d00a      	beq.n	8104720 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x140>
		return _Res(0, __before._M_node);
 810470a:	2300      	movs	r3, #0
 810470c:	623b      	str	r3, [r7, #32]
 810470e:	f107 0214 	add.w	r2, r7, #20
 8104712:	f107 0320 	add.w	r3, r7, #32
 8104716:	4619      	mov	r1, r3
 8104718:	68f8      	ldr	r0, [r7, #12]
 810471a:	f000 f971 	bl	8104a00 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 810471e:	e07e      	b.n	810481e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8104720:	f107 0218 	add.w	r2, r7, #24
 8104724:	f107 0318 	add.w	r3, r7, #24
 8104728:	4619      	mov	r1, r3
 810472a:	68f8      	ldr	r0, [r7, #12]
 810472c:	f000 fad2 	bl	8104cd4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8104730:	e075      	b.n	810481e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8104732:	68fb      	ldr	r3, [r7, #12]
 8104734:	683a      	ldr	r2, [r7, #0]
 8104736:	68b9      	ldr	r1, [r7, #8]
 8104738:	4618      	mov	r0, r3
 810473a:	f7ff fc8b 	bl	8104054 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 810473e:	e06e      	b.n	810481e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8104740:	68bc      	ldr	r4, [r7, #8]
 8104742:	69bb      	ldr	r3, [r7, #24]
 8104744:	4618      	mov	r0, r3
 8104746:	f7ff febc 	bl	81044c2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 810474a:	4603      	mov	r3, r0
 810474c:	683a      	ldr	r2, [r7, #0]
 810474e:	4619      	mov	r1, r3
 8104750:	4620      	mov	r0, r4
 8104752:	f7ff fb1f 	bl	8103d94 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8104756:	4603      	mov	r3, r0
 8104758:	2b00      	cmp	r3, #0
 810475a:	d056      	beq.n	810480a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x22a>
	  iterator __after = __pos;
 810475c:	69bb      	ldr	r3, [r7, #24]
 810475e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8104760:	69bc      	ldr	r4, [r7, #24]
 8104762:	68b8      	ldr	r0, [r7, #8]
 8104764:	f000 fa9e 	bl	8104ca4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8104768:	4603      	mov	r3, r0
 810476a:	681b      	ldr	r3, [r3, #0]
 810476c:	429c      	cmp	r4, r3
 810476e:	bf0c      	ite	eq
 8104770:	2301      	moveq	r3, #1
 8104772:	2300      	movne	r3, #0
 8104774:	b2db      	uxtb	r3, r3
 8104776:	2b00      	cmp	r3, #0
 8104778:	d00c      	beq.n	8104794 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1b4>
	    return _Res(0, _M_rightmost());
 810477a:	2300      	movs	r3, #0
 810477c:	627b      	str	r3, [r7, #36]	@ 0x24
 810477e:	68b8      	ldr	r0, [r7, #8]
 8104780:	f000 fa90 	bl	8104ca4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8104784:	4602      	mov	r2, r0
 8104786:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810478a:	4619      	mov	r1, r3
 810478c:	68f8      	ldr	r0, [r7, #12]
 810478e:	f000 f937 	bl	8104a00 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8104792:	e044      	b.n	810481e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8104794:	68bc      	ldr	r4, [r7, #8]
 8104796:	f107 0310 	add.w	r3, r7, #16
 810479a:	4618      	mov	r0, r3
 810479c:	f000 fab3 	bl	8104d06 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEppEv>
 81047a0:	4603      	mov	r3, r0
 81047a2:	681b      	ldr	r3, [r3, #0]
 81047a4:	4618      	mov	r0, r3
 81047a6:	f7ff fe8c 	bl	81044c2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 81047aa:	4603      	mov	r3, r0
 81047ac:	461a      	mov	r2, r3
 81047ae:	6839      	ldr	r1, [r7, #0]
 81047b0:	4620      	mov	r0, r4
 81047b2:	f7ff faef 	bl	8103d94 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 81047b6:	4603      	mov	r3, r0
 81047b8:	2b00      	cmp	r3, #0
 81047ba:	d01f      	beq.n	81047fc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 81047bc:	69bb      	ldr	r3, [r7, #24]
 81047be:	4618      	mov	r0, r3
 81047c0:	f7ff fbdf 	bl	8103f82 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 81047c4:	4603      	mov	r3, r0
 81047c6:	2b00      	cmp	r3, #0
 81047c8:	bf0c      	ite	eq
 81047ca:	2301      	moveq	r3, #1
 81047cc:	2300      	movne	r3, #0
 81047ce:	b2db      	uxtb	r3, r3
 81047d0:	2b00      	cmp	r3, #0
 81047d2:	d00a      	beq.n	81047ea <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x20a>
		return _Res(0, __pos._M_node);
 81047d4:	2300      	movs	r3, #0
 81047d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 81047d8:	f107 0218 	add.w	r2, r7, #24
 81047dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81047e0:	4619      	mov	r1, r3
 81047e2:	68f8      	ldr	r0, [r7, #12]
 81047e4:	f000 f90c 	bl	8104a00 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 81047e8:	e019      	b.n	810481e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 81047ea:	f107 0210 	add.w	r2, r7, #16
 81047ee:	f107 0310 	add.w	r3, r7, #16
 81047f2:	4619      	mov	r1, r3
 81047f4:	68f8      	ldr	r0, [r7, #12]
 81047f6:	f000 fa6d 	bl	8104cd4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 81047fa:	e010      	b.n	810481e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 81047fc:	68fb      	ldr	r3, [r7, #12]
 81047fe:	683a      	ldr	r2, [r7, #0]
 8104800:	68b9      	ldr	r1, [r7, #8]
 8104802:	4618      	mov	r0, r3
 8104804:	f7ff fc26 	bl	8104054 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8104808:	e009      	b.n	810481e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	return _Res(__pos._M_node, 0);
 810480a:	2300      	movs	r3, #0
 810480c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810480e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8104812:	f107 0318 	add.w	r3, r7, #24
 8104816:	4619      	mov	r1, r3
 8104818:	68f8      	ldr	r0, [r7, #12]
 810481a:	f000 f8f1 	bl	8104a00 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 810481e:	68f8      	ldr	r0, [r7, #12]
 8104820:	3734      	adds	r7, #52	@ 0x34
 8104822:	46bd      	mov	sp, r7
 8104824:	bd90      	pop	{r4, r7, pc}

08104826 <_ZSt7forwardIN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8104826:	b480      	push	{r7}
 8104828:	b083      	sub	sp, #12
 810482a:	af00      	add	r7, sp, #0
 810482c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810482e:	687b      	ldr	r3, [r7, #4]
 8104830:	4618      	mov	r0, r3
 8104832:	370c      	adds	r7, #12
 8104834:	46bd      	mov	sp, r7
 8104836:	f85d 7b04 	ldr.w	r7, [sp], #4
 810483a:	4770      	bx	lr

0810483c <_ZNSt5tupleIJON19EventManagerCM4Task11EEventQueueEEEC1IJS1_ELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
 810483c:	b590      	push	{r4, r7, lr}
 810483e:	b083      	sub	sp, #12
 8104840:	af00      	add	r7, sp, #0
 8104842:	6078      	str	r0, [r7, #4]
 8104844:	6039      	str	r1, [r7, #0]
	: _Inherited(std::forward<_UElements>(__elements)...) { }
 8104846:	687c      	ldr	r4, [r7, #4]
 8104848:	6838      	ldr	r0, [r7, #0]
 810484a:	f7ff ffec 	bl	8104826 <_ZSt7forwardIN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS2_E4typeE>
 810484e:	4603      	mov	r3, r0
 8104850:	4619      	mov	r1, r3
 8104852:	4620      	mov	r0, r4
 8104854:	f000 fa68 	bl	8104d28 <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEEC1IS1_EEOT_>
 8104858:	687b      	ldr	r3, [r7, #4]
 810485a:	4618      	mov	r0, r3
 810485c:	370c      	adds	r7, #12
 810485e:	46bd      	mov	sp, r7
 8104860:	bd90      	pop	{r4, r7, pc}

08104862 <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEEC1EOS3_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8104862:	b480      	push	{r7}
 8104864:	b083      	sub	sp, #12
 8104866:	af00      	add	r7, sp, #0
 8104868:	6078      	str	r0, [r7, #4]
 810486a:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 810486c:	687b      	ldr	r3, [r7, #4]
 810486e:	683a      	ldr	r2, [r7, #0]
 8104870:	6812      	ldr	r2, [r2, #0]
 8104872:	601a      	str	r2, [r3, #0]
      { }
 8104874:	687b      	ldr	r3, [r7, #4]
 8104876:	4618      	mov	r0, r3
 8104878:	370c      	adds	r7, #12
 810487a:	46bd      	mov	sp, r7
 810487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104880:	4770      	bx	lr

08104882 <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8104882:	b480      	push	{r7}
 8104884:	b083      	sub	sp, #12
 8104886:	af00      	add	r7, sp, #0
 8104888:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810488a:	687b      	ldr	r3, [r7, #4]
 810488c:	4618      	mov	r0, r3
 810488e:	370c      	adds	r7, #12
 8104890:	46bd      	mov	sp, r7
 8104892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104896:	4770      	bx	lr

08104898 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJOS1_EESI_IJEEEEERSC_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
 8104898:	b5b0      	push	{r4, r5, r7, lr}
 810489a:	b084      	sub	sp, #16
 810489c:	af00      	add	r7, sp, #0
 810489e:	60f8      	str	r0, [r7, #12]
 81048a0:	60b9      	str	r1, [r7, #8]
 81048a2:	607a      	str	r2, [r7, #4]
 81048a4:	603b      	str	r3, [r7, #0]
	  : _M_t(__t),
 81048a6:	68fb      	ldr	r3, [r7, #12]
 81048a8:	68ba      	ldr	r2, [r7, #8]
 81048aa:	601a      	str	r2, [r3, #0]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 81048ac:	6878      	ldr	r0, [r7, #4]
 81048ae:	f7ff fe53 	bl	8104558 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 81048b2:	4604      	mov	r4, r0
 81048b4:	6838      	ldr	r0, [r7, #0]
 81048b6:	f7ff ffe4 	bl	8104882 <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 81048ba:	4605      	mov	r5, r0
 81048bc:	6a38      	ldr	r0, [r7, #32]
 81048be:	f7ff fe61 	bl	8104584 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 81048c2:	4603      	mov	r3, r0
 81048c4:	462a      	mov	r2, r5
 81048c6:	4621      	mov	r1, r4
 81048c8:	68b8      	ldr	r0, [r7, #8]
 81048ca:	f000 fa40 	bl	8104d4e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 81048ce:	4602      	mov	r2, r0
 81048d0:	68fb      	ldr	r3, [r7, #12]
 81048d2:	605a      	str	r2, [r3, #4]
	  { }
 81048d4:	68fb      	ldr	r3, [r7, #12]
 81048d6:	4618      	mov	r0, r3
 81048d8:	3710      	adds	r7, #16
 81048da:	46bd      	mov	sp, r7
 81048dc:	bdb0      	pop	{r4, r5, r7, pc}

081048de <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 81048de:	b590      	push	{r4, r7, lr}
 81048e0:	b083      	sub	sp, #12
 81048e2:	af00      	add	r7, sp, #0
 81048e4:	6078      	str	r0, [r7, #4]
 81048e6:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 81048e8:	6878      	ldr	r0, [r7, #4]
 81048ea:	f000 fa53 	bl	8104d94 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 81048ee:	4604      	mov	r4, r0
 81048f0:	6838      	ldr	r0, [r7, #0]
 81048f2:	f7ff fe14 	bl	810451e <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 81048f6:	4603      	mov	r3, r0
 81048f8:	4619      	mov	r1, r3
 81048fa:	4620      	mov	r0, r4
 81048fc:	f000 fa55 	bl	8104daa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE7destroyIS7_EEvRS9_PT_>
      }
 8104900:	bf00      	nop
 8104902:	370c      	adds	r7, #12
 8104904:	46bd      	mov	sp, r7
 8104906:	bd90      	pop	{r4, r7, pc}

08104908 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8104908:	b580      	push	{r7, lr}
 810490a:	b082      	sub	sp, #8
 810490c:	af00      	add	r7, sp, #0
 810490e:	6078      	str	r0, [r7, #4]
 8104910:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8104912:	6878      	ldr	r0, [r7, #4]
 8104914:	f000 fa3e 	bl	8104d94 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8104918:	4603      	mov	r3, r0
 810491a:	2201      	movs	r2, #1
 810491c:	6839      	ldr	r1, [r7, #0]
 810491e:	4618      	mov	r0, r3
 8104920:	f000 fa50 	bl	8104dc4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE10deallocateERS9_PS8_j>
 8104924:	bf00      	nop
 8104926:	3708      	adds	r7, #8
 8104928:	46bd      	mov	sp, r7
 810492a:	bd80      	pop	{r7, pc}

0810492c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRS1_RS5_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 810492c:	b590      	push	{r4, r7, lr}
 810492e:	b087      	sub	sp, #28
 8104930:	af00      	add	r7, sp, #0
 8104932:	60f8      	str	r0, [r7, #12]
 8104934:	60b9      	str	r1, [r7, #8]
 8104936:	607a      	str	r2, [r7, #4]
	  _Link_type __tmp = _M_get_node();
 8104938:	68f8      	ldr	r0, [r7, #12]
 810493a:	f000 fa52 	bl	8104de2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 810493e:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8104940:	68b8      	ldr	r0, [r7, #8]
 8104942:	f7fe ffbc 	bl	81038be <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8104946:	4604      	mov	r4, r0
 8104948:	6878      	ldr	r0, [r7, #4]
 810494a:	f7fe ffc3 	bl	81038d4 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 810494e:	4603      	mov	r3, r0
 8104950:	4622      	mov	r2, r4
 8104952:	6979      	ldr	r1, [r7, #20]
 8104954:	68f8      	ldr	r0, [r7, #12]
 8104956:	f000 fa55 	bl	8104e04 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRS1_RS5_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 810495a:	697b      	ldr	r3, [r7, #20]
	}
 810495c:	4618      	mov	r0, r3
 810495e:	371c      	adds	r7, #28
 8104960:	46bd      	mov	sp, r7
 8104962:	bd90      	pop	{r4, r7, pc}

08104964 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 8104964:	b580      	push	{r7, lr}
 8104966:	b084      	sub	sp, #16
 8104968:	af00      	add	r7, sp, #0
 810496a:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 810496c:	6878      	ldr	r0, [r7, #4]
 810496e:	f000 fa6e 	bl	8104e4e <_ZNKSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 8104972:	4602      	mov	r2, r0
 8104974:	f107 030c 	add.w	r3, r7, #12
 8104978:	4611      	mov	r1, r2
 810497a:	4618      	mov	r0, r3
 810497c:	f000 fa75 	bl	8104e6a <_ZNKSt10_Select1stISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEclERKS6_>
 8104980:	4603      	mov	r3, r0
      }
 8104982:	4618      	mov	r0, r3
 8104984:	3710      	adds	r7, #16
 8104986:	46bd      	mov	sp, r7
 8104988:	bd80      	pop	{r7, pc}

0810498a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 810498a:	b580      	push	{r7, lr}
 810498c:	b084      	sub	sp, #16
 810498e:	af00      	add	r7, sp, #0
 8104990:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8104992:	687b      	ldr	r3, [r7, #4]
 8104994:	68da      	ldr	r2, [r3, #12]
 8104996:	f107 030c 	add.w	r3, r7, #12
 810499a:	4611      	mov	r1, r2
 810499c:	4618      	mov	r0, r3
 810499e:	f7ff fc1e 	bl	81041de <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 81049a2:	68fb      	ldr	r3, [r7, #12]
 81049a4:	4618      	mov	r0, r3
 81049a6:	3710      	adds	r7, #16
 81049a8:	46bd      	mov	sp, r7
 81049aa:	bd80      	pop	{r7, pc}

081049ac <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 81049ac:	b580      	push	{r7, lr}
 81049ae:	b084      	sub	sp, #16
 81049b0:	af00      	add	r7, sp, #0
 81049b2:	60f8      	str	r0, [r7, #12]
 81049b4:	60b9      	str	r1, [r7, #8]
 81049b6:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 81049b8:	68b8      	ldr	r0, [r7, #8]
 81049ba:	f000 fa62 	bl	8104e82 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceISB_E4typeE>
 81049be:	4603      	mov	r3, r0
 81049c0:	681a      	ldr	r2, [r3, #0]
 81049c2:	68fb      	ldr	r3, [r7, #12]
 81049c4:	601a      	str	r2, [r3, #0]
 81049c6:	6878      	ldr	r0, [r7, #4]
 81049c8:	f000 fa66 	bl	8104e98 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 81049cc:	4603      	mov	r3, r0
 81049ce:	681a      	ldr	r2, [r3, #0]
 81049d0:	68fb      	ldr	r3, [r7, #12]
 81049d2:	605a      	str	r2, [r3, #4]
 81049d4:	68fb      	ldr	r3, [r7, #12]
 81049d6:	4618      	mov	r0, r3
 81049d8:	3710      	adds	r7, #16
 81049da:	46bd      	mov	sp, r7
 81049dc:	bd80      	pop	{r7, pc}

081049de <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 81049de:	b580      	push	{r7, lr}
 81049e0:	b082      	sub	sp, #8
 81049e2:	af00      	add	r7, sp, #0
 81049e4:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 81049e6:	687b      	ldr	r3, [r7, #4]
 81049e8:	681b      	ldr	r3, [r3, #0]
 81049ea:	4618      	mov	r0, r3
 81049ec:	f01c fd63 	bl	81214b6 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 81049f0:	4602      	mov	r2, r0
 81049f2:	687b      	ldr	r3, [r7, #4]
 81049f4:	601a      	str	r2, [r3, #0]
	return *this;
 81049f6:	687b      	ldr	r3, [r7, #4]
      }
 81049f8:	4618      	mov	r0, r3
 81049fa:	3708      	adds	r7, #8
 81049fc:	46bd      	mov	sp, r7
 81049fe:	bd80      	pop	{r7, pc}

08104a00 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>:
      constexpr pair(const _T1& __a, const _T2& __b)
 8104a00:	b480      	push	{r7}
 8104a02:	b085      	sub	sp, #20
 8104a04:	af00      	add	r7, sp, #0
 8104a06:	60f8      	str	r0, [r7, #12]
 8104a08:	60b9      	str	r1, [r7, #8]
 8104a0a:	607a      	str	r2, [r7, #4]
      : first(__a), second(__b) { }
 8104a0c:	68bb      	ldr	r3, [r7, #8]
 8104a0e:	681a      	ldr	r2, [r3, #0]
 8104a10:	68fb      	ldr	r3, [r7, #12]
 8104a12:	601a      	str	r2, [r3, #0]
 8104a14:	687b      	ldr	r3, [r7, #4]
 8104a16:	681a      	ldr	r2, [r3, #0]
 8104a18:	68fb      	ldr	r3, [r7, #12]
 8104a1a:	605a      	str	r2, [r3, #4]
 8104a1c:	68fb      	ldr	r3, [r7, #12]
 8104a1e:	4618      	mov	r0, r3
 8104a20:	3714      	adds	r7, #20
 8104a22:	46bd      	mov	sp, r7
 8104a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a28:	4770      	bx	lr

08104a2a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8104a2a:	b5b0      	push	{r4, r5, r7, lr}
 8104a2c:	b086      	sub	sp, #24
 8104a2e:	af00      	add	r7, sp, #0
 8104a30:	60f8      	str	r0, [r7, #12]
 8104a32:	60b9      	str	r1, [r7, #8]
 8104a34:	607a      	str	r2, [r7, #4]
 8104a36:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8104a38:	68bb      	ldr	r3, [r7, #8]
 8104a3a:	2b00      	cmp	r3, #0
 8104a3c:	d117      	bne.n	8104a6e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8104a3e:	68f8      	ldr	r0, [r7, #12]
 8104a40:	f7ff fd02 	bl	8104448 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8104a44:	4602      	mov	r2, r0
 8104a46:	687b      	ldr	r3, [r7, #4]
 8104a48:	4293      	cmp	r3, r2
 8104a4a:	d010      	beq.n	8104a6e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 8104a4c:	68fc      	ldr	r4, [r7, #12]
 8104a4e:	6838      	ldr	r0, [r7, #0]
 8104a50:	f7ff ff88 	bl	8104964 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8104a54:	4605      	mov	r5, r0
 8104a56:	6878      	ldr	r0, [r7, #4]
 8104a58:	f7ff fd33 	bl	81044c2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8104a5c:	4603      	mov	r3, r0
 8104a5e:	461a      	mov	r2, r3
 8104a60:	4629      	mov	r1, r5
 8104a62:	4620      	mov	r0, r4
 8104a64:	f7ff f996 	bl	8103d94 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8104a68:	4603      	mov	r3, r0
 8104a6a:	2b00      	cmp	r3, #0
 8104a6c:	d001      	beq.n	8104a72 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
 8104a6e:	2301      	movs	r3, #1
 8104a70:	e000      	b.n	8104a74 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4a>
 8104a72:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8104a74:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8104a76:	68fb      	ldr	r3, [r7, #12]
 8104a78:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8104a7a:	7df8      	ldrb	r0, [r7, #23]
 8104a7c:	687a      	ldr	r2, [r7, #4]
 8104a7e:	6839      	ldr	r1, [r7, #0]
 8104a80:	f01c fd1b 	bl	81214ba <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8104a84:	68fb      	ldr	r3, [r7, #12]
 8104a86:	695b      	ldr	r3, [r3, #20]
 8104a88:	1c5a      	adds	r2, r3, #1
 8104a8a:	68fb      	ldr	r3, [r7, #12]
 8104a8c:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8104a8e:	f107 0310 	add.w	r3, r7, #16
 8104a92:	6839      	ldr	r1, [r7, #0]
 8104a94:	4618      	mov	r0, r3
 8104a96:	f7ff fba2 	bl	81041de <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8104a9a:	693b      	ldr	r3, [r7, #16]
    }
 8104a9c:	4618      	mov	r0, r3
 8104a9e:	3718      	adds	r7, #24
 8104aa0:	46bd      	mov	sp, r7
 8104aa2:	bdb0      	pop	{r4, r5, r7, pc}

08104aa4 <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8104aa4:	b480      	push	{r7}
 8104aa6:	b083      	sub	sp, #12
 8104aa8:	af00      	add	r7, sp, #0
 8104aaa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8104aac:	687b      	ldr	r3, [r7, #4]
 8104aae:	4618      	mov	r0, r3
 8104ab0:	370c      	adds	r7, #12
 8104ab2:	46bd      	mov	sp, r7
 8104ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ab8:	4770      	bx	lr

08104aba <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8104aba:	b480      	push	{r7}
 8104abc:	b083      	sub	sp, #12
 8104abe:	af00      	add	r7, sp, #0
 8104ac0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8104ac2:	687b      	ldr	r3, [r7, #4]
 8104ac4:	4618      	mov	r0, r3
 8104ac6:	370c      	adds	r7, #12
 8104ac8:	46bd      	mov	sp, r7
 8104aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ace:	4770      	bx	lr

08104ad0 <_ZNSt12_Destroy_auxILb1EE9__destroyIP8SMessageEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8104ad0:	b480      	push	{r7}
 8104ad2:	b083      	sub	sp, #12
 8104ad4:	af00      	add	r7, sp, #0
 8104ad6:	6078      	str	r0, [r7, #4]
 8104ad8:	6039      	str	r1, [r7, #0]
 8104ada:	bf00      	nop
 8104adc:	370c      	adds	r7, #12
 8104ade:	46bd      	mov	sp, r7
 8104ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ae4:	4770      	bx	lr

08104ae6 <_ZNSt15__new_allocatorI8SMessageE10deallocateEPS0_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8104ae6:	b580      	push	{r7, lr}
 8104ae8:	b084      	sub	sp, #16
 8104aea:	af00      	add	r7, sp, #0
 8104aec:	60f8      	str	r0, [r7, #12]
 8104aee:	60b9      	str	r1, [r7, #8]
 8104af0:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8104af2:	687a      	ldr	r2, [r7, #4]
 8104af4:	4613      	mov	r3, r2
 8104af6:	00db      	lsls	r3, r3, #3
 8104af8:	1a9b      	subs	r3, r3, r2
 8104afa:	009b      	lsls	r3, r3, #2
 8104afc:	4619      	mov	r1, r3
 8104afe:	68b8      	ldr	r0, [r7, #8]
 8104b00:	f01c fc60 	bl	81213c4 <_ZdlPvj>
      }
 8104b04:	bf00      	nop
 8104b06:	3710      	adds	r7, #16
 8104b08:	46bd      	mov	sp, r7
 8104b0a:	bd80      	pop	{r7, pc}

08104b0c <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8104b0c:	b580      	push	{r7, lr}
 8104b0e:	b082      	sub	sp, #8
 8104b10:	af00      	add	r7, sp, #0
 8104b12:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8104b14:	687b      	ldr	r3, [r7, #4]
 8104b16:	4618      	mov	r0, r3
 8104b18:	f000 f9e6 	bl	8104ee8 <_ZNKSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8104b1c:	4603      	mov	r3, r0
 8104b1e:	4618      	mov	r0, r3
 8104b20:	f000 f9c6 	bl	8104eb0 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_max_sizeERKS1_>
 8104b24:	4603      	mov	r3, r0
 8104b26:	4618      	mov	r0, r3
 8104b28:	3708      	adds	r7, #8
 8104b2a:	46bd      	mov	sp, r7
 8104b2c:	bd80      	pop	{r7, pc}
	...

08104b30 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8104b30:	b480      	push	{r7}
 8104b32:	b083      	sub	sp, #12
 8104b34:	af00      	add	r7, sp, #0
 8104b36:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8104b38:	687b      	ldr	r3, [r7, #4]
 8104b3a:	685a      	ldr	r2, [r3, #4]
 8104b3c:	687b      	ldr	r3, [r7, #4]
 8104b3e:	681b      	ldr	r3, [r3, #0]
 8104b40:	1ad3      	subs	r3, r2, r3
 8104b42:	109b      	asrs	r3, r3, #2
 8104b44:	4a04      	ldr	r2, [pc, #16]	@ (8104b58 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv+0x28>)
 8104b46:	fb02 f303 	mul.w	r3, r2, r3
 8104b4a:	4618      	mov	r0, r3
 8104b4c:	370c      	adds	r7, #12
 8104b4e:	46bd      	mov	sp, r7
 8104b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b54:	4770      	bx	lr
 8104b56:	bf00      	nop
 8104b58:	b6db6db7 	.word	0xb6db6db7

08104b5c <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8104b5c:	b480      	push	{r7}
 8104b5e:	b083      	sub	sp, #12
 8104b60:	af00      	add	r7, sp, #0
 8104b62:	6078      	str	r0, [r7, #4]
 8104b64:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8104b66:	687b      	ldr	r3, [r7, #4]
 8104b68:	681a      	ldr	r2, [r3, #0]
 8104b6a:	683b      	ldr	r3, [r7, #0]
 8104b6c:	681b      	ldr	r3, [r3, #0]
 8104b6e:	429a      	cmp	r2, r3
 8104b70:	d201      	bcs.n	8104b76 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8104b72:	683b      	ldr	r3, [r7, #0]
 8104b74:	e000      	b.n	8104b78 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8104b76:	687b      	ldr	r3, [r7, #4]
    }
 8104b78:	4618      	mov	r0, r3
 8104b7a:	370c      	adds	r7, #12
 8104b7c:	46bd      	mov	sp, r7
 8104b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b82:	4770      	bx	lr

08104b84 <_ZNSt16allocator_traitsISaI8SMessageEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8104b84:	b580      	push	{r7, lr}
 8104b86:	b082      	sub	sp, #8
 8104b88:	af00      	add	r7, sp, #0
 8104b8a:	6078      	str	r0, [r7, #4]
 8104b8c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8104b8e:	2200      	movs	r2, #0
 8104b90:	6839      	ldr	r1, [r7, #0]
 8104b92:	6878      	ldr	r0, [r7, #4]
 8104b94:	f000 f9b4 	bl	8104f00 <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv>
 8104b98:	4603      	mov	r3, r0
 8104b9a:	4618      	mov	r0, r3
 8104b9c:	3708      	adds	r7, #8
 8104b9e:	46bd      	mov	sp, r7
 8104ba0:	bd80      	pop	{r7, pc}

08104ba2 <_ZNSt6vectorI8SMessageSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8104ba2:	b580      	push	{r7, lr}
 8104ba4:	b084      	sub	sp, #16
 8104ba6:	af00      	add	r7, sp, #0
 8104ba8:	60f8      	str	r0, [r7, #12]
 8104baa:	60b9      	str	r1, [r7, #8]
 8104bac:	607a      	str	r2, [r7, #4]
 8104bae:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8104bb0:	683b      	ldr	r3, [r7, #0]
 8104bb2:	687a      	ldr	r2, [r7, #4]
 8104bb4:	68b9      	ldr	r1, [r7, #8]
 8104bb6:	68f8      	ldr	r0, [r7, #12]
 8104bb8:	f000 f9d0 	bl	8104f5c <_ZSt12__relocate_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>
 8104bbc:	4603      	mov	r3, r0
      }
 8104bbe:	4618      	mov	r0, r3
 8104bc0:	3710      	adds	r7, #16
 8104bc2:	46bd      	mov	sp, r7
 8104bc4:	bd80      	pop	{r7, pc}

08104bc6 <_ZSt32__make_move_if_noexcept_iteratorI8SMessageSt13move_iteratorIPS0_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = __conditional_t<__move_if_noexcept_cond<_Tp>::value,
		      const _Tp*, move_iterator<_Tp*>>>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8104bc6:	b580      	push	{r7, lr}
 8104bc8:	b084      	sub	sp, #16
 8104bca:	af00      	add	r7, sp, #0
 8104bcc:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8104bce:	f107 030c 	add.w	r3, r7, #12
 8104bd2:	6879      	ldr	r1, [r7, #4]
 8104bd4:	4618      	mov	r0, r3
 8104bd6:	f000 f9de 	bl	8104f96 <_ZNSt13move_iteratorIP8SMessageEC1ES1_>
 8104bda:	68fb      	ldr	r3, [r7, #12]
 8104bdc:	4618      	mov	r0, r3
 8104bde:	3710      	adds	r7, #16
 8104be0:	46bd      	mov	sp, r7
 8104be2:	bd80      	pop	{r7, pc}

08104be4 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP8SMessageES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8104be4:	b580      	push	{r7, lr}
 8104be6:	b084      	sub	sp, #16
 8104be8:	af00      	add	r7, sp, #0
 8104bea:	60f8      	str	r0, [r7, #12]
 8104bec:	60b9      	str	r1, [r7, #8]
 8104bee:	607a      	str	r2, [r7, #4]
 8104bf0:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 8104bf2:	687a      	ldr	r2, [r7, #4]
 8104bf4:	68b9      	ldr	r1, [r7, #8]
 8104bf6:	68f8      	ldr	r0, [r7, #12]
 8104bf8:	f000 f9df 	bl	8104fba <_ZSt18uninitialized_copyISt13move_iteratorIP8SMessageES2_ET0_T_S5_S4_>
 8104bfc:	4603      	mov	r3, r0
    }
 8104bfe:	4618      	mov	r0, r3
 8104c00:	3710      	adds	r7, #16
 8104c02:	46bd      	mov	sp, r7
 8104c04:	bd80      	pop	{r7, pc}

08104c06 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8104c06:	b580      	push	{r7, lr}
 8104c08:	b082      	sub	sp, #8
 8104c0a:	af00      	add	r7, sp, #0
 8104c0c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8104c0e:	6878      	ldr	r0, [r7, #4]
 8104c10:	f000 f9e7 	bl	8104fe2 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>
 8104c14:	4603      	mov	r3, r0
 8104c16:	4618      	mov	r0, r3
 8104c18:	3708      	adds	r7, #8
 8104c1a:	46bd      	mov	sp, r7
 8104c1c:	bd80      	pop	{r7, pc}

08104c1e <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EEC1ES3_>:
      constexpr _Head_base(const _Head& __h)
 8104c1e:	b480      	push	{r7}
 8104c20:	b083      	sub	sp, #12
 8104c22:	af00      	add	r7, sp, #0
 8104c24:	6078      	str	r0, [r7, #4]
 8104c26:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 8104c28:	687b      	ldr	r3, [r7, #4]
 8104c2a:	683a      	ldr	r2, [r7, #0]
 8104c2c:	601a      	str	r2, [r3, #0]
 8104c2e:	687b      	ldr	r3, [r7, #4]
 8104c30:	4618      	mov	r0, r3
 8104c32:	370c      	adds	r7, #12
 8104c34:	46bd      	mov	sp, r7
 8104c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c3a:	4770      	bx	lr

08104c3c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8104c3c:	b5b0      	push	{r4, r5, r7, lr}
 8104c3e:	b088      	sub	sp, #32
 8104c40:	af02      	add	r7, sp, #8
 8104c42:	60f8      	str	r0, [r7, #12]
 8104c44:	60b9      	str	r1, [r7, #8]
 8104c46:	607a      	str	r2, [r7, #4]
 8104c48:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8104c4a:	68f8      	ldr	r0, [r7, #12]
 8104c4c:	f000 f8c9 	bl	8104de2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 8104c50:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8104c52:	68b8      	ldr	r0, [r7, #8]
 8104c54:	f7ff fc80 	bl	8104558 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8104c58:	4604      	mov	r4, r0
 8104c5a:	6878      	ldr	r0, [r7, #4]
 8104c5c:	f7ff fc87 	bl	810456e <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8104c60:	4605      	mov	r5, r0
 8104c62:	6838      	ldr	r0, [r7, #0]
 8104c64:	f7ff fc8e 	bl	8104584 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8104c68:	4603      	mov	r3, r0
 8104c6a:	9300      	str	r3, [sp, #0]
 8104c6c:	462b      	mov	r3, r5
 8104c6e:	4622      	mov	r2, r4
 8104c70:	6979      	ldr	r1, [r7, #20]
 8104c72:	68f8      	ldr	r0, [r7, #12]
 8104c74:	f000 f9c0 	bl	8104ff8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8104c78:	697b      	ldr	r3, [r7, #20]
	}
 8104c7a:	4618      	mov	r0, r3
 8104c7c:	3718      	adds	r7, #24
 8104c7e:	46bd      	mov	sp, r7
 8104c80:	bdb0      	pop	{r4, r5, r7, pc}

08104c82 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8104c82:	b580      	push	{r7, lr}
 8104c84:	b084      	sub	sp, #16
 8104c86:	af00      	add	r7, sp, #0
 8104c88:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8104c8a:	687b      	ldr	r3, [r7, #4]
 8104c8c:	681a      	ldr	r2, [r3, #0]
 8104c8e:	f107 030c 	add.w	r3, r7, #12
 8104c92:	4611      	mov	r1, r2
 8104c94:	4618      	mov	r0, r3
 8104c96:	f7ff faa2 	bl	81041de <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8104c9a:	68fb      	ldr	r3, [r7, #12]
 8104c9c:	4618      	mov	r0, r3
 8104c9e:	3710      	adds	r7, #16
 8104ca0:	46bd      	mov	sp, r7
 8104ca2:	bd80      	pop	{r7, pc}

08104ca4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8104ca4:	b480      	push	{r7}
 8104ca6:	b083      	sub	sp, #12
 8104ca8:	af00      	add	r7, sp, #0
 8104caa:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8104cac:	687b      	ldr	r3, [r7, #4]
 8104cae:	3310      	adds	r3, #16
 8104cb0:	4618      	mov	r0, r3
 8104cb2:	370c      	adds	r7, #12
 8104cb4:	46bd      	mov	sp, r7
 8104cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104cba:	4770      	bx	lr

08104cbc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8104cbc:	b480      	push	{r7}
 8104cbe:	b083      	sub	sp, #12
 8104cc0:	af00      	add	r7, sp, #0
 8104cc2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8104cc4:	687b      	ldr	r3, [r7, #4]
 8104cc6:	330c      	adds	r3, #12
 8104cc8:	4618      	mov	r0, r3
 8104cca:	370c      	adds	r7, #12
 8104ccc:	46bd      	mov	sp, r7
 8104cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104cd2:	4770      	bx	lr

08104cd4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8104cd4:	b580      	push	{r7, lr}
 8104cd6:	b084      	sub	sp, #16
 8104cd8:	af00      	add	r7, sp, #0
 8104cda:	60f8      	str	r0, [r7, #12]
 8104cdc:	60b9      	str	r1, [r7, #8]
 8104cde:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8104ce0:	68b8      	ldr	r0, [r7, #8]
 8104ce2:	f000 f8d9 	bl	8104e98 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8104ce6:	4603      	mov	r3, r0
 8104ce8:	681a      	ldr	r2, [r3, #0]
 8104cea:	68fb      	ldr	r3, [r7, #12]
 8104cec:	601a      	str	r2, [r3, #0]
 8104cee:	6878      	ldr	r0, [r7, #4]
 8104cf0:	f000 f8d2 	bl	8104e98 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8104cf4:	4603      	mov	r3, r0
 8104cf6:	681a      	ldr	r2, [r3, #0]
 8104cf8:	68fb      	ldr	r3, [r7, #12]
 8104cfa:	605a      	str	r2, [r3, #4]
 8104cfc:	68fb      	ldr	r3, [r7, #12]
 8104cfe:	4618      	mov	r0, r3
 8104d00:	3710      	adds	r7, #16
 8104d02:	46bd      	mov	sp, r7
 8104d04:	bd80      	pop	{r7, pc}

08104d06 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8104d06:	b580      	push	{r7, lr}
 8104d08:	b082      	sub	sp, #8
 8104d0a:	af00      	add	r7, sp, #0
 8104d0c:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8104d0e:	687b      	ldr	r3, [r7, #4]
 8104d10:	681b      	ldr	r3, [r3, #0]
 8104d12:	4618      	mov	r0, r3
 8104d14:	f01c fbcd 	bl	81214b2 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8104d18:	4602      	mov	r2, r0
 8104d1a:	687b      	ldr	r3, [r7, #4]
 8104d1c:	601a      	str	r2, [r3, #0]
	return *this;
 8104d1e:	687b      	ldr	r3, [r7, #4]
      }
 8104d20:	4618      	mov	r0, r3
 8104d22:	3708      	adds	r7, #8
 8104d24:	46bd      	mov	sp, r7
 8104d26:	bd80      	pop	{r7, pc}

08104d28 <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEEC1IS1_EEOT_>:
	_Tuple_impl(_UHead&& __head)
 8104d28:	b590      	push	{r4, r7, lr}
 8104d2a:	b083      	sub	sp, #12
 8104d2c:	af00      	add	r7, sp, #0
 8104d2e:	6078      	str	r0, [r7, #4]
 8104d30:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 8104d32:	687c      	ldr	r4, [r7, #4]
 8104d34:	6838      	ldr	r0, [r7, #0]
 8104d36:	f7ff fd76 	bl	8104826 <_ZSt7forwardIN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS2_E4typeE>
 8104d3a:	4603      	mov	r3, r0
 8104d3c:	4619      	mov	r1, r3
 8104d3e:	4620      	mov	r0, r4
 8104d40:	f000 f987 	bl	8105052 <_ZNSt10_Head_baseILj0EON19EventManagerCM4Task11EEventQueueELb0EEC1IS1_EEOT_>
	{ }
 8104d44:	687b      	ldr	r3, [r7, #4]
 8104d46:	4618      	mov	r0, r3
 8104d48:	370c      	adds	r7, #12
 8104d4a:	46bd      	mov	sp, r7
 8104d4c:	bd90      	pop	{r4, r7, pc}

08104d4e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8104d4e:	b5b0      	push	{r4, r5, r7, lr}
 8104d50:	b088      	sub	sp, #32
 8104d52:	af02      	add	r7, sp, #8
 8104d54:	60f8      	str	r0, [r7, #12]
 8104d56:	60b9      	str	r1, [r7, #8]
 8104d58:	607a      	str	r2, [r7, #4]
 8104d5a:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8104d5c:	68f8      	ldr	r0, [r7, #12]
 8104d5e:	f000 f840 	bl	8104de2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 8104d62:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8104d64:	68b8      	ldr	r0, [r7, #8]
 8104d66:	f7ff fbf7 	bl	8104558 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8104d6a:	4604      	mov	r4, r0
 8104d6c:	6878      	ldr	r0, [r7, #4]
 8104d6e:	f7ff fd88 	bl	8104882 <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8104d72:	4605      	mov	r5, r0
 8104d74:	6838      	ldr	r0, [r7, #0]
 8104d76:	f7ff fc05 	bl	8104584 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8104d7a:	4603      	mov	r3, r0
 8104d7c:	9300      	str	r3, [sp, #0]
 8104d7e:	462b      	mov	r3, r5
 8104d80:	4622      	mov	r2, r4
 8104d82:	6979      	ldr	r1, [r7, #20]
 8104d84:	68f8      	ldr	r0, [r7, #12]
 8104d86:	f000 f974 	bl	8105072 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8104d8a:	697b      	ldr	r3, [r7, #20]
	}
 8104d8c:	4618      	mov	r0, r3
 8104d8e:	3718      	adds	r7, #24
 8104d90:	46bd      	mov	sp, r7
 8104d92:	bdb0      	pop	{r4, r5, r7, pc}

08104d94 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8104d94:	b480      	push	{r7}
 8104d96:	b083      	sub	sp, #12
 8104d98:	af00      	add	r7, sp, #0
 8104d9a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8104d9c:	687b      	ldr	r3, [r7, #4]
 8104d9e:	4618      	mov	r0, r3
 8104da0:	370c      	adds	r7, #12
 8104da2:	46bd      	mov	sp, r7
 8104da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104da8:	4770      	bx	lr

08104daa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8104daa:	b580      	push	{r7, lr}
 8104dac:	b082      	sub	sp, #8
 8104dae:	af00      	add	r7, sp, #0
 8104db0:	6078      	str	r0, [r7, #4]
 8104db2:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8104db4:	6839      	ldr	r1, [r7, #0]
 8104db6:	6878      	ldr	r0, [r7, #4]
 8104db8:	f000 f988 	bl	81050cc <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE7destroyIS7_EEvPT_>
	}
 8104dbc:	bf00      	nop
 8104dbe:	3708      	adds	r7, #8
 8104dc0:	46bd      	mov	sp, r7
 8104dc2:	bd80      	pop	{r7, pc}

08104dc4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8104dc4:	b580      	push	{r7, lr}
 8104dc6:	b084      	sub	sp, #16
 8104dc8:	af00      	add	r7, sp, #0
 8104dca:	60f8      	str	r0, [r7, #12]
 8104dcc:	60b9      	str	r1, [r7, #8]
 8104dce:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8104dd0:	687a      	ldr	r2, [r7, #4]
 8104dd2:	68b9      	ldr	r1, [r7, #8]
 8104dd4:	68f8      	ldr	r0, [r7, #12]
 8104dd6:	f000 f984 	bl	81050e2 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE10deallocateEPS8_j>
 8104dda:	bf00      	nop
 8104ddc:	3710      	adds	r7, #16
 8104dde:	46bd      	mov	sp, r7
 8104de0:	bd80      	pop	{r7, pc}

08104de2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 8104de2:	b580      	push	{r7, lr}
 8104de4:	b082      	sub	sp, #8
 8104de6:	af00      	add	r7, sp, #0
 8104de8:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8104dea:	6878      	ldr	r0, [r7, #4]
 8104dec:	f7ff ffd2 	bl	8104d94 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8104df0:	4603      	mov	r3, r0
 8104df2:	2101      	movs	r1, #1
 8104df4:	4618      	mov	r0, r3
 8104df6:	f000 f987 	bl	8105108 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE8allocateERS9_j>
 8104dfa:	4603      	mov	r3, r0
 8104dfc:	4618      	mov	r0, r3
 8104dfe:	3708      	adds	r7, #8
 8104e00:	46bd      	mov	sp, r7
 8104e02:	bd80      	pop	{r7, pc}

08104e04 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRS1_RS5_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8104e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8104e06:	b085      	sub	sp, #20
 8104e08:	af00      	add	r7, sp, #0
 8104e0a:	60f8      	str	r0, [r7, #12]
 8104e0c:	60b9      	str	r1, [r7, #8]
 8104e0e:	607a      	str	r2, [r7, #4]
 8104e10:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8104e12:	68bb      	ldr	r3, [r7, #8]
 8104e14:	4619      	mov	r1, r3
 8104e16:	2018      	movs	r0, #24
 8104e18:	f7fc fa84 	bl	8101324 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8104e1c:	68f8      	ldr	r0, [r7, #12]
 8104e1e:	f7ff ffb9 	bl	8104d94 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8104e22:	4604      	mov	r4, r0
 8104e24:	68b8      	ldr	r0, [r7, #8]
 8104e26:	f7ff fb7a 	bl	810451e <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 8104e2a:	4605      	mov	r5, r0
 8104e2c:	6878      	ldr	r0, [r7, #4]
 8104e2e:	f7fe fd46 	bl	81038be <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8104e32:	4606      	mov	r6, r0
 8104e34:	6838      	ldr	r0, [r7, #0]
 8104e36:	f7fe fd4d 	bl	81038d4 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8104e3a:	4603      	mov	r3, r0
 8104e3c:	4632      	mov	r2, r6
 8104e3e:	4629      	mov	r1, r5
 8104e40:	4620      	mov	r0, r4
 8104e42:	f000 f970 	bl	8105126 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRS3_RS6_EEEvRS9_PT_DpOT0_>
	}
 8104e46:	bf00      	nop
 8104e48:	3714      	adds	r7, #20
 8104e4a:	46bd      	mov	sp, r7
 8104e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08104e4e <_ZNKSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>:
      _M_valptr() const
 8104e4e:	b580      	push	{r7, lr}
 8104e50:	b082      	sub	sp, #8
 8104e52:	af00      	add	r7, sp, #0
 8104e54:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8104e56:	687b      	ldr	r3, [r7, #4]
 8104e58:	3310      	adds	r3, #16
 8104e5a:	4618      	mov	r0, r3
 8104e5c:	f000 f97b 	bl	8105156 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>
 8104e60:	4603      	mov	r3, r0
 8104e62:	4618      	mov	r0, r3
 8104e64:	3708      	adds	r7, #8
 8104e66:	46bd      	mov	sp, r7
 8104e68:	bd80      	pop	{r7, pc}

08104e6a <_ZNKSt10_Select1stISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEclERKS6_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 8104e6a:	b480      	push	{r7}
 8104e6c:	b083      	sub	sp, #12
 8104e6e:	af00      	add	r7, sp, #0
 8104e70:	6078      	str	r0, [r7, #4]
 8104e72:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8104e74:	683b      	ldr	r3, [r7, #0]
 8104e76:	4618      	mov	r0, r3
 8104e78:	370c      	adds	r7, #12
 8104e7a:	46bd      	mov	sp, r7
 8104e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e80:	4770      	bx	lr

08104e82 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8104e82:	b480      	push	{r7}
 8104e84:	b083      	sub	sp, #12
 8104e86:	af00      	add	r7, sp, #0
 8104e88:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8104e8a:	687b      	ldr	r3, [r7, #4]
 8104e8c:	4618      	mov	r0, r3
 8104e8e:	370c      	adds	r7, #12
 8104e90:	46bd      	mov	sp, r7
 8104e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e96:	4770      	bx	lr

08104e98 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8104e98:	b480      	push	{r7}
 8104e9a:	b083      	sub	sp, #12
 8104e9c:	af00      	add	r7, sp, #0
 8104e9e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8104ea0:	687b      	ldr	r3, [r7, #4]
 8104ea2:	4618      	mov	r0, r3
 8104ea4:	370c      	adds	r7, #12
 8104ea6:	46bd      	mov	sp, r7
 8104ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104eac:	4770      	bx	lr
	...

08104eb0 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_max_sizeERKS1_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8104eb0:	b580      	push	{r7, lr}
 8104eb2:	b084      	sub	sp, #16
 8104eb4:	af00      	add	r7, sp, #0
 8104eb6:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8104eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8104ee4 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 8104eba:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8104ebc:	6878      	ldr	r0, [r7, #4]
 8104ebe:	f000 f956 	bl	810516e <_ZNSt16allocator_traitsISaI8SMessageEE8max_sizeERKS1_>
 8104ec2:	4603      	mov	r3, r0
 8104ec4:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8104ec6:	f107 0208 	add.w	r2, r7, #8
 8104eca:	f107 030c 	add.w	r3, r7, #12
 8104ece:	4611      	mov	r1, r2
 8104ed0:	4618      	mov	r0, r3
 8104ed2:	f000 f958 	bl	8105186 <_ZSt3minIjERKT_S2_S2_>
 8104ed6:	4603      	mov	r3, r0
 8104ed8:	681b      	ldr	r3, [r3, #0]
      }
 8104eda:	4618      	mov	r0, r3
 8104edc:	3710      	adds	r7, #16
 8104ede:	46bd      	mov	sp, r7
 8104ee0:	bd80      	pop	{r7, pc}
 8104ee2:	bf00      	nop
 8104ee4:	04924924 	.word	0x04924924

08104ee8 <_ZNKSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8104ee8:	b480      	push	{r7}
 8104eea:	b083      	sub	sp, #12
 8104eec:	af00      	add	r7, sp, #0
 8104eee:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8104ef0:	687b      	ldr	r3, [r7, #4]
 8104ef2:	4618      	mov	r0, r3
 8104ef4:	370c      	adds	r7, #12
 8104ef6:	46bd      	mov	sp, r7
 8104ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104efc:	4770      	bx	lr
	...

08104f00 <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8104f00:	b580      	push	{r7, lr}
 8104f02:	b084      	sub	sp, #16
 8104f04:	af00      	add	r7, sp, #0
 8104f06:	60f8      	str	r0, [r7, #12]
 8104f08:	60b9      	str	r1, [r7, #8]
 8104f0a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8104f0c:	68f8      	ldr	r0, [r7, #12]
 8104f0e:	f000 f94f 	bl	81051b0 <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv>
 8104f12:	4602      	mov	r2, r0
 8104f14:	68bb      	ldr	r3, [r7, #8]
 8104f16:	4293      	cmp	r3, r2
 8104f18:	bf8c      	ite	hi
 8104f1a:	2301      	movhi	r3, #1
 8104f1c:	2300      	movls	r3, #0
 8104f1e:	b2db      	uxtb	r3, r3
 8104f20:	2b00      	cmp	r3, #0
 8104f22:	bf14      	ite	ne
 8104f24:	2301      	movne	r3, #1
 8104f26:	2300      	moveq	r3, #0
 8104f28:	b2db      	uxtb	r3, r3
 8104f2a:	2b00      	cmp	r3, #0
 8104f2c:	d007      	beq.n	8104f3e <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8104f2e:	68bb      	ldr	r3, [r7, #8]
 8104f30:	4a09      	ldr	r2, [pc, #36]	@ (8104f58 <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv+0x58>)
 8104f32:	4293      	cmp	r3, r2
 8104f34:	d901      	bls.n	8104f3a <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8104f36:	f01c fb27 	bl	8121588 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8104f3a:	f01c fb22 	bl	8121582 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8104f3e:	68ba      	ldr	r2, [r7, #8]
 8104f40:	4613      	mov	r3, r2
 8104f42:	00db      	lsls	r3, r3, #3
 8104f44:	1a9b      	subs	r3, r3, r2
 8104f46:	009b      	lsls	r3, r3, #2
 8104f48:	4618      	mov	r0, r3
 8104f4a:	f01c fa4c 	bl	81213e6 <_Znwj>
 8104f4e:	4603      	mov	r3, r0
      }
 8104f50:	4618      	mov	r0, r3
 8104f52:	3710      	adds	r7, #16
 8104f54:	46bd      	mov	sp, r7
 8104f56:	bd80      	pop	{r7, pc}
 8104f58:	09249249 	.word	0x09249249

08104f5c <_ZSt12__relocate_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8104f5c:	b5b0      	push	{r4, r5, r7, lr}
 8104f5e:	b084      	sub	sp, #16
 8104f60:	af00      	add	r7, sp, #0
 8104f62:	60f8      	str	r0, [r7, #12]
 8104f64:	60b9      	str	r1, [r7, #8]
 8104f66:	607a      	str	r2, [r7, #4]
 8104f68:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 8104f6a:	68f8      	ldr	r0, [r7, #12]
 8104f6c:	f000 f92e 	bl	81051cc <_ZSt12__niter_baseIP8SMessageET_S2_>
 8104f70:	4604      	mov	r4, r0
 8104f72:	68b8      	ldr	r0, [r7, #8]
 8104f74:	f000 f92a 	bl	81051cc <_ZSt12__niter_baseIP8SMessageET_S2_>
 8104f78:	4605      	mov	r5, r0
 8104f7a:	6878      	ldr	r0, [r7, #4]
 8104f7c:	f000 f926 	bl	81051cc <_ZSt12__niter_baseIP8SMessageET_S2_>
 8104f80:	4602      	mov	r2, r0
 8104f82:	683b      	ldr	r3, [r7, #0]
 8104f84:	4629      	mov	r1, r5
 8104f86:	4620      	mov	r0, r4
 8104f88:	f000 f92c 	bl	81051e4 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>
 8104f8c:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 8104f8e:	4618      	mov	r0, r3
 8104f90:	3710      	adds	r7, #16
 8104f92:	46bd      	mov	sp, r7
 8104f94:	bdb0      	pop	{r4, r5, r7, pc}

08104f96 <_ZNSt13move_iteratorIP8SMessageEC1ES1_>:
      move_iterator(iterator_type __i)
 8104f96:	b580      	push	{r7, lr}
 8104f98:	b082      	sub	sp, #8
 8104f9a:	af00      	add	r7, sp, #0
 8104f9c:	6078      	str	r0, [r7, #4]
 8104f9e:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8104fa0:	463b      	mov	r3, r7
 8104fa2:	4618      	mov	r0, r3
 8104fa4:	f000 f948 	bl	8105238 <_ZSt4moveIRP8SMessageEONSt16remove_referenceIT_E4typeEOS4_>
 8104fa8:	4603      	mov	r3, r0
 8104faa:	681a      	ldr	r2, [r3, #0]
 8104fac:	687b      	ldr	r3, [r7, #4]
 8104fae:	601a      	str	r2, [r3, #0]
 8104fb0:	687b      	ldr	r3, [r7, #4]
 8104fb2:	4618      	mov	r0, r3
 8104fb4:	3708      	adds	r7, #8
 8104fb6:	46bd      	mov	sp, r7
 8104fb8:	bd80      	pop	{r7, pc}

08104fba <_ZSt18uninitialized_copyISt13move_iteratorIP8SMessageES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8104fba:	b580      	push	{r7, lr}
 8104fbc:	b086      	sub	sp, #24
 8104fbe:	af00      	add	r7, sp, #0
 8104fc0:	60f8      	str	r0, [r7, #12]
 8104fc2:	60b9      	str	r1, [r7, #8]
 8104fc4:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 8104fc6:	2301      	movs	r3, #1
 8104fc8:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 8104fca:	2301      	movs	r3, #1
 8104fcc:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8104fce:	687a      	ldr	r2, [r7, #4]
 8104fd0:	68b9      	ldr	r1, [r7, #8]
 8104fd2:	68f8      	ldr	r0, [r7, #12]
 8104fd4:	f000 f93b 	bl	810524e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIP8SMessageES4_EET0_T_S7_S6_>
 8104fd8:	4603      	mov	r3, r0
    }
 8104fda:	4618      	mov	r0, r3
 8104fdc:	3718      	adds	r7, #24
 8104fde:	46bd      	mov	sp, r7
 8104fe0:	bd80      	pop	{r7, pc}

08104fe2 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>:
      _M_addr() noexcept
 8104fe2:	b480      	push	{r7}
 8104fe4:	b083      	sub	sp, #12
 8104fe6:	af00      	add	r7, sp, #0
 8104fe8:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8104fea:	687b      	ldr	r3, [r7, #4]
 8104fec:	4618      	mov	r0, r3
 8104fee:	370c      	adds	r7, #12
 8104ff0:	46bd      	mov	sp, r7
 8104ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ff6:	4770      	bx	lr

08104ff8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8104ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8104ffc:	b086      	sub	sp, #24
 8104ffe:	af02      	add	r7, sp, #8
 8105000:	60f8      	str	r0, [r7, #12]
 8105002:	60b9      	str	r1, [r7, #8]
 8105004:	607a      	str	r2, [r7, #4]
 8105006:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8105008:	68bb      	ldr	r3, [r7, #8]
 810500a:	4619      	mov	r1, r3
 810500c:	2018      	movs	r0, #24
 810500e:	f7fc f989 	bl	8101324 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8105012:	68f8      	ldr	r0, [r7, #12]
 8105014:	f7ff febe 	bl	8104d94 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8105018:	4604      	mov	r4, r0
 810501a:	68b8      	ldr	r0, [r7, #8]
 810501c:	f7ff fa7f 	bl	810451e <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 8105020:	4605      	mov	r5, r0
 8105022:	6878      	ldr	r0, [r7, #4]
 8105024:	f7ff fa98 	bl	8104558 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8105028:	4606      	mov	r6, r0
 810502a:	6838      	ldr	r0, [r7, #0]
 810502c:	f7ff fa9f 	bl	810456e <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8105030:	4680      	mov	r8, r0
 8105032:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8105034:	f7ff faa6 	bl	8104584 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8105038:	4603      	mov	r3, r0
 810503a:	9300      	str	r3, [sp, #0]
 810503c:	4643      	mov	r3, r8
 810503e:	4632      	mov	r2, r6
 8105040:	4629      	mov	r1, r5
 8105042:	4620      	mov	r0, r4
 8105044:	f000 f913 	bl	810526e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 8105048:	bf00      	nop
 810504a:	3710      	adds	r7, #16
 810504c:	46bd      	mov	sp, r7
 810504e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08105052 <_ZNSt10_Head_baseILj0EON19EventManagerCM4Task11EEventQueueELb0EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8105052:	b580      	push	{r7, lr}
 8105054:	b082      	sub	sp, #8
 8105056:	af00      	add	r7, sp, #0
 8105058:	6078      	str	r0, [r7, #4]
 810505a:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 810505c:	6838      	ldr	r0, [r7, #0]
 810505e:	f7ff fbe2 	bl	8104826 <_ZSt7forwardIN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS2_E4typeE>
 8105062:	4602      	mov	r2, r0
 8105064:	687b      	ldr	r3, [r7, #4]
 8105066:	601a      	str	r2, [r3, #0]
 8105068:	687b      	ldr	r3, [r7, #4]
 810506a:	4618      	mov	r0, r3
 810506c:	3708      	adds	r7, #8
 810506e:	46bd      	mov	sp, r7
 8105070:	bd80      	pop	{r7, pc}

08105072 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8105072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8105076:	b086      	sub	sp, #24
 8105078:	af02      	add	r7, sp, #8
 810507a:	60f8      	str	r0, [r7, #12]
 810507c:	60b9      	str	r1, [r7, #8]
 810507e:	607a      	str	r2, [r7, #4]
 8105080:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8105082:	68bb      	ldr	r3, [r7, #8]
 8105084:	4619      	mov	r1, r3
 8105086:	2018      	movs	r0, #24
 8105088:	f7fc f94c 	bl	8101324 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 810508c:	68f8      	ldr	r0, [r7, #12]
 810508e:	f7ff fe81 	bl	8104d94 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8105092:	4604      	mov	r4, r0
 8105094:	68b8      	ldr	r0, [r7, #8]
 8105096:	f7ff fa42 	bl	810451e <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 810509a:	4605      	mov	r5, r0
 810509c:	6878      	ldr	r0, [r7, #4]
 810509e:	f7ff fa5b 	bl	8104558 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 81050a2:	4606      	mov	r6, r0
 81050a4:	6838      	ldr	r0, [r7, #0]
 81050a6:	f7ff fbec 	bl	8104882 <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 81050aa:	4680      	mov	r8, r0
 81050ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81050ae:	f7ff fa69 	bl	8104584 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 81050b2:	4603      	mov	r3, r0
 81050b4:	9300      	str	r3, [sp, #0]
 81050b6:	4643      	mov	r3, r8
 81050b8:	4632      	mov	r2, r6
 81050ba:	4629      	mov	r1, r5
 81050bc:	4620      	mov	r0, r4
 81050be:	f000 f8f4 	bl	81052aa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJOS3_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 81050c2:	bf00      	nop
 81050c4:	3710      	adds	r7, #16
 81050c6:	46bd      	mov	sp, r7
 81050c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

081050cc <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE7destroyIS7_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 81050cc:	b480      	push	{r7}
 81050ce:	b083      	sub	sp, #12
 81050d0:	af00      	add	r7, sp, #0
 81050d2:	6078      	str	r0, [r7, #4]
 81050d4:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 81050d6:	bf00      	nop
 81050d8:	370c      	adds	r7, #12
 81050da:	46bd      	mov	sp, r7
 81050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81050e0:	4770      	bx	lr

081050e2 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 81050e2:	b580      	push	{r7, lr}
 81050e4:	b084      	sub	sp, #16
 81050e6:	af00      	add	r7, sp, #0
 81050e8:	60f8      	str	r0, [r7, #12]
 81050ea:	60b9      	str	r1, [r7, #8]
 81050ec:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 81050ee:	687a      	ldr	r2, [r7, #4]
 81050f0:	4613      	mov	r3, r2
 81050f2:	005b      	lsls	r3, r3, #1
 81050f4:	4413      	add	r3, r2
 81050f6:	00db      	lsls	r3, r3, #3
 81050f8:	4619      	mov	r1, r3
 81050fa:	68b8      	ldr	r0, [r7, #8]
 81050fc:	f01c f962 	bl	81213c4 <_ZdlPvj>
      }
 8105100:	bf00      	nop
 8105102:	3710      	adds	r7, #16
 8105104:	46bd      	mov	sp, r7
 8105106:	bd80      	pop	{r7, pc}

08105108 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8105108:	b580      	push	{r7, lr}
 810510a:	b082      	sub	sp, #8
 810510c:	af00      	add	r7, sp, #0
 810510e:	6078      	str	r0, [r7, #4]
 8105110:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8105112:	2200      	movs	r2, #0
 8105114:	6839      	ldr	r1, [r7, #0]
 8105116:	6878      	ldr	r0, [r7, #4]
 8105118:	f000 f8e6 	bl	81052e8 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv>
 810511c:	4603      	mov	r3, r0
 810511e:	4618      	mov	r0, r3
 8105120:	3708      	adds	r7, #8
 8105122:	46bd      	mov	sp, r7
 8105124:	bd80      	pop	{r7, pc}

08105126 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRS3_RS6_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8105126:	b590      	push	{r4, r7, lr}
 8105128:	b085      	sub	sp, #20
 810512a:	af00      	add	r7, sp, #0
 810512c:	60f8      	str	r0, [r7, #12]
 810512e:	60b9      	str	r1, [r7, #8]
 8105130:	607a      	str	r2, [r7, #4]
 8105132:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8105134:	6878      	ldr	r0, [r7, #4]
 8105136:	f7fe fbc2 	bl	81038be <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 810513a:	4604      	mov	r4, r0
 810513c:	6838      	ldr	r0, [r7, #0]
 810513e:	f7fe fbc9 	bl	81038d4 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8105142:	4603      	mov	r3, r0
 8105144:	4622      	mov	r2, r4
 8105146:	68b9      	ldr	r1, [r7, #8]
 8105148:	68f8      	ldr	r0, [r7, #12]
 810514a:	f000 f8fb 	bl	8105344 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRS3_RS6_EEEvPT_DpOT0_>
	}
 810514e:	bf00      	nop
 8105150:	3714      	adds	r7, #20
 8105152:	46bd      	mov	sp, r7
 8105154:	bd90      	pop	{r4, r7, pc}

08105156 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8105156:	b580      	push	{r7, lr}
 8105158:	b082      	sub	sp, #8
 810515a:	af00      	add	r7, sp, #0
 810515c:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 810515e:	6878      	ldr	r0, [r7, #4]
 8105160:	f000 f90e 	bl	8105380 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>
 8105164:	4603      	mov	r3, r0
 8105166:	4618      	mov	r0, r3
 8105168:	3708      	adds	r7, #8
 810516a:	46bd      	mov	sp, r7
 810516c:	bd80      	pop	{r7, pc}

0810516e <_ZNSt16allocator_traitsISaI8SMessageEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 810516e:	b580      	push	{r7, lr}
 8105170:	b082      	sub	sp, #8
 8105172:	af00      	add	r7, sp, #0
 8105174:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8105176:	6878      	ldr	r0, [r7, #4]
 8105178:	f000 f90d 	bl	8105396 <_ZNKSt15__new_allocatorI8SMessageE8max_sizeEv>
 810517c:	4603      	mov	r3, r0
      }
 810517e:	4618      	mov	r0, r3
 8105180:	3708      	adds	r7, #8
 8105182:	46bd      	mov	sp, r7
 8105184:	bd80      	pop	{r7, pc}

08105186 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8105186:	b480      	push	{r7}
 8105188:	b083      	sub	sp, #12
 810518a:	af00      	add	r7, sp, #0
 810518c:	6078      	str	r0, [r7, #4]
 810518e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8105190:	683b      	ldr	r3, [r7, #0]
 8105192:	681a      	ldr	r2, [r3, #0]
 8105194:	687b      	ldr	r3, [r7, #4]
 8105196:	681b      	ldr	r3, [r3, #0]
 8105198:	429a      	cmp	r2, r3
 810519a:	d201      	bcs.n	81051a0 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 810519c:	683b      	ldr	r3, [r7, #0]
 810519e:	e000      	b.n	81051a2 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 81051a0:	687b      	ldr	r3, [r7, #4]
    }
 81051a2:	4618      	mov	r0, r3
 81051a4:	370c      	adds	r7, #12
 81051a6:	46bd      	mov	sp, r7
 81051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051ac:	4770      	bx	lr
	...

081051b0 <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 81051b0:	b480      	push	{r7}
 81051b2:	b083      	sub	sp, #12
 81051b4:	af00      	add	r7, sp, #0
 81051b6:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 81051b8:	4b03      	ldr	r3, [pc, #12]	@ (81051c8 <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 81051ba:	4618      	mov	r0, r3
 81051bc:	370c      	adds	r7, #12
 81051be:	46bd      	mov	sp, r7
 81051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051c4:	4770      	bx	lr
 81051c6:	bf00      	nop
 81051c8:	04924924 	.word	0x04924924

081051cc <_ZSt12__niter_baseIP8SMessageET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 81051cc:	b480      	push	{r7}
 81051ce:	b083      	sub	sp, #12
 81051d0:	af00      	add	r7, sp, #0
 81051d2:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 81051d4:	687b      	ldr	r3, [r7, #4]
 81051d6:	4618      	mov	r0, r3
 81051d8:	370c      	adds	r7, #12
 81051da:	46bd      	mov	sp, r7
 81051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051e0:	4770      	bx	lr
	...

081051e4 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 81051e4:	b580      	push	{r7, lr}
 81051e6:	b086      	sub	sp, #24
 81051e8:	af00      	add	r7, sp, #0
 81051ea:	60f8      	str	r0, [r7, #12]
 81051ec:	60b9      	str	r1, [r7, #8]
 81051ee:	607a      	str	r2, [r7, #4]
 81051f0:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 81051f2:	68ba      	ldr	r2, [r7, #8]
 81051f4:	68fb      	ldr	r3, [r7, #12]
 81051f6:	1ad3      	subs	r3, r2, r3
 81051f8:	109b      	asrs	r3, r3, #2
 81051fa:	4a0e      	ldr	r2, [pc, #56]	@ (8105234 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x50>)
 81051fc:	fb02 f303 	mul.w	r3, r2, r3
 8105200:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8105202:	697b      	ldr	r3, [r7, #20]
 8105204:	2b00      	cmp	r3, #0
 8105206:	dd09      	ble.n	810521c <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x38>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8105208:	697a      	ldr	r2, [r7, #20]
 810520a:	4613      	mov	r3, r2
 810520c:	00db      	lsls	r3, r3, #3
 810520e:	1a9b      	subs	r3, r3, r2
 8105210:	009b      	lsls	r3, r3, #2
 8105212:	461a      	mov	r2, r3
 8105214:	68f9      	ldr	r1, [r7, #12]
 8105216:	6878      	ldr	r0, [r7, #4]
 8105218:	f01d f9b0 	bl	812257c <memmove>
      return __result + __count;
 810521c:	697a      	ldr	r2, [r7, #20]
 810521e:	4613      	mov	r3, r2
 8105220:	00db      	lsls	r3, r3, #3
 8105222:	1a9b      	subs	r3, r3, r2
 8105224:	009b      	lsls	r3, r3, #2
 8105226:	461a      	mov	r2, r3
 8105228:	687b      	ldr	r3, [r7, #4]
 810522a:	4413      	add	r3, r2
    }
 810522c:	4618      	mov	r0, r3
 810522e:	3718      	adds	r7, #24
 8105230:	46bd      	mov	sp, r7
 8105232:	bd80      	pop	{r7, pc}
 8105234:	b6db6db7 	.word	0xb6db6db7

08105238 <_ZSt4moveIRP8SMessageEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8105238:	b480      	push	{r7}
 810523a:	b083      	sub	sp, #12
 810523c:	af00      	add	r7, sp, #0
 810523e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8105240:	687b      	ldr	r3, [r7, #4]
 8105242:	4618      	mov	r0, r3
 8105244:	370c      	adds	r7, #12
 8105246:	46bd      	mov	sp, r7
 8105248:	f85d 7b04 	ldr.w	r7, [sp], #4
 810524c:	4770      	bx	lr

0810524e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIP8SMessageES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 810524e:	b580      	push	{r7, lr}
 8105250:	b084      	sub	sp, #16
 8105252:	af00      	add	r7, sp, #0
 8105254:	60f8      	str	r0, [r7, #12]
 8105256:	60b9      	str	r1, [r7, #8]
 8105258:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 810525a:	687a      	ldr	r2, [r7, #4]
 810525c:	68b9      	ldr	r1, [r7, #8]
 810525e:	68f8      	ldr	r0, [r7, #12]
 8105260:	f000 f8a5 	bl	81053ae <_ZSt4copyISt13move_iteratorIP8SMessageES2_ET0_T_S5_S4_>
 8105264:	4603      	mov	r3, r0
 8105266:	4618      	mov	r0, r3
 8105268:	3710      	adds	r7, #16
 810526a:	46bd      	mov	sp, r7
 810526c:	bd80      	pop	{r7, pc}

0810526e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 810526e:	b5b0      	push	{r4, r5, r7, lr}
 8105270:	b086      	sub	sp, #24
 8105272:	af02      	add	r7, sp, #8
 8105274:	60f8      	str	r0, [r7, #12]
 8105276:	60b9      	str	r1, [r7, #8]
 8105278:	607a      	str	r2, [r7, #4]
 810527a:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 810527c:	6878      	ldr	r0, [r7, #4]
 810527e:	f7ff f96b 	bl	8104558 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8105282:	4604      	mov	r4, r0
 8105284:	6838      	ldr	r0, [r7, #0]
 8105286:	f7ff f972 	bl	810456e <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 810528a:	4605      	mov	r5, r0
 810528c:	6a38      	ldr	r0, [r7, #32]
 810528e:	f7ff f979 	bl	8104584 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8105292:	4603      	mov	r3, r0
 8105294:	9300      	str	r3, [sp, #0]
 8105296:	462b      	mov	r3, r5
 8105298:	4622      	mov	r2, r4
 810529a:	68b9      	ldr	r1, [r7, #8]
 810529c:	68f8      	ldr	r0, [r7, #12]
 810529e:	f000 f8ae 	bl	81053fe <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvPT_DpOT0_>
	}
 81052a2:	bf00      	nop
 81052a4:	3710      	adds	r7, #16
 81052a6:	46bd      	mov	sp, r7
 81052a8:	bdb0      	pop	{r4, r5, r7, pc}

081052aa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJOS3_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 81052aa:	b5b0      	push	{r4, r5, r7, lr}
 81052ac:	b086      	sub	sp, #24
 81052ae:	af02      	add	r7, sp, #8
 81052b0:	60f8      	str	r0, [r7, #12]
 81052b2:	60b9      	str	r1, [r7, #8]
 81052b4:	607a      	str	r2, [r7, #4]
 81052b6:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 81052b8:	6878      	ldr	r0, [r7, #4]
 81052ba:	f7ff f94d 	bl	8104558 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 81052be:	4604      	mov	r4, r0
 81052c0:	6838      	ldr	r0, [r7, #0]
 81052c2:	f7ff fade 	bl	8104882 <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 81052c6:	4605      	mov	r5, r0
 81052c8:	6a38      	ldr	r0, [r7, #32]
 81052ca:	f7ff f95b 	bl	8104584 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 81052ce:	4603      	mov	r3, r0
 81052d0:	9300      	str	r3, [sp, #0]
 81052d2:	462b      	mov	r3, r5
 81052d4:	4622      	mov	r2, r4
 81052d6:	68b9      	ldr	r1, [r7, #8]
 81052d8:	68f8      	ldr	r0, [r7, #12]
 81052da:	f000 f8b8 	bl	810544e <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJOS3_EESE_IJEEEEEvPT_DpOT0_>
	}
 81052de:	bf00      	nop
 81052e0:	3710      	adds	r7, #16
 81052e2:	46bd      	mov	sp, r7
 81052e4:	bdb0      	pop	{r4, r5, r7, pc}
	...

081052e8 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 81052e8:	b580      	push	{r7, lr}
 81052ea:	b084      	sub	sp, #16
 81052ec:	af00      	add	r7, sp, #0
 81052ee:	60f8      	str	r0, [r7, #12]
 81052f0:	60b9      	str	r1, [r7, #8]
 81052f2:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 81052f4:	68f8      	ldr	r0, [r7, #12]
 81052f6:	f000 f8d3 	bl	81054a0 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE11_M_max_sizeEv>
 81052fa:	4602      	mov	r2, r0
 81052fc:	68bb      	ldr	r3, [r7, #8]
 81052fe:	4293      	cmp	r3, r2
 8105300:	bf8c      	ite	hi
 8105302:	2301      	movhi	r3, #1
 8105304:	2300      	movls	r3, #0
 8105306:	b2db      	uxtb	r3, r3
 8105308:	2b00      	cmp	r3, #0
 810530a:	bf14      	ite	ne
 810530c:	2301      	movne	r3, #1
 810530e:	2300      	moveq	r3, #0
 8105310:	b2db      	uxtb	r3, r3
 8105312:	2b00      	cmp	r3, #0
 8105314:	d007      	beq.n	8105326 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8105316:	68bb      	ldr	r3, [r7, #8]
 8105318:	4a09      	ldr	r2, [pc, #36]	@ (8105340 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv+0x58>)
 810531a:	4293      	cmp	r3, r2
 810531c:	d901      	bls.n	8105322 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 810531e:	f01c f933 	bl	8121588 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8105322:	f01c f92e 	bl	8121582 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8105326:	68ba      	ldr	r2, [r7, #8]
 8105328:	4613      	mov	r3, r2
 810532a:	005b      	lsls	r3, r3, #1
 810532c:	4413      	add	r3, r2
 810532e:	00db      	lsls	r3, r3, #3
 8105330:	4618      	mov	r0, r3
 8105332:	f01c f858 	bl	81213e6 <_Znwj>
 8105336:	4603      	mov	r3, r0
      }
 8105338:	4618      	mov	r0, r3
 810533a:	3710      	adds	r7, #16
 810533c:	46bd      	mov	sp, r7
 810533e:	bd80      	pop	{r7, pc}
 8105340:	0aaaaaaa 	.word	0x0aaaaaaa

08105344 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRS3_RS6_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8105344:	b5b0      	push	{r4, r5, r7, lr}
 8105346:	b084      	sub	sp, #16
 8105348:	af00      	add	r7, sp, #0
 810534a:	60f8      	str	r0, [r7, #12]
 810534c:	60b9      	str	r1, [r7, #8]
 810534e:	607a      	str	r2, [r7, #4]
 8105350:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8105352:	68bb      	ldr	r3, [r7, #8]
 8105354:	4619      	mov	r1, r3
 8105356:	2008      	movs	r0, #8
 8105358:	f7fb ffe4 	bl	8101324 <_ZnwjPv>
 810535c:	4604      	mov	r4, r0
 810535e:	6878      	ldr	r0, [r7, #4]
 8105360:	f7fe faad 	bl	81038be <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8105364:	4605      	mov	r5, r0
 8105366:	6838      	ldr	r0, [r7, #0]
 8105368:	f7fe fab4 	bl	81038d4 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 810536c:	4603      	mov	r3, r0
 810536e:	461a      	mov	r2, r3
 8105370:	4629      	mov	r1, r5
 8105372:	4620      	mov	r0, r4
 8105374:	f000 f8a2 	bl	81054bc <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IRS1_RS4_Lb1EEEOT_OT0_>
 8105378:	bf00      	nop
 810537a:	3710      	adds	r7, #16
 810537c:	46bd      	mov	sp, r7
 810537e:	bdb0      	pop	{r4, r5, r7, pc}

08105380 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>:
      _M_addr() const noexcept
 8105380:	b480      	push	{r7}
 8105382:	b083      	sub	sp, #12
 8105384:	af00      	add	r7, sp, #0
 8105386:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8105388:	687b      	ldr	r3, [r7, #4]
 810538a:	4618      	mov	r0, r3
 810538c:	370c      	adds	r7, #12
 810538e:	46bd      	mov	sp, r7
 8105390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105394:	4770      	bx	lr

08105396 <_ZNKSt15__new_allocatorI8SMessageE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8105396:	b580      	push	{r7, lr}
 8105398:	b082      	sub	sp, #8
 810539a:	af00      	add	r7, sp, #0
 810539c:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 810539e:	6878      	ldr	r0, [r7, #4]
 81053a0:	f7ff ff06 	bl	81051b0 <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv>
 81053a4:	4603      	mov	r3, r0
 81053a6:	4618      	mov	r0, r3
 81053a8:	3708      	adds	r7, #8
 81053aa:	46bd      	mov	sp, r7
 81053ac:	bd80      	pop	{r7, pc}

081053ae <_ZSt4copyISt13move_iteratorIP8SMessageES2_ET0_T_S5_S4_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 81053ae:	b590      	push	{r4, r7, lr}
 81053b0:	b085      	sub	sp, #20
 81053b2:	af00      	add	r7, sp, #0
 81053b4:	60f8      	str	r0, [r7, #12]
 81053b6:	60b9      	str	r1, [r7, #8]
 81053b8:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::reference>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 81053ba:	68f8      	ldr	r0, [r7, #12]
 81053bc:	f000 f897 	bl	81054ee <_ZSt12__miter_baseIP8SMessageEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 81053c0:	4604      	mov	r4, r0
 81053c2:	68b8      	ldr	r0, [r7, #8]
 81053c4:	f000 f893 	bl	81054ee <_ZSt12__miter_baseIP8SMessageEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 81053c8:	4603      	mov	r3, r0
 81053ca:	687a      	ldr	r2, [r7, #4]
 81053cc:	4619      	mov	r1, r3
 81053ce:	4620      	mov	r0, r4
 81053d0:	f000 f89e 	bl	8105510 <_ZSt13__copy_move_aILb1EP8SMessageS1_ET1_T0_S3_S2_>
 81053d4:	4603      	mov	r3, r0
    }
 81053d6:	4618      	mov	r0, r3
 81053d8:	3714      	adds	r7, #20
 81053da:	46bd      	mov	sp, r7
 81053dc:	bd90      	pop	{r4, r7, pc}

081053de <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>:
      constexpr tuple(tuple&&) = default;
 81053de:	b580      	push	{r7, lr}
 81053e0:	b082      	sub	sp, #8
 81053e2:	af00      	add	r7, sp, #0
 81053e4:	6078      	str	r0, [r7, #4]
 81053e6:	6039      	str	r1, [r7, #0]
 81053e8:	687b      	ldr	r3, [r7, #4]
 81053ea:	683a      	ldr	r2, [r7, #0]
 81053ec:	4611      	mov	r1, r2
 81053ee:	4618      	mov	r0, r3
 81053f0:	f000 f8b1 	bl	8105556 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>
 81053f4:	687b      	ldr	r3, [r7, #4]
 81053f6:	4618      	mov	r0, r3
 81053f8:	3708      	adds	r7, #8
 81053fa:	46bd      	mov	sp, r7
 81053fc:	bd80      	pop	{r7, pc}

081053fe <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 81053fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8105400:	b087      	sub	sp, #28
 8105402:	af00      	add	r7, sp, #0
 8105404:	60f8      	str	r0, [r7, #12]
 8105406:	60b9      	str	r1, [r7, #8]
 8105408:	607a      	str	r2, [r7, #4]
 810540a:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 810540c:	68bb      	ldr	r3, [r7, #8]
 810540e:	4619      	mov	r1, r3
 8105410:	2008      	movs	r0, #8
 8105412:	f7fb ff87 	bl	8101324 <_ZnwjPv>
 8105416:	4604      	mov	r4, r0
 8105418:	6878      	ldr	r0, [r7, #4]
 810541a:	f7ff f89d 	bl	8104558 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 810541e:	6838      	ldr	r0, [r7, #0]
 8105420:	f7ff f8a5 	bl	810456e <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8105424:	4602      	mov	r2, r0
 8105426:	f107 0314 	add.w	r3, r7, #20
 810542a:	4611      	mov	r1, r2
 810542c:	4618      	mov	r0, r3
 810542e:	f7ff ffd6 	bl	81053de <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>
 8105432:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8105434:	f7ff f8a6 	bl	8104584 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8105438:	f107 0214 	add.w	r2, r7, #20
 810543c:	4633      	mov	r3, r6
 810543e:	4629      	mov	r1, r5
 8105440:	4620      	mov	r0, r4
 8105442:	f000 f898 	bl	8105576 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 8105446:	bf00      	nop
 8105448:	371c      	adds	r7, #28
 810544a:	46bd      	mov	sp, r7
 810544c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810544e <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJOS3_EESE_IJEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 810544e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8105450:	b087      	sub	sp, #28
 8105452:	af00      	add	r7, sp, #0
 8105454:	60f8      	str	r0, [r7, #12]
 8105456:	60b9      	str	r1, [r7, #8]
 8105458:	607a      	str	r2, [r7, #4]
 810545a:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 810545c:	68bb      	ldr	r3, [r7, #8]
 810545e:	4619      	mov	r1, r3
 8105460:	2008      	movs	r0, #8
 8105462:	f7fb ff5f 	bl	8101324 <_ZnwjPv>
 8105466:	4604      	mov	r4, r0
 8105468:	6878      	ldr	r0, [r7, #4]
 810546a:	f7ff f875 	bl	8104558 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 810546e:	6838      	ldr	r0, [r7, #0]
 8105470:	f7ff fa07 	bl	8104882 <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8105474:	4602      	mov	r2, r0
 8105476:	f107 0314 	add.w	r3, r7, #20
 810547a:	4611      	mov	r1, r2
 810547c:	4618      	mov	r0, r3
 810547e:	f7fe fd0e 	bl	8103e9e <_ZNSt5tupleIJON19EventManagerCM4Task11EEventQueueEEEC1EOS3_>
 8105482:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8105484:	f7ff f87e 	bl	8104584 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8105488:	f107 0214 	add.w	r2, r7, #20
 810548c:	4633      	mov	r3, r6
 810548e:	4629      	mov	r1, r5
 8105490:	4620      	mov	r0, r4
 8105492:	f000 f884 	bl	810559e <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJOS1_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 8105496:	bf00      	nop
 8105498:	371c      	adds	r7, #28
 810549a:	46bd      	mov	sp, r7
 810549c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

081054a0 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 81054a0:	b480      	push	{r7}
 81054a2:	b083      	sub	sp, #12
 81054a4:	af00      	add	r7, sp, #0
 81054a6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 81054a8:	4b03      	ldr	r3, [pc, #12]	@ (81054b8 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE11_M_max_sizeEv+0x18>)
      }
 81054aa:	4618      	mov	r0, r3
 81054ac:	370c      	adds	r7, #12
 81054ae:	46bd      	mov	sp, r7
 81054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81054b4:	4770      	bx	lr
 81054b6:	bf00      	nop
 81054b8:	05555555 	.word	0x05555555

081054bc <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IRS1_RS4_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 81054bc:	b580      	push	{r7, lr}
 81054be:	b084      	sub	sp, #16
 81054c0:	af00      	add	r7, sp, #0
 81054c2:	60f8      	str	r0, [r7, #12]
 81054c4:	60b9      	str	r1, [r7, #8]
 81054c6:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 81054c8:	68b8      	ldr	r0, [r7, #8]
 81054ca:	f7fe f9f8 	bl	81038be <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 81054ce:	4603      	mov	r3, r0
 81054d0:	781a      	ldrb	r2, [r3, #0]
 81054d2:	68fb      	ldr	r3, [r7, #12]
 81054d4:	701a      	strb	r2, [r3, #0]
 81054d6:	6878      	ldr	r0, [r7, #4]
 81054d8:	f7fe f9fc 	bl	81038d4 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 81054dc:	4603      	mov	r3, r0
 81054de:	681a      	ldr	r2, [r3, #0]
 81054e0:	68fb      	ldr	r3, [r7, #12]
 81054e2:	605a      	str	r2, [r3, #4]
 81054e4:	68fb      	ldr	r3, [r7, #12]
 81054e6:	4618      	mov	r0, r3
 81054e8:	3710      	adds	r7, #16
 81054ea:	46bd      	mov	sp, r7
 81054ec:	bd80      	pop	{r7, pc}

081054ee <_ZSt12__miter_baseIP8SMessageEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    };

  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    auto
    __miter_base(move_iterator<_Iterator> __it)
 81054ee:	b580      	push	{r7, lr}
 81054f0:	b082      	sub	sp, #8
 81054f2:	af00      	add	r7, sp, #0
 81054f4:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 81054f6:	1d3b      	adds	r3, r7, #4
 81054f8:	4618      	mov	r0, r3
 81054fa:	f000 f864 	bl	81055c6 <_ZNKSt13move_iteratorIP8SMessageE4baseEv>
 81054fe:	4603      	mov	r3, r0
 8105500:	4618      	mov	r0, r3
 8105502:	f000 f86c 	bl	81055de <_ZSt12__miter_baseIP8SMessageET_S2_>
 8105506:	4603      	mov	r3, r0
 8105508:	4618      	mov	r0, r3
 810550a:	3708      	adds	r7, #8
 810550c:	46bd      	mov	sp, r7
 810550e:	bd80      	pop	{r7, pc}

08105510 <_ZSt13__copy_move_aILb1EP8SMessageS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8105510:	b5b0      	push	{r4, r5, r7, lr}
 8105512:	b084      	sub	sp, #16
 8105514:	af00      	add	r7, sp, #0
 8105516:	60f8      	str	r0, [r7, #12]
 8105518:	60b9      	str	r1, [r7, #8]
 810551a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 810551c:	68f8      	ldr	r0, [r7, #12]
 810551e:	f7ff fe55 	bl	81051cc <_ZSt12__niter_baseIP8SMessageET_S2_>
 8105522:	4604      	mov	r4, r0
 8105524:	68b8      	ldr	r0, [r7, #8]
 8105526:	f7ff fe51 	bl	81051cc <_ZSt12__niter_baseIP8SMessageET_S2_>
 810552a:	4605      	mov	r5, r0
 810552c:	687b      	ldr	r3, [r7, #4]
 810552e:	4618      	mov	r0, r3
 8105530:	f7ff fe4c 	bl	81051cc <_ZSt12__niter_baseIP8SMessageET_S2_>
 8105534:	4603      	mov	r3, r0
 8105536:	461a      	mov	r2, r3
 8105538:	4629      	mov	r1, r5
 810553a:	4620      	mov	r0, r4
 810553c:	f000 f85a 	bl	81055f4 <_ZSt14__copy_move_a1ILb1EP8SMessageS1_ET1_T0_S3_S2_>
 8105540:	4602      	mov	r2, r0
 8105542:	1d3b      	adds	r3, r7, #4
 8105544:	4611      	mov	r1, r2
 8105546:	4618      	mov	r0, r3
 8105548:	f000 f864 	bl	8105614 <_ZSt12__niter_wrapIP8SMessageET_RKS2_S2_>
 810554c:	4603      	mov	r3, r0
    }
 810554e:	4618      	mov	r0, r3
 8105550:	3710      	adds	r7, #16
 8105552:	46bd      	mov	sp, r7
 8105554:	bdb0      	pop	{r4, r5, r7, pc}

08105556 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8105556:	b480      	push	{r7}
 8105558:	b083      	sub	sp, #12
 810555a:	af00      	add	r7, sp, #0
 810555c:	6078      	str	r0, [r7, #4]
 810555e:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 8105560:	687b      	ldr	r3, [r7, #4]
 8105562:	683a      	ldr	r2, [r7, #0]
 8105564:	6812      	ldr	r2, [r2, #0]
 8105566:	601a      	str	r2, [r3, #0]
      { }
 8105568:	687b      	ldr	r3, [r7, #4]
 810556a:	4618      	mov	r0, r3
 810556c:	370c      	adds	r7, #12
 810556e:	46bd      	mov	sp, r7
 8105570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105574:	4770      	bx	lr

08105576 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
  */
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      _GLIBCXX20_CONSTEXPR
      inline
      pair<_T1, _T2>::
 8105576:	b5b0      	push	{r4, r5, r7, lr}
 8105578:	b086      	sub	sp, #24
 810557a:	af02      	add	r7, sp, #8
 810557c:	60f8      	str	r0, [r7, #12]
 810557e:	7239      	strb	r1, [r7, #8]
 8105580:	607a      	str	r2, [r7, #4]
 8105582:	703b      	strb	r3, [r7, #0]
      pair(piecewise_construct_t,
	   tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8105584:	463a      	mov	r2, r7
 8105586:	f88d 4000 	strb.w	r4, [sp]
 810558a:	462b      	mov	r3, r5
 810558c:	6879      	ldr	r1, [r7, #4]
 810558e:	68f8      	ldr	r0, [r7, #12]
 8105590:	f000 f84c 	bl	810562c <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 8105594:	68fb      	ldr	r3, [r7, #12]
 8105596:	4618      	mov	r0, r3
 8105598:	3710      	adds	r7, #16
 810559a:	46bd      	mov	sp, r7
 810559c:	bdb0      	pop	{r4, r5, r7, pc}

0810559e <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJOS1_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 810559e:	b5b0      	push	{r4, r5, r7, lr}
 81055a0:	b086      	sub	sp, #24
 81055a2:	af02      	add	r7, sp, #8
 81055a4:	60f8      	str	r0, [r7, #12]
 81055a6:	7239      	strb	r1, [r7, #8]
 81055a8:	607a      	str	r2, [r7, #4]
 81055aa:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 81055ac:	463a      	mov	r2, r7
 81055ae:	f88d 4000 	strb.w	r4, [sp]
 81055b2:	462b      	mov	r3, r5
 81055b4:	6879      	ldr	r1, [r7, #4]
 81055b6:	68f8      	ldr	r0, [r7, #12]
 81055b8:	f000 f852 	bl	8105660 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJOS1_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 81055bc:	68fb      	ldr	r3, [r7, #12]
 81055be:	4618      	mov	r0, r3
 81055c0:	3710      	adds	r7, #16
 81055c2:	46bd      	mov	sp, r7
 81055c4:	bdb0      	pop	{r4, r5, r7, pc}

081055c6 <_ZNKSt13move_iteratorIP8SMessageE4baseEv>:
      base() const
 81055c6:	b480      	push	{r7}
 81055c8:	b083      	sub	sp, #12
 81055ca:	af00      	add	r7, sp, #0
 81055cc:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 81055ce:	687b      	ldr	r3, [r7, #4]
 81055d0:	681b      	ldr	r3, [r3, #0]
 81055d2:	4618      	mov	r0, r3
 81055d4:	370c      	adds	r7, #12
 81055d6:	46bd      	mov	sp, r7
 81055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81055dc:	4770      	bx	lr

081055de <_ZSt12__miter_baseIP8SMessageET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 81055de:	b480      	push	{r7}
 81055e0:	b083      	sub	sp, #12
 81055e2:	af00      	add	r7, sp, #0
 81055e4:	6078      	str	r0, [r7, #4]
    { return __it; }
 81055e6:	687b      	ldr	r3, [r7, #4]
 81055e8:	4618      	mov	r0, r3
 81055ea:	370c      	adds	r7, #12
 81055ec:	46bd      	mov	sp, r7
 81055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81055f2:	4770      	bx	lr

081055f4 <_ZSt14__copy_move_a1ILb1EP8SMessageS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 81055f4:	b580      	push	{r7, lr}
 81055f6:	b084      	sub	sp, #16
 81055f8:	af00      	add	r7, sp, #0
 81055fa:	60f8      	str	r0, [r7, #12]
 81055fc:	60b9      	str	r1, [r7, #8]
 81055fe:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8105600:	687a      	ldr	r2, [r7, #4]
 8105602:	68b9      	ldr	r1, [r7, #8]
 8105604:	68f8      	ldr	r0, [r7, #12]
 8105606:	f000 f845 	bl	8105694 <_ZSt14__copy_move_a2ILb1EP8SMessageS1_ET1_T0_S3_S2_>
 810560a:	4603      	mov	r3, r0
 810560c:	4618      	mov	r0, r3
 810560e:	3710      	adds	r7, #16
 8105610:	46bd      	mov	sp, r7
 8105612:	bd80      	pop	{r7, pc}

08105614 <_ZSt12__niter_wrapIP8SMessageET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8105614:	b480      	push	{r7}
 8105616:	b083      	sub	sp, #12
 8105618:	af00      	add	r7, sp, #0
 810561a:	6078      	str	r0, [r7, #4]
 810561c:	6039      	str	r1, [r7, #0]
    { return __res; }
 810561e:	683b      	ldr	r3, [r7, #0]
 8105620:	4618      	mov	r0, r3
 8105622:	370c      	adds	r7, #12
 8105624:	46bd      	mov	sp, r7
 8105626:	f85d 7b04 	ldr.w	r7, [sp], #4
 810562a:	4770      	bx	lr

0810562c <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, size_t... _Indexes1,
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 810562c:	b580      	push	{r7, lr}
 810562e:	b084      	sub	sp, #16
 8105630:	af00      	add	r7, sp, #0
 8105632:	60f8      	str	r0, [r7, #12]
 8105634:	60b9      	str	r1, [r7, #8]
 8105636:	607a      	str	r2, [r7, #4]
 8105638:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 810563a:	68b8      	ldr	r0, [r7, #8]
 810563c:	f000 f83a 	bl	81056b4 <_ZSt3getILj0EJRKN19EventManagerCM4Task11EEventQueueEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8105640:	4603      	mov	r3, r0
 8105642:	4618      	mov	r0, r3
 8105644:	f000 f843 	bl	81056ce <_ZSt7forwardIRKN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS4_E4typeE>
 8105648:	4603      	mov	r3, r0
 810564a:	781a      	ldrb	r2, [r3, #0]
 810564c:	68fb      	ldr	r3, [r7, #12]
 810564e:	701a      	strb	r2, [r3, #0]
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8105650:	68fb      	ldr	r3, [r7, #12]
 8105652:	2200      	movs	r2, #0
 8105654:	605a      	str	r2, [r3, #4]
      { }
 8105656:	68fb      	ldr	r3, [r7, #12]
 8105658:	4618      	mov	r0, r3
 810565a:	3710      	adds	r7, #16
 810565c:	46bd      	mov	sp, r7
 810565e:	bd80      	pop	{r7, pc}

08105660 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJOS1_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8105660:	b580      	push	{r7, lr}
 8105662:	b084      	sub	sp, #16
 8105664:	af00      	add	r7, sp, #0
 8105666:	60f8      	str	r0, [r7, #12]
 8105668:	60b9      	str	r1, [r7, #8]
 810566a:	607a      	str	r2, [r7, #4]
 810566c:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 810566e:	68b8      	ldr	r0, [r7, #8]
 8105670:	f000 f838 	bl	81056e4 <_ZSt3getILj0EJON19EventManagerCM4Task11EEventQueueEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 8105674:	4603      	mov	r3, r0
 8105676:	4618      	mov	r0, r3
 8105678:	f000 f841 	bl	81056fe <_ZSt7forwardION19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 810567c:	4603      	mov	r3, r0
 810567e:	781a      	ldrb	r2, [r3, #0]
 8105680:	68fb      	ldr	r3, [r7, #12]
 8105682:	701a      	strb	r2, [r3, #0]
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8105684:	68fb      	ldr	r3, [r7, #12]
 8105686:	2200      	movs	r2, #0
 8105688:	605a      	str	r2, [r3, #4]
      { }
 810568a:	68fb      	ldr	r3, [r7, #12]
 810568c:	4618      	mov	r0, r3
 810568e:	3710      	adds	r7, #16
 8105690:	46bd      	mov	sp, r7
 8105692:	bd80      	pop	{r7, pc}

08105694 <_ZSt14__copy_move_a2ILb1EP8SMessageS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8105694:	b580      	push	{r7, lr}
 8105696:	b084      	sub	sp, #16
 8105698:	af00      	add	r7, sp, #0
 810569a:	60f8      	str	r0, [r7, #12]
 810569c:	60b9      	str	r1, [r7, #8]
 810569e:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 81056a0:	687a      	ldr	r2, [r7, #4]
 81056a2:	68b9      	ldr	r1, [r7, #8]
 81056a4:	68f8      	ldr	r0, [r7, #12]
 81056a6:	f000 f835 	bl	8105714 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8SMessageEEPT_PKS4_S7_S5_>
 81056aa:	4603      	mov	r3, r0
    }
 81056ac:	4618      	mov	r0, r3
 81056ae:	3710      	adds	r7, #16
 81056b0:	46bd      	mov	sp, r7
 81056b2:	bd80      	pop	{r7, pc}

081056b4 <_ZSt3getILj0EJRKN19EventManagerCM4Task11EEventQueueEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 81056b4:	b580      	push	{r7, lr}
 81056b6:	b082      	sub	sp, #8
 81056b8:	af00      	add	r7, sp, #0
 81056ba:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 81056bc:	687b      	ldr	r3, [r7, #4]
 81056be:	4618      	mov	r0, r3
 81056c0:	f000 f852 	bl	8105768 <_ZSt12__get_helperILj0ERKN19EventManagerCM4Task11EEventQueueEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 81056c4:	4603      	mov	r3, r0
 81056c6:	4618      	mov	r0, r3
 81056c8:	3708      	adds	r7, #8
 81056ca:	46bd      	mov	sp, r7
 81056cc:	bd80      	pop	{r7, pc}

081056ce <_ZSt7forwardIRKN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81056ce:	b480      	push	{r7}
 81056d0:	b083      	sub	sp, #12
 81056d2:	af00      	add	r7, sp, #0
 81056d4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81056d6:	687b      	ldr	r3, [r7, #4]
 81056d8:	4618      	mov	r0, r3
 81056da:	370c      	adds	r7, #12
 81056dc:	46bd      	mov	sp, r7
 81056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81056e2:	4770      	bx	lr

081056e4 <_ZSt3getILj0EJON19EventManagerCM4Task11EEventQueueEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 81056e4:	b580      	push	{r7, lr}
 81056e6:	b082      	sub	sp, #8
 81056e8:	af00      	add	r7, sp, #0
 81056ea:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 81056ec:	687b      	ldr	r3, [r7, #4]
 81056ee:	4618      	mov	r0, r3
 81056f0:	f000 f846 	bl	8105780 <_ZSt12__get_helperILj0EON19EventManagerCM4Task11EEventQueueEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 81056f4:	4603      	mov	r3, r0
 81056f6:	4618      	mov	r0, r3
 81056f8:	3708      	adds	r7, #8
 81056fa:	46bd      	mov	sp, r7
 81056fc:	bd80      	pop	{r7, pc}

081056fe <_ZSt7forwardION19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81056fe:	b480      	push	{r7}
 8105700:	b083      	sub	sp, #12
 8105702:	af00      	add	r7, sp, #0
 8105704:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8105706:	687b      	ldr	r3, [r7, #4]
 8105708:	4618      	mov	r0, r3
 810570a:	370c      	adds	r7, #12
 810570c:	46bd      	mov	sp, r7
 810570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105712:	4770      	bx	lr

08105714 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8SMessageEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8105714:	b580      	push	{r7, lr}
 8105716:	b086      	sub	sp, #24
 8105718:	af00      	add	r7, sp, #0
 810571a:	60f8      	str	r0, [r7, #12]
 810571c:	60b9      	str	r1, [r7, #8]
 810571e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8105720:	68ba      	ldr	r2, [r7, #8]
 8105722:	68fb      	ldr	r3, [r7, #12]
 8105724:	1ad3      	subs	r3, r2, r3
 8105726:	109b      	asrs	r3, r3, #2
 8105728:	4a0e      	ldr	r2, [pc, #56]	@ (8105764 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8SMessageEEPT_PKS4_S7_S5_+0x50>)
 810572a:	fb02 f303 	mul.w	r3, r2, r3
 810572e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8105730:	697b      	ldr	r3, [r7, #20]
 8105732:	2b00      	cmp	r3, #0
 8105734:	d009      	beq.n	810574a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8SMessageEEPT_PKS4_S7_S5_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8105736:	697a      	ldr	r2, [r7, #20]
 8105738:	4613      	mov	r3, r2
 810573a:	00db      	lsls	r3, r3, #3
 810573c:	1a9b      	subs	r3, r3, r2
 810573e:	009b      	lsls	r3, r3, #2
 8105740:	461a      	mov	r2, r3
 8105742:	68f9      	ldr	r1, [r7, #12]
 8105744:	6878      	ldr	r0, [r7, #4]
 8105746:	f01c ff19 	bl	812257c <memmove>
	  return __result + _Num;
 810574a:	697a      	ldr	r2, [r7, #20]
 810574c:	4613      	mov	r3, r2
 810574e:	00db      	lsls	r3, r3, #3
 8105750:	1a9b      	subs	r3, r3, r2
 8105752:	009b      	lsls	r3, r3, #2
 8105754:	461a      	mov	r2, r3
 8105756:	687b      	ldr	r3, [r7, #4]
 8105758:	4413      	add	r3, r2
	}
 810575a:	4618      	mov	r0, r3
 810575c:	3718      	adds	r7, #24
 810575e:	46bd      	mov	sp, r7
 8105760:	bd80      	pop	{r7, pc}
 8105762:	bf00      	nop
 8105764:	b6db6db7 	.word	0xb6db6db7

08105768 <_ZSt12__get_helperILj0ERKN19EventManagerCM4Task11EEventQueueEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8105768:	b580      	push	{r7, lr}
 810576a:	b082      	sub	sp, #8
 810576c:	af00      	add	r7, sp, #0
 810576e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8105770:	6878      	ldr	r0, [r7, #4]
 8105772:	f000 f811 	bl	8105798 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEE7_M_headERS4_>
 8105776:	4603      	mov	r3, r0
 8105778:	4618      	mov	r0, r3
 810577a:	3708      	adds	r7, #8
 810577c:	46bd      	mov	sp, r7
 810577e:	bd80      	pop	{r7, pc}

08105780 <_ZSt12__get_helperILj0EON19EventManagerCM4Task11EEventQueueEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8105780:	b580      	push	{r7, lr}
 8105782:	b082      	sub	sp, #8
 8105784:	af00      	add	r7, sp, #0
 8105786:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8105788:	6878      	ldr	r0, [r7, #4]
 810578a:	f000 f812 	bl	81057b2 <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEE7_M_headERS3_>
 810578e:	4603      	mov	r3, r0
 8105790:	4618      	mov	r0, r3
 8105792:	3708      	adds	r7, #8
 8105794:	46bd      	mov	sp, r7
 8105796:	bd80      	pop	{r7, pc}

08105798 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8105798:	b580      	push	{r7, lr}
 810579a:	b082      	sub	sp, #8
 810579c:	af00      	add	r7, sp, #0
 810579e:	6078      	str	r0, [r7, #4]
 81057a0:	687b      	ldr	r3, [r7, #4]
 81057a2:	4618      	mov	r0, r3
 81057a4:	f000 f812 	bl	81057cc <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EE7_M_headERS4_>
 81057a8:	4603      	mov	r3, r0
 81057aa:	4618      	mov	r0, r3
 81057ac:	3708      	adds	r7, #8
 81057ae:	46bd      	mov	sp, r7
 81057b0:	bd80      	pop	{r7, pc}

081057b2 <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEE7_M_headERS3_>:
 81057b2:	b580      	push	{r7, lr}
 81057b4:	b082      	sub	sp, #8
 81057b6:	af00      	add	r7, sp, #0
 81057b8:	6078      	str	r0, [r7, #4]
 81057ba:	687b      	ldr	r3, [r7, #4]
 81057bc:	4618      	mov	r0, r3
 81057be:	f000 f811 	bl	81057e4 <_ZNSt10_Head_baseILj0EON19EventManagerCM4Task11EEventQueueELb0EE7_M_headERS3_>
 81057c2:	4603      	mov	r3, r0
 81057c4:	4618      	mov	r0, r3
 81057c6:	3708      	adds	r7, #8
 81057c8:	46bd      	mov	sp, r7
 81057ca:	bd80      	pop	{r7, pc}

081057cc <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 81057cc:	b480      	push	{r7}
 81057ce:	b083      	sub	sp, #12
 81057d0:	af00      	add	r7, sp, #0
 81057d2:	6078      	str	r0, [r7, #4]
 81057d4:	687b      	ldr	r3, [r7, #4]
 81057d6:	681b      	ldr	r3, [r3, #0]
 81057d8:	4618      	mov	r0, r3
 81057da:	370c      	adds	r7, #12
 81057dc:	46bd      	mov	sp, r7
 81057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81057e2:	4770      	bx	lr

081057e4 <_ZNSt10_Head_baseILj0EON19EventManagerCM4Task11EEventQueueELb0EE7_M_headERS3_>:
 81057e4:	b480      	push	{r7}
 81057e6:	b083      	sub	sp, #12
 81057e8:	af00      	add	r7, sp, #0
 81057ea:	6078      	str	r0, [r7, #4]
 81057ec:	687b      	ldr	r3, [r7, #4]
 81057ee:	681b      	ldr	r3, [r3, #0]
 81057f0:	4618      	mov	r0, r3
 81057f2:	370c      	adds	r7, #12
 81057f4:	46bd      	mov	sp, r7
 81057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81057fa:	4770      	bx	lr

081057fc <_Z18StartTask_EDaemonNPv>:
#include "cm_ipc.h"

extern QueueHandle_t queueToNativeDaemon;

void StartTask_EDaemonN(void *argument)
{
 81057fc:	b580      	push	{r7, lr}
 81057fe:	b086      	sub	sp, #24
 8105800:	af00      	add	r7, sp, #0
 8105802:	6078      	str	r0, [r7, #4]
	ipc_start();
 8105804:	f7fa fff2 	bl	81007ec <ipc_start>
	IPCDaemonNativeTask IPCDaemonNativeTaskInstance;
 8105808:	f107 030c 	add.w	r3, r7, #12
 810580c:	4618      	mov	r0, r3
 810580e:	f000 f80b 	bl	8105828 <_ZN19IPCDaemonNativeTaskC1Ev>

	for(;;)
	{
		IPCDaemonNativeTaskInstance.process();
 8105812:	f107 030c 	add.w	r3, r7, #12
 8105816:	4618      	mov	r0, r3
 8105818:	f000 f8ba 	bl	8105990 <_ZN19IPCDaemonNativeTask7processEv>
		osDelay(1);
 810581c:	2001      	movs	r0, #1
 810581e:	f00a fa0e 	bl	810fc3e <osDelay>
		IPCDaemonNativeTaskInstance.process();
 8105822:	bf00      	nop
 8105824:	e7f5      	b.n	8105812 <_Z18StartTask_EDaemonNPv+0x16>
	...

08105828 <_ZN19IPCDaemonNativeTaskC1Ev>:
	}
}

IPCDaemonNativeTask::IPCDaemonNativeTask() : event_bus(EventBus(queueToNativeDaemon, EVENT_CLIENT_DAEMON_NATIVE)) {}
 8105828:	b580      	push	{r7, lr}
 810582a:	b082      	sub	sp, #8
 810582c:	af00      	add	r7, sp, #0
 810582e:	6078      	str	r0, [r7, #4]
 8105830:	687b      	ldr	r3, [r7, #4]
 8105832:	4a05      	ldr	r2, [pc, #20]	@ (8105848 <_ZN19IPCDaemonNativeTaskC1Ev+0x20>)
 8105834:	6811      	ldr	r1, [r2, #0]
 8105836:	2207      	movs	r2, #7
 8105838:	4618      	mov	r0, r3
 810583a:	f7fd fc0b 	bl	8103054 <_ZN8EventBusC1EP15QueueDefinition12EEventClient>
 810583e:	687b      	ldr	r3, [r7, #4]
 8105840:	4618      	mov	r0, r3
 8105842:	3708      	adds	r7, #8
 8105844:	46bd      	mov	sp, r7
 8105846:	bd80      	pop	{r7, pc}
 8105848:	100001b4 	.word	0x100001b4

0810584c <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_>:

void IPCDaemonNativeTask::OnEvent(EEventType event, UMessageData msg, EEventClient eventSender, EEventClient eventReceiver)
{
 810584c:	b082      	sub	sp, #8
 810584e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8105850:	b091      	sub	sp, #68	@ 0x44
 8105852:	af04      	add	r7, sp, #16
 8105854:	6078      	str	r0, [r7, #4]
 8105856:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 810585a:	e880 000c 	stmia.w	r0, {r2, r3}
 810585e:	460b      	mov	r3, r1
 8105860:	70fb      	strb	r3, [r7, #3]
	switch(eventReceiver)
 8105862:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8105866:	2b00      	cmp	r3, #0
 8105868:	d005      	beq.n	8105876 <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x2a>
 810586a:	2b00      	cmp	r3, #0
 810586c:	db34      	blt.n	81058d8 <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x8c>
 810586e:	3b03      	subs	r3, #3
 8105870:	2b01      	cmp	r3, #1
 8105872:	d831      	bhi.n	81058d8 <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x8c>
 8105874:	e01d      	b.n	81058b2 <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x66>
	{
	// if recipient is on CM7 side, then send message through IPC.
	case EVENT_CLIENT_FRONTEND:
	{
		SMessage sMsg;
		sMsg.event_type = event;
 8105876:	78fb      	ldrb	r3, [r7, #3]
 8105878:	733b      	strb	r3, [r7, #12]
		sMsg.message_data = msg;
 810587a:	f107 0410 	add.w	r4, r7, #16
 810587e:	f107 0548 	add.w	r5, r7, #72	@ 0x48
 8105882:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8105884:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8105886:	682b      	ldr	r3, [r5, #0]
 8105888:	6023      	str	r3, [r4, #0]
		sMsg.event_sender = eventSender;
 810588a:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 810588e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		sMsg.event_receiver = eventReceiver;
 8105892:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8105896:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		size_t len = sizeof(sMsg);
 810589a:	231c      	movs	r3, #28
 810589c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		size_t ret = ipc_sendmsg(&sMsg, len, 1000);
 810589e:	f107 030c 	add.w	r3, r7, #12
 81058a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 81058a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 81058a8:	4618      	mov	r0, r3
 81058aa:	f7fb f825 	bl	81008f8 <ipc_sendmsg>
 81058ae:	62b8      	str	r0, [r7, #40]	@ 0x28
		break;
 81058b0:	e013      	b.n	81058da <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x8e>
	}
	// if recipient is on CM4 side, then forward to event manager.
	case EVENT_CLIENT_ETHERNET_CONNECTION_MANAGER:
	case EVENT_CLIENT_THERMOMETER:
		event_bus.send(event, msg, eventReceiver);
 81058b2:	687d      	ldr	r5, [r7, #4]
 81058b4:	78fe      	ldrb	r6, [r7, #3]
 81058b6:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 81058ba:	9303      	str	r3, [sp, #12]
 81058bc:	466c      	mov	r4, sp
 81058be:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 81058c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 81058c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 81058ca:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 81058ce:	cb0c      	ldmia	r3, {r2, r3}
 81058d0:	4631      	mov	r1, r6
 81058d2:	4628      	mov	r0, r5
 81058d4:	f7fd fbd8 	bl	8103088 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient>
	default:
		break;;
 81058d8:	bf00      	nop
	}
}
 81058da:	bf00      	nop
 81058dc:	3734      	adds	r7, #52	@ 0x34
 81058de:	46bd      	mov	sp, r7
 81058e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 81058e4:	b002      	add	sp, #8
 81058e6:	4770      	bx	lr

081058e8 <_ZN19IPCDaemonNativeTask17processIpcReceiveEv>:

void IPCDaemonNativeTask::processIpcReceive()
{
 81058e8:	b5b0      	push	{r4, r5, r7, lr}
 81058ea:	b092      	sub	sp, #72	@ 0x48
 81058ec:	af06      	add	r7, sp, #24
 81058ee:	6078      	str	r0, [r7, #4]
	SMessage sMsg;
	size_t len = sizeof(sMsg);
 81058f0:	231c      	movs	r3, #28
 81058f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	size_t ret = ipc_recvmsg(&sMsg, len, 0);
 81058f4:	f107 030c 	add.w	r3, r7, #12
 81058f8:	2200      	movs	r2, #0
 81058fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 81058fc:	4618      	mov	r0, r3
 81058fe:	f7fb f823 	bl	8100948 <ipc_recvmsg>
 8105902:	62b8      	str	r0, [r7, #40]	@ 0x28
	if(ret == len)
 8105904:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8105906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105908:	429a      	cmp	r2, r3
 810590a:	d114      	bne.n	8105936 <_ZN19IPCDaemonNativeTask17processIpcReceiveEv+0x4e>
	{
		OnEvent(sMsg.event_type, sMsg.message_data, sMsg.event_sender, sMsg.event_receiver);
 810590c:	7b3d      	ldrb	r5, [r7, #12]
 810590e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8105912:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8105916:	9204      	str	r2, [sp, #16]
 8105918:	9303      	str	r3, [sp, #12]
 810591a:	466c      	mov	r4, sp
 810591c:	f107 0318 	add.w	r3, r7, #24
 8105920:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8105924:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8105928:	f107 0310 	add.w	r3, r7, #16
 810592c:	cb0c      	ldmia	r3, {r2, r3}
 810592e:	4629      	mov	r1, r5
 8105930:	6878      	ldr	r0, [r7, #4]
 8105932:	f7ff ff8b 	bl	810584c <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_>
	}
}
 8105936:	bf00      	nop
 8105938:	3730      	adds	r7, #48	@ 0x30
 810593a:	46bd      	mov	sp, r7
 810593c:	bdb0      	pop	{r4, r5, r7, pc}

0810593e <_ZZN19IPCDaemonNativeTask7processEvENKUl10EEventType12UMessageData12EEventClientS2_E_clES0_S1_S2_S2_>:

void IPCDaemonNativeTask::process()
{
	processIpcReceive();
	event_bus.receive([this](EEventType event, UMessageData msg, EEventClient eventSender, EEventClient eventReceiver)
 810593e:	b082      	sub	sp, #8
 8105940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8105942:	b089      	sub	sp, #36	@ 0x24
 8105944:	af06      	add	r7, sp, #24
 8105946:	6078      	str	r0, [r7, #4]
 8105948:	f107 0020 	add.w	r0, r7, #32
 810594c:	e880 000c 	stmia.w	r0, {r2, r3}
 8105950:	460b      	mov	r3, r1
 8105952:	70fb      	strb	r3, [r7, #3]
 8105954:	687b      	ldr	r3, [r7, #4]
 8105956:	681d      	ldr	r5, [r3, #0]
                      {this->OnEvent(event, msg, eventSender, eventReceiver);});
 8105958:	78fe      	ldrb	r6, [r7, #3]
 810595a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 810595e:	9304      	str	r3, [sp, #16]
 8105960:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8105964:	9303      	str	r3, [sp, #12]
 8105966:	466c      	mov	r4, sp
 8105968:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810596c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8105970:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8105974:	f107 0320 	add.w	r3, r7, #32
 8105978:	cb0c      	ldmia	r3, {r2, r3}
 810597a:	4631      	mov	r1, r6
 810597c:	4628      	mov	r0, r5
 810597e:	f7ff ff65 	bl	810584c <_ZN19IPCDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_>
 8105982:	bf00      	nop
 8105984:	370c      	adds	r7, #12
 8105986:	46bd      	mov	sp, r7
 8105988:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 810598c:	b002      	add	sp, #8
 810598e:	4770      	bx	lr

08105990 <_ZN19IPCDaemonNativeTask7processEv>:
{
 8105990:	b590      	push	{r4, r7, lr}
 8105992:	b089      	sub	sp, #36	@ 0x24
 8105994:	af00      	add	r7, sp, #0
 8105996:	6078      	str	r0, [r7, #4]
	processIpcReceive();
 8105998:	6878      	ldr	r0, [r7, #4]
 810599a:	f7ff ffa5 	bl	81058e8 <_ZN19IPCDaemonNativeTask17processIpcReceiveEv>
	event_bus.receive([this](EEventType event, UMessageData msg, EEventClient eventSender, EEventClient eventReceiver)
 810599e:	687c      	ldr	r4, [r7, #4]
 81059a0:	687b      	ldr	r3, [r7, #4]
 81059a2:	61fb      	str	r3, [r7, #28]
 81059a4:	f107 021c 	add.w	r2, r7, #28
 81059a8:	f107 030c 	add.w	r3, r7, #12
 81059ac:	4611      	mov	r1, r2
 81059ae:	4618      	mov	r0, r3
 81059b0:	f000 f810 	bl	81059d4 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_vEEOT_>
 81059b4:	f107 030c 	add.w	r3, r7, #12
 81059b8:	4619      	mov	r1, r3
 81059ba:	4620      	mov	r0, r4
 81059bc:	f7fd fb9d 	bl	81030fa <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE>
 81059c0:	f107 030c 	add.w	r3, r7, #12
 81059c4:	4618      	mov	r0, r3
 81059c6:	f7fb ff02 	bl	81017ce <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EED1Ev>
}
 81059ca:	bf00      	nop
 81059cc:	3724      	adds	r7, #36	@ 0x24
 81059ce:	46bd      	mov	sp, r7
 81059d0:	bd90      	pop	{r4, r7, pc}
	...

081059d4 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_vEEOT_>:
	function(_Functor&& __f)
 81059d4:	b590      	push	{r4, r7, lr}
 81059d6:	b083      	sub	sp, #12
 81059d8:	af00      	add	r7, sp, #0
 81059da:	6078      	str	r0, [r7, #4]
 81059dc:	6039      	str	r1, [r7, #0]
	: _Function_base()
 81059de:	687b      	ldr	r3, [r7, #4]
 81059e0:	461a      	mov	r2, r3
 81059e2:	2300      	movs	r3, #0
 81059e4:	6013      	str	r3, [r2, #0]
 81059e6:	6053      	str	r3, [r2, #4]
 81059e8:	6093      	str	r3, [r2, #8]
 81059ea:	687b      	ldr	r3, [r7, #4]
 81059ec:	4618      	mov	r0, r3
 81059ee:	f7fd f903 	bl	8102bf8 <_ZNSt14_Function_baseC1Ev>
 81059f2:	687b      	ldr	r3, [r7, #4]
 81059f4:	2200      	movs	r2, #0
 81059f6:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 81059f8:	6838      	ldr	r0, [r7, #0]
 81059fa:	f000 f81b 	bl	8105a34 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E21_M_not_empty_functionIS5_EEbRKT_>
 81059fe:	4603      	mov	r3, r0
 8105a00:	2b00      	cmp	r3, #0
 8105a02:	d00e      	beq.n	8105a22 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 8105a04:	687c      	ldr	r4, [r7, #4]
 8105a06:	6838      	ldr	r0, [r7, #0]
 8105a08:	f000 f81f 	bl	8105a4a <_ZSt7forwardIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 8105a0c:	4603      	mov	r3, r0
 8105a0e:	4619      	mov	r1, r3
 8105a10:	4620      	mov	r0, r4
 8105a12:	f000 f825 	bl	8105a60 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIS5_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 8105a16:	687b      	ldr	r3, [r7, #4]
 8105a18:	4a04      	ldr	r2, [pc, #16]	@ (8105a2c <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_vEEOT_+0x58>)
 8105a1a:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8105a1c:	687b      	ldr	r3, [r7, #4]
 8105a1e:	4a04      	ldr	r2, [pc, #16]	@ (8105a30 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_vEEOT_+0x5c>)
 8105a20:	609a      	str	r2, [r3, #8]
	}
 8105a22:	687b      	ldr	r3, [r7, #4]
 8105a24:	4618      	mov	r0, r3
 8105a26:	370c      	adds	r7, #12
 8105a28:	46bd      	mov	sp, r7
 8105a2a:	bd90      	pop	{r4, r7, pc}
 8105a2c:	08105a85 	.word	0x08105a85
 8105a30:	08105ad5 	.word	0x08105ad5

08105a34 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E21_M_not_empty_functionIS5_EEbRKT_>:
	  _M_not_empty_function(const _Tp&) noexcept
 8105a34:	b480      	push	{r7}
 8105a36:	b083      	sub	sp, #12
 8105a38:	af00      	add	r7, sp, #0
 8105a3a:	6078      	str	r0, [r7, #4]
	  { return true; }
 8105a3c:	2301      	movs	r3, #1
 8105a3e:	4618      	mov	r0, r3
 8105a40:	370c      	adds	r7, #12
 8105a42:	46bd      	mov	sp, r7
 8105a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a48:	4770      	bx	lr

08105a4a <_ZSt7forwardIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8105a4a:	b480      	push	{r7}
 8105a4c:	b083      	sub	sp, #12
 8105a4e:	af00      	add	r7, sp, #0
 8105a50:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8105a52:	687b      	ldr	r3, [r7, #4]
 8105a54:	4618      	mov	r0, r3
 8105a56:	370c      	adds	r7, #12
 8105a58:	46bd      	mov	sp, r7
 8105a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a5e:	4770      	bx	lr

08105a60 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIS5_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8105a60:	b590      	push	{r4, r7, lr}
 8105a62:	b083      	sub	sp, #12
 8105a64:	af00      	add	r7, sp, #0
 8105a66:	6078      	str	r0, [r7, #4]
 8105a68:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8105a6a:	6838      	ldr	r0, [r7, #0]
 8105a6c:	f7ff ffed 	bl	8105a4a <_ZSt7forwardIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 8105a70:	4603      	mov	r3, r0
 8105a72:	4622      	mov	r2, r4
 8105a74:	4619      	mov	r1, r3
 8105a76:	6878      	ldr	r0, [r7, #4]
 8105a78:	f000 f84b 	bl	8105b12 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8105a7c:	bf00      	nop
 8105a7e:	370c      	adds	r7, #12
 8105a80:	46bd      	mov	sp, r7
 8105a82:	bd90      	pop	{r4, r7, pc}

08105a84 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_E9_M_invokeERKSt9_Any_dataOS0_OS1_OS2_SC_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8105a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8105a88:	b086      	sub	sp, #24
 8105a8a:	af02      	add	r7, sp, #8
 8105a8c:	60f8      	str	r0, [r7, #12]
 8105a8e:	60b9      	str	r1, [r7, #8]
 8105a90:	607a      	str	r2, [r7, #4]
 8105a92:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8105a94:	68f8      	ldr	r0, [r7, #12]
 8105a96:	f000 f855 	bl	8105b44 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 8105a9a:	4604      	mov	r4, r0
 8105a9c:	68b8      	ldr	r0, [r7, #8]
 8105a9e:	f7fd f988 	bl	8102db2 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8105aa2:	4605      	mov	r5, r0
 8105aa4:	6878      	ldr	r0, [r7, #4]
 8105aa6:	f7fd f98f 	bl	8102dc8 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8105aaa:	4606      	mov	r6, r0
 8105aac:	6838      	ldr	r0, [r7, #0]
 8105aae:	f7fd f996 	bl	8102dde <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8105ab2:	4680      	mov	r8, r0
 8105ab4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8105ab6:	f7fd f992 	bl	8102dde <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8105aba:	4603      	mov	r3, r0
 8105abc:	9300      	str	r3, [sp, #0]
 8105abe:	4643      	mov	r3, r8
 8105ac0:	4632      	mov	r2, r6
 8105ac2:	4629      	mov	r1, r5
 8105ac4:	4620      	mov	r0, r4
 8105ac6:	f000 f84e 	bl	8105b66 <_ZSt10__invoke_rIvRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>
				     std::forward<_ArgTypes>(__args)...);
 8105aca:	bf00      	nop
      }
 8105acc:	3710      	adds	r7, #16
 8105ace:	46bd      	mov	sp, r7
 8105ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08105ad4 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8105ad4:	b590      	push	{r4, r7, lr}
 8105ad6:	b085      	sub	sp, #20
 8105ad8:	af00      	add	r7, sp, #0
 8105ada:	60f8      	str	r0, [r7, #12]
 8105adc:	60b9      	str	r1, [r7, #8]
 8105ade:	4613      	mov	r3, r2
 8105ae0:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8105ae2:	79fb      	ldrb	r3, [r7, #7]
 8105ae4:	2b01      	cmp	r3, #1
 8105ae6:	d109      	bne.n	8105afc <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8105ae8:	68f8      	ldr	r0, [r7, #12]
 8105aea:	f000 f865 	bl	8105bb8 <_ZNSt9_Any_data9_M_accessIPZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>
 8105aee:	4604      	mov	r4, r0
 8105af0:	68b8      	ldr	r0, [r7, #8]
 8105af2:	f000 f827 	bl	8105b44 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 8105af6:	4603      	mov	r3, r0
 8105af8:	6023      	str	r3, [r4, #0]
	    break;
 8105afa:	e005      	b.n	8105b08 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN19IPCDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8105afc:	79fb      	ldrb	r3, [r7, #7]
 8105afe:	461a      	mov	r2, r3
 8105b00:	68b9      	ldr	r1, [r7, #8]
 8105b02:	68f8      	ldr	r0, [r7, #12]
 8105b04:	f000 f864 	bl	8105bd0 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>
	return false;
 8105b08:	2300      	movs	r3, #0
      }
 8105b0a:	4618      	mov	r0, r3
 8105b0c:	3714      	adds	r7, #20
 8105b0e:	46bd      	mov	sp, r7
 8105b10:	bd90      	pop	{r4, r7, pc}

08105b12 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8105b12:	b590      	push	{r4, r7, lr}
 8105b14:	b085      	sub	sp, #20
 8105b16:	af00      	add	r7, sp, #0
 8105b18:	60f8      	str	r0, [r7, #12]
 8105b1a:	60b9      	str	r1, [r7, #8]
 8105b1c:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8105b1e:	68f8      	ldr	r0, [r7, #12]
 8105b20:	f7fb fc0c 	bl	810133c <_ZNSt9_Any_data9_M_accessEv>
 8105b24:	4603      	mov	r3, r0
 8105b26:	4619      	mov	r1, r3
 8105b28:	2004      	movs	r0, #4
 8105b2a:	f7fb fbfb 	bl	8101324 <_ZnwjPv>
 8105b2e:	4604      	mov	r4, r0
 8105b30:	68b8      	ldr	r0, [r7, #8]
 8105b32:	f7ff ff8a 	bl	8105a4a <_ZSt7forwardIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 8105b36:	4603      	mov	r3, r0
 8105b38:	681b      	ldr	r3, [r3, #0]
 8105b3a:	6023      	str	r3, [r4, #0]
	  }
 8105b3c:	bf00      	nop
 8105b3e:	3714      	adds	r7, #20
 8105b40:	46bd      	mov	sp, r7
 8105b42:	bd90      	pop	{r4, r7, pc}

08105b44 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 8105b44:	b580      	push	{r7, lr}
 8105b46:	b084      	sub	sp, #16
 8105b48:	af00      	add	r7, sp, #0
 8105b4a:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8105b4c:	6878      	ldr	r0, [r7, #4]
 8105b4e:	f000 f879 	bl	8105c44 <_ZNKSt9_Any_data9_M_accessIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERKT_v>
 8105b52:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8105b54:	68f8      	ldr	r0, [r7, #12]
 8105b56:	f000 f881 	bl	8105c5c <_ZSt11__addressofIKZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EPT_RS6_>
 8105b5a:	4603      	mov	r3, r0
 8105b5c:	bf00      	nop
	}
 8105b5e:	4618      	mov	r0, r3
 8105b60:	3710      	adds	r7, #16
 8105b62:	46bd      	mov	sp, r7
 8105b64:	bd80      	pop	{r7, pc}

08105b66 <_ZSt10__invoke_rIvRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8105b66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8105b6a:	b087      	sub	sp, #28
 8105b6c:	af02      	add	r7, sp, #8
 8105b6e:	60f8      	str	r0, [r7, #12]
 8105b70:	60b9      	str	r1, [r7, #8]
 8105b72:	607a      	str	r2, [r7, #4]
 8105b74:	603b      	str	r3, [r7, #0]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8105b76:	68f8      	ldr	r0, [r7, #12]
 8105b78:	f000 f87b 	bl	8105c72 <_ZSt7forwardIRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS6_E4typeE>
 8105b7c:	4605      	mov	r5, r0
 8105b7e:	68b8      	ldr	r0, [r7, #8]
 8105b80:	f7fd f917 	bl	8102db2 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8105b84:	4606      	mov	r6, r0
 8105b86:	6878      	ldr	r0, [r7, #4]
 8105b88:	f7fd f91e 	bl	8102dc8 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8105b8c:	4680      	mov	r8, r0
 8105b8e:	6838      	ldr	r0, [r7, #0]
 8105b90:	f7fd f925 	bl	8102dde <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8105b94:	4604      	mov	r4, r0
 8105b96:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8105b98:	f7fd f921 	bl	8102dde <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8105b9c:	4603      	mov	r3, r0
 8105b9e:	9301      	str	r3, [sp, #4]
 8105ba0:	9400      	str	r4, [sp, #0]
 8105ba2:	4643      	mov	r3, r8
 8105ba4:	4632      	mov	r2, r6
 8105ba6:	4629      	mov	r1, r5
 8105ba8:	4648      	mov	r0, r9
 8105baa:	f000 f86d 	bl	8105c88 <_ZSt13__invoke_implIvRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EET_St14__invoke_otherOT0_DpOT1_>
    }
 8105bae:	bf00      	nop
 8105bb0:	3714      	adds	r7, #20
 8105bb2:	46bd      	mov	sp, r7
 8105bb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08105bb8 <_ZNSt9_Any_data9_M_accessIPZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>:
      _M_access() noexcept
 8105bb8:	b580      	push	{r7, lr}
 8105bba:	b082      	sub	sp, #8
 8105bbc:	af00      	add	r7, sp, #0
 8105bbe:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8105bc0:	6878      	ldr	r0, [r7, #4]
 8105bc2:	f7fb fbbb 	bl	810133c <_ZNSt9_Any_data9_M_accessEv>
 8105bc6:	4603      	mov	r3, r0
 8105bc8:	4618      	mov	r0, r3
 8105bca:	3708      	adds	r7, #8
 8105bcc:	46bd      	mov	sp, r7
 8105bce:	bd80      	pop	{r7, pc}

08105bd0 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8105bd0:	b590      	push	{r4, r7, lr}
 8105bd2:	b085      	sub	sp, #20
 8105bd4:	af00      	add	r7, sp, #0
 8105bd6:	60f8      	str	r0, [r7, #12]
 8105bd8:	60b9      	str	r1, [r7, #8]
 8105bda:	4613      	mov	r3, r2
 8105bdc:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8105bde:	79fb      	ldrb	r3, [r7, #7]
 8105be0:	2b03      	cmp	r3, #3
 8105be2:	d82a      	bhi.n	8105c3a <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
 8105be4:	a201      	add	r2, pc, #4	@ (adr r2, 8105bec <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x1c>)
 8105be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105bea:	bf00      	nop
 8105bec:	08105bfd 	.word	0x08105bfd
 8105bf0:	08105c0b 	.word	0x08105c0b
 8105bf4:	08105c1f 	.word	0x08105c1f
 8105bf8:	08105c31 	.word	0x08105c31
	      __dest._M_access<const type_info*>() = nullptr;
 8105bfc:	68f8      	ldr	r0, [r7, #12]
 8105bfe:	f7fd f9be 	bl	8102f7e <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8105c02:	4603      	mov	r3, r0
 8105c04:	2200      	movs	r2, #0
 8105c06:	601a      	str	r2, [r3, #0]
	      break;
 8105c08:	e017      	b.n	8105c3a <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8105c0a:	68f8      	ldr	r0, [r7, #12]
 8105c0c:	f7ff ffd4 	bl	8105bb8 <_ZNSt9_Any_data9_M_accessIPZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>
 8105c10:	4604      	mov	r4, r0
 8105c12:	68b8      	ldr	r0, [r7, #8]
 8105c14:	f7ff ff96 	bl	8105b44 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 8105c18:	4603      	mov	r3, r0
 8105c1a:	6023      	str	r3, [r4, #0]
	      break;
 8105c1c:	e00d      	b.n	8105c3a <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8105c1e:	68b8      	ldr	r0, [r7, #8]
 8105c20:	f7ff ff90 	bl	8105b44 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 8105c24:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8105c26:	4619      	mov	r1, r3
 8105c28:	68f8      	ldr	r0, [r7, #12]
 8105c2a:	f000 f860 	bl	8105cee <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIRKS5_EEvRSt9_Any_dataOT_>
	      break;
 8105c2e:	e004      	b.n	8105c3a <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8105c30:	4621      	mov	r1, r4
 8105c32:	68f8      	ldr	r0, [r7, #12]
 8105c34:	f000 f86d 	bl	8105d12 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8105c38:	bf00      	nop
	  return false;
 8105c3a:	2300      	movs	r3, #0
	}
 8105c3c:	4618      	mov	r0, r3
 8105c3e:	3714      	adds	r7, #20
 8105c40:	46bd      	mov	sp, r7
 8105c42:	bd90      	pop	{r4, r7, pc}

08105c44 <_ZNKSt9_Any_data9_M_accessIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERKT_v>:
      _M_access() const noexcept
 8105c44:	b580      	push	{r7, lr}
 8105c46:	b082      	sub	sp, #8
 8105c48:	af00      	add	r7, sp, #0
 8105c4a:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8105c4c:	6878      	ldr	r0, [r7, #4]
 8105c4e:	f7fb fb80 	bl	8101352 <_ZNKSt9_Any_data9_M_accessEv>
 8105c52:	4603      	mov	r3, r0
 8105c54:	4618      	mov	r0, r3
 8105c56:	3708      	adds	r7, #8
 8105c58:	46bd      	mov	sp, r7
 8105c5a:	bd80      	pop	{r7, pc}

08105c5c <_ZSt11__addressofIKZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8105c5c:	b480      	push	{r7}
 8105c5e:	b083      	sub	sp, #12
 8105c60:	af00      	add	r7, sp, #0
 8105c62:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8105c64:	687b      	ldr	r3, [r7, #4]
 8105c66:	4618      	mov	r0, r3
 8105c68:	370c      	adds	r7, #12
 8105c6a:	46bd      	mov	sp, r7
 8105c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c70:	4770      	bx	lr

08105c72 <_ZSt7forwardIRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8105c72:	b480      	push	{r7}
 8105c74:	b083      	sub	sp, #12
 8105c76:	af00      	add	r7, sp, #0
 8105c78:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8105c7a:	687b      	ldr	r3, [r7, #4]
 8105c7c:	4618      	mov	r0, r3
 8105c7e:	370c      	adds	r7, #12
 8105c80:	46bd      	mov	sp, r7
 8105c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c86:	4770      	bx	lr

08105c88 <_ZSt13__invoke_implIvRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8105c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8105c8c:	b08a      	sub	sp, #40	@ 0x28
 8105c8e:	af06      	add	r7, sp, #24
 8105c90:	7338      	strb	r0, [r7, #12]
 8105c92:	60b9      	str	r1, [r7, #8]
 8105c94:	607a      	str	r2, [r7, #4]
 8105c96:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8105c98:	68b8      	ldr	r0, [r7, #8]
 8105c9a:	f7ff ffea 	bl	8105c72 <_ZSt7forwardIRZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS6_E4typeE>
 8105c9e:	4680      	mov	r8, r0
 8105ca0:	6878      	ldr	r0, [r7, #4]
 8105ca2:	f7fd f886 	bl	8102db2 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8105ca6:	4603      	mov	r3, r0
 8105ca8:	781e      	ldrb	r6, [r3, #0]
 8105caa:	6838      	ldr	r0, [r7, #0]
 8105cac:	f7fd f88c 	bl	8102dc8 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8105cb0:	4604      	mov	r4, r0
 8105cb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8105cb4:	f7fd f893 	bl	8102dde <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8105cb8:	4603      	mov	r3, r0
 8105cba:	781d      	ldrb	r5, [r3, #0]
 8105cbc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8105cbe:	f7fd f88e 	bl	8102dde <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8105cc2:	4603      	mov	r3, r0
 8105cc4:	781b      	ldrb	r3, [r3, #0]
 8105cc6:	9304      	str	r3, [sp, #16]
 8105cc8:	9503      	str	r5, [sp, #12]
 8105cca:	466d      	mov	r5, sp
 8105ccc:	f104 0308 	add.w	r3, r4, #8
 8105cd0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8105cd4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8105cd8:	e894 000c 	ldmia.w	r4, {r2, r3}
 8105cdc:	4631      	mov	r1, r6
 8105cde:	4640      	mov	r0, r8
 8105ce0:	f7ff fe2d 	bl	810593e <_ZZN19IPCDaemonNativeTask7processEvENKUl10EEventType12UMessageData12EEventClientS2_E_clES0_S1_S2_S2_>
 8105ce4:	bf00      	nop
 8105ce6:	3710      	adds	r7, #16
 8105ce8:	46bd      	mov	sp, r7
 8105cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08105cee <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIRKS5_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8105cee:	b590      	push	{r4, r7, lr}
 8105cf0:	b083      	sub	sp, #12
 8105cf2:	af00      	add	r7, sp, #0
 8105cf4:	6078      	str	r0, [r7, #4]
 8105cf6:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8105cf8:	6838      	ldr	r0, [r7, #0]
 8105cfa:	f000 f816 	bl	8105d2a <_ZSt7forwardIRKZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS7_E4typeE>
 8105cfe:	4603      	mov	r3, r0
 8105d00:	4622      	mov	r2, r4
 8105d02:	4619      	mov	r1, r3
 8105d04:	6878      	ldr	r0, [r7, #4]
 8105d06:	f000 f81b 	bl	8105d40 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIRKS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8105d0a:	bf00      	nop
 8105d0c:	370c      	adds	r7, #12
 8105d0e:	46bd      	mov	sp, r7
 8105d10:	bd90      	pop	{r4, r7, pc}

08105d12 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8105d12:	b580      	push	{r7, lr}
 8105d14:	b082      	sub	sp, #8
 8105d16:	af00      	add	r7, sp, #0
 8105d18:	6078      	str	r0, [r7, #4]
 8105d1a:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8105d1c:	6878      	ldr	r0, [r7, #4]
 8105d1e:	f000 f828 	bl	8105d72 <_ZNSt9_Any_data9_M_accessIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>
	}
 8105d22:	bf00      	nop
 8105d24:	3708      	adds	r7, #8
 8105d26:	46bd      	mov	sp, r7
 8105d28:	bd80      	pop	{r7, pc}

08105d2a <_ZSt7forwardIRKZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8105d2a:	b480      	push	{r7}
 8105d2c:	b083      	sub	sp, #12
 8105d2e:	af00      	add	r7, sp, #0
 8105d30:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8105d32:	687b      	ldr	r3, [r7, #4]
 8105d34:	4618      	mov	r0, r3
 8105d36:	370c      	adds	r7, #12
 8105d38:	46bd      	mov	sp, r7
 8105d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d3e:	4770      	bx	lr

08105d40 <_ZNSt14_Function_base13_Base_managerIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIRKS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8105d40:	b590      	push	{r4, r7, lr}
 8105d42:	b085      	sub	sp, #20
 8105d44:	af00      	add	r7, sp, #0
 8105d46:	60f8      	str	r0, [r7, #12]
 8105d48:	60b9      	str	r1, [r7, #8]
 8105d4a:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8105d4c:	68f8      	ldr	r0, [r7, #12]
 8105d4e:	f7fb faf5 	bl	810133c <_ZNSt9_Any_data9_M_accessEv>
 8105d52:	4603      	mov	r3, r0
 8105d54:	4619      	mov	r1, r3
 8105d56:	2004      	movs	r0, #4
 8105d58:	f7fb fae4 	bl	8101324 <_ZnwjPv>
 8105d5c:	4604      	mov	r4, r0
 8105d5e:	68b8      	ldr	r0, [r7, #8]
 8105d60:	f7ff ffe3 	bl	8105d2a <_ZSt7forwardIRKZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS7_E4typeE>
 8105d64:	4603      	mov	r3, r0
 8105d66:	681b      	ldr	r3, [r3, #0]
 8105d68:	6023      	str	r3, [r4, #0]
	  }
 8105d6a:	bf00      	nop
 8105d6c:	3714      	adds	r7, #20
 8105d6e:	46bd      	mov	sp, r7
 8105d70:	bd90      	pop	{r4, r7, pc}

08105d72 <_ZNSt9_Any_data9_M_accessIZN19IPCDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>:
      _M_access() noexcept
 8105d72:	b580      	push	{r7, lr}
 8105d74:	b082      	sub	sp, #8
 8105d76:	af00      	add	r7, sp, #0
 8105d78:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8105d7a:	6878      	ldr	r0, [r7, #4]
 8105d7c:	f7fb fade 	bl	810133c <_ZNSt9_Any_data9_M_accessEv>
 8105d80:	4603      	mov	r3, r0
 8105d82:	4618      	mov	r0, r3
 8105d84:	3708      	adds	r7, #8
 8105d86:	46bd      	mov	sp, r7
 8105d88:	bd80      	pop	{r7, pc}
	...

08105d8c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8105d8c:	b580      	push	{r7, lr}
 8105d8e:	b084      	sub	sp, #16
 8105d90:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 169;
 8105d92:	4b92      	ldr	r3, [pc, #584]	@ (8105fdc <MX_LWIP_Init+0x250>)
 8105d94:	22a9      	movs	r2, #169	@ 0xa9
 8105d96:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 254;
 8105d98:	4b90      	ldr	r3, [pc, #576]	@ (8105fdc <MX_LWIP_Init+0x250>)
 8105d9a:	22fe      	movs	r2, #254	@ 0xfe
 8105d9c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8105d9e:	4b8f      	ldr	r3, [pc, #572]	@ (8105fdc <MX_LWIP_Init+0x250>)
 8105da0:	2201      	movs	r2, #1
 8105da2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 1;
 8105da4:	4b8d      	ldr	r3, [pc, #564]	@ (8105fdc <MX_LWIP_Init+0x250>)
 8105da6:	2201      	movs	r2, #1
 8105da8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8105daa:	4b8d      	ldr	r3, [pc, #564]	@ (8105fe0 <MX_LWIP_Init+0x254>)
 8105dac:	22ff      	movs	r2, #255	@ 0xff
 8105dae:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8105db0:	4b8b      	ldr	r3, [pc, #556]	@ (8105fe0 <MX_LWIP_Init+0x254>)
 8105db2:	22ff      	movs	r2, #255	@ 0xff
 8105db4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 8105db6:	4b8a      	ldr	r3, [pc, #552]	@ (8105fe0 <MX_LWIP_Init+0x254>)
 8105db8:	2200      	movs	r2, #0
 8105dba:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8105dbc:	4b88      	ldr	r3, [pc, #544]	@ (8105fe0 <MX_LWIP_Init+0x254>)
 8105dbe:	2200      	movs	r2, #0
 8105dc0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8105dc2:	4b88      	ldr	r3, [pc, #544]	@ (8105fe4 <MX_LWIP_Init+0x258>)
 8105dc4:	2200      	movs	r2, #0
 8105dc6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8105dc8:	4b86      	ldr	r3, [pc, #536]	@ (8105fe4 <MX_LWIP_Init+0x258>)
 8105dca:	2200      	movs	r2, #0
 8105dcc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8105dce:	4b85      	ldr	r3, [pc, #532]	@ (8105fe4 <MX_LWIP_Init+0x258>)
 8105dd0:	2200      	movs	r2, #0
 8105dd2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8105dd4:	4b83      	ldr	r3, [pc, #524]	@ (8105fe4 <MX_LWIP_Init+0x258>)
 8105dd6:	2200      	movs	r2, #0
 8105dd8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8105dda:	2100      	movs	r1, #0
 8105ddc:	2000      	movs	r0, #0
 8105dde:	f01a f9fb 	bl	81201d8 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8105de2:	4b7e      	ldr	r3, [pc, #504]	@ (8105fdc <MX_LWIP_Init+0x250>)
 8105de4:	781b      	ldrb	r3, [r3, #0]
 8105de6:	061a      	lsls	r2, r3, #24
 8105de8:	4b7c      	ldr	r3, [pc, #496]	@ (8105fdc <MX_LWIP_Init+0x250>)
 8105dea:	785b      	ldrb	r3, [r3, #1]
 8105dec:	041b      	lsls	r3, r3, #16
 8105dee:	431a      	orrs	r2, r3
 8105df0:	4b7a      	ldr	r3, [pc, #488]	@ (8105fdc <MX_LWIP_Init+0x250>)
 8105df2:	789b      	ldrb	r3, [r3, #2]
 8105df4:	021b      	lsls	r3, r3, #8
 8105df6:	4313      	orrs	r3, r2
 8105df8:	4a78      	ldr	r2, [pc, #480]	@ (8105fdc <MX_LWIP_Init+0x250>)
 8105dfa:	78d2      	ldrb	r2, [r2, #3]
 8105dfc:	4313      	orrs	r3, r2
 8105dfe:	061a      	lsls	r2, r3, #24
 8105e00:	4b76      	ldr	r3, [pc, #472]	@ (8105fdc <MX_LWIP_Init+0x250>)
 8105e02:	781b      	ldrb	r3, [r3, #0]
 8105e04:	0619      	lsls	r1, r3, #24
 8105e06:	4b75      	ldr	r3, [pc, #468]	@ (8105fdc <MX_LWIP_Init+0x250>)
 8105e08:	785b      	ldrb	r3, [r3, #1]
 8105e0a:	041b      	lsls	r3, r3, #16
 8105e0c:	4319      	orrs	r1, r3
 8105e0e:	4b73      	ldr	r3, [pc, #460]	@ (8105fdc <MX_LWIP_Init+0x250>)
 8105e10:	789b      	ldrb	r3, [r3, #2]
 8105e12:	021b      	lsls	r3, r3, #8
 8105e14:	430b      	orrs	r3, r1
 8105e16:	4971      	ldr	r1, [pc, #452]	@ (8105fdc <MX_LWIP_Init+0x250>)
 8105e18:	78c9      	ldrb	r1, [r1, #3]
 8105e1a:	430b      	orrs	r3, r1
 8105e1c:	021b      	lsls	r3, r3, #8
 8105e1e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8105e22:	431a      	orrs	r2, r3
 8105e24:	4b6d      	ldr	r3, [pc, #436]	@ (8105fdc <MX_LWIP_Init+0x250>)
 8105e26:	781b      	ldrb	r3, [r3, #0]
 8105e28:	0619      	lsls	r1, r3, #24
 8105e2a:	4b6c      	ldr	r3, [pc, #432]	@ (8105fdc <MX_LWIP_Init+0x250>)
 8105e2c:	785b      	ldrb	r3, [r3, #1]
 8105e2e:	041b      	lsls	r3, r3, #16
 8105e30:	4319      	orrs	r1, r3
 8105e32:	4b6a      	ldr	r3, [pc, #424]	@ (8105fdc <MX_LWIP_Init+0x250>)
 8105e34:	789b      	ldrb	r3, [r3, #2]
 8105e36:	021b      	lsls	r3, r3, #8
 8105e38:	430b      	orrs	r3, r1
 8105e3a:	4968      	ldr	r1, [pc, #416]	@ (8105fdc <MX_LWIP_Init+0x250>)
 8105e3c:	78c9      	ldrb	r1, [r1, #3]
 8105e3e:	430b      	orrs	r3, r1
 8105e40:	0a1b      	lsrs	r3, r3, #8
 8105e42:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8105e46:	431a      	orrs	r2, r3
 8105e48:	4b64      	ldr	r3, [pc, #400]	@ (8105fdc <MX_LWIP_Init+0x250>)
 8105e4a:	781b      	ldrb	r3, [r3, #0]
 8105e4c:	0619      	lsls	r1, r3, #24
 8105e4e:	4b63      	ldr	r3, [pc, #396]	@ (8105fdc <MX_LWIP_Init+0x250>)
 8105e50:	785b      	ldrb	r3, [r3, #1]
 8105e52:	041b      	lsls	r3, r3, #16
 8105e54:	4319      	orrs	r1, r3
 8105e56:	4b61      	ldr	r3, [pc, #388]	@ (8105fdc <MX_LWIP_Init+0x250>)
 8105e58:	789b      	ldrb	r3, [r3, #2]
 8105e5a:	021b      	lsls	r3, r3, #8
 8105e5c:	430b      	orrs	r3, r1
 8105e5e:	495f      	ldr	r1, [pc, #380]	@ (8105fdc <MX_LWIP_Init+0x250>)
 8105e60:	78c9      	ldrb	r1, [r1, #3]
 8105e62:	430b      	orrs	r3, r1
 8105e64:	0e1b      	lsrs	r3, r3, #24
 8105e66:	4313      	orrs	r3, r2
 8105e68:	4a5f      	ldr	r2, [pc, #380]	@ (8105fe8 <MX_LWIP_Init+0x25c>)
 8105e6a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8105e6c:	4b5c      	ldr	r3, [pc, #368]	@ (8105fe0 <MX_LWIP_Init+0x254>)
 8105e6e:	781b      	ldrb	r3, [r3, #0]
 8105e70:	061a      	lsls	r2, r3, #24
 8105e72:	4b5b      	ldr	r3, [pc, #364]	@ (8105fe0 <MX_LWIP_Init+0x254>)
 8105e74:	785b      	ldrb	r3, [r3, #1]
 8105e76:	041b      	lsls	r3, r3, #16
 8105e78:	431a      	orrs	r2, r3
 8105e7a:	4b59      	ldr	r3, [pc, #356]	@ (8105fe0 <MX_LWIP_Init+0x254>)
 8105e7c:	789b      	ldrb	r3, [r3, #2]
 8105e7e:	021b      	lsls	r3, r3, #8
 8105e80:	4313      	orrs	r3, r2
 8105e82:	4a57      	ldr	r2, [pc, #348]	@ (8105fe0 <MX_LWIP_Init+0x254>)
 8105e84:	78d2      	ldrb	r2, [r2, #3]
 8105e86:	4313      	orrs	r3, r2
 8105e88:	061a      	lsls	r2, r3, #24
 8105e8a:	4b55      	ldr	r3, [pc, #340]	@ (8105fe0 <MX_LWIP_Init+0x254>)
 8105e8c:	781b      	ldrb	r3, [r3, #0]
 8105e8e:	0619      	lsls	r1, r3, #24
 8105e90:	4b53      	ldr	r3, [pc, #332]	@ (8105fe0 <MX_LWIP_Init+0x254>)
 8105e92:	785b      	ldrb	r3, [r3, #1]
 8105e94:	041b      	lsls	r3, r3, #16
 8105e96:	4319      	orrs	r1, r3
 8105e98:	4b51      	ldr	r3, [pc, #324]	@ (8105fe0 <MX_LWIP_Init+0x254>)
 8105e9a:	789b      	ldrb	r3, [r3, #2]
 8105e9c:	021b      	lsls	r3, r3, #8
 8105e9e:	430b      	orrs	r3, r1
 8105ea0:	494f      	ldr	r1, [pc, #316]	@ (8105fe0 <MX_LWIP_Init+0x254>)
 8105ea2:	78c9      	ldrb	r1, [r1, #3]
 8105ea4:	430b      	orrs	r3, r1
 8105ea6:	021b      	lsls	r3, r3, #8
 8105ea8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8105eac:	431a      	orrs	r2, r3
 8105eae:	4b4c      	ldr	r3, [pc, #304]	@ (8105fe0 <MX_LWIP_Init+0x254>)
 8105eb0:	781b      	ldrb	r3, [r3, #0]
 8105eb2:	0619      	lsls	r1, r3, #24
 8105eb4:	4b4a      	ldr	r3, [pc, #296]	@ (8105fe0 <MX_LWIP_Init+0x254>)
 8105eb6:	785b      	ldrb	r3, [r3, #1]
 8105eb8:	041b      	lsls	r3, r3, #16
 8105eba:	4319      	orrs	r1, r3
 8105ebc:	4b48      	ldr	r3, [pc, #288]	@ (8105fe0 <MX_LWIP_Init+0x254>)
 8105ebe:	789b      	ldrb	r3, [r3, #2]
 8105ec0:	021b      	lsls	r3, r3, #8
 8105ec2:	430b      	orrs	r3, r1
 8105ec4:	4946      	ldr	r1, [pc, #280]	@ (8105fe0 <MX_LWIP_Init+0x254>)
 8105ec6:	78c9      	ldrb	r1, [r1, #3]
 8105ec8:	430b      	orrs	r3, r1
 8105eca:	0a1b      	lsrs	r3, r3, #8
 8105ecc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8105ed0:	431a      	orrs	r2, r3
 8105ed2:	4b43      	ldr	r3, [pc, #268]	@ (8105fe0 <MX_LWIP_Init+0x254>)
 8105ed4:	781b      	ldrb	r3, [r3, #0]
 8105ed6:	0619      	lsls	r1, r3, #24
 8105ed8:	4b41      	ldr	r3, [pc, #260]	@ (8105fe0 <MX_LWIP_Init+0x254>)
 8105eda:	785b      	ldrb	r3, [r3, #1]
 8105edc:	041b      	lsls	r3, r3, #16
 8105ede:	4319      	orrs	r1, r3
 8105ee0:	4b3f      	ldr	r3, [pc, #252]	@ (8105fe0 <MX_LWIP_Init+0x254>)
 8105ee2:	789b      	ldrb	r3, [r3, #2]
 8105ee4:	021b      	lsls	r3, r3, #8
 8105ee6:	430b      	orrs	r3, r1
 8105ee8:	493d      	ldr	r1, [pc, #244]	@ (8105fe0 <MX_LWIP_Init+0x254>)
 8105eea:	78c9      	ldrb	r1, [r1, #3]
 8105eec:	430b      	orrs	r3, r1
 8105eee:	0e1b      	lsrs	r3, r3, #24
 8105ef0:	4313      	orrs	r3, r2
 8105ef2:	4a3e      	ldr	r2, [pc, #248]	@ (8105fec <MX_LWIP_Init+0x260>)
 8105ef4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8105ef6:	4b3b      	ldr	r3, [pc, #236]	@ (8105fe4 <MX_LWIP_Init+0x258>)
 8105ef8:	781b      	ldrb	r3, [r3, #0]
 8105efa:	061a      	lsls	r2, r3, #24
 8105efc:	4b39      	ldr	r3, [pc, #228]	@ (8105fe4 <MX_LWIP_Init+0x258>)
 8105efe:	785b      	ldrb	r3, [r3, #1]
 8105f00:	041b      	lsls	r3, r3, #16
 8105f02:	431a      	orrs	r2, r3
 8105f04:	4b37      	ldr	r3, [pc, #220]	@ (8105fe4 <MX_LWIP_Init+0x258>)
 8105f06:	789b      	ldrb	r3, [r3, #2]
 8105f08:	021b      	lsls	r3, r3, #8
 8105f0a:	4313      	orrs	r3, r2
 8105f0c:	4a35      	ldr	r2, [pc, #212]	@ (8105fe4 <MX_LWIP_Init+0x258>)
 8105f0e:	78d2      	ldrb	r2, [r2, #3]
 8105f10:	4313      	orrs	r3, r2
 8105f12:	061a      	lsls	r2, r3, #24
 8105f14:	4b33      	ldr	r3, [pc, #204]	@ (8105fe4 <MX_LWIP_Init+0x258>)
 8105f16:	781b      	ldrb	r3, [r3, #0]
 8105f18:	0619      	lsls	r1, r3, #24
 8105f1a:	4b32      	ldr	r3, [pc, #200]	@ (8105fe4 <MX_LWIP_Init+0x258>)
 8105f1c:	785b      	ldrb	r3, [r3, #1]
 8105f1e:	041b      	lsls	r3, r3, #16
 8105f20:	4319      	orrs	r1, r3
 8105f22:	4b30      	ldr	r3, [pc, #192]	@ (8105fe4 <MX_LWIP_Init+0x258>)
 8105f24:	789b      	ldrb	r3, [r3, #2]
 8105f26:	021b      	lsls	r3, r3, #8
 8105f28:	430b      	orrs	r3, r1
 8105f2a:	492e      	ldr	r1, [pc, #184]	@ (8105fe4 <MX_LWIP_Init+0x258>)
 8105f2c:	78c9      	ldrb	r1, [r1, #3]
 8105f2e:	430b      	orrs	r3, r1
 8105f30:	021b      	lsls	r3, r3, #8
 8105f32:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8105f36:	431a      	orrs	r2, r3
 8105f38:	4b2a      	ldr	r3, [pc, #168]	@ (8105fe4 <MX_LWIP_Init+0x258>)
 8105f3a:	781b      	ldrb	r3, [r3, #0]
 8105f3c:	0619      	lsls	r1, r3, #24
 8105f3e:	4b29      	ldr	r3, [pc, #164]	@ (8105fe4 <MX_LWIP_Init+0x258>)
 8105f40:	785b      	ldrb	r3, [r3, #1]
 8105f42:	041b      	lsls	r3, r3, #16
 8105f44:	4319      	orrs	r1, r3
 8105f46:	4b27      	ldr	r3, [pc, #156]	@ (8105fe4 <MX_LWIP_Init+0x258>)
 8105f48:	789b      	ldrb	r3, [r3, #2]
 8105f4a:	021b      	lsls	r3, r3, #8
 8105f4c:	430b      	orrs	r3, r1
 8105f4e:	4925      	ldr	r1, [pc, #148]	@ (8105fe4 <MX_LWIP_Init+0x258>)
 8105f50:	78c9      	ldrb	r1, [r1, #3]
 8105f52:	430b      	orrs	r3, r1
 8105f54:	0a1b      	lsrs	r3, r3, #8
 8105f56:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8105f5a:	431a      	orrs	r2, r3
 8105f5c:	4b21      	ldr	r3, [pc, #132]	@ (8105fe4 <MX_LWIP_Init+0x258>)
 8105f5e:	781b      	ldrb	r3, [r3, #0]
 8105f60:	0619      	lsls	r1, r3, #24
 8105f62:	4b20      	ldr	r3, [pc, #128]	@ (8105fe4 <MX_LWIP_Init+0x258>)
 8105f64:	785b      	ldrb	r3, [r3, #1]
 8105f66:	041b      	lsls	r3, r3, #16
 8105f68:	4319      	orrs	r1, r3
 8105f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8105fe4 <MX_LWIP_Init+0x258>)
 8105f6c:	789b      	ldrb	r3, [r3, #2]
 8105f6e:	021b      	lsls	r3, r3, #8
 8105f70:	430b      	orrs	r3, r1
 8105f72:	491c      	ldr	r1, [pc, #112]	@ (8105fe4 <MX_LWIP_Init+0x258>)
 8105f74:	78c9      	ldrb	r1, [r1, #3]
 8105f76:	430b      	orrs	r3, r1
 8105f78:	0e1b      	lsrs	r3, r3, #24
 8105f7a:	4313      	orrs	r3, r2
 8105f7c:	4a1c      	ldr	r2, [pc, #112]	@ (8105ff0 <MX_LWIP_Init+0x264>)
 8105f7e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8105f80:	4b1c      	ldr	r3, [pc, #112]	@ (8105ff4 <MX_LWIP_Init+0x268>)
 8105f82:	9302      	str	r3, [sp, #8]
 8105f84:	4b1c      	ldr	r3, [pc, #112]	@ (8105ff8 <MX_LWIP_Init+0x26c>)
 8105f86:	9301      	str	r3, [sp, #4]
 8105f88:	2300      	movs	r3, #0
 8105f8a:	9300      	str	r3, [sp, #0]
 8105f8c:	4b18      	ldr	r3, [pc, #96]	@ (8105ff0 <MX_LWIP_Init+0x264>)
 8105f8e:	4a17      	ldr	r2, [pc, #92]	@ (8105fec <MX_LWIP_Init+0x260>)
 8105f90:	4915      	ldr	r1, [pc, #84]	@ (8105fe8 <MX_LWIP_Init+0x25c>)
 8105f92:	481a      	ldr	r0, [pc, #104]	@ (8105ffc <MX_LWIP_Init+0x270>)
 8105f94:	f012 f962 	bl	811825c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8105f98:	4818      	ldr	r0, [pc, #96]	@ (8105ffc <MX_LWIP_Init+0x270>)
 8105f9a:	f012 fc17 	bl	81187cc <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8105f9e:	4817      	ldr	r0, [pc, #92]	@ (8105ffc <MX_LWIP_Init+0x270>)
 8105fa0:	f012 fc3c 	bl	811881c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8105fa4:	4916      	ldr	r1, [pc, #88]	@ (8106000 <MX_LWIP_Init+0x274>)
 8105fa6:	4815      	ldr	r0, [pc, #84]	@ (8105ffc <MX_LWIP_Init+0x270>)
 8105fa8:	f012 fd3a 	bl	8118a20 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8105fac:	2224      	movs	r2, #36	@ 0x24
 8105fae:	2100      	movs	r1, #0
 8105fb0:	4814      	ldr	r0, [pc, #80]	@ (8106004 <MX_LWIP_Init+0x278>)
 8105fb2:	f01c fafd 	bl	81225b0 <memset>
  attributes.name = "EthLink";
 8105fb6:	4b13      	ldr	r3, [pc, #76]	@ (8106004 <MX_LWIP_Init+0x278>)
 8105fb8:	4a13      	ldr	r2, [pc, #76]	@ (8106008 <MX_LWIP_Init+0x27c>)
 8105fba:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8105fbc:	4b11      	ldr	r3, [pc, #68]	@ (8106004 <MX_LWIP_Init+0x278>)
 8105fbe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8105fc2:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8105fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8106004 <MX_LWIP_Init+0x278>)
 8105fc6:	2210      	movs	r2, #16
 8105fc8:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8105fca:	4a0e      	ldr	r2, [pc, #56]	@ (8106004 <MX_LWIP_Init+0x278>)
 8105fcc:	490b      	ldr	r1, [pc, #44]	@ (8105ffc <MX_LWIP_Init+0x270>)
 8105fce:	480f      	ldr	r0, [pc, #60]	@ (810600c <MX_LWIP_Init+0x280>)
 8105fd0:	f009 fda3 	bl	810fb1a <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8105fd4:	bf00      	nop
 8105fd6:	46bd      	mov	sp, r7
 8105fd8:	bd80      	pop	{r7, pc}
 8105fda:	bf00      	nop
 8105fdc:	1000028c 	.word	0x1000028c
 8105fe0:	10000290 	.word	0x10000290
 8105fe4:	10000294 	.word	0x10000294
 8105fe8:	10000280 	.word	0x10000280
 8105fec:	10000284 	.word	0x10000284
 8105ff0:	10000288 	.word	0x10000288
 8105ff4:	08120115 	.word	0x08120115
 8105ff8:	0810655d 	.word	0x0810655d
 8105ffc:	1000024c 	.word	0x1000024c
 8106000:	08106011 	.word	0x08106011
 8106004:	10000298 	.word	0x10000298
 8106008:	08123a60 	.word	0x08123a60
 810600c:	0810681d 	.word	0x0810681d

08106010 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8106010:	b580      	push	{r7, lr}
 8106012:	b090      	sub	sp, #64	@ 0x40
 8106014:	af00      	add	r7, sp, #0
 8106016:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 8106018:	687b      	ldr	r3, [r7, #4]
 810601a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810601e:	f003 0301 	and.w	r3, r3, #1
 8106022:	b2db      	uxtb	r3, r3
 8106024:	2b00      	cmp	r3, #0
 8106026:	d015      	beq.n	8106054 <ethernet_link_status_updated+0x44>
  {
/* USER CODE BEGIN 5 */
	SMessage msg;
	msg.event_type = EVENT_ETHERNET_PLUGGED;
 8106028:	2383      	movs	r3, #131	@ 0x83
 810602a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	msg.message_data.ethernet_plugged = true;
 810602e:	2301      	movs	r3, #1
 8106030:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	msg.event_sender = EVENT_CLIENT_LWIP_LINK_STATE_MANAGER;
 8106034:	2305      	movs	r3, #5
 8106036:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	msg.event_receiver = EVENT_CLIENT_ETHERNET_CONNECTION_MANAGER;
 810603a:	2303      	movs	r3, #3
 810603c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	xQueueSend(queueToEventManagerCM4, (void*)&msg, portMAX_DELAY);
 8106040:	4b10      	ldr	r3, [pc, #64]	@ (8106084 <ethernet_link_status_updated+0x74>)
 8106042:	6818      	ldr	r0, [r3, #0]
 8106044:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8106048:	2300      	movs	r3, #0
 810604a:	f04f 32ff 	mov.w	r2, #4294967295
 810604e:	f00b f909 	bl	8111264 <xQueueGenericSend>
	msg.event_sender = EVENT_CLIENT_LWIP_LINK_STATE_MANAGER;
	msg.event_receiver = EVENT_CLIENT_ETHERNET_CONNECTION_MANAGER;
    xQueueSend(queueToEventManagerCM4, (void*)&msg, portMAX_DELAY);
/* USER CODE END 6 */
  }
}
 8106052:	e012      	b.n	810607a <ethernet_link_status_updated+0x6a>
	msg.event_type = EVENT_ETHERNET_PLUGGED;
 8106054:	2383      	movs	r3, #131	@ 0x83
 8106056:	723b      	strb	r3, [r7, #8]
	msg.message_data.ethernet_plugged = false;
 8106058:	2300      	movs	r3, #0
 810605a:	733b      	strb	r3, [r7, #12]
	msg.event_sender = EVENT_CLIENT_LWIP_LINK_STATE_MANAGER;
 810605c:	2305      	movs	r3, #5
 810605e:	f887 3020 	strb.w	r3, [r7, #32]
	msg.event_receiver = EVENT_CLIENT_ETHERNET_CONNECTION_MANAGER;
 8106062:	2303      	movs	r3, #3
 8106064:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    xQueueSend(queueToEventManagerCM4, (void*)&msg, portMAX_DELAY);
 8106068:	4b06      	ldr	r3, [pc, #24]	@ (8106084 <ethernet_link_status_updated+0x74>)
 810606a:	6818      	ldr	r0, [r3, #0]
 810606c:	f107 0108 	add.w	r1, r7, #8
 8106070:	2300      	movs	r3, #0
 8106072:	f04f 32ff 	mov.w	r2, #4294967295
 8106076:	f00b f8f5 	bl	8111264 <xQueueGenericSend>
}
 810607a:	bf00      	nop
 810607c:	3740      	adds	r7, #64	@ 0x40
 810607e:	46bd      	mov	sp, r7
 8106080:	bd80      	pop	{r7, pc}
 8106082:	bf00      	nop
 8106084:	100001b0 	.word	0x100001b0

08106088 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8106088:	b580      	push	{r7, lr}
 810608a:	b082      	sub	sp, #8
 810608c:	af00      	add	r7, sp, #0
 810608e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8106090:	4b04      	ldr	r3, [pc, #16]	@ (81060a4 <HAL_ETH_RxCpltCallback+0x1c>)
 8106092:	681b      	ldr	r3, [r3, #0]
 8106094:	4618      	mov	r0, r3
 8106096:	f009 ffd7 	bl	8110048 <osSemaphoreRelease>
}
 810609a:	bf00      	nop
 810609c:	3708      	adds	r7, #8
 810609e:	46bd      	mov	sp, r7
 81060a0:	bd80      	pop	{r7, pc}
 81060a2:	bf00      	nop
 81060a4:	100002c4 	.word	0x100002c4

081060a8 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 81060a8:	b580      	push	{r7, lr}
 81060aa:	b082      	sub	sp, #8
 81060ac:	af00      	add	r7, sp, #0
 81060ae:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 81060b0:	4b04      	ldr	r3, [pc, #16]	@ (81060c4 <HAL_ETH_TxCpltCallback+0x1c>)
 81060b2:	681b      	ldr	r3, [r3, #0]
 81060b4:	4618      	mov	r0, r3
 81060b6:	f009 ffc7 	bl	8110048 <osSemaphoreRelease>
}
 81060ba:	bf00      	nop
 81060bc:	3708      	adds	r7, #8
 81060be:	46bd      	mov	sp, r7
 81060c0:	bd80      	pop	{r7, pc}
 81060c2:	bf00      	nop
 81060c4:	100002c8 	.word	0x100002c8

081060c8 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 81060c8:	b580      	push	{r7, lr}
 81060ca:	b082      	sub	sp, #8
 81060cc:	af00      	add	r7, sp, #0
 81060ce:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 81060d0:	6878      	ldr	r0, [r7, #4]
 81060d2:	f004 f99a 	bl	810a40a <HAL_ETH_GetDMAError>
 81060d6:	4603      	mov	r3, r0
 81060d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81060dc:	2b80      	cmp	r3, #128	@ 0x80
 81060de:	d104      	bne.n	81060ea <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 81060e0:	4b04      	ldr	r3, [pc, #16]	@ (81060f4 <HAL_ETH_ErrorCallback+0x2c>)
 81060e2:	681b      	ldr	r3, [r3, #0]
 81060e4:	4618      	mov	r0, r3
 81060e6:	f009 ffaf 	bl	8110048 <osSemaphoreRelease>
  }
}
 81060ea:	bf00      	nop
 81060ec:	3708      	adds	r7, #8
 81060ee:	46bd      	mov	sp, r7
 81060f0:	bd80      	pop	{r7, pc}
 81060f2:	bf00      	nop
 81060f4:	100002c4 	.word	0x100002c4

081060f8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 81060f8:	b580      	push	{r7, lr}
 81060fa:	b0aa      	sub	sp, #168	@ 0xa8
 81060fc:	af00      	add	r7, sp, #0
 81060fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8106100:	2300      	movs	r3, #0
 8106102:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8106106:	2300      	movs	r3, #0
 8106108:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 810610c:	2300      	movs	r3, #0
 810610e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8106112:	f107 0310 	add.w	r3, r7, #16
 8106116:	2264      	movs	r2, #100	@ 0x64
 8106118:	2100      	movs	r1, #0
 810611a:	4618      	mov	r0, r3
 810611c:	f01c fa48 	bl	81225b0 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8106120:	4b89      	ldr	r3, [pc, #548]	@ (8106348 <low_level_init+0x250>)
 8106122:	4a8a      	ldr	r2, [pc, #552]	@ (810634c <low_level_init+0x254>)
 8106124:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8106126:	2300      	movs	r3, #0
 8106128:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 810612a:	2380      	movs	r3, #128	@ 0x80
 810612c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 810612e:	23e1      	movs	r3, #225	@ 0xe1
 8106130:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8106132:	2300      	movs	r3, #0
 8106134:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8106136:	2300      	movs	r3, #0
 8106138:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 810613a:	2300      	movs	r3, #0
 810613c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 810613e:	4a82      	ldr	r2, [pc, #520]	@ (8106348 <low_level_init+0x250>)
 8106140:	f107 0308 	add.w	r3, r7, #8
 8106144:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8106146:	4b80      	ldr	r3, [pc, #512]	@ (8106348 <low_level_init+0x250>)
 8106148:	2201      	movs	r2, #1
 810614a:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 810614c:	4b7e      	ldr	r3, [pc, #504]	@ (8106348 <low_level_init+0x250>)
 810614e:	4a80      	ldr	r2, [pc, #512]	@ (8106350 <low_level_init+0x258>)
 8106150:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8106152:	4b7d      	ldr	r3, [pc, #500]	@ (8106348 <low_level_init+0x250>)
 8106154:	4a7f      	ldr	r2, [pc, #508]	@ (8106354 <low_level_init+0x25c>)
 8106156:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8106158:	4b7b      	ldr	r3, [pc, #492]	@ (8106348 <low_level_init+0x250>)
 810615a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 810615e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8106160:	4879      	ldr	r0, [pc, #484]	@ (8106348 <low_level_init+0x250>)
 8106162:	f003 f961 	bl	8109428 <HAL_ETH_Init>
 8106166:	4603      	mov	r3, r0
 8106168:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 810616c:	2238      	movs	r2, #56	@ 0x38
 810616e:	2100      	movs	r1, #0
 8106170:	4879      	ldr	r0, [pc, #484]	@ (8106358 <low_level_init+0x260>)
 8106172:	f01c fa1d 	bl	81225b0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8106176:	4b78      	ldr	r3, [pc, #480]	@ (8106358 <low_level_init+0x260>)
 8106178:	2221      	movs	r2, #33	@ 0x21
 810617a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 810617c:	4b76      	ldr	r3, [pc, #472]	@ (8106358 <low_level_init+0x260>)
 810617e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8106182:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8106184:	4b74      	ldr	r3, [pc, #464]	@ (8106358 <low_level_init+0x260>)
 8106186:	2200      	movs	r2, #0
 8106188:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 810618a:	4874      	ldr	r0, [pc, #464]	@ (810635c <low_level_init+0x264>)
 810618c:	f011 ff20 	bl	8117fd0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8106190:	687b      	ldr	r3, [r7, #4]
 8106192:	2206      	movs	r2, #6
 8106194:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8106198:	4b6b      	ldr	r3, [pc, #428]	@ (8106348 <low_level_init+0x250>)
 810619a:	685b      	ldr	r3, [r3, #4]
 810619c:	781a      	ldrb	r2, [r3, #0]
 810619e:	687b      	ldr	r3, [r7, #4]
 81061a0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 81061a4:	4b68      	ldr	r3, [pc, #416]	@ (8106348 <low_level_init+0x250>)
 81061a6:	685b      	ldr	r3, [r3, #4]
 81061a8:	785a      	ldrb	r2, [r3, #1]
 81061aa:	687b      	ldr	r3, [r7, #4]
 81061ac:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 81061b0:	4b65      	ldr	r3, [pc, #404]	@ (8106348 <low_level_init+0x250>)
 81061b2:	685b      	ldr	r3, [r3, #4]
 81061b4:	789a      	ldrb	r2, [r3, #2]
 81061b6:	687b      	ldr	r3, [r7, #4]
 81061b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 81061bc:	4b62      	ldr	r3, [pc, #392]	@ (8106348 <low_level_init+0x250>)
 81061be:	685b      	ldr	r3, [r3, #4]
 81061c0:	78da      	ldrb	r2, [r3, #3]
 81061c2:	687b      	ldr	r3, [r7, #4]
 81061c4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 81061c8:	4b5f      	ldr	r3, [pc, #380]	@ (8106348 <low_level_init+0x250>)
 81061ca:	685b      	ldr	r3, [r3, #4]
 81061cc:	791a      	ldrb	r2, [r3, #4]
 81061ce:	687b      	ldr	r3, [r7, #4]
 81061d0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 81061d4:	4b5c      	ldr	r3, [pc, #368]	@ (8106348 <low_level_init+0x250>)
 81061d6:	685b      	ldr	r3, [r3, #4]
 81061d8:	795a      	ldrb	r2, [r3, #5]
 81061da:	687b      	ldr	r3, [r7, #4]
 81061dc:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 81061e0:	687b      	ldr	r3, [r7, #4]
 81061e2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 81061e6:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 81061e8:	687b      	ldr	r3, [r7, #4]
 81061ea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 81061ee:	f043 030a 	orr.w	r3, r3, #10
 81061f2:	b2da      	uxtb	r2, r3
 81061f4:	687b      	ldr	r3, [r7, #4]
 81061f6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 81061fa:	2200      	movs	r2, #0
 81061fc:	2100      	movs	r1, #0
 81061fe:	2001      	movs	r0, #1
 8106200:	f009 fe46 	bl	810fe90 <osSemaphoreNew>
 8106204:	4603      	mov	r3, r0
 8106206:	4a56      	ldr	r2, [pc, #344]	@ (8106360 <low_level_init+0x268>)
 8106208:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 810620a:	2200      	movs	r2, #0
 810620c:	2100      	movs	r1, #0
 810620e:	2001      	movs	r0, #1
 8106210:	f009 fe3e 	bl	810fe90 <osSemaphoreNew>
 8106214:	4603      	mov	r3, r0
 8106216:	4a53      	ldr	r2, [pc, #332]	@ (8106364 <low_level_init+0x26c>)
 8106218:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 810621a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 810621e:	2224      	movs	r2, #36	@ 0x24
 8106220:	2100      	movs	r1, #0
 8106222:	4618      	mov	r0, r3
 8106224:	f01c f9c4 	bl	81225b0 <memset>
  attributes.name = "EthIf";
 8106228:	4b4f      	ldr	r3, [pc, #316]	@ (8106368 <low_level_init+0x270>)
 810622a:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 810622c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8106230:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 8106234:	2330      	movs	r3, #48	@ 0x30
 8106236:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 810623a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 810623e:	461a      	mov	r2, r3
 8106240:	6879      	ldr	r1, [r7, #4]
 8106242:	484a      	ldr	r0, [pc, #296]	@ (810636c <low_level_init+0x274>)
 8106244:	f009 fc69 	bl	810fb1a <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8106248:	4949      	ldr	r1, [pc, #292]	@ (8106370 <low_level_init+0x278>)
 810624a:	484a      	ldr	r0, [pc, #296]	@ (8106374 <low_level_init+0x27c>)
 810624c:	f002 fe43 	bl	8108ed6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8106250:	4848      	ldr	r0, [pc, #288]	@ (8106374 <low_level_init+0x27c>)
 8106252:	f002 fe72 	bl	8108f3a <LAN8742_Init>
 8106256:	4603      	mov	r3, r0
 8106258:	2b00      	cmp	r3, #0
 810625a:	d006      	beq.n	810626a <low_level_init+0x172>
  {
    netif_set_link_down(netif);
 810625c:	6878      	ldr	r0, [r7, #4]
 810625e:	f012 fbaf 	bl	81189c0 <netif_set_link_down>
    netif_set_down(netif);
 8106262:	6878      	ldr	r0, [r7, #4]
 8106264:	f012 fb46 	bl	81188f4 <netif_set_down>
 8106268:	e06b      	b.n	8106342 <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 810626a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 810626e:	2b00      	cmp	r3, #0
 8106270:	d165      	bne.n	810633e <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8106272:	4840      	ldr	r0, [pc, #256]	@ (8106374 <low_level_init+0x27c>)
 8106274:	f002 feae 	bl	8108fd4 <LAN8742_GetLinkState>
 8106278:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 810627c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8106280:	2b01      	cmp	r3, #1
 8106282:	dc06      	bgt.n	8106292 <low_level_init+0x19a>
    {
      netif_set_link_down(netif);
 8106284:	6878      	ldr	r0, [r7, #4]
 8106286:	f012 fb9b 	bl	81189c0 <netif_set_link_down>
      netif_set_down(netif);
 810628a:	6878      	ldr	r0, [r7, #4]
 810628c:	f012 fb32 	bl	81188f4 <netif_set_down>
 8106290:	e057      	b.n	8106342 <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 8106292:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8106296:	3b02      	subs	r3, #2
 8106298:	2b03      	cmp	r3, #3
 810629a:	d82b      	bhi.n	81062f4 <low_level_init+0x1fc>
 810629c:	a201      	add	r2, pc, #4	@ (adr r2, 81062a4 <low_level_init+0x1ac>)
 810629e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81062a2:	bf00      	nop
 81062a4:	081062b5 	.word	0x081062b5
 81062a8:	081062c7 	.word	0x081062c7
 81062ac:	081062d7 	.word	0x081062d7
 81062b0:	081062e7 	.word	0x081062e7
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 81062b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 81062b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 81062bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 81062c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 81062c4:	e01f      	b.n	8106306 <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 81062c6:	2300      	movs	r3, #0
 81062c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 81062cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 81062d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 81062d4:	e017      	b.n	8106306 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 81062d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 81062da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 81062de:	2300      	movs	r3, #0
 81062e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 81062e4:	e00f      	b.n	8106306 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 81062e6:	2300      	movs	r3, #0
 81062e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 81062ec:	2300      	movs	r3, #0
 81062ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 81062f2:	e008      	b.n	8106306 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 81062f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 81062f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 81062fc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8106300:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8106304:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8106306:	f107 0310 	add.w	r3, r7, #16
 810630a:	4619      	mov	r1, r3
 810630c:	480e      	ldr	r0, [pc, #56]	@ (8106348 <low_level_init+0x250>)
 810630e:	f003 fe31 	bl	8109f74 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8106312:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8106316:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 8106318:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 810631c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 810631e:	f107 0310 	add.w	r3, r7, #16
 8106322:	4619      	mov	r1, r3
 8106324:	4808      	ldr	r0, [pc, #32]	@ (8106348 <low_level_init+0x250>)
 8106326:	f003 fff9 	bl	810a31c <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 810632a:	4807      	ldr	r0, [pc, #28]	@ (8106348 <low_level_init+0x250>)
 810632c:	f003 f97a 	bl	8109624 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8106330:	6878      	ldr	r0, [r7, #4]
 8106332:	f012 fa73 	bl	811881c <netif_set_up>
    netif_set_link_up(netif);
 8106336:	6878      	ldr	r0, [r7, #4]
 8106338:	f012 fb0e 	bl	8118958 <netif_set_link_up>
 810633c:	e001      	b.n	8106342 <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 810633e:	f7fa fd13 	bl	8100d68 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8106342:	37a8      	adds	r7, #168	@ 0xa8
 8106344:	46bd      	mov	sp, r7
 8106346:	bd80      	pop	{r7, pc}
 8106348:	100002cc 	.word	0x100002cc
 810634c:	40028000 	.word	0x40028000
 8106350:	10040100 	.word	0x10040100
 8106354:	10040000 	.word	0x10040000
 8106358:	1000037c 	.word	0x1000037c
 810635c:	08128960 	.word	0x08128960
 8106360:	100002c4 	.word	0x100002c4
 8106364:	100002c8 	.word	0x100002c8
 8106368:	08123a80 	.word	0x08123a80
 810636c:	08106509 	.word	0x08106509
 8106370:	10000000 	.word	0x10000000
 8106374:	100003b4 	.word	0x100003b4

08106378 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8106378:	b580      	push	{r7, lr}
 810637a:	b092      	sub	sp, #72	@ 0x48
 810637c:	af00      	add	r7, sp, #0
 810637e:	6078      	str	r0, [r7, #4]
 8106380:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8106382:	2300      	movs	r3, #0
 8106384:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8106386:	2300      	movs	r3, #0
 8106388:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 810638a:	2300      	movs	r3, #0
 810638c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8106390:	f107 030c 	add.w	r3, r7, #12
 8106394:	2230      	movs	r2, #48	@ 0x30
 8106396:	2100      	movs	r1, #0
 8106398:	4618      	mov	r0, r3
 810639a:	f01c f909 	bl	81225b0 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 810639e:	f107 030c 	add.w	r3, r7, #12
 81063a2:	2230      	movs	r2, #48	@ 0x30
 81063a4:	2100      	movs	r1, #0
 81063a6:	4618      	mov	r0, r3
 81063a8:	f01c f902 	bl	81225b0 <memset>

  for(q = p; q != NULL; q = q->next)
 81063ac:	683b      	ldr	r3, [r7, #0]
 81063ae:	643b      	str	r3, [r7, #64]	@ 0x40
 81063b0:	e045      	b.n	810643e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 81063b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81063b4:	2b03      	cmp	r3, #3
 81063b6:	d902      	bls.n	81063be <low_level_output+0x46>
      return ERR_IF;
 81063b8:	f06f 030b 	mvn.w	r3, #11
 81063bc:	e07f      	b.n	81064be <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 81063be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81063c0:	6859      	ldr	r1, [r3, #4]
 81063c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 81063c4:	4613      	mov	r3, r2
 81063c6:	005b      	lsls	r3, r3, #1
 81063c8:	4413      	add	r3, r2
 81063ca:	009b      	lsls	r3, r3, #2
 81063cc:	3348      	adds	r3, #72	@ 0x48
 81063ce:	443b      	add	r3, r7
 81063d0:	3b3c      	subs	r3, #60	@ 0x3c
 81063d2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 81063d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81063d6:	895b      	ldrh	r3, [r3, #10]
 81063d8:	4619      	mov	r1, r3
 81063da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 81063dc:	4613      	mov	r3, r2
 81063de:	005b      	lsls	r3, r3, #1
 81063e0:	4413      	add	r3, r2
 81063e2:	009b      	lsls	r3, r3, #2
 81063e4:	3348      	adds	r3, #72	@ 0x48
 81063e6:	443b      	add	r3, r7
 81063e8:	3b38      	subs	r3, #56	@ 0x38
 81063ea:	6019      	str	r1, [r3, #0]

    if(i>0)
 81063ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81063ee:	2b00      	cmp	r3, #0
 81063f0:	d011      	beq.n	8106416 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 81063f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81063f4:	1e5a      	subs	r2, r3, #1
 81063f6:	f107 000c 	add.w	r0, r7, #12
 81063fa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 81063fc:	460b      	mov	r3, r1
 81063fe:	005b      	lsls	r3, r3, #1
 8106400:	440b      	add	r3, r1
 8106402:	009b      	lsls	r3, r3, #2
 8106404:	18c1      	adds	r1, r0, r3
 8106406:	4613      	mov	r3, r2
 8106408:	005b      	lsls	r3, r3, #1
 810640a:	4413      	add	r3, r2
 810640c:	009b      	lsls	r3, r3, #2
 810640e:	3348      	adds	r3, #72	@ 0x48
 8106410:	443b      	add	r3, r7
 8106412:	3b34      	subs	r3, #52	@ 0x34
 8106414:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8106416:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8106418:	681b      	ldr	r3, [r3, #0]
 810641a:	2b00      	cmp	r3, #0
 810641c:	d109      	bne.n	8106432 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 810641e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8106420:	4613      	mov	r3, r2
 8106422:	005b      	lsls	r3, r3, #1
 8106424:	4413      	add	r3, r2
 8106426:	009b      	lsls	r3, r3, #2
 8106428:	3348      	adds	r3, #72	@ 0x48
 810642a:	443b      	add	r3, r7
 810642c:	3b34      	subs	r3, #52	@ 0x34
 810642e:	2200      	movs	r2, #0
 8106430:	601a      	str	r2, [r3, #0]
    }

    i++;
 8106432:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8106434:	3301      	adds	r3, #1
 8106436:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8106438:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810643a:	681b      	ldr	r3, [r3, #0]
 810643c:	643b      	str	r3, [r7, #64]	@ 0x40
 810643e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8106440:	2b00      	cmp	r3, #0
 8106442:	d1b6      	bne.n	81063b2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8106444:	683b      	ldr	r3, [r7, #0]
 8106446:	891b      	ldrh	r3, [r3, #8]
 8106448:	461a      	mov	r2, r3
 810644a:	4b1f      	ldr	r3, [pc, #124]	@ (81064c8 <low_level_output+0x150>)
 810644c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 810644e:	4a1e      	ldr	r2, [pc, #120]	@ (81064c8 <low_level_output+0x150>)
 8106450:	f107 030c 	add.w	r3, r7, #12
 8106454:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8106456:	4a1c      	ldr	r2, [pc, #112]	@ (81064c8 <low_level_output+0x150>)
 8106458:	683b      	ldr	r3, [r7, #0]
 810645a:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 810645c:	6838      	ldr	r0, [r7, #0]
 810645e:	f012 ff33 	bl	81192c8 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 8106462:	4919      	ldr	r1, [pc, #100]	@ (81064c8 <low_level_output+0x150>)
 8106464:	4819      	ldr	r0, [pc, #100]	@ (81064cc <low_level_output+0x154>)
 8106466:	f003 f9ca 	bl	81097fe <HAL_ETH_Transmit_IT>
 810646a:	4603      	mov	r3, r0
 810646c:	2b00      	cmp	r3, #0
 810646e:	d103      	bne.n	8106478 <low_level_output+0x100>
    {
      errval = ERR_OK;
 8106470:	2300      	movs	r3, #0
 8106472:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8106476:	e01b      	b.n	81064b0 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8106478:	4814      	ldr	r0, [pc, #80]	@ (81064cc <low_level_output+0x154>)
 810647a:	f003 ffb9 	bl	810a3f0 <HAL_ETH_GetError>
 810647e:	4603      	mov	r3, r0
 8106480:	f003 0302 	and.w	r3, r3, #2
 8106484:	2b00      	cmp	r3, #0
 8106486:	d00d      	beq.n	81064a4 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8106488:	4b11      	ldr	r3, [pc, #68]	@ (81064d0 <low_level_output+0x158>)
 810648a:	681b      	ldr	r3, [r3, #0]
 810648c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8106490:	4618      	mov	r0, r3
 8106492:	f009 fd87 	bl	810ffa4 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 8106496:	480d      	ldr	r0, [pc, #52]	@ (81064cc <low_level_output+0x154>)
 8106498:	f003 fb38 	bl	8109b0c <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 810649c:	23fe      	movs	r3, #254	@ 0xfe
 810649e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 81064a2:	e005      	b.n	81064b0 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 81064a4:	6838      	ldr	r0, [r7, #0]
 81064a6:	f012 fe69 	bl	811917c <pbuf_free>
        errval =  ERR_IF;
 81064aa:	23f4      	movs	r3, #244	@ 0xf4
 81064ac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 81064b0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 81064b4:	f113 0f02 	cmn.w	r3, #2
 81064b8:	d0d3      	beq.n	8106462 <low_level_output+0xea>

  return errval;
 81064ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 81064be:	4618      	mov	r0, r3
 81064c0:	3748      	adds	r7, #72	@ 0x48
 81064c2:	46bd      	mov	sp, r7
 81064c4:	bd80      	pop	{r7, pc}
 81064c6:	bf00      	nop
 81064c8:	1000037c 	.word	0x1000037c
 81064cc:	100002cc 	.word	0x100002cc
 81064d0:	100002c8 	.word	0x100002c8

081064d4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 81064d4:	b580      	push	{r7, lr}
 81064d6:	b084      	sub	sp, #16
 81064d8:	af00      	add	r7, sp, #0
 81064da:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 81064dc:	2300      	movs	r3, #0
 81064de:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 81064e0:	4b07      	ldr	r3, [pc, #28]	@ (8106500 <low_level_input+0x2c>)
 81064e2:	781b      	ldrb	r3, [r3, #0]
 81064e4:	2b00      	cmp	r3, #0
 81064e6:	d105      	bne.n	81064f4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 81064e8:	f107 030c 	add.w	r3, r7, #12
 81064ec:	4619      	mov	r1, r3
 81064ee:	4805      	ldr	r0, [pc, #20]	@ (8106504 <low_level_input+0x30>)
 81064f0:	f003 f9d6 	bl	81098a0 <HAL_ETH_ReadData>
  }

  return p;
 81064f4:	68fb      	ldr	r3, [r7, #12]
}
 81064f6:	4618      	mov	r0, r3
 81064f8:	3710      	adds	r7, #16
 81064fa:	46bd      	mov	sp, r7
 81064fc:	bd80      	pop	{r7, pc}
 81064fe:	bf00      	nop
 8106500:	100002c0 	.word	0x100002c0
 8106504:	100002cc 	.word	0x100002cc

08106508 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8106508:	b580      	push	{r7, lr}
 810650a:	b084      	sub	sp, #16
 810650c:	af00      	add	r7, sp, #0
 810650e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8106510:	2300      	movs	r3, #0
 8106512:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8106514:	687b      	ldr	r3, [r7, #4]
 8106516:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8106518:	4b0f      	ldr	r3, [pc, #60]	@ (8106558 <ethernetif_input+0x50>)
 810651a:	681b      	ldr	r3, [r3, #0]
 810651c:	f04f 31ff 	mov.w	r1, #4294967295
 8106520:	4618      	mov	r0, r3
 8106522:	f009 fd3f 	bl	810ffa4 <osSemaphoreAcquire>
 8106526:	4603      	mov	r3, r0
 8106528:	2b00      	cmp	r3, #0
 810652a:	d1f5      	bne.n	8106518 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 810652c:	68b8      	ldr	r0, [r7, #8]
 810652e:	f7ff ffd1 	bl	81064d4 <low_level_input>
 8106532:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8106534:	68fb      	ldr	r3, [r7, #12]
 8106536:	2b00      	cmp	r3, #0
 8106538:	d00a      	beq.n	8106550 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 810653a:	68bb      	ldr	r3, [r7, #8]
 810653c:	691b      	ldr	r3, [r3, #16]
 810653e:	68b9      	ldr	r1, [r7, #8]
 8106540:	68f8      	ldr	r0, [r7, #12]
 8106542:	4798      	blx	r3
 8106544:	4603      	mov	r3, r0
 8106546:	2b00      	cmp	r3, #0
 8106548:	d002      	beq.n	8106550 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 810654a:	68f8      	ldr	r0, [r7, #12]
 810654c:	f012 fe16 	bl	811917c <pbuf_free>
          }
        }
      } while(p!=NULL);
 8106550:	68fb      	ldr	r3, [r7, #12]
 8106552:	2b00      	cmp	r3, #0
 8106554:	d1ea      	bne.n	810652c <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8106556:	e7df      	b.n	8106518 <ethernetif_input+0x10>
 8106558:	100002c4 	.word	0x100002c4

0810655c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 810655c:	b580      	push	{r7, lr}
 810655e:	b082      	sub	sp, #8
 8106560:	af00      	add	r7, sp, #0
 8106562:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8106564:	687b      	ldr	r3, [r7, #4]
 8106566:	2b00      	cmp	r3, #0
 8106568:	d106      	bne.n	8106578 <ethernetif_init+0x1c>
 810656a:	4b0e      	ldr	r3, [pc, #56]	@ (81065a4 <ethernetif_init+0x48>)
 810656c:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8106570:	490d      	ldr	r1, [pc, #52]	@ (81065a8 <ethernetif_init+0x4c>)
 8106572:	480e      	ldr	r0, [pc, #56]	@ (81065ac <ethernetif_init+0x50>)
 8106574:	f01b fe76 	bl	8122264 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8106578:	687b      	ldr	r3, [r7, #4]
 810657a:	2273      	movs	r2, #115	@ 0x73
 810657c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8106580:	687b      	ldr	r3, [r7, #4]
 8106582:	2274      	movs	r2, #116	@ 0x74
 8106584:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8106588:	687b      	ldr	r3, [r7, #4]
 810658a:	4a09      	ldr	r2, [pc, #36]	@ (81065b0 <ethernetif_init+0x54>)
 810658c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 810658e:	687b      	ldr	r3, [r7, #4]
 8106590:	4a08      	ldr	r2, [pc, #32]	@ (81065b4 <ethernetif_init+0x58>)
 8106592:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8106594:	6878      	ldr	r0, [r7, #4]
 8106596:	f7ff fdaf 	bl	81060f8 <low_level_init>

  return ERR_OK;
 810659a:	2300      	movs	r3, #0
}
 810659c:	4618      	mov	r0, r3
 810659e:	3708      	adds	r7, #8
 81065a0:	46bd      	mov	sp, r7
 81065a2:	bd80      	pop	{r7, pc}
 81065a4:	08123a88 	.word	0x08123a88
 81065a8:	08123ae8 	.word	0x08123ae8
 81065ac:	08123af8 	.word	0x08123af8
 81065b0:	08114f51 	.word	0x08114f51
 81065b4:	08106379 	.word	0x08106379

081065b8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 81065b8:	b580      	push	{r7, lr}
 81065ba:	b084      	sub	sp, #16
 81065bc:	af00      	add	r7, sp, #0
 81065be:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 81065c0:	687b      	ldr	r3, [r7, #4]
 81065c2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 81065c4:	68f9      	ldr	r1, [r7, #12]
 81065c6:	4809      	ldr	r0, [pc, #36]	@ (81065ec <pbuf_free_custom+0x34>)
 81065c8:	f011 fdf2 	bl	81181b0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 81065cc:	4b08      	ldr	r3, [pc, #32]	@ (81065f0 <pbuf_free_custom+0x38>)
 81065ce:	781b      	ldrb	r3, [r3, #0]
 81065d0:	2b01      	cmp	r3, #1
 81065d2:	d107      	bne.n	81065e4 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 81065d4:	4b06      	ldr	r3, [pc, #24]	@ (81065f0 <pbuf_free_custom+0x38>)
 81065d6:	2200      	movs	r2, #0
 81065d8:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 81065da:	4b06      	ldr	r3, [pc, #24]	@ (81065f4 <pbuf_free_custom+0x3c>)
 81065dc:	681b      	ldr	r3, [r3, #0]
 81065de:	4618      	mov	r0, r3
 81065e0:	f009 fd32 	bl	8110048 <osSemaphoreRelease>
  }
}
 81065e4:	bf00      	nop
 81065e6:	3710      	adds	r7, #16
 81065e8:	46bd      	mov	sp, r7
 81065ea:	bd80      	pop	{r7, pc}
 81065ec:	08128960 	.word	0x08128960
 81065f0:	100002c0 	.word	0x100002c0
 81065f4:	100002c4 	.word	0x100002c4

081065f8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 81065f8:	b580      	push	{r7, lr}
 81065fa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 81065fc:	f002 fe00 	bl	8109200 <HAL_GetTick>
 8106600:	4603      	mov	r3, r0
}
 8106602:	4618      	mov	r0, r3
 8106604:	bd80      	pop	{r7, pc}
	...

08106608 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8106608:	b580      	push	{r7, lr}
 810660a:	b08e      	sub	sp, #56	@ 0x38
 810660c:	af00      	add	r7, sp, #0
 810660e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8106610:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8106614:	2200      	movs	r2, #0
 8106616:	601a      	str	r2, [r3, #0]
 8106618:	605a      	str	r2, [r3, #4]
 810661a:	609a      	str	r2, [r3, #8]
 810661c:	60da      	str	r2, [r3, #12]
 810661e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8106620:	687b      	ldr	r3, [r7, #4]
 8106622:	681b      	ldr	r3, [r3, #0]
 8106624:	4a51      	ldr	r2, [pc, #324]	@ (810676c <HAL_ETH_MspInit+0x164>)
 8106626:	4293      	cmp	r3, r2
 8106628:	f040 809b 	bne.w	8106762 <HAL_ETH_MspInit+0x15a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 810662c:	4b50      	ldr	r3, [pc, #320]	@ (8106770 <HAL_ETH_MspInit+0x168>)
 810662e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8106632:	4a4f      	ldr	r2, [pc, #316]	@ (8106770 <HAL_ETH_MspInit+0x168>)
 8106634:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8106638:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810663c:	4b4c      	ldr	r3, [pc, #304]	@ (8106770 <HAL_ETH_MspInit+0x168>)
 810663e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8106642:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8106646:	623b      	str	r3, [r7, #32]
 8106648:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 810664a:	4b49      	ldr	r3, [pc, #292]	@ (8106770 <HAL_ETH_MspInit+0x168>)
 810664c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8106650:	4a47      	ldr	r2, [pc, #284]	@ (8106770 <HAL_ETH_MspInit+0x168>)
 8106652:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8106656:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810665a:	4b45      	ldr	r3, [pc, #276]	@ (8106770 <HAL_ETH_MspInit+0x168>)
 810665c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8106660:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8106664:	61fb      	str	r3, [r7, #28]
 8106666:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8106668:	4b41      	ldr	r3, [pc, #260]	@ (8106770 <HAL_ETH_MspInit+0x168>)
 810666a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810666e:	4a40      	ldr	r2, [pc, #256]	@ (8106770 <HAL_ETH_MspInit+0x168>)
 8106670:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106674:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8106678:	4b3d      	ldr	r3, [pc, #244]	@ (8106770 <HAL_ETH_MspInit+0x168>)
 810667a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810667e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8106682:	61bb      	str	r3, [r7, #24]
 8106684:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8106686:	4b3a      	ldr	r3, [pc, #232]	@ (8106770 <HAL_ETH_MspInit+0x168>)
 8106688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810668c:	4a38      	ldr	r2, [pc, #224]	@ (8106770 <HAL_ETH_MspInit+0x168>)
 810668e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8106692:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8106696:	4b36      	ldr	r3, [pc, #216]	@ (8106770 <HAL_ETH_MspInit+0x168>)
 8106698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810669c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81066a0:	617b      	str	r3, [r7, #20]
 81066a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 81066a4:	4b32      	ldr	r3, [pc, #200]	@ (8106770 <HAL_ETH_MspInit+0x168>)
 81066a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81066aa:	4a31      	ldr	r2, [pc, #196]	@ (8106770 <HAL_ETH_MspInit+0x168>)
 81066ac:	f043 0304 	orr.w	r3, r3, #4
 81066b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81066b4:	4b2e      	ldr	r3, [pc, #184]	@ (8106770 <HAL_ETH_MspInit+0x168>)
 81066b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81066ba:	f003 0304 	and.w	r3, r3, #4
 81066be:	613b      	str	r3, [r7, #16]
 81066c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 81066c2:	4b2b      	ldr	r3, [pc, #172]	@ (8106770 <HAL_ETH_MspInit+0x168>)
 81066c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81066c8:	4a29      	ldr	r2, [pc, #164]	@ (8106770 <HAL_ETH_MspInit+0x168>)
 81066ca:	f043 0301 	orr.w	r3, r3, #1
 81066ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81066d2:	4b27      	ldr	r3, [pc, #156]	@ (8106770 <HAL_ETH_MspInit+0x168>)
 81066d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81066d8:	f003 0301 	and.w	r3, r3, #1
 81066dc:	60fb      	str	r3, [r7, #12]
 81066de:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ETH_REF_CLK
    PA7     ------> ETH_CRS_DV
    PC4     ------> ETH_RXD0
    PC5     ------> ETH_RXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 81066e0:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 81066e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81066e6:	2302      	movs	r3, #2
 81066e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81066ea:	2300      	movs	r3, #0
 81066ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81066ee:	2303      	movs	r3, #3
 81066f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81066f2:	230b      	movs	r3, #11
 81066f4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 81066f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81066fa:	4619      	mov	r1, r3
 81066fc:	481d      	ldr	r0, [pc, #116]	@ (8106774 <HAL_ETH_MspInit+0x16c>)
 81066fe:	f004 fc11 	bl	810af24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8106702:	2332      	movs	r3, #50	@ 0x32
 8106704:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8106706:	2302      	movs	r3, #2
 8106708:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810670a:	2300      	movs	r3, #0
 810670c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810670e:	2303      	movs	r3, #3
 8106710:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8106712:	230b      	movs	r3, #11
 8106714:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8106716:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810671a:	4619      	mov	r1, r3
 810671c:	4816      	ldr	r0, [pc, #88]	@ (8106778 <HAL_ETH_MspInit+0x170>)
 810671e:	f004 fc01 	bl	810af24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_7;
 8106722:	2386      	movs	r3, #134	@ 0x86
 8106724:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8106726:	2302      	movs	r3, #2
 8106728:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810672a:	2300      	movs	r3, #0
 810672c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810672e:	2303      	movs	r3, #3
 8106730:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8106732:	230b      	movs	r3, #11
 8106734:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8106736:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810673a:	4619      	mov	r1, r3
 810673c:	480f      	ldr	r0, [pc, #60]	@ (810677c <HAL_ETH_MspInit+0x174>)
 810673e:	f004 fbf1 	bl	810af24 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8106742:	2200      	movs	r2, #0
 8106744:	2105      	movs	r1, #5
 8106746:	203d      	movs	r0, #61	@ 0x3d
 8106748:	f002 fe32 	bl	81093b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 810674c:	203d      	movs	r0, #61	@ 0x3d
 810674e:	f002 fe49 	bl	81093e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 6, 0);
 8106752:	2200      	movs	r2, #0
 8106754:	2106      	movs	r1, #6
 8106756:	203e      	movs	r0, #62	@ 0x3e
 8106758:	f002 fe2a 	bl	81093b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 810675c:	203e      	movs	r0, #62	@ 0x3e
 810675e:	f002 fe41 	bl	81093e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8106762:	bf00      	nop
 8106764:	3738      	adds	r7, #56	@ 0x38
 8106766:	46bd      	mov	sp, r7
 8106768:	bd80      	pop	{r7, pc}
 810676a:	bf00      	nop
 810676c:	40028000 	.word	0x40028000
 8106770:	58024400 	.word	0x58024400
 8106774:	58021800 	.word	0x58021800
 8106778:	58020800 	.word	0x58020800
 810677c:	58020000 	.word	0x58020000

08106780 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8106780:	b580      	push	{r7, lr}
 8106782:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8106784:	4802      	ldr	r0, [pc, #8]	@ (8106790 <ETH_PHY_IO_Init+0x10>)
 8106786:	f003 fde3 	bl	810a350 <HAL_ETH_SetMDIOClockRange>

  return 0;
 810678a:	2300      	movs	r3, #0
}
 810678c:	4618      	mov	r0, r3
 810678e:	bd80      	pop	{r7, pc}
 8106790:	100002cc 	.word	0x100002cc

08106794 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8106794:	b480      	push	{r7}
 8106796:	af00      	add	r7, sp, #0
  return 0;
 8106798:	2300      	movs	r3, #0
}
 810679a:	4618      	mov	r0, r3
 810679c:	46bd      	mov	sp, r7
 810679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067a2:	4770      	bx	lr

081067a4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 81067a4:	b580      	push	{r7, lr}
 81067a6:	b084      	sub	sp, #16
 81067a8:	af00      	add	r7, sp, #0
 81067aa:	60f8      	str	r0, [r7, #12]
 81067ac:	60b9      	str	r1, [r7, #8]
 81067ae:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 81067b0:	687b      	ldr	r3, [r7, #4]
 81067b2:	68ba      	ldr	r2, [r7, #8]
 81067b4:	68f9      	ldr	r1, [r7, #12]
 81067b6:	4807      	ldr	r0, [pc, #28]	@ (81067d4 <ETH_PHY_IO_ReadReg+0x30>)
 81067b8:	f003 fb34 	bl	8109e24 <HAL_ETH_ReadPHYRegister>
 81067bc:	4603      	mov	r3, r0
 81067be:	2b00      	cmp	r3, #0
 81067c0:	d002      	beq.n	81067c8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 81067c2:	f04f 33ff 	mov.w	r3, #4294967295
 81067c6:	e000      	b.n	81067ca <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 81067c8:	2300      	movs	r3, #0
}
 81067ca:	4618      	mov	r0, r3
 81067cc:	3710      	adds	r7, #16
 81067ce:	46bd      	mov	sp, r7
 81067d0:	bd80      	pop	{r7, pc}
 81067d2:	bf00      	nop
 81067d4:	100002cc 	.word	0x100002cc

081067d8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 81067d8:	b580      	push	{r7, lr}
 81067da:	b084      	sub	sp, #16
 81067dc:	af00      	add	r7, sp, #0
 81067de:	60f8      	str	r0, [r7, #12]
 81067e0:	60b9      	str	r1, [r7, #8]
 81067e2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 81067e4:	687b      	ldr	r3, [r7, #4]
 81067e6:	68ba      	ldr	r2, [r7, #8]
 81067e8:	68f9      	ldr	r1, [r7, #12]
 81067ea:	4807      	ldr	r0, [pc, #28]	@ (8106808 <ETH_PHY_IO_WriteReg+0x30>)
 81067ec:	f003 fb6e 	bl	8109ecc <HAL_ETH_WritePHYRegister>
 81067f0:	4603      	mov	r3, r0
 81067f2:	2b00      	cmp	r3, #0
 81067f4:	d002      	beq.n	81067fc <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 81067f6:	f04f 33ff 	mov.w	r3, #4294967295
 81067fa:	e000      	b.n	81067fe <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 81067fc:	2300      	movs	r3, #0
}
 81067fe:	4618      	mov	r0, r3
 8106800:	3710      	adds	r7, #16
 8106802:	46bd      	mov	sp, r7
 8106804:	bd80      	pop	{r7, pc}
 8106806:	bf00      	nop
 8106808:	100002cc 	.word	0x100002cc

0810680c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 810680c:	b580      	push	{r7, lr}
 810680e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8106810:	f002 fcf6 	bl	8109200 <HAL_GetTick>
 8106814:	4603      	mov	r3, r0
}
 8106816:	4618      	mov	r0, r3
 8106818:	bd80      	pop	{r7, pc}
	...

0810681c <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 810681c:	b580      	push	{r7, lr}
 810681e:	b0a0      	sub	sp, #128	@ 0x80
 8106820:	af00      	add	r7, sp, #0
 8106822:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8106824:	f107 0308 	add.w	r3, r7, #8
 8106828:	2264      	movs	r2, #100	@ 0x64
 810682a:	2100      	movs	r1, #0
 810682c:	4618      	mov	r0, r3
 810682e:	f01b febf 	bl	81225b0 <memset>
  int32_t PHYLinkState = 0;
 8106832:	2300      	movs	r3, #0
 8106834:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8106836:	2300      	movs	r3, #0
 8106838:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810683a:	2300      	movs	r3, #0
 810683c:	67bb      	str	r3, [r7, #120]	@ 0x78
 810683e:	2300      	movs	r3, #0
 8106840:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8106842:	687b      	ldr	r3, [r7, #4]
 8106844:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8106846:	483a      	ldr	r0, [pc, #232]	@ (8106930 <ethernet_link_thread+0x114>)
 8106848:	f002 fbc4 	bl	8108fd4 <LAN8742_GetLinkState>
 810684c:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 810684e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8106850:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8106854:	089b      	lsrs	r3, r3, #2
 8106856:	f003 0301 	and.w	r3, r3, #1
 810685a:	b2db      	uxtb	r3, r3
 810685c:	2b00      	cmp	r3, #0
 810685e:	d00c      	beq.n	810687a <ethernet_link_thread+0x5e>
 8106860:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8106862:	2b01      	cmp	r3, #1
 8106864:	dc09      	bgt.n	810687a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8106866:	4833      	ldr	r0, [pc, #204]	@ (8106934 <ethernet_link_thread+0x118>)
 8106868:	f002 ff51 	bl	810970e <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 810686c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 810686e:	f012 f841 	bl	81188f4 <netif_set_down>
    netif_set_link_down(netif);
 8106872:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8106874:	f012 f8a4 	bl	81189c0 <netif_set_link_down>
 8106878:	e055      	b.n	8106926 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 810687a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810687c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8106880:	f003 0304 	and.w	r3, r3, #4
 8106884:	2b00      	cmp	r3, #0
 8106886:	d14e      	bne.n	8106926 <ethernet_link_thread+0x10a>
 8106888:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810688a:	2b01      	cmp	r3, #1
 810688c:	dd4b      	ble.n	8106926 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 810688e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8106890:	3b02      	subs	r3, #2
 8106892:	2b03      	cmp	r3, #3
 8106894:	d82a      	bhi.n	81068ec <ethernet_link_thread+0xd0>
 8106896:	a201      	add	r2, pc, #4	@ (adr r2, 810689c <ethernet_link_thread+0x80>)
 8106898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810689c:	081068ad 	.word	0x081068ad
 81068a0:	081068bf 	.word	0x081068bf
 81068a4:	081068cf 	.word	0x081068cf
 81068a8:	081068df 	.word	0x081068df
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 81068ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 81068b0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 81068b2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 81068b6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 81068b8:	2301      	movs	r3, #1
 81068ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 81068bc:	e017      	b.n	81068ee <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 81068be:	2300      	movs	r3, #0
 81068c0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 81068c2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 81068c6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 81068c8:	2301      	movs	r3, #1
 81068ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 81068cc:	e00f      	b.n	81068ee <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 81068ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 81068d2:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 81068d4:	2300      	movs	r3, #0
 81068d6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 81068d8:	2301      	movs	r3, #1
 81068da:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 81068dc:	e007      	b.n	81068ee <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 81068de:	2300      	movs	r3, #0
 81068e0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 81068e2:	2300      	movs	r3, #0
 81068e4:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 81068e6:	2301      	movs	r3, #1
 81068e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 81068ea:	e000      	b.n	81068ee <ethernet_link_thread+0xd2>
    default:
      break;
 81068ec:	bf00      	nop
    }

    if(linkchanged)
 81068ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 81068f0:	2b00      	cmp	r3, #0
 81068f2:	d018      	beq.n	8106926 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 81068f4:	f107 0308 	add.w	r3, r7, #8
 81068f8:	4619      	mov	r1, r3
 81068fa:	480e      	ldr	r0, [pc, #56]	@ (8106934 <ethernet_link_thread+0x118>)
 81068fc:	f003 fb3a 	bl	8109f74 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8106900:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8106902:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8106904:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8106906:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8106908:	f107 0308 	add.w	r3, r7, #8
 810690c:	4619      	mov	r1, r3
 810690e:	4809      	ldr	r0, [pc, #36]	@ (8106934 <ethernet_link_thread+0x118>)
 8106910:	f003 fd04 	bl	810a31c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8106914:	4807      	ldr	r0, [pc, #28]	@ (8106934 <ethernet_link_thread+0x118>)
 8106916:	f002 fe85 	bl	8109624 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 810691a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 810691c:	f011 ff7e 	bl	811881c <netif_set_up>
      netif_set_link_up(netif);
 8106920:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8106922:	f012 f819 	bl	8118958 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8106926:	2064      	movs	r0, #100	@ 0x64
 8106928:	f009 f989 	bl	810fc3e <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 810692c:	e78b      	b.n	8106846 <ethernet_link_thread+0x2a>
 810692e:	bf00      	nop
 8106930:	100003b4 	.word	0x100003b4
 8106934:	100002cc 	.word	0x100002cc

08106938 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8106938:	b580      	push	{r7, lr}
 810693a:	b086      	sub	sp, #24
 810693c:	af02      	add	r7, sp, #8
 810693e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8106940:	4812      	ldr	r0, [pc, #72]	@ (810698c <HAL_ETH_RxAllocateCallback+0x54>)
 8106942:	f011 fbc1 	bl	81180c8 <memp_malloc_pool>
 8106946:	60f8      	str	r0, [r7, #12]
  if (p)
 8106948:	68fb      	ldr	r3, [r7, #12]
 810694a:	2b00      	cmp	r3, #0
 810694c:	d014      	beq.n	8106978 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 810694e:	68fb      	ldr	r3, [r7, #12]
 8106950:	f103 0220 	add.w	r2, r3, #32
 8106954:	687b      	ldr	r3, [r7, #4]
 8106956:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8106958:	68fb      	ldr	r3, [r7, #12]
 810695a:	4a0d      	ldr	r2, [pc, #52]	@ (8106990 <HAL_ETH_RxAllocateCallback+0x58>)
 810695c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 810695e:	687b      	ldr	r3, [r7, #4]
 8106960:	681b      	ldr	r3, [r3, #0]
 8106962:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8106966:	9201      	str	r2, [sp, #4]
 8106968:	9300      	str	r3, [sp, #0]
 810696a:	68fb      	ldr	r3, [r7, #12]
 810696c:	2241      	movs	r2, #65	@ 0x41
 810696e:	2100      	movs	r1, #0
 8106970:	2000      	movs	r0, #0
 8106972:	f012 fa4b 	bl	8118e0c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8106976:	e005      	b.n	8106984 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8106978:	4b06      	ldr	r3, [pc, #24]	@ (8106994 <HAL_ETH_RxAllocateCallback+0x5c>)
 810697a:	2201      	movs	r2, #1
 810697c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 810697e:	687b      	ldr	r3, [r7, #4]
 8106980:	2200      	movs	r2, #0
 8106982:	601a      	str	r2, [r3, #0]
}
 8106984:	bf00      	nop
 8106986:	3710      	adds	r7, #16
 8106988:	46bd      	mov	sp, r7
 810698a:	bd80      	pop	{r7, pc}
 810698c:	08128960 	.word	0x08128960
 8106990:	081065b9 	.word	0x081065b9
 8106994:	100002c0 	.word	0x100002c0

08106998 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8106998:	b480      	push	{r7}
 810699a:	b089      	sub	sp, #36	@ 0x24
 810699c:	af00      	add	r7, sp, #0
 810699e:	60f8      	str	r0, [r7, #12]
 81069a0:	60b9      	str	r1, [r7, #8]
 81069a2:	607a      	str	r2, [r7, #4]
 81069a4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 81069a6:	68fb      	ldr	r3, [r7, #12]
 81069a8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 81069aa:	68bb      	ldr	r3, [r7, #8]
 81069ac:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 81069ae:	2300      	movs	r3, #0
 81069b0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 81069b2:	687b      	ldr	r3, [r7, #4]
 81069b4:	3b20      	subs	r3, #32
 81069b6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 81069b8:	69fb      	ldr	r3, [r7, #28]
 81069ba:	2200      	movs	r2, #0
 81069bc:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 81069be:	69fb      	ldr	r3, [r7, #28]
 81069c0:	2200      	movs	r2, #0
 81069c2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 81069c4:	69fb      	ldr	r3, [r7, #28]
 81069c6:	887a      	ldrh	r2, [r7, #2]
 81069c8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 81069ca:	69bb      	ldr	r3, [r7, #24]
 81069cc:	681b      	ldr	r3, [r3, #0]
 81069ce:	2b00      	cmp	r3, #0
 81069d0:	d103      	bne.n	81069da <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 81069d2:	69bb      	ldr	r3, [r7, #24]
 81069d4:	69fa      	ldr	r2, [r7, #28]
 81069d6:	601a      	str	r2, [r3, #0]
 81069d8:	e003      	b.n	81069e2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 81069da:	697b      	ldr	r3, [r7, #20]
 81069dc:	681b      	ldr	r3, [r3, #0]
 81069de:	69fa      	ldr	r2, [r7, #28]
 81069e0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 81069e2:	697b      	ldr	r3, [r7, #20]
 81069e4:	69fa      	ldr	r2, [r7, #28]
 81069e6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 81069e8:	69bb      	ldr	r3, [r7, #24]
 81069ea:	681b      	ldr	r3, [r3, #0]
 81069ec:	61fb      	str	r3, [r7, #28]
 81069ee:	e009      	b.n	8106a04 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 81069f0:	69fb      	ldr	r3, [r7, #28]
 81069f2:	891a      	ldrh	r2, [r3, #8]
 81069f4:	887b      	ldrh	r3, [r7, #2]
 81069f6:	4413      	add	r3, r2
 81069f8:	b29a      	uxth	r2, r3
 81069fa:	69fb      	ldr	r3, [r7, #28]
 81069fc:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 81069fe:	69fb      	ldr	r3, [r7, #28]
 8106a00:	681b      	ldr	r3, [r3, #0]
 8106a02:	61fb      	str	r3, [r7, #28]
 8106a04:	69fb      	ldr	r3, [r7, #28]
 8106a06:	2b00      	cmp	r3, #0
 8106a08:	d1f2      	bne.n	81069f0 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8106a0a:	bf00      	nop
 8106a0c:	bf00      	nop
 8106a0e:	3724      	adds	r7, #36	@ 0x24
 8106a10:	46bd      	mov	sp, r7
 8106a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a16:	4770      	bx	lr

08106a18 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8106a18:	b580      	push	{r7, lr}
 8106a1a:	b082      	sub	sp, #8
 8106a1c:	af00      	add	r7, sp, #0
 8106a1e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8106a20:	6878      	ldr	r0, [r7, #4]
 8106a22:	f012 fbab 	bl	811917c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8106a26:	bf00      	nop
 8106a28:	3708      	adds	r7, #8
 8106a2a:	46bd      	mov	sp, r7
 8106a2c:	bd80      	pop	{r7, pc}
	...

08106a30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8106a30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8106a68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8106a34:	f002 fb56 	bl	81090e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8106a38:	480c      	ldr	r0, [pc, #48]	@ (8106a6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8106a3a:	490d      	ldr	r1, [pc, #52]	@ (8106a70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8106a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8106a74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8106a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8106a40:	e002      	b.n	8106a48 <LoopCopyDataInit>

08106a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8106a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8106a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8106a46:	3304      	adds	r3, #4

08106a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8106a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8106a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8106a4c:	d3f9      	bcc.n	8106a42 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8106a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8106a78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8106a50:	4c0a      	ldr	r4, [pc, #40]	@ (8106a7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8106a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8106a54:	e001      	b.n	8106a5a <LoopFillZerobss>

08106a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8106a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8106a58:	3204      	adds	r2, #4

08106a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8106a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8106a5c:	d3fb      	bcc.n	8106a56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8106a5e:	f01b fecf 	bl	8122800 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8106a62:	f7f9 ff93 	bl	810098c <main>
  bx  lr
 8106a66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8106a68:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8106a6c:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8106a70:	10000090 	.word	0x10000090
  ldr r2, =_sidata
 8106a74:	08128d48 	.word	0x08128d48
  ldr r2, =_sbss
 8106a78:	10000090 	.word	0x10000090
  ldr r4, =_ebss
 8106a7c:	1001201c 	.word	0x1001201c

08106a80 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8106a80:	e7fe      	b.n	8106a80 <ADC3_IRQHandler>

08106a82 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>:
  };

  _GLIBCXX14_CONSTEXPR
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }
 8106a82:	b480      	push	{r7}
 8106a84:	af00      	add	r7, sp, #0
 8106a86:	bf00      	nop
 8106a88:	4618      	mov	r0, r3
 8106a8a:	46bd      	mov	sp, r7
 8106a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a90:	4770      	bx	lr

08106a92 <_ZN9__gnu_cxx5__ops14_Iter_less_valC1ENS0_15_Iter_less_iterE>:
    _Iter_less_val() { }
#endif

    _GLIBCXX20_CONSTEXPR
    explicit
    _Iter_less_val(_Iter_less_iter) { }
 8106a92:	b480      	push	{r7}
 8106a94:	b083      	sub	sp, #12
 8106a96:	af00      	add	r7, sp, #0
 8106a98:	6078      	str	r0, [r7, #4]
 8106a9a:	7039      	strb	r1, [r7, #0]
 8106a9c:	687b      	ldr	r3, [r7, #4]
 8106a9e:	4618      	mov	r0, r3
 8106aa0:	370c      	adds	r7, #12
 8106aa2:	46bd      	mov	sp, r7
 8106aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106aa8:	4770      	bx	lr

08106aaa <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>:
  { return _Val_less_iter(); }

  _GLIBCXX20_CONSTEXPR
  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }
 8106aaa:	b480      	push	{r7}
 8106aac:	b083      	sub	sp, #12
 8106aae:	af00      	add	r7, sp, #0
 8106ab0:	7138      	strb	r0, [r7, #4]
 8106ab2:	bf00      	nop
 8106ab4:	4618      	mov	r0, r3
 8106ab6:	370c      	adds	r7, #12
 8106ab8:	46bd      	mov	sp, r7
 8106aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106abe:	4770      	bx	lr

08106ac0 <_ZSt4__lgi>:

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 8106ac0:	b480      	push	{r7}
 8106ac2:	b083      	sub	sp, #12
 8106ac4:	af00      	add	r7, sp, #0
 8106ac6:	6078      	str	r0, [r7, #4]
 8106ac8:	687b      	ldr	r3, [r7, #4]
 8106aca:	fab3 f383 	clz	r3, r3
 8106ace:	f1c3 031f 	rsb	r3, r3, #31
 8106ad2:	4618      	mov	r0, r3
 8106ad4:	370c      	adds	r7, #12
 8106ad6:	46bd      	mov	sp, r7
 8106ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106adc:	4770      	bx	lr

08106ade <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8106ade:	b580      	push	{r7, lr}
 8106ae0:	b082      	sub	sp, #8
 8106ae2:	af00      	add	r7, sp, #0
 8106ae4:	ed87 0a01 	vstr	s0, [r7, #4]
 8106ae8:	ed97 0a01 	vldr	s0, [r7, #4]
 8106aec:	f01a fd60 	bl	81215b0 <roundf>
 8106af0:	eef0 7a40 	vmov.f32	s15, s0
 8106af4:	eeb0 0a67 	vmov.f32	s0, s15
 8106af8:	3708      	adds	r7, #8
 8106afa:	46bd      	mov	sp, r7
 8106afc:	bd80      	pop	{r7, pc}
	...

08106b00 <_ZNSt14numeric_limitsIsE3minEv>:
    struct numeric_limits<short>
    {
      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;

      static _GLIBCXX_CONSTEXPR short
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 8106b00:	b480      	push	{r7}
 8106b02:	af00      	add	r7, sp, #0
 8106b04:	4b02      	ldr	r3, [pc, #8]	@ (8106b10 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 8106b06:	4618      	mov	r0, r3
 8106b08:	46bd      	mov	sp, r7
 8106b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b0e:	4770      	bx	lr
 8106b10:	ffff8000 	.word	0xffff8000

08106b14 <_Z15StartTask_CTempPv>:
constexpr uint16_t MCP9808_I2C_ADDRESS 	= 0x18 << 1;  // MCP9808 address (shift for HAL I2C)
constexpr uint8_t  MCP9808_TEMP_REG    	= 0x05;       // Temperature register


void StartTask_CTemp(void *argument)
{
 8106b14:	b580      	push	{r7, lr}
 8106b16:	b088      	sub	sp, #32
 8106b18:	af00      	add	r7, sp, #0
 8106b1a:	6078      	str	r0, [r7, #4]
	TemperatureTask TemperatureTaskInstance;
 8106b1c:	f107 0308 	add.w	r3, r7, #8
 8106b20:	4618      	mov	r0, r3
 8106b22:	f000 f831 	bl	8106b88 <_ZN15TemperatureTaskC1Ev>

    for (;;)
    {
    	TemperatureTaskInstance.process();
 8106b26:	f107 0308 	add.w	r3, r7, #8
 8106b2a:	4618      	mov	r0, r3
 8106b2c:	f000 f848 	bl	8106bc0 <_ZN15TemperatureTask7processEv>
    	osDelay(2000);
 8106b30:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8106b34:	f009 f883 	bl	810fc3e <osDelay>
    	TemperatureTaskInstance.process();
 8106b38:	bf00      	nop
 8106b3a:	e7f4      	b.n	8106b26 <_Z15StartTask_CTempPv+0x12>

08106b3c <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8106b3c:	b580      	push	{r7, lr}
 8106b3e:	b082      	sub	sp, #8
 8106b40:	af00      	add	r7, sp, #0
 8106b42:	6078      	str	r0, [r7, #4]
 8106b44:	6878      	ldr	r0, [r7, #4]
 8106b46:	f000 f9d6 	bl	8106ef6 <_ZNSaIfED1Ev>
 8106b4a:	687b      	ldr	r3, [r7, #4]
 8106b4c:	4618      	mov	r0, r3
 8106b4e:	3708      	adds	r7, #8
 8106b50:	46bd      	mov	sp, r7
 8106b52:	bd80      	pop	{r7, pc}

08106b54 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>:
      _Vector_base() = default;
 8106b54:	b580      	push	{r7, lr}
 8106b56:	b082      	sub	sp, #8
 8106b58:	af00      	add	r7, sp, #0
 8106b5a:	6078      	str	r0, [r7, #4]
 8106b5c:	687b      	ldr	r3, [r7, #4]
 8106b5e:	4618      	mov	r0, r3
 8106b60:	f000 f9b9 	bl	8106ed6 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>
 8106b64:	687b      	ldr	r3, [r7, #4]
 8106b66:	4618      	mov	r0, r3
 8106b68:	3708      	adds	r7, #8
 8106b6a:	46bd      	mov	sp, r7
 8106b6c:	bd80      	pop	{r7, pc}

08106b6e <_ZNSt6vectorIfSaIfEEC1Ev>:
      vector() = default;
 8106b6e:	b580      	push	{r7, lr}
 8106b70:	b082      	sub	sp, #8
 8106b72:	af00      	add	r7, sp, #0
 8106b74:	6078      	str	r0, [r7, #4]
 8106b76:	687b      	ldr	r3, [r7, #4]
 8106b78:	4618      	mov	r0, r3
 8106b7a:	f7ff ffeb 	bl	8106b54 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>
 8106b7e:	687b      	ldr	r3, [r7, #4]
 8106b80:	4618      	mov	r0, r3
 8106b82:	3708      	adds	r7, #8
 8106b84:	46bd      	mov	sp, r7
 8106b86:	bd80      	pop	{r7, pc}

08106b88 <_ZN15TemperatureTaskC1Ev>:
    }
}

TemperatureTask::TemperatureTask() : event_bus(EventBus(queueToTemperature, EVENT_CLIENT_THERMOMETER))
 8106b88:	b580      	push	{r7, lr}
 8106b8a:	b082      	sub	sp, #8
 8106b8c:	af00      	add	r7, sp, #0
 8106b8e:	6078      	str	r0, [r7, #4]
 8106b90:	687b      	ldr	r3, [r7, #4]
 8106b92:	4618      	mov	r0, r3
 8106b94:	f7ff ffeb 	bl	8106b6e <_ZNSt6vectorIfSaIfEEC1Ev>
 8106b98:	687b      	ldr	r3, [r7, #4]
 8106b9a:	330c      	adds	r3, #12
 8106b9c:	4a07      	ldr	r2, [pc, #28]	@ (8106bbc <_ZN15TemperatureTaskC1Ev+0x34>)
 8106b9e:	6811      	ldr	r1, [r2, #0]
 8106ba0:	2204      	movs	r2, #4
 8106ba2:	4618      	mov	r0, r3
 8106ba4:	f7fc fa56 	bl	8103054 <_ZN8EventBusC1EP15QueueDefinition12EEventClient>
{
	measurements.reserve(MEASUREMENTS_COUNT);
 8106ba8:	687b      	ldr	r3, [r7, #4]
 8106baa:	2106      	movs	r1, #6
 8106bac:	4618      	mov	r0, r3
 8106bae:	f000 f9dd 	bl	8106f6c <_ZNSt6vectorIfSaIfEE7reserveEj>
}
 8106bb2:	687b      	ldr	r3, [r7, #4]
 8106bb4:	4618      	mov	r0, r3
 8106bb6:	3708      	adds	r7, #8
 8106bb8:	46bd      	mov	sp, r7
 8106bba:	bd80      	pop	{r7, pc}
 8106bbc:	100001bc 	.word	0x100001bc

08106bc0 <_ZN15TemperatureTask7processEv>:

void TemperatureTask::process()
{
 8106bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8106bc2:	b08f      	sub	sp, #60	@ 0x3c
 8106bc4:	af04      	add	r7, sp, #16
 8106bc6:	6078      	str	r0, [r7, #4]
	uint32_t err = doMeasurement();
 8106bc8:	6878      	ldr	r0, [r7, #4]
 8106bca:	f000 f8b5 	bl	8106d38 <_ZN15TemperatureTask13doMeasurementEv>
 8106bce:	6278      	str	r0, [r7, #36]	@ 0x24
	if( err != HAL_I2C_ERROR_NONE)
 8106bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106bd2:	2b00      	cmp	r3, #0
 8106bd4:	d130      	bne.n	8106c38 <_ZN15TemperatureTask7processEv+0x78>
	{
		return;
	}
	short int measurement = getMedian();
 8106bd6:	6878      	ldr	r0, [r7, #4]
 8106bd8:	f000 f834 	bl	8106c44 <_ZN15TemperatureTask9getMedianEv>
 8106bdc:	4603      	mov	r3, r0
 8106bde:	847b      	strh	r3, [r7, #34]	@ 0x22
	if(measurement == std::numeric_limits<short int>::min())
 8106be0:	f7ff ff8e 	bl	8106b00 <_ZNSt14numeric_limitsIsE3minEv>
 8106be4:	4603      	mov	r3, r0
 8106be6:	461a      	mov	r2, r3
 8106be8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8106bec:	4293      	cmp	r3, r2
 8106bee:	bf0c      	ite	eq
 8106bf0:	2301      	moveq	r3, #1
 8106bf2:	2300      	movne	r3, #0
 8106bf4:	b2db      	uxtb	r3, r3
 8106bf6:	2b00      	cmp	r3, #0
 8106bf8:	d120      	bne.n	8106c3c <_ZN15TemperatureTask7processEv+0x7c>
	{
		return;
	}
	EEventClient receiver = EVENT_CLIENT_FRONTEND;
 8106bfa:	2300      	movs	r3, #0
 8106bfc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	EEventType event = EVENT_UPDATE_ROOM_TEMPERATURE;
 8106c00:	2386      	movs	r3, #134	@ 0x86
 8106c02:	f887 3020 	strb.w	r3, [r7, #32]
	UMessageData data;
	data.room_temperature = measurement;
 8106c06:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8106c08:	81bb      	strh	r3, [r7, #12]
	event_bus.send(event, data, receiver);
 8106c0a:	687b      	ldr	r3, [r7, #4]
 8106c0c:	f103 050c 	add.w	r5, r3, #12
 8106c10:	f897 6020 	ldrb.w	r6, [r7, #32]
 8106c14:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8106c18:	9303      	str	r3, [sp, #12]
 8106c1a:	466c      	mov	r4, sp
 8106c1c:	f107 0314 	add.w	r3, r7, #20
 8106c20:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8106c24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8106c28:	f107 030c 	add.w	r3, r7, #12
 8106c2c:	cb0c      	ldmia	r3, {r2, r3}
 8106c2e:	4631      	mov	r1, r6
 8106c30:	4628      	mov	r0, r5
 8106c32:	f7fc fa29 	bl	8103088 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient>
 8106c36:	e002      	b.n	8106c3e <_ZN15TemperatureTask7processEv+0x7e>
		return;
 8106c38:	bf00      	nop
 8106c3a:	e000      	b.n	8106c3e <_ZN15TemperatureTask7processEv+0x7e>
		return;
 8106c3c:	bf00      	nop
}
 8106c3e:	372c      	adds	r7, #44	@ 0x2c
 8106c40:	46bd      	mov	sp, r7
 8106c42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08106c44 <_ZN15TemperatureTask9getMedianEv>:

short int TemperatureTask::getMedian()
{
 8106c44:	b590      	push	{r4, r7, lr}
 8106c46:	ed2d 8b02 	vpush	{d8}
 8106c4a:	b089      	sub	sp, #36	@ 0x24
 8106c4c:	af00      	add	r7, sp, #0
 8106c4e:	6078      	str	r0, [r7, #4]
	short int median = std::numeric_limits<short>::min();
 8106c50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8106c54:	83fb      	strh	r3, [r7, #30]
	size_t currMesSize = measurements.size();
 8106c56:	687b      	ldr	r3, [r7, #4]
 8106c58:	4618      	mov	r0, r3
 8106c5a:	f000 fa07 	bl	810706c <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8106c5e:	61b8      	str	r0, [r7, #24]

	if(currMesSize > 0)
 8106c60:	69bb      	ldr	r3, [r7, #24]
 8106c62:	2b00      	cmp	r3, #0
 8106c64:	d05f      	beq.n	8106d26 <_ZN15TemperatureTask9getMedianEv+0xe2>
	{
		std::vector<float> sortedCopy = measurements;
 8106c66:	687a      	ldr	r2, [r7, #4]
 8106c68:	f107 030c 	add.w	r3, r7, #12
 8106c6c:	4611      	mov	r1, r2
 8106c6e:	4618      	mov	r0, r3
 8106c70:	f000 fa0c 	bl	810708c <_ZNSt6vectorIfSaIfEEC1ERKS1_>
		std::sort(sortedCopy.begin(), sortedCopy.end());
 8106c74:	f107 030c 	add.w	r3, r7, #12
 8106c78:	4618      	mov	r0, r3
 8106c7a:	f000 fa44 	bl	8107106 <_ZNSt6vectorIfSaIfEE5beginEv>
 8106c7e:	4604      	mov	r4, r0
 8106c80:	f107 030c 	add.w	r3, r7, #12
 8106c84:	4618      	mov	r0, r3
 8106c86:	f000 fa4e 	bl	8107126 <_ZNSt6vectorIfSaIfEE3endEv>
 8106c8a:	4603      	mov	r3, r0
 8106c8c:	4619      	mov	r1, r3
 8106c8e:	4620      	mov	r0, r4
 8106c90:	f000 fa5a 	bl	8107148 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>

		if(currMesSize % 2 == 0)
 8106c94:	69bb      	ldr	r3, [r7, #24]
 8106c96:	f003 0301 	and.w	r3, r3, #1
 8106c9a:	2b00      	cmp	r3, #0
 8106c9c:	d128      	bne.n	8106cf0 <_ZN15TemperatureTask9getMedianEv+0xac>
		{
			median = static_cast<short int>(std::round((sortedCopy[currMesSize / 2 - 1] + sortedCopy[currMesSize / 2]) / 2));
 8106c9e:	69bb      	ldr	r3, [r7, #24]
 8106ca0:	085b      	lsrs	r3, r3, #1
 8106ca2:	1e5a      	subs	r2, r3, #1
 8106ca4:	f107 030c 	add.w	r3, r7, #12
 8106ca8:	4611      	mov	r1, r2
 8106caa:	4618      	mov	r0, r3
 8106cac:	f000 fa5c 	bl	8107168 <_ZNSt6vectorIfSaIfEEixEj>
 8106cb0:	4603      	mov	r3, r0
 8106cb2:	ed93 8a00 	vldr	s16, [r3]
 8106cb6:	69bb      	ldr	r3, [r7, #24]
 8106cb8:	085a      	lsrs	r2, r3, #1
 8106cba:	f107 030c 	add.w	r3, r7, #12
 8106cbe:	4611      	mov	r1, r2
 8106cc0:	4618      	mov	r0, r3
 8106cc2:	f000 fa51 	bl	8107168 <_ZNSt6vectorIfSaIfEEixEj>
 8106cc6:	4603      	mov	r3, r0
 8106cc8:	edd3 7a00 	vldr	s15, [r3]
 8106ccc:	ee78 7a27 	vadd.f32	s15, s16, s15
 8106cd0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8106cd4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8106cd8:	eeb0 0a47 	vmov.f32	s0, s14
 8106cdc:	f7ff feff 	bl	8106ade <_ZSt5roundf>
 8106ce0:	eef0 7a40 	vmov.f32	s15, s0
 8106ce4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8106ce8:	ee17 3a90 	vmov	r3, s15
 8106cec:	83fb      	strh	r3, [r7, #30]
 8106cee:	e015      	b.n	8106d1c <_ZN15TemperatureTask9getMedianEv+0xd8>
		}
		else
		{
			median = static_cast<short int>(std::round(sortedCopy[currMesSize / 2]));
 8106cf0:	69bb      	ldr	r3, [r7, #24]
 8106cf2:	085a      	lsrs	r2, r3, #1
 8106cf4:	f107 030c 	add.w	r3, r7, #12
 8106cf8:	4611      	mov	r1, r2
 8106cfa:	4618      	mov	r0, r3
 8106cfc:	f000 fa34 	bl	8107168 <_ZNSt6vectorIfSaIfEEixEj>
 8106d00:	4603      	mov	r3, r0
 8106d02:	edd3 7a00 	vldr	s15, [r3]
 8106d06:	eeb0 0a67 	vmov.f32	s0, s15
 8106d0a:	f7ff fee8 	bl	8106ade <_ZSt5roundf>
 8106d0e:	eef0 7a40 	vmov.f32	s15, s0
 8106d12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8106d16:	ee17 3a90 	vmov	r3, s15
 8106d1a:	83fb      	strh	r3, [r7, #30]
		}
	}
 8106d1c:	f107 030c 	add.w	r3, r7, #12
 8106d20:	4618      	mov	r0, r3
 8106d22:	f000 f8bd 	bl	8106ea0 <_ZNSt6vectorIfSaIfEED1Ev>
	return median;
 8106d26:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8106d2a:	4618      	mov	r0, r3
 8106d2c:	3724      	adds	r7, #36	@ 0x24
 8106d2e:	46bd      	mov	sp, r7
 8106d30:	ecbd 8b02 	vpop	{d8}
 8106d34:	bd90      	pop	{r4, r7, pc}
	...

08106d38 <_ZN15TemperatureTask13doMeasurementEv>:

uint32_t TemperatureTask::doMeasurement()
{
 8106d38:	b5b0      	push	{r4, r5, r7, lr}
 8106d3a:	b090      	sub	sp, #64	@ 0x40
 8106d3c:	af04      	add	r7, sp, #16
 8106d3e:	6078      	str	r0, [r7, #4]
	uint8_t data[2];

    if (HAL_I2C_Mem_Read(&hi2c4, MCP9808_I2C_ADDRESS, MCP9808_TEMP_REG, I2C_MEMADD_SIZE_8BIT, data, 2, 1000u) != HAL_OK)
 8106d40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8106d44:	9302      	str	r3, [sp, #8]
 8106d46:	2302      	movs	r3, #2
 8106d48:	9301      	str	r3, [sp, #4]
 8106d4a:	f107 030c 	add.w	r3, r7, #12
 8106d4e:	9300      	str	r3, [sp, #0]
 8106d50:	2301      	movs	r3, #1
 8106d52:	2205      	movs	r2, #5
 8106d54:	2130      	movs	r1, #48	@ 0x30
 8106d56:	4851      	ldr	r0, [pc, #324]	@ (8106e9c <_ZN15TemperatureTask13doMeasurementEv+0x164>)
 8106d58:	f004 fccc 	bl	810b6f4 <HAL_I2C_Mem_Read>
 8106d5c:	4603      	mov	r3, r0
 8106d5e:	2b00      	cmp	r3, #0
 8106d60:	bf14      	ite	ne
 8106d62:	2301      	movne	r3, #1
 8106d64:	2300      	moveq	r3, #0
 8106d66:	b2db      	uxtb	r3, r3
 8106d68:	2b00      	cmp	r3, #0
 8106d6a:	d00b      	beq.n	8106d84 <_ZN15TemperatureTask13doMeasurementEv+0x4c>
    {
    	uint32_t err = HAL_I2C_GetError(&hi2c4);
 8106d6c:	484b      	ldr	r0, [pc, #300]	@ (8106e9c <_ZN15TemperatureTask13doMeasurementEv+0x164>)
 8106d6e:	f004 fddb 	bl	810b928 <HAL_I2C_GetError>
 8106d72:	61b8      	str	r0, [r7, #24]
        // Error handling - restart I2C4 interface
    	HAL_I2C_DeInit(&hi2c4);
 8106d74:	4849      	ldr	r0, [pc, #292]	@ (8106e9c <_ZN15TemperatureTask13doMeasurementEv+0x164>)
 8106d76:	f004 fc8e 	bl	810b696 <HAL_I2C_DeInit>
    	HAL_I2C_Init(&hi2c4);
 8106d7a:	4848      	ldr	r0, [pc, #288]	@ (8106e9c <_ZN15TemperatureTask13doMeasurementEv+0x164>)
 8106d7c:	f004 fbf0 	bl	810b560 <HAL_I2C_Init>
    	//do not block other tasks, try again later.
    	return err;
 8106d80:	69bb      	ldr	r3, [r7, #24]
 8106d82:	e086      	b.n	8106e92 <_ZN15TemperatureTask13doMeasurementEv+0x15a>
    }

	uint16_t dataLong;
	float tmpVal = 0;
 8106d84:	f04f 0300 	mov.w	r3, #0
 8106d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float tmpValDec;

	dataLong = ((data[0] << 8u) | data[1]);
 8106d8a:	7b3b      	ldrb	r3, [r7, #12]
 8106d8c:	021b      	lsls	r3, r3, #8
 8106d8e:	b21a      	sxth	r2, r3
 8106d90:	7b7b      	ldrb	r3, [r7, #13]
 8106d92:	b21b      	sxth	r3, r3
 8106d94:	4313      	orrs	r3, r2
 8106d96:	b21b      	sxth	r3, r3
 8106d98:	847b      	strh	r3, [r7, #34]	@ 0x22
	/* Extract the integer part from the fixed point value */
	tmpVal = ((dataLong & 0x0FFF) >> 4);
 8106d9a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8106d9c:	091b      	lsrs	r3, r3, #4
 8106d9e:	b29b      	uxth	r3, r3
 8106da0:	b2db      	uxtb	r3, r3
 8106da2:	ee07 3a90 	vmov	s15, r3
 8106da6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8106daa:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	/* Extract decimal part */
	tmpValDec = 0.0625;
 8106dae:	f04f 5376 	mov.w	r3, #1031798784	@ 0x3d800000
 8106db2:	62bb      	str	r3, [r7, #40]	@ 0x28
	for (int i=0; i < 4; i++)
 8106db4:	2300      	movs	r3, #0
 8106db6:	627b      	str	r3, [r7, #36]	@ 0x24
 8106db8:	e01c      	b.n	8106df4 <_ZN15TemperatureTask13doMeasurementEv+0xbc>
	{
		tmpVal += ((dataLong >> i) & 0x0001) * tmpValDec;
 8106dba:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8106dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106dbe:	fa42 f303 	asr.w	r3, r2, r3
 8106dc2:	f003 0301 	and.w	r3, r3, #1
 8106dc6:	ee07 3a90 	vmov	s15, r3
 8106dca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8106dce:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8106dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106dd6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8106dda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8106dde:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		tmpValDec *= 2u;
 8106de2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8106de6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8106dea:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	for (int i=0; i < 4; i++)
 8106dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106df0:	3301      	adds	r3, #1
 8106df2:	627b      	str	r3, [r7, #36]	@ 0x24
 8106df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106df6:	2b03      	cmp	r3, #3
 8106df8:	dddf      	ble.n	8106dba <_ZN15TemperatureTask13doMeasurementEv+0x82>
	}

	short int measurement = static_cast<short int>(tmpVal);
 8106dfa:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8106dfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8106e02:	ee17 3a90 	vmov	r3, s15
 8106e06:	843b      	strh	r3, [r7, #32]

	size_t currMesSize = measurements.size();
 8106e08:	687b      	ldr	r3, [r7, #4]
 8106e0a:	4618      	mov	r0, r3
 8106e0c:	f000 f92e 	bl	810706c <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8106e10:	61f8      	str	r0, [r7, #28]

	if(currMesSize < MEASUREMENTS_COUNT)
 8106e12:	69fb      	ldr	r3, [r7, #28]
 8106e14:	2b05      	cmp	r3, #5
 8106e16:	d80f      	bhi.n	8106e38 <_ZN15TemperatureTask13doMeasurementEv+0x100>
	{
		measurements.push_back(measurement);
 8106e18:	687b      	ldr	r3, [r7, #4]
 8106e1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8106e1e:	ee07 2a90 	vmov	s15, r2
 8106e22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8106e26:	edc7 7a04 	vstr	s15, [r7, #16]
 8106e2a:	f107 0210 	add.w	r2, r7, #16
 8106e2e:	4611      	mov	r1, r2
 8106e30:	4618      	mov	r0, r3
 8106e32:	f000 f9a9 	bl	8107188 <_ZNSt6vectorIfSaIfEE9push_backEOf>
 8106e36:	e02b      	b.n	8106e90 <_ZN15TemperatureTask13doMeasurementEv+0x158>
	}
	else
	{
		std::rotate(measurements.begin(), measurements.begin() + 1, measurements.end());
 8106e38:	687b      	ldr	r3, [r7, #4]
 8106e3a:	4618      	mov	r0, r3
 8106e3c:	f000 f963 	bl	8107106 <_ZNSt6vectorIfSaIfEE5beginEv>
 8106e40:	4604      	mov	r4, r0
 8106e42:	687b      	ldr	r3, [r7, #4]
 8106e44:	4618      	mov	r0, r3
 8106e46:	f000 f95e 	bl	8107106 <_ZNSt6vectorIfSaIfEE5beginEv>
 8106e4a:	4603      	mov	r3, r0
 8106e4c:	617b      	str	r3, [r7, #20]
 8106e4e:	f107 0314 	add.w	r3, r7, #20
 8106e52:	2101      	movs	r1, #1
 8106e54:	4618      	mov	r0, r3
 8106e56:	f000 f9a8 	bl	81071aa <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8106e5a:	4605      	mov	r5, r0
 8106e5c:	687b      	ldr	r3, [r7, #4]
 8106e5e:	4618      	mov	r0, r3
 8106e60:	f000 f961 	bl	8107126 <_ZNSt6vectorIfSaIfEE3endEv>
 8106e64:	4603      	mov	r3, r0
 8106e66:	461a      	mov	r2, r3
 8106e68:	4629      	mov	r1, r5
 8106e6a:	4620      	mov	r0, r4
 8106e6c:	f000 f9b5 	bl	81071da <_ZNSt3_V26rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_>
		measurements[currMesSize - 1] = measurement;
 8106e70:	687a      	ldr	r2, [r7, #4]
 8106e72:	69fb      	ldr	r3, [r7, #28]
 8106e74:	3b01      	subs	r3, #1
 8106e76:	4619      	mov	r1, r3
 8106e78:	4610      	mov	r0, r2
 8106e7a:	f000 f975 	bl	8107168 <_ZNSt6vectorIfSaIfEEixEj>
 8106e7e:	4603      	mov	r3, r0
 8106e80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8106e84:	ee07 2a90 	vmov	s15, r2
 8106e88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8106e8c:	edc3 7a00 	vstr	s15, [r3]
	}
	return HAL_I2C_ERROR_NONE;
 8106e90:	2300      	movs	r3, #0
}
 8106e92:	4618      	mov	r0, r3
 8106e94:	3730      	adds	r7, #48	@ 0x30
 8106e96:	46bd      	mov	sp, r7
 8106e98:	bdb0      	pop	{r4, r5, r7, pc}
 8106e9a:	bf00      	nop
 8106e9c:	100000b4 	.word	0x100000b4

08106ea0 <_ZNSt6vectorIfSaIfEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8106ea0:	b5b0      	push	{r4, r5, r7, lr}
 8106ea2:	b082      	sub	sp, #8
 8106ea4:	af00      	add	r7, sp, #0
 8106ea6:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8106ea8:	687b      	ldr	r3, [r7, #4]
 8106eaa:	681c      	ldr	r4, [r3, #0]
 8106eac:	687b      	ldr	r3, [r7, #4]
 8106eae:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8106eb0:	687b      	ldr	r3, [r7, #4]
 8106eb2:	4618      	mov	r0, r3
 8106eb4:	f000 f9a7 	bl	8107206 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8106eb8:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8106eba:	461a      	mov	r2, r3
 8106ebc:	4629      	mov	r1, r5
 8106ebe:	4620      	mov	r0, r4
 8106ec0:	f000 f9ac 	bl	810721c <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
      }
 8106ec4:	687b      	ldr	r3, [r7, #4]
 8106ec6:	4618      	mov	r0, r3
 8106ec8:	f000 f821 	bl	8106f0e <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8106ecc:	687b      	ldr	r3, [r7, #4]
 8106ece:	4618      	mov	r0, r3
 8106ed0:	3708      	adds	r7, #8
 8106ed2:	46bd      	mov	sp, r7
 8106ed4:	bdb0      	pop	{r4, r5, r7, pc}

08106ed6 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8106ed6:	b580      	push	{r7, lr}
 8106ed8:	b082      	sub	sp, #8
 8106eda:	af00      	add	r7, sp, #0
 8106edc:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8106ede:	6878      	ldr	r0, [r7, #4]
 8106ee0:	f000 f9aa 	bl	8107238 <_ZNSaIfEC1Ev>
 8106ee4:	687b      	ldr	r3, [r7, #4]
 8106ee6:	4618      	mov	r0, r3
 8106ee8:	f000 f9b2 	bl	8107250 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 8106eec:	687b      	ldr	r3, [r7, #4]
 8106eee:	4618      	mov	r0, r3
 8106ef0:	3708      	adds	r7, #8
 8106ef2:	46bd      	mov	sp, r7
 8106ef4:	bd80      	pop	{r7, pc}

08106ef6 <_ZNSaIfED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8106ef6:	b580      	push	{r7, lr}
 8106ef8:	b082      	sub	sp, #8
 8106efa:	af00      	add	r7, sp, #0
 8106efc:	6078      	str	r0, [r7, #4]
 8106efe:	6878      	ldr	r0, [r7, #4]
 8106f00:	f000 f9ba 	bl	8107278 <_ZNSt15__new_allocatorIfED1Ev>
 8106f04:	687b      	ldr	r3, [r7, #4]
 8106f06:	4618      	mov	r0, r3
 8106f08:	3708      	adds	r7, #8
 8106f0a:	46bd      	mov	sp, r7
 8106f0c:	bd80      	pop	{r7, pc}

08106f0e <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8106f0e:	b580      	push	{r7, lr}
 8106f10:	b082      	sub	sp, #8
 8106f12:	af00      	add	r7, sp, #0
 8106f14:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8106f16:	687b      	ldr	r3, [r7, #4]
 8106f18:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8106f1a:	687b      	ldr	r3, [r7, #4]
 8106f1c:	689a      	ldr	r2, [r3, #8]
 8106f1e:	687b      	ldr	r3, [r7, #4]
 8106f20:	681b      	ldr	r3, [r3, #0]
 8106f22:	1ad3      	subs	r3, r2, r3
 8106f24:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8106f26:	461a      	mov	r2, r3
 8106f28:	6878      	ldr	r0, [r7, #4]
 8106f2a:	f000 f9b0 	bl	810728e <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      }
 8106f2e:	687b      	ldr	r3, [r7, #4]
 8106f30:	4618      	mov	r0, r3
 8106f32:	f7ff fe03 	bl	8106b3c <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
 8106f36:	687b      	ldr	r3, [r7, #4]
 8106f38:	4618      	mov	r0, r3
 8106f3a:	3708      	adds	r7, #8
 8106f3c:	46bd      	mov	sp, r7
 8106f3e:	bd80      	pop	{r7, pc}

08106f40 <_ZNSt6vectorIfSaIfEE15_S_use_relocateEv>:
      _S_use_relocate()
 8106f40:	b580      	push	{r7, lr}
 8106f42:	b082      	sub	sp, #8
 8106f44:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8106f46:	4618      	mov	r0, r3
 8106f48:	f000 f805 	bl	8106f56 <_ZNSt6vectorIfSaIfEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8106f4c:	4603      	mov	r3, r0
      }
 8106f4e:	4618      	mov	r0, r3
 8106f50:	3708      	adds	r7, #8
 8106f52:	46bd      	mov	sp, r7
 8106f54:	bd80      	pop	{r7, pc}

08106f56 <_ZNSt6vectorIfSaIfEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8106f56:	b480      	push	{r7}
 8106f58:	b083      	sub	sp, #12
 8106f5a:	af00      	add	r7, sp, #0
 8106f5c:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8106f5e:	2301      	movs	r3, #1
      }
 8106f60:	4618      	mov	r0, r3
 8106f62:	370c      	adds	r7, #12
 8106f64:	46bd      	mov	sp, r7
 8106f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f6a:	4770      	bx	lr

08106f6c <_ZNSt6vectorIfSaIfEE7reserveEj>:
    vector<_Tp, _Alloc>::
 8106f6c:	b5b0      	push	{r4, r5, r7, lr}
 8106f6e:	b084      	sub	sp, #16
 8106f70:	af00      	add	r7, sp, #0
 8106f72:	6078      	str	r0, [r7, #4]
 8106f74:	6039      	str	r1, [r7, #0]
      if (__n > this->max_size())
 8106f76:	6878      	ldr	r0, [r7, #4]
 8106f78:	f000 f99c 	bl	81072b4 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8106f7c:	4602      	mov	r2, r0
 8106f7e:	683b      	ldr	r3, [r7, #0]
 8106f80:	4293      	cmp	r3, r2
 8106f82:	bf8c      	ite	hi
 8106f84:	2301      	movhi	r3, #1
 8106f86:	2300      	movls	r3, #0
 8106f88:	b2db      	uxtb	r3, r3
 8106f8a:	2b00      	cmp	r3, #0
 8106f8c:	d002      	beq.n	8106f94 <_ZNSt6vectorIfSaIfEE7reserveEj+0x28>
	__throw_length_error(__N("vector::reserve"));
 8106f8e:	4836      	ldr	r0, [pc, #216]	@ (8107068 <_ZNSt6vectorIfSaIfEE7reserveEj+0xfc>)
 8106f90:	f01a fafd 	bl	812158e <_ZSt20__throw_length_errorPKc>
      if (this->capacity() < __n)
 8106f94:	6878      	ldr	r0, [r7, #4]
 8106f96:	f000 f99e 	bl	81072d6 <_ZNKSt6vectorIfSaIfEE8capacityEv>
 8106f9a:	4602      	mov	r2, r0
 8106f9c:	683b      	ldr	r3, [r7, #0]
 8106f9e:	4293      	cmp	r3, r2
 8106fa0:	bf8c      	ite	hi
 8106fa2:	2301      	movhi	r3, #1
 8106fa4:	2300      	movls	r3, #0
 8106fa6:	b2db      	uxtb	r3, r3
 8106fa8:	2b00      	cmp	r3, #0
 8106faa:	d059      	beq.n	8107060 <_ZNSt6vectorIfSaIfEE7reserveEj+0xf4>
	  const size_type __old_size = size();
 8106fac:	6878      	ldr	r0, [r7, #4]
 8106fae:	f000 f85d 	bl	810706c <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8106fb2:	60b8      	str	r0, [r7, #8]
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8106fb4:	f7ff ffc4 	bl	8106f40 <_ZNSt6vectorIfSaIfEE15_S_use_relocateEv>
 8106fb8:	4603      	mov	r3, r0
 8106fba:	2b00      	cmp	r3, #0
 8106fbc:	d014      	beq.n	8106fe8 <_ZNSt6vectorIfSaIfEE7reserveEj+0x7c>
	      __tmp = this->_M_allocate(__n);
 8106fbe:	687b      	ldr	r3, [r7, #4]
 8106fc0:	6839      	ldr	r1, [r7, #0]
 8106fc2:	4618      	mov	r0, r3
 8106fc4:	f000 f997 	bl	81072f6 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8106fc8:	60f8      	str	r0, [r7, #12]
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 8106fca:	687b      	ldr	r3, [r7, #4]
 8106fcc:	681c      	ldr	r4, [r3, #0]
 8106fce:	687b      	ldr	r3, [r7, #4]
 8106fd0:	685d      	ldr	r5, [r3, #4]
			  __tmp, _M_get_Tp_allocator());
 8106fd2:	687b      	ldr	r3, [r7, #4]
 8106fd4:	4618      	mov	r0, r3
 8106fd6:	f000 f916 	bl	8107206 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8106fda:	4603      	mov	r3, r0
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 8106fdc:	68fa      	ldr	r2, [r7, #12]
 8106fde:	4629      	mov	r1, r5
 8106fe0:	4620      	mov	r0, r4
 8106fe2:	f000 f99c 	bl	810731e <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
 8106fe6:	e01f      	b.n	8107028 <_ZNSt6vectorIfSaIfEE7reserveEj+0xbc>
	      __tmp = _M_allocate_and_copy(__n,
 8106fe8:	687b      	ldr	r3, [r7, #4]
 8106fea:	681b      	ldr	r3, [r3, #0]
 8106fec:	4618      	mov	r0, r3
 8106fee:	f000 f9aa 	bl	8107346 <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 8106ff2:	4604      	mov	r4, r0
 8106ff4:	687b      	ldr	r3, [r7, #4]
 8106ff6:	685b      	ldr	r3, [r3, #4]
 8106ff8:	4618      	mov	r0, r3
 8106ffa:	f000 f9a4 	bl	8107346 <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 8106ffe:	4603      	mov	r3, r0
 8107000:	4622      	mov	r2, r4
 8107002:	6839      	ldr	r1, [r7, #0]
 8107004:	6878      	ldr	r0, [r7, #4]
 8107006:	f000 f9ad 	bl	8107364 <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyISt13move_iteratorIPfEEES4_jT_S6_>
 810700a:	60f8      	str	r0, [r7, #12]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 810700c:	687b      	ldr	r3, [r7, #4]
 810700e:	681c      	ldr	r4, [r3, #0]
 8107010:	687b      	ldr	r3, [r7, #4]
 8107012:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 8107014:	687b      	ldr	r3, [r7, #4]
 8107016:	4618      	mov	r0, r3
 8107018:	f000 f8f5 	bl	8107206 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 810701c:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 810701e:	461a      	mov	r2, r3
 8107020:	4629      	mov	r1, r5
 8107022:	4620      	mov	r0, r4
 8107024:	f000 f8fa 	bl	810721c <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	  _M_deallocate(this->_M_impl._M_start,
 8107028:	6878      	ldr	r0, [r7, #4]
 810702a:	687b      	ldr	r3, [r7, #4]
 810702c:	6819      	ldr	r1, [r3, #0]
			this->_M_impl._M_end_of_storage
 810702e:	687b      	ldr	r3, [r7, #4]
 8107030:	689a      	ldr	r2, [r3, #8]
			- this->_M_impl._M_start);
 8107032:	687b      	ldr	r3, [r7, #4]
 8107034:	681b      	ldr	r3, [r3, #0]
 8107036:	1ad3      	subs	r3, r2, r3
 8107038:	109b      	asrs	r3, r3, #2
	  _M_deallocate(this->_M_impl._M_start,
 810703a:	461a      	mov	r2, r3
 810703c:	f000 f927 	bl	810728e <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
	  this->_M_impl._M_start = __tmp;
 8107040:	687b      	ldr	r3, [r7, #4]
 8107042:	68fa      	ldr	r2, [r7, #12]
 8107044:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_finish = __tmp + __old_size;
 8107046:	68bb      	ldr	r3, [r7, #8]
 8107048:	009b      	lsls	r3, r3, #2
 810704a:	68fa      	ldr	r2, [r7, #12]
 810704c:	441a      	add	r2, r3
 810704e:	687b      	ldr	r3, [r7, #4]
 8107050:	605a      	str	r2, [r3, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8107052:	687b      	ldr	r3, [r7, #4]
 8107054:	681a      	ldr	r2, [r3, #0]
 8107056:	683b      	ldr	r3, [r7, #0]
 8107058:	009b      	lsls	r3, r3, #2
 810705a:	441a      	add	r2, r3
 810705c:	687b      	ldr	r3, [r7, #4]
 810705e:	609a      	str	r2, [r3, #8]
    }
 8107060:	bf00      	nop
 8107062:	3710      	adds	r7, #16
 8107064:	46bd      	mov	sp, r7
 8107066:	bdb0      	pop	{r4, r5, r7, pc}
 8107068:	08123b20 	.word	0x08123b20

0810706c <_ZNKSt6vectorIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 810706c:	b480      	push	{r7}
 810706e:	b083      	sub	sp, #12
 8107070:	af00      	add	r7, sp, #0
 8107072:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8107074:	687b      	ldr	r3, [r7, #4]
 8107076:	685a      	ldr	r2, [r3, #4]
 8107078:	687b      	ldr	r3, [r7, #4]
 810707a:	681b      	ldr	r3, [r3, #0]
 810707c:	1ad3      	subs	r3, r2, r3
 810707e:	109b      	asrs	r3, r3, #2
 8107080:	4618      	mov	r0, r3
 8107082:	370c      	adds	r7, #12
 8107084:	46bd      	mov	sp, r7
 8107086:	f85d 7b04 	ldr.w	r7, [sp], #4
 810708a:	4770      	bx	lr

0810708c <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 810708c:	b5f0      	push	{r4, r5, r6, r7, lr}
 810708e:	b085      	sub	sp, #20
 8107090:	af00      	add	r7, sp, #0
 8107092:	6078      	str	r0, [r7, #4]
 8107094:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8107096:	687c      	ldr	r4, [r7, #4]
 8107098:	6838      	ldr	r0, [r7, #0]
 810709a:	f7ff ffe7 	bl	810706c <_ZNKSt6vectorIfSaIfEE4sizeEv>
 810709e:	4605      	mov	r5, r0
 81070a0:	683b      	ldr	r3, [r7, #0]
 81070a2:	4618      	mov	r0, r3
 81070a4:	f000 f97a 	bl	810739c <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 81070a8:	4602      	mov	r2, r0
 81070aa:	f107 030c 	add.w	r3, r7, #12
 81070ae:	4611      	mov	r1, r2
 81070b0:	4618      	mov	r0, r3
 81070b2:	f000 f97e 	bl	81073b2 <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>
 81070b6:	f107 030c 	add.w	r3, r7, #12
 81070ba:	461a      	mov	r2, r3
 81070bc:	4629      	mov	r1, r5
 81070be:	4620      	mov	r0, r4
 81070c0:	f000 f985 	bl	81073ce <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>
 81070c4:	f107 030c 	add.w	r3, r7, #12
 81070c8:	4618      	mov	r0, r3
 81070ca:	f7ff ff14 	bl	8106ef6 <_ZNSaIfED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 81070ce:	6838      	ldr	r0, [r7, #0]
 81070d0:	f000 f991 	bl	81073f6 <_ZNKSt6vectorIfSaIfEE5beginEv>
 81070d4:	4605      	mov	r5, r0
 81070d6:	6838      	ldr	r0, [r7, #0]
 81070d8:	f000 f99d 	bl	8107416 <_ZNKSt6vectorIfSaIfEE3endEv>
 81070dc:	4606      	mov	r6, r0
 81070de:	687b      	ldr	r3, [r7, #4]
 81070e0:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 81070e2:	687b      	ldr	r3, [r7, #4]
 81070e4:	4618      	mov	r0, r3
 81070e6:	f000 f88e 	bl	8107206 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 81070ea:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 81070ec:	4622      	mov	r2, r4
 81070ee:	4631      	mov	r1, r6
 81070f0:	4628      	mov	r0, r5
 81070f2:	f000 f9a1 	bl	8107438 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
 81070f6:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 81070f8:	687b      	ldr	r3, [r7, #4]
 81070fa:	605a      	str	r2, [r3, #4]
      }
 81070fc:	687b      	ldr	r3, [r7, #4]
 81070fe:	4618      	mov	r0, r3
 8107100:	3714      	adds	r7, #20
 8107102:	46bd      	mov	sp, r7
 8107104:	bdf0      	pop	{r4, r5, r6, r7, pc}

08107106 <_ZNSt6vectorIfSaIfEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8107106:	b580      	push	{r7, lr}
 8107108:	b084      	sub	sp, #16
 810710a:	af00      	add	r7, sp, #0
 810710c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 810710e:	687a      	ldr	r2, [r7, #4]
 8107110:	f107 030c 	add.w	r3, r7, #12
 8107114:	4611      	mov	r1, r2
 8107116:	4618      	mov	r0, r3
 8107118:	f000 f99f 	bl	810745a <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 810711c:	68fb      	ldr	r3, [r7, #12]
 810711e:	4618      	mov	r0, r3
 8107120:	3710      	adds	r7, #16
 8107122:	46bd      	mov	sp, r7
 8107124:	bd80      	pop	{r7, pc}

08107126 <_ZNSt6vectorIfSaIfEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8107126:	b580      	push	{r7, lr}
 8107128:	b084      	sub	sp, #16
 810712a:	af00      	add	r7, sp, #0
 810712c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 810712e:	687b      	ldr	r3, [r7, #4]
 8107130:	1d1a      	adds	r2, r3, #4
 8107132:	f107 030c 	add.w	r3, r7, #12
 8107136:	4611      	mov	r1, r2
 8107138:	4618      	mov	r0, r3
 810713a:	f000 f98e 	bl	810745a <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 810713e:	68fb      	ldr	r3, [r7, #12]
 8107140:	4618      	mov	r0, r3
 8107142:	3710      	adds	r7, #16
 8107144:	46bd      	mov	sp, r7
 8107146:	bd80      	pop	{r7, pc}

08107148 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>:
   *  @p stable_sort() if this is needed.
  */
  template<typename _RandomAccessIterator>
    _GLIBCXX20_CONSTEXPR
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
 8107148:	b590      	push	{r4, r7, lr}
 810714a:	b083      	sub	sp, #12
 810714c:	af00      	add	r7, sp, #0
 810714e:	6078      	str	r0, [r7, #4]
 8107150:	6039      	str	r1, [r7, #0]
      __glibcxx_function_requires(_LessThanComparableConcept<
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive(__first, __last);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
 8107152:	f7ff fc96 	bl	8106a82 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
 8107156:	4622      	mov	r2, r4
 8107158:	6839      	ldr	r1, [r7, #0]
 810715a:	6878      	ldr	r0, [r7, #4]
 810715c:	f000 f98d 	bl	810747a <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 8107160:	bf00      	nop
 8107162:	370c      	adds	r7, #12
 8107164:	46bd      	mov	sp, r7
 8107166:	bd90      	pop	{r4, r7, pc}

08107168 <_ZNSt6vectorIfSaIfEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8107168:	b480      	push	{r7}
 810716a:	b083      	sub	sp, #12
 810716c:	af00      	add	r7, sp, #0
 810716e:	6078      	str	r0, [r7, #4]
 8107170:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8107172:	687b      	ldr	r3, [r7, #4]
 8107174:	681a      	ldr	r2, [r3, #0]
 8107176:	683b      	ldr	r3, [r7, #0]
 8107178:	009b      	lsls	r3, r3, #2
 810717a:	4413      	add	r3, r2
      }
 810717c:	4618      	mov	r0, r3
 810717e:	370c      	adds	r7, #12
 8107180:	46bd      	mov	sp, r7
 8107182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107186:	4770      	bx	lr

08107188 <_ZNSt6vectorIfSaIfEE9push_backEOf>:
      push_back(value_type&& __x)
 8107188:	b580      	push	{r7, lr}
 810718a:	b082      	sub	sp, #8
 810718c:	af00      	add	r7, sp, #0
 810718e:	6078      	str	r0, [r7, #4]
 8107190:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8107192:	6838      	ldr	r0, [r7, #0]
 8107194:	f000 f99e 	bl	81074d4 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8107198:	4603      	mov	r3, r0
 810719a:	4619      	mov	r1, r3
 810719c:	6878      	ldr	r0, [r7, #4]
 810719e:	f000 f9a4 	bl	81074ea <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_>
 81071a2:	bf00      	nop
 81071a4:	3708      	adds	r7, #8
 81071a6:	46bd      	mov	sp, r7
 81071a8:	bd80      	pop	{r7, pc}

081071aa <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 81071aa:	b580      	push	{r7, lr}
 81071ac:	b084      	sub	sp, #16
 81071ae:	af00      	add	r7, sp, #0
 81071b0:	6078      	str	r0, [r7, #4]
 81071b2:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 81071b4:	687b      	ldr	r3, [r7, #4]
 81071b6:	681a      	ldr	r2, [r3, #0]
 81071b8:	683b      	ldr	r3, [r7, #0]
 81071ba:	009b      	lsls	r3, r3, #2
 81071bc:	4413      	add	r3, r2
 81071be:	60fb      	str	r3, [r7, #12]
 81071c0:	f107 020c 	add.w	r2, r7, #12
 81071c4:	f107 0308 	add.w	r3, r7, #8
 81071c8:	4611      	mov	r1, r2
 81071ca:	4618      	mov	r0, r3
 81071cc:	f000 f945 	bl	810745a <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 81071d0:	68bb      	ldr	r3, [r7, #8]
 81071d2:	4618      	mov	r0, r3
 81071d4:	3710      	adds	r7, #16
 81071d6:	46bd      	mov	sp, r7
 81071d8:	bd80      	pop	{r7, pc}

081071da <_ZNSt3_V26rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_>:
    rotate(_ForwardIterator __first, _ForwardIterator __middle,
 81071da:	b590      	push	{r4, r7, lr}
 81071dc:	b085      	sub	sp, #20
 81071de:	af00      	add	r7, sp, #0
 81071e0:	60f8      	str	r0, [r7, #12]
 81071e2:	60b9      	str	r1, [r7, #8]
 81071e4:	607a      	str	r2, [r7, #4]
			   std::__iterator_category(__first));
 81071e6:	f107 030c 	add.w	r3, r7, #12
 81071ea:	4618      	mov	r0, r3
 81071ec:	f000 f9ab 	bl	8107546 <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>
      return std::__rotate(__first, __middle, __last,
 81071f0:	4623      	mov	r3, r4
 81071f2:	687a      	ldr	r2, [r7, #4]
 81071f4:	68b9      	ldr	r1, [r7, #8]
 81071f6:	68f8      	ldr	r0, [r7, #12]
 81071f8:	f000 f9b0 	bl	810755c <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag>
 81071fc:	4603      	mov	r3, r0
    }
 81071fe:	4618      	mov	r0, r3
 8107200:	3714      	adds	r7, #20
 8107202:	46bd      	mov	sp, r7
 8107204:	bd90      	pop	{r4, r7, pc}

08107206 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8107206:	b480      	push	{r7}
 8107208:	b083      	sub	sp, #12
 810720a:	af00      	add	r7, sp, #0
 810720c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 810720e:	687b      	ldr	r3, [r7, #4]
 8107210:	4618      	mov	r0, r3
 8107212:	370c      	adds	r7, #12
 8107214:	46bd      	mov	sp, r7
 8107216:	f85d 7b04 	ldr.w	r7, [sp], #4
 810721a:	4770      	bx	lr

0810721c <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 810721c:	b580      	push	{r7, lr}
 810721e:	b084      	sub	sp, #16
 8107220:	af00      	add	r7, sp, #0
 8107222:	60f8      	str	r0, [r7, #12]
 8107224:	60b9      	str	r1, [r7, #8]
 8107226:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8107228:	68b9      	ldr	r1, [r7, #8]
 810722a:	68f8      	ldr	r0, [r7, #12]
 810722c:	f000 fb07 	bl	810783e <_ZSt8_DestroyIPfEvT_S1_>
    }
 8107230:	bf00      	nop
 8107232:	3710      	adds	r7, #16
 8107234:	46bd      	mov	sp, r7
 8107236:	bd80      	pop	{r7, pc}

08107238 <_ZNSaIfEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8107238:	b580      	push	{r7, lr}
 810723a:	b082      	sub	sp, #8
 810723c:	af00      	add	r7, sp, #0
 810723e:	6078      	str	r0, [r7, #4]
 8107240:	6878      	ldr	r0, [r7, #4]
 8107242:	f000 fb09 	bl	8107858 <_ZNSt15__new_allocatorIfEC1Ev>
 8107246:	687b      	ldr	r3, [r7, #4]
 8107248:	4618      	mov	r0, r3
 810724a:	3708      	adds	r7, #8
 810724c:	46bd      	mov	sp, r7
 810724e:	bd80      	pop	{r7, pc}

08107250 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8107250:	b480      	push	{r7}
 8107252:	b083      	sub	sp, #12
 8107254:	af00      	add	r7, sp, #0
 8107256:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8107258:	687b      	ldr	r3, [r7, #4]
 810725a:	2200      	movs	r2, #0
 810725c:	601a      	str	r2, [r3, #0]
 810725e:	687b      	ldr	r3, [r7, #4]
 8107260:	2200      	movs	r2, #0
 8107262:	605a      	str	r2, [r3, #4]
 8107264:	687b      	ldr	r3, [r7, #4]
 8107266:	2200      	movs	r2, #0
 8107268:	609a      	str	r2, [r3, #8]
	{ }
 810726a:	687b      	ldr	r3, [r7, #4]
 810726c:	4618      	mov	r0, r3
 810726e:	370c      	adds	r7, #12
 8107270:	46bd      	mov	sp, r7
 8107272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107276:	4770      	bx	lr

08107278 <_ZNSt15__new_allocatorIfED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8107278:	b480      	push	{r7}
 810727a:	b083      	sub	sp, #12
 810727c:	af00      	add	r7, sp, #0
 810727e:	6078      	str	r0, [r7, #4]
 8107280:	687b      	ldr	r3, [r7, #4]
 8107282:	4618      	mov	r0, r3
 8107284:	370c      	adds	r7, #12
 8107286:	46bd      	mov	sp, r7
 8107288:	f85d 7b04 	ldr.w	r7, [sp], #4
 810728c:	4770      	bx	lr

0810728e <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 810728e:	b580      	push	{r7, lr}
 8107290:	b084      	sub	sp, #16
 8107292:	af00      	add	r7, sp, #0
 8107294:	60f8      	str	r0, [r7, #12]
 8107296:	60b9      	str	r1, [r7, #8]
 8107298:	607a      	str	r2, [r7, #4]
	if (__p)
 810729a:	68bb      	ldr	r3, [r7, #8]
 810729c:	2b00      	cmp	r3, #0
 810729e:	d005      	beq.n	81072ac <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 81072a0:	68fb      	ldr	r3, [r7, #12]
 81072a2:	687a      	ldr	r2, [r7, #4]
 81072a4:	68b9      	ldr	r1, [r7, #8]
 81072a6:	4618      	mov	r0, r3
 81072a8:	f000 fae1 	bl	810786e <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 81072ac:	bf00      	nop
 81072ae:	3710      	adds	r7, #16
 81072b0:	46bd      	mov	sp, r7
 81072b2:	bd80      	pop	{r7, pc}

081072b4 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 81072b4:	b580      	push	{r7, lr}
 81072b6:	b082      	sub	sp, #8
 81072b8:	af00      	add	r7, sp, #0
 81072ba:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 81072bc:	687b      	ldr	r3, [r7, #4]
 81072be:	4618      	mov	r0, r3
 81072c0:	f000 f86c 	bl	810739c <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 81072c4:	4603      	mov	r3, r0
 81072c6:	4618      	mov	r0, r3
 81072c8:	f000 fae0 	bl	810788c <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>
 81072cc:	4603      	mov	r3, r0
 81072ce:	4618      	mov	r0, r3
 81072d0:	3708      	adds	r7, #8
 81072d2:	46bd      	mov	sp, r7
 81072d4:	bd80      	pop	{r7, pc}

081072d6 <_ZNKSt6vectorIfSaIfEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 81072d6:	b480      	push	{r7}
 81072d8:	b083      	sub	sp, #12
 81072da:	af00      	add	r7, sp, #0
 81072dc:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 81072de:	687b      	ldr	r3, [r7, #4]
 81072e0:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 81072e2:	687b      	ldr	r3, [r7, #4]
 81072e4:	681b      	ldr	r3, [r3, #0]
 81072e6:	1ad3      	subs	r3, r2, r3
 81072e8:	109b      	asrs	r3, r3, #2
 81072ea:	4618      	mov	r0, r3
 81072ec:	370c      	adds	r7, #12
 81072ee:	46bd      	mov	sp, r7
 81072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81072f4:	4770      	bx	lr

081072f6 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 81072f6:	b580      	push	{r7, lr}
 81072f8:	b082      	sub	sp, #8
 81072fa:	af00      	add	r7, sp, #0
 81072fc:	6078      	str	r0, [r7, #4]
 81072fe:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8107300:	683b      	ldr	r3, [r7, #0]
 8107302:	2b00      	cmp	r3, #0
 8107304:	d006      	beq.n	8107314 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x1e>
 8107306:	687b      	ldr	r3, [r7, #4]
 8107308:	6839      	ldr	r1, [r7, #0]
 810730a:	4618      	mov	r0, r3
 810730c:	f000 fad8 	bl	81078c0 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 8107310:	4603      	mov	r3, r0
 8107312:	e000      	b.n	8107316 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x20>
 8107314:	2300      	movs	r3, #0
      }
 8107316:	4618      	mov	r0, r3
 8107318:	3708      	adds	r7, #8
 810731a:	46bd      	mov	sp, r7
 810731c:	bd80      	pop	{r7, pc}

0810731e <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 810731e:	b590      	push	{r4, r7, lr}
 8107320:	b087      	sub	sp, #28
 8107322:	af02      	add	r7, sp, #8
 8107324:	60f8      	str	r0, [r7, #12]
 8107326:	60b9      	str	r1, [r7, #8]
 8107328:	607a      	str	r2, [r7, #4]
 810732a:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 810732c:	f88d 4000 	strb.w	r4, [sp]
 8107330:	683b      	ldr	r3, [r7, #0]
 8107332:	687a      	ldr	r2, [r7, #4]
 8107334:	68b9      	ldr	r1, [r7, #8]
 8107336:	68f8      	ldr	r0, [r7, #12]
 8107338:	f000 fad1 	bl	81078de <_ZNSt6vectorIfSaIfEE14_S_do_relocateEPfS2_S2_RS0_St17integral_constantIbLb1EE>
 810733c:	4603      	mov	r3, r0
      }
 810733e:	4618      	mov	r0, r3
 8107340:	3714      	adds	r7, #20
 8107342:	46bd      	mov	sp, r7
 8107344:	bd90      	pop	{r4, r7, pc}

08107346 <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8107346:	b580      	push	{r7, lr}
 8107348:	b084      	sub	sp, #16
 810734a:	af00      	add	r7, sp, #0
 810734c:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 810734e:	f107 030c 	add.w	r3, r7, #12
 8107352:	6879      	ldr	r1, [r7, #4]
 8107354:	4618      	mov	r0, r3
 8107356:	f000 fad4 	bl	8107902 <_ZNSt13move_iteratorIPfEC1ES0_>
 810735a:	68fb      	ldr	r3, [r7, #12]
 810735c:	4618      	mov	r0, r3
 810735e:	3710      	adds	r7, #16
 8107360:	46bd      	mov	sp, r7
 8107362:	bd80      	pop	{r7, pc}

08107364 <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyISt13move_iteratorIPfEEES4_jT_S6_>:
	_M_allocate_and_copy(size_type __n,
 8107364:	b580      	push	{r7, lr}
 8107366:	b086      	sub	sp, #24
 8107368:	af00      	add	r7, sp, #0
 810736a:	60f8      	str	r0, [r7, #12]
 810736c:	60b9      	str	r1, [r7, #8]
 810736e:	607a      	str	r2, [r7, #4]
 8107370:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 8107372:	68fb      	ldr	r3, [r7, #12]
 8107374:	68b9      	ldr	r1, [r7, #8]
 8107376:	4618      	mov	r0, r3
 8107378:	f7ff ffbd 	bl	81072f6 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 810737c:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 810737e:	68fb      	ldr	r3, [r7, #12]
 8107380:	4618      	mov	r0, r3
 8107382:	f7ff ff40 	bl	8107206 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8107386:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8107388:	697a      	ldr	r2, [r7, #20]
 810738a:	6839      	ldr	r1, [r7, #0]
 810738c:	6878      	ldr	r0, [r7, #4]
 810738e:	f000 faca 	bl	8107926 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_fET0_T_S4_S3_RSaIT1_E>
	      return __result;
 8107392:	697b      	ldr	r3, [r7, #20]
	}
 8107394:	4618      	mov	r0, r3
 8107396:	3718      	adds	r7, #24
 8107398:	46bd      	mov	sp, r7
 810739a:	bd80      	pop	{r7, pc}

0810739c <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 810739c:	b480      	push	{r7}
 810739e:	b083      	sub	sp, #12
 81073a0:	af00      	add	r7, sp, #0
 81073a2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 81073a4:	687b      	ldr	r3, [r7, #4]
 81073a6:	4618      	mov	r0, r3
 81073a8:	370c      	adds	r7, #12
 81073aa:	46bd      	mov	sp, r7
 81073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81073b0:	4770      	bx	lr

081073b2 <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 81073b2:	b580      	push	{r7, lr}
 81073b4:	b082      	sub	sp, #8
 81073b6:	af00      	add	r7, sp, #0
 81073b8:	6078      	str	r0, [r7, #4]
 81073ba:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 81073bc:	687b      	ldr	r3, [r7, #4]
 81073be:	6839      	ldr	r1, [r7, #0]
 81073c0:	4618      	mov	r0, r3
 81073c2:	f000 fac1 	bl	8107948 <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>
 81073c6:	6878      	ldr	r0, [r7, #4]
 81073c8:	3708      	adds	r7, #8
 81073ca:	46bd      	mov	sp, r7
 81073cc:	bd80      	pop	{r7, pc}

081073ce <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 81073ce:	b580      	push	{r7, lr}
 81073d0:	b084      	sub	sp, #16
 81073d2:	af00      	add	r7, sp, #0
 81073d4:	60f8      	str	r0, [r7, #12]
 81073d6:	60b9      	str	r1, [r7, #8]
 81073d8:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 81073da:	68fb      	ldr	r3, [r7, #12]
 81073dc:	6879      	ldr	r1, [r7, #4]
 81073de:	4618      	mov	r0, r3
 81073e0:	f000 facd 	bl	810797e <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 81073e4:	68b9      	ldr	r1, [r7, #8]
 81073e6:	68f8      	ldr	r0, [r7, #12]
 81073e8:	f000 fadb 	bl	81079a2 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
 81073ec:	68fb      	ldr	r3, [r7, #12]
 81073ee:	4618      	mov	r0, r3
 81073f0:	3710      	adds	r7, #16
 81073f2:	46bd      	mov	sp, r7
 81073f4:	bd80      	pop	{r7, pc}

081073f6 <_ZNKSt6vectorIfSaIfEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 81073f6:	b580      	push	{r7, lr}
 81073f8:	b084      	sub	sp, #16
 81073fa:	af00      	add	r7, sp, #0
 81073fc:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 81073fe:	687a      	ldr	r2, [r7, #4]
 8107400:	f107 030c 	add.w	r3, r7, #12
 8107404:	4611      	mov	r1, r2
 8107406:	4618      	mov	r0, r3
 8107408:	f000 fae6 	bl	81079d8 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 810740c:	68fb      	ldr	r3, [r7, #12]
 810740e:	4618      	mov	r0, r3
 8107410:	3710      	adds	r7, #16
 8107412:	46bd      	mov	sp, r7
 8107414:	bd80      	pop	{r7, pc}

08107416 <_ZNKSt6vectorIfSaIfEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8107416:	b580      	push	{r7, lr}
 8107418:	b084      	sub	sp, #16
 810741a:	af00      	add	r7, sp, #0
 810741c:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 810741e:	687b      	ldr	r3, [r7, #4]
 8107420:	1d1a      	adds	r2, r3, #4
 8107422:	f107 030c 	add.w	r3, r7, #12
 8107426:	4611      	mov	r1, r2
 8107428:	4618      	mov	r0, r3
 810742a:	f000 fad5 	bl	81079d8 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 810742e:	68fb      	ldr	r3, [r7, #12]
 8107430:	4618      	mov	r0, r3
 8107432:	3710      	adds	r7, #16
 8107434:	46bd      	mov	sp, r7
 8107436:	bd80      	pop	{r7, pc}

08107438 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8107438:	b580      	push	{r7, lr}
 810743a:	b084      	sub	sp, #16
 810743c:	af00      	add	r7, sp, #0
 810743e:	60f8      	str	r0, [r7, #12]
 8107440:	60b9      	str	r1, [r7, #8]
 8107442:	607a      	str	r2, [r7, #4]
 8107444:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 8107446:	687a      	ldr	r2, [r7, #4]
 8107448:	68b9      	ldr	r1, [r7, #8]
 810744a:	68f8      	ldr	r0, [r7, #12]
 810744c:	f000 fad4 	bl	81079f8 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 8107450:	4603      	mov	r3, r0
    }
 8107452:	4618      	mov	r0, r3
 8107454:	3710      	adds	r7, #16
 8107456:	46bd      	mov	sp, r7
 8107458:	bd80      	pop	{r7, pc}

0810745a <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 810745a:	b480      	push	{r7}
 810745c:	b083      	sub	sp, #12
 810745e:	af00      	add	r7, sp, #0
 8107460:	6078      	str	r0, [r7, #4]
 8107462:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8107464:	683b      	ldr	r3, [r7, #0]
 8107466:	681a      	ldr	r2, [r3, #0]
 8107468:	687b      	ldr	r3, [r7, #4]
 810746a:	601a      	str	r2, [r3, #0]
 810746c:	687b      	ldr	r3, [r7, #4]
 810746e:	4618      	mov	r0, r3
 8107470:	370c      	adds	r7, #12
 8107472:	46bd      	mov	sp, r7
 8107474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107478:	4770      	bx	lr

0810747a <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 810747a:	b5b0      	push	{r4, r5, r7, lr}
 810747c:	b084      	sub	sp, #16
 810747e:	af00      	add	r7, sp, #0
 8107480:	60f8      	str	r0, [r7, #12]
 8107482:	60b9      	str	r1, [r7, #8]
 8107484:	713a      	strb	r2, [r7, #4]
      if (__first != __last)
 8107486:	f107 0208 	add.w	r2, r7, #8
 810748a:	f107 030c 	add.w	r3, r7, #12
 810748e:	4611      	mov	r1, r2
 8107490:	4618      	mov	r0, r3
 8107492:	f000 fac5 	bl	8107a20 <_ZN9__gnu_cxxneIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8107496:	4603      	mov	r3, r0
 8107498:	2b00      	cmp	r3, #0
 810749a:	d017      	beq.n	81074cc <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x52>
				std::__lg(__last - __first) * 2,
 810749c:	f107 020c 	add.w	r2, r7, #12
 81074a0:	f107 0308 	add.w	r3, r7, #8
 81074a4:	4611      	mov	r1, r2
 81074a6:	4618      	mov	r0, r3
 81074a8:	f000 fad2 	bl	8107a50 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 81074ac:	4603      	mov	r3, r0
 81074ae:	4618      	mov	r0, r3
 81074b0:	f7ff fb06 	bl	8106ac0 <_ZSt4__lgi>
 81074b4:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 81074b6:	005a      	lsls	r2, r3, #1
 81074b8:	462b      	mov	r3, r5
 81074ba:	68b9      	ldr	r1, [r7, #8]
 81074bc:	68f8      	ldr	r0, [r7, #12]
 81074be:	f000 fadc 	bl	8107a7a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 81074c2:	4622      	mov	r2, r4
 81074c4:	68b9      	ldr	r1, [r7, #8]
 81074c6:	68f8      	ldr	r0, [r7, #12]
 81074c8:	f000 fb0e 	bl	8107ae8 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 81074cc:	bf00      	nop
 81074ce:	3710      	adds	r7, #16
 81074d0:	46bd      	mov	sp, r7
 81074d2:	bdb0      	pop	{r4, r5, r7, pc}

081074d4 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 81074d4:	b480      	push	{r7}
 81074d6:	b083      	sub	sp, #12
 81074d8:	af00      	add	r7, sp, #0
 81074da:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 81074dc:	687b      	ldr	r3, [r7, #4]
 81074de:	4618      	mov	r0, r3
 81074e0:	370c      	adds	r7, #12
 81074e2:	46bd      	mov	sp, r7
 81074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81074e8:	4770      	bx	lr

081074ea <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 81074ea:	b5b0      	push	{r4, r5, r7, lr}
 81074ec:	b082      	sub	sp, #8
 81074ee:	af00      	add	r7, sp, #0
 81074f0:	6078      	str	r0, [r7, #4]
 81074f2:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 81074f4:	687b      	ldr	r3, [r7, #4]
 81074f6:	685a      	ldr	r2, [r3, #4]
 81074f8:	687b      	ldr	r3, [r7, #4]
 81074fa:	689b      	ldr	r3, [r3, #8]
 81074fc:	429a      	cmp	r2, r3
 81074fe:	d011      	beq.n	8107524 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8107500:	687c      	ldr	r4, [r7, #4]
 8107502:	687b      	ldr	r3, [r7, #4]
 8107504:	685d      	ldr	r5, [r3, #4]
 8107506:	6838      	ldr	r0, [r7, #0]
 8107508:	f000 fb26 	bl	8107b58 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 810750c:	4603      	mov	r3, r0
 810750e:	461a      	mov	r2, r3
 8107510:	4629      	mov	r1, r5
 8107512:	4620      	mov	r0, r4
 8107514:	f000 fb2b 	bl	8107b6e <_ZNSt16allocator_traitsISaIfEE9constructIfJfEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8107518:	687b      	ldr	r3, [r7, #4]
 810751a:	685b      	ldr	r3, [r3, #4]
 810751c:	1d1a      	adds	r2, r3, #4
 810751e:	687b      	ldr	r3, [r7, #4]
 8107520:	605a      	str	r2, [r3, #4]
      }
 8107522:	e00c      	b.n	810753e <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8107524:	6878      	ldr	r0, [r7, #4]
 8107526:	f7ff fdfe 	bl	8107126 <_ZNSt6vectorIfSaIfEE3endEv>
 810752a:	4604      	mov	r4, r0
 810752c:	6838      	ldr	r0, [r7, #0]
 810752e:	f000 fb13 	bl	8107b58 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8107532:	4603      	mov	r3, r0
 8107534:	461a      	mov	r2, r3
 8107536:	4621      	mov	r1, r4
 8107538:	6878      	ldr	r0, [r7, #4]
 810753a:	f000 fb2b 	bl	8107b94 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>
      }
 810753e:	bf00      	nop
 8107540:	3708      	adds	r7, #8
 8107542:	46bd      	mov	sp, r7
 8107544:	bdb0      	pop	{r4, r5, r7, pc}

08107546 <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8107546:	b480      	push	{r7}
 8107548:	b083      	sub	sp, #12
 810754a:	af00      	add	r7, sp, #0
 810754c:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 810754e:	bf00      	nop
 8107550:	4618      	mov	r0, r3
 8107552:	370c      	adds	r7, #12
 8107554:	46bd      	mov	sp, r7
 8107556:	f85d 7b04 	ldr.w	r7, [sp], #4
 810755a:	4770      	bx	lr

0810755c <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag>:
    __rotate(_RandomAccessIterator __first,
 810755c:	b590      	push	{r4, r7, lr}
 810755e:	b095      	sub	sp, #84	@ 0x54
 8107560:	af00      	add	r7, sp, #0
 8107562:	60f8      	str	r0, [r7, #12]
 8107564:	60b9      	str	r1, [r7, #8]
 8107566:	607a      	str	r2, [r7, #4]
 8107568:	703b      	strb	r3, [r7, #0]
      if (__first == __middle)
 810756a:	f107 0208 	add.w	r2, r7, #8
 810756e:	f107 030c 	add.w	r3, r7, #12
 8107572:	4611      	mov	r1, r2
 8107574:	4618      	mov	r0, r3
 8107576:	f000 fbc9 	bl	8107d0c <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 810757a:	4603      	mov	r3, r0
 810757c:	2b00      	cmp	r3, #0
 810757e:	d001      	beq.n	8107584 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x28>
	return __last;
 8107580:	687b      	ldr	r3, [r7, #4]
 8107582:	e158      	b.n	8107836 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
      else if (__last == __middle)
 8107584:	f107 0208 	add.w	r2, r7, #8
 8107588:	1d3b      	adds	r3, r7, #4
 810758a:	4611      	mov	r1, r2
 810758c:	4618      	mov	r0, r3
 810758e:	f000 fbbd 	bl	8107d0c <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8107592:	4603      	mov	r3, r0
 8107594:	2b00      	cmp	r3, #0
 8107596:	d001      	beq.n	810759c <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x40>
	return __first;
 8107598:	68fb      	ldr	r3, [r7, #12]
 810759a:	e14c      	b.n	8107836 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
      _Distance __n = __last   - __first;
 810759c:	f107 020c 	add.w	r2, r7, #12
 81075a0:	1d3b      	adds	r3, r7, #4
 81075a2:	4611      	mov	r1, r2
 81075a4:	4618      	mov	r0, r3
 81075a6:	f000 fa53 	bl	8107a50 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 81075aa:	4603      	mov	r3, r0
 81075ac:	633b      	str	r3, [r7, #48]	@ 0x30
      _Distance __k = __middle - __first;
 81075ae:	f107 020c 	add.w	r2, r7, #12
 81075b2:	f107 0308 	add.w	r3, r7, #8
 81075b6:	4611      	mov	r1, r2
 81075b8:	4618      	mov	r0, r3
 81075ba:	f000 fa49 	bl	8107a50 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 81075be:	4603      	mov	r3, r0
 81075c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__k == __n - __k)
 81075c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81075c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81075c6:	1ad2      	subs	r2, r2, r3
 81075c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81075ca:	429a      	cmp	r2, r3
 81075cc:	d106      	bne.n	81075dc <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x80>
	  std::swap_ranges(__first, __middle, __middle);
 81075ce:	68ba      	ldr	r2, [r7, #8]
 81075d0:	68b9      	ldr	r1, [r7, #8]
 81075d2:	68f8      	ldr	r0, [r7, #12]
 81075d4:	f000 fbb2 	bl	8107d3c <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>
	  return __middle;
 81075d8:	68bb      	ldr	r3, [r7, #8]
 81075da:	e12c      	b.n	8107836 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
      _RandomAccessIterator __p = __first;
 81075dc:	68fb      	ldr	r3, [r7, #12]
 81075de:	62bb      	str	r3, [r7, #40]	@ 0x28
      _RandomAccessIterator __ret = __first + (__last - __middle);
 81075e0:	f107 0208 	add.w	r2, r7, #8
 81075e4:	1d3b      	adds	r3, r7, #4
 81075e6:	4611      	mov	r1, r2
 81075e8:	4618      	mov	r0, r3
 81075ea:	f000 fa31 	bl	8107a50 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 81075ee:	4602      	mov	r2, r0
 81075f0:	f107 030c 	add.w	r3, r7, #12
 81075f4:	4611      	mov	r1, r2
 81075f6:	4618      	mov	r0, r3
 81075f8:	f7ff fdd7 	bl	81071aa <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 81075fc:	4603      	mov	r3, r0
 81075fe:	627b      	str	r3, [r7, #36]	@ 0x24
	  if (__k < __n - __k)
 8107600:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8107602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107604:	1ad2      	subs	r2, r2, r3
 8107606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107608:	429a      	cmp	r2, r3
 810760a:	f340 8081 	ble.w	8107710 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x1b4>
	      if (__is_pod(_ValueType) && __k == 1)
 810760e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107610:	2b01      	cmp	r3, #1
 8107612:	d140      	bne.n	8107696 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x13a>
		  _ValueType __t = _GLIBCXX_MOVE(*__p);
 8107614:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8107618:	4618      	mov	r0, r3
 810761a:	f000 fbb3 	bl	8107d84 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810761e:	4603      	mov	r3, r0
 8107620:	4618      	mov	r0, r3
 8107622:	f7ff ff57 	bl	81074d4 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8107626:	4603      	mov	r3, r0
 8107628:	681b      	ldr	r3, [r3, #0]
 810762a:	61fb      	str	r3, [r7, #28]
		  _GLIBCXX_MOVE3(__p + 1, __p + __n, __p);
 810762c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8107630:	2101      	movs	r1, #1
 8107632:	4618      	mov	r0, r3
 8107634:	f7ff fdb9 	bl	81071aa <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8107638:	4604      	mov	r4, r0
 810763a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810763c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8107640:	4611      	mov	r1, r2
 8107642:	4618      	mov	r0, r3
 8107644:	f7ff fdb1 	bl	81071aa <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8107648:	4603      	mov	r3, r0
 810764a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810764c:	4619      	mov	r1, r3
 810764e:	4620      	mov	r0, r4
 8107650:	f000 fba4 	bl	8107d9c <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>
		  *(__p + __n - 1) = _GLIBCXX_MOVE(__t);
 8107654:	f107 031c 	add.w	r3, r7, #28
 8107658:	4618      	mov	r0, r3
 810765a:	f7ff ff3b 	bl	81074d4 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810765e:	4604      	mov	r4, r0
 8107660:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8107662:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8107666:	4611      	mov	r1, r2
 8107668:	4618      	mov	r0, r3
 810766a:	f7ff fd9e 	bl	81071aa <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810766e:	4603      	mov	r3, r0
 8107670:	63bb      	str	r3, [r7, #56]	@ 0x38
 8107672:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8107676:	2101      	movs	r1, #1
 8107678:	4618      	mov	r0, r3
 810767a:	f000 fba7 	bl	8107dcc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 810767e:	4603      	mov	r3, r0
 8107680:	637b      	str	r3, [r7, #52]	@ 0x34
 8107682:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8107686:	4618      	mov	r0, r3
 8107688:	f000 fb7c 	bl	8107d84 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810768c:	4602      	mov	r2, r0
 810768e:	6823      	ldr	r3, [r4, #0]
 8107690:	6013      	str	r3, [r2, #0]
		  return __ret;
 8107692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107694:	e0cf      	b.n	8107836 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
	      _RandomAccessIterator __q = __p + __k;
 8107696:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8107698:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810769c:	4611      	mov	r1, r2
 810769e:	4618      	mov	r0, r3
 81076a0:	f7ff fd83 	bl	81071aa <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 81076a4:	4603      	mov	r3, r0
 81076a6:	623b      	str	r3, [r7, #32]
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 81076a8:	2300      	movs	r3, #0
 81076aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81076ac:	e010      	b.n	81076d0 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x174>
		  std::iter_swap(__p, __q);
 81076ae:	6a39      	ldr	r1, [r7, #32]
 81076b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81076b2:	f000 fba4 	bl	8107dfe <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
		  ++__p;
 81076b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81076ba:	4618      	mov	r0, r3
 81076bc:	f000 fbb6 	bl	8107e2c <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
		  ++__q;
 81076c0:	f107 0320 	add.w	r3, r7, #32
 81076c4:	4618      	mov	r0, r3
 81076c6:	f000 fbb1 	bl	8107e2c <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 81076ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81076cc:	3301      	adds	r3, #1
 81076ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81076d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81076d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81076d4:	1ad3      	subs	r3, r2, r3
 81076d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 81076d8:	429a      	cmp	r2, r3
 81076da:	dbe8      	blt.n	81076ae <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x152>
	      __n %= __k;
 81076dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81076de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81076e0:	fb93 f1f2 	sdiv	r1, r3, r2
 81076e4:	fb01 f202 	mul.w	r2, r1, r2
 81076e8:	1a9b      	subs	r3, r3, r2
 81076ea:	633b      	str	r3, [r7, #48]	@ 0x30
	      if (__n == 0)
 81076ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81076ee:	2b00      	cmp	r3, #0
 81076f0:	d101      	bne.n	81076f6 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x19a>
		return __ret;
 81076f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81076f4:	e09f      	b.n	8107836 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
	      std::swap(__n, __k);
 81076f6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 81076fa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 81076fe:	4611      	mov	r1, r2
 8107700:	4618      	mov	r0, r3
 8107702:	f000 fba3 	bl	8107e4c <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
	      __k = __n - __k;
 8107706:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8107708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810770a:	1ad3      	subs	r3, r2, r3
 810770c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810770e:	e777      	b.n	8107600 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0xa4>
	      __k = __n - __k;
 8107710:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8107712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107714:	1ad3      	subs	r3, r2, r3
 8107716:	62fb      	str	r3, [r7, #44]	@ 0x2c
	      if (__is_pod(_ValueType) && __k == 1)
 8107718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810771a:	2b01      	cmp	r3, #1
 810771c:	d149      	bne.n	81077b2 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x256>
		  _ValueType __t = _GLIBCXX_MOVE(*(__p + __n - 1));
 810771e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8107720:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8107724:	4611      	mov	r1, r2
 8107726:	4618      	mov	r0, r3
 8107728:	f7ff fd3f 	bl	81071aa <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810772c:	4603      	mov	r3, r0
 810772e:	643b      	str	r3, [r7, #64]	@ 0x40
 8107730:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8107734:	2101      	movs	r1, #1
 8107736:	4618      	mov	r0, r3
 8107738:	f000 fb48 	bl	8107dcc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 810773c:	4603      	mov	r3, r0
 810773e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107740:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8107744:	4618      	mov	r0, r3
 8107746:	f000 fb1d 	bl	8107d84 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810774a:	4603      	mov	r3, r0
 810774c:	4618      	mov	r0, r3
 810774e:	f7ff fec1 	bl	81074d4 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8107752:	4603      	mov	r3, r0
 8107754:	681b      	ldr	r3, [r3, #0]
 8107756:	617b      	str	r3, [r7, #20]
		  _GLIBCXX_MOVE_BACKWARD3(__p, __p + __n - 1, __p + __n);
 8107758:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810775a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810775e:	4611      	mov	r1, r2
 8107760:	4618      	mov	r0, r3
 8107762:	f7ff fd22 	bl	81071aa <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8107766:	4603      	mov	r3, r0
 8107768:	647b      	str	r3, [r7, #68]	@ 0x44
 810776a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 810776e:	2101      	movs	r1, #1
 8107770:	4618      	mov	r0, r3
 8107772:	f000 fb2b 	bl	8107dcc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 8107776:	4604      	mov	r4, r0
 8107778:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810777a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810777e:	4611      	mov	r1, r2
 8107780:	4618      	mov	r0, r3
 8107782:	f7ff fd12 	bl	81071aa <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8107786:	4603      	mov	r3, r0
 8107788:	461a      	mov	r2, r3
 810778a:	4621      	mov	r1, r4
 810778c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810778e:	f000 fb7c 	bl	8107e8a <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>
		  *__p = _GLIBCXX_MOVE(__t);
 8107792:	f107 0314 	add.w	r3, r7, #20
 8107796:	4618      	mov	r0, r3
 8107798:	f7ff fe9c 	bl	81074d4 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810779c:	4604      	mov	r4, r0
 810779e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81077a2:	4618      	mov	r0, r3
 81077a4:	f000 faee 	bl	8107d84 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 81077a8:	4602      	mov	r2, r0
 81077aa:	6823      	ldr	r3, [r4, #0]
 81077ac:	6013      	str	r3, [r2, #0]
		  return __ret;
 81077ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81077b0:	e041      	b.n	8107836 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
	      _RandomAccessIterator __q = __p + __n;
 81077b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81077b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81077b8:	4611      	mov	r1, r2
 81077ba:	4618      	mov	r0, r3
 81077bc:	f7ff fcf5 	bl	81071aa <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 81077c0:	4603      	mov	r3, r0
 81077c2:	61bb      	str	r3, [r7, #24]
	      __p = __q - __k;
 81077c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81077c6:	f107 0318 	add.w	r3, r7, #24
 81077ca:	4611      	mov	r1, r2
 81077cc:	4618      	mov	r0, r3
 81077ce:	f000 fafd 	bl	8107dcc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 81077d2:	4603      	mov	r3, r0
 81077d4:	62bb      	str	r3, [r7, #40]	@ 0x28
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 81077d6:	2300      	movs	r3, #0
 81077d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 81077da:	e010      	b.n	81077fe <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2a2>
		  --__p;
 81077dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81077e0:	4618      	mov	r0, r3
 81077e2:	f000 fb6a 	bl	8107eba <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
		  --__q;
 81077e6:	f107 0318 	add.w	r3, r7, #24
 81077ea:	4618      	mov	r0, r3
 81077ec:	f000 fb65 	bl	8107eba <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
		  std::iter_swap(__p, __q);
 81077f0:	69b9      	ldr	r1, [r7, #24]
 81077f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81077f4:	f000 fb03 	bl	8107dfe <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 81077f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81077fa:	3301      	adds	r3, #1
 81077fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 81077fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8107800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107802:	1ad3      	subs	r3, r2, r3
 8107804:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8107806:	429a      	cmp	r2, r3
 8107808:	dbe8      	blt.n	81077dc <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x280>
	      __n %= __k;
 810780a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810780c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810780e:	fb93 f1f2 	sdiv	r1, r3, r2
 8107812:	fb01 f202 	mul.w	r2, r1, r2
 8107816:	1a9b      	subs	r3, r3, r2
 8107818:	633b      	str	r3, [r7, #48]	@ 0x30
	      if (__n == 0)
 810781a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810781c:	2b00      	cmp	r3, #0
 810781e:	d101      	bne.n	8107824 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2c8>
		return __ret;
 8107820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107822:	e008      	b.n	8107836 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
	      std::swap(__n, __k);
 8107824:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8107828:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 810782c:	4611      	mov	r1, r2
 810782e:	4618      	mov	r0, r3
 8107830:	f000 fb0c 	bl	8107e4c <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
      for (;;)
 8107834:	e6e4      	b.n	8107600 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0xa4>
    }
 8107836:	4618      	mov	r0, r3
 8107838:	3754      	adds	r7, #84	@ 0x54
 810783a:	46bd      	mov	sp, r7
 810783c:	bd90      	pop	{r4, r7, pc}

0810783e <_ZSt8_DestroyIPfEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 810783e:	b580      	push	{r7, lr}
 8107840:	b082      	sub	sp, #8
 8107842:	af00      	add	r7, sp, #0
 8107844:	6078      	str	r0, [r7, #4]
 8107846:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8107848:	6839      	ldr	r1, [r7, #0]
 810784a:	6878      	ldr	r0, [r7, #4]
 810784c:	f000 fb45 	bl	8107eda <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
 8107850:	bf00      	nop
 8107852:	3708      	adds	r7, #8
 8107854:	46bd      	mov	sp, r7
 8107856:	bd80      	pop	{r7, pc}

08107858 <_ZNSt15__new_allocatorIfEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8107858:	b480      	push	{r7}
 810785a:	b083      	sub	sp, #12
 810785c:	af00      	add	r7, sp, #0
 810785e:	6078      	str	r0, [r7, #4]
 8107860:	687b      	ldr	r3, [r7, #4]
 8107862:	4618      	mov	r0, r3
 8107864:	370c      	adds	r7, #12
 8107866:	46bd      	mov	sp, r7
 8107868:	f85d 7b04 	ldr.w	r7, [sp], #4
 810786c:	4770      	bx	lr

0810786e <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 810786e:	b580      	push	{r7, lr}
 8107870:	b084      	sub	sp, #16
 8107872:	af00      	add	r7, sp, #0
 8107874:	60f8      	str	r0, [r7, #12]
 8107876:	60b9      	str	r1, [r7, #8]
 8107878:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 810787a:	687a      	ldr	r2, [r7, #4]
 810787c:	68b9      	ldr	r1, [r7, #8]
 810787e:	68f8      	ldr	r0, [r7, #12]
 8107880:	f000 fb36 	bl	8107ef0 <_ZNSt15__new_allocatorIfE10deallocateEPfj>
 8107884:	bf00      	nop
 8107886:	3710      	adds	r7, #16
 8107888:	46bd      	mov	sp, r7
 810788a:	bd80      	pop	{r7, pc}

0810788c <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 810788c:	b580      	push	{r7, lr}
 810788e:	b084      	sub	sp, #16
 8107890:	af00      	add	r7, sp, #0
 8107892:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8107894:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8107898:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 810789a:	6878      	ldr	r0, [r7, #4]
 810789c:	f000 fb38 	bl	8107f10 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 81078a0:	4603      	mov	r3, r0
 81078a2:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 81078a4:	f107 0208 	add.w	r2, r7, #8
 81078a8:	f107 030c 	add.w	r3, r7, #12
 81078ac:	4611      	mov	r1, r2
 81078ae:	4618      	mov	r0, r3
 81078b0:	f7fd fc69 	bl	8105186 <_ZSt3minIjERKT_S2_S2_>
 81078b4:	4603      	mov	r3, r0
 81078b6:	681b      	ldr	r3, [r3, #0]
      }
 81078b8:	4618      	mov	r0, r3
 81078ba:	3710      	adds	r7, #16
 81078bc:	46bd      	mov	sp, r7
 81078be:	bd80      	pop	{r7, pc}

081078c0 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 81078c0:	b580      	push	{r7, lr}
 81078c2:	b082      	sub	sp, #8
 81078c4:	af00      	add	r7, sp, #0
 81078c6:	6078      	str	r0, [r7, #4]
 81078c8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 81078ca:	2200      	movs	r2, #0
 81078cc:	6839      	ldr	r1, [r7, #0]
 81078ce:	6878      	ldr	r0, [r7, #4]
 81078d0:	f000 fb2a 	bl	8107f28 <_ZNSt15__new_allocatorIfE8allocateEjPKv>
 81078d4:	4603      	mov	r3, r0
 81078d6:	4618      	mov	r0, r3
 81078d8:	3708      	adds	r7, #8
 81078da:	46bd      	mov	sp, r7
 81078dc:	bd80      	pop	{r7, pc}

081078de <_ZNSt6vectorIfSaIfEE14_S_do_relocateEPfS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 81078de:	b580      	push	{r7, lr}
 81078e0:	b084      	sub	sp, #16
 81078e2:	af00      	add	r7, sp, #0
 81078e4:	60f8      	str	r0, [r7, #12]
 81078e6:	60b9      	str	r1, [r7, #8]
 81078e8:	607a      	str	r2, [r7, #4]
 81078ea:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 81078ec:	683b      	ldr	r3, [r7, #0]
 81078ee:	687a      	ldr	r2, [r7, #4]
 81078f0:	68b9      	ldr	r1, [r7, #8]
 81078f2:	68f8      	ldr	r0, [r7, #12]
 81078f4:	f000 fb41 	bl	8107f7a <_ZSt12__relocate_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 81078f8:	4603      	mov	r3, r0
      }
 81078fa:	4618      	mov	r0, r3
 81078fc:	3710      	adds	r7, #16
 81078fe:	46bd      	mov	sp, r7
 8107900:	bd80      	pop	{r7, pc}

08107902 <_ZNSt13move_iteratorIPfEC1ES0_>:
      move_iterator(iterator_type __i)
 8107902:	b580      	push	{r7, lr}
 8107904:	b082      	sub	sp, #8
 8107906:	af00      	add	r7, sp, #0
 8107908:	6078      	str	r0, [r7, #4]
 810790a:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 810790c:	463b      	mov	r3, r7
 810790e:	4618      	mov	r0, r3
 8107910:	f000 fb50 	bl	8107fb4 <_ZSt4moveIRPfEONSt16remove_referenceIT_E4typeEOS3_>
 8107914:	4603      	mov	r3, r0
 8107916:	681a      	ldr	r2, [r3, #0]
 8107918:	687b      	ldr	r3, [r7, #4]
 810791a:	601a      	str	r2, [r3, #0]
 810791c:	687b      	ldr	r3, [r7, #4]
 810791e:	4618      	mov	r0, r3
 8107920:	3708      	adds	r7, #8
 8107922:	46bd      	mov	sp, r7
 8107924:	bd80      	pop	{r7, pc}

08107926 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_fET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8107926:	b580      	push	{r7, lr}
 8107928:	b084      	sub	sp, #16
 810792a:	af00      	add	r7, sp, #0
 810792c:	60f8      	str	r0, [r7, #12]
 810792e:	60b9      	str	r1, [r7, #8]
 8107930:	607a      	str	r2, [r7, #4]
 8107932:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 8107934:	687a      	ldr	r2, [r7, #4]
 8107936:	68b9      	ldr	r1, [r7, #8]
 8107938:	68f8      	ldr	r0, [r7, #12]
 810793a:	f000 fb46 	bl	8107fca <_ZSt18uninitialized_copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>
 810793e:	4603      	mov	r3, r0
    }
 8107940:	4618      	mov	r0, r3
 8107942:	3710      	adds	r7, #16
 8107944:	46bd      	mov	sp, r7
 8107946:	bd80      	pop	{r7, pc}

08107948 <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 8107948:	b580      	push	{r7, lr}
 810794a:	b082      	sub	sp, #8
 810794c:	af00      	add	r7, sp, #0
 810794e:	6078      	str	r0, [r7, #4]
 8107950:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8107952:	6839      	ldr	r1, [r7, #0]
 8107954:	6878      	ldr	r0, [r7, #4]
 8107956:	f000 f804 	bl	8107962 <_ZNSaIfEC1ERKS_>
 810795a:	6878      	ldr	r0, [r7, #4]
 810795c:	3708      	adds	r7, #8
 810795e:	46bd      	mov	sp, r7
 8107960:	bd80      	pop	{r7, pc}

08107962 <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8107962:	b580      	push	{r7, lr}
 8107964:	b082      	sub	sp, #8
 8107966:	af00      	add	r7, sp, #0
 8107968:	6078      	str	r0, [r7, #4]
 810796a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 810796c:	6839      	ldr	r1, [r7, #0]
 810796e:	6878      	ldr	r0, [r7, #4]
 8107970:	f000 fb3f 	bl	8107ff2 <_ZNSt15__new_allocatorIfEC1ERKS0_>
 8107974:	687b      	ldr	r3, [r7, #4]
 8107976:	4618      	mov	r0, r3
 8107978:	3708      	adds	r7, #8
 810797a:	46bd      	mov	sp, r7
 810797c:	bd80      	pop	{r7, pc}

0810797e <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 810797e:	b580      	push	{r7, lr}
 8107980:	b082      	sub	sp, #8
 8107982:	af00      	add	r7, sp, #0
 8107984:	6078      	str	r0, [r7, #4]
 8107986:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8107988:	6839      	ldr	r1, [r7, #0]
 810798a:	6878      	ldr	r0, [r7, #4]
 810798c:	f7ff ffe9 	bl	8107962 <_ZNSaIfEC1ERKS_>
 8107990:	687b      	ldr	r3, [r7, #4]
 8107992:	4618      	mov	r0, r3
 8107994:	f7ff fc5c 	bl	8107250 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 8107998:	687b      	ldr	r3, [r7, #4]
 810799a:	4618      	mov	r0, r3
 810799c:	3708      	adds	r7, #8
 810799e:	46bd      	mov	sp, r7
 81079a0:	bd80      	pop	{r7, pc}

081079a2 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 81079a2:	b580      	push	{r7, lr}
 81079a4:	b082      	sub	sp, #8
 81079a6:	af00      	add	r7, sp, #0
 81079a8:	6078      	str	r0, [r7, #4]
 81079aa:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 81079ac:	6839      	ldr	r1, [r7, #0]
 81079ae:	6878      	ldr	r0, [r7, #4]
 81079b0:	f7ff fca1 	bl	81072f6 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 81079b4:	4602      	mov	r2, r0
 81079b6:	687b      	ldr	r3, [r7, #4]
 81079b8:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 81079ba:	687b      	ldr	r3, [r7, #4]
 81079bc:	681a      	ldr	r2, [r3, #0]
 81079be:	687b      	ldr	r3, [r7, #4]
 81079c0:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 81079c2:	687b      	ldr	r3, [r7, #4]
 81079c4:	681a      	ldr	r2, [r3, #0]
 81079c6:	683b      	ldr	r3, [r7, #0]
 81079c8:	009b      	lsls	r3, r3, #2
 81079ca:	441a      	add	r2, r3
 81079cc:	687b      	ldr	r3, [r7, #4]
 81079ce:	609a      	str	r2, [r3, #8]
      }
 81079d0:	bf00      	nop
 81079d2:	3708      	adds	r7, #8
 81079d4:	46bd      	mov	sp, r7
 81079d6:	bd80      	pop	{r7, pc}

081079d8 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 81079d8:	b480      	push	{r7}
 81079da:	b083      	sub	sp, #12
 81079dc:	af00      	add	r7, sp, #0
 81079de:	6078      	str	r0, [r7, #4]
 81079e0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 81079e2:	683b      	ldr	r3, [r7, #0]
 81079e4:	681a      	ldr	r2, [r3, #0]
 81079e6:	687b      	ldr	r3, [r7, #4]
 81079e8:	601a      	str	r2, [r3, #0]
 81079ea:	687b      	ldr	r3, [r7, #4]
 81079ec:	4618      	mov	r0, r3
 81079ee:	370c      	adds	r7, #12
 81079f0:	46bd      	mov	sp, r7
 81079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81079f6:	4770      	bx	lr

081079f8 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 81079f8:	b580      	push	{r7, lr}
 81079fa:	b086      	sub	sp, #24
 81079fc:	af00      	add	r7, sp, #0
 81079fe:	60f8      	str	r0, [r7, #12]
 8107a00:	60b9      	str	r1, [r7, #8]
 8107a02:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 8107a04:	2301      	movs	r3, #1
 8107a06:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 8107a08:	2301      	movs	r3, #1
 8107a0a:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8107a0c:	687a      	ldr	r2, [r7, #4]
 8107a0e:	68b9      	ldr	r1, [r7, #8]
 8107a10:	68f8      	ldr	r0, [r7, #12]
 8107a12:	f000 fafa 	bl	810800a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>
 8107a16:	4603      	mov	r3, r0
    }
 8107a18:	4618      	mov	r0, r3
 8107a1a:	3718      	adds	r7, #24
 8107a1c:	46bd      	mov	sp, r7
 8107a1e:	bd80      	pop	{r7, pc}

08107a20 <_ZN9__gnu_cxxneIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8107a20:	b590      	push	{r4, r7, lr}
 8107a22:	b083      	sub	sp, #12
 8107a24:	af00      	add	r7, sp, #0
 8107a26:	6078      	str	r0, [r7, #4]
 8107a28:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8107a2a:	6878      	ldr	r0, [r7, #4]
 8107a2c:	f000 fafd 	bl	810802a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8107a30:	4603      	mov	r3, r0
 8107a32:	681c      	ldr	r4, [r3, #0]
 8107a34:	6838      	ldr	r0, [r7, #0]
 8107a36:	f000 faf8 	bl	810802a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8107a3a:	4603      	mov	r3, r0
 8107a3c:	681b      	ldr	r3, [r3, #0]
 8107a3e:	429c      	cmp	r4, r3
 8107a40:	bf14      	ite	ne
 8107a42:	2301      	movne	r3, #1
 8107a44:	2300      	moveq	r3, #0
 8107a46:	b2db      	uxtb	r3, r3
 8107a48:	4618      	mov	r0, r3
 8107a4a:	370c      	adds	r7, #12
 8107a4c:	46bd      	mov	sp, r7
 8107a4e:	bd90      	pop	{r4, r7, pc}

08107a50 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8107a50:	b590      	push	{r4, r7, lr}
 8107a52:	b083      	sub	sp, #12
 8107a54:	af00      	add	r7, sp, #0
 8107a56:	6078      	str	r0, [r7, #4]
 8107a58:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8107a5a:	6878      	ldr	r0, [r7, #4]
 8107a5c:	f000 fae5 	bl	810802a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8107a60:	4603      	mov	r3, r0
 8107a62:	681c      	ldr	r4, [r3, #0]
 8107a64:	6838      	ldr	r0, [r7, #0]
 8107a66:	f000 fae0 	bl	810802a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8107a6a:	4603      	mov	r3, r0
 8107a6c:	681b      	ldr	r3, [r3, #0]
 8107a6e:	1ae3      	subs	r3, r4, r3
 8107a70:	109b      	asrs	r3, r3, #2
 8107a72:	4618      	mov	r0, r3
 8107a74:	370c      	adds	r7, #12
 8107a76:	46bd      	mov	sp, r7
 8107a78:	bd90      	pop	{r4, r7, pc}

08107a7a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 8107a7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8107a7c:	b087      	sub	sp, #28
 8107a7e:	af00      	add	r7, sp, #0
 8107a80:	60f8      	str	r0, [r7, #12]
 8107a82:	60b9      	str	r1, [r7, #8]
 8107a84:	607a      	str	r2, [r7, #4]
 8107a86:	703b      	strb	r3, [r7, #0]
      while (__last - __first > int(_S_threshold))
 8107a88:	e01b      	b.n	8107ac2 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x48>
	  if (__depth_limit == 0)
 8107a8a:	687b      	ldr	r3, [r7, #4]
 8107a8c:	2b00      	cmp	r3, #0
 8107a8e:	d106      	bne.n	8107a9e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x24>
	      std::__partial_sort(__first, __last, __last, __comp);
 8107a90:	4633      	mov	r3, r6
 8107a92:	68ba      	ldr	r2, [r7, #8]
 8107a94:	68b9      	ldr	r1, [r7, #8]
 8107a96:	68f8      	ldr	r0, [r7, #12]
 8107a98:	f000 fad2 	bl	8108040 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>
 8107a9c:	e021      	b.n	8107ae2 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x68>
	  --__depth_limit;
 8107a9e:	687b      	ldr	r3, [r7, #4]
 8107aa0:	3b01      	subs	r3, #1
 8107aa2:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 8107aa4:	462a      	mov	r2, r5
 8107aa6:	68b9      	ldr	r1, [r7, #8]
 8107aa8:	68f8      	ldr	r0, [r7, #12]
 8107aaa:	f000 fae0 	bl	810806e <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_T0_>
 8107aae:	4603      	mov	r3, r0
 8107ab0:	617b      	str	r3, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 8107ab2:	4623      	mov	r3, r4
 8107ab4:	687a      	ldr	r2, [r7, #4]
 8107ab6:	68b9      	ldr	r1, [r7, #8]
 8107ab8:	6978      	ldr	r0, [r7, #20]
 8107aba:	f7ff ffde 	bl	8107a7a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>
	  __last = __cut;
 8107abe:	697b      	ldr	r3, [r7, #20]
 8107ac0:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 8107ac2:	f107 020c 	add.w	r2, r7, #12
 8107ac6:	f107 0308 	add.w	r3, r7, #8
 8107aca:	4611      	mov	r1, r2
 8107acc:	4618      	mov	r0, r3
 8107ace:	f7ff ffbf 	bl	8107a50 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8107ad2:	4603      	mov	r3, r0
 8107ad4:	2b10      	cmp	r3, #16
 8107ad6:	bfcc      	ite	gt
 8107ad8:	2301      	movgt	r3, #1
 8107ada:	2300      	movle	r3, #0
 8107adc:	b2db      	uxtb	r3, r3
 8107ade:	2b00      	cmp	r3, #0
 8107ae0:	d1d3      	bne.n	8107a8a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x10>
    }
 8107ae2:	371c      	adds	r7, #28
 8107ae4:	46bd      	mov	sp, r7
 8107ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08107ae8 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 8107ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8107aea:	b085      	sub	sp, #20
 8107aec:	af00      	add	r7, sp, #0
 8107aee:	60f8      	str	r0, [r7, #12]
 8107af0:	60b9      	str	r1, [r7, #8]
 8107af2:	713a      	strb	r2, [r7, #4]
      if (__last - __first > int(_S_threshold))
 8107af4:	f107 020c 	add.w	r2, r7, #12
 8107af8:	f107 0308 	add.w	r3, r7, #8
 8107afc:	4611      	mov	r1, r2
 8107afe:	4618      	mov	r0, r3
 8107b00:	f7ff ffa6 	bl	8107a50 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8107b04:	4603      	mov	r3, r0
 8107b06:	2b10      	cmp	r3, #16
 8107b08:	bfcc      	ite	gt
 8107b0a:	2301      	movgt	r3, #1
 8107b0c:	2300      	movle	r3, #0
 8107b0e:	b2db      	uxtb	r3, r3
 8107b10:	2b00      	cmp	r3, #0
 8107b12:	d018      	beq.n	8107b46 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 8107b14:	f107 030c 	add.w	r3, r7, #12
 8107b18:	2110      	movs	r1, #16
 8107b1a:	4618      	mov	r0, r3
 8107b1c:	f7ff fb45 	bl	81071aa <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8107b20:	4603      	mov	r3, r0
 8107b22:	4632      	mov	r2, r6
 8107b24:	4619      	mov	r1, r3
 8107b26:	68f8      	ldr	r0, [r7, #12]
 8107b28:	f000 fae1 	bl	81080ee <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 8107b2c:	f107 030c 	add.w	r3, r7, #12
 8107b30:	2110      	movs	r1, #16
 8107b32:	4618      	mov	r0, r3
 8107b34:	f7ff fb39 	bl	81071aa <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8107b38:	4603      	mov	r3, r0
 8107b3a:	462a      	mov	r2, r5
 8107b3c:	68b9      	ldr	r1, [r7, #8]
 8107b3e:	4618      	mov	r0, r3
 8107b40:	f000 fb3b 	bl	81081ba <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 8107b44:	e004      	b.n	8107b50 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x68>
	std::__insertion_sort(__first, __last, __comp);
 8107b46:	4622      	mov	r2, r4
 8107b48:	68b9      	ldr	r1, [r7, #8]
 8107b4a:	68f8      	ldr	r0, [r7, #12]
 8107b4c:	f000 facf 	bl	81080ee <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 8107b50:	bf00      	nop
 8107b52:	3714      	adds	r7, #20
 8107b54:	46bd      	mov	sp, r7
 8107b56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08107b58 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8107b58:	b480      	push	{r7}
 8107b5a:	b083      	sub	sp, #12
 8107b5c:	af00      	add	r7, sp, #0
 8107b5e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8107b60:	687b      	ldr	r3, [r7, #4]
 8107b62:	4618      	mov	r0, r3
 8107b64:	370c      	adds	r7, #12
 8107b66:	46bd      	mov	sp, r7
 8107b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b6c:	4770      	bx	lr

08107b6e <_ZNSt16allocator_traitsISaIfEE9constructIfJfEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8107b6e:	b580      	push	{r7, lr}
 8107b70:	b084      	sub	sp, #16
 8107b72:	af00      	add	r7, sp, #0
 8107b74:	60f8      	str	r0, [r7, #12]
 8107b76:	60b9      	str	r1, [r7, #8]
 8107b78:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8107b7a:	6878      	ldr	r0, [r7, #4]
 8107b7c:	f7ff ffec 	bl	8107b58 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8107b80:	4603      	mov	r3, r0
 8107b82:	461a      	mov	r2, r3
 8107b84:	68b9      	ldr	r1, [r7, #8]
 8107b86:	68f8      	ldr	r0, [r7, #12]
 8107b88:	f000 fb3c 	bl	8108204 <_ZNSt15__new_allocatorIfE9constructIfJfEEEvPT_DpOT0_>
	}
 8107b8c:	bf00      	nop
 8107b8e:	3710      	adds	r7, #16
 8107b90:	46bd      	mov	sp, r7
 8107b92:	bd80      	pop	{r7, pc}

08107b94 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8107b94:	b5b0      	push	{r4, r5, r7, lr}
 8107b96:	b08c      	sub	sp, #48	@ 0x30
 8107b98:	af00      	add	r7, sp, #0
 8107b9a:	60f8      	str	r0, [r7, #12]
 8107b9c:	60b9      	str	r1, [r7, #8]
 8107b9e:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8107ba0:	4a59      	ldr	r2, [pc, #356]	@ (8107d08 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x174>)
 8107ba2:	2101      	movs	r1, #1
 8107ba4:	68f8      	ldr	r0, [r7, #12]
 8107ba6:	f000 fb43 	bl	8108230 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>
 8107baa:	62b8      	str	r0, [r7, #40]	@ 0x28
      pointer __old_start = this->_M_impl._M_start;
 8107bac:	68fb      	ldr	r3, [r7, #12]
 8107bae:	681b      	ldr	r3, [r3, #0]
 8107bb0:	627b      	str	r3, [r7, #36]	@ 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8107bb2:	68fb      	ldr	r3, [r7, #12]
 8107bb4:	685b      	ldr	r3, [r3, #4]
 8107bb6:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8107bb8:	68f8      	ldr	r0, [r7, #12]
 8107bba:	f7ff faa4 	bl	8107106 <_ZNSt6vectorIfSaIfEE5beginEv>
 8107bbe:	4603      	mov	r3, r0
 8107bc0:	617b      	str	r3, [r7, #20]
 8107bc2:	f107 0214 	add.w	r2, r7, #20
 8107bc6:	f107 0308 	add.w	r3, r7, #8
 8107bca:	4611      	mov	r1, r2
 8107bcc:	4618      	mov	r0, r3
 8107bce:	f7ff ff3f 	bl	8107a50 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8107bd2:	4603      	mov	r3, r0
 8107bd4:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8107bd6:	68fb      	ldr	r3, [r7, #12]
 8107bd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8107bda:	4618      	mov	r0, r3
 8107bdc:	f7ff fb8b 	bl	81072f6 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8107be0:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8107be2:	69bb      	ldr	r3, [r7, #24]
 8107be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 8107be6:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8107be8:	69fb      	ldr	r3, [r7, #28]
 8107bea:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8107bec:	69ba      	ldr	r2, [r7, #24]
 8107bee:	18d5      	adds	r5, r2, r3
 8107bf0:	6878      	ldr	r0, [r7, #4]
 8107bf2:	f7ff ffb1 	bl	8107b58 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8107bf6:	4603      	mov	r3, r0
 8107bf8:	461a      	mov	r2, r3
 8107bfa:	4629      	mov	r1, r5
 8107bfc:	4620      	mov	r0, r4
 8107bfe:	f7ff ffb6 	bl	8107b6e <_ZNSt16allocator_traitsISaIfEE9constructIfJfEEEvRS0_PT_DpOT0_>
	  __new_finish = pointer();
 8107c02:	2300      	movs	r3, #0
 8107c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8107c06:	f7ff f99b 	bl	8106f40 <_ZNSt6vectorIfSaIfEE15_S_use_relocateEv>
 8107c0a:	4603      	mov	r3, r0
 8107c0c:	2b00      	cmp	r3, #0
 8107c0e:	d027      	beq.n	8107c60 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8107c10:	f107 0308 	add.w	r3, r7, #8
 8107c14:	4618      	mov	r0, r3
 8107c16:	f000 fa08 	bl	810802a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8107c1a:	4603      	mov	r3, r0
 8107c1c:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8107c1e:	68fb      	ldr	r3, [r7, #12]
 8107c20:	4618      	mov	r0, r3
 8107c22:	f7ff faf0 	bl	8107206 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8107c26:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8107c28:	69ba      	ldr	r2, [r7, #24]
 8107c2a:	4621      	mov	r1, r4
 8107c2c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8107c2e:	f7ff fb76 	bl	810731e <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
 8107c32:	62f8      	str	r0, [r7, #44]	@ 0x2c
	      ++__new_finish;
 8107c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107c36:	3304      	adds	r3, #4
 8107c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8107c3a:	f107 0308 	add.w	r3, r7, #8
 8107c3e:	4618      	mov	r0, r3
 8107c40:	f000 f9f3 	bl	810802a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8107c44:	4603      	mov	r3, r0
 8107c46:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8107c48:	68fb      	ldr	r3, [r7, #12]
 8107c4a:	4618      	mov	r0, r3
 8107c4c:	f7ff fadb 	bl	8107206 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8107c50:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8107c52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8107c54:	6a39      	ldr	r1, [r7, #32]
 8107c56:	4620      	mov	r0, r4
 8107c58:	f7ff fb61 	bl	810731e <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
 8107c5c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8107c5e:	e026      	b.n	8107cae <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 8107c60:	f107 0308 	add.w	r3, r7, #8
 8107c64:	4618      	mov	r0, r3
 8107c66:	f000 f9e0 	bl	810802a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8107c6a:	4603      	mov	r3, r0
 8107c6c:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8107c6e:	68fb      	ldr	r3, [r7, #12]
 8107c70:	4618      	mov	r0, r3
 8107c72:	f7ff fac8 	bl	8107206 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8107c76:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8107c78:	69ba      	ldr	r2, [r7, #24]
 8107c7a:	4621      	mov	r1, r4
 8107c7c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8107c7e:	f000 fb1e 	bl	81082be <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 8107c82:	62f8      	str	r0, [r7, #44]	@ 0x2c
	      ++__new_finish;
 8107c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107c86:	3304      	adds	r3, #4
 8107c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
		(__position.base(), __old_finish,
 8107c8a:	f107 0308 	add.w	r3, r7, #8
 8107c8e:	4618      	mov	r0, r3
 8107c90:	f000 f9cb 	bl	810802a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8107c94:	4603      	mov	r3, r0
 8107c96:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8107c98:	68fb      	ldr	r3, [r7, #12]
 8107c9a:	4618      	mov	r0, r3
 8107c9c:	f7ff fab3 	bl	8107206 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8107ca0:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8107ca2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8107ca4:	6a39      	ldr	r1, [r7, #32]
 8107ca6:	4620      	mov	r0, r4
 8107ca8:	f000 fb09 	bl	81082be <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 8107cac:	62f8      	str	r0, [r7, #44]	@ 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8107cae:	f7ff f947 	bl	8106f40 <_ZNSt6vectorIfSaIfEE15_S_use_relocateEv>
 8107cb2:	4603      	mov	r3, r0
 8107cb4:	f083 0301 	eor.w	r3, r3, #1
 8107cb8:	b2db      	uxtb	r3, r3
 8107cba:	2b00      	cmp	r3, #0
 8107cbc:	d009      	beq.n	8107cd2 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8107cbe:	68fb      	ldr	r3, [r7, #12]
 8107cc0:	4618      	mov	r0, r3
 8107cc2:	f7ff faa0 	bl	8107206 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8107cc6:	4603      	mov	r3, r0
 8107cc8:	461a      	mov	r2, r3
 8107cca:	6a39      	ldr	r1, [r7, #32]
 8107ccc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8107cce:	f7ff faa5 	bl	810721c <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
      _M_deallocate(__old_start,
 8107cd2:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8107cd4:	68fb      	ldr	r3, [r7, #12]
 8107cd6:	689a      	ldr	r2, [r3, #8]
 8107cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107cda:	1ad3      	subs	r3, r2, r3
 8107cdc:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8107cde:	461a      	mov	r2, r3
 8107ce0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8107ce2:	f7ff fad4 	bl	810728e <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      this->_M_impl._M_start = __new_start;
 8107ce6:	68fb      	ldr	r3, [r7, #12]
 8107ce8:	69ba      	ldr	r2, [r7, #24]
 8107cea:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8107cec:	68fb      	ldr	r3, [r7, #12]
 8107cee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8107cf0:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8107cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107cf4:	009b      	lsls	r3, r3, #2
 8107cf6:	69ba      	ldr	r2, [r7, #24]
 8107cf8:	441a      	add	r2, r3
 8107cfa:	68fb      	ldr	r3, [r7, #12]
 8107cfc:	609a      	str	r2, [r3, #8]
    }
 8107cfe:	bf00      	nop
 8107d00:	3730      	adds	r7, #48	@ 0x30
 8107d02:	46bd      	mov	sp, r7
 8107d04:	bdb0      	pop	{r4, r5, r7, pc}
 8107d06:	bf00      	nop
 8107d08:	08123b30 	.word	0x08123b30

08107d0c <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8107d0c:	b590      	push	{r4, r7, lr}
 8107d0e:	b083      	sub	sp, #12
 8107d10:	af00      	add	r7, sp, #0
 8107d12:	6078      	str	r0, [r7, #4]
 8107d14:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8107d16:	6878      	ldr	r0, [r7, #4]
 8107d18:	f000 f987 	bl	810802a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8107d1c:	4603      	mov	r3, r0
 8107d1e:	681c      	ldr	r4, [r3, #0]
 8107d20:	6838      	ldr	r0, [r7, #0]
 8107d22:	f000 f982 	bl	810802a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8107d26:	4603      	mov	r3, r0
 8107d28:	681b      	ldr	r3, [r3, #0]
 8107d2a:	429c      	cmp	r4, r3
 8107d2c:	bf0c      	ite	eq
 8107d2e:	2301      	moveq	r3, #1
 8107d30:	2300      	movne	r3, #0
 8107d32:	b2db      	uxtb	r3, r3
 8107d34:	4618      	mov	r0, r3
 8107d36:	370c      	adds	r7, #12
 8107d38:	46bd      	mov	sp, r7
 8107d3a:	bd90      	pop	{r4, r7, pc}

08107d3c <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>:
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 8107d3c:	b580      	push	{r7, lr}
 8107d3e:	b084      	sub	sp, #16
 8107d40:	af00      	add	r7, sp, #0
 8107d42:	60f8      	str	r0, [r7, #12]
 8107d44:	60b9      	str	r1, [r7, #8]
 8107d46:	607a      	str	r2, [r7, #4]
      for (; __first1 != __last1; ++__first1, (void)++__first2)
 8107d48:	e00c      	b.n	8107d64 <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_+0x28>
	std::iter_swap(__first1, __first2);
 8107d4a:	6879      	ldr	r1, [r7, #4]
 8107d4c:	68f8      	ldr	r0, [r7, #12]
 8107d4e:	f000 f856 	bl	8107dfe <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
      for (; __first1 != __last1; ++__first1, (void)++__first2)
 8107d52:	f107 030c 	add.w	r3, r7, #12
 8107d56:	4618      	mov	r0, r3
 8107d58:	f000 f868 	bl	8107e2c <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 8107d5c:	1d3b      	adds	r3, r7, #4
 8107d5e:	4618      	mov	r0, r3
 8107d60:	f000 f864 	bl	8107e2c <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 8107d64:	f107 0208 	add.w	r2, r7, #8
 8107d68:	f107 030c 	add.w	r3, r7, #12
 8107d6c:	4611      	mov	r1, r2
 8107d6e:	4618      	mov	r0, r3
 8107d70:	f7ff fe56 	bl	8107a20 <_ZN9__gnu_cxxneIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8107d74:	4603      	mov	r3, r0
 8107d76:	2b00      	cmp	r3, #0
 8107d78:	d1e7      	bne.n	8107d4a <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_+0xe>
      return __first2;
 8107d7a:	687b      	ldr	r3, [r7, #4]
    }
 8107d7c:	4618      	mov	r0, r3
 8107d7e:	3710      	adds	r7, #16
 8107d80:	46bd      	mov	sp, r7
 8107d82:	bd80      	pop	{r7, pc}

08107d84 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8107d84:	b480      	push	{r7}
 8107d86:	b083      	sub	sp, #12
 8107d88:	af00      	add	r7, sp, #0
 8107d8a:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8107d8c:	687b      	ldr	r3, [r7, #4]
 8107d8e:	681b      	ldr	r3, [r3, #0]
 8107d90:	4618      	mov	r0, r3
 8107d92:	370c      	adds	r7, #12
 8107d94:	46bd      	mov	sp, r7
 8107d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107d9a:	4770      	bx	lr

08107d9c <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>:
    move(_II __first, _II __last, _OI __result)
 8107d9c:	b590      	push	{r4, r7, lr}
 8107d9e:	b085      	sub	sp, #20
 8107da0:	af00      	add	r7, sp, #0
 8107da2:	60f8      	str	r0, [r7, #12]
 8107da4:	60b9      	str	r1, [r7, #8]
 8107da6:	607a      	str	r2, [r7, #4]
      return std::__copy_move_a<true>(std::__miter_base(__first),
 8107da8:	68f8      	ldr	r0, [r7, #12]
 8107daa:	f000 faa1 	bl	81082f0 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 8107dae:	4604      	mov	r4, r0
 8107db0:	68b8      	ldr	r0, [r7, #8]
 8107db2:	f000 fa9d 	bl	81082f0 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 8107db6:	4603      	mov	r3, r0
 8107db8:	687a      	ldr	r2, [r7, #4]
 8107dba:	4619      	mov	r1, r3
 8107dbc:	4620      	mov	r0, r4
 8107dbe:	f000 faa2 	bl	8108306 <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>
 8107dc2:	4603      	mov	r3, r0
    }
 8107dc4:	4618      	mov	r0, r3
 8107dc6:	3714      	adds	r7, #20
 8107dc8:	46bd      	mov	sp, r7
 8107dca:	bd90      	pop	{r4, r7, pc}

08107dcc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8107dcc:	b580      	push	{r7, lr}
 8107dce:	b084      	sub	sp, #16
 8107dd0:	af00      	add	r7, sp, #0
 8107dd2:	6078      	str	r0, [r7, #4]
 8107dd4:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8107dd6:	687b      	ldr	r3, [r7, #4]
 8107dd8:	681a      	ldr	r2, [r3, #0]
 8107dda:	683b      	ldr	r3, [r7, #0]
 8107ddc:	009b      	lsls	r3, r3, #2
 8107dde:	425b      	negs	r3, r3
 8107de0:	4413      	add	r3, r2
 8107de2:	60fb      	str	r3, [r7, #12]
 8107de4:	f107 020c 	add.w	r2, r7, #12
 8107de8:	f107 0308 	add.w	r3, r7, #8
 8107dec:	4611      	mov	r1, r2
 8107dee:	4618      	mov	r0, r3
 8107df0:	f7ff fb33 	bl	810745a <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 8107df4:	68bb      	ldr	r3, [r7, #8]
 8107df6:	4618      	mov	r0, r3
 8107df8:	3710      	adds	r7, #16
 8107dfa:	46bd      	mov	sp, r7
 8107dfc:	bd80      	pop	{r7, pc}

08107dfe <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 8107dfe:	b590      	push	{r4, r7, lr}
 8107e00:	b083      	sub	sp, #12
 8107e02:	af00      	add	r7, sp, #0
 8107e04:	6078      	str	r0, [r7, #4]
 8107e06:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 8107e08:	1d3b      	adds	r3, r7, #4
 8107e0a:	4618      	mov	r0, r3
 8107e0c:	f7ff ffba 	bl	8107d84 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8107e10:	4604      	mov	r4, r0
 8107e12:	463b      	mov	r3, r7
 8107e14:	4618      	mov	r0, r3
 8107e16:	f7ff ffb5 	bl	8107d84 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8107e1a:	4603      	mov	r3, r0
 8107e1c:	4619      	mov	r1, r3
 8107e1e:	4620      	mov	r0, r4
 8107e20:	f000 fa92 	bl	8108348 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 8107e24:	bf00      	nop
 8107e26:	370c      	adds	r7, #12
 8107e28:	46bd      	mov	sp, r7
 8107e2a:	bd90      	pop	{r4, r7, pc}

08107e2c <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8107e2c:	b480      	push	{r7}
 8107e2e:	b083      	sub	sp, #12
 8107e30:	af00      	add	r7, sp, #0
 8107e32:	6078      	str	r0, [r7, #4]
	++_M_current;
 8107e34:	687b      	ldr	r3, [r7, #4]
 8107e36:	681b      	ldr	r3, [r3, #0]
 8107e38:	1d1a      	adds	r2, r3, #4
 8107e3a:	687b      	ldr	r3, [r7, #4]
 8107e3c:	601a      	str	r2, [r3, #0]
	return *this;
 8107e3e:	687b      	ldr	r3, [r7, #4]
      }
 8107e40:	4618      	mov	r0, r3
 8107e42:	370c      	adds	r7, #12
 8107e44:	46bd      	mov	sp, r7
 8107e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e4a:	4770      	bx	lr

08107e4c <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8107e4c:	b580      	push	{r7, lr}
 8107e4e:	b084      	sub	sp, #16
 8107e50:	af00      	add	r7, sp, #0
 8107e52:	6078      	str	r0, [r7, #4]
 8107e54:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8107e56:	6878      	ldr	r0, [r7, #4]
 8107e58:	f000 fa95 	bl	8108386 <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 8107e5c:	4603      	mov	r3, r0
 8107e5e:	681b      	ldr	r3, [r3, #0]
 8107e60:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8107e62:	6838      	ldr	r0, [r7, #0]
 8107e64:	f000 fa8f 	bl	8108386 <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 8107e68:	4603      	mov	r3, r0
 8107e6a:	681a      	ldr	r2, [r3, #0]
 8107e6c:	687b      	ldr	r3, [r7, #4]
 8107e6e:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8107e70:	f107 030c 	add.w	r3, r7, #12
 8107e74:	4618      	mov	r0, r3
 8107e76:	f000 fa86 	bl	8108386 <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 8107e7a:	4603      	mov	r3, r0
 8107e7c:	681a      	ldr	r2, [r3, #0]
 8107e7e:	683b      	ldr	r3, [r7, #0]
 8107e80:	601a      	str	r2, [r3, #0]
    }
 8107e82:	bf00      	nop
 8107e84:	3710      	adds	r7, #16
 8107e86:	46bd      	mov	sp, r7
 8107e88:	bd80      	pop	{r7, pc}

08107e8a <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8107e8a:	b590      	push	{r4, r7, lr}
 8107e8c:	b085      	sub	sp, #20
 8107e8e:	af00      	add	r7, sp, #0
 8107e90:	60f8      	str	r0, [r7, #12]
 8107e92:	60b9      	str	r1, [r7, #8]
 8107e94:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 8107e96:	68f8      	ldr	r0, [r7, #12]
 8107e98:	f000 fa2a 	bl	81082f0 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 8107e9c:	4604      	mov	r4, r0
 8107e9e:	68b8      	ldr	r0, [r7, #8]
 8107ea0:	f000 fa26 	bl	81082f0 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 8107ea4:	4603      	mov	r3, r0
 8107ea6:	687a      	ldr	r2, [r7, #4]
 8107ea8:	4619      	mov	r1, r3
 8107eaa:	4620      	mov	r0, r4
 8107eac:	f000 fa76 	bl	810839c <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>
 8107eb0:	4603      	mov	r3, r0
    }
 8107eb2:	4618      	mov	r0, r3
 8107eb4:	3714      	adds	r7, #20
 8107eb6:	46bd      	mov	sp, r7
 8107eb8:	bd90      	pop	{r4, r7, pc}

08107eba <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8107eba:	b480      	push	{r7}
 8107ebc:	b083      	sub	sp, #12
 8107ebe:	af00      	add	r7, sp, #0
 8107ec0:	6078      	str	r0, [r7, #4]
	--_M_current;
 8107ec2:	687b      	ldr	r3, [r7, #4]
 8107ec4:	681b      	ldr	r3, [r3, #0]
 8107ec6:	1f1a      	subs	r2, r3, #4
 8107ec8:	687b      	ldr	r3, [r7, #4]
 8107eca:	601a      	str	r2, [r3, #0]
	return *this;
 8107ecc:	687b      	ldr	r3, [r7, #4]
      }
 8107ece:	4618      	mov	r0, r3
 8107ed0:	370c      	adds	r7, #12
 8107ed2:	46bd      	mov	sp, r7
 8107ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ed8:	4770      	bx	lr

08107eda <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8107eda:	b480      	push	{r7}
 8107edc:	b083      	sub	sp, #12
 8107ede:	af00      	add	r7, sp, #0
 8107ee0:	6078      	str	r0, [r7, #4]
 8107ee2:	6039      	str	r1, [r7, #0]
 8107ee4:	bf00      	nop
 8107ee6:	370c      	adds	r7, #12
 8107ee8:	46bd      	mov	sp, r7
 8107eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107eee:	4770      	bx	lr

08107ef0 <_ZNSt15__new_allocatorIfE10deallocateEPfj>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8107ef0:	b580      	push	{r7, lr}
 8107ef2:	b084      	sub	sp, #16
 8107ef4:	af00      	add	r7, sp, #0
 8107ef6:	60f8      	str	r0, [r7, #12]
 8107ef8:	60b9      	str	r1, [r7, #8]
 8107efa:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8107efc:	687b      	ldr	r3, [r7, #4]
 8107efe:	009b      	lsls	r3, r3, #2
 8107f00:	4619      	mov	r1, r3
 8107f02:	68b8      	ldr	r0, [r7, #8]
 8107f04:	f019 fa5e 	bl	81213c4 <_ZdlPvj>
      }
 8107f08:	bf00      	nop
 8107f0a:	3710      	adds	r7, #16
 8107f0c:	46bd      	mov	sp, r7
 8107f0e:	bd80      	pop	{r7, pc}

08107f10 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8107f10:	b580      	push	{r7, lr}
 8107f12:	b082      	sub	sp, #8
 8107f14:	af00      	add	r7, sp, #0
 8107f16:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8107f18:	6878      	ldr	r0, [r7, #4]
 8107f1a:	f000 fa60 	bl	81083de <_ZNKSt15__new_allocatorIfE8max_sizeEv>
 8107f1e:	4603      	mov	r3, r0
      }
 8107f20:	4618      	mov	r0, r3
 8107f22:	3708      	adds	r7, #8
 8107f24:	46bd      	mov	sp, r7
 8107f26:	bd80      	pop	{r7, pc}

08107f28 <_ZNSt15__new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8107f28:	b580      	push	{r7, lr}
 8107f2a:	b084      	sub	sp, #16
 8107f2c:	af00      	add	r7, sp, #0
 8107f2e:	60f8      	str	r0, [r7, #12]
 8107f30:	60b9      	str	r1, [r7, #8]
 8107f32:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8107f34:	68f8      	ldr	r0, [r7, #12]
 8107f36:	f000 fa5e 	bl	81083f6 <_ZNKSt15__new_allocatorIfE11_M_max_sizeEv>
 8107f3a:	4602      	mov	r2, r0
 8107f3c:	68bb      	ldr	r3, [r7, #8]
 8107f3e:	4293      	cmp	r3, r2
 8107f40:	bf8c      	ite	hi
 8107f42:	2301      	movhi	r3, #1
 8107f44:	2300      	movls	r3, #0
 8107f46:	b2db      	uxtb	r3, r3
 8107f48:	2b00      	cmp	r3, #0
 8107f4a:	bf14      	ite	ne
 8107f4c:	2301      	movne	r3, #1
 8107f4e:	2300      	moveq	r3, #0
 8107f50:	b2db      	uxtb	r3, r3
 8107f52:	2b00      	cmp	r3, #0
 8107f54:	d007      	beq.n	8107f66 <_ZNSt15__new_allocatorIfE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8107f56:	68bb      	ldr	r3, [r7, #8]
 8107f58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107f5c:	d301      	bcc.n	8107f62 <_ZNSt15__new_allocatorIfE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8107f5e:	f019 fb13 	bl	8121588 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8107f62:	f019 fb0e 	bl	8121582 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8107f66:	68bb      	ldr	r3, [r7, #8]
 8107f68:	009b      	lsls	r3, r3, #2
 8107f6a:	4618      	mov	r0, r3
 8107f6c:	f019 fa3b 	bl	81213e6 <_Znwj>
 8107f70:	4603      	mov	r3, r0
      }
 8107f72:	4618      	mov	r0, r3
 8107f74:	3710      	adds	r7, #16
 8107f76:	46bd      	mov	sp, r7
 8107f78:	bd80      	pop	{r7, pc}

08107f7a <_ZSt12__relocate_aIPfS0_SaIfEET0_T_S3_S2_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8107f7a:	b5b0      	push	{r4, r5, r7, lr}
 8107f7c:	b084      	sub	sp, #16
 8107f7e:	af00      	add	r7, sp, #0
 8107f80:	60f8      	str	r0, [r7, #12]
 8107f82:	60b9      	str	r1, [r7, #8]
 8107f84:	607a      	str	r2, [r7, #4]
 8107f86:	603b      	str	r3, [r7, #0]
      return std::__relocate_a_1(std::__niter_base(__first),
 8107f88:	68f8      	ldr	r0, [r7, #12]
 8107f8a:	f000 fa40 	bl	810840e <_ZSt12__niter_baseIPfET_S1_>
 8107f8e:	4604      	mov	r4, r0
 8107f90:	68b8      	ldr	r0, [r7, #8]
 8107f92:	f000 fa3c 	bl	810840e <_ZSt12__niter_baseIPfET_S1_>
 8107f96:	4605      	mov	r5, r0
 8107f98:	6878      	ldr	r0, [r7, #4]
 8107f9a:	f000 fa38 	bl	810840e <_ZSt12__niter_baseIPfET_S1_>
 8107f9e:	4602      	mov	r2, r0
 8107fa0:	683b      	ldr	r3, [r7, #0]
 8107fa2:	4629      	mov	r1, r5
 8107fa4:	4620      	mov	r0, r4
 8107fa6:	f000 fa3d 	bl	8108424 <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 8107faa:	4603      	mov	r3, r0
    }
 8107fac:	4618      	mov	r0, r3
 8107fae:	3710      	adds	r7, #16
 8107fb0:	46bd      	mov	sp, r7
 8107fb2:	bdb0      	pop	{r4, r5, r7, pc}

08107fb4 <_ZSt4moveIRPfEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8107fb4:	b480      	push	{r7}
 8107fb6:	b083      	sub	sp, #12
 8107fb8:	af00      	add	r7, sp, #0
 8107fba:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8107fbc:	687b      	ldr	r3, [r7, #4]
 8107fbe:	4618      	mov	r0, r3
 8107fc0:	370c      	adds	r7, #12
 8107fc2:	46bd      	mov	sp, r7
 8107fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107fc8:	4770      	bx	lr

08107fca <_ZSt18uninitialized_copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8107fca:	b580      	push	{r7, lr}
 8107fcc:	b086      	sub	sp, #24
 8107fce:	af00      	add	r7, sp, #0
 8107fd0:	60f8      	str	r0, [r7, #12]
 8107fd2:	60b9      	str	r1, [r7, #8]
 8107fd4:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 8107fd6:	2301      	movs	r3, #1
 8107fd8:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 8107fda:	2301      	movs	r3, #1
 8107fdc:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8107fde:	687a      	ldr	r2, [r7, #4]
 8107fe0:	68b9      	ldr	r1, [r7, #8]
 8107fe2:	68f8      	ldr	r0, [r7, #12]
 8107fe4:	f000 fa3c 	bl	8108460 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPfES3_EET0_T_S6_S5_>
 8107fe8:	4603      	mov	r3, r0
    }
 8107fea:	4618      	mov	r0, r3
 8107fec:	3718      	adds	r7, #24
 8107fee:	46bd      	mov	sp, r7
 8107ff0:	bd80      	pop	{r7, pc}

08107ff2 <_ZNSt15__new_allocatorIfEC1ERKS0_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8107ff2:	b480      	push	{r7}
 8107ff4:	b083      	sub	sp, #12
 8107ff6:	af00      	add	r7, sp, #0
 8107ff8:	6078      	str	r0, [r7, #4]
 8107ffa:	6039      	str	r1, [r7, #0]
 8107ffc:	687b      	ldr	r3, [r7, #4]
 8107ffe:	4618      	mov	r0, r3
 8108000:	370c      	adds	r7, #12
 8108002:	46bd      	mov	sp, r7
 8108004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108008:	4770      	bx	lr

0810800a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 810800a:	b580      	push	{r7, lr}
 810800c:	b084      	sub	sp, #16
 810800e:	af00      	add	r7, sp, #0
 8108010:	60f8      	str	r0, [r7, #12]
 8108012:	60b9      	str	r1, [r7, #8]
 8108014:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8108016:	687a      	ldr	r2, [r7, #4]
 8108018:	68b9      	ldr	r1, [r7, #8]
 810801a:	68f8      	ldr	r0, [r7, #12]
 810801c:	f000 fa30 	bl	8108480 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 8108020:	4603      	mov	r3, r0
 8108022:	4618      	mov	r0, r3
 8108024:	3710      	adds	r7, #16
 8108026:	46bd      	mov	sp, r7
 8108028:	bd80      	pop	{r7, pc}

0810802a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 810802a:	b480      	push	{r7}
 810802c:	b083      	sub	sp, #12
 810802e:	af00      	add	r7, sp, #0
 8108030:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8108032:	687b      	ldr	r3, [r7, #4]
 8108034:	4618      	mov	r0, r3
 8108036:	370c      	adds	r7, #12
 8108038:	46bd      	mov	sp, r7
 810803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810803e:	4770      	bx	lr

08108040 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>:
    __partial_sort(_RandomAccessIterator __first,
 8108040:	b590      	push	{r4, r7, lr}
 8108042:	b085      	sub	sp, #20
 8108044:	af00      	add	r7, sp, #0
 8108046:	60f8      	str	r0, [r7, #12]
 8108048:	60b9      	str	r1, [r7, #8]
 810804a:	607a      	str	r2, [r7, #4]
 810804c:	703b      	strb	r3, [r7, #0]
      std::__heap_select(__first, __middle, __last, __comp);
 810804e:	4623      	mov	r3, r4
 8108050:	687a      	ldr	r2, [r7, #4]
 8108052:	68b9      	ldr	r1, [r7, #8]
 8108054:	68f8      	ldr	r0, [r7, #12]
 8108056:	f000 fa2b 	bl	81084b0 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>
      std::__sort_heap(__first, __middle, __comp);
 810805a:	463b      	mov	r3, r7
 810805c:	461a      	mov	r2, r3
 810805e:	68b9      	ldr	r1, [r7, #8]
 8108060:	68f8      	ldr	r0, [r7, #12]
 8108062:	f000 fa58 	bl	8108516 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>
    }
 8108066:	bf00      	nop
 8108068:	3714      	adds	r7, #20
 810806a:	46bd      	mov	sp, r7
 810806c:	bd90      	pop	{r4, r7, pc}

0810806e <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 810806e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8108070:	b089      	sub	sp, #36	@ 0x24
 8108072:	af02      	add	r7, sp, #8
 8108074:	60f8      	str	r0, [r7, #12]
 8108076:	60b9      	str	r1, [r7, #8]
 8108078:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 810807a:	f107 020c 	add.w	r2, r7, #12
 810807e:	f107 0308 	add.w	r3, r7, #8
 8108082:	4611      	mov	r1, r2
 8108084:	4618      	mov	r0, r3
 8108086:	f7ff fce3 	bl	8107a50 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 810808a:	4603      	mov	r3, r0
 810808c:	0fda      	lsrs	r2, r3, #31
 810808e:	4413      	add	r3, r2
 8108090:	105b      	asrs	r3, r3, #1
 8108092:	461a      	mov	r2, r3
 8108094:	f107 030c 	add.w	r3, r7, #12
 8108098:	4611      	mov	r1, r2
 810809a:	4618      	mov	r0, r3
 810809c:	f7ff f885 	bl	81071aa <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 81080a0:	4603      	mov	r3, r0
 81080a2:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 81080a4:	f107 030c 	add.w	r3, r7, #12
 81080a8:	2101      	movs	r1, #1
 81080aa:	4618      	mov	r0, r3
 81080ac:	f7ff f87d 	bl	81071aa <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 81080b0:	4604      	mov	r4, r0
 81080b2:	f107 0308 	add.w	r3, r7, #8
 81080b6:	2101      	movs	r1, #1
 81080b8:	4618      	mov	r0, r3
 81080ba:	f7ff fe87 	bl	8107dcc <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 81080be:	4603      	mov	r3, r0
 81080c0:	f88d 5000 	strb.w	r5, [sp]
 81080c4:	697a      	ldr	r2, [r7, #20]
 81080c6:	4621      	mov	r1, r4
 81080c8:	68f8      	ldr	r0, [r7, #12]
 81080ca:	f000 fa4b 	bl	8108564 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 81080ce:	f107 030c 	add.w	r3, r7, #12
 81080d2:	2101      	movs	r1, #1
 81080d4:	4618      	mov	r0, r3
 81080d6:	f7ff f868 	bl	81071aa <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 81080da:	4633      	mov	r3, r6
 81080dc:	68fa      	ldr	r2, [r7, #12]
 81080de:	68b9      	ldr	r1, [r7, #8]
 81080e0:	f000 fa95 	bl	810860e <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_>
 81080e4:	4603      	mov	r3, r0
    }
 81080e6:	4618      	mov	r0, r3
 81080e8:	371c      	adds	r7, #28
 81080ea:	46bd      	mov	sp, r7
 81080ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

081080ee <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 81080ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 81080f0:	b087      	sub	sp, #28
 81080f2:	af00      	add	r7, sp, #0
 81080f4:	60f8      	str	r0, [r7, #12]
 81080f6:	60b9      	str	r1, [r7, #8]
 81080f8:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 81080fa:	f107 0208 	add.w	r2, r7, #8
 81080fe:	f107 030c 	add.w	r3, r7, #12
 8108102:	4611      	mov	r1, r2
 8108104:	4618      	mov	r0, r3
 8108106:	f7ff fe01 	bl	8107d0c <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 810810a:	4603      	mov	r3, r0
 810810c:	2b00      	cmp	r3, #0
 810810e:	d150      	bne.n	81081b2 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xc4>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8108110:	f107 030c 	add.w	r3, r7, #12
 8108114:	2101      	movs	r1, #1
 8108116:	4618      	mov	r0, r3
 8108118:	f7ff f847 	bl	81071aa <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810811c:	4603      	mov	r3, r0
 810811e:	617b      	str	r3, [r7, #20]
 8108120:	e03b      	b.n	810819a <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xac>
	  if (__comp(__i, __first))
 8108122:	1d3b      	adds	r3, r7, #4
 8108124:	68fa      	ldr	r2, [r7, #12]
 8108126:	6979      	ldr	r1, [r7, #20]
 8108128:	4618      	mov	r0, r3
 810812a:	f000 fab8 	bl	810869e <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 810812e:	4603      	mov	r3, r0
 8108130:	2b00      	cmp	r3, #0
 8108132:	d026      	beq.n	8108182 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x94>
		__val = _GLIBCXX_MOVE(*__i);
 8108134:	f107 0314 	add.w	r3, r7, #20
 8108138:	4618      	mov	r0, r3
 810813a:	f7ff fe23 	bl	8107d84 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810813e:	4603      	mov	r3, r0
 8108140:	4618      	mov	r0, r3
 8108142:	f7ff f9c7 	bl	81074d4 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8108146:	4603      	mov	r3, r0
 8108148:	681b      	ldr	r3, [r3, #0]
 810814a:	613b      	str	r3, [r7, #16]
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 810814c:	f107 0314 	add.w	r3, r7, #20
 8108150:	2101      	movs	r1, #1
 8108152:	4618      	mov	r0, r3
 8108154:	f7ff f829 	bl	81071aa <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8108158:	4603      	mov	r3, r0
 810815a:	461a      	mov	r2, r3
 810815c:	6979      	ldr	r1, [r7, #20]
 810815e:	68f8      	ldr	r0, [r7, #12]
 8108160:	f7ff fe93 	bl	8107e8a <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>
	      *__first = _GLIBCXX_MOVE(__val);
 8108164:	f107 0310 	add.w	r3, r7, #16
 8108168:	4618      	mov	r0, r3
 810816a:	f7ff f9b3 	bl	81074d4 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810816e:	4604      	mov	r4, r0
 8108170:	f107 030c 	add.w	r3, r7, #12
 8108174:	4618      	mov	r0, r3
 8108176:	f7ff fe05 	bl	8107d84 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810817a:	4602      	mov	r2, r0
 810817c:	6823      	ldr	r3, [r4, #0]
 810817e:	6013      	str	r3, [r2, #0]
 8108180:	e006      	b.n	8108190 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xa2>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 8108182:	4630      	mov	r0, r6
 8108184:	f7fe fc91 	bl	8106aaa <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	    std::__unguarded_linear_insert(__i,
 8108188:	4629      	mov	r1, r5
 810818a:	6978      	ldr	r0, [r7, #20]
 810818c:	f000 faac 	bl	81086e8 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8108190:	f107 0314 	add.w	r3, r7, #20
 8108194:	4618      	mov	r0, r3
 8108196:	f7ff fe49 	bl	8107e2c <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 810819a:	f107 0208 	add.w	r2, r7, #8
 810819e:	f107 0314 	add.w	r3, r7, #20
 81081a2:	4611      	mov	r1, r2
 81081a4:	4618      	mov	r0, r3
 81081a6:	f7ff fc3b 	bl	8107a20 <_ZN9__gnu_cxxneIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 81081aa:	4603      	mov	r3, r0
 81081ac:	2b00      	cmp	r3, #0
 81081ae:	d1b8      	bne.n	8108122 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x34>
 81081b0:	e000      	b.n	81081b4 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xc6>
      if (__first == __last) return;
 81081b2:	bf00      	nop
    }
 81081b4:	371c      	adds	r7, #28
 81081b6:	46bd      	mov	sp, r7
 81081b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

081081ba <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 81081ba:	b5b0      	push	{r4, r5, r7, lr}
 81081bc:	b086      	sub	sp, #24
 81081be:	af00      	add	r7, sp, #0
 81081c0:	60f8      	str	r0, [r7, #12]
 81081c2:	60b9      	str	r1, [r7, #8]
 81081c4:	713a      	strb	r2, [r7, #4]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 81081c6:	68fb      	ldr	r3, [r7, #12]
 81081c8:	617b      	str	r3, [r7, #20]
 81081ca:	e00b      	b.n	81081e4 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x2a>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 81081cc:	4628      	mov	r0, r5
 81081ce:	f7fe fc6c 	bl	8106aaa <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	std::__unguarded_linear_insert(__i,
 81081d2:	4621      	mov	r1, r4
 81081d4:	6978      	ldr	r0, [r7, #20]
 81081d6:	f000 fa87 	bl	81086e8 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 81081da:	f107 0314 	add.w	r3, r7, #20
 81081de:	4618      	mov	r0, r3
 81081e0:	f7ff fe24 	bl	8107e2c <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 81081e4:	f107 0208 	add.w	r2, r7, #8
 81081e8:	f107 0314 	add.w	r3, r7, #20
 81081ec:	4611      	mov	r1, r2
 81081ee:	4618      	mov	r0, r3
 81081f0:	f7ff fc16 	bl	8107a20 <_ZN9__gnu_cxxneIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 81081f4:	4603      	mov	r3, r0
 81081f6:	2b00      	cmp	r3, #0
 81081f8:	d1e8      	bne.n	81081cc <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x12>
    }
 81081fa:	bf00      	nop
 81081fc:	bf00      	nop
 81081fe:	3718      	adds	r7, #24
 8108200:	46bd      	mov	sp, r7
 8108202:	bdb0      	pop	{r4, r5, r7, pc}

08108204 <_ZNSt15__new_allocatorIfE9constructIfJfEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8108204:	b590      	push	{r4, r7, lr}
 8108206:	b085      	sub	sp, #20
 8108208:	af00      	add	r7, sp, #0
 810820a:	60f8      	str	r0, [r7, #12]
 810820c:	60b9      	str	r1, [r7, #8]
 810820e:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8108210:	68bb      	ldr	r3, [r7, #8]
 8108212:	4619      	mov	r1, r3
 8108214:	2004      	movs	r0, #4
 8108216:	f7f9 f885 	bl	8101324 <_ZnwjPv>
 810821a:	4604      	mov	r4, r0
 810821c:	6878      	ldr	r0, [r7, #4]
 810821e:	f7ff fc9b 	bl	8107b58 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8108222:	4603      	mov	r3, r0
 8108224:	681b      	ldr	r3, [r3, #0]
 8108226:	6023      	str	r3, [r4, #0]
 8108228:	bf00      	nop
 810822a:	3714      	adds	r7, #20
 810822c:	46bd      	mov	sp, r7
 810822e:	bd90      	pop	{r4, r7, pc}

08108230 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8108230:	b590      	push	{r4, r7, lr}
 8108232:	b087      	sub	sp, #28
 8108234:	af00      	add	r7, sp, #0
 8108236:	60f8      	str	r0, [r7, #12]
 8108238:	60b9      	str	r1, [r7, #8]
 810823a:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 810823c:	68f8      	ldr	r0, [r7, #12]
 810823e:	f7ff f839 	bl	81072b4 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8108242:	4604      	mov	r4, r0
 8108244:	68f8      	ldr	r0, [r7, #12]
 8108246:	f7fe ff11 	bl	810706c <_ZNKSt6vectorIfSaIfEE4sizeEv>
 810824a:	4603      	mov	r3, r0
 810824c:	1ae2      	subs	r2, r4, r3
 810824e:	68bb      	ldr	r3, [r7, #8]
 8108250:	429a      	cmp	r2, r3
 8108252:	bf34      	ite	cc
 8108254:	2301      	movcc	r3, #1
 8108256:	2300      	movcs	r3, #0
 8108258:	b2db      	uxtb	r3, r3
 810825a:	2b00      	cmp	r3, #0
 810825c:	d002      	beq.n	8108264 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 810825e:	6878      	ldr	r0, [r7, #4]
 8108260:	f019 f995 	bl	812158e <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8108264:	68f8      	ldr	r0, [r7, #12]
 8108266:	f7fe ff01 	bl	810706c <_ZNKSt6vectorIfSaIfEE4sizeEv>
 810826a:	4604      	mov	r4, r0
 810826c:	68f8      	ldr	r0, [r7, #12]
 810826e:	f7fe fefd 	bl	810706c <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8108272:	4603      	mov	r3, r0
 8108274:	613b      	str	r3, [r7, #16]
 8108276:	f107 0208 	add.w	r2, r7, #8
 810827a:	f107 0310 	add.w	r3, r7, #16
 810827e:	4611      	mov	r1, r2
 8108280:	4618      	mov	r0, r3
 8108282:	f7fc fc6b 	bl	8104b5c <_ZSt3maxIjERKT_S2_S2_>
 8108286:	4603      	mov	r3, r0
 8108288:	681b      	ldr	r3, [r3, #0]
 810828a:	4423      	add	r3, r4
 810828c:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 810828e:	68f8      	ldr	r0, [r7, #12]
 8108290:	f7fe feec 	bl	810706c <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8108294:	4602      	mov	r2, r0
 8108296:	697b      	ldr	r3, [r7, #20]
 8108298:	4293      	cmp	r3, r2
 810829a:	d306      	bcc.n	81082aa <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x7a>
 810829c:	68f8      	ldr	r0, [r7, #12]
 810829e:	f7ff f809 	bl	81072b4 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 81082a2:	4602      	mov	r2, r0
 81082a4:	697b      	ldr	r3, [r7, #20]
 81082a6:	4293      	cmp	r3, r2
 81082a8:	d904      	bls.n	81082b4 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x84>
 81082aa:	68f8      	ldr	r0, [r7, #12]
 81082ac:	f7ff f802 	bl	81072b4 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 81082b0:	4603      	mov	r3, r0
 81082b2:	e000      	b.n	81082b6 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x86>
 81082b4:	697b      	ldr	r3, [r7, #20]
      }
 81082b6:	4618      	mov	r0, r3
 81082b8:	371c      	adds	r7, #28
 81082ba:	46bd      	mov	sp, r7
 81082bc:	bd90      	pop	{r4, r7, pc}

081082be <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 81082be:	b590      	push	{r4, r7, lr}
 81082c0:	b085      	sub	sp, #20
 81082c2:	af00      	add	r7, sp, #0
 81082c4:	60f8      	str	r0, [r7, #12]
 81082c6:	60b9      	str	r1, [r7, #8]
 81082c8:	607a      	str	r2, [r7, #4]
 81082ca:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 81082cc:	68f8      	ldr	r0, [r7, #12]
 81082ce:	f7ff f83a 	bl	8107346 <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 81082d2:	4604      	mov	r4, r0
 81082d4:	68b8      	ldr	r0, [r7, #8]
 81082d6:	f7ff f836 	bl	8107346 <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 81082da:	4601      	mov	r1, r0
 81082dc:	683b      	ldr	r3, [r7, #0]
 81082de:	687a      	ldr	r2, [r7, #4]
 81082e0:	4620      	mov	r0, r4
 81082e2:	f7ff fb20 	bl	8107926 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_fET0_T_S4_S3_RSaIT1_E>
 81082e6:	4603      	mov	r3, r0
    }
 81082e8:	4618      	mov	r0, r3
 81082ea:	3714      	adds	r7, #20
 81082ec:	46bd      	mov	sp, r7
 81082ee:	bd90      	pop	{r4, r7, pc}

081082f0 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>:
    __miter_base(_Iterator __it)
 81082f0:	b480      	push	{r7}
 81082f2:	b083      	sub	sp, #12
 81082f4:	af00      	add	r7, sp, #0
 81082f6:	6078      	str	r0, [r7, #4]
    { return __it; }
 81082f8:	687b      	ldr	r3, [r7, #4]
 81082fa:	4618      	mov	r0, r3
 81082fc:	370c      	adds	r7, #12
 81082fe:	46bd      	mov	sp, r7
 8108300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108304:	4770      	bx	lr

08108306 <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8108306:	b5b0      	push	{r4, r5, r7, lr}
 8108308:	b084      	sub	sp, #16
 810830a:	af00      	add	r7, sp, #0
 810830c:	60f8      	str	r0, [r7, #12]
 810830e:	60b9      	str	r1, [r7, #8]
 8108310:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8108312:	68f8      	ldr	r0, [r7, #12]
 8108314:	f000 fa33 	bl	810877e <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8108318:	4604      	mov	r4, r0
 810831a:	68b8      	ldr	r0, [r7, #8]
 810831c:	f000 fa2f 	bl	810877e <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8108320:	4605      	mov	r5, r0
 8108322:	6878      	ldr	r0, [r7, #4]
 8108324:	f000 fa2b 	bl	810877e <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8108328:	4603      	mov	r3, r0
 810832a:	461a      	mov	r2, r3
 810832c:	4629      	mov	r1, r5
 810832e:	4620      	mov	r0, r4
 8108330:	f000 fa33 	bl	810879a <_ZSt14__copy_move_a1ILb1EPfS0_ET1_T0_S2_S1_>
 8108334:	4603      	mov	r3, r0
 8108336:	4619      	mov	r1, r3
 8108338:	6878      	ldr	r0, [r7, #4]
 810833a:	f000 fa3e 	bl	81087ba <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>
 810833e:	4603      	mov	r3, r0
    }
 8108340:	4618      	mov	r0, r3
 8108342:	3710      	adds	r7, #16
 8108344:	46bd      	mov	sp, r7
 8108346:	bdb0      	pop	{r4, r5, r7, pc}

08108348 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
    swap(_Tp& __a, _Tp& __b)
 8108348:	b580      	push	{r7, lr}
 810834a:	b084      	sub	sp, #16
 810834c:	af00      	add	r7, sp, #0
 810834e:	6078      	str	r0, [r7, #4]
 8108350:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8108352:	6878      	ldr	r0, [r7, #4]
 8108354:	f7ff f8be 	bl	81074d4 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8108358:	4603      	mov	r3, r0
 810835a:	681b      	ldr	r3, [r3, #0]
 810835c:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 810835e:	6838      	ldr	r0, [r7, #0]
 8108360:	f7ff f8b8 	bl	81074d4 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8108364:	4603      	mov	r3, r0
 8108366:	681a      	ldr	r2, [r3, #0]
 8108368:	687b      	ldr	r3, [r7, #4]
 810836a:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 810836c:	f107 030c 	add.w	r3, r7, #12
 8108370:	4618      	mov	r0, r3
 8108372:	f7ff f8af 	bl	81074d4 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8108376:	4603      	mov	r3, r0
 8108378:	681a      	ldr	r2, [r3, #0]
 810837a:	683b      	ldr	r3, [r7, #0]
 810837c:	601a      	str	r2, [r3, #0]
    }
 810837e:	bf00      	nop
 8108380:	3710      	adds	r7, #16
 8108382:	46bd      	mov	sp, r7
 8108384:	bd80      	pop	{r7, pc}

08108386 <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 8108386:	b480      	push	{r7}
 8108388:	b083      	sub	sp, #12
 810838a:	af00      	add	r7, sp, #0
 810838c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 810838e:	687b      	ldr	r3, [r7, #4]
 8108390:	4618      	mov	r0, r3
 8108392:	370c      	adds	r7, #12
 8108394:	46bd      	mov	sp, r7
 8108396:	f85d 7b04 	ldr.w	r7, [sp], #4
 810839a:	4770      	bx	lr

0810839c <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 810839c:	b5b0      	push	{r4, r5, r7, lr}
 810839e:	b084      	sub	sp, #16
 81083a0:	af00      	add	r7, sp, #0
 81083a2:	60f8      	str	r0, [r7, #12]
 81083a4:	60b9      	str	r1, [r7, #8]
 81083a6:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 81083a8:	68f8      	ldr	r0, [r7, #12]
 81083aa:	f000 f9e8 	bl	810877e <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 81083ae:	4604      	mov	r4, r0
 81083b0:	68b8      	ldr	r0, [r7, #8]
 81083b2:	f000 f9e4 	bl	810877e <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 81083b6:	4605      	mov	r5, r0
 81083b8:	6878      	ldr	r0, [r7, #4]
 81083ba:	f000 f9e0 	bl	810877e <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 81083be:	4603      	mov	r3, r0
 81083c0:	461a      	mov	r2, r3
 81083c2:	4629      	mov	r1, r5
 81083c4:	4620      	mov	r0, r4
 81083c6:	f000 fa0f 	bl	81087e8 <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>
 81083ca:	4603      	mov	r3, r0
 81083cc:	4619      	mov	r1, r3
 81083ce:	6878      	ldr	r0, [r7, #4]
 81083d0:	f000 f9f3 	bl	81087ba <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>
 81083d4:	4603      	mov	r3, r0
    }
 81083d6:	4618      	mov	r0, r3
 81083d8:	3710      	adds	r7, #16
 81083da:	46bd      	mov	sp, r7
 81083dc:	bdb0      	pop	{r4, r5, r7, pc}

081083de <_ZNKSt15__new_allocatorIfE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 81083de:	b580      	push	{r7, lr}
 81083e0:	b082      	sub	sp, #8
 81083e2:	af00      	add	r7, sp, #0
 81083e4:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 81083e6:	6878      	ldr	r0, [r7, #4]
 81083e8:	f000 f805 	bl	81083f6 <_ZNKSt15__new_allocatorIfE11_M_max_sizeEv>
 81083ec:	4603      	mov	r3, r0
 81083ee:	4618      	mov	r0, r3
 81083f0:	3708      	adds	r7, #8
 81083f2:	46bd      	mov	sp, r7
 81083f4:	bd80      	pop	{r7, pc}

081083f6 <_ZNKSt15__new_allocatorIfE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 81083f6:	b480      	push	{r7}
 81083f8:	b083      	sub	sp, #12
 81083fa:	af00      	add	r7, sp, #0
 81083fc:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 81083fe:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      }
 8108402:	4618      	mov	r0, r3
 8108404:	370c      	adds	r7, #12
 8108406:	46bd      	mov	sp, r7
 8108408:	f85d 7b04 	ldr.w	r7, [sp], #4
 810840c:	4770      	bx	lr

0810840e <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 810840e:	b480      	push	{r7}
 8108410:	b083      	sub	sp, #12
 8108412:	af00      	add	r7, sp, #0
 8108414:	6078      	str	r0, [r7, #4]
    { return __it; }
 8108416:	687b      	ldr	r3, [r7, #4]
 8108418:	4618      	mov	r0, r3
 810841a:	370c      	adds	r7, #12
 810841c:	46bd      	mov	sp, r7
 810841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108422:	4770      	bx	lr

08108424 <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8108424:	b580      	push	{r7, lr}
 8108426:	b086      	sub	sp, #24
 8108428:	af00      	add	r7, sp, #0
 810842a:	60f8      	str	r0, [r7, #12]
 810842c:	60b9      	str	r1, [r7, #8]
 810842e:	607a      	str	r2, [r7, #4]
 8108430:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8108432:	68ba      	ldr	r2, [r7, #8]
 8108434:	68fb      	ldr	r3, [r7, #12]
 8108436:	1ad3      	subs	r3, r2, r3
 8108438:	109b      	asrs	r3, r3, #2
 810843a:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 810843c:	697b      	ldr	r3, [r7, #20]
 810843e:	2b00      	cmp	r3, #0
 8108440:	dd06      	ble.n	8108450 <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x2c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8108442:	697b      	ldr	r3, [r7, #20]
 8108444:	009b      	lsls	r3, r3, #2
 8108446:	461a      	mov	r2, r3
 8108448:	68f9      	ldr	r1, [r7, #12]
 810844a:	6878      	ldr	r0, [r7, #4]
 810844c:	f01a f896 	bl	812257c <memmove>
      return __result + __count;
 8108450:	697b      	ldr	r3, [r7, #20]
 8108452:	009b      	lsls	r3, r3, #2
 8108454:	687a      	ldr	r2, [r7, #4]
 8108456:	4413      	add	r3, r2
    }
 8108458:	4618      	mov	r0, r3
 810845a:	3718      	adds	r7, #24
 810845c:	46bd      	mov	sp, r7
 810845e:	bd80      	pop	{r7, pc}

08108460 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPfES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8108460:	b580      	push	{r7, lr}
 8108462:	b084      	sub	sp, #16
 8108464:	af00      	add	r7, sp, #0
 8108466:	60f8      	str	r0, [r7, #12]
 8108468:	60b9      	str	r1, [r7, #8]
 810846a:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 810846c:	687a      	ldr	r2, [r7, #4]
 810846e:	68b9      	ldr	r1, [r7, #8]
 8108470:	68f8      	ldr	r0, [r7, #12]
 8108472:	f000 f9c9 	bl	8108808 <_ZSt4copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>
 8108476:	4603      	mov	r3, r0
 8108478:	4618      	mov	r0, r3
 810847a:	3710      	adds	r7, #16
 810847c:	46bd      	mov	sp, r7
 810847e:	bd80      	pop	{r7, pc}

08108480 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 8108480:	b590      	push	{r4, r7, lr}
 8108482:	b085      	sub	sp, #20
 8108484:	af00      	add	r7, sp, #0
 8108486:	60f8      	str	r0, [r7, #12]
 8108488:	60b9      	str	r1, [r7, #8]
 810848a:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 810848c:	68f8      	ldr	r0, [r7, #12]
 810848e:	f000 f9d3 	bl	8108838 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8108492:	4604      	mov	r4, r0
 8108494:	68b8      	ldr	r0, [r7, #8]
 8108496:	f000 f9cf 	bl	8108838 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 810849a:	4603      	mov	r3, r0
 810849c:	687a      	ldr	r2, [r7, #4]
 810849e:	4619      	mov	r1, r3
 81084a0:	4620      	mov	r0, r4
 81084a2:	f000 f9d4 	bl	810884e <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>
 81084a6:	4603      	mov	r3, r0
    }
 81084a8:	4618      	mov	r0, r3
 81084aa:	3714      	adds	r7, #20
 81084ac:	46bd      	mov	sp, r7
 81084ae:	bd90      	pop	{r4, r7, pc}

081084b0 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>:
    __heap_select(_RandomAccessIterator __first,
 81084b0:	b580      	push	{r7, lr}
 81084b2:	b086      	sub	sp, #24
 81084b4:	af00      	add	r7, sp, #0
 81084b6:	60f8      	str	r0, [r7, #12]
 81084b8:	60b9      	str	r1, [r7, #8]
 81084ba:	607a      	str	r2, [r7, #4]
 81084bc:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 81084be:	463b      	mov	r3, r7
 81084c0:	461a      	mov	r2, r3
 81084c2:	68b9      	ldr	r1, [r7, #8]
 81084c4:	68f8      	ldr	r0, [r7, #12]
 81084c6:	f000 f9e5 	bl	8108894 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 81084ca:	68bb      	ldr	r3, [r7, #8]
 81084cc:	617b      	str	r3, [r7, #20]
 81084ce:	e013      	b.n	81084f8 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x48>
	if (__comp(__i, __first))
 81084d0:	463b      	mov	r3, r7
 81084d2:	68fa      	ldr	r2, [r7, #12]
 81084d4:	6979      	ldr	r1, [r7, #20]
 81084d6:	4618      	mov	r0, r3
 81084d8:	f000 f8e1 	bl	810869e <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 81084dc:	4603      	mov	r3, r0
 81084de:	2b00      	cmp	r3, #0
 81084e0:	d005      	beq.n	81084ee <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x3e>
	  std::__pop_heap(__first, __middle, __i, __comp);
 81084e2:	463b      	mov	r3, r7
 81084e4:	697a      	ldr	r2, [r7, #20]
 81084e6:	68b9      	ldr	r1, [r7, #8]
 81084e8:	68f8      	ldr	r0, [r7, #12]
 81084ea:	f000 fa41 	bl	8108970 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 81084ee:	f107 0314 	add.w	r3, r7, #20
 81084f2:	4618      	mov	r0, r3
 81084f4:	f7ff fc9a 	bl	8107e2c <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 81084f8:	1d3a      	adds	r2, r7, #4
 81084fa:	f107 0314 	add.w	r3, r7, #20
 81084fe:	4611      	mov	r1, r2
 8108500:	4618      	mov	r0, r3
 8108502:	f000 fa1d 	bl	8108940 <_ZN9__gnu_cxxltIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8108506:	4603      	mov	r3, r0
 8108508:	2b00      	cmp	r3, #0
 810850a:	d1e1      	bne.n	81084d0 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x20>
    }
 810850c:	bf00      	nop
 810850e:	bf00      	nop
 8108510:	3718      	adds	r7, #24
 8108512:	46bd      	mov	sp, r7
 8108514:	bd80      	pop	{r7, pc}

08108516 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>:
    }

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8108516:	b580      	push	{r7, lr}
 8108518:	b084      	sub	sp, #16
 810851a:	af00      	add	r7, sp, #0
 810851c:	60f8      	str	r0, [r7, #12]
 810851e:	60b9      	str	r1, [r7, #8]
 8108520:	607a      	str	r2, [r7, #4]
		_Compare& __comp)
    {
      while (__last - __first > 1)
 8108522:	e00a      	b.n	810853a <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0x24>
	{
	  --__last;
 8108524:	f107 0308 	add.w	r3, r7, #8
 8108528:	4618      	mov	r0, r3
 810852a:	f7ff fcc6 	bl	8107eba <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  std::__pop_heap(__first, __last, __last, __comp);
 810852e:	687b      	ldr	r3, [r7, #4]
 8108530:	68ba      	ldr	r2, [r7, #8]
 8108532:	68b9      	ldr	r1, [r7, #8]
 8108534:	68f8      	ldr	r0, [r7, #12]
 8108536:	f000 fa1b 	bl	8108970 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>
      while (__last - __first > 1)
 810853a:	f107 020c 	add.w	r2, r7, #12
 810853e:	f107 0308 	add.w	r3, r7, #8
 8108542:	4611      	mov	r1, r2
 8108544:	4618      	mov	r0, r3
 8108546:	f7ff fa83 	bl	8107a50 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 810854a:	4603      	mov	r3, r0
 810854c:	2b01      	cmp	r3, #1
 810854e:	bfcc      	ite	gt
 8108550:	2301      	movgt	r3, #1
 8108552:	2300      	movle	r3, #0
 8108554:	b2db      	uxtb	r3, r3
 8108556:	2b00      	cmp	r3, #0
 8108558:	d1e4      	bne.n	8108524 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xe>
	}
    }
 810855a:	bf00      	nop
 810855c:	bf00      	nop
 810855e:	3710      	adds	r7, #16
 8108560:	46bd      	mov	sp, r7
 8108562:	bd80      	pop	{r7, pc}

08108564 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 8108564:	b580      	push	{r7, lr}
 8108566:	b084      	sub	sp, #16
 8108568:	af00      	add	r7, sp, #0
 810856a:	60f8      	str	r0, [r7, #12]
 810856c:	60b9      	str	r1, [r7, #8]
 810856e:	607a      	str	r2, [r7, #4]
 8108570:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 8108572:	687a      	ldr	r2, [r7, #4]
 8108574:	68b9      	ldr	r1, [r7, #8]
 8108576:	f107 0018 	add.w	r0, r7, #24
 810857a:	f000 f890 	bl	810869e <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 810857e:	4603      	mov	r3, r0
 8108580:	2b00      	cmp	r3, #0
 8108582:	d020      	beq.n	81085c6 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x62>
	  if (__comp(__b, __c))
 8108584:	683a      	ldr	r2, [r7, #0]
 8108586:	6879      	ldr	r1, [r7, #4]
 8108588:	f107 0018 	add.w	r0, r7, #24
 810858c:	f000 f887 	bl	810869e <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 8108590:	4603      	mov	r3, r0
 8108592:	2b00      	cmp	r3, #0
 8108594:	d004      	beq.n	81085a0 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x3c>
	    std::iter_swap(__result, __b);
 8108596:	6879      	ldr	r1, [r7, #4]
 8108598:	68f8      	ldr	r0, [r7, #12]
 810859a:	f7ff fc30 	bl	8107dfe <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 810859e:	e032      	b.n	8108606 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	  else if (__comp(__a, __c))
 81085a0:	683a      	ldr	r2, [r7, #0]
 81085a2:	68b9      	ldr	r1, [r7, #8]
 81085a4:	f107 0018 	add.w	r0, r7, #24
 81085a8:	f000 f879 	bl	810869e <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 81085ac:	4603      	mov	r3, r0
 81085ae:	2b00      	cmp	r3, #0
 81085b0:	d004      	beq.n	81085bc <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x58>
	    std::iter_swap(__result, __c);
 81085b2:	6839      	ldr	r1, [r7, #0]
 81085b4:	68f8      	ldr	r0, [r7, #12]
 81085b6:	f7ff fc22 	bl	8107dfe <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 81085ba:	e024      	b.n	8108606 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	    std::iter_swap(__result, __a);
 81085bc:	68b9      	ldr	r1, [r7, #8]
 81085be:	68f8      	ldr	r0, [r7, #12]
 81085c0:	f7ff fc1d 	bl	8107dfe <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 81085c4:	e01f      	b.n	8108606 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
      else if (__comp(__a, __c))
 81085c6:	683a      	ldr	r2, [r7, #0]
 81085c8:	68b9      	ldr	r1, [r7, #8]
 81085ca:	f107 0018 	add.w	r0, r7, #24
 81085ce:	f000 f866 	bl	810869e <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 81085d2:	4603      	mov	r3, r0
 81085d4:	2b00      	cmp	r3, #0
 81085d6:	d004      	beq.n	81085e2 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x7e>
	std::iter_swap(__result, __a);
 81085d8:	68b9      	ldr	r1, [r7, #8]
 81085da:	68f8      	ldr	r0, [r7, #12]
 81085dc:	f7ff fc0f 	bl	8107dfe <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 81085e0:	e011      	b.n	8108606 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
      else if (__comp(__b, __c))
 81085e2:	683a      	ldr	r2, [r7, #0]
 81085e4:	6879      	ldr	r1, [r7, #4]
 81085e6:	f107 0018 	add.w	r0, r7, #24
 81085ea:	f000 f858 	bl	810869e <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 81085ee:	4603      	mov	r3, r0
 81085f0:	2b00      	cmp	r3, #0
 81085f2:	d004      	beq.n	81085fe <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x9a>
	std::iter_swap(__result, __c);
 81085f4:	6839      	ldr	r1, [r7, #0]
 81085f6:	68f8      	ldr	r0, [r7, #12]
 81085f8:	f7ff fc01 	bl	8107dfe <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 81085fc:	e003      	b.n	8108606 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	std::iter_swap(__result, __b);
 81085fe:	6879      	ldr	r1, [r7, #4]
 8108600:	68f8      	ldr	r0, [r7, #12]
 8108602:	f7ff fbfc 	bl	8107dfe <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 8108606:	bf00      	nop
 8108608:	3710      	adds	r7, #16
 810860a:	46bd      	mov	sp, r7
 810860c:	bd80      	pop	{r7, pc}

0810860e <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 810860e:	b580      	push	{r7, lr}
 8108610:	b084      	sub	sp, #16
 8108612:	af00      	add	r7, sp, #0
 8108614:	60f8      	str	r0, [r7, #12]
 8108616:	60b9      	str	r1, [r7, #8]
 8108618:	607a      	str	r2, [r7, #4]
 810861a:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 810861c:	e004      	b.n	8108628 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x1a>
	    ++__first;
 810861e:	f107 030c 	add.w	r3, r7, #12
 8108622:	4618      	mov	r0, r3
 8108624:	f7ff fc02 	bl	8107e2c <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
	  while (__comp(__first, __pivot))
 8108628:	463b      	mov	r3, r7
 810862a:	687a      	ldr	r2, [r7, #4]
 810862c:	68f9      	ldr	r1, [r7, #12]
 810862e:	4618      	mov	r0, r3
 8108630:	f000 f835 	bl	810869e <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 8108634:	4603      	mov	r3, r0
 8108636:	2b00      	cmp	r3, #0
 8108638:	d1f1      	bne.n	810861e <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x10>
	  --__last;
 810863a:	f107 0308 	add.w	r3, r7, #8
 810863e:	4618      	mov	r0, r3
 8108640:	f7ff fc3b 	bl	8107eba <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  while (__comp(__pivot, __last))
 8108644:	e004      	b.n	8108650 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x42>
	    --__last;
 8108646:	f107 0308 	add.w	r3, r7, #8
 810864a:	4618      	mov	r0, r3
 810864c:	f7ff fc35 	bl	8107eba <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  while (__comp(__pivot, __last))
 8108650:	463b      	mov	r3, r7
 8108652:	68ba      	ldr	r2, [r7, #8]
 8108654:	6879      	ldr	r1, [r7, #4]
 8108656:	4618      	mov	r0, r3
 8108658:	f000 f821 	bl	810869e <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 810865c:	4603      	mov	r3, r0
 810865e:	2b00      	cmp	r3, #0
 8108660:	d1f1      	bne.n	8108646 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x38>
	  if (!(__first < __last))
 8108662:	f107 0208 	add.w	r2, r7, #8
 8108666:	f107 030c 	add.w	r3, r7, #12
 810866a:	4611      	mov	r1, r2
 810866c:	4618      	mov	r0, r3
 810866e:	f000 f967 	bl	8108940 <_ZN9__gnu_cxxltIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8108672:	4603      	mov	r3, r0
 8108674:	f083 0301 	eor.w	r3, r3, #1
 8108678:	b2db      	uxtb	r3, r3
 810867a:	2b00      	cmp	r3, #0
 810867c:	d001      	beq.n	8108682 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x74>
	    return __first;
 810867e:	68fb      	ldr	r3, [r7, #12]
 8108680:	e009      	b.n	8108696 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x88>
	  std::iter_swap(__first, __last);
 8108682:	68b9      	ldr	r1, [r7, #8]
 8108684:	68f8      	ldr	r0, [r7, #12]
 8108686:	f7ff fbba 	bl	8107dfe <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
	  ++__first;
 810868a:	f107 030c 	add.w	r3, r7, #12
 810868e:	4618      	mov	r0, r3
 8108690:	f7ff fbcc 	bl	8107e2c <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
	  while (__comp(__first, __pivot))
 8108694:	e7c8      	b.n	8108628 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x1a>
    }
 8108696:	4618      	mov	r0, r3
 8108698:	3710      	adds	r7, #16
 810869a:	46bd      	mov	sp, r7
 810869c:	bd80      	pop	{r7, pc}

0810869e <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 810869e:	b580      	push	{r7, lr}
 81086a0:	ed2d 8b02 	vpush	{d8}
 81086a4:	b084      	sub	sp, #16
 81086a6:	af00      	add	r7, sp, #0
 81086a8:	60f8      	str	r0, [r7, #12]
 81086aa:	60b9      	str	r1, [r7, #8]
 81086ac:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 81086ae:	f107 0308 	add.w	r3, r7, #8
 81086b2:	4618      	mov	r0, r3
 81086b4:	f7ff fb66 	bl	8107d84 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 81086b8:	4603      	mov	r3, r0
 81086ba:	ed93 8a00 	vldr	s16, [r3]
 81086be:	1d3b      	adds	r3, r7, #4
 81086c0:	4618      	mov	r0, r3
 81086c2:	f7ff fb5f 	bl	8107d84 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 81086c6:	4603      	mov	r3, r0
 81086c8:	edd3 7a00 	vldr	s15, [r3]
 81086cc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 81086d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81086d4:	bf4c      	ite	mi
 81086d6:	2301      	movmi	r3, #1
 81086d8:	2300      	movpl	r3, #0
 81086da:	b2db      	uxtb	r3, r3
 81086dc:	4618      	mov	r0, r3
 81086de:	3710      	adds	r7, #16
 81086e0:	46bd      	mov	sp, r7
 81086e2:	ecbd 8b02 	vpop	{d8}
 81086e6:	bd80      	pop	{r7, pc}

081086e8 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 81086e8:	b590      	push	{r4, r7, lr}
 81086ea:	b085      	sub	sp, #20
 81086ec:	af00      	add	r7, sp, #0
 81086ee:	6078      	str	r0, [r7, #4]
 81086f0:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 81086f2:	1d3b      	adds	r3, r7, #4
 81086f4:	4618      	mov	r0, r3
 81086f6:	f7ff fb45 	bl	8107d84 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 81086fa:	4603      	mov	r3, r0
 81086fc:	4618      	mov	r0, r3
 81086fe:	f7fe fee9 	bl	81074d4 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8108702:	4603      	mov	r3, r0
 8108704:	681b      	ldr	r3, [r3, #0]
 8108706:	60fb      	str	r3, [r7, #12]
      _RandomAccessIterator __next = __last;
 8108708:	687b      	ldr	r3, [r7, #4]
 810870a:	60bb      	str	r3, [r7, #8]
      --__next;
 810870c:	f107 0308 	add.w	r3, r7, #8
 8108710:	4618      	mov	r0, r3
 8108712:	f7ff fbd2 	bl	8107eba <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
      while (__comp(__val, __next))
 8108716:	e017      	b.n	8108748 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x60>
	  *__last = _GLIBCXX_MOVE(*__next);
 8108718:	f107 0308 	add.w	r3, r7, #8
 810871c:	4618      	mov	r0, r3
 810871e:	f7ff fb31 	bl	8107d84 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8108722:	4603      	mov	r3, r0
 8108724:	4618      	mov	r0, r3
 8108726:	f7fe fed5 	bl	81074d4 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810872a:	4604      	mov	r4, r0
 810872c:	1d3b      	adds	r3, r7, #4
 810872e:	4618      	mov	r0, r3
 8108730:	f7ff fb28 	bl	8107d84 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8108734:	4602      	mov	r2, r0
 8108736:	6823      	ldr	r3, [r4, #0]
 8108738:	6013      	str	r3, [r2, #0]
	  __last = __next;
 810873a:	68bb      	ldr	r3, [r7, #8]
 810873c:	607b      	str	r3, [r7, #4]
	  --__next;
 810873e:	f107 0308 	add.w	r3, r7, #8
 8108742:	4618      	mov	r0, r3
 8108744:	f7ff fbb9 	bl	8107eba <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
      while (__comp(__val, __next))
 8108748:	f107 010c 	add.w	r1, r7, #12
 810874c:	463b      	mov	r3, r7
 810874e:	68ba      	ldr	r2, [r7, #8]
 8108750:	4618      	mov	r0, r3
 8108752:	f000 f94d 	bl	81089f0 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEbRT_T0_>
 8108756:	4603      	mov	r3, r0
 8108758:	2b00      	cmp	r3, #0
 810875a:	d1dd      	bne.n	8108718 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x30>
      *__last = _GLIBCXX_MOVE(__val);
 810875c:	f107 030c 	add.w	r3, r7, #12
 8108760:	4618      	mov	r0, r3
 8108762:	f7fe feb7 	bl	81074d4 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8108766:	4604      	mov	r4, r0
 8108768:	1d3b      	adds	r3, r7, #4
 810876a:	4618      	mov	r0, r3
 810876c:	f7ff fb0a 	bl	8107d84 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8108770:	4602      	mov	r2, r0
 8108772:	6823      	ldr	r3, [r4, #0]
 8108774:	6013      	str	r3, [r2, #0]
    }
 8108776:	bf00      	nop
 8108778:	3714      	adds	r7, #20
 810877a:	46bd      	mov	sp, r7
 810877c:	bd90      	pop	{r4, r7, pc}

0810877e <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 810877e:	b580      	push	{r7, lr}
 8108780:	b082      	sub	sp, #8
 8108782:	af00      	add	r7, sp, #0
 8108784:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8108786:	1d3b      	adds	r3, r7, #4
 8108788:	4618      	mov	r0, r3
 810878a:	f7ff fc4e 	bl	810802a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 810878e:	4603      	mov	r3, r0
 8108790:	681b      	ldr	r3, [r3, #0]
 8108792:	4618      	mov	r0, r3
 8108794:	3708      	adds	r7, #8
 8108796:	46bd      	mov	sp, r7
 8108798:	bd80      	pop	{r7, pc}

0810879a <_ZSt14__copy_move_a1ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 810879a:	b580      	push	{r7, lr}
 810879c:	b084      	sub	sp, #16
 810879e:	af00      	add	r7, sp, #0
 81087a0:	60f8      	str	r0, [r7, #12]
 81087a2:	60b9      	str	r1, [r7, #8]
 81087a4:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 81087a6:	687a      	ldr	r2, [r7, #4]
 81087a8:	68b9      	ldr	r1, [r7, #8]
 81087aa:	68f8      	ldr	r0, [r7, #12]
 81087ac:	f000 f940 	bl	8108a30 <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_>
 81087b0:	4603      	mov	r3, r0
 81087b2:	4618      	mov	r0, r3
 81087b4:	3710      	adds	r7, #16
 81087b6:	46bd      	mov	sp, r7
 81087b8:	bd80      	pop	{r7, pc}

081087ba <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 81087ba:	b580      	push	{r7, lr}
 81087bc:	b082      	sub	sp, #8
 81087be:	af00      	add	r7, sp, #0
 81087c0:	6078      	str	r0, [r7, #4]
 81087c2:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 81087c4:	6878      	ldr	r0, [r7, #4]
 81087c6:	f7ff ffda 	bl	810877e <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 81087ca:	4602      	mov	r2, r0
 81087cc:	683b      	ldr	r3, [r7, #0]
 81087ce:	1a9b      	subs	r3, r3, r2
 81087d0:	109b      	asrs	r3, r3, #2
 81087d2:	461a      	mov	r2, r3
 81087d4:	1d3b      	adds	r3, r7, #4
 81087d6:	4611      	mov	r1, r2
 81087d8:	4618      	mov	r0, r3
 81087da:	f7fe fce6 	bl	81071aa <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 81087de:	4603      	mov	r3, r0
 81087e0:	4618      	mov	r0, r3
 81087e2:	3708      	adds	r7, #8
 81087e4:	46bd      	mov	sp, r7
 81087e6:	bd80      	pop	{r7, pc}

081087e8 <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 81087e8:	b580      	push	{r7, lr}
 81087ea:	b084      	sub	sp, #16
 81087ec:	af00      	add	r7, sp, #0
 81087ee:	60f8      	str	r0, [r7, #12]
 81087f0:	60b9      	str	r1, [r7, #8]
 81087f2:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 81087f4:	687a      	ldr	r2, [r7, #4]
 81087f6:	68b9      	ldr	r1, [r7, #8]
 81087f8:	68f8      	ldr	r0, [r7, #12]
 81087fa:	f000 f929 	bl	8108a50 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>
 81087fe:	4603      	mov	r3, r0
 8108800:	4618      	mov	r0, r3
 8108802:	3710      	adds	r7, #16
 8108804:	46bd      	mov	sp, r7
 8108806:	bd80      	pop	{r7, pc}

08108808 <_ZSt4copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8108808:	b590      	push	{r4, r7, lr}
 810880a:	b085      	sub	sp, #20
 810880c:	af00      	add	r7, sp, #0
 810880e:	60f8      	str	r0, [r7, #12]
 8108810:	60b9      	str	r1, [r7, #8]
 8108812:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8108814:	68f8      	ldr	r0, [r7, #12]
 8108816:	f000 f92b 	bl	8108a70 <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 810881a:	4604      	mov	r4, r0
 810881c:	68b8      	ldr	r0, [r7, #8]
 810881e:	f000 f927 	bl	8108a70 <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8108822:	4603      	mov	r3, r0
 8108824:	687a      	ldr	r2, [r7, #4]
 8108826:	4619      	mov	r1, r3
 8108828:	4620      	mov	r0, r4
 810882a:	f000 f932 	bl	8108a92 <_ZSt13__copy_move_aILb1EPfS0_ET1_T0_S2_S1_>
 810882e:	4603      	mov	r3, r0
    }
 8108830:	4618      	mov	r0, r3
 8108832:	3714      	adds	r7, #20
 8108834:	46bd      	mov	sp, r7
 8108836:	bd90      	pop	{r4, r7, pc}

08108838 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>:
    __miter_base(_Iterator __it)
 8108838:	b480      	push	{r7}
 810883a:	b083      	sub	sp, #12
 810883c:	af00      	add	r7, sp, #0
 810883e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8108840:	687b      	ldr	r3, [r7, #4]
 8108842:	4618      	mov	r0, r3
 8108844:	370c      	adds	r7, #12
 8108846:	46bd      	mov	sp, r7
 8108848:	f85d 7b04 	ldr.w	r7, [sp], #4
 810884c:	4770      	bx	lr

0810884e <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 810884e:	b5b0      	push	{r4, r5, r7, lr}
 8108850:	b084      	sub	sp, #16
 8108852:	af00      	add	r7, sp, #0
 8108854:	60f8      	str	r0, [r7, #12]
 8108856:	60b9      	str	r1, [r7, #8]
 8108858:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 810885a:	68f8      	ldr	r0, [r7, #12]
 810885c:	f000 f93c 	bl	8108ad8 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8108860:	4604      	mov	r4, r0
 8108862:	68b8      	ldr	r0, [r7, #8]
 8108864:	f000 f938 	bl	8108ad8 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8108868:	4605      	mov	r5, r0
 810886a:	687b      	ldr	r3, [r7, #4]
 810886c:	4618      	mov	r0, r3
 810886e:	f7ff fdce 	bl	810840e <_ZSt12__niter_baseIPfET_S1_>
 8108872:	4603      	mov	r3, r0
 8108874:	461a      	mov	r2, r3
 8108876:	4629      	mov	r1, r5
 8108878:	4620      	mov	r0, r4
 810887a:	f000 f93b 	bl	8108af4 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 810887e:	4602      	mov	r2, r0
 8108880:	1d3b      	adds	r3, r7, #4
 8108882:	4611      	mov	r1, r2
 8108884:	4618      	mov	r0, r3
 8108886:	f000 f945 	bl	8108b14 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 810888a:	4603      	mov	r3, r0
    }
 810888c:	4618      	mov	r0, r3
 810888e:	3710      	adds	r7, #16
 8108890:	46bd      	mov	sp, r7
 8108892:	bdb0      	pop	{r4, r5, r7, pc}

08108894 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8108894:	b590      	push	{r4, r7, lr}
 8108896:	b089      	sub	sp, #36	@ 0x24
 8108898:	af00      	add	r7, sp, #0
 810889a:	60f8      	str	r0, [r7, #12]
 810889c:	60b9      	str	r1, [r7, #8]
 810889e:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 81088a0:	f107 020c 	add.w	r2, r7, #12
 81088a4:	f107 0308 	add.w	r3, r7, #8
 81088a8:	4611      	mov	r1, r2
 81088aa:	4618      	mov	r0, r3
 81088ac:	f7ff f8d0 	bl	8107a50 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 81088b0:	4603      	mov	r3, r0
 81088b2:	2b01      	cmp	r3, #1
 81088b4:	bfd4      	ite	le
 81088b6:	2301      	movle	r3, #1
 81088b8:	2300      	movgt	r3, #0
 81088ba:	b2db      	uxtb	r3, r3
 81088bc:	2b00      	cmp	r3, #0
 81088be:	d139      	bne.n	8108934 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa0>
      const _DistanceType __len = __last - __first;
 81088c0:	f107 020c 	add.w	r2, r7, #12
 81088c4:	f107 0308 	add.w	r3, r7, #8
 81088c8:	4611      	mov	r1, r2
 81088ca:	4618      	mov	r0, r3
 81088cc:	f7ff f8c0 	bl	8107a50 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 81088d0:	61b8      	str	r0, [r7, #24]
      _DistanceType __parent = (__len - 2) / 2;
 81088d2:	69bb      	ldr	r3, [r7, #24]
 81088d4:	3b02      	subs	r3, #2
 81088d6:	0fda      	lsrs	r2, r3, #31
 81088d8:	4413      	add	r3, r2
 81088da:	105b      	asrs	r3, r3, #1
 81088dc:	61fb      	str	r3, [r7, #28]
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 81088de:	f107 030c 	add.w	r3, r7, #12
 81088e2:	69f9      	ldr	r1, [r7, #28]
 81088e4:	4618      	mov	r0, r3
 81088e6:	f7fe fc60 	bl	81071aa <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 81088ea:	4603      	mov	r3, r0
 81088ec:	617b      	str	r3, [r7, #20]
 81088ee:	f107 0314 	add.w	r3, r7, #20
 81088f2:	4618      	mov	r0, r3
 81088f4:	f7ff fa46 	bl	8107d84 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 81088f8:	4603      	mov	r3, r0
 81088fa:	4618      	mov	r0, r3
 81088fc:	f7fe fdea 	bl	81074d4 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8108900:	4603      	mov	r3, r0
 8108902:	681b      	ldr	r3, [r3, #0]
 8108904:	613b      	str	r3, [r7, #16]
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 8108906:	f107 0310 	add.w	r3, r7, #16
 810890a:	4618      	mov	r0, r3
 810890c:	f7fe fde2 	bl	81074d4 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8108910:	4603      	mov	r3, r0
 8108912:	edd3 7a00 	vldr	s15, [r3]
 8108916:	4623      	mov	r3, r4
 8108918:	eeb0 0a67 	vmov.f32	s0, s15
 810891c:	69ba      	ldr	r2, [r7, #24]
 810891e:	69f9      	ldr	r1, [r7, #28]
 8108920:	68f8      	ldr	r0, [r7, #12]
 8108922:	f000 f903 	bl	8108b2c <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>
	  if (__parent == 0)
 8108926:	69fb      	ldr	r3, [r7, #28]
 8108928:	2b00      	cmp	r3, #0
 810892a:	d005      	beq.n	8108938 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa4>
	  __parent--;
 810892c:	69fb      	ldr	r3, [r7, #28]
 810892e:	3b01      	subs	r3, #1
 8108930:	61fb      	str	r3, [r7, #28]
      while (true)
 8108932:	e7d4      	b.n	81088de <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0x4a>
	return;
 8108934:	bf00      	nop
 8108936:	e000      	b.n	810893a <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa6>
	    return;
 8108938:	bf00      	nop
    }
 810893a:	3724      	adds	r7, #36	@ 0x24
 810893c:	46bd      	mov	sp, r7
 810893e:	bd90      	pop	{r4, r7, pc}

08108940 <_ZN9__gnu_cxxltIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
 8108940:	b590      	push	{r4, r7, lr}
 8108942:	b083      	sub	sp, #12
 8108944:	af00      	add	r7, sp, #0
 8108946:	6078      	str	r0, [r7, #4]
 8108948:	6039      	str	r1, [r7, #0]
    { return __lhs.base() < __rhs.base(); }
 810894a:	6878      	ldr	r0, [r7, #4]
 810894c:	f7ff fb6d 	bl	810802a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8108950:	4603      	mov	r3, r0
 8108952:	681c      	ldr	r4, [r3, #0]
 8108954:	6838      	ldr	r0, [r7, #0]
 8108956:	f7ff fb68 	bl	810802a <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 810895a:	4603      	mov	r3, r0
 810895c:	681b      	ldr	r3, [r3, #0]
 810895e:	429c      	cmp	r4, r3
 8108960:	bf34      	ite	cc
 8108962:	2301      	movcc	r3, #1
 8108964:	2300      	movcs	r3, #0
 8108966:	b2db      	uxtb	r3, r3
 8108968:	4618      	mov	r0, r3
 810896a:	370c      	adds	r7, #12
 810896c:	46bd      	mov	sp, r7
 810896e:	bd90      	pop	{r4, r7, pc}

08108970 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8108970:	b5b0      	push	{r4, r5, r7, lr}
 8108972:	b086      	sub	sp, #24
 8108974:	af00      	add	r7, sp, #0
 8108976:	60f8      	str	r0, [r7, #12]
 8108978:	60b9      	str	r1, [r7, #8]
 810897a:	607a      	str	r2, [r7, #4]
 810897c:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 810897e:	1d3b      	adds	r3, r7, #4
 8108980:	4618      	mov	r0, r3
 8108982:	f7ff f9ff 	bl	8107d84 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8108986:	4603      	mov	r3, r0
 8108988:	4618      	mov	r0, r3
 810898a:	f7fe fda3 	bl	81074d4 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810898e:	4603      	mov	r3, r0
 8108990:	681b      	ldr	r3, [r3, #0]
 8108992:	617b      	str	r3, [r7, #20]
      *__result = _GLIBCXX_MOVE(*__first);
 8108994:	f107 030c 	add.w	r3, r7, #12
 8108998:	4618      	mov	r0, r3
 810899a:	f7ff f9f3 	bl	8107d84 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810899e:	4603      	mov	r3, r0
 81089a0:	4618      	mov	r0, r3
 81089a2:	f7fe fd97 	bl	81074d4 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 81089a6:	4604      	mov	r4, r0
 81089a8:	1d3b      	adds	r3, r7, #4
 81089aa:	4618      	mov	r0, r3
 81089ac:	f7ff f9ea 	bl	8107d84 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 81089b0:	4602      	mov	r2, r0
 81089b2:	6823      	ldr	r3, [r4, #0]
 81089b4:	6013      	str	r3, [r2, #0]
			 _DistanceType(__last - __first),
 81089b6:	f107 020c 	add.w	r2, r7, #12
 81089ba:	f107 0308 	add.w	r3, r7, #8
 81089be:	4611      	mov	r1, r2
 81089c0:	4618      	mov	r0, r3
 81089c2:	f7ff f845 	bl	8107a50 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 81089c6:	4604      	mov	r4, r0
			 _GLIBCXX_MOVE(__value), __comp);
 81089c8:	f107 0314 	add.w	r3, r7, #20
 81089cc:	4618      	mov	r0, r3
 81089ce:	f7fe fd81 	bl	81074d4 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 81089d2:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 81089d4:	edd3 7a00 	vldr	s15, [r3]
 81089d8:	462b      	mov	r3, r5
 81089da:	eeb0 0a67 	vmov.f32	s0, s15
 81089de:	4622      	mov	r2, r4
 81089e0:	2100      	movs	r1, #0
 81089e2:	68f8      	ldr	r0, [r7, #12]
 81089e4:	f000 f8a2 	bl	8108b2c <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>
    }
 81089e8:	bf00      	nop
 81089ea:	3718      	adds	r7, #24
 81089ec:	46bd      	mov	sp, r7
 81089ee:	bdb0      	pop	{r4, r5, r7, pc}

081089f0 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEbRT_T0_>:
      operator()(_Value& __val, _Iterator __it) const
 81089f0:	b580      	push	{r7, lr}
 81089f2:	ed2d 8b02 	vpush	{d8}
 81089f6:	b084      	sub	sp, #16
 81089f8:	af00      	add	r7, sp, #0
 81089fa:	60f8      	str	r0, [r7, #12]
 81089fc:	60b9      	str	r1, [r7, #8]
 81089fe:	607a      	str	r2, [r7, #4]
      { return __val < *__it; }
 8108a00:	68bb      	ldr	r3, [r7, #8]
 8108a02:	ed93 8a00 	vldr	s16, [r3]
 8108a06:	1d3b      	adds	r3, r7, #4
 8108a08:	4618      	mov	r0, r3
 8108a0a:	f7ff f9bb 	bl	8107d84 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8108a0e:	4603      	mov	r3, r0
 8108a10:	edd3 7a00 	vldr	s15, [r3]
 8108a14:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8108a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8108a1c:	bf4c      	ite	mi
 8108a1e:	2301      	movmi	r3, #1
 8108a20:	2300      	movpl	r3, #0
 8108a22:	b2db      	uxtb	r3, r3
 8108a24:	4618      	mov	r0, r3
 8108a26:	3710      	adds	r7, #16
 8108a28:	46bd      	mov	sp, r7
 8108a2a:	ecbd 8b02 	vpop	{d8}
 8108a2e:	bd80      	pop	{r7, pc}

08108a30 <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8108a30:	b580      	push	{r7, lr}
 8108a32:	b084      	sub	sp, #16
 8108a34:	af00      	add	r7, sp, #0
 8108a36:	60f8      	str	r0, [r7, #12]
 8108a38:	60b9      	str	r1, [r7, #8]
 8108a3a:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8108a3c:	687a      	ldr	r2, [r7, #4]
 8108a3e:	68b9      	ldr	r1, [r7, #8]
 8108a40:	68f8      	ldr	r0, [r7, #12]
 8108a42:	f000 f925 	bl	8108c90 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8108a46:	4603      	mov	r3, r0
    }
 8108a48:	4618      	mov	r0, r3
 8108a4a:	3710      	adds	r7, #16
 8108a4c:	46bd      	mov	sp, r7
 8108a4e:	bd80      	pop	{r7, pc}

08108a50 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8108a50:	b580      	push	{r7, lr}
 8108a52:	b084      	sub	sp, #16
 8108a54:	af00      	add	r7, sp, #0
 8108a56:	60f8      	str	r0, [r7, #12]
 8108a58:	60b9      	str	r1, [r7, #8]
 8108a5a:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8108a5c:	687a      	ldr	r2, [r7, #4]
 8108a5e:	68b9      	ldr	r1, [r7, #8]
 8108a60:	68f8      	ldr	r0, [r7, #12]
 8108a62:	f000 f932 	bl	8108cca <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>
 8108a66:	4603      	mov	r3, r0
    }
 8108a68:	4618      	mov	r0, r3
 8108a6a:	3710      	adds	r7, #16
 8108a6c:	46bd      	mov	sp, r7
 8108a6e:	bd80      	pop	{r7, pc}

08108a70 <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 8108a70:	b580      	push	{r7, lr}
 8108a72:	b082      	sub	sp, #8
 8108a74:	af00      	add	r7, sp, #0
 8108a76:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 8108a78:	1d3b      	adds	r3, r7, #4
 8108a7a:	4618      	mov	r0, r3
 8108a7c:	f000 f947 	bl	8108d0e <_ZNKSt13move_iteratorIPfE4baseEv>
 8108a80:	4603      	mov	r3, r0
 8108a82:	4618      	mov	r0, r3
 8108a84:	f000 f94f 	bl	8108d26 <_ZSt12__miter_baseIPfET_S1_>
 8108a88:	4603      	mov	r3, r0
 8108a8a:	4618      	mov	r0, r3
 8108a8c:	3708      	adds	r7, #8
 8108a8e:	46bd      	mov	sp, r7
 8108a90:	bd80      	pop	{r7, pc}

08108a92 <_ZSt13__copy_move_aILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8108a92:	b5b0      	push	{r4, r5, r7, lr}
 8108a94:	b084      	sub	sp, #16
 8108a96:	af00      	add	r7, sp, #0
 8108a98:	60f8      	str	r0, [r7, #12]
 8108a9a:	60b9      	str	r1, [r7, #8]
 8108a9c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8108a9e:	68f8      	ldr	r0, [r7, #12]
 8108aa0:	f7ff fcb5 	bl	810840e <_ZSt12__niter_baseIPfET_S1_>
 8108aa4:	4604      	mov	r4, r0
 8108aa6:	68b8      	ldr	r0, [r7, #8]
 8108aa8:	f7ff fcb1 	bl	810840e <_ZSt12__niter_baseIPfET_S1_>
 8108aac:	4605      	mov	r5, r0
 8108aae:	687b      	ldr	r3, [r7, #4]
 8108ab0:	4618      	mov	r0, r3
 8108ab2:	f7ff fcac 	bl	810840e <_ZSt12__niter_baseIPfET_S1_>
 8108ab6:	4603      	mov	r3, r0
 8108ab8:	461a      	mov	r2, r3
 8108aba:	4629      	mov	r1, r5
 8108abc:	4620      	mov	r0, r4
 8108abe:	f7ff fe6c 	bl	810879a <_ZSt14__copy_move_a1ILb1EPfS0_ET1_T0_S2_S1_>
 8108ac2:	4602      	mov	r2, r0
 8108ac4:	1d3b      	adds	r3, r7, #4
 8108ac6:	4611      	mov	r1, r2
 8108ac8:	4618      	mov	r0, r3
 8108aca:	f000 f823 	bl	8108b14 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 8108ace:	4603      	mov	r3, r0
    }
 8108ad0:	4618      	mov	r0, r3
 8108ad2:	3710      	adds	r7, #16
 8108ad4:	46bd      	mov	sp, r7
 8108ad6:	bdb0      	pop	{r4, r5, r7, pc}

08108ad8 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8108ad8:	b580      	push	{r7, lr}
 8108ada:	b082      	sub	sp, #8
 8108adc:	af00      	add	r7, sp, #0
 8108ade:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8108ae0:	1d3b      	adds	r3, r7, #4
 8108ae2:	4618      	mov	r0, r3
 8108ae4:	f000 f92a 	bl	8108d3c <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>
 8108ae8:	4603      	mov	r3, r0
 8108aea:	681b      	ldr	r3, [r3, #0]
 8108aec:	4618      	mov	r0, r3
 8108aee:	3708      	adds	r7, #8
 8108af0:	46bd      	mov	sp, r7
 8108af2:	bd80      	pop	{r7, pc}

08108af4 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8108af4:	b580      	push	{r7, lr}
 8108af6:	b084      	sub	sp, #16
 8108af8:	af00      	add	r7, sp, #0
 8108afa:	60f8      	str	r0, [r7, #12]
 8108afc:	60b9      	str	r1, [r7, #8]
 8108afe:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8108b00:	687a      	ldr	r2, [r7, #4]
 8108b02:	68b9      	ldr	r1, [r7, #8]
 8108b04:	68f8      	ldr	r0, [r7, #12]
 8108b06:	f000 f924 	bl	8108d52 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>
 8108b0a:	4603      	mov	r3, r0
 8108b0c:	4618      	mov	r0, r3
 8108b0e:	3710      	adds	r7, #16
 8108b10:	46bd      	mov	sp, r7
 8108b12:	bd80      	pop	{r7, pc}

08108b14 <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8108b14:	b480      	push	{r7}
 8108b16:	b083      	sub	sp, #12
 8108b18:	af00      	add	r7, sp, #0
 8108b1a:	6078      	str	r0, [r7, #4]
 8108b1c:	6039      	str	r1, [r7, #0]
    { return __res; }
 8108b1e:	683b      	ldr	r3, [r7, #0]
 8108b20:	4618      	mov	r0, r3
 8108b22:	370c      	adds	r7, #12
 8108b24:	46bd      	mov	sp, r7
 8108b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108b2a:	4770      	bx	lr

08108b2c <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 8108b2c:	b5b0      	push	{r4, r5, r7, lr}
 8108b2e:	b08e      	sub	sp, #56	@ 0x38
 8108b30:	af00      	add	r7, sp, #0
 8108b32:	6178      	str	r0, [r7, #20]
 8108b34:	6139      	str	r1, [r7, #16]
 8108b36:	60fa      	str	r2, [r7, #12]
 8108b38:	ed87 0a02 	vstr	s0, [r7, #8]
 8108b3c:	713b      	strb	r3, [r7, #4]
      const _Distance __topIndex = __holeIndex;
 8108b3e:	693b      	ldr	r3, [r7, #16]
 8108b40:	633b      	str	r3, [r7, #48]	@ 0x30
      _Distance __secondChild = __holeIndex;
 8108b42:	693b      	ldr	r3, [r7, #16]
 8108b44:	637b      	str	r3, [r7, #52]	@ 0x34
      while (__secondChild < (__len - 1) / 2)
 8108b46:	e042      	b.n	8108bce <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0xa2>
	  __secondChild = 2 * (__secondChild + 1);
 8108b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108b4a:	3301      	adds	r3, #1
 8108b4c:	005b      	lsls	r3, r3, #1
 8108b4e:	637b      	str	r3, [r7, #52]	@ 0x34
	  if (__comp(__first + __secondChild,
 8108b50:	f107 0314 	add.w	r3, r7, #20
 8108b54:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8108b56:	4618      	mov	r0, r3
 8108b58:	f7fe fb27 	bl	81071aa <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8108b5c:	4604      	mov	r4, r0
 8108b5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108b60:	1e5a      	subs	r2, r3, #1
 8108b62:	f107 0314 	add.w	r3, r7, #20
 8108b66:	4611      	mov	r1, r2
 8108b68:	4618      	mov	r0, r3
 8108b6a:	f7fe fb1e 	bl	81071aa <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8108b6e:	4602      	mov	r2, r0
 8108b70:	1d3b      	adds	r3, r7, #4
 8108b72:	4621      	mov	r1, r4
 8108b74:	4618      	mov	r0, r3
 8108b76:	f7ff fd92 	bl	810869e <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 8108b7a:	4603      	mov	r3, r0
 8108b7c:	2b00      	cmp	r3, #0
 8108b7e:	d002      	beq.n	8108b86 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x5a>
	    __secondChild--;
 8108b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108b82:	3b01      	subs	r3, #1
 8108b84:	637b      	str	r3, [r7, #52]	@ 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 8108b86:	f107 0314 	add.w	r3, r7, #20
 8108b8a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8108b8c:	4618      	mov	r0, r3
 8108b8e:	f7fe fb0c 	bl	81071aa <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8108b92:	4603      	mov	r3, r0
 8108b94:	623b      	str	r3, [r7, #32]
 8108b96:	f107 0320 	add.w	r3, r7, #32
 8108b9a:	4618      	mov	r0, r3
 8108b9c:	f7ff f8f2 	bl	8107d84 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8108ba0:	4603      	mov	r3, r0
 8108ba2:	4618      	mov	r0, r3
 8108ba4:	f7fe fc96 	bl	81074d4 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8108ba8:	4604      	mov	r4, r0
 8108baa:	f107 0314 	add.w	r3, r7, #20
 8108bae:	6939      	ldr	r1, [r7, #16]
 8108bb0:	4618      	mov	r0, r3
 8108bb2:	f7fe fafa 	bl	81071aa <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8108bb6:	4603      	mov	r3, r0
 8108bb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8108bba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8108bbe:	4618      	mov	r0, r3
 8108bc0:	f7ff f8e0 	bl	8107d84 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8108bc4:	4602      	mov	r2, r0
 8108bc6:	6823      	ldr	r3, [r4, #0]
 8108bc8:	6013      	str	r3, [r2, #0]
	  __holeIndex = __secondChild;
 8108bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108bcc:	613b      	str	r3, [r7, #16]
      while (__secondChild < (__len - 1) / 2)
 8108bce:	68fb      	ldr	r3, [r7, #12]
 8108bd0:	3b01      	subs	r3, #1
 8108bd2:	0fda      	lsrs	r2, r3, #31
 8108bd4:	4413      	add	r3, r2
 8108bd6:	105b      	asrs	r3, r3, #1
 8108bd8:	461a      	mov	r2, r3
 8108bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108bdc:	4293      	cmp	r3, r2
 8108bde:	dbb3      	blt.n	8108b48 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x1c>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 8108be0:	68fb      	ldr	r3, [r7, #12]
 8108be2:	f003 0301 	and.w	r3, r3, #1
 8108be6:	2b00      	cmp	r3, #0
 8108be8:	d133      	bne.n	8108c52 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x126>
 8108bea:	68fb      	ldr	r3, [r7, #12]
 8108bec:	3b02      	subs	r3, #2
 8108bee:	0fda      	lsrs	r2, r3, #31
 8108bf0:	4413      	add	r3, r2
 8108bf2:	105b      	asrs	r3, r3, #1
 8108bf4:	461a      	mov	r2, r3
 8108bf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108bf8:	4293      	cmp	r3, r2
 8108bfa:	d12a      	bne.n	8108c52 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x126>
	  __secondChild = 2 * (__secondChild + 1);
 8108bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108bfe:	3301      	adds	r3, #1
 8108c00:	005b      	lsls	r3, r3, #1
 8108c02:	637b      	str	r3, [r7, #52]	@ 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 8108c04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108c06:	1e5a      	subs	r2, r3, #1
 8108c08:	f107 0314 	add.w	r3, r7, #20
 8108c0c:	4611      	mov	r1, r2
 8108c0e:	4618      	mov	r0, r3
 8108c10:	f7fe facb 	bl	81071aa <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8108c14:	4603      	mov	r3, r0
 8108c16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8108c18:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8108c1c:	4618      	mov	r0, r3
 8108c1e:	f7ff f8b1 	bl	8107d84 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8108c22:	4603      	mov	r3, r0
 8108c24:	4618      	mov	r0, r3
 8108c26:	f7fe fc55 	bl	81074d4 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8108c2a:	4604      	mov	r4, r0
 8108c2c:	f107 0314 	add.w	r3, r7, #20
 8108c30:	6939      	ldr	r1, [r7, #16]
 8108c32:	4618      	mov	r0, r3
 8108c34:	f7fe fab9 	bl	81071aa <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8108c38:	4603      	mov	r3, r0
 8108c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8108c3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8108c40:	4618      	mov	r0, r3
 8108c42:	f7ff f89f 	bl	8107d84 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8108c46:	4602      	mov	r2, r0
 8108c48:	6823      	ldr	r3, [r4, #0]
 8108c4a:	6013      	str	r3, [r2, #0]
	  __holeIndex = __secondChild - 1;
 8108c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108c4e:	3b01      	subs	r3, #1
 8108c50:	613b      	str	r3, [r7, #16]
	__cmp(_GLIBCXX_MOVE(__comp));
 8108c52:	1d3b      	adds	r3, r7, #4
 8108c54:	4618      	mov	r0, r3
 8108c56:	f000 f88c 	bl	8108d72 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_less_iterEEONSt16remove_referenceIT_E4typeEOS5_>
 8108c5a:	f107 031c 	add.w	r3, r7, #28
 8108c5e:	4629      	mov	r1, r5
 8108c60:	4618      	mov	r0, r3
 8108c62:	f7fd ff16 	bl	8106a92 <_ZN9__gnu_cxx5__ops14_Iter_less_valC1ENS0_15_Iter_less_iterE>
		       _GLIBCXX_MOVE(__value), __cmp);
 8108c66:	f107 0308 	add.w	r3, r7, #8
 8108c6a:	4618      	mov	r0, r3
 8108c6c:	f7fe fc32 	bl	81074d4 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8108c70:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 8108c72:	edd3 7a00 	vldr	s15, [r3]
 8108c76:	f107 031c 	add.w	r3, r7, #28
 8108c7a:	eeb0 0a67 	vmov.f32	s0, s15
 8108c7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8108c80:	6939      	ldr	r1, [r7, #16]
 8108c82:	6978      	ldr	r0, [r7, #20]
 8108c84:	f000 f880 	bl	8108d88 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_>
    }
 8108c88:	bf00      	nop
 8108c8a:	3738      	adds	r7, #56	@ 0x38
 8108c8c:	46bd      	mov	sp, r7
 8108c8e:	bdb0      	pop	{r4, r5, r7, pc}

08108c90 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8108c90:	b580      	push	{r7, lr}
 8108c92:	b086      	sub	sp, #24
 8108c94:	af00      	add	r7, sp, #0
 8108c96:	60f8      	str	r0, [r7, #12]
 8108c98:	60b9      	str	r1, [r7, #8]
 8108c9a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8108c9c:	68ba      	ldr	r2, [r7, #8]
 8108c9e:	68fb      	ldr	r3, [r7, #12]
 8108ca0:	1ad3      	subs	r3, r2, r3
 8108ca2:	109b      	asrs	r3, r3, #2
 8108ca4:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8108ca6:	697b      	ldr	r3, [r7, #20]
 8108ca8:	2b00      	cmp	r3, #0
 8108caa:	d006      	beq.n	8108cba <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8108cac:	697b      	ldr	r3, [r7, #20]
 8108cae:	009b      	lsls	r3, r3, #2
 8108cb0:	461a      	mov	r2, r3
 8108cb2:	68f9      	ldr	r1, [r7, #12]
 8108cb4:	6878      	ldr	r0, [r7, #4]
 8108cb6:	f019 fc61 	bl	812257c <memmove>
	  return __result + _Num;
 8108cba:	697b      	ldr	r3, [r7, #20]
 8108cbc:	009b      	lsls	r3, r3, #2
 8108cbe:	687a      	ldr	r2, [r7, #4]
 8108cc0:	4413      	add	r3, r2
	}
 8108cc2:	4618      	mov	r0, r3
 8108cc4:	3718      	adds	r7, #24
 8108cc6:	46bd      	mov	sp, r7
 8108cc8:	bd80      	pop	{r7, pc}

08108cca <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8108cca:	b580      	push	{r7, lr}
 8108ccc:	b086      	sub	sp, #24
 8108cce:	af00      	add	r7, sp, #0
 8108cd0:	60f8      	str	r0, [r7, #12]
 8108cd2:	60b9      	str	r1, [r7, #8]
 8108cd4:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8108cd6:	68ba      	ldr	r2, [r7, #8]
 8108cd8:	68fb      	ldr	r3, [r7, #12]
 8108cda:	1ad3      	subs	r3, r2, r3
 8108cdc:	109b      	asrs	r3, r3, #2
 8108cde:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8108ce0:	697b      	ldr	r3, [r7, #20]
 8108ce2:	2b00      	cmp	r3, #0
 8108ce4:	d00a      	beq.n	8108cfc <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8108ce6:	697b      	ldr	r3, [r7, #20]
 8108ce8:	009b      	lsls	r3, r3, #2
 8108cea:	425b      	negs	r3, r3
 8108cec:	687a      	ldr	r2, [r7, #4]
 8108cee:	18d0      	adds	r0, r2, r3
 8108cf0:	697b      	ldr	r3, [r7, #20]
 8108cf2:	009b      	lsls	r3, r3, #2
 8108cf4:	461a      	mov	r2, r3
 8108cf6:	68f9      	ldr	r1, [r7, #12]
 8108cf8:	f019 fc40 	bl	812257c <memmove>
	  return __result - _Num;
 8108cfc:	697b      	ldr	r3, [r7, #20]
 8108cfe:	009b      	lsls	r3, r3, #2
 8108d00:	425b      	negs	r3, r3
 8108d02:	687a      	ldr	r2, [r7, #4]
 8108d04:	4413      	add	r3, r2
	}
 8108d06:	4618      	mov	r0, r3
 8108d08:	3718      	adds	r7, #24
 8108d0a:	46bd      	mov	sp, r7
 8108d0c:	bd80      	pop	{r7, pc}

08108d0e <_ZNKSt13move_iteratorIPfE4baseEv>:
      base() const
 8108d0e:	b480      	push	{r7}
 8108d10:	b083      	sub	sp, #12
 8108d12:	af00      	add	r7, sp, #0
 8108d14:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8108d16:	687b      	ldr	r3, [r7, #4]
 8108d18:	681b      	ldr	r3, [r3, #0]
 8108d1a:	4618      	mov	r0, r3
 8108d1c:	370c      	adds	r7, #12
 8108d1e:	46bd      	mov	sp, r7
 8108d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d24:	4770      	bx	lr

08108d26 <_ZSt12__miter_baseIPfET_S1_>:
    __miter_base(_Iterator __it)
 8108d26:	b480      	push	{r7}
 8108d28:	b083      	sub	sp, #12
 8108d2a:	af00      	add	r7, sp, #0
 8108d2c:	6078      	str	r0, [r7, #4]
    { return __it; }
 8108d2e:	687b      	ldr	r3, [r7, #4]
 8108d30:	4618      	mov	r0, r3
 8108d32:	370c      	adds	r7, #12
 8108d34:	46bd      	mov	sp, r7
 8108d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d3a:	4770      	bx	lr

08108d3c <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8108d3c:	b480      	push	{r7}
 8108d3e:	b083      	sub	sp, #12
 8108d40:	af00      	add	r7, sp, #0
 8108d42:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8108d44:	687b      	ldr	r3, [r7, #4]
 8108d46:	4618      	mov	r0, r3
 8108d48:	370c      	adds	r7, #12
 8108d4a:	46bd      	mov	sp, r7
 8108d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d50:	4770      	bx	lr

08108d52 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8108d52:	b580      	push	{r7, lr}
 8108d54:	b084      	sub	sp, #16
 8108d56:	af00      	add	r7, sp, #0
 8108d58:	60f8      	str	r0, [r7, #12]
 8108d5a:	60b9      	str	r1, [r7, #8]
 8108d5c:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8108d5e:	687a      	ldr	r2, [r7, #4]
 8108d60:	68b9      	ldr	r1, [r7, #8]
 8108d62:	68f8      	ldr	r0, [r7, #12]
 8108d64:	f000 f87d 	bl	8108e62 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8108d68:	4603      	mov	r3, r0
    }
 8108d6a:	4618      	mov	r0, r3
 8108d6c:	3710      	adds	r7, #16
 8108d6e:	46bd      	mov	sp, r7
 8108d70:	bd80      	pop	{r7, pc}

08108d72 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_less_iterEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8108d72:	b480      	push	{r7}
 8108d74:	b083      	sub	sp, #12
 8108d76:	af00      	add	r7, sp, #0
 8108d78:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8108d7a:	687b      	ldr	r3, [r7, #4]
 8108d7c:	4618      	mov	r0, r3
 8108d7e:	370c      	adds	r7, #12
 8108d80:	46bd      	mov	sp, r7
 8108d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d86:	4770      	bx	lr

08108d88 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 8108d88:	b590      	push	{r4, r7, lr}
 8108d8a:	b08b      	sub	sp, #44	@ 0x2c
 8108d8c:	af00      	add	r7, sp, #0
 8108d8e:	6178      	str	r0, [r7, #20]
 8108d90:	6139      	str	r1, [r7, #16]
 8108d92:	60fa      	str	r2, [r7, #12]
 8108d94:	ed87 0a02 	vstr	s0, [r7, #8]
 8108d98:	607b      	str	r3, [r7, #4]
      _Distance __parent = (__holeIndex - 1) / 2;
 8108d9a:	693b      	ldr	r3, [r7, #16]
 8108d9c:	3b01      	subs	r3, #1
 8108d9e:	0fda      	lsrs	r2, r3, #31
 8108da0:	4413      	add	r3, r2
 8108da2:	105b      	asrs	r3, r3, #1
 8108da4:	627b      	str	r3, [r7, #36]	@ 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8108da6:	e029      	b.n	8108dfc <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0x74>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 8108da8:	f107 0314 	add.w	r3, r7, #20
 8108dac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8108dae:	4618      	mov	r0, r3
 8108db0:	f7fe f9fb 	bl	81071aa <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8108db4:	4603      	mov	r3, r0
 8108db6:	61bb      	str	r3, [r7, #24]
 8108db8:	f107 0318 	add.w	r3, r7, #24
 8108dbc:	4618      	mov	r0, r3
 8108dbe:	f7fe ffe1 	bl	8107d84 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8108dc2:	4603      	mov	r3, r0
 8108dc4:	4618      	mov	r0, r3
 8108dc6:	f7fe fb85 	bl	81074d4 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8108dca:	4604      	mov	r4, r0
 8108dcc:	f107 0314 	add.w	r3, r7, #20
 8108dd0:	6939      	ldr	r1, [r7, #16]
 8108dd2:	4618      	mov	r0, r3
 8108dd4:	f7fe f9e9 	bl	81071aa <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8108dd8:	4603      	mov	r3, r0
 8108dda:	61fb      	str	r3, [r7, #28]
 8108ddc:	f107 031c 	add.w	r3, r7, #28
 8108de0:	4618      	mov	r0, r3
 8108de2:	f7fe ffcf 	bl	8107d84 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8108de6:	4602      	mov	r2, r0
 8108de8:	6823      	ldr	r3, [r4, #0]
 8108dea:	6013      	str	r3, [r2, #0]
	  __holeIndex = __parent;
 8108dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108dee:	613b      	str	r3, [r7, #16]
	  __parent = (__holeIndex - 1) / 2;
 8108df0:	693b      	ldr	r3, [r7, #16]
 8108df2:	3b01      	subs	r3, #1
 8108df4:	0fda      	lsrs	r2, r3, #31
 8108df6:	4413      	add	r3, r2
 8108df8:	105b      	asrs	r3, r3, #1
 8108dfa:	627b      	str	r3, [r7, #36]	@ 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8108dfc:	693a      	ldr	r2, [r7, #16]
 8108dfe:	68fb      	ldr	r3, [r7, #12]
 8108e00:	429a      	cmp	r2, r3
 8108e02:	dd11      	ble.n	8108e28 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa0>
 8108e04:	f107 0314 	add.w	r3, r7, #20
 8108e08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8108e0a:	4618      	mov	r0, r3
 8108e0c:	f7fe f9cd 	bl	81071aa <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8108e10:	4601      	mov	r1, r0
 8108e12:	f107 0308 	add.w	r3, r7, #8
 8108e16:	461a      	mov	r2, r3
 8108e18:	6878      	ldr	r0, [r7, #4]
 8108e1a:	f000 f83f 	bl	8108e9c <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEEbT_RT0_>
 8108e1e:	4603      	mov	r3, r0
 8108e20:	2b00      	cmp	r3, #0
 8108e22:	d001      	beq.n	8108e28 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa0>
 8108e24:	2301      	movs	r3, #1
 8108e26:	e000      	b.n	8108e2a <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa2>
 8108e28:	2300      	movs	r3, #0
 8108e2a:	2b00      	cmp	r3, #0
 8108e2c:	d1bc      	bne.n	8108da8 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0x20>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 8108e2e:	f107 0308 	add.w	r3, r7, #8
 8108e32:	4618      	mov	r0, r3
 8108e34:	f7fe fb4e 	bl	81074d4 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8108e38:	4604      	mov	r4, r0
 8108e3a:	f107 0314 	add.w	r3, r7, #20
 8108e3e:	6939      	ldr	r1, [r7, #16]
 8108e40:	4618      	mov	r0, r3
 8108e42:	f7fe f9b2 	bl	81071aa <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8108e46:	4603      	mov	r3, r0
 8108e48:	623b      	str	r3, [r7, #32]
 8108e4a:	f107 0320 	add.w	r3, r7, #32
 8108e4e:	4618      	mov	r0, r3
 8108e50:	f7fe ff98 	bl	8107d84 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8108e54:	4602      	mov	r2, r0
 8108e56:	6823      	ldr	r3, [r4, #0]
 8108e58:	6013      	str	r3, [r2, #0]
    }
 8108e5a:	bf00      	nop
 8108e5c:	372c      	adds	r7, #44	@ 0x2c
 8108e5e:	46bd      	mov	sp, r7
 8108e60:	bd90      	pop	{r4, r7, pc}

08108e62 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8108e62:	b580      	push	{r7, lr}
 8108e64:	b086      	sub	sp, #24
 8108e66:	af00      	add	r7, sp, #0
 8108e68:	60f8      	str	r0, [r7, #12]
 8108e6a:	60b9      	str	r1, [r7, #8]
 8108e6c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8108e6e:	68ba      	ldr	r2, [r7, #8]
 8108e70:	68fb      	ldr	r3, [r7, #12]
 8108e72:	1ad3      	subs	r3, r2, r3
 8108e74:	109b      	asrs	r3, r3, #2
 8108e76:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8108e78:	697b      	ldr	r3, [r7, #20]
 8108e7a:	2b00      	cmp	r3, #0
 8108e7c:	d006      	beq.n	8108e8c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8108e7e:	697b      	ldr	r3, [r7, #20]
 8108e80:	009b      	lsls	r3, r3, #2
 8108e82:	461a      	mov	r2, r3
 8108e84:	68f9      	ldr	r1, [r7, #12]
 8108e86:	6878      	ldr	r0, [r7, #4]
 8108e88:	f019 fb78 	bl	812257c <memmove>
	  return __result + _Num;
 8108e8c:	697b      	ldr	r3, [r7, #20]
 8108e8e:	009b      	lsls	r3, r3, #2
 8108e90:	687a      	ldr	r2, [r7, #4]
 8108e92:	4413      	add	r3, r2
	}
 8108e94:	4618      	mov	r0, r3
 8108e96:	3718      	adds	r7, #24
 8108e98:	46bd      	mov	sp, r7
 8108e9a:	bd80      	pop	{r7, pc}

08108e9c <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEEbT_RT0_>:
      operator()(_Iterator __it, _Value& __val) const
 8108e9c:	b580      	push	{r7, lr}
 8108e9e:	b084      	sub	sp, #16
 8108ea0:	af00      	add	r7, sp, #0
 8108ea2:	60f8      	str	r0, [r7, #12]
 8108ea4:	60b9      	str	r1, [r7, #8]
 8108ea6:	607a      	str	r2, [r7, #4]
      { return *__it < __val; }
 8108ea8:	f107 0308 	add.w	r3, r7, #8
 8108eac:	4618      	mov	r0, r3
 8108eae:	f7fe ff69 	bl	8107d84 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8108eb2:	4603      	mov	r3, r0
 8108eb4:	ed93 7a00 	vldr	s14, [r3]
 8108eb8:	687b      	ldr	r3, [r7, #4]
 8108eba:	edd3 7a00 	vldr	s15, [r3]
 8108ebe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8108ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8108ec6:	bf4c      	ite	mi
 8108ec8:	2301      	movmi	r3, #1
 8108eca:	2300      	movpl	r3, #0
 8108ecc:	b2db      	uxtb	r3, r3
 8108ece:	4618      	mov	r0, r3
 8108ed0:	3710      	adds	r7, #16
 8108ed2:	46bd      	mov	sp, r7
 8108ed4:	bd80      	pop	{r7, pc}

08108ed6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8108ed6:	b480      	push	{r7}
 8108ed8:	b083      	sub	sp, #12
 8108eda:	af00      	add	r7, sp, #0
 8108edc:	6078      	str	r0, [r7, #4]
 8108ede:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8108ee0:	687b      	ldr	r3, [r7, #4]
 8108ee2:	2b00      	cmp	r3, #0
 8108ee4:	d00b      	beq.n	8108efe <LAN8742_RegisterBusIO+0x28>
 8108ee6:	683b      	ldr	r3, [r7, #0]
 8108ee8:	68db      	ldr	r3, [r3, #12]
 8108eea:	2b00      	cmp	r3, #0
 8108eec:	d007      	beq.n	8108efe <LAN8742_RegisterBusIO+0x28>
 8108eee:	683b      	ldr	r3, [r7, #0]
 8108ef0:	689b      	ldr	r3, [r3, #8]
 8108ef2:	2b00      	cmp	r3, #0
 8108ef4:	d003      	beq.n	8108efe <LAN8742_RegisterBusIO+0x28>
 8108ef6:	683b      	ldr	r3, [r7, #0]
 8108ef8:	691b      	ldr	r3, [r3, #16]
 8108efa:	2b00      	cmp	r3, #0
 8108efc:	d102      	bne.n	8108f04 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8108efe:	f04f 33ff 	mov.w	r3, #4294967295
 8108f02:	e014      	b.n	8108f2e <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8108f04:	683b      	ldr	r3, [r7, #0]
 8108f06:	681a      	ldr	r2, [r3, #0]
 8108f08:	687b      	ldr	r3, [r7, #4]
 8108f0a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8108f0c:	683b      	ldr	r3, [r7, #0]
 8108f0e:	685a      	ldr	r2, [r3, #4]
 8108f10:	687b      	ldr	r3, [r7, #4]
 8108f12:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8108f14:	683b      	ldr	r3, [r7, #0]
 8108f16:	68da      	ldr	r2, [r3, #12]
 8108f18:	687b      	ldr	r3, [r7, #4]
 8108f1a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8108f1c:	683b      	ldr	r3, [r7, #0]
 8108f1e:	689a      	ldr	r2, [r3, #8]
 8108f20:	687b      	ldr	r3, [r7, #4]
 8108f22:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8108f24:	683b      	ldr	r3, [r7, #0]
 8108f26:	691a      	ldr	r2, [r3, #16]
 8108f28:	687b      	ldr	r3, [r7, #4]
 8108f2a:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8108f2c:	2300      	movs	r3, #0
}
 8108f2e:	4618      	mov	r0, r3
 8108f30:	370c      	adds	r7, #12
 8108f32:	46bd      	mov	sp, r7
 8108f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108f38:	4770      	bx	lr

08108f3a <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8108f3a:	b580      	push	{r7, lr}
 8108f3c:	b086      	sub	sp, #24
 8108f3e:	af00      	add	r7, sp, #0
 8108f40:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8108f42:	2300      	movs	r3, #0
 8108f44:	60fb      	str	r3, [r7, #12]
 8108f46:	2300      	movs	r3, #0
 8108f48:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8108f4a:	2300      	movs	r3, #0
 8108f4c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8108f4e:	687b      	ldr	r3, [r7, #4]
 8108f50:	685b      	ldr	r3, [r3, #4]
 8108f52:	2b00      	cmp	r3, #0
 8108f54:	d139      	bne.n	8108fca <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8108f56:	687b      	ldr	r3, [r7, #4]
 8108f58:	689b      	ldr	r3, [r3, #8]
 8108f5a:	2b00      	cmp	r3, #0
 8108f5c:	d002      	beq.n	8108f64 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8108f5e:	687b      	ldr	r3, [r7, #4]
 8108f60:	689b      	ldr	r3, [r3, #8]
 8108f62:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8108f64:	687b      	ldr	r3, [r7, #4]
 8108f66:	2220      	movs	r2, #32
 8108f68:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8108f6a:	2300      	movs	r3, #0
 8108f6c:	617b      	str	r3, [r7, #20]
 8108f6e:	e01c      	b.n	8108faa <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8108f70:	687b      	ldr	r3, [r7, #4]
 8108f72:	695b      	ldr	r3, [r3, #20]
 8108f74:	f107 020c 	add.w	r2, r7, #12
 8108f78:	2112      	movs	r1, #18
 8108f7a:	6978      	ldr	r0, [r7, #20]
 8108f7c:	4798      	blx	r3
 8108f7e:	4603      	mov	r3, r0
 8108f80:	2b00      	cmp	r3, #0
 8108f82:	da03      	bge.n	8108f8c <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8108f84:	f06f 0304 	mvn.w	r3, #4
 8108f88:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8108f8a:	e00b      	b.n	8108fa4 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8108f8c:	68fb      	ldr	r3, [r7, #12]
 8108f8e:	f003 031f 	and.w	r3, r3, #31
 8108f92:	697a      	ldr	r2, [r7, #20]
 8108f94:	429a      	cmp	r2, r3
 8108f96:	d105      	bne.n	8108fa4 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8108f98:	687b      	ldr	r3, [r7, #4]
 8108f9a:	697a      	ldr	r2, [r7, #20]
 8108f9c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8108f9e:	2300      	movs	r3, #0
 8108fa0:	613b      	str	r3, [r7, #16]
         break;
 8108fa2:	e005      	b.n	8108fb0 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8108fa4:	697b      	ldr	r3, [r7, #20]
 8108fa6:	3301      	adds	r3, #1
 8108fa8:	617b      	str	r3, [r7, #20]
 8108faa:	697b      	ldr	r3, [r7, #20]
 8108fac:	2b1f      	cmp	r3, #31
 8108fae:	d9df      	bls.n	8108f70 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8108fb0:	687b      	ldr	r3, [r7, #4]
 8108fb2:	681b      	ldr	r3, [r3, #0]
 8108fb4:	2b1f      	cmp	r3, #31
 8108fb6:	d902      	bls.n	8108fbe <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8108fb8:	f06f 0302 	mvn.w	r3, #2
 8108fbc:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8108fbe:	693b      	ldr	r3, [r7, #16]
 8108fc0:	2b00      	cmp	r3, #0
 8108fc2:	d102      	bne.n	8108fca <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8108fc4:	687b      	ldr	r3, [r7, #4]
 8108fc6:	2201      	movs	r2, #1
 8108fc8:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8108fca:	693b      	ldr	r3, [r7, #16]
 }
 8108fcc:	4618      	mov	r0, r3
 8108fce:	3718      	adds	r7, #24
 8108fd0:	46bd      	mov	sp, r7
 8108fd2:	bd80      	pop	{r7, pc}

08108fd4 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8108fd4:	b580      	push	{r7, lr}
 8108fd6:	b084      	sub	sp, #16
 8108fd8:	af00      	add	r7, sp, #0
 8108fda:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8108fdc:	2300      	movs	r3, #0
 8108fde:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8108fe0:	687b      	ldr	r3, [r7, #4]
 8108fe2:	695b      	ldr	r3, [r3, #20]
 8108fe4:	687a      	ldr	r2, [r7, #4]
 8108fe6:	6810      	ldr	r0, [r2, #0]
 8108fe8:	f107 020c 	add.w	r2, r7, #12
 8108fec:	2101      	movs	r1, #1
 8108fee:	4798      	blx	r3
 8108ff0:	4603      	mov	r3, r0
 8108ff2:	2b00      	cmp	r3, #0
 8108ff4:	da02      	bge.n	8108ffc <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8108ff6:	f06f 0304 	mvn.w	r3, #4
 8108ffa:	e06e      	b.n	81090da <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8108ffc:	687b      	ldr	r3, [r7, #4]
 8108ffe:	695b      	ldr	r3, [r3, #20]
 8109000:	687a      	ldr	r2, [r7, #4]
 8109002:	6810      	ldr	r0, [r2, #0]
 8109004:	f107 020c 	add.w	r2, r7, #12
 8109008:	2101      	movs	r1, #1
 810900a:	4798      	blx	r3
 810900c:	4603      	mov	r3, r0
 810900e:	2b00      	cmp	r3, #0
 8109010:	da02      	bge.n	8109018 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8109012:	f06f 0304 	mvn.w	r3, #4
 8109016:	e060      	b.n	81090da <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8109018:	68fb      	ldr	r3, [r7, #12]
 810901a:	f003 0304 	and.w	r3, r3, #4
 810901e:	2b00      	cmp	r3, #0
 8109020:	d101      	bne.n	8109026 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8109022:	2301      	movs	r3, #1
 8109024:	e059      	b.n	81090da <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8109026:	687b      	ldr	r3, [r7, #4]
 8109028:	695b      	ldr	r3, [r3, #20]
 810902a:	687a      	ldr	r2, [r7, #4]
 810902c:	6810      	ldr	r0, [r2, #0]
 810902e:	f107 020c 	add.w	r2, r7, #12
 8109032:	2100      	movs	r1, #0
 8109034:	4798      	blx	r3
 8109036:	4603      	mov	r3, r0
 8109038:	2b00      	cmp	r3, #0
 810903a:	da02      	bge.n	8109042 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 810903c:	f06f 0304 	mvn.w	r3, #4
 8109040:	e04b      	b.n	81090da <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8109042:	68fb      	ldr	r3, [r7, #12]
 8109044:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8109048:	2b00      	cmp	r3, #0
 810904a:	d11b      	bne.n	8109084 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 810904c:	68fb      	ldr	r3, [r7, #12]
 810904e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8109052:	2b00      	cmp	r3, #0
 8109054:	d006      	beq.n	8109064 <LAN8742_GetLinkState+0x90>
 8109056:	68fb      	ldr	r3, [r7, #12]
 8109058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810905c:	2b00      	cmp	r3, #0
 810905e:	d001      	beq.n	8109064 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8109060:	2302      	movs	r3, #2
 8109062:	e03a      	b.n	81090da <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8109064:	68fb      	ldr	r3, [r7, #12]
 8109066:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810906a:	2b00      	cmp	r3, #0
 810906c:	d001      	beq.n	8109072 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 810906e:	2303      	movs	r3, #3
 8109070:	e033      	b.n	81090da <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8109072:	68fb      	ldr	r3, [r7, #12]
 8109074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8109078:	2b00      	cmp	r3, #0
 810907a:	d001      	beq.n	8109080 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 810907c:	2304      	movs	r3, #4
 810907e:	e02c      	b.n	81090da <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8109080:	2305      	movs	r3, #5
 8109082:	e02a      	b.n	81090da <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8109084:	687b      	ldr	r3, [r7, #4]
 8109086:	695b      	ldr	r3, [r3, #20]
 8109088:	687a      	ldr	r2, [r7, #4]
 810908a:	6810      	ldr	r0, [r2, #0]
 810908c:	f107 020c 	add.w	r2, r7, #12
 8109090:	211f      	movs	r1, #31
 8109092:	4798      	blx	r3
 8109094:	4603      	mov	r3, r0
 8109096:	2b00      	cmp	r3, #0
 8109098:	da02      	bge.n	81090a0 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 810909a:	f06f 0304 	mvn.w	r3, #4
 810909e:	e01c      	b.n	81090da <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 81090a0:	68fb      	ldr	r3, [r7, #12]
 81090a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 81090a6:	2b00      	cmp	r3, #0
 81090a8:	d101      	bne.n	81090ae <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 81090aa:	2306      	movs	r3, #6
 81090ac:	e015      	b.n	81090da <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 81090ae:	68fb      	ldr	r3, [r7, #12]
 81090b0:	f003 031c 	and.w	r3, r3, #28
 81090b4:	2b18      	cmp	r3, #24
 81090b6:	d101      	bne.n	81090bc <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 81090b8:	2302      	movs	r3, #2
 81090ba:	e00e      	b.n	81090da <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 81090bc:	68fb      	ldr	r3, [r7, #12]
 81090be:	f003 031c 	and.w	r3, r3, #28
 81090c2:	2b08      	cmp	r3, #8
 81090c4:	d101      	bne.n	81090ca <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 81090c6:	2303      	movs	r3, #3
 81090c8:	e007      	b.n	81090da <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 81090ca:	68fb      	ldr	r3, [r7, #12]
 81090cc:	f003 031c 	and.w	r3, r3, #28
 81090d0:	2b14      	cmp	r3, #20
 81090d2:	d101      	bne.n	81090d8 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 81090d4:	2304      	movs	r3, #4
 81090d6:	e000      	b.n	81090da <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 81090d8:	2305      	movs	r3, #5
    }
  }
}
 81090da:	4618      	mov	r0, r3
 81090dc:	3710      	adds	r7, #16
 81090de:	46bd      	mov	sp, r7
 81090e0:	bd80      	pop	{r7, pc}
	...

081090e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81090e4:	b480      	push	{r7}
 81090e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81090e8:	4b0b      	ldr	r3, [pc, #44]	@ (8109118 <SystemInit+0x34>)
 81090ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81090ee:	4a0a      	ldr	r2, [pc, #40]	@ (8109118 <SystemInit+0x34>)
 81090f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81090f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81090f8:	4b07      	ldr	r3, [pc, #28]	@ (8109118 <SystemInit+0x34>)
 81090fa:	691b      	ldr	r3, [r3, #16]
 81090fc:	4a06      	ldr	r2, [pc, #24]	@ (8109118 <SystemInit+0x34>)
 81090fe:	f043 0310 	orr.w	r3, r3, #16
 8109102:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8109104:	4b04      	ldr	r3, [pc, #16]	@ (8109118 <SystemInit+0x34>)
 8109106:	f04f 6201 	mov.w	r2, #135266304	@ 0x8100000
 810910a:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 810910c:	bf00      	nop
 810910e:	46bd      	mov	sp, r7
 8109110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109114:	4770      	bx	lr
 8109116:	bf00      	nop
 8109118:	e000ed00 	.word	0xe000ed00

0810911c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 810911c:	b580      	push	{r7, lr}
 810911e:	b082      	sub	sp, #8
 8109120:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8109122:	4b28      	ldr	r3, [pc, #160]	@ (81091c4 <HAL_Init+0xa8>)
 8109124:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8109128:	4a26      	ldr	r2, [pc, #152]	@ (81091c4 <HAL_Init+0xa8>)
 810912a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 810912e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8109132:	4b24      	ldr	r3, [pc, #144]	@ (81091c4 <HAL_Init+0xa8>)
 8109134:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8109138:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810913c:	603b      	str	r3, [r7, #0]
 810913e:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8109140:	4b21      	ldr	r3, [pc, #132]	@ (81091c8 <HAL_Init+0xac>)
 8109142:	681b      	ldr	r3, [r3, #0]
 8109144:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8109148:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 810914c:	4a1e      	ldr	r2, [pc, #120]	@ (81091c8 <HAL_Init+0xac>)
 810914e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8109152:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8109154:	4b1c      	ldr	r3, [pc, #112]	@ (81091c8 <HAL_Init+0xac>)
 8109156:	681b      	ldr	r3, [r3, #0]
 8109158:	4a1b      	ldr	r2, [pc, #108]	@ (81091c8 <HAL_Init+0xac>)
 810915a:	f043 0301 	orr.w	r3, r3, #1
 810915e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8109160:	2003      	movs	r0, #3
 8109162:	f000 f91a 	bl	810939a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8109166:	f002 ff79 	bl	810c05c <HAL_RCC_GetSysClockFreq>
 810916a:	4602      	mov	r2, r0
 810916c:	4b15      	ldr	r3, [pc, #84]	@ (81091c4 <HAL_Init+0xa8>)
 810916e:	699b      	ldr	r3, [r3, #24]
 8109170:	0a1b      	lsrs	r3, r3, #8
 8109172:	f003 030f 	and.w	r3, r3, #15
 8109176:	4915      	ldr	r1, [pc, #84]	@ (81091cc <HAL_Init+0xb0>)
 8109178:	5ccb      	ldrb	r3, [r1, r3]
 810917a:	f003 031f 	and.w	r3, r3, #31
 810917e:	fa22 f303 	lsr.w	r3, r2, r3
 8109182:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8109184:	4b0f      	ldr	r3, [pc, #60]	@ (81091c4 <HAL_Init+0xa8>)
 8109186:	699b      	ldr	r3, [r3, #24]
 8109188:	f003 030f 	and.w	r3, r3, #15
 810918c:	4a0f      	ldr	r2, [pc, #60]	@ (81091cc <HAL_Init+0xb0>)
 810918e:	5cd3      	ldrb	r3, [r2, r3]
 8109190:	f003 031f 	and.w	r3, r3, #31
 8109194:	687a      	ldr	r2, [r7, #4]
 8109196:	fa22 f303 	lsr.w	r3, r2, r3
 810919a:	4a0d      	ldr	r2, [pc, #52]	@ (81091d0 <HAL_Init+0xb4>)
 810919c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810919e:	4b0c      	ldr	r3, [pc, #48]	@ (81091d0 <HAL_Init+0xb4>)
 81091a0:	681b      	ldr	r3, [r3, #0]
 81091a2:	4a0c      	ldr	r2, [pc, #48]	@ (81091d4 <HAL_Init+0xb8>)
 81091a4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81091a6:	2000      	movs	r0, #0
 81091a8:	f7f7 ff46 	bl	8101038 <HAL_InitTick>
 81091ac:	4603      	mov	r3, r0
 81091ae:	2b00      	cmp	r3, #0
 81091b0:	d001      	beq.n	81091b6 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81091b2:	2301      	movs	r3, #1
 81091b4:	e002      	b.n	81091bc <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81091b6:	f7f7 fe1f 	bl	8100df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81091ba:	2300      	movs	r3, #0
}
 81091bc:	4618      	mov	r0, r3
 81091be:	3708      	adds	r7, #8
 81091c0:	46bd      	mov	sp, r7
 81091c2:	bd80      	pop	{r7, pc}
 81091c4:	58024400 	.word	0x58024400
 81091c8:	40024400 	.word	0x40024400
 81091cc:	08128970 	.word	0x08128970
 81091d0:	10000018 	.word	0x10000018
 81091d4:	10000014 	.word	0x10000014

081091d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81091d8:	b480      	push	{r7}
 81091da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81091dc:	4b06      	ldr	r3, [pc, #24]	@ (81091f8 <HAL_IncTick+0x20>)
 81091de:	781b      	ldrb	r3, [r3, #0]
 81091e0:	461a      	mov	r2, r3
 81091e2:	4b06      	ldr	r3, [pc, #24]	@ (81091fc <HAL_IncTick+0x24>)
 81091e4:	681b      	ldr	r3, [r3, #0]
 81091e6:	4413      	add	r3, r2
 81091e8:	4a04      	ldr	r2, [pc, #16]	@ (81091fc <HAL_IncTick+0x24>)
 81091ea:	6013      	str	r3, [r2, #0]
}
 81091ec:	bf00      	nop
 81091ee:	46bd      	mov	sp, r7
 81091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81091f4:	4770      	bx	lr
 81091f6:	bf00      	nop
 81091f8:	10000020 	.word	0x10000020
 81091fc:	100003d4 	.word	0x100003d4

08109200 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8109200:	b480      	push	{r7}
 8109202:	af00      	add	r7, sp, #0
  return uwTick;
 8109204:	4b03      	ldr	r3, [pc, #12]	@ (8109214 <HAL_GetTick+0x14>)
 8109206:	681b      	ldr	r3, [r3, #0]
}
 8109208:	4618      	mov	r0, r3
 810920a:	46bd      	mov	sp, r7
 810920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109210:	4770      	bx	lr
 8109212:	bf00      	nop
 8109214:	100003d4 	.word	0x100003d4

08109218 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8109218:	b480      	push	{r7}
 810921a:	b083      	sub	sp, #12
 810921c:	af00      	add	r7, sp, #0
 810921e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8109220:	4b06      	ldr	r3, [pc, #24]	@ (810923c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8109222:	685b      	ldr	r3, [r3, #4]
 8109224:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8109228:	4904      	ldr	r1, [pc, #16]	@ (810923c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 810922a:	687b      	ldr	r3, [r7, #4]
 810922c:	4313      	orrs	r3, r2
 810922e:	604b      	str	r3, [r1, #4]
}
 8109230:	bf00      	nop
 8109232:	370c      	adds	r7, #12
 8109234:	46bd      	mov	sp, r7
 8109236:	f85d 7b04 	ldr.w	r7, [sp], #4
 810923a:	4770      	bx	lr
 810923c:	58000400 	.word	0x58000400

08109240 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8109240:	b480      	push	{r7}
 8109242:	b085      	sub	sp, #20
 8109244:	af00      	add	r7, sp, #0
 8109246:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8109248:	687b      	ldr	r3, [r7, #4]
 810924a:	f003 0307 	and.w	r3, r3, #7
 810924e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8109250:	4b0c      	ldr	r3, [pc, #48]	@ (8109284 <__NVIC_SetPriorityGrouping+0x44>)
 8109252:	68db      	ldr	r3, [r3, #12]
 8109254:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8109256:	68ba      	ldr	r2, [r7, #8]
 8109258:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 810925c:	4013      	ands	r3, r2
 810925e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8109260:	68fb      	ldr	r3, [r7, #12]
 8109262:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8109264:	68bb      	ldr	r3, [r7, #8]
 8109266:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8109268:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 810926c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8109270:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8109272:	4a04      	ldr	r2, [pc, #16]	@ (8109284 <__NVIC_SetPriorityGrouping+0x44>)
 8109274:	68bb      	ldr	r3, [r7, #8]
 8109276:	60d3      	str	r3, [r2, #12]
}
 8109278:	bf00      	nop
 810927a:	3714      	adds	r7, #20
 810927c:	46bd      	mov	sp, r7
 810927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109282:	4770      	bx	lr
 8109284:	e000ed00 	.word	0xe000ed00

08109288 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8109288:	b480      	push	{r7}
 810928a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 810928c:	4b04      	ldr	r3, [pc, #16]	@ (81092a0 <__NVIC_GetPriorityGrouping+0x18>)
 810928e:	68db      	ldr	r3, [r3, #12]
 8109290:	0a1b      	lsrs	r3, r3, #8
 8109292:	f003 0307 	and.w	r3, r3, #7
}
 8109296:	4618      	mov	r0, r3
 8109298:	46bd      	mov	sp, r7
 810929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810929e:	4770      	bx	lr
 81092a0:	e000ed00 	.word	0xe000ed00

081092a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81092a4:	b480      	push	{r7}
 81092a6:	b083      	sub	sp, #12
 81092a8:	af00      	add	r7, sp, #0
 81092aa:	4603      	mov	r3, r0
 81092ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81092ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81092b2:	2b00      	cmp	r3, #0
 81092b4:	db0b      	blt.n	81092ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81092b6:	88fb      	ldrh	r3, [r7, #6]
 81092b8:	f003 021f 	and.w	r2, r3, #31
 81092bc:	4907      	ldr	r1, [pc, #28]	@ (81092dc <__NVIC_EnableIRQ+0x38>)
 81092be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81092c2:	095b      	lsrs	r3, r3, #5
 81092c4:	2001      	movs	r0, #1
 81092c6:	fa00 f202 	lsl.w	r2, r0, r2
 81092ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81092ce:	bf00      	nop
 81092d0:	370c      	adds	r7, #12
 81092d2:	46bd      	mov	sp, r7
 81092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81092d8:	4770      	bx	lr
 81092da:	bf00      	nop
 81092dc:	e000e100 	.word	0xe000e100

081092e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81092e0:	b480      	push	{r7}
 81092e2:	b083      	sub	sp, #12
 81092e4:	af00      	add	r7, sp, #0
 81092e6:	4603      	mov	r3, r0
 81092e8:	6039      	str	r1, [r7, #0]
 81092ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81092ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81092f0:	2b00      	cmp	r3, #0
 81092f2:	db0a      	blt.n	810930a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81092f4:	683b      	ldr	r3, [r7, #0]
 81092f6:	b2da      	uxtb	r2, r3
 81092f8:	490c      	ldr	r1, [pc, #48]	@ (810932c <__NVIC_SetPriority+0x4c>)
 81092fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81092fe:	0112      	lsls	r2, r2, #4
 8109300:	b2d2      	uxtb	r2, r2
 8109302:	440b      	add	r3, r1
 8109304:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8109308:	e00a      	b.n	8109320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810930a:	683b      	ldr	r3, [r7, #0]
 810930c:	b2da      	uxtb	r2, r3
 810930e:	4908      	ldr	r1, [pc, #32]	@ (8109330 <__NVIC_SetPriority+0x50>)
 8109310:	88fb      	ldrh	r3, [r7, #6]
 8109312:	f003 030f 	and.w	r3, r3, #15
 8109316:	3b04      	subs	r3, #4
 8109318:	0112      	lsls	r2, r2, #4
 810931a:	b2d2      	uxtb	r2, r2
 810931c:	440b      	add	r3, r1
 810931e:	761a      	strb	r2, [r3, #24]
}
 8109320:	bf00      	nop
 8109322:	370c      	adds	r7, #12
 8109324:	46bd      	mov	sp, r7
 8109326:	f85d 7b04 	ldr.w	r7, [sp], #4
 810932a:	4770      	bx	lr
 810932c:	e000e100 	.word	0xe000e100
 8109330:	e000ed00 	.word	0xe000ed00

08109334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8109334:	b480      	push	{r7}
 8109336:	b089      	sub	sp, #36	@ 0x24
 8109338:	af00      	add	r7, sp, #0
 810933a:	60f8      	str	r0, [r7, #12]
 810933c:	60b9      	str	r1, [r7, #8]
 810933e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8109340:	68fb      	ldr	r3, [r7, #12]
 8109342:	f003 0307 	and.w	r3, r3, #7
 8109346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8109348:	69fb      	ldr	r3, [r7, #28]
 810934a:	f1c3 0307 	rsb	r3, r3, #7
 810934e:	2b04      	cmp	r3, #4
 8109350:	bf28      	it	cs
 8109352:	2304      	movcs	r3, #4
 8109354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8109356:	69fb      	ldr	r3, [r7, #28]
 8109358:	3304      	adds	r3, #4
 810935a:	2b06      	cmp	r3, #6
 810935c:	d902      	bls.n	8109364 <NVIC_EncodePriority+0x30>
 810935e:	69fb      	ldr	r3, [r7, #28]
 8109360:	3b03      	subs	r3, #3
 8109362:	e000      	b.n	8109366 <NVIC_EncodePriority+0x32>
 8109364:	2300      	movs	r3, #0
 8109366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8109368:	f04f 32ff 	mov.w	r2, #4294967295
 810936c:	69bb      	ldr	r3, [r7, #24]
 810936e:	fa02 f303 	lsl.w	r3, r2, r3
 8109372:	43da      	mvns	r2, r3
 8109374:	68bb      	ldr	r3, [r7, #8]
 8109376:	401a      	ands	r2, r3
 8109378:	697b      	ldr	r3, [r7, #20]
 810937a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 810937c:	f04f 31ff 	mov.w	r1, #4294967295
 8109380:	697b      	ldr	r3, [r7, #20]
 8109382:	fa01 f303 	lsl.w	r3, r1, r3
 8109386:	43d9      	mvns	r1, r3
 8109388:	687b      	ldr	r3, [r7, #4]
 810938a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810938c:	4313      	orrs	r3, r2
         );
}
 810938e:	4618      	mov	r0, r3
 8109390:	3724      	adds	r7, #36	@ 0x24
 8109392:	46bd      	mov	sp, r7
 8109394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109398:	4770      	bx	lr

0810939a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810939a:	b580      	push	{r7, lr}
 810939c:	b082      	sub	sp, #8
 810939e:	af00      	add	r7, sp, #0
 81093a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81093a2:	6878      	ldr	r0, [r7, #4]
 81093a4:	f7ff ff4c 	bl	8109240 <__NVIC_SetPriorityGrouping>
}
 81093a8:	bf00      	nop
 81093aa:	3708      	adds	r7, #8
 81093ac:	46bd      	mov	sp, r7
 81093ae:	bd80      	pop	{r7, pc}

081093b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81093b0:	b580      	push	{r7, lr}
 81093b2:	b086      	sub	sp, #24
 81093b4:	af00      	add	r7, sp, #0
 81093b6:	4603      	mov	r3, r0
 81093b8:	60b9      	str	r1, [r7, #8]
 81093ba:	607a      	str	r2, [r7, #4]
 81093bc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81093be:	f7ff ff63 	bl	8109288 <__NVIC_GetPriorityGrouping>
 81093c2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81093c4:	687a      	ldr	r2, [r7, #4]
 81093c6:	68b9      	ldr	r1, [r7, #8]
 81093c8:	6978      	ldr	r0, [r7, #20]
 81093ca:	f7ff ffb3 	bl	8109334 <NVIC_EncodePriority>
 81093ce:	4602      	mov	r2, r0
 81093d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81093d4:	4611      	mov	r1, r2
 81093d6:	4618      	mov	r0, r3
 81093d8:	f7ff ff82 	bl	81092e0 <__NVIC_SetPriority>
}
 81093dc:	bf00      	nop
 81093de:	3718      	adds	r7, #24
 81093e0:	46bd      	mov	sp, r7
 81093e2:	bd80      	pop	{r7, pc}

081093e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81093e4:	b580      	push	{r7, lr}
 81093e6:	b082      	sub	sp, #8
 81093e8:	af00      	add	r7, sp, #0
 81093ea:	4603      	mov	r3, r0
 81093ec:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81093ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81093f2:	4618      	mov	r0, r3
 81093f4:	f7ff ff56 	bl	81092a4 <__NVIC_EnableIRQ>
}
 81093f8:	bf00      	nop
 81093fa:	3708      	adds	r7, #8
 81093fc:	46bd      	mov	sp, r7
 81093fe:	bd80      	pop	{r7, pc}

08109400 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8109400:	b480      	push	{r7}
 8109402:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8109404:	4b07      	ldr	r3, [pc, #28]	@ (8109424 <HAL_GetCurrentCPUID+0x24>)
 8109406:	681b      	ldr	r3, [r3, #0]
 8109408:	091b      	lsrs	r3, r3, #4
 810940a:	f003 030f 	and.w	r3, r3, #15
 810940e:	2b07      	cmp	r3, #7
 8109410:	d101      	bne.n	8109416 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8109412:	2303      	movs	r3, #3
 8109414:	e000      	b.n	8109418 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8109416:	2301      	movs	r3, #1
  }
}
 8109418:	4618      	mov	r0, r3
 810941a:	46bd      	mov	sp, r7
 810941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109420:	4770      	bx	lr
 8109422:	bf00      	nop
 8109424:	e000ed00 	.word	0xe000ed00

08109428 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8109428:	b580      	push	{r7, lr}
 810942a:	b084      	sub	sp, #16
 810942c:	af00      	add	r7, sp, #0
 810942e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8109430:	687b      	ldr	r3, [r7, #4]
 8109432:	2b00      	cmp	r3, #0
 8109434:	d101      	bne.n	810943a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8109436:	2301      	movs	r3, #1
 8109438:	e0e7      	b.n	810960a <HAL_ETH_Init+0x1e2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 810943a:	687b      	ldr	r3, [r7, #4]
 810943c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8109440:	2b00      	cmp	r3, #0
 8109442:	d106      	bne.n	8109452 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8109444:	687b      	ldr	r3, [r7, #4]
 8109446:	2223      	movs	r2, #35	@ 0x23
 8109448:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 810944c:	6878      	ldr	r0, [r7, #4]
 810944e:	f7fd f8db 	bl	8106608 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8109452:	4b70      	ldr	r3, [pc, #448]	@ (8109614 <HAL_ETH_Init+0x1ec>)
 8109454:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8109458:	4a6e      	ldr	r2, [pc, #440]	@ (8109614 <HAL_ETH_Init+0x1ec>)
 810945a:	f043 0302 	orr.w	r3, r3, #2
 810945e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8109462:	4b6c      	ldr	r3, [pc, #432]	@ (8109614 <HAL_ETH_Init+0x1ec>)
 8109464:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8109468:	f003 0302 	and.w	r3, r3, #2
 810946c:	60bb      	str	r3, [r7, #8]
 810946e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8109470:	687b      	ldr	r3, [r7, #4]
 8109472:	7a1b      	ldrb	r3, [r3, #8]
 8109474:	2b00      	cmp	r3, #0
 8109476:	d103      	bne.n	8109480 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8109478:	2000      	movs	r0, #0
 810947a:	f7ff fecd 	bl	8109218 <HAL_SYSCFG_ETHInterfaceSelect>
 810947e:	e003      	b.n	8109488 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8109480:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8109484:	f7ff fec8 	bl	8109218 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8109488:	4b63      	ldr	r3, [pc, #396]	@ (8109618 <HAL_ETH_Init+0x1f0>)
 810948a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 810948c:	687b      	ldr	r3, [r7, #4]
 810948e:	681b      	ldr	r3, [r3, #0]
 8109490:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8109494:	681b      	ldr	r3, [r3, #0]
 8109496:	687a      	ldr	r2, [r7, #4]
 8109498:	6812      	ldr	r2, [r2, #0]
 810949a:	f043 0301 	orr.w	r3, r3, #1
 810949e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81094a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 81094a4:	f7ff feac 	bl	8109200 <HAL_GetTick>
 81094a8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 81094aa:	e011      	b.n	81094d0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 81094ac:	f7ff fea8 	bl	8109200 <HAL_GetTick>
 81094b0:	4602      	mov	r2, r0
 81094b2:	68fb      	ldr	r3, [r7, #12]
 81094b4:	1ad3      	subs	r3, r2, r3
 81094b6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 81094ba:	d909      	bls.n	81094d0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 81094bc:	687b      	ldr	r3, [r7, #4]
 81094be:	2204      	movs	r2, #4
 81094c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 81094c4:	687b      	ldr	r3, [r7, #4]
 81094c6:	22e0      	movs	r2, #224	@ 0xe0
 81094c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 81094cc:	2301      	movs	r3, #1
 81094ce:	e09c      	b.n	810960a <HAL_ETH_Init+0x1e2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 81094d0:	687b      	ldr	r3, [r7, #4]
 81094d2:	681b      	ldr	r3, [r3, #0]
 81094d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81094d8:	681b      	ldr	r3, [r3, #0]
 81094da:	f003 0301 	and.w	r3, r3, #1
 81094de:	2b00      	cmp	r3, #0
 81094e0:	d1e4      	bne.n	81094ac <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 81094e2:	6878      	ldr	r0, [r7, #4]
 81094e4:	f000 ff34 	bl	810a350 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 81094e8:	f002 ff32 	bl	810c350 <HAL_RCC_GetHCLKFreq>
 81094ec:	4603      	mov	r3, r0
 81094ee:	4a4b      	ldr	r2, [pc, #300]	@ (810961c <HAL_ETH_Init+0x1f4>)
 81094f0:	fba2 2303 	umull	r2, r3, r2, r3
 81094f4:	0c9a      	lsrs	r2, r3, #18
 81094f6:	687b      	ldr	r3, [r7, #4]
 81094f8:	681b      	ldr	r3, [r3, #0]
 81094fa:	3a01      	subs	r2, #1
 81094fc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8109500:	6878      	ldr	r0, [r7, #4]
 8109502:	f001 f931 	bl	810a768 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8109506:	687b      	ldr	r3, [r7, #4]
 8109508:	681b      	ldr	r3, [r3, #0]
 810950a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810950e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8109512:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8109516:	687a      	ldr	r2, [r7, #4]
 8109518:	6812      	ldr	r2, [r2, #0]
 810951a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810951e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8109522:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8109526:	687b      	ldr	r3, [r7, #4]
 8109528:	695b      	ldr	r3, [r3, #20]
 810952a:	f003 0303 	and.w	r3, r3, #3
 810952e:	2b00      	cmp	r3, #0
 8109530:	d009      	beq.n	8109546 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8109532:	687b      	ldr	r3, [r7, #4]
 8109534:	2201      	movs	r2, #1
 8109536:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 810953a:	687b      	ldr	r3, [r7, #4]
 810953c:	22e0      	movs	r2, #224	@ 0xe0
 810953e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8109542:	2301      	movs	r3, #1
 8109544:	e061      	b.n	810960a <HAL_ETH_Init+0x1e2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8109546:	687b      	ldr	r3, [r7, #4]
 8109548:	681b      	ldr	r3, [r3, #0]
 810954a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810954e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8109552:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8109556:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 810955a:	687a      	ldr	r2, [r7, #4]
 810955c:	6952      	ldr	r2, [r2, #20]
 810955e:	0051      	lsls	r1, r2, #1
 8109560:	687a      	ldr	r2, [r7, #4]
 8109562:	6812      	ldr	r2, [r2, #0]
 8109564:	430b      	orrs	r3, r1
 8109566:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810956a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 810956e:	6878      	ldr	r0, [r7, #4]
 8109570:	f001 f997 	bl	810a8a2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8109574:	6878      	ldr	r0, [r7, #4]
 8109576:	f001 f9dd 	bl	810a934 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 810957a:	687b      	ldr	r3, [r7, #4]
 810957c:	685b      	ldr	r3, [r3, #4]
 810957e:	3305      	adds	r3, #5
 8109580:	781b      	ldrb	r3, [r3, #0]
 8109582:	021a      	lsls	r2, r3, #8
 8109584:	687b      	ldr	r3, [r7, #4]
 8109586:	685b      	ldr	r3, [r3, #4]
 8109588:	3304      	adds	r3, #4
 810958a:	781b      	ldrb	r3, [r3, #0]
 810958c:	4619      	mov	r1, r3
 810958e:	687b      	ldr	r3, [r7, #4]
 8109590:	681b      	ldr	r3, [r3, #0]
 8109592:	430a      	orrs	r2, r1
 8109594:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8109598:	687b      	ldr	r3, [r7, #4]
 810959a:	685b      	ldr	r3, [r3, #4]
 810959c:	3303      	adds	r3, #3
 810959e:	781b      	ldrb	r3, [r3, #0]
 81095a0:	061a      	lsls	r2, r3, #24
 81095a2:	687b      	ldr	r3, [r7, #4]
 81095a4:	685b      	ldr	r3, [r3, #4]
 81095a6:	3302      	adds	r3, #2
 81095a8:	781b      	ldrb	r3, [r3, #0]
 81095aa:	041b      	lsls	r3, r3, #16
 81095ac:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 81095ae:	687b      	ldr	r3, [r7, #4]
 81095b0:	685b      	ldr	r3, [r3, #4]
 81095b2:	3301      	adds	r3, #1
 81095b4:	781b      	ldrb	r3, [r3, #0]
 81095b6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 81095b8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 81095ba:	687b      	ldr	r3, [r7, #4]
 81095bc:	685b      	ldr	r3, [r3, #4]
 81095be:	781b      	ldrb	r3, [r3, #0]
 81095c0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 81095c2:	687b      	ldr	r3, [r7, #4]
 81095c4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 81095c6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 81095c8:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 81095cc:	687b      	ldr	r3, [r7, #4]
 81095ce:	681b      	ldr	r3, [r3, #0]
 81095d0:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 81095d4:	687b      	ldr	r3, [r7, #4]
 81095d6:	681a      	ldr	r2, [r3, #0]
 81095d8:	4b11      	ldr	r3, [pc, #68]	@ (8109620 <HAL_ETH_Init+0x1f8>)
 81095da:	430b      	orrs	r3, r1
 81095dc:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 81095e0:	687b      	ldr	r3, [r7, #4]
 81095e2:	681b      	ldr	r3, [r3, #0]
 81095e4:	f8d3 3710 	ldr.w	r3, [r3, #1808]	@ 0x710
 81095e8:	687a      	ldr	r2, [r7, #4]
 81095ea:	6812      	ldr	r2, [r2, #0]
 81095ec:	f043 6342 	orr.w	r3, r3, #203423744	@ 0xc200000
 81095f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 81095f4:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 81095f8:	687b      	ldr	r3, [r7, #4]
 81095fa:	2200      	movs	r2, #0
 81095fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8109600:	687b      	ldr	r3, [r7, #4]
 8109602:	2210      	movs	r2, #16
 8109604:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8109608:	2300      	movs	r3, #0
}
 810960a:	4618      	mov	r0, r3
 810960c:	3710      	adds	r7, #16
 810960e:	46bd      	mov	sp, r7
 8109610:	bd80      	pop	{r7, pc}
 8109612:	bf00      	nop
 8109614:	58024400 	.word	0x58024400
 8109618:	58000400 	.word	0x58000400
 810961c:	431bde83 	.word	0x431bde83
 8109620:	0c020060 	.word	0x0c020060

08109624 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8109624:	b580      	push	{r7, lr}
 8109626:	b082      	sub	sp, #8
 8109628:	af00      	add	r7, sp, #0
 810962a:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 810962c:	687b      	ldr	r3, [r7, #4]
 810962e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8109632:	2b10      	cmp	r3, #16
 8109634:	d166      	bne.n	8109704 <HAL_ETH_Start_IT+0xe0>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8109636:	687b      	ldr	r3, [r7, #4]
 8109638:	2223      	movs	r2, #35	@ 0x23
 810963a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 810963e:	687b      	ldr	r3, [r7, #4]
 8109640:	2201      	movs	r2, #1
 8109642:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8109644:	687b      	ldr	r3, [r7, #4]
 8109646:	2204      	movs	r2, #4
 8109648:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 810964a:	6878      	ldr	r0, [r7, #4]
 810964c:	f000 f9e5 	bl	8109a1a <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8109650:	687b      	ldr	r3, [r7, #4]
 8109652:	681b      	ldr	r3, [r3, #0]
 8109654:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8109658:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 810965c:	687a      	ldr	r2, [r7, #4]
 810965e:	6812      	ldr	r2, [r2, #0]
 8109660:	f043 0301 	orr.w	r3, r3, #1
 8109664:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8109668:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 810966c:	687b      	ldr	r3, [r7, #4]
 810966e:	681b      	ldr	r3, [r3, #0]
 8109670:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8109674:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8109678:	687a      	ldr	r2, [r7, #4]
 810967a:	6812      	ldr	r2, [r2, #0]
 810967c:	f043 0301 	orr.w	r3, r3, #1
 8109680:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8109684:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8109688:	687b      	ldr	r3, [r7, #4]
 810968a:	681b      	ldr	r3, [r3, #0]
 810968c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8109690:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8109694:	687a      	ldr	r2, [r7, #4]
 8109696:	6812      	ldr	r2, [r2, #0]
 8109698:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 810969c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81096a0:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 81096a4:	687b      	ldr	r3, [r7, #4]
 81096a6:	681b      	ldr	r3, [r3, #0]
 81096a8:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 81096ac:	687b      	ldr	r3, [r7, #4]
 81096ae:	681b      	ldr	r3, [r3, #0]
 81096b0:	f042 0201 	orr.w	r2, r2, #1
 81096b4:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 81096b8:	687b      	ldr	r3, [r7, #4]
 81096ba:	681b      	ldr	r3, [r3, #0]
 81096bc:	681a      	ldr	r2, [r3, #0]
 81096be:	687b      	ldr	r3, [r7, #4]
 81096c0:	681b      	ldr	r3, [r3, #0]
 81096c2:	f042 0202 	orr.w	r2, r2, #2
 81096c6:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 81096c8:	687b      	ldr	r3, [r7, #4]
 81096ca:	681b      	ldr	r3, [r3, #0]
 81096cc:	681a      	ldr	r2, [r3, #0]
 81096ce:	687b      	ldr	r3, [r7, #4]
 81096d0:	681b      	ldr	r3, [r3, #0]
 81096d2:	f042 0201 	orr.w	r2, r2, #1
 81096d6:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 81096d8:	687b      	ldr	r3, [r7, #4]
 81096da:	681b      	ldr	r3, [r3, #0]
 81096dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81096e0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 81096e4:	687a      	ldr	r2, [r7, #4]
 81096e6:	6812      	ldr	r2, [r2, #0]
 81096e8:	f443 4350 	orr.w	r3, r3, #53248	@ 0xd000
 81096ec:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 81096f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81096f4:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 81096f8:	687b      	ldr	r3, [r7, #4]
 81096fa:	2223      	movs	r2, #35	@ 0x23
 81096fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8109700:	2300      	movs	r3, #0
 8109702:	e000      	b.n	8109706 <HAL_ETH_Start_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 8109704:	2301      	movs	r3, #1
  }
}
 8109706:	4618      	mov	r0, r3
 8109708:	3708      	adds	r7, #8
 810970a:	46bd      	mov	sp, r7
 810970c:	bd80      	pop	{r7, pc}

0810970e <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 810970e:	b480      	push	{r7}
 8109710:	b085      	sub	sp, #20
 8109712:	af00      	add	r7, sp, #0
 8109714:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8109716:	687b      	ldr	r3, [r7, #4]
 8109718:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810971c:	2b23      	cmp	r3, #35	@ 0x23
 810971e:	d167      	bne.n	81097f0 <HAL_ETH_Stop_IT+0xe2>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8109720:	687b      	ldr	r3, [r7, #4]
 8109722:	2223      	movs	r2, #35	@ 0x23
 8109724:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8109728:	687b      	ldr	r3, [r7, #4]
 810972a:	681b      	ldr	r3, [r3, #0]
 810972c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8109730:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8109734:	687a      	ldr	r2, [r7, #4]
 8109736:	6812      	ldr	r2, [r2, #0]
 8109738:	f423 4350 	bic.w	r3, r3, #53248	@ 0xd000
 810973c:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8109740:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8109744:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8109748:	687b      	ldr	r3, [r7, #4]
 810974a:	681b      	ldr	r3, [r3, #0]
 810974c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8109750:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8109754:	687a      	ldr	r2, [r7, #4]
 8109756:	6812      	ldr	r2, [r2, #0]
 8109758:	f023 0301 	bic.w	r3, r3, #1
 810975c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8109760:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8109764:	687b      	ldr	r3, [r7, #4]
 8109766:	681b      	ldr	r3, [r3, #0]
 8109768:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810976c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8109770:	687a      	ldr	r2, [r7, #4]
 8109772:	6812      	ldr	r2, [r2, #0]
 8109774:	f023 0301 	bic.w	r3, r3, #1
 8109778:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810977c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8109780:	687b      	ldr	r3, [r7, #4]
 8109782:	681b      	ldr	r3, [r3, #0]
 8109784:	681a      	ldr	r2, [r3, #0]
 8109786:	687b      	ldr	r3, [r7, #4]
 8109788:	681b      	ldr	r3, [r3, #0]
 810978a:	f022 0201 	bic.w	r2, r2, #1
 810978e:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8109790:	687b      	ldr	r3, [r7, #4]
 8109792:	681b      	ldr	r3, [r3, #0]
 8109794:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8109798:	687b      	ldr	r3, [r7, #4]
 810979a:	681b      	ldr	r3, [r3, #0]
 810979c:	f042 0201 	orr.w	r2, r2, #1
 81097a0:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 81097a4:	687b      	ldr	r3, [r7, #4]
 81097a6:	681b      	ldr	r3, [r3, #0]
 81097a8:	681a      	ldr	r2, [r3, #0]
 81097aa:	687b      	ldr	r3, [r7, #4]
 81097ac:	681b      	ldr	r3, [r3, #0]
 81097ae:	f022 0202 	bic.w	r2, r2, #2
 81097b2:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 81097b4:	2300      	movs	r3, #0
 81097b6:	60fb      	str	r3, [r7, #12]
 81097b8:	e00e      	b.n	81097d8 <HAL_ETH_Stop_IT+0xca>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 81097ba:	687b      	ldr	r3, [r7, #4]
 81097bc:	68fa      	ldr	r2, [r7, #12]
 81097be:	3212      	adds	r2, #18
 81097c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81097c4:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 81097c6:	68bb      	ldr	r3, [r7, #8]
 81097c8:	68db      	ldr	r3, [r3, #12]
 81097ca:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 81097ce:	68bb      	ldr	r3, [r7, #8]
 81097d0:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 81097d2:	68fb      	ldr	r3, [r7, #12]
 81097d4:	3301      	adds	r3, #1
 81097d6:	60fb      	str	r3, [r7, #12]
 81097d8:	68fb      	ldr	r3, [r7, #12]
 81097da:	2b03      	cmp	r3, #3
 81097dc:	d9ed      	bls.n	81097ba <HAL_ETH_Stop_IT+0xac>
    }

    heth->RxDescList.ItMode = 0U;
 81097de:	687b      	ldr	r3, [r7, #4]
 81097e0:	2200      	movs	r2, #0
 81097e2:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 81097e4:	687b      	ldr	r3, [r7, #4]
 81097e6:	2210      	movs	r2, #16
 81097e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 81097ec:	2300      	movs	r3, #0
 81097ee:	e000      	b.n	81097f2 <HAL_ETH_Stop_IT+0xe4>
  }
  else
  {
    return HAL_ERROR;
 81097f0:	2301      	movs	r3, #1
  }
}
 81097f2:	4618      	mov	r0, r3
 81097f4:	3714      	adds	r7, #20
 81097f6:	46bd      	mov	sp, r7
 81097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81097fc:	4770      	bx	lr

081097fe <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 81097fe:	b580      	push	{r7, lr}
 8109800:	b082      	sub	sp, #8
 8109802:	af00      	add	r7, sp, #0
 8109804:	6078      	str	r0, [r7, #4]
 8109806:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8109808:	683b      	ldr	r3, [r7, #0]
 810980a:	2b00      	cmp	r3, #0
 810980c:	d109      	bne.n	8109822 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 810980e:	687b      	ldr	r3, [r7, #4]
 8109810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8109814:	f043 0201 	orr.w	r2, r3, #1
 8109818:	687b      	ldr	r3, [r7, #4]
 810981a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 810981e:	2301      	movs	r3, #1
 8109820:	e03a      	b.n	8109898 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8109822:	687b      	ldr	r3, [r7, #4]
 8109824:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8109828:	2b23      	cmp	r3, #35	@ 0x23
 810982a:	d134      	bne.n	8109896 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 810982c:	683b      	ldr	r3, [r7, #0]
 810982e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8109830:	687b      	ldr	r3, [r7, #4]
 8109832:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8109834:	2201      	movs	r2, #1
 8109836:	6839      	ldr	r1, [r7, #0]
 8109838:	6878      	ldr	r0, [r7, #4]
 810983a:	f001 f8d8 	bl	810a9ee <ETH_Prepare_Tx_Descriptors>
 810983e:	4603      	mov	r3, r0
 8109840:	2b00      	cmp	r3, #0
 8109842:	d009      	beq.n	8109858 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8109844:	687b      	ldr	r3, [r7, #4]
 8109846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810984a:	f043 0202 	orr.w	r2, r3, #2
 810984e:	687b      	ldr	r3, [r7, #4]
 8109850:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8109854:	2301      	movs	r3, #1
 8109856:	e01f      	b.n	8109898 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8109858:	f3bf 8f4f 	dsb	sy
}
 810985c:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 810985e:	687b      	ldr	r3, [r7, #4]
 8109860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109862:	1c5a      	adds	r2, r3, #1
 8109864:	687b      	ldr	r3, [r7, #4]
 8109866:	629a      	str	r2, [r3, #40]	@ 0x28
 8109868:	687b      	ldr	r3, [r7, #4]
 810986a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810986c:	2b03      	cmp	r3, #3
 810986e:	d904      	bls.n	810987a <HAL_ETH_Transmit_IT+0x7c>
 8109870:	687b      	ldr	r3, [r7, #4]
 8109872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109874:	1f1a      	subs	r2, r3, #4
 8109876:	687b      	ldr	r3, [r7, #4]
 8109878:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 810987a:	687b      	ldr	r3, [r7, #4]
 810987c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 810987e:	687b      	ldr	r3, [r7, #4]
 8109880:	681a      	ldr	r2, [r3, #0]
 8109882:	687b      	ldr	r3, [r7, #4]
 8109884:	3106      	adds	r1, #6
 8109886:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 810988a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810988e:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 8109892:	2300      	movs	r3, #0
 8109894:	e000      	b.n	8109898 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8109896:	2301      	movs	r3, #1
  }
}
 8109898:	4618      	mov	r0, r3
 810989a:	3708      	adds	r7, #8
 810989c:	46bd      	mov	sp, r7
 810989e:	bd80      	pop	{r7, pc}

081098a0 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 81098a0:	b580      	push	{r7, lr}
 81098a2:	b088      	sub	sp, #32
 81098a4:	af00      	add	r7, sp, #0
 81098a6:	6078      	str	r0, [r7, #4]
 81098a8:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 81098aa:	2300      	movs	r3, #0
 81098ac:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 81098ae:	2300      	movs	r3, #0
 81098b0:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 81098b2:	683b      	ldr	r3, [r7, #0]
 81098b4:	2b00      	cmp	r3, #0
 81098b6:	d109      	bne.n	81098cc <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 81098b8:	687b      	ldr	r3, [r7, #4]
 81098ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81098be:	f043 0201 	orr.w	r2, r3, #1
 81098c2:	687b      	ldr	r3, [r7, #4]
 81098c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 81098c8:	2301      	movs	r3, #1
 81098ca:	e0a2      	b.n	8109a12 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 81098cc:	687b      	ldr	r3, [r7, #4]
 81098ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81098d2:	2b23      	cmp	r3, #35	@ 0x23
 81098d4:	d001      	beq.n	81098da <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 81098d6:	2301      	movs	r3, #1
 81098d8:	e09b      	b.n	8109a12 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 81098da:	687b      	ldr	r3, [r7, #4]
 81098dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81098de:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 81098e0:	687b      	ldr	r3, [r7, #4]
 81098e2:	69fa      	ldr	r2, [r7, #28]
 81098e4:	3212      	adds	r2, #18
 81098e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81098ea:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 81098ec:	687b      	ldr	r3, [r7, #4]
 81098ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81098f0:	f1c3 0304 	rsb	r3, r3, #4
 81098f4:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 81098f6:	e064      	b.n	81099c2 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 81098f8:	69bb      	ldr	r3, [r7, #24]
 81098fa:	68db      	ldr	r3, [r3, #12]
 81098fc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8109900:	2b00      	cmp	r3, #0
 8109902:	d007      	beq.n	8109914 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8109904:	69bb      	ldr	r3, [r7, #24]
 8109906:	685a      	ldr	r2, [r3, #4]
 8109908:	687b      	ldr	r3, [r7, #4]
 810990a:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 810990c:	69bb      	ldr	r3, [r7, #24]
 810990e:	681a      	ldr	r2, [r3, #0]
 8109910:	687b      	ldr	r3, [r7, #4]
 8109912:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8109914:	69bb      	ldr	r3, [r7, #24]
 8109916:	68db      	ldr	r3, [r3, #12]
 8109918:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810991c:	2b00      	cmp	r3, #0
 810991e:	d103      	bne.n	8109928 <HAL_ETH_ReadData+0x88>
 8109920:	687b      	ldr	r3, [r7, #4]
 8109922:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8109924:	2b00      	cmp	r3, #0
 8109926:	d03a      	beq.n	810999e <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8109928:	69bb      	ldr	r3, [r7, #24]
 810992a:	68db      	ldr	r3, [r3, #12]
 810992c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8109930:	2b00      	cmp	r3, #0
 8109932:	d005      	beq.n	8109940 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8109934:	687b      	ldr	r3, [r7, #4]
 8109936:	2200      	movs	r2, #0
 8109938:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 810993a:	687b      	ldr	r3, [r7, #4]
 810993c:	2200      	movs	r2, #0
 810993e:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8109940:	69bb      	ldr	r3, [r7, #24]
 8109942:	68db      	ldr	r3, [r3, #12]
 8109944:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8109948:	687b      	ldr	r3, [r7, #4]
 810994a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810994c:	1ad3      	subs	r3, r2, r3
 810994e:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8109950:	69bb      	ldr	r3, [r7, #24]
 8109952:	68db      	ldr	r3, [r3, #12]
 8109954:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8109958:	2b00      	cmp	r3, #0
 810995a:	d005      	beq.n	8109968 <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 810995c:	69bb      	ldr	r3, [r7, #24]
 810995e:	68da      	ldr	r2, [r3, #12]
 8109960:	687b      	ldr	r3, [r7, #4]
 8109962:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8109964:	2301      	movs	r3, #1
 8109966:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8109968:	687b      	ldr	r3, [r7, #4]
 810996a:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 810996e:	687b      	ldr	r3, [r7, #4]
 8109970:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8109974:	69bb      	ldr	r3, [r7, #24]
 8109976:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8109978:	461a      	mov	r2, r3
 810997a:	68bb      	ldr	r3, [r7, #8]
 810997c:	b29b      	uxth	r3, r3
 810997e:	f7fd f80b 	bl	8106998 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8109982:	687b      	ldr	r3, [r7, #4]
 8109984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8109986:	1c5a      	adds	r2, r3, #1
 8109988:	687b      	ldr	r3, [r7, #4]
 810998a:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 810998c:	687b      	ldr	r3, [r7, #4]
 810998e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8109990:	68bb      	ldr	r3, [r7, #8]
 8109992:	441a      	add	r2, r3
 8109994:	687b      	ldr	r3, [r7, #4]
 8109996:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8109998:	69bb      	ldr	r3, [r7, #24]
 810999a:	2200      	movs	r2, #0
 810999c:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 810999e:	69fb      	ldr	r3, [r7, #28]
 81099a0:	3301      	adds	r3, #1
 81099a2:	61fb      	str	r3, [r7, #28]
 81099a4:	69fb      	ldr	r3, [r7, #28]
 81099a6:	2b03      	cmp	r3, #3
 81099a8:	d902      	bls.n	81099b0 <HAL_ETH_ReadData+0x110>
 81099aa:	69fb      	ldr	r3, [r7, #28]
 81099ac:	3b04      	subs	r3, #4
 81099ae:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 81099b0:	687b      	ldr	r3, [r7, #4]
 81099b2:	69fa      	ldr	r2, [r7, #28]
 81099b4:	3212      	adds	r2, #18
 81099b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81099ba:	61bb      	str	r3, [r7, #24]
    desccnt++;
 81099bc:	697b      	ldr	r3, [r7, #20]
 81099be:	3301      	adds	r3, #1
 81099c0:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 81099c2:	69bb      	ldr	r3, [r7, #24]
 81099c4:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 81099c6:	2b00      	cmp	r3, #0
 81099c8:	db06      	blt.n	81099d8 <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 81099ca:	697a      	ldr	r2, [r7, #20]
 81099cc:	68fb      	ldr	r3, [r7, #12]
 81099ce:	429a      	cmp	r2, r3
 81099d0:	d202      	bcs.n	81099d8 <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 81099d2:	7cfb      	ldrb	r3, [r7, #19]
 81099d4:	2b00      	cmp	r3, #0
 81099d6:	d08f      	beq.n	81098f8 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 81099d8:	687b      	ldr	r3, [r7, #4]
 81099da:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 81099dc:	697b      	ldr	r3, [r7, #20]
 81099de:	441a      	add	r2, r3
 81099e0:	687b      	ldr	r3, [r7, #4]
 81099e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 81099e4:	687b      	ldr	r3, [r7, #4]
 81099e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81099e8:	2b00      	cmp	r3, #0
 81099ea:	d002      	beq.n	81099f2 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 81099ec:	6878      	ldr	r0, [r7, #4]
 81099ee:	f000 f814 	bl	8109a1a <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 81099f2:	687b      	ldr	r3, [r7, #4]
 81099f4:	69fa      	ldr	r2, [r7, #28]
 81099f6:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 81099f8:	7cfb      	ldrb	r3, [r7, #19]
 81099fa:	2b01      	cmp	r3, #1
 81099fc:	d108      	bne.n	8109a10 <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 81099fe:	687b      	ldr	r3, [r7, #4]
 8109a00:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8109a02:	683b      	ldr	r3, [r7, #0]
 8109a04:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8109a06:	687b      	ldr	r3, [r7, #4]
 8109a08:	2200      	movs	r2, #0
 8109a0a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8109a0c:	2300      	movs	r3, #0
 8109a0e:	e000      	b.n	8109a12 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8109a10:	2301      	movs	r3, #1
}
 8109a12:	4618      	mov	r0, r3
 8109a14:	3720      	adds	r7, #32
 8109a16:	46bd      	mov	sp, r7
 8109a18:	bd80      	pop	{r7, pc}

08109a1a <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8109a1a:	b580      	push	{r7, lr}
 8109a1c:	b088      	sub	sp, #32
 8109a1e:	af00      	add	r7, sp, #0
 8109a20:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8109a22:	2300      	movs	r3, #0
 8109a24:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8109a26:	2301      	movs	r3, #1
 8109a28:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8109a2a:	687b      	ldr	r3, [r7, #4]
 8109a2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8109a2e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8109a30:	687b      	ldr	r3, [r7, #4]
 8109a32:	69fa      	ldr	r2, [r7, #28]
 8109a34:	3212      	adds	r2, #18
 8109a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8109a3a:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8109a3c:	687b      	ldr	r3, [r7, #4]
 8109a3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8109a40:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8109a42:	e038      	b.n	8109ab6 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8109a44:	697b      	ldr	r3, [r7, #20]
 8109a46:	691b      	ldr	r3, [r3, #16]
 8109a48:	2b00      	cmp	r3, #0
 8109a4a:	d112      	bne.n	8109a72 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8109a4c:	f107 0308 	add.w	r3, r7, #8
 8109a50:	4618      	mov	r0, r3
 8109a52:	f7fc ff71 	bl	8106938 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8109a56:	68bb      	ldr	r3, [r7, #8]
 8109a58:	2b00      	cmp	r3, #0
 8109a5a:	d102      	bne.n	8109a62 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8109a5c:	2300      	movs	r3, #0
 8109a5e:	74fb      	strb	r3, [r7, #19]
 8109a60:	e007      	b.n	8109a72 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8109a62:	68bb      	ldr	r3, [r7, #8]
 8109a64:	461a      	mov	r2, r3
 8109a66:	697b      	ldr	r3, [r7, #20]
 8109a68:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8109a6a:	68bb      	ldr	r3, [r7, #8]
 8109a6c:	461a      	mov	r2, r3
 8109a6e:	697b      	ldr	r3, [r7, #20]
 8109a70:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8109a72:	7cfb      	ldrb	r3, [r7, #19]
 8109a74:	2b00      	cmp	r3, #0
 8109a76:	d01e      	beq.n	8109ab6 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 8109a78:	687b      	ldr	r3, [r7, #4]
 8109a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8109a7c:	2b00      	cmp	r3, #0
 8109a7e:	d004      	beq.n	8109a8a <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8109a80:	697b      	ldr	r3, [r7, #20]
 8109a82:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8109a86:	60da      	str	r2, [r3, #12]
 8109a88:	e003      	b.n	8109a92 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8109a8a:	697b      	ldr	r3, [r7, #20]
 8109a8c:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 8109a90:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8109a92:	69fb      	ldr	r3, [r7, #28]
 8109a94:	3301      	adds	r3, #1
 8109a96:	61fb      	str	r3, [r7, #28]
 8109a98:	69fb      	ldr	r3, [r7, #28]
 8109a9a:	2b03      	cmp	r3, #3
 8109a9c:	d902      	bls.n	8109aa4 <ETH_UpdateDescriptor+0x8a>
 8109a9e:	69fb      	ldr	r3, [r7, #28]
 8109aa0:	3b04      	subs	r3, #4
 8109aa2:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8109aa4:	687b      	ldr	r3, [r7, #4]
 8109aa6:	69fa      	ldr	r2, [r7, #28]
 8109aa8:	3212      	adds	r2, #18
 8109aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8109aae:	617b      	str	r3, [r7, #20]
      desccount--;
 8109ab0:	69bb      	ldr	r3, [r7, #24]
 8109ab2:	3b01      	subs	r3, #1
 8109ab4:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8109ab6:	69bb      	ldr	r3, [r7, #24]
 8109ab8:	2b00      	cmp	r3, #0
 8109aba:	d002      	beq.n	8109ac2 <ETH_UpdateDescriptor+0xa8>
 8109abc:	7cfb      	ldrb	r3, [r7, #19]
 8109abe:	2b00      	cmp	r3, #0
 8109ac0:	d1c0      	bne.n	8109a44 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8109ac2:	687b      	ldr	r3, [r7, #4]
 8109ac4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8109ac6:	69ba      	ldr	r2, [r7, #24]
 8109ac8:	429a      	cmp	r2, r3
 8109aca:	d01b      	beq.n	8109b04 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8109acc:	69fb      	ldr	r3, [r7, #28]
 8109ace:	3301      	adds	r3, #1
 8109ad0:	f003 0303 	and.w	r3, r3, #3
 8109ad4:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8109ad6:	f3bf 8f5f 	dmb	sy
}
 8109ada:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8109adc:	687b      	ldr	r3, [r7, #4]
 8109ade:	6919      	ldr	r1, [r3, #16]
 8109ae0:	68fa      	ldr	r2, [r7, #12]
 8109ae2:	4613      	mov	r3, r2
 8109ae4:	005b      	lsls	r3, r3, #1
 8109ae6:	4413      	add	r3, r2
 8109ae8:	00db      	lsls	r3, r3, #3
 8109aea:	18ca      	adds	r2, r1, r3
 8109aec:	687b      	ldr	r3, [r7, #4]
 8109aee:	681b      	ldr	r3, [r3, #0]
 8109af0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8109af4:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8109af8:	687b      	ldr	r3, [r7, #4]
 8109afa:	69fa      	ldr	r2, [r7, #28]
 8109afc:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8109afe:	687b      	ldr	r3, [r7, #4]
 8109b00:	69ba      	ldr	r2, [r7, #24]
 8109b02:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8109b04:	bf00      	nop
 8109b06:	3720      	adds	r7, #32
 8109b08:	46bd      	mov	sp, r7
 8109b0a:	bd80      	pop	{r7, pc}

08109b0c <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8109b0c:	b580      	push	{r7, lr}
 8109b0e:	b086      	sub	sp, #24
 8109b10:	af00      	add	r7, sp, #0
 8109b12:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8109b14:	687b      	ldr	r3, [r7, #4]
 8109b16:	3318      	adds	r3, #24
 8109b18:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8109b1a:	68bb      	ldr	r3, [r7, #8]
 8109b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109b1e:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8109b20:	68bb      	ldr	r3, [r7, #8]
 8109b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109b24:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8109b26:	2301      	movs	r3, #1
 8109b28:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8109b2a:	e047      	b.n	8109bbc <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8109b2c:	2301      	movs	r3, #1
 8109b2e:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8109b30:	697b      	ldr	r3, [r7, #20]
 8109b32:	3b01      	subs	r3, #1
 8109b34:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8109b36:	68ba      	ldr	r2, [r7, #8]
 8109b38:	693b      	ldr	r3, [r7, #16]
 8109b3a:	3304      	adds	r3, #4
 8109b3c:	009b      	lsls	r3, r3, #2
 8109b3e:	4413      	add	r3, r2
 8109b40:	685b      	ldr	r3, [r3, #4]
 8109b42:	2b00      	cmp	r3, #0
 8109b44:	d10a      	bne.n	8109b5c <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8109b46:	693b      	ldr	r3, [r7, #16]
 8109b48:	3301      	adds	r3, #1
 8109b4a:	613b      	str	r3, [r7, #16]
 8109b4c:	693b      	ldr	r3, [r7, #16]
 8109b4e:	2b03      	cmp	r3, #3
 8109b50:	d902      	bls.n	8109b58 <HAL_ETH_ReleaseTxPacket+0x4c>
 8109b52:	693b      	ldr	r3, [r7, #16]
 8109b54:	3b04      	subs	r3, #4
 8109b56:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8109b58:	2300      	movs	r3, #0
 8109b5a:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8109b5c:	7bbb      	ldrb	r3, [r7, #14]
 8109b5e:	2b00      	cmp	r3, #0
 8109b60:	d02c      	beq.n	8109bbc <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8109b62:	687b      	ldr	r3, [r7, #4]
 8109b64:	68d9      	ldr	r1, [r3, #12]
 8109b66:	693a      	ldr	r2, [r7, #16]
 8109b68:	4613      	mov	r3, r2
 8109b6a:	005b      	lsls	r3, r3, #1
 8109b6c:	4413      	add	r3, r2
 8109b6e:	00db      	lsls	r3, r3, #3
 8109b70:	440b      	add	r3, r1
 8109b72:	68db      	ldr	r3, [r3, #12]
 8109b74:	2b00      	cmp	r3, #0
 8109b76:	db1f      	blt.n	8109bb8 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8109b78:	68ba      	ldr	r2, [r7, #8]
 8109b7a:	693b      	ldr	r3, [r7, #16]
 8109b7c:	3304      	adds	r3, #4
 8109b7e:	009b      	lsls	r3, r3, #2
 8109b80:	4413      	add	r3, r2
 8109b82:	685b      	ldr	r3, [r3, #4]
 8109b84:	4618      	mov	r0, r3
 8109b86:	f7fc ff47 	bl	8106a18 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8109b8a:	68ba      	ldr	r2, [r7, #8]
 8109b8c:	693b      	ldr	r3, [r7, #16]
 8109b8e:	3304      	adds	r3, #4
 8109b90:	009b      	lsls	r3, r3, #2
 8109b92:	4413      	add	r3, r2
 8109b94:	2200      	movs	r2, #0
 8109b96:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8109b98:	693b      	ldr	r3, [r7, #16]
 8109b9a:	3301      	adds	r3, #1
 8109b9c:	613b      	str	r3, [r7, #16]
 8109b9e:	693b      	ldr	r3, [r7, #16]
 8109ba0:	2b03      	cmp	r3, #3
 8109ba2:	d902      	bls.n	8109baa <HAL_ETH_ReleaseTxPacket+0x9e>
 8109ba4:	693b      	ldr	r3, [r7, #16]
 8109ba6:	3b04      	subs	r3, #4
 8109ba8:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8109baa:	68bb      	ldr	r3, [r7, #8]
 8109bac:	697a      	ldr	r2, [r7, #20]
 8109bae:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8109bb0:	68bb      	ldr	r3, [r7, #8]
 8109bb2:	693a      	ldr	r2, [r7, #16]
 8109bb4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8109bb6:	e001      	b.n	8109bbc <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8109bb8:	2300      	movs	r3, #0
 8109bba:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8109bbc:	697b      	ldr	r3, [r7, #20]
 8109bbe:	2b00      	cmp	r3, #0
 8109bc0:	d002      	beq.n	8109bc8 <HAL_ETH_ReleaseTxPacket+0xbc>
 8109bc2:	7bfb      	ldrb	r3, [r7, #15]
 8109bc4:	2b00      	cmp	r3, #0
 8109bc6:	d1b1      	bne.n	8109b2c <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8109bc8:	2300      	movs	r3, #0
}
 8109bca:	4618      	mov	r0, r3
 8109bcc:	3718      	adds	r7, #24
 8109bce:	46bd      	mov	sp, r7
 8109bd0:	bd80      	pop	{r7, pc}
	...

08109bd4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8109bd4:	b580      	push	{r7, lr}
 8109bd6:	b088      	sub	sp, #32
 8109bd8:	af00      	add	r7, sp, #0
 8109bda:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 8109bdc:	687b      	ldr	r3, [r7, #4]
 8109bde:	681b      	ldr	r3, [r3, #0]
 8109be0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8109be4:	61fb      	str	r3, [r7, #28]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 8109be6:	687b      	ldr	r3, [r7, #4]
 8109be8:	681b      	ldr	r3, [r3, #0]
 8109bea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8109bee:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8109bf2:	61bb      	str	r3, [r7, #24]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 8109bf4:	687b      	ldr	r3, [r7, #4]
 8109bf6:	681b      	ldr	r3, [r3, #0]
 8109bf8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8109bfc:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8109c00:	617b      	str	r3, [r7, #20]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 8109c02:	4b77      	ldr	r3, [pc, #476]	@ (8109de0 <HAL_ETH_IRQHandler+0x20c>)
 8109c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109c06:	613b      	str	r3, [r7, #16]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
 8109c08:	4b76      	ldr	r3, [pc, #472]	@ (8109de4 <HAL_ETH_IRQHandler+0x210>)
 8109c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109c0c:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 8109c0e:	69bb      	ldr	r3, [r7, #24]
 8109c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8109c14:	2b00      	cmp	r3, #0
 8109c16:	d010      	beq.n	8109c3a <HAL_ETH_IRQHandler+0x66>
 8109c18:	697b      	ldr	r3, [r7, #20]
 8109c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8109c1e:	2b00      	cmp	r3, #0
 8109c20:	d00b      	beq.n	8109c3a <HAL_ETH_IRQHandler+0x66>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8109c22:	687b      	ldr	r3, [r7, #4]
 8109c24:	681b      	ldr	r3, [r3, #0]
 8109c26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8109c2a:	461a      	mov	r2, r3
 8109c2c:	f248 0340 	movw	r3, #32832	@ 0x8040
 8109c30:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8109c34:	6878      	ldr	r0, [r7, #4]
 8109c36:	f7fc fa27 	bl	8106088 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 8109c3a:	69bb      	ldr	r3, [r7, #24]
 8109c3c:	f003 0301 	and.w	r3, r3, #1
 8109c40:	2b00      	cmp	r3, #0
 8109c42:	d010      	beq.n	8109c66 <HAL_ETH_IRQHandler+0x92>
 8109c44:	697b      	ldr	r3, [r7, #20]
 8109c46:	f003 0301 	and.w	r3, r3, #1
 8109c4a:	2b00      	cmp	r3, #0
 8109c4c:	d00b      	beq.n	8109c66 <HAL_ETH_IRQHandler+0x92>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8109c4e:	687b      	ldr	r3, [r7, #4]
 8109c50:	681b      	ldr	r3, [r3, #0]
 8109c52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8109c56:	461a      	mov	r2, r3
 8109c58:	f248 0301 	movw	r3, #32769	@ 0x8001
 8109c5c:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8109c60:	6878      	ldr	r0, [r7, #4]
 8109c62:	f7fc fa21 	bl	81060a8 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 8109c66:	69bb      	ldr	r3, [r7, #24]
 8109c68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8109c6c:	2b00      	cmp	r3, #0
 8109c6e:	d047      	beq.n	8109d00 <HAL_ETH_IRQHandler+0x12c>
 8109c70:	697b      	ldr	r3, [r7, #20]
 8109c72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8109c76:	2b00      	cmp	r3, #0
 8109c78:	d042      	beq.n	8109d00 <HAL_ETH_IRQHandler+0x12c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8109c7a:	687b      	ldr	r3, [r7, #4]
 8109c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8109c80:	f043 0208 	orr.w	r2, r3, #8
 8109c84:	687b      	ldr	r3, [r7, #4]
 8109c86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 8109c8a:	69bb      	ldr	r3, [r7, #24]
 8109c8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8109c90:	2b00      	cmp	r3, #0
 8109c92:	d01e      	beq.n	8109cd2 <HAL_ETH_IRQHandler+0xfe>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8109c94:	687b      	ldr	r3, [r7, #4]
 8109c96:	681b      	ldr	r3, [r3, #0]
 8109c98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8109c9c:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8109ca0:	f241 1302 	movw	r3, #4354	@ 0x1102
 8109ca4:	4013      	ands	r3, r2
 8109ca6:	687a      	ldr	r2, [r7, #4]
 8109ca8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8109cac:	687b      	ldr	r3, [r7, #4]
 8109cae:	681b      	ldr	r3, [r3, #0]
 8109cb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8109cb4:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8109cb8:	687a      	ldr	r2, [r7, #4]
 8109cba:	6812      	ldr	r2, [r2, #0]
 8109cbc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8109cc0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8109cc4:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8109cc8:	687b      	ldr	r3, [r7, #4]
 8109cca:	22e0      	movs	r2, #224	@ 0xe0
 8109ccc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8109cd0:	e013      	b.n	8109cfa <HAL_ETH_IRQHandler+0x126>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8109cd2:	687b      	ldr	r3, [r7, #4]
 8109cd4:	681b      	ldr	r3, [r3, #0]
 8109cd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8109cda:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8109cde:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 8109ce2:	687b      	ldr	r3, [r7, #4]
 8109ce4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8109ce8:	687b      	ldr	r3, [r7, #4]
 8109cea:	681b      	ldr	r3, [r3, #0]
 8109cec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8109cf0:	461a      	mov	r2, r3
 8109cf2:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8109cf6:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8109cfa:	6878      	ldr	r0, [r7, #4]
 8109cfc:	f7fc f9e4 	bl	81060c8 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8109d00:	69fb      	ldr	r3, [r7, #28]
 8109d02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8109d06:	2b00      	cmp	r3, #0
 8109d08:	d104      	bne.n	8109d14 <HAL_ETH_IRQHandler+0x140>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8109d0a:	69fb      	ldr	r3, [r7, #28]
 8109d0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8109d10:	2b00      	cmp	r3, #0
 8109d12:	d019      	beq.n	8109d48 <HAL_ETH_IRQHandler+0x174>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8109d14:	687b      	ldr	r3, [r7, #4]
 8109d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8109d1a:	f043 0210 	orr.w	r2, r3, #16
 8109d1e:	687b      	ldr	r3, [r7, #4]
 8109d20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8109d24:	687b      	ldr	r3, [r7, #4]
 8109d26:	681b      	ldr	r3, [r3, #0]
 8109d28:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8109d2c:	687b      	ldr	r3, [r7, #4]
 8109d2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8109d32:	687b      	ldr	r3, [r7, #4]
 8109d34:	22e0      	movs	r2, #224	@ 0xe0
 8109d36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8109d3a:	6878      	ldr	r0, [r7, #4]
 8109d3c:	f7fc f9c4 	bl	81060c8 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 8109d40:	687b      	ldr	r3, [r7, #4]
 8109d42:	2200      	movs	r2, #0
 8109d44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8109d48:	69fb      	ldr	r3, [r7, #28]
 8109d4a:	f003 0310 	and.w	r3, r3, #16
 8109d4e:	2b00      	cmp	r3, #0
 8109d50:	d00f      	beq.n	8109d72 <HAL_ETH_IRQHandler+0x19e>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8109d52:	687b      	ldr	r3, [r7, #4]
 8109d54:	681b      	ldr	r3, [r3, #0]
 8109d56:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8109d5a:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8109d5e:	687b      	ldr	r3, [r7, #4]
 8109d60:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8109d64:	6878      	ldr	r0, [r7, #4]
 8109d66:	f000 f83f 	bl	8109de8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8109d6a:	687b      	ldr	r3, [r7, #4]
 8109d6c:	2200      	movs	r2, #0
 8109d6e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 8109d72:	69fb      	ldr	r3, [r7, #28]
 8109d74:	f003 0320 	and.w	r3, r3, #32
 8109d78:	2b00      	cmp	r3, #0
 8109d7a:	d00f      	beq.n	8109d9c <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 8109d7c:	687b      	ldr	r3, [r7, #4]
 8109d7e:	681b      	ldr	r3, [r3, #0]
 8109d80:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8109d84:	f003 020f 	and.w	r2, r3, #15
 8109d88:	687b      	ldr	r3, [r7, #4]
 8109d8a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8109d8e:	6878      	ldr	r0, [r7, #4]
 8109d90:	f000 f834 	bl	8109dfc <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8109d94:	687b      	ldr	r3, [r7, #4]
 8109d96:	2200      	movs	r2, #0
 8109d98:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8109d9c:	f7ff fb30 	bl	8109400 <HAL_GetCurrentCPUID>
 8109da0:	4603      	mov	r3, r0
 8109da2:	2b03      	cmp	r3, #3
 8109da4:	d10c      	bne.n	8109dc0 <HAL_ETH_IRQHandler+0x1ec>
  {
    /* check ETH WAKEUP exti flag */
    if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8109da6:	693b      	ldr	r3, [r7, #16]
 8109da8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8109dac:	2b00      	cmp	r3, #0
 8109dae:	d013      	beq.n	8109dd8 <HAL_ETH_IRQHandler+0x204>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8109db0:	4b0b      	ldr	r3, [pc, #44]	@ (8109de0 <HAL_ETH_IRQHandler+0x20c>)
 8109db2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8109db6:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8109db8:	6878      	ldr	r0, [r7, #4]
 8109dba:	f000 f829 	bl	8109e10 <HAL_ETH_WakeUpCallback>
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 8109dbe:	e00b      	b.n	8109dd8 <HAL_ETH_IRQHandler+0x204>
    if ((exti_d2_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8109dc0:	68fb      	ldr	r3, [r7, #12]
 8109dc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8109dc6:	2b00      	cmp	r3, #0
 8109dc8:	d006      	beq.n	8109dd8 <HAL_ETH_IRQHandler+0x204>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8109dca:	4b06      	ldr	r3, [pc, #24]	@ (8109de4 <HAL_ETH_IRQHandler+0x210>)
 8109dcc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8109dd0:	629a      	str	r2, [r3, #40]	@ 0x28
      HAL_ETH_WakeUpCallback(heth);
 8109dd2:	6878      	ldr	r0, [r7, #4]
 8109dd4:	f000 f81c 	bl	8109e10 <HAL_ETH_WakeUpCallback>
}
 8109dd8:	bf00      	nop
 8109dda:	3720      	adds	r7, #32
 8109ddc:	46bd      	mov	sp, r7
 8109dde:	bd80      	pop	{r7, pc}
 8109de0:	58000080 	.word	0x58000080
 8109de4:	580000c0 	.word	0x580000c0

08109de8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8109de8:	b480      	push	{r7}
 8109dea:	b083      	sub	sp, #12
 8109dec:	af00      	add	r7, sp, #0
 8109dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8109df0:	bf00      	nop
 8109df2:	370c      	adds	r7, #12
 8109df4:	46bd      	mov	sp, r7
 8109df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109dfa:	4770      	bx	lr

08109dfc <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8109dfc:	b480      	push	{r7}
 8109dfe:	b083      	sub	sp, #12
 8109e00:	af00      	add	r7, sp, #0
 8109e02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8109e04:	bf00      	nop
 8109e06:	370c      	adds	r7, #12
 8109e08:	46bd      	mov	sp, r7
 8109e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109e0e:	4770      	bx	lr

08109e10 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8109e10:	b480      	push	{r7}
 8109e12:	b083      	sub	sp, #12
 8109e14:	af00      	add	r7, sp, #0
 8109e16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8109e18:	bf00      	nop
 8109e1a:	370c      	adds	r7, #12
 8109e1c:	46bd      	mov	sp, r7
 8109e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109e22:	4770      	bx	lr

08109e24 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8109e24:	b580      	push	{r7, lr}
 8109e26:	b086      	sub	sp, #24
 8109e28:	af00      	add	r7, sp, #0
 8109e2a:	60f8      	str	r0, [r7, #12]
 8109e2c:	60b9      	str	r1, [r7, #8]
 8109e2e:	607a      	str	r2, [r7, #4]
 8109e30:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8109e32:	68fb      	ldr	r3, [r7, #12]
 8109e34:	681b      	ldr	r3, [r3, #0]
 8109e36:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8109e3a:	f003 0301 	and.w	r3, r3, #1
 8109e3e:	2b00      	cmp	r3, #0
 8109e40:	d001      	beq.n	8109e46 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8109e42:	2301      	movs	r3, #1
 8109e44:	e03e      	b.n	8109ec4 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8109e46:	68fb      	ldr	r3, [r7, #12]
 8109e48:	681b      	ldr	r3, [r3, #0]
 8109e4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8109e4e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8109e50:	697b      	ldr	r3, [r7, #20]
 8109e52:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8109e56:	68bb      	ldr	r3, [r7, #8]
 8109e58:	055b      	lsls	r3, r3, #21
 8109e5a:	4313      	orrs	r3, r2
 8109e5c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8109e5e:	697b      	ldr	r3, [r7, #20]
 8109e60:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8109e64:	687b      	ldr	r3, [r7, #4]
 8109e66:	041b      	lsls	r3, r3, #16
 8109e68:	4313      	orrs	r3, r2
 8109e6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8109e6c:	697b      	ldr	r3, [r7, #20]
 8109e6e:	f043 030c 	orr.w	r3, r3, #12
 8109e72:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8109e74:	697b      	ldr	r3, [r7, #20]
 8109e76:	f043 0301 	orr.w	r3, r3, #1
 8109e7a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8109e7c:	68fb      	ldr	r3, [r7, #12]
 8109e7e:	681b      	ldr	r3, [r3, #0]
 8109e80:	697a      	ldr	r2, [r7, #20]
 8109e82:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8109e86:	f7ff f9bb 	bl	8109200 <HAL_GetTick>
 8109e8a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8109e8c:	e009      	b.n	8109ea2 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8109e8e:	f7ff f9b7 	bl	8109200 <HAL_GetTick>
 8109e92:	4602      	mov	r2, r0
 8109e94:	693b      	ldr	r3, [r7, #16]
 8109e96:	1ad3      	subs	r3, r2, r3
 8109e98:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8109e9c:	d901      	bls.n	8109ea2 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8109e9e:	2301      	movs	r3, #1
 8109ea0:	e010      	b.n	8109ec4 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8109ea2:	68fb      	ldr	r3, [r7, #12]
 8109ea4:	681b      	ldr	r3, [r3, #0]
 8109ea6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8109eaa:	f003 0301 	and.w	r3, r3, #1
 8109eae:	2b00      	cmp	r3, #0
 8109eb0:	d1ed      	bne.n	8109e8e <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8109eb2:	68fb      	ldr	r3, [r7, #12]
 8109eb4:	681b      	ldr	r3, [r3, #0]
 8109eb6:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8109eba:	b29b      	uxth	r3, r3
 8109ebc:	461a      	mov	r2, r3
 8109ebe:	683b      	ldr	r3, [r7, #0]
 8109ec0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8109ec2:	2300      	movs	r3, #0
}
 8109ec4:	4618      	mov	r0, r3
 8109ec6:	3718      	adds	r7, #24
 8109ec8:	46bd      	mov	sp, r7
 8109eca:	bd80      	pop	{r7, pc}

08109ecc <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8109ecc:	b580      	push	{r7, lr}
 8109ece:	b086      	sub	sp, #24
 8109ed0:	af00      	add	r7, sp, #0
 8109ed2:	60f8      	str	r0, [r7, #12]
 8109ed4:	60b9      	str	r1, [r7, #8]
 8109ed6:	607a      	str	r2, [r7, #4]
 8109ed8:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8109eda:	68fb      	ldr	r3, [r7, #12]
 8109edc:	681b      	ldr	r3, [r3, #0]
 8109ede:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8109ee2:	f003 0301 	and.w	r3, r3, #1
 8109ee6:	2b00      	cmp	r3, #0
 8109ee8:	d001      	beq.n	8109eee <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8109eea:	2301      	movs	r3, #1
 8109eec:	e03c      	b.n	8109f68 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8109eee:	68fb      	ldr	r3, [r7, #12]
 8109ef0:	681b      	ldr	r3, [r3, #0]
 8109ef2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8109ef6:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8109ef8:	697b      	ldr	r3, [r7, #20]
 8109efa:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8109efe:	68bb      	ldr	r3, [r7, #8]
 8109f00:	055b      	lsls	r3, r3, #21
 8109f02:	4313      	orrs	r3, r2
 8109f04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8109f06:	697b      	ldr	r3, [r7, #20]
 8109f08:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8109f0c:	687b      	ldr	r3, [r7, #4]
 8109f0e:	041b      	lsls	r3, r3, #16
 8109f10:	4313      	orrs	r3, r2
 8109f12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8109f14:	697b      	ldr	r3, [r7, #20]
 8109f16:	f023 030c 	bic.w	r3, r3, #12
 8109f1a:	f043 0304 	orr.w	r3, r3, #4
 8109f1e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8109f20:	697b      	ldr	r3, [r7, #20]
 8109f22:	f043 0301 	orr.w	r3, r3, #1
 8109f26:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8109f28:	683b      	ldr	r3, [r7, #0]
 8109f2a:	b29a      	uxth	r2, r3
 8109f2c:	4b10      	ldr	r3, [pc, #64]	@ (8109f70 <HAL_ETH_WritePHYRegister+0xa4>)
 8109f2e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8109f32:	4a0f      	ldr	r2, [pc, #60]	@ (8109f70 <HAL_ETH_WritePHYRegister+0xa4>)
 8109f34:	697b      	ldr	r3, [r7, #20]
 8109f36:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8109f3a:	f7ff f961 	bl	8109200 <HAL_GetTick>
 8109f3e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8109f40:	e009      	b.n	8109f56 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8109f42:	f7ff f95d 	bl	8109200 <HAL_GetTick>
 8109f46:	4602      	mov	r2, r0
 8109f48:	693b      	ldr	r3, [r7, #16]
 8109f4a:	1ad3      	subs	r3, r2, r3
 8109f4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8109f50:	d901      	bls.n	8109f56 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8109f52:	2301      	movs	r3, #1
 8109f54:	e008      	b.n	8109f68 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8109f56:	68fb      	ldr	r3, [r7, #12]
 8109f58:	681b      	ldr	r3, [r3, #0]
 8109f5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8109f5e:	f003 0301 	and.w	r3, r3, #1
 8109f62:	2b00      	cmp	r3, #0
 8109f64:	d1ed      	bne.n	8109f42 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8109f66:	2300      	movs	r3, #0
}
 8109f68:	4618      	mov	r0, r3
 8109f6a:	3718      	adds	r7, #24
 8109f6c:	46bd      	mov	sp, r7
 8109f6e:	bd80      	pop	{r7, pc}
 8109f70:	40028000 	.word	0x40028000

08109f74 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8109f74:	b480      	push	{r7}
 8109f76:	b083      	sub	sp, #12
 8109f78:	af00      	add	r7, sp, #0
 8109f7a:	6078      	str	r0, [r7, #4]
 8109f7c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8109f7e:	683b      	ldr	r3, [r7, #0]
 8109f80:	2b00      	cmp	r3, #0
 8109f82:	d101      	bne.n	8109f88 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8109f84:	2301      	movs	r3, #1
 8109f86:	e1c3      	b.n	810a310 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8109f88:	687b      	ldr	r3, [r7, #4]
 8109f8a:	681b      	ldr	r3, [r3, #0]
 8109f8c:	681b      	ldr	r3, [r3, #0]
 8109f8e:	f003 020c 	and.w	r2, r3, #12
 8109f92:	683b      	ldr	r3, [r7, #0]
 8109f94:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8109f96:	687b      	ldr	r3, [r7, #4]
 8109f98:	681b      	ldr	r3, [r3, #0]
 8109f9a:	681b      	ldr	r3, [r3, #0]
 8109f9c:	f003 0310 	and.w	r3, r3, #16
 8109fa0:	2b00      	cmp	r3, #0
 8109fa2:	bf14      	ite	ne
 8109fa4:	2301      	movne	r3, #1
 8109fa6:	2300      	moveq	r3, #0
 8109fa8:	b2db      	uxtb	r3, r3
 8109faa:	461a      	mov	r2, r3
 8109fac:	683b      	ldr	r3, [r7, #0]
 8109fae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8109fb2:	687b      	ldr	r3, [r7, #4]
 8109fb4:	681b      	ldr	r3, [r3, #0]
 8109fb6:	681b      	ldr	r3, [r3, #0]
 8109fb8:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8109fbc:	683b      	ldr	r3, [r7, #0]
 8109fbe:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8109fc0:	687b      	ldr	r3, [r7, #4]
 8109fc2:	681b      	ldr	r3, [r3, #0]
 8109fc4:	681b      	ldr	r3, [r3, #0]
 8109fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8109fca:	2b00      	cmp	r3, #0
 8109fcc:	bf0c      	ite	eq
 8109fce:	2301      	moveq	r3, #1
 8109fd0:	2300      	movne	r3, #0
 8109fd2:	b2db      	uxtb	r3, r3
 8109fd4:	461a      	mov	r2, r3
 8109fd6:	683b      	ldr	r3, [r7, #0]
 8109fd8:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8109fdc:	687b      	ldr	r3, [r7, #4]
 8109fde:	681b      	ldr	r3, [r3, #0]
 8109fe0:	681b      	ldr	r3, [r3, #0]
 8109fe2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 8109fe6:	2b00      	cmp	r3, #0
 8109fe8:	bf14      	ite	ne
 8109fea:	2301      	movne	r3, #1
 8109fec:	2300      	moveq	r3, #0
 8109fee:	b2db      	uxtb	r3, r3
 8109ff0:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8109ff2:	683b      	ldr	r3, [r7, #0]
 8109ff4:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8109ff6:	687b      	ldr	r3, [r7, #4]
 8109ff8:	681b      	ldr	r3, [r3, #0]
 8109ffa:	681b      	ldr	r3, [r3, #0]
 8109ffc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 810a000:	2b00      	cmp	r3, #0
 810a002:	bf0c      	ite	eq
 810a004:	2301      	moveq	r3, #1
 810a006:	2300      	movne	r3, #0
 810a008:	b2db      	uxtb	r3, r3
 810a00a:	461a      	mov	r2, r3
 810a00c:	683b      	ldr	r3, [r7, #0]
 810a00e:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 810a010:	687b      	ldr	r3, [r7, #4]
 810a012:	681b      	ldr	r3, [r3, #0]
 810a014:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 810a016:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810a01a:	2b00      	cmp	r3, #0
 810a01c:	bf14      	ite	ne
 810a01e:	2301      	movne	r3, #1
 810a020:	2300      	moveq	r3, #0
 810a022:	b2db      	uxtb	r3, r3
 810a024:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 810a026:	683b      	ldr	r3, [r7, #0]
 810a028:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 810a02a:	687b      	ldr	r3, [r7, #4]
 810a02c:	681b      	ldr	r3, [r3, #0]
 810a02e:	681b      	ldr	r3, [r3, #0]
 810a030:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 810a034:	2b00      	cmp	r3, #0
 810a036:	bf14      	ite	ne
 810a038:	2301      	movne	r3, #1
 810a03a:	2300      	moveq	r3, #0
 810a03c:	b2db      	uxtb	r3, r3
 810a03e:	461a      	mov	r2, r3
 810a040:	683b      	ldr	r3, [r7, #0]
 810a042:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 810a044:	687b      	ldr	r3, [r7, #4]
 810a046:	681b      	ldr	r3, [r3, #0]
 810a048:	681b      	ldr	r3, [r3, #0]
 810a04a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 810a04e:	683b      	ldr	r3, [r7, #0]
 810a050:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 810a052:	687b      	ldr	r3, [r7, #4]
 810a054:	681b      	ldr	r3, [r3, #0]
 810a056:	681b      	ldr	r3, [r3, #0]
 810a058:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 810a05c:	683b      	ldr	r3, [r7, #0]
 810a05e:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 810a060:	687b      	ldr	r3, [r7, #4]
 810a062:	681b      	ldr	r3, [r3, #0]
 810a064:	681b      	ldr	r3, [r3, #0]
 810a066:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810a06a:	2b00      	cmp	r3, #0
 810a06c:	bf14      	ite	ne
 810a06e:	2301      	movne	r3, #1
 810a070:	2300      	moveq	r3, #0
 810a072:	b2db      	uxtb	r3, r3
 810a074:	461a      	mov	r2, r3
 810a076:	683b      	ldr	r3, [r7, #0]
 810a078:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 810a07a:	687b      	ldr	r3, [r7, #4]
 810a07c:	681b      	ldr	r3, [r3, #0]
 810a07e:	681b      	ldr	r3, [r3, #0]
 810a080:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810a084:	2b00      	cmp	r3, #0
 810a086:	bf0c      	ite	eq
 810a088:	2301      	moveq	r3, #1
 810a08a:	2300      	movne	r3, #0
 810a08c:	b2db      	uxtb	r3, r3
 810a08e:	461a      	mov	r2, r3
 810a090:	683b      	ldr	r3, [r7, #0]
 810a092:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 810a094:	687b      	ldr	r3, [r7, #4]
 810a096:	681b      	ldr	r3, [r3, #0]
 810a098:	681b      	ldr	r3, [r3, #0]
 810a09a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 810a09e:	2b00      	cmp	r3, #0
 810a0a0:	bf0c      	ite	eq
 810a0a2:	2301      	moveq	r3, #1
 810a0a4:	2300      	movne	r3, #0
 810a0a6:	b2db      	uxtb	r3, r3
 810a0a8:	461a      	mov	r2, r3
 810a0aa:	683b      	ldr	r3, [r7, #0]
 810a0ac:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 810a0ae:	687b      	ldr	r3, [r7, #4]
 810a0b0:	681b      	ldr	r3, [r3, #0]
 810a0b2:	681b      	ldr	r3, [r3, #0]
 810a0b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810a0b8:	2b00      	cmp	r3, #0
 810a0ba:	bf14      	ite	ne
 810a0bc:	2301      	movne	r3, #1
 810a0be:	2300      	moveq	r3, #0
 810a0c0:	b2db      	uxtb	r3, r3
 810a0c2:	461a      	mov	r2, r3
 810a0c4:	683b      	ldr	r3, [r7, #0]
 810a0c6:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 810a0c8:	687b      	ldr	r3, [r7, #4]
 810a0ca:	681b      	ldr	r3, [r3, #0]
 810a0cc:	681b      	ldr	r3, [r3, #0]
 810a0ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 810a0d2:	2b00      	cmp	r3, #0
 810a0d4:	bf14      	ite	ne
 810a0d6:	2301      	movne	r3, #1
 810a0d8:	2300      	moveq	r3, #0
 810a0da:	b2db      	uxtb	r3, r3
 810a0dc:	461a      	mov	r2, r3
 810a0de:	683b      	ldr	r3, [r7, #0]
 810a0e0:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 810a0e2:	687b      	ldr	r3, [r7, #4]
 810a0e4:	681b      	ldr	r3, [r3, #0]
 810a0e6:	681b      	ldr	r3, [r3, #0]
 810a0e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810a0ec:	2b00      	cmp	r3, #0
 810a0ee:	bf14      	ite	ne
 810a0f0:	2301      	movne	r3, #1
 810a0f2:	2300      	moveq	r3, #0
 810a0f4:	b2db      	uxtb	r3, r3
 810a0f6:	461a      	mov	r2, r3
 810a0f8:	683b      	ldr	r3, [r7, #0]
 810a0fa:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 810a0fc:	687b      	ldr	r3, [r7, #4]
 810a0fe:	681b      	ldr	r3, [r3, #0]
 810a100:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 810a102:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810a106:	2b00      	cmp	r3, #0
 810a108:	bf14      	ite	ne
 810a10a:	2301      	movne	r3, #1
 810a10c:	2300      	moveq	r3, #0
 810a10e:	b2db      	uxtb	r3, r3
 810a110:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 810a112:	683b      	ldr	r3, [r7, #0]
 810a114:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 810a116:	687b      	ldr	r3, [r7, #4]
 810a118:	681b      	ldr	r3, [r3, #0]
 810a11a:	681b      	ldr	r3, [r3, #0]
 810a11c:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 810a120:	683b      	ldr	r3, [r7, #0]
 810a122:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 810a124:	687b      	ldr	r3, [r7, #4]
 810a126:	681b      	ldr	r3, [r3, #0]
 810a128:	681b      	ldr	r3, [r3, #0]
 810a12a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810a12e:	2b00      	cmp	r3, #0
 810a130:	bf14      	ite	ne
 810a132:	2301      	movne	r3, #1
 810a134:	2300      	moveq	r3, #0
 810a136:	b2db      	uxtb	r3, r3
 810a138:	461a      	mov	r2, r3
 810a13a:	683b      	ldr	r3, [r7, #0]
 810a13c:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 810a13e:	687b      	ldr	r3, [r7, #4]
 810a140:	681b      	ldr	r3, [r3, #0]
 810a142:	681b      	ldr	r3, [r3, #0]
 810a144:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 810a148:	683b      	ldr	r3, [r7, #0]
 810a14a:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 810a14c:	687b      	ldr	r3, [r7, #4]
 810a14e:	681b      	ldr	r3, [r3, #0]
 810a150:	685b      	ldr	r3, [r3, #4]
 810a152:	f3c3 020d 	ubfx	r2, r3, #0, #14
 810a156:	683b      	ldr	r3, [r7, #0]
 810a158:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 810a15a:	687b      	ldr	r3, [r7, #4]
 810a15c:	681b      	ldr	r3, [r3, #0]
 810a15e:	685b      	ldr	r3, [r3, #4]
 810a160:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810a164:	2b00      	cmp	r3, #0
 810a166:	bf0c      	ite	eq
 810a168:	2301      	moveq	r3, #1
 810a16a:	2300      	movne	r3, #0
 810a16c:	b2db      	uxtb	r3, r3
 810a16e:	461a      	mov	r2, r3
 810a170:	683b      	ldr	r3, [r7, #0]
 810a172:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 810a176:	687b      	ldr	r3, [r7, #4]
 810a178:	681b      	ldr	r3, [r3, #0]
 810a17a:	685b      	ldr	r3, [r3, #4]
 810a17c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810a180:	2b00      	cmp	r3, #0
 810a182:	bf14      	ite	ne
 810a184:	2301      	movne	r3, #1
 810a186:	2300      	moveq	r3, #0
 810a188:	b2db      	uxtb	r3, r3
 810a18a:	461a      	mov	r2, r3
 810a18c:	683b      	ldr	r3, [r7, #0]
 810a18e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 810a192:	687b      	ldr	r3, [r7, #4]
 810a194:	681b      	ldr	r3, [r3, #0]
 810a196:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 810a198:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 810a19c:	2b00      	cmp	r3, #0
 810a19e:	bf14      	ite	ne
 810a1a0:	2301      	movne	r3, #1
 810a1a2:	2300      	moveq	r3, #0
 810a1a4:	b2db      	uxtb	r3, r3
 810a1a6:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 810a1a8:	683b      	ldr	r3, [r7, #0]
 810a1aa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 810a1ae:	687b      	ldr	r3, [r7, #4]
 810a1b0:	681b      	ldr	r3, [r3, #0]
 810a1b2:	685b      	ldr	r3, [r3, #4]
 810a1b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 810a1b8:	2b00      	cmp	r3, #0
 810a1ba:	bf14      	ite	ne
 810a1bc:	2301      	movne	r3, #1
 810a1be:	2300      	moveq	r3, #0
 810a1c0:	b2db      	uxtb	r3, r3
 810a1c2:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 810a1c4:	683b      	ldr	r3, [r7, #0]
 810a1c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 810a1ca:	687b      	ldr	r3, [r7, #4]
 810a1cc:	681b      	ldr	r3, [r3, #0]
 810a1ce:	685b      	ldr	r3, [r3, #4]
 810a1d0:	0e5b      	lsrs	r3, r3, #25
 810a1d2:	f003 021f 	and.w	r2, r3, #31
 810a1d6:	683b      	ldr	r3, [r7, #0]
 810a1d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 810a1da:	687b      	ldr	r3, [r7, #4]
 810a1dc:	681b      	ldr	r3, [r3, #0]
 810a1de:	68db      	ldr	r3, [r3, #12]
 810a1e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810a1e4:	2b00      	cmp	r3, #0
 810a1e6:	bf14      	ite	ne
 810a1e8:	2301      	movne	r3, #1
 810a1ea:	2300      	moveq	r3, #0
 810a1ec:	b2db      	uxtb	r3, r3
 810a1ee:	461a      	mov	r2, r3
 810a1f0:	683b      	ldr	r3, [r7, #0]
 810a1f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 810a1f6:	687b      	ldr	r3, [r7, #4]
 810a1f8:	681b      	ldr	r3, [r3, #0]
 810a1fa:	68db      	ldr	r3, [r3, #12]
 810a1fc:	f003 020f 	and.w	r2, r3, #15
 810a200:	683b      	ldr	r3, [r7, #0]
 810a202:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 810a204:	687b      	ldr	r3, [r7, #4]
 810a206:	681b      	ldr	r3, [r3, #0]
 810a208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810a20a:	f003 0302 	and.w	r3, r3, #2
 810a20e:	2b00      	cmp	r3, #0
 810a210:	bf14      	ite	ne
 810a212:	2301      	movne	r3, #1
 810a214:	2300      	moveq	r3, #0
 810a216:	b2db      	uxtb	r3, r3
 810a218:	461a      	mov	r2, r3
 810a21a:	683b      	ldr	r3, [r7, #0]
 810a21c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 810a220:	687b      	ldr	r3, [r7, #4]
 810a222:	681b      	ldr	r3, [r3, #0]
 810a224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810a226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810a22a:	2b00      	cmp	r3, #0
 810a22c:	bf0c      	ite	eq
 810a22e:	2301      	moveq	r3, #1
 810a230:	2300      	movne	r3, #0
 810a232:	b2db      	uxtb	r3, r3
 810a234:	461a      	mov	r2, r3
 810a236:	683b      	ldr	r3, [r7, #0]
 810a238:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 810a23c:	687b      	ldr	r3, [r7, #4]
 810a23e:	681b      	ldr	r3, [r3, #0]
 810a240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810a242:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 810a246:	683b      	ldr	r3, [r7, #0]
 810a248:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 810a24a:	687b      	ldr	r3, [r7, #4]
 810a24c:	681b      	ldr	r3, [r3, #0]
 810a24e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810a250:	0c1b      	lsrs	r3, r3, #16
 810a252:	b29a      	uxth	r2, r3
 810a254:	683b      	ldr	r3, [r7, #0]
 810a256:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 810a258:	687b      	ldr	r3, [r7, #4]
 810a25a:	681b      	ldr	r3, [r3, #0]
 810a25c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810a260:	f003 0301 	and.w	r3, r3, #1
 810a264:	2b00      	cmp	r3, #0
 810a266:	bf14      	ite	ne
 810a268:	2301      	movne	r3, #1
 810a26a:	2300      	moveq	r3, #0
 810a26c:	b2db      	uxtb	r3, r3
 810a26e:	461a      	mov	r2, r3
 810a270:	683b      	ldr	r3, [r7, #0]
 810a272:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 810a276:	687b      	ldr	r3, [r7, #4]
 810a278:	681b      	ldr	r3, [r3, #0]
 810a27a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810a27e:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 810a282:	2b00      	cmp	r3, #0
 810a284:	bf14      	ite	ne
 810a286:	2301      	movne	r3, #1
 810a288:	2300      	moveq	r3, #0
 810a28a:	b2db      	uxtb	r3, r3
 810a28c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 810a28e:	683b      	ldr	r3, [r7, #0]
 810a290:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 810a294:	687b      	ldr	r3, [r7, #4]
 810a296:	681b      	ldr	r3, [r3, #0]
 810a298:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 810a29c:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 810a2a0:	683b      	ldr	r3, [r7, #0]
 810a2a2:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 810a2a4:	687b      	ldr	r3, [r7, #4]
 810a2a6:	681b      	ldr	r3, [r3, #0]
 810a2a8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 810a2ac:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 810a2b0:	683b      	ldr	r3, [r7, #0]
 810a2b2:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 810a2b4:	687b      	ldr	r3, [r7, #4]
 810a2b6:	681b      	ldr	r3, [r3, #0]
 810a2b8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 810a2bc:	f003 0308 	and.w	r3, r3, #8
 810a2c0:	2b00      	cmp	r3, #0
 810a2c2:	bf14      	ite	ne
 810a2c4:	2301      	movne	r3, #1
 810a2c6:	2300      	moveq	r3, #0
 810a2c8:	b2db      	uxtb	r3, r3
 810a2ca:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 810a2cc:	683b      	ldr	r3, [r7, #0]
 810a2ce:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 810a2d2:	687b      	ldr	r3, [r7, #4]
 810a2d4:	681b      	ldr	r3, [r3, #0]
 810a2d6:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 810a2da:	f003 0310 	and.w	r3, r3, #16
 810a2de:	2b00      	cmp	r3, #0
 810a2e0:	bf14      	ite	ne
 810a2e2:	2301      	movne	r3, #1
 810a2e4:	2300      	moveq	r3, #0
 810a2e6:	b2db      	uxtb	r3, r3
 810a2e8:	461a      	mov	r2, r3
 810a2ea:	683b      	ldr	r3, [r7, #0]
 810a2ec:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 810a2f0:	687b      	ldr	r3, [r7, #4]
 810a2f2:	681b      	ldr	r3, [r3, #0]
 810a2f4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 810a2f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810a2fc:	2b00      	cmp	r3, #0
 810a2fe:	bf0c      	ite	eq
 810a300:	2301      	moveq	r3, #1
 810a302:	2300      	movne	r3, #0
 810a304:	b2db      	uxtb	r3, r3
 810a306:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 810a308:	683b      	ldr	r3, [r7, #0]
 810a30a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 810a30e:	2300      	movs	r3, #0
}
 810a310:	4618      	mov	r0, r3
 810a312:	370c      	adds	r7, #12
 810a314:	46bd      	mov	sp, r7
 810a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a31a:	4770      	bx	lr

0810a31c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 810a31c:	b580      	push	{r7, lr}
 810a31e:	b082      	sub	sp, #8
 810a320:	af00      	add	r7, sp, #0
 810a322:	6078      	str	r0, [r7, #4]
 810a324:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 810a326:	683b      	ldr	r3, [r7, #0]
 810a328:	2b00      	cmp	r3, #0
 810a32a:	d101      	bne.n	810a330 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 810a32c:	2301      	movs	r3, #1
 810a32e:	e00b      	b.n	810a348 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 810a330:	687b      	ldr	r3, [r7, #4]
 810a332:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810a336:	2b10      	cmp	r3, #16
 810a338:	d105      	bne.n	810a346 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 810a33a:	6839      	ldr	r1, [r7, #0]
 810a33c:	6878      	ldr	r0, [r7, #4]
 810a33e:	f000 f871 	bl	810a424 <ETH_SetMACConfig>

    return HAL_OK;
 810a342:	2300      	movs	r3, #0
 810a344:	e000      	b.n	810a348 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 810a346:	2301      	movs	r3, #1
  }
}
 810a348:	4618      	mov	r0, r3
 810a34a:	3708      	adds	r7, #8
 810a34c:	46bd      	mov	sp, r7
 810a34e:	bd80      	pop	{r7, pc}

0810a350 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 810a350:	b580      	push	{r7, lr}
 810a352:	b084      	sub	sp, #16
 810a354:	af00      	add	r7, sp, #0
 810a356:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 810a358:	687b      	ldr	r3, [r7, #4]
 810a35a:	681b      	ldr	r3, [r3, #0]
 810a35c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 810a360:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 810a362:	68fb      	ldr	r3, [r7, #12]
 810a364:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 810a368:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 810a36a:	f001 fff1 	bl	810c350 <HAL_RCC_GetHCLKFreq>
 810a36e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 810a370:	68bb      	ldr	r3, [r7, #8]
 810a372:	4a1a      	ldr	r2, [pc, #104]	@ (810a3dc <HAL_ETH_SetMDIOClockRange+0x8c>)
 810a374:	4293      	cmp	r3, r2
 810a376:	d804      	bhi.n	810a382 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 810a378:	68fb      	ldr	r3, [r7, #12]
 810a37a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 810a37e:	60fb      	str	r3, [r7, #12]
 810a380:	e022      	b.n	810a3c8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 810a382:	68bb      	ldr	r3, [r7, #8]
 810a384:	4a16      	ldr	r2, [pc, #88]	@ (810a3e0 <HAL_ETH_SetMDIOClockRange+0x90>)
 810a386:	4293      	cmp	r3, r2
 810a388:	d204      	bcs.n	810a394 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 810a38a:	68fb      	ldr	r3, [r7, #12]
 810a38c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 810a390:	60fb      	str	r3, [r7, #12]
 810a392:	e019      	b.n	810a3c8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 810a394:	68bb      	ldr	r3, [r7, #8]
 810a396:	4a13      	ldr	r2, [pc, #76]	@ (810a3e4 <HAL_ETH_SetMDIOClockRange+0x94>)
 810a398:	4293      	cmp	r3, r2
 810a39a:	d915      	bls.n	810a3c8 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 810a39c:	68bb      	ldr	r3, [r7, #8]
 810a39e:	4a12      	ldr	r2, [pc, #72]	@ (810a3e8 <HAL_ETH_SetMDIOClockRange+0x98>)
 810a3a0:	4293      	cmp	r3, r2
 810a3a2:	d804      	bhi.n	810a3ae <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 810a3a4:	68fb      	ldr	r3, [r7, #12]
 810a3a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810a3aa:	60fb      	str	r3, [r7, #12]
 810a3ac:	e00c      	b.n	810a3c8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 810a3ae:	68bb      	ldr	r3, [r7, #8]
 810a3b0:	4a0e      	ldr	r2, [pc, #56]	@ (810a3ec <HAL_ETH_SetMDIOClockRange+0x9c>)
 810a3b2:	4293      	cmp	r3, r2
 810a3b4:	d804      	bhi.n	810a3c0 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 810a3b6:	68fb      	ldr	r3, [r7, #12]
 810a3b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 810a3bc:	60fb      	str	r3, [r7, #12]
 810a3be:	e003      	b.n	810a3c8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 810a3c0:	68fb      	ldr	r3, [r7, #12]
 810a3c2:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 810a3c6:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 810a3c8:	687b      	ldr	r3, [r7, #4]
 810a3ca:	681b      	ldr	r3, [r3, #0]
 810a3cc:	68fa      	ldr	r2, [r7, #12]
 810a3ce:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 810a3d2:	bf00      	nop
 810a3d4:	3710      	adds	r7, #16
 810a3d6:	46bd      	mov	sp, r7
 810a3d8:	bd80      	pop	{r7, pc}
 810a3da:	bf00      	nop
 810a3dc:	02160ebf 	.word	0x02160ebf
 810a3e0:	03938700 	.word	0x03938700
 810a3e4:	05f5e0ff 	.word	0x05f5e0ff
 810a3e8:	08f0d17f 	.word	0x08f0d17f
 810a3ec:	0ee6b27f 	.word	0x0ee6b27f

0810a3f0 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 810a3f0:	b480      	push	{r7}
 810a3f2:	b083      	sub	sp, #12
 810a3f4:	af00      	add	r7, sp, #0
 810a3f6:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 810a3f8:	687b      	ldr	r3, [r7, #4]
 810a3fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 810a3fe:	4618      	mov	r0, r3
 810a400:	370c      	adds	r7, #12
 810a402:	46bd      	mov	sp, r7
 810a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a408:	4770      	bx	lr

0810a40a <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 810a40a:	b480      	push	{r7}
 810a40c:	b083      	sub	sp, #12
 810a40e:	af00      	add	r7, sp, #0
 810a410:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 810a412:	687b      	ldr	r3, [r7, #4]
 810a414:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 810a418:	4618      	mov	r0, r3
 810a41a:	370c      	adds	r7, #12
 810a41c:	46bd      	mov	sp, r7
 810a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a422:	4770      	bx	lr

0810a424 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 810a424:	b480      	push	{r7}
 810a426:	b085      	sub	sp, #20
 810a428:	af00      	add	r7, sp, #0
 810a42a:	6078      	str	r0, [r7, #4]
 810a42c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 810a42e:	683b      	ldr	r3, [r7, #0]
 810a430:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 810a432:	683b      	ldr	r3, [r7, #0]
 810a434:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 810a436:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 810a438:	683b      	ldr	r3, [r7, #0]
 810a43a:	791b      	ldrb	r3, [r3, #4]
 810a43c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 810a43e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 810a440:	683b      	ldr	r3, [r7, #0]
 810a442:	7b1b      	ldrb	r3, [r3, #12]
 810a444:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 810a446:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 810a448:	683b      	ldr	r3, [r7, #0]
 810a44a:	7b5b      	ldrb	r3, [r3, #13]
 810a44c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 810a44e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 810a450:	683b      	ldr	r3, [r7, #0]
 810a452:	7b9b      	ldrb	r3, [r3, #14]
 810a454:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 810a456:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 810a458:	683b      	ldr	r3, [r7, #0]
 810a45a:	7bdb      	ldrb	r3, [r3, #15]
 810a45c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 810a45e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 810a460:	683a      	ldr	r2, [r7, #0]
 810a462:	7c12      	ldrb	r2, [r2, #16]
 810a464:	2a00      	cmp	r2, #0
 810a466:	d102      	bne.n	810a46e <ETH_SetMACConfig+0x4a>
 810a468:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 810a46c:	e000      	b.n	810a470 <ETH_SetMACConfig+0x4c>
 810a46e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 810a470:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 810a472:	683a      	ldr	r2, [r7, #0]
 810a474:	7c52      	ldrb	r2, [r2, #17]
 810a476:	2a00      	cmp	r2, #0
 810a478:	d102      	bne.n	810a480 <ETH_SetMACConfig+0x5c>
 810a47a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 810a47e:	e000      	b.n	810a482 <ETH_SetMACConfig+0x5e>
 810a480:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 810a482:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 810a484:	683b      	ldr	r3, [r7, #0]
 810a486:	7c9b      	ldrb	r3, [r3, #18]
 810a488:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 810a48a:	431a      	orrs	r2, r3
               macconf->Speed |
 810a48c:	683b      	ldr	r3, [r7, #0]
 810a48e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 810a490:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 810a492:	683b      	ldr	r3, [r7, #0]
 810a494:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 810a496:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 810a498:	683b      	ldr	r3, [r7, #0]
 810a49a:	7f1b      	ldrb	r3, [r3, #28]
 810a49c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 810a49e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 810a4a0:	683b      	ldr	r3, [r7, #0]
 810a4a2:	7f5b      	ldrb	r3, [r3, #29]
 810a4a4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 810a4a6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 810a4a8:	683a      	ldr	r2, [r7, #0]
 810a4aa:	7f92      	ldrb	r2, [r2, #30]
 810a4ac:	2a00      	cmp	r2, #0
 810a4ae:	d102      	bne.n	810a4b6 <ETH_SetMACConfig+0x92>
 810a4b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 810a4b4:	e000      	b.n	810a4b8 <ETH_SetMACConfig+0x94>
 810a4b6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 810a4b8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 810a4ba:	683b      	ldr	r3, [r7, #0]
 810a4bc:	7fdb      	ldrb	r3, [r3, #31]
 810a4be:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 810a4c0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 810a4c2:	683a      	ldr	r2, [r7, #0]
 810a4c4:	f892 2020 	ldrb.w	r2, [r2, #32]
 810a4c8:	2a00      	cmp	r2, #0
 810a4ca:	d102      	bne.n	810a4d2 <ETH_SetMACConfig+0xae>
 810a4cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810a4d0:	e000      	b.n	810a4d4 <ETH_SetMACConfig+0xb0>
 810a4d2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 810a4d4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 810a4d6:	683b      	ldr	r3, [r7, #0]
 810a4d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 810a4da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 810a4dc:	683b      	ldr	r3, [r7, #0]
 810a4de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810a4e2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 810a4e4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 810a4e6:	683b      	ldr	r3, [r7, #0]
 810a4e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 810a4ea:	4313      	orrs	r3, r2
 810a4ec:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 810a4ee:	687b      	ldr	r3, [r7, #4]
 810a4f0:	681b      	ldr	r3, [r3, #0]
 810a4f2:	681a      	ldr	r2, [r3, #0]
 810a4f4:	4b57      	ldr	r3, [pc, #348]	@ (810a654 <ETH_SetMACConfig+0x230>)
 810a4f6:	4013      	ands	r3, r2
 810a4f8:	687a      	ldr	r2, [r7, #4]
 810a4fa:	6812      	ldr	r2, [r2, #0]
 810a4fc:	68f9      	ldr	r1, [r7, #12]
 810a4fe:	430b      	orrs	r3, r1
 810a500:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 810a502:	683b      	ldr	r3, [r7, #0]
 810a504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810a506:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 810a508:	683b      	ldr	r3, [r7, #0]
 810a50a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 810a50e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 810a510:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 810a512:	683b      	ldr	r3, [r7, #0]
 810a514:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 810a518:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 810a51a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 810a51c:	683b      	ldr	r3, [r7, #0]
 810a51e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 810a522:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 810a524:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 810a526:	683a      	ldr	r2, [r7, #0]
 810a528:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 810a52c:	2a00      	cmp	r2, #0
 810a52e:	d102      	bne.n	810a536 <ETH_SetMACConfig+0x112>
 810a530:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 810a534:	e000      	b.n	810a538 <ETH_SetMACConfig+0x114>
 810a536:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 810a538:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 810a53a:	683b      	ldr	r3, [r7, #0]
 810a53c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 810a53e:	4313      	orrs	r3, r2
 810a540:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 810a542:	687b      	ldr	r3, [r7, #4]
 810a544:	681b      	ldr	r3, [r3, #0]
 810a546:	685a      	ldr	r2, [r3, #4]
 810a548:	4b43      	ldr	r3, [pc, #268]	@ (810a658 <ETH_SetMACConfig+0x234>)
 810a54a:	4013      	ands	r3, r2
 810a54c:	687a      	ldr	r2, [r7, #4]
 810a54e:	6812      	ldr	r2, [r2, #0]
 810a550:	68f9      	ldr	r1, [r7, #12]
 810a552:	430b      	orrs	r3, r1
 810a554:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 810a556:	683b      	ldr	r3, [r7, #0]
 810a558:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 810a55c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 810a55e:	683b      	ldr	r3, [r7, #0]
 810a560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 810a562:	4313      	orrs	r3, r2
 810a564:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 810a566:	687b      	ldr	r3, [r7, #4]
 810a568:	681b      	ldr	r3, [r3, #0]
 810a56a:	68db      	ldr	r3, [r3, #12]
 810a56c:	f423 7387 	bic.w	r3, r3, #270	@ 0x10e
 810a570:	f023 0301 	bic.w	r3, r3, #1
 810a574:	687a      	ldr	r2, [r7, #4]
 810a576:	6812      	ldr	r2, [r2, #0]
 810a578:	68f9      	ldr	r1, [r7, #12]
 810a57a:	430b      	orrs	r3, r1
 810a57c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 810a57e:	683b      	ldr	r3, [r7, #0]
 810a580:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 810a584:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 810a586:	683b      	ldr	r3, [r7, #0]
 810a588:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 810a58a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 810a58c:	683a      	ldr	r2, [r7, #0]
 810a58e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 810a592:	2a00      	cmp	r2, #0
 810a594:	d101      	bne.n	810a59a <ETH_SetMACConfig+0x176>
 810a596:	2280      	movs	r2, #128	@ 0x80
 810a598:	e000      	b.n	810a59c <ETH_SetMACConfig+0x178>
 810a59a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 810a59c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 810a59e:	683b      	ldr	r3, [r7, #0]
 810a5a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810a5a2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 810a5a4:	4313      	orrs	r3, r2
 810a5a6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 810a5a8:	687b      	ldr	r3, [r7, #4]
 810a5aa:	681b      	ldr	r3, [r3, #0]
 810a5ac:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 810a5ae:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 810a5b2:	4013      	ands	r3, r2
 810a5b4:	687a      	ldr	r2, [r7, #4]
 810a5b6:	6812      	ldr	r2, [r2, #0]
 810a5b8:	68f9      	ldr	r1, [r7, #12]
 810a5ba:	430b      	orrs	r3, r1
 810a5bc:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 810a5be:	683b      	ldr	r3, [r7, #0]
 810a5c0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 810a5c4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 810a5c6:	683b      	ldr	r3, [r7, #0]
 810a5c8:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 810a5cc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 810a5ce:	4313      	orrs	r3, r2
 810a5d0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 810a5d2:	687b      	ldr	r3, [r7, #4]
 810a5d4:	681b      	ldr	r3, [r3, #0]
 810a5d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810a5da:	f023 0103 	bic.w	r1, r3, #3
 810a5de:	687b      	ldr	r3, [r7, #4]
 810a5e0:	681b      	ldr	r3, [r3, #0]
 810a5e2:	68fa      	ldr	r2, [r7, #12]
 810a5e4:	430a      	orrs	r2, r1
 810a5e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 810a5ea:	687b      	ldr	r3, [r7, #4]
 810a5ec:	681b      	ldr	r3, [r3, #0]
 810a5ee:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 810a5f2:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 810a5f6:	683b      	ldr	r3, [r7, #0]
 810a5f8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 810a5fa:	687b      	ldr	r3, [r7, #4]
 810a5fc:	681b      	ldr	r3, [r3, #0]
 810a5fe:	430a      	orrs	r2, r1
 810a600:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 810a604:	683b      	ldr	r3, [r7, #0]
 810a606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 810a608:	683a      	ldr	r2, [r7, #0]
 810a60a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 810a60e:	2a00      	cmp	r2, #0
 810a610:	d101      	bne.n	810a616 <ETH_SetMACConfig+0x1f2>
 810a612:	2240      	movs	r2, #64	@ 0x40
 810a614:	e000      	b.n	810a618 <ETH_SetMACConfig+0x1f4>
 810a616:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 810a618:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 810a61a:	683b      	ldr	r3, [r7, #0]
 810a61c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 810a620:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 810a622:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 810a624:	683b      	ldr	r3, [r7, #0]
 810a626:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 810a62a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 810a62c:	4313      	orrs	r3, r2
 810a62e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 810a630:	687b      	ldr	r3, [r7, #4]
 810a632:	681b      	ldr	r3, [r3, #0]
 810a634:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 810a638:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 810a63c:	687b      	ldr	r3, [r7, #4]
 810a63e:	681b      	ldr	r3, [r3, #0]
 810a640:	68fa      	ldr	r2, [r7, #12]
 810a642:	430a      	orrs	r2, r1
 810a644:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 810a648:	bf00      	nop
 810a64a:	3714      	adds	r7, #20
 810a64c:	46bd      	mov	sp, r7
 810a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a652:	4770      	bx	lr
 810a654:	00048083 	.word	0x00048083
 810a658:	c0f88000 	.word	0xc0f88000

0810a65c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 810a65c:	b480      	push	{r7}
 810a65e:	b085      	sub	sp, #20
 810a660:	af00      	add	r7, sp, #0
 810a662:	6078      	str	r0, [r7, #4]
 810a664:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 810a666:	687b      	ldr	r3, [r7, #4]
 810a668:	681b      	ldr	r3, [r3, #0]
 810a66a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810a66e:	681b      	ldr	r3, [r3, #0]
 810a670:	f423 43f0 	bic.w	r3, r3, #30720	@ 0x7800
 810a674:	f023 0302 	bic.w	r3, r3, #2
 810a678:	683a      	ldr	r2, [r7, #0]
 810a67a:	6811      	ldr	r1, [r2, #0]
 810a67c:	687a      	ldr	r2, [r7, #4]
 810a67e:	6812      	ldr	r2, [r2, #0]
 810a680:	430b      	orrs	r3, r1
 810a682:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810a686:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 810a688:	683b      	ldr	r3, [r7, #0]
 810a68a:	791b      	ldrb	r3, [r3, #4]
 810a68c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 810a68e:	683b      	ldr	r3, [r7, #0]
 810a690:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 810a692:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 810a694:	683b      	ldr	r3, [r7, #0]
 810a696:	7b1b      	ldrb	r3, [r3, #12]
 810a698:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 810a69a:	4313      	orrs	r3, r2
 810a69c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 810a69e:	687b      	ldr	r3, [r7, #4]
 810a6a0:	681b      	ldr	r3, [r3, #0]
 810a6a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810a6a6:	685b      	ldr	r3, [r3, #4]
 810a6a8:	f423 4350 	bic.w	r3, r3, #53248	@ 0xd000
 810a6ac:	f023 0301 	bic.w	r3, r3, #1
 810a6b0:	687a      	ldr	r2, [r7, #4]
 810a6b2:	6812      	ldr	r2, [r2, #0]
 810a6b4:	68f9      	ldr	r1, [r7, #12]
 810a6b6:	430b      	orrs	r3, r1
 810a6b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810a6bc:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 810a6be:	683b      	ldr	r3, [r7, #0]
 810a6c0:	7b5b      	ldrb	r3, [r3, #13]
 810a6c2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 810a6c4:	683b      	ldr	r3, [r7, #0]
 810a6c6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 810a6c8:	4313      	orrs	r3, r2
 810a6ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 810a6cc:	687b      	ldr	r3, [r7, #4]
 810a6ce:	681b      	ldr	r3, [r3, #0]
 810a6d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810a6d4:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 810a6d8:	4b21      	ldr	r3, [pc, #132]	@ (810a760 <ETH_SetDMAConfig+0x104>)
 810a6da:	4013      	ands	r3, r2
 810a6dc:	687a      	ldr	r2, [r7, #4]
 810a6de:	6812      	ldr	r2, [r2, #0]
 810a6e0:	68f9      	ldr	r1, [r7, #12]
 810a6e2:	430b      	orrs	r3, r1
 810a6e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810a6e8:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 810a6ec:	683b      	ldr	r3, [r7, #0]
 810a6ee:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 810a6f0:	683b      	ldr	r3, [r7, #0]
 810a6f2:	7d1b      	ldrb	r3, [r3, #20]
 810a6f4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 810a6f6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 810a6f8:	683b      	ldr	r3, [r7, #0]
 810a6fa:	7f5b      	ldrb	r3, [r3, #29]
 810a6fc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 810a6fe:	4313      	orrs	r3, r2
 810a700:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 810a702:	687b      	ldr	r3, [r7, #4]
 810a704:	681b      	ldr	r3, [r3, #0]
 810a706:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810a70a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 810a70e:	4b15      	ldr	r3, [pc, #84]	@ (810a764 <ETH_SetDMAConfig+0x108>)
 810a710:	4013      	ands	r3, r2
 810a712:	687a      	ldr	r2, [r7, #4]
 810a714:	6812      	ldr	r2, [r2, #0]
 810a716:	68f9      	ldr	r1, [r7, #12]
 810a718:	430b      	orrs	r3, r1
 810a71a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810a71e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 810a722:	683b      	ldr	r3, [r7, #0]
 810a724:	7f1b      	ldrb	r3, [r3, #28]
 810a726:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 810a728:	683b      	ldr	r3, [r7, #0]
 810a72a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 810a72c:	4313      	orrs	r3, r2
 810a72e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 810a730:	687b      	ldr	r3, [r7, #4]
 810a732:	681b      	ldr	r3, [r3, #0]
 810a734:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810a738:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 810a73c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 810a740:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 810a744:	687a      	ldr	r2, [r7, #4]
 810a746:	6812      	ldr	r2, [r2, #0]
 810a748:	68f9      	ldr	r1, [r7, #12]
 810a74a:	430b      	orrs	r3, r1
 810a74c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810a750:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 810a754:	bf00      	nop
 810a756:	3714      	adds	r7, #20
 810a758:	46bd      	mov	sp, r7
 810a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a75e:	4770      	bx	lr
 810a760:	fffec000 	.word	0xfffec000
 810a764:	ffc0efef 	.word	0xffc0efef

0810a768 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 810a768:	b580      	push	{r7, lr}
 810a76a:	b0a4      	sub	sp, #144	@ 0x90
 810a76c:	af00      	add	r7, sp, #0
 810a76e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 810a770:	2301      	movs	r3, #1
 810a772:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 810a776:	2300      	movs	r3, #0
 810a778:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 810a77a:	2300      	movs	r3, #0
 810a77c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 810a780:	2300      	movs	r3, #0
 810a782:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 810a786:	2301      	movs	r3, #1
 810a788:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 810a78c:	2301      	movs	r3, #1
 810a78e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 810a792:	2301      	movs	r3, #1
 810a794:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 810a798:	2300      	movs	r3, #0
 810a79a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 810a79e:	2301      	movs	r3, #1
 810a7a0:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 810a7a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810a7a8:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 810a7aa:	2300      	movs	r3, #0
 810a7ac:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 810a7b0:	2300      	movs	r3, #0
 810a7b2:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 810a7b4:	2300      	movs	r3, #0
 810a7b6:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 810a7ba:	2300      	movs	r3, #0
 810a7bc:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 810a7c0:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 810a7c4:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 810a7c6:	2300      	movs	r3, #0
 810a7c8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 810a7cc:	2300      	movs	r3, #0
 810a7ce:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 810a7d0:	2301      	movs	r3, #1
 810a7d2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 810a7d6:	2300      	movs	r3, #0
 810a7d8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 810a7dc:	2300      	movs	r3, #0
 810a7de:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 810a7e2:	2300      	movs	r3, #0
 810a7e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 810a7e6:	2300      	movs	r3, #0
 810a7e8:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 810a7ea:	2300      	movs	r3, #0
 810a7ec:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 810a7ee:	2300      	movs	r3, #0
 810a7f0:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 810a7f4:	2300      	movs	r3, #0
 810a7f6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 810a7fa:	2301      	movs	r3, #1
 810a7fc:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 810a800:	2320      	movs	r3, #32
 810a802:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 810a806:	2301      	movs	r3, #1
 810a808:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 810a80c:	2300      	movs	r3, #0
 810a80e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 810a812:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 810a816:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 810a818:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 810a81c:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 810a81e:	2300      	movs	r3, #0
 810a820:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 810a824:	2302      	movs	r3, #2
 810a826:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 810a82a:	2300      	movs	r3, #0
 810a82c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 810a830:	2300      	movs	r3, #0
 810a832:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 810a836:	2300      	movs	r3, #0
 810a838:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 810a83c:	2301      	movs	r3, #1
 810a83e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 810a842:	2300      	movs	r3, #0
 810a844:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 810a846:	2301      	movs	r3, #1
 810a848:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 810a84c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 810a850:	4619      	mov	r1, r3
 810a852:	6878      	ldr	r0, [r7, #4]
 810a854:	f7ff fde6 	bl	810a424 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 810a858:	2301      	movs	r3, #1
 810a85a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 810a85c:	2301      	movs	r3, #1
 810a85e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 810a860:	2300      	movs	r3, #0
 810a862:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 810a864:	2300      	movs	r3, #0
 810a866:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 810a86a:	2300      	movs	r3, #0
 810a86c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 810a86e:	2300      	movs	r3, #0
 810a870:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 810a872:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 810a876:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 810a878:	2300      	movs	r3, #0
 810a87a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 810a87c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 810a880:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 810a882:	2300      	movs	r3, #0
 810a884:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 810a888:	f44f 7306 	mov.w	r3, #536	@ 0x218
 810a88c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 810a88e:	f107 0308 	add.w	r3, r7, #8
 810a892:	4619      	mov	r1, r3
 810a894:	6878      	ldr	r0, [r7, #4]
 810a896:	f7ff fee1 	bl	810a65c <ETH_SetDMAConfig>
}
 810a89a:	bf00      	nop
 810a89c:	3790      	adds	r7, #144	@ 0x90
 810a89e:	46bd      	mov	sp, r7
 810a8a0:	bd80      	pop	{r7, pc}

0810a8a2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 810a8a2:	b480      	push	{r7}
 810a8a4:	b085      	sub	sp, #20
 810a8a6:	af00      	add	r7, sp, #0
 810a8a8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 810a8aa:	2300      	movs	r3, #0
 810a8ac:	60fb      	str	r3, [r7, #12]
 810a8ae:	e01d      	b.n	810a8ec <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 810a8b0:	687b      	ldr	r3, [r7, #4]
 810a8b2:	68d9      	ldr	r1, [r3, #12]
 810a8b4:	68fa      	ldr	r2, [r7, #12]
 810a8b6:	4613      	mov	r3, r2
 810a8b8:	005b      	lsls	r3, r3, #1
 810a8ba:	4413      	add	r3, r2
 810a8bc:	00db      	lsls	r3, r3, #3
 810a8be:	440b      	add	r3, r1
 810a8c0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 810a8c2:	68bb      	ldr	r3, [r7, #8]
 810a8c4:	2200      	movs	r2, #0
 810a8c6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 810a8c8:	68bb      	ldr	r3, [r7, #8]
 810a8ca:	2200      	movs	r2, #0
 810a8cc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 810a8ce:	68bb      	ldr	r3, [r7, #8]
 810a8d0:	2200      	movs	r2, #0
 810a8d2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 810a8d4:	68bb      	ldr	r3, [r7, #8]
 810a8d6:	2200      	movs	r2, #0
 810a8d8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 810a8da:	68b9      	ldr	r1, [r7, #8]
 810a8dc:	687b      	ldr	r3, [r7, #4]
 810a8de:	68fa      	ldr	r2, [r7, #12]
 810a8e0:	3206      	adds	r2, #6
 810a8e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 810a8e6:	68fb      	ldr	r3, [r7, #12]
 810a8e8:	3301      	adds	r3, #1
 810a8ea:	60fb      	str	r3, [r7, #12]
 810a8ec:	68fb      	ldr	r3, [r7, #12]
 810a8ee:	2b03      	cmp	r3, #3
 810a8f0:	d9de      	bls.n	810a8b0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 810a8f2:	687b      	ldr	r3, [r7, #4]
 810a8f4:	2200      	movs	r2, #0
 810a8f6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 810a8f8:	687b      	ldr	r3, [r7, #4]
 810a8fa:	681b      	ldr	r3, [r3, #0]
 810a8fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810a900:	461a      	mov	r2, r3
 810a902:	2303      	movs	r3, #3
 810a904:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 810a908:	687b      	ldr	r3, [r7, #4]
 810a90a:	68da      	ldr	r2, [r3, #12]
 810a90c:	687b      	ldr	r3, [r7, #4]
 810a90e:	681b      	ldr	r3, [r3, #0]
 810a910:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810a914:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 810a918:	687b      	ldr	r3, [r7, #4]
 810a91a:	68da      	ldr	r2, [r3, #12]
 810a91c:	687b      	ldr	r3, [r7, #4]
 810a91e:	681b      	ldr	r3, [r3, #0]
 810a920:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810a924:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 810a928:	bf00      	nop
 810a92a:	3714      	adds	r7, #20
 810a92c:	46bd      	mov	sp, r7
 810a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a932:	4770      	bx	lr

0810a934 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 810a934:	b480      	push	{r7}
 810a936:	b085      	sub	sp, #20
 810a938:	af00      	add	r7, sp, #0
 810a93a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 810a93c:	2300      	movs	r3, #0
 810a93e:	60fb      	str	r3, [r7, #12]
 810a940:	e023      	b.n	810a98a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 810a942:	687b      	ldr	r3, [r7, #4]
 810a944:	6919      	ldr	r1, [r3, #16]
 810a946:	68fa      	ldr	r2, [r7, #12]
 810a948:	4613      	mov	r3, r2
 810a94a:	005b      	lsls	r3, r3, #1
 810a94c:	4413      	add	r3, r2
 810a94e:	00db      	lsls	r3, r3, #3
 810a950:	440b      	add	r3, r1
 810a952:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 810a954:	68bb      	ldr	r3, [r7, #8]
 810a956:	2200      	movs	r2, #0
 810a958:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 810a95a:	68bb      	ldr	r3, [r7, #8]
 810a95c:	2200      	movs	r2, #0
 810a95e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 810a960:	68bb      	ldr	r3, [r7, #8]
 810a962:	2200      	movs	r2, #0
 810a964:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 810a966:	68bb      	ldr	r3, [r7, #8]
 810a968:	2200      	movs	r2, #0
 810a96a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 810a96c:	68bb      	ldr	r3, [r7, #8]
 810a96e:	2200      	movs	r2, #0
 810a970:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 810a972:	68bb      	ldr	r3, [r7, #8]
 810a974:	2200      	movs	r2, #0
 810a976:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 810a978:	68b9      	ldr	r1, [r7, #8]
 810a97a:	687b      	ldr	r3, [r7, #4]
 810a97c:	68fa      	ldr	r2, [r7, #12]
 810a97e:	3212      	adds	r2, #18
 810a980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 810a984:	68fb      	ldr	r3, [r7, #12]
 810a986:	3301      	adds	r3, #1
 810a988:	60fb      	str	r3, [r7, #12]
 810a98a:	68fb      	ldr	r3, [r7, #12]
 810a98c:	2b03      	cmp	r3, #3
 810a98e:	d9d8      	bls.n	810a942 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 810a990:	687b      	ldr	r3, [r7, #4]
 810a992:	2200      	movs	r2, #0
 810a994:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 810a996:	687b      	ldr	r3, [r7, #4]
 810a998:	2200      	movs	r2, #0
 810a99a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 810a99c:	687b      	ldr	r3, [r7, #4]
 810a99e:	2200      	movs	r2, #0
 810a9a0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 810a9a2:	687b      	ldr	r3, [r7, #4]
 810a9a4:	2200      	movs	r2, #0
 810a9a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 810a9a8:	687b      	ldr	r3, [r7, #4]
 810a9aa:	2200      	movs	r2, #0
 810a9ac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 810a9ae:	687b      	ldr	r3, [r7, #4]
 810a9b0:	681b      	ldr	r3, [r3, #0]
 810a9b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810a9b6:	461a      	mov	r2, r3
 810a9b8:	2303      	movs	r3, #3
 810a9ba:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 810a9be:	687b      	ldr	r3, [r7, #4]
 810a9c0:	691a      	ldr	r2, [r3, #16]
 810a9c2:	687b      	ldr	r3, [r7, #4]
 810a9c4:	681b      	ldr	r3, [r3, #0]
 810a9c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810a9ca:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 810a9ce:	687b      	ldr	r3, [r7, #4]
 810a9d0:	691b      	ldr	r3, [r3, #16]
 810a9d2:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 810a9d6:	687b      	ldr	r3, [r7, #4]
 810a9d8:	681b      	ldr	r3, [r3, #0]
 810a9da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810a9de:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 810a9e2:	bf00      	nop
 810a9e4:	3714      	adds	r7, #20
 810a9e6:	46bd      	mov	sp, r7
 810a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a9ec:	4770      	bx	lr

0810a9ee <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 810a9ee:	b480      	push	{r7}
 810a9f0:	b091      	sub	sp, #68	@ 0x44
 810a9f2:	af00      	add	r7, sp, #0
 810a9f4:	60f8      	str	r0, [r7, #12]
 810a9f6:	60b9      	str	r1, [r7, #8]
 810a9f8:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 810a9fa:	68fb      	ldr	r3, [r7, #12]
 810a9fc:	3318      	adds	r3, #24
 810a9fe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 810aa00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810aa02:	691b      	ldr	r3, [r3, #16]
 810aa04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 810aa06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810aa08:	691b      	ldr	r3, [r3, #16]
 810aa0a:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 810aa0c:	2300      	movs	r3, #0
 810aa0e:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 810aa10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810aa12:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810aa14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810aa18:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 810aa1a:	68bb      	ldr	r3, [r7, #8]
 810aa1c:	689b      	ldr	r3, [r3, #8]
 810aa1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 810aa20:	2300      	movs	r3, #0
 810aa22:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 810aa24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810aa26:	68db      	ldr	r3, [r3, #12]
 810aa28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810aa2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810aa30:	d007      	beq.n	810aa42 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 810aa32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810aa34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810aa36:	3304      	adds	r3, #4
 810aa38:	009b      	lsls	r3, r3, #2
 810aa3a:	4413      	add	r3, r2
 810aa3c:	685b      	ldr	r3, [r3, #4]
 810aa3e:	2b00      	cmp	r3, #0
 810aa40:	d001      	beq.n	810aa46 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 810aa42:	2302      	movs	r3, #2
 810aa44:	e267      	b.n	810af16 <ETH_Prepare_Tx_Descriptors+0x528>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 810aa46:	68bb      	ldr	r3, [r7, #8]
 810aa48:	681b      	ldr	r3, [r3, #0]
 810aa4a:	f003 0304 	and.w	r3, r3, #4
 810aa4e:	2b00      	cmp	r3, #0
 810aa50:	d044      	beq.n	810aadc <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 810aa52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810aa54:	68db      	ldr	r3, [r3, #12]
 810aa56:	0c1b      	lsrs	r3, r3, #16
 810aa58:	041b      	lsls	r3, r3, #16
 810aa5a:	68ba      	ldr	r2, [r7, #8]
 810aa5c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 810aa5e:	431a      	orrs	r2, r3
 810aa60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810aa62:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 810aa64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810aa66:	68db      	ldr	r3, [r3, #12]
 810aa68:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 810aa6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810aa6e:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 810aa70:	68fb      	ldr	r3, [r7, #12]
 810aa72:	681b      	ldr	r3, [r3, #0]
 810aa74:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 810aa76:	68fb      	ldr	r3, [r7, #12]
 810aa78:	681b      	ldr	r3, [r3, #0]
 810aa7a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 810aa7e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 810aa80:	68bb      	ldr	r3, [r7, #8]
 810aa82:	681b      	ldr	r3, [r3, #0]
 810aa84:	f003 0308 	and.w	r3, r3, #8
 810aa88:	2b00      	cmp	r3, #0
 810aa8a:	d027      	beq.n	810aadc <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 810aa8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810aa8e:	689b      	ldr	r3, [r3, #8]
 810aa90:	b29a      	uxth	r2, r3
 810aa92:	68bb      	ldr	r3, [r7, #8]
 810aa94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810aa96:	041b      	lsls	r3, r3, #16
 810aa98:	431a      	orrs	r2, r3
 810aa9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810aa9c:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 810aa9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810aaa0:	68db      	ldr	r3, [r3, #12]
 810aaa2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 810aaa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810aaa8:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 810aaaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810aaac:	68db      	ldr	r3, [r3, #12]
 810aaae:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 810aab2:	68bb      	ldr	r3, [r7, #8]
 810aab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810aab6:	431a      	orrs	r2, r3
 810aab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810aaba:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 810aabc:	68fb      	ldr	r3, [r7, #12]
 810aabe:	681b      	ldr	r3, [r3, #0]
 810aac0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 810aac2:	68fb      	ldr	r3, [r7, #12]
 810aac4:	681b      	ldr	r3, [r3, #0]
 810aac6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 810aaca:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 810aacc:	68fb      	ldr	r3, [r7, #12]
 810aace:	681b      	ldr	r3, [r3, #0]
 810aad0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 810aad2:	68fb      	ldr	r3, [r7, #12]
 810aad4:	681b      	ldr	r3, [r3, #0]
 810aad6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 810aada:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 810aadc:	68bb      	ldr	r3, [r7, #8]
 810aade:	681b      	ldr	r3, [r3, #0]
 810aae0:	f003 0310 	and.w	r3, r3, #16
 810aae4:	2b00      	cmp	r3, #0
 810aae6:	d010      	beq.n	810ab0a <ETH_Prepare_Tx_Descriptors+0x11c>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 810aae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810aaea:	689b      	ldr	r3, [r3, #8]
 810aaec:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 810aaf0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 810aaf4:	68ba      	ldr	r2, [r7, #8]
 810aaf6:	6992      	ldr	r2, [r2, #24]
 810aaf8:	431a      	orrs	r2, r3
 810aafa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810aafc:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 810aafe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ab00:	68db      	ldr	r3, [r3, #12]
 810ab02:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 810ab06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ab08:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 810ab0a:	68bb      	ldr	r3, [r7, #8]
 810ab0c:	681b      	ldr	r3, [r3, #0]
 810ab0e:	f003 0304 	and.w	r3, r3, #4
 810ab12:	2b00      	cmp	r3, #0
 810ab14:	d105      	bne.n	810ab22 <ETH_Prepare_Tx_Descriptors+0x134>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 810ab16:	68bb      	ldr	r3, [r7, #8]
 810ab18:	681b      	ldr	r3, [r3, #0]
 810ab1a:	f003 0310 	and.w	r3, r3, #16
 810ab1e:	2b00      	cmp	r3, #0
 810ab20:	d036      	beq.n	810ab90 <ETH_Prepare_Tx_Descriptors+0x1a2>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 810ab22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ab24:	68db      	ldr	r3, [r3, #12]
 810ab26:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 810ab2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ab2c:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 810ab2e:	f3bf 8f5f 	dmb	sy
}
 810ab32:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 810ab34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ab36:	68db      	ldr	r3, [r3, #12]
 810ab38:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 810ab3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ab3e:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 810ab40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810ab42:	3301      	adds	r3, #1
 810ab44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810ab46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810ab48:	2b03      	cmp	r3, #3
 810ab4a:	d902      	bls.n	810ab52 <ETH_Prepare_Tx_Descriptors+0x164>
 810ab4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810ab4e:	3b04      	subs	r3, #4
 810ab50:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 810ab52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ab54:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810ab56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810ab5a:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 810ab5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ab5e:	3301      	adds	r3, #1
 810ab60:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 810ab62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ab64:	68db      	ldr	r3, [r3, #12]
 810ab66:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810ab6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810ab6e:	d10f      	bne.n	810ab90 <ETH_Prepare_Tx_Descriptors+0x1a2>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 810ab70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ab72:	6a3a      	ldr	r2, [r7, #32]
 810ab74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810ab78:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 810ab7a:	f3bf 8f5f 	dmb	sy
}
 810ab7e:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 810ab80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ab82:	68db      	ldr	r3, [r3, #12]
 810ab84:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 810ab88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ab8a:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 810ab8c:	2302      	movs	r3, #2
 810ab8e:	e1c2      	b.n	810af16 <ETH_Prepare_Tx_Descriptors+0x528>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 810ab90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ab92:	3301      	adds	r3, #1
 810ab94:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 810ab96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ab98:	681b      	ldr	r3, [r3, #0]
 810ab9a:	461a      	mov	r2, r3
 810ab9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ab9e:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 810aba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810aba2:	689b      	ldr	r3, [r3, #8]
 810aba4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 810aba8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 810abac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810abae:	6852      	ldr	r2, [r2, #4]
 810abb0:	431a      	orrs	r2, r3
 810abb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810abb4:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 810abb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810abb8:	689b      	ldr	r3, [r3, #8]
 810abba:	2b00      	cmp	r3, #0
 810abbc:	d014      	beq.n	810abe8 <ETH_Prepare_Tx_Descriptors+0x1fa>
  {
    txbuffer = txbuffer->next;
 810abbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810abc0:	689b      	ldr	r3, [r3, #8]
 810abc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 810abc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810abc6:	681b      	ldr	r3, [r3, #0]
 810abc8:	461a      	mov	r2, r3
 810abca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810abcc:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 810abce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810abd0:	689b      	ldr	r3, [r3, #8]
 810abd2:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 810abd6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 810abda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810abdc:	6852      	ldr	r2, [r2, #4]
 810abde:	0412      	lsls	r2, r2, #16
 810abe0:	431a      	orrs	r2, r3
 810abe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810abe4:	609a      	str	r2, [r3, #8]
 810abe6:	e00a      	b.n	810abfe <ETH_Prepare_Tx_Descriptors+0x210>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 810abe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810abea:	2200      	movs	r2, #0
 810abec:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 810abee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810abf0:	689b      	ldr	r3, [r3, #8]
 810abf2:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 810abf6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 810abfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810abfc:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 810abfe:	68bb      	ldr	r3, [r7, #8]
 810ac00:	681b      	ldr	r3, [r3, #0]
 810ac02:	f003 0310 	and.w	r3, r3, #16
 810ac06:	2b00      	cmp	r3, #0
 810ac08:	d019      	beq.n	810ac3e <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 810ac0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ac0c:	68db      	ldr	r3, [r3, #12]
 810ac0e:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 810ac12:	68bb      	ldr	r3, [r7, #8]
 810ac14:	6a1b      	ldr	r3, [r3, #32]
 810ac16:	04db      	lsls	r3, r3, #19
 810ac18:	431a      	orrs	r2, r3
 810ac1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ac1c:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 810ac1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ac20:	68db      	ldr	r3, [r3, #12]
 810ac22:	0c9b      	lsrs	r3, r3, #18
 810ac24:	049b      	lsls	r3, r3, #18
 810ac26:	68ba      	ldr	r2, [r7, #8]
 810ac28:	69d2      	ldr	r2, [r2, #28]
 810ac2a:	431a      	orrs	r2, r3
 810ac2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ac2e:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 810ac30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ac32:	68db      	ldr	r3, [r3, #12]
 810ac34:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 810ac38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ac3a:	60da      	str	r2, [r3, #12]
 810ac3c:	e028      	b.n	810ac90 <ETH_Prepare_Tx_Descriptors+0x2a2>
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 810ac3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ac40:	68db      	ldr	r3, [r3, #12]
 810ac42:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 810ac46:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 810ac4a:	68ba      	ldr	r2, [r7, #8]
 810ac4c:	6852      	ldr	r2, [r2, #4]
 810ac4e:	431a      	orrs	r2, r3
 810ac50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ac52:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 810ac54:	68bb      	ldr	r3, [r7, #8]
 810ac56:	681b      	ldr	r3, [r3, #0]
 810ac58:	f003 0301 	and.w	r3, r3, #1
 810ac5c:	2b00      	cmp	r3, #0
 810ac5e:	d008      	beq.n	810ac72 <ETH_Prepare_Tx_Descriptors+0x284>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 810ac60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ac62:	68db      	ldr	r3, [r3, #12]
 810ac64:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 810ac68:	68bb      	ldr	r3, [r7, #8]
 810ac6a:	695b      	ldr	r3, [r3, #20]
 810ac6c:	431a      	orrs	r2, r3
 810ac6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ac70:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 810ac72:	68bb      	ldr	r3, [r7, #8]
 810ac74:	681b      	ldr	r3, [r3, #0]
 810ac76:	f003 0320 	and.w	r3, r3, #32
 810ac7a:	2b00      	cmp	r3, #0
 810ac7c:	d008      	beq.n	810ac90 <ETH_Prepare_Tx_Descriptors+0x2a2>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 810ac7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ac80:	68db      	ldr	r3, [r3, #12]
 810ac82:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 810ac86:	68bb      	ldr	r3, [r7, #8]
 810ac88:	691b      	ldr	r3, [r3, #16]
 810ac8a:	431a      	orrs	r2, r3
 810ac8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ac8e:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 810ac90:	68bb      	ldr	r3, [r7, #8]
 810ac92:	681b      	ldr	r3, [r3, #0]
 810ac94:	f003 0304 	and.w	r3, r3, #4
 810ac98:	2b00      	cmp	r3, #0
 810ac9a:	d008      	beq.n	810acae <ETH_Prepare_Tx_Descriptors+0x2c0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 810ac9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ac9e:	689b      	ldr	r3, [r3, #8]
 810aca0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 810aca4:	68bb      	ldr	r3, [r7, #8]
 810aca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810aca8:	431a      	orrs	r2, r3
 810acaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810acac:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 810acae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810acb0:	68db      	ldr	r3, [r3, #12]
 810acb2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 810acb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810acb8:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 810acba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810acbc:	68db      	ldr	r3, [r3, #12]
 810acbe:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 810acc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810acc4:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 810acc6:	f3bf 8f5f 	dmb	sy
}
 810acca:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 810accc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810acce:	68db      	ldr	r3, [r3, #12]
 810acd0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 810acd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810acd6:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 810acd8:	68bb      	ldr	r3, [r7, #8]
 810acda:	681b      	ldr	r3, [r3, #0]
 810acdc:	f003 0302 	and.w	r3, r3, #2
 810ace0:	2b00      	cmp	r3, #0
 810ace2:	f000 80d9 	beq.w	810ae98 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 810ace6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ace8:	68db      	ldr	r3, [r3, #12]
 810acea:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 810acee:	68bb      	ldr	r3, [r7, #8]
 810acf0:	68db      	ldr	r3, [r3, #12]
 810acf2:	431a      	orrs	r2, r3
 810acf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810acf6:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 810acf8:	e0ce      	b.n	810ae98 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 810acfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810acfc:	68db      	ldr	r3, [r3, #12]
 810acfe:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 810ad02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ad04:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 810ad06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810ad08:	3301      	adds	r3, #1
 810ad0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810ad0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810ad0e:	2b03      	cmp	r3, #3
 810ad10:	d902      	bls.n	810ad18 <ETH_Prepare_Tx_Descriptors+0x32a>
 810ad12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810ad14:	3b04      	subs	r3, #4
 810ad16:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 810ad18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ad1a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810ad1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810ad20:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 810ad22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ad24:	68db      	ldr	r3, [r3, #12]
 810ad26:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 810ad2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ad2c:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 810ad2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ad30:	68db      	ldr	r3, [r3, #12]
 810ad32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810ad36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810ad3a:	d007      	beq.n	810ad4c <ETH_Prepare_Tx_Descriptors+0x35e>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 810ad3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810ad3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810ad40:	3304      	adds	r3, #4
 810ad42:	009b      	lsls	r3, r3, #2
 810ad44:	4413      	add	r3, r2
 810ad46:	685b      	ldr	r3, [r3, #4]
 810ad48:	2b00      	cmp	r3, #0
 810ad4a:	d029      	beq.n	810ada0 <ETH_Prepare_Tx_Descriptors+0x3b2>
    {
      descidx = firstdescidx;
 810ad4c:	6a3b      	ldr	r3, [r7, #32]
 810ad4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 810ad50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ad52:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810ad54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810ad58:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 810ad5a:	2300      	movs	r3, #0
 810ad5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 810ad5e:	e019      	b.n	810ad94 <ETH_Prepare_Tx_Descriptors+0x3a6>
  __ASM volatile ("dmb 0xF":::"memory");
 810ad60:	f3bf 8f5f 	dmb	sy
}
 810ad64:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 810ad66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ad68:	68db      	ldr	r3, [r3, #12]
 810ad6a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 810ad6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ad70:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 810ad72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810ad74:	3301      	adds	r3, #1
 810ad76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810ad78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810ad7a:	2b03      	cmp	r3, #3
 810ad7c:	d902      	bls.n	810ad84 <ETH_Prepare_Tx_Descriptors+0x396>
 810ad7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810ad80:	3b04      	subs	r3, #4
 810ad82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 810ad84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ad86:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810ad88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810ad8c:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 810ad8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ad90:	3301      	adds	r3, #1
 810ad92:	63bb      	str	r3, [r7, #56]	@ 0x38
 810ad94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810ad96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ad98:	429a      	cmp	r2, r3
 810ad9a:	d3e1      	bcc.n	810ad60 <ETH_Prepare_Tx_Descriptors+0x372>
      }

      return HAL_ETH_ERROR_BUSY;
 810ad9c:	2302      	movs	r3, #2
 810ad9e:	e0ba      	b.n	810af16 <ETH_Prepare_Tx_Descriptors+0x528>
    }

    descnbr += 1U;
 810ada0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ada2:	3301      	adds	r3, #1
 810ada4:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 810ada6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ada8:	689b      	ldr	r3, [r3, #8]
 810adaa:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 810adac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810adae:	681b      	ldr	r3, [r3, #0]
 810adb0:	461a      	mov	r2, r3
 810adb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810adb4:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 810adb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810adb8:	689b      	ldr	r3, [r3, #8]
 810adba:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 810adbe:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 810adc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810adc4:	6852      	ldr	r2, [r2, #4]
 810adc6:	431a      	orrs	r2, r3
 810adc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810adca:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 810adcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810adce:	689b      	ldr	r3, [r3, #8]
 810add0:	2b00      	cmp	r3, #0
 810add2:	d014      	beq.n	810adfe <ETH_Prepare_Tx_Descriptors+0x410>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 810add4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810add6:	689b      	ldr	r3, [r3, #8]
 810add8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 810adda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810addc:	681b      	ldr	r3, [r3, #0]
 810adde:	461a      	mov	r2, r3
 810ade0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ade2:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 810ade4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ade6:	689b      	ldr	r3, [r3, #8]
 810ade8:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 810adec:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 810adf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810adf2:	6852      	ldr	r2, [r2, #4]
 810adf4:	0412      	lsls	r2, r2, #16
 810adf6:	431a      	orrs	r2, r3
 810adf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810adfa:	609a      	str	r2, [r3, #8]
 810adfc:	e00a      	b.n	810ae14 <ETH_Prepare_Tx_Descriptors+0x426>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 810adfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ae00:	2200      	movs	r2, #0
 810ae02:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 810ae04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ae06:	689b      	ldr	r3, [r3, #8]
 810ae08:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 810ae0c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 810ae10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810ae12:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 810ae14:	68bb      	ldr	r3, [r7, #8]
 810ae16:	681b      	ldr	r3, [r3, #0]
 810ae18:	f003 0310 	and.w	r3, r3, #16
 810ae1c:	2b00      	cmp	r3, #0
 810ae1e:	d00f      	beq.n	810ae40 <ETH_Prepare_Tx_Descriptors+0x452>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 810ae20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ae22:	68db      	ldr	r3, [r3, #12]
 810ae24:	0c9b      	lsrs	r3, r3, #18
 810ae26:	049b      	lsls	r3, r3, #18
 810ae28:	68ba      	ldr	r2, [r7, #8]
 810ae2a:	69d2      	ldr	r2, [r2, #28]
 810ae2c:	431a      	orrs	r2, r3
 810ae2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ae30:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 810ae32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ae34:	68db      	ldr	r3, [r3, #12]
 810ae36:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 810ae3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ae3c:	60da      	str	r2, [r3, #12]
 810ae3e:	e019      	b.n	810ae74 <ETH_Prepare_Tx_Descriptors+0x486>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 810ae40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ae42:	68db      	ldr	r3, [r3, #12]
 810ae44:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 810ae48:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 810ae4c:	68ba      	ldr	r2, [r7, #8]
 810ae4e:	6852      	ldr	r2, [r2, #4]
 810ae50:	431a      	orrs	r2, r3
 810ae52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ae54:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 810ae56:	68bb      	ldr	r3, [r7, #8]
 810ae58:	681b      	ldr	r3, [r3, #0]
 810ae5a:	f003 0301 	and.w	r3, r3, #1
 810ae5e:	2b00      	cmp	r3, #0
 810ae60:	d008      	beq.n	810ae74 <ETH_Prepare_Tx_Descriptors+0x486>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 810ae62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ae64:	68db      	ldr	r3, [r3, #12]
 810ae66:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 810ae6a:	68bb      	ldr	r3, [r7, #8]
 810ae6c:	695b      	ldr	r3, [r3, #20]
 810ae6e:	431a      	orrs	r2, r3
 810ae70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ae72:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 810ae74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ae76:	3301      	adds	r3, #1
 810ae78:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 810ae7a:	f3bf 8f5f 	dmb	sy
}
 810ae7e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 810ae80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ae82:	68db      	ldr	r3, [r3, #12]
 810ae84:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 810ae88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ae8a:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 810ae8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ae8e:	68db      	ldr	r3, [r3, #12]
 810ae90:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 810ae94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ae96:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 810ae98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ae9a:	689b      	ldr	r3, [r3, #8]
 810ae9c:	2b00      	cmp	r3, #0
 810ae9e:	f47f af2c 	bne.w	810acfa <ETH_Prepare_Tx_Descriptors+0x30c>
  }

  if (ItMode != ((uint32_t)RESET))
 810aea2:	687b      	ldr	r3, [r7, #4]
 810aea4:	2b00      	cmp	r3, #0
 810aea6:	d006      	beq.n	810aeb6 <ETH_Prepare_Tx_Descriptors+0x4c8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 810aea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810aeaa:	689b      	ldr	r3, [r3, #8]
 810aeac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 810aeb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810aeb2:	609a      	str	r2, [r3, #8]
 810aeb4:	e005      	b.n	810aec2 <ETH_Prepare_Tx_Descriptors+0x4d4>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 810aeb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810aeb8:	689b      	ldr	r3, [r3, #8]
 810aeba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 810aebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810aec0:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 810aec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810aec4:	68db      	ldr	r3, [r3, #12]
 810aec6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 810aeca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810aecc:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 810aece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810aed0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810aed2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810aed4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810aed6:	3304      	adds	r3, #4
 810aed8:	009b      	lsls	r3, r3, #2
 810aeda:	440b      	add	r3, r1
 810aedc:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 810aede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810aee0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 810aee2:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 810aee4:	f3ef 8310 	mrs	r3, PRIMASK
 810aee8:	613b      	str	r3, [r7, #16]
  return(result);
 810aeea:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 810aeec:	61fb      	str	r3, [r7, #28]
 810aeee:	2301      	movs	r3, #1
 810aef0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 810aef2:	697b      	ldr	r3, [r7, #20]
 810aef4:	f383 8810 	msr	PRIMASK, r3
}
 810aef8:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 810aefa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810aefc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 810aefe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810af00:	4413      	add	r3, r2
 810af02:	1c5a      	adds	r2, r3, #1
 810af04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810af06:	629a      	str	r2, [r3, #40]	@ 0x28
 810af08:	69fb      	ldr	r3, [r7, #28]
 810af0a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 810af0c:	69bb      	ldr	r3, [r7, #24]
 810af0e:	f383 8810 	msr	PRIMASK, r3
}
 810af12:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 810af14:	2300      	movs	r3, #0
}
 810af16:	4618      	mov	r0, r3
 810af18:	3744      	adds	r7, #68	@ 0x44
 810af1a:	46bd      	mov	sp, r7
 810af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810af20:	4770      	bx	lr
	...

0810af24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 810af24:	b480      	push	{r7}
 810af26:	b089      	sub	sp, #36	@ 0x24
 810af28:	af00      	add	r7, sp, #0
 810af2a:	6078      	str	r0, [r7, #4]
 810af2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810af2e:	2300      	movs	r3, #0
 810af30:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810af32:	4b89      	ldr	r3, [pc, #548]	@ (810b158 <HAL_GPIO_Init+0x234>)
 810af34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810af36:	e194      	b.n	810b262 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 810af38:	683b      	ldr	r3, [r7, #0]
 810af3a:	681a      	ldr	r2, [r3, #0]
 810af3c:	2101      	movs	r1, #1
 810af3e:	69fb      	ldr	r3, [r7, #28]
 810af40:	fa01 f303 	lsl.w	r3, r1, r3
 810af44:	4013      	ands	r3, r2
 810af46:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 810af48:	693b      	ldr	r3, [r7, #16]
 810af4a:	2b00      	cmp	r3, #0
 810af4c:	f000 8186 	beq.w	810b25c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 810af50:	683b      	ldr	r3, [r7, #0]
 810af52:	685b      	ldr	r3, [r3, #4]
 810af54:	f003 0303 	and.w	r3, r3, #3
 810af58:	2b01      	cmp	r3, #1
 810af5a:	d005      	beq.n	810af68 <HAL_GPIO_Init+0x44>
 810af5c:	683b      	ldr	r3, [r7, #0]
 810af5e:	685b      	ldr	r3, [r3, #4]
 810af60:	f003 0303 	and.w	r3, r3, #3
 810af64:	2b02      	cmp	r3, #2
 810af66:	d130      	bne.n	810afca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 810af68:	687b      	ldr	r3, [r7, #4]
 810af6a:	689b      	ldr	r3, [r3, #8]
 810af6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810af6e:	69fb      	ldr	r3, [r7, #28]
 810af70:	005b      	lsls	r3, r3, #1
 810af72:	2203      	movs	r2, #3
 810af74:	fa02 f303 	lsl.w	r3, r2, r3
 810af78:	43db      	mvns	r3, r3
 810af7a:	69ba      	ldr	r2, [r7, #24]
 810af7c:	4013      	ands	r3, r2
 810af7e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 810af80:	683b      	ldr	r3, [r7, #0]
 810af82:	68da      	ldr	r2, [r3, #12]
 810af84:	69fb      	ldr	r3, [r7, #28]
 810af86:	005b      	lsls	r3, r3, #1
 810af88:	fa02 f303 	lsl.w	r3, r2, r3
 810af8c:	69ba      	ldr	r2, [r7, #24]
 810af8e:	4313      	orrs	r3, r2
 810af90:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810af92:	687b      	ldr	r3, [r7, #4]
 810af94:	69ba      	ldr	r2, [r7, #24]
 810af96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 810af98:	687b      	ldr	r3, [r7, #4]
 810af9a:	685b      	ldr	r3, [r3, #4]
 810af9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810af9e:	2201      	movs	r2, #1
 810afa0:	69fb      	ldr	r3, [r7, #28]
 810afa2:	fa02 f303 	lsl.w	r3, r2, r3
 810afa6:	43db      	mvns	r3, r3
 810afa8:	69ba      	ldr	r2, [r7, #24]
 810afaa:	4013      	ands	r3, r2
 810afac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810afae:	683b      	ldr	r3, [r7, #0]
 810afb0:	685b      	ldr	r3, [r3, #4]
 810afb2:	091b      	lsrs	r3, r3, #4
 810afb4:	f003 0201 	and.w	r2, r3, #1
 810afb8:	69fb      	ldr	r3, [r7, #28]
 810afba:	fa02 f303 	lsl.w	r3, r2, r3
 810afbe:	69ba      	ldr	r2, [r7, #24]
 810afc0:	4313      	orrs	r3, r2
 810afc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 810afc4:	687b      	ldr	r3, [r7, #4]
 810afc6:	69ba      	ldr	r2, [r7, #24]
 810afc8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810afca:	683b      	ldr	r3, [r7, #0]
 810afcc:	685b      	ldr	r3, [r3, #4]
 810afce:	f003 0303 	and.w	r3, r3, #3
 810afd2:	2b03      	cmp	r3, #3
 810afd4:	d017      	beq.n	810b006 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810afd6:	687b      	ldr	r3, [r7, #4]
 810afd8:	68db      	ldr	r3, [r3, #12]
 810afda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 810afdc:	69fb      	ldr	r3, [r7, #28]
 810afde:	005b      	lsls	r3, r3, #1
 810afe0:	2203      	movs	r2, #3
 810afe2:	fa02 f303 	lsl.w	r3, r2, r3
 810afe6:	43db      	mvns	r3, r3
 810afe8:	69ba      	ldr	r2, [r7, #24]
 810afea:	4013      	ands	r3, r2
 810afec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810afee:	683b      	ldr	r3, [r7, #0]
 810aff0:	689a      	ldr	r2, [r3, #8]
 810aff2:	69fb      	ldr	r3, [r7, #28]
 810aff4:	005b      	lsls	r3, r3, #1
 810aff6:	fa02 f303 	lsl.w	r3, r2, r3
 810affa:	69ba      	ldr	r2, [r7, #24]
 810affc:	4313      	orrs	r3, r2
 810affe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 810b000:	687b      	ldr	r3, [r7, #4]
 810b002:	69ba      	ldr	r2, [r7, #24]
 810b004:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810b006:	683b      	ldr	r3, [r7, #0]
 810b008:	685b      	ldr	r3, [r3, #4]
 810b00a:	f003 0303 	and.w	r3, r3, #3
 810b00e:	2b02      	cmp	r3, #2
 810b010:	d123      	bne.n	810b05a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810b012:	69fb      	ldr	r3, [r7, #28]
 810b014:	08da      	lsrs	r2, r3, #3
 810b016:	687b      	ldr	r3, [r7, #4]
 810b018:	3208      	adds	r2, #8
 810b01a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810b01e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 810b020:	69fb      	ldr	r3, [r7, #28]
 810b022:	f003 0307 	and.w	r3, r3, #7
 810b026:	009b      	lsls	r3, r3, #2
 810b028:	220f      	movs	r2, #15
 810b02a:	fa02 f303 	lsl.w	r3, r2, r3
 810b02e:	43db      	mvns	r3, r3
 810b030:	69ba      	ldr	r2, [r7, #24]
 810b032:	4013      	ands	r3, r2
 810b034:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810b036:	683b      	ldr	r3, [r7, #0]
 810b038:	691a      	ldr	r2, [r3, #16]
 810b03a:	69fb      	ldr	r3, [r7, #28]
 810b03c:	f003 0307 	and.w	r3, r3, #7
 810b040:	009b      	lsls	r3, r3, #2
 810b042:	fa02 f303 	lsl.w	r3, r2, r3
 810b046:	69ba      	ldr	r2, [r7, #24]
 810b048:	4313      	orrs	r3, r2
 810b04a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 810b04c:	69fb      	ldr	r3, [r7, #28]
 810b04e:	08da      	lsrs	r2, r3, #3
 810b050:	687b      	ldr	r3, [r7, #4]
 810b052:	3208      	adds	r2, #8
 810b054:	69b9      	ldr	r1, [r7, #24]
 810b056:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810b05a:	687b      	ldr	r3, [r7, #4]
 810b05c:	681b      	ldr	r3, [r3, #0]
 810b05e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 810b060:	69fb      	ldr	r3, [r7, #28]
 810b062:	005b      	lsls	r3, r3, #1
 810b064:	2203      	movs	r2, #3
 810b066:	fa02 f303 	lsl.w	r3, r2, r3
 810b06a:	43db      	mvns	r3, r3
 810b06c:	69ba      	ldr	r2, [r7, #24]
 810b06e:	4013      	ands	r3, r2
 810b070:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810b072:	683b      	ldr	r3, [r7, #0]
 810b074:	685b      	ldr	r3, [r3, #4]
 810b076:	f003 0203 	and.w	r2, r3, #3
 810b07a:	69fb      	ldr	r3, [r7, #28]
 810b07c:	005b      	lsls	r3, r3, #1
 810b07e:	fa02 f303 	lsl.w	r3, r2, r3
 810b082:	69ba      	ldr	r2, [r7, #24]
 810b084:	4313      	orrs	r3, r2
 810b086:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 810b088:	687b      	ldr	r3, [r7, #4]
 810b08a:	69ba      	ldr	r2, [r7, #24]
 810b08c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 810b08e:	683b      	ldr	r3, [r7, #0]
 810b090:	685b      	ldr	r3, [r3, #4]
 810b092:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 810b096:	2b00      	cmp	r3, #0
 810b098:	f000 80e0 	beq.w	810b25c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 810b09c:	4b2f      	ldr	r3, [pc, #188]	@ (810b15c <HAL_GPIO_Init+0x238>)
 810b09e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810b0a2:	4a2e      	ldr	r2, [pc, #184]	@ (810b15c <HAL_GPIO_Init+0x238>)
 810b0a4:	f043 0302 	orr.w	r3, r3, #2
 810b0a8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 810b0ac:	4b2b      	ldr	r3, [pc, #172]	@ (810b15c <HAL_GPIO_Init+0x238>)
 810b0ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810b0b2:	f003 0302 	and.w	r3, r3, #2
 810b0b6:	60fb      	str	r3, [r7, #12]
 810b0b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810b0ba:	4a29      	ldr	r2, [pc, #164]	@ (810b160 <HAL_GPIO_Init+0x23c>)
 810b0bc:	69fb      	ldr	r3, [r7, #28]
 810b0be:	089b      	lsrs	r3, r3, #2
 810b0c0:	3302      	adds	r3, #2
 810b0c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810b0c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 810b0c8:	69fb      	ldr	r3, [r7, #28]
 810b0ca:	f003 0303 	and.w	r3, r3, #3
 810b0ce:	009b      	lsls	r3, r3, #2
 810b0d0:	220f      	movs	r2, #15
 810b0d2:	fa02 f303 	lsl.w	r3, r2, r3
 810b0d6:	43db      	mvns	r3, r3
 810b0d8:	69ba      	ldr	r2, [r7, #24]
 810b0da:	4013      	ands	r3, r2
 810b0dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810b0de:	687b      	ldr	r3, [r7, #4]
 810b0e0:	4a20      	ldr	r2, [pc, #128]	@ (810b164 <HAL_GPIO_Init+0x240>)
 810b0e2:	4293      	cmp	r3, r2
 810b0e4:	d052      	beq.n	810b18c <HAL_GPIO_Init+0x268>
 810b0e6:	687b      	ldr	r3, [r7, #4]
 810b0e8:	4a1f      	ldr	r2, [pc, #124]	@ (810b168 <HAL_GPIO_Init+0x244>)
 810b0ea:	4293      	cmp	r3, r2
 810b0ec:	d031      	beq.n	810b152 <HAL_GPIO_Init+0x22e>
 810b0ee:	687b      	ldr	r3, [r7, #4]
 810b0f0:	4a1e      	ldr	r2, [pc, #120]	@ (810b16c <HAL_GPIO_Init+0x248>)
 810b0f2:	4293      	cmp	r3, r2
 810b0f4:	d02b      	beq.n	810b14e <HAL_GPIO_Init+0x22a>
 810b0f6:	687b      	ldr	r3, [r7, #4]
 810b0f8:	4a1d      	ldr	r2, [pc, #116]	@ (810b170 <HAL_GPIO_Init+0x24c>)
 810b0fa:	4293      	cmp	r3, r2
 810b0fc:	d025      	beq.n	810b14a <HAL_GPIO_Init+0x226>
 810b0fe:	687b      	ldr	r3, [r7, #4]
 810b100:	4a1c      	ldr	r2, [pc, #112]	@ (810b174 <HAL_GPIO_Init+0x250>)
 810b102:	4293      	cmp	r3, r2
 810b104:	d01f      	beq.n	810b146 <HAL_GPIO_Init+0x222>
 810b106:	687b      	ldr	r3, [r7, #4]
 810b108:	4a1b      	ldr	r2, [pc, #108]	@ (810b178 <HAL_GPIO_Init+0x254>)
 810b10a:	4293      	cmp	r3, r2
 810b10c:	d019      	beq.n	810b142 <HAL_GPIO_Init+0x21e>
 810b10e:	687b      	ldr	r3, [r7, #4]
 810b110:	4a1a      	ldr	r2, [pc, #104]	@ (810b17c <HAL_GPIO_Init+0x258>)
 810b112:	4293      	cmp	r3, r2
 810b114:	d013      	beq.n	810b13e <HAL_GPIO_Init+0x21a>
 810b116:	687b      	ldr	r3, [r7, #4]
 810b118:	4a19      	ldr	r2, [pc, #100]	@ (810b180 <HAL_GPIO_Init+0x25c>)
 810b11a:	4293      	cmp	r3, r2
 810b11c:	d00d      	beq.n	810b13a <HAL_GPIO_Init+0x216>
 810b11e:	687b      	ldr	r3, [r7, #4]
 810b120:	4a18      	ldr	r2, [pc, #96]	@ (810b184 <HAL_GPIO_Init+0x260>)
 810b122:	4293      	cmp	r3, r2
 810b124:	d007      	beq.n	810b136 <HAL_GPIO_Init+0x212>
 810b126:	687b      	ldr	r3, [r7, #4]
 810b128:	4a17      	ldr	r2, [pc, #92]	@ (810b188 <HAL_GPIO_Init+0x264>)
 810b12a:	4293      	cmp	r3, r2
 810b12c:	d101      	bne.n	810b132 <HAL_GPIO_Init+0x20e>
 810b12e:	2309      	movs	r3, #9
 810b130:	e02d      	b.n	810b18e <HAL_GPIO_Init+0x26a>
 810b132:	230a      	movs	r3, #10
 810b134:	e02b      	b.n	810b18e <HAL_GPIO_Init+0x26a>
 810b136:	2308      	movs	r3, #8
 810b138:	e029      	b.n	810b18e <HAL_GPIO_Init+0x26a>
 810b13a:	2307      	movs	r3, #7
 810b13c:	e027      	b.n	810b18e <HAL_GPIO_Init+0x26a>
 810b13e:	2306      	movs	r3, #6
 810b140:	e025      	b.n	810b18e <HAL_GPIO_Init+0x26a>
 810b142:	2305      	movs	r3, #5
 810b144:	e023      	b.n	810b18e <HAL_GPIO_Init+0x26a>
 810b146:	2304      	movs	r3, #4
 810b148:	e021      	b.n	810b18e <HAL_GPIO_Init+0x26a>
 810b14a:	2303      	movs	r3, #3
 810b14c:	e01f      	b.n	810b18e <HAL_GPIO_Init+0x26a>
 810b14e:	2302      	movs	r3, #2
 810b150:	e01d      	b.n	810b18e <HAL_GPIO_Init+0x26a>
 810b152:	2301      	movs	r3, #1
 810b154:	e01b      	b.n	810b18e <HAL_GPIO_Init+0x26a>
 810b156:	bf00      	nop
 810b158:	580000c0 	.word	0x580000c0
 810b15c:	58024400 	.word	0x58024400
 810b160:	58000400 	.word	0x58000400
 810b164:	58020000 	.word	0x58020000
 810b168:	58020400 	.word	0x58020400
 810b16c:	58020800 	.word	0x58020800
 810b170:	58020c00 	.word	0x58020c00
 810b174:	58021000 	.word	0x58021000
 810b178:	58021400 	.word	0x58021400
 810b17c:	58021800 	.word	0x58021800
 810b180:	58021c00 	.word	0x58021c00
 810b184:	58022000 	.word	0x58022000
 810b188:	58022400 	.word	0x58022400
 810b18c:	2300      	movs	r3, #0
 810b18e:	69fa      	ldr	r2, [r7, #28]
 810b190:	f002 0203 	and.w	r2, r2, #3
 810b194:	0092      	lsls	r2, r2, #2
 810b196:	4093      	lsls	r3, r2
 810b198:	69ba      	ldr	r2, [r7, #24]
 810b19a:	4313      	orrs	r3, r2
 810b19c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810b19e:	4938      	ldr	r1, [pc, #224]	@ (810b280 <HAL_GPIO_Init+0x35c>)
 810b1a0:	69fb      	ldr	r3, [r7, #28]
 810b1a2:	089b      	lsrs	r3, r3, #2
 810b1a4:	3302      	adds	r3, #2
 810b1a6:	69ba      	ldr	r2, [r7, #24]
 810b1a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 810b1ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 810b1b0:	681b      	ldr	r3, [r3, #0]
 810b1b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810b1b4:	693b      	ldr	r3, [r7, #16]
 810b1b6:	43db      	mvns	r3, r3
 810b1b8:	69ba      	ldr	r2, [r7, #24]
 810b1ba:	4013      	ands	r3, r2
 810b1bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 810b1be:	683b      	ldr	r3, [r7, #0]
 810b1c0:	685b      	ldr	r3, [r3, #4]
 810b1c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810b1c6:	2b00      	cmp	r3, #0
 810b1c8:	d003      	beq.n	810b1d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 810b1ca:	69ba      	ldr	r2, [r7, #24]
 810b1cc:	693b      	ldr	r3, [r7, #16]
 810b1ce:	4313      	orrs	r3, r2
 810b1d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810b1d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810b1d6:	69bb      	ldr	r3, [r7, #24]
 810b1d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810b1da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 810b1de:	685b      	ldr	r3, [r3, #4]
 810b1e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810b1e2:	693b      	ldr	r3, [r7, #16]
 810b1e4:	43db      	mvns	r3, r3
 810b1e6:	69ba      	ldr	r2, [r7, #24]
 810b1e8:	4013      	ands	r3, r2
 810b1ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 810b1ec:	683b      	ldr	r3, [r7, #0]
 810b1ee:	685b      	ldr	r3, [r3, #4]
 810b1f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 810b1f4:	2b00      	cmp	r3, #0
 810b1f6:	d003      	beq.n	810b200 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 810b1f8:	69ba      	ldr	r2, [r7, #24]
 810b1fa:	693b      	ldr	r3, [r7, #16]
 810b1fc:	4313      	orrs	r3, r2
 810b1fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 810b200:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810b204:	69bb      	ldr	r3, [r7, #24]
 810b206:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 810b208:	697b      	ldr	r3, [r7, #20]
 810b20a:	685b      	ldr	r3, [r3, #4]
 810b20c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810b20e:	693b      	ldr	r3, [r7, #16]
 810b210:	43db      	mvns	r3, r3
 810b212:	69ba      	ldr	r2, [r7, #24]
 810b214:	4013      	ands	r3, r2
 810b216:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 810b218:	683b      	ldr	r3, [r7, #0]
 810b21a:	685b      	ldr	r3, [r3, #4]
 810b21c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810b220:	2b00      	cmp	r3, #0
 810b222:	d003      	beq.n	810b22c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 810b224:	69ba      	ldr	r2, [r7, #24]
 810b226:	693b      	ldr	r3, [r7, #16]
 810b228:	4313      	orrs	r3, r2
 810b22a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 810b22c:	697b      	ldr	r3, [r7, #20]
 810b22e:	69ba      	ldr	r2, [r7, #24]
 810b230:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810b232:	697b      	ldr	r3, [r7, #20]
 810b234:	681b      	ldr	r3, [r3, #0]
 810b236:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810b238:	693b      	ldr	r3, [r7, #16]
 810b23a:	43db      	mvns	r3, r3
 810b23c:	69ba      	ldr	r2, [r7, #24]
 810b23e:	4013      	ands	r3, r2
 810b240:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810b242:	683b      	ldr	r3, [r7, #0]
 810b244:	685b      	ldr	r3, [r3, #4]
 810b246:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810b24a:	2b00      	cmp	r3, #0
 810b24c:	d003      	beq.n	810b256 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810b24e:	69ba      	ldr	r2, [r7, #24]
 810b250:	693b      	ldr	r3, [r7, #16]
 810b252:	4313      	orrs	r3, r2
 810b254:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810b256:	697b      	ldr	r3, [r7, #20]
 810b258:	69ba      	ldr	r2, [r7, #24]
 810b25a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 810b25c:	69fb      	ldr	r3, [r7, #28]
 810b25e:	3301      	adds	r3, #1
 810b260:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810b262:	683b      	ldr	r3, [r7, #0]
 810b264:	681a      	ldr	r2, [r3, #0]
 810b266:	69fb      	ldr	r3, [r7, #28]
 810b268:	fa22 f303 	lsr.w	r3, r2, r3
 810b26c:	2b00      	cmp	r3, #0
 810b26e:	f47f ae63 	bne.w	810af38 <HAL_GPIO_Init+0x14>
  }
}
 810b272:	bf00      	nop
 810b274:	bf00      	nop
 810b276:	3724      	adds	r7, #36	@ 0x24
 810b278:	46bd      	mov	sp, r7
 810b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b27e:	4770      	bx	lr
 810b280:	58000400 	.word	0x58000400

0810b284 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 810b284:	b480      	push	{r7}
 810b286:	b087      	sub	sp, #28
 810b288:	af00      	add	r7, sp, #0
 810b28a:	6078      	str	r0, [r7, #4]
 810b28c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810b28e:	2300      	movs	r3, #0
 810b290:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t tmp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810b292:	4b75      	ldr	r3, [pc, #468]	@ (810b468 <HAL_GPIO_DeInit+0x1e4>)
 810b294:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 810b296:	e0d9      	b.n	810b44c <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 810b298:	2201      	movs	r2, #1
 810b29a:	697b      	ldr	r3, [r7, #20]
 810b29c:	fa02 f303 	lsl.w	r3, r2, r3
 810b2a0:	683a      	ldr	r2, [r7, #0]
 810b2a2:	4013      	ands	r3, r2
 810b2a4:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 810b2a6:	68fb      	ldr	r3, [r7, #12]
 810b2a8:	2b00      	cmp	r3, #0
 810b2aa:	f000 80cc 	beq.w	810b446 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 810b2ae:	4a6f      	ldr	r2, [pc, #444]	@ (810b46c <HAL_GPIO_DeInit+0x1e8>)
 810b2b0:	697b      	ldr	r3, [r7, #20]
 810b2b2:	089b      	lsrs	r3, r3, #2
 810b2b4:	3302      	adds	r3, #2
 810b2b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810b2ba:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 810b2bc:	697b      	ldr	r3, [r7, #20]
 810b2be:	f003 0303 	and.w	r3, r3, #3
 810b2c2:	009b      	lsls	r3, r3, #2
 810b2c4:	220f      	movs	r2, #15
 810b2c6:	fa02 f303 	lsl.w	r3, r2, r3
 810b2ca:	68ba      	ldr	r2, [r7, #8]
 810b2cc:	4013      	ands	r3, r2
 810b2ce:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 810b2d0:	687b      	ldr	r3, [r7, #4]
 810b2d2:	4a67      	ldr	r2, [pc, #412]	@ (810b470 <HAL_GPIO_DeInit+0x1ec>)
 810b2d4:	4293      	cmp	r3, r2
 810b2d6:	d037      	beq.n	810b348 <HAL_GPIO_DeInit+0xc4>
 810b2d8:	687b      	ldr	r3, [r7, #4]
 810b2da:	4a66      	ldr	r2, [pc, #408]	@ (810b474 <HAL_GPIO_DeInit+0x1f0>)
 810b2dc:	4293      	cmp	r3, r2
 810b2de:	d031      	beq.n	810b344 <HAL_GPIO_DeInit+0xc0>
 810b2e0:	687b      	ldr	r3, [r7, #4]
 810b2e2:	4a65      	ldr	r2, [pc, #404]	@ (810b478 <HAL_GPIO_DeInit+0x1f4>)
 810b2e4:	4293      	cmp	r3, r2
 810b2e6:	d02b      	beq.n	810b340 <HAL_GPIO_DeInit+0xbc>
 810b2e8:	687b      	ldr	r3, [r7, #4]
 810b2ea:	4a64      	ldr	r2, [pc, #400]	@ (810b47c <HAL_GPIO_DeInit+0x1f8>)
 810b2ec:	4293      	cmp	r3, r2
 810b2ee:	d025      	beq.n	810b33c <HAL_GPIO_DeInit+0xb8>
 810b2f0:	687b      	ldr	r3, [r7, #4]
 810b2f2:	4a63      	ldr	r2, [pc, #396]	@ (810b480 <HAL_GPIO_DeInit+0x1fc>)
 810b2f4:	4293      	cmp	r3, r2
 810b2f6:	d01f      	beq.n	810b338 <HAL_GPIO_DeInit+0xb4>
 810b2f8:	687b      	ldr	r3, [r7, #4]
 810b2fa:	4a62      	ldr	r2, [pc, #392]	@ (810b484 <HAL_GPIO_DeInit+0x200>)
 810b2fc:	4293      	cmp	r3, r2
 810b2fe:	d019      	beq.n	810b334 <HAL_GPIO_DeInit+0xb0>
 810b300:	687b      	ldr	r3, [r7, #4]
 810b302:	4a61      	ldr	r2, [pc, #388]	@ (810b488 <HAL_GPIO_DeInit+0x204>)
 810b304:	4293      	cmp	r3, r2
 810b306:	d013      	beq.n	810b330 <HAL_GPIO_DeInit+0xac>
 810b308:	687b      	ldr	r3, [r7, #4]
 810b30a:	4a60      	ldr	r2, [pc, #384]	@ (810b48c <HAL_GPIO_DeInit+0x208>)
 810b30c:	4293      	cmp	r3, r2
 810b30e:	d00d      	beq.n	810b32c <HAL_GPIO_DeInit+0xa8>
 810b310:	687b      	ldr	r3, [r7, #4]
 810b312:	4a5f      	ldr	r2, [pc, #380]	@ (810b490 <HAL_GPIO_DeInit+0x20c>)
 810b314:	4293      	cmp	r3, r2
 810b316:	d007      	beq.n	810b328 <HAL_GPIO_DeInit+0xa4>
 810b318:	687b      	ldr	r3, [r7, #4]
 810b31a:	4a5e      	ldr	r2, [pc, #376]	@ (810b494 <HAL_GPIO_DeInit+0x210>)
 810b31c:	4293      	cmp	r3, r2
 810b31e:	d101      	bne.n	810b324 <HAL_GPIO_DeInit+0xa0>
 810b320:	2309      	movs	r3, #9
 810b322:	e012      	b.n	810b34a <HAL_GPIO_DeInit+0xc6>
 810b324:	230a      	movs	r3, #10
 810b326:	e010      	b.n	810b34a <HAL_GPIO_DeInit+0xc6>
 810b328:	2308      	movs	r3, #8
 810b32a:	e00e      	b.n	810b34a <HAL_GPIO_DeInit+0xc6>
 810b32c:	2307      	movs	r3, #7
 810b32e:	e00c      	b.n	810b34a <HAL_GPIO_DeInit+0xc6>
 810b330:	2306      	movs	r3, #6
 810b332:	e00a      	b.n	810b34a <HAL_GPIO_DeInit+0xc6>
 810b334:	2305      	movs	r3, #5
 810b336:	e008      	b.n	810b34a <HAL_GPIO_DeInit+0xc6>
 810b338:	2304      	movs	r3, #4
 810b33a:	e006      	b.n	810b34a <HAL_GPIO_DeInit+0xc6>
 810b33c:	2303      	movs	r3, #3
 810b33e:	e004      	b.n	810b34a <HAL_GPIO_DeInit+0xc6>
 810b340:	2302      	movs	r3, #2
 810b342:	e002      	b.n	810b34a <HAL_GPIO_DeInit+0xc6>
 810b344:	2301      	movs	r3, #1
 810b346:	e000      	b.n	810b34a <HAL_GPIO_DeInit+0xc6>
 810b348:	2300      	movs	r3, #0
 810b34a:	697a      	ldr	r2, [r7, #20]
 810b34c:	f002 0203 	and.w	r2, r2, #3
 810b350:	0092      	lsls	r2, r2, #2
 810b352:	4093      	lsls	r3, r2
 810b354:	68ba      	ldr	r2, [r7, #8]
 810b356:	429a      	cmp	r2, r3
 810b358:	d136      	bne.n	810b3c8 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 810b35a:	693b      	ldr	r3, [r7, #16]
 810b35c:	681a      	ldr	r2, [r3, #0]
 810b35e:	68fb      	ldr	r3, [r7, #12]
 810b360:	43db      	mvns	r3, r3
 810b362:	401a      	ands	r2, r3
 810b364:	693b      	ldr	r3, [r7, #16]
 810b366:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 810b368:	693b      	ldr	r3, [r7, #16]
 810b36a:	685a      	ldr	r2, [r3, #4]
 810b36c:	68fb      	ldr	r3, [r7, #12]
 810b36e:	43db      	mvns	r3, r3
 810b370:	401a      	ands	r2, r3
 810b372:	693b      	ldr	r3, [r7, #16]
 810b374:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 810b376:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 810b37a:	685a      	ldr	r2, [r3, #4]
 810b37c:	68fb      	ldr	r3, [r7, #12]
 810b37e:	43db      	mvns	r3, r3
 810b380:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 810b384:	4013      	ands	r3, r2
 810b386:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 810b388:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 810b38c:	681a      	ldr	r2, [r3, #0]
 810b38e:	68fb      	ldr	r3, [r7, #12]
 810b390:	43db      	mvns	r3, r3
 810b392:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 810b396:	4013      	ands	r3, r2
 810b398:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 810b39a:	697b      	ldr	r3, [r7, #20]
 810b39c:	f003 0303 	and.w	r3, r3, #3
 810b3a0:	009b      	lsls	r3, r3, #2
 810b3a2:	220f      	movs	r2, #15
 810b3a4:	fa02 f303 	lsl.w	r3, r2, r3
 810b3a8:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 810b3aa:	4a30      	ldr	r2, [pc, #192]	@ (810b46c <HAL_GPIO_DeInit+0x1e8>)
 810b3ac:	697b      	ldr	r3, [r7, #20]
 810b3ae:	089b      	lsrs	r3, r3, #2
 810b3b0:	3302      	adds	r3, #2
 810b3b2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 810b3b6:	68bb      	ldr	r3, [r7, #8]
 810b3b8:	43da      	mvns	r2, r3
 810b3ba:	482c      	ldr	r0, [pc, #176]	@ (810b46c <HAL_GPIO_DeInit+0x1e8>)
 810b3bc:	697b      	ldr	r3, [r7, #20]
 810b3be:	089b      	lsrs	r3, r3, #2
 810b3c0:	400a      	ands	r2, r1
 810b3c2:	3302      	adds	r3, #2
 810b3c4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 810b3c8:	687b      	ldr	r3, [r7, #4]
 810b3ca:	681a      	ldr	r2, [r3, #0]
 810b3cc:	697b      	ldr	r3, [r7, #20]
 810b3ce:	005b      	lsls	r3, r3, #1
 810b3d0:	2103      	movs	r1, #3
 810b3d2:	fa01 f303 	lsl.w	r3, r1, r3
 810b3d6:	431a      	orrs	r2, r3
 810b3d8:	687b      	ldr	r3, [r7, #4]
 810b3da:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 810b3dc:	697b      	ldr	r3, [r7, #20]
 810b3de:	08da      	lsrs	r2, r3, #3
 810b3e0:	687b      	ldr	r3, [r7, #4]
 810b3e2:	3208      	adds	r2, #8
 810b3e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810b3e8:	697b      	ldr	r3, [r7, #20]
 810b3ea:	f003 0307 	and.w	r3, r3, #7
 810b3ee:	009b      	lsls	r3, r3, #2
 810b3f0:	220f      	movs	r2, #15
 810b3f2:	fa02 f303 	lsl.w	r3, r2, r3
 810b3f6:	43db      	mvns	r3, r3
 810b3f8:	697a      	ldr	r2, [r7, #20]
 810b3fa:	08d2      	lsrs	r2, r2, #3
 810b3fc:	4019      	ands	r1, r3
 810b3fe:	687b      	ldr	r3, [r7, #4]
 810b400:	3208      	adds	r2, #8
 810b402:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 810b406:	687b      	ldr	r3, [r7, #4]
 810b408:	68da      	ldr	r2, [r3, #12]
 810b40a:	697b      	ldr	r3, [r7, #20]
 810b40c:	005b      	lsls	r3, r3, #1
 810b40e:	2103      	movs	r1, #3
 810b410:	fa01 f303 	lsl.w	r3, r1, r3
 810b414:	43db      	mvns	r3, r3
 810b416:	401a      	ands	r2, r3
 810b418:	687b      	ldr	r3, [r7, #4]
 810b41a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 810b41c:	687b      	ldr	r3, [r7, #4]
 810b41e:	685a      	ldr	r2, [r3, #4]
 810b420:	2101      	movs	r1, #1
 810b422:	697b      	ldr	r3, [r7, #20]
 810b424:	fa01 f303 	lsl.w	r3, r1, r3
 810b428:	43db      	mvns	r3, r3
 810b42a:	401a      	ands	r2, r3
 810b42c:	687b      	ldr	r3, [r7, #4]
 810b42e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810b430:	687b      	ldr	r3, [r7, #4]
 810b432:	689a      	ldr	r2, [r3, #8]
 810b434:	697b      	ldr	r3, [r7, #20]
 810b436:	005b      	lsls	r3, r3, #1
 810b438:	2103      	movs	r1, #3
 810b43a:	fa01 f303 	lsl.w	r3, r1, r3
 810b43e:	43db      	mvns	r3, r3
 810b440:	401a      	ands	r2, r3
 810b442:	687b      	ldr	r3, [r7, #4]
 810b444:	609a      	str	r2, [r3, #8]
    }

    position++;
 810b446:	697b      	ldr	r3, [r7, #20]
 810b448:	3301      	adds	r3, #1
 810b44a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 810b44c:	683a      	ldr	r2, [r7, #0]
 810b44e:	697b      	ldr	r3, [r7, #20]
 810b450:	fa22 f303 	lsr.w	r3, r2, r3
 810b454:	2b00      	cmp	r3, #0
 810b456:	f47f af1f 	bne.w	810b298 <HAL_GPIO_DeInit+0x14>
  }
}
 810b45a:	bf00      	nop
 810b45c:	bf00      	nop
 810b45e:	371c      	adds	r7, #28
 810b460:	46bd      	mov	sp, r7
 810b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b466:	4770      	bx	lr
 810b468:	580000c0 	.word	0x580000c0
 810b46c:	58000400 	.word	0x58000400
 810b470:	58020000 	.word	0x58020000
 810b474:	58020400 	.word	0x58020400
 810b478:	58020800 	.word	0x58020800
 810b47c:	58020c00 	.word	0x58020c00
 810b480:	58021000 	.word	0x58021000
 810b484:	58021400 	.word	0x58021400
 810b488:	58021800 	.word	0x58021800
 810b48c:	58021c00 	.word	0x58021c00
 810b490:	58022000 	.word	0x58022000
 810b494:	58022400 	.word	0x58022400

0810b498 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 810b498:	b480      	push	{r7}
 810b49a:	b083      	sub	sp, #12
 810b49c:	af00      	add	r7, sp, #0
 810b49e:	6078      	str	r0, [r7, #4]
 810b4a0:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 810b4a2:	490e      	ldr	r1, [pc, #56]	@ (810b4dc <HAL_HSEM_Take+0x44>)
 810b4a4:	683b      	ldr	r3, [r7, #0]
 810b4a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 810b4aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810b4ae:	687a      	ldr	r2, [r7, #4]
 810b4b0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 810b4b4:	4a09      	ldr	r2, [pc, #36]	@ (810b4dc <HAL_HSEM_Take+0x44>)
 810b4b6:	687b      	ldr	r3, [r7, #4]
 810b4b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 810b4bc:	683b      	ldr	r3, [r7, #0]
 810b4be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 810b4c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810b4c6:	429a      	cmp	r2, r3
 810b4c8:	d101      	bne.n	810b4ce <HAL_HSEM_Take+0x36>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 810b4ca:	2300      	movs	r3, #0
 810b4cc:	e000      	b.n	810b4d0 <HAL_HSEM_Take+0x38>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 810b4ce:	2301      	movs	r3, #1
}
 810b4d0:	4618      	mov	r0, r3
 810b4d2:	370c      	adds	r7, #12
 810b4d4:	46bd      	mov	sp, r7
 810b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b4da:	4770      	bx	lr
 810b4dc:	58026400 	.word	0x58026400

0810b4e0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 810b4e0:	b480      	push	{r7}
 810b4e2:	b083      	sub	sp, #12
 810b4e4:	af00      	add	r7, sp, #0
 810b4e6:	6078      	str	r0, [r7, #4]
 810b4e8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 810b4ea:	4906      	ldr	r1, [pc, #24]	@ (810b504 <HAL_HSEM_Release+0x24>)
 810b4ec:	683b      	ldr	r3, [r7, #0]
 810b4ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 810b4f2:	687b      	ldr	r3, [r7, #4]
 810b4f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 810b4f8:	bf00      	nop
 810b4fa:	370c      	adds	r7, #12
 810b4fc:	46bd      	mov	sp, r7
 810b4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b502:	4770      	bx	lr
 810b504:	58026400 	.word	0x58026400

0810b508 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 810b508:	b480      	push	{r7}
 810b50a:	b083      	sub	sp, #12
 810b50c:	af00      	add	r7, sp, #0
 810b50e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 810b510:	4b05      	ldr	r3, [pc, #20]	@ (810b528 <HAL_HSEM_ActivateNotification+0x20>)
 810b512:	681a      	ldr	r2, [r3, #0]
 810b514:	4904      	ldr	r1, [pc, #16]	@ (810b528 <HAL_HSEM_ActivateNotification+0x20>)
 810b516:	687b      	ldr	r3, [r7, #4]
 810b518:	4313      	orrs	r3, r2
 810b51a:	600b      	str	r3, [r1, #0]
#endif
}
 810b51c:	bf00      	nop
 810b51e:	370c      	adds	r7, #12
 810b520:	46bd      	mov	sp, r7
 810b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b526:	4770      	bx	lr
 810b528:	58026510 	.word	0x58026510

0810b52c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 810b52c:	b580      	push	{r7, lr}
 810b52e:	b082      	sub	sp, #8
 810b530:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 810b532:	4b0a      	ldr	r3, [pc, #40]	@ (810b55c <HAL_HSEM_IRQHandler+0x30>)
 810b534:	68db      	ldr	r3, [r3, #12]
 810b536:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 810b538:	4b08      	ldr	r3, [pc, #32]	@ (810b55c <HAL_HSEM_IRQHandler+0x30>)
 810b53a:	681a      	ldr	r2, [r3, #0]
 810b53c:	687b      	ldr	r3, [r7, #4]
 810b53e:	43db      	mvns	r3, r3
 810b540:	4906      	ldr	r1, [pc, #24]	@ (810b55c <HAL_HSEM_IRQHandler+0x30>)
 810b542:	4013      	ands	r3, r2
 810b544:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 810b546:	4a05      	ldr	r2, [pc, #20]	@ (810b55c <HAL_HSEM_IRQHandler+0x30>)
 810b548:	687b      	ldr	r3, [r7, #4]
 810b54a:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 810b54c:	6878      	ldr	r0, [r7, #4]
 810b54e:	f7f5 f907 	bl	8100760 <HAL_HSEM_FreeCallback>
}
 810b552:	bf00      	nop
 810b554:	3708      	adds	r7, #8
 810b556:	46bd      	mov	sp, r7
 810b558:	bd80      	pop	{r7, pc}
 810b55a:	bf00      	nop
 810b55c:	58026510 	.word	0x58026510

0810b560 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 810b560:	b580      	push	{r7, lr}
 810b562:	b082      	sub	sp, #8
 810b564:	af00      	add	r7, sp, #0
 810b566:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 810b568:	687b      	ldr	r3, [r7, #4]
 810b56a:	2b00      	cmp	r3, #0
 810b56c:	d101      	bne.n	810b572 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 810b56e:	2301      	movs	r3, #1
 810b570:	e08d      	b.n	810b68e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 810b572:	687b      	ldr	r3, [r7, #4]
 810b574:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810b578:	b2db      	uxtb	r3, r3
 810b57a:	2b00      	cmp	r3, #0
 810b57c:	d106      	bne.n	810b58c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 810b57e:	687b      	ldr	r3, [r7, #4]
 810b580:	2200      	movs	r2, #0
 810b582:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 810b586:	6878      	ldr	r0, [r7, #4]
 810b588:	f7f5 fc5c 	bl	8100e44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 810b58c:	687b      	ldr	r3, [r7, #4]
 810b58e:	2224      	movs	r2, #36	@ 0x24
 810b590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 810b594:	687b      	ldr	r3, [r7, #4]
 810b596:	681b      	ldr	r3, [r3, #0]
 810b598:	681a      	ldr	r2, [r3, #0]
 810b59a:	687b      	ldr	r3, [r7, #4]
 810b59c:	681b      	ldr	r3, [r3, #0]
 810b59e:	f022 0201 	bic.w	r2, r2, #1
 810b5a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 810b5a4:	687b      	ldr	r3, [r7, #4]
 810b5a6:	685a      	ldr	r2, [r3, #4]
 810b5a8:	687b      	ldr	r3, [r7, #4]
 810b5aa:	681b      	ldr	r3, [r3, #0]
 810b5ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 810b5b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 810b5b2:	687b      	ldr	r3, [r7, #4]
 810b5b4:	681b      	ldr	r3, [r3, #0]
 810b5b6:	689a      	ldr	r2, [r3, #8]
 810b5b8:	687b      	ldr	r3, [r7, #4]
 810b5ba:	681b      	ldr	r3, [r3, #0]
 810b5bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 810b5c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 810b5c2:	687b      	ldr	r3, [r7, #4]
 810b5c4:	68db      	ldr	r3, [r3, #12]
 810b5c6:	2b01      	cmp	r3, #1
 810b5c8:	d107      	bne.n	810b5da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 810b5ca:	687b      	ldr	r3, [r7, #4]
 810b5cc:	689a      	ldr	r2, [r3, #8]
 810b5ce:	687b      	ldr	r3, [r7, #4]
 810b5d0:	681b      	ldr	r3, [r3, #0]
 810b5d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 810b5d6:	609a      	str	r2, [r3, #8]
 810b5d8:	e006      	b.n	810b5e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 810b5da:	687b      	ldr	r3, [r7, #4]
 810b5dc:	689a      	ldr	r2, [r3, #8]
 810b5de:	687b      	ldr	r3, [r7, #4]
 810b5e0:	681b      	ldr	r3, [r3, #0]
 810b5e2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 810b5e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 810b5e8:	687b      	ldr	r3, [r7, #4]
 810b5ea:	68db      	ldr	r3, [r3, #12]
 810b5ec:	2b02      	cmp	r3, #2
 810b5ee:	d108      	bne.n	810b602 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 810b5f0:	687b      	ldr	r3, [r7, #4]
 810b5f2:	681b      	ldr	r3, [r3, #0]
 810b5f4:	685a      	ldr	r2, [r3, #4]
 810b5f6:	687b      	ldr	r3, [r7, #4]
 810b5f8:	681b      	ldr	r3, [r3, #0]
 810b5fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810b5fe:	605a      	str	r2, [r3, #4]
 810b600:	e007      	b.n	810b612 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 810b602:	687b      	ldr	r3, [r7, #4]
 810b604:	681b      	ldr	r3, [r3, #0]
 810b606:	685a      	ldr	r2, [r3, #4]
 810b608:	687b      	ldr	r3, [r7, #4]
 810b60a:	681b      	ldr	r3, [r3, #0]
 810b60c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 810b610:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 810b612:	687b      	ldr	r3, [r7, #4]
 810b614:	681b      	ldr	r3, [r3, #0]
 810b616:	685b      	ldr	r3, [r3, #4]
 810b618:	687a      	ldr	r2, [r7, #4]
 810b61a:	6812      	ldr	r2, [r2, #0]
 810b61c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810b620:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 810b624:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 810b626:	687b      	ldr	r3, [r7, #4]
 810b628:	681b      	ldr	r3, [r3, #0]
 810b62a:	68da      	ldr	r2, [r3, #12]
 810b62c:	687b      	ldr	r3, [r7, #4]
 810b62e:	681b      	ldr	r3, [r3, #0]
 810b630:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 810b634:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 810b636:	687b      	ldr	r3, [r7, #4]
 810b638:	691a      	ldr	r2, [r3, #16]
 810b63a:	687b      	ldr	r3, [r7, #4]
 810b63c:	695b      	ldr	r3, [r3, #20]
 810b63e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 810b642:	687b      	ldr	r3, [r7, #4]
 810b644:	699b      	ldr	r3, [r3, #24]
 810b646:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 810b648:	687b      	ldr	r3, [r7, #4]
 810b64a:	681b      	ldr	r3, [r3, #0]
 810b64c:	430a      	orrs	r2, r1
 810b64e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 810b650:	687b      	ldr	r3, [r7, #4]
 810b652:	69d9      	ldr	r1, [r3, #28]
 810b654:	687b      	ldr	r3, [r7, #4]
 810b656:	6a1a      	ldr	r2, [r3, #32]
 810b658:	687b      	ldr	r3, [r7, #4]
 810b65a:	681b      	ldr	r3, [r3, #0]
 810b65c:	430a      	orrs	r2, r1
 810b65e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 810b660:	687b      	ldr	r3, [r7, #4]
 810b662:	681b      	ldr	r3, [r3, #0]
 810b664:	681a      	ldr	r2, [r3, #0]
 810b666:	687b      	ldr	r3, [r7, #4]
 810b668:	681b      	ldr	r3, [r3, #0]
 810b66a:	f042 0201 	orr.w	r2, r2, #1
 810b66e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810b670:	687b      	ldr	r3, [r7, #4]
 810b672:	2200      	movs	r2, #0
 810b674:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 810b676:	687b      	ldr	r3, [r7, #4]
 810b678:	2220      	movs	r2, #32
 810b67a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 810b67e:	687b      	ldr	r3, [r7, #4]
 810b680:	2200      	movs	r2, #0
 810b682:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 810b684:	687b      	ldr	r3, [r7, #4]
 810b686:	2200      	movs	r2, #0
 810b688:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 810b68c:	2300      	movs	r3, #0
}
 810b68e:	4618      	mov	r0, r3
 810b690:	3708      	adds	r7, #8
 810b692:	46bd      	mov	sp, r7
 810b694:	bd80      	pop	{r7, pc}

0810b696 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 810b696:	b580      	push	{r7, lr}
 810b698:	b082      	sub	sp, #8
 810b69a:	af00      	add	r7, sp, #0
 810b69c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 810b69e:	687b      	ldr	r3, [r7, #4]
 810b6a0:	2b00      	cmp	r3, #0
 810b6a2:	d101      	bne.n	810b6a8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 810b6a4:	2301      	movs	r3, #1
 810b6a6:	e021      	b.n	810b6ec <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 810b6a8:	687b      	ldr	r3, [r7, #4]
 810b6aa:	2224      	movs	r2, #36	@ 0x24
 810b6ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 810b6b0:	687b      	ldr	r3, [r7, #4]
 810b6b2:	681b      	ldr	r3, [r3, #0]
 810b6b4:	681a      	ldr	r2, [r3, #0]
 810b6b6:	687b      	ldr	r3, [r7, #4]
 810b6b8:	681b      	ldr	r3, [r3, #0]
 810b6ba:	f022 0201 	bic.w	r2, r2, #1
 810b6be:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 810b6c0:	6878      	ldr	r0, [r7, #4]
 810b6c2:	f7f5 fc29 	bl	8100f18 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810b6c6:	687b      	ldr	r3, [r7, #4]
 810b6c8:	2200      	movs	r2, #0
 810b6ca:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 810b6cc:	687b      	ldr	r3, [r7, #4]
 810b6ce:	2200      	movs	r2, #0
 810b6d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 810b6d4:	687b      	ldr	r3, [r7, #4]
 810b6d6:	2200      	movs	r2, #0
 810b6d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 810b6da:	687b      	ldr	r3, [r7, #4]
 810b6dc:	2200      	movs	r2, #0
 810b6de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 810b6e2:	687b      	ldr	r3, [r7, #4]
 810b6e4:	2200      	movs	r2, #0
 810b6e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 810b6ea:	2300      	movs	r3, #0
}
 810b6ec:	4618      	mov	r0, r3
 810b6ee:	3708      	adds	r7, #8
 810b6f0:	46bd      	mov	sp, r7
 810b6f2:	bd80      	pop	{r7, pc}

0810b6f4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810b6f4:	b580      	push	{r7, lr}
 810b6f6:	b088      	sub	sp, #32
 810b6f8:	af02      	add	r7, sp, #8
 810b6fa:	60f8      	str	r0, [r7, #12]
 810b6fc:	4608      	mov	r0, r1
 810b6fe:	4611      	mov	r1, r2
 810b700:	461a      	mov	r2, r3
 810b702:	4603      	mov	r3, r0
 810b704:	817b      	strh	r3, [r7, #10]
 810b706:	460b      	mov	r3, r1
 810b708:	813b      	strh	r3, [r7, #8]
 810b70a:	4613      	mov	r3, r2
 810b70c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810b70e:	68fb      	ldr	r3, [r7, #12]
 810b710:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810b714:	b2db      	uxtb	r3, r3
 810b716:	2b20      	cmp	r3, #32
 810b718:	f040 80fd 	bne.w	810b916 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 810b71c:	6a3b      	ldr	r3, [r7, #32]
 810b71e:	2b00      	cmp	r3, #0
 810b720:	d002      	beq.n	810b728 <HAL_I2C_Mem_Read+0x34>
 810b722:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 810b724:	2b00      	cmp	r3, #0
 810b726:	d105      	bne.n	810b734 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 810b728:	68fb      	ldr	r3, [r7, #12]
 810b72a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 810b72e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 810b730:	2301      	movs	r3, #1
 810b732:	e0f1      	b.n	810b918 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 810b734:	68fb      	ldr	r3, [r7, #12]
 810b736:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 810b73a:	2b01      	cmp	r3, #1
 810b73c:	d101      	bne.n	810b742 <HAL_I2C_Mem_Read+0x4e>
 810b73e:	2302      	movs	r3, #2
 810b740:	e0ea      	b.n	810b918 <HAL_I2C_Mem_Read+0x224>
 810b742:	68fb      	ldr	r3, [r7, #12]
 810b744:	2201      	movs	r2, #1
 810b746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 810b74a:	f7fd fd59 	bl	8109200 <HAL_GetTick>
 810b74e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 810b750:	697b      	ldr	r3, [r7, #20]
 810b752:	9300      	str	r3, [sp, #0]
 810b754:	2319      	movs	r3, #25
 810b756:	2201      	movs	r2, #1
 810b758:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 810b75c:	68f8      	ldr	r0, [r7, #12]
 810b75e:	f000 f967 	bl	810ba30 <I2C_WaitOnFlagUntilTimeout>
 810b762:	4603      	mov	r3, r0
 810b764:	2b00      	cmp	r3, #0
 810b766:	d001      	beq.n	810b76c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 810b768:	2301      	movs	r3, #1
 810b76a:	e0d5      	b.n	810b918 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 810b76c:	68fb      	ldr	r3, [r7, #12]
 810b76e:	2222      	movs	r2, #34	@ 0x22
 810b770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 810b774:	68fb      	ldr	r3, [r7, #12]
 810b776:	2240      	movs	r2, #64	@ 0x40
 810b778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810b77c:	68fb      	ldr	r3, [r7, #12]
 810b77e:	2200      	movs	r2, #0
 810b780:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 810b782:	68fb      	ldr	r3, [r7, #12]
 810b784:	6a3a      	ldr	r2, [r7, #32]
 810b786:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 810b788:	68fb      	ldr	r3, [r7, #12]
 810b78a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 810b78c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 810b78e:	68fb      	ldr	r3, [r7, #12]
 810b790:	2200      	movs	r2, #0
 810b792:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 810b794:	88f8      	ldrh	r0, [r7, #6]
 810b796:	893a      	ldrh	r2, [r7, #8]
 810b798:	8979      	ldrh	r1, [r7, #10]
 810b79a:	697b      	ldr	r3, [r7, #20]
 810b79c:	9301      	str	r3, [sp, #4]
 810b79e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b7a0:	9300      	str	r3, [sp, #0]
 810b7a2:	4603      	mov	r3, r0
 810b7a4:	68f8      	ldr	r0, [r7, #12]
 810b7a6:	f000 f8cb 	bl	810b940 <I2C_RequestMemoryRead>
 810b7aa:	4603      	mov	r3, r0
 810b7ac:	2b00      	cmp	r3, #0
 810b7ae:	d005      	beq.n	810b7bc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 810b7b0:	68fb      	ldr	r3, [r7, #12]
 810b7b2:	2200      	movs	r2, #0
 810b7b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 810b7b8:	2301      	movs	r3, #1
 810b7ba:	e0ad      	b.n	810b918 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810b7bc:	68fb      	ldr	r3, [r7, #12]
 810b7be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810b7c0:	b29b      	uxth	r3, r3
 810b7c2:	2bff      	cmp	r3, #255	@ 0xff
 810b7c4:	d90e      	bls.n	810b7e4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810b7c6:	68fb      	ldr	r3, [r7, #12]
 810b7c8:	22ff      	movs	r2, #255	@ 0xff
 810b7ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 810b7cc:	68fb      	ldr	r3, [r7, #12]
 810b7ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810b7d0:	b2da      	uxtb	r2, r3
 810b7d2:	8979      	ldrh	r1, [r7, #10]
 810b7d4:	4b52      	ldr	r3, [pc, #328]	@ (810b920 <HAL_I2C_Mem_Read+0x22c>)
 810b7d6:	9300      	str	r3, [sp, #0]
 810b7d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 810b7dc:	68f8      	ldr	r0, [r7, #12]
 810b7de:	f000 faeb 	bl	810bdb8 <I2C_TransferConfig>
 810b7e2:	e00f      	b.n	810b804 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 810b7e4:	68fb      	ldr	r3, [r7, #12]
 810b7e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810b7e8:	b29a      	uxth	r2, r3
 810b7ea:	68fb      	ldr	r3, [r7, #12]
 810b7ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 810b7ee:	68fb      	ldr	r3, [r7, #12]
 810b7f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810b7f2:	b2da      	uxtb	r2, r3
 810b7f4:	8979      	ldrh	r1, [r7, #10]
 810b7f6:	4b4a      	ldr	r3, [pc, #296]	@ (810b920 <HAL_I2C_Mem_Read+0x22c>)
 810b7f8:	9300      	str	r3, [sp, #0]
 810b7fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 810b7fe:	68f8      	ldr	r0, [r7, #12]
 810b800:	f000 fada 	bl	810bdb8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 810b804:	697b      	ldr	r3, [r7, #20]
 810b806:	9300      	str	r3, [sp, #0]
 810b808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b80a:	2200      	movs	r2, #0
 810b80c:	2104      	movs	r1, #4
 810b80e:	68f8      	ldr	r0, [r7, #12]
 810b810:	f000 f90e 	bl	810ba30 <I2C_WaitOnFlagUntilTimeout>
 810b814:	4603      	mov	r3, r0
 810b816:	2b00      	cmp	r3, #0
 810b818:	d001      	beq.n	810b81e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 810b81a:	2301      	movs	r3, #1
 810b81c:	e07c      	b.n	810b918 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 810b81e:	68fb      	ldr	r3, [r7, #12]
 810b820:	681b      	ldr	r3, [r3, #0]
 810b822:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810b824:	68fb      	ldr	r3, [r7, #12]
 810b826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810b828:	b2d2      	uxtb	r2, r2
 810b82a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 810b82c:	68fb      	ldr	r3, [r7, #12]
 810b82e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810b830:	1c5a      	adds	r2, r3, #1
 810b832:	68fb      	ldr	r3, [r7, #12]
 810b834:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 810b836:	68fb      	ldr	r3, [r7, #12]
 810b838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810b83a:	3b01      	subs	r3, #1
 810b83c:	b29a      	uxth	r2, r3
 810b83e:	68fb      	ldr	r3, [r7, #12]
 810b840:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 810b842:	68fb      	ldr	r3, [r7, #12]
 810b844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810b846:	b29b      	uxth	r3, r3
 810b848:	3b01      	subs	r3, #1
 810b84a:	b29a      	uxth	r2, r3
 810b84c:	68fb      	ldr	r3, [r7, #12]
 810b84e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 810b850:	68fb      	ldr	r3, [r7, #12]
 810b852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810b854:	b29b      	uxth	r3, r3
 810b856:	2b00      	cmp	r3, #0
 810b858:	d034      	beq.n	810b8c4 <HAL_I2C_Mem_Read+0x1d0>
 810b85a:	68fb      	ldr	r3, [r7, #12]
 810b85c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810b85e:	2b00      	cmp	r3, #0
 810b860:	d130      	bne.n	810b8c4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 810b862:	697b      	ldr	r3, [r7, #20]
 810b864:	9300      	str	r3, [sp, #0]
 810b866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b868:	2200      	movs	r2, #0
 810b86a:	2180      	movs	r1, #128	@ 0x80
 810b86c:	68f8      	ldr	r0, [r7, #12]
 810b86e:	f000 f8df 	bl	810ba30 <I2C_WaitOnFlagUntilTimeout>
 810b872:	4603      	mov	r3, r0
 810b874:	2b00      	cmp	r3, #0
 810b876:	d001      	beq.n	810b87c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 810b878:	2301      	movs	r3, #1
 810b87a:	e04d      	b.n	810b918 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810b87c:	68fb      	ldr	r3, [r7, #12]
 810b87e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810b880:	b29b      	uxth	r3, r3
 810b882:	2bff      	cmp	r3, #255	@ 0xff
 810b884:	d90e      	bls.n	810b8a4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 810b886:	68fb      	ldr	r3, [r7, #12]
 810b888:	22ff      	movs	r2, #255	@ 0xff
 810b88a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 810b88c:	68fb      	ldr	r3, [r7, #12]
 810b88e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810b890:	b2da      	uxtb	r2, r3
 810b892:	8979      	ldrh	r1, [r7, #10]
 810b894:	2300      	movs	r3, #0
 810b896:	9300      	str	r3, [sp, #0]
 810b898:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 810b89c:	68f8      	ldr	r0, [r7, #12]
 810b89e:	f000 fa8b 	bl	810bdb8 <I2C_TransferConfig>
 810b8a2:	e00f      	b.n	810b8c4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 810b8a4:	68fb      	ldr	r3, [r7, #12]
 810b8a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810b8a8:	b29a      	uxth	r2, r3
 810b8aa:	68fb      	ldr	r3, [r7, #12]
 810b8ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 810b8ae:	68fb      	ldr	r3, [r7, #12]
 810b8b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810b8b2:	b2da      	uxtb	r2, r3
 810b8b4:	8979      	ldrh	r1, [r7, #10]
 810b8b6:	2300      	movs	r3, #0
 810b8b8:	9300      	str	r3, [sp, #0]
 810b8ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 810b8be:	68f8      	ldr	r0, [r7, #12]
 810b8c0:	f000 fa7a 	bl	810bdb8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 810b8c4:	68fb      	ldr	r3, [r7, #12]
 810b8c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810b8c8:	b29b      	uxth	r3, r3
 810b8ca:	2b00      	cmp	r3, #0
 810b8cc:	d19a      	bne.n	810b804 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810b8ce:	697a      	ldr	r2, [r7, #20]
 810b8d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810b8d2:	68f8      	ldr	r0, [r7, #12]
 810b8d4:	f000 f94c 	bl	810bb70 <I2C_WaitOnSTOPFlagUntilTimeout>
 810b8d8:	4603      	mov	r3, r0
 810b8da:	2b00      	cmp	r3, #0
 810b8dc:	d001      	beq.n	810b8e2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 810b8de:	2301      	movs	r3, #1
 810b8e0:	e01a      	b.n	810b918 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810b8e2:	68fb      	ldr	r3, [r7, #12]
 810b8e4:	681b      	ldr	r3, [r3, #0]
 810b8e6:	2220      	movs	r2, #32
 810b8e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810b8ea:	68fb      	ldr	r3, [r7, #12]
 810b8ec:	681b      	ldr	r3, [r3, #0]
 810b8ee:	6859      	ldr	r1, [r3, #4]
 810b8f0:	68fb      	ldr	r3, [r7, #12]
 810b8f2:	681a      	ldr	r2, [r3, #0]
 810b8f4:	4b0b      	ldr	r3, [pc, #44]	@ (810b924 <HAL_I2C_Mem_Read+0x230>)
 810b8f6:	400b      	ands	r3, r1
 810b8f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 810b8fa:	68fb      	ldr	r3, [r7, #12]
 810b8fc:	2220      	movs	r2, #32
 810b8fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 810b902:	68fb      	ldr	r3, [r7, #12]
 810b904:	2200      	movs	r2, #0
 810b906:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810b90a:	68fb      	ldr	r3, [r7, #12]
 810b90c:	2200      	movs	r2, #0
 810b90e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 810b912:	2300      	movs	r3, #0
 810b914:	e000      	b.n	810b918 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 810b916:	2302      	movs	r3, #2
  }
}
 810b918:	4618      	mov	r0, r3
 810b91a:	3718      	adds	r7, #24
 810b91c:	46bd      	mov	sp, r7
 810b91e:	bd80      	pop	{r7, pc}
 810b920:	80002400 	.word	0x80002400
 810b924:	fe00e800 	.word	0xfe00e800

0810b928 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 810b928:	b480      	push	{r7}
 810b92a:	b083      	sub	sp, #12
 810b92c:	af00      	add	r7, sp, #0
 810b92e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 810b930:	687b      	ldr	r3, [r7, #4]
 810b932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 810b934:	4618      	mov	r0, r3
 810b936:	370c      	adds	r7, #12
 810b938:	46bd      	mov	sp, r7
 810b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b93e:	4770      	bx	lr

0810b940 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 810b940:	b580      	push	{r7, lr}
 810b942:	b086      	sub	sp, #24
 810b944:	af02      	add	r7, sp, #8
 810b946:	60f8      	str	r0, [r7, #12]
 810b948:	4608      	mov	r0, r1
 810b94a:	4611      	mov	r1, r2
 810b94c:	461a      	mov	r2, r3
 810b94e:	4603      	mov	r3, r0
 810b950:	817b      	strh	r3, [r7, #10]
 810b952:	460b      	mov	r3, r1
 810b954:	813b      	strh	r3, [r7, #8]
 810b956:	4613      	mov	r3, r2
 810b958:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 810b95a:	88fb      	ldrh	r3, [r7, #6]
 810b95c:	b2da      	uxtb	r2, r3
 810b95e:	8979      	ldrh	r1, [r7, #10]
 810b960:	4b20      	ldr	r3, [pc, #128]	@ (810b9e4 <I2C_RequestMemoryRead+0xa4>)
 810b962:	9300      	str	r3, [sp, #0]
 810b964:	2300      	movs	r3, #0
 810b966:	68f8      	ldr	r0, [r7, #12]
 810b968:	f000 fa26 	bl	810bdb8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810b96c:	69fa      	ldr	r2, [r7, #28]
 810b96e:	69b9      	ldr	r1, [r7, #24]
 810b970:	68f8      	ldr	r0, [r7, #12]
 810b972:	f000 f8b6 	bl	810bae2 <I2C_WaitOnTXISFlagUntilTimeout>
 810b976:	4603      	mov	r3, r0
 810b978:	2b00      	cmp	r3, #0
 810b97a:	d001      	beq.n	810b980 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 810b97c:	2301      	movs	r3, #1
 810b97e:	e02c      	b.n	810b9da <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 810b980:	88fb      	ldrh	r3, [r7, #6]
 810b982:	2b01      	cmp	r3, #1
 810b984:	d105      	bne.n	810b992 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810b986:	893b      	ldrh	r3, [r7, #8]
 810b988:	b2da      	uxtb	r2, r3
 810b98a:	68fb      	ldr	r3, [r7, #12]
 810b98c:	681b      	ldr	r3, [r3, #0]
 810b98e:	629a      	str	r2, [r3, #40]	@ 0x28
 810b990:	e015      	b.n	810b9be <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 810b992:	893b      	ldrh	r3, [r7, #8]
 810b994:	0a1b      	lsrs	r3, r3, #8
 810b996:	b29b      	uxth	r3, r3
 810b998:	b2da      	uxtb	r2, r3
 810b99a:	68fb      	ldr	r3, [r7, #12]
 810b99c:	681b      	ldr	r3, [r3, #0]
 810b99e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810b9a0:	69fa      	ldr	r2, [r7, #28]
 810b9a2:	69b9      	ldr	r1, [r7, #24]
 810b9a4:	68f8      	ldr	r0, [r7, #12]
 810b9a6:	f000 f89c 	bl	810bae2 <I2C_WaitOnTXISFlagUntilTimeout>
 810b9aa:	4603      	mov	r3, r0
 810b9ac:	2b00      	cmp	r3, #0
 810b9ae:	d001      	beq.n	810b9b4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 810b9b0:	2301      	movs	r3, #1
 810b9b2:	e012      	b.n	810b9da <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810b9b4:	893b      	ldrh	r3, [r7, #8]
 810b9b6:	b2da      	uxtb	r2, r3
 810b9b8:	68fb      	ldr	r3, [r7, #12]
 810b9ba:	681b      	ldr	r3, [r3, #0]
 810b9bc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 810b9be:	69fb      	ldr	r3, [r7, #28]
 810b9c0:	9300      	str	r3, [sp, #0]
 810b9c2:	69bb      	ldr	r3, [r7, #24]
 810b9c4:	2200      	movs	r2, #0
 810b9c6:	2140      	movs	r1, #64	@ 0x40
 810b9c8:	68f8      	ldr	r0, [r7, #12]
 810b9ca:	f000 f831 	bl	810ba30 <I2C_WaitOnFlagUntilTimeout>
 810b9ce:	4603      	mov	r3, r0
 810b9d0:	2b00      	cmp	r3, #0
 810b9d2:	d001      	beq.n	810b9d8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 810b9d4:	2301      	movs	r3, #1
 810b9d6:	e000      	b.n	810b9da <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 810b9d8:	2300      	movs	r3, #0
}
 810b9da:	4618      	mov	r0, r3
 810b9dc:	3710      	adds	r7, #16
 810b9de:	46bd      	mov	sp, r7
 810b9e0:	bd80      	pop	{r7, pc}
 810b9e2:	bf00      	nop
 810b9e4:	80002000 	.word	0x80002000

0810b9e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 810b9e8:	b480      	push	{r7}
 810b9ea:	b083      	sub	sp, #12
 810b9ec:	af00      	add	r7, sp, #0
 810b9ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 810b9f0:	687b      	ldr	r3, [r7, #4]
 810b9f2:	681b      	ldr	r3, [r3, #0]
 810b9f4:	699b      	ldr	r3, [r3, #24]
 810b9f6:	f003 0302 	and.w	r3, r3, #2
 810b9fa:	2b02      	cmp	r3, #2
 810b9fc:	d103      	bne.n	810ba06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 810b9fe:	687b      	ldr	r3, [r7, #4]
 810ba00:	681b      	ldr	r3, [r3, #0]
 810ba02:	2200      	movs	r2, #0
 810ba04:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 810ba06:	687b      	ldr	r3, [r7, #4]
 810ba08:	681b      	ldr	r3, [r3, #0]
 810ba0a:	699b      	ldr	r3, [r3, #24]
 810ba0c:	f003 0301 	and.w	r3, r3, #1
 810ba10:	2b01      	cmp	r3, #1
 810ba12:	d007      	beq.n	810ba24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 810ba14:	687b      	ldr	r3, [r7, #4]
 810ba16:	681b      	ldr	r3, [r3, #0]
 810ba18:	699a      	ldr	r2, [r3, #24]
 810ba1a:	687b      	ldr	r3, [r7, #4]
 810ba1c:	681b      	ldr	r3, [r3, #0]
 810ba1e:	f042 0201 	orr.w	r2, r2, #1
 810ba22:	619a      	str	r2, [r3, #24]
  }
}
 810ba24:	bf00      	nop
 810ba26:	370c      	adds	r7, #12
 810ba28:	46bd      	mov	sp, r7
 810ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ba2e:	4770      	bx	lr

0810ba30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 810ba30:	b580      	push	{r7, lr}
 810ba32:	b084      	sub	sp, #16
 810ba34:	af00      	add	r7, sp, #0
 810ba36:	60f8      	str	r0, [r7, #12]
 810ba38:	60b9      	str	r1, [r7, #8]
 810ba3a:	603b      	str	r3, [r7, #0]
 810ba3c:	4613      	mov	r3, r2
 810ba3e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 810ba40:	e03b      	b.n	810baba <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810ba42:	69ba      	ldr	r2, [r7, #24]
 810ba44:	6839      	ldr	r1, [r7, #0]
 810ba46:	68f8      	ldr	r0, [r7, #12]
 810ba48:	f000 f8d6 	bl	810bbf8 <I2C_IsErrorOccurred>
 810ba4c:	4603      	mov	r3, r0
 810ba4e:	2b00      	cmp	r3, #0
 810ba50:	d001      	beq.n	810ba56 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 810ba52:	2301      	movs	r3, #1
 810ba54:	e041      	b.n	810bada <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810ba56:	683b      	ldr	r3, [r7, #0]
 810ba58:	f1b3 3fff 	cmp.w	r3, #4294967295
 810ba5c:	d02d      	beq.n	810baba <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810ba5e:	f7fd fbcf 	bl	8109200 <HAL_GetTick>
 810ba62:	4602      	mov	r2, r0
 810ba64:	69bb      	ldr	r3, [r7, #24]
 810ba66:	1ad3      	subs	r3, r2, r3
 810ba68:	683a      	ldr	r2, [r7, #0]
 810ba6a:	429a      	cmp	r2, r3
 810ba6c:	d302      	bcc.n	810ba74 <I2C_WaitOnFlagUntilTimeout+0x44>
 810ba6e:	683b      	ldr	r3, [r7, #0]
 810ba70:	2b00      	cmp	r3, #0
 810ba72:	d122      	bne.n	810baba <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 810ba74:	68fb      	ldr	r3, [r7, #12]
 810ba76:	681b      	ldr	r3, [r3, #0]
 810ba78:	699a      	ldr	r2, [r3, #24]
 810ba7a:	68bb      	ldr	r3, [r7, #8]
 810ba7c:	4013      	ands	r3, r2
 810ba7e:	68ba      	ldr	r2, [r7, #8]
 810ba80:	429a      	cmp	r2, r3
 810ba82:	bf0c      	ite	eq
 810ba84:	2301      	moveq	r3, #1
 810ba86:	2300      	movne	r3, #0
 810ba88:	b2db      	uxtb	r3, r3
 810ba8a:	461a      	mov	r2, r3
 810ba8c:	79fb      	ldrb	r3, [r7, #7]
 810ba8e:	429a      	cmp	r2, r3
 810ba90:	d113      	bne.n	810baba <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810ba92:	68fb      	ldr	r3, [r7, #12]
 810ba94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810ba96:	f043 0220 	orr.w	r2, r3, #32
 810ba9a:	68fb      	ldr	r3, [r7, #12]
 810ba9c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 810ba9e:	68fb      	ldr	r3, [r7, #12]
 810baa0:	2220      	movs	r2, #32
 810baa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 810baa6:	68fb      	ldr	r3, [r7, #12]
 810baa8:	2200      	movs	r2, #0
 810baaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 810baae:	68fb      	ldr	r3, [r7, #12]
 810bab0:	2200      	movs	r2, #0
 810bab2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 810bab6:	2301      	movs	r3, #1
 810bab8:	e00f      	b.n	810bada <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 810baba:	68fb      	ldr	r3, [r7, #12]
 810babc:	681b      	ldr	r3, [r3, #0]
 810babe:	699a      	ldr	r2, [r3, #24]
 810bac0:	68bb      	ldr	r3, [r7, #8]
 810bac2:	4013      	ands	r3, r2
 810bac4:	68ba      	ldr	r2, [r7, #8]
 810bac6:	429a      	cmp	r2, r3
 810bac8:	bf0c      	ite	eq
 810baca:	2301      	moveq	r3, #1
 810bacc:	2300      	movne	r3, #0
 810bace:	b2db      	uxtb	r3, r3
 810bad0:	461a      	mov	r2, r3
 810bad2:	79fb      	ldrb	r3, [r7, #7]
 810bad4:	429a      	cmp	r2, r3
 810bad6:	d0b4      	beq.n	810ba42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810bad8:	2300      	movs	r3, #0
}
 810bada:	4618      	mov	r0, r3
 810badc:	3710      	adds	r7, #16
 810bade:	46bd      	mov	sp, r7
 810bae0:	bd80      	pop	{r7, pc}

0810bae2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 810bae2:	b580      	push	{r7, lr}
 810bae4:	b084      	sub	sp, #16
 810bae6:	af00      	add	r7, sp, #0
 810bae8:	60f8      	str	r0, [r7, #12]
 810baea:	60b9      	str	r1, [r7, #8]
 810baec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 810baee:	e033      	b.n	810bb58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810baf0:	687a      	ldr	r2, [r7, #4]
 810baf2:	68b9      	ldr	r1, [r7, #8]
 810baf4:	68f8      	ldr	r0, [r7, #12]
 810baf6:	f000 f87f 	bl	810bbf8 <I2C_IsErrorOccurred>
 810bafa:	4603      	mov	r3, r0
 810bafc:	2b00      	cmp	r3, #0
 810bafe:	d001      	beq.n	810bb04 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810bb00:	2301      	movs	r3, #1
 810bb02:	e031      	b.n	810bb68 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810bb04:	68bb      	ldr	r3, [r7, #8]
 810bb06:	f1b3 3fff 	cmp.w	r3, #4294967295
 810bb0a:	d025      	beq.n	810bb58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810bb0c:	f7fd fb78 	bl	8109200 <HAL_GetTick>
 810bb10:	4602      	mov	r2, r0
 810bb12:	687b      	ldr	r3, [r7, #4]
 810bb14:	1ad3      	subs	r3, r2, r3
 810bb16:	68ba      	ldr	r2, [r7, #8]
 810bb18:	429a      	cmp	r2, r3
 810bb1a:	d302      	bcc.n	810bb22 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 810bb1c:	68bb      	ldr	r3, [r7, #8]
 810bb1e:	2b00      	cmp	r3, #0
 810bb20:	d11a      	bne.n	810bb58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 810bb22:	68fb      	ldr	r3, [r7, #12]
 810bb24:	681b      	ldr	r3, [r3, #0]
 810bb26:	699b      	ldr	r3, [r3, #24]
 810bb28:	f003 0302 	and.w	r3, r3, #2
 810bb2c:	2b02      	cmp	r3, #2
 810bb2e:	d013      	beq.n	810bb58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810bb30:	68fb      	ldr	r3, [r7, #12]
 810bb32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810bb34:	f043 0220 	orr.w	r2, r3, #32
 810bb38:	68fb      	ldr	r3, [r7, #12]
 810bb3a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 810bb3c:	68fb      	ldr	r3, [r7, #12]
 810bb3e:	2220      	movs	r2, #32
 810bb40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 810bb44:	68fb      	ldr	r3, [r7, #12]
 810bb46:	2200      	movs	r2, #0
 810bb48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 810bb4c:	68fb      	ldr	r3, [r7, #12]
 810bb4e:	2200      	movs	r2, #0
 810bb50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 810bb54:	2301      	movs	r3, #1
 810bb56:	e007      	b.n	810bb68 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 810bb58:	68fb      	ldr	r3, [r7, #12]
 810bb5a:	681b      	ldr	r3, [r3, #0]
 810bb5c:	699b      	ldr	r3, [r3, #24]
 810bb5e:	f003 0302 	and.w	r3, r3, #2
 810bb62:	2b02      	cmp	r3, #2
 810bb64:	d1c4      	bne.n	810baf0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 810bb66:	2300      	movs	r3, #0
}
 810bb68:	4618      	mov	r0, r3
 810bb6a:	3710      	adds	r7, #16
 810bb6c:	46bd      	mov	sp, r7
 810bb6e:	bd80      	pop	{r7, pc}

0810bb70 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 810bb70:	b580      	push	{r7, lr}
 810bb72:	b084      	sub	sp, #16
 810bb74:	af00      	add	r7, sp, #0
 810bb76:	60f8      	str	r0, [r7, #12]
 810bb78:	60b9      	str	r1, [r7, #8]
 810bb7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810bb7c:	e02f      	b.n	810bbde <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810bb7e:	687a      	ldr	r2, [r7, #4]
 810bb80:	68b9      	ldr	r1, [r7, #8]
 810bb82:	68f8      	ldr	r0, [r7, #12]
 810bb84:	f000 f838 	bl	810bbf8 <I2C_IsErrorOccurred>
 810bb88:	4603      	mov	r3, r0
 810bb8a:	2b00      	cmp	r3, #0
 810bb8c:	d001      	beq.n	810bb92 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810bb8e:	2301      	movs	r3, #1
 810bb90:	e02d      	b.n	810bbee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810bb92:	f7fd fb35 	bl	8109200 <HAL_GetTick>
 810bb96:	4602      	mov	r2, r0
 810bb98:	687b      	ldr	r3, [r7, #4]
 810bb9a:	1ad3      	subs	r3, r2, r3
 810bb9c:	68ba      	ldr	r2, [r7, #8]
 810bb9e:	429a      	cmp	r2, r3
 810bba0:	d302      	bcc.n	810bba8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 810bba2:	68bb      	ldr	r3, [r7, #8]
 810bba4:	2b00      	cmp	r3, #0
 810bba6:	d11a      	bne.n	810bbde <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 810bba8:	68fb      	ldr	r3, [r7, #12]
 810bbaa:	681b      	ldr	r3, [r3, #0]
 810bbac:	699b      	ldr	r3, [r3, #24]
 810bbae:	f003 0320 	and.w	r3, r3, #32
 810bbb2:	2b20      	cmp	r3, #32
 810bbb4:	d013      	beq.n	810bbde <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810bbb6:	68fb      	ldr	r3, [r7, #12]
 810bbb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810bbba:	f043 0220 	orr.w	r2, r3, #32
 810bbbe:	68fb      	ldr	r3, [r7, #12]
 810bbc0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 810bbc2:	68fb      	ldr	r3, [r7, #12]
 810bbc4:	2220      	movs	r2, #32
 810bbc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 810bbca:	68fb      	ldr	r3, [r7, #12]
 810bbcc:	2200      	movs	r2, #0
 810bbce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 810bbd2:	68fb      	ldr	r3, [r7, #12]
 810bbd4:	2200      	movs	r2, #0
 810bbd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 810bbda:	2301      	movs	r3, #1
 810bbdc:	e007      	b.n	810bbee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810bbde:	68fb      	ldr	r3, [r7, #12]
 810bbe0:	681b      	ldr	r3, [r3, #0]
 810bbe2:	699b      	ldr	r3, [r3, #24]
 810bbe4:	f003 0320 	and.w	r3, r3, #32
 810bbe8:	2b20      	cmp	r3, #32
 810bbea:	d1c8      	bne.n	810bb7e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 810bbec:	2300      	movs	r3, #0
}
 810bbee:	4618      	mov	r0, r3
 810bbf0:	3710      	adds	r7, #16
 810bbf2:	46bd      	mov	sp, r7
 810bbf4:	bd80      	pop	{r7, pc}
	...

0810bbf8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 810bbf8:	b580      	push	{r7, lr}
 810bbfa:	b08a      	sub	sp, #40	@ 0x28
 810bbfc:	af00      	add	r7, sp, #0
 810bbfe:	60f8      	str	r0, [r7, #12]
 810bc00:	60b9      	str	r1, [r7, #8]
 810bc02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810bc04:	2300      	movs	r3, #0
 810bc06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 810bc0a:	68fb      	ldr	r3, [r7, #12]
 810bc0c:	681b      	ldr	r3, [r3, #0]
 810bc0e:	699b      	ldr	r3, [r3, #24]
 810bc10:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 810bc12:	2300      	movs	r3, #0
 810bc14:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 810bc16:	687b      	ldr	r3, [r7, #4]
 810bc18:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 810bc1a:	69bb      	ldr	r3, [r7, #24]
 810bc1c:	f003 0310 	and.w	r3, r3, #16
 810bc20:	2b00      	cmp	r3, #0
 810bc22:	d068      	beq.n	810bcf6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 810bc24:	68fb      	ldr	r3, [r7, #12]
 810bc26:	681b      	ldr	r3, [r3, #0]
 810bc28:	2210      	movs	r2, #16
 810bc2a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 810bc2c:	e049      	b.n	810bcc2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 810bc2e:	68bb      	ldr	r3, [r7, #8]
 810bc30:	f1b3 3fff 	cmp.w	r3, #4294967295
 810bc34:	d045      	beq.n	810bcc2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 810bc36:	f7fd fae3 	bl	8109200 <HAL_GetTick>
 810bc3a:	4602      	mov	r2, r0
 810bc3c:	69fb      	ldr	r3, [r7, #28]
 810bc3e:	1ad3      	subs	r3, r2, r3
 810bc40:	68ba      	ldr	r2, [r7, #8]
 810bc42:	429a      	cmp	r2, r3
 810bc44:	d302      	bcc.n	810bc4c <I2C_IsErrorOccurred+0x54>
 810bc46:	68bb      	ldr	r3, [r7, #8]
 810bc48:	2b00      	cmp	r3, #0
 810bc4a:	d13a      	bne.n	810bcc2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 810bc4c:	68fb      	ldr	r3, [r7, #12]
 810bc4e:	681b      	ldr	r3, [r3, #0]
 810bc50:	685b      	ldr	r3, [r3, #4]
 810bc52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810bc56:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 810bc58:	68fb      	ldr	r3, [r7, #12]
 810bc5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 810bc5e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 810bc60:	68fb      	ldr	r3, [r7, #12]
 810bc62:	681b      	ldr	r3, [r3, #0]
 810bc64:	699b      	ldr	r3, [r3, #24]
 810bc66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810bc6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810bc6e:	d121      	bne.n	810bcb4 <I2C_IsErrorOccurred+0xbc>
 810bc70:	697b      	ldr	r3, [r7, #20]
 810bc72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810bc76:	d01d      	beq.n	810bcb4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 810bc78:	7cfb      	ldrb	r3, [r7, #19]
 810bc7a:	2b20      	cmp	r3, #32
 810bc7c:	d01a      	beq.n	810bcb4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 810bc7e:	68fb      	ldr	r3, [r7, #12]
 810bc80:	681b      	ldr	r3, [r3, #0]
 810bc82:	685a      	ldr	r2, [r3, #4]
 810bc84:	68fb      	ldr	r3, [r7, #12]
 810bc86:	681b      	ldr	r3, [r3, #0]
 810bc88:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 810bc8c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 810bc8e:	f7fd fab7 	bl	8109200 <HAL_GetTick>
 810bc92:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810bc94:	e00e      	b.n	810bcb4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 810bc96:	f7fd fab3 	bl	8109200 <HAL_GetTick>
 810bc9a:	4602      	mov	r2, r0
 810bc9c:	69fb      	ldr	r3, [r7, #28]
 810bc9e:	1ad3      	subs	r3, r2, r3
 810bca0:	2b19      	cmp	r3, #25
 810bca2:	d907      	bls.n	810bcb4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 810bca4:	6a3b      	ldr	r3, [r7, #32]
 810bca6:	f043 0320 	orr.w	r3, r3, #32
 810bcaa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 810bcac:	2301      	movs	r3, #1
 810bcae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 810bcb2:	e006      	b.n	810bcc2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810bcb4:	68fb      	ldr	r3, [r7, #12]
 810bcb6:	681b      	ldr	r3, [r3, #0]
 810bcb8:	699b      	ldr	r3, [r3, #24]
 810bcba:	f003 0320 	and.w	r3, r3, #32
 810bcbe:	2b20      	cmp	r3, #32
 810bcc0:	d1e9      	bne.n	810bc96 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 810bcc2:	68fb      	ldr	r3, [r7, #12]
 810bcc4:	681b      	ldr	r3, [r3, #0]
 810bcc6:	699b      	ldr	r3, [r3, #24]
 810bcc8:	f003 0320 	and.w	r3, r3, #32
 810bccc:	2b20      	cmp	r3, #32
 810bcce:	d003      	beq.n	810bcd8 <I2C_IsErrorOccurred+0xe0>
 810bcd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810bcd4:	2b00      	cmp	r3, #0
 810bcd6:	d0aa      	beq.n	810bc2e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 810bcd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810bcdc:	2b00      	cmp	r3, #0
 810bcde:	d103      	bne.n	810bce8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810bce0:	68fb      	ldr	r3, [r7, #12]
 810bce2:	681b      	ldr	r3, [r3, #0]
 810bce4:	2220      	movs	r2, #32
 810bce6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 810bce8:	6a3b      	ldr	r3, [r7, #32]
 810bcea:	f043 0304 	orr.w	r3, r3, #4
 810bcee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 810bcf0:	2301      	movs	r3, #1
 810bcf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 810bcf6:	68fb      	ldr	r3, [r7, #12]
 810bcf8:	681b      	ldr	r3, [r3, #0]
 810bcfa:	699b      	ldr	r3, [r3, #24]
 810bcfc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 810bcfe:	69bb      	ldr	r3, [r7, #24]
 810bd00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810bd04:	2b00      	cmp	r3, #0
 810bd06:	d00b      	beq.n	810bd20 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 810bd08:	6a3b      	ldr	r3, [r7, #32]
 810bd0a:	f043 0301 	orr.w	r3, r3, #1
 810bd0e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 810bd10:	68fb      	ldr	r3, [r7, #12]
 810bd12:	681b      	ldr	r3, [r3, #0]
 810bd14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810bd18:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810bd1a:	2301      	movs	r3, #1
 810bd1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 810bd20:	69bb      	ldr	r3, [r7, #24]
 810bd22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 810bd26:	2b00      	cmp	r3, #0
 810bd28:	d00b      	beq.n	810bd42 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 810bd2a:	6a3b      	ldr	r3, [r7, #32]
 810bd2c:	f043 0308 	orr.w	r3, r3, #8
 810bd30:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 810bd32:	68fb      	ldr	r3, [r7, #12]
 810bd34:	681b      	ldr	r3, [r3, #0]
 810bd36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 810bd3a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810bd3c:	2301      	movs	r3, #1
 810bd3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 810bd42:	69bb      	ldr	r3, [r7, #24]
 810bd44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 810bd48:	2b00      	cmp	r3, #0
 810bd4a:	d00b      	beq.n	810bd64 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 810bd4c:	6a3b      	ldr	r3, [r7, #32]
 810bd4e:	f043 0302 	orr.w	r3, r3, #2
 810bd52:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 810bd54:	68fb      	ldr	r3, [r7, #12]
 810bd56:	681b      	ldr	r3, [r3, #0]
 810bd58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 810bd5c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810bd5e:	2301      	movs	r3, #1
 810bd60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 810bd64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810bd68:	2b00      	cmp	r3, #0
 810bd6a:	d01c      	beq.n	810bda6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 810bd6c:	68f8      	ldr	r0, [r7, #12]
 810bd6e:	f7ff fe3b 	bl	810b9e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810bd72:	68fb      	ldr	r3, [r7, #12]
 810bd74:	681b      	ldr	r3, [r3, #0]
 810bd76:	6859      	ldr	r1, [r3, #4]
 810bd78:	68fb      	ldr	r3, [r7, #12]
 810bd7a:	681a      	ldr	r2, [r3, #0]
 810bd7c:	4b0d      	ldr	r3, [pc, #52]	@ (810bdb4 <I2C_IsErrorOccurred+0x1bc>)
 810bd7e:	400b      	ands	r3, r1
 810bd80:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 810bd82:	68fb      	ldr	r3, [r7, #12]
 810bd84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810bd86:	6a3b      	ldr	r3, [r7, #32]
 810bd88:	431a      	orrs	r2, r3
 810bd8a:	68fb      	ldr	r3, [r7, #12]
 810bd8c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 810bd8e:	68fb      	ldr	r3, [r7, #12]
 810bd90:	2220      	movs	r2, #32
 810bd92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 810bd96:	68fb      	ldr	r3, [r7, #12]
 810bd98:	2200      	movs	r2, #0
 810bd9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810bd9e:	68fb      	ldr	r3, [r7, #12]
 810bda0:	2200      	movs	r2, #0
 810bda2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 810bda6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 810bdaa:	4618      	mov	r0, r3
 810bdac:	3728      	adds	r7, #40	@ 0x28
 810bdae:	46bd      	mov	sp, r7
 810bdb0:	bd80      	pop	{r7, pc}
 810bdb2:	bf00      	nop
 810bdb4:	fe00e800 	.word	0xfe00e800

0810bdb8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 810bdb8:	b480      	push	{r7}
 810bdba:	b087      	sub	sp, #28
 810bdbc:	af00      	add	r7, sp, #0
 810bdbe:	60f8      	str	r0, [r7, #12]
 810bdc0:	607b      	str	r3, [r7, #4]
 810bdc2:	460b      	mov	r3, r1
 810bdc4:	817b      	strh	r3, [r7, #10]
 810bdc6:	4613      	mov	r3, r2
 810bdc8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 810bdca:	897b      	ldrh	r3, [r7, #10]
 810bdcc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 810bdd0:	7a7b      	ldrb	r3, [r7, #9]
 810bdd2:	041b      	lsls	r3, r3, #16
 810bdd4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 810bdd8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 810bdda:	687b      	ldr	r3, [r7, #4]
 810bddc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 810bdde:	6a3b      	ldr	r3, [r7, #32]
 810bde0:	4313      	orrs	r3, r2
 810bde2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 810bde6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 810bde8:	68fb      	ldr	r3, [r7, #12]
 810bdea:	681b      	ldr	r3, [r3, #0]
 810bdec:	685a      	ldr	r2, [r3, #4]
 810bdee:	6a3b      	ldr	r3, [r7, #32]
 810bdf0:	0d5b      	lsrs	r3, r3, #21
 810bdf2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 810bdf6:	4b08      	ldr	r3, [pc, #32]	@ (810be18 <I2C_TransferConfig+0x60>)
 810bdf8:	430b      	orrs	r3, r1
 810bdfa:	43db      	mvns	r3, r3
 810bdfc:	ea02 0103 	and.w	r1, r2, r3
 810be00:	68fb      	ldr	r3, [r7, #12]
 810be02:	681b      	ldr	r3, [r3, #0]
 810be04:	697a      	ldr	r2, [r7, #20]
 810be06:	430a      	orrs	r2, r1
 810be08:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 810be0a:	bf00      	nop
 810be0c:	371c      	adds	r7, #28
 810be0e:	46bd      	mov	sp, r7
 810be10:	f85d 7b04 	ldr.w	r7, [sp], #4
 810be14:	4770      	bx	lr
 810be16:	bf00      	nop
 810be18:	03ff63ff 	.word	0x03ff63ff

0810be1c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 810be1c:	b480      	push	{r7}
 810be1e:	b083      	sub	sp, #12
 810be20:	af00      	add	r7, sp, #0
 810be22:	6078      	str	r0, [r7, #4]
 810be24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810be26:	687b      	ldr	r3, [r7, #4]
 810be28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810be2c:	b2db      	uxtb	r3, r3
 810be2e:	2b20      	cmp	r3, #32
 810be30:	d138      	bne.n	810bea4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810be32:	687b      	ldr	r3, [r7, #4]
 810be34:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 810be38:	2b01      	cmp	r3, #1
 810be3a:	d101      	bne.n	810be40 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 810be3c:	2302      	movs	r3, #2
 810be3e:	e032      	b.n	810bea6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 810be40:	687b      	ldr	r3, [r7, #4]
 810be42:	2201      	movs	r2, #1
 810be44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 810be48:	687b      	ldr	r3, [r7, #4]
 810be4a:	2224      	movs	r2, #36	@ 0x24
 810be4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810be50:	687b      	ldr	r3, [r7, #4]
 810be52:	681b      	ldr	r3, [r3, #0]
 810be54:	681a      	ldr	r2, [r3, #0]
 810be56:	687b      	ldr	r3, [r7, #4]
 810be58:	681b      	ldr	r3, [r3, #0]
 810be5a:	f022 0201 	bic.w	r2, r2, #1
 810be5e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 810be60:	687b      	ldr	r3, [r7, #4]
 810be62:	681b      	ldr	r3, [r3, #0]
 810be64:	681a      	ldr	r2, [r3, #0]
 810be66:	687b      	ldr	r3, [r7, #4]
 810be68:	681b      	ldr	r3, [r3, #0]
 810be6a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 810be6e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 810be70:	687b      	ldr	r3, [r7, #4]
 810be72:	681b      	ldr	r3, [r3, #0]
 810be74:	6819      	ldr	r1, [r3, #0]
 810be76:	687b      	ldr	r3, [r7, #4]
 810be78:	681b      	ldr	r3, [r3, #0]
 810be7a:	683a      	ldr	r2, [r7, #0]
 810be7c:	430a      	orrs	r2, r1
 810be7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 810be80:	687b      	ldr	r3, [r7, #4]
 810be82:	681b      	ldr	r3, [r3, #0]
 810be84:	681a      	ldr	r2, [r3, #0]
 810be86:	687b      	ldr	r3, [r7, #4]
 810be88:	681b      	ldr	r3, [r3, #0]
 810be8a:	f042 0201 	orr.w	r2, r2, #1
 810be8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 810be90:	687b      	ldr	r3, [r7, #4]
 810be92:	2220      	movs	r2, #32
 810be94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810be98:	687b      	ldr	r3, [r7, #4]
 810be9a:	2200      	movs	r2, #0
 810be9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 810bea0:	2300      	movs	r3, #0
 810bea2:	e000      	b.n	810bea6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 810bea4:	2302      	movs	r3, #2
  }
}
 810bea6:	4618      	mov	r0, r3
 810bea8:	370c      	adds	r7, #12
 810beaa:	46bd      	mov	sp, r7
 810beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 810beb0:	4770      	bx	lr

0810beb2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 810beb2:	b480      	push	{r7}
 810beb4:	b085      	sub	sp, #20
 810beb6:	af00      	add	r7, sp, #0
 810beb8:	6078      	str	r0, [r7, #4]
 810beba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810bebc:	687b      	ldr	r3, [r7, #4]
 810bebe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810bec2:	b2db      	uxtb	r3, r3
 810bec4:	2b20      	cmp	r3, #32
 810bec6:	d139      	bne.n	810bf3c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810bec8:	687b      	ldr	r3, [r7, #4]
 810beca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 810bece:	2b01      	cmp	r3, #1
 810bed0:	d101      	bne.n	810bed6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 810bed2:	2302      	movs	r3, #2
 810bed4:	e033      	b.n	810bf3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 810bed6:	687b      	ldr	r3, [r7, #4]
 810bed8:	2201      	movs	r2, #1
 810beda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 810bede:	687b      	ldr	r3, [r7, #4]
 810bee0:	2224      	movs	r2, #36	@ 0x24
 810bee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810bee6:	687b      	ldr	r3, [r7, #4]
 810bee8:	681b      	ldr	r3, [r3, #0]
 810beea:	681a      	ldr	r2, [r3, #0]
 810beec:	687b      	ldr	r3, [r7, #4]
 810beee:	681b      	ldr	r3, [r3, #0]
 810bef0:	f022 0201 	bic.w	r2, r2, #1
 810bef4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 810bef6:	687b      	ldr	r3, [r7, #4]
 810bef8:	681b      	ldr	r3, [r3, #0]
 810befa:	681b      	ldr	r3, [r3, #0]
 810befc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 810befe:	68fb      	ldr	r3, [r7, #12]
 810bf00:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 810bf04:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 810bf06:	683b      	ldr	r3, [r7, #0]
 810bf08:	021b      	lsls	r3, r3, #8
 810bf0a:	68fa      	ldr	r2, [r7, #12]
 810bf0c:	4313      	orrs	r3, r2
 810bf0e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 810bf10:	687b      	ldr	r3, [r7, #4]
 810bf12:	681b      	ldr	r3, [r3, #0]
 810bf14:	68fa      	ldr	r2, [r7, #12]
 810bf16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 810bf18:	687b      	ldr	r3, [r7, #4]
 810bf1a:	681b      	ldr	r3, [r3, #0]
 810bf1c:	681a      	ldr	r2, [r3, #0]
 810bf1e:	687b      	ldr	r3, [r7, #4]
 810bf20:	681b      	ldr	r3, [r3, #0]
 810bf22:	f042 0201 	orr.w	r2, r2, #1
 810bf26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 810bf28:	687b      	ldr	r3, [r7, #4]
 810bf2a:	2220      	movs	r2, #32
 810bf2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810bf30:	687b      	ldr	r3, [r7, #4]
 810bf32:	2200      	movs	r2, #0
 810bf34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 810bf38:	2300      	movs	r3, #0
 810bf3a:	e000      	b.n	810bf3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 810bf3c:	2302      	movs	r3, #2
  }
}
 810bf3e:	4618      	mov	r0, r3
 810bf40:	3714      	adds	r7, #20
 810bf42:	46bd      	mov	sp, r7
 810bf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bf48:	4770      	bx	lr
	...

0810bf4c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 810bf4c:	b580      	push	{r7, lr}
 810bf4e:	b084      	sub	sp, #16
 810bf50:	af00      	add	r7, sp, #0
 810bf52:	60f8      	str	r0, [r7, #12]
 810bf54:	460b      	mov	r3, r1
 810bf56:	607a      	str	r2, [r7, #4]
 810bf58:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810bf5a:	4b37      	ldr	r3, [pc, #220]	@ (810c038 <HAL_PWREx_EnterSTOPMode+0xec>)
 810bf5c:	681b      	ldr	r3, [r3, #0]
 810bf5e:	f023 0201 	bic.w	r2, r3, #1
 810bf62:	4935      	ldr	r1, [pc, #212]	@ (810c038 <HAL_PWREx_EnterSTOPMode+0xec>)
 810bf64:	68fb      	ldr	r3, [r7, #12]
 810bf66:	4313      	orrs	r3, r2
 810bf68:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810bf6a:	687b      	ldr	r3, [r7, #4]
 810bf6c:	2b00      	cmp	r3, #0
 810bf6e:	d123      	bne.n	810bfb8 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 810bf70:	f7fd fa46 	bl	8109400 <HAL_GetCurrentCPUID>
 810bf74:	4603      	mov	r3, r0
 810bf76:	2b03      	cmp	r3, #3
 810bf78:	d158      	bne.n	810c02c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810bf7a:	4b2f      	ldr	r3, [pc, #188]	@ (810c038 <HAL_PWREx_EnterSTOPMode+0xec>)
 810bf7c:	691b      	ldr	r3, [r3, #16]
 810bf7e:	4a2e      	ldr	r2, [pc, #184]	@ (810c038 <HAL_PWREx_EnterSTOPMode+0xec>)
 810bf80:	f023 0301 	bic.w	r3, r3, #1
 810bf84:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810bf86:	4b2d      	ldr	r3, [pc, #180]	@ (810c03c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810bf88:	691b      	ldr	r3, [r3, #16]
 810bf8a:	4a2c      	ldr	r2, [pc, #176]	@ (810c03c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810bf8c:	f043 0304 	orr.w	r3, r3, #4
 810bf90:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810bf92:	f3bf 8f4f 	dsb	sy
}
 810bf96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810bf98:	f3bf 8f6f 	isb	sy
}
 810bf9c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810bf9e:	7afb      	ldrb	r3, [r7, #11]
 810bfa0:	2b01      	cmp	r3, #1
 810bfa2:	d101      	bne.n	810bfa8 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810bfa4:	bf30      	wfi
 810bfa6:	e000      	b.n	810bfaa <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810bfa8:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810bfaa:	4b24      	ldr	r3, [pc, #144]	@ (810c03c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810bfac:	691b      	ldr	r3, [r3, #16]
 810bfae:	4a23      	ldr	r2, [pc, #140]	@ (810c03c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810bfb0:	f023 0304 	bic.w	r3, r3, #4
 810bfb4:	6113      	str	r3, [r2, #16]
 810bfb6:	e03c      	b.n	810c032 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 810bfb8:	687b      	ldr	r3, [r7, #4]
 810bfba:	2b01      	cmp	r3, #1
 810bfbc:	d123      	bne.n	810c006 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810bfbe:	f7fd fa1f 	bl	8109400 <HAL_GetCurrentCPUID>
 810bfc2:	4603      	mov	r3, r0
 810bfc4:	2b01      	cmp	r3, #1
 810bfc6:	d133      	bne.n	810c030 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 810bfc8:	4b1b      	ldr	r3, [pc, #108]	@ (810c038 <HAL_PWREx_EnterSTOPMode+0xec>)
 810bfca:	695b      	ldr	r3, [r3, #20]
 810bfcc:	4a1a      	ldr	r2, [pc, #104]	@ (810c038 <HAL_PWREx_EnterSTOPMode+0xec>)
 810bfce:	f023 0302 	bic.w	r3, r3, #2
 810bfd2:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810bfd4:	4b19      	ldr	r3, [pc, #100]	@ (810c03c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810bfd6:	691b      	ldr	r3, [r3, #16]
 810bfd8:	4a18      	ldr	r2, [pc, #96]	@ (810c03c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810bfda:	f043 0304 	orr.w	r3, r3, #4
 810bfde:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810bfe0:	f3bf 8f4f 	dsb	sy
}
 810bfe4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810bfe6:	f3bf 8f6f 	isb	sy
}
 810bfea:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810bfec:	7afb      	ldrb	r3, [r7, #11]
 810bfee:	2b01      	cmp	r3, #1
 810bff0:	d101      	bne.n	810bff6 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810bff2:	bf30      	wfi
 810bff4:	e000      	b.n	810bff8 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810bff6:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810bff8:	4b10      	ldr	r3, [pc, #64]	@ (810c03c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810bffa:	691b      	ldr	r3, [r3, #16]
 810bffc:	4a0f      	ldr	r2, [pc, #60]	@ (810c03c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810bffe:	f023 0304 	bic.w	r3, r3, #4
 810c002:	6113      	str	r3, [r2, #16]
 810c004:	e015      	b.n	810c032 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810c006:	f7fd f9fb 	bl	8109400 <HAL_GetCurrentCPUID>
 810c00a:	4603      	mov	r3, r0
 810c00c:	2b03      	cmp	r3, #3
 810c00e:	d106      	bne.n	810c01e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 810c010:	4b09      	ldr	r3, [pc, #36]	@ (810c038 <HAL_PWREx_EnterSTOPMode+0xec>)
 810c012:	691b      	ldr	r3, [r3, #16]
 810c014:	4a08      	ldr	r2, [pc, #32]	@ (810c038 <HAL_PWREx_EnterSTOPMode+0xec>)
 810c016:	f023 0304 	bic.w	r3, r3, #4
 810c01a:	6113      	str	r3, [r2, #16]
 810c01c:	e009      	b.n	810c032 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810c01e:	4b06      	ldr	r3, [pc, #24]	@ (810c038 <HAL_PWREx_EnterSTOPMode+0xec>)
 810c020:	695b      	ldr	r3, [r3, #20]
 810c022:	4a05      	ldr	r2, [pc, #20]	@ (810c038 <HAL_PWREx_EnterSTOPMode+0xec>)
 810c024:	f023 0304 	bic.w	r3, r3, #4
 810c028:	6153      	str	r3, [r2, #20]
 810c02a:	e002      	b.n	810c032 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810c02c:	bf00      	nop
 810c02e:	e000      	b.n	810c032 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810c030:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810c032:	3710      	adds	r7, #16
 810c034:	46bd      	mov	sp, r7
 810c036:	bd80      	pop	{r7, pc}
 810c038:	58024800 	.word	0x58024800
 810c03c:	e000ed00 	.word	0xe000ed00

0810c040 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 810c040:	b580      	push	{r7, lr}
 810c042:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810c044:	f7fd f9dc 	bl	8109400 <HAL_GetCurrentCPUID>
 810c048:	4603      	mov	r3, r0
 810c04a:	2b03      	cmp	r3, #3
 810c04c:	d101      	bne.n	810c052 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810c04e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 810c050:	e001      	b.n	810c056 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810c052:	bf40      	sev
    __WFE ();
 810c054:	bf20      	wfe
}
 810c056:	bf00      	nop
 810c058:	bd80      	pop	{r7, pc}
	...

0810c05c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 810c05c:	b480      	push	{r7}
 810c05e:	b089      	sub	sp, #36	@ 0x24
 810c060:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810c062:	4bb3      	ldr	r3, [pc, #716]	@ (810c330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810c064:	691b      	ldr	r3, [r3, #16]
 810c066:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810c06a:	2b18      	cmp	r3, #24
 810c06c:	f200 8155 	bhi.w	810c31a <HAL_RCC_GetSysClockFreq+0x2be>
 810c070:	a201      	add	r2, pc, #4	@ (adr r2, 810c078 <HAL_RCC_GetSysClockFreq+0x1c>)
 810c072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c076:	bf00      	nop
 810c078:	0810c0dd 	.word	0x0810c0dd
 810c07c:	0810c31b 	.word	0x0810c31b
 810c080:	0810c31b 	.word	0x0810c31b
 810c084:	0810c31b 	.word	0x0810c31b
 810c088:	0810c31b 	.word	0x0810c31b
 810c08c:	0810c31b 	.word	0x0810c31b
 810c090:	0810c31b 	.word	0x0810c31b
 810c094:	0810c31b 	.word	0x0810c31b
 810c098:	0810c103 	.word	0x0810c103
 810c09c:	0810c31b 	.word	0x0810c31b
 810c0a0:	0810c31b 	.word	0x0810c31b
 810c0a4:	0810c31b 	.word	0x0810c31b
 810c0a8:	0810c31b 	.word	0x0810c31b
 810c0ac:	0810c31b 	.word	0x0810c31b
 810c0b0:	0810c31b 	.word	0x0810c31b
 810c0b4:	0810c31b 	.word	0x0810c31b
 810c0b8:	0810c109 	.word	0x0810c109
 810c0bc:	0810c31b 	.word	0x0810c31b
 810c0c0:	0810c31b 	.word	0x0810c31b
 810c0c4:	0810c31b 	.word	0x0810c31b
 810c0c8:	0810c31b 	.word	0x0810c31b
 810c0cc:	0810c31b 	.word	0x0810c31b
 810c0d0:	0810c31b 	.word	0x0810c31b
 810c0d4:	0810c31b 	.word	0x0810c31b
 810c0d8:	0810c10f 	.word	0x0810c10f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810c0dc:	4b94      	ldr	r3, [pc, #592]	@ (810c330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810c0de:	681b      	ldr	r3, [r3, #0]
 810c0e0:	f003 0320 	and.w	r3, r3, #32
 810c0e4:	2b00      	cmp	r3, #0
 810c0e6:	d009      	beq.n	810c0fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810c0e8:	4b91      	ldr	r3, [pc, #580]	@ (810c330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810c0ea:	681b      	ldr	r3, [r3, #0]
 810c0ec:	08db      	lsrs	r3, r3, #3
 810c0ee:	f003 0303 	and.w	r3, r3, #3
 810c0f2:	4a90      	ldr	r2, [pc, #576]	@ (810c334 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810c0f4:	fa22 f303 	lsr.w	r3, r2, r3
 810c0f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 810c0fa:	e111      	b.n	810c320 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810c0fc:	4b8d      	ldr	r3, [pc, #564]	@ (810c334 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810c0fe:	61bb      	str	r3, [r7, #24]
      break;
 810c100:	e10e      	b.n	810c320 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 810c102:	4b8d      	ldr	r3, [pc, #564]	@ (810c338 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810c104:	61bb      	str	r3, [r7, #24]
      break;
 810c106:	e10b      	b.n	810c320 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 810c108:	4b8c      	ldr	r3, [pc, #560]	@ (810c33c <HAL_RCC_GetSysClockFreq+0x2e0>)
 810c10a:	61bb      	str	r3, [r7, #24]
      break;
 810c10c:	e108      	b.n	810c320 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810c10e:	4b88      	ldr	r3, [pc, #544]	@ (810c330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810c110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c112:	f003 0303 	and.w	r3, r3, #3
 810c116:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 810c118:	4b85      	ldr	r3, [pc, #532]	@ (810c330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810c11a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810c11c:	091b      	lsrs	r3, r3, #4
 810c11e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810c122:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 810c124:	4b82      	ldr	r3, [pc, #520]	@ (810c330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810c126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c128:	f003 0301 	and.w	r3, r3, #1
 810c12c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810c12e:	4b80      	ldr	r3, [pc, #512]	@ (810c330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810c130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810c132:	08db      	lsrs	r3, r3, #3
 810c134:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810c138:	68fa      	ldr	r2, [r7, #12]
 810c13a:	fb02 f303 	mul.w	r3, r2, r3
 810c13e:	ee07 3a90 	vmov	s15, r3
 810c142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c146:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 810c14a:	693b      	ldr	r3, [r7, #16]
 810c14c:	2b00      	cmp	r3, #0
 810c14e:	f000 80e1 	beq.w	810c314 <HAL_RCC_GetSysClockFreq+0x2b8>
 810c152:	697b      	ldr	r3, [r7, #20]
 810c154:	2b02      	cmp	r3, #2
 810c156:	f000 8083 	beq.w	810c260 <HAL_RCC_GetSysClockFreq+0x204>
 810c15a:	697b      	ldr	r3, [r7, #20]
 810c15c:	2b02      	cmp	r3, #2
 810c15e:	f200 80a1 	bhi.w	810c2a4 <HAL_RCC_GetSysClockFreq+0x248>
 810c162:	697b      	ldr	r3, [r7, #20]
 810c164:	2b00      	cmp	r3, #0
 810c166:	d003      	beq.n	810c170 <HAL_RCC_GetSysClockFreq+0x114>
 810c168:	697b      	ldr	r3, [r7, #20]
 810c16a:	2b01      	cmp	r3, #1
 810c16c:	d056      	beq.n	810c21c <HAL_RCC_GetSysClockFreq+0x1c0>
 810c16e:	e099      	b.n	810c2a4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810c170:	4b6f      	ldr	r3, [pc, #444]	@ (810c330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810c172:	681b      	ldr	r3, [r3, #0]
 810c174:	f003 0320 	and.w	r3, r3, #32
 810c178:	2b00      	cmp	r3, #0
 810c17a:	d02d      	beq.n	810c1d8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810c17c:	4b6c      	ldr	r3, [pc, #432]	@ (810c330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810c17e:	681b      	ldr	r3, [r3, #0]
 810c180:	08db      	lsrs	r3, r3, #3
 810c182:	f003 0303 	and.w	r3, r3, #3
 810c186:	4a6b      	ldr	r2, [pc, #428]	@ (810c334 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810c188:	fa22 f303 	lsr.w	r3, r2, r3
 810c18c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810c18e:	687b      	ldr	r3, [r7, #4]
 810c190:	ee07 3a90 	vmov	s15, r3
 810c194:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c198:	693b      	ldr	r3, [r7, #16]
 810c19a:	ee07 3a90 	vmov	s15, r3
 810c19e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c1a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c1a6:	4b62      	ldr	r3, [pc, #392]	@ (810c330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810c1a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810c1aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c1ae:	ee07 3a90 	vmov	s15, r3
 810c1b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c1b6:	ed97 6a02 	vldr	s12, [r7, #8]
 810c1ba:	eddf 5a61 	vldr	s11, [pc, #388]	@ 810c340 <HAL_RCC_GetSysClockFreq+0x2e4>
 810c1be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c1c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c1c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c1ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c1ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c1d2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 810c1d6:	e087      	b.n	810c2e8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810c1d8:	693b      	ldr	r3, [r7, #16]
 810c1da:	ee07 3a90 	vmov	s15, r3
 810c1de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c1e2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 810c344 <HAL_RCC_GetSysClockFreq+0x2e8>
 810c1e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c1ea:	4b51      	ldr	r3, [pc, #324]	@ (810c330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810c1ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810c1ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c1f2:	ee07 3a90 	vmov	s15, r3
 810c1f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c1fa:	ed97 6a02 	vldr	s12, [r7, #8]
 810c1fe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 810c340 <HAL_RCC_GetSysClockFreq+0x2e4>
 810c202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c20a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c20e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c212:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c216:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810c21a:	e065      	b.n	810c2e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810c21c:	693b      	ldr	r3, [r7, #16]
 810c21e:	ee07 3a90 	vmov	s15, r3
 810c222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c226:	eddf 6a48 	vldr	s13, [pc, #288]	@ 810c348 <HAL_RCC_GetSysClockFreq+0x2ec>
 810c22a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c22e:	4b40      	ldr	r3, [pc, #256]	@ (810c330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810c230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810c232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c236:	ee07 3a90 	vmov	s15, r3
 810c23a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c23e:	ed97 6a02 	vldr	s12, [r7, #8]
 810c242:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 810c340 <HAL_RCC_GetSysClockFreq+0x2e4>
 810c246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c24a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c24e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c256:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c25a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810c25e:	e043      	b.n	810c2e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810c260:	693b      	ldr	r3, [r7, #16]
 810c262:	ee07 3a90 	vmov	s15, r3
 810c266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c26a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 810c34c <HAL_RCC_GetSysClockFreq+0x2f0>
 810c26e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c272:	4b2f      	ldr	r3, [pc, #188]	@ (810c330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810c274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810c276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c27a:	ee07 3a90 	vmov	s15, r3
 810c27e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c282:	ed97 6a02 	vldr	s12, [r7, #8]
 810c286:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 810c340 <HAL_RCC_GetSysClockFreq+0x2e4>
 810c28a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c28e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c292:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c29a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c29e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810c2a2:	e021      	b.n	810c2e8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810c2a4:	693b      	ldr	r3, [r7, #16]
 810c2a6:	ee07 3a90 	vmov	s15, r3
 810c2aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c2ae:	eddf 6a26 	vldr	s13, [pc, #152]	@ 810c348 <HAL_RCC_GetSysClockFreq+0x2ec>
 810c2b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c2b6:	4b1e      	ldr	r3, [pc, #120]	@ (810c330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810c2b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810c2ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c2be:	ee07 3a90 	vmov	s15, r3
 810c2c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c2c6:	ed97 6a02 	vldr	s12, [r7, #8]
 810c2ca:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 810c340 <HAL_RCC_GetSysClockFreq+0x2e4>
 810c2ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c2d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c2d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810c2da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c2de:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c2e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810c2e6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 810c2e8:	4b11      	ldr	r3, [pc, #68]	@ (810c330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810c2ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810c2ec:	0a5b      	lsrs	r3, r3, #9
 810c2ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810c2f2:	3301      	adds	r3, #1
 810c2f4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 810c2f6:	683b      	ldr	r3, [r7, #0]
 810c2f8:	ee07 3a90 	vmov	s15, r3
 810c2fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810c300:	edd7 6a07 	vldr	s13, [r7, #28]
 810c304:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810c308:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810c30c:	ee17 3a90 	vmov	r3, s15
 810c310:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 810c312:	e005      	b.n	810c320 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 810c314:	2300      	movs	r3, #0
 810c316:	61bb      	str	r3, [r7, #24]
      break;
 810c318:	e002      	b.n	810c320 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810c31a:	4b07      	ldr	r3, [pc, #28]	@ (810c338 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810c31c:	61bb      	str	r3, [r7, #24]
      break;
 810c31e:	bf00      	nop
  }

  return sysclockfreq;
 810c320:	69bb      	ldr	r3, [r7, #24]
}
 810c322:	4618      	mov	r0, r3
 810c324:	3724      	adds	r7, #36	@ 0x24
 810c326:	46bd      	mov	sp, r7
 810c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c32c:	4770      	bx	lr
 810c32e:	bf00      	nop
 810c330:	58024400 	.word	0x58024400
 810c334:	03d09000 	.word	0x03d09000
 810c338:	003d0900 	.word	0x003d0900
 810c33c:	017d7840 	.word	0x017d7840
 810c340:	46000000 	.word	0x46000000
 810c344:	4c742400 	.word	0x4c742400
 810c348:	4a742400 	.word	0x4a742400
 810c34c:	4bbebc20 	.word	0x4bbebc20

0810c350 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 810c350:	b580      	push	{r7, lr}
 810c352:	b082      	sub	sp, #8
 810c354:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810c356:	f7ff fe81 	bl	810c05c <HAL_RCC_GetSysClockFreq>
 810c35a:	4602      	mov	r2, r0
 810c35c:	4b11      	ldr	r3, [pc, #68]	@ (810c3a4 <HAL_RCC_GetHCLKFreq+0x54>)
 810c35e:	699b      	ldr	r3, [r3, #24]
 810c360:	0a1b      	lsrs	r3, r3, #8
 810c362:	f003 030f 	and.w	r3, r3, #15
 810c366:	4910      	ldr	r1, [pc, #64]	@ (810c3a8 <HAL_RCC_GetHCLKFreq+0x58>)
 810c368:	5ccb      	ldrb	r3, [r1, r3]
 810c36a:	f003 031f 	and.w	r3, r3, #31
 810c36e:	fa22 f303 	lsr.w	r3, r2, r3
 810c372:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810c374:	4b0b      	ldr	r3, [pc, #44]	@ (810c3a4 <HAL_RCC_GetHCLKFreq+0x54>)
 810c376:	699b      	ldr	r3, [r3, #24]
 810c378:	f003 030f 	and.w	r3, r3, #15
 810c37c:	4a0a      	ldr	r2, [pc, #40]	@ (810c3a8 <HAL_RCC_GetHCLKFreq+0x58>)
 810c37e:	5cd3      	ldrb	r3, [r2, r3]
 810c380:	f003 031f 	and.w	r3, r3, #31
 810c384:	687a      	ldr	r2, [r7, #4]
 810c386:	fa22 f303 	lsr.w	r3, r2, r3
 810c38a:	4a08      	ldr	r2, [pc, #32]	@ (810c3ac <HAL_RCC_GetHCLKFreq+0x5c>)
 810c38c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810c38e:	4b07      	ldr	r3, [pc, #28]	@ (810c3ac <HAL_RCC_GetHCLKFreq+0x5c>)
 810c390:	681b      	ldr	r3, [r3, #0]
 810c392:	4a07      	ldr	r2, [pc, #28]	@ (810c3b0 <HAL_RCC_GetHCLKFreq+0x60>)
 810c394:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810c396:	4b05      	ldr	r3, [pc, #20]	@ (810c3ac <HAL_RCC_GetHCLKFreq+0x5c>)
 810c398:	681b      	ldr	r3, [r3, #0]
}
 810c39a:	4618      	mov	r0, r3
 810c39c:	3708      	adds	r7, #8
 810c39e:	46bd      	mov	sp, r7
 810c3a0:	bd80      	pop	{r7, pc}
 810c3a2:	bf00      	nop
 810c3a4:	58024400 	.word	0x58024400
 810c3a8:	08128970 	.word	0x08128970
 810c3ac:	10000018 	.word	0x10000018
 810c3b0:	10000014 	.word	0x10000014

0810c3b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 810c3b4:	b580      	push	{r7, lr}
 810c3b6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 810c3b8:	f7ff ffca 	bl	810c350 <HAL_RCC_GetHCLKFreq>
 810c3bc:	4602      	mov	r2, r0
 810c3be:	4b06      	ldr	r3, [pc, #24]	@ (810c3d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 810c3c0:	69db      	ldr	r3, [r3, #28]
 810c3c2:	091b      	lsrs	r3, r3, #4
 810c3c4:	f003 0307 	and.w	r3, r3, #7
 810c3c8:	4904      	ldr	r1, [pc, #16]	@ (810c3dc <HAL_RCC_GetPCLK1Freq+0x28>)
 810c3ca:	5ccb      	ldrb	r3, [r1, r3]
 810c3cc:	f003 031f 	and.w	r3, r3, #31
 810c3d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 810c3d4:	4618      	mov	r0, r3
 810c3d6:	bd80      	pop	{r7, pc}
 810c3d8:	58024400 	.word	0x58024400
 810c3dc:	08128970 	.word	0x08128970

0810c3e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 810c3e0:	b580      	push	{r7, lr}
 810c3e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 810c3e4:	f7ff ffb4 	bl	810c350 <HAL_RCC_GetHCLKFreq>
 810c3e8:	4602      	mov	r2, r0
 810c3ea:	4b06      	ldr	r3, [pc, #24]	@ (810c404 <HAL_RCC_GetPCLK2Freq+0x24>)
 810c3ec:	69db      	ldr	r3, [r3, #28]
 810c3ee:	0a1b      	lsrs	r3, r3, #8
 810c3f0:	f003 0307 	and.w	r3, r3, #7
 810c3f4:	4904      	ldr	r1, [pc, #16]	@ (810c408 <HAL_RCC_GetPCLK2Freq+0x28>)
 810c3f6:	5ccb      	ldrb	r3, [r1, r3]
 810c3f8:	f003 031f 	and.w	r3, r3, #31
 810c3fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 810c400:	4618      	mov	r0, r3
 810c402:	bd80      	pop	{r7, pc}
 810c404:	58024400 	.word	0x58024400
 810c408:	08128970 	.word	0x08128970

0810c40c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 810c40c:	b480      	push	{r7}
 810c40e:	b083      	sub	sp, #12
 810c410:	af00      	add	r7, sp, #0
 810c412:	6078      	str	r0, [r7, #4]
 810c414:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 810c416:	687b      	ldr	r3, [r7, #4]
 810c418:	223f      	movs	r2, #63	@ 0x3f
 810c41a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 810c41c:	4b1a      	ldr	r3, [pc, #104]	@ (810c488 <HAL_RCC_GetClockConfig+0x7c>)
 810c41e:	691b      	ldr	r3, [r3, #16]
 810c420:	f003 0207 	and.w	r2, r3, #7
 810c424:	687b      	ldr	r3, [r7, #4]
 810c426:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 810c428:	4b17      	ldr	r3, [pc, #92]	@ (810c488 <HAL_RCC_GetClockConfig+0x7c>)
 810c42a:	699b      	ldr	r3, [r3, #24]
 810c42c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 810c430:	687b      	ldr	r3, [r7, #4]
 810c432:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 810c434:	4b14      	ldr	r3, [pc, #80]	@ (810c488 <HAL_RCC_GetClockConfig+0x7c>)
 810c436:	699b      	ldr	r3, [r3, #24]
 810c438:	f003 020f 	and.w	r2, r3, #15
 810c43c:	687b      	ldr	r3, [r7, #4]
 810c43e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 810c440:	4b11      	ldr	r3, [pc, #68]	@ (810c488 <HAL_RCC_GetClockConfig+0x7c>)
 810c442:	699b      	ldr	r3, [r3, #24]
 810c444:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 810c448:	687b      	ldr	r3, [r7, #4]
 810c44a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 810c44c:	4b0e      	ldr	r3, [pc, #56]	@ (810c488 <HAL_RCC_GetClockConfig+0x7c>)
 810c44e:	69db      	ldr	r3, [r3, #28]
 810c450:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 810c454:	687b      	ldr	r3, [r7, #4]
 810c456:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 810c458:	4b0b      	ldr	r3, [pc, #44]	@ (810c488 <HAL_RCC_GetClockConfig+0x7c>)
 810c45a:	69db      	ldr	r3, [r3, #28]
 810c45c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 810c460:	687b      	ldr	r3, [r7, #4]
 810c462:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 810c464:	4b08      	ldr	r3, [pc, #32]	@ (810c488 <HAL_RCC_GetClockConfig+0x7c>)
 810c466:	6a1b      	ldr	r3, [r3, #32]
 810c468:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 810c46c:	687b      	ldr	r3, [r7, #4]
 810c46e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 810c470:	4b06      	ldr	r3, [pc, #24]	@ (810c48c <HAL_RCC_GetClockConfig+0x80>)
 810c472:	681b      	ldr	r3, [r3, #0]
 810c474:	f003 020f 	and.w	r2, r3, #15
 810c478:	683b      	ldr	r3, [r7, #0]
 810c47a:	601a      	str	r2, [r3, #0]
}
 810c47c:	bf00      	nop
 810c47e:	370c      	adds	r7, #12
 810c480:	46bd      	mov	sp, r7
 810c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c486:	4770      	bx	lr
 810c488:	58024400 	.word	0x58024400
 810c48c:	52002000 	.word	0x52002000

0810c490 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 810c490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810c494:	b0cc      	sub	sp, #304	@ 0x130
 810c496:	af00      	add	r7, sp, #0
 810c498:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 810c49c:	2300      	movs	r3, #0
 810c49e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 810c4a2:	2300      	movs	r3, #0
 810c4a4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 810c4a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c4b0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 810c4b4:	2500      	movs	r5, #0
 810c4b6:	ea54 0305 	orrs.w	r3, r4, r5
 810c4ba:	d049      	beq.n	810c550 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 810c4bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c4c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810c4c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810c4c6:	d02f      	beq.n	810c528 <HAL_RCCEx_PeriphCLKConfig+0x98>
 810c4c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810c4cc:	d828      	bhi.n	810c520 <HAL_RCCEx_PeriphCLKConfig+0x90>
 810c4ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810c4d2:	d01a      	beq.n	810c50a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 810c4d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810c4d8:	d822      	bhi.n	810c520 <HAL_RCCEx_PeriphCLKConfig+0x90>
 810c4da:	2b00      	cmp	r3, #0
 810c4dc:	d003      	beq.n	810c4e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 810c4de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810c4e2:	d007      	beq.n	810c4f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 810c4e4:	e01c      	b.n	810c520 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810c4e6:	4bb8      	ldr	r3, [pc, #736]	@ (810c7c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810c4e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c4ea:	4ab7      	ldr	r2, [pc, #732]	@ (810c7c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810c4ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810c4f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810c4f2:	e01a      	b.n	810c52a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810c4f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c4f8:	3308      	adds	r3, #8
 810c4fa:	2102      	movs	r1, #2
 810c4fc:	4618      	mov	r0, r3
 810c4fe:	f001 fccf 	bl	810dea0 <RCCEx_PLL2_Config>
 810c502:	4603      	mov	r3, r0
 810c504:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810c508:	e00f      	b.n	810c52a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810c50a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c50e:	3328      	adds	r3, #40	@ 0x28
 810c510:	2102      	movs	r1, #2
 810c512:	4618      	mov	r0, r3
 810c514:	f001 fd76 	bl	810e004 <RCCEx_PLL3_Config>
 810c518:	4603      	mov	r3, r0
 810c51a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810c51e:	e004      	b.n	810c52a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810c520:	2301      	movs	r3, #1
 810c522:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810c526:	e000      	b.n	810c52a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 810c528:	bf00      	nop
    }

    if (ret == HAL_OK)
 810c52a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c52e:	2b00      	cmp	r3, #0
 810c530:	d10a      	bne.n	810c548 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 810c532:	4ba5      	ldr	r3, [pc, #660]	@ (810c7c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810c534:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810c536:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810c53a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c53e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810c540:	4aa1      	ldr	r2, [pc, #644]	@ (810c7c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810c542:	430b      	orrs	r3, r1
 810c544:	6513      	str	r3, [r2, #80]	@ 0x50
 810c546:	e003      	b.n	810c550 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810c548:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c54c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 810c550:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c554:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c558:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 810c55c:	f04f 0900 	mov.w	r9, #0
 810c560:	ea58 0309 	orrs.w	r3, r8, r9
 810c564:	d047      	beq.n	810c5f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 810c566:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c56a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810c56c:	2b04      	cmp	r3, #4
 810c56e:	d82a      	bhi.n	810c5c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 810c570:	a201      	add	r2, pc, #4	@ (adr r2, 810c578 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 810c572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c576:	bf00      	nop
 810c578:	0810c58d 	.word	0x0810c58d
 810c57c:	0810c59b 	.word	0x0810c59b
 810c580:	0810c5b1 	.word	0x0810c5b1
 810c584:	0810c5cf 	.word	0x0810c5cf
 810c588:	0810c5cf 	.word	0x0810c5cf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810c58c:	4b8e      	ldr	r3, [pc, #568]	@ (810c7c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810c58e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c590:	4a8d      	ldr	r2, [pc, #564]	@ (810c7c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810c592:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810c596:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810c598:	e01a      	b.n	810c5d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810c59a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c59e:	3308      	adds	r3, #8
 810c5a0:	2100      	movs	r1, #0
 810c5a2:	4618      	mov	r0, r3
 810c5a4:	f001 fc7c 	bl	810dea0 <RCCEx_PLL2_Config>
 810c5a8:	4603      	mov	r3, r0
 810c5aa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810c5ae:	e00f      	b.n	810c5d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810c5b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c5b4:	3328      	adds	r3, #40	@ 0x28
 810c5b6:	2100      	movs	r1, #0
 810c5b8:	4618      	mov	r0, r3
 810c5ba:	f001 fd23 	bl	810e004 <RCCEx_PLL3_Config>
 810c5be:	4603      	mov	r3, r0
 810c5c0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810c5c4:	e004      	b.n	810c5d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810c5c6:	2301      	movs	r3, #1
 810c5c8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810c5cc:	e000      	b.n	810c5d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 810c5ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 810c5d0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c5d4:	2b00      	cmp	r3, #0
 810c5d6:	d10a      	bne.n	810c5ee <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 810c5d8:	4b7b      	ldr	r3, [pc, #492]	@ (810c7c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810c5da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810c5dc:	f023 0107 	bic.w	r1, r3, #7
 810c5e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c5e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810c5e6:	4a78      	ldr	r2, [pc, #480]	@ (810c7c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810c5e8:	430b      	orrs	r3, r1
 810c5ea:	6513      	str	r3, [r2, #80]	@ 0x50
 810c5ec:	e003      	b.n	810c5f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810c5ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c5f2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 810c5f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c5fe:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 810c602:	f04f 0b00 	mov.w	fp, #0
 810c606:	ea5a 030b 	orrs.w	r3, sl, fp
 810c60a:	d04c      	beq.n	810c6a6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 810c60c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810c612:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810c616:	d030      	beq.n	810c67a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 810c618:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810c61c:	d829      	bhi.n	810c672 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810c61e:	2bc0      	cmp	r3, #192	@ 0xc0
 810c620:	d02d      	beq.n	810c67e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 810c622:	2bc0      	cmp	r3, #192	@ 0xc0
 810c624:	d825      	bhi.n	810c672 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810c626:	2b80      	cmp	r3, #128	@ 0x80
 810c628:	d018      	beq.n	810c65c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 810c62a:	2b80      	cmp	r3, #128	@ 0x80
 810c62c:	d821      	bhi.n	810c672 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810c62e:	2b00      	cmp	r3, #0
 810c630:	d002      	beq.n	810c638 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 810c632:	2b40      	cmp	r3, #64	@ 0x40
 810c634:	d007      	beq.n	810c646 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 810c636:	e01c      	b.n	810c672 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810c638:	4b63      	ldr	r3, [pc, #396]	@ (810c7c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810c63a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c63c:	4a62      	ldr	r2, [pc, #392]	@ (810c7c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810c63e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810c642:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810c644:	e01c      	b.n	810c680 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810c646:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c64a:	3308      	adds	r3, #8
 810c64c:	2100      	movs	r1, #0
 810c64e:	4618      	mov	r0, r3
 810c650:	f001 fc26 	bl	810dea0 <RCCEx_PLL2_Config>
 810c654:	4603      	mov	r3, r0
 810c656:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810c65a:	e011      	b.n	810c680 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810c65c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c660:	3328      	adds	r3, #40	@ 0x28
 810c662:	2100      	movs	r1, #0
 810c664:	4618      	mov	r0, r3
 810c666:	f001 fccd 	bl	810e004 <RCCEx_PLL3_Config>
 810c66a:	4603      	mov	r3, r0
 810c66c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810c670:	e006      	b.n	810c680 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810c672:	2301      	movs	r3, #1
 810c674:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810c678:	e002      	b.n	810c680 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810c67a:	bf00      	nop
 810c67c:	e000      	b.n	810c680 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810c67e:	bf00      	nop
    }

    if (ret == HAL_OK)
 810c680:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c684:	2b00      	cmp	r3, #0
 810c686:	d10a      	bne.n	810c69e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 810c688:	4b4f      	ldr	r3, [pc, #316]	@ (810c7c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810c68a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810c68c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 810c690:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c694:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810c696:	4a4c      	ldr	r2, [pc, #304]	@ (810c7c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810c698:	430b      	orrs	r3, r1
 810c69a:	6513      	str	r3, [r2, #80]	@ 0x50
 810c69c:	e003      	b.n	810c6a6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810c69e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c6a2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810c6a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c6ae:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 810c6b2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 810c6b6:	2300      	movs	r3, #0
 810c6b8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 810c6bc:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 810c6c0:	460b      	mov	r3, r1
 810c6c2:	4313      	orrs	r3, r2
 810c6c4:	d053      	beq.n	810c76e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 810c6c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c6ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810c6ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810c6d2:	d035      	beq.n	810c740 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 810c6d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810c6d8:	d82e      	bhi.n	810c738 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810c6da:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810c6de:	d031      	beq.n	810c744 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 810c6e0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810c6e4:	d828      	bhi.n	810c738 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810c6e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810c6ea:	d01a      	beq.n	810c722 <HAL_RCCEx_PeriphCLKConfig+0x292>
 810c6ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810c6f0:	d822      	bhi.n	810c738 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810c6f2:	2b00      	cmp	r3, #0
 810c6f4:	d003      	beq.n	810c6fe <HAL_RCCEx_PeriphCLKConfig+0x26e>
 810c6f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810c6fa:	d007      	beq.n	810c70c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 810c6fc:	e01c      	b.n	810c738 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810c6fe:	4b32      	ldr	r3, [pc, #200]	@ (810c7c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810c700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c702:	4a31      	ldr	r2, [pc, #196]	@ (810c7c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810c704:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810c708:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810c70a:	e01c      	b.n	810c746 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810c70c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c710:	3308      	adds	r3, #8
 810c712:	2100      	movs	r1, #0
 810c714:	4618      	mov	r0, r3
 810c716:	f001 fbc3 	bl	810dea0 <RCCEx_PLL2_Config>
 810c71a:	4603      	mov	r3, r0
 810c71c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810c720:	e011      	b.n	810c746 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810c722:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c726:	3328      	adds	r3, #40	@ 0x28
 810c728:	2100      	movs	r1, #0
 810c72a:	4618      	mov	r0, r3
 810c72c:	f001 fc6a 	bl	810e004 <RCCEx_PLL3_Config>
 810c730:	4603      	mov	r3, r0
 810c732:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810c736:	e006      	b.n	810c746 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810c738:	2301      	movs	r3, #1
 810c73a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810c73e:	e002      	b.n	810c746 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 810c740:	bf00      	nop
 810c742:	e000      	b.n	810c746 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 810c744:	bf00      	nop
    }

    if (ret == HAL_OK)
 810c746:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c74a:	2b00      	cmp	r3, #0
 810c74c:	d10b      	bne.n	810c766 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 810c74e:	4b1e      	ldr	r3, [pc, #120]	@ (810c7c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810c750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810c752:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 810c756:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c75a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810c75e:	4a1a      	ldr	r2, [pc, #104]	@ (810c7c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810c760:	430b      	orrs	r3, r1
 810c762:	6593      	str	r3, [r2, #88]	@ 0x58
 810c764:	e003      	b.n	810c76e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810c766:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c76a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810c76e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c772:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c776:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 810c77a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 810c77e:	2300      	movs	r3, #0
 810c780:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 810c784:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 810c788:	460b      	mov	r3, r1
 810c78a:	4313      	orrs	r3, r2
 810c78c:	d056      	beq.n	810c83c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 810c78e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c792:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 810c796:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810c79a:	d038      	beq.n	810c80e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 810c79c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810c7a0:	d831      	bhi.n	810c806 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810c7a2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810c7a6:	d034      	beq.n	810c812 <HAL_RCCEx_PeriphCLKConfig+0x382>
 810c7a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810c7ac:	d82b      	bhi.n	810c806 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810c7ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810c7b2:	d01d      	beq.n	810c7f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 810c7b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810c7b8:	d825      	bhi.n	810c806 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810c7ba:	2b00      	cmp	r3, #0
 810c7bc:	d006      	beq.n	810c7cc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 810c7be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810c7c2:	d00a      	beq.n	810c7da <HAL_RCCEx_PeriphCLKConfig+0x34a>
 810c7c4:	e01f      	b.n	810c806 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810c7c6:	bf00      	nop
 810c7c8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810c7cc:	4ba2      	ldr	r3, [pc, #648]	@ (810ca58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810c7ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c7d0:	4aa1      	ldr	r2, [pc, #644]	@ (810ca58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810c7d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810c7d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810c7d8:	e01c      	b.n	810c814 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810c7da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c7de:	3308      	adds	r3, #8
 810c7e0:	2100      	movs	r1, #0
 810c7e2:	4618      	mov	r0, r3
 810c7e4:	f001 fb5c 	bl	810dea0 <RCCEx_PLL2_Config>
 810c7e8:	4603      	mov	r3, r0
 810c7ea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810c7ee:	e011      	b.n	810c814 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810c7f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c7f4:	3328      	adds	r3, #40	@ 0x28
 810c7f6:	2100      	movs	r1, #0
 810c7f8:	4618      	mov	r0, r3
 810c7fa:	f001 fc03 	bl	810e004 <RCCEx_PLL3_Config>
 810c7fe:	4603      	mov	r3, r0
 810c800:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810c804:	e006      	b.n	810c814 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810c806:	2301      	movs	r3, #1
 810c808:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810c80c:	e002      	b.n	810c814 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810c80e:	bf00      	nop
 810c810:	e000      	b.n	810c814 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810c812:	bf00      	nop
    }

    if (ret == HAL_OK)
 810c814:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c818:	2b00      	cmp	r3, #0
 810c81a:	d10b      	bne.n	810c834 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 810c81c:	4b8e      	ldr	r3, [pc, #568]	@ (810ca58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810c81e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810c820:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 810c824:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c828:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 810c82c:	4a8a      	ldr	r2, [pc, #552]	@ (810ca58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810c82e:	430b      	orrs	r3, r1
 810c830:	6593      	str	r3, [r2, #88]	@ 0x58
 810c832:	e003      	b.n	810c83c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810c834:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c838:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 810c83c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c840:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c844:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 810c848:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 810c84c:	2300      	movs	r3, #0
 810c84e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 810c852:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 810c856:	460b      	mov	r3, r1
 810c858:	4313      	orrs	r3, r2
 810c85a:	d03a      	beq.n	810c8d2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 810c85c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810c862:	2b30      	cmp	r3, #48	@ 0x30
 810c864:	d01f      	beq.n	810c8a6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 810c866:	2b30      	cmp	r3, #48	@ 0x30
 810c868:	d819      	bhi.n	810c89e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810c86a:	2b20      	cmp	r3, #32
 810c86c:	d00c      	beq.n	810c888 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 810c86e:	2b20      	cmp	r3, #32
 810c870:	d815      	bhi.n	810c89e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810c872:	2b00      	cmp	r3, #0
 810c874:	d019      	beq.n	810c8aa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 810c876:	2b10      	cmp	r3, #16
 810c878:	d111      	bne.n	810c89e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810c87a:	4b77      	ldr	r3, [pc, #476]	@ (810ca58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810c87c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c87e:	4a76      	ldr	r2, [pc, #472]	@ (810ca58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810c880:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810c884:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810c886:	e011      	b.n	810c8ac <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810c888:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c88c:	3308      	adds	r3, #8
 810c88e:	2102      	movs	r1, #2
 810c890:	4618      	mov	r0, r3
 810c892:	f001 fb05 	bl	810dea0 <RCCEx_PLL2_Config>
 810c896:	4603      	mov	r3, r0
 810c898:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810c89c:	e006      	b.n	810c8ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 810c89e:	2301      	movs	r3, #1
 810c8a0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810c8a4:	e002      	b.n	810c8ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810c8a6:	bf00      	nop
 810c8a8:	e000      	b.n	810c8ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810c8aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 810c8ac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c8b0:	2b00      	cmp	r3, #0
 810c8b2:	d10a      	bne.n	810c8ca <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 810c8b4:	4b68      	ldr	r3, [pc, #416]	@ (810ca58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810c8b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810c8b8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 810c8bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c8c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810c8c2:	4a65      	ldr	r2, [pc, #404]	@ (810ca58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810c8c4:	430b      	orrs	r3, r1
 810c8c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810c8c8:	e003      	b.n	810c8d2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810c8ca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c8ce:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810c8d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c8da:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 810c8de:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 810c8e2:	2300      	movs	r3, #0
 810c8e4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 810c8e8:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 810c8ec:	460b      	mov	r3, r1
 810c8ee:	4313      	orrs	r3, r2
 810c8f0:	d051      	beq.n	810c996 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 810c8f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c8f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810c8f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810c8fc:	d035      	beq.n	810c96a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 810c8fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810c902:	d82e      	bhi.n	810c962 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810c904:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810c908:	d031      	beq.n	810c96e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 810c90a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810c90e:	d828      	bhi.n	810c962 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810c910:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810c914:	d01a      	beq.n	810c94c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 810c916:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810c91a:	d822      	bhi.n	810c962 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810c91c:	2b00      	cmp	r3, #0
 810c91e:	d003      	beq.n	810c928 <HAL_RCCEx_PeriphCLKConfig+0x498>
 810c920:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810c924:	d007      	beq.n	810c936 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 810c926:	e01c      	b.n	810c962 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810c928:	4b4b      	ldr	r3, [pc, #300]	@ (810ca58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810c92a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c92c:	4a4a      	ldr	r2, [pc, #296]	@ (810ca58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810c92e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810c932:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810c934:	e01c      	b.n	810c970 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810c936:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c93a:	3308      	adds	r3, #8
 810c93c:	2100      	movs	r1, #0
 810c93e:	4618      	mov	r0, r3
 810c940:	f001 faae 	bl	810dea0 <RCCEx_PLL2_Config>
 810c944:	4603      	mov	r3, r0
 810c946:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810c94a:	e011      	b.n	810c970 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810c94c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c950:	3328      	adds	r3, #40	@ 0x28
 810c952:	2100      	movs	r1, #0
 810c954:	4618      	mov	r0, r3
 810c956:	f001 fb55 	bl	810e004 <RCCEx_PLL3_Config>
 810c95a:	4603      	mov	r3, r0
 810c95c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810c960:	e006      	b.n	810c970 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810c962:	2301      	movs	r3, #1
 810c964:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810c968:	e002      	b.n	810c970 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810c96a:	bf00      	nop
 810c96c:	e000      	b.n	810c970 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810c96e:	bf00      	nop
    }

    if (ret == HAL_OK)
 810c970:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c974:	2b00      	cmp	r3, #0
 810c976:	d10a      	bne.n	810c98e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810c978:	4b37      	ldr	r3, [pc, #220]	@ (810ca58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810c97a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810c97c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 810c980:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c984:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810c986:	4a34      	ldr	r2, [pc, #208]	@ (810ca58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810c988:	430b      	orrs	r3, r1
 810c98a:	6513      	str	r3, [r2, #80]	@ 0x50
 810c98c:	e003      	b.n	810c996 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810c98e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810c992:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810c996:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c99e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 810c9a2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 810c9a6:	2300      	movs	r3, #0
 810c9a8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 810c9ac:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 810c9b0:	460b      	mov	r3, r1
 810c9b2:	4313      	orrs	r3, r2
 810c9b4:	d056      	beq.n	810ca64 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 810c9b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c9ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810c9bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810c9c0:	d033      	beq.n	810ca2a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810c9c2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810c9c6:	d82c      	bhi.n	810ca22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810c9c8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810c9cc:	d02f      	beq.n	810ca2e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 810c9ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810c9d2:	d826      	bhi.n	810ca22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810c9d4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810c9d8:	d02b      	beq.n	810ca32 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 810c9da:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810c9de:	d820      	bhi.n	810ca22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810c9e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810c9e4:	d012      	beq.n	810ca0c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 810c9e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810c9ea:	d81a      	bhi.n	810ca22 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810c9ec:	2b00      	cmp	r3, #0
 810c9ee:	d022      	beq.n	810ca36 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 810c9f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810c9f4:	d115      	bne.n	810ca22 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810c9f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810c9fa:	3308      	adds	r3, #8
 810c9fc:	2101      	movs	r1, #1
 810c9fe:	4618      	mov	r0, r3
 810ca00:	f001 fa4e 	bl	810dea0 <RCCEx_PLL2_Config>
 810ca04:	4603      	mov	r3, r0
 810ca06:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810ca0a:	e015      	b.n	810ca38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810ca0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ca10:	3328      	adds	r3, #40	@ 0x28
 810ca12:	2101      	movs	r1, #1
 810ca14:	4618      	mov	r0, r3
 810ca16:	f001 faf5 	bl	810e004 <RCCEx_PLL3_Config>
 810ca1a:	4603      	mov	r3, r0
 810ca1c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810ca20:	e00a      	b.n	810ca38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810ca22:	2301      	movs	r3, #1
 810ca24:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810ca28:	e006      	b.n	810ca38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810ca2a:	bf00      	nop
 810ca2c:	e004      	b.n	810ca38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810ca2e:	bf00      	nop
 810ca30:	e002      	b.n	810ca38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810ca32:	bf00      	nop
 810ca34:	e000      	b.n	810ca38 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810ca36:	bf00      	nop
    }

    if (ret == HAL_OK)
 810ca38:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810ca3c:	2b00      	cmp	r3, #0
 810ca3e:	d10d      	bne.n	810ca5c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810ca40:	4b05      	ldr	r3, [pc, #20]	@ (810ca58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810ca42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810ca44:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 810ca48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ca4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810ca4e:	4a02      	ldr	r2, [pc, #8]	@ (810ca58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810ca50:	430b      	orrs	r3, r1
 810ca52:	6513      	str	r3, [r2, #80]	@ 0x50
 810ca54:	e006      	b.n	810ca64 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 810ca56:	bf00      	nop
 810ca58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810ca5c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810ca60:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 810ca64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ca68:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ca6c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 810ca70:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 810ca74:	2300      	movs	r3, #0
 810ca76:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 810ca7a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 810ca7e:	460b      	mov	r3, r1
 810ca80:	4313      	orrs	r3, r2
 810ca82:	d055      	beq.n	810cb30 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 810ca84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ca88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810ca8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810ca90:	d033      	beq.n	810cafa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 810ca92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810ca96:	d82c      	bhi.n	810caf2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810ca98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810ca9c:	d02f      	beq.n	810cafe <HAL_RCCEx_PeriphCLKConfig+0x66e>
 810ca9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810caa2:	d826      	bhi.n	810caf2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810caa4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810caa8:	d02b      	beq.n	810cb02 <HAL_RCCEx_PeriphCLKConfig+0x672>
 810caaa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810caae:	d820      	bhi.n	810caf2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810cab0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810cab4:	d012      	beq.n	810cadc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 810cab6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810caba:	d81a      	bhi.n	810caf2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810cabc:	2b00      	cmp	r3, #0
 810cabe:	d022      	beq.n	810cb06 <HAL_RCCEx_PeriphCLKConfig+0x676>
 810cac0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810cac4:	d115      	bne.n	810caf2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810cac6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810caca:	3308      	adds	r3, #8
 810cacc:	2101      	movs	r1, #1
 810cace:	4618      	mov	r0, r3
 810cad0:	f001 f9e6 	bl	810dea0 <RCCEx_PLL2_Config>
 810cad4:	4603      	mov	r3, r0
 810cad6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810cada:	e015      	b.n	810cb08 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810cadc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810cae0:	3328      	adds	r3, #40	@ 0x28
 810cae2:	2101      	movs	r1, #1
 810cae4:	4618      	mov	r0, r3
 810cae6:	f001 fa8d 	bl	810e004 <RCCEx_PLL3_Config>
 810caea:	4603      	mov	r3, r0
 810caec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810caf0:	e00a      	b.n	810cb08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 810caf2:	2301      	movs	r3, #1
 810caf4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810caf8:	e006      	b.n	810cb08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810cafa:	bf00      	nop
 810cafc:	e004      	b.n	810cb08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810cafe:	bf00      	nop
 810cb00:	e002      	b.n	810cb08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810cb02:	bf00      	nop
 810cb04:	e000      	b.n	810cb08 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810cb06:	bf00      	nop
    }

    if (ret == HAL_OK)
 810cb08:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810cb0c:	2b00      	cmp	r3, #0
 810cb0e:	d10b      	bne.n	810cb28 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 810cb10:	4bb7      	ldr	r3, [pc, #732]	@ (810cdf0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810cb12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810cb14:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 810cb18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810cb1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810cb20:	4ab3      	ldr	r2, [pc, #716]	@ (810cdf0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810cb22:	430b      	orrs	r3, r1
 810cb24:	6593      	str	r3, [r2, #88]	@ 0x58
 810cb26:	e003      	b.n	810cb30 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810cb28:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810cb2c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 810cb30:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810cb34:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cb38:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 810cb3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 810cb40:	2300      	movs	r3, #0
 810cb42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 810cb46:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 810cb4a:	460b      	mov	r3, r1
 810cb4c:	4313      	orrs	r3, r2
 810cb4e:	d02a      	beq.n	810cba6 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 810cb50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810cb54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810cb56:	2b00      	cmp	r3, #0
 810cb58:	d011      	beq.n	810cb7e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 810cb5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810cb5e:	d10a      	bne.n	810cb76 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810cb60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810cb64:	3308      	adds	r3, #8
 810cb66:	2101      	movs	r1, #1
 810cb68:	4618      	mov	r0, r3
 810cb6a:	f001 f999 	bl	810dea0 <RCCEx_PLL2_Config>
 810cb6e:	4603      	mov	r3, r0
 810cb70:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 810cb74:	e004      	b.n	810cb80 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810cb76:	2301      	movs	r3, #1
 810cb78:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810cb7c:	e000      	b.n	810cb80 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 810cb7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 810cb80:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810cb84:	2b00      	cmp	r3, #0
 810cb86:	d10a      	bne.n	810cb9e <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 810cb88:	4b99      	ldr	r3, [pc, #612]	@ (810cdf0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810cb8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810cb8c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 810cb90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810cb94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810cb96:	4a96      	ldr	r2, [pc, #600]	@ (810cdf0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810cb98:	430b      	orrs	r3, r1
 810cb9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810cb9c:	e003      	b.n	810cba6 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810cb9e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810cba2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 810cba6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810cbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cbae:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 810cbb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 810cbb6:	2300      	movs	r3, #0
 810cbb8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 810cbbc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 810cbc0:	460b      	mov	r3, r1
 810cbc2:	4313      	orrs	r3, r2
 810cbc4:	d037      	beq.n	810cc36 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 810cbc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810cbca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810cbcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810cbd0:	d00e      	beq.n	810cbf0 <HAL_RCCEx_PeriphCLKConfig+0x760>
 810cbd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810cbd6:	d816      	bhi.n	810cc06 <HAL_RCCEx_PeriphCLKConfig+0x776>
 810cbd8:	2b00      	cmp	r3, #0
 810cbda:	d018      	beq.n	810cc0e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 810cbdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810cbe0:	d111      	bne.n	810cc06 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810cbe2:	4b83      	ldr	r3, [pc, #524]	@ (810cdf0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810cbe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810cbe6:	4a82      	ldr	r2, [pc, #520]	@ (810cdf0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810cbe8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810cbec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810cbee:	e00f      	b.n	810cc10 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810cbf0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810cbf4:	3308      	adds	r3, #8
 810cbf6:	2101      	movs	r1, #1
 810cbf8:	4618      	mov	r0, r3
 810cbfa:	f001 f951 	bl	810dea0 <RCCEx_PLL2_Config>
 810cbfe:	4603      	mov	r3, r0
 810cc00:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810cc04:	e004      	b.n	810cc10 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810cc06:	2301      	movs	r3, #1
 810cc08:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810cc0c:	e000      	b.n	810cc10 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 810cc0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 810cc10:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810cc14:	2b00      	cmp	r3, #0
 810cc16:	d10a      	bne.n	810cc2e <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810cc18:	4b75      	ldr	r3, [pc, #468]	@ (810cdf0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810cc1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810cc1c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 810cc20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810cc24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810cc26:	4a72      	ldr	r2, [pc, #456]	@ (810cdf0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810cc28:	430b      	orrs	r3, r1
 810cc2a:	6513      	str	r3, [r2, #80]	@ 0x50
 810cc2c:	e003      	b.n	810cc36 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810cc2e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810cc32:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 810cc36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810cc3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cc3e:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 810cc42:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 810cc46:	2300      	movs	r3, #0
 810cc48:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 810cc4c:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 810cc50:	460b      	mov	r3, r1
 810cc52:	4313      	orrs	r3, r2
 810cc54:	d03a      	beq.n	810cccc <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 810cc56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810cc5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810cc5c:	2b03      	cmp	r3, #3
 810cc5e:	d81d      	bhi.n	810cc9c <HAL_RCCEx_PeriphCLKConfig+0x80c>
 810cc60:	a201      	add	r2, pc, #4	@ (adr r2, 810cc68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 810cc62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810cc66:	bf00      	nop
 810cc68:	0810cca5 	.word	0x0810cca5
 810cc6c:	0810cc79 	.word	0x0810cc79
 810cc70:	0810cc87 	.word	0x0810cc87
 810cc74:	0810cca5 	.word	0x0810cca5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810cc78:	4b5d      	ldr	r3, [pc, #372]	@ (810cdf0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810cc7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810cc7c:	4a5c      	ldr	r2, [pc, #368]	@ (810cdf0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810cc7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810cc82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 810cc84:	e00f      	b.n	810cca6 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810cc86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810cc8a:	3308      	adds	r3, #8
 810cc8c:	2102      	movs	r1, #2
 810cc8e:	4618      	mov	r0, r3
 810cc90:	f001 f906 	bl	810dea0 <RCCEx_PLL2_Config>
 810cc94:	4603      	mov	r3, r0
 810cc96:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 810cc9a:	e004      	b.n	810cca6 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 810cc9c:	2301      	movs	r3, #1
 810cc9e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810cca2:	e000      	b.n	810cca6 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 810cca4:	bf00      	nop
    }

    if (ret == HAL_OK)
 810cca6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810ccaa:	2b00      	cmp	r3, #0
 810ccac:	d10a      	bne.n	810ccc4 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810ccae:	4b50      	ldr	r3, [pc, #320]	@ (810cdf0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810ccb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810ccb2:	f023 0103 	bic.w	r1, r3, #3
 810ccb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ccba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810ccbc:	4a4c      	ldr	r2, [pc, #304]	@ (810cdf0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810ccbe:	430b      	orrs	r3, r1
 810ccc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810ccc2:	e003      	b.n	810cccc <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810ccc4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810ccc8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 810cccc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ccd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ccd4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 810ccd8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 810ccdc:	2300      	movs	r3, #0
 810ccde:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 810cce2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 810cce6:	460b      	mov	r3, r1
 810cce8:	4313      	orrs	r3, r2
 810ccea:	f000 80a0 	beq.w	810ce2e <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810ccee:	4b41      	ldr	r3, [pc, #260]	@ (810cdf4 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 810ccf0:	681b      	ldr	r3, [r3, #0]
 810ccf2:	4a40      	ldr	r2, [pc, #256]	@ (810cdf4 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 810ccf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810ccf8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810ccfa:	f7fc fa81 	bl	8109200 <HAL_GetTick>
 810ccfe:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810cd02:	e00b      	b.n	810cd1c <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 810cd04:	f7fc fa7c 	bl	8109200 <HAL_GetTick>
 810cd08:	4602      	mov	r2, r0
 810cd0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 810cd0e:	1ad3      	subs	r3, r2, r3
 810cd10:	2b64      	cmp	r3, #100	@ 0x64
 810cd12:	d903      	bls.n	810cd1c <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 810cd14:	2303      	movs	r3, #3
 810cd16:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810cd1a:	e005      	b.n	810cd28 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810cd1c:	4b35      	ldr	r3, [pc, #212]	@ (810cdf4 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 810cd1e:	681b      	ldr	r3, [r3, #0]
 810cd20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810cd24:	2b00      	cmp	r3, #0
 810cd26:	d0ed      	beq.n	810cd04 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 810cd28:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810cd2c:	2b00      	cmp	r3, #0
 810cd2e:	d17a      	bne.n	810ce26 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810cd30:	4b2f      	ldr	r3, [pc, #188]	@ (810cdf0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810cd32:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 810cd34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810cd38:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810cd3c:	4053      	eors	r3, r2
 810cd3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810cd42:	2b00      	cmp	r3, #0
 810cd44:	d015      	beq.n	810cd72 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810cd46:	4b2a      	ldr	r3, [pc, #168]	@ (810cdf0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810cd48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810cd4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810cd4e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810cd52:	4b27      	ldr	r3, [pc, #156]	@ (810cdf0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810cd54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810cd56:	4a26      	ldr	r2, [pc, #152]	@ (810cdf0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810cd58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 810cd5c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810cd5e:	4b24      	ldr	r3, [pc, #144]	@ (810cdf0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810cd60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810cd62:	4a23      	ldr	r2, [pc, #140]	@ (810cdf0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810cd64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810cd68:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810cd6a:	4a21      	ldr	r2, [pc, #132]	@ (810cdf0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810cd6c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 810cd70:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810cd72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810cd76:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810cd7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810cd7e:	d118      	bne.n	810cdb2 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810cd80:	f7fc fa3e 	bl	8109200 <HAL_GetTick>
 810cd84:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810cd88:	e00d      	b.n	810cda6 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810cd8a:	f7fc fa39 	bl	8109200 <HAL_GetTick>
 810cd8e:	4602      	mov	r2, r0
 810cd90:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 810cd94:	1ad2      	subs	r2, r2, r3
 810cd96:	f241 3388 	movw	r3, #5000	@ 0x1388
 810cd9a:	429a      	cmp	r2, r3
 810cd9c:	d903      	bls.n	810cda6 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 810cd9e:	2303      	movs	r3, #3
 810cda0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 810cda4:	e005      	b.n	810cdb2 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810cda6:	4b12      	ldr	r3, [pc, #72]	@ (810cdf0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810cda8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810cdaa:	f003 0302 	and.w	r3, r3, #2
 810cdae:	2b00      	cmp	r3, #0
 810cdb0:	d0eb      	beq.n	810cd8a <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 810cdb2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810cdb6:	2b00      	cmp	r3, #0
 810cdb8:	d130      	bne.n	810ce1c <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 810cdba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810cdbe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810cdc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810cdc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810cdca:	d115      	bne.n	810cdf8 <HAL_RCCEx_PeriphCLKConfig+0x968>
 810cdcc:	4b08      	ldr	r3, [pc, #32]	@ (810cdf0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810cdce:	691b      	ldr	r3, [r3, #16]
 810cdd0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 810cdd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810cdd8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810cddc:	091b      	lsrs	r3, r3, #4
 810cdde:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 810cde2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 810cde6:	4a02      	ldr	r2, [pc, #8]	@ (810cdf0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810cde8:	430b      	orrs	r3, r1
 810cdea:	6113      	str	r3, [r2, #16]
 810cdec:	e00a      	b.n	810ce04 <HAL_RCCEx_PeriphCLKConfig+0x974>
 810cdee:	bf00      	nop
 810cdf0:	58024400 	.word	0x58024400
 810cdf4:	58024800 	.word	0x58024800
 810cdf8:	4bd4      	ldr	r3, [pc, #848]	@ (810d14c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810cdfa:	691b      	ldr	r3, [r3, #16]
 810cdfc:	4ad3      	ldr	r2, [pc, #844]	@ (810d14c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810cdfe:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 810ce02:	6113      	str	r3, [r2, #16]
 810ce04:	4bd1      	ldr	r3, [pc, #836]	@ (810d14c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810ce06:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 810ce08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ce0c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810ce10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810ce14:	4acd      	ldr	r2, [pc, #820]	@ (810d14c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810ce16:	430b      	orrs	r3, r1
 810ce18:	6713      	str	r3, [r2, #112]	@ 0x70
 810ce1a:	e008      	b.n	810ce2e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810ce1c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810ce20:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 810ce24:	e003      	b.n	810ce2e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 810ce26:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810ce2a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 810ce2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ce32:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ce36:	f002 0301 	and.w	r3, r2, #1
 810ce3a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 810ce3e:	2300      	movs	r3, #0
 810ce40:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 810ce44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 810ce48:	460b      	mov	r3, r1
 810ce4a:	4313      	orrs	r3, r2
 810ce4c:	f000 808b 	beq.w	810cf66 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 810ce50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ce54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ce58:	2b28      	cmp	r3, #40	@ 0x28
 810ce5a:	d86b      	bhi.n	810cf34 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 810ce5c:	a201      	add	r2, pc, #4	@ (adr r2, 810ce64 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 810ce5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ce62:	bf00      	nop
 810ce64:	0810cf3d 	.word	0x0810cf3d
 810ce68:	0810cf35 	.word	0x0810cf35
 810ce6c:	0810cf35 	.word	0x0810cf35
 810ce70:	0810cf35 	.word	0x0810cf35
 810ce74:	0810cf35 	.word	0x0810cf35
 810ce78:	0810cf35 	.word	0x0810cf35
 810ce7c:	0810cf35 	.word	0x0810cf35
 810ce80:	0810cf35 	.word	0x0810cf35
 810ce84:	0810cf09 	.word	0x0810cf09
 810ce88:	0810cf35 	.word	0x0810cf35
 810ce8c:	0810cf35 	.word	0x0810cf35
 810ce90:	0810cf35 	.word	0x0810cf35
 810ce94:	0810cf35 	.word	0x0810cf35
 810ce98:	0810cf35 	.word	0x0810cf35
 810ce9c:	0810cf35 	.word	0x0810cf35
 810cea0:	0810cf35 	.word	0x0810cf35
 810cea4:	0810cf1f 	.word	0x0810cf1f
 810cea8:	0810cf35 	.word	0x0810cf35
 810ceac:	0810cf35 	.word	0x0810cf35
 810ceb0:	0810cf35 	.word	0x0810cf35
 810ceb4:	0810cf35 	.word	0x0810cf35
 810ceb8:	0810cf35 	.word	0x0810cf35
 810cebc:	0810cf35 	.word	0x0810cf35
 810cec0:	0810cf35 	.word	0x0810cf35
 810cec4:	0810cf3d 	.word	0x0810cf3d
 810cec8:	0810cf35 	.word	0x0810cf35
 810cecc:	0810cf35 	.word	0x0810cf35
 810ced0:	0810cf35 	.word	0x0810cf35
 810ced4:	0810cf35 	.word	0x0810cf35
 810ced8:	0810cf35 	.word	0x0810cf35
 810cedc:	0810cf35 	.word	0x0810cf35
 810cee0:	0810cf35 	.word	0x0810cf35
 810cee4:	0810cf3d 	.word	0x0810cf3d
 810cee8:	0810cf35 	.word	0x0810cf35
 810ceec:	0810cf35 	.word	0x0810cf35
 810cef0:	0810cf35 	.word	0x0810cf35
 810cef4:	0810cf35 	.word	0x0810cf35
 810cef8:	0810cf35 	.word	0x0810cf35
 810cefc:	0810cf35 	.word	0x0810cf35
 810cf00:	0810cf35 	.word	0x0810cf35
 810cf04:	0810cf3d 	.word	0x0810cf3d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810cf08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810cf0c:	3308      	adds	r3, #8
 810cf0e:	2101      	movs	r1, #1
 810cf10:	4618      	mov	r0, r3
 810cf12:	f000 ffc5 	bl	810dea0 <RCCEx_PLL2_Config>
 810cf16:	4603      	mov	r3, r0
 810cf18:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810cf1c:	e00f      	b.n	810cf3e <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810cf1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810cf22:	3328      	adds	r3, #40	@ 0x28
 810cf24:	2101      	movs	r1, #1
 810cf26:	4618      	mov	r0, r3
 810cf28:	f001 f86c 	bl	810e004 <RCCEx_PLL3_Config>
 810cf2c:	4603      	mov	r3, r0
 810cf2e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810cf32:	e004      	b.n	810cf3e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810cf34:	2301      	movs	r3, #1
 810cf36:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810cf3a:	e000      	b.n	810cf3e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 810cf3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810cf3e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810cf42:	2b00      	cmp	r3, #0
 810cf44:	d10b      	bne.n	810cf5e <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810cf46:	4b81      	ldr	r3, [pc, #516]	@ (810d14c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810cf48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810cf4a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 810cf4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810cf52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810cf56:	4a7d      	ldr	r2, [pc, #500]	@ (810d14c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810cf58:	430b      	orrs	r3, r1
 810cf5a:	6553      	str	r3, [r2, #84]	@ 0x54
 810cf5c:	e003      	b.n	810cf66 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810cf5e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810cf62:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810cf66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810cf6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cf6e:	f002 0302 	and.w	r3, r2, #2
 810cf72:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 810cf76:	2300      	movs	r3, #0
 810cf78:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 810cf7c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 810cf80:	460b      	mov	r3, r1
 810cf82:	4313      	orrs	r3, r2
 810cf84:	d042      	beq.n	810d00c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 810cf86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810cf8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810cf8c:	2b05      	cmp	r3, #5
 810cf8e:	d825      	bhi.n	810cfdc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 810cf90:	a201      	add	r2, pc, #4	@ (adr r2, 810cf98 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 810cf92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810cf96:	bf00      	nop
 810cf98:	0810cfe5 	.word	0x0810cfe5
 810cf9c:	0810cfb1 	.word	0x0810cfb1
 810cfa0:	0810cfc7 	.word	0x0810cfc7
 810cfa4:	0810cfe5 	.word	0x0810cfe5
 810cfa8:	0810cfe5 	.word	0x0810cfe5
 810cfac:	0810cfe5 	.word	0x0810cfe5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810cfb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810cfb4:	3308      	adds	r3, #8
 810cfb6:	2101      	movs	r1, #1
 810cfb8:	4618      	mov	r0, r3
 810cfba:	f000 ff71 	bl	810dea0 <RCCEx_PLL2_Config>
 810cfbe:	4603      	mov	r3, r0
 810cfc0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810cfc4:	e00f      	b.n	810cfe6 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810cfc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810cfca:	3328      	adds	r3, #40	@ 0x28
 810cfcc:	2101      	movs	r1, #1
 810cfce:	4618      	mov	r0, r3
 810cfd0:	f001 f818 	bl	810e004 <RCCEx_PLL3_Config>
 810cfd4:	4603      	mov	r3, r0
 810cfd6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810cfda:	e004      	b.n	810cfe6 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810cfdc:	2301      	movs	r3, #1
 810cfde:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810cfe2:	e000      	b.n	810cfe6 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 810cfe4:	bf00      	nop
    }

    if (ret == HAL_OK)
 810cfe6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810cfea:	2b00      	cmp	r3, #0
 810cfec:	d10a      	bne.n	810d004 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810cfee:	4b57      	ldr	r3, [pc, #348]	@ (810d14c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810cff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810cff2:	f023 0107 	bic.w	r1, r3, #7
 810cff6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810cffa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810cffc:	4a53      	ldr	r2, [pc, #332]	@ (810d14c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810cffe:	430b      	orrs	r3, r1
 810d000:	6553      	str	r3, [r2, #84]	@ 0x54
 810d002:	e003      	b.n	810d00c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810d004:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810d008:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 810d00c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d010:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d014:	f002 0304 	and.w	r3, r2, #4
 810d018:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 810d01c:	2300      	movs	r3, #0
 810d01e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 810d022:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 810d026:	460b      	mov	r3, r1
 810d028:	4313      	orrs	r3, r2
 810d02a:	d044      	beq.n	810d0b6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 810d02c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d030:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810d034:	2b05      	cmp	r3, #5
 810d036:	d825      	bhi.n	810d084 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 810d038:	a201      	add	r2, pc, #4	@ (adr r2, 810d040 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 810d03a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d03e:	bf00      	nop
 810d040:	0810d08d 	.word	0x0810d08d
 810d044:	0810d059 	.word	0x0810d059
 810d048:	0810d06f 	.word	0x0810d06f
 810d04c:	0810d08d 	.word	0x0810d08d
 810d050:	0810d08d 	.word	0x0810d08d
 810d054:	0810d08d 	.word	0x0810d08d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810d058:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d05c:	3308      	adds	r3, #8
 810d05e:	2101      	movs	r1, #1
 810d060:	4618      	mov	r0, r3
 810d062:	f000 ff1d 	bl	810dea0 <RCCEx_PLL2_Config>
 810d066:	4603      	mov	r3, r0
 810d068:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810d06c:	e00f      	b.n	810d08e <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810d06e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d072:	3328      	adds	r3, #40	@ 0x28
 810d074:	2101      	movs	r1, #1
 810d076:	4618      	mov	r0, r3
 810d078:	f000 ffc4 	bl	810e004 <RCCEx_PLL3_Config>
 810d07c:	4603      	mov	r3, r0
 810d07e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810d082:	e004      	b.n	810d08e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810d084:	2301      	movs	r3, #1
 810d086:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810d08a:	e000      	b.n	810d08e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 810d08c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810d08e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810d092:	2b00      	cmp	r3, #0
 810d094:	d10b      	bne.n	810d0ae <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810d096:	4b2d      	ldr	r3, [pc, #180]	@ (810d14c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810d098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810d09a:	f023 0107 	bic.w	r1, r3, #7
 810d09e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d0a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810d0a6:	4a29      	ldr	r2, [pc, #164]	@ (810d14c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810d0a8:	430b      	orrs	r3, r1
 810d0aa:	6593      	str	r3, [r2, #88]	@ 0x58
 810d0ac:	e003      	b.n	810d0b6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810d0ae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810d0b2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810d0b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d0be:	f002 0320 	and.w	r3, r2, #32
 810d0c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 810d0c6:	2300      	movs	r3, #0
 810d0c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 810d0cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 810d0d0:	460b      	mov	r3, r1
 810d0d2:	4313      	orrs	r3, r2
 810d0d4:	d057      	beq.n	810d186 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 810d0d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d0da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810d0de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810d0e2:	d035      	beq.n	810d150 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 810d0e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810d0e8:	d82c      	bhi.n	810d144 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810d0ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810d0ee:	d031      	beq.n	810d154 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 810d0f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810d0f4:	d826      	bhi.n	810d144 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810d0f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810d0fa:	d02d      	beq.n	810d158 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 810d0fc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810d100:	d820      	bhi.n	810d144 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810d102:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810d106:	d012      	beq.n	810d12e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 810d108:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810d10c:	d81a      	bhi.n	810d144 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810d10e:	2b00      	cmp	r3, #0
 810d110:	d024      	beq.n	810d15c <HAL_RCCEx_PeriphCLKConfig+0xccc>
 810d112:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810d116:	d115      	bne.n	810d144 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810d118:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d11c:	3308      	adds	r3, #8
 810d11e:	2100      	movs	r1, #0
 810d120:	4618      	mov	r0, r3
 810d122:	f000 febd 	bl	810dea0 <RCCEx_PLL2_Config>
 810d126:	4603      	mov	r3, r0
 810d128:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810d12c:	e017      	b.n	810d15e <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810d12e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d132:	3328      	adds	r3, #40	@ 0x28
 810d134:	2102      	movs	r1, #2
 810d136:	4618      	mov	r0, r3
 810d138:	f000 ff64 	bl	810e004 <RCCEx_PLL3_Config>
 810d13c:	4603      	mov	r3, r0
 810d13e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810d142:	e00c      	b.n	810d15e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810d144:	2301      	movs	r3, #1
 810d146:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810d14a:	e008      	b.n	810d15e <HAL_RCCEx_PeriphCLKConfig+0xcce>
 810d14c:	58024400 	.word	0x58024400
        break;
 810d150:	bf00      	nop
 810d152:	e004      	b.n	810d15e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 810d154:	bf00      	nop
 810d156:	e002      	b.n	810d15e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 810d158:	bf00      	nop
 810d15a:	e000      	b.n	810d15e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 810d15c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810d15e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810d162:	2b00      	cmp	r3, #0
 810d164:	d10b      	bne.n	810d17e <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810d166:	4bc2      	ldr	r3, [pc, #776]	@ (810d470 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810d168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810d16a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 810d16e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d172:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810d176:	4abe      	ldr	r2, [pc, #760]	@ (810d470 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810d178:	430b      	orrs	r3, r1
 810d17a:	6553      	str	r3, [r2, #84]	@ 0x54
 810d17c:	e003      	b.n	810d186 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810d17e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810d182:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 810d186:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d18e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 810d192:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 810d196:	2300      	movs	r3, #0
 810d198:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 810d19c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 810d1a0:	460b      	mov	r3, r1
 810d1a2:	4313      	orrs	r3, r2
 810d1a4:	d055      	beq.n	810d252 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 810d1a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d1aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810d1ae:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 810d1b2:	d033      	beq.n	810d21c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 810d1b4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 810d1b8:	d82c      	bhi.n	810d214 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 810d1ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810d1be:	d02f      	beq.n	810d220 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 810d1c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810d1c4:	d826      	bhi.n	810d214 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 810d1c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 810d1ca:	d02b      	beq.n	810d224 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 810d1cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 810d1d0:	d820      	bhi.n	810d214 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 810d1d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810d1d6:	d012      	beq.n	810d1fe <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 810d1d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810d1dc:	d81a      	bhi.n	810d214 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 810d1de:	2b00      	cmp	r3, #0
 810d1e0:	d022      	beq.n	810d228 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 810d1e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 810d1e6:	d115      	bne.n	810d214 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810d1e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d1ec:	3308      	adds	r3, #8
 810d1ee:	2100      	movs	r1, #0
 810d1f0:	4618      	mov	r0, r3
 810d1f2:	f000 fe55 	bl	810dea0 <RCCEx_PLL2_Config>
 810d1f6:	4603      	mov	r3, r0
 810d1f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810d1fc:	e015      	b.n	810d22a <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810d1fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d202:	3328      	adds	r3, #40	@ 0x28
 810d204:	2102      	movs	r1, #2
 810d206:	4618      	mov	r0, r3
 810d208:	f000 fefc 	bl	810e004 <RCCEx_PLL3_Config>
 810d20c:	4603      	mov	r3, r0
 810d20e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810d212:	e00a      	b.n	810d22a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810d214:	2301      	movs	r3, #1
 810d216:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810d21a:	e006      	b.n	810d22a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 810d21c:	bf00      	nop
 810d21e:	e004      	b.n	810d22a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 810d220:	bf00      	nop
 810d222:	e002      	b.n	810d22a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 810d224:	bf00      	nop
 810d226:	e000      	b.n	810d22a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 810d228:	bf00      	nop
    }

    if (ret == HAL_OK)
 810d22a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810d22e:	2b00      	cmp	r3, #0
 810d230:	d10b      	bne.n	810d24a <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810d232:	4b8f      	ldr	r3, [pc, #572]	@ (810d470 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810d234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810d236:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 810d23a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d23e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810d242:	4a8b      	ldr	r2, [pc, #556]	@ (810d470 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810d244:	430b      	orrs	r3, r1
 810d246:	6593      	str	r3, [r2, #88]	@ 0x58
 810d248:	e003      	b.n	810d252 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810d24a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810d24e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 810d252:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d256:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d25a:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 810d25e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 810d262:	2300      	movs	r3, #0
 810d264:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 810d268:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 810d26c:	460b      	mov	r3, r1
 810d26e:	4313      	orrs	r3, r2
 810d270:	d055      	beq.n	810d31e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 810d272:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d276:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810d27a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 810d27e:	d033      	beq.n	810d2e8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 810d280:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 810d284:	d82c      	bhi.n	810d2e0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 810d286:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810d28a:	d02f      	beq.n	810d2ec <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 810d28c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810d290:	d826      	bhi.n	810d2e0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 810d292:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 810d296:	d02b      	beq.n	810d2f0 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 810d298:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 810d29c:	d820      	bhi.n	810d2e0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 810d29e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810d2a2:	d012      	beq.n	810d2ca <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 810d2a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810d2a8:	d81a      	bhi.n	810d2e0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 810d2aa:	2b00      	cmp	r3, #0
 810d2ac:	d022      	beq.n	810d2f4 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 810d2ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810d2b2:	d115      	bne.n	810d2e0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810d2b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d2b8:	3308      	adds	r3, #8
 810d2ba:	2100      	movs	r1, #0
 810d2bc:	4618      	mov	r0, r3
 810d2be:	f000 fdef 	bl	810dea0 <RCCEx_PLL2_Config>
 810d2c2:	4603      	mov	r3, r0
 810d2c4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810d2c8:	e015      	b.n	810d2f6 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810d2ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d2ce:	3328      	adds	r3, #40	@ 0x28
 810d2d0:	2102      	movs	r1, #2
 810d2d2:	4618      	mov	r0, r3
 810d2d4:	f000 fe96 	bl	810e004 <RCCEx_PLL3_Config>
 810d2d8:	4603      	mov	r3, r0
 810d2da:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810d2de:	e00a      	b.n	810d2f6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810d2e0:	2301      	movs	r3, #1
 810d2e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810d2e6:	e006      	b.n	810d2f6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 810d2e8:	bf00      	nop
 810d2ea:	e004      	b.n	810d2f6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 810d2ec:	bf00      	nop
 810d2ee:	e002      	b.n	810d2f6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 810d2f0:	bf00      	nop
 810d2f2:	e000      	b.n	810d2f6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 810d2f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 810d2f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810d2fa:	2b00      	cmp	r3, #0
 810d2fc:	d10b      	bne.n	810d316 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810d2fe:	4b5c      	ldr	r3, [pc, #368]	@ (810d470 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810d300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810d302:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 810d306:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d30a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810d30e:	4a58      	ldr	r2, [pc, #352]	@ (810d470 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810d310:	430b      	orrs	r3, r1
 810d312:	6593      	str	r3, [r2, #88]	@ 0x58
 810d314:	e003      	b.n	810d31e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810d316:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810d31a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810d31e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d322:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d326:	f002 0308 	and.w	r3, r2, #8
 810d32a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 810d32e:	2300      	movs	r3, #0
 810d330:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810d334:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 810d338:	460b      	mov	r3, r1
 810d33a:	4313      	orrs	r3, r2
 810d33c:	d01e      	beq.n	810d37c <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 810d33e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810d346:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810d34a:	d10c      	bne.n	810d366 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810d34c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d350:	3328      	adds	r3, #40	@ 0x28
 810d352:	2102      	movs	r1, #2
 810d354:	4618      	mov	r0, r3
 810d356:	f000 fe55 	bl	810e004 <RCCEx_PLL3_Config>
 810d35a:	4603      	mov	r3, r0
 810d35c:	2b00      	cmp	r3, #0
 810d35e:	d002      	beq.n	810d366 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 810d360:	2301      	movs	r3, #1
 810d362:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810d366:	4b42      	ldr	r3, [pc, #264]	@ (810d470 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810d368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810d36a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810d36e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810d376:	4a3e      	ldr	r2, [pc, #248]	@ (810d470 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810d378:	430b      	orrs	r3, r1
 810d37a:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810d37c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d380:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d384:	f002 0310 	and.w	r3, r2, #16
 810d388:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 810d38c:	2300      	movs	r3, #0
 810d38e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 810d392:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 810d396:	460b      	mov	r3, r1
 810d398:	4313      	orrs	r3, r2
 810d39a:	d01e      	beq.n	810d3da <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 810d39c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d3a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810d3a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810d3a8:	d10c      	bne.n	810d3c4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810d3aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d3ae:	3328      	adds	r3, #40	@ 0x28
 810d3b0:	2102      	movs	r1, #2
 810d3b2:	4618      	mov	r0, r3
 810d3b4:	f000 fe26 	bl	810e004 <RCCEx_PLL3_Config>
 810d3b8:	4603      	mov	r3, r0
 810d3ba:	2b00      	cmp	r3, #0
 810d3bc:	d002      	beq.n	810d3c4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 810d3be:	2301      	movs	r3, #1
 810d3c0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810d3c4:	4b2a      	ldr	r3, [pc, #168]	@ (810d470 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810d3c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810d3c8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810d3cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d3d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810d3d4:	4a26      	ldr	r2, [pc, #152]	@ (810d470 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810d3d6:	430b      	orrs	r3, r1
 810d3d8:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 810d3da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d3e2:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 810d3e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810d3ea:	2300      	movs	r3, #0
 810d3ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810d3f0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 810d3f4:	460b      	mov	r3, r1
 810d3f6:	4313      	orrs	r3, r2
 810d3f8:	d040      	beq.n	810d47c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 810d3fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d3fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 810d402:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810d406:	d022      	beq.n	810d44e <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 810d408:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810d40c:	d81b      	bhi.n	810d446 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 810d40e:	2b00      	cmp	r3, #0
 810d410:	d003      	beq.n	810d41a <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 810d412:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810d416:	d00b      	beq.n	810d430 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 810d418:	e015      	b.n	810d446 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810d41a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d41e:	3308      	adds	r3, #8
 810d420:	2100      	movs	r1, #0
 810d422:	4618      	mov	r0, r3
 810d424:	f000 fd3c 	bl	810dea0 <RCCEx_PLL2_Config>
 810d428:	4603      	mov	r3, r0
 810d42a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 810d42e:	e00f      	b.n	810d450 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810d430:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d434:	3328      	adds	r3, #40	@ 0x28
 810d436:	2102      	movs	r1, #2
 810d438:	4618      	mov	r0, r3
 810d43a:	f000 fde3 	bl	810e004 <RCCEx_PLL3_Config>
 810d43e:	4603      	mov	r3, r0
 810d440:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 810d444:	e004      	b.n	810d450 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810d446:	2301      	movs	r3, #1
 810d448:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810d44c:	e000      	b.n	810d450 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 810d44e:	bf00      	nop
    }

    if (ret == HAL_OK)
 810d450:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810d454:	2b00      	cmp	r3, #0
 810d456:	d10d      	bne.n	810d474 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 810d458:	4b05      	ldr	r3, [pc, #20]	@ (810d470 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810d45a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810d45c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 810d460:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d464:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 810d468:	4a01      	ldr	r2, [pc, #4]	@ (810d470 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810d46a:	430b      	orrs	r3, r1
 810d46c:	6593      	str	r3, [r2, #88]	@ 0x58
 810d46e:	e005      	b.n	810d47c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 810d470:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810d474:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810d478:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810d47c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d480:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d484:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 810d488:	67bb      	str	r3, [r7, #120]	@ 0x78
 810d48a:	2300      	movs	r3, #0
 810d48c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810d48e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 810d492:	460b      	mov	r3, r1
 810d494:	4313      	orrs	r3, r2
 810d496:	d03b      	beq.n	810d510 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 810d498:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d49c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810d4a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810d4a4:	d01f      	beq.n	810d4e6 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 810d4a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810d4aa:	d818      	bhi.n	810d4de <HAL_RCCEx_PeriphCLKConfig+0x104e>
 810d4ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810d4b0:	d003      	beq.n	810d4ba <HAL_RCCEx_PeriphCLKConfig+0x102a>
 810d4b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810d4b6:	d007      	beq.n	810d4c8 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 810d4b8:	e011      	b.n	810d4de <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810d4ba:	4b64      	ldr	r3, [pc, #400]	@ (810d64c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810d4bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810d4be:	4a63      	ldr	r2, [pc, #396]	@ (810d64c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810d4c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810d4c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 810d4c6:	e00f      	b.n	810d4e8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810d4c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d4cc:	3328      	adds	r3, #40	@ 0x28
 810d4ce:	2101      	movs	r1, #1
 810d4d0:	4618      	mov	r0, r3
 810d4d2:	f000 fd97 	bl	810e004 <RCCEx_PLL3_Config>
 810d4d6:	4603      	mov	r3, r0
 810d4d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 810d4dc:	e004      	b.n	810d4e8 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810d4de:	2301      	movs	r3, #1
 810d4e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810d4e4:	e000      	b.n	810d4e8 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 810d4e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 810d4e8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810d4ec:	2b00      	cmp	r3, #0
 810d4ee:	d10b      	bne.n	810d508 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810d4f0:	4b56      	ldr	r3, [pc, #344]	@ (810d64c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810d4f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810d4f4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810d4f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d4fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810d500:	4a52      	ldr	r2, [pc, #328]	@ (810d64c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810d502:	430b      	orrs	r3, r1
 810d504:	6553      	str	r3, [r2, #84]	@ 0x54
 810d506:	e003      	b.n	810d510 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810d508:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810d50c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810d510:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d514:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d518:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 810d51c:	673b      	str	r3, [r7, #112]	@ 0x70
 810d51e:	2300      	movs	r3, #0
 810d520:	677b      	str	r3, [r7, #116]	@ 0x74
 810d522:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 810d526:	460b      	mov	r3, r1
 810d528:	4313      	orrs	r3, r2
 810d52a:	d031      	beq.n	810d590 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 810d52c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810d532:	2b00      	cmp	r3, #0
 810d534:	d003      	beq.n	810d53e <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 810d536:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810d53a:	d007      	beq.n	810d54c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 810d53c:	e011      	b.n	810d562 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810d53e:	4b43      	ldr	r3, [pc, #268]	@ (810d64c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810d540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810d542:	4a42      	ldr	r2, [pc, #264]	@ (810d64c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810d544:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810d548:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810d54a:	e00e      	b.n	810d56a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810d54c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d550:	3308      	adds	r3, #8
 810d552:	2102      	movs	r1, #2
 810d554:	4618      	mov	r0, r3
 810d556:	f000 fca3 	bl	810dea0 <RCCEx_PLL2_Config>
 810d55a:	4603      	mov	r3, r0
 810d55c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810d560:	e003      	b.n	810d56a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 810d562:	2301      	movs	r3, #1
 810d564:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810d568:	bf00      	nop
    }

    if (ret == HAL_OK)
 810d56a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810d56e:	2b00      	cmp	r3, #0
 810d570:	d10a      	bne.n	810d588 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810d572:	4b36      	ldr	r3, [pc, #216]	@ (810d64c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810d574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810d576:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810d57a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d57e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810d580:	4a32      	ldr	r2, [pc, #200]	@ (810d64c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810d582:	430b      	orrs	r3, r1
 810d584:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810d586:	e003      	b.n	810d590 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810d588:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810d58c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810d590:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d594:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d598:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 810d59c:	66bb      	str	r3, [r7, #104]	@ 0x68
 810d59e:	2300      	movs	r3, #0
 810d5a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 810d5a2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 810d5a6:	460b      	mov	r3, r1
 810d5a8:	4313      	orrs	r3, r2
 810d5aa:	d00c      	beq.n	810d5c6 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810d5ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d5b0:	3328      	adds	r3, #40	@ 0x28
 810d5b2:	2102      	movs	r1, #2
 810d5b4:	4618      	mov	r0, r3
 810d5b6:	f000 fd25 	bl	810e004 <RCCEx_PLL3_Config>
 810d5ba:	4603      	mov	r3, r0
 810d5bc:	2b00      	cmp	r3, #0
 810d5be:	d002      	beq.n	810d5c6 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 810d5c0:	2301      	movs	r3, #1
 810d5c2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810d5c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d5ce:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 810d5d2:	663b      	str	r3, [r7, #96]	@ 0x60
 810d5d4:	2300      	movs	r3, #0
 810d5d6:	667b      	str	r3, [r7, #100]	@ 0x64
 810d5d8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 810d5dc:	460b      	mov	r3, r1
 810d5de:	4313      	orrs	r3, r2
 810d5e0:	d03a      	beq.n	810d658 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 810d5e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d5e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810d5ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810d5ee:	d018      	beq.n	810d622 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 810d5f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810d5f4:	d811      	bhi.n	810d61a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 810d5f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810d5fa:	d014      	beq.n	810d626 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 810d5fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810d600:	d80b      	bhi.n	810d61a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 810d602:	2b00      	cmp	r3, #0
 810d604:	d011      	beq.n	810d62a <HAL_RCCEx_PeriphCLKConfig+0x119a>
 810d606:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810d60a:	d106      	bne.n	810d61a <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810d60c:	4b0f      	ldr	r3, [pc, #60]	@ (810d64c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810d60e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810d610:	4a0e      	ldr	r2, [pc, #56]	@ (810d64c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810d612:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810d616:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 810d618:	e008      	b.n	810d62c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810d61a:	2301      	movs	r3, #1
 810d61c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810d620:	e004      	b.n	810d62c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 810d622:	bf00      	nop
 810d624:	e002      	b.n	810d62c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 810d626:	bf00      	nop
 810d628:	e000      	b.n	810d62c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 810d62a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810d62c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810d630:	2b00      	cmp	r3, #0
 810d632:	d10d      	bne.n	810d650 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810d634:	4b05      	ldr	r3, [pc, #20]	@ (810d64c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810d636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810d638:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810d63c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d640:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810d644:	4a01      	ldr	r2, [pc, #4]	@ (810d64c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810d646:	430b      	orrs	r3, r1
 810d648:	6553      	str	r3, [r2, #84]	@ 0x54
 810d64a:	e005      	b.n	810d658 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 810d64c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810d650:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810d654:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810d658:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d660:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 810d664:	65bb      	str	r3, [r7, #88]	@ 0x58
 810d666:	2300      	movs	r3, #0
 810d668:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810d66a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 810d66e:	460b      	mov	r3, r1
 810d670:	4313      	orrs	r3, r2
 810d672:	d009      	beq.n	810d688 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 810d674:	4baa      	ldr	r3, [pc, #680]	@ (810d920 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810d676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810d678:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 810d67c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d680:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810d682:	4aa7      	ldr	r2, [pc, #668]	@ (810d920 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810d684:	430b      	orrs	r3, r1
 810d686:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 810d688:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d690:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 810d694:	653b      	str	r3, [r7, #80]	@ 0x50
 810d696:	2300      	movs	r3, #0
 810d698:	657b      	str	r3, [r7, #84]	@ 0x54
 810d69a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 810d69e:	460b      	mov	r3, r1
 810d6a0:	4313      	orrs	r3, r2
 810d6a2:	d00a      	beq.n	810d6ba <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 810d6a4:	4b9e      	ldr	r3, [pc, #632]	@ (810d920 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810d6a6:	691b      	ldr	r3, [r3, #16]
 810d6a8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 810d6ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d6b0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 810d6b4:	4a9a      	ldr	r2, [pc, #616]	@ (810d920 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810d6b6:	430b      	orrs	r3, r1
 810d6b8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810d6ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d6c2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 810d6c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 810d6c8:	2300      	movs	r3, #0
 810d6ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810d6cc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 810d6d0:	460b      	mov	r3, r1
 810d6d2:	4313      	orrs	r3, r2
 810d6d4:	d009      	beq.n	810d6ea <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810d6d6:	4b92      	ldr	r3, [pc, #584]	@ (810d920 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810d6d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810d6da:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 810d6de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d6e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810d6e4:	4a8e      	ldr	r2, [pc, #568]	@ (810d920 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810d6e6:	430b      	orrs	r3, r1
 810d6e8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810d6ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d6f2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 810d6f6:	643b      	str	r3, [r7, #64]	@ 0x40
 810d6f8:	2300      	movs	r3, #0
 810d6fa:	647b      	str	r3, [r7, #68]	@ 0x44
 810d6fc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 810d700:	460b      	mov	r3, r1
 810d702:	4313      	orrs	r3, r2
 810d704:	d00e      	beq.n	810d724 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810d706:	4b86      	ldr	r3, [pc, #536]	@ (810d920 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810d708:	691b      	ldr	r3, [r3, #16]
 810d70a:	4a85      	ldr	r2, [pc, #532]	@ (810d920 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810d70c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 810d710:	6113      	str	r3, [r2, #16]
 810d712:	4b83      	ldr	r3, [pc, #524]	@ (810d920 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810d714:	6919      	ldr	r1, [r3, #16]
 810d716:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d71a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 810d71e:	4a80      	ldr	r2, [pc, #512]	@ (810d920 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810d720:	430b      	orrs	r3, r1
 810d722:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 810d724:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d728:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d72c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 810d730:	63bb      	str	r3, [r7, #56]	@ 0x38
 810d732:	2300      	movs	r3, #0
 810d734:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810d736:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 810d73a:	460b      	mov	r3, r1
 810d73c:	4313      	orrs	r3, r2
 810d73e:	d009      	beq.n	810d754 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 810d740:	4b77      	ldr	r3, [pc, #476]	@ (810d920 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810d742:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810d744:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 810d748:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d74c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810d74e:	4a74      	ldr	r2, [pc, #464]	@ (810d920 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810d750:	430b      	orrs	r3, r1
 810d752:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810d754:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d758:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d75c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 810d760:	633b      	str	r3, [r7, #48]	@ 0x30
 810d762:	2300      	movs	r3, #0
 810d764:	637b      	str	r3, [r7, #52]	@ 0x34
 810d766:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 810d76a:	460b      	mov	r3, r1
 810d76c:	4313      	orrs	r3, r2
 810d76e:	d00a      	beq.n	810d786 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810d770:	4b6b      	ldr	r3, [pc, #428]	@ (810d920 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810d772:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810d774:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 810d778:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d77c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810d780:	4a67      	ldr	r2, [pc, #412]	@ (810d920 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810d782:	430b      	orrs	r3, r1
 810d784:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 810d786:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d78e:	2100      	movs	r1, #0
 810d790:	62b9      	str	r1, [r7, #40]	@ 0x28
 810d792:	f003 0301 	and.w	r3, r3, #1
 810d796:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810d798:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 810d79c:	460b      	mov	r3, r1
 810d79e:	4313      	orrs	r3, r2
 810d7a0:	d011      	beq.n	810d7c6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810d7a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d7a6:	3308      	adds	r3, #8
 810d7a8:	2100      	movs	r1, #0
 810d7aa:	4618      	mov	r0, r3
 810d7ac:	f000 fb78 	bl	810dea0 <RCCEx_PLL2_Config>
 810d7b0:	4603      	mov	r3, r0
 810d7b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810d7b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810d7ba:	2b00      	cmp	r3, #0
 810d7bc:	d003      	beq.n	810d7c6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810d7be:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810d7c2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 810d7c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d7ce:	2100      	movs	r1, #0
 810d7d0:	6239      	str	r1, [r7, #32]
 810d7d2:	f003 0302 	and.w	r3, r3, #2
 810d7d6:	627b      	str	r3, [r7, #36]	@ 0x24
 810d7d8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 810d7dc:	460b      	mov	r3, r1
 810d7de:	4313      	orrs	r3, r2
 810d7e0:	d011      	beq.n	810d806 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810d7e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d7e6:	3308      	adds	r3, #8
 810d7e8:	2101      	movs	r1, #1
 810d7ea:	4618      	mov	r0, r3
 810d7ec:	f000 fb58 	bl	810dea0 <RCCEx_PLL2_Config>
 810d7f0:	4603      	mov	r3, r0
 810d7f2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810d7f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810d7fa:	2b00      	cmp	r3, #0
 810d7fc:	d003      	beq.n	810d806 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810d7fe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810d802:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 810d806:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d80e:	2100      	movs	r1, #0
 810d810:	61b9      	str	r1, [r7, #24]
 810d812:	f003 0304 	and.w	r3, r3, #4
 810d816:	61fb      	str	r3, [r7, #28]
 810d818:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 810d81c:	460b      	mov	r3, r1
 810d81e:	4313      	orrs	r3, r2
 810d820:	d011      	beq.n	810d846 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810d822:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d826:	3308      	adds	r3, #8
 810d828:	2102      	movs	r1, #2
 810d82a:	4618      	mov	r0, r3
 810d82c:	f000 fb38 	bl	810dea0 <RCCEx_PLL2_Config>
 810d830:	4603      	mov	r3, r0
 810d832:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810d836:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810d83a:	2b00      	cmp	r3, #0
 810d83c:	d003      	beq.n	810d846 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810d83e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810d842:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 810d846:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d84e:	2100      	movs	r1, #0
 810d850:	6139      	str	r1, [r7, #16]
 810d852:	f003 0308 	and.w	r3, r3, #8
 810d856:	617b      	str	r3, [r7, #20]
 810d858:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 810d85c:	460b      	mov	r3, r1
 810d85e:	4313      	orrs	r3, r2
 810d860:	d011      	beq.n	810d886 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810d862:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d866:	3328      	adds	r3, #40	@ 0x28
 810d868:	2100      	movs	r1, #0
 810d86a:	4618      	mov	r0, r3
 810d86c:	f000 fbca 	bl	810e004 <RCCEx_PLL3_Config>
 810d870:	4603      	mov	r3, r0
 810d872:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 810d876:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810d87a:	2b00      	cmp	r3, #0
 810d87c:	d003      	beq.n	810d886 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810d87e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810d882:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 810d886:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d88e:	2100      	movs	r1, #0
 810d890:	60b9      	str	r1, [r7, #8]
 810d892:	f003 0310 	and.w	r3, r3, #16
 810d896:	60fb      	str	r3, [r7, #12]
 810d898:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 810d89c:	460b      	mov	r3, r1
 810d89e:	4313      	orrs	r3, r2
 810d8a0:	d011      	beq.n	810d8c6 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810d8a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d8a6:	3328      	adds	r3, #40	@ 0x28
 810d8a8:	2101      	movs	r1, #1
 810d8aa:	4618      	mov	r0, r3
 810d8ac:	f000 fbaa 	bl	810e004 <RCCEx_PLL3_Config>
 810d8b0:	4603      	mov	r3, r0
 810d8b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810d8b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810d8ba:	2b00      	cmp	r3, #0
 810d8bc:	d003      	beq.n	810d8c6 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810d8be:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810d8c2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 810d8c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d8ce:	2100      	movs	r1, #0
 810d8d0:	6039      	str	r1, [r7, #0]
 810d8d2:	f003 0320 	and.w	r3, r3, #32
 810d8d6:	607b      	str	r3, [r7, #4]
 810d8d8:	e9d7 1200 	ldrd	r1, r2, [r7]
 810d8dc:	460b      	mov	r3, r1
 810d8de:	4313      	orrs	r3, r2
 810d8e0:	d011      	beq.n	810d906 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810d8e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810d8e6:	3328      	adds	r3, #40	@ 0x28
 810d8e8:	2102      	movs	r1, #2
 810d8ea:	4618      	mov	r0, r3
 810d8ec:	f000 fb8a 	bl	810e004 <RCCEx_PLL3_Config>
 810d8f0:	4603      	mov	r3, r0
 810d8f2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810d8f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810d8fa:	2b00      	cmp	r3, #0
 810d8fc:	d003      	beq.n	810d906 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810d8fe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810d902:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 810d906:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 810d90a:	2b00      	cmp	r3, #0
 810d90c:	d101      	bne.n	810d912 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 810d90e:	2300      	movs	r3, #0
 810d910:	e000      	b.n	810d914 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 810d912:	2301      	movs	r3, #1
}
 810d914:	4618      	mov	r0, r3
 810d916:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 810d91a:	46bd      	mov	sp, r7
 810d91c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810d920:	58024400 	.word	0x58024400

0810d924 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 810d924:	b580      	push	{r7, lr}
 810d926:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 810d928:	f7fe fd12 	bl	810c350 <HAL_RCC_GetHCLKFreq>
 810d92c:	4602      	mov	r2, r0
 810d92e:	4b06      	ldr	r3, [pc, #24]	@ (810d948 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 810d930:	6a1b      	ldr	r3, [r3, #32]
 810d932:	091b      	lsrs	r3, r3, #4
 810d934:	f003 0307 	and.w	r3, r3, #7
 810d938:	4904      	ldr	r1, [pc, #16]	@ (810d94c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810d93a:	5ccb      	ldrb	r3, [r1, r3]
 810d93c:	f003 031f 	and.w	r3, r3, #31
 810d940:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 810d944:	4618      	mov	r0, r3
 810d946:	bd80      	pop	{r7, pc}
 810d948:	58024400 	.word	0x58024400
 810d94c:	08128970 	.word	0x08128970

0810d950 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 810d950:	b480      	push	{r7}
 810d952:	b089      	sub	sp, #36	@ 0x24
 810d954:	af00      	add	r7, sp, #0
 810d956:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810d958:	4ba1      	ldr	r3, [pc, #644]	@ (810dbe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810d95a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810d95c:	f003 0303 	and.w	r3, r3, #3
 810d960:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 810d962:	4b9f      	ldr	r3, [pc, #636]	@ (810dbe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810d964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810d966:	0b1b      	lsrs	r3, r3, #12
 810d968:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810d96c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810d96e:	4b9c      	ldr	r3, [pc, #624]	@ (810dbe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810d970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810d972:	091b      	lsrs	r3, r3, #4
 810d974:	f003 0301 	and.w	r3, r3, #1
 810d978:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 810d97a:	4b99      	ldr	r3, [pc, #612]	@ (810dbe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810d97c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810d97e:	08db      	lsrs	r3, r3, #3
 810d980:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810d984:	693a      	ldr	r2, [r7, #16]
 810d986:	fb02 f303 	mul.w	r3, r2, r3
 810d98a:	ee07 3a90 	vmov	s15, r3
 810d98e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810d992:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810d996:	697b      	ldr	r3, [r7, #20]
 810d998:	2b00      	cmp	r3, #0
 810d99a:	f000 8111 	beq.w	810dbc0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810d99e:	69bb      	ldr	r3, [r7, #24]
 810d9a0:	2b02      	cmp	r3, #2
 810d9a2:	f000 8083 	beq.w	810daac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810d9a6:	69bb      	ldr	r3, [r7, #24]
 810d9a8:	2b02      	cmp	r3, #2
 810d9aa:	f200 80a1 	bhi.w	810daf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810d9ae:	69bb      	ldr	r3, [r7, #24]
 810d9b0:	2b00      	cmp	r3, #0
 810d9b2:	d003      	beq.n	810d9bc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 810d9b4:	69bb      	ldr	r3, [r7, #24]
 810d9b6:	2b01      	cmp	r3, #1
 810d9b8:	d056      	beq.n	810da68 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810d9ba:	e099      	b.n	810daf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810d9bc:	4b88      	ldr	r3, [pc, #544]	@ (810dbe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810d9be:	681b      	ldr	r3, [r3, #0]
 810d9c0:	f003 0320 	and.w	r3, r3, #32
 810d9c4:	2b00      	cmp	r3, #0
 810d9c6:	d02d      	beq.n	810da24 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810d9c8:	4b85      	ldr	r3, [pc, #532]	@ (810dbe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810d9ca:	681b      	ldr	r3, [r3, #0]
 810d9cc:	08db      	lsrs	r3, r3, #3
 810d9ce:	f003 0303 	and.w	r3, r3, #3
 810d9d2:	4a84      	ldr	r2, [pc, #528]	@ (810dbe4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 810d9d4:	fa22 f303 	lsr.w	r3, r2, r3
 810d9d8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810d9da:	68bb      	ldr	r3, [r7, #8]
 810d9dc:	ee07 3a90 	vmov	s15, r3
 810d9e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810d9e4:	697b      	ldr	r3, [r7, #20]
 810d9e6:	ee07 3a90 	vmov	s15, r3
 810d9ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810d9ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810d9f2:	4b7b      	ldr	r3, [pc, #492]	@ (810dbe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810d9f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810d9f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810d9fa:	ee07 3a90 	vmov	s15, r3
 810d9fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810da02:	ed97 6a03 	vldr	s12, [r7, #12]
 810da06:	eddf 5a78 	vldr	s11, [pc, #480]	@ 810dbe8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810da0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810da0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810da12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810da16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810da1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810da1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810da22:	e087      	b.n	810db34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810da24:	697b      	ldr	r3, [r7, #20]
 810da26:	ee07 3a90 	vmov	s15, r3
 810da2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810da2e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 810dbec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 810da32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810da36:	4b6a      	ldr	r3, [pc, #424]	@ (810dbe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810da38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810da3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810da3e:	ee07 3a90 	vmov	s15, r3
 810da42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810da46:	ed97 6a03 	vldr	s12, [r7, #12]
 810da4a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 810dbe8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810da4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810da52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810da56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810da5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810da5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 810da62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810da66:	e065      	b.n	810db34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810da68:	697b      	ldr	r3, [r7, #20]
 810da6a:	ee07 3a90 	vmov	s15, r3
 810da6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810da72:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 810dbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810da76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810da7a:	4b59      	ldr	r3, [pc, #356]	@ (810dbe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810da7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810da7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810da82:	ee07 3a90 	vmov	s15, r3
 810da86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810da8a:	ed97 6a03 	vldr	s12, [r7, #12]
 810da8e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 810dbe8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810da92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810da96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810da9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810da9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810daa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 810daa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810daaa:	e043      	b.n	810db34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810daac:	697b      	ldr	r3, [r7, #20]
 810daae:	ee07 3a90 	vmov	s15, r3
 810dab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810dab6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 810dbf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810daba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810dabe:	4b48      	ldr	r3, [pc, #288]	@ (810dbe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810dac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810dac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810dac6:	ee07 3a90 	vmov	s15, r3
 810daca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810dace:	ed97 6a03 	vldr	s12, [r7, #12]
 810dad2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 810dbe8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810dad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810dada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810dade:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810dae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810dae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 810daea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810daee:	e021      	b.n	810db34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810daf0:	697b      	ldr	r3, [r7, #20]
 810daf2:	ee07 3a90 	vmov	s15, r3
 810daf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810dafa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 810dbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810dafe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810db02:	4b37      	ldr	r3, [pc, #220]	@ (810dbe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810db04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810db06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810db0a:	ee07 3a90 	vmov	s15, r3
 810db0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810db12:	ed97 6a03 	vldr	s12, [r7, #12]
 810db16:	eddf 5a34 	vldr	s11, [pc, #208]	@ 810dbe8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810db1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810db1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810db22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810db26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810db2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810db2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810db32:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 810db34:	4b2a      	ldr	r3, [pc, #168]	@ (810dbe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810db36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810db38:	0a5b      	lsrs	r3, r3, #9
 810db3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810db3e:	ee07 3a90 	vmov	s15, r3
 810db42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810db46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810db4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810db4e:	edd7 6a07 	vldr	s13, [r7, #28]
 810db52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810db56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810db5a:	ee17 2a90 	vmov	r2, s15
 810db5e:	687b      	ldr	r3, [r7, #4]
 810db60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 810db62:	4b1f      	ldr	r3, [pc, #124]	@ (810dbe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810db64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810db66:	0c1b      	lsrs	r3, r3, #16
 810db68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810db6c:	ee07 3a90 	vmov	s15, r3
 810db70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810db74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810db78:	ee37 7a87 	vadd.f32	s14, s15, s14
 810db7c:	edd7 6a07 	vldr	s13, [r7, #28]
 810db80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810db84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810db88:	ee17 2a90 	vmov	r2, s15
 810db8c:	687b      	ldr	r3, [r7, #4]
 810db8e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 810db90:	4b13      	ldr	r3, [pc, #76]	@ (810dbe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810db92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810db94:	0e1b      	lsrs	r3, r3, #24
 810db96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810db9a:	ee07 3a90 	vmov	s15, r3
 810db9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810dba2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810dba6:	ee37 7a87 	vadd.f32	s14, s15, s14
 810dbaa:	edd7 6a07 	vldr	s13, [r7, #28]
 810dbae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810dbb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810dbb6:	ee17 2a90 	vmov	r2, s15
 810dbba:	687b      	ldr	r3, [r7, #4]
 810dbbc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810dbbe:	e008      	b.n	810dbd2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 810dbc0:	687b      	ldr	r3, [r7, #4]
 810dbc2:	2200      	movs	r2, #0
 810dbc4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810dbc6:	687b      	ldr	r3, [r7, #4]
 810dbc8:	2200      	movs	r2, #0
 810dbca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 810dbcc:	687b      	ldr	r3, [r7, #4]
 810dbce:	2200      	movs	r2, #0
 810dbd0:	609a      	str	r2, [r3, #8]
}
 810dbd2:	bf00      	nop
 810dbd4:	3724      	adds	r7, #36	@ 0x24
 810dbd6:	46bd      	mov	sp, r7
 810dbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dbdc:	4770      	bx	lr
 810dbde:	bf00      	nop
 810dbe0:	58024400 	.word	0x58024400
 810dbe4:	03d09000 	.word	0x03d09000
 810dbe8:	46000000 	.word	0x46000000
 810dbec:	4c742400 	.word	0x4c742400
 810dbf0:	4a742400 	.word	0x4a742400
 810dbf4:	4bbebc20 	.word	0x4bbebc20

0810dbf8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 810dbf8:	b480      	push	{r7}
 810dbfa:	b089      	sub	sp, #36	@ 0x24
 810dbfc:	af00      	add	r7, sp, #0
 810dbfe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810dc00:	4ba1      	ldr	r3, [pc, #644]	@ (810de88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810dc02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810dc04:	f003 0303 	and.w	r3, r3, #3
 810dc08:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 810dc0a:	4b9f      	ldr	r3, [pc, #636]	@ (810de88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810dc0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810dc0e:	0d1b      	lsrs	r3, r3, #20
 810dc10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810dc14:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810dc16:	4b9c      	ldr	r3, [pc, #624]	@ (810de88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810dc18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810dc1a:	0a1b      	lsrs	r3, r3, #8
 810dc1c:	f003 0301 	and.w	r3, r3, #1
 810dc20:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 810dc22:	4b99      	ldr	r3, [pc, #612]	@ (810de88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810dc24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810dc26:	08db      	lsrs	r3, r3, #3
 810dc28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810dc2c:	693a      	ldr	r2, [r7, #16]
 810dc2e:	fb02 f303 	mul.w	r3, r2, r3
 810dc32:	ee07 3a90 	vmov	s15, r3
 810dc36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810dc3a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 810dc3e:	697b      	ldr	r3, [r7, #20]
 810dc40:	2b00      	cmp	r3, #0
 810dc42:	f000 8111 	beq.w	810de68 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810dc46:	69bb      	ldr	r3, [r7, #24]
 810dc48:	2b02      	cmp	r3, #2
 810dc4a:	f000 8083 	beq.w	810dd54 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 810dc4e:	69bb      	ldr	r3, [r7, #24]
 810dc50:	2b02      	cmp	r3, #2
 810dc52:	f200 80a1 	bhi.w	810dd98 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810dc56:	69bb      	ldr	r3, [r7, #24]
 810dc58:	2b00      	cmp	r3, #0
 810dc5a:	d003      	beq.n	810dc64 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 810dc5c:	69bb      	ldr	r3, [r7, #24]
 810dc5e:	2b01      	cmp	r3, #1
 810dc60:	d056      	beq.n	810dd10 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 810dc62:	e099      	b.n	810dd98 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810dc64:	4b88      	ldr	r3, [pc, #544]	@ (810de88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810dc66:	681b      	ldr	r3, [r3, #0]
 810dc68:	f003 0320 	and.w	r3, r3, #32
 810dc6c:	2b00      	cmp	r3, #0
 810dc6e:	d02d      	beq.n	810dccc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810dc70:	4b85      	ldr	r3, [pc, #532]	@ (810de88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810dc72:	681b      	ldr	r3, [r3, #0]
 810dc74:	08db      	lsrs	r3, r3, #3
 810dc76:	f003 0303 	and.w	r3, r3, #3
 810dc7a:	4a84      	ldr	r2, [pc, #528]	@ (810de8c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 810dc7c:	fa22 f303 	lsr.w	r3, r2, r3
 810dc80:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810dc82:	68bb      	ldr	r3, [r7, #8]
 810dc84:	ee07 3a90 	vmov	s15, r3
 810dc88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810dc8c:	697b      	ldr	r3, [r7, #20]
 810dc8e:	ee07 3a90 	vmov	s15, r3
 810dc92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810dc96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810dc9a:	4b7b      	ldr	r3, [pc, #492]	@ (810de88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810dc9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810dc9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810dca2:	ee07 3a90 	vmov	s15, r3
 810dca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810dcaa:	ed97 6a03 	vldr	s12, [r7, #12]
 810dcae:	eddf 5a78 	vldr	s11, [pc, #480]	@ 810de90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810dcb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810dcb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810dcba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810dcbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810dcc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 810dcc6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810dcca:	e087      	b.n	810dddc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810dccc:	697b      	ldr	r3, [r7, #20]
 810dcce:	ee07 3a90 	vmov	s15, r3
 810dcd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810dcd6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 810de94 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810dcda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810dcde:	4b6a      	ldr	r3, [pc, #424]	@ (810de88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810dce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810dce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810dce6:	ee07 3a90 	vmov	s15, r3
 810dcea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810dcee:	ed97 6a03 	vldr	s12, [r7, #12]
 810dcf2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 810de90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810dcf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810dcfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810dcfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810dd02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810dd06:	ee67 7a27 	vmul.f32	s15, s14, s15
 810dd0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810dd0e:	e065      	b.n	810dddc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810dd10:	697b      	ldr	r3, [r7, #20]
 810dd12:	ee07 3a90 	vmov	s15, r3
 810dd16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810dd1a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 810de98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810dd1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810dd22:	4b59      	ldr	r3, [pc, #356]	@ (810de88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810dd24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810dd26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810dd2a:	ee07 3a90 	vmov	s15, r3
 810dd2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810dd32:	ed97 6a03 	vldr	s12, [r7, #12]
 810dd36:	eddf 5a56 	vldr	s11, [pc, #344]	@ 810de90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810dd3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810dd3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810dd42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810dd46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810dd4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810dd4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810dd52:	e043      	b.n	810dddc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810dd54:	697b      	ldr	r3, [r7, #20]
 810dd56:	ee07 3a90 	vmov	s15, r3
 810dd5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810dd5e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 810de9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 810dd62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810dd66:	4b48      	ldr	r3, [pc, #288]	@ (810de88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810dd68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810dd6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810dd6e:	ee07 3a90 	vmov	s15, r3
 810dd72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810dd76:	ed97 6a03 	vldr	s12, [r7, #12]
 810dd7a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 810de90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810dd7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810dd82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810dd86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810dd8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810dd8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 810dd92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810dd96:	e021      	b.n	810dddc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810dd98:	697b      	ldr	r3, [r7, #20]
 810dd9a:	ee07 3a90 	vmov	s15, r3
 810dd9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810dda2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 810de98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810dda6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810ddaa:	4b37      	ldr	r3, [pc, #220]	@ (810de88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810ddac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810ddae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810ddb2:	ee07 3a90 	vmov	s15, r3
 810ddb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810ddba:	ed97 6a03 	vldr	s12, [r7, #12]
 810ddbe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 810de90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810ddc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810ddc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810ddca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810ddce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810ddd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 810ddd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810ddda:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 810dddc:	4b2a      	ldr	r3, [pc, #168]	@ (810de88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810ddde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810dde0:	0a5b      	lsrs	r3, r3, #9
 810dde2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810dde6:	ee07 3a90 	vmov	s15, r3
 810ddea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810ddee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810ddf2:	ee37 7a87 	vadd.f32	s14, s15, s14
 810ddf6:	edd7 6a07 	vldr	s13, [r7, #28]
 810ddfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810ddfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810de02:	ee17 2a90 	vmov	r2, s15
 810de06:	687b      	ldr	r3, [r7, #4]
 810de08:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 810de0a:	4b1f      	ldr	r3, [pc, #124]	@ (810de88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810de0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810de0e:	0c1b      	lsrs	r3, r3, #16
 810de10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810de14:	ee07 3a90 	vmov	s15, r3
 810de18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810de1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810de20:	ee37 7a87 	vadd.f32	s14, s15, s14
 810de24:	edd7 6a07 	vldr	s13, [r7, #28]
 810de28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810de2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810de30:	ee17 2a90 	vmov	r2, s15
 810de34:	687b      	ldr	r3, [r7, #4]
 810de36:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 810de38:	4b13      	ldr	r3, [pc, #76]	@ (810de88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810de3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810de3c:	0e1b      	lsrs	r3, r3, #24
 810de3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810de42:	ee07 3a90 	vmov	s15, r3
 810de46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810de4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810de4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 810de52:	edd7 6a07 	vldr	s13, [r7, #28]
 810de56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810de5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810de5e:	ee17 2a90 	vmov	r2, s15
 810de62:	687b      	ldr	r3, [r7, #4]
 810de64:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810de66:	e008      	b.n	810de7a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 810de68:	687b      	ldr	r3, [r7, #4]
 810de6a:	2200      	movs	r2, #0
 810de6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810de6e:	687b      	ldr	r3, [r7, #4]
 810de70:	2200      	movs	r2, #0
 810de72:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 810de74:	687b      	ldr	r3, [r7, #4]
 810de76:	2200      	movs	r2, #0
 810de78:	609a      	str	r2, [r3, #8]
}
 810de7a:	bf00      	nop
 810de7c:	3724      	adds	r7, #36	@ 0x24
 810de7e:	46bd      	mov	sp, r7
 810de80:	f85d 7b04 	ldr.w	r7, [sp], #4
 810de84:	4770      	bx	lr
 810de86:	bf00      	nop
 810de88:	58024400 	.word	0x58024400
 810de8c:	03d09000 	.word	0x03d09000
 810de90:	46000000 	.word	0x46000000
 810de94:	4c742400 	.word	0x4c742400
 810de98:	4a742400 	.word	0x4a742400
 810de9c:	4bbebc20 	.word	0x4bbebc20

0810dea0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 810dea0:	b580      	push	{r7, lr}
 810dea2:	b084      	sub	sp, #16
 810dea4:	af00      	add	r7, sp, #0
 810dea6:	6078      	str	r0, [r7, #4]
 810dea8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810deaa:	2300      	movs	r3, #0
 810deac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810deae:	4b54      	ldr	r3, [pc, #336]	@ (810e000 <RCCEx_PLL2_Config+0x160>)
 810deb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810deb2:	f003 0303 	and.w	r3, r3, #3
 810deb6:	2b03      	cmp	r3, #3
 810deb8:	d101      	bne.n	810debe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810deba:	2301      	movs	r3, #1
 810debc:	e09b      	b.n	810dff6 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810debe:	4b50      	ldr	r3, [pc, #320]	@ (810e000 <RCCEx_PLL2_Config+0x160>)
 810dec0:	681b      	ldr	r3, [r3, #0]
 810dec2:	4a4f      	ldr	r2, [pc, #316]	@ (810e000 <RCCEx_PLL2_Config+0x160>)
 810dec4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810dec8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810deca:	f7fb f999 	bl	8109200 <HAL_GetTick>
 810dece:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810ded0:	e008      	b.n	810dee4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810ded2:	f7fb f995 	bl	8109200 <HAL_GetTick>
 810ded6:	4602      	mov	r2, r0
 810ded8:	68bb      	ldr	r3, [r7, #8]
 810deda:	1ad3      	subs	r3, r2, r3
 810dedc:	2b02      	cmp	r3, #2
 810dede:	d901      	bls.n	810dee4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 810dee0:	2303      	movs	r3, #3
 810dee2:	e088      	b.n	810dff6 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810dee4:	4b46      	ldr	r3, [pc, #280]	@ (810e000 <RCCEx_PLL2_Config+0x160>)
 810dee6:	681b      	ldr	r3, [r3, #0]
 810dee8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810deec:	2b00      	cmp	r3, #0
 810deee:	d1f0      	bne.n	810ded2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810def0:	4b43      	ldr	r3, [pc, #268]	@ (810e000 <RCCEx_PLL2_Config+0x160>)
 810def2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810def4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 810def8:	687b      	ldr	r3, [r7, #4]
 810defa:	681b      	ldr	r3, [r3, #0]
 810defc:	031b      	lsls	r3, r3, #12
 810defe:	4940      	ldr	r1, [pc, #256]	@ (810e000 <RCCEx_PLL2_Config+0x160>)
 810df00:	4313      	orrs	r3, r2
 810df02:	628b      	str	r3, [r1, #40]	@ 0x28
 810df04:	687b      	ldr	r3, [r7, #4]
 810df06:	685b      	ldr	r3, [r3, #4]
 810df08:	3b01      	subs	r3, #1
 810df0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810df0e:	687b      	ldr	r3, [r7, #4]
 810df10:	689b      	ldr	r3, [r3, #8]
 810df12:	3b01      	subs	r3, #1
 810df14:	025b      	lsls	r3, r3, #9
 810df16:	b29b      	uxth	r3, r3
 810df18:	431a      	orrs	r2, r3
 810df1a:	687b      	ldr	r3, [r7, #4]
 810df1c:	68db      	ldr	r3, [r3, #12]
 810df1e:	3b01      	subs	r3, #1
 810df20:	041b      	lsls	r3, r3, #16
 810df22:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810df26:	431a      	orrs	r2, r3
 810df28:	687b      	ldr	r3, [r7, #4]
 810df2a:	691b      	ldr	r3, [r3, #16]
 810df2c:	3b01      	subs	r3, #1
 810df2e:	061b      	lsls	r3, r3, #24
 810df30:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 810df34:	4932      	ldr	r1, [pc, #200]	@ (810e000 <RCCEx_PLL2_Config+0x160>)
 810df36:	4313      	orrs	r3, r2
 810df38:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810df3a:	4b31      	ldr	r3, [pc, #196]	@ (810e000 <RCCEx_PLL2_Config+0x160>)
 810df3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810df3e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 810df42:	687b      	ldr	r3, [r7, #4]
 810df44:	695b      	ldr	r3, [r3, #20]
 810df46:	492e      	ldr	r1, [pc, #184]	@ (810e000 <RCCEx_PLL2_Config+0x160>)
 810df48:	4313      	orrs	r3, r2
 810df4a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810df4c:	4b2c      	ldr	r3, [pc, #176]	@ (810e000 <RCCEx_PLL2_Config+0x160>)
 810df4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810df50:	f023 0220 	bic.w	r2, r3, #32
 810df54:	687b      	ldr	r3, [r7, #4]
 810df56:	699b      	ldr	r3, [r3, #24]
 810df58:	4929      	ldr	r1, [pc, #164]	@ (810e000 <RCCEx_PLL2_Config+0x160>)
 810df5a:	4313      	orrs	r3, r2
 810df5c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810df5e:	4b28      	ldr	r3, [pc, #160]	@ (810e000 <RCCEx_PLL2_Config+0x160>)
 810df60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810df62:	4a27      	ldr	r2, [pc, #156]	@ (810e000 <RCCEx_PLL2_Config+0x160>)
 810df64:	f023 0310 	bic.w	r3, r3, #16
 810df68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810df6a:	4b25      	ldr	r3, [pc, #148]	@ (810e000 <RCCEx_PLL2_Config+0x160>)
 810df6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810df6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810df72:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810df76:	687a      	ldr	r2, [r7, #4]
 810df78:	69d2      	ldr	r2, [r2, #28]
 810df7a:	00d2      	lsls	r2, r2, #3
 810df7c:	4920      	ldr	r1, [pc, #128]	@ (810e000 <RCCEx_PLL2_Config+0x160>)
 810df7e:	4313      	orrs	r3, r2
 810df80:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810df82:	4b1f      	ldr	r3, [pc, #124]	@ (810e000 <RCCEx_PLL2_Config+0x160>)
 810df84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810df86:	4a1e      	ldr	r2, [pc, #120]	@ (810e000 <RCCEx_PLL2_Config+0x160>)
 810df88:	f043 0310 	orr.w	r3, r3, #16
 810df8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810df8e:	683b      	ldr	r3, [r7, #0]
 810df90:	2b00      	cmp	r3, #0
 810df92:	d106      	bne.n	810dfa2 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810df94:	4b1a      	ldr	r3, [pc, #104]	@ (810e000 <RCCEx_PLL2_Config+0x160>)
 810df96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810df98:	4a19      	ldr	r2, [pc, #100]	@ (810e000 <RCCEx_PLL2_Config+0x160>)
 810df9a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810df9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810dfa0:	e00f      	b.n	810dfc2 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810dfa2:	683b      	ldr	r3, [r7, #0]
 810dfa4:	2b01      	cmp	r3, #1
 810dfa6:	d106      	bne.n	810dfb6 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 810dfa8:	4b15      	ldr	r3, [pc, #84]	@ (810e000 <RCCEx_PLL2_Config+0x160>)
 810dfaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810dfac:	4a14      	ldr	r2, [pc, #80]	@ (810e000 <RCCEx_PLL2_Config+0x160>)
 810dfae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810dfb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810dfb4:	e005      	b.n	810dfc2 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810dfb6:	4b12      	ldr	r3, [pc, #72]	@ (810e000 <RCCEx_PLL2_Config+0x160>)
 810dfb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810dfba:	4a11      	ldr	r2, [pc, #68]	@ (810e000 <RCCEx_PLL2_Config+0x160>)
 810dfbc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 810dfc0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810dfc2:	4b0f      	ldr	r3, [pc, #60]	@ (810e000 <RCCEx_PLL2_Config+0x160>)
 810dfc4:	681b      	ldr	r3, [r3, #0]
 810dfc6:	4a0e      	ldr	r2, [pc, #56]	@ (810e000 <RCCEx_PLL2_Config+0x160>)
 810dfc8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 810dfcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810dfce:	f7fb f917 	bl	8109200 <HAL_GetTick>
 810dfd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810dfd4:	e008      	b.n	810dfe8 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810dfd6:	f7fb f913 	bl	8109200 <HAL_GetTick>
 810dfda:	4602      	mov	r2, r0
 810dfdc:	68bb      	ldr	r3, [r7, #8]
 810dfde:	1ad3      	subs	r3, r2, r3
 810dfe0:	2b02      	cmp	r3, #2
 810dfe2:	d901      	bls.n	810dfe8 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 810dfe4:	2303      	movs	r3, #3
 810dfe6:	e006      	b.n	810dff6 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810dfe8:	4b05      	ldr	r3, [pc, #20]	@ (810e000 <RCCEx_PLL2_Config+0x160>)
 810dfea:	681b      	ldr	r3, [r3, #0]
 810dfec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810dff0:	2b00      	cmp	r3, #0
 810dff2:	d0f0      	beq.n	810dfd6 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 810dff4:	7bfb      	ldrb	r3, [r7, #15]
}
 810dff6:	4618      	mov	r0, r3
 810dff8:	3710      	adds	r7, #16
 810dffa:	46bd      	mov	sp, r7
 810dffc:	bd80      	pop	{r7, pc}
 810dffe:	bf00      	nop
 810e000:	58024400 	.word	0x58024400

0810e004 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 810e004:	b580      	push	{r7, lr}
 810e006:	b084      	sub	sp, #16
 810e008:	af00      	add	r7, sp, #0
 810e00a:	6078      	str	r0, [r7, #4]
 810e00c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810e00e:	2300      	movs	r3, #0
 810e010:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810e012:	4b54      	ldr	r3, [pc, #336]	@ (810e164 <RCCEx_PLL3_Config+0x160>)
 810e014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810e016:	f003 0303 	and.w	r3, r3, #3
 810e01a:	2b03      	cmp	r3, #3
 810e01c:	d101      	bne.n	810e022 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810e01e:	2301      	movs	r3, #1
 810e020:	e09b      	b.n	810e15a <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810e022:	4b50      	ldr	r3, [pc, #320]	@ (810e164 <RCCEx_PLL3_Config+0x160>)
 810e024:	681b      	ldr	r3, [r3, #0]
 810e026:	4a4f      	ldr	r2, [pc, #316]	@ (810e164 <RCCEx_PLL3_Config+0x160>)
 810e028:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810e02c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810e02e:	f7fb f8e7 	bl	8109200 <HAL_GetTick>
 810e032:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810e034:	e008      	b.n	810e048 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810e036:	f7fb f8e3 	bl	8109200 <HAL_GetTick>
 810e03a:	4602      	mov	r2, r0
 810e03c:	68bb      	ldr	r3, [r7, #8]
 810e03e:	1ad3      	subs	r3, r2, r3
 810e040:	2b02      	cmp	r3, #2
 810e042:	d901      	bls.n	810e048 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810e044:	2303      	movs	r3, #3
 810e046:	e088      	b.n	810e15a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810e048:	4b46      	ldr	r3, [pc, #280]	@ (810e164 <RCCEx_PLL3_Config+0x160>)
 810e04a:	681b      	ldr	r3, [r3, #0]
 810e04c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810e050:	2b00      	cmp	r3, #0
 810e052:	d1f0      	bne.n	810e036 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810e054:	4b43      	ldr	r3, [pc, #268]	@ (810e164 <RCCEx_PLL3_Config+0x160>)
 810e056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810e058:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 810e05c:	687b      	ldr	r3, [r7, #4]
 810e05e:	681b      	ldr	r3, [r3, #0]
 810e060:	051b      	lsls	r3, r3, #20
 810e062:	4940      	ldr	r1, [pc, #256]	@ (810e164 <RCCEx_PLL3_Config+0x160>)
 810e064:	4313      	orrs	r3, r2
 810e066:	628b      	str	r3, [r1, #40]	@ 0x28
 810e068:	687b      	ldr	r3, [r7, #4]
 810e06a:	685b      	ldr	r3, [r3, #4]
 810e06c:	3b01      	subs	r3, #1
 810e06e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810e072:	687b      	ldr	r3, [r7, #4]
 810e074:	689b      	ldr	r3, [r3, #8]
 810e076:	3b01      	subs	r3, #1
 810e078:	025b      	lsls	r3, r3, #9
 810e07a:	b29b      	uxth	r3, r3
 810e07c:	431a      	orrs	r2, r3
 810e07e:	687b      	ldr	r3, [r7, #4]
 810e080:	68db      	ldr	r3, [r3, #12]
 810e082:	3b01      	subs	r3, #1
 810e084:	041b      	lsls	r3, r3, #16
 810e086:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810e08a:	431a      	orrs	r2, r3
 810e08c:	687b      	ldr	r3, [r7, #4]
 810e08e:	691b      	ldr	r3, [r3, #16]
 810e090:	3b01      	subs	r3, #1
 810e092:	061b      	lsls	r3, r3, #24
 810e094:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 810e098:	4932      	ldr	r1, [pc, #200]	@ (810e164 <RCCEx_PLL3_Config+0x160>)
 810e09a:	4313      	orrs	r3, r2
 810e09c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810e09e:	4b31      	ldr	r3, [pc, #196]	@ (810e164 <RCCEx_PLL3_Config+0x160>)
 810e0a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e0a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 810e0a6:	687b      	ldr	r3, [r7, #4]
 810e0a8:	695b      	ldr	r3, [r3, #20]
 810e0aa:	492e      	ldr	r1, [pc, #184]	@ (810e164 <RCCEx_PLL3_Config+0x160>)
 810e0ac:	4313      	orrs	r3, r2
 810e0ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 810e0b0:	4b2c      	ldr	r3, [pc, #176]	@ (810e164 <RCCEx_PLL3_Config+0x160>)
 810e0b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e0b4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 810e0b8:	687b      	ldr	r3, [r7, #4]
 810e0ba:	699b      	ldr	r3, [r3, #24]
 810e0bc:	4929      	ldr	r1, [pc, #164]	@ (810e164 <RCCEx_PLL3_Config+0x160>)
 810e0be:	4313      	orrs	r3, r2
 810e0c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810e0c2:	4b28      	ldr	r3, [pc, #160]	@ (810e164 <RCCEx_PLL3_Config+0x160>)
 810e0c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e0c6:	4a27      	ldr	r2, [pc, #156]	@ (810e164 <RCCEx_PLL3_Config+0x160>)
 810e0c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810e0cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810e0ce:	4b25      	ldr	r3, [pc, #148]	@ (810e164 <RCCEx_PLL3_Config+0x160>)
 810e0d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810e0d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810e0d6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810e0da:	687a      	ldr	r2, [r7, #4]
 810e0dc:	69d2      	ldr	r2, [r2, #28]
 810e0de:	00d2      	lsls	r2, r2, #3
 810e0e0:	4920      	ldr	r1, [pc, #128]	@ (810e164 <RCCEx_PLL3_Config+0x160>)
 810e0e2:	4313      	orrs	r3, r2
 810e0e4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810e0e6:	4b1f      	ldr	r3, [pc, #124]	@ (810e164 <RCCEx_PLL3_Config+0x160>)
 810e0e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e0ea:	4a1e      	ldr	r2, [pc, #120]	@ (810e164 <RCCEx_PLL3_Config+0x160>)
 810e0ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810e0f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810e0f2:	683b      	ldr	r3, [r7, #0]
 810e0f4:	2b00      	cmp	r3, #0
 810e0f6:	d106      	bne.n	810e106 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810e0f8:	4b1a      	ldr	r3, [pc, #104]	@ (810e164 <RCCEx_PLL3_Config+0x160>)
 810e0fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e0fc:	4a19      	ldr	r2, [pc, #100]	@ (810e164 <RCCEx_PLL3_Config+0x160>)
 810e0fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 810e102:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810e104:	e00f      	b.n	810e126 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810e106:	683b      	ldr	r3, [r7, #0]
 810e108:	2b01      	cmp	r3, #1
 810e10a:	d106      	bne.n	810e11a <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810e10c:	4b15      	ldr	r3, [pc, #84]	@ (810e164 <RCCEx_PLL3_Config+0x160>)
 810e10e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e110:	4a14      	ldr	r2, [pc, #80]	@ (810e164 <RCCEx_PLL3_Config+0x160>)
 810e112:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 810e116:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810e118:	e005      	b.n	810e126 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810e11a:	4b12      	ldr	r3, [pc, #72]	@ (810e164 <RCCEx_PLL3_Config+0x160>)
 810e11c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e11e:	4a11      	ldr	r2, [pc, #68]	@ (810e164 <RCCEx_PLL3_Config+0x160>)
 810e120:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 810e124:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810e126:	4b0f      	ldr	r3, [pc, #60]	@ (810e164 <RCCEx_PLL3_Config+0x160>)
 810e128:	681b      	ldr	r3, [r3, #0]
 810e12a:	4a0e      	ldr	r2, [pc, #56]	@ (810e164 <RCCEx_PLL3_Config+0x160>)
 810e12c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810e130:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810e132:	f7fb f865 	bl	8109200 <HAL_GetTick>
 810e136:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810e138:	e008      	b.n	810e14c <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810e13a:	f7fb f861 	bl	8109200 <HAL_GetTick>
 810e13e:	4602      	mov	r2, r0
 810e140:	68bb      	ldr	r3, [r7, #8]
 810e142:	1ad3      	subs	r3, r2, r3
 810e144:	2b02      	cmp	r3, #2
 810e146:	d901      	bls.n	810e14c <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 810e148:	2303      	movs	r3, #3
 810e14a:	e006      	b.n	810e15a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810e14c:	4b05      	ldr	r3, [pc, #20]	@ (810e164 <RCCEx_PLL3_Config+0x160>)
 810e14e:	681b      	ldr	r3, [r3, #0]
 810e150:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810e154:	2b00      	cmp	r3, #0
 810e156:	d0f0      	beq.n	810e13a <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 810e158:	7bfb      	ldrb	r3, [r7, #15]
}
 810e15a:	4618      	mov	r0, r3
 810e15c:	3710      	adds	r7, #16
 810e15e:	46bd      	mov	sp, r7
 810e160:	bd80      	pop	{r7, pc}
 810e162:	bf00      	nop
 810e164:	58024400 	.word	0x58024400

0810e168 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 810e168:	b580      	push	{r7, lr}
 810e16a:	b082      	sub	sp, #8
 810e16c:	af00      	add	r7, sp, #0
 810e16e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810e170:	687b      	ldr	r3, [r7, #4]
 810e172:	2b00      	cmp	r3, #0
 810e174:	d101      	bne.n	810e17a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810e176:	2301      	movs	r3, #1
 810e178:	e049      	b.n	810e20e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810e17a:	687b      	ldr	r3, [r7, #4]
 810e17c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810e180:	b2db      	uxtb	r3, r3
 810e182:	2b00      	cmp	r3, #0
 810e184:	d106      	bne.n	810e194 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810e186:	687b      	ldr	r3, [r7, #4]
 810e188:	2200      	movs	r2, #0
 810e18a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810e18e:	6878      	ldr	r0, [r7, #4]
 810e190:	f000 f841 	bl	810e216 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810e194:	687b      	ldr	r3, [r7, #4]
 810e196:	2202      	movs	r2, #2
 810e198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810e19c:	687b      	ldr	r3, [r7, #4]
 810e19e:	681a      	ldr	r2, [r3, #0]
 810e1a0:	687b      	ldr	r3, [r7, #4]
 810e1a2:	3304      	adds	r3, #4
 810e1a4:	4619      	mov	r1, r3
 810e1a6:	4610      	mov	r0, r2
 810e1a8:	f000 f9e8 	bl	810e57c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810e1ac:	687b      	ldr	r3, [r7, #4]
 810e1ae:	2201      	movs	r2, #1
 810e1b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810e1b4:	687b      	ldr	r3, [r7, #4]
 810e1b6:	2201      	movs	r2, #1
 810e1b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810e1bc:	687b      	ldr	r3, [r7, #4]
 810e1be:	2201      	movs	r2, #1
 810e1c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 810e1c4:	687b      	ldr	r3, [r7, #4]
 810e1c6:	2201      	movs	r2, #1
 810e1c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810e1cc:	687b      	ldr	r3, [r7, #4]
 810e1ce:	2201      	movs	r2, #1
 810e1d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 810e1d4:	687b      	ldr	r3, [r7, #4]
 810e1d6:	2201      	movs	r2, #1
 810e1d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 810e1dc:	687b      	ldr	r3, [r7, #4]
 810e1de:	2201      	movs	r2, #1
 810e1e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810e1e4:	687b      	ldr	r3, [r7, #4]
 810e1e6:	2201      	movs	r2, #1
 810e1e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810e1ec:	687b      	ldr	r3, [r7, #4]
 810e1ee:	2201      	movs	r2, #1
 810e1f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810e1f4:	687b      	ldr	r3, [r7, #4]
 810e1f6:	2201      	movs	r2, #1
 810e1f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 810e1fc:	687b      	ldr	r3, [r7, #4]
 810e1fe:	2201      	movs	r2, #1
 810e200:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810e204:	687b      	ldr	r3, [r7, #4]
 810e206:	2201      	movs	r2, #1
 810e208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 810e20c:	2300      	movs	r3, #0
}
 810e20e:	4618      	mov	r0, r3
 810e210:	3708      	adds	r7, #8
 810e212:	46bd      	mov	sp, r7
 810e214:	bd80      	pop	{r7, pc}

0810e216 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 810e216:	b480      	push	{r7}
 810e218:	b083      	sub	sp, #12
 810e21a:	af00      	add	r7, sp, #0
 810e21c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 810e21e:	bf00      	nop
 810e220:	370c      	adds	r7, #12
 810e222:	46bd      	mov	sp, r7
 810e224:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e228:	4770      	bx	lr
	...

0810e22c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 810e22c:	b480      	push	{r7}
 810e22e:	b085      	sub	sp, #20
 810e230:	af00      	add	r7, sp, #0
 810e232:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 810e234:	687b      	ldr	r3, [r7, #4]
 810e236:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810e23a:	b2db      	uxtb	r3, r3
 810e23c:	2b01      	cmp	r3, #1
 810e23e:	d001      	beq.n	810e244 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 810e240:	2301      	movs	r3, #1
 810e242:	e054      	b.n	810e2ee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810e244:	687b      	ldr	r3, [r7, #4]
 810e246:	2202      	movs	r2, #2
 810e248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 810e24c:	687b      	ldr	r3, [r7, #4]
 810e24e:	681b      	ldr	r3, [r3, #0]
 810e250:	68da      	ldr	r2, [r3, #12]
 810e252:	687b      	ldr	r3, [r7, #4]
 810e254:	681b      	ldr	r3, [r3, #0]
 810e256:	f042 0201 	orr.w	r2, r2, #1
 810e25a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810e25c:	687b      	ldr	r3, [r7, #4]
 810e25e:	681b      	ldr	r3, [r3, #0]
 810e260:	4a26      	ldr	r2, [pc, #152]	@ (810e2fc <HAL_TIM_Base_Start_IT+0xd0>)
 810e262:	4293      	cmp	r3, r2
 810e264:	d022      	beq.n	810e2ac <HAL_TIM_Base_Start_IT+0x80>
 810e266:	687b      	ldr	r3, [r7, #4]
 810e268:	681b      	ldr	r3, [r3, #0]
 810e26a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810e26e:	d01d      	beq.n	810e2ac <HAL_TIM_Base_Start_IT+0x80>
 810e270:	687b      	ldr	r3, [r7, #4]
 810e272:	681b      	ldr	r3, [r3, #0]
 810e274:	4a22      	ldr	r2, [pc, #136]	@ (810e300 <HAL_TIM_Base_Start_IT+0xd4>)
 810e276:	4293      	cmp	r3, r2
 810e278:	d018      	beq.n	810e2ac <HAL_TIM_Base_Start_IT+0x80>
 810e27a:	687b      	ldr	r3, [r7, #4]
 810e27c:	681b      	ldr	r3, [r3, #0]
 810e27e:	4a21      	ldr	r2, [pc, #132]	@ (810e304 <HAL_TIM_Base_Start_IT+0xd8>)
 810e280:	4293      	cmp	r3, r2
 810e282:	d013      	beq.n	810e2ac <HAL_TIM_Base_Start_IT+0x80>
 810e284:	687b      	ldr	r3, [r7, #4]
 810e286:	681b      	ldr	r3, [r3, #0]
 810e288:	4a1f      	ldr	r2, [pc, #124]	@ (810e308 <HAL_TIM_Base_Start_IT+0xdc>)
 810e28a:	4293      	cmp	r3, r2
 810e28c:	d00e      	beq.n	810e2ac <HAL_TIM_Base_Start_IT+0x80>
 810e28e:	687b      	ldr	r3, [r7, #4]
 810e290:	681b      	ldr	r3, [r3, #0]
 810e292:	4a1e      	ldr	r2, [pc, #120]	@ (810e30c <HAL_TIM_Base_Start_IT+0xe0>)
 810e294:	4293      	cmp	r3, r2
 810e296:	d009      	beq.n	810e2ac <HAL_TIM_Base_Start_IT+0x80>
 810e298:	687b      	ldr	r3, [r7, #4]
 810e29a:	681b      	ldr	r3, [r3, #0]
 810e29c:	4a1c      	ldr	r2, [pc, #112]	@ (810e310 <HAL_TIM_Base_Start_IT+0xe4>)
 810e29e:	4293      	cmp	r3, r2
 810e2a0:	d004      	beq.n	810e2ac <HAL_TIM_Base_Start_IT+0x80>
 810e2a2:	687b      	ldr	r3, [r7, #4]
 810e2a4:	681b      	ldr	r3, [r3, #0]
 810e2a6:	4a1b      	ldr	r2, [pc, #108]	@ (810e314 <HAL_TIM_Base_Start_IT+0xe8>)
 810e2a8:	4293      	cmp	r3, r2
 810e2aa:	d115      	bne.n	810e2d8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810e2ac:	687b      	ldr	r3, [r7, #4]
 810e2ae:	681b      	ldr	r3, [r3, #0]
 810e2b0:	689a      	ldr	r2, [r3, #8]
 810e2b2:	4b19      	ldr	r3, [pc, #100]	@ (810e318 <HAL_TIM_Base_Start_IT+0xec>)
 810e2b4:	4013      	ands	r3, r2
 810e2b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810e2b8:	68fb      	ldr	r3, [r7, #12]
 810e2ba:	2b06      	cmp	r3, #6
 810e2bc:	d015      	beq.n	810e2ea <HAL_TIM_Base_Start_IT+0xbe>
 810e2be:	68fb      	ldr	r3, [r7, #12]
 810e2c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810e2c4:	d011      	beq.n	810e2ea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 810e2c6:	687b      	ldr	r3, [r7, #4]
 810e2c8:	681b      	ldr	r3, [r3, #0]
 810e2ca:	681a      	ldr	r2, [r3, #0]
 810e2cc:	687b      	ldr	r3, [r7, #4]
 810e2ce:	681b      	ldr	r3, [r3, #0]
 810e2d0:	f042 0201 	orr.w	r2, r2, #1
 810e2d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810e2d6:	e008      	b.n	810e2ea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810e2d8:	687b      	ldr	r3, [r7, #4]
 810e2da:	681b      	ldr	r3, [r3, #0]
 810e2dc:	681a      	ldr	r2, [r3, #0]
 810e2de:	687b      	ldr	r3, [r7, #4]
 810e2e0:	681b      	ldr	r3, [r3, #0]
 810e2e2:	f042 0201 	orr.w	r2, r2, #1
 810e2e6:	601a      	str	r2, [r3, #0]
 810e2e8:	e000      	b.n	810e2ec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810e2ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810e2ec:	2300      	movs	r3, #0
}
 810e2ee:	4618      	mov	r0, r3
 810e2f0:	3714      	adds	r7, #20
 810e2f2:	46bd      	mov	sp, r7
 810e2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e2f8:	4770      	bx	lr
 810e2fa:	bf00      	nop
 810e2fc:	40010000 	.word	0x40010000
 810e300:	40000400 	.word	0x40000400
 810e304:	40000800 	.word	0x40000800
 810e308:	40000c00 	.word	0x40000c00
 810e30c:	40010400 	.word	0x40010400
 810e310:	40001800 	.word	0x40001800
 810e314:	40014000 	.word	0x40014000
 810e318:	00010007 	.word	0x00010007

0810e31c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 810e31c:	b580      	push	{r7, lr}
 810e31e:	b084      	sub	sp, #16
 810e320:	af00      	add	r7, sp, #0
 810e322:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 810e324:	687b      	ldr	r3, [r7, #4]
 810e326:	681b      	ldr	r3, [r3, #0]
 810e328:	68db      	ldr	r3, [r3, #12]
 810e32a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 810e32c:	687b      	ldr	r3, [r7, #4]
 810e32e:	681b      	ldr	r3, [r3, #0]
 810e330:	691b      	ldr	r3, [r3, #16]
 810e332:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 810e334:	68bb      	ldr	r3, [r7, #8]
 810e336:	f003 0302 	and.w	r3, r3, #2
 810e33a:	2b00      	cmp	r3, #0
 810e33c:	d020      	beq.n	810e380 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 810e33e:	68fb      	ldr	r3, [r7, #12]
 810e340:	f003 0302 	and.w	r3, r3, #2
 810e344:	2b00      	cmp	r3, #0
 810e346:	d01b      	beq.n	810e380 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 810e348:	687b      	ldr	r3, [r7, #4]
 810e34a:	681b      	ldr	r3, [r3, #0]
 810e34c:	f06f 0202 	mvn.w	r2, #2
 810e350:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810e352:	687b      	ldr	r3, [r7, #4]
 810e354:	2201      	movs	r2, #1
 810e356:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 810e358:	687b      	ldr	r3, [r7, #4]
 810e35a:	681b      	ldr	r3, [r3, #0]
 810e35c:	699b      	ldr	r3, [r3, #24]
 810e35e:	f003 0303 	and.w	r3, r3, #3
 810e362:	2b00      	cmp	r3, #0
 810e364:	d003      	beq.n	810e36e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 810e366:	6878      	ldr	r0, [r7, #4]
 810e368:	f000 f8e9 	bl	810e53e <HAL_TIM_IC_CaptureCallback>
 810e36c:	e005      	b.n	810e37a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810e36e:	6878      	ldr	r0, [r7, #4]
 810e370:	f000 f8db 	bl	810e52a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 810e374:	6878      	ldr	r0, [r7, #4]
 810e376:	f000 f8ec 	bl	810e552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810e37a:	687b      	ldr	r3, [r7, #4]
 810e37c:	2200      	movs	r2, #0
 810e37e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 810e380:	68bb      	ldr	r3, [r7, #8]
 810e382:	f003 0304 	and.w	r3, r3, #4
 810e386:	2b00      	cmp	r3, #0
 810e388:	d020      	beq.n	810e3cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 810e38a:	68fb      	ldr	r3, [r7, #12]
 810e38c:	f003 0304 	and.w	r3, r3, #4
 810e390:	2b00      	cmp	r3, #0
 810e392:	d01b      	beq.n	810e3cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 810e394:	687b      	ldr	r3, [r7, #4]
 810e396:	681b      	ldr	r3, [r3, #0]
 810e398:	f06f 0204 	mvn.w	r2, #4
 810e39c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 810e39e:	687b      	ldr	r3, [r7, #4]
 810e3a0:	2202      	movs	r2, #2
 810e3a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 810e3a4:	687b      	ldr	r3, [r7, #4]
 810e3a6:	681b      	ldr	r3, [r3, #0]
 810e3a8:	699b      	ldr	r3, [r3, #24]
 810e3aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810e3ae:	2b00      	cmp	r3, #0
 810e3b0:	d003      	beq.n	810e3ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810e3b2:	6878      	ldr	r0, [r7, #4]
 810e3b4:	f000 f8c3 	bl	810e53e <HAL_TIM_IC_CaptureCallback>
 810e3b8:	e005      	b.n	810e3c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810e3ba:	6878      	ldr	r0, [r7, #4]
 810e3bc:	f000 f8b5 	bl	810e52a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810e3c0:	6878      	ldr	r0, [r7, #4]
 810e3c2:	f000 f8c6 	bl	810e552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810e3c6:	687b      	ldr	r3, [r7, #4]
 810e3c8:	2200      	movs	r2, #0
 810e3ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 810e3cc:	68bb      	ldr	r3, [r7, #8]
 810e3ce:	f003 0308 	and.w	r3, r3, #8
 810e3d2:	2b00      	cmp	r3, #0
 810e3d4:	d020      	beq.n	810e418 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 810e3d6:	68fb      	ldr	r3, [r7, #12]
 810e3d8:	f003 0308 	and.w	r3, r3, #8
 810e3dc:	2b00      	cmp	r3, #0
 810e3de:	d01b      	beq.n	810e418 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 810e3e0:	687b      	ldr	r3, [r7, #4]
 810e3e2:	681b      	ldr	r3, [r3, #0]
 810e3e4:	f06f 0208 	mvn.w	r2, #8
 810e3e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 810e3ea:	687b      	ldr	r3, [r7, #4]
 810e3ec:	2204      	movs	r2, #4
 810e3ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 810e3f0:	687b      	ldr	r3, [r7, #4]
 810e3f2:	681b      	ldr	r3, [r3, #0]
 810e3f4:	69db      	ldr	r3, [r3, #28]
 810e3f6:	f003 0303 	and.w	r3, r3, #3
 810e3fa:	2b00      	cmp	r3, #0
 810e3fc:	d003      	beq.n	810e406 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810e3fe:	6878      	ldr	r0, [r7, #4]
 810e400:	f000 f89d 	bl	810e53e <HAL_TIM_IC_CaptureCallback>
 810e404:	e005      	b.n	810e412 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810e406:	6878      	ldr	r0, [r7, #4]
 810e408:	f000 f88f 	bl	810e52a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810e40c:	6878      	ldr	r0, [r7, #4]
 810e40e:	f000 f8a0 	bl	810e552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810e412:	687b      	ldr	r3, [r7, #4]
 810e414:	2200      	movs	r2, #0
 810e416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 810e418:	68bb      	ldr	r3, [r7, #8]
 810e41a:	f003 0310 	and.w	r3, r3, #16
 810e41e:	2b00      	cmp	r3, #0
 810e420:	d020      	beq.n	810e464 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 810e422:	68fb      	ldr	r3, [r7, #12]
 810e424:	f003 0310 	and.w	r3, r3, #16
 810e428:	2b00      	cmp	r3, #0
 810e42a:	d01b      	beq.n	810e464 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 810e42c:	687b      	ldr	r3, [r7, #4]
 810e42e:	681b      	ldr	r3, [r3, #0]
 810e430:	f06f 0210 	mvn.w	r2, #16
 810e434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810e436:	687b      	ldr	r3, [r7, #4]
 810e438:	2208      	movs	r2, #8
 810e43a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 810e43c:	687b      	ldr	r3, [r7, #4]
 810e43e:	681b      	ldr	r3, [r3, #0]
 810e440:	69db      	ldr	r3, [r3, #28]
 810e442:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810e446:	2b00      	cmp	r3, #0
 810e448:	d003      	beq.n	810e452 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810e44a:	6878      	ldr	r0, [r7, #4]
 810e44c:	f000 f877 	bl	810e53e <HAL_TIM_IC_CaptureCallback>
 810e450:	e005      	b.n	810e45e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810e452:	6878      	ldr	r0, [r7, #4]
 810e454:	f000 f869 	bl	810e52a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810e458:	6878      	ldr	r0, [r7, #4]
 810e45a:	f000 f87a 	bl	810e552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810e45e:	687b      	ldr	r3, [r7, #4]
 810e460:	2200      	movs	r2, #0
 810e462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 810e464:	68bb      	ldr	r3, [r7, #8]
 810e466:	f003 0301 	and.w	r3, r3, #1
 810e46a:	2b00      	cmp	r3, #0
 810e46c:	d00c      	beq.n	810e488 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 810e46e:	68fb      	ldr	r3, [r7, #12]
 810e470:	f003 0301 	and.w	r3, r3, #1
 810e474:	2b00      	cmp	r3, #0
 810e476:	d007      	beq.n	810e488 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 810e478:	687b      	ldr	r3, [r7, #4]
 810e47a:	681b      	ldr	r3, [r3, #0]
 810e47c:	f06f 0201 	mvn.w	r2, #1
 810e480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810e482:	6878      	ldr	r0, [r7, #4]
 810e484:	f7f2 fc5e 	bl	8100d44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 810e488:	68bb      	ldr	r3, [r7, #8]
 810e48a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810e48e:	2b00      	cmp	r3, #0
 810e490:	d104      	bne.n	810e49c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 810e492:	68bb      	ldr	r3, [r7, #8]
 810e494:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 810e498:	2b00      	cmp	r3, #0
 810e49a:	d00c      	beq.n	810e4b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 810e49c:	68fb      	ldr	r3, [r7, #12]
 810e49e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810e4a2:	2b00      	cmp	r3, #0
 810e4a4:	d007      	beq.n	810e4b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 810e4a6:	687b      	ldr	r3, [r7, #4]
 810e4a8:	681b      	ldr	r3, [r3, #0]
 810e4aa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 810e4ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810e4b0:	6878      	ldr	r0, [r7, #4]
 810e4b2:	f000 f913 	bl	810e6dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 810e4b6:	68bb      	ldr	r3, [r7, #8]
 810e4b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810e4bc:	2b00      	cmp	r3, #0
 810e4be:	d00c      	beq.n	810e4da <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 810e4c0:	68fb      	ldr	r3, [r7, #12]
 810e4c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810e4c6:	2b00      	cmp	r3, #0
 810e4c8:	d007      	beq.n	810e4da <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 810e4ca:	687b      	ldr	r3, [r7, #4]
 810e4cc:	681b      	ldr	r3, [r3, #0]
 810e4ce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 810e4d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 810e4d4:	6878      	ldr	r0, [r7, #4]
 810e4d6:	f000 f90b 	bl	810e6f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 810e4da:	68bb      	ldr	r3, [r7, #8]
 810e4dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810e4e0:	2b00      	cmp	r3, #0
 810e4e2:	d00c      	beq.n	810e4fe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 810e4e4:	68fb      	ldr	r3, [r7, #12]
 810e4e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810e4ea:	2b00      	cmp	r3, #0
 810e4ec:	d007      	beq.n	810e4fe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 810e4ee:	687b      	ldr	r3, [r7, #4]
 810e4f0:	681b      	ldr	r3, [r3, #0]
 810e4f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 810e4f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 810e4f8:	6878      	ldr	r0, [r7, #4]
 810e4fa:	f000 f834 	bl	810e566 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 810e4fe:	68bb      	ldr	r3, [r7, #8]
 810e500:	f003 0320 	and.w	r3, r3, #32
 810e504:	2b00      	cmp	r3, #0
 810e506:	d00c      	beq.n	810e522 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 810e508:	68fb      	ldr	r3, [r7, #12]
 810e50a:	f003 0320 	and.w	r3, r3, #32
 810e50e:	2b00      	cmp	r3, #0
 810e510:	d007      	beq.n	810e522 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 810e512:	687b      	ldr	r3, [r7, #4]
 810e514:	681b      	ldr	r3, [r3, #0]
 810e516:	f06f 0220 	mvn.w	r2, #32
 810e51a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 810e51c:	6878      	ldr	r0, [r7, #4]
 810e51e:	f000 f8d3 	bl	810e6c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810e522:	bf00      	nop
 810e524:	3710      	adds	r7, #16
 810e526:	46bd      	mov	sp, r7
 810e528:	bd80      	pop	{r7, pc}

0810e52a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 810e52a:	b480      	push	{r7}
 810e52c:	b083      	sub	sp, #12
 810e52e:	af00      	add	r7, sp, #0
 810e530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 810e532:	bf00      	nop
 810e534:	370c      	adds	r7, #12
 810e536:	46bd      	mov	sp, r7
 810e538:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e53c:	4770      	bx	lr

0810e53e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810e53e:	b480      	push	{r7}
 810e540:	b083      	sub	sp, #12
 810e542:	af00      	add	r7, sp, #0
 810e544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 810e546:	bf00      	nop
 810e548:	370c      	adds	r7, #12
 810e54a:	46bd      	mov	sp, r7
 810e54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e550:	4770      	bx	lr

0810e552 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 810e552:	b480      	push	{r7}
 810e554:	b083      	sub	sp, #12
 810e556:	af00      	add	r7, sp, #0
 810e558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810e55a:	bf00      	nop
 810e55c:	370c      	adds	r7, #12
 810e55e:	46bd      	mov	sp, r7
 810e560:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e564:	4770      	bx	lr

0810e566 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 810e566:	b480      	push	{r7}
 810e568:	b083      	sub	sp, #12
 810e56a:	af00      	add	r7, sp, #0
 810e56c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 810e56e:	bf00      	nop
 810e570:	370c      	adds	r7, #12
 810e572:	46bd      	mov	sp, r7
 810e574:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e578:	4770      	bx	lr
	...

0810e57c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 810e57c:	b480      	push	{r7}
 810e57e:	b085      	sub	sp, #20
 810e580:	af00      	add	r7, sp, #0
 810e582:	6078      	str	r0, [r7, #4]
 810e584:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810e586:	687b      	ldr	r3, [r7, #4]
 810e588:	681b      	ldr	r3, [r3, #0]
 810e58a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810e58c:	687b      	ldr	r3, [r7, #4]
 810e58e:	4a46      	ldr	r2, [pc, #280]	@ (810e6a8 <TIM_Base_SetConfig+0x12c>)
 810e590:	4293      	cmp	r3, r2
 810e592:	d013      	beq.n	810e5bc <TIM_Base_SetConfig+0x40>
 810e594:	687b      	ldr	r3, [r7, #4]
 810e596:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810e59a:	d00f      	beq.n	810e5bc <TIM_Base_SetConfig+0x40>
 810e59c:	687b      	ldr	r3, [r7, #4]
 810e59e:	4a43      	ldr	r2, [pc, #268]	@ (810e6ac <TIM_Base_SetConfig+0x130>)
 810e5a0:	4293      	cmp	r3, r2
 810e5a2:	d00b      	beq.n	810e5bc <TIM_Base_SetConfig+0x40>
 810e5a4:	687b      	ldr	r3, [r7, #4]
 810e5a6:	4a42      	ldr	r2, [pc, #264]	@ (810e6b0 <TIM_Base_SetConfig+0x134>)
 810e5a8:	4293      	cmp	r3, r2
 810e5aa:	d007      	beq.n	810e5bc <TIM_Base_SetConfig+0x40>
 810e5ac:	687b      	ldr	r3, [r7, #4]
 810e5ae:	4a41      	ldr	r2, [pc, #260]	@ (810e6b4 <TIM_Base_SetConfig+0x138>)
 810e5b0:	4293      	cmp	r3, r2
 810e5b2:	d003      	beq.n	810e5bc <TIM_Base_SetConfig+0x40>
 810e5b4:	687b      	ldr	r3, [r7, #4]
 810e5b6:	4a40      	ldr	r2, [pc, #256]	@ (810e6b8 <TIM_Base_SetConfig+0x13c>)
 810e5b8:	4293      	cmp	r3, r2
 810e5ba:	d108      	bne.n	810e5ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810e5bc:	68fb      	ldr	r3, [r7, #12]
 810e5be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810e5c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 810e5c4:	683b      	ldr	r3, [r7, #0]
 810e5c6:	685b      	ldr	r3, [r3, #4]
 810e5c8:	68fa      	ldr	r2, [r7, #12]
 810e5ca:	4313      	orrs	r3, r2
 810e5cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810e5ce:	687b      	ldr	r3, [r7, #4]
 810e5d0:	4a35      	ldr	r2, [pc, #212]	@ (810e6a8 <TIM_Base_SetConfig+0x12c>)
 810e5d2:	4293      	cmp	r3, r2
 810e5d4:	d01f      	beq.n	810e616 <TIM_Base_SetConfig+0x9a>
 810e5d6:	687b      	ldr	r3, [r7, #4]
 810e5d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810e5dc:	d01b      	beq.n	810e616 <TIM_Base_SetConfig+0x9a>
 810e5de:	687b      	ldr	r3, [r7, #4]
 810e5e0:	4a32      	ldr	r2, [pc, #200]	@ (810e6ac <TIM_Base_SetConfig+0x130>)
 810e5e2:	4293      	cmp	r3, r2
 810e5e4:	d017      	beq.n	810e616 <TIM_Base_SetConfig+0x9a>
 810e5e6:	687b      	ldr	r3, [r7, #4]
 810e5e8:	4a31      	ldr	r2, [pc, #196]	@ (810e6b0 <TIM_Base_SetConfig+0x134>)
 810e5ea:	4293      	cmp	r3, r2
 810e5ec:	d013      	beq.n	810e616 <TIM_Base_SetConfig+0x9a>
 810e5ee:	687b      	ldr	r3, [r7, #4]
 810e5f0:	4a30      	ldr	r2, [pc, #192]	@ (810e6b4 <TIM_Base_SetConfig+0x138>)
 810e5f2:	4293      	cmp	r3, r2
 810e5f4:	d00f      	beq.n	810e616 <TIM_Base_SetConfig+0x9a>
 810e5f6:	687b      	ldr	r3, [r7, #4]
 810e5f8:	4a2f      	ldr	r2, [pc, #188]	@ (810e6b8 <TIM_Base_SetConfig+0x13c>)
 810e5fa:	4293      	cmp	r3, r2
 810e5fc:	d00b      	beq.n	810e616 <TIM_Base_SetConfig+0x9a>
 810e5fe:	687b      	ldr	r3, [r7, #4]
 810e600:	4a2e      	ldr	r2, [pc, #184]	@ (810e6bc <TIM_Base_SetConfig+0x140>)
 810e602:	4293      	cmp	r3, r2
 810e604:	d007      	beq.n	810e616 <TIM_Base_SetConfig+0x9a>
 810e606:	687b      	ldr	r3, [r7, #4]
 810e608:	4a2d      	ldr	r2, [pc, #180]	@ (810e6c0 <TIM_Base_SetConfig+0x144>)
 810e60a:	4293      	cmp	r3, r2
 810e60c:	d003      	beq.n	810e616 <TIM_Base_SetConfig+0x9a>
 810e60e:	687b      	ldr	r3, [r7, #4]
 810e610:	4a2c      	ldr	r2, [pc, #176]	@ (810e6c4 <TIM_Base_SetConfig+0x148>)
 810e612:	4293      	cmp	r3, r2
 810e614:	d108      	bne.n	810e628 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810e616:	68fb      	ldr	r3, [r7, #12]
 810e618:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810e61c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810e61e:	683b      	ldr	r3, [r7, #0]
 810e620:	68db      	ldr	r3, [r3, #12]
 810e622:	68fa      	ldr	r2, [r7, #12]
 810e624:	4313      	orrs	r3, r2
 810e626:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 810e628:	68fb      	ldr	r3, [r7, #12]
 810e62a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 810e62e:	683b      	ldr	r3, [r7, #0]
 810e630:	695b      	ldr	r3, [r3, #20]
 810e632:	4313      	orrs	r3, r2
 810e634:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810e636:	687b      	ldr	r3, [r7, #4]
 810e638:	68fa      	ldr	r2, [r7, #12]
 810e63a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810e63c:	683b      	ldr	r3, [r7, #0]
 810e63e:	689a      	ldr	r2, [r3, #8]
 810e640:	687b      	ldr	r3, [r7, #4]
 810e642:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 810e644:	683b      	ldr	r3, [r7, #0]
 810e646:	681a      	ldr	r2, [r3, #0]
 810e648:	687b      	ldr	r3, [r7, #4]
 810e64a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810e64c:	687b      	ldr	r3, [r7, #4]
 810e64e:	4a16      	ldr	r2, [pc, #88]	@ (810e6a8 <TIM_Base_SetConfig+0x12c>)
 810e650:	4293      	cmp	r3, r2
 810e652:	d00f      	beq.n	810e674 <TIM_Base_SetConfig+0xf8>
 810e654:	687b      	ldr	r3, [r7, #4]
 810e656:	4a18      	ldr	r2, [pc, #96]	@ (810e6b8 <TIM_Base_SetConfig+0x13c>)
 810e658:	4293      	cmp	r3, r2
 810e65a:	d00b      	beq.n	810e674 <TIM_Base_SetConfig+0xf8>
 810e65c:	687b      	ldr	r3, [r7, #4]
 810e65e:	4a17      	ldr	r2, [pc, #92]	@ (810e6bc <TIM_Base_SetConfig+0x140>)
 810e660:	4293      	cmp	r3, r2
 810e662:	d007      	beq.n	810e674 <TIM_Base_SetConfig+0xf8>
 810e664:	687b      	ldr	r3, [r7, #4]
 810e666:	4a16      	ldr	r2, [pc, #88]	@ (810e6c0 <TIM_Base_SetConfig+0x144>)
 810e668:	4293      	cmp	r3, r2
 810e66a:	d003      	beq.n	810e674 <TIM_Base_SetConfig+0xf8>
 810e66c:	687b      	ldr	r3, [r7, #4]
 810e66e:	4a15      	ldr	r2, [pc, #84]	@ (810e6c4 <TIM_Base_SetConfig+0x148>)
 810e670:	4293      	cmp	r3, r2
 810e672:	d103      	bne.n	810e67c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 810e674:	683b      	ldr	r3, [r7, #0]
 810e676:	691a      	ldr	r2, [r3, #16]
 810e678:	687b      	ldr	r3, [r7, #4]
 810e67a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810e67c:	687b      	ldr	r3, [r7, #4]
 810e67e:	2201      	movs	r2, #1
 810e680:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 810e682:	687b      	ldr	r3, [r7, #4]
 810e684:	691b      	ldr	r3, [r3, #16]
 810e686:	f003 0301 	and.w	r3, r3, #1
 810e68a:	2b01      	cmp	r3, #1
 810e68c:	d105      	bne.n	810e69a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 810e68e:	687b      	ldr	r3, [r7, #4]
 810e690:	691b      	ldr	r3, [r3, #16]
 810e692:	f023 0201 	bic.w	r2, r3, #1
 810e696:	687b      	ldr	r3, [r7, #4]
 810e698:	611a      	str	r2, [r3, #16]
  }
}
 810e69a:	bf00      	nop
 810e69c:	3714      	adds	r7, #20
 810e69e:	46bd      	mov	sp, r7
 810e6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e6a4:	4770      	bx	lr
 810e6a6:	bf00      	nop
 810e6a8:	40010000 	.word	0x40010000
 810e6ac:	40000400 	.word	0x40000400
 810e6b0:	40000800 	.word	0x40000800
 810e6b4:	40000c00 	.word	0x40000c00
 810e6b8:	40010400 	.word	0x40010400
 810e6bc:	40014000 	.word	0x40014000
 810e6c0:	40014400 	.word	0x40014400
 810e6c4:	40014800 	.word	0x40014800

0810e6c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 810e6c8:	b480      	push	{r7}
 810e6ca:	b083      	sub	sp, #12
 810e6cc:	af00      	add	r7, sp, #0
 810e6ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 810e6d0:	bf00      	nop
 810e6d2:	370c      	adds	r7, #12
 810e6d4:	46bd      	mov	sp, r7
 810e6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e6da:	4770      	bx	lr

0810e6dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810e6dc:	b480      	push	{r7}
 810e6de:	b083      	sub	sp, #12
 810e6e0:	af00      	add	r7, sp, #0
 810e6e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 810e6e4:	bf00      	nop
 810e6e6:	370c      	adds	r7, #12
 810e6e8:	46bd      	mov	sp, r7
 810e6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e6ee:	4770      	bx	lr

0810e6f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 810e6f0:	b480      	push	{r7}
 810e6f2:	b083      	sub	sp, #12
 810e6f4:	af00      	add	r7, sp, #0
 810e6f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 810e6f8:	bf00      	nop
 810e6fa:	370c      	adds	r7, #12
 810e6fc:	46bd      	mov	sp, r7
 810e6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e702:	4770      	bx	lr

0810e704 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810e704:	b580      	push	{r7, lr}
 810e706:	b082      	sub	sp, #8
 810e708:	af00      	add	r7, sp, #0
 810e70a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810e70c:	687b      	ldr	r3, [r7, #4]
 810e70e:	2b00      	cmp	r3, #0
 810e710:	d101      	bne.n	810e716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810e712:	2301      	movs	r3, #1
 810e714:	e042      	b.n	810e79c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810e716:	687b      	ldr	r3, [r7, #4]
 810e718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810e71c:	2b00      	cmp	r3, #0
 810e71e:	d106      	bne.n	810e72e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810e720:	687b      	ldr	r3, [r7, #4]
 810e722:	2200      	movs	r2, #0
 810e724:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810e728:	6878      	ldr	r0, [r7, #4]
 810e72a:	f7f2 fc1b 	bl	8100f64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810e72e:	687b      	ldr	r3, [r7, #4]
 810e730:	2224      	movs	r2, #36	@ 0x24
 810e732:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 810e736:	687b      	ldr	r3, [r7, #4]
 810e738:	681b      	ldr	r3, [r3, #0]
 810e73a:	681a      	ldr	r2, [r3, #0]
 810e73c:	687b      	ldr	r3, [r7, #4]
 810e73e:	681b      	ldr	r3, [r3, #0]
 810e740:	f022 0201 	bic.w	r2, r2, #1
 810e744:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810e746:	687b      	ldr	r3, [r7, #4]
 810e748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810e74a:	2b00      	cmp	r3, #0
 810e74c:	d002      	beq.n	810e754 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 810e74e:	6878      	ldr	r0, [r7, #4]
 810e750:	f000 fe1e 	bl	810f390 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810e754:	6878      	ldr	r0, [r7, #4]
 810e756:	f000 f8b3 	bl	810e8c0 <UART_SetConfig>
 810e75a:	4603      	mov	r3, r0
 810e75c:	2b01      	cmp	r3, #1
 810e75e:	d101      	bne.n	810e764 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 810e760:	2301      	movs	r3, #1
 810e762:	e01b      	b.n	810e79c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810e764:	687b      	ldr	r3, [r7, #4]
 810e766:	681b      	ldr	r3, [r3, #0]
 810e768:	685a      	ldr	r2, [r3, #4]
 810e76a:	687b      	ldr	r3, [r7, #4]
 810e76c:	681b      	ldr	r3, [r3, #0]
 810e76e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 810e772:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810e774:	687b      	ldr	r3, [r7, #4]
 810e776:	681b      	ldr	r3, [r3, #0]
 810e778:	689a      	ldr	r2, [r3, #8]
 810e77a:	687b      	ldr	r3, [r7, #4]
 810e77c:	681b      	ldr	r3, [r3, #0]
 810e77e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 810e782:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810e784:	687b      	ldr	r3, [r7, #4]
 810e786:	681b      	ldr	r3, [r3, #0]
 810e788:	681a      	ldr	r2, [r3, #0]
 810e78a:	687b      	ldr	r3, [r7, #4]
 810e78c:	681b      	ldr	r3, [r3, #0]
 810e78e:	f042 0201 	orr.w	r2, r2, #1
 810e792:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810e794:	6878      	ldr	r0, [r7, #4]
 810e796:	f000 fe9d 	bl	810f4d4 <UART_CheckIdleState>
 810e79a:	4603      	mov	r3, r0
}
 810e79c:	4618      	mov	r0, r3
 810e79e:	3708      	adds	r7, #8
 810e7a0:	46bd      	mov	sp, r7
 810e7a2:	bd80      	pop	{r7, pc}

0810e7a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810e7a4:	b580      	push	{r7, lr}
 810e7a6:	b08a      	sub	sp, #40	@ 0x28
 810e7a8:	af02      	add	r7, sp, #8
 810e7aa:	60f8      	str	r0, [r7, #12]
 810e7ac:	60b9      	str	r1, [r7, #8]
 810e7ae:	603b      	str	r3, [r7, #0]
 810e7b0:	4613      	mov	r3, r2
 810e7b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810e7b4:	68fb      	ldr	r3, [r7, #12]
 810e7b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810e7ba:	2b20      	cmp	r3, #32
 810e7bc:	d17b      	bne.n	810e8b6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 810e7be:	68bb      	ldr	r3, [r7, #8]
 810e7c0:	2b00      	cmp	r3, #0
 810e7c2:	d002      	beq.n	810e7ca <HAL_UART_Transmit+0x26>
 810e7c4:	88fb      	ldrh	r3, [r7, #6]
 810e7c6:	2b00      	cmp	r3, #0
 810e7c8:	d101      	bne.n	810e7ce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 810e7ca:	2301      	movs	r3, #1
 810e7cc:	e074      	b.n	810e8b8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810e7ce:	68fb      	ldr	r3, [r7, #12]
 810e7d0:	2200      	movs	r2, #0
 810e7d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810e7d6:	68fb      	ldr	r3, [r7, #12]
 810e7d8:	2221      	movs	r2, #33	@ 0x21
 810e7da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 810e7de:	f7fa fd0f 	bl	8109200 <HAL_GetTick>
 810e7e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 810e7e4:	68fb      	ldr	r3, [r7, #12]
 810e7e6:	88fa      	ldrh	r2, [r7, #6]
 810e7e8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 810e7ec:	68fb      	ldr	r3, [r7, #12]
 810e7ee:	88fa      	ldrh	r2, [r7, #6]
 810e7f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810e7f4:	68fb      	ldr	r3, [r7, #12]
 810e7f6:	689b      	ldr	r3, [r3, #8]
 810e7f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810e7fc:	d108      	bne.n	810e810 <HAL_UART_Transmit+0x6c>
 810e7fe:	68fb      	ldr	r3, [r7, #12]
 810e800:	691b      	ldr	r3, [r3, #16]
 810e802:	2b00      	cmp	r3, #0
 810e804:	d104      	bne.n	810e810 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 810e806:	2300      	movs	r3, #0
 810e808:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 810e80a:	68bb      	ldr	r3, [r7, #8]
 810e80c:	61bb      	str	r3, [r7, #24]
 810e80e:	e003      	b.n	810e818 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 810e810:	68bb      	ldr	r3, [r7, #8]
 810e812:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 810e814:	2300      	movs	r3, #0
 810e816:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 810e818:	e030      	b.n	810e87c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 810e81a:	683b      	ldr	r3, [r7, #0]
 810e81c:	9300      	str	r3, [sp, #0]
 810e81e:	697b      	ldr	r3, [r7, #20]
 810e820:	2200      	movs	r2, #0
 810e822:	2180      	movs	r1, #128	@ 0x80
 810e824:	68f8      	ldr	r0, [r7, #12]
 810e826:	f000 feff 	bl	810f628 <UART_WaitOnFlagUntilTimeout>
 810e82a:	4603      	mov	r3, r0
 810e82c:	2b00      	cmp	r3, #0
 810e82e:	d005      	beq.n	810e83c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 810e830:	68fb      	ldr	r3, [r7, #12]
 810e832:	2220      	movs	r2, #32
 810e834:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 810e838:	2303      	movs	r3, #3
 810e83a:	e03d      	b.n	810e8b8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 810e83c:	69fb      	ldr	r3, [r7, #28]
 810e83e:	2b00      	cmp	r3, #0
 810e840:	d10b      	bne.n	810e85a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 810e842:	69bb      	ldr	r3, [r7, #24]
 810e844:	881b      	ldrh	r3, [r3, #0]
 810e846:	461a      	mov	r2, r3
 810e848:	68fb      	ldr	r3, [r7, #12]
 810e84a:	681b      	ldr	r3, [r3, #0]
 810e84c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 810e850:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 810e852:	69bb      	ldr	r3, [r7, #24]
 810e854:	3302      	adds	r3, #2
 810e856:	61bb      	str	r3, [r7, #24]
 810e858:	e007      	b.n	810e86a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 810e85a:	69fb      	ldr	r3, [r7, #28]
 810e85c:	781a      	ldrb	r2, [r3, #0]
 810e85e:	68fb      	ldr	r3, [r7, #12]
 810e860:	681b      	ldr	r3, [r3, #0]
 810e862:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 810e864:	69fb      	ldr	r3, [r7, #28]
 810e866:	3301      	adds	r3, #1
 810e868:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 810e86a:	68fb      	ldr	r3, [r7, #12]
 810e86c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 810e870:	b29b      	uxth	r3, r3
 810e872:	3b01      	subs	r3, #1
 810e874:	b29a      	uxth	r2, r3
 810e876:	68fb      	ldr	r3, [r7, #12]
 810e878:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 810e87c:	68fb      	ldr	r3, [r7, #12]
 810e87e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 810e882:	b29b      	uxth	r3, r3
 810e884:	2b00      	cmp	r3, #0
 810e886:	d1c8      	bne.n	810e81a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 810e888:	683b      	ldr	r3, [r7, #0]
 810e88a:	9300      	str	r3, [sp, #0]
 810e88c:	697b      	ldr	r3, [r7, #20]
 810e88e:	2200      	movs	r2, #0
 810e890:	2140      	movs	r1, #64	@ 0x40
 810e892:	68f8      	ldr	r0, [r7, #12]
 810e894:	f000 fec8 	bl	810f628 <UART_WaitOnFlagUntilTimeout>
 810e898:	4603      	mov	r3, r0
 810e89a:	2b00      	cmp	r3, #0
 810e89c:	d005      	beq.n	810e8aa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 810e89e:	68fb      	ldr	r3, [r7, #12]
 810e8a0:	2220      	movs	r2, #32
 810e8a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 810e8a6:	2303      	movs	r3, #3
 810e8a8:	e006      	b.n	810e8b8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 810e8aa:	68fb      	ldr	r3, [r7, #12]
 810e8ac:	2220      	movs	r2, #32
 810e8ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 810e8b2:	2300      	movs	r3, #0
 810e8b4:	e000      	b.n	810e8b8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 810e8b6:	2302      	movs	r3, #2
  }
}
 810e8b8:	4618      	mov	r0, r3
 810e8ba:	3720      	adds	r7, #32
 810e8bc:	46bd      	mov	sp, r7
 810e8be:	bd80      	pop	{r7, pc}

0810e8c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810e8c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810e8c4:	b092      	sub	sp, #72	@ 0x48
 810e8c6:	af00      	add	r7, sp, #0
 810e8c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810e8ca:	2300      	movs	r3, #0
 810e8cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810e8d0:	697b      	ldr	r3, [r7, #20]
 810e8d2:	689a      	ldr	r2, [r3, #8]
 810e8d4:	697b      	ldr	r3, [r7, #20]
 810e8d6:	691b      	ldr	r3, [r3, #16]
 810e8d8:	431a      	orrs	r2, r3
 810e8da:	697b      	ldr	r3, [r7, #20]
 810e8dc:	695b      	ldr	r3, [r3, #20]
 810e8de:	431a      	orrs	r2, r3
 810e8e0:	697b      	ldr	r3, [r7, #20]
 810e8e2:	69db      	ldr	r3, [r3, #28]
 810e8e4:	4313      	orrs	r3, r2
 810e8e6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810e8e8:	697b      	ldr	r3, [r7, #20]
 810e8ea:	681b      	ldr	r3, [r3, #0]
 810e8ec:	681a      	ldr	r2, [r3, #0]
 810e8ee:	4bbd      	ldr	r3, [pc, #756]	@ (810ebe4 <UART_SetConfig+0x324>)
 810e8f0:	4013      	ands	r3, r2
 810e8f2:	697a      	ldr	r2, [r7, #20]
 810e8f4:	6812      	ldr	r2, [r2, #0]
 810e8f6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810e8f8:	430b      	orrs	r3, r1
 810e8fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810e8fc:	697b      	ldr	r3, [r7, #20]
 810e8fe:	681b      	ldr	r3, [r3, #0]
 810e900:	685b      	ldr	r3, [r3, #4]
 810e902:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810e906:	697b      	ldr	r3, [r7, #20]
 810e908:	68da      	ldr	r2, [r3, #12]
 810e90a:	697b      	ldr	r3, [r7, #20]
 810e90c:	681b      	ldr	r3, [r3, #0]
 810e90e:	430a      	orrs	r2, r1
 810e910:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810e912:	697b      	ldr	r3, [r7, #20]
 810e914:	699b      	ldr	r3, [r3, #24]
 810e916:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810e918:	697b      	ldr	r3, [r7, #20]
 810e91a:	681b      	ldr	r3, [r3, #0]
 810e91c:	4ab2      	ldr	r2, [pc, #712]	@ (810ebe8 <UART_SetConfig+0x328>)
 810e91e:	4293      	cmp	r3, r2
 810e920:	d004      	beq.n	810e92c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810e922:	697b      	ldr	r3, [r7, #20]
 810e924:	6a1b      	ldr	r3, [r3, #32]
 810e926:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810e928:	4313      	orrs	r3, r2
 810e92a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810e92c:	697b      	ldr	r3, [r7, #20]
 810e92e:	681b      	ldr	r3, [r3, #0]
 810e930:	689b      	ldr	r3, [r3, #8]
 810e932:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 810e936:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 810e93a:	697a      	ldr	r2, [r7, #20]
 810e93c:	6812      	ldr	r2, [r2, #0]
 810e93e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810e940:	430b      	orrs	r3, r1
 810e942:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810e944:	697b      	ldr	r3, [r7, #20]
 810e946:	681b      	ldr	r3, [r3, #0]
 810e948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e94a:	f023 010f 	bic.w	r1, r3, #15
 810e94e:	697b      	ldr	r3, [r7, #20]
 810e950:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810e952:	697b      	ldr	r3, [r7, #20]
 810e954:	681b      	ldr	r3, [r3, #0]
 810e956:	430a      	orrs	r2, r1
 810e958:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810e95a:	697b      	ldr	r3, [r7, #20]
 810e95c:	681b      	ldr	r3, [r3, #0]
 810e95e:	4aa3      	ldr	r2, [pc, #652]	@ (810ebec <UART_SetConfig+0x32c>)
 810e960:	4293      	cmp	r3, r2
 810e962:	d177      	bne.n	810ea54 <UART_SetConfig+0x194>
 810e964:	4ba2      	ldr	r3, [pc, #648]	@ (810ebf0 <UART_SetConfig+0x330>)
 810e966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810e968:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810e96c:	2b28      	cmp	r3, #40	@ 0x28
 810e96e:	d86d      	bhi.n	810ea4c <UART_SetConfig+0x18c>
 810e970:	a201      	add	r2, pc, #4	@ (adr r2, 810e978 <UART_SetConfig+0xb8>)
 810e972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810e976:	bf00      	nop
 810e978:	0810ea1d 	.word	0x0810ea1d
 810e97c:	0810ea4d 	.word	0x0810ea4d
 810e980:	0810ea4d 	.word	0x0810ea4d
 810e984:	0810ea4d 	.word	0x0810ea4d
 810e988:	0810ea4d 	.word	0x0810ea4d
 810e98c:	0810ea4d 	.word	0x0810ea4d
 810e990:	0810ea4d 	.word	0x0810ea4d
 810e994:	0810ea4d 	.word	0x0810ea4d
 810e998:	0810ea25 	.word	0x0810ea25
 810e99c:	0810ea4d 	.word	0x0810ea4d
 810e9a0:	0810ea4d 	.word	0x0810ea4d
 810e9a4:	0810ea4d 	.word	0x0810ea4d
 810e9a8:	0810ea4d 	.word	0x0810ea4d
 810e9ac:	0810ea4d 	.word	0x0810ea4d
 810e9b0:	0810ea4d 	.word	0x0810ea4d
 810e9b4:	0810ea4d 	.word	0x0810ea4d
 810e9b8:	0810ea2d 	.word	0x0810ea2d
 810e9bc:	0810ea4d 	.word	0x0810ea4d
 810e9c0:	0810ea4d 	.word	0x0810ea4d
 810e9c4:	0810ea4d 	.word	0x0810ea4d
 810e9c8:	0810ea4d 	.word	0x0810ea4d
 810e9cc:	0810ea4d 	.word	0x0810ea4d
 810e9d0:	0810ea4d 	.word	0x0810ea4d
 810e9d4:	0810ea4d 	.word	0x0810ea4d
 810e9d8:	0810ea35 	.word	0x0810ea35
 810e9dc:	0810ea4d 	.word	0x0810ea4d
 810e9e0:	0810ea4d 	.word	0x0810ea4d
 810e9e4:	0810ea4d 	.word	0x0810ea4d
 810e9e8:	0810ea4d 	.word	0x0810ea4d
 810e9ec:	0810ea4d 	.word	0x0810ea4d
 810e9f0:	0810ea4d 	.word	0x0810ea4d
 810e9f4:	0810ea4d 	.word	0x0810ea4d
 810e9f8:	0810ea3d 	.word	0x0810ea3d
 810e9fc:	0810ea4d 	.word	0x0810ea4d
 810ea00:	0810ea4d 	.word	0x0810ea4d
 810ea04:	0810ea4d 	.word	0x0810ea4d
 810ea08:	0810ea4d 	.word	0x0810ea4d
 810ea0c:	0810ea4d 	.word	0x0810ea4d
 810ea10:	0810ea4d 	.word	0x0810ea4d
 810ea14:	0810ea4d 	.word	0x0810ea4d
 810ea18:	0810ea45 	.word	0x0810ea45
 810ea1c:	2301      	movs	r3, #1
 810ea1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ea22:	e220      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810ea24:	2304      	movs	r3, #4
 810ea26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ea2a:	e21c      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810ea2c:	2308      	movs	r3, #8
 810ea2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ea32:	e218      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810ea34:	2310      	movs	r3, #16
 810ea36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ea3a:	e214      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810ea3c:	2320      	movs	r3, #32
 810ea3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ea42:	e210      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810ea44:	2340      	movs	r3, #64	@ 0x40
 810ea46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ea4a:	e20c      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810ea4c:	2380      	movs	r3, #128	@ 0x80
 810ea4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ea52:	e208      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810ea54:	697b      	ldr	r3, [r7, #20]
 810ea56:	681b      	ldr	r3, [r3, #0]
 810ea58:	4a66      	ldr	r2, [pc, #408]	@ (810ebf4 <UART_SetConfig+0x334>)
 810ea5a:	4293      	cmp	r3, r2
 810ea5c:	d130      	bne.n	810eac0 <UART_SetConfig+0x200>
 810ea5e:	4b64      	ldr	r3, [pc, #400]	@ (810ebf0 <UART_SetConfig+0x330>)
 810ea60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810ea62:	f003 0307 	and.w	r3, r3, #7
 810ea66:	2b05      	cmp	r3, #5
 810ea68:	d826      	bhi.n	810eab8 <UART_SetConfig+0x1f8>
 810ea6a:	a201      	add	r2, pc, #4	@ (adr r2, 810ea70 <UART_SetConfig+0x1b0>)
 810ea6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ea70:	0810ea89 	.word	0x0810ea89
 810ea74:	0810ea91 	.word	0x0810ea91
 810ea78:	0810ea99 	.word	0x0810ea99
 810ea7c:	0810eaa1 	.word	0x0810eaa1
 810ea80:	0810eaa9 	.word	0x0810eaa9
 810ea84:	0810eab1 	.word	0x0810eab1
 810ea88:	2300      	movs	r3, #0
 810ea8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ea8e:	e1ea      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810ea90:	2304      	movs	r3, #4
 810ea92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ea96:	e1e6      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810ea98:	2308      	movs	r3, #8
 810ea9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ea9e:	e1e2      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810eaa0:	2310      	movs	r3, #16
 810eaa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810eaa6:	e1de      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810eaa8:	2320      	movs	r3, #32
 810eaaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810eaae:	e1da      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810eab0:	2340      	movs	r3, #64	@ 0x40
 810eab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810eab6:	e1d6      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810eab8:	2380      	movs	r3, #128	@ 0x80
 810eaba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810eabe:	e1d2      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810eac0:	697b      	ldr	r3, [r7, #20]
 810eac2:	681b      	ldr	r3, [r3, #0]
 810eac4:	4a4c      	ldr	r2, [pc, #304]	@ (810ebf8 <UART_SetConfig+0x338>)
 810eac6:	4293      	cmp	r3, r2
 810eac8:	d130      	bne.n	810eb2c <UART_SetConfig+0x26c>
 810eaca:	4b49      	ldr	r3, [pc, #292]	@ (810ebf0 <UART_SetConfig+0x330>)
 810eacc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810eace:	f003 0307 	and.w	r3, r3, #7
 810ead2:	2b05      	cmp	r3, #5
 810ead4:	d826      	bhi.n	810eb24 <UART_SetConfig+0x264>
 810ead6:	a201      	add	r2, pc, #4	@ (adr r2, 810eadc <UART_SetConfig+0x21c>)
 810ead8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810eadc:	0810eaf5 	.word	0x0810eaf5
 810eae0:	0810eafd 	.word	0x0810eafd
 810eae4:	0810eb05 	.word	0x0810eb05
 810eae8:	0810eb0d 	.word	0x0810eb0d
 810eaec:	0810eb15 	.word	0x0810eb15
 810eaf0:	0810eb1d 	.word	0x0810eb1d
 810eaf4:	2300      	movs	r3, #0
 810eaf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810eafa:	e1b4      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810eafc:	2304      	movs	r3, #4
 810eafe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810eb02:	e1b0      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810eb04:	2308      	movs	r3, #8
 810eb06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810eb0a:	e1ac      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810eb0c:	2310      	movs	r3, #16
 810eb0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810eb12:	e1a8      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810eb14:	2320      	movs	r3, #32
 810eb16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810eb1a:	e1a4      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810eb1c:	2340      	movs	r3, #64	@ 0x40
 810eb1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810eb22:	e1a0      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810eb24:	2380      	movs	r3, #128	@ 0x80
 810eb26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810eb2a:	e19c      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810eb2c:	697b      	ldr	r3, [r7, #20]
 810eb2e:	681b      	ldr	r3, [r3, #0]
 810eb30:	4a32      	ldr	r2, [pc, #200]	@ (810ebfc <UART_SetConfig+0x33c>)
 810eb32:	4293      	cmp	r3, r2
 810eb34:	d130      	bne.n	810eb98 <UART_SetConfig+0x2d8>
 810eb36:	4b2e      	ldr	r3, [pc, #184]	@ (810ebf0 <UART_SetConfig+0x330>)
 810eb38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810eb3a:	f003 0307 	and.w	r3, r3, #7
 810eb3e:	2b05      	cmp	r3, #5
 810eb40:	d826      	bhi.n	810eb90 <UART_SetConfig+0x2d0>
 810eb42:	a201      	add	r2, pc, #4	@ (adr r2, 810eb48 <UART_SetConfig+0x288>)
 810eb44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810eb48:	0810eb61 	.word	0x0810eb61
 810eb4c:	0810eb69 	.word	0x0810eb69
 810eb50:	0810eb71 	.word	0x0810eb71
 810eb54:	0810eb79 	.word	0x0810eb79
 810eb58:	0810eb81 	.word	0x0810eb81
 810eb5c:	0810eb89 	.word	0x0810eb89
 810eb60:	2300      	movs	r3, #0
 810eb62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810eb66:	e17e      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810eb68:	2304      	movs	r3, #4
 810eb6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810eb6e:	e17a      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810eb70:	2308      	movs	r3, #8
 810eb72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810eb76:	e176      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810eb78:	2310      	movs	r3, #16
 810eb7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810eb7e:	e172      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810eb80:	2320      	movs	r3, #32
 810eb82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810eb86:	e16e      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810eb88:	2340      	movs	r3, #64	@ 0x40
 810eb8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810eb8e:	e16a      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810eb90:	2380      	movs	r3, #128	@ 0x80
 810eb92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810eb96:	e166      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810eb98:	697b      	ldr	r3, [r7, #20]
 810eb9a:	681b      	ldr	r3, [r3, #0]
 810eb9c:	4a18      	ldr	r2, [pc, #96]	@ (810ec00 <UART_SetConfig+0x340>)
 810eb9e:	4293      	cmp	r3, r2
 810eba0:	d140      	bne.n	810ec24 <UART_SetConfig+0x364>
 810eba2:	4b13      	ldr	r3, [pc, #76]	@ (810ebf0 <UART_SetConfig+0x330>)
 810eba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810eba6:	f003 0307 	and.w	r3, r3, #7
 810ebaa:	2b05      	cmp	r3, #5
 810ebac:	d836      	bhi.n	810ec1c <UART_SetConfig+0x35c>
 810ebae:	a201      	add	r2, pc, #4	@ (adr r2, 810ebb4 <UART_SetConfig+0x2f4>)
 810ebb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ebb4:	0810ebcd 	.word	0x0810ebcd
 810ebb8:	0810ebd5 	.word	0x0810ebd5
 810ebbc:	0810ebdd 	.word	0x0810ebdd
 810ebc0:	0810ec05 	.word	0x0810ec05
 810ebc4:	0810ec0d 	.word	0x0810ec0d
 810ebc8:	0810ec15 	.word	0x0810ec15
 810ebcc:	2300      	movs	r3, #0
 810ebce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ebd2:	e148      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810ebd4:	2304      	movs	r3, #4
 810ebd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ebda:	e144      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810ebdc:	2308      	movs	r3, #8
 810ebde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ebe2:	e140      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810ebe4:	cfff69f3 	.word	0xcfff69f3
 810ebe8:	58000c00 	.word	0x58000c00
 810ebec:	40011000 	.word	0x40011000
 810ebf0:	58024400 	.word	0x58024400
 810ebf4:	40004400 	.word	0x40004400
 810ebf8:	40004800 	.word	0x40004800
 810ebfc:	40004c00 	.word	0x40004c00
 810ec00:	40005000 	.word	0x40005000
 810ec04:	2310      	movs	r3, #16
 810ec06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ec0a:	e12c      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810ec0c:	2320      	movs	r3, #32
 810ec0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ec12:	e128      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810ec14:	2340      	movs	r3, #64	@ 0x40
 810ec16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ec1a:	e124      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810ec1c:	2380      	movs	r3, #128	@ 0x80
 810ec1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ec22:	e120      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810ec24:	697b      	ldr	r3, [r7, #20]
 810ec26:	681b      	ldr	r3, [r3, #0]
 810ec28:	4acb      	ldr	r2, [pc, #812]	@ (810ef58 <UART_SetConfig+0x698>)
 810ec2a:	4293      	cmp	r3, r2
 810ec2c:	d176      	bne.n	810ed1c <UART_SetConfig+0x45c>
 810ec2e:	4bcb      	ldr	r3, [pc, #812]	@ (810ef5c <UART_SetConfig+0x69c>)
 810ec30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810ec32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810ec36:	2b28      	cmp	r3, #40	@ 0x28
 810ec38:	d86c      	bhi.n	810ed14 <UART_SetConfig+0x454>
 810ec3a:	a201      	add	r2, pc, #4	@ (adr r2, 810ec40 <UART_SetConfig+0x380>)
 810ec3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ec40:	0810ece5 	.word	0x0810ece5
 810ec44:	0810ed15 	.word	0x0810ed15
 810ec48:	0810ed15 	.word	0x0810ed15
 810ec4c:	0810ed15 	.word	0x0810ed15
 810ec50:	0810ed15 	.word	0x0810ed15
 810ec54:	0810ed15 	.word	0x0810ed15
 810ec58:	0810ed15 	.word	0x0810ed15
 810ec5c:	0810ed15 	.word	0x0810ed15
 810ec60:	0810eced 	.word	0x0810eced
 810ec64:	0810ed15 	.word	0x0810ed15
 810ec68:	0810ed15 	.word	0x0810ed15
 810ec6c:	0810ed15 	.word	0x0810ed15
 810ec70:	0810ed15 	.word	0x0810ed15
 810ec74:	0810ed15 	.word	0x0810ed15
 810ec78:	0810ed15 	.word	0x0810ed15
 810ec7c:	0810ed15 	.word	0x0810ed15
 810ec80:	0810ecf5 	.word	0x0810ecf5
 810ec84:	0810ed15 	.word	0x0810ed15
 810ec88:	0810ed15 	.word	0x0810ed15
 810ec8c:	0810ed15 	.word	0x0810ed15
 810ec90:	0810ed15 	.word	0x0810ed15
 810ec94:	0810ed15 	.word	0x0810ed15
 810ec98:	0810ed15 	.word	0x0810ed15
 810ec9c:	0810ed15 	.word	0x0810ed15
 810eca0:	0810ecfd 	.word	0x0810ecfd
 810eca4:	0810ed15 	.word	0x0810ed15
 810eca8:	0810ed15 	.word	0x0810ed15
 810ecac:	0810ed15 	.word	0x0810ed15
 810ecb0:	0810ed15 	.word	0x0810ed15
 810ecb4:	0810ed15 	.word	0x0810ed15
 810ecb8:	0810ed15 	.word	0x0810ed15
 810ecbc:	0810ed15 	.word	0x0810ed15
 810ecc0:	0810ed05 	.word	0x0810ed05
 810ecc4:	0810ed15 	.word	0x0810ed15
 810ecc8:	0810ed15 	.word	0x0810ed15
 810eccc:	0810ed15 	.word	0x0810ed15
 810ecd0:	0810ed15 	.word	0x0810ed15
 810ecd4:	0810ed15 	.word	0x0810ed15
 810ecd8:	0810ed15 	.word	0x0810ed15
 810ecdc:	0810ed15 	.word	0x0810ed15
 810ece0:	0810ed0d 	.word	0x0810ed0d
 810ece4:	2301      	movs	r3, #1
 810ece6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ecea:	e0bc      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810ecec:	2304      	movs	r3, #4
 810ecee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ecf2:	e0b8      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810ecf4:	2308      	movs	r3, #8
 810ecf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ecfa:	e0b4      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810ecfc:	2310      	movs	r3, #16
 810ecfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ed02:	e0b0      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810ed04:	2320      	movs	r3, #32
 810ed06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ed0a:	e0ac      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810ed0c:	2340      	movs	r3, #64	@ 0x40
 810ed0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ed12:	e0a8      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810ed14:	2380      	movs	r3, #128	@ 0x80
 810ed16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ed1a:	e0a4      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810ed1c:	697b      	ldr	r3, [r7, #20]
 810ed1e:	681b      	ldr	r3, [r3, #0]
 810ed20:	4a8f      	ldr	r2, [pc, #572]	@ (810ef60 <UART_SetConfig+0x6a0>)
 810ed22:	4293      	cmp	r3, r2
 810ed24:	d130      	bne.n	810ed88 <UART_SetConfig+0x4c8>
 810ed26:	4b8d      	ldr	r3, [pc, #564]	@ (810ef5c <UART_SetConfig+0x69c>)
 810ed28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810ed2a:	f003 0307 	and.w	r3, r3, #7
 810ed2e:	2b05      	cmp	r3, #5
 810ed30:	d826      	bhi.n	810ed80 <UART_SetConfig+0x4c0>
 810ed32:	a201      	add	r2, pc, #4	@ (adr r2, 810ed38 <UART_SetConfig+0x478>)
 810ed34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ed38:	0810ed51 	.word	0x0810ed51
 810ed3c:	0810ed59 	.word	0x0810ed59
 810ed40:	0810ed61 	.word	0x0810ed61
 810ed44:	0810ed69 	.word	0x0810ed69
 810ed48:	0810ed71 	.word	0x0810ed71
 810ed4c:	0810ed79 	.word	0x0810ed79
 810ed50:	2300      	movs	r3, #0
 810ed52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ed56:	e086      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810ed58:	2304      	movs	r3, #4
 810ed5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ed5e:	e082      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810ed60:	2308      	movs	r3, #8
 810ed62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ed66:	e07e      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810ed68:	2310      	movs	r3, #16
 810ed6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ed6e:	e07a      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810ed70:	2320      	movs	r3, #32
 810ed72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ed76:	e076      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810ed78:	2340      	movs	r3, #64	@ 0x40
 810ed7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ed7e:	e072      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810ed80:	2380      	movs	r3, #128	@ 0x80
 810ed82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ed86:	e06e      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810ed88:	697b      	ldr	r3, [r7, #20]
 810ed8a:	681b      	ldr	r3, [r3, #0]
 810ed8c:	4a75      	ldr	r2, [pc, #468]	@ (810ef64 <UART_SetConfig+0x6a4>)
 810ed8e:	4293      	cmp	r3, r2
 810ed90:	d130      	bne.n	810edf4 <UART_SetConfig+0x534>
 810ed92:	4b72      	ldr	r3, [pc, #456]	@ (810ef5c <UART_SetConfig+0x69c>)
 810ed94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810ed96:	f003 0307 	and.w	r3, r3, #7
 810ed9a:	2b05      	cmp	r3, #5
 810ed9c:	d826      	bhi.n	810edec <UART_SetConfig+0x52c>
 810ed9e:	a201      	add	r2, pc, #4	@ (adr r2, 810eda4 <UART_SetConfig+0x4e4>)
 810eda0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810eda4:	0810edbd 	.word	0x0810edbd
 810eda8:	0810edc5 	.word	0x0810edc5
 810edac:	0810edcd 	.word	0x0810edcd
 810edb0:	0810edd5 	.word	0x0810edd5
 810edb4:	0810eddd 	.word	0x0810eddd
 810edb8:	0810ede5 	.word	0x0810ede5
 810edbc:	2300      	movs	r3, #0
 810edbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810edc2:	e050      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810edc4:	2304      	movs	r3, #4
 810edc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810edca:	e04c      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810edcc:	2308      	movs	r3, #8
 810edce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810edd2:	e048      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810edd4:	2310      	movs	r3, #16
 810edd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810edda:	e044      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810eddc:	2320      	movs	r3, #32
 810edde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ede2:	e040      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810ede4:	2340      	movs	r3, #64	@ 0x40
 810ede6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810edea:	e03c      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810edec:	2380      	movs	r3, #128	@ 0x80
 810edee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810edf2:	e038      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810edf4:	697b      	ldr	r3, [r7, #20]
 810edf6:	681b      	ldr	r3, [r3, #0]
 810edf8:	4a5b      	ldr	r2, [pc, #364]	@ (810ef68 <UART_SetConfig+0x6a8>)
 810edfa:	4293      	cmp	r3, r2
 810edfc:	d130      	bne.n	810ee60 <UART_SetConfig+0x5a0>
 810edfe:	4b57      	ldr	r3, [pc, #348]	@ (810ef5c <UART_SetConfig+0x69c>)
 810ee00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810ee02:	f003 0307 	and.w	r3, r3, #7
 810ee06:	2b05      	cmp	r3, #5
 810ee08:	d826      	bhi.n	810ee58 <UART_SetConfig+0x598>
 810ee0a:	a201      	add	r2, pc, #4	@ (adr r2, 810ee10 <UART_SetConfig+0x550>)
 810ee0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ee10:	0810ee29 	.word	0x0810ee29
 810ee14:	0810ee31 	.word	0x0810ee31
 810ee18:	0810ee39 	.word	0x0810ee39
 810ee1c:	0810ee41 	.word	0x0810ee41
 810ee20:	0810ee49 	.word	0x0810ee49
 810ee24:	0810ee51 	.word	0x0810ee51
 810ee28:	2302      	movs	r3, #2
 810ee2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ee2e:	e01a      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810ee30:	2304      	movs	r3, #4
 810ee32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ee36:	e016      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810ee38:	2308      	movs	r3, #8
 810ee3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ee3e:	e012      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810ee40:	2310      	movs	r3, #16
 810ee42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ee46:	e00e      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810ee48:	2320      	movs	r3, #32
 810ee4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ee4e:	e00a      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810ee50:	2340      	movs	r3, #64	@ 0x40
 810ee52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ee56:	e006      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810ee58:	2380      	movs	r3, #128	@ 0x80
 810ee5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810ee5e:	e002      	b.n	810ee66 <UART_SetConfig+0x5a6>
 810ee60:	2380      	movs	r3, #128	@ 0x80
 810ee62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810ee66:	697b      	ldr	r3, [r7, #20]
 810ee68:	681b      	ldr	r3, [r3, #0]
 810ee6a:	4a3f      	ldr	r2, [pc, #252]	@ (810ef68 <UART_SetConfig+0x6a8>)
 810ee6c:	4293      	cmp	r3, r2
 810ee6e:	f040 80f8 	bne.w	810f062 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810ee72:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810ee76:	2b20      	cmp	r3, #32
 810ee78:	dc46      	bgt.n	810ef08 <UART_SetConfig+0x648>
 810ee7a:	2b02      	cmp	r3, #2
 810ee7c:	f2c0 8082 	blt.w	810ef84 <UART_SetConfig+0x6c4>
 810ee80:	3b02      	subs	r3, #2
 810ee82:	2b1e      	cmp	r3, #30
 810ee84:	d87e      	bhi.n	810ef84 <UART_SetConfig+0x6c4>
 810ee86:	a201      	add	r2, pc, #4	@ (adr r2, 810ee8c <UART_SetConfig+0x5cc>)
 810ee88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ee8c:	0810ef0f 	.word	0x0810ef0f
 810ee90:	0810ef85 	.word	0x0810ef85
 810ee94:	0810ef17 	.word	0x0810ef17
 810ee98:	0810ef85 	.word	0x0810ef85
 810ee9c:	0810ef85 	.word	0x0810ef85
 810eea0:	0810ef85 	.word	0x0810ef85
 810eea4:	0810ef27 	.word	0x0810ef27
 810eea8:	0810ef85 	.word	0x0810ef85
 810eeac:	0810ef85 	.word	0x0810ef85
 810eeb0:	0810ef85 	.word	0x0810ef85
 810eeb4:	0810ef85 	.word	0x0810ef85
 810eeb8:	0810ef85 	.word	0x0810ef85
 810eebc:	0810ef85 	.word	0x0810ef85
 810eec0:	0810ef85 	.word	0x0810ef85
 810eec4:	0810ef37 	.word	0x0810ef37
 810eec8:	0810ef85 	.word	0x0810ef85
 810eecc:	0810ef85 	.word	0x0810ef85
 810eed0:	0810ef85 	.word	0x0810ef85
 810eed4:	0810ef85 	.word	0x0810ef85
 810eed8:	0810ef85 	.word	0x0810ef85
 810eedc:	0810ef85 	.word	0x0810ef85
 810eee0:	0810ef85 	.word	0x0810ef85
 810eee4:	0810ef85 	.word	0x0810ef85
 810eee8:	0810ef85 	.word	0x0810ef85
 810eeec:	0810ef85 	.word	0x0810ef85
 810eef0:	0810ef85 	.word	0x0810ef85
 810eef4:	0810ef85 	.word	0x0810ef85
 810eef8:	0810ef85 	.word	0x0810ef85
 810eefc:	0810ef85 	.word	0x0810ef85
 810ef00:	0810ef85 	.word	0x0810ef85
 810ef04:	0810ef77 	.word	0x0810ef77
 810ef08:	2b40      	cmp	r3, #64	@ 0x40
 810ef0a:	d037      	beq.n	810ef7c <UART_SetConfig+0x6bc>
 810ef0c:	e03a      	b.n	810ef84 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810ef0e:	f7fe fd09 	bl	810d924 <HAL_RCCEx_GetD3PCLK1Freq>
 810ef12:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810ef14:	e03c      	b.n	810ef90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810ef16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810ef1a:	4618      	mov	r0, r3
 810ef1c:	f7fe fd18 	bl	810d950 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810ef20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ef22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810ef24:	e034      	b.n	810ef90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810ef26:	f107 0318 	add.w	r3, r7, #24
 810ef2a:	4618      	mov	r0, r3
 810ef2c:	f7fe fe64 	bl	810dbf8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810ef30:	69fb      	ldr	r3, [r7, #28]
 810ef32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810ef34:	e02c      	b.n	810ef90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810ef36:	4b09      	ldr	r3, [pc, #36]	@ (810ef5c <UART_SetConfig+0x69c>)
 810ef38:	681b      	ldr	r3, [r3, #0]
 810ef3a:	f003 0320 	and.w	r3, r3, #32
 810ef3e:	2b00      	cmp	r3, #0
 810ef40:	d016      	beq.n	810ef70 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810ef42:	4b06      	ldr	r3, [pc, #24]	@ (810ef5c <UART_SetConfig+0x69c>)
 810ef44:	681b      	ldr	r3, [r3, #0]
 810ef46:	08db      	lsrs	r3, r3, #3
 810ef48:	f003 0303 	and.w	r3, r3, #3
 810ef4c:	4a07      	ldr	r2, [pc, #28]	@ (810ef6c <UART_SetConfig+0x6ac>)
 810ef4e:	fa22 f303 	lsr.w	r3, r2, r3
 810ef52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810ef54:	e01c      	b.n	810ef90 <UART_SetConfig+0x6d0>
 810ef56:	bf00      	nop
 810ef58:	40011400 	.word	0x40011400
 810ef5c:	58024400 	.word	0x58024400
 810ef60:	40007800 	.word	0x40007800
 810ef64:	40007c00 	.word	0x40007c00
 810ef68:	58000c00 	.word	0x58000c00
 810ef6c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 810ef70:	4b9d      	ldr	r3, [pc, #628]	@ (810f1e8 <UART_SetConfig+0x928>)
 810ef72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810ef74:	e00c      	b.n	810ef90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810ef76:	4b9d      	ldr	r3, [pc, #628]	@ (810f1ec <UART_SetConfig+0x92c>)
 810ef78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810ef7a:	e009      	b.n	810ef90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810ef7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810ef80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810ef82:	e005      	b.n	810ef90 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 810ef84:	2300      	movs	r3, #0
 810ef86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810ef88:	2301      	movs	r3, #1
 810ef8a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810ef8e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810ef90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810ef92:	2b00      	cmp	r3, #0
 810ef94:	f000 81de 	beq.w	810f354 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810ef98:	697b      	ldr	r3, [r7, #20]
 810ef9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810ef9c:	4a94      	ldr	r2, [pc, #592]	@ (810f1f0 <UART_SetConfig+0x930>)
 810ef9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810efa2:	461a      	mov	r2, r3
 810efa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810efa6:	fbb3 f3f2 	udiv	r3, r3, r2
 810efaa:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810efac:	697b      	ldr	r3, [r7, #20]
 810efae:	685a      	ldr	r2, [r3, #4]
 810efb0:	4613      	mov	r3, r2
 810efb2:	005b      	lsls	r3, r3, #1
 810efb4:	4413      	add	r3, r2
 810efb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810efb8:	429a      	cmp	r2, r3
 810efba:	d305      	bcc.n	810efc8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810efbc:	697b      	ldr	r3, [r7, #20]
 810efbe:	685b      	ldr	r3, [r3, #4]
 810efc0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810efc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810efc4:	429a      	cmp	r2, r3
 810efc6:	d903      	bls.n	810efd0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 810efc8:	2301      	movs	r3, #1
 810efca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810efce:	e1c1      	b.n	810f354 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810efd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810efd2:	2200      	movs	r2, #0
 810efd4:	60bb      	str	r3, [r7, #8]
 810efd6:	60fa      	str	r2, [r7, #12]
 810efd8:	697b      	ldr	r3, [r7, #20]
 810efda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810efdc:	4a84      	ldr	r2, [pc, #528]	@ (810f1f0 <UART_SetConfig+0x930>)
 810efde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810efe2:	b29b      	uxth	r3, r3
 810efe4:	2200      	movs	r2, #0
 810efe6:	603b      	str	r3, [r7, #0]
 810efe8:	607a      	str	r2, [r7, #4]
 810efea:	e9d7 2300 	ldrd	r2, r3, [r7]
 810efee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810eff2:	f7f1 f9cd 	bl	8100390 <__aeabi_uldivmod>
 810eff6:	4602      	mov	r2, r0
 810eff8:	460b      	mov	r3, r1
 810effa:	4610      	mov	r0, r2
 810effc:	4619      	mov	r1, r3
 810effe:	f04f 0200 	mov.w	r2, #0
 810f002:	f04f 0300 	mov.w	r3, #0
 810f006:	020b      	lsls	r3, r1, #8
 810f008:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810f00c:	0202      	lsls	r2, r0, #8
 810f00e:	6979      	ldr	r1, [r7, #20]
 810f010:	6849      	ldr	r1, [r1, #4]
 810f012:	0849      	lsrs	r1, r1, #1
 810f014:	2000      	movs	r0, #0
 810f016:	460c      	mov	r4, r1
 810f018:	4605      	mov	r5, r0
 810f01a:	eb12 0804 	adds.w	r8, r2, r4
 810f01e:	eb43 0905 	adc.w	r9, r3, r5
 810f022:	697b      	ldr	r3, [r7, #20]
 810f024:	685b      	ldr	r3, [r3, #4]
 810f026:	2200      	movs	r2, #0
 810f028:	469a      	mov	sl, r3
 810f02a:	4693      	mov	fp, r2
 810f02c:	4652      	mov	r2, sl
 810f02e:	465b      	mov	r3, fp
 810f030:	4640      	mov	r0, r8
 810f032:	4649      	mov	r1, r9
 810f034:	f7f1 f9ac 	bl	8100390 <__aeabi_uldivmod>
 810f038:	4602      	mov	r2, r0
 810f03a:	460b      	mov	r3, r1
 810f03c:	4613      	mov	r3, r2
 810f03e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810f040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f042:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810f046:	d308      	bcc.n	810f05a <UART_SetConfig+0x79a>
 810f048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f04a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810f04e:	d204      	bcs.n	810f05a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 810f050:	697b      	ldr	r3, [r7, #20]
 810f052:	681b      	ldr	r3, [r3, #0]
 810f054:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810f056:	60da      	str	r2, [r3, #12]
 810f058:	e17c      	b.n	810f354 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810f05a:	2301      	movs	r3, #1
 810f05c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810f060:	e178      	b.n	810f354 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810f062:	697b      	ldr	r3, [r7, #20]
 810f064:	69db      	ldr	r3, [r3, #28]
 810f066:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810f06a:	f040 80c5 	bne.w	810f1f8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810f06e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810f072:	2b20      	cmp	r3, #32
 810f074:	dc48      	bgt.n	810f108 <UART_SetConfig+0x848>
 810f076:	2b00      	cmp	r3, #0
 810f078:	db7b      	blt.n	810f172 <UART_SetConfig+0x8b2>
 810f07a:	2b20      	cmp	r3, #32
 810f07c:	d879      	bhi.n	810f172 <UART_SetConfig+0x8b2>
 810f07e:	a201      	add	r2, pc, #4	@ (adr r2, 810f084 <UART_SetConfig+0x7c4>)
 810f080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810f084:	0810f10f 	.word	0x0810f10f
 810f088:	0810f117 	.word	0x0810f117
 810f08c:	0810f173 	.word	0x0810f173
 810f090:	0810f173 	.word	0x0810f173
 810f094:	0810f11f 	.word	0x0810f11f
 810f098:	0810f173 	.word	0x0810f173
 810f09c:	0810f173 	.word	0x0810f173
 810f0a0:	0810f173 	.word	0x0810f173
 810f0a4:	0810f12f 	.word	0x0810f12f
 810f0a8:	0810f173 	.word	0x0810f173
 810f0ac:	0810f173 	.word	0x0810f173
 810f0b0:	0810f173 	.word	0x0810f173
 810f0b4:	0810f173 	.word	0x0810f173
 810f0b8:	0810f173 	.word	0x0810f173
 810f0bc:	0810f173 	.word	0x0810f173
 810f0c0:	0810f173 	.word	0x0810f173
 810f0c4:	0810f13f 	.word	0x0810f13f
 810f0c8:	0810f173 	.word	0x0810f173
 810f0cc:	0810f173 	.word	0x0810f173
 810f0d0:	0810f173 	.word	0x0810f173
 810f0d4:	0810f173 	.word	0x0810f173
 810f0d8:	0810f173 	.word	0x0810f173
 810f0dc:	0810f173 	.word	0x0810f173
 810f0e0:	0810f173 	.word	0x0810f173
 810f0e4:	0810f173 	.word	0x0810f173
 810f0e8:	0810f173 	.word	0x0810f173
 810f0ec:	0810f173 	.word	0x0810f173
 810f0f0:	0810f173 	.word	0x0810f173
 810f0f4:	0810f173 	.word	0x0810f173
 810f0f8:	0810f173 	.word	0x0810f173
 810f0fc:	0810f173 	.word	0x0810f173
 810f100:	0810f173 	.word	0x0810f173
 810f104:	0810f165 	.word	0x0810f165
 810f108:	2b40      	cmp	r3, #64	@ 0x40
 810f10a:	d02e      	beq.n	810f16a <UART_SetConfig+0x8aa>
 810f10c:	e031      	b.n	810f172 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810f10e:	f7fd f951 	bl	810c3b4 <HAL_RCC_GetPCLK1Freq>
 810f112:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810f114:	e033      	b.n	810f17e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810f116:	f7fd f963 	bl	810c3e0 <HAL_RCC_GetPCLK2Freq>
 810f11a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810f11c:	e02f      	b.n	810f17e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810f11e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810f122:	4618      	mov	r0, r3
 810f124:	f7fe fc14 	bl	810d950 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810f128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f12a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810f12c:	e027      	b.n	810f17e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810f12e:	f107 0318 	add.w	r3, r7, #24
 810f132:	4618      	mov	r0, r3
 810f134:	f7fe fd60 	bl	810dbf8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810f138:	69fb      	ldr	r3, [r7, #28]
 810f13a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810f13c:	e01f      	b.n	810f17e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810f13e:	4b2d      	ldr	r3, [pc, #180]	@ (810f1f4 <UART_SetConfig+0x934>)
 810f140:	681b      	ldr	r3, [r3, #0]
 810f142:	f003 0320 	and.w	r3, r3, #32
 810f146:	2b00      	cmp	r3, #0
 810f148:	d009      	beq.n	810f15e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810f14a:	4b2a      	ldr	r3, [pc, #168]	@ (810f1f4 <UART_SetConfig+0x934>)
 810f14c:	681b      	ldr	r3, [r3, #0]
 810f14e:	08db      	lsrs	r3, r3, #3
 810f150:	f003 0303 	and.w	r3, r3, #3
 810f154:	4a24      	ldr	r2, [pc, #144]	@ (810f1e8 <UART_SetConfig+0x928>)
 810f156:	fa22 f303 	lsr.w	r3, r2, r3
 810f15a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810f15c:	e00f      	b.n	810f17e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810f15e:	4b22      	ldr	r3, [pc, #136]	@ (810f1e8 <UART_SetConfig+0x928>)
 810f160:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810f162:	e00c      	b.n	810f17e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810f164:	4b21      	ldr	r3, [pc, #132]	@ (810f1ec <UART_SetConfig+0x92c>)
 810f166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810f168:	e009      	b.n	810f17e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810f16a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810f16e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810f170:	e005      	b.n	810f17e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810f172:	2300      	movs	r3, #0
 810f174:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810f176:	2301      	movs	r3, #1
 810f178:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810f17c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810f17e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810f180:	2b00      	cmp	r3, #0
 810f182:	f000 80e7 	beq.w	810f354 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810f186:	697b      	ldr	r3, [r7, #20]
 810f188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810f18a:	4a19      	ldr	r2, [pc, #100]	@ (810f1f0 <UART_SetConfig+0x930>)
 810f18c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810f190:	461a      	mov	r2, r3
 810f192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810f194:	fbb3 f3f2 	udiv	r3, r3, r2
 810f198:	005a      	lsls	r2, r3, #1
 810f19a:	697b      	ldr	r3, [r7, #20]
 810f19c:	685b      	ldr	r3, [r3, #4]
 810f19e:	085b      	lsrs	r3, r3, #1
 810f1a0:	441a      	add	r2, r3
 810f1a2:	697b      	ldr	r3, [r7, #20]
 810f1a4:	685b      	ldr	r3, [r3, #4]
 810f1a6:	fbb2 f3f3 	udiv	r3, r2, r3
 810f1aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810f1ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f1ae:	2b0f      	cmp	r3, #15
 810f1b0:	d916      	bls.n	810f1e0 <UART_SetConfig+0x920>
 810f1b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f1b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810f1b8:	d212      	bcs.n	810f1e0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810f1ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f1bc:	b29b      	uxth	r3, r3
 810f1be:	f023 030f 	bic.w	r3, r3, #15
 810f1c2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810f1c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f1c6:	085b      	lsrs	r3, r3, #1
 810f1c8:	b29b      	uxth	r3, r3
 810f1ca:	f003 0307 	and.w	r3, r3, #7
 810f1ce:	b29a      	uxth	r2, r3
 810f1d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 810f1d2:	4313      	orrs	r3, r2
 810f1d4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 810f1d6:	697b      	ldr	r3, [r7, #20]
 810f1d8:	681b      	ldr	r3, [r3, #0]
 810f1da:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 810f1dc:	60da      	str	r2, [r3, #12]
 810f1de:	e0b9      	b.n	810f354 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810f1e0:	2301      	movs	r3, #1
 810f1e2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810f1e6:	e0b5      	b.n	810f354 <UART_SetConfig+0xa94>
 810f1e8:	03d09000 	.word	0x03d09000
 810f1ec:	003d0900 	.word	0x003d0900
 810f1f0:	08128980 	.word	0x08128980
 810f1f4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 810f1f8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810f1fc:	2b20      	cmp	r3, #32
 810f1fe:	dc49      	bgt.n	810f294 <UART_SetConfig+0x9d4>
 810f200:	2b00      	cmp	r3, #0
 810f202:	db7c      	blt.n	810f2fe <UART_SetConfig+0xa3e>
 810f204:	2b20      	cmp	r3, #32
 810f206:	d87a      	bhi.n	810f2fe <UART_SetConfig+0xa3e>
 810f208:	a201      	add	r2, pc, #4	@ (adr r2, 810f210 <UART_SetConfig+0x950>)
 810f20a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810f20e:	bf00      	nop
 810f210:	0810f29b 	.word	0x0810f29b
 810f214:	0810f2a3 	.word	0x0810f2a3
 810f218:	0810f2ff 	.word	0x0810f2ff
 810f21c:	0810f2ff 	.word	0x0810f2ff
 810f220:	0810f2ab 	.word	0x0810f2ab
 810f224:	0810f2ff 	.word	0x0810f2ff
 810f228:	0810f2ff 	.word	0x0810f2ff
 810f22c:	0810f2ff 	.word	0x0810f2ff
 810f230:	0810f2bb 	.word	0x0810f2bb
 810f234:	0810f2ff 	.word	0x0810f2ff
 810f238:	0810f2ff 	.word	0x0810f2ff
 810f23c:	0810f2ff 	.word	0x0810f2ff
 810f240:	0810f2ff 	.word	0x0810f2ff
 810f244:	0810f2ff 	.word	0x0810f2ff
 810f248:	0810f2ff 	.word	0x0810f2ff
 810f24c:	0810f2ff 	.word	0x0810f2ff
 810f250:	0810f2cb 	.word	0x0810f2cb
 810f254:	0810f2ff 	.word	0x0810f2ff
 810f258:	0810f2ff 	.word	0x0810f2ff
 810f25c:	0810f2ff 	.word	0x0810f2ff
 810f260:	0810f2ff 	.word	0x0810f2ff
 810f264:	0810f2ff 	.word	0x0810f2ff
 810f268:	0810f2ff 	.word	0x0810f2ff
 810f26c:	0810f2ff 	.word	0x0810f2ff
 810f270:	0810f2ff 	.word	0x0810f2ff
 810f274:	0810f2ff 	.word	0x0810f2ff
 810f278:	0810f2ff 	.word	0x0810f2ff
 810f27c:	0810f2ff 	.word	0x0810f2ff
 810f280:	0810f2ff 	.word	0x0810f2ff
 810f284:	0810f2ff 	.word	0x0810f2ff
 810f288:	0810f2ff 	.word	0x0810f2ff
 810f28c:	0810f2ff 	.word	0x0810f2ff
 810f290:	0810f2f1 	.word	0x0810f2f1
 810f294:	2b40      	cmp	r3, #64	@ 0x40
 810f296:	d02e      	beq.n	810f2f6 <UART_SetConfig+0xa36>
 810f298:	e031      	b.n	810f2fe <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810f29a:	f7fd f88b 	bl	810c3b4 <HAL_RCC_GetPCLK1Freq>
 810f29e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810f2a0:	e033      	b.n	810f30a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810f2a2:	f7fd f89d 	bl	810c3e0 <HAL_RCC_GetPCLK2Freq>
 810f2a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810f2a8:	e02f      	b.n	810f30a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810f2aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810f2ae:	4618      	mov	r0, r3
 810f2b0:	f7fe fb4e 	bl	810d950 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810f2b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f2b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810f2b8:	e027      	b.n	810f30a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810f2ba:	f107 0318 	add.w	r3, r7, #24
 810f2be:	4618      	mov	r0, r3
 810f2c0:	f7fe fc9a 	bl	810dbf8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810f2c4:	69fb      	ldr	r3, [r7, #28]
 810f2c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810f2c8:	e01f      	b.n	810f30a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810f2ca:	4b2d      	ldr	r3, [pc, #180]	@ (810f380 <UART_SetConfig+0xac0>)
 810f2cc:	681b      	ldr	r3, [r3, #0]
 810f2ce:	f003 0320 	and.w	r3, r3, #32
 810f2d2:	2b00      	cmp	r3, #0
 810f2d4:	d009      	beq.n	810f2ea <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810f2d6:	4b2a      	ldr	r3, [pc, #168]	@ (810f380 <UART_SetConfig+0xac0>)
 810f2d8:	681b      	ldr	r3, [r3, #0]
 810f2da:	08db      	lsrs	r3, r3, #3
 810f2dc:	f003 0303 	and.w	r3, r3, #3
 810f2e0:	4a28      	ldr	r2, [pc, #160]	@ (810f384 <UART_SetConfig+0xac4>)
 810f2e2:	fa22 f303 	lsr.w	r3, r2, r3
 810f2e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810f2e8:	e00f      	b.n	810f30a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 810f2ea:	4b26      	ldr	r3, [pc, #152]	@ (810f384 <UART_SetConfig+0xac4>)
 810f2ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810f2ee:	e00c      	b.n	810f30a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810f2f0:	4b25      	ldr	r3, [pc, #148]	@ (810f388 <UART_SetConfig+0xac8>)
 810f2f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810f2f4:	e009      	b.n	810f30a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810f2f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810f2fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810f2fc:	e005      	b.n	810f30a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810f2fe:	2300      	movs	r3, #0
 810f300:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810f302:	2301      	movs	r3, #1
 810f304:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810f308:	bf00      	nop
    }

    if (pclk != 0U)
 810f30a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810f30c:	2b00      	cmp	r3, #0
 810f30e:	d021      	beq.n	810f354 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810f310:	697b      	ldr	r3, [r7, #20]
 810f312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810f314:	4a1d      	ldr	r2, [pc, #116]	@ (810f38c <UART_SetConfig+0xacc>)
 810f316:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810f31a:	461a      	mov	r2, r3
 810f31c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810f31e:	fbb3 f2f2 	udiv	r2, r3, r2
 810f322:	697b      	ldr	r3, [r7, #20]
 810f324:	685b      	ldr	r3, [r3, #4]
 810f326:	085b      	lsrs	r3, r3, #1
 810f328:	441a      	add	r2, r3
 810f32a:	697b      	ldr	r3, [r7, #20]
 810f32c:	685b      	ldr	r3, [r3, #4]
 810f32e:	fbb2 f3f3 	udiv	r3, r2, r3
 810f332:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810f334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f336:	2b0f      	cmp	r3, #15
 810f338:	d909      	bls.n	810f34e <UART_SetConfig+0xa8e>
 810f33a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f33c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810f340:	d205      	bcs.n	810f34e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810f342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f344:	b29a      	uxth	r2, r3
 810f346:	697b      	ldr	r3, [r7, #20]
 810f348:	681b      	ldr	r3, [r3, #0]
 810f34a:	60da      	str	r2, [r3, #12]
 810f34c:	e002      	b.n	810f354 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810f34e:	2301      	movs	r3, #1
 810f350:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810f354:	697b      	ldr	r3, [r7, #20]
 810f356:	2201      	movs	r2, #1
 810f358:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 810f35c:	697b      	ldr	r3, [r7, #20]
 810f35e:	2201      	movs	r2, #1
 810f360:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810f364:	697b      	ldr	r3, [r7, #20]
 810f366:	2200      	movs	r2, #0
 810f368:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 810f36a:	697b      	ldr	r3, [r7, #20]
 810f36c:	2200      	movs	r2, #0
 810f36e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 810f370:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 810f374:	4618      	mov	r0, r3
 810f376:	3748      	adds	r7, #72	@ 0x48
 810f378:	46bd      	mov	sp, r7
 810f37a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810f37e:	bf00      	nop
 810f380:	58024400 	.word	0x58024400
 810f384:	03d09000 	.word	0x03d09000
 810f388:	003d0900 	.word	0x003d0900
 810f38c:	08128980 	.word	0x08128980

0810f390 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810f390:	b480      	push	{r7}
 810f392:	b083      	sub	sp, #12
 810f394:	af00      	add	r7, sp, #0
 810f396:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810f398:	687b      	ldr	r3, [r7, #4]
 810f39a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810f39c:	f003 0308 	and.w	r3, r3, #8
 810f3a0:	2b00      	cmp	r3, #0
 810f3a2:	d00a      	beq.n	810f3ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810f3a4:	687b      	ldr	r3, [r7, #4]
 810f3a6:	681b      	ldr	r3, [r3, #0]
 810f3a8:	685b      	ldr	r3, [r3, #4]
 810f3aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 810f3ae:	687b      	ldr	r3, [r7, #4]
 810f3b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810f3b2:	687b      	ldr	r3, [r7, #4]
 810f3b4:	681b      	ldr	r3, [r3, #0]
 810f3b6:	430a      	orrs	r2, r1
 810f3b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810f3ba:	687b      	ldr	r3, [r7, #4]
 810f3bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810f3be:	f003 0301 	and.w	r3, r3, #1
 810f3c2:	2b00      	cmp	r3, #0
 810f3c4:	d00a      	beq.n	810f3dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810f3c6:	687b      	ldr	r3, [r7, #4]
 810f3c8:	681b      	ldr	r3, [r3, #0]
 810f3ca:	685b      	ldr	r3, [r3, #4]
 810f3cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 810f3d0:	687b      	ldr	r3, [r7, #4]
 810f3d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f3d4:	687b      	ldr	r3, [r7, #4]
 810f3d6:	681b      	ldr	r3, [r3, #0]
 810f3d8:	430a      	orrs	r2, r1
 810f3da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810f3dc:	687b      	ldr	r3, [r7, #4]
 810f3de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810f3e0:	f003 0302 	and.w	r3, r3, #2
 810f3e4:	2b00      	cmp	r3, #0
 810f3e6:	d00a      	beq.n	810f3fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810f3e8:	687b      	ldr	r3, [r7, #4]
 810f3ea:	681b      	ldr	r3, [r3, #0]
 810f3ec:	685b      	ldr	r3, [r3, #4]
 810f3ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810f3f2:	687b      	ldr	r3, [r7, #4]
 810f3f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810f3f6:	687b      	ldr	r3, [r7, #4]
 810f3f8:	681b      	ldr	r3, [r3, #0]
 810f3fa:	430a      	orrs	r2, r1
 810f3fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810f3fe:	687b      	ldr	r3, [r7, #4]
 810f400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810f402:	f003 0304 	and.w	r3, r3, #4
 810f406:	2b00      	cmp	r3, #0
 810f408:	d00a      	beq.n	810f420 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810f40a:	687b      	ldr	r3, [r7, #4]
 810f40c:	681b      	ldr	r3, [r3, #0]
 810f40e:	685b      	ldr	r3, [r3, #4]
 810f410:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 810f414:	687b      	ldr	r3, [r7, #4]
 810f416:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810f418:	687b      	ldr	r3, [r7, #4]
 810f41a:	681b      	ldr	r3, [r3, #0]
 810f41c:	430a      	orrs	r2, r1
 810f41e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810f420:	687b      	ldr	r3, [r7, #4]
 810f422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810f424:	f003 0310 	and.w	r3, r3, #16
 810f428:	2b00      	cmp	r3, #0
 810f42a:	d00a      	beq.n	810f442 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810f42c:	687b      	ldr	r3, [r7, #4]
 810f42e:	681b      	ldr	r3, [r3, #0]
 810f430:	689b      	ldr	r3, [r3, #8]
 810f432:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 810f436:	687b      	ldr	r3, [r7, #4]
 810f438:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 810f43a:	687b      	ldr	r3, [r7, #4]
 810f43c:	681b      	ldr	r3, [r3, #0]
 810f43e:	430a      	orrs	r2, r1
 810f440:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810f442:	687b      	ldr	r3, [r7, #4]
 810f444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810f446:	f003 0320 	and.w	r3, r3, #32
 810f44a:	2b00      	cmp	r3, #0
 810f44c:	d00a      	beq.n	810f464 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810f44e:	687b      	ldr	r3, [r7, #4]
 810f450:	681b      	ldr	r3, [r3, #0]
 810f452:	689b      	ldr	r3, [r3, #8]
 810f454:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 810f458:	687b      	ldr	r3, [r7, #4]
 810f45a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 810f45c:	687b      	ldr	r3, [r7, #4]
 810f45e:	681b      	ldr	r3, [r3, #0]
 810f460:	430a      	orrs	r2, r1
 810f462:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810f464:	687b      	ldr	r3, [r7, #4]
 810f466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810f468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810f46c:	2b00      	cmp	r3, #0
 810f46e:	d01a      	beq.n	810f4a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810f470:	687b      	ldr	r3, [r7, #4]
 810f472:	681b      	ldr	r3, [r3, #0]
 810f474:	685b      	ldr	r3, [r3, #4]
 810f476:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 810f47a:	687b      	ldr	r3, [r7, #4]
 810f47c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810f47e:	687b      	ldr	r3, [r7, #4]
 810f480:	681b      	ldr	r3, [r3, #0]
 810f482:	430a      	orrs	r2, r1
 810f484:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810f486:	687b      	ldr	r3, [r7, #4]
 810f488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810f48a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810f48e:	d10a      	bne.n	810f4a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810f490:	687b      	ldr	r3, [r7, #4]
 810f492:	681b      	ldr	r3, [r3, #0]
 810f494:	685b      	ldr	r3, [r3, #4]
 810f496:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 810f49a:	687b      	ldr	r3, [r7, #4]
 810f49c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 810f49e:	687b      	ldr	r3, [r7, #4]
 810f4a0:	681b      	ldr	r3, [r3, #0]
 810f4a2:	430a      	orrs	r2, r1
 810f4a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810f4a6:	687b      	ldr	r3, [r7, #4]
 810f4a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810f4aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810f4ae:	2b00      	cmp	r3, #0
 810f4b0:	d00a      	beq.n	810f4c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810f4b2:	687b      	ldr	r3, [r7, #4]
 810f4b4:	681b      	ldr	r3, [r3, #0]
 810f4b6:	685b      	ldr	r3, [r3, #4]
 810f4b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 810f4bc:	687b      	ldr	r3, [r7, #4]
 810f4be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810f4c0:	687b      	ldr	r3, [r7, #4]
 810f4c2:	681b      	ldr	r3, [r3, #0]
 810f4c4:	430a      	orrs	r2, r1
 810f4c6:	605a      	str	r2, [r3, #4]
  }
}
 810f4c8:	bf00      	nop
 810f4ca:	370c      	adds	r7, #12
 810f4cc:	46bd      	mov	sp, r7
 810f4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f4d2:	4770      	bx	lr

0810f4d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810f4d4:	b580      	push	{r7, lr}
 810f4d6:	b098      	sub	sp, #96	@ 0x60
 810f4d8:	af02      	add	r7, sp, #8
 810f4da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810f4dc:	687b      	ldr	r3, [r7, #4]
 810f4de:	2200      	movs	r2, #0
 810f4e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810f4e4:	f7f9 fe8c 	bl	8109200 <HAL_GetTick>
 810f4e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810f4ea:	687b      	ldr	r3, [r7, #4]
 810f4ec:	681b      	ldr	r3, [r3, #0]
 810f4ee:	681b      	ldr	r3, [r3, #0]
 810f4f0:	f003 0308 	and.w	r3, r3, #8
 810f4f4:	2b08      	cmp	r3, #8
 810f4f6:	d12f      	bne.n	810f558 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810f4f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810f4fc:	9300      	str	r3, [sp, #0]
 810f4fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810f500:	2200      	movs	r2, #0
 810f502:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 810f506:	6878      	ldr	r0, [r7, #4]
 810f508:	f000 f88e 	bl	810f628 <UART_WaitOnFlagUntilTimeout>
 810f50c:	4603      	mov	r3, r0
 810f50e:	2b00      	cmp	r3, #0
 810f510:	d022      	beq.n	810f558 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 810f512:	687b      	ldr	r3, [r7, #4]
 810f514:	681b      	ldr	r3, [r3, #0]
 810f516:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810f518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f51a:	e853 3f00 	ldrex	r3, [r3]
 810f51e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810f520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810f522:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810f526:	653b      	str	r3, [r7, #80]	@ 0x50
 810f528:	687b      	ldr	r3, [r7, #4]
 810f52a:	681b      	ldr	r3, [r3, #0]
 810f52c:	461a      	mov	r2, r3
 810f52e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810f530:	647b      	str	r3, [r7, #68]	@ 0x44
 810f532:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810f534:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810f536:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810f538:	e841 2300 	strex	r3, r2, [r1]
 810f53c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810f53e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810f540:	2b00      	cmp	r3, #0
 810f542:	d1e6      	bne.n	810f512 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 810f544:	687b      	ldr	r3, [r7, #4]
 810f546:	2220      	movs	r2, #32
 810f548:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 810f54c:	687b      	ldr	r3, [r7, #4]
 810f54e:	2200      	movs	r2, #0
 810f550:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810f554:	2303      	movs	r3, #3
 810f556:	e063      	b.n	810f620 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810f558:	687b      	ldr	r3, [r7, #4]
 810f55a:	681b      	ldr	r3, [r3, #0]
 810f55c:	681b      	ldr	r3, [r3, #0]
 810f55e:	f003 0304 	and.w	r3, r3, #4
 810f562:	2b04      	cmp	r3, #4
 810f564:	d149      	bne.n	810f5fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810f566:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810f56a:	9300      	str	r3, [sp, #0]
 810f56c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810f56e:	2200      	movs	r2, #0
 810f570:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 810f574:	6878      	ldr	r0, [r7, #4]
 810f576:	f000 f857 	bl	810f628 <UART_WaitOnFlagUntilTimeout>
 810f57a:	4603      	mov	r3, r0
 810f57c:	2b00      	cmp	r3, #0
 810f57e:	d03c      	beq.n	810f5fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810f580:	687b      	ldr	r3, [r7, #4]
 810f582:	681b      	ldr	r3, [r3, #0]
 810f584:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810f586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810f588:	e853 3f00 	ldrex	r3, [r3]
 810f58c:	623b      	str	r3, [r7, #32]
   return(result);
 810f58e:	6a3b      	ldr	r3, [r7, #32]
 810f590:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810f594:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810f596:	687b      	ldr	r3, [r7, #4]
 810f598:	681b      	ldr	r3, [r3, #0]
 810f59a:	461a      	mov	r2, r3
 810f59c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810f59e:	633b      	str	r3, [r7, #48]	@ 0x30
 810f5a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810f5a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810f5a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810f5a6:	e841 2300 	strex	r3, r2, [r1]
 810f5aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810f5ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f5ae:	2b00      	cmp	r3, #0
 810f5b0:	d1e6      	bne.n	810f580 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810f5b2:	687b      	ldr	r3, [r7, #4]
 810f5b4:	681b      	ldr	r3, [r3, #0]
 810f5b6:	3308      	adds	r3, #8
 810f5b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810f5ba:	693b      	ldr	r3, [r7, #16]
 810f5bc:	e853 3f00 	ldrex	r3, [r3]
 810f5c0:	60fb      	str	r3, [r7, #12]
   return(result);
 810f5c2:	68fb      	ldr	r3, [r7, #12]
 810f5c4:	f023 0301 	bic.w	r3, r3, #1
 810f5c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 810f5ca:	687b      	ldr	r3, [r7, #4]
 810f5cc:	681b      	ldr	r3, [r3, #0]
 810f5ce:	3308      	adds	r3, #8
 810f5d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810f5d2:	61fa      	str	r2, [r7, #28]
 810f5d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810f5d6:	69b9      	ldr	r1, [r7, #24]
 810f5d8:	69fa      	ldr	r2, [r7, #28]
 810f5da:	e841 2300 	strex	r3, r2, [r1]
 810f5de:	617b      	str	r3, [r7, #20]
   return(result);
 810f5e0:	697b      	ldr	r3, [r7, #20]
 810f5e2:	2b00      	cmp	r3, #0
 810f5e4:	d1e5      	bne.n	810f5b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 810f5e6:	687b      	ldr	r3, [r7, #4]
 810f5e8:	2220      	movs	r2, #32
 810f5ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 810f5ee:	687b      	ldr	r3, [r7, #4]
 810f5f0:	2200      	movs	r2, #0
 810f5f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810f5f6:	2303      	movs	r3, #3
 810f5f8:	e012      	b.n	810f620 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810f5fa:	687b      	ldr	r3, [r7, #4]
 810f5fc:	2220      	movs	r2, #32
 810f5fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 810f602:	687b      	ldr	r3, [r7, #4]
 810f604:	2220      	movs	r2, #32
 810f606:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810f60a:	687b      	ldr	r3, [r7, #4]
 810f60c:	2200      	movs	r2, #0
 810f60e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 810f610:	687b      	ldr	r3, [r7, #4]
 810f612:	2200      	movs	r2, #0
 810f614:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 810f616:	687b      	ldr	r3, [r7, #4]
 810f618:	2200      	movs	r2, #0
 810f61a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810f61e:	2300      	movs	r3, #0
}
 810f620:	4618      	mov	r0, r3
 810f622:	3758      	adds	r7, #88	@ 0x58
 810f624:	46bd      	mov	sp, r7
 810f626:	bd80      	pop	{r7, pc}

0810f628 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810f628:	b580      	push	{r7, lr}
 810f62a:	b084      	sub	sp, #16
 810f62c:	af00      	add	r7, sp, #0
 810f62e:	60f8      	str	r0, [r7, #12]
 810f630:	60b9      	str	r1, [r7, #8]
 810f632:	603b      	str	r3, [r7, #0]
 810f634:	4613      	mov	r3, r2
 810f636:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810f638:	e04f      	b.n	810f6da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810f63a:	69bb      	ldr	r3, [r7, #24]
 810f63c:	f1b3 3fff 	cmp.w	r3, #4294967295
 810f640:	d04b      	beq.n	810f6da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810f642:	f7f9 fddd 	bl	8109200 <HAL_GetTick>
 810f646:	4602      	mov	r2, r0
 810f648:	683b      	ldr	r3, [r7, #0]
 810f64a:	1ad3      	subs	r3, r2, r3
 810f64c:	69ba      	ldr	r2, [r7, #24]
 810f64e:	429a      	cmp	r2, r3
 810f650:	d302      	bcc.n	810f658 <UART_WaitOnFlagUntilTimeout+0x30>
 810f652:	69bb      	ldr	r3, [r7, #24]
 810f654:	2b00      	cmp	r3, #0
 810f656:	d101      	bne.n	810f65c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 810f658:	2303      	movs	r3, #3
 810f65a:	e04e      	b.n	810f6fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 810f65c:	68fb      	ldr	r3, [r7, #12]
 810f65e:	681b      	ldr	r3, [r3, #0]
 810f660:	681b      	ldr	r3, [r3, #0]
 810f662:	f003 0304 	and.w	r3, r3, #4
 810f666:	2b00      	cmp	r3, #0
 810f668:	d037      	beq.n	810f6da <UART_WaitOnFlagUntilTimeout+0xb2>
 810f66a:	68bb      	ldr	r3, [r7, #8]
 810f66c:	2b80      	cmp	r3, #128	@ 0x80
 810f66e:	d034      	beq.n	810f6da <UART_WaitOnFlagUntilTimeout+0xb2>
 810f670:	68bb      	ldr	r3, [r7, #8]
 810f672:	2b40      	cmp	r3, #64	@ 0x40
 810f674:	d031      	beq.n	810f6da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810f676:	68fb      	ldr	r3, [r7, #12]
 810f678:	681b      	ldr	r3, [r3, #0]
 810f67a:	69db      	ldr	r3, [r3, #28]
 810f67c:	f003 0308 	and.w	r3, r3, #8
 810f680:	2b08      	cmp	r3, #8
 810f682:	d110      	bne.n	810f6a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810f684:	68fb      	ldr	r3, [r7, #12]
 810f686:	681b      	ldr	r3, [r3, #0]
 810f688:	2208      	movs	r2, #8
 810f68a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810f68c:	68f8      	ldr	r0, [r7, #12]
 810f68e:	f000 f838 	bl	810f702 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 810f692:	68fb      	ldr	r3, [r7, #12]
 810f694:	2208      	movs	r2, #8
 810f696:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810f69a:	68fb      	ldr	r3, [r7, #12]
 810f69c:	2200      	movs	r2, #0
 810f69e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 810f6a2:	2301      	movs	r3, #1
 810f6a4:	e029      	b.n	810f6fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810f6a6:	68fb      	ldr	r3, [r7, #12]
 810f6a8:	681b      	ldr	r3, [r3, #0]
 810f6aa:	69db      	ldr	r3, [r3, #28]
 810f6ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810f6b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810f6b4:	d111      	bne.n	810f6da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810f6b6:	68fb      	ldr	r3, [r7, #12]
 810f6b8:	681b      	ldr	r3, [r3, #0]
 810f6ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810f6be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810f6c0:	68f8      	ldr	r0, [r7, #12]
 810f6c2:	f000 f81e 	bl	810f702 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810f6c6:	68fb      	ldr	r3, [r7, #12]
 810f6c8:	2220      	movs	r2, #32
 810f6ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810f6ce:	68fb      	ldr	r3, [r7, #12]
 810f6d0:	2200      	movs	r2, #0
 810f6d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 810f6d6:	2303      	movs	r3, #3
 810f6d8:	e00f      	b.n	810f6fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810f6da:	68fb      	ldr	r3, [r7, #12]
 810f6dc:	681b      	ldr	r3, [r3, #0]
 810f6de:	69da      	ldr	r2, [r3, #28]
 810f6e0:	68bb      	ldr	r3, [r7, #8]
 810f6e2:	4013      	ands	r3, r2
 810f6e4:	68ba      	ldr	r2, [r7, #8]
 810f6e6:	429a      	cmp	r2, r3
 810f6e8:	bf0c      	ite	eq
 810f6ea:	2301      	moveq	r3, #1
 810f6ec:	2300      	movne	r3, #0
 810f6ee:	b2db      	uxtb	r3, r3
 810f6f0:	461a      	mov	r2, r3
 810f6f2:	79fb      	ldrb	r3, [r7, #7]
 810f6f4:	429a      	cmp	r2, r3
 810f6f6:	d0a0      	beq.n	810f63a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810f6f8:	2300      	movs	r3, #0
}
 810f6fa:	4618      	mov	r0, r3
 810f6fc:	3710      	adds	r7, #16
 810f6fe:	46bd      	mov	sp, r7
 810f700:	bd80      	pop	{r7, pc}

0810f702 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810f702:	b480      	push	{r7}
 810f704:	b095      	sub	sp, #84	@ 0x54
 810f706:	af00      	add	r7, sp, #0
 810f708:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810f70a:	687b      	ldr	r3, [r7, #4]
 810f70c:	681b      	ldr	r3, [r3, #0]
 810f70e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810f710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810f712:	e853 3f00 	ldrex	r3, [r3]
 810f716:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810f718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f71a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810f71e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810f720:	687b      	ldr	r3, [r7, #4]
 810f722:	681b      	ldr	r3, [r3, #0]
 810f724:	461a      	mov	r2, r3
 810f726:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810f728:	643b      	str	r3, [r7, #64]	@ 0x40
 810f72a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810f72c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810f72e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810f730:	e841 2300 	strex	r3, r2, [r1]
 810f734:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810f736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810f738:	2b00      	cmp	r3, #0
 810f73a:	d1e6      	bne.n	810f70a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810f73c:	687b      	ldr	r3, [r7, #4]
 810f73e:	681b      	ldr	r3, [r3, #0]
 810f740:	3308      	adds	r3, #8
 810f742:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810f744:	6a3b      	ldr	r3, [r7, #32]
 810f746:	e853 3f00 	ldrex	r3, [r3]
 810f74a:	61fb      	str	r3, [r7, #28]
   return(result);
 810f74c:	69fb      	ldr	r3, [r7, #28]
 810f74e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810f752:	f023 0301 	bic.w	r3, r3, #1
 810f756:	64bb      	str	r3, [r7, #72]	@ 0x48
 810f758:	687b      	ldr	r3, [r7, #4]
 810f75a:	681b      	ldr	r3, [r3, #0]
 810f75c:	3308      	adds	r3, #8
 810f75e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810f760:	62fa      	str	r2, [r7, #44]	@ 0x2c
 810f762:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810f764:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810f766:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810f768:	e841 2300 	strex	r3, r2, [r1]
 810f76c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810f76e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810f770:	2b00      	cmp	r3, #0
 810f772:	d1e3      	bne.n	810f73c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810f774:	687b      	ldr	r3, [r7, #4]
 810f776:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810f778:	2b01      	cmp	r3, #1
 810f77a:	d118      	bne.n	810f7ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810f77c:	687b      	ldr	r3, [r7, #4]
 810f77e:	681b      	ldr	r3, [r3, #0]
 810f780:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810f782:	68fb      	ldr	r3, [r7, #12]
 810f784:	e853 3f00 	ldrex	r3, [r3]
 810f788:	60bb      	str	r3, [r7, #8]
   return(result);
 810f78a:	68bb      	ldr	r3, [r7, #8]
 810f78c:	f023 0310 	bic.w	r3, r3, #16
 810f790:	647b      	str	r3, [r7, #68]	@ 0x44
 810f792:	687b      	ldr	r3, [r7, #4]
 810f794:	681b      	ldr	r3, [r3, #0]
 810f796:	461a      	mov	r2, r3
 810f798:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810f79a:	61bb      	str	r3, [r7, #24]
 810f79c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810f79e:	6979      	ldr	r1, [r7, #20]
 810f7a0:	69ba      	ldr	r2, [r7, #24]
 810f7a2:	e841 2300 	strex	r3, r2, [r1]
 810f7a6:	613b      	str	r3, [r7, #16]
   return(result);
 810f7a8:	693b      	ldr	r3, [r7, #16]
 810f7aa:	2b00      	cmp	r3, #0
 810f7ac:	d1e6      	bne.n	810f77c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810f7ae:	687b      	ldr	r3, [r7, #4]
 810f7b0:	2220      	movs	r2, #32
 810f7b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810f7b6:	687b      	ldr	r3, [r7, #4]
 810f7b8:	2200      	movs	r2, #0
 810f7ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810f7bc:	687b      	ldr	r3, [r7, #4]
 810f7be:	2200      	movs	r2, #0
 810f7c0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 810f7c2:	bf00      	nop
 810f7c4:	3754      	adds	r7, #84	@ 0x54
 810f7c6:	46bd      	mov	sp, r7
 810f7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f7cc:	4770      	bx	lr

0810f7ce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810f7ce:	b480      	push	{r7}
 810f7d0:	b085      	sub	sp, #20
 810f7d2:	af00      	add	r7, sp, #0
 810f7d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810f7d6:	687b      	ldr	r3, [r7, #4]
 810f7d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810f7dc:	2b01      	cmp	r3, #1
 810f7de:	d101      	bne.n	810f7e4 <HAL_UARTEx_DisableFifoMode+0x16>
 810f7e0:	2302      	movs	r3, #2
 810f7e2:	e027      	b.n	810f834 <HAL_UARTEx_DisableFifoMode+0x66>
 810f7e4:	687b      	ldr	r3, [r7, #4]
 810f7e6:	2201      	movs	r2, #1
 810f7e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810f7ec:	687b      	ldr	r3, [r7, #4]
 810f7ee:	2224      	movs	r2, #36	@ 0x24
 810f7f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810f7f4:	687b      	ldr	r3, [r7, #4]
 810f7f6:	681b      	ldr	r3, [r3, #0]
 810f7f8:	681b      	ldr	r3, [r3, #0]
 810f7fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810f7fc:	687b      	ldr	r3, [r7, #4]
 810f7fe:	681b      	ldr	r3, [r3, #0]
 810f800:	681a      	ldr	r2, [r3, #0]
 810f802:	687b      	ldr	r3, [r7, #4]
 810f804:	681b      	ldr	r3, [r3, #0]
 810f806:	f022 0201 	bic.w	r2, r2, #1
 810f80a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810f80c:	68fb      	ldr	r3, [r7, #12]
 810f80e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 810f812:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810f814:	687b      	ldr	r3, [r7, #4]
 810f816:	2200      	movs	r2, #0
 810f818:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810f81a:	687b      	ldr	r3, [r7, #4]
 810f81c:	681b      	ldr	r3, [r3, #0]
 810f81e:	68fa      	ldr	r2, [r7, #12]
 810f820:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810f822:	687b      	ldr	r3, [r7, #4]
 810f824:	2220      	movs	r2, #32
 810f826:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810f82a:	687b      	ldr	r3, [r7, #4]
 810f82c:	2200      	movs	r2, #0
 810f82e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810f832:	2300      	movs	r3, #0
}
 810f834:	4618      	mov	r0, r3
 810f836:	3714      	adds	r7, #20
 810f838:	46bd      	mov	sp, r7
 810f83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f83e:	4770      	bx	lr

0810f840 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810f840:	b580      	push	{r7, lr}
 810f842:	b084      	sub	sp, #16
 810f844:	af00      	add	r7, sp, #0
 810f846:	6078      	str	r0, [r7, #4]
 810f848:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810f84a:	687b      	ldr	r3, [r7, #4]
 810f84c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810f850:	2b01      	cmp	r3, #1
 810f852:	d101      	bne.n	810f858 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810f854:	2302      	movs	r3, #2
 810f856:	e02d      	b.n	810f8b4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810f858:	687b      	ldr	r3, [r7, #4]
 810f85a:	2201      	movs	r2, #1
 810f85c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810f860:	687b      	ldr	r3, [r7, #4]
 810f862:	2224      	movs	r2, #36	@ 0x24
 810f864:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810f868:	687b      	ldr	r3, [r7, #4]
 810f86a:	681b      	ldr	r3, [r3, #0]
 810f86c:	681b      	ldr	r3, [r3, #0]
 810f86e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810f870:	687b      	ldr	r3, [r7, #4]
 810f872:	681b      	ldr	r3, [r3, #0]
 810f874:	681a      	ldr	r2, [r3, #0]
 810f876:	687b      	ldr	r3, [r7, #4]
 810f878:	681b      	ldr	r3, [r3, #0]
 810f87a:	f022 0201 	bic.w	r2, r2, #1
 810f87e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810f880:	687b      	ldr	r3, [r7, #4]
 810f882:	681b      	ldr	r3, [r3, #0]
 810f884:	689b      	ldr	r3, [r3, #8]
 810f886:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 810f88a:	687b      	ldr	r3, [r7, #4]
 810f88c:	681b      	ldr	r3, [r3, #0]
 810f88e:	683a      	ldr	r2, [r7, #0]
 810f890:	430a      	orrs	r2, r1
 810f892:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810f894:	6878      	ldr	r0, [r7, #4]
 810f896:	f000 f84f 	bl	810f938 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810f89a:	687b      	ldr	r3, [r7, #4]
 810f89c:	681b      	ldr	r3, [r3, #0]
 810f89e:	68fa      	ldr	r2, [r7, #12]
 810f8a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810f8a2:	687b      	ldr	r3, [r7, #4]
 810f8a4:	2220      	movs	r2, #32
 810f8a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810f8aa:	687b      	ldr	r3, [r7, #4]
 810f8ac:	2200      	movs	r2, #0
 810f8ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810f8b2:	2300      	movs	r3, #0
}
 810f8b4:	4618      	mov	r0, r3
 810f8b6:	3710      	adds	r7, #16
 810f8b8:	46bd      	mov	sp, r7
 810f8ba:	bd80      	pop	{r7, pc}

0810f8bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810f8bc:	b580      	push	{r7, lr}
 810f8be:	b084      	sub	sp, #16
 810f8c0:	af00      	add	r7, sp, #0
 810f8c2:	6078      	str	r0, [r7, #4]
 810f8c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810f8c6:	687b      	ldr	r3, [r7, #4]
 810f8c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810f8cc:	2b01      	cmp	r3, #1
 810f8ce:	d101      	bne.n	810f8d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810f8d0:	2302      	movs	r3, #2
 810f8d2:	e02d      	b.n	810f930 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810f8d4:	687b      	ldr	r3, [r7, #4]
 810f8d6:	2201      	movs	r2, #1
 810f8d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810f8dc:	687b      	ldr	r3, [r7, #4]
 810f8de:	2224      	movs	r2, #36	@ 0x24
 810f8e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810f8e4:	687b      	ldr	r3, [r7, #4]
 810f8e6:	681b      	ldr	r3, [r3, #0]
 810f8e8:	681b      	ldr	r3, [r3, #0]
 810f8ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810f8ec:	687b      	ldr	r3, [r7, #4]
 810f8ee:	681b      	ldr	r3, [r3, #0]
 810f8f0:	681a      	ldr	r2, [r3, #0]
 810f8f2:	687b      	ldr	r3, [r7, #4]
 810f8f4:	681b      	ldr	r3, [r3, #0]
 810f8f6:	f022 0201 	bic.w	r2, r2, #1
 810f8fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810f8fc:	687b      	ldr	r3, [r7, #4]
 810f8fe:	681b      	ldr	r3, [r3, #0]
 810f900:	689b      	ldr	r3, [r3, #8]
 810f902:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 810f906:	687b      	ldr	r3, [r7, #4]
 810f908:	681b      	ldr	r3, [r3, #0]
 810f90a:	683a      	ldr	r2, [r7, #0]
 810f90c:	430a      	orrs	r2, r1
 810f90e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810f910:	6878      	ldr	r0, [r7, #4]
 810f912:	f000 f811 	bl	810f938 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810f916:	687b      	ldr	r3, [r7, #4]
 810f918:	681b      	ldr	r3, [r3, #0]
 810f91a:	68fa      	ldr	r2, [r7, #12]
 810f91c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810f91e:	687b      	ldr	r3, [r7, #4]
 810f920:	2220      	movs	r2, #32
 810f922:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810f926:	687b      	ldr	r3, [r7, #4]
 810f928:	2200      	movs	r2, #0
 810f92a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810f92e:	2300      	movs	r3, #0
}
 810f930:	4618      	mov	r0, r3
 810f932:	3710      	adds	r7, #16
 810f934:	46bd      	mov	sp, r7
 810f936:	bd80      	pop	{r7, pc}

0810f938 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810f938:	b480      	push	{r7}
 810f93a:	b085      	sub	sp, #20
 810f93c:	af00      	add	r7, sp, #0
 810f93e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810f940:	687b      	ldr	r3, [r7, #4]
 810f942:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810f944:	2b00      	cmp	r3, #0
 810f946:	d108      	bne.n	810f95a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810f948:	687b      	ldr	r3, [r7, #4]
 810f94a:	2201      	movs	r2, #1
 810f94c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 810f950:	687b      	ldr	r3, [r7, #4]
 810f952:	2201      	movs	r2, #1
 810f954:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810f958:	e031      	b.n	810f9be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810f95a:	2310      	movs	r3, #16
 810f95c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810f95e:	2310      	movs	r3, #16
 810f960:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810f962:	687b      	ldr	r3, [r7, #4]
 810f964:	681b      	ldr	r3, [r3, #0]
 810f966:	689b      	ldr	r3, [r3, #8]
 810f968:	0e5b      	lsrs	r3, r3, #25
 810f96a:	b2db      	uxtb	r3, r3
 810f96c:	f003 0307 	and.w	r3, r3, #7
 810f970:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810f972:	687b      	ldr	r3, [r7, #4]
 810f974:	681b      	ldr	r3, [r3, #0]
 810f976:	689b      	ldr	r3, [r3, #8]
 810f978:	0f5b      	lsrs	r3, r3, #29
 810f97a:	b2db      	uxtb	r3, r3
 810f97c:	f003 0307 	and.w	r3, r3, #7
 810f980:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810f982:	7bbb      	ldrb	r3, [r7, #14]
 810f984:	7b3a      	ldrb	r2, [r7, #12]
 810f986:	4911      	ldr	r1, [pc, #68]	@ (810f9cc <UARTEx_SetNbDataToProcess+0x94>)
 810f988:	5c8a      	ldrb	r2, [r1, r2]
 810f98a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810f98e:	7b3a      	ldrb	r2, [r7, #12]
 810f990:	490f      	ldr	r1, [pc, #60]	@ (810f9d0 <UARTEx_SetNbDataToProcess+0x98>)
 810f992:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810f994:	fb93 f3f2 	sdiv	r3, r3, r2
 810f998:	b29a      	uxth	r2, r3
 810f99a:	687b      	ldr	r3, [r7, #4]
 810f99c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810f9a0:	7bfb      	ldrb	r3, [r7, #15]
 810f9a2:	7b7a      	ldrb	r2, [r7, #13]
 810f9a4:	4909      	ldr	r1, [pc, #36]	@ (810f9cc <UARTEx_SetNbDataToProcess+0x94>)
 810f9a6:	5c8a      	ldrb	r2, [r1, r2]
 810f9a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810f9ac:	7b7a      	ldrb	r2, [r7, #13]
 810f9ae:	4908      	ldr	r1, [pc, #32]	@ (810f9d0 <UARTEx_SetNbDataToProcess+0x98>)
 810f9b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810f9b2:	fb93 f3f2 	sdiv	r3, r3, r2
 810f9b6:	b29a      	uxth	r2, r3
 810f9b8:	687b      	ldr	r3, [r7, #4]
 810f9ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 810f9be:	bf00      	nop
 810f9c0:	3714      	adds	r7, #20
 810f9c2:	46bd      	mov	sp, r7
 810f9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f9c8:	4770      	bx	lr
 810f9ca:	bf00      	nop
 810f9cc:	08128998 	.word	0x08128998
 810f9d0:	081289a0 	.word	0x081289a0

0810f9d4 <__NVIC_SetPriority>:
{
 810f9d4:	b480      	push	{r7}
 810f9d6:	b083      	sub	sp, #12
 810f9d8:	af00      	add	r7, sp, #0
 810f9da:	4603      	mov	r3, r0
 810f9dc:	6039      	str	r1, [r7, #0]
 810f9de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810f9e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810f9e4:	2b00      	cmp	r3, #0
 810f9e6:	db0a      	blt.n	810f9fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810f9e8:	683b      	ldr	r3, [r7, #0]
 810f9ea:	b2da      	uxtb	r2, r3
 810f9ec:	490c      	ldr	r1, [pc, #48]	@ (810fa20 <__NVIC_SetPriority+0x4c>)
 810f9ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810f9f2:	0112      	lsls	r2, r2, #4
 810f9f4:	b2d2      	uxtb	r2, r2
 810f9f6:	440b      	add	r3, r1
 810f9f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 810f9fc:	e00a      	b.n	810fa14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810f9fe:	683b      	ldr	r3, [r7, #0]
 810fa00:	b2da      	uxtb	r2, r3
 810fa02:	4908      	ldr	r1, [pc, #32]	@ (810fa24 <__NVIC_SetPriority+0x50>)
 810fa04:	88fb      	ldrh	r3, [r7, #6]
 810fa06:	f003 030f 	and.w	r3, r3, #15
 810fa0a:	3b04      	subs	r3, #4
 810fa0c:	0112      	lsls	r2, r2, #4
 810fa0e:	b2d2      	uxtb	r2, r2
 810fa10:	440b      	add	r3, r1
 810fa12:	761a      	strb	r2, [r3, #24]
}
 810fa14:	bf00      	nop
 810fa16:	370c      	adds	r7, #12
 810fa18:	46bd      	mov	sp, r7
 810fa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fa1e:	4770      	bx	lr
 810fa20:	e000e100 	.word	0xe000e100
 810fa24:	e000ed00 	.word	0xe000ed00

0810fa28 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 810fa28:	b580      	push	{r7, lr}
 810fa2a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 810fa2c:	4b05      	ldr	r3, [pc, #20]	@ (810fa44 <SysTick_Handler+0x1c>)
 810fa2e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 810fa30:	f003 fd5c 	bl	81134ec <xTaskGetSchedulerState>
 810fa34:	4603      	mov	r3, r0
 810fa36:	2b01      	cmp	r3, #1
 810fa38:	d001      	beq.n	810fa3e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 810fa3a:	f001 f915 	bl	8110c68 <xPortSysTickHandler>
  }
}
 810fa3e:	bf00      	nop
 810fa40:	bd80      	pop	{r7, pc}
 810fa42:	bf00      	nop
 810fa44:	e000e010 	.word	0xe000e010

0810fa48 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 810fa48:	b580      	push	{r7, lr}
 810fa4a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 810fa4c:	2100      	movs	r1, #0
 810fa4e:	f06f 0004 	mvn.w	r0, #4
 810fa52:	f7ff ffbf 	bl	810f9d4 <__NVIC_SetPriority>
#endif
}
 810fa56:	bf00      	nop
 810fa58:	bd80      	pop	{r7, pc}
	...

0810fa5c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 810fa5c:	b480      	push	{r7}
 810fa5e:	b083      	sub	sp, #12
 810fa60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810fa62:	f3ef 8305 	mrs	r3, IPSR
 810fa66:	603b      	str	r3, [r7, #0]
  return(result);
 810fa68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810fa6a:	2b00      	cmp	r3, #0
 810fa6c:	d003      	beq.n	810fa76 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 810fa6e:	f06f 0305 	mvn.w	r3, #5
 810fa72:	607b      	str	r3, [r7, #4]
 810fa74:	e00c      	b.n	810fa90 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 810fa76:	4b0a      	ldr	r3, [pc, #40]	@ (810faa0 <osKernelInitialize+0x44>)
 810fa78:	681b      	ldr	r3, [r3, #0]
 810fa7a:	2b00      	cmp	r3, #0
 810fa7c:	d105      	bne.n	810fa8a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 810fa7e:	4b08      	ldr	r3, [pc, #32]	@ (810faa0 <osKernelInitialize+0x44>)
 810fa80:	2201      	movs	r2, #1
 810fa82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 810fa84:	2300      	movs	r3, #0
 810fa86:	607b      	str	r3, [r7, #4]
 810fa88:	e002      	b.n	810fa90 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 810fa8a:	f04f 33ff 	mov.w	r3, #4294967295
 810fa8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 810fa90:	687b      	ldr	r3, [r7, #4]
}
 810fa92:	4618      	mov	r0, r3
 810fa94:	370c      	adds	r7, #12
 810fa96:	46bd      	mov	sp, r7
 810fa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fa9c:	4770      	bx	lr
 810fa9e:	bf00      	nop
 810faa0:	100003d8 	.word	0x100003d8

0810faa4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 810faa4:	b580      	push	{r7, lr}
 810faa6:	b082      	sub	sp, #8
 810faa8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810faaa:	f3ef 8305 	mrs	r3, IPSR
 810faae:	603b      	str	r3, [r7, #0]
  return(result);
 810fab0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810fab2:	2b00      	cmp	r3, #0
 810fab4:	d003      	beq.n	810fabe <osKernelStart+0x1a>
    stat = osErrorISR;
 810fab6:	f06f 0305 	mvn.w	r3, #5
 810faba:	607b      	str	r3, [r7, #4]
 810fabc:	e010      	b.n	810fae0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 810fabe:	4b0b      	ldr	r3, [pc, #44]	@ (810faec <osKernelStart+0x48>)
 810fac0:	681b      	ldr	r3, [r3, #0]
 810fac2:	2b01      	cmp	r3, #1
 810fac4:	d109      	bne.n	810fada <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 810fac6:	f7ff ffbf 	bl	810fa48 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 810faca:	4b08      	ldr	r3, [pc, #32]	@ (810faec <osKernelStart+0x48>)
 810facc:	2202      	movs	r2, #2
 810face:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 810fad0:	f003 f85e 	bl	8112b90 <vTaskStartScheduler>
      stat = osOK;
 810fad4:	2300      	movs	r3, #0
 810fad6:	607b      	str	r3, [r7, #4]
 810fad8:	e002      	b.n	810fae0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 810fada:	f04f 33ff 	mov.w	r3, #4294967295
 810fade:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 810fae0:	687b      	ldr	r3, [r7, #4]
}
 810fae2:	4618      	mov	r0, r3
 810fae4:	3708      	adds	r7, #8
 810fae6:	46bd      	mov	sp, r7
 810fae8:	bd80      	pop	{r7, pc}
 810faea:	bf00      	nop
 810faec:	100003d8 	.word	0x100003d8

0810faf0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 810faf0:	b580      	push	{r7, lr}
 810faf2:	b082      	sub	sp, #8
 810faf4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810faf6:	f3ef 8305 	mrs	r3, IPSR
 810fafa:	603b      	str	r3, [r7, #0]
  return(result);
 810fafc:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 810fafe:	2b00      	cmp	r3, #0
 810fb00:	d003      	beq.n	810fb0a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 810fb02:	f003 f971 	bl	8112de8 <xTaskGetTickCountFromISR>
 810fb06:	6078      	str	r0, [r7, #4]
 810fb08:	e002      	b.n	810fb10 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 810fb0a:	f003 f95d 	bl	8112dc8 <xTaskGetTickCount>
 810fb0e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 810fb10:	687b      	ldr	r3, [r7, #4]
}
 810fb12:	4618      	mov	r0, r3
 810fb14:	3708      	adds	r7, #8
 810fb16:	46bd      	mov	sp, r7
 810fb18:	bd80      	pop	{r7, pc}

0810fb1a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 810fb1a:	b580      	push	{r7, lr}
 810fb1c:	b08e      	sub	sp, #56	@ 0x38
 810fb1e:	af04      	add	r7, sp, #16
 810fb20:	60f8      	str	r0, [r7, #12]
 810fb22:	60b9      	str	r1, [r7, #8]
 810fb24:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 810fb26:	2300      	movs	r3, #0
 810fb28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810fb2a:	f3ef 8305 	mrs	r3, IPSR
 810fb2e:	617b      	str	r3, [r7, #20]
  return(result);
 810fb30:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 810fb32:	2b00      	cmp	r3, #0
 810fb34:	d17e      	bne.n	810fc34 <osThreadNew+0x11a>
 810fb36:	68fb      	ldr	r3, [r7, #12]
 810fb38:	2b00      	cmp	r3, #0
 810fb3a:	d07b      	beq.n	810fc34 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 810fb3c:	2380      	movs	r3, #128	@ 0x80
 810fb3e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 810fb40:	2318      	movs	r3, #24
 810fb42:	61fb      	str	r3, [r7, #28]

    name = NULL;
 810fb44:	2300      	movs	r3, #0
 810fb46:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 810fb48:	f04f 33ff 	mov.w	r3, #4294967295
 810fb4c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 810fb4e:	687b      	ldr	r3, [r7, #4]
 810fb50:	2b00      	cmp	r3, #0
 810fb52:	d045      	beq.n	810fbe0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 810fb54:	687b      	ldr	r3, [r7, #4]
 810fb56:	681b      	ldr	r3, [r3, #0]
 810fb58:	2b00      	cmp	r3, #0
 810fb5a:	d002      	beq.n	810fb62 <osThreadNew+0x48>
        name = attr->name;
 810fb5c:	687b      	ldr	r3, [r7, #4]
 810fb5e:	681b      	ldr	r3, [r3, #0]
 810fb60:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 810fb62:	687b      	ldr	r3, [r7, #4]
 810fb64:	699b      	ldr	r3, [r3, #24]
 810fb66:	2b00      	cmp	r3, #0
 810fb68:	d002      	beq.n	810fb70 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 810fb6a:	687b      	ldr	r3, [r7, #4]
 810fb6c:	699b      	ldr	r3, [r3, #24]
 810fb6e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 810fb70:	69fb      	ldr	r3, [r7, #28]
 810fb72:	2b00      	cmp	r3, #0
 810fb74:	d008      	beq.n	810fb88 <osThreadNew+0x6e>
 810fb76:	69fb      	ldr	r3, [r7, #28]
 810fb78:	2b38      	cmp	r3, #56	@ 0x38
 810fb7a:	d805      	bhi.n	810fb88 <osThreadNew+0x6e>
 810fb7c:	687b      	ldr	r3, [r7, #4]
 810fb7e:	685b      	ldr	r3, [r3, #4]
 810fb80:	f003 0301 	and.w	r3, r3, #1
 810fb84:	2b00      	cmp	r3, #0
 810fb86:	d001      	beq.n	810fb8c <osThreadNew+0x72>
        return (NULL);
 810fb88:	2300      	movs	r3, #0
 810fb8a:	e054      	b.n	810fc36 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 810fb8c:	687b      	ldr	r3, [r7, #4]
 810fb8e:	695b      	ldr	r3, [r3, #20]
 810fb90:	2b00      	cmp	r3, #0
 810fb92:	d003      	beq.n	810fb9c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 810fb94:	687b      	ldr	r3, [r7, #4]
 810fb96:	695b      	ldr	r3, [r3, #20]
 810fb98:	089b      	lsrs	r3, r3, #2
 810fb9a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810fb9c:	687b      	ldr	r3, [r7, #4]
 810fb9e:	689b      	ldr	r3, [r3, #8]
 810fba0:	2b00      	cmp	r3, #0
 810fba2:	d00e      	beq.n	810fbc2 <osThreadNew+0xa8>
 810fba4:	687b      	ldr	r3, [r7, #4]
 810fba6:	68db      	ldr	r3, [r3, #12]
 810fba8:	2ba7      	cmp	r3, #167	@ 0xa7
 810fbaa:	d90a      	bls.n	810fbc2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810fbac:	687b      	ldr	r3, [r7, #4]
 810fbae:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810fbb0:	2b00      	cmp	r3, #0
 810fbb2:	d006      	beq.n	810fbc2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810fbb4:	687b      	ldr	r3, [r7, #4]
 810fbb6:	695b      	ldr	r3, [r3, #20]
 810fbb8:	2b00      	cmp	r3, #0
 810fbba:	d002      	beq.n	810fbc2 <osThreadNew+0xa8>
        mem = 1;
 810fbbc:	2301      	movs	r3, #1
 810fbbe:	61bb      	str	r3, [r7, #24]
 810fbc0:	e010      	b.n	810fbe4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 810fbc2:	687b      	ldr	r3, [r7, #4]
 810fbc4:	689b      	ldr	r3, [r3, #8]
 810fbc6:	2b00      	cmp	r3, #0
 810fbc8:	d10c      	bne.n	810fbe4 <osThreadNew+0xca>
 810fbca:	687b      	ldr	r3, [r7, #4]
 810fbcc:	68db      	ldr	r3, [r3, #12]
 810fbce:	2b00      	cmp	r3, #0
 810fbd0:	d108      	bne.n	810fbe4 <osThreadNew+0xca>
 810fbd2:	687b      	ldr	r3, [r7, #4]
 810fbd4:	691b      	ldr	r3, [r3, #16]
 810fbd6:	2b00      	cmp	r3, #0
 810fbd8:	d104      	bne.n	810fbe4 <osThreadNew+0xca>
          mem = 0;
 810fbda:	2300      	movs	r3, #0
 810fbdc:	61bb      	str	r3, [r7, #24]
 810fbde:	e001      	b.n	810fbe4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 810fbe0:	2300      	movs	r3, #0
 810fbe2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 810fbe4:	69bb      	ldr	r3, [r7, #24]
 810fbe6:	2b01      	cmp	r3, #1
 810fbe8:	d110      	bne.n	810fc0c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810fbea:	687b      	ldr	r3, [r7, #4]
 810fbec:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 810fbee:	687a      	ldr	r2, [r7, #4]
 810fbf0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810fbf2:	9202      	str	r2, [sp, #8]
 810fbf4:	9301      	str	r3, [sp, #4]
 810fbf6:	69fb      	ldr	r3, [r7, #28]
 810fbf8:	9300      	str	r3, [sp, #0]
 810fbfa:	68bb      	ldr	r3, [r7, #8]
 810fbfc:	6a3a      	ldr	r2, [r7, #32]
 810fbfe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810fc00:	68f8      	ldr	r0, [r7, #12]
 810fc02:	f002 fdd1 	bl	81127a8 <xTaskCreateStatic>
 810fc06:	4603      	mov	r3, r0
 810fc08:	613b      	str	r3, [r7, #16]
 810fc0a:	e013      	b.n	810fc34 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 810fc0c:	69bb      	ldr	r3, [r7, #24]
 810fc0e:	2b00      	cmp	r3, #0
 810fc10:	d110      	bne.n	810fc34 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 810fc12:	6a3b      	ldr	r3, [r7, #32]
 810fc14:	b29a      	uxth	r2, r3
 810fc16:	f107 0310 	add.w	r3, r7, #16
 810fc1a:	9301      	str	r3, [sp, #4]
 810fc1c:	69fb      	ldr	r3, [r7, #28]
 810fc1e:	9300      	str	r3, [sp, #0]
 810fc20:	68bb      	ldr	r3, [r7, #8]
 810fc22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810fc24:	68f8      	ldr	r0, [r7, #12]
 810fc26:	f002 fe1f 	bl	8112868 <xTaskCreate>
 810fc2a:	4603      	mov	r3, r0
 810fc2c:	2b01      	cmp	r3, #1
 810fc2e:	d001      	beq.n	810fc34 <osThreadNew+0x11a>
            hTask = NULL;
 810fc30:	2300      	movs	r3, #0
 810fc32:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 810fc34:	693b      	ldr	r3, [r7, #16]
}
 810fc36:	4618      	mov	r0, r3
 810fc38:	3728      	adds	r7, #40	@ 0x28
 810fc3a:	46bd      	mov	sp, r7
 810fc3c:	bd80      	pop	{r7, pc}

0810fc3e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 810fc3e:	b580      	push	{r7, lr}
 810fc40:	b084      	sub	sp, #16
 810fc42:	af00      	add	r7, sp, #0
 810fc44:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810fc46:	f3ef 8305 	mrs	r3, IPSR
 810fc4a:	60bb      	str	r3, [r7, #8]
  return(result);
 810fc4c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 810fc4e:	2b00      	cmp	r3, #0
 810fc50:	d003      	beq.n	810fc5a <osDelay+0x1c>
    stat = osErrorISR;
 810fc52:	f06f 0305 	mvn.w	r3, #5
 810fc56:	60fb      	str	r3, [r7, #12]
 810fc58:	e007      	b.n	810fc6a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 810fc5a:	2300      	movs	r3, #0
 810fc5c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 810fc5e:	687b      	ldr	r3, [r7, #4]
 810fc60:	2b00      	cmp	r3, #0
 810fc62:	d002      	beq.n	810fc6a <osDelay+0x2c>
      vTaskDelay(ticks);
 810fc64:	6878      	ldr	r0, [r7, #4]
 810fc66:	f002 ff5d 	bl	8112b24 <vTaskDelay>
    }
  }

  return (stat);
 810fc6a:	68fb      	ldr	r3, [r7, #12]
}
 810fc6c:	4618      	mov	r0, r3
 810fc6e:	3710      	adds	r7, #16
 810fc70:	46bd      	mov	sp, r7
 810fc72:	bd80      	pop	{r7, pc}

0810fc74 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 810fc74:	b580      	push	{r7, lr}
 810fc76:	b088      	sub	sp, #32
 810fc78:	af00      	add	r7, sp, #0
 810fc7a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 810fc7c:	2300      	movs	r3, #0
 810fc7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810fc80:	f3ef 8305 	mrs	r3, IPSR
 810fc84:	60bb      	str	r3, [r7, #8]
  return(result);
 810fc86:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 810fc88:	2b00      	cmp	r3, #0
 810fc8a:	d174      	bne.n	810fd76 <osMutexNew+0x102>
    if (attr != NULL) {
 810fc8c:	687b      	ldr	r3, [r7, #4]
 810fc8e:	2b00      	cmp	r3, #0
 810fc90:	d003      	beq.n	810fc9a <osMutexNew+0x26>
      type = attr->attr_bits;
 810fc92:	687b      	ldr	r3, [r7, #4]
 810fc94:	685b      	ldr	r3, [r3, #4]
 810fc96:	61bb      	str	r3, [r7, #24]
 810fc98:	e001      	b.n	810fc9e <osMutexNew+0x2a>
    } else {
      type = 0U;
 810fc9a:	2300      	movs	r3, #0
 810fc9c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 810fc9e:	69bb      	ldr	r3, [r7, #24]
 810fca0:	f003 0301 	and.w	r3, r3, #1
 810fca4:	2b00      	cmp	r3, #0
 810fca6:	d002      	beq.n	810fcae <osMutexNew+0x3a>
      rmtx = 1U;
 810fca8:	2301      	movs	r3, #1
 810fcaa:	617b      	str	r3, [r7, #20]
 810fcac:	e001      	b.n	810fcb2 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 810fcae:	2300      	movs	r3, #0
 810fcb0:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 810fcb2:	69bb      	ldr	r3, [r7, #24]
 810fcb4:	f003 0308 	and.w	r3, r3, #8
 810fcb8:	2b00      	cmp	r3, #0
 810fcba:	d15c      	bne.n	810fd76 <osMutexNew+0x102>
      mem = -1;
 810fcbc:	f04f 33ff 	mov.w	r3, #4294967295
 810fcc0:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 810fcc2:	687b      	ldr	r3, [r7, #4]
 810fcc4:	2b00      	cmp	r3, #0
 810fcc6:	d015      	beq.n	810fcf4 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 810fcc8:	687b      	ldr	r3, [r7, #4]
 810fcca:	689b      	ldr	r3, [r3, #8]
 810fccc:	2b00      	cmp	r3, #0
 810fcce:	d006      	beq.n	810fcde <osMutexNew+0x6a>
 810fcd0:	687b      	ldr	r3, [r7, #4]
 810fcd2:	68db      	ldr	r3, [r3, #12]
 810fcd4:	2b4f      	cmp	r3, #79	@ 0x4f
 810fcd6:	d902      	bls.n	810fcde <osMutexNew+0x6a>
          mem = 1;
 810fcd8:	2301      	movs	r3, #1
 810fcda:	613b      	str	r3, [r7, #16]
 810fcdc:	e00c      	b.n	810fcf8 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 810fcde:	687b      	ldr	r3, [r7, #4]
 810fce0:	689b      	ldr	r3, [r3, #8]
 810fce2:	2b00      	cmp	r3, #0
 810fce4:	d108      	bne.n	810fcf8 <osMutexNew+0x84>
 810fce6:	687b      	ldr	r3, [r7, #4]
 810fce8:	68db      	ldr	r3, [r3, #12]
 810fcea:	2b00      	cmp	r3, #0
 810fcec:	d104      	bne.n	810fcf8 <osMutexNew+0x84>
            mem = 0;
 810fcee:	2300      	movs	r3, #0
 810fcf0:	613b      	str	r3, [r7, #16]
 810fcf2:	e001      	b.n	810fcf8 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 810fcf4:	2300      	movs	r3, #0
 810fcf6:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 810fcf8:	693b      	ldr	r3, [r7, #16]
 810fcfa:	2b01      	cmp	r3, #1
 810fcfc:	d112      	bne.n	810fd24 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 810fcfe:	697b      	ldr	r3, [r7, #20]
 810fd00:	2b00      	cmp	r3, #0
 810fd02:	d007      	beq.n	810fd14 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 810fd04:	687b      	ldr	r3, [r7, #4]
 810fd06:	689b      	ldr	r3, [r3, #8]
 810fd08:	4619      	mov	r1, r3
 810fd0a:	2004      	movs	r0, #4
 810fd0c:	f001 f9b5 	bl	811107a <xQueueCreateMutexStatic>
 810fd10:	61f8      	str	r0, [r7, #28]
 810fd12:	e016      	b.n	810fd42 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 810fd14:	687b      	ldr	r3, [r7, #4]
 810fd16:	689b      	ldr	r3, [r3, #8]
 810fd18:	4619      	mov	r1, r3
 810fd1a:	2001      	movs	r0, #1
 810fd1c:	f001 f9ad 	bl	811107a <xQueueCreateMutexStatic>
 810fd20:	61f8      	str	r0, [r7, #28]
 810fd22:	e00e      	b.n	810fd42 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 810fd24:	693b      	ldr	r3, [r7, #16]
 810fd26:	2b00      	cmp	r3, #0
 810fd28:	d10b      	bne.n	810fd42 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 810fd2a:	697b      	ldr	r3, [r7, #20]
 810fd2c:	2b00      	cmp	r3, #0
 810fd2e:	d004      	beq.n	810fd3a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 810fd30:	2004      	movs	r0, #4
 810fd32:	f001 f98a 	bl	811104a <xQueueCreateMutex>
 810fd36:	61f8      	str	r0, [r7, #28]
 810fd38:	e003      	b.n	810fd42 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 810fd3a:	2001      	movs	r0, #1
 810fd3c:	f001 f985 	bl	811104a <xQueueCreateMutex>
 810fd40:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 810fd42:	69fb      	ldr	r3, [r7, #28]
 810fd44:	2b00      	cmp	r3, #0
 810fd46:	d00c      	beq.n	810fd62 <osMutexNew+0xee>
        if (attr != NULL) {
 810fd48:	687b      	ldr	r3, [r7, #4]
 810fd4a:	2b00      	cmp	r3, #0
 810fd4c:	d003      	beq.n	810fd56 <osMutexNew+0xe2>
          name = attr->name;
 810fd4e:	687b      	ldr	r3, [r7, #4]
 810fd50:	681b      	ldr	r3, [r3, #0]
 810fd52:	60fb      	str	r3, [r7, #12]
 810fd54:	e001      	b.n	810fd5a <osMutexNew+0xe6>
        } else {
          name = NULL;
 810fd56:	2300      	movs	r3, #0
 810fd58:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 810fd5a:	68f9      	ldr	r1, [r7, #12]
 810fd5c:	69f8      	ldr	r0, [r7, #28]
 810fd5e:	f002 f871 	bl	8111e44 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 810fd62:	69fb      	ldr	r3, [r7, #28]
 810fd64:	2b00      	cmp	r3, #0
 810fd66:	d006      	beq.n	810fd76 <osMutexNew+0x102>
 810fd68:	697b      	ldr	r3, [r7, #20]
 810fd6a:	2b00      	cmp	r3, #0
 810fd6c:	d003      	beq.n	810fd76 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 810fd6e:	69fb      	ldr	r3, [r7, #28]
 810fd70:	f043 0301 	orr.w	r3, r3, #1
 810fd74:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 810fd76:	69fb      	ldr	r3, [r7, #28]
}
 810fd78:	4618      	mov	r0, r3
 810fd7a:	3720      	adds	r7, #32
 810fd7c:	46bd      	mov	sp, r7
 810fd7e:	bd80      	pop	{r7, pc}

0810fd80 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 810fd80:	b580      	push	{r7, lr}
 810fd82:	b086      	sub	sp, #24
 810fd84:	af00      	add	r7, sp, #0
 810fd86:	6078      	str	r0, [r7, #4]
 810fd88:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 810fd8a:	687b      	ldr	r3, [r7, #4]
 810fd8c:	f023 0301 	bic.w	r3, r3, #1
 810fd90:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 810fd92:	687b      	ldr	r3, [r7, #4]
 810fd94:	f003 0301 	and.w	r3, r3, #1
 810fd98:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 810fd9a:	2300      	movs	r3, #0
 810fd9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810fd9e:	f3ef 8305 	mrs	r3, IPSR
 810fda2:	60bb      	str	r3, [r7, #8]
  return(result);
 810fda4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 810fda6:	2b00      	cmp	r3, #0
 810fda8:	d003      	beq.n	810fdb2 <osMutexAcquire+0x32>
    stat = osErrorISR;
 810fdaa:	f06f 0305 	mvn.w	r3, #5
 810fdae:	617b      	str	r3, [r7, #20]
 810fdb0:	e02c      	b.n	810fe0c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 810fdb2:	693b      	ldr	r3, [r7, #16]
 810fdb4:	2b00      	cmp	r3, #0
 810fdb6:	d103      	bne.n	810fdc0 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 810fdb8:	f06f 0303 	mvn.w	r3, #3
 810fdbc:	617b      	str	r3, [r7, #20]
 810fdbe:	e025      	b.n	810fe0c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 810fdc0:	68fb      	ldr	r3, [r7, #12]
 810fdc2:	2b00      	cmp	r3, #0
 810fdc4:	d011      	beq.n	810fdea <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 810fdc6:	6839      	ldr	r1, [r7, #0]
 810fdc8:	6938      	ldr	r0, [r7, #16]
 810fdca:	f001 f9a6 	bl	811111a <xQueueTakeMutexRecursive>
 810fdce:	4603      	mov	r3, r0
 810fdd0:	2b01      	cmp	r3, #1
 810fdd2:	d01b      	beq.n	810fe0c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 810fdd4:	683b      	ldr	r3, [r7, #0]
 810fdd6:	2b00      	cmp	r3, #0
 810fdd8:	d003      	beq.n	810fde2 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 810fdda:	f06f 0301 	mvn.w	r3, #1
 810fdde:	617b      	str	r3, [r7, #20]
 810fde0:	e014      	b.n	810fe0c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 810fde2:	f06f 0302 	mvn.w	r3, #2
 810fde6:	617b      	str	r3, [r7, #20]
 810fde8:	e010      	b.n	810fe0c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 810fdea:	6839      	ldr	r1, [r7, #0]
 810fdec:	6938      	ldr	r0, [r7, #16]
 810fdee:	f001 fd4b 	bl	8111888 <xQueueSemaphoreTake>
 810fdf2:	4603      	mov	r3, r0
 810fdf4:	2b01      	cmp	r3, #1
 810fdf6:	d009      	beq.n	810fe0c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 810fdf8:	683b      	ldr	r3, [r7, #0]
 810fdfa:	2b00      	cmp	r3, #0
 810fdfc:	d003      	beq.n	810fe06 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 810fdfe:	f06f 0301 	mvn.w	r3, #1
 810fe02:	617b      	str	r3, [r7, #20]
 810fe04:	e002      	b.n	810fe0c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 810fe06:	f06f 0302 	mvn.w	r3, #2
 810fe0a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 810fe0c:	697b      	ldr	r3, [r7, #20]
}
 810fe0e:	4618      	mov	r0, r3
 810fe10:	3718      	adds	r7, #24
 810fe12:	46bd      	mov	sp, r7
 810fe14:	bd80      	pop	{r7, pc}

0810fe16 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 810fe16:	b580      	push	{r7, lr}
 810fe18:	b086      	sub	sp, #24
 810fe1a:	af00      	add	r7, sp, #0
 810fe1c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 810fe1e:	687b      	ldr	r3, [r7, #4]
 810fe20:	f023 0301 	bic.w	r3, r3, #1
 810fe24:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 810fe26:	687b      	ldr	r3, [r7, #4]
 810fe28:	f003 0301 	and.w	r3, r3, #1
 810fe2c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 810fe2e:	2300      	movs	r3, #0
 810fe30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810fe32:	f3ef 8305 	mrs	r3, IPSR
 810fe36:	60bb      	str	r3, [r7, #8]
  return(result);
 810fe38:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 810fe3a:	2b00      	cmp	r3, #0
 810fe3c:	d003      	beq.n	810fe46 <osMutexRelease+0x30>
    stat = osErrorISR;
 810fe3e:	f06f 0305 	mvn.w	r3, #5
 810fe42:	617b      	str	r3, [r7, #20]
 810fe44:	e01f      	b.n	810fe86 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 810fe46:	693b      	ldr	r3, [r7, #16]
 810fe48:	2b00      	cmp	r3, #0
 810fe4a:	d103      	bne.n	810fe54 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 810fe4c:	f06f 0303 	mvn.w	r3, #3
 810fe50:	617b      	str	r3, [r7, #20]
 810fe52:	e018      	b.n	810fe86 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 810fe54:	68fb      	ldr	r3, [r7, #12]
 810fe56:	2b00      	cmp	r3, #0
 810fe58:	d009      	beq.n	810fe6e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 810fe5a:	6938      	ldr	r0, [r7, #16]
 810fe5c:	f001 f928 	bl	81110b0 <xQueueGiveMutexRecursive>
 810fe60:	4603      	mov	r3, r0
 810fe62:	2b01      	cmp	r3, #1
 810fe64:	d00f      	beq.n	810fe86 <osMutexRelease+0x70>
        stat = osErrorResource;
 810fe66:	f06f 0302 	mvn.w	r3, #2
 810fe6a:	617b      	str	r3, [r7, #20]
 810fe6c:	e00b      	b.n	810fe86 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 810fe6e:	2300      	movs	r3, #0
 810fe70:	2200      	movs	r2, #0
 810fe72:	2100      	movs	r1, #0
 810fe74:	6938      	ldr	r0, [r7, #16]
 810fe76:	f001 f9f5 	bl	8111264 <xQueueGenericSend>
 810fe7a:	4603      	mov	r3, r0
 810fe7c:	2b01      	cmp	r3, #1
 810fe7e:	d002      	beq.n	810fe86 <osMutexRelease+0x70>
        stat = osErrorResource;
 810fe80:	f06f 0302 	mvn.w	r3, #2
 810fe84:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 810fe86:	697b      	ldr	r3, [r7, #20]
}
 810fe88:	4618      	mov	r0, r3
 810fe8a:	3718      	adds	r7, #24
 810fe8c:	46bd      	mov	sp, r7
 810fe8e:	bd80      	pop	{r7, pc}

0810fe90 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 810fe90:	b580      	push	{r7, lr}
 810fe92:	b08a      	sub	sp, #40	@ 0x28
 810fe94:	af02      	add	r7, sp, #8
 810fe96:	60f8      	str	r0, [r7, #12]
 810fe98:	60b9      	str	r1, [r7, #8]
 810fe9a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 810fe9c:	2300      	movs	r3, #0
 810fe9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810fea0:	f3ef 8305 	mrs	r3, IPSR
 810fea4:	613b      	str	r3, [r7, #16]
  return(result);
 810fea6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 810fea8:	2b00      	cmp	r3, #0
 810feaa:	d175      	bne.n	810ff98 <osSemaphoreNew+0x108>
 810feac:	68fb      	ldr	r3, [r7, #12]
 810feae:	2b00      	cmp	r3, #0
 810feb0:	d072      	beq.n	810ff98 <osSemaphoreNew+0x108>
 810feb2:	68ba      	ldr	r2, [r7, #8]
 810feb4:	68fb      	ldr	r3, [r7, #12]
 810feb6:	429a      	cmp	r2, r3
 810feb8:	d86e      	bhi.n	810ff98 <osSemaphoreNew+0x108>
    mem = -1;
 810feba:	f04f 33ff 	mov.w	r3, #4294967295
 810febe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 810fec0:	687b      	ldr	r3, [r7, #4]
 810fec2:	2b00      	cmp	r3, #0
 810fec4:	d015      	beq.n	810fef2 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 810fec6:	687b      	ldr	r3, [r7, #4]
 810fec8:	689b      	ldr	r3, [r3, #8]
 810feca:	2b00      	cmp	r3, #0
 810fecc:	d006      	beq.n	810fedc <osSemaphoreNew+0x4c>
 810fece:	687b      	ldr	r3, [r7, #4]
 810fed0:	68db      	ldr	r3, [r3, #12]
 810fed2:	2b4f      	cmp	r3, #79	@ 0x4f
 810fed4:	d902      	bls.n	810fedc <osSemaphoreNew+0x4c>
        mem = 1;
 810fed6:	2301      	movs	r3, #1
 810fed8:	61bb      	str	r3, [r7, #24]
 810feda:	e00c      	b.n	810fef6 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 810fedc:	687b      	ldr	r3, [r7, #4]
 810fede:	689b      	ldr	r3, [r3, #8]
 810fee0:	2b00      	cmp	r3, #0
 810fee2:	d108      	bne.n	810fef6 <osSemaphoreNew+0x66>
 810fee4:	687b      	ldr	r3, [r7, #4]
 810fee6:	68db      	ldr	r3, [r3, #12]
 810fee8:	2b00      	cmp	r3, #0
 810feea:	d104      	bne.n	810fef6 <osSemaphoreNew+0x66>
          mem = 0;
 810feec:	2300      	movs	r3, #0
 810feee:	61bb      	str	r3, [r7, #24]
 810fef0:	e001      	b.n	810fef6 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 810fef2:	2300      	movs	r3, #0
 810fef4:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 810fef6:	69bb      	ldr	r3, [r7, #24]
 810fef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 810fefc:	d04c      	beq.n	810ff98 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 810fefe:	68fb      	ldr	r3, [r7, #12]
 810ff00:	2b01      	cmp	r3, #1
 810ff02:	d128      	bne.n	810ff56 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 810ff04:	69bb      	ldr	r3, [r7, #24]
 810ff06:	2b01      	cmp	r3, #1
 810ff08:	d10a      	bne.n	810ff20 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 810ff0a:	687b      	ldr	r3, [r7, #4]
 810ff0c:	689b      	ldr	r3, [r3, #8]
 810ff0e:	2203      	movs	r2, #3
 810ff10:	9200      	str	r2, [sp, #0]
 810ff12:	2200      	movs	r2, #0
 810ff14:	2100      	movs	r1, #0
 810ff16:	2001      	movs	r0, #1
 810ff18:	f000 ffa2 	bl	8110e60 <xQueueGenericCreateStatic>
 810ff1c:	61f8      	str	r0, [r7, #28]
 810ff1e:	e005      	b.n	810ff2c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 810ff20:	2203      	movs	r2, #3
 810ff22:	2100      	movs	r1, #0
 810ff24:	2001      	movs	r0, #1
 810ff26:	f001 f818 	bl	8110f5a <xQueueGenericCreate>
 810ff2a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 810ff2c:	69fb      	ldr	r3, [r7, #28]
 810ff2e:	2b00      	cmp	r3, #0
 810ff30:	d022      	beq.n	810ff78 <osSemaphoreNew+0xe8>
 810ff32:	68bb      	ldr	r3, [r7, #8]
 810ff34:	2b00      	cmp	r3, #0
 810ff36:	d01f      	beq.n	810ff78 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 810ff38:	2300      	movs	r3, #0
 810ff3a:	2200      	movs	r2, #0
 810ff3c:	2100      	movs	r1, #0
 810ff3e:	69f8      	ldr	r0, [r7, #28]
 810ff40:	f001 f990 	bl	8111264 <xQueueGenericSend>
 810ff44:	4603      	mov	r3, r0
 810ff46:	2b01      	cmp	r3, #1
 810ff48:	d016      	beq.n	810ff78 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 810ff4a:	69f8      	ldr	r0, [r7, #28]
 810ff4c:	f001 fe2e 	bl	8111bac <vQueueDelete>
            hSemaphore = NULL;
 810ff50:	2300      	movs	r3, #0
 810ff52:	61fb      	str	r3, [r7, #28]
 810ff54:	e010      	b.n	810ff78 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 810ff56:	69bb      	ldr	r3, [r7, #24]
 810ff58:	2b01      	cmp	r3, #1
 810ff5a:	d108      	bne.n	810ff6e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 810ff5c:	687b      	ldr	r3, [r7, #4]
 810ff5e:	689b      	ldr	r3, [r3, #8]
 810ff60:	461a      	mov	r2, r3
 810ff62:	68b9      	ldr	r1, [r7, #8]
 810ff64:	68f8      	ldr	r0, [r7, #12]
 810ff66:	f001 f90f 	bl	8111188 <xQueueCreateCountingSemaphoreStatic>
 810ff6a:	61f8      	str	r0, [r7, #28]
 810ff6c:	e004      	b.n	810ff78 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 810ff6e:	68b9      	ldr	r1, [r7, #8]
 810ff70:	68f8      	ldr	r0, [r7, #12]
 810ff72:	f001 f942 	bl	81111fa <xQueueCreateCountingSemaphore>
 810ff76:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 810ff78:	69fb      	ldr	r3, [r7, #28]
 810ff7a:	2b00      	cmp	r3, #0
 810ff7c:	d00c      	beq.n	810ff98 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 810ff7e:	687b      	ldr	r3, [r7, #4]
 810ff80:	2b00      	cmp	r3, #0
 810ff82:	d003      	beq.n	810ff8c <osSemaphoreNew+0xfc>
          name = attr->name;
 810ff84:	687b      	ldr	r3, [r7, #4]
 810ff86:	681b      	ldr	r3, [r3, #0]
 810ff88:	617b      	str	r3, [r7, #20]
 810ff8a:	e001      	b.n	810ff90 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 810ff8c:	2300      	movs	r3, #0
 810ff8e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 810ff90:	6979      	ldr	r1, [r7, #20]
 810ff92:	69f8      	ldr	r0, [r7, #28]
 810ff94:	f001 ff56 	bl	8111e44 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 810ff98:	69fb      	ldr	r3, [r7, #28]
}
 810ff9a:	4618      	mov	r0, r3
 810ff9c:	3720      	adds	r7, #32
 810ff9e:	46bd      	mov	sp, r7
 810ffa0:	bd80      	pop	{r7, pc}
	...

0810ffa4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 810ffa4:	b580      	push	{r7, lr}
 810ffa6:	b086      	sub	sp, #24
 810ffa8:	af00      	add	r7, sp, #0
 810ffaa:	6078      	str	r0, [r7, #4]
 810ffac:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 810ffae:	687b      	ldr	r3, [r7, #4]
 810ffb0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 810ffb2:	2300      	movs	r3, #0
 810ffb4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 810ffb6:	693b      	ldr	r3, [r7, #16]
 810ffb8:	2b00      	cmp	r3, #0
 810ffba:	d103      	bne.n	810ffc4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 810ffbc:	f06f 0303 	mvn.w	r3, #3
 810ffc0:	617b      	str	r3, [r7, #20]
 810ffc2:	e039      	b.n	8110038 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810ffc4:	f3ef 8305 	mrs	r3, IPSR
 810ffc8:	60fb      	str	r3, [r7, #12]
  return(result);
 810ffca:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 810ffcc:	2b00      	cmp	r3, #0
 810ffce:	d022      	beq.n	8110016 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 810ffd0:	683b      	ldr	r3, [r7, #0]
 810ffd2:	2b00      	cmp	r3, #0
 810ffd4:	d003      	beq.n	810ffde <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 810ffd6:	f06f 0303 	mvn.w	r3, #3
 810ffda:	617b      	str	r3, [r7, #20]
 810ffdc:	e02c      	b.n	8110038 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 810ffde:	2300      	movs	r3, #0
 810ffe0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 810ffe2:	f107 0308 	add.w	r3, r7, #8
 810ffe6:	461a      	mov	r2, r3
 810ffe8:	2100      	movs	r1, #0
 810ffea:	6938      	ldr	r0, [r7, #16]
 810ffec:	f001 fd5c 	bl	8111aa8 <xQueueReceiveFromISR>
 810fff0:	4603      	mov	r3, r0
 810fff2:	2b01      	cmp	r3, #1
 810fff4:	d003      	beq.n	810fffe <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 810fff6:	f06f 0302 	mvn.w	r3, #2
 810fffa:	617b      	str	r3, [r7, #20]
 810fffc:	e01c      	b.n	8110038 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 810fffe:	68bb      	ldr	r3, [r7, #8]
 8110000:	2b00      	cmp	r3, #0
 8110002:	d019      	beq.n	8110038 <osSemaphoreAcquire+0x94>
 8110004:	4b0f      	ldr	r3, [pc, #60]	@ (8110044 <osSemaphoreAcquire+0xa0>)
 8110006:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 811000a:	601a      	str	r2, [r3, #0]
 811000c:	f3bf 8f4f 	dsb	sy
 8110010:	f3bf 8f6f 	isb	sy
 8110014:	e010      	b.n	8110038 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8110016:	6839      	ldr	r1, [r7, #0]
 8110018:	6938      	ldr	r0, [r7, #16]
 811001a:	f001 fc35 	bl	8111888 <xQueueSemaphoreTake>
 811001e:	4603      	mov	r3, r0
 8110020:	2b01      	cmp	r3, #1
 8110022:	d009      	beq.n	8110038 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8110024:	683b      	ldr	r3, [r7, #0]
 8110026:	2b00      	cmp	r3, #0
 8110028:	d003      	beq.n	8110032 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 811002a:	f06f 0301 	mvn.w	r3, #1
 811002e:	617b      	str	r3, [r7, #20]
 8110030:	e002      	b.n	8110038 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8110032:	f06f 0302 	mvn.w	r3, #2
 8110036:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8110038:	697b      	ldr	r3, [r7, #20]
}
 811003a:	4618      	mov	r0, r3
 811003c:	3718      	adds	r7, #24
 811003e:	46bd      	mov	sp, r7
 8110040:	bd80      	pop	{r7, pc}
 8110042:	bf00      	nop
 8110044:	e000ed04 	.word	0xe000ed04

08110048 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8110048:	b580      	push	{r7, lr}
 811004a:	b086      	sub	sp, #24
 811004c:	af00      	add	r7, sp, #0
 811004e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8110050:	687b      	ldr	r3, [r7, #4]
 8110052:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8110054:	2300      	movs	r3, #0
 8110056:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8110058:	693b      	ldr	r3, [r7, #16]
 811005a:	2b00      	cmp	r3, #0
 811005c:	d103      	bne.n	8110066 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 811005e:	f06f 0303 	mvn.w	r3, #3
 8110062:	617b      	str	r3, [r7, #20]
 8110064:	e02c      	b.n	81100c0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8110066:	f3ef 8305 	mrs	r3, IPSR
 811006a:	60fb      	str	r3, [r7, #12]
  return(result);
 811006c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 811006e:	2b00      	cmp	r3, #0
 8110070:	d01a      	beq.n	81100a8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8110072:	2300      	movs	r3, #0
 8110074:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8110076:	f107 0308 	add.w	r3, r7, #8
 811007a:	4619      	mov	r1, r3
 811007c:	6938      	ldr	r0, [r7, #16]
 811007e:	f001 fa91 	bl	81115a4 <xQueueGiveFromISR>
 8110082:	4603      	mov	r3, r0
 8110084:	2b01      	cmp	r3, #1
 8110086:	d003      	beq.n	8110090 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8110088:	f06f 0302 	mvn.w	r3, #2
 811008c:	617b      	str	r3, [r7, #20]
 811008e:	e017      	b.n	81100c0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8110090:	68bb      	ldr	r3, [r7, #8]
 8110092:	2b00      	cmp	r3, #0
 8110094:	d014      	beq.n	81100c0 <osSemaphoreRelease+0x78>
 8110096:	4b0d      	ldr	r3, [pc, #52]	@ (81100cc <osSemaphoreRelease+0x84>)
 8110098:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 811009c:	601a      	str	r2, [r3, #0]
 811009e:	f3bf 8f4f 	dsb	sy
 81100a2:	f3bf 8f6f 	isb	sy
 81100a6:	e00b      	b.n	81100c0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 81100a8:	2300      	movs	r3, #0
 81100aa:	2200      	movs	r2, #0
 81100ac:	2100      	movs	r1, #0
 81100ae:	6938      	ldr	r0, [r7, #16]
 81100b0:	f001 f8d8 	bl	8111264 <xQueueGenericSend>
 81100b4:	4603      	mov	r3, r0
 81100b6:	2b01      	cmp	r3, #1
 81100b8:	d002      	beq.n	81100c0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 81100ba:	f06f 0302 	mvn.w	r3, #2
 81100be:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 81100c0:	697b      	ldr	r3, [r7, #20]
}
 81100c2:	4618      	mov	r0, r3
 81100c4:	3718      	adds	r7, #24
 81100c6:	46bd      	mov	sp, r7
 81100c8:	bd80      	pop	{r7, pc}
 81100ca:	bf00      	nop
 81100cc:	e000ed04 	.word	0xe000ed04

081100d0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 81100d0:	b580      	push	{r7, lr}
 81100d2:	b08a      	sub	sp, #40	@ 0x28
 81100d4:	af02      	add	r7, sp, #8
 81100d6:	60f8      	str	r0, [r7, #12]
 81100d8:	60b9      	str	r1, [r7, #8]
 81100da:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 81100dc:	2300      	movs	r3, #0
 81100de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81100e0:	f3ef 8305 	mrs	r3, IPSR
 81100e4:	613b      	str	r3, [r7, #16]
  return(result);
 81100e6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 81100e8:	2b00      	cmp	r3, #0
 81100ea:	d15f      	bne.n	81101ac <osMessageQueueNew+0xdc>
 81100ec:	68fb      	ldr	r3, [r7, #12]
 81100ee:	2b00      	cmp	r3, #0
 81100f0:	d05c      	beq.n	81101ac <osMessageQueueNew+0xdc>
 81100f2:	68bb      	ldr	r3, [r7, #8]
 81100f4:	2b00      	cmp	r3, #0
 81100f6:	d059      	beq.n	81101ac <osMessageQueueNew+0xdc>
    mem = -1;
 81100f8:	f04f 33ff 	mov.w	r3, #4294967295
 81100fc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 81100fe:	687b      	ldr	r3, [r7, #4]
 8110100:	2b00      	cmp	r3, #0
 8110102:	d029      	beq.n	8110158 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8110104:	687b      	ldr	r3, [r7, #4]
 8110106:	689b      	ldr	r3, [r3, #8]
 8110108:	2b00      	cmp	r3, #0
 811010a:	d012      	beq.n	8110132 <osMessageQueueNew+0x62>
 811010c:	687b      	ldr	r3, [r7, #4]
 811010e:	68db      	ldr	r3, [r3, #12]
 8110110:	2b4f      	cmp	r3, #79	@ 0x4f
 8110112:	d90e      	bls.n	8110132 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8110114:	687b      	ldr	r3, [r7, #4]
 8110116:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8110118:	2b00      	cmp	r3, #0
 811011a:	d00a      	beq.n	8110132 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 811011c:	687b      	ldr	r3, [r7, #4]
 811011e:	695a      	ldr	r2, [r3, #20]
 8110120:	68fb      	ldr	r3, [r7, #12]
 8110122:	68b9      	ldr	r1, [r7, #8]
 8110124:	fb01 f303 	mul.w	r3, r1, r3
 8110128:	429a      	cmp	r2, r3
 811012a:	d302      	bcc.n	8110132 <osMessageQueueNew+0x62>
        mem = 1;
 811012c:	2301      	movs	r3, #1
 811012e:	61bb      	str	r3, [r7, #24]
 8110130:	e014      	b.n	811015c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8110132:	687b      	ldr	r3, [r7, #4]
 8110134:	689b      	ldr	r3, [r3, #8]
 8110136:	2b00      	cmp	r3, #0
 8110138:	d110      	bne.n	811015c <osMessageQueueNew+0x8c>
 811013a:	687b      	ldr	r3, [r7, #4]
 811013c:	68db      	ldr	r3, [r3, #12]
 811013e:	2b00      	cmp	r3, #0
 8110140:	d10c      	bne.n	811015c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8110142:	687b      	ldr	r3, [r7, #4]
 8110144:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8110146:	2b00      	cmp	r3, #0
 8110148:	d108      	bne.n	811015c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 811014a:	687b      	ldr	r3, [r7, #4]
 811014c:	695b      	ldr	r3, [r3, #20]
 811014e:	2b00      	cmp	r3, #0
 8110150:	d104      	bne.n	811015c <osMessageQueueNew+0x8c>
          mem = 0;
 8110152:	2300      	movs	r3, #0
 8110154:	61bb      	str	r3, [r7, #24]
 8110156:	e001      	b.n	811015c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8110158:	2300      	movs	r3, #0
 811015a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 811015c:	69bb      	ldr	r3, [r7, #24]
 811015e:	2b01      	cmp	r3, #1
 8110160:	d10b      	bne.n	811017a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8110162:	687b      	ldr	r3, [r7, #4]
 8110164:	691a      	ldr	r2, [r3, #16]
 8110166:	687b      	ldr	r3, [r7, #4]
 8110168:	689b      	ldr	r3, [r3, #8]
 811016a:	2100      	movs	r1, #0
 811016c:	9100      	str	r1, [sp, #0]
 811016e:	68b9      	ldr	r1, [r7, #8]
 8110170:	68f8      	ldr	r0, [r7, #12]
 8110172:	f000 fe75 	bl	8110e60 <xQueueGenericCreateStatic>
 8110176:	61f8      	str	r0, [r7, #28]
 8110178:	e008      	b.n	811018c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 811017a:	69bb      	ldr	r3, [r7, #24]
 811017c:	2b00      	cmp	r3, #0
 811017e:	d105      	bne.n	811018c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8110180:	2200      	movs	r2, #0
 8110182:	68b9      	ldr	r1, [r7, #8]
 8110184:	68f8      	ldr	r0, [r7, #12]
 8110186:	f000 fee8 	bl	8110f5a <xQueueGenericCreate>
 811018a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 811018c:	69fb      	ldr	r3, [r7, #28]
 811018e:	2b00      	cmp	r3, #0
 8110190:	d00c      	beq.n	81101ac <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8110192:	687b      	ldr	r3, [r7, #4]
 8110194:	2b00      	cmp	r3, #0
 8110196:	d003      	beq.n	81101a0 <osMessageQueueNew+0xd0>
        name = attr->name;
 8110198:	687b      	ldr	r3, [r7, #4]
 811019a:	681b      	ldr	r3, [r3, #0]
 811019c:	617b      	str	r3, [r7, #20]
 811019e:	e001      	b.n	81101a4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 81101a0:	2300      	movs	r3, #0
 81101a2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 81101a4:	6979      	ldr	r1, [r7, #20]
 81101a6:	69f8      	ldr	r0, [r7, #28]
 81101a8:	f001 fe4c 	bl	8111e44 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 81101ac:	69fb      	ldr	r3, [r7, #28]
}
 81101ae:	4618      	mov	r0, r3
 81101b0:	3720      	adds	r7, #32
 81101b2:	46bd      	mov	sp, r7
 81101b4:	bd80      	pop	{r7, pc}
	...

081101b8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 81101b8:	b580      	push	{r7, lr}
 81101ba:	b088      	sub	sp, #32
 81101bc:	af00      	add	r7, sp, #0
 81101be:	60f8      	str	r0, [r7, #12]
 81101c0:	60b9      	str	r1, [r7, #8]
 81101c2:	603b      	str	r3, [r7, #0]
 81101c4:	4613      	mov	r3, r2
 81101c6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 81101c8:	68fb      	ldr	r3, [r7, #12]
 81101ca:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 81101cc:	2300      	movs	r3, #0
 81101ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81101d0:	f3ef 8305 	mrs	r3, IPSR
 81101d4:	617b      	str	r3, [r7, #20]
  return(result);
 81101d6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 81101d8:	2b00      	cmp	r3, #0
 81101da:	d028      	beq.n	811022e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 81101dc:	69bb      	ldr	r3, [r7, #24]
 81101de:	2b00      	cmp	r3, #0
 81101e0:	d005      	beq.n	81101ee <osMessageQueuePut+0x36>
 81101e2:	68bb      	ldr	r3, [r7, #8]
 81101e4:	2b00      	cmp	r3, #0
 81101e6:	d002      	beq.n	81101ee <osMessageQueuePut+0x36>
 81101e8:	683b      	ldr	r3, [r7, #0]
 81101ea:	2b00      	cmp	r3, #0
 81101ec:	d003      	beq.n	81101f6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 81101ee:	f06f 0303 	mvn.w	r3, #3
 81101f2:	61fb      	str	r3, [r7, #28]
 81101f4:	e038      	b.n	8110268 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 81101f6:	2300      	movs	r3, #0
 81101f8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 81101fa:	f107 0210 	add.w	r2, r7, #16
 81101fe:	2300      	movs	r3, #0
 8110200:	68b9      	ldr	r1, [r7, #8]
 8110202:	69b8      	ldr	r0, [r7, #24]
 8110204:	f001 f930 	bl	8111468 <xQueueGenericSendFromISR>
 8110208:	4603      	mov	r3, r0
 811020a:	2b01      	cmp	r3, #1
 811020c:	d003      	beq.n	8110216 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 811020e:	f06f 0302 	mvn.w	r3, #2
 8110212:	61fb      	str	r3, [r7, #28]
 8110214:	e028      	b.n	8110268 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8110216:	693b      	ldr	r3, [r7, #16]
 8110218:	2b00      	cmp	r3, #0
 811021a:	d025      	beq.n	8110268 <osMessageQueuePut+0xb0>
 811021c:	4b15      	ldr	r3, [pc, #84]	@ (8110274 <osMessageQueuePut+0xbc>)
 811021e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8110222:	601a      	str	r2, [r3, #0]
 8110224:	f3bf 8f4f 	dsb	sy
 8110228:	f3bf 8f6f 	isb	sy
 811022c:	e01c      	b.n	8110268 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 811022e:	69bb      	ldr	r3, [r7, #24]
 8110230:	2b00      	cmp	r3, #0
 8110232:	d002      	beq.n	811023a <osMessageQueuePut+0x82>
 8110234:	68bb      	ldr	r3, [r7, #8]
 8110236:	2b00      	cmp	r3, #0
 8110238:	d103      	bne.n	8110242 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 811023a:	f06f 0303 	mvn.w	r3, #3
 811023e:	61fb      	str	r3, [r7, #28]
 8110240:	e012      	b.n	8110268 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8110242:	2300      	movs	r3, #0
 8110244:	683a      	ldr	r2, [r7, #0]
 8110246:	68b9      	ldr	r1, [r7, #8]
 8110248:	69b8      	ldr	r0, [r7, #24]
 811024a:	f001 f80b 	bl	8111264 <xQueueGenericSend>
 811024e:	4603      	mov	r3, r0
 8110250:	2b01      	cmp	r3, #1
 8110252:	d009      	beq.n	8110268 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8110254:	683b      	ldr	r3, [r7, #0]
 8110256:	2b00      	cmp	r3, #0
 8110258:	d003      	beq.n	8110262 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 811025a:	f06f 0301 	mvn.w	r3, #1
 811025e:	61fb      	str	r3, [r7, #28]
 8110260:	e002      	b.n	8110268 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8110262:	f06f 0302 	mvn.w	r3, #2
 8110266:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8110268:	69fb      	ldr	r3, [r7, #28]
}
 811026a:	4618      	mov	r0, r3
 811026c:	3720      	adds	r7, #32
 811026e:	46bd      	mov	sp, r7
 8110270:	bd80      	pop	{r7, pc}
 8110272:	bf00      	nop
 8110274:	e000ed04 	.word	0xe000ed04

08110278 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8110278:	b580      	push	{r7, lr}
 811027a:	b088      	sub	sp, #32
 811027c:	af00      	add	r7, sp, #0
 811027e:	60f8      	str	r0, [r7, #12]
 8110280:	60b9      	str	r1, [r7, #8]
 8110282:	607a      	str	r2, [r7, #4]
 8110284:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8110286:	68fb      	ldr	r3, [r7, #12]
 8110288:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 811028a:	2300      	movs	r3, #0
 811028c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 811028e:	f3ef 8305 	mrs	r3, IPSR
 8110292:	617b      	str	r3, [r7, #20]
  return(result);
 8110294:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8110296:	2b00      	cmp	r3, #0
 8110298:	d028      	beq.n	81102ec <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 811029a:	69bb      	ldr	r3, [r7, #24]
 811029c:	2b00      	cmp	r3, #0
 811029e:	d005      	beq.n	81102ac <osMessageQueueGet+0x34>
 81102a0:	68bb      	ldr	r3, [r7, #8]
 81102a2:	2b00      	cmp	r3, #0
 81102a4:	d002      	beq.n	81102ac <osMessageQueueGet+0x34>
 81102a6:	683b      	ldr	r3, [r7, #0]
 81102a8:	2b00      	cmp	r3, #0
 81102aa:	d003      	beq.n	81102b4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 81102ac:	f06f 0303 	mvn.w	r3, #3
 81102b0:	61fb      	str	r3, [r7, #28]
 81102b2:	e037      	b.n	8110324 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 81102b4:	2300      	movs	r3, #0
 81102b6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 81102b8:	f107 0310 	add.w	r3, r7, #16
 81102bc:	461a      	mov	r2, r3
 81102be:	68b9      	ldr	r1, [r7, #8]
 81102c0:	69b8      	ldr	r0, [r7, #24]
 81102c2:	f001 fbf1 	bl	8111aa8 <xQueueReceiveFromISR>
 81102c6:	4603      	mov	r3, r0
 81102c8:	2b01      	cmp	r3, #1
 81102ca:	d003      	beq.n	81102d4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 81102cc:	f06f 0302 	mvn.w	r3, #2
 81102d0:	61fb      	str	r3, [r7, #28]
 81102d2:	e027      	b.n	8110324 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 81102d4:	693b      	ldr	r3, [r7, #16]
 81102d6:	2b00      	cmp	r3, #0
 81102d8:	d024      	beq.n	8110324 <osMessageQueueGet+0xac>
 81102da:	4b15      	ldr	r3, [pc, #84]	@ (8110330 <osMessageQueueGet+0xb8>)
 81102dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81102e0:	601a      	str	r2, [r3, #0]
 81102e2:	f3bf 8f4f 	dsb	sy
 81102e6:	f3bf 8f6f 	isb	sy
 81102ea:	e01b      	b.n	8110324 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 81102ec:	69bb      	ldr	r3, [r7, #24]
 81102ee:	2b00      	cmp	r3, #0
 81102f0:	d002      	beq.n	81102f8 <osMessageQueueGet+0x80>
 81102f2:	68bb      	ldr	r3, [r7, #8]
 81102f4:	2b00      	cmp	r3, #0
 81102f6:	d103      	bne.n	8110300 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 81102f8:	f06f 0303 	mvn.w	r3, #3
 81102fc:	61fb      	str	r3, [r7, #28]
 81102fe:	e011      	b.n	8110324 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8110300:	683a      	ldr	r2, [r7, #0]
 8110302:	68b9      	ldr	r1, [r7, #8]
 8110304:	69b8      	ldr	r0, [r7, #24]
 8110306:	f001 f9dd 	bl	81116c4 <xQueueReceive>
 811030a:	4603      	mov	r3, r0
 811030c:	2b01      	cmp	r3, #1
 811030e:	d009      	beq.n	8110324 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8110310:	683b      	ldr	r3, [r7, #0]
 8110312:	2b00      	cmp	r3, #0
 8110314:	d003      	beq.n	811031e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8110316:	f06f 0301 	mvn.w	r3, #1
 811031a:	61fb      	str	r3, [r7, #28]
 811031c:	e002      	b.n	8110324 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 811031e:	f06f 0302 	mvn.w	r3, #2
 8110322:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8110324:	69fb      	ldr	r3, [r7, #28]
}
 8110326:	4618      	mov	r0, r3
 8110328:	3720      	adds	r7, #32
 811032a:	46bd      	mov	sp, r7
 811032c:	bd80      	pop	{r7, pc}
 811032e:	bf00      	nop
 8110330:	e000ed04 	.word	0xe000ed04

08110334 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8110334:	b480      	push	{r7}
 8110336:	b085      	sub	sp, #20
 8110338:	af00      	add	r7, sp, #0
 811033a:	60f8      	str	r0, [r7, #12]
 811033c:	60b9      	str	r1, [r7, #8]
 811033e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8110340:	68fb      	ldr	r3, [r7, #12]
 8110342:	4a07      	ldr	r2, [pc, #28]	@ (8110360 <vApplicationGetIdleTaskMemory+0x2c>)
 8110344:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8110346:	68bb      	ldr	r3, [r7, #8]
 8110348:	4a06      	ldr	r2, [pc, #24]	@ (8110364 <vApplicationGetIdleTaskMemory+0x30>)
 811034a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 811034c:	687b      	ldr	r3, [r7, #4]
 811034e:	2280      	movs	r2, #128	@ 0x80
 8110350:	601a      	str	r2, [r3, #0]
}
 8110352:	bf00      	nop
 8110354:	3714      	adds	r7, #20
 8110356:	46bd      	mov	sp, r7
 8110358:	f85d 7b04 	ldr.w	r7, [sp], #4
 811035c:	4770      	bx	lr
 811035e:	bf00      	nop
 8110360:	100003dc 	.word	0x100003dc
 8110364:	10000484 	.word	0x10000484

08110368 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8110368:	b480      	push	{r7}
 811036a:	b085      	sub	sp, #20
 811036c:	af00      	add	r7, sp, #0
 811036e:	60f8      	str	r0, [r7, #12]
 8110370:	60b9      	str	r1, [r7, #8]
 8110372:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8110374:	68fb      	ldr	r3, [r7, #12]
 8110376:	4a07      	ldr	r2, [pc, #28]	@ (8110394 <vApplicationGetTimerTaskMemory+0x2c>)
 8110378:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 811037a:	68bb      	ldr	r3, [r7, #8]
 811037c:	4a06      	ldr	r2, [pc, #24]	@ (8110398 <vApplicationGetTimerTaskMemory+0x30>)
 811037e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8110380:	687b      	ldr	r3, [r7, #4]
 8110382:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8110386:	601a      	str	r2, [r3, #0]
}
 8110388:	bf00      	nop
 811038a:	3714      	adds	r7, #20
 811038c:	46bd      	mov	sp, r7
 811038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110392:	4770      	bx	lr
 8110394:	10000684 	.word	0x10000684
 8110398:	1000072c 	.word	0x1000072c

0811039c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 811039c:	b580      	push	{r7, lr}
 811039e:	b08a      	sub	sp, #40	@ 0x28
 81103a0:	af00      	add	r7, sp, #0
 81103a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 81103a4:	2300      	movs	r3, #0
 81103a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 81103a8:	f002 fc62 	bl	8112c70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 81103ac:	4b5c      	ldr	r3, [pc, #368]	@ (8110520 <pvPortMalloc+0x184>)
 81103ae:	681b      	ldr	r3, [r3, #0]
 81103b0:	2b00      	cmp	r3, #0
 81103b2:	d101      	bne.n	81103b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 81103b4:	f000 f924 	bl	8110600 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 81103b8:	4b5a      	ldr	r3, [pc, #360]	@ (8110524 <pvPortMalloc+0x188>)
 81103ba:	681a      	ldr	r2, [r3, #0]
 81103bc:	687b      	ldr	r3, [r7, #4]
 81103be:	4013      	ands	r3, r2
 81103c0:	2b00      	cmp	r3, #0
 81103c2:	f040 8095 	bne.w	81104f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 81103c6:	687b      	ldr	r3, [r7, #4]
 81103c8:	2b00      	cmp	r3, #0
 81103ca:	d01e      	beq.n	811040a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 81103cc:	2208      	movs	r2, #8
 81103ce:	687b      	ldr	r3, [r7, #4]
 81103d0:	4413      	add	r3, r2
 81103d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 81103d4:	687b      	ldr	r3, [r7, #4]
 81103d6:	f003 0307 	and.w	r3, r3, #7
 81103da:	2b00      	cmp	r3, #0
 81103dc:	d015      	beq.n	811040a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 81103de:	687b      	ldr	r3, [r7, #4]
 81103e0:	f023 0307 	bic.w	r3, r3, #7
 81103e4:	3308      	adds	r3, #8
 81103e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 81103e8:	687b      	ldr	r3, [r7, #4]
 81103ea:	f003 0307 	and.w	r3, r3, #7
 81103ee:	2b00      	cmp	r3, #0
 81103f0:	d00b      	beq.n	811040a <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 81103f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81103f6:	f383 8811 	msr	BASEPRI, r3
 81103fa:	f3bf 8f6f 	isb	sy
 81103fe:	f3bf 8f4f 	dsb	sy
 8110402:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8110404:	bf00      	nop
 8110406:	bf00      	nop
 8110408:	e7fd      	b.n	8110406 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 811040a:	687b      	ldr	r3, [r7, #4]
 811040c:	2b00      	cmp	r3, #0
 811040e:	d06f      	beq.n	81104f0 <pvPortMalloc+0x154>
 8110410:	4b45      	ldr	r3, [pc, #276]	@ (8110528 <pvPortMalloc+0x18c>)
 8110412:	681b      	ldr	r3, [r3, #0]
 8110414:	687a      	ldr	r2, [r7, #4]
 8110416:	429a      	cmp	r2, r3
 8110418:	d86a      	bhi.n	81104f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 811041a:	4b44      	ldr	r3, [pc, #272]	@ (811052c <pvPortMalloc+0x190>)
 811041c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 811041e:	4b43      	ldr	r3, [pc, #268]	@ (811052c <pvPortMalloc+0x190>)
 8110420:	681b      	ldr	r3, [r3, #0]
 8110422:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8110424:	e004      	b.n	8110430 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8110426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8110428:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 811042a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811042c:	681b      	ldr	r3, [r3, #0]
 811042e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8110430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8110432:	685b      	ldr	r3, [r3, #4]
 8110434:	687a      	ldr	r2, [r7, #4]
 8110436:	429a      	cmp	r2, r3
 8110438:	d903      	bls.n	8110442 <pvPortMalloc+0xa6>
 811043a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811043c:	681b      	ldr	r3, [r3, #0]
 811043e:	2b00      	cmp	r3, #0
 8110440:	d1f1      	bne.n	8110426 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8110442:	4b37      	ldr	r3, [pc, #220]	@ (8110520 <pvPortMalloc+0x184>)
 8110444:	681b      	ldr	r3, [r3, #0]
 8110446:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8110448:	429a      	cmp	r2, r3
 811044a:	d051      	beq.n	81104f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 811044c:	6a3b      	ldr	r3, [r7, #32]
 811044e:	681b      	ldr	r3, [r3, #0]
 8110450:	2208      	movs	r2, #8
 8110452:	4413      	add	r3, r2
 8110454:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8110456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8110458:	681a      	ldr	r2, [r3, #0]
 811045a:	6a3b      	ldr	r3, [r7, #32]
 811045c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 811045e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8110460:	685a      	ldr	r2, [r3, #4]
 8110462:	687b      	ldr	r3, [r7, #4]
 8110464:	1ad2      	subs	r2, r2, r3
 8110466:	2308      	movs	r3, #8
 8110468:	005b      	lsls	r3, r3, #1
 811046a:	429a      	cmp	r2, r3
 811046c:	d920      	bls.n	81104b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 811046e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8110470:	687b      	ldr	r3, [r7, #4]
 8110472:	4413      	add	r3, r2
 8110474:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8110476:	69bb      	ldr	r3, [r7, #24]
 8110478:	f003 0307 	and.w	r3, r3, #7
 811047c:	2b00      	cmp	r3, #0
 811047e:	d00b      	beq.n	8110498 <pvPortMalloc+0xfc>
	__asm volatile
 8110480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110484:	f383 8811 	msr	BASEPRI, r3
 8110488:	f3bf 8f6f 	isb	sy
 811048c:	f3bf 8f4f 	dsb	sy
 8110490:	613b      	str	r3, [r7, #16]
}
 8110492:	bf00      	nop
 8110494:	bf00      	nop
 8110496:	e7fd      	b.n	8110494 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8110498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811049a:	685a      	ldr	r2, [r3, #4]
 811049c:	687b      	ldr	r3, [r7, #4]
 811049e:	1ad2      	subs	r2, r2, r3
 81104a0:	69bb      	ldr	r3, [r7, #24]
 81104a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 81104a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81104a6:	687a      	ldr	r2, [r7, #4]
 81104a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 81104aa:	69b8      	ldr	r0, [r7, #24]
 81104ac:	f000 f90a 	bl	81106c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 81104b0:	4b1d      	ldr	r3, [pc, #116]	@ (8110528 <pvPortMalloc+0x18c>)
 81104b2:	681a      	ldr	r2, [r3, #0]
 81104b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81104b6:	685b      	ldr	r3, [r3, #4]
 81104b8:	1ad3      	subs	r3, r2, r3
 81104ba:	4a1b      	ldr	r2, [pc, #108]	@ (8110528 <pvPortMalloc+0x18c>)
 81104bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 81104be:	4b1a      	ldr	r3, [pc, #104]	@ (8110528 <pvPortMalloc+0x18c>)
 81104c0:	681a      	ldr	r2, [r3, #0]
 81104c2:	4b1b      	ldr	r3, [pc, #108]	@ (8110530 <pvPortMalloc+0x194>)
 81104c4:	681b      	ldr	r3, [r3, #0]
 81104c6:	429a      	cmp	r2, r3
 81104c8:	d203      	bcs.n	81104d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 81104ca:	4b17      	ldr	r3, [pc, #92]	@ (8110528 <pvPortMalloc+0x18c>)
 81104cc:	681b      	ldr	r3, [r3, #0]
 81104ce:	4a18      	ldr	r2, [pc, #96]	@ (8110530 <pvPortMalloc+0x194>)
 81104d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 81104d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81104d4:	685a      	ldr	r2, [r3, #4]
 81104d6:	4b13      	ldr	r3, [pc, #76]	@ (8110524 <pvPortMalloc+0x188>)
 81104d8:	681b      	ldr	r3, [r3, #0]
 81104da:	431a      	orrs	r2, r3
 81104dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81104de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 81104e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81104e2:	2200      	movs	r2, #0
 81104e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 81104e6:	4b13      	ldr	r3, [pc, #76]	@ (8110534 <pvPortMalloc+0x198>)
 81104e8:	681b      	ldr	r3, [r3, #0]
 81104ea:	3301      	adds	r3, #1
 81104ec:	4a11      	ldr	r2, [pc, #68]	@ (8110534 <pvPortMalloc+0x198>)
 81104ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 81104f0:	f002 fbcc 	bl	8112c8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 81104f4:	69fb      	ldr	r3, [r7, #28]
 81104f6:	f003 0307 	and.w	r3, r3, #7
 81104fa:	2b00      	cmp	r3, #0
 81104fc:	d00b      	beq.n	8110516 <pvPortMalloc+0x17a>
	__asm volatile
 81104fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110502:	f383 8811 	msr	BASEPRI, r3
 8110506:	f3bf 8f6f 	isb	sy
 811050a:	f3bf 8f4f 	dsb	sy
 811050e:	60fb      	str	r3, [r7, #12]
}
 8110510:	bf00      	nop
 8110512:	bf00      	nop
 8110514:	e7fd      	b.n	8110512 <pvPortMalloc+0x176>
	return pvReturn;
 8110516:	69fb      	ldr	r3, [r7, #28]
}
 8110518:	4618      	mov	r0, r3
 811051a:	3728      	adds	r7, #40	@ 0x28
 811051c:	46bd      	mov	sp, r7
 811051e:	bd80      	pop	{r7, pc}
 8110520:	1000ab34 	.word	0x1000ab34
 8110524:	1000ab48 	.word	0x1000ab48
 8110528:	1000ab38 	.word	0x1000ab38
 811052c:	1000ab2c 	.word	0x1000ab2c
 8110530:	1000ab3c 	.word	0x1000ab3c
 8110534:	1000ab40 	.word	0x1000ab40

08110538 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8110538:	b580      	push	{r7, lr}
 811053a:	b086      	sub	sp, #24
 811053c:	af00      	add	r7, sp, #0
 811053e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8110540:	687b      	ldr	r3, [r7, #4]
 8110542:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8110544:	687b      	ldr	r3, [r7, #4]
 8110546:	2b00      	cmp	r3, #0
 8110548:	d04f      	beq.n	81105ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 811054a:	2308      	movs	r3, #8
 811054c:	425b      	negs	r3, r3
 811054e:	697a      	ldr	r2, [r7, #20]
 8110550:	4413      	add	r3, r2
 8110552:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8110554:	697b      	ldr	r3, [r7, #20]
 8110556:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8110558:	693b      	ldr	r3, [r7, #16]
 811055a:	685a      	ldr	r2, [r3, #4]
 811055c:	4b25      	ldr	r3, [pc, #148]	@ (81105f4 <vPortFree+0xbc>)
 811055e:	681b      	ldr	r3, [r3, #0]
 8110560:	4013      	ands	r3, r2
 8110562:	2b00      	cmp	r3, #0
 8110564:	d10b      	bne.n	811057e <vPortFree+0x46>
	__asm volatile
 8110566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811056a:	f383 8811 	msr	BASEPRI, r3
 811056e:	f3bf 8f6f 	isb	sy
 8110572:	f3bf 8f4f 	dsb	sy
 8110576:	60fb      	str	r3, [r7, #12]
}
 8110578:	bf00      	nop
 811057a:	bf00      	nop
 811057c:	e7fd      	b.n	811057a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 811057e:	693b      	ldr	r3, [r7, #16]
 8110580:	681b      	ldr	r3, [r3, #0]
 8110582:	2b00      	cmp	r3, #0
 8110584:	d00b      	beq.n	811059e <vPortFree+0x66>
	__asm volatile
 8110586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811058a:	f383 8811 	msr	BASEPRI, r3
 811058e:	f3bf 8f6f 	isb	sy
 8110592:	f3bf 8f4f 	dsb	sy
 8110596:	60bb      	str	r3, [r7, #8]
}
 8110598:	bf00      	nop
 811059a:	bf00      	nop
 811059c:	e7fd      	b.n	811059a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 811059e:	693b      	ldr	r3, [r7, #16]
 81105a0:	685a      	ldr	r2, [r3, #4]
 81105a2:	4b14      	ldr	r3, [pc, #80]	@ (81105f4 <vPortFree+0xbc>)
 81105a4:	681b      	ldr	r3, [r3, #0]
 81105a6:	4013      	ands	r3, r2
 81105a8:	2b00      	cmp	r3, #0
 81105aa:	d01e      	beq.n	81105ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 81105ac:	693b      	ldr	r3, [r7, #16]
 81105ae:	681b      	ldr	r3, [r3, #0]
 81105b0:	2b00      	cmp	r3, #0
 81105b2:	d11a      	bne.n	81105ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 81105b4:	693b      	ldr	r3, [r7, #16]
 81105b6:	685a      	ldr	r2, [r3, #4]
 81105b8:	4b0e      	ldr	r3, [pc, #56]	@ (81105f4 <vPortFree+0xbc>)
 81105ba:	681b      	ldr	r3, [r3, #0]
 81105bc:	43db      	mvns	r3, r3
 81105be:	401a      	ands	r2, r3
 81105c0:	693b      	ldr	r3, [r7, #16]
 81105c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 81105c4:	f002 fb54 	bl	8112c70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 81105c8:	693b      	ldr	r3, [r7, #16]
 81105ca:	685a      	ldr	r2, [r3, #4]
 81105cc:	4b0a      	ldr	r3, [pc, #40]	@ (81105f8 <vPortFree+0xc0>)
 81105ce:	681b      	ldr	r3, [r3, #0]
 81105d0:	4413      	add	r3, r2
 81105d2:	4a09      	ldr	r2, [pc, #36]	@ (81105f8 <vPortFree+0xc0>)
 81105d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 81105d6:	6938      	ldr	r0, [r7, #16]
 81105d8:	f000 f874 	bl	81106c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 81105dc:	4b07      	ldr	r3, [pc, #28]	@ (81105fc <vPortFree+0xc4>)
 81105de:	681b      	ldr	r3, [r3, #0]
 81105e0:	3301      	adds	r3, #1
 81105e2:	4a06      	ldr	r2, [pc, #24]	@ (81105fc <vPortFree+0xc4>)
 81105e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 81105e6:	f002 fb51 	bl	8112c8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 81105ea:	bf00      	nop
 81105ec:	3718      	adds	r7, #24
 81105ee:	46bd      	mov	sp, r7
 81105f0:	bd80      	pop	{r7, pc}
 81105f2:	bf00      	nop
 81105f4:	1000ab48 	.word	0x1000ab48
 81105f8:	1000ab38 	.word	0x1000ab38
 81105fc:	1000ab44 	.word	0x1000ab44

08110600 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8110600:	b480      	push	{r7}
 8110602:	b085      	sub	sp, #20
 8110604:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8110606:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 811060a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 811060c:	4b27      	ldr	r3, [pc, #156]	@ (81106ac <prvHeapInit+0xac>)
 811060e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8110610:	68fb      	ldr	r3, [r7, #12]
 8110612:	f003 0307 	and.w	r3, r3, #7
 8110616:	2b00      	cmp	r3, #0
 8110618:	d00c      	beq.n	8110634 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 811061a:	68fb      	ldr	r3, [r7, #12]
 811061c:	3307      	adds	r3, #7
 811061e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8110620:	68fb      	ldr	r3, [r7, #12]
 8110622:	f023 0307 	bic.w	r3, r3, #7
 8110626:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8110628:	68ba      	ldr	r2, [r7, #8]
 811062a:	68fb      	ldr	r3, [r7, #12]
 811062c:	1ad3      	subs	r3, r2, r3
 811062e:	4a1f      	ldr	r2, [pc, #124]	@ (81106ac <prvHeapInit+0xac>)
 8110630:	4413      	add	r3, r2
 8110632:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8110634:	68fb      	ldr	r3, [r7, #12]
 8110636:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8110638:	4a1d      	ldr	r2, [pc, #116]	@ (81106b0 <prvHeapInit+0xb0>)
 811063a:	687b      	ldr	r3, [r7, #4]
 811063c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 811063e:	4b1c      	ldr	r3, [pc, #112]	@ (81106b0 <prvHeapInit+0xb0>)
 8110640:	2200      	movs	r2, #0
 8110642:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8110644:	687b      	ldr	r3, [r7, #4]
 8110646:	68ba      	ldr	r2, [r7, #8]
 8110648:	4413      	add	r3, r2
 811064a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 811064c:	2208      	movs	r2, #8
 811064e:	68fb      	ldr	r3, [r7, #12]
 8110650:	1a9b      	subs	r3, r3, r2
 8110652:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8110654:	68fb      	ldr	r3, [r7, #12]
 8110656:	f023 0307 	bic.w	r3, r3, #7
 811065a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 811065c:	68fb      	ldr	r3, [r7, #12]
 811065e:	4a15      	ldr	r2, [pc, #84]	@ (81106b4 <prvHeapInit+0xb4>)
 8110660:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8110662:	4b14      	ldr	r3, [pc, #80]	@ (81106b4 <prvHeapInit+0xb4>)
 8110664:	681b      	ldr	r3, [r3, #0]
 8110666:	2200      	movs	r2, #0
 8110668:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 811066a:	4b12      	ldr	r3, [pc, #72]	@ (81106b4 <prvHeapInit+0xb4>)
 811066c:	681b      	ldr	r3, [r3, #0]
 811066e:	2200      	movs	r2, #0
 8110670:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8110672:	687b      	ldr	r3, [r7, #4]
 8110674:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8110676:	683b      	ldr	r3, [r7, #0]
 8110678:	68fa      	ldr	r2, [r7, #12]
 811067a:	1ad2      	subs	r2, r2, r3
 811067c:	683b      	ldr	r3, [r7, #0]
 811067e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8110680:	4b0c      	ldr	r3, [pc, #48]	@ (81106b4 <prvHeapInit+0xb4>)
 8110682:	681a      	ldr	r2, [r3, #0]
 8110684:	683b      	ldr	r3, [r7, #0]
 8110686:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8110688:	683b      	ldr	r3, [r7, #0]
 811068a:	685b      	ldr	r3, [r3, #4]
 811068c:	4a0a      	ldr	r2, [pc, #40]	@ (81106b8 <prvHeapInit+0xb8>)
 811068e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8110690:	683b      	ldr	r3, [r7, #0]
 8110692:	685b      	ldr	r3, [r3, #4]
 8110694:	4a09      	ldr	r2, [pc, #36]	@ (81106bc <prvHeapInit+0xbc>)
 8110696:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8110698:	4b09      	ldr	r3, [pc, #36]	@ (81106c0 <prvHeapInit+0xc0>)
 811069a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 811069e:	601a      	str	r2, [r3, #0]
}
 81106a0:	bf00      	nop
 81106a2:	3714      	adds	r7, #20
 81106a4:	46bd      	mov	sp, r7
 81106a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81106aa:	4770      	bx	lr
 81106ac:	10000b2c 	.word	0x10000b2c
 81106b0:	1000ab2c 	.word	0x1000ab2c
 81106b4:	1000ab34 	.word	0x1000ab34
 81106b8:	1000ab3c 	.word	0x1000ab3c
 81106bc:	1000ab38 	.word	0x1000ab38
 81106c0:	1000ab48 	.word	0x1000ab48

081106c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 81106c4:	b480      	push	{r7}
 81106c6:	b085      	sub	sp, #20
 81106c8:	af00      	add	r7, sp, #0
 81106ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 81106cc:	4b28      	ldr	r3, [pc, #160]	@ (8110770 <prvInsertBlockIntoFreeList+0xac>)
 81106ce:	60fb      	str	r3, [r7, #12]
 81106d0:	e002      	b.n	81106d8 <prvInsertBlockIntoFreeList+0x14>
 81106d2:	68fb      	ldr	r3, [r7, #12]
 81106d4:	681b      	ldr	r3, [r3, #0]
 81106d6:	60fb      	str	r3, [r7, #12]
 81106d8:	68fb      	ldr	r3, [r7, #12]
 81106da:	681b      	ldr	r3, [r3, #0]
 81106dc:	687a      	ldr	r2, [r7, #4]
 81106de:	429a      	cmp	r2, r3
 81106e0:	d8f7      	bhi.n	81106d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 81106e2:	68fb      	ldr	r3, [r7, #12]
 81106e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 81106e6:	68fb      	ldr	r3, [r7, #12]
 81106e8:	685b      	ldr	r3, [r3, #4]
 81106ea:	68ba      	ldr	r2, [r7, #8]
 81106ec:	4413      	add	r3, r2
 81106ee:	687a      	ldr	r2, [r7, #4]
 81106f0:	429a      	cmp	r2, r3
 81106f2:	d108      	bne.n	8110706 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 81106f4:	68fb      	ldr	r3, [r7, #12]
 81106f6:	685a      	ldr	r2, [r3, #4]
 81106f8:	687b      	ldr	r3, [r7, #4]
 81106fa:	685b      	ldr	r3, [r3, #4]
 81106fc:	441a      	add	r2, r3
 81106fe:	68fb      	ldr	r3, [r7, #12]
 8110700:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8110702:	68fb      	ldr	r3, [r7, #12]
 8110704:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8110706:	687b      	ldr	r3, [r7, #4]
 8110708:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 811070a:	687b      	ldr	r3, [r7, #4]
 811070c:	685b      	ldr	r3, [r3, #4]
 811070e:	68ba      	ldr	r2, [r7, #8]
 8110710:	441a      	add	r2, r3
 8110712:	68fb      	ldr	r3, [r7, #12]
 8110714:	681b      	ldr	r3, [r3, #0]
 8110716:	429a      	cmp	r2, r3
 8110718:	d118      	bne.n	811074c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 811071a:	68fb      	ldr	r3, [r7, #12]
 811071c:	681a      	ldr	r2, [r3, #0]
 811071e:	4b15      	ldr	r3, [pc, #84]	@ (8110774 <prvInsertBlockIntoFreeList+0xb0>)
 8110720:	681b      	ldr	r3, [r3, #0]
 8110722:	429a      	cmp	r2, r3
 8110724:	d00d      	beq.n	8110742 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8110726:	687b      	ldr	r3, [r7, #4]
 8110728:	685a      	ldr	r2, [r3, #4]
 811072a:	68fb      	ldr	r3, [r7, #12]
 811072c:	681b      	ldr	r3, [r3, #0]
 811072e:	685b      	ldr	r3, [r3, #4]
 8110730:	441a      	add	r2, r3
 8110732:	687b      	ldr	r3, [r7, #4]
 8110734:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8110736:	68fb      	ldr	r3, [r7, #12]
 8110738:	681b      	ldr	r3, [r3, #0]
 811073a:	681a      	ldr	r2, [r3, #0]
 811073c:	687b      	ldr	r3, [r7, #4]
 811073e:	601a      	str	r2, [r3, #0]
 8110740:	e008      	b.n	8110754 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8110742:	4b0c      	ldr	r3, [pc, #48]	@ (8110774 <prvInsertBlockIntoFreeList+0xb0>)
 8110744:	681a      	ldr	r2, [r3, #0]
 8110746:	687b      	ldr	r3, [r7, #4]
 8110748:	601a      	str	r2, [r3, #0]
 811074a:	e003      	b.n	8110754 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 811074c:	68fb      	ldr	r3, [r7, #12]
 811074e:	681a      	ldr	r2, [r3, #0]
 8110750:	687b      	ldr	r3, [r7, #4]
 8110752:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8110754:	68fa      	ldr	r2, [r7, #12]
 8110756:	687b      	ldr	r3, [r7, #4]
 8110758:	429a      	cmp	r2, r3
 811075a:	d002      	beq.n	8110762 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 811075c:	68fb      	ldr	r3, [r7, #12]
 811075e:	687a      	ldr	r2, [r7, #4]
 8110760:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8110762:	bf00      	nop
 8110764:	3714      	adds	r7, #20
 8110766:	46bd      	mov	sp, r7
 8110768:	f85d 7b04 	ldr.w	r7, [sp], #4
 811076c:	4770      	bx	lr
 811076e:	bf00      	nop
 8110770:	1000ab2c 	.word	0x1000ab2c
 8110774:	1000ab34 	.word	0x1000ab34

08110778 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8110778:	b480      	push	{r7}
 811077a:	b083      	sub	sp, #12
 811077c:	af00      	add	r7, sp, #0
 811077e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8110780:	687b      	ldr	r3, [r7, #4]
 8110782:	f103 0208 	add.w	r2, r3, #8
 8110786:	687b      	ldr	r3, [r7, #4]
 8110788:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 811078a:	687b      	ldr	r3, [r7, #4]
 811078c:	f04f 32ff 	mov.w	r2, #4294967295
 8110790:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8110792:	687b      	ldr	r3, [r7, #4]
 8110794:	f103 0208 	add.w	r2, r3, #8
 8110798:	687b      	ldr	r3, [r7, #4]
 811079a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 811079c:	687b      	ldr	r3, [r7, #4]
 811079e:	f103 0208 	add.w	r2, r3, #8
 81107a2:	687b      	ldr	r3, [r7, #4]
 81107a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 81107a6:	687b      	ldr	r3, [r7, #4]
 81107a8:	2200      	movs	r2, #0
 81107aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 81107ac:	bf00      	nop
 81107ae:	370c      	adds	r7, #12
 81107b0:	46bd      	mov	sp, r7
 81107b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81107b6:	4770      	bx	lr

081107b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 81107b8:	b480      	push	{r7}
 81107ba:	b083      	sub	sp, #12
 81107bc:	af00      	add	r7, sp, #0
 81107be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 81107c0:	687b      	ldr	r3, [r7, #4]
 81107c2:	2200      	movs	r2, #0
 81107c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 81107c6:	bf00      	nop
 81107c8:	370c      	adds	r7, #12
 81107ca:	46bd      	mov	sp, r7
 81107cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81107d0:	4770      	bx	lr

081107d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81107d2:	b480      	push	{r7}
 81107d4:	b085      	sub	sp, #20
 81107d6:	af00      	add	r7, sp, #0
 81107d8:	6078      	str	r0, [r7, #4]
 81107da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 81107dc:	687b      	ldr	r3, [r7, #4]
 81107de:	685b      	ldr	r3, [r3, #4]
 81107e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 81107e2:	683b      	ldr	r3, [r7, #0]
 81107e4:	68fa      	ldr	r2, [r7, #12]
 81107e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 81107e8:	68fb      	ldr	r3, [r7, #12]
 81107ea:	689a      	ldr	r2, [r3, #8]
 81107ec:	683b      	ldr	r3, [r7, #0]
 81107ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 81107f0:	68fb      	ldr	r3, [r7, #12]
 81107f2:	689b      	ldr	r3, [r3, #8]
 81107f4:	683a      	ldr	r2, [r7, #0]
 81107f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 81107f8:	68fb      	ldr	r3, [r7, #12]
 81107fa:	683a      	ldr	r2, [r7, #0]
 81107fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 81107fe:	683b      	ldr	r3, [r7, #0]
 8110800:	687a      	ldr	r2, [r7, #4]
 8110802:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8110804:	687b      	ldr	r3, [r7, #4]
 8110806:	681b      	ldr	r3, [r3, #0]
 8110808:	1c5a      	adds	r2, r3, #1
 811080a:	687b      	ldr	r3, [r7, #4]
 811080c:	601a      	str	r2, [r3, #0]
}
 811080e:	bf00      	nop
 8110810:	3714      	adds	r7, #20
 8110812:	46bd      	mov	sp, r7
 8110814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110818:	4770      	bx	lr

0811081a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 811081a:	b480      	push	{r7}
 811081c:	b085      	sub	sp, #20
 811081e:	af00      	add	r7, sp, #0
 8110820:	6078      	str	r0, [r7, #4]
 8110822:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8110824:	683b      	ldr	r3, [r7, #0]
 8110826:	681b      	ldr	r3, [r3, #0]
 8110828:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 811082a:	68bb      	ldr	r3, [r7, #8]
 811082c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8110830:	d103      	bne.n	811083a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8110832:	687b      	ldr	r3, [r7, #4]
 8110834:	691b      	ldr	r3, [r3, #16]
 8110836:	60fb      	str	r3, [r7, #12]
 8110838:	e00c      	b.n	8110854 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 811083a:	687b      	ldr	r3, [r7, #4]
 811083c:	3308      	adds	r3, #8
 811083e:	60fb      	str	r3, [r7, #12]
 8110840:	e002      	b.n	8110848 <vListInsert+0x2e>
 8110842:	68fb      	ldr	r3, [r7, #12]
 8110844:	685b      	ldr	r3, [r3, #4]
 8110846:	60fb      	str	r3, [r7, #12]
 8110848:	68fb      	ldr	r3, [r7, #12]
 811084a:	685b      	ldr	r3, [r3, #4]
 811084c:	681b      	ldr	r3, [r3, #0]
 811084e:	68ba      	ldr	r2, [r7, #8]
 8110850:	429a      	cmp	r2, r3
 8110852:	d2f6      	bcs.n	8110842 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8110854:	68fb      	ldr	r3, [r7, #12]
 8110856:	685a      	ldr	r2, [r3, #4]
 8110858:	683b      	ldr	r3, [r7, #0]
 811085a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 811085c:	683b      	ldr	r3, [r7, #0]
 811085e:	685b      	ldr	r3, [r3, #4]
 8110860:	683a      	ldr	r2, [r7, #0]
 8110862:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8110864:	683b      	ldr	r3, [r7, #0]
 8110866:	68fa      	ldr	r2, [r7, #12]
 8110868:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 811086a:	68fb      	ldr	r3, [r7, #12]
 811086c:	683a      	ldr	r2, [r7, #0]
 811086e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8110870:	683b      	ldr	r3, [r7, #0]
 8110872:	687a      	ldr	r2, [r7, #4]
 8110874:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8110876:	687b      	ldr	r3, [r7, #4]
 8110878:	681b      	ldr	r3, [r3, #0]
 811087a:	1c5a      	adds	r2, r3, #1
 811087c:	687b      	ldr	r3, [r7, #4]
 811087e:	601a      	str	r2, [r3, #0]
}
 8110880:	bf00      	nop
 8110882:	3714      	adds	r7, #20
 8110884:	46bd      	mov	sp, r7
 8110886:	f85d 7b04 	ldr.w	r7, [sp], #4
 811088a:	4770      	bx	lr

0811088c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 811088c:	b480      	push	{r7}
 811088e:	b085      	sub	sp, #20
 8110890:	af00      	add	r7, sp, #0
 8110892:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8110894:	687b      	ldr	r3, [r7, #4]
 8110896:	691b      	ldr	r3, [r3, #16]
 8110898:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 811089a:	687b      	ldr	r3, [r7, #4]
 811089c:	685b      	ldr	r3, [r3, #4]
 811089e:	687a      	ldr	r2, [r7, #4]
 81108a0:	6892      	ldr	r2, [r2, #8]
 81108a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 81108a4:	687b      	ldr	r3, [r7, #4]
 81108a6:	689b      	ldr	r3, [r3, #8]
 81108a8:	687a      	ldr	r2, [r7, #4]
 81108aa:	6852      	ldr	r2, [r2, #4]
 81108ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 81108ae:	68fb      	ldr	r3, [r7, #12]
 81108b0:	685b      	ldr	r3, [r3, #4]
 81108b2:	687a      	ldr	r2, [r7, #4]
 81108b4:	429a      	cmp	r2, r3
 81108b6:	d103      	bne.n	81108c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 81108b8:	687b      	ldr	r3, [r7, #4]
 81108ba:	689a      	ldr	r2, [r3, #8]
 81108bc:	68fb      	ldr	r3, [r7, #12]
 81108be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 81108c0:	687b      	ldr	r3, [r7, #4]
 81108c2:	2200      	movs	r2, #0
 81108c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 81108c6:	68fb      	ldr	r3, [r7, #12]
 81108c8:	681b      	ldr	r3, [r3, #0]
 81108ca:	1e5a      	subs	r2, r3, #1
 81108cc:	68fb      	ldr	r3, [r7, #12]
 81108ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 81108d0:	68fb      	ldr	r3, [r7, #12]
 81108d2:	681b      	ldr	r3, [r3, #0]
}
 81108d4:	4618      	mov	r0, r3
 81108d6:	3714      	adds	r7, #20
 81108d8:	46bd      	mov	sp, r7
 81108da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81108de:	4770      	bx	lr

081108e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 81108e0:	b480      	push	{r7}
 81108e2:	b085      	sub	sp, #20
 81108e4:	af00      	add	r7, sp, #0
 81108e6:	60f8      	str	r0, [r7, #12]
 81108e8:	60b9      	str	r1, [r7, #8]
 81108ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 81108ec:	68fb      	ldr	r3, [r7, #12]
 81108ee:	3b04      	subs	r3, #4
 81108f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 81108f2:	68fb      	ldr	r3, [r7, #12]
 81108f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 81108f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 81108fa:	68fb      	ldr	r3, [r7, #12]
 81108fc:	3b04      	subs	r3, #4
 81108fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8110900:	68bb      	ldr	r3, [r7, #8]
 8110902:	f023 0201 	bic.w	r2, r3, #1
 8110906:	68fb      	ldr	r3, [r7, #12]
 8110908:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 811090a:	68fb      	ldr	r3, [r7, #12]
 811090c:	3b04      	subs	r3, #4
 811090e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8110910:	4a0c      	ldr	r2, [pc, #48]	@ (8110944 <pxPortInitialiseStack+0x64>)
 8110912:	68fb      	ldr	r3, [r7, #12]
 8110914:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8110916:	68fb      	ldr	r3, [r7, #12]
 8110918:	3b14      	subs	r3, #20
 811091a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 811091c:	687a      	ldr	r2, [r7, #4]
 811091e:	68fb      	ldr	r3, [r7, #12]
 8110920:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8110922:	68fb      	ldr	r3, [r7, #12]
 8110924:	3b04      	subs	r3, #4
 8110926:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8110928:	68fb      	ldr	r3, [r7, #12]
 811092a:	f06f 0202 	mvn.w	r2, #2
 811092e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8110930:	68fb      	ldr	r3, [r7, #12]
 8110932:	3b20      	subs	r3, #32
 8110934:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8110936:	68fb      	ldr	r3, [r7, #12]
}
 8110938:	4618      	mov	r0, r3
 811093a:	3714      	adds	r7, #20
 811093c:	46bd      	mov	sp, r7
 811093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110942:	4770      	bx	lr
 8110944:	08110949 	.word	0x08110949

08110948 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8110948:	b480      	push	{r7}
 811094a:	b085      	sub	sp, #20
 811094c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 811094e:	2300      	movs	r3, #0
 8110950:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8110952:	4b13      	ldr	r3, [pc, #76]	@ (81109a0 <prvTaskExitError+0x58>)
 8110954:	681b      	ldr	r3, [r3, #0]
 8110956:	f1b3 3fff 	cmp.w	r3, #4294967295
 811095a:	d00b      	beq.n	8110974 <prvTaskExitError+0x2c>
	__asm volatile
 811095c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110960:	f383 8811 	msr	BASEPRI, r3
 8110964:	f3bf 8f6f 	isb	sy
 8110968:	f3bf 8f4f 	dsb	sy
 811096c:	60fb      	str	r3, [r7, #12]
}
 811096e:	bf00      	nop
 8110970:	bf00      	nop
 8110972:	e7fd      	b.n	8110970 <prvTaskExitError+0x28>
	__asm volatile
 8110974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110978:	f383 8811 	msr	BASEPRI, r3
 811097c:	f3bf 8f6f 	isb	sy
 8110980:	f3bf 8f4f 	dsb	sy
 8110984:	60bb      	str	r3, [r7, #8]
}
 8110986:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8110988:	bf00      	nop
 811098a:	687b      	ldr	r3, [r7, #4]
 811098c:	2b00      	cmp	r3, #0
 811098e:	d0fc      	beq.n	811098a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8110990:	bf00      	nop
 8110992:	bf00      	nop
 8110994:	3714      	adds	r7, #20
 8110996:	46bd      	mov	sp, r7
 8110998:	f85d 7b04 	ldr.w	r7, [sp], #4
 811099c:	4770      	bx	lr
 811099e:	bf00      	nop
 81109a0:	10000024 	.word	0x10000024
	...

081109b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 81109b0:	4b07      	ldr	r3, [pc, #28]	@ (81109d0 <pxCurrentTCBConst2>)
 81109b2:	6819      	ldr	r1, [r3, #0]
 81109b4:	6808      	ldr	r0, [r1, #0]
 81109b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81109ba:	f380 8809 	msr	PSP, r0
 81109be:	f3bf 8f6f 	isb	sy
 81109c2:	f04f 0000 	mov.w	r0, #0
 81109c6:	f380 8811 	msr	BASEPRI, r0
 81109ca:	4770      	bx	lr
 81109cc:	f3af 8000 	nop.w

081109d0 <pxCurrentTCBConst2>:
 81109d0:	1000ab94 	.word	0x1000ab94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 81109d4:	bf00      	nop
 81109d6:	bf00      	nop

081109d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 81109d8:	4808      	ldr	r0, [pc, #32]	@ (81109fc <prvPortStartFirstTask+0x24>)
 81109da:	6800      	ldr	r0, [r0, #0]
 81109dc:	6800      	ldr	r0, [r0, #0]
 81109de:	f380 8808 	msr	MSP, r0
 81109e2:	f04f 0000 	mov.w	r0, #0
 81109e6:	f380 8814 	msr	CONTROL, r0
 81109ea:	b662      	cpsie	i
 81109ec:	b661      	cpsie	f
 81109ee:	f3bf 8f4f 	dsb	sy
 81109f2:	f3bf 8f6f 	isb	sy
 81109f6:	df00      	svc	0
 81109f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 81109fa:	bf00      	nop
 81109fc:	e000ed08 	.word	0xe000ed08

08110a00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8110a00:	b580      	push	{r7, lr}
 8110a02:	b086      	sub	sp, #24
 8110a04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8110a06:	4b47      	ldr	r3, [pc, #284]	@ (8110b24 <xPortStartScheduler+0x124>)
 8110a08:	681b      	ldr	r3, [r3, #0]
 8110a0a:	4a47      	ldr	r2, [pc, #284]	@ (8110b28 <xPortStartScheduler+0x128>)
 8110a0c:	4293      	cmp	r3, r2
 8110a0e:	d10b      	bne.n	8110a28 <xPortStartScheduler+0x28>
	__asm volatile
 8110a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110a14:	f383 8811 	msr	BASEPRI, r3
 8110a18:	f3bf 8f6f 	isb	sy
 8110a1c:	f3bf 8f4f 	dsb	sy
 8110a20:	613b      	str	r3, [r7, #16]
}
 8110a22:	bf00      	nop
 8110a24:	bf00      	nop
 8110a26:	e7fd      	b.n	8110a24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8110a28:	4b3e      	ldr	r3, [pc, #248]	@ (8110b24 <xPortStartScheduler+0x124>)
 8110a2a:	681b      	ldr	r3, [r3, #0]
 8110a2c:	4a3f      	ldr	r2, [pc, #252]	@ (8110b2c <xPortStartScheduler+0x12c>)
 8110a2e:	4293      	cmp	r3, r2
 8110a30:	d10b      	bne.n	8110a4a <xPortStartScheduler+0x4a>
	__asm volatile
 8110a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110a36:	f383 8811 	msr	BASEPRI, r3
 8110a3a:	f3bf 8f6f 	isb	sy
 8110a3e:	f3bf 8f4f 	dsb	sy
 8110a42:	60fb      	str	r3, [r7, #12]
}
 8110a44:	bf00      	nop
 8110a46:	bf00      	nop
 8110a48:	e7fd      	b.n	8110a46 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8110a4a:	4b39      	ldr	r3, [pc, #228]	@ (8110b30 <xPortStartScheduler+0x130>)
 8110a4c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8110a4e:	697b      	ldr	r3, [r7, #20]
 8110a50:	781b      	ldrb	r3, [r3, #0]
 8110a52:	b2db      	uxtb	r3, r3
 8110a54:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8110a56:	697b      	ldr	r3, [r7, #20]
 8110a58:	22ff      	movs	r2, #255	@ 0xff
 8110a5a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8110a5c:	697b      	ldr	r3, [r7, #20]
 8110a5e:	781b      	ldrb	r3, [r3, #0]
 8110a60:	b2db      	uxtb	r3, r3
 8110a62:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8110a64:	78fb      	ldrb	r3, [r7, #3]
 8110a66:	b2db      	uxtb	r3, r3
 8110a68:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8110a6c:	b2da      	uxtb	r2, r3
 8110a6e:	4b31      	ldr	r3, [pc, #196]	@ (8110b34 <xPortStartScheduler+0x134>)
 8110a70:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8110a72:	4b31      	ldr	r3, [pc, #196]	@ (8110b38 <xPortStartScheduler+0x138>)
 8110a74:	2207      	movs	r2, #7
 8110a76:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8110a78:	e009      	b.n	8110a8e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8110a7a:	4b2f      	ldr	r3, [pc, #188]	@ (8110b38 <xPortStartScheduler+0x138>)
 8110a7c:	681b      	ldr	r3, [r3, #0]
 8110a7e:	3b01      	subs	r3, #1
 8110a80:	4a2d      	ldr	r2, [pc, #180]	@ (8110b38 <xPortStartScheduler+0x138>)
 8110a82:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8110a84:	78fb      	ldrb	r3, [r7, #3]
 8110a86:	b2db      	uxtb	r3, r3
 8110a88:	005b      	lsls	r3, r3, #1
 8110a8a:	b2db      	uxtb	r3, r3
 8110a8c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8110a8e:	78fb      	ldrb	r3, [r7, #3]
 8110a90:	b2db      	uxtb	r3, r3
 8110a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8110a96:	2b80      	cmp	r3, #128	@ 0x80
 8110a98:	d0ef      	beq.n	8110a7a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8110a9a:	4b27      	ldr	r3, [pc, #156]	@ (8110b38 <xPortStartScheduler+0x138>)
 8110a9c:	681b      	ldr	r3, [r3, #0]
 8110a9e:	f1c3 0307 	rsb	r3, r3, #7
 8110aa2:	2b04      	cmp	r3, #4
 8110aa4:	d00b      	beq.n	8110abe <xPortStartScheduler+0xbe>
	__asm volatile
 8110aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110aaa:	f383 8811 	msr	BASEPRI, r3
 8110aae:	f3bf 8f6f 	isb	sy
 8110ab2:	f3bf 8f4f 	dsb	sy
 8110ab6:	60bb      	str	r3, [r7, #8]
}
 8110ab8:	bf00      	nop
 8110aba:	bf00      	nop
 8110abc:	e7fd      	b.n	8110aba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8110abe:	4b1e      	ldr	r3, [pc, #120]	@ (8110b38 <xPortStartScheduler+0x138>)
 8110ac0:	681b      	ldr	r3, [r3, #0]
 8110ac2:	021b      	lsls	r3, r3, #8
 8110ac4:	4a1c      	ldr	r2, [pc, #112]	@ (8110b38 <xPortStartScheduler+0x138>)
 8110ac6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8110ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8110b38 <xPortStartScheduler+0x138>)
 8110aca:	681b      	ldr	r3, [r3, #0]
 8110acc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8110ad0:	4a19      	ldr	r2, [pc, #100]	@ (8110b38 <xPortStartScheduler+0x138>)
 8110ad2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8110ad4:	687b      	ldr	r3, [r7, #4]
 8110ad6:	b2da      	uxtb	r2, r3
 8110ad8:	697b      	ldr	r3, [r7, #20]
 8110ada:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8110adc:	4b17      	ldr	r3, [pc, #92]	@ (8110b3c <xPortStartScheduler+0x13c>)
 8110ade:	681b      	ldr	r3, [r3, #0]
 8110ae0:	4a16      	ldr	r2, [pc, #88]	@ (8110b3c <xPortStartScheduler+0x13c>)
 8110ae2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8110ae6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8110ae8:	4b14      	ldr	r3, [pc, #80]	@ (8110b3c <xPortStartScheduler+0x13c>)
 8110aea:	681b      	ldr	r3, [r3, #0]
 8110aec:	4a13      	ldr	r2, [pc, #76]	@ (8110b3c <xPortStartScheduler+0x13c>)
 8110aee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8110af2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8110af4:	f000 f8da 	bl	8110cac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8110af8:	4b11      	ldr	r3, [pc, #68]	@ (8110b40 <xPortStartScheduler+0x140>)
 8110afa:	2200      	movs	r2, #0
 8110afc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8110afe:	f000 f8f9 	bl	8110cf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8110b02:	4b10      	ldr	r3, [pc, #64]	@ (8110b44 <xPortStartScheduler+0x144>)
 8110b04:	681b      	ldr	r3, [r3, #0]
 8110b06:	4a0f      	ldr	r2, [pc, #60]	@ (8110b44 <xPortStartScheduler+0x144>)
 8110b08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8110b0c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8110b0e:	f7ff ff63 	bl	81109d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8110b12:	f002 fa35 	bl	8112f80 <vTaskSwitchContext>
	prvTaskExitError();
 8110b16:	f7ff ff17 	bl	8110948 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8110b1a:	2300      	movs	r3, #0
}
 8110b1c:	4618      	mov	r0, r3
 8110b1e:	3718      	adds	r7, #24
 8110b20:	46bd      	mov	sp, r7
 8110b22:	bd80      	pop	{r7, pc}
 8110b24:	e000ed00 	.word	0xe000ed00
 8110b28:	410fc271 	.word	0x410fc271
 8110b2c:	410fc270 	.word	0x410fc270
 8110b30:	e000e400 	.word	0xe000e400
 8110b34:	1000ab4c 	.word	0x1000ab4c
 8110b38:	1000ab50 	.word	0x1000ab50
 8110b3c:	e000ed20 	.word	0xe000ed20
 8110b40:	10000024 	.word	0x10000024
 8110b44:	e000ef34 	.word	0xe000ef34

08110b48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8110b48:	b480      	push	{r7}
 8110b4a:	b083      	sub	sp, #12
 8110b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8110b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110b52:	f383 8811 	msr	BASEPRI, r3
 8110b56:	f3bf 8f6f 	isb	sy
 8110b5a:	f3bf 8f4f 	dsb	sy
 8110b5e:	607b      	str	r3, [r7, #4]
}
 8110b60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8110b62:	4b10      	ldr	r3, [pc, #64]	@ (8110ba4 <vPortEnterCritical+0x5c>)
 8110b64:	681b      	ldr	r3, [r3, #0]
 8110b66:	3301      	adds	r3, #1
 8110b68:	4a0e      	ldr	r2, [pc, #56]	@ (8110ba4 <vPortEnterCritical+0x5c>)
 8110b6a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8110b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8110ba4 <vPortEnterCritical+0x5c>)
 8110b6e:	681b      	ldr	r3, [r3, #0]
 8110b70:	2b01      	cmp	r3, #1
 8110b72:	d110      	bne.n	8110b96 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8110b74:	4b0c      	ldr	r3, [pc, #48]	@ (8110ba8 <vPortEnterCritical+0x60>)
 8110b76:	681b      	ldr	r3, [r3, #0]
 8110b78:	b2db      	uxtb	r3, r3
 8110b7a:	2b00      	cmp	r3, #0
 8110b7c:	d00b      	beq.n	8110b96 <vPortEnterCritical+0x4e>
	__asm volatile
 8110b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110b82:	f383 8811 	msr	BASEPRI, r3
 8110b86:	f3bf 8f6f 	isb	sy
 8110b8a:	f3bf 8f4f 	dsb	sy
 8110b8e:	603b      	str	r3, [r7, #0]
}
 8110b90:	bf00      	nop
 8110b92:	bf00      	nop
 8110b94:	e7fd      	b.n	8110b92 <vPortEnterCritical+0x4a>
	}
}
 8110b96:	bf00      	nop
 8110b98:	370c      	adds	r7, #12
 8110b9a:	46bd      	mov	sp, r7
 8110b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110ba0:	4770      	bx	lr
 8110ba2:	bf00      	nop
 8110ba4:	10000024 	.word	0x10000024
 8110ba8:	e000ed04 	.word	0xe000ed04

08110bac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8110bac:	b480      	push	{r7}
 8110bae:	b083      	sub	sp, #12
 8110bb0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8110bb2:	4b12      	ldr	r3, [pc, #72]	@ (8110bfc <vPortExitCritical+0x50>)
 8110bb4:	681b      	ldr	r3, [r3, #0]
 8110bb6:	2b00      	cmp	r3, #0
 8110bb8:	d10b      	bne.n	8110bd2 <vPortExitCritical+0x26>
	__asm volatile
 8110bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110bbe:	f383 8811 	msr	BASEPRI, r3
 8110bc2:	f3bf 8f6f 	isb	sy
 8110bc6:	f3bf 8f4f 	dsb	sy
 8110bca:	607b      	str	r3, [r7, #4]
}
 8110bcc:	bf00      	nop
 8110bce:	bf00      	nop
 8110bd0:	e7fd      	b.n	8110bce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8110bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8110bfc <vPortExitCritical+0x50>)
 8110bd4:	681b      	ldr	r3, [r3, #0]
 8110bd6:	3b01      	subs	r3, #1
 8110bd8:	4a08      	ldr	r2, [pc, #32]	@ (8110bfc <vPortExitCritical+0x50>)
 8110bda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8110bdc:	4b07      	ldr	r3, [pc, #28]	@ (8110bfc <vPortExitCritical+0x50>)
 8110bde:	681b      	ldr	r3, [r3, #0]
 8110be0:	2b00      	cmp	r3, #0
 8110be2:	d105      	bne.n	8110bf0 <vPortExitCritical+0x44>
 8110be4:	2300      	movs	r3, #0
 8110be6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8110be8:	683b      	ldr	r3, [r7, #0]
 8110bea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8110bee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8110bf0:	bf00      	nop
 8110bf2:	370c      	adds	r7, #12
 8110bf4:	46bd      	mov	sp, r7
 8110bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110bfa:	4770      	bx	lr
 8110bfc:	10000024 	.word	0x10000024

08110c00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8110c00:	f3ef 8009 	mrs	r0, PSP
 8110c04:	f3bf 8f6f 	isb	sy
 8110c08:	4b15      	ldr	r3, [pc, #84]	@ (8110c60 <pxCurrentTCBConst>)
 8110c0a:	681a      	ldr	r2, [r3, #0]
 8110c0c:	f01e 0f10 	tst.w	lr, #16
 8110c10:	bf08      	it	eq
 8110c12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8110c16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8110c1a:	6010      	str	r0, [r2, #0]
 8110c1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8110c20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8110c24:	f380 8811 	msr	BASEPRI, r0
 8110c28:	f3bf 8f4f 	dsb	sy
 8110c2c:	f3bf 8f6f 	isb	sy
 8110c30:	f002 f9a6 	bl	8112f80 <vTaskSwitchContext>
 8110c34:	f04f 0000 	mov.w	r0, #0
 8110c38:	f380 8811 	msr	BASEPRI, r0
 8110c3c:	bc09      	pop	{r0, r3}
 8110c3e:	6819      	ldr	r1, [r3, #0]
 8110c40:	6808      	ldr	r0, [r1, #0]
 8110c42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8110c46:	f01e 0f10 	tst.w	lr, #16
 8110c4a:	bf08      	it	eq
 8110c4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8110c50:	f380 8809 	msr	PSP, r0
 8110c54:	f3bf 8f6f 	isb	sy
 8110c58:	4770      	bx	lr
 8110c5a:	bf00      	nop
 8110c5c:	f3af 8000 	nop.w

08110c60 <pxCurrentTCBConst>:
 8110c60:	1000ab94 	.word	0x1000ab94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8110c64:	bf00      	nop
 8110c66:	bf00      	nop

08110c68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8110c68:	b580      	push	{r7, lr}
 8110c6a:	b082      	sub	sp, #8
 8110c6c:	af00      	add	r7, sp, #0
	__asm volatile
 8110c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110c72:	f383 8811 	msr	BASEPRI, r3
 8110c76:	f3bf 8f6f 	isb	sy
 8110c7a:	f3bf 8f4f 	dsb	sy
 8110c7e:	607b      	str	r3, [r7, #4]
}
 8110c80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8110c82:	f002 f8c3 	bl	8112e0c <xTaskIncrementTick>
 8110c86:	4603      	mov	r3, r0
 8110c88:	2b00      	cmp	r3, #0
 8110c8a:	d003      	beq.n	8110c94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8110c8c:	4b06      	ldr	r3, [pc, #24]	@ (8110ca8 <xPortSysTickHandler+0x40>)
 8110c8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8110c92:	601a      	str	r2, [r3, #0]
 8110c94:	2300      	movs	r3, #0
 8110c96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8110c98:	683b      	ldr	r3, [r7, #0]
 8110c9a:	f383 8811 	msr	BASEPRI, r3
}
 8110c9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8110ca0:	bf00      	nop
 8110ca2:	3708      	adds	r7, #8
 8110ca4:	46bd      	mov	sp, r7
 8110ca6:	bd80      	pop	{r7, pc}
 8110ca8:	e000ed04 	.word	0xe000ed04

08110cac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8110cac:	b480      	push	{r7}
 8110cae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8110cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8110ce0 <vPortSetupTimerInterrupt+0x34>)
 8110cb2:	2200      	movs	r2, #0
 8110cb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8110cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8110ce4 <vPortSetupTimerInterrupt+0x38>)
 8110cb8:	2200      	movs	r2, #0
 8110cba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8110cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8110ce8 <vPortSetupTimerInterrupt+0x3c>)
 8110cbe:	681b      	ldr	r3, [r3, #0]
 8110cc0:	4a0a      	ldr	r2, [pc, #40]	@ (8110cec <vPortSetupTimerInterrupt+0x40>)
 8110cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8110cc6:	099b      	lsrs	r3, r3, #6
 8110cc8:	4a09      	ldr	r2, [pc, #36]	@ (8110cf0 <vPortSetupTimerInterrupt+0x44>)
 8110cca:	3b01      	subs	r3, #1
 8110ccc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8110cce:	4b04      	ldr	r3, [pc, #16]	@ (8110ce0 <vPortSetupTimerInterrupt+0x34>)
 8110cd0:	2207      	movs	r2, #7
 8110cd2:	601a      	str	r2, [r3, #0]
}
 8110cd4:	bf00      	nop
 8110cd6:	46bd      	mov	sp, r7
 8110cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110cdc:	4770      	bx	lr
 8110cde:	bf00      	nop
 8110ce0:	e000e010 	.word	0xe000e010
 8110ce4:	e000e018 	.word	0xe000e018
 8110ce8:	10000018 	.word	0x10000018
 8110cec:	10624dd3 	.word	0x10624dd3
 8110cf0:	e000e014 	.word	0xe000e014

08110cf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8110cf4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8110d04 <vPortEnableVFP+0x10>
 8110cf8:	6801      	ldr	r1, [r0, #0]
 8110cfa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8110cfe:	6001      	str	r1, [r0, #0]
 8110d00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8110d02:	bf00      	nop
 8110d04:	e000ed88 	.word	0xe000ed88

08110d08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8110d08:	b480      	push	{r7}
 8110d0a:	b085      	sub	sp, #20
 8110d0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8110d0e:	f3ef 8305 	mrs	r3, IPSR
 8110d12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8110d14:	68fb      	ldr	r3, [r7, #12]
 8110d16:	2b0f      	cmp	r3, #15
 8110d18:	d915      	bls.n	8110d46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8110d1a:	4a18      	ldr	r2, [pc, #96]	@ (8110d7c <vPortValidateInterruptPriority+0x74>)
 8110d1c:	68fb      	ldr	r3, [r7, #12]
 8110d1e:	4413      	add	r3, r2
 8110d20:	781b      	ldrb	r3, [r3, #0]
 8110d22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8110d24:	4b16      	ldr	r3, [pc, #88]	@ (8110d80 <vPortValidateInterruptPriority+0x78>)
 8110d26:	781b      	ldrb	r3, [r3, #0]
 8110d28:	7afa      	ldrb	r2, [r7, #11]
 8110d2a:	429a      	cmp	r2, r3
 8110d2c:	d20b      	bcs.n	8110d46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8110d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110d32:	f383 8811 	msr	BASEPRI, r3
 8110d36:	f3bf 8f6f 	isb	sy
 8110d3a:	f3bf 8f4f 	dsb	sy
 8110d3e:	607b      	str	r3, [r7, #4]
}
 8110d40:	bf00      	nop
 8110d42:	bf00      	nop
 8110d44:	e7fd      	b.n	8110d42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8110d46:	4b0f      	ldr	r3, [pc, #60]	@ (8110d84 <vPortValidateInterruptPriority+0x7c>)
 8110d48:	681b      	ldr	r3, [r3, #0]
 8110d4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8110d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8110d88 <vPortValidateInterruptPriority+0x80>)
 8110d50:	681b      	ldr	r3, [r3, #0]
 8110d52:	429a      	cmp	r2, r3
 8110d54:	d90b      	bls.n	8110d6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8110d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110d5a:	f383 8811 	msr	BASEPRI, r3
 8110d5e:	f3bf 8f6f 	isb	sy
 8110d62:	f3bf 8f4f 	dsb	sy
 8110d66:	603b      	str	r3, [r7, #0]
}
 8110d68:	bf00      	nop
 8110d6a:	bf00      	nop
 8110d6c:	e7fd      	b.n	8110d6a <vPortValidateInterruptPriority+0x62>
	}
 8110d6e:	bf00      	nop
 8110d70:	3714      	adds	r7, #20
 8110d72:	46bd      	mov	sp, r7
 8110d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110d78:	4770      	bx	lr
 8110d7a:	bf00      	nop
 8110d7c:	e000e3f0 	.word	0xe000e3f0
 8110d80:	1000ab4c 	.word	0x1000ab4c
 8110d84:	e000ed0c 	.word	0xe000ed0c
 8110d88:	1000ab50 	.word	0x1000ab50

08110d8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8110d8c:	b580      	push	{r7, lr}
 8110d8e:	b084      	sub	sp, #16
 8110d90:	af00      	add	r7, sp, #0
 8110d92:	6078      	str	r0, [r7, #4]
 8110d94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8110d96:	687b      	ldr	r3, [r7, #4]
 8110d98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8110d9a:	68fb      	ldr	r3, [r7, #12]
 8110d9c:	2b00      	cmp	r3, #0
 8110d9e:	d10b      	bne.n	8110db8 <xQueueGenericReset+0x2c>
	__asm volatile
 8110da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110da4:	f383 8811 	msr	BASEPRI, r3
 8110da8:	f3bf 8f6f 	isb	sy
 8110dac:	f3bf 8f4f 	dsb	sy
 8110db0:	60bb      	str	r3, [r7, #8]
}
 8110db2:	bf00      	nop
 8110db4:	bf00      	nop
 8110db6:	e7fd      	b.n	8110db4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8110db8:	f7ff fec6 	bl	8110b48 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8110dbc:	68fb      	ldr	r3, [r7, #12]
 8110dbe:	681a      	ldr	r2, [r3, #0]
 8110dc0:	68fb      	ldr	r3, [r7, #12]
 8110dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8110dc4:	68f9      	ldr	r1, [r7, #12]
 8110dc6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8110dc8:	fb01 f303 	mul.w	r3, r1, r3
 8110dcc:	441a      	add	r2, r3
 8110dce:	68fb      	ldr	r3, [r7, #12]
 8110dd0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8110dd2:	68fb      	ldr	r3, [r7, #12]
 8110dd4:	2200      	movs	r2, #0
 8110dd6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8110dd8:	68fb      	ldr	r3, [r7, #12]
 8110dda:	681a      	ldr	r2, [r3, #0]
 8110ddc:	68fb      	ldr	r3, [r7, #12]
 8110dde:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8110de0:	68fb      	ldr	r3, [r7, #12]
 8110de2:	681a      	ldr	r2, [r3, #0]
 8110de4:	68fb      	ldr	r3, [r7, #12]
 8110de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8110de8:	3b01      	subs	r3, #1
 8110dea:	68f9      	ldr	r1, [r7, #12]
 8110dec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8110dee:	fb01 f303 	mul.w	r3, r1, r3
 8110df2:	441a      	add	r2, r3
 8110df4:	68fb      	ldr	r3, [r7, #12]
 8110df6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8110df8:	68fb      	ldr	r3, [r7, #12]
 8110dfa:	22ff      	movs	r2, #255	@ 0xff
 8110dfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8110e00:	68fb      	ldr	r3, [r7, #12]
 8110e02:	22ff      	movs	r2, #255	@ 0xff
 8110e04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8110e08:	683b      	ldr	r3, [r7, #0]
 8110e0a:	2b00      	cmp	r3, #0
 8110e0c:	d114      	bne.n	8110e38 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8110e0e:	68fb      	ldr	r3, [r7, #12]
 8110e10:	691b      	ldr	r3, [r3, #16]
 8110e12:	2b00      	cmp	r3, #0
 8110e14:	d01a      	beq.n	8110e4c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8110e16:	68fb      	ldr	r3, [r7, #12]
 8110e18:	3310      	adds	r3, #16
 8110e1a:	4618      	mov	r0, r3
 8110e1c:	f002 f968 	bl	81130f0 <xTaskRemoveFromEventList>
 8110e20:	4603      	mov	r3, r0
 8110e22:	2b00      	cmp	r3, #0
 8110e24:	d012      	beq.n	8110e4c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8110e26:	4b0d      	ldr	r3, [pc, #52]	@ (8110e5c <xQueueGenericReset+0xd0>)
 8110e28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8110e2c:	601a      	str	r2, [r3, #0]
 8110e2e:	f3bf 8f4f 	dsb	sy
 8110e32:	f3bf 8f6f 	isb	sy
 8110e36:	e009      	b.n	8110e4c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8110e38:	68fb      	ldr	r3, [r7, #12]
 8110e3a:	3310      	adds	r3, #16
 8110e3c:	4618      	mov	r0, r3
 8110e3e:	f7ff fc9b 	bl	8110778 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8110e42:	68fb      	ldr	r3, [r7, #12]
 8110e44:	3324      	adds	r3, #36	@ 0x24
 8110e46:	4618      	mov	r0, r3
 8110e48:	f7ff fc96 	bl	8110778 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8110e4c:	f7ff feae 	bl	8110bac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8110e50:	2301      	movs	r3, #1
}
 8110e52:	4618      	mov	r0, r3
 8110e54:	3710      	adds	r7, #16
 8110e56:	46bd      	mov	sp, r7
 8110e58:	bd80      	pop	{r7, pc}
 8110e5a:	bf00      	nop
 8110e5c:	e000ed04 	.word	0xe000ed04

08110e60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8110e60:	b580      	push	{r7, lr}
 8110e62:	b08e      	sub	sp, #56	@ 0x38
 8110e64:	af02      	add	r7, sp, #8
 8110e66:	60f8      	str	r0, [r7, #12]
 8110e68:	60b9      	str	r1, [r7, #8]
 8110e6a:	607a      	str	r2, [r7, #4]
 8110e6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8110e6e:	68fb      	ldr	r3, [r7, #12]
 8110e70:	2b00      	cmp	r3, #0
 8110e72:	d10b      	bne.n	8110e8c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8110e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110e78:	f383 8811 	msr	BASEPRI, r3
 8110e7c:	f3bf 8f6f 	isb	sy
 8110e80:	f3bf 8f4f 	dsb	sy
 8110e84:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8110e86:	bf00      	nop
 8110e88:	bf00      	nop
 8110e8a:	e7fd      	b.n	8110e88 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8110e8c:	683b      	ldr	r3, [r7, #0]
 8110e8e:	2b00      	cmp	r3, #0
 8110e90:	d10b      	bne.n	8110eaa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8110e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110e96:	f383 8811 	msr	BASEPRI, r3
 8110e9a:	f3bf 8f6f 	isb	sy
 8110e9e:	f3bf 8f4f 	dsb	sy
 8110ea2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8110ea4:	bf00      	nop
 8110ea6:	bf00      	nop
 8110ea8:	e7fd      	b.n	8110ea6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8110eaa:	687b      	ldr	r3, [r7, #4]
 8110eac:	2b00      	cmp	r3, #0
 8110eae:	d002      	beq.n	8110eb6 <xQueueGenericCreateStatic+0x56>
 8110eb0:	68bb      	ldr	r3, [r7, #8]
 8110eb2:	2b00      	cmp	r3, #0
 8110eb4:	d001      	beq.n	8110eba <xQueueGenericCreateStatic+0x5a>
 8110eb6:	2301      	movs	r3, #1
 8110eb8:	e000      	b.n	8110ebc <xQueueGenericCreateStatic+0x5c>
 8110eba:	2300      	movs	r3, #0
 8110ebc:	2b00      	cmp	r3, #0
 8110ebe:	d10b      	bne.n	8110ed8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8110ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110ec4:	f383 8811 	msr	BASEPRI, r3
 8110ec8:	f3bf 8f6f 	isb	sy
 8110ecc:	f3bf 8f4f 	dsb	sy
 8110ed0:	623b      	str	r3, [r7, #32]
}
 8110ed2:	bf00      	nop
 8110ed4:	bf00      	nop
 8110ed6:	e7fd      	b.n	8110ed4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8110ed8:	687b      	ldr	r3, [r7, #4]
 8110eda:	2b00      	cmp	r3, #0
 8110edc:	d102      	bne.n	8110ee4 <xQueueGenericCreateStatic+0x84>
 8110ede:	68bb      	ldr	r3, [r7, #8]
 8110ee0:	2b00      	cmp	r3, #0
 8110ee2:	d101      	bne.n	8110ee8 <xQueueGenericCreateStatic+0x88>
 8110ee4:	2301      	movs	r3, #1
 8110ee6:	e000      	b.n	8110eea <xQueueGenericCreateStatic+0x8a>
 8110ee8:	2300      	movs	r3, #0
 8110eea:	2b00      	cmp	r3, #0
 8110eec:	d10b      	bne.n	8110f06 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8110eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110ef2:	f383 8811 	msr	BASEPRI, r3
 8110ef6:	f3bf 8f6f 	isb	sy
 8110efa:	f3bf 8f4f 	dsb	sy
 8110efe:	61fb      	str	r3, [r7, #28]
}
 8110f00:	bf00      	nop
 8110f02:	bf00      	nop
 8110f04:	e7fd      	b.n	8110f02 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8110f06:	2350      	movs	r3, #80	@ 0x50
 8110f08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8110f0a:	697b      	ldr	r3, [r7, #20]
 8110f0c:	2b50      	cmp	r3, #80	@ 0x50
 8110f0e:	d00b      	beq.n	8110f28 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8110f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110f14:	f383 8811 	msr	BASEPRI, r3
 8110f18:	f3bf 8f6f 	isb	sy
 8110f1c:	f3bf 8f4f 	dsb	sy
 8110f20:	61bb      	str	r3, [r7, #24]
}
 8110f22:	bf00      	nop
 8110f24:	bf00      	nop
 8110f26:	e7fd      	b.n	8110f24 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8110f28:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8110f2a:	683b      	ldr	r3, [r7, #0]
 8110f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8110f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110f30:	2b00      	cmp	r3, #0
 8110f32:	d00d      	beq.n	8110f50 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8110f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110f36:	2201      	movs	r2, #1
 8110f38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8110f3c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8110f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8110f42:	9300      	str	r3, [sp, #0]
 8110f44:	4613      	mov	r3, r2
 8110f46:	687a      	ldr	r2, [r7, #4]
 8110f48:	68b9      	ldr	r1, [r7, #8]
 8110f4a:	68f8      	ldr	r0, [r7, #12]
 8110f4c:	f000 f840 	bl	8110fd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8110f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8110f52:	4618      	mov	r0, r3
 8110f54:	3730      	adds	r7, #48	@ 0x30
 8110f56:	46bd      	mov	sp, r7
 8110f58:	bd80      	pop	{r7, pc}

08110f5a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8110f5a:	b580      	push	{r7, lr}
 8110f5c:	b08a      	sub	sp, #40	@ 0x28
 8110f5e:	af02      	add	r7, sp, #8
 8110f60:	60f8      	str	r0, [r7, #12]
 8110f62:	60b9      	str	r1, [r7, #8]
 8110f64:	4613      	mov	r3, r2
 8110f66:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8110f68:	68fb      	ldr	r3, [r7, #12]
 8110f6a:	2b00      	cmp	r3, #0
 8110f6c:	d10b      	bne.n	8110f86 <xQueueGenericCreate+0x2c>
	__asm volatile
 8110f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110f72:	f383 8811 	msr	BASEPRI, r3
 8110f76:	f3bf 8f6f 	isb	sy
 8110f7a:	f3bf 8f4f 	dsb	sy
 8110f7e:	613b      	str	r3, [r7, #16]
}
 8110f80:	bf00      	nop
 8110f82:	bf00      	nop
 8110f84:	e7fd      	b.n	8110f82 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8110f86:	68fb      	ldr	r3, [r7, #12]
 8110f88:	68ba      	ldr	r2, [r7, #8]
 8110f8a:	fb02 f303 	mul.w	r3, r2, r3
 8110f8e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8110f90:	69fb      	ldr	r3, [r7, #28]
 8110f92:	3350      	adds	r3, #80	@ 0x50
 8110f94:	4618      	mov	r0, r3
 8110f96:	f7ff fa01 	bl	811039c <pvPortMalloc>
 8110f9a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8110f9c:	69bb      	ldr	r3, [r7, #24]
 8110f9e:	2b00      	cmp	r3, #0
 8110fa0:	d011      	beq.n	8110fc6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8110fa2:	69bb      	ldr	r3, [r7, #24]
 8110fa4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8110fa6:	697b      	ldr	r3, [r7, #20]
 8110fa8:	3350      	adds	r3, #80	@ 0x50
 8110faa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8110fac:	69bb      	ldr	r3, [r7, #24]
 8110fae:	2200      	movs	r2, #0
 8110fb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8110fb4:	79fa      	ldrb	r2, [r7, #7]
 8110fb6:	69bb      	ldr	r3, [r7, #24]
 8110fb8:	9300      	str	r3, [sp, #0]
 8110fba:	4613      	mov	r3, r2
 8110fbc:	697a      	ldr	r2, [r7, #20]
 8110fbe:	68b9      	ldr	r1, [r7, #8]
 8110fc0:	68f8      	ldr	r0, [r7, #12]
 8110fc2:	f000 f805 	bl	8110fd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8110fc6:	69bb      	ldr	r3, [r7, #24]
	}
 8110fc8:	4618      	mov	r0, r3
 8110fca:	3720      	adds	r7, #32
 8110fcc:	46bd      	mov	sp, r7
 8110fce:	bd80      	pop	{r7, pc}

08110fd0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8110fd0:	b580      	push	{r7, lr}
 8110fd2:	b084      	sub	sp, #16
 8110fd4:	af00      	add	r7, sp, #0
 8110fd6:	60f8      	str	r0, [r7, #12]
 8110fd8:	60b9      	str	r1, [r7, #8]
 8110fda:	607a      	str	r2, [r7, #4]
 8110fdc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8110fde:	68bb      	ldr	r3, [r7, #8]
 8110fe0:	2b00      	cmp	r3, #0
 8110fe2:	d103      	bne.n	8110fec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8110fe4:	69bb      	ldr	r3, [r7, #24]
 8110fe6:	69ba      	ldr	r2, [r7, #24]
 8110fe8:	601a      	str	r2, [r3, #0]
 8110fea:	e002      	b.n	8110ff2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8110fec:	69bb      	ldr	r3, [r7, #24]
 8110fee:	687a      	ldr	r2, [r7, #4]
 8110ff0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8110ff2:	69bb      	ldr	r3, [r7, #24]
 8110ff4:	68fa      	ldr	r2, [r7, #12]
 8110ff6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8110ff8:	69bb      	ldr	r3, [r7, #24]
 8110ffa:	68ba      	ldr	r2, [r7, #8]
 8110ffc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8110ffe:	2101      	movs	r1, #1
 8111000:	69b8      	ldr	r0, [r7, #24]
 8111002:	f7ff fec3 	bl	8110d8c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8111006:	69bb      	ldr	r3, [r7, #24]
 8111008:	78fa      	ldrb	r2, [r7, #3]
 811100a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 811100e:	bf00      	nop
 8111010:	3710      	adds	r7, #16
 8111012:	46bd      	mov	sp, r7
 8111014:	bd80      	pop	{r7, pc}

08111016 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8111016:	b580      	push	{r7, lr}
 8111018:	b082      	sub	sp, #8
 811101a:	af00      	add	r7, sp, #0
 811101c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 811101e:	687b      	ldr	r3, [r7, #4]
 8111020:	2b00      	cmp	r3, #0
 8111022:	d00e      	beq.n	8111042 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8111024:	687b      	ldr	r3, [r7, #4]
 8111026:	2200      	movs	r2, #0
 8111028:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 811102a:	687b      	ldr	r3, [r7, #4]
 811102c:	2200      	movs	r2, #0
 811102e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8111030:	687b      	ldr	r3, [r7, #4]
 8111032:	2200      	movs	r2, #0
 8111034:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8111036:	2300      	movs	r3, #0
 8111038:	2200      	movs	r2, #0
 811103a:	2100      	movs	r1, #0
 811103c:	6878      	ldr	r0, [r7, #4]
 811103e:	f000 f911 	bl	8111264 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8111042:	bf00      	nop
 8111044:	3708      	adds	r7, #8
 8111046:	46bd      	mov	sp, r7
 8111048:	bd80      	pop	{r7, pc}

0811104a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 811104a:	b580      	push	{r7, lr}
 811104c:	b086      	sub	sp, #24
 811104e:	af00      	add	r7, sp, #0
 8111050:	4603      	mov	r3, r0
 8111052:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8111054:	2301      	movs	r3, #1
 8111056:	617b      	str	r3, [r7, #20]
 8111058:	2300      	movs	r3, #0
 811105a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 811105c:	79fb      	ldrb	r3, [r7, #7]
 811105e:	461a      	mov	r2, r3
 8111060:	6939      	ldr	r1, [r7, #16]
 8111062:	6978      	ldr	r0, [r7, #20]
 8111064:	f7ff ff79 	bl	8110f5a <xQueueGenericCreate>
 8111068:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 811106a:	68f8      	ldr	r0, [r7, #12]
 811106c:	f7ff ffd3 	bl	8111016 <prvInitialiseMutex>

		return xNewQueue;
 8111070:	68fb      	ldr	r3, [r7, #12]
	}
 8111072:	4618      	mov	r0, r3
 8111074:	3718      	adds	r7, #24
 8111076:	46bd      	mov	sp, r7
 8111078:	bd80      	pop	{r7, pc}

0811107a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 811107a:	b580      	push	{r7, lr}
 811107c:	b088      	sub	sp, #32
 811107e:	af02      	add	r7, sp, #8
 8111080:	4603      	mov	r3, r0
 8111082:	6039      	str	r1, [r7, #0]
 8111084:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8111086:	2301      	movs	r3, #1
 8111088:	617b      	str	r3, [r7, #20]
 811108a:	2300      	movs	r3, #0
 811108c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 811108e:	79fb      	ldrb	r3, [r7, #7]
 8111090:	9300      	str	r3, [sp, #0]
 8111092:	683b      	ldr	r3, [r7, #0]
 8111094:	2200      	movs	r2, #0
 8111096:	6939      	ldr	r1, [r7, #16]
 8111098:	6978      	ldr	r0, [r7, #20]
 811109a:	f7ff fee1 	bl	8110e60 <xQueueGenericCreateStatic>
 811109e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 81110a0:	68f8      	ldr	r0, [r7, #12]
 81110a2:	f7ff ffb8 	bl	8111016 <prvInitialiseMutex>

		return xNewQueue;
 81110a6:	68fb      	ldr	r3, [r7, #12]
	}
 81110a8:	4618      	mov	r0, r3
 81110aa:	3718      	adds	r7, #24
 81110ac:	46bd      	mov	sp, r7
 81110ae:	bd80      	pop	{r7, pc}

081110b0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 81110b0:	b590      	push	{r4, r7, lr}
 81110b2:	b087      	sub	sp, #28
 81110b4:	af00      	add	r7, sp, #0
 81110b6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 81110b8:	687b      	ldr	r3, [r7, #4]
 81110ba:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 81110bc:	693b      	ldr	r3, [r7, #16]
 81110be:	2b00      	cmp	r3, #0
 81110c0:	d10b      	bne.n	81110da <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 81110c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81110c6:	f383 8811 	msr	BASEPRI, r3
 81110ca:	f3bf 8f6f 	isb	sy
 81110ce:	f3bf 8f4f 	dsb	sy
 81110d2:	60fb      	str	r3, [r7, #12]
}
 81110d4:	bf00      	nop
 81110d6:	bf00      	nop
 81110d8:	e7fd      	b.n	81110d6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 81110da:	693b      	ldr	r3, [r7, #16]
 81110dc:	689c      	ldr	r4, [r3, #8]
 81110de:	f002 f9f5 	bl	81134cc <xTaskGetCurrentTaskHandle>
 81110e2:	4603      	mov	r3, r0
 81110e4:	429c      	cmp	r4, r3
 81110e6:	d111      	bne.n	811110c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 81110e8:	693b      	ldr	r3, [r7, #16]
 81110ea:	68db      	ldr	r3, [r3, #12]
 81110ec:	1e5a      	subs	r2, r3, #1
 81110ee:	693b      	ldr	r3, [r7, #16]
 81110f0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 81110f2:	693b      	ldr	r3, [r7, #16]
 81110f4:	68db      	ldr	r3, [r3, #12]
 81110f6:	2b00      	cmp	r3, #0
 81110f8:	d105      	bne.n	8111106 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 81110fa:	2300      	movs	r3, #0
 81110fc:	2200      	movs	r2, #0
 81110fe:	2100      	movs	r1, #0
 8111100:	6938      	ldr	r0, [r7, #16]
 8111102:	f000 f8af 	bl	8111264 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8111106:	2301      	movs	r3, #1
 8111108:	617b      	str	r3, [r7, #20]
 811110a:	e001      	b.n	8111110 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 811110c:	2300      	movs	r3, #0
 811110e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8111110:	697b      	ldr	r3, [r7, #20]
	}
 8111112:	4618      	mov	r0, r3
 8111114:	371c      	adds	r7, #28
 8111116:	46bd      	mov	sp, r7
 8111118:	bd90      	pop	{r4, r7, pc}

0811111a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 811111a:	b590      	push	{r4, r7, lr}
 811111c:	b087      	sub	sp, #28
 811111e:	af00      	add	r7, sp, #0
 8111120:	6078      	str	r0, [r7, #4]
 8111122:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8111124:	687b      	ldr	r3, [r7, #4]
 8111126:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8111128:	693b      	ldr	r3, [r7, #16]
 811112a:	2b00      	cmp	r3, #0
 811112c:	d10b      	bne.n	8111146 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 811112e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111132:	f383 8811 	msr	BASEPRI, r3
 8111136:	f3bf 8f6f 	isb	sy
 811113a:	f3bf 8f4f 	dsb	sy
 811113e:	60fb      	str	r3, [r7, #12]
}
 8111140:	bf00      	nop
 8111142:	bf00      	nop
 8111144:	e7fd      	b.n	8111142 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8111146:	693b      	ldr	r3, [r7, #16]
 8111148:	689c      	ldr	r4, [r3, #8]
 811114a:	f002 f9bf 	bl	81134cc <xTaskGetCurrentTaskHandle>
 811114e:	4603      	mov	r3, r0
 8111150:	429c      	cmp	r4, r3
 8111152:	d107      	bne.n	8111164 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8111154:	693b      	ldr	r3, [r7, #16]
 8111156:	68db      	ldr	r3, [r3, #12]
 8111158:	1c5a      	adds	r2, r3, #1
 811115a:	693b      	ldr	r3, [r7, #16]
 811115c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 811115e:	2301      	movs	r3, #1
 8111160:	617b      	str	r3, [r7, #20]
 8111162:	e00c      	b.n	811117e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8111164:	6839      	ldr	r1, [r7, #0]
 8111166:	6938      	ldr	r0, [r7, #16]
 8111168:	f000 fb8e 	bl	8111888 <xQueueSemaphoreTake>
 811116c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 811116e:	697b      	ldr	r3, [r7, #20]
 8111170:	2b00      	cmp	r3, #0
 8111172:	d004      	beq.n	811117e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8111174:	693b      	ldr	r3, [r7, #16]
 8111176:	68db      	ldr	r3, [r3, #12]
 8111178:	1c5a      	adds	r2, r3, #1
 811117a:	693b      	ldr	r3, [r7, #16]
 811117c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 811117e:	697b      	ldr	r3, [r7, #20]
	}
 8111180:	4618      	mov	r0, r3
 8111182:	371c      	adds	r7, #28
 8111184:	46bd      	mov	sp, r7
 8111186:	bd90      	pop	{r4, r7, pc}

08111188 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8111188:	b580      	push	{r7, lr}
 811118a:	b08a      	sub	sp, #40	@ 0x28
 811118c:	af02      	add	r7, sp, #8
 811118e:	60f8      	str	r0, [r7, #12]
 8111190:	60b9      	str	r1, [r7, #8]
 8111192:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8111194:	68fb      	ldr	r3, [r7, #12]
 8111196:	2b00      	cmp	r3, #0
 8111198:	d10b      	bne.n	81111b2 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 811119a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811119e:	f383 8811 	msr	BASEPRI, r3
 81111a2:	f3bf 8f6f 	isb	sy
 81111a6:	f3bf 8f4f 	dsb	sy
 81111aa:	61bb      	str	r3, [r7, #24]
}
 81111ac:	bf00      	nop
 81111ae:	bf00      	nop
 81111b0:	e7fd      	b.n	81111ae <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 81111b2:	68ba      	ldr	r2, [r7, #8]
 81111b4:	68fb      	ldr	r3, [r7, #12]
 81111b6:	429a      	cmp	r2, r3
 81111b8:	d90b      	bls.n	81111d2 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 81111ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81111be:	f383 8811 	msr	BASEPRI, r3
 81111c2:	f3bf 8f6f 	isb	sy
 81111c6:	f3bf 8f4f 	dsb	sy
 81111ca:	617b      	str	r3, [r7, #20]
}
 81111cc:	bf00      	nop
 81111ce:	bf00      	nop
 81111d0:	e7fd      	b.n	81111ce <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 81111d2:	2302      	movs	r3, #2
 81111d4:	9300      	str	r3, [sp, #0]
 81111d6:	687b      	ldr	r3, [r7, #4]
 81111d8:	2200      	movs	r2, #0
 81111da:	2100      	movs	r1, #0
 81111dc:	68f8      	ldr	r0, [r7, #12]
 81111de:	f7ff fe3f 	bl	8110e60 <xQueueGenericCreateStatic>
 81111e2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 81111e4:	69fb      	ldr	r3, [r7, #28]
 81111e6:	2b00      	cmp	r3, #0
 81111e8:	d002      	beq.n	81111f0 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 81111ea:	69fb      	ldr	r3, [r7, #28]
 81111ec:	68ba      	ldr	r2, [r7, #8]
 81111ee:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 81111f0:	69fb      	ldr	r3, [r7, #28]
	}
 81111f2:	4618      	mov	r0, r3
 81111f4:	3720      	adds	r7, #32
 81111f6:	46bd      	mov	sp, r7
 81111f8:	bd80      	pop	{r7, pc}

081111fa <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 81111fa:	b580      	push	{r7, lr}
 81111fc:	b086      	sub	sp, #24
 81111fe:	af00      	add	r7, sp, #0
 8111200:	6078      	str	r0, [r7, #4]
 8111202:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8111204:	687b      	ldr	r3, [r7, #4]
 8111206:	2b00      	cmp	r3, #0
 8111208:	d10b      	bne.n	8111222 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 811120a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811120e:	f383 8811 	msr	BASEPRI, r3
 8111212:	f3bf 8f6f 	isb	sy
 8111216:	f3bf 8f4f 	dsb	sy
 811121a:	613b      	str	r3, [r7, #16]
}
 811121c:	bf00      	nop
 811121e:	bf00      	nop
 8111220:	e7fd      	b.n	811121e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8111222:	683a      	ldr	r2, [r7, #0]
 8111224:	687b      	ldr	r3, [r7, #4]
 8111226:	429a      	cmp	r2, r3
 8111228:	d90b      	bls.n	8111242 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 811122a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811122e:	f383 8811 	msr	BASEPRI, r3
 8111232:	f3bf 8f6f 	isb	sy
 8111236:	f3bf 8f4f 	dsb	sy
 811123a:	60fb      	str	r3, [r7, #12]
}
 811123c:	bf00      	nop
 811123e:	bf00      	nop
 8111240:	e7fd      	b.n	811123e <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8111242:	2202      	movs	r2, #2
 8111244:	2100      	movs	r1, #0
 8111246:	6878      	ldr	r0, [r7, #4]
 8111248:	f7ff fe87 	bl	8110f5a <xQueueGenericCreate>
 811124c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 811124e:	697b      	ldr	r3, [r7, #20]
 8111250:	2b00      	cmp	r3, #0
 8111252:	d002      	beq.n	811125a <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8111254:	697b      	ldr	r3, [r7, #20]
 8111256:	683a      	ldr	r2, [r7, #0]
 8111258:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 811125a:	697b      	ldr	r3, [r7, #20]
	}
 811125c:	4618      	mov	r0, r3
 811125e:	3718      	adds	r7, #24
 8111260:	46bd      	mov	sp, r7
 8111262:	bd80      	pop	{r7, pc}

08111264 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8111264:	b580      	push	{r7, lr}
 8111266:	b08e      	sub	sp, #56	@ 0x38
 8111268:	af00      	add	r7, sp, #0
 811126a:	60f8      	str	r0, [r7, #12]
 811126c:	60b9      	str	r1, [r7, #8]
 811126e:	607a      	str	r2, [r7, #4]
 8111270:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8111272:	2300      	movs	r3, #0
 8111274:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8111276:	68fb      	ldr	r3, [r7, #12]
 8111278:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 811127a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811127c:	2b00      	cmp	r3, #0
 811127e:	d10b      	bne.n	8111298 <xQueueGenericSend+0x34>
	__asm volatile
 8111280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111284:	f383 8811 	msr	BASEPRI, r3
 8111288:	f3bf 8f6f 	isb	sy
 811128c:	f3bf 8f4f 	dsb	sy
 8111290:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8111292:	bf00      	nop
 8111294:	bf00      	nop
 8111296:	e7fd      	b.n	8111294 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8111298:	68bb      	ldr	r3, [r7, #8]
 811129a:	2b00      	cmp	r3, #0
 811129c:	d103      	bne.n	81112a6 <xQueueGenericSend+0x42>
 811129e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81112a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81112a2:	2b00      	cmp	r3, #0
 81112a4:	d101      	bne.n	81112aa <xQueueGenericSend+0x46>
 81112a6:	2301      	movs	r3, #1
 81112a8:	e000      	b.n	81112ac <xQueueGenericSend+0x48>
 81112aa:	2300      	movs	r3, #0
 81112ac:	2b00      	cmp	r3, #0
 81112ae:	d10b      	bne.n	81112c8 <xQueueGenericSend+0x64>
	__asm volatile
 81112b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81112b4:	f383 8811 	msr	BASEPRI, r3
 81112b8:	f3bf 8f6f 	isb	sy
 81112bc:	f3bf 8f4f 	dsb	sy
 81112c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 81112c2:	bf00      	nop
 81112c4:	bf00      	nop
 81112c6:	e7fd      	b.n	81112c4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 81112c8:	683b      	ldr	r3, [r7, #0]
 81112ca:	2b02      	cmp	r3, #2
 81112cc:	d103      	bne.n	81112d6 <xQueueGenericSend+0x72>
 81112ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81112d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81112d2:	2b01      	cmp	r3, #1
 81112d4:	d101      	bne.n	81112da <xQueueGenericSend+0x76>
 81112d6:	2301      	movs	r3, #1
 81112d8:	e000      	b.n	81112dc <xQueueGenericSend+0x78>
 81112da:	2300      	movs	r3, #0
 81112dc:	2b00      	cmp	r3, #0
 81112de:	d10b      	bne.n	81112f8 <xQueueGenericSend+0x94>
	__asm volatile
 81112e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81112e4:	f383 8811 	msr	BASEPRI, r3
 81112e8:	f3bf 8f6f 	isb	sy
 81112ec:	f3bf 8f4f 	dsb	sy
 81112f0:	623b      	str	r3, [r7, #32]
}
 81112f2:	bf00      	nop
 81112f4:	bf00      	nop
 81112f6:	e7fd      	b.n	81112f4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 81112f8:	f002 f8f8 	bl	81134ec <xTaskGetSchedulerState>
 81112fc:	4603      	mov	r3, r0
 81112fe:	2b00      	cmp	r3, #0
 8111300:	d102      	bne.n	8111308 <xQueueGenericSend+0xa4>
 8111302:	687b      	ldr	r3, [r7, #4]
 8111304:	2b00      	cmp	r3, #0
 8111306:	d101      	bne.n	811130c <xQueueGenericSend+0xa8>
 8111308:	2301      	movs	r3, #1
 811130a:	e000      	b.n	811130e <xQueueGenericSend+0xaa>
 811130c:	2300      	movs	r3, #0
 811130e:	2b00      	cmp	r3, #0
 8111310:	d10b      	bne.n	811132a <xQueueGenericSend+0xc6>
	__asm volatile
 8111312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111316:	f383 8811 	msr	BASEPRI, r3
 811131a:	f3bf 8f6f 	isb	sy
 811131e:	f3bf 8f4f 	dsb	sy
 8111322:	61fb      	str	r3, [r7, #28]
}
 8111324:	bf00      	nop
 8111326:	bf00      	nop
 8111328:	e7fd      	b.n	8111326 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 811132a:	f7ff fc0d 	bl	8110b48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 811132e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111330:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8111332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8111336:	429a      	cmp	r2, r3
 8111338:	d302      	bcc.n	8111340 <xQueueGenericSend+0xdc>
 811133a:	683b      	ldr	r3, [r7, #0]
 811133c:	2b02      	cmp	r3, #2
 811133e:	d129      	bne.n	8111394 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8111340:	683a      	ldr	r2, [r7, #0]
 8111342:	68b9      	ldr	r1, [r7, #8]
 8111344:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8111346:	f000 fc6d 	bl	8111c24 <prvCopyDataToQueue>
 811134a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 811134c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811134e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8111350:	2b00      	cmp	r3, #0
 8111352:	d010      	beq.n	8111376 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8111354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111356:	3324      	adds	r3, #36	@ 0x24
 8111358:	4618      	mov	r0, r3
 811135a:	f001 fec9 	bl	81130f0 <xTaskRemoveFromEventList>
 811135e:	4603      	mov	r3, r0
 8111360:	2b00      	cmp	r3, #0
 8111362:	d013      	beq.n	811138c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8111364:	4b3f      	ldr	r3, [pc, #252]	@ (8111464 <xQueueGenericSend+0x200>)
 8111366:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 811136a:	601a      	str	r2, [r3, #0]
 811136c:	f3bf 8f4f 	dsb	sy
 8111370:	f3bf 8f6f 	isb	sy
 8111374:	e00a      	b.n	811138c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8111376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8111378:	2b00      	cmp	r3, #0
 811137a:	d007      	beq.n	811138c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 811137c:	4b39      	ldr	r3, [pc, #228]	@ (8111464 <xQueueGenericSend+0x200>)
 811137e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8111382:	601a      	str	r2, [r3, #0]
 8111384:	f3bf 8f4f 	dsb	sy
 8111388:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 811138c:	f7ff fc0e 	bl	8110bac <vPortExitCritical>
				return pdPASS;
 8111390:	2301      	movs	r3, #1
 8111392:	e063      	b.n	811145c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8111394:	687b      	ldr	r3, [r7, #4]
 8111396:	2b00      	cmp	r3, #0
 8111398:	d103      	bne.n	81113a2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 811139a:	f7ff fc07 	bl	8110bac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 811139e:	2300      	movs	r3, #0
 81113a0:	e05c      	b.n	811145c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 81113a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81113a4:	2b00      	cmp	r3, #0
 81113a6:	d106      	bne.n	81113b6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 81113a8:	f107 0314 	add.w	r3, r7, #20
 81113ac:	4618      	mov	r0, r3
 81113ae:	f001 ff2b 	bl	8113208 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 81113b2:	2301      	movs	r3, #1
 81113b4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 81113b6:	f7ff fbf9 	bl	8110bac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 81113ba:	f001 fc59 	bl	8112c70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 81113be:	f7ff fbc3 	bl	8110b48 <vPortEnterCritical>
 81113c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81113c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 81113c8:	b25b      	sxtb	r3, r3
 81113ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 81113ce:	d103      	bne.n	81113d8 <xQueueGenericSend+0x174>
 81113d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81113d2:	2200      	movs	r2, #0
 81113d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 81113d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81113da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 81113de:	b25b      	sxtb	r3, r3
 81113e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81113e4:	d103      	bne.n	81113ee <xQueueGenericSend+0x18a>
 81113e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81113e8:	2200      	movs	r2, #0
 81113ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81113ee:	f7ff fbdd 	bl	8110bac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 81113f2:	1d3a      	adds	r2, r7, #4
 81113f4:	f107 0314 	add.w	r3, r7, #20
 81113f8:	4611      	mov	r1, r2
 81113fa:	4618      	mov	r0, r3
 81113fc:	f001 ff1a 	bl	8113234 <xTaskCheckForTimeOut>
 8111400:	4603      	mov	r3, r0
 8111402:	2b00      	cmp	r3, #0
 8111404:	d124      	bne.n	8111450 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8111406:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8111408:	f000 fd04 	bl	8111e14 <prvIsQueueFull>
 811140c:	4603      	mov	r3, r0
 811140e:	2b00      	cmp	r3, #0
 8111410:	d018      	beq.n	8111444 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8111412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111414:	3310      	adds	r3, #16
 8111416:	687a      	ldr	r2, [r7, #4]
 8111418:	4611      	mov	r1, r2
 811141a:	4618      	mov	r0, r3
 811141c:	f001 fe16 	bl	811304c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8111420:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8111422:	f000 fc8f 	bl	8111d44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8111426:	f001 fc31 	bl	8112c8c <xTaskResumeAll>
 811142a:	4603      	mov	r3, r0
 811142c:	2b00      	cmp	r3, #0
 811142e:	f47f af7c 	bne.w	811132a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8111432:	4b0c      	ldr	r3, [pc, #48]	@ (8111464 <xQueueGenericSend+0x200>)
 8111434:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8111438:	601a      	str	r2, [r3, #0]
 811143a:	f3bf 8f4f 	dsb	sy
 811143e:	f3bf 8f6f 	isb	sy
 8111442:	e772      	b.n	811132a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8111444:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8111446:	f000 fc7d 	bl	8111d44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 811144a:	f001 fc1f 	bl	8112c8c <xTaskResumeAll>
 811144e:	e76c      	b.n	811132a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8111450:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8111452:	f000 fc77 	bl	8111d44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8111456:	f001 fc19 	bl	8112c8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 811145a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 811145c:	4618      	mov	r0, r3
 811145e:	3738      	adds	r7, #56	@ 0x38
 8111460:	46bd      	mov	sp, r7
 8111462:	bd80      	pop	{r7, pc}
 8111464:	e000ed04 	.word	0xe000ed04

08111468 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8111468:	b580      	push	{r7, lr}
 811146a:	b090      	sub	sp, #64	@ 0x40
 811146c:	af00      	add	r7, sp, #0
 811146e:	60f8      	str	r0, [r7, #12]
 8111470:	60b9      	str	r1, [r7, #8]
 8111472:	607a      	str	r2, [r7, #4]
 8111474:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8111476:	68fb      	ldr	r3, [r7, #12]
 8111478:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 811147a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811147c:	2b00      	cmp	r3, #0
 811147e:	d10b      	bne.n	8111498 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8111480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111484:	f383 8811 	msr	BASEPRI, r3
 8111488:	f3bf 8f6f 	isb	sy
 811148c:	f3bf 8f4f 	dsb	sy
 8111490:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8111492:	bf00      	nop
 8111494:	bf00      	nop
 8111496:	e7fd      	b.n	8111494 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8111498:	68bb      	ldr	r3, [r7, #8]
 811149a:	2b00      	cmp	r3, #0
 811149c:	d103      	bne.n	81114a6 <xQueueGenericSendFromISR+0x3e>
 811149e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81114a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81114a2:	2b00      	cmp	r3, #0
 81114a4:	d101      	bne.n	81114aa <xQueueGenericSendFromISR+0x42>
 81114a6:	2301      	movs	r3, #1
 81114a8:	e000      	b.n	81114ac <xQueueGenericSendFromISR+0x44>
 81114aa:	2300      	movs	r3, #0
 81114ac:	2b00      	cmp	r3, #0
 81114ae:	d10b      	bne.n	81114c8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 81114b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81114b4:	f383 8811 	msr	BASEPRI, r3
 81114b8:	f3bf 8f6f 	isb	sy
 81114bc:	f3bf 8f4f 	dsb	sy
 81114c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 81114c2:	bf00      	nop
 81114c4:	bf00      	nop
 81114c6:	e7fd      	b.n	81114c4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 81114c8:	683b      	ldr	r3, [r7, #0]
 81114ca:	2b02      	cmp	r3, #2
 81114cc:	d103      	bne.n	81114d6 <xQueueGenericSendFromISR+0x6e>
 81114ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81114d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81114d2:	2b01      	cmp	r3, #1
 81114d4:	d101      	bne.n	81114da <xQueueGenericSendFromISR+0x72>
 81114d6:	2301      	movs	r3, #1
 81114d8:	e000      	b.n	81114dc <xQueueGenericSendFromISR+0x74>
 81114da:	2300      	movs	r3, #0
 81114dc:	2b00      	cmp	r3, #0
 81114de:	d10b      	bne.n	81114f8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 81114e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81114e4:	f383 8811 	msr	BASEPRI, r3
 81114e8:	f3bf 8f6f 	isb	sy
 81114ec:	f3bf 8f4f 	dsb	sy
 81114f0:	623b      	str	r3, [r7, #32]
}
 81114f2:	bf00      	nop
 81114f4:	bf00      	nop
 81114f6:	e7fd      	b.n	81114f4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 81114f8:	f7ff fc06 	bl	8110d08 <vPortValidateInterruptPriority>
	__asm volatile
 81114fc:	f3ef 8211 	mrs	r2, BASEPRI
 8111500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111504:	f383 8811 	msr	BASEPRI, r3
 8111508:	f3bf 8f6f 	isb	sy
 811150c:	f3bf 8f4f 	dsb	sy
 8111510:	61fa      	str	r2, [r7, #28]
 8111512:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8111514:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8111516:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8111518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811151a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 811151c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811151e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8111520:	429a      	cmp	r2, r3
 8111522:	d302      	bcc.n	811152a <xQueueGenericSendFromISR+0xc2>
 8111524:	683b      	ldr	r3, [r7, #0]
 8111526:	2b02      	cmp	r3, #2
 8111528:	d12f      	bne.n	811158a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 811152a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811152c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8111530:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8111534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8111536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8111538:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 811153a:	683a      	ldr	r2, [r7, #0]
 811153c:	68b9      	ldr	r1, [r7, #8]
 811153e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8111540:	f000 fb70 	bl	8111c24 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8111544:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8111548:	f1b3 3fff 	cmp.w	r3, #4294967295
 811154c:	d112      	bne.n	8111574 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 811154e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8111550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8111552:	2b00      	cmp	r3, #0
 8111554:	d016      	beq.n	8111584 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8111556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8111558:	3324      	adds	r3, #36	@ 0x24
 811155a:	4618      	mov	r0, r3
 811155c:	f001 fdc8 	bl	81130f0 <xTaskRemoveFromEventList>
 8111560:	4603      	mov	r3, r0
 8111562:	2b00      	cmp	r3, #0
 8111564:	d00e      	beq.n	8111584 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8111566:	687b      	ldr	r3, [r7, #4]
 8111568:	2b00      	cmp	r3, #0
 811156a:	d00b      	beq.n	8111584 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 811156c:	687b      	ldr	r3, [r7, #4]
 811156e:	2201      	movs	r2, #1
 8111570:	601a      	str	r2, [r3, #0]
 8111572:	e007      	b.n	8111584 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8111574:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8111578:	3301      	adds	r3, #1
 811157a:	b2db      	uxtb	r3, r3
 811157c:	b25a      	sxtb	r2, r3
 811157e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8111580:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8111584:	2301      	movs	r3, #1
 8111586:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8111588:	e001      	b.n	811158e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 811158a:	2300      	movs	r3, #0
 811158c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 811158e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8111590:	617b      	str	r3, [r7, #20]
	__asm volatile
 8111592:	697b      	ldr	r3, [r7, #20]
 8111594:	f383 8811 	msr	BASEPRI, r3
}
 8111598:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 811159a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 811159c:	4618      	mov	r0, r3
 811159e:	3740      	adds	r7, #64	@ 0x40
 81115a0:	46bd      	mov	sp, r7
 81115a2:	bd80      	pop	{r7, pc}

081115a4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 81115a4:	b580      	push	{r7, lr}
 81115a6:	b08e      	sub	sp, #56	@ 0x38
 81115a8:	af00      	add	r7, sp, #0
 81115aa:	6078      	str	r0, [r7, #4]
 81115ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 81115ae:	687b      	ldr	r3, [r7, #4]
 81115b0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 81115b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81115b4:	2b00      	cmp	r3, #0
 81115b6:	d10b      	bne.n	81115d0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 81115b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81115bc:	f383 8811 	msr	BASEPRI, r3
 81115c0:	f3bf 8f6f 	isb	sy
 81115c4:	f3bf 8f4f 	dsb	sy
 81115c8:	623b      	str	r3, [r7, #32]
}
 81115ca:	bf00      	nop
 81115cc:	bf00      	nop
 81115ce:	e7fd      	b.n	81115cc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 81115d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81115d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81115d4:	2b00      	cmp	r3, #0
 81115d6:	d00b      	beq.n	81115f0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 81115d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81115dc:	f383 8811 	msr	BASEPRI, r3
 81115e0:	f3bf 8f6f 	isb	sy
 81115e4:	f3bf 8f4f 	dsb	sy
 81115e8:	61fb      	str	r3, [r7, #28]
}
 81115ea:	bf00      	nop
 81115ec:	bf00      	nop
 81115ee:	e7fd      	b.n	81115ec <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 81115f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81115f2:	681b      	ldr	r3, [r3, #0]
 81115f4:	2b00      	cmp	r3, #0
 81115f6:	d103      	bne.n	8111600 <xQueueGiveFromISR+0x5c>
 81115f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81115fa:	689b      	ldr	r3, [r3, #8]
 81115fc:	2b00      	cmp	r3, #0
 81115fe:	d101      	bne.n	8111604 <xQueueGiveFromISR+0x60>
 8111600:	2301      	movs	r3, #1
 8111602:	e000      	b.n	8111606 <xQueueGiveFromISR+0x62>
 8111604:	2300      	movs	r3, #0
 8111606:	2b00      	cmp	r3, #0
 8111608:	d10b      	bne.n	8111622 <xQueueGiveFromISR+0x7e>
	__asm volatile
 811160a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811160e:	f383 8811 	msr	BASEPRI, r3
 8111612:	f3bf 8f6f 	isb	sy
 8111616:	f3bf 8f4f 	dsb	sy
 811161a:	61bb      	str	r3, [r7, #24]
}
 811161c:	bf00      	nop
 811161e:	bf00      	nop
 8111620:	e7fd      	b.n	811161e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8111622:	f7ff fb71 	bl	8110d08 <vPortValidateInterruptPriority>
	__asm volatile
 8111626:	f3ef 8211 	mrs	r2, BASEPRI
 811162a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811162e:	f383 8811 	msr	BASEPRI, r3
 8111632:	f3bf 8f6f 	isb	sy
 8111636:	f3bf 8f4f 	dsb	sy
 811163a:	617a      	str	r2, [r7, #20]
 811163c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 811163e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8111640:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8111642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8111646:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8111648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811164a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 811164c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 811164e:	429a      	cmp	r2, r3
 8111650:	d22b      	bcs.n	81116aa <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8111652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111654:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8111658:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 811165c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811165e:	1c5a      	adds	r2, r3, #1
 8111660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111662:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8111664:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8111668:	f1b3 3fff 	cmp.w	r3, #4294967295
 811166c:	d112      	bne.n	8111694 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 811166e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8111672:	2b00      	cmp	r3, #0
 8111674:	d016      	beq.n	81116a4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8111676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111678:	3324      	adds	r3, #36	@ 0x24
 811167a:	4618      	mov	r0, r3
 811167c:	f001 fd38 	bl	81130f0 <xTaskRemoveFromEventList>
 8111680:	4603      	mov	r3, r0
 8111682:	2b00      	cmp	r3, #0
 8111684:	d00e      	beq.n	81116a4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8111686:	683b      	ldr	r3, [r7, #0]
 8111688:	2b00      	cmp	r3, #0
 811168a:	d00b      	beq.n	81116a4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 811168c:	683b      	ldr	r3, [r7, #0]
 811168e:	2201      	movs	r2, #1
 8111690:	601a      	str	r2, [r3, #0]
 8111692:	e007      	b.n	81116a4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8111694:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8111698:	3301      	adds	r3, #1
 811169a:	b2db      	uxtb	r3, r3
 811169c:	b25a      	sxtb	r2, r3
 811169e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81116a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 81116a4:	2301      	movs	r3, #1
 81116a6:	637b      	str	r3, [r7, #52]	@ 0x34
 81116a8:	e001      	b.n	81116ae <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 81116aa:	2300      	movs	r3, #0
 81116ac:	637b      	str	r3, [r7, #52]	@ 0x34
 81116ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81116b0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 81116b2:	68fb      	ldr	r3, [r7, #12]
 81116b4:	f383 8811 	msr	BASEPRI, r3
}
 81116b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 81116ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 81116bc:	4618      	mov	r0, r3
 81116be:	3738      	adds	r7, #56	@ 0x38
 81116c0:	46bd      	mov	sp, r7
 81116c2:	bd80      	pop	{r7, pc}

081116c4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 81116c4:	b580      	push	{r7, lr}
 81116c6:	b08c      	sub	sp, #48	@ 0x30
 81116c8:	af00      	add	r7, sp, #0
 81116ca:	60f8      	str	r0, [r7, #12]
 81116cc:	60b9      	str	r1, [r7, #8]
 81116ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 81116d0:	2300      	movs	r3, #0
 81116d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 81116d4:	68fb      	ldr	r3, [r7, #12]
 81116d6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 81116d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81116da:	2b00      	cmp	r3, #0
 81116dc:	d10b      	bne.n	81116f6 <xQueueReceive+0x32>
	__asm volatile
 81116de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81116e2:	f383 8811 	msr	BASEPRI, r3
 81116e6:	f3bf 8f6f 	isb	sy
 81116ea:	f3bf 8f4f 	dsb	sy
 81116ee:	623b      	str	r3, [r7, #32]
}
 81116f0:	bf00      	nop
 81116f2:	bf00      	nop
 81116f4:	e7fd      	b.n	81116f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 81116f6:	68bb      	ldr	r3, [r7, #8]
 81116f8:	2b00      	cmp	r3, #0
 81116fa:	d103      	bne.n	8111704 <xQueueReceive+0x40>
 81116fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81116fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8111700:	2b00      	cmp	r3, #0
 8111702:	d101      	bne.n	8111708 <xQueueReceive+0x44>
 8111704:	2301      	movs	r3, #1
 8111706:	e000      	b.n	811170a <xQueueReceive+0x46>
 8111708:	2300      	movs	r3, #0
 811170a:	2b00      	cmp	r3, #0
 811170c:	d10b      	bne.n	8111726 <xQueueReceive+0x62>
	__asm volatile
 811170e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111712:	f383 8811 	msr	BASEPRI, r3
 8111716:	f3bf 8f6f 	isb	sy
 811171a:	f3bf 8f4f 	dsb	sy
 811171e:	61fb      	str	r3, [r7, #28]
}
 8111720:	bf00      	nop
 8111722:	bf00      	nop
 8111724:	e7fd      	b.n	8111722 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8111726:	f001 fee1 	bl	81134ec <xTaskGetSchedulerState>
 811172a:	4603      	mov	r3, r0
 811172c:	2b00      	cmp	r3, #0
 811172e:	d102      	bne.n	8111736 <xQueueReceive+0x72>
 8111730:	687b      	ldr	r3, [r7, #4]
 8111732:	2b00      	cmp	r3, #0
 8111734:	d101      	bne.n	811173a <xQueueReceive+0x76>
 8111736:	2301      	movs	r3, #1
 8111738:	e000      	b.n	811173c <xQueueReceive+0x78>
 811173a:	2300      	movs	r3, #0
 811173c:	2b00      	cmp	r3, #0
 811173e:	d10b      	bne.n	8111758 <xQueueReceive+0x94>
	__asm volatile
 8111740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111744:	f383 8811 	msr	BASEPRI, r3
 8111748:	f3bf 8f6f 	isb	sy
 811174c:	f3bf 8f4f 	dsb	sy
 8111750:	61bb      	str	r3, [r7, #24]
}
 8111752:	bf00      	nop
 8111754:	bf00      	nop
 8111756:	e7fd      	b.n	8111754 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8111758:	f7ff f9f6 	bl	8110b48 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 811175c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811175e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8111760:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8111762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8111764:	2b00      	cmp	r3, #0
 8111766:	d01f      	beq.n	81117a8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8111768:	68b9      	ldr	r1, [r7, #8]
 811176a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 811176c:	f000 fac4 	bl	8111cf8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8111770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8111772:	1e5a      	subs	r2, r3, #1
 8111774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111776:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8111778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811177a:	691b      	ldr	r3, [r3, #16]
 811177c:	2b00      	cmp	r3, #0
 811177e:	d00f      	beq.n	81117a0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8111780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111782:	3310      	adds	r3, #16
 8111784:	4618      	mov	r0, r3
 8111786:	f001 fcb3 	bl	81130f0 <xTaskRemoveFromEventList>
 811178a:	4603      	mov	r3, r0
 811178c:	2b00      	cmp	r3, #0
 811178e:	d007      	beq.n	81117a0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8111790:	4b3c      	ldr	r3, [pc, #240]	@ (8111884 <xQueueReceive+0x1c0>)
 8111792:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8111796:	601a      	str	r2, [r3, #0]
 8111798:	f3bf 8f4f 	dsb	sy
 811179c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 81117a0:	f7ff fa04 	bl	8110bac <vPortExitCritical>
				return pdPASS;
 81117a4:	2301      	movs	r3, #1
 81117a6:	e069      	b.n	811187c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 81117a8:	687b      	ldr	r3, [r7, #4]
 81117aa:	2b00      	cmp	r3, #0
 81117ac:	d103      	bne.n	81117b6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 81117ae:	f7ff f9fd 	bl	8110bac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 81117b2:	2300      	movs	r3, #0
 81117b4:	e062      	b.n	811187c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 81117b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81117b8:	2b00      	cmp	r3, #0
 81117ba:	d106      	bne.n	81117ca <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 81117bc:	f107 0310 	add.w	r3, r7, #16
 81117c0:	4618      	mov	r0, r3
 81117c2:	f001 fd21 	bl	8113208 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 81117c6:	2301      	movs	r3, #1
 81117c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 81117ca:	f7ff f9ef 	bl	8110bac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 81117ce:	f001 fa4f 	bl	8112c70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 81117d2:	f7ff f9b9 	bl	8110b48 <vPortEnterCritical>
 81117d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81117d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 81117dc:	b25b      	sxtb	r3, r3
 81117de:	f1b3 3fff 	cmp.w	r3, #4294967295
 81117e2:	d103      	bne.n	81117ec <xQueueReceive+0x128>
 81117e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81117e6:	2200      	movs	r2, #0
 81117e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 81117ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81117ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 81117f2:	b25b      	sxtb	r3, r3
 81117f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81117f8:	d103      	bne.n	8111802 <xQueueReceive+0x13e>
 81117fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81117fc:	2200      	movs	r2, #0
 81117fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8111802:	f7ff f9d3 	bl	8110bac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8111806:	1d3a      	adds	r2, r7, #4
 8111808:	f107 0310 	add.w	r3, r7, #16
 811180c:	4611      	mov	r1, r2
 811180e:	4618      	mov	r0, r3
 8111810:	f001 fd10 	bl	8113234 <xTaskCheckForTimeOut>
 8111814:	4603      	mov	r3, r0
 8111816:	2b00      	cmp	r3, #0
 8111818:	d123      	bne.n	8111862 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 811181a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 811181c:	f000 fae4 	bl	8111de8 <prvIsQueueEmpty>
 8111820:	4603      	mov	r3, r0
 8111822:	2b00      	cmp	r3, #0
 8111824:	d017      	beq.n	8111856 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8111826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111828:	3324      	adds	r3, #36	@ 0x24
 811182a:	687a      	ldr	r2, [r7, #4]
 811182c:	4611      	mov	r1, r2
 811182e:	4618      	mov	r0, r3
 8111830:	f001 fc0c 	bl	811304c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8111834:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8111836:	f000 fa85 	bl	8111d44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 811183a:	f001 fa27 	bl	8112c8c <xTaskResumeAll>
 811183e:	4603      	mov	r3, r0
 8111840:	2b00      	cmp	r3, #0
 8111842:	d189      	bne.n	8111758 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8111844:	4b0f      	ldr	r3, [pc, #60]	@ (8111884 <xQueueReceive+0x1c0>)
 8111846:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 811184a:	601a      	str	r2, [r3, #0]
 811184c:	f3bf 8f4f 	dsb	sy
 8111850:	f3bf 8f6f 	isb	sy
 8111854:	e780      	b.n	8111758 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8111856:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8111858:	f000 fa74 	bl	8111d44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 811185c:	f001 fa16 	bl	8112c8c <xTaskResumeAll>
 8111860:	e77a      	b.n	8111758 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8111862:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8111864:	f000 fa6e 	bl	8111d44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8111868:	f001 fa10 	bl	8112c8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 811186c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 811186e:	f000 fabb 	bl	8111de8 <prvIsQueueEmpty>
 8111872:	4603      	mov	r3, r0
 8111874:	2b00      	cmp	r3, #0
 8111876:	f43f af6f 	beq.w	8111758 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 811187a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 811187c:	4618      	mov	r0, r3
 811187e:	3730      	adds	r7, #48	@ 0x30
 8111880:	46bd      	mov	sp, r7
 8111882:	bd80      	pop	{r7, pc}
 8111884:	e000ed04 	.word	0xe000ed04

08111888 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8111888:	b580      	push	{r7, lr}
 811188a:	b08e      	sub	sp, #56	@ 0x38
 811188c:	af00      	add	r7, sp, #0
 811188e:	6078      	str	r0, [r7, #4]
 8111890:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8111892:	2300      	movs	r3, #0
 8111894:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8111896:	687b      	ldr	r3, [r7, #4]
 8111898:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 811189a:	2300      	movs	r3, #0
 811189c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 811189e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81118a0:	2b00      	cmp	r3, #0
 81118a2:	d10b      	bne.n	81118bc <xQueueSemaphoreTake+0x34>
	__asm volatile
 81118a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81118a8:	f383 8811 	msr	BASEPRI, r3
 81118ac:	f3bf 8f6f 	isb	sy
 81118b0:	f3bf 8f4f 	dsb	sy
 81118b4:	623b      	str	r3, [r7, #32]
}
 81118b6:	bf00      	nop
 81118b8:	bf00      	nop
 81118ba:	e7fd      	b.n	81118b8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 81118bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81118be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81118c0:	2b00      	cmp	r3, #0
 81118c2:	d00b      	beq.n	81118dc <xQueueSemaphoreTake+0x54>
	__asm volatile
 81118c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81118c8:	f383 8811 	msr	BASEPRI, r3
 81118cc:	f3bf 8f6f 	isb	sy
 81118d0:	f3bf 8f4f 	dsb	sy
 81118d4:	61fb      	str	r3, [r7, #28]
}
 81118d6:	bf00      	nop
 81118d8:	bf00      	nop
 81118da:	e7fd      	b.n	81118d8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 81118dc:	f001 fe06 	bl	81134ec <xTaskGetSchedulerState>
 81118e0:	4603      	mov	r3, r0
 81118e2:	2b00      	cmp	r3, #0
 81118e4:	d102      	bne.n	81118ec <xQueueSemaphoreTake+0x64>
 81118e6:	683b      	ldr	r3, [r7, #0]
 81118e8:	2b00      	cmp	r3, #0
 81118ea:	d101      	bne.n	81118f0 <xQueueSemaphoreTake+0x68>
 81118ec:	2301      	movs	r3, #1
 81118ee:	e000      	b.n	81118f2 <xQueueSemaphoreTake+0x6a>
 81118f0:	2300      	movs	r3, #0
 81118f2:	2b00      	cmp	r3, #0
 81118f4:	d10b      	bne.n	811190e <xQueueSemaphoreTake+0x86>
	__asm volatile
 81118f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81118fa:	f383 8811 	msr	BASEPRI, r3
 81118fe:	f3bf 8f6f 	isb	sy
 8111902:	f3bf 8f4f 	dsb	sy
 8111906:	61bb      	str	r3, [r7, #24]
}
 8111908:	bf00      	nop
 811190a:	bf00      	nop
 811190c:	e7fd      	b.n	811190a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 811190e:	f7ff f91b 	bl	8110b48 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8111912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8111914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8111916:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8111918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811191a:	2b00      	cmp	r3, #0
 811191c:	d024      	beq.n	8111968 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 811191e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111920:	1e5a      	subs	r2, r3, #1
 8111922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8111924:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8111926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8111928:	681b      	ldr	r3, [r3, #0]
 811192a:	2b00      	cmp	r3, #0
 811192c:	d104      	bne.n	8111938 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 811192e:	f001 ff57 	bl	81137e0 <pvTaskIncrementMutexHeldCount>
 8111932:	4602      	mov	r2, r0
 8111934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8111936:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8111938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811193a:	691b      	ldr	r3, [r3, #16]
 811193c:	2b00      	cmp	r3, #0
 811193e:	d00f      	beq.n	8111960 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8111940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8111942:	3310      	adds	r3, #16
 8111944:	4618      	mov	r0, r3
 8111946:	f001 fbd3 	bl	81130f0 <xTaskRemoveFromEventList>
 811194a:	4603      	mov	r3, r0
 811194c:	2b00      	cmp	r3, #0
 811194e:	d007      	beq.n	8111960 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8111950:	4b54      	ldr	r3, [pc, #336]	@ (8111aa4 <xQueueSemaphoreTake+0x21c>)
 8111952:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8111956:	601a      	str	r2, [r3, #0]
 8111958:	f3bf 8f4f 	dsb	sy
 811195c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8111960:	f7ff f924 	bl	8110bac <vPortExitCritical>
				return pdPASS;
 8111964:	2301      	movs	r3, #1
 8111966:	e098      	b.n	8111a9a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8111968:	683b      	ldr	r3, [r7, #0]
 811196a:	2b00      	cmp	r3, #0
 811196c:	d112      	bne.n	8111994 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 811196e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111970:	2b00      	cmp	r3, #0
 8111972:	d00b      	beq.n	811198c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8111974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111978:	f383 8811 	msr	BASEPRI, r3
 811197c:	f3bf 8f6f 	isb	sy
 8111980:	f3bf 8f4f 	dsb	sy
 8111984:	617b      	str	r3, [r7, #20]
}
 8111986:	bf00      	nop
 8111988:	bf00      	nop
 811198a:	e7fd      	b.n	8111988 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 811198c:	f7ff f90e 	bl	8110bac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8111990:	2300      	movs	r3, #0
 8111992:	e082      	b.n	8111a9a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8111994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8111996:	2b00      	cmp	r3, #0
 8111998:	d106      	bne.n	81119a8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 811199a:	f107 030c 	add.w	r3, r7, #12
 811199e:	4618      	mov	r0, r3
 81119a0:	f001 fc32 	bl	8113208 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 81119a4:	2301      	movs	r3, #1
 81119a6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 81119a8:	f7ff f900 	bl	8110bac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 81119ac:	f001 f960 	bl	8112c70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 81119b0:	f7ff f8ca 	bl	8110b48 <vPortEnterCritical>
 81119b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81119b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 81119ba:	b25b      	sxtb	r3, r3
 81119bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 81119c0:	d103      	bne.n	81119ca <xQueueSemaphoreTake+0x142>
 81119c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81119c4:	2200      	movs	r2, #0
 81119c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 81119ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81119cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 81119d0:	b25b      	sxtb	r3, r3
 81119d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81119d6:	d103      	bne.n	81119e0 <xQueueSemaphoreTake+0x158>
 81119d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81119da:	2200      	movs	r2, #0
 81119dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81119e0:	f7ff f8e4 	bl	8110bac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 81119e4:	463a      	mov	r2, r7
 81119e6:	f107 030c 	add.w	r3, r7, #12
 81119ea:	4611      	mov	r1, r2
 81119ec:	4618      	mov	r0, r3
 81119ee:	f001 fc21 	bl	8113234 <xTaskCheckForTimeOut>
 81119f2:	4603      	mov	r3, r0
 81119f4:	2b00      	cmp	r3, #0
 81119f6:	d132      	bne.n	8111a5e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 81119f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 81119fa:	f000 f9f5 	bl	8111de8 <prvIsQueueEmpty>
 81119fe:	4603      	mov	r3, r0
 8111a00:	2b00      	cmp	r3, #0
 8111a02:	d026      	beq.n	8111a52 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8111a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8111a06:	681b      	ldr	r3, [r3, #0]
 8111a08:	2b00      	cmp	r3, #0
 8111a0a:	d109      	bne.n	8111a20 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8111a0c:	f7ff f89c 	bl	8110b48 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8111a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8111a12:	689b      	ldr	r3, [r3, #8]
 8111a14:	4618      	mov	r0, r3
 8111a16:	f001 fd87 	bl	8113528 <xTaskPriorityInherit>
 8111a1a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8111a1c:	f7ff f8c6 	bl	8110bac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8111a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8111a22:	3324      	adds	r3, #36	@ 0x24
 8111a24:	683a      	ldr	r2, [r7, #0]
 8111a26:	4611      	mov	r1, r2
 8111a28:	4618      	mov	r0, r3
 8111a2a:	f001 fb0f 	bl	811304c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8111a2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8111a30:	f000 f988 	bl	8111d44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8111a34:	f001 f92a 	bl	8112c8c <xTaskResumeAll>
 8111a38:	4603      	mov	r3, r0
 8111a3a:	2b00      	cmp	r3, #0
 8111a3c:	f47f af67 	bne.w	811190e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8111a40:	4b18      	ldr	r3, [pc, #96]	@ (8111aa4 <xQueueSemaphoreTake+0x21c>)
 8111a42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8111a46:	601a      	str	r2, [r3, #0]
 8111a48:	f3bf 8f4f 	dsb	sy
 8111a4c:	f3bf 8f6f 	isb	sy
 8111a50:	e75d      	b.n	811190e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8111a52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8111a54:	f000 f976 	bl	8111d44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8111a58:	f001 f918 	bl	8112c8c <xTaskResumeAll>
 8111a5c:	e757      	b.n	811190e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8111a5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8111a60:	f000 f970 	bl	8111d44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8111a64:	f001 f912 	bl	8112c8c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8111a68:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8111a6a:	f000 f9bd 	bl	8111de8 <prvIsQueueEmpty>
 8111a6e:	4603      	mov	r3, r0
 8111a70:	2b00      	cmp	r3, #0
 8111a72:	f43f af4c 	beq.w	811190e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8111a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111a78:	2b00      	cmp	r3, #0
 8111a7a:	d00d      	beq.n	8111a98 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8111a7c:	f7ff f864 	bl	8110b48 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8111a80:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8111a82:	f000 f8b7 	bl	8111bf4 <prvGetDisinheritPriorityAfterTimeout>
 8111a86:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8111a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8111a8a:	689b      	ldr	r3, [r3, #8]
 8111a8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8111a8e:	4618      	mov	r0, r3
 8111a90:	f001 fe22 	bl	81136d8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8111a94:	f7ff f88a 	bl	8110bac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8111a98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8111a9a:	4618      	mov	r0, r3
 8111a9c:	3738      	adds	r7, #56	@ 0x38
 8111a9e:	46bd      	mov	sp, r7
 8111aa0:	bd80      	pop	{r7, pc}
 8111aa2:	bf00      	nop
 8111aa4:	e000ed04 	.word	0xe000ed04

08111aa8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8111aa8:	b580      	push	{r7, lr}
 8111aaa:	b08e      	sub	sp, #56	@ 0x38
 8111aac:	af00      	add	r7, sp, #0
 8111aae:	60f8      	str	r0, [r7, #12]
 8111ab0:	60b9      	str	r1, [r7, #8]
 8111ab2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8111ab4:	68fb      	ldr	r3, [r7, #12]
 8111ab6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8111ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111aba:	2b00      	cmp	r3, #0
 8111abc:	d10b      	bne.n	8111ad6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8111abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111ac2:	f383 8811 	msr	BASEPRI, r3
 8111ac6:	f3bf 8f6f 	isb	sy
 8111aca:	f3bf 8f4f 	dsb	sy
 8111ace:	623b      	str	r3, [r7, #32]
}
 8111ad0:	bf00      	nop
 8111ad2:	bf00      	nop
 8111ad4:	e7fd      	b.n	8111ad2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8111ad6:	68bb      	ldr	r3, [r7, #8]
 8111ad8:	2b00      	cmp	r3, #0
 8111ada:	d103      	bne.n	8111ae4 <xQueueReceiveFromISR+0x3c>
 8111adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8111ae0:	2b00      	cmp	r3, #0
 8111ae2:	d101      	bne.n	8111ae8 <xQueueReceiveFromISR+0x40>
 8111ae4:	2301      	movs	r3, #1
 8111ae6:	e000      	b.n	8111aea <xQueueReceiveFromISR+0x42>
 8111ae8:	2300      	movs	r3, #0
 8111aea:	2b00      	cmp	r3, #0
 8111aec:	d10b      	bne.n	8111b06 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8111aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111af2:	f383 8811 	msr	BASEPRI, r3
 8111af6:	f3bf 8f6f 	isb	sy
 8111afa:	f3bf 8f4f 	dsb	sy
 8111afe:	61fb      	str	r3, [r7, #28]
}
 8111b00:	bf00      	nop
 8111b02:	bf00      	nop
 8111b04:	e7fd      	b.n	8111b02 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8111b06:	f7ff f8ff 	bl	8110d08 <vPortValidateInterruptPriority>
	__asm volatile
 8111b0a:	f3ef 8211 	mrs	r2, BASEPRI
 8111b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111b12:	f383 8811 	msr	BASEPRI, r3
 8111b16:	f3bf 8f6f 	isb	sy
 8111b1a:	f3bf 8f4f 	dsb	sy
 8111b1e:	61ba      	str	r2, [r7, #24]
 8111b20:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8111b22:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8111b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8111b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8111b2a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8111b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111b2e:	2b00      	cmp	r3, #0
 8111b30:	d02f      	beq.n	8111b92 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8111b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111b34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8111b38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8111b3c:	68b9      	ldr	r1, [r7, #8]
 8111b3e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8111b40:	f000 f8da 	bl	8111cf8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8111b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8111b46:	1e5a      	subs	r2, r3, #1
 8111b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111b4a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8111b4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8111b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8111b54:	d112      	bne.n	8111b7c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8111b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111b58:	691b      	ldr	r3, [r3, #16]
 8111b5a:	2b00      	cmp	r3, #0
 8111b5c:	d016      	beq.n	8111b8c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8111b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111b60:	3310      	adds	r3, #16
 8111b62:	4618      	mov	r0, r3
 8111b64:	f001 fac4 	bl	81130f0 <xTaskRemoveFromEventList>
 8111b68:	4603      	mov	r3, r0
 8111b6a:	2b00      	cmp	r3, #0
 8111b6c:	d00e      	beq.n	8111b8c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8111b6e:	687b      	ldr	r3, [r7, #4]
 8111b70:	2b00      	cmp	r3, #0
 8111b72:	d00b      	beq.n	8111b8c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8111b74:	687b      	ldr	r3, [r7, #4]
 8111b76:	2201      	movs	r2, #1
 8111b78:	601a      	str	r2, [r3, #0]
 8111b7a:	e007      	b.n	8111b8c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8111b7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8111b80:	3301      	adds	r3, #1
 8111b82:	b2db      	uxtb	r3, r3
 8111b84:	b25a      	sxtb	r2, r3
 8111b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8111b88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8111b8c:	2301      	movs	r3, #1
 8111b8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8111b90:	e001      	b.n	8111b96 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8111b92:	2300      	movs	r3, #0
 8111b94:	637b      	str	r3, [r7, #52]	@ 0x34
 8111b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8111b98:	613b      	str	r3, [r7, #16]
	__asm volatile
 8111b9a:	693b      	ldr	r3, [r7, #16]
 8111b9c:	f383 8811 	msr	BASEPRI, r3
}
 8111ba0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8111ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8111ba4:	4618      	mov	r0, r3
 8111ba6:	3738      	adds	r7, #56	@ 0x38
 8111ba8:	46bd      	mov	sp, r7
 8111baa:	bd80      	pop	{r7, pc}

08111bac <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8111bac:	b580      	push	{r7, lr}
 8111bae:	b084      	sub	sp, #16
 8111bb0:	af00      	add	r7, sp, #0
 8111bb2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8111bb4:	687b      	ldr	r3, [r7, #4]
 8111bb6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8111bb8:	68fb      	ldr	r3, [r7, #12]
 8111bba:	2b00      	cmp	r3, #0
 8111bbc:	d10b      	bne.n	8111bd6 <vQueueDelete+0x2a>
	__asm volatile
 8111bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111bc2:	f383 8811 	msr	BASEPRI, r3
 8111bc6:	f3bf 8f6f 	isb	sy
 8111bca:	f3bf 8f4f 	dsb	sy
 8111bce:	60bb      	str	r3, [r7, #8]
}
 8111bd0:	bf00      	nop
 8111bd2:	bf00      	nop
 8111bd4:	e7fd      	b.n	8111bd2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8111bd6:	68f8      	ldr	r0, [r7, #12]
 8111bd8:	f000 f95e 	bl	8111e98 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8111bdc:	68fb      	ldr	r3, [r7, #12]
 8111bde:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8111be2:	2b00      	cmp	r3, #0
 8111be4:	d102      	bne.n	8111bec <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8111be6:	68f8      	ldr	r0, [r7, #12]
 8111be8:	f7fe fca6 	bl	8110538 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8111bec:	bf00      	nop
 8111bee:	3710      	adds	r7, #16
 8111bf0:	46bd      	mov	sp, r7
 8111bf2:	bd80      	pop	{r7, pc}

08111bf4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8111bf4:	b480      	push	{r7}
 8111bf6:	b085      	sub	sp, #20
 8111bf8:	af00      	add	r7, sp, #0
 8111bfa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8111bfc:	687b      	ldr	r3, [r7, #4]
 8111bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8111c00:	2b00      	cmp	r3, #0
 8111c02:	d006      	beq.n	8111c12 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8111c04:	687b      	ldr	r3, [r7, #4]
 8111c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8111c08:	681b      	ldr	r3, [r3, #0]
 8111c0a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8111c0e:	60fb      	str	r3, [r7, #12]
 8111c10:	e001      	b.n	8111c16 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8111c12:	2300      	movs	r3, #0
 8111c14:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8111c16:	68fb      	ldr	r3, [r7, #12]
	}
 8111c18:	4618      	mov	r0, r3
 8111c1a:	3714      	adds	r7, #20
 8111c1c:	46bd      	mov	sp, r7
 8111c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111c22:	4770      	bx	lr

08111c24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8111c24:	b580      	push	{r7, lr}
 8111c26:	b086      	sub	sp, #24
 8111c28:	af00      	add	r7, sp, #0
 8111c2a:	60f8      	str	r0, [r7, #12]
 8111c2c:	60b9      	str	r1, [r7, #8]
 8111c2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8111c30:	2300      	movs	r3, #0
 8111c32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8111c34:	68fb      	ldr	r3, [r7, #12]
 8111c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8111c38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8111c3a:	68fb      	ldr	r3, [r7, #12]
 8111c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8111c3e:	2b00      	cmp	r3, #0
 8111c40:	d10d      	bne.n	8111c5e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8111c42:	68fb      	ldr	r3, [r7, #12]
 8111c44:	681b      	ldr	r3, [r3, #0]
 8111c46:	2b00      	cmp	r3, #0
 8111c48:	d14d      	bne.n	8111ce6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8111c4a:	68fb      	ldr	r3, [r7, #12]
 8111c4c:	689b      	ldr	r3, [r3, #8]
 8111c4e:	4618      	mov	r0, r3
 8111c50:	f001 fcd2 	bl	81135f8 <xTaskPriorityDisinherit>
 8111c54:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8111c56:	68fb      	ldr	r3, [r7, #12]
 8111c58:	2200      	movs	r2, #0
 8111c5a:	609a      	str	r2, [r3, #8]
 8111c5c:	e043      	b.n	8111ce6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8111c5e:	687b      	ldr	r3, [r7, #4]
 8111c60:	2b00      	cmp	r3, #0
 8111c62:	d119      	bne.n	8111c98 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8111c64:	68fb      	ldr	r3, [r7, #12]
 8111c66:	6858      	ldr	r0, [r3, #4]
 8111c68:	68fb      	ldr	r3, [r7, #12]
 8111c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8111c6c:	461a      	mov	r2, r3
 8111c6e:	68b9      	ldr	r1, [r7, #8]
 8111c70:	f010 fded 	bl	812284e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8111c74:	68fb      	ldr	r3, [r7, #12]
 8111c76:	685a      	ldr	r2, [r3, #4]
 8111c78:	68fb      	ldr	r3, [r7, #12]
 8111c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8111c7c:	441a      	add	r2, r3
 8111c7e:	68fb      	ldr	r3, [r7, #12]
 8111c80:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8111c82:	68fb      	ldr	r3, [r7, #12]
 8111c84:	685a      	ldr	r2, [r3, #4]
 8111c86:	68fb      	ldr	r3, [r7, #12]
 8111c88:	689b      	ldr	r3, [r3, #8]
 8111c8a:	429a      	cmp	r2, r3
 8111c8c:	d32b      	bcc.n	8111ce6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8111c8e:	68fb      	ldr	r3, [r7, #12]
 8111c90:	681a      	ldr	r2, [r3, #0]
 8111c92:	68fb      	ldr	r3, [r7, #12]
 8111c94:	605a      	str	r2, [r3, #4]
 8111c96:	e026      	b.n	8111ce6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8111c98:	68fb      	ldr	r3, [r7, #12]
 8111c9a:	68d8      	ldr	r0, [r3, #12]
 8111c9c:	68fb      	ldr	r3, [r7, #12]
 8111c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8111ca0:	461a      	mov	r2, r3
 8111ca2:	68b9      	ldr	r1, [r7, #8]
 8111ca4:	f010 fdd3 	bl	812284e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8111ca8:	68fb      	ldr	r3, [r7, #12]
 8111caa:	68da      	ldr	r2, [r3, #12]
 8111cac:	68fb      	ldr	r3, [r7, #12]
 8111cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8111cb0:	425b      	negs	r3, r3
 8111cb2:	441a      	add	r2, r3
 8111cb4:	68fb      	ldr	r3, [r7, #12]
 8111cb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8111cb8:	68fb      	ldr	r3, [r7, #12]
 8111cba:	68da      	ldr	r2, [r3, #12]
 8111cbc:	68fb      	ldr	r3, [r7, #12]
 8111cbe:	681b      	ldr	r3, [r3, #0]
 8111cc0:	429a      	cmp	r2, r3
 8111cc2:	d207      	bcs.n	8111cd4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8111cc4:	68fb      	ldr	r3, [r7, #12]
 8111cc6:	689a      	ldr	r2, [r3, #8]
 8111cc8:	68fb      	ldr	r3, [r7, #12]
 8111cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8111ccc:	425b      	negs	r3, r3
 8111cce:	441a      	add	r2, r3
 8111cd0:	68fb      	ldr	r3, [r7, #12]
 8111cd2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8111cd4:	687b      	ldr	r3, [r7, #4]
 8111cd6:	2b02      	cmp	r3, #2
 8111cd8:	d105      	bne.n	8111ce6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8111cda:	693b      	ldr	r3, [r7, #16]
 8111cdc:	2b00      	cmp	r3, #0
 8111cde:	d002      	beq.n	8111ce6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8111ce0:	693b      	ldr	r3, [r7, #16]
 8111ce2:	3b01      	subs	r3, #1
 8111ce4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8111ce6:	693b      	ldr	r3, [r7, #16]
 8111ce8:	1c5a      	adds	r2, r3, #1
 8111cea:	68fb      	ldr	r3, [r7, #12]
 8111cec:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8111cee:	697b      	ldr	r3, [r7, #20]
}
 8111cf0:	4618      	mov	r0, r3
 8111cf2:	3718      	adds	r7, #24
 8111cf4:	46bd      	mov	sp, r7
 8111cf6:	bd80      	pop	{r7, pc}

08111cf8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8111cf8:	b580      	push	{r7, lr}
 8111cfa:	b082      	sub	sp, #8
 8111cfc:	af00      	add	r7, sp, #0
 8111cfe:	6078      	str	r0, [r7, #4]
 8111d00:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8111d02:	687b      	ldr	r3, [r7, #4]
 8111d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8111d06:	2b00      	cmp	r3, #0
 8111d08:	d018      	beq.n	8111d3c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8111d0a:	687b      	ldr	r3, [r7, #4]
 8111d0c:	68da      	ldr	r2, [r3, #12]
 8111d0e:	687b      	ldr	r3, [r7, #4]
 8111d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8111d12:	441a      	add	r2, r3
 8111d14:	687b      	ldr	r3, [r7, #4]
 8111d16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8111d18:	687b      	ldr	r3, [r7, #4]
 8111d1a:	68da      	ldr	r2, [r3, #12]
 8111d1c:	687b      	ldr	r3, [r7, #4]
 8111d1e:	689b      	ldr	r3, [r3, #8]
 8111d20:	429a      	cmp	r2, r3
 8111d22:	d303      	bcc.n	8111d2c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8111d24:	687b      	ldr	r3, [r7, #4]
 8111d26:	681a      	ldr	r2, [r3, #0]
 8111d28:	687b      	ldr	r3, [r7, #4]
 8111d2a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8111d2c:	687b      	ldr	r3, [r7, #4]
 8111d2e:	68d9      	ldr	r1, [r3, #12]
 8111d30:	687b      	ldr	r3, [r7, #4]
 8111d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8111d34:	461a      	mov	r2, r3
 8111d36:	6838      	ldr	r0, [r7, #0]
 8111d38:	f010 fd89 	bl	812284e <memcpy>
	}
}
 8111d3c:	bf00      	nop
 8111d3e:	3708      	adds	r7, #8
 8111d40:	46bd      	mov	sp, r7
 8111d42:	bd80      	pop	{r7, pc}

08111d44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8111d44:	b580      	push	{r7, lr}
 8111d46:	b084      	sub	sp, #16
 8111d48:	af00      	add	r7, sp, #0
 8111d4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8111d4c:	f7fe fefc 	bl	8110b48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8111d50:	687b      	ldr	r3, [r7, #4]
 8111d52:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8111d56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8111d58:	e011      	b.n	8111d7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8111d5a:	687b      	ldr	r3, [r7, #4]
 8111d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8111d5e:	2b00      	cmp	r3, #0
 8111d60:	d012      	beq.n	8111d88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8111d62:	687b      	ldr	r3, [r7, #4]
 8111d64:	3324      	adds	r3, #36	@ 0x24
 8111d66:	4618      	mov	r0, r3
 8111d68:	f001 f9c2 	bl	81130f0 <xTaskRemoveFromEventList>
 8111d6c:	4603      	mov	r3, r0
 8111d6e:	2b00      	cmp	r3, #0
 8111d70:	d001      	beq.n	8111d76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8111d72:	f001 fac3 	bl	81132fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8111d76:	7bfb      	ldrb	r3, [r7, #15]
 8111d78:	3b01      	subs	r3, #1
 8111d7a:	b2db      	uxtb	r3, r3
 8111d7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8111d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8111d82:	2b00      	cmp	r3, #0
 8111d84:	dce9      	bgt.n	8111d5a <prvUnlockQueue+0x16>
 8111d86:	e000      	b.n	8111d8a <prvUnlockQueue+0x46>
					break;
 8111d88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8111d8a:	687b      	ldr	r3, [r7, #4]
 8111d8c:	22ff      	movs	r2, #255	@ 0xff
 8111d8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8111d92:	f7fe ff0b 	bl	8110bac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8111d96:	f7fe fed7 	bl	8110b48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8111d9a:	687b      	ldr	r3, [r7, #4]
 8111d9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8111da0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8111da2:	e011      	b.n	8111dc8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8111da4:	687b      	ldr	r3, [r7, #4]
 8111da6:	691b      	ldr	r3, [r3, #16]
 8111da8:	2b00      	cmp	r3, #0
 8111daa:	d012      	beq.n	8111dd2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8111dac:	687b      	ldr	r3, [r7, #4]
 8111dae:	3310      	adds	r3, #16
 8111db0:	4618      	mov	r0, r3
 8111db2:	f001 f99d 	bl	81130f0 <xTaskRemoveFromEventList>
 8111db6:	4603      	mov	r3, r0
 8111db8:	2b00      	cmp	r3, #0
 8111dba:	d001      	beq.n	8111dc0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8111dbc:	f001 fa9e 	bl	81132fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8111dc0:	7bbb      	ldrb	r3, [r7, #14]
 8111dc2:	3b01      	subs	r3, #1
 8111dc4:	b2db      	uxtb	r3, r3
 8111dc6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8111dc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8111dcc:	2b00      	cmp	r3, #0
 8111dce:	dce9      	bgt.n	8111da4 <prvUnlockQueue+0x60>
 8111dd0:	e000      	b.n	8111dd4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8111dd2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8111dd4:	687b      	ldr	r3, [r7, #4]
 8111dd6:	22ff      	movs	r2, #255	@ 0xff
 8111dd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8111ddc:	f7fe fee6 	bl	8110bac <vPortExitCritical>
}
 8111de0:	bf00      	nop
 8111de2:	3710      	adds	r7, #16
 8111de4:	46bd      	mov	sp, r7
 8111de6:	bd80      	pop	{r7, pc}

08111de8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8111de8:	b580      	push	{r7, lr}
 8111dea:	b084      	sub	sp, #16
 8111dec:	af00      	add	r7, sp, #0
 8111dee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8111df0:	f7fe feaa 	bl	8110b48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8111df4:	687b      	ldr	r3, [r7, #4]
 8111df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8111df8:	2b00      	cmp	r3, #0
 8111dfa:	d102      	bne.n	8111e02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8111dfc:	2301      	movs	r3, #1
 8111dfe:	60fb      	str	r3, [r7, #12]
 8111e00:	e001      	b.n	8111e06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8111e02:	2300      	movs	r3, #0
 8111e04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8111e06:	f7fe fed1 	bl	8110bac <vPortExitCritical>

	return xReturn;
 8111e0a:	68fb      	ldr	r3, [r7, #12]
}
 8111e0c:	4618      	mov	r0, r3
 8111e0e:	3710      	adds	r7, #16
 8111e10:	46bd      	mov	sp, r7
 8111e12:	bd80      	pop	{r7, pc}

08111e14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8111e14:	b580      	push	{r7, lr}
 8111e16:	b084      	sub	sp, #16
 8111e18:	af00      	add	r7, sp, #0
 8111e1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8111e1c:	f7fe fe94 	bl	8110b48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8111e20:	687b      	ldr	r3, [r7, #4]
 8111e22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8111e24:	687b      	ldr	r3, [r7, #4]
 8111e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8111e28:	429a      	cmp	r2, r3
 8111e2a:	d102      	bne.n	8111e32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8111e2c:	2301      	movs	r3, #1
 8111e2e:	60fb      	str	r3, [r7, #12]
 8111e30:	e001      	b.n	8111e36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8111e32:	2300      	movs	r3, #0
 8111e34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8111e36:	f7fe feb9 	bl	8110bac <vPortExitCritical>

	return xReturn;
 8111e3a:	68fb      	ldr	r3, [r7, #12]
}
 8111e3c:	4618      	mov	r0, r3
 8111e3e:	3710      	adds	r7, #16
 8111e40:	46bd      	mov	sp, r7
 8111e42:	bd80      	pop	{r7, pc}

08111e44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8111e44:	b480      	push	{r7}
 8111e46:	b085      	sub	sp, #20
 8111e48:	af00      	add	r7, sp, #0
 8111e4a:	6078      	str	r0, [r7, #4]
 8111e4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8111e4e:	2300      	movs	r3, #0
 8111e50:	60fb      	str	r3, [r7, #12]
 8111e52:	e014      	b.n	8111e7e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8111e54:	4a0f      	ldr	r2, [pc, #60]	@ (8111e94 <vQueueAddToRegistry+0x50>)
 8111e56:	68fb      	ldr	r3, [r7, #12]
 8111e58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8111e5c:	2b00      	cmp	r3, #0
 8111e5e:	d10b      	bne.n	8111e78 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8111e60:	490c      	ldr	r1, [pc, #48]	@ (8111e94 <vQueueAddToRegistry+0x50>)
 8111e62:	68fb      	ldr	r3, [r7, #12]
 8111e64:	683a      	ldr	r2, [r7, #0]
 8111e66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8111e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8111e94 <vQueueAddToRegistry+0x50>)
 8111e6c:	68fb      	ldr	r3, [r7, #12]
 8111e6e:	00db      	lsls	r3, r3, #3
 8111e70:	4413      	add	r3, r2
 8111e72:	687a      	ldr	r2, [r7, #4]
 8111e74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8111e76:	e006      	b.n	8111e86 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8111e78:	68fb      	ldr	r3, [r7, #12]
 8111e7a:	3301      	adds	r3, #1
 8111e7c:	60fb      	str	r3, [r7, #12]
 8111e7e:	68fb      	ldr	r3, [r7, #12]
 8111e80:	2b07      	cmp	r3, #7
 8111e82:	d9e7      	bls.n	8111e54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8111e84:	bf00      	nop
 8111e86:	bf00      	nop
 8111e88:	3714      	adds	r7, #20
 8111e8a:	46bd      	mov	sp, r7
 8111e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111e90:	4770      	bx	lr
 8111e92:	bf00      	nop
 8111e94:	1000ab54 	.word	0x1000ab54

08111e98 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8111e98:	b480      	push	{r7}
 8111e9a:	b085      	sub	sp, #20
 8111e9c:	af00      	add	r7, sp, #0
 8111e9e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8111ea0:	2300      	movs	r3, #0
 8111ea2:	60fb      	str	r3, [r7, #12]
 8111ea4:	e016      	b.n	8111ed4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8111ea6:	4a10      	ldr	r2, [pc, #64]	@ (8111ee8 <vQueueUnregisterQueue+0x50>)
 8111ea8:	68fb      	ldr	r3, [r7, #12]
 8111eaa:	00db      	lsls	r3, r3, #3
 8111eac:	4413      	add	r3, r2
 8111eae:	685b      	ldr	r3, [r3, #4]
 8111eb0:	687a      	ldr	r2, [r7, #4]
 8111eb2:	429a      	cmp	r2, r3
 8111eb4:	d10b      	bne.n	8111ece <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8111eb6:	4a0c      	ldr	r2, [pc, #48]	@ (8111ee8 <vQueueUnregisterQueue+0x50>)
 8111eb8:	68fb      	ldr	r3, [r7, #12]
 8111eba:	2100      	movs	r1, #0
 8111ebc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8111ec0:	4a09      	ldr	r2, [pc, #36]	@ (8111ee8 <vQueueUnregisterQueue+0x50>)
 8111ec2:	68fb      	ldr	r3, [r7, #12]
 8111ec4:	00db      	lsls	r3, r3, #3
 8111ec6:	4413      	add	r3, r2
 8111ec8:	2200      	movs	r2, #0
 8111eca:	605a      	str	r2, [r3, #4]
				break;
 8111ecc:	e006      	b.n	8111edc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8111ece:	68fb      	ldr	r3, [r7, #12]
 8111ed0:	3301      	adds	r3, #1
 8111ed2:	60fb      	str	r3, [r7, #12]
 8111ed4:	68fb      	ldr	r3, [r7, #12]
 8111ed6:	2b07      	cmp	r3, #7
 8111ed8:	d9e5      	bls.n	8111ea6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8111eda:	bf00      	nop
 8111edc:	bf00      	nop
 8111ede:	3714      	adds	r7, #20
 8111ee0:	46bd      	mov	sp, r7
 8111ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111ee6:	4770      	bx	lr
 8111ee8:	1000ab54 	.word	0x1000ab54

08111eec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8111eec:	b580      	push	{r7, lr}
 8111eee:	b086      	sub	sp, #24
 8111ef0:	af00      	add	r7, sp, #0
 8111ef2:	60f8      	str	r0, [r7, #12]
 8111ef4:	60b9      	str	r1, [r7, #8]
 8111ef6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8111ef8:	68fb      	ldr	r3, [r7, #12]
 8111efa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8111efc:	f7fe fe24 	bl	8110b48 <vPortEnterCritical>
 8111f00:	697b      	ldr	r3, [r7, #20]
 8111f02:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8111f06:	b25b      	sxtb	r3, r3
 8111f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8111f0c:	d103      	bne.n	8111f16 <vQueueWaitForMessageRestricted+0x2a>
 8111f0e:	697b      	ldr	r3, [r7, #20]
 8111f10:	2200      	movs	r2, #0
 8111f12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8111f16:	697b      	ldr	r3, [r7, #20]
 8111f18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8111f1c:	b25b      	sxtb	r3, r3
 8111f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8111f22:	d103      	bne.n	8111f2c <vQueueWaitForMessageRestricted+0x40>
 8111f24:	697b      	ldr	r3, [r7, #20]
 8111f26:	2200      	movs	r2, #0
 8111f28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8111f2c:	f7fe fe3e 	bl	8110bac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8111f30:	697b      	ldr	r3, [r7, #20]
 8111f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8111f34:	2b00      	cmp	r3, #0
 8111f36:	d106      	bne.n	8111f46 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8111f38:	697b      	ldr	r3, [r7, #20]
 8111f3a:	3324      	adds	r3, #36	@ 0x24
 8111f3c:	687a      	ldr	r2, [r7, #4]
 8111f3e:	68b9      	ldr	r1, [r7, #8]
 8111f40:	4618      	mov	r0, r3
 8111f42:	f001 f8a9 	bl	8113098 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8111f46:	6978      	ldr	r0, [r7, #20]
 8111f48:	f7ff fefc 	bl	8111d44 <prvUnlockQueue>
	}
 8111f4c:	bf00      	nop
 8111f4e:	3718      	adds	r7, #24
 8111f50:	46bd      	mov	sp, r7
 8111f52:	bd80      	pop	{r7, pc}

08111f54 <xStreamBufferGenericCreateStatic>:
	StreamBufferHandle_t xStreamBufferGenericCreateStatic( size_t xBufferSizeBytes,
														   size_t xTriggerLevelBytes,
														   BaseType_t xIsMessageBuffer,
														   uint8_t * const pucStreamBufferStorageArea,
														   StaticStreamBuffer_t * const pxStaticStreamBuffer )
	{
 8111f54:	b580      	push	{r7, lr}
 8111f56:	b090      	sub	sp, #64	@ 0x40
 8111f58:	af02      	add	r7, sp, #8
 8111f5a:	60f8      	str	r0, [r7, #12]
 8111f5c:	60b9      	str	r1, [r7, #8]
 8111f5e:	607a      	str	r2, [r7, #4]
 8111f60:	603b      	str	r3, [r7, #0]
	StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) pxStaticStreamBuffer; /*lint !e740 !e9087 Safe cast as StaticStreamBuffer_t is opaque Streambuffer_t. */
 8111f62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8111f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
	StreamBufferHandle_t xReturn;
	uint8_t ucFlags;

		configASSERT( pucStreamBufferStorageArea );
 8111f66:	683b      	ldr	r3, [r7, #0]
 8111f68:	2b00      	cmp	r3, #0
 8111f6a:	d10b      	bne.n	8111f84 <xStreamBufferGenericCreateStatic+0x30>
	__asm volatile
 8111f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111f70:	f383 8811 	msr	BASEPRI, r3
 8111f74:	f3bf 8f6f 	isb	sy
 8111f78:	f3bf 8f4f 	dsb	sy
 8111f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8111f7e:	bf00      	nop
 8111f80:	bf00      	nop
 8111f82:	e7fd      	b.n	8111f80 <xStreamBufferGenericCreateStatic+0x2c>
		configASSERT( pxStaticStreamBuffer );
 8111f84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8111f86:	2b00      	cmp	r3, #0
 8111f88:	d10b      	bne.n	8111fa2 <xStreamBufferGenericCreateStatic+0x4e>
	__asm volatile
 8111f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111f8e:	f383 8811 	msr	BASEPRI, r3
 8111f92:	f3bf 8f6f 	isb	sy
 8111f96:	f3bf 8f4f 	dsb	sy
 8111f9a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8111f9c:	bf00      	nop
 8111f9e:	bf00      	nop
 8111fa0:	e7fd      	b.n	8111f9e <xStreamBufferGenericCreateStatic+0x4a>
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8111fa2:	68ba      	ldr	r2, [r7, #8]
 8111fa4:	68fb      	ldr	r3, [r7, #12]
 8111fa6:	429a      	cmp	r2, r3
 8111fa8:	d90b      	bls.n	8111fc2 <xStreamBufferGenericCreateStatic+0x6e>
	__asm volatile
 8111faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111fae:	f383 8811 	msr	BASEPRI, r3
 8111fb2:	f3bf 8f6f 	isb	sy
 8111fb6:	f3bf 8f4f 	dsb	sy
 8111fba:	623b      	str	r3, [r7, #32]
}
 8111fbc:	bf00      	nop
 8111fbe:	bf00      	nop
 8111fc0:	e7fd      	b.n	8111fbe <xStreamBufferGenericCreateStatic+0x6a>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8111fc2:	68bb      	ldr	r3, [r7, #8]
 8111fc4:	2b00      	cmp	r3, #0
 8111fc6:	d101      	bne.n	8111fcc <xStreamBufferGenericCreateStatic+0x78>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8111fc8:	2301      	movs	r3, #1
 8111fca:	60bb      	str	r3, [r7, #8]
		}

		if( xIsMessageBuffer != pdFALSE )
 8111fcc:	687b      	ldr	r3, [r7, #4]
 8111fce:	2b00      	cmp	r3, #0
 8111fd0:	d003      	beq.n	8111fda <xStreamBufferGenericCreateStatic+0x86>
		{
			/* Statically allocated message buffer. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER | sbFLAGS_IS_STATICALLY_ALLOCATED;
 8111fd2:	2303      	movs	r3, #3
 8111fd4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8111fd8:	e002      	b.n	8111fe0 <xStreamBufferGenericCreateStatic+0x8c>
		}
		else
		{
			/* Statically allocated stream buffer. */
			ucFlags = sbFLAGS_IS_STATICALLY_ALLOCATED;
 8111fda:	2302      	movs	r3, #2
 8111fdc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8111fe0:	68fb      	ldr	r3, [r7, #12]
 8111fe2:	2b04      	cmp	r3, #4
 8111fe4:	d80b      	bhi.n	8111ffe <xStreamBufferGenericCreateStatic+0xaa>
	__asm volatile
 8111fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8111fea:	f383 8811 	msr	BASEPRI, r3
 8111fee:	f3bf 8f6f 	isb	sy
 8111ff2:	f3bf 8f4f 	dsb	sy
 8111ff6:	61fb      	str	r3, [r7, #28]
}
 8111ff8:	bf00      	nop
 8111ffa:	bf00      	nop
 8111ffc:	e7fd      	b.n	8111ffa <xStreamBufferGenericCreateStatic+0xa6>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticStreamBuffer_t equals the size of the real
			message buffer structure. */
			volatile size_t xSize = sizeof( StaticStreamBuffer_t );
 8111ffe:	2324      	movs	r3, #36	@ 0x24
 8112000:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( StreamBuffer_t ) );
 8112002:	697b      	ldr	r3, [r7, #20]
 8112004:	2b24      	cmp	r3, #36	@ 0x24
 8112006:	d00b      	beq.n	8112020 <xStreamBufferGenericCreateStatic+0xcc>
	__asm volatile
 8112008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811200c:	f383 8811 	msr	BASEPRI, r3
 8112010:	f3bf 8f6f 	isb	sy
 8112014:	f3bf 8f4f 	dsb	sy
 8112018:	61bb      	str	r3, [r7, #24]
}
 811201a:	bf00      	nop
 811201c:	bf00      	nop
 811201e:	e7fd      	b.n	811201c <xStreamBufferGenericCreateStatic+0xc8>
		} /*lint !e529 xSize is referenced is configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		if( ( pucStreamBufferStorageArea != NULL ) && ( pxStaticStreamBuffer != NULL ) )
 8112020:	683b      	ldr	r3, [r7, #0]
 8112022:	2b00      	cmp	r3, #0
 8112024:	d015      	beq.n	8112052 <xStreamBufferGenericCreateStatic+0xfe>
 8112026:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8112028:	2b00      	cmp	r3, #0
 811202a:	d012      	beq.n	8112052 <xStreamBufferGenericCreateStatic+0xfe>
		{
			prvInitialiseNewStreamBuffer( pxStreamBuffer,
 811202c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8112030:	9300      	str	r3, [sp, #0]
 8112032:	68bb      	ldr	r3, [r7, #8]
 8112034:	68fa      	ldr	r2, [r7, #12]
 8112036:	6839      	ldr	r1, [r7, #0]
 8112038:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811203a:	f000 fb81 	bl	8112740 <prvInitialiseNewStreamBuffer>
										  xTriggerLevelBytes,
										  ucFlags );

			/* Remember this was statically allocated in case it is ever deleted
			again. */
			pxStreamBuffer->ucFlags |= sbFLAGS_IS_STATICALLY_ALLOCATED;
 811203e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112040:	7f1b      	ldrb	r3, [r3, #28]
 8112042:	f043 0302 	orr.w	r3, r3, #2
 8112046:	b2da      	uxtb	r2, r3
 8112048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811204a:	771a      	strb	r2, [r3, #28]

			traceSTREAM_BUFFER_CREATE( pxStreamBuffer, xIsMessageBuffer );

			xReturn = ( StreamBufferHandle_t ) pxStaticStreamBuffer; /*lint !e9087 Data hiding requires cast to opaque type. */
 811204c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811204e:	637b      	str	r3, [r7, #52]	@ 0x34
 8112050:	e001      	b.n	8112056 <xStreamBufferGenericCreateStatic+0x102>
		}
		else
		{
			xReturn = NULL;
 8112052:	2300      	movs	r3, #0
 8112054:	637b      	str	r3, [r7, #52]	@ 0x34
			traceSTREAM_BUFFER_CREATE_STATIC_FAILED( xReturn, xIsMessageBuffer );
		}

		return xReturn;
 8112056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8112058:	4618      	mov	r0, r3
 811205a:	3738      	adds	r7, #56	@ 0x38
 811205c:	46bd      	mov	sp, r7
 811205e:	bd80      	pop	{r7, pc}

08112060 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8112060:	b480      	push	{r7}
 8112062:	b087      	sub	sp, #28
 8112064:	af00      	add	r7, sp, #0
 8112066:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8112068:	687b      	ldr	r3, [r7, #4]
 811206a:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 811206c:	693b      	ldr	r3, [r7, #16]
 811206e:	2b00      	cmp	r3, #0
 8112070:	d10b      	bne.n	811208a <xStreamBufferSpacesAvailable+0x2a>
	__asm volatile
 8112072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8112076:	f383 8811 	msr	BASEPRI, r3
 811207a:	f3bf 8f6f 	isb	sy
 811207e:	f3bf 8f4f 	dsb	sy
 8112082:	60fb      	str	r3, [r7, #12]
}
 8112084:	bf00      	nop
 8112086:	bf00      	nop
 8112088:	e7fd      	b.n	8112086 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 811208a:	693b      	ldr	r3, [r7, #16]
 811208c:	689a      	ldr	r2, [r3, #8]
 811208e:	693b      	ldr	r3, [r7, #16]
 8112090:	681b      	ldr	r3, [r3, #0]
 8112092:	4413      	add	r3, r2
 8112094:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8112096:	693b      	ldr	r3, [r7, #16]
 8112098:	685b      	ldr	r3, [r3, #4]
 811209a:	697a      	ldr	r2, [r7, #20]
 811209c:	1ad3      	subs	r3, r2, r3
 811209e:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 81120a0:	697b      	ldr	r3, [r7, #20]
 81120a2:	3b01      	subs	r3, #1
 81120a4:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 81120a6:	693b      	ldr	r3, [r7, #16]
 81120a8:	689b      	ldr	r3, [r3, #8]
 81120aa:	697a      	ldr	r2, [r7, #20]
 81120ac:	429a      	cmp	r2, r3
 81120ae:	d304      	bcc.n	81120ba <xStreamBufferSpacesAvailable+0x5a>
	{
		xSpace -= pxStreamBuffer->xLength;
 81120b0:	693b      	ldr	r3, [r7, #16]
 81120b2:	689b      	ldr	r3, [r3, #8]
 81120b4:	697a      	ldr	r2, [r7, #20]
 81120b6:	1ad3      	subs	r3, r2, r3
 81120b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 81120ba:	697b      	ldr	r3, [r7, #20]
}
 81120bc:	4618      	mov	r0, r3
 81120be:	371c      	adds	r7, #28
 81120c0:	46bd      	mov	sp, r7
 81120c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81120c6:	4770      	bx	lr

081120c8 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 81120c8:	b580      	push	{r7, lr}
 81120ca:	b090      	sub	sp, #64	@ 0x40
 81120cc:	af02      	add	r7, sp, #8
 81120ce:	60f8      	str	r0, [r7, #12]
 81120d0:	60b9      	str	r1, [r7, #8]
 81120d2:	607a      	str	r2, [r7, #4]
 81120d4:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 81120d6:	68fb      	ldr	r3, [r7, #12]
 81120d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
size_t xReturn, xSpace = 0;
 81120da:	2300      	movs	r3, #0
 81120dc:	637b      	str	r3, [r7, #52]	@ 0x34
size_t xRequiredSpace = xDataLengthBytes;
 81120de:	687b      	ldr	r3, [r7, #4]
 81120e0:	633b      	str	r3, [r7, #48]	@ 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 81120e2:	68bb      	ldr	r3, [r7, #8]
 81120e4:	2b00      	cmp	r3, #0
 81120e6:	d10b      	bne.n	8112100 <xStreamBufferSend+0x38>
	__asm volatile
 81120e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81120ec:	f383 8811 	msr	BASEPRI, r3
 81120f0:	f3bf 8f6f 	isb	sy
 81120f4:	f3bf 8f4f 	dsb	sy
 81120f8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 81120fa:	bf00      	nop
 81120fc:	bf00      	nop
 81120fe:	e7fd      	b.n	81120fc <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 8112100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112102:	2b00      	cmp	r3, #0
 8112104:	d10b      	bne.n	811211e <xStreamBufferSend+0x56>
	__asm volatile
 8112106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811210a:	f383 8811 	msr	BASEPRI, r3
 811210e:	f3bf 8f6f 	isb	sy
 8112112:	f3bf 8f4f 	dsb	sy
 8112116:	623b      	str	r3, [r7, #32]
}
 8112118:	bf00      	nop
 811211a:	bf00      	nop
 811211c:	e7fd      	b.n	811211a <xStreamBufferSend+0x52>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 811211e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112120:	7f1b      	ldrb	r3, [r3, #28]
 8112122:	f003 0301 	and.w	r3, r3, #1
 8112126:	2b00      	cmp	r3, #0
 8112128:	d012      	beq.n	8112150 <xStreamBufferSend+0x88>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 811212a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811212c:	3304      	adds	r3, #4
 811212e:	633b      	str	r3, [r7, #48]	@ 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 8112130:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8112132:	687b      	ldr	r3, [r7, #4]
 8112134:	429a      	cmp	r2, r3
 8112136:	d80b      	bhi.n	8112150 <xStreamBufferSend+0x88>
	__asm volatile
 8112138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811213c:	f383 8811 	msr	BASEPRI, r3
 8112140:	f3bf 8f6f 	isb	sy
 8112144:	f3bf 8f4f 	dsb	sy
 8112148:	61fb      	str	r3, [r7, #28]
}
 811214a:	bf00      	nop
 811214c:	bf00      	nop
 811214e:	e7fd      	b.n	811214c <xStreamBufferSend+0x84>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8112150:	683b      	ldr	r3, [r7, #0]
 8112152:	2b00      	cmp	r3, #0
 8112154:	d03f      	beq.n	81121d6 <xStreamBufferSend+0x10e>
	{
		vTaskSetTimeOutState( &xTimeOut );
 8112156:	f107 0310 	add.w	r3, r7, #16
 811215a:	4618      	mov	r0, r3
 811215c:	f001 f82c 	bl	81131b8 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 8112160:	f7fe fcf2 	bl	8110b48 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8112164:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8112166:	f7ff ff7b 	bl	8112060 <xStreamBufferSpacesAvailable>
 811216a:	6378      	str	r0, [r7, #52]	@ 0x34

				if( xSpace < xRequiredSpace )
 811216c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 811216e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112170:	429a      	cmp	r2, r3
 8112172:	d218      	bcs.n	81121a6 <xStreamBufferSend+0xde>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 8112174:	2000      	movs	r0, #0
 8112176:	f001 fc8d 	bl	8113a94 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 811217a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811217c:	695b      	ldr	r3, [r3, #20]
 811217e:	2b00      	cmp	r3, #0
 8112180:	d00b      	beq.n	811219a <xStreamBufferSend+0xd2>
	__asm volatile
 8112182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8112186:	f383 8811 	msr	BASEPRI, r3
 811218a:	f3bf 8f6f 	isb	sy
 811218e:	f3bf 8f4f 	dsb	sy
 8112192:	61bb      	str	r3, [r7, #24]
}
 8112194:	bf00      	nop
 8112196:	bf00      	nop
 8112198:	e7fd      	b.n	8112196 <xStreamBufferSend+0xce>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 811219a:	f001 f997 	bl	81134cc <xTaskGetCurrentTaskHandle>
 811219e:	4602      	mov	r2, r0
 81121a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81121a2:	615a      	str	r2, [r3, #20]
 81121a4:	e002      	b.n	81121ac <xStreamBufferSend+0xe4>
				}
				else
				{
					taskEXIT_CRITICAL();
 81121a6:	f7fe fd01 	bl	8110bac <vPortExitCritical>
					break;
 81121aa:	e014      	b.n	81121d6 <xStreamBufferSend+0x10e>
				}
			}
			taskEXIT_CRITICAL();
 81121ac:	f7fe fcfe 	bl	8110bac <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 81121b0:	683b      	ldr	r3, [r7, #0]
 81121b2:	2200      	movs	r2, #0
 81121b4:	2100      	movs	r1, #0
 81121b6:	2000      	movs	r0, #0
 81121b8:	f001 fb26 	bl	8113808 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 81121bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81121be:	2200      	movs	r2, #0
 81121c0:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 81121c2:	463a      	mov	r2, r7
 81121c4:	f107 0310 	add.w	r3, r7, #16
 81121c8:	4611      	mov	r1, r2
 81121ca:	4618      	mov	r0, r3
 81121cc:	f001 f832 	bl	8113234 <xTaskCheckForTimeOut>
 81121d0:	4603      	mov	r3, r0
 81121d2:	2b00      	cmp	r3, #0
 81121d4:	d0c4      	beq.n	8112160 <xStreamBufferSend+0x98>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 81121d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81121d8:	2b00      	cmp	r3, #0
 81121da:	d103      	bne.n	81121e4 <xStreamBufferSend+0x11c>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 81121dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 81121de:	f7ff ff3f 	bl	8112060 <xStreamBufferSpacesAvailable>
 81121e2:	6378      	str	r0, [r7, #52]	@ 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 81121e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81121e6:	9300      	str	r3, [sp, #0]
 81121e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81121ea:	687a      	ldr	r2, [r7, #4]
 81121ec:	68b9      	ldr	r1, [r7, #8]
 81121ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 81121f0:	f000 f814 	bl	811221c <prvWriteMessageToBuffer>
 81121f4:	62b8      	str	r0, [r7, #40]	@ 0x28

	if( xReturn > ( size_t ) 0 )
 81121f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81121f8:	2b00      	cmp	r3, #0
 81121fa:	d00a      	beq.n	8112212 <xStreamBufferSend+0x14a>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 81121fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 81121fe:	f000 fa7f 	bl	8112700 <prvBytesInBuffer>
 8112202:	4602      	mov	r2, r0
 8112204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112206:	68db      	ldr	r3, [r3, #12]
 8112208:	429a      	cmp	r2, r3
 811220a:	d302      	bcc.n	8112212 <xStreamBufferSend+0x14a>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 811220c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811220e:	f7ee fb43 	bl	8100898 <vGenerateRemoteInterrupt>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 8112212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8112214:	4618      	mov	r0, r3
 8112216:	3738      	adds	r7, #56	@ 0x38
 8112218:	46bd      	mov	sp, r7
 811221a:	bd80      	pop	{r7, pc}

0811221c <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 811221c:	b580      	push	{r7, lr}
 811221e:	b086      	sub	sp, #24
 8112220:	af00      	add	r7, sp, #0
 8112222:	60f8      	str	r0, [r7, #12]
 8112224:	60b9      	str	r1, [r7, #8]
 8112226:	607a      	str	r2, [r7, #4]
 8112228:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 811222a:	683b      	ldr	r3, [r7, #0]
 811222c:	2b00      	cmp	r3, #0
 811222e:	d102      	bne.n	8112236 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8112230:	2300      	movs	r3, #0
 8112232:	617b      	str	r3, [r7, #20]
 8112234:	e01d      	b.n	8112272 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8112236:	68fb      	ldr	r3, [r7, #12]
 8112238:	7f1b      	ldrb	r3, [r3, #28]
 811223a:	f003 0301 	and.w	r3, r3, #1
 811223e:	2b00      	cmp	r3, #0
 8112240:	d108      	bne.n	8112254 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8112242:	2301      	movs	r3, #1
 8112244:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8112246:	687a      	ldr	r2, [r7, #4]
 8112248:	683b      	ldr	r3, [r7, #0]
 811224a:	4293      	cmp	r3, r2
 811224c:	bf28      	it	cs
 811224e:	4613      	movcs	r3, r2
 8112250:	607b      	str	r3, [r7, #4]
 8112252:	e00e      	b.n	8112272 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8112254:	683a      	ldr	r2, [r7, #0]
 8112256:	6a3b      	ldr	r3, [r7, #32]
 8112258:	429a      	cmp	r2, r3
 811225a:	d308      	bcc.n	811226e <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 811225c:	2301      	movs	r3, #1
 811225e:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8112260:	1d3b      	adds	r3, r7, #4
 8112262:	2204      	movs	r2, #4
 8112264:	4619      	mov	r1, r3
 8112266:	68f8      	ldr	r0, [r7, #12]
 8112268:	f000 f958 	bl	811251c <prvWriteBytesToBuffer>
 811226c:	e001      	b.n	8112272 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 811226e:	2300      	movs	r3, #0
 8112270:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8112272:	697b      	ldr	r3, [r7, #20]
 8112274:	2b00      	cmp	r3, #0
 8112276:	d007      	beq.n	8112288 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8112278:	687b      	ldr	r3, [r7, #4]
 811227a:	461a      	mov	r2, r3
 811227c:	68b9      	ldr	r1, [r7, #8]
 811227e:	68f8      	ldr	r0, [r7, #12]
 8112280:	f000 f94c 	bl	811251c <prvWriteBytesToBuffer>
 8112284:	6138      	str	r0, [r7, #16]
 8112286:	e001      	b.n	811228c <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8112288:	2300      	movs	r3, #0
 811228a:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 811228c:	693b      	ldr	r3, [r7, #16]
}
 811228e:	4618      	mov	r0, r3
 8112290:	3718      	adds	r7, #24
 8112292:	46bd      	mov	sp, r7
 8112294:	bd80      	pop	{r7, pc}

08112296 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8112296:	b580      	push	{r7, lr}
 8112298:	b08e      	sub	sp, #56	@ 0x38
 811229a:	af02      	add	r7, sp, #8
 811229c:	60f8      	str	r0, [r7, #12]
 811229e:	60b9      	str	r1, [r7, #8]
 81122a0:	607a      	str	r2, [r7, #4]
 81122a2:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 81122a4:	68fb      	ldr	r3, [r7, #12]
 81122a6:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 81122a8:	2300      	movs	r3, #0
 81122aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

	configASSERT( pvRxData );
 81122ac:	68bb      	ldr	r3, [r7, #8]
 81122ae:	2b00      	cmp	r3, #0
 81122b0:	d10b      	bne.n	81122ca <xStreamBufferReceive+0x34>
	__asm volatile
 81122b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81122b6:	f383 8811 	msr	BASEPRI, r3
 81122ba:	f3bf 8f6f 	isb	sy
 81122be:	f3bf 8f4f 	dsb	sy
 81122c2:	61fb      	str	r3, [r7, #28]
}
 81122c4:	bf00      	nop
 81122c6:	bf00      	nop
 81122c8:	e7fd      	b.n	81122c6 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 81122ca:	6a3b      	ldr	r3, [r7, #32]
 81122cc:	2b00      	cmp	r3, #0
 81122ce:	d10b      	bne.n	81122e8 <xStreamBufferReceive+0x52>
	__asm volatile
 81122d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81122d4:	f383 8811 	msr	BASEPRI, r3
 81122d8:	f3bf 8f6f 	isb	sy
 81122dc:	f3bf 8f4f 	dsb	sy
 81122e0:	61bb      	str	r3, [r7, #24]
}
 81122e2:	bf00      	nop
 81122e4:	bf00      	nop
 81122e6:	e7fd      	b.n	81122e4 <xStreamBufferReceive+0x4e>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 81122e8:	6a3b      	ldr	r3, [r7, #32]
 81122ea:	7f1b      	ldrb	r3, [r3, #28]
 81122ec:	f003 0301 	and.w	r3, r3, #1
 81122f0:	2b00      	cmp	r3, #0
 81122f2:	d002      	beq.n	81122fa <xStreamBufferReceive+0x64>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 81122f4:	2304      	movs	r3, #4
 81122f6:	627b      	str	r3, [r7, #36]	@ 0x24
 81122f8:	e001      	b.n	81122fe <xStreamBufferReceive+0x68>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 81122fa:	2300      	movs	r3, #0
 81122fc:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 81122fe:	683b      	ldr	r3, [r7, #0]
 8112300:	2b00      	cmp	r3, #0
 8112302:	d035      	beq.n	8112370 <xStreamBufferReceive+0xda>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8112304:	f7fe fc20 	bl	8110b48 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8112308:	6a38      	ldr	r0, [r7, #32]
 811230a:	f000 f9f9 	bl	8112700 <prvBytesInBuffer>
 811230e:	62b8      	str	r0, [r7, #40]	@ 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8112310:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8112312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112314:	429a      	cmp	r2, r3
 8112316:	d817      	bhi.n	8112348 <xStreamBufferReceive+0xb2>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8112318:	2000      	movs	r0, #0
 811231a:	f001 fbbb 	bl	8113a94 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 811231e:	6a3b      	ldr	r3, [r7, #32]
 8112320:	691b      	ldr	r3, [r3, #16]
 8112322:	2b00      	cmp	r3, #0
 8112324:	d00b      	beq.n	811233e <xStreamBufferReceive+0xa8>
	__asm volatile
 8112326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811232a:	f383 8811 	msr	BASEPRI, r3
 811232e:	f3bf 8f6f 	isb	sy
 8112332:	f3bf 8f4f 	dsb	sy
 8112336:	617b      	str	r3, [r7, #20]
}
 8112338:	bf00      	nop
 811233a:	bf00      	nop
 811233c:	e7fd      	b.n	811233a <xStreamBufferReceive+0xa4>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 811233e:	f001 f8c5 	bl	81134cc <xTaskGetCurrentTaskHandle>
 8112342:	4602      	mov	r2, r0
 8112344:	6a3b      	ldr	r3, [r7, #32]
 8112346:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8112348:	f7fe fc30 	bl	8110bac <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 811234c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 811234e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112350:	429a      	cmp	r2, r3
 8112352:	d811      	bhi.n	8112378 <xStreamBufferReceive+0xe2>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8112354:	683b      	ldr	r3, [r7, #0]
 8112356:	2200      	movs	r2, #0
 8112358:	2100      	movs	r1, #0
 811235a:	2000      	movs	r0, #0
 811235c:	f001 fa54 	bl	8113808 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8112360:	6a3b      	ldr	r3, [r7, #32]
 8112362:	2200      	movs	r2, #0
 8112364:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8112366:	6a38      	ldr	r0, [r7, #32]
 8112368:	f000 f9ca 	bl	8112700 <prvBytesInBuffer>
 811236c:	62b8      	str	r0, [r7, #40]	@ 0x28
 811236e:	e003      	b.n	8112378 <xStreamBufferReceive+0xe2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8112370:	6a38      	ldr	r0, [r7, #32]
 8112372:	f000 f9c5 	bl	8112700 <prvBytesInBuffer>
 8112376:	62b8      	str	r0, [r7, #40]	@ 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8112378:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 811237a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811237c:	429a      	cmp	r2, r3
 811237e:	d90e      	bls.n	811239e <xStreamBufferReceive+0x108>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8112380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112382:	9300      	str	r3, [sp, #0]
 8112384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112386:	687a      	ldr	r2, [r7, #4]
 8112388:	68b9      	ldr	r1, [r7, #8]
 811238a:	6a38      	ldr	r0, [r7, #32]
 811238c:	f000 f80c 	bl	81123a8 <prvReadMessageFromBuffer>
 8112390:	62f8      	str	r0, [r7, #44]	@ 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8112392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112394:	2b00      	cmp	r3, #0
 8112396:	d002      	beq.n	811239e <xStreamBufferReceive+0x108>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8112398:	6a38      	ldr	r0, [r7, #32]
 811239a:	f7ee fa7d 	bl	8100898 <vGenerateRemoteInterrupt>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 811239e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 81123a0:	4618      	mov	r0, r3
 81123a2:	3730      	adds	r7, #48	@ 0x30
 81123a4:	46bd      	mov	sp, r7
 81123a6:	bd80      	pop	{r7, pc}

081123a8 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 81123a8:	b580      	push	{r7, lr}
 81123aa:	b088      	sub	sp, #32
 81123ac:	af00      	add	r7, sp, #0
 81123ae:	60f8      	str	r0, [r7, #12]
 81123b0:	60b9      	str	r1, [r7, #8]
 81123b2:	607a      	str	r2, [r7, #4]
 81123b4:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 81123b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81123b8:	2b00      	cmp	r3, #0
 81123ba:	d019      	beq.n	81123f0 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 81123bc:	68fb      	ldr	r3, [r7, #12]
 81123be:	681b      	ldr	r3, [r3, #0]
 81123c0:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 81123c2:	f107 0110 	add.w	r1, r7, #16
 81123c6:	683b      	ldr	r3, [r7, #0]
 81123c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 81123ca:	68f8      	ldr	r0, [r7, #12]
 81123cc:	f000 f91b 	bl	8112606 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 81123d0:	693b      	ldr	r3, [r7, #16]
 81123d2:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 81123d4:	683a      	ldr	r2, [r7, #0]
 81123d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81123d8:	1ad3      	subs	r3, r2, r3
 81123da:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 81123dc:	69fa      	ldr	r2, [r7, #28]
 81123de:	687b      	ldr	r3, [r7, #4]
 81123e0:	429a      	cmp	r2, r3
 81123e2:	d907      	bls.n	81123f4 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 81123e4:	68fb      	ldr	r3, [r7, #12]
 81123e6:	69ba      	ldr	r2, [r7, #24]
 81123e8:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 81123ea:	2300      	movs	r3, #0
 81123ec:	61fb      	str	r3, [r7, #28]
 81123ee:	e001      	b.n	81123f4 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 81123f0:	687b      	ldr	r3, [r7, #4]
 81123f2:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 81123f4:	683b      	ldr	r3, [r7, #0]
 81123f6:	69fa      	ldr	r2, [r7, #28]
 81123f8:	68b9      	ldr	r1, [r7, #8]
 81123fa:	68f8      	ldr	r0, [r7, #12]
 81123fc:	f000 f903 	bl	8112606 <prvReadBytesFromBuffer>
 8112400:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8112402:	697b      	ldr	r3, [r7, #20]
}
 8112404:	4618      	mov	r0, r3
 8112406:	3720      	adds	r7, #32
 8112408:	46bd      	mov	sp, r7
 811240a:	bd80      	pop	{r7, pc}

0811240c <xStreamBufferSendCompletedFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
 811240c:	b580      	push	{r7, lr}
 811240e:	b08c      	sub	sp, #48	@ 0x30
 8112410:	af02      	add	r7, sp, #8
 8112412:	6078      	str	r0, [r7, #4]
 8112414:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8112416:	687b      	ldr	r3, [r7, #4]
 8112418:	623b      	str	r3, [r7, #32]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );
 811241a:	6a3b      	ldr	r3, [r7, #32]
 811241c:	2b00      	cmp	r3, #0
 811241e:	d10b      	bne.n	8112438 <xStreamBufferSendCompletedFromISR+0x2c>
	__asm volatile
 8112420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8112424:	f383 8811 	msr	BASEPRI, r3
 8112428:	f3bf 8f6f 	isb	sy
 811242c:	f3bf 8f4f 	dsb	sy
 8112430:	61bb      	str	r3, [r7, #24]
}
 8112432:	bf00      	nop
 8112434:	bf00      	nop
 8112436:	e7fd      	b.n	8112434 <xStreamBufferSendCompletedFromISR+0x28>
	__asm volatile
 8112438:	f3ef 8211 	mrs	r2, BASEPRI
 811243c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8112440:	f383 8811 	msr	BASEPRI, r3
 8112444:	f3bf 8f6f 	isb	sy
 8112448:	f3bf 8f4f 	dsb	sy
 811244c:	617a      	str	r2, [r7, #20]
 811244e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8112450:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 8112452:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
 8112454:	6a3b      	ldr	r3, [r7, #32]
 8112456:	691b      	ldr	r3, [r3, #16]
 8112458:	2b00      	cmp	r3, #0
 811245a:	d00e      	beq.n	811247a <xStreamBufferSendCompletedFromISR+0x6e>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
 811245c:	6a3b      	ldr	r3, [r7, #32]
 811245e:	6918      	ldr	r0, [r3, #16]
 8112460:	683b      	ldr	r3, [r7, #0]
 8112462:	9300      	str	r3, [sp, #0]
 8112464:	2300      	movs	r3, #0
 8112466:	2200      	movs	r2, #0
 8112468:	2100      	movs	r1, #0
 811246a:	f001 fa2d 	bl	81138c8 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
 811246e:	6a3b      	ldr	r3, [r7, #32]
 8112470:	2200      	movs	r2, #0
 8112472:	611a      	str	r2, [r3, #16]
			xReturn = pdTRUE;
 8112474:	2301      	movs	r3, #1
 8112476:	627b      	str	r3, [r7, #36]	@ 0x24
 8112478:	e001      	b.n	811247e <xStreamBufferSendCompletedFromISR+0x72>
		}
		else
		{
			xReturn = pdFALSE;
 811247a:	2300      	movs	r3, #0
 811247c:	627b      	str	r3, [r7, #36]	@ 0x24
 811247e:	69fb      	ldr	r3, [r7, #28]
 8112480:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8112482:	68fb      	ldr	r3, [r7, #12]
 8112484:	f383 8811 	msr	BASEPRI, r3
}
 8112488:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 811248a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 811248c:	4618      	mov	r0, r3
 811248e:	3728      	adds	r7, #40	@ 0x28
 8112490:	46bd      	mov	sp, r7
 8112492:	bd80      	pop	{r7, pc}

08112494 <xStreamBufferReceiveCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
 8112494:	b580      	push	{r7, lr}
 8112496:	b08c      	sub	sp, #48	@ 0x30
 8112498:	af02      	add	r7, sp, #8
 811249a:	6078      	str	r0, [r7, #4]
 811249c:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 811249e:	687b      	ldr	r3, [r7, #4]
 81124a0:	623b      	str	r3, [r7, #32]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );
 81124a2:	6a3b      	ldr	r3, [r7, #32]
 81124a4:	2b00      	cmp	r3, #0
 81124a6:	d10b      	bne.n	81124c0 <xStreamBufferReceiveCompletedFromISR+0x2c>
	__asm volatile
 81124a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81124ac:	f383 8811 	msr	BASEPRI, r3
 81124b0:	f3bf 8f6f 	isb	sy
 81124b4:	f3bf 8f4f 	dsb	sy
 81124b8:	61bb      	str	r3, [r7, #24]
}
 81124ba:	bf00      	nop
 81124bc:	bf00      	nop
 81124be:	e7fd      	b.n	81124bc <xStreamBufferReceiveCompletedFromISR+0x28>
	__asm volatile
 81124c0:	f3ef 8211 	mrs	r2, BASEPRI
 81124c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81124c8:	f383 8811 	msr	BASEPRI, r3
 81124cc:	f3bf 8f6f 	isb	sy
 81124d0:	f3bf 8f4f 	dsb	sy
 81124d4:	617a      	str	r2, [r7, #20]
 81124d6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 81124d8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 81124da:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
 81124dc:	6a3b      	ldr	r3, [r7, #32]
 81124de:	695b      	ldr	r3, [r3, #20]
 81124e0:	2b00      	cmp	r3, #0
 81124e2:	d00e      	beq.n	8112502 <xStreamBufferReceiveCompletedFromISR+0x6e>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
 81124e4:	6a3b      	ldr	r3, [r7, #32]
 81124e6:	6958      	ldr	r0, [r3, #20]
 81124e8:	683b      	ldr	r3, [r7, #0]
 81124ea:	9300      	str	r3, [sp, #0]
 81124ec:	2300      	movs	r3, #0
 81124ee:	2200      	movs	r2, #0
 81124f0:	2100      	movs	r1, #0
 81124f2:	f001 f9e9 	bl	81138c8 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToSend = NULL;
 81124f6:	6a3b      	ldr	r3, [r7, #32]
 81124f8:	2200      	movs	r2, #0
 81124fa:	615a      	str	r2, [r3, #20]
			xReturn = pdTRUE;
 81124fc:	2301      	movs	r3, #1
 81124fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8112500:	e001      	b.n	8112506 <xStreamBufferReceiveCompletedFromISR+0x72>
		}
		else
		{
			xReturn = pdFALSE;
 8112502:	2300      	movs	r3, #0
 8112504:	627b      	str	r3, [r7, #36]	@ 0x24
 8112506:	69fb      	ldr	r3, [r7, #28]
 8112508:	60fb      	str	r3, [r7, #12]
	__asm volatile
 811250a:	68fb      	ldr	r3, [r7, #12]
 811250c:	f383 8811 	msr	BASEPRI, r3
}
 8112510:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8112512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8112514:	4618      	mov	r0, r3
 8112516:	3728      	adds	r7, #40	@ 0x28
 8112518:	46bd      	mov	sp, r7
 811251a:	bd80      	pop	{r7, pc}

0811251c <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 811251c:	b580      	push	{r7, lr}
 811251e:	b08a      	sub	sp, #40	@ 0x28
 8112520:	af00      	add	r7, sp, #0
 8112522:	60f8      	str	r0, [r7, #12]
 8112524:	60b9      	str	r1, [r7, #8]
 8112526:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8112528:	687b      	ldr	r3, [r7, #4]
 811252a:	2b00      	cmp	r3, #0
 811252c:	d10b      	bne.n	8112546 <prvWriteBytesToBuffer+0x2a>
	__asm volatile
 811252e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8112532:	f383 8811 	msr	BASEPRI, r3
 8112536:	f3bf 8f6f 	isb	sy
 811253a:	f3bf 8f4f 	dsb	sy
 811253e:	61fb      	str	r3, [r7, #28]
}
 8112540:	bf00      	nop
 8112542:	bf00      	nop
 8112544:	e7fd      	b.n	8112542 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 8112546:	68fb      	ldr	r3, [r7, #12]
 8112548:	685b      	ldr	r3, [r3, #4]
 811254a:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 811254c:	68fb      	ldr	r3, [r7, #12]
 811254e:	689a      	ldr	r2, [r3, #8]
 8112550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112552:	1ad3      	subs	r3, r2, r3
 8112554:	687a      	ldr	r2, [r7, #4]
 8112556:	4293      	cmp	r3, r2
 8112558:	bf28      	it	cs
 811255a:	4613      	movcs	r3, r2
 811255c:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 811255e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8112560:	6a3b      	ldr	r3, [r7, #32]
 8112562:	441a      	add	r2, r3
 8112564:	68fb      	ldr	r3, [r7, #12]
 8112566:	689b      	ldr	r3, [r3, #8]
 8112568:	429a      	cmp	r2, r3
 811256a:	d90b      	bls.n	8112584 <prvWriteBytesToBuffer+0x68>
	__asm volatile
 811256c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8112570:	f383 8811 	msr	BASEPRI, r3
 8112574:	f3bf 8f6f 	isb	sy
 8112578:	f3bf 8f4f 	dsb	sy
 811257c:	61bb      	str	r3, [r7, #24]
}
 811257e:	bf00      	nop
 8112580:	bf00      	nop
 8112582:	e7fd      	b.n	8112580 <prvWriteBytesToBuffer+0x64>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8112584:	68fb      	ldr	r3, [r7, #12]
 8112586:	699a      	ldr	r2, [r3, #24]
 8112588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811258a:	4413      	add	r3, r2
 811258c:	6a3a      	ldr	r2, [r7, #32]
 811258e:	68b9      	ldr	r1, [r7, #8]
 8112590:	4618      	mov	r0, r3
 8112592:	f010 f95c 	bl	812284e <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8112596:	687a      	ldr	r2, [r7, #4]
 8112598:	6a3b      	ldr	r3, [r7, #32]
 811259a:	429a      	cmp	r2, r3
 811259c:	d91d      	bls.n	81125da <prvWriteBytesToBuffer+0xbe>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 811259e:	687a      	ldr	r2, [r7, #4]
 81125a0:	6a3b      	ldr	r3, [r7, #32]
 81125a2:	1ad2      	subs	r2, r2, r3
 81125a4:	68fb      	ldr	r3, [r7, #12]
 81125a6:	689b      	ldr	r3, [r3, #8]
 81125a8:	429a      	cmp	r2, r3
 81125aa:	d90b      	bls.n	81125c4 <prvWriteBytesToBuffer+0xa8>
	__asm volatile
 81125ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81125b0:	f383 8811 	msr	BASEPRI, r3
 81125b4:	f3bf 8f6f 	isb	sy
 81125b8:	f3bf 8f4f 	dsb	sy
 81125bc:	617b      	str	r3, [r7, #20]
}
 81125be:	bf00      	nop
 81125c0:	bf00      	nop
 81125c2:	e7fd      	b.n	81125c0 <prvWriteBytesToBuffer+0xa4>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 81125c4:	68fb      	ldr	r3, [r7, #12]
 81125c6:	6998      	ldr	r0, [r3, #24]
 81125c8:	68ba      	ldr	r2, [r7, #8]
 81125ca:	6a3b      	ldr	r3, [r7, #32]
 81125cc:	18d1      	adds	r1, r2, r3
 81125ce:	687a      	ldr	r2, [r7, #4]
 81125d0:	6a3b      	ldr	r3, [r7, #32]
 81125d2:	1ad3      	subs	r3, r2, r3
 81125d4:	461a      	mov	r2, r3
 81125d6:	f010 f93a 	bl	812284e <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 81125da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81125dc:	687b      	ldr	r3, [r7, #4]
 81125de:	4413      	add	r3, r2
 81125e0:	627b      	str	r3, [r7, #36]	@ 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 81125e2:	68fb      	ldr	r3, [r7, #12]
 81125e4:	689b      	ldr	r3, [r3, #8]
 81125e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81125e8:	429a      	cmp	r2, r3
 81125ea:	d304      	bcc.n	81125f6 <prvWriteBytesToBuffer+0xda>
	{
		xNextHead -= pxStreamBuffer->xLength;
 81125ec:	68fb      	ldr	r3, [r7, #12]
 81125ee:	689b      	ldr	r3, [r3, #8]
 81125f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81125f2:	1ad3      	subs	r3, r2, r3
 81125f4:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 81125f6:	68fb      	ldr	r3, [r7, #12]
 81125f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81125fa:	605a      	str	r2, [r3, #4]

	return xCount;
 81125fc:	687b      	ldr	r3, [r7, #4]
}
 81125fe:	4618      	mov	r0, r3
 8112600:	3728      	adds	r7, #40	@ 0x28
 8112602:	46bd      	mov	sp, r7
 8112604:	bd80      	pop	{r7, pc}

08112606 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8112606:	b580      	push	{r7, lr}
 8112608:	b08a      	sub	sp, #40	@ 0x28
 811260a:	af00      	add	r7, sp, #0
 811260c:	60f8      	str	r0, [r7, #12]
 811260e:	60b9      	str	r1, [r7, #8]
 8112610:	607a      	str	r2, [r7, #4]
 8112612:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8112614:	687a      	ldr	r2, [r7, #4]
 8112616:	683b      	ldr	r3, [r7, #0]
 8112618:	4293      	cmp	r3, r2
 811261a:	bf28      	it	cs
 811261c:	4613      	movcs	r3, r2
 811261e:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8112620:	6a3b      	ldr	r3, [r7, #32]
 8112622:	2b00      	cmp	r3, #0
 8112624:	d067      	beq.n	81126f6 <prvReadBytesFromBuffer+0xf0>
	{
		xNextTail = pxStreamBuffer->xTail;
 8112626:	68fb      	ldr	r3, [r7, #12]
 8112628:	681b      	ldr	r3, [r3, #0]
 811262a:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 811262c:	68fb      	ldr	r3, [r7, #12]
 811262e:	689a      	ldr	r2, [r3, #8]
 8112630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112632:	1ad3      	subs	r3, r2, r3
 8112634:	6a3a      	ldr	r2, [r7, #32]
 8112636:	4293      	cmp	r3, r2
 8112638:	bf28      	it	cs
 811263a:	4613      	movcs	r3, r2
 811263c:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 811263e:	69fa      	ldr	r2, [r7, #28]
 8112640:	687b      	ldr	r3, [r7, #4]
 8112642:	429a      	cmp	r2, r3
 8112644:	d90b      	bls.n	811265e <prvReadBytesFromBuffer+0x58>
	__asm volatile
 8112646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811264a:	f383 8811 	msr	BASEPRI, r3
 811264e:	f3bf 8f6f 	isb	sy
 8112652:	f3bf 8f4f 	dsb	sy
 8112656:	61bb      	str	r3, [r7, #24]
}
 8112658:	bf00      	nop
 811265a:	bf00      	nop
 811265c:	e7fd      	b.n	811265a <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 811265e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8112660:	69fb      	ldr	r3, [r7, #28]
 8112662:	441a      	add	r2, r3
 8112664:	68fb      	ldr	r3, [r7, #12]
 8112666:	689b      	ldr	r3, [r3, #8]
 8112668:	429a      	cmp	r2, r3
 811266a:	d90b      	bls.n	8112684 <prvReadBytesFromBuffer+0x7e>
	__asm volatile
 811266c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8112670:	f383 8811 	msr	BASEPRI, r3
 8112674:	f3bf 8f6f 	isb	sy
 8112678:	f3bf 8f4f 	dsb	sy
 811267c:	617b      	str	r3, [r7, #20]
}
 811267e:	bf00      	nop
 8112680:	bf00      	nop
 8112682:	e7fd      	b.n	8112680 <prvReadBytesFromBuffer+0x7a>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8112684:	68fb      	ldr	r3, [r7, #12]
 8112686:	699a      	ldr	r2, [r3, #24]
 8112688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811268a:	4413      	add	r3, r2
 811268c:	69fa      	ldr	r2, [r7, #28]
 811268e:	4619      	mov	r1, r3
 8112690:	68b8      	ldr	r0, [r7, #8]
 8112692:	f010 f8dc 	bl	812284e <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8112696:	6a3a      	ldr	r2, [r7, #32]
 8112698:	69fb      	ldr	r3, [r7, #28]
 811269a:	429a      	cmp	r2, r3
 811269c:	d91a      	bls.n	81126d4 <prvReadBytesFromBuffer+0xce>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 811269e:	6a3a      	ldr	r2, [r7, #32]
 81126a0:	687b      	ldr	r3, [r7, #4]
 81126a2:	429a      	cmp	r2, r3
 81126a4:	d90b      	bls.n	81126be <prvReadBytesFromBuffer+0xb8>
	__asm volatile
 81126a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81126aa:	f383 8811 	msr	BASEPRI, r3
 81126ae:	f3bf 8f6f 	isb	sy
 81126b2:	f3bf 8f4f 	dsb	sy
 81126b6:	613b      	str	r3, [r7, #16]
}
 81126b8:	bf00      	nop
 81126ba:	bf00      	nop
 81126bc:	e7fd      	b.n	81126ba <prvReadBytesFromBuffer+0xb4>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 81126be:	68ba      	ldr	r2, [r7, #8]
 81126c0:	69fb      	ldr	r3, [r7, #28]
 81126c2:	18d0      	adds	r0, r2, r3
 81126c4:	68fb      	ldr	r3, [r7, #12]
 81126c6:	6999      	ldr	r1, [r3, #24]
 81126c8:	6a3a      	ldr	r2, [r7, #32]
 81126ca:	69fb      	ldr	r3, [r7, #28]
 81126cc:	1ad3      	subs	r3, r2, r3
 81126ce:	461a      	mov	r2, r3
 81126d0:	f010 f8bd 	bl	812284e <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 81126d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81126d6:	6a3b      	ldr	r3, [r7, #32]
 81126d8:	4413      	add	r3, r2
 81126da:	627b      	str	r3, [r7, #36]	@ 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 81126dc:	68fb      	ldr	r3, [r7, #12]
 81126de:	689b      	ldr	r3, [r3, #8]
 81126e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81126e2:	429a      	cmp	r2, r3
 81126e4:	d304      	bcc.n	81126f0 <prvReadBytesFromBuffer+0xea>
		{
			xNextTail -= pxStreamBuffer->xLength;
 81126e6:	68fb      	ldr	r3, [r7, #12]
 81126e8:	689b      	ldr	r3, [r3, #8]
 81126ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81126ec:	1ad3      	subs	r3, r2, r3
 81126ee:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 81126f0:	68fb      	ldr	r3, [r7, #12]
 81126f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81126f4:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 81126f6:	6a3b      	ldr	r3, [r7, #32]
}
 81126f8:	4618      	mov	r0, r3
 81126fa:	3728      	adds	r7, #40	@ 0x28
 81126fc:	46bd      	mov	sp, r7
 81126fe:	bd80      	pop	{r7, pc}

08112700 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8112700:	b480      	push	{r7}
 8112702:	b085      	sub	sp, #20
 8112704:	af00      	add	r7, sp, #0
 8112706:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8112708:	687b      	ldr	r3, [r7, #4]
 811270a:	689a      	ldr	r2, [r3, #8]
 811270c:	687b      	ldr	r3, [r7, #4]
 811270e:	685b      	ldr	r3, [r3, #4]
 8112710:	4413      	add	r3, r2
 8112712:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8112714:	687b      	ldr	r3, [r7, #4]
 8112716:	681b      	ldr	r3, [r3, #0]
 8112718:	68fa      	ldr	r2, [r7, #12]
 811271a:	1ad3      	subs	r3, r2, r3
 811271c:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 811271e:	687b      	ldr	r3, [r7, #4]
 8112720:	689b      	ldr	r3, [r3, #8]
 8112722:	68fa      	ldr	r2, [r7, #12]
 8112724:	429a      	cmp	r2, r3
 8112726:	d304      	bcc.n	8112732 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8112728:	687b      	ldr	r3, [r7, #4]
 811272a:	689b      	ldr	r3, [r3, #8]
 811272c:	68fa      	ldr	r2, [r7, #12]
 811272e:	1ad3      	subs	r3, r2, r3
 8112730:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8112732:	68fb      	ldr	r3, [r7, #12]
}
 8112734:	4618      	mov	r0, r3
 8112736:	3714      	adds	r7, #20
 8112738:	46bd      	mov	sp, r7
 811273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 811273e:	4770      	bx	lr

08112740 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8112740:	b580      	push	{r7, lr}
 8112742:	b086      	sub	sp, #24
 8112744:	af00      	add	r7, sp, #0
 8112746:	60f8      	str	r0, [r7, #12]
 8112748:	60b9      	str	r1, [r7, #8]
 811274a:	607a      	str	r2, [r7, #4]
 811274c:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 811274e:	2355      	movs	r3, #85	@ 0x55
 8112750:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8112752:	687a      	ldr	r2, [r7, #4]
 8112754:	6979      	ldr	r1, [r7, #20]
 8112756:	68b8      	ldr	r0, [r7, #8]
 8112758:	f00f ff2a 	bl	81225b0 <memset>
 811275c:	4602      	mov	r2, r0
 811275e:	68bb      	ldr	r3, [r7, #8]
 8112760:	4293      	cmp	r3, r2
 8112762:	d00b      	beq.n	811277c <prvInitialiseNewStreamBuffer+0x3c>
	__asm volatile
 8112764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8112768:	f383 8811 	msr	BASEPRI, r3
 811276c:	f3bf 8f6f 	isb	sy
 8112770:	f3bf 8f4f 	dsb	sy
 8112774:	613b      	str	r3, [r7, #16]
}
 8112776:	bf00      	nop
 8112778:	bf00      	nop
 811277a:	e7fd      	b.n	8112778 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 811277c:	2224      	movs	r2, #36	@ 0x24
 811277e:	2100      	movs	r1, #0
 8112780:	68f8      	ldr	r0, [r7, #12]
 8112782:	f00f ff15 	bl	81225b0 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8112786:	68fb      	ldr	r3, [r7, #12]
 8112788:	68ba      	ldr	r2, [r7, #8]
 811278a:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 811278c:	68fb      	ldr	r3, [r7, #12]
 811278e:	687a      	ldr	r2, [r7, #4]
 8112790:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8112792:	68fb      	ldr	r3, [r7, #12]
 8112794:	683a      	ldr	r2, [r7, #0]
 8112796:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 8112798:	68fb      	ldr	r3, [r7, #12]
 811279a:	f897 2020 	ldrb.w	r2, [r7, #32]
 811279e:	771a      	strb	r2, [r3, #28]
}
 81127a0:	bf00      	nop
 81127a2:	3718      	adds	r7, #24
 81127a4:	46bd      	mov	sp, r7
 81127a6:	bd80      	pop	{r7, pc}

081127a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 81127a8:	b580      	push	{r7, lr}
 81127aa:	b08e      	sub	sp, #56	@ 0x38
 81127ac:	af04      	add	r7, sp, #16
 81127ae:	60f8      	str	r0, [r7, #12]
 81127b0:	60b9      	str	r1, [r7, #8]
 81127b2:	607a      	str	r2, [r7, #4]
 81127b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 81127b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81127b8:	2b00      	cmp	r3, #0
 81127ba:	d10b      	bne.n	81127d4 <xTaskCreateStatic+0x2c>
	__asm volatile
 81127bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81127c0:	f383 8811 	msr	BASEPRI, r3
 81127c4:	f3bf 8f6f 	isb	sy
 81127c8:	f3bf 8f4f 	dsb	sy
 81127cc:	623b      	str	r3, [r7, #32]
}
 81127ce:	bf00      	nop
 81127d0:	bf00      	nop
 81127d2:	e7fd      	b.n	81127d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 81127d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81127d6:	2b00      	cmp	r3, #0
 81127d8:	d10b      	bne.n	81127f2 <xTaskCreateStatic+0x4a>
	__asm volatile
 81127da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81127de:	f383 8811 	msr	BASEPRI, r3
 81127e2:	f3bf 8f6f 	isb	sy
 81127e6:	f3bf 8f4f 	dsb	sy
 81127ea:	61fb      	str	r3, [r7, #28]
}
 81127ec:	bf00      	nop
 81127ee:	bf00      	nop
 81127f0:	e7fd      	b.n	81127ee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 81127f2:	23a8      	movs	r3, #168	@ 0xa8
 81127f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 81127f6:	693b      	ldr	r3, [r7, #16]
 81127f8:	2ba8      	cmp	r3, #168	@ 0xa8
 81127fa:	d00b      	beq.n	8112814 <xTaskCreateStatic+0x6c>
	__asm volatile
 81127fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8112800:	f383 8811 	msr	BASEPRI, r3
 8112804:	f3bf 8f6f 	isb	sy
 8112808:	f3bf 8f4f 	dsb	sy
 811280c:	61bb      	str	r3, [r7, #24]
}
 811280e:	bf00      	nop
 8112810:	bf00      	nop
 8112812:	e7fd      	b.n	8112810 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8112814:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8112816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8112818:	2b00      	cmp	r3, #0
 811281a:	d01e      	beq.n	811285a <xTaskCreateStatic+0xb2>
 811281c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811281e:	2b00      	cmp	r3, #0
 8112820:	d01b      	beq.n	811285a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8112822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8112824:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8112826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112828:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 811282a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 811282c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811282e:	2202      	movs	r2, #2
 8112830:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8112834:	2300      	movs	r3, #0
 8112836:	9303      	str	r3, [sp, #12]
 8112838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811283a:	9302      	str	r3, [sp, #8]
 811283c:	f107 0314 	add.w	r3, r7, #20
 8112840:	9301      	str	r3, [sp, #4]
 8112842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112844:	9300      	str	r3, [sp, #0]
 8112846:	683b      	ldr	r3, [r7, #0]
 8112848:	687a      	ldr	r2, [r7, #4]
 811284a:	68b9      	ldr	r1, [r7, #8]
 811284c:	68f8      	ldr	r0, [r7, #12]
 811284e:	f000 f851 	bl	81128f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8112852:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8112854:	f000 f8f6 	bl	8112a44 <prvAddNewTaskToReadyList>
 8112858:	e001      	b.n	811285e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 811285a:	2300      	movs	r3, #0
 811285c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 811285e:	697b      	ldr	r3, [r7, #20]
	}
 8112860:	4618      	mov	r0, r3
 8112862:	3728      	adds	r7, #40	@ 0x28
 8112864:	46bd      	mov	sp, r7
 8112866:	bd80      	pop	{r7, pc}

08112868 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8112868:	b580      	push	{r7, lr}
 811286a:	b08c      	sub	sp, #48	@ 0x30
 811286c:	af04      	add	r7, sp, #16
 811286e:	60f8      	str	r0, [r7, #12]
 8112870:	60b9      	str	r1, [r7, #8]
 8112872:	603b      	str	r3, [r7, #0]
 8112874:	4613      	mov	r3, r2
 8112876:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8112878:	88fb      	ldrh	r3, [r7, #6]
 811287a:	009b      	lsls	r3, r3, #2
 811287c:	4618      	mov	r0, r3
 811287e:	f7fd fd8d 	bl	811039c <pvPortMalloc>
 8112882:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8112884:	697b      	ldr	r3, [r7, #20]
 8112886:	2b00      	cmp	r3, #0
 8112888:	d00e      	beq.n	81128a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 811288a:	20a8      	movs	r0, #168	@ 0xa8
 811288c:	f7fd fd86 	bl	811039c <pvPortMalloc>
 8112890:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8112892:	69fb      	ldr	r3, [r7, #28]
 8112894:	2b00      	cmp	r3, #0
 8112896:	d003      	beq.n	81128a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8112898:	69fb      	ldr	r3, [r7, #28]
 811289a:	697a      	ldr	r2, [r7, #20]
 811289c:	631a      	str	r2, [r3, #48]	@ 0x30
 811289e:	e005      	b.n	81128ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 81128a0:	6978      	ldr	r0, [r7, #20]
 81128a2:	f7fd fe49 	bl	8110538 <vPortFree>
 81128a6:	e001      	b.n	81128ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 81128a8:	2300      	movs	r3, #0
 81128aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 81128ac:	69fb      	ldr	r3, [r7, #28]
 81128ae:	2b00      	cmp	r3, #0
 81128b0:	d017      	beq.n	81128e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 81128b2:	69fb      	ldr	r3, [r7, #28]
 81128b4:	2200      	movs	r2, #0
 81128b6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 81128ba:	88fa      	ldrh	r2, [r7, #6]
 81128bc:	2300      	movs	r3, #0
 81128be:	9303      	str	r3, [sp, #12]
 81128c0:	69fb      	ldr	r3, [r7, #28]
 81128c2:	9302      	str	r3, [sp, #8]
 81128c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81128c6:	9301      	str	r3, [sp, #4]
 81128c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81128ca:	9300      	str	r3, [sp, #0]
 81128cc:	683b      	ldr	r3, [r7, #0]
 81128ce:	68b9      	ldr	r1, [r7, #8]
 81128d0:	68f8      	ldr	r0, [r7, #12]
 81128d2:	f000 f80f 	bl	81128f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 81128d6:	69f8      	ldr	r0, [r7, #28]
 81128d8:	f000 f8b4 	bl	8112a44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 81128dc:	2301      	movs	r3, #1
 81128de:	61bb      	str	r3, [r7, #24]
 81128e0:	e002      	b.n	81128e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 81128e2:	f04f 33ff 	mov.w	r3, #4294967295
 81128e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 81128e8:	69bb      	ldr	r3, [r7, #24]
	}
 81128ea:	4618      	mov	r0, r3
 81128ec:	3720      	adds	r7, #32
 81128ee:	46bd      	mov	sp, r7
 81128f0:	bd80      	pop	{r7, pc}
	...

081128f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 81128f4:	b580      	push	{r7, lr}
 81128f6:	b088      	sub	sp, #32
 81128f8:	af00      	add	r7, sp, #0
 81128fa:	60f8      	str	r0, [r7, #12]
 81128fc:	60b9      	str	r1, [r7, #8]
 81128fe:	607a      	str	r2, [r7, #4]
 8112900:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8112902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112904:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8112906:	687b      	ldr	r3, [r7, #4]
 8112908:	009b      	lsls	r3, r3, #2
 811290a:	461a      	mov	r2, r3
 811290c:	21a5      	movs	r1, #165	@ 0xa5
 811290e:	f00f fe4f 	bl	81225b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8112912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112914:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8112916:	687b      	ldr	r3, [r7, #4]
 8112918:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 811291c:	3b01      	subs	r3, #1
 811291e:	009b      	lsls	r3, r3, #2
 8112920:	4413      	add	r3, r2
 8112922:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8112924:	69bb      	ldr	r3, [r7, #24]
 8112926:	f023 0307 	bic.w	r3, r3, #7
 811292a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 811292c:	69bb      	ldr	r3, [r7, #24]
 811292e:	f003 0307 	and.w	r3, r3, #7
 8112932:	2b00      	cmp	r3, #0
 8112934:	d00b      	beq.n	811294e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8112936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811293a:	f383 8811 	msr	BASEPRI, r3
 811293e:	f3bf 8f6f 	isb	sy
 8112942:	f3bf 8f4f 	dsb	sy
 8112946:	617b      	str	r3, [r7, #20]
}
 8112948:	bf00      	nop
 811294a:	bf00      	nop
 811294c:	e7fd      	b.n	811294a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 811294e:	68bb      	ldr	r3, [r7, #8]
 8112950:	2b00      	cmp	r3, #0
 8112952:	d01f      	beq.n	8112994 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8112954:	2300      	movs	r3, #0
 8112956:	61fb      	str	r3, [r7, #28]
 8112958:	e012      	b.n	8112980 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 811295a:	68ba      	ldr	r2, [r7, #8]
 811295c:	69fb      	ldr	r3, [r7, #28]
 811295e:	4413      	add	r3, r2
 8112960:	7819      	ldrb	r1, [r3, #0]
 8112962:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8112964:	69fb      	ldr	r3, [r7, #28]
 8112966:	4413      	add	r3, r2
 8112968:	3334      	adds	r3, #52	@ 0x34
 811296a:	460a      	mov	r2, r1
 811296c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 811296e:	68ba      	ldr	r2, [r7, #8]
 8112970:	69fb      	ldr	r3, [r7, #28]
 8112972:	4413      	add	r3, r2
 8112974:	781b      	ldrb	r3, [r3, #0]
 8112976:	2b00      	cmp	r3, #0
 8112978:	d006      	beq.n	8112988 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 811297a:	69fb      	ldr	r3, [r7, #28]
 811297c:	3301      	adds	r3, #1
 811297e:	61fb      	str	r3, [r7, #28]
 8112980:	69fb      	ldr	r3, [r7, #28]
 8112982:	2b0f      	cmp	r3, #15
 8112984:	d9e9      	bls.n	811295a <prvInitialiseNewTask+0x66>
 8112986:	e000      	b.n	811298a <prvInitialiseNewTask+0x96>
			{
				break;
 8112988:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 811298a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811298c:	2200      	movs	r2, #0
 811298e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8112992:	e003      	b.n	811299c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8112994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112996:	2200      	movs	r2, #0
 8112998:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 811299c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811299e:	2b37      	cmp	r3, #55	@ 0x37
 81129a0:	d901      	bls.n	81129a6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 81129a2:	2337      	movs	r3, #55	@ 0x37
 81129a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 81129a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81129a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 81129aa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 81129ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81129ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 81129b0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 81129b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81129b4:	2200      	movs	r2, #0
 81129b6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 81129b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81129ba:	3304      	adds	r3, #4
 81129bc:	4618      	mov	r0, r3
 81129be:	f7fd fefb 	bl	81107b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 81129c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81129c4:	3318      	adds	r3, #24
 81129c6:	4618      	mov	r0, r3
 81129c8:	f7fd fef6 	bl	81107b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 81129cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81129ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81129d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81129d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81129d4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 81129d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81129da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 81129dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81129de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81129e0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 81129e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81129e4:	2200      	movs	r2, #0
 81129e6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 81129ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81129ec:	2200      	movs	r2, #0
 81129ee:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 81129f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81129f4:	3354      	adds	r3, #84	@ 0x54
 81129f6:	224c      	movs	r2, #76	@ 0x4c
 81129f8:	2100      	movs	r1, #0
 81129fa:	4618      	mov	r0, r3
 81129fc:	f00f fdd8 	bl	81225b0 <memset>
 8112a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112a02:	4a0d      	ldr	r2, [pc, #52]	@ (8112a38 <prvInitialiseNewTask+0x144>)
 8112a04:	659a      	str	r2, [r3, #88]	@ 0x58
 8112a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112a08:	4a0c      	ldr	r2, [pc, #48]	@ (8112a3c <prvInitialiseNewTask+0x148>)
 8112a0a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8112a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112a0e:	4a0c      	ldr	r2, [pc, #48]	@ (8112a40 <prvInitialiseNewTask+0x14c>)
 8112a10:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8112a12:	683a      	ldr	r2, [r7, #0]
 8112a14:	68f9      	ldr	r1, [r7, #12]
 8112a16:	69b8      	ldr	r0, [r7, #24]
 8112a18:	f7fd ff62 	bl	81108e0 <pxPortInitialiseStack>
 8112a1c:	4602      	mov	r2, r0
 8112a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112a20:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8112a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112a24:	2b00      	cmp	r3, #0
 8112a26:	d002      	beq.n	8112a2e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8112a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112a2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8112a2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8112a2e:	bf00      	nop
 8112a30:	3720      	adds	r7, #32
 8112a32:	46bd      	mov	sp, r7
 8112a34:	bd80      	pop	{r7, pc}
 8112a36:	bf00      	nop
 8112a38:	10011ed8 	.word	0x10011ed8
 8112a3c:	10011f40 	.word	0x10011f40
 8112a40:	10011fa8 	.word	0x10011fa8

08112a44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8112a44:	b580      	push	{r7, lr}
 8112a46:	b082      	sub	sp, #8
 8112a48:	af00      	add	r7, sp, #0
 8112a4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8112a4c:	f7fe f87c 	bl	8110b48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8112a50:	4b2d      	ldr	r3, [pc, #180]	@ (8112b08 <prvAddNewTaskToReadyList+0xc4>)
 8112a52:	681b      	ldr	r3, [r3, #0]
 8112a54:	3301      	adds	r3, #1
 8112a56:	4a2c      	ldr	r2, [pc, #176]	@ (8112b08 <prvAddNewTaskToReadyList+0xc4>)
 8112a58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8112a5a:	4b2c      	ldr	r3, [pc, #176]	@ (8112b0c <prvAddNewTaskToReadyList+0xc8>)
 8112a5c:	681b      	ldr	r3, [r3, #0]
 8112a5e:	2b00      	cmp	r3, #0
 8112a60:	d109      	bne.n	8112a76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8112a62:	4a2a      	ldr	r2, [pc, #168]	@ (8112b0c <prvAddNewTaskToReadyList+0xc8>)
 8112a64:	687b      	ldr	r3, [r7, #4]
 8112a66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8112a68:	4b27      	ldr	r3, [pc, #156]	@ (8112b08 <prvAddNewTaskToReadyList+0xc4>)
 8112a6a:	681b      	ldr	r3, [r3, #0]
 8112a6c:	2b01      	cmp	r3, #1
 8112a6e:	d110      	bne.n	8112a92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8112a70:	f000 fc68 	bl	8113344 <prvInitialiseTaskLists>
 8112a74:	e00d      	b.n	8112a92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8112a76:	4b26      	ldr	r3, [pc, #152]	@ (8112b10 <prvAddNewTaskToReadyList+0xcc>)
 8112a78:	681b      	ldr	r3, [r3, #0]
 8112a7a:	2b00      	cmp	r3, #0
 8112a7c:	d109      	bne.n	8112a92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8112a7e:	4b23      	ldr	r3, [pc, #140]	@ (8112b0c <prvAddNewTaskToReadyList+0xc8>)
 8112a80:	681b      	ldr	r3, [r3, #0]
 8112a82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8112a84:	687b      	ldr	r3, [r7, #4]
 8112a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8112a88:	429a      	cmp	r2, r3
 8112a8a:	d802      	bhi.n	8112a92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8112a8c:	4a1f      	ldr	r2, [pc, #124]	@ (8112b0c <prvAddNewTaskToReadyList+0xc8>)
 8112a8e:	687b      	ldr	r3, [r7, #4]
 8112a90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8112a92:	4b20      	ldr	r3, [pc, #128]	@ (8112b14 <prvAddNewTaskToReadyList+0xd0>)
 8112a94:	681b      	ldr	r3, [r3, #0]
 8112a96:	3301      	adds	r3, #1
 8112a98:	4a1e      	ldr	r2, [pc, #120]	@ (8112b14 <prvAddNewTaskToReadyList+0xd0>)
 8112a9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8112a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8112b14 <prvAddNewTaskToReadyList+0xd0>)
 8112a9e:	681a      	ldr	r2, [r3, #0]
 8112aa0:	687b      	ldr	r3, [r7, #4]
 8112aa2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8112aa4:	687b      	ldr	r3, [r7, #4]
 8112aa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8112aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8112b18 <prvAddNewTaskToReadyList+0xd4>)
 8112aaa:	681b      	ldr	r3, [r3, #0]
 8112aac:	429a      	cmp	r2, r3
 8112aae:	d903      	bls.n	8112ab8 <prvAddNewTaskToReadyList+0x74>
 8112ab0:	687b      	ldr	r3, [r7, #4]
 8112ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8112ab4:	4a18      	ldr	r2, [pc, #96]	@ (8112b18 <prvAddNewTaskToReadyList+0xd4>)
 8112ab6:	6013      	str	r3, [r2, #0]
 8112ab8:	687b      	ldr	r3, [r7, #4]
 8112aba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8112abc:	4613      	mov	r3, r2
 8112abe:	009b      	lsls	r3, r3, #2
 8112ac0:	4413      	add	r3, r2
 8112ac2:	009b      	lsls	r3, r3, #2
 8112ac4:	4a15      	ldr	r2, [pc, #84]	@ (8112b1c <prvAddNewTaskToReadyList+0xd8>)
 8112ac6:	441a      	add	r2, r3
 8112ac8:	687b      	ldr	r3, [r7, #4]
 8112aca:	3304      	adds	r3, #4
 8112acc:	4619      	mov	r1, r3
 8112ace:	4610      	mov	r0, r2
 8112ad0:	f7fd fe7f 	bl	81107d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8112ad4:	f7fe f86a 	bl	8110bac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8112ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8112b10 <prvAddNewTaskToReadyList+0xcc>)
 8112ada:	681b      	ldr	r3, [r3, #0]
 8112adc:	2b00      	cmp	r3, #0
 8112ade:	d00e      	beq.n	8112afe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8112ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8112b0c <prvAddNewTaskToReadyList+0xc8>)
 8112ae2:	681b      	ldr	r3, [r3, #0]
 8112ae4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8112ae6:	687b      	ldr	r3, [r7, #4]
 8112ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8112aea:	429a      	cmp	r2, r3
 8112aec:	d207      	bcs.n	8112afe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8112aee:	4b0c      	ldr	r3, [pc, #48]	@ (8112b20 <prvAddNewTaskToReadyList+0xdc>)
 8112af0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8112af4:	601a      	str	r2, [r3, #0]
 8112af6:	f3bf 8f4f 	dsb	sy
 8112afa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8112afe:	bf00      	nop
 8112b00:	3708      	adds	r7, #8
 8112b02:	46bd      	mov	sp, r7
 8112b04:	bd80      	pop	{r7, pc}
 8112b06:	bf00      	nop
 8112b08:	1000b068 	.word	0x1000b068
 8112b0c:	1000ab94 	.word	0x1000ab94
 8112b10:	1000b074 	.word	0x1000b074
 8112b14:	1000b084 	.word	0x1000b084
 8112b18:	1000b070 	.word	0x1000b070
 8112b1c:	1000ab98 	.word	0x1000ab98
 8112b20:	e000ed04 	.word	0xe000ed04

08112b24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8112b24:	b580      	push	{r7, lr}
 8112b26:	b084      	sub	sp, #16
 8112b28:	af00      	add	r7, sp, #0
 8112b2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8112b2c:	2300      	movs	r3, #0
 8112b2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8112b30:	687b      	ldr	r3, [r7, #4]
 8112b32:	2b00      	cmp	r3, #0
 8112b34:	d018      	beq.n	8112b68 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8112b36:	4b14      	ldr	r3, [pc, #80]	@ (8112b88 <vTaskDelay+0x64>)
 8112b38:	681b      	ldr	r3, [r3, #0]
 8112b3a:	2b00      	cmp	r3, #0
 8112b3c:	d00b      	beq.n	8112b56 <vTaskDelay+0x32>
	__asm volatile
 8112b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8112b42:	f383 8811 	msr	BASEPRI, r3
 8112b46:	f3bf 8f6f 	isb	sy
 8112b4a:	f3bf 8f4f 	dsb	sy
 8112b4e:	60bb      	str	r3, [r7, #8]
}
 8112b50:	bf00      	nop
 8112b52:	bf00      	nop
 8112b54:	e7fd      	b.n	8112b52 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8112b56:	f000 f88b 	bl	8112c70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8112b5a:	2100      	movs	r1, #0
 8112b5c:	6878      	ldr	r0, [r7, #4]
 8112b5e:	f000 ffbf 	bl	8113ae0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8112b62:	f000 f893 	bl	8112c8c <xTaskResumeAll>
 8112b66:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8112b68:	68fb      	ldr	r3, [r7, #12]
 8112b6a:	2b00      	cmp	r3, #0
 8112b6c:	d107      	bne.n	8112b7e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8112b6e:	4b07      	ldr	r3, [pc, #28]	@ (8112b8c <vTaskDelay+0x68>)
 8112b70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8112b74:	601a      	str	r2, [r3, #0]
 8112b76:	f3bf 8f4f 	dsb	sy
 8112b7a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8112b7e:	bf00      	nop
 8112b80:	3710      	adds	r7, #16
 8112b82:	46bd      	mov	sp, r7
 8112b84:	bd80      	pop	{r7, pc}
 8112b86:	bf00      	nop
 8112b88:	1000b090 	.word	0x1000b090
 8112b8c:	e000ed04 	.word	0xe000ed04

08112b90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8112b90:	b580      	push	{r7, lr}
 8112b92:	b08a      	sub	sp, #40	@ 0x28
 8112b94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8112b96:	2300      	movs	r3, #0
 8112b98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8112b9a:	2300      	movs	r3, #0
 8112b9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8112b9e:	463a      	mov	r2, r7
 8112ba0:	1d39      	adds	r1, r7, #4
 8112ba2:	f107 0308 	add.w	r3, r7, #8
 8112ba6:	4618      	mov	r0, r3
 8112ba8:	f7fd fbc4 	bl	8110334 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8112bac:	6839      	ldr	r1, [r7, #0]
 8112bae:	687b      	ldr	r3, [r7, #4]
 8112bb0:	68ba      	ldr	r2, [r7, #8]
 8112bb2:	9202      	str	r2, [sp, #8]
 8112bb4:	9301      	str	r3, [sp, #4]
 8112bb6:	2300      	movs	r3, #0
 8112bb8:	9300      	str	r3, [sp, #0]
 8112bba:	2300      	movs	r3, #0
 8112bbc:	460a      	mov	r2, r1
 8112bbe:	4924      	ldr	r1, [pc, #144]	@ (8112c50 <vTaskStartScheduler+0xc0>)
 8112bc0:	4824      	ldr	r0, [pc, #144]	@ (8112c54 <vTaskStartScheduler+0xc4>)
 8112bc2:	f7ff fdf1 	bl	81127a8 <xTaskCreateStatic>
 8112bc6:	4603      	mov	r3, r0
 8112bc8:	4a23      	ldr	r2, [pc, #140]	@ (8112c58 <vTaskStartScheduler+0xc8>)
 8112bca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8112bcc:	4b22      	ldr	r3, [pc, #136]	@ (8112c58 <vTaskStartScheduler+0xc8>)
 8112bce:	681b      	ldr	r3, [r3, #0]
 8112bd0:	2b00      	cmp	r3, #0
 8112bd2:	d002      	beq.n	8112bda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8112bd4:	2301      	movs	r3, #1
 8112bd6:	617b      	str	r3, [r7, #20]
 8112bd8:	e001      	b.n	8112bde <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8112bda:	2300      	movs	r3, #0
 8112bdc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8112bde:	697b      	ldr	r3, [r7, #20]
 8112be0:	2b01      	cmp	r3, #1
 8112be2:	d102      	bne.n	8112bea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8112be4:	f000 ffd0 	bl	8113b88 <xTimerCreateTimerTask>
 8112be8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8112bea:	697b      	ldr	r3, [r7, #20]
 8112bec:	2b01      	cmp	r3, #1
 8112bee:	d11b      	bne.n	8112c28 <vTaskStartScheduler+0x98>
	__asm volatile
 8112bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8112bf4:	f383 8811 	msr	BASEPRI, r3
 8112bf8:	f3bf 8f6f 	isb	sy
 8112bfc:	f3bf 8f4f 	dsb	sy
 8112c00:	613b      	str	r3, [r7, #16]
}
 8112c02:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8112c04:	4b15      	ldr	r3, [pc, #84]	@ (8112c5c <vTaskStartScheduler+0xcc>)
 8112c06:	681b      	ldr	r3, [r3, #0]
 8112c08:	3354      	adds	r3, #84	@ 0x54
 8112c0a:	4a15      	ldr	r2, [pc, #84]	@ (8112c60 <vTaskStartScheduler+0xd0>)
 8112c0c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8112c0e:	4b15      	ldr	r3, [pc, #84]	@ (8112c64 <vTaskStartScheduler+0xd4>)
 8112c10:	f04f 32ff 	mov.w	r2, #4294967295
 8112c14:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8112c16:	4b14      	ldr	r3, [pc, #80]	@ (8112c68 <vTaskStartScheduler+0xd8>)
 8112c18:	2201      	movs	r2, #1
 8112c1a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8112c1c:	4b13      	ldr	r3, [pc, #76]	@ (8112c6c <vTaskStartScheduler+0xdc>)
 8112c1e:	2200      	movs	r2, #0
 8112c20:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8112c22:	f7fd feed 	bl	8110a00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8112c26:	e00f      	b.n	8112c48 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8112c28:	697b      	ldr	r3, [r7, #20]
 8112c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8112c2e:	d10b      	bne.n	8112c48 <vTaskStartScheduler+0xb8>
	__asm volatile
 8112c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8112c34:	f383 8811 	msr	BASEPRI, r3
 8112c38:	f3bf 8f6f 	isb	sy
 8112c3c:	f3bf 8f4f 	dsb	sy
 8112c40:	60fb      	str	r3, [r7, #12]
}
 8112c42:	bf00      	nop
 8112c44:	bf00      	nop
 8112c46:	e7fd      	b.n	8112c44 <vTaskStartScheduler+0xb4>
}
 8112c48:	bf00      	nop
 8112c4a:	3718      	adds	r7, #24
 8112c4c:	46bd      	mov	sp, r7
 8112c4e:	bd80      	pop	{r7, pc}
 8112c50:	08123b4c 	.word	0x08123b4c
 8112c54:	08113315 	.word	0x08113315
 8112c58:	1000b08c 	.word	0x1000b08c
 8112c5c:	1000ab94 	.word	0x1000ab94
 8112c60:	10000040 	.word	0x10000040
 8112c64:	1000b088 	.word	0x1000b088
 8112c68:	1000b074 	.word	0x1000b074
 8112c6c:	1000b06c 	.word	0x1000b06c

08112c70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8112c70:	b480      	push	{r7}
 8112c72:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8112c74:	4b04      	ldr	r3, [pc, #16]	@ (8112c88 <vTaskSuspendAll+0x18>)
 8112c76:	681b      	ldr	r3, [r3, #0]
 8112c78:	3301      	adds	r3, #1
 8112c7a:	4a03      	ldr	r2, [pc, #12]	@ (8112c88 <vTaskSuspendAll+0x18>)
 8112c7c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8112c7e:	bf00      	nop
 8112c80:	46bd      	mov	sp, r7
 8112c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112c86:	4770      	bx	lr
 8112c88:	1000b090 	.word	0x1000b090

08112c8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8112c8c:	b580      	push	{r7, lr}
 8112c8e:	b084      	sub	sp, #16
 8112c90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8112c92:	2300      	movs	r3, #0
 8112c94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8112c96:	2300      	movs	r3, #0
 8112c98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8112c9a:	4b42      	ldr	r3, [pc, #264]	@ (8112da4 <xTaskResumeAll+0x118>)
 8112c9c:	681b      	ldr	r3, [r3, #0]
 8112c9e:	2b00      	cmp	r3, #0
 8112ca0:	d10b      	bne.n	8112cba <xTaskResumeAll+0x2e>
	__asm volatile
 8112ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8112ca6:	f383 8811 	msr	BASEPRI, r3
 8112caa:	f3bf 8f6f 	isb	sy
 8112cae:	f3bf 8f4f 	dsb	sy
 8112cb2:	603b      	str	r3, [r7, #0]
}
 8112cb4:	bf00      	nop
 8112cb6:	bf00      	nop
 8112cb8:	e7fd      	b.n	8112cb6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8112cba:	f7fd ff45 	bl	8110b48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8112cbe:	4b39      	ldr	r3, [pc, #228]	@ (8112da4 <xTaskResumeAll+0x118>)
 8112cc0:	681b      	ldr	r3, [r3, #0]
 8112cc2:	3b01      	subs	r3, #1
 8112cc4:	4a37      	ldr	r2, [pc, #220]	@ (8112da4 <xTaskResumeAll+0x118>)
 8112cc6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8112cc8:	4b36      	ldr	r3, [pc, #216]	@ (8112da4 <xTaskResumeAll+0x118>)
 8112cca:	681b      	ldr	r3, [r3, #0]
 8112ccc:	2b00      	cmp	r3, #0
 8112cce:	d162      	bne.n	8112d96 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8112cd0:	4b35      	ldr	r3, [pc, #212]	@ (8112da8 <xTaskResumeAll+0x11c>)
 8112cd2:	681b      	ldr	r3, [r3, #0]
 8112cd4:	2b00      	cmp	r3, #0
 8112cd6:	d05e      	beq.n	8112d96 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8112cd8:	e02f      	b.n	8112d3a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8112cda:	4b34      	ldr	r3, [pc, #208]	@ (8112dac <xTaskResumeAll+0x120>)
 8112cdc:	68db      	ldr	r3, [r3, #12]
 8112cde:	68db      	ldr	r3, [r3, #12]
 8112ce0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8112ce2:	68fb      	ldr	r3, [r7, #12]
 8112ce4:	3318      	adds	r3, #24
 8112ce6:	4618      	mov	r0, r3
 8112ce8:	f7fd fdd0 	bl	811088c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8112cec:	68fb      	ldr	r3, [r7, #12]
 8112cee:	3304      	adds	r3, #4
 8112cf0:	4618      	mov	r0, r3
 8112cf2:	f7fd fdcb 	bl	811088c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8112cf6:	68fb      	ldr	r3, [r7, #12]
 8112cf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8112cfa:	4b2d      	ldr	r3, [pc, #180]	@ (8112db0 <xTaskResumeAll+0x124>)
 8112cfc:	681b      	ldr	r3, [r3, #0]
 8112cfe:	429a      	cmp	r2, r3
 8112d00:	d903      	bls.n	8112d0a <xTaskResumeAll+0x7e>
 8112d02:	68fb      	ldr	r3, [r7, #12]
 8112d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8112d06:	4a2a      	ldr	r2, [pc, #168]	@ (8112db0 <xTaskResumeAll+0x124>)
 8112d08:	6013      	str	r3, [r2, #0]
 8112d0a:	68fb      	ldr	r3, [r7, #12]
 8112d0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8112d0e:	4613      	mov	r3, r2
 8112d10:	009b      	lsls	r3, r3, #2
 8112d12:	4413      	add	r3, r2
 8112d14:	009b      	lsls	r3, r3, #2
 8112d16:	4a27      	ldr	r2, [pc, #156]	@ (8112db4 <xTaskResumeAll+0x128>)
 8112d18:	441a      	add	r2, r3
 8112d1a:	68fb      	ldr	r3, [r7, #12]
 8112d1c:	3304      	adds	r3, #4
 8112d1e:	4619      	mov	r1, r3
 8112d20:	4610      	mov	r0, r2
 8112d22:	f7fd fd56 	bl	81107d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8112d26:	68fb      	ldr	r3, [r7, #12]
 8112d28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8112d2a:	4b23      	ldr	r3, [pc, #140]	@ (8112db8 <xTaskResumeAll+0x12c>)
 8112d2c:	681b      	ldr	r3, [r3, #0]
 8112d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8112d30:	429a      	cmp	r2, r3
 8112d32:	d302      	bcc.n	8112d3a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8112d34:	4b21      	ldr	r3, [pc, #132]	@ (8112dbc <xTaskResumeAll+0x130>)
 8112d36:	2201      	movs	r2, #1
 8112d38:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8112d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8112dac <xTaskResumeAll+0x120>)
 8112d3c:	681b      	ldr	r3, [r3, #0]
 8112d3e:	2b00      	cmp	r3, #0
 8112d40:	d1cb      	bne.n	8112cda <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8112d42:	68fb      	ldr	r3, [r7, #12]
 8112d44:	2b00      	cmp	r3, #0
 8112d46:	d001      	beq.n	8112d4c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8112d48:	f000 fba0 	bl	811348c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8112d4c:	4b1c      	ldr	r3, [pc, #112]	@ (8112dc0 <xTaskResumeAll+0x134>)
 8112d4e:	681b      	ldr	r3, [r3, #0]
 8112d50:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8112d52:	687b      	ldr	r3, [r7, #4]
 8112d54:	2b00      	cmp	r3, #0
 8112d56:	d010      	beq.n	8112d7a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8112d58:	f000 f858 	bl	8112e0c <xTaskIncrementTick>
 8112d5c:	4603      	mov	r3, r0
 8112d5e:	2b00      	cmp	r3, #0
 8112d60:	d002      	beq.n	8112d68 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8112d62:	4b16      	ldr	r3, [pc, #88]	@ (8112dbc <xTaskResumeAll+0x130>)
 8112d64:	2201      	movs	r2, #1
 8112d66:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8112d68:	687b      	ldr	r3, [r7, #4]
 8112d6a:	3b01      	subs	r3, #1
 8112d6c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8112d6e:	687b      	ldr	r3, [r7, #4]
 8112d70:	2b00      	cmp	r3, #0
 8112d72:	d1f1      	bne.n	8112d58 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8112d74:	4b12      	ldr	r3, [pc, #72]	@ (8112dc0 <xTaskResumeAll+0x134>)
 8112d76:	2200      	movs	r2, #0
 8112d78:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8112d7a:	4b10      	ldr	r3, [pc, #64]	@ (8112dbc <xTaskResumeAll+0x130>)
 8112d7c:	681b      	ldr	r3, [r3, #0]
 8112d7e:	2b00      	cmp	r3, #0
 8112d80:	d009      	beq.n	8112d96 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8112d82:	2301      	movs	r3, #1
 8112d84:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8112d86:	4b0f      	ldr	r3, [pc, #60]	@ (8112dc4 <xTaskResumeAll+0x138>)
 8112d88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8112d8c:	601a      	str	r2, [r3, #0]
 8112d8e:	f3bf 8f4f 	dsb	sy
 8112d92:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8112d96:	f7fd ff09 	bl	8110bac <vPortExitCritical>

	return xAlreadyYielded;
 8112d9a:	68bb      	ldr	r3, [r7, #8]
}
 8112d9c:	4618      	mov	r0, r3
 8112d9e:	3710      	adds	r7, #16
 8112da0:	46bd      	mov	sp, r7
 8112da2:	bd80      	pop	{r7, pc}
 8112da4:	1000b090 	.word	0x1000b090
 8112da8:	1000b068 	.word	0x1000b068
 8112dac:	1000b028 	.word	0x1000b028
 8112db0:	1000b070 	.word	0x1000b070
 8112db4:	1000ab98 	.word	0x1000ab98
 8112db8:	1000ab94 	.word	0x1000ab94
 8112dbc:	1000b07c 	.word	0x1000b07c
 8112dc0:	1000b078 	.word	0x1000b078
 8112dc4:	e000ed04 	.word	0xe000ed04

08112dc8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8112dc8:	b480      	push	{r7}
 8112dca:	b083      	sub	sp, #12
 8112dcc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8112dce:	4b05      	ldr	r3, [pc, #20]	@ (8112de4 <xTaskGetTickCount+0x1c>)
 8112dd0:	681b      	ldr	r3, [r3, #0]
 8112dd2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8112dd4:	687b      	ldr	r3, [r7, #4]
}
 8112dd6:	4618      	mov	r0, r3
 8112dd8:	370c      	adds	r7, #12
 8112dda:	46bd      	mov	sp, r7
 8112ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112de0:	4770      	bx	lr
 8112de2:	bf00      	nop
 8112de4:	1000b06c 	.word	0x1000b06c

08112de8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8112de8:	b580      	push	{r7, lr}
 8112dea:	b082      	sub	sp, #8
 8112dec:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8112dee:	f7fd ff8b 	bl	8110d08 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8112df2:	2300      	movs	r3, #0
 8112df4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8112df6:	4b04      	ldr	r3, [pc, #16]	@ (8112e08 <xTaskGetTickCountFromISR+0x20>)
 8112df8:	681b      	ldr	r3, [r3, #0]
 8112dfa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8112dfc:	683b      	ldr	r3, [r7, #0]
}
 8112dfe:	4618      	mov	r0, r3
 8112e00:	3708      	adds	r7, #8
 8112e02:	46bd      	mov	sp, r7
 8112e04:	bd80      	pop	{r7, pc}
 8112e06:	bf00      	nop
 8112e08:	1000b06c 	.word	0x1000b06c

08112e0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8112e0c:	b580      	push	{r7, lr}
 8112e0e:	b086      	sub	sp, #24
 8112e10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8112e12:	2300      	movs	r3, #0
 8112e14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8112e16:	4b4f      	ldr	r3, [pc, #316]	@ (8112f54 <xTaskIncrementTick+0x148>)
 8112e18:	681b      	ldr	r3, [r3, #0]
 8112e1a:	2b00      	cmp	r3, #0
 8112e1c:	f040 8090 	bne.w	8112f40 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8112e20:	4b4d      	ldr	r3, [pc, #308]	@ (8112f58 <xTaskIncrementTick+0x14c>)
 8112e22:	681b      	ldr	r3, [r3, #0]
 8112e24:	3301      	adds	r3, #1
 8112e26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8112e28:	4a4b      	ldr	r2, [pc, #300]	@ (8112f58 <xTaskIncrementTick+0x14c>)
 8112e2a:	693b      	ldr	r3, [r7, #16]
 8112e2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8112e2e:	693b      	ldr	r3, [r7, #16]
 8112e30:	2b00      	cmp	r3, #0
 8112e32:	d121      	bne.n	8112e78 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8112e34:	4b49      	ldr	r3, [pc, #292]	@ (8112f5c <xTaskIncrementTick+0x150>)
 8112e36:	681b      	ldr	r3, [r3, #0]
 8112e38:	681b      	ldr	r3, [r3, #0]
 8112e3a:	2b00      	cmp	r3, #0
 8112e3c:	d00b      	beq.n	8112e56 <xTaskIncrementTick+0x4a>
	__asm volatile
 8112e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8112e42:	f383 8811 	msr	BASEPRI, r3
 8112e46:	f3bf 8f6f 	isb	sy
 8112e4a:	f3bf 8f4f 	dsb	sy
 8112e4e:	603b      	str	r3, [r7, #0]
}
 8112e50:	bf00      	nop
 8112e52:	bf00      	nop
 8112e54:	e7fd      	b.n	8112e52 <xTaskIncrementTick+0x46>
 8112e56:	4b41      	ldr	r3, [pc, #260]	@ (8112f5c <xTaskIncrementTick+0x150>)
 8112e58:	681b      	ldr	r3, [r3, #0]
 8112e5a:	60fb      	str	r3, [r7, #12]
 8112e5c:	4b40      	ldr	r3, [pc, #256]	@ (8112f60 <xTaskIncrementTick+0x154>)
 8112e5e:	681b      	ldr	r3, [r3, #0]
 8112e60:	4a3e      	ldr	r2, [pc, #248]	@ (8112f5c <xTaskIncrementTick+0x150>)
 8112e62:	6013      	str	r3, [r2, #0]
 8112e64:	4a3e      	ldr	r2, [pc, #248]	@ (8112f60 <xTaskIncrementTick+0x154>)
 8112e66:	68fb      	ldr	r3, [r7, #12]
 8112e68:	6013      	str	r3, [r2, #0]
 8112e6a:	4b3e      	ldr	r3, [pc, #248]	@ (8112f64 <xTaskIncrementTick+0x158>)
 8112e6c:	681b      	ldr	r3, [r3, #0]
 8112e6e:	3301      	adds	r3, #1
 8112e70:	4a3c      	ldr	r2, [pc, #240]	@ (8112f64 <xTaskIncrementTick+0x158>)
 8112e72:	6013      	str	r3, [r2, #0]
 8112e74:	f000 fb0a 	bl	811348c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8112e78:	4b3b      	ldr	r3, [pc, #236]	@ (8112f68 <xTaskIncrementTick+0x15c>)
 8112e7a:	681b      	ldr	r3, [r3, #0]
 8112e7c:	693a      	ldr	r2, [r7, #16]
 8112e7e:	429a      	cmp	r2, r3
 8112e80:	d349      	bcc.n	8112f16 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8112e82:	4b36      	ldr	r3, [pc, #216]	@ (8112f5c <xTaskIncrementTick+0x150>)
 8112e84:	681b      	ldr	r3, [r3, #0]
 8112e86:	681b      	ldr	r3, [r3, #0]
 8112e88:	2b00      	cmp	r3, #0
 8112e8a:	d104      	bne.n	8112e96 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8112e8c:	4b36      	ldr	r3, [pc, #216]	@ (8112f68 <xTaskIncrementTick+0x15c>)
 8112e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8112e92:	601a      	str	r2, [r3, #0]
					break;
 8112e94:	e03f      	b.n	8112f16 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8112e96:	4b31      	ldr	r3, [pc, #196]	@ (8112f5c <xTaskIncrementTick+0x150>)
 8112e98:	681b      	ldr	r3, [r3, #0]
 8112e9a:	68db      	ldr	r3, [r3, #12]
 8112e9c:	68db      	ldr	r3, [r3, #12]
 8112e9e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8112ea0:	68bb      	ldr	r3, [r7, #8]
 8112ea2:	685b      	ldr	r3, [r3, #4]
 8112ea4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8112ea6:	693a      	ldr	r2, [r7, #16]
 8112ea8:	687b      	ldr	r3, [r7, #4]
 8112eaa:	429a      	cmp	r2, r3
 8112eac:	d203      	bcs.n	8112eb6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8112eae:	4a2e      	ldr	r2, [pc, #184]	@ (8112f68 <xTaskIncrementTick+0x15c>)
 8112eb0:	687b      	ldr	r3, [r7, #4]
 8112eb2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8112eb4:	e02f      	b.n	8112f16 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8112eb6:	68bb      	ldr	r3, [r7, #8]
 8112eb8:	3304      	adds	r3, #4
 8112eba:	4618      	mov	r0, r3
 8112ebc:	f7fd fce6 	bl	811088c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8112ec0:	68bb      	ldr	r3, [r7, #8]
 8112ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8112ec4:	2b00      	cmp	r3, #0
 8112ec6:	d004      	beq.n	8112ed2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8112ec8:	68bb      	ldr	r3, [r7, #8]
 8112eca:	3318      	adds	r3, #24
 8112ecc:	4618      	mov	r0, r3
 8112ece:	f7fd fcdd 	bl	811088c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8112ed2:	68bb      	ldr	r3, [r7, #8]
 8112ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8112ed6:	4b25      	ldr	r3, [pc, #148]	@ (8112f6c <xTaskIncrementTick+0x160>)
 8112ed8:	681b      	ldr	r3, [r3, #0]
 8112eda:	429a      	cmp	r2, r3
 8112edc:	d903      	bls.n	8112ee6 <xTaskIncrementTick+0xda>
 8112ede:	68bb      	ldr	r3, [r7, #8]
 8112ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8112ee2:	4a22      	ldr	r2, [pc, #136]	@ (8112f6c <xTaskIncrementTick+0x160>)
 8112ee4:	6013      	str	r3, [r2, #0]
 8112ee6:	68bb      	ldr	r3, [r7, #8]
 8112ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8112eea:	4613      	mov	r3, r2
 8112eec:	009b      	lsls	r3, r3, #2
 8112eee:	4413      	add	r3, r2
 8112ef0:	009b      	lsls	r3, r3, #2
 8112ef2:	4a1f      	ldr	r2, [pc, #124]	@ (8112f70 <xTaskIncrementTick+0x164>)
 8112ef4:	441a      	add	r2, r3
 8112ef6:	68bb      	ldr	r3, [r7, #8]
 8112ef8:	3304      	adds	r3, #4
 8112efa:	4619      	mov	r1, r3
 8112efc:	4610      	mov	r0, r2
 8112efe:	f7fd fc68 	bl	81107d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8112f02:	68bb      	ldr	r3, [r7, #8]
 8112f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8112f06:	4b1b      	ldr	r3, [pc, #108]	@ (8112f74 <xTaskIncrementTick+0x168>)
 8112f08:	681b      	ldr	r3, [r3, #0]
 8112f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8112f0c:	429a      	cmp	r2, r3
 8112f0e:	d3b8      	bcc.n	8112e82 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8112f10:	2301      	movs	r3, #1
 8112f12:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8112f14:	e7b5      	b.n	8112e82 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8112f16:	4b17      	ldr	r3, [pc, #92]	@ (8112f74 <xTaskIncrementTick+0x168>)
 8112f18:	681b      	ldr	r3, [r3, #0]
 8112f1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8112f1c:	4914      	ldr	r1, [pc, #80]	@ (8112f70 <xTaskIncrementTick+0x164>)
 8112f1e:	4613      	mov	r3, r2
 8112f20:	009b      	lsls	r3, r3, #2
 8112f22:	4413      	add	r3, r2
 8112f24:	009b      	lsls	r3, r3, #2
 8112f26:	440b      	add	r3, r1
 8112f28:	681b      	ldr	r3, [r3, #0]
 8112f2a:	2b01      	cmp	r3, #1
 8112f2c:	d901      	bls.n	8112f32 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8112f2e:	2301      	movs	r3, #1
 8112f30:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8112f32:	4b11      	ldr	r3, [pc, #68]	@ (8112f78 <xTaskIncrementTick+0x16c>)
 8112f34:	681b      	ldr	r3, [r3, #0]
 8112f36:	2b00      	cmp	r3, #0
 8112f38:	d007      	beq.n	8112f4a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8112f3a:	2301      	movs	r3, #1
 8112f3c:	617b      	str	r3, [r7, #20]
 8112f3e:	e004      	b.n	8112f4a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8112f40:	4b0e      	ldr	r3, [pc, #56]	@ (8112f7c <xTaskIncrementTick+0x170>)
 8112f42:	681b      	ldr	r3, [r3, #0]
 8112f44:	3301      	adds	r3, #1
 8112f46:	4a0d      	ldr	r2, [pc, #52]	@ (8112f7c <xTaskIncrementTick+0x170>)
 8112f48:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8112f4a:	697b      	ldr	r3, [r7, #20]
}
 8112f4c:	4618      	mov	r0, r3
 8112f4e:	3718      	adds	r7, #24
 8112f50:	46bd      	mov	sp, r7
 8112f52:	bd80      	pop	{r7, pc}
 8112f54:	1000b090 	.word	0x1000b090
 8112f58:	1000b06c 	.word	0x1000b06c
 8112f5c:	1000b020 	.word	0x1000b020
 8112f60:	1000b024 	.word	0x1000b024
 8112f64:	1000b080 	.word	0x1000b080
 8112f68:	1000b088 	.word	0x1000b088
 8112f6c:	1000b070 	.word	0x1000b070
 8112f70:	1000ab98 	.word	0x1000ab98
 8112f74:	1000ab94 	.word	0x1000ab94
 8112f78:	1000b07c 	.word	0x1000b07c
 8112f7c:	1000b078 	.word	0x1000b078

08112f80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8112f80:	b480      	push	{r7}
 8112f82:	b085      	sub	sp, #20
 8112f84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8112f86:	4b2b      	ldr	r3, [pc, #172]	@ (8113034 <vTaskSwitchContext+0xb4>)
 8112f88:	681b      	ldr	r3, [r3, #0]
 8112f8a:	2b00      	cmp	r3, #0
 8112f8c:	d003      	beq.n	8112f96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8112f8e:	4b2a      	ldr	r3, [pc, #168]	@ (8113038 <vTaskSwitchContext+0xb8>)
 8112f90:	2201      	movs	r2, #1
 8112f92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8112f94:	e047      	b.n	8113026 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8112f96:	4b28      	ldr	r3, [pc, #160]	@ (8113038 <vTaskSwitchContext+0xb8>)
 8112f98:	2200      	movs	r2, #0
 8112f9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8112f9c:	4b27      	ldr	r3, [pc, #156]	@ (811303c <vTaskSwitchContext+0xbc>)
 8112f9e:	681b      	ldr	r3, [r3, #0]
 8112fa0:	60fb      	str	r3, [r7, #12]
 8112fa2:	e011      	b.n	8112fc8 <vTaskSwitchContext+0x48>
 8112fa4:	68fb      	ldr	r3, [r7, #12]
 8112fa6:	2b00      	cmp	r3, #0
 8112fa8:	d10b      	bne.n	8112fc2 <vTaskSwitchContext+0x42>
	__asm volatile
 8112faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8112fae:	f383 8811 	msr	BASEPRI, r3
 8112fb2:	f3bf 8f6f 	isb	sy
 8112fb6:	f3bf 8f4f 	dsb	sy
 8112fba:	607b      	str	r3, [r7, #4]
}
 8112fbc:	bf00      	nop
 8112fbe:	bf00      	nop
 8112fc0:	e7fd      	b.n	8112fbe <vTaskSwitchContext+0x3e>
 8112fc2:	68fb      	ldr	r3, [r7, #12]
 8112fc4:	3b01      	subs	r3, #1
 8112fc6:	60fb      	str	r3, [r7, #12]
 8112fc8:	491d      	ldr	r1, [pc, #116]	@ (8113040 <vTaskSwitchContext+0xc0>)
 8112fca:	68fa      	ldr	r2, [r7, #12]
 8112fcc:	4613      	mov	r3, r2
 8112fce:	009b      	lsls	r3, r3, #2
 8112fd0:	4413      	add	r3, r2
 8112fd2:	009b      	lsls	r3, r3, #2
 8112fd4:	440b      	add	r3, r1
 8112fd6:	681b      	ldr	r3, [r3, #0]
 8112fd8:	2b00      	cmp	r3, #0
 8112fda:	d0e3      	beq.n	8112fa4 <vTaskSwitchContext+0x24>
 8112fdc:	68fa      	ldr	r2, [r7, #12]
 8112fde:	4613      	mov	r3, r2
 8112fe0:	009b      	lsls	r3, r3, #2
 8112fe2:	4413      	add	r3, r2
 8112fe4:	009b      	lsls	r3, r3, #2
 8112fe6:	4a16      	ldr	r2, [pc, #88]	@ (8113040 <vTaskSwitchContext+0xc0>)
 8112fe8:	4413      	add	r3, r2
 8112fea:	60bb      	str	r3, [r7, #8]
 8112fec:	68bb      	ldr	r3, [r7, #8]
 8112fee:	685b      	ldr	r3, [r3, #4]
 8112ff0:	685a      	ldr	r2, [r3, #4]
 8112ff2:	68bb      	ldr	r3, [r7, #8]
 8112ff4:	605a      	str	r2, [r3, #4]
 8112ff6:	68bb      	ldr	r3, [r7, #8]
 8112ff8:	685a      	ldr	r2, [r3, #4]
 8112ffa:	68bb      	ldr	r3, [r7, #8]
 8112ffc:	3308      	adds	r3, #8
 8112ffe:	429a      	cmp	r2, r3
 8113000:	d104      	bne.n	811300c <vTaskSwitchContext+0x8c>
 8113002:	68bb      	ldr	r3, [r7, #8]
 8113004:	685b      	ldr	r3, [r3, #4]
 8113006:	685a      	ldr	r2, [r3, #4]
 8113008:	68bb      	ldr	r3, [r7, #8]
 811300a:	605a      	str	r2, [r3, #4]
 811300c:	68bb      	ldr	r3, [r7, #8]
 811300e:	685b      	ldr	r3, [r3, #4]
 8113010:	68db      	ldr	r3, [r3, #12]
 8113012:	4a0c      	ldr	r2, [pc, #48]	@ (8113044 <vTaskSwitchContext+0xc4>)
 8113014:	6013      	str	r3, [r2, #0]
 8113016:	4a09      	ldr	r2, [pc, #36]	@ (811303c <vTaskSwitchContext+0xbc>)
 8113018:	68fb      	ldr	r3, [r7, #12]
 811301a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 811301c:	4b09      	ldr	r3, [pc, #36]	@ (8113044 <vTaskSwitchContext+0xc4>)
 811301e:	681b      	ldr	r3, [r3, #0]
 8113020:	3354      	adds	r3, #84	@ 0x54
 8113022:	4a09      	ldr	r2, [pc, #36]	@ (8113048 <vTaskSwitchContext+0xc8>)
 8113024:	6013      	str	r3, [r2, #0]
}
 8113026:	bf00      	nop
 8113028:	3714      	adds	r7, #20
 811302a:	46bd      	mov	sp, r7
 811302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113030:	4770      	bx	lr
 8113032:	bf00      	nop
 8113034:	1000b090 	.word	0x1000b090
 8113038:	1000b07c 	.word	0x1000b07c
 811303c:	1000b070 	.word	0x1000b070
 8113040:	1000ab98 	.word	0x1000ab98
 8113044:	1000ab94 	.word	0x1000ab94
 8113048:	10000040 	.word	0x10000040

0811304c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 811304c:	b580      	push	{r7, lr}
 811304e:	b084      	sub	sp, #16
 8113050:	af00      	add	r7, sp, #0
 8113052:	6078      	str	r0, [r7, #4]
 8113054:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8113056:	687b      	ldr	r3, [r7, #4]
 8113058:	2b00      	cmp	r3, #0
 811305a:	d10b      	bne.n	8113074 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 811305c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8113060:	f383 8811 	msr	BASEPRI, r3
 8113064:	f3bf 8f6f 	isb	sy
 8113068:	f3bf 8f4f 	dsb	sy
 811306c:	60fb      	str	r3, [r7, #12]
}
 811306e:	bf00      	nop
 8113070:	bf00      	nop
 8113072:	e7fd      	b.n	8113070 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8113074:	4b07      	ldr	r3, [pc, #28]	@ (8113094 <vTaskPlaceOnEventList+0x48>)
 8113076:	681b      	ldr	r3, [r3, #0]
 8113078:	3318      	adds	r3, #24
 811307a:	4619      	mov	r1, r3
 811307c:	6878      	ldr	r0, [r7, #4]
 811307e:	f7fd fbcc 	bl	811081a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8113082:	2101      	movs	r1, #1
 8113084:	6838      	ldr	r0, [r7, #0]
 8113086:	f000 fd2b 	bl	8113ae0 <prvAddCurrentTaskToDelayedList>
}
 811308a:	bf00      	nop
 811308c:	3710      	adds	r7, #16
 811308e:	46bd      	mov	sp, r7
 8113090:	bd80      	pop	{r7, pc}
 8113092:	bf00      	nop
 8113094:	1000ab94 	.word	0x1000ab94

08113098 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8113098:	b580      	push	{r7, lr}
 811309a:	b086      	sub	sp, #24
 811309c:	af00      	add	r7, sp, #0
 811309e:	60f8      	str	r0, [r7, #12]
 81130a0:	60b9      	str	r1, [r7, #8]
 81130a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 81130a4:	68fb      	ldr	r3, [r7, #12]
 81130a6:	2b00      	cmp	r3, #0
 81130a8:	d10b      	bne.n	81130c2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 81130aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81130ae:	f383 8811 	msr	BASEPRI, r3
 81130b2:	f3bf 8f6f 	isb	sy
 81130b6:	f3bf 8f4f 	dsb	sy
 81130ba:	617b      	str	r3, [r7, #20]
}
 81130bc:	bf00      	nop
 81130be:	bf00      	nop
 81130c0:	e7fd      	b.n	81130be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 81130c2:	4b0a      	ldr	r3, [pc, #40]	@ (81130ec <vTaskPlaceOnEventListRestricted+0x54>)
 81130c4:	681b      	ldr	r3, [r3, #0]
 81130c6:	3318      	adds	r3, #24
 81130c8:	4619      	mov	r1, r3
 81130ca:	68f8      	ldr	r0, [r7, #12]
 81130cc:	f7fd fb81 	bl	81107d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 81130d0:	687b      	ldr	r3, [r7, #4]
 81130d2:	2b00      	cmp	r3, #0
 81130d4:	d002      	beq.n	81130dc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 81130d6:	f04f 33ff 	mov.w	r3, #4294967295
 81130da:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 81130dc:	6879      	ldr	r1, [r7, #4]
 81130de:	68b8      	ldr	r0, [r7, #8]
 81130e0:	f000 fcfe 	bl	8113ae0 <prvAddCurrentTaskToDelayedList>
	}
 81130e4:	bf00      	nop
 81130e6:	3718      	adds	r7, #24
 81130e8:	46bd      	mov	sp, r7
 81130ea:	bd80      	pop	{r7, pc}
 81130ec:	1000ab94 	.word	0x1000ab94

081130f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 81130f0:	b580      	push	{r7, lr}
 81130f2:	b086      	sub	sp, #24
 81130f4:	af00      	add	r7, sp, #0
 81130f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81130f8:	687b      	ldr	r3, [r7, #4]
 81130fa:	68db      	ldr	r3, [r3, #12]
 81130fc:	68db      	ldr	r3, [r3, #12]
 81130fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8113100:	693b      	ldr	r3, [r7, #16]
 8113102:	2b00      	cmp	r3, #0
 8113104:	d10b      	bne.n	811311e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8113106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811310a:	f383 8811 	msr	BASEPRI, r3
 811310e:	f3bf 8f6f 	isb	sy
 8113112:	f3bf 8f4f 	dsb	sy
 8113116:	60fb      	str	r3, [r7, #12]
}
 8113118:	bf00      	nop
 811311a:	bf00      	nop
 811311c:	e7fd      	b.n	811311a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 811311e:	693b      	ldr	r3, [r7, #16]
 8113120:	3318      	adds	r3, #24
 8113122:	4618      	mov	r0, r3
 8113124:	f7fd fbb2 	bl	811088c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8113128:	4b1d      	ldr	r3, [pc, #116]	@ (81131a0 <xTaskRemoveFromEventList+0xb0>)
 811312a:	681b      	ldr	r3, [r3, #0]
 811312c:	2b00      	cmp	r3, #0
 811312e:	d11d      	bne.n	811316c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8113130:	693b      	ldr	r3, [r7, #16]
 8113132:	3304      	adds	r3, #4
 8113134:	4618      	mov	r0, r3
 8113136:	f7fd fba9 	bl	811088c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 811313a:	693b      	ldr	r3, [r7, #16]
 811313c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811313e:	4b19      	ldr	r3, [pc, #100]	@ (81131a4 <xTaskRemoveFromEventList+0xb4>)
 8113140:	681b      	ldr	r3, [r3, #0]
 8113142:	429a      	cmp	r2, r3
 8113144:	d903      	bls.n	811314e <xTaskRemoveFromEventList+0x5e>
 8113146:	693b      	ldr	r3, [r7, #16]
 8113148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811314a:	4a16      	ldr	r2, [pc, #88]	@ (81131a4 <xTaskRemoveFromEventList+0xb4>)
 811314c:	6013      	str	r3, [r2, #0]
 811314e:	693b      	ldr	r3, [r7, #16]
 8113150:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8113152:	4613      	mov	r3, r2
 8113154:	009b      	lsls	r3, r3, #2
 8113156:	4413      	add	r3, r2
 8113158:	009b      	lsls	r3, r3, #2
 811315a:	4a13      	ldr	r2, [pc, #76]	@ (81131a8 <xTaskRemoveFromEventList+0xb8>)
 811315c:	441a      	add	r2, r3
 811315e:	693b      	ldr	r3, [r7, #16]
 8113160:	3304      	adds	r3, #4
 8113162:	4619      	mov	r1, r3
 8113164:	4610      	mov	r0, r2
 8113166:	f7fd fb34 	bl	81107d2 <vListInsertEnd>
 811316a:	e005      	b.n	8113178 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 811316c:	693b      	ldr	r3, [r7, #16]
 811316e:	3318      	adds	r3, #24
 8113170:	4619      	mov	r1, r3
 8113172:	480e      	ldr	r0, [pc, #56]	@ (81131ac <xTaskRemoveFromEventList+0xbc>)
 8113174:	f7fd fb2d 	bl	81107d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8113178:	693b      	ldr	r3, [r7, #16]
 811317a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811317c:	4b0c      	ldr	r3, [pc, #48]	@ (81131b0 <xTaskRemoveFromEventList+0xc0>)
 811317e:	681b      	ldr	r3, [r3, #0]
 8113180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8113182:	429a      	cmp	r2, r3
 8113184:	d905      	bls.n	8113192 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8113186:	2301      	movs	r3, #1
 8113188:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 811318a:	4b0a      	ldr	r3, [pc, #40]	@ (81131b4 <xTaskRemoveFromEventList+0xc4>)
 811318c:	2201      	movs	r2, #1
 811318e:	601a      	str	r2, [r3, #0]
 8113190:	e001      	b.n	8113196 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8113192:	2300      	movs	r3, #0
 8113194:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8113196:	697b      	ldr	r3, [r7, #20]
}
 8113198:	4618      	mov	r0, r3
 811319a:	3718      	adds	r7, #24
 811319c:	46bd      	mov	sp, r7
 811319e:	bd80      	pop	{r7, pc}
 81131a0:	1000b090 	.word	0x1000b090
 81131a4:	1000b070 	.word	0x1000b070
 81131a8:	1000ab98 	.word	0x1000ab98
 81131ac:	1000b028 	.word	0x1000b028
 81131b0:	1000ab94 	.word	0x1000ab94
 81131b4:	1000b07c 	.word	0x1000b07c

081131b8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 81131b8:	b580      	push	{r7, lr}
 81131ba:	b084      	sub	sp, #16
 81131bc:	af00      	add	r7, sp, #0
 81131be:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 81131c0:	687b      	ldr	r3, [r7, #4]
 81131c2:	2b00      	cmp	r3, #0
 81131c4:	d10b      	bne.n	81131de <vTaskSetTimeOutState+0x26>
	__asm volatile
 81131c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81131ca:	f383 8811 	msr	BASEPRI, r3
 81131ce:	f3bf 8f6f 	isb	sy
 81131d2:	f3bf 8f4f 	dsb	sy
 81131d6:	60fb      	str	r3, [r7, #12]
}
 81131d8:	bf00      	nop
 81131da:	bf00      	nop
 81131dc:	e7fd      	b.n	81131da <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 81131de:	f7fd fcb3 	bl	8110b48 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 81131e2:	4b07      	ldr	r3, [pc, #28]	@ (8113200 <vTaskSetTimeOutState+0x48>)
 81131e4:	681a      	ldr	r2, [r3, #0]
 81131e6:	687b      	ldr	r3, [r7, #4]
 81131e8:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 81131ea:	4b06      	ldr	r3, [pc, #24]	@ (8113204 <vTaskSetTimeOutState+0x4c>)
 81131ec:	681a      	ldr	r2, [r3, #0]
 81131ee:	687b      	ldr	r3, [r7, #4]
 81131f0:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 81131f2:	f7fd fcdb 	bl	8110bac <vPortExitCritical>
}
 81131f6:	bf00      	nop
 81131f8:	3710      	adds	r7, #16
 81131fa:	46bd      	mov	sp, r7
 81131fc:	bd80      	pop	{r7, pc}
 81131fe:	bf00      	nop
 8113200:	1000b080 	.word	0x1000b080
 8113204:	1000b06c 	.word	0x1000b06c

08113208 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8113208:	b480      	push	{r7}
 811320a:	b083      	sub	sp, #12
 811320c:	af00      	add	r7, sp, #0
 811320e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8113210:	4b06      	ldr	r3, [pc, #24]	@ (811322c <vTaskInternalSetTimeOutState+0x24>)
 8113212:	681a      	ldr	r2, [r3, #0]
 8113214:	687b      	ldr	r3, [r7, #4]
 8113216:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8113218:	4b05      	ldr	r3, [pc, #20]	@ (8113230 <vTaskInternalSetTimeOutState+0x28>)
 811321a:	681a      	ldr	r2, [r3, #0]
 811321c:	687b      	ldr	r3, [r7, #4]
 811321e:	605a      	str	r2, [r3, #4]
}
 8113220:	bf00      	nop
 8113222:	370c      	adds	r7, #12
 8113224:	46bd      	mov	sp, r7
 8113226:	f85d 7b04 	ldr.w	r7, [sp], #4
 811322a:	4770      	bx	lr
 811322c:	1000b080 	.word	0x1000b080
 8113230:	1000b06c 	.word	0x1000b06c

08113234 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8113234:	b580      	push	{r7, lr}
 8113236:	b088      	sub	sp, #32
 8113238:	af00      	add	r7, sp, #0
 811323a:	6078      	str	r0, [r7, #4]
 811323c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 811323e:	687b      	ldr	r3, [r7, #4]
 8113240:	2b00      	cmp	r3, #0
 8113242:	d10b      	bne.n	811325c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8113244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8113248:	f383 8811 	msr	BASEPRI, r3
 811324c:	f3bf 8f6f 	isb	sy
 8113250:	f3bf 8f4f 	dsb	sy
 8113254:	613b      	str	r3, [r7, #16]
}
 8113256:	bf00      	nop
 8113258:	bf00      	nop
 811325a:	e7fd      	b.n	8113258 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 811325c:	683b      	ldr	r3, [r7, #0]
 811325e:	2b00      	cmp	r3, #0
 8113260:	d10b      	bne.n	811327a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8113262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8113266:	f383 8811 	msr	BASEPRI, r3
 811326a:	f3bf 8f6f 	isb	sy
 811326e:	f3bf 8f4f 	dsb	sy
 8113272:	60fb      	str	r3, [r7, #12]
}
 8113274:	bf00      	nop
 8113276:	bf00      	nop
 8113278:	e7fd      	b.n	8113276 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 811327a:	f7fd fc65 	bl	8110b48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 811327e:	4b1d      	ldr	r3, [pc, #116]	@ (81132f4 <xTaskCheckForTimeOut+0xc0>)
 8113280:	681b      	ldr	r3, [r3, #0]
 8113282:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8113284:	687b      	ldr	r3, [r7, #4]
 8113286:	685b      	ldr	r3, [r3, #4]
 8113288:	69ba      	ldr	r2, [r7, #24]
 811328a:	1ad3      	subs	r3, r2, r3
 811328c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 811328e:	683b      	ldr	r3, [r7, #0]
 8113290:	681b      	ldr	r3, [r3, #0]
 8113292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8113296:	d102      	bne.n	811329e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8113298:	2300      	movs	r3, #0
 811329a:	61fb      	str	r3, [r7, #28]
 811329c:	e023      	b.n	81132e6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 811329e:	687b      	ldr	r3, [r7, #4]
 81132a0:	681a      	ldr	r2, [r3, #0]
 81132a2:	4b15      	ldr	r3, [pc, #84]	@ (81132f8 <xTaskCheckForTimeOut+0xc4>)
 81132a4:	681b      	ldr	r3, [r3, #0]
 81132a6:	429a      	cmp	r2, r3
 81132a8:	d007      	beq.n	81132ba <xTaskCheckForTimeOut+0x86>
 81132aa:	687b      	ldr	r3, [r7, #4]
 81132ac:	685b      	ldr	r3, [r3, #4]
 81132ae:	69ba      	ldr	r2, [r7, #24]
 81132b0:	429a      	cmp	r2, r3
 81132b2:	d302      	bcc.n	81132ba <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 81132b4:	2301      	movs	r3, #1
 81132b6:	61fb      	str	r3, [r7, #28]
 81132b8:	e015      	b.n	81132e6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 81132ba:	683b      	ldr	r3, [r7, #0]
 81132bc:	681b      	ldr	r3, [r3, #0]
 81132be:	697a      	ldr	r2, [r7, #20]
 81132c0:	429a      	cmp	r2, r3
 81132c2:	d20b      	bcs.n	81132dc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 81132c4:	683b      	ldr	r3, [r7, #0]
 81132c6:	681a      	ldr	r2, [r3, #0]
 81132c8:	697b      	ldr	r3, [r7, #20]
 81132ca:	1ad2      	subs	r2, r2, r3
 81132cc:	683b      	ldr	r3, [r7, #0]
 81132ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 81132d0:	6878      	ldr	r0, [r7, #4]
 81132d2:	f7ff ff99 	bl	8113208 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 81132d6:	2300      	movs	r3, #0
 81132d8:	61fb      	str	r3, [r7, #28]
 81132da:	e004      	b.n	81132e6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 81132dc:	683b      	ldr	r3, [r7, #0]
 81132de:	2200      	movs	r2, #0
 81132e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 81132e2:	2301      	movs	r3, #1
 81132e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 81132e6:	f7fd fc61 	bl	8110bac <vPortExitCritical>

	return xReturn;
 81132ea:	69fb      	ldr	r3, [r7, #28]
}
 81132ec:	4618      	mov	r0, r3
 81132ee:	3720      	adds	r7, #32
 81132f0:	46bd      	mov	sp, r7
 81132f2:	bd80      	pop	{r7, pc}
 81132f4:	1000b06c 	.word	0x1000b06c
 81132f8:	1000b080 	.word	0x1000b080

081132fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 81132fc:	b480      	push	{r7}
 81132fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8113300:	4b03      	ldr	r3, [pc, #12]	@ (8113310 <vTaskMissedYield+0x14>)
 8113302:	2201      	movs	r2, #1
 8113304:	601a      	str	r2, [r3, #0]
}
 8113306:	bf00      	nop
 8113308:	46bd      	mov	sp, r7
 811330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 811330e:	4770      	bx	lr
 8113310:	1000b07c 	.word	0x1000b07c

08113314 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8113314:	b580      	push	{r7, lr}
 8113316:	b082      	sub	sp, #8
 8113318:	af00      	add	r7, sp, #0
 811331a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 811331c:	f000 f852 	bl	81133c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8113320:	4b06      	ldr	r3, [pc, #24]	@ (811333c <prvIdleTask+0x28>)
 8113322:	681b      	ldr	r3, [r3, #0]
 8113324:	2b01      	cmp	r3, #1
 8113326:	d9f9      	bls.n	811331c <prvIdleTask+0x8>
			{
				taskYIELD();
 8113328:	4b05      	ldr	r3, [pc, #20]	@ (8113340 <prvIdleTask+0x2c>)
 811332a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 811332e:	601a      	str	r2, [r3, #0]
 8113330:	f3bf 8f4f 	dsb	sy
 8113334:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8113338:	e7f0      	b.n	811331c <prvIdleTask+0x8>
 811333a:	bf00      	nop
 811333c:	1000ab98 	.word	0x1000ab98
 8113340:	e000ed04 	.word	0xe000ed04

08113344 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8113344:	b580      	push	{r7, lr}
 8113346:	b082      	sub	sp, #8
 8113348:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 811334a:	2300      	movs	r3, #0
 811334c:	607b      	str	r3, [r7, #4]
 811334e:	e00c      	b.n	811336a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8113350:	687a      	ldr	r2, [r7, #4]
 8113352:	4613      	mov	r3, r2
 8113354:	009b      	lsls	r3, r3, #2
 8113356:	4413      	add	r3, r2
 8113358:	009b      	lsls	r3, r3, #2
 811335a:	4a12      	ldr	r2, [pc, #72]	@ (81133a4 <prvInitialiseTaskLists+0x60>)
 811335c:	4413      	add	r3, r2
 811335e:	4618      	mov	r0, r3
 8113360:	f7fd fa0a 	bl	8110778 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8113364:	687b      	ldr	r3, [r7, #4]
 8113366:	3301      	adds	r3, #1
 8113368:	607b      	str	r3, [r7, #4]
 811336a:	687b      	ldr	r3, [r7, #4]
 811336c:	2b37      	cmp	r3, #55	@ 0x37
 811336e:	d9ef      	bls.n	8113350 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8113370:	480d      	ldr	r0, [pc, #52]	@ (81133a8 <prvInitialiseTaskLists+0x64>)
 8113372:	f7fd fa01 	bl	8110778 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8113376:	480d      	ldr	r0, [pc, #52]	@ (81133ac <prvInitialiseTaskLists+0x68>)
 8113378:	f7fd f9fe 	bl	8110778 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 811337c:	480c      	ldr	r0, [pc, #48]	@ (81133b0 <prvInitialiseTaskLists+0x6c>)
 811337e:	f7fd f9fb 	bl	8110778 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8113382:	480c      	ldr	r0, [pc, #48]	@ (81133b4 <prvInitialiseTaskLists+0x70>)
 8113384:	f7fd f9f8 	bl	8110778 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8113388:	480b      	ldr	r0, [pc, #44]	@ (81133b8 <prvInitialiseTaskLists+0x74>)
 811338a:	f7fd f9f5 	bl	8110778 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 811338e:	4b0b      	ldr	r3, [pc, #44]	@ (81133bc <prvInitialiseTaskLists+0x78>)
 8113390:	4a05      	ldr	r2, [pc, #20]	@ (81133a8 <prvInitialiseTaskLists+0x64>)
 8113392:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8113394:	4b0a      	ldr	r3, [pc, #40]	@ (81133c0 <prvInitialiseTaskLists+0x7c>)
 8113396:	4a05      	ldr	r2, [pc, #20]	@ (81133ac <prvInitialiseTaskLists+0x68>)
 8113398:	601a      	str	r2, [r3, #0]
}
 811339a:	bf00      	nop
 811339c:	3708      	adds	r7, #8
 811339e:	46bd      	mov	sp, r7
 81133a0:	bd80      	pop	{r7, pc}
 81133a2:	bf00      	nop
 81133a4:	1000ab98 	.word	0x1000ab98
 81133a8:	1000aff8 	.word	0x1000aff8
 81133ac:	1000b00c 	.word	0x1000b00c
 81133b0:	1000b028 	.word	0x1000b028
 81133b4:	1000b03c 	.word	0x1000b03c
 81133b8:	1000b054 	.word	0x1000b054
 81133bc:	1000b020 	.word	0x1000b020
 81133c0:	1000b024 	.word	0x1000b024

081133c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 81133c4:	b580      	push	{r7, lr}
 81133c6:	b082      	sub	sp, #8
 81133c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 81133ca:	e019      	b.n	8113400 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 81133cc:	f7fd fbbc 	bl	8110b48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81133d0:	4b10      	ldr	r3, [pc, #64]	@ (8113414 <prvCheckTasksWaitingTermination+0x50>)
 81133d2:	68db      	ldr	r3, [r3, #12]
 81133d4:	68db      	ldr	r3, [r3, #12]
 81133d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 81133d8:	687b      	ldr	r3, [r7, #4]
 81133da:	3304      	adds	r3, #4
 81133dc:	4618      	mov	r0, r3
 81133de:	f7fd fa55 	bl	811088c <uxListRemove>
				--uxCurrentNumberOfTasks;
 81133e2:	4b0d      	ldr	r3, [pc, #52]	@ (8113418 <prvCheckTasksWaitingTermination+0x54>)
 81133e4:	681b      	ldr	r3, [r3, #0]
 81133e6:	3b01      	subs	r3, #1
 81133e8:	4a0b      	ldr	r2, [pc, #44]	@ (8113418 <prvCheckTasksWaitingTermination+0x54>)
 81133ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 81133ec:	4b0b      	ldr	r3, [pc, #44]	@ (811341c <prvCheckTasksWaitingTermination+0x58>)
 81133ee:	681b      	ldr	r3, [r3, #0]
 81133f0:	3b01      	subs	r3, #1
 81133f2:	4a0a      	ldr	r2, [pc, #40]	@ (811341c <prvCheckTasksWaitingTermination+0x58>)
 81133f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 81133f6:	f7fd fbd9 	bl	8110bac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 81133fa:	6878      	ldr	r0, [r7, #4]
 81133fc:	f000 f810 	bl	8113420 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8113400:	4b06      	ldr	r3, [pc, #24]	@ (811341c <prvCheckTasksWaitingTermination+0x58>)
 8113402:	681b      	ldr	r3, [r3, #0]
 8113404:	2b00      	cmp	r3, #0
 8113406:	d1e1      	bne.n	81133cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8113408:	bf00      	nop
 811340a:	bf00      	nop
 811340c:	3708      	adds	r7, #8
 811340e:	46bd      	mov	sp, r7
 8113410:	bd80      	pop	{r7, pc}
 8113412:	bf00      	nop
 8113414:	1000b03c 	.word	0x1000b03c
 8113418:	1000b068 	.word	0x1000b068
 811341c:	1000b050 	.word	0x1000b050

08113420 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8113420:	b580      	push	{r7, lr}
 8113422:	b084      	sub	sp, #16
 8113424:	af00      	add	r7, sp, #0
 8113426:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8113428:	687b      	ldr	r3, [r7, #4]
 811342a:	3354      	adds	r3, #84	@ 0x54
 811342c:	4618      	mov	r0, r3
 811342e:	f00f f931 	bl	8122694 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8113432:	687b      	ldr	r3, [r7, #4]
 8113434:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8113438:	2b00      	cmp	r3, #0
 811343a:	d108      	bne.n	811344e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 811343c:	687b      	ldr	r3, [r7, #4]
 811343e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8113440:	4618      	mov	r0, r3
 8113442:	f7fd f879 	bl	8110538 <vPortFree>
				vPortFree( pxTCB );
 8113446:	6878      	ldr	r0, [r7, #4]
 8113448:	f7fd f876 	bl	8110538 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 811344c:	e019      	b.n	8113482 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 811344e:	687b      	ldr	r3, [r7, #4]
 8113450:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8113454:	2b01      	cmp	r3, #1
 8113456:	d103      	bne.n	8113460 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8113458:	6878      	ldr	r0, [r7, #4]
 811345a:	f7fd f86d 	bl	8110538 <vPortFree>
	}
 811345e:	e010      	b.n	8113482 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8113460:	687b      	ldr	r3, [r7, #4]
 8113462:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8113466:	2b02      	cmp	r3, #2
 8113468:	d00b      	beq.n	8113482 <prvDeleteTCB+0x62>
	__asm volatile
 811346a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811346e:	f383 8811 	msr	BASEPRI, r3
 8113472:	f3bf 8f6f 	isb	sy
 8113476:	f3bf 8f4f 	dsb	sy
 811347a:	60fb      	str	r3, [r7, #12]
}
 811347c:	bf00      	nop
 811347e:	bf00      	nop
 8113480:	e7fd      	b.n	811347e <prvDeleteTCB+0x5e>
	}
 8113482:	bf00      	nop
 8113484:	3710      	adds	r7, #16
 8113486:	46bd      	mov	sp, r7
 8113488:	bd80      	pop	{r7, pc}
	...

0811348c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 811348c:	b480      	push	{r7}
 811348e:	b083      	sub	sp, #12
 8113490:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8113492:	4b0c      	ldr	r3, [pc, #48]	@ (81134c4 <prvResetNextTaskUnblockTime+0x38>)
 8113494:	681b      	ldr	r3, [r3, #0]
 8113496:	681b      	ldr	r3, [r3, #0]
 8113498:	2b00      	cmp	r3, #0
 811349a:	d104      	bne.n	81134a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 811349c:	4b0a      	ldr	r3, [pc, #40]	@ (81134c8 <prvResetNextTaskUnblockTime+0x3c>)
 811349e:	f04f 32ff 	mov.w	r2, #4294967295
 81134a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 81134a4:	e008      	b.n	81134b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81134a6:	4b07      	ldr	r3, [pc, #28]	@ (81134c4 <prvResetNextTaskUnblockTime+0x38>)
 81134a8:	681b      	ldr	r3, [r3, #0]
 81134aa:	68db      	ldr	r3, [r3, #12]
 81134ac:	68db      	ldr	r3, [r3, #12]
 81134ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 81134b0:	687b      	ldr	r3, [r7, #4]
 81134b2:	685b      	ldr	r3, [r3, #4]
 81134b4:	4a04      	ldr	r2, [pc, #16]	@ (81134c8 <prvResetNextTaskUnblockTime+0x3c>)
 81134b6:	6013      	str	r3, [r2, #0]
}
 81134b8:	bf00      	nop
 81134ba:	370c      	adds	r7, #12
 81134bc:	46bd      	mov	sp, r7
 81134be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81134c2:	4770      	bx	lr
 81134c4:	1000b020 	.word	0x1000b020
 81134c8:	1000b088 	.word	0x1000b088

081134cc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 81134cc:	b480      	push	{r7}
 81134ce:	b083      	sub	sp, #12
 81134d0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 81134d2:	4b05      	ldr	r3, [pc, #20]	@ (81134e8 <xTaskGetCurrentTaskHandle+0x1c>)
 81134d4:	681b      	ldr	r3, [r3, #0]
 81134d6:	607b      	str	r3, [r7, #4]

		return xReturn;
 81134d8:	687b      	ldr	r3, [r7, #4]
	}
 81134da:	4618      	mov	r0, r3
 81134dc:	370c      	adds	r7, #12
 81134de:	46bd      	mov	sp, r7
 81134e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81134e4:	4770      	bx	lr
 81134e6:	bf00      	nop
 81134e8:	1000ab94 	.word	0x1000ab94

081134ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 81134ec:	b480      	push	{r7}
 81134ee:	b083      	sub	sp, #12
 81134f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 81134f2:	4b0b      	ldr	r3, [pc, #44]	@ (8113520 <xTaskGetSchedulerState+0x34>)
 81134f4:	681b      	ldr	r3, [r3, #0]
 81134f6:	2b00      	cmp	r3, #0
 81134f8:	d102      	bne.n	8113500 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 81134fa:	2301      	movs	r3, #1
 81134fc:	607b      	str	r3, [r7, #4]
 81134fe:	e008      	b.n	8113512 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8113500:	4b08      	ldr	r3, [pc, #32]	@ (8113524 <xTaskGetSchedulerState+0x38>)
 8113502:	681b      	ldr	r3, [r3, #0]
 8113504:	2b00      	cmp	r3, #0
 8113506:	d102      	bne.n	811350e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8113508:	2302      	movs	r3, #2
 811350a:	607b      	str	r3, [r7, #4]
 811350c:	e001      	b.n	8113512 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 811350e:	2300      	movs	r3, #0
 8113510:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8113512:	687b      	ldr	r3, [r7, #4]
	}
 8113514:	4618      	mov	r0, r3
 8113516:	370c      	adds	r7, #12
 8113518:	46bd      	mov	sp, r7
 811351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 811351e:	4770      	bx	lr
 8113520:	1000b074 	.word	0x1000b074
 8113524:	1000b090 	.word	0x1000b090

08113528 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8113528:	b580      	push	{r7, lr}
 811352a:	b084      	sub	sp, #16
 811352c:	af00      	add	r7, sp, #0
 811352e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8113530:	687b      	ldr	r3, [r7, #4]
 8113532:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8113534:	2300      	movs	r3, #0
 8113536:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8113538:	687b      	ldr	r3, [r7, #4]
 811353a:	2b00      	cmp	r3, #0
 811353c:	d051      	beq.n	81135e2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 811353e:	68bb      	ldr	r3, [r7, #8]
 8113540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8113542:	4b2a      	ldr	r3, [pc, #168]	@ (81135ec <xTaskPriorityInherit+0xc4>)
 8113544:	681b      	ldr	r3, [r3, #0]
 8113546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8113548:	429a      	cmp	r2, r3
 811354a:	d241      	bcs.n	81135d0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 811354c:	68bb      	ldr	r3, [r7, #8]
 811354e:	699b      	ldr	r3, [r3, #24]
 8113550:	2b00      	cmp	r3, #0
 8113552:	db06      	blt.n	8113562 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8113554:	4b25      	ldr	r3, [pc, #148]	@ (81135ec <xTaskPriorityInherit+0xc4>)
 8113556:	681b      	ldr	r3, [r3, #0]
 8113558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811355a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 811355e:	68bb      	ldr	r3, [r7, #8]
 8113560:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8113562:	68bb      	ldr	r3, [r7, #8]
 8113564:	6959      	ldr	r1, [r3, #20]
 8113566:	68bb      	ldr	r3, [r7, #8]
 8113568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811356a:	4613      	mov	r3, r2
 811356c:	009b      	lsls	r3, r3, #2
 811356e:	4413      	add	r3, r2
 8113570:	009b      	lsls	r3, r3, #2
 8113572:	4a1f      	ldr	r2, [pc, #124]	@ (81135f0 <xTaskPriorityInherit+0xc8>)
 8113574:	4413      	add	r3, r2
 8113576:	4299      	cmp	r1, r3
 8113578:	d122      	bne.n	81135c0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 811357a:	68bb      	ldr	r3, [r7, #8]
 811357c:	3304      	adds	r3, #4
 811357e:	4618      	mov	r0, r3
 8113580:	f7fd f984 	bl	811088c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8113584:	4b19      	ldr	r3, [pc, #100]	@ (81135ec <xTaskPriorityInherit+0xc4>)
 8113586:	681b      	ldr	r3, [r3, #0]
 8113588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811358a:	68bb      	ldr	r3, [r7, #8]
 811358c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 811358e:	68bb      	ldr	r3, [r7, #8]
 8113590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8113592:	4b18      	ldr	r3, [pc, #96]	@ (81135f4 <xTaskPriorityInherit+0xcc>)
 8113594:	681b      	ldr	r3, [r3, #0]
 8113596:	429a      	cmp	r2, r3
 8113598:	d903      	bls.n	81135a2 <xTaskPriorityInherit+0x7a>
 811359a:	68bb      	ldr	r3, [r7, #8]
 811359c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811359e:	4a15      	ldr	r2, [pc, #84]	@ (81135f4 <xTaskPriorityInherit+0xcc>)
 81135a0:	6013      	str	r3, [r2, #0]
 81135a2:	68bb      	ldr	r3, [r7, #8]
 81135a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81135a6:	4613      	mov	r3, r2
 81135a8:	009b      	lsls	r3, r3, #2
 81135aa:	4413      	add	r3, r2
 81135ac:	009b      	lsls	r3, r3, #2
 81135ae:	4a10      	ldr	r2, [pc, #64]	@ (81135f0 <xTaskPriorityInherit+0xc8>)
 81135b0:	441a      	add	r2, r3
 81135b2:	68bb      	ldr	r3, [r7, #8]
 81135b4:	3304      	adds	r3, #4
 81135b6:	4619      	mov	r1, r3
 81135b8:	4610      	mov	r0, r2
 81135ba:	f7fd f90a 	bl	81107d2 <vListInsertEnd>
 81135be:	e004      	b.n	81135ca <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 81135c0:	4b0a      	ldr	r3, [pc, #40]	@ (81135ec <xTaskPriorityInherit+0xc4>)
 81135c2:	681b      	ldr	r3, [r3, #0]
 81135c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81135c6:	68bb      	ldr	r3, [r7, #8]
 81135c8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 81135ca:	2301      	movs	r3, #1
 81135cc:	60fb      	str	r3, [r7, #12]
 81135ce:	e008      	b.n	81135e2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 81135d0:	68bb      	ldr	r3, [r7, #8]
 81135d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 81135d4:	4b05      	ldr	r3, [pc, #20]	@ (81135ec <xTaskPriorityInherit+0xc4>)
 81135d6:	681b      	ldr	r3, [r3, #0]
 81135d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81135da:	429a      	cmp	r2, r3
 81135dc:	d201      	bcs.n	81135e2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 81135de:	2301      	movs	r3, #1
 81135e0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 81135e2:	68fb      	ldr	r3, [r7, #12]
	}
 81135e4:	4618      	mov	r0, r3
 81135e6:	3710      	adds	r7, #16
 81135e8:	46bd      	mov	sp, r7
 81135ea:	bd80      	pop	{r7, pc}
 81135ec:	1000ab94 	.word	0x1000ab94
 81135f0:	1000ab98 	.word	0x1000ab98
 81135f4:	1000b070 	.word	0x1000b070

081135f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 81135f8:	b580      	push	{r7, lr}
 81135fa:	b086      	sub	sp, #24
 81135fc:	af00      	add	r7, sp, #0
 81135fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8113600:	687b      	ldr	r3, [r7, #4]
 8113602:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8113604:	2300      	movs	r3, #0
 8113606:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8113608:	687b      	ldr	r3, [r7, #4]
 811360a:	2b00      	cmp	r3, #0
 811360c:	d058      	beq.n	81136c0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 811360e:	4b2f      	ldr	r3, [pc, #188]	@ (81136cc <xTaskPriorityDisinherit+0xd4>)
 8113610:	681b      	ldr	r3, [r3, #0]
 8113612:	693a      	ldr	r2, [r7, #16]
 8113614:	429a      	cmp	r2, r3
 8113616:	d00b      	beq.n	8113630 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8113618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811361c:	f383 8811 	msr	BASEPRI, r3
 8113620:	f3bf 8f6f 	isb	sy
 8113624:	f3bf 8f4f 	dsb	sy
 8113628:	60fb      	str	r3, [r7, #12]
}
 811362a:	bf00      	nop
 811362c:	bf00      	nop
 811362e:	e7fd      	b.n	811362c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8113630:	693b      	ldr	r3, [r7, #16]
 8113632:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8113634:	2b00      	cmp	r3, #0
 8113636:	d10b      	bne.n	8113650 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8113638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811363c:	f383 8811 	msr	BASEPRI, r3
 8113640:	f3bf 8f6f 	isb	sy
 8113644:	f3bf 8f4f 	dsb	sy
 8113648:	60bb      	str	r3, [r7, #8]
}
 811364a:	bf00      	nop
 811364c:	bf00      	nop
 811364e:	e7fd      	b.n	811364c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8113650:	693b      	ldr	r3, [r7, #16]
 8113652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8113654:	1e5a      	subs	r2, r3, #1
 8113656:	693b      	ldr	r3, [r7, #16]
 8113658:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 811365a:	693b      	ldr	r3, [r7, #16]
 811365c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811365e:	693b      	ldr	r3, [r7, #16]
 8113660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8113662:	429a      	cmp	r2, r3
 8113664:	d02c      	beq.n	81136c0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8113666:	693b      	ldr	r3, [r7, #16]
 8113668:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 811366a:	2b00      	cmp	r3, #0
 811366c:	d128      	bne.n	81136c0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 811366e:	693b      	ldr	r3, [r7, #16]
 8113670:	3304      	adds	r3, #4
 8113672:	4618      	mov	r0, r3
 8113674:	f7fd f90a 	bl	811088c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8113678:	693b      	ldr	r3, [r7, #16]
 811367a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 811367c:	693b      	ldr	r3, [r7, #16]
 811367e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8113680:	693b      	ldr	r3, [r7, #16]
 8113682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8113684:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8113688:	693b      	ldr	r3, [r7, #16]
 811368a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 811368c:	693b      	ldr	r3, [r7, #16]
 811368e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8113690:	4b0f      	ldr	r3, [pc, #60]	@ (81136d0 <xTaskPriorityDisinherit+0xd8>)
 8113692:	681b      	ldr	r3, [r3, #0]
 8113694:	429a      	cmp	r2, r3
 8113696:	d903      	bls.n	81136a0 <xTaskPriorityDisinherit+0xa8>
 8113698:	693b      	ldr	r3, [r7, #16]
 811369a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811369c:	4a0c      	ldr	r2, [pc, #48]	@ (81136d0 <xTaskPriorityDisinherit+0xd8>)
 811369e:	6013      	str	r3, [r2, #0]
 81136a0:	693b      	ldr	r3, [r7, #16]
 81136a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81136a4:	4613      	mov	r3, r2
 81136a6:	009b      	lsls	r3, r3, #2
 81136a8:	4413      	add	r3, r2
 81136aa:	009b      	lsls	r3, r3, #2
 81136ac:	4a09      	ldr	r2, [pc, #36]	@ (81136d4 <xTaskPriorityDisinherit+0xdc>)
 81136ae:	441a      	add	r2, r3
 81136b0:	693b      	ldr	r3, [r7, #16]
 81136b2:	3304      	adds	r3, #4
 81136b4:	4619      	mov	r1, r3
 81136b6:	4610      	mov	r0, r2
 81136b8:	f7fd f88b 	bl	81107d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 81136bc:	2301      	movs	r3, #1
 81136be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 81136c0:	697b      	ldr	r3, [r7, #20]
	}
 81136c2:	4618      	mov	r0, r3
 81136c4:	3718      	adds	r7, #24
 81136c6:	46bd      	mov	sp, r7
 81136c8:	bd80      	pop	{r7, pc}
 81136ca:	bf00      	nop
 81136cc:	1000ab94 	.word	0x1000ab94
 81136d0:	1000b070 	.word	0x1000b070
 81136d4:	1000ab98 	.word	0x1000ab98

081136d8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 81136d8:	b580      	push	{r7, lr}
 81136da:	b088      	sub	sp, #32
 81136dc:	af00      	add	r7, sp, #0
 81136de:	6078      	str	r0, [r7, #4]
 81136e0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 81136e2:	687b      	ldr	r3, [r7, #4]
 81136e4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 81136e6:	2301      	movs	r3, #1
 81136e8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 81136ea:	687b      	ldr	r3, [r7, #4]
 81136ec:	2b00      	cmp	r3, #0
 81136ee:	d06c      	beq.n	81137ca <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 81136f0:	69bb      	ldr	r3, [r7, #24]
 81136f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81136f4:	2b00      	cmp	r3, #0
 81136f6:	d10b      	bne.n	8113710 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 81136f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81136fc:	f383 8811 	msr	BASEPRI, r3
 8113700:	f3bf 8f6f 	isb	sy
 8113704:	f3bf 8f4f 	dsb	sy
 8113708:	60fb      	str	r3, [r7, #12]
}
 811370a:	bf00      	nop
 811370c:	bf00      	nop
 811370e:	e7fd      	b.n	811370c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8113710:	69bb      	ldr	r3, [r7, #24]
 8113712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8113714:	683a      	ldr	r2, [r7, #0]
 8113716:	429a      	cmp	r2, r3
 8113718:	d902      	bls.n	8113720 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 811371a:	683b      	ldr	r3, [r7, #0]
 811371c:	61fb      	str	r3, [r7, #28]
 811371e:	e002      	b.n	8113726 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8113720:	69bb      	ldr	r3, [r7, #24]
 8113722:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8113724:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8113726:	69bb      	ldr	r3, [r7, #24]
 8113728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811372a:	69fa      	ldr	r2, [r7, #28]
 811372c:	429a      	cmp	r2, r3
 811372e:	d04c      	beq.n	81137ca <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8113730:	69bb      	ldr	r3, [r7, #24]
 8113732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8113734:	697a      	ldr	r2, [r7, #20]
 8113736:	429a      	cmp	r2, r3
 8113738:	d147      	bne.n	81137ca <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 811373a:	4b26      	ldr	r3, [pc, #152]	@ (81137d4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 811373c:	681b      	ldr	r3, [r3, #0]
 811373e:	69ba      	ldr	r2, [r7, #24]
 8113740:	429a      	cmp	r2, r3
 8113742:	d10b      	bne.n	811375c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8113744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8113748:	f383 8811 	msr	BASEPRI, r3
 811374c:	f3bf 8f6f 	isb	sy
 8113750:	f3bf 8f4f 	dsb	sy
 8113754:	60bb      	str	r3, [r7, #8]
}
 8113756:	bf00      	nop
 8113758:	bf00      	nop
 811375a:	e7fd      	b.n	8113758 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 811375c:	69bb      	ldr	r3, [r7, #24]
 811375e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8113760:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8113762:	69bb      	ldr	r3, [r7, #24]
 8113764:	69fa      	ldr	r2, [r7, #28]
 8113766:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8113768:	69bb      	ldr	r3, [r7, #24]
 811376a:	699b      	ldr	r3, [r3, #24]
 811376c:	2b00      	cmp	r3, #0
 811376e:	db04      	blt.n	811377a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8113770:	69fb      	ldr	r3, [r7, #28]
 8113772:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8113776:	69bb      	ldr	r3, [r7, #24]
 8113778:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 811377a:	69bb      	ldr	r3, [r7, #24]
 811377c:	6959      	ldr	r1, [r3, #20]
 811377e:	693a      	ldr	r2, [r7, #16]
 8113780:	4613      	mov	r3, r2
 8113782:	009b      	lsls	r3, r3, #2
 8113784:	4413      	add	r3, r2
 8113786:	009b      	lsls	r3, r3, #2
 8113788:	4a13      	ldr	r2, [pc, #76]	@ (81137d8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 811378a:	4413      	add	r3, r2
 811378c:	4299      	cmp	r1, r3
 811378e:	d11c      	bne.n	81137ca <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8113790:	69bb      	ldr	r3, [r7, #24]
 8113792:	3304      	adds	r3, #4
 8113794:	4618      	mov	r0, r3
 8113796:	f7fd f879 	bl	811088c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 811379a:	69bb      	ldr	r3, [r7, #24]
 811379c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811379e:	4b0f      	ldr	r3, [pc, #60]	@ (81137dc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 81137a0:	681b      	ldr	r3, [r3, #0]
 81137a2:	429a      	cmp	r2, r3
 81137a4:	d903      	bls.n	81137ae <vTaskPriorityDisinheritAfterTimeout+0xd6>
 81137a6:	69bb      	ldr	r3, [r7, #24]
 81137a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81137aa:	4a0c      	ldr	r2, [pc, #48]	@ (81137dc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 81137ac:	6013      	str	r3, [r2, #0]
 81137ae:	69bb      	ldr	r3, [r7, #24]
 81137b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81137b2:	4613      	mov	r3, r2
 81137b4:	009b      	lsls	r3, r3, #2
 81137b6:	4413      	add	r3, r2
 81137b8:	009b      	lsls	r3, r3, #2
 81137ba:	4a07      	ldr	r2, [pc, #28]	@ (81137d8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 81137bc:	441a      	add	r2, r3
 81137be:	69bb      	ldr	r3, [r7, #24]
 81137c0:	3304      	adds	r3, #4
 81137c2:	4619      	mov	r1, r3
 81137c4:	4610      	mov	r0, r2
 81137c6:	f7fd f804 	bl	81107d2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 81137ca:	bf00      	nop
 81137cc:	3720      	adds	r7, #32
 81137ce:	46bd      	mov	sp, r7
 81137d0:	bd80      	pop	{r7, pc}
 81137d2:	bf00      	nop
 81137d4:	1000ab94 	.word	0x1000ab94
 81137d8:	1000ab98 	.word	0x1000ab98
 81137dc:	1000b070 	.word	0x1000b070

081137e0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 81137e0:	b480      	push	{r7}
 81137e2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 81137e4:	4b07      	ldr	r3, [pc, #28]	@ (8113804 <pvTaskIncrementMutexHeldCount+0x24>)
 81137e6:	681b      	ldr	r3, [r3, #0]
 81137e8:	2b00      	cmp	r3, #0
 81137ea:	d004      	beq.n	81137f6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 81137ec:	4b05      	ldr	r3, [pc, #20]	@ (8113804 <pvTaskIncrementMutexHeldCount+0x24>)
 81137ee:	681b      	ldr	r3, [r3, #0]
 81137f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 81137f2:	3201      	adds	r2, #1
 81137f4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 81137f6:	4b03      	ldr	r3, [pc, #12]	@ (8113804 <pvTaskIncrementMutexHeldCount+0x24>)
 81137f8:	681b      	ldr	r3, [r3, #0]
	}
 81137fa:	4618      	mov	r0, r3
 81137fc:	46bd      	mov	sp, r7
 81137fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113802:	4770      	bx	lr
 8113804:	1000ab94 	.word	0x1000ab94

08113808 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8113808:	b580      	push	{r7, lr}
 811380a:	b086      	sub	sp, #24
 811380c:	af00      	add	r7, sp, #0
 811380e:	60f8      	str	r0, [r7, #12]
 8113810:	60b9      	str	r1, [r7, #8]
 8113812:	607a      	str	r2, [r7, #4]
 8113814:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8113816:	f7fd f997 	bl	8110b48 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 811381a:	4b29      	ldr	r3, [pc, #164]	@ (81138c0 <xTaskNotifyWait+0xb8>)
 811381c:	681b      	ldr	r3, [r3, #0]
 811381e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8113822:	b2db      	uxtb	r3, r3
 8113824:	2b02      	cmp	r3, #2
 8113826:	d01c      	beq.n	8113862 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8113828:	4b25      	ldr	r3, [pc, #148]	@ (81138c0 <xTaskNotifyWait+0xb8>)
 811382a:	681b      	ldr	r3, [r3, #0]
 811382c:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8113830:	68fa      	ldr	r2, [r7, #12]
 8113832:	43d2      	mvns	r2, r2
 8113834:	400a      	ands	r2, r1
 8113836:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 811383a:	4b21      	ldr	r3, [pc, #132]	@ (81138c0 <xTaskNotifyWait+0xb8>)
 811383c:	681b      	ldr	r3, [r3, #0]
 811383e:	2201      	movs	r2, #1
 8113840:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8113844:	683b      	ldr	r3, [r7, #0]
 8113846:	2b00      	cmp	r3, #0
 8113848:	d00b      	beq.n	8113862 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 811384a:	2101      	movs	r1, #1
 811384c:	6838      	ldr	r0, [r7, #0]
 811384e:	f000 f947 	bl	8113ae0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8113852:	4b1c      	ldr	r3, [pc, #112]	@ (81138c4 <xTaskNotifyWait+0xbc>)
 8113854:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8113858:	601a      	str	r2, [r3, #0]
 811385a:	f3bf 8f4f 	dsb	sy
 811385e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8113862:	f7fd f9a3 	bl	8110bac <vPortExitCritical>

		taskENTER_CRITICAL();
 8113866:	f7fd f96f 	bl	8110b48 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 811386a:	687b      	ldr	r3, [r7, #4]
 811386c:	2b00      	cmp	r3, #0
 811386e:	d005      	beq.n	811387c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8113870:	4b13      	ldr	r3, [pc, #76]	@ (81138c0 <xTaskNotifyWait+0xb8>)
 8113872:	681b      	ldr	r3, [r3, #0]
 8113874:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8113878:	687b      	ldr	r3, [r7, #4]
 811387a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 811387c:	4b10      	ldr	r3, [pc, #64]	@ (81138c0 <xTaskNotifyWait+0xb8>)
 811387e:	681b      	ldr	r3, [r3, #0]
 8113880:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8113884:	b2db      	uxtb	r3, r3
 8113886:	2b02      	cmp	r3, #2
 8113888:	d002      	beq.n	8113890 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 811388a:	2300      	movs	r3, #0
 811388c:	617b      	str	r3, [r7, #20]
 811388e:	e00a      	b.n	81138a6 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8113890:	4b0b      	ldr	r3, [pc, #44]	@ (81138c0 <xTaskNotifyWait+0xb8>)
 8113892:	681b      	ldr	r3, [r3, #0]
 8113894:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8113898:	68ba      	ldr	r2, [r7, #8]
 811389a:	43d2      	mvns	r2, r2
 811389c:	400a      	ands	r2, r1
 811389e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 81138a2:	2301      	movs	r3, #1
 81138a4:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 81138a6:	4b06      	ldr	r3, [pc, #24]	@ (81138c0 <xTaskNotifyWait+0xb8>)
 81138a8:	681b      	ldr	r3, [r3, #0]
 81138aa:	2200      	movs	r2, #0
 81138ac:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 81138b0:	f7fd f97c 	bl	8110bac <vPortExitCritical>

		return xReturn;
 81138b4:	697b      	ldr	r3, [r7, #20]
	}
 81138b6:	4618      	mov	r0, r3
 81138b8:	3718      	adds	r7, #24
 81138ba:	46bd      	mov	sp, r7
 81138bc:	bd80      	pop	{r7, pc}
 81138be:	bf00      	nop
 81138c0:	1000ab94 	.word	0x1000ab94
 81138c4:	e000ed04 	.word	0xe000ed04

081138c8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 81138c8:	b580      	push	{r7, lr}
 81138ca:	b08e      	sub	sp, #56	@ 0x38
 81138cc:	af00      	add	r7, sp, #0
 81138ce:	60f8      	str	r0, [r7, #12]
 81138d0:	60b9      	str	r1, [r7, #8]
 81138d2:	603b      	str	r3, [r7, #0]
 81138d4:	4613      	mov	r3, r2
 81138d6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 81138d8:	2301      	movs	r3, #1
 81138da:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 81138dc:	68fb      	ldr	r3, [r7, #12]
 81138de:	2b00      	cmp	r3, #0
 81138e0:	d10b      	bne.n	81138fa <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 81138e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81138e6:	f383 8811 	msr	BASEPRI, r3
 81138ea:	f3bf 8f6f 	isb	sy
 81138ee:	f3bf 8f4f 	dsb	sy
 81138f2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 81138f4:	bf00      	nop
 81138f6:	bf00      	nop
 81138f8:	e7fd      	b.n	81138f6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 81138fa:	f7fd fa05 	bl	8110d08 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 81138fe:	68fb      	ldr	r3, [r7, #12]
 8113900:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8113902:	f3ef 8211 	mrs	r2, BASEPRI
 8113906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811390a:	f383 8811 	msr	BASEPRI, r3
 811390e:	f3bf 8f6f 	isb	sy
 8113912:	f3bf 8f4f 	dsb	sy
 8113916:	623a      	str	r2, [r7, #32]
 8113918:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 811391a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 811391c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 811391e:	683b      	ldr	r3, [r7, #0]
 8113920:	2b00      	cmp	r3, #0
 8113922:	d004      	beq.n	811392e <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8113924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8113926:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 811392a:	683b      	ldr	r3, [r7, #0]
 811392c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 811392e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8113930:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8113934:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8113938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811393a:	2202      	movs	r2, #2
 811393c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8113940:	79fb      	ldrb	r3, [r7, #7]
 8113942:	2b04      	cmp	r3, #4
 8113944:	d82e      	bhi.n	81139a4 <xTaskGenericNotifyFromISR+0xdc>
 8113946:	a201      	add	r2, pc, #4	@ (adr r2, 811394c <xTaskGenericNotifyFromISR+0x84>)
 8113948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 811394c:	081139c9 	.word	0x081139c9
 8113950:	08113961 	.word	0x08113961
 8113954:	08113973 	.word	0x08113973
 8113958:	08113983 	.word	0x08113983
 811395c:	0811398d 	.word	0x0811398d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8113960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8113962:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8113966:	68bb      	ldr	r3, [r7, #8]
 8113968:	431a      	orrs	r2, r3
 811396a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811396c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8113970:	e02d      	b.n	81139ce <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8113972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8113974:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8113978:	1c5a      	adds	r2, r3, #1
 811397a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811397c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8113980:	e025      	b.n	81139ce <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8113982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8113984:	68ba      	ldr	r2, [r7, #8]
 8113986:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 811398a:	e020      	b.n	81139ce <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 811398c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8113990:	2b02      	cmp	r3, #2
 8113992:	d004      	beq.n	811399e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8113994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8113996:	68ba      	ldr	r2, [r7, #8]
 8113998:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 811399c:	e017      	b.n	81139ce <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 811399e:	2300      	movs	r3, #0
 81139a0:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 81139a2:	e014      	b.n	81139ce <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 81139a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81139a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81139aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 81139ae:	d00d      	beq.n	81139cc <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 81139b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81139b4:	f383 8811 	msr	BASEPRI, r3
 81139b8:	f3bf 8f6f 	isb	sy
 81139bc:	f3bf 8f4f 	dsb	sy
 81139c0:	61bb      	str	r3, [r7, #24]
}
 81139c2:	bf00      	nop
 81139c4:	bf00      	nop
 81139c6:	e7fd      	b.n	81139c4 <xTaskGenericNotifyFromISR+0xfc>
					break;
 81139c8:	bf00      	nop
 81139ca:	e000      	b.n	81139ce <xTaskGenericNotifyFromISR+0x106>
					break;
 81139cc:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 81139ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 81139d2:	2b01      	cmp	r3, #1
 81139d4:	d147      	bne.n	8113a66 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 81139d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81139d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81139da:	2b00      	cmp	r3, #0
 81139dc:	d00b      	beq.n	81139f6 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 81139de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81139e2:	f383 8811 	msr	BASEPRI, r3
 81139e6:	f3bf 8f6f 	isb	sy
 81139ea:	f3bf 8f4f 	dsb	sy
 81139ee:	617b      	str	r3, [r7, #20]
}
 81139f0:	bf00      	nop
 81139f2:	bf00      	nop
 81139f4:	e7fd      	b.n	81139f2 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81139f6:	4b21      	ldr	r3, [pc, #132]	@ (8113a7c <xTaskGenericNotifyFromISR+0x1b4>)
 81139f8:	681b      	ldr	r3, [r3, #0]
 81139fa:	2b00      	cmp	r3, #0
 81139fc:	d11d      	bne.n	8113a3a <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 81139fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8113a00:	3304      	adds	r3, #4
 8113a02:	4618      	mov	r0, r3
 8113a04:	f7fc ff42 	bl	811088c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8113a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8113a0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8113a0c:	4b1c      	ldr	r3, [pc, #112]	@ (8113a80 <xTaskGenericNotifyFromISR+0x1b8>)
 8113a0e:	681b      	ldr	r3, [r3, #0]
 8113a10:	429a      	cmp	r2, r3
 8113a12:	d903      	bls.n	8113a1c <xTaskGenericNotifyFromISR+0x154>
 8113a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8113a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8113a18:	4a19      	ldr	r2, [pc, #100]	@ (8113a80 <xTaskGenericNotifyFromISR+0x1b8>)
 8113a1a:	6013      	str	r3, [r2, #0]
 8113a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8113a1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8113a20:	4613      	mov	r3, r2
 8113a22:	009b      	lsls	r3, r3, #2
 8113a24:	4413      	add	r3, r2
 8113a26:	009b      	lsls	r3, r3, #2
 8113a28:	4a16      	ldr	r2, [pc, #88]	@ (8113a84 <xTaskGenericNotifyFromISR+0x1bc>)
 8113a2a:	441a      	add	r2, r3
 8113a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8113a2e:	3304      	adds	r3, #4
 8113a30:	4619      	mov	r1, r3
 8113a32:	4610      	mov	r0, r2
 8113a34:	f7fc fecd 	bl	81107d2 <vListInsertEnd>
 8113a38:	e005      	b.n	8113a46 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8113a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8113a3c:	3318      	adds	r3, #24
 8113a3e:	4619      	mov	r1, r3
 8113a40:	4811      	ldr	r0, [pc, #68]	@ (8113a88 <xTaskGenericNotifyFromISR+0x1c0>)
 8113a42:	f7fc fec6 	bl	81107d2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8113a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8113a48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8113a4a:	4b10      	ldr	r3, [pc, #64]	@ (8113a8c <xTaskGenericNotifyFromISR+0x1c4>)
 8113a4c:	681b      	ldr	r3, [r3, #0]
 8113a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8113a50:	429a      	cmp	r2, r3
 8113a52:	d908      	bls.n	8113a66 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8113a54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8113a56:	2b00      	cmp	r3, #0
 8113a58:	d002      	beq.n	8113a60 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8113a5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8113a5c:	2201      	movs	r2, #1
 8113a5e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8113a60:	4b0b      	ldr	r3, [pc, #44]	@ (8113a90 <xTaskGenericNotifyFromISR+0x1c8>)
 8113a62:	2201      	movs	r2, #1
 8113a64:	601a      	str	r2, [r3, #0]
 8113a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8113a68:	613b      	str	r3, [r7, #16]
	__asm volatile
 8113a6a:	693b      	ldr	r3, [r7, #16]
 8113a6c:	f383 8811 	msr	BASEPRI, r3
}
 8113a70:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8113a72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8113a74:	4618      	mov	r0, r3
 8113a76:	3738      	adds	r7, #56	@ 0x38
 8113a78:	46bd      	mov	sp, r7
 8113a7a:	bd80      	pop	{r7, pc}
 8113a7c:	1000b090 	.word	0x1000b090
 8113a80:	1000b070 	.word	0x1000b070
 8113a84:	1000ab98 	.word	0x1000ab98
 8113a88:	1000b028 	.word	0x1000b028
 8113a8c:	1000ab94 	.word	0x1000ab94
 8113a90:	1000b07c 	.word	0x1000b07c

08113a94 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8113a94:	b580      	push	{r7, lr}
 8113a96:	b084      	sub	sp, #16
 8113a98:	af00      	add	r7, sp, #0
 8113a9a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8113a9c:	687b      	ldr	r3, [r7, #4]
 8113a9e:	2b00      	cmp	r3, #0
 8113aa0:	d102      	bne.n	8113aa8 <xTaskNotifyStateClear+0x14>
 8113aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8113adc <xTaskNotifyStateClear+0x48>)
 8113aa4:	681b      	ldr	r3, [r3, #0]
 8113aa6:	e000      	b.n	8113aaa <xTaskNotifyStateClear+0x16>
 8113aa8:	687b      	ldr	r3, [r7, #4]
 8113aaa:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8113aac:	f7fd f84c 	bl	8110b48 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8113ab0:	68bb      	ldr	r3, [r7, #8]
 8113ab2:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8113ab6:	b2db      	uxtb	r3, r3
 8113ab8:	2b02      	cmp	r3, #2
 8113aba:	d106      	bne.n	8113aca <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8113abc:	68bb      	ldr	r3, [r7, #8]
 8113abe:	2200      	movs	r2, #0
 8113ac0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				xReturn = pdPASS;
 8113ac4:	2301      	movs	r3, #1
 8113ac6:	60fb      	str	r3, [r7, #12]
 8113ac8:	e001      	b.n	8113ace <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 8113aca:	2300      	movs	r3, #0
 8113acc:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8113ace:	f7fd f86d 	bl	8110bac <vPortExitCritical>

		return xReturn;
 8113ad2:	68fb      	ldr	r3, [r7, #12]
	}
 8113ad4:	4618      	mov	r0, r3
 8113ad6:	3710      	adds	r7, #16
 8113ad8:	46bd      	mov	sp, r7
 8113ada:	bd80      	pop	{r7, pc}
 8113adc:	1000ab94 	.word	0x1000ab94

08113ae0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8113ae0:	b580      	push	{r7, lr}
 8113ae2:	b084      	sub	sp, #16
 8113ae4:	af00      	add	r7, sp, #0
 8113ae6:	6078      	str	r0, [r7, #4]
 8113ae8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8113aea:	4b21      	ldr	r3, [pc, #132]	@ (8113b70 <prvAddCurrentTaskToDelayedList+0x90>)
 8113aec:	681b      	ldr	r3, [r3, #0]
 8113aee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8113af0:	4b20      	ldr	r3, [pc, #128]	@ (8113b74 <prvAddCurrentTaskToDelayedList+0x94>)
 8113af2:	681b      	ldr	r3, [r3, #0]
 8113af4:	3304      	adds	r3, #4
 8113af6:	4618      	mov	r0, r3
 8113af8:	f7fc fec8 	bl	811088c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8113afc:	687b      	ldr	r3, [r7, #4]
 8113afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8113b02:	d10a      	bne.n	8113b1a <prvAddCurrentTaskToDelayedList+0x3a>
 8113b04:	683b      	ldr	r3, [r7, #0]
 8113b06:	2b00      	cmp	r3, #0
 8113b08:	d007      	beq.n	8113b1a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8113b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8113b74 <prvAddCurrentTaskToDelayedList+0x94>)
 8113b0c:	681b      	ldr	r3, [r3, #0]
 8113b0e:	3304      	adds	r3, #4
 8113b10:	4619      	mov	r1, r3
 8113b12:	4819      	ldr	r0, [pc, #100]	@ (8113b78 <prvAddCurrentTaskToDelayedList+0x98>)
 8113b14:	f7fc fe5d 	bl	81107d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8113b18:	e026      	b.n	8113b68 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8113b1a:	68fa      	ldr	r2, [r7, #12]
 8113b1c:	687b      	ldr	r3, [r7, #4]
 8113b1e:	4413      	add	r3, r2
 8113b20:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8113b22:	4b14      	ldr	r3, [pc, #80]	@ (8113b74 <prvAddCurrentTaskToDelayedList+0x94>)
 8113b24:	681b      	ldr	r3, [r3, #0]
 8113b26:	68ba      	ldr	r2, [r7, #8]
 8113b28:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8113b2a:	68ba      	ldr	r2, [r7, #8]
 8113b2c:	68fb      	ldr	r3, [r7, #12]
 8113b2e:	429a      	cmp	r2, r3
 8113b30:	d209      	bcs.n	8113b46 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8113b32:	4b12      	ldr	r3, [pc, #72]	@ (8113b7c <prvAddCurrentTaskToDelayedList+0x9c>)
 8113b34:	681a      	ldr	r2, [r3, #0]
 8113b36:	4b0f      	ldr	r3, [pc, #60]	@ (8113b74 <prvAddCurrentTaskToDelayedList+0x94>)
 8113b38:	681b      	ldr	r3, [r3, #0]
 8113b3a:	3304      	adds	r3, #4
 8113b3c:	4619      	mov	r1, r3
 8113b3e:	4610      	mov	r0, r2
 8113b40:	f7fc fe6b 	bl	811081a <vListInsert>
}
 8113b44:	e010      	b.n	8113b68 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8113b46:	4b0e      	ldr	r3, [pc, #56]	@ (8113b80 <prvAddCurrentTaskToDelayedList+0xa0>)
 8113b48:	681a      	ldr	r2, [r3, #0]
 8113b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8113b74 <prvAddCurrentTaskToDelayedList+0x94>)
 8113b4c:	681b      	ldr	r3, [r3, #0]
 8113b4e:	3304      	adds	r3, #4
 8113b50:	4619      	mov	r1, r3
 8113b52:	4610      	mov	r0, r2
 8113b54:	f7fc fe61 	bl	811081a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8113b58:	4b0a      	ldr	r3, [pc, #40]	@ (8113b84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8113b5a:	681b      	ldr	r3, [r3, #0]
 8113b5c:	68ba      	ldr	r2, [r7, #8]
 8113b5e:	429a      	cmp	r2, r3
 8113b60:	d202      	bcs.n	8113b68 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8113b62:	4a08      	ldr	r2, [pc, #32]	@ (8113b84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8113b64:	68bb      	ldr	r3, [r7, #8]
 8113b66:	6013      	str	r3, [r2, #0]
}
 8113b68:	bf00      	nop
 8113b6a:	3710      	adds	r7, #16
 8113b6c:	46bd      	mov	sp, r7
 8113b6e:	bd80      	pop	{r7, pc}
 8113b70:	1000b06c 	.word	0x1000b06c
 8113b74:	1000ab94 	.word	0x1000ab94
 8113b78:	1000b054 	.word	0x1000b054
 8113b7c:	1000b024 	.word	0x1000b024
 8113b80:	1000b020 	.word	0x1000b020
 8113b84:	1000b088 	.word	0x1000b088

08113b88 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8113b88:	b580      	push	{r7, lr}
 8113b8a:	b08a      	sub	sp, #40	@ 0x28
 8113b8c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8113b8e:	2300      	movs	r3, #0
 8113b90:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8113b92:	f000 fb13 	bl	81141bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8113b96:	4b1d      	ldr	r3, [pc, #116]	@ (8113c0c <xTimerCreateTimerTask+0x84>)
 8113b98:	681b      	ldr	r3, [r3, #0]
 8113b9a:	2b00      	cmp	r3, #0
 8113b9c:	d021      	beq.n	8113be2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8113b9e:	2300      	movs	r3, #0
 8113ba0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8113ba2:	2300      	movs	r3, #0
 8113ba4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8113ba6:	1d3a      	adds	r2, r7, #4
 8113ba8:	f107 0108 	add.w	r1, r7, #8
 8113bac:	f107 030c 	add.w	r3, r7, #12
 8113bb0:	4618      	mov	r0, r3
 8113bb2:	f7fc fbd9 	bl	8110368 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8113bb6:	6879      	ldr	r1, [r7, #4]
 8113bb8:	68bb      	ldr	r3, [r7, #8]
 8113bba:	68fa      	ldr	r2, [r7, #12]
 8113bbc:	9202      	str	r2, [sp, #8]
 8113bbe:	9301      	str	r3, [sp, #4]
 8113bc0:	2302      	movs	r3, #2
 8113bc2:	9300      	str	r3, [sp, #0]
 8113bc4:	2300      	movs	r3, #0
 8113bc6:	460a      	mov	r2, r1
 8113bc8:	4911      	ldr	r1, [pc, #68]	@ (8113c10 <xTimerCreateTimerTask+0x88>)
 8113bca:	4812      	ldr	r0, [pc, #72]	@ (8113c14 <xTimerCreateTimerTask+0x8c>)
 8113bcc:	f7fe fdec 	bl	81127a8 <xTaskCreateStatic>
 8113bd0:	4603      	mov	r3, r0
 8113bd2:	4a11      	ldr	r2, [pc, #68]	@ (8113c18 <xTimerCreateTimerTask+0x90>)
 8113bd4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8113bd6:	4b10      	ldr	r3, [pc, #64]	@ (8113c18 <xTimerCreateTimerTask+0x90>)
 8113bd8:	681b      	ldr	r3, [r3, #0]
 8113bda:	2b00      	cmp	r3, #0
 8113bdc:	d001      	beq.n	8113be2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8113bde:	2301      	movs	r3, #1
 8113be0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8113be2:	697b      	ldr	r3, [r7, #20]
 8113be4:	2b00      	cmp	r3, #0
 8113be6:	d10b      	bne.n	8113c00 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8113be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8113bec:	f383 8811 	msr	BASEPRI, r3
 8113bf0:	f3bf 8f6f 	isb	sy
 8113bf4:	f3bf 8f4f 	dsb	sy
 8113bf8:	613b      	str	r3, [r7, #16]
}
 8113bfa:	bf00      	nop
 8113bfc:	bf00      	nop
 8113bfe:	e7fd      	b.n	8113bfc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8113c00:	697b      	ldr	r3, [r7, #20]
}
 8113c02:	4618      	mov	r0, r3
 8113c04:	3718      	adds	r7, #24
 8113c06:	46bd      	mov	sp, r7
 8113c08:	bd80      	pop	{r7, pc}
 8113c0a:	bf00      	nop
 8113c0c:	1000b0c4 	.word	0x1000b0c4
 8113c10:	08123b54 	.word	0x08123b54
 8113c14:	08113d55 	.word	0x08113d55
 8113c18:	1000b0c8 	.word	0x1000b0c8

08113c1c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8113c1c:	b580      	push	{r7, lr}
 8113c1e:	b08a      	sub	sp, #40	@ 0x28
 8113c20:	af00      	add	r7, sp, #0
 8113c22:	60f8      	str	r0, [r7, #12]
 8113c24:	60b9      	str	r1, [r7, #8]
 8113c26:	607a      	str	r2, [r7, #4]
 8113c28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8113c2a:	2300      	movs	r3, #0
 8113c2c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8113c2e:	68fb      	ldr	r3, [r7, #12]
 8113c30:	2b00      	cmp	r3, #0
 8113c32:	d10b      	bne.n	8113c4c <xTimerGenericCommand+0x30>
	__asm volatile
 8113c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8113c38:	f383 8811 	msr	BASEPRI, r3
 8113c3c:	f3bf 8f6f 	isb	sy
 8113c40:	f3bf 8f4f 	dsb	sy
 8113c44:	623b      	str	r3, [r7, #32]
}
 8113c46:	bf00      	nop
 8113c48:	bf00      	nop
 8113c4a:	e7fd      	b.n	8113c48 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8113c4c:	4b19      	ldr	r3, [pc, #100]	@ (8113cb4 <xTimerGenericCommand+0x98>)
 8113c4e:	681b      	ldr	r3, [r3, #0]
 8113c50:	2b00      	cmp	r3, #0
 8113c52:	d02a      	beq.n	8113caa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8113c54:	68bb      	ldr	r3, [r7, #8]
 8113c56:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8113c58:	687b      	ldr	r3, [r7, #4]
 8113c5a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8113c5c:	68fb      	ldr	r3, [r7, #12]
 8113c5e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8113c60:	68bb      	ldr	r3, [r7, #8]
 8113c62:	2b05      	cmp	r3, #5
 8113c64:	dc18      	bgt.n	8113c98 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8113c66:	f7ff fc41 	bl	81134ec <xTaskGetSchedulerState>
 8113c6a:	4603      	mov	r3, r0
 8113c6c:	2b02      	cmp	r3, #2
 8113c6e:	d109      	bne.n	8113c84 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8113c70:	4b10      	ldr	r3, [pc, #64]	@ (8113cb4 <xTimerGenericCommand+0x98>)
 8113c72:	6818      	ldr	r0, [r3, #0]
 8113c74:	f107 0110 	add.w	r1, r7, #16
 8113c78:	2300      	movs	r3, #0
 8113c7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8113c7c:	f7fd faf2 	bl	8111264 <xQueueGenericSend>
 8113c80:	6278      	str	r0, [r7, #36]	@ 0x24
 8113c82:	e012      	b.n	8113caa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8113c84:	4b0b      	ldr	r3, [pc, #44]	@ (8113cb4 <xTimerGenericCommand+0x98>)
 8113c86:	6818      	ldr	r0, [r3, #0]
 8113c88:	f107 0110 	add.w	r1, r7, #16
 8113c8c:	2300      	movs	r3, #0
 8113c8e:	2200      	movs	r2, #0
 8113c90:	f7fd fae8 	bl	8111264 <xQueueGenericSend>
 8113c94:	6278      	str	r0, [r7, #36]	@ 0x24
 8113c96:	e008      	b.n	8113caa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8113c98:	4b06      	ldr	r3, [pc, #24]	@ (8113cb4 <xTimerGenericCommand+0x98>)
 8113c9a:	6818      	ldr	r0, [r3, #0]
 8113c9c:	f107 0110 	add.w	r1, r7, #16
 8113ca0:	2300      	movs	r3, #0
 8113ca2:	683a      	ldr	r2, [r7, #0]
 8113ca4:	f7fd fbe0 	bl	8111468 <xQueueGenericSendFromISR>
 8113ca8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8113caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8113cac:	4618      	mov	r0, r3
 8113cae:	3728      	adds	r7, #40	@ 0x28
 8113cb0:	46bd      	mov	sp, r7
 8113cb2:	bd80      	pop	{r7, pc}
 8113cb4:	1000b0c4 	.word	0x1000b0c4

08113cb8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8113cb8:	b580      	push	{r7, lr}
 8113cba:	b088      	sub	sp, #32
 8113cbc:	af02      	add	r7, sp, #8
 8113cbe:	6078      	str	r0, [r7, #4]
 8113cc0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8113cc2:	4b23      	ldr	r3, [pc, #140]	@ (8113d50 <prvProcessExpiredTimer+0x98>)
 8113cc4:	681b      	ldr	r3, [r3, #0]
 8113cc6:	68db      	ldr	r3, [r3, #12]
 8113cc8:	68db      	ldr	r3, [r3, #12]
 8113cca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8113ccc:	697b      	ldr	r3, [r7, #20]
 8113cce:	3304      	adds	r3, #4
 8113cd0:	4618      	mov	r0, r3
 8113cd2:	f7fc fddb 	bl	811088c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8113cd6:	697b      	ldr	r3, [r7, #20]
 8113cd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8113cdc:	f003 0304 	and.w	r3, r3, #4
 8113ce0:	2b00      	cmp	r3, #0
 8113ce2:	d023      	beq.n	8113d2c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8113ce4:	697b      	ldr	r3, [r7, #20]
 8113ce6:	699a      	ldr	r2, [r3, #24]
 8113ce8:	687b      	ldr	r3, [r7, #4]
 8113cea:	18d1      	adds	r1, r2, r3
 8113cec:	687b      	ldr	r3, [r7, #4]
 8113cee:	683a      	ldr	r2, [r7, #0]
 8113cf0:	6978      	ldr	r0, [r7, #20]
 8113cf2:	f000 f8d5 	bl	8113ea0 <prvInsertTimerInActiveList>
 8113cf6:	4603      	mov	r3, r0
 8113cf8:	2b00      	cmp	r3, #0
 8113cfa:	d020      	beq.n	8113d3e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8113cfc:	2300      	movs	r3, #0
 8113cfe:	9300      	str	r3, [sp, #0]
 8113d00:	2300      	movs	r3, #0
 8113d02:	687a      	ldr	r2, [r7, #4]
 8113d04:	2100      	movs	r1, #0
 8113d06:	6978      	ldr	r0, [r7, #20]
 8113d08:	f7ff ff88 	bl	8113c1c <xTimerGenericCommand>
 8113d0c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8113d0e:	693b      	ldr	r3, [r7, #16]
 8113d10:	2b00      	cmp	r3, #0
 8113d12:	d114      	bne.n	8113d3e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8113d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8113d18:	f383 8811 	msr	BASEPRI, r3
 8113d1c:	f3bf 8f6f 	isb	sy
 8113d20:	f3bf 8f4f 	dsb	sy
 8113d24:	60fb      	str	r3, [r7, #12]
}
 8113d26:	bf00      	nop
 8113d28:	bf00      	nop
 8113d2a:	e7fd      	b.n	8113d28 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8113d2c:	697b      	ldr	r3, [r7, #20]
 8113d2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8113d32:	f023 0301 	bic.w	r3, r3, #1
 8113d36:	b2da      	uxtb	r2, r3
 8113d38:	697b      	ldr	r3, [r7, #20]
 8113d3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8113d3e:	697b      	ldr	r3, [r7, #20]
 8113d40:	6a1b      	ldr	r3, [r3, #32]
 8113d42:	6978      	ldr	r0, [r7, #20]
 8113d44:	4798      	blx	r3
}
 8113d46:	bf00      	nop
 8113d48:	3718      	adds	r7, #24
 8113d4a:	46bd      	mov	sp, r7
 8113d4c:	bd80      	pop	{r7, pc}
 8113d4e:	bf00      	nop
 8113d50:	1000b0bc 	.word	0x1000b0bc

08113d54 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8113d54:	b580      	push	{r7, lr}
 8113d56:	b084      	sub	sp, #16
 8113d58:	af00      	add	r7, sp, #0
 8113d5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8113d5c:	f107 0308 	add.w	r3, r7, #8
 8113d60:	4618      	mov	r0, r3
 8113d62:	f000 f859 	bl	8113e18 <prvGetNextExpireTime>
 8113d66:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8113d68:	68bb      	ldr	r3, [r7, #8]
 8113d6a:	4619      	mov	r1, r3
 8113d6c:	68f8      	ldr	r0, [r7, #12]
 8113d6e:	f000 f805 	bl	8113d7c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8113d72:	f000 f8d7 	bl	8113f24 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8113d76:	bf00      	nop
 8113d78:	e7f0      	b.n	8113d5c <prvTimerTask+0x8>
	...

08113d7c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8113d7c:	b580      	push	{r7, lr}
 8113d7e:	b084      	sub	sp, #16
 8113d80:	af00      	add	r7, sp, #0
 8113d82:	6078      	str	r0, [r7, #4]
 8113d84:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8113d86:	f7fe ff73 	bl	8112c70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8113d8a:	f107 0308 	add.w	r3, r7, #8
 8113d8e:	4618      	mov	r0, r3
 8113d90:	f000 f866 	bl	8113e60 <prvSampleTimeNow>
 8113d94:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8113d96:	68bb      	ldr	r3, [r7, #8]
 8113d98:	2b00      	cmp	r3, #0
 8113d9a:	d130      	bne.n	8113dfe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8113d9c:	683b      	ldr	r3, [r7, #0]
 8113d9e:	2b00      	cmp	r3, #0
 8113da0:	d10a      	bne.n	8113db8 <prvProcessTimerOrBlockTask+0x3c>
 8113da2:	687a      	ldr	r2, [r7, #4]
 8113da4:	68fb      	ldr	r3, [r7, #12]
 8113da6:	429a      	cmp	r2, r3
 8113da8:	d806      	bhi.n	8113db8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8113daa:	f7fe ff6f 	bl	8112c8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8113dae:	68f9      	ldr	r1, [r7, #12]
 8113db0:	6878      	ldr	r0, [r7, #4]
 8113db2:	f7ff ff81 	bl	8113cb8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8113db6:	e024      	b.n	8113e02 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8113db8:	683b      	ldr	r3, [r7, #0]
 8113dba:	2b00      	cmp	r3, #0
 8113dbc:	d008      	beq.n	8113dd0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8113dbe:	4b13      	ldr	r3, [pc, #76]	@ (8113e0c <prvProcessTimerOrBlockTask+0x90>)
 8113dc0:	681b      	ldr	r3, [r3, #0]
 8113dc2:	681b      	ldr	r3, [r3, #0]
 8113dc4:	2b00      	cmp	r3, #0
 8113dc6:	d101      	bne.n	8113dcc <prvProcessTimerOrBlockTask+0x50>
 8113dc8:	2301      	movs	r3, #1
 8113dca:	e000      	b.n	8113dce <prvProcessTimerOrBlockTask+0x52>
 8113dcc:	2300      	movs	r3, #0
 8113dce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8113dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8113e10 <prvProcessTimerOrBlockTask+0x94>)
 8113dd2:	6818      	ldr	r0, [r3, #0]
 8113dd4:	687a      	ldr	r2, [r7, #4]
 8113dd6:	68fb      	ldr	r3, [r7, #12]
 8113dd8:	1ad3      	subs	r3, r2, r3
 8113dda:	683a      	ldr	r2, [r7, #0]
 8113ddc:	4619      	mov	r1, r3
 8113dde:	f7fe f885 	bl	8111eec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8113de2:	f7fe ff53 	bl	8112c8c <xTaskResumeAll>
 8113de6:	4603      	mov	r3, r0
 8113de8:	2b00      	cmp	r3, #0
 8113dea:	d10a      	bne.n	8113e02 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8113dec:	4b09      	ldr	r3, [pc, #36]	@ (8113e14 <prvProcessTimerOrBlockTask+0x98>)
 8113dee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8113df2:	601a      	str	r2, [r3, #0]
 8113df4:	f3bf 8f4f 	dsb	sy
 8113df8:	f3bf 8f6f 	isb	sy
}
 8113dfc:	e001      	b.n	8113e02 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8113dfe:	f7fe ff45 	bl	8112c8c <xTaskResumeAll>
}
 8113e02:	bf00      	nop
 8113e04:	3710      	adds	r7, #16
 8113e06:	46bd      	mov	sp, r7
 8113e08:	bd80      	pop	{r7, pc}
 8113e0a:	bf00      	nop
 8113e0c:	1000b0c0 	.word	0x1000b0c0
 8113e10:	1000b0c4 	.word	0x1000b0c4
 8113e14:	e000ed04 	.word	0xe000ed04

08113e18 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8113e18:	b480      	push	{r7}
 8113e1a:	b085      	sub	sp, #20
 8113e1c:	af00      	add	r7, sp, #0
 8113e1e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8113e20:	4b0e      	ldr	r3, [pc, #56]	@ (8113e5c <prvGetNextExpireTime+0x44>)
 8113e22:	681b      	ldr	r3, [r3, #0]
 8113e24:	681b      	ldr	r3, [r3, #0]
 8113e26:	2b00      	cmp	r3, #0
 8113e28:	d101      	bne.n	8113e2e <prvGetNextExpireTime+0x16>
 8113e2a:	2201      	movs	r2, #1
 8113e2c:	e000      	b.n	8113e30 <prvGetNextExpireTime+0x18>
 8113e2e:	2200      	movs	r2, #0
 8113e30:	687b      	ldr	r3, [r7, #4]
 8113e32:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8113e34:	687b      	ldr	r3, [r7, #4]
 8113e36:	681b      	ldr	r3, [r3, #0]
 8113e38:	2b00      	cmp	r3, #0
 8113e3a:	d105      	bne.n	8113e48 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8113e3c:	4b07      	ldr	r3, [pc, #28]	@ (8113e5c <prvGetNextExpireTime+0x44>)
 8113e3e:	681b      	ldr	r3, [r3, #0]
 8113e40:	68db      	ldr	r3, [r3, #12]
 8113e42:	681b      	ldr	r3, [r3, #0]
 8113e44:	60fb      	str	r3, [r7, #12]
 8113e46:	e001      	b.n	8113e4c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8113e48:	2300      	movs	r3, #0
 8113e4a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8113e4c:	68fb      	ldr	r3, [r7, #12]
}
 8113e4e:	4618      	mov	r0, r3
 8113e50:	3714      	adds	r7, #20
 8113e52:	46bd      	mov	sp, r7
 8113e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113e58:	4770      	bx	lr
 8113e5a:	bf00      	nop
 8113e5c:	1000b0bc 	.word	0x1000b0bc

08113e60 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8113e60:	b580      	push	{r7, lr}
 8113e62:	b084      	sub	sp, #16
 8113e64:	af00      	add	r7, sp, #0
 8113e66:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8113e68:	f7fe ffae 	bl	8112dc8 <xTaskGetTickCount>
 8113e6c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8113e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8113e9c <prvSampleTimeNow+0x3c>)
 8113e70:	681b      	ldr	r3, [r3, #0]
 8113e72:	68fa      	ldr	r2, [r7, #12]
 8113e74:	429a      	cmp	r2, r3
 8113e76:	d205      	bcs.n	8113e84 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8113e78:	f000 f93a 	bl	81140f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8113e7c:	687b      	ldr	r3, [r7, #4]
 8113e7e:	2201      	movs	r2, #1
 8113e80:	601a      	str	r2, [r3, #0]
 8113e82:	e002      	b.n	8113e8a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8113e84:	687b      	ldr	r3, [r7, #4]
 8113e86:	2200      	movs	r2, #0
 8113e88:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8113e8a:	4a04      	ldr	r2, [pc, #16]	@ (8113e9c <prvSampleTimeNow+0x3c>)
 8113e8c:	68fb      	ldr	r3, [r7, #12]
 8113e8e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8113e90:	68fb      	ldr	r3, [r7, #12]
}
 8113e92:	4618      	mov	r0, r3
 8113e94:	3710      	adds	r7, #16
 8113e96:	46bd      	mov	sp, r7
 8113e98:	bd80      	pop	{r7, pc}
 8113e9a:	bf00      	nop
 8113e9c:	1000b0cc 	.word	0x1000b0cc

08113ea0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8113ea0:	b580      	push	{r7, lr}
 8113ea2:	b086      	sub	sp, #24
 8113ea4:	af00      	add	r7, sp, #0
 8113ea6:	60f8      	str	r0, [r7, #12]
 8113ea8:	60b9      	str	r1, [r7, #8]
 8113eaa:	607a      	str	r2, [r7, #4]
 8113eac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8113eae:	2300      	movs	r3, #0
 8113eb0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8113eb2:	68fb      	ldr	r3, [r7, #12]
 8113eb4:	68ba      	ldr	r2, [r7, #8]
 8113eb6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8113eb8:	68fb      	ldr	r3, [r7, #12]
 8113eba:	68fa      	ldr	r2, [r7, #12]
 8113ebc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8113ebe:	68ba      	ldr	r2, [r7, #8]
 8113ec0:	687b      	ldr	r3, [r7, #4]
 8113ec2:	429a      	cmp	r2, r3
 8113ec4:	d812      	bhi.n	8113eec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8113ec6:	687a      	ldr	r2, [r7, #4]
 8113ec8:	683b      	ldr	r3, [r7, #0]
 8113eca:	1ad2      	subs	r2, r2, r3
 8113ecc:	68fb      	ldr	r3, [r7, #12]
 8113ece:	699b      	ldr	r3, [r3, #24]
 8113ed0:	429a      	cmp	r2, r3
 8113ed2:	d302      	bcc.n	8113eda <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8113ed4:	2301      	movs	r3, #1
 8113ed6:	617b      	str	r3, [r7, #20]
 8113ed8:	e01b      	b.n	8113f12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8113eda:	4b10      	ldr	r3, [pc, #64]	@ (8113f1c <prvInsertTimerInActiveList+0x7c>)
 8113edc:	681a      	ldr	r2, [r3, #0]
 8113ede:	68fb      	ldr	r3, [r7, #12]
 8113ee0:	3304      	adds	r3, #4
 8113ee2:	4619      	mov	r1, r3
 8113ee4:	4610      	mov	r0, r2
 8113ee6:	f7fc fc98 	bl	811081a <vListInsert>
 8113eea:	e012      	b.n	8113f12 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8113eec:	687a      	ldr	r2, [r7, #4]
 8113eee:	683b      	ldr	r3, [r7, #0]
 8113ef0:	429a      	cmp	r2, r3
 8113ef2:	d206      	bcs.n	8113f02 <prvInsertTimerInActiveList+0x62>
 8113ef4:	68ba      	ldr	r2, [r7, #8]
 8113ef6:	683b      	ldr	r3, [r7, #0]
 8113ef8:	429a      	cmp	r2, r3
 8113efa:	d302      	bcc.n	8113f02 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8113efc:	2301      	movs	r3, #1
 8113efe:	617b      	str	r3, [r7, #20]
 8113f00:	e007      	b.n	8113f12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8113f02:	4b07      	ldr	r3, [pc, #28]	@ (8113f20 <prvInsertTimerInActiveList+0x80>)
 8113f04:	681a      	ldr	r2, [r3, #0]
 8113f06:	68fb      	ldr	r3, [r7, #12]
 8113f08:	3304      	adds	r3, #4
 8113f0a:	4619      	mov	r1, r3
 8113f0c:	4610      	mov	r0, r2
 8113f0e:	f7fc fc84 	bl	811081a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8113f12:	697b      	ldr	r3, [r7, #20]
}
 8113f14:	4618      	mov	r0, r3
 8113f16:	3718      	adds	r7, #24
 8113f18:	46bd      	mov	sp, r7
 8113f1a:	bd80      	pop	{r7, pc}
 8113f1c:	1000b0c0 	.word	0x1000b0c0
 8113f20:	1000b0bc 	.word	0x1000b0bc

08113f24 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8113f24:	b580      	push	{r7, lr}
 8113f26:	b08e      	sub	sp, #56	@ 0x38
 8113f28:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8113f2a:	e0ce      	b.n	81140ca <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8113f2c:	687b      	ldr	r3, [r7, #4]
 8113f2e:	2b00      	cmp	r3, #0
 8113f30:	da19      	bge.n	8113f66 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8113f32:	1d3b      	adds	r3, r7, #4
 8113f34:	3304      	adds	r3, #4
 8113f36:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8113f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8113f3a:	2b00      	cmp	r3, #0
 8113f3c:	d10b      	bne.n	8113f56 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8113f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8113f42:	f383 8811 	msr	BASEPRI, r3
 8113f46:	f3bf 8f6f 	isb	sy
 8113f4a:	f3bf 8f4f 	dsb	sy
 8113f4e:	61fb      	str	r3, [r7, #28]
}
 8113f50:	bf00      	nop
 8113f52:	bf00      	nop
 8113f54:	e7fd      	b.n	8113f52 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8113f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8113f58:	681b      	ldr	r3, [r3, #0]
 8113f5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8113f5c:	6850      	ldr	r0, [r2, #4]
 8113f5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8113f60:	6892      	ldr	r2, [r2, #8]
 8113f62:	4611      	mov	r1, r2
 8113f64:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8113f66:	687b      	ldr	r3, [r7, #4]
 8113f68:	2b00      	cmp	r3, #0
 8113f6a:	f2c0 80ae 	blt.w	81140ca <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8113f6e:	68fb      	ldr	r3, [r7, #12]
 8113f70:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8113f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8113f74:	695b      	ldr	r3, [r3, #20]
 8113f76:	2b00      	cmp	r3, #0
 8113f78:	d004      	beq.n	8113f84 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8113f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8113f7c:	3304      	adds	r3, #4
 8113f7e:	4618      	mov	r0, r3
 8113f80:	f7fc fc84 	bl	811088c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8113f84:	463b      	mov	r3, r7
 8113f86:	4618      	mov	r0, r3
 8113f88:	f7ff ff6a 	bl	8113e60 <prvSampleTimeNow>
 8113f8c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8113f8e:	687b      	ldr	r3, [r7, #4]
 8113f90:	2b09      	cmp	r3, #9
 8113f92:	f200 8097 	bhi.w	81140c4 <prvProcessReceivedCommands+0x1a0>
 8113f96:	a201      	add	r2, pc, #4	@ (adr r2, 8113f9c <prvProcessReceivedCommands+0x78>)
 8113f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8113f9c:	08113fc5 	.word	0x08113fc5
 8113fa0:	08113fc5 	.word	0x08113fc5
 8113fa4:	08113fc5 	.word	0x08113fc5
 8113fa8:	0811403b 	.word	0x0811403b
 8113fac:	0811404f 	.word	0x0811404f
 8113fb0:	0811409b 	.word	0x0811409b
 8113fb4:	08113fc5 	.word	0x08113fc5
 8113fb8:	08113fc5 	.word	0x08113fc5
 8113fbc:	0811403b 	.word	0x0811403b
 8113fc0:	0811404f 	.word	0x0811404f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8113fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8113fc6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8113fca:	f043 0301 	orr.w	r3, r3, #1
 8113fce:	b2da      	uxtb	r2, r3
 8113fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8113fd2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8113fd6:	68ba      	ldr	r2, [r7, #8]
 8113fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8113fda:	699b      	ldr	r3, [r3, #24]
 8113fdc:	18d1      	adds	r1, r2, r3
 8113fde:	68bb      	ldr	r3, [r7, #8]
 8113fe0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8113fe2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8113fe4:	f7ff ff5c 	bl	8113ea0 <prvInsertTimerInActiveList>
 8113fe8:	4603      	mov	r3, r0
 8113fea:	2b00      	cmp	r3, #0
 8113fec:	d06c      	beq.n	81140c8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8113fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8113ff0:	6a1b      	ldr	r3, [r3, #32]
 8113ff2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8113ff4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8113ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8113ff8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8113ffc:	f003 0304 	and.w	r3, r3, #4
 8114000:	2b00      	cmp	r3, #0
 8114002:	d061      	beq.n	81140c8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8114004:	68ba      	ldr	r2, [r7, #8]
 8114006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8114008:	699b      	ldr	r3, [r3, #24]
 811400a:	441a      	add	r2, r3
 811400c:	2300      	movs	r3, #0
 811400e:	9300      	str	r3, [sp, #0]
 8114010:	2300      	movs	r3, #0
 8114012:	2100      	movs	r1, #0
 8114014:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8114016:	f7ff fe01 	bl	8113c1c <xTimerGenericCommand>
 811401a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 811401c:	6a3b      	ldr	r3, [r7, #32]
 811401e:	2b00      	cmp	r3, #0
 8114020:	d152      	bne.n	81140c8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8114022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114026:	f383 8811 	msr	BASEPRI, r3
 811402a:	f3bf 8f6f 	isb	sy
 811402e:	f3bf 8f4f 	dsb	sy
 8114032:	61bb      	str	r3, [r7, #24]
}
 8114034:	bf00      	nop
 8114036:	bf00      	nop
 8114038:	e7fd      	b.n	8114036 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 811403a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811403c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8114040:	f023 0301 	bic.w	r3, r3, #1
 8114044:	b2da      	uxtb	r2, r3
 8114046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8114048:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 811404c:	e03d      	b.n	81140ca <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 811404e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8114050:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8114054:	f043 0301 	orr.w	r3, r3, #1
 8114058:	b2da      	uxtb	r2, r3
 811405a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811405c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8114060:	68ba      	ldr	r2, [r7, #8]
 8114062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8114064:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8114066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8114068:	699b      	ldr	r3, [r3, #24]
 811406a:	2b00      	cmp	r3, #0
 811406c:	d10b      	bne.n	8114086 <prvProcessReceivedCommands+0x162>
	__asm volatile
 811406e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114072:	f383 8811 	msr	BASEPRI, r3
 8114076:	f3bf 8f6f 	isb	sy
 811407a:	f3bf 8f4f 	dsb	sy
 811407e:	617b      	str	r3, [r7, #20]
}
 8114080:	bf00      	nop
 8114082:	bf00      	nop
 8114084:	e7fd      	b.n	8114082 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8114086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8114088:	699a      	ldr	r2, [r3, #24]
 811408a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811408c:	18d1      	adds	r1, r2, r3
 811408e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114090:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8114092:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8114094:	f7ff ff04 	bl	8113ea0 <prvInsertTimerInActiveList>
					break;
 8114098:	e017      	b.n	81140ca <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 811409a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811409c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81140a0:	f003 0302 	and.w	r3, r3, #2
 81140a4:	2b00      	cmp	r3, #0
 81140a6:	d103      	bne.n	81140b0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 81140a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81140aa:	f7fc fa45 	bl	8110538 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 81140ae:	e00c      	b.n	81140ca <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 81140b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81140b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81140b6:	f023 0301 	bic.w	r3, r3, #1
 81140ba:	b2da      	uxtb	r2, r3
 81140bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81140be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 81140c2:	e002      	b.n	81140ca <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 81140c4:	bf00      	nop
 81140c6:	e000      	b.n	81140ca <prvProcessReceivedCommands+0x1a6>
					break;
 81140c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 81140ca:	4b08      	ldr	r3, [pc, #32]	@ (81140ec <prvProcessReceivedCommands+0x1c8>)
 81140cc:	681b      	ldr	r3, [r3, #0]
 81140ce:	1d39      	adds	r1, r7, #4
 81140d0:	2200      	movs	r2, #0
 81140d2:	4618      	mov	r0, r3
 81140d4:	f7fd faf6 	bl	81116c4 <xQueueReceive>
 81140d8:	4603      	mov	r3, r0
 81140da:	2b00      	cmp	r3, #0
 81140dc:	f47f af26 	bne.w	8113f2c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 81140e0:	bf00      	nop
 81140e2:	bf00      	nop
 81140e4:	3730      	adds	r7, #48	@ 0x30
 81140e6:	46bd      	mov	sp, r7
 81140e8:	bd80      	pop	{r7, pc}
 81140ea:	bf00      	nop
 81140ec:	1000b0c4 	.word	0x1000b0c4

081140f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 81140f0:	b580      	push	{r7, lr}
 81140f2:	b088      	sub	sp, #32
 81140f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 81140f6:	e049      	b.n	811418c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 81140f8:	4b2e      	ldr	r3, [pc, #184]	@ (81141b4 <prvSwitchTimerLists+0xc4>)
 81140fa:	681b      	ldr	r3, [r3, #0]
 81140fc:	68db      	ldr	r3, [r3, #12]
 81140fe:	681b      	ldr	r3, [r3, #0]
 8114100:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8114102:	4b2c      	ldr	r3, [pc, #176]	@ (81141b4 <prvSwitchTimerLists+0xc4>)
 8114104:	681b      	ldr	r3, [r3, #0]
 8114106:	68db      	ldr	r3, [r3, #12]
 8114108:	68db      	ldr	r3, [r3, #12]
 811410a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 811410c:	68fb      	ldr	r3, [r7, #12]
 811410e:	3304      	adds	r3, #4
 8114110:	4618      	mov	r0, r3
 8114112:	f7fc fbbb 	bl	811088c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8114116:	68fb      	ldr	r3, [r7, #12]
 8114118:	6a1b      	ldr	r3, [r3, #32]
 811411a:	68f8      	ldr	r0, [r7, #12]
 811411c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 811411e:	68fb      	ldr	r3, [r7, #12]
 8114120:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8114124:	f003 0304 	and.w	r3, r3, #4
 8114128:	2b00      	cmp	r3, #0
 811412a:	d02f      	beq.n	811418c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 811412c:	68fb      	ldr	r3, [r7, #12]
 811412e:	699b      	ldr	r3, [r3, #24]
 8114130:	693a      	ldr	r2, [r7, #16]
 8114132:	4413      	add	r3, r2
 8114134:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8114136:	68ba      	ldr	r2, [r7, #8]
 8114138:	693b      	ldr	r3, [r7, #16]
 811413a:	429a      	cmp	r2, r3
 811413c:	d90e      	bls.n	811415c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 811413e:	68fb      	ldr	r3, [r7, #12]
 8114140:	68ba      	ldr	r2, [r7, #8]
 8114142:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8114144:	68fb      	ldr	r3, [r7, #12]
 8114146:	68fa      	ldr	r2, [r7, #12]
 8114148:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 811414a:	4b1a      	ldr	r3, [pc, #104]	@ (81141b4 <prvSwitchTimerLists+0xc4>)
 811414c:	681a      	ldr	r2, [r3, #0]
 811414e:	68fb      	ldr	r3, [r7, #12]
 8114150:	3304      	adds	r3, #4
 8114152:	4619      	mov	r1, r3
 8114154:	4610      	mov	r0, r2
 8114156:	f7fc fb60 	bl	811081a <vListInsert>
 811415a:	e017      	b.n	811418c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 811415c:	2300      	movs	r3, #0
 811415e:	9300      	str	r3, [sp, #0]
 8114160:	2300      	movs	r3, #0
 8114162:	693a      	ldr	r2, [r7, #16]
 8114164:	2100      	movs	r1, #0
 8114166:	68f8      	ldr	r0, [r7, #12]
 8114168:	f7ff fd58 	bl	8113c1c <xTimerGenericCommand>
 811416c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 811416e:	687b      	ldr	r3, [r7, #4]
 8114170:	2b00      	cmp	r3, #0
 8114172:	d10b      	bne.n	811418c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8114174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8114178:	f383 8811 	msr	BASEPRI, r3
 811417c:	f3bf 8f6f 	isb	sy
 8114180:	f3bf 8f4f 	dsb	sy
 8114184:	603b      	str	r3, [r7, #0]
}
 8114186:	bf00      	nop
 8114188:	bf00      	nop
 811418a:	e7fd      	b.n	8114188 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 811418c:	4b09      	ldr	r3, [pc, #36]	@ (81141b4 <prvSwitchTimerLists+0xc4>)
 811418e:	681b      	ldr	r3, [r3, #0]
 8114190:	681b      	ldr	r3, [r3, #0]
 8114192:	2b00      	cmp	r3, #0
 8114194:	d1b0      	bne.n	81140f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8114196:	4b07      	ldr	r3, [pc, #28]	@ (81141b4 <prvSwitchTimerLists+0xc4>)
 8114198:	681b      	ldr	r3, [r3, #0]
 811419a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 811419c:	4b06      	ldr	r3, [pc, #24]	@ (81141b8 <prvSwitchTimerLists+0xc8>)
 811419e:	681b      	ldr	r3, [r3, #0]
 81141a0:	4a04      	ldr	r2, [pc, #16]	@ (81141b4 <prvSwitchTimerLists+0xc4>)
 81141a2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 81141a4:	4a04      	ldr	r2, [pc, #16]	@ (81141b8 <prvSwitchTimerLists+0xc8>)
 81141a6:	697b      	ldr	r3, [r7, #20]
 81141a8:	6013      	str	r3, [r2, #0]
}
 81141aa:	bf00      	nop
 81141ac:	3718      	adds	r7, #24
 81141ae:	46bd      	mov	sp, r7
 81141b0:	bd80      	pop	{r7, pc}
 81141b2:	bf00      	nop
 81141b4:	1000b0bc 	.word	0x1000b0bc
 81141b8:	1000b0c0 	.word	0x1000b0c0

081141bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 81141bc:	b580      	push	{r7, lr}
 81141be:	b082      	sub	sp, #8
 81141c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 81141c2:	f7fc fcc1 	bl	8110b48 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 81141c6:	4b15      	ldr	r3, [pc, #84]	@ (811421c <prvCheckForValidListAndQueue+0x60>)
 81141c8:	681b      	ldr	r3, [r3, #0]
 81141ca:	2b00      	cmp	r3, #0
 81141cc:	d120      	bne.n	8114210 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 81141ce:	4814      	ldr	r0, [pc, #80]	@ (8114220 <prvCheckForValidListAndQueue+0x64>)
 81141d0:	f7fc fad2 	bl	8110778 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 81141d4:	4813      	ldr	r0, [pc, #76]	@ (8114224 <prvCheckForValidListAndQueue+0x68>)
 81141d6:	f7fc facf 	bl	8110778 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 81141da:	4b13      	ldr	r3, [pc, #76]	@ (8114228 <prvCheckForValidListAndQueue+0x6c>)
 81141dc:	4a10      	ldr	r2, [pc, #64]	@ (8114220 <prvCheckForValidListAndQueue+0x64>)
 81141de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 81141e0:	4b12      	ldr	r3, [pc, #72]	@ (811422c <prvCheckForValidListAndQueue+0x70>)
 81141e2:	4a10      	ldr	r2, [pc, #64]	@ (8114224 <prvCheckForValidListAndQueue+0x68>)
 81141e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 81141e6:	2300      	movs	r3, #0
 81141e8:	9300      	str	r3, [sp, #0]
 81141ea:	4b11      	ldr	r3, [pc, #68]	@ (8114230 <prvCheckForValidListAndQueue+0x74>)
 81141ec:	4a11      	ldr	r2, [pc, #68]	@ (8114234 <prvCheckForValidListAndQueue+0x78>)
 81141ee:	2110      	movs	r1, #16
 81141f0:	200a      	movs	r0, #10
 81141f2:	f7fc fe35 	bl	8110e60 <xQueueGenericCreateStatic>
 81141f6:	4603      	mov	r3, r0
 81141f8:	4a08      	ldr	r2, [pc, #32]	@ (811421c <prvCheckForValidListAndQueue+0x60>)
 81141fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 81141fc:	4b07      	ldr	r3, [pc, #28]	@ (811421c <prvCheckForValidListAndQueue+0x60>)
 81141fe:	681b      	ldr	r3, [r3, #0]
 8114200:	2b00      	cmp	r3, #0
 8114202:	d005      	beq.n	8114210 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8114204:	4b05      	ldr	r3, [pc, #20]	@ (811421c <prvCheckForValidListAndQueue+0x60>)
 8114206:	681b      	ldr	r3, [r3, #0]
 8114208:	490b      	ldr	r1, [pc, #44]	@ (8114238 <prvCheckForValidListAndQueue+0x7c>)
 811420a:	4618      	mov	r0, r3
 811420c:	f7fd fe1a 	bl	8111e44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8114210:	f7fc fccc 	bl	8110bac <vPortExitCritical>
}
 8114214:	bf00      	nop
 8114216:	46bd      	mov	sp, r7
 8114218:	bd80      	pop	{r7, pc}
 811421a:	bf00      	nop
 811421c:	1000b0c4 	.word	0x1000b0c4
 8114220:	1000b094 	.word	0x1000b094
 8114224:	1000b0a8 	.word	0x1000b0a8
 8114228:	1000b0bc 	.word	0x1000b0bc
 811422c:	1000b0c0 	.word	0x1000b0c0
 8114230:	1000b170 	.word	0x1000b170
 8114234:	1000b0d0 	.word	0x1000b0d0
 8114238:	08123b5c 	.word	0x08123b5c

0811423c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 811423c:	b480      	push	{r7}
 811423e:	b083      	sub	sp, #12
 8114240:	af00      	add	r7, sp, #0
 8114242:	4603      	mov	r3, r0
 8114244:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8114246:	88fb      	ldrh	r3, [r7, #6]
 8114248:	021b      	lsls	r3, r3, #8
 811424a:	b21a      	sxth	r2, r3
 811424c:	88fb      	ldrh	r3, [r7, #6]
 811424e:	0a1b      	lsrs	r3, r3, #8
 8114250:	b29b      	uxth	r3, r3
 8114252:	b21b      	sxth	r3, r3
 8114254:	4313      	orrs	r3, r2
 8114256:	b21b      	sxth	r3, r3
 8114258:	b29b      	uxth	r3, r3
}
 811425a:	4618      	mov	r0, r3
 811425c:	370c      	adds	r7, #12
 811425e:	46bd      	mov	sp, r7
 8114260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8114264:	4770      	bx	lr

08114266 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8114266:	b480      	push	{r7}
 8114268:	b083      	sub	sp, #12
 811426a:	af00      	add	r7, sp, #0
 811426c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 811426e:	687b      	ldr	r3, [r7, #4]
 8114270:	061a      	lsls	r2, r3, #24
 8114272:	687b      	ldr	r3, [r7, #4]
 8114274:	021b      	lsls	r3, r3, #8
 8114276:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 811427a:	431a      	orrs	r2, r3
 811427c:	687b      	ldr	r3, [r7, #4]
 811427e:	0a1b      	lsrs	r3, r3, #8
 8114280:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8114284:	431a      	orrs	r2, r3
 8114286:	687b      	ldr	r3, [r7, #4]
 8114288:	0e1b      	lsrs	r3, r3, #24
 811428a:	4313      	orrs	r3, r2
}
 811428c:	4618      	mov	r0, r3
 811428e:	370c      	adds	r7, #12
 8114290:	46bd      	mov	sp, r7
 8114292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8114296:	4770      	bx	lr

08114298 <free_etharp_q>:
 *
 * @param q a qeueue of etharp_q_entry's to free
 */
static void
free_etharp_q(struct etharp_q_entry *q)
{
 8114298:	b580      	push	{r7, lr}
 811429a:	b084      	sub	sp, #16
 811429c:	af00      	add	r7, sp, #0
 811429e:	6078      	str	r0, [r7, #4]
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
 81142a0:	687b      	ldr	r3, [r7, #4]
 81142a2:	2b00      	cmp	r3, #0
 81142a4:	d11e      	bne.n	81142e4 <free_etharp_q+0x4c>
 81142a6:	4b13      	ldr	r3, [pc, #76]	@ (81142f4 <free_etharp_q+0x5c>)
 81142a8:	2296      	movs	r2, #150	@ 0x96
 81142aa:	4913      	ldr	r1, [pc, #76]	@ (81142f8 <free_etharp_q+0x60>)
 81142ac:	4813      	ldr	r0, [pc, #76]	@ (81142fc <free_etharp_q+0x64>)
 81142ae:	f00d ffd9 	bl	8122264 <iprintf>
  while (q) {
 81142b2:	e017      	b.n	81142e4 <free_etharp_q+0x4c>
    r = q;
 81142b4:	687b      	ldr	r3, [r7, #4]
 81142b6:	60fb      	str	r3, [r7, #12]
    q = q->next;
 81142b8:	687b      	ldr	r3, [r7, #4]
 81142ba:	681b      	ldr	r3, [r3, #0]
 81142bc:	607b      	str	r3, [r7, #4]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 81142be:	68fb      	ldr	r3, [r7, #12]
 81142c0:	685b      	ldr	r3, [r3, #4]
 81142c2:	2b00      	cmp	r3, #0
 81142c4:	d105      	bne.n	81142d2 <free_etharp_q+0x3a>
 81142c6:	4b0b      	ldr	r3, [pc, #44]	@ (81142f4 <free_etharp_q+0x5c>)
 81142c8:	229a      	movs	r2, #154	@ 0x9a
 81142ca:	490d      	ldr	r1, [pc, #52]	@ (8114300 <free_etharp_q+0x68>)
 81142cc:	480b      	ldr	r0, [pc, #44]	@ (81142fc <free_etharp_q+0x64>)
 81142ce:	f00d ffc9 	bl	8122264 <iprintf>
    pbuf_free(r->p);
 81142d2:	68fb      	ldr	r3, [r7, #12]
 81142d4:	685b      	ldr	r3, [r3, #4]
 81142d6:	4618      	mov	r0, r3
 81142d8:	f004 ff50 	bl	811917c <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 81142dc:	68f9      	ldr	r1, [r7, #12]
 81142de:	2009      	movs	r0, #9
 81142e0:	f003 ff8a 	bl	81181f8 <memp_free>
  while (q) {
 81142e4:	687b      	ldr	r3, [r7, #4]
 81142e6:	2b00      	cmp	r3, #0
 81142e8:	d1e4      	bne.n	81142b4 <free_etharp_q+0x1c>
  }
}
 81142ea:	bf00      	nop
 81142ec:	bf00      	nop
 81142ee:	3710      	adds	r7, #16
 81142f0:	46bd      	mov	sp, r7
 81142f2:	bd80      	pop	{r7, pc}
 81142f4:	08123b64 	.word	0x08123b64
 81142f8:	08123bdc 	.word	0x08123bdc
 81142fc:	08123be8 	.word	0x08123be8
 8114300:	08123c10 	.word	0x08123c10

08114304 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8114304:	b580      	push	{r7, lr}
 8114306:	b082      	sub	sp, #8
 8114308:	af00      	add	r7, sp, #0
 811430a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 811430c:	4935      	ldr	r1, [pc, #212]	@ (81143e4 <etharp_free_entry+0xe0>)
 811430e:	687a      	ldr	r2, [r7, #4]
 8114310:	4613      	mov	r3, r2
 8114312:	005b      	lsls	r3, r3, #1
 8114314:	4413      	add	r3, r2
 8114316:	00db      	lsls	r3, r3, #3
 8114318:	440b      	add	r3, r1
 811431a:	681b      	ldr	r3, [r3, #0]
 811431c:	2b00      	cmp	r3, #0
 811431e:	d026      	beq.n	811436e <etharp_free_entry+0x6a>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
 8114320:	687b      	ldr	r3, [r7, #4]
 8114322:	b29b      	uxth	r3, r3
 8114324:	4618      	mov	r0, r3
 8114326:	492f      	ldr	r1, [pc, #188]	@ (81143e4 <etharp_free_entry+0xe0>)
 8114328:	687a      	ldr	r2, [r7, #4]
 811432a:	4613      	mov	r3, r2
 811432c:	005b      	lsls	r3, r3, #1
 811432e:	4413      	add	r3, r2
 8114330:	00db      	lsls	r3, r3, #3
 8114332:	440b      	add	r3, r1
 8114334:	681b      	ldr	r3, [r3, #0]
 8114336:	461a      	mov	r2, r3
 8114338:	4601      	mov	r1, r0
 811433a:	482b      	ldr	r0, [pc, #172]	@ (81143e8 <etharp_free_entry+0xe4>)
 811433c:	f00d ff92 	bl	8122264 <iprintf>
 8114340:	200d      	movs	r0, #13
 8114342:	f00d ffa1 	bl	8122288 <putchar>
    free_etharp_q(arp_table[i].q);
 8114346:	4927      	ldr	r1, [pc, #156]	@ (81143e4 <etharp_free_entry+0xe0>)
 8114348:	687a      	ldr	r2, [r7, #4]
 811434a:	4613      	mov	r3, r2
 811434c:	005b      	lsls	r3, r3, #1
 811434e:	4413      	add	r3, r2
 8114350:	00db      	lsls	r3, r3, #3
 8114352:	440b      	add	r3, r1
 8114354:	681b      	ldr	r3, [r3, #0]
 8114356:	4618      	mov	r0, r3
 8114358:	f7ff ff9e 	bl	8114298 <free_etharp_q>
    arp_table[i].q = NULL;
 811435c:	4921      	ldr	r1, [pc, #132]	@ (81143e4 <etharp_free_entry+0xe0>)
 811435e:	687a      	ldr	r2, [r7, #4]
 8114360:	4613      	mov	r3, r2
 8114362:	005b      	lsls	r3, r3, #1
 8114364:	4413      	add	r3, r2
 8114366:	00db      	lsls	r3, r3, #3
 8114368:	440b      	add	r3, r1
 811436a:	2200      	movs	r2, #0
 811436c:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 811436e:	491d      	ldr	r1, [pc, #116]	@ (81143e4 <etharp_free_entry+0xe0>)
 8114370:	687a      	ldr	r2, [r7, #4]
 8114372:	4613      	mov	r3, r2
 8114374:	005b      	lsls	r3, r3, #1
 8114376:	4413      	add	r3, r2
 8114378:	00db      	lsls	r3, r3, #3
 811437a:	440b      	add	r3, r1
 811437c:	3314      	adds	r3, #20
 811437e:	2200      	movs	r2, #0
 8114380:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 8114382:	4918      	ldr	r1, [pc, #96]	@ (81143e4 <etharp_free_entry+0xe0>)
 8114384:	687a      	ldr	r2, [r7, #4]
 8114386:	4613      	mov	r3, r2
 8114388:	005b      	lsls	r3, r3, #1
 811438a:	4413      	add	r3, r2
 811438c:	00db      	lsls	r3, r3, #3
 811438e:	440b      	add	r3, r1
 8114390:	3312      	adds	r3, #18
 8114392:	2200      	movs	r2, #0
 8114394:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 8114396:	4913      	ldr	r1, [pc, #76]	@ (81143e4 <etharp_free_entry+0xe0>)
 8114398:	687a      	ldr	r2, [r7, #4]
 811439a:	4613      	mov	r3, r2
 811439c:	005b      	lsls	r3, r3, #1
 811439e:	4413      	add	r3, r2
 81143a0:	00db      	lsls	r3, r3, #3
 81143a2:	440b      	add	r3, r1
 81143a4:	3308      	adds	r3, #8
 81143a6:	2200      	movs	r2, #0
 81143a8:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 81143aa:	490e      	ldr	r1, [pc, #56]	@ (81143e4 <etharp_free_entry+0xe0>)
 81143ac:	687a      	ldr	r2, [r7, #4]
 81143ae:	4613      	mov	r3, r2
 81143b0:	005b      	lsls	r3, r3, #1
 81143b2:	4413      	add	r3, r2
 81143b4:	00db      	lsls	r3, r3, #3
 81143b6:	440b      	add	r3, r1
 81143b8:	3304      	adds	r3, #4
 81143ba:	2200      	movs	r2, #0
 81143bc:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 81143be:	4909      	ldr	r1, [pc, #36]	@ (81143e4 <etharp_free_entry+0xe0>)
 81143c0:	687a      	ldr	r2, [r7, #4]
 81143c2:	4613      	mov	r3, r2
 81143c4:	005b      	lsls	r3, r3, #1
 81143c6:	4413      	add	r3, r2
 81143c8:	00db      	lsls	r3, r3, #3
 81143ca:	440b      	add	r3, r1
 81143cc:	3308      	adds	r3, #8
 81143ce:	4a07      	ldr	r2, [pc, #28]	@ (81143ec <etharp_free_entry+0xe8>)
 81143d0:	3304      	adds	r3, #4
 81143d2:	6810      	ldr	r0, [r2, #0]
 81143d4:	6018      	str	r0, [r3, #0]
 81143d6:	8892      	ldrh	r2, [r2, #4]
 81143d8:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 81143da:	bf00      	nop
 81143dc:	3708      	adds	r7, #8
 81143de:	46bd      	mov	sp, r7
 81143e0:	bd80      	pop	{r7, pc}
 81143e2:	bf00      	nop
 81143e4:	1000b1c0 	.word	0x1000b1c0
 81143e8:	08123c20 	.word	0x08123c20
 81143ec:	081289b0 	.word	0x081289b0

081143f0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 81143f0:	b580      	push	{r7, lr}
 81143f2:	b082      	sub	sp, #8
 81143f4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
 81143f6:	4861      	ldr	r0, [pc, #388]	@ (811457c <etharp_tmr+0x18c>)
 81143f8:	f00d ffa4 	bl	8122344 <puts>
 81143fc:	200d      	movs	r0, #13
 81143fe:	f00d ff43 	bl	8122288 <putchar>
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8114402:	2300      	movs	r3, #0
 8114404:	607b      	str	r3, [r7, #4]
 8114406:	e0b0      	b.n	811456a <etharp_tmr+0x17a>
    u8_t state = arp_table[i].state;
 8114408:	495d      	ldr	r1, [pc, #372]	@ (8114580 <etharp_tmr+0x190>)
 811440a:	687a      	ldr	r2, [r7, #4]
 811440c:	4613      	mov	r3, r2
 811440e:	005b      	lsls	r3, r3, #1
 8114410:	4413      	add	r3, r2
 8114412:	00db      	lsls	r3, r3, #3
 8114414:	440b      	add	r3, r1
 8114416:	3314      	adds	r3, #20
 8114418:	781b      	ldrb	r3, [r3, #0]
 811441a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 811441c:	78fb      	ldrb	r3, [r7, #3]
 811441e:	2b00      	cmp	r3, #0
 8114420:	f000 80a0 	beq.w	8114564 <etharp_tmr+0x174>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
 8114424:	78fb      	ldrb	r3, [r7, #3]
 8114426:	2b05      	cmp	r3, #5
 8114428:	f000 809c 	beq.w	8114564 <etharp_tmr+0x174>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 811442c:	4954      	ldr	r1, [pc, #336]	@ (8114580 <etharp_tmr+0x190>)
 811442e:	687a      	ldr	r2, [r7, #4]
 8114430:	4613      	mov	r3, r2
 8114432:	005b      	lsls	r3, r3, #1
 8114434:	4413      	add	r3, r2
 8114436:	00db      	lsls	r3, r3, #3
 8114438:	440b      	add	r3, r1
 811443a:	3312      	adds	r3, #18
 811443c:	881b      	ldrh	r3, [r3, #0]
 811443e:	3301      	adds	r3, #1
 8114440:	b298      	uxth	r0, r3
 8114442:	494f      	ldr	r1, [pc, #316]	@ (8114580 <etharp_tmr+0x190>)
 8114444:	687a      	ldr	r2, [r7, #4]
 8114446:	4613      	mov	r3, r2
 8114448:	005b      	lsls	r3, r3, #1
 811444a:	4413      	add	r3, r2
 811444c:	00db      	lsls	r3, r3, #3
 811444e:	440b      	add	r3, r1
 8114450:	3312      	adds	r3, #18
 8114452:	4602      	mov	r2, r0
 8114454:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8114456:	494a      	ldr	r1, [pc, #296]	@ (8114580 <etharp_tmr+0x190>)
 8114458:	687a      	ldr	r2, [r7, #4]
 811445a:	4613      	mov	r3, r2
 811445c:	005b      	lsls	r3, r3, #1
 811445e:	4413      	add	r3, r2
 8114460:	00db      	lsls	r3, r3, #3
 8114462:	440b      	add	r3, r1
 8114464:	3312      	adds	r3, #18
 8114466:	881b      	ldrh	r3, [r3, #0]
 8114468:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 811446c:	d215      	bcs.n	811449a <etharp_tmr+0xaa>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 811446e:	4944      	ldr	r1, [pc, #272]	@ (8114580 <etharp_tmr+0x190>)
 8114470:	687a      	ldr	r2, [r7, #4]
 8114472:	4613      	mov	r3, r2
 8114474:	005b      	lsls	r3, r3, #1
 8114476:	4413      	add	r3, r2
 8114478:	00db      	lsls	r3, r3, #3
 811447a:	440b      	add	r3, r1
 811447c:	3314      	adds	r3, #20
 811447e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8114480:	2b01      	cmp	r3, #1
 8114482:	d124      	bne.n	81144ce <etharp_tmr+0xde>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8114484:	493e      	ldr	r1, [pc, #248]	@ (8114580 <etharp_tmr+0x190>)
 8114486:	687a      	ldr	r2, [r7, #4]
 8114488:	4613      	mov	r3, r2
 811448a:	005b      	lsls	r3, r3, #1
 811448c:	4413      	add	r3, r2
 811448e:	00db      	lsls	r3, r3, #3
 8114490:	440b      	add	r3, r1
 8114492:	3312      	adds	r3, #18
 8114494:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8114496:	2b04      	cmp	r3, #4
 8114498:	d919      	bls.n	81144ce <etharp_tmr+0xde>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
 811449a:	4939      	ldr	r1, [pc, #228]	@ (8114580 <etharp_tmr+0x190>)
 811449c:	687a      	ldr	r2, [r7, #4]
 811449e:	4613      	mov	r3, r2
 81144a0:	005b      	lsls	r3, r3, #1
 81144a2:	4413      	add	r3, r2
 81144a4:	00db      	lsls	r3, r3, #3
 81144a6:	440b      	add	r3, r1
 81144a8:	3314      	adds	r3, #20
 81144aa:	781b      	ldrb	r3, [r3, #0]
 81144ac:	2b01      	cmp	r3, #1
 81144ae:	d901      	bls.n	81144b4 <etharp_tmr+0xc4>
 81144b0:	4b34      	ldr	r3, [pc, #208]	@ (8114584 <etharp_tmr+0x194>)
 81144b2:	e000      	b.n	81144b6 <etharp_tmr+0xc6>
 81144b4:	4b34      	ldr	r3, [pc, #208]	@ (8114588 <etharp_tmr+0x198>)
 81144b6:	687a      	ldr	r2, [r7, #4]
 81144b8:	4619      	mov	r1, r3
 81144ba:	4834      	ldr	r0, [pc, #208]	@ (811458c <etharp_tmr+0x19c>)
 81144bc:	f00d fed2 	bl	8122264 <iprintf>
 81144c0:	200d      	movs	r0, #13
 81144c2:	f00d fee1 	bl	8122288 <putchar>
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 81144c6:	6878      	ldr	r0, [r7, #4]
 81144c8:	f7ff ff1c 	bl	8114304 <etharp_free_entry>
 81144cc:	e04a      	b.n	8114564 <etharp_tmr+0x174>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 81144ce:	492c      	ldr	r1, [pc, #176]	@ (8114580 <etharp_tmr+0x190>)
 81144d0:	687a      	ldr	r2, [r7, #4]
 81144d2:	4613      	mov	r3, r2
 81144d4:	005b      	lsls	r3, r3, #1
 81144d6:	4413      	add	r3, r2
 81144d8:	00db      	lsls	r3, r3, #3
 81144da:	440b      	add	r3, r1
 81144dc:	3314      	adds	r3, #20
 81144de:	781b      	ldrb	r3, [r3, #0]
 81144e0:	2b03      	cmp	r3, #3
 81144e2:	d10a      	bne.n	81144fa <etharp_tmr+0x10a>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 81144e4:	4926      	ldr	r1, [pc, #152]	@ (8114580 <etharp_tmr+0x190>)
 81144e6:	687a      	ldr	r2, [r7, #4]
 81144e8:	4613      	mov	r3, r2
 81144ea:	005b      	lsls	r3, r3, #1
 81144ec:	4413      	add	r3, r2
 81144ee:	00db      	lsls	r3, r3, #3
 81144f0:	440b      	add	r3, r1
 81144f2:	3314      	adds	r3, #20
 81144f4:	2204      	movs	r2, #4
 81144f6:	701a      	strb	r2, [r3, #0]
 81144f8:	e034      	b.n	8114564 <etharp_tmr+0x174>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 81144fa:	4921      	ldr	r1, [pc, #132]	@ (8114580 <etharp_tmr+0x190>)
 81144fc:	687a      	ldr	r2, [r7, #4]
 81144fe:	4613      	mov	r3, r2
 8114500:	005b      	lsls	r3, r3, #1
 8114502:	4413      	add	r3, r2
 8114504:	00db      	lsls	r3, r3, #3
 8114506:	440b      	add	r3, r1
 8114508:	3314      	adds	r3, #20
 811450a:	781b      	ldrb	r3, [r3, #0]
 811450c:	2b04      	cmp	r3, #4
 811450e:	d10a      	bne.n	8114526 <etharp_tmr+0x136>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8114510:	491b      	ldr	r1, [pc, #108]	@ (8114580 <etharp_tmr+0x190>)
 8114512:	687a      	ldr	r2, [r7, #4]
 8114514:	4613      	mov	r3, r2
 8114516:	005b      	lsls	r3, r3, #1
 8114518:	4413      	add	r3, r2
 811451a:	00db      	lsls	r3, r3, #3
 811451c:	440b      	add	r3, r1
 811451e:	3314      	adds	r3, #20
 8114520:	2202      	movs	r2, #2
 8114522:	701a      	strb	r2, [r3, #0]
 8114524:	e01e      	b.n	8114564 <etharp_tmr+0x174>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8114526:	4916      	ldr	r1, [pc, #88]	@ (8114580 <etharp_tmr+0x190>)
 8114528:	687a      	ldr	r2, [r7, #4]
 811452a:	4613      	mov	r3, r2
 811452c:	005b      	lsls	r3, r3, #1
 811452e:	4413      	add	r3, r2
 8114530:	00db      	lsls	r3, r3, #3
 8114532:	440b      	add	r3, r1
 8114534:	3314      	adds	r3, #20
 8114536:	781b      	ldrb	r3, [r3, #0]
 8114538:	2b01      	cmp	r3, #1
 811453a:	d113      	bne.n	8114564 <etharp_tmr+0x174>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 811453c:	4910      	ldr	r1, [pc, #64]	@ (8114580 <etharp_tmr+0x190>)
 811453e:	687a      	ldr	r2, [r7, #4]
 8114540:	4613      	mov	r3, r2
 8114542:	005b      	lsls	r3, r3, #1
 8114544:	4413      	add	r3, r2
 8114546:	00db      	lsls	r3, r3, #3
 8114548:	440b      	add	r3, r1
 811454a:	3308      	adds	r3, #8
 811454c:	6818      	ldr	r0, [r3, #0]
 811454e:	687a      	ldr	r2, [r7, #4]
 8114550:	4613      	mov	r3, r2
 8114552:	005b      	lsls	r3, r3, #1
 8114554:	4413      	add	r3, r2
 8114556:	00db      	lsls	r3, r3, #3
 8114558:	4a09      	ldr	r2, [pc, #36]	@ (8114580 <etharp_tmr+0x190>)
 811455a:	4413      	add	r3, r2
 811455c:	3304      	adds	r3, #4
 811455e:	4619      	mov	r1, r3
 8114560:	f001 f87a 	bl	8115658 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8114564:	687b      	ldr	r3, [r7, #4]
 8114566:	3301      	adds	r3, #1
 8114568:	607b      	str	r3, [r7, #4]
 811456a:	687b      	ldr	r3, [r7, #4]
 811456c:	2b09      	cmp	r3, #9
 811456e:	f77f af4b 	ble.w	8114408 <etharp_tmr+0x18>
      }
    }
  }
}
 8114572:	bf00      	nop
 8114574:	bf00      	nop
 8114576:	3708      	adds	r7, #8
 8114578:	46bd      	mov	sp, r7
 811457a:	bd80      	pop	{r7, pc}
 811457c:	08123c58 	.word	0x08123c58
 8114580:	1000b1c0 	.word	0x1000b1c0
 8114584:	08123c68 	.word	0x08123c68
 8114588:	08123c70 	.word	0x08123c70
 811458c:	08123c78 	.word	0x08123c78

08114590 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8114590:	b580      	push	{r7, lr}
 8114592:	b08a      	sub	sp, #40	@ 0x28
 8114594:	af00      	add	r7, sp, #0
 8114596:	60f8      	str	r0, [r7, #12]
 8114598:	460b      	mov	r3, r1
 811459a:	607a      	str	r2, [r7, #4]
 811459c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 811459e:	230a      	movs	r3, #10
 81145a0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 81145a2:	230a      	movs	r3, #10
 81145a4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 81145a6:	230a      	movs	r3, #10
 81145a8:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 81145aa:	2300      	movs	r3, #0
 81145ac:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 81145ae:	230a      	movs	r3, #10
 81145b0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 81145b2:	2300      	movs	r3, #0
 81145b4:	83bb      	strh	r3, [r7, #28]
 81145b6:	2300      	movs	r3, #0
 81145b8:	837b      	strh	r3, [r7, #26]
 81145ba:	2300      	movs	r3, #0
 81145bc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 81145be:	2300      	movs	r3, #0
 81145c0:	843b      	strh	r3, [r7, #32]
 81145c2:	e0c3      	b.n	811474c <etharp_find_entry+0x1bc>
    u8_t state = arp_table[i].state;
 81145c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 81145c8:	49a0      	ldr	r1, [pc, #640]	@ (811484c <etharp_find_entry+0x2bc>)
 81145ca:	4613      	mov	r3, r2
 81145cc:	005b      	lsls	r3, r3, #1
 81145ce:	4413      	add	r3, r2
 81145d0:	00db      	lsls	r3, r3, #3
 81145d2:	440b      	add	r3, r1
 81145d4:	3314      	adds	r3, #20
 81145d6:	781b      	ldrb	r3, [r3, #0]
 81145d8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 81145da:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 81145de:	2b0a      	cmp	r3, #10
 81145e0:	d10e      	bne.n	8114600 <etharp_find_entry+0x70>
 81145e2:	7dfb      	ldrb	r3, [r7, #23]
 81145e4:	2b00      	cmp	r3, #0
 81145e6:	d10b      	bne.n	8114600 <etharp_find_entry+0x70>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
 81145e8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 81145ec:	4619      	mov	r1, r3
 81145ee:	4898      	ldr	r0, [pc, #608]	@ (8114850 <etharp_find_entry+0x2c0>)
 81145f0:	f00d fe38 	bl	8122264 <iprintf>
 81145f4:	200d      	movs	r0, #13
 81145f6:	f00d fe47 	bl	8122288 <putchar>
      /* remember first empty entry */
      empty = i;
 81145fa:	8c3b      	ldrh	r3, [r7, #32]
 81145fc:	847b      	strh	r3, [r7, #34]	@ 0x22
 81145fe:	e0a1      	b.n	8114744 <etharp_find_entry+0x1b4>
    } else if (state != ETHARP_STATE_EMPTY) {
 8114600:	7dfb      	ldrb	r3, [r7, #23]
 8114602:	2b00      	cmp	r3, #0
 8114604:	f000 809e 	beq.w	8114744 <etharp_find_entry+0x1b4>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8114608:	7dfb      	ldrb	r3, [r7, #23]
 811460a:	2b01      	cmp	r3, #1
 811460c:	d009      	beq.n	8114622 <etharp_find_entry+0x92>
 811460e:	7dfb      	ldrb	r3, [r7, #23]
 8114610:	2b01      	cmp	r3, #1
 8114612:	d806      	bhi.n	8114622 <etharp_find_entry+0x92>
 8114614:	4b8f      	ldr	r3, [pc, #572]	@ (8114854 <etharp_find_entry+0x2c4>)
 8114616:	f240 1223 	movw	r2, #291	@ 0x123
 811461a:	498f      	ldr	r1, [pc, #572]	@ (8114858 <etharp_find_entry+0x2c8>)
 811461c:	488f      	ldr	r0, [pc, #572]	@ (811485c <etharp_find_entry+0x2cc>)
 811461e:	f00d fe21 	bl	8122264 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8114622:	68fb      	ldr	r3, [r7, #12]
 8114624:	2b00      	cmp	r3, #0
 8114626:	d029      	beq.n	811467c <etharp_find_entry+0xec>
 8114628:	68fb      	ldr	r3, [r7, #12]
 811462a:	6819      	ldr	r1, [r3, #0]
 811462c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8114630:	4886      	ldr	r0, [pc, #536]	@ (811484c <etharp_find_entry+0x2bc>)
 8114632:	4613      	mov	r3, r2
 8114634:	005b      	lsls	r3, r3, #1
 8114636:	4413      	add	r3, r2
 8114638:	00db      	lsls	r3, r3, #3
 811463a:	4403      	add	r3, r0
 811463c:	3304      	adds	r3, #4
 811463e:	681b      	ldr	r3, [r3, #0]
 8114640:	4299      	cmp	r1, r3
 8114642:	d11b      	bne.n	811467c <etharp_find_entry+0xec>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8114644:	687b      	ldr	r3, [r7, #4]
 8114646:	2b00      	cmp	r3, #0
 8114648:	d00c      	beq.n	8114664 <etharp_find_entry+0xd4>
 811464a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 811464e:	497f      	ldr	r1, [pc, #508]	@ (811484c <etharp_find_entry+0x2bc>)
 8114650:	4613      	mov	r3, r2
 8114652:	005b      	lsls	r3, r3, #1
 8114654:	4413      	add	r3, r2
 8114656:	00db      	lsls	r3, r3, #3
 8114658:	440b      	add	r3, r1
 811465a:	3308      	adds	r3, #8
 811465c:	681b      	ldr	r3, [r3, #0]
 811465e:	687a      	ldr	r2, [r7, #4]
 8114660:	429a      	cmp	r2, r3
 8114662:	d10b      	bne.n	811467c <etharp_find_entry+0xec>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
 8114664:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8114668:	4619      	mov	r1, r3
 811466a:	487d      	ldr	r0, [pc, #500]	@ (8114860 <etharp_find_entry+0x2d0>)
 811466c:	f00d fdfa 	bl	8122264 <iprintf>
 8114670:	200d      	movs	r0, #13
 8114672:	f00d fe09 	bl	8122288 <putchar>
        /* found exact IP address match, simply bail out */
        return i;
 8114676:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 811467a:	e156      	b.n	811492a <etharp_find_entry+0x39a>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 811467c:	7dfb      	ldrb	r3, [r7, #23]
 811467e:	2b01      	cmp	r3, #1
 8114680:	d140      	bne.n	8114704 <etharp_find_entry+0x174>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8114682:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8114686:	4971      	ldr	r1, [pc, #452]	@ (811484c <etharp_find_entry+0x2bc>)
 8114688:	4613      	mov	r3, r2
 811468a:	005b      	lsls	r3, r3, #1
 811468c:	4413      	add	r3, r2
 811468e:	00db      	lsls	r3, r3, #3
 8114690:	440b      	add	r3, r1
 8114692:	681b      	ldr	r3, [r3, #0]
 8114694:	2b00      	cmp	r3, #0
 8114696:	d01a      	beq.n	81146ce <etharp_find_entry+0x13e>
          if (arp_table[i].ctime >= age_queue) {
 8114698:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 811469c:	496b      	ldr	r1, [pc, #428]	@ (811484c <etharp_find_entry+0x2bc>)
 811469e:	4613      	mov	r3, r2
 81146a0:	005b      	lsls	r3, r3, #1
 81146a2:	4413      	add	r3, r2
 81146a4:	00db      	lsls	r3, r3, #3
 81146a6:	440b      	add	r3, r1
 81146a8:	3312      	adds	r3, #18
 81146aa:	881b      	ldrh	r3, [r3, #0]
 81146ac:	8bba      	ldrh	r2, [r7, #28]
 81146ae:	429a      	cmp	r2, r3
 81146b0:	d848      	bhi.n	8114744 <etharp_find_entry+0x1b4>
            old_queue = i;
 81146b2:	8c3b      	ldrh	r3, [r7, #32]
 81146b4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 81146b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 81146ba:	4964      	ldr	r1, [pc, #400]	@ (811484c <etharp_find_entry+0x2bc>)
 81146bc:	4613      	mov	r3, r2
 81146be:	005b      	lsls	r3, r3, #1
 81146c0:	4413      	add	r3, r2
 81146c2:	00db      	lsls	r3, r3, #3
 81146c4:	440b      	add	r3, r1
 81146c6:	3312      	adds	r3, #18
 81146c8:	881b      	ldrh	r3, [r3, #0]
 81146ca:	83bb      	strh	r3, [r7, #28]
 81146cc:	e03a      	b.n	8114744 <etharp_find_entry+0x1b4>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 81146ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 81146d2:	495e      	ldr	r1, [pc, #376]	@ (811484c <etharp_find_entry+0x2bc>)
 81146d4:	4613      	mov	r3, r2
 81146d6:	005b      	lsls	r3, r3, #1
 81146d8:	4413      	add	r3, r2
 81146da:	00db      	lsls	r3, r3, #3
 81146dc:	440b      	add	r3, r1
 81146de:	3312      	adds	r3, #18
 81146e0:	881b      	ldrh	r3, [r3, #0]
 81146e2:	8b7a      	ldrh	r2, [r7, #26]
 81146e4:	429a      	cmp	r2, r3
 81146e6:	d82d      	bhi.n	8114744 <etharp_find_entry+0x1b4>
            old_pending = i;
 81146e8:	8c3b      	ldrh	r3, [r7, #32]
 81146ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 81146ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 81146f0:	4956      	ldr	r1, [pc, #344]	@ (811484c <etharp_find_entry+0x2bc>)
 81146f2:	4613      	mov	r3, r2
 81146f4:	005b      	lsls	r3, r3, #1
 81146f6:	4413      	add	r3, r2
 81146f8:	00db      	lsls	r3, r3, #3
 81146fa:	440b      	add	r3, r1
 81146fc:	3312      	adds	r3, #18
 81146fe:	881b      	ldrh	r3, [r3, #0]
 8114700:	837b      	strh	r3, [r7, #26]
 8114702:	e01f      	b.n	8114744 <etharp_find_entry+0x1b4>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8114704:	7dfb      	ldrb	r3, [r7, #23]
 8114706:	2b01      	cmp	r3, #1
 8114708:	d91c      	bls.n	8114744 <etharp_find_entry+0x1b4>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
 811470a:	7dfb      	ldrb	r3, [r7, #23]
 811470c:	2b04      	cmp	r3, #4
 811470e:	d819      	bhi.n	8114744 <etharp_find_entry+0x1b4>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8114710:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8114714:	494d      	ldr	r1, [pc, #308]	@ (811484c <etharp_find_entry+0x2bc>)
 8114716:	4613      	mov	r3, r2
 8114718:	005b      	lsls	r3, r3, #1
 811471a:	4413      	add	r3, r2
 811471c:	00db      	lsls	r3, r3, #3
 811471e:	440b      	add	r3, r1
 8114720:	3312      	adds	r3, #18
 8114722:	881b      	ldrh	r3, [r3, #0]
 8114724:	8b3a      	ldrh	r2, [r7, #24]
 8114726:	429a      	cmp	r2, r3
 8114728:	d80c      	bhi.n	8114744 <etharp_find_entry+0x1b4>
            old_stable = i;
 811472a:	8c3b      	ldrh	r3, [r7, #32]
 811472c:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 811472e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8114732:	4946      	ldr	r1, [pc, #280]	@ (811484c <etharp_find_entry+0x2bc>)
 8114734:	4613      	mov	r3, r2
 8114736:	005b      	lsls	r3, r3, #1
 8114738:	4413      	add	r3, r2
 811473a:	00db      	lsls	r3, r3, #3
 811473c:	440b      	add	r3, r1
 811473e:	3312      	adds	r3, #18
 8114740:	881b      	ldrh	r3, [r3, #0]
 8114742:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8114744:	8c3b      	ldrh	r3, [r7, #32]
 8114746:	3301      	adds	r3, #1
 8114748:	b29b      	uxth	r3, r3
 811474a:	843b      	strh	r3, [r7, #32]
 811474c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8114750:	2b09      	cmp	r3, #9
 8114752:	f77f af37 	ble.w	81145c4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8114756:	7afb      	ldrb	r3, [r7, #11]
 8114758:	f003 0302 	and.w	r3, r3, #2
 811475c:	2b00      	cmp	r3, #0
 811475e:	d108      	bne.n	8114772 <etharp_find_entry+0x1e2>
 8114760:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8114764:	2b0a      	cmp	r3, #10
 8114766:	d10d      	bne.n	8114784 <etharp_find_entry+0x1f4>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8114768:	7afb      	ldrb	r3, [r7, #11]
 811476a:	f003 0301 	and.w	r3, r3, #1
 811476e:	2b00      	cmp	r3, #0
 8114770:	d108      	bne.n	8114784 <etharp_find_entry+0x1f4>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
 8114772:	483c      	ldr	r0, [pc, #240]	@ (8114864 <etharp_find_entry+0x2d4>)
 8114774:	f00d fde6 	bl	8122344 <puts>
 8114778:	200d      	movs	r0, #13
 811477a:	f00d fd85 	bl	8122288 <putchar>
    return (s16_t)ERR_MEM;
 811477e:	f04f 33ff 	mov.w	r3, #4294967295
 8114782:	e0d2      	b.n	811492a <etharp_find_entry+0x39a>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8114784:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8114788:	2b09      	cmp	r3, #9
 811478a:	dc0b      	bgt.n	81147a4 <etharp_find_entry+0x214>
    i = empty;
 811478c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 811478e:	843b      	strh	r3, [r7, #32]
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
 8114790:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8114794:	4619      	mov	r1, r3
 8114796:	4834      	ldr	r0, [pc, #208]	@ (8114868 <etharp_find_entry+0x2d8>)
 8114798:	f00d fd64 	bl	8122264 <iprintf>
 811479c:	200d      	movs	r0, #13
 811479e:	f00d fd73 	bl	8122288 <putchar>
 81147a2:	e07d      	b.n	81148a0 <etharp_find_entry+0x310>
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 81147a4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 81147a8:	2b09      	cmp	r3, #9
 81147aa:	dc1d      	bgt.n	81147e8 <etharp_find_entry+0x258>
      /* recycle oldest stable*/
      i = old_stable;
 81147ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 81147ae:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
 81147b0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 81147b4:	4619      	mov	r1, r3
 81147b6:	482d      	ldr	r0, [pc, #180]	@ (811486c <etharp_find_entry+0x2dc>)
 81147b8:	f00d fd54 	bl	8122264 <iprintf>
 81147bc:	200d      	movs	r0, #13
 81147be:	f00d fd63 	bl	8122288 <putchar>
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 81147c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 81147c6:	4921      	ldr	r1, [pc, #132]	@ (811484c <etharp_find_entry+0x2bc>)
 81147c8:	4613      	mov	r3, r2
 81147ca:	005b      	lsls	r3, r3, #1
 81147cc:	4413      	add	r3, r2
 81147ce:	00db      	lsls	r3, r3, #3
 81147d0:	440b      	add	r3, r1
 81147d2:	681b      	ldr	r3, [r3, #0]
 81147d4:	2b00      	cmp	r3, #0
 81147d6:	d053      	beq.n	8114880 <etharp_find_entry+0x2f0>
 81147d8:	4b1e      	ldr	r3, [pc, #120]	@ (8114854 <etharp_find_entry+0x2c4>)
 81147da:	f240 126d 	movw	r2, #365	@ 0x16d
 81147de:	4924      	ldr	r1, [pc, #144]	@ (8114870 <etharp_find_entry+0x2e0>)
 81147e0:	481e      	ldr	r0, [pc, #120]	@ (811485c <etharp_find_entry+0x2cc>)
 81147e2:	f00d fd3f 	bl	8122264 <iprintf>
 81147e6:	e04b      	b.n	8114880 <etharp_find_entry+0x2f0>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 81147e8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 81147ec:	2b09      	cmp	r3, #9
 81147ee:	dc0b      	bgt.n	8114808 <etharp_find_entry+0x278>
      /* recycle oldest pending */
      i = old_pending;
 81147f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 81147f2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
 81147f4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 81147f8:	4619      	mov	r1, r3
 81147fa:	481e      	ldr	r0, [pc, #120]	@ (8114874 <etharp_find_entry+0x2e4>)
 81147fc:	f00d fd32 	bl	8122264 <iprintf>
 8114800:	200d      	movs	r0, #13
 8114802:	f00d fd41 	bl	8122288 <putchar>
 8114806:	e03b      	b.n	8114880 <etharp_find_entry+0x2f0>
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8114808:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 811480c:	2b09      	cmp	r3, #9
 811480e:	dc14      	bgt.n	811483a <etharp_find_entry+0x2aa>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8114810:	8bfb      	ldrh	r3, [r7, #30]
 8114812:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
 8114814:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
 8114818:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 811481c:	480b      	ldr	r0, [pc, #44]	@ (811484c <etharp_find_entry+0x2bc>)
 811481e:	4613      	mov	r3, r2
 8114820:	005b      	lsls	r3, r3, #1
 8114822:	4413      	add	r3, r2
 8114824:	00db      	lsls	r3, r3, #3
 8114826:	4403      	add	r3, r0
 8114828:	681b      	ldr	r3, [r3, #0]
 811482a:	461a      	mov	r2, r3
 811482c:	4812      	ldr	r0, [pc, #72]	@ (8114878 <etharp_find_entry+0x2e8>)
 811482e:	f00d fd19 	bl	8122264 <iprintf>
 8114832:	200d      	movs	r0, #13
 8114834:	f00d fd28 	bl	8122288 <putchar>
 8114838:	e022      	b.n	8114880 <etharp_find_entry+0x2f0>
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
 811483a:	4810      	ldr	r0, [pc, #64]	@ (811487c <etharp_find_entry+0x2ec>)
 811483c:	f00d fd82 	bl	8122344 <puts>
 8114840:	200d      	movs	r0, #13
 8114842:	f00d fd21 	bl	8122288 <putchar>
      return (s16_t)ERR_MEM;
 8114846:	f04f 33ff 	mov.w	r3, #4294967295
 811484a:	e06e      	b.n	811492a <etharp_find_entry+0x39a>
 811484c:	1000b1c0 	.word	0x1000b1c0
 8114850:	08123c9c 	.word	0x08123c9c
 8114854:	08123b64 	.word	0x08123b64
 8114858:	08123cc8 	.word	0x08123cc8
 811485c:	08123be8 	.word	0x08123be8
 8114860:	08123d08 	.word	0x08123d08
 8114864:	08123d34 	.word	0x08123d34
 8114868:	08123d78 	.word	0x08123d78
 811486c:	08123da8 	.word	0x08123da8
 8114870:	08123de0 	.word	0x08123de0
 8114874:	08123df8 	.word	0x08123df8
 8114878:	08123e40 	.word	0x08123e40
 811487c:	08123e90 	.word	0x08123e90
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8114880:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8114884:	2b09      	cmp	r3, #9
 8114886:	dd06      	ble.n	8114896 <etharp_find_entry+0x306>
 8114888:	4b2a      	ldr	r3, [pc, #168]	@ (8114934 <etharp_find_entry+0x3a4>)
 811488a:	f240 127f 	movw	r2, #383	@ 0x17f
 811488e:	492a      	ldr	r1, [pc, #168]	@ (8114938 <etharp_find_entry+0x3a8>)
 8114890:	482a      	ldr	r0, [pc, #168]	@ (811493c <etharp_find_entry+0x3ac>)
 8114892:	f00d fce7 	bl	8122264 <iprintf>
    etharp_free_entry(i);
 8114896:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 811489a:	4618      	mov	r0, r3
 811489c:	f7ff fd32 	bl	8114304 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 81148a0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 81148a4:	2b09      	cmp	r3, #9
 81148a6:	dd06      	ble.n	81148b6 <etharp_find_entry+0x326>
 81148a8:	4b22      	ldr	r3, [pc, #136]	@ (8114934 <etharp_find_entry+0x3a4>)
 81148aa:	f240 1283 	movw	r2, #387	@ 0x183
 81148ae:	4922      	ldr	r1, [pc, #136]	@ (8114938 <etharp_find_entry+0x3a8>)
 81148b0:	4822      	ldr	r0, [pc, #136]	@ (811493c <etharp_find_entry+0x3ac>)
 81148b2:	f00d fcd7 	bl	8122264 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 81148b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 81148ba:	4921      	ldr	r1, [pc, #132]	@ (8114940 <etharp_find_entry+0x3b0>)
 81148bc:	4613      	mov	r3, r2
 81148be:	005b      	lsls	r3, r3, #1
 81148c0:	4413      	add	r3, r2
 81148c2:	00db      	lsls	r3, r3, #3
 81148c4:	440b      	add	r3, r1
 81148c6:	3314      	adds	r3, #20
 81148c8:	781b      	ldrb	r3, [r3, #0]
 81148ca:	2b00      	cmp	r3, #0
 81148cc:	d006      	beq.n	81148dc <etharp_find_entry+0x34c>
 81148ce:	4b19      	ldr	r3, [pc, #100]	@ (8114934 <etharp_find_entry+0x3a4>)
 81148d0:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 81148d4:	491b      	ldr	r1, [pc, #108]	@ (8114944 <etharp_find_entry+0x3b4>)
 81148d6:	4819      	ldr	r0, [pc, #100]	@ (811493c <etharp_find_entry+0x3ac>)
 81148d8:	f00d fcc4 	bl	8122264 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 81148dc:	68fb      	ldr	r3, [r7, #12]
 81148de:	2b00      	cmp	r3, #0
 81148e0:	d00b      	beq.n	81148fa <etharp_find_entry+0x36a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 81148e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 81148e6:	68fb      	ldr	r3, [r7, #12]
 81148e8:	6819      	ldr	r1, [r3, #0]
 81148ea:	4815      	ldr	r0, [pc, #84]	@ (8114940 <etharp_find_entry+0x3b0>)
 81148ec:	4613      	mov	r3, r2
 81148ee:	005b      	lsls	r3, r3, #1
 81148f0:	4413      	add	r3, r2
 81148f2:	00db      	lsls	r3, r3, #3
 81148f4:	4403      	add	r3, r0
 81148f6:	3304      	adds	r3, #4
 81148f8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 81148fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 81148fe:	4910      	ldr	r1, [pc, #64]	@ (8114940 <etharp_find_entry+0x3b0>)
 8114900:	4613      	mov	r3, r2
 8114902:	005b      	lsls	r3, r3, #1
 8114904:	4413      	add	r3, r2
 8114906:	00db      	lsls	r3, r3, #3
 8114908:	440b      	add	r3, r1
 811490a:	3312      	adds	r3, #18
 811490c:	2200      	movs	r2, #0
 811490e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8114910:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8114914:	490a      	ldr	r1, [pc, #40]	@ (8114940 <etharp_find_entry+0x3b0>)
 8114916:	4613      	mov	r3, r2
 8114918:	005b      	lsls	r3, r3, #1
 811491a:	4413      	add	r3, r2
 811491c:	00db      	lsls	r3, r3, #3
 811491e:	440b      	add	r3, r1
 8114920:	3308      	adds	r3, #8
 8114922:	687a      	ldr	r2, [r7, #4]
 8114924:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8114926:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 811492a:	4618      	mov	r0, r3
 811492c:	3728      	adds	r7, #40	@ 0x28
 811492e:	46bd      	mov	sp, r7
 8114930:	bd80      	pop	{r7, pc}
 8114932:	bf00      	nop
 8114934:	08123b64 	.word	0x08123b64
 8114938:	08123ec8 	.word	0x08123ec8
 811493c:	08123be8 	.word	0x08123be8
 8114940:	1000b1c0 	.word	0x1000b1c0
 8114944:	08123edc 	.word	0x08123edc

08114948 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8114948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 811494c:	b090      	sub	sp, #64	@ 0x40
 811494e:	af08      	add	r7, sp, #32
 8114950:	60f8      	str	r0, [r7, #12]
 8114952:	60b9      	str	r1, [r7, #8]
 8114954:	607a      	str	r2, [r7, #4]
 8114956:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8114958:	68fb      	ldr	r3, [r7, #12]
 811495a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 811495e:	2b06      	cmp	r3, #6
 8114960:	d006      	beq.n	8114970 <etharp_update_arp_entry+0x28>
 8114962:	4b7d      	ldr	r3, [pc, #500]	@ (8114b58 <etharp_update_arp_entry+0x210>)
 8114964:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8114968:	497c      	ldr	r1, [pc, #496]	@ (8114b5c <etharp_update_arp_entry+0x214>)
 811496a:	487d      	ldr	r0, [pc, #500]	@ (8114b60 <etharp_update_arp_entry+0x218>)
 811496c:	f00d fc7a 	bl	8122264 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
 8114970:	68bb      	ldr	r3, [r7, #8]
 8114972:	781b      	ldrb	r3, [r3, #0]
 8114974:	469c      	mov	ip, r3
 8114976:	68bb      	ldr	r3, [r7, #8]
 8114978:	3301      	adds	r3, #1
 811497a:	781b      	ldrb	r3, [r3, #0]
 811497c:	469e      	mov	lr, r3
 811497e:	68bb      	ldr	r3, [r7, #8]
 8114980:	3302      	adds	r3, #2
 8114982:	781b      	ldrb	r3, [r3, #0]
 8114984:	4698      	mov	r8, r3
 8114986:	68bb      	ldr	r3, [r7, #8]
 8114988:	3303      	adds	r3, #3
 811498a:	781b      	ldrb	r3, [r3, #0]
 811498c:	461a      	mov	r2, r3
 811498e:	687b      	ldr	r3, [r7, #4]
 8114990:	781b      	ldrb	r3, [r3, #0]
 8114992:	4619      	mov	r1, r3
 8114994:	687b      	ldr	r3, [r7, #4]
 8114996:	785b      	ldrb	r3, [r3, #1]
 8114998:	4618      	mov	r0, r3
 811499a:	687b      	ldr	r3, [r7, #4]
 811499c:	789b      	ldrb	r3, [r3, #2]
 811499e:	461c      	mov	r4, r3
 81149a0:	687b      	ldr	r3, [r7, #4]
 81149a2:	78db      	ldrb	r3, [r3, #3]
 81149a4:	461d      	mov	r5, r3
 81149a6:	687b      	ldr	r3, [r7, #4]
 81149a8:	791b      	ldrb	r3, [r3, #4]
 81149aa:	461e      	mov	r6, r3
 81149ac:	687b      	ldr	r3, [r7, #4]
 81149ae:	795b      	ldrb	r3, [r3, #5]
 81149b0:	9306      	str	r3, [sp, #24]
 81149b2:	9605      	str	r6, [sp, #20]
 81149b4:	9504      	str	r5, [sp, #16]
 81149b6:	9403      	str	r4, [sp, #12]
 81149b8:	9002      	str	r0, [sp, #8]
 81149ba:	9101      	str	r1, [sp, #4]
 81149bc:	9200      	str	r2, [sp, #0]
 81149be:	4643      	mov	r3, r8
 81149c0:	4672      	mov	r2, lr
 81149c2:	4661      	mov	r1, ip
 81149c4:	4867      	ldr	r0, [pc, #412]	@ (8114b64 <etharp_update_arp_entry+0x21c>)
 81149c6:	f00d fc4d 	bl	8122264 <iprintf>
 81149ca:	200d      	movs	r0, #13
 81149cc:	f00d fc5c 	bl	8122288 <putchar>
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 81149d0:	68bb      	ldr	r3, [r7, #8]
 81149d2:	2b00      	cmp	r3, #0
 81149d4:	d012      	beq.n	81149fc <etharp_update_arp_entry+0xb4>
 81149d6:	68bb      	ldr	r3, [r7, #8]
 81149d8:	681b      	ldr	r3, [r3, #0]
 81149da:	2b00      	cmp	r3, #0
 81149dc:	d00e      	beq.n	81149fc <etharp_update_arp_entry+0xb4>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 81149de:	68bb      	ldr	r3, [r7, #8]
 81149e0:	681b      	ldr	r3, [r3, #0]
 81149e2:	68f9      	ldr	r1, [r7, #12]
 81149e4:	4618      	mov	r0, r3
 81149e6:	f001 fed9 	bl	811679c <ip4_addr_isbroadcast_u32>
 81149ea:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 81149ec:	2b00      	cmp	r3, #0
 81149ee:	d105      	bne.n	81149fc <etharp_update_arp_entry+0xb4>
      ip4_addr_ismulticast(ipaddr)) {
 81149f0:	68bb      	ldr	r3, [r7, #8]
 81149f2:	681b      	ldr	r3, [r3, #0]
 81149f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 81149f8:	2be0      	cmp	r3, #224	@ 0xe0
 81149fa:	d108      	bne.n	8114a0e <etharp_update_arp_entry+0xc6>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
 81149fc:	485a      	ldr	r0, [pc, #360]	@ (8114b68 <etharp_update_arp_entry+0x220>)
 81149fe:	f00d fca1 	bl	8122344 <puts>
 8114a02:	200d      	movs	r0, #13
 8114a04:	f00d fc40 	bl	8122288 <putchar>
    return ERR_ARG;
 8114a08:	f06f 030f 	mvn.w	r3, #15
 8114a0c:	e09e      	b.n	8114b4c <etharp_update_arp_entry+0x204>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8114a0e:	78fb      	ldrb	r3, [r7, #3]
 8114a10:	68fa      	ldr	r2, [r7, #12]
 8114a12:	4619      	mov	r1, r3
 8114a14:	68b8      	ldr	r0, [r7, #8]
 8114a16:	f7ff fdbb 	bl	8114590 <etharp_find_entry>
 8114a1a:	4603      	mov	r3, r0
 8114a1c:	83fb      	strh	r3, [r7, #30]
  /* bail out if no entry could be found */
  if (i < 0) {
 8114a1e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8114a22:	2b00      	cmp	r3, #0
 8114a24:	da02      	bge.n	8114a2c <etharp_update_arp_entry+0xe4>
    return (err_t)i;
 8114a26:	8bfb      	ldrh	r3, [r7, #30]
 8114a28:	b25b      	sxtb	r3, r3
 8114a2a:	e08f      	b.n	8114b4c <etharp_update_arp_entry+0x204>
  }

#if ETHARP_SUPPORT_STATIC_ENTRIES
  if (flags & ETHARP_FLAG_STATIC_ENTRY) {
 8114a2c:	78fb      	ldrb	r3, [r7, #3]
 8114a2e:	f003 0304 	and.w	r3, r3, #4
 8114a32:	2b00      	cmp	r3, #0
 8114a34:	d00b      	beq.n	8114a4e <etharp_update_arp_entry+0x106>
    /* record static type */
    arp_table[i].state = ETHARP_STATE_STATIC;
 8114a36:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8114a3a:	494c      	ldr	r1, [pc, #304]	@ (8114b6c <etharp_update_arp_entry+0x224>)
 8114a3c:	4613      	mov	r3, r2
 8114a3e:	005b      	lsls	r3, r3, #1
 8114a40:	4413      	add	r3, r2
 8114a42:	00db      	lsls	r3, r3, #3
 8114a44:	440b      	add	r3, r1
 8114a46:	3314      	adds	r3, #20
 8114a48:	2205      	movs	r2, #5
 8114a4a:	701a      	strb	r2, [r3, #0]
 8114a4c:	e019      	b.n	8114a82 <etharp_update_arp_entry+0x13a>
  } else if (arp_table[i].state == ETHARP_STATE_STATIC) {
 8114a4e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8114a52:	4946      	ldr	r1, [pc, #280]	@ (8114b6c <etharp_update_arp_entry+0x224>)
 8114a54:	4613      	mov	r3, r2
 8114a56:	005b      	lsls	r3, r3, #1
 8114a58:	4413      	add	r3, r2
 8114a5a:	00db      	lsls	r3, r3, #3
 8114a5c:	440b      	add	r3, r1
 8114a5e:	3314      	adds	r3, #20
 8114a60:	781b      	ldrb	r3, [r3, #0]
 8114a62:	2b05      	cmp	r3, #5
 8114a64:	d102      	bne.n	8114a6c <etharp_update_arp_entry+0x124>
    /* found entry is a static type, don't overwrite it */
    return ERR_VAL;
 8114a66:	f06f 0305 	mvn.w	r3, #5
 8114a6a:	e06f      	b.n	8114b4c <etharp_update_arp_entry+0x204>
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8114a6c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8114a70:	493e      	ldr	r1, [pc, #248]	@ (8114b6c <etharp_update_arp_entry+0x224>)
 8114a72:	4613      	mov	r3, r2
 8114a74:	005b      	lsls	r3, r3, #1
 8114a76:	4413      	add	r3, r2
 8114a78:	00db      	lsls	r3, r3, #3
 8114a7a:	440b      	add	r3, r1
 8114a7c:	3314      	adds	r3, #20
 8114a7e:	2202      	movs	r2, #2
 8114a80:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8114a82:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8114a86:	4939      	ldr	r1, [pc, #228]	@ (8114b6c <etharp_update_arp_entry+0x224>)
 8114a88:	4613      	mov	r3, r2
 8114a8a:	005b      	lsls	r3, r3, #1
 8114a8c:	4413      	add	r3, r2
 8114a8e:	00db      	lsls	r3, r3, #3
 8114a90:	440b      	add	r3, r1
 8114a92:	3308      	adds	r3, #8
 8114a94:	68fa      	ldr	r2, [r7, #12]
 8114a96:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
 8114a98:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8114a9c:	4619      	mov	r1, r3
 8114a9e:	4834      	ldr	r0, [pc, #208]	@ (8114b70 <etharp_update_arp_entry+0x228>)
 8114aa0:	f00d fbe0 	bl	8122264 <iprintf>
 8114aa4:	200d      	movs	r0, #13
 8114aa6:	f00d fbef 	bl	8122288 <putchar>
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8114aaa:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8114aae:	4613      	mov	r3, r2
 8114ab0:	005b      	lsls	r3, r3, #1
 8114ab2:	4413      	add	r3, r2
 8114ab4:	00db      	lsls	r3, r3, #3
 8114ab6:	3308      	adds	r3, #8
 8114ab8:	4a2c      	ldr	r2, [pc, #176]	@ (8114b6c <etharp_update_arp_entry+0x224>)
 8114aba:	4413      	add	r3, r2
 8114abc:	3304      	adds	r3, #4
 8114abe:	2206      	movs	r2, #6
 8114ac0:	6879      	ldr	r1, [r7, #4]
 8114ac2:	4618      	mov	r0, r3
 8114ac4:	f00d fec3 	bl	812284e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8114ac8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8114acc:	4927      	ldr	r1, [pc, #156]	@ (8114b6c <etharp_update_arp_entry+0x224>)
 8114ace:	4613      	mov	r3, r2
 8114ad0:	005b      	lsls	r3, r3, #1
 8114ad2:	4413      	add	r3, r2
 8114ad4:	00db      	lsls	r3, r3, #3
 8114ad6:	440b      	add	r3, r1
 8114ad8:	3312      	adds	r3, #18
 8114ada:	2200      	movs	r2, #0
 8114adc:	801a      	strh	r2, [r3, #0]
  /* this is where we will send out queued packets! */
#if ARP_QUEUEING
  while (arp_table[i].q != NULL) {
 8114ade:	e029      	b.n	8114b34 <etharp_update_arp_entry+0x1ec>
    struct pbuf *p;
    /* remember remainder of queue */
    struct etharp_q_entry *q = arp_table[i].q;
 8114ae0:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8114ae4:	4921      	ldr	r1, [pc, #132]	@ (8114b6c <etharp_update_arp_entry+0x224>)
 8114ae6:	4613      	mov	r3, r2
 8114ae8:	005b      	lsls	r3, r3, #1
 8114aea:	4413      	add	r3, r2
 8114aec:	00db      	lsls	r3, r3, #3
 8114aee:	440b      	add	r3, r1
 8114af0:	681b      	ldr	r3, [r3, #0]
 8114af2:	61bb      	str	r3, [r7, #24]
    /* pop first item off the queue */
    arp_table[i].q = q->next;
 8114af4:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8114af8:	69bb      	ldr	r3, [r7, #24]
 8114afa:	6819      	ldr	r1, [r3, #0]
 8114afc:	481b      	ldr	r0, [pc, #108]	@ (8114b6c <etharp_update_arp_entry+0x224>)
 8114afe:	4613      	mov	r3, r2
 8114b00:	005b      	lsls	r3, r3, #1
 8114b02:	4413      	add	r3, r2
 8114b04:	00db      	lsls	r3, r3, #3
 8114b06:	4403      	add	r3, r0
 8114b08:	6019      	str	r1, [r3, #0]
    /* get the packet pointer */
    p = q->p;
 8114b0a:	69bb      	ldr	r3, [r7, #24]
 8114b0c:	685b      	ldr	r3, [r3, #4]
 8114b0e:	617b      	str	r3, [r7, #20]
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
 8114b10:	69b9      	ldr	r1, [r7, #24]
 8114b12:	2009      	movs	r0, #9
 8114b14:	f003 fb70 	bl	81181f8 <memp_free>
  if (arp_table[i].q != NULL) {
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8114b18:	68fb      	ldr	r3, [r7, #12]
 8114b1a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8114b1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8114b22:	9300      	str	r3, [sp, #0]
 8114b24:	687b      	ldr	r3, [r7, #4]
 8114b26:	6979      	ldr	r1, [r7, #20]
 8114b28:	68f8      	ldr	r0, [r7, #12]
 8114b2a:	f000 feab 	bl	8115884 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8114b2e:	6978      	ldr	r0, [r7, #20]
 8114b30:	f004 fb24 	bl	811917c <pbuf_free>
  while (arp_table[i].q != NULL) {
 8114b34:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8114b38:	490c      	ldr	r1, [pc, #48]	@ (8114b6c <etharp_update_arp_entry+0x224>)
 8114b3a:	4613      	mov	r3, r2
 8114b3c:	005b      	lsls	r3, r3, #1
 8114b3e:	4413      	add	r3, r2
 8114b40:	00db      	lsls	r3, r3, #3
 8114b42:	440b      	add	r3, r1
 8114b44:	681b      	ldr	r3, [r3, #0]
 8114b46:	2b00      	cmp	r3, #0
 8114b48:	d1ca      	bne.n	8114ae0 <etharp_update_arp_entry+0x198>
  }
  return ERR_OK;
 8114b4a:	2300      	movs	r3, #0
}
 8114b4c:	4618      	mov	r0, r3
 8114b4e:	3720      	adds	r7, #32
 8114b50:	46bd      	mov	sp, r7
 8114b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8114b56:	bf00      	nop
 8114b58:	08123b64 	.word	0x08123b64
 8114b5c:	08123f08 	.word	0x08123f08
 8114b60:	08123be8 	.word	0x08123be8
 8114b64:	08123f2c 	.word	0x08123f2c
 8114b68:	08123f7c 	.word	0x08123f7c
 8114b6c:	1000b1c0 	.word	0x1000b1c0
 8114b70:	08123fc8 	.word	0x08123fc8

08114b74 <etharp_add_static_entry>:
 * @param ethaddr ethernet address for the new static entry
 * @return See return values of etharp_add_static_entry
 */
err_t
etharp_add_static_entry(const ip4_addr_t *ipaddr, struct eth_addr *ethaddr)
{
 8114b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8114b78:	b08c      	sub	sp, #48	@ 0x30
 8114b7a:	af08      	add	r7, sp, #32
 8114b7c:	6078      	str	r0, [r7, #4]
 8114b7e:	6039      	str	r1, [r7, #0]
  struct netif *netif;
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_add_static_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
 8114b80:	687b      	ldr	r3, [r7, #4]
 8114b82:	781b      	ldrb	r3, [r3, #0]
 8114b84:	469c      	mov	ip, r3
 8114b86:	687b      	ldr	r3, [r7, #4]
 8114b88:	3301      	adds	r3, #1
 8114b8a:	781b      	ldrb	r3, [r3, #0]
 8114b8c:	469e      	mov	lr, r3
 8114b8e:	687b      	ldr	r3, [r7, #4]
 8114b90:	3302      	adds	r3, #2
 8114b92:	781b      	ldrb	r3, [r3, #0]
 8114b94:	4698      	mov	r8, r3
 8114b96:	687b      	ldr	r3, [r7, #4]
 8114b98:	3303      	adds	r3, #3
 8114b9a:	781b      	ldrb	r3, [r3, #0]
 8114b9c:	461a      	mov	r2, r3
 8114b9e:	683b      	ldr	r3, [r7, #0]
 8114ba0:	781b      	ldrb	r3, [r3, #0]
 8114ba2:	4619      	mov	r1, r3
 8114ba4:	683b      	ldr	r3, [r7, #0]
 8114ba6:	785b      	ldrb	r3, [r3, #1]
 8114ba8:	4618      	mov	r0, r3
 8114baa:	683b      	ldr	r3, [r7, #0]
 8114bac:	789b      	ldrb	r3, [r3, #2]
 8114bae:	461c      	mov	r4, r3
 8114bb0:	683b      	ldr	r3, [r7, #0]
 8114bb2:	78db      	ldrb	r3, [r3, #3]
 8114bb4:	461d      	mov	r5, r3
 8114bb6:	683b      	ldr	r3, [r7, #0]
 8114bb8:	791b      	ldrb	r3, [r3, #4]
 8114bba:	461e      	mov	r6, r3
 8114bbc:	683b      	ldr	r3, [r7, #0]
 8114bbe:	795b      	ldrb	r3, [r3, #5]
 8114bc0:	9306      	str	r3, [sp, #24]
 8114bc2:	9605      	str	r6, [sp, #20]
 8114bc4:	9504      	str	r5, [sp, #16]
 8114bc6:	9403      	str	r4, [sp, #12]
 8114bc8:	9002      	str	r0, [sp, #8]
 8114bca:	9101      	str	r1, [sp, #4]
 8114bcc:	9200      	str	r2, [sp, #0]
 8114bce:	4643      	mov	r3, r8
 8114bd0:	4672      	mov	r2, lr
 8114bd2:	4661      	mov	r1, ip
 8114bd4:	480d      	ldr	r0, [pc, #52]	@ (8114c0c <etharp_add_static_entry+0x98>)
 8114bd6:	f00d fb45 	bl	8122264 <iprintf>
 8114bda:	200d      	movs	r0, #13
 8114bdc:	f00d fb54 	bl	8122288 <putchar>
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));

  netif = ip4_route(ipaddr);
 8114be0:	6878      	ldr	r0, [r7, #4]
 8114be2:	f001 f933 	bl	8115e4c <ip4_route>
 8114be6:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8114be8:	68fb      	ldr	r3, [r7, #12]
 8114bea:	2b00      	cmp	r3, #0
 8114bec:	d102      	bne.n	8114bf4 <etharp_add_static_entry+0x80>
    return ERR_RTE;
 8114bee:	f06f 0303 	mvn.w	r3, #3
 8114bf2:	e006      	b.n	8114c02 <etharp_add_static_entry+0x8e>
  }

  return etharp_update_arp_entry(netif, ipaddr, ethaddr, ETHARP_FLAG_TRY_HARD | ETHARP_FLAG_STATIC_ENTRY);
 8114bf4:	2305      	movs	r3, #5
 8114bf6:	683a      	ldr	r2, [r7, #0]
 8114bf8:	6879      	ldr	r1, [r7, #4]
 8114bfa:	68f8      	ldr	r0, [r7, #12]
 8114bfc:	f7ff fea4 	bl	8114948 <etharp_update_arp_entry>
 8114c00:	4603      	mov	r3, r0
}
 8114c02:	4618      	mov	r0, r3
 8114c04:	3710      	adds	r7, #16
 8114c06:	46bd      	mov	sp, r7
 8114c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8114c0c:	08123ffc 	.word	0x08123ffc

08114c10 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8114c10:	b580      	push	{r7, lr}
 8114c12:	b084      	sub	sp, #16
 8114c14:	af00      	add	r7, sp, #0
 8114c16:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8114c18:	2300      	movs	r3, #0
 8114c1a:	60fb      	str	r3, [r7, #12]
 8114c1c:	e01e      	b.n	8114c5c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8114c1e:	4913      	ldr	r1, [pc, #76]	@ (8114c6c <etharp_cleanup_netif+0x5c>)
 8114c20:	68fa      	ldr	r2, [r7, #12]
 8114c22:	4613      	mov	r3, r2
 8114c24:	005b      	lsls	r3, r3, #1
 8114c26:	4413      	add	r3, r2
 8114c28:	00db      	lsls	r3, r3, #3
 8114c2a:	440b      	add	r3, r1
 8114c2c:	3314      	adds	r3, #20
 8114c2e:	781b      	ldrb	r3, [r3, #0]
 8114c30:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8114c32:	7afb      	ldrb	r3, [r7, #11]
 8114c34:	2b00      	cmp	r3, #0
 8114c36:	d00e      	beq.n	8114c56 <etharp_cleanup_netif+0x46>
 8114c38:	490c      	ldr	r1, [pc, #48]	@ (8114c6c <etharp_cleanup_netif+0x5c>)
 8114c3a:	68fa      	ldr	r2, [r7, #12]
 8114c3c:	4613      	mov	r3, r2
 8114c3e:	005b      	lsls	r3, r3, #1
 8114c40:	4413      	add	r3, r2
 8114c42:	00db      	lsls	r3, r3, #3
 8114c44:	440b      	add	r3, r1
 8114c46:	3308      	adds	r3, #8
 8114c48:	681b      	ldr	r3, [r3, #0]
 8114c4a:	687a      	ldr	r2, [r7, #4]
 8114c4c:	429a      	cmp	r2, r3
 8114c4e:	d102      	bne.n	8114c56 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8114c50:	68f8      	ldr	r0, [r7, #12]
 8114c52:	f7ff fb57 	bl	8114304 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8114c56:	68fb      	ldr	r3, [r7, #12]
 8114c58:	3301      	adds	r3, #1
 8114c5a:	60fb      	str	r3, [r7, #12]
 8114c5c:	68fb      	ldr	r3, [r7, #12]
 8114c5e:	2b09      	cmp	r3, #9
 8114c60:	dddd      	ble.n	8114c1e <etharp_cleanup_netif+0xe>
    }
  }
}
 8114c62:	bf00      	nop
 8114c64:	bf00      	nop
 8114c66:	3710      	adds	r7, #16
 8114c68:	46bd      	mov	sp, r7
 8114c6a:	bd80      	pop	{r7, pc}
 8114c6c:	1000b1c0 	.word	0x1000b1c0

08114c70 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8114c70:	b5b0      	push	{r4, r5, r7, lr}
 8114c72:	b08a      	sub	sp, #40	@ 0x28
 8114c74:	af04      	add	r7, sp, #16
 8114c76:	6078      	str	r0, [r7, #4]
 8114c78:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8114c7a:	683b      	ldr	r3, [r7, #0]
 8114c7c:	2b00      	cmp	r3, #0
 8114c7e:	d107      	bne.n	8114c90 <etharp_input+0x20>
 8114c80:	4b5d      	ldr	r3, [pc, #372]	@ (8114df8 <etharp_input+0x188>)
 8114c82:	f240 228a 	movw	r2, #650	@ 0x28a
 8114c86:	495d      	ldr	r1, [pc, #372]	@ (8114dfc <etharp_input+0x18c>)
 8114c88:	485d      	ldr	r0, [pc, #372]	@ (8114e00 <etharp_input+0x190>)
 8114c8a:	f00d faeb 	bl	8122264 <iprintf>
 8114c8e:	e0b0      	b.n	8114df2 <etharp_input+0x182>

  hdr = (struct etharp_hdr *)p->payload;
 8114c90:	687b      	ldr	r3, [r7, #4]
 8114c92:	685b      	ldr	r3, [r3, #4]
 8114c94:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8114c96:	693b      	ldr	r3, [r7, #16]
 8114c98:	881b      	ldrh	r3, [r3, #0]
 8114c9a:	b29b      	uxth	r3, r3
 8114c9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8114ca0:	d10c      	bne.n	8114cbc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8114ca2:	693b      	ldr	r3, [r7, #16]
 8114ca4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8114ca6:	2b06      	cmp	r3, #6
 8114ca8:	d108      	bne.n	8114cbc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8114caa:	693b      	ldr	r3, [r7, #16]
 8114cac:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8114cae:	2b04      	cmp	r3, #4
 8114cb0:	d104      	bne.n	8114cbc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8114cb2:	693b      	ldr	r3, [r7, #16]
 8114cb4:	885b      	ldrh	r3, [r3, #2]
 8114cb6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8114cb8:	2b08      	cmp	r3, #8
 8114cba:	d018      	beq.n	8114cee <etharp_input+0x7e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 8114cbc:	693b      	ldr	r3, [r7, #16]
 8114cbe:	881b      	ldrh	r3, [r3, #0]
 8114cc0:	b29b      	uxth	r3, r3
 8114cc2:	4619      	mov	r1, r3
 8114cc4:	693b      	ldr	r3, [r7, #16]
 8114cc6:	791b      	ldrb	r3, [r3, #4]
 8114cc8:	461a      	mov	r2, r3
 8114cca:	693b      	ldr	r3, [r7, #16]
 8114ccc:	885b      	ldrh	r3, [r3, #2]
 8114cce:	b29b      	uxth	r3, r3
 8114cd0:	4618      	mov	r0, r3
 8114cd2:	693b      	ldr	r3, [r7, #16]
 8114cd4:	795b      	ldrb	r3, [r3, #5]
 8114cd6:	9300      	str	r3, [sp, #0]
 8114cd8:	4603      	mov	r3, r0
 8114cda:	484a      	ldr	r0, [pc, #296]	@ (8114e04 <etharp_input+0x194>)
 8114cdc:	f00d fac2 	bl	8122264 <iprintf>
 8114ce0:	200d      	movs	r0, #13
 8114ce2:	f00d fad1 	bl	8122288 <putchar>
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8114ce6:	6878      	ldr	r0, [r7, #4]
 8114ce8:	f004 fa48 	bl	811917c <pbuf_free>
    return;
 8114cec:	e081      	b.n	8114df2 <etharp_input+0x182>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8114cee:	693b      	ldr	r3, [r7, #16]
 8114cf0:	330e      	adds	r3, #14
 8114cf2:	681b      	ldr	r3, [r3, #0]
 8114cf4:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8114cf6:	693b      	ldr	r3, [r7, #16]
 8114cf8:	3318      	adds	r3, #24
 8114cfa:	681b      	ldr	r3, [r3, #0]
 8114cfc:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8114cfe:	683b      	ldr	r3, [r7, #0]
 8114d00:	3304      	adds	r3, #4
 8114d02:	681b      	ldr	r3, [r3, #0]
 8114d04:	2b00      	cmp	r3, #0
 8114d06:	d102      	bne.n	8114d0e <etharp_input+0x9e>
    for_us = 0;
 8114d08:	2300      	movs	r3, #0
 8114d0a:	75fb      	strb	r3, [r7, #23]
 8114d0c:	e009      	b.n	8114d22 <etharp_input+0xb2>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8114d0e:	68ba      	ldr	r2, [r7, #8]
 8114d10:	683b      	ldr	r3, [r7, #0]
 8114d12:	3304      	adds	r3, #4
 8114d14:	681b      	ldr	r3, [r3, #0]
 8114d16:	429a      	cmp	r2, r3
 8114d18:	bf0c      	ite	eq
 8114d1a:	2301      	moveq	r3, #1
 8114d1c:	2300      	movne	r3, #0
 8114d1e:	b2db      	uxtb	r3, r3
 8114d20:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8114d22:	693b      	ldr	r3, [r7, #16]
 8114d24:	f103 0208 	add.w	r2, r3, #8
 8114d28:	7dfb      	ldrb	r3, [r7, #23]
 8114d2a:	2b00      	cmp	r3, #0
 8114d2c:	d001      	beq.n	8114d32 <etharp_input+0xc2>
 8114d2e:	2301      	movs	r3, #1
 8114d30:	e000      	b.n	8114d34 <etharp_input+0xc4>
 8114d32:	2302      	movs	r3, #2
 8114d34:	f107 010c 	add.w	r1, r7, #12
 8114d38:	6838      	ldr	r0, [r7, #0]
 8114d3a:	f7ff fe05 	bl	8114948 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8114d3e:	693b      	ldr	r3, [r7, #16]
 8114d40:	88db      	ldrh	r3, [r3, #6]
 8114d42:	b29b      	uxth	r3, r3
 8114d44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8114d48:	d003      	beq.n	8114d52 <etharp_input+0xe2>
 8114d4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8114d4e:	d037      	beq.n	8114dc0 <etharp_input+0x150>
 8114d50:	e03d      	b.n	8114dce <etharp_input+0x15e>
    case PP_HTONS(ARP_REQUEST):
      /* ARP request. If it asked for our address, we send out a
       * reply. In any case, we time-stamp any existing ARP entry,
       * and possibly send out an IP packet that was queued on it. */

      LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
 8114d52:	482d      	ldr	r0, [pc, #180]	@ (8114e08 <etharp_input+0x198>)
 8114d54:	f00d faf6 	bl	8122344 <puts>
 8114d58:	200d      	movs	r0, #13
 8114d5a:	f00d fa95 	bl	8122288 <putchar>
      /* ARP request for our address? */
      if (for_us) {
 8114d5e:	7dfb      	ldrb	r3, [r7, #23]
 8114d60:	2b00      	cmp	r3, #0
 8114d62:	d01a      	beq.n	8114d9a <etharp_input+0x12a>
        /* send ARP response */
        etharp_raw(netif,
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8114d64:	683b      	ldr	r3, [r7, #0]
 8114d66:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8114d6a:	693b      	ldr	r3, [r7, #16]
 8114d6c:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8114d70:	683b      	ldr	r3, [r7, #0]
 8114d72:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8114d76:	683b      	ldr	r3, [r7, #0]
 8114d78:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8114d7a:	693a      	ldr	r2, [r7, #16]
 8114d7c:	3208      	adds	r2, #8
        etharp_raw(netif,
 8114d7e:	2102      	movs	r1, #2
 8114d80:	9103      	str	r1, [sp, #12]
 8114d82:	f107 010c 	add.w	r1, r7, #12
 8114d86:	9102      	str	r1, [sp, #8]
 8114d88:	9201      	str	r2, [sp, #4]
 8114d8a:	9300      	str	r3, [sp, #0]
 8114d8c:	462b      	mov	r3, r5
 8114d8e:	4622      	mov	r2, r4
 8114d90:	4601      	mov	r1, r0
 8114d92:	6838      	ldr	r0, [r7, #0]
 8114d94:	f000 fba2 	bl	81154dc <etharp_raw>
        /* request was not directed to us */
      } else {
        /* { for_us == 0 and netif->ip_addr.addr != 0 } */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
      }
      break;
 8114d98:	e028      	b.n	8114dec <etharp_input+0x17c>
      } else if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8114d9a:	683b      	ldr	r3, [r7, #0]
 8114d9c:	3304      	adds	r3, #4
 8114d9e:	681b      	ldr	r3, [r3, #0]
 8114da0:	2b00      	cmp	r3, #0
 8114da2:	d106      	bne.n	8114db2 <etharp_input+0x142>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: we are unconfigured, ARP request ignored.\n"));
 8114da4:	4819      	ldr	r0, [pc, #100]	@ (8114e0c <etharp_input+0x19c>)
 8114da6:	f00d facd 	bl	8122344 <puts>
 8114daa:	200d      	movs	r0, #13
 8114dac:	f00d fa6c 	bl	8122288 <putchar>
      break;
 8114db0:	e01c      	b.n	8114dec <etharp_input+0x17c>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
 8114db2:	4817      	ldr	r0, [pc, #92]	@ (8114e10 <etharp_input+0x1a0>)
 8114db4:	f00d fac6 	bl	8122344 <puts>
 8114db8:	200d      	movs	r0, #13
 8114dba:	f00d fa65 	bl	8122288 <putchar>
      break;
 8114dbe:	e015      	b.n	8114dec <etharp_input+0x17c>
    case PP_HTONS(ARP_REPLY):
      /* ARP reply. We already updated the ARP cache earlier. */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP reply\n"));
 8114dc0:	4814      	ldr	r0, [pc, #80]	@ (8114e14 <etharp_input+0x1a4>)
 8114dc2:	f00d fabf 	bl	8122344 <puts>
 8114dc6:	200d      	movs	r0, #13
 8114dc8:	f00d fa5e 	bl	8122288 <putchar>
       * IP address also offered to us by the DHCP server. We do not
       * want to take a duplicate IP address on a single network.
       * @todo How should we handle redundant (fail-over) interfaces? */
      dhcp_arp_reply(netif, &sipaddr);
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
 8114dcc:	e00e      	b.n	8114dec <etharp_input+0x17c>
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
 8114dce:	693b      	ldr	r3, [r7, #16]
 8114dd0:	88db      	ldrh	r3, [r3, #6]
 8114dd2:	b29b      	uxth	r3, r3
 8114dd4:	4618      	mov	r0, r3
 8114dd6:	f7ff fa31 	bl	811423c <lwip_htons>
 8114dda:	4603      	mov	r3, r0
 8114ddc:	4619      	mov	r1, r3
 8114dde:	480e      	ldr	r0, [pc, #56]	@ (8114e18 <etharp_input+0x1a8>)
 8114de0:	f00d fa40 	bl	8122264 <iprintf>
 8114de4:	200d      	movs	r0, #13
 8114de6:	f00d fa4f 	bl	8122288 <putchar>
      ETHARP_STATS_INC(etharp.err);
      break;
 8114dea:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8114dec:	6878      	ldr	r0, [r7, #4]
 8114dee:	f004 f9c5 	bl	811917c <pbuf_free>
}
 8114df2:	3718      	adds	r7, #24
 8114df4:	46bd      	mov	sp, r7
 8114df6:	bdb0      	pop	{r4, r5, r7, pc}
 8114df8:	08123b64 	.word	0x08123b64
 8114dfc:	081240b0 	.word	0x081240b0
 8114e00:	08123be8 	.word	0x08123be8
 8114e04:	081240d0 	.word	0x081240d0
 8114e08:	08124138 	.word	0x08124138
 8114e0c:	0812415c 	.word	0x0812415c
 8114e10:	08124194 	.word	0x08124194
 8114e14:	081241c0 	.word	0x081241c0
 8114e18:	081241e4 	.word	0x081241e4

08114e1c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8114e1c:	b580      	push	{r7, lr}
 8114e1e:	b086      	sub	sp, #24
 8114e20:	af02      	add	r7, sp, #8
 8114e22:	60f8      	str	r0, [r7, #12]
 8114e24:	60b9      	str	r1, [r7, #8]
 8114e26:	4613      	mov	r3, r2
 8114e28:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8114e2a:	79fa      	ldrb	r2, [r7, #7]
 8114e2c:	4944      	ldr	r1, [pc, #272]	@ (8114f40 <etharp_output_to_arp_index+0x124>)
 8114e2e:	4613      	mov	r3, r2
 8114e30:	005b      	lsls	r3, r3, #1
 8114e32:	4413      	add	r3, r2
 8114e34:	00db      	lsls	r3, r3, #3
 8114e36:	440b      	add	r3, r1
 8114e38:	3314      	adds	r3, #20
 8114e3a:	781b      	ldrb	r3, [r3, #0]
 8114e3c:	2b01      	cmp	r3, #1
 8114e3e:	d806      	bhi.n	8114e4e <etharp_output_to_arp_index+0x32>
 8114e40:	4b40      	ldr	r3, [pc, #256]	@ (8114f44 <etharp_output_to_arp_index+0x128>)
 8114e42:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8114e46:	4940      	ldr	r1, [pc, #256]	@ (8114f48 <etharp_output_to_arp_index+0x12c>)
 8114e48:	4840      	ldr	r0, [pc, #256]	@ (8114f4c <etharp_output_to_arp_index+0x130>)
 8114e4a:	f00d fa0b 	bl	8122264 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8114e4e:	79fa      	ldrb	r2, [r7, #7]
 8114e50:	493b      	ldr	r1, [pc, #236]	@ (8114f40 <etharp_output_to_arp_index+0x124>)
 8114e52:	4613      	mov	r3, r2
 8114e54:	005b      	lsls	r3, r3, #1
 8114e56:	4413      	add	r3, r2
 8114e58:	00db      	lsls	r3, r3, #3
 8114e5a:	440b      	add	r3, r1
 8114e5c:	3314      	adds	r3, #20
 8114e5e:	781b      	ldrb	r3, [r3, #0]
 8114e60:	2b02      	cmp	r3, #2
 8114e62:	d153      	bne.n	8114f0c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8114e64:	79fa      	ldrb	r2, [r7, #7]
 8114e66:	4936      	ldr	r1, [pc, #216]	@ (8114f40 <etharp_output_to_arp_index+0x124>)
 8114e68:	4613      	mov	r3, r2
 8114e6a:	005b      	lsls	r3, r3, #1
 8114e6c:	4413      	add	r3, r2
 8114e6e:	00db      	lsls	r3, r3, #3
 8114e70:	440b      	add	r3, r1
 8114e72:	3312      	adds	r3, #18
 8114e74:	881b      	ldrh	r3, [r3, #0]
 8114e76:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8114e7a:	d919      	bls.n	8114eb0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8114e7c:	79fa      	ldrb	r2, [r7, #7]
 8114e7e:	4613      	mov	r3, r2
 8114e80:	005b      	lsls	r3, r3, #1
 8114e82:	4413      	add	r3, r2
 8114e84:	00db      	lsls	r3, r3, #3
 8114e86:	4a2e      	ldr	r2, [pc, #184]	@ (8114f40 <etharp_output_to_arp_index+0x124>)
 8114e88:	4413      	add	r3, r2
 8114e8a:	3304      	adds	r3, #4
 8114e8c:	4619      	mov	r1, r3
 8114e8e:	68f8      	ldr	r0, [r7, #12]
 8114e90:	f000 fbe2 	bl	8115658 <etharp_request>
 8114e94:	4603      	mov	r3, r0
 8114e96:	2b00      	cmp	r3, #0
 8114e98:	d138      	bne.n	8114f0c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8114e9a:	79fa      	ldrb	r2, [r7, #7]
 8114e9c:	4928      	ldr	r1, [pc, #160]	@ (8114f40 <etharp_output_to_arp_index+0x124>)
 8114e9e:	4613      	mov	r3, r2
 8114ea0:	005b      	lsls	r3, r3, #1
 8114ea2:	4413      	add	r3, r2
 8114ea4:	00db      	lsls	r3, r3, #3
 8114ea6:	440b      	add	r3, r1
 8114ea8:	3314      	adds	r3, #20
 8114eaa:	2203      	movs	r2, #3
 8114eac:	701a      	strb	r2, [r3, #0]
 8114eae:	e02d      	b.n	8114f0c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8114eb0:	79fa      	ldrb	r2, [r7, #7]
 8114eb2:	4923      	ldr	r1, [pc, #140]	@ (8114f40 <etharp_output_to_arp_index+0x124>)
 8114eb4:	4613      	mov	r3, r2
 8114eb6:	005b      	lsls	r3, r3, #1
 8114eb8:	4413      	add	r3, r2
 8114eba:	00db      	lsls	r3, r3, #3
 8114ebc:	440b      	add	r3, r1
 8114ebe:	3312      	adds	r3, #18
 8114ec0:	881b      	ldrh	r3, [r3, #0]
 8114ec2:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8114ec6:	d321      	bcc.n	8114f0c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8114ec8:	79fa      	ldrb	r2, [r7, #7]
 8114eca:	4613      	mov	r3, r2
 8114ecc:	005b      	lsls	r3, r3, #1
 8114ece:	4413      	add	r3, r2
 8114ed0:	00db      	lsls	r3, r3, #3
 8114ed2:	4a1b      	ldr	r2, [pc, #108]	@ (8114f40 <etharp_output_to_arp_index+0x124>)
 8114ed4:	4413      	add	r3, r2
 8114ed6:	1d19      	adds	r1, r3, #4
 8114ed8:	79fa      	ldrb	r2, [r7, #7]
 8114eda:	4613      	mov	r3, r2
 8114edc:	005b      	lsls	r3, r3, #1
 8114ede:	4413      	add	r3, r2
 8114ee0:	00db      	lsls	r3, r3, #3
 8114ee2:	3308      	adds	r3, #8
 8114ee4:	4a16      	ldr	r2, [pc, #88]	@ (8114f40 <etharp_output_to_arp_index+0x124>)
 8114ee6:	4413      	add	r3, r2
 8114ee8:	3304      	adds	r3, #4
 8114eea:	461a      	mov	r2, r3
 8114eec:	68f8      	ldr	r0, [r7, #12]
 8114eee:	f000 fb91 	bl	8115614 <etharp_request_dst>
 8114ef2:	4603      	mov	r3, r0
 8114ef4:	2b00      	cmp	r3, #0
 8114ef6:	d109      	bne.n	8114f0c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8114ef8:	79fa      	ldrb	r2, [r7, #7]
 8114efa:	4911      	ldr	r1, [pc, #68]	@ (8114f40 <etharp_output_to_arp_index+0x124>)
 8114efc:	4613      	mov	r3, r2
 8114efe:	005b      	lsls	r3, r3, #1
 8114f00:	4413      	add	r3, r2
 8114f02:	00db      	lsls	r3, r3, #3
 8114f04:	440b      	add	r3, r1
 8114f06:	3314      	adds	r3, #20
 8114f08:	2203      	movs	r2, #3
 8114f0a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8114f0c:	68fb      	ldr	r3, [r7, #12]
 8114f0e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8114f12:	79fa      	ldrb	r2, [r7, #7]
 8114f14:	4613      	mov	r3, r2
 8114f16:	005b      	lsls	r3, r3, #1
 8114f18:	4413      	add	r3, r2
 8114f1a:	00db      	lsls	r3, r3, #3
 8114f1c:	3308      	adds	r3, #8
 8114f1e:	4a08      	ldr	r2, [pc, #32]	@ (8114f40 <etharp_output_to_arp_index+0x124>)
 8114f20:	4413      	add	r3, r2
 8114f22:	3304      	adds	r3, #4
 8114f24:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8114f28:	9200      	str	r2, [sp, #0]
 8114f2a:	460a      	mov	r2, r1
 8114f2c:	68b9      	ldr	r1, [r7, #8]
 8114f2e:	68f8      	ldr	r0, [r7, #12]
 8114f30:	f000 fca8 	bl	8115884 <ethernet_output>
 8114f34:	4603      	mov	r3, r0
}
 8114f36:	4618      	mov	r0, r3
 8114f38:	3710      	adds	r7, #16
 8114f3a:	46bd      	mov	sp, r7
 8114f3c:	bd80      	pop	{r7, pc}
 8114f3e:	bf00      	nop
 8114f40:	1000b1c0 	.word	0x1000b1c0
 8114f44:	08123b64 	.word	0x08123b64
 8114f48:	08124210 	.word	0x08124210
 8114f4c:	08123be8 	.word	0x08123be8

08114f50 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8114f50:	b580      	push	{r7, lr}
 8114f52:	b08a      	sub	sp, #40	@ 0x28
 8114f54:	af02      	add	r7, sp, #8
 8114f56:	60f8      	str	r0, [r7, #12]
 8114f58:	60b9      	str	r1, [r7, #8]
 8114f5a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8114f5c:	687b      	ldr	r3, [r7, #4]
 8114f5e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8114f60:	68fb      	ldr	r3, [r7, #12]
 8114f62:	2b00      	cmp	r3, #0
 8114f64:	d106      	bne.n	8114f74 <etharp_output+0x24>
 8114f66:	4b73      	ldr	r3, [pc, #460]	@ (8115134 <etharp_output+0x1e4>)
 8114f68:	f240 321e 	movw	r2, #798	@ 0x31e
 8114f6c:	4972      	ldr	r1, [pc, #456]	@ (8115138 <etharp_output+0x1e8>)
 8114f6e:	4873      	ldr	r0, [pc, #460]	@ (811513c <etharp_output+0x1ec>)
 8114f70:	f00d f978 	bl	8122264 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8114f74:	68bb      	ldr	r3, [r7, #8]
 8114f76:	2b00      	cmp	r3, #0
 8114f78:	d106      	bne.n	8114f88 <etharp_output+0x38>
 8114f7a:	4b6e      	ldr	r3, [pc, #440]	@ (8115134 <etharp_output+0x1e4>)
 8114f7c:	f240 321f 	movw	r2, #799	@ 0x31f
 8114f80:	496f      	ldr	r1, [pc, #444]	@ (8115140 <etharp_output+0x1f0>)
 8114f82:	486e      	ldr	r0, [pc, #440]	@ (811513c <etharp_output+0x1ec>)
 8114f84:	f00d f96e 	bl	8122264 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8114f88:	687b      	ldr	r3, [r7, #4]
 8114f8a:	2b00      	cmp	r3, #0
 8114f8c:	d106      	bne.n	8114f9c <etharp_output+0x4c>
 8114f8e:	4b69      	ldr	r3, [pc, #420]	@ (8115134 <etharp_output+0x1e4>)
 8114f90:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8114f94:	496b      	ldr	r1, [pc, #428]	@ (8115144 <etharp_output+0x1f4>)
 8114f96:	4869      	ldr	r0, [pc, #420]	@ (811513c <etharp_output+0x1ec>)
 8114f98:	f00d f964 	bl	8122264 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8114f9c:	687b      	ldr	r3, [r7, #4]
 8114f9e:	681b      	ldr	r3, [r3, #0]
 8114fa0:	68f9      	ldr	r1, [r7, #12]
 8114fa2:	4618      	mov	r0, r3
 8114fa4:	f001 fbfa 	bl	811679c <ip4_addr_isbroadcast_u32>
 8114fa8:	4603      	mov	r3, r0
 8114faa:	2b00      	cmp	r3, #0
 8114fac:	d002      	beq.n	8114fb4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8114fae:	4b66      	ldr	r3, [pc, #408]	@ (8115148 <etharp_output+0x1f8>)
 8114fb0:	61fb      	str	r3, [r7, #28]
 8114fb2:	e0af      	b.n	8115114 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8114fb4:	687b      	ldr	r3, [r7, #4]
 8114fb6:	681b      	ldr	r3, [r3, #0]
 8114fb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8114fbc:	2be0      	cmp	r3, #224	@ 0xe0
 8114fbe:	d118      	bne.n	8114ff2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8114fc0:	2301      	movs	r3, #1
 8114fc2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8114fc4:	2300      	movs	r3, #0
 8114fc6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8114fc8:	235e      	movs	r3, #94	@ 0x5e
 8114fca:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8114fcc:	687b      	ldr	r3, [r7, #4]
 8114fce:	3301      	adds	r3, #1
 8114fd0:	781b      	ldrb	r3, [r3, #0]
 8114fd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8114fd6:	b2db      	uxtb	r3, r3
 8114fd8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8114fda:	687b      	ldr	r3, [r7, #4]
 8114fdc:	3302      	adds	r3, #2
 8114fde:	781b      	ldrb	r3, [r3, #0]
 8114fe0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8114fe2:	687b      	ldr	r3, [r7, #4]
 8114fe4:	3303      	adds	r3, #3
 8114fe6:	781b      	ldrb	r3, [r3, #0]
 8114fe8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8114fea:	f107 0310 	add.w	r3, r7, #16
 8114fee:	61fb      	str	r3, [r7, #28]
 8114ff0:	e090      	b.n	8115114 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8114ff2:	687b      	ldr	r3, [r7, #4]
 8114ff4:	681a      	ldr	r2, [r3, #0]
 8114ff6:	68fb      	ldr	r3, [r7, #12]
 8114ff8:	3304      	adds	r3, #4
 8114ffa:	681b      	ldr	r3, [r3, #0]
 8114ffc:	405a      	eors	r2, r3
 8114ffe:	68fb      	ldr	r3, [r7, #12]
 8115000:	3308      	adds	r3, #8
 8115002:	681b      	ldr	r3, [r3, #0]
 8115004:	4013      	ands	r3, r2
 8115006:	2b00      	cmp	r3, #0
 8115008:	d012      	beq.n	8115030 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 811500a:	687b      	ldr	r3, [r7, #4]
 811500c:	681b      	ldr	r3, [r3, #0]
 811500e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8115010:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8115014:	4293      	cmp	r3, r2
 8115016:	d00b      	beq.n	8115030 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8115018:	68fb      	ldr	r3, [r7, #12]
 811501a:	330c      	adds	r3, #12
 811501c:	681b      	ldr	r3, [r3, #0]
 811501e:	2b00      	cmp	r3, #0
 8115020:	d003      	beq.n	811502a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8115022:	68fb      	ldr	r3, [r7, #12]
 8115024:	330c      	adds	r3, #12
 8115026:	61bb      	str	r3, [r7, #24]
 8115028:	e002      	b.n	8115030 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 811502a:	f06f 0303 	mvn.w	r3, #3
 811502e:	e07d      	b.n	811512c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8115030:	4b46      	ldr	r3, [pc, #280]	@ (811514c <etharp_output+0x1fc>)
 8115032:	781b      	ldrb	r3, [r3, #0]
 8115034:	4619      	mov	r1, r3
 8115036:	4a46      	ldr	r2, [pc, #280]	@ (8115150 <etharp_output+0x200>)
 8115038:	460b      	mov	r3, r1
 811503a:	005b      	lsls	r3, r3, #1
 811503c:	440b      	add	r3, r1
 811503e:	00db      	lsls	r3, r3, #3
 8115040:	4413      	add	r3, r2
 8115042:	3314      	adds	r3, #20
 8115044:	781b      	ldrb	r3, [r3, #0]
 8115046:	2b01      	cmp	r3, #1
 8115048:	d925      	bls.n	8115096 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 811504a:	4b40      	ldr	r3, [pc, #256]	@ (811514c <etharp_output+0x1fc>)
 811504c:	781b      	ldrb	r3, [r3, #0]
 811504e:	4619      	mov	r1, r3
 8115050:	4a3f      	ldr	r2, [pc, #252]	@ (8115150 <etharp_output+0x200>)
 8115052:	460b      	mov	r3, r1
 8115054:	005b      	lsls	r3, r3, #1
 8115056:	440b      	add	r3, r1
 8115058:	00db      	lsls	r3, r3, #3
 811505a:	4413      	add	r3, r2
 811505c:	3308      	adds	r3, #8
 811505e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8115060:	68fa      	ldr	r2, [r7, #12]
 8115062:	429a      	cmp	r2, r3
 8115064:	d117      	bne.n	8115096 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8115066:	69bb      	ldr	r3, [r7, #24]
 8115068:	681a      	ldr	r2, [r3, #0]
 811506a:	4b38      	ldr	r3, [pc, #224]	@ (811514c <etharp_output+0x1fc>)
 811506c:	781b      	ldrb	r3, [r3, #0]
 811506e:	4618      	mov	r0, r3
 8115070:	4937      	ldr	r1, [pc, #220]	@ (8115150 <etharp_output+0x200>)
 8115072:	4603      	mov	r3, r0
 8115074:	005b      	lsls	r3, r3, #1
 8115076:	4403      	add	r3, r0
 8115078:	00db      	lsls	r3, r3, #3
 811507a:	440b      	add	r3, r1
 811507c:	3304      	adds	r3, #4
 811507e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8115080:	429a      	cmp	r2, r3
 8115082:	d108      	bne.n	8115096 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8115084:	4b31      	ldr	r3, [pc, #196]	@ (811514c <etharp_output+0x1fc>)
 8115086:	781b      	ldrb	r3, [r3, #0]
 8115088:	461a      	mov	r2, r3
 811508a:	68b9      	ldr	r1, [r7, #8]
 811508c:	68f8      	ldr	r0, [r7, #12]
 811508e:	f7ff fec5 	bl	8114e1c <etharp_output_to_arp_index>
 8115092:	4603      	mov	r3, r0
 8115094:	e04a      	b.n	811512c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8115096:	2300      	movs	r3, #0
 8115098:	75fb      	strb	r3, [r7, #23]
 811509a:	e031      	b.n	8115100 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 811509c:	7dfa      	ldrb	r2, [r7, #23]
 811509e:	492c      	ldr	r1, [pc, #176]	@ (8115150 <etharp_output+0x200>)
 81150a0:	4613      	mov	r3, r2
 81150a2:	005b      	lsls	r3, r3, #1
 81150a4:	4413      	add	r3, r2
 81150a6:	00db      	lsls	r3, r3, #3
 81150a8:	440b      	add	r3, r1
 81150aa:	3314      	adds	r3, #20
 81150ac:	781b      	ldrb	r3, [r3, #0]
 81150ae:	2b01      	cmp	r3, #1
 81150b0:	d923      	bls.n	81150fa <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 81150b2:	7dfa      	ldrb	r2, [r7, #23]
 81150b4:	4926      	ldr	r1, [pc, #152]	@ (8115150 <etharp_output+0x200>)
 81150b6:	4613      	mov	r3, r2
 81150b8:	005b      	lsls	r3, r3, #1
 81150ba:	4413      	add	r3, r2
 81150bc:	00db      	lsls	r3, r3, #3
 81150be:	440b      	add	r3, r1
 81150c0:	3308      	adds	r3, #8
 81150c2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 81150c4:	68fa      	ldr	r2, [r7, #12]
 81150c6:	429a      	cmp	r2, r3
 81150c8:	d117      	bne.n	81150fa <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 81150ca:	69bb      	ldr	r3, [r7, #24]
 81150cc:	6819      	ldr	r1, [r3, #0]
 81150ce:	7dfa      	ldrb	r2, [r7, #23]
 81150d0:	481f      	ldr	r0, [pc, #124]	@ (8115150 <etharp_output+0x200>)
 81150d2:	4613      	mov	r3, r2
 81150d4:	005b      	lsls	r3, r3, #1
 81150d6:	4413      	add	r3, r2
 81150d8:	00db      	lsls	r3, r3, #3
 81150da:	4403      	add	r3, r0
 81150dc:	3304      	adds	r3, #4
 81150de:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 81150e0:	4299      	cmp	r1, r3
 81150e2:	d10a      	bne.n	81150fa <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 81150e4:	4a19      	ldr	r2, [pc, #100]	@ (811514c <etharp_output+0x1fc>)
 81150e6:	7dfb      	ldrb	r3, [r7, #23]
 81150e8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 81150ea:	7dfb      	ldrb	r3, [r7, #23]
 81150ec:	461a      	mov	r2, r3
 81150ee:	68b9      	ldr	r1, [r7, #8]
 81150f0:	68f8      	ldr	r0, [r7, #12]
 81150f2:	f7ff fe93 	bl	8114e1c <etharp_output_to_arp_index>
 81150f6:	4603      	mov	r3, r0
 81150f8:	e018      	b.n	811512c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 81150fa:	7dfb      	ldrb	r3, [r7, #23]
 81150fc:	3301      	adds	r3, #1
 81150fe:	75fb      	strb	r3, [r7, #23]
 8115100:	7dfb      	ldrb	r3, [r7, #23]
 8115102:	2b09      	cmp	r3, #9
 8115104:	d9ca      	bls.n	811509c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8115106:	68ba      	ldr	r2, [r7, #8]
 8115108:	69b9      	ldr	r1, [r7, #24]
 811510a:	68f8      	ldr	r0, [r7, #12]
 811510c:	f000 f822 	bl	8115154 <etharp_query>
 8115110:	4603      	mov	r3, r0
 8115112:	e00b      	b.n	811512c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8115114:	68fb      	ldr	r3, [r7, #12]
 8115116:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 811511a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 811511e:	9300      	str	r3, [sp, #0]
 8115120:	69fb      	ldr	r3, [r7, #28]
 8115122:	68b9      	ldr	r1, [r7, #8]
 8115124:	68f8      	ldr	r0, [r7, #12]
 8115126:	f000 fbad 	bl	8115884 <ethernet_output>
 811512a:	4603      	mov	r3, r0
}
 811512c:	4618      	mov	r0, r3
 811512e:	3720      	adds	r7, #32
 8115130:	46bd      	mov	sp, r7
 8115132:	bd80      	pop	{r7, pc}
 8115134:	08123b64 	.word	0x08123b64
 8115138:	081240b0 	.word	0x081240b0
 811513c:	08123be8 	.word	0x08123be8
 8115140:	08123bdc 	.word	0x08123bdc
 8115144:	081240a0 	.word	0x081240a0
 8115148:	081289a8 	.word	0x081289a8
 811514c:	1000b2b0 	.word	0x1000b2b0
 8115150:	1000b1c0 	.word	0x1000b1c0

08115154 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8115154:	b580      	push	{r7, lr}
 8115156:	b090      	sub	sp, #64	@ 0x40
 8115158:	af02      	add	r7, sp, #8
 811515a:	60f8      	str	r0, [r7, #12]
 811515c:	60b9      	str	r1, [r7, #8]
 811515e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8115160:	68fb      	ldr	r3, [r7, #12]
 8115162:	3326      	adds	r3, #38	@ 0x26
 8115164:	61fb      	str	r3, [r7, #28]
  err_t result = ERR_MEM;
 8115166:	23ff      	movs	r3, #255	@ 0xff
 8115168:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  int is_new_entry = 0;
 811516c:	2300      	movs	r3, #0
 811516e:	633b      	str	r3, [r7, #48]	@ 0x30
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8115170:	68bb      	ldr	r3, [r7, #8]
 8115172:	681b      	ldr	r3, [r3, #0]
 8115174:	68f9      	ldr	r1, [r7, #12]
 8115176:	4618      	mov	r0, r3
 8115178:	f001 fb10 	bl	811679c <ip4_addr_isbroadcast_u32>
 811517c:	4603      	mov	r3, r0
 811517e:	2b00      	cmp	r3, #0
 8115180:	d10c      	bne.n	811519c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8115182:	68bb      	ldr	r3, [r7, #8]
 8115184:	681b      	ldr	r3, [r3, #0]
 8115186:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 811518a:	2be0      	cmp	r3, #224	@ 0xe0
 811518c:	d006      	beq.n	811519c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 811518e:	68bb      	ldr	r3, [r7, #8]
 8115190:	2b00      	cmp	r3, #0
 8115192:	d003      	beq.n	811519c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8115194:	68bb      	ldr	r3, [r7, #8]
 8115196:	681b      	ldr	r3, [r3, #0]
 8115198:	2b00      	cmp	r3, #0
 811519a:	d108      	bne.n	81151ae <etharp_query+0x5a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
 811519c:	4894      	ldr	r0, [pc, #592]	@ (81153f0 <etharp_query+0x29c>)
 811519e:	f00d f8d1 	bl	8122344 <puts>
 81151a2:	200d      	movs	r0, #13
 81151a4:	f00d f870 	bl	8122288 <putchar>
    return ERR_ARG;
 81151a8:	f06f 030f 	mvn.w	r3, #15
 81151ac:	e18c      	b.n	81154c8 <etharp_query+0x374>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 81151ae:	68fa      	ldr	r2, [r7, #12]
 81151b0:	2101      	movs	r1, #1
 81151b2:	68b8      	ldr	r0, [r7, #8]
 81151b4:	f7ff f9ec 	bl	8114590 <etharp_find_entry>
 81151b8:	4603      	mov	r3, r0
 81151ba:	837b      	strh	r3, [r7, #26]

  /* could not find or create entry? */
  if (i_err < 0) {
 81151bc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 81151c0:	2b00      	cmp	r3, #0
 81151c2:	da11      	bge.n	81151e8 <etharp_query+0x94>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
 81151c4:	488b      	ldr	r0, [pc, #556]	@ (81153f4 <etharp_query+0x2a0>)
 81151c6:	f00d f8bd 	bl	8122344 <puts>
 81151ca:	200d      	movs	r0, #13
 81151cc:	f00d f85c 	bl	8122288 <putchar>
    if (q) {
 81151d0:	687b      	ldr	r3, [r7, #4]
 81151d2:	2b00      	cmp	r3, #0
 81151d4:	d005      	beq.n	81151e2 <etharp_query+0x8e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
 81151d6:	4888      	ldr	r0, [pc, #544]	@ (81153f8 <etharp_query+0x2a4>)
 81151d8:	f00d f8b4 	bl	8122344 <puts>
 81151dc:	200d      	movs	r0, #13
 81151de:	f00d f853 	bl	8122288 <putchar>
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 81151e2:	8b7b      	ldrh	r3, [r7, #26]
 81151e4:	b25b      	sxtb	r3, r3
 81151e6:	e16f      	b.n	81154c8 <etharp_query+0x374>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 81151e8:	8b7b      	ldrh	r3, [r7, #26]
 81151ea:	2b7e      	cmp	r3, #126	@ 0x7e
 81151ec:	d906      	bls.n	81151fc <etharp_query+0xa8>
 81151ee:	4b83      	ldr	r3, [pc, #524]	@ (81153fc <etharp_query+0x2a8>)
 81151f0:	f240 32c1 	movw	r2, #961	@ 0x3c1
 81151f4:	4982      	ldr	r1, [pc, #520]	@ (8115400 <etharp_query+0x2ac>)
 81151f6:	4883      	ldr	r0, [pc, #524]	@ (8115404 <etharp_query+0x2b0>)
 81151f8:	f00d f834 	bl	8122264 <iprintf>
  i = (netif_addr_idx_t)i_err;
 81151fc:	8b7b      	ldrh	r3, [r7, #26]
 81151fe:	767b      	strb	r3, [r7, #25]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8115200:	7e7a      	ldrb	r2, [r7, #25]
 8115202:	4981      	ldr	r1, [pc, #516]	@ (8115408 <etharp_query+0x2b4>)
 8115204:	4613      	mov	r3, r2
 8115206:	005b      	lsls	r3, r3, #1
 8115208:	4413      	add	r3, r2
 811520a:	00db      	lsls	r3, r3, #3
 811520c:	440b      	add	r3, r1
 811520e:	3314      	adds	r3, #20
 8115210:	781b      	ldrb	r3, [r3, #0]
 8115212:	2b00      	cmp	r3, #0
 8115214:	d115      	bne.n	8115242 <etharp_query+0xee>
    is_new_entry = 1;
 8115216:	2301      	movs	r3, #1
 8115218:	633b      	str	r3, [r7, #48]	@ 0x30
    arp_table[i].state = ETHARP_STATE_PENDING;
 811521a:	7e7a      	ldrb	r2, [r7, #25]
 811521c:	497a      	ldr	r1, [pc, #488]	@ (8115408 <etharp_query+0x2b4>)
 811521e:	4613      	mov	r3, r2
 8115220:	005b      	lsls	r3, r3, #1
 8115222:	4413      	add	r3, r2
 8115224:	00db      	lsls	r3, r3, #3
 8115226:	440b      	add	r3, r1
 8115228:	3314      	adds	r3, #20
 811522a:	2201      	movs	r2, #1
 811522c:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 811522e:	7e7a      	ldrb	r2, [r7, #25]
 8115230:	4975      	ldr	r1, [pc, #468]	@ (8115408 <etharp_query+0x2b4>)
 8115232:	4613      	mov	r3, r2
 8115234:	005b      	lsls	r3, r3, #1
 8115236:	4413      	add	r3, r2
 8115238:	00db      	lsls	r3, r3, #3
 811523a:	440b      	add	r3, r1
 811523c:	3308      	adds	r3, #8
 811523e:	68fa      	ldr	r2, [r7, #12]
 8115240:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8115242:	7e7a      	ldrb	r2, [r7, #25]
 8115244:	4970      	ldr	r1, [pc, #448]	@ (8115408 <etharp_query+0x2b4>)
 8115246:	4613      	mov	r3, r2
 8115248:	005b      	lsls	r3, r3, #1
 811524a:	4413      	add	r3, r2
 811524c:	00db      	lsls	r3, r3, #3
 811524e:	440b      	add	r3, r1
 8115250:	3314      	adds	r3, #20
 8115252:	781b      	ldrb	r3, [r3, #0]
 8115254:	2b01      	cmp	r3, #1
 8115256:	d011      	beq.n	811527c <etharp_query+0x128>
 8115258:	7e7a      	ldrb	r2, [r7, #25]
 811525a:	496b      	ldr	r1, [pc, #428]	@ (8115408 <etharp_query+0x2b4>)
 811525c:	4613      	mov	r3, r2
 811525e:	005b      	lsls	r3, r3, #1
 8115260:	4413      	add	r3, r2
 8115262:	00db      	lsls	r3, r3, #3
 8115264:	440b      	add	r3, r1
 8115266:	3314      	adds	r3, #20
 8115268:	781b      	ldrb	r3, [r3, #0]
 811526a:	2b01      	cmp	r3, #1
 811526c:	d806      	bhi.n	811527c <etharp_query+0x128>
 811526e:	4b63      	ldr	r3, [pc, #396]	@ (81153fc <etharp_query+0x2a8>)
 8115270:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8115274:	4965      	ldr	r1, [pc, #404]	@ (811540c <etharp_query+0x2b8>)
 8115276:	4863      	ldr	r0, [pc, #396]	@ (8115404 <etharp_query+0x2b0>)
 8115278:	f00c fff4 	bl	8122264 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 811527c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811527e:	2b00      	cmp	r3, #0
 8115280:	d102      	bne.n	8115288 <etharp_query+0x134>
 8115282:	687b      	ldr	r3, [r7, #4]
 8115284:	2b00      	cmp	r3, #0
 8115286:	d10c      	bne.n	81152a2 <etharp_query+0x14e>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8115288:	68b9      	ldr	r1, [r7, #8]
 811528a:	68f8      	ldr	r0, [r7, #12]
 811528c:	f000 f9e4 	bl	8115658 <etharp_request>
 8115290:	4603      	mov	r3, r0
 8115292:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8115296:	687b      	ldr	r3, [r7, #4]
 8115298:	2b00      	cmp	r3, #0
 811529a:	d102      	bne.n	81152a2 <etharp_query+0x14e>
      return result;
 811529c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 81152a0:	e112      	b.n	81154c8 <etharp_query+0x374>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 81152a2:	687b      	ldr	r3, [r7, #4]
 81152a4:	2b00      	cmp	r3, #0
 81152a6:	d106      	bne.n	81152b6 <etharp_query+0x162>
 81152a8:	4b54      	ldr	r3, [pc, #336]	@ (81153fc <etharp_query+0x2a8>)
 81152aa:	f240 32e1 	movw	r2, #993	@ 0x3e1
 81152ae:	4958      	ldr	r1, [pc, #352]	@ (8115410 <etharp_query+0x2bc>)
 81152b0:	4854      	ldr	r0, [pc, #336]	@ (8115404 <etharp_query+0x2b0>)
 81152b2:	f00c ffd7 	bl	8122264 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 81152b6:	7e7a      	ldrb	r2, [r7, #25]
 81152b8:	4953      	ldr	r1, [pc, #332]	@ (8115408 <etharp_query+0x2b4>)
 81152ba:	4613      	mov	r3, r2
 81152bc:	005b      	lsls	r3, r3, #1
 81152be:	4413      	add	r3, r2
 81152c0:	00db      	lsls	r3, r3, #3
 81152c2:	440b      	add	r3, r1
 81152c4:	3314      	adds	r3, #20
 81152c6:	781b      	ldrb	r3, [r3, #0]
 81152c8:	2b01      	cmp	r3, #1
 81152ca:	d917      	bls.n	81152fc <etharp_query+0x1a8>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 81152cc:	4a51      	ldr	r2, [pc, #324]	@ (8115414 <etharp_query+0x2c0>)
 81152ce:	7e7b      	ldrb	r3, [r7, #25]
 81152d0:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 81152d2:	7e7a      	ldrb	r2, [r7, #25]
 81152d4:	4613      	mov	r3, r2
 81152d6:	005b      	lsls	r3, r3, #1
 81152d8:	4413      	add	r3, r2
 81152da:	00db      	lsls	r3, r3, #3
 81152dc:	3308      	adds	r3, #8
 81152de:	4a4a      	ldr	r2, [pc, #296]	@ (8115408 <etharp_query+0x2b4>)
 81152e0:	4413      	add	r3, r2
 81152e2:	3304      	adds	r3, #4
 81152e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 81152e8:	9200      	str	r2, [sp, #0]
 81152ea:	69fa      	ldr	r2, [r7, #28]
 81152ec:	6879      	ldr	r1, [r7, #4]
 81152ee:	68f8      	ldr	r0, [r7, #12]
 81152f0:	f000 fac8 	bl	8115884 <ethernet_output>
 81152f4:	4603      	mov	r3, r0
 81152f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 81152fa:	e0e3      	b.n	81154c4 <etharp_query+0x370>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 81152fc:	7e7a      	ldrb	r2, [r7, #25]
 81152fe:	4942      	ldr	r1, [pc, #264]	@ (8115408 <etharp_query+0x2b4>)
 8115300:	4613      	mov	r3, r2
 8115302:	005b      	lsls	r3, r3, #1
 8115304:	4413      	add	r3, r2
 8115306:	00db      	lsls	r3, r3, #3
 8115308:	440b      	add	r3, r1
 811530a:	3314      	adds	r3, #20
 811530c:	781b      	ldrb	r3, [r3, #0]
 811530e:	2b01      	cmp	r3, #1
 8115310:	f040 80d8 	bne.w	81154c4 <etharp_query+0x370>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8115314:	2300      	movs	r3, #0
 8115316:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8115318:	687b      	ldr	r3, [r7, #4]
 811531a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (p) {
 811531c:	e01c      	b.n	8115358 <etharp_query+0x204>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 811531e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115320:	895a      	ldrh	r2, [r3, #10]
 8115322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115324:	891b      	ldrh	r3, [r3, #8]
 8115326:	429a      	cmp	r2, r3
 8115328:	d10a      	bne.n	8115340 <etharp_query+0x1ec>
 811532a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811532c:	681b      	ldr	r3, [r3, #0]
 811532e:	2b00      	cmp	r3, #0
 8115330:	d006      	beq.n	8115340 <etharp_query+0x1ec>
 8115332:	4b32      	ldr	r3, [pc, #200]	@ (81153fc <etharp_query+0x2a8>)
 8115334:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8115338:	4937      	ldr	r1, [pc, #220]	@ (8115418 <etharp_query+0x2c4>)
 811533a:	4832      	ldr	r0, [pc, #200]	@ (8115404 <etharp_query+0x2b0>)
 811533c:	f00c ff92 	bl	8122264 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8115340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115342:	7b1b      	ldrb	r3, [r3, #12]
 8115344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8115348:	2b00      	cmp	r3, #0
 811534a:	d002      	beq.n	8115352 <etharp_query+0x1fe>
        copy_needed = 1;
 811534c:	2301      	movs	r3, #1
 811534e:	62bb      	str	r3, [r7, #40]	@ 0x28
        break;
 8115350:	e005      	b.n	811535e <etharp_query+0x20a>
      }
      p = p->next;
 8115352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115354:	681b      	ldr	r3, [r3, #0]
 8115356:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (p) {
 8115358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811535a:	2b00      	cmp	r3, #0
 811535c:	d1df      	bne.n	811531e <etharp_query+0x1ca>
    }
    if (copy_needed) {
 811535e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115360:	2b00      	cmp	r3, #0
 8115362:	d007      	beq.n	8115374 <etharp_query+0x220>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8115364:	687a      	ldr	r2, [r7, #4]
 8115366:	f44f 7120 	mov.w	r1, #640	@ 0x280
 811536a:	200e      	movs	r0, #14
 811536c:	f004 f97e 	bl	811966c <pbuf_clone>
 8115370:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8115372:	e004      	b.n	811537e <etharp_query+0x22a>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8115374:	687b      	ldr	r3, [r7, #4]
 8115376:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pbuf_ref(p);
 8115378:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811537a:	f003 ffa5 	bl	81192c8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 811537e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115380:	2b00      	cmp	r3, #0
 8115382:	f000 8095 	beq.w	81154b0 <etharp_query+0x35c>
      /* queue packet ... */
#if ARP_QUEUEING
      struct etharp_q_entry *new_entry;
      /* allocate a new arp queue entry */
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
 8115386:	2009      	movs	r0, #9
 8115388:	f002 fec0 	bl	811810c <memp_malloc>
 811538c:	6178      	str	r0, [r7, #20]
      if (new_entry != NULL) {
 811538e:	697b      	ldr	r3, [r7, #20]
 8115390:	2b00      	cmp	r3, #0
 8115392:	d07f      	beq.n	8115494 <etharp_query+0x340>
        unsigned int qlen = 0;
 8115394:	2300      	movs	r3, #0
 8115396:	627b      	str	r3, [r7, #36]	@ 0x24
        new_entry->next = 0;
 8115398:	697b      	ldr	r3, [r7, #20]
 811539a:	2200      	movs	r2, #0
 811539c:	601a      	str	r2, [r3, #0]
        new_entry->p = p;
 811539e:	697b      	ldr	r3, [r7, #20]
 81153a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81153a2:	605a      	str	r2, [r3, #4]
        if (arp_table[i].q != NULL) {
 81153a4:	7e7a      	ldrb	r2, [r7, #25]
 81153a6:	4918      	ldr	r1, [pc, #96]	@ (8115408 <etharp_query+0x2b4>)
 81153a8:	4613      	mov	r3, r2
 81153aa:	005b      	lsls	r3, r3, #1
 81153ac:	4413      	add	r3, r2
 81153ae:	00db      	lsls	r3, r3, #3
 81153b0:	440b      	add	r3, r1
 81153b2:	681b      	ldr	r3, [r3, #0]
 81153b4:	2b00      	cmp	r3, #0
 81153b6:	d031      	beq.n	811541c <etharp_query+0x2c8>
          /* queue was already existent, append the new entry to the end */
          struct etharp_q_entry *r;
          r = arp_table[i].q;
 81153b8:	7e7a      	ldrb	r2, [r7, #25]
 81153ba:	4913      	ldr	r1, [pc, #76]	@ (8115408 <etharp_query+0x2b4>)
 81153bc:	4613      	mov	r3, r2
 81153be:	005b      	lsls	r3, r3, #1
 81153c0:	4413      	add	r3, r2
 81153c2:	00db      	lsls	r3, r3, #3
 81153c4:	440b      	add	r3, r1
 81153c6:	681b      	ldr	r3, [r3, #0]
 81153c8:	623b      	str	r3, [r7, #32]
          qlen++;
 81153ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81153cc:	3301      	adds	r3, #1
 81153ce:	627b      	str	r3, [r7, #36]	@ 0x24
          while (r->next != NULL) {
 81153d0:	e005      	b.n	81153de <etharp_query+0x28a>
            r = r->next;
 81153d2:	6a3b      	ldr	r3, [r7, #32]
 81153d4:	681b      	ldr	r3, [r3, #0]
 81153d6:	623b      	str	r3, [r7, #32]
            qlen++;
 81153d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81153da:	3301      	adds	r3, #1
 81153dc:	627b      	str	r3, [r7, #36]	@ 0x24
          while (r->next != NULL) {
 81153de:	6a3b      	ldr	r3, [r7, #32]
 81153e0:	681b      	ldr	r3, [r3, #0]
 81153e2:	2b00      	cmp	r3, #0
 81153e4:	d1f5      	bne.n	81153d2 <etharp_query+0x27e>
          }
          r->next = new_entry;
 81153e6:	6a3b      	ldr	r3, [r7, #32]
 81153e8:	697a      	ldr	r2, [r7, #20]
 81153ea:	601a      	str	r2, [r3, #0]
 81153ec:	e01f      	b.n	811542e <etharp_query+0x2da>
 81153ee:	bf00      	nop
 81153f0:	08124240 	.word	0x08124240
 81153f4:	08124280 	.word	0x08124280
 81153f8:	081242ac 	.word	0x081242ac
 81153fc:	08123b64 	.word	0x08123b64
 8115400:	081242cc 	.word	0x081242cc
 8115404:	08123be8 	.word	0x08123be8
 8115408:	1000b1c0 	.word	0x1000b1c0
 811540c:	081242dc 	.word	0x081242dc
 8115410:	08123bdc 	.word	0x08123bdc
 8115414:	1000b2b0 	.word	0x1000b2b0
 8115418:	08124304 	.word	0x08124304
        } else {
          /* queue did not exist, first item in queue */
          arp_table[i].q = new_entry;
 811541c:	7e7a      	ldrb	r2, [r7, #25]
 811541e:	492c      	ldr	r1, [pc, #176]	@ (81154d0 <etharp_query+0x37c>)
 8115420:	4613      	mov	r3, r2
 8115422:	005b      	lsls	r3, r3, #1
 8115424:	4413      	add	r3, r2
 8115426:	00db      	lsls	r3, r3, #3
 8115428:	440b      	add	r3, r1
 811542a:	697a      	ldr	r2, [r7, #20]
 811542c:	601a      	str	r2, [r3, #0]
        }
#if ARP_QUEUE_LEN
        if (qlen >= ARP_QUEUE_LEN) {
 811542e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115430:	2b02      	cmp	r3, #2
 8115432:	d922      	bls.n	811547a <etharp_query+0x326>
          struct etharp_q_entry *old;
          old = arp_table[i].q;
 8115434:	7e7a      	ldrb	r2, [r7, #25]
 8115436:	4926      	ldr	r1, [pc, #152]	@ (81154d0 <etharp_query+0x37c>)
 8115438:	4613      	mov	r3, r2
 811543a:	005b      	lsls	r3, r3, #1
 811543c:	4413      	add	r3, r2
 811543e:	00db      	lsls	r3, r3, #3
 8115440:	440b      	add	r3, r1
 8115442:	681b      	ldr	r3, [r3, #0]
 8115444:	613b      	str	r3, [r7, #16]
          arp_table[i].q = arp_table[i].q->next;
 8115446:	7e7a      	ldrb	r2, [r7, #25]
 8115448:	4921      	ldr	r1, [pc, #132]	@ (81154d0 <etharp_query+0x37c>)
 811544a:	4613      	mov	r3, r2
 811544c:	005b      	lsls	r3, r3, #1
 811544e:	4413      	add	r3, r2
 8115450:	00db      	lsls	r3, r3, #3
 8115452:	440b      	add	r3, r1
 8115454:	681b      	ldr	r3, [r3, #0]
 8115456:	7e7a      	ldrb	r2, [r7, #25]
 8115458:	6819      	ldr	r1, [r3, #0]
 811545a:	481d      	ldr	r0, [pc, #116]	@ (81154d0 <etharp_query+0x37c>)
 811545c:	4613      	mov	r3, r2
 811545e:	005b      	lsls	r3, r3, #1
 8115460:	4413      	add	r3, r2
 8115462:	00db      	lsls	r3, r3, #3
 8115464:	4403      	add	r3, r0
 8115466:	6019      	str	r1, [r3, #0]
          pbuf_free(old->p);
 8115468:	693b      	ldr	r3, [r7, #16]
 811546a:	685b      	ldr	r3, [r3, #4]
 811546c:	4618      	mov	r0, r3
 811546e:	f003 fe85 	bl	811917c <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
 8115472:	6939      	ldr	r1, [r7, #16]
 8115474:	2009      	movs	r0, #9
 8115476:	f002 febf 	bl	81181f8 <memp_free>
        }
#endif
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, i));
 811547a:	7e7b      	ldrb	r3, [r7, #25]
 811547c:	461a      	mov	r2, r3
 811547e:	6879      	ldr	r1, [r7, #4]
 8115480:	4814      	ldr	r0, [pc, #80]	@ (81154d4 <etharp_query+0x380>)
 8115482:	f00c feef 	bl	8122264 <iprintf>
 8115486:	200d      	movs	r0, #13
 8115488:	f00c fefe 	bl	8122288 <putchar>
        result = ERR_OK;
 811548c:	2300      	movs	r3, #0
 811548e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8115492:	e017      	b.n	81154c4 <etharp_query+0x370>
      } else {
        /* the pool MEMP_ARP_QUEUE is empty */
        pbuf_free(p);
 8115494:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8115496:	f003 fe71 	bl	811917c <pbuf_free>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
 811549a:	6879      	ldr	r1, [r7, #4]
 811549c:	480e      	ldr	r0, [pc, #56]	@ (81154d8 <etharp_query+0x384>)
 811549e:	f00c fee1 	bl	8122264 <iprintf>
 81154a2:	200d      	movs	r0, #13
 81154a4:	f00c fef0 	bl	8122288 <putchar>
        result = ERR_MEM;
 81154a8:	23ff      	movs	r3, #255	@ 0xff
 81154aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 81154ae:	e009      	b.n	81154c4 <etharp_query+0x370>
      result = ERR_OK;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
 81154b0:	6879      	ldr	r1, [r7, #4]
 81154b2:	4809      	ldr	r0, [pc, #36]	@ (81154d8 <etharp_query+0x384>)
 81154b4:	f00c fed6 	bl	8122264 <iprintf>
 81154b8:	200d      	movs	r0, #13
 81154ba:	f00c fee5 	bl	8122288 <putchar>
      result = ERR_MEM;
 81154be:	23ff      	movs	r3, #255	@ 0xff
 81154c0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }
  }
  return result;
 81154c4:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 81154c8:	4618      	mov	r0, r3
 81154ca:	3738      	adds	r7, #56	@ 0x38
 81154cc:	46bd      	mov	sp, r7
 81154ce:	bd80      	pop	{r7, pc}
 81154d0:	1000b1c0 	.word	0x1000b1c0
 81154d4:	08124320 	.word	0x08124320
 81154d8:	08124354 	.word	0x08124354

081154dc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 81154dc:	b580      	push	{r7, lr}
 81154de:	b08a      	sub	sp, #40	@ 0x28
 81154e0:	af02      	add	r7, sp, #8
 81154e2:	60f8      	str	r0, [r7, #12]
 81154e4:	60b9      	str	r1, [r7, #8]
 81154e6:	607a      	str	r2, [r7, #4]
 81154e8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 81154ea:	2300      	movs	r3, #0
 81154ec:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 81154ee:	68fb      	ldr	r3, [r7, #12]
 81154f0:	2b00      	cmp	r3, #0
 81154f2:	d106      	bne.n	8115502 <etharp_raw+0x26>
 81154f4:	4b40      	ldr	r3, [pc, #256]	@ (81155f8 <etharp_raw+0x11c>)
 81154f6:	f240 4257 	movw	r2, #1111	@ 0x457
 81154fa:	4940      	ldr	r1, [pc, #256]	@ (81155fc <etharp_raw+0x120>)
 81154fc:	4840      	ldr	r0, [pc, #256]	@ (8115600 <etharp_raw+0x124>)
 81154fe:	f00c feb1 	bl	8122264 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8115502:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8115506:	211c      	movs	r1, #28
 8115508:	200e      	movs	r0, #14
 811550a:	f003 fb53 	bl	8118bb4 <pbuf_alloc>
 811550e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8115510:	69bb      	ldr	r3, [r7, #24]
 8115512:	2b00      	cmp	r3, #0
 8115514:	d108      	bne.n	8115528 <etharp_raw+0x4c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 8115516:	483b      	ldr	r0, [pc, #236]	@ (8115604 <etharp_raw+0x128>)
 8115518:	f00c ff14 	bl	8122344 <puts>
 811551c:	200d      	movs	r0, #13
 811551e:	f00c feb3 	bl	8122288 <putchar>
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8115522:	f04f 33ff 	mov.w	r3, #4294967295
 8115526:	e063      	b.n	81155f0 <etharp_raw+0x114>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8115528:	69bb      	ldr	r3, [r7, #24]
 811552a:	895b      	ldrh	r3, [r3, #10]
 811552c:	2b1b      	cmp	r3, #27
 811552e:	d806      	bhi.n	811553e <etharp_raw+0x62>
 8115530:	4b31      	ldr	r3, [pc, #196]	@ (81155f8 <etharp_raw+0x11c>)
 8115532:	f240 4262 	movw	r2, #1122	@ 0x462
 8115536:	4934      	ldr	r1, [pc, #208]	@ (8115608 <etharp_raw+0x12c>)
 8115538:	4831      	ldr	r0, [pc, #196]	@ (8115600 <etharp_raw+0x124>)
 811553a:	f00c fe93 	bl	8122264 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 811553e:	69bb      	ldr	r3, [r7, #24]
 8115540:	685b      	ldr	r3, [r3, #4]
 8115542:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
 8115544:	4831      	ldr	r0, [pc, #196]	@ (811560c <etharp_raw+0x130>)
 8115546:	f00c fefd 	bl	8122344 <puts>
 811554a:	200d      	movs	r0, #13
 811554c:	f00c fe9c 	bl	8122288 <putchar>
  hdr->opcode = lwip_htons(opcode);
 8115550:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8115552:	4618      	mov	r0, r3
 8115554:	f7fe fe72 	bl	811423c <lwip_htons>
 8115558:	4603      	mov	r3, r0
 811555a:	461a      	mov	r2, r3
 811555c:	697b      	ldr	r3, [r7, #20]
 811555e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8115560:	68fb      	ldr	r3, [r7, #12]
 8115562:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8115566:	2b06      	cmp	r3, #6
 8115568:	d006      	beq.n	8115578 <etharp_raw+0x9c>
 811556a:	4b23      	ldr	r3, [pc, #140]	@ (81155f8 <etharp_raw+0x11c>)
 811556c:	f240 4269 	movw	r2, #1129	@ 0x469
 8115570:	4927      	ldr	r1, [pc, #156]	@ (8115610 <etharp_raw+0x134>)
 8115572:	4823      	ldr	r0, [pc, #140]	@ (8115600 <etharp_raw+0x124>)
 8115574:	f00c fe76 	bl	8122264 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8115578:	697b      	ldr	r3, [r7, #20]
 811557a:	3308      	adds	r3, #8
 811557c:	2206      	movs	r2, #6
 811557e:	6839      	ldr	r1, [r7, #0]
 8115580:	4618      	mov	r0, r3
 8115582:	f00d f964 	bl	812284e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8115586:	697b      	ldr	r3, [r7, #20]
 8115588:	3312      	adds	r3, #18
 811558a:	2206      	movs	r2, #6
 811558c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 811558e:	4618      	mov	r0, r3
 8115590:	f00d f95d 	bl	812284e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8115594:	697b      	ldr	r3, [r7, #20]
 8115596:	330e      	adds	r3, #14
 8115598:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 811559a:	6812      	ldr	r2, [r2, #0]
 811559c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 811559e:	697b      	ldr	r3, [r7, #20]
 81155a0:	3318      	adds	r3, #24
 81155a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81155a4:	6812      	ldr	r2, [r2, #0]
 81155a6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 81155a8:	697b      	ldr	r3, [r7, #20]
 81155aa:	2200      	movs	r2, #0
 81155ac:	701a      	strb	r2, [r3, #0]
 81155ae:	2200      	movs	r2, #0
 81155b0:	f042 0201 	orr.w	r2, r2, #1
 81155b4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 81155b6:	697b      	ldr	r3, [r7, #20]
 81155b8:	2200      	movs	r2, #0
 81155ba:	f042 0208 	orr.w	r2, r2, #8
 81155be:	709a      	strb	r2, [r3, #2]
 81155c0:	2200      	movs	r2, #0
 81155c2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 81155c4:	697b      	ldr	r3, [r7, #20]
 81155c6:	2206      	movs	r2, #6
 81155c8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 81155ca:	697b      	ldr	r3, [r7, #20]
 81155cc:	2204      	movs	r2, #4
 81155ce:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 81155d0:	f640 0306 	movw	r3, #2054	@ 0x806
 81155d4:	9300      	str	r3, [sp, #0]
 81155d6:	687b      	ldr	r3, [r7, #4]
 81155d8:	68ba      	ldr	r2, [r7, #8]
 81155da:	69b9      	ldr	r1, [r7, #24]
 81155dc:	68f8      	ldr	r0, [r7, #12]
 81155de:	f000 f951 	bl	8115884 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 81155e2:	69b8      	ldr	r0, [r7, #24]
 81155e4:	f003 fdca 	bl	811917c <pbuf_free>
  p = NULL;
 81155e8:	2300      	movs	r3, #0
 81155ea:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 81155ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 81155f0:	4618      	mov	r0, r3
 81155f2:	3720      	adds	r7, #32
 81155f4:	46bd      	mov	sp, r7
 81155f6:	bd80      	pop	{r7, pc}
 81155f8:	08123b64 	.word	0x08123b64
 81155fc:	081240b0 	.word	0x081240b0
 8115600:	08123be8 	.word	0x08123be8
 8115604:	081243a0 	.word	0x081243a0
 8115608:	081243d8 	.word	0x081243d8
 811560c:	0812440c 	.word	0x0812440c
 8115610:	08124430 	.word	0x08124430

08115614 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8115614:	b580      	push	{r7, lr}
 8115616:	b088      	sub	sp, #32
 8115618:	af04      	add	r7, sp, #16
 811561a:	60f8      	str	r0, [r7, #12]
 811561c:	60b9      	str	r1, [r7, #8]
 811561e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8115620:	68fb      	ldr	r3, [r7, #12]
 8115622:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8115626:	68fb      	ldr	r3, [r7, #12]
 8115628:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 811562c:	68fb      	ldr	r3, [r7, #12]
 811562e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8115630:	2201      	movs	r2, #1
 8115632:	9203      	str	r2, [sp, #12]
 8115634:	68ba      	ldr	r2, [r7, #8]
 8115636:	9202      	str	r2, [sp, #8]
 8115638:	4a06      	ldr	r2, [pc, #24]	@ (8115654 <etharp_request_dst+0x40>)
 811563a:	9201      	str	r2, [sp, #4]
 811563c:	9300      	str	r3, [sp, #0]
 811563e:	4603      	mov	r3, r0
 8115640:	687a      	ldr	r2, [r7, #4]
 8115642:	68f8      	ldr	r0, [r7, #12]
 8115644:	f7ff ff4a 	bl	81154dc <etharp_raw>
 8115648:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 811564a:	4618      	mov	r0, r3
 811564c:	3710      	adds	r7, #16
 811564e:	46bd      	mov	sp, r7
 8115650:	bd80      	pop	{r7, pc}
 8115652:	bf00      	nop
 8115654:	081289b0 	.word	0x081289b0

08115658 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8115658:	b580      	push	{r7, lr}
 811565a:	b082      	sub	sp, #8
 811565c:	af00      	add	r7, sp, #0
 811565e:	6078      	str	r0, [r7, #4]
 8115660:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
 8115662:	4808      	ldr	r0, [pc, #32]	@ (8115684 <etharp_request+0x2c>)
 8115664:	f00c fe6e 	bl	8122344 <puts>
 8115668:	200d      	movs	r0, #13
 811566a:	f00c fe0d 	bl	8122288 <putchar>
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 811566e:	4a06      	ldr	r2, [pc, #24]	@ (8115688 <etharp_request+0x30>)
 8115670:	6839      	ldr	r1, [r7, #0]
 8115672:	6878      	ldr	r0, [r7, #4]
 8115674:	f7ff ffce 	bl	8115614 <etharp_request_dst>
 8115678:	4603      	mov	r3, r0
}
 811567a:	4618      	mov	r0, r3
 811567c:	3708      	adds	r7, #8
 811567e:	46bd      	mov	sp, r7
 8115680:	bd80      	pop	{r7, pc}
 8115682:	bf00      	nop
 8115684:	08124474 	.word	0x08124474
 8115688:	081289a8 	.word	0x081289a8

0811568c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 811568c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8115690:	b096      	sub	sp, #88	@ 0x58
 8115692:	af0a      	add	r7, sp, #40	@ 0x28
 8115694:	61f8      	str	r0, [r7, #28]
 8115696:	61b9      	str	r1, [r7, #24]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8115698:	230e      	movs	r3, #14
 811569a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 811569c:	69fb      	ldr	r3, [r7, #28]
 811569e:	895b      	ldrh	r3, [r3, #10]
 81156a0:	2b0e      	cmp	r3, #14
 81156a2:	f240 80d7 	bls.w	8115854 <ethernet_input+0x1c8>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 81156a6:	69fb      	ldr	r3, [r7, #28]
 81156a8:	7bdb      	ldrb	r3, [r3, #15]
 81156aa:	2b00      	cmp	r3, #0
 81156ac:	d106      	bne.n	81156bc <ethernet_input+0x30>
    p->if_idx = netif_get_index(netif);
 81156ae:	69bb      	ldr	r3, [r7, #24]
 81156b0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 81156b4:	3301      	adds	r3, #1
 81156b6:	b2da      	uxtb	r2, r3
 81156b8:	69fb      	ldr	r3, [r7, #28]
 81156ba:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 81156bc:	69fb      	ldr	r3, [r7, #28]
 81156be:	685b      	ldr	r3, [r3, #4]
 81156c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
 81156c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81156c4:	781b      	ldrb	r3, [r3, #0]
 81156c6:	4698      	mov	r8, r3
 81156c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81156ca:	785b      	ldrb	r3, [r3, #1]
 81156cc:	4699      	mov	r9, r3
 81156ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81156d0:	789b      	ldrb	r3, [r3, #2]
 81156d2:	469a      	mov	sl, r3
 81156d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81156d6:	78db      	ldrb	r3, [r3, #3]
 81156d8:	461c      	mov	r4, r3
 81156da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81156dc:	791b      	ldrb	r3, [r3, #4]
 81156de:	461d      	mov	r5, r3
 81156e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81156e2:	795b      	ldrb	r3, [r3, #5]
 81156e4:	461e      	mov	r6, r3
 81156e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81156e8:	799b      	ldrb	r3, [r3, #6]
 81156ea:	617b      	str	r3, [r7, #20]
 81156ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81156ee:	79db      	ldrb	r3, [r3, #7]
 81156f0:	613b      	str	r3, [r7, #16]
 81156f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81156f4:	7a1b      	ldrb	r3, [r3, #8]
 81156f6:	60fb      	str	r3, [r7, #12]
 81156f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81156fa:	7a5b      	ldrb	r3, [r3, #9]
 81156fc:	60bb      	str	r3, [r7, #8]
 81156fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115700:	7a9b      	ldrb	r3, [r3, #10]
 8115702:	607b      	str	r3, [r7, #4]
 8115704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115706:	7adb      	ldrb	r3, [r3, #11]
 8115708:	603b      	str	r3, [r7, #0]
 811570a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811570c:	899b      	ldrh	r3, [r3, #12]
 811570e:	b29b      	uxth	r3, r3
 8115710:	4618      	mov	r0, r3
 8115712:	f7fe fd93 	bl	811423c <lwip_htons>
 8115716:	4603      	mov	r3, r0
 8115718:	9309      	str	r3, [sp, #36]	@ 0x24
 811571a:	683a      	ldr	r2, [r7, #0]
 811571c:	9208      	str	r2, [sp, #32]
 811571e:	687a      	ldr	r2, [r7, #4]
 8115720:	9207      	str	r2, [sp, #28]
 8115722:	68ba      	ldr	r2, [r7, #8]
 8115724:	9206      	str	r2, [sp, #24]
 8115726:	68fa      	ldr	r2, [r7, #12]
 8115728:	9205      	str	r2, [sp, #20]
 811572a:	693a      	ldr	r2, [r7, #16]
 811572c:	9204      	str	r2, [sp, #16]
 811572e:	697b      	ldr	r3, [r7, #20]
 8115730:	9303      	str	r3, [sp, #12]
 8115732:	9602      	str	r6, [sp, #8]
 8115734:	9501      	str	r5, [sp, #4]
 8115736:	9400      	str	r4, [sp, #0]
 8115738:	4653      	mov	r3, sl
 811573a:	464a      	mov	r2, r9
 811573c:	4641      	mov	r1, r8
 811573e:	484c      	ldr	r0, [pc, #304]	@ (8115870 <ethernet_input+0x1e4>)
 8115740:	f00c fd90 	bl	8122264 <iprintf>
 8115744:	200d      	movs	r0, #13
 8115746:	f00c fd9f 	bl	8122288 <putchar>
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 811574a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811574c:	7b1a      	ldrb	r2, [r3, #12]
 811574e:	7b5b      	ldrb	r3, [r3, #13]
 8115750:	021b      	lsls	r3, r3, #8
 8115752:	4313      	orrs	r3, r2
 8115754:	84fb      	strh	r3, [r7, #38]	@ 0x26

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8115756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115758:	781b      	ldrb	r3, [r3, #0]
 811575a:	f003 0301 	and.w	r3, r3, #1
 811575e:	2b00      	cmp	r3, #0
 8115760:	d023      	beq.n	81157aa <ethernet_input+0x11e>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8115762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115764:	781b      	ldrb	r3, [r3, #0]
 8115766:	2b01      	cmp	r3, #1
 8115768:	d10f      	bne.n	811578a <ethernet_input+0xfe>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 811576a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811576c:	785b      	ldrb	r3, [r3, #1]
 811576e:	2b00      	cmp	r3, #0
 8115770:	d11b      	bne.n	81157aa <ethernet_input+0x11e>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8115772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115774:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8115776:	2b5e      	cmp	r3, #94	@ 0x5e
 8115778:	d117      	bne.n	81157aa <ethernet_input+0x11e>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 811577a:	69fb      	ldr	r3, [r7, #28]
 811577c:	7b5b      	ldrb	r3, [r3, #13]
 811577e:	f043 0310 	orr.w	r3, r3, #16
 8115782:	b2da      	uxtb	r2, r3
 8115784:	69fb      	ldr	r3, [r7, #28]
 8115786:	735a      	strb	r2, [r3, #13]
 8115788:	e00f      	b.n	81157aa <ethernet_input+0x11e>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 811578a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811578c:	2206      	movs	r2, #6
 811578e:	4939      	ldr	r1, [pc, #228]	@ (8115874 <ethernet_input+0x1e8>)
 8115790:	4618      	mov	r0, r3
 8115792:	f00c fee3 	bl	812255c <memcmp>
 8115796:	4603      	mov	r3, r0
 8115798:	2b00      	cmp	r3, #0
 811579a:	d106      	bne.n	81157aa <ethernet_input+0x11e>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 811579c:	69fb      	ldr	r3, [r7, #28]
 811579e:	7b5b      	ldrb	r3, [r3, #13]
 81157a0:	f043 0308 	orr.w	r3, r3, #8
 81157a4:	b2da      	uxtb	r2, r3
 81157a6:	69fb      	ldr	r3, [r7, #28]
 81157a8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 81157aa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 81157ac:	2b08      	cmp	r3, #8
 81157ae:	d003      	beq.n	81157b8 <ethernet_input+0x12c>
 81157b0:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 81157b4:	d026      	beq.n	8115804 <ethernet_input+0x178>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 81157b6:	e052      	b.n	811585e <ethernet_input+0x1d2>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 81157b8:	69bb      	ldr	r3, [r7, #24]
 81157ba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 81157be:	f003 0308 	and.w	r3, r3, #8
 81157c2:	2b00      	cmp	r3, #0
 81157c4:	d048      	beq.n	8115858 <ethernet_input+0x1cc>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 81157c6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 81157c8:	4619      	mov	r1, r3
 81157ca:	69f8      	ldr	r0, [r7, #28]
 81157cc:	f003 fc50 	bl	8119070 <pbuf_remove_header>
 81157d0:	4603      	mov	r3, r0
 81157d2:	2b00      	cmp	r3, #0
 81157d4:	d011      	beq.n	81157fa <ethernet_input+0x16e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 81157d6:	69fb      	ldr	r3, [r7, #28]
 81157d8:	891b      	ldrh	r3, [r3, #8]
 81157da:	4619      	mov	r1, r3
 81157dc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 81157de:	461a      	mov	r2, r3
 81157e0:	4825      	ldr	r0, [pc, #148]	@ (8115878 <ethernet_input+0x1ec>)
 81157e2:	f00c fd3f 	bl	8122264 <iprintf>
 81157e6:	200d      	movs	r0, #13
 81157e8:	f00c fd4e 	bl	8122288 <putchar>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
 81157ec:	4823      	ldr	r0, [pc, #140]	@ (811587c <ethernet_input+0x1f0>)
 81157ee:	f00c fd39 	bl	8122264 <iprintf>
 81157f2:	200d      	movs	r0, #13
 81157f4:	f00c fd48 	bl	8122288 <putchar>
        goto free_and_return;
 81157f8:	e031      	b.n	811585e <ethernet_input+0x1d2>
        ip4_input(p, netif);
 81157fa:	69b9      	ldr	r1, [r7, #24]
 81157fc:	69f8      	ldr	r0, [r7, #28]
 81157fe:	f000 fc0d 	bl	811601c <ip4_input>
      break;
 8115802:	e025      	b.n	8115850 <ethernet_input+0x1c4>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8115804:	69bb      	ldr	r3, [r7, #24]
 8115806:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811580a:	f003 0308 	and.w	r3, r3, #8
 811580e:	2b00      	cmp	r3, #0
 8115810:	d024      	beq.n	811585c <ethernet_input+0x1d0>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8115812:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8115814:	4619      	mov	r1, r3
 8115816:	69f8      	ldr	r0, [r7, #28]
 8115818:	f003 fc2a 	bl	8119070 <pbuf_remove_header>
 811581c:	4603      	mov	r3, r0
 811581e:	2b00      	cmp	r3, #0
 8115820:	d011      	beq.n	8115846 <ethernet_input+0x1ba>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 8115822:	69fb      	ldr	r3, [r7, #28]
 8115824:	891b      	ldrh	r3, [r3, #8]
 8115826:	4619      	mov	r1, r3
 8115828:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 811582a:	461a      	mov	r2, r3
 811582c:	4814      	ldr	r0, [pc, #80]	@ (8115880 <ethernet_input+0x1f4>)
 811582e:	f00c fd19 	bl	8122264 <iprintf>
 8115832:	200d      	movs	r0, #13
 8115834:	f00c fd28 	bl	8122288 <putchar>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
 8115838:	4810      	ldr	r0, [pc, #64]	@ (811587c <ethernet_input+0x1f0>)
 811583a:	f00c fd13 	bl	8122264 <iprintf>
 811583e:	200d      	movs	r0, #13
 8115840:	f00c fd22 	bl	8122288 <putchar>
        goto free_and_return;
 8115844:	e00b      	b.n	811585e <ethernet_input+0x1d2>
        etharp_input(p, netif);
 8115846:	69b9      	ldr	r1, [r7, #24]
 8115848:	69f8      	ldr	r0, [r7, #28]
 811584a:	f7ff fa11 	bl	8114c70 <etharp_input>
      break;
 811584e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8115850:	2300      	movs	r3, #0
 8115852:	e008      	b.n	8115866 <ethernet_input+0x1da>
    goto free_and_return;
 8115854:	bf00      	nop
 8115856:	e002      	b.n	811585e <ethernet_input+0x1d2>
        goto free_and_return;
 8115858:	bf00      	nop
 811585a:	e000      	b.n	811585e <ethernet_input+0x1d2>
        goto free_and_return;
 811585c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 811585e:	69f8      	ldr	r0, [r7, #28]
 8115860:	f003 fc8c 	bl	811917c <pbuf_free>
  return ERR_OK;
 8115864:	2300      	movs	r3, #0
}
 8115866:	4618      	mov	r0, r3
 8115868:	3730      	adds	r7, #48	@ 0x30
 811586a:	46bd      	mov	sp, r7
 811586c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8115870:	0812449c 	.word	0x0812449c
 8115874:	081289a8 	.word	0x081289a8
 8115878:	08124518 	.word	0x08124518
 811587c:	08124554 	.word	0x08124554
 8115880:	08124578 	.word	0x08124578

08115884 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8115884:	b580      	push	{r7, lr}
 8115886:	b086      	sub	sp, #24
 8115888:	af00      	add	r7, sp, #0
 811588a:	60f8      	str	r0, [r7, #12]
 811588c:	60b9      	str	r1, [r7, #8]
 811588e:	607a      	str	r2, [r7, #4]
 8115890:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8115892:	8c3b      	ldrh	r3, [r7, #32]
 8115894:	4618      	mov	r0, r3
 8115896:	f7fe fcd1 	bl	811423c <lwip_htons>
 811589a:	4603      	mov	r3, r0
 811589c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 811589e:	210e      	movs	r1, #14
 81158a0:	68b8      	ldr	r0, [r7, #8]
 81158a2:	f003 fbd5 	bl	8119050 <pbuf_add_header>
 81158a6:	4603      	mov	r3, r0
 81158a8:	2b00      	cmp	r3, #0
 81158aa:	d12c      	bne.n	8115906 <ethernet_output+0x82>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 81158ac:	68bb      	ldr	r3, [r7, #8]
 81158ae:	685b      	ldr	r3, [r3, #4]
 81158b0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 81158b2:	693b      	ldr	r3, [r7, #16]
 81158b4:	8afa      	ldrh	r2, [r7, #22]
 81158b6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 81158b8:	693b      	ldr	r3, [r7, #16]
 81158ba:	2206      	movs	r2, #6
 81158bc:	6839      	ldr	r1, [r7, #0]
 81158be:	4618      	mov	r0, r3
 81158c0:	f00c ffc5 	bl	812284e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 81158c4:	693b      	ldr	r3, [r7, #16]
 81158c6:	3306      	adds	r3, #6
 81158c8:	2206      	movs	r2, #6
 81158ca:	6879      	ldr	r1, [r7, #4]
 81158cc:	4618      	mov	r0, r3
 81158ce:	f00c ffbe 	bl	812284e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 81158d2:	68fb      	ldr	r3, [r7, #12]
 81158d4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 81158d8:	2b06      	cmp	r3, #6
 81158da:	d006      	beq.n	81158ea <ethernet_output+0x66>
 81158dc:	4b10      	ldr	r3, [pc, #64]	@ (8115920 <ethernet_output+0x9c>)
 81158de:	f44f 7299 	mov.w	r2, #306	@ 0x132
 81158e2:	4910      	ldr	r1, [pc, #64]	@ (8115924 <ethernet_output+0xa0>)
 81158e4:	4810      	ldr	r0, [pc, #64]	@ (8115928 <ethernet_output+0xa4>)
 81158e6:	f00c fcbd 	bl	8122264 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
 81158ea:	68b9      	ldr	r1, [r7, #8]
 81158ec:	480f      	ldr	r0, [pc, #60]	@ (811592c <ethernet_output+0xa8>)
 81158ee:	f00c fcb9 	bl	8122264 <iprintf>
 81158f2:	200d      	movs	r0, #13
 81158f4:	f00c fcc8 	bl	8122288 <putchar>
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 81158f8:	68fb      	ldr	r3, [r7, #12]
 81158fa:	699b      	ldr	r3, [r3, #24]
 81158fc:	68b9      	ldr	r1, [r7, #8]
 81158fe:	68f8      	ldr	r0, [r7, #12]
 8115900:	4798      	blx	r3
 8115902:	4603      	mov	r3, r0
 8115904:	e008      	b.n	8115918 <ethernet_output+0x94>
      goto pbuf_header_failed;
 8115906:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 8115908:	4809      	ldr	r0, [pc, #36]	@ (8115930 <ethernet_output+0xac>)
 811590a:	f00c fd1b 	bl	8122344 <puts>
 811590e:	200d      	movs	r0, #13
 8115910:	f00c fcba 	bl	8122288 <putchar>
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8115914:	f06f 0301 	mvn.w	r3, #1
}
 8115918:	4618      	mov	r0, r3
 811591a:	3718      	adds	r7, #24
 811591c:	46bd      	mov	sp, r7
 811591e:	bd80      	pop	{r7, pc}
 8115920:	081245bc 	.word	0x081245bc
 8115924:	08124630 	.word	0x08124630
 8115928:	08124664 	.word	0x08124664
 811592c:	0812468c 	.word	0x0812468c
 8115930:	081246b0 	.word	0x081246b0

08115934 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8115934:	b580      	push	{r7, lr}
 8115936:	b08e      	sub	sp, #56	@ 0x38
 8115938:	af04      	add	r7, sp, #16
 811593a:	6078      	str	r0, [r7, #4]
 811593c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 811593e:	4b89      	ldr	r3, [pc, #548]	@ (8115b64 <icmp_input+0x230>)
 8115940:	689b      	ldr	r3, [r3, #8]
 8115942:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8115944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115946:	781b      	ldrb	r3, [r3, #0]
 8115948:	f003 030f 	and.w	r3, r3, #15
 811594c:	b2db      	uxtb	r3, r3
 811594e:	009b      	lsls	r3, r3, #2
 8115950:	b2db      	uxtb	r3, r3
 8115952:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8115954:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8115956:	2b13      	cmp	r3, #19
 8115958:	f240 80ed 	bls.w	8115b36 <icmp_input+0x202>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 811595c:	687b      	ldr	r3, [r7, #4]
 811595e:	895b      	ldrh	r3, [r3, #10]
 8115960:	2b03      	cmp	r3, #3
 8115962:	f240 80ea 	bls.w	8115b3a <icmp_input+0x206>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8115966:	687b      	ldr	r3, [r7, #4]
 8115968:	685b      	ldr	r3, [r3, #4]
 811596a:	781b      	ldrb	r3, [r3, #0]
 811596c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 8115970:	687b      	ldr	r3, [r7, #4]
 8115972:	685b      	ldr	r3, [r3, #4]
 8115974:	785b      	ldrb	r3, [r3, #1]
 8115976:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 811597a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 811597e:	2b00      	cmp	r3, #0
 8115980:	f000 80d2 	beq.w	8115b28 <icmp_input+0x1f4>
 8115984:	2b08      	cmp	r3, #8
 8115986:	f040 80d2 	bne.w	8115b2e <icmp_input+0x1fa>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 811598a:	4b77      	ldr	r3, [pc, #476]	@ (8115b68 <icmp_input+0x234>)
 811598c:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 811598e:	4b75      	ldr	r3, [pc, #468]	@ (8115b64 <icmp_input+0x230>)
 8115990:	695b      	ldr	r3, [r3, #20]
 8115992:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8115996:	2be0      	cmp	r3, #224	@ 0xe0
 8115998:	f000 80d6 	beq.w	8115b48 <icmp_input+0x214>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 811599c:	4b71      	ldr	r3, [pc, #452]	@ (8115b64 <icmp_input+0x230>)
 811599e:	695b      	ldr	r3, [r3, #20]
 81159a0:	4a70      	ldr	r2, [pc, #448]	@ (8115b64 <icmp_input+0x230>)
 81159a2:	6812      	ldr	r2, [r2, #0]
 81159a4:	4611      	mov	r1, r2
 81159a6:	4618      	mov	r0, r3
 81159a8:	f000 fef8 	bl	811679c <ip4_addr_isbroadcast_u32>
 81159ac:	4603      	mov	r3, r0
 81159ae:	2b00      	cmp	r3, #0
 81159b0:	f040 80cc 	bne.w	8115b4c <icmp_input+0x218>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 81159b4:	687b      	ldr	r3, [r7, #4]
 81159b6:	891b      	ldrh	r3, [r3, #8]
 81159b8:	2b07      	cmp	r3, #7
 81159ba:	f240 80c0 	bls.w	8115b3e <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 81159be:	6878      	ldr	r0, [r7, #4]
 81159c0:	f000 f9df 	bl	8115d82 <inet_chksum_pbuf>
 81159c4:	4603      	mov	r3, r0
 81159c6:	2b00      	cmp	r3, #0
 81159c8:	d003      	beq.n	81159d2 <icmp_input+0x9e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 81159ca:	6878      	ldr	r0, [r7, #4]
 81159cc:	f003 fbd6 	bl	811917c <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 81159d0:	e0c5      	b.n	8115b5e <icmp_input+0x22a>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 81159d2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 81159d4:	330e      	adds	r3, #14
 81159d6:	4619      	mov	r1, r3
 81159d8:	6878      	ldr	r0, [r7, #4]
 81159da:	f003 fb39 	bl	8119050 <pbuf_add_header>
 81159de:	4603      	mov	r3, r0
 81159e0:	2b00      	cmp	r3, #0
 81159e2:	d04b      	beq.n	8115a7c <icmp_input+0x148>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 81159e4:	687b      	ldr	r3, [r7, #4]
 81159e6:	891a      	ldrh	r2, [r3, #8]
 81159e8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 81159ea:	4413      	add	r3, r2
 81159ec:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 81159ee:	687b      	ldr	r3, [r7, #4]
 81159f0:	891b      	ldrh	r3, [r3, #8]
 81159f2:	8b7a      	ldrh	r2, [r7, #26]
 81159f4:	429a      	cmp	r2, r3
 81159f6:	f0c0 80ab 	bcc.w	8115b50 <icmp_input+0x21c>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 81159fa:	8b7b      	ldrh	r3, [r7, #26]
 81159fc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8115a00:	4619      	mov	r1, r3
 8115a02:	200e      	movs	r0, #14
 8115a04:	f003 f8d6 	bl	8118bb4 <pbuf_alloc>
 8115a08:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8115a0a:	697b      	ldr	r3, [r7, #20]
 8115a0c:	2b00      	cmp	r3, #0
 8115a0e:	f000 80a1 	beq.w	8115b54 <icmp_input+0x220>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8115a12:	697b      	ldr	r3, [r7, #20]
 8115a14:	895b      	ldrh	r3, [r3, #10]
 8115a16:	461a      	mov	r2, r3
 8115a18:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8115a1a:	3308      	adds	r3, #8
 8115a1c:	429a      	cmp	r2, r3
 8115a1e:	d203      	bcs.n	8115a28 <icmp_input+0xf4>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8115a20:	6978      	ldr	r0, [r7, #20]
 8115a22:	f003 fbab 	bl	811917c <pbuf_free>
          goto icmperr;
 8115a26:	e096      	b.n	8115b56 <icmp_input+0x222>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8115a28:	697b      	ldr	r3, [r7, #20]
 8115a2a:	685b      	ldr	r3, [r3, #4]
 8115a2c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8115a2e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8115a30:	4618      	mov	r0, r3
 8115a32:	f00c ff0c 	bl	812284e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8115a36:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8115a38:	4619      	mov	r1, r3
 8115a3a:	6978      	ldr	r0, [r7, #20]
 8115a3c:	f003 fb18 	bl	8119070 <pbuf_remove_header>
 8115a40:	4603      	mov	r3, r0
 8115a42:	2b00      	cmp	r3, #0
 8115a44:	d009      	beq.n	8115a5a <icmp_input+0x126>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8115a46:	4b49      	ldr	r3, [pc, #292]	@ (8115b6c <icmp_input+0x238>)
 8115a48:	22b6      	movs	r2, #182	@ 0xb6
 8115a4a:	4949      	ldr	r1, [pc, #292]	@ (8115b70 <icmp_input+0x23c>)
 8115a4c:	4849      	ldr	r0, [pc, #292]	@ (8115b74 <icmp_input+0x240>)
 8115a4e:	f00c fc09 	bl	8122264 <iprintf>
          pbuf_free(r);
 8115a52:	6978      	ldr	r0, [r7, #20]
 8115a54:	f003 fb92 	bl	811917c <pbuf_free>
          goto icmperr;
 8115a58:	e07d      	b.n	8115b56 <icmp_input+0x222>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8115a5a:	6879      	ldr	r1, [r7, #4]
 8115a5c:	6978      	ldr	r0, [r7, #20]
 8115a5e:	f003 fcc1 	bl	81193e4 <pbuf_copy>
 8115a62:	4603      	mov	r3, r0
 8115a64:	2b00      	cmp	r3, #0
 8115a66:	d003      	beq.n	8115a70 <icmp_input+0x13c>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8115a68:	6978      	ldr	r0, [r7, #20]
 8115a6a:	f003 fb87 	bl	811917c <pbuf_free>
          goto icmperr;
 8115a6e:	e072      	b.n	8115b56 <icmp_input+0x222>
        }
        /* free the original p */
        pbuf_free(p);
 8115a70:	6878      	ldr	r0, [r7, #4]
 8115a72:	f003 fb83 	bl	811917c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8115a76:	697b      	ldr	r3, [r7, #20]
 8115a78:	607b      	str	r3, [r7, #4]
 8115a7a:	e00f      	b.n	8115a9c <icmp_input+0x168>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8115a7c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8115a7e:	330e      	adds	r3, #14
 8115a80:	4619      	mov	r1, r3
 8115a82:	6878      	ldr	r0, [r7, #4]
 8115a84:	f003 faf4 	bl	8119070 <pbuf_remove_header>
 8115a88:	4603      	mov	r3, r0
 8115a8a:	2b00      	cmp	r3, #0
 8115a8c:	d006      	beq.n	8115a9c <icmp_input+0x168>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8115a8e:	4b37      	ldr	r3, [pc, #220]	@ (8115b6c <icmp_input+0x238>)
 8115a90:	22c7      	movs	r2, #199	@ 0xc7
 8115a92:	4939      	ldr	r1, [pc, #228]	@ (8115b78 <icmp_input+0x244>)
 8115a94:	4837      	ldr	r0, [pc, #220]	@ (8115b74 <icmp_input+0x240>)
 8115a96:	f00c fbe5 	bl	8122264 <iprintf>
          goto icmperr;
 8115a9a:	e05c      	b.n	8115b56 <icmp_input+0x222>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8115a9c:	687b      	ldr	r3, [r7, #4]
 8115a9e:	685b      	ldr	r3, [r3, #4]
 8115aa0:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8115aa2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8115aa4:	4619      	mov	r1, r3
 8115aa6:	6878      	ldr	r0, [r7, #4]
 8115aa8:	f003 fad2 	bl	8119050 <pbuf_add_header>
 8115aac:	4603      	mov	r3, r0
 8115aae:	2b00      	cmp	r3, #0
 8115ab0:	d13c      	bne.n	8115b2c <icmp_input+0x1f8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8115ab2:	687b      	ldr	r3, [r7, #4]
 8115ab4:	685b      	ldr	r3, [r3, #4]
 8115ab6:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8115ab8:	69fb      	ldr	r3, [r7, #28]
 8115aba:	681a      	ldr	r2, [r3, #0]
 8115abc:	68fb      	ldr	r3, [r7, #12]
 8115abe:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8115ac0:	4b28      	ldr	r3, [pc, #160]	@ (8115b64 <icmp_input+0x230>)
 8115ac2:	691a      	ldr	r2, [r3, #16]
 8115ac4:	68fb      	ldr	r3, [r7, #12]
 8115ac6:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8115ac8:	693b      	ldr	r3, [r7, #16]
 8115aca:	2200      	movs	r2, #0
 8115acc:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8115ace:	693b      	ldr	r3, [r7, #16]
 8115ad0:	885b      	ldrh	r3, [r3, #2]
 8115ad2:	b29b      	uxth	r3, r3
 8115ad4:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8115ad8:	4293      	cmp	r3, r2
 8115ada:	d907      	bls.n	8115aec <icmp_input+0x1b8>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8115adc:	693b      	ldr	r3, [r7, #16]
 8115ade:	885b      	ldrh	r3, [r3, #2]
 8115ae0:	b29b      	uxth	r3, r3
 8115ae2:	3309      	adds	r3, #9
 8115ae4:	b29a      	uxth	r2, r3
 8115ae6:	693b      	ldr	r3, [r7, #16]
 8115ae8:	805a      	strh	r2, [r3, #2]
 8115aea:	e006      	b.n	8115afa <icmp_input+0x1c6>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8115aec:	693b      	ldr	r3, [r7, #16]
 8115aee:	885b      	ldrh	r3, [r3, #2]
 8115af0:	b29b      	uxth	r3, r3
 8115af2:	3308      	adds	r3, #8
 8115af4:	b29a      	uxth	r2, r3
 8115af6:	693b      	ldr	r3, [r7, #16]
 8115af8:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8115afa:	68fb      	ldr	r3, [r7, #12]
 8115afc:	22ff      	movs	r2, #255	@ 0xff
 8115afe:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8115b00:	68fb      	ldr	r3, [r7, #12]
 8115b02:	2200      	movs	r2, #0
 8115b04:	729a      	strb	r2, [r3, #10]
 8115b06:	2200      	movs	r2, #0
 8115b08:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8115b0a:	683b      	ldr	r3, [r7, #0]
 8115b0c:	9302      	str	r3, [sp, #8]
 8115b0e:	2301      	movs	r3, #1
 8115b10:	9301      	str	r3, [sp, #4]
 8115b12:	2300      	movs	r3, #0
 8115b14:	9300      	str	r3, [sp, #0]
 8115b16:	23ff      	movs	r3, #255	@ 0xff
 8115b18:	2200      	movs	r2, #0
 8115b1a:	69f9      	ldr	r1, [r7, #28]
 8115b1c:	6878      	ldr	r0, [r7, #4]
 8115b1e:	f000 fc4f 	bl	81163c0 <ip4_output_if>
 8115b22:	4603      	mov	r3, r0
 8115b24:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8115b26:	e001      	b.n	8115b2c <icmp_input+0x1f8>
      break;
 8115b28:	bf00      	nop
 8115b2a:	e000      	b.n	8115b2e <icmp_input+0x1fa>
      break;
 8115b2c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8115b2e:	6878      	ldr	r0, [r7, #4]
 8115b30:	f003 fb24 	bl	811917c <pbuf_free>
  return;
 8115b34:	e013      	b.n	8115b5e <icmp_input+0x22a>
    goto lenerr;
 8115b36:	bf00      	nop
 8115b38:	e002      	b.n	8115b40 <icmp_input+0x20c>
    goto lenerr;
 8115b3a:	bf00      	nop
 8115b3c:	e000      	b.n	8115b40 <icmp_input+0x20c>
        goto lenerr;
 8115b3e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8115b40:	6878      	ldr	r0, [r7, #4]
 8115b42:	f003 fb1b 	bl	811917c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8115b46:	e00a      	b.n	8115b5e <icmp_input+0x22a>
        goto icmperr;
 8115b48:	bf00      	nop
 8115b4a:	e004      	b.n	8115b56 <icmp_input+0x222>
        goto icmperr;
 8115b4c:	bf00      	nop
 8115b4e:	e002      	b.n	8115b56 <icmp_input+0x222>
          goto icmperr;
 8115b50:	bf00      	nop
 8115b52:	e000      	b.n	8115b56 <icmp_input+0x222>
          goto icmperr;
 8115b54:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8115b56:	6878      	ldr	r0, [r7, #4]
 8115b58:	f003 fb10 	bl	811917c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8115b5c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8115b5e:	3728      	adds	r7, #40	@ 0x28
 8115b60:	46bd      	mov	sp, r7
 8115b62:	bd80      	pop	{r7, pc}
 8115b64:	1000b2b4 	.word	0x1000b2b4
 8115b68:	1000b2c8 	.word	0x1000b2c8
 8115b6c:	081246e8 	.word	0x081246e8
 8115b70:	0812475c 	.word	0x0812475c
 8115b74:	08124794 	.word	0x08124794
 8115b78:	081247bc 	.word	0x081247bc

08115b7c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8115b7c:	b580      	push	{r7, lr}
 8115b7e:	b082      	sub	sp, #8
 8115b80:	af00      	add	r7, sp, #0
 8115b82:	6078      	str	r0, [r7, #4]
 8115b84:	460b      	mov	r3, r1
 8115b86:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8115b88:	78fb      	ldrb	r3, [r7, #3]
 8115b8a:	461a      	mov	r2, r3
 8115b8c:	2103      	movs	r1, #3
 8115b8e:	6878      	ldr	r0, [r7, #4]
 8115b90:	f000 f814 	bl	8115bbc <icmp_send_response>
}
 8115b94:	bf00      	nop
 8115b96:	3708      	adds	r7, #8
 8115b98:	46bd      	mov	sp, r7
 8115b9a:	bd80      	pop	{r7, pc}

08115b9c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8115b9c:	b580      	push	{r7, lr}
 8115b9e:	b082      	sub	sp, #8
 8115ba0:	af00      	add	r7, sp, #0
 8115ba2:	6078      	str	r0, [r7, #4]
 8115ba4:	460b      	mov	r3, r1
 8115ba6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8115ba8:	78fb      	ldrb	r3, [r7, #3]
 8115baa:	461a      	mov	r2, r3
 8115bac:	210b      	movs	r1, #11
 8115bae:	6878      	ldr	r0, [r7, #4]
 8115bb0:	f000 f804 	bl	8115bbc <icmp_send_response>
}
 8115bb4:	bf00      	nop
 8115bb6:	3708      	adds	r7, #8
 8115bb8:	46bd      	mov	sp, r7
 8115bba:	bd80      	pop	{r7, pc}

08115bbc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8115bbc:	b580      	push	{r7, lr}
 8115bbe:	b08c      	sub	sp, #48	@ 0x30
 8115bc0:	af04      	add	r7, sp, #16
 8115bc2:	6078      	str	r0, [r7, #4]
 8115bc4:	460b      	mov	r3, r1
 8115bc6:	70fb      	strb	r3, [r7, #3]
 8115bc8:	4613      	mov	r3, r2
 8115bca:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8115bcc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8115bd0:	2124      	movs	r1, #36	@ 0x24
 8115bd2:	2022      	movs	r0, #34	@ 0x22
 8115bd4:	f002 ffee 	bl	8118bb4 <pbuf_alloc>
 8115bd8:	61b8      	str	r0, [r7, #24]
                 PBUF_RAM);
  if (q == NULL) {
 8115bda:	69bb      	ldr	r3, [r7, #24]
 8115bdc:	2b00      	cmp	r3, #0
 8115bde:	d056      	beq.n	8115c8e <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8115be0:	69bb      	ldr	r3, [r7, #24]
 8115be2:	895b      	ldrh	r3, [r3, #10]
 8115be4:	2b23      	cmp	r3, #35	@ 0x23
 8115be6:	d806      	bhi.n	8115bf6 <icmp_send_response+0x3a>
 8115be8:	4b2b      	ldr	r3, [pc, #172]	@ (8115c98 <icmp_send_response+0xdc>)
 8115bea:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8115bee:	492b      	ldr	r1, [pc, #172]	@ (8115c9c <icmp_send_response+0xe0>)
 8115bf0:	482b      	ldr	r0, [pc, #172]	@ (8115ca0 <icmp_send_response+0xe4>)
 8115bf2:	f00c fb37 	bl	8122264 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8115bf6:	687b      	ldr	r3, [r7, #4]
 8115bf8:	685b      	ldr	r3, [r3, #4]
 8115bfa:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8115bfc:	69bb      	ldr	r3, [r7, #24]
 8115bfe:	685b      	ldr	r3, [r3, #4]
 8115c00:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
 8115c02:	693b      	ldr	r3, [r7, #16]
 8115c04:	78fa      	ldrb	r2, [r7, #3]
 8115c06:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8115c08:	693b      	ldr	r3, [r7, #16]
 8115c0a:	78ba      	ldrb	r2, [r7, #2]
 8115c0c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8115c0e:	693b      	ldr	r3, [r7, #16]
 8115c10:	2200      	movs	r2, #0
 8115c12:	711a      	strb	r2, [r3, #4]
 8115c14:	2200      	movs	r2, #0
 8115c16:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8115c18:	693b      	ldr	r3, [r7, #16]
 8115c1a:	2200      	movs	r2, #0
 8115c1c:	719a      	strb	r2, [r3, #6]
 8115c1e:	2200      	movs	r2, #0
 8115c20:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8115c22:	69bb      	ldr	r3, [r7, #24]
 8115c24:	685b      	ldr	r3, [r3, #4]
 8115c26:	f103 0008 	add.w	r0, r3, #8
 8115c2a:	687b      	ldr	r3, [r7, #4]
 8115c2c:	685b      	ldr	r3, [r3, #4]
 8115c2e:	221c      	movs	r2, #28
 8115c30:	4619      	mov	r1, r3
 8115c32:	f00c fe0c 	bl	812284e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8115c36:	697b      	ldr	r3, [r7, #20]
 8115c38:	68db      	ldr	r3, [r3, #12]
 8115c3a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8115c3c:	f107 030c 	add.w	r3, r7, #12
 8115c40:	4618      	mov	r0, r3
 8115c42:	f000 f903 	bl	8115e4c <ip4_route>
 8115c46:	61f8      	str	r0, [r7, #28]
#endif
  if (netif != NULL) {
 8115c48:	69fb      	ldr	r3, [r7, #28]
 8115c4a:	2b00      	cmp	r3, #0
 8115c4c:	d01b      	beq.n	8115c86 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8115c4e:	693b      	ldr	r3, [r7, #16]
 8115c50:	2200      	movs	r2, #0
 8115c52:	709a      	strb	r2, [r3, #2]
 8115c54:	2200      	movs	r2, #0
 8115c56:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8115c58:	69bb      	ldr	r3, [r7, #24]
 8115c5a:	895b      	ldrh	r3, [r3, #10]
 8115c5c:	4619      	mov	r1, r3
 8115c5e:	6938      	ldr	r0, [r7, #16]
 8115c60:	f000 f87d 	bl	8115d5e <inet_chksum>
 8115c64:	4603      	mov	r3, r0
 8115c66:	461a      	mov	r2, r3
 8115c68:	693b      	ldr	r3, [r7, #16]
 8115c6a:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8115c6c:	f107 020c 	add.w	r2, r7, #12
 8115c70:	69fb      	ldr	r3, [r7, #28]
 8115c72:	9302      	str	r3, [sp, #8]
 8115c74:	2301      	movs	r3, #1
 8115c76:	9301      	str	r3, [sp, #4]
 8115c78:	2300      	movs	r3, #0
 8115c7a:	9300      	str	r3, [sp, #0]
 8115c7c:	23ff      	movs	r3, #255	@ 0xff
 8115c7e:	2100      	movs	r1, #0
 8115c80:	69b8      	ldr	r0, [r7, #24]
 8115c82:	f000 fb9d 	bl	81163c0 <ip4_output_if>
  }
  pbuf_free(q);
 8115c86:	69b8      	ldr	r0, [r7, #24]
 8115c88:	f003 fa78 	bl	811917c <pbuf_free>
 8115c8c:	e000      	b.n	8115c90 <icmp_send_response+0xd4>
    return;
 8115c8e:	bf00      	nop
}
 8115c90:	3720      	adds	r7, #32
 8115c92:	46bd      	mov	sp, r7
 8115c94:	bd80      	pop	{r7, pc}
 8115c96:	bf00      	nop
 8115c98:	081246e8 	.word	0x081246e8
 8115c9c:	081247f0 	.word	0x081247f0
 8115ca0:	08124794 	.word	0x08124794

08115ca4 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8115ca4:	b480      	push	{r7}
 8115ca6:	b089      	sub	sp, #36	@ 0x24
 8115ca8:	af00      	add	r7, sp, #0
 8115caa:	6078      	str	r0, [r7, #4]
 8115cac:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8115cae:	687b      	ldr	r3, [r7, #4]
 8115cb0:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8115cb2:	2300      	movs	r3, #0
 8115cb4:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8115cb6:	2300      	movs	r3, #0
 8115cb8:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8115cba:	69fb      	ldr	r3, [r7, #28]
 8115cbc:	f003 0301 	and.w	r3, r3, #1
 8115cc0:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8115cc2:	693b      	ldr	r3, [r7, #16]
 8115cc4:	2b00      	cmp	r3, #0
 8115cc6:	d00d      	beq.n	8115ce4 <lwip_standard_chksum+0x40>
 8115cc8:	683b      	ldr	r3, [r7, #0]
 8115cca:	2b00      	cmp	r3, #0
 8115ccc:	dd0a      	ble.n	8115ce4 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8115cce:	69fa      	ldr	r2, [r7, #28]
 8115cd0:	1c53      	adds	r3, r2, #1
 8115cd2:	61fb      	str	r3, [r7, #28]
 8115cd4:	f107 030e 	add.w	r3, r7, #14
 8115cd8:	3301      	adds	r3, #1
 8115cda:	7812      	ldrb	r2, [r2, #0]
 8115cdc:	701a      	strb	r2, [r3, #0]
    len--;
 8115cde:	683b      	ldr	r3, [r7, #0]
 8115ce0:	3b01      	subs	r3, #1
 8115ce2:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8115ce4:	69fb      	ldr	r3, [r7, #28]
 8115ce6:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8115ce8:	e00a      	b.n	8115d00 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8115cea:	69bb      	ldr	r3, [r7, #24]
 8115cec:	1c9a      	adds	r2, r3, #2
 8115cee:	61ba      	str	r2, [r7, #24]
 8115cf0:	881b      	ldrh	r3, [r3, #0]
 8115cf2:	461a      	mov	r2, r3
 8115cf4:	697b      	ldr	r3, [r7, #20]
 8115cf6:	4413      	add	r3, r2
 8115cf8:	617b      	str	r3, [r7, #20]
    len -= 2;
 8115cfa:	683b      	ldr	r3, [r7, #0]
 8115cfc:	3b02      	subs	r3, #2
 8115cfe:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8115d00:	683b      	ldr	r3, [r7, #0]
 8115d02:	2b01      	cmp	r3, #1
 8115d04:	dcf1      	bgt.n	8115cea <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8115d06:	683b      	ldr	r3, [r7, #0]
 8115d08:	2b00      	cmp	r3, #0
 8115d0a:	dd04      	ble.n	8115d16 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8115d0c:	f107 030e 	add.w	r3, r7, #14
 8115d10:	69ba      	ldr	r2, [r7, #24]
 8115d12:	7812      	ldrb	r2, [r2, #0]
 8115d14:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8115d16:	89fb      	ldrh	r3, [r7, #14]
 8115d18:	461a      	mov	r2, r3
 8115d1a:	697b      	ldr	r3, [r7, #20]
 8115d1c:	4413      	add	r3, r2
 8115d1e:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8115d20:	697b      	ldr	r3, [r7, #20]
 8115d22:	0c1a      	lsrs	r2, r3, #16
 8115d24:	697b      	ldr	r3, [r7, #20]
 8115d26:	b29b      	uxth	r3, r3
 8115d28:	4413      	add	r3, r2
 8115d2a:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8115d2c:	697b      	ldr	r3, [r7, #20]
 8115d2e:	0c1a      	lsrs	r2, r3, #16
 8115d30:	697b      	ldr	r3, [r7, #20]
 8115d32:	b29b      	uxth	r3, r3
 8115d34:	4413      	add	r3, r2
 8115d36:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8115d38:	693b      	ldr	r3, [r7, #16]
 8115d3a:	2b00      	cmp	r3, #0
 8115d3c:	d007      	beq.n	8115d4e <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8115d3e:	697b      	ldr	r3, [r7, #20]
 8115d40:	021b      	lsls	r3, r3, #8
 8115d42:	b29a      	uxth	r2, r3
 8115d44:	697b      	ldr	r3, [r7, #20]
 8115d46:	0a1b      	lsrs	r3, r3, #8
 8115d48:	b2db      	uxtb	r3, r3
 8115d4a:	4313      	orrs	r3, r2
 8115d4c:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8115d4e:	697b      	ldr	r3, [r7, #20]
 8115d50:	b29b      	uxth	r3, r3
}
 8115d52:	4618      	mov	r0, r3
 8115d54:	3724      	adds	r7, #36	@ 0x24
 8115d56:	46bd      	mov	sp, r7
 8115d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8115d5c:	4770      	bx	lr

08115d5e <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8115d5e:	b580      	push	{r7, lr}
 8115d60:	b082      	sub	sp, #8
 8115d62:	af00      	add	r7, sp, #0
 8115d64:	6078      	str	r0, [r7, #4]
 8115d66:	460b      	mov	r3, r1
 8115d68:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8115d6a:	887b      	ldrh	r3, [r7, #2]
 8115d6c:	4619      	mov	r1, r3
 8115d6e:	6878      	ldr	r0, [r7, #4]
 8115d70:	f7ff ff98 	bl	8115ca4 <lwip_standard_chksum>
 8115d74:	4603      	mov	r3, r0
 8115d76:	43db      	mvns	r3, r3
 8115d78:	b29b      	uxth	r3, r3
}
 8115d7a:	4618      	mov	r0, r3
 8115d7c:	3708      	adds	r7, #8
 8115d7e:	46bd      	mov	sp, r7
 8115d80:	bd80      	pop	{r7, pc}

08115d82 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8115d82:	b580      	push	{r7, lr}
 8115d84:	b086      	sub	sp, #24
 8115d86:	af00      	add	r7, sp, #0
 8115d88:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8115d8a:	2300      	movs	r3, #0
 8115d8c:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8115d8e:	2300      	movs	r3, #0
 8115d90:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8115d92:	687b      	ldr	r3, [r7, #4]
 8115d94:	613b      	str	r3, [r7, #16]
 8115d96:	e02b      	b.n	8115df0 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8115d98:	693b      	ldr	r3, [r7, #16]
 8115d9a:	685a      	ldr	r2, [r3, #4]
 8115d9c:	693b      	ldr	r3, [r7, #16]
 8115d9e:	895b      	ldrh	r3, [r3, #10]
 8115da0:	4619      	mov	r1, r3
 8115da2:	4610      	mov	r0, r2
 8115da4:	f7ff ff7e 	bl	8115ca4 <lwip_standard_chksum>
 8115da8:	4603      	mov	r3, r0
 8115daa:	461a      	mov	r2, r3
 8115dac:	697b      	ldr	r3, [r7, #20]
 8115dae:	4413      	add	r3, r2
 8115db0:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8115db2:	697b      	ldr	r3, [r7, #20]
 8115db4:	0c1a      	lsrs	r2, r3, #16
 8115db6:	697b      	ldr	r3, [r7, #20]
 8115db8:	b29b      	uxth	r3, r3
 8115dba:	4413      	add	r3, r2
 8115dbc:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8115dbe:	693b      	ldr	r3, [r7, #16]
 8115dc0:	895b      	ldrh	r3, [r3, #10]
 8115dc2:	f003 0301 	and.w	r3, r3, #1
 8115dc6:	b29b      	uxth	r3, r3
 8115dc8:	2b00      	cmp	r3, #0
 8115dca:	d00e      	beq.n	8115dea <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8115dcc:	68fb      	ldr	r3, [r7, #12]
 8115dce:	2b00      	cmp	r3, #0
 8115dd0:	bf0c      	ite	eq
 8115dd2:	2301      	moveq	r3, #1
 8115dd4:	2300      	movne	r3, #0
 8115dd6:	b2db      	uxtb	r3, r3
 8115dd8:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8115dda:	697b      	ldr	r3, [r7, #20]
 8115ddc:	021b      	lsls	r3, r3, #8
 8115dde:	b29a      	uxth	r2, r3
 8115de0:	697b      	ldr	r3, [r7, #20]
 8115de2:	0a1b      	lsrs	r3, r3, #8
 8115de4:	b2db      	uxtb	r3, r3
 8115de6:	4313      	orrs	r3, r2
 8115de8:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8115dea:	693b      	ldr	r3, [r7, #16]
 8115dec:	681b      	ldr	r3, [r3, #0]
 8115dee:	613b      	str	r3, [r7, #16]
 8115df0:	693b      	ldr	r3, [r7, #16]
 8115df2:	2b00      	cmp	r3, #0
 8115df4:	d1d0      	bne.n	8115d98 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8115df6:	68fb      	ldr	r3, [r7, #12]
 8115df8:	2b00      	cmp	r3, #0
 8115dfa:	d007      	beq.n	8115e0c <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8115dfc:	697b      	ldr	r3, [r7, #20]
 8115dfe:	021b      	lsls	r3, r3, #8
 8115e00:	b29a      	uxth	r2, r3
 8115e02:	697b      	ldr	r3, [r7, #20]
 8115e04:	0a1b      	lsrs	r3, r3, #8
 8115e06:	b2db      	uxtb	r3, r3
 8115e08:	4313      	orrs	r3, r2
 8115e0a:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8115e0c:	697b      	ldr	r3, [r7, #20]
 8115e0e:	b29b      	uxth	r3, r3
 8115e10:	43db      	mvns	r3, r3
 8115e12:	b29b      	uxth	r3, r3
}
 8115e14:	4618      	mov	r0, r3
 8115e16:	3718      	adds	r7, #24
 8115e18:	46bd      	mov	sp, r7
 8115e1a:	bd80      	pop	{r7, pc}

08115e1c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8115e1c:	b580      	push	{r7, lr}
 8115e1e:	b082      	sub	sp, #8
 8115e20:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8115e22:	2300      	movs	r3, #0
 8115e24:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8115e26:	f003 fcc9 	bl	81197bc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8115e2a:	f001 fdb5 	bl	8117998 <mem_init>
  memp_init();
 8115e2e:	f002 f8ff 	bl	8118030 <memp_init>
  pbuf_init();
  netif_init();
 8115e32:	f002 fa0b 	bl	811824c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8115e36:	f00a fbd1 	bl	81205dc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8115e3a:	f003 fd3b 	bl	81198b4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8115e3e:	f00a fb09 	bl	8120454 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8115e42:	bf00      	nop
 8115e44:	3708      	adds	r7, #8
 8115e46:	46bd      	mov	sp, r7
 8115e48:	bd80      	pop	{r7, pc}
	...

08115e4c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8115e4c:	b580      	push	{r7, lr}
 8115e4e:	b086      	sub	sp, #24
 8115e50:	af02      	add	r7, sp, #8
 8115e52:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8115e54:	4b3d      	ldr	r3, [pc, #244]	@ (8115f4c <ip4_route+0x100>)
 8115e56:	681b      	ldr	r3, [r3, #0]
 8115e58:	60fb      	str	r3, [r7, #12]
 8115e5a:	e036      	b.n	8115eca <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8115e5c:	68fb      	ldr	r3, [r7, #12]
 8115e5e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8115e62:	f003 0301 	and.w	r3, r3, #1
 8115e66:	b2db      	uxtb	r3, r3
 8115e68:	2b00      	cmp	r3, #0
 8115e6a:	d02b      	beq.n	8115ec4 <ip4_route+0x78>
 8115e6c:	68fb      	ldr	r3, [r7, #12]
 8115e6e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8115e72:	089b      	lsrs	r3, r3, #2
 8115e74:	f003 0301 	and.w	r3, r3, #1
 8115e78:	b2db      	uxtb	r3, r3
 8115e7a:	2b00      	cmp	r3, #0
 8115e7c:	d022      	beq.n	8115ec4 <ip4_route+0x78>
 8115e7e:	68fb      	ldr	r3, [r7, #12]
 8115e80:	3304      	adds	r3, #4
 8115e82:	681b      	ldr	r3, [r3, #0]
 8115e84:	2b00      	cmp	r3, #0
 8115e86:	d01d      	beq.n	8115ec4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8115e88:	687b      	ldr	r3, [r7, #4]
 8115e8a:	681a      	ldr	r2, [r3, #0]
 8115e8c:	68fb      	ldr	r3, [r7, #12]
 8115e8e:	3304      	adds	r3, #4
 8115e90:	681b      	ldr	r3, [r3, #0]
 8115e92:	405a      	eors	r2, r3
 8115e94:	68fb      	ldr	r3, [r7, #12]
 8115e96:	3308      	adds	r3, #8
 8115e98:	681b      	ldr	r3, [r3, #0]
 8115e9a:	4013      	ands	r3, r2
 8115e9c:	2b00      	cmp	r3, #0
 8115e9e:	d101      	bne.n	8115ea4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8115ea0:	68fb      	ldr	r3, [r7, #12]
 8115ea2:	e04e      	b.n	8115f42 <ip4_route+0xf6>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8115ea4:	68fb      	ldr	r3, [r7, #12]
 8115ea6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8115eaa:	f003 0302 	and.w	r3, r3, #2
 8115eae:	2b00      	cmp	r3, #0
 8115eb0:	d108      	bne.n	8115ec4 <ip4_route+0x78>
 8115eb2:	687b      	ldr	r3, [r7, #4]
 8115eb4:	681a      	ldr	r2, [r3, #0]
 8115eb6:	68fb      	ldr	r3, [r7, #12]
 8115eb8:	330c      	adds	r3, #12
 8115eba:	681b      	ldr	r3, [r3, #0]
 8115ebc:	429a      	cmp	r2, r3
 8115ebe:	d101      	bne.n	8115ec4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8115ec0:	68fb      	ldr	r3, [r7, #12]
 8115ec2:	e03e      	b.n	8115f42 <ip4_route+0xf6>
  NETIF_FOREACH(netif) {
 8115ec4:	68fb      	ldr	r3, [r7, #12]
 8115ec6:	681b      	ldr	r3, [r3, #0]
 8115ec8:	60fb      	str	r3, [r7, #12]
 8115eca:	68fb      	ldr	r3, [r7, #12]
 8115ecc:	2b00      	cmp	r3, #0
 8115ece:	d1c5      	bne.n	8115e5c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8115ed0:	4b1f      	ldr	r3, [pc, #124]	@ (8115f50 <ip4_route+0x104>)
 8115ed2:	681b      	ldr	r3, [r3, #0]
 8115ed4:	2b00      	cmp	r3, #0
 8115ed6:	d01a      	beq.n	8115f0e <ip4_route+0xc2>
 8115ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8115f50 <ip4_route+0x104>)
 8115eda:	681b      	ldr	r3, [r3, #0]
 8115edc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8115ee0:	f003 0301 	and.w	r3, r3, #1
 8115ee4:	2b00      	cmp	r3, #0
 8115ee6:	d012      	beq.n	8115f0e <ip4_route+0xc2>
 8115ee8:	4b19      	ldr	r3, [pc, #100]	@ (8115f50 <ip4_route+0x104>)
 8115eea:	681b      	ldr	r3, [r3, #0]
 8115eec:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8115ef0:	f003 0304 	and.w	r3, r3, #4
 8115ef4:	2b00      	cmp	r3, #0
 8115ef6:	d00a      	beq.n	8115f0e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8115ef8:	4b15      	ldr	r3, [pc, #84]	@ (8115f50 <ip4_route+0x104>)
 8115efa:	681b      	ldr	r3, [r3, #0]
 8115efc:	3304      	adds	r3, #4
 8115efe:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8115f00:	2b00      	cmp	r3, #0
 8115f02:	d004      	beq.n	8115f0e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8115f04:	687b      	ldr	r3, [r7, #4]
 8115f06:	681b      	ldr	r3, [r3, #0]
 8115f08:	b2db      	uxtb	r3, r3
 8115f0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8115f0c:	d117      	bne.n	8115f3e <ip4_route+0xf2>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 8115f0e:	687b      	ldr	r3, [r7, #4]
 8115f10:	781b      	ldrb	r3, [r3, #0]
 8115f12:	4619      	mov	r1, r3
 8115f14:	687b      	ldr	r3, [r7, #4]
 8115f16:	3301      	adds	r3, #1
 8115f18:	781b      	ldrb	r3, [r3, #0]
 8115f1a:	461a      	mov	r2, r3
 8115f1c:	687b      	ldr	r3, [r7, #4]
 8115f1e:	3302      	adds	r3, #2
 8115f20:	781b      	ldrb	r3, [r3, #0]
 8115f22:	4618      	mov	r0, r3
 8115f24:	687b      	ldr	r3, [r7, #4]
 8115f26:	3303      	adds	r3, #3
 8115f28:	781b      	ldrb	r3, [r3, #0]
 8115f2a:	9300      	str	r3, [sp, #0]
 8115f2c:	4603      	mov	r3, r0
 8115f2e:	4809      	ldr	r0, [pc, #36]	@ (8115f54 <ip4_route+0x108>)
 8115f30:	f00c f998 	bl	8122264 <iprintf>
 8115f34:	200d      	movs	r0, #13
 8115f36:	f00c f9a7 	bl	8122288 <putchar>
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8115f3a:	2300      	movs	r3, #0
 8115f3c:	e001      	b.n	8115f42 <ip4_route+0xf6>
  }

  return netif_default;
 8115f3e:	4b04      	ldr	r3, [pc, #16]	@ (8115f50 <ip4_route+0x104>)
 8115f40:	681b      	ldr	r3, [r3, #0]
}
 8115f42:	4618      	mov	r0, r3
 8115f44:	3710      	adds	r7, #16
 8115f46:	46bd      	mov	sp, r7
 8115f48:	bd80      	pop	{r7, pc}
 8115f4a:	bf00      	nop
 8115f4c:	10011e48 	.word	0x10011e48
 8115f50:	10011e4c 	.word	0x10011e4c
 8115f54:	0812481c 	.word	0x0812481c

08115f58 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8115f58:	b5b0      	push	{r4, r5, r7, lr}
 8115f5a:	b084      	sub	sp, #16
 8115f5c:	af02      	add	r7, sp, #8
 8115f5e:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: iphdr->dest 0x%"X32_F" netif->ip_addr 0x%"X32_F" (0x%"X32_F", 0x%"X32_F", 0x%"X32_F")\n",
 8115f60:	4b2b      	ldr	r3, [pc, #172]	@ (8116010 <ip4_input_accept+0xb8>)
 8115f62:	6958      	ldr	r0, [r3, #20]
 8115f64:	687b      	ldr	r3, [r7, #4]
 8115f66:	3304      	adds	r3, #4
 8115f68:	681c      	ldr	r4, [r3, #0]
 8115f6a:	4b29      	ldr	r3, [pc, #164]	@ (8116010 <ip4_input_accept+0xb8>)
 8115f6c:	695a      	ldr	r2, [r3, #20]
 8115f6e:	687b      	ldr	r3, [r7, #4]
 8115f70:	3308      	adds	r3, #8
 8115f72:	681b      	ldr	r3, [r3, #0]
 8115f74:	ea02 0503 	and.w	r5, r2, r3
 8115f78:	687b      	ldr	r3, [r7, #4]
 8115f7a:	3304      	adds	r3, #4
 8115f7c:	681a      	ldr	r2, [r3, #0]
 8115f7e:	687b      	ldr	r3, [r7, #4]
 8115f80:	3308      	adds	r3, #8
 8115f82:	681b      	ldr	r3, [r3, #0]
 8115f84:	4013      	ands	r3, r2
 8115f86:	4a22      	ldr	r2, [pc, #136]	@ (8116010 <ip4_input_accept+0xb8>)
 8115f88:	6951      	ldr	r1, [r2, #20]
 8115f8a:	687a      	ldr	r2, [r7, #4]
 8115f8c:	3208      	adds	r2, #8
 8115f8e:	6812      	ldr	r2, [r2, #0]
 8115f90:	43d2      	mvns	r2, r2
 8115f92:	400a      	ands	r2, r1
 8115f94:	9201      	str	r2, [sp, #4]
 8115f96:	9300      	str	r3, [sp, #0]
 8115f98:	462b      	mov	r3, r5
 8115f9a:	4622      	mov	r2, r4
 8115f9c:	4601      	mov	r1, r0
 8115f9e:	481d      	ldr	r0, [pc, #116]	@ (8116014 <ip4_input_accept+0xbc>)
 8115fa0:	f00c f960 	bl	8122264 <iprintf>
 8115fa4:	200d      	movs	r0, #13
 8115fa6:	f00c f96f 	bl	8122288 <putchar>
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8115faa:	687b      	ldr	r3, [r7, #4]
 8115fac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8115fb0:	f003 0301 	and.w	r3, r3, #1
 8115fb4:	b2db      	uxtb	r3, r3
 8115fb6:	2b00      	cmp	r3, #0
 8115fb8:	d024      	beq.n	8116004 <ip4_input_accept+0xac>
 8115fba:	687b      	ldr	r3, [r7, #4]
 8115fbc:	3304      	adds	r3, #4
 8115fbe:	681b      	ldr	r3, [r3, #0]
 8115fc0:	2b00      	cmp	r3, #0
 8115fc2:	d01f      	beq.n	8116004 <ip4_input_accept+0xac>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8115fc4:	4b12      	ldr	r3, [pc, #72]	@ (8116010 <ip4_input_accept+0xb8>)
 8115fc6:	695a      	ldr	r2, [r3, #20]
 8115fc8:	687b      	ldr	r3, [r7, #4]
 8115fca:	3304      	adds	r3, #4
 8115fcc:	681b      	ldr	r3, [r3, #0]
 8115fce:	429a      	cmp	r2, r3
 8115fd0:	d008      	beq.n	8115fe4 <ip4_input_accept+0x8c>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8115fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8116010 <ip4_input_accept+0xb8>)
 8115fd4:	695b      	ldr	r3, [r3, #20]
 8115fd6:	6879      	ldr	r1, [r7, #4]
 8115fd8:	4618      	mov	r0, r3
 8115fda:	f000 fbdf 	bl	811679c <ip4_addr_isbroadcast_u32>
 8115fde:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8115fe0:	2b00      	cmp	r3, #0
 8115fe2:	d00f      	beq.n	8116004 <ip4_input_accept+0xac>
#if LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF
        || (ip4_addr_get_u32(ip4_current_dest_addr()) == PP_HTONL(IPADDR_LOOPBACK))
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
 8115fe4:	687b      	ldr	r3, [r7, #4]
 8115fe6:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8115fea:	4619      	mov	r1, r3
 8115fec:	687b      	ldr	r3, [r7, #4]
 8115fee:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8115ff2:	461a      	mov	r2, r3
 8115ff4:	4808      	ldr	r0, [pc, #32]	@ (8116018 <ip4_input_accept+0xc0>)
 8115ff6:	f00c f935 	bl	8122264 <iprintf>
 8115ffa:	200d      	movs	r0, #13
 8115ffc:	f00c f944 	bl	8122288 <putchar>
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8116000:	2301      	movs	r3, #1
 8116002:	e000      	b.n	8116006 <ip4_input_accept+0xae>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8116004:	2300      	movs	r3, #0
}
 8116006:	4618      	mov	r0, r3
 8116008:	3708      	adds	r7, #8
 811600a:	46bd      	mov	sp, r7
 811600c:	bdb0      	pop	{r4, r5, r7, pc}
 811600e:	bf00      	nop
 8116010:	1000b2b4 	.word	0x1000b2b4
 8116014:	08124844 	.word	0x08124844
 8116018:	0812488c 	.word	0x0812488c

0811601c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 811601c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8116020:	b088      	sub	sp, #32
 8116022:	af02      	add	r7, sp, #8
 8116024:	6078      	str	r0, [r7, #4]
 8116026:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8116028:	687b      	ldr	r3, [r7, #4]
 811602a:	685b      	ldr	r3, [r3, #4]
 811602c:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 811602e:	697b      	ldr	r3, [r7, #20]
 8116030:	781b      	ldrb	r3, [r3, #0]
 8116032:	091b      	lsrs	r3, r3, #4
 8116034:	b2db      	uxtb	r3, r3
 8116036:	2b04      	cmp	r3, #4
 8116038:	d012      	beq.n	8116060 <ip4_input+0x44>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
 811603a:	697b      	ldr	r3, [r7, #20]
 811603c:	781b      	ldrb	r3, [r3, #0]
 811603e:	091b      	lsrs	r3, r3, #4
 8116040:	b2db      	uxtb	r3, r3
 8116042:	4619      	mov	r1, r3
 8116044:	488d      	ldr	r0, [pc, #564]	@ (811627c <ip4_input+0x260>)
 8116046:	f00c f90d 	bl	8122264 <iprintf>
 811604a:	200d      	movs	r0, #13
 811604c:	f00c f91c 	bl	8122288 <putchar>
    ip4_debug_print(p);
 8116050:	6878      	ldr	r0, [r7, #4]
 8116052:	f000 fabb 	bl	81165cc <ip4_debug_print>
    pbuf_free(p);
 8116056:	6878      	ldr	r0, [r7, #4]
 8116058:	f003 f890 	bl	811917c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 811605c:	2300      	movs	r3, #0
 811605e:	e1a2      	b.n	81163a6 <ip4_input+0x38a>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8116060:	697b      	ldr	r3, [r7, #20]
 8116062:	781b      	ldrb	r3, [r3, #0]
 8116064:	f003 030f 	and.w	r3, r3, #15
 8116068:	b2db      	uxtb	r3, r3
 811606a:	009b      	lsls	r3, r3, #2
 811606c:	b2db      	uxtb	r3, r3
 811606e:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8116070:	697b      	ldr	r3, [r7, #20]
 8116072:	885b      	ldrh	r3, [r3, #2]
 8116074:	b29b      	uxth	r3, r3
 8116076:	4618      	mov	r0, r3
 8116078:	f7fe f8e0 	bl	811423c <lwip_htons>
 811607c:	4603      	mov	r3, r0
 811607e:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8116080:	687b      	ldr	r3, [r7, #4]
 8116082:	891b      	ldrh	r3, [r3, #8]
 8116084:	89ba      	ldrh	r2, [r7, #12]
 8116086:	429a      	cmp	r2, r3
 8116088:	d204      	bcs.n	8116094 <ip4_input+0x78>
    pbuf_realloc(p, iphdr_len);
 811608a:	89bb      	ldrh	r3, [r7, #12]
 811608c:	4619      	mov	r1, r3
 811608e:	6878      	ldr	r0, [r7, #4]
 8116090:	f002 fef0 	bl	8118e74 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8116094:	687b      	ldr	r3, [r7, #4]
 8116096:	895b      	ldrh	r3, [r3, #10]
 8116098:	89fa      	ldrh	r2, [r7, #14]
 811609a:	429a      	cmp	r2, r3
 811609c:	d807      	bhi.n	81160ae <ip4_input+0x92>
 811609e:	687b      	ldr	r3, [r7, #4]
 81160a0:	891b      	ldrh	r3, [r3, #8]
 81160a2:	89ba      	ldrh	r2, [r7, #12]
 81160a4:	429a      	cmp	r2, r3
 81160a6:	d802      	bhi.n	81160ae <ip4_input+0x92>
 81160a8:	89fb      	ldrh	r3, [r7, #14]
 81160aa:	2b13      	cmp	r3, #19
 81160ac:	d82d      	bhi.n	811610a <ip4_input+0xee>
    if (iphdr_hlen < IP_HLEN) {
 81160ae:	89fb      	ldrh	r3, [r7, #14]
 81160b0:	2b13      	cmp	r3, #19
 81160b2:	d807      	bhi.n	81160c4 <ip4_input+0xa8>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 81160b4:	89fb      	ldrh	r3, [r7, #14]
 81160b6:	4619      	mov	r1, r3
 81160b8:	4871      	ldr	r0, [pc, #452]	@ (8116280 <ip4_input+0x264>)
 81160ba:	f00c f8d3 	bl	8122264 <iprintf>
 81160be:	200d      	movs	r0, #13
 81160c0:	f00c f8e2 	bl	8122288 <putchar>
                  ("ip4_input: short IP header (%"U16_F" bytes) received, IP packet dropped\n", iphdr_hlen));
    }
    if (iphdr_hlen > p->len) {
 81160c4:	687b      	ldr	r3, [r7, #4]
 81160c6:	895b      	ldrh	r3, [r3, #10]
 81160c8:	89fa      	ldrh	r2, [r7, #14]
 81160ca:	429a      	cmp	r2, r3
 81160cc:	d909      	bls.n	81160e2 <ip4_input+0xc6>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 81160ce:	89f9      	ldrh	r1, [r7, #14]
 81160d0:	687b      	ldr	r3, [r7, #4]
 81160d2:	895b      	ldrh	r3, [r3, #10]
 81160d4:	461a      	mov	r2, r3
 81160d6:	486b      	ldr	r0, [pc, #428]	@ (8116284 <ip4_input+0x268>)
 81160d8:	f00c f8c4 	bl	8122264 <iprintf>
 81160dc:	200d      	movs	r0, #13
 81160de:	f00c f8d3 	bl	8122288 <putchar>
                  ("IP header (len %"U16_F") does not fit in first pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_hlen, p->len));
    }
    if (iphdr_len > p->tot_len) {
 81160e2:	687b      	ldr	r3, [r7, #4]
 81160e4:	891b      	ldrh	r3, [r3, #8]
 81160e6:	89ba      	ldrh	r2, [r7, #12]
 81160e8:	429a      	cmp	r2, r3
 81160ea:	d909      	bls.n	8116100 <ip4_input+0xe4>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 81160ec:	89b9      	ldrh	r1, [r7, #12]
 81160ee:	687b      	ldr	r3, [r7, #4]
 81160f0:	891b      	ldrh	r3, [r3, #8]
 81160f2:	461a      	mov	r2, r3
 81160f4:	4864      	ldr	r0, [pc, #400]	@ (8116288 <ip4_input+0x26c>)
 81160f6:	f00c f8b5 	bl	8122264 <iprintf>
 81160fa:	200d      	movs	r0, #13
 81160fc:	f00c f8c4 	bl	8122288 <putchar>
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8116100:	6878      	ldr	r0, [r7, #4]
 8116102:	f003 f83b 	bl	811917c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8116106:	2300      	movs	r3, #0
 8116108:	e14d      	b.n	81163a6 <ip4_input+0x38a>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 811610a:	697b      	ldr	r3, [r7, #20]
 811610c:	691b      	ldr	r3, [r3, #16]
 811610e:	4a5f      	ldr	r2, [pc, #380]	@ (811628c <ip4_input+0x270>)
 8116110:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8116112:	697b      	ldr	r3, [r7, #20]
 8116114:	68db      	ldr	r3, [r3, #12]
 8116116:	4a5d      	ldr	r2, [pc, #372]	@ (811628c <ip4_input+0x270>)
 8116118:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 811611a:	4b5c      	ldr	r3, [pc, #368]	@ (811628c <ip4_input+0x270>)
 811611c:	695b      	ldr	r3, [r3, #20]
 811611e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8116122:	2be0      	cmp	r3, #224	@ 0xe0
 8116124:	d112      	bne.n	811614c <ip4_input+0x130>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8116126:	683b      	ldr	r3, [r7, #0]
 8116128:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811612c:	f003 0301 	and.w	r3, r3, #1
 8116130:	b2db      	uxtb	r3, r3
 8116132:	2b00      	cmp	r3, #0
 8116134:	d007      	beq.n	8116146 <ip4_input+0x12a>
 8116136:	683b      	ldr	r3, [r7, #0]
 8116138:	3304      	adds	r3, #4
 811613a:	681b      	ldr	r3, [r3, #0]
 811613c:	2b00      	cmp	r3, #0
 811613e:	d002      	beq.n	8116146 <ip4_input+0x12a>
      netif = inp;
 8116140:	683b      	ldr	r3, [r7, #0]
 8116142:	613b      	str	r3, [r7, #16]
 8116144:	e02a      	b.n	811619c <ip4_input+0x180>
    } else {
      netif = NULL;
 8116146:	2300      	movs	r3, #0
 8116148:	613b      	str	r3, [r7, #16]
 811614a:	e027      	b.n	811619c <ip4_input+0x180>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 811614c:	6838      	ldr	r0, [r7, #0]
 811614e:	f7ff ff03 	bl	8115f58 <ip4_input_accept>
 8116152:	4603      	mov	r3, r0
 8116154:	2b00      	cmp	r3, #0
 8116156:	d002      	beq.n	811615e <ip4_input+0x142>
      netif = inp;
 8116158:	683b      	ldr	r3, [r7, #0]
 811615a:	613b      	str	r3, [r7, #16]
 811615c:	e01e      	b.n	811619c <ip4_input+0x180>
    } else {
      netif = NULL;
 811615e:	2300      	movs	r3, #0
 8116160:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8116162:	4b4a      	ldr	r3, [pc, #296]	@ (811628c <ip4_input+0x270>)
 8116164:	695b      	ldr	r3, [r3, #20]
 8116166:	b2db      	uxtb	r3, r3
 8116168:	2b7f      	cmp	r3, #127	@ 0x7f
 811616a:	d017      	beq.n	811619c <ip4_input+0x180>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 811616c:	4b48      	ldr	r3, [pc, #288]	@ (8116290 <ip4_input+0x274>)
 811616e:	681b      	ldr	r3, [r3, #0]
 8116170:	613b      	str	r3, [r7, #16]
 8116172:	e00e      	b.n	8116192 <ip4_input+0x176>
          if (netif == inp) {
 8116174:	693a      	ldr	r2, [r7, #16]
 8116176:	683b      	ldr	r3, [r7, #0]
 8116178:	429a      	cmp	r2, r3
 811617a:	d006      	beq.n	811618a <ip4_input+0x16e>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 811617c:	6938      	ldr	r0, [r7, #16]
 811617e:	f7ff feeb 	bl	8115f58 <ip4_input_accept>
 8116182:	4603      	mov	r3, r0
 8116184:	2b00      	cmp	r3, #0
 8116186:	d108      	bne.n	811619a <ip4_input+0x17e>
 8116188:	e000      	b.n	811618c <ip4_input+0x170>
            continue;
 811618a:	bf00      	nop
        NETIF_FOREACH(netif) {
 811618c:	693b      	ldr	r3, [r7, #16]
 811618e:	681b      	ldr	r3, [r3, #0]
 8116190:	613b      	str	r3, [r7, #16]
 8116192:	693b      	ldr	r3, [r7, #16]
 8116194:	2b00      	cmp	r3, #0
 8116196:	d1ed      	bne.n	8116174 <ip4_input+0x158>
 8116198:	e000      	b.n	811619c <ip4_input+0x180>
            break;
 811619a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 811619c:	4b3b      	ldr	r3, [pc, #236]	@ (811628c <ip4_input+0x270>)
 811619e:	691b      	ldr	r3, [r3, #16]
 81161a0:	6839      	ldr	r1, [r7, #0]
 81161a2:	4618      	mov	r0, r3
 81161a4:	f000 fafa 	bl	811679c <ip4_addr_isbroadcast_u32>
 81161a8:	4603      	mov	r3, r0
 81161aa:	2b00      	cmp	r3, #0
 81161ac:	d105      	bne.n	81161ba <ip4_input+0x19e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 81161ae:	4b37      	ldr	r3, [pc, #220]	@ (811628c <ip4_input+0x270>)
 81161b0:	691b      	ldr	r3, [r3, #16]
 81161b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 81161b6:	2be0      	cmp	r3, #224	@ 0xe0
 81161b8:	d10a      	bne.n	81161d0 <ip4_input+0x1b4>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
 81161ba:	4836      	ldr	r0, [pc, #216]	@ (8116294 <ip4_input+0x278>)
 81161bc:	f00c f8c2 	bl	8122344 <puts>
 81161c0:	200d      	movs	r0, #13
 81161c2:	f00c f861 	bl	8122288 <putchar>
      /* free (drop) packet pbufs */
      pbuf_free(p);
 81161c6:	6878      	ldr	r0, [r7, #4]
 81161c8:	f002 ffd8 	bl	811917c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 81161cc:	2300      	movs	r3, #0
 81161ce:	e0ea      	b.n	81163a6 <ip4_input+0x38a>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 81161d0:	693b      	ldr	r3, [r7, #16]
 81161d2:	2b00      	cmp	r3, #0
 81161d4:	d10a      	bne.n	81161ec <ip4_input+0x1d0>
    /* packet not for us, route or discard */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: packet not for us.\n"));
 81161d6:	4830      	ldr	r0, [pc, #192]	@ (8116298 <ip4_input+0x27c>)
 81161d8:	f00c f8b4 	bl	8122344 <puts>
 81161dc:	200d      	movs	r0, #13
 81161de:	f00c f853 	bl	8122288 <putchar>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 81161e2:	6878      	ldr	r0, [r7, #4]
 81161e4:	f002 ffca 	bl	811917c <pbuf_free>
    return ERR_OK;
 81161e8:	2300      	movs	r3, #0
 81161ea:	e0dc      	b.n	81163a6 <ip4_input+0x38a>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 81161ec:	697b      	ldr	r3, [r7, #20]
 81161ee:	88db      	ldrh	r3, [r3, #6]
 81161f0:	b29b      	uxth	r3, r3
 81161f2:	461a      	mov	r2, r3
 81161f4:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 81161f8:	4013      	ands	r3, r2
 81161fa:	2b00      	cmp	r3, #0
 81161fc:	d053      	beq.n	81162a6 <ip4_input+0x28a>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
 81161fe:	697b      	ldr	r3, [r7, #20]
 8116200:	889b      	ldrh	r3, [r3, #4]
 8116202:	b29b      	uxth	r3, r3
 8116204:	4618      	mov	r0, r3
 8116206:	f7fe f819 	bl	811423c <lwip_htons>
 811620a:	4603      	mov	r3, r0
 811620c:	461d      	mov	r5, r3
 811620e:	687b      	ldr	r3, [r7, #4]
 8116210:	891b      	ldrh	r3, [r3, #8]
 8116212:	461e      	mov	r6, r3
 8116214:	697b      	ldr	r3, [r7, #20]
 8116216:	885b      	ldrh	r3, [r3, #2]
 8116218:	b29b      	uxth	r3, r3
 811621a:	4618      	mov	r0, r3
 811621c:	f7fe f80e 	bl	811423c <lwip_htons>
 8116220:	4603      	mov	r3, r0
 8116222:	4698      	mov	r8, r3
 8116224:	697b      	ldr	r3, [r7, #20]
 8116226:	88db      	ldrh	r3, [r3, #6]
 8116228:	b29b      	uxth	r3, r3
 811622a:	f003 0320 	and.w	r3, r3, #32
 811622e:	2b00      	cmp	r3, #0
 8116230:	bf14      	ite	ne
 8116232:	2301      	movne	r3, #1
 8116234:	2300      	moveq	r3, #0
 8116236:	b2db      	uxtb	r3, r3
 8116238:	461c      	mov	r4, r3
 811623a:	697b      	ldr	r3, [r7, #20]
 811623c:	88db      	ldrh	r3, [r3, #6]
 811623e:	b29b      	uxth	r3, r3
 8116240:	4618      	mov	r0, r3
 8116242:	f7fd fffb 	bl	811423c <lwip_htons>
 8116246:	4603      	mov	r3, r0
 8116248:	f3c3 030c 	ubfx	r3, r3, #0, #13
 811624c:	b29b      	uxth	r3, r3
 811624e:	00db      	lsls	r3, r3, #3
 8116250:	b29b      	uxth	r3, r3
 8116252:	9301      	str	r3, [sp, #4]
 8116254:	9400      	str	r4, [sp, #0]
 8116256:	4643      	mov	r3, r8
 8116258:	4632      	mov	r2, r6
 811625a:	4629      	mov	r1, r5
 811625c:	480f      	ldr	r0, [pc, #60]	@ (811629c <ip4_input+0x280>)
 811625e:	f00c f801 	bl	8122264 <iprintf>
 8116262:	200d      	movs	r0, #13
 8116264:	f00c f810 	bl	8122288 <putchar>
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8116268:	6878      	ldr	r0, [r7, #4]
 811626a:	f000 ff97 	bl	811719c <ip4_reass>
 811626e:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8116270:	687b      	ldr	r3, [r7, #4]
 8116272:	2b00      	cmp	r3, #0
 8116274:	d114      	bne.n	81162a0 <ip4_input+0x284>
      return ERR_OK;
 8116276:	2300      	movs	r3, #0
 8116278:	e095      	b.n	81163a6 <ip4_input+0x38a>
 811627a:	bf00      	nop
 811627c:	081248bc 	.word	0x081248bc
 8116280:	081248f0 	.word	0x081248f0
 8116284:	08124934 	.word	0x08124934
 8116288:	08124984 	.word	0x08124984
 811628c:	1000b2b4 	.word	0x1000b2b4
 8116290:	10011e48 	.word	0x10011e48
 8116294:	081249c4 	.word	0x081249c4
 8116298:	081249ec 	.word	0x081249ec
 811629c:	08124a0c 	.word	0x08124a0c
    }
    iphdr = (const struct ip_hdr *)p->payload;
 81162a0:	687b      	ldr	r3, [r7, #4]
 81162a2:	685b      	ldr	r3, [r3, #4]
 81162a4:	617b      	str	r3, [r7, #20]
    return ERR_OK;
  }
#endif /* IP_OPTIONS_ALLOWED == 0 */

  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
 81162a6:	4842      	ldr	r0, [pc, #264]	@ (81163b0 <ip4_input+0x394>)
 81162a8:	f00c f84c 	bl	8122344 <puts>
 81162ac:	200d      	movs	r0, #13
 81162ae:	f00b ffeb 	bl	8122288 <putchar>
  ip4_debug_print(p);
 81162b2:	6878      	ldr	r0, [r7, #4]
 81162b4:	f000 f98a 	bl	81165cc <ip4_debug_print>
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));
 81162b8:	687b      	ldr	r3, [r7, #4]
 81162ba:	895b      	ldrh	r3, [r3, #10]
 81162bc:	4619      	mov	r1, r3
 81162be:	687b      	ldr	r3, [r7, #4]
 81162c0:	891b      	ldrh	r3, [r3, #8]
 81162c2:	461a      	mov	r2, r3
 81162c4:	483b      	ldr	r0, [pc, #236]	@ (81163b4 <ip4_input+0x398>)
 81162c6:	f00b ffcd 	bl	8122264 <iprintf>
 81162ca:	200d      	movs	r0, #13
 81162cc:	f00b ffdc 	bl	8122288 <putchar>

  ip_data.current_netif = netif;
 81162d0:	4a39      	ldr	r2, [pc, #228]	@ (81163b8 <ip4_input+0x39c>)
 81162d2:	693b      	ldr	r3, [r7, #16]
 81162d4:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 81162d6:	4a38      	ldr	r2, [pc, #224]	@ (81163b8 <ip4_input+0x39c>)
 81162d8:	683b      	ldr	r3, [r7, #0]
 81162da:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 81162dc:	4a36      	ldr	r2, [pc, #216]	@ (81163b8 <ip4_input+0x39c>)
 81162de:	697b      	ldr	r3, [r7, #20]
 81162e0:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 81162e2:	697b      	ldr	r3, [r7, #20]
 81162e4:	781b      	ldrb	r3, [r3, #0]
 81162e6:	f003 030f 	and.w	r3, r3, #15
 81162ea:	b2db      	uxtb	r3, r3
 81162ec:	009b      	lsls	r3, r3, #2
 81162ee:	b2db      	uxtb	r3, r3
 81162f0:	461a      	mov	r2, r3
 81162f2:	4b31      	ldr	r3, [pc, #196]	@ (81163b8 <ip4_input+0x39c>)
 81162f4:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 81162f6:	89fb      	ldrh	r3, [r7, #14]
 81162f8:	4619      	mov	r1, r3
 81162fa:	6878      	ldr	r0, [r7, #4]
 81162fc:	f002 feb8 	bl	8119070 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8116300:	697b      	ldr	r3, [r7, #20]
 8116302:	7a5b      	ldrb	r3, [r3, #9]
 8116304:	2b11      	cmp	r3, #17
 8116306:	d006      	beq.n	8116316 <ip4_input+0x2fa>
 8116308:	2b11      	cmp	r3, #17
 811630a:	dc13      	bgt.n	8116334 <ip4_input+0x318>
 811630c:	2b01      	cmp	r3, #1
 811630e:	d00c      	beq.n	811632a <ip4_input+0x30e>
 8116310:	2b06      	cmp	r3, #6
 8116312:	d005      	beq.n	8116320 <ip4_input+0x304>
 8116314:	e00e      	b.n	8116334 <ip4_input+0x318>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8116316:	6839      	ldr	r1, [r7, #0]
 8116318:	6878      	ldr	r0, [r7, #4]
 811631a:	f00a fa0d 	bl	8120738 <udp_input>
        break;
 811631e:	e02f      	b.n	8116380 <ip4_input+0x364>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8116320:	6839      	ldr	r1, [r7, #0]
 8116322:	6878      	ldr	r0, [r7, #4]
 8116324:	f005 fa8a 	bl	811b83c <tcp_input>
        break;
 8116328:	e02a      	b.n	8116380 <ip4_input+0x364>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 811632a:	6839      	ldr	r1, [r7, #0]
 811632c:	6878      	ldr	r0, [r7, #4]
 811632e:	f7ff fb01 	bl	8115934 <icmp_input>
        break;
 8116332:	e025      	b.n	8116380 <ip4_input+0x364>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8116334:	4b20      	ldr	r3, [pc, #128]	@ (81163b8 <ip4_input+0x39c>)
 8116336:	695b      	ldr	r3, [r3, #20]
 8116338:	6939      	ldr	r1, [r7, #16]
 811633a:	4618      	mov	r0, r3
 811633c:	f000 fa2e 	bl	811679c <ip4_addr_isbroadcast_u32>
 8116340:	4603      	mov	r3, r0
 8116342:	2b00      	cmp	r3, #0
 8116344:	d10f      	bne.n	8116366 <ip4_input+0x34a>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8116346:	4b1c      	ldr	r3, [pc, #112]	@ (81163b8 <ip4_input+0x39c>)
 8116348:	695b      	ldr	r3, [r3, #20]
 811634a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 811634e:	2be0      	cmp	r3, #224	@ 0xe0
 8116350:	d009      	beq.n	8116366 <ip4_input+0x34a>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8116352:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8116356:	4619      	mov	r1, r3
 8116358:	6878      	ldr	r0, [r7, #4]
 811635a:	f002 fefc 	bl	8119156 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 811635e:	2102      	movs	r1, #2
 8116360:	6878      	ldr	r0, [r7, #4]
 8116362:	f7ff fc0b 	bl	8115b7c <icmp_dest_unreach>
          }
#endif /* LWIP_ICMP */

          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));
 8116366:	697b      	ldr	r3, [r7, #20]
 8116368:	7a5b      	ldrb	r3, [r3, #9]
 811636a:	4619      	mov	r1, r3
 811636c:	4813      	ldr	r0, [pc, #76]	@ (81163bc <ip4_input+0x3a0>)
 811636e:	f00b ff79 	bl	8122264 <iprintf>
 8116372:	200d      	movs	r0, #13
 8116374:	f00b ff88 	bl	8122288 <putchar>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8116378:	6878      	ldr	r0, [r7, #4]
 811637a:	f002 feff 	bl	811917c <pbuf_free>
        break;
 811637e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8116380:	4b0d      	ldr	r3, [pc, #52]	@ (81163b8 <ip4_input+0x39c>)
 8116382:	2200      	movs	r2, #0
 8116384:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8116386:	4b0c      	ldr	r3, [pc, #48]	@ (81163b8 <ip4_input+0x39c>)
 8116388:	2200      	movs	r2, #0
 811638a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 811638c:	4b0a      	ldr	r3, [pc, #40]	@ (81163b8 <ip4_input+0x39c>)
 811638e:	2200      	movs	r2, #0
 8116390:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8116392:	4b09      	ldr	r3, [pc, #36]	@ (81163b8 <ip4_input+0x39c>)
 8116394:	2200      	movs	r2, #0
 8116396:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8116398:	4b07      	ldr	r3, [pc, #28]	@ (81163b8 <ip4_input+0x39c>)
 811639a:	2200      	movs	r2, #0
 811639c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 811639e:	4b06      	ldr	r3, [pc, #24]	@ (81163b8 <ip4_input+0x39c>)
 81163a0:	2200      	movs	r2, #0
 81163a2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 81163a4:	2300      	movs	r3, #0
}
 81163a6:	4618      	mov	r0, r3
 81163a8:	3718      	adds	r7, #24
 81163aa:	46bd      	mov	sp, r7
 81163ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81163b0:	08124a70 	.word	0x08124a70
 81163b4:	08124a7c 	.word	0x08124a7c
 81163b8:	1000b2b4 	.word	0x1000b2b4
 81163bc:	08124aa4 	.word	0x08124aa4

081163c0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 81163c0:	b580      	push	{r7, lr}
 81163c2:	b08a      	sub	sp, #40	@ 0x28
 81163c4:	af04      	add	r7, sp, #16
 81163c6:	60f8      	str	r0, [r7, #12]
 81163c8:	60b9      	str	r1, [r7, #8]
 81163ca:	607a      	str	r2, [r7, #4]
 81163cc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 81163ce:	68bb      	ldr	r3, [r7, #8]
 81163d0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 81163d2:	687b      	ldr	r3, [r7, #4]
 81163d4:	2b00      	cmp	r3, #0
 81163d6:	d009      	beq.n	81163ec <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 81163d8:	68bb      	ldr	r3, [r7, #8]
 81163da:	2b00      	cmp	r3, #0
 81163dc:	d003      	beq.n	81163e6 <ip4_output_if+0x26>
 81163de:	68bb      	ldr	r3, [r7, #8]
 81163e0:	681b      	ldr	r3, [r3, #0]
 81163e2:	2b00      	cmp	r3, #0
 81163e4:	d102      	bne.n	81163ec <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 81163e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81163e8:	3304      	adds	r3, #4
 81163ea:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 81163ec:	78fa      	ldrb	r2, [r7, #3]
 81163ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81163f0:	9302      	str	r3, [sp, #8]
 81163f2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 81163f6:	9301      	str	r3, [sp, #4]
 81163f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 81163fc:	9300      	str	r3, [sp, #0]
 81163fe:	4613      	mov	r3, r2
 8116400:	687a      	ldr	r2, [r7, #4]
 8116402:	6979      	ldr	r1, [r7, #20]
 8116404:	68f8      	ldr	r0, [r7, #12]
 8116406:	f000 f805 	bl	8116414 <ip4_output_if_src>
 811640a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 811640c:	4618      	mov	r0, r3
 811640e:	3718      	adds	r7, #24
 8116410:	46bd      	mov	sp, r7
 8116412:	bd80      	pop	{r7, pc}

08116414 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8116414:	b580      	push	{r7, lr}
 8116416:	b088      	sub	sp, #32
 8116418:	af00      	add	r7, sp, #0
 811641a:	60f8      	str	r0, [r7, #12]
 811641c:	60b9      	str	r1, [r7, #8]
 811641e:	607a      	str	r2, [r7, #4]
 8116420:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8116422:	68fb      	ldr	r3, [r7, #12]
 8116424:	7b9b      	ldrb	r3, [r3, #14]
 8116426:	2b01      	cmp	r3, #1
 8116428:	d006      	beq.n	8116438 <ip4_output_if_src+0x24>
 811642a:	4b5e      	ldr	r3, [pc, #376]	@ (81165a4 <ip4_output_if_src+0x190>)
 811642c:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8116430:	495d      	ldr	r1, [pc, #372]	@ (81165a8 <ip4_output_if_src+0x194>)
 8116432:	485e      	ldr	r0, [pc, #376]	@ (81165ac <ip4_output_if_src+0x198>)
 8116434:	f00b ff16 	bl	8122264 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8116438:	687b      	ldr	r3, [r7, #4]
 811643a:	2b00      	cmp	r3, #0
 811643c:	d066      	beq.n	811650c <ip4_output_if_src+0xf8>
    u16_t ip_hlen = IP_HLEN;
 811643e:	2314      	movs	r3, #20
 8116440:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8116442:	2114      	movs	r1, #20
 8116444:	68f8      	ldr	r0, [r7, #12]
 8116446:	f002 fe03 	bl	8119050 <pbuf_add_header>
 811644a:	4603      	mov	r3, r0
 811644c:	2b00      	cmp	r3, #0
 811644e:	d008      	beq.n	8116462 <ip4_output_if_src+0x4e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));
 8116450:	4857      	ldr	r0, [pc, #348]	@ (81165b0 <ip4_output_if_src+0x19c>)
 8116452:	f00b ff77 	bl	8122344 <puts>
 8116456:	200d      	movs	r0, #13
 8116458:	f00b ff16 	bl	8122288 <putchar>

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 811645c:	f06f 0301 	mvn.w	r3, #1
 8116460:	e09c      	b.n	811659c <ip4_output_if_src+0x188>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8116462:	68fb      	ldr	r3, [r7, #12]
 8116464:	685b      	ldr	r3, [r3, #4]
 8116466:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8116468:	68fb      	ldr	r3, [r7, #12]
 811646a:	895b      	ldrh	r3, [r3, #10]
 811646c:	2b13      	cmp	r3, #19
 811646e:	d806      	bhi.n	811647e <ip4_output_if_src+0x6a>
 8116470:	4b4c      	ldr	r3, [pc, #304]	@ (81165a4 <ip4_output_if_src+0x190>)
 8116472:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8116476:	494f      	ldr	r1, [pc, #316]	@ (81165b4 <ip4_output_if_src+0x1a0>)
 8116478:	484c      	ldr	r0, [pc, #304]	@ (81165ac <ip4_output_if_src+0x198>)
 811647a:	f00b fef3 	bl	8122264 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 811647e:	69fb      	ldr	r3, [r7, #28]
 8116480:	78fa      	ldrb	r2, [r7, #3]
 8116482:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8116484:	69fb      	ldr	r3, [r7, #28]
 8116486:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 811648a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 811648c:	687b      	ldr	r3, [r7, #4]
 811648e:	681a      	ldr	r2, [r3, #0]
 8116490:	69fb      	ldr	r3, [r7, #28]
 8116492:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8116494:	8b7b      	ldrh	r3, [r7, #26]
 8116496:	089b      	lsrs	r3, r3, #2
 8116498:	b29b      	uxth	r3, r3
 811649a:	b2db      	uxtb	r3, r3
 811649c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81164a0:	b2da      	uxtb	r2, r3
 81164a2:	69fb      	ldr	r3, [r7, #28]
 81164a4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 81164a6:	69fb      	ldr	r3, [r7, #28]
 81164a8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 81164ac:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 81164ae:	68fb      	ldr	r3, [r7, #12]
 81164b0:	891b      	ldrh	r3, [r3, #8]
 81164b2:	4618      	mov	r0, r3
 81164b4:	f7fd fec2 	bl	811423c <lwip_htons>
 81164b8:	4603      	mov	r3, r0
 81164ba:	461a      	mov	r2, r3
 81164bc:	69fb      	ldr	r3, [r7, #28]
 81164be:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 81164c0:	69fb      	ldr	r3, [r7, #28]
 81164c2:	2200      	movs	r2, #0
 81164c4:	719a      	strb	r2, [r3, #6]
 81164c6:	2200      	movs	r2, #0
 81164c8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 81164ca:	4b3b      	ldr	r3, [pc, #236]	@ (81165b8 <ip4_output_if_src+0x1a4>)
 81164cc:	881b      	ldrh	r3, [r3, #0]
 81164ce:	4618      	mov	r0, r3
 81164d0:	f7fd feb4 	bl	811423c <lwip_htons>
 81164d4:	4603      	mov	r3, r0
 81164d6:	461a      	mov	r2, r3
 81164d8:	69fb      	ldr	r3, [r7, #28]
 81164da:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 81164dc:	4b36      	ldr	r3, [pc, #216]	@ (81165b8 <ip4_output_if_src+0x1a4>)
 81164de:	881b      	ldrh	r3, [r3, #0]
 81164e0:	3301      	adds	r3, #1
 81164e2:	b29a      	uxth	r2, r3
 81164e4:	4b34      	ldr	r3, [pc, #208]	@ (81165b8 <ip4_output_if_src+0x1a4>)
 81164e6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 81164e8:	68bb      	ldr	r3, [r7, #8]
 81164ea:	2b00      	cmp	r3, #0
 81164ec:	d104      	bne.n	81164f8 <ip4_output_if_src+0xe4>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 81164ee:	4b33      	ldr	r3, [pc, #204]	@ (81165bc <ip4_output_if_src+0x1a8>)
 81164f0:	681a      	ldr	r2, [r3, #0]
 81164f2:	69fb      	ldr	r3, [r7, #28]
 81164f4:	60da      	str	r2, [r3, #12]
 81164f6:	e003      	b.n	8116500 <ip4_output_if_src+0xec>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 81164f8:	68bb      	ldr	r3, [r7, #8]
 81164fa:	681a      	ldr	r2, [r3, #0]
 81164fc:	69fb      	ldr	r3, [r7, #28]
 81164fe:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8116500:	69fb      	ldr	r3, [r7, #28]
 8116502:	2200      	movs	r2, #0
 8116504:	729a      	strb	r2, [r3, #10]
 8116506:	2200      	movs	r2, #0
 8116508:	72da      	strb	r2, [r3, #11]
 811650a:	e015      	b.n	8116538 <ip4_output_if_src+0x124>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 811650c:	68fb      	ldr	r3, [r7, #12]
 811650e:	895b      	ldrh	r3, [r3, #10]
 8116510:	2b13      	cmp	r3, #19
 8116512:	d808      	bhi.n	8116526 <ip4_output_if_src+0x112>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
 8116514:	482a      	ldr	r0, [pc, #168]	@ (81165c0 <ip4_output_if_src+0x1ac>)
 8116516:	f00b ff15 	bl	8122344 <puts>
 811651a:	200d      	movs	r0, #13
 811651c:	f00b feb4 	bl	8122288 <putchar>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8116520:	f06f 0301 	mvn.w	r3, #1
 8116524:	e03a      	b.n	811659c <ip4_output_if_src+0x188>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8116526:	68fb      	ldr	r3, [r7, #12]
 8116528:	685b      	ldr	r3, [r3, #4]
 811652a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 811652c:	69fb      	ldr	r3, [r7, #28]
 811652e:	691b      	ldr	r3, [r3, #16]
 8116530:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8116532:	f107 0314 	add.w	r3, r7, #20
 8116536:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
 8116538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811653a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 811653e:	4619      	mov	r1, r3
 8116540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8116542:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8116546:	461a      	mov	r2, r3
 8116548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811654a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811654e:	481d      	ldr	r0, [pc, #116]	@ (81165c4 <ip4_output_if_src+0x1b0>)
 8116550:	f00b fe88 	bl	8122264 <iprintf>
 8116554:	200d      	movs	r0, #13
 8116556:	f00b fe97 	bl	8122288 <putchar>
  ip4_debug_print(p);
 811655a:	68f8      	ldr	r0, [r7, #12]
 811655c:	f000 f836 	bl	81165cc <ip4_debug_print>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8116560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8116562:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8116564:	2b00      	cmp	r3, #0
 8116566:	d00c      	beq.n	8116582 <ip4_output_if_src+0x16e>
 8116568:	68fb      	ldr	r3, [r7, #12]
 811656a:	891a      	ldrh	r2, [r3, #8]
 811656c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811656e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8116570:	429a      	cmp	r2, r3
 8116572:	d906      	bls.n	8116582 <ip4_output_if_src+0x16e>
    return ip4_frag(p, netif, dest);
 8116574:	687a      	ldr	r2, [r7, #4]
 8116576:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8116578:	68f8      	ldr	r0, [r7, #12]
 811657a:	f001 f803 	bl	8117584 <ip4_frag>
 811657e:	4603      	mov	r3, r0
 8116580:	e00c      	b.n	811659c <ip4_output_if_src+0x188>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
 8116582:	4811      	ldr	r0, [pc, #68]	@ (81165c8 <ip4_output_if_src+0x1b4>)
 8116584:	f00b fede 	bl	8122344 <puts>
 8116588:	200d      	movs	r0, #13
 811658a:	f00b fe7d 	bl	8122288 <putchar>
  return netif->output(netif, p, dest);
 811658e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8116590:	695b      	ldr	r3, [r3, #20]
 8116592:	687a      	ldr	r2, [r7, #4]
 8116594:	68f9      	ldr	r1, [r7, #12]
 8116596:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8116598:	4798      	blx	r3
 811659a:	4603      	mov	r3, r0
}
 811659c:	4618      	mov	r0, r3
 811659e:	3720      	adds	r7, #32
 81165a0:	46bd      	mov	sp, r7
 81165a2:	bd80      	pop	{r7, pc}
 81165a4:	08124ac8 	.word	0x08124ac8
 81165a8:	08124b3c 	.word	0x08124b3c
 81165ac:	08124b48 	.word	0x08124b48
 81165b0:	08124b70 	.word	0x08124b70
 81165b4:	08124ba4 	.word	0x08124ba4
 81165b8:	1000b2cc 	.word	0x1000b2cc
 81165bc:	081289b8 	.word	0x081289b8
 81165c0:	08124bd4 	.word	0x08124bd4
 81165c4:	08124c08 	.word	0x08124c08
 81165c8:	08124c20 	.word	0x08124c20

081165cc <ip4_debug_print>:
/* Print an IP header by using LWIP_DEBUGF
 * @param p an IP packet, p->payload pointing to the IP header
 */
void
ip4_debug_print(struct pbuf *p)
{
 81165cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81165d0:	b086      	sub	sp, #24
 81165d2:	af02      	add	r7, sp, #8
 81165d4:	6078      	str	r0, [r7, #4]
  struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 81165d6:	687b      	ldr	r3, [r7, #4]
 81165d8:	685b      	ldr	r3, [r3, #4]
 81165da:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(IP_DEBUG, ("IP header:\n"));
 81165dc:	4868      	ldr	r0, [pc, #416]	@ (8116780 <ip4_debug_print+0x1b4>)
 81165de:	f00b feb1 	bl	8122344 <puts>
 81165e2:	200d      	movs	r0, #13
 81165e4:	f00b fe50 	bl	8122288 <putchar>
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 81165e8:	4866      	ldr	r0, [pc, #408]	@ (8116784 <ip4_debug_print+0x1b8>)
 81165ea:	f00b feab 	bl	8122344 <puts>
 81165ee:	200d      	movs	r0, #13
 81165f0:	f00b fe4a 	bl	8122288 <putchar>
  LWIP_DEBUGF(IP_DEBUG, ("|%2"S16_F" |%2"S16_F" |  0x%02"X16_F" |     %5"U16_F"     | (v, hl, tos, len)\n",
 81165f4:	68fb      	ldr	r3, [r7, #12]
 81165f6:	781b      	ldrb	r3, [r3, #0]
 81165f8:	091b      	lsrs	r3, r3, #4
 81165fa:	b2db      	uxtb	r3, r3
 81165fc:	461d      	mov	r5, r3
 81165fe:	68fb      	ldr	r3, [r7, #12]
 8116600:	781b      	ldrb	r3, [r3, #0]
 8116602:	f003 040f 	and.w	r4, r3, #15
 8116606:	68fb      	ldr	r3, [r7, #12]
 8116608:	785b      	ldrb	r3, [r3, #1]
 811660a:	461e      	mov	r6, r3
 811660c:	68fb      	ldr	r3, [r7, #12]
 811660e:	885b      	ldrh	r3, [r3, #2]
 8116610:	b29b      	uxth	r3, r3
 8116612:	4618      	mov	r0, r3
 8116614:	f7fd fe12 	bl	811423c <lwip_htons>
 8116618:	4603      	mov	r3, r0
 811661a:	9300      	str	r3, [sp, #0]
 811661c:	4633      	mov	r3, r6
 811661e:	4622      	mov	r2, r4
 8116620:	4629      	mov	r1, r5
 8116622:	4859      	ldr	r0, [pc, #356]	@ (8116788 <ip4_debug_print+0x1bc>)
 8116624:	f00b fe1e 	bl	8122264 <iprintf>
 8116628:	200d      	movs	r0, #13
 811662a:	f00b fe2d 	bl	8122288 <putchar>
                         (u16_t)IPH_V(iphdr),
                         (u16_t)IPH_HL(iphdr),
                         (u16_t)IPH_TOS(iphdr),
                         lwip_ntohs(IPH_LEN(iphdr))));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 811662e:	4855      	ldr	r0, [pc, #340]	@ (8116784 <ip4_debug_print+0x1b8>)
 8116630:	f00b fe88 	bl	8122344 <puts>
 8116634:	200d      	movs	r0, #13
 8116636:	f00b fe27 	bl	8122288 <putchar>
  LWIP_DEBUGF(IP_DEBUG, ("|    %5"U16_F"      |%"U16_F"%"U16_F"%"U16_F"|    %4"U16_F"   | (id, flags, offset)\n",
 811663a:	68fb      	ldr	r3, [r7, #12]
 811663c:	889b      	ldrh	r3, [r3, #4]
 811663e:	b29b      	uxth	r3, r3
 8116640:	4618      	mov	r0, r3
 8116642:	f7fd fdfb 	bl	811423c <lwip_htons>
 8116646:	4603      	mov	r3, r0
 8116648:	4698      	mov	r8, r3
 811664a:	68fb      	ldr	r3, [r7, #12]
 811664c:	88db      	ldrh	r3, [r3, #6]
 811664e:	b29b      	uxth	r3, r3
 8116650:	4618      	mov	r0, r3
 8116652:	f7fd fdf3 	bl	811423c <lwip_htons>
 8116656:	4603      	mov	r3, r0
 8116658:	0bdb      	lsrs	r3, r3, #15
 811665a:	b29b      	uxth	r3, r3
 811665c:	f003 0501 	and.w	r5, r3, #1
 8116660:	68fb      	ldr	r3, [r7, #12]
 8116662:	88db      	ldrh	r3, [r3, #6]
 8116664:	b29b      	uxth	r3, r3
 8116666:	4618      	mov	r0, r3
 8116668:	f7fd fde8 	bl	811423c <lwip_htons>
 811666c:	4603      	mov	r3, r0
 811666e:	0b9b      	lsrs	r3, r3, #14
 8116670:	b29b      	uxth	r3, r3
 8116672:	f003 0601 	and.w	r6, r3, #1
 8116676:	68fb      	ldr	r3, [r7, #12]
 8116678:	88db      	ldrh	r3, [r3, #6]
 811667a:	b29b      	uxth	r3, r3
 811667c:	4618      	mov	r0, r3
 811667e:	f7fd fddd 	bl	811423c <lwip_htons>
 8116682:	4603      	mov	r3, r0
 8116684:	0b5b      	lsrs	r3, r3, #13
 8116686:	b29b      	uxth	r3, r3
 8116688:	f003 0401 	and.w	r4, r3, #1
 811668c:	68fb      	ldr	r3, [r7, #12]
 811668e:	88db      	ldrh	r3, [r3, #6]
 8116690:	b29b      	uxth	r3, r3
 8116692:	4618      	mov	r0, r3
 8116694:	f7fd fdd2 	bl	811423c <lwip_htons>
 8116698:	4603      	mov	r3, r0
 811669a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 811669e:	9301      	str	r3, [sp, #4]
 81166a0:	9400      	str	r4, [sp, #0]
 81166a2:	4633      	mov	r3, r6
 81166a4:	462a      	mov	r2, r5
 81166a6:	4641      	mov	r1, r8
 81166a8:	4838      	ldr	r0, [pc, #224]	@ (811678c <ip4_debug_print+0x1c0>)
 81166aa:	f00b fddb 	bl	8122264 <iprintf>
 81166ae:	200d      	movs	r0, #13
 81166b0:	f00b fdea 	bl	8122288 <putchar>
                         lwip_ntohs(IPH_ID(iphdr)),
                         (u16_t)(lwip_ntohs(IPH_OFFSET(iphdr)) >> 15 & 1),
                         (u16_t)(lwip_ntohs(IPH_OFFSET(iphdr)) >> 14 & 1),
                         (u16_t)(lwip_ntohs(IPH_OFFSET(iphdr)) >> 13 & 1),
                         (u16_t)(lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 81166b4:	4833      	ldr	r0, [pc, #204]	@ (8116784 <ip4_debug_print+0x1b8>)
 81166b6:	f00b fe45 	bl	8122344 <puts>
 81166ba:	200d      	movs	r0, #13
 81166bc:	f00b fde4 	bl	8122288 <putchar>
  LWIP_DEBUGF(IP_DEBUG, ("|  %3"U16_F"  |  %3"U16_F"  |    0x%04"X16_F"     | (ttl, proto, chksum)\n",
 81166c0:	68fb      	ldr	r3, [r7, #12]
 81166c2:	7a1b      	ldrb	r3, [r3, #8]
 81166c4:	461c      	mov	r4, r3
 81166c6:	68fb      	ldr	r3, [r7, #12]
 81166c8:	7a5b      	ldrb	r3, [r3, #9]
 81166ca:	461d      	mov	r5, r3
 81166cc:	68fb      	ldr	r3, [r7, #12]
 81166ce:	895b      	ldrh	r3, [r3, #10]
 81166d0:	b29b      	uxth	r3, r3
 81166d2:	4618      	mov	r0, r3
 81166d4:	f7fd fdb2 	bl	811423c <lwip_htons>
 81166d8:	4603      	mov	r3, r0
 81166da:	462a      	mov	r2, r5
 81166dc:	4621      	mov	r1, r4
 81166de:	482c      	ldr	r0, [pc, #176]	@ (8116790 <ip4_debug_print+0x1c4>)
 81166e0:	f00b fdc0 	bl	8122264 <iprintf>
 81166e4:	200d      	movs	r0, #13
 81166e6:	f00b fdcf 	bl	8122288 <putchar>
                         (u16_t)IPH_TTL(iphdr),
                         (u16_t)IPH_PROTO(iphdr),
                         lwip_ntohs(IPH_CHKSUM(iphdr))));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 81166ea:	4826      	ldr	r0, [pc, #152]	@ (8116784 <ip4_debug_print+0x1b8>)
 81166ec:	f00b fe2a 	bl	8122344 <puts>
 81166f0:	200d      	movs	r0, #13
 81166f2:	f00b fdc9 	bl	8122288 <putchar>
  LWIP_DEBUGF(IP_DEBUG, ("|  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  | (src)\n",
 81166f6:	68fb      	ldr	r3, [r7, #12]
 81166f8:	68db      	ldr	r3, [r3, #12]
 81166fa:	b2db      	uxtb	r3, r3
 81166fc:	4619      	mov	r1, r3
 81166fe:	68fb      	ldr	r3, [r7, #12]
 8116700:	68db      	ldr	r3, [r3, #12]
 8116702:	0a1b      	lsrs	r3, r3, #8
 8116704:	b2db      	uxtb	r3, r3
 8116706:	461a      	mov	r2, r3
 8116708:	68fb      	ldr	r3, [r7, #12]
 811670a:	68db      	ldr	r3, [r3, #12]
 811670c:	0c1b      	lsrs	r3, r3, #16
 811670e:	b2db      	uxtb	r3, r3
 8116710:	4618      	mov	r0, r3
 8116712:	68fb      	ldr	r3, [r7, #12]
 8116714:	68db      	ldr	r3, [r3, #12]
 8116716:	0e1b      	lsrs	r3, r3, #24
 8116718:	b2db      	uxtb	r3, r3
 811671a:	9300      	str	r3, [sp, #0]
 811671c:	4603      	mov	r3, r0
 811671e:	481d      	ldr	r0, [pc, #116]	@ (8116794 <ip4_debug_print+0x1c8>)
 8116720:	f00b fda0 	bl	8122264 <iprintf>
 8116724:	200d      	movs	r0, #13
 8116726:	f00b fdaf 	bl	8122288 <putchar>
                         ip4_addr1_16_val(iphdr->src),
                         ip4_addr2_16_val(iphdr->src),
                         ip4_addr3_16_val(iphdr->src),
                         ip4_addr4_16_val(iphdr->src)));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 811672a:	4816      	ldr	r0, [pc, #88]	@ (8116784 <ip4_debug_print+0x1b8>)
 811672c:	f00b fe0a 	bl	8122344 <puts>
 8116730:	200d      	movs	r0, #13
 8116732:	f00b fda9 	bl	8122288 <putchar>
  LWIP_DEBUGF(IP_DEBUG, ("|  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  | (dest)\n",
 8116736:	68fb      	ldr	r3, [r7, #12]
 8116738:	691b      	ldr	r3, [r3, #16]
 811673a:	b2db      	uxtb	r3, r3
 811673c:	4619      	mov	r1, r3
 811673e:	68fb      	ldr	r3, [r7, #12]
 8116740:	691b      	ldr	r3, [r3, #16]
 8116742:	0a1b      	lsrs	r3, r3, #8
 8116744:	b2db      	uxtb	r3, r3
 8116746:	461a      	mov	r2, r3
 8116748:	68fb      	ldr	r3, [r7, #12]
 811674a:	691b      	ldr	r3, [r3, #16]
 811674c:	0c1b      	lsrs	r3, r3, #16
 811674e:	b2db      	uxtb	r3, r3
 8116750:	4618      	mov	r0, r3
 8116752:	68fb      	ldr	r3, [r7, #12]
 8116754:	691b      	ldr	r3, [r3, #16]
 8116756:	0e1b      	lsrs	r3, r3, #24
 8116758:	b2db      	uxtb	r3, r3
 811675a:	9300      	str	r3, [sp, #0]
 811675c:	4603      	mov	r3, r0
 811675e:	480e      	ldr	r0, [pc, #56]	@ (8116798 <ip4_debug_print+0x1cc>)
 8116760:	f00b fd80 	bl	8122264 <iprintf>
 8116764:	200d      	movs	r0, #13
 8116766:	f00b fd8f 	bl	8122288 <putchar>
                         ip4_addr1_16_val(iphdr->dest),
                         ip4_addr2_16_val(iphdr->dest),
                         ip4_addr3_16_val(iphdr->dest),
                         ip4_addr4_16_val(iphdr->dest)));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 811676a:	4806      	ldr	r0, [pc, #24]	@ (8116784 <ip4_debug_print+0x1b8>)
 811676c:	f00b fdea 	bl	8122344 <puts>
 8116770:	200d      	movs	r0, #13
 8116772:	f00b fd89 	bl	8122288 <putchar>
}
 8116776:	bf00      	nop
 8116778:	3710      	adds	r7, #16
 811677a:	46bd      	mov	sp, r7
 811677c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8116780:	08124c70 	.word	0x08124c70
 8116784:	08124c7c 	.word	0x08124c7c
 8116788:	08124ca0 	.word	0x08124ca0
 811678c:	08124cdc 	.word	0x08124cdc
 8116790:	08124d18 	.word	0x08124d18
 8116794:	08124d54 	.word	0x08124d54
 8116798:	08124d84 	.word	0x08124d84

0811679c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 811679c:	b480      	push	{r7}
 811679e:	b085      	sub	sp, #20
 81167a0:	af00      	add	r7, sp, #0
 81167a2:	6078      	str	r0, [r7, #4]
 81167a4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 81167a6:	687b      	ldr	r3, [r7, #4]
 81167a8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 81167aa:	687b      	ldr	r3, [r7, #4]
 81167ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 81167b0:	d002      	beq.n	81167b8 <ip4_addr_isbroadcast_u32+0x1c>
 81167b2:	687b      	ldr	r3, [r7, #4]
 81167b4:	2b00      	cmp	r3, #0
 81167b6:	d101      	bne.n	81167bc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 81167b8:	2301      	movs	r3, #1
 81167ba:	e02a      	b.n	8116812 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 81167bc:	683b      	ldr	r3, [r7, #0]
 81167be:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 81167c2:	f003 0302 	and.w	r3, r3, #2
 81167c6:	2b00      	cmp	r3, #0
 81167c8:	d101      	bne.n	81167ce <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 81167ca:	2300      	movs	r3, #0
 81167cc:	e021      	b.n	8116812 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 81167ce:	683b      	ldr	r3, [r7, #0]
 81167d0:	3304      	adds	r3, #4
 81167d2:	681b      	ldr	r3, [r3, #0]
 81167d4:	687a      	ldr	r2, [r7, #4]
 81167d6:	429a      	cmp	r2, r3
 81167d8:	d101      	bne.n	81167de <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 81167da:	2300      	movs	r3, #0
 81167dc:	e019      	b.n	8116812 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 81167de:	68fa      	ldr	r2, [r7, #12]
 81167e0:	683b      	ldr	r3, [r7, #0]
 81167e2:	3304      	adds	r3, #4
 81167e4:	681b      	ldr	r3, [r3, #0]
 81167e6:	405a      	eors	r2, r3
 81167e8:	683b      	ldr	r3, [r7, #0]
 81167ea:	3308      	adds	r3, #8
 81167ec:	681b      	ldr	r3, [r3, #0]
 81167ee:	4013      	ands	r3, r2
 81167f0:	2b00      	cmp	r3, #0
 81167f2:	d10d      	bne.n	8116810 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 81167f4:	683b      	ldr	r3, [r7, #0]
 81167f6:	3308      	adds	r3, #8
 81167f8:	681b      	ldr	r3, [r3, #0]
 81167fa:	43da      	mvns	r2, r3
 81167fc:	687b      	ldr	r3, [r7, #4]
 81167fe:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8116800:	683b      	ldr	r3, [r7, #0]
 8116802:	3308      	adds	r3, #8
 8116804:	681b      	ldr	r3, [r3, #0]
 8116806:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8116808:	429a      	cmp	r2, r3
 811680a:	d101      	bne.n	8116810 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 811680c:	2301      	movs	r3, #1
 811680e:	e000      	b.n	8116812 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8116810:	2300      	movs	r3, #0
  }
}
 8116812:	4618      	mov	r0, r3
 8116814:	3714      	adds	r7, #20
 8116816:	46bd      	mov	sp, r7
 8116818:	f85d 7b04 	ldr.w	r7, [sp], #4
 811681c:	4770      	bx	lr
	...

08116820 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8116820:	b580      	push	{r7, lr}
 8116822:	b08a      	sub	sp, #40	@ 0x28
 8116824:	af00      	add	r7, sp, #0
 8116826:	6078      	str	r0, [r7, #4]
 8116828:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 811682a:	f107 030c 	add.w	r3, r7, #12
 811682e:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8116830:	687b      	ldr	r3, [r7, #4]
 8116832:	781b      	ldrb	r3, [r3, #0]
 8116834:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8116838:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 811683c:	3301      	adds	r3, #1
 811683e:	4a89      	ldr	r2, [pc, #548]	@ (8116a64 <ip4addr_aton+0x244>)
 8116840:	4413      	add	r3, r2
 8116842:	781b      	ldrb	r3, [r3, #0]
 8116844:	f003 0304 	and.w	r3, r3, #4
 8116848:	2b00      	cmp	r3, #0
 811684a:	d101      	bne.n	8116850 <ip4addr_aton+0x30>
      return 0;
 811684c:	2300      	movs	r3, #0
 811684e:	e105      	b.n	8116a5c <ip4addr_aton+0x23c>
    }
    val = 0;
 8116850:	2300      	movs	r3, #0
 8116852:	627b      	str	r3, [r7, #36]	@ 0x24
    base = 10;
 8116854:	230a      	movs	r3, #10
 8116856:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (c == '0') {
 811685a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 811685e:	2b30      	cmp	r3, #48	@ 0x30
 8116860:	d11c      	bne.n	811689c <ip4addr_aton+0x7c>
      c = *++cp;
 8116862:	687b      	ldr	r3, [r7, #4]
 8116864:	3301      	adds	r3, #1
 8116866:	607b      	str	r3, [r7, #4]
 8116868:	687b      	ldr	r3, [r7, #4]
 811686a:	781b      	ldrb	r3, [r3, #0]
 811686c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (c == 'x' || c == 'X') {
 8116870:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8116874:	2b78      	cmp	r3, #120	@ 0x78
 8116876:	d003      	beq.n	8116880 <ip4addr_aton+0x60>
 8116878:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 811687c:	2b58      	cmp	r3, #88	@ 0x58
 811687e:	d10a      	bne.n	8116896 <ip4addr_aton+0x76>
        base = 16;
 8116880:	2310      	movs	r3, #16
 8116882:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        c = *++cp;
 8116886:	687b      	ldr	r3, [r7, #4]
 8116888:	3301      	adds	r3, #1
 811688a:	607b      	str	r3, [r7, #4]
 811688c:	687b      	ldr	r3, [r7, #4]
 811688e:	781b      	ldrb	r3, [r3, #0]
 8116890:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8116894:	e002      	b.n	811689c <ip4addr_aton+0x7c>
      } else {
        base = 8;
 8116896:	2308      	movs	r3, #8
 8116898:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 811689c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 81168a0:	3301      	adds	r3, #1
 81168a2:	4a70      	ldr	r2, [pc, #448]	@ (8116a64 <ip4addr_aton+0x244>)
 81168a4:	4413      	add	r3, r2
 81168a6:	781b      	ldrb	r3, [r3, #0]
 81168a8:	f003 0304 	and.w	r3, r3, #4
 81168ac:	2b00      	cmp	r3, #0
 81168ae:	d011      	beq.n	81168d4 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 81168b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 81168b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81168b6:	fb03 f202 	mul.w	r2, r3, r2
 81168ba:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 81168be:	4413      	add	r3, r2
 81168c0:	3b30      	subs	r3, #48	@ 0x30
 81168c2:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 81168c4:	687b      	ldr	r3, [r7, #4]
 81168c6:	3301      	adds	r3, #1
 81168c8:	607b      	str	r3, [r7, #4]
 81168ca:	687b      	ldr	r3, [r7, #4]
 81168cc:	781b      	ldrb	r3, [r3, #0]
 81168ce:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 81168d2:	e7e3      	b.n	811689c <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 81168d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 81168d8:	2b10      	cmp	r3, #16
 81168da:	d127      	bne.n	811692c <ip4addr_aton+0x10c>
 81168dc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 81168e0:	3301      	adds	r3, #1
 81168e2:	4a60      	ldr	r2, [pc, #384]	@ (8116a64 <ip4addr_aton+0x244>)
 81168e4:	4413      	add	r3, r2
 81168e6:	781b      	ldrb	r3, [r3, #0]
 81168e8:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 81168ec:	2b00      	cmp	r3, #0
 81168ee:	d01d      	beq.n	811692c <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 81168f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81168f2:	011b      	lsls	r3, r3, #4
 81168f4:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 81168f8:	f102 010a 	add.w	r1, r2, #10
 81168fc:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8116900:	3201      	adds	r2, #1
 8116902:	4858      	ldr	r0, [pc, #352]	@ (8116a64 <ip4addr_aton+0x244>)
 8116904:	4402      	add	r2, r0
 8116906:	7812      	ldrb	r2, [r2, #0]
 8116908:	f002 0203 	and.w	r2, r2, #3
 811690c:	2a02      	cmp	r2, #2
 811690e:	d101      	bne.n	8116914 <ip4addr_aton+0xf4>
 8116910:	2261      	movs	r2, #97	@ 0x61
 8116912:	e000      	b.n	8116916 <ip4addr_aton+0xf6>
 8116914:	2241      	movs	r2, #65	@ 0x41
 8116916:	1a8a      	subs	r2, r1, r2
 8116918:	4313      	orrs	r3, r2
 811691a:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 811691c:	687b      	ldr	r3, [r7, #4]
 811691e:	3301      	adds	r3, #1
 8116920:	607b      	str	r3, [r7, #4]
 8116922:	687b      	ldr	r3, [r7, #4]
 8116924:	781b      	ldrb	r3, [r3, #0]
 8116926:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (lwip_isdigit(c)) {
 811692a:	e7b7      	b.n	811689c <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 811692c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8116930:	2b2e      	cmp	r3, #46	@ 0x2e
 8116932:	d114      	bne.n	811695e <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8116934:	f107 030c 	add.w	r3, r7, #12
 8116938:	330c      	adds	r3, #12
 811693a:	69fa      	ldr	r2, [r7, #28]
 811693c:	429a      	cmp	r2, r3
 811693e:	d301      	bcc.n	8116944 <ip4addr_aton+0x124>
        return 0;
 8116940:	2300      	movs	r3, #0
 8116942:	e08b      	b.n	8116a5c <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 8116944:	69fb      	ldr	r3, [r7, #28]
 8116946:	1d1a      	adds	r2, r3, #4
 8116948:	61fa      	str	r2, [r7, #28]
 811694a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811694c:	601a      	str	r2, [r3, #0]
      c = *++cp;
 811694e:	687b      	ldr	r3, [r7, #4]
 8116950:	3301      	adds	r3, #1
 8116952:	607b      	str	r3, [r7, #4]
 8116954:	687b      	ldr	r3, [r7, #4]
 8116956:	781b      	ldrb	r3, [r3, #0]
 8116958:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (!lwip_isdigit(c)) {
 811695c:	e76c      	b.n	8116838 <ip4addr_aton+0x18>
    } else {
      break;
 811695e:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 8116960:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8116964:	2b00      	cmp	r3, #0
 8116966:	d00b      	beq.n	8116980 <ip4addr_aton+0x160>
 8116968:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 811696c:	3301      	adds	r3, #1
 811696e:	4a3d      	ldr	r2, [pc, #244]	@ (8116a64 <ip4addr_aton+0x244>)
 8116970:	4413      	add	r3, r2
 8116972:	781b      	ldrb	r3, [r3, #0]
 8116974:	f003 0308 	and.w	r3, r3, #8
 8116978:	2b00      	cmp	r3, #0
 811697a:	d101      	bne.n	8116980 <ip4addr_aton+0x160>
    return 0;
 811697c:	2300      	movs	r3, #0
 811697e:	e06d      	b.n	8116a5c <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8116980:	f107 030c 	add.w	r3, r7, #12
 8116984:	69fa      	ldr	r2, [r7, #28]
 8116986:	1ad3      	subs	r3, r2, r3
 8116988:	109b      	asrs	r3, r3, #2
 811698a:	3301      	adds	r3, #1
 811698c:	2b04      	cmp	r3, #4
 811698e:	d853      	bhi.n	8116a38 <ip4addr_aton+0x218>
 8116990:	a201      	add	r2, pc, #4	@ (adr r2, 8116998 <ip4addr_aton+0x178>)
 8116992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8116996:	bf00      	nop
 8116998:	081169ad 	.word	0x081169ad
 811699c:	08116a47 	.word	0x08116a47
 81169a0:	081169b1 	.word	0x081169b1
 81169a4:	081169d3 	.word	0x081169d3
 81169a8:	08116a01 	.word	0x08116a01

    case 0:
      return 0;       /* initial nondigit */
 81169ac:	2300      	movs	r3, #0
 81169ae:	e055      	b.n	8116a5c <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 81169b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81169b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81169b6:	d301      	bcc.n	81169bc <ip4addr_aton+0x19c>
        return 0;
 81169b8:	2300      	movs	r3, #0
 81169ba:	e04f      	b.n	8116a5c <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 81169bc:	68fb      	ldr	r3, [r7, #12]
 81169be:	2bff      	cmp	r3, #255	@ 0xff
 81169c0:	d901      	bls.n	81169c6 <ip4addr_aton+0x1a6>
        return 0;
 81169c2:	2300      	movs	r3, #0
 81169c4:	e04a      	b.n	8116a5c <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 81169c6:	68fb      	ldr	r3, [r7, #12]
 81169c8:	061b      	lsls	r3, r3, #24
 81169ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81169cc:	4313      	orrs	r3, r2
 81169ce:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 81169d0:	e03a      	b.n	8116a48 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 81169d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81169d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81169d8:	d301      	bcc.n	81169de <ip4addr_aton+0x1be>
        return 0;
 81169da:	2300      	movs	r3, #0
 81169dc:	e03e      	b.n	8116a5c <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 81169de:	68fb      	ldr	r3, [r7, #12]
 81169e0:	2bff      	cmp	r3, #255	@ 0xff
 81169e2:	d802      	bhi.n	81169ea <ip4addr_aton+0x1ca>
 81169e4:	693b      	ldr	r3, [r7, #16]
 81169e6:	2bff      	cmp	r3, #255	@ 0xff
 81169e8:	d901      	bls.n	81169ee <ip4addr_aton+0x1ce>
        return 0;
 81169ea:	2300      	movs	r3, #0
 81169ec:	e036      	b.n	8116a5c <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 81169ee:	68fb      	ldr	r3, [r7, #12]
 81169f0:	061a      	lsls	r2, r3, #24
 81169f2:	693b      	ldr	r3, [r7, #16]
 81169f4:	041b      	lsls	r3, r3, #16
 81169f6:	4313      	orrs	r3, r2
 81169f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81169fa:	4313      	orrs	r3, r2
 81169fc:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 81169fe:	e023      	b.n	8116a48 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 8116a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8116a02:	2bff      	cmp	r3, #255	@ 0xff
 8116a04:	d901      	bls.n	8116a0a <ip4addr_aton+0x1ea>
        return 0;
 8116a06:	2300      	movs	r3, #0
 8116a08:	e028      	b.n	8116a5c <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8116a0a:	68fb      	ldr	r3, [r7, #12]
 8116a0c:	2bff      	cmp	r3, #255	@ 0xff
 8116a0e:	d805      	bhi.n	8116a1c <ip4addr_aton+0x1fc>
 8116a10:	693b      	ldr	r3, [r7, #16]
 8116a12:	2bff      	cmp	r3, #255	@ 0xff
 8116a14:	d802      	bhi.n	8116a1c <ip4addr_aton+0x1fc>
 8116a16:	697b      	ldr	r3, [r7, #20]
 8116a18:	2bff      	cmp	r3, #255	@ 0xff
 8116a1a:	d901      	bls.n	8116a20 <ip4addr_aton+0x200>
        return 0;
 8116a1c:	2300      	movs	r3, #0
 8116a1e:	e01d      	b.n	8116a5c <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8116a20:	68fb      	ldr	r3, [r7, #12]
 8116a22:	061a      	lsls	r2, r3, #24
 8116a24:	693b      	ldr	r3, [r7, #16]
 8116a26:	041b      	lsls	r3, r3, #16
 8116a28:	431a      	orrs	r2, r3
 8116a2a:	697b      	ldr	r3, [r7, #20]
 8116a2c:	021b      	lsls	r3, r3, #8
 8116a2e:	4313      	orrs	r3, r2
 8116a30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8116a32:	4313      	orrs	r3, r2
 8116a34:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8116a36:	e007      	b.n	8116a48 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 8116a38:	4b0b      	ldr	r3, [pc, #44]	@ (8116a68 <ip4addr_aton+0x248>)
 8116a3a:	22f9      	movs	r2, #249	@ 0xf9
 8116a3c:	490b      	ldr	r1, [pc, #44]	@ (8116a6c <ip4addr_aton+0x24c>)
 8116a3e:	480c      	ldr	r0, [pc, #48]	@ (8116a70 <ip4addr_aton+0x250>)
 8116a40:	f00b fc10 	bl	8122264 <iprintf>
      break;
 8116a44:	e000      	b.n	8116a48 <ip4addr_aton+0x228>
      break;
 8116a46:	bf00      	nop
  }
  if (addr) {
 8116a48:	683b      	ldr	r3, [r7, #0]
 8116a4a:	2b00      	cmp	r3, #0
 8116a4c:	d005      	beq.n	8116a5a <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8116a4e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8116a50:	f7fd fc09 	bl	8114266 <lwip_htonl>
 8116a54:	4602      	mov	r2, r0
 8116a56:	683b      	ldr	r3, [r7, #0]
 8116a58:	601a      	str	r2, [r3, #0]
  }
  return 1;
 8116a5a:	2301      	movs	r3, #1
}
 8116a5c:	4618      	mov	r0, r3
 8116a5e:	3728      	adds	r7, #40	@ 0x28
 8116a60:	46bd      	mov	sp, r7
 8116a62:	bd80      	pop	{r7, pc}
 8116a64:	08128ba7 	.word	0x08128ba7
 8116a68:	08124db4 	.word	0x08124db4
 8116a6c:	08124e2c 	.word	0x08124e2c
 8116a70:	08124e38 	.word	0x08124e38

08116a74 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8116a74:	b580      	push	{r7, lr}
 8116a76:	b082      	sub	sp, #8
 8116a78:	af00      	add	r7, sp, #0
 8116a7a:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8116a7c:	2210      	movs	r2, #16
 8116a7e:	4904      	ldr	r1, [pc, #16]	@ (8116a90 <ip4addr_ntoa+0x1c>)
 8116a80:	6878      	ldr	r0, [r7, #4]
 8116a82:	f000 f807 	bl	8116a94 <ip4addr_ntoa_r>
 8116a86:	4603      	mov	r3, r0
}
 8116a88:	4618      	mov	r0, r3
 8116a8a:	3708      	adds	r7, #8
 8116a8c:	46bd      	mov	sp, r7
 8116a8e:	bd80      	pop	{r7, pc}
 8116a90:	1000b2d0 	.word	0x1000b2d0

08116a94 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8116a94:	b480      	push	{r7}
 8116a96:	b08d      	sub	sp, #52	@ 0x34
 8116a98:	af00      	add	r7, sp, #0
 8116a9a:	60f8      	str	r0, [r7, #12]
 8116a9c:	60b9      	str	r1, [r7, #8]
 8116a9e:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8116aa0:	2300      	movs	r3, #0
 8116aa2:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8116aa4:	68fb      	ldr	r3, [r7, #12]
 8116aa6:	681b      	ldr	r3, [r3, #0]
 8116aa8:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8116aaa:	68bb      	ldr	r3, [r7, #8]
 8116aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 8116aae:	f107 0318 	add.w	r3, r7, #24
 8116ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8116ab4:	2300      	movs	r3, #0
 8116ab6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8116aba:	e058      	b.n	8116b6e <ip4addr_ntoa_r+0xda>
    i = 0;
 8116abc:	2300      	movs	r3, #0
 8116abe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 8116ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8116ac4:	781a      	ldrb	r2, [r3, #0]
 8116ac6:	4b32      	ldr	r3, [pc, #200]	@ (8116b90 <ip4addr_ntoa_r+0xfc>)
 8116ac8:	fba3 1302 	umull	r1, r3, r3, r2
 8116acc:	08d9      	lsrs	r1, r3, #3
 8116ace:	460b      	mov	r3, r1
 8116ad0:	009b      	lsls	r3, r3, #2
 8116ad2:	440b      	add	r3, r1
 8116ad4:	005b      	lsls	r3, r3, #1
 8116ad6:	1ad3      	subs	r3, r2, r3
 8116ad8:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8116ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8116adc:	781b      	ldrb	r3, [r3, #0]
 8116ade:	4a2c      	ldr	r2, [pc, #176]	@ (8116b90 <ip4addr_ntoa_r+0xfc>)
 8116ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8116ae4:	08db      	lsrs	r3, r3, #3
 8116ae6:	b2da      	uxtb	r2, r3
 8116ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8116aea:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8116aec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8116af0:	1c5a      	adds	r2, r3, #1
 8116af2:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8116af6:	4619      	mov	r1, r3
 8116af8:	7ffb      	ldrb	r3, [r7, #31]
 8116afa:	3330      	adds	r3, #48	@ 0x30
 8116afc:	b2da      	uxtb	r2, r3
 8116afe:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 8116b02:	443b      	add	r3, r7
 8116b04:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8116b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8116b0a:	781b      	ldrb	r3, [r3, #0]
 8116b0c:	2b00      	cmp	r3, #0
 8116b0e:	d1d8      	bne.n	8116ac2 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8116b10:	e011      	b.n	8116b36 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8116b12:	6a3b      	ldr	r3, [r7, #32]
 8116b14:	1c5a      	adds	r2, r3, #1
 8116b16:	623a      	str	r2, [r7, #32]
 8116b18:	687a      	ldr	r2, [r7, #4]
 8116b1a:	429a      	cmp	r2, r3
 8116b1c:	dc01      	bgt.n	8116b22 <ip4addr_ntoa_r+0x8e>
        return NULL;
 8116b1e:	2300      	movs	r3, #0
 8116b20:	e030      	b.n	8116b84 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8116b22:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8116b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8116b28:	1c59      	adds	r1, r3, #1
 8116b2a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8116b2c:	3230      	adds	r2, #48	@ 0x30
 8116b2e:	443a      	add	r2, r7
 8116b30:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8116b34:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8116b36:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8116b3a:	1e5a      	subs	r2, r3, #1
 8116b3c:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8116b40:	2b00      	cmp	r3, #0
 8116b42:	d1e6      	bne.n	8116b12 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8116b44:	6a3b      	ldr	r3, [r7, #32]
 8116b46:	1c5a      	adds	r2, r3, #1
 8116b48:	623a      	str	r2, [r7, #32]
 8116b4a:	687a      	ldr	r2, [r7, #4]
 8116b4c:	429a      	cmp	r2, r3
 8116b4e:	dc01      	bgt.n	8116b54 <ip4addr_ntoa_r+0xc0>
      return NULL;
 8116b50:	2300      	movs	r3, #0
 8116b52:	e017      	b.n	8116b84 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8116b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8116b56:	1c5a      	adds	r2, r3, #1
 8116b58:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8116b5a:	222e      	movs	r2, #46	@ 0x2e
 8116b5c:	701a      	strb	r2, [r3, #0]
    ap++;
 8116b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8116b60:	3301      	adds	r3, #1
 8116b62:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8116b64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8116b68:	3301      	adds	r3, #1
 8116b6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8116b6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8116b72:	2b03      	cmp	r3, #3
 8116b74:	d9a2      	bls.n	8116abc <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8116b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8116b78:	3b01      	subs	r3, #1
 8116b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8116b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8116b7e:	2200      	movs	r2, #0
 8116b80:	701a      	strb	r2, [r3, #0]
  return buf;
 8116b82:	68bb      	ldr	r3, [r7, #8]
}
 8116b84:	4618      	mov	r0, r3
 8116b86:	3734      	adds	r7, #52	@ 0x34
 8116b88:	46bd      	mov	sp, r7
 8116b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8116b8e:	4770      	bx	lr
 8116b90:	cccccccd 	.word	0xcccccccd

08116b94 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8116b94:	b580      	push	{r7, lr}
 8116b96:	b084      	sub	sp, #16
 8116b98:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8116b9a:	2300      	movs	r3, #0
 8116b9c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8116b9e:	4b12      	ldr	r3, [pc, #72]	@ (8116be8 <ip_reass_tmr+0x54>)
 8116ba0:	681b      	ldr	r3, [r3, #0]
 8116ba2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8116ba4:	e018      	b.n	8116bd8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8116ba6:	68fb      	ldr	r3, [r7, #12]
 8116ba8:	7fdb      	ldrb	r3, [r3, #31]
 8116baa:	2b00      	cmp	r3, #0
 8116bac:	d00b      	beq.n	8116bc6 <ip_reass_tmr+0x32>
      r->timer--;
 8116bae:	68fb      	ldr	r3, [r7, #12]
 8116bb0:	7fdb      	ldrb	r3, [r3, #31]
 8116bb2:	3b01      	subs	r3, #1
 8116bb4:	b2da      	uxtb	r2, r3
 8116bb6:	68fb      	ldr	r3, [r7, #12]
 8116bb8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8116bba:	68fb      	ldr	r3, [r7, #12]
 8116bbc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8116bbe:	68fb      	ldr	r3, [r7, #12]
 8116bc0:	681b      	ldr	r3, [r3, #0]
 8116bc2:	60fb      	str	r3, [r7, #12]
 8116bc4:	e008      	b.n	8116bd8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8116bc6:	68fb      	ldr	r3, [r7, #12]
 8116bc8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8116bca:	68fb      	ldr	r3, [r7, #12]
 8116bcc:	681b      	ldr	r3, [r3, #0]
 8116bce:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8116bd0:	68b9      	ldr	r1, [r7, #8]
 8116bd2:	6878      	ldr	r0, [r7, #4]
 8116bd4:	f000 f80a 	bl	8116bec <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8116bd8:	68fb      	ldr	r3, [r7, #12]
 8116bda:	2b00      	cmp	r3, #0
 8116bdc:	d1e3      	bne.n	8116ba6 <ip_reass_tmr+0x12>
    }
  }
}
 8116bde:	bf00      	nop
 8116be0:	bf00      	nop
 8116be2:	3710      	adds	r7, #16
 8116be4:	46bd      	mov	sp, r7
 8116be6:	bd80      	pop	{r7, pc}
 8116be8:	1000b2e0 	.word	0x1000b2e0

08116bec <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8116bec:	b580      	push	{r7, lr}
 8116bee:	b088      	sub	sp, #32
 8116bf0:	af00      	add	r7, sp, #0
 8116bf2:	6078      	str	r0, [r7, #4]
 8116bf4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8116bf6:	2300      	movs	r3, #0
 8116bf8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8116bfa:	683a      	ldr	r2, [r7, #0]
 8116bfc:	687b      	ldr	r3, [r7, #4]
 8116bfe:	429a      	cmp	r2, r3
 8116c00:	d105      	bne.n	8116c0e <ip_reass_free_complete_datagram+0x22>
 8116c02:	4b45      	ldr	r3, [pc, #276]	@ (8116d18 <ip_reass_free_complete_datagram+0x12c>)
 8116c04:	22ab      	movs	r2, #171	@ 0xab
 8116c06:	4945      	ldr	r1, [pc, #276]	@ (8116d1c <ip_reass_free_complete_datagram+0x130>)
 8116c08:	4845      	ldr	r0, [pc, #276]	@ (8116d20 <ip_reass_free_complete_datagram+0x134>)
 8116c0a:	f00b fb2b 	bl	8122264 <iprintf>
  if (prev != NULL) {
 8116c0e:	683b      	ldr	r3, [r7, #0]
 8116c10:	2b00      	cmp	r3, #0
 8116c12:	d00a      	beq.n	8116c2a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8116c14:	683b      	ldr	r3, [r7, #0]
 8116c16:	681b      	ldr	r3, [r3, #0]
 8116c18:	687a      	ldr	r2, [r7, #4]
 8116c1a:	429a      	cmp	r2, r3
 8116c1c:	d005      	beq.n	8116c2a <ip_reass_free_complete_datagram+0x3e>
 8116c1e:	4b3e      	ldr	r3, [pc, #248]	@ (8116d18 <ip_reass_free_complete_datagram+0x12c>)
 8116c20:	22ad      	movs	r2, #173	@ 0xad
 8116c22:	4940      	ldr	r1, [pc, #256]	@ (8116d24 <ip_reass_free_complete_datagram+0x138>)
 8116c24:	483e      	ldr	r0, [pc, #248]	@ (8116d20 <ip_reass_free_complete_datagram+0x134>)
 8116c26:	f00b fb1d 	bl	8122264 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8116c2a:	687b      	ldr	r3, [r7, #4]
 8116c2c:	685b      	ldr	r3, [r3, #4]
 8116c2e:	685b      	ldr	r3, [r3, #4]
 8116c30:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8116c32:	697b      	ldr	r3, [r7, #20]
 8116c34:	889b      	ldrh	r3, [r3, #4]
 8116c36:	b29b      	uxth	r3, r3
 8116c38:	2b00      	cmp	r3, #0
 8116c3a:	d12a      	bne.n	8116c92 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8116c3c:	687b      	ldr	r3, [r7, #4]
 8116c3e:	685b      	ldr	r3, [r3, #4]
 8116c40:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8116c42:	697b      	ldr	r3, [r7, #20]
 8116c44:	681a      	ldr	r2, [r3, #0]
 8116c46:	687b      	ldr	r3, [r7, #4]
 8116c48:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8116c4a:	69bb      	ldr	r3, [r7, #24]
 8116c4c:	6858      	ldr	r0, [r3, #4]
 8116c4e:	687b      	ldr	r3, [r7, #4]
 8116c50:	3308      	adds	r3, #8
 8116c52:	2214      	movs	r2, #20
 8116c54:	4619      	mov	r1, r3
 8116c56:	f00b fdfa 	bl	812284e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8116c5a:	2101      	movs	r1, #1
 8116c5c:	69b8      	ldr	r0, [r7, #24]
 8116c5e:	f7fe ff9d 	bl	8115b9c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8116c62:	69b8      	ldr	r0, [r7, #24]
 8116c64:	f002 fb18 	bl	8119298 <pbuf_clen>
 8116c68:	4603      	mov	r3, r0
 8116c6a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8116c6c:	8bfa      	ldrh	r2, [r7, #30]
 8116c6e:	8a7b      	ldrh	r3, [r7, #18]
 8116c70:	4413      	add	r3, r2
 8116c72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8116c76:	db05      	blt.n	8116c84 <ip_reass_free_complete_datagram+0x98>
 8116c78:	4b27      	ldr	r3, [pc, #156]	@ (8116d18 <ip_reass_free_complete_datagram+0x12c>)
 8116c7a:	22bc      	movs	r2, #188	@ 0xbc
 8116c7c:	492a      	ldr	r1, [pc, #168]	@ (8116d28 <ip_reass_free_complete_datagram+0x13c>)
 8116c7e:	4828      	ldr	r0, [pc, #160]	@ (8116d20 <ip_reass_free_complete_datagram+0x134>)
 8116c80:	f00b faf0 	bl	8122264 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8116c84:	8bfa      	ldrh	r2, [r7, #30]
 8116c86:	8a7b      	ldrh	r3, [r7, #18]
 8116c88:	4413      	add	r3, r2
 8116c8a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8116c8c:	69b8      	ldr	r0, [r7, #24]
 8116c8e:	f002 fa75 	bl	811917c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8116c92:	687b      	ldr	r3, [r7, #4]
 8116c94:	685b      	ldr	r3, [r3, #4]
 8116c96:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8116c98:	e01f      	b.n	8116cda <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8116c9a:	69bb      	ldr	r3, [r7, #24]
 8116c9c:	685b      	ldr	r3, [r3, #4]
 8116c9e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8116ca0:	69bb      	ldr	r3, [r7, #24]
 8116ca2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8116ca4:	697b      	ldr	r3, [r7, #20]
 8116ca6:	681b      	ldr	r3, [r3, #0]
 8116ca8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8116caa:	68f8      	ldr	r0, [r7, #12]
 8116cac:	f002 faf4 	bl	8119298 <pbuf_clen>
 8116cb0:	4603      	mov	r3, r0
 8116cb2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8116cb4:	8bfa      	ldrh	r2, [r7, #30]
 8116cb6:	8a7b      	ldrh	r3, [r7, #18]
 8116cb8:	4413      	add	r3, r2
 8116cba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8116cbe:	db05      	blt.n	8116ccc <ip_reass_free_complete_datagram+0xe0>
 8116cc0:	4b15      	ldr	r3, [pc, #84]	@ (8116d18 <ip_reass_free_complete_datagram+0x12c>)
 8116cc2:	22cc      	movs	r2, #204	@ 0xcc
 8116cc4:	4918      	ldr	r1, [pc, #96]	@ (8116d28 <ip_reass_free_complete_datagram+0x13c>)
 8116cc6:	4816      	ldr	r0, [pc, #88]	@ (8116d20 <ip_reass_free_complete_datagram+0x134>)
 8116cc8:	f00b facc 	bl	8122264 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8116ccc:	8bfa      	ldrh	r2, [r7, #30]
 8116cce:	8a7b      	ldrh	r3, [r7, #18]
 8116cd0:	4413      	add	r3, r2
 8116cd2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8116cd4:	68f8      	ldr	r0, [r7, #12]
 8116cd6:	f002 fa51 	bl	811917c <pbuf_free>
  while (p != NULL) {
 8116cda:	69bb      	ldr	r3, [r7, #24]
 8116cdc:	2b00      	cmp	r3, #0
 8116cde:	d1dc      	bne.n	8116c9a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8116ce0:	6839      	ldr	r1, [r7, #0]
 8116ce2:	6878      	ldr	r0, [r7, #4]
 8116ce4:	f000 f8c2 	bl	8116e6c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8116ce8:	4b10      	ldr	r3, [pc, #64]	@ (8116d2c <ip_reass_free_complete_datagram+0x140>)
 8116cea:	881b      	ldrh	r3, [r3, #0]
 8116cec:	8bfa      	ldrh	r2, [r7, #30]
 8116cee:	429a      	cmp	r2, r3
 8116cf0:	d905      	bls.n	8116cfe <ip_reass_free_complete_datagram+0x112>
 8116cf2:	4b09      	ldr	r3, [pc, #36]	@ (8116d18 <ip_reass_free_complete_datagram+0x12c>)
 8116cf4:	22d2      	movs	r2, #210	@ 0xd2
 8116cf6:	490e      	ldr	r1, [pc, #56]	@ (8116d30 <ip_reass_free_complete_datagram+0x144>)
 8116cf8:	4809      	ldr	r0, [pc, #36]	@ (8116d20 <ip_reass_free_complete_datagram+0x134>)
 8116cfa:	f00b fab3 	bl	8122264 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8116cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8116d2c <ip_reass_free_complete_datagram+0x140>)
 8116d00:	881a      	ldrh	r2, [r3, #0]
 8116d02:	8bfb      	ldrh	r3, [r7, #30]
 8116d04:	1ad3      	subs	r3, r2, r3
 8116d06:	b29a      	uxth	r2, r3
 8116d08:	4b08      	ldr	r3, [pc, #32]	@ (8116d2c <ip_reass_free_complete_datagram+0x140>)
 8116d0a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8116d0c:	8bfb      	ldrh	r3, [r7, #30]
}
 8116d0e:	4618      	mov	r0, r3
 8116d10:	3720      	adds	r7, #32
 8116d12:	46bd      	mov	sp, r7
 8116d14:	bd80      	pop	{r7, pc}
 8116d16:	bf00      	nop
 8116d18:	08124e60 	.word	0x08124e60
 8116d1c:	08124ed8 	.word	0x08124ed8
 8116d20:	08124ee4 	.word	0x08124ee4
 8116d24:	08124f0c 	.word	0x08124f0c
 8116d28:	08124f20 	.word	0x08124f20
 8116d2c:	1000b2e4 	.word	0x1000b2e4
 8116d30:	08124f40 	.word	0x08124f40

08116d34 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8116d34:	b580      	push	{r7, lr}
 8116d36:	b08a      	sub	sp, #40	@ 0x28
 8116d38:	af00      	add	r7, sp, #0
 8116d3a:	6078      	str	r0, [r7, #4]
 8116d3c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8116d3e:	2300      	movs	r3, #0
 8116d40:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8116d42:	2300      	movs	r3, #0
 8116d44:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8116d46:	2300      	movs	r3, #0
 8116d48:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8116d4a:	2300      	movs	r3, #0
 8116d4c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8116d4e:	2300      	movs	r3, #0
 8116d50:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8116d52:	4b28      	ldr	r3, [pc, #160]	@ (8116df4 <ip_reass_remove_oldest_datagram+0xc0>)
 8116d54:	681b      	ldr	r3, [r3, #0]
 8116d56:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8116d58:	e030      	b.n	8116dbc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8116d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8116d5c:	695a      	ldr	r2, [r3, #20]
 8116d5e:	687b      	ldr	r3, [r7, #4]
 8116d60:	68db      	ldr	r3, [r3, #12]
 8116d62:	429a      	cmp	r2, r3
 8116d64:	d10c      	bne.n	8116d80 <ip_reass_remove_oldest_datagram+0x4c>
 8116d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8116d68:	699a      	ldr	r2, [r3, #24]
 8116d6a:	687b      	ldr	r3, [r7, #4]
 8116d6c:	691b      	ldr	r3, [r3, #16]
 8116d6e:	429a      	cmp	r2, r3
 8116d70:	d106      	bne.n	8116d80 <ip_reass_remove_oldest_datagram+0x4c>
 8116d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8116d74:	899a      	ldrh	r2, [r3, #12]
 8116d76:	687b      	ldr	r3, [r7, #4]
 8116d78:	889b      	ldrh	r3, [r3, #4]
 8116d7a:	b29b      	uxth	r3, r3
 8116d7c:	429a      	cmp	r2, r3
 8116d7e:	d014      	beq.n	8116daa <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8116d80:	693b      	ldr	r3, [r7, #16]
 8116d82:	3301      	adds	r3, #1
 8116d84:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8116d86:	6a3b      	ldr	r3, [r7, #32]
 8116d88:	2b00      	cmp	r3, #0
 8116d8a:	d104      	bne.n	8116d96 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8116d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8116d8e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8116d90:	69fb      	ldr	r3, [r7, #28]
 8116d92:	61bb      	str	r3, [r7, #24]
 8116d94:	e009      	b.n	8116daa <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8116d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8116d98:	7fda      	ldrb	r2, [r3, #31]
 8116d9a:	6a3b      	ldr	r3, [r7, #32]
 8116d9c:	7fdb      	ldrb	r3, [r3, #31]
 8116d9e:	429a      	cmp	r2, r3
 8116da0:	d803      	bhi.n	8116daa <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8116da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8116da4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8116da6:	69fb      	ldr	r3, [r7, #28]
 8116da8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8116daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8116dac:	681b      	ldr	r3, [r3, #0]
 8116dae:	2b00      	cmp	r3, #0
 8116db0:	d001      	beq.n	8116db6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8116db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8116db4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8116db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8116db8:	681b      	ldr	r3, [r3, #0]
 8116dba:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8116dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8116dbe:	2b00      	cmp	r3, #0
 8116dc0:	d1cb      	bne.n	8116d5a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8116dc2:	6a3b      	ldr	r3, [r7, #32]
 8116dc4:	2b00      	cmp	r3, #0
 8116dc6:	d008      	beq.n	8116dda <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8116dc8:	69b9      	ldr	r1, [r7, #24]
 8116dca:	6a38      	ldr	r0, [r7, #32]
 8116dcc:	f7ff ff0e 	bl	8116bec <ip_reass_free_complete_datagram>
 8116dd0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8116dd2:	697a      	ldr	r2, [r7, #20]
 8116dd4:	68fb      	ldr	r3, [r7, #12]
 8116dd6:	4413      	add	r3, r2
 8116dd8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8116dda:	697a      	ldr	r2, [r7, #20]
 8116ddc:	683b      	ldr	r3, [r7, #0]
 8116dde:	429a      	cmp	r2, r3
 8116de0:	da02      	bge.n	8116de8 <ip_reass_remove_oldest_datagram+0xb4>
 8116de2:	693b      	ldr	r3, [r7, #16]
 8116de4:	2b01      	cmp	r3, #1
 8116de6:	dcac      	bgt.n	8116d42 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8116de8:	697b      	ldr	r3, [r7, #20]
}
 8116dea:	4618      	mov	r0, r3
 8116dec:	3728      	adds	r7, #40	@ 0x28
 8116dee:	46bd      	mov	sp, r7
 8116df0:	bd80      	pop	{r7, pc}
 8116df2:	bf00      	nop
 8116df4:	1000b2e0 	.word	0x1000b2e0

08116df8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8116df8:	b580      	push	{r7, lr}
 8116dfa:	b084      	sub	sp, #16
 8116dfc:	af00      	add	r7, sp, #0
 8116dfe:	6078      	str	r0, [r7, #4]
 8116e00:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8116e02:	2004      	movs	r0, #4
 8116e04:	f001 f982 	bl	811810c <memp_malloc>
 8116e08:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8116e0a:	68fb      	ldr	r3, [r7, #12]
 8116e0c:	2b00      	cmp	r3, #0
 8116e0e:	d110      	bne.n	8116e32 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8116e10:	6839      	ldr	r1, [r7, #0]
 8116e12:	6878      	ldr	r0, [r7, #4]
 8116e14:	f7ff ff8e 	bl	8116d34 <ip_reass_remove_oldest_datagram>
 8116e18:	4602      	mov	r2, r0
 8116e1a:	683b      	ldr	r3, [r7, #0]
 8116e1c:	4293      	cmp	r3, r2
 8116e1e:	dc03      	bgt.n	8116e28 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8116e20:	2004      	movs	r0, #4
 8116e22:	f001 f973 	bl	811810c <memp_malloc>
 8116e26:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8116e28:	68fb      	ldr	r3, [r7, #12]
 8116e2a:	2b00      	cmp	r3, #0
 8116e2c:	d101      	bne.n	8116e32 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8116e2e:	2300      	movs	r3, #0
 8116e30:	e016      	b.n	8116e60 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8116e32:	2220      	movs	r2, #32
 8116e34:	2100      	movs	r1, #0
 8116e36:	68f8      	ldr	r0, [r7, #12]
 8116e38:	f00b fbba 	bl	81225b0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8116e3c:	68fb      	ldr	r3, [r7, #12]
 8116e3e:	220f      	movs	r2, #15
 8116e40:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8116e42:	4b09      	ldr	r3, [pc, #36]	@ (8116e68 <ip_reass_enqueue_new_datagram+0x70>)
 8116e44:	681a      	ldr	r2, [r3, #0]
 8116e46:	68fb      	ldr	r3, [r7, #12]
 8116e48:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8116e4a:	4a07      	ldr	r2, [pc, #28]	@ (8116e68 <ip_reass_enqueue_new_datagram+0x70>)
 8116e4c:	68fb      	ldr	r3, [r7, #12]
 8116e4e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8116e50:	68fb      	ldr	r3, [r7, #12]
 8116e52:	3308      	adds	r3, #8
 8116e54:	2214      	movs	r2, #20
 8116e56:	6879      	ldr	r1, [r7, #4]
 8116e58:	4618      	mov	r0, r3
 8116e5a:	f00b fcf8 	bl	812284e <memcpy>
  return ipr;
 8116e5e:	68fb      	ldr	r3, [r7, #12]
}
 8116e60:	4618      	mov	r0, r3
 8116e62:	3710      	adds	r7, #16
 8116e64:	46bd      	mov	sp, r7
 8116e66:	bd80      	pop	{r7, pc}
 8116e68:	1000b2e0 	.word	0x1000b2e0

08116e6c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8116e6c:	b580      	push	{r7, lr}
 8116e6e:	b082      	sub	sp, #8
 8116e70:	af00      	add	r7, sp, #0
 8116e72:	6078      	str	r0, [r7, #4]
 8116e74:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8116e76:	4b10      	ldr	r3, [pc, #64]	@ (8116eb8 <ip_reass_dequeue_datagram+0x4c>)
 8116e78:	681b      	ldr	r3, [r3, #0]
 8116e7a:	687a      	ldr	r2, [r7, #4]
 8116e7c:	429a      	cmp	r2, r3
 8116e7e:	d104      	bne.n	8116e8a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8116e80:	687b      	ldr	r3, [r7, #4]
 8116e82:	681b      	ldr	r3, [r3, #0]
 8116e84:	4a0c      	ldr	r2, [pc, #48]	@ (8116eb8 <ip_reass_dequeue_datagram+0x4c>)
 8116e86:	6013      	str	r3, [r2, #0]
 8116e88:	e00d      	b.n	8116ea6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8116e8a:	683b      	ldr	r3, [r7, #0]
 8116e8c:	2b00      	cmp	r3, #0
 8116e8e:	d106      	bne.n	8116e9e <ip_reass_dequeue_datagram+0x32>
 8116e90:	4b0a      	ldr	r3, [pc, #40]	@ (8116ebc <ip_reass_dequeue_datagram+0x50>)
 8116e92:	f240 1245 	movw	r2, #325	@ 0x145
 8116e96:	490a      	ldr	r1, [pc, #40]	@ (8116ec0 <ip_reass_dequeue_datagram+0x54>)
 8116e98:	480a      	ldr	r0, [pc, #40]	@ (8116ec4 <ip_reass_dequeue_datagram+0x58>)
 8116e9a:	f00b f9e3 	bl	8122264 <iprintf>
    prev->next = ipr->next;
 8116e9e:	687b      	ldr	r3, [r7, #4]
 8116ea0:	681a      	ldr	r2, [r3, #0]
 8116ea2:	683b      	ldr	r3, [r7, #0]
 8116ea4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8116ea6:	6879      	ldr	r1, [r7, #4]
 8116ea8:	2004      	movs	r0, #4
 8116eaa:	f001 f9a5 	bl	81181f8 <memp_free>
}
 8116eae:	bf00      	nop
 8116eb0:	3708      	adds	r7, #8
 8116eb2:	46bd      	mov	sp, r7
 8116eb4:	bd80      	pop	{r7, pc}
 8116eb6:	bf00      	nop
 8116eb8:	1000b2e0 	.word	0x1000b2e0
 8116ebc:	08124e60 	.word	0x08124e60
 8116ec0:	08124f64 	.word	0x08124f64
 8116ec4:	08124ee4 	.word	0x08124ee4

08116ec8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8116ec8:	b580      	push	{r7, lr}
 8116eca:	b08c      	sub	sp, #48	@ 0x30
 8116ecc:	af00      	add	r7, sp, #0
 8116ece:	60f8      	str	r0, [r7, #12]
 8116ed0:	60b9      	str	r1, [r7, #8]
 8116ed2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8116ed4:	2300      	movs	r3, #0
 8116ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8116ed8:	2301      	movs	r3, #1
 8116eda:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8116edc:	68bb      	ldr	r3, [r7, #8]
 8116ede:	685b      	ldr	r3, [r3, #4]
 8116ee0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8116ee2:	69fb      	ldr	r3, [r7, #28]
 8116ee4:	885b      	ldrh	r3, [r3, #2]
 8116ee6:	b29b      	uxth	r3, r3
 8116ee8:	4618      	mov	r0, r3
 8116eea:	f7fd f9a7 	bl	811423c <lwip_htons>
 8116eee:	4603      	mov	r3, r0
 8116ef0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8116ef2:	69fb      	ldr	r3, [r7, #28]
 8116ef4:	781b      	ldrb	r3, [r3, #0]
 8116ef6:	f003 030f 	and.w	r3, r3, #15
 8116efa:	b2db      	uxtb	r3, r3
 8116efc:	009b      	lsls	r3, r3, #2
 8116efe:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8116f00:	7e7b      	ldrb	r3, [r7, #25]
 8116f02:	b29b      	uxth	r3, r3
 8116f04:	8b7a      	ldrh	r2, [r7, #26]
 8116f06:	429a      	cmp	r2, r3
 8116f08:	d202      	bcs.n	8116f10 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8116f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8116f0e:	e135      	b.n	811717c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8116f10:	7e7b      	ldrb	r3, [r7, #25]
 8116f12:	b29b      	uxth	r3, r3
 8116f14:	8b7a      	ldrh	r2, [r7, #26]
 8116f16:	1ad3      	subs	r3, r2, r3
 8116f18:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8116f1a:	69fb      	ldr	r3, [r7, #28]
 8116f1c:	88db      	ldrh	r3, [r3, #6]
 8116f1e:	b29b      	uxth	r3, r3
 8116f20:	4618      	mov	r0, r3
 8116f22:	f7fd f98b 	bl	811423c <lwip_htons>
 8116f26:	4603      	mov	r3, r0
 8116f28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8116f2c:	b29b      	uxth	r3, r3
 8116f2e:	00db      	lsls	r3, r3, #3
 8116f30:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8116f32:	68bb      	ldr	r3, [r7, #8]
 8116f34:	685b      	ldr	r3, [r3, #4]
 8116f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8116f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8116f3a:	2200      	movs	r2, #0
 8116f3c:	701a      	strb	r2, [r3, #0]
 8116f3e:	2200      	movs	r2, #0
 8116f40:	705a      	strb	r2, [r3, #1]
 8116f42:	2200      	movs	r2, #0
 8116f44:	709a      	strb	r2, [r3, #2]
 8116f46:	2200      	movs	r2, #0
 8116f48:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8116f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8116f4c:	8afa      	ldrh	r2, [r7, #22]
 8116f4e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8116f50:	8afa      	ldrh	r2, [r7, #22]
 8116f52:	8b7b      	ldrh	r3, [r7, #26]
 8116f54:	4413      	add	r3, r2
 8116f56:	b29a      	uxth	r2, r3
 8116f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8116f5a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8116f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8116f5e:	88db      	ldrh	r3, [r3, #6]
 8116f60:	b29b      	uxth	r3, r3
 8116f62:	8afa      	ldrh	r2, [r7, #22]
 8116f64:	429a      	cmp	r2, r3
 8116f66:	d902      	bls.n	8116f6e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8116f68:	f04f 33ff 	mov.w	r3, #4294967295
 8116f6c:	e106      	b.n	811717c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8116f6e:	68fb      	ldr	r3, [r7, #12]
 8116f70:	685b      	ldr	r3, [r3, #4]
 8116f72:	627b      	str	r3, [r7, #36]	@ 0x24
 8116f74:	e068      	b.n	8117048 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8116f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8116f78:	685b      	ldr	r3, [r3, #4]
 8116f7a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8116f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8116f7e:	889b      	ldrh	r3, [r3, #4]
 8116f80:	b29a      	uxth	r2, r3
 8116f82:	693b      	ldr	r3, [r7, #16]
 8116f84:	889b      	ldrh	r3, [r3, #4]
 8116f86:	b29b      	uxth	r3, r3
 8116f88:	429a      	cmp	r2, r3
 8116f8a:	d235      	bcs.n	8116ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8116f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8116f8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8116f90:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8116f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8116f94:	2b00      	cmp	r3, #0
 8116f96:	d020      	beq.n	8116fda <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8116f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8116f9a:	889b      	ldrh	r3, [r3, #4]
 8116f9c:	b29a      	uxth	r2, r3
 8116f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8116fa0:	88db      	ldrh	r3, [r3, #6]
 8116fa2:	b29b      	uxth	r3, r3
 8116fa4:	429a      	cmp	r2, r3
 8116fa6:	d307      	bcc.n	8116fb8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8116fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8116faa:	88db      	ldrh	r3, [r3, #6]
 8116fac:	b29a      	uxth	r2, r3
 8116fae:	693b      	ldr	r3, [r7, #16]
 8116fb0:	889b      	ldrh	r3, [r3, #4]
 8116fb2:	b29b      	uxth	r3, r3
 8116fb4:	429a      	cmp	r2, r3
 8116fb6:	d902      	bls.n	8116fbe <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8116fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8116fbc:	e0de      	b.n	811717c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8116fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8116fc0:	68ba      	ldr	r2, [r7, #8]
 8116fc2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8116fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8116fc6:	88db      	ldrh	r3, [r3, #6]
 8116fc8:	b29a      	uxth	r2, r3
 8116fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8116fcc:	889b      	ldrh	r3, [r3, #4]
 8116fce:	b29b      	uxth	r3, r3
 8116fd0:	429a      	cmp	r2, r3
 8116fd2:	d03d      	beq.n	8117050 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8116fd4:	2300      	movs	r3, #0
 8116fd6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8116fd8:	e03a      	b.n	8117050 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8116fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8116fdc:	88db      	ldrh	r3, [r3, #6]
 8116fde:	b29a      	uxth	r2, r3
 8116fe0:	693b      	ldr	r3, [r7, #16]
 8116fe2:	889b      	ldrh	r3, [r3, #4]
 8116fe4:	b29b      	uxth	r3, r3
 8116fe6:	429a      	cmp	r2, r3
 8116fe8:	d902      	bls.n	8116ff0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8116fea:	f04f 33ff 	mov.w	r3, #4294967295
 8116fee:	e0c5      	b.n	811717c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8116ff0:	68fb      	ldr	r3, [r7, #12]
 8116ff2:	68ba      	ldr	r2, [r7, #8]
 8116ff4:	605a      	str	r2, [r3, #4]
      break;
 8116ff6:	e02b      	b.n	8117050 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8116ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8116ffa:	889b      	ldrh	r3, [r3, #4]
 8116ffc:	b29a      	uxth	r2, r3
 8116ffe:	693b      	ldr	r3, [r7, #16]
 8117000:	889b      	ldrh	r3, [r3, #4]
 8117002:	b29b      	uxth	r3, r3
 8117004:	429a      	cmp	r2, r3
 8117006:	d102      	bne.n	811700e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8117008:	f04f 33ff 	mov.w	r3, #4294967295
 811700c:	e0b6      	b.n	811717c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 811700e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117010:	889b      	ldrh	r3, [r3, #4]
 8117012:	b29a      	uxth	r2, r3
 8117014:	693b      	ldr	r3, [r7, #16]
 8117016:	88db      	ldrh	r3, [r3, #6]
 8117018:	b29b      	uxth	r3, r3
 811701a:	429a      	cmp	r2, r3
 811701c:	d202      	bcs.n	8117024 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 811701e:	f04f 33ff 	mov.w	r3, #4294967295
 8117022:	e0ab      	b.n	811717c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8117024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8117026:	2b00      	cmp	r3, #0
 8117028:	d009      	beq.n	811703e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 811702a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811702c:	88db      	ldrh	r3, [r3, #6]
 811702e:	b29a      	uxth	r2, r3
 8117030:	693b      	ldr	r3, [r7, #16]
 8117032:	889b      	ldrh	r3, [r3, #4]
 8117034:	b29b      	uxth	r3, r3
 8117036:	429a      	cmp	r2, r3
 8117038:	d001      	beq.n	811703e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 811703a:	2300      	movs	r3, #0
 811703c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 811703e:	693b      	ldr	r3, [r7, #16]
 8117040:	681b      	ldr	r3, [r3, #0]
 8117042:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8117044:	693b      	ldr	r3, [r7, #16]
 8117046:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8117048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811704a:	2b00      	cmp	r3, #0
 811704c:	d193      	bne.n	8116f76 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 811704e:	e000      	b.n	8117052 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8117050:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8117052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8117054:	2b00      	cmp	r3, #0
 8117056:	d12d      	bne.n	81170b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8117058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811705a:	2b00      	cmp	r3, #0
 811705c:	d01c      	beq.n	8117098 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 811705e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8117060:	88db      	ldrh	r3, [r3, #6]
 8117062:	b29a      	uxth	r2, r3
 8117064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117066:	889b      	ldrh	r3, [r3, #4]
 8117068:	b29b      	uxth	r3, r3
 811706a:	429a      	cmp	r2, r3
 811706c:	d906      	bls.n	811707c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 811706e:	4b45      	ldr	r3, [pc, #276]	@ (8117184 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8117070:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8117074:	4944      	ldr	r1, [pc, #272]	@ (8117188 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8117076:	4845      	ldr	r0, [pc, #276]	@ (811718c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8117078:	f00b f8f4 	bl	8122264 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 811707c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811707e:	68ba      	ldr	r2, [r7, #8]
 8117080:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8117082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8117084:	88db      	ldrh	r3, [r3, #6]
 8117086:	b29a      	uxth	r2, r3
 8117088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811708a:	889b      	ldrh	r3, [r3, #4]
 811708c:	b29b      	uxth	r3, r3
 811708e:	429a      	cmp	r2, r3
 8117090:	d010      	beq.n	81170b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8117092:	2300      	movs	r3, #0
 8117094:	623b      	str	r3, [r7, #32]
 8117096:	e00d      	b.n	81170b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8117098:	68fb      	ldr	r3, [r7, #12]
 811709a:	685b      	ldr	r3, [r3, #4]
 811709c:	2b00      	cmp	r3, #0
 811709e:	d006      	beq.n	81170ae <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 81170a0:	4b38      	ldr	r3, [pc, #224]	@ (8117184 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 81170a2:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 81170a6:	493a      	ldr	r1, [pc, #232]	@ (8117190 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 81170a8:	4838      	ldr	r0, [pc, #224]	@ (811718c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 81170aa:	f00b f8db 	bl	8122264 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 81170ae:	68fb      	ldr	r3, [r7, #12]
 81170b0:	68ba      	ldr	r2, [r7, #8]
 81170b2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 81170b4:	687b      	ldr	r3, [r7, #4]
 81170b6:	2b00      	cmp	r3, #0
 81170b8:	d105      	bne.n	81170c6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 81170ba:	68fb      	ldr	r3, [r7, #12]
 81170bc:	7f9b      	ldrb	r3, [r3, #30]
 81170be:	f003 0301 	and.w	r3, r3, #1
 81170c2:	2b00      	cmp	r3, #0
 81170c4:	d059      	beq.n	811717a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 81170c6:	6a3b      	ldr	r3, [r7, #32]
 81170c8:	2b00      	cmp	r3, #0
 81170ca:	d04f      	beq.n	811716c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 81170cc:	68fb      	ldr	r3, [r7, #12]
 81170ce:	685b      	ldr	r3, [r3, #4]
 81170d0:	2b00      	cmp	r3, #0
 81170d2:	d006      	beq.n	81170e2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 81170d4:	68fb      	ldr	r3, [r7, #12]
 81170d6:	685b      	ldr	r3, [r3, #4]
 81170d8:	685b      	ldr	r3, [r3, #4]
 81170da:	889b      	ldrh	r3, [r3, #4]
 81170dc:	b29b      	uxth	r3, r3
 81170de:	2b00      	cmp	r3, #0
 81170e0:	d002      	beq.n	81170e8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 81170e2:	2300      	movs	r3, #0
 81170e4:	623b      	str	r3, [r7, #32]
 81170e6:	e041      	b.n	811716c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 81170e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81170ea:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 81170ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81170ee:	681b      	ldr	r3, [r3, #0]
 81170f0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 81170f2:	e012      	b.n	811711a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 81170f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81170f6:	685b      	ldr	r3, [r3, #4]
 81170f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 81170fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81170fc:	88db      	ldrh	r3, [r3, #6]
 81170fe:	b29a      	uxth	r2, r3
 8117100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117102:	889b      	ldrh	r3, [r3, #4]
 8117104:	b29b      	uxth	r3, r3
 8117106:	429a      	cmp	r2, r3
 8117108:	d002      	beq.n	8117110 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 811710a:	2300      	movs	r3, #0
 811710c:	623b      	str	r3, [r7, #32]
            break;
 811710e:	e007      	b.n	8117120 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8117110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117112:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8117114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117116:	681b      	ldr	r3, [r3, #0]
 8117118:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 811711a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811711c:	2b00      	cmp	r3, #0
 811711e:	d1e9      	bne.n	81170f4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8117120:	6a3b      	ldr	r3, [r7, #32]
 8117122:	2b00      	cmp	r3, #0
 8117124:	d022      	beq.n	811716c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8117126:	68fb      	ldr	r3, [r7, #12]
 8117128:	685b      	ldr	r3, [r3, #4]
 811712a:	2b00      	cmp	r3, #0
 811712c:	d106      	bne.n	811713c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 811712e:	4b15      	ldr	r3, [pc, #84]	@ (8117184 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8117130:	f240 12df 	movw	r2, #479	@ 0x1df
 8117134:	4917      	ldr	r1, [pc, #92]	@ (8117194 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8117136:	4815      	ldr	r0, [pc, #84]	@ (811718c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8117138:	f00b f894 	bl	8122264 <iprintf>
          LWIP_ASSERT("sanity check",
 811713c:	68fb      	ldr	r3, [r7, #12]
 811713e:	685b      	ldr	r3, [r3, #4]
 8117140:	685b      	ldr	r3, [r3, #4]
 8117142:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8117144:	429a      	cmp	r2, r3
 8117146:	d106      	bne.n	8117156 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8117148:	4b0e      	ldr	r3, [pc, #56]	@ (8117184 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 811714a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 811714e:	4911      	ldr	r1, [pc, #68]	@ (8117194 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8117150:	480e      	ldr	r0, [pc, #56]	@ (811718c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8117152:	f00b f887 	bl	8122264 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8117156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117158:	681b      	ldr	r3, [r3, #0]
 811715a:	2b00      	cmp	r3, #0
 811715c:	d006      	beq.n	811716c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 811715e:	4b09      	ldr	r3, [pc, #36]	@ (8117184 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8117160:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8117164:	490c      	ldr	r1, [pc, #48]	@ (8117198 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8117166:	4809      	ldr	r0, [pc, #36]	@ (811718c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8117168:	f00b f87c 	bl	8122264 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 811716c:	6a3b      	ldr	r3, [r7, #32]
 811716e:	2b00      	cmp	r3, #0
 8117170:	bf14      	ite	ne
 8117172:	2301      	movne	r3, #1
 8117174:	2300      	moveq	r3, #0
 8117176:	b2db      	uxtb	r3, r3
 8117178:	e000      	b.n	811717c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 811717a:	2300      	movs	r3, #0
}
 811717c:	4618      	mov	r0, r3
 811717e:	3730      	adds	r7, #48	@ 0x30
 8117180:	46bd      	mov	sp, r7
 8117182:	bd80      	pop	{r7, pc}
 8117184:	08124e60 	.word	0x08124e60
 8117188:	08124f80 	.word	0x08124f80
 811718c:	08124ee4 	.word	0x08124ee4
 8117190:	08124fa0 	.word	0x08124fa0
 8117194:	08124fd8 	.word	0x08124fd8
 8117198:	08124fe8 	.word	0x08124fe8

0811719c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 811719c:	b580      	push	{r7, lr}
 811719e:	b08e      	sub	sp, #56	@ 0x38
 81171a0:	af00      	add	r7, sp, #0
 81171a2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 81171a4:	687b      	ldr	r3, [r7, #4]
 81171a6:	685b      	ldr	r3, [r3, #4]
 81171a8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 81171aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81171ac:	781b      	ldrb	r3, [r3, #0]
 81171ae:	f003 030f 	and.w	r3, r3, #15
 81171b2:	b2db      	uxtb	r3, r3
 81171b4:	009b      	lsls	r3, r3, #2
 81171b6:	b2db      	uxtb	r3, r3
 81171b8:	2b14      	cmp	r3, #20
 81171ba:	f040 8171 	bne.w	81174a0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 81171be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81171c0:	88db      	ldrh	r3, [r3, #6]
 81171c2:	b29b      	uxth	r3, r3
 81171c4:	4618      	mov	r0, r3
 81171c6:	f7fd f839 	bl	811423c <lwip_htons>
 81171ca:	4603      	mov	r3, r0
 81171cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81171d0:	b29b      	uxth	r3, r3
 81171d2:	00db      	lsls	r3, r3, #3
 81171d4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 81171d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81171d8:	885b      	ldrh	r3, [r3, #2]
 81171da:	b29b      	uxth	r3, r3
 81171dc:	4618      	mov	r0, r3
 81171de:	f7fd f82d 	bl	811423c <lwip_htons>
 81171e2:	4603      	mov	r3, r0
 81171e4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 81171e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81171e8:	781b      	ldrb	r3, [r3, #0]
 81171ea:	f003 030f 	and.w	r3, r3, #15
 81171ee:	b2db      	uxtb	r3, r3
 81171f0:	009b      	lsls	r3, r3, #2
 81171f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 81171f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 81171fa:	b29b      	uxth	r3, r3
 81171fc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 81171fe:	429a      	cmp	r2, r3
 8117200:	f0c0 8150 	bcc.w	81174a4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8117204:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8117208:	b29b      	uxth	r3, r3
 811720a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 811720c:	1ad3      	subs	r3, r2, r3
 811720e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8117210:	6878      	ldr	r0, [r7, #4]
 8117212:	f002 f841 	bl	8119298 <pbuf_clen>
 8117216:	4603      	mov	r3, r0
 8117218:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 811721a:	4b8c      	ldr	r3, [pc, #560]	@ (811744c <ip4_reass+0x2b0>)
 811721c:	881b      	ldrh	r3, [r3, #0]
 811721e:	461a      	mov	r2, r3
 8117220:	8c3b      	ldrh	r3, [r7, #32]
 8117222:	4413      	add	r3, r2
 8117224:	2b0a      	cmp	r3, #10
 8117226:	dd10      	ble.n	811724a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8117228:	8c3b      	ldrh	r3, [r7, #32]
 811722a:	4619      	mov	r1, r3
 811722c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 811722e:	f7ff fd81 	bl	8116d34 <ip_reass_remove_oldest_datagram>
 8117232:	4603      	mov	r3, r0
 8117234:	2b00      	cmp	r3, #0
 8117236:	f000 8137 	beq.w	81174a8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 811723a:	4b84      	ldr	r3, [pc, #528]	@ (811744c <ip4_reass+0x2b0>)
 811723c:	881b      	ldrh	r3, [r3, #0]
 811723e:	461a      	mov	r2, r3
 8117240:	8c3b      	ldrh	r3, [r7, #32]
 8117242:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8117244:	2b0a      	cmp	r3, #10
 8117246:	f300 812f 	bgt.w	81174a8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 811724a:	4b81      	ldr	r3, [pc, #516]	@ (8117450 <ip4_reass+0x2b4>)
 811724c:	681b      	ldr	r3, [r3, #0]
 811724e:	633b      	str	r3, [r7, #48]	@ 0x30
 8117250:	e015      	b.n	811727e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8117252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8117254:	695a      	ldr	r2, [r3, #20]
 8117256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8117258:	68db      	ldr	r3, [r3, #12]
 811725a:	429a      	cmp	r2, r3
 811725c:	d10c      	bne.n	8117278 <ip4_reass+0xdc>
 811725e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8117260:	699a      	ldr	r2, [r3, #24]
 8117262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8117264:	691b      	ldr	r3, [r3, #16]
 8117266:	429a      	cmp	r2, r3
 8117268:	d106      	bne.n	8117278 <ip4_reass+0xdc>
 811726a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811726c:	899a      	ldrh	r2, [r3, #12]
 811726e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8117270:	889b      	ldrh	r3, [r3, #4]
 8117272:	b29b      	uxth	r3, r3
 8117274:	429a      	cmp	r2, r3
 8117276:	d006      	beq.n	8117286 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8117278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811727a:	681b      	ldr	r3, [r3, #0]
 811727c:	633b      	str	r3, [r7, #48]	@ 0x30
 811727e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8117280:	2b00      	cmp	r3, #0
 8117282:	d1e6      	bne.n	8117252 <ip4_reass+0xb6>
 8117284:	e000      	b.n	8117288 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8117286:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8117288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811728a:	2b00      	cmp	r3, #0
 811728c:	d109      	bne.n	81172a2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 811728e:	8c3b      	ldrh	r3, [r7, #32]
 8117290:	4619      	mov	r1, r3
 8117292:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8117294:	f7ff fdb0 	bl	8116df8 <ip_reass_enqueue_new_datagram>
 8117298:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 811729a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811729c:	2b00      	cmp	r3, #0
 811729e:	d11c      	bne.n	81172da <ip4_reass+0x13e>
      goto nullreturn;
 81172a0:	e105      	b.n	81174ae <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 81172a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81172a4:	88db      	ldrh	r3, [r3, #6]
 81172a6:	b29b      	uxth	r3, r3
 81172a8:	4618      	mov	r0, r3
 81172aa:	f7fc ffc7 	bl	811423c <lwip_htons>
 81172ae:	4603      	mov	r3, r0
 81172b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81172b4:	2b00      	cmp	r3, #0
 81172b6:	d110      	bne.n	81172da <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 81172b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81172ba:	89db      	ldrh	r3, [r3, #14]
 81172bc:	4618      	mov	r0, r3
 81172be:	f7fc ffbd 	bl	811423c <lwip_htons>
 81172c2:	4603      	mov	r3, r0
 81172c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 81172c8:	2b00      	cmp	r3, #0
 81172ca:	d006      	beq.n	81172da <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 81172cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81172ce:	3308      	adds	r3, #8
 81172d0:	2214      	movs	r2, #20
 81172d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 81172d4:	4618      	mov	r0, r3
 81172d6:	f00b faba 	bl	812284e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 81172da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81172dc:	88db      	ldrh	r3, [r3, #6]
 81172de:	b29b      	uxth	r3, r3
 81172e0:	f003 0320 	and.w	r3, r3, #32
 81172e4:	2b00      	cmp	r3, #0
 81172e6:	bf0c      	ite	eq
 81172e8:	2301      	moveq	r3, #1
 81172ea:	2300      	movne	r3, #0
 81172ec:	b2db      	uxtb	r3, r3
 81172ee:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 81172f0:	69fb      	ldr	r3, [r7, #28]
 81172f2:	2b00      	cmp	r3, #0
 81172f4:	d00e      	beq.n	8117314 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 81172f6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 81172f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 81172fa:	4413      	add	r3, r2
 81172fc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 81172fe:	8b7a      	ldrh	r2, [r7, #26]
 8117300:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8117302:	429a      	cmp	r2, r3
 8117304:	f0c0 80a0 	bcc.w	8117448 <ip4_reass+0x2ac>
 8117308:	8b7b      	ldrh	r3, [r7, #26]
 811730a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 811730e:	4293      	cmp	r3, r2
 8117310:	f200 809a 	bhi.w	8117448 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8117314:	69fa      	ldr	r2, [r7, #28]
 8117316:	6879      	ldr	r1, [r7, #4]
 8117318:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 811731a:	f7ff fdd5 	bl	8116ec8 <ip_reass_chain_frag_into_datagram_and_validate>
 811731e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8117320:	697b      	ldr	r3, [r7, #20]
 8117322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8117326:	f000 809b 	beq.w	8117460 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 811732a:	4b48      	ldr	r3, [pc, #288]	@ (811744c <ip4_reass+0x2b0>)
 811732c:	881a      	ldrh	r2, [r3, #0]
 811732e:	8c3b      	ldrh	r3, [r7, #32]
 8117330:	4413      	add	r3, r2
 8117332:	b29a      	uxth	r2, r3
 8117334:	4b45      	ldr	r3, [pc, #276]	@ (811744c <ip4_reass+0x2b0>)
 8117336:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8117338:	69fb      	ldr	r3, [r7, #28]
 811733a:	2b00      	cmp	r3, #0
 811733c:	d00d      	beq.n	811735a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 811733e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8117340:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8117342:	4413      	add	r3, r2
 8117344:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8117346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8117348:	8a7a      	ldrh	r2, [r7, #18]
 811734a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 811734c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811734e:	7f9b      	ldrb	r3, [r3, #30]
 8117350:	f043 0301 	orr.w	r3, r3, #1
 8117354:	b2da      	uxtb	r2, r3
 8117356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8117358:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 811735a:	697b      	ldr	r3, [r7, #20]
 811735c:	2b01      	cmp	r3, #1
 811735e:	d171      	bne.n	8117444 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8117360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8117362:	8b9b      	ldrh	r3, [r3, #28]
 8117364:	3314      	adds	r3, #20
 8117366:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8117368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811736a:	685b      	ldr	r3, [r3, #4]
 811736c:	685b      	ldr	r3, [r3, #4]
 811736e:	681b      	ldr	r3, [r3, #0]
 8117370:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8117372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8117374:	685b      	ldr	r3, [r3, #4]
 8117376:	685b      	ldr	r3, [r3, #4]
 8117378:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 811737a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811737c:	3308      	adds	r3, #8
 811737e:	2214      	movs	r2, #20
 8117380:	4619      	mov	r1, r3
 8117382:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8117384:	f00b fa63 	bl	812284e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8117388:	8a3b      	ldrh	r3, [r7, #16]
 811738a:	4618      	mov	r0, r3
 811738c:	f7fc ff56 	bl	811423c <lwip_htons>
 8117390:	4603      	mov	r3, r0
 8117392:	461a      	mov	r2, r3
 8117394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8117396:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8117398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811739a:	2200      	movs	r2, #0
 811739c:	719a      	strb	r2, [r3, #6]
 811739e:	2200      	movs	r2, #0
 81173a0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 81173a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81173a4:	2200      	movs	r2, #0
 81173a6:	729a      	strb	r2, [r3, #10]
 81173a8:	2200      	movs	r2, #0
 81173aa:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 81173ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81173ae:	685b      	ldr	r3, [r3, #4]
 81173b0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 81173b2:	e00d      	b.n	81173d0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 81173b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81173b6:	685b      	ldr	r3, [r3, #4]
 81173b8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 81173ba:	2114      	movs	r1, #20
 81173bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 81173be:	f001 fe57 	bl	8119070 <pbuf_remove_header>
      pbuf_cat(p, r);
 81173c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 81173c4:	6878      	ldr	r0, [r7, #4]
 81173c6:	f001 ffa7 	bl	8119318 <pbuf_cat>
      r = iprh->next_pbuf;
 81173ca:	68fb      	ldr	r3, [r7, #12]
 81173cc:	681b      	ldr	r3, [r3, #0]
 81173ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (r != NULL) {
 81173d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81173d2:	2b00      	cmp	r3, #0
 81173d4:	d1ee      	bne.n	81173b4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 81173d6:	4b1e      	ldr	r3, [pc, #120]	@ (8117450 <ip4_reass+0x2b4>)
 81173d8:	681b      	ldr	r3, [r3, #0]
 81173da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81173dc:	429a      	cmp	r2, r3
 81173de:	d102      	bne.n	81173e6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 81173e0:	2300      	movs	r3, #0
 81173e2:	637b      	str	r3, [r7, #52]	@ 0x34
 81173e4:	e010      	b.n	8117408 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 81173e6:	4b1a      	ldr	r3, [pc, #104]	@ (8117450 <ip4_reass+0x2b4>)
 81173e8:	681b      	ldr	r3, [r3, #0]
 81173ea:	637b      	str	r3, [r7, #52]	@ 0x34
 81173ec:	e007      	b.n	81173fe <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 81173ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81173f0:	681b      	ldr	r3, [r3, #0]
 81173f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81173f4:	429a      	cmp	r2, r3
 81173f6:	d006      	beq.n	8117406 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 81173f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81173fa:	681b      	ldr	r3, [r3, #0]
 81173fc:	637b      	str	r3, [r7, #52]	@ 0x34
 81173fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8117400:	2b00      	cmp	r3, #0
 8117402:	d1f4      	bne.n	81173ee <ip4_reass+0x252>
 8117404:	e000      	b.n	8117408 <ip4_reass+0x26c>
          break;
 8117406:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8117408:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 811740a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 811740c:	f7ff fd2e 	bl	8116e6c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8117410:	6878      	ldr	r0, [r7, #4]
 8117412:	f001 ff41 	bl	8119298 <pbuf_clen>
 8117416:	4603      	mov	r3, r0
 8117418:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 811741a:	4b0c      	ldr	r3, [pc, #48]	@ (811744c <ip4_reass+0x2b0>)
 811741c:	881b      	ldrh	r3, [r3, #0]
 811741e:	8c3a      	ldrh	r2, [r7, #32]
 8117420:	429a      	cmp	r2, r3
 8117422:	d906      	bls.n	8117432 <ip4_reass+0x296>
 8117424:	4b0b      	ldr	r3, [pc, #44]	@ (8117454 <ip4_reass+0x2b8>)
 8117426:	f240 229b 	movw	r2, #667	@ 0x29b
 811742a:	490b      	ldr	r1, [pc, #44]	@ (8117458 <ip4_reass+0x2bc>)
 811742c:	480b      	ldr	r0, [pc, #44]	@ (811745c <ip4_reass+0x2c0>)
 811742e:	f00a ff19 	bl	8122264 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8117432:	4b06      	ldr	r3, [pc, #24]	@ (811744c <ip4_reass+0x2b0>)
 8117434:	881a      	ldrh	r2, [r3, #0]
 8117436:	8c3b      	ldrh	r3, [r7, #32]
 8117438:	1ad3      	subs	r3, r2, r3
 811743a:	b29a      	uxth	r2, r3
 811743c:	4b03      	ldr	r3, [pc, #12]	@ (811744c <ip4_reass+0x2b0>)
 811743e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8117440:	687b      	ldr	r3, [r7, #4]
 8117442:	e038      	b.n	81174b6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8117444:	2300      	movs	r3, #0
 8117446:	e036      	b.n	81174b6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8117448:	bf00      	nop
 811744a:	e00a      	b.n	8117462 <ip4_reass+0x2c6>
 811744c:	1000b2e4 	.word	0x1000b2e4
 8117450:	1000b2e0 	.word	0x1000b2e0
 8117454:	08124e60 	.word	0x08124e60
 8117458:	0812500c 	.word	0x0812500c
 811745c:	08124ee4 	.word	0x08124ee4
    goto nullreturn_ipr;
 8117460:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8117462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8117464:	2b00      	cmp	r3, #0
 8117466:	d106      	bne.n	8117476 <ip4_reass+0x2da>
 8117468:	4b15      	ldr	r3, [pc, #84]	@ (81174c0 <ip4_reass+0x324>)
 811746a:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 811746e:	4915      	ldr	r1, [pc, #84]	@ (81174c4 <ip4_reass+0x328>)
 8117470:	4815      	ldr	r0, [pc, #84]	@ (81174c8 <ip4_reass+0x32c>)
 8117472:	f00a fef7 	bl	8122264 <iprintf>
  if (ipr->p == NULL) {
 8117476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8117478:	685b      	ldr	r3, [r3, #4]
 811747a:	2b00      	cmp	r3, #0
 811747c:	d116      	bne.n	81174ac <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 811747e:	4b13      	ldr	r3, [pc, #76]	@ (81174cc <ip4_reass+0x330>)
 8117480:	681b      	ldr	r3, [r3, #0]
 8117482:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8117484:	429a      	cmp	r2, r3
 8117486:	d006      	beq.n	8117496 <ip4_reass+0x2fa>
 8117488:	4b0d      	ldr	r3, [pc, #52]	@ (81174c0 <ip4_reass+0x324>)
 811748a:	f240 22ab 	movw	r2, #683	@ 0x2ab
 811748e:	4910      	ldr	r1, [pc, #64]	@ (81174d0 <ip4_reass+0x334>)
 8117490:	480d      	ldr	r0, [pc, #52]	@ (81174c8 <ip4_reass+0x32c>)
 8117492:	f00a fee7 	bl	8122264 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8117496:	2100      	movs	r1, #0
 8117498:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 811749a:	f7ff fce7 	bl	8116e6c <ip_reass_dequeue_datagram>
 811749e:	e006      	b.n	81174ae <ip4_reass+0x312>
    goto nullreturn;
 81174a0:	bf00      	nop
 81174a2:	e004      	b.n	81174ae <ip4_reass+0x312>
    goto nullreturn;
 81174a4:	bf00      	nop
 81174a6:	e002      	b.n	81174ae <ip4_reass+0x312>
      goto nullreturn;
 81174a8:	bf00      	nop
 81174aa:	e000      	b.n	81174ae <ip4_reass+0x312>
  }

nullreturn:
 81174ac:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 81174ae:	6878      	ldr	r0, [r7, #4]
 81174b0:	f001 fe64 	bl	811917c <pbuf_free>
  return NULL;
 81174b4:	2300      	movs	r3, #0
}
 81174b6:	4618      	mov	r0, r3
 81174b8:	3738      	adds	r7, #56	@ 0x38
 81174ba:	46bd      	mov	sp, r7
 81174bc:	bd80      	pop	{r7, pc}
 81174be:	bf00      	nop
 81174c0:	08124e60 	.word	0x08124e60
 81174c4:	08125028 	.word	0x08125028
 81174c8:	08124ee4 	.word	0x08124ee4
 81174cc:	1000b2e0 	.word	0x1000b2e0
 81174d0:	08125034 	.word	0x08125034

081174d4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 81174d4:	b580      	push	{r7, lr}
 81174d6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 81174d8:	2005      	movs	r0, #5
 81174da:	f000 fe17 	bl	811810c <memp_malloc>
 81174de:	4603      	mov	r3, r0
}
 81174e0:	4618      	mov	r0, r3
 81174e2:	bd80      	pop	{r7, pc}

081174e4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 81174e4:	b580      	push	{r7, lr}
 81174e6:	b082      	sub	sp, #8
 81174e8:	af00      	add	r7, sp, #0
 81174ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 81174ec:	687b      	ldr	r3, [r7, #4]
 81174ee:	2b00      	cmp	r3, #0
 81174f0:	d106      	bne.n	8117500 <ip_frag_free_pbuf_custom_ref+0x1c>
 81174f2:	4b07      	ldr	r3, [pc, #28]	@ (8117510 <ip_frag_free_pbuf_custom_ref+0x2c>)
 81174f4:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 81174f8:	4906      	ldr	r1, [pc, #24]	@ (8117514 <ip_frag_free_pbuf_custom_ref+0x30>)
 81174fa:	4807      	ldr	r0, [pc, #28]	@ (8117518 <ip_frag_free_pbuf_custom_ref+0x34>)
 81174fc:	f00a feb2 	bl	8122264 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8117500:	6879      	ldr	r1, [r7, #4]
 8117502:	2005      	movs	r0, #5
 8117504:	f000 fe78 	bl	81181f8 <memp_free>
}
 8117508:	bf00      	nop
 811750a:	3708      	adds	r7, #8
 811750c:	46bd      	mov	sp, r7
 811750e:	bd80      	pop	{r7, pc}
 8117510:	08124e60 	.word	0x08124e60
 8117514:	08125054 	.word	0x08125054
 8117518:	08124ee4 	.word	0x08124ee4

0811751c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 811751c:	b580      	push	{r7, lr}
 811751e:	b084      	sub	sp, #16
 8117520:	af00      	add	r7, sp, #0
 8117522:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8117524:	687b      	ldr	r3, [r7, #4]
 8117526:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8117528:	68fb      	ldr	r3, [r7, #12]
 811752a:	2b00      	cmp	r3, #0
 811752c:	d106      	bne.n	811753c <ipfrag_free_pbuf_custom+0x20>
 811752e:	4b11      	ldr	r3, [pc, #68]	@ (8117574 <ipfrag_free_pbuf_custom+0x58>)
 8117530:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8117534:	4910      	ldr	r1, [pc, #64]	@ (8117578 <ipfrag_free_pbuf_custom+0x5c>)
 8117536:	4811      	ldr	r0, [pc, #68]	@ (811757c <ipfrag_free_pbuf_custom+0x60>)
 8117538:	f00a fe94 	bl	8122264 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 811753c:	68fa      	ldr	r2, [r7, #12]
 811753e:	687b      	ldr	r3, [r7, #4]
 8117540:	429a      	cmp	r2, r3
 8117542:	d006      	beq.n	8117552 <ipfrag_free_pbuf_custom+0x36>
 8117544:	4b0b      	ldr	r3, [pc, #44]	@ (8117574 <ipfrag_free_pbuf_custom+0x58>)
 8117546:	f240 22cf 	movw	r2, #719	@ 0x2cf
 811754a:	490d      	ldr	r1, [pc, #52]	@ (8117580 <ipfrag_free_pbuf_custom+0x64>)
 811754c:	480b      	ldr	r0, [pc, #44]	@ (811757c <ipfrag_free_pbuf_custom+0x60>)
 811754e:	f00a fe89 	bl	8122264 <iprintf>
  if (pcr->original != NULL) {
 8117552:	68fb      	ldr	r3, [r7, #12]
 8117554:	695b      	ldr	r3, [r3, #20]
 8117556:	2b00      	cmp	r3, #0
 8117558:	d004      	beq.n	8117564 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 811755a:	68fb      	ldr	r3, [r7, #12]
 811755c:	695b      	ldr	r3, [r3, #20]
 811755e:	4618      	mov	r0, r3
 8117560:	f001 fe0c 	bl	811917c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8117564:	68f8      	ldr	r0, [r7, #12]
 8117566:	f7ff ffbd 	bl	81174e4 <ip_frag_free_pbuf_custom_ref>
}
 811756a:	bf00      	nop
 811756c:	3710      	adds	r7, #16
 811756e:	46bd      	mov	sp, r7
 8117570:	bd80      	pop	{r7, pc}
 8117572:	bf00      	nop
 8117574:	08124e60 	.word	0x08124e60
 8117578:	08125060 	.word	0x08125060
 811757c:	08124ee4 	.word	0x08124ee4
 8117580:	0812506c 	.word	0x0812506c

08117584 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8117584:	b580      	push	{r7, lr}
 8117586:	b094      	sub	sp, #80	@ 0x50
 8117588:	af02      	add	r7, sp, #8
 811758a:	60f8      	str	r0, [r7, #12]
 811758c:	60b9      	str	r1, [r7, #8]
 811758e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8117590:	2300      	movs	r3, #0
 8117592:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8117596:	68bb      	ldr	r3, [r7, #8]
 8117598:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 811759a:	3b14      	subs	r3, #20
 811759c:	2b00      	cmp	r3, #0
 811759e:	da00      	bge.n	81175a2 <ip4_frag+0x1e>
 81175a0:	3307      	adds	r3, #7
 81175a2:	10db      	asrs	r3, r3, #3
 81175a4:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 81175a6:	2314      	movs	r3, #20
 81175a8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 81175aa:	68fb      	ldr	r3, [r7, #12]
 81175ac:	685b      	ldr	r3, [r3, #4]
 81175ae:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 81175b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81175b2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 81175b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81175b6:	781b      	ldrb	r3, [r3, #0]
 81175b8:	f003 030f 	and.w	r3, r3, #15
 81175bc:	b2db      	uxtb	r3, r3
 81175be:	009b      	lsls	r3, r3, #2
 81175c0:	b2db      	uxtb	r3, r3
 81175c2:	2b14      	cmp	r3, #20
 81175c4:	d002      	beq.n	81175cc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 81175c6:	f06f 0305 	mvn.w	r3, #5
 81175ca:	e110      	b.n	81177ee <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 81175cc:	68fb      	ldr	r3, [r7, #12]
 81175ce:	895b      	ldrh	r3, [r3, #10]
 81175d0:	2b13      	cmp	r3, #19
 81175d2:	d809      	bhi.n	81175e8 <ip4_frag+0x64>
 81175d4:	4b88      	ldr	r3, [pc, #544]	@ (81177f8 <ip4_frag+0x274>)
 81175d6:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 81175da:	4988      	ldr	r1, [pc, #544]	@ (81177fc <ip4_frag+0x278>)
 81175dc:	4888      	ldr	r0, [pc, #544]	@ (8117800 <ip4_frag+0x27c>)
 81175de:	f00a fe41 	bl	8122264 <iprintf>
 81175e2:	f06f 0305 	mvn.w	r3, #5
 81175e6:	e102      	b.n	81177ee <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 81175e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81175ea:	88db      	ldrh	r3, [r3, #6]
 81175ec:	b29b      	uxth	r3, r3
 81175ee:	4618      	mov	r0, r3
 81175f0:	f7fc fe24 	bl	811423c <lwip_htons>
 81175f4:	4603      	mov	r3, r0
 81175f6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 81175f8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 81175fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81175fe:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8117602:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8117604:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8117608:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 811760a:	68fb      	ldr	r3, [r7, #12]
 811760c:	891b      	ldrh	r3, [r3, #8]
 811760e:	3b14      	subs	r3, #20
 8117610:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8117614:	e0e1      	b.n	81177da <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8117616:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8117618:	00db      	lsls	r3, r3, #3
 811761a:	b29b      	uxth	r3, r3
 811761c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8117620:	4293      	cmp	r3, r2
 8117622:	bf28      	it	cs
 8117624:	4613      	movcs	r3, r2
 8117626:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8117628:	f44f 7220 	mov.w	r2, #640	@ 0x280
 811762c:	2114      	movs	r1, #20
 811762e:	200e      	movs	r0, #14
 8117630:	f001 fac0 	bl	8118bb4 <pbuf_alloc>
 8117634:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8117636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8117638:	2b00      	cmp	r3, #0
 811763a:	f000 80d5 	beq.w	81177e8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 811763e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8117640:	895b      	ldrh	r3, [r3, #10]
 8117642:	2b13      	cmp	r3, #19
 8117644:	d806      	bhi.n	8117654 <ip4_frag+0xd0>
 8117646:	4b6c      	ldr	r3, [pc, #432]	@ (81177f8 <ip4_frag+0x274>)
 8117648:	f44f 7249 	mov.w	r2, #804	@ 0x324
 811764c:	496d      	ldr	r1, [pc, #436]	@ (8117804 <ip4_frag+0x280>)
 811764e:	486c      	ldr	r0, [pc, #432]	@ (8117800 <ip4_frag+0x27c>)
 8117650:	f00a fe08 	bl	8122264 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8117654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8117656:	685b      	ldr	r3, [r3, #4]
 8117658:	2214      	movs	r2, #20
 811765a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 811765c:	4618      	mov	r0, r3
 811765e:	f00b f8f6 	bl	812284e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8117662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8117664:	685b      	ldr	r3, [r3, #4]
 8117666:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8117668:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 811766a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 811766e:	e064      	b.n	811773a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8117670:	68fb      	ldr	r3, [r7, #12]
 8117672:	895a      	ldrh	r2, [r3, #10]
 8117674:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8117676:	1ad3      	subs	r3, r2, r3
 8117678:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 811767a:	68fb      	ldr	r3, [r7, #12]
 811767c:	895b      	ldrh	r3, [r3, #10]
 811767e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8117680:	429a      	cmp	r2, r3
 8117682:	d906      	bls.n	8117692 <ip4_frag+0x10e>
 8117684:	4b5c      	ldr	r3, [pc, #368]	@ (81177f8 <ip4_frag+0x274>)
 8117686:	f240 322d 	movw	r2, #813	@ 0x32d
 811768a:	495f      	ldr	r1, [pc, #380]	@ (8117808 <ip4_frag+0x284>)
 811768c:	485c      	ldr	r0, [pc, #368]	@ (8117800 <ip4_frag+0x27c>)
 811768e:	f00a fde9 	bl	8122264 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8117692:	8bfa      	ldrh	r2, [r7, #30]
 8117694:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8117698:	4293      	cmp	r3, r2
 811769a:	bf28      	it	cs
 811769c:	4613      	movcs	r3, r2
 811769e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 81176a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 81176a6:	2b00      	cmp	r3, #0
 81176a8:	d105      	bne.n	81176b6 <ip4_frag+0x132>
        poff = 0;
 81176aa:	2300      	movs	r3, #0
 81176ac:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 81176ae:	68fb      	ldr	r3, [r7, #12]
 81176b0:	681b      	ldr	r3, [r3, #0]
 81176b2:	60fb      	str	r3, [r7, #12]
        continue;
 81176b4:	e041      	b.n	811773a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 81176b6:	f7ff ff0d 	bl	81174d4 <ip_frag_alloc_pbuf_custom_ref>
 81176ba:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 81176bc:	69bb      	ldr	r3, [r7, #24]
 81176be:	2b00      	cmp	r3, #0
 81176c0:	d103      	bne.n	81176ca <ip4_frag+0x146>
        pbuf_free(rambuf);
 81176c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 81176c4:	f001 fd5a 	bl	811917c <pbuf_free>
        goto memerr;
 81176c8:	e08f      	b.n	81177ea <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 81176ca:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 81176cc:	68fb      	ldr	r3, [r7, #12]
 81176ce:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 81176d0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 81176d2:	4413      	add	r3, r2
 81176d4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 81176d8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 81176dc:	9201      	str	r2, [sp, #4]
 81176de:	9300      	str	r3, [sp, #0]
 81176e0:	4603      	mov	r3, r0
 81176e2:	2241      	movs	r2, #65	@ 0x41
 81176e4:	2000      	movs	r0, #0
 81176e6:	f001 fb91 	bl	8118e0c <pbuf_alloced_custom>
 81176ea:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 81176ec:	697b      	ldr	r3, [r7, #20]
 81176ee:	2b00      	cmp	r3, #0
 81176f0:	d106      	bne.n	8117700 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 81176f2:	69b8      	ldr	r0, [r7, #24]
 81176f4:	f7ff fef6 	bl	81174e4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 81176f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 81176fa:	f001 fd3f 	bl	811917c <pbuf_free>
        goto memerr;
 81176fe:	e074      	b.n	81177ea <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8117700:	68f8      	ldr	r0, [r7, #12]
 8117702:	f001 fde1 	bl	81192c8 <pbuf_ref>
      pcr->original = p;
 8117706:	69bb      	ldr	r3, [r7, #24]
 8117708:	68fa      	ldr	r2, [r7, #12]
 811770a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 811770c:	69bb      	ldr	r3, [r7, #24]
 811770e:	4a3f      	ldr	r2, [pc, #252]	@ (811780c <ip4_frag+0x288>)
 8117710:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8117712:	6979      	ldr	r1, [r7, #20]
 8117714:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8117716:	f001 fdff 	bl	8119318 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 811771a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 811771e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8117722:	1ad3      	subs	r3, r2, r3
 8117724:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8117728:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 811772c:	2b00      	cmp	r3, #0
 811772e:	d004      	beq.n	811773a <ip4_frag+0x1b6>
        poff = 0;
 8117730:	2300      	movs	r3, #0
 8117732:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8117734:	68fb      	ldr	r3, [r7, #12]
 8117736:	681b      	ldr	r3, [r3, #0]
 8117738:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 811773a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 811773e:	2b00      	cmp	r3, #0
 8117740:	d196      	bne.n	8117670 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8117742:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8117744:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8117748:	4413      	add	r3, r2
 811774a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 811774c:	68bb      	ldr	r3, [r7, #8]
 811774e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8117750:	f1a3 0213 	sub.w	r2, r3, #19
 8117754:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8117758:	429a      	cmp	r2, r3
 811775a:	bfcc      	ite	gt
 811775c:	2301      	movgt	r3, #1
 811775e:	2300      	movle	r3, #0
 8117760:	b2db      	uxtb	r3, r3
 8117762:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8117764:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8117768:	f3c3 030c 	ubfx	r3, r3, #0, #13
 811776c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 811776e:	6a3b      	ldr	r3, [r7, #32]
 8117770:	2b00      	cmp	r3, #0
 8117772:	d002      	beq.n	811777a <ip4_frag+0x1f6>
 8117774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8117776:	2b00      	cmp	r3, #0
 8117778:	d003      	beq.n	8117782 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 811777a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 811777c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8117780:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8117782:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8117784:	4618      	mov	r0, r3
 8117786:	f7fc fd59 	bl	811423c <lwip_htons>
 811778a:	4603      	mov	r3, r0
 811778c:	461a      	mov	r2, r3
 811778e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8117790:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8117792:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8117794:	3314      	adds	r3, #20
 8117796:	b29b      	uxth	r3, r3
 8117798:	4618      	mov	r0, r3
 811779a:	f7fc fd4f 	bl	811423c <lwip_htons>
 811779e:	4603      	mov	r3, r0
 81177a0:	461a      	mov	r2, r3
 81177a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81177a4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 81177a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81177a8:	2200      	movs	r2, #0
 81177aa:	729a      	strb	r2, [r3, #10]
 81177ac:	2200      	movs	r2, #0
 81177ae:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 81177b0:	68bb      	ldr	r3, [r7, #8]
 81177b2:	695b      	ldr	r3, [r3, #20]
 81177b4:	687a      	ldr	r2, [r7, #4]
 81177b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 81177b8:	68b8      	ldr	r0, [r7, #8]
 81177ba:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 81177bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 81177be:	f001 fcdd 	bl	811917c <pbuf_free>
    left = (u16_t)(left - fragsize);
 81177c2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 81177c6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 81177c8:	1ad3      	subs	r3, r2, r3
 81177ca:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 81177ce:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 81177d2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 81177d4:	4413      	add	r3, r2
 81177d6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 81177da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 81177de:	2b00      	cmp	r3, #0
 81177e0:	f47f af19 	bne.w	8117616 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 81177e4:	2300      	movs	r3, #0
 81177e6:	e002      	b.n	81177ee <ip4_frag+0x26a>
      goto memerr;
 81177e8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 81177ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 81177ee:	4618      	mov	r0, r3
 81177f0:	3748      	adds	r7, #72	@ 0x48
 81177f2:	46bd      	mov	sp, r7
 81177f4:	bd80      	pop	{r7, pc}
 81177f6:	bf00      	nop
 81177f8:	08124e60 	.word	0x08124e60
 81177fc:	08125078 	.word	0x08125078
 8117800:	08124ee4 	.word	0x08124ee4
 8117804:	08125094 	.word	0x08125094
 8117808:	081250b4 	.word	0x081250b4
 811780c:	0811751d 	.word	0x0811751d

08117810 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8117810:	b480      	push	{r7}
 8117812:	b083      	sub	sp, #12
 8117814:	af00      	add	r7, sp, #0
 8117816:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 8117818:	4b04      	ldr	r3, [pc, #16]	@ (811782c <ptr_to_mem+0x1c>)
 811781a:	681a      	ldr	r2, [r3, #0]
 811781c:	687b      	ldr	r3, [r7, #4]
 811781e:	4413      	add	r3, r2
}
 8117820:	4618      	mov	r0, r3
 8117822:	370c      	adds	r7, #12
 8117824:	46bd      	mov	sp, r7
 8117826:	f85d 7b04 	ldr.w	r7, [sp], #4
 811782a:	4770      	bx	lr
 811782c:	1000b2e8 	.word	0x1000b2e8

08117830 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8117830:	b480      	push	{r7}
 8117832:	b083      	sub	sp, #12
 8117834:	af00      	add	r7, sp, #0
 8117836:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8117838:	4b04      	ldr	r3, [pc, #16]	@ (811784c <mem_to_ptr+0x1c>)
 811783a:	681b      	ldr	r3, [r3, #0]
 811783c:	687a      	ldr	r2, [r7, #4]
 811783e:	1ad3      	subs	r3, r2, r3
}
 8117840:	4618      	mov	r0, r3
 8117842:	370c      	adds	r7, #12
 8117844:	46bd      	mov	sp, r7
 8117846:	f85d 7b04 	ldr.w	r7, [sp], #4
 811784a:	4770      	bx	lr
 811784c:	1000b2e8 	.word	0x1000b2e8

08117850 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8117850:	b590      	push	{r4, r7, lr}
 8117852:	b085      	sub	sp, #20
 8117854:	af00      	add	r7, sp, #0
 8117856:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8117858:	4b45      	ldr	r3, [pc, #276]	@ (8117970 <plug_holes+0x120>)
 811785a:	681b      	ldr	r3, [r3, #0]
 811785c:	687a      	ldr	r2, [r7, #4]
 811785e:	429a      	cmp	r2, r3
 8117860:	d206      	bcs.n	8117870 <plug_holes+0x20>
 8117862:	4b44      	ldr	r3, [pc, #272]	@ (8117974 <plug_holes+0x124>)
 8117864:	f240 12df 	movw	r2, #479	@ 0x1df
 8117868:	4943      	ldr	r1, [pc, #268]	@ (8117978 <plug_holes+0x128>)
 811786a:	4844      	ldr	r0, [pc, #272]	@ (811797c <plug_holes+0x12c>)
 811786c:	f00a fcfa 	bl	8122264 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8117870:	4b43      	ldr	r3, [pc, #268]	@ (8117980 <plug_holes+0x130>)
 8117872:	681b      	ldr	r3, [r3, #0]
 8117874:	687a      	ldr	r2, [r7, #4]
 8117876:	429a      	cmp	r2, r3
 8117878:	d306      	bcc.n	8117888 <plug_holes+0x38>
 811787a:	4b3e      	ldr	r3, [pc, #248]	@ (8117974 <plug_holes+0x124>)
 811787c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8117880:	4940      	ldr	r1, [pc, #256]	@ (8117984 <plug_holes+0x134>)
 8117882:	483e      	ldr	r0, [pc, #248]	@ (811797c <plug_holes+0x12c>)
 8117884:	f00a fcee 	bl	8122264 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8117888:	687b      	ldr	r3, [r7, #4]
 811788a:	7a1b      	ldrb	r3, [r3, #8]
 811788c:	2b00      	cmp	r3, #0
 811788e:	d006      	beq.n	811789e <plug_holes+0x4e>
 8117890:	4b38      	ldr	r3, [pc, #224]	@ (8117974 <plug_holes+0x124>)
 8117892:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8117896:	493c      	ldr	r1, [pc, #240]	@ (8117988 <plug_holes+0x138>)
 8117898:	4838      	ldr	r0, [pc, #224]	@ (811797c <plug_holes+0x12c>)
 811789a:	f00a fce3 	bl	8122264 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 811789e:	687b      	ldr	r3, [r7, #4]
 81178a0:	681b      	ldr	r3, [r3, #0]
 81178a2:	4a3a      	ldr	r2, [pc, #232]	@ (811798c <plug_holes+0x13c>)
 81178a4:	4293      	cmp	r3, r2
 81178a6:	d906      	bls.n	81178b6 <plug_holes+0x66>
 81178a8:	4b32      	ldr	r3, [pc, #200]	@ (8117974 <plug_holes+0x124>)
 81178aa:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 81178ae:	4938      	ldr	r1, [pc, #224]	@ (8117990 <plug_holes+0x140>)
 81178b0:	4832      	ldr	r0, [pc, #200]	@ (811797c <plug_holes+0x12c>)
 81178b2:	f00a fcd7 	bl	8122264 <iprintf>

  nmem = ptr_to_mem(mem->next);
 81178b6:	687b      	ldr	r3, [r7, #4]
 81178b8:	681b      	ldr	r3, [r3, #0]
 81178ba:	4618      	mov	r0, r3
 81178bc:	f7ff ffa8 	bl	8117810 <ptr_to_mem>
 81178c0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 81178c2:	687a      	ldr	r2, [r7, #4]
 81178c4:	68fb      	ldr	r3, [r7, #12]
 81178c6:	429a      	cmp	r2, r3
 81178c8:	d024      	beq.n	8117914 <plug_holes+0xc4>
 81178ca:	68fb      	ldr	r3, [r7, #12]
 81178cc:	7a1b      	ldrb	r3, [r3, #8]
 81178ce:	2b00      	cmp	r3, #0
 81178d0:	d120      	bne.n	8117914 <plug_holes+0xc4>
 81178d2:	4b2b      	ldr	r3, [pc, #172]	@ (8117980 <plug_holes+0x130>)
 81178d4:	681b      	ldr	r3, [r3, #0]
 81178d6:	68fa      	ldr	r2, [r7, #12]
 81178d8:	429a      	cmp	r2, r3
 81178da:	d01b      	beq.n	8117914 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 81178dc:	4b2d      	ldr	r3, [pc, #180]	@ (8117994 <plug_holes+0x144>)
 81178de:	681b      	ldr	r3, [r3, #0]
 81178e0:	68fa      	ldr	r2, [r7, #12]
 81178e2:	429a      	cmp	r2, r3
 81178e4:	d102      	bne.n	81178ec <plug_holes+0x9c>
      lfree = mem;
 81178e6:	4a2b      	ldr	r2, [pc, #172]	@ (8117994 <plug_holes+0x144>)
 81178e8:	687b      	ldr	r3, [r7, #4]
 81178ea:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 81178ec:	68fb      	ldr	r3, [r7, #12]
 81178ee:	681a      	ldr	r2, [r3, #0]
 81178f0:	687b      	ldr	r3, [r7, #4]
 81178f2:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 81178f4:	68fb      	ldr	r3, [r7, #12]
 81178f6:	681b      	ldr	r3, [r3, #0]
 81178f8:	4a24      	ldr	r2, [pc, #144]	@ (811798c <plug_holes+0x13c>)
 81178fa:	4293      	cmp	r3, r2
 81178fc:	d00a      	beq.n	8117914 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 81178fe:	68fb      	ldr	r3, [r7, #12]
 8117900:	681b      	ldr	r3, [r3, #0]
 8117902:	4618      	mov	r0, r3
 8117904:	f7ff ff84 	bl	8117810 <ptr_to_mem>
 8117908:	4604      	mov	r4, r0
 811790a:	6878      	ldr	r0, [r7, #4]
 811790c:	f7ff ff90 	bl	8117830 <mem_to_ptr>
 8117910:	4603      	mov	r3, r0
 8117912:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8117914:	687b      	ldr	r3, [r7, #4]
 8117916:	685b      	ldr	r3, [r3, #4]
 8117918:	4618      	mov	r0, r3
 811791a:	f7ff ff79 	bl	8117810 <ptr_to_mem>
 811791e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8117920:	68ba      	ldr	r2, [r7, #8]
 8117922:	687b      	ldr	r3, [r7, #4]
 8117924:	429a      	cmp	r2, r3
 8117926:	d01f      	beq.n	8117968 <plug_holes+0x118>
 8117928:	68bb      	ldr	r3, [r7, #8]
 811792a:	7a1b      	ldrb	r3, [r3, #8]
 811792c:	2b00      	cmp	r3, #0
 811792e:	d11b      	bne.n	8117968 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8117930:	4b18      	ldr	r3, [pc, #96]	@ (8117994 <plug_holes+0x144>)
 8117932:	681b      	ldr	r3, [r3, #0]
 8117934:	687a      	ldr	r2, [r7, #4]
 8117936:	429a      	cmp	r2, r3
 8117938:	d102      	bne.n	8117940 <plug_holes+0xf0>
      lfree = pmem;
 811793a:	4a16      	ldr	r2, [pc, #88]	@ (8117994 <plug_holes+0x144>)
 811793c:	68bb      	ldr	r3, [r7, #8]
 811793e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8117940:	687b      	ldr	r3, [r7, #4]
 8117942:	681a      	ldr	r2, [r3, #0]
 8117944:	68bb      	ldr	r3, [r7, #8]
 8117946:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8117948:	687b      	ldr	r3, [r7, #4]
 811794a:	681b      	ldr	r3, [r3, #0]
 811794c:	4a0f      	ldr	r2, [pc, #60]	@ (811798c <plug_holes+0x13c>)
 811794e:	4293      	cmp	r3, r2
 8117950:	d00a      	beq.n	8117968 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8117952:	687b      	ldr	r3, [r7, #4]
 8117954:	681b      	ldr	r3, [r3, #0]
 8117956:	4618      	mov	r0, r3
 8117958:	f7ff ff5a 	bl	8117810 <ptr_to_mem>
 811795c:	4604      	mov	r4, r0
 811795e:	68b8      	ldr	r0, [r7, #8]
 8117960:	f7ff ff66 	bl	8117830 <mem_to_ptr>
 8117964:	4603      	mov	r3, r0
 8117966:	6063      	str	r3, [r4, #4]
    }
  }
}
 8117968:	bf00      	nop
 811796a:	3714      	adds	r7, #20
 811796c:	46bd      	mov	sp, r7
 811796e:	bd90      	pop	{r4, r7, pc}
 8117970:	1000b2e8 	.word	0x1000b2e8
 8117974:	081250c4 	.word	0x081250c4
 8117978:	08125134 	.word	0x08125134
 811797c:	0812514c 	.word	0x0812514c
 8117980:	1000b2ec 	.word	0x1000b2ec
 8117984:	08125174 	.word	0x08125174
 8117988:	08125190 	.word	0x08125190
 811798c:	0001ffe8 	.word	0x0001ffe8
 8117990:	081251ac 	.word	0x081251ac
 8117994:	1000b2f4 	.word	0x1000b2f4

08117998 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8117998:	b580      	push	{r7, lr}
 811799a:	b082      	sub	sp, #8
 811799c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 811799e:	4b1b      	ldr	r3, [pc, #108]	@ (8117a0c <mem_init+0x74>)
 81179a0:	4a1b      	ldr	r2, [pc, #108]	@ (8117a10 <mem_init+0x78>)
 81179a2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 81179a4:	4b19      	ldr	r3, [pc, #100]	@ (8117a0c <mem_init+0x74>)
 81179a6:	681b      	ldr	r3, [r3, #0]
 81179a8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 81179aa:	687b      	ldr	r3, [r7, #4]
 81179ac:	4a19      	ldr	r2, [pc, #100]	@ (8117a14 <mem_init+0x7c>)
 81179ae:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 81179b0:	687b      	ldr	r3, [r7, #4]
 81179b2:	2200      	movs	r2, #0
 81179b4:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 81179b6:	687b      	ldr	r3, [r7, #4]
 81179b8:	2200      	movs	r2, #0
 81179ba:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 81179bc:	4815      	ldr	r0, [pc, #84]	@ (8117a14 <mem_init+0x7c>)
 81179be:	f7ff ff27 	bl	8117810 <ptr_to_mem>
 81179c2:	4603      	mov	r3, r0
 81179c4:	4a14      	ldr	r2, [pc, #80]	@ (8117a18 <mem_init+0x80>)
 81179c6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 81179c8:	4b13      	ldr	r3, [pc, #76]	@ (8117a18 <mem_init+0x80>)
 81179ca:	681b      	ldr	r3, [r3, #0]
 81179cc:	2201      	movs	r2, #1
 81179ce:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 81179d0:	4b11      	ldr	r3, [pc, #68]	@ (8117a18 <mem_init+0x80>)
 81179d2:	681b      	ldr	r3, [r3, #0]
 81179d4:	4a0f      	ldr	r2, [pc, #60]	@ (8117a14 <mem_init+0x7c>)
 81179d6:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 81179d8:	4b0f      	ldr	r3, [pc, #60]	@ (8117a18 <mem_init+0x80>)
 81179da:	681b      	ldr	r3, [r3, #0]
 81179dc:	4a0d      	ldr	r2, [pc, #52]	@ (8117a14 <mem_init+0x7c>)
 81179de:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 81179e0:	4b0a      	ldr	r3, [pc, #40]	@ (8117a0c <mem_init+0x74>)
 81179e2:	681b      	ldr	r3, [r3, #0]
 81179e4:	4a0d      	ldr	r2, [pc, #52]	@ (8117a1c <mem_init+0x84>)
 81179e6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 81179e8:	480d      	ldr	r0, [pc, #52]	@ (8117a20 <mem_init+0x88>)
 81179ea:	f001 fef3 	bl	81197d4 <sys_mutex_new>
 81179ee:	4603      	mov	r3, r0
 81179f0:	2b00      	cmp	r3, #0
 81179f2:	d006      	beq.n	8117a02 <mem_init+0x6a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 81179f4:	4b0b      	ldr	r3, [pc, #44]	@ (8117a24 <mem_init+0x8c>)
 81179f6:	f240 221f 	movw	r2, #543	@ 0x21f
 81179fa:	490b      	ldr	r1, [pc, #44]	@ (8117a28 <mem_init+0x90>)
 81179fc:	480b      	ldr	r0, [pc, #44]	@ (8117a2c <mem_init+0x94>)
 81179fe:	f00a fc31 	bl	8122264 <iprintf>
  }
}
 8117a02:	bf00      	nop
 8117a04:	3708      	adds	r7, #8
 8117a06:	46bd      	mov	sp, r7
 8117a08:	bd80      	pop	{r7, pc}
 8117a0a:	bf00      	nop
 8117a0c:	1000b2e8 	.word	0x1000b2e8
 8117a10:	10020000 	.word	0x10020000
 8117a14:	0001ffe8 	.word	0x0001ffe8
 8117a18:	1000b2ec 	.word	0x1000b2ec
 8117a1c:	1000b2f4 	.word	0x1000b2f4
 8117a20:	1000b2f0 	.word	0x1000b2f0
 8117a24:	081250c4 	.word	0x081250c4
 8117a28:	081251d8 	.word	0x081251d8
 8117a2c:	0812514c 	.word	0x0812514c

08117a30 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8117a30:	b580      	push	{r7, lr}
 8117a32:	b086      	sub	sp, #24
 8117a34:	af00      	add	r7, sp, #0
 8117a36:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8117a38:	6878      	ldr	r0, [r7, #4]
 8117a3a:	f7ff fef9 	bl	8117830 <mem_to_ptr>
 8117a3e:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 8117a40:	687b      	ldr	r3, [r7, #4]
 8117a42:	681b      	ldr	r3, [r3, #0]
 8117a44:	4618      	mov	r0, r3
 8117a46:	f7ff fee3 	bl	8117810 <ptr_to_mem>
 8117a4a:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8117a4c:	687b      	ldr	r3, [r7, #4]
 8117a4e:	685b      	ldr	r3, [r3, #4]
 8117a50:	4618      	mov	r0, r3
 8117a52:	f7ff fedd 	bl	8117810 <ptr_to_mem>
 8117a56:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8117a58:	687b      	ldr	r3, [r7, #4]
 8117a5a:	681b      	ldr	r3, [r3, #0]
 8117a5c:	4a11      	ldr	r2, [pc, #68]	@ (8117aa4 <mem_link_valid+0x74>)
 8117a5e:	4293      	cmp	r3, r2
 8117a60:	d818      	bhi.n	8117a94 <mem_link_valid+0x64>
 8117a62:	687b      	ldr	r3, [r7, #4]
 8117a64:	685b      	ldr	r3, [r3, #4]
 8117a66:	4a0f      	ldr	r2, [pc, #60]	@ (8117aa4 <mem_link_valid+0x74>)
 8117a68:	4293      	cmp	r3, r2
 8117a6a:	d813      	bhi.n	8117a94 <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8117a6c:	687b      	ldr	r3, [r7, #4]
 8117a6e:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8117a70:	697a      	ldr	r2, [r7, #20]
 8117a72:	429a      	cmp	r2, r3
 8117a74:	d004      	beq.n	8117a80 <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8117a76:	68fb      	ldr	r3, [r7, #12]
 8117a78:	681b      	ldr	r3, [r3, #0]
 8117a7a:	697a      	ldr	r2, [r7, #20]
 8117a7c:	429a      	cmp	r2, r3
 8117a7e:	d109      	bne.n	8117a94 <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8117a80:	4b09      	ldr	r3, [pc, #36]	@ (8117aa8 <mem_link_valid+0x78>)
 8117a82:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8117a84:	693a      	ldr	r2, [r7, #16]
 8117a86:	429a      	cmp	r2, r3
 8117a88:	d006      	beq.n	8117a98 <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8117a8a:	693b      	ldr	r3, [r7, #16]
 8117a8c:	685b      	ldr	r3, [r3, #4]
 8117a8e:	697a      	ldr	r2, [r7, #20]
 8117a90:	429a      	cmp	r2, r3
 8117a92:	d001      	beq.n	8117a98 <mem_link_valid+0x68>
    return 0;
 8117a94:	2300      	movs	r3, #0
 8117a96:	e000      	b.n	8117a9a <mem_link_valid+0x6a>
  }
  return 1;
 8117a98:	2301      	movs	r3, #1
}
 8117a9a:	4618      	mov	r0, r3
 8117a9c:	3718      	adds	r7, #24
 8117a9e:	46bd      	mov	sp, r7
 8117aa0:	bd80      	pop	{r7, pc}
 8117aa2:	bf00      	nop
 8117aa4:	0001ffe8 	.word	0x0001ffe8
 8117aa8:	1000b2ec 	.word	0x1000b2ec

08117aac <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8117aac:	b580      	push	{r7, lr}
 8117aae:	b088      	sub	sp, #32
 8117ab0:	af00      	add	r7, sp, #0
 8117ab2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8117ab4:	687b      	ldr	r3, [r7, #4]
 8117ab6:	2b00      	cmp	r3, #0
 8117ab8:	d070      	beq.n	8117b9c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8117aba:	687b      	ldr	r3, [r7, #4]
 8117abc:	f003 0303 	and.w	r3, r3, #3
 8117ac0:	2b00      	cmp	r3, #0
 8117ac2:	d00d      	beq.n	8117ae0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8117ac4:	4b37      	ldr	r3, [pc, #220]	@ (8117ba4 <mem_free+0xf8>)
 8117ac6:	f240 2273 	movw	r2, #627	@ 0x273
 8117aca:	4937      	ldr	r1, [pc, #220]	@ (8117ba8 <mem_free+0xfc>)
 8117acc:	4837      	ldr	r0, [pc, #220]	@ (8117bac <mem_free+0x100>)
 8117ace:	f00a fbc9 	bl	8122264 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8117ad2:	f001 fed1 	bl	8119878 <sys_arch_protect>
 8117ad6:	60f8      	str	r0, [r7, #12]
 8117ad8:	68f8      	ldr	r0, [r7, #12]
 8117ada:	f001 fedb 	bl	8119894 <sys_arch_unprotect>
    return;
 8117ade:	e05e      	b.n	8117b9e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8117ae0:	687b      	ldr	r3, [r7, #4]
 8117ae2:	3b0c      	subs	r3, #12
 8117ae4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8117ae6:	4b32      	ldr	r3, [pc, #200]	@ (8117bb0 <mem_free+0x104>)
 8117ae8:	681b      	ldr	r3, [r3, #0]
 8117aea:	69fa      	ldr	r2, [r7, #28]
 8117aec:	429a      	cmp	r2, r3
 8117aee:	d306      	bcc.n	8117afe <mem_free+0x52>
 8117af0:	687b      	ldr	r3, [r7, #4]
 8117af2:	f103 020c 	add.w	r2, r3, #12
 8117af6:	4b2f      	ldr	r3, [pc, #188]	@ (8117bb4 <mem_free+0x108>)
 8117af8:	681b      	ldr	r3, [r3, #0]
 8117afa:	429a      	cmp	r2, r3
 8117afc:	d90d      	bls.n	8117b1a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8117afe:	4b29      	ldr	r3, [pc, #164]	@ (8117ba4 <mem_free+0xf8>)
 8117b00:	f240 227f 	movw	r2, #639	@ 0x27f
 8117b04:	492c      	ldr	r1, [pc, #176]	@ (8117bb8 <mem_free+0x10c>)
 8117b06:	4829      	ldr	r0, [pc, #164]	@ (8117bac <mem_free+0x100>)
 8117b08:	f00a fbac 	bl	8122264 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8117b0c:	f001 feb4 	bl	8119878 <sys_arch_protect>
 8117b10:	6138      	str	r0, [r7, #16]
 8117b12:	6938      	ldr	r0, [r7, #16]
 8117b14:	f001 febe 	bl	8119894 <sys_arch_unprotect>
    return;
 8117b18:	e041      	b.n	8117b9e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8117b1a:	4828      	ldr	r0, [pc, #160]	@ (8117bbc <mem_free+0x110>)
 8117b1c:	f001 fe70 	bl	8119800 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8117b20:	69fb      	ldr	r3, [r7, #28]
 8117b22:	7a1b      	ldrb	r3, [r3, #8]
 8117b24:	2b00      	cmp	r3, #0
 8117b26:	d110      	bne.n	8117b4a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8117b28:	4b1e      	ldr	r3, [pc, #120]	@ (8117ba4 <mem_free+0xf8>)
 8117b2a:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8117b2e:	4924      	ldr	r1, [pc, #144]	@ (8117bc0 <mem_free+0x114>)
 8117b30:	481e      	ldr	r0, [pc, #120]	@ (8117bac <mem_free+0x100>)
 8117b32:	f00a fb97 	bl	8122264 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8117b36:	4821      	ldr	r0, [pc, #132]	@ (8117bbc <mem_free+0x110>)
 8117b38:	f001 fe71 	bl	811981e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8117b3c:	f001 fe9c 	bl	8119878 <sys_arch_protect>
 8117b40:	6178      	str	r0, [r7, #20]
 8117b42:	6978      	ldr	r0, [r7, #20]
 8117b44:	f001 fea6 	bl	8119894 <sys_arch_unprotect>
    return;
 8117b48:	e029      	b.n	8117b9e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8117b4a:	69f8      	ldr	r0, [r7, #28]
 8117b4c:	f7ff ff70 	bl	8117a30 <mem_link_valid>
 8117b50:	4603      	mov	r3, r0
 8117b52:	2b00      	cmp	r3, #0
 8117b54:	d110      	bne.n	8117b78 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8117b56:	4b13      	ldr	r3, [pc, #76]	@ (8117ba4 <mem_free+0xf8>)
 8117b58:	f240 2295 	movw	r2, #661	@ 0x295
 8117b5c:	4919      	ldr	r1, [pc, #100]	@ (8117bc4 <mem_free+0x118>)
 8117b5e:	4813      	ldr	r0, [pc, #76]	@ (8117bac <mem_free+0x100>)
 8117b60:	f00a fb80 	bl	8122264 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8117b64:	4815      	ldr	r0, [pc, #84]	@ (8117bbc <mem_free+0x110>)
 8117b66:	f001 fe5a 	bl	811981e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8117b6a:	f001 fe85 	bl	8119878 <sys_arch_protect>
 8117b6e:	61b8      	str	r0, [r7, #24]
 8117b70:	69b8      	ldr	r0, [r7, #24]
 8117b72:	f001 fe8f 	bl	8119894 <sys_arch_unprotect>
    return;
 8117b76:	e012      	b.n	8117b9e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8117b78:	69fb      	ldr	r3, [r7, #28]
 8117b7a:	2200      	movs	r2, #0
 8117b7c:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 8117b7e:	4b12      	ldr	r3, [pc, #72]	@ (8117bc8 <mem_free+0x11c>)
 8117b80:	681b      	ldr	r3, [r3, #0]
 8117b82:	69fa      	ldr	r2, [r7, #28]
 8117b84:	429a      	cmp	r2, r3
 8117b86:	d202      	bcs.n	8117b8e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8117b88:	4a0f      	ldr	r2, [pc, #60]	@ (8117bc8 <mem_free+0x11c>)
 8117b8a:	69fb      	ldr	r3, [r7, #28]
 8117b8c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8117b8e:	69f8      	ldr	r0, [r7, #28]
 8117b90:	f7ff fe5e 	bl	8117850 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8117b94:	4809      	ldr	r0, [pc, #36]	@ (8117bbc <mem_free+0x110>)
 8117b96:	f001 fe42 	bl	811981e <sys_mutex_unlock>
 8117b9a:	e000      	b.n	8117b9e <mem_free+0xf2>
    return;
 8117b9c:	bf00      	nop
}
 8117b9e:	3720      	adds	r7, #32
 8117ba0:	46bd      	mov	sp, r7
 8117ba2:	bd80      	pop	{r7, pc}
 8117ba4:	081250c4 	.word	0x081250c4
 8117ba8:	081251f4 	.word	0x081251f4
 8117bac:	0812514c 	.word	0x0812514c
 8117bb0:	1000b2e8 	.word	0x1000b2e8
 8117bb4:	1000b2ec 	.word	0x1000b2ec
 8117bb8:	08125218 	.word	0x08125218
 8117bbc:	1000b2f0 	.word	0x1000b2f0
 8117bc0:	08125234 	.word	0x08125234
 8117bc4:	0812525c 	.word	0x0812525c
 8117bc8:	1000b2f4 	.word	0x1000b2f4

08117bcc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8117bcc:	b580      	push	{r7, lr}
 8117bce:	b08a      	sub	sp, #40	@ 0x28
 8117bd0:	af00      	add	r7, sp, #0
 8117bd2:	6078      	str	r0, [r7, #4]
 8117bd4:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8117bd6:	683b      	ldr	r3, [r7, #0]
 8117bd8:	3303      	adds	r3, #3
 8117bda:	f023 0303 	bic.w	r3, r3, #3
 8117bde:	627b      	str	r3, [r7, #36]	@ 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 8117be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8117be2:	2b0b      	cmp	r3, #11
 8117be4:	d801      	bhi.n	8117bea <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8117be6:	230c      	movs	r3, #12
 8117be8:	627b      	str	r3, [r7, #36]	@ 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8117bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8117bec:	4a6e      	ldr	r2, [pc, #440]	@ (8117da8 <mem_trim+0x1dc>)
 8117bee:	4293      	cmp	r3, r2
 8117bf0:	d803      	bhi.n	8117bfa <mem_trim+0x2e>
 8117bf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8117bf4:	683b      	ldr	r3, [r7, #0]
 8117bf6:	429a      	cmp	r2, r3
 8117bf8:	d201      	bcs.n	8117bfe <mem_trim+0x32>
    return NULL;
 8117bfa:	2300      	movs	r3, #0
 8117bfc:	e0d0      	b.n	8117da0 <mem_trim+0x1d4>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8117bfe:	4b6b      	ldr	r3, [pc, #428]	@ (8117dac <mem_trim+0x1e0>)
 8117c00:	681b      	ldr	r3, [r3, #0]
 8117c02:	687a      	ldr	r2, [r7, #4]
 8117c04:	429a      	cmp	r2, r3
 8117c06:	d304      	bcc.n	8117c12 <mem_trim+0x46>
 8117c08:	4b69      	ldr	r3, [pc, #420]	@ (8117db0 <mem_trim+0x1e4>)
 8117c0a:	681b      	ldr	r3, [r3, #0]
 8117c0c:	687a      	ldr	r2, [r7, #4]
 8117c0e:	429a      	cmp	r2, r3
 8117c10:	d306      	bcc.n	8117c20 <mem_trim+0x54>
 8117c12:	4b68      	ldr	r3, [pc, #416]	@ (8117db4 <mem_trim+0x1e8>)
 8117c14:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8117c18:	4967      	ldr	r1, [pc, #412]	@ (8117db8 <mem_trim+0x1ec>)
 8117c1a:	4868      	ldr	r0, [pc, #416]	@ (8117dbc <mem_trim+0x1f0>)
 8117c1c:	f00a fb22 	bl	8122264 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8117c20:	4b62      	ldr	r3, [pc, #392]	@ (8117dac <mem_trim+0x1e0>)
 8117c22:	681b      	ldr	r3, [r3, #0]
 8117c24:	687a      	ldr	r2, [r7, #4]
 8117c26:	429a      	cmp	r2, r3
 8117c28:	d304      	bcc.n	8117c34 <mem_trim+0x68>
 8117c2a:	4b61      	ldr	r3, [pc, #388]	@ (8117db0 <mem_trim+0x1e4>)
 8117c2c:	681b      	ldr	r3, [r3, #0]
 8117c2e:	687a      	ldr	r2, [r7, #4]
 8117c30:	429a      	cmp	r2, r3
 8117c32:	d307      	bcc.n	8117c44 <mem_trim+0x78>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8117c34:	f001 fe20 	bl	8119878 <sys_arch_protect>
 8117c38:	60b8      	str	r0, [r7, #8]
 8117c3a:	68b8      	ldr	r0, [r7, #8]
 8117c3c:	f001 fe2a 	bl	8119894 <sys_arch_unprotect>
    return rmem;
 8117c40:	687b      	ldr	r3, [r7, #4]
 8117c42:	e0ad      	b.n	8117da0 <mem_trim+0x1d4>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8117c44:	687b      	ldr	r3, [r7, #4]
 8117c46:	3b0c      	subs	r3, #12
 8117c48:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8117c4a:	6a38      	ldr	r0, [r7, #32]
 8117c4c:	f7ff fdf0 	bl	8117830 <mem_to_ptr>
 8117c50:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8117c52:	6a3b      	ldr	r3, [r7, #32]
 8117c54:	681a      	ldr	r2, [r3, #0]
 8117c56:	69fb      	ldr	r3, [r7, #28]
 8117c58:	1ad3      	subs	r3, r2, r3
 8117c5a:	3b0c      	subs	r3, #12
 8117c5c:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8117c5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8117c60:	69bb      	ldr	r3, [r7, #24]
 8117c62:	429a      	cmp	r2, r3
 8117c64:	d906      	bls.n	8117c74 <mem_trim+0xa8>
 8117c66:	4b53      	ldr	r3, [pc, #332]	@ (8117db4 <mem_trim+0x1e8>)
 8117c68:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8117c6c:	4954      	ldr	r1, [pc, #336]	@ (8117dc0 <mem_trim+0x1f4>)
 8117c6e:	4853      	ldr	r0, [pc, #332]	@ (8117dbc <mem_trim+0x1f0>)
 8117c70:	f00a faf8 	bl	8122264 <iprintf>
  if (newsize > size) {
 8117c74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8117c76:	69bb      	ldr	r3, [r7, #24]
 8117c78:	429a      	cmp	r2, r3
 8117c7a:	d901      	bls.n	8117c80 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 8117c7c:	2300      	movs	r3, #0
 8117c7e:	e08f      	b.n	8117da0 <mem_trim+0x1d4>
  }
  if (newsize == size) {
 8117c80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8117c82:	69bb      	ldr	r3, [r7, #24]
 8117c84:	429a      	cmp	r2, r3
 8117c86:	d101      	bne.n	8117c8c <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 8117c88:	687b      	ldr	r3, [r7, #4]
 8117c8a:	e089      	b.n	8117da0 <mem_trim+0x1d4>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8117c8c:	484d      	ldr	r0, [pc, #308]	@ (8117dc4 <mem_trim+0x1f8>)
 8117c8e:	f001 fdb7 	bl	8119800 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8117c92:	6a3b      	ldr	r3, [r7, #32]
 8117c94:	681b      	ldr	r3, [r3, #0]
 8117c96:	4618      	mov	r0, r3
 8117c98:	f7ff fdba 	bl	8117810 <ptr_to_mem>
 8117c9c:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 8117c9e:	697b      	ldr	r3, [r7, #20]
 8117ca0:	7a1b      	ldrb	r3, [r3, #8]
 8117ca2:	2b00      	cmp	r3, #0
 8117ca4:	d13c      	bne.n	8117d20 <mem_trim+0x154>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8117ca6:	6a3b      	ldr	r3, [r7, #32]
 8117ca8:	681b      	ldr	r3, [r3, #0]
 8117caa:	4a3f      	ldr	r2, [pc, #252]	@ (8117da8 <mem_trim+0x1dc>)
 8117cac:	4293      	cmp	r3, r2
 8117cae:	d106      	bne.n	8117cbe <mem_trim+0xf2>
 8117cb0:	4b40      	ldr	r3, [pc, #256]	@ (8117db4 <mem_trim+0x1e8>)
 8117cb2:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8117cb6:	4944      	ldr	r1, [pc, #272]	@ (8117dc8 <mem_trim+0x1fc>)
 8117cb8:	4840      	ldr	r0, [pc, #256]	@ (8117dbc <mem_trim+0x1f0>)
 8117cba:	f00a fad3 	bl	8122264 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8117cbe:	697b      	ldr	r3, [r7, #20]
 8117cc0:	681b      	ldr	r3, [r3, #0]
 8117cc2:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8117cc4:	69fa      	ldr	r2, [r7, #28]
 8117cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8117cc8:	4413      	add	r3, r2
 8117cca:	330c      	adds	r3, #12
 8117ccc:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 8117cce:	4b3f      	ldr	r3, [pc, #252]	@ (8117dcc <mem_trim+0x200>)
 8117cd0:	681b      	ldr	r3, [r3, #0]
 8117cd2:	697a      	ldr	r2, [r7, #20]
 8117cd4:	429a      	cmp	r2, r3
 8117cd6:	d105      	bne.n	8117ce4 <mem_trim+0x118>
      lfree = ptr_to_mem(ptr2);
 8117cd8:	6938      	ldr	r0, [r7, #16]
 8117cda:	f7ff fd99 	bl	8117810 <ptr_to_mem>
 8117cde:	4603      	mov	r3, r0
 8117ce0:	4a3a      	ldr	r2, [pc, #232]	@ (8117dcc <mem_trim+0x200>)
 8117ce2:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8117ce4:	6938      	ldr	r0, [r7, #16]
 8117ce6:	f7ff fd93 	bl	8117810 <ptr_to_mem>
 8117cea:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 8117cec:	697b      	ldr	r3, [r7, #20]
 8117cee:	2200      	movs	r2, #0
 8117cf0:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 8117cf2:	697b      	ldr	r3, [r7, #20]
 8117cf4:	68fa      	ldr	r2, [r7, #12]
 8117cf6:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8117cf8:	697b      	ldr	r3, [r7, #20]
 8117cfa:	69fa      	ldr	r2, [r7, #28]
 8117cfc:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 8117cfe:	6a3b      	ldr	r3, [r7, #32]
 8117d00:	693a      	ldr	r2, [r7, #16]
 8117d02:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8117d04:	697b      	ldr	r3, [r7, #20]
 8117d06:	681b      	ldr	r3, [r3, #0]
 8117d08:	4a27      	ldr	r2, [pc, #156]	@ (8117da8 <mem_trim+0x1dc>)
 8117d0a:	4293      	cmp	r3, r2
 8117d0c:	d044      	beq.n	8117d98 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8117d0e:	697b      	ldr	r3, [r7, #20]
 8117d10:	681b      	ldr	r3, [r3, #0]
 8117d12:	4618      	mov	r0, r3
 8117d14:	f7ff fd7c 	bl	8117810 <ptr_to_mem>
 8117d18:	4602      	mov	r2, r0
 8117d1a:	693b      	ldr	r3, [r7, #16]
 8117d1c:	6053      	str	r3, [r2, #4]
 8117d1e:	e03b      	b.n	8117d98 <mem_trim+0x1cc>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8117d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8117d22:	3318      	adds	r3, #24
 8117d24:	69ba      	ldr	r2, [r7, #24]
 8117d26:	429a      	cmp	r2, r3
 8117d28:	d336      	bcc.n	8117d98 <mem_trim+0x1cc>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8117d2a:	69fa      	ldr	r2, [r7, #28]
 8117d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8117d2e:	4413      	add	r3, r2
 8117d30:	330c      	adds	r3, #12
 8117d32:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8117d34:	6a3b      	ldr	r3, [r7, #32]
 8117d36:	681b      	ldr	r3, [r3, #0]
 8117d38:	4a1b      	ldr	r2, [pc, #108]	@ (8117da8 <mem_trim+0x1dc>)
 8117d3a:	4293      	cmp	r3, r2
 8117d3c:	d106      	bne.n	8117d4c <mem_trim+0x180>
 8117d3e:	4b1d      	ldr	r3, [pc, #116]	@ (8117db4 <mem_trim+0x1e8>)
 8117d40:	f240 3216 	movw	r2, #790	@ 0x316
 8117d44:	4920      	ldr	r1, [pc, #128]	@ (8117dc8 <mem_trim+0x1fc>)
 8117d46:	481d      	ldr	r0, [pc, #116]	@ (8117dbc <mem_trim+0x1f0>)
 8117d48:	f00a fa8c 	bl	8122264 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8117d4c:	6938      	ldr	r0, [r7, #16]
 8117d4e:	f7ff fd5f 	bl	8117810 <ptr_to_mem>
 8117d52:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 8117d54:	4b1d      	ldr	r3, [pc, #116]	@ (8117dcc <mem_trim+0x200>)
 8117d56:	681b      	ldr	r3, [r3, #0]
 8117d58:	697a      	ldr	r2, [r7, #20]
 8117d5a:	429a      	cmp	r2, r3
 8117d5c:	d202      	bcs.n	8117d64 <mem_trim+0x198>
      lfree = mem2;
 8117d5e:	4a1b      	ldr	r2, [pc, #108]	@ (8117dcc <mem_trim+0x200>)
 8117d60:	697b      	ldr	r3, [r7, #20]
 8117d62:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8117d64:	697b      	ldr	r3, [r7, #20]
 8117d66:	2200      	movs	r2, #0
 8117d68:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 8117d6a:	6a3b      	ldr	r3, [r7, #32]
 8117d6c:	681a      	ldr	r2, [r3, #0]
 8117d6e:	697b      	ldr	r3, [r7, #20]
 8117d70:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 8117d72:	697b      	ldr	r3, [r7, #20]
 8117d74:	69fa      	ldr	r2, [r7, #28]
 8117d76:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 8117d78:	6a3b      	ldr	r3, [r7, #32]
 8117d7a:	693a      	ldr	r2, [r7, #16]
 8117d7c:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8117d7e:	697b      	ldr	r3, [r7, #20]
 8117d80:	681b      	ldr	r3, [r3, #0]
 8117d82:	4a09      	ldr	r2, [pc, #36]	@ (8117da8 <mem_trim+0x1dc>)
 8117d84:	4293      	cmp	r3, r2
 8117d86:	d007      	beq.n	8117d98 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8117d88:	697b      	ldr	r3, [r7, #20]
 8117d8a:	681b      	ldr	r3, [r3, #0]
 8117d8c:	4618      	mov	r0, r3
 8117d8e:	f7ff fd3f 	bl	8117810 <ptr_to_mem>
 8117d92:	4602      	mov	r2, r0
 8117d94:	693b      	ldr	r3, [r7, #16]
 8117d96:	6053      	str	r3, [r2, #4]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8117d98:	480a      	ldr	r0, [pc, #40]	@ (8117dc4 <mem_trim+0x1f8>)
 8117d9a:	f001 fd40 	bl	811981e <sys_mutex_unlock>
  return rmem;
 8117d9e:	687b      	ldr	r3, [r7, #4]
}
 8117da0:	4618      	mov	r0, r3
 8117da2:	3728      	adds	r7, #40	@ 0x28
 8117da4:	46bd      	mov	sp, r7
 8117da6:	bd80      	pop	{r7, pc}
 8117da8:	0001ffe8 	.word	0x0001ffe8
 8117dac:	1000b2e8 	.word	0x1000b2e8
 8117db0:	1000b2ec 	.word	0x1000b2ec
 8117db4:	081250c4 	.word	0x081250c4
 8117db8:	08125290 	.word	0x08125290
 8117dbc:	0812514c 	.word	0x0812514c
 8117dc0:	081252a8 	.word	0x081252a8
 8117dc4:	1000b2f0 	.word	0x1000b2f0
 8117dc8:	081252c8 	.word	0x081252c8
 8117dcc:	1000b2f4 	.word	0x1000b2f4

08117dd0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8117dd0:	b580      	push	{r7, lr}
 8117dd2:	b088      	sub	sp, #32
 8117dd4:	af00      	add	r7, sp, #0
 8117dd6:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8117dd8:	687b      	ldr	r3, [r7, #4]
 8117dda:	2b00      	cmp	r3, #0
 8117ddc:	d101      	bne.n	8117de2 <mem_malloc+0x12>
    return NULL;
 8117dde:	2300      	movs	r3, #0
 8117de0:	e0db      	b.n	8117f9a <mem_malloc+0x1ca>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8117de2:	687b      	ldr	r3, [r7, #4]
 8117de4:	3303      	adds	r3, #3
 8117de6:	f023 0303 	bic.w	r3, r3, #3
 8117dea:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 8117dec:	69bb      	ldr	r3, [r7, #24]
 8117dee:	2b0b      	cmp	r3, #11
 8117df0:	d801      	bhi.n	8117df6 <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8117df2:	230c      	movs	r3, #12
 8117df4:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8117df6:	69bb      	ldr	r3, [r7, #24]
 8117df8:	4a6a      	ldr	r2, [pc, #424]	@ (8117fa4 <mem_malloc+0x1d4>)
 8117dfa:	4293      	cmp	r3, r2
 8117dfc:	d803      	bhi.n	8117e06 <mem_malloc+0x36>
 8117dfe:	69ba      	ldr	r2, [r7, #24]
 8117e00:	687b      	ldr	r3, [r7, #4]
 8117e02:	429a      	cmp	r2, r3
 8117e04:	d201      	bcs.n	8117e0a <mem_malloc+0x3a>
    return NULL;
 8117e06:	2300      	movs	r3, #0
 8117e08:	e0c7      	b.n	8117f9a <mem_malloc+0x1ca>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8117e0a:	4867      	ldr	r0, [pc, #412]	@ (8117fa8 <mem_malloc+0x1d8>)
 8117e0c:	f001 fcf8 	bl	8119800 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8117e10:	4b66      	ldr	r3, [pc, #408]	@ (8117fac <mem_malloc+0x1dc>)
 8117e12:	681b      	ldr	r3, [r3, #0]
 8117e14:	4618      	mov	r0, r3
 8117e16:	f7ff fd0b 	bl	8117830 <mem_to_ptr>
 8117e1a:	61f8      	str	r0, [r7, #28]
 8117e1c:	e0b0      	b.n	8117f80 <mem_malloc+0x1b0>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8117e1e:	69f8      	ldr	r0, [r7, #28]
 8117e20:	f7ff fcf6 	bl	8117810 <ptr_to_mem>
 8117e24:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8117e26:	693b      	ldr	r3, [r7, #16]
 8117e28:	7a1b      	ldrb	r3, [r3, #8]
 8117e2a:	2b00      	cmp	r3, #0
 8117e2c:	f040 80a2 	bne.w	8117f74 <mem_malloc+0x1a4>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8117e30:	693b      	ldr	r3, [r7, #16]
 8117e32:	681a      	ldr	r2, [r3, #0]
 8117e34:	69fb      	ldr	r3, [r7, #28]
 8117e36:	1ad3      	subs	r3, r2, r3
 8117e38:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 8117e3a:	69ba      	ldr	r2, [r7, #24]
 8117e3c:	429a      	cmp	r2, r3
 8117e3e:	f200 8099 	bhi.w	8117f74 <mem_malloc+0x1a4>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8117e42:	693b      	ldr	r3, [r7, #16]
 8117e44:	681a      	ldr	r2, [r3, #0]
 8117e46:	69fb      	ldr	r3, [r7, #28]
 8117e48:	1ad3      	subs	r3, r2, r3
 8117e4a:	f1a3 020c 	sub.w	r2, r3, #12
 8117e4e:	69bb      	ldr	r3, [r7, #24]
 8117e50:	3318      	adds	r3, #24
 8117e52:	429a      	cmp	r2, r3
 8117e54:	d331      	bcc.n	8117eba <mem_malloc+0xea>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8117e56:	69fa      	ldr	r2, [r7, #28]
 8117e58:	69bb      	ldr	r3, [r7, #24]
 8117e5a:	4413      	add	r3, r2
 8117e5c:	330c      	adds	r3, #12
 8117e5e:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8117e60:	68fb      	ldr	r3, [r7, #12]
 8117e62:	4a50      	ldr	r2, [pc, #320]	@ (8117fa4 <mem_malloc+0x1d4>)
 8117e64:	4293      	cmp	r3, r2
 8117e66:	d106      	bne.n	8117e76 <mem_malloc+0xa6>
 8117e68:	4b51      	ldr	r3, [pc, #324]	@ (8117fb0 <mem_malloc+0x1e0>)
 8117e6a:	f240 3287 	movw	r2, #903	@ 0x387
 8117e6e:	4951      	ldr	r1, [pc, #324]	@ (8117fb4 <mem_malloc+0x1e4>)
 8117e70:	4851      	ldr	r0, [pc, #324]	@ (8117fb8 <mem_malloc+0x1e8>)
 8117e72:	f00a f9f7 	bl	8122264 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8117e76:	68f8      	ldr	r0, [r7, #12]
 8117e78:	f7ff fcca 	bl	8117810 <ptr_to_mem>
 8117e7c:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 8117e7e:	68bb      	ldr	r3, [r7, #8]
 8117e80:	2200      	movs	r2, #0
 8117e82:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 8117e84:	693b      	ldr	r3, [r7, #16]
 8117e86:	681a      	ldr	r2, [r3, #0]
 8117e88:	68bb      	ldr	r3, [r7, #8]
 8117e8a:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 8117e8c:	68bb      	ldr	r3, [r7, #8]
 8117e8e:	69fa      	ldr	r2, [r7, #28]
 8117e90:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8117e92:	693b      	ldr	r3, [r7, #16]
 8117e94:	68fa      	ldr	r2, [r7, #12]
 8117e96:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 8117e98:	693b      	ldr	r3, [r7, #16]
 8117e9a:	2201      	movs	r2, #1
 8117e9c:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8117e9e:	68bb      	ldr	r3, [r7, #8]
 8117ea0:	681b      	ldr	r3, [r3, #0]
 8117ea2:	4a40      	ldr	r2, [pc, #256]	@ (8117fa4 <mem_malloc+0x1d4>)
 8117ea4:	4293      	cmp	r3, r2
 8117ea6:	d00b      	beq.n	8117ec0 <mem_malloc+0xf0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8117ea8:	68bb      	ldr	r3, [r7, #8]
 8117eaa:	681b      	ldr	r3, [r3, #0]
 8117eac:	4618      	mov	r0, r3
 8117eae:	f7ff fcaf 	bl	8117810 <ptr_to_mem>
 8117eb2:	4602      	mov	r2, r0
 8117eb4:	68fb      	ldr	r3, [r7, #12]
 8117eb6:	6053      	str	r3, [r2, #4]
 8117eb8:	e002      	b.n	8117ec0 <mem_malloc+0xf0>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8117eba:	693b      	ldr	r3, [r7, #16]
 8117ebc:	2201      	movs	r2, #1
 8117ebe:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8117ec0:	4b3a      	ldr	r3, [pc, #232]	@ (8117fac <mem_malloc+0x1dc>)
 8117ec2:	681b      	ldr	r3, [r3, #0]
 8117ec4:	693a      	ldr	r2, [r7, #16]
 8117ec6:	429a      	cmp	r2, r3
 8117ec8:	d127      	bne.n	8117f1a <mem_malloc+0x14a>
          struct mem *cur = lfree;
 8117eca:	4b38      	ldr	r3, [pc, #224]	@ (8117fac <mem_malloc+0x1dc>)
 8117ecc:	681b      	ldr	r3, [r3, #0]
 8117ece:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8117ed0:	e005      	b.n	8117ede <mem_malloc+0x10e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8117ed2:	697b      	ldr	r3, [r7, #20]
 8117ed4:	681b      	ldr	r3, [r3, #0]
 8117ed6:	4618      	mov	r0, r3
 8117ed8:	f7ff fc9a 	bl	8117810 <ptr_to_mem>
 8117edc:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 8117ede:	697b      	ldr	r3, [r7, #20]
 8117ee0:	7a1b      	ldrb	r3, [r3, #8]
 8117ee2:	2b00      	cmp	r3, #0
 8117ee4:	d004      	beq.n	8117ef0 <mem_malloc+0x120>
 8117ee6:	4b35      	ldr	r3, [pc, #212]	@ (8117fbc <mem_malloc+0x1ec>)
 8117ee8:	681b      	ldr	r3, [r3, #0]
 8117eea:	697a      	ldr	r2, [r7, #20]
 8117eec:	429a      	cmp	r2, r3
 8117eee:	d1f0      	bne.n	8117ed2 <mem_malloc+0x102>
          }
          lfree = cur;
 8117ef0:	4a2e      	ldr	r2, [pc, #184]	@ (8117fac <mem_malloc+0x1dc>)
 8117ef2:	697b      	ldr	r3, [r7, #20]
 8117ef4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8117ef6:	4b2d      	ldr	r3, [pc, #180]	@ (8117fac <mem_malloc+0x1dc>)
 8117ef8:	681a      	ldr	r2, [r3, #0]
 8117efa:	4b30      	ldr	r3, [pc, #192]	@ (8117fbc <mem_malloc+0x1ec>)
 8117efc:	681b      	ldr	r3, [r3, #0]
 8117efe:	429a      	cmp	r2, r3
 8117f00:	d00b      	beq.n	8117f1a <mem_malloc+0x14a>
 8117f02:	4b2a      	ldr	r3, [pc, #168]	@ (8117fac <mem_malloc+0x1dc>)
 8117f04:	681b      	ldr	r3, [r3, #0]
 8117f06:	7a1b      	ldrb	r3, [r3, #8]
 8117f08:	2b00      	cmp	r3, #0
 8117f0a:	d006      	beq.n	8117f1a <mem_malloc+0x14a>
 8117f0c:	4b28      	ldr	r3, [pc, #160]	@ (8117fb0 <mem_malloc+0x1e0>)
 8117f0e:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8117f12:	492b      	ldr	r1, [pc, #172]	@ (8117fc0 <mem_malloc+0x1f0>)
 8117f14:	4828      	ldr	r0, [pc, #160]	@ (8117fb8 <mem_malloc+0x1e8>)
 8117f16:	f00a f9a5 	bl	8122264 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8117f1a:	4823      	ldr	r0, [pc, #140]	@ (8117fa8 <mem_malloc+0x1d8>)
 8117f1c:	f001 fc7f 	bl	811981e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8117f20:	693a      	ldr	r2, [r7, #16]
 8117f22:	69bb      	ldr	r3, [r7, #24]
 8117f24:	4413      	add	r3, r2
 8117f26:	330c      	adds	r3, #12
 8117f28:	4a24      	ldr	r2, [pc, #144]	@ (8117fbc <mem_malloc+0x1ec>)
 8117f2a:	6812      	ldr	r2, [r2, #0]
 8117f2c:	4293      	cmp	r3, r2
 8117f2e:	d906      	bls.n	8117f3e <mem_malloc+0x16e>
 8117f30:	4b1f      	ldr	r3, [pc, #124]	@ (8117fb0 <mem_malloc+0x1e0>)
 8117f32:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8117f36:	4923      	ldr	r1, [pc, #140]	@ (8117fc4 <mem_malloc+0x1f4>)
 8117f38:	481f      	ldr	r0, [pc, #124]	@ (8117fb8 <mem_malloc+0x1e8>)
 8117f3a:	f00a f993 	bl	8122264 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8117f3e:	693b      	ldr	r3, [r7, #16]
 8117f40:	f003 0303 	and.w	r3, r3, #3
 8117f44:	2b00      	cmp	r3, #0
 8117f46:	d006      	beq.n	8117f56 <mem_malloc+0x186>
 8117f48:	4b19      	ldr	r3, [pc, #100]	@ (8117fb0 <mem_malloc+0x1e0>)
 8117f4a:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8117f4e:	491e      	ldr	r1, [pc, #120]	@ (8117fc8 <mem_malloc+0x1f8>)
 8117f50:	4819      	ldr	r0, [pc, #100]	@ (8117fb8 <mem_malloc+0x1e8>)
 8117f52:	f00a f987 	bl	8122264 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8117f56:	693b      	ldr	r3, [r7, #16]
 8117f58:	f003 0303 	and.w	r3, r3, #3
 8117f5c:	2b00      	cmp	r3, #0
 8117f5e:	d006      	beq.n	8117f6e <mem_malloc+0x19e>
 8117f60:	4b13      	ldr	r3, [pc, #76]	@ (8117fb0 <mem_malloc+0x1e0>)
 8117f62:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8117f66:	4919      	ldr	r1, [pc, #100]	@ (8117fcc <mem_malloc+0x1fc>)
 8117f68:	4813      	ldr	r0, [pc, #76]	@ (8117fb8 <mem_malloc+0x1e8>)
 8117f6a:	f00a f97b 	bl	8122264 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8117f6e:	693b      	ldr	r3, [r7, #16]
 8117f70:	330c      	adds	r3, #12
 8117f72:	e012      	b.n	8117f9a <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
 8117f74:	69f8      	ldr	r0, [r7, #28]
 8117f76:	f7ff fc4b 	bl	8117810 <ptr_to_mem>
 8117f7a:	4603      	mov	r3, r0
 8117f7c:	681b      	ldr	r3, [r3, #0]
 8117f7e:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8117f80:	69bb      	ldr	r3, [r7, #24]
 8117f82:	f5c3 33ff 	rsb	r3, r3, #130560	@ 0x1fe00
 8117f86:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8117f8a:	69fa      	ldr	r2, [r7, #28]
 8117f8c:	429a      	cmp	r2, r3
 8117f8e:	f4ff af46 	bcc.w	8117e1e <mem_malloc+0x4e>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8117f92:	4805      	ldr	r0, [pc, #20]	@ (8117fa8 <mem_malloc+0x1d8>)
 8117f94:	f001 fc43 	bl	811981e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8117f98:	2300      	movs	r3, #0
}
 8117f9a:	4618      	mov	r0, r3
 8117f9c:	3720      	adds	r7, #32
 8117f9e:	46bd      	mov	sp, r7
 8117fa0:	bd80      	pop	{r7, pc}
 8117fa2:	bf00      	nop
 8117fa4:	0001ffe8 	.word	0x0001ffe8
 8117fa8:	1000b2f0 	.word	0x1000b2f0
 8117fac:	1000b2f4 	.word	0x1000b2f4
 8117fb0:	081250c4 	.word	0x081250c4
 8117fb4:	081252c8 	.word	0x081252c8
 8117fb8:	0812514c 	.word	0x0812514c
 8117fbc:	1000b2ec 	.word	0x1000b2ec
 8117fc0:	081252dc 	.word	0x081252dc
 8117fc4:	081252f8 	.word	0x081252f8
 8117fc8:	08125328 	.word	0x08125328
 8117fcc:	08125358 	.word	0x08125358

08117fd0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8117fd0:	b480      	push	{r7}
 8117fd2:	b085      	sub	sp, #20
 8117fd4:	af00      	add	r7, sp, #0
 8117fd6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8117fd8:	687b      	ldr	r3, [r7, #4]
 8117fda:	68db      	ldr	r3, [r3, #12]
 8117fdc:	2200      	movs	r2, #0
 8117fde:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8117fe0:	687b      	ldr	r3, [r7, #4]
 8117fe2:	689b      	ldr	r3, [r3, #8]
 8117fe4:	3303      	adds	r3, #3
 8117fe6:	f023 0303 	bic.w	r3, r3, #3
 8117fea:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8117fec:	2300      	movs	r3, #0
 8117fee:	60fb      	str	r3, [r7, #12]
 8117ff0:	e011      	b.n	8118016 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8117ff2:	687b      	ldr	r3, [r7, #4]
 8117ff4:	68db      	ldr	r3, [r3, #12]
 8117ff6:	681a      	ldr	r2, [r3, #0]
 8117ff8:	68bb      	ldr	r3, [r7, #8]
 8117ffa:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8117ffc:	687b      	ldr	r3, [r7, #4]
 8117ffe:	68db      	ldr	r3, [r3, #12]
 8118000:	68ba      	ldr	r2, [r7, #8]
 8118002:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8118004:	687b      	ldr	r3, [r7, #4]
 8118006:	889b      	ldrh	r3, [r3, #4]
 8118008:	461a      	mov	r2, r3
 811800a:	68bb      	ldr	r3, [r7, #8]
 811800c:	4413      	add	r3, r2
 811800e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8118010:	68fb      	ldr	r3, [r7, #12]
 8118012:	3301      	adds	r3, #1
 8118014:	60fb      	str	r3, [r7, #12]
 8118016:	687b      	ldr	r3, [r7, #4]
 8118018:	88db      	ldrh	r3, [r3, #6]
 811801a:	461a      	mov	r2, r3
 811801c:	68fb      	ldr	r3, [r7, #12]
 811801e:	4293      	cmp	r3, r2
 8118020:	dbe7      	blt.n	8117ff2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8118022:	bf00      	nop
 8118024:	bf00      	nop
 8118026:	3714      	adds	r7, #20
 8118028:	46bd      	mov	sp, r7
 811802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 811802e:	4770      	bx	lr

08118030 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8118030:	b580      	push	{r7, lr}
 8118032:	b082      	sub	sp, #8
 8118034:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8118036:	2300      	movs	r3, #0
 8118038:	80fb      	strh	r3, [r7, #6]
 811803a:	e009      	b.n	8118050 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 811803c:	88fb      	ldrh	r3, [r7, #6]
 811803e:	4a08      	ldr	r2, [pc, #32]	@ (8118060 <memp_init+0x30>)
 8118040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8118044:	4618      	mov	r0, r3
 8118046:	f7ff ffc3 	bl	8117fd0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 811804a:	88fb      	ldrh	r3, [r7, #6]
 811804c:	3301      	adds	r3, #1
 811804e:	80fb      	strh	r3, [r7, #6]
 8118050:	88fb      	ldrh	r3, [r7, #6]
 8118052:	2b0c      	cmp	r3, #12
 8118054:	d9f2      	bls.n	811803c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8118056:	bf00      	nop
 8118058:	bf00      	nop
 811805a:	3708      	adds	r7, #8
 811805c:	46bd      	mov	sp, r7
 811805e:	bd80      	pop	{r7, pc}
 8118060:	08128a8c 	.word	0x08128a8c

08118064 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8118064:	b580      	push	{r7, lr}
 8118066:	b084      	sub	sp, #16
 8118068:	af00      	add	r7, sp, #0
 811806a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 811806c:	f001 fc04 	bl	8119878 <sys_arch_protect>
 8118070:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8118072:	687b      	ldr	r3, [r7, #4]
 8118074:	68db      	ldr	r3, [r3, #12]
 8118076:	681b      	ldr	r3, [r3, #0]
 8118078:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 811807a:	68bb      	ldr	r3, [r7, #8]
 811807c:	2b00      	cmp	r3, #0
 811807e:	d015      	beq.n	81180ac <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8118080:	687b      	ldr	r3, [r7, #4]
 8118082:	68db      	ldr	r3, [r3, #12]
 8118084:	68ba      	ldr	r2, [r7, #8]
 8118086:	6812      	ldr	r2, [r2, #0]
 8118088:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 811808a:	68bb      	ldr	r3, [r7, #8]
 811808c:	f003 0303 	and.w	r3, r3, #3
 8118090:	2b00      	cmp	r3, #0
 8118092:	d006      	beq.n	81180a2 <do_memp_malloc_pool+0x3e>
 8118094:	4b09      	ldr	r3, [pc, #36]	@ (81180bc <do_memp_malloc_pool+0x58>)
 8118096:	f44f 728c 	mov.w	r2, #280	@ 0x118
 811809a:	4909      	ldr	r1, [pc, #36]	@ (81180c0 <do_memp_malloc_pool+0x5c>)
 811809c:	4809      	ldr	r0, [pc, #36]	@ (81180c4 <do_memp_malloc_pool+0x60>)
 811809e:	f00a f8e1 	bl	8122264 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 81180a2:	68f8      	ldr	r0, [r7, #12]
 81180a4:	f001 fbf6 	bl	8119894 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 81180a8:	68bb      	ldr	r3, [r7, #8]
 81180aa:	e003      	b.n	81180b4 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 81180ac:	68f8      	ldr	r0, [r7, #12]
 81180ae:	f001 fbf1 	bl	8119894 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 81180b2:	2300      	movs	r3, #0
}
 81180b4:	4618      	mov	r0, r3
 81180b6:	3710      	adds	r7, #16
 81180b8:	46bd      	mov	sp, r7
 81180ba:	bd80      	pop	{r7, pc}
 81180bc:	08125410 	.word	0x08125410
 81180c0:	08125480 	.word	0x08125480
 81180c4:	081254a4 	.word	0x081254a4

081180c8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 81180c8:	b580      	push	{r7, lr}
 81180ca:	b082      	sub	sp, #8
 81180cc:	af00      	add	r7, sp, #0
 81180ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 81180d0:	687b      	ldr	r3, [r7, #4]
 81180d2:	2b00      	cmp	r3, #0
 81180d4:	d106      	bne.n	81180e4 <memp_malloc_pool+0x1c>
 81180d6:	4b0a      	ldr	r3, [pc, #40]	@ (8118100 <memp_malloc_pool+0x38>)
 81180d8:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 81180dc:	4909      	ldr	r1, [pc, #36]	@ (8118104 <memp_malloc_pool+0x3c>)
 81180de:	480a      	ldr	r0, [pc, #40]	@ (8118108 <memp_malloc_pool+0x40>)
 81180e0:	f00a f8c0 	bl	8122264 <iprintf>
  if (desc == NULL) {
 81180e4:	687b      	ldr	r3, [r7, #4]
 81180e6:	2b00      	cmp	r3, #0
 81180e8:	d101      	bne.n	81180ee <memp_malloc_pool+0x26>
    return NULL;
 81180ea:	2300      	movs	r3, #0
 81180ec:	e003      	b.n	81180f6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 81180ee:	6878      	ldr	r0, [r7, #4]
 81180f0:	f7ff ffb8 	bl	8118064 <do_memp_malloc_pool>
 81180f4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 81180f6:	4618      	mov	r0, r3
 81180f8:	3708      	adds	r7, #8
 81180fa:	46bd      	mov	sp, r7
 81180fc:	bd80      	pop	{r7, pc}
 81180fe:	bf00      	nop
 8118100:	08125410 	.word	0x08125410
 8118104:	081254cc 	.word	0x081254cc
 8118108:	081254a4 	.word	0x081254a4

0811810c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 811810c:	b580      	push	{r7, lr}
 811810e:	b084      	sub	sp, #16
 8118110:	af00      	add	r7, sp, #0
 8118112:	4603      	mov	r3, r0
 8118114:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8118116:	79fb      	ldrb	r3, [r7, #7]
 8118118:	2b0c      	cmp	r3, #12
 811811a:	d908      	bls.n	811812e <memp_malloc+0x22>
 811811c:	4b0a      	ldr	r3, [pc, #40]	@ (8118148 <memp_malloc+0x3c>)
 811811e:	f240 1257 	movw	r2, #343	@ 0x157
 8118122:	490a      	ldr	r1, [pc, #40]	@ (811814c <memp_malloc+0x40>)
 8118124:	480a      	ldr	r0, [pc, #40]	@ (8118150 <memp_malloc+0x44>)
 8118126:	f00a f89d 	bl	8122264 <iprintf>
 811812a:	2300      	movs	r3, #0
 811812c:	e008      	b.n	8118140 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 811812e:	79fb      	ldrb	r3, [r7, #7]
 8118130:	4a08      	ldr	r2, [pc, #32]	@ (8118154 <memp_malloc+0x48>)
 8118132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8118136:	4618      	mov	r0, r3
 8118138:	f7ff ff94 	bl	8118064 <do_memp_malloc_pool>
 811813c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 811813e:	68fb      	ldr	r3, [r7, #12]
}
 8118140:	4618      	mov	r0, r3
 8118142:	3710      	adds	r7, #16
 8118144:	46bd      	mov	sp, r7
 8118146:	bd80      	pop	{r7, pc}
 8118148:	08125410 	.word	0x08125410
 811814c:	081254e0 	.word	0x081254e0
 8118150:	081254a4 	.word	0x081254a4
 8118154:	08128a8c 	.word	0x08128a8c

08118158 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8118158:	b580      	push	{r7, lr}
 811815a:	b084      	sub	sp, #16
 811815c:	af00      	add	r7, sp, #0
 811815e:	6078      	str	r0, [r7, #4]
 8118160:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8118162:	683b      	ldr	r3, [r7, #0]
 8118164:	f003 0303 	and.w	r3, r3, #3
 8118168:	2b00      	cmp	r3, #0
 811816a:	d006      	beq.n	811817a <do_memp_free_pool+0x22>
 811816c:	4b0d      	ldr	r3, [pc, #52]	@ (81181a4 <do_memp_free_pool+0x4c>)
 811816e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8118172:	490d      	ldr	r1, [pc, #52]	@ (81181a8 <do_memp_free_pool+0x50>)
 8118174:	480d      	ldr	r0, [pc, #52]	@ (81181ac <do_memp_free_pool+0x54>)
 8118176:	f00a f875 	bl	8122264 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 811817a:	683b      	ldr	r3, [r7, #0]
 811817c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 811817e:	f001 fb7b 	bl	8119878 <sys_arch_protect>
 8118182:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8118184:	687b      	ldr	r3, [r7, #4]
 8118186:	68db      	ldr	r3, [r3, #12]
 8118188:	681a      	ldr	r2, [r3, #0]
 811818a:	68fb      	ldr	r3, [r7, #12]
 811818c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 811818e:	687b      	ldr	r3, [r7, #4]
 8118190:	68db      	ldr	r3, [r3, #12]
 8118192:	68fa      	ldr	r2, [r7, #12]
 8118194:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8118196:	68b8      	ldr	r0, [r7, #8]
 8118198:	f001 fb7c 	bl	8119894 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 811819c:	bf00      	nop
 811819e:	3710      	adds	r7, #16
 81181a0:	46bd      	mov	sp, r7
 81181a2:	bd80      	pop	{r7, pc}
 81181a4:	08125410 	.word	0x08125410
 81181a8:	08125500 	.word	0x08125500
 81181ac:	081254a4 	.word	0x081254a4

081181b0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 81181b0:	b580      	push	{r7, lr}
 81181b2:	b082      	sub	sp, #8
 81181b4:	af00      	add	r7, sp, #0
 81181b6:	6078      	str	r0, [r7, #4]
 81181b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 81181ba:	687b      	ldr	r3, [r7, #4]
 81181bc:	2b00      	cmp	r3, #0
 81181be:	d106      	bne.n	81181ce <memp_free_pool+0x1e>
 81181c0:	4b0a      	ldr	r3, [pc, #40]	@ (81181ec <memp_free_pool+0x3c>)
 81181c2:	f240 1295 	movw	r2, #405	@ 0x195
 81181c6:	490a      	ldr	r1, [pc, #40]	@ (81181f0 <memp_free_pool+0x40>)
 81181c8:	480a      	ldr	r0, [pc, #40]	@ (81181f4 <memp_free_pool+0x44>)
 81181ca:	f00a f84b 	bl	8122264 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 81181ce:	687b      	ldr	r3, [r7, #4]
 81181d0:	2b00      	cmp	r3, #0
 81181d2:	d007      	beq.n	81181e4 <memp_free_pool+0x34>
 81181d4:	683b      	ldr	r3, [r7, #0]
 81181d6:	2b00      	cmp	r3, #0
 81181d8:	d004      	beq.n	81181e4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 81181da:	6839      	ldr	r1, [r7, #0]
 81181dc:	6878      	ldr	r0, [r7, #4]
 81181de:	f7ff ffbb 	bl	8118158 <do_memp_free_pool>
 81181e2:	e000      	b.n	81181e6 <memp_free_pool+0x36>
    return;
 81181e4:	bf00      	nop
}
 81181e6:	3708      	adds	r7, #8
 81181e8:	46bd      	mov	sp, r7
 81181ea:	bd80      	pop	{r7, pc}
 81181ec:	08125410 	.word	0x08125410
 81181f0:	081254cc 	.word	0x081254cc
 81181f4:	081254a4 	.word	0x081254a4

081181f8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 81181f8:	b580      	push	{r7, lr}
 81181fa:	b082      	sub	sp, #8
 81181fc:	af00      	add	r7, sp, #0
 81181fe:	4603      	mov	r3, r0
 8118200:	6039      	str	r1, [r7, #0]
 8118202:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8118204:	79fb      	ldrb	r3, [r7, #7]
 8118206:	2b0c      	cmp	r3, #12
 8118208:	d907      	bls.n	811821a <memp_free+0x22>
 811820a:	4b0c      	ldr	r3, [pc, #48]	@ (811823c <memp_free+0x44>)
 811820c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8118210:	490b      	ldr	r1, [pc, #44]	@ (8118240 <memp_free+0x48>)
 8118212:	480c      	ldr	r0, [pc, #48]	@ (8118244 <memp_free+0x4c>)
 8118214:	f00a f826 	bl	8122264 <iprintf>
 8118218:	e00c      	b.n	8118234 <memp_free+0x3c>

  if (mem == NULL) {
 811821a:	683b      	ldr	r3, [r7, #0]
 811821c:	2b00      	cmp	r3, #0
 811821e:	d008      	beq.n	8118232 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8118220:	79fb      	ldrb	r3, [r7, #7]
 8118222:	4a09      	ldr	r2, [pc, #36]	@ (8118248 <memp_free+0x50>)
 8118224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8118228:	6839      	ldr	r1, [r7, #0]
 811822a:	4618      	mov	r0, r3
 811822c:	f7ff ff94 	bl	8118158 <do_memp_free_pool>
 8118230:	e000      	b.n	8118234 <memp_free+0x3c>
    return;
 8118232:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8118234:	3708      	adds	r7, #8
 8118236:	46bd      	mov	sp, r7
 8118238:	bd80      	pop	{r7, pc}
 811823a:	bf00      	nop
 811823c:	08125410 	.word	0x08125410
 8118240:	08125520 	.word	0x08125520
 8118244:	081254a4 	.word	0x081254a4
 8118248:	08128a8c 	.word	0x08128a8c

0811824c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 811824c:	b480      	push	{r7}
 811824e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8118250:	bf00      	nop
 8118252:	46bd      	mov	sp, r7
 8118254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8118258:	4770      	bx	lr
	...

0811825c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 811825c:	b580      	push	{r7, lr}
 811825e:	b088      	sub	sp, #32
 8118260:	af02      	add	r7, sp, #8
 8118262:	60f8      	str	r0, [r7, #12]
 8118264:	60b9      	str	r1, [r7, #8]
 8118266:	607a      	str	r2, [r7, #4]
 8118268:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 811826a:	68fb      	ldr	r3, [r7, #12]
 811826c:	2b00      	cmp	r3, #0
 811826e:	d108      	bne.n	8118282 <netif_add+0x26>
 8118270:	4b9b      	ldr	r3, [pc, #620]	@ (81184e0 <netif_add+0x284>)
 8118272:	f240 1227 	movw	r2, #295	@ 0x127
 8118276:	499b      	ldr	r1, [pc, #620]	@ (81184e4 <netif_add+0x288>)
 8118278:	489b      	ldr	r0, [pc, #620]	@ (81184e8 <netif_add+0x28c>)
 811827a:	f009 fff3 	bl	8122264 <iprintf>
 811827e:	2300      	movs	r3, #0
 8118280:	e164      	b.n	811854c <netif_add+0x2f0>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8118282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8118284:	2b00      	cmp	r3, #0
 8118286:	d108      	bne.n	811829a <netif_add+0x3e>
 8118288:	4b95      	ldr	r3, [pc, #596]	@ (81184e0 <netif_add+0x284>)
 811828a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 811828e:	4997      	ldr	r1, [pc, #604]	@ (81184ec <netif_add+0x290>)
 8118290:	4895      	ldr	r0, [pc, #596]	@ (81184e8 <netif_add+0x28c>)
 8118292:	f009 ffe7 	bl	8122264 <iprintf>
 8118296:	2300      	movs	r3, #0
 8118298:	e158      	b.n	811854c <netif_add+0x2f0>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 811829a:	68bb      	ldr	r3, [r7, #8]
 811829c:	2b00      	cmp	r3, #0
 811829e:	d101      	bne.n	81182a4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 81182a0:	4b93      	ldr	r3, [pc, #588]	@ (81184f0 <netif_add+0x294>)
 81182a2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 81182a4:	687b      	ldr	r3, [r7, #4]
 81182a6:	2b00      	cmp	r3, #0
 81182a8:	d101      	bne.n	81182ae <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 81182aa:	4b91      	ldr	r3, [pc, #580]	@ (81184f0 <netif_add+0x294>)
 81182ac:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 81182ae:	683b      	ldr	r3, [r7, #0]
 81182b0:	2b00      	cmp	r3, #0
 81182b2:	d101      	bne.n	81182b8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 81182b4:	4b8e      	ldr	r3, [pc, #568]	@ (81184f0 <netif_add+0x294>)
 81182b6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 81182b8:	68fb      	ldr	r3, [r7, #12]
 81182ba:	2200      	movs	r2, #0
 81182bc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 81182be:	68fb      	ldr	r3, [r7, #12]
 81182c0:	2200      	movs	r2, #0
 81182c2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 81182c4:	68fb      	ldr	r3, [r7, #12]
 81182c6:	2200      	movs	r2, #0
 81182c8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 81182ca:	68fb      	ldr	r3, [r7, #12]
 81182cc:	4a89      	ldr	r2, [pc, #548]	@ (81184f4 <netif_add+0x298>)
 81182ce:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 81182d0:	68fb      	ldr	r3, [r7, #12]
 81182d2:	2200      	movs	r2, #0
 81182d4:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 81182d6:	68fb      	ldr	r3, [r7, #12]
 81182d8:	2200      	movs	r2, #0
 81182da:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 81182de:	68fb      	ldr	r3, [r7, #12]
 81182e0:	2200      	movs	r2, #0
 81182e2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 81182e4:	68fb      	ldr	r3, [r7, #12]
 81182e6:	6a3a      	ldr	r2, [r7, #32]
 81182e8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 81182ea:	4b83      	ldr	r3, [pc, #524]	@ (81184f8 <netif_add+0x29c>)
 81182ec:	781a      	ldrb	r2, [r3, #0]
 81182ee:	68fb      	ldr	r3, [r7, #12]
 81182f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 81182f4:	68fb      	ldr	r3, [r7, #12]
 81182f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 81182f8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 81182fa:	683b      	ldr	r3, [r7, #0]
 81182fc:	687a      	ldr	r2, [r7, #4]
 81182fe:	68b9      	ldr	r1, [r7, #8]
 8118300:	68f8      	ldr	r0, [r7, #12]
 8118302:	f000 fa19 	bl	8118738 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8118306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8118308:	68f8      	ldr	r0, [r7, #12]
 811830a:	4798      	blx	r3
 811830c:	4603      	mov	r3, r0
 811830e:	2b00      	cmp	r3, #0
 8118310:	d001      	beq.n	8118316 <netif_add+0xba>
    return NULL;
 8118312:	2300      	movs	r3, #0
 8118314:	e11a      	b.n	811854c <netif_add+0x2f0>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8118316:	68fb      	ldr	r3, [r7, #12]
 8118318:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811831c:	2bff      	cmp	r3, #255	@ 0xff
 811831e:	d103      	bne.n	8118328 <netif_add+0xcc>
        netif->num = 0;
 8118320:	68fb      	ldr	r3, [r7, #12]
 8118322:	2200      	movs	r2, #0
 8118324:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8118328:	2300      	movs	r3, #0
 811832a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 811832c:	4b73      	ldr	r3, [pc, #460]	@ (81184fc <netif_add+0x2a0>)
 811832e:	681b      	ldr	r3, [r3, #0]
 8118330:	617b      	str	r3, [r7, #20]
 8118332:	e02b      	b.n	811838c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8118334:	697a      	ldr	r2, [r7, #20]
 8118336:	68fb      	ldr	r3, [r7, #12]
 8118338:	429a      	cmp	r2, r3
 811833a:	d106      	bne.n	811834a <netif_add+0xee>
 811833c:	4b68      	ldr	r3, [pc, #416]	@ (81184e0 <netif_add+0x284>)
 811833e:	f240 128b 	movw	r2, #395	@ 0x18b
 8118342:	496f      	ldr	r1, [pc, #444]	@ (8118500 <netif_add+0x2a4>)
 8118344:	4868      	ldr	r0, [pc, #416]	@ (81184e8 <netif_add+0x28c>)
 8118346:	f009 ff8d 	bl	8122264 <iprintf>
        num_netifs++;
 811834a:	693b      	ldr	r3, [r7, #16]
 811834c:	3301      	adds	r3, #1
 811834e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8118350:	693b      	ldr	r3, [r7, #16]
 8118352:	2bff      	cmp	r3, #255	@ 0xff
 8118354:	dd06      	ble.n	8118364 <netif_add+0x108>
 8118356:	4b62      	ldr	r3, [pc, #392]	@ (81184e0 <netif_add+0x284>)
 8118358:	f240 128d 	movw	r2, #397	@ 0x18d
 811835c:	4969      	ldr	r1, [pc, #420]	@ (8118504 <netif_add+0x2a8>)
 811835e:	4862      	ldr	r0, [pc, #392]	@ (81184e8 <netif_add+0x28c>)
 8118360:	f009 ff80 	bl	8122264 <iprintf>
        if (netif2->num == netif->num) {
 8118364:	697b      	ldr	r3, [r7, #20]
 8118366:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 811836a:	68fb      	ldr	r3, [r7, #12]
 811836c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8118370:	429a      	cmp	r2, r3
 8118372:	d108      	bne.n	8118386 <netif_add+0x12a>
          netif->num++;
 8118374:	68fb      	ldr	r3, [r7, #12]
 8118376:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811837a:	3301      	adds	r3, #1
 811837c:	b2da      	uxtb	r2, r3
 811837e:	68fb      	ldr	r3, [r7, #12]
 8118380:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8118384:	e005      	b.n	8118392 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8118386:	697b      	ldr	r3, [r7, #20]
 8118388:	681b      	ldr	r3, [r3, #0]
 811838a:	617b      	str	r3, [r7, #20]
 811838c:	697b      	ldr	r3, [r7, #20]
 811838e:	2b00      	cmp	r3, #0
 8118390:	d1d0      	bne.n	8118334 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8118392:	697b      	ldr	r3, [r7, #20]
 8118394:	2b00      	cmp	r3, #0
 8118396:	d1be      	bne.n	8118316 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8118398:	68fb      	ldr	r3, [r7, #12]
 811839a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811839e:	2bfe      	cmp	r3, #254	@ 0xfe
 81183a0:	d103      	bne.n	81183aa <netif_add+0x14e>
    netif_num = 0;
 81183a2:	4b55      	ldr	r3, [pc, #340]	@ (81184f8 <netif_add+0x29c>)
 81183a4:	2200      	movs	r2, #0
 81183a6:	701a      	strb	r2, [r3, #0]
 81183a8:	e006      	b.n	81183b8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 81183aa:	68fb      	ldr	r3, [r7, #12]
 81183ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 81183b0:	3301      	adds	r3, #1
 81183b2:	b2da      	uxtb	r2, r3
 81183b4:	4b50      	ldr	r3, [pc, #320]	@ (81184f8 <netif_add+0x29c>)
 81183b6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 81183b8:	4b50      	ldr	r3, [pc, #320]	@ (81184fc <netif_add+0x2a0>)
 81183ba:	681a      	ldr	r2, [r3, #0]
 81183bc:	68fb      	ldr	r3, [r7, #12]
 81183be:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 81183c0:	4a4e      	ldr	r2, [pc, #312]	@ (81184fc <netif_add+0x2a0>)
 81183c2:	68fb      	ldr	r3, [r7, #12]
 81183c4:	6013      	str	r3, [r2, #0]
  if (netif->flags & NETIF_FLAG_IGMP) {
    igmp_start(netif);
  }
#endif /* LWIP_IGMP */

  LWIP_DEBUGF(NETIF_DEBUG, ("netif: added interface %c%c IP",
 81183c6:	68fb      	ldr	r3, [r7, #12]
 81183c8:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 81183cc:	4619      	mov	r1, r3
 81183ce:	68fb      	ldr	r3, [r7, #12]
 81183d0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 81183d4:	461a      	mov	r2, r3
 81183d6:	484c      	ldr	r0, [pc, #304]	@ (8118508 <netif_add+0x2ac>)
 81183d8:	f009 ff44 	bl	8122264 <iprintf>
 81183dc:	200d      	movs	r0, #13
 81183de:	f009 ff53 	bl	8122288 <putchar>
                            netif->name[0], netif->name[1]));
#if LWIP_IPV4
  LWIP_DEBUGF(NETIF_DEBUG, (" addr "));
 81183e2:	484a      	ldr	r0, [pc, #296]	@ (811850c <netif_add+0x2b0>)
 81183e4:	f009 ff3e 	bl	8122264 <iprintf>
 81183e8:	200d      	movs	r0, #13
 81183ea:	f009 ff4d 	bl	8122288 <putchar>
  ip4_addr_debug_print(NETIF_DEBUG, ipaddr);
 81183ee:	68bb      	ldr	r3, [r7, #8]
 81183f0:	2b00      	cmp	r3, #0
 81183f2:	d003      	beq.n	81183fc <netif_add+0x1a0>
 81183f4:	68bb      	ldr	r3, [r7, #8]
 81183f6:	781b      	ldrb	r3, [r3, #0]
 81183f8:	4619      	mov	r1, r3
 81183fa:	e000      	b.n	81183fe <netif_add+0x1a2>
 81183fc:	2100      	movs	r1, #0
 81183fe:	68bb      	ldr	r3, [r7, #8]
 8118400:	2b00      	cmp	r3, #0
 8118402:	d004      	beq.n	811840e <netif_add+0x1b2>
 8118404:	68bb      	ldr	r3, [r7, #8]
 8118406:	3301      	adds	r3, #1
 8118408:	781b      	ldrb	r3, [r3, #0]
 811840a:	461a      	mov	r2, r3
 811840c:	e000      	b.n	8118410 <netif_add+0x1b4>
 811840e:	2200      	movs	r2, #0
 8118410:	68bb      	ldr	r3, [r7, #8]
 8118412:	2b00      	cmp	r3, #0
 8118414:	d004      	beq.n	8118420 <netif_add+0x1c4>
 8118416:	68bb      	ldr	r3, [r7, #8]
 8118418:	3302      	adds	r3, #2
 811841a:	781b      	ldrb	r3, [r3, #0]
 811841c:	4618      	mov	r0, r3
 811841e:	e000      	b.n	8118422 <netif_add+0x1c6>
 8118420:	2000      	movs	r0, #0
 8118422:	68bb      	ldr	r3, [r7, #8]
 8118424:	2b00      	cmp	r3, #0
 8118426:	d003      	beq.n	8118430 <netif_add+0x1d4>
 8118428:	68bb      	ldr	r3, [r7, #8]
 811842a:	3303      	adds	r3, #3
 811842c:	781b      	ldrb	r3, [r3, #0]
 811842e:	e000      	b.n	8118432 <netif_add+0x1d6>
 8118430:	2300      	movs	r3, #0
 8118432:	9300      	str	r3, [sp, #0]
 8118434:	4603      	mov	r3, r0
 8118436:	4836      	ldr	r0, [pc, #216]	@ (8118510 <netif_add+0x2b4>)
 8118438:	f009 ff14 	bl	8122264 <iprintf>
 811843c:	200d      	movs	r0, #13
 811843e:	f009 ff23 	bl	8122288 <putchar>
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
 8118442:	4834      	ldr	r0, [pc, #208]	@ (8118514 <netif_add+0x2b8>)
 8118444:	f009 ff0e 	bl	8122264 <iprintf>
 8118448:	200d      	movs	r0, #13
 811844a:	f009 ff1d 	bl	8122288 <putchar>
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
 811844e:	687b      	ldr	r3, [r7, #4]
 8118450:	2b00      	cmp	r3, #0
 8118452:	d003      	beq.n	811845c <netif_add+0x200>
 8118454:	687b      	ldr	r3, [r7, #4]
 8118456:	781b      	ldrb	r3, [r3, #0]
 8118458:	4619      	mov	r1, r3
 811845a:	e000      	b.n	811845e <netif_add+0x202>
 811845c:	2100      	movs	r1, #0
 811845e:	687b      	ldr	r3, [r7, #4]
 8118460:	2b00      	cmp	r3, #0
 8118462:	d004      	beq.n	811846e <netif_add+0x212>
 8118464:	687b      	ldr	r3, [r7, #4]
 8118466:	3301      	adds	r3, #1
 8118468:	781b      	ldrb	r3, [r3, #0]
 811846a:	461a      	mov	r2, r3
 811846c:	e000      	b.n	8118470 <netif_add+0x214>
 811846e:	2200      	movs	r2, #0
 8118470:	687b      	ldr	r3, [r7, #4]
 8118472:	2b00      	cmp	r3, #0
 8118474:	d004      	beq.n	8118480 <netif_add+0x224>
 8118476:	687b      	ldr	r3, [r7, #4]
 8118478:	3302      	adds	r3, #2
 811847a:	781b      	ldrb	r3, [r3, #0]
 811847c:	4618      	mov	r0, r3
 811847e:	e000      	b.n	8118482 <netif_add+0x226>
 8118480:	2000      	movs	r0, #0
 8118482:	687b      	ldr	r3, [r7, #4]
 8118484:	2b00      	cmp	r3, #0
 8118486:	d003      	beq.n	8118490 <netif_add+0x234>
 8118488:	687b      	ldr	r3, [r7, #4]
 811848a:	3303      	adds	r3, #3
 811848c:	781b      	ldrb	r3, [r3, #0]
 811848e:	e000      	b.n	8118492 <netif_add+0x236>
 8118490:	2300      	movs	r3, #0
 8118492:	9300      	str	r3, [sp, #0]
 8118494:	4603      	mov	r3, r0
 8118496:	481e      	ldr	r0, [pc, #120]	@ (8118510 <netif_add+0x2b4>)
 8118498:	f009 fee4 	bl	8122264 <iprintf>
 811849c:	200d      	movs	r0, #13
 811849e:	f009 fef3 	bl	8122288 <putchar>
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
 81184a2:	481d      	ldr	r0, [pc, #116]	@ (8118518 <netif_add+0x2bc>)
 81184a4:	f009 fede 	bl	8122264 <iprintf>
 81184a8:	200d      	movs	r0, #13
 81184aa:	f009 feed 	bl	8122288 <putchar>
  ip4_addr_debug_print(NETIF_DEBUG, gw);
 81184ae:	683b      	ldr	r3, [r7, #0]
 81184b0:	2b00      	cmp	r3, #0
 81184b2:	d003      	beq.n	81184bc <netif_add+0x260>
 81184b4:	683b      	ldr	r3, [r7, #0]
 81184b6:	781b      	ldrb	r3, [r3, #0]
 81184b8:	4619      	mov	r1, r3
 81184ba:	e000      	b.n	81184be <netif_add+0x262>
 81184bc:	2100      	movs	r1, #0
 81184be:	683b      	ldr	r3, [r7, #0]
 81184c0:	2b00      	cmp	r3, #0
 81184c2:	d004      	beq.n	81184ce <netif_add+0x272>
 81184c4:	683b      	ldr	r3, [r7, #0]
 81184c6:	3301      	adds	r3, #1
 81184c8:	781b      	ldrb	r3, [r3, #0]
 81184ca:	461a      	mov	r2, r3
 81184cc:	e000      	b.n	81184d0 <netif_add+0x274>
 81184ce:	2200      	movs	r2, #0
 81184d0:	683b      	ldr	r3, [r7, #0]
 81184d2:	2b00      	cmp	r3, #0
 81184d4:	d022      	beq.n	811851c <netif_add+0x2c0>
 81184d6:	683b      	ldr	r3, [r7, #0]
 81184d8:	3302      	adds	r3, #2
 81184da:	781b      	ldrb	r3, [r3, #0]
 81184dc:	4618      	mov	r0, r3
 81184de:	e01e      	b.n	811851e <netif_add+0x2c2>
 81184e0:	0812553c 	.word	0x0812553c
 81184e4:	0812560c 	.word	0x0812560c
 81184e8:	081255c8 	.word	0x081255c8
 81184ec:	08125628 	.word	0x08125628
 81184f0:	081289b8 	.word	0x081289b8
 81184f4:	08118a43 	.word	0x08118a43
 81184f8:	10011e50 	.word	0x10011e50
 81184fc:	10011e48 	.word	0x10011e48
 8118500:	0812564c 	.word	0x0812564c
 8118504:	08125660 	.word	0x08125660
 8118508:	08125690 	.word	0x08125690
 811850c:	081256b0 	.word	0x081256b0
 8118510:	081256b8 	.word	0x081256b8
 8118514:	081256c8 	.word	0x081256c8
 8118518:	081256d4 	.word	0x081256d4
 811851c:	2000      	movs	r0, #0
 811851e:	683b      	ldr	r3, [r7, #0]
 8118520:	2b00      	cmp	r3, #0
 8118522:	d003      	beq.n	811852c <netif_add+0x2d0>
 8118524:	683b      	ldr	r3, [r7, #0]
 8118526:	3303      	adds	r3, #3
 8118528:	781b      	ldrb	r3, [r3, #0]
 811852a:	e000      	b.n	811852e <netif_add+0x2d2>
 811852c:	2300      	movs	r3, #0
 811852e:	9300      	str	r3, [sp, #0]
 8118530:	4603      	mov	r3, r0
 8118532:	4808      	ldr	r0, [pc, #32]	@ (8118554 <netif_add+0x2f8>)
 8118534:	f009 fe96 	bl	8122264 <iprintf>
 8118538:	200d      	movs	r0, #13
 811853a:	f009 fea5 	bl	8122288 <putchar>
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
 811853e:	200a      	movs	r0, #10
 8118540:	f009 fea2 	bl	8122288 <putchar>
 8118544:	200d      	movs	r0, #13
 8118546:	f009 fe9f 	bl	8122288 <putchar>

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 811854a:	68fb      	ldr	r3, [r7, #12]
}
 811854c:	4618      	mov	r0, r3
 811854e:	3718      	adds	r7, #24
 8118550:	46bd      	mov	sp, r7
 8118552:	bd80      	pop	{r7, pc}
 8118554:	081256b8 	.word	0x081256b8

08118558 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8118558:	b580      	push	{r7, lr}
 811855a:	b082      	sub	sp, #8
 811855c:	af00      	add	r7, sp, #0
 811855e:	6078      	str	r0, [r7, #4]
 8118560:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8118562:	6839      	ldr	r1, [r7, #0]
 8118564:	6878      	ldr	r0, [r7, #4]
 8118566:	f003 f8a7 	bl	811b6b8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 811856a:	6839      	ldr	r1, [r7, #0]
 811856c:	6878      	ldr	r0, [r7, #4]
 811856e:	f008 fea3 	bl	81212b8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8118572:	bf00      	nop
 8118574:	3708      	adds	r7, #8
 8118576:	46bd      	mov	sp, r7
 8118578:	bd80      	pop	{r7, pc}
	...

0811857c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 811857c:	b580      	push	{r7, lr}
 811857e:	b086      	sub	sp, #24
 8118580:	af00      	add	r7, sp, #0
 8118582:	60f8      	str	r0, [r7, #12]
 8118584:	60b9      	str	r1, [r7, #8]
 8118586:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8118588:	68bb      	ldr	r3, [r7, #8]
 811858a:	2b00      	cmp	r3, #0
 811858c:	d106      	bne.n	811859c <netif_do_set_ipaddr+0x20>
 811858e:	4b20      	ldr	r3, [pc, #128]	@ (8118610 <netif_do_set_ipaddr+0x94>)
 8118590:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8118594:	491f      	ldr	r1, [pc, #124]	@ (8118614 <netif_do_set_ipaddr+0x98>)
 8118596:	4820      	ldr	r0, [pc, #128]	@ (8118618 <netif_do_set_ipaddr+0x9c>)
 8118598:	f009 fe64 	bl	8122264 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 811859c:	687b      	ldr	r3, [r7, #4]
 811859e:	2b00      	cmp	r3, #0
 81185a0:	d106      	bne.n	81185b0 <netif_do_set_ipaddr+0x34>
 81185a2:	4b1b      	ldr	r3, [pc, #108]	@ (8118610 <netif_do_set_ipaddr+0x94>)
 81185a4:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 81185a8:	491a      	ldr	r1, [pc, #104]	@ (8118614 <netif_do_set_ipaddr+0x98>)
 81185aa:	481b      	ldr	r0, [pc, #108]	@ (8118618 <netif_do_set_ipaddr+0x9c>)
 81185ac:	f009 fe5a 	bl	8122264 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 81185b0:	68bb      	ldr	r3, [r7, #8]
 81185b2:	681a      	ldr	r2, [r3, #0]
 81185b4:	68fb      	ldr	r3, [r7, #12]
 81185b6:	3304      	adds	r3, #4
 81185b8:	681b      	ldr	r3, [r3, #0]
 81185ba:	429a      	cmp	r2, r3
 81185bc:	d022      	beq.n	8118604 <netif_do_set_ipaddr+0x88>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 81185be:	68bb      	ldr	r3, [r7, #8]
 81185c0:	681b      	ldr	r3, [r3, #0]
 81185c2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 81185c4:	68fb      	ldr	r3, [r7, #12]
 81185c6:	3304      	adds	r3, #4
 81185c8:	681a      	ldr	r2, [r3, #0]
 81185ca:	687b      	ldr	r3, [r7, #4]
 81185cc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
 81185ce:	4813      	ldr	r0, [pc, #76]	@ (811861c <netif_do_set_ipaddr+0xa0>)
 81185d0:	f009 feb8 	bl	8122344 <puts>
 81185d4:	200d      	movs	r0, #13
 81185d6:	f009 fe57 	bl	8122288 <putchar>
    netif_do_ip_addr_changed(old_addr, &new_addr);
 81185da:	f107 0314 	add.w	r3, r7, #20
 81185de:	4619      	mov	r1, r3
 81185e0:	6878      	ldr	r0, [r7, #4]
 81185e2:	f7ff ffb9 	bl	8118558 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 81185e6:	68bb      	ldr	r3, [r7, #8]
 81185e8:	2b00      	cmp	r3, #0
 81185ea:	d002      	beq.n	81185f2 <netif_do_set_ipaddr+0x76>
 81185ec:	68bb      	ldr	r3, [r7, #8]
 81185ee:	681b      	ldr	r3, [r3, #0]
 81185f0:	e000      	b.n	81185f4 <netif_do_set_ipaddr+0x78>
 81185f2:	2300      	movs	r3, #0
 81185f4:	68fa      	ldr	r2, [r7, #12]
 81185f6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 81185f8:	2101      	movs	r1, #1
 81185fa:	68f8      	ldr	r0, [r7, #12]
 81185fc:	f000 f93a 	bl	8118874 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8118600:	2301      	movs	r3, #1
 8118602:	e000      	b.n	8118606 <netif_do_set_ipaddr+0x8a>
  }
  return 0; /* address unchanged */
 8118604:	2300      	movs	r3, #0
}
 8118606:	4618      	mov	r0, r3
 8118608:	3718      	adds	r7, #24
 811860a:	46bd      	mov	sp, r7
 811860c:	bd80      	pop	{r7, pc}
 811860e:	bf00      	nop
 8118610:	0812553c 	.word	0x0812553c
 8118614:	081256dc 	.word	0x081256dc
 8118618:	081255c8 	.word	0x081255c8
 811861c:	081256ec 	.word	0x081256ec

08118620 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8118620:	b5b0      	push	{r4, r5, r7, lr}
 8118622:	b088      	sub	sp, #32
 8118624:	af04      	add	r7, sp, #16
 8118626:	60f8      	str	r0, [r7, #12]
 8118628:	60b9      	str	r1, [r7, #8]
 811862a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 811862c:	68bb      	ldr	r3, [r7, #8]
 811862e:	681a      	ldr	r2, [r3, #0]
 8118630:	68fb      	ldr	r3, [r7, #12]
 8118632:	3308      	adds	r3, #8
 8118634:	681b      	ldr	r3, [r3, #0]
 8118636:	429a      	cmp	r2, r3
 8118638:	d030      	beq.n	811869c <netif_do_set_netmask+0x7c>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 811863a:	68bb      	ldr	r3, [r7, #8]
 811863c:	2b00      	cmp	r3, #0
 811863e:	d002      	beq.n	8118646 <netif_do_set_netmask+0x26>
 8118640:	68bb      	ldr	r3, [r7, #8]
 8118642:	681b      	ldr	r3, [r3, #0]
 8118644:	e000      	b.n	8118648 <netif_do_set_netmask+0x28>
 8118646:	2300      	movs	r3, #0
 8118648:	68fa      	ldr	r2, [r7, #12]
 811864a:	6093      	str	r3, [r2, #8]
    IP_SET_TYPE_VAL(netif->netmask, IPADDR_TYPE_V4);
    mib2_add_route_ip4(0, netif);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: netmask of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 811864c:	68fb      	ldr	r3, [r7, #12]
 811864e:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8118652:	4618      	mov	r0, r3
 8118654:	68fb      	ldr	r3, [r7, #12]
 8118656:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 811865a:	461c      	mov	r4, r3
 811865c:	68fb      	ldr	r3, [r7, #12]
 811865e:	3308      	adds	r3, #8
 8118660:	781b      	ldrb	r3, [r3, #0]
 8118662:	461d      	mov	r5, r3
 8118664:	68fb      	ldr	r3, [r7, #12]
 8118666:	3308      	adds	r3, #8
 8118668:	3301      	adds	r3, #1
 811866a:	781b      	ldrb	r3, [r3, #0]
 811866c:	461a      	mov	r2, r3
 811866e:	68fb      	ldr	r3, [r7, #12]
 8118670:	3308      	adds	r3, #8
 8118672:	3302      	adds	r3, #2
 8118674:	781b      	ldrb	r3, [r3, #0]
 8118676:	4619      	mov	r1, r3
 8118678:	68fb      	ldr	r3, [r7, #12]
 811867a:	3308      	adds	r3, #8
 811867c:	3303      	adds	r3, #3
 811867e:	781b      	ldrb	r3, [r3, #0]
 8118680:	9302      	str	r3, [sp, #8]
 8118682:	9101      	str	r1, [sp, #4]
 8118684:	9200      	str	r2, [sp, #0]
 8118686:	462b      	mov	r3, r5
 8118688:	4622      	mov	r2, r4
 811868a:	4601      	mov	r1, r0
 811868c:	4806      	ldr	r0, [pc, #24]	@ (81186a8 <netif_do_set_netmask+0x88>)
 811868e:	f009 fde9 	bl	8122264 <iprintf>
 8118692:	200d      	movs	r0, #13
 8118694:	f009 fdf8 	bl	8122288 <putchar>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8118698:	2301      	movs	r3, #1
 811869a:	e000      	b.n	811869e <netif_do_set_netmask+0x7e>
  }
  return 0; /* netmask unchanged */
 811869c:	2300      	movs	r3, #0
}
 811869e:	4618      	mov	r0, r3
 81186a0:	3710      	adds	r7, #16
 81186a2:	46bd      	mov	sp, r7
 81186a4:	bdb0      	pop	{r4, r5, r7, pc}
 81186a6:	bf00      	nop
 81186a8:	0812573c 	.word	0x0812573c

081186ac <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 81186ac:	b5b0      	push	{r4, r5, r7, lr}
 81186ae:	b088      	sub	sp, #32
 81186b0:	af04      	add	r7, sp, #16
 81186b2:	60f8      	str	r0, [r7, #12]
 81186b4:	60b9      	str	r1, [r7, #8]
 81186b6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 81186b8:	68bb      	ldr	r3, [r7, #8]
 81186ba:	681a      	ldr	r2, [r3, #0]
 81186bc:	68fb      	ldr	r3, [r7, #12]
 81186be:	330c      	adds	r3, #12
 81186c0:	681b      	ldr	r3, [r3, #0]
 81186c2:	429a      	cmp	r2, r3
 81186c4:	d030      	beq.n	8118728 <netif_do_set_gw+0x7c>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 81186c6:	68bb      	ldr	r3, [r7, #8]
 81186c8:	2b00      	cmp	r3, #0
 81186ca:	d002      	beq.n	81186d2 <netif_do_set_gw+0x26>
 81186cc:	68bb      	ldr	r3, [r7, #8]
 81186ce:	681b      	ldr	r3, [r3, #0]
 81186d0:	e000      	b.n	81186d4 <netif_do_set_gw+0x28>
 81186d2:	2300      	movs	r3, #0
 81186d4:	68fa      	ldr	r2, [r7, #12]
 81186d6:	60d3      	str	r3, [r2, #12]
    IP_SET_TYPE_VAL(netif->gw, IPADDR_TYPE_V4);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: GW address of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 81186d8:	68fb      	ldr	r3, [r7, #12]
 81186da:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 81186de:	4618      	mov	r0, r3
 81186e0:	68fb      	ldr	r3, [r7, #12]
 81186e2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 81186e6:	461c      	mov	r4, r3
 81186e8:	68fb      	ldr	r3, [r7, #12]
 81186ea:	330c      	adds	r3, #12
 81186ec:	781b      	ldrb	r3, [r3, #0]
 81186ee:	461d      	mov	r5, r3
 81186f0:	68fb      	ldr	r3, [r7, #12]
 81186f2:	330c      	adds	r3, #12
 81186f4:	3301      	adds	r3, #1
 81186f6:	781b      	ldrb	r3, [r3, #0]
 81186f8:	461a      	mov	r2, r3
 81186fa:	68fb      	ldr	r3, [r7, #12]
 81186fc:	330c      	adds	r3, #12
 81186fe:	3302      	adds	r3, #2
 8118700:	781b      	ldrb	r3, [r3, #0]
 8118702:	4619      	mov	r1, r3
 8118704:	68fb      	ldr	r3, [r7, #12]
 8118706:	330c      	adds	r3, #12
 8118708:	3303      	adds	r3, #3
 811870a:	781b      	ldrb	r3, [r3, #0]
 811870c:	9302      	str	r3, [sp, #8]
 811870e:	9101      	str	r1, [sp, #4]
 8118710:	9200      	str	r2, [sp, #0]
 8118712:	462b      	mov	r3, r5
 8118714:	4622      	mov	r2, r4
 8118716:	4601      	mov	r1, r0
 8118718:	4806      	ldr	r0, [pc, #24]	@ (8118734 <netif_do_set_gw+0x88>)
 811871a:	f009 fda3 	bl	8122264 <iprintf>
 811871e:	200d      	movs	r0, #13
 8118720:	f009 fdb2 	bl	8122288 <putchar>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8118724:	2301      	movs	r3, #1
 8118726:	e000      	b.n	811872a <netif_do_set_gw+0x7e>
  }
  return 0; /* gateway unchanged */
 8118728:	2300      	movs	r3, #0
}
 811872a:	4618      	mov	r0, r3
 811872c:	3710      	adds	r7, #16
 811872e:	46bd      	mov	sp, r7
 8118730:	bdb0      	pop	{r4, r5, r7, pc}
 8118732:	bf00      	nop
 8118734:	0812579c 	.word	0x0812579c

08118738 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8118738:	b580      	push	{r7, lr}
 811873a:	b088      	sub	sp, #32
 811873c:	af00      	add	r7, sp, #0
 811873e:	60f8      	str	r0, [r7, #12]
 8118740:	60b9      	str	r1, [r7, #8]
 8118742:	607a      	str	r2, [r7, #4]
 8118744:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8118746:	2300      	movs	r3, #0
 8118748:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 811874a:	2300      	movs	r3, #0
 811874c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 811874e:	68bb      	ldr	r3, [r7, #8]
 8118750:	2b00      	cmp	r3, #0
 8118752:	d101      	bne.n	8118758 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8118754:	4b1c      	ldr	r3, [pc, #112]	@ (81187c8 <netif_set_addr+0x90>)
 8118756:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8118758:	687b      	ldr	r3, [r7, #4]
 811875a:	2b00      	cmp	r3, #0
 811875c:	d101      	bne.n	8118762 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 811875e:	4b1a      	ldr	r3, [pc, #104]	@ (81187c8 <netif_set_addr+0x90>)
 8118760:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8118762:	683b      	ldr	r3, [r7, #0]
 8118764:	2b00      	cmp	r3, #0
 8118766:	d101      	bne.n	811876c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8118768:	4b17      	ldr	r3, [pc, #92]	@ (81187c8 <netif_set_addr+0x90>)
 811876a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 811876c:	68bb      	ldr	r3, [r7, #8]
 811876e:	2b00      	cmp	r3, #0
 8118770:	d003      	beq.n	811877a <netif_set_addr+0x42>
 8118772:	68bb      	ldr	r3, [r7, #8]
 8118774:	681b      	ldr	r3, [r3, #0]
 8118776:	2b00      	cmp	r3, #0
 8118778:	d101      	bne.n	811877e <netif_set_addr+0x46>
 811877a:	2301      	movs	r3, #1
 811877c:	e000      	b.n	8118780 <netif_set_addr+0x48>
 811877e:	2300      	movs	r3, #0
 8118780:	617b      	str	r3, [r7, #20]
  if (remove) {
 8118782:	697b      	ldr	r3, [r7, #20]
 8118784:	2b00      	cmp	r3, #0
 8118786:	d006      	beq.n	8118796 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8118788:	f107 0310 	add.w	r3, r7, #16
 811878c:	461a      	mov	r2, r3
 811878e:	68b9      	ldr	r1, [r7, #8]
 8118790:	68f8      	ldr	r0, [r7, #12]
 8118792:	f7ff fef3 	bl	811857c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8118796:	69fa      	ldr	r2, [r7, #28]
 8118798:	6879      	ldr	r1, [r7, #4]
 811879a:	68f8      	ldr	r0, [r7, #12]
 811879c:	f7ff ff40 	bl	8118620 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 81187a0:	69ba      	ldr	r2, [r7, #24]
 81187a2:	6839      	ldr	r1, [r7, #0]
 81187a4:	68f8      	ldr	r0, [r7, #12]
 81187a6:	f7ff ff81 	bl	81186ac <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 81187aa:	697b      	ldr	r3, [r7, #20]
 81187ac:	2b00      	cmp	r3, #0
 81187ae:	d106      	bne.n	81187be <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 81187b0:	f107 0310 	add.w	r3, r7, #16
 81187b4:	461a      	mov	r2, r3
 81187b6:	68b9      	ldr	r1, [r7, #8]
 81187b8:	68f8      	ldr	r0, [r7, #12]
 81187ba:	f7ff fedf 	bl	811857c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 81187be:	bf00      	nop
 81187c0:	3720      	adds	r7, #32
 81187c2:	46bd      	mov	sp, r7
 81187c4:	bd80      	pop	{r7, pc}
 81187c6:	bf00      	nop
 81187c8:	081289b8 	.word	0x081289b8

081187cc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 81187cc:	b580      	push	{r7, lr}
 81187ce:	b082      	sub	sp, #8
 81187d0:	af00      	add	r7, sp, #0
 81187d2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 81187d4:	4a0f      	ldr	r2, [pc, #60]	@ (8118814 <netif_set_default+0x48>)
 81187d6:	687b      	ldr	r3, [r7, #4]
 81187d8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
 81187da:	687b      	ldr	r3, [r7, #4]
 81187dc:	2b00      	cmp	r3, #0
 81187de:	d004      	beq.n	81187ea <netif_set_default+0x1e>
 81187e0:	687b      	ldr	r3, [r7, #4]
 81187e2:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 81187e6:	4619      	mov	r1, r3
 81187e8:	e000      	b.n	81187ec <netif_set_default+0x20>
 81187ea:	2127      	movs	r1, #39	@ 0x27
 81187ec:	687b      	ldr	r3, [r7, #4]
 81187ee:	2b00      	cmp	r3, #0
 81187f0:	d003      	beq.n	81187fa <netif_set_default+0x2e>
 81187f2:	687b      	ldr	r3, [r7, #4]
 81187f4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 81187f8:	e000      	b.n	81187fc <netif_set_default+0x30>
 81187fa:	2327      	movs	r3, #39	@ 0x27
 81187fc:	461a      	mov	r2, r3
 81187fe:	4806      	ldr	r0, [pc, #24]	@ (8118818 <netif_set_default+0x4c>)
 8118800:	f009 fd30 	bl	8122264 <iprintf>
 8118804:	200d      	movs	r0, #13
 8118806:	f009 fd3f 	bl	8122288 <putchar>
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 811880a:	bf00      	nop
 811880c:	3708      	adds	r7, #8
 811880e:	46bd      	mov	sp, r7
 8118810:	bd80      	pop	{r7, pc}
 8118812:	bf00      	nop
 8118814:	10011e4c 	.word	0x10011e4c
 8118818:	08125810 	.word	0x08125810

0811881c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 811881c:	b580      	push	{r7, lr}
 811881e:	b082      	sub	sp, #8
 8118820:	af00      	add	r7, sp, #0
 8118822:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8118824:	687b      	ldr	r3, [r7, #4]
 8118826:	2b00      	cmp	r3, #0
 8118828:	d107      	bne.n	811883a <netif_set_up+0x1e>
 811882a:	4b0f      	ldr	r3, [pc, #60]	@ (8118868 <netif_set_up+0x4c>)
 811882c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8118830:	490e      	ldr	r1, [pc, #56]	@ (811886c <netif_set_up+0x50>)
 8118832:	480f      	ldr	r0, [pc, #60]	@ (8118870 <netif_set_up+0x54>)
 8118834:	f009 fd16 	bl	8122264 <iprintf>
 8118838:	e013      	b.n	8118862 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 811883a:	687b      	ldr	r3, [r7, #4]
 811883c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8118840:	f003 0301 	and.w	r3, r3, #1
 8118844:	2b00      	cmp	r3, #0
 8118846:	d10c      	bne.n	8118862 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8118848:	687b      	ldr	r3, [r7, #4]
 811884a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811884e:	f043 0301 	orr.w	r3, r3, #1
 8118852:	b2da      	uxtb	r2, r3
 8118854:	687b      	ldr	r3, [r7, #4]
 8118856:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 811885a:	2103      	movs	r1, #3
 811885c:	6878      	ldr	r0, [r7, #4]
 811885e:	f000 f809 	bl	8118874 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8118862:	3708      	adds	r7, #8
 8118864:	46bd      	mov	sp, r7
 8118866:	bd80      	pop	{r7, pc}
 8118868:	0812553c 	.word	0x0812553c
 811886c:	08125838 	.word	0x08125838
 8118870:	081255c8 	.word	0x081255c8

08118874 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8118874:	b580      	push	{r7, lr}
 8118876:	b082      	sub	sp, #8
 8118878:	af00      	add	r7, sp, #0
 811887a:	6078      	str	r0, [r7, #4]
 811887c:	460b      	mov	r3, r1
 811887e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8118880:	687b      	ldr	r3, [r7, #4]
 8118882:	2b00      	cmp	r3, #0
 8118884:	d106      	bne.n	8118894 <netif_issue_reports+0x20>
 8118886:	4b18      	ldr	r3, [pc, #96]	@ (81188e8 <netif_issue_reports+0x74>)
 8118888:	f240 326d 	movw	r2, #877	@ 0x36d
 811888c:	4917      	ldr	r1, [pc, #92]	@ (81188ec <netif_issue_reports+0x78>)
 811888e:	4818      	ldr	r0, [pc, #96]	@ (81188f0 <netif_issue_reports+0x7c>)
 8118890:	f009 fce8 	bl	8122264 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8118894:	687b      	ldr	r3, [r7, #4]
 8118896:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811889a:	f003 0304 	and.w	r3, r3, #4
 811889e:	2b00      	cmp	r3, #0
 81188a0:	d01e      	beq.n	81188e0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 81188a2:	687b      	ldr	r3, [r7, #4]
 81188a4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 81188a8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 81188ac:	2b00      	cmp	r3, #0
 81188ae:	d017      	beq.n	81188e0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 81188b0:	78fb      	ldrb	r3, [r7, #3]
 81188b2:	f003 0301 	and.w	r3, r3, #1
 81188b6:	2b00      	cmp	r3, #0
 81188b8:	d013      	beq.n	81188e2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 81188ba:	687b      	ldr	r3, [r7, #4]
 81188bc:	3304      	adds	r3, #4
 81188be:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 81188c0:	2b00      	cmp	r3, #0
 81188c2:	d00e      	beq.n	81188e2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 81188c4:	687b      	ldr	r3, [r7, #4]
 81188c6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 81188ca:	f003 0308 	and.w	r3, r3, #8
 81188ce:	2b00      	cmp	r3, #0
 81188d0:	d007      	beq.n	81188e2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 81188d2:	687b      	ldr	r3, [r7, #4]
 81188d4:	3304      	adds	r3, #4
 81188d6:	4619      	mov	r1, r3
 81188d8:	6878      	ldr	r0, [r7, #4]
 81188da:	f7fc febd 	bl	8115658 <etharp_request>
 81188de:	e000      	b.n	81188e2 <netif_issue_reports+0x6e>
    return;
 81188e0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 81188e2:	3708      	adds	r7, #8
 81188e4:	46bd      	mov	sp, r7
 81188e6:	bd80      	pop	{r7, pc}
 81188e8:	0812553c 	.word	0x0812553c
 81188ec:	08125854 	.word	0x08125854
 81188f0:	081255c8 	.word	0x081255c8

081188f4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 81188f4:	b580      	push	{r7, lr}
 81188f6:	b082      	sub	sp, #8
 81188f8:	af00      	add	r7, sp, #0
 81188fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 81188fc:	687b      	ldr	r3, [r7, #4]
 81188fe:	2b00      	cmp	r3, #0
 8118900:	d107      	bne.n	8118912 <netif_set_down+0x1e>
 8118902:	4b12      	ldr	r3, [pc, #72]	@ (811894c <netif_set_down+0x58>)
 8118904:	f240 329b 	movw	r2, #923	@ 0x39b
 8118908:	4911      	ldr	r1, [pc, #68]	@ (8118950 <netif_set_down+0x5c>)
 811890a:	4812      	ldr	r0, [pc, #72]	@ (8118954 <netif_set_down+0x60>)
 811890c:	f009 fcaa 	bl	8122264 <iprintf>
 8118910:	e019      	b.n	8118946 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8118912:	687b      	ldr	r3, [r7, #4]
 8118914:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8118918:	f003 0301 	and.w	r3, r3, #1
 811891c:	2b00      	cmp	r3, #0
 811891e:	d012      	beq.n	8118946 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8118920:	687b      	ldr	r3, [r7, #4]
 8118922:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8118926:	f023 0301 	bic.w	r3, r3, #1
 811892a:	b2da      	uxtb	r2, r3
 811892c:	687b      	ldr	r3, [r7, #4]
 811892e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8118932:	687b      	ldr	r3, [r7, #4]
 8118934:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8118938:	f003 0308 	and.w	r3, r3, #8
 811893c:	2b00      	cmp	r3, #0
 811893e:	d002      	beq.n	8118946 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8118940:	6878      	ldr	r0, [r7, #4]
 8118942:	f7fc f965 	bl	8114c10 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8118946:	3708      	adds	r7, #8
 8118948:	46bd      	mov	sp, r7
 811894a:	bd80      	pop	{r7, pc}
 811894c:	0812553c 	.word	0x0812553c
 8118950:	08125878 	.word	0x08125878
 8118954:	081255c8 	.word	0x081255c8

08118958 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8118958:	b580      	push	{r7, lr}
 811895a:	b082      	sub	sp, #8
 811895c:	af00      	add	r7, sp, #0
 811895e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8118960:	687b      	ldr	r3, [r7, #4]
 8118962:	2b00      	cmp	r3, #0
 8118964:	d107      	bne.n	8118976 <netif_set_link_up+0x1e>
 8118966:	4b13      	ldr	r3, [pc, #76]	@ (81189b4 <netif_set_link_up+0x5c>)
 8118968:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 811896c:	4912      	ldr	r1, [pc, #72]	@ (81189b8 <netif_set_link_up+0x60>)
 811896e:	4813      	ldr	r0, [pc, #76]	@ (81189bc <netif_set_link_up+0x64>)
 8118970:	f009 fc78 	bl	8122264 <iprintf>
 8118974:	e01b      	b.n	81189ae <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8118976:	687b      	ldr	r3, [r7, #4]
 8118978:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811897c:	f003 0304 	and.w	r3, r3, #4
 8118980:	2b00      	cmp	r3, #0
 8118982:	d114      	bne.n	81189ae <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8118984:	687b      	ldr	r3, [r7, #4]
 8118986:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811898a:	f043 0304 	orr.w	r3, r3, #4
 811898e:	b2da      	uxtb	r2, r3
 8118990:	687b      	ldr	r3, [r7, #4]
 8118992:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8118996:	2103      	movs	r1, #3
 8118998:	6878      	ldr	r0, [r7, #4]
 811899a:	f7ff ff6b 	bl	8118874 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 811899e:	687b      	ldr	r3, [r7, #4]
 81189a0:	69db      	ldr	r3, [r3, #28]
 81189a2:	2b00      	cmp	r3, #0
 81189a4:	d003      	beq.n	81189ae <netif_set_link_up+0x56>
 81189a6:	687b      	ldr	r3, [r7, #4]
 81189a8:	69db      	ldr	r3, [r3, #28]
 81189aa:	6878      	ldr	r0, [r7, #4]
 81189ac:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 81189ae:	3708      	adds	r7, #8
 81189b0:	46bd      	mov	sp, r7
 81189b2:	bd80      	pop	{r7, pc}
 81189b4:	0812553c 	.word	0x0812553c
 81189b8:	08125898 	.word	0x08125898
 81189bc:	081255c8 	.word	0x081255c8

081189c0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 81189c0:	b580      	push	{r7, lr}
 81189c2:	b082      	sub	sp, #8
 81189c4:	af00      	add	r7, sp, #0
 81189c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 81189c8:	687b      	ldr	r3, [r7, #4]
 81189ca:	2b00      	cmp	r3, #0
 81189cc:	d107      	bne.n	81189de <netif_set_link_down+0x1e>
 81189ce:	4b11      	ldr	r3, [pc, #68]	@ (8118a14 <netif_set_link_down+0x54>)
 81189d0:	f240 4206 	movw	r2, #1030	@ 0x406
 81189d4:	4910      	ldr	r1, [pc, #64]	@ (8118a18 <netif_set_link_down+0x58>)
 81189d6:	4811      	ldr	r0, [pc, #68]	@ (8118a1c <netif_set_link_down+0x5c>)
 81189d8:	f009 fc44 	bl	8122264 <iprintf>
 81189dc:	e017      	b.n	8118a0e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 81189de:	687b      	ldr	r3, [r7, #4]
 81189e0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 81189e4:	f003 0304 	and.w	r3, r3, #4
 81189e8:	2b00      	cmp	r3, #0
 81189ea:	d010      	beq.n	8118a0e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 81189ec:	687b      	ldr	r3, [r7, #4]
 81189ee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 81189f2:	f023 0304 	bic.w	r3, r3, #4
 81189f6:	b2da      	uxtb	r2, r3
 81189f8:	687b      	ldr	r3, [r7, #4]
 81189fa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 81189fe:	687b      	ldr	r3, [r7, #4]
 8118a00:	69db      	ldr	r3, [r3, #28]
 8118a02:	2b00      	cmp	r3, #0
 8118a04:	d003      	beq.n	8118a0e <netif_set_link_down+0x4e>
 8118a06:	687b      	ldr	r3, [r7, #4]
 8118a08:	69db      	ldr	r3, [r3, #28]
 8118a0a:	6878      	ldr	r0, [r7, #4]
 8118a0c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8118a0e:	3708      	adds	r7, #8
 8118a10:	46bd      	mov	sp, r7
 8118a12:	bd80      	pop	{r7, pc}
 8118a14:	0812553c 	.word	0x0812553c
 8118a18:	081258bc 	.word	0x081258bc
 8118a1c:	081255c8 	.word	0x081255c8

08118a20 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8118a20:	b480      	push	{r7}
 8118a22:	b083      	sub	sp, #12
 8118a24:	af00      	add	r7, sp, #0
 8118a26:	6078      	str	r0, [r7, #4]
 8118a28:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8118a2a:	687b      	ldr	r3, [r7, #4]
 8118a2c:	2b00      	cmp	r3, #0
 8118a2e:	d002      	beq.n	8118a36 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8118a30:	687b      	ldr	r3, [r7, #4]
 8118a32:	683a      	ldr	r2, [r7, #0]
 8118a34:	61da      	str	r2, [r3, #28]
  }
}
 8118a36:	bf00      	nop
 8118a38:	370c      	adds	r7, #12
 8118a3a:	46bd      	mov	sp, r7
 8118a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8118a40:	4770      	bx	lr

08118a42 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8118a42:	b480      	push	{r7}
 8118a44:	b085      	sub	sp, #20
 8118a46:	af00      	add	r7, sp, #0
 8118a48:	60f8      	str	r0, [r7, #12]
 8118a4a:	60b9      	str	r1, [r7, #8]
 8118a4c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8118a4e:	f06f 030b 	mvn.w	r3, #11
}
 8118a52:	4618      	mov	r0, r3
 8118a54:	3714      	adds	r7, #20
 8118a56:	46bd      	mov	sp, r7
 8118a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8118a5c:	4770      	bx	lr
	...

08118a60 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8118a60:	b480      	push	{r7}
 8118a62:	b085      	sub	sp, #20
 8118a64:	af00      	add	r7, sp, #0
 8118a66:	4603      	mov	r3, r0
 8118a68:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8118a6a:	79fb      	ldrb	r3, [r7, #7]
 8118a6c:	2b00      	cmp	r3, #0
 8118a6e:	d013      	beq.n	8118a98 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8118a70:	4b0d      	ldr	r3, [pc, #52]	@ (8118aa8 <netif_get_by_index+0x48>)
 8118a72:	681b      	ldr	r3, [r3, #0]
 8118a74:	60fb      	str	r3, [r7, #12]
 8118a76:	e00c      	b.n	8118a92 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8118a78:	68fb      	ldr	r3, [r7, #12]
 8118a7a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8118a7e:	3301      	adds	r3, #1
 8118a80:	b2db      	uxtb	r3, r3
 8118a82:	79fa      	ldrb	r2, [r7, #7]
 8118a84:	429a      	cmp	r2, r3
 8118a86:	d101      	bne.n	8118a8c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8118a88:	68fb      	ldr	r3, [r7, #12]
 8118a8a:	e006      	b.n	8118a9a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8118a8c:	68fb      	ldr	r3, [r7, #12]
 8118a8e:	681b      	ldr	r3, [r3, #0]
 8118a90:	60fb      	str	r3, [r7, #12]
 8118a92:	68fb      	ldr	r3, [r7, #12]
 8118a94:	2b00      	cmp	r3, #0
 8118a96:	d1ef      	bne.n	8118a78 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8118a98:	2300      	movs	r3, #0
}
 8118a9a:	4618      	mov	r0, r3
 8118a9c:	3714      	adds	r7, #20
 8118a9e:	46bd      	mov	sp, r7
 8118aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8118aa4:	4770      	bx	lr
 8118aa6:	bf00      	nop
 8118aa8:	10011e48 	.word	0x10011e48

08118aac <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8118aac:	b580      	push	{r7, lr}
 8118aae:	b082      	sub	sp, #8
 8118ab0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8118ab2:	f000 fee1 	bl	8119878 <sys_arch_protect>
 8118ab6:	6038      	str	r0, [r7, #0]
 8118ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8118af0 <pbuf_free_ooseq+0x44>)
 8118aba:	2200      	movs	r2, #0
 8118abc:	701a      	strb	r2, [r3, #0]
 8118abe:	6838      	ldr	r0, [r7, #0]
 8118ac0:	f000 fee8 	bl	8119894 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8118ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8118af4 <pbuf_free_ooseq+0x48>)
 8118ac6:	681b      	ldr	r3, [r3, #0]
 8118ac8:	607b      	str	r3, [r7, #4]
 8118aca:	e00a      	b.n	8118ae2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8118acc:	687b      	ldr	r3, [r7, #4]
 8118ace:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8118ad0:	2b00      	cmp	r3, #0
 8118ad2:	d003      	beq.n	8118adc <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8118ad4:	6878      	ldr	r0, [r7, #4]
 8118ad6:	f002 fe2d 	bl	811b734 <tcp_free_ooseq>
      return;
 8118ada:	e005      	b.n	8118ae8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8118adc:	687b      	ldr	r3, [r7, #4]
 8118ade:	68db      	ldr	r3, [r3, #12]
 8118ae0:	607b      	str	r3, [r7, #4]
 8118ae2:	687b      	ldr	r3, [r7, #4]
 8118ae4:	2b00      	cmp	r3, #0
 8118ae6:	d1f1      	bne.n	8118acc <pbuf_free_ooseq+0x20>
    }
  }
}
 8118ae8:	3708      	adds	r7, #8
 8118aea:	46bd      	mov	sp, r7
 8118aec:	bd80      	pop	{r7, pc}
 8118aee:	bf00      	nop
 8118af0:	10011e51 	.word	0x10011e51
 8118af4:	10011e64 	.word	0x10011e64

08118af8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8118af8:	b580      	push	{r7, lr}
 8118afa:	b082      	sub	sp, #8
 8118afc:	af00      	add	r7, sp, #0
 8118afe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8118b00:	f7ff ffd4 	bl	8118aac <pbuf_free_ooseq>
}
 8118b04:	bf00      	nop
 8118b06:	3708      	adds	r7, #8
 8118b08:	46bd      	mov	sp, r7
 8118b0a:	bd80      	pop	{r7, pc}

08118b0c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8118b0c:	b580      	push	{r7, lr}
 8118b0e:	b082      	sub	sp, #8
 8118b10:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8118b12:	f000 feb1 	bl	8119878 <sys_arch_protect>
 8118b16:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8118b18:	4b0f      	ldr	r3, [pc, #60]	@ (8118b58 <pbuf_pool_is_empty+0x4c>)
 8118b1a:	781b      	ldrb	r3, [r3, #0]
 8118b1c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8118b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8118b58 <pbuf_pool_is_empty+0x4c>)
 8118b20:	2201      	movs	r2, #1
 8118b22:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8118b24:	6878      	ldr	r0, [r7, #4]
 8118b26:	f000 feb5 	bl	8119894 <sys_arch_unprotect>

  if (!queued) {
 8118b2a:	78fb      	ldrb	r3, [r7, #3]
 8118b2c:	2b00      	cmp	r3, #0
 8118b2e:	d10f      	bne.n	8118b50 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8118b30:	2100      	movs	r1, #0
 8118b32:	480a      	ldr	r0, [pc, #40]	@ (8118b5c <pbuf_pool_is_empty+0x50>)
 8118b34:	f007 fb10 	bl	8120158 <tcpip_try_callback>
 8118b38:	4603      	mov	r3, r0
 8118b3a:	2b00      	cmp	r3, #0
 8118b3c:	d008      	beq.n	8118b50 <pbuf_pool_is_empty+0x44>
 8118b3e:	f000 fe9b 	bl	8119878 <sys_arch_protect>
 8118b42:	6078      	str	r0, [r7, #4]
 8118b44:	4b04      	ldr	r3, [pc, #16]	@ (8118b58 <pbuf_pool_is_empty+0x4c>)
 8118b46:	2200      	movs	r2, #0
 8118b48:	701a      	strb	r2, [r3, #0]
 8118b4a:	6878      	ldr	r0, [r7, #4]
 8118b4c:	f000 fea2 	bl	8119894 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8118b50:	bf00      	nop
 8118b52:	3708      	adds	r7, #8
 8118b54:	46bd      	mov	sp, r7
 8118b56:	bd80      	pop	{r7, pc}
 8118b58:	10011e51 	.word	0x10011e51
 8118b5c:	08118af9 	.word	0x08118af9

08118b60 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8118b60:	b480      	push	{r7}
 8118b62:	b085      	sub	sp, #20
 8118b64:	af00      	add	r7, sp, #0
 8118b66:	60f8      	str	r0, [r7, #12]
 8118b68:	60b9      	str	r1, [r7, #8]
 8118b6a:	4611      	mov	r1, r2
 8118b6c:	461a      	mov	r2, r3
 8118b6e:	460b      	mov	r3, r1
 8118b70:	80fb      	strh	r3, [r7, #6]
 8118b72:	4613      	mov	r3, r2
 8118b74:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8118b76:	68fb      	ldr	r3, [r7, #12]
 8118b78:	2200      	movs	r2, #0
 8118b7a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8118b7c:	68fb      	ldr	r3, [r7, #12]
 8118b7e:	68ba      	ldr	r2, [r7, #8]
 8118b80:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8118b82:	68fb      	ldr	r3, [r7, #12]
 8118b84:	88fa      	ldrh	r2, [r7, #6]
 8118b86:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8118b88:	68fb      	ldr	r3, [r7, #12]
 8118b8a:	88ba      	ldrh	r2, [r7, #4]
 8118b8c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8118b8e:	8b3b      	ldrh	r3, [r7, #24]
 8118b90:	b2da      	uxtb	r2, r3
 8118b92:	68fb      	ldr	r3, [r7, #12]
 8118b94:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8118b96:	68fb      	ldr	r3, [r7, #12]
 8118b98:	7f3a      	ldrb	r2, [r7, #28]
 8118b9a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8118b9c:	68fb      	ldr	r3, [r7, #12]
 8118b9e:	2201      	movs	r2, #1
 8118ba0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8118ba2:	68fb      	ldr	r3, [r7, #12]
 8118ba4:	2200      	movs	r2, #0
 8118ba6:	73da      	strb	r2, [r3, #15]
}
 8118ba8:	bf00      	nop
 8118baa:	3714      	adds	r7, #20
 8118bac:	46bd      	mov	sp, r7
 8118bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8118bb2:	4770      	bx	lr

08118bb4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8118bb4:	b580      	push	{r7, lr}
 8118bb6:	b08c      	sub	sp, #48	@ 0x30
 8118bb8:	af02      	add	r7, sp, #8
 8118bba:	4603      	mov	r3, r0
 8118bbc:	71fb      	strb	r3, [r7, #7]
 8118bbe:	460b      	mov	r3, r1
 8118bc0:	80bb      	strh	r3, [r7, #4]
 8118bc2:	4613      	mov	r3, r2
 8118bc4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8118bc6:	79fb      	ldrb	r3, [r7, #7]
 8118bc8:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8118bca:	887b      	ldrh	r3, [r7, #2]
 8118bcc:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8118bd0:	f000 8082 	beq.w	8118cd8 <pbuf_alloc+0x124>
 8118bd4:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8118bd8:	f300 80c9 	bgt.w	8118d6e <pbuf_alloc+0x1ba>
 8118bdc:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8118be0:	d010      	beq.n	8118c04 <pbuf_alloc+0x50>
 8118be2:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8118be6:	f300 80c2 	bgt.w	8118d6e <pbuf_alloc+0x1ba>
 8118bea:	2b01      	cmp	r3, #1
 8118bec:	d002      	beq.n	8118bf4 <pbuf_alloc+0x40>
 8118bee:	2b41      	cmp	r3, #65	@ 0x41
 8118bf0:	f040 80bd 	bne.w	8118d6e <pbuf_alloc+0x1ba>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8118bf4:	887a      	ldrh	r2, [r7, #2]
 8118bf6:	88bb      	ldrh	r3, [r7, #4]
 8118bf8:	4619      	mov	r1, r3
 8118bfa:	2000      	movs	r0, #0
 8118bfc:	f000 f8d2 	bl	8118da4 <pbuf_alloc_reference>
 8118c00:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8118c02:	e0be      	b.n	8118d82 <pbuf_alloc+0x1ce>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8118c04:	2300      	movs	r3, #0
 8118c06:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8118c08:	2300      	movs	r3, #0
 8118c0a:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8118c0c:	88bb      	ldrh	r3, [r7, #4]
 8118c0e:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8118c10:	200c      	movs	r0, #12
 8118c12:	f7ff fa7b 	bl	811810c <memp_malloc>
 8118c16:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8118c18:	693b      	ldr	r3, [r7, #16]
 8118c1a:	2b00      	cmp	r3, #0
 8118c1c:	d109      	bne.n	8118c32 <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 8118c1e:	f7ff ff75 	bl	8118b0c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8118c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8118c24:	2b00      	cmp	r3, #0
 8118c26:	d002      	beq.n	8118c2e <pbuf_alloc+0x7a>
            pbuf_free(p);
 8118c28:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8118c2a:	f000 faa7 	bl	811917c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8118c2e:	2300      	movs	r3, #0
 8118c30:	e0a8      	b.n	8118d84 <pbuf_alloc+0x1d0>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8118c32:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8118c34:	3303      	adds	r3, #3
 8118c36:	b29b      	uxth	r3, r3
 8118c38:	f023 0303 	bic.w	r3, r3, #3
 8118c3c:	b29b      	uxth	r3, r3
 8118c3e:	f5c3 63bd 	rsb	r3, r3, #1512	@ 0x5e8
 8118c42:	3304      	adds	r3, #4
 8118c44:	b29b      	uxth	r3, r3
 8118c46:	8b7a      	ldrh	r2, [r7, #26]
 8118c48:	4293      	cmp	r3, r2
 8118c4a:	bf28      	it	cs
 8118c4c:	4613      	movcs	r3, r2
 8118c4e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8118c50:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8118c52:	3310      	adds	r3, #16
 8118c54:	693a      	ldr	r2, [r7, #16]
 8118c56:	4413      	add	r3, r2
 8118c58:	3303      	adds	r3, #3
 8118c5a:	f023 0303 	bic.w	r3, r3, #3
 8118c5e:	4618      	mov	r0, r3
 8118c60:	89f9      	ldrh	r1, [r7, #14]
 8118c62:	8b7a      	ldrh	r2, [r7, #26]
 8118c64:	2300      	movs	r3, #0
 8118c66:	9301      	str	r3, [sp, #4]
 8118c68:	887b      	ldrh	r3, [r7, #2]
 8118c6a:	9300      	str	r3, [sp, #0]
 8118c6c:	460b      	mov	r3, r1
 8118c6e:	4601      	mov	r1, r0
 8118c70:	6938      	ldr	r0, [r7, #16]
 8118c72:	f7ff ff75 	bl	8118b60 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8118c76:	693b      	ldr	r3, [r7, #16]
 8118c78:	685b      	ldr	r3, [r3, #4]
 8118c7a:	f003 0303 	and.w	r3, r3, #3
 8118c7e:	2b00      	cmp	r3, #0
 8118c80:	d006      	beq.n	8118c90 <pbuf_alloc+0xdc>
 8118c82:	4b42      	ldr	r3, [pc, #264]	@ (8118d8c <pbuf_alloc+0x1d8>)
 8118c84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8118c88:	4941      	ldr	r1, [pc, #260]	@ (8118d90 <pbuf_alloc+0x1dc>)
 8118c8a:	4842      	ldr	r0, [pc, #264]	@ (8118d94 <pbuf_alloc+0x1e0>)
 8118c8c:	f009 faea 	bl	8122264 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8118c90:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8118c92:	3303      	adds	r3, #3
 8118c94:	f023 0303 	bic.w	r3, r3, #3
 8118c98:	f240 52ec 	movw	r2, #1516	@ 0x5ec
 8118c9c:	4293      	cmp	r3, r2
 8118c9e:	d106      	bne.n	8118cae <pbuf_alloc+0xfa>
 8118ca0:	4b3a      	ldr	r3, [pc, #232]	@ (8118d8c <pbuf_alloc+0x1d8>)
 8118ca2:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8118ca6:	493c      	ldr	r1, [pc, #240]	@ (8118d98 <pbuf_alloc+0x1e4>)
 8118ca8:	483a      	ldr	r0, [pc, #232]	@ (8118d94 <pbuf_alloc+0x1e0>)
 8118caa:	f009 fadb 	bl	8122264 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8118cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8118cb0:	2b00      	cmp	r3, #0
 8118cb2:	d102      	bne.n	8118cba <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8118cb4:	693b      	ldr	r3, [r7, #16]
 8118cb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8118cb8:	e002      	b.n	8118cc0 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8118cba:	69fb      	ldr	r3, [r7, #28]
 8118cbc:	693a      	ldr	r2, [r7, #16]
 8118cbe:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8118cc0:	693b      	ldr	r3, [r7, #16]
 8118cc2:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8118cc4:	8b7a      	ldrh	r2, [r7, #26]
 8118cc6:	89fb      	ldrh	r3, [r7, #14]
 8118cc8:	1ad3      	subs	r3, r2, r3
 8118cca:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8118ccc:	2300      	movs	r3, #0
 8118cce:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8118cd0:	8b7b      	ldrh	r3, [r7, #26]
 8118cd2:	2b00      	cmp	r3, #0
 8118cd4:	d19c      	bne.n	8118c10 <pbuf_alloc+0x5c>
      break;
 8118cd6:	e054      	b.n	8118d82 <pbuf_alloc+0x1ce>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8118cd8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8118cda:	3303      	adds	r3, #3
 8118cdc:	b29b      	uxth	r3, r3
 8118cde:	f023 0303 	bic.w	r3, r3, #3
 8118ce2:	b29a      	uxth	r2, r3
 8118ce4:	88bb      	ldrh	r3, [r7, #4]
 8118ce6:	3303      	adds	r3, #3
 8118ce8:	b29b      	uxth	r3, r3
 8118cea:	f023 0303 	bic.w	r3, r3, #3
 8118cee:	b29b      	uxth	r3, r3
 8118cf0:	4413      	add	r3, r2
 8118cf2:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8118cf4:	8b3b      	ldrh	r3, [r7, #24]
 8118cf6:	3310      	adds	r3, #16
 8118cf8:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8118cfa:	8b3a      	ldrh	r2, [r7, #24]
 8118cfc:	88bb      	ldrh	r3, [r7, #4]
 8118cfe:	3303      	adds	r3, #3
 8118d00:	f023 0303 	bic.w	r3, r3, #3
 8118d04:	429a      	cmp	r2, r3
 8118d06:	d306      	bcc.n	8118d16 <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8118d08:	88bb      	ldrh	r3, [r7, #4]
 8118d0a:	3303      	adds	r3, #3
 8118d0c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8118d10:	697a      	ldr	r2, [r7, #20]
 8118d12:	429a      	cmp	r2, r3
 8118d14:	d201      	bcs.n	8118d1a <pbuf_alloc+0x166>
        return NULL;
 8118d16:	2300      	movs	r3, #0
 8118d18:	e034      	b.n	8118d84 <pbuf_alloc+0x1d0>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8118d1a:	6978      	ldr	r0, [r7, #20]
 8118d1c:	f7ff f858 	bl	8117dd0 <mem_malloc>
 8118d20:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8118d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8118d24:	2b00      	cmp	r3, #0
 8118d26:	d101      	bne.n	8118d2c <pbuf_alloc+0x178>
        return NULL;
 8118d28:	2300      	movs	r3, #0
 8118d2a:	e02b      	b.n	8118d84 <pbuf_alloc+0x1d0>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8118d2c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8118d2e:	3310      	adds	r3, #16
 8118d30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8118d32:	4413      	add	r3, r2
 8118d34:	3303      	adds	r3, #3
 8118d36:	f023 0303 	bic.w	r3, r3, #3
 8118d3a:	4618      	mov	r0, r3
 8118d3c:	88b9      	ldrh	r1, [r7, #4]
 8118d3e:	88ba      	ldrh	r2, [r7, #4]
 8118d40:	2300      	movs	r3, #0
 8118d42:	9301      	str	r3, [sp, #4]
 8118d44:	887b      	ldrh	r3, [r7, #2]
 8118d46:	9300      	str	r3, [sp, #0]
 8118d48:	460b      	mov	r3, r1
 8118d4a:	4601      	mov	r1, r0
 8118d4c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8118d4e:	f7ff ff07 	bl	8118b60 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8118d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8118d54:	685b      	ldr	r3, [r3, #4]
 8118d56:	f003 0303 	and.w	r3, r3, #3
 8118d5a:	2b00      	cmp	r3, #0
 8118d5c:	d010      	beq.n	8118d80 <pbuf_alloc+0x1cc>
 8118d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8118d8c <pbuf_alloc+0x1d8>)
 8118d60:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8118d64:	490d      	ldr	r1, [pc, #52]	@ (8118d9c <pbuf_alloc+0x1e8>)
 8118d66:	480b      	ldr	r0, [pc, #44]	@ (8118d94 <pbuf_alloc+0x1e0>)
 8118d68:	f009 fa7c 	bl	8122264 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8118d6c:	e008      	b.n	8118d80 <pbuf_alloc+0x1cc>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8118d6e:	4b07      	ldr	r3, [pc, #28]	@ (8118d8c <pbuf_alloc+0x1d8>)
 8118d70:	f240 1227 	movw	r2, #295	@ 0x127
 8118d74:	490a      	ldr	r1, [pc, #40]	@ (8118da0 <pbuf_alloc+0x1ec>)
 8118d76:	4807      	ldr	r0, [pc, #28]	@ (8118d94 <pbuf_alloc+0x1e0>)
 8118d78:	f009 fa74 	bl	8122264 <iprintf>
      return NULL;
 8118d7c:	2300      	movs	r3, #0
 8118d7e:	e001      	b.n	8118d84 <pbuf_alloc+0x1d0>
      break;
 8118d80:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8118d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8118d84:	4618      	mov	r0, r3
 8118d86:	3728      	adds	r7, #40	@ 0x28
 8118d88:	46bd      	mov	sp, r7
 8118d8a:	bd80      	pop	{r7, pc}
 8118d8c:	08125918 	.word	0x08125918
 8118d90:	08125988 	.word	0x08125988
 8118d94:	081259b8 	.word	0x081259b8
 8118d98:	081259e0 	.word	0x081259e0
 8118d9c:	08125a14 	.word	0x08125a14
 8118da0:	08125a40 	.word	0x08125a40

08118da4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8118da4:	b580      	push	{r7, lr}
 8118da6:	b086      	sub	sp, #24
 8118da8:	af02      	add	r7, sp, #8
 8118daa:	6078      	str	r0, [r7, #4]
 8118dac:	460b      	mov	r3, r1
 8118dae:	807b      	strh	r3, [r7, #2]
 8118db0:	4613      	mov	r3, r2
 8118db2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8118db4:	883b      	ldrh	r3, [r7, #0]
 8118db6:	2b41      	cmp	r3, #65	@ 0x41
 8118db8:	d009      	beq.n	8118dce <pbuf_alloc_reference+0x2a>
 8118dba:	883b      	ldrh	r3, [r7, #0]
 8118dbc:	2b01      	cmp	r3, #1
 8118dbe:	d006      	beq.n	8118dce <pbuf_alloc_reference+0x2a>
 8118dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8118e00 <pbuf_alloc_reference+0x5c>)
 8118dc2:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8118dc6:	490f      	ldr	r1, [pc, #60]	@ (8118e04 <pbuf_alloc_reference+0x60>)
 8118dc8:	480f      	ldr	r0, [pc, #60]	@ (8118e08 <pbuf_alloc_reference+0x64>)
 8118dca:	f009 fa4b 	bl	8122264 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8118dce:	200b      	movs	r0, #11
 8118dd0:	f7ff f99c 	bl	811810c <memp_malloc>
 8118dd4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8118dd6:	68fb      	ldr	r3, [r7, #12]
 8118dd8:	2b00      	cmp	r3, #0
 8118dda:	d101      	bne.n	8118de0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8118ddc:	2300      	movs	r3, #0
 8118dde:	e00b      	b.n	8118df8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8118de0:	8879      	ldrh	r1, [r7, #2]
 8118de2:	887a      	ldrh	r2, [r7, #2]
 8118de4:	2300      	movs	r3, #0
 8118de6:	9301      	str	r3, [sp, #4]
 8118de8:	883b      	ldrh	r3, [r7, #0]
 8118dea:	9300      	str	r3, [sp, #0]
 8118dec:	460b      	mov	r3, r1
 8118dee:	6879      	ldr	r1, [r7, #4]
 8118df0:	68f8      	ldr	r0, [r7, #12]
 8118df2:	f7ff feb5 	bl	8118b60 <pbuf_init_alloced_pbuf>
  return p;
 8118df6:	68fb      	ldr	r3, [r7, #12]
}
 8118df8:	4618      	mov	r0, r3
 8118dfa:	3710      	adds	r7, #16
 8118dfc:	46bd      	mov	sp, r7
 8118dfe:	bd80      	pop	{r7, pc}
 8118e00:	08125918 	.word	0x08125918
 8118e04:	08125a5c 	.word	0x08125a5c
 8118e08:	081259b8 	.word	0x081259b8

08118e0c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8118e0c:	b580      	push	{r7, lr}
 8118e0e:	b088      	sub	sp, #32
 8118e10:	af02      	add	r7, sp, #8
 8118e12:	607b      	str	r3, [r7, #4]
 8118e14:	4603      	mov	r3, r0
 8118e16:	73fb      	strb	r3, [r7, #15]
 8118e18:	460b      	mov	r3, r1
 8118e1a:	81bb      	strh	r3, [r7, #12]
 8118e1c:	4613      	mov	r3, r2
 8118e1e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8118e20:	7bfb      	ldrb	r3, [r7, #15]
 8118e22:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8118e24:	8a7b      	ldrh	r3, [r7, #18]
 8118e26:	3303      	adds	r3, #3
 8118e28:	f023 0203 	bic.w	r2, r3, #3
 8118e2c:	89bb      	ldrh	r3, [r7, #12]
 8118e2e:	441a      	add	r2, r3
 8118e30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8118e32:	429a      	cmp	r2, r3
 8118e34:	d901      	bls.n	8118e3a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8118e36:	2300      	movs	r3, #0
 8118e38:	e018      	b.n	8118e6c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8118e3a:	6a3b      	ldr	r3, [r7, #32]
 8118e3c:	2b00      	cmp	r3, #0
 8118e3e:	d007      	beq.n	8118e50 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8118e40:	8a7b      	ldrh	r3, [r7, #18]
 8118e42:	3303      	adds	r3, #3
 8118e44:	f023 0303 	bic.w	r3, r3, #3
 8118e48:	6a3a      	ldr	r2, [r7, #32]
 8118e4a:	4413      	add	r3, r2
 8118e4c:	617b      	str	r3, [r7, #20]
 8118e4e:	e001      	b.n	8118e54 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8118e50:	2300      	movs	r3, #0
 8118e52:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8118e54:	6878      	ldr	r0, [r7, #4]
 8118e56:	89b9      	ldrh	r1, [r7, #12]
 8118e58:	89ba      	ldrh	r2, [r7, #12]
 8118e5a:	2302      	movs	r3, #2
 8118e5c:	9301      	str	r3, [sp, #4]
 8118e5e:	897b      	ldrh	r3, [r7, #10]
 8118e60:	9300      	str	r3, [sp, #0]
 8118e62:	460b      	mov	r3, r1
 8118e64:	6979      	ldr	r1, [r7, #20]
 8118e66:	f7ff fe7b 	bl	8118b60 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8118e6a:	687b      	ldr	r3, [r7, #4]
}
 8118e6c:	4618      	mov	r0, r3
 8118e6e:	3718      	adds	r7, #24
 8118e70:	46bd      	mov	sp, r7
 8118e72:	bd80      	pop	{r7, pc}

08118e74 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8118e74:	b580      	push	{r7, lr}
 8118e76:	b084      	sub	sp, #16
 8118e78:	af00      	add	r7, sp, #0
 8118e7a:	6078      	str	r0, [r7, #4]
 8118e7c:	460b      	mov	r3, r1
 8118e7e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8118e80:	687b      	ldr	r3, [r7, #4]
 8118e82:	2b00      	cmp	r3, #0
 8118e84:	d106      	bne.n	8118e94 <pbuf_realloc+0x20>
 8118e86:	4b39      	ldr	r3, [pc, #228]	@ (8118f6c <pbuf_realloc+0xf8>)
 8118e88:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8118e8c:	4938      	ldr	r1, [pc, #224]	@ (8118f70 <pbuf_realloc+0xfc>)
 8118e8e:	4839      	ldr	r0, [pc, #228]	@ (8118f74 <pbuf_realloc+0x100>)
 8118e90:	f009 f9e8 	bl	8122264 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8118e94:	687b      	ldr	r3, [r7, #4]
 8118e96:	891b      	ldrh	r3, [r3, #8]
 8118e98:	887a      	ldrh	r2, [r7, #2]
 8118e9a:	429a      	cmp	r2, r3
 8118e9c:	d261      	bcs.n	8118f62 <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8118e9e:	687b      	ldr	r3, [r7, #4]
 8118ea0:	891a      	ldrh	r2, [r3, #8]
 8118ea2:	887b      	ldrh	r3, [r7, #2]
 8118ea4:	1ad3      	subs	r3, r2, r3
 8118ea6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8118ea8:	887b      	ldrh	r3, [r7, #2]
 8118eaa:	817b      	strh	r3, [r7, #10]
  q = p;
 8118eac:	687b      	ldr	r3, [r7, #4]
 8118eae:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8118eb0:	e018      	b.n	8118ee4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8118eb2:	68fb      	ldr	r3, [r7, #12]
 8118eb4:	895b      	ldrh	r3, [r3, #10]
 8118eb6:	897a      	ldrh	r2, [r7, #10]
 8118eb8:	1ad3      	subs	r3, r2, r3
 8118eba:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8118ebc:	68fb      	ldr	r3, [r7, #12]
 8118ebe:	891a      	ldrh	r2, [r3, #8]
 8118ec0:	893b      	ldrh	r3, [r7, #8]
 8118ec2:	1ad3      	subs	r3, r2, r3
 8118ec4:	b29a      	uxth	r2, r3
 8118ec6:	68fb      	ldr	r3, [r7, #12]
 8118ec8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8118eca:	68fb      	ldr	r3, [r7, #12]
 8118ecc:	681b      	ldr	r3, [r3, #0]
 8118ece:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8118ed0:	68fb      	ldr	r3, [r7, #12]
 8118ed2:	2b00      	cmp	r3, #0
 8118ed4:	d106      	bne.n	8118ee4 <pbuf_realloc+0x70>
 8118ed6:	4b25      	ldr	r3, [pc, #148]	@ (8118f6c <pbuf_realloc+0xf8>)
 8118ed8:	f240 12af 	movw	r2, #431	@ 0x1af
 8118edc:	4926      	ldr	r1, [pc, #152]	@ (8118f78 <pbuf_realloc+0x104>)
 8118ede:	4825      	ldr	r0, [pc, #148]	@ (8118f74 <pbuf_realloc+0x100>)
 8118ee0:	f009 f9c0 	bl	8122264 <iprintf>
  while (rem_len > q->len) {
 8118ee4:	68fb      	ldr	r3, [r7, #12]
 8118ee6:	895b      	ldrh	r3, [r3, #10]
 8118ee8:	897a      	ldrh	r2, [r7, #10]
 8118eea:	429a      	cmp	r2, r3
 8118eec:	d8e1      	bhi.n	8118eb2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8118eee:	68fb      	ldr	r3, [r7, #12]
 8118ef0:	7b1b      	ldrb	r3, [r3, #12]
 8118ef2:	f003 030f 	and.w	r3, r3, #15
 8118ef6:	2b00      	cmp	r3, #0
 8118ef8:	d11f      	bne.n	8118f3a <pbuf_realloc+0xc6>
 8118efa:	68fb      	ldr	r3, [r7, #12]
 8118efc:	895b      	ldrh	r3, [r3, #10]
 8118efe:	897a      	ldrh	r2, [r7, #10]
 8118f00:	429a      	cmp	r2, r3
 8118f02:	d01a      	beq.n	8118f3a <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8118f04:	68fb      	ldr	r3, [r7, #12]
 8118f06:	7b5b      	ldrb	r3, [r3, #13]
 8118f08:	f003 0302 	and.w	r3, r3, #2
 8118f0c:	2b00      	cmp	r3, #0
 8118f0e:	d114      	bne.n	8118f3a <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8118f10:	68fb      	ldr	r3, [r7, #12]
 8118f12:	685a      	ldr	r2, [r3, #4]
 8118f14:	68fb      	ldr	r3, [r7, #12]
 8118f16:	1ad2      	subs	r2, r2, r3
 8118f18:	897b      	ldrh	r3, [r7, #10]
 8118f1a:	4413      	add	r3, r2
 8118f1c:	4619      	mov	r1, r3
 8118f1e:	68f8      	ldr	r0, [r7, #12]
 8118f20:	f7fe fe54 	bl	8117bcc <mem_trim>
 8118f24:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8118f26:	68fb      	ldr	r3, [r7, #12]
 8118f28:	2b00      	cmp	r3, #0
 8118f2a:	d106      	bne.n	8118f3a <pbuf_realloc+0xc6>
 8118f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8118f6c <pbuf_realloc+0xf8>)
 8118f2e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8118f32:	4912      	ldr	r1, [pc, #72]	@ (8118f7c <pbuf_realloc+0x108>)
 8118f34:	480f      	ldr	r0, [pc, #60]	@ (8118f74 <pbuf_realloc+0x100>)
 8118f36:	f009 f995 	bl	8122264 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8118f3a:	68fb      	ldr	r3, [r7, #12]
 8118f3c:	897a      	ldrh	r2, [r7, #10]
 8118f3e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8118f40:	68fb      	ldr	r3, [r7, #12]
 8118f42:	895a      	ldrh	r2, [r3, #10]
 8118f44:	68fb      	ldr	r3, [r7, #12]
 8118f46:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8118f48:	68fb      	ldr	r3, [r7, #12]
 8118f4a:	681b      	ldr	r3, [r3, #0]
 8118f4c:	2b00      	cmp	r3, #0
 8118f4e:	d004      	beq.n	8118f5a <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8118f50:	68fb      	ldr	r3, [r7, #12]
 8118f52:	681b      	ldr	r3, [r3, #0]
 8118f54:	4618      	mov	r0, r3
 8118f56:	f000 f911 	bl	811917c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8118f5a:	68fb      	ldr	r3, [r7, #12]
 8118f5c:	2200      	movs	r2, #0
 8118f5e:	601a      	str	r2, [r3, #0]
 8118f60:	e000      	b.n	8118f64 <pbuf_realloc+0xf0>
    return;
 8118f62:	bf00      	nop

}
 8118f64:	3710      	adds	r7, #16
 8118f66:	46bd      	mov	sp, r7
 8118f68:	bd80      	pop	{r7, pc}
 8118f6a:	bf00      	nop
 8118f6c:	08125918 	.word	0x08125918
 8118f70:	08125a70 	.word	0x08125a70
 8118f74:	081259b8 	.word	0x081259b8
 8118f78:	08125a88 	.word	0x08125a88
 8118f7c:	08125aa0 	.word	0x08125aa0

08118f80 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8118f80:	b580      	push	{r7, lr}
 8118f82:	b086      	sub	sp, #24
 8118f84:	af00      	add	r7, sp, #0
 8118f86:	60f8      	str	r0, [r7, #12]
 8118f88:	60b9      	str	r1, [r7, #8]
 8118f8a:	4613      	mov	r3, r2
 8118f8c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8118f8e:	68fb      	ldr	r3, [r7, #12]
 8118f90:	2b00      	cmp	r3, #0
 8118f92:	d106      	bne.n	8118fa2 <pbuf_add_header_impl+0x22>
 8118f94:	4b2b      	ldr	r3, [pc, #172]	@ (8119044 <pbuf_add_header_impl+0xc4>)
 8118f96:	f240 12df 	movw	r2, #479	@ 0x1df
 8118f9a:	492b      	ldr	r1, [pc, #172]	@ (8119048 <pbuf_add_header_impl+0xc8>)
 8118f9c:	482b      	ldr	r0, [pc, #172]	@ (811904c <pbuf_add_header_impl+0xcc>)
 8118f9e:	f009 f961 	bl	8122264 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8118fa2:	68fb      	ldr	r3, [r7, #12]
 8118fa4:	2b00      	cmp	r3, #0
 8118fa6:	d003      	beq.n	8118fb0 <pbuf_add_header_impl+0x30>
 8118fa8:	68bb      	ldr	r3, [r7, #8]
 8118faa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8118fae:	d301      	bcc.n	8118fb4 <pbuf_add_header_impl+0x34>
    return 1;
 8118fb0:	2301      	movs	r3, #1
 8118fb2:	e043      	b.n	811903c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8118fb4:	68bb      	ldr	r3, [r7, #8]
 8118fb6:	2b00      	cmp	r3, #0
 8118fb8:	d101      	bne.n	8118fbe <pbuf_add_header_impl+0x3e>
    return 0;
 8118fba:	2300      	movs	r3, #0
 8118fbc:	e03e      	b.n	811903c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8118fbe:	68bb      	ldr	r3, [r7, #8]
 8118fc0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8118fc2:	68fb      	ldr	r3, [r7, #12]
 8118fc4:	891a      	ldrh	r2, [r3, #8]
 8118fc6:	8a7b      	ldrh	r3, [r7, #18]
 8118fc8:	4413      	add	r3, r2
 8118fca:	b29b      	uxth	r3, r3
 8118fcc:	8a7a      	ldrh	r2, [r7, #18]
 8118fce:	429a      	cmp	r2, r3
 8118fd0:	d901      	bls.n	8118fd6 <pbuf_add_header_impl+0x56>
    return 1;
 8118fd2:	2301      	movs	r3, #1
 8118fd4:	e032      	b.n	811903c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8118fd6:	68fb      	ldr	r3, [r7, #12]
 8118fd8:	7b1b      	ldrb	r3, [r3, #12]
 8118fda:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8118fdc:	8a3b      	ldrh	r3, [r7, #16]
 8118fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8118fe2:	2b00      	cmp	r3, #0
 8118fe4:	d00c      	beq.n	8119000 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8118fe6:	68fb      	ldr	r3, [r7, #12]
 8118fe8:	685a      	ldr	r2, [r3, #4]
 8118fea:	68bb      	ldr	r3, [r7, #8]
 8118fec:	425b      	negs	r3, r3
 8118fee:	4413      	add	r3, r2
 8118ff0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8118ff2:	68fb      	ldr	r3, [r7, #12]
 8118ff4:	3310      	adds	r3, #16
 8118ff6:	697a      	ldr	r2, [r7, #20]
 8118ff8:	429a      	cmp	r2, r3
 8118ffa:	d20d      	bcs.n	8119018 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8118ffc:	2301      	movs	r3, #1
 8118ffe:	e01d      	b.n	811903c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8119000:	79fb      	ldrb	r3, [r7, #7]
 8119002:	2b00      	cmp	r3, #0
 8119004:	d006      	beq.n	8119014 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8119006:	68fb      	ldr	r3, [r7, #12]
 8119008:	685a      	ldr	r2, [r3, #4]
 811900a:	68bb      	ldr	r3, [r7, #8]
 811900c:	425b      	negs	r3, r3
 811900e:	4413      	add	r3, r2
 8119010:	617b      	str	r3, [r7, #20]
 8119012:	e001      	b.n	8119018 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8119014:	2301      	movs	r3, #1
 8119016:	e011      	b.n	811903c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8119018:	68fb      	ldr	r3, [r7, #12]
 811901a:	697a      	ldr	r2, [r7, #20]
 811901c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 811901e:	68fb      	ldr	r3, [r7, #12]
 8119020:	895a      	ldrh	r2, [r3, #10]
 8119022:	8a7b      	ldrh	r3, [r7, #18]
 8119024:	4413      	add	r3, r2
 8119026:	b29a      	uxth	r2, r3
 8119028:	68fb      	ldr	r3, [r7, #12]
 811902a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 811902c:	68fb      	ldr	r3, [r7, #12]
 811902e:	891a      	ldrh	r2, [r3, #8]
 8119030:	8a7b      	ldrh	r3, [r7, #18]
 8119032:	4413      	add	r3, r2
 8119034:	b29a      	uxth	r2, r3
 8119036:	68fb      	ldr	r3, [r7, #12]
 8119038:	811a      	strh	r2, [r3, #8]


  return 0;
 811903a:	2300      	movs	r3, #0
}
 811903c:	4618      	mov	r0, r3
 811903e:	3718      	adds	r7, #24
 8119040:	46bd      	mov	sp, r7
 8119042:	bd80      	pop	{r7, pc}
 8119044:	08125918 	.word	0x08125918
 8119048:	08125abc 	.word	0x08125abc
 811904c:	081259b8 	.word	0x081259b8

08119050 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8119050:	b580      	push	{r7, lr}
 8119052:	b082      	sub	sp, #8
 8119054:	af00      	add	r7, sp, #0
 8119056:	6078      	str	r0, [r7, #4]
 8119058:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 811905a:	2200      	movs	r2, #0
 811905c:	6839      	ldr	r1, [r7, #0]
 811905e:	6878      	ldr	r0, [r7, #4]
 8119060:	f7ff ff8e 	bl	8118f80 <pbuf_add_header_impl>
 8119064:	4603      	mov	r3, r0
}
 8119066:	4618      	mov	r0, r3
 8119068:	3708      	adds	r7, #8
 811906a:	46bd      	mov	sp, r7
 811906c:	bd80      	pop	{r7, pc}
	...

08119070 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8119070:	b580      	push	{r7, lr}
 8119072:	b084      	sub	sp, #16
 8119074:	af00      	add	r7, sp, #0
 8119076:	6078      	str	r0, [r7, #4]
 8119078:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 811907a:	687b      	ldr	r3, [r7, #4]
 811907c:	2b00      	cmp	r3, #0
 811907e:	d106      	bne.n	811908e <pbuf_remove_header+0x1e>
 8119080:	4b20      	ldr	r3, [pc, #128]	@ (8119104 <pbuf_remove_header+0x94>)
 8119082:	f240 224b 	movw	r2, #587	@ 0x24b
 8119086:	4920      	ldr	r1, [pc, #128]	@ (8119108 <pbuf_remove_header+0x98>)
 8119088:	4820      	ldr	r0, [pc, #128]	@ (811910c <pbuf_remove_header+0x9c>)
 811908a:	f009 f8eb 	bl	8122264 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 811908e:	687b      	ldr	r3, [r7, #4]
 8119090:	2b00      	cmp	r3, #0
 8119092:	d003      	beq.n	811909c <pbuf_remove_header+0x2c>
 8119094:	683b      	ldr	r3, [r7, #0]
 8119096:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 811909a:	d301      	bcc.n	81190a0 <pbuf_remove_header+0x30>
    return 1;
 811909c:	2301      	movs	r3, #1
 811909e:	e02c      	b.n	81190fa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 81190a0:	683b      	ldr	r3, [r7, #0]
 81190a2:	2b00      	cmp	r3, #0
 81190a4:	d101      	bne.n	81190aa <pbuf_remove_header+0x3a>
    return 0;
 81190a6:	2300      	movs	r3, #0
 81190a8:	e027      	b.n	81190fa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 81190aa:	683b      	ldr	r3, [r7, #0]
 81190ac:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 81190ae:	687b      	ldr	r3, [r7, #4]
 81190b0:	895b      	ldrh	r3, [r3, #10]
 81190b2:	89fa      	ldrh	r2, [r7, #14]
 81190b4:	429a      	cmp	r2, r3
 81190b6:	d908      	bls.n	81190ca <pbuf_remove_header+0x5a>
 81190b8:	4b12      	ldr	r3, [pc, #72]	@ (8119104 <pbuf_remove_header+0x94>)
 81190ba:	f240 2255 	movw	r2, #597	@ 0x255
 81190be:	4914      	ldr	r1, [pc, #80]	@ (8119110 <pbuf_remove_header+0xa0>)
 81190c0:	4812      	ldr	r0, [pc, #72]	@ (811910c <pbuf_remove_header+0x9c>)
 81190c2:	f009 f8cf 	bl	8122264 <iprintf>
 81190c6:	2301      	movs	r3, #1
 81190c8:	e017      	b.n	81190fa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 81190ca:	687b      	ldr	r3, [r7, #4]
 81190cc:	685b      	ldr	r3, [r3, #4]
 81190ce:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 81190d0:	687b      	ldr	r3, [r7, #4]
 81190d2:	685a      	ldr	r2, [r3, #4]
 81190d4:	683b      	ldr	r3, [r7, #0]
 81190d6:	441a      	add	r2, r3
 81190d8:	687b      	ldr	r3, [r7, #4]
 81190da:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 81190dc:	687b      	ldr	r3, [r7, #4]
 81190de:	895a      	ldrh	r2, [r3, #10]
 81190e0:	89fb      	ldrh	r3, [r7, #14]
 81190e2:	1ad3      	subs	r3, r2, r3
 81190e4:	b29a      	uxth	r2, r3
 81190e6:	687b      	ldr	r3, [r7, #4]
 81190e8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 81190ea:	687b      	ldr	r3, [r7, #4]
 81190ec:	891a      	ldrh	r2, [r3, #8]
 81190ee:	89fb      	ldrh	r3, [r7, #14]
 81190f0:	1ad3      	subs	r3, r2, r3
 81190f2:	b29a      	uxth	r2, r3
 81190f4:	687b      	ldr	r3, [r7, #4]
 81190f6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 81190f8:	2300      	movs	r3, #0
}
 81190fa:	4618      	mov	r0, r3
 81190fc:	3710      	adds	r7, #16
 81190fe:	46bd      	mov	sp, r7
 8119100:	bd80      	pop	{r7, pc}
 8119102:	bf00      	nop
 8119104:	08125918 	.word	0x08125918
 8119108:	08125abc 	.word	0x08125abc
 811910c:	081259b8 	.word	0x081259b8
 8119110:	08125ac8 	.word	0x08125ac8

08119114 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8119114:	b580      	push	{r7, lr}
 8119116:	b082      	sub	sp, #8
 8119118:	af00      	add	r7, sp, #0
 811911a:	6078      	str	r0, [r7, #4]
 811911c:	460b      	mov	r3, r1
 811911e:	807b      	strh	r3, [r7, #2]
 8119120:	4613      	mov	r3, r2
 8119122:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8119124:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8119128:	2b00      	cmp	r3, #0
 811912a:	da08      	bge.n	811913e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 811912c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8119130:	425b      	negs	r3, r3
 8119132:	4619      	mov	r1, r3
 8119134:	6878      	ldr	r0, [r7, #4]
 8119136:	f7ff ff9b 	bl	8119070 <pbuf_remove_header>
 811913a:	4603      	mov	r3, r0
 811913c:	e007      	b.n	811914e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 811913e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8119142:	787a      	ldrb	r2, [r7, #1]
 8119144:	4619      	mov	r1, r3
 8119146:	6878      	ldr	r0, [r7, #4]
 8119148:	f7ff ff1a 	bl	8118f80 <pbuf_add_header_impl>
 811914c:	4603      	mov	r3, r0
  }
}
 811914e:	4618      	mov	r0, r3
 8119150:	3708      	adds	r7, #8
 8119152:	46bd      	mov	sp, r7
 8119154:	bd80      	pop	{r7, pc}

08119156 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8119156:	b580      	push	{r7, lr}
 8119158:	b082      	sub	sp, #8
 811915a:	af00      	add	r7, sp, #0
 811915c:	6078      	str	r0, [r7, #4]
 811915e:	460b      	mov	r3, r1
 8119160:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8119162:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8119166:	2201      	movs	r2, #1
 8119168:	4619      	mov	r1, r3
 811916a:	6878      	ldr	r0, [r7, #4]
 811916c:	f7ff ffd2 	bl	8119114 <pbuf_header_impl>
 8119170:	4603      	mov	r3, r0
}
 8119172:	4618      	mov	r0, r3
 8119174:	3708      	adds	r7, #8
 8119176:	46bd      	mov	sp, r7
 8119178:	bd80      	pop	{r7, pc}
	...

0811917c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 811917c:	b580      	push	{r7, lr}
 811917e:	b088      	sub	sp, #32
 8119180:	af00      	add	r7, sp, #0
 8119182:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8119184:	687b      	ldr	r3, [r7, #4]
 8119186:	2b00      	cmp	r3, #0
 8119188:	d10b      	bne.n	81191a2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 811918a:	687b      	ldr	r3, [r7, #4]
 811918c:	2b00      	cmp	r3, #0
 811918e:	d106      	bne.n	811919e <pbuf_free+0x22>
 8119190:	4b3b      	ldr	r3, [pc, #236]	@ (8119280 <pbuf_free+0x104>)
 8119192:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8119196:	493b      	ldr	r1, [pc, #236]	@ (8119284 <pbuf_free+0x108>)
 8119198:	483b      	ldr	r0, [pc, #236]	@ (8119288 <pbuf_free+0x10c>)
 811919a:	f009 f863 	bl	8122264 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 811919e:	2300      	movs	r3, #0
 81191a0:	e069      	b.n	8119276 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 81191a2:	2300      	movs	r3, #0
 81191a4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 81191a6:	e062      	b.n	811926e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 81191a8:	f000 fb66 	bl	8119878 <sys_arch_protect>
 81191ac:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 81191ae:	687b      	ldr	r3, [r7, #4]
 81191b0:	7b9b      	ldrb	r3, [r3, #14]
 81191b2:	2b00      	cmp	r3, #0
 81191b4:	d106      	bne.n	81191c4 <pbuf_free+0x48>
 81191b6:	4b32      	ldr	r3, [pc, #200]	@ (8119280 <pbuf_free+0x104>)
 81191b8:	f240 22f1 	movw	r2, #753	@ 0x2f1
 81191bc:	4933      	ldr	r1, [pc, #204]	@ (811928c <pbuf_free+0x110>)
 81191be:	4832      	ldr	r0, [pc, #200]	@ (8119288 <pbuf_free+0x10c>)
 81191c0:	f009 f850 	bl	8122264 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 81191c4:	687b      	ldr	r3, [r7, #4]
 81191c6:	7b9b      	ldrb	r3, [r3, #14]
 81191c8:	3b01      	subs	r3, #1
 81191ca:	b2da      	uxtb	r2, r3
 81191cc:	687b      	ldr	r3, [r7, #4]
 81191ce:	739a      	strb	r2, [r3, #14]
 81191d0:	687b      	ldr	r3, [r7, #4]
 81191d2:	7b9b      	ldrb	r3, [r3, #14]
 81191d4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 81191d6:	69b8      	ldr	r0, [r7, #24]
 81191d8:	f000 fb5c 	bl	8119894 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 81191dc:	7dfb      	ldrb	r3, [r7, #23]
 81191de:	2b00      	cmp	r3, #0
 81191e0:	d143      	bne.n	811926a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 81191e2:	687b      	ldr	r3, [r7, #4]
 81191e4:	681b      	ldr	r3, [r3, #0]
 81191e6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 81191e8:	687b      	ldr	r3, [r7, #4]
 81191ea:	7b1b      	ldrb	r3, [r3, #12]
 81191ec:	f003 030f 	and.w	r3, r3, #15
 81191f0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 81191f2:	687b      	ldr	r3, [r7, #4]
 81191f4:	7b5b      	ldrb	r3, [r3, #13]
 81191f6:	f003 0302 	and.w	r3, r3, #2
 81191fa:	2b00      	cmp	r3, #0
 81191fc:	d011      	beq.n	8119222 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 81191fe:	687b      	ldr	r3, [r7, #4]
 8119200:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8119202:	68bb      	ldr	r3, [r7, #8]
 8119204:	691b      	ldr	r3, [r3, #16]
 8119206:	2b00      	cmp	r3, #0
 8119208:	d106      	bne.n	8119218 <pbuf_free+0x9c>
 811920a:	4b1d      	ldr	r3, [pc, #116]	@ (8119280 <pbuf_free+0x104>)
 811920c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8119210:	491f      	ldr	r1, [pc, #124]	@ (8119290 <pbuf_free+0x114>)
 8119212:	481d      	ldr	r0, [pc, #116]	@ (8119288 <pbuf_free+0x10c>)
 8119214:	f009 f826 	bl	8122264 <iprintf>
        pc->custom_free_function(p);
 8119218:	68bb      	ldr	r3, [r7, #8]
 811921a:	691b      	ldr	r3, [r3, #16]
 811921c:	6878      	ldr	r0, [r7, #4]
 811921e:	4798      	blx	r3
 8119220:	e01d      	b.n	811925e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8119222:	7bfb      	ldrb	r3, [r7, #15]
 8119224:	2b02      	cmp	r3, #2
 8119226:	d104      	bne.n	8119232 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8119228:	6879      	ldr	r1, [r7, #4]
 811922a:	200c      	movs	r0, #12
 811922c:	f7fe ffe4 	bl	81181f8 <memp_free>
 8119230:	e015      	b.n	811925e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8119232:	7bfb      	ldrb	r3, [r7, #15]
 8119234:	2b01      	cmp	r3, #1
 8119236:	d104      	bne.n	8119242 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8119238:	6879      	ldr	r1, [r7, #4]
 811923a:	200b      	movs	r0, #11
 811923c:	f7fe ffdc 	bl	81181f8 <memp_free>
 8119240:	e00d      	b.n	811925e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8119242:	7bfb      	ldrb	r3, [r7, #15]
 8119244:	2b00      	cmp	r3, #0
 8119246:	d103      	bne.n	8119250 <pbuf_free+0xd4>
          mem_free(p);
 8119248:	6878      	ldr	r0, [r7, #4]
 811924a:	f7fe fc2f 	bl	8117aac <mem_free>
 811924e:	e006      	b.n	811925e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8119250:	4b0b      	ldr	r3, [pc, #44]	@ (8119280 <pbuf_free+0x104>)
 8119252:	f240 320f 	movw	r2, #783	@ 0x30f
 8119256:	490f      	ldr	r1, [pc, #60]	@ (8119294 <pbuf_free+0x118>)
 8119258:	480b      	ldr	r0, [pc, #44]	@ (8119288 <pbuf_free+0x10c>)
 811925a:	f009 f803 	bl	8122264 <iprintf>
        }
      }
      count++;
 811925e:	7ffb      	ldrb	r3, [r7, #31]
 8119260:	3301      	adds	r3, #1
 8119262:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8119264:	693b      	ldr	r3, [r7, #16]
 8119266:	607b      	str	r3, [r7, #4]
 8119268:	e001      	b.n	811926e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 811926a:	2300      	movs	r3, #0
 811926c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 811926e:	687b      	ldr	r3, [r7, #4]
 8119270:	2b00      	cmp	r3, #0
 8119272:	d199      	bne.n	81191a8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8119274:	7ffb      	ldrb	r3, [r7, #31]
}
 8119276:	4618      	mov	r0, r3
 8119278:	3720      	adds	r7, #32
 811927a:	46bd      	mov	sp, r7
 811927c:	bd80      	pop	{r7, pc}
 811927e:	bf00      	nop
 8119280:	08125918 	.word	0x08125918
 8119284:	08125abc 	.word	0x08125abc
 8119288:	081259b8 	.word	0x081259b8
 811928c:	08125ae8 	.word	0x08125ae8
 8119290:	08125b00 	.word	0x08125b00
 8119294:	08125b24 	.word	0x08125b24

08119298 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8119298:	b480      	push	{r7}
 811929a:	b085      	sub	sp, #20
 811929c:	af00      	add	r7, sp, #0
 811929e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 81192a0:	2300      	movs	r3, #0
 81192a2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 81192a4:	e005      	b.n	81192b2 <pbuf_clen+0x1a>
    ++len;
 81192a6:	89fb      	ldrh	r3, [r7, #14]
 81192a8:	3301      	adds	r3, #1
 81192aa:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 81192ac:	687b      	ldr	r3, [r7, #4]
 81192ae:	681b      	ldr	r3, [r3, #0]
 81192b0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 81192b2:	687b      	ldr	r3, [r7, #4]
 81192b4:	2b00      	cmp	r3, #0
 81192b6:	d1f6      	bne.n	81192a6 <pbuf_clen+0xe>
  }
  return len;
 81192b8:	89fb      	ldrh	r3, [r7, #14]
}
 81192ba:	4618      	mov	r0, r3
 81192bc:	3714      	adds	r7, #20
 81192be:	46bd      	mov	sp, r7
 81192c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81192c4:	4770      	bx	lr
	...

081192c8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 81192c8:	b580      	push	{r7, lr}
 81192ca:	b084      	sub	sp, #16
 81192cc:	af00      	add	r7, sp, #0
 81192ce:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 81192d0:	687b      	ldr	r3, [r7, #4]
 81192d2:	2b00      	cmp	r3, #0
 81192d4:	d016      	beq.n	8119304 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 81192d6:	f000 facf 	bl	8119878 <sys_arch_protect>
 81192da:	60f8      	str	r0, [r7, #12]
 81192dc:	687b      	ldr	r3, [r7, #4]
 81192de:	7b9b      	ldrb	r3, [r3, #14]
 81192e0:	3301      	adds	r3, #1
 81192e2:	b2da      	uxtb	r2, r3
 81192e4:	687b      	ldr	r3, [r7, #4]
 81192e6:	739a      	strb	r2, [r3, #14]
 81192e8:	68f8      	ldr	r0, [r7, #12]
 81192ea:	f000 fad3 	bl	8119894 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 81192ee:	687b      	ldr	r3, [r7, #4]
 81192f0:	7b9b      	ldrb	r3, [r3, #14]
 81192f2:	2b00      	cmp	r3, #0
 81192f4:	d106      	bne.n	8119304 <pbuf_ref+0x3c>
 81192f6:	4b05      	ldr	r3, [pc, #20]	@ (811930c <pbuf_ref+0x44>)
 81192f8:	f240 3242 	movw	r2, #834	@ 0x342
 81192fc:	4904      	ldr	r1, [pc, #16]	@ (8119310 <pbuf_ref+0x48>)
 81192fe:	4805      	ldr	r0, [pc, #20]	@ (8119314 <pbuf_ref+0x4c>)
 8119300:	f008 ffb0 	bl	8122264 <iprintf>
  }
}
 8119304:	bf00      	nop
 8119306:	3710      	adds	r7, #16
 8119308:	46bd      	mov	sp, r7
 811930a:	bd80      	pop	{r7, pc}
 811930c:	08125918 	.word	0x08125918
 8119310:	08125b38 	.word	0x08125b38
 8119314:	081259b8 	.word	0x081259b8

08119318 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8119318:	b580      	push	{r7, lr}
 811931a:	b084      	sub	sp, #16
 811931c:	af00      	add	r7, sp, #0
 811931e:	6078      	str	r0, [r7, #4]
 8119320:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8119322:	687b      	ldr	r3, [r7, #4]
 8119324:	2b00      	cmp	r3, #0
 8119326:	d002      	beq.n	811932e <pbuf_cat+0x16>
 8119328:	683b      	ldr	r3, [r7, #0]
 811932a:	2b00      	cmp	r3, #0
 811932c:	d107      	bne.n	811933e <pbuf_cat+0x26>
 811932e:	4b20      	ldr	r3, [pc, #128]	@ (81193b0 <pbuf_cat+0x98>)
 8119330:	f240 3259 	movw	r2, #857	@ 0x359
 8119334:	491f      	ldr	r1, [pc, #124]	@ (81193b4 <pbuf_cat+0x9c>)
 8119336:	4820      	ldr	r0, [pc, #128]	@ (81193b8 <pbuf_cat+0xa0>)
 8119338:	f008 ff94 	bl	8122264 <iprintf>
 811933c:	e034      	b.n	81193a8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 811933e:	687b      	ldr	r3, [r7, #4]
 8119340:	60fb      	str	r3, [r7, #12]
 8119342:	e00a      	b.n	811935a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8119344:	68fb      	ldr	r3, [r7, #12]
 8119346:	891a      	ldrh	r2, [r3, #8]
 8119348:	683b      	ldr	r3, [r7, #0]
 811934a:	891b      	ldrh	r3, [r3, #8]
 811934c:	4413      	add	r3, r2
 811934e:	b29a      	uxth	r2, r3
 8119350:	68fb      	ldr	r3, [r7, #12]
 8119352:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8119354:	68fb      	ldr	r3, [r7, #12]
 8119356:	681b      	ldr	r3, [r3, #0]
 8119358:	60fb      	str	r3, [r7, #12]
 811935a:	68fb      	ldr	r3, [r7, #12]
 811935c:	681b      	ldr	r3, [r3, #0]
 811935e:	2b00      	cmp	r3, #0
 8119360:	d1f0      	bne.n	8119344 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8119362:	68fb      	ldr	r3, [r7, #12]
 8119364:	891a      	ldrh	r2, [r3, #8]
 8119366:	68fb      	ldr	r3, [r7, #12]
 8119368:	895b      	ldrh	r3, [r3, #10]
 811936a:	429a      	cmp	r2, r3
 811936c:	d006      	beq.n	811937c <pbuf_cat+0x64>
 811936e:	4b10      	ldr	r3, [pc, #64]	@ (81193b0 <pbuf_cat+0x98>)
 8119370:	f240 3262 	movw	r2, #866	@ 0x362
 8119374:	4911      	ldr	r1, [pc, #68]	@ (81193bc <pbuf_cat+0xa4>)
 8119376:	4810      	ldr	r0, [pc, #64]	@ (81193b8 <pbuf_cat+0xa0>)
 8119378:	f008 ff74 	bl	8122264 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 811937c:	68fb      	ldr	r3, [r7, #12]
 811937e:	681b      	ldr	r3, [r3, #0]
 8119380:	2b00      	cmp	r3, #0
 8119382:	d006      	beq.n	8119392 <pbuf_cat+0x7a>
 8119384:	4b0a      	ldr	r3, [pc, #40]	@ (81193b0 <pbuf_cat+0x98>)
 8119386:	f240 3263 	movw	r2, #867	@ 0x363
 811938a:	490d      	ldr	r1, [pc, #52]	@ (81193c0 <pbuf_cat+0xa8>)
 811938c:	480a      	ldr	r0, [pc, #40]	@ (81193b8 <pbuf_cat+0xa0>)
 811938e:	f008 ff69 	bl	8122264 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8119392:	68fb      	ldr	r3, [r7, #12]
 8119394:	891a      	ldrh	r2, [r3, #8]
 8119396:	683b      	ldr	r3, [r7, #0]
 8119398:	891b      	ldrh	r3, [r3, #8]
 811939a:	4413      	add	r3, r2
 811939c:	b29a      	uxth	r2, r3
 811939e:	68fb      	ldr	r3, [r7, #12]
 81193a0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 81193a2:	68fb      	ldr	r3, [r7, #12]
 81193a4:	683a      	ldr	r2, [r7, #0]
 81193a6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 81193a8:	3710      	adds	r7, #16
 81193aa:	46bd      	mov	sp, r7
 81193ac:	bd80      	pop	{r7, pc}
 81193ae:	bf00      	nop
 81193b0:	08125918 	.word	0x08125918
 81193b4:	08125b4c 	.word	0x08125b4c
 81193b8:	081259b8 	.word	0x081259b8
 81193bc:	08125b84 	.word	0x08125b84
 81193c0:	08125bb4 	.word	0x08125bb4

081193c4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 81193c4:	b580      	push	{r7, lr}
 81193c6:	b082      	sub	sp, #8
 81193c8:	af00      	add	r7, sp, #0
 81193ca:	6078      	str	r0, [r7, #4]
 81193cc:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 81193ce:	6839      	ldr	r1, [r7, #0]
 81193d0:	6878      	ldr	r0, [r7, #4]
 81193d2:	f7ff ffa1 	bl	8119318 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 81193d6:	6838      	ldr	r0, [r7, #0]
 81193d8:	f7ff ff76 	bl	81192c8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 81193dc:	bf00      	nop
 81193de:	3708      	adds	r7, #8
 81193e0:	46bd      	mov	sp, r7
 81193e2:	bd80      	pop	{r7, pc}

081193e4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 81193e4:	b580      	push	{r7, lr}
 81193e6:	b086      	sub	sp, #24
 81193e8:	af00      	add	r7, sp, #0
 81193ea:	6078      	str	r0, [r7, #4]
 81193ec:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 81193ee:	2300      	movs	r3, #0
 81193f0:	617b      	str	r3, [r7, #20]
 81193f2:	2300      	movs	r3, #0
 81193f4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 81193f6:	687b      	ldr	r3, [r7, #4]
 81193f8:	2b00      	cmp	r3, #0
 81193fa:	d008      	beq.n	811940e <pbuf_copy+0x2a>
 81193fc:	683b      	ldr	r3, [r7, #0]
 81193fe:	2b00      	cmp	r3, #0
 8119400:	d005      	beq.n	811940e <pbuf_copy+0x2a>
 8119402:	687b      	ldr	r3, [r7, #4]
 8119404:	891a      	ldrh	r2, [r3, #8]
 8119406:	683b      	ldr	r3, [r7, #0]
 8119408:	891b      	ldrh	r3, [r3, #8]
 811940a:	429a      	cmp	r2, r3
 811940c:	d209      	bcs.n	8119422 <pbuf_copy+0x3e>
 811940e:	4b57      	ldr	r3, [pc, #348]	@ (811956c <pbuf_copy+0x188>)
 8119410:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8119414:	4956      	ldr	r1, [pc, #344]	@ (8119570 <pbuf_copy+0x18c>)
 8119416:	4857      	ldr	r0, [pc, #348]	@ (8119574 <pbuf_copy+0x190>)
 8119418:	f008 ff24 	bl	8122264 <iprintf>
 811941c:	f06f 030f 	mvn.w	r3, #15
 8119420:	e09f      	b.n	8119562 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8119422:	687b      	ldr	r3, [r7, #4]
 8119424:	895b      	ldrh	r3, [r3, #10]
 8119426:	461a      	mov	r2, r3
 8119428:	697b      	ldr	r3, [r7, #20]
 811942a:	1ad2      	subs	r2, r2, r3
 811942c:	683b      	ldr	r3, [r7, #0]
 811942e:	895b      	ldrh	r3, [r3, #10]
 8119430:	4619      	mov	r1, r3
 8119432:	693b      	ldr	r3, [r7, #16]
 8119434:	1acb      	subs	r3, r1, r3
 8119436:	429a      	cmp	r2, r3
 8119438:	d306      	bcc.n	8119448 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 811943a:	683b      	ldr	r3, [r7, #0]
 811943c:	895b      	ldrh	r3, [r3, #10]
 811943e:	461a      	mov	r2, r3
 8119440:	693b      	ldr	r3, [r7, #16]
 8119442:	1ad3      	subs	r3, r2, r3
 8119444:	60fb      	str	r3, [r7, #12]
 8119446:	e005      	b.n	8119454 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8119448:	687b      	ldr	r3, [r7, #4]
 811944a:	895b      	ldrh	r3, [r3, #10]
 811944c:	461a      	mov	r2, r3
 811944e:	697b      	ldr	r3, [r7, #20]
 8119450:	1ad3      	subs	r3, r2, r3
 8119452:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8119454:	687b      	ldr	r3, [r7, #4]
 8119456:	685a      	ldr	r2, [r3, #4]
 8119458:	697b      	ldr	r3, [r7, #20]
 811945a:	18d0      	adds	r0, r2, r3
 811945c:	683b      	ldr	r3, [r7, #0]
 811945e:	685a      	ldr	r2, [r3, #4]
 8119460:	693b      	ldr	r3, [r7, #16]
 8119462:	4413      	add	r3, r2
 8119464:	68fa      	ldr	r2, [r7, #12]
 8119466:	4619      	mov	r1, r3
 8119468:	f009 f9f1 	bl	812284e <memcpy>
    offset_to += len;
 811946c:	697a      	ldr	r2, [r7, #20]
 811946e:	68fb      	ldr	r3, [r7, #12]
 8119470:	4413      	add	r3, r2
 8119472:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8119474:	693a      	ldr	r2, [r7, #16]
 8119476:	68fb      	ldr	r3, [r7, #12]
 8119478:	4413      	add	r3, r2
 811947a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 811947c:	687b      	ldr	r3, [r7, #4]
 811947e:	895b      	ldrh	r3, [r3, #10]
 8119480:	461a      	mov	r2, r3
 8119482:	697b      	ldr	r3, [r7, #20]
 8119484:	4293      	cmp	r3, r2
 8119486:	d906      	bls.n	8119496 <pbuf_copy+0xb2>
 8119488:	4b38      	ldr	r3, [pc, #224]	@ (811956c <pbuf_copy+0x188>)
 811948a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 811948e:	493a      	ldr	r1, [pc, #232]	@ (8119578 <pbuf_copy+0x194>)
 8119490:	4838      	ldr	r0, [pc, #224]	@ (8119574 <pbuf_copy+0x190>)
 8119492:	f008 fee7 	bl	8122264 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8119496:	683b      	ldr	r3, [r7, #0]
 8119498:	895b      	ldrh	r3, [r3, #10]
 811949a:	461a      	mov	r2, r3
 811949c:	693b      	ldr	r3, [r7, #16]
 811949e:	4293      	cmp	r3, r2
 81194a0:	d906      	bls.n	81194b0 <pbuf_copy+0xcc>
 81194a2:	4b32      	ldr	r3, [pc, #200]	@ (811956c <pbuf_copy+0x188>)
 81194a4:	f240 32da 	movw	r2, #986	@ 0x3da
 81194a8:	4934      	ldr	r1, [pc, #208]	@ (811957c <pbuf_copy+0x198>)
 81194aa:	4832      	ldr	r0, [pc, #200]	@ (8119574 <pbuf_copy+0x190>)
 81194ac:	f008 feda 	bl	8122264 <iprintf>
    if (offset_from >= p_from->len) {
 81194b0:	683b      	ldr	r3, [r7, #0]
 81194b2:	895b      	ldrh	r3, [r3, #10]
 81194b4:	461a      	mov	r2, r3
 81194b6:	693b      	ldr	r3, [r7, #16]
 81194b8:	4293      	cmp	r3, r2
 81194ba:	d304      	bcc.n	81194c6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 81194bc:	2300      	movs	r3, #0
 81194be:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 81194c0:	683b      	ldr	r3, [r7, #0]
 81194c2:	681b      	ldr	r3, [r3, #0]
 81194c4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 81194c6:	687b      	ldr	r3, [r7, #4]
 81194c8:	895b      	ldrh	r3, [r3, #10]
 81194ca:	461a      	mov	r2, r3
 81194cc:	697b      	ldr	r3, [r7, #20]
 81194ce:	4293      	cmp	r3, r2
 81194d0:	d114      	bne.n	81194fc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 81194d2:	2300      	movs	r3, #0
 81194d4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 81194d6:	687b      	ldr	r3, [r7, #4]
 81194d8:	681b      	ldr	r3, [r3, #0]
 81194da:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 81194dc:	687b      	ldr	r3, [r7, #4]
 81194de:	2b00      	cmp	r3, #0
 81194e0:	d10c      	bne.n	81194fc <pbuf_copy+0x118>
 81194e2:	683b      	ldr	r3, [r7, #0]
 81194e4:	2b00      	cmp	r3, #0
 81194e6:	d009      	beq.n	81194fc <pbuf_copy+0x118>
 81194e8:	4b20      	ldr	r3, [pc, #128]	@ (811956c <pbuf_copy+0x188>)
 81194ea:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 81194ee:	4924      	ldr	r1, [pc, #144]	@ (8119580 <pbuf_copy+0x19c>)
 81194f0:	4820      	ldr	r0, [pc, #128]	@ (8119574 <pbuf_copy+0x190>)
 81194f2:	f008 feb7 	bl	8122264 <iprintf>
 81194f6:	f06f 030f 	mvn.w	r3, #15
 81194fa:	e032      	b.n	8119562 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 81194fc:	683b      	ldr	r3, [r7, #0]
 81194fe:	2b00      	cmp	r3, #0
 8119500:	d013      	beq.n	811952a <pbuf_copy+0x146>
 8119502:	683b      	ldr	r3, [r7, #0]
 8119504:	895a      	ldrh	r2, [r3, #10]
 8119506:	683b      	ldr	r3, [r7, #0]
 8119508:	891b      	ldrh	r3, [r3, #8]
 811950a:	429a      	cmp	r2, r3
 811950c:	d10d      	bne.n	811952a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 811950e:	683b      	ldr	r3, [r7, #0]
 8119510:	681b      	ldr	r3, [r3, #0]
 8119512:	2b00      	cmp	r3, #0
 8119514:	d009      	beq.n	811952a <pbuf_copy+0x146>
 8119516:	4b15      	ldr	r3, [pc, #84]	@ (811956c <pbuf_copy+0x188>)
 8119518:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 811951c:	4919      	ldr	r1, [pc, #100]	@ (8119584 <pbuf_copy+0x1a0>)
 811951e:	4815      	ldr	r0, [pc, #84]	@ (8119574 <pbuf_copy+0x190>)
 8119520:	f008 fea0 	bl	8122264 <iprintf>
 8119524:	f06f 0305 	mvn.w	r3, #5
 8119528:	e01b      	b.n	8119562 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 811952a:	687b      	ldr	r3, [r7, #4]
 811952c:	2b00      	cmp	r3, #0
 811952e:	d013      	beq.n	8119558 <pbuf_copy+0x174>
 8119530:	687b      	ldr	r3, [r7, #4]
 8119532:	895a      	ldrh	r2, [r3, #10]
 8119534:	687b      	ldr	r3, [r7, #4]
 8119536:	891b      	ldrh	r3, [r3, #8]
 8119538:	429a      	cmp	r2, r3
 811953a:	d10d      	bne.n	8119558 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 811953c:	687b      	ldr	r3, [r7, #4]
 811953e:	681b      	ldr	r3, [r3, #0]
 8119540:	2b00      	cmp	r3, #0
 8119542:	d009      	beq.n	8119558 <pbuf_copy+0x174>
 8119544:	4b09      	ldr	r3, [pc, #36]	@ (811956c <pbuf_copy+0x188>)
 8119546:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 811954a:	490e      	ldr	r1, [pc, #56]	@ (8119584 <pbuf_copy+0x1a0>)
 811954c:	4809      	ldr	r0, [pc, #36]	@ (8119574 <pbuf_copy+0x190>)
 811954e:	f008 fe89 	bl	8122264 <iprintf>
 8119552:	f06f 0305 	mvn.w	r3, #5
 8119556:	e004      	b.n	8119562 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8119558:	683b      	ldr	r3, [r7, #0]
 811955a:	2b00      	cmp	r3, #0
 811955c:	f47f af61 	bne.w	8119422 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8119560:	2300      	movs	r3, #0
}
 8119562:	4618      	mov	r0, r3
 8119564:	3718      	adds	r7, #24
 8119566:	46bd      	mov	sp, r7
 8119568:	bd80      	pop	{r7, pc}
 811956a:	bf00      	nop
 811956c:	08125918 	.word	0x08125918
 8119570:	08125c00 	.word	0x08125c00
 8119574:	081259b8 	.word	0x081259b8
 8119578:	08125c30 	.word	0x08125c30
 811957c:	08125c48 	.word	0x08125c48
 8119580:	08125c64 	.word	0x08125c64
 8119584:	08125c74 	.word	0x08125c74

08119588 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8119588:	b580      	push	{r7, lr}
 811958a:	b088      	sub	sp, #32
 811958c:	af00      	add	r7, sp, #0
 811958e:	60f8      	str	r0, [r7, #12]
 8119590:	60b9      	str	r1, [r7, #8]
 8119592:	4611      	mov	r1, r2
 8119594:	461a      	mov	r2, r3
 8119596:	460b      	mov	r3, r1
 8119598:	80fb      	strh	r3, [r7, #6]
 811959a:	4613      	mov	r3, r2
 811959c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 811959e:	2300      	movs	r3, #0
 81195a0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 81195a2:	2300      	movs	r3, #0
 81195a4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 81195a6:	68fb      	ldr	r3, [r7, #12]
 81195a8:	2b00      	cmp	r3, #0
 81195aa:	d108      	bne.n	81195be <pbuf_copy_partial+0x36>
 81195ac:	4b2b      	ldr	r3, [pc, #172]	@ (811965c <pbuf_copy_partial+0xd4>)
 81195ae:	f240 420a 	movw	r2, #1034	@ 0x40a
 81195b2:	492b      	ldr	r1, [pc, #172]	@ (8119660 <pbuf_copy_partial+0xd8>)
 81195b4:	482b      	ldr	r0, [pc, #172]	@ (8119664 <pbuf_copy_partial+0xdc>)
 81195b6:	f008 fe55 	bl	8122264 <iprintf>
 81195ba:	2300      	movs	r3, #0
 81195bc:	e04a      	b.n	8119654 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 81195be:	68bb      	ldr	r3, [r7, #8]
 81195c0:	2b00      	cmp	r3, #0
 81195c2:	d108      	bne.n	81195d6 <pbuf_copy_partial+0x4e>
 81195c4:	4b25      	ldr	r3, [pc, #148]	@ (811965c <pbuf_copy_partial+0xd4>)
 81195c6:	f240 420b 	movw	r2, #1035	@ 0x40b
 81195ca:	4927      	ldr	r1, [pc, #156]	@ (8119668 <pbuf_copy_partial+0xe0>)
 81195cc:	4825      	ldr	r0, [pc, #148]	@ (8119664 <pbuf_copy_partial+0xdc>)
 81195ce:	f008 fe49 	bl	8122264 <iprintf>
 81195d2:	2300      	movs	r3, #0
 81195d4:	e03e      	b.n	8119654 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 81195d6:	68fb      	ldr	r3, [r7, #12]
 81195d8:	61fb      	str	r3, [r7, #28]
 81195da:	e034      	b.n	8119646 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 81195dc:	88bb      	ldrh	r3, [r7, #4]
 81195de:	2b00      	cmp	r3, #0
 81195e0:	d00a      	beq.n	81195f8 <pbuf_copy_partial+0x70>
 81195e2:	69fb      	ldr	r3, [r7, #28]
 81195e4:	895b      	ldrh	r3, [r3, #10]
 81195e6:	88ba      	ldrh	r2, [r7, #4]
 81195e8:	429a      	cmp	r2, r3
 81195ea:	d305      	bcc.n	81195f8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 81195ec:	69fb      	ldr	r3, [r7, #28]
 81195ee:	895b      	ldrh	r3, [r3, #10]
 81195f0:	88ba      	ldrh	r2, [r7, #4]
 81195f2:	1ad3      	subs	r3, r2, r3
 81195f4:	80bb      	strh	r3, [r7, #4]
 81195f6:	e023      	b.n	8119640 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 81195f8:	69fb      	ldr	r3, [r7, #28]
 81195fa:	895a      	ldrh	r2, [r3, #10]
 81195fc:	88bb      	ldrh	r3, [r7, #4]
 81195fe:	1ad3      	subs	r3, r2, r3
 8119600:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8119602:	8b3a      	ldrh	r2, [r7, #24]
 8119604:	88fb      	ldrh	r3, [r7, #6]
 8119606:	429a      	cmp	r2, r3
 8119608:	d901      	bls.n	811960e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 811960a:	88fb      	ldrh	r3, [r7, #6]
 811960c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 811960e:	8b7b      	ldrh	r3, [r7, #26]
 8119610:	68ba      	ldr	r2, [r7, #8]
 8119612:	18d0      	adds	r0, r2, r3
 8119614:	69fb      	ldr	r3, [r7, #28]
 8119616:	685a      	ldr	r2, [r3, #4]
 8119618:	88bb      	ldrh	r3, [r7, #4]
 811961a:	4413      	add	r3, r2
 811961c:	8b3a      	ldrh	r2, [r7, #24]
 811961e:	4619      	mov	r1, r3
 8119620:	f009 f915 	bl	812284e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8119624:	8afa      	ldrh	r2, [r7, #22]
 8119626:	8b3b      	ldrh	r3, [r7, #24]
 8119628:	4413      	add	r3, r2
 811962a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 811962c:	8b7a      	ldrh	r2, [r7, #26]
 811962e:	8b3b      	ldrh	r3, [r7, #24]
 8119630:	4413      	add	r3, r2
 8119632:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8119634:	88fa      	ldrh	r2, [r7, #6]
 8119636:	8b3b      	ldrh	r3, [r7, #24]
 8119638:	1ad3      	subs	r3, r2, r3
 811963a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 811963c:	2300      	movs	r3, #0
 811963e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8119640:	69fb      	ldr	r3, [r7, #28]
 8119642:	681b      	ldr	r3, [r3, #0]
 8119644:	61fb      	str	r3, [r7, #28]
 8119646:	88fb      	ldrh	r3, [r7, #6]
 8119648:	2b00      	cmp	r3, #0
 811964a:	d002      	beq.n	8119652 <pbuf_copy_partial+0xca>
 811964c:	69fb      	ldr	r3, [r7, #28]
 811964e:	2b00      	cmp	r3, #0
 8119650:	d1c4      	bne.n	81195dc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8119652:	8afb      	ldrh	r3, [r7, #22]
}
 8119654:	4618      	mov	r0, r3
 8119656:	3720      	adds	r7, #32
 8119658:	46bd      	mov	sp, r7
 811965a:	bd80      	pop	{r7, pc}
 811965c:	08125918 	.word	0x08125918
 8119660:	08125ca0 	.word	0x08125ca0
 8119664:	081259b8 	.word	0x081259b8
 8119668:	08125cc0 	.word	0x08125cc0

0811966c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 811966c:	b580      	push	{r7, lr}
 811966e:	b084      	sub	sp, #16
 8119670:	af00      	add	r7, sp, #0
 8119672:	4603      	mov	r3, r0
 8119674:	603a      	str	r2, [r7, #0]
 8119676:	71fb      	strb	r3, [r7, #7]
 8119678:	460b      	mov	r3, r1
 811967a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 811967c:	683b      	ldr	r3, [r7, #0]
 811967e:	8919      	ldrh	r1, [r3, #8]
 8119680:	88ba      	ldrh	r2, [r7, #4]
 8119682:	79fb      	ldrb	r3, [r7, #7]
 8119684:	4618      	mov	r0, r3
 8119686:	f7ff fa95 	bl	8118bb4 <pbuf_alloc>
 811968a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 811968c:	68fb      	ldr	r3, [r7, #12]
 811968e:	2b00      	cmp	r3, #0
 8119690:	d101      	bne.n	8119696 <pbuf_clone+0x2a>
    return NULL;
 8119692:	2300      	movs	r3, #0
 8119694:	e011      	b.n	81196ba <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8119696:	6839      	ldr	r1, [r7, #0]
 8119698:	68f8      	ldr	r0, [r7, #12]
 811969a:	f7ff fea3 	bl	81193e4 <pbuf_copy>
 811969e:	4603      	mov	r3, r0
 81196a0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 81196a2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 81196a6:	2b00      	cmp	r3, #0
 81196a8:	d006      	beq.n	81196b8 <pbuf_clone+0x4c>
 81196aa:	4b06      	ldr	r3, [pc, #24]	@ (81196c4 <pbuf_clone+0x58>)
 81196ac:	f240 5224 	movw	r2, #1316	@ 0x524
 81196b0:	4905      	ldr	r1, [pc, #20]	@ (81196c8 <pbuf_clone+0x5c>)
 81196b2:	4806      	ldr	r0, [pc, #24]	@ (81196cc <pbuf_clone+0x60>)
 81196b4:	f008 fdd6 	bl	8122264 <iprintf>
  return q;
 81196b8:	68fb      	ldr	r3, [r7, #12]
}
 81196ba:	4618      	mov	r0, r3
 81196bc:	3710      	adds	r7, #16
 81196be:	46bd      	mov	sp, r7
 81196c0:	bd80      	pop	{r7, pc}
 81196c2:	bf00      	nop
 81196c4:	08125918 	.word	0x08125918
 81196c8:	08125dcc 	.word	0x08125dcc
 81196cc:	081259b8 	.word	0x081259b8

081196d0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 81196d0:	b580      	push	{r7, lr}
 81196d2:	b082      	sub	sp, #8
 81196d4:	af00      	add	r7, sp, #0
 81196d6:	6078      	str	r0, [r7, #4]
 81196d8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 81196da:	683b      	ldr	r3, [r7, #0]
 81196dc:	2200      	movs	r2, #0
 81196de:	2104      	movs	r1, #4
 81196e0:	4618      	mov	r0, r3
 81196e2:	f7f6 fcf5 	bl	81100d0 <osMessageQueueNew>
 81196e6:	4602      	mov	r2, r0
 81196e8:	687b      	ldr	r3, [r7, #4]
 81196ea:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 81196ec:	687b      	ldr	r3, [r7, #4]
 81196ee:	681b      	ldr	r3, [r3, #0]
 81196f0:	2b00      	cmp	r3, #0
 81196f2:	d102      	bne.n	81196fa <sys_mbox_new+0x2a>
    return ERR_MEM;
 81196f4:	f04f 33ff 	mov.w	r3, #4294967295
 81196f8:	e000      	b.n	81196fc <sys_mbox_new+0x2c>

  return ERR_OK;
 81196fa:	2300      	movs	r3, #0
}
 81196fc:	4618      	mov	r0, r3
 81196fe:	3708      	adds	r7, #8
 8119700:	46bd      	mov	sp, r7
 8119702:	bd80      	pop	{r7, pc}

08119704 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8119704:	b580      	push	{r7, lr}
 8119706:	b084      	sub	sp, #16
 8119708:	af00      	add	r7, sp, #0
 811970a:	6078      	str	r0, [r7, #4]
 811970c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 811970e:	687b      	ldr	r3, [r7, #4]
 8119710:	6818      	ldr	r0, [r3, #0]
 8119712:	4639      	mov	r1, r7
 8119714:	2300      	movs	r3, #0
 8119716:	2200      	movs	r2, #0
 8119718:	f7f6 fd4e 	bl	81101b8 <osMessageQueuePut>
 811971c:	4603      	mov	r3, r0
 811971e:	2b00      	cmp	r3, #0
 8119720:	d102      	bne.n	8119728 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8119722:	2300      	movs	r3, #0
 8119724:	73fb      	strb	r3, [r7, #15]
 8119726:	e001      	b.n	811972c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8119728:	23ff      	movs	r3, #255	@ 0xff
 811972a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 811972c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8119730:	4618      	mov	r0, r3
 8119732:	3710      	adds	r7, #16
 8119734:	46bd      	mov	sp, r7
 8119736:	bd80      	pop	{r7, pc}

08119738 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8119738:	b580      	push	{r7, lr}
 811973a:	b086      	sub	sp, #24
 811973c:	af00      	add	r7, sp, #0
 811973e:	60f8      	str	r0, [r7, #12]
 8119740:	60b9      	str	r1, [r7, #8]
 8119742:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8119744:	f7f6 f9d4 	bl	810faf0 <osKernelGetTickCount>
 8119748:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 811974a:	687b      	ldr	r3, [r7, #4]
 811974c:	2b00      	cmp	r3, #0
 811974e:	d013      	beq.n	8119778 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8119750:	68fb      	ldr	r3, [r7, #12]
 8119752:	6818      	ldr	r0, [r3, #0]
 8119754:	687b      	ldr	r3, [r7, #4]
 8119756:	2200      	movs	r2, #0
 8119758:	68b9      	ldr	r1, [r7, #8]
 811975a:	f7f6 fd8d 	bl	8110278 <osMessageQueueGet>
 811975e:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8119760:	693b      	ldr	r3, [r7, #16]
 8119762:	2b00      	cmp	r3, #0
 8119764:	d105      	bne.n	8119772 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8119766:	f7f6 f9c3 	bl	810faf0 <osKernelGetTickCount>
 811976a:	4602      	mov	r2, r0
 811976c:	697b      	ldr	r3, [r7, #20]
 811976e:	1ad3      	subs	r3, r2, r3
 8119770:	e00f      	b.n	8119792 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8119772:	f04f 33ff 	mov.w	r3, #4294967295
 8119776:	e00c      	b.n	8119792 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8119778:	68fb      	ldr	r3, [r7, #12]
 811977a:	6818      	ldr	r0, [r3, #0]
 811977c:	f04f 33ff 	mov.w	r3, #4294967295
 8119780:	2200      	movs	r2, #0
 8119782:	68b9      	ldr	r1, [r7, #8]
 8119784:	f7f6 fd78 	bl	8110278 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8119788:	f7f6 f9b2 	bl	810faf0 <osKernelGetTickCount>
 811978c:	4602      	mov	r2, r0
 811978e:	697b      	ldr	r3, [r7, #20]
 8119790:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8119792:	4618      	mov	r0, r3
 8119794:	3718      	adds	r7, #24
 8119796:	46bd      	mov	sp, r7
 8119798:	bd80      	pop	{r7, pc}

0811979a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 811979a:	b480      	push	{r7}
 811979c:	b083      	sub	sp, #12
 811979e:	af00      	add	r7, sp, #0
 81197a0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 81197a2:	687b      	ldr	r3, [r7, #4]
 81197a4:	681b      	ldr	r3, [r3, #0]
 81197a6:	2b00      	cmp	r3, #0
 81197a8:	d101      	bne.n	81197ae <sys_mbox_valid+0x14>
    return 0;
 81197aa:	2300      	movs	r3, #0
 81197ac:	e000      	b.n	81197b0 <sys_mbox_valid+0x16>
  else
    return 1;
 81197ae:	2301      	movs	r3, #1
}
 81197b0:	4618      	mov	r0, r3
 81197b2:	370c      	adds	r7, #12
 81197b4:	46bd      	mov	sp, r7
 81197b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81197ba:	4770      	bx	lr

081197bc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 81197bc:	b580      	push	{r7, lr}
 81197be:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 81197c0:	2000      	movs	r0, #0
 81197c2:	f7f6 fa57 	bl	810fc74 <osMutexNew>
 81197c6:	4603      	mov	r3, r0
 81197c8:	4a01      	ldr	r2, [pc, #4]	@ (81197d0 <sys_init+0x14>)
 81197ca:	6013      	str	r3, [r2, #0]
#endif
}
 81197cc:	bf00      	nop
 81197ce:	bd80      	pop	{r7, pc}
 81197d0:	10011e54 	.word	0x10011e54

081197d4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 81197d4:	b580      	push	{r7, lr}
 81197d6:	b082      	sub	sp, #8
 81197d8:	af00      	add	r7, sp, #0
 81197da:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 81197dc:	2000      	movs	r0, #0
 81197de:	f7f6 fa49 	bl	810fc74 <osMutexNew>
 81197e2:	4602      	mov	r2, r0
 81197e4:	687b      	ldr	r3, [r7, #4]
 81197e6:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 81197e8:	687b      	ldr	r3, [r7, #4]
 81197ea:	681b      	ldr	r3, [r3, #0]
 81197ec:	2b00      	cmp	r3, #0
 81197ee:	d102      	bne.n	81197f6 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 81197f0:	f04f 33ff 	mov.w	r3, #4294967295
 81197f4:	e000      	b.n	81197f8 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 81197f6:	2300      	movs	r3, #0
}
 81197f8:	4618      	mov	r0, r3
 81197fa:	3708      	adds	r7, #8
 81197fc:	46bd      	mov	sp, r7
 81197fe:	bd80      	pop	{r7, pc}

08119800 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8119800:	b580      	push	{r7, lr}
 8119802:	b082      	sub	sp, #8
 8119804:	af00      	add	r7, sp, #0
 8119806:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8119808:	687b      	ldr	r3, [r7, #4]
 811980a:	681b      	ldr	r3, [r3, #0]
 811980c:	f04f 31ff 	mov.w	r1, #4294967295
 8119810:	4618      	mov	r0, r3
 8119812:	f7f6 fab5 	bl	810fd80 <osMutexAcquire>
#endif
}
 8119816:	bf00      	nop
 8119818:	3708      	adds	r7, #8
 811981a:	46bd      	mov	sp, r7
 811981c:	bd80      	pop	{r7, pc}

0811981e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 811981e:	b580      	push	{r7, lr}
 8119820:	b082      	sub	sp, #8
 8119822:	af00      	add	r7, sp, #0
 8119824:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8119826:	687b      	ldr	r3, [r7, #4]
 8119828:	681b      	ldr	r3, [r3, #0]
 811982a:	4618      	mov	r0, r3
 811982c:	f7f6 faf3 	bl	810fe16 <osMutexRelease>
}
 8119830:	bf00      	nop
 8119832:	3708      	adds	r7, #8
 8119834:	46bd      	mov	sp, r7
 8119836:	bd80      	pop	{r7, pc}

08119838 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8119838:	b580      	push	{r7, lr}
 811983a:	b08e      	sub	sp, #56	@ 0x38
 811983c:	af00      	add	r7, sp, #0
 811983e:	60f8      	str	r0, [r7, #12]
 8119840:	60b9      	str	r1, [r7, #8]
 8119842:	607a      	str	r2, [r7, #4]
 8119844:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8119846:	f107 0314 	add.w	r3, r7, #20
 811984a:	2224      	movs	r2, #36	@ 0x24
 811984c:	2100      	movs	r1, #0
 811984e:	4618      	mov	r0, r3
 8119850:	f008 feae 	bl	81225b0 <memset>
 8119854:	68fb      	ldr	r3, [r7, #12]
 8119856:	617b      	str	r3, [r7, #20]
 8119858:	683b      	ldr	r3, [r7, #0]
 811985a:	62bb      	str	r3, [r7, #40]	@ 0x28
 811985c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811985e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8119860:	f107 0314 	add.w	r3, r7, #20
 8119864:	461a      	mov	r2, r3
 8119866:	6879      	ldr	r1, [r7, #4]
 8119868:	68b8      	ldr	r0, [r7, #8]
 811986a:	f7f6 f956 	bl	810fb1a <osThreadNew>
 811986e:	4603      	mov	r3, r0
#endif
}
 8119870:	4618      	mov	r0, r3
 8119872:	3738      	adds	r7, #56	@ 0x38
 8119874:	46bd      	mov	sp, r7
 8119876:	bd80      	pop	{r7, pc}

08119878 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8119878:	b580      	push	{r7, lr}
 811987a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 811987c:	4b04      	ldr	r3, [pc, #16]	@ (8119890 <sys_arch_protect+0x18>)
 811987e:	681b      	ldr	r3, [r3, #0]
 8119880:	f04f 31ff 	mov.w	r1, #4294967295
 8119884:	4618      	mov	r0, r3
 8119886:	f7f6 fa7b 	bl	810fd80 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 811988a:	2301      	movs	r3, #1
}
 811988c:	4618      	mov	r0, r3
 811988e:	bd80      	pop	{r7, pc}
 8119890:	10011e54 	.word	0x10011e54

08119894 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8119894:	b580      	push	{r7, lr}
 8119896:	b082      	sub	sp, #8
 8119898:	af00      	add	r7, sp, #0
 811989a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 811989c:	4b04      	ldr	r3, [pc, #16]	@ (81198b0 <sys_arch_unprotect+0x1c>)
 811989e:	681b      	ldr	r3, [r3, #0]
 81198a0:	4618      	mov	r0, r3
 81198a2:	f7f6 fab8 	bl	810fe16 <osMutexRelease>
}
 81198a6:	bf00      	nop
 81198a8:	3708      	adds	r7, #8
 81198aa:	46bd      	mov	sp, r7
 81198ac:	bd80      	pop	{r7, pc}
 81198ae:	bf00      	nop
 81198b0:	10011e54 	.word	0x10011e54

081198b4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 81198b4:	b580      	push	{r7, lr}
 81198b6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 81198b8:	f007 ff64 	bl	8121784 <rand>
 81198bc:	4603      	mov	r3, r0
 81198be:	b29b      	uxth	r3, r3
 81198c0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 81198c4:	b29b      	uxth	r3, r3
 81198c6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 81198ca:	b29a      	uxth	r2, r3
 81198cc:	4b01      	ldr	r3, [pc, #4]	@ (81198d4 <tcp_init+0x20>)
 81198ce:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 81198d0:	bf00      	nop
 81198d2:	bd80      	pop	{r7, pc}
 81198d4:	10000028 	.word	0x10000028

081198d8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 81198d8:	b580      	push	{r7, lr}
 81198da:	b082      	sub	sp, #8
 81198dc:	af00      	add	r7, sp, #0
 81198de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 81198e0:	687b      	ldr	r3, [r7, #4]
 81198e2:	7d1b      	ldrb	r3, [r3, #20]
 81198e4:	2b01      	cmp	r3, #1
 81198e6:	d105      	bne.n	81198f4 <tcp_free+0x1c>
 81198e8:	4b06      	ldr	r3, [pc, #24]	@ (8119904 <tcp_free+0x2c>)
 81198ea:	22d4      	movs	r2, #212	@ 0xd4
 81198ec:	4906      	ldr	r1, [pc, #24]	@ (8119908 <tcp_free+0x30>)
 81198ee:	4807      	ldr	r0, [pc, #28]	@ (811990c <tcp_free+0x34>)
 81198f0:	f008 fcb8 	bl	8122264 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 81198f4:	6879      	ldr	r1, [r7, #4]
 81198f6:	2001      	movs	r0, #1
 81198f8:	f7fe fc7e 	bl	81181f8 <memp_free>
}
 81198fc:	bf00      	nop
 81198fe:	3708      	adds	r7, #8
 8119900:	46bd      	mov	sp, r7
 8119902:	bd80      	pop	{r7, pc}
 8119904:	08125e58 	.word	0x08125e58
 8119908:	08125ec8 	.word	0x08125ec8
 811990c:	08125edc 	.word	0x08125edc

08119910 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8119910:	b580      	push	{r7, lr}
 8119912:	b082      	sub	sp, #8
 8119914:	af00      	add	r7, sp, #0
 8119916:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8119918:	687b      	ldr	r3, [r7, #4]
 811991a:	7d1b      	ldrb	r3, [r3, #20]
 811991c:	2b01      	cmp	r3, #1
 811991e:	d105      	bne.n	811992c <tcp_free_listen+0x1c>
 8119920:	4b06      	ldr	r3, [pc, #24]	@ (811993c <tcp_free_listen+0x2c>)
 8119922:	22df      	movs	r2, #223	@ 0xdf
 8119924:	4906      	ldr	r1, [pc, #24]	@ (8119940 <tcp_free_listen+0x30>)
 8119926:	4807      	ldr	r0, [pc, #28]	@ (8119944 <tcp_free_listen+0x34>)
 8119928:	f008 fc9c 	bl	8122264 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 811992c:	6879      	ldr	r1, [r7, #4]
 811992e:	2002      	movs	r0, #2
 8119930:	f7fe fc62 	bl	81181f8 <memp_free>
}
 8119934:	bf00      	nop
 8119936:	3708      	adds	r7, #8
 8119938:	46bd      	mov	sp, r7
 811993a:	bd80      	pop	{r7, pc}
 811993c:	08125e58 	.word	0x08125e58
 8119940:	08125f04 	.word	0x08125f04
 8119944:	08125edc 	.word	0x08125edc

08119948 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8119948:	b580      	push	{r7, lr}
 811994a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 811994c:	f001 f94a 	bl	811abe4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8119950:	4b07      	ldr	r3, [pc, #28]	@ (8119970 <tcp_tmr+0x28>)
 8119952:	781b      	ldrb	r3, [r3, #0]
 8119954:	3301      	adds	r3, #1
 8119956:	b2da      	uxtb	r2, r3
 8119958:	4b05      	ldr	r3, [pc, #20]	@ (8119970 <tcp_tmr+0x28>)
 811995a:	701a      	strb	r2, [r3, #0]
 811995c:	4b04      	ldr	r3, [pc, #16]	@ (8119970 <tcp_tmr+0x28>)
 811995e:	781b      	ldrb	r3, [r3, #0]
 8119960:	f003 0301 	and.w	r3, r3, #1
 8119964:	2b00      	cmp	r3, #0
 8119966:	d001      	beq.n	811996c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8119968:	f000 fd86 	bl	811a478 <tcp_slowtmr>
  }
}
 811996c:	bf00      	nop
 811996e:	bd80      	pop	{r7, pc}
 8119970:	10011e6d 	.word	0x10011e6d

08119974 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8119974:	b580      	push	{r7, lr}
 8119976:	b084      	sub	sp, #16
 8119978:	af00      	add	r7, sp, #0
 811997a:	6078      	str	r0, [r7, #4]
 811997c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 811997e:	683b      	ldr	r3, [r7, #0]
 8119980:	2b00      	cmp	r3, #0
 8119982:	d105      	bne.n	8119990 <tcp_remove_listener+0x1c>
 8119984:	4b0d      	ldr	r3, [pc, #52]	@ (81199bc <tcp_remove_listener+0x48>)
 8119986:	22ff      	movs	r2, #255	@ 0xff
 8119988:	490d      	ldr	r1, [pc, #52]	@ (81199c0 <tcp_remove_listener+0x4c>)
 811998a:	480e      	ldr	r0, [pc, #56]	@ (81199c4 <tcp_remove_listener+0x50>)
 811998c:	f008 fc6a 	bl	8122264 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8119990:	687b      	ldr	r3, [r7, #4]
 8119992:	60fb      	str	r3, [r7, #12]
 8119994:	e00a      	b.n	81199ac <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8119996:	68fb      	ldr	r3, [r7, #12]
 8119998:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 811999a:	683a      	ldr	r2, [r7, #0]
 811999c:	429a      	cmp	r2, r3
 811999e:	d102      	bne.n	81199a6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 81199a0:	68fb      	ldr	r3, [r7, #12]
 81199a2:	2200      	movs	r2, #0
 81199a4:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 81199a6:	68fb      	ldr	r3, [r7, #12]
 81199a8:	68db      	ldr	r3, [r3, #12]
 81199aa:	60fb      	str	r3, [r7, #12]
 81199ac:	68fb      	ldr	r3, [r7, #12]
 81199ae:	2b00      	cmp	r3, #0
 81199b0:	d1f1      	bne.n	8119996 <tcp_remove_listener+0x22>
    }
  }
}
 81199b2:	bf00      	nop
 81199b4:	bf00      	nop
 81199b6:	3710      	adds	r7, #16
 81199b8:	46bd      	mov	sp, r7
 81199ba:	bd80      	pop	{r7, pc}
 81199bc:	08125e58 	.word	0x08125e58
 81199c0:	08125f20 	.word	0x08125f20
 81199c4:	08125edc 	.word	0x08125edc

081199c8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 81199c8:	b580      	push	{r7, lr}
 81199ca:	b084      	sub	sp, #16
 81199cc:	af00      	add	r7, sp, #0
 81199ce:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 81199d0:	687b      	ldr	r3, [r7, #4]
 81199d2:	2b00      	cmp	r3, #0
 81199d4:	d106      	bne.n	81199e4 <tcp_listen_closed+0x1c>
 81199d6:	4b14      	ldr	r3, [pc, #80]	@ (8119a28 <tcp_listen_closed+0x60>)
 81199d8:	f240 1211 	movw	r2, #273	@ 0x111
 81199dc:	4913      	ldr	r1, [pc, #76]	@ (8119a2c <tcp_listen_closed+0x64>)
 81199de:	4814      	ldr	r0, [pc, #80]	@ (8119a30 <tcp_listen_closed+0x68>)
 81199e0:	f008 fc40 	bl	8122264 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 81199e4:	687b      	ldr	r3, [r7, #4]
 81199e6:	7d1b      	ldrb	r3, [r3, #20]
 81199e8:	2b01      	cmp	r3, #1
 81199ea:	d006      	beq.n	81199fa <tcp_listen_closed+0x32>
 81199ec:	4b0e      	ldr	r3, [pc, #56]	@ (8119a28 <tcp_listen_closed+0x60>)
 81199ee:	f44f 7289 	mov.w	r2, #274	@ 0x112
 81199f2:	4910      	ldr	r1, [pc, #64]	@ (8119a34 <tcp_listen_closed+0x6c>)
 81199f4:	480e      	ldr	r0, [pc, #56]	@ (8119a30 <tcp_listen_closed+0x68>)
 81199f6:	f008 fc35 	bl	8122264 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 81199fa:	2301      	movs	r3, #1
 81199fc:	60fb      	str	r3, [r7, #12]
 81199fe:	e00b      	b.n	8119a18 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8119a00:	4a0d      	ldr	r2, [pc, #52]	@ (8119a38 <tcp_listen_closed+0x70>)
 8119a02:	68fb      	ldr	r3, [r7, #12]
 8119a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8119a08:	681b      	ldr	r3, [r3, #0]
 8119a0a:	6879      	ldr	r1, [r7, #4]
 8119a0c:	4618      	mov	r0, r3
 8119a0e:	f7ff ffb1 	bl	8119974 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8119a12:	68fb      	ldr	r3, [r7, #12]
 8119a14:	3301      	adds	r3, #1
 8119a16:	60fb      	str	r3, [r7, #12]
 8119a18:	68fb      	ldr	r3, [r7, #12]
 8119a1a:	2b03      	cmp	r3, #3
 8119a1c:	d9f0      	bls.n	8119a00 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8119a1e:	bf00      	nop
 8119a20:	bf00      	nop
 8119a22:	3710      	adds	r7, #16
 8119a24:	46bd      	mov	sp, r7
 8119a26:	bd80      	pop	{r7, pc}
 8119a28:	08125e58 	.word	0x08125e58
 8119a2c:	08125f48 	.word	0x08125f48
 8119a30:	08125edc 	.word	0x08125edc
 8119a34:	08125f54 	.word	0x08125f54
 8119a38:	08128b04 	.word	0x08128b04

08119a3c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8119a3c:	b5b0      	push	{r4, r5, r7, lr}
 8119a3e:	b088      	sub	sp, #32
 8119a40:	af04      	add	r7, sp, #16
 8119a42:	6078      	str	r0, [r7, #4]
 8119a44:	460b      	mov	r3, r1
 8119a46:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8119a48:	687b      	ldr	r3, [r7, #4]
 8119a4a:	2b00      	cmp	r3, #0
 8119a4c:	d106      	bne.n	8119a5c <tcp_close_shutdown+0x20>
 8119a4e:	4b63      	ldr	r3, [pc, #396]	@ (8119bdc <tcp_close_shutdown+0x1a0>)
 8119a50:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8119a54:	4962      	ldr	r1, [pc, #392]	@ (8119be0 <tcp_close_shutdown+0x1a4>)
 8119a56:	4863      	ldr	r0, [pc, #396]	@ (8119be4 <tcp_close_shutdown+0x1a8>)
 8119a58:	f008 fc04 	bl	8122264 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8119a5c:	78fb      	ldrb	r3, [r7, #3]
 8119a5e:	2b00      	cmp	r3, #0
 8119a60:	d067      	beq.n	8119b32 <tcp_close_shutdown+0xf6>
 8119a62:	687b      	ldr	r3, [r7, #4]
 8119a64:	7d1b      	ldrb	r3, [r3, #20]
 8119a66:	2b04      	cmp	r3, #4
 8119a68:	d003      	beq.n	8119a72 <tcp_close_shutdown+0x36>
 8119a6a:	687b      	ldr	r3, [r7, #4]
 8119a6c:	7d1b      	ldrb	r3, [r3, #20]
 8119a6e:	2b07      	cmp	r3, #7
 8119a70:	d15f      	bne.n	8119b32 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8119a72:	687b      	ldr	r3, [r7, #4]
 8119a74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8119a76:	2b00      	cmp	r3, #0
 8119a78:	d105      	bne.n	8119a86 <tcp_close_shutdown+0x4a>
 8119a7a:	687b      	ldr	r3, [r7, #4]
 8119a7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8119a7e:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8119a82:	4293      	cmp	r3, r2
 8119a84:	d055      	beq.n	8119b32 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8119a86:	687b      	ldr	r3, [r7, #4]
 8119a88:	8b5b      	ldrh	r3, [r3, #26]
 8119a8a:	f003 0310 	and.w	r3, r3, #16
 8119a8e:	2b00      	cmp	r3, #0
 8119a90:	d106      	bne.n	8119aa0 <tcp_close_shutdown+0x64>
 8119a92:	4b52      	ldr	r3, [pc, #328]	@ (8119bdc <tcp_close_shutdown+0x1a0>)
 8119a94:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8119a98:	4953      	ldr	r1, [pc, #332]	@ (8119be8 <tcp_close_shutdown+0x1ac>)
 8119a9a:	4852      	ldr	r0, [pc, #328]	@ (8119be4 <tcp_close_shutdown+0x1a8>)
 8119a9c:	f008 fbe2 	bl	8122264 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8119aa0:	687b      	ldr	r3, [r7, #4]
 8119aa2:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8119aa4:	687b      	ldr	r3, [r7, #4]
 8119aa6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8119aa8:	687d      	ldr	r5, [r7, #4]
 8119aaa:	687b      	ldr	r3, [r7, #4]
 8119aac:	3304      	adds	r3, #4
 8119aae:	687a      	ldr	r2, [r7, #4]
 8119ab0:	8ad2      	ldrh	r2, [r2, #22]
 8119ab2:	6879      	ldr	r1, [r7, #4]
 8119ab4:	8b09      	ldrh	r1, [r1, #24]
 8119ab6:	9102      	str	r1, [sp, #8]
 8119ab8:	9201      	str	r2, [sp, #4]
 8119aba:	9300      	str	r3, [sp, #0]
 8119abc:	462b      	mov	r3, r5
 8119abe:	4622      	mov	r2, r4
 8119ac0:	4601      	mov	r1, r0
 8119ac2:	6878      	ldr	r0, [r7, #4]
 8119ac4:	f006 f82c 	bl	811fb20 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8119ac8:	6878      	ldr	r0, [r7, #4]
 8119aca:	f001 fc37 	bl	811b33c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8119ace:	4b47      	ldr	r3, [pc, #284]	@ (8119bec <tcp_close_shutdown+0x1b0>)
 8119ad0:	681b      	ldr	r3, [r3, #0]
 8119ad2:	687a      	ldr	r2, [r7, #4]
 8119ad4:	429a      	cmp	r2, r3
 8119ad6:	d105      	bne.n	8119ae4 <tcp_close_shutdown+0xa8>
 8119ad8:	4b44      	ldr	r3, [pc, #272]	@ (8119bec <tcp_close_shutdown+0x1b0>)
 8119ada:	681b      	ldr	r3, [r3, #0]
 8119adc:	68db      	ldr	r3, [r3, #12]
 8119ade:	4a43      	ldr	r2, [pc, #268]	@ (8119bec <tcp_close_shutdown+0x1b0>)
 8119ae0:	6013      	str	r3, [r2, #0]
 8119ae2:	e013      	b.n	8119b0c <tcp_close_shutdown+0xd0>
 8119ae4:	4b41      	ldr	r3, [pc, #260]	@ (8119bec <tcp_close_shutdown+0x1b0>)
 8119ae6:	681b      	ldr	r3, [r3, #0]
 8119ae8:	60fb      	str	r3, [r7, #12]
 8119aea:	e00c      	b.n	8119b06 <tcp_close_shutdown+0xca>
 8119aec:	68fb      	ldr	r3, [r7, #12]
 8119aee:	68db      	ldr	r3, [r3, #12]
 8119af0:	687a      	ldr	r2, [r7, #4]
 8119af2:	429a      	cmp	r2, r3
 8119af4:	d104      	bne.n	8119b00 <tcp_close_shutdown+0xc4>
 8119af6:	687b      	ldr	r3, [r7, #4]
 8119af8:	68da      	ldr	r2, [r3, #12]
 8119afa:	68fb      	ldr	r3, [r7, #12]
 8119afc:	60da      	str	r2, [r3, #12]
 8119afe:	e005      	b.n	8119b0c <tcp_close_shutdown+0xd0>
 8119b00:	68fb      	ldr	r3, [r7, #12]
 8119b02:	68db      	ldr	r3, [r3, #12]
 8119b04:	60fb      	str	r3, [r7, #12]
 8119b06:	68fb      	ldr	r3, [r7, #12]
 8119b08:	2b00      	cmp	r3, #0
 8119b0a:	d1ef      	bne.n	8119aec <tcp_close_shutdown+0xb0>
 8119b0c:	687b      	ldr	r3, [r7, #4]
 8119b0e:	2200      	movs	r2, #0
 8119b10:	60da      	str	r2, [r3, #12]
 8119b12:	4b37      	ldr	r3, [pc, #220]	@ (8119bf0 <tcp_close_shutdown+0x1b4>)
 8119b14:	2201      	movs	r2, #1
 8119b16:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8119b18:	4b36      	ldr	r3, [pc, #216]	@ (8119bf4 <tcp_close_shutdown+0x1b8>)
 8119b1a:	681b      	ldr	r3, [r3, #0]
 8119b1c:	687a      	ldr	r2, [r7, #4]
 8119b1e:	429a      	cmp	r2, r3
 8119b20:	d102      	bne.n	8119b28 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8119b22:	f004 fa35 	bl	811df90 <tcp_trigger_input_pcb_close>
 8119b26:	e002      	b.n	8119b2e <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 8119b28:	6878      	ldr	r0, [r7, #4]
 8119b2a:	f7ff fed5 	bl	81198d8 <tcp_free>
      }
      return ERR_OK;
 8119b2e:	2300      	movs	r3, #0
 8119b30:	e050      	b.n	8119bd4 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8119b32:	687b      	ldr	r3, [r7, #4]
 8119b34:	7d1b      	ldrb	r3, [r3, #20]
 8119b36:	2b02      	cmp	r3, #2
 8119b38:	d03b      	beq.n	8119bb2 <tcp_close_shutdown+0x176>
 8119b3a:	2b02      	cmp	r3, #2
 8119b3c:	dc44      	bgt.n	8119bc8 <tcp_close_shutdown+0x18c>
 8119b3e:	2b00      	cmp	r3, #0
 8119b40:	d002      	beq.n	8119b48 <tcp_close_shutdown+0x10c>
 8119b42:	2b01      	cmp	r3, #1
 8119b44:	d02a      	beq.n	8119b9c <tcp_close_shutdown+0x160>
 8119b46:	e03f      	b.n	8119bc8 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8119b48:	687b      	ldr	r3, [r7, #4]
 8119b4a:	8adb      	ldrh	r3, [r3, #22]
 8119b4c:	2b00      	cmp	r3, #0
 8119b4e:	d021      	beq.n	8119b94 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8119b50:	4b29      	ldr	r3, [pc, #164]	@ (8119bf8 <tcp_close_shutdown+0x1bc>)
 8119b52:	681b      	ldr	r3, [r3, #0]
 8119b54:	687a      	ldr	r2, [r7, #4]
 8119b56:	429a      	cmp	r2, r3
 8119b58:	d105      	bne.n	8119b66 <tcp_close_shutdown+0x12a>
 8119b5a:	4b27      	ldr	r3, [pc, #156]	@ (8119bf8 <tcp_close_shutdown+0x1bc>)
 8119b5c:	681b      	ldr	r3, [r3, #0]
 8119b5e:	68db      	ldr	r3, [r3, #12]
 8119b60:	4a25      	ldr	r2, [pc, #148]	@ (8119bf8 <tcp_close_shutdown+0x1bc>)
 8119b62:	6013      	str	r3, [r2, #0]
 8119b64:	e013      	b.n	8119b8e <tcp_close_shutdown+0x152>
 8119b66:	4b24      	ldr	r3, [pc, #144]	@ (8119bf8 <tcp_close_shutdown+0x1bc>)
 8119b68:	681b      	ldr	r3, [r3, #0]
 8119b6a:	60bb      	str	r3, [r7, #8]
 8119b6c:	e00c      	b.n	8119b88 <tcp_close_shutdown+0x14c>
 8119b6e:	68bb      	ldr	r3, [r7, #8]
 8119b70:	68db      	ldr	r3, [r3, #12]
 8119b72:	687a      	ldr	r2, [r7, #4]
 8119b74:	429a      	cmp	r2, r3
 8119b76:	d104      	bne.n	8119b82 <tcp_close_shutdown+0x146>
 8119b78:	687b      	ldr	r3, [r7, #4]
 8119b7a:	68da      	ldr	r2, [r3, #12]
 8119b7c:	68bb      	ldr	r3, [r7, #8]
 8119b7e:	60da      	str	r2, [r3, #12]
 8119b80:	e005      	b.n	8119b8e <tcp_close_shutdown+0x152>
 8119b82:	68bb      	ldr	r3, [r7, #8]
 8119b84:	68db      	ldr	r3, [r3, #12]
 8119b86:	60bb      	str	r3, [r7, #8]
 8119b88:	68bb      	ldr	r3, [r7, #8]
 8119b8a:	2b00      	cmp	r3, #0
 8119b8c:	d1ef      	bne.n	8119b6e <tcp_close_shutdown+0x132>
 8119b8e:	687b      	ldr	r3, [r7, #4]
 8119b90:	2200      	movs	r2, #0
 8119b92:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8119b94:	6878      	ldr	r0, [r7, #4]
 8119b96:	f7ff fe9f 	bl	81198d8 <tcp_free>
      break;
 8119b9a:	e01a      	b.n	8119bd2 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 8119b9c:	6878      	ldr	r0, [r7, #4]
 8119b9e:	f7ff ff13 	bl	81199c8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8119ba2:	6879      	ldr	r1, [r7, #4]
 8119ba4:	4815      	ldr	r0, [pc, #84]	@ (8119bfc <tcp_close_shutdown+0x1c0>)
 8119ba6:	f001 fc49 	bl	811b43c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8119baa:	6878      	ldr	r0, [r7, #4]
 8119bac:	f7ff feb0 	bl	8119910 <tcp_free_listen>
      break;
 8119bb0:	e00f      	b.n	8119bd2 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8119bb2:	6879      	ldr	r1, [r7, #4]
 8119bb4:	480d      	ldr	r0, [pc, #52]	@ (8119bec <tcp_close_shutdown+0x1b0>)
 8119bb6:	f001 fc41 	bl	811b43c <tcp_pcb_remove>
 8119bba:	4b0d      	ldr	r3, [pc, #52]	@ (8119bf0 <tcp_close_shutdown+0x1b4>)
 8119bbc:	2201      	movs	r2, #1
 8119bbe:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8119bc0:	6878      	ldr	r0, [r7, #4]
 8119bc2:	f7ff fe89 	bl	81198d8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8119bc6:	e004      	b.n	8119bd2 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 8119bc8:	6878      	ldr	r0, [r7, #4]
 8119bca:	f000 f819 	bl	8119c00 <tcp_close_shutdown_fin>
 8119bce:	4603      	mov	r3, r0
 8119bd0:	e000      	b.n	8119bd4 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 8119bd2:	2300      	movs	r3, #0
}
 8119bd4:	4618      	mov	r0, r3
 8119bd6:	3710      	adds	r7, #16
 8119bd8:	46bd      	mov	sp, r7
 8119bda:	bdb0      	pop	{r4, r5, r7, pc}
 8119bdc:	08125e58 	.word	0x08125e58
 8119be0:	08125f6c 	.word	0x08125f6c
 8119be4:	08125edc 	.word	0x08125edc
 8119be8:	08125f8c 	.word	0x08125f8c
 8119bec:	10011e64 	.word	0x10011e64
 8119bf0:	10011e6c 	.word	0x10011e6c
 8119bf4:	10011ea8 	.word	0x10011ea8
 8119bf8:	10011e5c 	.word	0x10011e5c
 8119bfc:	10011e60 	.word	0x10011e60

08119c00 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8119c00:	b580      	push	{r7, lr}
 8119c02:	b084      	sub	sp, #16
 8119c04:	af00      	add	r7, sp, #0
 8119c06:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8119c08:	687b      	ldr	r3, [r7, #4]
 8119c0a:	2b00      	cmp	r3, #0
 8119c0c:	d106      	bne.n	8119c1c <tcp_close_shutdown_fin+0x1c>
 8119c0e:	4b2e      	ldr	r3, [pc, #184]	@ (8119cc8 <tcp_close_shutdown_fin+0xc8>)
 8119c10:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8119c14:	492d      	ldr	r1, [pc, #180]	@ (8119ccc <tcp_close_shutdown_fin+0xcc>)
 8119c16:	482e      	ldr	r0, [pc, #184]	@ (8119cd0 <tcp_close_shutdown_fin+0xd0>)
 8119c18:	f008 fb24 	bl	8122264 <iprintf>

  switch (pcb->state) {
 8119c1c:	687b      	ldr	r3, [r7, #4]
 8119c1e:	7d1b      	ldrb	r3, [r3, #20]
 8119c20:	2b07      	cmp	r3, #7
 8119c22:	d020      	beq.n	8119c66 <tcp_close_shutdown_fin+0x66>
 8119c24:	2b07      	cmp	r3, #7
 8119c26:	dc2b      	bgt.n	8119c80 <tcp_close_shutdown_fin+0x80>
 8119c28:	2b03      	cmp	r3, #3
 8119c2a:	d002      	beq.n	8119c32 <tcp_close_shutdown_fin+0x32>
 8119c2c:	2b04      	cmp	r3, #4
 8119c2e:	d00d      	beq.n	8119c4c <tcp_close_shutdown_fin+0x4c>
 8119c30:	e026      	b.n	8119c80 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8119c32:	6878      	ldr	r0, [r7, #4]
 8119c34:	f005 f876 	bl	811ed24 <tcp_send_fin>
 8119c38:	4603      	mov	r3, r0
 8119c3a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8119c3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8119c40:	2b00      	cmp	r3, #0
 8119c42:	d11f      	bne.n	8119c84 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8119c44:	687b      	ldr	r3, [r7, #4]
 8119c46:	2205      	movs	r2, #5
 8119c48:	751a      	strb	r2, [r3, #20]
      }
      break;
 8119c4a:	e01b      	b.n	8119c84 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8119c4c:	6878      	ldr	r0, [r7, #4]
 8119c4e:	f005 f869 	bl	811ed24 <tcp_send_fin>
 8119c52:	4603      	mov	r3, r0
 8119c54:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8119c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8119c5a:	2b00      	cmp	r3, #0
 8119c5c:	d114      	bne.n	8119c88 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8119c5e:	687b      	ldr	r3, [r7, #4]
 8119c60:	2205      	movs	r2, #5
 8119c62:	751a      	strb	r2, [r3, #20]
      }
      break;
 8119c64:	e010      	b.n	8119c88 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8119c66:	6878      	ldr	r0, [r7, #4]
 8119c68:	f005 f85c 	bl	811ed24 <tcp_send_fin>
 8119c6c:	4603      	mov	r3, r0
 8119c6e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8119c70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8119c74:	2b00      	cmp	r3, #0
 8119c76:	d109      	bne.n	8119c8c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8119c78:	687b      	ldr	r3, [r7, #4]
 8119c7a:	2209      	movs	r2, #9
 8119c7c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8119c7e:	e005      	b.n	8119c8c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8119c80:	2300      	movs	r3, #0
 8119c82:	e01c      	b.n	8119cbe <tcp_close_shutdown_fin+0xbe>
      break;
 8119c84:	bf00      	nop
 8119c86:	e002      	b.n	8119c8e <tcp_close_shutdown_fin+0x8e>
      break;
 8119c88:	bf00      	nop
 8119c8a:	e000      	b.n	8119c8e <tcp_close_shutdown_fin+0x8e>
      break;
 8119c8c:	bf00      	nop
  }

  if (err == ERR_OK) {
 8119c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8119c92:	2b00      	cmp	r3, #0
 8119c94:	d103      	bne.n	8119c9e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8119c96:	6878      	ldr	r0, [r7, #4]
 8119c98:	f005 f982 	bl	811efa0 <tcp_output>
 8119c9c:	e00d      	b.n	8119cba <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8119c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8119ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8119ca6:	d108      	bne.n	8119cba <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8119ca8:	687b      	ldr	r3, [r7, #4]
 8119caa:	8b5b      	ldrh	r3, [r3, #26]
 8119cac:	f043 0308 	orr.w	r3, r3, #8
 8119cb0:	b29a      	uxth	r2, r3
 8119cb2:	687b      	ldr	r3, [r7, #4]
 8119cb4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8119cb6:	2300      	movs	r3, #0
 8119cb8:	e001      	b.n	8119cbe <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8119cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8119cbe:	4618      	mov	r0, r3
 8119cc0:	3710      	adds	r7, #16
 8119cc2:	46bd      	mov	sp, r7
 8119cc4:	bd80      	pop	{r7, pc}
 8119cc6:	bf00      	nop
 8119cc8:	08125e58 	.word	0x08125e58
 8119ccc:	08125f48 	.word	0x08125f48
 8119cd0:	08125edc 	.word	0x08125edc

08119cd4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8119cd4:	b580      	push	{r7, lr}
 8119cd6:	b082      	sub	sp, #8
 8119cd8:	af00      	add	r7, sp, #0
 8119cda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8119cdc:	687b      	ldr	r3, [r7, #4]
 8119cde:	2b00      	cmp	r3, #0
 8119ce0:	d109      	bne.n	8119cf6 <tcp_close+0x22>
 8119ce2:	4b14      	ldr	r3, [pc, #80]	@ (8119d34 <tcp_close+0x60>)
 8119ce4:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8119ce8:	4913      	ldr	r1, [pc, #76]	@ (8119d38 <tcp_close+0x64>)
 8119cea:	4814      	ldr	r0, [pc, #80]	@ (8119d3c <tcp_close+0x68>)
 8119cec:	f008 faba 	bl	8122264 <iprintf>
 8119cf0:	f06f 030f 	mvn.w	r3, #15
 8119cf4:	e01a      	b.n	8119d2c <tcp_close+0x58>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
 8119cf6:	4812      	ldr	r0, [pc, #72]	@ (8119d40 <tcp_close+0x6c>)
 8119cf8:	f008 fab4 	bl	8122264 <iprintf>
 8119cfc:	200d      	movs	r0, #13
 8119cfe:	f008 fac3 	bl	8122288 <putchar>

  tcp_debug_print_state(pcb->state);
 8119d02:	687b      	ldr	r3, [r7, #4]
 8119d04:	7d1b      	ldrb	r3, [r3, #20]
 8119d06:	4618      	mov	r0, r3
 8119d08:	f001 fd28 	bl	811b75c <tcp_debug_print_state>

  if (pcb->state != LISTEN) {
 8119d0c:	687b      	ldr	r3, [r7, #4]
 8119d0e:	7d1b      	ldrb	r3, [r3, #20]
 8119d10:	2b01      	cmp	r3, #1
 8119d12:	d006      	beq.n	8119d22 <tcp_close+0x4e>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8119d14:	687b      	ldr	r3, [r7, #4]
 8119d16:	8b5b      	ldrh	r3, [r3, #26]
 8119d18:	f043 0310 	orr.w	r3, r3, #16
 8119d1c:	b29a      	uxth	r2, r3
 8119d1e:	687b      	ldr	r3, [r7, #4]
 8119d20:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8119d22:	2101      	movs	r1, #1
 8119d24:	6878      	ldr	r0, [r7, #4]
 8119d26:	f7ff fe89 	bl	8119a3c <tcp_close_shutdown>
 8119d2a:	4603      	mov	r3, r0
}
 8119d2c:	4618      	mov	r0, r3
 8119d2e:	3708      	adds	r7, #8
 8119d30:	46bd      	mov	sp, r7
 8119d32:	bd80      	pop	{r7, pc}
 8119d34:	08125e58 	.word	0x08125e58
 8119d38:	08125fa8 	.word	0x08125fa8
 8119d3c:	08125edc 	.word	0x08125edc
 8119d40:	08125fc0 	.word	0x08125fc0

08119d44 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8119d44:	b580      	push	{r7, lr}
 8119d46:	b08e      	sub	sp, #56	@ 0x38
 8119d48:	af04      	add	r7, sp, #16
 8119d4a:	6078      	str	r0, [r7, #4]
 8119d4c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8119d4e:	687b      	ldr	r3, [r7, #4]
 8119d50:	2b00      	cmp	r3, #0
 8119d52:	d107      	bne.n	8119d64 <tcp_abandon+0x20>
 8119d54:	4b52      	ldr	r3, [pc, #328]	@ (8119ea0 <tcp_abandon+0x15c>)
 8119d56:	f240 223d 	movw	r2, #573	@ 0x23d
 8119d5a:	4952      	ldr	r1, [pc, #328]	@ (8119ea4 <tcp_abandon+0x160>)
 8119d5c:	4852      	ldr	r0, [pc, #328]	@ (8119ea8 <tcp_abandon+0x164>)
 8119d5e:	f008 fa81 	bl	8122264 <iprintf>
 8119d62:	e099      	b.n	8119e98 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8119d64:	687b      	ldr	r3, [r7, #4]
 8119d66:	7d1b      	ldrb	r3, [r3, #20]
 8119d68:	2b01      	cmp	r3, #1
 8119d6a:	d106      	bne.n	8119d7a <tcp_abandon+0x36>
 8119d6c:	4b4c      	ldr	r3, [pc, #304]	@ (8119ea0 <tcp_abandon+0x15c>)
 8119d6e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8119d72:	494e      	ldr	r1, [pc, #312]	@ (8119eac <tcp_abandon+0x168>)
 8119d74:	484c      	ldr	r0, [pc, #304]	@ (8119ea8 <tcp_abandon+0x164>)
 8119d76:	f008 fa75 	bl	8122264 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8119d7a:	687b      	ldr	r3, [r7, #4]
 8119d7c:	7d1b      	ldrb	r3, [r3, #20]
 8119d7e:	2b0a      	cmp	r3, #10
 8119d80:	d107      	bne.n	8119d92 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8119d82:	6879      	ldr	r1, [r7, #4]
 8119d84:	484a      	ldr	r0, [pc, #296]	@ (8119eb0 <tcp_abandon+0x16c>)
 8119d86:	f001 fb59 	bl	811b43c <tcp_pcb_remove>
    tcp_free(pcb);
 8119d8a:	6878      	ldr	r0, [r7, #4]
 8119d8c:	f7ff fda4 	bl	81198d8 <tcp_free>
 8119d90:	e082      	b.n	8119e98 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8119d92:	2300      	movs	r3, #0
 8119d94:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8119d96:	2300      	movs	r3, #0
 8119d98:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8119d9a:	687b      	ldr	r3, [r7, #4]
 8119d9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8119d9e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8119da0:	687b      	ldr	r3, [r7, #4]
 8119da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8119da4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8119da6:	687b      	ldr	r3, [r7, #4]
 8119da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8119dac:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8119dae:	687b      	ldr	r3, [r7, #4]
 8119db0:	691b      	ldr	r3, [r3, #16]
 8119db2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8119db4:	687b      	ldr	r3, [r7, #4]
 8119db6:	7d1b      	ldrb	r3, [r3, #20]
 8119db8:	2b00      	cmp	r3, #0
 8119dba:	d126      	bne.n	8119e0a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8119dbc:	687b      	ldr	r3, [r7, #4]
 8119dbe:	8adb      	ldrh	r3, [r3, #22]
 8119dc0:	2b00      	cmp	r3, #0
 8119dc2:	d02e      	beq.n	8119e22 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8119dc4:	4b3b      	ldr	r3, [pc, #236]	@ (8119eb4 <tcp_abandon+0x170>)
 8119dc6:	681b      	ldr	r3, [r3, #0]
 8119dc8:	687a      	ldr	r2, [r7, #4]
 8119dca:	429a      	cmp	r2, r3
 8119dcc:	d105      	bne.n	8119dda <tcp_abandon+0x96>
 8119dce:	4b39      	ldr	r3, [pc, #228]	@ (8119eb4 <tcp_abandon+0x170>)
 8119dd0:	681b      	ldr	r3, [r3, #0]
 8119dd2:	68db      	ldr	r3, [r3, #12]
 8119dd4:	4a37      	ldr	r2, [pc, #220]	@ (8119eb4 <tcp_abandon+0x170>)
 8119dd6:	6013      	str	r3, [r2, #0]
 8119dd8:	e013      	b.n	8119e02 <tcp_abandon+0xbe>
 8119dda:	4b36      	ldr	r3, [pc, #216]	@ (8119eb4 <tcp_abandon+0x170>)
 8119ddc:	681b      	ldr	r3, [r3, #0]
 8119dde:	61fb      	str	r3, [r7, #28]
 8119de0:	e00c      	b.n	8119dfc <tcp_abandon+0xb8>
 8119de2:	69fb      	ldr	r3, [r7, #28]
 8119de4:	68db      	ldr	r3, [r3, #12]
 8119de6:	687a      	ldr	r2, [r7, #4]
 8119de8:	429a      	cmp	r2, r3
 8119dea:	d104      	bne.n	8119df6 <tcp_abandon+0xb2>
 8119dec:	687b      	ldr	r3, [r7, #4]
 8119dee:	68da      	ldr	r2, [r3, #12]
 8119df0:	69fb      	ldr	r3, [r7, #28]
 8119df2:	60da      	str	r2, [r3, #12]
 8119df4:	e005      	b.n	8119e02 <tcp_abandon+0xbe>
 8119df6:	69fb      	ldr	r3, [r7, #28]
 8119df8:	68db      	ldr	r3, [r3, #12]
 8119dfa:	61fb      	str	r3, [r7, #28]
 8119dfc:	69fb      	ldr	r3, [r7, #28]
 8119dfe:	2b00      	cmp	r3, #0
 8119e00:	d1ef      	bne.n	8119de2 <tcp_abandon+0x9e>
 8119e02:	687b      	ldr	r3, [r7, #4]
 8119e04:	2200      	movs	r2, #0
 8119e06:	60da      	str	r2, [r3, #12]
 8119e08:	e00b      	b.n	8119e22 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8119e0a:	683b      	ldr	r3, [r7, #0]
 8119e0c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8119e0e:	687b      	ldr	r3, [r7, #4]
 8119e10:	8adb      	ldrh	r3, [r3, #22]
 8119e12:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8119e14:	6879      	ldr	r1, [r7, #4]
 8119e16:	4828      	ldr	r0, [pc, #160]	@ (8119eb8 <tcp_abandon+0x174>)
 8119e18:	f001 fb10 	bl	811b43c <tcp_pcb_remove>
 8119e1c:	4b27      	ldr	r3, [pc, #156]	@ (8119ebc <tcp_abandon+0x178>)
 8119e1e:	2201      	movs	r2, #1
 8119e20:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8119e22:	687b      	ldr	r3, [r7, #4]
 8119e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8119e26:	2b00      	cmp	r3, #0
 8119e28:	d004      	beq.n	8119e34 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8119e2a:	687b      	ldr	r3, [r7, #4]
 8119e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8119e2e:	4618      	mov	r0, r3
 8119e30:	f000 ffca 	bl	811adc8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8119e34:	687b      	ldr	r3, [r7, #4]
 8119e36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8119e38:	2b00      	cmp	r3, #0
 8119e3a:	d004      	beq.n	8119e46 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8119e3c:	687b      	ldr	r3, [r7, #4]
 8119e3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8119e40:	4618      	mov	r0, r3
 8119e42:	f000 ffc1 	bl	811adc8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8119e46:	687b      	ldr	r3, [r7, #4]
 8119e48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8119e4a:	2b00      	cmp	r3, #0
 8119e4c:	d004      	beq.n	8119e58 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8119e4e:	687b      	ldr	r3, [r7, #4]
 8119e50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8119e52:	4618      	mov	r0, r3
 8119e54:	f000 ffb8 	bl	811adc8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8119e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8119e5a:	2b00      	cmp	r3, #0
 8119e5c:	d00e      	beq.n	8119e7c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8119e5e:	6879      	ldr	r1, [r7, #4]
 8119e60:	687b      	ldr	r3, [r7, #4]
 8119e62:	3304      	adds	r3, #4
 8119e64:	687a      	ldr	r2, [r7, #4]
 8119e66:	8b12      	ldrh	r2, [r2, #24]
 8119e68:	9202      	str	r2, [sp, #8]
 8119e6a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8119e6c:	9201      	str	r2, [sp, #4]
 8119e6e:	9300      	str	r3, [sp, #0]
 8119e70:	460b      	mov	r3, r1
 8119e72:	697a      	ldr	r2, [r7, #20]
 8119e74:	69b9      	ldr	r1, [r7, #24]
 8119e76:	6878      	ldr	r0, [r7, #4]
 8119e78:	f005 fe52 	bl	811fb20 <tcp_rst>
    }
    last_state = pcb->state;
 8119e7c:	687b      	ldr	r3, [r7, #4]
 8119e7e:	7d1b      	ldrb	r3, [r3, #20]
 8119e80:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8119e82:	6878      	ldr	r0, [r7, #4]
 8119e84:	f7ff fd28 	bl	81198d8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8119e88:	693b      	ldr	r3, [r7, #16]
 8119e8a:	2b00      	cmp	r3, #0
 8119e8c:	d004      	beq.n	8119e98 <tcp_abandon+0x154>
 8119e8e:	693b      	ldr	r3, [r7, #16]
 8119e90:	f06f 010c 	mvn.w	r1, #12
 8119e94:	68f8      	ldr	r0, [r7, #12]
 8119e96:	4798      	blx	r3
  }
}
 8119e98:	3728      	adds	r7, #40	@ 0x28
 8119e9a:	46bd      	mov	sp, r7
 8119e9c:	bd80      	pop	{r7, pc}
 8119e9e:	bf00      	nop
 8119ea0:	08125e58 	.word	0x08125e58
 8119ea4:	08125ff4 	.word	0x08125ff4
 8119ea8:	08125edc 	.word	0x08125edc
 8119eac:	08126010 	.word	0x08126010
 8119eb0:	10011e68 	.word	0x10011e68
 8119eb4:	10011e5c 	.word	0x10011e5c
 8119eb8:	10011e64 	.word	0x10011e64
 8119ebc:	10011e6c 	.word	0x10011e6c

08119ec0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8119ec0:	b580      	push	{r7, lr}
 8119ec2:	b082      	sub	sp, #8
 8119ec4:	af00      	add	r7, sp, #0
 8119ec6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8119ec8:	2101      	movs	r1, #1
 8119eca:	6878      	ldr	r0, [r7, #4]
 8119ecc:	f7ff ff3a 	bl	8119d44 <tcp_abandon>
}
 8119ed0:	bf00      	nop
 8119ed2:	3708      	adds	r7, #8
 8119ed4:	46bd      	mov	sp, r7
 8119ed6:	bd80      	pop	{r7, pc}

08119ed8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8119ed8:	b580      	push	{r7, lr}
 8119eda:	b088      	sub	sp, #32
 8119edc:	af00      	add	r7, sp, #0
 8119ede:	60f8      	str	r0, [r7, #12]
 8119ee0:	60b9      	str	r1, [r7, #8]
 8119ee2:	4613      	mov	r3, r2
 8119ee4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8119ee6:	2304      	movs	r3, #4
 8119ee8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8119eea:	68bb      	ldr	r3, [r7, #8]
 8119eec:	2b00      	cmp	r3, #0
 8119eee:	d101      	bne.n	8119ef4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8119ef0:	4b42      	ldr	r3, [pc, #264]	@ (8119ffc <tcp_bind+0x124>)
 8119ef2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8119ef4:	68fb      	ldr	r3, [r7, #12]
 8119ef6:	2b00      	cmp	r3, #0
 8119ef8:	d109      	bne.n	8119f0e <tcp_bind+0x36>
 8119efa:	4b41      	ldr	r3, [pc, #260]	@ (811a000 <tcp_bind+0x128>)
 8119efc:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8119f00:	4940      	ldr	r1, [pc, #256]	@ (811a004 <tcp_bind+0x12c>)
 8119f02:	4841      	ldr	r0, [pc, #260]	@ (811a008 <tcp_bind+0x130>)
 8119f04:	f008 f9ae 	bl	8122264 <iprintf>
 8119f08:	f06f 030f 	mvn.w	r3, #15
 8119f0c:	e072      	b.n	8119ff4 <tcp_bind+0x11c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8119f0e:	68fb      	ldr	r3, [r7, #12]
 8119f10:	7d1b      	ldrb	r3, [r3, #20]
 8119f12:	2b00      	cmp	r3, #0
 8119f14:	d009      	beq.n	8119f2a <tcp_bind+0x52>
 8119f16:	4b3a      	ldr	r3, [pc, #232]	@ (811a000 <tcp_bind+0x128>)
 8119f18:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8119f1c:	493b      	ldr	r1, [pc, #236]	@ (811a00c <tcp_bind+0x134>)
 8119f1e:	483a      	ldr	r0, [pc, #232]	@ (811a008 <tcp_bind+0x130>)
 8119f20:	f008 f9a0 	bl	8122264 <iprintf>
 8119f24:	f06f 0305 	mvn.w	r3, #5
 8119f28:	e064      	b.n	8119ff4 <tcp_bind+0x11c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8119f2a:	88fb      	ldrh	r3, [r7, #6]
 8119f2c:	2b00      	cmp	r3, #0
 8119f2e:	d109      	bne.n	8119f44 <tcp_bind+0x6c>
    port = tcp_new_port();
 8119f30:	f000 f93a 	bl	811a1a8 <tcp_new_port>
 8119f34:	4603      	mov	r3, r0
 8119f36:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8119f38:	88fb      	ldrh	r3, [r7, #6]
 8119f3a:	2b00      	cmp	r3, #0
 8119f3c:	d135      	bne.n	8119faa <tcp_bind+0xd2>
      return ERR_BUF;
 8119f3e:	f06f 0301 	mvn.w	r3, #1
 8119f42:	e057      	b.n	8119ff4 <tcp_bind+0x11c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8119f44:	2300      	movs	r3, #0
 8119f46:	61fb      	str	r3, [r7, #28]
 8119f48:	e02b      	b.n	8119fa2 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8119f4a:	4a31      	ldr	r2, [pc, #196]	@ (811a010 <tcp_bind+0x138>)
 8119f4c:	69fb      	ldr	r3, [r7, #28]
 8119f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8119f52:	681b      	ldr	r3, [r3, #0]
 8119f54:	61bb      	str	r3, [r7, #24]
 8119f56:	e01e      	b.n	8119f96 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8119f58:	69bb      	ldr	r3, [r7, #24]
 8119f5a:	8adb      	ldrh	r3, [r3, #22]
 8119f5c:	88fa      	ldrh	r2, [r7, #6]
 8119f5e:	429a      	cmp	r2, r3
 8119f60:	d116      	bne.n	8119f90 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8119f62:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8119f64:	2b00      	cmp	r3, #0
 8119f66:	d010      	beq.n	8119f8a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8119f68:	69bb      	ldr	r3, [r7, #24]
 8119f6a:	681b      	ldr	r3, [r3, #0]
 8119f6c:	2b00      	cmp	r3, #0
 8119f6e:	d00c      	beq.n	8119f8a <tcp_bind+0xb2>
 8119f70:	68bb      	ldr	r3, [r7, #8]
 8119f72:	2b00      	cmp	r3, #0
 8119f74:	d009      	beq.n	8119f8a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8119f76:	68bb      	ldr	r3, [r7, #8]
 8119f78:	681b      	ldr	r3, [r3, #0]
 8119f7a:	2b00      	cmp	r3, #0
 8119f7c:	d005      	beq.n	8119f8a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8119f7e:	69bb      	ldr	r3, [r7, #24]
 8119f80:	681a      	ldr	r2, [r3, #0]
 8119f82:	68bb      	ldr	r3, [r7, #8]
 8119f84:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8119f86:	429a      	cmp	r2, r3
 8119f88:	d102      	bne.n	8119f90 <tcp_bind+0xb8>
              return ERR_USE;
 8119f8a:	f06f 0307 	mvn.w	r3, #7
 8119f8e:	e031      	b.n	8119ff4 <tcp_bind+0x11c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8119f90:	69bb      	ldr	r3, [r7, #24]
 8119f92:	68db      	ldr	r3, [r3, #12]
 8119f94:	61bb      	str	r3, [r7, #24]
 8119f96:	69bb      	ldr	r3, [r7, #24]
 8119f98:	2b00      	cmp	r3, #0
 8119f9a:	d1dd      	bne.n	8119f58 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8119f9c:	69fb      	ldr	r3, [r7, #28]
 8119f9e:	3301      	adds	r3, #1
 8119fa0:	61fb      	str	r3, [r7, #28]
 8119fa2:	69fa      	ldr	r2, [r7, #28]
 8119fa4:	697b      	ldr	r3, [r7, #20]
 8119fa6:	429a      	cmp	r2, r3
 8119fa8:	dbcf      	blt.n	8119f4a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8119faa:	68bb      	ldr	r3, [r7, #8]
 8119fac:	2b00      	cmp	r3, #0
 8119fae:	d00c      	beq.n	8119fca <tcp_bind+0xf2>
 8119fb0:	68bb      	ldr	r3, [r7, #8]
 8119fb2:	681b      	ldr	r3, [r3, #0]
 8119fb4:	2b00      	cmp	r3, #0
 8119fb6:	d008      	beq.n	8119fca <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8119fb8:	68bb      	ldr	r3, [r7, #8]
 8119fba:	2b00      	cmp	r3, #0
 8119fbc:	d002      	beq.n	8119fc4 <tcp_bind+0xec>
 8119fbe:	68bb      	ldr	r3, [r7, #8]
 8119fc0:	681b      	ldr	r3, [r3, #0]
 8119fc2:	e000      	b.n	8119fc6 <tcp_bind+0xee>
 8119fc4:	2300      	movs	r3, #0
 8119fc6:	68fa      	ldr	r2, [r7, #12]
 8119fc8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8119fca:	68fb      	ldr	r3, [r7, #12]
 8119fcc:	88fa      	ldrh	r2, [r7, #6]
 8119fce:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8119fd0:	4b10      	ldr	r3, [pc, #64]	@ (811a014 <tcp_bind+0x13c>)
 8119fd2:	681a      	ldr	r2, [r3, #0]
 8119fd4:	68fb      	ldr	r3, [r7, #12]
 8119fd6:	60da      	str	r2, [r3, #12]
 8119fd8:	4a0e      	ldr	r2, [pc, #56]	@ (811a014 <tcp_bind+0x13c>)
 8119fda:	68fb      	ldr	r3, [r7, #12]
 8119fdc:	6013      	str	r3, [r2, #0]
 8119fde:	f006 f96d 	bl	81202bc <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
 8119fe2:	88fb      	ldrh	r3, [r7, #6]
 8119fe4:	4619      	mov	r1, r3
 8119fe6:	480c      	ldr	r0, [pc, #48]	@ (811a018 <tcp_bind+0x140>)
 8119fe8:	f008 f93c 	bl	8122264 <iprintf>
 8119fec:	200d      	movs	r0, #13
 8119fee:	f008 f94b 	bl	8122288 <putchar>
  return ERR_OK;
 8119ff2:	2300      	movs	r3, #0
}
 8119ff4:	4618      	mov	r0, r3
 8119ff6:	3720      	adds	r7, #32
 8119ff8:	46bd      	mov	sp, r7
 8119ffa:	bd80      	pop	{r7, pc}
 8119ffc:	081289b8 	.word	0x081289b8
 811a000:	08125e58 	.word	0x08125e58
 811a004:	08126044 	.word	0x08126044
 811a008:	08125edc 	.word	0x08125edc
 811a00c:	0812605c 	.word	0x0812605c
 811a010:	08128b04 	.word	0x08128b04
 811a014:	10011e5c 	.word	0x10011e5c
 811a018:	08126084 	.word	0x08126084

0811a01c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 811a01c:	b580      	push	{r7, lr}
 811a01e:	b084      	sub	sp, #16
 811a020:	af00      	add	r7, sp, #0
 811a022:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 811a024:	687b      	ldr	r3, [r7, #4]
 811a026:	2b00      	cmp	r3, #0
 811a028:	d106      	bne.n	811a038 <tcp_update_rcv_ann_wnd+0x1c>
 811a02a:	4b25      	ldr	r3, [pc, #148]	@ (811a0c0 <tcp_update_rcv_ann_wnd+0xa4>)
 811a02c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 811a030:	4924      	ldr	r1, [pc, #144]	@ (811a0c4 <tcp_update_rcv_ann_wnd+0xa8>)
 811a032:	4825      	ldr	r0, [pc, #148]	@ (811a0c8 <tcp_update_rcv_ann_wnd+0xac>)
 811a034:	f008 f916 	bl	8122264 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 811a038:	687b      	ldr	r3, [r7, #4]
 811a03a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811a03c:	687a      	ldr	r2, [r7, #4]
 811a03e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 811a040:	4413      	add	r3, r2
 811a042:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 811a044:	687b      	ldr	r3, [r7, #4]
 811a046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811a048:	687a      	ldr	r2, [r7, #4]
 811a04a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 811a04c:	f640 3168 	movw	r1, #2920	@ 0xb68
 811a050:	428a      	cmp	r2, r1
 811a052:	bf28      	it	cs
 811a054:	460a      	movcs	r2, r1
 811a056:	b292      	uxth	r2, r2
 811a058:	4413      	add	r3, r2
 811a05a:	68fa      	ldr	r2, [r7, #12]
 811a05c:	1ad3      	subs	r3, r2, r3
 811a05e:	2b00      	cmp	r3, #0
 811a060:	db08      	blt.n	811a074 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 811a062:	687b      	ldr	r3, [r7, #4]
 811a064:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 811a066:	687b      	ldr	r3, [r7, #4]
 811a068:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 811a06a:	687b      	ldr	r3, [r7, #4]
 811a06c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811a06e:	68fa      	ldr	r2, [r7, #12]
 811a070:	1ad3      	subs	r3, r2, r3
 811a072:	e020      	b.n	811a0b6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 811a074:	687b      	ldr	r3, [r7, #4]
 811a076:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811a078:	687b      	ldr	r3, [r7, #4]
 811a07a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811a07c:	1ad3      	subs	r3, r2, r3
 811a07e:	2b00      	cmp	r3, #0
 811a080:	dd03      	ble.n	811a08a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 811a082:	687b      	ldr	r3, [r7, #4]
 811a084:	2200      	movs	r2, #0
 811a086:	855a      	strh	r2, [r3, #42]	@ 0x2a
 811a088:	e014      	b.n	811a0b4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 811a08a:	687b      	ldr	r3, [r7, #4]
 811a08c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811a08e:	687b      	ldr	r3, [r7, #4]
 811a090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811a092:	1ad3      	subs	r3, r2, r3
 811a094:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 811a096:	68bb      	ldr	r3, [r7, #8]
 811a098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 811a09c:	d306      	bcc.n	811a0ac <tcp_update_rcv_ann_wnd+0x90>
 811a09e:	4b08      	ldr	r3, [pc, #32]	@ (811a0c0 <tcp_update_rcv_ann_wnd+0xa4>)
 811a0a0:	f240 32b6 	movw	r2, #950	@ 0x3b6
 811a0a4:	4909      	ldr	r1, [pc, #36]	@ (811a0cc <tcp_update_rcv_ann_wnd+0xb0>)
 811a0a6:	4808      	ldr	r0, [pc, #32]	@ (811a0c8 <tcp_update_rcv_ann_wnd+0xac>)
 811a0a8:	f008 f8dc 	bl	8122264 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 811a0ac:	68bb      	ldr	r3, [r7, #8]
 811a0ae:	b29a      	uxth	r2, r3
 811a0b0:	687b      	ldr	r3, [r7, #4]
 811a0b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 811a0b4:	2300      	movs	r3, #0
  }
}
 811a0b6:	4618      	mov	r0, r3
 811a0b8:	3710      	adds	r7, #16
 811a0ba:	46bd      	mov	sp, r7
 811a0bc:	bd80      	pop	{r7, pc}
 811a0be:	bf00      	nop
 811a0c0:	08125e58 	.word	0x08125e58
 811a0c4:	08126128 	.word	0x08126128
 811a0c8:	08125edc 	.word	0x08125edc
 811a0cc:	0812614c 	.word	0x0812614c

0811a0d0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 811a0d0:	b580      	push	{r7, lr}
 811a0d2:	b084      	sub	sp, #16
 811a0d4:	af00      	add	r7, sp, #0
 811a0d6:	6078      	str	r0, [r7, #4]
 811a0d8:	460b      	mov	r3, r1
 811a0da:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 811a0dc:	687b      	ldr	r3, [r7, #4]
 811a0de:	2b00      	cmp	r3, #0
 811a0e0:	d107      	bne.n	811a0f2 <tcp_recved+0x22>
 811a0e2:	4b2b      	ldr	r3, [pc, #172]	@ (811a190 <tcp_recved+0xc0>)
 811a0e4:	f240 32cf 	movw	r2, #975	@ 0x3cf
 811a0e8:	492a      	ldr	r1, [pc, #168]	@ (811a194 <tcp_recved+0xc4>)
 811a0ea:	482b      	ldr	r0, [pc, #172]	@ (811a198 <tcp_recved+0xc8>)
 811a0ec:	f008 f8ba 	bl	8122264 <iprintf>
 811a0f0:	e04a      	b.n	811a188 <tcp_recved+0xb8>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 811a0f2:	687b      	ldr	r3, [r7, #4]
 811a0f4:	7d1b      	ldrb	r3, [r3, #20]
 811a0f6:	2b01      	cmp	r3, #1
 811a0f8:	d106      	bne.n	811a108 <tcp_recved+0x38>
 811a0fa:	4b25      	ldr	r3, [pc, #148]	@ (811a190 <tcp_recved+0xc0>)
 811a0fc:	f240 32d2 	movw	r2, #978	@ 0x3d2
 811a100:	4926      	ldr	r1, [pc, #152]	@ (811a19c <tcp_recved+0xcc>)
 811a102:	4825      	ldr	r0, [pc, #148]	@ (811a198 <tcp_recved+0xc8>)
 811a104:	f008 f8ae 	bl	8122264 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 811a108:	687b      	ldr	r3, [r7, #4]
 811a10a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 811a10c:	887b      	ldrh	r3, [r7, #2]
 811a10e:	4413      	add	r3, r2
 811a110:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 811a112:	89fb      	ldrh	r3, [r7, #14]
 811a114:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 811a118:	4293      	cmp	r3, r2
 811a11a:	d804      	bhi.n	811a126 <tcp_recved+0x56>
 811a11c:	687b      	ldr	r3, [r7, #4]
 811a11e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811a120:	89fa      	ldrh	r2, [r7, #14]
 811a122:	429a      	cmp	r2, r3
 811a124:	d20a      	bcs.n	811a13c <tcp_recved+0x6c>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
 811a126:	481e      	ldr	r0, [pc, #120]	@ (811a1a0 <tcp_recved+0xd0>)
 811a128:	f008 f90c 	bl	8122344 <puts>
 811a12c:	200d      	movs	r0, #13
 811a12e:	f008 f8ab 	bl	8122288 <putchar>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 811a132:	687b      	ldr	r3, [r7, #4]
 811a134:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 811a138:	851a      	strh	r2, [r3, #40]	@ 0x28
 811a13a:	e002      	b.n	811a142 <tcp_recved+0x72>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 811a13c:	687b      	ldr	r3, [r7, #4]
 811a13e:	89fa      	ldrh	r2, [r7, #14]
 811a140:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 811a142:	6878      	ldr	r0, [r7, #4]
 811a144:	f7ff ff6a 	bl	811a01c <tcp_update_rcv_ann_wnd>
 811a148:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 811a14a:	68bb      	ldr	r3, [r7, #8]
 811a14c:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 811a150:	4293      	cmp	r3, r2
 811a152:	d909      	bls.n	811a168 <tcp_recved+0x98>
    tcp_ack_now(pcb);
 811a154:	687b      	ldr	r3, [r7, #4]
 811a156:	8b5b      	ldrh	r3, [r3, #26]
 811a158:	f043 0302 	orr.w	r3, r3, #2
 811a15c:	b29a      	uxth	r2, r3
 811a15e:	687b      	ldr	r3, [r7, #4]
 811a160:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 811a162:	6878      	ldr	r0, [r7, #4]
 811a164:	f004 ff1c 	bl	811efa0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
 811a168:	8879      	ldrh	r1, [r7, #2]
 811a16a:	687b      	ldr	r3, [r7, #4]
 811a16c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811a16e:	461a      	mov	r2, r3
 811a170:	687b      	ldr	r3, [r7, #4]
 811a172:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811a174:	f5c3 53b6 	rsb	r3, r3, #5824	@ 0x16c0
 811a178:	3310      	adds	r3, #16
 811a17a:	b29b      	uxth	r3, r3
 811a17c:	4809      	ldr	r0, [pc, #36]	@ (811a1a4 <tcp_recved+0xd4>)
 811a17e:	f008 f871 	bl	8122264 <iprintf>
 811a182:	200d      	movs	r0, #13
 811a184:	f008 f880 	bl	8122288 <putchar>
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 811a188:	3710      	adds	r7, #16
 811a18a:	46bd      	mov	sp, r7
 811a18c:	bd80      	pop	{r7, pc}
 811a18e:	bf00      	nop
 811a190:	08125e58 	.word	0x08125e58
 811a194:	08126168 	.word	0x08126168
 811a198:	08125edc 	.word	0x08125edc
 811a19c:	08126180 	.word	0x08126180
 811a1a0:	081261a8 	.word	0x081261a8
 811a1a4:	081261e4 	.word	0x081261e4

0811a1a8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 811a1a8:	b480      	push	{r7}
 811a1aa:	b083      	sub	sp, #12
 811a1ac:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 811a1ae:	2300      	movs	r3, #0
 811a1b0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 811a1b2:	4b1e      	ldr	r3, [pc, #120]	@ (811a22c <tcp_new_port+0x84>)
 811a1b4:	881b      	ldrh	r3, [r3, #0]
 811a1b6:	3301      	adds	r3, #1
 811a1b8:	b29a      	uxth	r2, r3
 811a1ba:	4b1c      	ldr	r3, [pc, #112]	@ (811a22c <tcp_new_port+0x84>)
 811a1bc:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 811a1be:	4b1b      	ldr	r3, [pc, #108]	@ (811a22c <tcp_new_port+0x84>)
 811a1c0:	881b      	ldrh	r3, [r3, #0]
 811a1c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811a1c6:	4293      	cmp	r3, r2
 811a1c8:	d103      	bne.n	811a1d2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 811a1ca:	4b18      	ldr	r3, [pc, #96]	@ (811a22c <tcp_new_port+0x84>)
 811a1cc:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 811a1d0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 811a1d2:	2300      	movs	r3, #0
 811a1d4:	71fb      	strb	r3, [r7, #7]
 811a1d6:	e01e      	b.n	811a216 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 811a1d8:	79fb      	ldrb	r3, [r7, #7]
 811a1da:	4a15      	ldr	r2, [pc, #84]	@ (811a230 <tcp_new_port+0x88>)
 811a1dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 811a1e0:	681b      	ldr	r3, [r3, #0]
 811a1e2:	603b      	str	r3, [r7, #0]
 811a1e4:	e011      	b.n	811a20a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 811a1e6:	683b      	ldr	r3, [r7, #0]
 811a1e8:	8ada      	ldrh	r2, [r3, #22]
 811a1ea:	4b10      	ldr	r3, [pc, #64]	@ (811a22c <tcp_new_port+0x84>)
 811a1ec:	881b      	ldrh	r3, [r3, #0]
 811a1ee:	429a      	cmp	r2, r3
 811a1f0:	d108      	bne.n	811a204 <tcp_new_port+0x5c>
        n++;
 811a1f2:	88bb      	ldrh	r3, [r7, #4]
 811a1f4:	3301      	adds	r3, #1
 811a1f6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 811a1f8:	88bb      	ldrh	r3, [r7, #4]
 811a1fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 811a1fe:	d3d8      	bcc.n	811a1b2 <tcp_new_port+0xa>
          return 0;
 811a200:	2300      	movs	r3, #0
 811a202:	e00d      	b.n	811a220 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 811a204:	683b      	ldr	r3, [r7, #0]
 811a206:	68db      	ldr	r3, [r3, #12]
 811a208:	603b      	str	r3, [r7, #0]
 811a20a:	683b      	ldr	r3, [r7, #0]
 811a20c:	2b00      	cmp	r3, #0
 811a20e:	d1ea      	bne.n	811a1e6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 811a210:	79fb      	ldrb	r3, [r7, #7]
 811a212:	3301      	adds	r3, #1
 811a214:	71fb      	strb	r3, [r7, #7]
 811a216:	79fb      	ldrb	r3, [r7, #7]
 811a218:	2b03      	cmp	r3, #3
 811a21a:	d9dd      	bls.n	811a1d8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 811a21c:	4b03      	ldr	r3, [pc, #12]	@ (811a22c <tcp_new_port+0x84>)
 811a21e:	881b      	ldrh	r3, [r3, #0]
}
 811a220:	4618      	mov	r0, r3
 811a222:	370c      	adds	r7, #12
 811a224:	46bd      	mov	sp, r7
 811a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 811a22a:	4770      	bx	lr
 811a22c:	10000028 	.word	0x10000028
 811a230:	08128b04 	.word	0x08128b04

0811a234 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 811a234:	b580      	push	{r7, lr}
 811a236:	b08a      	sub	sp, #40	@ 0x28
 811a238:	af00      	add	r7, sp, #0
 811a23a:	60f8      	str	r0, [r7, #12]
 811a23c:	60b9      	str	r1, [r7, #8]
 811a23e:	603b      	str	r3, [r7, #0]
 811a240:	4613      	mov	r3, r2
 811a242:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 811a244:	2300      	movs	r3, #0
 811a246:	627b      	str	r3, [r7, #36]	@ 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 811a248:	68fb      	ldr	r3, [r7, #12]
 811a24a:	2b00      	cmp	r3, #0
 811a24c:	d109      	bne.n	811a262 <tcp_connect+0x2e>
 811a24e:	4b81      	ldr	r3, [pc, #516]	@ (811a454 <tcp_connect+0x220>)
 811a250:	f240 4235 	movw	r2, #1077	@ 0x435
 811a254:	4980      	ldr	r1, [pc, #512]	@ (811a458 <tcp_connect+0x224>)
 811a256:	4881      	ldr	r0, [pc, #516]	@ (811a45c <tcp_connect+0x228>)
 811a258:	f008 f804 	bl	8122264 <iprintf>
 811a25c:	f06f 030f 	mvn.w	r3, #15
 811a260:	e0f4      	b.n	811a44c <tcp_connect+0x218>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 811a262:	68bb      	ldr	r3, [r7, #8]
 811a264:	2b00      	cmp	r3, #0
 811a266:	d109      	bne.n	811a27c <tcp_connect+0x48>
 811a268:	4b7a      	ldr	r3, [pc, #488]	@ (811a454 <tcp_connect+0x220>)
 811a26a:	f240 4236 	movw	r2, #1078	@ 0x436
 811a26e:	497c      	ldr	r1, [pc, #496]	@ (811a460 <tcp_connect+0x22c>)
 811a270:	487a      	ldr	r0, [pc, #488]	@ (811a45c <tcp_connect+0x228>)
 811a272:	f007 fff7 	bl	8122264 <iprintf>
 811a276:	f06f 030f 	mvn.w	r3, #15
 811a27a:	e0e7      	b.n	811a44c <tcp_connect+0x218>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 811a27c:	68fb      	ldr	r3, [r7, #12]
 811a27e:	7d1b      	ldrb	r3, [r3, #20]
 811a280:	2b00      	cmp	r3, #0
 811a282:	d009      	beq.n	811a298 <tcp_connect+0x64>
 811a284:	4b73      	ldr	r3, [pc, #460]	@ (811a454 <tcp_connect+0x220>)
 811a286:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 811a28a:	4976      	ldr	r1, [pc, #472]	@ (811a464 <tcp_connect+0x230>)
 811a28c:	4873      	ldr	r0, [pc, #460]	@ (811a45c <tcp_connect+0x228>)
 811a28e:	f007 ffe9 	bl	8122264 <iprintf>
 811a292:	f06f 0309 	mvn.w	r3, #9
 811a296:	e0d9      	b.n	811a44c <tcp_connect+0x218>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
 811a298:	88fb      	ldrh	r3, [r7, #6]
 811a29a:	4619      	mov	r1, r3
 811a29c:	4872      	ldr	r0, [pc, #456]	@ (811a468 <tcp_connect+0x234>)
 811a29e:	f007 ffe1 	bl	8122264 <iprintf>
 811a2a2:	200d      	movs	r0, #13
 811a2a4:	f007 fff0 	bl	8122288 <putchar>
  ip_addr_set(&pcb->remote_ip, ipaddr);
 811a2a8:	68bb      	ldr	r3, [r7, #8]
 811a2aa:	2b00      	cmp	r3, #0
 811a2ac:	d002      	beq.n	811a2b4 <tcp_connect+0x80>
 811a2ae:	68bb      	ldr	r3, [r7, #8]
 811a2b0:	681b      	ldr	r3, [r3, #0]
 811a2b2:	e000      	b.n	811a2b6 <tcp_connect+0x82>
 811a2b4:	2300      	movs	r3, #0
 811a2b6:	68fa      	ldr	r2, [r7, #12]
 811a2b8:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 811a2ba:	68fb      	ldr	r3, [r7, #12]
 811a2bc:	88fa      	ldrh	r2, [r7, #6]
 811a2be:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 811a2c0:	68fb      	ldr	r3, [r7, #12]
 811a2c2:	7a1b      	ldrb	r3, [r3, #8]
 811a2c4:	2b00      	cmp	r3, #0
 811a2c6:	d006      	beq.n	811a2d6 <tcp_connect+0xa2>
    netif = netif_get_by_index(pcb->netif_idx);
 811a2c8:	68fb      	ldr	r3, [r7, #12]
 811a2ca:	7a1b      	ldrb	r3, [r3, #8]
 811a2cc:	4618      	mov	r0, r3
 811a2ce:	f7fe fbc7 	bl	8118a60 <netif_get_by_index>
 811a2d2:	6278      	str	r0, [r7, #36]	@ 0x24
 811a2d4:	e005      	b.n	811a2e2 <tcp_connect+0xae>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 811a2d6:	68fb      	ldr	r3, [r7, #12]
 811a2d8:	3304      	adds	r3, #4
 811a2da:	4618      	mov	r0, r3
 811a2dc:	f7fb fdb6 	bl	8115e4c <ip4_route>
 811a2e0:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 811a2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a2e4:	2b00      	cmp	r3, #0
 811a2e6:	d102      	bne.n	811a2ee <tcp_connect+0xba>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 811a2e8:	f06f 0303 	mvn.w	r3, #3
 811a2ec:	e0ae      	b.n	811a44c <tcp_connect+0x218>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 811a2ee:	68fb      	ldr	r3, [r7, #12]
 811a2f0:	2b00      	cmp	r3, #0
 811a2f2:	d003      	beq.n	811a2fc <tcp_connect+0xc8>
 811a2f4:	68fb      	ldr	r3, [r7, #12]
 811a2f6:	681b      	ldr	r3, [r3, #0]
 811a2f8:	2b00      	cmp	r3, #0
 811a2fa:	d111      	bne.n	811a320 <tcp_connect+0xec>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 811a2fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a2fe:	2b00      	cmp	r3, #0
 811a300:	d002      	beq.n	811a308 <tcp_connect+0xd4>
 811a302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a304:	3304      	adds	r3, #4
 811a306:	e000      	b.n	811a30a <tcp_connect+0xd6>
 811a308:	2300      	movs	r3, #0
 811a30a:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 811a30c:	69fb      	ldr	r3, [r7, #28]
 811a30e:	2b00      	cmp	r3, #0
 811a310:	d102      	bne.n	811a318 <tcp_connect+0xe4>
      return ERR_RTE;
 811a312:	f06f 0303 	mvn.w	r3, #3
 811a316:	e099      	b.n	811a44c <tcp_connect+0x218>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 811a318:	69fb      	ldr	r3, [r7, #28]
 811a31a:	681a      	ldr	r2, [r3, #0]
 811a31c:	68fb      	ldr	r3, [r7, #12]
 811a31e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 811a320:	68fb      	ldr	r3, [r7, #12]
 811a322:	8adb      	ldrh	r3, [r3, #22]
 811a324:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 811a326:	68fb      	ldr	r3, [r7, #12]
 811a328:	8adb      	ldrh	r3, [r3, #22]
 811a32a:	2b00      	cmp	r3, #0
 811a32c:	d10c      	bne.n	811a348 <tcp_connect+0x114>
    pcb->local_port = tcp_new_port();
 811a32e:	f7ff ff3b 	bl	811a1a8 <tcp_new_port>
 811a332:	4603      	mov	r3, r0
 811a334:	461a      	mov	r2, r3
 811a336:	68fb      	ldr	r3, [r7, #12]
 811a338:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 811a33a:	68fb      	ldr	r3, [r7, #12]
 811a33c:	8adb      	ldrh	r3, [r3, #22]
 811a33e:	2b00      	cmp	r3, #0
 811a340:	d102      	bne.n	811a348 <tcp_connect+0x114>
      return ERR_BUF;
 811a342:	f06f 0301 	mvn.w	r3, #1
 811a346:	e081      	b.n	811a44c <tcp_connect+0x218>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 811a348:	68f8      	ldr	r0, [r7, #12]
 811a34a:	f001 f919 	bl	811b580 <tcp_next_iss>
 811a34e:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 811a350:	68fb      	ldr	r3, [r7, #12]
 811a352:	2200      	movs	r2, #0
 811a354:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 811a356:	68fb      	ldr	r3, [r7, #12]
 811a358:	697a      	ldr	r2, [r7, #20]
 811a35a:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 811a35c:	697b      	ldr	r3, [r7, #20]
 811a35e:	1e5a      	subs	r2, r3, #1
 811a360:	68fb      	ldr	r3, [r7, #12]
 811a362:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 811a364:	697b      	ldr	r3, [r7, #20]
 811a366:	1e5a      	subs	r2, r3, #1
 811a368:	68fb      	ldr	r3, [r7, #12]
 811a36a:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 811a36c:	697b      	ldr	r3, [r7, #20]
 811a36e:	1e5a      	subs	r2, r3, #1
 811a370:	68fb      	ldr	r3, [r7, #12]
 811a372:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 811a374:	68fb      	ldr	r3, [r7, #12]
 811a376:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 811a37a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 811a37c:	68fb      	ldr	r3, [r7, #12]
 811a37e:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 811a380:	68fb      	ldr	r3, [r7, #12]
 811a382:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 811a384:	68fb      	ldr	r3, [r7, #12]
 811a386:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811a388:	68fb      	ldr	r3, [r7, #12]
 811a38a:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 811a38c:	68fb      	ldr	r3, [r7, #12]
 811a38e:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 811a392:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 811a396:	68fb      	ldr	r3, [r7, #12]
 811a398:	f44f 7206 	mov.w	r2, #536	@ 0x218
 811a39c:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 811a39e:	68fb      	ldr	r3, [r7, #12]
 811a3a0:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 811a3a2:	68fb      	ldr	r3, [r7, #12]
 811a3a4:	3304      	adds	r3, #4
 811a3a6:	461a      	mov	r2, r3
 811a3a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 811a3aa:	f001 f90f 	bl	811b5cc <tcp_eff_send_mss_netif>
 811a3ae:	4603      	mov	r3, r0
 811a3b0:	461a      	mov	r2, r3
 811a3b2:	68fb      	ldr	r3, [r7, #12]
 811a3b4:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 811a3b6:	68fb      	ldr	r3, [r7, #12]
 811a3b8:	2201      	movs	r2, #1
 811a3ba:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 811a3be:	68fb      	ldr	r3, [r7, #12]
 811a3c0:	683a      	ldr	r2, [r7, #0]
 811a3c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 811a3c6:	2102      	movs	r1, #2
 811a3c8:	68f8      	ldr	r0, [r7, #12]
 811a3ca:	f004 fcfb 	bl	811edc4 <tcp_enqueue_flags>
 811a3ce:	4603      	mov	r3, r0
 811a3d0:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 811a3d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 811a3d6:	2b00      	cmp	r3, #0
 811a3d8:	d136      	bne.n	811a448 <tcp_connect+0x214>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 811a3da:	68fb      	ldr	r3, [r7, #12]
 811a3dc:	2202      	movs	r2, #2
 811a3de:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 811a3e0:	8b7b      	ldrh	r3, [r7, #26]
 811a3e2:	2b00      	cmp	r3, #0
 811a3e4:	d021      	beq.n	811a42a <tcp_connect+0x1f6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 811a3e6:	4b21      	ldr	r3, [pc, #132]	@ (811a46c <tcp_connect+0x238>)
 811a3e8:	681b      	ldr	r3, [r3, #0]
 811a3ea:	68fa      	ldr	r2, [r7, #12]
 811a3ec:	429a      	cmp	r2, r3
 811a3ee:	d105      	bne.n	811a3fc <tcp_connect+0x1c8>
 811a3f0:	4b1e      	ldr	r3, [pc, #120]	@ (811a46c <tcp_connect+0x238>)
 811a3f2:	681b      	ldr	r3, [r3, #0]
 811a3f4:	68db      	ldr	r3, [r3, #12]
 811a3f6:	4a1d      	ldr	r2, [pc, #116]	@ (811a46c <tcp_connect+0x238>)
 811a3f8:	6013      	str	r3, [r2, #0]
 811a3fa:	e013      	b.n	811a424 <tcp_connect+0x1f0>
 811a3fc:	4b1b      	ldr	r3, [pc, #108]	@ (811a46c <tcp_connect+0x238>)
 811a3fe:	681b      	ldr	r3, [r3, #0]
 811a400:	623b      	str	r3, [r7, #32]
 811a402:	e00c      	b.n	811a41e <tcp_connect+0x1ea>
 811a404:	6a3b      	ldr	r3, [r7, #32]
 811a406:	68db      	ldr	r3, [r3, #12]
 811a408:	68fa      	ldr	r2, [r7, #12]
 811a40a:	429a      	cmp	r2, r3
 811a40c:	d104      	bne.n	811a418 <tcp_connect+0x1e4>
 811a40e:	68fb      	ldr	r3, [r7, #12]
 811a410:	68da      	ldr	r2, [r3, #12]
 811a412:	6a3b      	ldr	r3, [r7, #32]
 811a414:	60da      	str	r2, [r3, #12]
 811a416:	e005      	b.n	811a424 <tcp_connect+0x1f0>
 811a418:	6a3b      	ldr	r3, [r7, #32]
 811a41a:	68db      	ldr	r3, [r3, #12]
 811a41c:	623b      	str	r3, [r7, #32]
 811a41e:	6a3b      	ldr	r3, [r7, #32]
 811a420:	2b00      	cmp	r3, #0
 811a422:	d1ef      	bne.n	811a404 <tcp_connect+0x1d0>
 811a424:	68fb      	ldr	r3, [r7, #12]
 811a426:	2200      	movs	r2, #0
 811a428:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 811a42a:	4b11      	ldr	r3, [pc, #68]	@ (811a470 <tcp_connect+0x23c>)
 811a42c:	681a      	ldr	r2, [r3, #0]
 811a42e:	68fb      	ldr	r3, [r7, #12]
 811a430:	60da      	str	r2, [r3, #12]
 811a432:	4a0f      	ldr	r2, [pc, #60]	@ (811a470 <tcp_connect+0x23c>)
 811a434:	68fb      	ldr	r3, [r7, #12]
 811a436:	6013      	str	r3, [r2, #0]
 811a438:	f005 ff40 	bl	81202bc <tcp_timer_needed>
 811a43c:	4b0d      	ldr	r3, [pc, #52]	@ (811a474 <tcp_connect+0x240>)
 811a43e:	2201      	movs	r2, #1
 811a440:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 811a442:	68f8      	ldr	r0, [r7, #12]
 811a444:	f004 fdac 	bl	811efa0 <tcp_output>
  }
  return ret;
 811a448:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 811a44c:	4618      	mov	r0, r3
 811a44e:	3728      	adds	r7, #40	@ 0x28
 811a450:	46bd      	mov	sp, r7
 811a452:	bd80      	pop	{r7, pc}
 811a454:	08125e58 	.word	0x08125e58
 811a458:	08126214 	.word	0x08126214
 811a45c:	08125edc 	.word	0x08125edc
 811a460:	08126230 	.word	0x08126230
 811a464:	0812624c 	.word	0x0812624c
 811a468:	0812627c 	.word	0x0812627c
 811a46c:	10011e5c 	.word	0x10011e5c
 811a470:	10011e64 	.word	0x10011e64
 811a474:	10011e6c 	.word	0x10011e6c

0811a478 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 811a478:	b5b0      	push	{r4, r5, r7, lr}
 811a47a:	b092      	sub	sp, #72	@ 0x48
 811a47c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 811a47e:	2300      	movs	r3, #0
 811a480:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

  ++tcp_ticks;
 811a484:	4ba4      	ldr	r3, [pc, #656]	@ (811a718 <tcp_slowtmr+0x2a0>)
 811a486:	681b      	ldr	r3, [r3, #0]
 811a488:	3301      	adds	r3, #1
 811a48a:	4aa3      	ldr	r2, [pc, #652]	@ (811a718 <tcp_slowtmr+0x2a0>)
 811a48c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 811a48e:	4ba3      	ldr	r3, [pc, #652]	@ (811a71c <tcp_slowtmr+0x2a4>)
 811a490:	781b      	ldrb	r3, [r3, #0]
 811a492:	3301      	adds	r3, #1
 811a494:	b2da      	uxtb	r2, r3
 811a496:	4ba1      	ldr	r3, [pc, #644]	@ (811a71c <tcp_slowtmr+0x2a4>)
 811a498:	701a      	strb	r2, [r3, #0]
 811a49a:	e000      	b.n	811a49e <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 811a49c:	bf00      	nop
  prev = NULL;
 811a49e:	2300      	movs	r3, #0
 811a4a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pcb = tcp_active_pcbs;
 811a4a2:	4b9f      	ldr	r3, [pc, #636]	@ (811a720 <tcp_slowtmr+0x2a8>)
 811a4a4:	681b      	ldr	r3, [r3, #0]
 811a4a6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (pcb == NULL) {
 811a4a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a4aa:	2b00      	cmp	r3, #0
 811a4ac:	f040 8323 	bne.w	811aaf6 <tcp_slowtmr+0x67e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
 811a4b0:	489c      	ldr	r0, [pc, #624]	@ (811a724 <tcp_slowtmr+0x2ac>)
 811a4b2:	f007 ff47 	bl	8122344 <puts>
 811a4b6:	200d      	movs	r0, #13
 811a4b8:	f007 fee6 	bl	8122288 <putchar>
  while (pcb != NULL) {
 811a4bc:	e31b      	b.n	811aaf6 <tcp_slowtmr+0x67e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
 811a4be:	489a      	ldr	r0, [pc, #616]	@ (811a728 <tcp_slowtmr+0x2b0>)
 811a4c0:	f007 ff40 	bl	8122344 <puts>
 811a4c4:	200d      	movs	r0, #13
 811a4c6:	f007 fedf 	bl	8122288 <putchar>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 811a4ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a4cc:	7d1b      	ldrb	r3, [r3, #20]
 811a4ce:	2b00      	cmp	r3, #0
 811a4d0:	d106      	bne.n	811a4e0 <tcp_slowtmr+0x68>
 811a4d2:	4b96      	ldr	r3, [pc, #600]	@ (811a72c <tcp_slowtmr+0x2b4>)
 811a4d4:	f240 42be 	movw	r2, #1214	@ 0x4be
 811a4d8:	4995      	ldr	r1, [pc, #596]	@ (811a730 <tcp_slowtmr+0x2b8>)
 811a4da:	4896      	ldr	r0, [pc, #600]	@ (811a734 <tcp_slowtmr+0x2bc>)
 811a4dc:	f007 fec2 	bl	8122264 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 811a4e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a4e2:	7d1b      	ldrb	r3, [r3, #20]
 811a4e4:	2b01      	cmp	r3, #1
 811a4e6:	d106      	bne.n	811a4f6 <tcp_slowtmr+0x7e>
 811a4e8:	4b90      	ldr	r3, [pc, #576]	@ (811a72c <tcp_slowtmr+0x2b4>)
 811a4ea:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 811a4ee:	4992      	ldr	r1, [pc, #584]	@ (811a738 <tcp_slowtmr+0x2c0>)
 811a4f0:	4890      	ldr	r0, [pc, #576]	@ (811a734 <tcp_slowtmr+0x2bc>)
 811a4f2:	f007 feb7 	bl	8122264 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 811a4f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a4f8:	7d1b      	ldrb	r3, [r3, #20]
 811a4fa:	2b0a      	cmp	r3, #10
 811a4fc:	d106      	bne.n	811a50c <tcp_slowtmr+0x94>
 811a4fe:	4b8b      	ldr	r3, [pc, #556]	@ (811a72c <tcp_slowtmr+0x2b4>)
 811a500:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 811a504:	498d      	ldr	r1, [pc, #564]	@ (811a73c <tcp_slowtmr+0x2c4>)
 811a506:	488b      	ldr	r0, [pc, #556]	@ (811a734 <tcp_slowtmr+0x2bc>)
 811a508:	f007 feac 	bl	8122264 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 811a50c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a50e:	7f9a      	ldrb	r2, [r3, #30]
 811a510:	4b82      	ldr	r3, [pc, #520]	@ (811a71c <tcp_slowtmr+0x2a4>)
 811a512:	781b      	ldrb	r3, [r3, #0]
 811a514:	429a      	cmp	r2, r3
 811a516:	d105      	bne.n	811a524 <tcp_slowtmr+0xac>
      prev = pcb;
 811a518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a51a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pcb = pcb->next;
 811a51c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a51e:	68db      	ldr	r3, [r3, #12]
 811a520:	633b      	str	r3, [r7, #48]	@ 0x30
      continue;
 811a522:	e2e8      	b.n	811aaf6 <tcp_slowtmr+0x67e>
    pcb->last_timer = tcp_timer_ctr;
 811a524:	4b7d      	ldr	r3, [pc, #500]	@ (811a71c <tcp_slowtmr+0x2a4>)
 811a526:	781a      	ldrb	r2, [r3, #0]
 811a528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a52a:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 811a52c:	2300      	movs	r3, #0
 811a52e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    pcb_reset = 0;
 811a532:	2300      	movs	r3, #0
 811a534:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 811a538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a53a:	7d1b      	ldrb	r3, [r3, #20]
 811a53c:	2b02      	cmp	r3, #2
 811a53e:	d110      	bne.n	811a562 <tcp_slowtmr+0xea>
 811a540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a542:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811a546:	2b05      	cmp	r3, #5
 811a548:	d90b      	bls.n	811a562 <tcp_slowtmr+0xea>
      ++pcb_remove;
 811a54a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 811a54e:	3301      	adds	r3, #1
 811a550:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 811a554:	487a      	ldr	r0, [pc, #488]	@ (811a740 <tcp_slowtmr+0x2c8>)
 811a556:	f007 fef5 	bl	8122344 <puts>
 811a55a:	200d      	movs	r0, #13
 811a55c:	f007 fe94 	bl	8122288 <putchar>
 811a560:	e12e      	b.n	811a7c0 <tcp_slowtmr+0x348>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 811a562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a564:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811a568:	2b0b      	cmp	r3, #11
 811a56a:	d90b      	bls.n	811a584 <tcp_slowtmr+0x10c>
      ++pcb_remove;
 811a56c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 811a570:	3301      	adds	r3, #1
 811a572:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
 811a576:	4873      	ldr	r0, [pc, #460]	@ (811a744 <tcp_slowtmr+0x2cc>)
 811a578:	f007 fee4 	bl	8122344 <puts>
 811a57c:	200d      	movs	r0, #13
 811a57e:	f007 fe83 	bl	8122288 <putchar>
 811a582:	e11d      	b.n	811a7c0 <tcp_slowtmr+0x348>
      if (pcb->persist_backoff > 0) {
 811a584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a586:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 811a58a:	2b00      	cmp	r3, #0
 811a58c:	d075      	beq.n	811a67a <tcp_slowtmr+0x202>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 811a58e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811a592:	2b00      	cmp	r3, #0
 811a594:	d006      	beq.n	811a5a4 <tcp_slowtmr+0x12c>
 811a596:	4b65      	ldr	r3, [pc, #404]	@ (811a72c <tcp_slowtmr+0x2b4>)
 811a598:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 811a59c:	496a      	ldr	r1, [pc, #424]	@ (811a748 <tcp_slowtmr+0x2d0>)
 811a59e:	4865      	ldr	r0, [pc, #404]	@ (811a734 <tcp_slowtmr+0x2bc>)
 811a5a0:	f007 fe60 	bl	8122264 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 811a5a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a5a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811a5a8:	2b00      	cmp	r3, #0
 811a5aa:	d106      	bne.n	811a5ba <tcp_slowtmr+0x142>
 811a5ac:	4b5f      	ldr	r3, [pc, #380]	@ (811a72c <tcp_slowtmr+0x2b4>)
 811a5ae:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 811a5b2:	4966      	ldr	r1, [pc, #408]	@ (811a74c <tcp_slowtmr+0x2d4>)
 811a5b4:	485f      	ldr	r0, [pc, #380]	@ (811a734 <tcp_slowtmr+0x2bc>)
 811a5b6:	f007 fe55 	bl	8122264 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 811a5ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a5bc:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 811a5c0:	2b0b      	cmp	r3, #11
 811a5c2:	d905      	bls.n	811a5d0 <tcp_slowtmr+0x158>
          ++pcb_remove; /* max probes reached */
 811a5c4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 811a5c8:	3301      	adds	r3, #1
 811a5ca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 811a5ce:	e0f7      	b.n	811a7c0 <tcp_slowtmr+0x348>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 811a5d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a5d2:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 811a5d6:	3b01      	subs	r3, #1
 811a5d8:	4a5d      	ldr	r2, [pc, #372]	@ (811a750 <tcp_slowtmr+0x2d8>)
 811a5da:	5cd3      	ldrb	r3, [r2, r3]
 811a5dc:	757b      	strb	r3, [r7, #21]
          if (pcb->persist_cnt < backoff_cnt) {
 811a5de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a5e0:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 811a5e4:	7d7a      	ldrb	r2, [r7, #21]
 811a5e6:	429a      	cmp	r2, r3
 811a5e8:	d907      	bls.n	811a5fa <tcp_slowtmr+0x182>
            pcb->persist_cnt++;
 811a5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a5ec:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 811a5f0:	3301      	adds	r3, #1
 811a5f2:	b2da      	uxtb	r2, r3
 811a5f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a5f6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
          if (pcb->persist_cnt >= backoff_cnt) {
 811a5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a5fc:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 811a600:	7d7a      	ldrb	r2, [r7, #21]
 811a602:	429a      	cmp	r2, r3
 811a604:	f200 80dc 	bhi.w	811a7c0 <tcp_slowtmr+0x348>
            int next_slot = 1; /* increment timer to next slot */
 811a608:	2301      	movs	r3, #1
 811a60a:	627b      	str	r3, [r7, #36]	@ 0x24
            if (pcb->snd_wnd == 0) {
 811a60c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a60e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811a612:	2b00      	cmp	r3, #0
 811a614:	d108      	bne.n	811a628 <tcp_slowtmr+0x1b0>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 811a616:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 811a618:	f005 fbce 	bl	811fdb8 <tcp_zero_window_probe>
 811a61c:	4603      	mov	r3, r0
 811a61e:	2b00      	cmp	r3, #0
 811a620:	d014      	beq.n	811a64c <tcp_slowtmr+0x1d4>
                next_slot = 0; /* try probe again with current slot */
 811a622:	2300      	movs	r3, #0
 811a624:	627b      	str	r3, [r7, #36]	@ 0x24
 811a626:	e011      	b.n	811a64c <tcp_slowtmr+0x1d4>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 811a628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a62a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811a62e:	4619      	mov	r1, r3
 811a630:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 811a632:	f004 fa2b 	bl	811ea8c <tcp_split_unsent_seg>
 811a636:	4603      	mov	r3, r0
 811a638:	2b00      	cmp	r3, #0
 811a63a:	d107      	bne.n	811a64c <tcp_slowtmr+0x1d4>
                if (tcp_output(pcb) == ERR_OK) {
 811a63c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 811a63e:	f004 fcaf 	bl	811efa0 <tcp_output>
 811a642:	4603      	mov	r3, r0
 811a644:	2b00      	cmp	r3, #0
 811a646:	d101      	bne.n	811a64c <tcp_slowtmr+0x1d4>
                  next_slot = 0;
 811a648:	2300      	movs	r3, #0
 811a64a:	627b      	str	r3, [r7, #36]	@ 0x24
            if (next_slot) {
 811a64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a64e:	2b00      	cmp	r3, #0
 811a650:	f000 80b6 	beq.w	811a7c0 <tcp_slowtmr+0x348>
              pcb->persist_cnt = 0;
 811a654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a656:	2200      	movs	r2, #0
 811a658:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 811a65c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a65e:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 811a662:	2b06      	cmp	r3, #6
 811a664:	f200 80ac 	bhi.w	811a7c0 <tcp_slowtmr+0x348>
                pcb->persist_backoff++;
 811a668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a66a:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 811a66e:	3301      	adds	r3, #1
 811a670:	b2da      	uxtb	r2, r3
 811a672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a674:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 811a678:	e0a2      	b.n	811a7c0 <tcp_slowtmr+0x348>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 811a67a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a67c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 811a680:	2b00      	cmp	r3, #0
 811a682:	db0f      	blt.n	811a6a4 <tcp_slowtmr+0x22c>
 811a684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a686:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 811a68a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 811a68e:	4293      	cmp	r3, r2
 811a690:	d008      	beq.n	811a6a4 <tcp_slowtmr+0x22c>
          ++pcb->rtime;
 811a692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a694:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 811a698:	b29b      	uxth	r3, r3
 811a69a:	3301      	adds	r3, #1
 811a69c:	b29b      	uxth	r3, r3
 811a69e:	b21a      	sxth	r2, r3
 811a6a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a6a2:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 811a6a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a6a6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 811a6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a6ac:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 811a6b0:	429a      	cmp	r2, r3
 811a6b2:	f2c0 8085 	blt.w	811a7c0 <tcp_slowtmr+0x348>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 811a6b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 811a6b8:	f004 ff68 	bl	811f58c <tcp_rexmit_rto_prepare>
 811a6bc:	4603      	mov	r3, r0
 811a6be:	2b00      	cmp	r3, #0
 811a6c0:	d007      	beq.n	811a6d2 <tcp_slowtmr+0x25a>
 811a6c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a6c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811a6c6:	2b00      	cmp	r3, #0
 811a6c8:	d17a      	bne.n	811a7c0 <tcp_slowtmr+0x348>
 811a6ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a6cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811a6ce:	2b00      	cmp	r3, #0
 811a6d0:	d076      	beq.n	811a7c0 <tcp_slowtmr+0x348>
            if (pcb->state != SYN_SENT) {
 811a6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a6d4:	7d1b      	ldrb	r3, [r3, #20]
 811a6d6:	2b02      	cmp	r3, #2
 811a6d8:	d043      	beq.n	811a762 <tcp_slowtmr+0x2ea>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 811a6da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a6dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811a6e0:	2b0c      	cmp	r3, #12
 811a6e2:	bf28      	it	cs
 811a6e4:	230c      	movcs	r3, #12
 811a6e6:	77fb      	strb	r3, [r7, #31]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 811a6e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a6ea:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 811a6ee:	10db      	asrs	r3, r3, #3
 811a6f0:	b21b      	sxth	r3, r3
 811a6f2:	461a      	mov	r2, r3
 811a6f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a6f6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 811a6fa:	4413      	add	r3, r2
 811a6fc:	7ffa      	ldrb	r2, [r7, #31]
 811a6fe:	4915      	ldr	r1, [pc, #84]	@ (811a754 <tcp_slowtmr+0x2dc>)
 811a700:	5c8a      	ldrb	r2, [r1, r2]
 811a702:	4093      	lsls	r3, r2
 811a704:	61bb      	str	r3, [r7, #24]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 811a706:	69bb      	ldr	r3, [r7, #24]
 811a708:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 811a70c:	4293      	cmp	r3, r2
 811a70e:	dc23      	bgt.n	811a758 <tcp_slowtmr+0x2e0>
 811a710:	69bb      	ldr	r3, [r7, #24]
 811a712:	b21a      	sxth	r2, r3
 811a714:	e022      	b.n	811a75c <tcp_slowtmr+0x2e4>
 811a716:	bf00      	nop
 811a718:	10011e58 	.word	0x10011e58
 811a71c:	10011e6e 	.word	0x10011e6e
 811a720:	10011e64 	.word	0x10011e64
 811a724:	08126298 	.word	0x08126298
 811a728:	081262b4 	.word	0x081262b4
 811a72c:	08125e58 	.word	0x08125e58
 811a730:	081262d8 	.word	0x081262d8
 811a734:	08125edc 	.word	0x08125edc
 811a738:	08126304 	.word	0x08126304
 811a73c:	08126330 	.word	0x08126330
 811a740:	08126360 	.word	0x08126360
 811a744:	08126388 	.word	0x08126388
 811a748:	081263b0 	.word	0x081263b0
 811a74c:	081263e4 	.word	0x081263e4
 811a750:	08128afc 	.word	0x08128afc
 811a754:	08128aec 	.word	0x08128aec
 811a758:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 811a75c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a75e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 811a762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a764:	2200      	movs	r2, #0
 811a766:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 811a768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a76a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 811a76e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a770:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 811a774:	4293      	cmp	r3, r2
 811a776:	bf28      	it	cs
 811a778:	4613      	movcs	r3, r2
 811a77a:	82fb      	strh	r3, [r7, #22]
            pcb->ssthresh = eff_wnd >> 1;
 811a77c:	8afb      	ldrh	r3, [r7, #22]
 811a77e:	085b      	lsrs	r3, r3, #1
 811a780:	b29a      	uxth	r2, r3
 811a782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a784:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 811a788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a78a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 811a78e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a790:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811a792:	005b      	lsls	r3, r3, #1
 811a794:	b29b      	uxth	r3, r3
 811a796:	429a      	cmp	r2, r3
 811a798:	d206      	bcs.n	811a7a8 <tcp_slowtmr+0x330>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 811a79a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a79c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811a79e:	005b      	lsls	r3, r3, #1
 811a7a0:	b29a      	uxth	r2, r3
 811a7a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a7a4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 811a7a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a7aa:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 811a7ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a7ae:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 811a7b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a7b4:	2200      	movs	r2, #0
 811a7b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 811a7ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 811a7bc:	f004 ff60 	bl	811f680 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 811a7c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a7c2:	7d1b      	ldrb	r3, [r3, #20]
 811a7c4:	2b06      	cmp	r3, #6
 811a7c6:	d117      	bne.n	811a7f8 <tcp_slowtmr+0x380>
      if (pcb->flags & TF_RXCLOSED) {
 811a7c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a7ca:	8b5b      	ldrh	r3, [r3, #26]
 811a7cc:	f003 0310 	and.w	r3, r3, #16
 811a7d0:	2b00      	cmp	r3, #0
 811a7d2:	d011      	beq.n	811a7f8 <tcp_slowtmr+0x380>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 811a7d4:	4b9c      	ldr	r3, [pc, #624]	@ (811aa48 <tcp_slowtmr+0x5d0>)
 811a7d6:	681a      	ldr	r2, [r3, #0]
 811a7d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a7da:	6a1b      	ldr	r3, [r3, #32]
 811a7dc:	1ad3      	subs	r3, r2, r3
 811a7de:	2b28      	cmp	r3, #40	@ 0x28
 811a7e0:	d90a      	bls.n	811a7f8 <tcp_slowtmr+0x380>
          ++pcb_remove;
 811a7e2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 811a7e6:	3301      	adds	r3, #1
 811a7e8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in FIN-WAIT-2\n"));
 811a7ec:	4897      	ldr	r0, [pc, #604]	@ (811aa4c <tcp_slowtmr+0x5d4>)
 811a7ee:	f007 fda9 	bl	8122344 <puts>
 811a7f2:	200d      	movs	r0, #13
 811a7f4:	f007 fd48 	bl	8122288 <putchar>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 811a7f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a7fa:	7a5b      	ldrb	r3, [r3, #9]
 811a7fc:	f003 0308 	and.w	r3, r3, #8
 811a800:	2b00      	cmp	r3, #0
 811a802:	d079      	beq.n	811a8f8 <tcp_slowtmr+0x480>
        ((pcb->state == ESTABLISHED) ||
 811a804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a806:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 811a808:	2b04      	cmp	r3, #4
 811a80a:	d003      	beq.n	811a814 <tcp_slowtmr+0x39c>
         (pcb->state == CLOSE_WAIT))) {
 811a80c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a80e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 811a810:	2b07      	cmp	r3, #7
 811a812:	d171      	bne.n	811a8f8 <tcp_slowtmr+0x480>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 811a814:	4b8c      	ldr	r3, [pc, #560]	@ (811aa48 <tcp_slowtmr+0x5d0>)
 811a816:	681a      	ldr	r2, [r3, #0]
 811a818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a81a:	6a1b      	ldr	r3, [r3, #32]
 811a81c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 811a81e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a820:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 811a824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a826:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 811a82a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 811a82c:	f8d0 0098 	ldr.w	r0, [r0, #152]	@ 0x98
 811a830:	fb00 f303 	mul.w	r3, r0, r3
 811a834:	440b      	add	r3, r1
 811a836:	4986      	ldr	r1, [pc, #536]	@ (811aa50 <tcp_slowtmr+0x5d8>)
 811a838:	fba1 1303 	umull	r1, r3, r1, r3
 811a83c:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 811a83e:	429a      	cmp	r2, r3
 811a840:	d930      	bls.n	811a8a4 <tcp_slowtmr+0x42c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
 811a842:	4884      	ldr	r0, [pc, #528]	@ (811aa54 <tcp_slowtmr+0x5dc>)
 811a844:	f007 fd0e 	bl	8122264 <iprintf>
 811a848:	200d      	movs	r0, #13
 811a84a:	f007 fd1d 	bl	8122288 <putchar>
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
 811a84e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a850:	685b      	ldr	r3, [r3, #4]
 811a852:	b2db      	uxtb	r3, r3
 811a854:	4619      	mov	r1, r3
 811a856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a858:	685b      	ldr	r3, [r3, #4]
 811a85a:	0a1b      	lsrs	r3, r3, #8
 811a85c:	b2db      	uxtb	r3, r3
 811a85e:	461a      	mov	r2, r3
 811a860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a862:	685b      	ldr	r3, [r3, #4]
 811a864:	0c1b      	lsrs	r3, r3, #16
 811a866:	b2db      	uxtb	r3, r3
 811a868:	4618      	mov	r0, r3
 811a86a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a86c:	685b      	ldr	r3, [r3, #4]
 811a86e:	0e1b      	lsrs	r3, r3, #24
 811a870:	b2db      	uxtb	r3, r3
 811a872:	9300      	str	r3, [sp, #0]
 811a874:	4603      	mov	r3, r0
 811a876:	4878      	ldr	r0, [pc, #480]	@ (811aa58 <tcp_slowtmr+0x5e0>)
 811a878:	f007 fcf4 	bl	8122264 <iprintf>
 811a87c:	200d      	movs	r0, #13
 811a87e:	f007 fd03 	bl	8122288 <putchar>
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));
 811a882:	200a      	movs	r0, #10
 811a884:	f007 fd00 	bl	8122288 <putchar>
 811a888:	200d      	movs	r0, #13
 811a88a:	f007 fcfd 	bl	8122288 <putchar>
        ++pcb_remove;
 811a88e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 811a892:	3301      	adds	r3, #1
 811a894:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        ++pcb_reset;
 811a898:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 811a89c:	3301      	adds	r3, #1
 811a89e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 811a8a2:	e029      	b.n	811a8f8 <tcp_slowtmr+0x480>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 811a8a4:	4b68      	ldr	r3, [pc, #416]	@ (811aa48 <tcp_slowtmr+0x5d0>)
 811a8a6:	681a      	ldr	r2, [r3, #0]
 811a8a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a8aa:	6a1b      	ldr	r3, [r3, #32]
 811a8ac:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 811a8ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a8b0:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 811a8b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a8b6:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 811a8ba:	4618      	mov	r0, r3
 811a8bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a8be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 811a8c2:	fb00 f303 	mul.w	r3, r0, r3
 811a8c6:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 811a8c8:	4961      	ldr	r1, [pc, #388]	@ (811aa50 <tcp_slowtmr+0x5d8>)
 811a8ca:	fba1 1303 	umull	r1, r3, r1, r3
 811a8ce:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 811a8d0:	429a      	cmp	r2, r3
 811a8d2:	d911      	bls.n	811a8f8 <tcp_slowtmr+0x480>
        err = tcp_keepalive(pcb);
 811a8d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 811a8d6:	f005 f9dd 	bl	811fc94 <tcp_keepalive>
 811a8da:	4603      	mov	r3, r0
 811a8dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        if (err == ERR_OK) {
 811a8e0:	f997 302a 	ldrsb.w	r3, [r7, #42]	@ 0x2a
 811a8e4:	2b00      	cmp	r3, #0
 811a8e6:	d107      	bne.n	811a8f8 <tcp_slowtmr+0x480>
          pcb->keep_cnt_sent++;
 811a8e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a8ea:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 811a8ee:	3301      	adds	r3, #1
 811a8f0:	b2da      	uxtb	r2, r3
 811a8f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a8f4:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
    if (pcb->ooseq != NULL &&
 811a8f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a8fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811a8fc:	2b00      	cmp	r3, #0
 811a8fe:	d011      	beq.n	811a924 <tcp_slowtmr+0x4ac>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 811a900:	4b51      	ldr	r3, [pc, #324]	@ (811aa48 <tcp_slowtmr+0x5d0>)
 811a902:	681a      	ldr	r2, [r3, #0]
 811a904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a906:	6a1b      	ldr	r3, [r3, #32]
 811a908:	1ad2      	subs	r2, r2, r3
 811a90a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a90c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 811a910:	4619      	mov	r1, r3
 811a912:	460b      	mov	r3, r1
 811a914:	005b      	lsls	r3, r3, #1
 811a916:	440b      	add	r3, r1
 811a918:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 811a91a:	429a      	cmp	r2, r3
 811a91c:	d302      	bcc.n	811a924 <tcp_slowtmr+0x4ac>
      tcp_free_ooseq(pcb);
 811a91e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 811a920:	f000 ff08 	bl	811b734 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 811a924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a926:	7d1b      	ldrb	r3, [r3, #20]
 811a928:	2b03      	cmp	r3, #3
 811a92a:	d111      	bne.n	811a950 <tcp_slowtmr+0x4d8>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 811a92c:	4b46      	ldr	r3, [pc, #280]	@ (811aa48 <tcp_slowtmr+0x5d0>)
 811a92e:	681a      	ldr	r2, [r3, #0]
 811a930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a932:	6a1b      	ldr	r3, [r3, #32]
 811a934:	1ad3      	subs	r3, r2, r3
 811a936:	2b28      	cmp	r3, #40	@ 0x28
 811a938:	d90a      	bls.n	811a950 <tcp_slowtmr+0x4d8>
        ++pcb_remove;
 811a93a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 811a93e:	3301      	adds	r3, #1
 811a940:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
 811a944:	4845      	ldr	r0, [pc, #276]	@ (811aa5c <tcp_slowtmr+0x5e4>)
 811a946:	f007 fcfd 	bl	8122344 <puts>
 811a94a:	200d      	movs	r0, #13
 811a94c:	f007 fc9c 	bl	8122288 <putchar>
    if (pcb->state == LAST_ACK) {
 811a950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a952:	7d1b      	ldrb	r3, [r3, #20]
 811a954:	2b09      	cmp	r3, #9
 811a956:	d111      	bne.n	811a97c <tcp_slowtmr+0x504>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 811a958:	4b3b      	ldr	r3, [pc, #236]	@ (811aa48 <tcp_slowtmr+0x5d0>)
 811a95a:	681a      	ldr	r2, [r3, #0]
 811a95c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a95e:	6a1b      	ldr	r3, [r3, #32]
 811a960:	1ad3      	subs	r3, r2, r3
 811a962:	2bf0      	cmp	r3, #240	@ 0xf0
 811a964:	d90a      	bls.n	811a97c <tcp_slowtmr+0x504>
        ++pcb_remove;
 811a966:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 811a96a:	3301      	adds	r3, #1
 811a96c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
 811a970:	483b      	ldr	r0, [pc, #236]	@ (811aa60 <tcp_slowtmr+0x5e8>)
 811a972:	f007 fce7 	bl	8122344 <puts>
 811a976:	200d      	movs	r0, #13
 811a978:	f007 fc86 	bl	8122288 <putchar>
    if (pcb_remove) {
 811a97c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 811a980:	2b00      	cmp	r3, #0
 811a982:	d07b      	beq.n	811aa7c <tcp_slowtmr+0x604>
      tcp_err_fn err_fn = pcb->errf;
 811a984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 811a98a:	613b      	str	r3, [r7, #16]
      tcp_pcb_purge(pcb);
 811a98c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 811a98e:	f000 fcd5 	bl	811b33c <tcp_pcb_purge>
      if (prev != NULL) {
 811a992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811a994:	2b00      	cmp	r3, #0
 811a996:	d010      	beq.n	811a9ba <tcp_slowtmr+0x542>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 811a998:	4b32      	ldr	r3, [pc, #200]	@ (811aa64 <tcp_slowtmr+0x5ec>)
 811a99a:	681b      	ldr	r3, [r3, #0]
 811a99c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 811a99e:	429a      	cmp	r2, r3
 811a9a0:	d106      	bne.n	811a9b0 <tcp_slowtmr+0x538>
 811a9a2:	4b31      	ldr	r3, [pc, #196]	@ (811aa68 <tcp_slowtmr+0x5f0>)
 811a9a4:	f240 526d 	movw	r2, #1389	@ 0x56d
 811a9a8:	4930      	ldr	r1, [pc, #192]	@ (811aa6c <tcp_slowtmr+0x5f4>)
 811a9aa:	4831      	ldr	r0, [pc, #196]	@ (811aa70 <tcp_slowtmr+0x5f8>)
 811a9ac:	f007 fc5a 	bl	8122264 <iprintf>
        prev->next = pcb->next;
 811a9b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a9b2:	68da      	ldr	r2, [r3, #12]
 811a9b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811a9b6:	60da      	str	r2, [r3, #12]
 811a9b8:	e00f      	b.n	811a9da <tcp_slowtmr+0x562>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 811a9ba:	4b2a      	ldr	r3, [pc, #168]	@ (811aa64 <tcp_slowtmr+0x5ec>)
 811a9bc:	681b      	ldr	r3, [r3, #0]
 811a9be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 811a9c0:	429a      	cmp	r2, r3
 811a9c2:	d006      	beq.n	811a9d2 <tcp_slowtmr+0x55a>
 811a9c4:	4b28      	ldr	r3, [pc, #160]	@ (811aa68 <tcp_slowtmr+0x5f0>)
 811a9c6:	f240 5271 	movw	r2, #1393	@ 0x571
 811a9ca:	492a      	ldr	r1, [pc, #168]	@ (811aa74 <tcp_slowtmr+0x5fc>)
 811a9cc:	4828      	ldr	r0, [pc, #160]	@ (811aa70 <tcp_slowtmr+0x5f8>)
 811a9ce:	f007 fc49 	bl	8122264 <iprintf>
        tcp_active_pcbs = pcb->next;
 811a9d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a9d4:	68db      	ldr	r3, [r3, #12]
 811a9d6:	4a23      	ldr	r2, [pc, #140]	@ (811aa64 <tcp_slowtmr+0x5ec>)
 811a9d8:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 811a9da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 811a9de:	2b00      	cmp	r3, #0
 811a9e0:	d013      	beq.n	811aa0a <tcp_slowtmr+0x592>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 811a9e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a9e4:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 811a9e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a9e8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 811a9ea:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
 811a9ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811a9ee:	3304      	adds	r3, #4
 811a9f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 811a9f2:	8ad2      	ldrh	r2, [r2, #22]
 811a9f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 811a9f6:	8b09      	ldrh	r1, [r1, #24]
 811a9f8:	9102      	str	r1, [sp, #8]
 811a9fa:	9201      	str	r2, [sp, #4]
 811a9fc:	9300      	str	r3, [sp, #0]
 811a9fe:	462b      	mov	r3, r5
 811aa00:	4622      	mov	r2, r4
 811aa02:	4601      	mov	r1, r0
 811aa04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 811aa06:	f005 f88b 	bl	811fb20 <tcp_rst>
      err_arg = pcb->callback_arg;
 811aa0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811aa0c:	691b      	ldr	r3, [r3, #16]
 811aa0e:	60fb      	str	r3, [r7, #12]
      last_state = pcb->state;
 811aa10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811aa12:	7d1b      	ldrb	r3, [r3, #20]
 811aa14:	72fb      	strb	r3, [r7, #11]
      pcb2 = pcb;
 811aa16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811aa18:	607b      	str	r3, [r7, #4]
      pcb = pcb->next;
 811aa1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811aa1c:	68db      	ldr	r3, [r3, #12]
 811aa1e:	633b      	str	r3, [r7, #48]	@ 0x30
      tcp_free(pcb2);
 811aa20:	6878      	ldr	r0, [r7, #4]
 811aa22:	f7fe ff59 	bl	81198d8 <tcp_free>
      tcp_active_pcbs_changed = 0;
 811aa26:	4b14      	ldr	r3, [pc, #80]	@ (811aa78 <tcp_slowtmr+0x600>)
 811aa28:	2200      	movs	r2, #0
 811aa2a:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 811aa2c:	693b      	ldr	r3, [r7, #16]
 811aa2e:	2b00      	cmp	r3, #0
 811aa30:	d004      	beq.n	811aa3c <tcp_slowtmr+0x5c4>
 811aa32:	693b      	ldr	r3, [r7, #16]
 811aa34:	f06f 010c 	mvn.w	r1, #12
 811aa38:	68f8      	ldr	r0, [r7, #12]
 811aa3a:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 811aa3c:	4b0e      	ldr	r3, [pc, #56]	@ (811aa78 <tcp_slowtmr+0x600>)
 811aa3e:	781b      	ldrb	r3, [r3, #0]
 811aa40:	2b00      	cmp	r3, #0
 811aa42:	d058      	beq.n	811aaf6 <tcp_slowtmr+0x67e>
        goto tcp_slowtmr_start;
 811aa44:	e52b      	b.n	811a49e <tcp_slowtmr+0x26>
 811aa46:	bf00      	nop
 811aa48:	10011e58 	.word	0x10011e58
 811aa4c:	0812641c 	.word	0x0812641c
 811aa50:	10624dd3 	.word	0x10624dd3
 811aa54:	0812644c 	.word	0x0812644c
 811aa58:	08126484 	.word	0x08126484
 811aa5c:	08126494 	.word	0x08126494
 811aa60:	081264c0 	.word	0x081264c0
 811aa64:	10011e64 	.word	0x10011e64
 811aa68:	08125e58 	.word	0x08125e58
 811aa6c:	081264ec 	.word	0x081264ec
 811aa70:	08125edc 	.word	0x08125edc
 811aa74:	08126518 	.word	0x08126518
 811aa78:	10011e6c 	.word	0x10011e6c
      prev = pcb;
 811aa7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811aa7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pcb = pcb->next;
 811aa80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811aa82:	68db      	ldr	r3, [r3, #12]
 811aa84:	633b      	str	r3, [r7, #48]	@ 0x30
      ++prev->polltmr;
 811aa86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811aa88:	7f1b      	ldrb	r3, [r3, #28]
 811aa8a:	3301      	adds	r3, #1
 811aa8c:	b2da      	uxtb	r2, r3
 811aa8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811aa90:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 811aa92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811aa94:	7f1a      	ldrb	r2, [r3, #28]
 811aa96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811aa98:	7f5b      	ldrb	r3, [r3, #29]
 811aa9a:	429a      	cmp	r2, r3
 811aa9c:	d32b      	bcc.n	811aaf6 <tcp_slowtmr+0x67e>
        prev->polltmr = 0;
 811aa9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811aaa0:	2200      	movs	r2, #0
 811aaa2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
 811aaa4:	4846      	ldr	r0, [pc, #280]	@ (811abc0 <tcp_slowtmr+0x748>)
 811aaa6:	f007 fc4d 	bl	8122344 <puts>
 811aaaa:	200d      	movs	r0, #13
 811aaac:	f007 fbec 	bl	8122288 <putchar>
        tcp_active_pcbs_changed = 0;
 811aab0:	4b44      	ldr	r3, [pc, #272]	@ (811abc4 <tcp_slowtmr+0x74c>)
 811aab2:	2200      	movs	r2, #0
 811aab4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 811aab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811aab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 811aabc:	2b00      	cmp	r3, #0
 811aabe:	d00b      	beq.n	811aad8 <tcp_slowtmr+0x660>
 811aac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811aac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 811aac6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 811aac8:	6912      	ldr	r2, [r2, #16]
 811aaca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 811aacc:	4610      	mov	r0, r2
 811aace:	4798      	blx	r3
 811aad0:	4603      	mov	r3, r0
 811aad2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 811aad6:	e002      	b.n	811aade <tcp_slowtmr+0x666>
 811aad8:	2300      	movs	r3, #0
 811aada:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        if (tcp_active_pcbs_changed) {
 811aade:	4b39      	ldr	r3, [pc, #228]	@ (811abc4 <tcp_slowtmr+0x74c>)
 811aae0:	781b      	ldrb	r3, [r3, #0]
 811aae2:	2b00      	cmp	r3, #0
 811aae4:	f47f acda 	bne.w	811a49c <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 811aae8:	f997 302a 	ldrsb.w	r3, [r7, #42]	@ 0x2a
 811aaec:	2b00      	cmp	r3, #0
 811aaee:	d102      	bne.n	811aaf6 <tcp_slowtmr+0x67e>
          tcp_output(prev);
 811aaf0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 811aaf2:	f004 fa55 	bl	811efa0 <tcp_output>
  while (pcb != NULL) {
 811aaf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811aaf8:	2b00      	cmp	r3, #0
 811aafa:	f47f ace0 	bne.w	811a4be <tcp_slowtmr+0x46>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 811aafe:	2300      	movs	r3, #0
 811ab00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pcb = tcp_tw_pcbs;
 811ab02:	4b31      	ldr	r3, [pc, #196]	@ (811abc8 <tcp_slowtmr+0x750>)
 811ab04:	681b      	ldr	r3, [r3, #0]
 811ab06:	633b      	str	r3, [r7, #48]	@ 0x30
  while (pcb != NULL) {
 811ab08:	e052      	b.n	811abb0 <tcp_slowtmr+0x738>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 811ab0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811ab0c:	7d1b      	ldrb	r3, [r3, #20]
 811ab0e:	2b0a      	cmp	r3, #10
 811ab10:	d006      	beq.n	811ab20 <tcp_slowtmr+0x6a8>
 811ab12:	4b2e      	ldr	r3, [pc, #184]	@ (811abcc <tcp_slowtmr+0x754>)
 811ab14:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 811ab18:	492d      	ldr	r1, [pc, #180]	@ (811abd0 <tcp_slowtmr+0x758>)
 811ab1a:	482e      	ldr	r0, [pc, #184]	@ (811abd4 <tcp_slowtmr+0x75c>)
 811ab1c:	f007 fba2 	bl	8122264 <iprintf>
    pcb_remove = 0;
 811ab20:	2300      	movs	r3, #0
 811ab22:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 811ab26:	4b2c      	ldr	r3, [pc, #176]	@ (811abd8 <tcp_slowtmr+0x760>)
 811ab28:	681a      	ldr	r2, [r3, #0]
 811ab2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811ab2c:	6a1b      	ldr	r3, [r3, #32]
 811ab2e:	1ad3      	subs	r3, r2, r3
 811ab30:	2bf0      	cmp	r3, #240	@ 0xf0
 811ab32:	d904      	bls.n	811ab3e <tcp_slowtmr+0x6c6>
      ++pcb_remove;
 811ab34:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 811ab38:	3301      	adds	r3, #1
 811ab3a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 811ab3e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 811ab42:	2b00      	cmp	r3, #0
 811ab44:	d02f      	beq.n	811aba6 <tcp_slowtmr+0x72e>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 811ab46:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 811ab48:	f000 fbf8 	bl	811b33c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 811ab4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ab4e:	2b00      	cmp	r3, #0
 811ab50:	d010      	beq.n	811ab74 <tcp_slowtmr+0x6fc>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 811ab52:	4b1d      	ldr	r3, [pc, #116]	@ (811abc8 <tcp_slowtmr+0x750>)
 811ab54:	681b      	ldr	r3, [r3, #0]
 811ab56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 811ab58:	429a      	cmp	r2, r3
 811ab5a:	d106      	bne.n	811ab6a <tcp_slowtmr+0x6f2>
 811ab5c:	4b1b      	ldr	r3, [pc, #108]	@ (811abcc <tcp_slowtmr+0x754>)
 811ab5e:	f240 52af 	movw	r2, #1455	@ 0x5af
 811ab62:	491e      	ldr	r1, [pc, #120]	@ (811abdc <tcp_slowtmr+0x764>)
 811ab64:	481b      	ldr	r0, [pc, #108]	@ (811abd4 <tcp_slowtmr+0x75c>)
 811ab66:	f007 fb7d 	bl	8122264 <iprintf>
        prev->next = pcb->next;
 811ab6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811ab6c:	68da      	ldr	r2, [r3, #12]
 811ab6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811ab70:	60da      	str	r2, [r3, #12]
 811ab72:	e00f      	b.n	811ab94 <tcp_slowtmr+0x71c>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 811ab74:	4b14      	ldr	r3, [pc, #80]	@ (811abc8 <tcp_slowtmr+0x750>)
 811ab76:	681b      	ldr	r3, [r3, #0]
 811ab78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 811ab7a:	429a      	cmp	r2, r3
 811ab7c:	d006      	beq.n	811ab8c <tcp_slowtmr+0x714>
 811ab7e:	4b13      	ldr	r3, [pc, #76]	@ (811abcc <tcp_slowtmr+0x754>)
 811ab80:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 811ab84:	4916      	ldr	r1, [pc, #88]	@ (811abe0 <tcp_slowtmr+0x768>)
 811ab86:	4813      	ldr	r0, [pc, #76]	@ (811abd4 <tcp_slowtmr+0x75c>)
 811ab88:	f007 fb6c 	bl	8122264 <iprintf>
        tcp_tw_pcbs = pcb->next;
 811ab8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811ab8e:	68db      	ldr	r3, [r3, #12]
 811ab90:	4a0d      	ldr	r2, [pc, #52]	@ (811abc8 <tcp_slowtmr+0x750>)
 811ab92:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 811ab94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811ab96:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 811ab98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811ab9a:	68db      	ldr	r3, [r3, #12]
 811ab9c:	633b      	str	r3, [r7, #48]	@ 0x30
      tcp_free(pcb2);
 811ab9e:	6a38      	ldr	r0, [r7, #32]
 811aba0:	f7fe fe9a 	bl	81198d8 <tcp_free>
 811aba4:	e004      	b.n	811abb0 <tcp_slowtmr+0x738>
    } else {
      prev = pcb;
 811aba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811aba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pcb = pcb->next;
 811abaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811abac:	68db      	ldr	r3, [r3, #12]
 811abae:	633b      	str	r3, [r7, #48]	@ 0x30
  while (pcb != NULL) {
 811abb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811abb2:	2b00      	cmp	r3, #0
 811abb4:	d1a9      	bne.n	811ab0a <tcp_slowtmr+0x692>
    }
  }
}
 811abb6:	bf00      	nop
 811abb8:	bf00      	nop
 811abba:	3738      	adds	r7, #56	@ 0x38
 811abbc:	46bd      	mov	sp, r7
 811abbe:	bdb0      	pop	{r4, r5, r7, pc}
 811abc0:	08126544 	.word	0x08126544
 811abc4:	10011e6c 	.word	0x10011e6c
 811abc8:	10011e68 	.word	0x10011e68
 811abcc:	08125e58 	.word	0x08125e58
 811abd0:	08126568 	.word	0x08126568
 811abd4:	08125edc 	.word	0x08125edc
 811abd8:	10011e58 	.word	0x10011e58
 811abdc:	08126598 	.word	0x08126598
 811abe0:	081265c0 	.word	0x081265c0

0811abe4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 811abe4:	b580      	push	{r7, lr}
 811abe6:	b082      	sub	sp, #8
 811abe8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 811abea:	4b33      	ldr	r3, [pc, #204]	@ (811acb8 <tcp_fasttmr+0xd4>)
 811abec:	781b      	ldrb	r3, [r3, #0]
 811abee:	3301      	adds	r3, #1
 811abf0:	b2da      	uxtb	r2, r3
 811abf2:	4b31      	ldr	r3, [pc, #196]	@ (811acb8 <tcp_fasttmr+0xd4>)
 811abf4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 811abf6:	4b31      	ldr	r3, [pc, #196]	@ (811acbc <tcp_fasttmr+0xd8>)
 811abf8:	681b      	ldr	r3, [r3, #0]
 811abfa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 811abfc:	e054      	b.n	811aca8 <tcp_fasttmr+0xc4>
    if (pcb->last_timer != tcp_timer_ctr) {
 811abfe:	687b      	ldr	r3, [r7, #4]
 811ac00:	7f9a      	ldrb	r2, [r3, #30]
 811ac02:	4b2d      	ldr	r3, [pc, #180]	@ (811acb8 <tcp_fasttmr+0xd4>)
 811ac04:	781b      	ldrb	r3, [r3, #0]
 811ac06:	429a      	cmp	r2, r3
 811ac08:	d04b      	beq.n	811aca2 <tcp_fasttmr+0xbe>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 811ac0a:	4b2b      	ldr	r3, [pc, #172]	@ (811acb8 <tcp_fasttmr+0xd4>)
 811ac0c:	781a      	ldrb	r2, [r3, #0]
 811ac0e:	687b      	ldr	r3, [r7, #4]
 811ac10:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 811ac12:	687b      	ldr	r3, [r7, #4]
 811ac14:	8b5b      	ldrh	r3, [r3, #26]
 811ac16:	f003 0301 	and.w	r3, r3, #1
 811ac1a:	2b00      	cmp	r3, #0
 811ac1c:	d016      	beq.n	811ac4c <tcp_fasttmr+0x68>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
 811ac1e:	4828      	ldr	r0, [pc, #160]	@ (811acc0 <tcp_fasttmr+0xdc>)
 811ac20:	f007 fb90 	bl	8122344 <puts>
 811ac24:	200d      	movs	r0, #13
 811ac26:	f007 fb2f 	bl	8122288 <putchar>
        tcp_ack_now(pcb);
 811ac2a:	687b      	ldr	r3, [r7, #4]
 811ac2c:	8b5b      	ldrh	r3, [r3, #26]
 811ac2e:	f043 0302 	orr.w	r3, r3, #2
 811ac32:	b29a      	uxth	r2, r3
 811ac34:	687b      	ldr	r3, [r7, #4]
 811ac36:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 811ac38:	6878      	ldr	r0, [r7, #4]
 811ac3a:	f004 f9b1 	bl	811efa0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 811ac3e:	687b      	ldr	r3, [r7, #4]
 811ac40:	8b5b      	ldrh	r3, [r3, #26]
 811ac42:	f023 0303 	bic.w	r3, r3, #3
 811ac46:	b29a      	uxth	r2, r3
 811ac48:	687b      	ldr	r3, [r7, #4]
 811ac4a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 811ac4c:	687b      	ldr	r3, [r7, #4]
 811ac4e:	8b5b      	ldrh	r3, [r3, #26]
 811ac50:	f003 0308 	and.w	r3, r3, #8
 811ac54:	2b00      	cmp	r3, #0
 811ac56:	d00f      	beq.n	811ac78 <tcp_fasttmr+0x94>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
 811ac58:	481a      	ldr	r0, [pc, #104]	@ (811acc4 <tcp_fasttmr+0xe0>)
 811ac5a:	f007 fb73 	bl	8122344 <puts>
 811ac5e:	200d      	movs	r0, #13
 811ac60:	f007 fb12 	bl	8122288 <putchar>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 811ac64:	687b      	ldr	r3, [r7, #4]
 811ac66:	8b5b      	ldrh	r3, [r3, #26]
 811ac68:	f023 0308 	bic.w	r3, r3, #8
 811ac6c:	b29a      	uxth	r2, r3
 811ac6e:	687b      	ldr	r3, [r7, #4]
 811ac70:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 811ac72:	6878      	ldr	r0, [r7, #4]
 811ac74:	f7fe ffc4 	bl	8119c00 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 811ac78:	687b      	ldr	r3, [r7, #4]
 811ac7a:	68db      	ldr	r3, [r3, #12]
 811ac7c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 811ac7e:	687b      	ldr	r3, [r7, #4]
 811ac80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811ac82:	2b00      	cmp	r3, #0
 811ac84:	d00a      	beq.n	811ac9c <tcp_fasttmr+0xb8>
        tcp_active_pcbs_changed = 0;
 811ac86:	4b10      	ldr	r3, [pc, #64]	@ (811acc8 <tcp_fasttmr+0xe4>)
 811ac88:	2200      	movs	r2, #0
 811ac8a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 811ac8c:	6878      	ldr	r0, [r7, #4]
 811ac8e:	f000 f81d 	bl	811accc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 811ac92:	4b0d      	ldr	r3, [pc, #52]	@ (811acc8 <tcp_fasttmr+0xe4>)
 811ac94:	781b      	ldrb	r3, [r3, #0]
 811ac96:	2b00      	cmp	r3, #0
 811ac98:	d000      	beq.n	811ac9c <tcp_fasttmr+0xb8>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 811ac9a:	e7ac      	b.n	811abf6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 811ac9c:	683b      	ldr	r3, [r7, #0]
 811ac9e:	607b      	str	r3, [r7, #4]
 811aca0:	e002      	b.n	811aca8 <tcp_fasttmr+0xc4>
    } else {
      pcb = pcb->next;
 811aca2:	687b      	ldr	r3, [r7, #4]
 811aca4:	68db      	ldr	r3, [r3, #12]
 811aca6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 811aca8:	687b      	ldr	r3, [r7, #4]
 811acaa:	2b00      	cmp	r3, #0
 811acac:	d1a7      	bne.n	811abfe <tcp_fasttmr+0x1a>
    }
  }
}
 811acae:	bf00      	nop
 811acb0:	bf00      	nop
 811acb2:	3708      	adds	r7, #8
 811acb4:	46bd      	mov	sp, r7
 811acb6:	bd80      	pop	{r7, pc}
 811acb8:	10011e6e 	.word	0x10011e6e
 811acbc:	10011e64 	.word	0x10011e64
 811acc0:	081265e8 	.word	0x081265e8
 811acc4:	08126604 	.word	0x08126604
 811acc8:	10011e6c 	.word	0x10011e6c

0811accc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 811accc:	b590      	push	{r4, r7, lr}
 811acce:	b085      	sub	sp, #20
 811acd0:	af00      	add	r7, sp, #0
 811acd2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 811acd4:	687b      	ldr	r3, [r7, #4]
 811acd6:	2b00      	cmp	r3, #0
 811acd8:	d109      	bne.n	811acee <tcp_process_refused_data+0x22>
 811acda:	4b38      	ldr	r3, [pc, #224]	@ (811adbc <tcp_process_refused_data+0xf0>)
 811acdc:	f240 6209 	movw	r2, #1545	@ 0x609
 811ace0:	4937      	ldr	r1, [pc, #220]	@ (811adc0 <tcp_process_refused_data+0xf4>)
 811ace2:	4838      	ldr	r0, [pc, #224]	@ (811adc4 <tcp_process_refused_data+0xf8>)
 811ace4:	f007 fabe 	bl	8122264 <iprintf>
 811ace8:	f06f 030f 	mvn.w	r3, #15
 811acec:	e061      	b.n	811adb2 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 811acee:	687b      	ldr	r3, [r7, #4]
 811acf0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811acf2:	7b5b      	ldrb	r3, [r3, #13]
 811acf4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 811acf6:	687b      	ldr	r3, [r7, #4]
 811acf8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811acfa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 811acfc:	687b      	ldr	r3, [r7, #4]
 811acfe:	2200      	movs	r2, #0
 811ad00:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 811ad02:	687b      	ldr	r3, [r7, #4]
 811ad04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 811ad08:	2b00      	cmp	r3, #0
 811ad0a:	d00b      	beq.n	811ad24 <tcp_process_refused_data+0x58>
 811ad0c:	687b      	ldr	r3, [r7, #4]
 811ad0e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 811ad12:	687b      	ldr	r3, [r7, #4]
 811ad14:	6918      	ldr	r0, [r3, #16]
 811ad16:	2300      	movs	r3, #0
 811ad18:	68ba      	ldr	r2, [r7, #8]
 811ad1a:	6879      	ldr	r1, [r7, #4]
 811ad1c:	47a0      	blx	r4
 811ad1e:	4603      	mov	r3, r0
 811ad20:	73fb      	strb	r3, [r7, #15]
 811ad22:	e007      	b.n	811ad34 <tcp_process_refused_data+0x68>
 811ad24:	2300      	movs	r3, #0
 811ad26:	68ba      	ldr	r2, [r7, #8]
 811ad28:	6879      	ldr	r1, [r7, #4]
 811ad2a:	2000      	movs	r0, #0
 811ad2c:	f000 f8a8 	bl	811ae80 <tcp_recv_null>
 811ad30:	4603      	mov	r3, r0
 811ad32:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 811ad34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811ad38:	2b00      	cmp	r3, #0
 811ad3a:	d12b      	bne.n	811ad94 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 811ad3c:	7bbb      	ldrb	r3, [r7, #14]
 811ad3e:	f003 0320 	and.w	r3, r3, #32
 811ad42:	2b00      	cmp	r3, #0
 811ad44:	d034      	beq.n	811adb0 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 811ad46:	687b      	ldr	r3, [r7, #4]
 811ad48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811ad4a:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 811ad4e:	4293      	cmp	r3, r2
 811ad50:	d005      	beq.n	811ad5e <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 811ad52:	687b      	ldr	r3, [r7, #4]
 811ad54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811ad56:	3301      	adds	r3, #1
 811ad58:	b29a      	uxth	r2, r3
 811ad5a:	687b      	ldr	r3, [r7, #4]
 811ad5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 811ad5e:	687b      	ldr	r3, [r7, #4]
 811ad60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 811ad64:	2b00      	cmp	r3, #0
 811ad66:	d00b      	beq.n	811ad80 <tcp_process_refused_data+0xb4>
 811ad68:	687b      	ldr	r3, [r7, #4]
 811ad6a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 811ad6e:	687b      	ldr	r3, [r7, #4]
 811ad70:	6918      	ldr	r0, [r3, #16]
 811ad72:	2300      	movs	r3, #0
 811ad74:	2200      	movs	r2, #0
 811ad76:	6879      	ldr	r1, [r7, #4]
 811ad78:	47a0      	blx	r4
 811ad7a:	4603      	mov	r3, r0
 811ad7c:	73fb      	strb	r3, [r7, #15]
 811ad7e:	e001      	b.n	811ad84 <tcp_process_refused_data+0xb8>
 811ad80:	2300      	movs	r3, #0
 811ad82:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 811ad84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811ad88:	f113 0f0d 	cmn.w	r3, #13
 811ad8c:	d110      	bne.n	811adb0 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 811ad8e:	f06f 030c 	mvn.w	r3, #12
 811ad92:	e00e      	b.n	811adb2 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 811ad94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811ad98:	f113 0f0d 	cmn.w	r3, #13
 811ad9c:	d102      	bne.n	811ada4 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 811ad9e:	f06f 030c 	mvn.w	r3, #12
 811ada2:	e006      	b.n	811adb2 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 811ada4:	687b      	ldr	r3, [r7, #4]
 811ada6:	68ba      	ldr	r2, [r7, #8]
 811ada8:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 811adaa:	f06f 0304 	mvn.w	r3, #4
 811adae:	e000      	b.n	811adb2 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 811adb0:	2300      	movs	r3, #0
}
 811adb2:	4618      	mov	r0, r3
 811adb4:	3714      	adds	r7, #20
 811adb6:	46bd      	mov	sp, r7
 811adb8:	bd90      	pop	{r4, r7, pc}
 811adba:	bf00      	nop
 811adbc:	08125e58 	.word	0x08125e58
 811adc0:	08126620 	.word	0x08126620
 811adc4:	08125edc 	.word	0x08125edc

0811adc8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 811adc8:	b580      	push	{r7, lr}
 811adca:	b084      	sub	sp, #16
 811adcc:	af00      	add	r7, sp, #0
 811adce:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 811add0:	e007      	b.n	811ade2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 811add2:	687b      	ldr	r3, [r7, #4]
 811add4:	681b      	ldr	r3, [r3, #0]
 811add6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 811add8:	6878      	ldr	r0, [r7, #4]
 811adda:	f000 f80a 	bl	811adf2 <tcp_seg_free>
    seg = next;
 811adde:	68fb      	ldr	r3, [r7, #12]
 811ade0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 811ade2:	687b      	ldr	r3, [r7, #4]
 811ade4:	2b00      	cmp	r3, #0
 811ade6:	d1f4      	bne.n	811add2 <tcp_segs_free+0xa>
  }
}
 811ade8:	bf00      	nop
 811adea:	bf00      	nop
 811adec:	3710      	adds	r7, #16
 811adee:	46bd      	mov	sp, r7
 811adf0:	bd80      	pop	{r7, pc}

0811adf2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 811adf2:	b580      	push	{r7, lr}
 811adf4:	b082      	sub	sp, #8
 811adf6:	af00      	add	r7, sp, #0
 811adf8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 811adfa:	687b      	ldr	r3, [r7, #4]
 811adfc:	2b00      	cmp	r3, #0
 811adfe:	d00f      	beq.n	811ae20 <tcp_seg_free+0x2e>
    if (seg->p != NULL) {
 811ae00:	687b      	ldr	r3, [r7, #4]
 811ae02:	685b      	ldr	r3, [r3, #4]
 811ae04:	2b00      	cmp	r3, #0
 811ae06:	d007      	beq.n	811ae18 <tcp_seg_free+0x26>
      pbuf_free(seg->p);
 811ae08:	687b      	ldr	r3, [r7, #4]
 811ae0a:	685b      	ldr	r3, [r3, #4]
 811ae0c:	4618      	mov	r0, r3
 811ae0e:	f7fe f9b5 	bl	811917c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
 811ae12:	687b      	ldr	r3, [r7, #4]
 811ae14:	2200      	movs	r2, #0
 811ae16:	605a      	str	r2, [r3, #4]
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 811ae18:	6879      	ldr	r1, [r7, #4]
 811ae1a:	2003      	movs	r0, #3
 811ae1c:	f7fd f9ec 	bl	81181f8 <memp_free>
  }
}
 811ae20:	bf00      	nop
 811ae22:	3708      	adds	r7, #8
 811ae24:	46bd      	mov	sp, r7
 811ae26:	bd80      	pop	{r7, pc}

0811ae28 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 811ae28:	b580      	push	{r7, lr}
 811ae2a:	b084      	sub	sp, #16
 811ae2c:	af00      	add	r7, sp, #0
 811ae2e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 811ae30:	687b      	ldr	r3, [r7, #4]
 811ae32:	2b00      	cmp	r3, #0
 811ae34:	d106      	bne.n	811ae44 <tcp_seg_copy+0x1c>
 811ae36:	4b0f      	ldr	r3, [pc, #60]	@ (811ae74 <tcp_seg_copy+0x4c>)
 811ae38:	f240 6282 	movw	r2, #1666	@ 0x682
 811ae3c:	490e      	ldr	r1, [pc, #56]	@ (811ae78 <tcp_seg_copy+0x50>)
 811ae3e:	480f      	ldr	r0, [pc, #60]	@ (811ae7c <tcp_seg_copy+0x54>)
 811ae40:	f007 fa10 	bl	8122264 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 811ae44:	2003      	movs	r0, #3
 811ae46:	f7fd f961 	bl	811810c <memp_malloc>
 811ae4a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 811ae4c:	68fb      	ldr	r3, [r7, #12]
 811ae4e:	2b00      	cmp	r3, #0
 811ae50:	d101      	bne.n	811ae56 <tcp_seg_copy+0x2e>
    return NULL;
 811ae52:	2300      	movs	r3, #0
 811ae54:	e00a      	b.n	811ae6c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 811ae56:	2214      	movs	r2, #20
 811ae58:	6879      	ldr	r1, [r7, #4]
 811ae5a:	68f8      	ldr	r0, [r7, #12]
 811ae5c:	f007 fcf7 	bl	812284e <memcpy>
  pbuf_ref(cseg->p);
 811ae60:	68fb      	ldr	r3, [r7, #12]
 811ae62:	685b      	ldr	r3, [r3, #4]
 811ae64:	4618      	mov	r0, r3
 811ae66:	f7fe fa2f 	bl	81192c8 <pbuf_ref>
  return cseg;
 811ae6a:	68fb      	ldr	r3, [r7, #12]
}
 811ae6c:	4618      	mov	r0, r3
 811ae6e:	3710      	adds	r7, #16
 811ae70:	46bd      	mov	sp, r7
 811ae72:	bd80      	pop	{r7, pc}
 811ae74:	08125e58 	.word	0x08125e58
 811ae78:	08126664 	.word	0x08126664
 811ae7c:	08125edc 	.word	0x08125edc

0811ae80 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 811ae80:	b580      	push	{r7, lr}
 811ae82:	b084      	sub	sp, #16
 811ae84:	af00      	add	r7, sp, #0
 811ae86:	60f8      	str	r0, [r7, #12]
 811ae88:	60b9      	str	r1, [r7, #8]
 811ae8a:	607a      	str	r2, [r7, #4]
 811ae8c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 811ae8e:	68bb      	ldr	r3, [r7, #8]
 811ae90:	2b00      	cmp	r3, #0
 811ae92:	d109      	bne.n	811aea8 <tcp_recv_null+0x28>
 811ae94:	4b12      	ldr	r3, [pc, #72]	@ (811aee0 <tcp_recv_null+0x60>)
 811ae96:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 811ae9a:	4912      	ldr	r1, [pc, #72]	@ (811aee4 <tcp_recv_null+0x64>)
 811ae9c:	4812      	ldr	r0, [pc, #72]	@ (811aee8 <tcp_recv_null+0x68>)
 811ae9e:	f007 f9e1 	bl	8122264 <iprintf>
 811aea2:	f06f 030f 	mvn.w	r3, #15
 811aea6:	e016      	b.n	811aed6 <tcp_recv_null+0x56>

  if (p != NULL) {
 811aea8:	687b      	ldr	r3, [r7, #4]
 811aeaa:	2b00      	cmp	r3, #0
 811aeac:	d009      	beq.n	811aec2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 811aeae:	687b      	ldr	r3, [r7, #4]
 811aeb0:	891b      	ldrh	r3, [r3, #8]
 811aeb2:	4619      	mov	r1, r3
 811aeb4:	68b8      	ldr	r0, [r7, #8]
 811aeb6:	f7ff f90b 	bl	811a0d0 <tcp_recved>
    pbuf_free(p);
 811aeba:	6878      	ldr	r0, [r7, #4]
 811aebc:	f7fe f95e 	bl	811917c <pbuf_free>
 811aec0:	e008      	b.n	811aed4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 811aec2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 811aec6:	2b00      	cmp	r3, #0
 811aec8:	d104      	bne.n	811aed4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 811aeca:	68b8      	ldr	r0, [r7, #8]
 811aecc:	f7fe ff02 	bl	8119cd4 <tcp_close>
 811aed0:	4603      	mov	r3, r0
 811aed2:	e000      	b.n	811aed6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 811aed4:	2300      	movs	r3, #0
}
 811aed6:	4618      	mov	r0, r3
 811aed8:	3710      	adds	r7, #16
 811aeda:	46bd      	mov	sp, r7
 811aedc:	bd80      	pop	{r7, pc}
 811aede:	bf00      	nop
 811aee0:	08125e58 	.word	0x08125e58
 811aee4:	08126680 	.word	0x08126680
 811aee8:	08125edc 	.word	0x08125edc

0811aeec <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 811aeec:	b580      	push	{r7, lr}
 811aeee:	b086      	sub	sp, #24
 811aef0:	af00      	add	r7, sp, #0
 811aef2:	4603      	mov	r3, r0
 811aef4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 811aef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 811aefa:	2b00      	cmp	r3, #0
 811aefc:	db01      	blt.n	811af02 <tcp_kill_prio+0x16>
 811aefe:	79fb      	ldrb	r3, [r7, #7]
 811af00:	e000      	b.n	811af04 <tcp_kill_prio+0x18>
 811af02:	237f      	movs	r3, #127	@ 0x7f
 811af04:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 811af06:	7afb      	ldrb	r3, [r7, #11]
 811af08:	2b00      	cmp	r3, #0
 811af0a:	d03c      	beq.n	811af86 <tcp_kill_prio+0x9a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 811af0c:	7afb      	ldrb	r3, [r7, #11]
 811af0e:	3b01      	subs	r3, #1
 811af10:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 811af12:	2300      	movs	r3, #0
 811af14:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 811af16:	2300      	movs	r3, #0
 811af18:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 811af1a:	4b1d      	ldr	r3, [pc, #116]	@ (811af90 <tcp_kill_prio+0xa4>)
 811af1c:	681b      	ldr	r3, [r3, #0]
 811af1e:	617b      	str	r3, [r7, #20]
 811af20:	e01f      	b.n	811af62 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 811af22:	697b      	ldr	r3, [r7, #20]
 811af24:	7d5b      	ldrb	r3, [r3, #21]
 811af26:	7afa      	ldrb	r2, [r7, #11]
 811af28:	429a      	cmp	r2, r3
 811af2a:	d80c      	bhi.n	811af46 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 811af2c:	697b      	ldr	r3, [r7, #20]
 811af2e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 811af30:	7afa      	ldrb	r2, [r7, #11]
 811af32:	429a      	cmp	r2, r3
 811af34:	d112      	bne.n	811af5c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 811af36:	4b17      	ldr	r3, [pc, #92]	@ (811af94 <tcp_kill_prio+0xa8>)
 811af38:	681a      	ldr	r2, [r3, #0]
 811af3a:	697b      	ldr	r3, [r7, #20]
 811af3c:	6a1b      	ldr	r3, [r3, #32]
 811af3e:	1ad3      	subs	r3, r2, r3
 811af40:	68fa      	ldr	r2, [r7, #12]
 811af42:	429a      	cmp	r2, r3
 811af44:	d80a      	bhi.n	811af5c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 811af46:	4b13      	ldr	r3, [pc, #76]	@ (811af94 <tcp_kill_prio+0xa8>)
 811af48:	681a      	ldr	r2, [r3, #0]
 811af4a:	697b      	ldr	r3, [r7, #20]
 811af4c:	6a1b      	ldr	r3, [r3, #32]
 811af4e:	1ad3      	subs	r3, r2, r3
 811af50:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 811af52:	697b      	ldr	r3, [r7, #20]
 811af54:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 811af56:	697b      	ldr	r3, [r7, #20]
 811af58:	7d5b      	ldrb	r3, [r3, #21]
 811af5a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 811af5c:	697b      	ldr	r3, [r7, #20]
 811af5e:	68db      	ldr	r3, [r3, #12]
 811af60:	617b      	str	r3, [r7, #20]
 811af62:	697b      	ldr	r3, [r7, #20]
 811af64:	2b00      	cmp	r3, #0
 811af66:	d1dc      	bne.n	811af22 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 811af68:	693b      	ldr	r3, [r7, #16]
 811af6a:	2b00      	cmp	r3, #0
 811af6c:	d00c      	beq.n	811af88 <tcp_kill_prio+0x9c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
 811af6e:	68fa      	ldr	r2, [r7, #12]
 811af70:	6939      	ldr	r1, [r7, #16]
 811af72:	4809      	ldr	r0, [pc, #36]	@ (811af98 <tcp_kill_prio+0xac>)
 811af74:	f007 f976 	bl	8122264 <iprintf>
 811af78:	200d      	movs	r0, #13
 811af7a:	f007 f985 	bl	8122288 <putchar>
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 811af7e:	6938      	ldr	r0, [r7, #16]
 811af80:	f7fe ff9e 	bl	8119ec0 <tcp_abort>
 811af84:	e000      	b.n	811af88 <tcp_kill_prio+0x9c>
    return;
 811af86:	bf00      	nop
  }
}
 811af88:	3718      	adds	r7, #24
 811af8a:	46bd      	mov	sp, r7
 811af8c:	bd80      	pop	{r7, pc}
 811af8e:	bf00      	nop
 811af90:	10011e64 	.word	0x10011e64
 811af94:	10011e58 	.word	0x10011e58
 811af98:	0812669c 	.word	0x0812669c

0811af9c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 811af9c:	b580      	push	{r7, lr}
 811af9e:	b086      	sub	sp, #24
 811afa0:	af00      	add	r7, sp, #0
 811afa2:	4603      	mov	r3, r0
 811afa4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 811afa6:	79fb      	ldrb	r3, [r7, #7]
 811afa8:	2b08      	cmp	r3, #8
 811afaa:	d009      	beq.n	811afc0 <tcp_kill_state+0x24>
 811afac:	79fb      	ldrb	r3, [r7, #7]
 811afae:	2b09      	cmp	r3, #9
 811afb0:	d006      	beq.n	811afc0 <tcp_kill_state+0x24>
 811afb2:	4b20      	ldr	r3, [pc, #128]	@ (811b034 <tcp_kill_state+0x98>)
 811afb4:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 811afb8:	491f      	ldr	r1, [pc, #124]	@ (811b038 <tcp_kill_state+0x9c>)
 811afba:	4820      	ldr	r0, [pc, #128]	@ (811b03c <tcp_kill_state+0xa0>)
 811afbc:	f007 f952 	bl	8122264 <iprintf>

  inactivity = 0;
 811afc0:	2300      	movs	r3, #0
 811afc2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 811afc4:	2300      	movs	r3, #0
 811afc6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 811afc8:	4b1d      	ldr	r3, [pc, #116]	@ (811b040 <tcp_kill_state+0xa4>)
 811afca:	681b      	ldr	r3, [r3, #0]
 811afcc:	617b      	str	r3, [r7, #20]
 811afce:	e017      	b.n	811b000 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 811afd0:	697b      	ldr	r3, [r7, #20]
 811afd2:	7d1b      	ldrb	r3, [r3, #20]
 811afd4:	79fa      	ldrb	r2, [r7, #7]
 811afd6:	429a      	cmp	r2, r3
 811afd8:	d10f      	bne.n	811affa <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 811afda:	4b1a      	ldr	r3, [pc, #104]	@ (811b044 <tcp_kill_state+0xa8>)
 811afdc:	681a      	ldr	r2, [r3, #0]
 811afde:	697b      	ldr	r3, [r7, #20]
 811afe0:	6a1b      	ldr	r3, [r3, #32]
 811afe2:	1ad3      	subs	r3, r2, r3
 811afe4:	68fa      	ldr	r2, [r7, #12]
 811afe6:	429a      	cmp	r2, r3
 811afe8:	d807      	bhi.n	811affa <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 811afea:	4b16      	ldr	r3, [pc, #88]	@ (811b044 <tcp_kill_state+0xa8>)
 811afec:	681a      	ldr	r2, [r3, #0]
 811afee:	697b      	ldr	r3, [r7, #20]
 811aff0:	6a1b      	ldr	r3, [r3, #32]
 811aff2:	1ad3      	subs	r3, r2, r3
 811aff4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 811aff6:	697b      	ldr	r3, [r7, #20]
 811aff8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 811affa:	697b      	ldr	r3, [r7, #20]
 811affc:	68db      	ldr	r3, [r3, #12]
 811affe:	617b      	str	r3, [r7, #20]
 811b000:	697b      	ldr	r3, [r7, #20]
 811b002:	2b00      	cmp	r3, #0
 811b004:	d1e4      	bne.n	811afd0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 811b006:	693b      	ldr	r3, [r7, #16]
 811b008:	2b00      	cmp	r3, #0
 811b00a:	d00f      	beq.n	811b02c <tcp_kill_state+0x90>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
 811b00c:	79fb      	ldrb	r3, [r7, #7]
 811b00e:	4a0e      	ldr	r2, [pc, #56]	@ (811b048 <tcp_kill_state+0xac>)
 811b010:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 811b014:	68fb      	ldr	r3, [r7, #12]
 811b016:	693a      	ldr	r2, [r7, #16]
 811b018:	480c      	ldr	r0, [pc, #48]	@ (811b04c <tcp_kill_state+0xb0>)
 811b01a:	f007 f923 	bl	8122264 <iprintf>
 811b01e:	200d      	movs	r0, #13
 811b020:	f007 f932 	bl	8122288 <putchar>
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 811b024:	2100      	movs	r1, #0
 811b026:	6938      	ldr	r0, [r7, #16]
 811b028:	f7fe fe8c 	bl	8119d44 <tcp_abandon>
  }
}
 811b02c:	bf00      	nop
 811b02e:	3718      	adds	r7, #24
 811b030:	46bd      	mov	sp, r7
 811b032:	bd80      	pop	{r7, pc}
 811b034:	08125e58 	.word	0x08125e58
 811b038:	081266c8 	.word	0x081266c8
 811b03c:	08125edc 	.word	0x08125edc
 811b040:	10011e64 	.word	0x10011e64
 811b044:	10011e58 	.word	0x10011e58
 811b048:	08128ac0 	.word	0x08128ac0
 811b04c:	081266d8 	.word	0x081266d8

0811b050 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 811b050:	b580      	push	{r7, lr}
 811b052:	b084      	sub	sp, #16
 811b054:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 811b056:	2300      	movs	r3, #0
 811b058:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 811b05a:	2300      	movs	r3, #0
 811b05c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 811b05e:	4b16      	ldr	r3, [pc, #88]	@ (811b0b8 <tcp_kill_timewait+0x68>)
 811b060:	681b      	ldr	r3, [r3, #0]
 811b062:	60fb      	str	r3, [r7, #12]
 811b064:	e012      	b.n	811b08c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 811b066:	4b15      	ldr	r3, [pc, #84]	@ (811b0bc <tcp_kill_timewait+0x6c>)
 811b068:	681a      	ldr	r2, [r3, #0]
 811b06a:	68fb      	ldr	r3, [r7, #12]
 811b06c:	6a1b      	ldr	r3, [r3, #32]
 811b06e:	1ad3      	subs	r3, r2, r3
 811b070:	687a      	ldr	r2, [r7, #4]
 811b072:	429a      	cmp	r2, r3
 811b074:	d807      	bhi.n	811b086 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 811b076:	4b11      	ldr	r3, [pc, #68]	@ (811b0bc <tcp_kill_timewait+0x6c>)
 811b078:	681a      	ldr	r2, [r3, #0]
 811b07a:	68fb      	ldr	r3, [r7, #12]
 811b07c:	6a1b      	ldr	r3, [r3, #32]
 811b07e:	1ad3      	subs	r3, r2, r3
 811b080:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 811b082:	68fb      	ldr	r3, [r7, #12]
 811b084:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 811b086:	68fb      	ldr	r3, [r7, #12]
 811b088:	68db      	ldr	r3, [r3, #12]
 811b08a:	60fb      	str	r3, [r7, #12]
 811b08c:	68fb      	ldr	r3, [r7, #12]
 811b08e:	2b00      	cmp	r3, #0
 811b090:	d1e9      	bne.n	811b066 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 811b092:	68bb      	ldr	r3, [r7, #8]
 811b094:	2b00      	cmp	r3, #0
 811b096:	d00a      	beq.n	811b0ae <tcp_kill_timewait+0x5e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
 811b098:	687a      	ldr	r2, [r7, #4]
 811b09a:	68b9      	ldr	r1, [r7, #8]
 811b09c:	4808      	ldr	r0, [pc, #32]	@ (811b0c0 <tcp_kill_timewait+0x70>)
 811b09e:	f007 f8e1 	bl	8122264 <iprintf>
 811b0a2:	200d      	movs	r0, #13
 811b0a4:	f007 f8f0 	bl	8122288 <putchar>
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 811b0a8:	68b8      	ldr	r0, [r7, #8]
 811b0aa:	f7fe ff09 	bl	8119ec0 <tcp_abort>
  }
}
 811b0ae:	bf00      	nop
 811b0b0:	3710      	adds	r7, #16
 811b0b2:	46bd      	mov	sp, r7
 811b0b4:	bd80      	pop	{r7, pc}
 811b0b6:	bf00      	nop
 811b0b8:	10011e68 	.word	0x10011e68
 811b0bc:	10011e58 	.word	0x10011e58
 811b0c0:	0812670c 	.word	0x0812670c

0811b0c4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 811b0c4:	b580      	push	{r7, lr}
 811b0c6:	b082      	sub	sp, #8
 811b0c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 811b0ca:	4b13      	ldr	r3, [pc, #76]	@ (811b118 <tcp_handle_closepend+0x54>)
 811b0cc:	681b      	ldr	r3, [r3, #0]
 811b0ce:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 811b0d0:	e01a      	b.n	811b108 <tcp_handle_closepend+0x44>
    struct tcp_pcb *next = pcb->next;
 811b0d2:	687b      	ldr	r3, [r7, #4]
 811b0d4:	68db      	ldr	r3, [r3, #12]
 811b0d6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 811b0d8:	687b      	ldr	r3, [r7, #4]
 811b0da:	8b5b      	ldrh	r3, [r3, #26]
 811b0dc:	f003 0308 	and.w	r3, r3, #8
 811b0e0:	2b00      	cmp	r3, #0
 811b0e2:	d00f      	beq.n	811b104 <tcp_handle_closepend+0x40>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
 811b0e4:	480d      	ldr	r0, [pc, #52]	@ (811b11c <tcp_handle_closepend+0x58>)
 811b0e6:	f007 f92d 	bl	8122344 <puts>
 811b0ea:	200d      	movs	r0, #13
 811b0ec:	f007 f8cc 	bl	8122288 <putchar>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 811b0f0:	687b      	ldr	r3, [r7, #4]
 811b0f2:	8b5b      	ldrh	r3, [r3, #26]
 811b0f4:	f023 0308 	bic.w	r3, r3, #8
 811b0f8:	b29a      	uxth	r2, r3
 811b0fa:	687b      	ldr	r3, [r7, #4]
 811b0fc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 811b0fe:	6878      	ldr	r0, [r7, #4]
 811b100:	f7fe fd7e 	bl	8119c00 <tcp_close_shutdown_fin>
    }
    pcb = next;
 811b104:	683b      	ldr	r3, [r7, #0]
 811b106:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 811b108:	687b      	ldr	r3, [r7, #4]
 811b10a:	2b00      	cmp	r3, #0
 811b10c:	d1e1      	bne.n	811b0d2 <tcp_handle_closepend+0xe>
  }
}
 811b10e:	bf00      	nop
 811b110:	bf00      	nop
 811b112:	3708      	adds	r7, #8
 811b114:	46bd      	mov	sp, r7
 811b116:	bd80      	pop	{r7, pc}
 811b118:	10011e64 	.word	0x10011e64
 811b11c:	08126748 	.word	0x08126748

0811b120 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 811b120:	b580      	push	{r7, lr}
 811b122:	b084      	sub	sp, #16
 811b124:	af00      	add	r7, sp, #0
 811b126:	4603      	mov	r3, r0
 811b128:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 811b12a:	2001      	movs	r0, #1
 811b12c:	f7fc ffee 	bl	811810c <memp_malloc>
 811b130:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 811b132:	68fb      	ldr	r3, [r7, #12]
 811b134:	2b00      	cmp	r3, #0
 811b136:	d140      	bne.n	811b1ba <tcp_alloc+0x9a>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 811b138:	f7ff ffc4 	bl	811b0c4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
 811b13c:	4847      	ldr	r0, [pc, #284]	@ (811b25c <tcp_alloc+0x13c>)
 811b13e:	f007 f901 	bl	8122344 <puts>
 811b142:	200d      	movs	r0, #13
 811b144:	f007 f8a0 	bl	8122288 <putchar>
    tcp_kill_timewait();
 811b148:	f7ff ff82 	bl	811b050 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 811b14c:	2001      	movs	r0, #1
 811b14e:	f7fc ffdd 	bl	811810c <memp_malloc>
 811b152:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 811b154:	68fb      	ldr	r3, [r7, #12]
 811b156:	2b00      	cmp	r3, #0
 811b158:	d12f      	bne.n	811b1ba <tcp_alloc+0x9a>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
 811b15a:	4841      	ldr	r0, [pc, #260]	@ (811b260 <tcp_alloc+0x140>)
 811b15c:	f007 f8f2 	bl	8122344 <puts>
 811b160:	200d      	movs	r0, #13
 811b162:	f007 f891 	bl	8122288 <putchar>
      tcp_kill_state(LAST_ACK);
 811b166:	2009      	movs	r0, #9
 811b168:	f7ff ff18 	bl	811af9c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 811b16c:	2001      	movs	r0, #1
 811b16e:	f7fc ffcd 	bl	811810c <memp_malloc>
 811b172:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 811b174:	68fb      	ldr	r3, [r7, #12]
 811b176:	2b00      	cmp	r3, #0
 811b178:	d11f      	bne.n	811b1ba <tcp_alloc+0x9a>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
 811b17a:	483a      	ldr	r0, [pc, #232]	@ (811b264 <tcp_alloc+0x144>)
 811b17c:	f007 f8e2 	bl	8122344 <puts>
 811b180:	200d      	movs	r0, #13
 811b182:	f007 f881 	bl	8122288 <putchar>
        tcp_kill_state(CLOSING);
 811b186:	2008      	movs	r0, #8
 811b188:	f7ff ff08 	bl	811af9c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 811b18c:	2001      	movs	r0, #1
 811b18e:	f7fc ffbd 	bl	811810c <memp_malloc>
 811b192:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 811b194:	68fb      	ldr	r3, [r7, #12]
 811b196:	2b00      	cmp	r3, #0
 811b198:	d10f      	bne.n	811b1ba <tcp_alloc+0x9a>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
 811b19a:	79fb      	ldrb	r3, [r7, #7]
 811b19c:	4619      	mov	r1, r3
 811b19e:	4832      	ldr	r0, [pc, #200]	@ (811b268 <tcp_alloc+0x148>)
 811b1a0:	f007 f860 	bl	8122264 <iprintf>
 811b1a4:	200d      	movs	r0, #13
 811b1a6:	f007 f86f 	bl	8122288 <putchar>
          tcp_kill_prio(prio);
 811b1aa:	79fb      	ldrb	r3, [r7, #7]
 811b1ac:	4618      	mov	r0, r3
 811b1ae:	f7ff fe9d 	bl	811aeec <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 811b1b2:	2001      	movs	r0, #1
 811b1b4:	f7fc ffaa 	bl	811810c <memp_malloc>
 811b1b8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 811b1ba:	68fb      	ldr	r3, [r7, #12]
 811b1bc:	2b00      	cmp	r3, #0
 811b1be:	d047      	beq.n	811b250 <tcp_alloc+0x130>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 811b1c0:	22a4      	movs	r2, #164	@ 0xa4
 811b1c2:	2100      	movs	r1, #0
 811b1c4:	68f8      	ldr	r0, [r7, #12]
 811b1c6:	f007 f9f3 	bl	81225b0 <memset>
    pcb->prio = prio;
 811b1ca:	68fb      	ldr	r3, [r7, #12]
 811b1cc:	79fa      	ldrb	r2, [r7, #7]
 811b1ce:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 811b1d0:	68fb      	ldr	r3, [r7, #12]
 811b1d2:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 811b1d6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 811b1da:	68fb      	ldr	r3, [r7, #12]
 811b1dc:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 811b1e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 811b1e2:	68fb      	ldr	r3, [r7, #12]
 811b1e4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 811b1e6:	68fb      	ldr	r3, [r7, #12]
 811b1e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 811b1ea:	68fb      	ldr	r3, [r7, #12]
 811b1ec:	22ff      	movs	r2, #255	@ 0xff
 811b1ee:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 811b1f0:	68fb      	ldr	r3, [r7, #12]
 811b1f2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 811b1f6:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 811b1f8:	68fb      	ldr	r3, [r7, #12]
 811b1fa:	2206      	movs	r2, #6
 811b1fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 811b200:	68fb      	ldr	r3, [r7, #12]
 811b202:	2206      	movs	r2, #6
 811b204:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 811b206:	68fb      	ldr	r3, [r7, #12]
 811b208:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811b20c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 811b20e:	68fb      	ldr	r3, [r7, #12]
 811b210:	2201      	movs	r2, #1
 811b212:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 811b216:	4b15      	ldr	r3, [pc, #84]	@ (811b26c <tcp_alloc+0x14c>)
 811b218:	681a      	ldr	r2, [r3, #0]
 811b21a:	68fb      	ldr	r3, [r7, #12]
 811b21c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 811b21e:	4b14      	ldr	r3, [pc, #80]	@ (811b270 <tcp_alloc+0x150>)
 811b220:	781a      	ldrb	r2, [r3, #0]
 811b222:	68fb      	ldr	r3, [r7, #12]
 811b224:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 811b226:	68fb      	ldr	r3, [r7, #12]
 811b228:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 811b22c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 811b230:	68fb      	ldr	r3, [r7, #12]
 811b232:	4a10      	ldr	r2, [pc, #64]	@ (811b274 <tcp_alloc+0x154>)
 811b234:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 811b238:	68fb      	ldr	r3, [r7, #12]
 811b23a:	4a0f      	ldr	r2, [pc, #60]	@ (811b278 <tcp_alloc+0x158>)
 811b23c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
 811b240:	68fb      	ldr	r3, [r7, #12]
 811b242:	4a0e      	ldr	r2, [pc, #56]	@ (811b27c <tcp_alloc+0x15c>)
 811b244:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
 811b248:	68fb      	ldr	r3, [r7, #12]
 811b24a:	2209      	movs	r2, #9
 811b24c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 811b250:	68fb      	ldr	r3, [r7, #12]
}
 811b252:	4618      	mov	r0, r3
 811b254:	3710      	adds	r7, #16
 811b256:	46bd      	mov	sp, r7
 811b258:	bd80      	pop	{r7, pc}
 811b25a:	bf00      	nop
 811b25c:	0812676c 	.word	0x0812676c
 811b260:	081267a0 	.word	0x081267a0
 811b264:	081267d4 	.word	0x081267d4
 811b268:	08126808 	.word	0x08126808
 811b26c:	10011e58 	.word	0x10011e58
 811b270:	10011e6e 	.word	0x10011e6e
 811b274:	0811ae81 	.word	0x0811ae81
 811b278:	006ddd00 	.word	0x006ddd00
 811b27c:	000124f8 	.word	0x000124f8

0811b280 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 811b280:	b580      	push	{r7, lr}
 811b282:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 811b284:	2040      	movs	r0, #64	@ 0x40
 811b286:	f7ff ff4b 	bl	811b120 <tcp_alloc>
 811b28a:	4603      	mov	r3, r0
}
 811b28c:	4618      	mov	r0, r3
 811b28e:	bd80      	pop	{r7, pc}

0811b290 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 811b290:	b480      	push	{r7}
 811b292:	b083      	sub	sp, #12
 811b294:	af00      	add	r7, sp, #0
 811b296:	6078      	str	r0, [r7, #4]
 811b298:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 811b29a:	687b      	ldr	r3, [r7, #4]
 811b29c:	2b00      	cmp	r3, #0
 811b29e:	d002      	beq.n	811b2a6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 811b2a0:	687b      	ldr	r3, [r7, #4]
 811b2a2:	683a      	ldr	r2, [r7, #0]
 811b2a4:	611a      	str	r2, [r3, #16]
  }
}
 811b2a6:	bf00      	nop
 811b2a8:	370c      	adds	r7, #12
 811b2aa:	46bd      	mov	sp, r7
 811b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 811b2b0:	4770      	bx	lr
	...

0811b2b4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 811b2b4:	b580      	push	{r7, lr}
 811b2b6:	b082      	sub	sp, #8
 811b2b8:	af00      	add	r7, sp, #0
 811b2ba:	6078      	str	r0, [r7, #4]
 811b2bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 811b2be:	687b      	ldr	r3, [r7, #4]
 811b2c0:	2b00      	cmp	r3, #0
 811b2c2:	d00e      	beq.n	811b2e2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 811b2c4:	687b      	ldr	r3, [r7, #4]
 811b2c6:	7d1b      	ldrb	r3, [r3, #20]
 811b2c8:	2b01      	cmp	r3, #1
 811b2ca:	d106      	bne.n	811b2da <tcp_recv+0x26>
 811b2cc:	4b07      	ldr	r3, [pc, #28]	@ (811b2ec <tcp_recv+0x38>)
 811b2ce:	f240 72df 	movw	r2, #2015	@ 0x7df
 811b2d2:	4907      	ldr	r1, [pc, #28]	@ (811b2f0 <tcp_recv+0x3c>)
 811b2d4:	4807      	ldr	r0, [pc, #28]	@ (811b2f4 <tcp_recv+0x40>)
 811b2d6:	f006 ffc5 	bl	8122264 <iprintf>
    pcb->recv = recv;
 811b2da:	687b      	ldr	r3, [r7, #4]
 811b2dc:	683a      	ldr	r2, [r7, #0]
 811b2de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 811b2e2:	bf00      	nop
 811b2e4:	3708      	adds	r7, #8
 811b2e6:	46bd      	mov	sp, r7
 811b2e8:	bd80      	pop	{r7, pc}
 811b2ea:	bf00      	nop
 811b2ec:	08125e58 	.word	0x08125e58
 811b2f0:	08126848 	.word	0x08126848
 811b2f4:	08125edc 	.word	0x08125edc

0811b2f8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 811b2f8:	b580      	push	{r7, lr}
 811b2fa:	b082      	sub	sp, #8
 811b2fc:	af00      	add	r7, sp, #0
 811b2fe:	6078      	str	r0, [r7, #4]
 811b300:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 811b302:	687b      	ldr	r3, [r7, #4]
 811b304:	2b00      	cmp	r3, #0
 811b306:	d00e      	beq.n	811b326 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 811b308:	687b      	ldr	r3, [r7, #4]
 811b30a:	7d1b      	ldrb	r3, [r3, #20]
 811b30c:	2b01      	cmp	r3, #1
 811b30e:	d106      	bne.n	811b31e <tcp_err+0x26>
 811b310:	4b07      	ldr	r3, [pc, #28]	@ (811b330 <tcp_err+0x38>)
 811b312:	f640 020d 	movw	r2, #2061	@ 0x80d
 811b316:	4907      	ldr	r1, [pc, #28]	@ (811b334 <tcp_err+0x3c>)
 811b318:	4807      	ldr	r0, [pc, #28]	@ (811b338 <tcp_err+0x40>)
 811b31a:	f006 ffa3 	bl	8122264 <iprintf>
    pcb->errf = err;
 811b31e:	687b      	ldr	r3, [r7, #4]
 811b320:	683a      	ldr	r2, [r7, #0]
 811b322:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 811b326:	bf00      	nop
 811b328:	3708      	adds	r7, #8
 811b32a:	46bd      	mov	sp, r7
 811b32c:	bd80      	pop	{r7, pc}
 811b32e:	bf00      	nop
 811b330:	08125e58 	.word	0x08125e58
 811b334:	08126898 	.word	0x08126898
 811b338:	08125edc 	.word	0x08125edc

0811b33c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 811b33c:	b580      	push	{r7, lr}
 811b33e:	b082      	sub	sp, #8
 811b340:	af00      	add	r7, sp, #0
 811b342:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 811b344:	687b      	ldr	r3, [r7, #4]
 811b346:	2b00      	cmp	r3, #0
 811b348:	d107      	bne.n	811b35a <tcp_pcb_purge+0x1e>
 811b34a:	4b34      	ldr	r3, [pc, #208]	@ (811b41c <tcp_pcb_purge+0xe0>)
 811b34c:	f640 0251 	movw	r2, #2129	@ 0x851
 811b350:	4933      	ldr	r1, [pc, #204]	@ (811b420 <tcp_pcb_purge+0xe4>)
 811b352:	4834      	ldr	r0, [pc, #208]	@ (811b424 <tcp_pcb_purge+0xe8>)
 811b354:	f006 ff86 	bl	8122264 <iprintf>
 811b358:	e05d      	b.n	811b416 <tcp_pcb_purge+0xda>

  if (pcb->state != CLOSED &&
 811b35a:	687b      	ldr	r3, [r7, #4]
 811b35c:	7d1b      	ldrb	r3, [r3, #20]
 811b35e:	2b00      	cmp	r3, #0
 811b360:	d059      	beq.n	811b416 <tcp_pcb_purge+0xda>
      pcb->state != TIME_WAIT &&
 811b362:	687b      	ldr	r3, [r7, #4]
 811b364:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 811b366:	2b0a      	cmp	r3, #10
 811b368:	d055      	beq.n	811b416 <tcp_pcb_purge+0xda>
      pcb->state != LISTEN) {
 811b36a:	687b      	ldr	r3, [r7, #4]
 811b36c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 811b36e:	2b01      	cmp	r3, #1
 811b370:	d051      	beq.n	811b416 <tcp_pcb_purge+0xda>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));
 811b372:	482d      	ldr	r0, [pc, #180]	@ (811b428 <tcp_pcb_purge+0xec>)
 811b374:	f006 ffe6 	bl	8122344 <puts>
 811b378:	200d      	movs	r0, #13
 811b37a:	f006 ff85 	bl	8122288 <putchar>

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 811b37e:	687b      	ldr	r3, [r7, #4]
 811b380:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811b382:	2b00      	cmp	r3, #0
 811b384:	d00d      	beq.n	811b3a2 <tcp_pcb_purge+0x66>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
 811b386:	4829      	ldr	r0, [pc, #164]	@ (811b42c <tcp_pcb_purge+0xf0>)
 811b388:	f006 ffdc 	bl	8122344 <puts>
 811b38c:	200d      	movs	r0, #13
 811b38e:	f006 ff7b 	bl	8122288 <putchar>
      pbuf_free(pcb->refused_data);
 811b392:	687b      	ldr	r3, [r7, #4]
 811b394:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811b396:	4618      	mov	r0, r3
 811b398:	f7fd fef0 	bl	811917c <pbuf_free>
      pcb->refused_data = NULL;
 811b39c:	687b      	ldr	r3, [r7, #4]
 811b39e:	2200      	movs	r2, #0
 811b3a0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unsent != NULL) {
 811b3a2:	687b      	ldr	r3, [r7, #4]
 811b3a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811b3a6:	2b00      	cmp	r3, #0
 811b3a8:	d005      	beq.n	811b3b6 <tcp_pcb_purge+0x7a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: not all data sent\n"));
 811b3aa:	4821      	ldr	r0, [pc, #132]	@ (811b430 <tcp_pcb_purge+0xf4>)
 811b3ac:	f006 ffca 	bl	8122344 <puts>
 811b3b0:	200d      	movs	r0, #13
 811b3b2:	f006 ff69 	bl	8122288 <putchar>
    }
    if (pcb->unacked != NULL) {
 811b3b6:	687b      	ldr	r3, [r7, #4]
 811b3b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811b3ba:	2b00      	cmp	r3, #0
 811b3bc:	d005      	beq.n	811b3ca <tcp_pcb_purge+0x8e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
 811b3be:	481d      	ldr	r0, [pc, #116]	@ (811b434 <tcp_pcb_purge+0xf8>)
 811b3c0:	f006 ffc0 	bl	8122344 <puts>
 811b3c4:	200d      	movs	r0, #13
 811b3c6:	f006 ff5f 	bl	8122288 <putchar>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 811b3ca:	687b      	ldr	r3, [r7, #4]
 811b3cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811b3ce:	2b00      	cmp	r3, #0
 811b3d0:	d008      	beq.n	811b3e4 <tcp_pcb_purge+0xa8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
 811b3d2:	4819      	ldr	r0, [pc, #100]	@ (811b438 <tcp_pcb_purge+0xfc>)
 811b3d4:	f006 ffb6 	bl	8122344 <puts>
 811b3d8:	200d      	movs	r0, #13
 811b3da:	f006 ff55 	bl	8122288 <putchar>
      tcp_free_ooseq(pcb);
 811b3de:	6878      	ldr	r0, [r7, #4]
 811b3e0:	f000 f9a8 	bl	811b734 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 811b3e4:	687b      	ldr	r3, [r7, #4]
 811b3e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811b3ea:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 811b3ec:	687b      	ldr	r3, [r7, #4]
 811b3ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811b3f0:	4618      	mov	r0, r3
 811b3f2:	f7ff fce9 	bl	811adc8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 811b3f6:	687b      	ldr	r3, [r7, #4]
 811b3f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811b3fa:	4618      	mov	r0, r3
 811b3fc:	f7ff fce4 	bl	811adc8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 811b400:	687b      	ldr	r3, [r7, #4]
 811b402:	2200      	movs	r2, #0
 811b404:	66da      	str	r2, [r3, #108]	@ 0x6c
 811b406:	687b      	ldr	r3, [r7, #4]
 811b408:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 811b40a:	687b      	ldr	r3, [r7, #4]
 811b40c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 811b40e:	687b      	ldr	r3, [r7, #4]
 811b410:	2200      	movs	r2, #0
 811b412:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 811b416:	3708      	adds	r7, #8
 811b418:	46bd      	mov	sp, r7
 811b41a:	bd80      	pop	{r7, pc}
 811b41c:	08125e58 	.word	0x08125e58
 811b420:	081268f8 	.word	0x081268f8
 811b424:	08125edc 	.word	0x08125edc
 811b428:	08126914 	.word	0x08126914
 811b42c:	08126924 	.word	0x08126924
 811b430:	08126950 	.word	0x08126950
 811b434:	08126974 	.word	0x08126974
 811b438:	0812699c 	.word	0x0812699c

0811b43c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 811b43c:	b580      	push	{r7, lr}
 811b43e:	b084      	sub	sp, #16
 811b440:	af00      	add	r7, sp, #0
 811b442:	6078      	str	r0, [r7, #4]
 811b444:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 811b446:	683b      	ldr	r3, [r7, #0]
 811b448:	2b00      	cmp	r3, #0
 811b44a:	d106      	bne.n	811b45a <tcp_pcb_remove+0x1e>
 811b44c:	4b44      	ldr	r3, [pc, #272]	@ (811b560 <tcp_pcb_remove+0x124>)
 811b44e:	f640 0283 	movw	r2, #2179	@ 0x883
 811b452:	4944      	ldr	r1, [pc, #272]	@ (811b564 <tcp_pcb_remove+0x128>)
 811b454:	4844      	ldr	r0, [pc, #272]	@ (811b568 <tcp_pcb_remove+0x12c>)
 811b456:	f006 ff05 	bl	8122264 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 811b45a:	687b      	ldr	r3, [r7, #4]
 811b45c:	2b00      	cmp	r3, #0
 811b45e:	d106      	bne.n	811b46e <tcp_pcb_remove+0x32>
 811b460:	4b3f      	ldr	r3, [pc, #252]	@ (811b560 <tcp_pcb_remove+0x124>)
 811b462:	f640 0284 	movw	r2, #2180	@ 0x884
 811b466:	4941      	ldr	r1, [pc, #260]	@ (811b56c <tcp_pcb_remove+0x130>)
 811b468:	483f      	ldr	r0, [pc, #252]	@ (811b568 <tcp_pcb_remove+0x12c>)
 811b46a:	f006 fefb 	bl	8122264 <iprintf>

  TCP_RMV(pcblist, pcb);
 811b46e:	687b      	ldr	r3, [r7, #4]
 811b470:	681b      	ldr	r3, [r3, #0]
 811b472:	683a      	ldr	r2, [r7, #0]
 811b474:	429a      	cmp	r2, r3
 811b476:	d105      	bne.n	811b484 <tcp_pcb_remove+0x48>
 811b478:	687b      	ldr	r3, [r7, #4]
 811b47a:	681b      	ldr	r3, [r3, #0]
 811b47c:	68da      	ldr	r2, [r3, #12]
 811b47e:	687b      	ldr	r3, [r7, #4]
 811b480:	601a      	str	r2, [r3, #0]
 811b482:	e013      	b.n	811b4ac <tcp_pcb_remove+0x70>
 811b484:	687b      	ldr	r3, [r7, #4]
 811b486:	681b      	ldr	r3, [r3, #0]
 811b488:	60fb      	str	r3, [r7, #12]
 811b48a:	e00c      	b.n	811b4a6 <tcp_pcb_remove+0x6a>
 811b48c:	68fb      	ldr	r3, [r7, #12]
 811b48e:	68db      	ldr	r3, [r3, #12]
 811b490:	683a      	ldr	r2, [r7, #0]
 811b492:	429a      	cmp	r2, r3
 811b494:	d104      	bne.n	811b4a0 <tcp_pcb_remove+0x64>
 811b496:	683b      	ldr	r3, [r7, #0]
 811b498:	68da      	ldr	r2, [r3, #12]
 811b49a:	68fb      	ldr	r3, [r7, #12]
 811b49c:	60da      	str	r2, [r3, #12]
 811b49e:	e005      	b.n	811b4ac <tcp_pcb_remove+0x70>
 811b4a0:	68fb      	ldr	r3, [r7, #12]
 811b4a2:	68db      	ldr	r3, [r3, #12]
 811b4a4:	60fb      	str	r3, [r7, #12]
 811b4a6:	68fb      	ldr	r3, [r7, #12]
 811b4a8:	2b00      	cmp	r3, #0
 811b4aa:	d1ef      	bne.n	811b48c <tcp_pcb_remove+0x50>
 811b4ac:	683b      	ldr	r3, [r7, #0]
 811b4ae:	2200      	movs	r2, #0
 811b4b0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 811b4b2:	6838      	ldr	r0, [r7, #0]
 811b4b4:	f7ff ff42 	bl	811b33c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 811b4b8:	683b      	ldr	r3, [r7, #0]
 811b4ba:	7d1b      	ldrb	r3, [r3, #20]
 811b4bc:	2b0a      	cmp	r3, #10
 811b4be:	d013      	beq.n	811b4e8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 811b4c0:	683b      	ldr	r3, [r7, #0]
 811b4c2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 811b4c4:	2b01      	cmp	r3, #1
 811b4c6:	d00f      	beq.n	811b4e8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 811b4c8:	683b      	ldr	r3, [r7, #0]
 811b4ca:	8b5b      	ldrh	r3, [r3, #26]
 811b4cc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 811b4d0:	2b00      	cmp	r3, #0
 811b4d2:	d009      	beq.n	811b4e8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 811b4d4:	683b      	ldr	r3, [r7, #0]
 811b4d6:	8b5b      	ldrh	r3, [r3, #26]
 811b4d8:	f043 0302 	orr.w	r3, r3, #2
 811b4dc:	b29a      	uxth	r2, r3
 811b4de:	683b      	ldr	r3, [r7, #0]
 811b4e0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 811b4e2:	6838      	ldr	r0, [r7, #0]
 811b4e4:	f003 fd5c 	bl	811efa0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 811b4e8:	683b      	ldr	r3, [r7, #0]
 811b4ea:	7d1b      	ldrb	r3, [r3, #20]
 811b4ec:	2b01      	cmp	r3, #1
 811b4ee:	d020      	beq.n	811b532 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 811b4f0:	683b      	ldr	r3, [r7, #0]
 811b4f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811b4f4:	2b00      	cmp	r3, #0
 811b4f6:	d006      	beq.n	811b506 <tcp_pcb_remove+0xca>
 811b4f8:	4b19      	ldr	r3, [pc, #100]	@ (811b560 <tcp_pcb_remove+0x124>)
 811b4fa:	f640 0293 	movw	r2, #2195	@ 0x893
 811b4fe:	491c      	ldr	r1, [pc, #112]	@ (811b570 <tcp_pcb_remove+0x134>)
 811b500:	4819      	ldr	r0, [pc, #100]	@ (811b568 <tcp_pcb_remove+0x12c>)
 811b502:	f006 feaf 	bl	8122264 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 811b506:	683b      	ldr	r3, [r7, #0]
 811b508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811b50a:	2b00      	cmp	r3, #0
 811b50c:	d006      	beq.n	811b51c <tcp_pcb_remove+0xe0>
 811b50e:	4b14      	ldr	r3, [pc, #80]	@ (811b560 <tcp_pcb_remove+0x124>)
 811b510:	f640 0294 	movw	r2, #2196	@ 0x894
 811b514:	4917      	ldr	r1, [pc, #92]	@ (811b574 <tcp_pcb_remove+0x138>)
 811b516:	4814      	ldr	r0, [pc, #80]	@ (811b568 <tcp_pcb_remove+0x12c>)
 811b518:	f006 fea4 	bl	8122264 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 811b51c:	683b      	ldr	r3, [r7, #0]
 811b51e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811b520:	2b00      	cmp	r3, #0
 811b522:	d006      	beq.n	811b532 <tcp_pcb_remove+0xf6>
 811b524:	4b0e      	ldr	r3, [pc, #56]	@ (811b560 <tcp_pcb_remove+0x124>)
 811b526:	f640 0296 	movw	r2, #2198	@ 0x896
 811b52a:	4913      	ldr	r1, [pc, #76]	@ (811b578 <tcp_pcb_remove+0x13c>)
 811b52c:	480e      	ldr	r0, [pc, #56]	@ (811b568 <tcp_pcb_remove+0x12c>)
 811b52e:	f006 fe99 	bl	8122264 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 811b532:	683b      	ldr	r3, [r7, #0]
 811b534:	2200      	movs	r2, #0
 811b536:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 811b538:	683b      	ldr	r3, [r7, #0]
 811b53a:	2200      	movs	r2, #0
 811b53c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
 811b53e:	f000 f925 	bl	811b78c <tcp_pcbs_sane>
 811b542:	4603      	mov	r3, r0
 811b544:	2b00      	cmp	r3, #0
 811b546:	d106      	bne.n	811b556 <tcp_pcb_remove+0x11a>
 811b548:	4b05      	ldr	r3, [pc, #20]	@ (811b560 <tcp_pcb_remove+0x124>)
 811b54a:	f640 029e 	movw	r2, #2206	@ 0x89e
 811b54e:	490b      	ldr	r1, [pc, #44]	@ (811b57c <tcp_pcb_remove+0x140>)
 811b550:	4805      	ldr	r0, [pc, #20]	@ (811b568 <tcp_pcb_remove+0x12c>)
 811b552:	f006 fe87 	bl	8122264 <iprintf>
}
 811b556:	bf00      	nop
 811b558:	3710      	adds	r7, #16
 811b55a:	46bd      	mov	sp, r7
 811b55c:	bd80      	pop	{r7, pc}
 811b55e:	bf00      	nop
 811b560:	08125e58 	.word	0x08125e58
 811b564:	081269c0 	.word	0x081269c0
 811b568:	08125edc 	.word	0x08125edc
 811b56c:	081269dc 	.word	0x081269dc
 811b570:	081269fc 	.word	0x081269fc
 811b574:	08126a14 	.word	0x08126a14
 811b578:	08126a30 	.word	0x08126a30
 811b57c:	08126a48 	.word	0x08126a48

0811b580 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 811b580:	b580      	push	{r7, lr}
 811b582:	b082      	sub	sp, #8
 811b584:	af00      	add	r7, sp, #0
 811b586:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 811b588:	687b      	ldr	r3, [r7, #4]
 811b58a:	2b00      	cmp	r3, #0
 811b58c:	d106      	bne.n	811b59c <tcp_next_iss+0x1c>
 811b58e:	4b0a      	ldr	r3, [pc, #40]	@ (811b5b8 <tcp_next_iss+0x38>)
 811b590:	f640 02af 	movw	r2, #2223	@ 0x8af
 811b594:	4909      	ldr	r1, [pc, #36]	@ (811b5bc <tcp_next_iss+0x3c>)
 811b596:	480a      	ldr	r0, [pc, #40]	@ (811b5c0 <tcp_next_iss+0x40>)
 811b598:	f006 fe64 	bl	8122264 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 811b59c:	4b09      	ldr	r3, [pc, #36]	@ (811b5c4 <tcp_next_iss+0x44>)
 811b59e:	681a      	ldr	r2, [r3, #0]
 811b5a0:	4b09      	ldr	r3, [pc, #36]	@ (811b5c8 <tcp_next_iss+0x48>)
 811b5a2:	681b      	ldr	r3, [r3, #0]
 811b5a4:	4413      	add	r3, r2
 811b5a6:	4a07      	ldr	r2, [pc, #28]	@ (811b5c4 <tcp_next_iss+0x44>)
 811b5a8:	6013      	str	r3, [r2, #0]
  return iss;
 811b5aa:	4b06      	ldr	r3, [pc, #24]	@ (811b5c4 <tcp_next_iss+0x44>)
 811b5ac:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 811b5ae:	4618      	mov	r0, r3
 811b5b0:	3708      	adds	r7, #8
 811b5b2:	46bd      	mov	sp, r7
 811b5b4:	bd80      	pop	{r7, pc}
 811b5b6:	bf00      	nop
 811b5b8:	08125e58 	.word	0x08125e58
 811b5bc:	08126a68 	.word	0x08126a68
 811b5c0:	08125edc 	.word	0x08125edc
 811b5c4:	1000002c 	.word	0x1000002c
 811b5c8:	10011e58 	.word	0x10011e58

0811b5cc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 811b5cc:	b580      	push	{r7, lr}
 811b5ce:	b086      	sub	sp, #24
 811b5d0:	af00      	add	r7, sp, #0
 811b5d2:	4603      	mov	r3, r0
 811b5d4:	60b9      	str	r1, [r7, #8]
 811b5d6:	607a      	str	r2, [r7, #4]
 811b5d8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 811b5da:	687b      	ldr	r3, [r7, #4]
 811b5dc:	2b00      	cmp	r3, #0
 811b5de:	d106      	bne.n	811b5ee <tcp_eff_send_mss_netif+0x22>
 811b5e0:	4b14      	ldr	r3, [pc, #80]	@ (811b634 <tcp_eff_send_mss_netif+0x68>)
 811b5e2:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 811b5e6:	4914      	ldr	r1, [pc, #80]	@ (811b638 <tcp_eff_send_mss_netif+0x6c>)
 811b5e8:	4814      	ldr	r0, [pc, #80]	@ (811b63c <tcp_eff_send_mss_netif+0x70>)
 811b5ea:	f006 fe3b 	bl	8122264 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 811b5ee:	68bb      	ldr	r3, [r7, #8]
 811b5f0:	2b00      	cmp	r3, #0
 811b5f2:	d101      	bne.n	811b5f8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 811b5f4:	89fb      	ldrh	r3, [r7, #14]
 811b5f6:	e019      	b.n	811b62c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 811b5f8:	68bb      	ldr	r3, [r7, #8]
 811b5fa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 811b5fc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 811b5fe:	8afb      	ldrh	r3, [r7, #22]
 811b600:	2b00      	cmp	r3, #0
 811b602:	d012      	beq.n	811b62a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 811b604:	2328      	movs	r3, #40	@ 0x28
 811b606:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 811b608:	8afa      	ldrh	r2, [r7, #22]
 811b60a:	8abb      	ldrh	r3, [r7, #20]
 811b60c:	429a      	cmp	r2, r3
 811b60e:	d904      	bls.n	811b61a <tcp_eff_send_mss_netif+0x4e>
 811b610:	8afa      	ldrh	r2, [r7, #22]
 811b612:	8abb      	ldrh	r3, [r7, #20]
 811b614:	1ad3      	subs	r3, r2, r3
 811b616:	b29b      	uxth	r3, r3
 811b618:	e000      	b.n	811b61c <tcp_eff_send_mss_netif+0x50>
 811b61a:	2300      	movs	r3, #0
 811b61c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 811b61e:	8a7a      	ldrh	r2, [r7, #18]
 811b620:	89fb      	ldrh	r3, [r7, #14]
 811b622:	4293      	cmp	r3, r2
 811b624:	bf28      	it	cs
 811b626:	4613      	movcs	r3, r2
 811b628:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 811b62a:	89fb      	ldrh	r3, [r7, #14]
}
 811b62c:	4618      	mov	r0, r3
 811b62e:	3718      	adds	r7, #24
 811b630:	46bd      	mov	sp, r7
 811b632:	bd80      	pop	{r7, pc}
 811b634:	08125e58 	.word	0x08125e58
 811b638:	08126a84 	.word	0x08126a84
 811b63c:	08125edc 	.word	0x08125edc

0811b640 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 811b640:	b580      	push	{r7, lr}
 811b642:	b084      	sub	sp, #16
 811b644:	af00      	add	r7, sp, #0
 811b646:	6078      	str	r0, [r7, #4]
 811b648:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 811b64a:	683b      	ldr	r3, [r7, #0]
 811b64c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 811b64e:	687b      	ldr	r3, [r7, #4]
 811b650:	2b00      	cmp	r3, #0
 811b652:	d120      	bne.n	811b696 <tcp_netif_ip_addr_changed_pcblist+0x56>
 811b654:	4b14      	ldr	r3, [pc, #80]	@ (811b6a8 <tcp_netif_ip_addr_changed_pcblist+0x68>)
 811b656:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 811b65a:	4914      	ldr	r1, [pc, #80]	@ (811b6ac <tcp_netif_ip_addr_changed_pcblist+0x6c>)
 811b65c:	4814      	ldr	r0, [pc, #80]	@ (811b6b0 <tcp_netif_ip_addr_changed_pcblist+0x70>)
 811b65e:	f006 fe01 	bl	8122264 <iprintf>

  while (pcb != NULL) {
 811b662:	e018      	b.n	811b696 <tcp_netif_ip_addr_changed_pcblist+0x56>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 811b664:	68fb      	ldr	r3, [r7, #12]
 811b666:	681a      	ldr	r2, [r3, #0]
 811b668:	687b      	ldr	r3, [r7, #4]
 811b66a:	681b      	ldr	r3, [r3, #0]
 811b66c:	429a      	cmp	r2, r3
 811b66e:	d10f      	bne.n	811b690 <tcp_netif_ip_addr_changed_pcblist+0x50>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 811b670:	68fb      	ldr	r3, [r7, #12]
 811b672:	68db      	ldr	r3, [r3, #12]
 811b674:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
 811b676:	68f9      	ldr	r1, [r7, #12]
 811b678:	480e      	ldr	r0, [pc, #56]	@ (811b6b4 <tcp_netif_ip_addr_changed_pcblist+0x74>)
 811b67a:	f006 fdf3 	bl	8122264 <iprintf>
 811b67e:	200d      	movs	r0, #13
 811b680:	f006 fe02 	bl	8122288 <putchar>
      tcp_abort(pcb);
 811b684:	68f8      	ldr	r0, [r7, #12]
 811b686:	f7fe fc1b 	bl	8119ec0 <tcp_abort>
      pcb = next;
 811b68a:	68bb      	ldr	r3, [r7, #8]
 811b68c:	60fb      	str	r3, [r7, #12]
 811b68e:	e002      	b.n	811b696 <tcp_netif_ip_addr_changed_pcblist+0x56>
    } else {
      pcb = pcb->next;
 811b690:	68fb      	ldr	r3, [r7, #12]
 811b692:	68db      	ldr	r3, [r3, #12]
 811b694:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 811b696:	68fb      	ldr	r3, [r7, #12]
 811b698:	2b00      	cmp	r3, #0
 811b69a:	d1e3      	bne.n	811b664 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 811b69c:	bf00      	nop
 811b69e:	bf00      	nop
 811b6a0:	3710      	adds	r7, #16
 811b6a2:	46bd      	mov	sp, r7
 811b6a4:	bd80      	pop	{r7, pc}
 811b6a6:	bf00      	nop
 811b6a8:	08125e58 	.word	0x08125e58
 811b6ac:	08126aac 	.word	0x08126aac
 811b6b0:	08125edc 	.word	0x08125edc
 811b6b4:	08126ae0 	.word	0x08126ae0

0811b6b8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 811b6b8:	b580      	push	{r7, lr}
 811b6ba:	b084      	sub	sp, #16
 811b6bc:	af00      	add	r7, sp, #0
 811b6be:	6078      	str	r0, [r7, #4]
 811b6c0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 811b6c2:	687b      	ldr	r3, [r7, #4]
 811b6c4:	2b00      	cmp	r3, #0
 811b6c6:	d02a      	beq.n	811b71e <tcp_netif_ip_addr_changed+0x66>
 811b6c8:	687b      	ldr	r3, [r7, #4]
 811b6ca:	681b      	ldr	r3, [r3, #0]
 811b6cc:	2b00      	cmp	r3, #0
 811b6ce:	d026      	beq.n	811b71e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 811b6d0:	4b15      	ldr	r3, [pc, #84]	@ (811b728 <tcp_netif_ip_addr_changed+0x70>)
 811b6d2:	681b      	ldr	r3, [r3, #0]
 811b6d4:	4619      	mov	r1, r3
 811b6d6:	6878      	ldr	r0, [r7, #4]
 811b6d8:	f7ff ffb2 	bl	811b640 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 811b6dc:	4b13      	ldr	r3, [pc, #76]	@ (811b72c <tcp_netif_ip_addr_changed+0x74>)
 811b6de:	681b      	ldr	r3, [r3, #0]
 811b6e0:	4619      	mov	r1, r3
 811b6e2:	6878      	ldr	r0, [r7, #4]
 811b6e4:	f7ff ffac 	bl	811b640 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 811b6e8:	683b      	ldr	r3, [r7, #0]
 811b6ea:	2b00      	cmp	r3, #0
 811b6ec:	d017      	beq.n	811b71e <tcp_netif_ip_addr_changed+0x66>
 811b6ee:	683b      	ldr	r3, [r7, #0]
 811b6f0:	681b      	ldr	r3, [r3, #0]
 811b6f2:	2b00      	cmp	r3, #0
 811b6f4:	d013      	beq.n	811b71e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 811b6f6:	4b0e      	ldr	r3, [pc, #56]	@ (811b730 <tcp_netif_ip_addr_changed+0x78>)
 811b6f8:	681b      	ldr	r3, [r3, #0]
 811b6fa:	60fb      	str	r3, [r7, #12]
 811b6fc:	e00c      	b.n	811b718 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 811b6fe:	68fb      	ldr	r3, [r7, #12]
 811b700:	681a      	ldr	r2, [r3, #0]
 811b702:	687b      	ldr	r3, [r7, #4]
 811b704:	681b      	ldr	r3, [r3, #0]
 811b706:	429a      	cmp	r2, r3
 811b708:	d103      	bne.n	811b712 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 811b70a:	683b      	ldr	r3, [r7, #0]
 811b70c:	681a      	ldr	r2, [r3, #0]
 811b70e:	68fb      	ldr	r3, [r7, #12]
 811b710:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 811b712:	68fb      	ldr	r3, [r7, #12]
 811b714:	68db      	ldr	r3, [r3, #12]
 811b716:	60fb      	str	r3, [r7, #12]
 811b718:	68fb      	ldr	r3, [r7, #12]
 811b71a:	2b00      	cmp	r3, #0
 811b71c:	d1ef      	bne.n	811b6fe <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 811b71e:	bf00      	nop
 811b720:	3710      	adds	r7, #16
 811b722:	46bd      	mov	sp, r7
 811b724:	bd80      	pop	{r7, pc}
 811b726:	bf00      	nop
 811b728:	10011e64 	.word	0x10011e64
 811b72c:	10011e5c 	.word	0x10011e5c
 811b730:	10011e60 	.word	0x10011e60

0811b734 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 811b734:	b580      	push	{r7, lr}
 811b736:	b082      	sub	sp, #8
 811b738:	af00      	add	r7, sp, #0
 811b73a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 811b73c:	687b      	ldr	r3, [r7, #4]
 811b73e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811b740:	2b00      	cmp	r3, #0
 811b742:	d007      	beq.n	811b754 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 811b744:	687b      	ldr	r3, [r7, #4]
 811b746:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811b748:	4618      	mov	r0, r3
 811b74a:	f7ff fb3d 	bl	811adc8 <tcp_segs_free>
    pcb->ooseq = NULL;
 811b74e:	687b      	ldr	r3, [r7, #4]
 811b750:	2200      	movs	r2, #0
 811b752:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 811b754:	bf00      	nop
 811b756:	3708      	adds	r7, #8
 811b758:	46bd      	mov	sp, r7
 811b75a:	bd80      	pop	{r7, pc}

0811b75c <tcp_debug_print_state>:
 *
 * @param s enum tcp_state to print
 */
void
tcp_debug_print_state(enum tcp_state s)
{
 811b75c:	b580      	push	{r7, lr}
 811b75e:	b082      	sub	sp, #8
 811b760:	af00      	add	r7, sp, #0
 811b762:	4603      	mov	r3, r0
 811b764:	71fb      	strb	r3, [r7, #7]
  LWIP_DEBUGF(TCP_DEBUG, ("State: %s\n", tcp_state_str[s]));
 811b766:	79fb      	ldrb	r3, [r7, #7]
 811b768:	4a06      	ldr	r2, [pc, #24]	@ (811b784 <tcp_debug_print_state+0x28>)
 811b76a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 811b76e:	4619      	mov	r1, r3
 811b770:	4805      	ldr	r0, [pc, #20]	@ (811b788 <tcp_debug_print_state+0x2c>)
 811b772:	f006 fd77 	bl	8122264 <iprintf>
 811b776:	200d      	movs	r0, #13
 811b778:	f006 fd86 	bl	8122288 <putchar>
}
 811b77c:	bf00      	nop
 811b77e:	3708      	adds	r7, #8
 811b780:	46bd      	mov	sp, r7
 811b782:	bd80      	pop	{r7, pc}
 811b784:	08128ac0 	.word	0x08128ac0
 811b788:	08126c3c 	.word	0x08126c3c

0811b78c <tcp_pcbs_sane>:
/**
 * Check state consistency of the tcp_pcb lists.
 */
s16_t
tcp_pcbs_sane(void)
{
 811b78c:	b580      	push	{r7, lr}
 811b78e:	b082      	sub	sp, #8
 811b790:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 811b792:	4b22      	ldr	r3, [pc, #136]	@ (811b81c <tcp_pcbs_sane+0x90>)
 811b794:	681b      	ldr	r3, [r3, #0]
 811b796:	607b      	str	r3, [r7, #4]
 811b798:	e023      	b.n	811b7e2 <tcp_pcbs_sane+0x56>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != CLOSED", pcb->state != CLOSED);
 811b79a:	687b      	ldr	r3, [r7, #4]
 811b79c:	7d1b      	ldrb	r3, [r3, #20]
 811b79e:	2b00      	cmp	r3, #0
 811b7a0:	d106      	bne.n	811b7b0 <tcp_pcbs_sane+0x24>
 811b7a2:	4b1f      	ldr	r3, [pc, #124]	@ (811b820 <tcp_pcbs_sane+0x94>)
 811b7a4:	f640 12d9 	movw	r2, #2521	@ 0x9d9
 811b7a8:	491e      	ldr	r1, [pc, #120]	@ (811b824 <tcp_pcbs_sane+0x98>)
 811b7aa:	481f      	ldr	r0, [pc, #124]	@ (811b828 <tcp_pcbs_sane+0x9c>)
 811b7ac:	f006 fd5a 	bl	8122264 <iprintf>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != LISTEN", pcb->state != LISTEN);
 811b7b0:	687b      	ldr	r3, [r7, #4]
 811b7b2:	7d1b      	ldrb	r3, [r3, #20]
 811b7b4:	2b01      	cmp	r3, #1
 811b7b6:	d106      	bne.n	811b7c6 <tcp_pcbs_sane+0x3a>
 811b7b8:	4b19      	ldr	r3, [pc, #100]	@ (811b820 <tcp_pcbs_sane+0x94>)
 811b7ba:	f640 12da 	movw	r2, #2522	@ 0x9da
 811b7be:	491b      	ldr	r1, [pc, #108]	@ (811b82c <tcp_pcbs_sane+0xa0>)
 811b7c0:	4819      	ldr	r0, [pc, #100]	@ (811b828 <tcp_pcbs_sane+0x9c>)
 811b7c2:	f006 fd4f 	bl	8122264 <iprintf>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 811b7c6:	687b      	ldr	r3, [r7, #4]
 811b7c8:	7d1b      	ldrb	r3, [r3, #20]
 811b7ca:	2b0a      	cmp	r3, #10
 811b7cc:	d106      	bne.n	811b7dc <tcp_pcbs_sane+0x50>
 811b7ce:	4b14      	ldr	r3, [pc, #80]	@ (811b820 <tcp_pcbs_sane+0x94>)
 811b7d0:	f640 12db 	movw	r2, #2523	@ 0x9db
 811b7d4:	4916      	ldr	r1, [pc, #88]	@ (811b830 <tcp_pcbs_sane+0xa4>)
 811b7d6:	4814      	ldr	r0, [pc, #80]	@ (811b828 <tcp_pcbs_sane+0x9c>)
 811b7d8:	f006 fd44 	bl	8122264 <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 811b7dc:	687b      	ldr	r3, [r7, #4]
 811b7de:	68db      	ldr	r3, [r3, #12]
 811b7e0:	607b      	str	r3, [r7, #4]
 811b7e2:	687b      	ldr	r3, [r7, #4]
 811b7e4:	2b00      	cmp	r3, #0
 811b7e6:	d1d8      	bne.n	811b79a <tcp_pcbs_sane+0xe>
  }
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 811b7e8:	4b12      	ldr	r3, [pc, #72]	@ (811b834 <tcp_pcbs_sane+0xa8>)
 811b7ea:	681b      	ldr	r3, [r3, #0]
 811b7ec:	607b      	str	r3, [r7, #4]
 811b7ee:	e00d      	b.n	811b80c <tcp_pcbs_sane+0x80>
    LWIP_ASSERT("tcp_pcbs_sane: tw pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 811b7f0:	687b      	ldr	r3, [r7, #4]
 811b7f2:	7d1b      	ldrb	r3, [r3, #20]
 811b7f4:	2b0a      	cmp	r3, #10
 811b7f6:	d006      	beq.n	811b806 <tcp_pcbs_sane+0x7a>
 811b7f8:	4b09      	ldr	r3, [pc, #36]	@ (811b820 <tcp_pcbs_sane+0x94>)
 811b7fa:	f640 12de 	movw	r2, #2526	@ 0x9de
 811b7fe:	490e      	ldr	r1, [pc, #56]	@ (811b838 <tcp_pcbs_sane+0xac>)
 811b800:	4809      	ldr	r0, [pc, #36]	@ (811b828 <tcp_pcbs_sane+0x9c>)
 811b802:	f006 fd2f 	bl	8122264 <iprintf>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 811b806:	687b      	ldr	r3, [r7, #4]
 811b808:	68db      	ldr	r3, [r3, #12]
 811b80a:	607b      	str	r3, [r7, #4]
 811b80c:	687b      	ldr	r3, [r7, #4]
 811b80e:	2b00      	cmp	r3, #0
 811b810:	d1ee      	bne.n	811b7f0 <tcp_pcbs_sane+0x64>
  }
  return 1;
 811b812:	2301      	movs	r3, #1
}
 811b814:	4618      	mov	r0, r3
 811b816:	3708      	adds	r7, #8
 811b818:	46bd      	mov	sp, r7
 811b81a:	bd80      	pop	{r7, pc}
 811b81c:	10011e64 	.word	0x10011e64
 811b820:	08125e58 	.word	0x08125e58
 811b824:	08126d14 	.word	0x08126d14
 811b828:	08125edc 	.word	0x08125edc
 811b82c:	08126d40 	.word	0x08126d40
 811b830:	08126d6c 	.word	0x08126d6c
 811b834:	10011e68 	.word	0x10011e68
 811b838:	08126d9c 	.word	0x08126d9c

0811b83c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 811b83c:	b590      	push	{r4, r7, lr}
 811b83e:	b08d      	sub	sp, #52	@ 0x34
 811b840:	af04      	add	r7, sp, #16
 811b842:	6078      	str	r0, [r7, #4]
 811b844:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 811b846:	687b      	ldr	r3, [r7, #4]
 811b848:	2b00      	cmp	r3, #0
 811b84a:	d105      	bne.n	811b858 <tcp_input+0x1c>
 811b84c:	4b9b      	ldr	r3, [pc, #620]	@ (811babc <tcp_input+0x280>)
 811b84e:	2283      	movs	r2, #131	@ 0x83
 811b850:	499b      	ldr	r1, [pc, #620]	@ (811bac0 <tcp_input+0x284>)
 811b852:	489c      	ldr	r0, [pc, #624]	@ (811bac4 <tcp_input+0x288>)
 811b854:	f006 fd06 	bl	8122264 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 811b858:	687b      	ldr	r3, [r7, #4]
 811b85a:	685b      	ldr	r3, [r3, #4]
 811b85c:	4a9a      	ldr	r2, [pc, #616]	@ (811bac8 <tcp_input+0x28c>)
 811b85e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 811b860:	687b      	ldr	r3, [r7, #4]
 811b862:	895b      	ldrh	r3, [r3, #10]
 811b864:	2b13      	cmp	r3, #19
 811b866:	f240 83dd 	bls.w	811c024 <tcp_input+0x7e8>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 811b86a:	4b98      	ldr	r3, [pc, #608]	@ (811bacc <tcp_input+0x290>)
 811b86c:	695b      	ldr	r3, [r3, #20]
 811b86e:	4a97      	ldr	r2, [pc, #604]	@ (811bacc <tcp_input+0x290>)
 811b870:	6812      	ldr	r2, [r2, #0]
 811b872:	4611      	mov	r1, r2
 811b874:	4618      	mov	r0, r3
 811b876:	f7fa ff91 	bl	811679c <ip4_addr_isbroadcast_u32>
 811b87a:	4603      	mov	r3, r0
 811b87c:	2b00      	cmp	r3, #0
 811b87e:	f040 83d3 	bne.w	811c028 <tcp_input+0x7ec>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 811b882:	4b92      	ldr	r3, [pc, #584]	@ (811bacc <tcp_input+0x290>)
 811b884:	695b      	ldr	r3, [r3, #20]
 811b886:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 811b88a:	2be0      	cmp	r3, #224	@ 0xe0
 811b88c:	f000 83cc 	beq.w	811c028 <tcp_input+0x7ec>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 811b890:	4b8d      	ldr	r3, [pc, #564]	@ (811bac8 <tcp_input+0x28c>)
 811b892:	681b      	ldr	r3, [r3, #0]
 811b894:	899b      	ldrh	r3, [r3, #12]
 811b896:	b29b      	uxth	r3, r3
 811b898:	4618      	mov	r0, r3
 811b89a:	f7f8 fccf 	bl	811423c <lwip_htons>
 811b89e:	4603      	mov	r3, r0
 811b8a0:	0b1b      	lsrs	r3, r3, #12
 811b8a2:	b29b      	uxth	r3, r3
 811b8a4:	b2db      	uxtb	r3, r3
 811b8a6:	009b      	lsls	r3, r3, #2
 811b8a8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 811b8aa:	7cbb      	ldrb	r3, [r7, #18]
 811b8ac:	2b13      	cmp	r3, #19
 811b8ae:	f240 83bd 	bls.w	811c02c <tcp_input+0x7f0>
 811b8b2:	7cbb      	ldrb	r3, [r7, #18]
 811b8b4:	b29a      	uxth	r2, r3
 811b8b6:	687b      	ldr	r3, [r7, #4]
 811b8b8:	891b      	ldrh	r3, [r3, #8]
 811b8ba:	429a      	cmp	r2, r3
 811b8bc:	f200 83b6 	bhi.w	811c02c <tcp_input+0x7f0>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 811b8c0:	7cbb      	ldrb	r3, [r7, #18]
 811b8c2:	b29b      	uxth	r3, r3
 811b8c4:	3b14      	subs	r3, #20
 811b8c6:	b29a      	uxth	r2, r3
 811b8c8:	4b81      	ldr	r3, [pc, #516]	@ (811bad0 <tcp_input+0x294>)
 811b8ca:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 811b8cc:	4b81      	ldr	r3, [pc, #516]	@ (811bad4 <tcp_input+0x298>)
 811b8ce:	2200      	movs	r2, #0
 811b8d0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 811b8d2:	687b      	ldr	r3, [r7, #4]
 811b8d4:	895a      	ldrh	r2, [r3, #10]
 811b8d6:	7cbb      	ldrb	r3, [r7, #18]
 811b8d8:	b29b      	uxth	r3, r3
 811b8da:	429a      	cmp	r2, r3
 811b8dc:	d309      	bcc.n	811b8f2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 811b8de:	4b7c      	ldr	r3, [pc, #496]	@ (811bad0 <tcp_input+0x294>)
 811b8e0:	881a      	ldrh	r2, [r3, #0]
 811b8e2:	4b7d      	ldr	r3, [pc, #500]	@ (811bad8 <tcp_input+0x29c>)
 811b8e4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 811b8e6:	7cbb      	ldrb	r3, [r7, #18]
 811b8e8:	4619      	mov	r1, r3
 811b8ea:	6878      	ldr	r0, [r7, #4]
 811b8ec:	f7fd fbc0 	bl	8119070 <pbuf_remove_header>
 811b8f0:	e04e      	b.n	811b990 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 811b8f2:	687b      	ldr	r3, [r7, #4]
 811b8f4:	681b      	ldr	r3, [r3, #0]
 811b8f6:	2b00      	cmp	r3, #0
 811b8f8:	d105      	bne.n	811b906 <tcp_input+0xca>
 811b8fa:	4b70      	ldr	r3, [pc, #448]	@ (811babc <tcp_input+0x280>)
 811b8fc:	22c2      	movs	r2, #194	@ 0xc2
 811b8fe:	4977      	ldr	r1, [pc, #476]	@ (811badc <tcp_input+0x2a0>)
 811b900:	4870      	ldr	r0, [pc, #448]	@ (811bac4 <tcp_input+0x288>)
 811b902:	f006 fcaf 	bl	8122264 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 811b906:	2114      	movs	r1, #20
 811b908:	6878      	ldr	r0, [r7, #4]
 811b90a:	f7fd fbb1 	bl	8119070 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 811b90e:	687b      	ldr	r3, [r7, #4]
 811b910:	895a      	ldrh	r2, [r3, #10]
 811b912:	4b71      	ldr	r3, [pc, #452]	@ (811bad8 <tcp_input+0x29c>)
 811b914:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 811b916:	4b6e      	ldr	r3, [pc, #440]	@ (811bad0 <tcp_input+0x294>)
 811b918:	881a      	ldrh	r2, [r3, #0]
 811b91a:	4b6f      	ldr	r3, [pc, #444]	@ (811bad8 <tcp_input+0x29c>)
 811b91c:	881b      	ldrh	r3, [r3, #0]
 811b91e:	1ad3      	subs	r3, r2, r3
 811b920:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 811b922:	4b6d      	ldr	r3, [pc, #436]	@ (811bad8 <tcp_input+0x29c>)
 811b924:	881b      	ldrh	r3, [r3, #0]
 811b926:	4619      	mov	r1, r3
 811b928:	6878      	ldr	r0, [r7, #4]
 811b92a:	f7fd fba1 	bl	8119070 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 811b92e:	687b      	ldr	r3, [r7, #4]
 811b930:	681b      	ldr	r3, [r3, #0]
 811b932:	895b      	ldrh	r3, [r3, #10]
 811b934:	8a3a      	ldrh	r2, [r7, #16]
 811b936:	429a      	cmp	r2, r3
 811b938:	f200 837a 	bhi.w	811c030 <tcp_input+0x7f4>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 811b93c:	687b      	ldr	r3, [r7, #4]
 811b93e:	681b      	ldr	r3, [r3, #0]
 811b940:	685b      	ldr	r3, [r3, #4]
 811b942:	4a64      	ldr	r2, [pc, #400]	@ (811bad4 <tcp_input+0x298>)
 811b944:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 811b946:	687b      	ldr	r3, [r7, #4]
 811b948:	681b      	ldr	r3, [r3, #0]
 811b94a:	8a3a      	ldrh	r2, [r7, #16]
 811b94c:	4611      	mov	r1, r2
 811b94e:	4618      	mov	r0, r3
 811b950:	f7fd fb8e 	bl	8119070 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 811b954:	687b      	ldr	r3, [r7, #4]
 811b956:	891a      	ldrh	r2, [r3, #8]
 811b958:	8a3b      	ldrh	r3, [r7, #16]
 811b95a:	1ad3      	subs	r3, r2, r3
 811b95c:	b29a      	uxth	r2, r3
 811b95e:	687b      	ldr	r3, [r7, #4]
 811b960:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 811b962:	687b      	ldr	r3, [r7, #4]
 811b964:	895b      	ldrh	r3, [r3, #10]
 811b966:	2b00      	cmp	r3, #0
 811b968:	d005      	beq.n	811b976 <tcp_input+0x13a>
 811b96a:	4b54      	ldr	r3, [pc, #336]	@ (811babc <tcp_input+0x280>)
 811b96c:	22df      	movs	r2, #223	@ 0xdf
 811b96e:	495c      	ldr	r1, [pc, #368]	@ (811bae0 <tcp_input+0x2a4>)
 811b970:	4854      	ldr	r0, [pc, #336]	@ (811bac4 <tcp_input+0x288>)
 811b972:	f006 fc77 	bl	8122264 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 811b976:	687b      	ldr	r3, [r7, #4]
 811b978:	891a      	ldrh	r2, [r3, #8]
 811b97a:	687b      	ldr	r3, [r7, #4]
 811b97c:	681b      	ldr	r3, [r3, #0]
 811b97e:	891b      	ldrh	r3, [r3, #8]
 811b980:	429a      	cmp	r2, r3
 811b982:	d005      	beq.n	811b990 <tcp_input+0x154>
 811b984:	4b4d      	ldr	r3, [pc, #308]	@ (811babc <tcp_input+0x280>)
 811b986:	22e0      	movs	r2, #224	@ 0xe0
 811b988:	4956      	ldr	r1, [pc, #344]	@ (811bae4 <tcp_input+0x2a8>)
 811b98a:	484e      	ldr	r0, [pc, #312]	@ (811bac4 <tcp_input+0x288>)
 811b98c:	f006 fc6a 	bl	8122264 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 811b990:	4b4d      	ldr	r3, [pc, #308]	@ (811bac8 <tcp_input+0x28c>)
 811b992:	681b      	ldr	r3, [r3, #0]
 811b994:	881b      	ldrh	r3, [r3, #0]
 811b996:	b29b      	uxth	r3, r3
 811b998:	4a4b      	ldr	r2, [pc, #300]	@ (811bac8 <tcp_input+0x28c>)
 811b99a:	6814      	ldr	r4, [r2, #0]
 811b99c:	4618      	mov	r0, r3
 811b99e:	f7f8 fc4d 	bl	811423c <lwip_htons>
 811b9a2:	4603      	mov	r3, r0
 811b9a4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 811b9a6:	4b48      	ldr	r3, [pc, #288]	@ (811bac8 <tcp_input+0x28c>)
 811b9a8:	681b      	ldr	r3, [r3, #0]
 811b9aa:	885b      	ldrh	r3, [r3, #2]
 811b9ac:	b29b      	uxth	r3, r3
 811b9ae:	4a46      	ldr	r2, [pc, #280]	@ (811bac8 <tcp_input+0x28c>)
 811b9b0:	6814      	ldr	r4, [r2, #0]
 811b9b2:	4618      	mov	r0, r3
 811b9b4:	f7f8 fc42 	bl	811423c <lwip_htons>
 811b9b8:	4603      	mov	r3, r0
 811b9ba:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 811b9bc:	4b42      	ldr	r3, [pc, #264]	@ (811bac8 <tcp_input+0x28c>)
 811b9be:	681b      	ldr	r3, [r3, #0]
 811b9c0:	685b      	ldr	r3, [r3, #4]
 811b9c2:	4a41      	ldr	r2, [pc, #260]	@ (811bac8 <tcp_input+0x28c>)
 811b9c4:	6814      	ldr	r4, [r2, #0]
 811b9c6:	4618      	mov	r0, r3
 811b9c8:	f7f8 fc4d 	bl	8114266 <lwip_htonl>
 811b9cc:	4603      	mov	r3, r0
 811b9ce:	6063      	str	r3, [r4, #4]
 811b9d0:	6863      	ldr	r3, [r4, #4]
 811b9d2:	4a45      	ldr	r2, [pc, #276]	@ (811bae8 <tcp_input+0x2ac>)
 811b9d4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 811b9d6:	4b3c      	ldr	r3, [pc, #240]	@ (811bac8 <tcp_input+0x28c>)
 811b9d8:	681b      	ldr	r3, [r3, #0]
 811b9da:	689b      	ldr	r3, [r3, #8]
 811b9dc:	4a3a      	ldr	r2, [pc, #232]	@ (811bac8 <tcp_input+0x28c>)
 811b9de:	6814      	ldr	r4, [r2, #0]
 811b9e0:	4618      	mov	r0, r3
 811b9e2:	f7f8 fc40 	bl	8114266 <lwip_htonl>
 811b9e6:	4603      	mov	r3, r0
 811b9e8:	60a3      	str	r3, [r4, #8]
 811b9ea:	68a3      	ldr	r3, [r4, #8]
 811b9ec:	4a3f      	ldr	r2, [pc, #252]	@ (811baec <tcp_input+0x2b0>)
 811b9ee:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 811b9f0:	4b35      	ldr	r3, [pc, #212]	@ (811bac8 <tcp_input+0x28c>)
 811b9f2:	681b      	ldr	r3, [r3, #0]
 811b9f4:	89db      	ldrh	r3, [r3, #14]
 811b9f6:	b29b      	uxth	r3, r3
 811b9f8:	4a33      	ldr	r2, [pc, #204]	@ (811bac8 <tcp_input+0x28c>)
 811b9fa:	6814      	ldr	r4, [r2, #0]
 811b9fc:	4618      	mov	r0, r3
 811b9fe:	f7f8 fc1d 	bl	811423c <lwip_htons>
 811ba02:	4603      	mov	r3, r0
 811ba04:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 811ba06:	4b30      	ldr	r3, [pc, #192]	@ (811bac8 <tcp_input+0x28c>)
 811ba08:	681b      	ldr	r3, [r3, #0]
 811ba0a:	899b      	ldrh	r3, [r3, #12]
 811ba0c:	b29b      	uxth	r3, r3
 811ba0e:	4618      	mov	r0, r3
 811ba10:	f7f8 fc14 	bl	811423c <lwip_htons>
 811ba14:	4603      	mov	r3, r0
 811ba16:	b2db      	uxtb	r3, r3
 811ba18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 811ba1c:	b2da      	uxtb	r2, r3
 811ba1e:	4b34      	ldr	r3, [pc, #208]	@ (811baf0 <tcp_input+0x2b4>)
 811ba20:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 811ba22:	687b      	ldr	r3, [r7, #4]
 811ba24:	891a      	ldrh	r2, [r3, #8]
 811ba26:	4b33      	ldr	r3, [pc, #204]	@ (811baf4 <tcp_input+0x2b8>)
 811ba28:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 811ba2a:	4b31      	ldr	r3, [pc, #196]	@ (811baf0 <tcp_input+0x2b4>)
 811ba2c:	781b      	ldrb	r3, [r3, #0]
 811ba2e:	f003 0303 	and.w	r3, r3, #3
 811ba32:	2b00      	cmp	r3, #0
 811ba34:	d00c      	beq.n	811ba50 <tcp_input+0x214>
    tcplen++;
 811ba36:	4b2f      	ldr	r3, [pc, #188]	@ (811baf4 <tcp_input+0x2b8>)
 811ba38:	881b      	ldrh	r3, [r3, #0]
 811ba3a:	3301      	adds	r3, #1
 811ba3c:	b29a      	uxth	r2, r3
 811ba3e:	4b2d      	ldr	r3, [pc, #180]	@ (811baf4 <tcp_input+0x2b8>)
 811ba40:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 811ba42:	687b      	ldr	r3, [r7, #4]
 811ba44:	891a      	ldrh	r2, [r3, #8]
 811ba46:	4b2b      	ldr	r3, [pc, #172]	@ (811baf4 <tcp_input+0x2b8>)
 811ba48:	881b      	ldrh	r3, [r3, #0]
 811ba4a:	429a      	cmp	r2, r3
 811ba4c:	f200 82f2 	bhi.w	811c034 <tcp_input+0x7f8>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 811ba50:	2300      	movs	r3, #0
 811ba52:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 811ba54:	4b28      	ldr	r3, [pc, #160]	@ (811baf8 <tcp_input+0x2bc>)
 811ba56:	681b      	ldr	r3, [r3, #0]
 811ba58:	61bb      	str	r3, [r7, #24]
 811ba5a:	e09d      	b.n	811bb98 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 811ba5c:	69bb      	ldr	r3, [r7, #24]
 811ba5e:	7d1b      	ldrb	r3, [r3, #20]
 811ba60:	2b00      	cmp	r3, #0
 811ba62:	d105      	bne.n	811ba70 <tcp_input+0x234>
 811ba64:	4b15      	ldr	r3, [pc, #84]	@ (811babc <tcp_input+0x280>)
 811ba66:	22fb      	movs	r2, #251	@ 0xfb
 811ba68:	4924      	ldr	r1, [pc, #144]	@ (811bafc <tcp_input+0x2c0>)
 811ba6a:	4816      	ldr	r0, [pc, #88]	@ (811bac4 <tcp_input+0x288>)
 811ba6c:	f006 fbfa 	bl	8122264 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 811ba70:	69bb      	ldr	r3, [r7, #24]
 811ba72:	7d1b      	ldrb	r3, [r3, #20]
 811ba74:	2b0a      	cmp	r3, #10
 811ba76:	d105      	bne.n	811ba84 <tcp_input+0x248>
 811ba78:	4b10      	ldr	r3, [pc, #64]	@ (811babc <tcp_input+0x280>)
 811ba7a:	22fc      	movs	r2, #252	@ 0xfc
 811ba7c:	4920      	ldr	r1, [pc, #128]	@ (811bb00 <tcp_input+0x2c4>)
 811ba7e:	4811      	ldr	r0, [pc, #68]	@ (811bac4 <tcp_input+0x288>)
 811ba80:	f006 fbf0 	bl	8122264 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 811ba84:	69bb      	ldr	r3, [r7, #24]
 811ba86:	7d1b      	ldrb	r3, [r3, #20]
 811ba88:	2b01      	cmp	r3, #1
 811ba8a:	d105      	bne.n	811ba98 <tcp_input+0x25c>
 811ba8c:	4b0b      	ldr	r3, [pc, #44]	@ (811babc <tcp_input+0x280>)
 811ba8e:	22fd      	movs	r2, #253	@ 0xfd
 811ba90:	491c      	ldr	r1, [pc, #112]	@ (811bb04 <tcp_input+0x2c8>)
 811ba92:	480c      	ldr	r0, [pc, #48]	@ (811bac4 <tcp_input+0x288>)
 811ba94:	f006 fbe6 	bl	8122264 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 811ba98:	69bb      	ldr	r3, [r7, #24]
 811ba9a:	7a1b      	ldrb	r3, [r3, #8]
 811ba9c:	2b00      	cmp	r3, #0
 811ba9e:	d033      	beq.n	811bb08 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 811baa0:	69bb      	ldr	r3, [r7, #24]
 811baa2:	7a1a      	ldrb	r2, [r3, #8]
 811baa4:	4b09      	ldr	r3, [pc, #36]	@ (811bacc <tcp_input+0x290>)
 811baa6:	685b      	ldr	r3, [r3, #4]
 811baa8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811baac:	3301      	adds	r3, #1
 811baae:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 811bab0:	429a      	cmp	r2, r3
 811bab2:	d029      	beq.n	811bb08 <tcp_input+0x2cc>
      prev = pcb;
 811bab4:	69bb      	ldr	r3, [r7, #24]
 811bab6:	61fb      	str	r3, [r7, #28]
      continue;
 811bab8:	e06b      	b.n	811bb92 <tcp_input+0x356>
 811baba:	bf00      	nop
 811babc:	08126dc8 	.word	0x08126dc8
 811bac0:	08126e3c 	.word	0x08126e3c
 811bac4:	08126e54 	.word	0x08126e54
 811bac8:	10011e84 	.word	0x10011e84
 811bacc:	1000b2b4 	.word	0x1000b2b4
 811bad0:	10011e88 	.word	0x10011e88
 811bad4:	10011e8c 	.word	0x10011e8c
 811bad8:	10011e8a 	.word	0x10011e8a
 811badc:	08126e7c 	.word	0x08126e7c
 811bae0:	08126e8c 	.word	0x08126e8c
 811bae4:	08126e98 	.word	0x08126e98
 811bae8:	10011e94 	.word	0x10011e94
 811baec:	10011e98 	.word	0x10011e98
 811baf0:	10011ea0 	.word	0x10011ea0
 811baf4:	10011e9e 	.word	0x10011e9e
 811baf8:	10011e64 	.word	0x10011e64
 811bafc:	08126eb8 	.word	0x08126eb8
 811bb00:	08126ee0 	.word	0x08126ee0
 811bb04:	08126f0c 	.word	0x08126f0c
    }

    if (pcb->remote_port == tcphdr->src &&
 811bb08:	69bb      	ldr	r3, [r7, #24]
 811bb0a:	8b1a      	ldrh	r2, [r3, #24]
 811bb0c:	4b72      	ldr	r3, [pc, #456]	@ (811bcd8 <tcp_input+0x49c>)
 811bb0e:	681b      	ldr	r3, [r3, #0]
 811bb10:	881b      	ldrh	r3, [r3, #0]
 811bb12:	b29b      	uxth	r3, r3
 811bb14:	429a      	cmp	r2, r3
 811bb16:	d13a      	bne.n	811bb8e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 811bb18:	69bb      	ldr	r3, [r7, #24]
 811bb1a:	8ada      	ldrh	r2, [r3, #22]
 811bb1c:	4b6e      	ldr	r3, [pc, #440]	@ (811bcd8 <tcp_input+0x49c>)
 811bb1e:	681b      	ldr	r3, [r3, #0]
 811bb20:	885b      	ldrh	r3, [r3, #2]
 811bb22:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 811bb24:	429a      	cmp	r2, r3
 811bb26:	d132      	bne.n	811bb8e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 811bb28:	69bb      	ldr	r3, [r7, #24]
 811bb2a:	685a      	ldr	r2, [r3, #4]
 811bb2c:	4b6b      	ldr	r3, [pc, #428]	@ (811bcdc <tcp_input+0x4a0>)
 811bb2e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 811bb30:	429a      	cmp	r2, r3
 811bb32:	d12c      	bne.n	811bb8e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 811bb34:	69bb      	ldr	r3, [r7, #24]
 811bb36:	681a      	ldr	r2, [r3, #0]
 811bb38:	4b68      	ldr	r3, [pc, #416]	@ (811bcdc <tcp_input+0x4a0>)
 811bb3a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 811bb3c:	429a      	cmp	r2, r3
 811bb3e:	d126      	bne.n	811bb8e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 811bb40:	69bb      	ldr	r3, [r7, #24]
 811bb42:	68db      	ldr	r3, [r3, #12]
 811bb44:	69ba      	ldr	r2, [r7, #24]
 811bb46:	429a      	cmp	r2, r3
 811bb48:	d106      	bne.n	811bb58 <tcp_input+0x31c>
 811bb4a:	4b65      	ldr	r3, [pc, #404]	@ (811bce0 <tcp_input+0x4a4>)
 811bb4c:	f240 120d 	movw	r2, #269	@ 0x10d
 811bb50:	4964      	ldr	r1, [pc, #400]	@ (811bce4 <tcp_input+0x4a8>)
 811bb52:	4865      	ldr	r0, [pc, #404]	@ (811bce8 <tcp_input+0x4ac>)
 811bb54:	f006 fb86 	bl	8122264 <iprintf>
      if (prev != NULL) {
 811bb58:	69fb      	ldr	r3, [r7, #28]
 811bb5a:	2b00      	cmp	r3, #0
 811bb5c:	d00a      	beq.n	811bb74 <tcp_input+0x338>
        prev->next = pcb->next;
 811bb5e:	69bb      	ldr	r3, [r7, #24]
 811bb60:	68da      	ldr	r2, [r3, #12]
 811bb62:	69fb      	ldr	r3, [r7, #28]
 811bb64:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 811bb66:	4b61      	ldr	r3, [pc, #388]	@ (811bcec <tcp_input+0x4b0>)
 811bb68:	681a      	ldr	r2, [r3, #0]
 811bb6a:	69bb      	ldr	r3, [r7, #24]
 811bb6c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 811bb6e:	4a5f      	ldr	r2, [pc, #380]	@ (811bcec <tcp_input+0x4b0>)
 811bb70:	69bb      	ldr	r3, [r7, #24]
 811bb72:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 811bb74:	69bb      	ldr	r3, [r7, #24]
 811bb76:	68db      	ldr	r3, [r3, #12]
 811bb78:	69ba      	ldr	r2, [r7, #24]
 811bb7a:	429a      	cmp	r2, r3
 811bb7c:	d111      	bne.n	811bba2 <tcp_input+0x366>
 811bb7e:	4b58      	ldr	r3, [pc, #352]	@ (811bce0 <tcp_input+0x4a4>)
 811bb80:	f240 1215 	movw	r2, #277	@ 0x115
 811bb84:	495a      	ldr	r1, [pc, #360]	@ (811bcf0 <tcp_input+0x4b4>)
 811bb86:	4858      	ldr	r0, [pc, #352]	@ (811bce8 <tcp_input+0x4ac>)
 811bb88:	f006 fb6c 	bl	8122264 <iprintf>
      break;
 811bb8c:	e009      	b.n	811bba2 <tcp_input+0x366>
    }
    prev = pcb;
 811bb8e:	69bb      	ldr	r3, [r7, #24]
 811bb90:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 811bb92:	69bb      	ldr	r3, [r7, #24]
 811bb94:	68db      	ldr	r3, [r3, #12]
 811bb96:	61bb      	str	r3, [r7, #24]
 811bb98:	69bb      	ldr	r3, [r7, #24]
 811bb9a:	2b00      	cmp	r3, #0
 811bb9c:	f47f af5e 	bne.w	811ba5c <tcp_input+0x220>
 811bba0:	e000      	b.n	811bba4 <tcp_input+0x368>
      break;
 811bba2:	bf00      	nop
  }

  if (pcb == NULL) {
 811bba4:	69bb      	ldr	r3, [r7, #24]
 811bba6:	2b00      	cmp	r3, #0
 811bba8:	f040 80aa 	bne.w	811bd00 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 811bbac:	4b51      	ldr	r3, [pc, #324]	@ (811bcf4 <tcp_input+0x4b8>)
 811bbae:	681b      	ldr	r3, [r3, #0]
 811bbb0:	61bb      	str	r3, [r7, #24]
 811bbb2:	e03f      	b.n	811bc34 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 811bbb4:	69bb      	ldr	r3, [r7, #24]
 811bbb6:	7d1b      	ldrb	r3, [r3, #20]
 811bbb8:	2b0a      	cmp	r3, #10
 811bbba:	d006      	beq.n	811bbca <tcp_input+0x38e>
 811bbbc:	4b48      	ldr	r3, [pc, #288]	@ (811bce0 <tcp_input+0x4a4>)
 811bbbe:	f240 121f 	movw	r2, #287	@ 0x11f
 811bbc2:	494d      	ldr	r1, [pc, #308]	@ (811bcf8 <tcp_input+0x4bc>)
 811bbc4:	4848      	ldr	r0, [pc, #288]	@ (811bce8 <tcp_input+0x4ac>)
 811bbc6:	f006 fb4d 	bl	8122264 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 811bbca:	69bb      	ldr	r3, [r7, #24]
 811bbcc:	7a1b      	ldrb	r3, [r3, #8]
 811bbce:	2b00      	cmp	r3, #0
 811bbd0:	d009      	beq.n	811bbe6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 811bbd2:	69bb      	ldr	r3, [r7, #24]
 811bbd4:	7a1a      	ldrb	r2, [r3, #8]
 811bbd6:	4b41      	ldr	r3, [pc, #260]	@ (811bcdc <tcp_input+0x4a0>)
 811bbd8:	685b      	ldr	r3, [r3, #4]
 811bbda:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811bbde:	3301      	adds	r3, #1
 811bbe0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 811bbe2:	429a      	cmp	r2, r3
 811bbe4:	d122      	bne.n	811bc2c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 811bbe6:	69bb      	ldr	r3, [r7, #24]
 811bbe8:	8b1a      	ldrh	r2, [r3, #24]
 811bbea:	4b3b      	ldr	r3, [pc, #236]	@ (811bcd8 <tcp_input+0x49c>)
 811bbec:	681b      	ldr	r3, [r3, #0]
 811bbee:	881b      	ldrh	r3, [r3, #0]
 811bbf0:	b29b      	uxth	r3, r3
 811bbf2:	429a      	cmp	r2, r3
 811bbf4:	d11b      	bne.n	811bc2e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 811bbf6:	69bb      	ldr	r3, [r7, #24]
 811bbf8:	8ada      	ldrh	r2, [r3, #22]
 811bbfa:	4b37      	ldr	r3, [pc, #220]	@ (811bcd8 <tcp_input+0x49c>)
 811bbfc:	681b      	ldr	r3, [r3, #0]
 811bbfe:	885b      	ldrh	r3, [r3, #2]
 811bc00:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 811bc02:	429a      	cmp	r2, r3
 811bc04:	d113      	bne.n	811bc2e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 811bc06:	69bb      	ldr	r3, [r7, #24]
 811bc08:	685a      	ldr	r2, [r3, #4]
 811bc0a:	4b34      	ldr	r3, [pc, #208]	@ (811bcdc <tcp_input+0x4a0>)
 811bc0c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 811bc0e:	429a      	cmp	r2, r3
 811bc10:	d10d      	bne.n	811bc2e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 811bc12:	69bb      	ldr	r3, [r7, #24]
 811bc14:	681a      	ldr	r2, [r3, #0]
 811bc16:	4b31      	ldr	r3, [pc, #196]	@ (811bcdc <tcp_input+0x4a0>)
 811bc18:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 811bc1a:	429a      	cmp	r2, r3
 811bc1c:	d107      	bne.n	811bc2e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 811bc1e:	69b8      	ldr	r0, [r7, #24]
 811bc20:	f000 fb82 	bl	811c328 <tcp_timewait_input>
        }
        pbuf_free(p);
 811bc24:	6878      	ldr	r0, [r7, #4]
 811bc26:	f7fd faa9 	bl	811917c <pbuf_free>
        return;
 811bc2a:	e209      	b.n	811c040 <tcp_input+0x804>
        continue;
 811bc2c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 811bc2e:	69bb      	ldr	r3, [r7, #24]
 811bc30:	68db      	ldr	r3, [r3, #12]
 811bc32:	61bb      	str	r3, [r7, #24]
 811bc34:	69bb      	ldr	r3, [r7, #24]
 811bc36:	2b00      	cmp	r3, #0
 811bc38:	d1bc      	bne.n	811bbb4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 811bc3a:	2300      	movs	r3, #0
 811bc3c:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 811bc3e:	4b2f      	ldr	r3, [pc, #188]	@ (811bcfc <tcp_input+0x4c0>)
 811bc40:	681b      	ldr	r3, [r3, #0]
 811bc42:	617b      	str	r3, [r7, #20]
 811bc44:	e02a      	b.n	811bc9c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 811bc46:	697b      	ldr	r3, [r7, #20]
 811bc48:	7a1b      	ldrb	r3, [r3, #8]
 811bc4a:	2b00      	cmp	r3, #0
 811bc4c:	d00c      	beq.n	811bc68 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 811bc4e:	697b      	ldr	r3, [r7, #20]
 811bc50:	7a1a      	ldrb	r2, [r3, #8]
 811bc52:	4b22      	ldr	r3, [pc, #136]	@ (811bcdc <tcp_input+0x4a0>)
 811bc54:	685b      	ldr	r3, [r3, #4]
 811bc56:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811bc5a:	3301      	adds	r3, #1
 811bc5c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 811bc5e:	429a      	cmp	r2, r3
 811bc60:	d002      	beq.n	811bc68 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 811bc62:	697b      	ldr	r3, [r7, #20]
 811bc64:	61fb      	str	r3, [r7, #28]
        continue;
 811bc66:	e016      	b.n	811bc96 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 811bc68:	697b      	ldr	r3, [r7, #20]
 811bc6a:	8ada      	ldrh	r2, [r3, #22]
 811bc6c:	4b1a      	ldr	r3, [pc, #104]	@ (811bcd8 <tcp_input+0x49c>)
 811bc6e:	681b      	ldr	r3, [r3, #0]
 811bc70:	885b      	ldrh	r3, [r3, #2]
 811bc72:	b29b      	uxth	r3, r3
 811bc74:	429a      	cmp	r2, r3
 811bc76:	d10c      	bne.n	811bc92 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 811bc78:	697b      	ldr	r3, [r7, #20]
 811bc7a:	681a      	ldr	r2, [r3, #0]
 811bc7c:	4b17      	ldr	r3, [pc, #92]	@ (811bcdc <tcp_input+0x4a0>)
 811bc7e:	695b      	ldr	r3, [r3, #20]
 811bc80:	429a      	cmp	r2, r3
 811bc82:	d00f      	beq.n	811bca4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 811bc84:	697b      	ldr	r3, [r7, #20]
 811bc86:	2b00      	cmp	r3, #0
 811bc88:	d00d      	beq.n	811bca6 <tcp_input+0x46a>
 811bc8a:	697b      	ldr	r3, [r7, #20]
 811bc8c:	681b      	ldr	r3, [r3, #0]
 811bc8e:	2b00      	cmp	r3, #0
 811bc90:	d009      	beq.n	811bca6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 811bc92:	697b      	ldr	r3, [r7, #20]
 811bc94:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 811bc96:	697b      	ldr	r3, [r7, #20]
 811bc98:	68db      	ldr	r3, [r3, #12]
 811bc9a:	617b      	str	r3, [r7, #20]
 811bc9c:	697b      	ldr	r3, [r7, #20]
 811bc9e:	2b00      	cmp	r3, #0
 811bca0:	d1d1      	bne.n	811bc46 <tcp_input+0x40a>
 811bca2:	e000      	b.n	811bca6 <tcp_input+0x46a>
            break;
 811bca4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 811bca6:	697b      	ldr	r3, [r7, #20]
 811bca8:	2b00      	cmp	r3, #0
 811bcaa:	d029      	beq.n	811bd00 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 811bcac:	69fb      	ldr	r3, [r7, #28]
 811bcae:	2b00      	cmp	r3, #0
 811bcb0:	d00a      	beq.n	811bcc8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 811bcb2:	697b      	ldr	r3, [r7, #20]
 811bcb4:	68da      	ldr	r2, [r3, #12]
 811bcb6:	69fb      	ldr	r3, [r7, #28]
 811bcb8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 811bcba:	4b10      	ldr	r3, [pc, #64]	@ (811bcfc <tcp_input+0x4c0>)
 811bcbc:	681a      	ldr	r2, [r3, #0]
 811bcbe:	697b      	ldr	r3, [r7, #20]
 811bcc0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 811bcc2:	4a0e      	ldr	r2, [pc, #56]	@ (811bcfc <tcp_input+0x4c0>)
 811bcc4:	697b      	ldr	r3, [r7, #20]
 811bcc6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 811bcc8:	6978      	ldr	r0, [r7, #20]
 811bcca:	f000 fa15 	bl	811c0f8 <tcp_listen_input>
      }
      pbuf_free(p);
 811bcce:	6878      	ldr	r0, [r7, #4]
 811bcd0:	f7fd fa54 	bl	811917c <pbuf_free>
      return;
 811bcd4:	e1b4      	b.n	811c040 <tcp_input+0x804>
 811bcd6:	bf00      	nop
 811bcd8:	10011e84 	.word	0x10011e84
 811bcdc:	1000b2b4 	.word	0x1000b2b4
 811bce0:	08126dc8 	.word	0x08126dc8
 811bce4:	08126f34 	.word	0x08126f34
 811bce8:	08126e54 	.word	0x08126e54
 811bcec:	10011e64 	.word	0x10011e64
 811bcf0:	08126f60 	.word	0x08126f60
 811bcf4:	10011e68 	.word	0x10011e68
 811bcf8:	08126f8c 	.word	0x08126f8c
 811bcfc:	10011e60 	.word	0x10011e60
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 811bd00:	69bb      	ldr	r3, [r7, #24]
 811bd02:	2b00      	cmp	r3, #0
 811bd04:	f000 8158 	beq.w	811bfb8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 811bd08:	4b95      	ldr	r3, [pc, #596]	@ (811bf60 <tcp_input+0x724>)
 811bd0a:	2200      	movs	r2, #0
 811bd0c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 811bd0e:	687b      	ldr	r3, [r7, #4]
 811bd10:	891a      	ldrh	r2, [r3, #8]
 811bd12:	4b93      	ldr	r3, [pc, #588]	@ (811bf60 <tcp_input+0x724>)
 811bd14:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 811bd16:	4a92      	ldr	r2, [pc, #584]	@ (811bf60 <tcp_input+0x724>)
 811bd18:	687b      	ldr	r3, [r7, #4]
 811bd1a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 811bd1c:	4b91      	ldr	r3, [pc, #580]	@ (811bf64 <tcp_input+0x728>)
 811bd1e:	681b      	ldr	r3, [r3, #0]
 811bd20:	4a8f      	ldr	r2, [pc, #572]	@ (811bf60 <tcp_input+0x724>)
 811bd22:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 811bd24:	4b90      	ldr	r3, [pc, #576]	@ (811bf68 <tcp_input+0x72c>)
 811bd26:	2200      	movs	r2, #0
 811bd28:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 811bd2a:	4b90      	ldr	r3, [pc, #576]	@ (811bf6c <tcp_input+0x730>)
 811bd2c:	2200      	movs	r2, #0
 811bd2e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 811bd30:	4b8f      	ldr	r3, [pc, #572]	@ (811bf70 <tcp_input+0x734>)
 811bd32:	2200      	movs	r2, #0
 811bd34:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 811bd36:	4b8f      	ldr	r3, [pc, #572]	@ (811bf74 <tcp_input+0x738>)
 811bd38:	781b      	ldrb	r3, [r3, #0]
 811bd3a:	f003 0308 	and.w	r3, r3, #8
 811bd3e:	2b00      	cmp	r3, #0
 811bd40:	d006      	beq.n	811bd50 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 811bd42:	687b      	ldr	r3, [r7, #4]
 811bd44:	7b5b      	ldrb	r3, [r3, #13]
 811bd46:	f043 0301 	orr.w	r3, r3, #1
 811bd4a:	b2da      	uxtb	r2, r3
 811bd4c:	687b      	ldr	r3, [r7, #4]
 811bd4e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 811bd50:	69bb      	ldr	r3, [r7, #24]
 811bd52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811bd54:	2b00      	cmp	r3, #0
 811bd56:	d017      	beq.n	811bd88 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 811bd58:	69b8      	ldr	r0, [r7, #24]
 811bd5a:	f7fe ffb7 	bl	811accc <tcp_process_refused_data>
 811bd5e:	4603      	mov	r3, r0
 811bd60:	f113 0f0d 	cmn.w	r3, #13
 811bd64:	d007      	beq.n	811bd76 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 811bd66:	69bb      	ldr	r3, [r7, #24]
 811bd68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 811bd6a:	2b00      	cmp	r3, #0
 811bd6c:	d00c      	beq.n	811bd88 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 811bd6e:	4b82      	ldr	r3, [pc, #520]	@ (811bf78 <tcp_input+0x73c>)
 811bd70:	881b      	ldrh	r3, [r3, #0]
 811bd72:	2b00      	cmp	r3, #0
 811bd74:	d008      	beq.n	811bd88 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 811bd76:	69bb      	ldr	r3, [r7, #24]
 811bd78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 811bd7a:	2b00      	cmp	r3, #0
 811bd7c:	f040 80e4 	bne.w	811bf48 <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 811bd80:	69b8      	ldr	r0, [r7, #24]
 811bd82:	f003 ff25 	bl	811fbd0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 811bd86:	e0df      	b.n	811bf48 <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 811bd88:	4a7c      	ldr	r2, [pc, #496]	@ (811bf7c <tcp_input+0x740>)
 811bd8a:	69bb      	ldr	r3, [r7, #24]
 811bd8c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 811bd8e:	69b8      	ldr	r0, [r7, #24]
 811bd90:	f000 fb44 	bl	811c41c <tcp_process>
 811bd94:	4603      	mov	r3, r0
 811bd96:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 811bd98:	f997 3013 	ldrsb.w	r3, [r7, #19]
 811bd9c:	f113 0f0d 	cmn.w	r3, #13
 811bda0:	f000 80d4 	beq.w	811bf4c <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 811bda4:	4b71      	ldr	r3, [pc, #452]	@ (811bf6c <tcp_input+0x730>)
 811bda6:	781b      	ldrb	r3, [r3, #0]
 811bda8:	f003 0308 	and.w	r3, r3, #8
 811bdac:	2b00      	cmp	r3, #0
 811bdae:	d015      	beq.n	811bddc <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 811bdb0:	69bb      	ldr	r3, [r7, #24]
 811bdb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 811bdb6:	2b00      	cmp	r3, #0
 811bdb8:	d008      	beq.n	811bdcc <tcp_input+0x590>
 811bdba:	69bb      	ldr	r3, [r7, #24]
 811bdbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 811bdc0:	69ba      	ldr	r2, [r7, #24]
 811bdc2:	6912      	ldr	r2, [r2, #16]
 811bdc4:	f06f 010d 	mvn.w	r1, #13
 811bdc8:	4610      	mov	r0, r2
 811bdca:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 811bdcc:	69b9      	ldr	r1, [r7, #24]
 811bdce:	486c      	ldr	r0, [pc, #432]	@ (811bf80 <tcp_input+0x744>)
 811bdd0:	f7ff fb34 	bl	811b43c <tcp_pcb_remove>
        tcp_free(pcb);
 811bdd4:	69b8      	ldr	r0, [r7, #24]
 811bdd6:	f7fd fd7f 	bl	81198d8 <tcp_free>
 811bdda:	e0da      	b.n	811bf92 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 811bddc:	2300      	movs	r3, #0
 811bdde:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 811bde0:	4b63      	ldr	r3, [pc, #396]	@ (811bf70 <tcp_input+0x734>)
 811bde2:	881b      	ldrh	r3, [r3, #0]
 811bde4:	2b00      	cmp	r3, #0
 811bde6:	d01d      	beq.n	811be24 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 811bde8:	4b61      	ldr	r3, [pc, #388]	@ (811bf70 <tcp_input+0x734>)
 811bdea:	881b      	ldrh	r3, [r3, #0]
 811bdec:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 811bdee:	69bb      	ldr	r3, [r7, #24]
 811bdf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 811bdf4:	2b00      	cmp	r3, #0
 811bdf6:	d00a      	beq.n	811be0e <tcp_input+0x5d2>
 811bdf8:	69bb      	ldr	r3, [r7, #24]
 811bdfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 811bdfe:	69ba      	ldr	r2, [r7, #24]
 811be00:	6910      	ldr	r0, [r2, #16]
 811be02:	89fa      	ldrh	r2, [r7, #14]
 811be04:	69b9      	ldr	r1, [r7, #24]
 811be06:	4798      	blx	r3
 811be08:	4603      	mov	r3, r0
 811be0a:	74fb      	strb	r3, [r7, #19]
 811be0c:	e001      	b.n	811be12 <tcp_input+0x5d6>
 811be0e:	2300      	movs	r3, #0
 811be10:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 811be12:	f997 3013 	ldrsb.w	r3, [r7, #19]
 811be16:	f113 0f0d 	cmn.w	r3, #13
 811be1a:	f000 8099 	beq.w	811bf50 <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 811be1e:	4b54      	ldr	r3, [pc, #336]	@ (811bf70 <tcp_input+0x734>)
 811be20:	2200      	movs	r2, #0
 811be22:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 811be24:	69b8      	ldr	r0, [r7, #24]
 811be26:	f000 f927 	bl	811c078 <tcp_input_delayed_close>
 811be2a:	4603      	mov	r3, r0
 811be2c:	2b00      	cmp	r3, #0
 811be2e:	f040 8091 	bne.w	811bf54 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 811be32:	4b4d      	ldr	r3, [pc, #308]	@ (811bf68 <tcp_input+0x72c>)
 811be34:	681b      	ldr	r3, [r3, #0]
 811be36:	2b00      	cmp	r3, #0
 811be38:	d041      	beq.n	811bebe <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 811be3a:	69bb      	ldr	r3, [r7, #24]
 811be3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811be3e:	2b00      	cmp	r3, #0
 811be40:	d006      	beq.n	811be50 <tcp_input+0x614>
 811be42:	4b50      	ldr	r3, [pc, #320]	@ (811bf84 <tcp_input+0x748>)
 811be44:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 811be48:	494f      	ldr	r1, [pc, #316]	@ (811bf88 <tcp_input+0x74c>)
 811be4a:	4850      	ldr	r0, [pc, #320]	@ (811bf8c <tcp_input+0x750>)
 811be4c:	f006 fa0a 	bl	8122264 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 811be50:	69bb      	ldr	r3, [r7, #24]
 811be52:	8b5b      	ldrh	r3, [r3, #26]
 811be54:	f003 0310 	and.w	r3, r3, #16
 811be58:	2b00      	cmp	r3, #0
 811be5a:	d008      	beq.n	811be6e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 811be5c:	4b42      	ldr	r3, [pc, #264]	@ (811bf68 <tcp_input+0x72c>)
 811be5e:	681b      	ldr	r3, [r3, #0]
 811be60:	4618      	mov	r0, r3
 811be62:	f7fd f98b 	bl	811917c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 811be66:	69b8      	ldr	r0, [r7, #24]
 811be68:	f7fe f82a 	bl	8119ec0 <tcp_abort>
            goto aborted;
 811be6c:	e091      	b.n	811bf92 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 811be6e:	69bb      	ldr	r3, [r7, #24]
 811be70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 811be74:	2b00      	cmp	r3, #0
 811be76:	d00c      	beq.n	811be92 <tcp_input+0x656>
 811be78:	69bb      	ldr	r3, [r7, #24]
 811be7a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 811be7e:	69bb      	ldr	r3, [r7, #24]
 811be80:	6918      	ldr	r0, [r3, #16]
 811be82:	4b39      	ldr	r3, [pc, #228]	@ (811bf68 <tcp_input+0x72c>)
 811be84:	681a      	ldr	r2, [r3, #0]
 811be86:	2300      	movs	r3, #0
 811be88:	69b9      	ldr	r1, [r7, #24]
 811be8a:	47a0      	blx	r4
 811be8c:	4603      	mov	r3, r0
 811be8e:	74fb      	strb	r3, [r7, #19]
 811be90:	e008      	b.n	811bea4 <tcp_input+0x668>
 811be92:	4b35      	ldr	r3, [pc, #212]	@ (811bf68 <tcp_input+0x72c>)
 811be94:	681a      	ldr	r2, [r3, #0]
 811be96:	2300      	movs	r3, #0
 811be98:	69b9      	ldr	r1, [r7, #24]
 811be9a:	2000      	movs	r0, #0
 811be9c:	f7fe fff0 	bl	811ae80 <tcp_recv_null>
 811bea0:	4603      	mov	r3, r0
 811bea2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 811bea4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 811bea8:	f113 0f0d 	cmn.w	r3, #13
 811beac:	d054      	beq.n	811bf58 <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 811beae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 811beb2:	2b00      	cmp	r3, #0
 811beb4:	d003      	beq.n	811bebe <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 811beb6:	4b2c      	ldr	r3, [pc, #176]	@ (811bf68 <tcp_input+0x72c>)
 811beb8:	681a      	ldr	r2, [r3, #0]
 811beba:	69bb      	ldr	r3, [r7, #24]
 811bebc:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 811bebe:	4b2b      	ldr	r3, [pc, #172]	@ (811bf6c <tcp_input+0x730>)
 811bec0:	781b      	ldrb	r3, [r3, #0]
 811bec2:	f003 0320 	and.w	r3, r3, #32
 811bec6:	2b00      	cmp	r3, #0
 811bec8:	d031      	beq.n	811bf2e <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 811beca:	69bb      	ldr	r3, [r7, #24]
 811becc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811bece:	2b00      	cmp	r3, #0
 811bed0:	d009      	beq.n	811bee6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 811bed2:	69bb      	ldr	r3, [r7, #24]
 811bed4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811bed6:	7b5a      	ldrb	r2, [r3, #13]
 811bed8:	69bb      	ldr	r3, [r7, #24]
 811beda:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811bedc:	f042 0220 	orr.w	r2, r2, #32
 811bee0:	b2d2      	uxtb	r2, r2
 811bee2:	735a      	strb	r2, [r3, #13]
 811bee4:	e023      	b.n	811bf2e <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 811bee6:	69bb      	ldr	r3, [r7, #24]
 811bee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811beea:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 811beee:	4293      	cmp	r3, r2
 811bef0:	d005      	beq.n	811befe <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 811bef2:	69bb      	ldr	r3, [r7, #24]
 811bef4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811bef6:	3301      	adds	r3, #1
 811bef8:	b29a      	uxth	r2, r3
 811befa:	69bb      	ldr	r3, [r7, #24]
 811befc:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 811befe:	69bb      	ldr	r3, [r7, #24]
 811bf00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 811bf04:	2b00      	cmp	r3, #0
 811bf06:	d00b      	beq.n	811bf20 <tcp_input+0x6e4>
 811bf08:	69bb      	ldr	r3, [r7, #24]
 811bf0a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 811bf0e:	69bb      	ldr	r3, [r7, #24]
 811bf10:	6918      	ldr	r0, [r3, #16]
 811bf12:	2300      	movs	r3, #0
 811bf14:	2200      	movs	r2, #0
 811bf16:	69b9      	ldr	r1, [r7, #24]
 811bf18:	47a0      	blx	r4
 811bf1a:	4603      	mov	r3, r0
 811bf1c:	74fb      	strb	r3, [r7, #19]
 811bf1e:	e001      	b.n	811bf24 <tcp_input+0x6e8>
 811bf20:	2300      	movs	r3, #0
 811bf22:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 811bf24:	f997 3013 	ldrsb.w	r3, [r7, #19]
 811bf28:	f113 0f0d 	cmn.w	r3, #13
 811bf2c:	d016      	beq.n	811bf5c <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 811bf2e:	4b13      	ldr	r3, [pc, #76]	@ (811bf7c <tcp_input+0x740>)
 811bf30:	2200      	movs	r2, #0
 811bf32:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 811bf34:	69b8      	ldr	r0, [r7, #24]
 811bf36:	f000 f89f 	bl	811c078 <tcp_input_delayed_close>
 811bf3a:	4603      	mov	r3, r0
 811bf3c:	2b00      	cmp	r3, #0
 811bf3e:	d127      	bne.n	811bf90 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 811bf40:	69b8      	ldr	r0, [r7, #24]
 811bf42:	f003 f82d 	bl	811efa0 <tcp_output>
 811bf46:	e024      	b.n	811bf92 <tcp_input+0x756>
        goto aborted;
 811bf48:	bf00      	nop
 811bf4a:	e022      	b.n	811bf92 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 811bf4c:	bf00      	nop
 811bf4e:	e020      	b.n	811bf92 <tcp_input+0x756>
              goto aborted;
 811bf50:	bf00      	nop
 811bf52:	e01e      	b.n	811bf92 <tcp_input+0x756>
          goto aborted;
 811bf54:	bf00      	nop
 811bf56:	e01c      	b.n	811bf92 <tcp_input+0x756>
            goto aborted;
 811bf58:	bf00      	nop
 811bf5a:	e01a      	b.n	811bf92 <tcp_input+0x756>
              goto aborted;
 811bf5c:	bf00      	nop
 811bf5e:	e018      	b.n	811bf92 <tcp_input+0x756>
 811bf60:	10011e70 	.word	0x10011e70
 811bf64:	10011e84 	.word	0x10011e84
 811bf68:	10011ea4 	.word	0x10011ea4
 811bf6c:	10011ea1 	.word	0x10011ea1
 811bf70:	10011e9c 	.word	0x10011e9c
 811bf74:	10011ea0 	.word	0x10011ea0
 811bf78:	10011e9e 	.word	0x10011e9e
 811bf7c:	10011ea8 	.word	0x10011ea8
 811bf80:	10011e64 	.word	0x10011e64
 811bf84:	08126dc8 	.word	0x08126dc8
 811bf88:	08126fbc 	.word	0x08126fbc
 811bf8c:	08126e54 	.word	0x08126e54
          goto aborted;
 811bf90:	bf00      	nop
    tcp_input_pcb = NULL;
 811bf92:	4b2d      	ldr	r3, [pc, #180]	@ (811c048 <tcp_input+0x80c>)
 811bf94:	2200      	movs	r2, #0
 811bf96:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 811bf98:	4b2c      	ldr	r3, [pc, #176]	@ (811c04c <tcp_input+0x810>)
 811bf9a:	2200      	movs	r2, #0
 811bf9c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 811bf9e:	4b2c      	ldr	r3, [pc, #176]	@ (811c050 <tcp_input+0x814>)
 811bfa0:	685b      	ldr	r3, [r3, #4]
 811bfa2:	2b00      	cmp	r3, #0
 811bfa4:	d031      	beq.n	811c00a <tcp_input+0x7ce>
      pbuf_free(inseg.p);
 811bfa6:	4b2a      	ldr	r3, [pc, #168]	@ (811c050 <tcp_input+0x814>)
 811bfa8:	685b      	ldr	r3, [r3, #4]
 811bfaa:	4618      	mov	r0, r3
 811bfac:	f7fd f8e6 	bl	811917c <pbuf_free>
      inseg.p = NULL;
 811bfb0:	4b27      	ldr	r3, [pc, #156]	@ (811c050 <tcp_input+0x814>)
 811bfb2:	2200      	movs	r2, #0
 811bfb4:	605a      	str	r2, [r3, #4]
 811bfb6:	e028      	b.n	811c00a <tcp_input+0x7ce>
    }
  } else {
    /* If no matching PCB was found, send a TCP RST (reset) to the
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 811bfb8:	4b26      	ldr	r3, [pc, #152]	@ (811c054 <tcp_input+0x818>)
 811bfba:	681b      	ldr	r3, [r3, #0]
 811bfbc:	899b      	ldrh	r3, [r3, #12]
 811bfbe:	b29b      	uxth	r3, r3
 811bfc0:	4618      	mov	r0, r3
 811bfc2:	f7f8 f93b 	bl	811423c <lwip_htons>
 811bfc6:	4603      	mov	r3, r0
 811bfc8:	b2db      	uxtb	r3, r3
 811bfca:	f003 0304 	and.w	r3, r3, #4
 811bfce:	2b00      	cmp	r3, #0
 811bfd0:	d118      	bne.n	811c004 <tcp_input+0x7c8>
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 811bfd2:	4b21      	ldr	r3, [pc, #132]	@ (811c058 <tcp_input+0x81c>)
 811bfd4:	6819      	ldr	r1, [r3, #0]
 811bfd6:	4b21      	ldr	r3, [pc, #132]	@ (811c05c <tcp_input+0x820>)
 811bfd8:	881b      	ldrh	r3, [r3, #0]
 811bfda:	461a      	mov	r2, r3
 811bfdc:	4b20      	ldr	r3, [pc, #128]	@ (811c060 <tcp_input+0x824>)
 811bfde:	681b      	ldr	r3, [r3, #0]
 811bfe0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811bfe2:	4b1c      	ldr	r3, [pc, #112]	@ (811c054 <tcp_input+0x818>)
 811bfe4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 811bfe6:	885b      	ldrh	r3, [r3, #2]
 811bfe8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811bfea:	4a1a      	ldr	r2, [pc, #104]	@ (811c054 <tcp_input+0x818>)
 811bfec:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 811bfee:	8812      	ldrh	r2, [r2, #0]
 811bff0:	b292      	uxth	r2, r2
 811bff2:	9202      	str	r2, [sp, #8]
 811bff4:	9301      	str	r3, [sp, #4]
 811bff6:	4b1b      	ldr	r3, [pc, #108]	@ (811c064 <tcp_input+0x828>)
 811bff8:	9300      	str	r3, [sp, #0]
 811bffa:	4b1b      	ldr	r3, [pc, #108]	@ (811c068 <tcp_input+0x82c>)
 811bffc:	4602      	mov	r2, r0
 811bffe:	2000      	movs	r0, #0
 811c000:	f003 fd8e 	bl	811fb20 <tcp_rst>
    }
    pbuf_free(p);
 811c004:	6878      	ldr	r0, [r7, #4]
 811c006:	f7fd f8b9 	bl	811917c <pbuf_free>
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
 811c00a:	f7ff fbbf 	bl	811b78c <tcp_pcbs_sane>
 811c00e:	4603      	mov	r3, r0
 811c010:	2b00      	cmp	r3, #0
 811c012:	d114      	bne.n	811c03e <tcp_input+0x802>
 811c014:	4b15      	ldr	r3, [pc, #84]	@ (811c06c <tcp_input+0x830>)
 811c016:	f240 2249 	movw	r2, #585	@ 0x249
 811c01a:	4915      	ldr	r1, [pc, #84]	@ (811c070 <tcp_input+0x834>)
 811c01c:	4815      	ldr	r0, [pc, #84]	@ (811c074 <tcp_input+0x838>)
 811c01e:	f006 f921 	bl	8122264 <iprintf>
  PERF_STOP("tcp_input");
  return;
 811c022:	e00c      	b.n	811c03e <tcp_input+0x802>
    goto dropped;
 811c024:	bf00      	nop
 811c026:	e006      	b.n	811c036 <tcp_input+0x7fa>
    goto dropped;
 811c028:	bf00      	nop
 811c02a:	e004      	b.n	811c036 <tcp_input+0x7fa>
    goto dropped;
 811c02c:	bf00      	nop
 811c02e:	e002      	b.n	811c036 <tcp_input+0x7fa>
      goto dropped;
 811c030:	bf00      	nop
 811c032:	e000      	b.n	811c036 <tcp_input+0x7fa>
      goto dropped;
 811c034:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 811c036:	6878      	ldr	r0, [r7, #4]
 811c038:	f7fd f8a0 	bl	811917c <pbuf_free>
 811c03c:	e000      	b.n	811c040 <tcp_input+0x804>
  return;
 811c03e:	bf00      	nop
}
 811c040:	3724      	adds	r7, #36	@ 0x24
 811c042:	46bd      	mov	sp, r7
 811c044:	bd90      	pop	{r4, r7, pc}
 811c046:	bf00      	nop
 811c048:	10011ea8 	.word	0x10011ea8
 811c04c:	10011ea4 	.word	0x10011ea4
 811c050:	10011e70 	.word	0x10011e70
 811c054:	10011e84 	.word	0x10011e84
 811c058:	10011e98 	.word	0x10011e98
 811c05c:	10011e9e 	.word	0x10011e9e
 811c060:	10011e94 	.word	0x10011e94
 811c064:	1000b2c4 	.word	0x1000b2c4
 811c068:	1000b2c8 	.word	0x1000b2c8
 811c06c:	08126dc8 	.word	0x08126dc8
 811c070:	08126fd8 	.word	0x08126fd8
 811c074:	08126e54 	.word	0x08126e54

0811c078 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 811c078:	b580      	push	{r7, lr}
 811c07a:	b082      	sub	sp, #8
 811c07c:	af00      	add	r7, sp, #0
 811c07e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 811c080:	687b      	ldr	r3, [r7, #4]
 811c082:	2b00      	cmp	r3, #0
 811c084:	d106      	bne.n	811c094 <tcp_input_delayed_close+0x1c>
 811c086:	4b17      	ldr	r3, [pc, #92]	@ (811c0e4 <tcp_input_delayed_close+0x6c>)
 811c088:	f240 225a 	movw	r2, #602	@ 0x25a
 811c08c:	4916      	ldr	r1, [pc, #88]	@ (811c0e8 <tcp_input_delayed_close+0x70>)
 811c08e:	4817      	ldr	r0, [pc, #92]	@ (811c0ec <tcp_input_delayed_close+0x74>)
 811c090:	f006 f8e8 	bl	8122264 <iprintf>

  if (recv_flags & TF_CLOSED) {
 811c094:	4b16      	ldr	r3, [pc, #88]	@ (811c0f0 <tcp_input_delayed_close+0x78>)
 811c096:	781b      	ldrb	r3, [r3, #0]
 811c098:	f003 0310 	and.w	r3, r3, #16
 811c09c:	2b00      	cmp	r3, #0
 811c09e:	d01c      	beq.n	811c0da <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 811c0a0:	687b      	ldr	r3, [r7, #4]
 811c0a2:	8b5b      	ldrh	r3, [r3, #26]
 811c0a4:	f003 0310 	and.w	r3, r3, #16
 811c0a8:	2b00      	cmp	r3, #0
 811c0aa:	d10d      	bne.n	811c0c8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 811c0ac:	687b      	ldr	r3, [r7, #4]
 811c0ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 811c0b2:	2b00      	cmp	r3, #0
 811c0b4:	d008      	beq.n	811c0c8 <tcp_input_delayed_close+0x50>
 811c0b6:	687b      	ldr	r3, [r7, #4]
 811c0b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 811c0bc:	687a      	ldr	r2, [r7, #4]
 811c0be:	6912      	ldr	r2, [r2, #16]
 811c0c0:	f06f 010e 	mvn.w	r1, #14
 811c0c4:	4610      	mov	r0, r2
 811c0c6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 811c0c8:	6879      	ldr	r1, [r7, #4]
 811c0ca:	480a      	ldr	r0, [pc, #40]	@ (811c0f4 <tcp_input_delayed_close+0x7c>)
 811c0cc:	f7ff f9b6 	bl	811b43c <tcp_pcb_remove>
    tcp_free(pcb);
 811c0d0:	6878      	ldr	r0, [r7, #4]
 811c0d2:	f7fd fc01 	bl	81198d8 <tcp_free>
    return 1;
 811c0d6:	2301      	movs	r3, #1
 811c0d8:	e000      	b.n	811c0dc <tcp_input_delayed_close+0x64>
  }
  return 0;
 811c0da:	2300      	movs	r3, #0
}
 811c0dc:	4618      	mov	r0, r3
 811c0de:	3708      	adds	r7, #8
 811c0e0:	46bd      	mov	sp, r7
 811c0e2:	bd80      	pop	{r7, pc}
 811c0e4:	08126dc8 	.word	0x08126dc8
 811c0e8:	08126ff4 	.word	0x08126ff4
 811c0ec:	08126e54 	.word	0x08126e54
 811c0f0:	10011ea1 	.word	0x10011ea1
 811c0f4:	10011e64 	.word	0x10011e64

0811c0f8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 811c0f8:	b590      	push	{r4, r7, lr}
 811c0fa:	b08b      	sub	sp, #44	@ 0x2c
 811c0fc:	af04      	add	r7, sp, #16
 811c0fe:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 811c100:	4b7a      	ldr	r3, [pc, #488]	@ (811c2ec <tcp_listen_input+0x1f4>)
 811c102:	781b      	ldrb	r3, [r3, #0]
 811c104:	f003 0304 	and.w	r3, r3, #4
 811c108:	2b00      	cmp	r3, #0
 811c10a:	f040 80e8 	bne.w	811c2de <tcp_listen_input+0x1e6>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 811c10e:	687b      	ldr	r3, [r7, #4]
 811c110:	2b00      	cmp	r3, #0
 811c112:	d106      	bne.n	811c122 <tcp_listen_input+0x2a>
 811c114:	4b76      	ldr	r3, [pc, #472]	@ (811c2f0 <tcp_listen_input+0x1f8>)
 811c116:	f240 2281 	movw	r2, #641	@ 0x281
 811c11a:	4976      	ldr	r1, [pc, #472]	@ (811c2f4 <tcp_listen_input+0x1fc>)
 811c11c:	4876      	ldr	r0, [pc, #472]	@ (811c2f8 <tcp_listen_input+0x200>)
 811c11e:	f006 f8a1 	bl	8122264 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 811c122:	4b72      	ldr	r3, [pc, #456]	@ (811c2ec <tcp_listen_input+0x1f4>)
 811c124:	781b      	ldrb	r3, [r3, #0]
 811c126:	f003 0310 	and.w	r3, r3, #16
 811c12a:	2b00      	cmp	r3, #0
 811c12c:	d019      	beq.n	811c162 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811c12e:	4b73      	ldr	r3, [pc, #460]	@ (811c2fc <tcp_listen_input+0x204>)
 811c130:	6819      	ldr	r1, [r3, #0]
 811c132:	4b73      	ldr	r3, [pc, #460]	@ (811c300 <tcp_listen_input+0x208>)
 811c134:	881b      	ldrh	r3, [r3, #0]
 811c136:	461a      	mov	r2, r3
 811c138:	4b72      	ldr	r3, [pc, #456]	@ (811c304 <tcp_listen_input+0x20c>)
 811c13a:	681b      	ldr	r3, [r3, #0]
 811c13c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811c13e:	4b72      	ldr	r3, [pc, #456]	@ (811c308 <tcp_listen_input+0x210>)
 811c140:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811c142:	885b      	ldrh	r3, [r3, #2]
 811c144:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811c146:	4a70      	ldr	r2, [pc, #448]	@ (811c308 <tcp_listen_input+0x210>)
 811c148:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811c14a:	8812      	ldrh	r2, [r2, #0]
 811c14c:	b292      	uxth	r2, r2
 811c14e:	9202      	str	r2, [sp, #8]
 811c150:	9301      	str	r3, [sp, #4]
 811c152:	4b6e      	ldr	r3, [pc, #440]	@ (811c30c <tcp_listen_input+0x214>)
 811c154:	9300      	str	r3, [sp, #0]
 811c156:	4b6e      	ldr	r3, [pc, #440]	@ (811c310 <tcp_listen_input+0x218>)
 811c158:	4602      	mov	r2, r0
 811c15a:	6878      	ldr	r0, [r7, #4]
 811c15c:	f003 fce0 	bl	811fb20 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 811c160:	e0bf      	b.n	811c2e2 <tcp_listen_input+0x1ea>
  } else if (flags & TCP_SYN) {
 811c162:	4b62      	ldr	r3, [pc, #392]	@ (811c2ec <tcp_listen_input+0x1f4>)
 811c164:	781b      	ldrb	r3, [r3, #0]
 811c166:	f003 0302 	and.w	r3, r3, #2
 811c16a:	2b00      	cmp	r3, #0
 811c16c:	f000 80b9 	beq.w	811c2e2 <tcp_listen_input+0x1ea>
    LWIP_DEBUGF(TCP_DEBUG, ("TCP connection request %"U16_F" -> %"U16_F".\n", tcphdr->src, tcphdr->dest));
 811c170:	4b65      	ldr	r3, [pc, #404]	@ (811c308 <tcp_listen_input+0x210>)
 811c172:	681b      	ldr	r3, [r3, #0]
 811c174:	881b      	ldrh	r3, [r3, #0]
 811c176:	b29b      	uxth	r3, r3
 811c178:	4619      	mov	r1, r3
 811c17a:	4b63      	ldr	r3, [pc, #396]	@ (811c308 <tcp_listen_input+0x210>)
 811c17c:	681b      	ldr	r3, [r3, #0]
 811c17e:	885b      	ldrh	r3, [r3, #2]
 811c180:	b29b      	uxth	r3, r3
 811c182:	461a      	mov	r2, r3
 811c184:	4863      	ldr	r0, [pc, #396]	@ (811c314 <tcp_listen_input+0x21c>)
 811c186:	f006 f86d 	bl	8122264 <iprintf>
 811c18a:	200d      	movs	r0, #13
 811c18c:	f006 f87c 	bl	8122288 <putchar>
    npcb = tcp_alloc(pcb->prio);
 811c190:	687b      	ldr	r3, [r7, #4]
 811c192:	7d5b      	ldrb	r3, [r3, #21]
 811c194:	4618      	mov	r0, r3
 811c196:	f7fe ffc3 	bl	811b120 <tcp_alloc>
 811c19a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 811c19c:	697b      	ldr	r3, [r7, #20]
 811c19e:	2b00      	cmp	r3, #0
 811c1a0:	d117      	bne.n	811c1d2 <tcp_listen_input+0xda>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: could not allocate PCB\n"));
 811c1a2:	485d      	ldr	r0, [pc, #372]	@ (811c318 <tcp_listen_input+0x220>)
 811c1a4:	f006 f8ce 	bl	8122344 <puts>
 811c1a8:	200d      	movs	r0, #13
 811c1aa:	f006 f86d 	bl	8122288 <putchar>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 811c1ae:	687b      	ldr	r3, [r7, #4]
 811c1b0:	699b      	ldr	r3, [r3, #24]
 811c1b2:	2b00      	cmp	r3, #0
 811c1b4:	d00a      	beq.n	811c1cc <tcp_listen_input+0xd4>
 811c1b6:	687b      	ldr	r3, [r7, #4]
 811c1b8:	699b      	ldr	r3, [r3, #24]
 811c1ba:	687a      	ldr	r2, [r7, #4]
 811c1bc:	6910      	ldr	r0, [r2, #16]
 811c1be:	f04f 32ff 	mov.w	r2, #4294967295
 811c1c2:	2100      	movs	r1, #0
 811c1c4:	4798      	blx	r3
 811c1c6:	4603      	mov	r3, r0
 811c1c8:	73bb      	strb	r3, [r7, #14]
      return;
 811c1ca:	e08b      	b.n	811c2e4 <tcp_listen_input+0x1ec>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 811c1cc:	23f0      	movs	r3, #240	@ 0xf0
 811c1ce:	73bb      	strb	r3, [r7, #14]
      return;
 811c1d0:	e088      	b.n	811c2e4 <tcp_listen_input+0x1ec>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 811c1d2:	4b52      	ldr	r3, [pc, #328]	@ (811c31c <tcp_listen_input+0x224>)
 811c1d4:	695a      	ldr	r2, [r3, #20]
 811c1d6:	697b      	ldr	r3, [r7, #20]
 811c1d8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 811c1da:	4b50      	ldr	r3, [pc, #320]	@ (811c31c <tcp_listen_input+0x224>)
 811c1dc:	691a      	ldr	r2, [r3, #16]
 811c1de:	697b      	ldr	r3, [r7, #20]
 811c1e0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 811c1e2:	687b      	ldr	r3, [r7, #4]
 811c1e4:	8ada      	ldrh	r2, [r3, #22]
 811c1e6:	697b      	ldr	r3, [r7, #20]
 811c1e8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 811c1ea:	4b47      	ldr	r3, [pc, #284]	@ (811c308 <tcp_listen_input+0x210>)
 811c1ec:	681b      	ldr	r3, [r3, #0]
 811c1ee:	881b      	ldrh	r3, [r3, #0]
 811c1f0:	b29a      	uxth	r2, r3
 811c1f2:	697b      	ldr	r3, [r7, #20]
 811c1f4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 811c1f6:	697b      	ldr	r3, [r7, #20]
 811c1f8:	2203      	movs	r2, #3
 811c1fa:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 811c1fc:	4b41      	ldr	r3, [pc, #260]	@ (811c304 <tcp_listen_input+0x20c>)
 811c1fe:	681b      	ldr	r3, [r3, #0]
 811c200:	1c5a      	adds	r2, r3, #1
 811c202:	697b      	ldr	r3, [r7, #20]
 811c204:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 811c206:	697b      	ldr	r3, [r7, #20]
 811c208:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811c20a:	697b      	ldr	r3, [r7, #20]
 811c20c:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 811c20e:	6978      	ldr	r0, [r7, #20]
 811c210:	f7ff f9b6 	bl	811b580 <tcp_next_iss>
 811c214:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 811c216:	697b      	ldr	r3, [r7, #20]
 811c218:	693a      	ldr	r2, [r7, #16]
 811c21a:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 811c21c:	697b      	ldr	r3, [r7, #20]
 811c21e:	693a      	ldr	r2, [r7, #16]
 811c220:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 811c222:	697b      	ldr	r3, [r7, #20]
 811c224:	693a      	ldr	r2, [r7, #16]
 811c226:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 811c228:	697b      	ldr	r3, [r7, #20]
 811c22a:	693a      	ldr	r2, [r7, #16]
 811c22c:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 811c22e:	4b35      	ldr	r3, [pc, #212]	@ (811c304 <tcp_listen_input+0x20c>)
 811c230:	681b      	ldr	r3, [r3, #0]
 811c232:	1e5a      	subs	r2, r3, #1
 811c234:	697b      	ldr	r3, [r7, #20]
 811c236:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 811c238:	687b      	ldr	r3, [r7, #4]
 811c23a:	691a      	ldr	r2, [r3, #16]
 811c23c:	697b      	ldr	r3, [r7, #20]
 811c23e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 811c240:	697b      	ldr	r3, [r7, #20]
 811c242:	687a      	ldr	r2, [r7, #4]
 811c244:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 811c246:	687b      	ldr	r3, [r7, #4]
 811c248:	7a5b      	ldrb	r3, [r3, #9]
 811c24a:	f003 030c 	and.w	r3, r3, #12
 811c24e:	b2da      	uxtb	r2, r3
 811c250:	697b      	ldr	r3, [r7, #20]
 811c252:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 811c254:	687b      	ldr	r3, [r7, #4]
 811c256:	7a1a      	ldrb	r2, [r3, #8]
 811c258:	697b      	ldr	r3, [r7, #20]
 811c25a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 811c25c:	4b30      	ldr	r3, [pc, #192]	@ (811c320 <tcp_listen_input+0x228>)
 811c25e:	681a      	ldr	r2, [r3, #0]
 811c260:	697b      	ldr	r3, [r7, #20]
 811c262:	60da      	str	r2, [r3, #12]
 811c264:	4a2e      	ldr	r2, [pc, #184]	@ (811c320 <tcp_listen_input+0x228>)
 811c266:	697b      	ldr	r3, [r7, #20]
 811c268:	6013      	str	r3, [r2, #0]
 811c26a:	f004 f827 	bl	81202bc <tcp_timer_needed>
 811c26e:	4b2d      	ldr	r3, [pc, #180]	@ (811c324 <tcp_listen_input+0x22c>)
 811c270:	2201      	movs	r2, #1
 811c272:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 811c274:	6978      	ldr	r0, [r7, #20]
 811c276:	f001 fe13 	bl	811dea0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 811c27a:	4b23      	ldr	r3, [pc, #140]	@ (811c308 <tcp_listen_input+0x210>)
 811c27c:	681b      	ldr	r3, [r3, #0]
 811c27e:	89db      	ldrh	r3, [r3, #14]
 811c280:	b29a      	uxth	r2, r3
 811c282:	697b      	ldr	r3, [r7, #20]
 811c284:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 811c288:	697b      	ldr	r3, [r7, #20]
 811c28a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 811c28e:	697b      	ldr	r3, [r7, #20]
 811c290:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 811c294:	697b      	ldr	r3, [r7, #20]
 811c296:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 811c298:	697b      	ldr	r3, [r7, #20]
 811c29a:	3304      	adds	r3, #4
 811c29c:	4618      	mov	r0, r3
 811c29e:	f7f9 fdd5 	bl	8115e4c <ip4_route>
 811c2a2:	4601      	mov	r1, r0
 811c2a4:	697b      	ldr	r3, [r7, #20]
 811c2a6:	3304      	adds	r3, #4
 811c2a8:	461a      	mov	r2, r3
 811c2aa:	4620      	mov	r0, r4
 811c2ac:	f7ff f98e 	bl	811b5cc <tcp_eff_send_mss_netif>
 811c2b0:	4603      	mov	r3, r0
 811c2b2:	461a      	mov	r2, r3
 811c2b4:	697b      	ldr	r3, [r7, #20]
 811c2b6:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 811c2b8:	2112      	movs	r1, #18
 811c2ba:	6978      	ldr	r0, [r7, #20]
 811c2bc:	f002 fd82 	bl	811edc4 <tcp_enqueue_flags>
 811c2c0:	4603      	mov	r3, r0
 811c2c2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 811c2c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811c2c8:	2b00      	cmp	r3, #0
 811c2ca:	d004      	beq.n	811c2d6 <tcp_listen_input+0x1de>
      tcp_abandon(npcb, 0);
 811c2cc:	2100      	movs	r1, #0
 811c2ce:	6978      	ldr	r0, [r7, #20]
 811c2d0:	f7fd fd38 	bl	8119d44 <tcp_abandon>
      return;
 811c2d4:	e006      	b.n	811c2e4 <tcp_listen_input+0x1ec>
    tcp_output(npcb);
 811c2d6:	6978      	ldr	r0, [r7, #20]
 811c2d8:	f002 fe62 	bl	811efa0 <tcp_output>
  return;
 811c2dc:	e001      	b.n	811c2e2 <tcp_listen_input+0x1ea>
    return;
 811c2de:	bf00      	nop
 811c2e0:	e000      	b.n	811c2e4 <tcp_listen_input+0x1ec>
  return;
 811c2e2:	bf00      	nop
}
 811c2e4:	371c      	adds	r7, #28
 811c2e6:	46bd      	mov	sp, r7
 811c2e8:	bd90      	pop	{r4, r7, pc}
 811c2ea:	bf00      	nop
 811c2ec:	10011ea0 	.word	0x10011ea0
 811c2f0:	08126dc8 	.word	0x08126dc8
 811c2f4:	0812701c 	.word	0x0812701c
 811c2f8:	08126e54 	.word	0x08126e54
 811c2fc:	10011e98 	.word	0x10011e98
 811c300:	10011e9e 	.word	0x10011e9e
 811c304:	10011e94 	.word	0x10011e94
 811c308:	10011e84 	.word	0x10011e84
 811c30c:	1000b2c4 	.word	0x1000b2c4
 811c310:	1000b2c8 	.word	0x1000b2c8
 811c314:	0812703c 	.word	0x0812703c
 811c318:	08127060 	.word	0x08127060
 811c31c:	1000b2b4 	.word	0x1000b2b4
 811c320:	10011e64 	.word	0x10011e64
 811c324:	10011e6c 	.word	0x10011e6c

0811c328 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 811c328:	b580      	push	{r7, lr}
 811c32a:	b086      	sub	sp, #24
 811c32c:	af04      	add	r7, sp, #16
 811c32e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 811c330:	4b2f      	ldr	r3, [pc, #188]	@ (811c3f0 <tcp_timewait_input+0xc8>)
 811c332:	781b      	ldrb	r3, [r3, #0]
 811c334:	f003 0304 	and.w	r3, r3, #4
 811c338:	2b00      	cmp	r3, #0
 811c33a:	d153      	bne.n	811c3e4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 811c33c:	687b      	ldr	r3, [r7, #4]
 811c33e:	2b00      	cmp	r3, #0
 811c340:	d106      	bne.n	811c350 <tcp_timewait_input+0x28>
 811c342:	4b2c      	ldr	r3, [pc, #176]	@ (811c3f4 <tcp_timewait_input+0xcc>)
 811c344:	f240 22ee 	movw	r2, #750	@ 0x2ee
 811c348:	492b      	ldr	r1, [pc, #172]	@ (811c3f8 <tcp_timewait_input+0xd0>)
 811c34a:	482c      	ldr	r0, [pc, #176]	@ (811c3fc <tcp_timewait_input+0xd4>)
 811c34c:	f005 ff8a 	bl	8122264 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 811c350:	4b27      	ldr	r3, [pc, #156]	@ (811c3f0 <tcp_timewait_input+0xc8>)
 811c352:	781b      	ldrb	r3, [r3, #0]
 811c354:	f003 0302 	and.w	r3, r3, #2
 811c358:	2b00      	cmp	r3, #0
 811c35a:	d02a      	beq.n	811c3b2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 811c35c:	4b28      	ldr	r3, [pc, #160]	@ (811c400 <tcp_timewait_input+0xd8>)
 811c35e:	681a      	ldr	r2, [r3, #0]
 811c360:	687b      	ldr	r3, [r7, #4]
 811c362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811c364:	1ad3      	subs	r3, r2, r3
 811c366:	2b00      	cmp	r3, #0
 811c368:	db2d      	blt.n	811c3c6 <tcp_timewait_input+0x9e>
 811c36a:	4b25      	ldr	r3, [pc, #148]	@ (811c400 <tcp_timewait_input+0xd8>)
 811c36c:	681a      	ldr	r2, [r3, #0]
 811c36e:	687b      	ldr	r3, [r7, #4]
 811c370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811c372:	6879      	ldr	r1, [r7, #4]
 811c374:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 811c376:	440b      	add	r3, r1
 811c378:	1ad3      	subs	r3, r2, r3
 811c37a:	2b00      	cmp	r3, #0
 811c37c:	dc23      	bgt.n	811c3c6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811c37e:	4b21      	ldr	r3, [pc, #132]	@ (811c404 <tcp_timewait_input+0xdc>)
 811c380:	6819      	ldr	r1, [r3, #0]
 811c382:	4b21      	ldr	r3, [pc, #132]	@ (811c408 <tcp_timewait_input+0xe0>)
 811c384:	881b      	ldrh	r3, [r3, #0]
 811c386:	461a      	mov	r2, r3
 811c388:	4b1d      	ldr	r3, [pc, #116]	@ (811c400 <tcp_timewait_input+0xd8>)
 811c38a:	681b      	ldr	r3, [r3, #0]
 811c38c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811c38e:	4b1f      	ldr	r3, [pc, #124]	@ (811c40c <tcp_timewait_input+0xe4>)
 811c390:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811c392:	885b      	ldrh	r3, [r3, #2]
 811c394:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811c396:	4a1d      	ldr	r2, [pc, #116]	@ (811c40c <tcp_timewait_input+0xe4>)
 811c398:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811c39a:	8812      	ldrh	r2, [r2, #0]
 811c39c:	b292      	uxth	r2, r2
 811c39e:	9202      	str	r2, [sp, #8]
 811c3a0:	9301      	str	r3, [sp, #4]
 811c3a2:	4b1b      	ldr	r3, [pc, #108]	@ (811c410 <tcp_timewait_input+0xe8>)
 811c3a4:	9300      	str	r3, [sp, #0]
 811c3a6:	4b1b      	ldr	r3, [pc, #108]	@ (811c414 <tcp_timewait_input+0xec>)
 811c3a8:	4602      	mov	r2, r0
 811c3aa:	6878      	ldr	r0, [r7, #4]
 811c3ac:	f003 fbb8 	bl	811fb20 <tcp_rst>
      return;
 811c3b0:	e01b      	b.n	811c3ea <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 811c3b2:	4b0f      	ldr	r3, [pc, #60]	@ (811c3f0 <tcp_timewait_input+0xc8>)
 811c3b4:	781b      	ldrb	r3, [r3, #0]
 811c3b6:	f003 0301 	and.w	r3, r3, #1
 811c3ba:	2b00      	cmp	r3, #0
 811c3bc:	d003      	beq.n	811c3c6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 811c3be:	4b16      	ldr	r3, [pc, #88]	@ (811c418 <tcp_timewait_input+0xf0>)
 811c3c0:	681a      	ldr	r2, [r3, #0]
 811c3c2:	687b      	ldr	r3, [r7, #4]
 811c3c4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 811c3c6:	4b10      	ldr	r3, [pc, #64]	@ (811c408 <tcp_timewait_input+0xe0>)
 811c3c8:	881b      	ldrh	r3, [r3, #0]
 811c3ca:	2b00      	cmp	r3, #0
 811c3cc:	d00c      	beq.n	811c3e8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 811c3ce:	687b      	ldr	r3, [r7, #4]
 811c3d0:	8b5b      	ldrh	r3, [r3, #26]
 811c3d2:	f043 0302 	orr.w	r3, r3, #2
 811c3d6:	b29a      	uxth	r2, r3
 811c3d8:	687b      	ldr	r3, [r7, #4]
 811c3da:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 811c3dc:	6878      	ldr	r0, [r7, #4]
 811c3de:	f002 fddf 	bl	811efa0 <tcp_output>
  }
  return;
 811c3e2:	e001      	b.n	811c3e8 <tcp_timewait_input+0xc0>
    return;
 811c3e4:	bf00      	nop
 811c3e6:	e000      	b.n	811c3ea <tcp_timewait_input+0xc2>
  return;
 811c3e8:	bf00      	nop
}
 811c3ea:	3708      	adds	r7, #8
 811c3ec:	46bd      	mov	sp, r7
 811c3ee:	bd80      	pop	{r7, pc}
 811c3f0:	10011ea0 	.word	0x10011ea0
 811c3f4:	08126dc8 	.word	0x08126dc8
 811c3f8:	0812708c 	.word	0x0812708c
 811c3fc:	08126e54 	.word	0x08126e54
 811c400:	10011e94 	.word	0x10011e94
 811c404:	10011e98 	.word	0x10011e98
 811c408:	10011e9e 	.word	0x10011e9e
 811c40c:	10011e84 	.word	0x10011e84
 811c410:	1000b2c4 	.word	0x1000b2c4
 811c414:	1000b2c8 	.word	0x1000b2c8
 811c418:	10011e58 	.word	0x10011e58

0811c41c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 811c41c:	b590      	push	{r4, r7, lr}
 811c41e:	b08d      	sub	sp, #52	@ 0x34
 811c420:	af04      	add	r7, sp, #16
 811c422:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 811c424:	2300      	movs	r3, #0
 811c426:	73fb      	strb	r3, [r7, #15]
  err_t err;

  err = ERR_OK;
 811c428:	2300      	movs	r3, #0
 811c42a:	73bb      	strb	r3, [r7, #14]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 811c42c:	687b      	ldr	r3, [r7, #4]
 811c42e:	2b00      	cmp	r3, #0
 811c430:	d106      	bne.n	811c440 <tcp_process+0x24>
 811c432:	4b8a      	ldr	r3, [pc, #552]	@ (811c65c <tcp_process+0x240>)
 811c434:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 811c438:	4989      	ldr	r1, [pc, #548]	@ (811c660 <tcp_process+0x244>)
 811c43a:	488a      	ldr	r0, [pc, #552]	@ (811c664 <tcp_process+0x248>)
 811c43c:	f005 ff12 	bl	8122264 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 811c440:	4b89      	ldr	r3, [pc, #548]	@ (811c668 <tcp_process+0x24c>)
 811c442:	781b      	ldrb	r3, [r3, #0]
 811c444:	f003 0304 	and.w	r3, r3, #4
 811c448:	2b00      	cmp	r3, #0
 811c44a:	d059      	beq.n	811c500 <tcp_process+0xe4>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 811c44c:	687b      	ldr	r3, [r7, #4]
 811c44e:	7d1b      	ldrb	r3, [r3, #20]
 811c450:	2b02      	cmp	r3, #2
 811c452:	d108      	bne.n	811c466 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 811c454:	687b      	ldr	r3, [r7, #4]
 811c456:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 811c458:	4b84      	ldr	r3, [pc, #528]	@ (811c66c <tcp_process+0x250>)
 811c45a:	681b      	ldr	r3, [r3, #0]
 811c45c:	429a      	cmp	r2, r3
 811c45e:	d123      	bne.n	811c4a8 <tcp_process+0x8c>
        acceptable = 1;
 811c460:	2301      	movs	r3, #1
 811c462:	73fb      	strb	r3, [r7, #15]
 811c464:	e020      	b.n	811c4a8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 811c466:	687b      	ldr	r3, [r7, #4]
 811c468:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811c46a:	4b81      	ldr	r3, [pc, #516]	@ (811c670 <tcp_process+0x254>)
 811c46c:	681b      	ldr	r3, [r3, #0]
 811c46e:	429a      	cmp	r2, r3
 811c470:	d102      	bne.n	811c478 <tcp_process+0x5c>
        acceptable = 1;
 811c472:	2301      	movs	r3, #1
 811c474:	73fb      	strb	r3, [r7, #15]
 811c476:	e017      	b.n	811c4a8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 811c478:	4b7d      	ldr	r3, [pc, #500]	@ (811c670 <tcp_process+0x254>)
 811c47a:	681a      	ldr	r2, [r3, #0]
 811c47c:	687b      	ldr	r3, [r7, #4]
 811c47e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811c480:	1ad3      	subs	r3, r2, r3
 811c482:	2b00      	cmp	r3, #0
 811c484:	db10      	blt.n	811c4a8 <tcp_process+0x8c>
 811c486:	4b7a      	ldr	r3, [pc, #488]	@ (811c670 <tcp_process+0x254>)
 811c488:	681a      	ldr	r2, [r3, #0]
 811c48a:	687b      	ldr	r3, [r7, #4]
 811c48c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811c48e:	6879      	ldr	r1, [r7, #4]
 811c490:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 811c492:	440b      	add	r3, r1
 811c494:	1ad3      	subs	r3, r2, r3
 811c496:	2b00      	cmp	r3, #0
 811c498:	dc06      	bgt.n	811c4a8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 811c49a:	687b      	ldr	r3, [r7, #4]
 811c49c:	8b5b      	ldrh	r3, [r3, #26]
 811c49e:	f043 0302 	orr.w	r3, r3, #2
 811c4a2:	b29a      	uxth	r2, r3
 811c4a4:	687b      	ldr	r3, [r7, #4]
 811c4a6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 811c4a8:	7bfb      	ldrb	r3, [r7, #15]
 811c4aa:	2b00      	cmp	r3, #0
 811c4ac:	d01b      	beq.n	811c4e6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 811c4ae:	687b      	ldr	r3, [r7, #4]
 811c4b0:	7d1b      	ldrb	r3, [r3, #20]
 811c4b2:	2b00      	cmp	r3, #0
 811c4b4:	d106      	bne.n	811c4c4 <tcp_process+0xa8>
 811c4b6:	4b69      	ldr	r3, [pc, #420]	@ (811c65c <tcp_process+0x240>)
 811c4b8:	f44f 724e 	mov.w	r2, #824	@ 0x338
 811c4bc:	496d      	ldr	r1, [pc, #436]	@ (811c674 <tcp_process+0x258>)
 811c4be:	4869      	ldr	r0, [pc, #420]	@ (811c664 <tcp_process+0x248>)
 811c4c0:	f005 fed0 	bl	8122264 <iprintf>
      recv_flags |= TF_RESET;
 811c4c4:	4b6c      	ldr	r3, [pc, #432]	@ (811c678 <tcp_process+0x25c>)
 811c4c6:	781b      	ldrb	r3, [r3, #0]
 811c4c8:	f043 0308 	orr.w	r3, r3, #8
 811c4cc:	b2da      	uxtb	r2, r3
 811c4ce:	4b6a      	ldr	r3, [pc, #424]	@ (811c678 <tcp_process+0x25c>)
 811c4d0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 811c4d2:	687b      	ldr	r3, [r7, #4]
 811c4d4:	8b5b      	ldrh	r3, [r3, #26]
 811c4d6:	f023 0301 	bic.w	r3, r3, #1
 811c4da:	b29a      	uxth	r2, r3
 811c4dc:	687b      	ldr	r3, [r7, #4]
 811c4de:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 811c4e0:	f06f 030d 	mvn.w	r3, #13
 811c4e4:	e3f8      	b.n	811ccd8 <tcp_process+0x8bc>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
 811c4e6:	4b62      	ldr	r3, [pc, #392]	@ (811c670 <tcp_process+0x254>)
 811c4e8:	6819      	ldr	r1, [r3, #0]
 811c4ea:	687b      	ldr	r3, [r7, #4]
 811c4ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811c4ee:	461a      	mov	r2, r3
 811c4f0:	4862      	ldr	r0, [pc, #392]	@ (811c67c <tcp_process+0x260>)
 811c4f2:	f005 feb7 	bl	8122264 <iprintf>
 811c4f6:	200d      	movs	r0, #13
 811c4f8:	f005 fec6 	bl	8122288 <putchar>
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 811c4fc:	2300      	movs	r3, #0
 811c4fe:	e3eb      	b.n	811ccd8 <tcp_process+0x8bc>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 811c500:	4b59      	ldr	r3, [pc, #356]	@ (811c668 <tcp_process+0x24c>)
 811c502:	781b      	ldrb	r3, [r3, #0]
 811c504:	f003 0302 	and.w	r3, r3, #2
 811c508:	2b00      	cmp	r3, #0
 811c50a:	d010      	beq.n	811c52e <tcp_process+0x112>
 811c50c:	687b      	ldr	r3, [r7, #4]
 811c50e:	7d1b      	ldrb	r3, [r3, #20]
 811c510:	2b02      	cmp	r3, #2
 811c512:	d00c      	beq.n	811c52e <tcp_process+0x112>
 811c514:	687b      	ldr	r3, [r7, #4]
 811c516:	7d1b      	ldrb	r3, [r3, #20]
 811c518:	2b03      	cmp	r3, #3
 811c51a:	d008      	beq.n	811c52e <tcp_process+0x112>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 811c51c:	687b      	ldr	r3, [r7, #4]
 811c51e:	8b5b      	ldrh	r3, [r3, #26]
 811c520:	f043 0302 	orr.w	r3, r3, #2
 811c524:	b29a      	uxth	r2, r3
 811c526:	687b      	ldr	r3, [r7, #4]
 811c528:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 811c52a:	2300      	movs	r3, #0
 811c52c:	e3d4      	b.n	811ccd8 <tcp_process+0x8bc>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 811c52e:	687b      	ldr	r3, [r7, #4]
 811c530:	8b5b      	ldrh	r3, [r3, #26]
 811c532:	f003 0310 	and.w	r3, r3, #16
 811c536:	2b00      	cmp	r3, #0
 811c538:	d103      	bne.n	811c542 <tcp_process+0x126>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 811c53a:	4b51      	ldr	r3, [pc, #324]	@ (811c680 <tcp_process+0x264>)
 811c53c:	681a      	ldr	r2, [r3, #0]
 811c53e:	687b      	ldr	r3, [r7, #4]
 811c540:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 811c542:	687b      	ldr	r3, [r7, #4]
 811c544:	2200      	movs	r2, #0
 811c546:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
  pcb->persist_probe = 0;
 811c54a:	687b      	ldr	r3, [r7, #4]
 811c54c:	2200      	movs	r2, #0
 811c54e:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2

  tcp_parseopt(pcb);
 811c552:	6878      	ldr	r0, [r7, #4]
 811c554:	f001 fca4 	bl	811dea0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 811c558:	687b      	ldr	r3, [r7, #4]
 811c55a:	7d1b      	ldrb	r3, [r3, #20]
 811c55c:	3b02      	subs	r3, #2
 811c55e:	2b07      	cmp	r3, #7
 811c560:	f200 83aa 	bhi.w	811ccb8 <tcp_process+0x89c>
 811c564:	a201      	add	r2, pc, #4	@ (adr r2, 811c56c <tcp_process+0x150>)
 811c566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 811c56a:	bf00      	nop
 811c56c:	0811c58d 	.word	0x0811c58d
 811c570:	0811c7b7 	.word	0x0811c7b7
 811c574:	0811c995 	.word	0x0811c995
 811c578:	0811c9bf 	.word	0x0811c9bf
 811c57c:	0811cacd 	.word	0x0811cacd
 811c580:	0811c995 	.word	0x0811c995
 811c584:	0811cbb1 	.word	0x0811cbb1
 811c588:	0811cc63 	.word	0x0811cc63
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 811c58c:	4b36      	ldr	r3, [pc, #216]	@ (811c668 <tcp_process+0x24c>)
 811c58e:	781b      	ldrb	r3, [r3, #0]
 811c590:	f003 0310 	and.w	r3, r3, #16
 811c594:	2b00      	cmp	r3, #0
 811c596:	f000 80e1 	beq.w	811c75c <tcp_process+0x340>
 811c59a:	4b33      	ldr	r3, [pc, #204]	@ (811c668 <tcp_process+0x24c>)
 811c59c:	781b      	ldrb	r3, [r3, #0]
 811c59e:	f003 0302 	and.w	r3, r3, #2
 811c5a2:	2b00      	cmp	r3, #0
 811c5a4:	f000 80da 	beq.w	811c75c <tcp_process+0x340>
          && (ackno == pcb->lastack + 1)) {
 811c5a8:	687b      	ldr	r3, [r7, #4]
 811c5aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811c5ac:	1c5a      	adds	r2, r3, #1
 811c5ae:	4b2f      	ldr	r3, [pc, #188]	@ (811c66c <tcp_process+0x250>)
 811c5b0:	681b      	ldr	r3, [r3, #0]
 811c5b2:	429a      	cmp	r2, r3
 811c5b4:	f040 80d2 	bne.w	811c75c <tcp_process+0x340>
        pcb->rcv_nxt = seqno + 1;
 811c5b8:	4b2d      	ldr	r3, [pc, #180]	@ (811c670 <tcp_process+0x254>)
 811c5ba:	681b      	ldr	r3, [r3, #0]
 811c5bc:	1c5a      	adds	r2, r3, #1
 811c5be:	687b      	ldr	r3, [r7, #4]
 811c5c0:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 811c5c2:	687b      	ldr	r3, [r7, #4]
 811c5c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811c5c6:	687b      	ldr	r3, [r7, #4]
 811c5c8:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 811c5ca:	4b28      	ldr	r3, [pc, #160]	@ (811c66c <tcp_process+0x250>)
 811c5cc:	681a      	ldr	r2, [r3, #0]
 811c5ce:	687b      	ldr	r3, [r7, #4]
 811c5d0:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 811c5d2:	4b2c      	ldr	r3, [pc, #176]	@ (811c684 <tcp_process+0x268>)
 811c5d4:	681b      	ldr	r3, [r3, #0]
 811c5d6:	89db      	ldrh	r3, [r3, #14]
 811c5d8:	b29a      	uxth	r2, r3
 811c5da:	687b      	ldr	r3, [r7, #4]
 811c5dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 811c5e0:	687b      	ldr	r3, [r7, #4]
 811c5e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 811c5e6:	687b      	ldr	r3, [r7, #4]
 811c5e8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 811c5ec:	4b20      	ldr	r3, [pc, #128]	@ (811c670 <tcp_process+0x254>)
 811c5ee:	681b      	ldr	r3, [r3, #0]
 811c5f0:	1e5a      	subs	r2, r3, #1
 811c5f2:	687b      	ldr	r3, [r7, #4]
 811c5f4:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 811c5f6:	687b      	ldr	r3, [r7, #4]
 811c5f8:	2204      	movs	r2, #4
 811c5fa:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 811c5fc:	687b      	ldr	r3, [r7, #4]
 811c5fe:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 811c600:	687b      	ldr	r3, [r7, #4]
 811c602:	3304      	adds	r3, #4
 811c604:	4618      	mov	r0, r3
 811c606:	f7f9 fc21 	bl	8115e4c <ip4_route>
 811c60a:	4601      	mov	r1, r0
 811c60c:	687b      	ldr	r3, [r7, #4]
 811c60e:	3304      	adds	r3, #4
 811c610:	461a      	mov	r2, r3
 811c612:	4620      	mov	r0, r4
 811c614:	f7fe ffda 	bl	811b5cc <tcp_eff_send_mss_netif>
 811c618:	4603      	mov	r3, r0
 811c61a:	461a      	mov	r2, r3
 811c61c:	687b      	ldr	r3, [r7, #4]
 811c61e:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 811c620:	687b      	ldr	r3, [r7, #4]
 811c622:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811c624:	009a      	lsls	r2, r3, #2
 811c626:	687b      	ldr	r3, [r7, #4]
 811c628:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811c62a:	005b      	lsls	r3, r3, #1
 811c62c:	f241 111c 	movw	r1, #4380	@ 0x111c
 811c630:	428b      	cmp	r3, r1
 811c632:	bf38      	it	cc
 811c634:	460b      	movcc	r3, r1
 811c636:	429a      	cmp	r2, r3
 811c638:	d204      	bcs.n	811c644 <tcp_process+0x228>
 811c63a:	687b      	ldr	r3, [r7, #4]
 811c63c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811c63e:	009b      	lsls	r3, r3, #2
 811c640:	b29b      	uxth	r3, r3
 811c642:	e023      	b.n	811c68c <tcp_process+0x270>
 811c644:	687b      	ldr	r3, [r7, #4]
 811c646:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811c648:	005b      	lsls	r3, r3, #1
 811c64a:	f241 121c 	movw	r2, #4380	@ 0x111c
 811c64e:	4293      	cmp	r3, r2
 811c650:	d91a      	bls.n	811c688 <tcp_process+0x26c>
 811c652:	687b      	ldr	r3, [r7, #4]
 811c654:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811c656:	005b      	lsls	r3, r3, #1
 811c658:	b29b      	uxth	r3, r3
 811c65a:	e017      	b.n	811c68c <tcp_process+0x270>
 811c65c:	08126dc8 	.word	0x08126dc8
 811c660:	081270ac 	.word	0x081270ac
 811c664:	08126e54 	.word	0x08126e54
 811c668:	10011ea0 	.word	0x10011ea0
 811c66c:	10011e98 	.word	0x10011e98
 811c670:	10011e94 	.word	0x10011e94
 811c674:	081270c8 	.word	0x081270c8
 811c678:	10011ea1 	.word	0x10011ea1
 811c67c:	081270e8 	.word	0x081270e8
 811c680:	10011e58 	.word	0x10011e58
 811c684:	10011e84 	.word	0x10011e84
 811c688:	f241 131c 	movw	r3, #4380	@ 0x111c
 811c68c:	687a      	ldr	r2, [r7, #4]
 811c68e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 811c692:	687b      	ldr	r3, [r7, #4]
 811c694:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811c698:	2b00      	cmp	r3, #0
 811c69a:	d106      	bne.n	811c6aa <tcp_process+0x28e>
 811c69c:	4b96      	ldr	r3, [pc, #600]	@ (811c8f8 <tcp_process+0x4dc>)
 811c69e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 811c6a2:	4996      	ldr	r1, [pc, #600]	@ (811c8fc <tcp_process+0x4e0>)
 811c6a4:	4896      	ldr	r0, [pc, #600]	@ (811c900 <tcp_process+0x4e4>)
 811c6a6:	f005 fddd 	bl	8122264 <iprintf>
        --pcb->snd_queuelen;
 811c6aa:	687b      	ldr	r3, [r7, #4]
 811c6ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811c6b0:	3b01      	subs	r3, #1
 811c6b2:	b29a      	uxth	r2, r3
 811c6b4:	687b      	ldr	r3, [r7, #4]
 811c6b6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 811c6ba:	687b      	ldr	r3, [r7, #4]
 811c6bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811c6be:	613b      	str	r3, [r7, #16]
        if (rseg == NULL) {
 811c6c0:	693b      	ldr	r3, [r7, #16]
 811c6c2:	2b00      	cmp	r3, #0
 811c6c4:	d111      	bne.n	811c6ea <tcp_process+0x2ce>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 811c6c6:	687b      	ldr	r3, [r7, #4]
 811c6c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811c6ca:	613b      	str	r3, [r7, #16]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 811c6cc:	693b      	ldr	r3, [r7, #16]
 811c6ce:	2b00      	cmp	r3, #0
 811c6d0:	d106      	bne.n	811c6e0 <tcp_process+0x2c4>
 811c6d2:	4b89      	ldr	r3, [pc, #548]	@ (811c8f8 <tcp_process+0x4dc>)
 811c6d4:	f44f 725d 	mov.w	r2, #884	@ 0x374
 811c6d8:	498a      	ldr	r1, [pc, #552]	@ (811c904 <tcp_process+0x4e8>)
 811c6da:	4889      	ldr	r0, [pc, #548]	@ (811c900 <tcp_process+0x4e4>)
 811c6dc:	f005 fdc2 	bl	8122264 <iprintf>
          pcb->unsent = rseg->next;
 811c6e0:	693b      	ldr	r3, [r7, #16]
 811c6e2:	681a      	ldr	r2, [r3, #0]
 811c6e4:	687b      	ldr	r3, [r7, #4]
 811c6e6:	66da      	str	r2, [r3, #108]	@ 0x6c
 811c6e8:	e003      	b.n	811c6f2 <tcp_process+0x2d6>
        } else {
          pcb->unacked = rseg->next;
 811c6ea:	693b      	ldr	r3, [r7, #16]
 811c6ec:	681a      	ldr	r2, [r3, #0]
 811c6ee:	687b      	ldr	r3, [r7, #4]
 811c6f0:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 811c6f2:	6938      	ldr	r0, [r7, #16]
 811c6f4:	f7fe fb7d 	bl	811adf2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 811c6f8:	687b      	ldr	r3, [r7, #4]
 811c6fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811c6fc:	2b00      	cmp	r3, #0
 811c6fe:	d104      	bne.n	811c70a <tcp_process+0x2ee>
          pcb->rtime = -1;
 811c700:	687b      	ldr	r3, [r7, #4]
 811c702:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811c706:	861a      	strh	r2, [r3, #48]	@ 0x30
 811c708:	e006      	b.n	811c718 <tcp_process+0x2fc>
        } else {
          pcb->rtime = 0;
 811c70a:	687b      	ldr	r3, [r7, #4]
 811c70c:	2200      	movs	r2, #0
 811c70e:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 811c710:	687b      	ldr	r3, [r7, #4]
 811c712:	2200      	movs	r2, #0
 811c714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 811c718:	687b      	ldr	r3, [r7, #4]
 811c71a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 811c71e:	2b00      	cmp	r3, #0
 811c720:	d00a      	beq.n	811c738 <tcp_process+0x31c>
 811c722:	687b      	ldr	r3, [r7, #4]
 811c724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 811c728:	687a      	ldr	r2, [r7, #4]
 811c72a:	6910      	ldr	r0, [r2, #16]
 811c72c:	2200      	movs	r2, #0
 811c72e:	6879      	ldr	r1, [r7, #4]
 811c730:	4798      	blx	r3
 811c732:	4603      	mov	r3, r0
 811c734:	73bb      	strb	r3, [r7, #14]
 811c736:	e001      	b.n	811c73c <tcp_process+0x320>
 811c738:	2300      	movs	r3, #0
 811c73a:	73bb      	strb	r3, [r7, #14]
        if (err == ERR_ABRT) {
 811c73c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 811c740:	f113 0f0d 	cmn.w	r3, #13
 811c744:	d102      	bne.n	811c74c <tcp_process+0x330>
          return ERR_ABRT;
 811c746:	f06f 030c 	mvn.w	r3, #12
 811c74a:	e2c5      	b.n	811ccd8 <tcp_process+0x8bc>
        }
        tcp_ack_now(pcb);
 811c74c:	687b      	ldr	r3, [r7, #4]
 811c74e:	8b5b      	ldrh	r3, [r3, #26]
 811c750:	f043 0302 	orr.w	r3, r3, #2
 811c754:	b29a      	uxth	r2, r3
 811c756:	687b      	ldr	r3, [r7, #4]
 811c758:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 811c75a:	e2af      	b.n	811ccbc <tcp_process+0x8a0>
      else if (flags & TCP_ACK) {
 811c75c:	4b6a      	ldr	r3, [pc, #424]	@ (811c908 <tcp_process+0x4ec>)
 811c75e:	781b      	ldrb	r3, [r3, #0]
 811c760:	f003 0310 	and.w	r3, r3, #16
 811c764:	2b00      	cmp	r3, #0
 811c766:	f000 82a9 	beq.w	811ccbc <tcp_process+0x8a0>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811c76a:	4b68      	ldr	r3, [pc, #416]	@ (811c90c <tcp_process+0x4f0>)
 811c76c:	6819      	ldr	r1, [r3, #0]
 811c76e:	4b68      	ldr	r3, [pc, #416]	@ (811c910 <tcp_process+0x4f4>)
 811c770:	881b      	ldrh	r3, [r3, #0]
 811c772:	461a      	mov	r2, r3
 811c774:	4b67      	ldr	r3, [pc, #412]	@ (811c914 <tcp_process+0x4f8>)
 811c776:	681b      	ldr	r3, [r3, #0]
 811c778:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811c77a:	4b67      	ldr	r3, [pc, #412]	@ (811c918 <tcp_process+0x4fc>)
 811c77c:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811c77e:	885b      	ldrh	r3, [r3, #2]
 811c780:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811c782:	4a65      	ldr	r2, [pc, #404]	@ (811c918 <tcp_process+0x4fc>)
 811c784:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811c786:	8812      	ldrh	r2, [r2, #0]
 811c788:	b292      	uxth	r2, r2
 811c78a:	9202      	str	r2, [sp, #8]
 811c78c:	9301      	str	r3, [sp, #4]
 811c78e:	4b63      	ldr	r3, [pc, #396]	@ (811c91c <tcp_process+0x500>)
 811c790:	9300      	str	r3, [sp, #0]
 811c792:	4b63      	ldr	r3, [pc, #396]	@ (811c920 <tcp_process+0x504>)
 811c794:	4602      	mov	r2, r0
 811c796:	6878      	ldr	r0, [r7, #4]
 811c798:	f003 f9c2 	bl	811fb20 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 811c79c:	687b      	ldr	r3, [r7, #4]
 811c79e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811c7a2:	2b05      	cmp	r3, #5
 811c7a4:	f200 828a 	bhi.w	811ccbc <tcp_process+0x8a0>
          pcb->rtime = 0;
 811c7a8:	687b      	ldr	r3, [r7, #4]
 811c7aa:	2200      	movs	r2, #0
 811c7ac:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 811c7ae:	6878      	ldr	r0, [r7, #4]
 811c7b0:	f002 ff8e 	bl	811f6d0 <tcp_rexmit_rto>
      break;
 811c7b4:	e282      	b.n	811ccbc <tcp_process+0x8a0>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 811c7b6:	4b54      	ldr	r3, [pc, #336]	@ (811c908 <tcp_process+0x4ec>)
 811c7b8:	781b      	ldrb	r3, [r3, #0]
 811c7ba:	f003 0310 	and.w	r3, r3, #16
 811c7be:	2b00      	cmp	r3, #0
 811c7c0:	f000 80d4 	beq.w	811c96c <tcp_process+0x550>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 811c7c4:	4b51      	ldr	r3, [pc, #324]	@ (811c90c <tcp_process+0x4f0>)
 811c7c6:	681a      	ldr	r2, [r3, #0]
 811c7c8:	687b      	ldr	r3, [r7, #4]
 811c7ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811c7cc:	1ad3      	subs	r3, r2, r3
 811c7ce:	3b01      	subs	r3, #1
 811c7d0:	2b00      	cmp	r3, #0
 811c7d2:	f2c0 80b1 	blt.w	811c938 <tcp_process+0x51c>
 811c7d6:	4b4d      	ldr	r3, [pc, #308]	@ (811c90c <tcp_process+0x4f0>)
 811c7d8:	681a      	ldr	r2, [r3, #0]
 811c7da:	687b      	ldr	r3, [r7, #4]
 811c7dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 811c7de:	1ad3      	subs	r3, r2, r3
 811c7e0:	2b00      	cmp	r3, #0
 811c7e2:	f300 80a9 	bgt.w	811c938 <tcp_process+0x51c>
          pcb->state = ESTABLISHED;
 811c7e6:	687b      	ldr	r3, [r7, #4]
 811c7e8:	2204      	movs	r2, #4
 811c7ea:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
 811c7ec:	4b4d      	ldr	r3, [pc, #308]	@ (811c924 <tcp_process+0x508>)
 811c7ee:	691b      	ldr	r3, [r3, #16]
 811c7f0:	881b      	ldrh	r3, [r3, #0]
 811c7f2:	b29b      	uxth	r3, r3
 811c7f4:	4619      	mov	r1, r3
 811c7f6:	4b4b      	ldr	r3, [pc, #300]	@ (811c924 <tcp_process+0x508>)
 811c7f8:	691b      	ldr	r3, [r3, #16]
 811c7fa:	885b      	ldrh	r3, [r3, #2]
 811c7fc:	b29b      	uxth	r3, r3
 811c7fe:	461a      	mov	r2, r3
 811c800:	4849      	ldr	r0, [pc, #292]	@ (811c928 <tcp_process+0x50c>)
 811c802:	f005 fd2f 	bl	8122264 <iprintf>
 811c806:	200d      	movs	r0, #13
 811c808:	f005 fd3e 	bl	8122288 <putchar>
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 811c80c:	687b      	ldr	r3, [r7, #4]
 811c80e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 811c810:	2b00      	cmp	r3, #0
 811c812:	d102      	bne.n	811c81a <tcp_process+0x3fe>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 811c814:	23fa      	movs	r3, #250	@ 0xfa
 811c816:	73bb      	strb	r3, [r7, #14]
 811c818:	e01d      	b.n	811c856 <tcp_process+0x43a>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 811c81a:	687b      	ldr	r3, [r7, #4]
 811c81c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 811c81e:	699b      	ldr	r3, [r3, #24]
 811c820:	2b00      	cmp	r3, #0
 811c822:	d106      	bne.n	811c832 <tcp_process+0x416>
 811c824:	4b34      	ldr	r3, [pc, #208]	@ (811c8f8 <tcp_process+0x4dc>)
 811c826:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 811c82a:	4940      	ldr	r1, [pc, #256]	@ (811c92c <tcp_process+0x510>)
 811c82c:	4834      	ldr	r0, [pc, #208]	@ (811c900 <tcp_process+0x4e4>)
 811c82e:	f005 fd19 	bl	8122264 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 811c832:	687b      	ldr	r3, [r7, #4]
 811c834:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 811c836:	699b      	ldr	r3, [r3, #24]
 811c838:	2b00      	cmp	r3, #0
 811c83a:	d00a      	beq.n	811c852 <tcp_process+0x436>
 811c83c:	687b      	ldr	r3, [r7, #4]
 811c83e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 811c840:	699b      	ldr	r3, [r3, #24]
 811c842:	687a      	ldr	r2, [r7, #4]
 811c844:	6910      	ldr	r0, [r2, #16]
 811c846:	2200      	movs	r2, #0
 811c848:	6879      	ldr	r1, [r7, #4]
 811c84a:	4798      	blx	r3
 811c84c:	4603      	mov	r3, r0
 811c84e:	73bb      	strb	r3, [r7, #14]
 811c850:	e001      	b.n	811c856 <tcp_process+0x43a>
 811c852:	23f0      	movs	r3, #240	@ 0xf0
 811c854:	73bb      	strb	r3, [r7, #14]
          }
          if (err != ERR_OK) {
 811c856:	f997 300e 	ldrsb.w	r3, [r7, #14]
 811c85a:	2b00      	cmp	r3, #0
 811c85c:	d00a      	beq.n	811c874 <tcp_process+0x458>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 811c85e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 811c862:	f113 0f0d 	cmn.w	r3, #13
 811c866:	d002      	beq.n	811c86e <tcp_process+0x452>
              tcp_abort(pcb);
 811c868:	6878      	ldr	r0, [r7, #4]
 811c86a:	f7fd fb29 	bl	8119ec0 <tcp_abort>
            }
            return ERR_ABRT;
 811c86e:	f06f 030c 	mvn.w	r3, #12
 811c872:	e231      	b.n	811ccd8 <tcp_process+0x8bc>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 811c874:	6878      	ldr	r0, [r7, #4]
 811c876:	f000 fb49 	bl	811cf0c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 811c87a:	4b2d      	ldr	r3, [pc, #180]	@ (811c930 <tcp_process+0x514>)
 811c87c:	881b      	ldrh	r3, [r3, #0]
 811c87e:	2b00      	cmp	r3, #0
 811c880:	d005      	beq.n	811c88e <tcp_process+0x472>
            recv_acked--;
 811c882:	4b2b      	ldr	r3, [pc, #172]	@ (811c930 <tcp_process+0x514>)
 811c884:	881b      	ldrh	r3, [r3, #0]
 811c886:	3b01      	subs	r3, #1
 811c888:	b29a      	uxth	r2, r3
 811c88a:	4b29      	ldr	r3, [pc, #164]	@ (811c930 <tcp_process+0x514>)
 811c88c:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 811c88e:	687b      	ldr	r3, [r7, #4]
 811c890:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811c892:	009a      	lsls	r2, r3, #2
 811c894:	687b      	ldr	r3, [r7, #4]
 811c896:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811c898:	005b      	lsls	r3, r3, #1
 811c89a:	f241 111c 	movw	r1, #4380	@ 0x111c
 811c89e:	428b      	cmp	r3, r1
 811c8a0:	bf38      	it	cc
 811c8a2:	460b      	movcc	r3, r1
 811c8a4:	429a      	cmp	r2, r3
 811c8a6:	d204      	bcs.n	811c8b2 <tcp_process+0x496>
 811c8a8:	687b      	ldr	r3, [r7, #4]
 811c8aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811c8ac:	009b      	lsls	r3, r3, #2
 811c8ae:	b29b      	uxth	r3, r3
 811c8b0:	e00d      	b.n	811c8ce <tcp_process+0x4b2>
 811c8b2:	687b      	ldr	r3, [r7, #4]
 811c8b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811c8b6:	005b      	lsls	r3, r3, #1
 811c8b8:	f241 121c 	movw	r2, #4380	@ 0x111c
 811c8bc:	4293      	cmp	r3, r2
 811c8be:	d904      	bls.n	811c8ca <tcp_process+0x4ae>
 811c8c0:	687b      	ldr	r3, [r7, #4]
 811c8c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811c8c4:	005b      	lsls	r3, r3, #1
 811c8c6:	b29b      	uxth	r3, r3
 811c8c8:	e001      	b.n	811c8ce <tcp_process+0x4b2>
 811c8ca:	f241 131c 	movw	r3, #4380	@ 0x111c
 811c8ce:	687a      	ldr	r2, [r7, #4]
 811c8d0:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 811c8d4:	4b17      	ldr	r3, [pc, #92]	@ (811c934 <tcp_process+0x518>)
 811c8d6:	781b      	ldrb	r3, [r3, #0]
 811c8d8:	f003 0320 	and.w	r3, r3, #32
 811c8dc:	2b00      	cmp	r3, #0
 811c8de:	d058      	beq.n	811c992 <tcp_process+0x576>
            tcp_ack_now(pcb);
 811c8e0:	687b      	ldr	r3, [r7, #4]
 811c8e2:	8b5b      	ldrh	r3, [r3, #26]
 811c8e4:	f043 0302 	orr.w	r3, r3, #2
 811c8e8:	b29a      	uxth	r2, r3
 811c8ea:	687b      	ldr	r3, [r7, #4]
 811c8ec:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 811c8ee:	687b      	ldr	r3, [r7, #4]
 811c8f0:	2207      	movs	r2, #7
 811c8f2:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 811c8f4:	e04d      	b.n	811c992 <tcp_process+0x576>
 811c8f6:	bf00      	nop
 811c8f8:	08126dc8 	.word	0x08126dc8
 811c8fc:	08127120 	.word	0x08127120
 811c900:	08126e54 	.word	0x08126e54
 811c904:	08127138 	.word	0x08127138
 811c908:	10011ea0 	.word	0x10011ea0
 811c90c:	10011e98 	.word	0x10011e98
 811c910:	10011e9e 	.word	0x10011e9e
 811c914:	10011e94 	.word	0x10011e94
 811c918:	10011e84 	.word	0x10011e84
 811c91c:	1000b2c4 	.word	0x1000b2c4
 811c920:	1000b2c8 	.word	0x1000b2c8
 811c924:	10011e70 	.word	0x10011e70
 811c928:	0812714c 	.word	0x0812714c
 811c92c:	08127174 	.word	0x08127174
 811c930:	10011e9c 	.word	0x10011e9c
 811c934:	10011ea1 	.word	0x10011ea1
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811c938:	4b8f      	ldr	r3, [pc, #572]	@ (811cb78 <tcp_process+0x75c>)
 811c93a:	6819      	ldr	r1, [r3, #0]
 811c93c:	4b8f      	ldr	r3, [pc, #572]	@ (811cb7c <tcp_process+0x760>)
 811c93e:	881b      	ldrh	r3, [r3, #0]
 811c940:	461a      	mov	r2, r3
 811c942:	4b8f      	ldr	r3, [pc, #572]	@ (811cb80 <tcp_process+0x764>)
 811c944:	681b      	ldr	r3, [r3, #0]
 811c946:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811c948:	4b8e      	ldr	r3, [pc, #568]	@ (811cb84 <tcp_process+0x768>)
 811c94a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811c94c:	885b      	ldrh	r3, [r3, #2]
 811c94e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811c950:	4a8c      	ldr	r2, [pc, #560]	@ (811cb84 <tcp_process+0x768>)
 811c952:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 811c954:	8812      	ldrh	r2, [r2, #0]
 811c956:	b292      	uxth	r2, r2
 811c958:	9202      	str	r2, [sp, #8]
 811c95a:	9301      	str	r3, [sp, #4]
 811c95c:	4b8a      	ldr	r3, [pc, #552]	@ (811cb88 <tcp_process+0x76c>)
 811c95e:	9300      	str	r3, [sp, #0]
 811c960:	4b8a      	ldr	r3, [pc, #552]	@ (811cb8c <tcp_process+0x770>)
 811c962:	4602      	mov	r2, r0
 811c964:	6878      	ldr	r0, [r7, #4]
 811c966:	f003 f8db 	bl	811fb20 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 811c96a:	e1a9      	b.n	811ccc0 <tcp_process+0x8a4>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 811c96c:	4b88      	ldr	r3, [pc, #544]	@ (811cb90 <tcp_process+0x774>)
 811c96e:	781b      	ldrb	r3, [r3, #0]
 811c970:	f003 0302 	and.w	r3, r3, #2
 811c974:	2b00      	cmp	r3, #0
 811c976:	f000 81a3 	beq.w	811ccc0 <tcp_process+0x8a4>
 811c97a:	687b      	ldr	r3, [r7, #4]
 811c97c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811c97e:	1e5a      	subs	r2, r3, #1
 811c980:	4b7f      	ldr	r3, [pc, #508]	@ (811cb80 <tcp_process+0x764>)
 811c982:	681b      	ldr	r3, [r3, #0]
 811c984:	429a      	cmp	r2, r3
 811c986:	f040 819b 	bne.w	811ccc0 <tcp_process+0x8a4>
        tcp_rexmit(pcb);
 811c98a:	6878      	ldr	r0, [r7, #4]
 811c98c:	f002 fec2 	bl	811f714 <tcp_rexmit>
      break;
 811c990:	e196      	b.n	811ccc0 <tcp_process+0x8a4>
 811c992:	e195      	b.n	811ccc0 <tcp_process+0x8a4>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 811c994:	6878      	ldr	r0, [r7, #4]
 811c996:	f000 fab9 	bl	811cf0c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 811c99a:	4b7e      	ldr	r3, [pc, #504]	@ (811cb94 <tcp_process+0x778>)
 811c99c:	781b      	ldrb	r3, [r3, #0]
 811c99e:	f003 0320 	and.w	r3, r3, #32
 811c9a2:	2b00      	cmp	r3, #0
 811c9a4:	f000 818e 	beq.w	811ccc4 <tcp_process+0x8a8>
        tcp_ack_now(pcb);
 811c9a8:	687b      	ldr	r3, [r7, #4]
 811c9aa:	8b5b      	ldrh	r3, [r3, #26]
 811c9ac:	f043 0302 	orr.w	r3, r3, #2
 811c9b0:	b29a      	uxth	r2, r3
 811c9b2:	687b      	ldr	r3, [r7, #4]
 811c9b4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 811c9b6:	687b      	ldr	r3, [r7, #4]
 811c9b8:	2207      	movs	r2, #7
 811c9ba:	751a      	strb	r2, [r3, #20]
      }
      break;
 811c9bc:	e182      	b.n	811ccc4 <tcp_process+0x8a8>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 811c9be:	6878      	ldr	r0, [r7, #4]
 811c9c0:	f000 faa4 	bl	811cf0c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 811c9c4:	4b73      	ldr	r3, [pc, #460]	@ (811cb94 <tcp_process+0x778>)
 811c9c6:	781b      	ldrb	r3, [r3, #0]
 811c9c8:	f003 0320 	and.w	r3, r3, #32
 811c9cc:	2b00      	cmp	r3, #0
 811c9ce:	d066      	beq.n	811ca9e <tcp_process+0x682>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 811c9d0:	4b6f      	ldr	r3, [pc, #444]	@ (811cb90 <tcp_process+0x774>)
 811c9d2:	781b      	ldrb	r3, [r3, #0]
 811c9d4:	f003 0310 	and.w	r3, r3, #16
 811c9d8:	2b00      	cmp	r3, #0
 811c9da:	d055      	beq.n	811ca88 <tcp_process+0x66c>
 811c9dc:	687b      	ldr	r3, [r7, #4]
 811c9de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 811c9e0:	4b65      	ldr	r3, [pc, #404]	@ (811cb78 <tcp_process+0x75c>)
 811c9e2:	681b      	ldr	r3, [r3, #0]
 811c9e4:	429a      	cmp	r2, r3
 811c9e6:	d14f      	bne.n	811ca88 <tcp_process+0x66c>
            pcb->unsent == NULL) {
 811c9e8:	687b      	ldr	r3, [r7, #4]
 811c9ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 811c9ec:	2b00      	cmp	r3, #0
 811c9ee:	d14b      	bne.n	811ca88 <tcp_process+0x66c>
          LWIP_DEBUGF(TCP_DEBUG,
 811c9f0:	4b69      	ldr	r3, [pc, #420]	@ (811cb98 <tcp_process+0x77c>)
 811c9f2:	691b      	ldr	r3, [r3, #16]
 811c9f4:	881b      	ldrh	r3, [r3, #0]
 811c9f6:	b29b      	uxth	r3, r3
 811c9f8:	4619      	mov	r1, r3
 811c9fa:	4b67      	ldr	r3, [pc, #412]	@ (811cb98 <tcp_process+0x77c>)
 811c9fc:	691b      	ldr	r3, [r3, #16]
 811c9fe:	885b      	ldrh	r3, [r3, #2]
 811ca00:	b29b      	uxth	r3, r3
 811ca02:	461a      	mov	r2, r3
 811ca04:	4865      	ldr	r0, [pc, #404]	@ (811cb9c <tcp_process+0x780>)
 811ca06:	f005 fc2d 	bl	8122264 <iprintf>
 811ca0a:	200d      	movs	r0, #13
 811ca0c:	f005 fc3c 	bl	8122288 <putchar>
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 811ca10:	687b      	ldr	r3, [r7, #4]
 811ca12:	8b5b      	ldrh	r3, [r3, #26]
 811ca14:	f043 0302 	orr.w	r3, r3, #2
 811ca18:	b29a      	uxth	r2, r3
 811ca1a:	687b      	ldr	r3, [r7, #4]
 811ca1c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 811ca1e:	6878      	ldr	r0, [r7, #4]
 811ca20:	f7fe fc8c 	bl	811b33c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 811ca24:	4b5e      	ldr	r3, [pc, #376]	@ (811cba0 <tcp_process+0x784>)
 811ca26:	681b      	ldr	r3, [r3, #0]
 811ca28:	687a      	ldr	r2, [r7, #4]
 811ca2a:	429a      	cmp	r2, r3
 811ca2c:	d105      	bne.n	811ca3a <tcp_process+0x61e>
 811ca2e:	4b5c      	ldr	r3, [pc, #368]	@ (811cba0 <tcp_process+0x784>)
 811ca30:	681b      	ldr	r3, [r3, #0]
 811ca32:	68db      	ldr	r3, [r3, #12]
 811ca34:	4a5a      	ldr	r2, [pc, #360]	@ (811cba0 <tcp_process+0x784>)
 811ca36:	6013      	str	r3, [r2, #0]
 811ca38:	e013      	b.n	811ca62 <tcp_process+0x646>
 811ca3a:	4b59      	ldr	r3, [pc, #356]	@ (811cba0 <tcp_process+0x784>)
 811ca3c:	681b      	ldr	r3, [r3, #0]
 811ca3e:	61bb      	str	r3, [r7, #24]
 811ca40:	e00c      	b.n	811ca5c <tcp_process+0x640>
 811ca42:	69bb      	ldr	r3, [r7, #24]
 811ca44:	68db      	ldr	r3, [r3, #12]
 811ca46:	687a      	ldr	r2, [r7, #4]
 811ca48:	429a      	cmp	r2, r3
 811ca4a:	d104      	bne.n	811ca56 <tcp_process+0x63a>
 811ca4c:	687b      	ldr	r3, [r7, #4]
 811ca4e:	68da      	ldr	r2, [r3, #12]
 811ca50:	69bb      	ldr	r3, [r7, #24]
 811ca52:	60da      	str	r2, [r3, #12]
 811ca54:	e005      	b.n	811ca62 <tcp_process+0x646>
 811ca56:	69bb      	ldr	r3, [r7, #24]
 811ca58:	68db      	ldr	r3, [r3, #12]
 811ca5a:	61bb      	str	r3, [r7, #24]
 811ca5c:	69bb      	ldr	r3, [r7, #24]
 811ca5e:	2b00      	cmp	r3, #0
 811ca60:	d1ef      	bne.n	811ca42 <tcp_process+0x626>
 811ca62:	687b      	ldr	r3, [r7, #4]
 811ca64:	2200      	movs	r2, #0
 811ca66:	60da      	str	r2, [r3, #12]
 811ca68:	4b4e      	ldr	r3, [pc, #312]	@ (811cba4 <tcp_process+0x788>)
 811ca6a:	2201      	movs	r2, #1
 811ca6c:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 811ca6e:	687b      	ldr	r3, [r7, #4]
 811ca70:	220a      	movs	r2, #10
 811ca72:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 811ca74:	4b4c      	ldr	r3, [pc, #304]	@ (811cba8 <tcp_process+0x78c>)
 811ca76:	681a      	ldr	r2, [r3, #0]
 811ca78:	687b      	ldr	r3, [r7, #4]
 811ca7a:	60da      	str	r2, [r3, #12]
 811ca7c:	4a4a      	ldr	r2, [pc, #296]	@ (811cba8 <tcp_process+0x78c>)
 811ca7e:	687b      	ldr	r3, [r7, #4]
 811ca80:	6013      	str	r3, [r2, #0]
 811ca82:	f003 fc1b 	bl	81202bc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 811ca86:	e11f      	b.n	811ccc8 <tcp_process+0x8ac>
          tcp_ack_now(pcb);
 811ca88:	687b      	ldr	r3, [r7, #4]
 811ca8a:	8b5b      	ldrh	r3, [r3, #26]
 811ca8c:	f043 0302 	orr.w	r3, r3, #2
 811ca90:	b29a      	uxth	r2, r3
 811ca92:	687b      	ldr	r3, [r7, #4]
 811ca94:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 811ca96:	687b      	ldr	r3, [r7, #4]
 811ca98:	2208      	movs	r2, #8
 811ca9a:	751a      	strb	r2, [r3, #20]
      break;
 811ca9c:	e114      	b.n	811ccc8 <tcp_process+0x8ac>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 811ca9e:	4b3c      	ldr	r3, [pc, #240]	@ (811cb90 <tcp_process+0x774>)
 811caa0:	781b      	ldrb	r3, [r3, #0]
 811caa2:	f003 0310 	and.w	r3, r3, #16
 811caa6:	2b00      	cmp	r3, #0
 811caa8:	f000 810e 	beq.w	811ccc8 <tcp_process+0x8ac>
 811caac:	687b      	ldr	r3, [r7, #4]
 811caae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 811cab0:	4b31      	ldr	r3, [pc, #196]	@ (811cb78 <tcp_process+0x75c>)
 811cab2:	681b      	ldr	r3, [r3, #0]
 811cab4:	429a      	cmp	r2, r3
 811cab6:	f040 8107 	bne.w	811ccc8 <tcp_process+0x8ac>
                 pcb->unsent == NULL) {
 811caba:	687b      	ldr	r3, [r7, #4]
 811cabc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 811cabe:	2b00      	cmp	r3, #0
 811cac0:	f040 8102 	bne.w	811ccc8 <tcp_process+0x8ac>
        pcb->state = FIN_WAIT_2;
 811cac4:	687b      	ldr	r3, [r7, #4]
 811cac6:	2206      	movs	r2, #6
 811cac8:	751a      	strb	r2, [r3, #20]
      break;
 811caca:	e0fd      	b.n	811ccc8 <tcp_process+0x8ac>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 811cacc:	6878      	ldr	r0, [r7, #4]
 811cace:	f000 fa1d 	bl	811cf0c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 811cad2:	4b30      	ldr	r3, [pc, #192]	@ (811cb94 <tcp_process+0x778>)
 811cad4:	781b      	ldrb	r3, [r3, #0]
 811cad6:	f003 0320 	and.w	r3, r3, #32
 811cada:	2b00      	cmp	r3, #0
 811cadc:	f000 80f6 	beq.w	811cccc <tcp_process+0x8b0>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
 811cae0:	4b2d      	ldr	r3, [pc, #180]	@ (811cb98 <tcp_process+0x77c>)
 811cae2:	691b      	ldr	r3, [r3, #16]
 811cae4:	881b      	ldrh	r3, [r3, #0]
 811cae6:	b29b      	uxth	r3, r3
 811cae8:	4619      	mov	r1, r3
 811caea:	4b2b      	ldr	r3, [pc, #172]	@ (811cb98 <tcp_process+0x77c>)
 811caec:	691b      	ldr	r3, [r3, #16]
 811caee:	885b      	ldrh	r3, [r3, #2]
 811caf0:	b29b      	uxth	r3, r3
 811caf2:	461a      	mov	r2, r3
 811caf4:	482d      	ldr	r0, [pc, #180]	@ (811cbac <tcp_process+0x790>)
 811caf6:	f005 fbb5 	bl	8122264 <iprintf>
 811cafa:	200d      	movs	r0, #13
 811cafc:	f005 fbc4 	bl	8122288 <putchar>
        tcp_ack_now(pcb);
 811cb00:	687b      	ldr	r3, [r7, #4]
 811cb02:	8b5b      	ldrh	r3, [r3, #26]
 811cb04:	f043 0302 	orr.w	r3, r3, #2
 811cb08:	b29a      	uxth	r2, r3
 811cb0a:	687b      	ldr	r3, [r7, #4]
 811cb0c:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 811cb0e:	6878      	ldr	r0, [r7, #4]
 811cb10:	f7fe fc14 	bl	811b33c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 811cb14:	4b22      	ldr	r3, [pc, #136]	@ (811cba0 <tcp_process+0x784>)
 811cb16:	681b      	ldr	r3, [r3, #0]
 811cb18:	687a      	ldr	r2, [r7, #4]
 811cb1a:	429a      	cmp	r2, r3
 811cb1c:	d105      	bne.n	811cb2a <tcp_process+0x70e>
 811cb1e:	4b20      	ldr	r3, [pc, #128]	@ (811cba0 <tcp_process+0x784>)
 811cb20:	681b      	ldr	r3, [r3, #0]
 811cb22:	68db      	ldr	r3, [r3, #12]
 811cb24:	4a1e      	ldr	r2, [pc, #120]	@ (811cba0 <tcp_process+0x784>)
 811cb26:	6013      	str	r3, [r2, #0]
 811cb28:	e013      	b.n	811cb52 <tcp_process+0x736>
 811cb2a:	4b1d      	ldr	r3, [pc, #116]	@ (811cba0 <tcp_process+0x784>)
 811cb2c:	681b      	ldr	r3, [r3, #0]
 811cb2e:	617b      	str	r3, [r7, #20]
 811cb30:	e00c      	b.n	811cb4c <tcp_process+0x730>
 811cb32:	697b      	ldr	r3, [r7, #20]
 811cb34:	68db      	ldr	r3, [r3, #12]
 811cb36:	687a      	ldr	r2, [r7, #4]
 811cb38:	429a      	cmp	r2, r3
 811cb3a:	d104      	bne.n	811cb46 <tcp_process+0x72a>
 811cb3c:	687b      	ldr	r3, [r7, #4]
 811cb3e:	68da      	ldr	r2, [r3, #12]
 811cb40:	697b      	ldr	r3, [r7, #20]
 811cb42:	60da      	str	r2, [r3, #12]
 811cb44:	e005      	b.n	811cb52 <tcp_process+0x736>
 811cb46:	697b      	ldr	r3, [r7, #20]
 811cb48:	68db      	ldr	r3, [r3, #12]
 811cb4a:	617b      	str	r3, [r7, #20]
 811cb4c:	697b      	ldr	r3, [r7, #20]
 811cb4e:	2b00      	cmp	r3, #0
 811cb50:	d1ef      	bne.n	811cb32 <tcp_process+0x716>
 811cb52:	687b      	ldr	r3, [r7, #4]
 811cb54:	2200      	movs	r2, #0
 811cb56:	60da      	str	r2, [r3, #12]
 811cb58:	4b12      	ldr	r3, [pc, #72]	@ (811cba4 <tcp_process+0x788>)
 811cb5a:	2201      	movs	r2, #1
 811cb5c:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 811cb5e:	687b      	ldr	r3, [r7, #4]
 811cb60:	220a      	movs	r2, #10
 811cb62:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 811cb64:	4b10      	ldr	r3, [pc, #64]	@ (811cba8 <tcp_process+0x78c>)
 811cb66:	681a      	ldr	r2, [r3, #0]
 811cb68:	687b      	ldr	r3, [r7, #4]
 811cb6a:	60da      	str	r2, [r3, #12]
 811cb6c:	4a0e      	ldr	r2, [pc, #56]	@ (811cba8 <tcp_process+0x78c>)
 811cb6e:	687b      	ldr	r3, [r7, #4]
 811cb70:	6013      	str	r3, [r2, #0]
 811cb72:	f003 fba3 	bl	81202bc <tcp_timer_needed>
      }
      break;
 811cb76:	e0a9      	b.n	811cccc <tcp_process+0x8b0>
 811cb78:	10011e98 	.word	0x10011e98
 811cb7c:	10011e9e 	.word	0x10011e9e
 811cb80:	10011e94 	.word	0x10011e94
 811cb84:	10011e84 	.word	0x10011e84
 811cb88:	1000b2c4 	.word	0x1000b2c4
 811cb8c:	1000b2c8 	.word	0x1000b2c8
 811cb90:	10011ea0 	.word	0x10011ea0
 811cb94:	10011ea1 	.word	0x10011ea1
 811cb98:	10011e70 	.word	0x10011e70
 811cb9c:	08127194 	.word	0x08127194
 811cba0:	10011e64 	.word	0x10011e64
 811cba4:	10011e6c 	.word	0x10011e6c
 811cba8:	10011e68 	.word	0x10011e68
 811cbac:	081271c4 	.word	0x081271c4
    case CLOSING:
      tcp_receive(pcb);
 811cbb0:	6878      	ldr	r0, [r7, #4]
 811cbb2:	f000 f9ab 	bl	811cf0c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 811cbb6:	4b4a      	ldr	r3, [pc, #296]	@ (811cce0 <tcp_process+0x8c4>)
 811cbb8:	781b      	ldrb	r3, [r3, #0]
 811cbba:	f003 0310 	and.w	r3, r3, #16
 811cbbe:	2b00      	cmp	r3, #0
 811cbc0:	f000 8086 	beq.w	811ccd0 <tcp_process+0x8b4>
 811cbc4:	687b      	ldr	r3, [r7, #4]
 811cbc6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 811cbc8:	4b46      	ldr	r3, [pc, #280]	@ (811cce4 <tcp_process+0x8c8>)
 811cbca:	681b      	ldr	r3, [r3, #0]
 811cbcc:	429a      	cmp	r2, r3
 811cbce:	d17f      	bne.n	811ccd0 <tcp_process+0x8b4>
 811cbd0:	687b      	ldr	r3, [r7, #4]
 811cbd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811cbd4:	2b00      	cmp	r3, #0
 811cbd6:	d17b      	bne.n	811ccd0 <tcp_process+0x8b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
 811cbd8:	4b43      	ldr	r3, [pc, #268]	@ (811cce8 <tcp_process+0x8cc>)
 811cbda:	691b      	ldr	r3, [r3, #16]
 811cbdc:	881b      	ldrh	r3, [r3, #0]
 811cbde:	b29b      	uxth	r3, r3
 811cbe0:	4619      	mov	r1, r3
 811cbe2:	4b41      	ldr	r3, [pc, #260]	@ (811cce8 <tcp_process+0x8cc>)
 811cbe4:	691b      	ldr	r3, [r3, #16]
 811cbe6:	885b      	ldrh	r3, [r3, #2]
 811cbe8:	b29b      	uxth	r3, r3
 811cbea:	461a      	mov	r2, r3
 811cbec:	483f      	ldr	r0, [pc, #252]	@ (811ccec <tcp_process+0x8d0>)
 811cbee:	f005 fb39 	bl	8122264 <iprintf>
 811cbf2:	200d      	movs	r0, #13
 811cbf4:	f005 fb48 	bl	8122288 <putchar>
        tcp_pcb_purge(pcb);
 811cbf8:	6878      	ldr	r0, [r7, #4]
 811cbfa:	f7fe fb9f 	bl	811b33c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 811cbfe:	4b3c      	ldr	r3, [pc, #240]	@ (811ccf0 <tcp_process+0x8d4>)
 811cc00:	681b      	ldr	r3, [r3, #0]
 811cc02:	687a      	ldr	r2, [r7, #4]
 811cc04:	429a      	cmp	r2, r3
 811cc06:	d105      	bne.n	811cc14 <tcp_process+0x7f8>
 811cc08:	4b39      	ldr	r3, [pc, #228]	@ (811ccf0 <tcp_process+0x8d4>)
 811cc0a:	681b      	ldr	r3, [r3, #0]
 811cc0c:	68db      	ldr	r3, [r3, #12]
 811cc0e:	4a38      	ldr	r2, [pc, #224]	@ (811ccf0 <tcp_process+0x8d4>)
 811cc10:	6013      	str	r3, [r2, #0]
 811cc12:	e013      	b.n	811cc3c <tcp_process+0x820>
 811cc14:	4b36      	ldr	r3, [pc, #216]	@ (811ccf0 <tcp_process+0x8d4>)
 811cc16:	681b      	ldr	r3, [r3, #0]
 811cc18:	61fb      	str	r3, [r7, #28]
 811cc1a:	e00c      	b.n	811cc36 <tcp_process+0x81a>
 811cc1c:	69fb      	ldr	r3, [r7, #28]
 811cc1e:	68db      	ldr	r3, [r3, #12]
 811cc20:	687a      	ldr	r2, [r7, #4]
 811cc22:	429a      	cmp	r2, r3
 811cc24:	d104      	bne.n	811cc30 <tcp_process+0x814>
 811cc26:	687b      	ldr	r3, [r7, #4]
 811cc28:	68da      	ldr	r2, [r3, #12]
 811cc2a:	69fb      	ldr	r3, [r7, #28]
 811cc2c:	60da      	str	r2, [r3, #12]
 811cc2e:	e005      	b.n	811cc3c <tcp_process+0x820>
 811cc30:	69fb      	ldr	r3, [r7, #28]
 811cc32:	68db      	ldr	r3, [r3, #12]
 811cc34:	61fb      	str	r3, [r7, #28]
 811cc36:	69fb      	ldr	r3, [r7, #28]
 811cc38:	2b00      	cmp	r3, #0
 811cc3a:	d1ef      	bne.n	811cc1c <tcp_process+0x800>
 811cc3c:	687b      	ldr	r3, [r7, #4]
 811cc3e:	2200      	movs	r2, #0
 811cc40:	60da      	str	r2, [r3, #12]
 811cc42:	4b2c      	ldr	r3, [pc, #176]	@ (811ccf4 <tcp_process+0x8d8>)
 811cc44:	2201      	movs	r2, #1
 811cc46:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 811cc48:	687b      	ldr	r3, [r7, #4]
 811cc4a:	220a      	movs	r2, #10
 811cc4c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 811cc4e:	4b2a      	ldr	r3, [pc, #168]	@ (811ccf8 <tcp_process+0x8dc>)
 811cc50:	681a      	ldr	r2, [r3, #0]
 811cc52:	687b      	ldr	r3, [r7, #4]
 811cc54:	60da      	str	r2, [r3, #12]
 811cc56:	4a28      	ldr	r2, [pc, #160]	@ (811ccf8 <tcp_process+0x8dc>)
 811cc58:	687b      	ldr	r3, [r7, #4]
 811cc5a:	6013      	str	r3, [r2, #0]
 811cc5c:	f003 fb2e 	bl	81202bc <tcp_timer_needed>
      }
      break;
 811cc60:	e036      	b.n	811ccd0 <tcp_process+0x8b4>
    case LAST_ACK:
      tcp_receive(pcb);
 811cc62:	6878      	ldr	r0, [r7, #4]
 811cc64:	f000 f952 	bl	811cf0c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 811cc68:	4b1d      	ldr	r3, [pc, #116]	@ (811cce0 <tcp_process+0x8c4>)
 811cc6a:	781b      	ldrb	r3, [r3, #0]
 811cc6c:	f003 0310 	and.w	r3, r3, #16
 811cc70:	2b00      	cmp	r3, #0
 811cc72:	d02f      	beq.n	811ccd4 <tcp_process+0x8b8>
 811cc74:	687b      	ldr	r3, [r7, #4]
 811cc76:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 811cc78:	4b1a      	ldr	r3, [pc, #104]	@ (811cce4 <tcp_process+0x8c8>)
 811cc7a:	681b      	ldr	r3, [r3, #0]
 811cc7c:	429a      	cmp	r2, r3
 811cc7e:	d129      	bne.n	811ccd4 <tcp_process+0x8b8>
 811cc80:	687b      	ldr	r3, [r7, #4]
 811cc82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811cc84:	2b00      	cmp	r3, #0
 811cc86:	d125      	bne.n	811ccd4 <tcp_process+0x8b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
 811cc88:	4b17      	ldr	r3, [pc, #92]	@ (811cce8 <tcp_process+0x8cc>)
 811cc8a:	691b      	ldr	r3, [r3, #16]
 811cc8c:	881b      	ldrh	r3, [r3, #0]
 811cc8e:	b29b      	uxth	r3, r3
 811cc90:	4619      	mov	r1, r3
 811cc92:	4b15      	ldr	r3, [pc, #84]	@ (811cce8 <tcp_process+0x8cc>)
 811cc94:	691b      	ldr	r3, [r3, #16]
 811cc96:	885b      	ldrh	r3, [r3, #2]
 811cc98:	b29b      	uxth	r3, r3
 811cc9a:	461a      	mov	r2, r3
 811cc9c:	4817      	ldr	r0, [pc, #92]	@ (811ccfc <tcp_process+0x8e0>)
 811cc9e:	f005 fae1 	bl	8122264 <iprintf>
 811cca2:	200d      	movs	r0, #13
 811cca4:	f005 faf0 	bl	8122288 <putchar>
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 811cca8:	4b15      	ldr	r3, [pc, #84]	@ (811cd00 <tcp_process+0x8e4>)
 811ccaa:	781b      	ldrb	r3, [r3, #0]
 811ccac:	f043 0310 	orr.w	r3, r3, #16
 811ccb0:	b2da      	uxtb	r2, r3
 811ccb2:	4b13      	ldr	r3, [pc, #76]	@ (811cd00 <tcp_process+0x8e4>)
 811ccb4:	701a      	strb	r2, [r3, #0]
      }
      break;
 811ccb6:	e00d      	b.n	811ccd4 <tcp_process+0x8b8>
    default:
      break;
 811ccb8:	bf00      	nop
 811ccba:	e00c      	b.n	811ccd6 <tcp_process+0x8ba>
      break;
 811ccbc:	bf00      	nop
 811ccbe:	e00a      	b.n	811ccd6 <tcp_process+0x8ba>
      break;
 811ccc0:	bf00      	nop
 811ccc2:	e008      	b.n	811ccd6 <tcp_process+0x8ba>
      break;
 811ccc4:	bf00      	nop
 811ccc6:	e006      	b.n	811ccd6 <tcp_process+0x8ba>
      break;
 811ccc8:	bf00      	nop
 811ccca:	e004      	b.n	811ccd6 <tcp_process+0x8ba>
      break;
 811cccc:	bf00      	nop
 811ccce:	e002      	b.n	811ccd6 <tcp_process+0x8ba>
      break;
 811ccd0:	bf00      	nop
 811ccd2:	e000      	b.n	811ccd6 <tcp_process+0x8ba>
      break;
 811ccd4:	bf00      	nop
  }
  return ERR_OK;
 811ccd6:	2300      	movs	r3, #0
}
 811ccd8:	4618      	mov	r0, r3
 811ccda:	3724      	adds	r7, #36	@ 0x24
 811ccdc:	46bd      	mov	sp, r7
 811ccde:	bd90      	pop	{r4, r7, pc}
 811cce0:	10011ea0 	.word	0x10011ea0
 811cce4:	10011e98 	.word	0x10011e98
 811cce8:	10011e70 	.word	0x10011e70
 811ccec:	081271f4 	.word	0x081271f4
 811ccf0:	10011e64 	.word	0x10011e64
 811ccf4:	10011e6c 	.word	0x10011e6c
 811ccf8:	10011e68 	.word	0x10011e68
 811ccfc:	08127220 	.word	0x08127220
 811cd00:	10011ea1 	.word	0x10011ea1

0811cd04 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 811cd04:	b590      	push	{r4, r7, lr}
 811cd06:	b085      	sub	sp, #20
 811cd08:	af00      	add	r7, sp, #0
 811cd0a:	6078      	str	r0, [r7, #4]
 811cd0c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 811cd0e:	687b      	ldr	r3, [r7, #4]
 811cd10:	2b00      	cmp	r3, #0
 811cd12:	d106      	bne.n	811cd22 <tcp_oos_insert_segment+0x1e>
 811cd14:	4b3b      	ldr	r3, [pc, #236]	@ (811ce04 <tcp_oos_insert_segment+0x100>)
 811cd16:	f240 421f 	movw	r2, #1055	@ 0x41f
 811cd1a:	493b      	ldr	r1, [pc, #236]	@ (811ce08 <tcp_oos_insert_segment+0x104>)
 811cd1c:	483b      	ldr	r0, [pc, #236]	@ (811ce0c <tcp_oos_insert_segment+0x108>)
 811cd1e:	f005 faa1 	bl	8122264 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 811cd22:	687b      	ldr	r3, [r7, #4]
 811cd24:	691b      	ldr	r3, [r3, #16]
 811cd26:	899b      	ldrh	r3, [r3, #12]
 811cd28:	b29b      	uxth	r3, r3
 811cd2a:	4618      	mov	r0, r3
 811cd2c:	f7f7 fa86 	bl	811423c <lwip_htons>
 811cd30:	4603      	mov	r3, r0
 811cd32:	b2db      	uxtb	r3, r3
 811cd34:	f003 0301 	and.w	r3, r3, #1
 811cd38:	2b00      	cmp	r3, #0
 811cd3a:	d028      	beq.n	811cd8e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 811cd3c:	6838      	ldr	r0, [r7, #0]
 811cd3e:	f7fe f843 	bl	811adc8 <tcp_segs_free>
    next = NULL;
 811cd42:	2300      	movs	r3, #0
 811cd44:	603b      	str	r3, [r7, #0]
 811cd46:	e056      	b.n	811cdf6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 811cd48:	683b      	ldr	r3, [r7, #0]
 811cd4a:	691b      	ldr	r3, [r3, #16]
 811cd4c:	899b      	ldrh	r3, [r3, #12]
 811cd4e:	b29b      	uxth	r3, r3
 811cd50:	4618      	mov	r0, r3
 811cd52:	f7f7 fa73 	bl	811423c <lwip_htons>
 811cd56:	4603      	mov	r3, r0
 811cd58:	b2db      	uxtb	r3, r3
 811cd5a:	f003 0301 	and.w	r3, r3, #1
 811cd5e:	2b00      	cmp	r3, #0
 811cd60:	d00d      	beq.n	811cd7e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 811cd62:	687b      	ldr	r3, [r7, #4]
 811cd64:	691b      	ldr	r3, [r3, #16]
 811cd66:	899b      	ldrh	r3, [r3, #12]
 811cd68:	b29c      	uxth	r4, r3
 811cd6a:	2001      	movs	r0, #1
 811cd6c:	f7f7 fa66 	bl	811423c <lwip_htons>
 811cd70:	4603      	mov	r3, r0
 811cd72:	461a      	mov	r2, r3
 811cd74:	687b      	ldr	r3, [r7, #4]
 811cd76:	691b      	ldr	r3, [r3, #16]
 811cd78:	4322      	orrs	r2, r4
 811cd7a:	b292      	uxth	r2, r2
 811cd7c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 811cd7e:	683b      	ldr	r3, [r7, #0]
 811cd80:	60fb      	str	r3, [r7, #12]
      next = next->next;
 811cd82:	683b      	ldr	r3, [r7, #0]
 811cd84:	681b      	ldr	r3, [r3, #0]
 811cd86:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 811cd88:	68f8      	ldr	r0, [r7, #12]
 811cd8a:	f7fe f832 	bl	811adf2 <tcp_seg_free>
    while (next &&
 811cd8e:	683b      	ldr	r3, [r7, #0]
 811cd90:	2b00      	cmp	r3, #0
 811cd92:	d00e      	beq.n	811cdb2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 811cd94:	687b      	ldr	r3, [r7, #4]
 811cd96:	891b      	ldrh	r3, [r3, #8]
 811cd98:	461a      	mov	r2, r3
 811cd9a:	4b1d      	ldr	r3, [pc, #116]	@ (811ce10 <tcp_oos_insert_segment+0x10c>)
 811cd9c:	681b      	ldr	r3, [r3, #0]
 811cd9e:	441a      	add	r2, r3
 811cda0:	683b      	ldr	r3, [r7, #0]
 811cda2:	691b      	ldr	r3, [r3, #16]
 811cda4:	685b      	ldr	r3, [r3, #4]
 811cda6:	6839      	ldr	r1, [r7, #0]
 811cda8:	8909      	ldrh	r1, [r1, #8]
 811cdaa:	440b      	add	r3, r1
 811cdac:	1ad3      	subs	r3, r2, r3
    while (next &&
 811cdae:	2b00      	cmp	r3, #0
 811cdb0:	daca      	bge.n	811cd48 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 811cdb2:	683b      	ldr	r3, [r7, #0]
 811cdb4:	2b00      	cmp	r3, #0
 811cdb6:	d01e      	beq.n	811cdf6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 811cdb8:	687b      	ldr	r3, [r7, #4]
 811cdba:	891b      	ldrh	r3, [r3, #8]
 811cdbc:	461a      	mov	r2, r3
 811cdbe:	4b14      	ldr	r3, [pc, #80]	@ (811ce10 <tcp_oos_insert_segment+0x10c>)
 811cdc0:	681b      	ldr	r3, [r3, #0]
 811cdc2:	441a      	add	r2, r3
 811cdc4:	683b      	ldr	r3, [r7, #0]
 811cdc6:	691b      	ldr	r3, [r3, #16]
 811cdc8:	685b      	ldr	r3, [r3, #4]
 811cdca:	1ad3      	subs	r3, r2, r3
    if (next &&
 811cdcc:	2b00      	cmp	r3, #0
 811cdce:	dd12      	ble.n	811cdf6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 811cdd0:	683b      	ldr	r3, [r7, #0]
 811cdd2:	691b      	ldr	r3, [r3, #16]
 811cdd4:	685b      	ldr	r3, [r3, #4]
 811cdd6:	b29a      	uxth	r2, r3
 811cdd8:	4b0d      	ldr	r3, [pc, #52]	@ (811ce10 <tcp_oos_insert_segment+0x10c>)
 811cdda:	681b      	ldr	r3, [r3, #0]
 811cddc:	b29b      	uxth	r3, r3
 811cdde:	1ad3      	subs	r3, r2, r3
 811cde0:	b29a      	uxth	r2, r3
 811cde2:	687b      	ldr	r3, [r7, #4]
 811cde4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 811cde6:	687b      	ldr	r3, [r7, #4]
 811cde8:	685a      	ldr	r2, [r3, #4]
 811cdea:	687b      	ldr	r3, [r7, #4]
 811cdec:	891b      	ldrh	r3, [r3, #8]
 811cdee:	4619      	mov	r1, r3
 811cdf0:	4610      	mov	r0, r2
 811cdf2:	f7fc f83f 	bl	8118e74 <pbuf_realloc>
    }
  }
  cseg->next = next;
 811cdf6:	687b      	ldr	r3, [r7, #4]
 811cdf8:	683a      	ldr	r2, [r7, #0]
 811cdfa:	601a      	str	r2, [r3, #0]
}
 811cdfc:	bf00      	nop
 811cdfe:	3714      	adds	r7, #20
 811ce00:	46bd      	mov	sp, r7
 811ce02:	bd90      	pop	{r4, r7, pc}
 811ce04:	08126dc8 	.word	0x08126dc8
 811ce08:	08127250 	.word	0x08127250
 811ce0c:	08126e54 	.word	0x08126e54
 811ce10:	10011e94 	.word	0x10011e94

0811ce14 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 811ce14:	b5b0      	push	{r4, r5, r7, lr}
 811ce16:	b086      	sub	sp, #24
 811ce18:	af00      	add	r7, sp, #0
 811ce1a:	60f8      	str	r0, [r7, #12]
 811ce1c:	60b9      	str	r1, [r7, #8]
 811ce1e:	607a      	str	r2, [r7, #4]
 811ce20:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 811ce22:	e03e      	b.n	811cea2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 811ce24:	68bb      	ldr	r3, [r7, #8]
 811ce26:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 811ce28:	68bb      	ldr	r3, [r7, #8]
 811ce2a:	681b      	ldr	r3, [r3, #0]
 811ce2c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 811ce2e:	697b      	ldr	r3, [r7, #20]
 811ce30:	685b      	ldr	r3, [r3, #4]
 811ce32:	4618      	mov	r0, r3
 811ce34:	f7fc fa30 	bl	8119298 <pbuf_clen>
 811ce38:	4603      	mov	r3, r0
 811ce3a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 811ce3c:	68fb      	ldr	r3, [r7, #12]
 811ce3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811ce42:	8a7a      	ldrh	r2, [r7, #18]
 811ce44:	429a      	cmp	r2, r3
 811ce46:	d906      	bls.n	811ce56 <tcp_free_acked_segments+0x42>
 811ce48:	4b2a      	ldr	r3, [pc, #168]	@ (811cef4 <tcp_free_acked_segments+0xe0>)
 811ce4a:	f240 4257 	movw	r2, #1111	@ 0x457
 811ce4e:	492a      	ldr	r1, [pc, #168]	@ (811cef8 <tcp_free_acked_segments+0xe4>)
 811ce50:	482a      	ldr	r0, [pc, #168]	@ (811cefc <tcp_free_acked_segments+0xe8>)
 811ce52:	f005 fa07 	bl	8122264 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 811ce56:	68fb      	ldr	r3, [r7, #12]
 811ce58:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 811ce5c:	8a7b      	ldrh	r3, [r7, #18]
 811ce5e:	1ad3      	subs	r3, r2, r3
 811ce60:	b29a      	uxth	r2, r3
 811ce62:	68fb      	ldr	r3, [r7, #12]
 811ce64:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 811ce68:	697b      	ldr	r3, [r7, #20]
 811ce6a:	891a      	ldrh	r2, [r3, #8]
 811ce6c:	4b24      	ldr	r3, [pc, #144]	@ (811cf00 <tcp_free_acked_segments+0xec>)
 811ce6e:	881b      	ldrh	r3, [r3, #0]
 811ce70:	4413      	add	r3, r2
 811ce72:	b29a      	uxth	r2, r3
 811ce74:	4b22      	ldr	r3, [pc, #136]	@ (811cf00 <tcp_free_acked_segments+0xec>)
 811ce76:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 811ce78:	6978      	ldr	r0, [r7, #20]
 811ce7a:	f7fd ffba 	bl	811adf2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 811ce7e:	68fb      	ldr	r3, [r7, #12]
 811ce80:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811ce84:	2b00      	cmp	r3, #0
 811ce86:	d00c      	beq.n	811cea2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 811ce88:	68bb      	ldr	r3, [r7, #8]
 811ce8a:	2b00      	cmp	r3, #0
 811ce8c:	d109      	bne.n	811cea2 <tcp_free_acked_segments+0x8e>
 811ce8e:	683b      	ldr	r3, [r7, #0]
 811ce90:	2b00      	cmp	r3, #0
 811ce92:	d106      	bne.n	811cea2 <tcp_free_acked_segments+0x8e>
 811ce94:	4b17      	ldr	r3, [pc, #92]	@ (811cef4 <tcp_free_acked_segments+0xe0>)
 811ce96:	f240 4261 	movw	r2, #1121	@ 0x461
 811ce9a:	491a      	ldr	r1, [pc, #104]	@ (811cf04 <tcp_free_acked_segments+0xf0>)
 811ce9c:	4817      	ldr	r0, [pc, #92]	@ (811cefc <tcp_free_acked_segments+0xe8>)
 811ce9e:	f005 f9e1 	bl	8122264 <iprintf>
  while (seg_list != NULL &&
 811cea2:	68bb      	ldr	r3, [r7, #8]
 811cea4:	2b00      	cmp	r3, #0
 811cea6:	d020      	beq.n	811ceea <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 811cea8:	68bb      	ldr	r3, [r7, #8]
 811ceaa:	691b      	ldr	r3, [r3, #16]
 811ceac:	685b      	ldr	r3, [r3, #4]
 811ceae:	4618      	mov	r0, r3
 811ceb0:	f7f7 f9d9 	bl	8114266 <lwip_htonl>
 811ceb4:	4604      	mov	r4, r0
 811ceb6:	68bb      	ldr	r3, [r7, #8]
 811ceb8:	891b      	ldrh	r3, [r3, #8]
 811ceba:	461d      	mov	r5, r3
 811cebc:	68bb      	ldr	r3, [r7, #8]
 811cebe:	691b      	ldr	r3, [r3, #16]
 811cec0:	899b      	ldrh	r3, [r3, #12]
 811cec2:	b29b      	uxth	r3, r3
 811cec4:	4618      	mov	r0, r3
 811cec6:	f7f7 f9b9 	bl	811423c <lwip_htons>
 811ceca:	4603      	mov	r3, r0
 811cecc:	b2db      	uxtb	r3, r3
 811cece:	f003 0303 	and.w	r3, r3, #3
 811ced2:	2b00      	cmp	r3, #0
 811ced4:	d001      	beq.n	811ceda <tcp_free_acked_segments+0xc6>
 811ced6:	2301      	movs	r3, #1
 811ced8:	e000      	b.n	811cedc <tcp_free_acked_segments+0xc8>
 811ceda:	2300      	movs	r3, #0
 811cedc:	442b      	add	r3, r5
 811cede:	18e2      	adds	r2, r4, r3
 811cee0:	4b09      	ldr	r3, [pc, #36]	@ (811cf08 <tcp_free_acked_segments+0xf4>)
 811cee2:	681b      	ldr	r3, [r3, #0]
 811cee4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 811cee6:	2b00      	cmp	r3, #0
 811cee8:	dd9c      	ble.n	811ce24 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 811ceea:	68bb      	ldr	r3, [r7, #8]
}
 811ceec:	4618      	mov	r0, r3
 811ceee:	3718      	adds	r7, #24
 811cef0:	46bd      	mov	sp, r7
 811cef2:	bdb0      	pop	{r4, r5, r7, pc}
 811cef4:	08126dc8 	.word	0x08126dc8
 811cef8:	08127278 	.word	0x08127278
 811cefc:	08126e54 	.word	0x08126e54
 811cf00:	10011e9c 	.word	0x10011e9c
 811cf04:	081272a0 	.word	0x081272a0
 811cf08:	10011e98 	.word	0x10011e98

0811cf0c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 811cf0c:	b5b0      	push	{r4, r5, r7, lr}
 811cf0e:	b094      	sub	sp, #80	@ 0x50
 811cf10:	af00      	add	r7, sp, #0
 811cf12:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 811cf14:	2300      	movs	r3, #0
 811cf16:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 811cf18:	687b      	ldr	r3, [r7, #4]
 811cf1a:	2b00      	cmp	r3, #0
 811cf1c:	d106      	bne.n	811cf2c <tcp_receive+0x20>
 811cf1e:	4b91      	ldr	r3, [pc, #580]	@ (811d164 <tcp_receive+0x258>)
 811cf20:	f240 427b 	movw	r2, #1147	@ 0x47b
 811cf24:	4990      	ldr	r1, [pc, #576]	@ (811d168 <tcp_receive+0x25c>)
 811cf26:	4891      	ldr	r0, [pc, #580]	@ (811d16c <tcp_receive+0x260>)
 811cf28:	f005 f99c 	bl	8122264 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 811cf2c:	687b      	ldr	r3, [r7, #4]
 811cf2e:	7d1b      	ldrb	r3, [r3, #20]
 811cf30:	2b03      	cmp	r3, #3
 811cf32:	d806      	bhi.n	811cf42 <tcp_receive+0x36>
 811cf34:	4b8b      	ldr	r3, [pc, #556]	@ (811d164 <tcp_receive+0x258>)
 811cf36:	f240 427c 	movw	r2, #1148	@ 0x47c
 811cf3a:	498d      	ldr	r1, [pc, #564]	@ (811d170 <tcp_receive+0x264>)
 811cf3c:	488b      	ldr	r0, [pc, #556]	@ (811d16c <tcp_receive+0x260>)
 811cf3e:	f005 f991 	bl	8122264 <iprintf>

  if (flags & TCP_ACK) {
 811cf42:	4b8c      	ldr	r3, [pc, #560]	@ (811d174 <tcp_receive+0x268>)
 811cf44:	781b      	ldrb	r3, [r3, #0]
 811cf46:	f003 0310 	and.w	r3, r3, #16
 811cf4a:	2b00      	cmp	r3, #0
 811cf4c:	f000 8264 	beq.w	811d418 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 811cf50:	687b      	ldr	r3, [r7, #4]
 811cf52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811cf56:	461a      	mov	r2, r3
 811cf58:	687b      	ldr	r3, [r7, #4]
 811cf5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 811cf5c:	4413      	add	r3, r2
 811cf5e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 811cf60:	687b      	ldr	r3, [r7, #4]
 811cf62:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 811cf64:	4b84      	ldr	r3, [pc, #528]	@ (811d178 <tcp_receive+0x26c>)
 811cf66:	681b      	ldr	r3, [r3, #0]
 811cf68:	1ad3      	subs	r3, r2, r3
 811cf6a:	2b00      	cmp	r3, #0
 811cf6c:	db1b      	blt.n	811cfa6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 811cf6e:	687b      	ldr	r3, [r7, #4]
 811cf70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 811cf72:	4b81      	ldr	r3, [pc, #516]	@ (811d178 <tcp_receive+0x26c>)
 811cf74:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 811cf76:	429a      	cmp	r2, r3
 811cf78:	d106      	bne.n	811cf88 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 811cf7a:	687b      	ldr	r3, [r7, #4]
 811cf7c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 811cf7e:	4b7f      	ldr	r3, [pc, #508]	@ (811d17c <tcp_receive+0x270>)
 811cf80:	681b      	ldr	r3, [r3, #0]
 811cf82:	1ad3      	subs	r3, r2, r3
 811cf84:	2b00      	cmp	r3, #0
 811cf86:	db0e      	blt.n	811cfa6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 811cf88:	687b      	ldr	r3, [r7, #4]
 811cf8a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 811cf8c:	4b7b      	ldr	r3, [pc, #492]	@ (811d17c <tcp_receive+0x270>)
 811cf8e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 811cf90:	429a      	cmp	r2, r3
 811cf92:	d125      	bne.n	811cfe0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 811cf94:	4b7a      	ldr	r3, [pc, #488]	@ (811d180 <tcp_receive+0x274>)
 811cf96:	681b      	ldr	r3, [r3, #0]
 811cf98:	89db      	ldrh	r3, [r3, #14]
 811cf9a:	b29a      	uxth	r2, r3
 811cf9c:	687b      	ldr	r3, [r7, #4]
 811cf9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811cfa2:	429a      	cmp	r2, r3
 811cfa4:	d91c      	bls.n	811cfe0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 811cfa6:	4b76      	ldr	r3, [pc, #472]	@ (811d180 <tcp_receive+0x274>)
 811cfa8:	681b      	ldr	r3, [r3, #0]
 811cfaa:	89db      	ldrh	r3, [r3, #14]
 811cfac:	b29a      	uxth	r2, r3
 811cfae:	687b      	ldr	r3, [r7, #4]
 811cfb0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 811cfb4:	687b      	ldr	r3, [r7, #4]
 811cfb6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 811cfba:	687b      	ldr	r3, [r7, #4]
 811cfbc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811cfc0:	429a      	cmp	r2, r3
 811cfc2:	d205      	bcs.n	811cfd0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 811cfc4:	687b      	ldr	r3, [r7, #4]
 811cfc6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 811cfca:	687b      	ldr	r3, [r7, #4]
 811cfcc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 811cfd0:	4b69      	ldr	r3, [pc, #420]	@ (811d178 <tcp_receive+0x26c>)
 811cfd2:	681a      	ldr	r2, [r3, #0]
 811cfd4:	687b      	ldr	r3, [r7, #4]
 811cfd6:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 811cfd8:	4b68      	ldr	r3, [pc, #416]	@ (811d17c <tcp_receive+0x270>)
 811cfda:	681a      	ldr	r2, [r3, #0]
 811cfdc:	687b      	ldr	r3, [r7, #4]
 811cfde:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 811cfe0:	4b66      	ldr	r3, [pc, #408]	@ (811d17c <tcp_receive+0x270>)
 811cfe2:	681a      	ldr	r2, [r3, #0]
 811cfe4:	687b      	ldr	r3, [r7, #4]
 811cfe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811cfe8:	1ad3      	subs	r3, r2, r3
 811cfea:	2b00      	cmp	r3, #0
 811cfec:	dc58      	bgt.n	811d0a0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 811cfee:	4b65      	ldr	r3, [pc, #404]	@ (811d184 <tcp_receive+0x278>)
 811cff0:	881b      	ldrh	r3, [r3, #0]
 811cff2:	2b00      	cmp	r3, #0
 811cff4:	d14b      	bne.n	811d08e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 811cff6:	687b      	ldr	r3, [r7, #4]
 811cff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 811cffa:	687a      	ldr	r2, [r7, #4]
 811cffc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 811d000:	4413      	add	r3, r2
 811d002:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 811d004:	429a      	cmp	r2, r3
 811d006:	d142      	bne.n	811d08e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 811d008:	687b      	ldr	r3, [r7, #4]
 811d00a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 811d00e:	2b00      	cmp	r3, #0
 811d010:	db3d      	blt.n	811d08e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 811d012:	687b      	ldr	r3, [r7, #4]
 811d014:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 811d016:	4b59      	ldr	r3, [pc, #356]	@ (811d17c <tcp_receive+0x270>)
 811d018:	681b      	ldr	r3, [r3, #0]
 811d01a:	429a      	cmp	r2, r3
 811d01c:	d137      	bne.n	811d08e <tcp_receive+0x182>
              found_dupack = 1;
 811d01e:	2301      	movs	r3, #1
 811d020:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 811d022:	687b      	ldr	r3, [r7, #4]
 811d024:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 811d028:	2bff      	cmp	r3, #255	@ 0xff
 811d02a:	d007      	beq.n	811d03c <tcp_receive+0x130>
                ++pcb->dupacks;
 811d02c:	687b      	ldr	r3, [r7, #4]
 811d02e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 811d032:	3301      	adds	r3, #1
 811d034:	b2da      	uxtb	r2, r3
 811d036:	687b      	ldr	r3, [r7, #4]
 811d038:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 811d03c:	687b      	ldr	r3, [r7, #4]
 811d03e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 811d042:	2b03      	cmp	r3, #3
 811d044:	d91b      	bls.n	811d07e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 811d046:	687b      	ldr	r3, [r7, #4]
 811d048:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811d04c:	687b      	ldr	r3, [r7, #4]
 811d04e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811d050:	4413      	add	r3, r2
 811d052:	b29a      	uxth	r2, r3
 811d054:	687b      	ldr	r3, [r7, #4]
 811d056:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 811d05a:	429a      	cmp	r2, r3
 811d05c:	d30a      	bcc.n	811d074 <tcp_receive+0x168>
 811d05e:	687b      	ldr	r3, [r7, #4]
 811d060:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811d064:	687b      	ldr	r3, [r7, #4]
 811d066:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811d068:	4413      	add	r3, r2
 811d06a:	b29a      	uxth	r2, r3
 811d06c:	687b      	ldr	r3, [r7, #4]
 811d06e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 811d072:	e004      	b.n	811d07e <tcp_receive+0x172>
 811d074:	687b      	ldr	r3, [r7, #4]
 811d076:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811d07a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 811d07e:	687b      	ldr	r3, [r7, #4]
 811d080:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 811d084:	2b02      	cmp	r3, #2
 811d086:	d902      	bls.n	811d08e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 811d088:	6878      	ldr	r0, [r7, #4]
 811d08a:	f002 fbaf 	bl	811f7ec <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 811d08e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 811d090:	2b00      	cmp	r3, #0
 811d092:	f040 8161 	bne.w	811d358 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 811d096:	687b      	ldr	r3, [r7, #4]
 811d098:	2200      	movs	r2, #0
 811d09a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 811d09e:	e15b      	b.n	811d358 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 811d0a0:	4b36      	ldr	r3, [pc, #216]	@ (811d17c <tcp_receive+0x270>)
 811d0a2:	681a      	ldr	r2, [r3, #0]
 811d0a4:	687b      	ldr	r3, [r7, #4]
 811d0a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811d0a8:	1ad3      	subs	r3, r2, r3
 811d0aa:	3b01      	subs	r3, #1
 811d0ac:	2b00      	cmp	r3, #0
 811d0ae:	f2c0 814e 	blt.w	811d34e <tcp_receive+0x442>
 811d0b2:	4b32      	ldr	r3, [pc, #200]	@ (811d17c <tcp_receive+0x270>)
 811d0b4:	681a      	ldr	r2, [r3, #0]
 811d0b6:	687b      	ldr	r3, [r7, #4]
 811d0b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 811d0ba:	1ad3      	subs	r3, r2, r3
 811d0bc:	2b00      	cmp	r3, #0
 811d0be:	f300 8146 	bgt.w	811d34e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 811d0c2:	687b      	ldr	r3, [r7, #4]
 811d0c4:	8b5b      	ldrh	r3, [r3, #26]
 811d0c6:	f003 0304 	and.w	r3, r3, #4
 811d0ca:	2b00      	cmp	r3, #0
 811d0cc:	d010      	beq.n	811d0f0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 811d0ce:	687b      	ldr	r3, [r7, #4]
 811d0d0:	8b5b      	ldrh	r3, [r3, #26]
 811d0d2:	f023 0304 	bic.w	r3, r3, #4
 811d0d6:	b29a      	uxth	r2, r3
 811d0d8:	687b      	ldr	r3, [r7, #4]
 811d0da:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 811d0dc:	687b      	ldr	r3, [r7, #4]
 811d0de:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 811d0e2:	687b      	ldr	r3, [r7, #4]
 811d0e4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 811d0e8:	687b      	ldr	r3, [r7, #4]
 811d0ea:	2200      	movs	r2, #0
 811d0ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 811d0f0:	687b      	ldr	r3, [r7, #4]
 811d0f2:	2200      	movs	r2, #0
 811d0f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 811d0f8:	687b      	ldr	r3, [r7, #4]
 811d0fa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 811d0fe:	10db      	asrs	r3, r3, #3
 811d100:	b21b      	sxth	r3, r3
 811d102:	b29a      	uxth	r2, r3
 811d104:	687b      	ldr	r3, [r7, #4]
 811d106:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 811d10a:	b29b      	uxth	r3, r3
 811d10c:	4413      	add	r3, r2
 811d10e:	b29b      	uxth	r3, r3
 811d110:	b21a      	sxth	r2, r3
 811d112:	687b      	ldr	r3, [r7, #4]
 811d114:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 811d118:	4b18      	ldr	r3, [pc, #96]	@ (811d17c <tcp_receive+0x270>)
 811d11a:	681b      	ldr	r3, [r3, #0]
 811d11c:	b29a      	uxth	r2, r3
 811d11e:	687b      	ldr	r3, [r7, #4]
 811d120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811d122:	b29b      	uxth	r3, r3
 811d124:	1ad3      	subs	r3, r2, r3
 811d126:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 811d128:	687b      	ldr	r3, [r7, #4]
 811d12a:	2200      	movs	r2, #0
 811d12c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 811d130:	4b12      	ldr	r3, [pc, #72]	@ (811d17c <tcp_receive+0x270>)
 811d132:	681a      	ldr	r2, [r3, #0]
 811d134:	687b      	ldr	r3, [r7, #4]
 811d136:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 811d138:	687b      	ldr	r3, [r7, #4]
 811d13a:	7d1b      	ldrb	r3, [r3, #20]
 811d13c:	2b03      	cmp	r3, #3
 811d13e:	f240 8097 	bls.w	811d270 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 811d142:	687b      	ldr	r3, [r7, #4]
 811d144:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811d148:	687b      	ldr	r3, [r7, #4]
 811d14a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 811d14e:	429a      	cmp	r2, r3
 811d150:	d245      	bcs.n	811d1de <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 811d152:	687b      	ldr	r3, [r7, #4]
 811d154:	8b5b      	ldrh	r3, [r3, #26]
 811d156:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 811d15a:	2b00      	cmp	r3, #0
 811d15c:	d014      	beq.n	811d188 <tcp_receive+0x27c>
 811d15e:	2301      	movs	r3, #1
 811d160:	e013      	b.n	811d18a <tcp_receive+0x27e>
 811d162:	bf00      	nop
 811d164:	08126dc8 	.word	0x08126dc8
 811d168:	081272c0 	.word	0x081272c0
 811d16c:	08126e54 	.word	0x08126e54
 811d170:	081272dc 	.word	0x081272dc
 811d174:	10011ea0 	.word	0x10011ea0
 811d178:	10011e94 	.word	0x10011e94
 811d17c:	10011e98 	.word	0x10011e98
 811d180:	10011e84 	.word	0x10011e84
 811d184:	10011e9e 	.word	0x10011e9e
 811d188:	2302      	movs	r3, #2
 811d18a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 811d18e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 811d192:	b29a      	uxth	r2, r3
 811d194:	687b      	ldr	r3, [r7, #4]
 811d196:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811d198:	fb12 f303 	smulbb	r3, r2, r3
 811d19c:	b29b      	uxth	r3, r3
 811d19e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 811d1a0:	4293      	cmp	r3, r2
 811d1a2:	bf28      	it	cs
 811d1a4:	4613      	movcs	r3, r2
 811d1a6:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 811d1a8:	687b      	ldr	r3, [r7, #4]
 811d1aa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811d1ae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 811d1b0:	4413      	add	r3, r2
 811d1b2:	b29a      	uxth	r2, r3
 811d1b4:	687b      	ldr	r3, [r7, #4]
 811d1b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 811d1ba:	429a      	cmp	r2, r3
 811d1bc:	d309      	bcc.n	811d1d2 <tcp_receive+0x2c6>
 811d1be:	687b      	ldr	r3, [r7, #4]
 811d1c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811d1c4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 811d1c6:	4413      	add	r3, r2
 811d1c8:	b29a      	uxth	r2, r3
 811d1ca:	687b      	ldr	r3, [r7, #4]
 811d1cc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 811d1d0:	e04e      	b.n	811d270 <tcp_receive+0x364>
 811d1d2:	687b      	ldr	r3, [r7, #4]
 811d1d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811d1d8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 811d1dc:	e048      	b.n	811d270 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 811d1de:	687b      	ldr	r3, [r7, #4]
 811d1e0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 811d1e4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 811d1e6:	4413      	add	r3, r2
 811d1e8:	b29a      	uxth	r2, r3
 811d1ea:	687b      	ldr	r3, [r7, #4]
 811d1ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 811d1f0:	429a      	cmp	r2, r3
 811d1f2:	d309      	bcc.n	811d208 <tcp_receive+0x2fc>
 811d1f4:	687b      	ldr	r3, [r7, #4]
 811d1f6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 811d1fa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 811d1fc:	4413      	add	r3, r2
 811d1fe:	b29a      	uxth	r2, r3
 811d200:	687b      	ldr	r3, [r7, #4]
 811d202:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 811d206:	e004      	b.n	811d212 <tcp_receive+0x306>
 811d208:	687b      	ldr	r3, [r7, #4]
 811d20a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811d20e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 811d212:	687b      	ldr	r3, [r7, #4]
 811d214:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 811d218:	687b      	ldr	r3, [r7, #4]
 811d21a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 811d21e:	429a      	cmp	r2, r3
 811d220:	d326      	bcc.n	811d270 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 811d222:	687b      	ldr	r3, [r7, #4]
 811d224:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 811d228:	687b      	ldr	r3, [r7, #4]
 811d22a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 811d22e:	1ad3      	subs	r3, r2, r3
 811d230:	b29a      	uxth	r2, r3
 811d232:	687b      	ldr	r3, [r7, #4]
 811d234:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 811d238:	687b      	ldr	r3, [r7, #4]
 811d23a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811d23e:	687b      	ldr	r3, [r7, #4]
 811d240:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811d242:	4413      	add	r3, r2
 811d244:	b29a      	uxth	r2, r3
 811d246:	687b      	ldr	r3, [r7, #4]
 811d248:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 811d24c:	429a      	cmp	r2, r3
 811d24e:	d30a      	bcc.n	811d266 <tcp_receive+0x35a>
 811d250:	687b      	ldr	r3, [r7, #4]
 811d252:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811d256:	687b      	ldr	r3, [r7, #4]
 811d258:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811d25a:	4413      	add	r3, r2
 811d25c:	b29a      	uxth	r2, r3
 811d25e:	687b      	ldr	r3, [r7, #4]
 811d260:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 811d264:	e004      	b.n	811d270 <tcp_receive+0x364>
 811d266:	687b      	ldr	r3, [r7, #4]
 811d268:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811d26c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 811d270:	687b      	ldr	r3, [r7, #4]
 811d272:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 811d274:	687b      	ldr	r3, [r7, #4]
 811d276:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811d278:	4a98      	ldr	r2, [pc, #608]	@ (811d4dc <tcp_receive+0x5d0>)
 811d27a:	6878      	ldr	r0, [r7, #4]
 811d27c:	f7ff fdca 	bl	811ce14 <tcp_free_acked_segments>
 811d280:	4602      	mov	r2, r0
 811d282:	687b      	ldr	r3, [r7, #4]
 811d284:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 811d286:	687b      	ldr	r3, [r7, #4]
 811d288:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 811d28a:	687b      	ldr	r3, [r7, #4]
 811d28c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811d28e:	4a94      	ldr	r2, [pc, #592]	@ (811d4e0 <tcp_receive+0x5d4>)
 811d290:	6878      	ldr	r0, [r7, #4]
 811d292:	f7ff fdbf 	bl	811ce14 <tcp_free_acked_segments>
 811d296:	4602      	mov	r2, r0
 811d298:	687b      	ldr	r3, [r7, #4]
 811d29a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 811d29c:	687b      	ldr	r3, [r7, #4]
 811d29e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811d2a0:	2b00      	cmp	r3, #0
 811d2a2:	d104      	bne.n	811d2ae <tcp_receive+0x3a2>
        pcb->rtime = -1;
 811d2a4:	687b      	ldr	r3, [r7, #4]
 811d2a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 811d2aa:	861a      	strh	r2, [r3, #48]	@ 0x30
 811d2ac:	e002      	b.n	811d2b4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 811d2ae:	687b      	ldr	r3, [r7, #4]
 811d2b0:	2200      	movs	r2, #0
 811d2b2:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 811d2b4:	687b      	ldr	r3, [r7, #4]
 811d2b6:	2200      	movs	r2, #0
 811d2b8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 811d2ba:	687b      	ldr	r3, [r7, #4]
 811d2bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811d2be:	2b00      	cmp	r3, #0
 811d2c0:	d103      	bne.n	811d2ca <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 811d2c2:	687b      	ldr	r3, [r7, #4]
 811d2c4:	2200      	movs	r2, #0
 811d2c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 811d2ca:	687b      	ldr	r3, [r7, #4]
 811d2cc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 811d2d0:	4b84      	ldr	r3, [pc, #528]	@ (811d4e4 <tcp_receive+0x5d8>)
 811d2d2:	881b      	ldrh	r3, [r3, #0]
 811d2d4:	4413      	add	r3, r2
 811d2d6:	b29a      	uxth	r2, r3
 811d2d8:	687b      	ldr	r3, [r7, #4]
 811d2da:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 811d2de:	687b      	ldr	r3, [r7, #4]
 811d2e0:	8b5b      	ldrh	r3, [r3, #26]
 811d2e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 811d2e6:	2b00      	cmp	r3, #0
 811d2e8:	d035      	beq.n	811d356 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 811d2ea:	687b      	ldr	r3, [r7, #4]
 811d2ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811d2ee:	2b00      	cmp	r3, #0
 811d2f0:	d118      	bne.n	811d324 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 811d2f2:	687b      	ldr	r3, [r7, #4]
 811d2f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811d2f6:	2b00      	cmp	r3, #0
 811d2f8:	d00c      	beq.n	811d314 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 811d2fa:	687b      	ldr	r3, [r7, #4]
 811d2fc:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 811d2fe:	687b      	ldr	r3, [r7, #4]
 811d300:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811d302:	691b      	ldr	r3, [r3, #16]
 811d304:	685b      	ldr	r3, [r3, #4]
 811d306:	4618      	mov	r0, r3
 811d308:	f7f6 ffad 	bl	8114266 <lwip_htonl>
 811d30c:	4603      	mov	r3, r0
 811d30e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 811d310:	2b00      	cmp	r3, #0
 811d312:	dc20      	bgt.n	811d356 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 811d314:	687b      	ldr	r3, [r7, #4]
 811d316:	8b5b      	ldrh	r3, [r3, #26]
 811d318:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 811d31c:	b29a      	uxth	r2, r3
 811d31e:	687b      	ldr	r3, [r7, #4]
 811d320:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 811d322:	e018      	b.n	811d356 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 811d324:	687b      	ldr	r3, [r7, #4]
 811d326:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 811d328:	687b      	ldr	r3, [r7, #4]
 811d32a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811d32c:	691b      	ldr	r3, [r3, #16]
 811d32e:	685b      	ldr	r3, [r3, #4]
 811d330:	4618      	mov	r0, r3
 811d332:	f7f6 ff98 	bl	8114266 <lwip_htonl>
 811d336:	4603      	mov	r3, r0
 811d338:	1ae3      	subs	r3, r4, r3
 811d33a:	2b00      	cmp	r3, #0
 811d33c:	dc0b      	bgt.n	811d356 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 811d33e:	687b      	ldr	r3, [r7, #4]
 811d340:	8b5b      	ldrh	r3, [r3, #26]
 811d342:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 811d346:	b29a      	uxth	r2, r3
 811d348:	687b      	ldr	r3, [r7, #4]
 811d34a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 811d34c:	e003      	b.n	811d356 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 811d34e:	6878      	ldr	r0, [r7, #4]
 811d350:	f002 fc3e 	bl	811fbd0 <tcp_send_empty_ack>
 811d354:	e000      	b.n	811d358 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 811d356:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 811d358:	687b      	ldr	r3, [r7, #4]
 811d35a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 811d35c:	2b00      	cmp	r3, #0
 811d35e:	d05b      	beq.n	811d418 <tcp_receive+0x50c>
 811d360:	687b      	ldr	r3, [r7, #4]
 811d362:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 811d364:	4b60      	ldr	r3, [pc, #384]	@ (811d4e8 <tcp_receive+0x5dc>)
 811d366:	681b      	ldr	r3, [r3, #0]
 811d368:	1ad3      	subs	r3, r2, r3
 811d36a:	2b00      	cmp	r3, #0
 811d36c:	da54      	bge.n	811d418 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 811d36e:	4b5f      	ldr	r3, [pc, #380]	@ (811d4ec <tcp_receive+0x5e0>)
 811d370:	681b      	ldr	r3, [r3, #0]
 811d372:	b29a      	uxth	r2, r3
 811d374:	687b      	ldr	r3, [r7, #4]
 811d376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 811d378:	b29b      	uxth	r3, r3
 811d37a:	1ad3      	subs	r3, r2, r3
 811d37c:	b29b      	uxth	r3, r3
 811d37e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 811d382:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 811d386:	687b      	ldr	r3, [r7, #4]
 811d388:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 811d38c:	10db      	asrs	r3, r3, #3
 811d38e:	b21b      	sxth	r3, r3
 811d390:	b29b      	uxth	r3, r3
 811d392:	1ad3      	subs	r3, r2, r3
 811d394:	b29b      	uxth	r3, r3
 811d396:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 811d39a:	687b      	ldr	r3, [r7, #4]
 811d39c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 811d3a0:	b29a      	uxth	r2, r3
 811d3a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 811d3a6:	4413      	add	r3, r2
 811d3a8:	b29b      	uxth	r3, r3
 811d3aa:	b21a      	sxth	r2, r3
 811d3ac:	687b      	ldr	r3, [r7, #4]
 811d3ae:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 811d3b0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 811d3b4:	2b00      	cmp	r3, #0
 811d3b6:	da05      	bge.n	811d3c4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 811d3b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 811d3bc:	425b      	negs	r3, r3
 811d3be:	b29b      	uxth	r3, r3
 811d3c0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 811d3c4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 811d3c8:	687b      	ldr	r3, [r7, #4]
 811d3ca:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 811d3ce:	109b      	asrs	r3, r3, #2
 811d3d0:	b21b      	sxth	r3, r3
 811d3d2:	b29b      	uxth	r3, r3
 811d3d4:	1ad3      	subs	r3, r2, r3
 811d3d6:	b29b      	uxth	r3, r3
 811d3d8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 811d3dc:	687b      	ldr	r3, [r7, #4]
 811d3de:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 811d3e2:	b29a      	uxth	r2, r3
 811d3e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 811d3e8:	4413      	add	r3, r2
 811d3ea:	b29b      	uxth	r3, r3
 811d3ec:	b21a      	sxth	r2, r3
 811d3ee:	687b      	ldr	r3, [r7, #4]
 811d3f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 811d3f2:	687b      	ldr	r3, [r7, #4]
 811d3f4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 811d3f8:	10db      	asrs	r3, r3, #3
 811d3fa:	b21b      	sxth	r3, r3
 811d3fc:	b29a      	uxth	r2, r3
 811d3fe:	687b      	ldr	r3, [r7, #4]
 811d400:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 811d404:	b29b      	uxth	r3, r3
 811d406:	4413      	add	r3, r2
 811d408:	b29b      	uxth	r3, r3
 811d40a:	b21a      	sxth	r2, r3
 811d40c:	687b      	ldr	r3, [r7, #4]
 811d40e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 811d412:	687b      	ldr	r3, [r7, #4]
 811d414:	2200      	movs	r2, #0
 811d416:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 811d418:	4b35      	ldr	r3, [pc, #212]	@ (811d4f0 <tcp_receive+0x5e4>)
 811d41a:	881b      	ldrh	r3, [r3, #0]
 811d41c:	2b00      	cmp	r3, #0
 811d41e:	f000 84df 	beq.w	811dde0 <tcp_receive+0xed4>
 811d422:	687b      	ldr	r3, [r7, #4]
 811d424:	7d1b      	ldrb	r3, [r3, #20]
 811d426:	2b06      	cmp	r3, #6
 811d428:	f200 84da 	bhi.w	811dde0 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 811d42c:	687b      	ldr	r3, [r7, #4]
 811d42e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811d430:	4b30      	ldr	r3, [pc, #192]	@ (811d4f4 <tcp_receive+0x5e8>)
 811d432:	681b      	ldr	r3, [r3, #0]
 811d434:	1ad3      	subs	r3, r2, r3
 811d436:	3b01      	subs	r3, #1
 811d438:	2b00      	cmp	r3, #0
 811d43a:	f2c0 808f 	blt.w	811d55c <tcp_receive+0x650>
 811d43e:	687b      	ldr	r3, [r7, #4]
 811d440:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811d442:	4b2b      	ldr	r3, [pc, #172]	@ (811d4f0 <tcp_receive+0x5e4>)
 811d444:	881b      	ldrh	r3, [r3, #0]
 811d446:	4619      	mov	r1, r3
 811d448:	4b2a      	ldr	r3, [pc, #168]	@ (811d4f4 <tcp_receive+0x5e8>)
 811d44a:	681b      	ldr	r3, [r3, #0]
 811d44c:	440b      	add	r3, r1
 811d44e:	1ad3      	subs	r3, r2, r3
 811d450:	3301      	adds	r3, #1
 811d452:	2b00      	cmp	r3, #0
 811d454:	f300 8082 	bgt.w	811d55c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 811d458:	4b27      	ldr	r3, [pc, #156]	@ (811d4f8 <tcp_receive+0x5ec>)
 811d45a:	685b      	ldr	r3, [r3, #4]
 811d45c:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 811d45e:	687b      	ldr	r3, [r7, #4]
 811d460:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811d462:	4b24      	ldr	r3, [pc, #144]	@ (811d4f4 <tcp_receive+0x5e8>)
 811d464:	681b      	ldr	r3, [r3, #0]
 811d466:	1ad3      	subs	r3, r2, r3
 811d468:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 811d46a:	4b23      	ldr	r3, [pc, #140]	@ (811d4f8 <tcp_receive+0x5ec>)
 811d46c:	685b      	ldr	r3, [r3, #4]
 811d46e:	2b00      	cmp	r3, #0
 811d470:	d106      	bne.n	811d480 <tcp_receive+0x574>
 811d472:	4b22      	ldr	r3, [pc, #136]	@ (811d4fc <tcp_receive+0x5f0>)
 811d474:	f240 5294 	movw	r2, #1428	@ 0x594
 811d478:	4921      	ldr	r1, [pc, #132]	@ (811d500 <tcp_receive+0x5f4>)
 811d47a:	4822      	ldr	r0, [pc, #136]	@ (811d504 <tcp_receive+0x5f8>)
 811d47c:	f004 fef2 	bl	8122264 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 811d480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811d482:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 811d486:	4293      	cmp	r3, r2
 811d488:	d906      	bls.n	811d498 <tcp_receive+0x58c>
 811d48a:	4b1c      	ldr	r3, [pc, #112]	@ (811d4fc <tcp_receive+0x5f0>)
 811d48c:	f240 5295 	movw	r2, #1429	@ 0x595
 811d490:	491d      	ldr	r1, [pc, #116]	@ (811d508 <tcp_receive+0x5fc>)
 811d492:	481c      	ldr	r0, [pc, #112]	@ (811d504 <tcp_receive+0x5f8>)
 811d494:	f004 fee6 	bl	8122264 <iprintf>
      off = (u16_t)off32;
 811d498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811d49a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 811d49e:	4b16      	ldr	r3, [pc, #88]	@ (811d4f8 <tcp_receive+0x5ec>)
 811d4a0:	685b      	ldr	r3, [r3, #4]
 811d4a2:	891b      	ldrh	r3, [r3, #8]
 811d4a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 811d4a8:	429a      	cmp	r2, r3
 811d4aa:	d906      	bls.n	811d4ba <tcp_receive+0x5ae>
 811d4ac:	4b13      	ldr	r3, [pc, #76]	@ (811d4fc <tcp_receive+0x5f0>)
 811d4ae:	f240 5297 	movw	r2, #1431	@ 0x597
 811d4b2:	4916      	ldr	r1, [pc, #88]	@ (811d50c <tcp_receive+0x600>)
 811d4b4:	4813      	ldr	r0, [pc, #76]	@ (811d504 <tcp_receive+0x5f8>)
 811d4b6:	f004 fed5 	bl	8122264 <iprintf>
      inseg.len -= off;
 811d4ba:	4b0f      	ldr	r3, [pc, #60]	@ (811d4f8 <tcp_receive+0x5ec>)
 811d4bc:	891a      	ldrh	r2, [r3, #8]
 811d4be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 811d4c2:	1ad3      	subs	r3, r2, r3
 811d4c4:	b29a      	uxth	r2, r3
 811d4c6:	4b0c      	ldr	r3, [pc, #48]	@ (811d4f8 <tcp_receive+0x5ec>)
 811d4c8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 811d4ca:	4b0b      	ldr	r3, [pc, #44]	@ (811d4f8 <tcp_receive+0x5ec>)
 811d4cc:	685b      	ldr	r3, [r3, #4]
 811d4ce:	891a      	ldrh	r2, [r3, #8]
 811d4d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 811d4d4:	1ad3      	subs	r3, r2, r3
 811d4d6:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 811d4d8:	e02a      	b.n	811d530 <tcp_receive+0x624>
 811d4da:	bf00      	nop
 811d4dc:	081272f8 	.word	0x081272f8
 811d4e0:	08127300 	.word	0x08127300
 811d4e4:	10011e9c 	.word	0x10011e9c
 811d4e8:	10011e98 	.word	0x10011e98
 811d4ec:	10011e58 	.word	0x10011e58
 811d4f0:	10011e9e 	.word	0x10011e9e
 811d4f4:	10011e94 	.word	0x10011e94
 811d4f8:	10011e70 	.word	0x10011e70
 811d4fc:	08126dc8 	.word	0x08126dc8
 811d500:	08127308 	.word	0x08127308
 811d504:	08126e54 	.word	0x08126e54
 811d508:	08127318 	.word	0x08127318
 811d50c:	08127328 	.word	0x08127328
        off -= p->len;
 811d510:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811d512:	895b      	ldrh	r3, [r3, #10]
 811d514:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 811d518:	1ad3      	subs	r3, r2, r3
 811d51a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 811d51e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811d520:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 811d522:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 811d524:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811d526:	2200      	movs	r2, #0
 811d528:	815a      	strh	r2, [r3, #10]
        p = p->next;
 811d52a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811d52c:	681b      	ldr	r3, [r3, #0]
 811d52e:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 811d530:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811d532:	895b      	ldrh	r3, [r3, #10]
 811d534:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 811d538:	429a      	cmp	r2, r3
 811d53a:	d8e9      	bhi.n	811d510 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 811d53c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 811d540:	4619      	mov	r1, r3
 811d542:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 811d544:	f7fb fd94 	bl	8119070 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 811d548:	687b      	ldr	r3, [r7, #4]
 811d54a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811d54c:	4a90      	ldr	r2, [pc, #576]	@ (811d790 <tcp_receive+0x884>)
 811d54e:	6013      	str	r3, [r2, #0]
 811d550:	4b90      	ldr	r3, [pc, #576]	@ (811d794 <tcp_receive+0x888>)
 811d552:	691b      	ldr	r3, [r3, #16]
 811d554:	4a8e      	ldr	r2, [pc, #568]	@ (811d790 <tcp_receive+0x884>)
 811d556:	6812      	ldr	r2, [r2, #0]
 811d558:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 811d55a:	e00d      	b.n	811d578 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 811d55c:	4b8c      	ldr	r3, [pc, #560]	@ (811d790 <tcp_receive+0x884>)
 811d55e:	681a      	ldr	r2, [r3, #0]
 811d560:	687b      	ldr	r3, [r7, #4]
 811d562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811d564:	1ad3      	subs	r3, r2, r3
 811d566:	2b00      	cmp	r3, #0
 811d568:	da06      	bge.n	811d578 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 811d56a:	687b      	ldr	r3, [r7, #4]
 811d56c:	8b5b      	ldrh	r3, [r3, #26]
 811d56e:	f043 0302 	orr.w	r3, r3, #2
 811d572:	b29a      	uxth	r2, r3
 811d574:	687b      	ldr	r3, [r7, #4]
 811d576:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 811d578:	4b85      	ldr	r3, [pc, #532]	@ (811d790 <tcp_receive+0x884>)
 811d57a:	681a      	ldr	r2, [r3, #0]
 811d57c:	687b      	ldr	r3, [r7, #4]
 811d57e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811d580:	1ad3      	subs	r3, r2, r3
 811d582:	2b00      	cmp	r3, #0
 811d584:	f2c0 8427 	blt.w	811ddd6 <tcp_receive+0xeca>
 811d588:	4b81      	ldr	r3, [pc, #516]	@ (811d790 <tcp_receive+0x884>)
 811d58a:	681a      	ldr	r2, [r3, #0]
 811d58c:	687b      	ldr	r3, [r7, #4]
 811d58e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811d590:	6879      	ldr	r1, [r7, #4]
 811d592:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 811d594:	440b      	add	r3, r1
 811d596:	1ad3      	subs	r3, r2, r3
 811d598:	3301      	adds	r3, #1
 811d59a:	2b00      	cmp	r3, #0
 811d59c:	f300 841b 	bgt.w	811ddd6 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 811d5a0:	687b      	ldr	r3, [r7, #4]
 811d5a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811d5a4:	4b7a      	ldr	r3, [pc, #488]	@ (811d790 <tcp_receive+0x884>)
 811d5a6:	681b      	ldr	r3, [r3, #0]
 811d5a8:	429a      	cmp	r2, r3
 811d5aa:	f040 8298 	bne.w	811dade <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 811d5ae:	4b79      	ldr	r3, [pc, #484]	@ (811d794 <tcp_receive+0x888>)
 811d5b0:	891c      	ldrh	r4, [r3, #8]
 811d5b2:	4b78      	ldr	r3, [pc, #480]	@ (811d794 <tcp_receive+0x888>)
 811d5b4:	691b      	ldr	r3, [r3, #16]
 811d5b6:	899b      	ldrh	r3, [r3, #12]
 811d5b8:	b29b      	uxth	r3, r3
 811d5ba:	4618      	mov	r0, r3
 811d5bc:	f7f6 fe3e 	bl	811423c <lwip_htons>
 811d5c0:	4603      	mov	r3, r0
 811d5c2:	b2db      	uxtb	r3, r3
 811d5c4:	f003 0303 	and.w	r3, r3, #3
 811d5c8:	2b00      	cmp	r3, #0
 811d5ca:	d001      	beq.n	811d5d0 <tcp_receive+0x6c4>
 811d5cc:	2301      	movs	r3, #1
 811d5ce:	e000      	b.n	811d5d2 <tcp_receive+0x6c6>
 811d5d0:	2300      	movs	r3, #0
 811d5d2:	4423      	add	r3, r4
 811d5d4:	b29a      	uxth	r2, r3
 811d5d6:	4b70      	ldr	r3, [pc, #448]	@ (811d798 <tcp_receive+0x88c>)
 811d5d8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 811d5da:	687b      	ldr	r3, [r7, #4]
 811d5dc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 811d5de:	4b6e      	ldr	r3, [pc, #440]	@ (811d798 <tcp_receive+0x88c>)
 811d5e0:	881b      	ldrh	r3, [r3, #0]
 811d5e2:	429a      	cmp	r2, r3
 811d5e4:	d274      	bcs.n	811d6d0 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 811d5e6:	4b6b      	ldr	r3, [pc, #428]	@ (811d794 <tcp_receive+0x888>)
 811d5e8:	691b      	ldr	r3, [r3, #16]
 811d5ea:	899b      	ldrh	r3, [r3, #12]
 811d5ec:	b29b      	uxth	r3, r3
 811d5ee:	4618      	mov	r0, r3
 811d5f0:	f7f6 fe24 	bl	811423c <lwip_htons>
 811d5f4:	4603      	mov	r3, r0
 811d5f6:	b2db      	uxtb	r3, r3
 811d5f8:	f003 0301 	and.w	r3, r3, #1
 811d5fc:	2b00      	cmp	r3, #0
 811d5fe:	d01e      	beq.n	811d63e <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 811d600:	4b64      	ldr	r3, [pc, #400]	@ (811d794 <tcp_receive+0x888>)
 811d602:	691b      	ldr	r3, [r3, #16]
 811d604:	899b      	ldrh	r3, [r3, #12]
 811d606:	b29b      	uxth	r3, r3
 811d608:	b21b      	sxth	r3, r3
 811d60a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 811d60e:	b21c      	sxth	r4, r3
 811d610:	4b60      	ldr	r3, [pc, #384]	@ (811d794 <tcp_receive+0x888>)
 811d612:	691b      	ldr	r3, [r3, #16]
 811d614:	899b      	ldrh	r3, [r3, #12]
 811d616:	b29b      	uxth	r3, r3
 811d618:	4618      	mov	r0, r3
 811d61a:	f7f6 fe0f 	bl	811423c <lwip_htons>
 811d61e:	4603      	mov	r3, r0
 811d620:	b2db      	uxtb	r3, r3
 811d622:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 811d626:	b29b      	uxth	r3, r3
 811d628:	4618      	mov	r0, r3
 811d62a:	f7f6 fe07 	bl	811423c <lwip_htons>
 811d62e:	4603      	mov	r3, r0
 811d630:	b21b      	sxth	r3, r3
 811d632:	4323      	orrs	r3, r4
 811d634:	b21a      	sxth	r2, r3
 811d636:	4b57      	ldr	r3, [pc, #348]	@ (811d794 <tcp_receive+0x888>)
 811d638:	691b      	ldr	r3, [r3, #16]
 811d63a:	b292      	uxth	r2, r2
 811d63c:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 811d63e:	687b      	ldr	r3, [r7, #4]
 811d640:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 811d642:	4b54      	ldr	r3, [pc, #336]	@ (811d794 <tcp_receive+0x888>)
 811d644:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 811d646:	4b53      	ldr	r3, [pc, #332]	@ (811d794 <tcp_receive+0x888>)
 811d648:	691b      	ldr	r3, [r3, #16]
 811d64a:	899b      	ldrh	r3, [r3, #12]
 811d64c:	b29b      	uxth	r3, r3
 811d64e:	4618      	mov	r0, r3
 811d650:	f7f6 fdf4 	bl	811423c <lwip_htons>
 811d654:	4603      	mov	r3, r0
 811d656:	b2db      	uxtb	r3, r3
 811d658:	f003 0302 	and.w	r3, r3, #2
 811d65c:	2b00      	cmp	r3, #0
 811d65e:	d005      	beq.n	811d66c <tcp_receive+0x760>
            inseg.len -= 1;
 811d660:	4b4c      	ldr	r3, [pc, #304]	@ (811d794 <tcp_receive+0x888>)
 811d662:	891b      	ldrh	r3, [r3, #8]
 811d664:	3b01      	subs	r3, #1
 811d666:	b29a      	uxth	r2, r3
 811d668:	4b4a      	ldr	r3, [pc, #296]	@ (811d794 <tcp_receive+0x888>)
 811d66a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 811d66c:	4b49      	ldr	r3, [pc, #292]	@ (811d794 <tcp_receive+0x888>)
 811d66e:	685b      	ldr	r3, [r3, #4]
 811d670:	4a48      	ldr	r2, [pc, #288]	@ (811d794 <tcp_receive+0x888>)
 811d672:	8912      	ldrh	r2, [r2, #8]
 811d674:	4611      	mov	r1, r2
 811d676:	4618      	mov	r0, r3
 811d678:	f7fb fbfc 	bl	8118e74 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 811d67c:	4b45      	ldr	r3, [pc, #276]	@ (811d794 <tcp_receive+0x888>)
 811d67e:	891c      	ldrh	r4, [r3, #8]
 811d680:	4b44      	ldr	r3, [pc, #272]	@ (811d794 <tcp_receive+0x888>)
 811d682:	691b      	ldr	r3, [r3, #16]
 811d684:	899b      	ldrh	r3, [r3, #12]
 811d686:	b29b      	uxth	r3, r3
 811d688:	4618      	mov	r0, r3
 811d68a:	f7f6 fdd7 	bl	811423c <lwip_htons>
 811d68e:	4603      	mov	r3, r0
 811d690:	b2db      	uxtb	r3, r3
 811d692:	f003 0303 	and.w	r3, r3, #3
 811d696:	2b00      	cmp	r3, #0
 811d698:	d001      	beq.n	811d69e <tcp_receive+0x792>
 811d69a:	2301      	movs	r3, #1
 811d69c:	e000      	b.n	811d6a0 <tcp_receive+0x794>
 811d69e:	2300      	movs	r3, #0
 811d6a0:	4423      	add	r3, r4
 811d6a2:	b29a      	uxth	r2, r3
 811d6a4:	4b3c      	ldr	r3, [pc, #240]	@ (811d798 <tcp_receive+0x88c>)
 811d6a6:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 811d6a8:	4b3b      	ldr	r3, [pc, #236]	@ (811d798 <tcp_receive+0x88c>)
 811d6aa:	881b      	ldrh	r3, [r3, #0]
 811d6ac:	461a      	mov	r2, r3
 811d6ae:	4b38      	ldr	r3, [pc, #224]	@ (811d790 <tcp_receive+0x884>)
 811d6b0:	681b      	ldr	r3, [r3, #0]
 811d6b2:	441a      	add	r2, r3
 811d6b4:	687b      	ldr	r3, [r7, #4]
 811d6b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811d6b8:	6879      	ldr	r1, [r7, #4]
 811d6ba:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 811d6bc:	440b      	add	r3, r1
 811d6be:	429a      	cmp	r2, r3
 811d6c0:	d006      	beq.n	811d6d0 <tcp_receive+0x7c4>
 811d6c2:	4b36      	ldr	r3, [pc, #216]	@ (811d79c <tcp_receive+0x890>)
 811d6c4:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 811d6c8:	4935      	ldr	r1, [pc, #212]	@ (811d7a0 <tcp_receive+0x894>)
 811d6ca:	4836      	ldr	r0, [pc, #216]	@ (811d7a4 <tcp_receive+0x898>)
 811d6cc:	f004 fdca 	bl	8122264 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 811d6d0:	687b      	ldr	r3, [r7, #4]
 811d6d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811d6d4:	2b00      	cmp	r3, #0
 811d6d6:	f000 80e6 	beq.w	811d8a6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 811d6da:	4b2e      	ldr	r3, [pc, #184]	@ (811d794 <tcp_receive+0x888>)
 811d6dc:	691b      	ldr	r3, [r3, #16]
 811d6de:	899b      	ldrh	r3, [r3, #12]
 811d6e0:	b29b      	uxth	r3, r3
 811d6e2:	4618      	mov	r0, r3
 811d6e4:	f7f6 fdaa 	bl	811423c <lwip_htons>
 811d6e8:	4603      	mov	r3, r0
 811d6ea:	b2db      	uxtb	r3, r3
 811d6ec:	f003 0301 	and.w	r3, r3, #1
 811d6f0:	2b00      	cmp	r3, #0
 811d6f2:	d010      	beq.n	811d716 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 811d6f4:	e00a      	b.n	811d70c <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 811d6f6:	687b      	ldr	r3, [r7, #4]
 811d6f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811d6fa:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 811d6fc:	687b      	ldr	r3, [r7, #4]
 811d6fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811d700:	681a      	ldr	r2, [r3, #0]
 811d702:	687b      	ldr	r3, [r7, #4]
 811d704:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 811d706:	68f8      	ldr	r0, [r7, #12]
 811d708:	f7fd fb73 	bl	811adf2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 811d70c:	687b      	ldr	r3, [r7, #4]
 811d70e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811d710:	2b00      	cmp	r3, #0
 811d712:	d1f0      	bne.n	811d6f6 <tcp_receive+0x7ea>
 811d714:	e0c7      	b.n	811d8a6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 811d716:	687b      	ldr	r3, [r7, #4]
 811d718:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811d71a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 811d71c:	e051      	b.n	811d7c2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 811d71e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811d720:	691b      	ldr	r3, [r3, #16]
 811d722:	899b      	ldrh	r3, [r3, #12]
 811d724:	b29b      	uxth	r3, r3
 811d726:	4618      	mov	r0, r3
 811d728:	f7f6 fd88 	bl	811423c <lwip_htons>
 811d72c:	4603      	mov	r3, r0
 811d72e:	b2db      	uxtb	r3, r3
 811d730:	f003 0301 	and.w	r3, r3, #1
 811d734:	2b00      	cmp	r3, #0
 811d736:	d03c      	beq.n	811d7b2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 811d738:	4b16      	ldr	r3, [pc, #88]	@ (811d794 <tcp_receive+0x888>)
 811d73a:	691b      	ldr	r3, [r3, #16]
 811d73c:	899b      	ldrh	r3, [r3, #12]
 811d73e:	b29b      	uxth	r3, r3
 811d740:	4618      	mov	r0, r3
 811d742:	f7f6 fd7b 	bl	811423c <lwip_htons>
 811d746:	4603      	mov	r3, r0
 811d748:	b2db      	uxtb	r3, r3
 811d74a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 811d74e:	2b00      	cmp	r3, #0
 811d750:	d12f      	bne.n	811d7b2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 811d752:	4b10      	ldr	r3, [pc, #64]	@ (811d794 <tcp_receive+0x888>)
 811d754:	691b      	ldr	r3, [r3, #16]
 811d756:	899b      	ldrh	r3, [r3, #12]
 811d758:	b29c      	uxth	r4, r3
 811d75a:	2001      	movs	r0, #1
 811d75c:	f7f6 fd6e 	bl	811423c <lwip_htons>
 811d760:	4603      	mov	r3, r0
 811d762:	461a      	mov	r2, r3
 811d764:	4b0b      	ldr	r3, [pc, #44]	@ (811d794 <tcp_receive+0x888>)
 811d766:	691b      	ldr	r3, [r3, #16]
 811d768:	4322      	orrs	r2, r4
 811d76a:	b292      	uxth	r2, r2
 811d76c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 811d76e:	4b09      	ldr	r3, [pc, #36]	@ (811d794 <tcp_receive+0x888>)
 811d770:	891c      	ldrh	r4, [r3, #8]
 811d772:	4b08      	ldr	r3, [pc, #32]	@ (811d794 <tcp_receive+0x888>)
 811d774:	691b      	ldr	r3, [r3, #16]
 811d776:	899b      	ldrh	r3, [r3, #12]
 811d778:	b29b      	uxth	r3, r3
 811d77a:	4618      	mov	r0, r3
 811d77c:	f7f6 fd5e 	bl	811423c <lwip_htons>
 811d780:	4603      	mov	r3, r0
 811d782:	b2db      	uxtb	r3, r3
 811d784:	f003 0303 	and.w	r3, r3, #3
 811d788:	2b00      	cmp	r3, #0
 811d78a:	d00d      	beq.n	811d7a8 <tcp_receive+0x89c>
 811d78c:	2301      	movs	r3, #1
 811d78e:	e00c      	b.n	811d7aa <tcp_receive+0x89e>
 811d790:	10011e94 	.word	0x10011e94
 811d794:	10011e70 	.word	0x10011e70
 811d798:	10011e9e 	.word	0x10011e9e
 811d79c:	08126dc8 	.word	0x08126dc8
 811d7a0:	08127338 	.word	0x08127338
 811d7a4:	08126e54 	.word	0x08126e54
 811d7a8:	2300      	movs	r3, #0
 811d7aa:	4423      	add	r3, r4
 811d7ac:	b29a      	uxth	r2, r3
 811d7ae:	4b98      	ldr	r3, [pc, #608]	@ (811da10 <tcp_receive+0xb04>)
 811d7b0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 811d7b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811d7b4:	613b      	str	r3, [r7, #16]
              next = next->next;
 811d7b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811d7b8:	681b      	ldr	r3, [r3, #0]
 811d7ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 811d7bc:	6938      	ldr	r0, [r7, #16]
 811d7be:	f7fd fb18 	bl	811adf2 <tcp_seg_free>
            while (next &&
 811d7c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811d7c4:	2b00      	cmp	r3, #0
 811d7c6:	d00e      	beq.n	811d7e6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 811d7c8:	4b91      	ldr	r3, [pc, #580]	@ (811da10 <tcp_receive+0xb04>)
 811d7ca:	881b      	ldrh	r3, [r3, #0]
 811d7cc:	461a      	mov	r2, r3
 811d7ce:	4b91      	ldr	r3, [pc, #580]	@ (811da14 <tcp_receive+0xb08>)
 811d7d0:	681b      	ldr	r3, [r3, #0]
 811d7d2:	441a      	add	r2, r3
 811d7d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811d7d6:	691b      	ldr	r3, [r3, #16]
 811d7d8:	685b      	ldr	r3, [r3, #4]
 811d7da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 811d7dc:	8909      	ldrh	r1, [r1, #8]
 811d7de:	440b      	add	r3, r1
 811d7e0:	1ad3      	subs	r3, r2, r3
            while (next &&
 811d7e2:	2b00      	cmp	r3, #0
 811d7e4:	da9b      	bge.n	811d71e <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 811d7e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811d7e8:	2b00      	cmp	r3, #0
 811d7ea:	d059      	beq.n	811d8a0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 811d7ec:	4b88      	ldr	r3, [pc, #544]	@ (811da10 <tcp_receive+0xb04>)
 811d7ee:	881b      	ldrh	r3, [r3, #0]
 811d7f0:	461a      	mov	r2, r3
 811d7f2:	4b88      	ldr	r3, [pc, #544]	@ (811da14 <tcp_receive+0xb08>)
 811d7f4:	681b      	ldr	r3, [r3, #0]
 811d7f6:	441a      	add	r2, r3
 811d7f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811d7fa:	691b      	ldr	r3, [r3, #16]
 811d7fc:	685b      	ldr	r3, [r3, #4]
 811d7fe:	1ad3      	subs	r3, r2, r3
            if (next &&
 811d800:	2b00      	cmp	r3, #0
 811d802:	dd4d      	ble.n	811d8a0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 811d804:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811d806:	691b      	ldr	r3, [r3, #16]
 811d808:	685b      	ldr	r3, [r3, #4]
 811d80a:	b29a      	uxth	r2, r3
 811d80c:	4b81      	ldr	r3, [pc, #516]	@ (811da14 <tcp_receive+0xb08>)
 811d80e:	681b      	ldr	r3, [r3, #0]
 811d810:	b29b      	uxth	r3, r3
 811d812:	1ad3      	subs	r3, r2, r3
 811d814:	b29a      	uxth	r2, r3
 811d816:	4b80      	ldr	r3, [pc, #512]	@ (811da18 <tcp_receive+0xb0c>)
 811d818:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 811d81a:	4b7f      	ldr	r3, [pc, #508]	@ (811da18 <tcp_receive+0xb0c>)
 811d81c:	691b      	ldr	r3, [r3, #16]
 811d81e:	899b      	ldrh	r3, [r3, #12]
 811d820:	b29b      	uxth	r3, r3
 811d822:	4618      	mov	r0, r3
 811d824:	f7f6 fd0a 	bl	811423c <lwip_htons>
 811d828:	4603      	mov	r3, r0
 811d82a:	b2db      	uxtb	r3, r3
 811d82c:	f003 0302 	and.w	r3, r3, #2
 811d830:	2b00      	cmp	r3, #0
 811d832:	d005      	beq.n	811d840 <tcp_receive+0x934>
                inseg.len -= 1;
 811d834:	4b78      	ldr	r3, [pc, #480]	@ (811da18 <tcp_receive+0xb0c>)
 811d836:	891b      	ldrh	r3, [r3, #8]
 811d838:	3b01      	subs	r3, #1
 811d83a:	b29a      	uxth	r2, r3
 811d83c:	4b76      	ldr	r3, [pc, #472]	@ (811da18 <tcp_receive+0xb0c>)
 811d83e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 811d840:	4b75      	ldr	r3, [pc, #468]	@ (811da18 <tcp_receive+0xb0c>)
 811d842:	685b      	ldr	r3, [r3, #4]
 811d844:	4a74      	ldr	r2, [pc, #464]	@ (811da18 <tcp_receive+0xb0c>)
 811d846:	8912      	ldrh	r2, [r2, #8]
 811d848:	4611      	mov	r1, r2
 811d84a:	4618      	mov	r0, r3
 811d84c:	f7fb fb12 	bl	8118e74 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 811d850:	4b71      	ldr	r3, [pc, #452]	@ (811da18 <tcp_receive+0xb0c>)
 811d852:	891c      	ldrh	r4, [r3, #8]
 811d854:	4b70      	ldr	r3, [pc, #448]	@ (811da18 <tcp_receive+0xb0c>)
 811d856:	691b      	ldr	r3, [r3, #16]
 811d858:	899b      	ldrh	r3, [r3, #12]
 811d85a:	b29b      	uxth	r3, r3
 811d85c:	4618      	mov	r0, r3
 811d85e:	f7f6 fced 	bl	811423c <lwip_htons>
 811d862:	4603      	mov	r3, r0
 811d864:	b2db      	uxtb	r3, r3
 811d866:	f003 0303 	and.w	r3, r3, #3
 811d86a:	2b00      	cmp	r3, #0
 811d86c:	d001      	beq.n	811d872 <tcp_receive+0x966>
 811d86e:	2301      	movs	r3, #1
 811d870:	e000      	b.n	811d874 <tcp_receive+0x968>
 811d872:	2300      	movs	r3, #0
 811d874:	4423      	add	r3, r4
 811d876:	b29a      	uxth	r2, r3
 811d878:	4b65      	ldr	r3, [pc, #404]	@ (811da10 <tcp_receive+0xb04>)
 811d87a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 811d87c:	4b64      	ldr	r3, [pc, #400]	@ (811da10 <tcp_receive+0xb04>)
 811d87e:	881b      	ldrh	r3, [r3, #0]
 811d880:	461a      	mov	r2, r3
 811d882:	4b64      	ldr	r3, [pc, #400]	@ (811da14 <tcp_receive+0xb08>)
 811d884:	681b      	ldr	r3, [r3, #0]
 811d886:	441a      	add	r2, r3
 811d888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811d88a:	691b      	ldr	r3, [r3, #16]
 811d88c:	685b      	ldr	r3, [r3, #4]
 811d88e:	429a      	cmp	r2, r3
 811d890:	d006      	beq.n	811d8a0 <tcp_receive+0x994>
 811d892:	4b62      	ldr	r3, [pc, #392]	@ (811da1c <tcp_receive+0xb10>)
 811d894:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 811d898:	4961      	ldr	r1, [pc, #388]	@ (811da20 <tcp_receive+0xb14>)
 811d89a:	4862      	ldr	r0, [pc, #392]	@ (811da24 <tcp_receive+0xb18>)
 811d89c:	f004 fce2 	bl	8122264 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 811d8a0:	687b      	ldr	r3, [r7, #4]
 811d8a2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 811d8a4:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 811d8a6:	4b5a      	ldr	r3, [pc, #360]	@ (811da10 <tcp_receive+0xb04>)
 811d8a8:	881b      	ldrh	r3, [r3, #0]
 811d8aa:	461a      	mov	r2, r3
 811d8ac:	4b59      	ldr	r3, [pc, #356]	@ (811da14 <tcp_receive+0xb08>)
 811d8ae:	681b      	ldr	r3, [r3, #0]
 811d8b0:	441a      	add	r2, r3
 811d8b2:	687b      	ldr	r3, [r7, #4]
 811d8b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 811d8b6:	687b      	ldr	r3, [r7, #4]
 811d8b8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 811d8ba:	4b55      	ldr	r3, [pc, #340]	@ (811da10 <tcp_receive+0xb04>)
 811d8bc:	881b      	ldrh	r3, [r3, #0]
 811d8be:	429a      	cmp	r2, r3
 811d8c0:	d206      	bcs.n	811d8d0 <tcp_receive+0x9c4>
 811d8c2:	4b56      	ldr	r3, [pc, #344]	@ (811da1c <tcp_receive+0xb10>)
 811d8c4:	f240 6207 	movw	r2, #1543	@ 0x607
 811d8c8:	4957      	ldr	r1, [pc, #348]	@ (811da28 <tcp_receive+0xb1c>)
 811d8ca:	4856      	ldr	r0, [pc, #344]	@ (811da24 <tcp_receive+0xb18>)
 811d8cc:	f004 fcca 	bl	8122264 <iprintf>
        pcb->rcv_wnd -= tcplen;
 811d8d0:	687b      	ldr	r3, [r7, #4]
 811d8d2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 811d8d4:	4b4e      	ldr	r3, [pc, #312]	@ (811da10 <tcp_receive+0xb04>)
 811d8d6:	881b      	ldrh	r3, [r3, #0]
 811d8d8:	1ad3      	subs	r3, r2, r3
 811d8da:	b29a      	uxth	r2, r3
 811d8dc:	687b      	ldr	r3, [r7, #4]
 811d8de:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 811d8e0:	6878      	ldr	r0, [r7, #4]
 811d8e2:	f7fc fb9b 	bl	811a01c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 811d8e6:	4b4c      	ldr	r3, [pc, #304]	@ (811da18 <tcp_receive+0xb0c>)
 811d8e8:	685b      	ldr	r3, [r3, #4]
 811d8ea:	891b      	ldrh	r3, [r3, #8]
 811d8ec:	2b00      	cmp	r3, #0
 811d8ee:	d006      	beq.n	811d8fe <tcp_receive+0x9f2>
          recv_data = inseg.p;
 811d8f0:	4b49      	ldr	r3, [pc, #292]	@ (811da18 <tcp_receive+0xb0c>)
 811d8f2:	685b      	ldr	r3, [r3, #4]
 811d8f4:	4a4d      	ldr	r2, [pc, #308]	@ (811da2c <tcp_receive+0xb20>)
 811d8f6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 811d8f8:	4b47      	ldr	r3, [pc, #284]	@ (811da18 <tcp_receive+0xb0c>)
 811d8fa:	2200      	movs	r2, #0
 811d8fc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 811d8fe:	4b46      	ldr	r3, [pc, #280]	@ (811da18 <tcp_receive+0xb0c>)
 811d900:	691b      	ldr	r3, [r3, #16]
 811d902:	899b      	ldrh	r3, [r3, #12]
 811d904:	b29b      	uxth	r3, r3
 811d906:	4618      	mov	r0, r3
 811d908:	f7f6 fc98 	bl	811423c <lwip_htons>
 811d90c:	4603      	mov	r3, r0
 811d90e:	b2db      	uxtb	r3, r3
 811d910:	f003 0301 	and.w	r3, r3, #1
 811d914:	2b00      	cmp	r3, #0
 811d916:	f000 80b8 	beq.w	811da8a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 811d91a:	4b45      	ldr	r3, [pc, #276]	@ (811da30 <tcp_receive+0xb24>)
 811d91c:	781b      	ldrb	r3, [r3, #0]
 811d91e:	f043 0320 	orr.w	r3, r3, #32
 811d922:	b2da      	uxtb	r2, r3
 811d924:	4b42      	ldr	r3, [pc, #264]	@ (811da30 <tcp_receive+0xb24>)
 811d926:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 811d928:	e0af      	b.n	811da8a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 811d92a:	687b      	ldr	r3, [r7, #4]
 811d92c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811d92e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 811d930:	687b      	ldr	r3, [r7, #4]
 811d932:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811d934:	691b      	ldr	r3, [r3, #16]
 811d936:	685b      	ldr	r3, [r3, #4]
 811d938:	4a36      	ldr	r2, [pc, #216]	@ (811da14 <tcp_receive+0xb08>)
 811d93a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 811d93c:	68bb      	ldr	r3, [r7, #8]
 811d93e:	891b      	ldrh	r3, [r3, #8]
 811d940:	461c      	mov	r4, r3
 811d942:	68bb      	ldr	r3, [r7, #8]
 811d944:	691b      	ldr	r3, [r3, #16]
 811d946:	899b      	ldrh	r3, [r3, #12]
 811d948:	b29b      	uxth	r3, r3
 811d94a:	4618      	mov	r0, r3
 811d94c:	f7f6 fc76 	bl	811423c <lwip_htons>
 811d950:	4603      	mov	r3, r0
 811d952:	b2db      	uxtb	r3, r3
 811d954:	f003 0303 	and.w	r3, r3, #3
 811d958:	2b00      	cmp	r3, #0
 811d95a:	d001      	beq.n	811d960 <tcp_receive+0xa54>
 811d95c:	2301      	movs	r3, #1
 811d95e:	e000      	b.n	811d962 <tcp_receive+0xa56>
 811d960:	2300      	movs	r3, #0
 811d962:	191a      	adds	r2, r3, r4
 811d964:	687b      	ldr	r3, [r7, #4]
 811d966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811d968:	441a      	add	r2, r3
 811d96a:	687b      	ldr	r3, [r7, #4]
 811d96c:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 811d96e:	687b      	ldr	r3, [r7, #4]
 811d970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811d972:	461c      	mov	r4, r3
 811d974:	68bb      	ldr	r3, [r7, #8]
 811d976:	891b      	ldrh	r3, [r3, #8]
 811d978:	461d      	mov	r5, r3
 811d97a:	68bb      	ldr	r3, [r7, #8]
 811d97c:	691b      	ldr	r3, [r3, #16]
 811d97e:	899b      	ldrh	r3, [r3, #12]
 811d980:	b29b      	uxth	r3, r3
 811d982:	4618      	mov	r0, r3
 811d984:	f7f6 fc5a 	bl	811423c <lwip_htons>
 811d988:	4603      	mov	r3, r0
 811d98a:	b2db      	uxtb	r3, r3
 811d98c:	f003 0303 	and.w	r3, r3, #3
 811d990:	2b00      	cmp	r3, #0
 811d992:	d001      	beq.n	811d998 <tcp_receive+0xa8c>
 811d994:	2301      	movs	r3, #1
 811d996:	e000      	b.n	811d99a <tcp_receive+0xa8e>
 811d998:	2300      	movs	r3, #0
 811d99a:	442b      	add	r3, r5
 811d99c:	429c      	cmp	r4, r3
 811d99e:	d206      	bcs.n	811d9ae <tcp_receive+0xaa2>
 811d9a0:	4b1e      	ldr	r3, [pc, #120]	@ (811da1c <tcp_receive+0xb10>)
 811d9a2:	f240 622b 	movw	r2, #1579	@ 0x62b
 811d9a6:	4923      	ldr	r1, [pc, #140]	@ (811da34 <tcp_receive+0xb28>)
 811d9a8:	481e      	ldr	r0, [pc, #120]	@ (811da24 <tcp_receive+0xb18>)
 811d9aa:	f004 fc5b 	bl	8122264 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 811d9ae:	68bb      	ldr	r3, [r7, #8]
 811d9b0:	891b      	ldrh	r3, [r3, #8]
 811d9b2:	461c      	mov	r4, r3
 811d9b4:	68bb      	ldr	r3, [r7, #8]
 811d9b6:	691b      	ldr	r3, [r3, #16]
 811d9b8:	899b      	ldrh	r3, [r3, #12]
 811d9ba:	b29b      	uxth	r3, r3
 811d9bc:	4618      	mov	r0, r3
 811d9be:	f7f6 fc3d 	bl	811423c <lwip_htons>
 811d9c2:	4603      	mov	r3, r0
 811d9c4:	b2db      	uxtb	r3, r3
 811d9c6:	f003 0303 	and.w	r3, r3, #3
 811d9ca:	2b00      	cmp	r3, #0
 811d9cc:	d001      	beq.n	811d9d2 <tcp_receive+0xac6>
 811d9ce:	2301      	movs	r3, #1
 811d9d0:	e000      	b.n	811d9d4 <tcp_receive+0xac8>
 811d9d2:	2300      	movs	r3, #0
 811d9d4:	1919      	adds	r1, r3, r4
 811d9d6:	687b      	ldr	r3, [r7, #4]
 811d9d8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 811d9da:	b28b      	uxth	r3, r1
 811d9dc:	1ad3      	subs	r3, r2, r3
 811d9de:	b29a      	uxth	r2, r3
 811d9e0:	687b      	ldr	r3, [r7, #4]
 811d9e2:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 811d9e4:	6878      	ldr	r0, [r7, #4]
 811d9e6:	f7fc fb19 	bl	811a01c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 811d9ea:	68bb      	ldr	r3, [r7, #8]
 811d9ec:	685b      	ldr	r3, [r3, #4]
 811d9ee:	891b      	ldrh	r3, [r3, #8]
 811d9f0:	2b00      	cmp	r3, #0
 811d9f2:	d028      	beq.n	811da46 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 811d9f4:	4b0d      	ldr	r3, [pc, #52]	@ (811da2c <tcp_receive+0xb20>)
 811d9f6:	681b      	ldr	r3, [r3, #0]
 811d9f8:	2b00      	cmp	r3, #0
 811d9fa:	d01d      	beq.n	811da38 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 811d9fc:	4b0b      	ldr	r3, [pc, #44]	@ (811da2c <tcp_receive+0xb20>)
 811d9fe:	681a      	ldr	r2, [r3, #0]
 811da00:	68bb      	ldr	r3, [r7, #8]
 811da02:	685b      	ldr	r3, [r3, #4]
 811da04:	4619      	mov	r1, r3
 811da06:	4610      	mov	r0, r2
 811da08:	f7fb fc86 	bl	8119318 <pbuf_cat>
 811da0c:	e018      	b.n	811da40 <tcp_receive+0xb34>
 811da0e:	bf00      	nop
 811da10:	10011e9e 	.word	0x10011e9e
 811da14:	10011e94 	.word	0x10011e94
 811da18:	10011e70 	.word	0x10011e70
 811da1c:	08126dc8 	.word	0x08126dc8
 811da20:	08127370 	.word	0x08127370
 811da24:	08126e54 	.word	0x08126e54
 811da28:	081273ac 	.word	0x081273ac
 811da2c:	10011ea4 	.word	0x10011ea4
 811da30:	10011ea1 	.word	0x10011ea1
 811da34:	081273cc 	.word	0x081273cc
            } else {
              recv_data = cseg->p;
 811da38:	68bb      	ldr	r3, [r7, #8]
 811da3a:	685b      	ldr	r3, [r3, #4]
 811da3c:	4a70      	ldr	r2, [pc, #448]	@ (811dc00 <tcp_receive+0xcf4>)
 811da3e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 811da40:	68bb      	ldr	r3, [r7, #8]
 811da42:	2200      	movs	r2, #0
 811da44:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 811da46:	68bb      	ldr	r3, [r7, #8]
 811da48:	691b      	ldr	r3, [r3, #16]
 811da4a:	899b      	ldrh	r3, [r3, #12]
 811da4c:	b29b      	uxth	r3, r3
 811da4e:	4618      	mov	r0, r3
 811da50:	f7f6 fbf4 	bl	811423c <lwip_htons>
 811da54:	4603      	mov	r3, r0
 811da56:	b2db      	uxtb	r3, r3
 811da58:	f003 0301 	and.w	r3, r3, #1
 811da5c:	2b00      	cmp	r3, #0
 811da5e:	d00d      	beq.n	811da7c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 811da60:	4b68      	ldr	r3, [pc, #416]	@ (811dc04 <tcp_receive+0xcf8>)
 811da62:	781b      	ldrb	r3, [r3, #0]
 811da64:	f043 0320 	orr.w	r3, r3, #32
 811da68:	b2da      	uxtb	r2, r3
 811da6a:	4b66      	ldr	r3, [pc, #408]	@ (811dc04 <tcp_receive+0xcf8>)
 811da6c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 811da6e:	687b      	ldr	r3, [r7, #4]
 811da70:	7d1b      	ldrb	r3, [r3, #20]
 811da72:	2b04      	cmp	r3, #4
 811da74:	d102      	bne.n	811da7c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 811da76:	687b      	ldr	r3, [r7, #4]
 811da78:	2207      	movs	r2, #7
 811da7a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 811da7c:	68bb      	ldr	r3, [r7, #8]
 811da7e:	681a      	ldr	r2, [r3, #0]
 811da80:	687b      	ldr	r3, [r7, #4]
 811da82:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 811da84:	68b8      	ldr	r0, [r7, #8]
 811da86:	f7fd f9b4 	bl	811adf2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 811da8a:	687b      	ldr	r3, [r7, #4]
 811da8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811da8e:	2b00      	cmp	r3, #0
 811da90:	d008      	beq.n	811daa4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 811da92:	687b      	ldr	r3, [r7, #4]
 811da94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811da96:	691b      	ldr	r3, [r3, #16]
 811da98:	685a      	ldr	r2, [r3, #4]
 811da9a:	687b      	ldr	r3, [r7, #4]
 811da9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 811da9e:	429a      	cmp	r2, r3
 811daa0:	f43f af43 	beq.w	811d92a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 811daa4:	687b      	ldr	r3, [r7, #4]
 811daa6:	8b5b      	ldrh	r3, [r3, #26]
 811daa8:	f003 0301 	and.w	r3, r3, #1
 811daac:	2b00      	cmp	r3, #0
 811daae:	d00e      	beq.n	811dace <tcp_receive+0xbc2>
 811dab0:	687b      	ldr	r3, [r7, #4]
 811dab2:	8b5b      	ldrh	r3, [r3, #26]
 811dab4:	f023 0301 	bic.w	r3, r3, #1
 811dab8:	b29a      	uxth	r2, r3
 811daba:	687b      	ldr	r3, [r7, #4]
 811dabc:	835a      	strh	r2, [r3, #26]
 811dabe:	687b      	ldr	r3, [r7, #4]
 811dac0:	8b5b      	ldrh	r3, [r3, #26]
 811dac2:	f043 0302 	orr.w	r3, r3, #2
 811dac6:	b29a      	uxth	r2, r3
 811dac8:	687b      	ldr	r3, [r7, #4]
 811daca:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 811dacc:	e187      	b.n	811ddde <tcp_receive+0xed2>
        tcp_ack(pcb);
 811dace:	687b      	ldr	r3, [r7, #4]
 811dad0:	8b5b      	ldrh	r3, [r3, #26]
 811dad2:	f043 0301 	orr.w	r3, r3, #1
 811dad6:	b29a      	uxth	r2, r3
 811dad8:	687b      	ldr	r3, [r7, #4]
 811dada:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 811dadc:	e17f      	b.n	811ddde <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 811dade:	687b      	ldr	r3, [r7, #4]
 811dae0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811dae2:	2b00      	cmp	r3, #0
 811dae4:	d106      	bne.n	811daf4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 811dae6:	4848      	ldr	r0, [pc, #288]	@ (811dc08 <tcp_receive+0xcfc>)
 811dae8:	f7fd f99e 	bl	811ae28 <tcp_seg_copy>
 811daec:	4602      	mov	r2, r0
 811daee:	687b      	ldr	r3, [r7, #4]
 811daf0:	675a      	str	r2, [r3, #116]	@ 0x74
 811daf2:	e16c      	b.n	811ddce <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 811daf4:	2300      	movs	r3, #0
 811daf6:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 811daf8:	687b      	ldr	r3, [r7, #4]
 811dafa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811dafc:	63bb      	str	r3, [r7, #56]	@ 0x38
 811dafe:	e156      	b.n	811ddae <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 811db00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811db02:	691b      	ldr	r3, [r3, #16]
 811db04:	685a      	ldr	r2, [r3, #4]
 811db06:	4b41      	ldr	r3, [pc, #260]	@ (811dc0c <tcp_receive+0xd00>)
 811db08:	681b      	ldr	r3, [r3, #0]
 811db0a:	429a      	cmp	r2, r3
 811db0c:	d11d      	bne.n	811db4a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 811db0e:	4b3e      	ldr	r3, [pc, #248]	@ (811dc08 <tcp_receive+0xcfc>)
 811db10:	891a      	ldrh	r2, [r3, #8]
 811db12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811db14:	891b      	ldrh	r3, [r3, #8]
 811db16:	429a      	cmp	r2, r3
 811db18:	f240 814e 	bls.w	811ddb8 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 811db1c:	483a      	ldr	r0, [pc, #232]	@ (811dc08 <tcp_receive+0xcfc>)
 811db1e:	f7fd f983 	bl	811ae28 <tcp_seg_copy>
 811db22:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 811db24:	697b      	ldr	r3, [r7, #20]
 811db26:	2b00      	cmp	r3, #0
 811db28:	f000 8148 	beq.w	811ddbc <tcp_receive+0xeb0>
                  if (prev != NULL) {
 811db2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811db2e:	2b00      	cmp	r3, #0
 811db30:	d003      	beq.n	811db3a <tcp_receive+0xc2e>
                    prev->next = cseg;
 811db32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811db34:	697a      	ldr	r2, [r7, #20]
 811db36:	601a      	str	r2, [r3, #0]
 811db38:	e002      	b.n	811db40 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 811db3a:	687b      	ldr	r3, [r7, #4]
 811db3c:	697a      	ldr	r2, [r7, #20]
 811db3e:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 811db40:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 811db42:	6978      	ldr	r0, [r7, #20]
 811db44:	f7ff f8de 	bl	811cd04 <tcp_oos_insert_segment>
                }
                break;
 811db48:	e138      	b.n	811ddbc <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 811db4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811db4c:	2b00      	cmp	r3, #0
 811db4e:	d117      	bne.n	811db80 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 811db50:	4b2e      	ldr	r3, [pc, #184]	@ (811dc0c <tcp_receive+0xd00>)
 811db52:	681a      	ldr	r2, [r3, #0]
 811db54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811db56:	691b      	ldr	r3, [r3, #16]
 811db58:	685b      	ldr	r3, [r3, #4]
 811db5a:	1ad3      	subs	r3, r2, r3
 811db5c:	2b00      	cmp	r3, #0
 811db5e:	da57      	bge.n	811dc10 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 811db60:	4829      	ldr	r0, [pc, #164]	@ (811dc08 <tcp_receive+0xcfc>)
 811db62:	f7fd f961 	bl	811ae28 <tcp_seg_copy>
 811db66:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 811db68:	69bb      	ldr	r3, [r7, #24]
 811db6a:	2b00      	cmp	r3, #0
 811db6c:	f000 8128 	beq.w	811ddc0 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 811db70:	687b      	ldr	r3, [r7, #4]
 811db72:	69ba      	ldr	r2, [r7, #24]
 811db74:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 811db76:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 811db78:	69b8      	ldr	r0, [r7, #24]
 811db7a:	f7ff f8c3 	bl	811cd04 <tcp_oos_insert_segment>
                  }
                  break;
 811db7e:	e11f      	b.n	811ddc0 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 811db80:	4b22      	ldr	r3, [pc, #136]	@ (811dc0c <tcp_receive+0xd00>)
 811db82:	681a      	ldr	r2, [r3, #0]
 811db84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811db86:	691b      	ldr	r3, [r3, #16]
 811db88:	685b      	ldr	r3, [r3, #4]
 811db8a:	1ad3      	subs	r3, r2, r3
 811db8c:	3b01      	subs	r3, #1
 811db8e:	2b00      	cmp	r3, #0
 811db90:	db3e      	blt.n	811dc10 <tcp_receive+0xd04>
 811db92:	4b1e      	ldr	r3, [pc, #120]	@ (811dc0c <tcp_receive+0xd00>)
 811db94:	681a      	ldr	r2, [r3, #0]
 811db96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811db98:	691b      	ldr	r3, [r3, #16]
 811db9a:	685b      	ldr	r3, [r3, #4]
 811db9c:	1ad3      	subs	r3, r2, r3
 811db9e:	3301      	adds	r3, #1
 811dba0:	2b00      	cmp	r3, #0
 811dba2:	dc35      	bgt.n	811dc10 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 811dba4:	4818      	ldr	r0, [pc, #96]	@ (811dc08 <tcp_receive+0xcfc>)
 811dba6:	f7fd f93f 	bl	811ae28 <tcp_seg_copy>
 811dbaa:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 811dbac:	69fb      	ldr	r3, [r7, #28]
 811dbae:	2b00      	cmp	r3, #0
 811dbb0:	f000 8108 	beq.w	811ddc4 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 811dbb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811dbb6:	691b      	ldr	r3, [r3, #16]
 811dbb8:	685b      	ldr	r3, [r3, #4]
 811dbba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 811dbbc:	8912      	ldrh	r2, [r2, #8]
 811dbbe:	441a      	add	r2, r3
 811dbc0:	4b12      	ldr	r3, [pc, #72]	@ (811dc0c <tcp_receive+0xd00>)
 811dbc2:	681b      	ldr	r3, [r3, #0]
 811dbc4:	1ad3      	subs	r3, r2, r3
 811dbc6:	2b00      	cmp	r3, #0
 811dbc8:	dd12      	ble.n	811dbf0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 811dbca:	4b10      	ldr	r3, [pc, #64]	@ (811dc0c <tcp_receive+0xd00>)
 811dbcc:	681b      	ldr	r3, [r3, #0]
 811dbce:	b29a      	uxth	r2, r3
 811dbd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811dbd2:	691b      	ldr	r3, [r3, #16]
 811dbd4:	685b      	ldr	r3, [r3, #4]
 811dbd6:	b29b      	uxth	r3, r3
 811dbd8:	1ad3      	subs	r3, r2, r3
 811dbda:	b29a      	uxth	r2, r3
 811dbdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811dbde:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 811dbe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811dbe2:	685a      	ldr	r2, [r3, #4]
 811dbe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811dbe6:	891b      	ldrh	r3, [r3, #8]
 811dbe8:	4619      	mov	r1, r3
 811dbea:	4610      	mov	r0, r2
 811dbec:	f7fb f942 	bl	8118e74 <pbuf_realloc>
                    }
                    prev->next = cseg;
 811dbf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811dbf2:	69fa      	ldr	r2, [r7, #28]
 811dbf4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 811dbf6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 811dbf8:	69f8      	ldr	r0, [r7, #28]
 811dbfa:	f7ff f883 	bl	811cd04 <tcp_oos_insert_segment>
                  }
                  break;
 811dbfe:	e0e1      	b.n	811ddc4 <tcp_receive+0xeb8>
 811dc00:	10011ea4 	.word	0x10011ea4
 811dc04:	10011ea1 	.word	0x10011ea1
 811dc08:	10011e70 	.word	0x10011e70
 811dc0c:	10011e94 	.word	0x10011e94
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 811dc10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811dc12:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 811dc14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811dc16:	681b      	ldr	r3, [r3, #0]
 811dc18:	2b00      	cmp	r3, #0
 811dc1a:	f040 80c5 	bne.w	811dda8 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 811dc1e:	4b7f      	ldr	r3, [pc, #508]	@ (811de1c <tcp_receive+0xf10>)
 811dc20:	681a      	ldr	r2, [r3, #0]
 811dc22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811dc24:	691b      	ldr	r3, [r3, #16]
 811dc26:	685b      	ldr	r3, [r3, #4]
 811dc28:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 811dc2a:	2b00      	cmp	r3, #0
 811dc2c:	f340 80bc 	ble.w	811dda8 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 811dc30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811dc32:	691b      	ldr	r3, [r3, #16]
 811dc34:	899b      	ldrh	r3, [r3, #12]
 811dc36:	b29b      	uxth	r3, r3
 811dc38:	4618      	mov	r0, r3
 811dc3a:	f7f6 faff 	bl	811423c <lwip_htons>
 811dc3e:	4603      	mov	r3, r0
 811dc40:	b2db      	uxtb	r3, r3
 811dc42:	f003 0301 	and.w	r3, r3, #1
 811dc46:	2b00      	cmp	r3, #0
 811dc48:	f040 80be 	bne.w	811ddc8 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 811dc4c:	4874      	ldr	r0, [pc, #464]	@ (811de20 <tcp_receive+0xf14>)
 811dc4e:	f7fd f8eb 	bl	811ae28 <tcp_seg_copy>
 811dc52:	4602      	mov	r2, r0
 811dc54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811dc56:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 811dc58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811dc5a:	681b      	ldr	r3, [r3, #0]
 811dc5c:	2b00      	cmp	r3, #0
 811dc5e:	f000 80b5 	beq.w	811ddcc <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 811dc62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811dc64:	691b      	ldr	r3, [r3, #16]
 811dc66:	685b      	ldr	r3, [r3, #4]
 811dc68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 811dc6a:	8912      	ldrh	r2, [r2, #8]
 811dc6c:	441a      	add	r2, r3
 811dc6e:	4b6b      	ldr	r3, [pc, #428]	@ (811de1c <tcp_receive+0xf10>)
 811dc70:	681b      	ldr	r3, [r3, #0]
 811dc72:	1ad3      	subs	r3, r2, r3
 811dc74:	2b00      	cmp	r3, #0
 811dc76:	dd12      	ble.n	811dc9e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 811dc78:	4b68      	ldr	r3, [pc, #416]	@ (811de1c <tcp_receive+0xf10>)
 811dc7a:	681b      	ldr	r3, [r3, #0]
 811dc7c:	b29a      	uxth	r2, r3
 811dc7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811dc80:	691b      	ldr	r3, [r3, #16]
 811dc82:	685b      	ldr	r3, [r3, #4]
 811dc84:	b29b      	uxth	r3, r3
 811dc86:	1ad3      	subs	r3, r2, r3
 811dc88:	b29a      	uxth	r2, r3
 811dc8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811dc8c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 811dc8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811dc90:	685a      	ldr	r2, [r3, #4]
 811dc92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811dc94:	891b      	ldrh	r3, [r3, #8]
 811dc96:	4619      	mov	r1, r3
 811dc98:	4610      	mov	r0, r2
 811dc9a:	f7fb f8eb 	bl	8118e74 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 811dc9e:	4b61      	ldr	r3, [pc, #388]	@ (811de24 <tcp_receive+0xf18>)
 811dca0:	881b      	ldrh	r3, [r3, #0]
 811dca2:	461a      	mov	r2, r3
 811dca4:	4b5d      	ldr	r3, [pc, #372]	@ (811de1c <tcp_receive+0xf10>)
 811dca6:	681b      	ldr	r3, [r3, #0]
 811dca8:	441a      	add	r2, r3
 811dcaa:	687b      	ldr	r3, [r7, #4]
 811dcac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811dcae:	6879      	ldr	r1, [r7, #4]
 811dcb0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 811dcb2:	440b      	add	r3, r1
 811dcb4:	1ad3      	subs	r3, r2, r3
 811dcb6:	2b00      	cmp	r3, #0
 811dcb8:	f340 8088 	ble.w	811ddcc <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 811dcbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811dcbe:	681b      	ldr	r3, [r3, #0]
 811dcc0:	691b      	ldr	r3, [r3, #16]
 811dcc2:	899b      	ldrh	r3, [r3, #12]
 811dcc4:	b29b      	uxth	r3, r3
 811dcc6:	4618      	mov	r0, r3
 811dcc8:	f7f6 fab8 	bl	811423c <lwip_htons>
 811dccc:	4603      	mov	r3, r0
 811dcce:	b2db      	uxtb	r3, r3
 811dcd0:	f003 0301 	and.w	r3, r3, #1
 811dcd4:	2b00      	cmp	r3, #0
 811dcd6:	d021      	beq.n	811dd1c <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 811dcd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811dcda:	681b      	ldr	r3, [r3, #0]
 811dcdc:	691b      	ldr	r3, [r3, #16]
 811dcde:	899b      	ldrh	r3, [r3, #12]
 811dce0:	b29b      	uxth	r3, r3
 811dce2:	b21b      	sxth	r3, r3
 811dce4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 811dce8:	b21c      	sxth	r4, r3
 811dcea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811dcec:	681b      	ldr	r3, [r3, #0]
 811dcee:	691b      	ldr	r3, [r3, #16]
 811dcf0:	899b      	ldrh	r3, [r3, #12]
 811dcf2:	b29b      	uxth	r3, r3
 811dcf4:	4618      	mov	r0, r3
 811dcf6:	f7f6 faa1 	bl	811423c <lwip_htons>
 811dcfa:	4603      	mov	r3, r0
 811dcfc:	b2db      	uxtb	r3, r3
 811dcfe:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 811dd02:	b29b      	uxth	r3, r3
 811dd04:	4618      	mov	r0, r3
 811dd06:	f7f6 fa99 	bl	811423c <lwip_htons>
 811dd0a:	4603      	mov	r3, r0
 811dd0c:	b21b      	sxth	r3, r3
 811dd0e:	4323      	orrs	r3, r4
 811dd10:	b21a      	sxth	r2, r3
 811dd12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811dd14:	681b      	ldr	r3, [r3, #0]
 811dd16:	691b      	ldr	r3, [r3, #16]
 811dd18:	b292      	uxth	r2, r2
 811dd1a:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 811dd1c:	687b      	ldr	r3, [r7, #4]
 811dd1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811dd20:	b29a      	uxth	r2, r3
 811dd22:	687b      	ldr	r3, [r7, #4]
 811dd24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811dd26:	4413      	add	r3, r2
 811dd28:	b299      	uxth	r1, r3
 811dd2a:	4b3c      	ldr	r3, [pc, #240]	@ (811de1c <tcp_receive+0xf10>)
 811dd2c:	681b      	ldr	r3, [r3, #0]
 811dd2e:	b29a      	uxth	r2, r3
 811dd30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811dd32:	681b      	ldr	r3, [r3, #0]
 811dd34:	1a8a      	subs	r2, r1, r2
 811dd36:	b292      	uxth	r2, r2
 811dd38:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 811dd3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811dd3c:	681b      	ldr	r3, [r3, #0]
 811dd3e:	685a      	ldr	r2, [r3, #4]
 811dd40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811dd42:	681b      	ldr	r3, [r3, #0]
 811dd44:	891b      	ldrh	r3, [r3, #8]
 811dd46:	4619      	mov	r1, r3
 811dd48:	4610      	mov	r0, r2
 811dd4a:	f7fb f893 	bl	8118e74 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 811dd4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811dd50:	681b      	ldr	r3, [r3, #0]
 811dd52:	891c      	ldrh	r4, [r3, #8]
 811dd54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811dd56:	681b      	ldr	r3, [r3, #0]
 811dd58:	691b      	ldr	r3, [r3, #16]
 811dd5a:	899b      	ldrh	r3, [r3, #12]
 811dd5c:	b29b      	uxth	r3, r3
 811dd5e:	4618      	mov	r0, r3
 811dd60:	f7f6 fa6c 	bl	811423c <lwip_htons>
 811dd64:	4603      	mov	r3, r0
 811dd66:	b2db      	uxtb	r3, r3
 811dd68:	f003 0303 	and.w	r3, r3, #3
 811dd6c:	2b00      	cmp	r3, #0
 811dd6e:	d001      	beq.n	811dd74 <tcp_receive+0xe68>
 811dd70:	2301      	movs	r3, #1
 811dd72:	e000      	b.n	811dd76 <tcp_receive+0xe6a>
 811dd74:	2300      	movs	r3, #0
 811dd76:	4423      	add	r3, r4
 811dd78:	b29a      	uxth	r2, r3
 811dd7a:	4b2a      	ldr	r3, [pc, #168]	@ (811de24 <tcp_receive+0xf18>)
 811dd7c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 811dd7e:	4b29      	ldr	r3, [pc, #164]	@ (811de24 <tcp_receive+0xf18>)
 811dd80:	881b      	ldrh	r3, [r3, #0]
 811dd82:	461a      	mov	r2, r3
 811dd84:	4b25      	ldr	r3, [pc, #148]	@ (811de1c <tcp_receive+0xf10>)
 811dd86:	681b      	ldr	r3, [r3, #0]
 811dd88:	441a      	add	r2, r3
 811dd8a:	687b      	ldr	r3, [r7, #4]
 811dd8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811dd8e:	6879      	ldr	r1, [r7, #4]
 811dd90:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 811dd92:	440b      	add	r3, r1
 811dd94:	429a      	cmp	r2, r3
 811dd96:	d019      	beq.n	811ddcc <tcp_receive+0xec0>
 811dd98:	4b23      	ldr	r3, [pc, #140]	@ (811de28 <tcp_receive+0xf1c>)
 811dd9a:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 811dd9e:	4923      	ldr	r1, [pc, #140]	@ (811de2c <tcp_receive+0xf20>)
 811dda0:	4823      	ldr	r0, [pc, #140]	@ (811de30 <tcp_receive+0xf24>)
 811dda2:	f004 fa5f 	bl	8122264 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 811dda6:	e011      	b.n	811ddcc <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 811dda8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811ddaa:	681b      	ldr	r3, [r3, #0]
 811ddac:	63bb      	str	r3, [r7, #56]	@ 0x38
 811ddae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811ddb0:	2b00      	cmp	r3, #0
 811ddb2:	f47f aea5 	bne.w	811db00 <tcp_receive+0xbf4>
 811ddb6:	e00a      	b.n	811ddce <tcp_receive+0xec2>
                break;
 811ddb8:	bf00      	nop
 811ddba:	e008      	b.n	811ddce <tcp_receive+0xec2>
                break;
 811ddbc:	bf00      	nop
 811ddbe:	e006      	b.n	811ddce <tcp_receive+0xec2>
                  break;
 811ddc0:	bf00      	nop
 811ddc2:	e004      	b.n	811ddce <tcp_receive+0xec2>
                  break;
 811ddc4:	bf00      	nop
 811ddc6:	e002      	b.n	811ddce <tcp_receive+0xec2>
                  break;
 811ddc8:	bf00      	nop
 811ddca:	e000      	b.n	811ddce <tcp_receive+0xec2>
                break;
 811ddcc:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 811ddce:	6878      	ldr	r0, [r7, #4]
 811ddd0:	f001 fefe 	bl	811fbd0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 811ddd4:	e003      	b.n	811ddde <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 811ddd6:	6878      	ldr	r0, [r7, #4]
 811ddd8:	f001 fefa 	bl	811fbd0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 811dddc:	e01a      	b.n	811de14 <tcp_receive+0xf08>
 811ddde:	e019      	b.n	811de14 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 811dde0:	4b0e      	ldr	r3, [pc, #56]	@ (811de1c <tcp_receive+0xf10>)
 811dde2:	681a      	ldr	r2, [r3, #0]
 811dde4:	687b      	ldr	r3, [r7, #4]
 811dde6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811dde8:	1ad3      	subs	r3, r2, r3
 811ddea:	2b00      	cmp	r3, #0
 811ddec:	db0a      	blt.n	811de04 <tcp_receive+0xef8>
 811ddee:	4b0b      	ldr	r3, [pc, #44]	@ (811de1c <tcp_receive+0xf10>)
 811ddf0:	681a      	ldr	r2, [r3, #0]
 811ddf2:	687b      	ldr	r3, [r7, #4]
 811ddf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811ddf6:	6879      	ldr	r1, [r7, #4]
 811ddf8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 811ddfa:	440b      	add	r3, r1
 811ddfc:	1ad3      	subs	r3, r2, r3
 811ddfe:	3301      	adds	r3, #1
 811de00:	2b00      	cmp	r3, #0
 811de02:	dd07      	ble.n	811de14 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 811de04:	687b      	ldr	r3, [r7, #4]
 811de06:	8b5b      	ldrh	r3, [r3, #26]
 811de08:	f043 0302 	orr.w	r3, r3, #2
 811de0c:	b29a      	uxth	r2, r3
 811de0e:	687b      	ldr	r3, [r7, #4]
 811de10:	835a      	strh	r2, [r3, #26]
    }
  }
}
 811de12:	e7ff      	b.n	811de14 <tcp_receive+0xf08>
 811de14:	bf00      	nop
 811de16:	3750      	adds	r7, #80	@ 0x50
 811de18:	46bd      	mov	sp, r7
 811de1a:	bdb0      	pop	{r4, r5, r7, pc}
 811de1c:	10011e94 	.word	0x10011e94
 811de20:	10011e70 	.word	0x10011e70
 811de24:	10011e9e 	.word	0x10011e9e
 811de28:	08126dc8 	.word	0x08126dc8
 811de2c:	08127338 	.word	0x08127338
 811de30:	08126e54 	.word	0x08126e54

0811de34 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 811de34:	b480      	push	{r7}
 811de36:	b083      	sub	sp, #12
 811de38:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 811de3a:	4b15      	ldr	r3, [pc, #84]	@ (811de90 <tcp_get_next_optbyte+0x5c>)
 811de3c:	881b      	ldrh	r3, [r3, #0]
 811de3e:	1c5a      	adds	r2, r3, #1
 811de40:	b291      	uxth	r1, r2
 811de42:	4a13      	ldr	r2, [pc, #76]	@ (811de90 <tcp_get_next_optbyte+0x5c>)
 811de44:	8011      	strh	r1, [r2, #0]
 811de46:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 811de48:	4b12      	ldr	r3, [pc, #72]	@ (811de94 <tcp_get_next_optbyte+0x60>)
 811de4a:	681b      	ldr	r3, [r3, #0]
 811de4c:	2b00      	cmp	r3, #0
 811de4e:	d004      	beq.n	811de5a <tcp_get_next_optbyte+0x26>
 811de50:	4b11      	ldr	r3, [pc, #68]	@ (811de98 <tcp_get_next_optbyte+0x64>)
 811de52:	881b      	ldrh	r3, [r3, #0]
 811de54:	88fa      	ldrh	r2, [r7, #6]
 811de56:	429a      	cmp	r2, r3
 811de58:	d208      	bcs.n	811de6c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 811de5a:	4b10      	ldr	r3, [pc, #64]	@ (811de9c <tcp_get_next_optbyte+0x68>)
 811de5c:	681b      	ldr	r3, [r3, #0]
 811de5e:	3314      	adds	r3, #20
 811de60:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 811de62:	88fb      	ldrh	r3, [r7, #6]
 811de64:	683a      	ldr	r2, [r7, #0]
 811de66:	4413      	add	r3, r2
 811de68:	781b      	ldrb	r3, [r3, #0]
 811de6a:	e00b      	b.n	811de84 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 811de6c:	88fb      	ldrh	r3, [r7, #6]
 811de6e:	b2da      	uxtb	r2, r3
 811de70:	4b09      	ldr	r3, [pc, #36]	@ (811de98 <tcp_get_next_optbyte+0x64>)
 811de72:	881b      	ldrh	r3, [r3, #0]
 811de74:	b2db      	uxtb	r3, r3
 811de76:	1ad3      	subs	r3, r2, r3
 811de78:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 811de7a:	4b06      	ldr	r3, [pc, #24]	@ (811de94 <tcp_get_next_optbyte+0x60>)
 811de7c:	681a      	ldr	r2, [r3, #0]
 811de7e:	797b      	ldrb	r3, [r7, #5]
 811de80:	4413      	add	r3, r2
 811de82:	781b      	ldrb	r3, [r3, #0]
  }
}
 811de84:	4618      	mov	r0, r3
 811de86:	370c      	adds	r7, #12
 811de88:	46bd      	mov	sp, r7
 811de8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 811de8e:	4770      	bx	lr
 811de90:	10011e90 	.word	0x10011e90
 811de94:	10011e8c 	.word	0x10011e8c
 811de98:	10011e8a 	.word	0x10011e8a
 811de9c:	10011e84 	.word	0x10011e84

0811dea0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 811dea0:	b580      	push	{r7, lr}
 811dea2:	b084      	sub	sp, #16
 811dea4:	af00      	add	r7, sp, #0
 811dea6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 811dea8:	687b      	ldr	r3, [r7, #4]
 811deaa:	2b00      	cmp	r3, #0
 811deac:	d106      	bne.n	811debc <tcp_parseopt+0x1c>
 811deae:	4b33      	ldr	r3, [pc, #204]	@ (811df7c <tcp_parseopt+0xdc>)
 811deb0:	f240 727d 	movw	r2, #1917	@ 0x77d
 811deb4:	4932      	ldr	r1, [pc, #200]	@ (811df80 <tcp_parseopt+0xe0>)
 811deb6:	4833      	ldr	r0, [pc, #204]	@ (811df84 <tcp_parseopt+0xe4>)
 811deb8:	f004 f9d4 	bl	8122264 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 811debc:	4b32      	ldr	r3, [pc, #200]	@ (811df88 <tcp_parseopt+0xe8>)
 811debe:	881b      	ldrh	r3, [r3, #0]
 811dec0:	2b00      	cmp	r3, #0
 811dec2:	d057      	beq.n	811df74 <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 811dec4:	4b31      	ldr	r3, [pc, #196]	@ (811df8c <tcp_parseopt+0xec>)
 811dec6:	2200      	movs	r2, #0
 811dec8:	801a      	strh	r2, [r3, #0]
 811deca:	e047      	b.n	811df5c <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 811decc:	f7ff ffb2 	bl	811de34 <tcp_get_next_optbyte>
 811ded0:	4603      	mov	r3, r0
 811ded2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 811ded4:	7bfb      	ldrb	r3, [r7, #15]
 811ded6:	2b02      	cmp	r3, #2
 811ded8:	d006      	beq.n	811dee8 <tcp_parseopt+0x48>
 811deda:	2b02      	cmp	r3, #2
 811dedc:	dc2b      	bgt.n	811df36 <tcp_parseopt+0x96>
 811dede:	2b00      	cmp	r3, #0
 811dee0:	d043      	beq.n	811df6a <tcp_parseopt+0xca>
 811dee2:	2b01      	cmp	r3, #1
 811dee4:	d039      	beq.n	811df5a <tcp_parseopt+0xba>
 811dee6:	e026      	b.n	811df36 <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 811dee8:	f7ff ffa4 	bl	811de34 <tcp_get_next_optbyte>
 811deec:	4603      	mov	r3, r0
 811deee:	2b04      	cmp	r3, #4
 811def0:	d13d      	bne.n	811df6e <tcp_parseopt+0xce>
 811def2:	4b26      	ldr	r3, [pc, #152]	@ (811df8c <tcp_parseopt+0xec>)
 811def4:	881b      	ldrh	r3, [r3, #0]
 811def6:	3301      	adds	r3, #1
 811def8:	4a23      	ldr	r2, [pc, #140]	@ (811df88 <tcp_parseopt+0xe8>)
 811defa:	8812      	ldrh	r2, [r2, #0]
 811defc:	4293      	cmp	r3, r2
 811defe:	da36      	bge.n	811df6e <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 811df00:	f7ff ff98 	bl	811de34 <tcp_get_next_optbyte>
 811df04:	4603      	mov	r3, r0
 811df06:	021b      	lsls	r3, r3, #8
 811df08:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 811df0a:	f7ff ff93 	bl	811de34 <tcp_get_next_optbyte>
 811df0e:	4603      	mov	r3, r0
 811df10:	461a      	mov	r2, r3
 811df12:	89bb      	ldrh	r3, [r7, #12]
 811df14:	4313      	orrs	r3, r2
 811df16:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 811df18:	89bb      	ldrh	r3, [r7, #12]
 811df1a:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 811df1e:	4293      	cmp	r3, r2
 811df20:	d804      	bhi.n	811df2c <tcp_parseopt+0x8c>
 811df22:	89bb      	ldrh	r3, [r7, #12]
 811df24:	2b00      	cmp	r3, #0
 811df26:	d001      	beq.n	811df2c <tcp_parseopt+0x8c>
 811df28:	89ba      	ldrh	r2, [r7, #12]
 811df2a:	e001      	b.n	811df30 <tcp_parseopt+0x90>
 811df2c:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 811df30:	687b      	ldr	r3, [r7, #4]
 811df32:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 811df34:	e012      	b.n	811df5c <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 811df36:	f7ff ff7d 	bl	811de34 <tcp_get_next_optbyte>
 811df3a:	4603      	mov	r3, r0
 811df3c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 811df3e:	7afb      	ldrb	r3, [r7, #11]
 811df40:	2b01      	cmp	r3, #1
 811df42:	d916      	bls.n	811df72 <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 811df44:	7afb      	ldrb	r3, [r7, #11]
 811df46:	b29a      	uxth	r2, r3
 811df48:	4b10      	ldr	r3, [pc, #64]	@ (811df8c <tcp_parseopt+0xec>)
 811df4a:	881b      	ldrh	r3, [r3, #0]
 811df4c:	4413      	add	r3, r2
 811df4e:	b29b      	uxth	r3, r3
 811df50:	3b02      	subs	r3, #2
 811df52:	b29a      	uxth	r2, r3
 811df54:	4b0d      	ldr	r3, [pc, #52]	@ (811df8c <tcp_parseopt+0xec>)
 811df56:	801a      	strh	r2, [r3, #0]
 811df58:	e000      	b.n	811df5c <tcp_parseopt+0xbc>
          break;
 811df5a:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 811df5c:	4b0b      	ldr	r3, [pc, #44]	@ (811df8c <tcp_parseopt+0xec>)
 811df5e:	881a      	ldrh	r2, [r3, #0]
 811df60:	4b09      	ldr	r3, [pc, #36]	@ (811df88 <tcp_parseopt+0xe8>)
 811df62:	881b      	ldrh	r3, [r3, #0]
 811df64:	429a      	cmp	r2, r3
 811df66:	d3b1      	bcc.n	811decc <tcp_parseopt+0x2c>
 811df68:	e004      	b.n	811df74 <tcp_parseopt+0xd4>
          return;
 811df6a:	bf00      	nop
 811df6c:	e002      	b.n	811df74 <tcp_parseopt+0xd4>
            return;
 811df6e:	bf00      	nop
 811df70:	e000      	b.n	811df74 <tcp_parseopt+0xd4>
            return;
 811df72:	bf00      	nop
      }
    }
  }
}
 811df74:	3710      	adds	r7, #16
 811df76:	46bd      	mov	sp, r7
 811df78:	bd80      	pop	{r7, pc}
 811df7a:	bf00      	nop
 811df7c:	08126dc8 	.word	0x08126dc8
 811df80:	081273f4 	.word	0x081273f4
 811df84:	08126e54 	.word	0x08126e54
 811df88:	10011e88 	.word	0x10011e88
 811df8c:	10011e90 	.word	0x10011e90

0811df90 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 811df90:	b480      	push	{r7}
 811df92:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 811df94:	4b05      	ldr	r3, [pc, #20]	@ (811dfac <tcp_trigger_input_pcb_close+0x1c>)
 811df96:	781b      	ldrb	r3, [r3, #0]
 811df98:	f043 0310 	orr.w	r3, r3, #16
 811df9c:	b2da      	uxtb	r2, r3
 811df9e:	4b03      	ldr	r3, [pc, #12]	@ (811dfac <tcp_trigger_input_pcb_close+0x1c>)
 811dfa0:	701a      	strb	r2, [r3, #0]
}
 811dfa2:	bf00      	nop
 811dfa4:	46bd      	mov	sp, r7
 811dfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 811dfaa:	4770      	bx	lr
 811dfac:	10011ea1 	.word	0x10011ea1

0811dfb0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 811dfb0:	b580      	push	{r7, lr}
 811dfb2:	b084      	sub	sp, #16
 811dfb4:	af00      	add	r7, sp, #0
 811dfb6:	60f8      	str	r0, [r7, #12]
 811dfb8:	60b9      	str	r1, [r7, #8]
 811dfba:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 811dfbc:	68fb      	ldr	r3, [r7, #12]
 811dfbe:	2b00      	cmp	r3, #0
 811dfc0:	d00a      	beq.n	811dfd8 <tcp_route+0x28>
 811dfc2:	68fb      	ldr	r3, [r7, #12]
 811dfc4:	7a1b      	ldrb	r3, [r3, #8]
 811dfc6:	2b00      	cmp	r3, #0
 811dfc8:	d006      	beq.n	811dfd8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 811dfca:	68fb      	ldr	r3, [r7, #12]
 811dfcc:	7a1b      	ldrb	r3, [r3, #8]
 811dfce:	4618      	mov	r0, r3
 811dfd0:	f7fa fd46 	bl	8118a60 <netif_get_by_index>
 811dfd4:	4603      	mov	r3, r0
 811dfd6:	e003      	b.n	811dfe0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 811dfd8:	6878      	ldr	r0, [r7, #4]
 811dfda:	f7f7 ff37 	bl	8115e4c <ip4_route>
 811dfde:	4603      	mov	r3, r0
  }
}
 811dfe0:	4618      	mov	r0, r3
 811dfe2:	3710      	adds	r7, #16
 811dfe4:	46bd      	mov	sp, r7
 811dfe6:	bd80      	pop	{r7, pc}

0811dfe8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 811dfe8:	b590      	push	{r4, r7, lr}
 811dfea:	b087      	sub	sp, #28
 811dfec:	af00      	add	r7, sp, #0
 811dfee:	60f8      	str	r0, [r7, #12]
 811dff0:	60b9      	str	r1, [r7, #8]
 811dff2:	603b      	str	r3, [r7, #0]
 811dff4:	4613      	mov	r3, r2
 811dff6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 811dff8:	68fb      	ldr	r3, [r7, #12]
 811dffa:	2b00      	cmp	r3, #0
 811dffc:	d105      	bne.n	811e00a <tcp_create_segment+0x22>
 811dffe:	4b45      	ldr	r3, [pc, #276]	@ (811e114 <tcp_create_segment+0x12c>)
 811e000:	22a3      	movs	r2, #163	@ 0xa3
 811e002:	4945      	ldr	r1, [pc, #276]	@ (811e118 <tcp_create_segment+0x130>)
 811e004:	4845      	ldr	r0, [pc, #276]	@ (811e11c <tcp_create_segment+0x134>)
 811e006:	f004 f92d 	bl	8122264 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 811e00a:	68bb      	ldr	r3, [r7, #8]
 811e00c:	2b00      	cmp	r3, #0
 811e00e:	d105      	bne.n	811e01c <tcp_create_segment+0x34>
 811e010:	4b40      	ldr	r3, [pc, #256]	@ (811e114 <tcp_create_segment+0x12c>)
 811e012:	22a4      	movs	r2, #164	@ 0xa4
 811e014:	4942      	ldr	r1, [pc, #264]	@ (811e120 <tcp_create_segment+0x138>)
 811e016:	4841      	ldr	r0, [pc, #260]	@ (811e11c <tcp_create_segment+0x134>)
 811e018:	f004 f924 	bl	8122264 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 811e01c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 811e020:	009b      	lsls	r3, r3, #2
 811e022:	b2db      	uxtb	r3, r3
 811e024:	f003 0304 	and.w	r3, r3, #4
 811e028:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 811e02a:	2003      	movs	r0, #3
 811e02c:	f7fa f86e 	bl	811810c <memp_malloc>
 811e030:	6138      	str	r0, [r7, #16]
 811e032:	693b      	ldr	r3, [r7, #16]
 811e034:	2b00      	cmp	r3, #0
 811e036:	d104      	bne.n	811e042 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 811e038:	68b8      	ldr	r0, [r7, #8]
 811e03a:	f7fb f89f 	bl	811917c <pbuf_free>
    return NULL;
 811e03e:	2300      	movs	r3, #0
 811e040:	e063      	b.n	811e10a <tcp_create_segment+0x122>
  }
  seg->flags = optflags;
 811e042:	693b      	ldr	r3, [r7, #16]
 811e044:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 811e048:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 811e04a:	693b      	ldr	r3, [r7, #16]
 811e04c:	2200      	movs	r2, #0
 811e04e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 811e050:	693b      	ldr	r3, [r7, #16]
 811e052:	68ba      	ldr	r2, [r7, #8]
 811e054:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 811e056:	68bb      	ldr	r3, [r7, #8]
 811e058:	891a      	ldrh	r2, [r3, #8]
 811e05a:	7dfb      	ldrb	r3, [r7, #23]
 811e05c:	b29b      	uxth	r3, r3
 811e05e:	429a      	cmp	r2, r3
 811e060:	d205      	bcs.n	811e06e <tcp_create_segment+0x86>
 811e062:	4b2c      	ldr	r3, [pc, #176]	@ (811e114 <tcp_create_segment+0x12c>)
 811e064:	22b0      	movs	r2, #176	@ 0xb0
 811e066:	492f      	ldr	r1, [pc, #188]	@ (811e124 <tcp_create_segment+0x13c>)
 811e068:	482c      	ldr	r0, [pc, #176]	@ (811e11c <tcp_create_segment+0x134>)
 811e06a:	f004 f8fb 	bl	8122264 <iprintf>
  seg->len = p->tot_len - optlen;
 811e06e:	68bb      	ldr	r3, [r7, #8]
 811e070:	891a      	ldrh	r2, [r3, #8]
 811e072:	7dfb      	ldrb	r3, [r7, #23]
 811e074:	b29b      	uxth	r3, r3
 811e076:	1ad3      	subs	r3, r2, r3
 811e078:	b29a      	uxth	r2, r3
 811e07a:	693b      	ldr	r3, [r7, #16]
 811e07c:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 811e07e:	693b      	ldr	r3, [r7, #16]
 811e080:	2200      	movs	r2, #0
 811e082:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 811e084:	2114      	movs	r1, #20
 811e086:	68b8      	ldr	r0, [r7, #8]
 811e088:	f7fa ffe2 	bl	8119050 <pbuf_add_header>
 811e08c:	4603      	mov	r3, r0
 811e08e:	2b00      	cmp	r3, #0
 811e090:	d004      	beq.n	811e09c <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 811e092:	6938      	ldr	r0, [r7, #16]
 811e094:	f7fc fead 	bl	811adf2 <tcp_seg_free>
    return NULL;
 811e098:	2300      	movs	r3, #0
 811e09a:	e036      	b.n	811e10a <tcp_create_segment+0x122>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 811e09c:	693b      	ldr	r3, [r7, #16]
 811e09e:	685b      	ldr	r3, [r3, #4]
 811e0a0:	685a      	ldr	r2, [r3, #4]
 811e0a2:	693b      	ldr	r3, [r7, #16]
 811e0a4:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 811e0a6:	68fb      	ldr	r3, [r7, #12]
 811e0a8:	8ada      	ldrh	r2, [r3, #22]
 811e0aa:	693b      	ldr	r3, [r7, #16]
 811e0ac:	691c      	ldr	r4, [r3, #16]
 811e0ae:	4610      	mov	r0, r2
 811e0b0:	f7f6 f8c4 	bl	811423c <lwip_htons>
 811e0b4:	4603      	mov	r3, r0
 811e0b6:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 811e0b8:	68fb      	ldr	r3, [r7, #12]
 811e0ba:	8b1a      	ldrh	r2, [r3, #24]
 811e0bc:	693b      	ldr	r3, [r7, #16]
 811e0be:	691c      	ldr	r4, [r3, #16]
 811e0c0:	4610      	mov	r0, r2
 811e0c2:	f7f6 f8bb 	bl	811423c <lwip_htons>
 811e0c6:	4603      	mov	r3, r0
 811e0c8:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 811e0ca:	693b      	ldr	r3, [r7, #16]
 811e0cc:	691c      	ldr	r4, [r3, #16]
 811e0ce:	6838      	ldr	r0, [r7, #0]
 811e0d0:	f7f6 f8c9 	bl	8114266 <lwip_htonl>
 811e0d4:	4603      	mov	r3, r0
 811e0d6:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 811e0d8:	7dfb      	ldrb	r3, [r7, #23]
 811e0da:	089b      	lsrs	r3, r3, #2
 811e0dc:	b2db      	uxtb	r3, r3
 811e0de:	3305      	adds	r3, #5
 811e0e0:	b29b      	uxth	r3, r3
 811e0e2:	031b      	lsls	r3, r3, #12
 811e0e4:	b29a      	uxth	r2, r3
 811e0e6:	79fb      	ldrb	r3, [r7, #7]
 811e0e8:	b29b      	uxth	r3, r3
 811e0ea:	4313      	orrs	r3, r2
 811e0ec:	b29a      	uxth	r2, r3
 811e0ee:	693b      	ldr	r3, [r7, #16]
 811e0f0:	691c      	ldr	r4, [r3, #16]
 811e0f2:	4610      	mov	r0, r2
 811e0f4:	f7f6 f8a2 	bl	811423c <lwip_htons>
 811e0f8:	4603      	mov	r3, r0
 811e0fa:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 811e0fc:	693b      	ldr	r3, [r7, #16]
 811e0fe:	691b      	ldr	r3, [r3, #16]
 811e100:	2200      	movs	r2, #0
 811e102:	749a      	strb	r2, [r3, #18]
 811e104:	2200      	movs	r2, #0
 811e106:	74da      	strb	r2, [r3, #19]
  return seg;
 811e108:	693b      	ldr	r3, [r7, #16]
}
 811e10a:	4618      	mov	r0, r3
 811e10c:	371c      	adds	r7, #28
 811e10e:	46bd      	mov	sp, r7
 811e110:	bd90      	pop	{r4, r7, pc}
 811e112:	bf00      	nop
 811e114:	08127410 	.word	0x08127410
 811e118:	08127484 	.word	0x08127484
 811e11c:	081274a4 	.word	0x081274a4
 811e120:	081274cc 	.word	0x081274cc
 811e124:	081274f0 	.word	0x081274f0

0811e128 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 811e128:	b580      	push	{r7, lr}
 811e12a:	b086      	sub	sp, #24
 811e12c:	af00      	add	r7, sp, #0
 811e12e:	607b      	str	r3, [r7, #4]
 811e130:	4603      	mov	r3, r0
 811e132:	73fb      	strb	r3, [r7, #15]
 811e134:	460b      	mov	r3, r1
 811e136:	81bb      	strh	r3, [r7, #12]
 811e138:	4613      	mov	r3, r2
 811e13a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 811e13c:	89bb      	ldrh	r3, [r7, #12]
 811e13e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 811e140:	687b      	ldr	r3, [r7, #4]
 811e142:	2b00      	cmp	r3, #0
 811e144:	d105      	bne.n	811e152 <tcp_pbuf_prealloc+0x2a>
 811e146:	4b30      	ldr	r3, [pc, #192]	@ (811e208 <tcp_pbuf_prealloc+0xe0>)
 811e148:	22e8      	movs	r2, #232	@ 0xe8
 811e14a:	4930      	ldr	r1, [pc, #192]	@ (811e20c <tcp_pbuf_prealloc+0xe4>)
 811e14c:	4830      	ldr	r0, [pc, #192]	@ (811e210 <tcp_pbuf_prealloc+0xe8>)
 811e14e:	f004 f889 	bl	8122264 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 811e152:	6a3b      	ldr	r3, [r7, #32]
 811e154:	2b00      	cmp	r3, #0
 811e156:	d105      	bne.n	811e164 <tcp_pbuf_prealloc+0x3c>
 811e158:	4b2b      	ldr	r3, [pc, #172]	@ (811e208 <tcp_pbuf_prealloc+0xe0>)
 811e15a:	22e9      	movs	r2, #233	@ 0xe9
 811e15c:	492d      	ldr	r1, [pc, #180]	@ (811e214 <tcp_pbuf_prealloc+0xec>)
 811e15e:	482c      	ldr	r0, [pc, #176]	@ (811e210 <tcp_pbuf_prealloc+0xe8>)
 811e160:	f004 f880 	bl	8122264 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 811e164:	89ba      	ldrh	r2, [r7, #12]
 811e166:	897b      	ldrh	r3, [r7, #10]
 811e168:	429a      	cmp	r2, r3
 811e16a:	d221      	bcs.n	811e1b0 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 811e16c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 811e170:	f003 0302 	and.w	r3, r3, #2
 811e174:	2b00      	cmp	r3, #0
 811e176:	d111      	bne.n	811e19c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 811e178:	6a3b      	ldr	r3, [r7, #32]
 811e17a:	8b5b      	ldrh	r3, [r3, #26]
 811e17c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 811e180:	2b00      	cmp	r3, #0
 811e182:	d115      	bne.n	811e1b0 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 811e184:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 811e188:	2b00      	cmp	r3, #0
 811e18a:	d007      	beq.n	811e19c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 811e18c:	6a3b      	ldr	r3, [r7, #32]
 811e18e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 811e190:	2b00      	cmp	r3, #0
 811e192:	d103      	bne.n	811e19c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 811e194:	6a3b      	ldr	r3, [r7, #32]
 811e196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 811e198:	2b00      	cmp	r3, #0
 811e19a:	d009      	beq.n	811e1b0 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 811e19c:	89bb      	ldrh	r3, [r7, #12]
 811e19e:	f203 53b7 	addw	r3, r3, #1463	@ 0x5b7
 811e1a2:	f023 0203 	bic.w	r2, r3, #3
 811e1a6:	897b      	ldrh	r3, [r7, #10]
 811e1a8:	4293      	cmp	r3, r2
 811e1aa:	bf28      	it	cs
 811e1ac:	4613      	movcs	r3, r2
 811e1ae:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 811e1b0:	8af9      	ldrh	r1, [r7, #22]
 811e1b2:	7bfb      	ldrb	r3, [r7, #15]
 811e1b4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 811e1b8:	4618      	mov	r0, r3
 811e1ba:	f7fa fcfb 	bl	8118bb4 <pbuf_alloc>
 811e1be:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 811e1c0:	693b      	ldr	r3, [r7, #16]
 811e1c2:	2b00      	cmp	r3, #0
 811e1c4:	d101      	bne.n	811e1ca <tcp_pbuf_prealloc+0xa2>
    return NULL;
 811e1c6:	2300      	movs	r3, #0
 811e1c8:	e019      	b.n	811e1fe <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 811e1ca:	693b      	ldr	r3, [r7, #16]
 811e1cc:	681b      	ldr	r3, [r3, #0]
 811e1ce:	2b00      	cmp	r3, #0
 811e1d0:	d006      	beq.n	811e1e0 <tcp_pbuf_prealloc+0xb8>
 811e1d2:	4b0d      	ldr	r3, [pc, #52]	@ (811e208 <tcp_pbuf_prealloc+0xe0>)
 811e1d4:	f240 120b 	movw	r2, #267	@ 0x10b
 811e1d8:	490f      	ldr	r1, [pc, #60]	@ (811e218 <tcp_pbuf_prealloc+0xf0>)
 811e1da:	480d      	ldr	r0, [pc, #52]	@ (811e210 <tcp_pbuf_prealloc+0xe8>)
 811e1dc:	f004 f842 	bl	8122264 <iprintf>
  *oversize = p->len - length;
 811e1e0:	693b      	ldr	r3, [r7, #16]
 811e1e2:	895a      	ldrh	r2, [r3, #10]
 811e1e4:	89bb      	ldrh	r3, [r7, #12]
 811e1e6:	1ad3      	subs	r3, r2, r3
 811e1e8:	b29a      	uxth	r2, r3
 811e1ea:	687b      	ldr	r3, [r7, #4]
 811e1ec:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 811e1ee:	693b      	ldr	r3, [r7, #16]
 811e1f0:	89ba      	ldrh	r2, [r7, #12]
 811e1f2:	811a      	strh	r2, [r3, #8]
 811e1f4:	693b      	ldr	r3, [r7, #16]
 811e1f6:	891a      	ldrh	r2, [r3, #8]
 811e1f8:	693b      	ldr	r3, [r7, #16]
 811e1fa:	815a      	strh	r2, [r3, #10]
  return p;
 811e1fc:	693b      	ldr	r3, [r7, #16]
}
 811e1fe:	4618      	mov	r0, r3
 811e200:	3718      	adds	r7, #24
 811e202:	46bd      	mov	sp, r7
 811e204:	bd80      	pop	{r7, pc}
 811e206:	bf00      	nop
 811e208:	08127410 	.word	0x08127410
 811e20c:	08127508 	.word	0x08127508
 811e210:	081274a4 	.word	0x081274a4
 811e214:	0812752c 	.word	0x0812752c
 811e218:	0812754c 	.word	0x0812754c

0811e21c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 811e21c:	b580      	push	{r7, lr}
 811e21e:	b082      	sub	sp, #8
 811e220:	af00      	add	r7, sp, #0
 811e222:	6078      	str	r0, [r7, #4]
 811e224:	460b      	mov	r3, r1
 811e226:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 811e228:	687b      	ldr	r3, [r7, #4]
 811e22a:	2b00      	cmp	r3, #0
 811e22c:	d106      	bne.n	811e23c <tcp_write_checks+0x20>
 811e22e:	4b33      	ldr	r3, [pc, #204]	@ (811e2fc <tcp_write_checks+0xe0>)
 811e230:	f240 1233 	movw	r2, #307	@ 0x133
 811e234:	4932      	ldr	r1, [pc, #200]	@ (811e300 <tcp_write_checks+0xe4>)
 811e236:	4833      	ldr	r0, [pc, #204]	@ (811e304 <tcp_write_checks+0xe8>)
 811e238:	f004 f814 	bl	8122264 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 811e23c:	687b      	ldr	r3, [r7, #4]
 811e23e:	7d1b      	ldrb	r3, [r3, #20]
 811e240:	2b04      	cmp	r3, #4
 811e242:	d00e      	beq.n	811e262 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 811e244:	687b      	ldr	r3, [r7, #4]
 811e246:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 811e248:	2b07      	cmp	r3, #7
 811e24a:	d00a      	beq.n	811e262 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 811e24c:	687b      	ldr	r3, [r7, #4]
 811e24e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 811e250:	2b02      	cmp	r3, #2
 811e252:	d006      	beq.n	811e262 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 811e254:	687b      	ldr	r3, [r7, #4]
 811e256:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 811e258:	2b03      	cmp	r3, #3
 811e25a:	d002      	beq.n	811e262 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 811e25c:	f06f 030a 	mvn.w	r3, #10
 811e260:	e048      	b.n	811e2f4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 811e262:	887b      	ldrh	r3, [r7, #2]
 811e264:	2b00      	cmp	r3, #0
 811e266:	d101      	bne.n	811e26c <tcp_write_checks+0x50>
    return ERR_OK;
 811e268:	2300      	movs	r3, #0
 811e26a:	e043      	b.n	811e2f4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 811e26c:	687b      	ldr	r3, [r7, #4]
 811e26e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 811e272:	887a      	ldrh	r2, [r7, #2]
 811e274:	429a      	cmp	r2, r3
 811e276:	d909      	bls.n	811e28c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 811e278:	687b      	ldr	r3, [r7, #4]
 811e27a:	8b5b      	ldrh	r3, [r3, #26]
 811e27c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 811e280:	b29a      	uxth	r2, r3
 811e282:	687b      	ldr	r3, [r7, #4]
 811e284:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 811e286:	f04f 33ff 	mov.w	r3, #4294967295
 811e28a:	e033      	b.n	811e2f4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 811e28c:	687b      	ldr	r3, [r7, #4]
 811e28e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811e292:	2b0f      	cmp	r3, #15
 811e294:	d909      	bls.n	811e2aa <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 811e296:	687b      	ldr	r3, [r7, #4]
 811e298:	8b5b      	ldrh	r3, [r3, #26]
 811e29a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 811e29e:	b29a      	uxth	r2, r3
 811e2a0:	687b      	ldr	r3, [r7, #4]
 811e2a2:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 811e2a4:	f04f 33ff 	mov.w	r3, #4294967295
 811e2a8:	e024      	b.n	811e2f4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 811e2aa:	687b      	ldr	r3, [r7, #4]
 811e2ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811e2b0:	2b00      	cmp	r3, #0
 811e2b2:	d00f      	beq.n	811e2d4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 811e2b4:	687b      	ldr	r3, [r7, #4]
 811e2b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811e2b8:	2b00      	cmp	r3, #0
 811e2ba:	d11a      	bne.n	811e2f2 <tcp_write_checks+0xd6>
 811e2bc:	687b      	ldr	r3, [r7, #4]
 811e2be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811e2c0:	2b00      	cmp	r3, #0
 811e2c2:	d116      	bne.n	811e2f2 <tcp_write_checks+0xd6>
 811e2c4:	4b0d      	ldr	r3, [pc, #52]	@ (811e2fc <tcp_write_checks+0xe0>)
 811e2c6:	f240 1255 	movw	r2, #341	@ 0x155
 811e2ca:	490f      	ldr	r1, [pc, #60]	@ (811e308 <tcp_write_checks+0xec>)
 811e2cc:	480d      	ldr	r0, [pc, #52]	@ (811e304 <tcp_write_checks+0xe8>)
 811e2ce:	f003 ffc9 	bl	8122264 <iprintf>
 811e2d2:	e00e      	b.n	811e2f2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 811e2d4:	687b      	ldr	r3, [r7, #4]
 811e2d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811e2d8:	2b00      	cmp	r3, #0
 811e2da:	d103      	bne.n	811e2e4 <tcp_write_checks+0xc8>
 811e2dc:	687b      	ldr	r3, [r7, #4]
 811e2de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811e2e0:	2b00      	cmp	r3, #0
 811e2e2:	d006      	beq.n	811e2f2 <tcp_write_checks+0xd6>
 811e2e4:	4b05      	ldr	r3, [pc, #20]	@ (811e2fc <tcp_write_checks+0xe0>)
 811e2e6:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 811e2ea:	4908      	ldr	r1, [pc, #32]	@ (811e30c <tcp_write_checks+0xf0>)
 811e2ec:	4805      	ldr	r0, [pc, #20]	@ (811e304 <tcp_write_checks+0xe8>)
 811e2ee:	f003 ffb9 	bl	8122264 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 811e2f2:	2300      	movs	r3, #0
}
 811e2f4:	4618      	mov	r0, r3
 811e2f6:	3708      	adds	r7, #8
 811e2f8:	46bd      	mov	sp, r7
 811e2fa:	bd80      	pop	{r7, pc}
 811e2fc:	08127410 	.word	0x08127410
 811e300:	08127560 	.word	0x08127560
 811e304:	081274a4 	.word	0x081274a4
 811e308:	08127580 	.word	0x08127580
 811e30c:	081275bc 	.word	0x081275bc

0811e310 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 811e310:	b590      	push	{r4, r7, lr}
 811e312:	b09d      	sub	sp, #116	@ 0x74
 811e314:	af04      	add	r7, sp, #16
 811e316:	60f8      	str	r0, [r7, #12]
 811e318:	60b9      	str	r1, [r7, #8]
 811e31a:	4611      	mov	r1, r2
 811e31c:	461a      	mov	r2, r3
 811e31e:	460b      	mov	r3, r1
 811e320:	80fb      	strh	r3, [r7, #6]
 811e322:	4613      	mov	r3, r2
 811e324:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 811e326:	2300      	movs	r3, #0
 811e328:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 811e32a:	2300      	movs	r3, #0
 811e32c:	643b      	str	r3, [r7, #64]	@ 0x40
 811e32e:	2300      	movs	r3, #0
 811e330:	657b      	str	r3, [r7, #84]	@ 0x54
 811e332:	2300      	movs	r3, #0
 811e334:	653b      	str	r3, [r7, #80]	@ 0x50
 811e336:	2300      	movs	r3, #0
 811e338:	64fb      	str	r3, [r7, #76]	@ 0x4c
  u16_t pos = 0; /* position in 'arg' data */
 811e33a:	2300      	movs	r3, #0
 811e33c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 811e340:	2300      	movs	r3, #0
 811e342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
#if TCP_OVERSIZE
  u16_t oversize = 0;
 811e346:	2300      	movs	r3, #0
 811e348:	82fb      	strh	r3, [r7, #22]
  u16_t oversize_used = 0;
 811e34a:	2300      	movs	r3, #0
 811e34c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
 811e350:	2300      	movs	r3, #0
 811e352:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 811e356:	2300      	movs	r3, #0
 811e358:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 811e35c:	68fb      	ldr	r3, [r7, #12]
 811e35e:	2b00      	cmp	r3, #0
 811e360:	d109      	bne.n	811e376 <tcp_write+0x66>
 811e362:	4b9c      	ldr	r3, [pc, #624]	@ (811e5d4 <tcp_write+0x2c4>)
 811e364:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 811e368:	499b      	ldr	r1, [pc, #620]	@ (811e5d8 <tcp_write+0x2c8>)
 811e36a:	489c      	ldr	r0, [pc, #624]	@ (811e5dc <tcp_write+0x2cc>)
 811e36c:	f003 ff7a 	bl	8122264 <iprintf>
 811e370:	f06f 030f 	mvn.w	r3, #15
 811e374:	e379      	b.n	811ea6a <tcp_write+0x75a>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 811e376:	68fb      	ldr	r3, [r7, #12]
 811e378:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 811e37c:	085b      	lsrs	r3, r3, #1
 811e37e:	b29a      	uxth	r2, r3
 811e380:	68fb      	ldr	r3, [r7, #12]
 811e382:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811e384:	4293      	cmp	r3, r2
 811e386:	bf28      	it	cs
 811e388:	4613      	movcs	r3, r2
 811e38a:	853b      	strh	r3, [r7, #40]	@ 0x28
  mss_local = mss_local ? mss_local : pcb->mss;
 811e38c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 811e38e:	2b00      	cmp	r3, #0
 811e390:	d102      	bne.n	811e398 <tcp_write+0x88>
 811e392:	68fb      	ldr	r3, [r7, #12]
 811e394:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811e396:	e000      	b.n	811e39a <tcp_write+0x8a>
 811e398:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 811e39a:	853b      	strh	r3, [r7, #40]	@ 0x28
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 811e39c:	68bb      	ldr	r3, [r7, #8]
 811e39e:	2b00      	cmp	r3, #0
 811e3a0:	d109      	bne.n	811e3b6 <tcp_write+0xa6>
 811e3a2:	4b8c      	ldr	r3, [pc, #560]	@ (811e5d4 <tcp_write+0x2c4>)
 811e3a4:	f240 12ad 	movw	r2, #429	@ 0x1ad
 811e3a8:	498d      	ldr	r1, [pc, #564]	@ (811e5e0 <tcp_write+0x2d0>)
 811e3aa:	488c      	ldr	r0, [pc, #560]	@ (811e5dc <tcp_write+0x2cc>)
 811e3ac:	f003 ff5a 	bl	8122264 <iprintf>
 811e3b0:	f06f 030f 	mvn.w	r3, #15
 811e3b4:	e359      	b.n	811ea6a <tcp_write+0x75a>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 811e3b6:	88fb      	ldrh	r3, [r7, #6]
 811e3b8:	4619      	mov	r1, r3
 811e3ba:	68f8      	ldr	r0, [r7, #12]
 811e3bc:	f7ff ff2e 	bl	811e21c <tcp_write_checks>
 811e3c0:	4603      	mov	r3, r0
 811e3c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (err != ERR_OK) {
 811e3c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 811e3ca:	2b00      	cmp	r3, #0
 811e3cc:	d002      	beq.n	811e3d4 <tcp_write+0xc4>
    return err;
 811e3ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 811e3d2:	e34a      	b.n	811ea6a <tcp_write+0x75a>
  }
  queuelen = pcb->snd_queuelen;
 811e3d4:	68fb      	ldr	r3, [r7, #12]
 811e3d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811e3da:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 811e3de:	2300      	movs	r3, #0
 811e3e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 811e3e4:	68fb      	ldr	r3, [r7, #12]
 811e3e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811e3e8:	2b00      	cmp	r3, #0
 811e3ea:	f000 8127 	beq.w	811e63c <tcp_write+0x32c>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 811e3ee:	68fb      	ldr	r3, [r7, #12]
 811e3f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811e3f2:	643b      	str	r3, [r7, #64]	@ 0x40
 811e3f4:	e002      	b.n	811e3fc <tcp_write+0xec>
         last_unsent = last_unsent->next);
 811e3f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811e3f8:	681b      	ldr	r3, [r3, #0]
 811e3fa:	643b      	str	r3, [r7, #64]	@ 0x40
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 811e3fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811e3fe:	681b      	ldr	r3, [r3, #0]
 811e400:	2b00      	cmp	r3, #0
 811e402:	d1f8      	bne.n	811e3f6 <tcp_write+0xe6>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 811e404:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811e406:	7b1b      	ldrb	r3, [r3, #12]
 811e408:	009b      	lsls	r3, r3, #2
 811e40a:	b29b      	uxth	r3, r3
 811e40c:	f003 0304 	and.w	r3, r3, #4
 811e410:	84bb      	strh	r3, [r7, #36]	@ 0x24
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 811e412:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 811e414:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811e416:	891b      	ldrh	r3, [r3, #8]
 811e418:	4619      	mov	r1, r3
 811e41a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 811e41c:	440b      	add	r3, r1
 811e41e:	429a      	cmp	r2, r3
 811e420:	da06      	bge.n	811e430 <tcp_write+0x120>
 811e422:	4b6c      	ldr	r3, [pc, #432]	@ (811e5d4 <tcp_write+0x2c4>)
 811e424:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 811e428:	496e      	ldr	r1, [pc, #440]	@ (811e5e4 <tcp_write+0x2d4>)
 811e42a:	486c      	ldr	r0, [pc, #432]	@ (811e5dc <tcp_write+0x2cc>)
 811e42c:	f003 ff1a 	bl	8122264 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 811e430:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811e432:	891a      	ldrh	r2, [r3, #8]
 811e434:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 811e436:	4413      	add	r3, r2
 811e438:	b29b      	uxth	r3, r3
 811e43a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 811e43c:	1ad3      	subs	r3, r2, r3
 811e43e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
     * function.
     */
#if TCP_OVERSIZE
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 811e442:	68fb      	ldr	r3, [r7, #12]
 811e444:	f8b3 2068 	ldrh.w	r2, [r3, #104]	@ 0x68
 811e448:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811e44a:	895b      	ldrh	r3, [r3, #10]
 811e44c:	429a      	cmp	r2, r3
 811e44e:	d006      	beq.n	811e45e <tcp_write+0x14e>
 811e450:	4b60      	ldr	r3, [pc, #384]	@ (811e5d4 <tcp_write+0x2c4>)
 811e452:	f240 12f3 	movw	r2, #499	@ 0x1f3
 811e456:	4964      	ldr	r1, [pc, #400]	@ (811e5e8 <tcp_write+0x2d8>)
 811e458:	4860      	ldr	r0, [pc, #384]	@ (811e5dc <tcp_write+0x2cc>)
 811e45a:	f003 ff03 	bl	8122264 <iprintf>
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 811e45e:	68fb      	ldr	r3, [r7, #12]
 811e460:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 811e464:	82fb      	strh	r3, [r7, #22]
    if (oversize > 0) {
 811e466:	8afb      	ldrh	r3, [r7, #22]
 811e468:	2b00      	cmp	r3, #0
 811e46a:	d02e      	beq.n	811e4ca <tcp_write+0x1ba>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 811e46c:	8afb      	ldrh	r3, [r7, #22]
 811e46e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 811e472:	429a      	cmp	r2, r3
 811e474:	d206      	bcs.n	811e484 <tcp_write+0x174>
 811e476:	4b57      	ldr	r3, [pc, #348]	@ (811e5d4 <tcp_write+0x2c4>)
 811e478:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 811e47c:	495b      	ldr	r1, [pc, #364]	@ (811e5ec <tcp_write+0x2dc>)
 811e47e:	4857      	ldr	r0, [pc, #348]	@ (811e5dc <tcp_write+0x2cc>)
 811e480:	f003 fef0 	bl	8122264 <iprintf>
      seg = last_unsent;
 811e484:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811e486:	657b      	str	r3, [r7, #84]	@ 0x54
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 811e488:	8afb      	ldrh	r3, [r7, #22]
 811e48a:	88fa      	ldrh	r2, [r7, #6]
 811e48c:	4293      	cmp	r3, r2
 811e48e:	bf28      	it	cs
 811e490:	4613      	movcs	r3, r2
 811e492:	b29b      	uxth	r3, r3
 811e494:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 811e498:	4293      	cmp	r3, r2
 811e49a:	bf28      	it	cs
 811e49c:	4613      	movcs	r3, r2
 811e49e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      pos += oversize_used;
 811e4a2:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 811e4a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 811e4aa:	4413      	add	r3, r2
 811e4ac:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
      oversize -= oversize_used;
 811e4b0:	8afa      	ldrh	r2, [r7, #22]
 811e4b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 811e4b6:	1ad3      	subs	r3, r2, r3
 811e4b8:	b29b      	uxth	r3, r3
 811e4ba:	82fb      	strh	r3, [r7, #22]
      space -= oversize_used;
 811e4bc:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 811e4c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 811e4c4:	1ad3      	subs	r3, r2, r3
 811e4c6:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 811e4ca:	8afb      	ldrh	r3, [r7, #22]
 811e4cc:	2b00      	cmp	r3, #0
 811e4ce:	d00b      	beq.n	811e4e8 <tcp_write+0x1d8>
 811e4d0:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 811e4d4:	88fb      	ldrh	r3, [r7, #6]
 811e4d6:	429a      	cmp	r2, r3
 811e4d8:	d006      	beq.n	811e4e8 <tcp_write+0x1d8>
 811e4da:	4b3e      	ldr	r3, [pc, #248]	@ (811e5d4 <tcp_write+0x2c4>)
 811e4dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 811e4e0:	4943      	ldr	r1, [pc, #268]	@ (811e5f0 <tcp_write+0x2e0>)
 811e4e2:	483e      	ldr	r0, [pc, #248]	@ (811e5dc <tcp_write+0x2cc>)
 811e4e4:	f003 febe 	bl	8122264 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 811e4e8:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 811e4ec:	88fb      	ldrh	r3, [r7, #6]
 811e4ee:	429a      	cmp	r2, r3
 811e4f0:	f080 8172 	bcs.w	811e7d8 <tcp_write+0x4c8>
 811e4f4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 811e4f8:	2b00      	cmp	r3, #0
 811e4fa:	f000 816d 	beq.w	811e7d8 <tcp_write+0x4c8>
 811e4fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811e500:	891b      	ldrh	r3, [r3, #8]
 811e502:	2b00      	cmp	r3, #0
 811e504:	f000 8168 	beq.w	811e7d8 <tcp_write+0x4c8>
      u16_t seglen = LWIP_MIN(space, len - pos);
 811e508:	88fa      	ldrh	r2, [r7, #6]
 811e50a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 811e50e:	1ad2      	subs	r2, r2, r3
 811e510:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 811e514:	4293      	cmp	r3, r2
 811e516:	bfa8      	it	ge
 811e518:	4613      	movge	r3, r2
 811e51a:	847b      	strh	r3, [r7, #34]	@ 0x22
      seg = last_unsent;
 811e51c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811e51e:	657b      	str	r3, [r7, #84]	@ 0x54

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 811e520:	797b      	ldrb	r3, [r7, #5]
 811e522:	f003 0301 	and.w	r3, r3, #1
 811e526:	2b00      	cmp	r3, #0
 811e528:	d02b      	beq.n	811e582 <tcp_write+0x272>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 811e52a:	f107 0016 	add.w	r0, r7, #22
 811e52e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 811e532:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 811e534:	2301      	movs	r3, #1
 811e536:	9302      	str	r3, [sp, #8]
 811e538:	797b      	ldrb	r3, [r7, #5]
 811e53a:	9301      	str	r3, [sp, #4]
 811e53c:	68fb      	ldr	r3, [r7, #12]
 811e53e:	9300      	str	r3, [sp, #0]
 811e540:	4603      	mov	r3, r0
 811e542:	2000      	movs	r0, #0
 811e544:	f7ff fdf0 	bl	811e128 <tcp_pbuf_prealloc>
 811e548:	63f8      	str	r0, [r7, #60]	@ 0x3c
 811e54a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811e54c:	2b00      	cmp	r3, #0
 811e54e:	f000 825a 	beq.w	811ea06 <tcp_write+0x6f6>
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
 811e552:	8afb      	ldrh	r3, [r7, #22]
 811e554:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 811e558:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811e55a:	6858      	ldr	r0, [r3, #4]
 811e55c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 811e560:	68ba      	ldr	r2, [r7, #8]
 811e562:	4413      	add	r3, r2
 811e564:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 811e566:	4619      	mov	r1, r3
 811e568:	f004 f971 	bl	812284e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 811e56c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 811e56e:	f7fa fe93 	bl	8119298 <pbuf_clen>
 811e572:	4603      	mov	r3, r0
 811e574:	461a      	mov	r2, r3
 811e576:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 811e57a:	4413      	add	r3, r2
 811e57c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 811e580:	e055      	b.n	811e62e <tcp_write+0x31e>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 811e582:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811e584:	685b      	ldr	r3, [r3, #4]
 811e586:	63bb      	str	r3, [r7, #56]	@ 0x38
 811e588:	e002      	b.n	811e590 <tcp_write+0x280>
 811e58a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811e58c:	681b      	ldr	r3, [r3, #0]
 811e58e:	63bb      	str	r3, [r7, #56]	@ 0x38
 811e590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811e592:	681b      	ldr	r3, [r3, #0]
 811e594:	2b00      	cmp	r3, #0
 811e596:	d1f8      	bne.n	811e58a <tcp_write+0x27a>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 811e598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811e59a:	7b1b      	ldrb	r3, [r3, #12]
 811e59c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 811e5a0:	2b00      	cmp	r3, #0
 811e5a2:	d129      	bne.n	811e5f8 <tcp_write+0x2e8>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 811e5a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 811e5a6:	685b      	ldr	r3, [r3, #4]
 811e5a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 811e5aa:	8952      	ldrh	r2, [r2, #10]
 811e5ac:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 811e5ae:	68ba      	ldr	r2, [r7, #8]
 811e5b0:	429a      	cmp	r2, r3
 811e5b2:	d121      	bne.n	811e5f8 <tcp_write+0x2e8>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 811e5b4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 811e5b8:	2b00      	cmp	r3, #0
 811e5ba:	d006      	beq.n	811e5ca <tcp_write+0x2ba>
 811e5bc:	4b05      	ldr	r3, [pc, #20]	@ (811e5d4 <tcp_write+0x2c4>)
 811e5be:	f240 2231 	movw	r2, #561	@ 0x231
 811e5c2:	490c      	ldr	r1, [pc, #48]	@ (811e5f4 <tcp_write+0x2e4>)
 811e5c4:	4805      	ldr	r0, [pc, #20]	@ (811e5dc <tcp_write+0x2cc>)
 811e5c6:	f003 fe4d 	bl	8122264 <iprintf>
          extendlen = seglen;
 811e5ca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 811e5cc:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 811e5d0:	e02d      	b.n	811e62e <tcp_write+0x31e>
 811e5d2:	bf00      	nop
 811e5d4:	08127410 	.word	0x08127410
 811e5d8:	081275f0 	.word	0x081275f0
 811e5dc:	081274a4 	.word	0x081274a4
 811e5e0:	08127608 	.word	0x08127608
 811e5e4:	0812763c 	.word	0x0812763c
 811e5e8:	08127654 	.word	0x08127654
 811e5ec:	08127684 	.word	0x08127684
 811e5f0:	081276a4 	.word	0x081276a4
 811e5f4:	081276c4 	.word	0x081276c4
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 811e5f8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 811e5fa:	2201      	movs	r2, #1
 811e5fc:	4619      	mov	r1, r3
 811e5fe:	2000      	movs	r0, #0
 811e600:	f7fa fad8 	bl	8118bb4 <pbuf_alloc>
 811e604:	63f8      	str	r0, [r7, #60]	@ 0x3c
 811e606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811e608:	2b00      	cmp	r3, #0
 811e60a:	f000 81fe 	beq.w	811ea0a <tcp_write+0x6fa>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 811e60e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 811e612:	68ba      	ldr	r2, [r7, #8]
 811e614:	441a      	add	r2, r3
 811e616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811e618:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 811e61a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 811e61c:	f7fa fe3c 	bl	8119298 <pbuf_clen>
 811e620:	4603      	mov	r3, r0
 811e622:	461a      	mov	r2, r3
 811e624:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 811e628:	4413      	add	r3, r2
 811e62a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 811e62e:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 811e632:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 811e634:	4413      	add	r3, r2
 811e636:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 811e63a:	e0cd      	b.n	811e7d8 <tcp_write+0x4c8>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 811e63c:	68fb      	ldr	r3, [r7, #12]
 811e63e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 811e642:	2b00      	cmp	r3, #0
 811e644:	f000 80c8 	beq.w	811e7d8 <tcp_write+0x4c8>
 811e648:	4b72      	ldr	r3, [pc, #456]	@ (811e814 <tcp_write+0x504>)
 811e64a:	f240 224a 	movw	r2, #586	@ 0x24a
 811e64e:	4972      	ldr	r1, [pc, #456]	@ (811e818 <tcp_write+0x508>)
 811e650:	4872      	ldr	r0, [pc, #456]	@ (811e81c <tcp_write+0x50c>)
 811e652:	f003 fe07 	bl	8122264 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 811e656:	e0bf      	b.n	811e7d8 <tcp_write+0x4c8>
    struct pbuf *p;
    u16_t left = len - pos;
 811e658:	88fa      	ldrh	r2, [r7, #6]
 811e65a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 811e65e:	1ad3      	subs	r3, r2, r3
 811e660:	843b      	strh	r3, [r7, #32]
    u16_t max_len = mss_local - optlen;
 811e662:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 811e666:	b29b      	uxth	r3, r3
 811e668:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 811e66a:	1ad3      	subs	r3, r2, r3
 811e66c:	83fb      	strh	r3, [r7, #30]
    u16_t seglen = LWIP_MIN(left, max_len);
 811e66e:	8bfa      	ldrh	r2, [r7, #30]
 811e670:	8c3b      	ldrh	r3, [r7, #32]
 811e672:	4293      	cmp	r3, r2
 811e674:	bf28      	it	cs
 811e676:	4613      	movcs	r3, r2
 811e678:	83bb      	strh	r3, [r7, #28]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 811e67a:	797b      	ldrb	r3, [r7, #5]
 811e67c:	f003 0301 	and.w	r3, r3, #1
 811e680:	2b00      	cmp	r3, #0
 811e682:	d036      	beq.n	811e6f2 <tcp_write+0x3e2>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 811e684:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 811e688:	b29a      	uxth	r2, r3
 811e68a:	8bbb      	ldrh	r3, [r7, #28]
 811e68c:	4413      	add	r3, r2
 811e68e:	b299      	uxth	r1, r3
 811e690:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 811e692:	2b00      	cmp	r3, #0
 811e694:	bf0c      	ite	eq
 811e696:	2301      	moveq	r3, #1
 811e698:	2300      	movne	r3, #0
 811e69a:	b2db      	uxtb	r3, r3
 811e69c:	f107 0016 	add.w	r0, r7, #22
 811e6a0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 811e6a2:	9302      	str	r3, [sp, #8]
 811e6a4:	797b      	ldrb	r3, [r7, #5]
 811e6a6:	9301      	str	r3, [sp, #4]
 811e6a8:	68fb      	ldr	r3, [r7, #12]
 811e6aa:	9300      	str	r3, [sp, #0]
 811e6ac:	4603      	mov	r3, r0
 811e6ae:	2036      	movs	r0, #54	@ 0x36
 811e6b0:	f7ff fd3a 	bl	811e128 <tcp_pbuf_prealloc>
 811e6b4:	6378      	str	r0, [r7, #52]	@ 0x34
 811e6b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811e6b8:	2b00      	cmp	r3, #0
 811e6ba:	f000 81a8 	beq.w	811ea0e <tcp_write+0x6fe>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 811e6be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811e6c0:	895b      	ldrh	r3, [r3, #10]
 811e6c2:	8bba      	ldrh	r2, [r7, #28]
 811e6c4:	429a      	cmp	r2, r3
 811e6c6:	d906      	bls.n	811e6d6 <tcp_write+0x3c6>
 811e6c8:	4b52      	ldr	r3, [pc, #328]	@ (811e814 <tcp_write+0x504>)
 811e6ca:	f240 2266 	movw	r2, #614	@ 0x266
 811e6ce:	4954      	ldr	r1, [pc, #336]	@ (811e820 <tcp_write+0x510>)
 811e6d0:	4852      	ldr	r0, [pc, #328]	@ (811e81c <tcp_write+0x50c>)
 811e6d2:	f003 fdc7 	bl	8122264 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 811e6d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811e6d8:	685a      	ldr	r2, [r3, #4]
 811e6da:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 811e6de:	18d0      	adds	r0, r2, r3
 811e6e0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 811e6e4:	68ba      	ldr	r2, [r7, #8]
 811e6e6:	4413      	add	r3, r2
 811e6e8:	8bba      	ldrh	r2, [r7, #28]
 811e6ea:	4619      	mov	r1, r3
 811e6ec:	f004 f8af 	bl	812284e <memcpy>
 811e6f0:	e02f      	b.n	811e752 <tcp_write+0x442>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 811e6f2:	8afb      	ldrh	r3, [r7, #22]
 811e6f4:	2b00      	cmp	r3, #0
 811e6f6:	d006      	beq.n	811e706 <tcp_write+0x3f6>
 811e6f8:	4b46      	ldr	r3, [pc, #280]	@ (811e814 <tcp_write+0x504>)
 811e6fa:	f240 2271 	movw	r2, #625	@ 0x271
 811e6fe:	4949      	ldr	r1, [pc, #292]	@ (811e824 <tcp_write+0x514>)
 811e700:	4846      	ldr	r0, [pc, #280]	@ (811e81c <tcp_write+0x50c>)
 811e702:	f003 fdaf 	bl	8122264 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 811e706:	8bbb      	ldrh	r3, [r7, #28]
 811e708:	2201      	movs	r2, #1
 811e70a:	4619      	mov	r1, r3
 811e70c:	2036      	movs	r0, #54	@ 0x36
 811e70e:	f7fa fa51 	bl	8118bb4 <pbuf_alloc>
 811e712:	61b8      	str	r0, [r7, #24]
 811e714:	69bb      	ldr	r3, [r7, #24]
 811e716:	2b00      	cmp	r3, #0
 811e718:	f000 817b 	beq.w	811ea12 <tcp_write+0x702>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 811e71c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 811e720:	68ba      	ldr	r2, [r7, #8]
 811e722:	441a      	add	r2, r3
 811e724:	69bb      	ldr	r3, [r7, #24]
 811e726:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 811e728:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 811e72c:	b29b      	uxth	r3, r3
 811e72e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 811e732:	4619      	mov	r1, r3
 811e734:	2036      	movs	r0, #54	@ 0x36
 811e736:	f7fa fa3d 	bl	8118bb4 <pbuf_alloc>
 811e73a:	6378      	str	r0, [r7, #52]	@ 0x34
 811e73c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811e73e:	2b00      	cmp	r3, #0
 811e740:	d103      	bne.n	811e74a <tcp_write+0x43a>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 811e742:	69b8      	ldr	r0, [r7, #24]
 811e744:	f7fa fd1a 	bl	811917c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 811e748:	e166      	b.n	811ea18 <tcp_write+0x708>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 811e74a:	69b9      	ldr	r1, [r7, #24]
 811e74c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 811e74e:	f7fa fde3 	bl	8119318 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 811e752:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 811e754:	f7fa fda0 	bl	8119298 <pbuf_clen>
 811e758:	4603      	mov	r3, r0
 811e75a:	461a      	mov	r2, r3
 811e75c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 811e760:	4413      	add	r3, r2
 811e762:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 811e766:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 811e76a:	2b10      	cmp	r3, #16
 811e76c:	d903      	bls.n	811e776 <tcp_write+0x466>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 811e76e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 811e770:	f7fa fd04 	bl	811917c <pbuf_free>
      goto memerr;
 811e774:	e150      	b.n	811ea18 <tcp_write+0x708>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 811e776:	68fb      	ldr	r3, [r7, #12]
 811e778:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 811e77a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 811e77e:	441a      	add	r2, r3
 811e780:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 811e784:	9300      	str	r3, [sp, #0]
 811e786:	4613      	mov	r3, r2
 811e788:	2200      	movs	r2, #0
 811e78a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 811e78c:	68f8      	ldr	r0, [r7, #12]
 811e78e:	f7ff fc2b 	bl	811dfe8 <tcp_create_segment>
 811e792:	6578      	str	r0, [r7, #84]	@ 0x54
 811e794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 811e796:	2b00      	cmp	r3, #0
 811e798:	f000 813d 	beq.w	811ea16 <tcp_write+0x706>
      goto memerr;
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = oversize;
 811e79c:	8afa      	ldrh	r2, [r7, #22]
 811e79e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 811e7a0:	815a      	strh	r2, [r3, #10]
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 811e7a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 811e7a4:	2b00      	cmp	r3, #0
 811e7a6:	d102      	bne.n	811e7ae <tcp_write+0x49e>
      queue = seg;
 811e7a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 811e7aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 811e7ac:	e00c      	b.n	811e7c8 <tcp_write+0x4b8>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 811e7ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811e7b0:	2b00      	cmp	r3, #0
 811e7b2:	d106      	bne.n	811e7c2 <tcp_write+0x4b2>
 811e7b4:	4b17      	ldr	r3, [pc, #92]	@ (811e814 <tcp_write+0x504>)
 811e7b6:	f240 22ab 	movw	r2, #683	@ 0x2ab
 811e7ba:	491b      	ldr	r1, [pc, #108]	@ (811e828 <tcp_write+0x518>)
 811e7bc:	4817      	ldr	r0, [pc, #92]	@ (811e81c <tcp_write+0x50c>)
 811e7be:	f003 fd51 	bl	8122264 <iprintf>
      prev_seg->next = seg;
 811e7c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811e7c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 811e7c6:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 811e7c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 811e7ca:	653b      	str	r3, [r7, #80]	@ 0x50

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 811e7cc:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 811e7d0:	8bbb      	ldrh	r3, [r7, #28]
 811e7d2:	4413      	add	r3, r2
 811e7d4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
  while (pos < len) {
 811e7d8:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 811e7dc:	88fb      	ldrh	r3, [r7, #6]
 811e7de:	429a      	cmp	r2, r3
 811e7e0:	f4ff af3a 	bcc.w	811e658 <tcp_write+0x348>
  /*
   * All three segmentation phases were successful. We can commit the
   * transaction.
   */
#if TCP_OVERSIZE_DBGCHECK
  if ((last_unsent != NULL) && (oversize_add != 0)) {
 811e7e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811e7e6:	2b00      	cmp	r3, #0
 811e7e8:	d00b      	beq.n	811e802 <tcp_write+0x4f2>
 811e7ea:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 811e7ee:	2b00      	cmp	r3, #0
 811e7f0:	d007      	beq.n	811e802 <tcp_write+0x4f2>
    last_unsent->oversize_left += oversize_add;
 811e7f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811e7f4:	895a      	ldrh	r2, [r3, #10]
 811e7f6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 811e7fa:	4413      	add	r3, r2
 811e7fc:	b29a      	uxth	r2, r3
 811e7fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811e800:	815a      	strh	r2, [r3, #10]
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 811e802:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 811e806:	2b00      	cmp	r3, #0
 811e808:	d052      	beq.n	811e8b0 <tcp_write+0x5a0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 811e80a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811e80c:	685b      	ldr	r3, [r3, #4]
 811e80e:	633b      	str	r3, [r7, #48]	@ 0x30
 811e810:	e02e      	b.n	811e870 <tcp_write+0x560>
 811e812:	bf00      	nop
 811e814:	08127410 	.word	0x08127410
 811e818:	081276f0 	.word	0x081276f0
 811e81c:	081274a4 	.word	0x081274a4
 811e820:	08127720 	.word	0x08127720
 811e824:	08127760 	.word	0x08127760
 811e828:	08127770 	.word	0x08127770
      p->tot_len += oversize_used;
 811e82c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811e82e:	891a      	ldrh	r2, [r3, #8]
 811e830:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 811e834:	4413      	add	r3, r2
 811e836:	b29a      	uxth	r2, r3
 811e838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811e83a:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 811e83c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811e83e:	681b      	ldr	r3, [r3, #0]
 811e840:	2b00      	cmp	r3, #0
 811e842:	d112      	bne.n	811e86a <tcp_write+0x55a>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 811e844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811e846:	685b      	ldr	r3, [r3, #4]
 811e848:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 811e84a:	8952      	ldrh	r2, [r2, #10]
 811e84c:	4413      	add	r3, r2
 811e84e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 811e852:	68b9      	ldr	r1, [r7, #8]
 811e854:	4618      	mov	r0, r3
 811e856:	f003 fffa 	bl	812284e <memcpy>
        p->len += oversize_used;
 811e85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811e85c:	895a      	ldrh	r2, [r3, #10]
 811e85e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 811e862:	4413      	add	r3, r2
 811e864:	b29a      	uxth	r2, r3
 811e866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811e868:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 811e86a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811e86c:	681b      	ldr	r3, [r3, #0]
 811e86e:	633b      	str	r3, [r7, #48]	@ 0x30
 811e870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811e872:	2b00      	cmp	r3, #0
 811e874:	d1da      	bne.n	811e82c <tcp_write+0x51c>
      }
    }
    last_unsent->len += oversize_used;
 811e876:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811e878:	891a      	ldrh	r2, [r3, #8]
 811e87a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 811e87e:	4413      	add	r3, r2
 811e880:	b29a      	uxth	r2, r3
 811e882:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811e884:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 811e886:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811e888:	895b      	ldrh	r3, [r3, #10]
 811e88a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 811e88e:	429a      	cmp	r2, r3
 811e890:	d906      	bls.n	811e8a0 <tcp_write+0x590>
 811e892:	4b78      	ldr	r3, [pc, #480]	@ (811ea74 <tcp_write+0x764>)
 811e894:	f240 22d3 	movw	r2, #723	@ 0x2d3
 811e898:	4977      	ldr	r1, [pc, #476]	@ (811ea78 <tcp_write+0x768>)
 811e89a:	4878      	ldr	r0, [pc, #480]	@ (811ea7c <tcp_write+0x76c>)
 811e89c:	f003 fce2 	bl	8122264 <iprintf>
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
 811e8a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811e8a2:	895a      	ldrh	r2, [r3, #10]
 811e8a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 811e8a8:	1ad3      	subs	r3, r2, r3
 811e8aa:	b29a      	uxth	r2, r3
 811e8ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811e8ae:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 811e8b0:	8afa      	ldrh	r2, [r7, #22]
 811e8b2:	68fb      	ldr	r3, [r7, #12]
 811e8b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 811e8b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811e8ba:	2b00      	cmp	r3, #0
 811e8bc:	d018      	beq.n	811e8f0 <tcp_write+0x5e0>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 811e8be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811e8c0:	2b00      	cmp	r3, #0
 811e8c2:	d106      	bne.n	811e8d2 <tcp_write+0x5c2>
 811e8c4:	4b6b      	ldr	r3, [pc, #428]	@ (811ea74 <tcp_write+0x764>)
 811e8c6:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 811e8ca:	496d      	ldr	r1, [pc, #436]	@ (811ea80 <tcp_write+0x770>)
 811e8cc:	486b      	ldr	r0, [pc, #428]	@ (811ea7c <tcp_write+0x76c>)
 811e8ce:	f003 fcc9 	bl	8122264 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 811e8d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811e8d4:	685b      	ldr	r3, [r3, #4]
 811e8d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 811e8d8:	4618      	mov	r0, r3
 811e8da:	f7fa fd1d 	bl	8119318 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 811e8de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811e8e0:	891a      	ldrh	r2, [r3, #8]
 811e8e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811e8e4:	891b      	ldrh	r3, [r3, #8]
 811e8e6:	4413      	add	r3, r2
 811e8e8:	b29a      	uxth	r2, r3
 811e8ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811e8ec:	811a      	strh	r2, [r3, #8]
 811e8ee:	e03c      	b.n	811e96a <tcp_write+0x65a>
  } else if (extendlen > 0) {
 811e8f0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 811e8f4:	2b00      	cmp	r3, #0
 811e8f6:	d038      	beq.n	811e96a <tcp_write+0x65a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 811e8f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811e8fa:	2b00      	cmp	r3, #0
 811e8fc:	d003      	beq.n	811e906 <tcp_write+0x5f6>
 811e8fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811e900:	685b      	ldr	r3, [r3, #4]
 811e902:	2b00      	cmp	r3, #0
 811e904:	d106      	bne.n	811e914 <tcp_write+0x604>
 811e906:	4b5b      	ldr	r3, [pc, #364]	@ (811ea74 <tcp_write+0x764>)
 811e908:	f240 22e6 	movw	r2, #742	@ 0x2e6
 811e90c:	495d      	ldr	r1, [pc, #372]	@ (811ea84 <tcp_write+0x774>)
 811e90e:	485b      	ldr	r0, [pc, #364]	@ (811ea7c <tcp_write+0x76c>)
 811e910:	f003 fca8 	bl	8122264 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 811e914:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811e916:	685b      	ldr	r3, [r3, #4]
 811e918:	62fb      	str	r3, [r7, #44]	@ 0x2c
 811e91a:	e00a      	b.n	811e932 <tcp_write+0x622>
      p->tot_len += extendlen;
 811e91c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811e91e:	891a      	ldrh	r2, [r3, #8]
 811e920:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 811e924:	4413      	add	r3, r2
 811e926:	b29a      	uxth	r2, r3
 811e928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811e92a:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 811e92c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811e92e:	681b      	ldr	r3, [r3, #0]
 811e930:	62fb      	str	r3, [r7, #44]	@ 0x2c
 811e932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811e934:	681b      	ldr	r3, [r3, #0]
 811e936:	2b00      	cmp	r3, #0
 811e938:	d1f0      	bne.n	811e91c <tcp_write+0x60c>
    }
    p->tot_len += extendlen;
 811e93a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811e93c:	891a      	ldrh	r2, [r3, #8]
 811e93e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 811e942:	4413      	add	r3, r2
 811e944:	b29a      	uxth	r2, r3
 811e946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811e948:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 811e94a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811e94c:	895a      	ldrh	r2, [r3, #10]
 811e94e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 811e952:	4413      	add	r3, r2
 811e954:	b29a      	uxth	r2, r3
 811e956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811e958:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 811e95a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811e95c:	891a      	ldrh	r2, [r3, #8]
 811e95e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 811e962:	4413      	add	r3, r2
 811e964:	b29a      	uxth	r2, r3
 811e966:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811e968:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 811e96a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811e96c:	2b00      	cmp	r3, #0
 811e96e:	d103      	bne.n	811e978 <tcp_write+0x668>
    pcb->unsent = queue;
 811e970:	68fb      	ldr	r3, [r7, #12]
 811e972:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 811e974:	66da      	str	r2, [r3, #108]	@ 0x6c
 811e976:	e002      	b.n	811e97e <tcp_write+0x66e>
  } else {
    last_unsent->next = queue;
 811e978:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 811e97a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 811e97c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 811e97e:	68fb      	ldr	r3, [r7, #12]
 811e980:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 811e982:	88fb      	ldrh	r3, [r7, #6]
 811e984:	441a      	add	r2, r3
 811e986:	68fb      	ldr	r3, [r7, #12]
 811e988:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 811e98a:	68fb      	ldr	r3, [r7, #12]
 811e98c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 811e990:	88fb      	ldrh	r3, [r7, #6]
 811e992:	1ad3      	subs	r3, r2, r3
 811e994:	b29a      	uxth	r2, r3
 811e996:	68fb      	ldr	r3, [r7, #12]
 811e998:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 811e99c:	68fb      	ldr	r3, [r7, #12]
 811e99e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 811e9a2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 811e9a6:	68fb      	ldr	r3, [r7, #12]
 811e9a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811e9ac:	2b00      	cmp	r3, #0
 811e9ae:	d00e      	beq.n	811e9ce <tcp_write+0x6be>
    LWIP_ASSERT("tcp_write: valid queue length",
 811e9b0:	68fb      	ldr	r3, [r7, #12]
 811e9b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811e9b4:	2b00      	cmp	r3, #0
 811e9b6:	d10a      	bne.n	811e9ce <tcp_write+0x6be>
 811e9b8:	68fb      	ldr	r3, [r7, #12]
 811e9ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811e9bc:	2b00      	cmp	r3, #0
 811e9be:	d106      	bne.n	811e9ce <tcp_write+0x6be>
 811e9c0:	4b2c      	ldr	r3, [pc, #176]	@ (811ea74 <tcp_write+0x764>)
 811e9c2:	f240 3212 	movw	r2, #786	@ 0x312
 811e9c6:	4930      	ldr	r1, [pc, #192]	@ (811ea88 <tcp_write+0x778>)
 811e9c8:	482c      	ldr	r0, [pc, #176]	@ (811ea7c <tcp_write+0x76c>)
 811e9ca:	f003 fc4b 	bl	8122264 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 811e9ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 811e9d0:	2b00      	cmp	r3, #0
 811e9d2:	d016      	beq.n	811ea02 <tcp_write+0x6f2>
 811e9d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 811e9d6:	691b      	ldr	r3, [r3, #16]
 811e9d8:	2b00      	cmp	r3, #0
 811e9da:	d012      	beq.n	811ea02 <tcp_write+0x6f2>
 811e9dc:	797b      	ldrb	r3, [r7, #5]
 811e9de:	f003 0302 	and.w	r3, r3, #2
 811e9e2:	2b00      	cmp	r3, #0
 811e9e4:	d10d      	bne.n	811ea02 <tcp_write+0x6f2>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 811e9e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 811e9e8:	691b      	ldr	r3, [r3, #16]
 811e9ea:	899b      	ldrh	r3, [r3, #12]
 811e9ec:	b29c      	uxth	r4, r3
 811e9ee:	2008      	movs	r0, #8
 811e9f0:	f7f5 fc24 	bl	811423c <lwip_htons>
 811e9f4:	4603      	mov	r3, r0
 811e9f6:	461a      	mov	r2, r3
 811e9f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 811e9fa:	691b      	ldr	r3, [r3, #16]
 811e9fc:	4322      	orrs	r2, r4
 811e9fe:	b292      	uxth	r2, r2
 811ea00:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 811ea02:	2300      	movs	r3, #0
 811ea04:	e031      	b.n	811ea6a <tcp_write+0x75a>
          goto memerr;
 811ea06:	bf00      	nop
 811ea08:	e006      	b.n	811ea18 <tcp_write+0x708>
            goto memerr;
 811ea0a:	bf00      	nop
 811ea0c:	e004      	b.n	811ea18 <tcp_write+0x708>
        goto memerr;
 811ea0e:	bf00      	nop
 811ea10:	e002      	b.n	811ea18 <tcp_write+0x708>
        goto memerr;
 811ea12:	bf00      	nop
 811ea14:	e000      	b.n	811ea18 <tcp_write+0x708>
      goto memerr;
 811ea16:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 811ea18:	68fb      	ldr	r3, [r7, #12]
 811ea1a:	8b5b      	ldrh	r3, [r3, #26]
 811ea1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 811ea20:	b29a      	uxth	r2, r3
 811ea22:	68fb      	ldr	r3, [r7, #12]
 811ea24:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 811ea26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811ea28:	2b00      	cmp	r3, #0
 811ea2a:	d002      	beq.n	811ea32 <tcp_write+0x722>
    pbuf_free(concat_p);
 811ea2c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 811ea2e:	f7fa fba5 	bl	811917c <pbuf_free>
  }
  if (queue != NULL) {
 811ea32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 811ea34:	2b00      	cmp	r3, #0
 811ea36:	d002      	beq.n	811ea3e <tcp_write+0x72e>
    tcp_segs_free(queue);
 811ea38:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 811ea3a:	f7fc f9c5 	bl	811adc8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 811ea3e:	68fb      	ldr	r3, [r7, #12]
 811ea40:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811ea44:	2b00      	cmp	r3, #0
 811ea46:	d00e      	beq.n	811ea66 <tcp_write+0x756>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 811ea48:	68fb      	ldr	r3, [r7, #12]
 811ea4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811ea4c:	2b00      	cmp	r3, #0
 811ea4e:	d10a      	bne.n	811ea66 <tcp_write+0x756>
 811ea50:	68fb      	ldr	r3, [r7, #12]
 811ea52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811ea54:	2b00      	cmp	r3, #0
 811ea56:	d106      	bne.n	811ea66 <tcp_write+0x756>
 811ea58:	4b06      	ldr	r3, [pc, #24]	@ (811ea74 <tcp_write+0x764>)
 811ea5a:	f240 3227 	movw	r2, #807	@ 0x327
 811ea5e:	490a      	ldr	r1, [pc, #40]	@ (811ea88 <tcp_write+0x778>)
 811ea60:	4806      	ldr	r0, [pc, #24]	@ (811ea7c <tcp_write+0x76c>)
 811ea62:	f003 fbff 	bl	8122264 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 811ea66:	f04f 33ff 	mov.w	r3, #4294967295
}
 811ea6a:	4618      	mov	r0, r3
 811ea6c:	3764      	adds	r7, #100	@ 0x64
 811ea6e:	46bd      	mov	sp, r7
 811ea70:	bd90      	pop	{r4, r7, pc}
 811ea72:	bf00      	nop
 811ea74:	08127410 	.word	0x08127410
 811ea78:	08127784 	.word	0x08127784
 811ea7c:	081274a4 	.word	0x081274a4
 811ea80:	081277b0 	.word	0x081277b0
 811ea84:	081277e8 	.word	0x081277e8
 811ea88:	08127820 	.word	0x08127820

0811ea8c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 811ea8c:	b590      	push	{r4, r7, lr}
 811ea8e:	b08b      	sub	sp, #44	@ 0x2c
 811ea90:	af02      	add	r7, sp, #8
 811ea92:	6078      	str	r0, [r7, #4]
 811ea94:	460b      	mov	r3, r1
 811ea96:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 811ea98:	2300      	movs	r3, #0
 811ea9a:	61bb      	str	r3, [r7, #24]
 811ea9c:	2300      	movs	r3, #0
 811ea9e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 811eaa0:	2300      	movs	r3, #0
 811eaa2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 811eaa4:	687b      	ldr	r3, [r7, #4]
 811eaa6:	2b00      	cmp	r3, #0
 811eaa8:	d106      	bne.n	811eab8 <tcp_split_unsent_seg+0x2c>
 811eaaa:	4b97      	ldr	r3, [pc, #604]	@ (811ed08 <tcp_split_unsent_seg+0x27c>)
 811eaac:	f240 324b 	movw	r2, #843	@ 0x34b
 811eab0:	4996      	ldr	r1, [pc, #600]	@ (811ed0c <tcp_split_unsent_seg+0x280>)
 811eab2:	4897      	ldr	r0, [pc, #604]	@ (811ed10 <tcp_split_unsent_seg+0x284>)
 811eab4:	f003 fbd6 	bl	8122264 <iprintf>

  useg = pcb->unsent;
 811eab8:	687b      	ldr	r3, [r7, #4]
 811eaba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811eabc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 811eabe:	697b      	ldr	r3, [r7, #20]
 811eac0:	2b00      	cmp	r3, #0
 811eac2:	d102      	bne.n	811eaca <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 811eac4:	f04f 33ff 	mov.w	r3, #4294967295
 811eac8:	e119      	b.n	811ecfe <tcp_split_unsent_seg+0x272>
  }

  if (split == 0) {
 811eaca:	887b      	ldrh	r3, [r7, #2]
 811eacc:	2b00      	cmp	r3, #0
 811eace:	d109      	bne.n	811eae4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 811ead0:	4b8d      	ldr	r3, [pc, #564]	@ (811ed08 <tcp_split_unsent_seg+0x27c>)
 811ead2:	f240 3253 	movw	r2, #851	@ 0x353
 811ead6:	498f      	ldr	r1, [pc, #572]	@ (811ed14 <tcp_split_unsent_seg+0x288>)
 811ead8:	488d      	ldr	r0, [pc, #564]	@ (811ed10 <tcp_split_unsent_seg+0x284>)
 811eada:	f003 fbc3 	bl	8122264 <iprintf>
    return ERR_VAL;
 811eade:	f06f 0305 	mvn.w	r3, #5
 811eae2:	e10c      	b.n	811ecfe <tcp_split_unsent_seg+0x272>
  }

  if (useg->len <= split) {
 811eae4:	697b      	ldr	r3, [r7, #20]
 811eae6:	891b      	ldrh	r3, [r3, #8]
 811eae8:	887a      	ldrh	r2, [r7, #2]
 811eaea:	429a      	cmp	r2, r3
 811eaec:	d301      	bcc.n	811eaf2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 811eaee:	2300      	movs	r3, #0
 811eaf0:	e105      	b.n	811ecfe <tcp_split_unsent_seg+0x272>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 811eaf2:	687b      	ldr	r3, [r7, #4]
 811eaf4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811eaf6:	887a      	ldrh	r2, [r7, #2]
 811eaf8:	429a      	cmp	r2, r3
 811eafa:	d906      	bls.n	811eb0a <tcp_split_unsent_seg+0x7e>
 811eafc:	4b82      	ldr	r3, [pc, #520]	@ (811ed08 <tcp_split_unsent_seg+0x27c>)
 811eafe:	f240 325b 	movw	r2, #859	@ 0x35b
 811eb02:	4985      	ldr	r1, [pc, #532]	@ (811ed18 <tcp_split_unsent_seg+0x28c>)
 811eb04:	4882      	ldr	r0, [pc, #520]	@ (811ed10 <tcp_split_unsent_seg+0x284>)
 811eb06:	f003 fbad 	bl	8122264 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 811eb0a:	697b      	ldr	r3, [r7, #20]
 811eb0c:	891b      	ldrh	r3, [r3, #8]
 811eb0e:	2b00      	cmp	r3, #0
 811eb10:	d106      	bne.n	811eb20 <tcp_split_unsent_seg+0x94>
 811eb12:	4b7d      	ldr	r3, [pc, #500]	@ (811ed08 <tcp_split_unsent_seg+0x27c>)
 811eb14:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 811eb18:	4980      	ldr	r1, [pc, #512]	@ (811ed1c <tcp_split_unsent_seg+0x290>)
 811eb1a:	487d      	ldr	r0, [pc, #500]	@ (811ed10 <tcp_split_unsent_seg+0x284>)
 811eb1c:	f003 fba2 	bl	8122264 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 811eb20:	697b      	ldr	r3, [r7, #20]
 811eb22:	7b1b      	ldrb	r3, [r3, #12]
 811eb24:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 811eb26:	7bfb      	ldrb	r3, [r7, #15]
 811eb28:	009b      	lsls	r3, r3, #2
 811eb2a:	b2db      	uxtb	r3, r3
 811eb2c:	f003 0304 	and.w	r3, r3, #4
 811eb30:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 811eb32:	697b      	ldr	r3, [r7, #20]
 811eb34:	891a      	ldrh	r2, [r3, #8]
 811eb36:	887b      	ldrh	r3, [r7, #2]
 811eb38:	1ad3      	subs	r3, r2, r3
 811eb3a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 811eb3c:	7bbb      	ldrb	r3, [r7, #14]
 811eb3e:	b29a      	uxth	r2, r3
 811eb40:	89bb      	ldrh	r3, [r7, #12]
 811eb42:	4413      	add	r3, r2
 811eb44:	b29b      	uxth	r3, r3
 811eb46:	f44f 7220 	mov.w	r2, #640	@ 0x280
 811eb4a:	4619      	mov	r1, r3
 811eb4c:	2036      	movs	r0, #54	@ 0x36
 811eb4e:	f7fa f831 	bl	8118bb4 <pbuf_alloc>
 811eb52:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 811eb54:	693b      	ldr	r3, [r7, #16]
 811eb56:	2b00      	cmp	r3, #0
 811eb58:	f000 80ba 	beq.w	811ecd0 <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 811eb5c:	697b      	ldr	r3, [r7, #20]
 811eb5e:	685b      	ldr	r3, [r3, #4]
 811eb60:	891a      	ldrh	r2, [r3, #8]
 811eb62:	697b      	ldr	r3, [r7, #20]
 811eb64:	891b      	ldrh	r3, [r3, #8]
 811eb66:	1ad3      	subs	r3, r2, r3
 811eb68:	b29a      	uxth	r2, r3
 811eb6a:	887b      	ldrh	r3, [r7, #2]
 811eb6c:	4413      	add	r3, r2
 811eb6e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 811eb70:	697b      	ldr	r3, [r7, #20]
 811eb72:	6858      	ldr	r0, [r3, #4]
 811eb74:	693b      	ldr	r3, [r7, #16]
 811eb76:	685a      	ldr	r2, [r3, #4]
 811eb78:	7bbb      	ldrb	r3, [r7, #14]
 811eb7a:	18d1      	adds	r1, r2, r3
 811eb7c:	897b      	ldrh	r3, [r7, #10]
 811eb7e:	89ba      	ldrh	r2, [r7, #12]
 811eb80:	f7fa fd02 	bl	8119588 <pbuf_copy_partial>
 811eb84:	4603      	mov	r3, r0
 811eb86:	461a      	mov	r2, r3
 811eb88:	89bb      	ldrh	r3, [r7, #12]
 811eb8a:	4293      	cmp	r3, r2
 811eb8c:	f040 80a2 	bne.w	811ecd4 <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 811eb90:	697b      	ldr	r3, [r7, #20]
 811eb92:	691b      	ldr	r3, [r3, #16]
 811eb94:	899b      	ldrh	r3, [r3, #12]
 811eb96:	b29b      	uxth	r3, r3
 811eb98:	4618      	mov	r0, r3
 811eb9a:	f7f5 fb4f 	bl	811423c <lwip_htons>
 811eb9e:	4603      	mov	r3, r0
 811eba0:	b2db      	uxtb	r3, r3
 811eba2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 811eba6:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 811eba8:	2300      	movs	r3, #0
 811ebaa:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 811ebac:	7ffb      	ldrb	r3, [r7, #31]
 811ebae:	f003 0308 	and.w	r3, r3, #8
 811ebb2:	2b00      	cmp	r3, #0
 811ebb4:	d007      	beq.n	811ebc6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 811ebb6:	7ffb      	ldrb	r3, [r7, #31]
 811ebb8:	f023 0308 	bic.w	r3, r3, #8
 811ebbc:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 811ebbe:	7fbb      	ldrb	r3, [r7, #30]
 811ebc0:	f043 0308 	orr.w	r3, r3, #8
 811ebc4:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 811ebc6:	7ffb      	ldrb	r3, [r7, #31]
 811ebc8:	f003 0301 	and.w	r3, r3, #1
 811ebcc:	2b00      	cmp	r3, #0
 811ebce:	d007      	beq.n	811ebe0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 811ebd0:	7ffb      	ldrb	r3, [r7, #31]
 811ebd2:	f023 0301 	bic.w	r3, r3, #1
 811ebd6:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 811ebd8:	7fbb      	ldrb	r3, [r7, #30]
 811ebda:	f043 0301 	orr.w	r3, r3, #1
 811ebde:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 811ebe0:	697b      	ldr	r3, [r7, #20]
 811ebe2:	691b      	ldr	r3, [r3, #16]
 811ebe4:	685b      	ldr	r3, [r3, #4]
 811ebe6:	4618      	mov	r0, r3
 811ebe8:	f7f5 fb3d 	bl	8114266 <lwip_htonl>
 811ebec:	4602      	mov	r2, r0
 811ebee:	887b      	ldrh	r3, [r7, #2]
 811ebf0:	18d1      	adds	r1, r2, r3
 811ebf2:	7fba      	ldrb	r2, [r7, #30]
 811ebf4:	7bfb      	ldrb	r3, [r7, #15]
 811ebf6:	9300      	str	r3, [sp, #0]
 811ebf8:	460b      	mov	r3, r1
 811ebfa:	6939      	ldr	r1, [r7, #16]
 811ebfc:	6878      	ldr	r0, [r7, #4]
 811ebfe:	f7ff f9f3 	bl	811dfe8 <tcp_create_segment>
 811ec02:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 811ec04:	69bb      	ldr	r3, [r7, #24]
 811ec06:	2b00      	cmp	r3, #0
 811ec08:	d066      	beq.n	811ecd8 <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 811ec0a:	697b      	ldr	r3, [r7, #20]
 811ec0c:	685b      	ldr	r3, [r3, #4]
 811ec0e:	4618      	mov	r0, r3
 811ec10:	f7fa fb42 	bl	8119298 <pbuf_clen>
 811ec14:	4603      	mov	r3, r0
 811ec16:	461a      	mov	r2, r3
 811ec18:	687b      	ldr	r3, [r7, #4]
 811ec1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811ec1e:	1a9b      	subs	r3, r3, r2
 811ec20:	b29a      	uxth	r2, r3
 811ec22:	687b      	ldr	r3, [r7, #4]
 811ec24:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 811ec28:	697b      	ldr	r3, [r7, #20]
 811ec2a:	6858      	ldr	r0, [r3, #4]
 811ec2c:	697b      	ldr	r3, [r7, #20]
 811ec2e:	685b      	ldr	r3, [r3, #4]
 811ec30:	891a      	ldrh	r2, [r3, #8]
 811ec32:	89bb      	ldrh	r3, [r7, #12]
 811ec34:	1ad3      	subs	r3, r2, r3
 811ec36:	b29b      	uxth	r3, r3
 811ec38:	4619      	mov	r1, r3
 811ec3a:	f7fa f91b 	bl	8118e74 <pbuf_realloc>
  useg->len -= remainder;
 811ec3e:	697b      	ldr	r3, [r7, #20]
 811ec40:	891a      	ldrh	r2, [r3, #8]
 811ec42:	89bb      	ldrh	r3, [r7, #12]
 811ec44:	1ad3      	subs	r3, r2, r3
 811ec46:	b29a      	uxth	r2, r3
 811ec48:	697b      	ldr	r3, [r7, #20]
 811ec4a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 811ec4c:	697b      	ldr	r3, [r7, #20]
 811ec4e:	691b      	ldr	r3, [r3, #16]
 811ec50:	899b      	ldrh	r3, [r3, #12]
 811ec52:	b29c      	uxth	r4, r3
 811ec54:	7ffb      	ldrb	r3, [r7, #31]
 811ec56:	b29b      	uxth	r3, r3
 811ec58:	4618      	mov	r0, r3
 811ec5a:	f7f5 faef 	bl	811423c <lwip_htons>
 811ec5e:	4603      	mov	r3, r0
 811ec60:	461a      	mov	r2, r3
 811ec62:	697b      	ldr	r3, [r7, #20]
 811ec64:	691b      	ldr	r3, [r3, #16]
 811ec66:	4322      	orrs	r2, r4
 811ec68:	b292      	uxth	r2, r2
 811ec6a:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 811ec6c:	697b      	ldr	r3, [r7, #20]
 811ec6e:	2200      	movs	r2, #0
 811ec70:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 811ec72:	697b      	ldr	r3, [r7, #20]
 811ec74:	685b      	ldr	r3, [r3, #4]
 811ec76:	4618      	mov	r0, r3
 811ec78:	f7fa fb0e 	bl	8119298 <pbuf_clen>
 811ec7c:	4603      	mov	r3, r0
 811ec7e:	461a      	mov	r2, r3
 811ec80:	687b      	ldr	r3, [r7, #4]
 811ec82:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811ec86:	4413      	add	r3, r2
 811ec88:	b29a      	uxth	r2, r3
 811ec8a:	687b      	ldr	r3, [r7, #4]
 811ec8c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 811ec90:	69bb      	ldr	r3, [r7, #24]
 811ec92:	685b      	ldr	r3, [r3, #4]
 811ec94:	4618      	mov	r0, r3
 811ec96:	f7fa faff 	bl	8119298 <pbuf_clen>
 811ec9a:	4603      	mov	r3, r0
 811ec9c:	461a      	mov	r2, r3
 811ec9e:	687b      	ldr	r3, [r7, #4]
 811eca0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811eca4:	4413      	add	r3, r2
 811eca6:	b29a      	uxth	r2, r3
 811eca8:	687b      	ldr	r3, [r7, #4]
 811ecaa:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 811ecae:	697b      	ldr	r3, [r7, #20]
 811ecb0:	681a      	ldr	r2, [r3, #0]
 811ecb2:	69bb      	ldr	r3, [r7, #24]
 811ecb4:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 811ecb6:	697b      	ldr	r3, [r7, #20]
 811ecb8:	69ba      	ldr	r2, [r7, #24]
 811ecba:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 811ecbc:	69bb      	ldr	r3, [r7, #24]
 811ecbe:	681b      	ldr	r3, [r3, #0]
 811ecc0:	2b00      	cmp	r3, #0
 811ecc2:	d103      	bne.n	811eccc <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 811ecc4:	687b      	ldr	r3, [r7, #4]
 811ecc6:	2200      	movs	r2, #0
 811ecc8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 811eccc:	2300      	movs	r3, #0
 811ecce:	e016      	b.n	811ecfe <tcp_split_unsent_seg+0x272>
    goto memerr;
 811ecd0:	bf00      	nop
 811ecd2:	e002      	b.n	811ecda <tcp_split_unsent_seg+0x24e>
    goto memerr;
 811ecd4:	bf00      	nop
 811ecd6:	e000      	b.n	811ecda <tcp_split_unsent_seg+0x24e>
    goto memerr;
 811ecd8:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 811ecda:	69bb      	ldr	r3, [r7, #24]
 811ecdc:	2b00      	cmp	r3, #0
 811ecde:	d006      	beq.n	811ecee <tcp_split_unsent_seg+0x262>
 811ece0:	4b09      	ldr	r3, [pc, #36]	@ (811ed08 <tcp_split_unsent_seg+0x27c>)
 811ece2:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 811ece6:	490e      	ldr	r1, [pc, #56]	@ (811ed20 <tcp_split_unsent_seg+0x294>)
 811ece8:	4809      	ldr	r0, [pc, #36]	@ (811ed10 <tcp_split_unsent_seg+0x284>)
 811ecea:	f003 fabb 	bl	8122264 <iprintf>
  if (p != NULL) {
 811ecee:	693b      	ldr	r3, [r7, #16]
 811ecf0:	2b00      	cmp	r3, #0
 811ecf2:	d002      	beq.n	811ecfa <tcp_split_unsent_seg+0x26e>
    pbuf_free(p);
 811ecf4:	6938      	ldr	r0, [r7, #16]
 811ecf6:	f7fa fa41 	bl	811917c <pbuf_free>
  }

  return ERR_MEM;
 811ecfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 811ecfe:	4618      	mov	r0, r3
 811ed00:	3724      	adds	r7, #36	@ 0x24
 811ed02:	46bd      	mov	sp, r7
 811ed04:	bd90      	pop	{r4, r7, pc}
 811ed06:	bf00      	nop
 811ed08:	08127410 	.word	0x08127410
 811ed0c:	08127840 	.word	0x08127840
 811ed10:	081274a4 	.word	0x081274a4
 811ed14:	08127864 	.word	0x08127864
 811ed18:	08127888 	.word	0x08127888
 811ed1c:	08127898 	.word	0x08127898
 811ed20:	081278a8 	.word	0x081278a8

0811ed24 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 811ed24:	b590      	push	{r4, r7, lr}
 811ed26:	b085      	sub	sp, #20
 811ed28:	af00      	add	r7, sp, #0
 811ed2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 811ed2c:	687b      	ldr	r3, [r7, #4]
 811ed2e:	2b00      	cmp	r3, #0
 811ed30:	d106      	bne.n	811ed40 <tcp_send_fin+0x1c>
 811ed32:	4b21      	ldr	r3, [pc, #132]	@ (811edb8 <tcp_send_fin+0x94>)
 811ed34:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 811ed38:	4920      	ldr	r1, [pc, #128]	@ (811edbc <tcp_send_fin+0x98>)
 811ed3a:	4821      	ldr	r0, [pc, #132]	@ (811edc0 <tcp_send_fin+0x9c>)
 811ed3c:	f003 fa92 	bl	8122264 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 811ed40:	687b      	ldr	r3, [r7, #4]
 811ed42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811ed44:	2b00      	cmp	r3, #0
 811ed46:	d02e      	beq.n	811eda6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 811ed48:	687b      	ldr	r3, [r7, #4]
 811ed4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811ed4c:	60fb      	str	r3, [r7, #12]
 811ed4e:	e002      	b.n	811ed56 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 811ed50:	68fb      	ldr	r3, [r7, #12]
 811ed52:	681b      	ldr	r3, [r3, #0]
 811ed54:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 811ed56:	68fb      	ldr	r3, [r7, #12]
 811ed58:	681b      	ldr	r3, [r3, #0]
 811ed5a:	2b00      	cmp	r3, #0
 811ed5c:	d1f8      	bne.n	811ed50 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 811ed5e:	68fb      	ldr	r3, [r7, #12]
 811ed60:	691b      	ldr	r3, [r3, #16]
 811ed62:	899b      	ldrh	r3, [r3, #12]
 811ed64:	b29b      	uxth	r3, r3
 811ed66:	4618      	mov	r0, r3
 811ed68:	f7f5 fa68 	bl	811423c <lwip_htons>
 811ed6c:	4603      	mov	r3, r0
 811ed6e:	b2db      	uxtb	r3, r3
 811ed70:	f003 0307 	and.w	r3, r3, #7
 811ed74:	2b00      	cmp	r3, #0
 811ed76:	d116      	bne.n	811eda6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 811ed78:	68fb      	ldr	r3, [r7, #12]
 811ed7a:	691b      	ldr	r3, [r3, #16]
 811ed7c:	899b      	ldrh	r3, [r3, #12]
 811ed7e:	b29c      	uxth	r4, r3
 811ed80:	2001      	movs	r0, #1
 811ed82:	f7f5 fa5b 	bl	811423c <lwip_htons>
 811ed86:	4603      	mov	r3, r0
 811ed88:	461a      	mov	r2, r3
 811ed8a:	68fb      	ldr	r3, [r7, #12]
 811ed8c:	691b      	ldr	r3, [r3, #16]
 811ed8e:	4322      	orrs	r2, r4
 811ed90:	b292      	uxth	r2, r2
 811ed92:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 811ed94:	687b      	ldr	r3, [r7, #4]
 811ed96:	8b5b      	ldrh	r3, [r3, #26]
 811ed98:	f043 0320 	orr.w	r3, r3, #32
 811ed9c:	b29a      	uxth	r2, r3
 811ed9e:	687b      	ldr	r3, [r7, #4]
 811eda0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 811eda2:	2300      	movs	r3, #0
 811eda4:	e004      	b.n	811edb0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 811eda6:	2101      	movs	r1, #1
 811eda8:	6878      	ldr	r0, [r7, #4]
 811edaa:	f000 f80b 	bl	811edc4 <tcp_enqueue_flags>
 811edae:	4603      	mov	r3, r0
}
 811edb0:	4618      	mov	r0, r3
 811edb2:	3714      	adds	r7, #20
 811edb4:	46bd      	mov	sp, r7
 811edb6:	bd90      	pop	{r4, r7, pc}
 811edb8:	08127410 	.word	0x08127410
 811edbc:	081278b4 	.word	0x081278b4
 811edc0:	081274a4 	.word	0x081274a4

0811edc4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 811edc4:	b580      	push	{r7, lr}
 811edc6:	b088      	sub	sp, #32
 811edc8:	af02      	add	r7, sp, #8
 811edca:	6078      	str	r0, [r7, #4]
 811edcc:	460b      	mov	r3, r1
 811edce:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 811edd0:	2300      	movs	r3, #0
 811edd2:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 811edd4:	2300      	movs	r3, #0
 811edd6:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 811edd8:	78fb      	ldrb	r3, [r7, #3]
 811edda:	f003 0303 	and.w	r3, r3, #3
 811edde:	2b00      	cmp	r3, #0
 811ede0:	d106      	bne.n	811edf0 <tcp_enqueue_flags+0x2c>
 811ede2:	4b67      	ldr	r3, [pc, #412]	@ (811ef80 <tcp_enqueue_flags+0x1bc>)
 811ede4:	f240 4211 	movw	r2, #1041	@ 0x411
 811ede8:	4966      	ldr	r1, [pc, #408]	@ (811ef84 <tcp_enqueue_flags+0x1c0>)
 811edea:	4867      	ldr	r0, [pc, #412]	@ (811ef88 <tcp_enqueue_flags+0x1c4>)
 811edec:	f003 fa3a 	bl	8122264 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 811edf0:	687b      	ldr	r3, [r7, #4]
 811edf2:	2b00      	cmp	r3, #0
 811edf4:	d106      	bne.n	811ee04 <tcp_enqueue_flags+0x40>
 811edf6:	4b62      	ldr	r3, [pc, #392]	@ (811ef80 <tcp_enqueue_flags+0x1bc>)
 811edf8:	f240 4213 	movw	r2, #1043	@ 0x413
 811edfc:	4963      	ldr	r1, [pc, #396]	@ (811ef8c <tcp_enqueue_flags+0x1c8>)
 811edfe:	4862      	ldr	r0, [pc, #392]	@ (811ef88 <tcp_enqueue_flags+0x1c4>)
 811ee00:	f003 fa30 	bl	8122264 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 811ee04:	78fb      	ldrb	r3, [r7, #3]
 811ee06:	f003 0302 	and.w	r3, r3, #2
 811ee0a:	2b00      	cmp	r3, #0
 811ee0c:	d001      	beq.n	811ee12 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 811ee0e:	2301      	movs	r3, #1
 811ee10:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 811ee12:	7dfb      	ldrb	r3, [r7, #23]
 811ee14:	009b      	lsls	r3, r3, #2
 811ee16:	b2db      	uxtb	r3, r3
 811ee18:	f003 0304 	and.w	r3, r3, #4
 811ee1c:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 811ee1e:	7dbb      	ldrb	r3, [r7, #22]
 811ee20:	b29b      	uxth	r3, r3
 811ee22:	f44f 7220 	mov.w	r2, #640	@ 0x280
 811ee26:	4619      	mov	r1, r3
 811ee28:	2036      	movs	r0, #54	@ 0x36
 811ee2a:	f7f9 fec3 	bl	8118bb4 <pbuf_alloc>
 811ee2e:	60f8      	str	r0, [r7, #12]
 811ee30:	68fb      	ldr	r3, [r7, #12]
 811ee32:	2b00      	cmp	r3, #0
 811ee34:	d109      	bne.n	811ee4a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 811ee36:	687b      	ldr	r3, [r7, #4]
 811ee38:	8b5b      	ldrh	r3, [r3, #26]
 811ee3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 811ee3e:	b29a      	uxth	r2, r3
 811ee40:	687b      	ldr	r3, [r7, #4]
 811ee42:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 811ee44:	f04f 33ff 	mov.w	r3, #4294967295
 811ee48:	e095      	b.n	811ef76 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 811ee4a:	68fb      	ldr	r3, [r7, #12]
 811ee4c:	895a      	ldrh	r2, [r3, #10]
 811ee4e:	7dbb      	ldrb	r3, [r7, #22]
 811ee50:	b29b      	uxth	r3, r3
 811ee52:	429a      	cmp	r2, r3
 811ee54:	d206      	bcs.n	811ee64 <tcp_enqueue_flags+0xa0>
 811ee56:	4b4a      	ldr	r3, [pc, #296]	@ (811ef80 <tcp_enqueue_flags+0x1bc>)
 811ee58:	f240 4239 	movw	r2, #1081	@ 0x439
 811ee5c:	494c      	ldr	r1, [pc, #304]	@ (811ef90 <tcp_enqueue_flags+0x1cc>)
 811ee5e:	484a      	ldr	r0, [pc, #296]	@ (811ef88 <tcp_enqueue_flags+0x1c4>)
 811ee60:	f003 fa00 	bl	8122264 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 811ee64:	687b      	ldr	r3, [r7, #4]
 811ee66:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 811ee68:	78fa      	ldrb	r2, [r7, #3]
 811ee6a:	7dfb      	ldrb	r3, [r7, #23]
 811ee6c:	9300      	str	r3, [sp, #0]
 811ee6e:	460b      	mov	r3, r1
 811ee70:	68f9      	ldr	r1, [r7, #12]
 811ee72:	6878      	ldr	r0, [r7, #4]
 811ee74:	f7ff f8b8 	bl	811dfe8 <tcp_create_segment>
 811ee78:	60b8      	str	r0, [r7, #8]
 811ee7a:	68bb      	ldr	r3, [r7, #8]
 811ee7c:	2b00      	cmp	r3, #0
 811ee7e:	d109      	bne.n	811ee94 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 811ee80:	687b      	ldr	r3, [r7, #4]
 811ee82:	8b5b      	ldrh	r3, [r3, #26]
 811ee84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 811ee88:	b29a      	uxth	r2, r3
 811ee8a:	687b      	ldr	r3, [r7, #4]
 811ee8c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 811ee8e:	f04f 33ff 	mov.w	r3, #4294967295
 811ee92:	e070      	b.n	811ef76 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 811ee94:	68bb      	ldr	r3, [r7, #8]
 811ee96:	691b      	ldr	r3, [r3, #16]
 811ee98:	f003 0303 	and.w	r3, r3, #3
 811ee9c:	2b00      	cmp	r3, #0
 811ee9e:	d006      	beq.n	811eeae <tcp_enqueue_flags+0xea>
 811eea0:	4b37      	ldr	r3, [pc, #220]	@ (811ef80 <tcp_enqueue_flags+0x1bc>)
 811eea2:	f240 4242 	movw	r2, #1090	@ 0x442
 811eea6:	493b      	ldr	r1, [pc, #236]	@ (811ef94 <tcp_enqueue_flags+0x1d0>)
 811eea8:	4837      	ldr	r0, [pc, #220]	@ (811ef88 <tcp_enqueue_flags+0x1c4>)
 811eeaa:	f003 f9db 	bl	8122264 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 811eeae:	68bb      	ldr	r3, [r7, #8]
 811eeb0:	891b      	ldrh	r3, [r3, #8]
 811eeb2:	2b00      	cmp	r3, #0
 811eeb4:	d006      	beq.n	811eec4 <tcp_enqueue_flags+0x100>
 811eeb6:	4b32      	ldr	r3, [pc, #200]	@ (811ef80 <tcp_enqueue_flags+0x1bc>)
 811eeb8:	f240 4243 	movw	r2, #1091	@ 0x443
 811eebc:	4936      	ldr	r1, [pc, #216]	@ (811ef98 <tcp_enqueue_flags+0x1d4>)
 811eebe:	4832      	ldr	r0, [pc, #200]	@ (811ef88 <tcp_enqueue_flags+0x1c4>)
 811eec0:	f003 f9d0 	bl	8122264 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 811eec4:	687b      	ldr	r3, [r7, #4]
 811eec6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811eec8:	2b00      	cmp	r3, #0
 811eeca:	d103      	bne.n	811eed4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 811eecc:	687b      	ldr	r3, [r7, #4]
 811eece:	68ba      	ldr	r2, [r7, #8]
 811eed0:	66da      	str	r2, [r3, #108]	@ 0x6c
 811eed2:	e00d      	b.n	811eef0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 811eed4:	687b      	ldr	r3, [r7, #4]
 811eed6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811eed8:	613b      	str	r3, [r7, #16]
 811eeda:	e002      	b.n	811eee2 <tcp_enqueue_flags+0x11e>
 811eedc:	693b      	ldr	r3, [r7, #16]
 811eede:	681b      	ldr	r3, [r3, #0]
 811eee0:	613b      	str	r3, [r7, #16]
 811eee2:	693b      	ldr	r3, [r7, #16]
 811eee4:	681b      	ldr	r3, [r3, #0]
 811eee6:	2b00      	cmp	r3, #0
 811eee8:	d1f8      	bne.n	811eedc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 811eeea:	693b      	ldr	r3, [r7, #16]
 811eeec:	68ba      	ldr	r2, [r7, #8]
 811eeee:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 811eef0:	687b      	ldr	r3, [r7, #4]
 811eef2:	2200      	movs	r2, #0
 811eef4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 811eef8:	78fb      	ldrb	r3, [r7, #3]
 811eefa:	f003 0302 	and.w	r3, r3, #2
 811eefe:	2b00      	cmp	r3, #0
 811ef00:	d104      	bne.n	811ef0c <tcp_enqueue_flags+0x148>
 811ef02:	78fb      	ldrb	r3, [r7, #3]
 811ef04:	f003 0301 	and.w	r3, r3, #1
 811ef08:	2b00      	cmp	r3, #0
 811ef0a:	d004      	beq.n	811ef16 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 811ef0c:	687b      	ldr	r3, [r7, #4]
 811ef0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 811ef10:	1c5a      	adds	r2, r3, #1
 811ef12:	687b      	ldr	r3, [r7, #4]
 811ef14:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 811ef16:	78fb      	ldrb	r3, [r7, #3]
 811ef18:	f003 0301 	and.w	r3, r3, #1
 811ef1c:	2b00      	cmp	r3, #0
 811ef1e:	d006      	beq.n	811ef2e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 811ef20:	687b      	ldr	r3, [r7, #4]
 811ef22:	8b5b      	ldrh	r3, [r3, #26]
 811ef24:	f043 0320 	orr.w	r3, r3, #32
 811ef28:	b29a      	uxth	r2, r3
 811ef2a:	687b      	ldr	r3, [r7, #4]
 811ef2c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 811ef2e:	68bb      	ldr	r3, [r7, #8]
 811ef30:	685b      	ldr	r3, [r3, #4]
 811ef32:	4618      	mov	r0, r3
 811ef34:	f7fa f9b0 	bl	8119298 <pbuf_clen>
 811ef38:	4603      	mov	r3, r0
 811ef3a:	461a      	mov	r2, r3
 811ef3c:	687b      	ldr	r3, [r7, #4]
 811ef3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811ef42:	4413      	add	r3, r2
 811ef44:	b29a      	uxth	r2, r3
 811ef46:	687b      	ldr	r3, [r7, #4]
 811ef48:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 811ef4c:	687b      	ldr	r3, [r7, #4]
 811ef4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811ef52:	2b00      	cmp	r3, #0
 811ef54:	d00e      	beq.n	811ef74 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 811ef56:	687b      	ldr	r3, [r7, #4]
 811ef58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811ef5a:	2b00      	cmp	r3, #0
 811ef5c:	d10a      	bne.n	811ef74 <tcp_enqueue_flags+0x1b0>
 811ef5e:	687b      	ldr	r3, [r7, #4]
 811ef60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811ef62:	2b00      	cmp	r3, #0
 811ef64:	d106      	bne.n	811ef74 <tcp_enqueue_flags+0x1b0>
 811ef66:	4b06      	ldr	r3, [pc, #24]	@ (811ef80 <tcp_enqueue_flags+0x1bc>)
 811ef68:	f240 4265 	movw	r2, #1125	@ 0x465
 811ef6c:	490b      	ldr	r1, [pc, #44]	@ (811ef9c <tcp_enqueue_flags+0x1d8>)
 811ef6e:	4806      	ldr	r0, [pc, #24]	@ (811ef88 <tcp_enqueue_flags+0x1c4>)
 811ef70:	f003 f978 	bl	8122264 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 811ef74:	2300      	movs	r3, #0
}
 811ef76:	4618      	mov	r0, r3
 811ef78:	3718      	adds	r7, #24
 811ef7a:	46bd      	mov	sp, r7
 811ef7c:	bd80      	pop	{r7, pc}
 811ef7e:	bf00      	nop
 811ef80:	08127410 	.word	0x08127410
 811ef84:	081278d0 	.word	0x081278d0
 811ef88:	081274a4 	.word	0x081274a4
 811ef8c:	08127928 	.word	0x08127928
 811ef90:	08127948 	.word	0x08127948
 811ef94:	08127984 	.word	0x08127984
 811ef98:	0812799c 	.word	0x0812799c
 811ef9c:	081279c8 	.word	0x081279c8

0811efa0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 811efa0:	b5b0      	push	{r4, r5, r7, lr}
 811efa2:	b08a      	sub	sp, #40	@ 0x28
 811efa4:	af00      	add	r7, sp, #0
 811efa6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 811efa8:	687b      	ldr	r3, [r7, #4]
 811efaa:	2b00      	cmp	r3, #0
 811efac:	d106      	bne.n	811efbc <tcp_output+0x1c>
 811efae:	4b8a      	ldr	r3, [pc, #552]	@ (811f1d8 <tcp_output+0x238>)
 811efb0:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 811efb4:	4989      	ldr	r1, [pc, #548]	@ (811f1dc <tcp_output+0x23c>)
 811efb6:	488a      	ldr	r0, [pc, #552]	@ (811f1e0 <tcp_output+0x240>)
 811efb8:	f003 f954 	bl	8122264 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 811efbc:	687b      	ldr	r3, [r7, #4]
 811efbe:	7d1b      	ldrb	r3, [r3, #20]
 811efc0:	2b01      	cmp	r3, #1
 811efc2:	d106      	bne.n	811efd2 <tcp_output+0x32>
 811efc4:	4b84      	ldr	r3, [pc, #528]	@ (811f1d8 <tcp_output+0x238>)
 811efc6:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 811efca:	4986      	ldr	r1, [pc, #536]	@ (811f1e4 <tcp_output+0x244>)
 811efcc:	4884      	ldr	r0, [pc, #528]	@ (811f1e0 <tcp_output+0x240>)
 811efce:	f003 f949 	bl	8122264 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 811efd2:	4b85      	ldr	r3, [pc, #532]	@ (811f1e8 <tcp_output+0x248>)
 811efd4:	681b      	ldr	r3, [r3, #0]
 811efd6:	687a      	ldr	r2, [r7, #4]
 811efd8:	429a      	cmp	r2, r3
 811efda:	d101      	bne.n	811efe0 <tcp_output+0x40>
    return ERR_OK;
 811efdc:	2300      	movs	r3, #0
 811efde:	e1d1      	b.n	811f384 <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 811efe0:	687b      	ldr	r3, [r7, #4]
 811efe2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811efe6:	687b      	ldr	r3, [r7, #4]
 811efe8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811efec:	4293      	cmp	r3, r2
 811efee:	bf28      	it	cs
 811eff0:	4613      	movcs	r3, r2
 811eff2:	b29b      	uxth	r3, r3
 811eff4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 811eff6:	687b      	ldr	r3, [r7, #4]
 811eff8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811effa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 811effc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811effe:	2b00      	cmp	r3, #0
 811f000:	d10b      	bne.n	811f01a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 811f002:	687b      	ldr	r3, [r7, #4]
 811f004:	8b5b      	ldrh	r3, [r3, #26]
 811f006:	f003 0302 	and.w	r3, r3, #2
 811f00a:	2b00      	cmp	r3, #0
 811f00c:	f000 81ad 	beq.w	811f36a <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 811f010:	6878      	ldr	r0, [r7, #4]
 811f012:	f000 fddd 	bl	811fbd0 <tcp_send_empty_ack>
 811f016:	4603      	mov	r3, r0
 811f018:	e1b4      	b.n	811f384 <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 811f01a:	6879      	ldr	r1, [r7, #4]
 811f01c:	687b      	ldr	r3, [r7, #4]
 811f01e:	3304      	adds	r3, #4
 811f020:	461a      	mov	r2, r3
 811f022:	6878      	ldr	r0, [r7, #4]
 811f024:	f7fe ffc4 	bl	811dfb0 <tcp_route>
 811f028:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 811f02a:	697b      	ldr	r3, [r7, #20]
 811f02c:	2b00      	cmp	r3, #0
 811f02e:	d102      	bne.n	811f036 <tcp_output+0x96>
    return ERR_RTE;
 811f030:	f06f 0303 	mvn.w	r3, #3
 811f034:	e1a6      	b.n	811f384 <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 811f036:	687b      	ldr	r3, [r7, #4]
 811f038:	2b00      	cmp	r3, #0
 811f03a:	d003      	beq.n	811f044 <tcp_output+0xa4>
 811f03c:	687b      	ldr	r3, [r7, #4]
 811f03e:	681b      	ldr	r3, [r3, #0]
 811f040:	2b00      	cmp	r3, #0
 811f042:	d111      	bne.n	811f068 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 811f044:	697b      	ldr	r3, [r7, #20]
 811f046:	2b00      	cmp	r3, #0
 811f048:	d002      	beq.n	811f050 <tcp_output+0xb0>
 811f04a:	697b      	ldr	r3, [r7, #20]
 811f04c:	3304      	adds	r3, #4
 811f04e:	e000      	b.n	811f052 <tcp_output+0xb2>
 811f050:	2300      	movs	r3, #0
 811f052:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 811f054:	693b      	ldr	r3, [r7, #16]
 811f056:	2b00      	cmp	r3, #0
 811f058:	d102      	bne.n	811f060 <tcp_output+0xc0>
      return ERR_RTE;
 811f05a:	f06f 0303 	mvn.w	r3, #3
 811f05e:	e191      	b.n	811f384 <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 811f060:	693b      	ldr	r3, [r7, #16]
 811f062:	681a      	ldr	r2, [r3, #0]
 811f064:	687b      	ldr	r3, [r7, #4]
 811f066:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 811f068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f06a:	691b      	ldr	r3, [r3, #16]
 811f06c:	685b      	ldr	r3, [r3, #4]
 811f06e:	4618      	mov	r0, r3
 811f070:	f7f5 f8f9 	bl	8114266 <lwip_htonl>
 811f074:	4602      	mov	r2, r0
 811f076:	687b      	ldr	r3, [r7, #4]
 811f078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811f07a:	1ad3      	subs	r3, r2, r3
 811f07c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811f07e:	8912      	ldrh	r2, [r2, #8]
 811f080:	4413      	add	r3, r2
 811f082:	69ba      	ldr	r2, [r7, #24]
 811f084:	429a      	cmp	r2, r3
 811f086:	d227      	bcs.n	811f0d8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 811f088:	687b      	ldr	r3, [r7, #4]
 811f08a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811f08e:	461a      	mov	r2, r3
 811f090:	69bb      	ldr	r3, [r7, #24]
 811f092:	4293      	cmp	r3, r2
 811f094:	d114      	bne.n	811f0c0 <tcp_output+0x120>
 811f096:	687b      	ldr	r3, [r7, #4]
 811f098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811f09a:	2b00      	cmp	r3, #0
 811f09c:	d110      	bne.n	811f0c0 <tcp_output+0x120>
 811f09e:	687b      	ldr	r3, [r7, #4]
 811f0a0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 811f0a4:	2b00      	cmp	r3, #0
 811f0a6:	d10b      	bne.n	811f0c0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 811f0a8:	687b      	ldr	r3, [r7, #4]
 811f0aa:	2200      	movs	r2, #0
 811f0ac:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
      pcb->persist_backoff = 1;
 811f0b0:	687b      	ldr	r3, [r7, #4]
 811f0b2:	2201      	movs	r2, #1
 811f0b4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
      pcb->persist_probe = 0;
 811f0b8:	687b      	ldr	r3, [r7, #4]
 811f0ba:	2200      	movs	r2, #0
 811f0bc:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 811f0c0:	687b      	ldr	r3, [r7, #4]
 811f0c2:	8b5b      	ldrh	r3, [r3, #26]
 811f0c4:	f003 0302 	and.w	r3, r3, #2
 811f0c8:	2b00      	cmp	r3, #0
 811f0ca:	f000 8150 	beq.w	811f36e <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 811f0ce:	6878      	ldr	r0, [r7, #4]
 811f0d0:	f000 fd7e 	bl	811fbd0 <tcp_send_empty_ack>
 811f0d4:	4603      	mov	r3, r0
 811f0d6:	e155      	b.n	811f384 <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 811f0d8:	687b      	ldr	r3, [r7, #4]
 811f0da:	2200      	movs	r2, #0
 811f0dc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 811f0e0:	687b      	ldr	r3, [r7, #4]
 811f0e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811f0e4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 811f0e6:	6a3b      	ldr	r3, [r7, #32]
 811f0e8:	2b00      	cmp	r3, #0
 811f0ea:	f000 811f 	beq.w	811f32c <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 811f0ee:	e002      	b.n	811f0f6 <tcp_output+0x156>
 811f0f0:	6a3b      	ldr	r3, [r7, #32]
 811f0f2:	681b      	ldr	r3, [r3, #0]
 811f0f4:	623b      	str	r3, [r7, #32]
 811f0f6:	6a3b      	ldr	r3, [r7, #32]
 811f0f8:	681b      	ldr	r3, [r3, #0]
 811f0fa:	2b00      	cmp	r3, #0
 811f0fc:	d1f8      	bne.n	811f0f0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 811f0fe:	e115      	b.n	811f32c <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 811f100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f102:	691b      	ldr	r3, [r3, #16]
 811f104:	899b      	ldrh	r3, [r3, #12]
 811f106:	b29b      	uxth	r3, r3
 811f108:	4618      	mov	r0, r3
 811f10a:	f7f5 f897 	bl	811423c <lwip_htons>
 811f10e:	4603      	mov	r3, r0
 811f110:	b2db      	uxtb	r3, r3
 811f112:	f003 0304 	and.w	r3, r3, #4
 811f116:	2b00      	cmp	r3, #0
 811f118:	d006      	beq.n	811f128 <tcp_output+0x188>
 811f11a:	4b2f      	ldr	r3, [pc, #188]	@ (811f1d8 <tcp_output+0x238>)
 811f11c:	f240 5236 	movw	r2, #1334	@ 0x536
 811f120:	4932      	ldr	r1, [pc, #200]	@ (811f1ec <tcp_output+0x24c>)
 811f122:	482f      	ldr	r0, [pc, #188]	@ (811f1e0 <tcp_output+0x240>)
 811f124:	f003 f89e 	bl	8122264 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 811f128:	687b      	ldr	r3, [r7, #4]
 811f12a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811f12c:	2b00      	cmp	r3, #0
 811f12e:	d01f      	beq.n	811f170 <tcp_output+0x1d0>
 811f130:	687b      	ldr	r3, [r7, #4]
 811f132:	8b5b      	ldrh	r3, [r3, #26]
 811f134:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 811f138:	2b00      	cmp	r3, #0
 811f13a:	d119      	bne.n	811f170 <tcp_output+0x1d0>
 811f13c:	687b      	ldr	r3, [r7, #4]
 811f13e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811f140:	2b00      	cmp	r3, #0
 811f142:	d00b      	beq.n	811f15c <tcp_output+0x1bc>
 811f144:	687b      	ldr	r3, [r7, #4]
 811f146:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811f148:	681b      	ldr	r3, [r3, #0]
 811f14a:	2b00      	cmp	r3, #0
 811f14c:	d110      	bne.n	811f170 <tcp_output+0x1d0>
 811f14e:	687b      	ldr	r3, [r7, #4]
 811f150:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811f152:	891a      	ldrh	r2, [r3, #8]
 811f154:	687b      	ldr	r3, [r7, #4]
 811f156:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811f158:	429a      	cmp	r2, r3
 811f15a:	d209      	bcs.n	811f170 <tcp_output+0x1d0>
 811f15c:	687b      	ldr	r3, [r7, #4]
 811f15e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 811f162:	2b00      	cmp	r3, #0
 811f164:	d004      	beq.n	811f170 <tcp_output+0x1d0>
 811f166:	687b      	ldr	r3, [r7, #4]
 811f168:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811f16c:	2b0f      	cmp	r3, #15
 811f16e:	d901      	bls.n	811f174 <tcp_output+0x1d4>
 811f170:	2301      	movs	r3, #1
 811f172:	e000      	b.n	811f176 <tcp_output+0x1d6>
 811f174:	2300      	movs	r3, #0
 811f176:	2b00      	cmp	r3, #0
 811f178:	d106      	bne.n	811f188 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 811f17a:	687b      	ldr	r3, [r7, #4]
 811f17c:	8b5b      	ldrh	r3, [r3, #26]
 811f17e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 811f182:	2b00      	cmp	r3, #0
 811f184:	f000 80e7 	beq.w	811f356 <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 811f188:	687b      	ldr	r3, [r7, #4]
 811f18a:	7d1b      	ldrb	r3, [r3, #20]
 811f18c:	2b02      	cmp	r3, #2
 811f18e:	d00d      	beq.n	811f1ac <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 811f190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f192:	691b      	ldr	r3, [r3, #16]
 811f194:	899b      	ldrh	r3, [r3, #12]
 811f196:	b29c      	uxth	r4, r3
 811f198:	2010      	movs	r0, #16
 811f19a:	f7f5 f84f 	bl	811423c <lwip_htons>
 811f19e:	4603      	mov	r3, r0
 811f1a0:	461a      	mov	r2, r3
 811f1a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f1a4:	691b      	ldr	r3, [r3, #16]
 811f1a6:	4322      	orrs	r2, r4
 811f1a8:	b292      	uxth	r2, r2
 811f1aa:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 811f1ac:	697a      	ldr	r2, [r7, #20]
 811f1ae:	6879      	ldr	r1, [r7, #4]
 811f1b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811f1b2:	f000 f90b 	bl	811f3cc <tcp_output_segment>
 811f1b6:	4603      	mov	r3, r0
 811f1b8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 811f1ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811f1be:	2b00      	cmp	r3, #0
 811f1c0:	d016      	beq.n	811f1f0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 811f1c2:	687b      	ldr	r3, [r7, #4]
 811f1c4:	8b5b      	ldrh	r3, [r3, #26]
 811f1c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 811f1ca:	b29a      	uxth	r2, r3
 811f1cc:	687b      	ldr	r3, [r7, #4]
 811f1ce:	835a      	strh	r2, [r3, #26]
      return err;
 811f1d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811f1d4:	e0d6      	b.n	811f384 <tcp_output+0x3e4>
 811f1d6:	bf00      	nop
 811f1d8:	08127410 	.word	0x08127410
 811f1dc:	081279f0 	.word	0x081279f0
 811f1e0:	081274a4 	.word	0x081274a4
 811f1e4:	08127a08 	.word	0x08127a08
 811f1e8:	10011ea8 	.word	0x10011ea8
 811f1ec:	08127a30 	.word	0x08127a30
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 811f1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f1f2:	2200      	movs	r2, #0
 811f1f4:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 811f1f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f1f8:	681a      	ldr	r2, [r3, #0]
 811f1fa:	687b      	ldr	r3, [r7, #4]
 811f1fc:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 811f1fe:	687b      	ldr	r3, [r7, #4]
 811f200:	7d1b      	ldrb	r3, [r3, #20]
 811f202:	2b02      	cmp	r3, #2
 811f204:	d006      	beq.n	811f214 <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 811f206:	687b      	ldr	r3, [r7, #4]
 811f208:	8b5b      	ldrh	r3, [r3, #26]
 811f20a:	f023 0303 	bic.w	r3, r3, #3
 811f20e:	b29a      	uxth	r2, r3
 811f210:	687b      	ldr	r3, [r7, #4]
 811f212:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 811f214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f216:	691b      	ldr	r3, [r3, #16]
 811f218:	685b      	ldr	r3, [r3, #4]
 811f21a:	4618      	mov	r0, r3
 811f21c:	f7f5 f823 	bl	8114266 <lwip_htonl>
 811f220:	4604      	mov	r4, r0
 811f222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f224:	891b      	ldrh	r3, [r3, #8]
 811f226:	461d      	mov	r5, r3
 811f228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f22a:	691b      	ldr	r3, [r3, #16]
 811f22c:	899b      	ldrh	r3, [r3, #12]
 811f22e:	b29b      	uxth	r3, r3
 811f230:	4618      	mov	r0, r3
 811f232:	f7f5 f803 	bl	811423c <lwip_htons>
 811f236:	4603      	mov	r3, r0
 811f238:	b2db      	uxtb	r3, r3
 811f23a:	f003 0303 	and.w	r3, r3, #3
 811f23e:	2b00      	cmp	r3, #0
 811f240:	d001      	beq.n	811f246 <tcp_output+0x2a6>
 811f242:	2301      	movs	r3, #1
 811f244:	e000      	b.n	811f248 <tcp_output+0x2a8>
 811f246:	2300      	movs	r3, #0
 811f248:	442b      	add	r3, r5
 811f24a:	4423      	add	r3, r4
 811f24c:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 811f24e:	687b      	ldr	r3, [r7, #4]
 811f250:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 811f252:	68bb      	ldr	r3, [r7, #8]
 811f254:	1ad3      	subs	r3, r2, r3
 811f256:	2b00      	cmp	r3, #0
 811f258:	da02      	bge.n	811f260 <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 811f25a:	687b      	ldr	r3, [r7, #4]
 811f25c:	68ba      	ldr	r2, [r7, #8]
 811f25e:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 811f260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f262:	891b      	ldrh	r3, [r3, #8]
 811f264:	461c      	mov	r4, r3
 811f266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f268:	691b      	ldr	r3, [r3, #16]
 811f26a:	899b      	ldrh	r3, [r3, #12]
 811f26c:	b29b      	uxth	r3, r3
 811f26e:	4618      	mov	r0, r3
 811f270:	f7f4 ffe4 	bl	811423c <lwip_htons>
 811f274:	4603      	mov	r3, r0
 811f276:	b2db      	uxtb	r3, r3
 811f278:	f003 0303 	and.w	r3, r3, #3
 811f27c:	2b00      	cmp	r3, #0
 811f27e:	d001      	beq.n	811f284 <tcp_output+0x2e4>
 811f280:	2301      	movs	r3, #1
 811f282:	e000      	b.n	811f286 <tcp_output+0x2e6>
 811f284:	2300      	movs	r3, #0
 811f286:	4423      	add	r3, r4
 811f288:	2b00      	cmp	r3, #0
 811f28a:	d049      	beq.n	811f320 <tcp_output+0x380>
      seg->next = NULL;
 811f28c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f28e:	2200      	movs	r2, #0
 811f290:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 811f292:	687b      	ldr	r3, [r7, #4]
 811f294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811f296:	2b00      	cmp	r3, #0
 811f298:	d105      	bne.n	811f2a6 <tcp_output+0x306>
        pcb->unacked = seg;
 811f29a:	687b      	ldr	r3, [r7, #4]
 811f29c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811f29e:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 811f2a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f2a2:	623b      	str	r3, [r7, #32]
 811f2a4:	e03f      	b.n	811f326 <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 811f2a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f2a8:	691b      	ldr	r3, [r3, #16]
 811f2aa:	685b      	ldr	r3, [r3, #4]
 811f2ac:	4618      	mov	r0, r3
 811f2ae:	f7f4 ffda 	bl	8114266 <lwip_htonl>
 811f2b2:	4604      	mov	r4, r0
 811f2b4:	6a3b      	ldr	r3, [r7, #32]
 811f2b6:	691b      	ldr	r3, [r3, #16]
 811f2b8:	685b      	ldr	r3, [r3, #4]
 811f2ba:	4618      	mov	r0, r3
 811f2bc:	f7f4 ffd3 	bl	8114266 <lwip_htonl>
 811f2c0:	4603      	mov	r3, r0
 811f2c2:	1ae3      	subs	r3, r4, r3
 811f2c4:	2b00      	cmp	r3, #0
 811f2c6:	da24      	bge.n	811f312 <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 811f2c8:	687b      	ldr	r3, [r7, #4]
 811f2ca:	3370      	adds	r3, #112	@ 0x70
 811f2cc:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 811f2ce:	e002      	b.n	811f2d6 <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 811f2d0:	69fb      	ldr	r3, [r7, #28]
 811f2d2:	681b      	ldr	r3, [r3, #0]
 811f2d4:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 811f2d6:	69fb      	ldr	r3, [r7, #28]
 811f2d8:	681b      	ldr	r3, [r3, #0]
 811f2da:	2b00      	cmp	r3, #0
 811f2dc:	d011      	beq.n	811f302 <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 811f2de:	69fb      	ldr	r3, [r7, #28]
 811f2e0:	681b      	ldr	r3, [r3, #0]
 811f2e2:	691b      	ldr	r3, [r3, #16]
 811f2e4:	685b      	ldr	r3, [r3, #4]
 811f2e6:	4618      	mov	r0, r3
 811f2e8:	f7f4 ffbd 	bl	8114266 <lwip_htonl>
 811f2ec:	4604      	mov	r4, r0
 811f2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f2f0:	691b      	ldr	r3, [r3, #16]
 811f2f2:	685b      	ldr	r3, [r3, #4]
 811f2f4:	4618      	mov	r0, r3
 811f2f6:	f7f4 ffb6 	bl	8114266 <lwip_htonl>
 811f2fa:	4603      	mov	r3, r0
 811f2fc:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 811f2fe:	2b00      	cmp	r3, #0
 811f300:	dbe6      	blt.n	811f2d0 <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 811f302:	69fb      	ldr	r3, [r7, #28]
 811f304:	681a      	ldr	r2, [r3, #0]
 811f306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f308:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 811f30a:	69fb      	ldr	r3, [r7, #28]
 811f30c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811f30e:	601a      	str	r2, [r3, #0]
 811f310:	e009      	b.n	811f326 <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 811f312:	6a3b      	ldr	r3, [r7, #32]
 811f314:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811f316:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 811f318:	6a3b      	ldr	r3, [r7, #32]
 811f31a:	681b      	ldr	r3, [r3, #0]
 811f31c:	623b      	str	r3, [r7, #32]
 811f31e:	e002      	b.n	811f326 <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 811f320:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811f322:	f7fb fd66 	bl	811adf2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 811f326:	687b      	ldr	r3, [r7, #4]
 811f328:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811f32a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 811f32c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f32e:	2b00      	cmp	r3, #0
 811f330:	d012      	beq.n	811f358 <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 811f332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811f334:	691b      	ldr	r3, [r3, #16]
 811f336:	685b      	ldr	r3, [r3, #4]
 811f338:	4618      	mov	r0, r3
 811f33a:	f7f4 ff94 	bl	8114266 <lwip_htonl>
 811f33e:	4602      	mov	r2, r0
 811f340:	687b      	ldr	r3, [r7, #4]
 811f342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811f344:	1ad3      	subs	r3, r2, r3
 811f346:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811f348:	8912      	ldrh	r2, [r2, #8]
 811f34a:	4413      	add	r3, r2
  while (seg != NULL &&
 811f34c:	69ba      	ldr	r2, [r7, #24]
 811f34e:	429a      	cmp	r2, r3
 811f350:	f4bf aed6 	bcs.w	811f100 <tcp_output+0x160>
 811f354:	e000      	b.n	811f358 <tcp_output+0x3b8>
      break;
 811f356:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 811f358:	687b      	ldr	r3, [r7, #4]
 811f35a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811f35c:	2b00      	cmp	r3, #0
 811f35e:	d108      	bne.n	811f372 <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 811f360:	687b      	ldr	r3, [r7, #4]
 811f362:	2200      	movs	r2, #0
 811f364:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 811f368:	e004      	b.n	811f374 <tcp_output+0x3d4>
    goto output_done;
 811f36a:	bf00      	nop
 811f36c:	e002      	b.n	811f374 <tcp_output+0x3d4>
    goto output_done;
 811f36e:	bf00      	nop
 811f370:	e000      	b.n	811f374 <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 811f372:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 811f374:	687b      	ldr	r3, [r7, #4]
 811f376:	8b5b      	ldrh	r3, [r3, #26]
 811f378:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 811f37c:	b29a      	uxth	r2, r3
 811f37e:	687b      	ldr	r3, [r7, #4]
 811f380:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 811f382:	2300      	movs	r3, #0
}
 811f384:	4618      	mov	r0, r3
 811f386:	3728      	adds	r7, #40	@ 0x28
 811f388:	46bd      	mov	sp, r7
 811f38a:	bdb0      	pop	{r4, r5, r7, pc}

0811f38c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 811f38c:	b580      	push	{r7, lr}
 811f38e:	b082      	sub	sp, #8
 811f390:	af00      	add	r7, sp, #0
 811f392:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 811f394:	687b      	ldr	r3, [r7, #4]
 811f396:	2b00      	cmp	r3, #0
 811f398:	d106      	bne.n	811f3a8 <tcp_output_segment_busy+0x1c>
 811f39a:	4b09      	ldr	r3, [pc, #36]	@ (811f3c0 <tcp_output_segment_busy+0x34>)
 811f39c:	f240 529a 	movw	r2, #1434	@ 0x59a
 811f3a0:	4908      	ldr	r1, [pc, #32]	@ (811f3c4 <tcp_output_segment_busy+0x38>)
 811f3a2:	4809      	ldr	r0, [pc, #36]	@ (811f3c8 <tcp_output_segment_busy+0x3c>)
 811f3a4:	f002 ff5e 	bl	8122264 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 811f3a8:	687b      	ldr	r3, [r7, #4]
 811f3aa:	685b      	ldr	r3, [r3, #4]
 811f3ac:	7b9b      	ldrb	r3, [r3, #14]
 811f3ae:	2b01      	cmp	r3, #1
 811f3b0:	d001      	beq.n	811f3b6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 811f3b2:	2301      	movs	r3, #1
 811f3b4:	e000      	b.n	811f3b8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 811f3b6:	2300      	movs	r3, #0
}
 811f3b8:	4618      	mov	r0, r3
 811f3ba:	3708      	adds	r7, #8
 811f3bc:	46bd      	mov	sp, r7
 811f3be:	bd80      	pop	{r7, pc}
 811f3c0:	08127410 	.word	0x08127410
 811f3c4:	08127a48 	.word	0x08127a48
 811f3c8:	081274a4 	.word	0x081274a4

0811f3cc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 811f3cc:	b5b0      	push	{r4, r5, r7, lr}
 811f3ce:	b08c      	sub	sp, #48	@ 0x30
 811f3d0:	af04      	add	r7, sp, #16
 811f3d2:	60f8      	str	r0, [r7, #12]
 811f3d4:	60b9      	str	r1, [r7, #8]
 811f3d6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 811f3d8:	68fb      	ldr	r3, [r7, #12]
 811f3da:	2b00      	cmp	r3, #0
 811f3dc:	d106      	bne.n	811f3ec <tcp_output_segment+0x20>
 811f3de:	4b64      	ldr	r3, [pc, #400]	@ (811f570 <tcp_output_segment+0x1a4>)
 811f3e0:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 811f3e4:	4963      	ldr	r1, [pc, #396]	@ (811f574 <tcp_output_segment+0x1a8>)
 811f3e6:	4864      	ldr	r0, [pc, #400]	@ (811f578 <tcp_output_segment+0x1ac>)
 811f3e8:	f002 ff3c 	bl	8122264 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 811f3ec:	68bb      	ldr	r3, [r7, #8]
 811f3ee:	2b00      	cmp	r3, #0
 811f3f0:	d106      	bne.n	811f400 <tcp_output_segment+0x34>
 811f3f2:	4b5f      	ldr	r3, [pc, #380]	@ (811f570 <tcp_output_segment+0x1a4>)
 811f3f4:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 811f3f8:	4960      	ldr	r1, [pc, #384]	@ (811f57c <tcp_output_segment+0x1b0>)
 811f3fa:	485f      	ldr	r0, [pc, #380]	@ (811f578 <tcp_output_segment+0x1ac>)
 811f3fc:	f002 ff32 	bl	8122264 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 811f400:	687b      	ldr	r3, [r7, #4]
 811f402:	2b00      	cmp	r3, #0
 811f404:	d106      	bne.n	811f414 <tcp_output_segment+0x48>
 811f406:	4b5a      	ldr	r3, [pc, #360]	@ (811f570 <tcp_output_segment+0x1a4>)
 811f408:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 811f40c:	495c      	ldr	r1, [pc, #368]	@ (811f580 <tcp_output_segment+0x1b4>)
 811f40e:	485a      	ldr	r0, [pc, #360]	@ (811f578 <tcp_output_segment+0x1ac>)
 811f410:	f002 ff28 	bl	8122264 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 811f414:	68f8      	ldr	r0, [r7, #12]
 811f416:	f7ff ffb9 	bl	811f38c <tcp_output_segment_busy>
 811f41a:	4603      	mov	r3, r0
 811f41c:	2b00      	cmp	r3, #0
 811f41e:	d001      	beq.n	811f424 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 811f420:	2300      	movs	r3, #0
 811f422:	e0a1      	b.n	811f568 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 811f424:	68bb      	ldr	r3, [r7, #8]
 811f426:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811f428:	68fb      	ldr	r3, [r7, #12]
 811f42a:	691c      	ldr	r4, [r3, #16]
 811f42c:	4610      	mov	r0, r2
 811f42e:	f7f4 ff1a 	bl	8114266 <lwip_htonl>
 811f432:	4603      	mov	r3, r0
 811f434:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 811f436:	68bb      	ldr	r3, [r7, #8]
 811f438:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 811f43a:	68fb      	ldr	r3, [r7, #12]
 811f43c:	691c      	ldr	r4, [r3, #16]
 811f43e:	4610      	mov	r0, r2
 811f440:	f7f4 fefc 	bl	811423c <lwip_htons>
 811f444:	4603      	mov	r3, r0
 811f446:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 811f448:	68bb      	ldr	r3, [r7, #8]
 811f44a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811f44c:	68ba      	ldr	r2, [r7, #8]
 811f44e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 811f450:	441a      	add	r2, r3
 811f452:	68bb      	ldr	r3, [r7, #8]
 811f454:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 811f456:	68fb      	ldr	r3, [r7, #12]
 811f458:	691b      	ldr	r3, [r3, #16]
 811f45a:	3314      	adds	r3, #20
 811f45c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 811f45e:	68fb      	ldr	r3, [r7, #12]
 811f460:	7b1b      	ldrb	r3, [r3, #12]
 811f462:	f003 0301 	and.w	r3, r3, #1
 811f466:	2b00      	cmp	r3, #0
 811f468:	d015      	beq.n	811f496 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 811f46a:	68bb      	ldr	r3, [r7, #8]
 811f46c:	3304      	adds	r3, #4
 811f46e:	461a      	mov	r2, r3
 811f470:	6879      	ldr	r1, [r7, #4]
 811f472:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 811f476:	f7fc f8a9 	bl	811b5cc <tcp_eff_send_mss_netif>
 811f47a:	4603      	mov	r3, r0
 811f47c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 811f47e:	8b7b      	ldrh	r3, [r7, #26]
 811f480:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 811f484:	4618      	mov	r0, r3
 811f486:	f7f4 feee 	bl	8114266 <lwip_htonl>
 811f48a:	4602      	mov	r2, r0
 811f48c:	69fb      	ldr	r3, [r7, #28]
 811f48e:	601a      	str	r2, [r3, #0]
    opts += 1;
 811f490:	69fb      	ldr	r3, [r7, #28]
 811f492:	3304      	adds	r3, #4
 811f494:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 811f496:	68bb      	ldr	r3, [r7, #8]
 811f498:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 811f49c:	2b00      	cmp	r3, #0
 811f49e:	da02      	bge.n	811f4a6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 811f4a0:	68bb      	ldr	r3, [r7, #8]
 811f4a2:	2200      	movs	r2, #0
 811f4a4:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 811f4a6:	68bb      	ldr	r3, [r7, #8]
 811f4a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 811f4aa:	2b00      	cmp	r3, #0
 811f4ac:	d10c      	bne.n	811f4c8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 811f4ae:	4b35      	ldr	r3, [pc, #212]	@ (811f584 <tcp_output_segment+0x1b8>)
 811f4b0:	681a      	ldr	r2, [r3, #0]
 811f4b2:	68bb      	ldr	r3, [r7, #8]
 811f4b4:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 811f4b6:	68fb      	ldr	r3, [r7, #12]
 811f4b8:	691b      	ldr	r3, [r3, #16]
 811f4ba:	685b      	ldr	r3, [r3, #4]
 811f4bc:	4618      	mov	r0, r3
 811f4be:	f7f4 fed2 	bl	8114266 <lwip_htonl>
 811f4c2:	4602      	mov	r2, r0
 811f4c4:	68bb      	ldr	r3, [r7, #8]
 811f4c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 811f4c8:	68fb      	ldr	r3, [r7, #12]
 811f4ca:	691a      	ldr	r2, [r3, #16]
 811f4cc:	68fb      	ldr	r3, [r7, #12]
 811f4ce:	685b      	ldr	r3, [r3, #4]
 811f4d0:	685b      	ldr	r3, [r3, #4]
 811f4d2:	1ad3      	subs	r3, r2, r3
 811f4d4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 811f4d6:	68fb      	ldr	r3, [r7, #12]
 811f4d8:	685b      	ldr	r3, [r3, #4]
 811f4da:	8959      	ldrh	r1, [r3, #10]
 811f4dc:	68fb      	ldr	r3, [r7, #12]
 811f4de:	685b      	ldr	r3, [r3, #4]
 811f4e0:	8b3a      	ldrh	r2, [r7, #24]
 811f4e2:	1a8a      	subs	r2, r1, r2
 811f4e4:	b292      	uxth	r2, r2
 811f4e6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 811f4e8:	68fb      	ldr	r3, [r7, #12]
 811f4ea:	685b      	ldr	r3, [r3, #4]
 811f4ec:	8919      	ldrh	r1, [r3, #8]
 811f4ee:	68fb      	ldr	r3, [r7, #12]
 811f4f0:	685b      	ldr	r3, [r3, #4]
 811f4f2:	8b3a      	ldrh	r2, [r7, #24]
 811f4f4:	1a8a      	subs	r2, r1, r2
 811f4f6:	b292      	uxth	r2, r2
 811f4f8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 811f4fa:	68fb      	ldr	r3, [r7, #12]
 811f4fc:	685b      	ldr	r3, [r3, #4]
 811f4fe:	68fa      	ldr	r2, [r7, #12]
 811f500:	6912      	ldr	r2, [r2, #16]
 811f502:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 811f504:	68fb      	ldr	r3, [r7, #12]
 811f506:	691b      	ldr	r3, [r3, #16]
 811f508:	2200      	movs	r2, #0
 811f50a:	741a      	strb	r2, [r3, #16]
 811f50c:	2200      	movs	r2, #0
 811f50e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 811f510:	68fb      	ldr	r3, [r7, #12]
 811f512:	691a      	ldr	r2, [r3, #16]
 811f514:	68fb      	ldr	r3, [r7, #12]
 811f516:	7b1b      	ldrb	r3, [r3, #12]
 811f518:	f003 0301 	and.w	r3, r3, #1
 811f51c:	2b00      	cmp	r3, #0
 811f51e:	d001      	beq.n	811f524 <tcp_output_segment+0x158>
 811f520:	2318      	movs	r3, #24
 811f522:	e000      	b.n	811f526 <tcp_output_segment+0x15a>
 811f524:	2314      	movs	r3, #20
 811f526:	4413      	add	r3, r2
 811f528:	69fa      	ldr	r2, [r7, #28]
 811f52a:	429a      	cmp	r2, r3
 811f52c:	d006      	beq.n	811f53c <tcp_output_segment+0x170>
 811f52e:	4b10      	ldr	r3, [pc, #64]	@ (811f570 <tcp_output_segment+0x1a4>)
 811f530:	f240 621c 	movw	r2, #1564	@ 0x61c
 811f534:	4914      	ldr	r1, [pc, #80]	@ (811f588 <tcp_output_segment+0x1bc>)
 811f536:	4810      	ldr	r0, [pc, #64]	@ (811f578 <tcp_output_segment+0x1ac>)
 811f538:	f002 fe94 	bl	8122264 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 811f53c:	68fb      	ldr	r3, [r7, #12]
 811f53e:	6858      	ldr	r0, [r3, #4]
 811f540:	68b9      	ldr	r1, [r7, #8]
 811f542:	68bb      	ldr	r3, [r7, #8]
 811f544:	1d1c      	adds	r4, r3, #4
 811f546:	68bb      	ldr	r3, [r7, #8]
 811f548:	7add      	ldrb	r5, [r3, #11]
 811f54a:	68bb      	ldr	r3, [r7, #8]
 811f54c:	7a9b      	ldrb	r3, [r3, #10]
 811f54e:	687a      	ldr	r2, [r7, #4]
 811f550:	9202      	str	r2, [sp, #8]
 811f552:	2206      	movs	r2, #6
 811f554:	9201      	str	r2, [sp, #4]
 811f556:	9300      	str	r3, [sp, #0]
 811f558:	462b      	mov	r3, r5
 811f55a:	4622      	mov	r2, r4
 811f55c:	f7f6 ff30 	bl	81163c0 <ip4_output_if>
 811f560:	4603      	mov	r3, r0
 811f562:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 811f564:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 811f568:	4618      	mov	r0, r3
 811f56a:	3720      	adds	r7, #32
 811f56c:	46bd      	mov	sp, r7
 811f56e:	bdb0      	pop	{r4, r5, r7, pc}
 811f570:	08127410 	.word	0x08127410
 811f574:	08127a70 	.word	0x08127a70
 811f578:	081274a4 	.word	0x081274a4
 811f57c:	08127a90 	.word	0x08127a90
 811f580:	08127ab0 	.word	0x08127ab0
 811f584:	10011e58 	.word	0x10011e58
 811f588:	08127ad4 	.word	0x08127ad4

0811f58c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 811f58c:	b5b0      	push	{r4, r5, r7, lr}
 811f58e:	b084      	sub	sp, #16
 811f590:	af00      	add	r7, sp, #0
 811f592:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 811f594:	687b      	ldr	r3, [r7, #4]
 811f596:	2b00      	cmp	r3, #0
 811f598:	d106      	bne.n	811f5a8 <tcp_rexmit_rto_prepare+0x1c>
 811f59a:	4b36      	ldr	r3, [pc, #216]	@ (811f674 <tcp_rexmit_rto_prepare+0xe8>)
 811f59c:	f240 6263 	movw	r2, #1635	@ 0x663
 811f5a0:	4935      	ldr	r1, [pc, #212]	@ (811f678 <tcp_rexmit_rto_prepare+0xec>)
 811f5a2:	4836      	ldr	r0, [pc, #216]	@ (811f67c <tcp_rexmit_rto_prepare+0xf0>)
 811f5a4:	f002 fe5e 	bl	8122264 <iprintf>

  if (pcb->unacked == NULL) {
 811f5a8:	687b      	ldr	r3, [r7, #4]
 811f5aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811f5ac:	2b00      	cmp	r3, #0
 811f5ae:	d102      	bne.n	811f5b6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 811f5b0:	f06f 0305 	mvn.w	r3, #5
 811f5b4:	e059      	b.n	811f66a <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 811f5b6:	687b      	ldr	r3, [r7, #4]
 811f5b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811f5ba:	60fb      	str	r3, [r7, #12]
 811f5bc:	e00b      	b.n	811f5d6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 811f5be:	68f8      	ldr	r0, [r7, #12]
 811f5c0:	f7ff fee4 	bl	811f38c <tcp_output_segment_busy>
 811f5c4:	4603      	mov	r3, r0
 811f5c6:	2b00      	cmp	r3, #0
 811f5c8:	d002      	beq.n	811f5d0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 811f5ca:	f06f 0305 	mvn.w	r3, #5
 811f5ce:	e04c      	b.n	811f66a <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 811f5d0:	68fb      	ldr	r3, [r7, #12]
 811f5d2:	681b      	ldr	r3, [r3, #0]
 811f5d4:	60fb      	str	r3, [r7, #12]
 811f5d6:	68fb      	ldr	r3, [r7, #12]
 811f5d8:	681b      	ldr	r3, [r3, #0]
 811f5da:	2b00      	cmp	r3, #0
 811f5dc:	d1ef      	bne.n	811f5be <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 811f5de:	68f8      	ldr	r0, [r7, #12]
 811f5e0:	f7ff fed4 	bl	811f38c <tcp_output_segment_busy>
 811f5e4:	4603      	mov	r3, r0
 811f5e6:	2b00      	cmp	r3, #0
 811f5e8:	d002      	beq.n	811f5f0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 811f5ea:	f06f 0305 	mvn.w	r3, #5
 811f5ee:	e03c      	b.n	811f66a <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 811f5f0:	687b      	ldr	r3, [r7, #4]
 811f5f2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 811f5f4:	68fb      	ldr	r3, [r7, #12]
 811f5f6:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 811f5f8:	687b      	ldr	r3, [r7, #4]
 811f5fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811f5fc:	2b00      	cmp	r3, #0
 811f5fe:	d104      	bne.n	811f60a <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 811f600:	68fb      	ldr	r3, [r7, #12]
 811f602:	895a      	ldrh	r2, [r3, #10]
 811f604:	687b      	ldr	r3, [r7, #4]
 811f606:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 811f60a:	687b      	ldr	r3, [r7, #4]
 811f60c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 811f60e:	687b      	ldr	r3, [r7, #4]
 811f610:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 811f612:	687b      	ldr	r3, [r7, #4]
 811f614:	2200      	movs	r2, #0
 811f616:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 811f618:	687b      	ldr	r3, [r7, #4]
 811f61a:	8b5b      	ldrh	r3, [r3, #26]
 811f61c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 811f620:	b29a      	uxth	r2, r3
 811f622:	687b      	ldr	r3, [r7, #4]
 811f624:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 811f626:	68fb      	ldr	r3, [r7, #12]
 811f628:	691b      	ldr	r3, [r3, #16]
 811f62a:	685b      	ldr	r3, [r3, #4]
 811f62c:	4618      	mov	r0, r3
 811f62e:	f7f4 fe1a 	bl	8114266 <lwip_htonl>
 811f632:	4604      	mov	r4, r0
 811f634:	68fb      	ldr	r3, [r7, #12]
 811f636:	891b      	ldrh	r3, [r3, #8]
 811f638:	461d      	mov	r5, r3
 811f63a:	68fb      	ldr	r3, [r7, #12]
 811f63c:	691b      	ldr	r3, [r3, #16]
 811f63e:	899b      	ldrh	r3, [r3, #12]
 811f640:	b29b      	uxth	r3, r3
 811f642:	4618      	mov	r0, r3
 811f644:	f7f4 fdfa 	bl	811423c <lwip_htons>
 811f648:	4603      	mov	r3, r0
 811f64a:	b2db      	uxtb	r3, r3
 811f64c:	f003 0303 	and.w	r3, r3, #3
 811f650:	2b00      	cmp	r3, #0
 811f652:	d001      	beq.n	811f658 <tcp_rexmit_rto_prepare+0xcc>
 811f654:	2301      	movs	r3, #1
 811f656:	e000      	b.n	811f65a <tcp_rexmit_rto_prepare+0xce>
 811f658:	2300      	movs	r3, #0
 811f65a:	442b      	add	r3, r5
 811f65c:	18e2      	adds	r2, r4, r3
 811f65e:	687b      	ldr	r3, [r7, #4]
 811f660:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 811f662:	687b      	ldr	r3, [r7, #4]
 811f664:	2200      	movs	r2, #0
 811f666:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 811f668:	2300      	movs	r3, #0
}
 811f66a:	4618      	mov	r0, r3
 811f66c:	3710      	adds	r7, #16
 811f66e:	46bd      	mov	sp, r7
 811f670:	bdb0      	pop	{r4, r5, r7, pc}
 811f672:	bf00      	nop
 811f674:	08127410 	.word	0x08127410
 811f678:	08127ae8 	.word	0x08127ae8
 811f67c:	081274a4 	.word	0x081274a4

0811f680 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 811f680:	b580      	push	{r7, lr}
 811f682:	b082      	sub	sp, #8
 811f684:	af00      	add	r7, sp, #0
 811f686:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 811f688:	687b      	ldr	r3, [r7, #4]
 811f68a:	2b00      	cmp	r3, #0
 811f68c:	d106      	bne.n	811f69c <tcp_rexmit_rto_commit+0x1c>
 811f68e:	4b0d      	ldr	r3, [pc, #52]	@ (811f6c4 <tcp_rexmit_rto_commit+0x44>)
 811f690:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 811f694:	490c      	ldr	r1, [pc, #48]	@ (811f6c8 <tcp_rexmit_rto_commit+0x48>)
 811f696:	480d      	ldr	r0, [pc, #52]	@ (811f6cc <tcp_rexmit_rto_commit+0x4c>)
 811f698:	f002 fde4 	bl	8122264 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 811f69c:	687b      	ldr	r3, [r7, #4]
 811f69e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811f6a2:	2bff      	cmp	r3, #255	@ 0xff
 811f6a4:	d007      	beq.n	811f6b6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 811f6a6:	687b      	ldr	r3, [r7, #4]
 811f6a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811f6ac:	3301      	adds	r3, #1
 811f6ae:	b2da      	uxtb	r2, r3
 811f6b0:	687b      	ldr	r3, [r7, #4]
 811f6b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 811f6b6:	6878      	ldr	r0, [r7, #4]
 811f6b8:	f7ff fc72 	bl	811efa0 <tcp_output>
}
 811f6bc:	bf00      	nop
 811f6be:	3708      	adds	r7, #8
 811f6c0:	46bd      	mov	sp, r7
 811f6c2:	bd80      	pop	{r7, pc}
 811f6c4:	08127410 	.word	0x08127410
 811f6c8:	08127b0c 	.word	0x08127b0c
 811f6cc:	081274a4 	.word	0x081274a4

0811f6d0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 811f6d0:	b580      	push	{r7, lr}
 811f6d2:	b082      	sub	sp, #8
 811f6d4:	af00      	add	r7, sp, #0
 811f6d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 811f6d8:	687b      	ldr	r3, [r7, #4]
 811f6da:	2b00      	cmp	r3, #0
 811f6dc:	d106      	bne.n	811f6ec <tcp_rexmit_rto+0x1c>
 811f6de:	4b0a      	ldr	r3, [pc, #40]	@ (811f708 <tcp_rexmit_rto+0x38>)
 811f6e0:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 811f6e4:	4909      	ldr	r1, [pc, #36]	@ (811f70c <tcp_rexmit_rto+0x3c>)
 811f6e6:	480a      	ldr	r0, [pc, #40]	@ (811f710 <tcp_rexmit_rto+0x40>)
 811f6e8:	f002 fdbc 	bl	8122264 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 811f6ec:	6878      	ldr	r0, [r7, #4]
 811f6ee:	f7ff ff4d 	bl	811f58c <tcp_rexmit_rto_prepare>
 811f6f2:	4603      	mov	r3, r0
 811f6f4:	2b00      	cmp	r3, #0
 811f6f6:	d102      	bne.n	811f6fe <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 811f6f8:	6878      	ldr	r0, [r7, #4]
 811f6fa:	f7ff ffc1 	bl	811f680 <tcp_rexmit_rto_commit>
  }
}
 811f6fe:	bf00      	nop
 811f700:	3708      	adds	r7, #8
 811f702:	46bd      	mov	sp, r7
 811f704:	bd80      	pop	{r7, pc}
 811f706:	bf00      	nop
 811f708:	08127410 	.word	0x08127410
 811f70c:	08127b30 	.word	0x08127b30
 811f710:	081274a4 	.word	0x081274a4

0811f714 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 811f714:	b590      	push	{r4, r7, lr}
 811f716:	b085      	sub	sp, #20
 811f718:	af00      	add	r7, sp, #0
 811f71a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 811f71c:	687b      	ldr	r3, [r7, #4]
 811f71e:	2b00      	cmp	r3, #0
 811f720:	d106      	bne.n	811f730 <tcp_rexmit+0x1c>
 811f722:	4b2f      	ldr	r3, [pc, #188]	@ (811f7e0 <tcp_rexmit+0xcc>)
 811f724:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 811f728:	492e      	ldr	r1, [pc, #184]	@ (811f7e4 <tcp_rexmit+0xd0>)
 811f72a:	482f      	ldr	r0, [pc, #188]	@ (811f7e8 <tcp_rexmit+0xd4>)
 811f72c:	f002 fd9a 	bl	8122264 <iprintf>

  if (pcb->unacked == NULL) {
 811f730:	687b      	ldr	r3, [r7, #4]
 811f732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811f734:	2b00      	cmp	r3, #0
 811f736:	d102      	bne.n	811f73e <tcp_rexmit+0x2a>
    return ERR_VAL;
 811f738:	f06f 0305 	mvn.w	r3, #5
 811f73c:	e04c      	b.n	811f7d8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 811f73e:	687b      	ldr	r3, [r7, #4]
 811f740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811f742:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 811f744:	68b8      	ldr	r0, [r7, #8]
 811f746:	f7ff fe21 	bl	811f38c <tcp_output_segment_busy>
 811f74a:	4603      	mov	r3, r0
 811f74c:	2b00      	cmp	r3, #0
 811f74e:	d002      	beq.n	811f756 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 811f750:	f06f 0305 	mvn.w	r3, #5
 811f754:	e040      	b.n	811f7d8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 811f756:	68bb      	ldr	r3, [r7, #8]
 811f758:	681a      	ldr	r2, [r3, #0]
 811f75a:	687b      	ldr	r3, [r7, #4]
 811f75c:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 811f75e:	687b      	ldr	r3, [r7, #4]
 811f760:	336c      	adds	r3, #108	@ 0x6c
 811f762:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 811f764:	e002      	b.n	811f76c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 811f766:	68fb      	ldr	r3, [r7, #12]
 811f768:	681b      	ldr	r3, [r3, #0]
 811f76a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 811f76c:	68fb      	ldr	r3, [r7, #12]
 811f76e:	681b      	ldr	r3, [r3, #0]
 811f770:	2b00      	cmp	r3, #0
 811f772:	d011      	beq.n	811f798 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 811f774:	68fb      	ldr	r3, [r7, #12]
 811f776:	681b      	ldr	r3, [r3, #0]
 811f778:	691b      	ldr	r3, [r3, #16]
 811f77a:	685b      	ldr	r3, [r3, #4]
 811f77c:	4618      	mov	r0, r3
 811f77e:	f7f4 fd72 	bl	8114266 <lwip_htonl>
 811f782:	4604      	mov	r4, r0
 811f784:	68bb      	ldr	r3, [r7, #8]
 811f786:	691b      	ldr	r3, [r3, #16]
 811f788:	685b      	ldr	r3, [r3, #4]
 811f78a:	4618      	mov	r0, r3
 811f78c:	f7f4 fd6b 	bl	8114266 <lwip_htonl>
 811f790:	4603      	mov	r3, r0
 811f792:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 811f794:	2b00      	cmp	r3, #0
 811f796:	dbe6      	blt.n	811f766 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 811f798:	68fb      	ldr	r3, [r7, #12]
 811f79a:	681a      	ldr	r2, [r3, #0]
 811f79c:	68bb      	ldr	r3, [r7, #8]
 811f79e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 811f7a0:	68fb      	ldr	r3, [r7, #12]
 811f7a2:	68ba      	ldr	r2, [r7, #8]
 811f7a4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 811f7a6:	68bb      	ldr	r3, [r7, #8]
 811f7a8:	681b      	ldr	r3, [r3, #0]
 811f7aa:	2b00      	cmp	r3, #0
 811f7ac:	d103      	bne.n	811f7b6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 811f7ae:	687b      	ldr	r3, [r7, #4]
 811f7b0:	2200      	movs	r2, #0
 811f7b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 811f7b6:	687b      	ldr	r3, [r7, #4]
 811f7b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811f7bc:	2bff      	cmp	r3, #255	@ 0xff
 811f7be:	d007      	beq.n	811f7d0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 811f7c0:	687b      	ldr	r3, [r7, #4]
 811f7c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811f7c6:	3301      	adds	r3, #1
 811f7c8:	b2da      	uxtb	r2, r3
 811f7ca:	687b      	ldr	r3, [r7, #4]
 811f7cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 811f7d0:	687b      	ldr	r3, [r7, #4]
 811f7d2:	2200      	movs	r2, #0
 811f7d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 811f7d6:	2300      	movs	r3, #0
}
 811f7d8:	4618      	mov	r0, r3
 811f7da:	3714      	adds	r7, #20
 811f7dc:	46bd      	mov	sp, r7
 811f7de:	bd90      	pop	{r4, r7, pc}
 811f7e0:	08127410 	.word	0x08127410
 811f7e4:	08127b4c 	.word	0x08127b4c
 811f7e8:	081274a4 	.word	0x081274a4

0811f7ec <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 811f7ec:	b580      	push	{r7, lr}
 811f7ee:	b082      	sub	sp, #8
 811f7f0:	af00      	add	r7, sp, #0
 811f7f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 811f7f4:	687b      	ldr	r3, [r7, #4]
 811f7f6:	2b00      	cmp	r3, #0
 811f7f8:	d106      	bne.n	811f808 <tcp_rexmit_fast+0x1c>
 811f7fa:	4b2a      	ldr	r3, [pc, #168]	@ (811f8a4 <tcp_rexmit_fast+0xb8>)
 811f7fc:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 811f800:	4929      	ldr	r1, [pc, #164]	@ (811f8a8 <tcp_rexmit_fast+0xbc>)
 811f802:	482a      	ldr	r0, [pc, #168]	@ (811f8ac <tcp_rexmit_fast+0xc0>)
 811f804:	f002 fd2e 	bl	8122264 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 811f808:	687b      	ldr	r3, [r7, #4]
 811f80a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811f80c:	2b00      	cmp	r3, #0
 811f80e:	d044      	beq.n	811f89a <tcp_rexmit_fast+0xae>
 811f810:	687b      	ldr	r3, [r7, #4]
 811f812:	8b5b      	ldrh	r3, [r3, #26]
 811f814:	f003 0304 	and.w	r3, r3, #4
 811f818:	2b00      	cmp	r3, #0
 811f81a:	d13e      	bne.n	811f89a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 811f81c:	6878      	ldr	r0, [r7, #4]
 811f81e:	f7ff ff79 	bl	811f714 <tcp_rexmit>
 811f822:	4603      	mov	r3, r0
 811f824:	2b00      	cmp	r3, #0
 811f826:	d138      	bne.n	811f89a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 811f828:	687b      	ldr	r3, [r7, #4]
 811f82a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 811f82e:	687b      	ldr	r3, [r7, #4]
 811f830:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 811f834:	4293      	cmp	r3, r2
 811f836:	bf28      	it	cs
 811f838:	4613      	movcs	r3, r2
 811f83a:	b29b      	uxth	r3, r3
 811f83c:	0fda      	lsrs	r2, r3, #31
 811f83e:	4413      	add	r3, r2
 811f840:	105b      	asrs	r3, r3, #1
 811f842:	b29a      	uxth	r2, r3
 811f844:	687b      	ldr	r3, [r7, #4]
 811f846:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 811f84a:	687b      	ldr	r3, [r7, #4]
 811f84c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 811f850:	461a      	mov	r2, r3
 811f852:	687b      	ldr	r3, [r7, #4]
 811f854:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811f856:	005b      	lsls	r3, r3, #1
 811f858:	429a      	cmp	r2, r3
 811f85a:	d206      	bcs.n	811f86a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 811f85c:	687b      	ldr	r3, [r7, #4]
 811f85e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811f860:	005b      	lsls	r3, r3, #1
 811f862:	b29a      	uxth	r2, r3
 811f864:	687b      	ldr	r3, [r7, #4]
 811f866:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 811f86a:	687b      	ldr	r3, [r7, #4]
 811f86c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 811f870:	687b      	ldr	r3, [r7, #4]
 811f872:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811f874:	4619      	mov	r1, r3
 811f876:	0049      	lsls	r1, r1, #1
 811f878:	440b      	add	r3, r1
 811f87a:	b29b      	uxth	r3, r3
 811f87c:	4413      	add	r3, r2
 811f87e:	b29a      	uxth	r2, r3
 811f880:	687b      	ldr	r3, [r7, #4]
 811f882:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 811f886:	687b      	ldr	r3, [r7, #4]
 811f888:	8b5b      	ldrh	r3, [r3, #26]
 811f88a:	f043 0304 	orr.w	r3, r3, #4
 811f88e:	b29a      	uxth	r2, r3
 811f890:	687b      	ldr	r3, [r7, #4]
 811f892:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 811f894:	687b      	ldr	r3, [r7, #4]
 811f896:	2200      	movs	r2, #0
 811f898:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 811f89a:	bf00      	nop
 811f89c:	3708      	adds	r7, #8
 811f89e:	46bd      	mov	sp, r7
 811f8a0:	bd80      	pop	{r7, pc}
 811f8a2:	bf00      	nop
 811f8a4:	08127410 	.word	0x08127410
 811f8a8:	08127b64 	.word	0x08127b64
 811f8ac:	081274a4 	.word	0x081274a4

0811f8b0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 811f8b0:	b580      	push	{r7, lr}
 811f8b2:	b086      	sub	sp, #24
 811f8b4:	af00      	add	r7, sp, #0
 811f8b6:	60f8      	str	r0, [r7, #12]
 811f8b8:	607b      	str	r3, [r7, #4]
 811f8ba:	460b      	mov	r3, r1
 811f8bc:	817b      	strh	r3, [r7, #10]
 811f8be:	4613      	mov	r3, r2
 811f8c0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 811f8c2:	897a      	ldrh	r2, [r7, #10]
 811f8c4:	893b      	ldrh	r3, [r7, #8]
 811f8c6:	4413      	add	r3, r2
 811f8c8:	b29b      	uxth	r3, r3
 811f8ca:	3314      	adds	r3, #20
 811f8cc:	b29b      	uxth	r3, r3
 811f8ce:	f44f 7220 	mov.w	r2, #640	@ 0x280
 811f8d2:	4619      	mov	r1, r3
 811f8d4:	2022      	movs	r0, #34	@ 0x22
 811f8d6:	f7f9 f96d 	bl	8118bb4 <pbuf_alloc>
 811f8da:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 811f8dc:	697b      	ldr	r3, [r7, #20]
 811f8de:	2b00      	cmp	r3, #0
 811f8e0:	d04d      	beq.n	811f97e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 811f8e2:	897b      	ldrh	r3, [r7, #10]
 811f8e4:	3313      	adds	r3, #19
 811f8e6:	697a      	ldr	r2, [r7, #20]
 811f8e8:	8952      	ldrh	r2, [r2, #10]
 811f8ea:	4293      	cmp	r3, r2
 811f8ec:	db06      	blt.n	811f8fc <tcp_output_alloc_header_common+0x4c>
 811f8ee:	4b26      	ldr	r3, [pc, #152]	@ (811f988 <tcp_output_alloc_header_common+0xd8>)
 811f8f0:	f240 7223 	movw	r2, #1827	@ 0x723
 811f8f4:	4925      	ldr	r1, [pc, #148]	@ (811f98c <tcp_output_alloc_header_common+0xdc>)
 811f8f6:	4826      	ldr	r0, [pc, #152]	@ (811f990 <tcp_output_alloc_header_common+0xe0>)
 811f8f8:	f002 fcb4 	bl	8122264 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 811f8fc:	697b      	ldr	r3, [r7, #20]
 811f8fe:	685b      	ldr	r3, [r3, #4]
 811f900:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 811f902:	8c3b      	ldrh	r3, [r7, #32]
 811f904:	4618      	mov	r0, r3
 811f906:	f7f4 fc99 	bl	811423c <lwip_htons>
 811f90a:	4603      	mov	r3, r0
 811f90c:	461a      	mov	r2, r3
 811f90e:	693b      	ldr	r3, [r7, #16]
 811f910:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 811f912:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 811f914:	4618      	mov	r0, r3
 811f916:	f7f4 fc91 	bl	811423c <lwip_htons>
 811f91a:	4603      	mov	r3, r0
 811f91c:	461a      	mov	r2, r3
 811f91e:	693b      	ldr	r3, [r7, #16]
 811f920:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 811f922:	693b      	ldr	r3, [r7, #16]
 811f924:	687a      	ldr	r2, [r7, #4]
 811f926:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 811f928:	68f8      	ldr	r0, [r7, #12]
 811f92a:	f7f4 fc9c 	bl	8114266 <lwip_htonl>
 811f92e:	4602      	mov	r2, r0
 811f930:	693b      	ldr	r3, [r7, #16]
 811f932:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 811f934:	897b      	ldrh	r3, [r7, #10]
 811f936:	089b      	lsrs	r3, r3, #2
 811f938:	b29b      	uxth	r3, r3
 811f93a:	3305      	adds	r3, #5
 811f93c:	b29b      	uxth	r3, r3
 811f93e:	031b      	lsls	r3, r3, #12
 811f940:	b29a      	uxth	r2, r3
 811f942:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 811f946:	b29b      	uxth	r3, r3
 811f948:	4313      	orrs	r3, r2
 811f94a:	b29b      	uxth	r3, r3
 811f94c:	4618      	mov	r0, r3
 811f94e:	f7f4 fc75 	bl	811423c <lwip_htons>
 811f952:	4603      	mov	r3, r0
 811f954:	461a      	mov	r2, r3
 811f956:	693b      	ldr	r3, [r7, #16]
 811f958:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 811f95a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 811f95c:	4618      	mov	r0, r3
 811f95e:	f7f4 fc6d 	bl	811423c <lwip_htons>
 811f962:	4603      	mov	r3, r0
 811f964:	461a      	mov	r2, r3
 811f966:	693b      	ldr	r3, [r7, #16]
 811f968:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 811f96a:	693b      	ldr	r3, [r7, #16]
 811f96c:	2200      	movs	r2, #0
 811f96e:	741a      	strb	r2, [r3, #16]
 811f970:	2200      	movs	r2, #0
 811f972:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 811f974:	693b      	ldr	r3, [r7, #16]
 811f976:	2200      	movs	r2, #0
 811f978:	749a      	strb	r2, [r3, #18]
 811f97a:	2200      	movs	r2, #0
 811f97c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 811f97e:	697b      	ldr	r3, [r7, #20]
}
 811f980:	4618      	mov	r0, r3
 811f982:	3718      	adds	r7, #24
 811f984:	46bd      	mov	sp, r7
 811f986:	bd80      	pop	{r7, pc}
 811f988:	08127410 	.word	0x08127410
 811f98c:	08127b84 	.word	0x08127b84
 811f990:	081274a4 	.word	0x081274a4

0811f994 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 811f994:	b5b0      	push	{r4, r5, r7, lr}
 811f996:	b08a      	sub	sp, #40	@ 0x28
 811f998:	af04      	add	r7, sp, #16
 811f99a:	60f8      	str	r0, [r7, #12]
 811f99c:	607b      	str	r3, [r7, #4]
 811f99e:	460b      	mov	r3, r1
 811f9a0:	817b      	strh	r3, [r7, #10]
 811f9a2:	4613      	mov	r3, r2
 811f9a4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 811f9a6:	68fb      	ldr	r3, [r7, #12]
 811f9a8:	2b00      	cmp	r3, #0
 811f9aa:	d106      	bne.n	811f9ba <tcp_output_alloc_header+0x26>
 811f9ac:	4b15      	ldr	r3, [pc, #84]	@ (811fa04 <tcp_output_alloc_header+0x70>)
 811f9ae:	f240 7242 	movw	r2, #1858	@ 0x742
 811f9b2:	4915      	ldr	r1, [pc, #84]	@ (811fa08 <tcp_output_alloc_header+0x74>)
 811f9b4:	4815      	ldr	r0, [pc, #84]	@ (811fa0c <tcp_output_alloc_header+0x78>)
 811f9b6:	f002 fc55 	bl	8122264 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 811f9ba:	68fb      	ldr	r3, [r7, #12]
 811f9bc:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 811f9be:	68fb      	ldr	r3, [r7, #12]
 811f9c0:	8adb      	ldrh	r3, [r3, #22]
 811f9c2:	68fa      	ldr	r2, [r7, #12]
 811f9c4:	8b12      	ldrh	r2, [r2, #24]
 811f9c6:	68f9      	ldr	r1, [r7, #12]
 811f9c8:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 811f9ca:	893d      	ldrh	r5, [r7, #8]
 811f9cc:	897c      	ldrh	r4, [r7, #10]
 811f9ce:	9103      	str	r1, [sp, #12]
 811f9d0:	2110      	movs	r1, #16
 811f9d2:	9102      	str	r1, [sp, #8]
 811f9d4:	9201      	str	r2, [sp, #4]
 811f9d6:	9300      	str	r3, [sp, #0]
 811f9d8:	687b      	ldr	r3, [r7, #4]
 811f9da:	462a      	mov	r2, r5
 811f9dc:	4621      	mov	r1, r4
 811f9de:	f7ff ff67 	bl	811f8b0 <tcp_output_alloc_header_common>
 811f9e2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 811f9e4:	697b      	ldr	r3, [r7, #20]
 811f9e6:	2b00      	cmp	r3, #0
 811f9e8:	d006      	beq.n	811f9f8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 811f9ea:	68fb      	ldr	r3, [r7, #12]
 811f9ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811f9ee:	68fa      	ldr	r2, [r7, #12]
 811f9f0:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 811f9f2:	441a      	add	r2, r3
 811f9f4:	68fb      	ldr	r3, [r7, #12]
 811f9f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 811f9f8:	697b      	ldr	r3, [r7, #20]
}
 811f9fa:	4618      	mov	r0, r3
 811f9fc:	3718      	adds	r7, #24
 811f9fe:	46bd      	mov	sp, r7
 811fa00:	bdb0      	pop	{r4, r5, r7, pc}
 811fa02:	bf00      	nop
 811fa04:	08127410 	.word	0x08127410
 811fa08:	08127bb4 	.word	0x08127bb4
 811fa0c:	081274a4 	.word	0x081274a4

0811fa10 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 811fa10:	b580      	push	{r7, lr}
 811fa12:	b088      	sub	sp, #32
 811fa14:	af00      	add	r7, sp, #0
 811fa16:	60f8      	str	r0, [r7, #12]
 811fa18:	60b9      	str	r1, [r7, #8]
 811fa1a:	4611      	mov	r1, r2
 811fa1c:	461a      	mov	r2, r3
 811fa1e:	460b      	mov	r3, r1
 811fa20:	71fb      	strb	r3, [r7, #7]
 811fa22:	4613      	mov	r3, r2
 811fa24:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 811fa26:	2300      	movs	r3, #0
 811fa28:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 811fa2a:	68bb      	ldr	r3, [r7, #8]
 811fa2c:	2b00      	cmp	r3, #0
 811fa2e:	d106      	bne.n	811fa3e <tcp_output_fill_options+0x2e>
 811fa30:	4b12      	ldr	r3, [pc, #72]	@ (811fa7c <tcp_output_fill_options+0x6c>)
 811fa32:	f240 7256 	movw	r2, #1878	@ 0x756
 811fa36:	4912      	ldr	r1, [pc, #72]	@ (811fa80 <tcp_output_fill_options+0x70>)
 811fa38:	4812      	ldr	r0, [pc, #72]	@ (811fa84 <tcp_output_fill_options+0x74>)
 811fa3a:	f002 fc13 	bl	8122264 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 811fa3e:	68bb      	ldr	r3, [r7, #8]
 811fa40:	685b      	ldr	r3, [r3, #4]
 811fa42:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 811fa44:	69bb      	ldr	r3, [r7, #24]
 811fa46:	3314      	adds	r3, #20
 811fa48:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 811fa4a:	8bfb      	ldrh	r3, [r7, #30]
 811fa4c:	009b      	lsls	r3, r3, #2
 811fa4e:	461a      	mov	r2, r3
 811fa50:	79fb      	ldrb	r3, [r7, #7]
 811fa52:	009b      	lsls	r3, r3, #2
 811fa54:	f003 0304 	and.w	r3, r3, #4
 811fa58:	4413      	add	r3, r2
 811fa5a:	3314      	adds	r3, #20
 811fa5c:	69ba      	ldr	r2, [r7, #24]
 811fa5e:	4413      	add	r3, r2
 811fa60:	697a      	ldr	r2, [r7, #20]
 811fa62:	429a      	cmp	r2, r3
 811fa64:	d006      	beq.n	811fa74 <tcp_output_fill_options+0x64>
 811fa66:	4b05      	ldr	r3, [pc, #20]	@ (811fa7c <tcp_output_fill_options+0x6c>)
 811fa68:	f240 7275 	movw	r2, #1909	@ 0x775
 811fa6c:	4906      	ldr	r1, [pc, #24]	@ (811fa88 <tcp_output_fill_options+0x78>)
 811fa6e:	4805      	ldr	r0, [pc, #20]	@ (811fa84 <tcp_output_fill_options+0x74>)
 811fa70:	f002 fbf8 	bl	8122264 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 811fa74:	bf00      	nop
 811fa76:	3720      	adds	r7, #32
 811fa78:	46bd      	mov	sp, r7
 811fa7a:	bd80      	pop	{r7, pc}
 811fa7c:	08127410 	.word	0x08127410
 811fa80:	08127bdc 	.word	0x08127bdc
 811fa84:	081274a4 	.word	0x081274a4
 811fa88:	08127ad4 	.word	0x08127ad4

0811fa8c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 811fa8c:	b580      	push	{r7, lr}
 811fa8e:	b08a      	sub	sp, #40	@ 0x28
 811fa90:	af04      	add	r7, sp, #16
 811fa92:	60f8      	str	r0, [r7, #12]
 811fa94:	60b9      	str	r1, [r7, #8]
 811fa96:	607a      	str	r2, [r7, #4]
 811fa98:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 811fa9a:	68bb      	ldr	r3, [r7, #8]
 811fa9c:	2b00      	cmp	r3, #0
 811fa9e:	d106      	bne.n	811faae <tcp_output_control_segment+0x22>
 811faa0:	4b1c      	ldr	r3, [pc, #112]	@ (811fb14 <tcp_output_control_segment+0x88>)
 811faa2:	f240 7287 	movw	r2, #1927	@ 0x787
 811faa6:	491c      	ldr	r1, [pc, #112]	@ (811fb18 <tcp_output_control_segment+0x8c>)
 811faa8:	481c      	ldr	r0, [pc, #112]	@ (811fb1c <tcp_output_control_segment+0x90>)
 811faaa:	f002 fbdb 	bl	8122264 <iprintf>

  netif = tcp_route(pcb, src, dst);
 811faae:	683a      	ldr	r2, [r7, #0]
 811fab0:	6879      	ldr	r1, [r7, #4]
 811fab2:	68f8      	ldr	r0, [r7, #12]
 811fab4:	f7fe fa7c 	bl	811dfb0 <tcp_route>
 811fab8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 811faba:	693b      	ldr	r3, [r7, #16]
 811fabc:	2b00      	cmp	r3, #0
 811fabe:	d102      	bne.n	811fac6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 811fac0:	23fc      	movs	r3, #252	@ 0xfc
 811fac2:	75fb      	strb	r3, [r7, #23]
 811fac4:	e01c      	b.n	811fb00 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 811fac6:	68fb      	ldr	r3, [r7, #12]
 811fac8:	2b00      	cmp	r3, #0
 811faca:	d006      	beq.n	811fada <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 811facc:	68fb      	ldr	r3, [r7, #12]
 811face:	7adb      	ldrb	r3, [r3, #11]
 811fad0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 811fad2:	68fb      	ldr	r3, [r7, #12]
 811fad4:	7a9b      	ldrb	r3, [r3, #10]
 811fad6:	757b      	strb	r3, [r7, #21]
 811fad8:	e003      	b.n	811fae2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 811fada:	23ff      	movs	r3, #255	@ 0xff
 811fadc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 811fade:	2300      	movs	r3, #0
 811fae0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 811fae2:	7dba      	ldrb	r2, [r7, #22]
 811fae4:	693b      	ldr	r3, [r7, #16]
 811fae6:	9302      	str	r3, [sp, #8]
 811fae8:	2306      	movs	r3, #6
 811faea:	9301      	str	r3, [sp, #4]
 811faec:	7d7b      	ldrb	r3, [r7, #21]
 811faee:	9300      	str	r3, [sp, #0]
 811faf0:	4613      	mov	r3, r2
 811faf2:	683a      	ldr	r2, [r7, #0]
 811faf4:	6879      	ldr	r1, [r7, #4]
 811faf6:	68b8      	ldr	r0, [r7, #8]
 811faf8:	f7f6 fc62 	bl	81163c0 <ip4_output_if>
 811fafc:	4603      	mov	r3, r0
 811fafe:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 811fb00:	68b8      	ldr	r0, [r7, #8]
 811fb02:	f7f9 fb3b 	bl	811917c <pbuf_free>
  return err;
 811fb06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 811fb0a:	4618      	mov	r0, r3
 811fb0c:	3718      	adds	r7, #24
 811fb0e:	46bd      	mov	sp, r7
 811fb10:	bd80      	pop	{r7, pc}
 811fb12:	bf00      	nop
 811fb14:	08127410 	.word	0x08127410
 811fb18:	08127c04 	.word	0x08127c04
 811fb1c:	081274a4 	.word	0x081274a4

0811fb20 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 811fb20:	b590      	push	{r4, r7, lr}
 811fb22:	b08b      	sub	sp, #44	@ 0x2c
 811fb24:	af04      	add	r7, sp, #16
 811fb26:	60f8      	str	r0, [r7, #12]
 811fb28:	60b9      	str	r1, [r7, #8]
 811fb2a:	607a      	str	r2, [r7, #4]
 811fb2c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 811fb2e:	683b      	ldr	r3, [r7, #0]
 811fb30:	2b00      	cmp	r3, #0
 811fb32:	d106      	bne.n	811fb42 <tcp_rst+0x22>
 811fb34:	4b21      	ldr	r3, [pc, #132]	@ (811fbbc <tcp_rst+0x9c>)
 811fb36:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 811fb3a:	4921      	ldr	r1, [pc, #132]	@ (811fbc0 <tcp_rst+0xa0>)
 811fb3c:	4821      	ldr	r0, [pc, #132]	@ (811fbc4 <tcp_rst+0xa4>)
 811fb3e:	f002 fb91 	bl	8122264 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 811fb42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811fb44:	2b00      	cmp	r3, #0
 811fb46:	d106      	bne.n	811fb56 <tcp_rst+0x36>
 811fb48:	4b1c      	ldr	r3, [pc, #112]	@ (811fbbc <tcp_rst+0x9c>)
 811fb4a:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 811fb4e:	491e      	ldr	r1, [pc, #120]	@ (811fbc8 <tcp_rst+0xa8>)
 811fb50:	481c      	ldr	r0, [pc, #112]	@ (811fbc4 <tcp_rst+0xa4>)
 811fb52:	f002 fb87 	bl	8122264 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 811fb56:	2300      	movs	r3, #0
 811fb58:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 811fb5a:	f24d 0316 	movw	r3, #53270	@ 0xd016
 811fb5e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 811fb60:	7dfb      	ldrb	r3, [r7, #23]
 811fb62:	b29c      	uxth	r4, r3
 811fb64:	68b8      	ldr	r0, [r7, #8]
 811fb66:	f7f4 fb7e 	bl	8114266 <lwip_htonl>
 811fb6a:	4602      	mov	r2, r0
 811fb6c:	8abb      	ldrh	r3, [r7, #20]
 811fb6e:	9303      	str	r3, [sp, #12]
 811fb70:	2314      	movs	r3, #20
 811fb72:	9302      	str	r3, [sp, #8]
 811fb74:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 811fb76:	9301      	str	r3, [sp, #4]
 811fb78:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 811fb7a:	9300      	str	r3, [sp, #0]
 811fb7c:	4613      	mov	r3, r2
 811fb7e:	2200      	movs	r2, #0
 811fb80:	4621      	mov	r1, r4
 811fb82:	6878      	ldr	r0, [r7, #4]
 811fb84:	f7ff fe94 	bl	811f8b0 <tcp_output_alloc_header_common>
 811fb88:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 811fb8a:	693b      	ldr	r3, [r7, #16]
 811fb8c:	2b00      	cmp	r3, #0
 811fb8e:	d106      	bne.n	811fb9e <tcp_rst+0x7e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
 811fb90:	480e      	ldr	r0, [pc, #56]	@ (811fbcc <tcp_rst+0xac>)
 811fb92:	f002 fbd7 	bl	8122344 <puts>
 811fb96:	200d      	movs	r0, #13
 811fb98:	f002 fb76 	bl	8122288 <putchar>
    return;
 811fb9c:	e00b      	b.n	811fbb6 <tcp_rst+0x96>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 811fb9e:	7dfb      	ldrb	r3, [r7, #23]
 811fba0:	2200      	movs	r2, #0
 811fba2:	6939      	ldr	r1, [r7, #16]
 811fba4:	68f8      	ldr	r0, [r7, #12]
 811fba6:	f7ff ff33 	bl	811fa10 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 811fbaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811fbac:	683a      	ldr	r2, [r7, #0]
 811fbae:	6939      	ldr	r1, [r7, #16]
 811fbb0:	68f8      	ldr	r0, [r7, #12]
 811fbb2:	f7ff ff6b 	bl	811fa8c <tcp_output_control_segment>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 811fbb6:	371c      	adds	r7, #28
 811fbb8:	46bd      	mov	sp, r7
 811fbba:	bd90      	pop	{r4, r7, pc}
 811fbbc:	08127410 	.word	0x08127410
 811fbc0:	08127c30 	.word	0x08127c30
 811fbc4:	081274a4 	.word	0x081274a4
 811fbc8:	08127c4c 	.word	0x08127c4c
 811fbcc:	08127c68 	.word	0x08127c68

0811fbd0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 811fbd0:	b590      	push	{r4, r7, lr}
 811fbd2:	b087      	sub	sp, #28
 811fbd4:	af00      	add	r7, sp, #0
 811fbd6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 811fbd8:	2300      	movs	r3, #0
 811fbda:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 811fbdc:	2300      	movs	r3, #0
 811fbde:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 811fbe0:	687b      	ldr	r3, [r7, #4]
 811fbe2:	2b00      	cmp	r3, #0
 811fbe4:	d106      	bne.n	811fbf4 <tcp_send_empty_ack+0x24>
 811fbe6:	4b28      	ldr	r3, [pc, #160]	@ (811fc88 <tcp_send_empty_ack+0xb8>)
 811fbe8:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 811fbec:	4927      	ldr	r1, [pc, #156]	@ (811fc8c <tcp_send_empty_ack+0xbc>)
 811fbee:	4828      	ldr	r0, [pc, #160]	@ (811fc90 <tcp_send_empty_ack+0xc0>)
 811fbf0:	f002 fb38 	bl	8122264 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 811fbf4:	7dfb      	ldrb	r3, [r7, #23]
 811fbf6:	009b      	lsls	r3, r3, #2
 811fbf8:	b2db      	uxtb	r3, r3
 811fbfa:	f003 0304 	and.w	r3, r3, #4
 811fbfe:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 811fc00:	7d7b      	ldrb	r3, [r7, #21]
 811fc02:	b29c      	uxth	r4, r3
 811fc04:	687b      	ldr	r3, [r7, #4]
 811fc06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 811fc08:	4618      	mov	r0, r3
 811fc0a:	f7f4 fb2c 	bl	8114266 <lwip_htonl>
 811fc0e:	4603      	mov	r3, r0
 811fc10:	2200      	movs	r2, #0
 811fc12:	4621      	mov	r1, r4
 811fc14:	6878      	ldr	r0, [r7, #4]
 811fc16:	f7ff febd 	bl	811f994 <tcp_output_alloc_header>
 811fc1a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 811fc1c:	693b      	ldr	r3, [r7, #16]
 811fc1e:	2b00      	cmp	r3, #0
 811fc20:	d109      	bne.n	811fc36 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 811fc22:	687b      	ldr	r3, [r7, #4]
 811fc24:	8b5b      	ldrh	r3, [r3, #26]
 811fc26:	f043 0303 	orr.w	r3, r3, #3
 811fc2a:	b29a      	uxth	r2, r3
 811fc2c:	687b      	ldr	r3, [r7, #4]
 811fc2e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 811fc30:	f06f 0301 	mvn.w	r3, #1
 811fc34:	e023      	b.n	811fc7e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 811fc36:	7dbb      	ldrb	r3, [r7, #22]
 811fc38:	7dfa      	ldrb	r2, [r7, #23]
 811fc3a:	6939      	ldr	r1, [r7, #16]
 811fc3c:	6878      	ldr	r0, [r7, #4]
 811fc3e:	f7ff fee7 	bl	811fa10 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 811fc42:	687a      	ldr	r2, [r7, #4]
 811fc44:	687b      	ldr	r3, [r7, #4]
 811fc46:	3304      	adds	r3, #4
 811fc48:	6939      	ldr	r1, [r7, #16]
 811fc4a:	6878      	ldr	r0, [r7, #4]
 811fc4c:	f7ff ff1e 	bl	811fa8c <tcp_output_control_segment>
 811fc50:	4603      	mov	r3, r0
 811fc52:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 811fc54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811fc58:	2b00      	cmp	r3, #0
 811fc5a:	d007      	beq.n	811fc6c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 811fc5c:	687b      	ldr	r3, [r7, #4]
 811fc5e:	8b5b      	ldrh	r3, [r3, #26]
 811fc60:	f043 0303 	orr.w	r3, r3, #3
 811fc64:	b29a      	uxth	r2, r3
 811fc66:	687b      	ldr	r3, [r7, #4]
 811fc68:	835a      	strh	r2, [r3, #26]
 811fc6a:	e006      	b.n	811fc7a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 811fc6c:	687b      	ldr	r3, [r7, #4]
 811fc6e:	8b5b      	ldrh	r3, [r3, #26]
 811fc70:	f023 0303 	bic.w	r3, r3, #3
 811fc74:	b29a      	uxth	r2, r3
 811fc76:	687b      	ldr	r3, [r7, #4]
 811fc78:	835a      	strh	r2, [r3, #26]
  }

  return err;
 811fc7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 811fc7e:	4618      	mov	r0, r3
 811fc80:	371c      	adds	r7, #28
 811fc82:	46bd      	mov	sp, r7
 811fc84:	bd90      	pop	{r4, r7, pc}
 811fc86:	bf00      	nop
 811fc88:	08127410 	.word	0x08127410
 811fc8c:	08127c94 	.word	0x08127c94
 811fc90:	081274a4 	.word	0x081274a4

0811fc94 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 811fc94:	b590      	push	{r4, r7, lr}
 811fc96:	b089      	sub	sp, #36	@ 0x24
 811fc98:	af02      	add	r7, sp, #8
 811fc9a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 811fc9c:	2300      	movs	r3, #0
 811fc9e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 811fca0:	687b      	ldr	r3, [r7, #4]
 811fca2:	2b00      	cmp	r3, #0
 811fca4:	d106      	bne.n	811fcb4 <tcp_keepalive+0x20>
 811fca6:	4b3b      	ldr	r3, [pc, #236]	@ (811fd94 <tcp_keepalive+0x100>)
 811fca8:	f640 0224 	movw	r2, #2084	@ 0x824
 811fcac:	493a      	ldr	r1, [pc, #232]	@ (811fd98 <tcp_keepalive+0x104>)
 811fcae:	483b      	ldr	r0, [pc, #236]	@ (811fd9c <tcp_keepalive+0x108>)
 811fcb0:	f002 fad8 	bl	8122264 <iprintf>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: sending KEEPALIVE probe to "));
 811fcb4:	483a      	ldr	r0, [pc, #232]	@ (811fda0 <tcp_keepalive+0x10c>)
 811fcb6:	f002 fad5 	bl	8122264 <iprintf>
 811fcba:	200d      	movs	r0, #13
 811fcbc:	f002 fae4 	bl	8122288 <putchar>
  ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
 811fcc0:	687b      	ldr	r3, [r7, #4]
 811fcc2:	685b      	ldr	r3, [r3, #4]
 811fcc4:	b2db      	uxtb	r3, r3
 811fcc6:	4619      	mov	r1, r3
 811fcc8:	687b      	ldr	r3, [r7, #4]
 811fcca:	685b      	ldr	r3, [r3, #4]
 811fccc:	0a1b      	lsrs	r3, r3, #8
 811fcce:	b2db      	uxtb	r3, r3
 811fcd0:	461a      	mov	r2, r3
 811fcd2:	687b      	ldr	r3, [r7, #4]
 811fcd4:	685b      	ldr	r3, [r3, #4]
 811fcd6:	0c1b      	lsrs	r3, r3, #16
 811fcd8:	b2db      	uxtb	r3, r3
 811fcda:	4618      	mov	r0, r3
 811fcdc:	687b      	ldr	r3, [r7, #4]
 811fcde:	685b      	ldr	r3, [r3, #4]
 811fce0:	0e1b      	lsrs	r3, r3, #24
 811fce2:	b2db      	uxtb	r3, r3
 811fce4:	9300      	str	r3, [sp, #0]
 811fce6:	4603      	mov	r3, r0
 811fce8:	482e      	ldr	r0, [pc, #184]	@ (811fda4 <tcp_keepalive+0x110>)
 811fcea:	f002 fabb 	bl	8122264 <iprintf>
 811fcee:	200d      	movs	r0, #13
 811fcf0:	f002 faca 	bl	8122288 <putchar>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));
 811fcf4:	200a      	movs	r0, #10
 811fcf6:	f002 fac7 	bl	8122288 <putchar>
 811fcfa:	200d      	movs	r0, #13
 811fcfc:	f002 fac4 	bl	8122288 <putchar>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
 811fd00:	4b29      	ldr	r3, [pc, #164]	@ (811fda8 <tcp_keepalive+0x114>)
 811fd02:	6819      	ldr	r1, [r3, #0]
 811fd04:	687b      	ldr	r3, [r7, #4]
 811fd06:	6a1a      	ldr	r2, [r3, #32]
 811fd08:	687b      	ldr	r3, [r7, #4]
 811fd0a:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 811fd0e:	4827      	ldr	r0, [pc, #156]	@ (811fdac <tcp_keepalive+0x118>)
 811fd10:	f002 faa8 	bl	8122264 <iprintf>
 811fd14:	200d      	movs	r0, #13
 811fd16:	f002 fab7 	bl	8122288 <putchar>
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 811fd1a:	7dfb      	ldrb	r3, [r7, #23]
 811fd1c:	b29c      	uxth	r4, r3
 811fd1e:	687b      	ldr	r3, [r7, #4]
 811fd20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 811fd22:	3b01      	subs	r3, #1
 811fd24:	4618      	mov	r0, r3
 811fd26:	f7f4 fa9e 	bl	8114266 <lwip_htonl>
 811fd2a:	4603      	mov	r3, r0
 811fd2c:	2200      	movs	r2, #0
 811fd2e:	4621      	mov	r1, r4
 811fd30:	6878      	ldr	r0, [r7, #4]
 811fd32:	f7ff fe2f 	bl	811f994 <tcp_output_alloc_header>
 811fd36:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 811fd38:	693b      	ldr	r3, [r7, #16]
 811fd3a:	2b00      	cmp	r3, #0
 811fd3c:	d108      	bne.n	811fd50 <tcp_keepalive+0xbc>
    LWIP_DEBUGF(TCP_DEBUG,
 811fd3e:	481c      	ldr	r0, [pc, #112]	@ (811fdb0 <tcp_keepalive+0x11c>)
 811fd40:	f002 fb00 	bl	8122344 <puts>
 811fd44:	200d      	movs	r0, #13
 811fd46:	f002 fa9f 	bl	8122288 <putchar>
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 811fd4a:	f04f 33ff 	mov.w	r3, #4294967295
 811fd4e:	e01d      	b.n	811fd8c <tcp_keepalive+0xf8>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 811fd50:	7dfb      	ldrb	r3, [r7, #23]
 811fd52:	2200      	movs	r2, #0
 811fd54:	6939      	ldr	r1, [r7, #16]
 811fd56:	6878      	ldr	r0, [r7, #4]
 811fd58:	f7ff fe5a 	bl	811fa10 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 811fd5c:	687a      	ldr	r2, [r7, #4]
 811fd5e:	687b      	ldr	r3, [r7, #4]
 811fd60:	3304      	adds	r3, #4
 811fd62:	6939      	ldr	r1, [r7, #16]
 811fd64:	6878      	ldr	r0, [r7, #4]
 811fd66:	f7ff fe91 	bl	811fa8c <tcp_output_control_segment>
 811fd6a:	4603      	mov	r3, r0
 811fd6c:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
 811fd6e:	687b      	ldr	r3, [r7, #4]
 811fd70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 811fd72:	1e59      	subs	r1, r3, #1
 811fd74:	687b      	ldr	r3, [r7, #4]
 811fd76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811fd78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811fd7c:	480d      	ldr	r0, [pc, #52]	@ (811fdb4 <tcp_keepalive+0x120>)
 811fd7e:	f002 fa71 	bl	8122264 <iprintf>
 811fd82:	200d      	movs	r0, #13
 811fd84:	f002 fa80 	bl	8122288 <putchar>
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 811fd88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 811fd8c:	4618      	mov	r0, r3
 811fd8e:	371c      	adds	r7, #28
 811fd90:	46bd      	mov	sp, r7
 811fd92:	bd90      	pop	{r4, r7, pc}
 811fd94:	08127410 	.word	0x08127410
 811fd98:	08127cb4 	.word	0x08127cb4
 811fd9c:	081274a4 	.word	0x081274a4
 811fda0:	08127cd0 	.word	0x08127cd0
 811fda4:	08127cfc 	.word	0x08127cfc
 811fda8:	10011e58 	.word	0x10011e58
 811fdac:	08127d0c 	.word	0x08127d0c
 811fdb0:	08127d50 	.word	0x08127d50
 811fdb4:	08127d84 	.word	0x08127d84

0811fdb8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 811fdb8:	b590      	push	{r4, r7, lr}
 811fdba:	b08d      	sub	sp, #52	@ 0x34
 811fdbc:	af02      	add	r7, sp, #8
 811fdbe:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 811fdc0:	2300      	movs	r3, #0
 811fdc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 811fdc6:	687b      	ldr	r3, [r7, #4]
 811fdc8:	2b00      	cmp	r3, #0
 811fdca:	d106      	bne.n	811fdda <tcp_zero_window_probe+0x22>
 811fdcc:	4b6f      	ldr	r3, [pc, #444]	@ (811ff8c <tcp_zero_window_probe+0x1d4>)
 811fdce:	f640 024f 	movw	r2, #2127	@ 0x84f
 811fdd2:	496f      	ldr	r1, [pc, #444]	@ (811ff90 <tcp_zero_window_probe+0x1d8>)
 811fdd4:	486f      	ldr	r0, [pc, #444]	@ (811ff94 <tcp_zero_window_probe+0x1dc>)
 811fdd6:	f002 fa45 	bl	8122264 <iprintf>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: sending ZERO WINDOW probe to "));
 811fdda:	486f      	ldr	r0, [pc, #444]	@ (811ff98 <tcp_zero_window_probe+0x1e0>)
 811fddc:	f002 fa42 	bl	8122264 <iprintf>
 811fde0:	200d      	movs	r0, #13
 811fde2:	f002 fa51 	bl	8122288 <putchar>
  ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
 811fde6:	687b      	ldr	r3, [r7, #4]
 811fde8:	685b      	ldr	r3, [r3, #4]
 811fdea:	b2db      	uxtb	r3, r3
 811fdec:	4619      	mov	r1, r3
 811fdee:	687b      	ldr	r3, [r7, #4]
 811fdf0:	685b      	ldr	r3, [r3, #4]
 811fdf2:	0a1b      	lsrs	r3, r3, #8
 811fdf4:	b2db      	uxtb	r3, r3
 811fdf6:	461a      	mov	r2, r3
 811fdf8:	687b      	ldr	r3, [r7, #4]
 811fdfa:	685b      	ldr	r3, [r3, #4]
 811fdfc:	0c1b      	lsrs	r3, r3, #16
 811fdfe:	b2db      	uxtb	r3, r3
 811fe00:	4618      	mov	r0, r3
 811fe02:	687b      	ldr	r3, [r7, #4]
 811fe04:	685b      	ldr	r3, [r3, #4]
 811fe06:	0e1b      	lsrs	r3, r3, #24
 811fe08:	b2db      	uxtb	r3, r3
 811fe0a:	9300      	str	r3, [sp, #0]
 811fe0c:	4603      	mov	r3, r0
 811fe0e:	4863      	ldr	r0, [pc, #396]	@ (811ff9c <tcp_zero_window_probe+0x1e4>)
 811fe10:	f002 fa28 	bl	8122264 <iprintf>
 811fe14:	200d      	movs	r0, #13
 811fe16:	f002 fa37 	bl	8122288 <putchar>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));
 811fe1a:	200a      	movs	r0, #10
 811fe1c:	f002 fa34 	bl	8122288 <putchar>
 811fe20:	200d      	movs	r0, #13
 811fe22:	f002 fa31 	bl	8122288 <putchar>

  LWIP_DEBUGF(TCP_DEBUG,
 811fe26:	4b5e      	ldr	r3, [pc, #376]	@ (811ffa0 <tcp_zero_window_probe+0x1e8>)
 811fe28:	6819      	ldr	r1, [r3, #0]
 811fe2a:	687b      	ldr	r3, [r7, #4]
 811fe2c:	6a1a      	ldr	r2, [r3, #32]
 811fe2e:	687b      	ldr	r3, [r7, #4]
 811fe30:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 811fe34:	485b      	ldr	r0, [pc, #364]	@ (811ffa4 <tcp_zero_window_probe+0x1ec>)
 811fe36:	f002 fa15 	bl	8122264 <iprintf>
 811fe3a:	200d      	movs	r0, #13
 811fe3c:	f002 fa24 	bl	8122288 <putchar>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 811fe40:	687b      	ldr	r3, [r7, #4]
 811fe42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811fe44:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 811fe46:	6a3b      	ldr	r3, [r7, #32]
 811fe48:	2b00      	cmp	r3, #0
 811fe4a:	d101      	bne.n	811fe50 <tcp_zero_window_probe+0x98>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 811fe4c:	2300      	movs	r3, #0
 811fe4e:	e099      	b.n	811ff84 <tcp_zero_window_probe+0x1cc>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 811fe50:	687b      	ldr	r3, [r7, #4]
 811fe52:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 811fe56:	2bff      	cmp	r3, #255	@ 0xff
 811fe58:	d007      	beq.n	811fe6a <tcp_zero_window_probe+0xb2>
    ++pcb->persist_probe;
 811fe5a:	687b      	ldr	r3, [r7, #4]
 811fe5c:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 811fe60:	3301      	adds	r3, #1
 811fe62:	b2da      	uxtb	r2, r3
 811fe64:	687b      	ldr	r3, [r7, #4]
 811fe66:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 811fe6a:	6a3b      	ldr	r3, [r7, #32]
 811fe6c:	691b      	ldr	r3, [r3, #16]
 811fe6e:	899b      	ldrh	r3, [r3, #12]
 811fe70:	b29b      	uxth	r3, r3
 811fe72:	4618      	mov	r0, r3
 811fe74:	f7f4 f9e2 	bl	811423c <lwip_htons>
 811fe78:	4603      	mov	r3, r0
 811fe7a:	b2db      	uxtb	r3, r3
 811fe7c:	f003 0301 	and.w	r3, r3, #1
 811fe80:	2b00      	cmp	r3, #0
 811fe82:	d005      	beq.n	811fe90 <tcp_zero_window_probe+0xd8>
 811fe84:	6a3b      	ldr	r3, [r7, #32]
 811fe86:	891b      	ldrh	r3, [r3, #8]
 811fe88:	2b00      	cmp	r3, #0
 811fe8a:	d101      	bne.n	811fe90 <tcp_zero_window_probe+0xd8>
 811fe8c:	2301      	movs	r3, #1
 811fe8e:	e000      	b.n	811fe92 <tcp_zero_window_probe+0xda>
 811fe90:	2300      	movs	r3, #0
 811fe92:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 811fe94:	7ffb      	ldrb	r3, [r7, #31]
 811fe96:	2b00      	cmp	r3, #0
 811fe98:	bf0c      	ite	eq
 811fe9a:	2301      	moveq	r3, #1
 811fe9c:	2300      	movne	r3, #0
 811fe9e:	b2db      	uxtb	r3, r3
 811fea0:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 811fea2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811fea6:	b299      	uxth	r1, r3
 811fea8:	6a3b      	ldr	r3, [r7, #32]
 811feaa:	691b      	ldr	r3, [r3, #16]
 811feac:	685b      	ldr	r3, [r3, #4]
 811feae:	8bba      	ldrh	r2, [r7, #28]
 811feb0:	6878      	ldr	r0, [r7, #4]
 811feb2:	f7ff fd6f 	bl	811f994 <tcp_output_alloc_header>
 811feb6:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 811feb8:	69bb      	ldr	r3, [r7, #24]
 811feba:	2b00      	cmp	r3, #0
 811febc:	d108      	bne.n	811fed0 <tcp_zero_window_probe+0x118>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
 811febe:	483a      	ldr	r0, [pc, #232]	@ (811ffa8 <tcp_zero_window_probe+0x1f0>)
 811fec0:	f002 fa40 	bl	8122344 <puts>
 811fec4:	200d      	movs	r0, #13
 811fec6:	f002 f9df 	bl	8122288 <putchar>
    return ERR_MEM;
 811feca:	f04f 33ff 	mov.w	r3, #4294967295
 811fece:	e059      	b.n	811ff84 <tcp_zero_window_probe+0x1cc>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 811fed0:	69bb      	ldr	r3, [r7, #24]
 811fed2:	685b      	ldr	r3, [r3, #4]
 811fed4:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 811fed6:	7ffb      	ldrb	r3, [r7, #31]
 811fed8:	2b00      	cmp	r3, #0
 811feda:	d011      	beq.n	811ff00 <tcp_zero_window_probe+0x148>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 811fedc:	697b      	ldr	r3, [r7, #20]
 811fede:	899b      	ldrh	r3, [r3, #12]
 811fee0:	b29b      	uxth	r3, r3
 811fee2:	b21b      	sxth	r3, r3
 811fee4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 811fee8:	b21c      	sxth	r4, r3
 811feea:	2011      	movs	r0, #17
 811feec:	f7f4 f9a6 	bl	811423c <lwip_htons>
 811fef0:	4603      	mov	r3, r0
 811fef2:	b21b      	sxth	r3, r3
 811fef4:	4323      	orrs	r3, r4
 811fef6:	b21b      	sxth	r3, r3
 811fef8:	b29a      	uxth	r2, r3
 811fefa:	697b      	ldr	r3, [r7, #20]
 811fefc:	819a      	strh	r2, [r3, #12]
 811fefe:	e010      	b.n	811ff22 <tcp_zero_window_probe+0x16a>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 811ff00:	69bb      	ldr	r3, [r7, #24]
 811ff02:	685b      	ldr	r3, [r3, #4]
 811ff04:	3314      	adds	r3, #20
 811ff06:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 811ff08:	6a3b      	ldr	r3, [r7, #32]
 811ff0a:	6858      	ldr	r0, [r3, #4]
 811ff0c:	6a3b      	ldr	r3, [r7, #32]
 811ff0e:	685b      	ldr	r3, [r3, #4]
 811ff10:	891a      	ldrh	r2, [r3, #8]
 811ff12:	6a3b      	ldr	r3, [r7, #32]
 811ff14:	891b      	ldrh	r3, [r3, #8]
 811ff16:	1ad3      	subs	r3, r2, r3
 811ff18:	b29b      	uxth	r3, r3
 811ff1a:	2201      	movs	r2, #1
 811ff1c:	6939      	ldr	r1, [r7, #16]
 811ff1e:	f7f9 fb33 	bl	8119588 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 811ff22:	6a3b      	ldr	r3, [r7, #32]
 811ff24:	691b      	ldr	r3, [r3, #16]
 811ff26:	685b      	ldr	r3, [r3, #4]
 811ff28:	4618      	mov	r0, r3
 811ff2a:	f7f4 f99c 	bl	8114266 <lwip_htonl>
 811ff2e:	4603      	mov	r3, r0
 811ff30:	3301      	adds	r3, #1
 811ff32:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 811ff34:	687b      	ldr	r3, [r7, #4]
 811ff36:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 811ff38:	68fb      	ldr	r3, [r7, #12]
 811ff3a:	1ad3      	subs	r3, r2, r3
 811ff3c:	2b00      	cmp	r3, #0
 811ff3e:	da02      	bge.n	811ff46 <tcp_zero_window_probe+0x18e>
    pcb->snd_nxt = snd_nxt;
 811ff40:	687b      	ldr	r3, [r7, #4]
 811ff42:	68fa      	ldr	r2, [r7, #12]
 811ff44:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 811ff46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811ff4a:	2200      	movs	r2, #0
 811ff4c:	69b9      	ldr	r1, [r7, #24]
 811ff4e:	6878      	ldr	r0, [r7, #4]
 811ff50:	f7ff fd5e 	bl	811fa10 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 811ff54:	687a      	ldr	r2, [r7, #4]
 811ff56:	687b      	ldr	r3, [r7, #4]
 811ff58:	3304      	adds	r3, #4
 811ff5a:	69b9      	ldr	r1, [r7, #24]
 811ff5c:	6878      	ldr	r0, [r7, #4]
 811ff5e:	f7ff fd95 	bl	811fa8c <tcp_output_control_segment>
 811ff62:	4603      	mov	r3, r0
 811ff64:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
 811ff66:	687b      	ldr	r3, [r7, #4]
 811ff68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 811ff6a:	1e59      	subs	r1, r3, #1
 811ff6c:	687b      	ldr	r3, [r7, #4]
 811ff6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811ff70:	f997 300b 	ldrsb.w	r3, [r7, #11]
 811ff74:	480d      	ldr	r0, [pc, #52]	@ (811ffac <tcp_zero_window_probe+0x1f4>)
 811ff76:	f002 f975 	bl	8122264 <iprintf>
 811ff7a:	200d      	movs	r0, #13
 811ff7c:	f002 f984 	bl	8122288 <putchar>
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 811ff80:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 811ff84:	4618      	mov	r0, r3
 811ff86:	372c      	adds	r7, #44	@ 0x2c
 811ff88:	46bd      	mov	sp, r7
 811ff8a:	bd90      	pop	{r4, r7, pc}
 811ff8c:	08127410 	.word	0x08127410
 811ff90:	08127db0 	.word	0x08127db0
 811ff94:	081274a4 	.word	0x081274a4
 811ff98:	08127dd4 	.word	0x08127dd4
 811ff9c:	08127cfc 	.word	0x08127cfc
 811ffa0:	10011e58 	.word	0x10011e58
 811ffa4:	08127e0c 	.word	0x08127e0c
 811ffa8:	08127e58 	.word	0x08127e58
 811ffac:	08127e84 	.word	0x08127e84

0811ffb0 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 811ffb0:	b580      	push	{r7, lr}
 811ffb2:	b084      	sub	sp, #16
 811ffb4:	af00      	add	r7, sp, #0
 811ffb6:	6078      	str	r0, [r7, #4]
 811ffb8:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 811ffba:	f000 fad7 	bl	812056c <sys_timeouts_sleeptime>
 811ffbe:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 811ffc0:	68fb      	ldr	r3, [r7, #12]
 811ffc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 811ffc6:	d10b      	bne.n	811ffe0 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 811ffc8:	4813      	ldr	r0, [pc, #76]	@ (8120018 <tcpip_timeouts_mbox_fetch+0x68>)
 811ffca:	f7f9 fc28 	bl	811981e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 811ffce:	2200      	movs	r2, #0
 811ffd0:	6839      	ldr	r1, [r7, #0]
 811ffd2:	6878      	ldr	r0, [r7, #4]
 811ffd4:	f7f9 fbb0 	bl	8119738 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 811ffd8:	480f      	ldr	r0, [pc, #60]	@ (8120018 <tcpip_timeouts_mbox_fetch+0x68>)
 811ffda:	f7f9 fc11 	bl	8119800 <sys_mutex_lock>
    return;
 811ffde:	e018      	b.n	8120012 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 811ffe0:	68fb      	ldr	r3, [r7, #12]
 811ffe2:	2b00      	cmp	r3, #0
 811ffe4:	d102      	bne.n	811ffec <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 811ffe6:	f000 fa87 	bl	81204f8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 811ffea:	e7e6      	b.n	811ffba <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 811ffec:	480a      	ldr	r0, [pc, #40]	@ (8120018 <tcpip_timeouts_mbox_fetch+0x68>)
 811ffee:	f7f9 fc16 	bl	811981e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 811fff2:	68fa      	ldr	r2, [r7, #12]
 811fff4:	6839      	ldr	r1, [r7, #0]
 811fff6:	6878      	ldr	r0, [r7, #4]
 811fff8:	f7f9 fb9e 	bl	8119738 <sys_arch_mbox_fetch>
 811fffc:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 811fffe:	4806      	ldr	r0, [pc, #24]	@ (8120018 <tcpip_timeouts_mbox_fetch+0x68>)
 8120000:	f7f9 fbfe 	bl	8119800 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8120004:	68bb      	ldr	r3, [r7, #8]
 8120006:	f1b3 3fff 	cmp.w	r3, #4294967295
 812000a:	d102      	bne.n	8120012 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 812000c:	f000 fa74 	bl	81204f8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8120010:	e7d3      	b.n	811ffba <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8120012:	3710      	adds	r7, #16
 8120014:	46bd      	mov	sp, r7
 8120016:	bd80      	pop	{r7, pc}
 8120018:	10011eb8 	.word	0x10011eb8

0812001c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 812001c:	b580      	push	{r7, lr}
 812001e:	b084      	sub	sp, #16
 8120020:	af00      	add	r7, sp, #0
 8120022:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8120024:	4810      	ldr	r0, [pc, #64]	@ (8120068 <tcpip_thread+0x4c>)
 8120026:	f7f9 fbeb 	bl	8119800 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 812002a:	4b10      	ldr	r3, [pc, #64]	@ (812006c <tcpip_thread+0x50>)
 812002c:	681b      	ldr	r3, [r3, #0]
 812002e:	2b00      	cmp	r3, #0
 8120030:	d005      	beq.n	812003e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8120032:	4b0e      	ldr	r3, [pc, #56]	@ (812006c <tcpip_thread+0x50>)
 8120034:	681b      	ldr	r3, [r3, #0]
 8120036:	4a0e      	ldr	r2, [pc, #56]	@ (8120070 <tcpip_thread+0x54>)
 8120038:	6812      	ldr	r2, [r2, #0]
 812003a:	4610      	mov	r0, r2
 812003c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 812003e:	f107 030c 	add.w	r3, r7, #12
 8120042:	4619      	mov	r1, r3
 8120044:	480b      	ldr	r0, [pc, #44]	@ (8120074 <tcpip_thread+0x58>)
 8120046:	f7ff ffb3 	bl	811ffb0 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 812004a:	68fb      	ldr	r3, [r7, #12]
 812004c:	2b00      	cmp	r3, #0
 812004e:	d106      	bne.n	812005e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8120050:	4b09      	ldr	r3, [pc, #36]	@ (8120078 <tcpip_thread+0x5c>)
 8120052:	2291      	movs	r2, #145	@ 0x91
 8120054:	4909      	ldr	r1, [pc, #36]	@ (812007c <tcpip_thread+0x60>)
 8120056:	480a      	ldr	r0, [pc, #40]	@ (8120080 <tcpip_thread+0x64>)
 8120058:	f002 f904 	bl	8122264 <iprintf>
      continue;
 812005c:	e003      	b.n	8120066 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 812005e:	68fb      	ldr	r3, [r7, #12]
 8120060:	4618      	mov	r0, r3
 8120062:	f000 f80f 	bl	8120084 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8120066:	e7ea      	b.n	812003e <tcpip_thread+0x22>
 8120068:	10011eb8 	.word	0x10011eb8
 812006c:	10011eac 	.word	0x10011eac
 8120070:	10011eb0 	.word	0x10011eb0
 8120074:	10011eb4 	.word	0x10011eb4
 8120078:	08127eb8 	.word	0x08127eb8
 812007c:	08127f28 	.word	0x08127f28
 8120080:	08127f48 	.word	0x08127f48

08120084 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8120084:	b580      	push	{r7, lr}
 8120086:	b082      	sub	sp, #8
 8120088:	af00      	add	r7, sp, #0
 812008a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 812008c:	687b      	ldr	r3, [r7, #4]
 812008e:	781b      	ldrb	r3, [r3, #0]
 8120090:	2b00      	cmp	r3, #0
 8120092:	d002      	beq.n	812009a <tcpip_thread_handle_msg+0x16>
 8120094:	2b01      	cmp	r3, #1
 8120096:	d00b      	beq.n	81200b0 <tcpip_thread_handle_msg+0x2c>
 8120098:	e011      	b.n	81200be <tcpip_thread_handle_msg+0x3a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 812009a:	687b      	ldr	r3, [r7, #4]
 812009c:	685b      	ldr	r3, [r3, #4]
 812009e:	687a      	ldr	r2, [r7, #4]
 81200a0:	6892      	ldr	r2, [r2, #8]
 81200a2:	4610      	mov	r0, r2
 81200a4:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 81200a6:	6879      	ldr	r1, [r7, #4]
 81200a8:	2008      	movs	r0, #8
 81200aa:	f7f8 f8a5 	bl	81181f8 <memp_free>
      break;
 81200ae:	e00d      	b.n	81200cc <tcpip_thread_handle_msg+0x48>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 81200b0:	687b      	ldr	r3, [r7, #4]
 81200b2:	685b      	ldr	r3, [r3, #4]
 81200b4:	687a      	ldr	r2, [r7, #4]
 81200b6:	6892      	ldr	r2, [r2, #8]
 81200b8:	4610      	mov	r0, r2
 81200ba:	4798      	blx	r3
      break;
 81200bc:	e006      	b.n	81200cc <tcpip_thread_handle_msg+0x48>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 81200be:	4b05      	ldr	r3, [pc, #20]	@ (81200d4 <tcpip_thread_handle_msg+0x50>)
 81200c0:	22cf      	movs	r2, #207	@ 0xcf
 81200c2:	4905      	ldr	r1, [pc, #20]	@ (81200d8 <tcpip_thread_handle_msg+0x54>)
 81200c4:	4805      	ldr	r0, [pc, #20]	@ (81200dc <tcpip_thread_handle_msg+0x58>)
 81200c6:	f002 f8cd 	bl	8122264 <iprintf>
      break;
 81200ca:	bf00      	nop
  }
}
 81200cc:	bf00      	nop
 81200ce:	3708      	adds	r7, #8
 81200d0:	46bd      	mov	sp, r7
 81200d2:	bd80      	pop	{r7, pc}
 81200d4:	08127eb8 	.word	0x08127eb8
 81200d8:	08127f28 	.word	0x08127f28
 81200dc:	08127f48 	.word	0x08127f48

081200e0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 81200e0:	b580      	push	{r7, lr}
 81200e2:	b086      	sub	sp, #24
 81200e4:	af00      	add	r7, sp, #0
 81200e6:	60f8      	str	r0, [r7, #12]
 81200e8:	60b9      	str	r1, [r7, #8]
 81200ea:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING_INPUT
  err_t ret;
  LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_inpkt: PACKET %p/%p\n", (void *)p, (void *)inp));
  LOCK_TCPIP_CORE();
 81200ec:	4808      	ldr	r0, [pc, #32]	@ (8120110 <tcpip_inpkt+0x30>)
 81200ee:	f7f9 fb87 	bl	8119800 <sys_mutex_lock>
  ret = input_fn(p, inp);
 81200f2:	687b      	ldr	r3, [r7, #4]
 81200f4:	68b9      	ldr	r1, [r7, #8]
 81200f6:	68f8      	ldr	r0, [r7, #12]
 81200f8:	4798      	blx	r3
 81200fa:	4603      	mov	r3, r0
 81200fc:	75fb      	strb	r3, [r7, #23]
  UNLOCK_TCPIP_CORE();
 81200fe:	4804      	ldr	r0, [pc, #16]	@ (8120110 <tcpip_inpkt+0x30>)
 8120100:	f7f9 fb8d 	bl	811981e <sys_mutex_unlock>
  return ret;
 8120104:	f997 3017 	ldrsb.w	r3, [r7, #23]
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8120108:	4618      	mov	r0, r3
 812010a:	3718      	adds	r7, #24
 812010c:	46bd      	mov	sp, r7
 812010e:	bd80      	pop	{r7, pc}
 8120110:	10011eb8 	.word	0x10011eb8

08120114 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8120114:	b580      	push	{r7, lr}
 8120116:	b082      	sub	sp, #8
 8120118:	af00      	add	r7, sp, #0
 812011a:	6078      	str	r0, [r7, #4]
 812011c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 812011e:	683b      	ldr	r3, [r7, #0]
 8120120:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8120124:	f003 0318 	and.w	r3, r3, #24
 8120128:	2b00      	cmp	r3, #0
 812012a:	d006      	beq.n	812013a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 812012c:	4a08      	ldr	r2, [pc, #32]	@ (8120150 <tcpip_input+0x3c>)
 812012e:	6839      	ldr	r1, [r7, #0]
 8120130:	6878      	ldr	r0, [r7, #4]
 8120132:	f7ff ffd5 	bl	81200e0 <tcpip_inpkt>
 8120136:	4603      	mov	r3, r0
 8120138:	e005      	b.n	8120146 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 812013a:	4a06      	ldr	r2, [pc, #24]	@ (8120154 <tcpip_input+0x40>)
 812013c:	6839      	ldr	r1, [r7, #0]
 812013e:	6878      	ldr	r0, [r7, #4]
 8120140:	f7ff ffce 	bl	81200e0 <tcpip_inpkt>
 8120144:	4603      	mov	r3, r0
}
 8120146:	4618      	mov	r0, r3
 8120148:	3708      	adds	r7, #8
 812014a:	46bd      	mov	sp, r7
 812014c:	bd80      	pop	{r7, pc}
 812014e:	bf00      	nop
 8120150:	0811568d 	.word	0x0811568d
 8120154:	0811601d 	.word	0x0811601d

08120158 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8120158:	b580      	push	{r7, lr}
 812015a:	b084      	sub	sp, #16
 812015c:	af00      	add	r7, sp, #0
 812015e:	6078      	str	r0, [r7, #4]
 8120160:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8120162:	4819      	ldr	r0, [pc, #100]	@ (81201c8 <tcpip_try_callback+0x70>)
 8120164:	f7f9 fb19 	bl	811979a <sys_mbox_valid>
 8120168:	4603      	mov	r3, r0
 812016a:	2b00      	cmp	r3, #0
 812016c:	d106      	bne.n	812017c <tcpip_try_callback+0x24>
 812016e:	4b17      	ldr	r3, [pc, #92]	@ (81201cc <tcpip_try_callback+0x74>)
 8120170:	f240 125d 	movw	r2, #349	@ 0x15d
 8120174:	4916      	ldr	r1, [pc, #88]	@ (81201d0 <tcpip_try_callback+0x78>)
 8120176:	4817      	ldr	r0, [pc, #92]	@ (81201d4 <tcpip_try_callback+0x7c>)
 8120178:	f002 f874 	bl	8122264 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 812017c:	2008      	movs	r0, #8
 812017e:	f7f7 ffc5 	bl	811810c <memp_malloc>
 8120182:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8120184:	68fb      	ldr	r3, [r7, #12]
 8120186:	2b00      	cmp	r3, #0
 8120188:	d102      	bne.n	8120190 <tcpip_try_callback+0x38>
    return ERR_MEM;
 812018a:	f04f 33ff 	mov.w	r3, #4294967295
 812018e:	e017      	b.n	81201c0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8120190:	68fb      	ldr	r3, [r7, #12]
 8120192:	2200      	movs	r2, #0
 8120194:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8120196:	68fb      	ldr	r3, [r7, #12]
 8120198:	687a      	ldr	r2, [r7, #4]
 812019a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 812019c:	68fb      	ldr	r3, [r7, #12]
 812019e:	683a      	ldr	r2, [r7, #0]
 81201a0:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 81201a2:	68f9      	ldr	r1, [r7, #12]
 81201a4:	4808      	ldr	r0, [pc, #32]	@ (81201c8 <tcpip_try_callback+0x70>)
 81201a6:	f7f9 faad 	bl	8119704 <sys_mbox_trypost>
 81201aa:	4603      	mov	r3, r0
 81201ac:	2b00      	cmp	r3, #0
 81201ae:	d006      	beq.n	81201be <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 81201b0:	68f9      	ldr	r1, [r7, #12]
 81201b2:	2008      	movs	r0, #8
 81201b4:	f7f8 f820 	bl	81181f8 <memp_free>
    return ERR_MEM;
 81201b8:	f04f 33ff 	mov.w	r3, #4294967295
 81201bc:	e000      	b.n	81201c0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 81201be:	2300      	movs	r3, #0
}
 81201c0:	4618      	mov	r0, r3
 81201c2:	3710      	adds	r7, #16
 81201c4:	46bd      	mov	sp, r7
 81201c6:	bd80      	pop	{r7, pc}
 81201c8:	10011eb4 	.word	0x10011eb4
 81201cc:	08127eb8 	.word	0x08127eb8
 81201d0:	08127f70 	.word	0x08127f70
 81201d4:	08127f48 	.word	0x08127f48

081201d8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 81201d8:	b580      	push	{r7, lr}
 81201da:	b084      	sub	sp, #16
 81201dc:	af02      	add	r7, sp, #8
 81201de:	6078      	str	r0, [r7, #4]
 81201e0:	6039      	str	r1, [r7, #0]
  lwip_init();
 81201e2:	f7f5 fe1b 	bl	8115e1c <lwip_init>

  tcpip_init_done = initfunc;
 81201e6:	4a17      	ldr	r2, [pc, #92]	@ (8120244 <tcpip_init+0x6c>)
 81201e8:	687b      	ldr	r3, [r7, #4]
 81201ea:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 81201ec:	4a16      	ldr	r2, [pc, #88]	@ (8120248 <tcpip_init+0x70>)
 81201ee:	683b      	ldr	r3, [r7, #0]
 81201f0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 81201f2:	2106      	movs	r1, #6
 81201f4:	4815      	ldr	r0, [pc, #84]	@ (812024c <tcpip_init+0x74>)
 81201f6:	f7f9 fa6b 	bl	81196d0 <sys_mbox_new>
 81201fa:	4603      	mov	r3, r0
 81201fc:	2b00      	cmp	r3, #0
 81201fe:	d006      	beq.n	812020e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8120200:	4b13      	ldr	r3, [pc, #76]	@ (8120250 <tcpip_init+0x78>)
 8120202:	f240 2261 	movw	r2, #609	@ 0x261
 8120206:	4913      	ldr	r1, [pc, #76]	@ (8120254 <tcpip_init+0x7c>)
 8120208:	4813      	ldr	r0, [pc, #76]	@ (8120258 <tcpip_init+0x80>)
 812020a:	f002 f82b 	bl	8122264 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 812020e:	4813      	ldr	r0, [pc, #76]	@ (812025c <tcpip_init+0x84>)
 8120210:	f7f9 fae0 	bl	81197d4 <sys_mutex_new>
 8120214:	4603      	mov	r3, r0
 8120216:	2b00      	cmp	r3, #0
 8120218:	d006      	beq.n	8120228 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 812021a:	4b0d      	ldr	r3, [pc, #52]	@ (8120250 <tcpip_init+0x78>)
 812021c:	f240 2265 	movw	r2, #613	@ 0x265
 8120220:	490f      	ldr	r1, [pc, #60]	@ (8120260 <tcpip_init+0x88>)
 8120222:	480d      	ldr	r0, [pc, #52]	@ (8120258 <tcpip_init+0x80>)
 8120224:	f002 f81e 	bl	8122264 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8120228:	2332      	movs	r3, #50	@ 0x32
 812022a:	9300      	str	r3, [sp, #0]
 812022c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8120230:	2200      	movs	r2, #0
 8120232:	490c      	ldr	r1, [pc, #48]	@ (8120264 <tcpip_init+0x8c>)
 8120234:	480c      	ldr	r0, [pc, #48]	@ (8120268 <tcpip_init+0x90>)
 8120236:	f7f9 faff 	bl	8119838 <sys_thread_new>
}
 812023a:	bf00      	nop
 812023c:	3708      	adds	r7, #8
 812023e:	46bd      	mov	sp, r7
 8120240:	bd80      	pop	{r7, pc}
 8120242:	bf00      	nop
 8120244:	10011eac 	.word	0x10011eac
 8120248:	10011eb0 	.word	0x10011eb0
 812024c:	10011eb4 	.word	0x10011eb4
 8120250:	08127eb8 	.word	0x08127eb8
 8120254:	08127f80 	.word	0x08127f80
 8120258:	08127f48 	.word	0x08127f48
 812025c:	10011eb8 	.word	0x10011eb8
 8120260:	08127fa4 	.word	0x08127fa4
 8120264:	0812001d 	.word	0x0812001d
 8120268:	08127fc8 	.word	0x08127fc8

0812026c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 812026c:	b580      	push	{r7, lr}
 812026e:	b082      	sub	sp, #8
 8120270:	af00      	add	r7, sp, #0
 8120272:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8120274:	f7f9 fb68 	bl	8119948 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8120278:	4b0b      	ldr	r3, [pc, #44]	@ (81202a8 <tcpip_tcp_timer+0x3c>)
 812027a:	681b      	ldr	r3, [r3, #0]
 812027c:	2b00      	cmp	r3, #0
 812027e:	d103      	bne.n	8120288 <tcpip_tcp_timer+0x1c>
 8120280:	4b0a      	ldr	r3, [pc, #40]	@ (81202ac <tcpip_tcp_timer+0x40>)
 8120282:	681b      	ldr	r3, [r3, #0]
 8120284:	2b00      	cmp	r3, #0
 8120286:	d006      	beq.n	8120296 <tcpip_tcp_timer+0x2a>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8120288:	4b09      	ldr	r3, [pc, #36]	@ (81202b0 <tcpip_tcp_timer+0x44>)
 812028a:	2200      	movs	r2, #0
 812028c:	4909      	ldr	r1, [pc, #36]	@ (81202b4 <tcpip_tcp_timer+0x48>)
 812028e:	20fa      	movs	r0, #250	@ 0xfa
 8120290:	f000 f90a 	bl	81204a8 <sys_timeout_debug>
 8120294:	e003      	b.n	812029e <tcpip_tcp_timer+0x32>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8120296:	4b08      	ldr	r3, [pc, #32]	@ (81202b8 <tcpip_tcp_timer+0x4c>)
 8120298:	2200      	movs	r2, #0
 812029a:	601a      	str	r2, [r3, #0]
  }
}
 812029c:	bf00      	nop
 812029e:	bf00      	nop
 81202a0:	3708      	adds	r7, #8
 81202a2:	46bd      	mov	sp, r7
 81202a4:	bd80      	pop	{r7, pc}
 81202a6:	bf00      	nop
 81202a8:	10011e64 	.word	0x10011e64
 81202ac:	10011e68 	.word	0x10011e68
 81202b0:	08127ffc 	.word	0x08127ffc
 81202b4:	0812026d 	.word	0x0812026d
 81202b8:	10011ec4 	.word	0x10011ec4

081202bc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 81202bc:	b580      	push	{r7, lr}
 81202be:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 81202c0:	4b0b      	ldr	r3, [pc, #44]	@ (81202f0 <tcp_timer_needed+0x34>)
 81202c2:	681b      	ldr	r3, [r3, #0]
 81202c4:	2b00      	cmp	r3, #0
 81202c6:	d110      	bne.n	81202ea <tcp_timer_needed+0x2e>
 81202c8:	4b0a      	ldr	r3, [pc, #40]	@ (81202f4 <tcp_timer_needed+0x38>)
 81202ca:	681b      	ldr	r3, [r3, #0]
 81202cc:	2b00      	cmp	r3, #0
 81202ce:	d103      	bne.n	81202d8 <tcp_timer_needed+0x1c>
 81202d0:	4b09      	ldr	r3, [pc, #36]	@ (81202f8 <tcp_timer_needed+0x3c>)
 81202d2:	681b      	ldr	r3, [r3, #0]
 81202d4:	2b00      	cmp	r3, #0
 81202d6:	d008      	beq.n	81202ea <tcp_timer_needed+0x2e>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 81202d8:	4b05      	ldr	r3, [pc, #20]	@ (81202f0 <tcp_timer_needed+0x34>)
 81202da:	2201      	movs	r2, #1
 81202dc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 81202de:	4b07      	ldr	r3, [pc, #28]	@ (81202fc <tcp_timer_needed+0x40>)
 81202e0:	2200      	movs	r2, #0
 81202e2:	4907      	ldr	r1, [pc, #28]	@ (8120300 <tcp_timer_needed+0x44>)
 81202e4:	20fa      	movs	r0, #250	@ 0xfa
 81202e6:	f000 f8df 	bl	81204a8 <sys_timeout_debug>
  }
}
 81202ea:	bf00      	nop
 81202ec:	bd80      	pop	{r7, pc}
 81202ee:	bf00      	nop
 81202f0:	10011ec4 	.word	0x10011ec4
 81202f4:	10011e64 	.word	0x10011e64
 81202f8:	10011e68 	.word	0x10011e68
 81202fc:	08127ffc 	.word	0x08127ffc
 8120300:	0812026d 	.word	0x0812026d

08120304 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8120304:	b580      	push	{r7, lr}
 8120306:	b086      	sub	sp, #24
 8120308:	af00      	add	r7, sp, #0
 812030a:	60f8      	str	r0, [r7, #12]
 812030c:	60b9      	str	r1, [r7, #8]
 812030e:	607a      	str	r2, [r7, #4]
 8120310:	603b      	str	r3, [r7, #0]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8120312:	200a      	movs	r0, #10
 8120314:	f7f7 fefa 	bl	811810c <memp_malloc>
 8120318:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 812031a:	693b      	ldr	r3, [r7, #16]
 812031c:	2b00      	cmp	r3, #0
 812031e:	d109      	bne.n	8120334 <sys_timeout_abs+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8120320:	693b      	ldr	r3, [r7, #16]
 8120322:	2b00      	cmp	r3, #0
 8120324:	d154      	bne.n	81203d0 <sys_timeout_abs+0xcc>
 8120326:	4b2c      	ldr	r3, [pc, #176]	@ (81203d8 <sys_timeout_abs+0xd4>)
 8120328:	22be      	movs	r2, #190	@ 0xbe
 812032a:	492c      	ldr	r1, [pc, #176]	@ (81203dc <sys_timeout_abs+0xd8>)
 812032c:	482c      	ldr	r0, [pc, #176]	@ (81203e0 <sys_timeout_abs+0xdc>)
 812032e:	f001 ff99 	bl	8122264 <iprintf>
    return;
 8120332:	e04d      	b.n	81203d0 <sys_timeout_abs+0xcc>
  }

  timeout->next = NULL;
 8120334:	693b      	ldr	r3, [r7, #16]
 8120336:	2200      	movs	r2, #0
 8120338:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 812033a:	693b      	ldr	r3, [r7, #16]
 812033c:	68ba      	ldr	r2, [r7, #8]
 812033e:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8120340:	693b      	ldr	r3, [r7, #16]
 8120342:	687a      	ldr	r2, [r7, #4]
 8120344:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8120346:	693b      	ldr	r3, [r7, #16]
 8120348:	68fa      	ldr	r2, [r7, #12]
 812034a:	605a      	str	r2, [r3, #4]

#if LWIP_DEBUG_TIMERNAMES
  timeout->handler_name = handler_name;
 812034c:	693b      	ldr	r3, [r7, #16]
 812034e:	683a      	ldr	r2, [r7, #0]
 8120350:	611a      	str	r2, [r3, #16]
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8120352:	4b24      	ldr	r3, [pc, #144]	@ (81203e4 <sys_timeout_abs+0xe0>)
 8120354:	681b      	ldr	r3, [r3, #0]
 8120356:	2b00      	cmp	r3, #0
 8120358:	d103      	bne.n	8120362 <sys_timeout_abs+0x5e>
    next_timeout = timeout;
 812035a:	4a22      	ldr	r2, [pc, #136]	@ (81203e4 <sys_timeout_abs+0xe0>)
 812035c:	693b      	ldr	r3, [r7, #16]
 812035e:	6013      	str	r3, [r2, #0]
    return;
 8120360:	e037      	b.n	81203d2 <sys_timeout_abs+0xce>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8120362:	693b      	ldr	r3, [r7, #16]
 8120364:	685a      	ldr	r2, [r3, #4]
 8120366:	4b1f      	ldr	r3, [pc, #124]	@ (81203e4 <sys_timeout_abs+0xe0>)
 8120368:	681b      	ldr	r3, [r3, #0]
 812036a:	685b      	ldr	r3, [r3, #4]
 812036c:	1ad3      	subs	r3, r2, r3
 812036e:	0fdb      	lsrs	r3, r3, #31
 8120370:	f003 0301 	and.w	r3, r3, #1
 8120374:	b2db      	uxtb	r3, r3
 8120376:	2b00      	cmp	r3, #0
 8120378:	d007      	beq.n	812038a <sys_timeout_abs+0x86>
    timeout->next = next_timeout;
 812037a:	4b1a      	ldr	r3, [pc, #104]	@ (81203e4 <sys_timeout_abs+0xe0>)
 812037c:	681a      	ldr	r2, [r3, #0]
 812037e:	693b      	ldr	r3, [r7, #16]
 8120380:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8120382:	4a18      	ldr	r2, [pc, #96]	@ (81203e4 <sys_timeout_abs+0xe0>)
 8120384:	693b      	ldr	r3, [r7, #16]
 8120386:	6013      	str	r3, [r2, #0]
 8120388:	e023      	b.n	81203d2 <sys_timeout_abs+0xce>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 812038a:	4b16      	ldr	r3, [pc, #88]	@ (81203e4 <sys_timeout_abs+0xe0>)
 812038c:	681b      	ldr	r3, [r3, #0]
 812038e:	617b      	str	r3, [r7, #20]
 8120390:	e01a      	b.n	81203c8 <sys_timeout_abs+0xc4>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8120392:	697b      	ldr	r3, [r7, #20]
 8120394:	681b      	ldr	r3, [r3, #0]
 8120396:	2b00      	cmp	r3, #0
 8120398:	d00b      	beq.n	81203b2 <sys_timeout_abs+0xae>
 812039a:	693b      	ldr	r3, [r7, #16]
 812039c:	685a      	ldr	r2, [r3, #4]
 812039e:	697b      	ldr	r3, [r7, #20]
 81203a0:	681b      	ldr	r3, [r3, #0]
 81203a2:	685b      	ldr	r3, [r3, #4]
 81203a4:	1ad3      	subs	r3, r2, r3
 81203a6:	0fdb      	lsrs	r3, r3, #31
 81203a8:	f003 0301 	and.w	r3, r3, #1
 81203ac:	b2db      	uxtb	r3, r3
 81203ae:	2b00      	cmp	r3, #0
 81203b0:	d007      	beq.n	81203c2 <sys_timeout_abs+0xbe>
        timeout->next = t->next;
 81203b2:	697b      	ldr	r3, [r7, #20]
 81203b4:	681a      	ldr	r2, [r3, #0]
 81203b6:	693b      	ldr	r3, [r7, #16]
 81203b8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 81203ba:	697b      	ldr	r3, [r7, #20]
 81203bc:	693a      	ldr	r2, [r7, #16]
 81203be:	601a      	str	r2, [r3, #0]
        break;
 81203c0:	e007      	b.n	81203d2 <sys_timeout_abs+0xce>
    for (t = next_timeout; t != NULL; t = t->next) {
 81203c2:	697b      	ldr	r3, [r7, #20]
 81203c4:	681b      	ldr	r3, [r3, #0]
 81203c6:	617b      	str	r3, [r7, #20]
 81203c8:	697b      	ldr	r3, [r7, #20]
 81203ca:	2b00      	cmp	r3, #0
 81203cc:	d1e1      	bne.n	8120392 <sys_timeout_abs+0x8e>
 81203ce:	e000      	b.n	81203d2 <sys_timeout_abs+0xce>
    return;
 81203d0:	bf00      	nop
      }
    }
  }
}
 81203d2:	3718      	adds	r7, #24
 81203d4:	46bd      	mov	sp, r7
 81203d6:	bd80      	pop	{r7, pc}
 81203d8:	0812800c 	.word	0x0812800c
 81203dc:	08128080 	.word	0x08128080
 81203e0:	081280c0 	.word	0x081280c0
 81203e4:	10011ebc 	.word	0x10011ebc

081203e8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 81203e8:	b580      	push	{r7, lr}
 81203ea:	b086      	sub	sp, #24
 81203ec:	af00      	add	r7, sp, #0
 81203ee:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 81203f0:	687b      	ldr	r3, [r7, #4]
 81203f2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 81203f4:	697b      	ldr	r3, [r7, #20]
 81203f6:	685b      	ldr	r3, [r3, #4]
 81203f8:	4798      	blx	r3

  now = sys_now();
 81203fa:	f7e6 f8fd 	bl	81065f8 <sys_now>
 81203fe:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8120400:	697b      	ldr	r3, [r7, #20]
 8120402:	681a      	ldr	r2, [r3, #0]
 8120404:	4b11      	ldr	r3, [pc, #68]	@ (812044c <lwip_cyclic_timer+0x64>)
 8120406:	681b      	ldr	r3, [r3, #0]
 8120408:	4413      	add	r3, r2
 812040a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 812040c:	68fa      	ldr	r2, [r7, #12]
 812040e:	693b      	ldr	r3, [r7, #16]
 8120410:	1ad3      	subs	r3, r2, r3
 8120412:	0fdb      	lsrs	r3, r3, #31
 8120414:	f003 0301 	and.w	r3, r3, #1
 8120418:	b2db      	uxtb	r3, r3
 812041a:	2b00      	cmp	r3, #0
 812041c:	d00a      	beq.n	8120434 <lwip_cyclic_timer+0x4c>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
 812041e:	697b      	ldr	r3, [r7, #20]
 8120420:	681a      	ldr	r2, [r3, #0]
 8120422:	693b      	ldr	r3, [r7, #16]
 8120424:	18d0      	adds	r0, r2, r3
 8120426:	697b      	ldr	r3, [r7, #20]
 8120428:	689b      	ldr	r3, [r3, #8]
 812042a:	687a      	ldr	r2, [r7, #4]
 812042c:	4908      	ldr	r1, [pc, #32]	@ (8120450 <lwip_cyclic_timer+0x68>)
 812042e:	f7ff ff69 	bl	8120304 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8120432:	e006      	b.n	8120442 <lwip_cyclic_timer+0x5a>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
 8120434:	697b      	ldr	r3, [r7, #20]
 8120436:	689b      	ldr	r3, [r3, #8]
 8120438:	687a      	ldr	r2, [r7, #4]
 812043a:	4905      	ldr	r1, [pc, #20]	@ (8120450 <lwip_cyclic_timer+0x68>)
 812043c:	68f8      	ldr	r0, [r7, #12]
 812043e:	f7ff ff61 	bl	8120304 <sys_timeout_abs>
}
 8120442:	bf00      	nop
 8120444:	3718      	adds	r7, #24
 8120446:	46bd      	mov	sp, r7
 8120448:	bd80      	pop	{r7, pc}
 812044a:	bf00      	nop
 812044c:	10011ec0 	.word	0x10011ec0
 8120450:	081203e9 	.word	0x081203e9

08120454 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8120454:	b580      	push	{r7, lr}
 8120456:	b082      	sub	sp, #8
 8120458:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 812045a:	2301      	movs	r3, #1
 812045c:	607b      	str	r3, [r7, #4]
 812045e:	e015      	b.n	812048c <sys_timeouts_init+0x38>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8120460:	490e      	ldr	r1, [pc, #56]	@ (812049c <sys_timeouts_init+0x48>)
 8120462:	687a      	ldr	r2, [r7, #4]
 8120464:	4613      	mov	r3, r2
 8120466:	005b      	lsls	r3, r3, #1
 8120468:	4413      	add	r3, r2
 812046a:	009b      	lsls	r3, r3, #2
 812046c:	440b      	add	r3, r1
 812046e:	6818      	ldr	r0, [r3, #0]
 8120470:	687a      	ldr	r2, [r7, #4]
 8120472:	4613      	mov	r3, r2
 8120474:	005b      	lsls	r3, r3, #1
 8120476:	4413      	add	r3, r2
 8120478:	009b      	lsls	r3, r3, #2
 812047a:	4a08      	ldr	r2, [pc, #32]	@ (812049c <sys_timeouts_init+0x48>)
 812047c:	441a      	add	r2, r3
 812047e:	4b08      	ldr	r3, [pc, #32]	@ (81204a0 <sys_timeouts_init+0x4c>)
 8120480:	4908      	ldr	r1, [pc, #32]	@ (81204a4 <sys_timeouts_init+0x50>)
 8120482:	f000 f811 	bl	81204a8 <sys_timeout_debug>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8120486:	687b      	ldr	r3, [r7, #4]
 8120488:	3301      	adds	r3, #1
 812048a:	607b      	str	r3, [r7, #4]
 812048c:	687b      	ldr	r3, [r7, #4]
 812048e:	2b02      	cmp	r3, #2
 8120490:	d9e6      	bls.n	8120460 <sys_timeouts_init+0xc>
  }
}
 8120492:	bf00      	nop
 8120494:	bf00      	nop
 8120496:	3708      	adds	r7, #8
 8120498:	46bd      	mov	sp, r7
 812049a:	bd80      	pop	{r7, pc}
 812049c:	08128b14 	.word	0x08128b14
 81204a0:	081280e8 	.word	0x081280e8
 81204a4:	081203e9 	.word	0x081203e9

081204a8 <sys_timeout_debug>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 81204a8:	b580      	push	{r7, lr}
 81204aa:	b086      	sub	sp, #24
 81204ac:	af00      	add	r7, sp, #0
 81204ae:	60f8      	str	r0, [r7, #12]
 81204b0:	60b9      	str	r1, [r7, #8]
 81204b2:	607a      	str	r2, [r7, #4]
 81204b4:	603b      	str	r3, [r7, #0]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 81204b6:	68fb      	ldr	r3, [r7, #12]
 81204b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81204bc:	d306      	bcc.n	81204cc <sys_timeout_debug+0x24>
 81204be:	4b0b      	ldr	r3, [pc, #44]	@ (81204ec <sys_timeout_debug+0x44>)
 81204c0:	f240 1229 	movw	r2, #297	@ 0x129
 81204c4:	490a      	ldr	r1, [pc, #40]	@ (81204f0 <sys_timeout_debug+0x48>)
 81204c6:	480b      	ldr	r0, [pc, #44]	@ (81204f4 <sys_timeout_debug+0x4c>)
 81204c8:	f001 fecc 	bl	8122264 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 81204cc:	f7e6 f894 	bl	81065f8 <sys_now>
 81204d0:	4602      	mov	r2, r0
 81204d2:	68fb      	ldr	r3, [r7, #12]
 81204d4:	4413      	add	r3, r2
 81204d6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
 81204d8:	683b      	ldr	r3, [r7, #0]
 81204da:	687a      	ldr	r2, [r7, #4]
 81204dc:	68b9      	ldr	r1, [r7, #8]
 81204de:	6978      	ldr	r0, [r7, #20]
 81204e0:	f7ff ff10 	bl	8120304 <sys_timeout_abs>
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
#endif
}
 81204e4:	bf00      	nop
 81204e6:	3718      	adds	r7, #24
 81204e8:	46bd      	mov	sp, r7
 81204ea:	bd80      	pop	{r7, pc}
 81204ec:	0812800c 	.word	0x0812800c
 81204f0:	081280fc 	.word	0x081280fc
 81204f4:	081280c0 	.word	0x081280c0

081204f8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 81204f8:	b580      	push	{r7, lr}
 81204fa:	b084      	sub	sp, #16
 81204fc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 81204fe:	f7e6 f87b 	bl	81065f8 <sys_now>
 8120502:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8120504:	4b17      	ldr	r3, [pc, #92]	@ (8120564 <sys_check_timeouts+0x6c>)
 8120506:	681b      	ldr	r3, [r3, #0]
 8120508:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 812050a:	68bb      	ldr	r3, [r7, #8]
 812050c:	2b00      	cmp	r3, #0
 812050e:	d022      	beq.n	8120556 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8120510:	68bb      	ldr	r3, [r7, #8]
 8120512:	685b      	ldr	r3, [r3, #4]
 8120514:	68fa      	ldr	r2, [r7, #12]
 8120516:	1ad3      	subs	r3, r2, r3
 8120518:	0fdb      	lsrs	r3, r3, #31
 812051a:	f003 0301 	and.w	r3, r3, #1
 812051e:	b2db      	uxtb	r3, r3
 8120520:	2b00      	cmp	r3, #0
 8120522:	d11a      	bne.n	812055a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8120524:	68bb      	ldr	r3, [r7, #8]
 8120526:	681b      	ldr	r3, [r3, #0]
 8120528:	4a0e      	ldr	r2, [pc, #56]	@ (8120564 <sys_check_timeouts+0x6c>)
 812052a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 812052c:	68bb      	ldr	r3, [r7, #8]
 812052e:	689b      	ldr	r3, [r3, #8]
 8120530:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8120532:	68bb      	ldr	r3, [r7, #8]
 8120534:	68db      	ldr	r3, [r3, #12]
 8120536:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8120538:	68bb      	ldr	r3, [r7, #8]
 812053a:	685b      	ldr	r3, [r3, #4]
 812053c:	4a0a      	ldr	r2, [pc, #40]	@ (8120568 <sys_check_timeouts+0x70>)
 812053e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8120540:	68b9      	ldr	r1, [r7, #8]
 8120542:	200a      	movs	r0, #10
 8120544:	f7f7 fe58 	bl	81181f8 <memp_free>
    if (handler != NULL) {
 8120548:	687b      	ldr	r3, [r7, #4]
 812054a:	2b00      	cmp	r3, #0
 812054c:	d0da      	beq.n	8120504 <sys_check_timeouts+0xc>
      handler(arg);
 812054e:	687b      	ldr	r3, [r7, #4]
 8120550:	6838      	ldr	r0, [r7, #0]
 8120552:	4798      	blx	r3
  do {
 8120554:	e7d6      	b.n	8120504 <sys_check_timeouts+0xc>
      return;
 8120556:	bf00      	nop
 8120558:	e000      	b.n	812055c <sys_check_timeouts+0x64>
      return;
 812055a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 812055c:	3710      	adds	r7, #16
 812055e:	46bd      	mov	sp, r7
 8120560:	bd80      	pop	{r7, pc}
 8120562:	bf00      	nop
 8120564:	10011ebc 	.word	0x10011ebc
 8120568:	10011ec0 	.word	0x10011ec0

0812056c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 812056c:	b580      	push	{r7, lr}
 812056e:	b082      	sub	sp, #8
 8120570:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8120572:	4b16      	ldr	r3, [pc, #88]	@ (81205cc <sys_timeouts_sleeptime+0x60>)
 8120574:	681b      	ldr	r3, [r3, #0]
 8120576:	2b00      	cmp	r3, #0
 8120578:	d102      	bne.n	8120580 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 812057a:	f04f 33ff 	mov.w	r3, #4294967295
 812057e:	e020      	b.n	81205c2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8120580:	f7e6 f83a 	bl	81065f8 <sys_now>
 8120584:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8120586:	4b11      	ldr	r3, [pc, #68]	@ (81205cc <sys_timeouts_sleeptime+0x60>)
 8120588:	681b      	ldr	r3, [r3, #0]
 812058a:	685a      	ldr	r2, [r3, #4]
 812058c:	687b      	ldr	r3, [r7, #4]
 812058e:	1ad3      	subs	r3, r2, r3
 8120590:	0fdb      	lsrs	r3, r3, #31
 8120592:	f003 0301 	and.w	r3, r3, #1
 8120596:	b2db      	uxtb	r3, r3
 8120598:	2b00      	cmp	r3, #0
 812059a:	d001      	beq.n	81205a0 <sys_timeouts_sleeptime+0x34>
    return 0;
 812059c:	2300      	movs	r3, #0
 812059e:	e010      	b.n	81205c2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 81205a0:	4b0a      	ldr	r3, [pc, #40]	@ (81205cc <sys_timeouts_sleeptime+0x60>)
 81205a2:	681b      	ldr	r3, [r3, #0]
 81205a4:	685a      	ldr	r2, [r3, #4]
 81205a6:	687b      	ldr	r3, [r7, #4]
 81205a8:	1ad3      	subs	r3, r2, r3
 81205aa:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 81205ac:	683b      	ldr	r3, [r7, #0]
 81205ae:	2b00      	cmp	r3, #0
 81205b0:	da06      	bge.n	81205c0 <sys_timeouts_sleeptime+0x54>
 81205b2:	4b07      	ldr	r3, [pc, #28]	@ (81205d0 <sys_timeouts_sleeptime+0x64>)
 81205b4:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 81205b8:	4906      	ldr	r1, [pc, #24]	@ (81205d4 <sys_timeouts_sleeptime+0x68>)
 81205ba:	4807      	ldr	r0, [pc, #28]	@ (81205d8 <sys_timeouts_sleeptime+0x6c>)
 81205bc:	f001 fe52 	bl	8122264 <iprintf>
    return ret;
 81205c0:	683b      	ldr	r3, [r7, #0]
  }
}
 81205c2:	4618      	mov	r0, r3
 81205c4:	3708      	adds	r7, #8
 81205c6:	46bd      	mov	sp, r7
 81205c8:	bd80      	pop	{r7, pc}
 81205ca:	bf00      	nop
 81205cc:	10011ebc 	.word	0x10011ebc
 81205d0:	0812800c 	.word	0x0812800c
 81205d4:	08128134 	.word	0x08128134
 81205d8:	081280c0 	.word	0x081280c0

081205dc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 81205dc:	b580      	push	{r7, lr}
 81205de:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 81205e0:	f001 f8d0 	bl	8121784 <rand>
 81205e4:	4603      	mov	r3, r0
 81205e6:	b29b      	uxth	r3, r3
 81205e8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 81205ec:	b29b      	uxth	r3, r3
 81205ee:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 81205f2:	b29a      	uxth	r2, r3
 81205f4:	4b01      	ldr	r3, [pc, #4]	@ (81205fc <udp_init+0x20>)
 81205f6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 81205f8:	bf00      	nop
 81205fa:	bd80      	pop	{r7, pc}
 81205fc:	10000030 	.word	0x10000030

08120600 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8120600:	b480      	push	{r7}
 8120602:	b083      	sub	sp, #12
 8120604:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8120606:	2300      	movs	r3, #0
 8120608:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 812060a:	4b17      	ldr	r3, [pc, #92]	@ (8120668 <udp_new_port+0x68>)
 812060c:	881b      	ldrh	r3, [r3, #0]
 812060e:	1c5a      	adds	r2, r3, #1
 8120610:	b291      	uxth	r1, r2
 8120612:	4a15      	ldr	r2, [pc, #84]	@ (8120668 <udp_new_port+0x68>)
 8120614:	8011      	strh	r1, [r2, #0]
 8120616:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 812061a:	4293      	cmp	r3, r2
 812061c:	d103      	bne.n	8120626 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 812061e:	4b12      	ldr	r3, [pc, #72]	@ (8120668 <udp_new_port+0x68>)
 8120620:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8120624:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8120626:	4b11      	ldr	r3, [pc, #68]	@ (812066c <udp_new_port+0x6c>)
 8120628:	681b      	ldr	r3, [r3, #0]
 812062a:	603b      	str	r3, [r7, #0]
 812062c:	e011      	b.n	8120652 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 812062e:	683b      	ldr	r3, [r7, #0]
 8120630:	8a5a      	ldrh	r2, [r3, #18]
 8120632:	4b0d      	ldr	r3, [pc, #52]	@ (8120668 <udp_new_port+0x68>)
 8120634:	881b      	ldrh	r3, [r3, #0]
 8120636:	429a      	cmp	r2, r3
 8120638:	d108      	bne.n	812064c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 812063a:	88fb      	ldrh	r3, [r7, #6]
 812063c:	3301      	adds	r3, #1
 812063e:	80fb      	strh	r3, [r7, #6]
 8120640:	88fb      	ldrh	r3, [r7, #6]
 8120642:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8120646:	d3e0      	bcc.n	812060a <udp_new_port+0xa>
        return 0;
 8120648:	2300      	movs	r3, #0
 812064a:	e007      	b.n	812065c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 812064c:	683b      	ldr	r3, [r7, #0]
 812064e:	68db      	ldr	r3, [r3, #12]
 8120650:	603b      	str	r3, [r7, #0]
 8120652:	683b      	ldr	r3, [r7, #0]
 8120654:	2b00      	cmp	r3, #0
 8120656:	d1ea      	bne.n	812062e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8120658:	4b03      	ldr	r3, [pc, #12]	@ (8120668 <udp_new_port+0x68>)
 812065a:	881b      	ldrh	r3, [r3, #0]
}
 812065c:	4618      	mov	r0, r3
 812065e:	370c      	adds	r7, #12
 8120660:	46bd      	mov	sp, r7
 8120662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8120666:	4770      	bx	lr
 8120668:	10000030 	.word	0x10000030
 812066c:	10011ec8 	.word	0x10011ec8

08120670 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8120670:	b580      	push	{r7, lr}
 8120672:	b084      	sub	sp, #16
 8120674:	af00      	add	r7, sp, #0
 8120676:	60f8      	str	r0, [r7, #12]
 8120678:	60b9      	str	r1, [r7, #8]
 812067a:	4613      	mov	r3, r2
 812067c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 812067e:	68fb      	ldr	r3, [r7, #12]
 8120680:	2b00      	cmp	r3, #0
 8120682:	d105      	bne.n	8120690 <udp_input_local_match+0x20>
 8120684:	4b27      	ldr	r3, [pc, #156]	@ (8120724 <udp_input_local_match+0xb4>)
 8120686:	2287      	movs	r2, #135	@ 0x87
 8120688:	4927      	ldr	r1, [pc, #156]	@ (8120728 <udp_input_local_match+0xb8>)
 812068a:	4828      	ldr	r0, [pc, #160]	@ (812072c <udp_input_local_match+0xbc>)
 812068c:	f001 fdea 	bl	8122264 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8120690:	68bb      	ldr	r3, [r7, #8]
 8120692:	2b00      	cmp	r3, #0
 8120694:	d105      	bne.n	81206a2 <udp_input_local_match+0x32>
 8120696:	4b23      	ldr	r3, [pc, #140]	@ (8120724 <udp_input_local_match+0xb4>)
 8120698:	2288      	movs	r2, #136	@ 0x88
 812069a:	4925      	ldr	r1, [pc, #148]	@ (8120730 <udp_input_local_match+0xc0>)
 812069c:	4823      	ldr	r0, [pc, #140]	@ (812072c <udp_input_local_match+0xbc>)
 812069e:	f001 fde1 	bl	8122264 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 81206a2:	68fb      	ldr	r3, [r7, #12]
 81206a4:	7a1b      	ldrb	r3, [r3, #8]
 81206a6:	2b00      	cmp	r3, #0
 81206a8:	d00b      	beq.n	81206c2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 81206aa:	68fb      	ldr	r3, [r7, #12]
 81206ac:	7a1a      	ldrb	r2, [r3, #8]
 81206ae:	4b21      	ldr	r3, [pc, #132]	@ (8120734 <udp_input_local_match+0xc4>)
 81206b0:	685b      	ldr	r3, [r3, #4]
 81206b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 81206b6:	3301      	adds	r3, #1
 81206b8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 81206ba:	429a      	cmp	r2, r3
 81206bc:	d001      	beq.n	81206c2 <udp_input_local_match+0x52>
    return 0;
 81206be:	2300      	movs	r3, #0
 81206c0:	e02b      	b.n	812071a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 81206c2:	79fb      	ldrb	r3, [r7, #7]
 81206c4:	2b00      	cmp	r3, #0
 81206c6:	d018      	beq.n	81206fa <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 81206c8:	68fb      	ldr	r3, [r7, #12]
 81206ca:	2b00      	cmp	r3, #0
 81206cc:	d013      	beq.n	81206f6 <udp_input_local_match+0x86>
 81206ce:	68fb      	ldr	r3, [r7, #12]
 81206d0:	681b      	ldr	r3, [r3, #0]
 81206d2:	2b00      	cmp	r3, #0
 81206d4:	d00f      	beq.n	81206f6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 81206d6:	4b17      	ldr	r3, [pc, #92]	@ (8120734 <udp_input_local_match+0xc4>)
 81206d8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 81206da:	f1b3 3fff 	cmp.w	r3, #4294967295
 81206de:	d00a      	beq.n	81206f6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 81206e0:	68fb      	ldr	r3, [r7, #12]
 81206e2:	681a      	ldr	r2, [r3, #0]
 81206e4:	4b13      	ldr	r3, [pc, #76]	@ (8120734 <udp_input_local_match+0xc4>)
 81206e6:	695b      	ldr	r3, [r3, #20]
 81206e8:	405a      	eors	r2, r3
 81206ea:	68bb      	ldr	r3, [r7, #8]
 81206ec:	3308      	adds	r3, #8
 81206ee:	681b      	ldr	r3, [r3, #0]
 81206f0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 81206f2:	2b00      	cmp	r3, #0
 81206f4:	d110      	bne.n	8120718 <udp_input_local_match+0xa8>
          return 1;
 81206f6:	2301      	movs	r3, #1
 81206f8:	e00f      	b.n	812071a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 81206fa:	68fb      	ldr	r3, [r7, #12]
 81206fc:	2b00      	cmp	r3, #0
 81206fe:	d009      	beq.n	8120714 <udp_input_local_match+0xa4>
 8120700:	68fb      	ldr	r3, [r7, #12]
 8120702:	681b      	ldr	r3, [r3, #0]
 8120704:	2b00      	cmp	r3, #0
 8120706:	d005      	beq.n	8120714 <udp_input_local_match+0xa4>
 8120708:	68fb      	ldr	r3, [r7, #12]
 812070a:	681a      	ldr	r2, [r3, #0]
 812070c:	4b09      	ldr	r3, [pc, #36]	@ (8120734 <udp_input_local_match+0xc4>)
 812070e:	695b      	ldr	r3, [r3, #20]
 8120710:	429a      	cmp	r2, r3
 8120712:	d101      	bne.n	8120718 <udp_input_local_match+0xa8>
        return 1;
 8120714:	2301      	movs	r3, #1
 8120716:	e000      	b.n	812071a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8120718:	2300      	movs	r3, #0
}
 812071a:	4618      	mov	r0, r3
 812071c:	3710      	adds	r7, #16
 812071e:	46bd      	mov	sp, r7
 8120720:	bd80      	pop	{r7, pc}
 8120722:	bf00      	nop
 8120724:	08128148 	.word	0x08128148
 8120728:	081281b8 	.word	0x081281b8
 812072c:	081281dc 	.word	0x081281dc
 8120730:	08128204 	.word	0x08128204
 8120734:	1000b2b4 	.word	0x1000b2b4

08120738 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8120738:	b590      	push	{r4, r7, lr}
 812073a:	b08d      	sub	sp, #52	@ 0x34
 812073c:	af02      	add	r7, sp, #8
 812073e:	6078      	str	r0, [r7, #4]
 8120740:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8120742:	2300      	movs	r3, #0
 8120744:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8120746:	687b      	ldr	r3, [r7, #4]
 8120748:	2b00      	cmp	r3, #0
 812074a:	d105      	bne.n	8120758 <udp_input+0x20>
 812074c:	4ba2      	ldr	r3, [pc, #648]	@ (81209d8 <udp_input+0x2a0>)
 812074e:	22cf      	movs	r2, #207	@ 0xcf
 8120750:	49a2      	ldr	r1, [pc, #648]	@ (81209dc <udp_input+0x2a4>)
 8120752:	48a3      	ldr	r0, [pc, #652]	@ (81209e0 <udp_input+0x2a8>)
 8120754:	f001 fd86 	bl	8122264 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8120758:	683b      	ldr	r3, [r7, #0]
 812075a:	2b00      	cmp	r3, #0
 812075c:	d105      	bne.n	812076a <udp_input+0x32>
 812075e:	4b9e      	ldr	r3, [pc, #632]	@ (81209d8 <udp_input+0x2a0>)
 8120760:	22d0      	movs	r2, #208	@ 0xd0
 8120762:	49a0      	ldr	r1, [pc, #640]	@ (81209e4 <udp_input+0x2ac>)
 8120764:	489e      	ldr	r0, [pc, #632]	@ (81209e0 <udp_input+0x2a8>)
 8120766:	f001 fd7d 	bl	8122264 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 812076a:	687b      	ldr	r3, [r7, #4]
 812076c:	895b      	ldrh	r3, [r3, #10]
 812076e:	2b07      	cmp	r3, #7
 8120770:	d80c      	bhi.n	812078c <udp_input+0x54>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
 8120772:	687b      	ldr	r3, [r7, #4]
 8120774:	891b      	ldrh	r3, [r3, #8]
 8120776:	4619      	mov	r1, r3
 8120778:	489b      	ldr	r0, [pc, #620]	@ (81209e8 <udp_input+0x2b0>)
 812077a:	f001 fd73 	bl	8122264 <iprintf>
 812077e:	200d      	movs	r0, #13
 8120780:	f001 fd82 	bl	8122288 <putchar>
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8120784:	6878      	ldr	r0, [r7, #4]
 8120786:	f7f8 fcf9 	bl	811917c <pbuf_free>
    goto end;
 812078a:	e1b4      	b.n	8120af6 <udp_input+0x3be>
  }

  udphdr = (struct udp_hdr *)p->payload;
 812078c:	687b      	ldr	r3, [r7, #4]
 812078e:	685b      	ldr	r3, [r3, #4]
 8120790:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8120792:	4b96      	ldr	r3, [pc, #600]	@ (81209ec <udp_input+0x2b4>)
 8120794:	695b      	ldr	r3, [r3, #20]
 8120796:	4a95      	ldr	r2, [pc, #596]	@ (81209ec <udp_input+0x2b4>)
 8120798:	6812      	ldr	r2, [r2, #0]
 812079a:	4611      	mov	r1, r2
 812079c:	4618      	mov	r0, r3
 812079e:	f7f5 fffd 	bl	811679c <ip4_addr_isbroadcast_u32>
 81207a2:	4603      	mov	r3, r0
 81207a4:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));
 81207a6:	687b      	ldr	r3, [r7, #4]
 81207a8:	891b      	ldrh	r3, [r3, #8]
 81207aa:	4619      	mov	r1, r3
 81207ac:	4890      	ldr	r0, [pc, #576]	@ (81209f0 <udp_input+0x2b8>)
 81207ae:	f001 fd59 	bl	8122264 <iprintf>
 81207b2:	200d      	movs	r0, #13
 81207b4:	f001 fd68 	bl	8122288 <putchar>

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 81207b8:	697b      	ldr	r3, [r7, #20]
 81207ba:	881b      	ldrh	r3, [r3, #0]
 81207bc:	b29b      	uxth	r3, r3
 81207be:	4618      	mov	r0, r3
 81207c0:	f7f3 fd3c 	bl	811423c <lwip_htons>
 81207c4:	4603      	mov	r3, r0
 81207c6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 81207c8:	697b      	ldr	r3, [r7, #20]
 81207ca:	885b      	ldrh	r3, [r3, #2]
 81207cc:	b29b      	uxth	r3, r3
 81207ce:	4618      	mov	r0, r3
 81207d0:	f7f3 fd34 	bl	811423c <lwip_htons>
 81207d4:	4603      	mov	r3, r0
 81207d6:	81fb      	strh	r3, [r7, #14]

  udp_debug_print(udphdr);
 81207d8:	6978      	ldr	r0, [r7, #20]
 81207da:	f000 fd9d 	bl	8121318 <udp_debug_print>

  /* print the UDP source and destination */
  LWIP_DEBUGF(UDP_DEBUG, ("udp ("));
 81207de:	4885      	ldr	r0, [pc, #532]	@ (81209f4 <udp_input+0x2bc>)
 81207e0:	f001 fd40 	bl	8122264 <iprintf>
 81207e4:	200d      	movs	r0, #13
 81207e6:	f001 fd4f 	bl	8122288 <putchar>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
 81207ea:	4b80      	ldr	r3, [pc, #512]	@ (81209ec <udp_input+0x2b4>)
 81207ec:	695b      	ldr	r3, [r3, #20]
 81207ee:	b2db      	uxtb	r3, r3
 81207f0:	4619      	mov	r1, r3
 81207f2:	4b7e      	ldr	r3, [pc, #504]	@ (81209ec <udp_input+0x2b4>)
 81207f4:	695b      	ldr	r3, [r3, #20]
 81207f6:	0a1b      	lsrs	r3, r3, #8
 81207f8:	b2db      	uxtb	r3, r3
 81207fa:	461a      	mov	r2, r3
 81207fc:	4b7b      	ldr	r3, [pc, #492]	@ (81209ec <udp_input+0x2b4>)
 81207fe:	695b      	ldr	r3, [r3, #20]
 8120800:	0c1b      	lsrs	r3, r3, #16
 8120802:	b2db      	uxtb	r3, r3
 8120804:	4618      	mov	r0, r3
 8120806:	4b79      	ldr	r3, [pc, #484]	@ (81209ec <udp_input+0x2b4>)
 8120808:	695b      	ldr	r3, [r3, #20]
 812080a:	0e1b      	lsrs	r3, r3, #24
 812080c:	b2db      	uxtb	r3, r3
 812080e:	9300      	str	r3, [sp, #0]
 8120810:	4603      	mov	r3, r0
 8120812:	4879      	ldr	r0, [pc, #484]	@ (81209f8 <udp_input+0x2c0>)
 8120814:	f001 fd26 	bl	8122264 <iprintf>
 8120818:	200d      	movs	r0, #13
 812081a:	f001 fd35 	bl	8122288 <putchar>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
 812081e:	697b      	ldr	r3, [r7, #20]
 8120820:	885b      	ldrh	r3, [r3, #2]
 8120822:	b29b      	uxth	r3, r3
 8120824:	4618      	mov	r0, r3
 8120826:	f7f3 fd09 	bl	811423c <lwip_htons>
 812082a:	4603      	mov	r3, r0
 812082c:	4619      	mov	r1, r3
 812082e:	4873      	ldr	r0, [pc, #460]	@ (81209fc <udp_input+0x2c4>)
 8120830:	f001 fd18 	bl	8122264 <iprintf>
 8120834:	200d      	movs	r0, #13
 8120836:	f001 fd27 	bl	8122288 <putchar>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
 812083a:	4b6c      	ldr	r3, [pc, #432]	@ (81209ec <udp_input+0x2b4>)
 812083c:	691b      	ldr	r3, [r3, #16]
 812083e:	b2db      	uxtb	r3, r3
 8120840:	4619      	mov	r1, r3
 8120842:	4b6a      	ldr	r3, [pc, #424]	@ (81209ec <udp_input+0x2b4>)
 8120844:	691b      	ldr	r3, [r3, #16]
 8120846:	0a1b      	lsrs	r3, r3, #8
 8120848:	b2db      	uxtb	r3, r3
 812084a:	461a      	mov	r2, r3
 812084c:	4b67      	ldr	r3, [pc, #412]	@ (81209ec <udp_input+0x2b4>)
 812084e:	691b      	ldr	r3, [r3, #16]
 8120850:	0c1b      	lsrs	r3, r3, #16
 8120852:	b2db      	uxtb	r3, r3
 8120854:	4618      	mov	r0, r3
 8120856:	4b65      	ldr	r3, [pc, #404]	@ (81209ec <udp_input+0x2b4>)
 8120858:	691b      	ldr	r3, [r3, #16]
 812085a:	0e1b      	lsrs	r3, r3, #24
 812085c:	b2db      	uxtb	r3, r3
 812085e:	9300      	str	r3, [sp, #0]
 8120860:	4603      	mov	r3, r0
 8120862:	4865      	ldr	r0, [pc, #404]	@ (81209f8 <udp_input+0x2c0>)
 8120864:	f001 fcfe 	bl	8122264 <iprintf>
 8120868:	200d      	movs	r0, #13
 812086a:	f001 fd0d 	bl	8122288 <putchar>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));
 812086e:	697b      	ldr	r3, [r7, #20]
 8120870:	881b      	ldrh	r3, [r3, #0]
 8120872:	b29b      	uxth	r3, r3
 8120874:	4618      	mov	r0, r3
 8120876:	f7f3 fce1 	bl	811423c <lwip_htons>
 812087a:	4603      	mov	r3, r0
 812087c:	4619      	mov	r1, r3
 812087e:	4860      	ldr	r0, [pc, #384]	@ (8120a00 <udp_input+0x2c8>)
 8120880:	f001 fcf0 	bl	8122264 <iprintf>
 8120884:	200d      	movs	r0, #13
 8120886:	f001 fcff 	bl	8122288 <putchar>

  pcb = NULL;
 812088a:	2300      	movs	r3, #0
 812088c:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 812088e:	2300      	movs	r3, #0
 8120890:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8120892:	2300      	movs	r3, #0
 8120894:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8120896:	4b5b      	ldr	r3, [pc, #364]	@ (8120a04 <udp_input+0x2cc>)
 8120898:	681b      	ldr	r3, [r3, #0]
 812089a:	627b      	str	r3, [r7, #36]	@ 0x24
 812089c:	e0bb      	b.n	8120a16 <udp_input+0x2de>
    /* print the PCB local and remote address */
    LWIP_DEBUGF(UDP_DEBUG, ("pcb ("));
 812089e:	485a      	ldr	r0, [pc, #360]	@ (8120a08 <udp_input+0x2d0>)
 81208a0:	f001 fce0 	bl	8122264 <iprintf>
 81208a4:	200d      	movs	r0, #13
 81208a6:	f001 fcef 	bl	8122288 <putchar>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->local_ip);
 81208aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81208ac:	681b      	ldr	r3, [r3, #0]
 81208ae:	b2db      	uxtb	r3, r3
 81208b0:	4619      	mov	r1, r3
 81208b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81208b4:	681b      	ldr	r3, [r3, #0]
 81208b6:	0a1b      	lsrs	r3, r3, #8
 81208b8:	b2db      	uxtb	r3, r3
 81208ba:	461a      	mov	r2, r3
 81208bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81208be:	681b      	ldr	r3, [r3, #0]
 81208c0:	0c1b      	lsrs	r3, r3, #16
 81208c2:	b2db      	uxtb	r3, r3
 81208c4:	4618      	mov	r0, r3
 81208c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81208c8:	681b      	ldr	r3, [r3, #0]
 81208ca:	0e1b      	lsrs	r3, r3, #24
 81208cc:	b2db      	uxtb	r3, r3
 81208ce:	9300      	str	r3, [sp, #0]
 81208d0:	4603      	mov	r3, r0
 81208d2:	4849      	ldr	r0, [pc, #292]	@ (81209f8 <udp_input+0x2c0>)
 81208d4:	f001 fcc6 	bl	8122264 <iprintf>
 81208d8:	200d      	movs	r0, #13
 81208da:	f001 fcd5 	bl	8122288 <putchar>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
 81208de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81208e0:	8a5b      	ldrh	r3, [r3, #18]
 81208e2:	4619      	mov	r1, r3
 81208e4:	4845      	ldr	r0, [pc, #276]	@ (81209fc <udp_input+0x2c4>)
 81208e6:	f001 fcbd 	bl	8122264 <iprintf>
 81208ea:	200d      	movs	r0, #13
 81208ec:	f001 fccc 	bl	8122288 <putchar>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
 81208f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81208f2:	685b      	ldr	r3, [r3, #4]
 81208f4:	b2db      	uxtb	r3, r3
 81208f6:	4619      	mov	r1, r3
 81208f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81208fa:	685b      	ldr	r3, [r3, #4]
 81208fc:	0a1b      	lsrs	r3, r3, #8
 81208fe:	b2db      	uxtb	r3, r3
 8120900:	461a      	mov	r2, r3
 8120902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120904:	685b      	ldr	r3, [r3, #4]
 8120906:	0c1b      	lsrs	r3, r3, #16
 8120908:	b2db      	uxtb	r3, r3
 812090a:	4618      	mov	r0, r3
 812090c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 812090e:	685b      	ldr	r3, [r3, #4]
 8120910:	0e1b      	lsrs	r3, r3, #24
 8120912:	b2db      	uxtb	r3, r3
 8120914:	9300      	str	r3, [sp, #0]
 8120916:	4603      	mov	r3, r0
 8120918:	4837      	ldr	r0, [pc, #220]	@ (81209f8 <udp_input+0x2c0>)
 812091a:	f001 fca3 	bl	8122264 <iprintf>
 812091e:	200d      	movs	r0, #13
 8120920:	f001 fcb2 	bl	8122288 <putchar>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));
 8120924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120926:	8a9b      	ldrh	r3, [r3, #20]
 8120928:	4619      	mov	r1, r3
 812092a:	4835      	ldr	r0, [pc, #212]	@ (8120a00 <udp_input+0x2c8>)
 812092c:	f001 fc9a 	bl	8122264 <iprintf>
 8120930:	200d      	movs	r0, #13
 8120932:	f001 fca9 	bl	8122288 <putchar>

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8120936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120938:	8a5b      	ldrh	r3, [r3, #18]
 812093a:	89fa      	ldrh	r2, [r7, #14]
 812093c:	429a      	cmp	r2, r3
 812093e:	d165      	bne.n	8120a0c <udp_input+0x2d4>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8120940:	7cfb      	ldrb	r3, [r7, #19]
 8120942:	461a      	mov	r2, r3
 8120944:	6839      	ldr	r1, [r7, #0]
 8120946:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8120948:	f7ff fe92 	bl	8120670 <udp_input_local_match>
 812094c:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 812094e:	2b00      	cmp	r3, #0
 8120950:	d05c      	beq.n	8120a0c <udp_input+0x2d4>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8120952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120954:	7c1b      	ldrb	r3, [r3, #16]
 8120956:	f003 0304 	and.w	r3, r3, #4
 812095a:	2b00      	cmp	r3, #0
 812095c:	d11d      	bne.n	812099a <udp_input+0x262>
        if (uncon_pcb == NULL) {
 812095e:	69fb      	ldr	r3, [r7, #28]
 8120960:	2b00      	cmp	r3, #0
 8120962:	d102      	bne.n	812096a <udp_input+0x232>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8120964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120966:	61fb      	str	r3, [r7, #28]
 8120968:	e017      	b.n	812099a <udp_input+0x262>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 812096a:	7cfb      	ldrb	r3, [r7, #19]
 812096c:	2b00      	cmp	r3, #0
 812096e:	d014      	beq.n	812099a <udp_input+0x262>
 8120970:	4b1e      	ldr	r3, [pc, #120]	@ (81209ec <udp_input+0x2b4>)
 8120972:	695b      	ldr	r3, [r3, #20]
 8120974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8120978:	d10f      	bne.n	812099a <udp_input+0x262>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 812097a:	69fb      	ldr	r3, [r7, #28]
 812097c:	681a      	ldr	r2, [r3, #0]
 812097e:	683b      	ldr	r3, [r7, #0]
 8120980:	3304      	adds	r3, #4
 8120982:	681b      	ldr	r3, [r3, #0]
 8120984:	429a      	cmp	r2, r3
 8120986:	d008      	beq.n	812099a <udp_input+0x262>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8120988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 812098a:	681a      	ldr	r2, [r3, #0]
 812098c:	683b      	ldr	r3, [r7, #0]
 812098e:	3304      	adds	r3, #4
 8120990:	681b      	ldr	r3, [r3, #0]
 8120992:	429a      	cmp	r2, r3
 8120994:	d101      	bne.n	812099a <udp_input+0x262>
              /* better match */
              uncon_pcb = pcb;
 8120996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120998:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 812099a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 812099c:	8a9b      	ldrh	r3, [r3, #20]
 812099e:	8a3a      	ldrh	r2, [r7, #16]
 81209a0:	429a      	cmp	r2, r3
 81209a2:	d133      	bne.n	8120a0c <udp_input+0x2d4>
          (ip_addr_isany_val(pcb->remote_ip) ||
 81209a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81209a6:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 81209a8:	2b00      	cmp	r3, #0
 81209aa:	d005      	beq.n	81209b8 <udp_input+0x280>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 81209ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81209ae:	685a      	ldr	r2, [r3, #4]
 81209b0:	4b0e      	ldr	r3, [pc, #56]	@ (81209ec <udp_input+0x2b4>)
 81209b2:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 81209b4:	429a      	cmp	r2, r3
 81209b6:	d129      	bne.n	8120a0c <udp_input+0x2d4>
        /* the first fully matching PCB */
        if (prev != NULL) {
 81209b8:	6a3b      	ldr	r3, [r7, #32]
 81209ba:	2b00      	cmp	r3, #0
 81209bc:	d030      	beq.n	8120a20 <udp_input+0x2e8>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 81209be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81209c0:	68da      	ldr	r2, [r3, #12]
 81209c2:	6a3b      	ldr	r3, [r7, #32]
 81209c4:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 81209c6:	4b0f      	ldr	r3, [pc, #60]	@ (8120a04 <udp_input+0x2cc>)
 81209c8:	681a      	ldr	r2, [r3, #0]
 81209ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81209cc:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 81209ce:	4a0d      	ldr	r2, [pc, #52]	@ (8120a04 <udp_input+0x2cc>)
 81209d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81209d2:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 81209d4:	e024      	b.n	8120a20 <udp_input+0x2e8>
 81209d6:	bf00      	nop
 81209d8:	08128148 	.word	0x08128148
 81209dc:	0812822c 	.word	0x0812822c
 81209e0:	081281dc 	.word	0x081281dc
 81209e4:	08128244 	.word	0x08128244
 81209e8:	08128260 	.word	0x08128260
 81209ec:	1000b2b4 	.word	0x1000b2b4
 81209f0:	08128298 	.word	0x08128298
 81209f4:	081282c4 	.word	0x081282c4
 81209f8:	081282cc 	.word	0x081282cc
 81209fc:	081282dc 	.word	0x081282dc
 8120a00:	081282ec 	.word	0x081282ec
 8120a04:	10011ec8 	.word	0x10011ec8
 8120a08:	081282f4 	.word	0x081282f4
      }
    }

    prev = pcb;
 8120a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120a0e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8120a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120a12:	68db      	ldr	r3, [r3, #12]
 8120a14:	627b      	str	r3, [r7, #36]	@ 0x24
 8120a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120a18:	2b00      	cmp	r3, #0
 8120a1a:	f47f af40 	bne.w	812089e <udp_input+0x166>
 8120a1e:	e000      	b.n	8120a22 <udp_input+0x2ea>
        break;
 8120a20:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8120a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120a24:	2b00      	cmp	r3, #0
 8120a26:	d101      	bne.n	8120a2c <udp_input+0x2f4>
    pcb = uncon_pcb;
 8120a28:	69fb      	ldr	r3, [r7, #28]
 8120a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8120a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120a2e:	2b00      	cmp	r3, #0
 8120a30:	d002      	beq.n	8120a38 <udp_input+0x300>
    for_us = 1;
 8120a32:	2301      	movs	r3, #1
 8120a34:	76fb      	strb	r3, [r7, #27]
 8120a36:	e00a      	b.n	8120a4e <udp_input+0x316>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8120a38:	683b      	ldr	r3, [r7, #0]
 8120a3a:	3304      	adds	r3, #4
 8120a3c:	681a      	ldr	r2, [r3, #0]
 8120a3e:	4b30      	ldr	r3, [pc, #192]	@ (8120b00 <udp_input+0x3c8>)
 8120a40:	695b      	ldr	r3, [r3, #20]
 8120a42:	429a      	cmp	r2, r3
 8120a44:	bf0c      	ite	eq
 8120a46:	2301      	moveq	r3, #1
 8120a48:	2300      	movne	r3, #0
 8120a4a:	b2db      	uxtb	r3, r3
 8120a4c:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8120a4e:	7efb      	ldrb	r3, [r7, #27]
 8120a50:	2b00      	cmp	r3, #0
 8120a52:	d04d      	beq.n	8120af0 <udp_input+0x3b8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: calculating checksum\n"));
 8120a54:	482b      	ldr	r0, [pc, #172]	@ (8120b04 <udp_input+0x3cc>)
 8120a56:	f001 fc75 	bl	8122344 <puts>
 8120a5a:	200d      	movs	r0, #13
 8120a5c:	f001 fc14 	bl	8122288 <putchar>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8120a60:	2108      	movs	r1, #8
 8120a62:	6878      	ldr	r0, [r7, #4]
 8120a64:	f7f8 fb04 	bl	8119070 <pbuf_remove_header>
 8120a68:	4603      	mov	r3, r0
 8120a6a:	2b00      	cmp	r3, #0
 8120a6c:	d00a      	beq.n	8120a84 <udp_input+0x34c>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8120a6e:	4b26      	ldr	r3, [pc, #152]	@ (8120b08 <udp_input+0x3d0>)
 8120a70:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8120a74:	4925      	ldr	r1, [pc, #148]	@ (8120b0c <udp_input+0x3d4>)
 8120a76:	4826      	ldr	r0, [pc, #152]	@ (8120b10 <udp_input+0x3d8>)
 8120a78:	f001 fbf4 	bl	8122264 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8120a7c:	6878      	ldr	r0, [r7, #4]
 8120a7e:	f7f8 fb7d 	bl	811917c <pbuf_free>
      goto end;
 8120a82:	e038      	b.n	8120af6 <udp_input+0x3be>
    }

    if (pcb != NULL) {
 8120a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120a86:	2b00      	cmp	r3, #0
 8120a88:	d012      	beq.n	8120ab0 <udp_input+0x378>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8120a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120a8c:	699b      	ldr	r3, [r3, #24]
 8120a8e:	2b00      	cmp	r3, #0
 8120a90:	d00a      	beq.n	8120aa8 <udp_input+0x370>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8120a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120a94:	699c      	ldr	r4, [r3, #24]
 8120a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8120a98:	69d8      	ldr	r0, [r3, #28]
 8120a9a:	8a3b      	ldrh	r3, [r7, #16]
 8120a9c:	9300      	str	r3, [sp, #0]
 8120a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8120b14 <udp_input+0x3dc>)
 8120aa0:	687a      	ldr	r2, [r7, #4]
 8120aa2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8120aa4:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8120aa6:	e027      	b.n	8120af8 <udp_input+0x3c0>
        pbuf_free(p);
 8120aa8:	6878      	ldr	r0, [r7, #4]
 8120aaa:	f7f8 fb67 	bl	811917c <pbuf_free>
        goto end;
 8120aae:	e022      	b.n	8120af6 <udp_input+0x3be>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));
 8120ab0:	4819      	ldr	r0, [pc, #100]	@ (8120b18 <udp_input+0x3e0>)
 8120ab2:	f001 fc47 	bl	8122344 <puts>
 8120ab6:	200d      	movs	r0, #13
 8120ab8:	f001 fbe6 	bl	8122288 <putchar>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8120abc:	7cfb      	ldrb	r3, [r7, #19]
 8120abe:	2b00      	cmp	r3, #0
 8120ac0:	d112      	bne.n	8120ae8 <udp_input+0x3b0>
 8120ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8120b00 <udp_input+0x3c8>)
 8120ac4:	695b      	ldr	r3, [r3, #20]
 8120ac6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8120aca:	2be0      	cmp	r3, #224	@ 0xe0
 8120acc:	d00c      	beq.n	8120ae8 <udp_input+0x3b0>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8120ace:	4b0c      	ldr	r3, [pc, #48]	@ (8120b00 <udp_input+0x3c8>)
 8120ad0:	899b      	ldrh	r3, [r3, #12]
 8120ad2:	3308      	adds	r3, #8
 8120ad4:	b29b      	uxth	r3, r3
 8120ad6:	b21b      	sxth	r3, r3
 8120ad8:	4619      	mov	r1, r3
 8120ada:	6878      	ldr	r0, [r7, #4]
 8120adc:	f7f8 fb3b 	bl	8119156 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8120ae0:	2103      	movs	r1, #3
 8120ae2:	6878      	ldr	r0, [r7, #4]
 8120ae4:	f7f5 f84a 	bl	8115b7c <icmp_dest_unreach>
      pbuf_free(p);
 8120ae8:	6878      	ldr	r0, [r7, #4]
 8120aea:	f7f8 fb47 	bl	811917c <pbuf_free>
  return;
 8120aee:	e003      	b.n	8120af8 <udp_input+0x3c0>
    pbuf_free(p);
 8120af0:	6878      	ldr	r0, [r7, #4]
 8120af2:	f7f8 fb43 	bl	811917c <pbuf_free>
  return;
 8120af6:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8120af8:	372c      	adds	r7, #44	@ 0x2c
 8120afa:	46bd      	mov	sp, r7
 8120afc:	bd90      	pop	{r4, r7, pc}
 8120afe:	bf00      	nop
 8120b00:	1000b2b4 	.word	0x1000b2b4
 8120b04:	081282fc 	.word	0x081282fc
 8120b08:	08128148 	.word	0x08128148
 8120b0c:	0812831c 	.word	0x0812831c
 8120b10:	081281dc 	.word	0x081281dc
 8120b14:	1000b2c4 	.word	0x1000b2c4
 8120b18:	08128338 	.word	0x08128338

08120b1c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8120b1c:	b580      	push	{r7, lr}
 8120b1e:	b088      	sub	sp, #32
 8120b20:	af02      	add	r7, sp, #8
 8120b22:	60f8      	str	r0, [r7, #12]
 8120b24:	60b9      	str	r1, [r7, #8]
 8120b26:	607a      	str	r2, [r7, #4]
 8120b28:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8120b2a:	68fb      	ldr	r3, [r7, #12]
 8120b2c:	2b00      	cmp	r3, #0
 8120b2e:	d109      	bne.n	8120b44 <udp_sendto+0x28>
 8120b30:	4b41      	ldr	r3, [pc, #260]	@ (8120c38 <udp_sendto+0x11c>)
 8120b32:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8120b36:	4941      	ldr	r1, [pc, #260]	@ (8120c3c <udp_sendto+0x120>)
 8120b38:	4841      	ldr	r0, [pc, #260]	@ (8120c40 <udp_sendto+0x124>)
 8120b3a:	f001 fb93 	bl	8122264 <iprintf>
 8120b3e:	f06f 030f 	mvn.w	r3, #15
 8120b42:	e074      	b.n	8120c2e <udp_sendto+0x112>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8120b44:	68bb      	ldr	r3, [r7, #8]
 8120b46:	2b00      	cmp	r3, #0
 8120b48:	d109      	bne.n	8120b5e <udp_sendto+0x42>
 8120b4a:	4b3b      	ldr	r3, [pc, #236]	@ (8120c38 <udp_sendto+0x11c>)
 8120b4c:	f240 2219 	movw	r2, #537	@ 0x219
 8120b50:	493c      	ldr	r1, [pc, #240]	@ (8120c44 <udp_sendto+0x128>)
 8120b52:	483b      	ldr	r0, [pc, #236]	@ (8120c40 <udp_sendto+0x124>)
 8120b54:	f001 fb86 	bl	8122264 <iprintf>
 8120b58:	f06f 030f 	mvn.w	r3, #15
 8120b5c:	e067      	b.n	8120c2e <udp_sendto+0x112>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8120b5e:	687b      	ldr	r3, [r7, #4]
 8120b60:	2b00      	cmp	r3, #0
 8120b62:	d109      	bne.n	8120b78 <udp_sendto+0x5c>
 8120b64:	4b34      	ldr	r3, [pc, #208]	@ (8120c38 <udp_sendto+0x11c>)
 8120b66:	f240 221a 	movw	r2, #538	@ 0x21a
 8120b6a:	4937      	ldr	r1, [pc, #220]	@ (8120c48 <udp_sendto+0x12c>)
 8120b6c:	4834      	ldr	r0, [pc, #208]	@ (8120c40 <udp_sendto+0x124>)
 8120b6e:	f001 fb79 	bl	8122264 <iprintf>
 8120b72:	f06f 030f 	mvn.w	r3, #15
 8120b76:	e05a      	b.n	8120c2e <udp_sendto+0x112>

  if (!IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));
 8120b78:	4834      	ldr	r0, [pc, #208]	@ (8120c4c <udp_sendto+0x130>)
 8120b7a:	f001 fbe3 	bl	8122344 <puts>
 8120b7e:	200d      	movs	r0, #13
 8120b80:	f001 fb82 	bl	8122288 <putchar>

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8120b84:	68fb      	ldr	r3, [r7, #12]
 8120b86:	7a1b      	ldrb	r3, [r3, #8]
 8120b88:	2b00      	cmp	r3, #0
 8120b8a:	d006      	beq.n	8120b9a <udp_sendto+0x7e>
    netif = netif_get_by_index(pcb->netif_idx);
 8120b8c:	68fb      	ldr	r3, [r7, #12]
 8120b8e:	7a1b      	ldrb	r3, [r3, #8]
 8120b90:	4618      	mov	r0, r3
 8120b92:	f7f7 ff65 	bl	8118a60 <netif_get_by_index>
 8120b96:	6178      	str	r0, [r7, #20]
 8120b98:	e003      	b.n	8120ba2 <udp_sendto+0x86>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8120b9a:	6878      	ldr	r0, [r7, #4]
 8120b9c:	f7f5 f956 	bl	8115e4c <ip4_route>
 8120ba0:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8120ba2:	697b      	ldr	r3, [r7, #20]
 8120ba4:	2b00      	cmp	r3, #0
 8120ba6:	d138      	bne.n	8120c1a <udp_sendto+0xfe>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
 8120ba8:	4829      	ldr	r0, [pc, #164]	@ (8120c50 <udp_sendto+0x134>)
 8120baa:	f001 fb5b 	bl	8122264 <iprintf>
 8120bae:	200d      	movs	r0, #13
 8120bb0:	f001 fb6a 	bl	8122288 <putchar>
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
 8120bb4:	687b      	ldr	r3, [r7, #4]
 8120bb6:	2b00      	cmp	r3, #0
 8120bb8:	d003      	beq.n	8120bc2 <udp_sendto+0xa6>
 8120bba:	687b      	ldr	r3, [r7, #4]
 8120bbc:	781b      	ldrb	r3, [r3, #0]
 8120bbe:	4619      	mov	r1, r3
 8120bc0:	e000      	b.n	8120bc4 <udp_sendto+0xa8>
 8120bc2:	2100      	movs	r1, #0
 8120bc4:	687b      	ldr	r3, [r7, #4]
 8120bc6:	2b00      	cmp	r3, #0
 8120bc8:	d004      	beq.n	8120bd4 <udp_sendto+0xb8>
 8120bca:	687b      	ldr	r3, [r7, #4]
 8120bcc:	3301      	adds	r3, #1
 8120bce:	781b      	ldrb	r3, [r3, #0]
 8120bd0:	461a      	mov	r2, r3
 8120bd2:	e000      	b.n	8120bd6 <udp_sendto+0xba>
 8120bd4:	2200      	movs	r2, #0
 8120bd6:	687b      	ldr	r3, [r7, #4]
 8120bd8:	2b00      	cmp	r3, #0
 8120bda:	d004      	beq.n	8120be6 <udp_sendto+0xca>
 8120bdc:	687b      	ldr	r3, [r7, #4]
 8120bde:	3302      	adds	r3, #2
 8120be0:	781b      	ldrb	r3, [r3, #0]
 8120be2:	4618      	mov	r0, r3
 8120be4:	e000      	b.n	8120be8 <udp_sendto+0xcc>
 8120be6:	2000      	movs	r0, #0
 8120be8:	687b      	ldr	r3, [r7, #4]
 8120bea:	2b00      	cmp	r3, #0
 8120bec:	d003      	beq.n	8120bf6 <udp_sendto+0xda>
 8120bee:	687b      	ldr	r3, [r7, #4]
 8120bf0:	3303      	adds	r3, #3
 8120bf2:	781b      	ldrb	r3, [r3, #0]
 8120bf4:	e000      	b.n	8120bf8 <udp_sendto+0xdc>
 8120bf6:	2300      	movs	r3, #0
 8120bf8:	9300      	str	r3, [sp, #0]
 8120bfa:	4603      	mov	r3, r0
 8120bfc:	4815      	ldr	r0, [pc, #84]	@ (8120c54 <udp_sendto+0x138>)
 8120bfe:	f001 fb31 	bl	8122264 <iprintf>
 8120c02:	200d      	movs	r0, #13
 8120c04:	f001 fb40 	bl	8122288 <putchar>
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
 8120c08:	200a      	movs	r0, #10
 8120c0a:	f001 fb3d 	bl	8122288 <putchar>
 8120c0e:	200d      	movs	r0, #13
 8120c10:	f001 fb3a 	bl	8122288 <putchar>
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8120c14:	f06f 0303 	mvn.w	r3, #3
 8120c18:	e009      	b.n	8120c2e <udp_sendto+0x112>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8120c1a:	887a      	ldrh	r2, [r7, #2]
 8120c1c:	697b      	ldr	r3, [r7, #20]
 8120c1e:	9300      	str	r3, [sp, #0]
 8120c20:	4613      	mov	r3, r2
 8120c22:	687a      	ldr	r2, [r7, #4]
 8120c24:	68b9      	ldr	r1, [r7, #8]
 8120c26:	68f8      	ldr	r0, [r7, #12]
 8120c28:	f000 f816 	bl	8120c58 <udp_sendto_if>
 8120c2c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8120c2e:	4618      	mov	r0, r3
 8120c30:	3718      	adds	r7, #24
 8120c32:	46bd      	mov	sp, r7
 8120c34:	bd80      	pop	{r7, pc}
 8120c36:	bf00      	nop
 8120c38:	08128148 	.word	0x08128148
 8120c3c:	08128380 	.word	0x08128380
 8120c40:	081281dc 	.word	0x081281dc
 8120c44:	08128398 	.word	0x08128398
 8120c48:	081283b4 	.word	0x081283b4
 8120c4c:	081283d0 	.word	0x081283d0
 8120c50:	081283dc 	.word	0x081283dc
 8120c54:	081282cc 	.word	0x081282cc

08120c58 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8120c58:	b580      	push	{r7, lr}
 8120c5a:	b088      	sub	sp, #32
 8120c5c:	af02      	add	r7, sp, #8
 8120c5e:	60f8      	str	r0, [r7, #12]
 8120c60:	60b9      	str	r1, [r7, #8]
 8120c62:	607a      	str	r2, [r7, #4]
 8120c64:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8120c66:	68fb      	ldr	r3, [r7, #12]
 8120c68:	2b00      	cmp	r3, #0
 8120c6a:	d109      	bne.n	8120c80 <udp_sendto_if+0x28>
 8120c6c:	4b2e      	ldr	r3, [pc, #184]	@ (8120d28 <udp_sendto_if+0xd0>)
 8120c6e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8120c72:	492e      	ldr	r1, [pc, #184]	@ (8120d2c <udp_sendto_if+0xd4>)
 8120c74:	482e      	ldr	r0, [pc, #184]	@ (8120d30 <udp_sendto_if+0xd8>)
 8120c76:	f001 faf5 	bl	8122264 <iprintf>
 8120c7a:	f06f 030f 	mvn.w	r3, #15
 8120c7e:	e04f      	b.n	8120d20 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8120c80:	68bb      	ldr	r3, [r7, #8]
 8120c82:	2b00      	cmp	r3, #0
 8120c84:	d109      	bne.n	8120c9a <udp_sendto_if+0x42>
 8120c86:	4b28      	ldr	r3, [pc, #160]	@ (8120d28 <udp_sendto_if+0xd0>)
 8120c88:	f240 2281 	movw	r2, #641	@ 0x281
 8120c8c:	4929      	ldr	r1, [pc, #164]	@ (8120d34 <udp_sendto_if+0xdc>)
 8120c8e:	4828      	ldr	r0, [pc, #160]	@ (8120d30 <udp_sendto_if+0xd8>)
 8120c90:	f001 fae8 	bl	8122264 <iprintf>
 8120c94:	f06f 030f 	mvn.w	r3, #15
 8120c98:	e042      	b.n	8120d20 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8120c9a:	687b      	ldr	r3, [r7, #4]
 8120c9c:	2b00      	cmp	r3, #0
 8120c9e:	d109      	bne.n	8120cb4 <udp_sendto_if+0x5c>
 8120ca0:	4b21      	ldr	r3, [pc, #132]	@ (8120d28 <udp_sendto_if+0xd0>)
 8120ca2:	f240 2282 	movw	r2, #642	@ 0x282
 8120ca6:	4924      	ldr	r1, [pc, #144]	@ (8120d38 <udp_sendto_if+0xe0>)
 8120ca8:	4821      	ldr	r0, [pc, #132]	@ (8120d30 <udp_sendto_if+0xd8>)
 8120caa:	f001 fadb 	bl	8122264 <iprintf>
 8120cae:	f06f 030f 	mvn.w	r3, #15
 8120cb2:	e035      	b.n	8120d20 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8120cb4:	6a3b      	ldr	r3, [r7, #32]
 8120cb6:	2b00      	cmp	r3, #0
 8120cb8:	d109      	bne.n	8120cce <udp_sendto_if+0x76>
 8120cba:	4b1b      	ldr	r3, [pc, #108]	@ (8120d28 <udp_sendto_if+0xd0>)
 8120cbc:	f240 2283 	movw	r2, #643	@ 0x283
 8120cc0:	491e      	ldr	r1, [pc, #120]	@ (8120d3c <udp_sendto_if+0xe4>)
 8120cc2:	481b      	ldr	r0, [pc, #108]	@ (8120d30 <udp_sendto_if+0xd8>)
 8120cc4:	f001 face 	bl	8122264 <iprintf>
 8120cc8:	f06f 030f 	mvn.w	r3, #15
 8120ccc:	e028      	b.n	8120d20 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8120cce:	68fb      	ldr	r3, [r7, #12]
 8120cd0:	2b00      	cmp	r3, #0
 8120cd2:	d009      	beq.n	8120ce8 <udp_sendto_if+0x90>
 8120cd4:	68fb      	ldr	r3, [r7, #12]
 8120cd6:	681b      	ldr	r3, [r3, #0]
 8120cd8:	2b00      	cmp	r3, #0
 8120cda:	d005      	beq.n	8120ce8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8120cdc:	68fb      	ldr	r3, [r7, #12]
 8120cde:	681b      	ldr	r3, [r3, #0]
 8120ce0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8120ce4:	2be0      	cmp	r3, #224	@ 0xe0
 8120ce6:	d103      	bne.n	8120cf0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8120ce8:	6a3b      	ldr	r3, [r7, #32]
 8120cea:	3304      	adds	r3, #4
 8120cec:	617b      	str	r3, [r7, #20]
 8120cee:	e00b      	b.n	8120d08 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8120cf0:	68fb      	ldr	r3, [r7, #12]
 8120cf2:	681a      	ldr	r2, [r3, #0]
 8120cf4:	6a3b      	ldr	r3, [r7, #32]
 8120cf6:	3304      	adds	r3, #4
 8120cf8:	681b      	ldr	r3, [r3, #0]
 8120cfa:	429a      	cmp	r2, r3
 8120cfc:	d002      	beq.n	8120d04 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8120cfe:	f06f 0303 	mvn.w	r3, #3
 8120d02:	e00d      	b.n	8120d20 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8120d04:	68fb      	ldr	r3, [r7, #12]
 8120d06:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8120d08:	887a      	ldrh	r2, [r7, #2]
 8120d0a:	697b      	ldr	r3, [r7, #20]
 8120d0c:	9301      	str	r3, [sp, #4]
 8120d0e:	6a3b      	ldr	r3, [r7, #32]
 8120d10:	9300      	str	r3, [sp, #0]
 8120d12:	4613      	mov	r3, r2
 8120d14:	687a      	ldr	r2, [r7, #4]
 8120d16:	68b9      	ldr	r1, [r7, #8]
 8120d18:	68f8      	ldr	r0, [r7, #12]
 8120d1a:	f000 f811 	bl	8120d40 <udp_sendto_if_src>
 8120d1e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8120d20:	4618      	mov	r0, r3
 8120d22:	3718      	adds	r7, #24
 8120d24:	46bd      	mov	sp, r7
 8120d26:	bd80      	pop	{r7, pc}
 8120d28:	08128148 	.word	0x08128148
 8120d2c:	081283f4 	.word	0x081283f4
 8120d30:	081281dc 	.word	0x081281dc
 8120d34:	08128410 	.word	0x08128410
 8120d38:	0812842c 	.word	0x0812842c
 8120d3c:	0812844c 	.word	0x0812844c

08120d40 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8120d40:	b580      	push	{r7, lr}
 8120d42:	b08c      	sub	sp, #48	@ 0x30
 8120d44:	af04      	add	r7, sp, #16
 8120d46:	60f8      	str	r0, [r7, #12]
 8120d48:	60b9      	str	r1, [r7, #8]
 8120d4a:	607a      	str	r2, [r7, #4]
 8120d4c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8120d4e:	68fb      	ldr	r3, [r7, #12]
 8120d50:	2b00      	cmp	r3, #0
 8120d52:	d109      	bne.n	8120d68 <udp_sendto_if_src+0x28>
 8120d54:	4b87      	ldr	r3, [pc, #540]	@ (8120f74 <udp_sendto_if_src+0x234>)
 8120d56:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8120d5a:	4987      	ldr	r1, [pc, #540]	@ (8120f78 <udp_sendto_if_src+0x238>)
 8120d5c:	4887      	ldr	r0, [pc, #540]	@ (8120f7c <udp_sendto_if_src+0x23c>)
 8120d5e:	f001 fa81 	bl	8122264 <iprintf>
 8120d62:	f06f 030f 	mvn.w	r3, #15
 8120d66:	e101      	b.n	8120f6c <udp_sendto_if_src+0x22c>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8120d68:	68bb      	ldr	r3, [r7, #8]
 8120d6a:	2b00      	cmp	r3, #0
 8120d6c:	d109      	bne.n	8120d82 <udp_sendto_if_src+0x42>
 8120d6e:	4b81      	ldr	r3, [pc, #516]	@ (8120f74 <udp_sendto_if_src+0x234>)
 8120d70:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8120d74:	4982      	ldr	r1, [pc, #520]	@ (8120f80 <udp_sendto_if_src+0x240>)
 8120d76:	4881      	ldr	r0, [pc, #516]	@ (8120f7c <udp_sendto_if_src+0x23c>)
 8120d78:	f001 fa74 	bl	8122264 <iprintf>
 8120d7c:	f06f 030f 	mvn.w	r3, #15
 8120d80:	e0f4      	b.n	8120f6c <udp_sendto_if_src+0x22c>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8120d82:	687b      	ldr	r3, [r7, #4]
 8120d84:	2b00      	cmp	r3, #0
 8120d86:	d109      	bne.n	8120d9c <udp_sendto_if_src+0x5c>
 8120d88:	4b7a      	ldr	r3, [pc, #488]	@ (8120f74 <udp_sendto_if_src+0x234>)
 8120d8a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8120d8e:	497d      	ldr	r1, [pc, #500]	@ (8120f84 <udp_sendto_if_src+0x244>)
 8120d90:	487a      	ldr	r0, [pc, #488]	@ (8120f7c <udp_sendto_if_src+0x23c>)
 8120d92:	f001 fa67 	bl	8122264 <iprintf>
 8120d96:	f06f 030f 	mvn.w	r3, #15
 8120d9a:	e0e7      	b.n	8120f6c <udp_sendto_if_src+0x22c>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8120d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8120d9e:	2b00      	cmp	r3, #0
 8120da0:	d109      	bne.n	8120db6 <udp_sendto_if_src+0x76>
 8120da2:	4b74      	ldr	r3, [pc, #464]	@ (8120f74 <udp_sendto_if_src+0x234>)
 8120da4:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8120da8:	4977      	ldr	r1, [pc, #476]	@ (8120f88 <udp_sendto_if_src+0x248>)
 8120daa:	4874      	ldr	r0, [pc, #464]	@ (8120f7c <udp_sendto_if_src+0x23c>)
 8120dac:	f001 fa5a 	bl	8122264 <iprintf>
 8120db0:	f06f 030f 	mvn.w	r3, #15
 8120db4:	e0da      	b.n	8120f6c <udp_sendto_if_src+0x22c>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8120db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8120db8:	2b00      	cmp	r3, #0
 8120dba:	d109      	bne.n	8120dd0 <udp_sendto_if_src+0x90>
 8120dbc:	4b6d      	ldr	r3, [pc, #436]	@ (8120f74 <udp_sendto_if_src+0x234>)
 8120dbe:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8120dc2:	4972      	ldr	r1, [pc, #456]	@ (8120f8c <udp_sendto_if_src+0x24c>)
 8120dc4:	486d      	ldr	r0, [pc, #436]	@ (8120f7c <udp_sendto_if_src+0x23c>)
 8120dc6:	f001 fa4d 	bl	8122264 <iprintf>
 8120dca:	f06f 030f 	mvn.w	r3, #15
 8120dce:	e0cd      	b.n	8120f6c <udp_sendto_if_src+0x22c>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8120dd0:	68fb      	ldr	r3, [r7, #12]
 8120dd2:	8a5b      	ldrh	r3, [r3, #18]
 8120dd4:	2b00      	cmp	r3, #0
 8120dd6:	d11b      	bne.n	8120e10 <udp_sendto_if_src+0xd0>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
 8120dd8:	486d      	ldr	r0, [pc, #436]	@ (8120f90 <udp_sendto_if_src+0x250>)
 8120dda:	f001 fab3 	bl	8122344 <puts>
 8120dde:	200d      	movs	r0, #13
 8120de0:	f001 fa52 	bl	8122288 <putchar>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8120de4:	68f9      	ldr	r1, [r7, #12]
 8120de6:	68fb      	ldr	r3, [r7, #12]
 8120de8:	8a5b      	ldrh	r3, [r3, #18]
 8120dea:	461a      	mov	r2, r3
 8120dec:	68f8      	ldr	r0, [r7, #12]
 8120dee:	f000 f8e3 	bl	8120fb8 <udp_bind>
 8120df2:	4603      	mov	r3, r0
 8120df4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8120df6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8120dfa:	2b00      	cmp	r3, #0
 8120dfc:	d008      	beq.n	8120e10 <udp_sendto_if_src+0xd0>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
 8120dfe:	4865      	ldr	r0, [pc, #404]	@ (8120f94 <udp_sendto_if_src+0x254>)
 8120e00:	f001 faa0 	bl	8122344 <puts>
 8120e04:	200d      	movs	r0, #13
 8120e06:	f001 fa3f 	bl	8122288 <putchar>
      return err;
 8120e0a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8120e0e:	e0ad      	b.n	8120f6c <udp_sendto_if_src+0x22c>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8120e10:	68bb      	ldr	r3, [r7, #8]
 8120e12:	891b      	ldrh	r3, [r3, #8]
 8120e14:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8120e18:	4293      	cmp	r3, r2
 8120e1a:	d902      	bls.n	8120e22 <udp_sendto_if_src+0xe2>
    return ERR_MEM;
 8120e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8120e20:	e0a4      	b.n	8120f6c <udp_sendto_if_src+0x22c>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8120e22:	2108      	movs	r1, #8
 8120e24:	68b8      	ldr	r0, [r7, #8]
 8120e26:	f7f8 f913 	bl	8119050 <pbuf_add_header>
 8120e2a:	4603      	mov	r3, r0
 8120e2c:	2b00      	cmp	r3, #0
 8120e2e:	d023      	beq.n	8120e78 <udp_sendto_if_src+0x138>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8120e30:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8120e34:	2108      	movs	r1, #8
 8120e36:	2022      	movs	r0, #34	@ 0x22
 8120e38:	f7f7 febc 	bl	8118bb4 <pbuf_alloc>
 8120e3c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8120e3e:	69fb      	ldr	r3, [r7, #28]
 8120e40:	2b00      	cmp	r3, #0
 8120e42:	d108      	bne.n	8120e56 <udp_sendto_if_src+0x116>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
 8120e44:	4854      	ldr	r0, [pc, #336]	@ (8120f98 <udp_sendto_if_src+0x258>)
 8120e46:	f001 fa7d 	bl	8122344 <puts>
 8120e4a:	200d      	movs	r0, #13
 8120e4c:	f001 fa1c 	bl	8122288 <putchar>
      return ERR_MEM;
 8120e50:	f04f 33ff 	mov.w	r3, #4294967295
 8120e54:	e08a      	b.n	8120f6c <udp_sendto_if_src+0x22c>
    }
    if (p->tot_len != 0) {
 8120e56:	68bb      	ldr	r3, [r7, #8]
 8120e58:	891b      	ldrh	r3, [r3, #8]
 8120e5a:	2b00      	cmp	r3, #0
 8120e5c:	d003      	beq.n	8120e66 <udp_sendto_if_src+0x126>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8120e5e:	68b9      	ldr	r1, [r7, #8]
 8120e60:	69f8      	ldr	r0, [r7, #28]
 8120e62:	f7f8 faaf 	bl	81193c4 <pbuf_chain>
    }
    /* first pbuf q points to header pbuf */
    LWIP_DEBUGF(UDP_DEBUG,
 8120e66:	68ba      	ldr	r2, [r7, #8]
 8120e68:	69f9      	ldr	r1, [r7, #28]
 8120e6a:	484c      	ldr	r0, [pc, #304]	@ (8120f9c <udp_sendto_if_src+0x25c>)
 8120e6c:	f001 f9fa 	bl	8122264 <iprintf>
 8120e70:	200d      	movs	r0, #13
 8120e72:	f001 fa09 	bl	8122288 <putchar>
 8120e76:	e008      	b.n	8120e8a <udp_sendto_if_src+0x14a>
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8120e78:	68bb      	ldr	r3, [r7, #8]
 8120e7a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
 8120e7c:	68b9      	ldr	r1, [r7, #8]
 8120e7e:	4848      	ldr	r0, [pc, #288]	@ (8120fa0 <udp_sendto_if_src+0x260>)
 8120e80:	f001 f9f0 	bl	8122264 <iprintf>
 8120e84:	200d      	movs	r0, #13
 8120e86:	f001 f9ff 	bl	8122288 <putchar>
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8120e8a:	69fb      	ldr	r3, [r7, #28]
 8120e8c:	895b      	ldrh	r3, [r3, #10]
 8120e8e:	2b07      	cmp	r3, #7
 8120e90:	d806      	bhi.n	8120ea0 <udp_sendto_if_src+0x160>
 8120e92:	4b38      	ldr	r3, [pc, #224]	@ (8120f74 <udp_sendto_if_src+0x234>)
 8120e94:	f240 320d 	movw	r2, #781	@ 0x30d
 8120e98:	4942      	ldr	r1, [pc, #264]	@ (8120fa4 <udp_sendto_if_src+0x264>)
 8120e9a:	4838      	ldr	r0, [pc, #224]	@ (8120f7c <udp_sendto_if_src+0x23c>)
 8120e9c:	f001 f9e2 	bl	8122264 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8120ea0:	69fb      	ldr	r3, [r7, #28]
 8120ea2:	685b      	ldr	r3, [r3, #4]
 8120ea4:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8120ea6:	68fb      	ldr	r3, [r7, #12]
 8120ea8:	8a5b      	ldrh	r3, [r3, #18]
 8120eaa:	4618      	mov	r0, r3
 8120eac:	f7f3 f9c6 	bl	811423c <lwip_htons>
 8120eb0:	4603      	mov	r3, r0
 8120eb2:	461a      	mov	r2, r3
 8120eb4:	697b      	ldr	r3, [r7, #20]
 8120eb6:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8120eb8:	887b      	ldrh	r3, [r7, #2]
 8120eba:	4618      	mov	r0, r3
 8120ebc:	f7f3 f9be 	bl	811423c <lwip_htons>
 8120ec0:	4603      	mov	r3, r0
 8120ec2:	461a      	mov	r2, r3
 8120ec4:	697b      	ldr	r3, [r7, #20]
 8120ec6:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8120ec8:	697b      	ldr	r3, [r7, #20]
 8120eca:	2200      	movs	r2, #0
 8120ecc:	719a      	strb	r2, [r3, #6]
 8120ece:	2200      	movs	r2, #0
 8120ed0:	71da      	strb	r2, [r3, #7]
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
    q->flags |= PBUF_FLAG_MCASTLOOP;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: sending datagram of length %"U16_F"\n", q->tot_len));
 8120ed2:	69fb      	ldr	r3, [r7, #28]
 8120ed4:	891b      	ldrh	r3, [r3, #8]
 8120ed6:	4619      	mov	r1, r3
 8120ed8:	4833      	ldr	r0, [pc, #204]	@ (8120fa8 <udp_sendto_if_src+0x268>)
 8120eda:	f001 f9c3 	bl	8122264 <iprintf>
 8120ede:	200d      	movs	r0, #13
 8120ee0:	f001 f9d2 	bl	8122288 <putchar>

    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
 8120ee4:	69fb      	ldr	r3, [r7, #28]
 8120ee6:	891b      	ldrh	r3, [r3, #8]
 8120ee8:	4619      	mov	r1, r3
 8120eea:	4830      	ldr	r0, [pc, #192]	@ (8120fac <udp_sendto_if_src+0x26c>)
 8120eec:	f001 f9ba 	bl	8122264 <iprintf>
 8120ef0:	200d      	movs	r0, #13
 8120ef2:	f001 f9c9 	bl	8122288 <putchar>
    udphdr->len = lwip_htons(q->tot_len);
 8120ef6:	69fb      	ldr	r3, [r7, #28]
 8120ef8:	891b      	ldrh	r3, [r3, #8]
 8120efa:	4618      	mov	r0, r3
 8120efc:	f7f3 f99e 	bl	811423c <lwip_htons>
 8120f00:	4603      	mov	r3, r0
 8120f02:	461a      	mov	r2, r3
 8120f04:	697b      	ldr	r3, [r7, #20]
 8120f06:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8120f08:	2311      	movs	r3, #17
 8120f0a:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8120f0c:	68fb      	ldr	r3, [r7, #12]
 8120f0e:	7adb      	ldrb	r3, [r3, #11]
 8120f10:	74bb      	strb	r3, [r7, #18]
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
 8120f12:	697b      	ldr	r3, [r7, #20]
 8120f14:	88db      	ldrh	r3, [r3, #6]
 8120f16:	b29b      	uxth	r3, r3
 8120f18:	4619      	mov	r1, r3
 8120f1a:	4825      	ldr	r0, [pc, #148]	@ (8120fb0 <udp_sendto_if_src+0x270>)
 8120f1c:	f001 f9a2 	bl	8122264 <iprintf>
 8120f20:	200d      	movs	r0, #13
 8120f22:	f001 f9b1 	bl	8122288 <putchar>
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
 8120f26:	7cfb      	ldrb	r3, [r7, #19]
 8120f28:	4619      	mov	r1, r3
 8120f2a:	4822      	ldr	r0, [pc, #136]	@ (8120fb4 <udp_sendto_if_src+0x274>)
 8120f2c:	f001 f99a 	bl	8122264 <iprintf>
 8120f30:	200d      	movs	r0, #13
 8120f32:	f001 f9a9 	bl	8122288 <putchar>
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8120f36:	68fb      	ldr	r3, [r7, #12]
 8120f38:	7a9b      	ldrb	r3, [r3, #10]
 8120f3a:	7cb9      	ldrb	r1, [r7, #18]
 8120f3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8120f3e:	9202      	str	r2, [sp, #8]
 8120f40:	7cfa      	ldrb	r2, [r7, #19]
 8120f42:	9201      	str	r2, [sp, #4]
 8120f44:	9300      	str	r3, [sp, #0]
 8120f46:	460b      	mov	r3, r1
 8120f48:	687a      	ldr	r2, [r7, #4]
 8120f4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8120f4c:	69f8      	ldr	r0, [r7, #28]
 8120f4e:	f7f5 fa61 	bl	8116414 <ip4_output_if_src>
 8120f52:	4603      	mov	r3, r0
 8120f54:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8120f56:	69fa      	ldr	r2, [r7, #28]
 8120f58:	68bb      	ldr	r3, [r7, #8]
 8120f5a:	429a      	cmp	r2, r3
 8120f5c:	d004      	beq.n	8120f68 <udp_sendto_if_src+0x228>
    /* free the header pbuf */
    pbuf_free(q);
 8120f5e:	69f8      	ldr	r0, [r7, #28]
 8120f60:	f7f8 f90c 	bl	811917c <pbuf_free>
    q = NULL;
 8120f64:	2300      	movs	r3, #0
 8120f66:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8120f68:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8120f6c:	4618      	mov	r0, r3
 8120f6e:	3720      	adds	r7, #32
 8120f70:	46bd      	mov	sp, r7
 8120f72:	bd80      	pop	{r7, pc}
 8120f74:	08128148 	.word	0x08128148
 8120f78:	0812846c 	.word	0x0812846c
 8120f7c:	081281dc 	.word	0x081281dc
 8120f80:	0812848c 	.word	0x0812848c
 8120f84:	081284ac 	.word	0x081284ac
 8120f88:	081284d0 	.word	0x081284d0
 8120f8c:	081284f4 	.word	0x081284f4
 8120f90:	08128518 	.word	0x08128518
 8120f94:	08128548 	.word	0x08128548
 8120f98:	0812856c 	.word	0x0812856c
 8120f9c:	08128590 	.word	0x08128590
 8120fa0:	081285c8 	.word	0x081285c8
 8120fa4:	081285f4 	.word	0x081285f4
 8120fa8:	08128624 	.word	0x08128624
 8120fac:	08128650 	.word	0x08128650
 8120fb0:	08128674 	.word	0x08128674
 8120fb4:	08128694 	.word	0x08128694

08120fb8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8120fb8:	b580      	push	{r7, lr}
 8120fba:	b088      	sub	sp, #32
 8120fbc:	af02      	add	r7, sp, #8
 8120fbe:	60f8      	str	r0, [r7, #12]
 8120fc0:	60b9      	str	r1, [r7, #8]
 8120fc2:	4613      	mov	r3, r2
 8120fc4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8120fc6:	68bb      	ldr	r3, [r7, #8]
 8120fc8:	2b00      	cmp	r3, #0
 8120fca:	d101      	bne.n	8120fd0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8120fcc:	4b71      	ldr	r3, [pc, #452]	@ (8121194 <udp_bind+0x1dc>)
 8120fce:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8120fd0:	68fb      	ldr	r3, [r7, #12]
 8120fd2:	2b00      	cmp	r3, #0
 8120fd4:	d109      	bne.n	8120fea <udp_bind+0x32>
 8120fd6:	4b70      	ldr	r3, [pc, #448]	@ (8121198 <udp_bind+0x1e0>)
 8120fd8:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8120fdc:	496f      	ldr	r1, [pc, #444]	@ (812119c <udp_bind+0x1e4>)
 8120fde:	4870      	ldr	r0, [pc, #448]	@ (81211a0 <udp_bind+0x1e8>)
 8120fe0:	f001 f940 	bl	8122264 <iprintf>
 8120fe4:	f06f 030f 	mvn.w	r3, #15
 8120fe8:	e0cf      	b.n	812118a <udp_bind+0x1d2>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
 8120fea:	486e      	ldr	r0, [pc, #440]	@ (81211a4 <udp_bind+0x1ec>)
 8120fec:	f001 f93a 	bl	8122264 <iprintf>
 8120ff0:	200d      	movs	r0, #13
 8120ff2:	f001 f949 	bl	8122288 <putchar>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
 8120ff6:	68bb      	ldr	r3, [r7, #8]
 8120ff8:	2b00      	cmp	r3, #0
 8120ffa:	d003      	beq.n	8121004 <udp_bind+0x4c>
 8120ffc:	68bb      	ldr	r3, [r7, #8]
 8120ffe:	781b      	ldrb	r3, [r3, #0]
 8121000:	4619      	mov	r1, r3
 8121002:	e000      	b.n	8121006 <udp_bind+0x4e>
 8121004:	2100      	movs	r1, #0
 8121006:	68bb      	ldr	r3, [r7, #8]
 8121008:	2b00      	cmp	r3, #0
 812100a:	d004      	beq.n	8121016 <udp_bind+0x5e>
 812100c:	68bb      	ldr	r3, [r7, #8]
 812100e:	3301      	adds	r3, #1
 8121010:	781b      	ldrb	r3, [r3, #0]
 8121012:	461a      	mov	r2, r3
 8121014:	e000      	b.n	8121018 <udp_bind+0x60>
 8121016:	2200      	movs	r2, #0
 8121018:	68bb      	ldr	r3, [r7, #8]
 812101a:	2b00      	cmp	r3, #0
 812101c:	d004      	beq.n	8121028 <udp_bind+0x70>
 812101e:	68bb      	ldr	r3, [r7, #8]
 8121020:	3302      	adds	r3, #2
 8121022:	781b      	ldrb	r3, [r3, #0]
 8121024:	4618      	mov	r0, r3
 8121026:	e000      	b.n	812102a <udp_bind+0x72>
 8121028:	2000      	movs	r0, #0
 812102a:	68bb      	ldr	r3, [r7, #8]
 812102c:	2b00      	cmp	r3, #0
 812102e:	d003      	beq.n	8121038 <udp_bind+0x80>
 8121030:	68bb      	ldr	r3, [r7, #8]
 8121032:	3303      	adds	r3, #3
 8121034:	781b      	ldrb	r3, [r3, #0]
 8121036:	e000      	b.n	812103a <udp_bind+0x82>
 8121038:	2300      	movs	r3, #0
 812103a:	9300      	str	r3, [sp, #0]
 812103c:	4603      	mov	r3, r0
 812103e:	485a      	ldr	r0, [pc, #360]	@ (81211a8 <udp_bind+0x1f0>)
 8121040:	f001 f910 	bl	8122264 <iprintf>
 8121044:	200d      	movs	r0, #13
 8121046:	f001 f91f 	bl	8122288 <putchar>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));
 812104a:	88fb      	ldrh	r3, [r7, #6]
 812104c:	4619      	mov	r1, r3
 812104e:	4857      	ldr	r0, [pc, #348]	@ (81211ac <udp_bind+0x1f4>)
 8121050:	f001 f908 	bl	8122264 <iprintf>
 8121054:	200d      	movs	r0, #13
 8121056:	f001 f917 	bl	8122288 <putchar>

  rebind = 0;
 812105a:	2300      	movs	r3, #0
 812105c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 812105e:	4b54      	ldr	r3, [pc, #336]	@ (81211b0 <udp_bind+0x1f8>)
 8121060:	681b      	ldr	r3, [r3, #0]
 8121062:	617b      	str	r3, [r7, #20]
 8121064:	e009      	b.n	812107a <udp_bind+0xc2>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8121066:	68fa      	ldr	r2, [r7, #12]
 8121068:	697b      	ldr	r3, [r7, #20]
 812106a:	429a      	cmp	r2, r3
 812106c:	d102      	bne.n	8121074 <udp_bind+0xbc>
      rebind = 1;
 812106e:	2301      	movs	r3, #1
 8121070:	74fb      	strb	r3, [r7, #19]
      break;
 8121072:	e005      	b.n	8121080 <udp_bind+0xc8>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8121074:	697b      	ldr	r3, [r7, #20]
 8121076:	68db      	ldr	r3, [r3, #12]
 8121078:	617b      	str	r3, [r7, #20]
 812107a:	697b      	ldr	r3, [r7, #20]
 812107c:	2b00      	cmp	r3, #0
 812107e:	d1f2      	bne.n	8121066 <udp_bind+0xae>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8121080:	88fb      	ldrh	r3, [r7, #6]
 8121082:	2b00      	cmp	r3, #0
 8121084:	d10f      	bne.n	81210a6 <udp_bind+0xee>
    port = udp_new_port();
 8121086:	f7ff fabb 	bl	8120600 <udp_new_port>
 812108a:	4603      	mov	r3, r0
 812108c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 812108e:	88fb      	ldrh	r3, [r7, #6]
 8121090:	2b00      	cmp	r3, #0
 8121092:	d13a      	bne.n	812110a <udp_bind+0x152>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
 8121094:	4847      	ldr	r0, [pc, #284]	@ (81211b4 <udp_bind+0x1fc>)
 8121096:	f001 f955 	bl	8122344 <puts>
 812109a:	200d      	movs	r0, #13
 812109c:	f001 f8f4 	bl	8122288 <putchar>
      return ERR_USE;
 81210a0:	f06f 0307 	mvn.w	r3, #7
 81210a4:	e071      	b.n	812118a <udp_bind+0x1d2>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 81210a6:	4b42      	ldr	r3, [pc, #264]	@ (81211b0 <udp_bind+0x1f8>)
 81210a8:	681b      	ldr	r3, [r3, #0]
 81210aa:	617b      	str	r3, [r7, #20]
 81210ac:	e02a      	b.n	8121104 <udp_bind+0x14c>
      if (pcb != ipcb) {
 81210ae:	68fa      	ldr	r2, [r7, #12]
 81210b0:	697b      	ldr	r3, [r7, #20]
 81210b2:	429a      	cmp	r2, r3
 81210b4:	d023      	beq.n	81210fe <udp_bind+0x146>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 81210b6:	697b      	ldr	r3, [r7, #20]
 81210b8:	8a5b      	ldrh	r3, [r3, #18]
 81210ba:	88fa      	ldrh	r2, [r7, #6]
 81210bc:	429a      	cmp	r2, r3
 81210be:	d11e      	bne.n	81210fe <udp_bind+0x146>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 81210c0:	697b      	ldr	r3, [r7, #20]
 81210c2:	681a      	ldr	r2, [r3, #0]
 81210c4:	68bb      	ldr	r3, [r7, #8]
 81210c6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 81210c8:	429a      	cmp	r2, r3
 81210ca:	d00d      	beq.n	81210e8 <udp_bind+0x130>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 81210cc:	68bb      	ldr	r3, [r7, #8]
 81210ce:	2b00      	cmp	r3, #0
 81210d0:	d00a      	beq.n	81210e8 <udp_bind+0x130>
 81210d2:	68bb      	ldr	r3, [r7, #8]
 81210d4:	681b      	ldr	r3, [r3, #0]
 81210d6:	2b00      	cmp	r3, #0
 81210d8:	d006      	beq.n	81210e8 <udp_bind+0x130>
              ip_addr_isany(&ipcb->local_ip))) {
 81210da:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 81210dc:	2b00      	cmp	r3, #0
 81210de:	d003      	beq.n	81210e8 <udp_bind+0x130>
              ip_addr_isany(&ipcb->local_ip))) {
 81210e0:	697b      	ldr	r3, [r7, #20]
 81210e2:	681b      	ldr	r3, [r3, #0]
 81210e4:	2b00      	cmp	r3, #0
 81210e6:	d10a      	bne.n	81210fe <udp_bind+0x146>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
 81210e8:	88fb      	ldrh	r3, [r7, #6]
 81210ea:	4619      	mov	r1, r3
 81210ec:	4832      	ldr	r0, [pc, #200]	@ (81211b8 <udp_bind+0x200>)
 81210ee:	f001 f8b9 	bl	8122264 <iprintf>
 81210f2:	200d      	movs	r0, #13
 81210f4:	f001 f8c8 	bl	8122288 <putchar>
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 81210f8:	f06f 0307 	mvn.w	r3, #7
 81210fc:	e045      	b.n	812118a <udp_bind+0x1d2>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 81210fe:	697b      	ldr	r3, [r7, #20]
 8121100:	68db      	ldr	r3, [r3, #12]
 8121102:	617b      	str	r3, [r7, #20]
 8121104:	697b      	ldr	r3, [r7, #20]
 8121106:	2b00      	cmp	r3, #0
 8121108:	d1d1      	bne.n	81210ae <udp_bind+0xf6>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 812110a:	68bb      	ldr	r3, [r7, #8]
 812110c:	2b00      	cmp	r3, #0
 812110e:	d002      	beq.n	8121116 <udp_bind+0x15e>
 8121110:	68bb      	ldr	r3, [r7, #8]
 8121112:	681b      	ldr	r3, [r3, #0]
 8121114:	e000      	b.n	8121118 <udp_bind+0x160>
 8121116:	2300      	movs	r3, #0
 8121118:	68fa      	ldr	r2, [r7, #12]
 812111a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 812111c:	68fb      	ldr	r3, [r7, #12]
 812111e:	88fa      	ldrh	r2, [r7, #6]
 8121120:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8121122:	7cfb      	ldrb	r3, [r7, #19]
 8121124:	2b00      	cmp	r3, #0
 8121126:	d106      	bne.n	8121136 <udp_bind+0x17e>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8121128:	4b21      	ldr	r3, [pc, #132]	@ (81211b0 <udp_bind+0x1f8>)
 812112a:	681a      	ldr	r2, [r3, #0]
 812112c:	68fb      	ldr	r3, [r7, #12]
 812112e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8121130:	4a1f      	ldr	r2, [pc, #124]	@ (81211b0 <udp_bind+0x1f8>)
 8121132:	68fb      	ldr	r3, [r7, #12]
 8121134:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
 8121136:	4821      	ldr	r0, [pc, #132]	@ (81211bc <udp_bind+0x204>)
 8121138:	f001 f894 	bl	8122264 <iprintf>
 812113c:	200d      	movs	r0, #13
 812113e:	f001 f8a3 	bl	8122288 <putchar>
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
 8121142:	68fb      	ldr	r3, [r7, #12]
 8121144:	681b      	ldr	r3, [r3, #0]
 8121146:	b2db      	uxtb	r3, r3
 8121148:	4619      	mov	r1, r3
 812114a:	68fb      	ldr	r3, [r7, #12]
 812114c:	681b      	ldr	r3, [r3, #0]
 812114e:	0a1b      	lsrs	r3, r3, #8
 8121150:	b2db      	uxtb	r3, r3
 8121152:	461a      	mov	r2, r3
 8121154:	68fb      	ldr	r3, [r7, #12]
 8121156:	681b      	ldr	r3, [r3, #0]
 8121158:	0c1b      	lsrs	r3, r3, #16
 812115a:	b2db      	uxtb	r3, r3
 812115c:	4618      	mov	r0, r3
 812115e:	68fb      	ldr	r3, [r7, #12]
 8121160:	681b      	ldr	r3, [r3, #0]
 8121162:	0e1b      	lsrs	r3, r3, #24
 8121164:	b2db      	uxtb	r3, r3
 8121166:	9300      	str	r3, [sp, #0]
 8121168:	4603      	mov	r3, r0
 812116a:	480f      	ldr	r0, [pc, #60]	@ (81211a8 <udp_bind+0x1f0>)
 812116c:	f001 f87a 	bl	8122264 <iprintf>
 8121170:	200d      	movs	r0, #13
 8121172:	f001 f889 	bl	8122288 <putchar>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
 8121176:	68fb      	ldr	r3, [r7, #12]
 8121178:	8a5b      	ldrh	r3, [r3, #18]
 812117a:	4619      	mov	r1, r3
 812117c:	4810      	ldr	r0, [pc, #64]	@ (81211c0 <udp_bind+0x208>)
 812117e:	f001 f871 	bl	8122264 <iprintf>
 8121182:	200d      	movs	r0, #13
 8121184:	f001 f880 	bl	8122288 <putchar>
  return ERR_OK;
 8121188:	2300      	movs	r3, #0
}
 812118a:	4618      	mov	r0, r3
 812118c:	3718      	adds	r7, #24
 812118e:	46bd      	mov	sp, r7
 8121190:	bd80      	pop	{r7, pc}
 8121192:	bf00      	nop
 8121194:	081289b8 	.word	0x081289b8
 8121198:	08128148 	.word	0x08128148
 812119c:	081286bc 	.word	0x081286bc
 81211a0:	081281dc 	.word	0x081281dc
 81211a4:	081286d4 	.word	0x081286d4
 81211a8:	081282cc 	.word	0x081282cc
 81211ac:	081286e8 	.word	0x081286e8
 81211b0:	10011ec8 	.word	0x10011ec8
 81211b4:	081286f8 	.word	0x081286f8
 81211b8:	08128718 	.word	0x08128718
 81211bc:	08128750 	.word	0x08128750
 81211c0:	08128764 	.word	0x08128764

081211c4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 81211c4:	b580      	push	{r7, lr}
 81211c6:	b084      	sub	sp, #16
 81211c8:	af00      	add	r7, sp, #0
 81211ca:	60f8      	str	r0, [r7, #12]
 81211cc:	60b9      	str	r1, [r7, #8]
 81211ce:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 81211d0:	68fb      	ldr	r3, [r7, #12]
 81211d2:	2b00      	cmp	r3, #0
 81211d4:	d107      	bne.n	81211e6 <udp_recv+0x22>
 81211d6:	4b08      	ldr	r3, [pc, #32]	@ (81211f8 <udp_recv+0x34>)
 81211d8:	f240 428a 	movw	r2, #1162	@ 0x48a
 81211dc:	4907      	ldr	r1, [pc, #28]	@ (81211fc <udp_recv+0x38>)
 81211de:	4808      	ldr	r0, [pc, #32]	@ (8121200 <udp_recv+0x3c>)
 81211e0:	f001 f840 	bl	8122264 <iprintf>
 81211e4:	e005      	b.n	81211f2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 81211e6:	68fb      	ldr	r3, [r7, #12]
 81211e8:	68ba      	ldr	r2, [r7, #8]
 81211ea:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 81211ec:	68fb      	ldr	r3, [r7, #12]
 81211ee:	687a      	ldr	r2, [r7, #4]
 81211f0:	61da      	str	r2, [r3, #28]
}
 81211f2:	3710      	adds	r7, #16
 81211f4:	46bd      	mov	sp, r7
 81211f6:	bd80      	pop	{r7, pc}
 81211f8:	08128148 	.word	0x08128148
 81211fc:	081287e4 	.word	0x081287e4
 8121200:	081281dc 	.word	0x081281dc

08121204 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8121204:	b580      	push	{r7, lr}
 8121206:	b084      	sub	sp, #16
 8121208:	af00      	add	r7, sp, #0
 812120a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 812120c:	687b      	ldr	r3, [r7, #4]
 812120e:	2b00      	cmp	r3, #0
 8121210:	d107      	bne.n	8121222 <udp_remove+0x1e>
 8121212:	4b19      	ldr	r3, [pc, #100]	@ (8121278 <udp_remove+0x74>)
 8121214:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8121218:	4918      	ldr	r1, [pc, #96]	@ (812127c <udp_remove+0x78>)
 812121a:	4819      	ldr	r0, [pc, #100]	@ (8121280 <udp_remove+0x7c>)
 812121c:	f001 f822 	bl	8122264 <iprintf>
 8121220:	e026      	b.n	8121270 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8121222:	4b18      	ldr	r3, [pc, #96]	@ (8121284 <udp_remove+0x80>)
 8121224:	681b      	ldr	r3, [r3, #0]
 8121226:	687a      	ldr	r2, [r7, #4]
 8121228:	429a      	cmp	r2, r3
 812122a:	d105      	bne.n	8121238 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 812122c:	4b15      	ldr	r3, [pc, #84]	@ (8121284 <udp_remove+0x80>)
 812122e:	681b      	ldr	r3, [r3, #0]
 8121230:	68db      	ldr	r3, [r3, #12]
 8121232:	4a14      	ldr	r2, [pc, #80]	@ (8121284 <udp_remove+0x80>)
 8121234:	6013      	str	r3, [r2, #0]
 8121236:	e017      	b.n	8121268 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8121238:	4b12      	ldr	r3, [pc, #72]	@ (8121284 <udp_remove+0x80>)
 812123a:	681b      	ldr	r3, [r3, #0]
 812123c:	60fb      	str	r3, [r7, #12]
 812123e:	e010      	b.n	8121262 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8121240:	68fb      	ldr	r3, [r7, #12]
 8121242:	68db      	ldr	r3, [r3, #12]
 8121244:	2b00      	cmp	r3, #0
 8121246:	d009      	beq.n	812125c <udp_remove+0x58>
 8121248:	68fb      	ldr	r3, [r7, #12]
 812124a:	68db      	ldr	r3, [r3, #12]
 812124c:	687a      	ldr	r2, [r7, #4]
 812124e:	429a      	cmp	r2, r3
 8121250:	d104      	bne.n	812125c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8121252:	687b      	ldr	r3, [r7, #4]
 8121254:	68da      	ldr	r2, [r3, #12]
 8121256:	68fb      	ldr	r3, [r7, #12]
 8121258:	60da      	str	r2, [r3, #12]
        break;
 812125a:	e005      	b.n	8121268 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 812125c:	68fb      	ldr	r3, [r7, #12]
 812125e:	68db      	ldr	r3, [r3, #12]
 8121260:	60fb      	str	r3, [r7, #12]
 8121262:	68fb      	ldr	r3, [r7, #12]
 8121264:	2b00      	cmp	r3, #0
 8121266:	d1eb      	bne.n	8121240 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8121268:	6879      	ldr	r1, [r7, #4]
 812126a:	2000      	movs	r0, #0
 812126c:	f7f6 ffc4 	bl	81181f8 <memp_free>
}
 8121270:	3710      	adds	r7, #16
 8121272:	46bd      	mov	sp, r7
 8121274:	bd80      	pop	{r7, pc}
 8121276:	bf00      	nop
 8121278:	08128148 	.word	0x08128148
 812127c:	081287fc 	.word	0x081287fc
 8121280:	081281dc 	.word	0x081281dc
 8121284:	10011ec8 	.word	0x10011ec8

08121288 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8121288:	b580      	push	{r7, lr}
 812128a:	b082      	sub	sp, #8
 812128c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 812128e:	2000      	movs	r0, #0
 8121290:	f7f6 ff3c 	bl	811810c <memp_malloc>
 8121294:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8121296:	687b      	ldr	r3, [r7, #4]
 8121298:	2b00      	cmp	r3, #0
 812129a:	d007      	beq.n	81212ac <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 812129c:	2220      	movs	r2, #32
 812129e:	2100      	movs	r1, #0
 81212a0:	6878      	ldr	r0, [r7, #4]
 81212a2:	f001 f985 	bl	81225b0 <memset>
    pcb->ttl = UDP_TTL;
 81212a6:	687b      	ldr	r3, [r7, #4]
 81212a8:	22ff      	movs	r2, #255	@ 0xff
 81212aa:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 81212ac:	687b      	ldr	r3, [r7, #4]
}
 81212ae:	4618      	mov	r0, r3
 81212b0:	3708      	adds	r7, #8
 81212b2:	46bd      	mov	sp, r7
 81212b4:	bd80      	pop	{r7, pc}
	...

081212b8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 81212b8:	b480      	push	{r7}
 81212ba:	b085      	sub	sp, #20
 81212bc:	af00      	add	r7, sp, #0
 81212be:	6078      	str	r0, [r7, #4]
 81212c0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 81212c2:	687b      	ldr	r3, [r7, #4]
 81212c4:	2b00      	cmp	r3, #0
 81212c6:	d01e      	beq.n	8121306 <udp_netif_ip_addr_changed+0x4e>
 81212c8:	687b      	ldr	r3, [r7, #4]
 81212ca:	681b      	ldr	r3, [r3, #0]
 81212cc:	2b00      	cmp	r3, #0
 81212ce:	d01a      	beq.n	8121306 <udp_netif_ip_addr_changed+0x4e>
 81212d0:	683b      	ldr	r3, [r7, #0]
 81212d2:	2b00      	cmp	r3, #0
 81212d4:	d017      	beq.n	8121306 <udp_netif_ip_addr_changed+0x4e>
 81212d6:	683b      	ldr	r3, [r7, #0]
 81212d8:	681b      	ldr	r3, [r3, #0]
 81212da:	2b00      	cmp	r3, #0
 81212dc:	d013      	beq.n	8121306 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 81212de:	4b0d      	ldr	r3, [pc, #52]	@ (8121314 <udp_netif_ip_addr_changed+0x5c>)
 81212e0:	681b      	ldr	r3, [r3, #0]
 81212e2:	60fb      	str	r3, [r7, #12]
 81212e4:	e00c      	b.n	8121300 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 81212e6:	68fb      	ldr	r3, [r7, #12]
 81212e8:	681a      	ldr	r2, [r3, #0]
 81212ea:	687b      	ldr	r3, [r7, #4]
 81212ec:	681b      	ldr	r3, [r3, #0]
 81212ee:	429a      	cmp	r2, r3
 81212f0:	d103      	bne.n	81212fa <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 81212f2:	683b      	ldr	r3, [r7, #0]
 81212f4:	681a      	ldr	r2, [r3, #0]
 81212f6:	68fb      	ldr	r3, [r7, #12]
 81212f8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 81212fa:	68fb      	ldr	r3, [r7, #12]
 81212fc:	68db      	ldr	r3, [r3, #12]
 81212fe:	60fb      	str	r3, [r7, #12]
 8121300:	68fb      	ldr	r3, [r7, #12]
 8121302:	2b00      	cmp	r3, #0
 8121304:	d1ef      	bne.n	81212e6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8121306:	bf00      	nop
 8121308:	3714      	adds	r7, #20
 812130a:	46bd      	mov	sp, r7
 812130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8121310:	4770      	bx	lr
 8121312:	bf00      	nop
 8121314:	10011ec8 	.word	0x10011ec8

08121318 <udp_debug_print>:
 *
 * @param udphdr pointer to the udp header in memory.
 */
void
udp_debug_print(struct udp_hdr *udphdr)
{
 8121318:	b590      	push	{r4, r7, lr}
 812131a:	b083      	sub	sp, #12
 812131c:	af00      	add	r7, sp, #0
 812131e:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(UDP_DEBUG, ("UDP header:\n"));
 8121320:	4824      	ldr	r0, [pc, #144]	@ (81213b4 <udp_debug_print+0x9c>)
 8121322:	f001 f80f 	bl	8122344 <puts>
 8121326:	200d      	movs	r0, #13
 8121328:	f000 ffae 	bl	8122288 <putchar>
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 812132c:	4822      	ldr	r0, [pc, #136]	@ (81213b8 <udp_debug_print+0xa0>)
 812132e:	f001 f809 	bl	8122344 <puts>
 8121332:	200d      	movs	r0, #13
 8121334:	f000 ffa8 	bl	8122288 <putchar>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     %5"U16_F"     | (src port, dest port)\n",
 8121338:	687b      	ldr	r3, [r7, #4]
 812133a:	881b      	ldrh	r3, [r3, #0]
 812133c:	b29b      	uxth	r3, r3
 812133e:	4618      	mov	r0, r3
 8121340:	f7f2 ff7c 	bl	811423c <lwip_htons>
 8121344:	4603      	mov	r3, r0
 8121346:	461c      	mov	r4, r3
 8121348:	687b      	ldr	r3, [r7, #4]
 812134a:	885b      	ldrh	r3, [r3, #2]
 812134c:	b29b      	uxth	r3, r3
 812134e:	4618      	mov	r0, r3
 8121350:	f7f2 ff74 	bl	811423c <lwip_htons>
 8121354:	4603      	mov	r3, r0
 8121356:	461a      	mov	r2, r3
 8121358:	4621      	mov	r1, r4
 812135a:	4818      	ldr	r0, [pc, #96]	@ (81213bc <udp_debug_print+0xa4>)
 812135c:	f000 ff82 	bl	8122264 <iprintf>
 8121360:	200d      	movs	r0, #13
 8121362:	f000 ff91 	bl	8122288 <putchar>
                          lwip_ntohs(udphdr->src), lwip_ntohs(udphdr->dest)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 8121366:	4814      	ldr	r0, [pc, #80]	@ (81213b8 <udp_debug_print+0xa0>)
 8121368:	f000 ffec 	bl	8122344 <puts>
 812136c:	200d      	movs	r0, #13
 812136e:	f000 ff8b 	bl	8122288 <putchar>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     0x%04"X16_F"    | (len, chksum)\n",
 8121372:	687b      	ldr	r3, [r7, #4]
 8121374:	889b      	ldrh	r3, [r3, #4]
 8121376:	b29b      	uxth	r3, r3
 8121378:	4618      	mov	r0, r3
 812137a:	f7f2 ff5f 	bl	811423c <lwip_htons>
 812137e:	4603      	mov	r3, r0
 8121380:	461c      	mov	r4, r3
 8121382:	687b      	ldr	r3, [r7, #4]
 8121384:	88db      	ldrh	r3, [r3, #6]
 8121386:	b29b      	uxth	r3, r3
 8121388:	4618      	mov	r0, r3
 812138a:	f7f2 ff57 	bl	811423c <lwip_htons>
 812138e:	4603      	mov	r3, r0
 8121390:	461a      	mov	r2, r3
 8121392:	4621      	mov	r1, r4
 8121394:	480a      	ldr	r0, [pc, #40]	@ (81213c0 <udp_debug_print+0xa8>)
 8121396:	f000 ff65 	bl	8122264 <iprintf>
 812139a:	200d      	movs	r0, #13
 812139c:	f000 ff74 	bl	8122288 <putchar>
                          lwip_ntohs(udphdr->len), lwip_ntohs(udphdr->chksum)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 81213a0:	4805      	ldr	r0, [pc, #20]	@ (81213b8 <udp_debug_print+0xa0>)
 81213a2:	f000 ffcf 	bl	8122344 <puts>
 81213a6:	200d      	movs	r0, #13
 81213a8:	f000 ff6e 	bl	8122288 <putchar>
}
 81213ac:	bf00      	nop
 81213ae:	370c      	adds	r7, #12
 81213b0:	46bd      	mov	sp, r7
 81213b2:	bd90      	pop	{r4, r7, pc}
 81213b4:	08128814 	.word	0x08128814
 81213b8:	08128820 	.word	0x08128820
 81213bc:	08128844 	.word	0x08128844
 81213c0:	0812887c 	.word	0x0812887c

081213c4 <_ZdlPvj>:
 81213c4:	f000 b8e9 	b.w	812159a <_ZdlPv>

081213c8 <__cxa_guard_acquire>:
 81213c8:	6802      	ldr	r2, [r0, #0]
 81213ca:	07d2      	lsls	r2, r2, #31
 81213cc:	4603      	mov	r3, r0
 81213ce:	d405      	bmi.n	81213dc <__cxa_guard_acquire+0x14>
 81213d0:	7842      	ldrb	r2, [r0, #1]
 81213d2:	b102      	cbz	r2, 81213d6 <__cxa_guard_acquire+0xe>
 81213d4:	deff      	udf	#255	@ 0xff
 81213d6:	2001      	movs	r0, #1
 81213d8:	7058      	strb	r0, [r3, #1]
 81213da:	4770      	bx	lr
 81213dc:	2000      	movs	r0, #0
 81213de:	4770      	bx	lr

081213e0 <__cxa_guard_release>:
 81213e0:	2301      	movs	r3, #1
 81213e2:	6003      	str	r3, [r0, #0]
 81213e4:	4770      	bx	lr

081213e6 <_Znwj>:
 81213e6:	2801      	cmp	r0, #1
 81213e8:	bf38      	it	cc
 81213ea:	2001      	movcc	r0, #1
 81213ec:	b510      	push	{r4, lr}
 81213ee:	4604      	mov	r4, r0
 81213f0:	4620      	mov	r0, r4
 81213f2:	f000 f909 	bl	8121608 <malloc>
 81213f6:	b100      	cbz	r0, 81213fa <_Znwj+0x14>
 81213f8:	bd10      	pop	{r4, pc}
 81213fa:	f000 f8d1 	bl	81215a0 <_ZSt15get_new_handlerv>
 81213fe:	b908      	cbnz	r0, 8121404 <_Znwj+0x1e>
 8121400:	f000 f8fa 	bl	81215f8 <abort>
 8121404:	4780      	blx	r0
 8121406:	e7f3      	b.n	81213f0 <_Znwj+0xa>

08121408 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8121408:	68c3      	ldr	r3, [r0, #12]
 812140a:	689a      	ldr	r2, [r3, #8]
 812140c:	60c2      	str	r2, [r0, #12]
 812140e:	b510      	push	{r4, lr}
 8121410:	b102      	cbz	r2, 8121414 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 8121412:	6050      	str	r0, [r2, #4]
 8121414:	6842      	ldr	r2, [r0, #4]
 8121416:	605a      	str	r2, [r3, #4]
 8121418:	680c      	ldr	r4, [r1, #0]
 812141a:	4284      	cmp	r4, r0
 812141c:	d103      	bne.n	8121426 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 812141e:	600b      	str	r3, [r1, #0]
 8121420:	6098      	str	r0, [r3, #8]
 8121422:	6043      	str	r3, [r0, #4]
 8121424:	bd10      	pop	{r4, pc}
 8121426:	6891      	ldr	r1, [r2, #8]
 8121428:	4281      	cmp	r1, r0
 812142a:	bf0c      	ite	eq
 812142c:	6093      	streq	r3, [r2, #8]
 812142e:	60d3      	strne	r3, [r2, #12]
 8121430:	e7f6      	b.n	8121420 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

08121432 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 8121432:	6883      	ldr	r3, [r0, #8]
 8121434:	68da      	ldr	r2, [r3, #12]
 8121436:	6082      	str	r2, [r0, #8]
 8121438:	b510      	push	{r4, lr}
 812143a:	b102      	cbz	r2, 812143e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 812143c:	6050      	str	r0, [r2, #4]
 812143e:	6842      	ldr	r2, [r0, #4]
 8121440:	605a      	str	r2, [r3, #4]
 8121442:	680c      	ldr	r4, [r1, #0]
 8121444:	4284      	cmp	r4, r0
 8121446:	d103      	bne.n	8121450 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 8121448:	600b      	str	r3, [r1, #0]
 812144a:	60d8      	str	r0, [r3, #12]
 812144c:	6043      	str	r3, [r0, #4]
 812144e:	bd10      	pop	{r4, pc}
 8121450:	68d1      	ldr	r1, [r2, #12]
 8121452:	4281      	cmp	r1, r0
 8121454:	bf0c      	ite	eq
 8121456:	60d3      	streq	r3, [r2, #12]
 8121458:	6093      	strne	r3, [r2, #8]
 812145a:	e7f6      	b.n	812144a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

0812145c <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 812145c:	68c3      	ldr	r3, [r0, #12]
 812145e:	b123      	cbz	r3, 812146a <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 8121460:	4618      	mov	r0, r3
 8121462:	689b      	ldr	r3, [r3, #8]
 8121464:	2b00      	cmp	r3, #0
 8121466:	d1fb      	bne.n	8121460 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 8121468:	4770      	bx	lr
 812146a:	6843      	ldr	r3, [r0, #4]
 812146c:	68da      	ldr	r2, [r3, #12]
 812146e:	4282      	cmp	r2, r0
 8121470:	d004      	beq.n	812147c <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x20>
 8121472:	68c2      	ldr	r2, [r0, #12]
 8121474:	4293      	cmp	r3, r2
 8121476:	bf18      	it	ne
 8121478:	4618      	movne	r0, r3
 812147a:	4770      	bx	lr
 812147c:	4618      	mov	r0, r3
 812147e:	685b      	ldr	r3, [r3, #4]
 8121480:	e7f4      	b.n	812146c <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>

08121482 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8121482:	7802      	ldrb	r2, [r0, #0]
 8121484:	4603      	mov	r3, r0
 8121486:	b92a      	cbnz	r2, 8121494 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8121488:	6842      	ldr	r2, [r0, #4]
 812148a:	6852      	ldr	r2, [r2, #4]
 812148c:	4282      	cmp	r2, r0
 812148e:	d101      	bne.n	8121494 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8121490:	68d0      	ldr	r0, [r2, #12]
 8121492:	4770      	bx	lr
 8121494:	689a      	ldr	r2, [r3, #8]
 8121496:	b122      	cbz	r2, 81214a2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 8121498:	4610      	mov	r0, r2
 812149a:	68d2      	ldr	r2, [r2, #12]
 812149c:	2a00      	cmp	r2, #0
 812149e:	d1fb      	bne.n	8121498 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 81214a0:	4770      	bx	lr
 81214a2:	6858      	ldr	r0, [r3, #4]
 81214a4:	6882      	ldr	r2, [r0, #8]
 81214a6:	429a      	cmp	r2, r3
 81214a8:	d000      	beq.n	81214ac <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
 81214aa:	4770      	bx	lr
 81214ac:	4603      	mov	r3, r0
 81214ae:	6840      	ldr	r0, [r0, #4]
 81214b0:	e7f8      	b.n	81214a4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

081214b2 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 81214b2:	f7ff bfd3 	b.w	812145c <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

081214b6 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 81214b6:	f7ff bfe4 	b.w	8121482 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

081214ba <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 81214ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81214be:	461d      	mov	r5, r3
 81214c0:	1d1f      	adds	r7, r3, #4
 81214c2:	2300      	movs	r3, #0
 81214c4:	e9c1 3302 	strd	r3, r3, [r1, #8]
 81214c8:	460c      	mov	r4, r1
 81214ca:	604a      	str	r2, [r1, #4]
 81214cc:	700b      	strb	r3, [r1, #0]
 81214ce:	b1a0      	cbz	r0, 81214fa <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x40>
 81214d0:	4295      	cmp	r5, r2
 81214d2:	6091      	str	r1, [r2, #8]
 81214d4:	d102      	bne.n	81214dc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 81214d6:	6069      	str	r1, [r5, #4]
 81214d8:	60ec      	str	r4, [r5, #12]
 81214da:	e003      	b.n	81214e4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 81214dc:	68ab      	ldr	r3, [r5, #8]
 81214de:	4293      	cmp	r3, r2
 81214e0:	bf08      	it	eq
 81214e2:	60a9      	streq	r1, [r5, #8]
 81214e4:	f04f 0900 	mov.w	r9, #0
 81214e8:	f04f 0801 	mov.w	r8, #1
 81214ec:	686b      	ldr	r3, [r5, #4]
 81214ee:	42a3      	cmp	r3, r4
 81214f0:	d132      	bne.n	8121558 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9e>
 81214f2:	2201      	movs	r2, #1
 81214f4:	701a      	strb	r2, [r3, #0]
 81214f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81214fa:	60d1      	str	r1, [r2, #12]
 81214fc:	68eb      	ldr	r3, [r5, #12]
 81214fe:	4293      	cmp	r3, r2
 8121500:	d1f0      	bne.n	81214e4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 8121502:	e7e9      	b.n	81214d8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x1e>
 8121504:	68c3      	ldr	r3, [r0, #12]
 8121506:	42a3      	cmp	r3, r4
 8121508:	d103      	bne.n	8121512 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x58>
 812150a:	4639      	mov	r1, r7
 812150c:	f7ff ff7c 	bl	8121408 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8121510:	4604      	mov	r4, r0
 8121512:	6863      	ldr	r3, [r4, #4]
 8121514:	4639      	mov	r1, r7
 8121516:	f883 8000 	strb.w	r8, [r3]
 812151a:	4630      	mov	r0, r6
 812151c:	f886 9000 	strb.w	r9, [r6]
 8121520:	f7ff ff87 	bl	8121432 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8121524:	e7e2      	b.n	81214ec <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 8121526:	b133      	cbz	r3, 8121536 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 8121528:	781a      	ldrb	r2, [r3, #0]
 812152a:	b922      	cbnz	r2, 8121536 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 812152c:	f880 8000 	strb.w	r8, [r0]
 8121530:	f883 8000 	strb.w	r8, [r3]
 8121534:	e021      	b.n	812157a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xc0>
 8121536:	6883      	ldr	r3, [r0, #8]
 8121538:	42a3      	cmp	r3, r4
 812153a:	d103      	bne.n	8121544 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8a>
 812153c:	4639      	mov	r1, r7
 812153e:	f7ff ff78 	bl	8121432 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8121542:	4604      	mov	r4, r0
 8121544:	6863      	ldr	r3, [r4, #4]
 8121546:	4639      	mov	r1, r7
 8121548:	f883 8000 	strb.w	r8, [r3]
 812154c:	4630      	mov	r0, r6
 812154e:	f886 9000 	strb.w	r9, [r6]
 8121552:	f7ff ff59 	bl	8121408 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8121556:	e7c9      	b.n	81214ec <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 8121558:	6860      	ldr	r0, [r4, #4]
 812155a:	7802      	ldrb	r2, [r0, #0]
 812155c:	2a00      	cmp	r2, #0
 812155e:	d1c8      	bne.n	81214f2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x38>
 8121560:	6846      	ldr	r6, [r0, #4]
 8121562:	68b3      	ldr	r3, [r6, #8]
 8121564:	4283      	cmp	r3, r0
 8121566:	d1de      	bne.n	8121526 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
 8121568:	68f2      	ldr	r2, [r6, #12]
 812156a:	2a00      	cmp	r2, #0
 812156c:	d0ca      	beq.n	8121504 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 812156e:	7811      	ldrb	r1, [r2, #0]
 8121570:	2900      	cmp	r1, #0
 8121572:	d1c7      	bne.n	8121504 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 8121574:	2101      	movs	r1, #1
 8121576:	7019      	strb	r1, [r3, #0]
 8121578:	7011      	strb	r1, [r2, #0]
 812157a:	f886 9000 	strb.w	r9, [r6]
 812157e:	4634      	mov	r4, r6
 8121580:	e7b4      	b.n	81214ec <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>

08121582 <_ZSt17__throw_bad_allocv>:
 8121582:	b508      	push	{r3, lr}
 8121584:	f000 f838 	bl	81215f8 <abort>

08121588 <_ZSt28__throw_bad_array_new_lengthv>:
 8121588:	b508      	push	{r3, lr}
 812158a:	f000 f835 	bl	81215f8 <abort>

0812158e <_ZSt20__throw_length_errorPKc>:
 812158e:	b508      	push	{r3, lr}
 8121590:	f000 f832 	bl	81215f8 <abort>

08121594 <_ZSt25__throw_bad_function_callv>:
 8121594:	b508      	push	{r3, lr}
 8121596:	f000 f82f 	bl	81215f8 <abort>

0812159a <_ZdlPv>:
 812159a:	f000 b83d 	b.w	8121618 <free>
	...

081215a0 <_ZSt15get_new_handlerv>:
 81215a0:	4b02      	ldr	r3, [pc, #8]	@ (81215ac <_ZSt15get_new_handlerv+0xc>)
 81215a2:	6818      	ldr	r0, [r3, #0]
 81215a4:	f3bf 8f5b 	dmb	ish
 81215a8:	4770      	bx	lr
 81215aa:	bf00      	nop
 81215ac:	10011ecc 	.word	0x10011ecc

081215b0 <roundf>:
 81215b0:	ee10 0a10 	vmov	r0, s0
 81215b4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 81215b8:	3a7f      	subs	r2, #127	@ 0x7f
 81215ba:	2a16      	cmp	r2, #22
 81215bc:	dc15      	bgt.n	81215ea <roundf+0x3a>
 81215be:	2a00      	cmp	r2, #0
 81215c0:	da08      	bge.n	81215d4 <roundf+0x24>
 81215c2:	3201      	adds	r2, #1
 81215c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 81215c8:	d101      	bne.n	81215ce <roundf+0x1e>
 81215ca:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 81215ce:	ee00 3a10 	vmov	s0, r3
 81215d2:	4770      	bx	lr
 81215d4:	4907      	ldr	r1, [pc, #28]	@ (81215f4 <roundf+0x44>)
 81215d6:	4111      	asrs	r1, r2
 81215d8:	4201      	tst	r1, r0
 81215da:	d0fa      	beq.n	81215d2 <roundf+0x22>
 81215dc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 81215e0:	4113      	asrs	r3, r2
 81215e2:	4403      	add	r3, r0
 81215e4:	ea23 0301 	bic.w	r3, r3, r1
 81215e8:	e7f1      	b.n	81215ce <roundf+0x1e>
 81215ea:	2a80      	cmp	r2, #128	@ 0x80
 81215ec:	d1f1      	bne.n	81215d2 <roundf+0x22>
 81215ee:	ee30 0a00 	vadd.f32	s0, s0, s0
 81215f2:	4770      	bx	lr
 81215f4:	007fffff 	.word	0x007fffff

081215f8 <abort>:
 81215f8:	b508      	push	{r3, lr}
 81215fa:	2006      	movs	r0, #6
 81215fc:	f001 f832 	bl	8122664 <raise>
 8121600:	2001      	movs	r0, #1
 8121602:	f7df fddf 	bl	81011c4 <_exit>
	...

08121608 <malloc>:
 8121608:	4b02      	ldr	r3, [pc, #8]	@ (8121614 <malloc+0xc>)
 812160a:	4601      	mov	r1, r0
 812160c:	6818      	ldr	r0, [r3, #0]
 812160e:	f000 b82d 	b.w	812166c <_malloc_r>
 8121612:	bf00      	nop
 8121614:	10000040 	.word	0x10000040

08121618 <free>:
 8121618:	4b02      	ldr	r3, [pc, #8]	@ (8121624 <free+0xc>)
 812161a:	4601      	mov	r1, r0
 812161c:	6818      	ldr	r0, [r3, #0]
 812161e:	f001 b943 	b.w	81228a8 <_free_r>
 8121622:	bf00      	nop
 8121624:	10000040 	.word	0x10000040

08121628 <sbrk_aligned>:
 8121628:	b570      	push	{r4, r5, r6, lr}
 812162a:	4e0f      	ldr	r6, [pc, #60]	@ (8121668 <sbrk_aligned+0x40>)
 812162c:	460c      	mov	r4, r1
 812162e:	6831      	ldr	r1, [r6, #0]
 8121630:	4605      	mov	r5, r0
 8121632:	b911      	cbnz	r1, 812163a <sbrk_aligned+0x12>
 8121634:	f001 f8bc 	bl	81227b0 <_sbrk_r>
 8121638:	6030      	str	r0, [r6, #0]
 812163a:	4621      	mov	r1, r4
 812163c:	4628      	mov	r0, r5
 812163e:	f001 f8b7 	bl	81227b0 <_sbrk_r>
 8121642:	1c43      	adds	r3, r0, #1
 8121644:	d103      	bne.n	812164e <sbrk_aligned+0x26>
 8121646:	f04f 34ff 	mov.w	r4, #4294967295
 812164a:	4620      	mov	r0, r4
 812164c:	bd70      	pop	{r4, r5, r6, pc}
 812164e:	1cc4      	adds	r4, r0, #3
 8121650:	f024 0403 	bic.w	r4, r4, #3
 8121654:	42a0      	cmp	r0, r4
 8121656:	d0f8      	beq.n	812164a <sbrk_aligned+0x22>
 8121658:	1a21      	subs	r1, r4, r0
 812165a:	4628      	mov	r0, r5
 812165c:	f001 f8a8 	bl	81227b0 <_sbrk_r>
 8121660:	3001      	adds	r0, #1
 8121662:	d1f2      	bne.n	812164a <sbrk_aligned+0x22>
 8121664:	e7ef      	b.n	8121646 <sbrk_aligned+0x1e>
 8121666:	bf00      	nop
 8121668:	10011ed0 	.word	0x10011ed0

0812166c <_malloc_r>:
 812166c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8121670:	1ccd      	adds	r5, r1, #3
 8121672:	f025 0503 	bic.w	r5, r5, #3
 8121676:	3508      	adds	r5, #8
 8121678:	2d0c      	cmp	r5, #12
 812167a:	bf38      	it	cc
 812167c:	250c      	movcc	r5, #12
 812167e:	2d00      	cmp	r5, #0
 8121680:	4606      	mov	r6, r0
 8121682:	db01      	blt.n	8121688 <_malloc_r+0x1c>
 8121684:	42a9      	cmp	r1, r5
 8121686:	d904      	bls.n	8121692 <_malloc_r+0x26>
 8121688:	230c      	movs	r3, #12
 812168a:	6033      	str	r3, [r6, #0]
 812168c:	2000      	movs	r0, #0
 812168e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8121692:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8121768 <_malloc_r+0xfc>
 8121696:	f000 f869 	bl	812176c <__malloc_lock>
 812169a:	f8d8 3000 	ldr.w	r3, [r8]
 812169e:	461c      	mov	r4, r3
 81216a0:	bb44      	cbnz	r4, 81216f4 <_malloc_r+0x88>
 81216a2:	4629      	mov	r1, r5
 81216a4:	4630      	mov	r0, r6
 81216a6:	f7ff ffbf 	bl	8121628 <sbrk_aligned>
 81216aa:	1c43      	adds	r3, r0, #1
 81216ac:	4604      	mov	r4, r0
 81216ae:	d158      	bne.n	8121762 <_malloc_r+0xf6>
 81216b0:	f8d8 4000 	ldr.w	r4, [r8]
 81216b4:	4627      	mov	r7, r4
 81216b6:	2f00      	cmp	r7, #0
 81216b8:	d143      	bne.n	8121742 <_malloc_r+0xd6>
 81216ba:	2c00      	cmp	r4, #0
 81216bc:	d04b      	beq.n	8121756 <_malloc_r+0xea>
 81216be:	6823      	ldr	r3, [r4, #0]
 81216c0:	4639      	mov	r1, r7
 81216c2:	4630      	mov	r0, r6
 81216c4:	eb04 0903 	add.w	r9, r4, r3
 81216c8:	f001 f872 	bl	81227b0 <_sbrk_r>
 81216cc:	4581      	cmp	r9, r0
 81216ce:	d142      	bne.n	8121756 <_malloc_r+0xea>
 81216d0:	6821      	ldr	r1, [r4, #0]
 81216d2:	1a6d      	subs	r5, r5, r1
 81216d4:	4629      	mov	r1, r5
 81216d6:	4630      	mov	r0, r6
 81216d8:	f7ff ffa6 	bl	8121628 <sbrk_aligned>
 81216dc:	3001      	adds	r0, #1
 81216de:	d03a      	beq.n	8121756 <_malloc_r+0xea>
 81216e0:	6823      	ldr	r3, [r4, #0]
 81216e2:	442b      	add	r3, r5
 81216e4:	6023      	str	r3, [r4, #0]
 81216e6:	f8d8 3000 	ldr.w	r3, [r8]
 81216ea:	685a      	ldr	r2, [r3, #4]
 81216ec:	bb62      	cbnz	r2, 8121748 <_malloc_r+0xdc>
 81216ee:	f8c8 7000 	str.w	r7, [r8]
 81216f2:	e00f      	b.n	8121714 <_malloc_r+0xa8>
 81216f4:	6822      	ldr	r2, [r4, #0]
 81216f6:	1b52      	subs	r2, r2, r5
 81216f8:	d420      	bmi.n	812173c <_malloc_r+0xd0>
 81216fa:	2a0b      	cmp	r2, #11
 81216fc:	d917      	bls.n	812172e <_malloc_r+0xc2>
 81216fe:	1961      	adds	r1, r4, r5
 8121700:	42a3      	cmp	r3, r4
 8121702:	6025      	str	r5, [r4, #0]
 8121704:	bf18      	it	ne
 8121706:	6059      	strne	r1, [r3, #4]
 8121708:	6863      	ldr	r3, [r4, #4]
 812170a:	bf08      	it	eq
 812170c:	f8c8 1000 	streq.w	r1, [r8]
 8121710:	5162      	str	r2, [r4, r5]
 8121712:	604b      	str	r3, [r1, #4]
 8121714:	4630      	mov	r0, r6
 8121716:	f000 f82f 	bl	8121778 <__malloc_unlock>
 812171a:	f104 000b 	add.w	r0, r4, #11
 812171e:	1d23      	adds	r3, r4, #4
 8121720:	f020 0007 	bic.w	r0, r0, #7
 8121724:	1ac2      	subs	r2, r0, r3
 8121726:	bf1c      	itt	ne
 8121728:	1a1b      	subne	r3, r3, r0
 812172a:	50a3      	strne	r3, [r4, r2]
 812172c:	e7af      	b.n	812168e <_malloc_r+0x22>
 812172e:	6862      	ldr	r2, [r4, #4]
 8121730:	42a3      	cmp	r3, r4
 8121732:	bf0c      	ite	eq
 8121734:	f8c8 2000 	streq.w	r2, [r8]
 8121738:	605a      	strne	r2, [r3, #4]
 812173a:	e7eb      	b.n	8121714 <_malloc_r+0xa8>
 812173c:	4623      	mov	r3, r4
 812173e:	6864      	ldr	r4, [r4, #4]
 8121740:	e7ae      	b.n	81216a0 <_malloc_r+0x34>
 8121742:	463c      	mov	r4, r7
 8121744:	687f      	ldr	r7, [r7, #4]
 8121746:	e7b6      	b.n	81216b6 <_malloc_r+0x4a>
 8121748:	461a      	mov	r2, r3
 812174a:	685b      	ldr	r3, [r3, #4]
 812174c:	42a3      	cmp	r3, r4
 812174e:	d1fb      	bne.n	8121748 <_malloc_r+0xdc>
 8121750:	2300      	movs	r3, #0
 8121752:	6053      	str	r3, [r2, #4]
 8121754:	e7de      	b.n	8121714 <_malloc_r+0xa8>
 8121756:	230c      	movs	r3, #12
 8121758:	6033      	str	r3, [r6, #0]
 812175a:	4630      	mov	r0, r6
 812175c:	f000 f80c 	bl	8121778 <__malloc_unlock>
 8121760:	e794      	b.n	812168c <_malloc_r+0x20>
 8121762:	6005      	str	r5, [r0, #0]
 8121764:	e7d6      	b.n	8121714 <_malloc_r+0xa8>
 8121766:	bf00      	nop
 8121768:	10011ed4 	.word	0x10011ed4

0812176c <__malloc_lock>:
 812176c:	4801      	ldr	r0, [pc, #4]	@ (8121774 <__malloc_lock+0x8>)
 812176e:	f001 b86c 	b.w	812284a <__retarget_lock_acquire_recursive>
 8121772:	bf00      	nop
 8121774:	10012018 	.word	0x10012018

08121778 <__malloc_unlock>:
 8121778:	4801      	ldr	r0, [pc, #4]	@ (8121780 <__malloc_unlock+0x8>)
 812177a:	f001 b867 	b.w	812284c <__retarget_lock_release_recursive>
 812177e:	bf00      	nop
 8121780:	10012018 	.word	0x10012018

08121784 <rand>:
 8121784:	4b16      	ldr	r3, [pc, #88]	@ (81217e0 <rand+0x5c>)
 8121786:	b510      	push	{r4, lr}
 8121788:	681c      	ldr	r4, [r3, #0]
 812178a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 812178c:	b9b3      	cbnz	r3, 81217bc <rand+0x38>
 812178e:	2018      	movs	r0, #24
 8121790:	f7ff ff3a 	bl	8121608 <malloc>
 8121794:	4602      	mov	r2, r0
 8121796:	6320      	str	r0, [r4, #48]	@ 0x30
 8121798:	b920      	cbnz	r0, 81217a4 <rand+0x20>
 812179a:	4b12      	ldr	r3, [pc, #72]	@ (81217e4 <rand+0x60>)
 812179c:	4812      	ldr	r0, [pc, #72]	@ (81217e8 <rand+0x64>)
 812179e:	2152      	movs	r1, #82	@ 0x52
 81217a0:	f001 f864 	bl	812286c <__assert_func>
 81217a4:	4911      	ldr	r1, [pc, #68]	@ (81217ec <rand+0x68>)
 81217a6:	4b12      	ldr	r3, [pc, #72]	@ (81217f0 <rand+0x6c>)
 81217a8:	e9c0 1300 	strd	r1, r3, [r0]
 81217ac:	4b11      	ldr	r3, [pc, #68]	@ (81217f4 <rand+0x70>)
 81217ae:	6083      	str	r3, [r0, #8]
 81217b0:	230b      	movs	r3, #11
 81217b2:	8183      	strh	r3, [r0, #12]
 81217b4:	2100      	movs	r1, #0
 81217b6:	2001      	movs	r0, #1
 81217b8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 81217bc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 81217be:	480e      	ldr	r0, [pc, #56]	@ (81217f8 <rand+0x74>)
 81217c0:	690b      	ldr	r3, [r1, #16]
 81217c2:	694c      	ldr	r4, [r1, #20]
 81217c4:	4a0d      	ldr	r2, [pc, #52]	@ (81217fc <rand+0x78>)
 81217c6:	4358      	muls	r0, r3
 81217c8:	fb02 0004 	mla	r0, r2, r4, r0
 81217cc:	fba3 3202 	umull	r3, r2, r3, r2
 81217d0:	3301      	adds	r3, #1
 81217d2:	eb40 0002 	adc.w	r0, r0, r2
 81217d6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 81217da:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 81217de:	bd10      	pop	{r4, pc}
 81217e0:	10000040 	.word	0x10000040
 81217e4:	08128b38 	.word	0x08128b38
 81217e8:	08128b4f 	.word	0x08128b4f
 81217ec:	abcd330e 	.word	0xabcd330e
 81217f0:	e66d1234 	.word	0xe66d1234
 81217f4:	0005deec 	.word	0x0005deec
 81217f8:	5851f42d 	.word	0x5851f42d
 81217fc:	4c957f2d 	.word	0x4c957f2d

08121800 <_strtol_l.constprop.0>:
 8121800:	2b24      	cmp	r3, #36	@ 0x24
 8121802:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8121806:	4686      	mov	lr, r0
 8121808:	4690      	mov	r8, r2
 812180a:	d801      	bhi.n	8121810 <_strtol_l.constprop.0+0x10>
 812180c:	2b01      	cmp	r3, #1
 812180e:	d106      	bne.n	812181e <_strtol_l.constprop.0+0x1e>
 8121810:	f000 fff0 	bl	81227f4 <__errno>
 8121814:	2316      	movs	r3, #22
 8121816:	6003      	str	r3, [r0, #0]
 8121818:	2000      	movs	r0, #0
 812181a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 812181e:	4834      	ldr	r0, [pc, #208]	@ (81218f0 <_strtol_l.constprop.0+0xf0>)
 8121820:	460d      	mov	r5, r1
 8121822:	462a      	mov	r2, r5
 8121824:	f815 4b01 	ldrb.w	r4, [r5], #1
 8121828:	5d06      	ldrb	r6, [r0, r4]
 812182a:	f016 0608 	ands.w	r6, r6, #8
 812182e:	d1f8      	bne.n	8121822 <_strtol_l.constprop.0+0x22>
 8121830:	2c2d      	cmp	r4, #45	@ 0x2d
 8121832:	d12d      	bne.n	8121890 <_strtol_l.constprop.0+0x90>
 8121834:	782c      	ldrb	r4, [r5, #0]
 8121836:	2601      	movs	r6, #1
 8121838:	1c95      	adds	r5, r2, #2
 812183a:	f033 0210 	bics.w	r2, r3, #16
 812183e:	d109      	bne.n	8121854 <_strtol_l.constprop.0+0x54>
 8121840:	2c30      	cmp	r4, #48	@ 0x30
 8121842:	d12a      	bne.n	812189a <_strtol_l.constprop.0+0x9a>
 8121844:	782a      	ldrb	r2, [r5, #0]
 8121846:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 812184a:	2a58      	cmp	r2, #88	@ 0x58
 812184c:	d125      	bne.n	812189a <_strtol_l.constprop.0+0x9a>
 812184e:	786c      	ldrb	r4, [r5, #1]
 8121850:	2310      	movs	r3, #16
 8121852:	3502      	adds	r5, #2
 8121854:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8121858:	f10c 3cff 	add.w	ip, ip, #4294967295
 812185c:	2200      	movs	r2, #0
 812185e:	fbbc f9f3 	udiv	r9, ip, r3
 8121862:	4610      	mov	r0, r2
 8121864:	fb03 ca19 	mls	sl, r3, r9, ip
 8121868:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 812186c:	2f09      	cmp	r7, #9
 812186e:	d81b      	bhi.n	81218a8 <_strtol_l.constprop.0+0xa8>
 8121870:	463c      	mov	r4, r7
 8121872:	42a3      	cmp	r3, r4
 8121874:	dd27      	ble.n	81218c6 <_strtol_l.constprop.0+0xc6>
 8121876:	1c57      	adds	r7, r2, #1
 8121878:	d007      	beq.n	812188a <_strtol_l.constprop.0+0x8a>
 812187a:	4581      	cmp	r9, r0
 812187c:	d320      	bcc.n	81218c0 <_strtol_l.constprop.0+0xc0>
 812187e:	d101      	bne.n	8121884 <_strtol_l.constprop.0+0x84>
 8121880:	45a2      	cmp	sl, r4
 8121882:	db1d      	blt.n	81218c0 <_strtol_l.constprop.0+0xc0>
 8121884:	fb00 4003 	mla	r0, r0, r3, r4
 8121888:	2201      	movs	r2, #1
 812188a:	f815 4b01 	ldrb.w	r4, [r5], #1
 812188e:	e7eb      	b.n	8121868 <_strtol_l.constprop.0+0x68>
 8121890:	2c2b      	cmp	r4, #43	@ 0x2b
 8121892:	bf04      	itt	eq
 8121894:	782c      	ldrbeq	r4, [r5, #0]
 8121896:	1c95      	addeq	r5, r2, #2
 8121898:	e7cf      	b.n	812183a <_strtol_l.constprop.0+0x3a>
 812189a:	2b00      	cmp	r3, #0
 812189c:	d1da      	bne.n	8121854 <_strtol_l.constprop.0+0x54>
 812189e:	2c30      	cmp	r4, #48	@ 0x30
 81218a0:	bf0c      	ite	eq
 81218a2:	2308      	moveq	r3, #8
 81218a4:	230a      	movne	r3, #10
 81218a6:	e7d5      	b.n	8121854 <_strtol_l.constprop.0+0x54>
 81218a8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 81218ac:	2f19      	cmp	r7, #25
 81218ae:	d801      	bhi.n	81218b4 <_strtol_l.constprop.0+0xb4>
 81218b0:	3c37      	subs	r4, #55	@ 0x37
 81218b2:	e7de      	b.n	8121872 <_strtol_l.constprop.0+0x72>
 81218b4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 81218b8:	2f19      	cmp	r7, #25
 81218ba:	d804      	bhi.n	81218c6 <_strtol_l.constprop.0+0xc6>
 81218bc:	3c57      	subs	r4, #87	@ 0x57
 81218be:	e7d8      	b.n	8121872 <_strtol_l.constprop.0+0x72>
 81218c0:	f04f 32ff 	mov.w	r2, #4294967295
 81218c4:	e7e1      	b.n	812188a <_strtol_l.constprop.0+0x8a>
 81218c6:	1c53      	adds	r3, r2, #1
 81218c8:	d108      	bne.n	81218dc <_strtol_l.constprop.0+0xdc>
 81218ca:	2322      	movs	r3, #34	@ 0x22
 81218cc:	f8ce 3000 	str.w	r3, [lr]
 81218d0:	4660      	mov	r0, ip
 81218d2:	f1b8 0f00 	cmp.w	r8, #0
 81218d6:	d0a0      	beq.n	812181a <_strtol_l.constprop.0+0x1a>
 81218d8:	1e69      	subs	r1, r5, #1
 81218da:	e006      	b.n	81218ea <_strtol_l.constprop.0+0xea>
 81218dc:	b106      	cbz	r6, 81218e0 <_strtol_l.constprop.0+0xe0>
 81218de:	4240      	negs	r0, r0
 81218e0:	f1b8 0f00 	cmp.w	r8, #0
 81218e4:	d099      	beq.n	812181a <_strtol_l.constprop.0+0x1a>
 81218e6:	2a00      	cmp	r2, #0
 81218e8:	d1f6      	bne.n	81218d8 <_strtol_l.constprop.0+0xd8>
 81218ea:	f8c8 1000 	str.w	r1, [r8]
 81218ee:	e794      	b.n	812181a <_strtol_l.constprop.0+0x1a>
 81218f0:	08128ba8 	.word	0x08128ba8

081218f4 <_strtol_r>:
 81218f4:	f7ff bf84 	b.w	8121800 <_strtol_l.constprop.0>

081218f8 <__sfputc_r>:
 81218f8:	6893      	ldr	r3, [r2, #8]
 81218fa:	3b01      	subs	r3, #1
 81218fc:	2b00      	cmp	r3, #0
 81218fe:	b410      	push	{r4}
 8121900:	6093      	str	r3, [r2, #8]
 8121902:	da08      	bge.n	8121916 <__sfputc_r+0x1e>
 8121904:	6994      	ldr	r4, [r2, #24]
 8121906:	42a3      	cmp	r3, r4
 8121908:	db01      	blt.n	812190e <__sfputc_r+0x16>
 812190a:	290a      	cmp	r1, #10
 812190c:	d103      	bne.n	8121916 <__sfputc_r+0x1e>
 812190e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8121912:	f000 bd8e 	b.w	8122432 <__swbuf_r>
 8121916:	6813      	ldr	r3, [r2, #0]
 8121918:	1c58      	adds	r0, r3, #1
 812191a:	6010      	str	r0, [r2, #0]
 812191c:	7019      	strb	r1, [r3, #0]
 812191e:	4608      	mov	r0, r1
 8121920:	f85d 4b04 	ldr.w	r4, [sp], #4
 8121924:	4770      	bx	lr

08121926 <__sfputs_r>:
 8121926:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8121928:	4606      	mov	r6, r0
 812192a:	460f      	mov	r7, r1
 812192c:	4614      	mov	r4, r2
 812192e:	18d5      	adds	r5, r2, r3
 8121930:	42ac      	cmp	r4, r5
 8121932:	d101      	bne.n	8121938 <__sfputs_r+0x12>
 8121934:	2000      	movs	r0, #0
 8121936:	e007      	b.n	8121948 <__sfputs_r+0x22>
 8121938:	f814 1b01 	ldrb.w	r1, [r4], #1
 812193c:	463a      	mov	r2, r7
 812193e:	4630      	mov	r0, r6
 8121940:	f7ff ffda 	bl	81218f8 <__sfputc_r>
 8121944:	1c43      	adds	r3, r0, #1
 8121946:	d1f3      	bne.n	8121930 <__sfputs_r+0xa>
 8121948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0812194c <_vfiprintf_r>:
 812194c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8121950:	460d      	mov	r5, r1
 8121952:	b09d      	sub	sp, #116	@ 0x74
 8121954:	4614      	mov	r4, r2
 8121956:	4698      	mov	r8, r3
 8121958:	4606      	mov	r6, r0
 812195a:	b118      	cbz	r0, 8121964 <_vfiprintf_r+0x18>
 812195c:	6a03      	ldr	r3, [r0, #32]
 812195e:	b90b      	cbnz	r3, 8121964 <_vfiprintf_r+0x18>
 8121960:	f000 fbf0 	bl	8122144 <__sinit>
 8121964:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8121966:	07d9      	lsls	r1, r3, #31
 8121968:	d405      	bmi.n	8121976 <_vfiprintf_r+0x2a>
 812196a:	89ab      	ldrh	r3, [r5, #12]
 812196c:	059a      	lsls	r2, r3, #22
 812196e:	d402      	bmi.n	8121976 <_vfiprintf_r+0x2a>
 8121970:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8121972:	f000 ff6a 	bl	812284a <__retarget_lock_acquire_recursive>
 8121976:	89ab      	ldrh	r3, [r5, #12]
 8121978:	071b      	lsls	r3, r3, #28
 812197a:	d501      	bpl.n	8121980 <_vfiprintf_r+0x34>
 812197c:	692b      	ldr	r3, [r5, #16]
 812197e:	b99b      	cbnz	r3, 81219a8 <_vfiprintf_r+0x5c>
 8121980:	4629      	mov	r1, r5
 8121982:	4630      	mov	r0, r6
 8121984:	f000 fd94 	bl	81224b0 <__swsetup_r>
 8121988:	b170      	cbz	r0, 81219a8 <_vfiprintf_r+0x5c>
 812198a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 812198c:	07dc      	lsls	r4, r3, #31
 812198e:	d504      	bpl.n	812199a <_vfiprintf_r+0x4e>
 8121990:	f04f 30ff 	mov.w	r0, #4294967295
 8121994:	b01d      	add	sp, #116	@ 0x74
 8121996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 812199a:	89ab      	ldrh	r3, [r5, #12]
 812199c:	0598      	lsls	r0, r3, #22
 812199e:	d4f7      	bmi.n	8121990 <_vfiprintf_r+0x44>
 81219a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 81219a2:	f000 ff53 	bl	812284c <__retarget_lock_release_recursive>
 81219a6:	e7f3      	b.n	8121990 <_vfiprintf_r+0x44>
 81219a8:	2300      	movs	r3, #0
 81219aa:	9309      	str	r3, [sp, #36]	@ 0x24
 81219ac:	2320      	movs	r3, #32
 81219ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 81219b2:	f8cd 800c 	str.w	r8, [sp, #12]
 81219b6:	2330      	movs	r3, #48	@ 0x30
 81219b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8121b68 <_vfiprintf_r+0x21c>
 81219bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 81219c0:	f04f 0901 	mov.w	r9, #1
 81219c4:	4623      	mov	r3, r4
 81219c6:	469a      	mov	sl, r3
 81219c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 81219cc:	b10a      	cbz	r2, 81219d2 <_vfiprintf_r+0x86>
 81219ce:	2a25      	cmp	r2, #37	@ 0x25
 81219d0:	d1f9      	bne.n	81219c6 <_vfiprintf_r+0x7a>
 81219d2:	ebba 0b04 	subs.w	fp, sl, r4
 81219d6:	d00b      	beq.n	81219f0 <_vfiprintf_r+0xa4>
 81219d8:	465b      	mov	r3, fp
 81219da:	4622      	mov	r2, r4
 81219dc:	4629      	mov	r1, r5
 81219de:	4630      	mov	r0, r6
 81219e0:	f7ff ffa1 	bl	8121926 <__sfputs_r>
 81219e4:	3001      	adds	r0, #1
 81219e6:	f000 80a7 	beq.w	8121b38 <_vfiprintf_r+0x1ec>
 81219ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 81219ec:	445a      	add	r2, fp
 81219ee:	9209      	str	r2, [sp, #36]	@ 0x24
 81219f0:	f89a 3000 	ldrb.w	r3, [sl]
 81219f4:	2b00      	cmp	r3, #0
 81219f6:	f000 809f 	beq.w	8121b38 <_vfiprintf_r+0x1ec>
 81219fa:	2300      	movs	r3, #0
 81219fc:	f04f 32ff 	mov.w	r2, #4294967295
 8121a00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8121a04:	f10a 0a01 	add.w	sl, sl, #1
 8121a08:	9304      	str	r3, [sp, #16]
 8121a0a:	9307      	str	r3, [sp, #28]
 8121a0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8121a10:	931a      	str	r3, [sp, #104]	@ 0x68
 8121a12:	4654      	mov	r4, sl
 8121a14:	2205      	movs	r2, #5
 8121a16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8121a1a:	4853      	ldr	r0, [pc, #332]	@ (8121b68 <_vfiprintf_r+0x21c>)
 8121a1c:	f7de fc60 	bl	81002e0 <memchr>
 8121a20:	9a04      	ldr	r2, [sp, #16]
 8121a22:	b9d8      	cbnz	r0, 8121a5c <_vfiprintf_r+0x110>
 8121a24:	06d1      	lsls	r1, r2, #27
 8121a26:	bf44      	itt	mi
 8121a28:	2320      	movmi	r3, #32
 8121a2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8121a2e:	0713      	lsls	r3, r2, #28
 8121a30:	bf44      	itt	mi
 8121a32:	232b      	movmi	r3, #43	@ 0x2b
 8121a34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8121a38:	f89a 3000 	ldrb.w	r3, [sl]
 8121a3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8121a3e:	d015      	beq.n	8121a6c <_vfiprintf_r+0x120>
 8121a40:	9a07      	ldr	r2, [sp, #28]
 8121a42:	4654      	mov	r4, sl
 8121a44:	2000      	movs	r0, #0
 8121a46:	f04f 0c0a 	mov.w	ip, #10
 8121a4a:	4621      	mov	r1, r4
 8121a4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8121a50:	3b30      	subs	r3, #48	@ 0x30
 8121a52:	2b09      	cmp	r3, #9
 8121a54:	d94b      	bls.n	8121aee <_vfiprintf_r+0x1a2>
 8121a56:	b1b0      	cbz	r0, 8121a86 <_vfiprintf_r+0x13a>
 8121a58:	9207      	str	r2, [sp, #28]
 8121a5a:	e014      	b.n	8121a86 <_vfiprintf_r+0x13a>
 8121a5c:	eba0 0308 	sub.w	r3, r0, r8
 8121a60:	fa09 f303 	lsl.w	r3, r9, r3
 8121a64:	4313      	orrs	r3, r2
 8121a66:	9304      	str	r3, [sp, #16]
 8121a68:	46a2      	mov	sl, r4
 8121a6a:	e7d2      	b.n	8121a12 <_vfiprintf_r+0xc6>
 8121a6c:	9b03      	ldr	r3, [sp, #12]
 8121a6e:	1d19      	adds	r1, r3, #4
 8121a70:	681b      	ldr	r3, [r3, #0]
 8121a72:	9103      	str	r1, [sp, #12]
 8121a74:	2b00      	cmp	r3, #0
 8121a76:	bfbb      	ittet	lt
 8121a78:	425b      	neglt	r3, r3
 8121a7a:	f042 0202 	orrlt.w	r2, r2, #2
 8121a7e:	9307      	strge	r3, [sp, #28]
 8121a80:	9307      	strlt	r3, [sp, #28]
 8121a82:	bfb8      	it	lt
 8121a84:	9204      	strlt	r2, [sp, #16]
 8121a86:	7823      	ldrb	r3, [r4, #0]
 8121a88:	2b2e      	cmp	r3, #46	@ 0x2e
 8121a8a:	d10a      	bne.n	8121aa2 <_vfiprintf_r+0x156>
 8121a8c:	7863      	ldrb	r3, [r4, #1]
 8121a8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8121a90:	d132      	bne.n	8121af8 <_vfiprintf_r+0x1ac>
 8121a92:	9b03      	ldr	r3, [sp, #12]
 8121a94:	1d1a      	adds	r2, r3, #4
 8121a96:	681b      	ldr	r3, [r3, #0]
 8121a98:	9203      	str	r2, [sp, #12]
 8121a9a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8121a9e:	3402      	adds	r4, #2
 8121aa0:	9305      	str	r3, [sp, #20]
 8121aa2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8121b78 <_vfiprintf_r+0x22c>
 8121aa6:	7821      	ldrb	r1, [r4, #0]
 8121aa8:	2203      	movs	r2, #3
 8121aaa:	4650      	mov	r0, sl
 8121aac:	f7de fc18 	bl	81002e0 <memchr>
 8121ab0:	b138      	cbz	r0, 8121ac2 <_vfiprintf_r+0x176>
 8121ab2:	9b04      	ldr	r3, [sp, #16]
 8121ab4:	eba0 000a 	sub.w	r0, r0, sl
 8121ab8:	2240      	movs	r2, #64	@ 0x40
 8121aba:	4082      	lsls	r2, r0
 8121abc:	4313      	orrs	r3, r2
 8121abe:	3401      	adds	r4, #1
 8121ac0:	9304      	str	r3, [sp, #16]
 8121ac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8121ac6:	4829      	ldr	r0, [pc, #164]	@ (8121b6c <_vfiprintf_r+0x220>)
 8121ac8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8121acc:	2206      	movs	r2, #6
 8121ace:	f7de fc07 	bl	81002e0 <memchr>
 8121ad2:	2800      	cmp	r0, #0
 8121ad4:	d03f      	beq.n	8121b56 <_vfiprintf_r+0x20a>
 8121ad6:	4b26      	ldr	r3, [pc, #152]	@ (8121b70 <_vfiprintf_r+0x224>)
 8121ad8:	bb1b      	cbnz	r3, 8121b22 <_vfiprintf_r+0x1d6>
 8121ada:	9b03      	ldr	r3, [sp, #12]
 8121adc:	3307      	adds	r3, #7
 8121ade:	f023 0307 	bic.w	r3, r3, #7
 8121ae2:	3308      	adds	r3, #8
 8121ae4:	9303      	str	r3, [sp, #12]
 8121ae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8121ae8:	443b      	add	r3, r7
 8121aea:	9309      	str	r3, [sp, #36]	@ 0x24
 8121aec:	e76a      	b.n	81219c4 <_vfiprintf_r+0x78>
 8121aee:	fb0c 3202 	mla	r2, ip, r2, r3
 8121af2:	460c      	mov	r4, r1
 8121af4:	2001      	movs	r0, #1
 8121af6:	e7a8      	b.n	8121a4a <_vfiprintf_r+0xfe>
 8121af8:	2300      	movs	r3, #0
 8121afa:	3401      	adds	r4, #1
 8121afc:	9305      	str	r3, [sp, #20]
 8121afe:	4619      	mov	r1, r3
 8121b00:	f04f 0c0a 	mov.w	ip, #10
 8121b04:	4620      	mov	r0, r4
 8121b06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8121b0a:	3a30      	subs	r2, #48	@ 0x30
 8121b0c:	2a09      	cmp	r2, #9
 8121b0e:	d903      	bls.n	8121b18 <_vfiprintf_r+0x1cc>
 8121b10:	2b00      	cmp	r3, #0
 8121b12:	d0c6      	beq.n	8121aa2 <_vfiprintf_r+0x156>
 8121b14:	9105      	str	r1, [sp, #20]
 8121b16:	e7c4      	b.n	8121aa2 <_vfiprintf_r+0x156>
 8121b18:	fb0c 2101 	mla	r1, ip, r1, r2
 8121b1c:	4604      	mov	r4, r0
 8121b1e:	2301      	movs	r3, #1
 8121b20:	e7f0      	b.n	8121b04 <_vfiprintf_r+0x1b8>
 8121b22:	ab03      	add	r3, sp, #12
 8121b24:	9300      	str	r3, [sp, #0]
 8121b26:	462a      	mov	r2, r5
 8121b28:	4b12      	ldr	r3, [pc, #72]	@ (8121b74 <_vfiprintf_r+0x228>)
 8121b2a:	a904      	add	r1, sp, #16
 8121b2c:	4630      	mov	r0, r6
 8121b2e:	f3af 8000 	nop.w
 8121b32:	4607      	mov	r7, r0
 8121b34:	1c78      	adds	r0, r7, #1
 8121b36:	d1d6      	bne.n	8121ae6 <_vfiprintf_r+0x19a>
 8121b38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8121b3a:	07d9      	lsls	r1, r3, #31
 8121b3c:	d405      	bmi.n	8121b4a <_vfiprintf_r+0x1fe>
 8121b3e:	89ab      	ldrh	r3, [r5, #12]
 8121b40:	059a      	lsls	r2, r3, #22
 8121b42:	d402      	bmi.n	8121b4a <_vfiprintf_r+0x1fe>
 8121b44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8121b46:	f000 fe81 	bl	812284c <__retarget_lock_release_recursive>
 8121b4a:	89ab      	ldrh	r3, [r5, #12]
 8121b4c:	065b      	lsls	r3, r3, #25
 8121b4e:	f53f af1f 	bmi.w	8121990 <_vfiprintf_r+0x44>
 8121b52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8121b54:	e71e      	b.n	8121994 <_vfiprintf_r+0x48>
 8121b56:	ab03      	add	r3, sp, #12
 8121b58:	9300      	str	r3, [sp, #0]
 8121b5a:	462a      	mov	r2, r5
 8121b5c:	4b05      	ldr	r3, [pc, #20]	@ (8121b74 <_vfiprintf_r+0x228>)
 8121b5e:	a904      	add	r1, sp, #16
 8121b60:	4630      	mov	r0, r6
 8121b62:	f000 f883 	bl	8121c6c <_printf_i>
 8121b66:	e7e4      	b.n	8121b32 <_vfiprintf_r+0x1e6>
 8121b68:	08128ca8 	.word	0x08128ca8
 8121b6c:	08128cb2 	.word	0x08128cb2
 8121b70:	00000000 	.word	0x00000000
 8121b74:	08121927 	.word	0x08121927
 8121b78:	08128cae 	.word	0x08128cae

08121b7c <vfiprintf>:
 8121b7c:	4613      	mov	r3, r2
 8121b7e:	460a      	mov	r2, r1
 8121b80:	4601      	mov	r1, r0
 8121b82:	4802      	ldr	r0, [pc, #8]	@ (8121b8c <vfiprintf+0x10>)
 8121b84:	6800      	ldr	r0, [r0, #0]
 8121b86:	f7ff bee1 	b.w	812194c <_vfiprintf_r>
 8121b8a:	bf00      	nop
 8121b8c:	10000040 	.word	0x10000040

08121b90 <_printf_common>:
 8121b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8121b94:	4616      	mov	r6, r2
 8121b96:	4698      	mov	r8, r3
 8121b98:	688a      	ldr	r2, [r1, #8]
 8121b9a:	690b      	ldr	r3, [r1, #16]
 8121b9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8121ba0:	4293      	cmp	r3, r2
 8121ba2:	bfb8      	it	lt
 8121ba4:	4613      	movlt	r3, r2
 8121ba6:	6033      	str	r3, [r6, #0]
 8121ba8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8121bac:	4607      	mov	r7, r0
 8121bae:	460c      	mov	r4, r1
 8121bb0:	b10a      	cbz	r2, 8121bb6 <_printf_common+0x26>
 8121bb2:	3301      	adds	r3, #1
 8121bb4:	6033      	str	r3, [r6, #0]
 8121bb6:	6823      	ldr	r3, [r4, #0]
 8121bb8:	0699      	lsls	r1, r3, #26
 8121bba:	bf42      	ittt	mi
 8121bbc:	6833      	ldrmi	r3, [r6, #0]
 8121bbe:	3302      	addmi	r3, #2
 8121bc0:	6033      	strmi	r3, [r6, #0]
 8121bc2:	6825      	ldr	r5, [r4, #0]
 8121bc4:	f015 0506 	ands.w	r5, r5, #6
 8121bc8:	d106      	bne.n	8121bd8 <_printf_common+0x48>
 8121bca:	f104 0a19 	add.w	sl, r4, #25
 8121bce:	68e3      	ldr	r3, [r4, #12]
 8121bd0:	6832      	ldr	r2, [r6, #0]
 8121bd2:	1a9b      	subs	r3, r3, r2
 8121bd4:	42ab      	cmp	r3, r5
 8121bd6:	dc26      	bgt.n	8121c26 <_printf_common+0x96>
 8121bd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8121bdc:	6822      	ldr	r2, [r4, #0]
 8121bde:	3b00      	subs	r3, #0
 8121be0:	bf18      	it	ne
 8121be2:	2301      	movne	r3, #1
 8121be4:	0692      	lsls	r2, r2, #26
 8121be6:	d42b      	bmi.n	8121c40 <_printf_common+0xb0>
 8121be8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8121bec:	4641      	mov	r1, r8
 8121bee:	4638      	mov	r0, r7
 8121bf0:	47c8      	blx	r9
 8121bf2:	3001      	adds	r0, #1
 8121bf4:	d01e      	beq.n	8121c34 <_printf_common+0xa4>
 8121bf6:	6823      	ldr	r3, [r4, #0]
 8121bf8:	6922      	ldr	r2, [r4, #16]
 8121bfa:	f003 0306 	and.w	r3, r3, #6
 8121bfe:	2b04      	cmp	r3, #4
 8121c00:	bf02      	ittt	eq
 8121c02:	68e5      	ldreq	r5, [r4, #12]
 8121c04:	6833      	ldreq	r3, [r6, #0]
 8121c06:	1aed      	subeq	r5, r5, r3
 8121c08:	68a3      	ldr	r3, [r4, #8]
 8121c0a:	bf0c      	ite	eq
 8121c0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8121c10:	2500      	movne	r5, #0
 8121c12:	4293      	cmp	r3, r2
 8121c14:	bfc4      	itt	gt
 8121c16:	1a9b      	subgt	r3, r3, r2
 8121c18:	18ed      	addgt	r5, r5, r3
 8121c1a:	2600      	movs	r6, #0
 8121c1c:	341a      	adds	r4, #26
 8121c1e:	42b5      	cmp	r5, r6
 8121c20:	d11a      	bne.n	8121c58 <_printf_common+0xc8>
 8121c22:	2000      	movs	r0, #0
 8121c24:	e008      	b.n	8121c38 <_printf_common+0xa8>
 8121c26:	2301      	movs	r3, #1
 8121c28:	4652      	mov	r2, sl
 8121c2a:	4641      	mov	r1, r8
 8121c2c:	4638      	mov	r0, r7
 8121c2e:	47c8      	blx	r9
 8121c30:	3001      	adds	r0, #1
 8121c32:	d103      	bne.n	8121c3c <_printf_common+0xac>
 8121c34:	f04f 30ff 	mov.w	r0, #4294967295
 8121c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8121c3c:	3501      	adds	r5, #1
 8121c3e:	e7c6      	b.n	8121bce <_printf_common+0x3e>
 8121c40:	18e1      	adds	r1, r4, r3
 8121c42:	1c5a      	adds	r2, r3, #1
 8121c44:	2030      	movs	r0, #48	@ 0x30
 8121c46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8121c4a:	4422      	add	r2, r4
 8121c4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8121c50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8121c54:	3302      	adds	r3, #2
 8121c56:	e7c7      	b.n	8121be8 <_printf_common+0x58>
 8121c58:	2301      	movs	r3, #1
 8121c5a:	4622      	mov	r2, r4
 8121c5c:	4641      	mov	r1, r8
 8121c5e:	4638      	mov	r0, r7
 8121c60:	47c8      	blx	r9
 8121c62:	3001      	adds	r0, #1
 8121c64:	d0e6      	beq.n	8121c34 <_printf_common+0xa4>
 8121c66:	3601      	adds	r6, #1
 8121c68:	e7d9      	b.n	8121c1e <_printf_common+0x8e>
	...

08121c6c <_printf_i>:
 8121c6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8121c70:	7e0f      	ldrb	r7, [r1, #24]
 8121c72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8121c74:	2f78      	cmp	r7, #120	@ 0x78
 8121c76:	4691      	mov	r9, r2
 8121c78:	4680      	mov	r8, r0
 8121c7a:	460c      	mov	r4, r1
 8121c7c:	469a      	mov	sl, r3
 8121c7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8121c82:	d807      	bhi.n	8121c94 <_printf_i+0x28>
 8121c84:	2f62      	cmp	r7, #98	@ 0x62
 8121c86:	d80a      	bhi.n	8121c9e <_printf_i+0x32>
 8121c88:	2f00      	cmp	r7, #0
 8121c8a:	f000 80d2 	beq.w	8121e32 <_printf_i+0x1c6>
 8121c8e:	2f58      	cmp	r7, #88	@ 0x58
 8121c90:	f000 80b9 	beq.w	8121e06 <_printf_i+0x19a>
 8121c94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8121c98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8121c9c:	e03a      	b.n	8121d14 <_printf_i+0xa8>
 8121c9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8121ca2:	2b15      	cmp	r3, #21
 8121ca4:	d8f6      	bhi.n	8121c94 <_printf_i+0x28>
 8121ca6:	a101      	add	r1, pc, #4	@ (adr r1, 8121cac <_printf_i+0x40>)
 8121ca8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8121cac:	08121d05 	.word	0x08121d05
 8121cb0:	08121d19 	.word	0x08121d19
 8121cb4:	08121c95 	.word	0x08121c95
 8121cb8:	08121c95 	.word	0x08121c95
 8121cbc:	08121c95 	.word	0x08121c95
 8121cc0:	08121c95 	.word	0x08121c95
 8121cc4:	08121d19 	.word	0x08121d19
 8121cc8:	08121c95 	.word	0x08121c95
 8121ccc:	08121c95 	.word	0x08121c95
 8121cd0:	08121c95 	.word	0x08121c95
 8121cd4:	08121c95 	.word	0x08121c95
 8121cd8:	08121e19 	.word	0x08121e19
 8121cdc:	08121d43 	.word	0x08121d43
 8121ce0:	08121dd3 	.word	0x08121dd3
 8121ce4:	08121c95 	.word	0x08121c95
 8121ce8:	08121c95 	.word	0x08121c95
 8121cec:	08121e3b 	.word	0x08121e3b
 8121cf0:	08121c95 	.word	0x08121c95
 8121cf4:	08121d43 	.word	0x08121d43
 8121cf8:	08121c95 	.word	0x08121c95
 8121cfc:	08121c95 	.word	0x08121c95
 8121d00:	08121ddb 	.word	0x08121ddb
 8121d04:	6833      	ldr	r3, [r6, #0]
 8121d06:	1d1a      	adds	r2, r3, #4
 8121d08:	681b      	ldr	r3, [r3, #0]
 8121d0a:	6032      	str	r2, [r6, #0]
 8121d0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8121d10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8121d14:	2301      	movs	r3, #1
 8121d16:	e09d      	b.n	8121e54 <_printf_i+0x1e8>
 8121d18:	6833      	ldr	r3, [r6, #0]
 8121d1a:	6820      	ldr	r0, [r4, #0]
 8121d1c:	1d19      	adds	r1, r3, #4
 8121d1e:	6031      	str	r1, [r6, #0]
 8121d20:	0606      	lsls	r6, r0, #24
 8121d22:	d501      	bpl.n	8121d28 <_printf_i+0xbc>
 8121d24:	681d      	ldr	r5, [r3, #0]
 8121d26:	e003      	b.n	8121d30 <_printf_i+0xc4>
 8121d28:	0645      	lsls	r5, r0, #25
 8121d2a:	d5fb      	bpl.n	8121d24 <_printf_i+0xb8>
 8121d2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8121d30:	2d00      	cmp	r5, #0
 8121d32:	da03      	bge.n	8121d3c <_printf_i+0xd0>
 8121d34:	232d      	movs	r3, #45	@ 0x2d
 8121d36:	426d      	negs	r5, r5
 8121d38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8121d3c:	4859      	ldr	r0, [pc, #356]	@ (8121ea4 <_printf_i+0x238>)
 8121d3e:	230a      	movs	r3, #10
 8121d40:	e011      	b.n	8121d66 <_printf_i+0xfa>
 8121d42:	6821      	ldr	r1, [r4, #0]
 8121d44:	6833      	ldr	r3, [r6, #0]
 8121d46:	0608      	lsls	r0, r1, #24
 8121d48:	f853 5b04 	ldr.w	r5, [r3], #4
 8121d4c:	d402      	bmi.n	8121d54 <_printf_i+0xe8>
 8121d4e:	0649      	lsls	r1, r1, #25
 8121d50:	bf48      	it	mi
 8121d52:	b2ad      	uxthmi	r5, r5
 8121d54:	2f6f      	cmp	r7, #111	@ 0x6f
 8121d56:	4853      	ldr	r0, [pc, #332]	@ (8121ea4 <_printf_i+0x238>)
 8121d58:	6033      	str	r3, [r6, #0]
 8121d5a:	bf14      	ite	ne
 8121d5c:	230a      	movne	r3, #10
 8121d5e:	2308      	moveq	r3, #8
 8121d60:	2100      	movs	r1, #0
 8121d62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8121d66:	6866      	ldr	r6, [r4, #4]
 8121d68:	60a6      	str	r6, [r4, #8]
 8121d6a:	2e00      	cmp	r6, #0
 8121d6c:	bfa2      	ittt	ge
 8121d6e:	6821      	ldrge	r1, [r4, #0]
 8121d70:	f021 0104 	bicge.w	r1, r1, #4
 8121d74:	6021      	strge	r1, [r4, #0]
 8121d76:	b90d      	cbnz	r5, 8121d7c <_printf_i+0x110>
 8121d78:	2e00      	cmp	r6, #0
 8121d7a:	d04b      	beq.n	8121e14 <_printf_i+0x1a8>
 8121d7c:	4616      	mov	r6, r2
 8121d7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8121d82:	fb03 5711 	mls	r7, r3, r1, r5
 8121d86:	5dc7      	ldrb	r7, [r0, r7]
 8121d88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8121d8c:	462f      	mov	r7, r5
 8121d8e:	42bb      	cmp	r3, r7
 8121d90:	460d      	mov	r5, r1
 8121d92:	d9f4      	bls.n	8121d7e <_printf_i+0x112>
 8121d94:	2b08      	cmp	r3, #8
 8121d96:	d10b      	bne.n	8121db0 <_printf_i+0x144>
 8121d98:	6823      	ldr	r3, [r4, #0]
 8121d9a:	07df      	lsls	r7, r3, #31
 8121d9c:	d508      	bpl.n	8121db0 <_printf_i+0x144>
 8121d9e:	6923      	ldr	r3, [r4, #16]
 8121da0:	6861      	ldr	r1, [r4, #4]
 8121da2:	4299      	cmp	r1, r3
 8121da4:	bfde      	ittt	le
 8121da6:	2330      	movle	r3, #48	@ 0x30
 8121da8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8121dac:	f106 36ff 	addle.w	r6, r6, #4294967295
 8121db0:	1b92      	subs	r2, r2, r6
 8121db2:	6122      	str	r2, [r4, #16]
 8121db4:	f8cd a000 	str.w	sl, [sp]
 8121db8:	464b      	mov	r3, r9
 8121dba:	aa03      	add	r2, sp, #12
 8121dbc:	4621      	mov	r1, r4
 8121dbe:	4640      	mov	r0, r8
 8121dc0:	f7ff fee6 	bl	8121b90 <_printf_common>
 8121dc4:	3001      	adds	r0, #1
 8121dc6:	d14a      	bne.n	8121e5e <_printf_i+0x1f2>
 8121dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8121dcc:	b004      	add	sp, #16
 8121dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8121dd2:	6823      	ldr	r3, [r4, #0]
 8121dd4:	f043 0320 	orr.w	r3, r3, #32
 8121dd8:	6023      	str	r3, [r4, #0]
 8121dda:	4833      	ldr	r0, [pc, #204]	@ (8121ea8 <_printf_i+0x23c>)
 8121ddc:	2778      	movs	r7, #120	@ 0x78
 8121dde:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8121de2:	6823      	ldr	r3, [r4, #0]
 8121de4:	6831      	ldr	r1, [r6, #0]
 8121de6:	061f      	lsls	r7, r3, #24
 8121de8:	f851 5b04 	ldr.w	r5, [r1], #4
 8121dec:	d402      	bmi.n	8121df4 <_printf_i+0x188>
 8121dee:	065f      	lsls	r7, r3, #25
 8121df0:	bf48      	it	mi
 8121df2:	b2ad      	uxthmi	r5, r5
 8121df4:	6031      	str	r1, [r6, #0]
 8121df6:	07d9      	lsls	r1, r3, #31
 8121df8:	bf44      	itt	mi
 8121dfa:	f043 0320 	orrmi.w	r3, r3, #32
 8121dfe:	6023      	strmi	r3, [r4, #0]
 8121e00:	b11d      	cbz	r5, 8121e0a <_printf_i+0x19e>
 8121e02:	2310      	movs	r3, #16
 8121e04:	e7ac      	b.n	8121d60 <_printf_i+0xf4>
 8121e06:	4827      	ldr	r0, [pc, #156]	@ (8121ea4 <_printf_i+0x238>)
 8121e08:	e7e9      	b.n	8121dde <_printf_i+0x172>
 8121e0a:	6823      	ldr	r3, [r4, #0]
 8121e0c:	f023 0320 	bic.w	r3, r3, #32
 8121e10:	6023      	str	r3, [r4, #0]
 8121e12:	e7f6      	b.n	8121e02 <_printf_i+0x196>
 8121e14:	4616      	mov	r6, r2
 8121e16:	e7bd      	b.n	8121d94 <_printf_i+0x128>
 8121e18:	6833      	ldr	r3, [r6, #0]
 8121e1a:	6825      	ldr	r5, [r4, #0]
 8121e1c:	6961      	ldr	r1, [r4, #20]
 8121e1e:	1d18      	adds	r0, r3, #4
 8121e20:	6030      	str	r0, [r6, #0]
 8121e22:	062e      	lsls	r6, r5, #24
 8121e24:	681b      	ldr	r3, [r3, #0]
 8121e26:	d501      	bpl.n	8121e2c <_printf_i+0x1c0>
 8121e28:	6019      	str	r1, [r3, #0]
 8121e2a:	e002      	b.n	8121e32 <_printf_i+0x1c6>
 8121e2c:	0668      	lsls	r0, r5, #25
 8121e2e:	d5fb      	bpl.n	8121e28 <_printf_i+0x1bc>
 8121e30:	8019      	strh	r1, [r3, #0]
 8121e32:	2300      	movs	r3, #0
 8121e34:	6123      	str	r3, [r4, #16]
 8121e36:	4616      	mov	r6, r2
 8121e38:	e7bc      	b.n	8121db4 <_printf_i+0x148>
 8121e3a:	6833      	ldr	r3, [r6, #0]
 8121e3c:	1d1a      	adds	r2, r3, #4
 8121e3e:	6032      	str	r2, [r6, #0]
 8121e40:	681e      	ldr	r6, [r3, #0]
 8121e42:	6862      	ldr	r2, [r4, #4]
 8121e44:	2100      	movs	r1, #0
 8121e46:	4630      	mov	r0, r6
 8121e48:	f7de fa4a 	bl	81002e0 <memchr>
 8121e4c:	b108      	cbz	r0, 8121e52 <_printf_i+0x1e6>
 8121e4e:	1b80      	subs	r0, r0, r6
 8121e50:	6060      	str	r0, [r4, #4]
 8121e52:	6863      	ldr	r3, [r4, #4]
 8121e54:	6123      	str	r3, [r4, #16]
 8121e56:	2300      	movs	r3, #0
 8121e58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8121e5c:	e7aa      	b.n	8121db4 <_printf_i+0x148>
 8121e5e:	6923      	ldr	r3, [r4, #16]
 8121e60:	4632      	mov	r2, r6
 8121e62:	4649      	mov	r1, r9
 8121e64:	4640      	mov	r0, r8
 8121e66:	47d0      	blx	sl
 8121e68:	3001      	adds	r0, #1
 8121e6a:	d0ad      	beq.n	8121dc8 <_printf_i+0x15c>
 8121e6c:	6823      	ldr	r3, [r4, #0]
 8121e6e:	079b      	lsls	r3, r3, #30
 8121e70:	d413      	bmi.n	8121e9a <_printf_i+0x22e>
 8121e72:	68e0      	ldr	r0, [r4, #12]
 8121e74:	9b03      	ldr	r3, [sp, #12]
 8121e76:	4298      	cmp	r0, r3
 8121e78:	bfb8      	it	lt
 8121e7a:	4618      	movlt	r0, r3
 8121e7c:	e7a6      	b.n	8121dcc <_printf_i+0x160>
 8121e7e:	2301      	movs	r3, #1
 8121e80:	4632      	mov	r2, r6
 8121e82:	4649      	mov	r1, r9
 8121e84:	4640      	mov	r0, r8
 8121e86:	47d0      	blx	sl
 8121e88:	3001      	adds	r0, #1
 8121e8a:	d09d      	beq.n	8121dc8 <_printf_i+0x15c>
 8121e8c:	3501      	adds	r5, #1
 8121e8e:	68e3      	ldr	r3, [r4, #12]
 8121e90:	9903      	ldr	r1, [sp, #12]
 8121e92:	1a5b      	subs	r3, r3, r1
 8121e94:	42ab      	cmp	r3, r5
 8121e96:	dcf2      	bgt.n	8121e7e <_printf_i+0x212>
 8121e98:	e7eb      	b.n	8121e72 <_printf_i+0x206>
 8121e9a:	2500      	movs	r5, #0
 8121e9c:	f104 0619 	add.w	r6, r4, #25
 8121ea0:	e7f5      	b.n	8121e8e <_printf_i+0x222>
 8121ea2:	bf00      	nop
 8121ea4:	08128cb9 	.word	0x08128cb9
 8121ea8:	08128cca 	.word	0x08128cca

08121eac <__sflush_r>:
 8121eac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8121eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8121eb4:	0716      	lsls	r6, r2, #28
 8121eb6:	4605      	mov	r5, r0
 8121eb8:	460c      	mov	r4, r1
 8121eba:	d454      	bmi.n	8121f66 <__sflush_r+0xba>
 8121ebc:	684b      	ldr	r3, [r1, #4]
 8121ebe:	2b00      	cmp	r3, #0
 8121ec0:	dc02      	bgt.n	8121ec8 <__sflush_r+0x1c>
 8121ec2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8121ec4:	2b00      	cmp	r3, #0
 8121ec6:	dd48      	ble.n	8121f5a <__sflush_r+0xae>
 8121ec8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8121eca:	2e00      	cmp	r6, #0
 8121ecc:	d045      	beq.n	8121f5a <__sflush_r+0xae>
 8121ece:	2300      	movs	r3, #0
 8121ed0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8121ed4:	682f      	ldr	r7, [r5, #0]
 8121ed6:	6a21      	ldr	r1, [r4, #32]
 8121ed8:	602b      	str	r3, [r5, #0]
 8121eda:	d030      	beq.n	8121f3e <__sflush_r+0x92>
 8121edc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8121ede:	89a3      	ldrh	r3, [r4, #12]
 8121ee0:	0759      	lsls	r1, r3, #29
 8121ee2:	d505      	bpl.n	8121ef0 <__sflush_r+0x44>
 8121ee4:	6863      	ldr	r3, [r4, #4]
 8121ee6:	1ad2      	subs	r2, r2, r3
 8121ee8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8121eea:	b10b      	cbz	r3, 8121ef0 <__sflush_r+0x44>
 8121eec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8121eee:	1ad2      	subs	r2, r2, r3
 8121ef0:	2300      	movs	r3, #0
 8121ef2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8121ef4:	6a21      	ldr	r1, [r4, #32]
 8121ef6:	4628      	mov	r0, r5
 8121ef8:	47b0      	blx	r6
 8121efa:	1c43      	adds	r3, r0, #1
 8121efc:	89a3      	ldrh	r3, [r4, #12]
 8121efe:	d106      	bne.n	8121f0e <__sflush_r+0x62>
 8121f00:	6829      	ldr	r1, [r5, #0]
 8121f02:	291d      	cmp	r1, #29
 8121f04:	d82b      	bhi.n	8121f5e <__sflush_r+0xb2>
 8121f06:	4a2a      	ldr	r2, [pc, #168]	@ (8121fb0 <__sflush_r+0x104>)
 8121f08:	410a      	asrs	r2, r1
 8121f0a:	07d6      	lsls	r6, r2, #31
 8121f0c:	d427      	bmi.n	8121f5e <__sflush_r+0xb2>
 8121f0e:	2200      	movs	r2, #0
 8121f10:	6062      	str	r2, [r4, #4]
 8121f12:	04d9      	lsls	r1, r3, #19
 8121f14:	6922      	ldr	r2, [r4, #16]
 8121f16:	6022      	str	r2, [r4, #0]
 8121f18:	d504      	bpl.n	8121f24 <__sflush_r+0x78>
 8121f1a:	1c42      	adds	r2, r0, #1
 8121f1c:	d101      	bne.n	8121f22 <__sflush_r+0x76>
 8121f1e:	682b      	ldr	r3, [r5, #0]
 8121f20:	b903      	cbnz	r3, 8121f24 <__sflush_r+0x78>
 8121f22:	6560      	str	r0, [r4, #84]	@ 0x54
 8121f24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8121f26:	602f      	str	r7, [r5, #0]
 8121f28:	b1b9      	cbz	r1, 8121f5a <__sflush_r+0xae>
 8121f2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8121f2e:	4299      	cmp	r1, r3
 8121f30:	d002      	beq.n	8121f38 <__sflush_r+0x8c>
 8121f32:	4628      	mov	r0, r5
 8121f34:	f000 fcb8 	bl	81228a8 <_free_r>
 8121f38:	2300      	movs	r3, #0
 8121f3a:	6363      	str	r3, [r4, #52]	@ 0x34
 8121f3c:	e00d      	b.n	8121f5a <__sflush_r+0xae>
 8121f3e:	2301      	movs	r3, #1
 8121f40:	4628      	mov	r0, r5
 8121f42:	47b0      	blx	r6
 8121f44:	4602      	mov	r2, r0
 8121f46:	1c50      	adds	r0, r2, #1
 8121f48:	d1c9      	bne.n	8121ede <__sflush_r+0x32>
 8121f4a:	682b      	ldr	r3, [r5, #0]
 8121f4c:	2b00      	cmp	r3, #0
 8121f4e:	d0c6      	beq.n	8121ede <__sflush_r+0x32>
 8121f50:	2b1d      	cmp	r3, #29
 8121f52:	d001      	beq.n	8121f58 <__sflush_r+0xac>
 8121f54:	2b16      	cmp	r3, #22
 8121f56:	d11e      	bne.n	8121f96 <__sflush_r+0xea>
 8121f58:	602f      	str	r7, [r5, #0]
 8121f5a:	2000      	movs	r0, #0
 8121f5c:	e022      	b.n	8121fa4 <__sflush_r+0xf8>
 8121f5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8121f62:	b21b      	sxth	r3, r3
 8121f64:	e01b      	b.n	8121f9e <__sflush_r+0xf2>
 8121f66:	690f      	ldr	r7, [r1, #16]
 8121f68:	2f00      	cmp	r7, #0
 8121f6a:	d0f6      	beq.n	8121f5a <__sflush_r+0xae>
 8121f6c:	0793      	lsls	r3, r2, #30
 8121f6e:	680e      	ldr	r6, [r1, #0]
 8121f70:	bf08      	it	eq
 8121f72:	694b      	ldreq	r3, [r1, #20]
 8121f74:	600f      	str	r7, [r1, #0]
 8121f76:	bf18      	it	ne
 8121f78:	2300      	movne	r3, #0
 8121f7a:	eba6 0807 	sub.w	r8, r6, r7
 8121f7e:	608b      	str	r3, [r1, #8]
 8121f80:	f1b8 0f00 	cmp.w	r8, #0
 8121f84:	dde9      	ble.n	8121f5a <__sflush_r+0xae>
 8121f86:	6a21      	ldr	r1, [r4, #32]
 8121f88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8121f8a:	4643      	mov	r3, r8
 8121f8c:	463a      	mov	r2, r7
 8121f8e:	4628      	mov	r0, r5
 8121f90:	47b0      	blx	r6
 8121f92:	2800      	cmp	r0, #0
 8121f94:	dc08      	bgt.n	8121fa8 <__sflush_r+0xfc>
 8121f96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8121f9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8121f9e:	81a3      	strh	r3, [r4, #12]
 8121fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8121fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8121fa8:	4407      	add	r7, r0
 8121faa:	eba8 0800 	sub.w	r8, r8, r0
 8121fae:	e7e7      	b.n	8121f80 <__sflush_r+0xd4>
 8121fb0:	dfbffffe 	.word	0xdfbffffe

08121fb4 <_fflush_r>:
 8121fb4:	b538      	push	{r3, r4, r5, lr}
 8121fb6:	690b      	ldr	r3, [r1, #16]
 8121fb8:	4605      	mov	r5, r0
 8121fba:	460c      	mov	r4, r1
 8121fbc:	b913      	cbnz	r3, 8121fc4 <_fflush_r+0x10>
 8121fbe:	2500      	movs	r5, #0
 8121fc0:	4628      	mov	r0, r5
 8121fc2:	bd38      	pop	{r3, r4, r5, pc}
 8121fc4:	b118      	cbz	r0, 8121fce <_fflush_r+0x1a>
 8121fc6:	6a03      	ldr	r3, [r0, #32]
 8121fc8:	b90b      	cbnz	r3, 8121fce <_fflush_r+0x1a>
 8121fca:	f000 f8bb 	bl	8122144 <__sinit>
 8121fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8121fd2:	2b00      	cmp	r3, #0
 8121fd4:	d0f3      	beq.n	8121fbe <_fflush_r+0xa>
 8121fd6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8121fd8:	07d0      	lsls	r0, r2, #31
 8121fda:	d404      	bmi.n	8121fe6 <_fflush_r+0x32>
 8121fdc:	0599      	lsls	r1, r3, #22
 8121fde:	d402      	bmi.n	8121fe6 <_fflush_r+0x32>
 8121fe0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8121fe2:	f000 fc32 	bl	812284a <__retarget_lock_acquire_recursive>
 8121fe6:	4628      	mov	r0, r5
 8121fe8:	4621      	mov	r1, r4
 8121fea:	f7ff ff5f 	bl	8121eac <__sflush_r>
 8121fee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8121ff0:	07da      	lsls	r2, r3, #31
 8121ff2:	4605      	mov	r5, r0
 8121ff4:	d4e4      	bmi.n	8121fc0 <_fflush_r+0xc>
 8121ff6:	89a3      	ldrh	r3, [r4, #12]
 8121ff8:	059b      	lsls	r3, r3, #22
 8121ffa:	d4e1      	bmi.n	8121fc0 <_fflush_r+0xc>
 8121ffc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8121ffe:	f000 fc25 	bl	812284c <__retarget_lock_release_recursive>
 8122002:	e7dd      	b.n	8121fc0 <_fflush_r+0xc>

08122004 <fflush>:
 8122004:	4601      	mov	r1, r0
 8122006:	b920      	cbnz	r0, 8122012 <fflush+0xe>
 8122008:	4a04      	ldr	r2, [pc, #16]	@ (812201c <fflush+0x18>)
 812200a:	4905      	ldr	r1, [pc, #20]	@ (8122020 <fflush+0x1c>)
 812200c:	4805      	ldr	r0, [pc, #20]	@ (8122024 <fflush+0x20>)
 812200e:	f000 b8b1 	b.w	8122174 <_fwalk_sglue>
 8122012:	4b05      	ldr	r3, [pc, #20]	@ (8122028 <fflush+0x24>)
 8122014:	6818      	ldr	r0, [r3, #0]
 8122016:	f7ff bfcd 	b.w	8121fb4 <_fflush_r>
 812201a:	bf00      	nop
 812201c:	10000034 	.word	0x10000034
 8122020:	08121fb5 	.word	0x08121fb5
 8122024:	10000044 	.word	0x10000044
 8122028:	10000040 	.word	0x10000040

0812202c <std>:
 812202c:	2300      	movs	r3, #0
 812202e:	b510      	push	{r4, lr}
 8122030:	4604      	mov	r4, r0
 8122032:	e9c0 3300 	strd	r3, r3, [r0]
 8122036:	e9c0 3304 	strd	r3, r3, [r0, #16]
 812203a:	6083      	str	r3, [r0, #8]
 812203c:	8181      	strh	r1, [r0, #12]
 812203e:	6643      	str	r3, [r0, #100]	@ 0x64
 8122040:	81c2      	strh	r2, [r0, #14]
 8122042:	6183      	str	r3, [r0, #24]
 8122044:	4619      	mov	r1, r3
 8122046:	2208      	movs	r2, #8
 8122048:	305c      	adds	r0, #92	@ 0x5c
 812204a:	f000 fab1 	bl	81225b0 <memset>
 812204e:	4b0d      	ldr	r3, [pc, #52]	@ (8122084 <std+0x58>)
 8122050:	6263      	str	r3, [r4, #36]	@ 0x24
 8122052:	4b0d      	ldr	r3, [pc, #52]	@ (8122088 <std+0x5c>)
 8122054:	62a3      	str	r3, [r4, #40]	@ 0x28
 8122056:	4b0d      	ldr	r3, [pc, #52]	@ (812208c <std+0x60>)
 8122058:	62e3      	str	r3, [r4, #44]	@ 0x2c
 812205a:	4b0d      	ldr	r3, [pc, #52]	@ (8122090 <std+0x64>)
 812205c:	6323      	str	r3, [r4, #48]	@ 0x30
 812205e:	4b0d      	ldr	r3, [pc, #52]	@ (8122094 <std+0x68>)
 8122060:	6224      	str	r4, [r4, #32]
 8122062:	429c      	cmp	r4, r3
 8122064:	d006      	beq.n	8122074 <std+0x48>
 8122066:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 812206a:	4294      	cmp	r4, r2
 812206c:	d002      	beq.n	8122074 <std+0x48>
 812206e:	33d0      	adds	r3, #208	@ 0xd0
 8122070:	429c      	cmp	r4, r3
 8122072:	d105      	bne.n	8122080 <std+0x54>
 8122074:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8122078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 812207c:	f000 bbe4 	b.w	8122848 <__retarget_lock_init_recursive>
 8122080:	bd10      	pop	{r4, pc}
 8122082:	bf00      	nop
 8122084:	081223a9 	.word	0x081223a9
 8122088:	081223cf 	.word	0x081223cf
 812208c:	08122407 	.word	0x08122407
 8122090:	0812242b 	.word	0x0812242b
 8122094:	10011ed8 	.word	0x10011ed8

08122098 <stdio_exit_handler>:
 8122098:	4a02      	ldr	r2, [pc, #8]	@ (81220a4 <stdio_exit_handler+0xc>)
 812209a:	4903      	ldr	r1, [pc, #12]	@ (81220a8 <stdio_exit_handler+0x10>)
 812209c:	4803      	ldr	r0, [pc, #12]	@ (81220ac <stdio_exit_handler+0x14>)
 812209e:	f000 b869 	b.w	8122174 <_fwalk_sglue>
 81220a2:	bf00      	nop
 81220a4:	10000034 	.word	0x10000034
 81220a8:	08121fb5 	.word	0x08121fb5
 81220ac:	10000044 	.word	0x10000044

081220b0 <cleanup_stdio>:
 81220b0:	6841      	ldr	r1, [r0, #4]
 81220b2:	4b0c      	ldr	r3, [pc, #48]	@ (81220e4 <cleanup_stdio+0x34>)
 81220b4:	4299      	cmp	r1, r3
 81220b6:	b510      	push	{r4, lr}
 81220b8:	4604      	mov	r4, r0
 81220ba:	d001      	beq.n	81220c0 <cleanup_stdio+0x10>
 81220bc:	f7ff ff7a 	bl	8121fb4 <_fflush_r>
 81220c0:	68a1      	ldr	r1, [r4, #8]
 81220c2:	4b09      	ldr	r3, [pc, #36]	@ (81220e8 <cleanup_stdio+0x38>)
 81220c4:	4299      	cmp	r1, r3
 81220c6:	d002      	beq.n	81220ce <cleanup_stdio+0x1e>
 81220c8:	4620      	mov	r0, r4
 81220ca:	f7ff ff73 	bl	8121fb4 <_fflush_r>
 81220ce:	68e1      	ldr	r1, [r4, #12]
 81220d0:	4b06      	ldr	r3, [pc, #24]	@ (81220ec <cleanup_stdio+0x3c>)
 81220d2:	4299      	cmp	r1, r3
 81220d4:	d004      	beq.n	81220e0 <cleanup_stdio+0x30>
 81220d6:	4620      	mov	r0, r4
 81220d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81220dc:	f7ff bf6a 	b.w	8121fb4 <_fflush_r>
 81220e0:	bd10      	pop	{r4, pc}
 81220e2:	bf00      	nop
 81220e4:	10011ed8 	.word	0x10011ed8
 81220e8:	10011f40 	.word	0x10011f40
 81220ec:	10011fa8 	.word	0x10011fa8

081220f0 <global_stdio_init.part.0>:
 81220f0:	b510      	push	{r4, lr}
 81220f2:	4b0b      	ldr	r3, [pc, #44]	@ (8122120 <global_stdio_init.part.0+0x30>)
 81220f4:	4c0b      	ldr	r4, [pc, #44]	@ (8122124 <global_stdio_init.part.0+0x34>)
 81220f6:	4a0c      	ldr	r2, [pc, #48]	@ (8122128 <global_stdio_init.part.0+0x38>)
 81220f8:	601a      	str	r2, [r3, #0]
 81220fa:	4620      	mov	r0, r4
 81220fc:	2200      	movs	r2, #0
 81220fe:	2104      	movs	r1, #4
 8122100:	f7ff ff94 	bl	812202c <std>
 8122104:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8122108:	2201      	movs	r2, #1
 812210a:	2109      	movs	r1, #9
 812210c:	f7ff ff8e 	bl	812202c <std>
 8122110:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8122114:	2202      	movs	r2, #2
 8122116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 812211a:	2112      	movs	r1, #18
 812211c:	f7ff bf86 	b.w	812202c <std>
 8122120:	10012010 	.word	0x10012010
 8122124:	10011ed8 	.word	0x10011ed8
 8122128:	08122099 	.word	0x08122099

0812212c <__sfp_lock_acquire>:
 812212c:	4801      	ldr	r0, [pc, #4]	@ (8122134 <__sfp_lock_acquire+0x8>)
 812212e:	f000 bb8c 	b.w	812284a <__retarget_lock_acquire_recursive>
 8122132:	bf00      	nop
 8122134:	10012019 	.word	0x10012019

08122138 <__sfp_lock_release>:
 8122138:	4801      	ldr	r0, [pc, #4]	@ (8122140 <__sfp_lock_release+0x8>)
 812213a:	f000 bb87 	b.w	812284c <__retarget_lock_release_recursive>
 812213e:	bf00      	nop
 8122140:	10012019 	.word	0x10012019

08122144 <__sinit>:
 8122144:	b510      	push	{r4, lr}
 8122146:	4604      	mov	r4, r0
 8122148:	f7ff fff0 	bl	812212c <__sfp_lock_acquire>
 812214c:	6a23      	ldr	r3, [r4, #32]
 812214e:	b11b      	cbz	r3, 8122158 <__sinit+0x14>
 8122150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8122154:	f7ff bff0 	b.w	8122138 <__sfp_lock_release>
 8122158:	4b04      	ldr	r3, [pc, #16]	@ (812216c <__sinit+0x28>)
 812215a:	6223      	str	r3, [r4, #32]
 812215c:	4b04      	ldr	r3, [pc, #16]	@ (8122170 <__sinit+0x2c>)
 812215e:	681b      	ldr	r3, [r3, #0]
 8122160:	2b00      	cmp	r3, #0
 8122162:	d1f5      	bne.n	8122150 <__sinit+0xc>
 8122164:	f7ff ffc4 	bl	81220f0 <global_stdio_init.part.0>
 8122168:	e7f2      	b.n	8122150 <__sinit+0xc>
 812216a:	bf00      	nop
 812216c:	081220b1 	.word	0x081220b1
 8122170:	10012010 	.word	0x10012010

08122174 <_fwalk_sglue>:
 8122174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8122178:	4607      	mov	r7, r0
 812217a:	4688      	mov	r8, r1
 812217c:	4614      	mov	r4, r2
 812217e:	2600      	movs	r6, #0
 8122180:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8122184:	f1b9 0901 	subs.w	r9, r9, #1
 8122188:	d505      	bpl.n	8122196 <_fwalk_sglue+0x22>
 812218a:	6824      	ldr	r4, [r4, #0]
 812218c:	2c00      	cmp	r4, #0
 812218e:	d1f7      	bne.n	8122180 <_fwalk_sglue+0xc>
 8122190:	4630      	mov	r0, r6
 8122192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8122196:	89ab      	ldrh	r3, [r5, #12]
 8122198:	2b01      	cmp	r3, #1
 812219a:	d907      	bls.n	81221ac <_fwalk_sglue+0x38>
 812219c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 81221a0:	3301      	adds	r3, #1
 81221a2:	d003      	beq.n	81221ac <_fwalk_sglue+0x38>
 81221a4:	4629      	mov	r1, r5
 81221a6:	4638      	mov	r0, r7
 81221a8:	47c0      	blx	r8
 81221aa:	4306      	orrs	r6, r0
 81221ac:	3568      	adds	r5, #104	@ 0x68
 81221ae:	e7e9      	b.n	8122184 <_fwalk_sglue+0x10>

081221b0 <_fwrite_r>:
 81221b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81221b4:	9c08      	ldr	r4, [sp, #32]
 81221b6:	468a      	mov	sl, r1
 81221b8:	4690      	mov	r8, r2
 81221ba:	fb02 f903 	mul.w	r9, r2, r3
 81221be:	4606      	mov	r6, r0
 81221c0:	b118      	cbz	r0, 81221ca <_fwrite_r+0x1a>
 81221c2:	6a03      	ldr	r3, [r0, #32]
 81221c4:	b90b      	cbnz	r3, 81221ca <_fwrite_r+0x1a>
 81221c6:	f7ff ffbd 	bl	8122144 <__sinit>
 81221ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 81221cc:	07dd      	lsls	r5, r3, #31
 81221ce:	d405      	bmi.n	81221dc <_fwrite_r+0x2c>
 81221d0:	89a3      	ldrh	r3, [r4, #12]
 81221d2:	0598      	lsls	r0, r3, #22
 81221d4:	d402      	bmi.n	81221dc <_fwrite_r+0x2c>
 81221d6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 81221d8:	f000 fb37 	bl	812284a <__retarget_lock_acquire_recursive>
 81221dc:	89a3      	ldrh	r3, [r4, #12]
 81221de:	0719      	lsls	r1, r3, #28
 81221e0:	d516      	bpl.n	8122210 <_fwrite_r+0x60>
 81221e2:	6923      	ldr	r3, [r4, #16]
 81221e4:	b1a3      	cbz	r3, 8122210 <_fwrite_r+0x60>
 81221e6:	2500      	movs	r5, #0
 81221e8:	454d      	cmp	r5, r9
 81221ea:	d01f      	beq.n	812222c <_fwrite_r+0x7c>
 81221ec:	68a7      	ldr	r7, [r4, #8]
 81221ee:	f81a 1005 	ldrb.w	r1, [sl, r5]
 81221f2:	3f01      	subs	r7, #1
 81221f4:	2f00      	cmp	r7, #0
 81221f6:	60a7      	str	r7, [r4, #8]
 81221f8:	da04      	bge.n	8122204 <_fwrite_r+0x54>
 81221fa:	69a3      	ldr	r3, [r4, #24]
 81221fc:	429f      	cmp	r7, r3
 81221fe:	db0f      	blt.n	8122220 <_fwrite_r+0x70>
 8122200:	290a      	cmp	r1, #10
 8122202:	d00d      	beq.n	8122220 <_fwrite_r+0x70>
 8122204:	6823      	ldr	r3, [r4, #0]
 8122206:	1c5a      	adds	r2, r3, #1
 8122208:	6022      	str	r2, [r4, #0]
 812220a:	7019      	strb	r1, [r3, #0]
 812220c:	3501      	adds	r5, #1
 812220e:	e7eb      	b.n	81221e8 <_fwrite_r+0x38>
 8122210:	4621      	mov	r1, r4
 8122212:	4630      	mov	r0, r6
 8122214:	f000 f94c 	bl	81224b0 <__swsetup_r>
 8122218:	2800      	cmp	r0, #0
 812221a:	d0e4      	beq.n	81221e6 <_fwrite_r+0x36>
 812221c:	2500      	movs	r5, #0
 812221e:	e005      	b.n	812222c <_fwrite_r+0x7c>
 8122220:	4622      	mov	r2, r4
 8122222:	4630      	mov	r0, r6
 8122224:	f000 f905 	bl	8122432 <__swbuf_r>
 8122228:	3001      	adds	r0, #1
 812222a:	d1ef      	bne.n	812220c <_fwrite_r+0x5c>
 812222c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 812222e:	07da      	lsls	r2, r3, #31
 8122230:	d405      	bmi.n	812223e <_fwrite_r+0x8e>
 8122232:	89a3      	ldrh	r3, [r4, #12]
 8122234:	059b      	lsls	r3, r3, #22
 8122236:	d402      	bmi.n	812223e <_fwrite_r+0x8e>
 8122238:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 812223a:	f000 fb07 	bl	812284c <__retarget_lock_release_recursive>
 812223e:	fbb5 f0f8 	udiv	r0, r5, r8
 8122242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08122248 <fwrite>:
 8122248:	b507      	push	{r0, r1, r2, lr}
 812224a:	9300      	str	r3, [sp, #0]
 812224c:	4613      	mov	r3, r2
 812224e:	460a      	mov	r2, r1
 8122250:	4601      	mov	r1, r0
 8122252:	4803      	ldr	r0, [pc, #12]	@ (8122260 <fwrite+0x18>)
 8122254:	6800      	ldr	r0, [r0, #0]
 8122256:	f7ff ffab 	bl	81221b0 <_fwrite_r>
 812225a:	b003      	add	sp, #12
 812225c:	f85d fb04 	ldr.w	pc, [sp], #4
 8122260:	10000040 	.word	0x10000040

08122264 <iprintf>:
 8122264:	b40f      	push	{r0, r1, r2, r3}
 8122266:	b507      	push	{r0, r1, r2, lr}
 8122268:	4906      	ldr	r1, [pc, #24]	@ (8122284 <iprintf+0x20>)
 812226a:	ab04      	add	r3, sp, #16
 812226c:	6808      	ldr	r0, [r1, #0]
 812226e:	f853 2b04 	ldr.w	r2, [r3], #4
 8122272:	6881      	ldr	r1, [r0, #8]
 8122274:	9301      	str	r3, [sp, #4]
 8122276:	f7ff fb69 	bl	812194c <_vfiprintf_r>
 812227a:	b003      	add	sp, #12
 812227c:	f85d eb04 	ldr.w	lr, [sp], #4
 8122280:	b004      	add	sp, #16
 8122282:	4770      	bx	lr
 8122284:	10000040 	.word	0x10000040

08122288 <putchar>:
 8122288:	4b02      	ldr	r3, [pc, #8]	@ (8122294 <putchar+0xc>)
 812228a:	4601      	mov	r1, r0
 812228c:	6818      	ldr	r0, [r3, #0]
 812228e:	6882      	ldr	r2, [r0, #8]
 8122290:	f000 bf10 	b.w	81230b4 <_putc_r>
 8122294:	10000040 	.word	0x10000040

08122298 <_puts_r>:
 8122298:	6a03      	ldr	r3, [r0, #32]
 812229a:	b570      	push	{r4, r5, r6, lr}
 812229c:	6884      	ldr	r4, [r0, #8]
 812229e:	4605      	mov	r5, r0
 81222a0:	460e      	mov	r6, r1
 81222a2:	b90b      	cbnz	r3, 81222a8 <_puts_r+0x10>
 81222a4:	f7ff ff4e 	bl	8122144 <__sinit>
 81222a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 81222aa:	07db      	lsls	r3, r3, #31
 81222ac:	d405      	bmi.n	81222ba <_puts_r+0x22>
 81222ae:	89a3      	ldrh	r3, [r4, #12]
 81222b0:	0598      	lsls	r0, r3, #22
 81222b2:	d402      	bmi.n	81222ba <_puts_r+0x22>
 81222b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 81222b6:	f000 fac8 	bl	812284a <__retarget_lock_acquire_recursive>
 81222ba:	89a3      	ldrh	r3, [r4, #12]
 81222bc:	0719      	lsls	r1, r3, #28
 81222be:	d502      	bpl.n	81222c6 <_puts_r+0x2e>
 81222c0:	6923      	ldr	r3, [r4, #16]
 81222c2:	2b00      	cmp	r3, #0
 81222c4:	d135      	bne.n	8122332 <_puts_r+0x9a>
 81222c6:	4621      	mov	r1, r4
 81222c8:	4628      	mov	r0, r5
 81222ca:	f000 f8f1 	bl	81224b0 <__swsetup_r>
 81222ce:	b380      	cbz	r0, 8122332 <_puts_r+0x9a>
 81222d0:	f04f 35ff 	mov.w	r5, #4294967295
 81222d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 81222d6:	07da      	lsls	r2, r3, #31
 81222d8:	d405      	bmi.n	81222e6 <_puts_r+0x4e>
 81222da:	89a3      	ldrh	r3, [r4, #12]
 81222dc:	059b      	lsls	r3, r3, #22
 81222de:	d402      	bmi.n	81222e6 <_puts_r+0x4e>
 81222e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 81222e2:	f000 fab3 	bl	812284c <__retarget_lock_release_recursive>
 81222e6:	4628      	mov	r0, r5
 81222e8:	bd70      	pop	{r4, r5, r6, pc}
 81222ea:	2b00      	cmp	r3, #0
 81222ec:	da04      	bge.n	81222f8 <_puts_r+0x60>
 81222ee:	69a2      	ldr	r2, [r4, #24]
 81222f0:	429a      	cmp	r2, r3
 81222f2:	dc17      	bgt.n	8122324 <_puts_r+0x8c>
 81222f4:	290a      	cmp	r1, #10
 81222f6:	d015      	beq.n	8122324 <_puts_r+0x8c>
 81222f8:	6823      	ldr	r3, [r4, #0]
 81222fa:	1c5a      	adds	r2, r3, #1
 81222fc:	6022      	str	r2, [r4, #0]
 81222fe:	7019      	strb	r1, [r3, #0]
 8122300:	68a3      	ldr	r3, [r4, #8]
 8122302:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8122306:	3b01      	subs	r3, #1
 8122308:	60a3      	str	r3, [r4, #8]
 812230a:	2900      	cmp	r1, #0
 812230c:	d1ed      	bne.n	81222ea <_puts_r+0x52>
 812230e:	2b00      	cmp	r3, #0
 8122310:	da11      	bge.n	8122336 <_puts_r+0x9e>
 8122312:	4622      	mov	r2, r4
 8122314:	210a      	movs	r1, #10
 8122316:	4628      	mov	r0, r5
 8122318:	f000 f88b 	bl	8122432 <__swbuf_r>
 812231c:	3001      	adds	r0, #1
 812231e:	d0d7      	beq.n	81222d0 <_puts_r+0x38>
 8122320:	250a      	movs	r5, #10
 8122322:	e7d7      	b.n	81222d4 <_puts_r+0x3c>
 8122324:	4622      	mov	r2, r4
 8122326:	4628      	mov	r0, r5
 8122328:	f000 f883 	bl	8122432 <__swbuf_r>
 812232c:	3001      	adds	r0, #1
 812232e:	d1e7      	bne.n	8122300 <_puts_r+0x68>
 8122330:	e7ce      	b.n	81222d0 <_puts_r+0x38>
 8122332:	3e01      	subs	r6, #1
 8122334:	e7e4      	b.n	8122300 <_puts_r+0x68>
 8122336:	6823      	ldr	r3, [r4, #0]
 8122338:	1c5a      	adds	r2, r3, #1
 812233a:	6022      	str	r2, [r4, #0]
 812233c:	220a      	movs	r2, #10
 812233e:	701a      	strb	r2, [r3, #0]
 8122340:	e7ee      	b.n	8122320 <_puts_r+0x88>
	...

08122344 <puts>:
 8122344:	4b02      	ldr	r3, [pc, #8]	@ (8122350 <puts+0xc>)
 8122346:	4601      	mov	r1, r0
 8122348:	6818      	ldr	r0, [r3, #0]
 812234a:	f7ff bfa5 	b.w	8122298 <_puts_r>
 812234e:	bf00      	nop
 8122350:	10000040 	.word	0x10000040

08122354 <siscanf>:
 8122354:	b40e      	push	{r1, r2, r3}
 8122356:	b530      	push	{r4, r5, lr}
 8122358:	b09c      	sub	sp, #112	@ 0x70
 812235a:	ac1f      	add	r4, sp, #124	@ 0x7c
 812235c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8122360:	f854 5b04 	ldr.w	r5, [r4], #4
 8122364:	f8ad 2014 	strh.w	r2, [sp, #20]
 8122368:	9002      	str	r0, [sp, #8]
 812236a:	9006      	str	r0, [sp, #24]
 812236c:	f7de f808 	bl	8100380 <strlen>
 8122370:	4b0b      	ldr	r3, [pc, #44]	@ (81223a0 <siscanf+0x4c>)
 8122372:	9003      	str	r0, [sp, #12]
 8122374:	9007      	str	r0, [sp, #28]
 8122376:	930b      	str	r3, [sp, #44]	@ 0x2c
 8122378:	480a      	ldr	r0, [pc, #40]	@ (81223a4 <siscanf+0x50>)
 812237a:	9401      	str	r4, [sp, #4]
 812237c:	2300      	movs	r3, #0
 812237e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8122380:	9314      	str	r3, [sp, #80]	@ 0x50
 8122382:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8122386:	f8ad 3016 	strh.w	r3, [sp, #22]
 812238a:	462a      	mov	r2, r5
 812238c:	4623      	mov	r3, r4
 812238e:	a902      	add	r1, sp, #8
 8122390:	6800      	ldr	r0, [r0, #0]
 8122392:	f000 fb59 	bl	8122a48 <__ssvfiscanf_r>
 8122396:	b01c      	add	sp, #112	@ 0x70
 8122398:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 812239c:	b003      	add	sp, #12
 812239e:	4770      	bx	lr
 81223a0:	081223cb 	.word	0x081223cb
 81223a4:	10000040 	.word	0x10000040

081223a8 <__sread>:
 81223a8:	b510      	push	{r4, lr}
 81223aa:	460c      	mov	r4, r1
 81223ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81223b0:	f000 f9d8 	bl	8122764 <_read_r>
 81223b4:	2800      	cmp	r0, #0
 81223b6:	bfab      	itete	ge
 81223b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 81223ba:	89a3      	ldrhlt	r3, [r4, #12]
 81223bc:	181b      	addge	r3, r3, r0
 81223be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 81223c2:	bfac      	ite	ge
 81223c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 81223c6:	81a3      	strhlt	r3, [r4, #12]
 81223c8:	bd10      	pop	{r4, pc}

081223ca <__seofread>:
 81223ca:	2000      	movs	r0, #0
 81223cc:	4770      	bx	lr

081223ce <__swrite>:
 81223ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81223d2:	461f      	mov	r7, r3
 81223d4:	898b      	ldrh	r3, [r1, #12]
 81223d6:	05db      	lsls	r3, r3, #23
 81223d8:	4605      	mov	r5, r0
 81223da:	460c      	mov	r4, r1
 81223dc:	4616      	mov	r6, r2
 81223de:	d505      	bpl.n	81223ec <__swrite+0x1e>
 81223e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81223e4:	2302      	movs	r3, #2
 81223e6:	2200      	movs	r2, #0
 81223e8:	f000 f9aa 	bl	8122740 <_lseek_r>
 81223ec:	89a3      	ldrh	r3, [r4, #12]
 81223ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 81223f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 81223f6:	81a3      	strh	r3, [r4, #12]
 81223f8:	4632      	mov	r2, r6
 81223fa:	463b      	mov	r3, r7
 81223fc:	4628      	mov	r0, r5
 81223fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8122402:	f000 b9e5 	b.w	81227d0 <_write_r>

08122406 <__sseek>:
 8122406:	b510      	push	{r4, lr}
 8122408:	460c      	mov	r4, r1
 812240a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 812240e:	f000 f997 	bl	8122740 <_lseek_r>
 8122412:	1c43      	adds	r3, r0, #1
 8122414:	89a3      	ldrh	r3, [r4, #12]
 8122416:	bf15      	itete	ne
 8122418:	6560      	strne	r0, [r4, #84]	@ 0x54
 812241a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 812241e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8122422:	81a3      	strheq	r3, [r4, #12]
 8122424:	bf18      	it	ne
 8122426:	81a3      	strhne	r3, [r4, #12]
 8122428:	bd10      	pop	{r4, pc}

0812242a <__sclose>:
 812242a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 812242e:	f000 b921 	b.w	8122674 <_close_r>

08122432 <__swbuf_r>:
 8122432:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8122434:	460e      	mov	r6, r1
 8122436:	4614      	mov	r4, r2
 8122438:	4605      	mov	r5, r0
 812243a:	b118      	cbz	r0, 8122444 <__swbuf_r+0x12>
 812243c:	6a03      	ldr	r3, [r0, #32]
 812243e:	b90b      	cbnz	r3, 8122444 <__swbuf_r+0x12>
 8122440:	f7ff fe80 	bl	8122144 <__sinit>
 8122444:	69a3      	ldr	r3, [r4, #24]
 8122446:	60a3      	str	r3, [r4, #8]
 8122448:	89a3      	ldrh	r3, [r4, #12]
 812244a:	071a      	lsls	r2, r3, #28
 812244c:	d501      	bpl.n	8122452 <__swbuf_r+0x20>
 812244e:	6923      	ldr	r3, [r4, #16]
 8122450:	b943      	cbnz	r3, 8122464 <__swbuf_r+0x32>
 8122452:	4621      	mov	r1, r4
 8122454:	4628      	mov	r0, r5
 8122456:	f000 f82b 	bl	81224b0 <__swsetup_r>
 812245a:	b118      	cbz	r0, 8122464 <__swbuf_r+0x32>
 812245c:	f04f 37ff 	mov.w	r7, #4294967295
 8122460:	4638      	mov	r0, r7
 8122462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8122464:	6823      	ldr	r3, [r4, #0]
 8122466:	6922      	ldr	r2, [r4, #16]
 8122468:	1a98      	subs	r0, r3, r2
 812246a:	6963      	ldr	r3, [r4, #20]
 812246c:	b2f6      	uxtb	r6, r6
 812246e:	4283      	cmp	r3, r0
 8122470:	4637      	mov	r7, r6
 8122472:	dc05      	bgt.n	8122480 <__swbuf_r+0x4e>
 8122474:	4621      	mov	r1, r4
 8122476:	4628      	mov	r0, r5
 8122478:	f7ff fd9c 	bl	8121fb4 <_fflush_r>
 812247c:	2800      	cmp	r0, #0
 812247e:	d1ed      	bne.n	812245c <__swbuf_r+0x2a>
 8122480:	68a3      	ldr	r3, [r4, #8]
 8122482:	3b01      	subs	r3, #1
 8122484:	60a3      	str	r3, [r4, #8]
 8122486:	6823      	ldr	r3, [r4, #0]
 8122488:	1c5a      	adds	r2, r3, #1
 812248a:	6022      	str	r2, [r4, #0]
 812248c:	701e      	strb	r6, [r3, #0]
 812248e:	6962      	ldr	r2, [r4, #20]
 8122490:	1c43      	adds	r3, r0, #1
 8122492:	429a      	cmp	r2, r3
 8122494:	d004      	beq.n	81224a0 <__swbuf_r+0x6e>
 8122496:	89a3      	ldrh	r3, [r4, #12]
 8122498:	07db      	lsls	r3, r3, #31
 812249a:	d5e1      	bpl.n	8122460 <__swbuf_r+0x2e>
 812249c:	2e0a      	cmp	r6, #10
 812249e:	d1df      	bne.n	8122460 <__swbuf_r+0x2e>
 81224a0:	4621      	mov	r1, r4
 81224a2:	4628      	mov	r0, r5
 81224a4:	f7ff fd86 	bl	8121fb4 <_fflush_r>
 81224a8:	2800      	cmp	r0, #0
 81224aa:	d0d9      	beq.n	8122460 <__swbuf_r+0x2e>
 81224ac:	e7d6      	b.n	812245c <__swbuf_r+0x2a>
	...

081224b0 <__swsetup_r>:
 81224b0:	b538      	push	{r3, r4, r5, lr}
 81224b2:	4b29      	ldr	r3, [pc, #164]	@ (8122558 <__swsetup_r+0xa8>)
 81224b4:	4605      	mov	r5, r0
 81224b6:	6818      	ldr	r0, [r3, #0]
 81224b8:	460c      	mov	r4, r1
 81224ba:	b118      	cbz	r0, 81224c4 <__swsetup_r+0x14>
 81224bc:	6a03      	ldr	r3, [r0, #32]
 81224be:	b90b      	cbnz	r3, 81224c4 <__swsetup_r+0x14>
 81224c0:	f7ff fe40 	bl	8122144 <__sinit>
 81224c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81224c8:	0719      	lsls	r1, r3, #28
 81224ca:	d422      	bmi.n	8122512 <__swsetup_r+0x62>
 81224cc:	06da      	lsls	r2, r3, #27
 81224ce:	d407      	bmi.n	81224e0 <__swsetup_r+0x30>
 81224d0:	2209      	movs	r2, #9
 81224d2:	602a      	str	r2, [r5, #0]
 81224d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81224d8:	81a3      	strh	r3, [r4, #12]
 81224da:	f04f 30ff 	mov.w	r0, #4294967295
 81224de:	e033      	b.n	8122548 <__swsetup_r+0x98>
 81224e0:	0758      	lsls	r0, r3, #29
 81224e2:	d512      	bpl.n	812250a <__swsetup_r+0x5a>
 81224e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 81224e6:	b141      	cbz	r1, 81224fa <__swsetup_r+0x4a>
 81224e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 81224ec:	4299      	cmp	r1, r3
 81224ee:	d002      	beq.n	81224f6 <__swsetup_r+0x46>
 81224f0:	4628      	mov	r0, r5
 81224f2:	f000 f9d9 	bl	81228a8 <_free_r>
 81224f6:	2300      	movs	r3, #0
 81224f8:	6363      	str	r3, [r4, #52]	@ 0x34
 81224fa:	89a3      	ldrh	r3, [r4, #12]
 81224fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8122500:	81a3      	strh	r3, [r4, #12]
 8122502:	2300      	movs	r3, #0
 8122504:	6063      	str	r3, [r4, #4]
 8122506:	6923      	ldr	r3, [r4, #16]
 8122508:	6023      	str	r3, [r4, #0]
 812250a:	89a3      	ldrh	r3, [r4, #12]
 812250c:	f043 0308 	orr.w	r3, r3, #8
 8122510:	81a3      	strh	r3, [r4, #12]
 8122512:	6923      	ldr	r3, [r4, #16]
 8122514:	b94b      	cbnz	r3, 812252a <__swsetup_r+0x7a>
 8122516:	89a3      	ldrh	r3, [r4, #12]
 8122518:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 812251c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8122520:	d003      	beq.n	812252a <__swsetup_r+0x7a>
 8122522:	4621      	mov	r1, r4
 8122524:	4628      	mov	r0, r5
 8122526:	f000 fd89 	bl	812303c <__smakebuf_r>
 812252a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 812252e:	f013 0201 	ands.w	r2, r3, #1
 8122532:	d00a      	beq.n	812254a <__swsetup_r+0x9a>
 8122534:	2200      	movs	r2, #0
 8122536:	60a2      	str	r2, [r4, #8]
 8122538:	6962      	ldr	r2, [r4, #20]
 812253a:	4252      	negs	r2, r2
 812253c:	61a2      	str	r2, [r4, #24]
 812253e:	6922      	ldr	r2, [r4, #16]
 8122540:	b942      	cbnz	r2, 8122554 <__swsetup_r+0xa4>
 8122542:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8122546:	d1c5      	bne.n	81224d4 <__swsetup_r+0x24>
 8122548:	bd38      	pop	{r3, r4, r5, pc}
 812254a:	0799      	lsls	r1, r3, #30
 812254c:	bf58      	it	pl
 812254e:	6962      	ldrpl	r2, [r4, #20]
 8122550:	60a2      	str	r2, [r4, #8]
 8122552:	e7f4      	b.n	812253e <__swsetup_r+0x8e>
 8122554:	2000      	movs	r0, #0
 8122556:	e7f7      	b.n	8122548 <__swsetup_r+0x98>
 8122558:	10000040 	.word	0x10000040

0812255c <memcmp>:
 812255c:	b510      	push	{r4, lr}
 812255e:	3901      	subs	r1, #1
 8122560:	4402      	add	r2, r0
 8122562:	4290      	cmp	r0, r2
 8122564:	d101      	bne.n	812256a <memcmp+0xe>
 8122566:	2000      	movs	r0, #0
 8122568:	e005      	b.n	8122576 <memcmp+0x1a>
 812256a:	7803      	ldrb	r3, [r0, #0]
 812256c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8122570:	42a3      	cmp	r3, r4
 8122572:	d001      	beq.n	8122578 <memcmp+0x1c>
 8122574:	1b18      	subs	r0, r3, r4
 8122576:	bd10      	pop	{r4, pc}
 8122578:	3001      	adds	r0, #1
 812257a:	e7f2      	b.n	8122562 <memcmp+0x6>

0812257c <memmove>:
 812257c:	4288      	cmp	r0, r1
 812257e:	b510      	push	{r4, lr}
 8122580:	eb01 0402 	add.w	r4, r1, r2
 8122584:	d902      	bls.n	812258c <memmove+0x10>
 8122586:	4284      	cmp	r4, r0
 8122588:	4623      	mov	r3, r4
 812258a:	d807      	bhi.n	812259c <memmove+0x20>
 812258c:	1e43      	subs	r3, r0, #1
 812258e:	42a1      	cmp	r1, r4
 8122590:	d008      	beq.n	81225a4 <memmove+0x28>
 8122592:	f811 2b01 	ldrb.w	r2, [r1], #1
 8122596:	f803 2f01 	strb.w	r2, [r3, #1]!
 812259a:	e7f8      	b.n	812258e <memmove+0x12>
 812259c:	4402      	add	r2, r0
 812259e:	4601      	mov	r1, r0
 81225a0:	428a      	cmp	r2, r1
 81225a2:	d100      	bne.n	81225a6 <memmove+0x2a>
 81225a4:	bd10      	pop	{r4, pc}
 81225a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 81225aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 81225ae:	e7f7      	b.n	81225a0 <memmove+0x24>

081225b0 <memset>:
 81225b0:	4402      	add	r2, r0
 81225b2:	4603      	mov	r3, r0
 81225b4:	4293      	cmp	r3, r2
 81225b6:	d100      	bne.n	81225ba <memset+0xa>
 81225b8:	4770      	bx	lr
 81225ba:	f803 1b01 	strb.w	r1, [r3], #1
 81225be:	e7f9      	b.n	81225b4 <memset+0x4>

081225c0 <strncpy>:
 81225c0:	b510      	push	{r4, lr}
 81225c2:	3901      	subs	r1, #1
 81225c4:	4603      	mov	r3, r0
 81225c6:	b132      	cbz	r2, 81225d6 <strncpy+0x16>
 81225c8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 81225cc:	f803 4b01 	strb.w	r4, [r3], #1
 81225d0:	3a01      	subs	r2, #1
 81225d2:	2c00      	cmp	r4, #0
 81225d4:	d1f7      	bne.n	81225c6 <strncpy+0x6>
 81225d6:	441a      	add	r2, r3
 81225d8:	2100      	movs	r1, #0
 81225da:	4293      	cmp	r3, r2
 81225dc:	d100      	bne.n	81225e0 <strncpy+0x20>
 81225de:	bd10      	pop	{r4, pc}
 81225e0:	f803 1b01 	strb.w	r1, [r3], #1
 81225e4:	e7f9      	b.n	81225da <strncpy+0x1a>

081225e6 <strstr>:
 81225e6:	780a      	ldrb	r2, [r1, #0]
 81225e8:	b570      	push	{r4, r5, r6, lr}
 81225ea:	b96a      	cbnz	r2, 8122608 <strstr+0x22>
 81225ec:	bd70      	pop	{r4, r5, r6, pc}
 81225ee:	429a      	cmp	r2, r3
 81225f0:	d109      	bne.n	8122606 <strstr+0x20>
 81225f2:	460c      	mov	r4, r1
 81225f4:	4605      	mov	r5, r0
 81225f6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 81225fa:	2b00      	cmp	r3, #0
 81225fc:	d0f6      	beq.n	81225ec <strstr+0x6>
 81225fe:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8122602:	429e      	cmp	r6, r3
 8122604:	d0f7      	beq.n	81225f6 <strstr+0x10>
 8122606:	3001      	adds	r0, #1
 8122608:	7803      	ldrb	r3, [r0, #0]
 812260a:	2b00      	cmp	r3, #0
 812260c:	d1ef      	bne.n	81225ee <strstr+0x8>
 812260e:	4618      	mov	r0, r3
 8122610:	e7ec      	b.n	81225ec <strstr+0x6>

08122612 <_raise_r>:
 8122612:	291f      	cmp	r1, #31
 8122614:	b538      	push	{r3, r4, r5, lr}
 8122616:	4605      	mov	r5, r0
 8122618:	460c      	mov	r4, r1
 812261a:	d904      	bls.n	8122626 <_raise_r+0x14>
 812261c:	2316      	movs	r3, #22
 812261e:	6003      	str	r3, [r0, #0]
 8122620:	f04f 30ff 	mov.w	r0, #4294967295
 8122624:	bd38      	pop	{r3, r4, r5, pc}
 8122626:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8122628:	b112      	cbz	r2, 8122630 <_raise_r+0x1e>
 812262a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 812262e:	b94b      	cbnz	r3, 8122644 <_raise_r+0x32>
 8122630:	4628      	mov	r0, r5
 8122632:	f000 f8bb 	bl	81227ac <_getpid_r>
 8122636:	4622      	mov	r2, r4
 8122638:	4601      	mov	r1, r0
 812263a:	4628      	mov	r0, r5
 812263c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8122640:	f000 b8a2 	b.w	8122788 <_kill_r>
 8122644:	2b01      	cmp	r3, #1
 8122646:	d00a      	beq.n	812265e <_raise_r+0x4c>
 8122648:	1c59      	adds	r1, r3, #1
 812264a:	d103      	bne.n	8122654 <_raise_r+0x42>
 812264c:	2316      	movs	r3, #22
 812264e:	6003      	str	r3, [r0, #0]
 8122650:	2001      	movs	r0, #1
 8122652:	e7e7      	b.n	8122624 <_raise_r+0x12>
 8122654:	2100      	movs	r1, #0
 8122656:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 812265a:	4620      	mov	r0, r4
 812265c:	4798      	blx	r3
 812265e:	2000      	movs	r0, #0
 8122660:	e7e0      	b.n	8122624 <_raise_r+0x12>
	...

08122664 <raise>:
 8122664:	4b02      	ldr	r3, [pc, #8]	@ (8122670 <raise+0xc>)
 8122666:	4601      	mov	r1, r0
 8122668:	6818      	ldr	r0, [r3, #0]
 812266a:	f7ff bfd2 	b.w	8122612 <_raise_r>
 812266e:	bf00      	nop
 8122670:	10000040 	.word	0x10000040

08122674 <_close_r>:
 8122674:	b538      	push	{r3, r4, r5, lr}
 8122676:	4d06      	ldr	r5, [pc, #24]	@ (8122690 <_close_r+0x1c>)
 8122678:	2300      	movs	r3, #0
 812267a:	4604      	mov	r4, r0
 812267c:	4608      	mov	r0, r1
 812267e:	602b      	str	r3, [r5, #0]
 8122680:	f7de fde4 	bl	810124c <_close>
 8122684:	1c43      	adds	r3, r0, #1
 8122686:	d102      	bne.n	812268e <_close_r+0x1a>
 8122688:	682b      	ldr	r3, [r5, #0]
 812268a:	b103      	cbz	r3, 812268e <_close_r+0x1a>
 812268c:	6023      	str	r3, [r4, #0]
 812268e:	bd38      	pop	{r3, r4, r5, pc}
 8122690:	10012014 	.word	0x10012014

08122694 <_reclaim_reent>:
 8122694:	4b29      	ldr	r3, [pc, #164]	@ (812273c <_reclaim_reent+0xa8>)
 8122696:	681b      	ldr	r3, [r3, #0]
 8122698:	4283      	cmp	r3, r0
 812269a:	b570      	push	{r4, r5, r6, lr}
 812269c:	4604      	mov	r4, r0
 812269e:	d04b      	beq.n	8122738 <_reclaim_reent+0xa4>
 81226a0:	69c3      	ldr	r3, [r0, #28]
 81226a2:	b1ab      	cbz	r3, 81226d0 <_reclaim_reent+0x3c>
 81226a4:	68db      	ldr	r3, [r3, #12]
 81226a6:	b16b      	cbz	r3, 81226c4 <_reclaim_reent+0x30>
 81226a8:	2500      	movs	r5, #0
 81226aa:	69e3      	ldr	r3, [r4, #28]
 81226ac:	68db      	ldr	r3, [r3, #12]
 81226ae:	5959      	ldr	r1, [r3, r5]
 81226b0:	2900      	cmp	r1, #0
 81226b2:	d13b      	bne.n	812272c <_reclaim_reent+0x98>
 81226b4:	3504      	adds	r5, #4
 81226b6:	2d80      	cmp	r5, #128	@ 0x80
 81226b8:	d1f7      	bne.n	81226aa <_reclaim_reent+0x16>
 81226ba:	69e3      	ldr	r3, [r4, #28]
 81226bc:	4620      	mov	r0, r4
 81226be:	68d9      	ldr	r1, [r3, #12]
 81226c0:	f000 f8f2 	bl	81228a8 <_free_r>
 81226c4:	69e3      	ldr	r3, [r4, #28]
 81226c6:	6819      	ldr	r1, [r3, #0]
 81226c8:	b111      	cbz	r1, 81226d0 <_reclaim_reent+0x3c>
 81226ca:	4620      	mov	r0, r4
 81226cc:	f000 f8ec 	bl	81228a8 <_free_r>
 81226d0:	6961      	ldr	r1, [r4, #20]
 81226d2:	b111      	cbz	r1, 81226da <_reclaim_reent+0x46>
 81226d4:	4620      	mov	r0, r4
 81226d6:	f000 f8e7 	bl	81228a8 <_free_r>
 81226da:	69e1      	ldr	r1, [r4, #28]
 81226dc:	b111      	cbz	r1, 81226e4 <_reclaim_reent+0x50>
 81226de:	4620      	mov	r0, r4
 81226e0:	f000 f8e2 	bl	81228a8 <_free_r>
 81226e4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 81226e6:	b111      	cbz	r1, 81226ee <_reclaim_reent+0x5a>
 81226e8:	4620      	mov	r0, r4
 81226ea:	f000 f8dd 	bl	81228a8 <_free_r>
 81226ee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 81226f0:	b111      	cbz	r1, 81226f8 <_reclaim_reent+0x64>
 81226f2:	4620      	mov	r0, r4
 81226f4:	f000 f8d8 	bl	81228a8 <_free_r>
 81226f8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 81226fa:	b111      	cbz	r1, 8122702 <_reclaim_reent+0x6e>
 81226fc:	4620      	mov	r0, r4
 81226fe:	f000 f8d3 	bl	81228a8 <_free_r>
 8122702:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8122704:	b111      	cbz	r1, 812270c <_reclaim_reent+0x78>
 8122706:	4620      	mov	r0, r4
 8122708:	f000 f8ce 	bl	81228a8 <_free_r>
 812270c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 812270e:	b111      	cbz	r1, 8122716 <_reclaim_reent+0x82>
 8122710:	4620      	mov	r0, r4
 8122712:	f000 f8c9 	bl	81228a8 <_free_r>
 8122716:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8122718:	b111      	cbz	r1, 8122720 <_reclaim_reent+0x8c>
 812271a:	4620      	mov	r0, r4
 812271c:	f000 f8c4 	bl	81228a8 <_free_r>
 8122720:	6a23      	ldr	r3, [r4, #32]
 8122722:	b14b      	cbz	r3, 8122738 <_reclaim_reent+0xa4>
 8122724:	4620      	mov	r0, r4
 8122726:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 812272a:	4718      	bx	r3
 812272c:	680e      	ldr	r6, [r1, #0]
 812272e:	4620      	mov	r0, r4
 8122730:	f000 f8ba 	bl	81228a8 <_free_r>
 8122734:	4631      	mov	r1, r6
 8122736:	e7bb      	b.n	81226b0 <_reclaim_reent+0x1c>
 8122738:	bd70      	pop	{r4, r5, r6, pc}
 812273a:	bf00      	nop
 812273c:	10000040 	.word	0x10000040

08122740 <_lseek_r>:
 8122740:	b538      	push	{r3, r4, r5, lr}
 8122742:	4d07      	ldr	r5, [pc, #28]	@ (8122760 <_lseek_r+0x20>)
 8122744:	4604      	mov	r4, r0
 8122746:	4608      	mov	r0, r1
 8122748:	4611      	mov	r1, r2
 812274a:	2200      	movs	r2, #0
 812274c:	602a      	str	r2, [r5, #0]
 812274e:	461a      	mov	r2, r3
 8122750:	f7de fda3 	bl	810129a <_lseek>
 8122754:	1c43      	adds	r3, r0, #1
 8122756:	d102      	bne.n	812275e <_lseek_r+0x1e>
 8122758:	682b      	ldr	r3, [r5, #0]
 812275a:	b103      	cbz	r3, 812275e <_lseek_r+0x1e>
 812275c:	6023      	str	r3, [r4, #0]
 812275e:	bd38      	pop	{r3, r4, r5, pc}
 8122760:	10012014 	.word	0x10012014

08122764 <_read_r>:
 8122764:	b538      	push	{r3, r4, r5, lr}
 8122766:	4d07      	ldr	r5, [pc, #28]	@ (8122784 <_read_r+0x20>)
 8122768:	4604      	mov	r4, r0
 812276a:	4608      	mov	r0, r1
 812276c:	4611      	mov	r1, r2
 812276e:	2200      	movs	r2, #0
 8122770:	602a      	str	r2, [r5, #0]
 8122772:	461a      	mov	r2, r3
 8122774:	f7de fd31 	bl	81011da <_read>
 8122778:	1c43      	adds	r3, r0, #1
 812277a:	d102      	bne.n	8122782 <_read_r+0x1e>
 812277c:	682b      	ldr	r3, [r5, #0]
 812277e:	b103      	cbz	r3, 8122782 <_read_r+0x1e>
 8122780:	6023      	str	r3, [r4, #0]
 8122782:	bd38      	pop	{r3, r4, r5, pc}
 8122784:	10012014 	.word	0x10012014

08122788 <_kill_r>:
 8122788:	b538      	push	{r3, r4, r5, lr}
 812278a:	4d07      	ldr	r5, [pc, #28]	@ (81227a8 <_kill_r+0x20>)
 812278c:	2300      	movs	r3, #0
 812278e:	4604      	mov	r4, r0
 8122790:	4608      	mov	r0, r1
 8122792:	4611      	mov	r1, r2
 8122794:	602b      	str	r3, [r5, #0]
 8122796:	f7de fd03 	bl	81011a0 <_kill>
 812279a:	1c43      	adds	r3, r0, #1
 812279c:	d102      	bne.n	81227a4 <_kill_r+0x1c>
 812279e:	682b      	ldr	r3, [r5, #0]
 81227a0:	b103      	cbz	r3, 81227a4 <_kill_r+0x1c>
 81227a2:	6023      	str	r3, [r4, #0]
 81227a4:	bd38      	pop	{r3, r4, r5, pc}
 81227a6:	bf00      	nop
 81227a8:	10012014 	.word	0x10012014

081227ac <_getpid_r>:
 81227ac:	f7de bcf0 	b.w	8101190 <_getpid>

081227b0 <_sbrk_r>:
 81227b0:	b538      	push	{r3, r4, r5, lr}
 81227b2:	4d06      	ldr	r5, [pc, #24]	@ (81227cc <_sbrk_r+0x1c>)
 81227b4:	2300      	movs	r3, #0
 81227b6:	4604      	mov	r4, r0
 81227b8:	4608      	mov	r0, r1
 81227ba:	602b      	str	r3, [r5, #0]
 81227bc:	f7de fd7a 	bl	81012b4 <_sbrk>
 81227c0:	1c43      	adds	r3, r0, #1
 81227c2:	d102      	bne.n	81227ca <_sbrk_r+0x1a>
 81227c4:	682b      	ldr	r3, [r5, #0]
 81227c6:	b103      	cbz	r3, 81227ca <_sbrk_r+0x1a>
 81227c8:	6023      	str	r3, [r4, #0]
 81227ca:	bd38      	pop	{r3, r4, r5, pc}
 81227cc:	10012014 	.word	0x10012014

081227d0 <_write_r>:
 81227d0:	b538      	push	{r3, r4, r5, lr}
 81227d2:	4d07      	ldr	r5, [pc, #28]	@ (81227f0 <_write_r+0x20>)
 81227d4:	4604      	mov	r4, r0
 81227d6:	4608      	mov	r0, r1
 81227d8:	4611      	mov	r1, r2
 81227da:	2200      	movs	r2, #0
 81227dc:	602a      	str	r2, [r5, #0]
 81227de:	461a      	mov	r2, r3
 81227e0:	f7de fd18 	bl	8101214 <_write>
 81227e4:	1c43      	adds	r3, r0, #1
 81227e6:	d102      	bne.n	81227ee <_write_r+0x1e>
 81227e8:	682b      	ldr	r3, [r5, #0]
 81227ea:	b103      	cbz	r3, 81227ee <_write_r+0x1e>
 81227ec:	6023      	str	r3, [r4, #0]
 81227ee:	bd38      	pop	{r3, r4, r5, pc}
 81227f0:	10012014 	.word	0x10012014

081227f4 <__errno>:
 81227f4:	4b01      	ldr	r3, [pc, #4]	@ (81227fc <__errno+0x8>)
 81227f6:	6818      	ldr	r0, [r3, #0]
 81227f8:	4770      	bx	lr
 81227fa:	bf00      	nop
 81227fc:	10000040 	.word	0x10000040

08122800 <__libc_init_array>:
 8122800:	b570      	push	{r4, r5, r6, lr}
 8122802:	4d0d      	ldr	r5, [pc, #52]	@ (8122838 <__libc_init_array+0x38>)
 8122804:	4c0d      	ldr	r4, [pc, #52]	@ (812283c <__libc_init_array+0x3c>)
 8122806:	1b64      	subs	r4, r4, r5
 8122808:	10a4      	asrs	r4, r4, #2
 812280a:	2600      	movs	r6, #0
 812280c:	42a6      	cmp	r6, r4
 812280e:	d109      	bne.n	8122824 <__libc_init_array+0x24>
 8122810:	4d0b      	ldr	r5, [pc, #44]	@ (8122840 <__libc_init_array+0x40>)
 8122812:	4c0c      	ldr	r4, [pc, #48]	@ (8122844 <__libc_init_array+0x44>)
 8122814:	f000 fd90 	bl	8123338 <_init>
 8122818:	1b64      	subs	r4, r4, r5
 812281a:	10a4      	asrs	r4, r4, #2
 812281c:	2600      	movs	r6, #0
 812281e:	42a6      	cmp	r6, r4
 8122820:	d105      	bne.n	812282e <__libc_init_array+0x2e>
 8122822:	bd70      	pop	{r4, r5, r6, pc}
 8122824:	f855 3b04 	ldr.w	r3, [r5], #4
 8122828:	4798      	blx	r3
 812282a:	3601      	adds	r6, #1
 812282c:	e7ee      	b.n	812280c <__libc_init_array+0xc>
 812282e:	f855 3b04 	ldr.w	r3, [r5], #4
 8122832:	4798      	blx	r3
 8122834:	3601      	adds	r6, #1
 8122836:	e7f2      	b.n	812281e <__libc_init_array+0x1e>
 8122838:	08128d3c 	.word	0x08128d3c
 812283c:	08128d3c 	.word	0x08128d3c
 8122840:	08128d3c 	.word	0x08128d3c
 8122844:	08128d44 	.word	0x08128d44

08122848 <__retarget_lock_init_recursive>:
 8122848:	4770      	bx	lr

0812284a <__retarget_lock_acquire_recursive>:
 812284a:	4770      	bx	lr

0812284c <__retarget_lock_release_recursive>:
 812284c:	4770      	bx	lr

0812284e <memcpy>:
 812284e:	440a      	add	r2, r1
 8122850:	4291      	cmp	r1, r2
 8122852:	f100 33ff 	add.w	r3, r0, #4294967295
 8122856:	d100      	bne.n	812285a <memcpy+0xc>
 8122858:	4770      	bx	lr
 812285a:	b510      	push	{r4, lr}
 812285c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8122860:	f803 4f01 	strb.w	r4, [r3, #1]!
 8122864:	4291      	cmp	r1, r2
 8122866:	d1f9      	bne.n	812285c <memcpy+0xe>
 8122868:	bd10      	pop	{r4, pc}
	...

0812286c <__assert_func>:
 812286c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 812286e:	4614      	mov	r4, r2
 8122870:	461a      	mov	r2, r3
 8122872:	4b09      	ldr	r3, [pc, #36]	@ (8122898 <__assert_func+0x2c>)
 8122874:	681b      	ldr	r3, [r3, #0]
 8122876:	4605      	mov	r5, r0
 8122878:	68d8      	ldr	r0, [r3, #12]
 812287a:	b954      	cbnz	r4, 8122892 <__assert_func+0x26>
 812287c:	4b07      	ldr	r3, [pc, #28]	@ (812289c <__assert_func+0x30>)
 812287e:	461c      	mov	r4, r3
 8122880:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8122884:	9100      	str	r1, [sp, #0]
 8122886:	462b      	mov	r3, r5
 8122888:	4905      	ldr	r1, [pc, #20]	@ (81228a0 <__assert_func+0x34>)
 812288a:	f000 fb9f 	bl	8122fcc <fiprintf>
 812288e:	f7fe feb3 	bl	81215f8 <abort>
 8122892:	4b04      	ldr	r3, [pc, #16]	@ (81228a4 <__assert_func+0x38>)
 8122894:	e7f4      	b.n	8122880 <__assert_func+0x14>
 8122896:	bf00      	nop
 8122898:	10000040 	.word	0x10000040
 812289c:	08128d16 	.word	0x08128d16
 81228a0:	08128ce8 	.word	0x08128ce8
 81228a4:	08128cdb 	.word	0x08128cdb

081228a8 <_free_r>:
 81228a8:	b538      	push	{r3, r4, r5, lr}
 81228aa:	4605      	mov	r5, r0
 81228ac:	2900      	cmp	r1, #0
 81228ae:	d041      	beq.n	8122934 <_free_r+0x8c>
 81228b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 81228b4:	1f0c      	subs	r4, r1, #4
 81228b6:	2b00      	cmp	r3, #0
 81228b8:	bfb8      	it	lt
 81228ba:	18e4      	addlt	r4, r4, r3
 81228bc:	f7fe ff56 	bl	812176c <__malloc_lock>
 81228c0:	4a1d      	ldr	r2, [pc, #116]	@ (8122938 <_free_r+0x90>)
 81228c2:	6813      	ldr	r3, [r2, #0]
 81228c4:	b933      	cbnz	r3, 81228d4 <_free_r+0x2c>
 81228c6:	6063      	str	r3, [r4, #4]
 81228c8:	6014      	str	r4, [r2, #0]
 81228ca:	4628      	mov	r0, r5
 81228cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 81228d0:	f7fe bf52 	b.w	8121778 <__malloc_unlock>
 81228d4:	42a3      	cmp	r3, r4
 81228d6:	d908      	bls.n	81228ea <_free_r+0x42>
 81228d8:	6820      	ldr	r0, [r4, #0]
 81228da:	1821      	adds	r1, r4, r0
 81228dc:	428b      	cmp	r3, r1
 81228de:	bf01      	itttt	eq
 81228e0:	6819      	ldreq	r1, [r3, #0]
 81228e2:	685b      	ldreq	r3, [r3, #4]
 81228e4:	1809      	addeq	r1, r1, r0
 81228e6:	6021      	streq	r1, [r4, #0]
 81228e8:	e7ed      	b.n	81228c6 <_free_r+0x1e>
 81228ea:	461a      	mov	r2, r3
 81228ec:	685b      	ldr	r3, [r3, #4]
 81228ee:	b10b      	cbz	r3, 81228f4 <_free_r+0x4c>
 81228f0:	42a3      	cmp	r3, r4
 81228f2:	d9fa      	bls.n	81228ea <_free_r+0x42>
 81228f4:	6811      	ldr	r1, [r2, #0]
 81228f6:	1850      	adds	r0, r2, r1
 81228f8:	42a0      	cmp	r0, r4
 81228fa:	d10b      	bne.n	8122914 <_free_r+0x6c>
 81228fc:	6820      	ldr	r0, [r4, #0]
 81228fe:	4401      	add	r1, r0
 8122900:	1850      	adds	r0, r2, r1
 8122902:	4283      	cmp	r3, r0
 8122904:	6011      	str	r1, [r2, #0]
 8122906:	d1e0      	bne.n	81228ca <_free_r+0x22>
 8122908:	6818      	ldr	r0, [r3, #0]
 812290a:	685b      	ldr	r3, [r3, #4]
 812290c:	6053      	str	r3, [r2, #4]
 812290e:	4408      	add	r0, r1
 8122910:	6010      	str	r0, [r2, #0]
 8122912:	e7da      	b.n	81228ca <_free_r+0x22>
 8122914:	d902      	bls.n	812291c <_free_r+0x74>
 8122916:	230c      	movs	r3, #12
 8122918:	602b      	str	r3, [r5, #0]
 812291a:	e7d6      	b.n	81228ca <_free_r+0x22>
 812291c:	6820      	ldr	r0, [r4, #0]
 812291e:	1821      	adds	r1, r4, r0
 8122920:	428b      	cmp	r3, r1
 8122922:	bf04      	itt	eq
 8122924:	6819      	ldreq	r1, [r3, #0]
 8122926:	685b      	ldreq	r3, [r3, #4]
 8122928:	6063      	str	r3, [r4, #4]
 812292a:	bf04      	itt	eq
 812292c:	1809      	addeq	r1, r1, r0
 812292e:	6021      	streq	r1, [r4, #0]
 8122930:	6054      	str	r4, [r2, #4]
 8122932:	e7ca      	b.n	81228ca <_free_r+0x22>
 8122934:	bd38      	pop	{r3, r4, r5, pc}
 8122936:	bf00      	nop
 8122938:	10011ed4 	.word	0x10011ed4

0812293c <_realloc_r>:
 812293c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8122940:	4680      	mov	r8, r0
 8122942:	4615      	mov	r5, r2
 8122944:	460c      	mov	r4, r1
 8122946:	b921      	cbnz	r1, 8122952 <_realloc_r+0x16>
 8122948:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 812294c:	4611      	mov	r1, r2
 812294e:	f7fe be8d 	b.w	812166c <_malloc_r>
 8122952:	b92a      	cbnz	r2, 8122960 <_realloc_r+0x24>
 8122954:	f7ff ffa8 	bl	81228a8 <_free_r>
 8122958:	2400      	movs	r4, #0
 812295a:	4620      	mov	r0, r4
 812295c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8122960:	f000 fc72 	bl	8123248 <_malloc_usable_size_r>
 8122964:	4285      	cmp	r5, r0
 8122966:	4606      	mov	r6, r0
 8122968:	d802      	bhi.n	8122970 <_realloc_r+0x34>
 812296a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 812296e:	d8f4      	bhi.n	812295a <_realloc_r+0x1e>
 8122970:	4629      	mov	r1, r5
 8122972:	4640      	mov	r0, r8
 8122974:	f7fe fe7a 	bl	812166c <_malloc_r>
 8122978:	4607      	mov	r7, r0
 812297a:	2800      	cmp	r0, #0
 812297c:	d0ec      	beq.n	8122958 <_realloc_r+0x1c>
 812297e:	42b5      	cmp	r5, r6
 8122980:	462a      	mov	r2, r5
 8122982:	4621      	mov	r1, r4
 8122984:	bf28      	it	cs
 8122986:	4632      	movcs	r2, r6
 8122988:	f7ff ff61 	bl	812284e <memcpy>
 812298c:	4621      	mov	r1, r4
 812298e:	4640      	mov	r0, r8
 8122990:	f7ff ff8a 	bl	81228a8 <_free_r>
 8122994:	463c      	mov	r4, r7
 8122996:	e7e0      	b.n	812295a <_realloc_r+0x1e>

08122998 <_sungetc_r>:
 8122998:	b538      	push	{r3, r4, r5, lr}
 812299a:	1c4b      	adds	r3, r1, #1
 812299c:	4614      	mov	r4, r2
 812299e:	d103      	bne.n	81229a8 <_sungetc_r+0x10>
 81229a0:	f04f 35ff 	mov.w	r5, #4294967295
 81229a4:	4628      	mov	r0, r5
 81229a6:	bd38      	pop	{r3, r4, r5, pc}
 81229a8:	8993      	ldrh	r3, [r2, #12]
 81229aa:	f023 0320 	bic.w	r3, r3, #32
 81229ae:	8193      	strh	r3, [r2, #12]
 81229b0:	6853      	ldr	r3, [r2, #4]
 81229b2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 81229b4:	b2cd      	uxtb	r5, r1
 81229b6:	b18a      	cbz	r2, 81229dc <_sungetc_r+0x44>
 81229b8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 81229ba:	429a      	cmp	r2, r3
 81229bc:	dd08      	ble.n	81229d0 <_sungetc_r+0x38>
 81229be:	6823      	ldr	r3, [r4, #0]
 81229c0:	1e5a      	subs	r2, r3, #1
 81229c2:	6022      	str	r2, [r4, #0]
 81229c4:	f803 5c01 	strb.w	r5, [r3, #-1]
 81229c8:	6863      	ldr	r3, [r4, #4]
 81229ca:	3301      	adds	r3, #1
 81229cc:	6063      	str	r3, [r4, #4]
 81229ce:	e7e9      	b.n	81229a4 <_sungetc_r+0xc>
 81229d0:	4621      	mov	r1, r4
 81229d2:	f000 fbdc 	bl	812318e <__submore>
 81229d6:	2800      	cmp	r0, #0
 81229d8:	d0f1      	beq.n	81229be <_sungetc_r+0x26>
 81229da:	e7e1      	b.n	81229a0 <_sungetc_r+0x8>
 81229dc:	6921      	ldr	r1, [r4, #16]
 81229de:	6822      	ldr	r2, [r4, #0]
 81229e0:	b141      	cbz	r1, 81229f4 <_sungetc_r+0x5c>
 81229e2:	4291      	cmp	r1, r2
 81229e4:	d206      	bcs.n	81229f4 <_sungetc_r+0x5c>
 81229e6:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 81229ea:	42a9      	cmp	r1, r5
 81229ec:	d102      	bne.n	81229f4 <_sungetc_r+0x5c>
 81229ee:	3a01      	subs	r2, #1
 81229f0:	6022      	str	r2, [r4, #0]
 81229f2:	e7ea      	b.n	81229ca <_sungetc_r+0x32>
 81229f4:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 81229f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 81229fc:	6363      	str	r3, [r4, #52]	@ 0x34
 81229fe:	2303      	movs	r3, #3
 8122a00:	63a3      	str	r3, [r4, #56]	@ 0x38
 8122a02:	4623      	mov	r3, r4
 8122a04:	f803 5f46 	strb.w	r5, [r3, #70]!
 8122a08:	6023      	str	r3, [r4, #0]
 8122a0a:	2301      	movs	r3, #1
 8122a0c:	e7de      	b.n	81229cc <_sungetc_r+0x34>

08122a0e <__ssrefill_r>:
 8122a0e:	b510      	push	{r4, lr}
 8122a10:	460c      	mov	r4, r1
 8122a12:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8122a14:	b169      	cbz	r1, 8122a32 <__ssrefill_r+0x24>
 8122a16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8122a1a:	4299      	cmp	r1, r3
 8122a1c:	d001      	beq.n	8122a22 <__ssrefill_r+0x14>
 8122a1e:	f7ff ff43 	bl	81228a8 <_free_r>
 8122a22:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8122a24:	6063      	str	r3, [r4, #4]
 8122a26:	2000      	movs	r0, #0
 8122a28:	6360      	str	r0, [r4, #52]	@ 0x34
 8122a2a:	b113      	cbz	r3, 8122a32 <__ssrefill_r+0x24>
 8122a2c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8122a2e:	6023      	str	r3, [r4, #0]
 8122a30:	bd10      	pop	{r4, pc}
 8122a32:	6923      	ldr	r3, [r4, #16]
 8122a34:	6023      	str	r3, [r4, #0]
 8122a36:	2300      	movs	r3, #0
 8122a38:	6063      	str	r3, [r4, #4]
 8122a3a:	89a3      	ldrh	r3, [r4, #12]
 8122a3c:	f043 0320 	orr.w	r3, r3, #32
 8122a40:	81a3      	strh	r3, [r4, #12]
 8122a42:	f04f 30ff 	mov.w	r0, #4294967295
 8122a46:	e7f3      	b.n	8122a30 <__ssrefill_r+0x22>

08122a48 <__ssvfiscanf_r>:
 8122a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8122a4c:	460c      	mov	r4, r1
 8122a4e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8122a52:	2100      	movs	r1, #0
 8122a54:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8122a58:	49a5      	ldr	r1, [pc, #660]	@ (8122cf0 <__ssvfiscanf_r+0x2a8>)
 8122a5a:	91a0      	str	r1, [sp, #640]	@ 0x280
 8122a5c:	f10d 0804 	add.w	r8, sp, #4
 8122a60:	49a4      	ldr	r1, [pc, #656]	@ (8122cf4 <__ssvfiscanf_r+0x2ac>)
 8122a62:	4fa5      	ldr	r7, [pc, #660]	@ (8122cf8 <__ssvfiscanf_r+0x2b0>)
 8122a64:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8122a68:	4606      	mov	r6, r0
 8122a6a:	91a1      	str	r1, [sp, #644]	@ 0x284
 8122a6c:	9300      	str	r3, [sp, #0]
 8122a6e:	7813      	ldrb	r3, [r2, #0]
 8122a70:	2b00      	cmp	r3, #0
 8122a72:	f000 8158 	beq.w	8122d26 <__ssvfiscanf_r+0x2de>
 8122a76:	5cf9      	ldrb	r1, [r7, r3]
 8122a78:	f011 0108 	ands.w	r1, r1, #8
 8122a7c:	f102 0501 	add.w	r5, r2, #1
 8122a80:	d019      	beq.n	8122ab6 <__ssvfiscanf_r+0x6e>
 8122a82:	6863      	ldr	r3, [r4, #4]
 8122a84:	2b00      	cmp	r3, #0
 8122a86:	dd0f      	ble.n	8122aa8 <__ssvfiscanf_r+0x60>
 8122a88:	6823      	ldr	r3, [r4, #0]
 8122a8a:	781a      	ldrb	r2, [r3, #0]
 8122a8c:	5cba      	ldrb	r2, [r7, r2]
 8122a8e:	0712      	lsls	r2, r2, #28
 8122a90:	d401      	bmi.n	8122a96 <__ssvfiscanf_r+0x4e>
 8122a92:	462a      	mov	r2, r5
 8122a94:	e7eb      	b.n	8122a6e <__ssvfiscanf_r+0x26>
 8122a96:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8122a98:	3201      	adds	r2, #1
 8122a9a:	9245      	str	r2, [sp, #276]	@ 0x114
 8122a9c:	6862      	ldr	r2, [r4, #4]
 8122a9e:	3301      	adds	r3, #1
 8122aa0:	3a01      	subs	r2, #1
 8122aa2:	6062      	str	r2, [r4, #4]
 8122aa4:	6023      	str	r3, [r4, #0]
 8122aa6:	e7ec      	b.n	8122a82 <__ssvfiscanf_r+0x3a>
 8122aa8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8122aaa:	4621      	mov	r1, r4
 8122aac:	4630      	mov	r0, r6
 8122aae:	4798      	blx	r3
 8122ab0:	2800      	cmp	r0, #0
 8122ab2:	d0e9      	beq.n	8122a88 <__ssvfiscanf_r+0x40>
 8122ab4:	e7ed      	b.n	8122a92 <__ssvfiscanf_r+0x4a>
 8122ab6:	2b25      	cmp	r3, #37	@ 0x25
 8122ab8:	d012      	beq.n	8122ae0 <__ssvfiscanf_r+0x98>
 8122aba:	4699      	mov	r9, r3
 8122abc:	6863      	ldr	r3, [r4, #4]
 8122abe:	2b00      	cmp	r3, #0
 8122ac0:	f340 8093 	ble.w	8122bea <__ssvfiscanf_r+0x1a2>
 8122ac4:	6822      	ldr	r2, [r4, #0]
 8122ac6:	7813      	ldrb	r3, [r2, #0]
 8122ac8:	454b      	cmp	r3, r9
 8122aca:	f040 812c 	bne.w	8122d26 <__ssvfiscanf_r+0x2de>
 8122ace:	6863      	ldr	r3, [r4, #4]
 8122ad0:	3b01      	subs	r3, #1
 8122ad2:	6063      	str	r3, [r4, #4]
 8122ad4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8122ad6:	3201      	adds	r2, #1
 8122ad8:	3301      	adds	r3, #1
 8122ada:	6022      	str	r2, [r4, #0]
 8122adc:	9345      	str	r3, [sp, #276]	@ 0x114
 8122ade:	e7d8      	b.n	8122a92 <__ssvfiscanf_r+0x4a>
 8122ae0:	9141      	str	r1, [sp, #260]	@ 0x104
 8122ae2:	9143      	str	r1, [sp, #268]	@ 0x10c
 8122ae4:	7853      	ldrb	r3, [r2, #1]
 8122ae6:	2b2a      	cmp	r3, #42	@ 0x2a
 8122ae8:	bf02      	ittt	eq
 8122aea:	2310      	moveq	r3, #16
 8122aec:	1c95      	addeq	r5, r2, #2
 8122aee:	9341      	streq	r3, [sp, #260]	@ 0x104
 8122af0:	220a      	movs	r2, #10
 8122af2:	46a9      	mov	r9, r5
 8122af4:	f819 1b01 	ldrb.w	r1, [r9], #1
 8122af8:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8122afc:	2b09      	cmp	r3, #9
 8122afe:	d91e      	bls.n	8122b3e <__ssvfiscanf_r+0xf6>
 8122b00:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8122cfc <__ssvfiscanf_r+0x2b4>
 8122b04:	2203      	movs	r2, #3
 8122b06:	4650      	mov	r0, sl
 8122b08:	f7dd fbea 	bl	81002e0 <memchr>
 8122b0c:	b138      	cbz	r0, 8122b1e <__ssvfiscanf_r+0xd6>
 8122b0e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8122b10:	eba0 000a 	sub.w	r0, r0, sl
 8122b14:	2301      	movs	r3, #1
 8122b16:	4083      	lsls	r3, r0
 8122b18:	4313      	orrs	r3, r2
 8122b1a:	9341      	str	r3, [sp, #260]	@ 0x104
 8122b1c:	464d      	mov	r5, r9
 8122b1e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8122b22:	2b78      	cmp	r3, #120	@ 0x78
 8122b24:	d806      	bhi.n	8122b34 <__ssvfiscanf_r+0xec>
 8122b26:	2b57      	cmp	r3, #87	@ 0x57
 8122b28:	d810      	bhi.n	8122b4c <__ssvfiscanf_r+0x104>
 8122b2a:	2b25      	cmp	r3, #37	@ 0x25
 8122b2c:	d0c5      	beq.n	8122aba <__ssvfiscanf_r+0x72>
 8122b2e:	d857      	bhi.n	8122be0 <__ssvfiscanf_r+0x198>
 8122b30:	2b00      	cmp	r3, #0
 8122b32:	d065      	beq.n	8122c00 <__ssvfiscanf_r+0x1b8>
 8122b34:	2303      	movs	r3, #3
 8122b36:	9347      	str	r3, [sp, #284]	@ 0x11c
 8122b38:	230a      	movs	r3, #10
 8122b3a:	9342      	str	r3, [sp, #264]	@ 0x108
 8122b3c:	e078      	b.n	8122c30 <__ssvfiscanf_r+0x1e8>
 8122b3e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8122b40:	fb02 1103 	mla	r1, r2, r3, r1
 8122b44:	3930      	subs	r1, #48	@ 0x30
 8122b46:	9143      	str	r1, [sp, #268]	@ 0x10c
 8122b48:	464d      	mov	r5, r9
 8122b4a:	e7d2      	b.n	8122af2 <__ssvfiscanf_r+0xaa>
 8122b4c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8122b50:	2a20      	cmp	r2, #32
 8122b52:	d8ef      	bhi.n	8122b34 <__ssvfiscanf_r+0xec>
 8122b54:	a101      	add	r1, pc, #4	@ (adr r1, 8122b5c <__ssvfiscanf_r+0x114>)
 8122b56:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8122b5a:	bf00      	nop
 8122b5c:	08122c0f 	.word	0x08122c0f
 8122b60:	08122b35 	.word	0x08122b35
 8122b64:	08122b35 	.word	0x08122b35
 8122b68:	08122c69 	.word	0x08122c69
 8122b6c:	08122b35 	.word	0x08122b35
 8122b70:	08122b35 	.word	0x08122b35
 8122b74:	08122b35 	.word	0x08122b35
 8122b78:	08122b35 	.word	0x08122b35
 8122b7c:	08122b35 	.word	0x08122b35
 8122b80:	08122b35 	.word	0x08122b35
 8122b84:	08122b35 	.word	0x08122b35
 8122b88:	08122c7f 	.word	0x08122c7f
 8122b8c:	08122c65 	.word	0x08122c65
 8122b90:	08122be7 	.word	0x08122be7
 8122b94:	08122be7 	.word	0x08122be7
 8122b98:	08122be7 	.word	0x08122be7
 8122b9c:	08122b35 	.word	0x08122b35
 8122ba0:	08122c21 	.word	0x08122c21
 8122ba4:	08122b35 	.word	0x08122b35
 8122ba8:	08122b35 	.word	0x08122b35
 8122bac:	08122b35 	.word	0x08122b35
 8122bb0:	08122b35 	.word	0x08122b35
 8122bb4:	08122c8f 	.word	0x08122c8f
 8122bb8:	08122c29 	.word	0x08122c29
 8122bbc:	08122c07 	.word	0x08122c07
 8122bc0:	08122b35 	.word	0x08122b35
 8122bc4:	08122b35 	.word	0x08122b35
 8122bc8:	08122c8b 	.word	0x08122c8b
 8122bcc:	08122b35 	.word	0x08122b35
 8122bd0:	08122c65 	.word	0x08122c65
 8122bd4:	08122b35 	.word	0x08122b35
 8122bd8:	08122b35 	.word	0x08122b35
 8122bdc:	08122c0f 	.word	0x08122c0f
 8122be0:	3b45      	subs	r3, #69	@ 0x45
 8122be2:	2b02      	cmp	r3, #2
 8122be4:	d8a6      	bhi.n	8122b34 <__ssvfiscanf_r+0xec>
 8122be6:	2305      	movs	r3, #5
 8122be8:	e021      	b.n	8122c2e <__ssvfiscanf_r+0x1e6>
 8122bea:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8122bec:	4621      	mov	r1, r4
 8122bee:	4630      	mov	r0, r6
 8122bf0:	4798      	blx	r3
 8122bf2:	2800      	cmp	r0, #0
 8122bf4:	f43f af66 	beq.w	8122ac4 <__ssvfiscanf_r+0x7c>
 8122bf8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8122bfa:	2800      	cmp	r0, #0
 8122bfc:	f040 808b 	bne.w	8122d16 <__ssvfiscanf_r+0x2ce>
 8122c00:	f04f 30ff 	mov.w	r0, #4294967295
 8122c04:	e08b      	b.n	8122d1e <__ssvfiscanf_r+0x2d6>
 8122c06:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8122c08:	f042 0220 	orr.w	r2, r2, #32
 8122c0c:	9241      	str	r2, [sp, #260]	@ 0x104
 8122c0e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8122c10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8122c14:	9241      	str	r2, [sp, #260]	@ 0x104
 8122c16:	2210      	movs	r2, #16
 8122c18:	2b6e      	cmp	r3, #110	@ 0x6e
 8122c1a:	9242      	str	r2, [sp, #264]	@ 0x108
 8122c1c:	d902      	bls.n	8122c24 <__ssvfiscanf_r+0x1dc>
 8122c1e:	e005      	b.n	8122c2c <__ssvfiscanf_r+0x1e4>
 8122c20:	2300      	movs	r3, #0
 8122c22:	9342      	str	r3, [sp, #264]	@ 0x108
 8122c24:	2303      	movs	r3, #3
 8122c26:	e002      	b.n	8122c2e <__ssvfiscanf_r+0x1e6>
 8122c28:	2308      	movs	r3, #8
 8122c2a:	9342      	str	r3, [sp, #264]	@ 0x108
 8122c2c:	2304      	movs	r3, #4
 8122c2e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8122c30:	6863      	ldr	r3, [r4, #4]
 8122c32:	2b00      	cmp	r3, #0
 8122c34:	dd39      	ble.n	8122caa <__ssvfiscanf_r+0x262>
 8122c36:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8122c38:	0659      	lsls	r1, r3, #25
 8122c3a:	d404      	bmi.n	8122c46 <__ssvfiscanf_r+0x1fe>
 8122c3c:	6823      	ldr	r3, [r4, #0]
 8122c3e:	781a      	ldrb	r2, [r3, #0]
 8122c40:	5cba      	ldrb	r2, [r7, r2]
 8122c42:	0712      	lsls	r2, r2, #28
 8122c44:	d438      	bmi.n	8122cb8 <__ssvfiscanf_r+0x270>
 8122c46:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8122c48:	2b02      	cmp	r3, #2
 8122c4a:	dc47      	bgt.n	8122cdc <__ssvfiscanf_r+0x294>
 8122c4c:	466b      	mov	r3, sp
 8122c4e:	4622      	mov	r2, r4
 8122c50:	a941      	add	r1, sp, #260	@ 0x104
 8122c52:	4630      	mov	r0, r6
 8122c54:	f000 f86c 	bl	8122d30 <_scanf_chars>
 8122c58:	2801      	cmp	r0, #1
 8122c5a:	d064      	beq.n	8122d26 <__ssvfiscanf_r+0x2de>
 8122c5c:	2802      	cmp	r0, #2
 8122c5e:	f47f af18 	bne.w	8122a92 <__ssvfiscanf_r+0x4a>
 8122c62:	e7c9      	b.n	8122bf8 <__ssvfiscanf_r+0x1b0>
 8122c64:	220a      	movs	r2, #10
 8122c66:	e7d7      	b.n	8122c18 <__ssvfiscanf_r+0x1d0>
 8122c68:	4629      	mov	r1, r5
 8122c6a:	4640      	mov	r0, r8
 8122c6c:	f000 fa56 	bl	812311c <__sccl>
 8122c70:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8122c72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8122c76:	9341      	str	r3, [sp, #260]	@ 0x104
 8122c78:	4605      	mov	r5, r0
 8122c7a:	2301      	movs	r3, #1
 8122c7c:	e7d7      	b.n	8122c2e <__ssvfiscanf_r+0x1e6>
 8122c7e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8122c80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8122c84:	9341      	str	r3, [sp, #260]	@ 0x104
 8122c86:	2300      	movs	r3, #0
 8122c88:	e7d1      	b.n	8122c2e <__ssvfiscanf_r+0x1e6>
 8122c8a:	2302      	movs	r3, #2
 8122c8c:	e7cf      	b.n	8122c2e <__ssvfiscanf_r+0x1e6>
 8122c8e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8122c90:	06c3      	lsls	r3, r0, #27
 8122c92:	f53f aefe 	bmi.w	8122a92 <__ssvfiscanf_r+0x4a>
 8122c96:	9b00      	ldr	r3, [sp, #0]
 8122c98:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8122c9a:	1d19      	adds	r1, r3, #4
 8122c9c:	9100      	str	r1, [sp, #0]
 8122c9e:	681b      	ldr	r3, [r3, #0]
 8122ca0:	07c0      	lsls	r0, r0, #31
 8122ca2:	bf4c      	ite	mi
 8122ca4:	801a      	strhmi	r2, [r3, #0]
 8122ca6:	601a      	strpl	r2, [r3, #0]
 8122ca8:	e6f3      	b.n	8122a92 <__ssvfiscanf_r+0x4a>
 8122caa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8122cac:	4621      	mov	r1, r4
 8122cae:	4630      	mov	r0, r6
 8122cb0:	4798      	blx	r3
 8122cb2:	2800      	cmp	r0, #0
 8122cb4:	d0bf      	beq.n	8122c36 <__ssvfiscanf_r+0x1ee>
 8122cb6:	e79f      	b.n	8122bf8 <__ssvfiscanf_r+0x1b0>
 8122cb8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8122cba:	3201      	adds	r2, #1
 8122cbc:	9245      	str	r2, [sp, #276]	@ 0x114
 8122cbe:	6862      	ldr	r2, [r4, #4]
 8122cc0:	3a01      	subs	r2, #1
 8122cc2:	2a00      	cmp	r2, #0
 8122cc4:	6062      	str	r2, [r4, #4]
 8122cc6:	dd02      	ble.n	8122cce <__ssvfiscanf_r+0x286>
 8122cc8:	3301      	adds	r3, #1
 8122cca:	6023      	str	r3, [r4, #0]
 8122ccc:	e7b6      	b.n	8122c3c <__ssvfiscanf_r+0x1f4>
 8122cce:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8122cd0:	4621      	mov	r1, r4
 8122cd2:	4630      	mov	r0, r6
 8122cd4:	4798      	blx	r3
 8122cd6:	2800      	cmp	r0, #0
 8122cd8:	d0b0      	beq.n	8122c3c <__ssvfiscanf_r+0x1f4>
 8122cda:	e78d      	b.n	8122bf8 <__ssvfiscanf_r+0x1b0>
 8122cdc:	2b04      	cmp	r3, #4
 8122cde:	dc0f      	bgt.n	8122d00 <__ssvfiscanf_r+0x2b8>
 8122ce0:	466b      	mov	r3, sp
 8122ce2:	4622      	mov	r2, r4
 8122ce4:	a941      	add	r1, sp, #260	@ 0x104
 8122ce6:	4630      	mov	r0, r6
 8122ce8:	f000 f87c 	bl	8122de4 <_scanf_i>
 8122cec:	e7b4      	b.n	8122c58 <__ssvfiscanf_r+0x210>
 8122cee:	bf00      	nop
 8122cf0:	08122999 	.word	0x08122999
 8122cf4:	08122a0f 	.word	0x08122a0f
 8122cf8:	08128ba8 	.word	0x08128ba8
 8122cfc:	08128cae 	.word	0x08128cae
 8122d00:	4b0a      	ldr	r3, [pc, #40]	@ (8122d2c <__ssvfiscanf_r+0x2e4>)
 8122d02:	2b00      	cmp	r3, #0
 8122d04:	f43f aec5 	beq.w	8122a92 <__ssvfiscanf_r+0x4a>
 8122d08:	466b      	mov	r3, sp
 8122d0a:	4622      	mov	r2, r4
 8122d0c:	a941      	add	r1, sp, #260	@ 0x104
 8122d0e:	4630      	mov	r0, r6
 8122d10:	f3af 8000 	nop.w
 8122d14:	e7a0      	b.n	8122c58 <__ssvfiscanf_r+0x210>
 8122d16:	89a3      	ldrh	r3, [r4, #12]
 8122d18:	065b      	lsls	r3, r3, #25
 8122d1a:	f53f af71 	bmi.w	8122c00 <__ssvfiscanf_r+0x1b8>
 8122d1e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8122d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8122d26:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8122d28:	e7f9      	b.n	8122d1e <__ssvfiscanf_r+0x2d6>
 8122d2a:	bf00      	nop
 8122d2c:	00000000 	.word	0x00000000

08122d30 <_scanf_chars>:
 8122d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8122d34:	4615      	mov	r5, r2
 8122d36:	688a      	ldr	r2, [r1, #8]
 8122d38:	4680      	mov	r8, r0
 8122d3a:	460c      	mov	r4, r1
 8122d3c:	b932      	cbnz	r2, 8122d4c <_scanf_chars+0x1c>
 8122d3e:	698a      	ldr	r2, [r1, #24]
 8122d40:	2a00      	cmp	r2, #0
 8122d42:	bf14      	ite	ne
 8122d44:	f04f 32ff 	movne.w	r2, #4294967295
 8122d48:	2201      	moveq	r2, #1
 8122d4a:	608a      	str	r2, [r1, #8]
 8122d4c:	6822      	ldr	r2, [r4, #0]
 8122d4e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8122de0 <_scanf_chars+0xb0>
 8122d52:	06d1      	lsls	r1, r2, #27
 8122d54:	bf5f      	itttt	pl
 8122d56:	681a      	ldrpl	r2, [r3, #0]
 8122d58:	1d11      	addpl	r1, r2, #4
 8122d5a:	6019      	strpl	r1, [r3, #0]
 8122d5c:	6816      	ldrpl	r6, [r2, #0]
 8122d5e:	2700      	movs	r7, #0
 8122d60:	69a0      	ldr	r0, [r4, #24]
 8122d62:	b188      	cbz	r0, 8122d88 <_scanf_chars+0x58>
 8122d64:	2801      	cmp	r0, #1
 8122d66:	d107      	bne.n	8122d78 <_scanf_chars+0x48>
 8122d68:	682b      	ldr	r3, [r5, #0]
 8122d6a:	781a      	ldrb	r2, [r3, #0]
 8122d6c:	6963      	ldr	r3, [r4, #20]
 8122d6e:	5c9b      	ldrb	r3, [r3, r2]
 8122d70:	b953      	cbnz	r3, 8122d88 <_scanf_chars+0x58>
 8122d72:	2f00      	cmp	r7, #0
 8122d74:	d031      	beq.n	8122dda <_scanf_chars+0xaa>
 8122d76:	e022      	b.n	8122dbe <_scanf_chars+0x8e>
 8122d78:	2802      	cmp	r0, #2
 8122d7a:	d120      	bne.n	8122dbe <_scanf_chars+0x8e>
 8122d7c:	682b      	ldr	r3, [r5, #0]
 8122d7e:	781b      	ldrb	r3, [r3, #0]
 8122d80:	f819 3003 	ldrb.w	r3, [r9, r3]
 8122d84:	071b      	lsls	r3, r3, #28
 8122d86:	d41a      	bmi.n	8122dbe <_scanf_chars+0x8e>
 8122d88:	6823      	ldr	r3, [r4, #0]
 8122d8a:	06da      	lsls	r2, r3, #27
 8122d8c:	bf5e      	ittt	pl
 8122d8e:	682b      	ldrpl	r3, [r5, #0]
 8122d90:	781b      	ldrbpl	r3, [r3, #0]
 8122d92:	f806 3b01 	strbpl.w	r3, [r6], #1
 8122d96:	682a      	ldr	r2, [r5, #0]
 8122d98:	686b      	ldr	r3, [r5, #4]
 8122d9a:	3201      	adds	r2, #1
 8122d9c:	602a      	str	r2, [r5, #0]
 8122d9e:	68a2      	ldr	r2, [r4, #8]
 8122da0:	3b01      	subs	r3, #1
 8122da2:	3a01      	subs	r2, #1
 8122da4:	606b      	str	r3, [r5, #4]
 8122da6:	3701      	adds	r7, #1
 8122da8:	60a2      	str	r2, [r4, #8]
 8122daa:	b142      	cbz	r2, 8122dbe <_scanf_chars+0x8e>
 8122dac:	2b00      	cmp	r3, #0
 8122dae:	dcd7      	bgt.n	8122d60 <_scanf_chars+0x30>
 8122db0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8122db4:	4629      	mov	r1, r5
 8122db6:	4640      	mov	r0, r8
 8122db8:	4798      	blx	r3
 8122dba:	2800      	cmp	r0, #0
 8122dbc:	d0d0      	beq.n	8122d60 <_scanf_chars+0x30>
 8122dbe:	6823      	ldr	r3, [r4, #0]
 8122dc0:	f013 0310 	ands.w	r3, r3, #16
 8122dc4:	d105      	bne.n	8122dd2 <_scanf_chars+0xa2>
 8122dc6:	68e2      	ldr	r2, [r4, #12]
 8122dc8:	3201      	adds	r2, #1
 8122dca:	60e2      	str	r2, [r4, #12]
 8122dcc:	69a2      	ldr	r2, [r4, #24]
 8122dce:	b102      	cbz	r2, 8122dd2 <_scanf_chars+0xa2>
 8122dd0:	7033      	strb	r3, [r6, #0]
 8122dd2:	6923      	ldr	r3, [r4, #16]
 8122dd4:	443b      	add	r3, r7
 8122dd6:	6123      	str	r3, [r4, #16]
 8122dd8:	2000      	movs	r0, #0
 8122dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8122dde:	bf00      	nop
 8122de0:	08128ba8 	.word	0x08128ba8

08122de4 <_scanf_i>:
 8122de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8122de8:	4698      	mov	r8, r3
 8122dea:	4b74      	ldr	r3, [pc, #464]	@ (8122fbc <_scanf_i+0x1d8>)
 8122dec:	460c      	mov	r4, r1
 8122dee:	4682      	mov	sl, r0
 8122df0:	4616      	mov	r6, r2
 8122df2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8122df6:	b087      	sub	sp, #28
 8122df8:	ab03      	add	r3, sp, #12
 8122dfa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8122dfe:	4b70      	ldr	r3, [pc, #448]	@ (8122fc0 <_scanf_i+0x1dc>)
 8122e00:	69a1      	ldr	r1, [r4, #24]
 8122e02:	4a70      	ldr	r2, [pc, #448]	@ (8122fc4 <_scanf_i+0x1e0>)
 8122e04:	2903      	cmp	r1, #3
 8122e06:	bf08      	it	eq
 8122e08:	461a      	moveq	r2, r3
 8122e0a:	68a3      	ldr	r3, [r4, #8]
 8122e0c:	9201      	str	r2, [sp, #4]
 8122e0e:	1e5a      	subs	r2, r3, #1
 8122e10:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8122e14:	bf88      	it	hi
 8122e16:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8122e1a:	4627      	mov	r7, r4
 8122e1c:	bf82      	ittt	hi
 8122e1e:	eb03 0905 	addhi.w	r9, r3, r5
 8122e22:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8122e26:	60a3      	strhi	r3, [r4, #8]
 8122e28:	f857 3b1c 	ldr.w	r3, [r7], #28
 8122e2c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8122e30:	bf98      	it	ls
 8122e32:	f04f 0900 	movls.w	r9, #0
 8122e36:	6023      	str	r3, [r4, #0]
 8122e38:	463d      	mov	r5, r7
 8122e3a:	f04f 0b00 	mov.w	fp, #0
 8122e3e:	6831      	ldr	r1, [r6, #0]
 8122e40:	ab03      	add	r3, sp, #12
 8122e42:	7809      	ldrb	r1, [r1, #0]
 8122e44:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8122e48:	2202      	movs	r2, #2
 8122e4a:	f7dd fa49 	bl	81002e0 <memchr>
 8122e4e:	b328      	cbz	r0, 8122e9c <_scanf_i+0xb8>
 8122e50:	f1bb 0f01 	cmp.w	fp, #1
 8122e54:	d159      	bne.n	8122f0a <_scanf_i+0x126>
 8122e56:	6862      	ldr	r2, [r4, #4]
 8122e58:	b92a      	cbnz	r2, 8122e66 <_scanf_i+0x82>
 8122e5a:	6822      	ldr	r2, [r4, #0]
 8122e5c:	2108      	movs	r1, #8
 8122e5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8122e62:	6061      	str	r1, [r4, #4]
 8122e64:	6022      	str	r2, [r4, #0]
 8122e66:	6822      	ldr	r2, [r4, #0]
 8122e68:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8122e6c:	6022      	str	r2, [r4, #0]
 8122e6e:	68a2      	ldr	r2, [r4, #8]
 8122e70:	1e51      	subs	r1, r2, #1
 8122e72:	60a1      	str	r1, [r4, #8]
 8122e74:	b192      	cbz	r2, 8122e9c <_scanf_i+0xb8>
 8122e76:	6832      	ldr	r2, [r6, #0]
 8122e78:	1c51      	adds	r1, r2, #1
 8122e7a:	6031      	str	r1, [r6, #0]
 8122e7c:	7812      	ldrb	r2, [r2, #0]
 8122e7e:	f805 2b01 	strb.w	r2, [r5], #1
 8122e82:	6872      	ldr	r2, [r6, #4]
 8122e84:	3a01      	subs	r2, #1
 8122e86:	2a00      	cmp	r2, #0
 8122e88:	6072      	str	r2, [r6, #4]
 8122e8a:	dc07      	bgt.n	8122e9c <_scanf_i+0xb8>
 8122e8c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8122e90:	4631      	mov	r1, r6
 8122e92:	4650      	mov	r0, sl
 8122e94:	4790      	blx	r2
 8122e96:	2800      	cmp	r0, #0
 8122e98:	f040 8085 	bne.w	8122fa6 <_scanf_i+0x1c2>
 8122e9c:	f10b 0b01 	add.w	fp, fp, #1
 8122ea0:	f1bb 0f03 	cmp.w	fp, #3
 8122ea4:	d1cb      	bne.n	8122e3e <_scanf_i+0x5a>
 8122ea6:	6863      	ldr	r3, [r4, #4]
 8122ea8:	b90b      	cbnz	r3, 8122eae <_scanf_i+0xca>
 8122eaa:	230a      	movs	r3, #10
 8122eac:	6063      	str	r3, [r4, #4]
 8122eae:	6863      	ldr	r3, [r4, #4]
 8122eb0:	4945      	ldr	r1, [pc, #276]	@ (8122fc8 <_scanf_i+0x1e4>)
 8122eb2:	6960      	ldr	r0, [r4, #20]
 8122eb4:	1ac9      	subs	r1, r1, r3
 8122eb6:	f000 f931 	bl	812311c <__sccl>
 8122eba:	f04f 0b00 	mov.w	fp, #0
 8122ebe:	68a3      	ldr	r3, [r4, #8]
 8122ec0:	6822      	ldr	r2, [r4, #0]
 8122ec2:	2b00      	cmp	r3, #0
 8122ec4:	d03d      	beq.n	8122f42 <_scanf_i+0x15e>
 8122ec6:	6831      	ldr	r1, [r6, #0]
 8122ec8:	6960      	ldr	r0, [r4, #20]
 8122eca:	f891 c000 	ldrb.w	ip, [r1]
 8122ece:	f810 000c 	ldrb.w	r0, [r0, ip]
 8122ed2:	2800      	cmp	r0, #0
 8122ed4:	d035      	beq.n	8122f42 <_scanf_i+0x15e>
 8122ed6:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8122eda:	d124      	bne.n	8122f26 <_scanf_i+0x142>
 8122edc:	0510      	lsls	r0, r2, #20
 8122ede:	d522      	bpl.n	8122f26 <_scanf_i+0x142>
 8122ee0:	f10b 0b01 	add.w	fp, fp, #1
 8122ee4:	f1b9 0f00 	cmp.w	r9, #0
 8122ee8:	d003      	beq.n	8122ef2 <_scanf_i+0x10e>
 8122eea:	3301      	adds	r3, #1
 8122eec:	f109 39ff 	add.w	r9, r9, #4294967295
 8122ef0:	60a3      	str	r3, [r4, #8]
 8122ef2:	6873      	ldr	r3, [r6, #4]
 8122ef4:	3b01      	subs	r3, #1
 8122ef6:	2b00      	cmp	r3, #0
 8122ef8:	6073      	str	r3, [r6, #4]
 8122efa:	dd1b      	ble.n	8122f34 <_scanf_i+0x150>
 8122efc:	6833      	ldr	r3, [r6, #0]
 8122efe:	3301      	adds	r3, #1
 8122f00:	6033      	str	r3, [r6, #0]
 8122f02:	68a3      	ldr	r3, [r4, #8]
 8122f04:	3b01      	subs	r3, #1
 8122f06:	60a3      	str	r3, [r4, #8]
 8122f08:	e7d9      	b.n	8122ebe <_scanf_i+0xda>
 8122f0a:	f1bb 0f02 	cmp.w	fp, #2
 8122f0e:	d1ae      	bne.n	8122e6e <_scanf_i+0x8a>
 8122f10:	6822      	ldr	r2, [r4, #0]
 8122f12:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8122f16:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8122f1a:	d1bf      	bne.n	8122e9c <_scanf_i+0xb8>
 8122f1c:	2110      	movs	r1, #16
 8122f1e:	6061      	str	r1, [r4, #4]
 8122f20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8122f24:	e7a2      	b.n	8122e6c <_scanf_i+0x88>
 8122f26:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8122f2a:	6022      	str	r2, [r4, #0]
 8122f2c:	780b      	ldrb	r3, [r1, #0]
 8122f2e:	f805 3b01 	strb.w	r3, [r5], #1
 8122f32:	e7de      	b.n	8122ef2 <_scanf_i+0x10e>
 8122f34:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8122f38:	4631      	mov	r1, r6
 8122f3a:	4650      	mov	r0, sl
 8122f3c:	4798      	blx	r3
 8122f3e:	2800      	cmp	r0, #0
 8122f40:	d0df      	beq.n	8122f02 <_scanf_i+0x11e>
 8122f42:	6823      	ldr	r3, [r4, #0]
 8122f44:	05d9      	lsls	r1, r3, #23
 8122f46:	d50d      	bpl.n	8122f64 <_scanf_i+0x180>
 8122f48:	42bd      	cmp	r5, r7
 8122f4a:	d909      	bls.n	8122f60 <_scanf_i+0x17c>
 8122f4c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8122f50:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8122f54:	4632      	mov	r2, r6
 8122f56:	4650      	mov	r0, sl
 8122f58:	4798      	blx	r3
 8122f5a:	f105 39ff 	add.w	r9, r5, #4294967295
 8122f5e:	464d      	mov	r5, r9
 8122f60:	42bd      	cmp	r5, r7
 8122f62:	d028      	beq.n	8122fb6 <_scanf_i+0x1d2>
 8122f64:	6822      	ldr	r2, [r4, #0]
 8122f66:	f012 0210 	ands.w	r2, r2, #16
 8122f6a:	d113      	bne.n	8122f94 <_scanf_i+0x1b0>
 8122f6c:	702a      	strb	r2, [r5, #0]
 8122f6e:	6863      	ldr	r3, [r4, #4]
 8122f70:	9e01      	ldr	r6, [sp, #4]
 8122f72:	4639      	mov	r1, r7
 8122f74:	4650      	mov	r0, sl
 8122f76:	47b0      	blx	r6
 8122f78:	f8d8 3000 	ldr.w	r3, [r8]
 8122f7c:	6821      	ldr	r1, [r4, #0]
 8122f7e:	1d1a      	adds	r2, r3, #4
 8122f80:	f8c8 2000 	str.w	r2, [r8]
 8122f84:	f011 0f20 	tst.w	r1, #32
 8122f88:	681b      	ldr	r3, [r3, #0]
 8122f8a:	d00f      	beq.n	8122fac <_scanf_i+0x1c8>
 8122f8c:	6018      	str	r0, [r3, #0]
 8122f8e:	68e3      	ldr	r3, [r4, #12]
 8122f90:	3301      	adds	r3, #1
 8122f92:	60e3      	str	r3, [r4, #12]
 8122f94:	6923      	ldr	r3, [r4, #16]
 8122f96:	1bed      	subs	r5, r5, r7
 8122f98:	445d      	add	r5, fp
 8122f9a:	442b      	add	r3, r5
 8122f9c:	6123      	str	r3, [r4, #16]
 8122f9e:	2000      	movs	r0, #0
 8122fa0:	b007      	add	sp, #28
 8122fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8122fa6:	f04f 0b00 	mov.w	fp, #0
 8122faa:	e7ca      	b.n	8122f42 <_scanf_i+0x15e>
 8122fac:	07ca      	lsls	r2, r1, #31
 8122fae:	bf4c      	ite	mi
 8122fb0:	8018      	strhmi	r0, [r3, #0]
 8122fb2:	6018      	strpl	r0, [r3, #0]
 8122fb4:	e7eb      	b.n	8122f8e <_scanf_i+0x1aa>
 8122fb6:	2001      	movs	r0, #1
 8122fb8:	e7f2      	b.n	8122fa0 <_scanf_i+0x1bc>
 8122fba:	bf00      	nop
 8122fbc:	081288b0 	.word	0x081288b0
 8122fc0:	081218f5 	.word	0x081218f5
 8122fc4:	08123335 	.word	0x08123335
 8122fc8:	08128d27 	.word	0x08128d27

08122fcc <fiprintf>:
 8122fcc:	b40e      	push	{r1, r2, r3}
 8122fce:	b503      	push	{r0, r1, lr}
 8122fd0:	4601      	mov	r1, r0
 8122fd2:	ab03      	add	r3, sp, #12
 8122fd4:	4805      	ldr	r0, [pc, #20]	@ (8122fec <fiprintf+0x20>)
 8122fd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8122fda:	6800      	ldr	r0, [r0, #0]
 8122fdc:	9301      	str	r3, [sp, #4]
 8122fde:	f7fe fcb5 	bl	812194c <_vfiprintf_r>
 8122fe2:	b002      	add	sp, #8
 8122fe4:	f85d eb04 	ldr.w	lr, [sp], #4
 8122fe8:	b003      	add	sp, #12
 8122fea:	4770      	bx	lr
 8122fec:	10000040 	.word	0x10000040

08122ff0 <__swhatbuf_r>:
 8122ff0:	b570      	push	{r4, r5, r6, lr}
 8122ff2:	460c      	mov	r4, r1
 8122ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8122ff8:	2900      	cmp	r1, #0
 8122ffa:	b096      	sub	sp, #88	@ 0x58
 8122ffc:	4615      	mov	r5, r2
 8122ffe:	461e      	mov	r6, r3
 8123000:	da0d      	bge.n	812301e <__swhatbuf_r+0x2e>
 8123002:	89a3      	ldrh	r3, [r4, #12]
 8123004:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8123008:	f04f 0100 	mov.w	r1, #0
 812300c:	bf14      	ite	ne
 812300e:	2340      	movne	r3, #64	@ 0x40
 8123010:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8123014:	2000      	movs	r0, #0
 8123016:	6031      	str	r1, [r6, #0]
 8123018:	602b      	str	r3, [r5, #0]
 812301a:	b016      	add	sp, #88	@ 0x58
 812301c:	bd70      	pop	{r4, r5, r6, pc}
 812301e:	466a      	mov	r2, sp
 8123020:	f000 f8f0 	bl	8123204 <_fstat_r>
 8123024:	2800      	cmp	r0, #0
 8123026:	dbec      	blt.n	8123002 <__swhatbuf_r+0x12>
 8123028:	9901      	ldr	r1, [sp, #4]
 812302a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 812302e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8123032:	4259      	negs	r1, r3
 8123034:	4159      	adcs	r1, r3
 8123036:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 812303a:	e7eb      	b.n	8123014 <__swhatbuf_r+0x24>

0812303c <__smakebuf_r>:
 812303c:	898b      	ldrh	r3, [r1, #12]
 812303e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8123040:	079d      	lsls	r5, r3, #30
 8123042:	4606      	mov	r6, r0
 8123044:	460c      	mov	r4, r1
 8123046:	d507      	bpl.n	8123058 <__smakebuf_r+0x1c>
 8123048:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 812304c:	6023      	str	r3, [r4, #0]
 812304e:	6123      	str	r3, [r4, #16]
 8123050:	2301      	movs	r3, #1
 8123052:	6163      	str	r3, [r4, #20]
 8123054:	b003      	add	sp, #12
 8123056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8123058:	ab01      	add	r3, sp, #4
 812305a:	466a      	mov	r2, sp
 812305c:	f7ff ffc8 	bl	8122ff0 <__swhatbuf_r>
 8123060:	9f00      	ldr	r7, [sp, #0]
 8123062:	4605      	mov	r5, r0
 8123064:	4639      	mov	r1, r7
 8123066:	4630      	mov	r0, r6
 8123068:	f7fe fb00 	bl	812166c <_malloc_r>
 812306c:	b948      	cbnz	r0, 8123082 <__smakebuf_r+0x46>
 812306e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8123072:	059a      	lsls	r2, r3, #22
 8123074:	d4ee      	bmi.n	8123054 <__smakebuf_r+0x18>
 8123076:	f023 0303 	bic.w	r3, r3, #3
 812307a:	f043 0302 	orr.w	r3, r3, #2
 812307e:	81a3      	strh	r3, [r4, #12]
 8123080:	e7e2      	b.n	8123048 <__smakebuf_r+0xc>
 8123082:	89a3      	ldrh	r3, [r4, #12]
 8123084:	6020      	str	r0, [r4, #0]
 8123086:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 812308a:	81a3      	strh	r3, [r4, #12]
 812308c:	9b01      	ldr	r3, [sp, #4]
 812308e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8123092:	b15b      	cbz	r3, 81230ac <__smakebuf_r+0x70>
 8123094:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8123098:	4630      	mov	r0, r6
 812309a:	f000 f8c5 	bl	8123228 <_isatty_r>
 812309e:	b128      	cbz	r0, 81230ac <__smakebuf_r+0x70>
 81230a0:	89a3      	ldrh	r3, [r4, #12]
 81230a2:	f023 0303 	bic.w	r3, r3, #3
 81230a6:	f043 0301 	orr.w	r3, r3, #1
 81230aa:	81a3      	strh	r3, [r4, #12]
 81230ac:	89a3      	ldrh	r3, [r4, #12]
 81230ae:	431d      	orrs	r5, r3
 81230b0:	81a5      	strh	r5, [r4, #12]
 81230b2:	e7cf      	b.n	8123054 <__smakebuf_r+0x18>

081230b4 <_putc_r>:
 81230b4:	b570      	push	{r4, r5, r6, lr}
 81230b6:	460d      	mov	r5, r1
 81230b8:	4614      	mov	r4, r2
 81230ba:	4606      	mov	r6, r0
 81230bc:	b118      	cbz	r0, 81230c6 <_putc_r+0x12>
 81230be:	6a03      	ldr	r3, [r0, #32]
 81230c0:	b90b      	cbnz	r3, 81230c6 <_putc_r+0x12>
 81230c2:	f7ff f83f 	bl	8122144 <__sinit>
 81230c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 81230c8:	07d8      	lsls	r0, r3, #31
 81230ca:	d405      	bmi.n	81230d8 <_putc_r+0x24>
 81230cc:	89a3      	ldrh	r3, [r4, #12]
 81230ce:	0599      	lsls	r1, r3, #22
 81230d0:	d402      	bmi.n	81230d8 <_putc_r+0x24>
 81230d2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 81230d4:	f7ff fbb9 	bl	812284a <__retarget_lock_acquire_recursive>
 81230d8:	68a3      	ldr	r3, [r4, #8]
 81230da:	3b01      	subs	r3, #1
 81230dc:	2b00      	cmp	r3, #0
 81230de:	60a3      	str	r3, [r4, #8]
 81230e0:	da05      	bge.n	81230ee <_putc_r+0x3a>
 81230e2:	69a2      	ldr	r2, [r4, #24]
 81230e4:	4293      	cmp	r3, r2
 81230e6:	db12      	blt.n	812310e <_putc_r+0x5a>
 81230e8:	b2eb      	uxtb	r3, r5
 81230ea:	2b0a      	cmp	r3, #10
 81230ec:	d00f      	beq.n	812310e <_putc_r+0x5a>
 81230ee:	6823      	ldr	r3, [r4, #0]
 81230f0:	1c5a      	adds	r2, r3, #1
 81230f2:	6022      	str	r2, [r4, #0]
 81230f4:	701d      	strb	r5, [r3, #0]
 81230f6:	b2ed      	uxtb	r5, r5
 81230f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 81230fa:	07da      	lsls	r2, r3, #31
 81230fc:	d405      	bmi.n	812310a <_putc_r+0x56>
 81230fe:	89a3      	ldrh	r3, [r4, #12]
 8123100:	059b      	lsls	r3, r3, #22
 8123102:	d402      	bmi.n	812310a <_putc_r+0x56>
 8123104:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8123106:	f7ff fba1 	bl	812284c <__retarget_lock_release_recursive>
 812310a:	4628      	mov	r0, r5
 812310c:	bd70      	pop	{r4, r5, r6, pc}
 812310e:	4629      	mov	r1, r5
 8123110:	4622      	mov	r2, r4
 8123112:	4630      	mov	r0, r6
 8123114:	f7ff f98d 	bl	8122432 <__swbuf_r>
 8123118:	4605      	mov	r5, r0
 812311a:	e7ed      	b.n	81230f8 <_putc_r+0x44>

0812311c <__sccl>:
 812311c:	b570      	push	{r4, r5, r6, lr}
 812311e:	780b      	ldrb	r3, [r1, #0]
 8123120:	4604      	mov	r4, r0
 8123122:	2b5e      	cmp	r3, #94	@ 0x5e
 8123124:	bf0b      	itete	eq
 8123126:	784b      	ldrbeq	r3, [r1, #1]
 8123128:	1c4a      	addne	r2, r1, #1
 812312a:	1c8a      	addeq	r2, r1, #2
 812312c:	2100      	movne	r1, #0
 812312e:	bf08      	it	eq
 8123130:	2101      	moveq	r1, #1
 8123132:	3801      	subs	r0, #1
 8123134:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8123138:	f800 1f01 	strb.w	r1, [r0, #1]!
 812313c:	42a8      	cmp	r0, r5
 812313e:	d1fb      	bne.n	8123138 <__sccl+0x1c>
 8123140:	b90b      	cbnz	r3, 8123146 <__sccl+0x2a>
 8123142:	1e50      	subs	r0, r2, #1
 8123144:	bd70      	pop	{r4, r5, r6, pc}
 8123146:	f081 0101 	eor.w	r1, r1, #1
 812314a:	54e1      	strb	r1, [r4, r3]
 812314c:	4610      	mov	r0, r2
 812314e:	4602      	mov	r2, r0
 8123150:	f812 5b01 	ldrb.w	r5, [r2], #1
 8123154:	2d2d      	cmp	r5, #45	@ 0x2d
 8123156:	d005      	beq.n	8123164 <__sccl+0x48>
 8123158:	2d5d      	cmp	r5, #93	@ 0x5d
 812315a:	d016      	beq.n	812318a <__sccl+0x6e>
 812315c:	2d00      	cmp	r5, #0
 812315e:	d0f1      	beq.n	8123144 <__sccl+0x28>
 8123160:	462b      	mov	r3, r5
 8123162:	e7f2      	b.n	812314a <__sccl+0x2e>
 8123164:	7846      	ldrb	r6, [r0, #1]
 8123166:	2e5d      	cmp	r6, #93	@ 0x5d
 8123168:	d0fa      	beq.n	8123160 <__sccl+0x44>
 812316a:	42b3      	cmp	r3, r6
 812316c:	dcf8      	bgt.n	8123160 <__sccl+0x44>
 812316e:	3002      	adds	r0, #2
 8123170:	461a      	mov	r2, r3
 8123172:	3201      	adds	r2, #1
 8123174:	4296      	cmp	r6, r2
 8123176:	54a1      	strb	r1, [r4, r2]
 8123178:	dcfb      	bgt.n	8123172 <__sccl+0x56>
 812317a:	1af2      	subs	r2, r6, r3
 812317c:	3a01      	subs	r2, #1
 812317e:	1c5d      	adds	r5, r3, #1
 8123180:	42b3      	cmp	r3, r6
 8123182:	bfa8      	it	ge
 8123184:	2200      	movge	r2, #0
 8123186:	18ab      	adds	r3, r5, r2
 8123188:	e7e1      	b.n	812314e <__sccl+0x32>
 812318a:	4610      	mov	r0, r2
 812318c:	e7da      	b.n	8123144 <__sccl+0x28>

0812318e <__submore>:
 812318e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8123192:	460c      	mov	r4, r1
 8123194:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8123196:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 812319a:	4299      	cmp	r1, r3
 812319c:	d11d      	bne.n	81231da <__submore+0x4c>
 812319e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 81231a2:	f7fe fa63 	bl	812166c <_malloc_r>
 81231a6:	b918      	cbnz	r0, 81231b0 <__submore+0x22>
 81231a8:	f04f 30ff 	mov.w	r0, #4294967295
 81231ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81231b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 81231b4:	63a3      	str	r3, [r4, #56]	@ 0x38
 81231b6:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 81231ba:	6360      	str	r0, [r4, #52]	@ 0x34
 81231bc:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 81231c0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 81231c4:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 81231c8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 81231cc:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 81231d0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 81231d4:	6020      	str	r0, [r4, #0]
 81231d6:	2000      	movs	r0, #0
 81231d8:	e7e8      	b.n	81231ac <__submore+0x1e>
 81231da:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 81231dc:	0077      	lsls	r7, r6, #1
 81231de:	463a      	mov	r2, r7
 81231e0:	f7ff fbac 	bl	812293c <_realloc_r>
 81231e4:	4605      	mov	r5, r0
 81231e6:	2800      	cmp	r0, #0
 81231e8:	d0de      	beq.n	81231a8 <__submore+0x1a>
 81231ea:	eb00 0806 	add.w	r8, r0, r6
 81231ee:	4601      	mov	r1, r0
 81231f0:	4632      	mov	r2, r6
 81231f2:	4640      	mov	r0, r8
 81231f4:	f7ff fb2b 	bl	812284e <memcpy>
 81231f8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 81231fc:	f8c4 8000 	str.w	r8, [r4]
 8123200:	e7e9      	b.n	81231d6 <__submore+0x48>
	...

08123204 <_fstat_r>:
 8123204:	b538      	push	{r3, r4, r5, lr}
 8123206:	4d07      	ldr	r5, [pc, #28]	@ (8123224 <_fstat_r+0x20>)
 8123208:	2300      	movs	r3, #0
 812320a:	4604      	mov	r4, r0
 812320c:	4608      	mov	r0, r1
 812320e:	4611      	mov	r1, r2
 8123210:	602b      	str	r3, [r5, #0]
 8123212:	f7de f827 	bl	8101264 <_fstat>
 8123216:	1c43      	adds	r3, r0, #1
 8123218:	d102      	bne.n	8123220 <_fstat_r+0x1c>
 812321a:	682b      	ldr	r3, [r5, #0]
 812321c:	b103      	cbz	r3, 8123220 <_fstat_r+0x1c>
 812321e:	6023      	str	r3, [r4, #0]
 8123220:	bd38      	pop	{r3, r4, r5, pc}
 8123222:	bf00      	nop
 8123224:	10012014 	.word	0x10012014

08123228 <_isatty_r>:
 8123228:	b538      	push	{r3, r4, r5, lr}
 812322a:	4d06      	ldr	r5, [pc, #24]	@ (8123244 <_isatty_r+0x1c>)
 812322c:	2300      	movs	r3, #0
 812322e:	4604      	mov	r4, r0
 8123230:	4608      	mov	r0, r1
 8123232:	602b      	str	r3, [r5, #0]
 8123234:	f7de f826 	bl	8101284 <_isatty>
 8123238:	1c43      	adds	r3, r0, #1
 812323a:	d102      	bne.n	8123242 <_isatty_r+0x1a>
 812323c:	682b      	ldr	r3, [r5, #0]
 812323e:	b103      	cbz	r3, 8123242 <_isatty_r+0x1a>
 8123240:	6023      	str	r3, [r4, #0]
 8123242:	bd38      	pop	{r3, r4, r5, pc}
 8123244:	10012014 	.word	0x10012014

08123248 <_malloc_usable_size_r>:
 8123248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 812324c:	1f18      	subs	r0, r3, #4
 812324e:	2b00      	cmp	r3, #0
 8123250:	bfbc      	itt	lt
 8123252:	580b      	ldrlt	r3, [r1, r0]
 8123254:	18c0      	addlt	r0, r0, r3
 8123256:	4770      	bx	lr

08123258 <_strtoul_l.constprop.0>:
 8123258:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 812325c:	4e34      	ldr	r6, [pc, #208]	@ (8123330 <_strtoul_l.constprop.0+0xd8>)
 812325e:	4686      	mov	lr, r0
 8123260:	460d      	mov	r5, r1
 8123262:	4628      	mov	r0, r5
 8123264:	f815 4b01 	ldrb.w	r4, [r5], #1
 8123268:	5d37      	ldrb	r7, [r6, r4]
 812326a:	f017 0708 	ands.w	r7, r7, #8
 812326e:	d1f8      	bne.n	8123262 <_strtoul_l.constprop.0+0xa>
 8123270:	2c2d      	cmp	r4, #45	@ 0x2d
 8123272:	d12f      	bne.n	81232d4 <_strtoul_l.constprop.0+0x7c>
 8123274:	782c      	ldrb	r4, [r5, #0]
 8123276:	2701      	movs	r7, #1
 8123278:	1c85      	adds	r5, r0, #2
 812327a:	f033 0010 	bics.w	r0, r3, #16
 812327e:	d109      	bne.n	8123294 <_strtoul_l.constprop.0+0x3c>
 8123280:	2c30      	cmp	r4, #48	@ 0x30
 8123282:	d12c      	bne.n	81232de <_strtoul_l.constprop.0+0x86>
 8123284:	7828      	ldrb	r0, [r5, #0]
 8123286:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 812328a:	2858      	cmp	r0, #88	@ 0x58
 812328c:	d127      	bne.n	81232de <_strtoul_l.constprop.0+0x86>
 812328e:	786c      	ldrb	r4, [r5, #1]
 8123290:	2310      	movs	r3, #16
 8123292:	3502      	adds	r5, #2
 8123294:	f04f 38ff 	mov.w	r8, #4294967295
 8123298:	2600      	movs	r6, #0
 812329a:	fbb8 f8f3 	udiv	r8, r8, r3
 812329e:	fb03 f908 	mul.w	r9, r3, r8
 81232a2:	ea6f 0909 	mvn.w	r9, r9
 81232a6:	4630      	mov	r0, r6
 81232a8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 81232ac:	f1bc 0f09 	cmp.w	ip, #9
 81232b0:	d81c      	bhi.n	81232ec <_strtoul_l.constprop.0+0x94>
 81232b2:	4664      	mov	r4, ip
 81232b4:	42a3      	cmp	r3, r4
 81232b6:	dd2a      	ble.n	812330e <_strtoul_l.constprop.0+0xb6>
 81232b8:	f1b6 3fff 	cmp.w	r6, #4294967295
 81232bc:	d007      	beq.n	81232ce <_strtoul_l.constprop.0+0x76>
 81232be:	4580      	cmp	r8, r0
 81232c0:	d322      	bcc.n	8123308 <_strtoul_l.constprop.0+0xb0>
 81232c2:	d101      	bne.n	81232c8 <_strtoul_l.constprop.0+0x70>
 81232c4:	45a1      	cmp	r9, r4
 81232c6:	db1f      	blt.n	8123308 <_strtoul_l.constprop.0+0xb0>
 81232c8:	fb00 4003 	mla	r0, r0, r3, r4
 81232cc:	2601      	movs	r6, #1
 81232ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 81232d2:	e7e9      	b.n	81232a8 <_strtoul_l.constprop.0+0x50>
 81232d4:	2c2b      	cmp	r4, #43	@ 0x2b
 81232d6:	bf04      	itt	eq
 81232d8:	782c      	ldrbeq	r4, [r5, #0]
 81232da:	1c85      	addeq	r5, r0, #2
 81232dc:	e7cd      	b.n	812327a <_strtoul_l.constprop.0+0x22>
 81232de:	2b00      	cmp	r3, #0
 81232e0:	d1d8      	bne.n	8123294 <_strtoul_l.constprop.0+0x3c>
 81232e2:	2c30      	cmp	r4, #48	@ 0x30
 81232e4:	bf0c      	ite	eq
 81232e6:	2308      	moveq	r3, #8
 81232e8:	230a      	movne	r3, #10
 81232ea:	e7d3      	b.n	8123294 <_strtoul_l.constprop.0+0x3c>
 81232ec:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 81232f0:	f1bc 0f19 	cmp.w	ip, #25
 81232f4:	d801      	bhi.n	81232fa <_strtoul_l.constprop.0+0xa2>
 81232f6:	3c37      	subs	r4, #55	@ 0x37
 81232f8:	e7dc      	b.n	81232b4 <_strtoul_l.constprop.0+0x5c>
 81232fa:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 81232fe:	f1bc 0f19 	cmp.w	ip, #25
 8123302:	d804      	bhi.n	812330e <_strtoul_l.constprop.0+0xb6>
 8123304:	3c57      	subs	r4, #87	@ 0x57
 8123306:	e7d5      	b.n	81232b4 <_strtoul_l.constprop.0+0x5c>
 8123308:	f04f 36ff 	mov.w	r6, #4294967295
 812330c:	e7df      	b.n	81232ce <_strtoul_l.constprop.0+0x76>
 812330e:	1c73      	adds	r3, r6, #1
 8123310:	d106      	bne.n	8123320 <_strtoul_l.constprop.0+0xc8>
 8123312:	2322      	movs	r3, #34	@ 0x22
 8123314:	f8ce 3000 	str.w	r3, [lr]
 8123318:	4630      	mov	r0, r6
 812331a:	b932      	cbnz	r2, 812332a <_strtoul_l.constprop.0+0xd2>
 812331c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8123320:	b107      	cbz	r7, 8123324 <_strtoul_l.constprop.0+0xcc>
 8123322:	4240      	negs	r0, r0
 8123324:	2a00      	cmp	r2, #0
 8123326:	d0f9      	beq.n	812331c <_strtoul_l.constprop.0+0xc4>
 8123328:	b106      	cbz	r6, 812332c <_strtoul_l.constprop.0+0xd4>
 812332a:	1e69      	subs	r1, r5, #1
 812332c:	6011      	str	r1, [r2, #0]
 812332e:	e7f5      	b.n	812331c <_strtoul_l.constprop.0+0xc4>
 8123330:	08128ba8 	.word	0x08128ba8

08123334 <_strtoul_r>:
 8123334:	f7ff bf90 	b.w	8123258 <_strtoul_l.constprop.0>

08123338 <_init>:
 8123338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 812333a:	bf00      	nop
 812333c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 812333e:	bc08      	pop	{r3}
 8123340:	469e      	mov	lr, r3
 8123342:	4770      	bx	lr

08123344 <_fini>:
 8123344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8123346:	bf00      	nop
 8123348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 812334a:	bc08      	pop	{r3}
 812334c:	469e      	mov	lr, r3
 812334e:	4770      	bx	lr
