
STM32H747I-DISCO_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .shared_ram   00000b40  38000000  38000000  00022000  2**2
                  ALLOC
  2 .text         0001c960  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00003244  0811cc00  0811cc00  0001dc00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  0811fe44  0811fe44  00020e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000008  0811fe4c  0811fe4c  00020e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0811fe54  0811fe54  00020e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000090  10000000  0811fe58  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00011e44  10000090  0811fee8  00021090  2**2
                  ALLOC
  9 ._user_heap_stack 00002004  10011ed4  0811fee8  00021ed4  2**0
                  ALLOC
 10 .lwip_sec     00024b83  10020000  10020000  00022000  2**2
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00053c23  00000000  00000000  000210c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000afac  00000000  00000000  00074ce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000037c8  00000000  00000000  0007fc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002b8e  00000000  00000000  00083458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00055e37  00000000  00000000  00085fe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004b888  00000000  00000000  000dbe1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001e96bf  00000000  00000000  001276a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00310d64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000fcd0  00000000  00000000  00310da8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  00320a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000090 	.word	0x10000090
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0811cbe8 	.word	0x0811cbe8

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000094 	.word	0x10000094
 81002dc:	0811cbe8 	.word	0x0811cbe8

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8100390:	b580      	push	{r7, lr}
 8100392:	b082      	sub	sp, #8
 8100394:	af00      	add	r7, sp, #0
 8100396:	6078      	str	r0, [r7, #4]
  if((SemMask &  __HAL_HSEM_SEMID_TO_MASK(HSEM_RX_ID))!= 0)
 8100398:	687b      	ldr	r3, [r7, #4]
 810039a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810039e:	2b00      	cmp	r3, #0
 81003a0:	d005      	beq.n	81003ae <HAL_HSEM_FreeCallback+0x1e>
  {
    /* Re-Activate HSEM notification */
    HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_RX_ID));
 81003a2:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 81003a6:	f009 f8ab 	bl	8109500 <HAL_HSEM_ActivateNotification>
    /* New message received */
    prvCoreInterruptHandler();
 81003aa:	f000 f85f 	bl	810046c <prvCoreInterruptHandler>
  }

  if((SemMask & __HAL_HSEM_SEMID_TO_MASK(HSEM_TX_WAKEUP)) !=0){
 81003ae:	687b      	ldr	r3, [r7, #4]
 81003b0:	2b00      	cmp	r3, #0
 81003b2:	da05      	bge.n	81003c0 <HAL_HSEM_FreeCallback+0x30>
	/* Re-Activate HSEM notification */
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_TX_WAKEUP));
 81003b4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 81003b8:	f009 f8a2 	bl	8109500 <HAL_HSEM_ActivateNotification>
	/* TX queue is empty => wake-up task trying to send a message */
	prvCoreWakeupInterruptHandler();
 81003bc:	f000 f87a 	bl	81004b4 <prvCoreWakeupInterruptHandler>
  }
}
 81003c0:	bf00      	nop
 81003c2:	3708      	adds	r7, #8
 81003c4:	46bd      	mov	sp, r7
 81003c6:	bd80      	pop	{r7, pc}

081003c8 <ipc_init>:

int ipc_init(void)
{
 81003c8:	b580      	push	{r7, lr}
 81003ca:	b084      	sub	sp, #16
 81003cc:	af02      	add	r7, sp, #8
    /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81003ce:	4b1a      	ldr	r3, [pc, #104]	@ (8100438 <ipc_init+0x70>)
 81003d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81003d4:	4a18      	ldr	r2, [pc, #96]	@ (8100438 <ipc_init+0x70>)
 81003d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 81003da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81003de:	4b16      	ldr	r3, [pc, #88]	@ (8100438 <ipc_init+0x70>)
 81003e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81003e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81003e8:	607b      	str	r3, [r7, #4]
 81003ea:	687b      	ldr	r3, [r7, #4]
#ifdef CORE_CM4
  	HAL_HSEM_Take(HSEM_INIT_CM4, 0);
 81003ec:	2100      	movs	r1, #0
 81003ee:	201b      	movs	r0, #27
 81003f0:	f009 f84e 	bl	8109490 <HAL_HSEM_Take>
#elif defined(CORE_CM7)
	memset((void*)(&shared_ram.cm7_to_cm4_buffer), 0, CM7_TO_CM4_BUFFER_SIZE);
	memset((void*)(&shared_ram.cm4_to_cm7_buffer), 0, CM4_TO_CM7_BUFFER_SIZE);
#endif
    shared_ram.cm7_to_cm4_handle = xMessageBufferCreateStatic(CM7_TO_CM4_BUFFER_SIZE, (uint8_t*)shared_ram.cm7_to_cm4_buffer,(StaticMessageBuffer_t*) &shared_ram.cm7_to_cm4_xmsg);
 81003f4:	4b11      	ldr	r3, [pc, #68]	@ (810043c <ipc_init+0x74>)
 81003f6:	9300      	str	r3, [sp, #0]
 81003f8:	4b11      	ldr	r3, [pc, #68]	@ (8100440 <ipc_init+0x78>)
 81003fa:	2201      	movs	r2, #1
 81003fc:	2100      	movs	r1, #0
 81003fe:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 8100402:	f00e f967 	bl	810e6d4 <xStreamBufferGenericCreateStatic>
 8100406:	4603      	mov	r3, r0
 8100408:	4a0e      	ldr	r2, [pc, #56]	@ (8100444 <ipc_init+0x7c>)
 810040a:	6013      	str	r3, [r2, #0]
    shared_ram.cm4_to_cm7_handle = xMessageBufferCreateStatic(CM4_TO_CM7_BUFFER_SIZE, (uint8_t*)shared_ram.cm4_to_cm7_buffer,(StaticMessageBuffer_t*) &shared_ram.cm4_to_cm7_xmsg);
 810040c:	4b0e      	ldr	r3, [pc, #56]	@ (8100448 <ipc_init+0x80>)
 810040e:	9300      	str	r3, [sp, #0]
 8100410:	4b0e      	ldr	r3, [pc, #56]	@ (810044c <ipc_init+0x84>)
 8100412:	2201      	movs	r2, #1
 8100414:	2100      	movs	r1, #0
 8100416:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 810041a:	f00e f95b 	bl	810e6d4 <xStreamBufferGenericCreateStatic>
 810041e:	4603      	mov	r3, r0
 8100420:	4a08      	ldr	r2, [pc, #32]	@ (8100444 <ipc_init+0x7c>)
 8100422:	6053      	str	r3, [r2, #4]
    HAL_HSEM_Release(HSEM_INIT_CM4, 0);
    // Wait for CM4 to complete initialization
    HAL_HSEM_Take(HSEM_INIT_CM7, 0);
#elif defined(CORE_CM4)
    // Signal CM7 that CM4 has completed initialization
    HAL_HSEM_Release(HSEM_INIT_CM7, 0);
 8100424:	2100      	movs	r1, #0
 8100426:	201a      	movs	r0, #26
 8100428:	f009 f856 	bl	81094d8 <HAL_HSEM_Release>
#endif



    return 0;
 810042c:	2300      	movs	r3, #0
}
 810042e:	4618      	mov	r0, r3
 8100430:	3708      	adds	r7, #8
 8100432:	46bd      	mov	sp, r7
 8100434:	bd80      	pop	{r7, pc}
 8100436:	bf00      	nop
 8100438:	58024400 	.word	0x58024400
 810043c:	38000008 	.word	0x38000008
 8100440:	38000050 	.word	0x38000050
 8100444:	38000000 	.word	0x38000000
 8100448:	3800002c 	.word	0x3800002c
 810044c:	380005c8 	.word	0x380005c8

08100450 <ipc_start>:

int ipc_start(void){
 8100450:	b580      	push	{r7, lr}
 8100452:	af00      	add	r7, sp, #0
    HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_RX_ID));
 8100454:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8100458:	f009 f852 	bl	8109500 <HAL_HSEM_ActivateNotification>
    HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_TX_WAKEUP));
 810045c:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8100460:	f009 f84e 	bl	8109500 <HAL_HSEM_ActivateNotification>
    return 0;
 8100464:	2300      	movs	r3, #0
}
 8100466:	4618      	mov	r0, r3
 8100468:	bd80      	pop	{r7, pc}
	...

0810046c <prvCoreInterruptHandler>:

static void prvCoreInterruptHandler(void)
{
 810046c:	b580      	push	{r7, lr}
 810046e:	b082      	sub	sp, #8
 8100470:	af00      	add	r7, sp, #0
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8100472:	2300      	movs	r3, #0
 8100474:	607b      	str	r3, [r7, #4]

    if (!xrx_data_buf)
 8100476:	4b0d      	ldr	r3, [pc, #52]	@ (81004ac <prvCoreInterruptHandler+0x40>)
 8100478:	681b      	ldr	r3, [r3, #0]
 810047a:	2b00      	cmp	r3, #0
 810047c:	d012      	beq.n	81004a4 <prvCoreInterruptHandler+0x38>
    {
    	return;
    }


	xMessageBufferSendCompletedFromISR(xrx_data_buf,
 810047e:	4b0b      	ldr	r3, [pc, #44]	@ (81004ac <prvCoreInterruptHandler+0x40>)
 8100480:	681b      	ldr	r3, [r3, #0]
 8100482:	1d3a      	adds	r2, r7, #4
 8100484:	4611      	mov	r1, r2
 8100486:	4618      	mov	r0, r3
 8100488:	f00e fb80 	bl	810eb8c <xStreamBufferSendCompletedFromISR>

    /* Normal FreeRTOS yield from interrupt semantics, where
       xHigherPriorityTaskWoken is initialzed to pdFALSE and will then get set
       to pdTRUE if the interrupt safe API unblocks a task that has a priority
       above that of the currently executing task. */
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 810048c:	687b      	ldr	r3, [r7, #4]
 810048e:	2b00      	cmp	r3, #0
 8100490:	d009      	beq.n	81004a6 <prvCoreInterruptHandler+0x3a>
 8100492:	4b07      	ldr	r3, [pc, #28]	@ (81004b0 <prvCoreInterruptHandler+0x44>)
 8100494:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8100498:	601a      	str	r2, [r3, #0]
 810049a:	f3bf 8f4f 	dsb	sy
 810049e:	f3bf 8f6f 	isb	sy
 81004a2:	e000      	b.n	81004a6 <prvCoreInterruptHandler+0x3a>
    	return;
 81004a4:	bf00      	nop
}
 81004a6:	3708      	adds	r7, #8
 81004a8:	46bd      	mov	sp, r7
 81004aa:	bd80      	pop	{r7, pc}
 81004ac:	38000000 	.word	0x38000000
 81004b0:	e000ed04 	.word	0xe000ed04

081004b4 <prvCoreWakeupInterruptHandler>:

static void prvCoreWakeupInterruptHandler(void)
{
 81004b4:	b580      	push	{r7, lr}
 81004b6:	b082      	sub	sp, #8
 81004b8:	af00      	add	r7, sp, #0
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 81004ba:	2300      	movs	r3, #0
 81004bc:	607b      	str	r3, [r7, #4]

    if (!xtx_data_buf)
 81004be:	4b0d      	ldr	r3, [pc, #52]	@ (81004f4 <prvCoreWakeupInterruptHandler+0x40>)
 81004c0:	685b      	ldr	r3, [r3, #4]
 81004c2:	2b00      	cmp	r3, #0
 81004c4:	d012      	beq.n	81004ec <prvCoreWakeupInterruptHandler+0x38>
    {
    	return;
    }


	xMessageBufferReceiveCompletedFromISR(xtx_data_buf,
 81004c6:	4b0b      	ldr	r3, [pc, #44]	@ (81004f4 <prvCoreWakeupInterruptHandler+0x40>)
 81004c8:	685b      	ldr	r3, [r3, #4]
 81004ca:	1d3a      	adds	r2, r7, #4
 81004cc:	4611      	mov	r1, r2
 81004ce:	4618      	mov	r0, r3
 81004d0:	f00e fba0 	bl	810ec14 <xStreamBufferReceiveCompletedFromISR>

    /* Normal FreeRTOS yield from interrupt semantics, where
       xHigherPriorityTaskWoken is initialzed to pdFALSE and will then get set
       to pdTRUE if the interrupt safe API unblocks a task that has a priority
       above that of the currently executing task. */
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 81004d4:	687b      	ldr	r3, [r7, #4]
 81004d6:	2b00      	cmp	r3, #0
 81004d8:	d009      	beq.n	81004ee <prvCoreWakeupInterruptHandler+0x3a>
 81004da:	4b07      	ldr	r3, [pc, #28]	@ (81004f8 <prvCoreWakeupInterruptHandler+0x44>)
 81004dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81004e0:	601a      	str	r2, [r3, #0]
 81004e2:	f3bf 8f4f 	dsb	sy
 81004e6:	f3bf 8f6f 	isb	sy
 81004ea:	e000      	b.n	81004ee <prvCoreWakeupInterruptHandler+0x3a>
    	return;
 81004ec:	bf00      	nop
}
 81004ee:	3708      	adds	r7, #8
 81004f0:	46bd      	mov	sp, r7
 81004f2:	bd80      	pop	{r7, pc}
 81004f4:	38000000 	.word	0x38000000
 81004f8:	e000ed04 	.word	0xe000ed04

081004fc <vGenerateRemoteInterrupt>:

void vGenerateRemoteInterrupt(void * xUpdatedMessageBuffer)
{
 81004fc:	b580      	push	{r7, lr}
 81004fe:	b084      	sub	sp, #16
 8100500:	af00      	add	r7, sp, #0
 8100502:	6078      	str	r0, [r7, #4]
    MessageBufferHandle_t xUpdatedBuffer =
 8100504:	687b      	ldr	r3, [r7, #4]
 8100506:	60fb      	str	r3, [r7, #12]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8100508:	f3bf 8f4f 	dsb	sy
}
 810050c:	bf00      	nop
        (MessageBufferHandle_t)xUpdatedMessageBuffer;

	__DSB();
    if (xUpdatedBuffer == xtx_data_buf)
 810050e:	4b12      	ldr	r3, [pc, #72]	@ (8100558 <vGenerateRemoteInterrupt+0x5c>)
 8100510:	685b      	ldr	r3, [r3, #4]
 8100512:	68fa      	ldr	r2, [r7, #12]
 8100514:	429a      	cmp	r2, r3
 8100516:	d10b      	bne.n	8100530 <vGenerateRemoteInterrupt+0x34>
    {

        /* Take the HW Semaphore with Process1 ID  */
        if(HAL_HSEM_Take(HSEM_TX_ID, HSEM_PROCESS) == HAL_OK)
 8100518:	211b      	movs	r1, #27
 810051a:	201d      	movs	r0, #29
 810051c:	f008 ffb8 	bl	8109490 <HAL_HSEM_Take>
 8100520:	4603      	mov	r3, r0
 8100522:	2b00      	cmp	r3, #0
 8100524:	d114      	bne.n	8100550 <vGenerateRemoteInterrupt+0x54>
        {
            /* Release the HW Semaphore */
            HAL_HSEM_Release(HSEM_TX_ID, HSEM_PROCESS);
 8100526:	211b      	movs	r1, #27
 8100528:	201d      	movs	r0, #29
 810052a:	f008 ffd5 	bl	81094d8 <HAL_HSEM_Release>
		{
			/* Release the HW Semaphore */
			HAL_HSEM_Release(HSEM_RX_WAKEUP, HSEM_PROCESS);
		}
    }
}
 810052e:	e00f      	b.n	8100550 <vGenerateRemoteInterrupt+0x54>
    else if(xUpdatedBuffer == xrx_data_buf){
 8100530:	4b09      	ldr	r3, [pc, #36]	@ (8100558 <vGenerateRemoteInterrupt+0x5c>)
 8100532:	681b      	ldr	r3, [r3, #0]
 8100534:	68fa      	ldr	r2, [r7, #12]
 8100536:	429a      	cmp	r2, r3
 8100538:	d10a      	bne.n	8100550 <vGenerateRemoteInterrupt+0x54>
		if(HAL_HSEM_Take(HSEM_RX_WAKEUP, HSEM_PROCESS) == HAL_OK)
 810053a:	211b      	movs	r1, #27
 810053c:	201e      	movs	r0, #30
 810053e:	f008 ffa7 	bl	8109490 <HAL_HSEM_Take>
 8100542:	4603      	mov	r3, r0
 8100544:	2b00      	cmp	r3, #0
 8100546:	d103      	bne.n	8100550 <vGenerateRemoteInterrupt+0x54>
			HAL_HSEM_Release(HSEM_RX_WAKEUP, HSEM_PROCESS);
 8100548:	211b      	movs	r1, #27
 810054a:	201e      	movs	r0, #30
 810054c:	f008 ffc4 	bl	81094d8 <HAL_HSEM_Release>
}
 8100550:	bf00      	nop
 8100552:	3710      	adds	r7, #16
 8100554:	46bd      	mov	sp, r7
 8100556:	bd80      	pop	{r7, pc}
 8100558:	38000000 	.word	0x38000000

0810055c <ipc_sendmsg>:

size_t ipc_sendmsg(ipc_msg* msg, uint32_t size, int32_t timeout)
{
 810055c:	b580      	push	{r7, lr}
 810055e:	b086      	sub	sp, #24
 8100560:	af00      	add	r7, sp, #0
 8100562:	60f8      	str	r0, [r7, #12]
 8100564:	60b9      	str	r1, [r7, #8]
 8100566:	607a      	str	r2, [r7, #4]
	size_t len;

    if(xtx_data_buf == 0)
 8100568:	4b0f      	ldr	r3, [pc, #60]	@ (81005a8 <ipc_sendmsg+0x4c>)
 810056a:	685b      	ldr	r3, [r3, #4]
 810056c:	2b00      	cmp	r3, #0
 810056e:	d101      	bne.n	8100574 <ipc_sendmsg+0x18>
      return 0;
 8100570:	2300      	movs	r3, #0
 8100572:	e015      	b.n	81005a0 <ipc_sendmsg+0x44>

    if(timeout < 0)
 8100574:	687b      	ldr	r3, [r7, #4]
 8100576:	2b00      	cmp	r3, #0
 8100578:	da09      	bge.n	810058e <ipc_sendmsg+0x32>
    	len = xMessageBufferSend(xtx_data_buf, msg, size, portMAX_DELAY);
 810057a:	4b0b      	ldr	r3, [pc, #44]	@ (81005a8 <ipc_sendmsg+0x4c>)
 810057c:	6858      	ldr	r0, [r3, #4]
 810057e:	f04f 33ff 	mov.w	r3, #4294967295
 8100582:	68ba      	ldr	r2, [r7, #8]
 8100584:	68f9      	ldr	r1, [r7, #12]
 8100586:	f00e f95f 	bl	810e848 <xStreamBufferSend>
 810058a:	6178      	str	r0, [r7, #20]
 810058c:	e007      	b.n	810059e <ipc_sendmsg+0x42>
    else
    	len = xMessageBufferSend(xtx_data_buf, msg, size, (TickType_t)timeout);
 810058e:	4b06      	ldr	r3, [pc, #24]	@ (81005a8 <ipc_sendmsg+0x4c>)
 8100590:	6858      	ldr	r0, [r3, #4]
 8100592:	687b      	ldr	r3, [r7, #4]
 8100594:	68ba      	ldr	r2, [r7, #8]
 8100596:	68f9      	ldr	r1, [r7, #12]
 8100598:	f00e f956 	bl	810e848 <xStreamBufferSend>
 810059c:	6178      	str	r0, [r7, #20]

    return len;
 810059e:	697b      	ldr	r3, [r7, #20]
}
 81005a0:	4618      	mov	r0, r3
 81005a2:	3718      	adds	r7, #24
 81005a4:	46bd      	mov	sp, r7
 81005a6:	bd80      	pop	{r7, pc}
 81005a8:	38000000 	.word	0x38000000

081005ac <ipc_recvmsg>:

size_t ipc_recvmsg(ipc_msg* msg, uint32_t size, int32_t timeout)
{
 81005ac:	b580      	push	{r7, lr}
 81005ae:	b086      	sub	sp, #24
 81005b0:	af00      	add	r7, sp, #0
 81005b2:	60f8      	str	r0, [r7, #12]
 81005b4:	60b9      	str	r1, [r7, #8]
 81005b6:	607a      	str	r2, [r7, #4]
    size_t len;

    if (timeout < 0)
 81005b8:	687b      	ldr	r3, [r7, #4]
 81005ba:	2b00      	cmp	r3, #0
 81005bc:	da09      	bge.n	81005d2 <ipc_recvmsg+0x26>
        len = xMessageBufferReceive(xrx_data_buf, msg, size, portMAX_DELAY);
 81005be:	4b0b      	ldr	r3, [pc, #44]	@ (81005ec <ipc_recvmsg+0x40>)
 81005c0:	6818      	ldr	r0, [r3, #0]
 81005c2:	f04f 33ff 	mov.w	r3, #4294967295
 81005c6:	68ba      	ldr	r2, [r7, #8]
 81005c8:	68f9      	ldr	r1, [r7, #12]
 81005ca:	f00e fa24 	bl	810ea16 <xStreamBufferReceive>
 81005ce:	6178      	str	r0, [r7, #20]
 81005d0:	e007      	b.n	81005e2 <ipc_recvmsg+0x36>
    else
        len = xMessageBufferReceive(xrx_data_buf, msg, size, (TickType_t)timeout);
 81005d2:	4b06      	ldr	r3, [pc, #24]	@ (81005ec <ipc_recvmsg+0x40>)
 81005d4:	6818      	ldr	r0, [r3, #0]
 81005d6:	687b      	ldr	r3, [r7, #4]
 81005d8:	68ba      	ldr	r2, [r7, #8]
 81005da:	68f9      	ldr	r1, [r7, #12]
 81005dc:	f00e fa1b 	bl	810ea16 <xStreamBufferReceive>
 81005e0:	6178      	str	r0, [r7, #20]

    return len;
 81005e2:	697b      	ldr	r3, [r7, #20]
}
 81005e4:	4618      	mov	r0, r3
 81005e6:	3718      	adds	r7, #24
 81005e8:	46bd      	mov	sp, r7
 81005ea:	bd80      	pop	{r7, pc}
 81005ec:	38000000 	.word	0x38000000

081005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81005f0:	b580      	push	{r7, lr}
 81005f2:	b082      	sub	sp, #8
 81005f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81005f6:	4b30      	ldr	r3, [pc, #192]	@ (81006b8 <main+0xc8>)
 81005f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81005fc:	4a2e      	ldr	r2, [pc, #184]	@ (81006b8 <main+0xc8>)
 81005fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8100602:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100606:	4b2c      	ldr	r3, [pc, #176]	@ (81006b8 <main+0xc8>)
 8100608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810060c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100610:	607b      	str	r3, [r7, #4]
 8100612:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100614:	2001      	movs	r0, #1
 8100616:	f008 ff73 	bl	8109500 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810061a:	f009 fd0d 	bl	810a038 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810061e:	2201      	movs	r2, #1
 8100620:	2102      	movs	r1, #2
 8100622:	2000      	movs	r0, #0
 8100624:	f009 fc8e 	bl	8109f44 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100628:	4b24      	ldr	r3, [pc, #144]	@ (81006bc <main+0xcc>)
 810062a:	681b      	ldr	r3, [r3, #0]
 810062c:	091b      	lsrs	r3, r3, #4
 810062e:	f003 030f 	and.w	r3, r3, #15
 8100632:	2b07      	cmp	r3, #7
 8100634:	d108      	bne.n	8100648 <main+0x58>
 8100636:	4b22      	ldr	r3, [pc, #136]	@ (81006c0 <main+0xd0>)
 8100638:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 810063c:	4a20      	ldr	r2, [pc, #128]	@ (81006c0 <main+0xd0>)
 810063e:	f043 0301 	orr.w	r3, r3, #1
 8100642:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8100646:	e007      	b.n	8100658 <main+0x68>
 8100648:	4b1d      	ldr	r3, [pc, #116]	@ (81006c0 <main+0xd0>)
 810064a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 810064e:	4a1c      	ldr	r2, [pc, #112]	@ (81006c0 <main+0xd0>)
 8100650:	f043 0301 	orr.w	r3, r3, #1
 8100654:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100658:	f006 fd5c 	bl	8107114 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_MDMA_Init();
 810065c:	f000 f898 	bl	8100790 <_ZL12MX_MDMA_Initv>
  MX_GPIO_Init();
 8100660:	f000 f8b0 	bl	81007c4 <_ZL12MX_GPIO_Initv>
  MX_I2C4_Init();
 8100664:	f000 f846 	bl	81006f4 <_ZL12MX_I2C4_Initv>
  /* USER CODE BEGIN 2 */
  ipc_init();
 8100668:	f7ff feae 	bl	81003c8 <ipc_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 810066c:	f00b fdb6 	bl	810c1dc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_EDaemonN */
 Task_EDaemonNHandle = osThreadNew(StartTask_EDaemonN, NULL, &Task_EDaemonN_attributes);
 8100670:	4a14      	ldr	r2, [pc, #80]	@ (81006c4 <main+0xd4>)
 8100672:	2100      	movs	r1, #0
 8100674:	4814      	ldr	r0, [pc, #80]	@ (81006c8 <main+0xd8>)
 8100676:	f00b fe10 	bl	810c29a <osThreadNew>
 810067a:	4603      	mov	r3, r0
 810067c:	4a13      	ldr	r2, [pc, #76]	@ (81006cc <main+0xdc>)
 810067e:	6013      	str	r3, [r2, #0]

 /* creation of Task_EventMgrM4 */
 Task_EventMgrM4Handle = osThreadNew(StartTask_EventMgrM4, NULL, &Task_EventMgrM4_attributes);
 8100680:	4a13      	ldr	r2, [pc, #76]	@ (81006d0 <main+0xe0>)
 8100682:	2100      	movs	r1, #0
 8100684:	4813      	ldr	r0, [pc, #76]	@ (81006d4 <main+0xe4>)
 8100686:	f00b fe08 	bl	810c29a <osThreadNew>
 810068a:	4603      	mov	r3, r0
 810068c:	4a12      	ldr	r2, [pc, #72]	@ (81006d8 <main+0xe8>)
 810068e:	6013      	str	r3, [r2, #0]

 /* creation of Task_EConnMgr */
 Task_EConnMgrHandle = osThreadNew(StartTask_EdiabasConnMgr, NULL, &Task_EConnMgr_attributes);
 8100690:	4a12      	ldr	r2, [pc, #72]	@ (81006dc <main+0xec>)
 8100692:	2100      	movs	r1, #0
 8100694:	4812      	ldr	r0, [pc, #72]	@ (81006e0 <main+0xf0>)
 8100696:	f00b fe00 	bl	810c29a <osThreadNew>
 810069a:	4603      	mov	r3, r0
 810069c:	4a11      	ldr	r2, [pc, #68]	@ (81006e4 <main+0xf4>)
 810069e:	6013      	str	r3, [r2, #0]

  /* creation of Task_CTemp */
  Task_CTempHandle = osThreadNew(StartTask_CTemp, NULL, &Task_CTemp_attributes);
 81006a0:	4a11      	ldr	r2, [pc, #68]	@ (81006e8 <main+0xf8>)
 81006a2:	2100      	movs	r1, #0
 81006a4:	4811      	ldr	r0, [pc, #68]	@ (81006ec <main+0xfc>)
 81006a6:	f00b fdf8 	bl	810c29a <osThreadNew>
 81006aa:	4603      	mov	r3, r0
 81006ac:	4a10      	ldr	r2, [pc, #64]	@ (81006f0 <main+0x100>)
 81006ae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 81006b0:	f00b fdb8 	bl	810c224 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81006b4:	bf00      	nop
 81006b6:	e7fd      	b.n	81006b4 <main+0xc4>
 81006b8:	58024400 	.word	0x58024400
 81006bc:	e000ed00 	.word	0xe000ed00
 81006c0:	58026400 	.word	0x58026400
 81006c4:	0811fb90 	.word	0x0811fb90
 81006c8:	0810105f 	.word	0x0810105f
 81006cc:	10000100 	.word	0x10000100
 81006d0:	0811fbb4 	.word	0x0811fbb4
 81006d4:	0810181d 	.word	0x0810181d
 81006d8:	10000104 	.word	0x10000104
 81006dc:	0811fbd8 	.word	0x0811fbd8
 81006e0:	08100f01 	.word	0x08100f01
 81006e4:	10000108 	.word	0x10000108
 81006e8:	0811fbfc 	.word	0x0811fbfc
 81006ec:	08104ab5 	.word	0x08104ab5
 81006f0:	1000010c 	.word	0x1000010c

081006f4 <_ZL12MX_I2C4_Initv>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 81006f4:	b580      	push	{r7, lr}
 81006f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 81006f8:	4b22      	ldr	r3, [pc, #136]	@ (8100784 <_ZL12MX_I2C4_Initv+0x90>)
 81006fa:	4a23      	ldr	r2, [pc, #140]	@ (8100788 <_ZL12MX_I2C4_Initv+0x94>)
 81006fc:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10C0ECFF;
 81006fe:	4b21      	ldr	r3, [pc, #132]	@ (8100784 <_ZL12MX_I2C4_Initv+0x90>)
 8100700:	4a22      	ldr	r2, [pc, #136]	@ (810078c <_ZL12MX_I2C4_Initv+0x98>)
 8100702:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8100704:	4b1f      	ldr	r3, [pc, #124]	@ (8100784 <_ZL12MX_I2C4_Initv+0x90>)
 8100706:	2200      	movs	r2, #0
 8100708:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 810070a:	4b1e      	ldr	r3, [pc, #120]	@ (8100784 <_ZL12MX_I2C4_Initv+0x90>)
 810070c:	2201      	movs	r2, #1
 810070e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8100710:	4b1c      	ldr	r3, [pc, #112]	@ (8100784 <_ZL12MX_I2C4_Initv+0x90>)
 8100712:	2200      	movs	r2, #0
 8100714:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8100716:	4b1b      	ldr	r3, [pc, #108]	@ (8100784 <_ZL12MX_I2C4_Initv+0x90>)
 8100718:	2200      	movs	r2, #0
 810071a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 810071c:	4b19      	ldr	r3, [pc, #100]	@ (8100784 <_ZL12MX_I2C4_Initv+0x90>)
 810071e:	2200      	movs	r2, #0
 8100720:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8100722:	4b18      	ldr	r3, [pc, #96]	@ (8100784 <_ZL12MX_I2C4_Initv+0x90>)
 8100724:	2200      	movs	r2, #0
 8100726:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8100728:	4b16      	ldr	r3, [pc, #88]	@ (8100784 <_ZL12MX_I2C4_Initv+0x90>)
 810072a:	2200      	movs	r2, #0
 810072c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 810072e:	4815      	ldr	r0, [pc, #84]	@ (8100784 <_ZL12MX_I2C4_Initv+0x90>)
 8100730:	f008 ff12 	bl	8109558 <HAL_I2C_Init>
 8100734:	4603      	mov	r3, r0
 8100736:	2b00      	cmp	r3, #0
 8100738:	bf14      	ite	ne
 810073a:	2301      	movne	r3, #1
 810073c:	2300      	moveq	r3, #0
 810073e:	b2db      	uxtb	r3, r3
 8100740:	2b00      	cmp	r3, #0
 8100742:	d001      	beq.n	8100748 <_ZL12MX_I2C4_Initv+0x54>
  {
    Error_Handler();
 8100744:	f000 f8c4 	bl	81008d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8100748:	2100      	movs	r1, #0
 810074a:	480e      	ldr	r0, [pc, #56]	@ (8100784 <_ZL12MX_I2C4_Initv+0x90>)
 810074c:	f009 fb62 	bl	8109e14 <HAL_I2CEx_ConfigAnalogFilter>
 8100750:	4603      	mov	r3, r0
 8100752:	2b00      	cmp	r3, #0
 8100754:	bf14      	ite	ne
 8100756:	2301      	movne	r3, #1
 8100758:	2300      	moveq	r3, #0
 810075a:	b2db      	uxtb	r3, r3
 810075c:	2b00      	cmp	r3, #0
 810075e:	d001      	beq.n	8100764 <_ZL12MX_I2C4_Initv+0x70>
  {
    Error_Handler();
 8100760:	f000 f8b6 	bl	81008d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 2) != HAL_OK)
 8100764:	2102      	movs	r1, #2
 8100766:	4807      	ldr	r0, [pc, #28]	@ (8100784 <_ZL12MX_I2C4_Initv+0x90>)
 8100768:	f009 fb9f 	bl	8109eaa <HAL_I2CEx_ConfigDigitalFilter>
 810076c:	4603      	mov	r3, r0
 810076e:	2b00      	cmp	r3, #0
 8100770:	bf14      	ite	ne
 8100772:	2301      	movne	r3, #1
 8100774:	2300      	moveq	r3, #0
 8100776:	b2db      	uxtb	r3, r3
 8100778:	2b00      	cmp	r3, #0
 810077a:	d001      	beq.n	8100780 <_ZL12MX_I2C4_Initv+0x8c>
  {
    Error_Handler();
 810077c:	f000 f8a8 	bl	81008d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8100780:	bf00      	nop
 8100782:	bd80      	pop	{r7, pc}
 8100784:	100000ac 	.word	0x100000ac
 8100788:	58001c00 	.word	0x58001c00
 810078c:	10c0ecff 	.word	0x10c0ecff

08100790 <_ZL12MX_MDMA_Initv>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 8100790:	b480      	push	{r7}
 8100792:	b083      	sub	sp, #12
 8100794:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8100796:	4b0a      	ldr	r3, [pc, #40]	@ (81007c0 <_ZL12MX_MDMA_Initv+0x30>)
 8100798:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 810079c:	4a08      	ldr	r2, [pc, #32]	@ (81007c0 <_ZL12MX_MDMA_Initv+0x30>)
 810079e:	f043 0301 	orr.w	r3, r3, #1
 81007a2:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 81007a6:	4b06      	ldr	r3, [pc, #24]	@ (81007c0 <_ZL12MX_MDMA_Initv+0x30>)
 81007a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 81007ac:	f003 0301 	and.w	r3, r3, #1
 81007b0:	607b      	str	r3, [r7, #4]
 81007b2:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

}
 81007b4:	bf00      	nop
 81007b6:	370c      	adds	r7, #12
 81007b8:	46bd      	mov	sp, r7
 81007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007be:	4770      	bx	lr
 81007c0:	58024400 	.word	0x58024400

081007c4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81007c4:	b480      	push	{r7}
 81007c6:	b089      	sub	sp, #36	@ 0x24
 81007c8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 81007ca:	4b37      	ldr	r3, [pc, #220]	@ (81008a8 <_ZL12MX_GPIO_Initv+0xe4>)
 81007cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81007d0:	4a35      	ldr	r2, [pc, #212]	@ (81008a8 <_ZL12MX_GPIO_Initv+0xe4>)
 81007d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81007d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81007da:	4b33      	ldr	r3, [pc, #204]	@ (81008a8 <_ZL12MX_GPIO_Initv+0xe4>)
 81007dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81007e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81007e4:	61fb      	str	r3, [r7, #28]
 81007e6:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 81007e8:	4b2f      	ldr	r3, [pc, #188]	@ (81008a8 <_ZL12MX_GPIO_Initv+0xe4>)
 81007ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81007ee:	4a2e      	ldr	r2, [pc, #184]	@ (81008a8 <_ZL12MX_GPIO_Initv+0xe4>)
 81007f0:	f043 0310 	orr.w	r3, r3, #16
 81007f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81007f8:	4b2b      	ldr	r3, [pc, #172]	@ (81008a8 <_ZL12MX_GPIO_Initv+0xe4>)
 81007fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81007fe:	f003 0310 	and.w	r3, r3, #16
 8100802:	61bb      	str	r3, [r7, #24]
 8100804:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8100806:	4b28      	ldr	r3, [pc, #160]	@ (81008a8 <_ZL12MX_GPIO_Initv+0xe4>)
 8100808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810080c:	4a26      	ldr	r2, [pc, #152]	@ (81008a8 <_ZL12MX_GPIO_Initv+0xe4>)
 810080e:	f043 0304 	orr.w	r3, r3, #4
 8100812:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100816:	4b24      	ldr	r3, [pc, #144]	@ (81008a8 <_ZL12MX_GPIO_Initv+0xe4>)
 8100818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810081c:	f003 0304 	and.w	r3, r3, #4
 8100820:	617b      	str	r3, [r7, #20]
 8100822:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100824:	4b20      	ldr	r3, [pc, #128]	@ (81008a8 <_ZL12MX_GPIO_Initv+0xe4>)
 8100826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810082a:	4a1f      	ldr	r2, [pc, #124]	@ (81008a8 <_ZL12MX_GPIO_Initv+0xe4>)
 810082c:	f043 0301 	orr.w	r3, r3, #1
 8100830:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100834:	4b1c      	ldr	r3, [pc, #112]	@ (81008a8 <_ZL12MX_GPIO_Initv+0xe4>)
 8100836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810083a:	f003 0301 	and.w	r3, r3, #1
 810083e:	613b      	str	r3, [r7, #16]
 8100840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100842:	4b19      	ldr	r3, [pc, #100]	@ (81008a8 <_ZL12MX_GPIO_Initv+0xe4>)
 8100844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100848:	4a17      	ldr	r2, [pc, #92]	@ (81008a8 <_ZL12MX_GPIO_Initv+0xe4>)
 810084a:	f043 0302 	orr.w	r3, r3, #2
 810084e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100852:	4b15      	ldr	r3, [pc, #84]	@ (81008a8 <_ZL12MX_GPIO_Initv+0xe4>)
 8100854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100858:	f003 0302 	and.w	r3, r3, #2
 810085c:	60fb      	str	r3, [r7, #12]
 810085e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8100860:	4b11      	ldr	r3, [pc, #68]	@ (81008a8 <_ZL12MX_GPIO_Initv+0xe4>)
 8100862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100866:	4a10      	ldr	r2, [pc, #64]	@ (81008a8 <_ZL12MX_GPIO_Initv+0xe4>)
 8100868:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810086c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100870:	4b0d      	ldr	r3, [pc, #52]	@ (81008a8 <_ZL12MX_GPIO_Initv+0xe4>)
 8100872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810087a:	60bb      	str	r3, [r7, #8]
 810087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 810087e:	4b0a      	ldr	r3, [pc, #40]	@ (81008a8 <_ZL12MX_GPIO_Initv+0xe4>)
 8100880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100884:	4a08      	ldr	r2, [pc, #32]	@ (81008a8 <_ZL12MX_GPIO_Initv+0xe4>)
 8100886:	f043 0308 	orr.w	r3, r3, #8
 810088a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810088e:	4b06      	ldr	r3, [pc, #24]	@ (81008a8 <_ZL12MX_GPIO_Initv+0xe4>)
 8100890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100894:	f003 0308 	and.w	r3, r3, #8
 8100898:	607b      	str	r3, [r7, #4]
 810089a:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 810089c:	bf00      	nop
 810089e:	3724      	adds	r7, #36	@ 0x24
 81008a0:	46bd      	mov	sp, r7
 81008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008a6:	4770      	bx	lr
 81008a8:	58024400 	.word	0x58024400

081008ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 81008ac:	b580      	push	{r7, lr}
 81008ae:	b082      	sub	sp, #8
 81008b0:	af00      	add	r7, sp, #0
 81008b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 81008b4:	687b      	ldr	r3, [r7, #4]
 81008b6:	681b      	ldr	r3, [r3, #0]
 81008b8:	4a04      	ldr	r2, [pc, #16]	@ (81008cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 81008ba:	4293      	cmp	r3, r2
 81008bc:	d101      	bne.n	81008c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 81008be:	f006 fc87 	bl	81071d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 81008c2:	bf00      	nop
 81008c4:	3708      	adds	r7, #8
 81008c6:	46bd      	mov	sp, r7
 81008c8:	bd80      	pop	{r7, pc}
 81008ca:	bf00      	nop
 81008cc:	40001000 	.word	0x40001000

081008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81008d0:	b480      	push	{r7}
 81008d2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 81008d4:	b672      	cpsid	i
}
 81008d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81008d8:	bf00      	nop
 81008da:	e7fd      	b.n	81008d8 <Error_Handler+0x8>

081008dc <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 81008dc:	b580      	push	{r7, lr}
 81008de:	b082      	sub	sp, #8
 81008e0:	af00      	add	r7, sp, #0
 81008e2:	6078      	str	r0, [r7, #4]
 81008e4:	6039      	str	r1, [r7, #0]
 81008e6:	687b      	ldr	r3, [r7, #4]
 81008e8:	2b01      	cmp	r3, #1
 81008ea:	d124      	bne.n	8100936 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 81008ec:	683b      	ldr	r3, [r7, #0]
 81008ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 81008f2:	4293      	cmp	r3, r2
 81008f4:	d11f      	bne.n	8100936 <_Z41__static_initialization_and_destruction_0ii+0x5a>
QueueHandle_t queueToEventManagerCM4 = xQueueCreate(64, sizeof(SMessage));
 81008f6:	2200      	movs	r2, #0
 81008f8:	2118      	movs	r1, #24
 81008fa:	2040      	movs	r0, #64	@ 0x40
 81008fc:	f00c feed 	bl	810d6da <xQueueGenericCreate>
 8100900:	4603      	mov	r3, r0
 8100902:	4a0f      	ldr	r2, [pc, #60]	@ (8100940 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8100904:	6013      	str	r3, [r2, #0]
QueueHandle_t queueToNativeDaemon = xQueueCreate(16, sizeof(SMessage));
 8100906:	2200      	movs	r2, #0
 8100908:	2118      	movs	r1, #24
 810090a:	2010      	movs	r0, #16
 810090c:	f00c fee5 	bl	810d6da <xQueueGenericCreate>
 8100910:	4603      	mov	r3, r0
 8100912:	4a0c      	ldr	r2, [pc, #48]	@ (8100944 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8100914:	6013      	str	r3, [r2, #0]
QueueHandle_t queueToEdiabasConnMgr = xQueueCreate(16, sizeof(SMessage));
 8100916:	2200      	movs	r2, #0
 8100918:	2118      	movs	r1, #24
 810091a:	2010      	movs	r0, #16
 810091c:	f00c fedd 	bl	810d6da <xQueueGenericCreate>
 8100920:	4603      	mov	r3, r0
 8100922:	4a09      	ldr	r2, [pc, #36]	@ (8100948 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8100924:	6013      	str	r3, [r2, #0]
QueueHandle_t queueToTemperature = xQueueCreate(4, sizeof(SMessage));
 8100926:	2200      	movs	r2, #0
 8100928:	2118      	movs	r1, #24
 810092a:	2004      	movs	r0, #4
 810092c:	f00c fed5 	bl	810d6da <xQueueGenericCreate>
 8100930:	4603      	mov	r3, r0
 8100932:	4a06      	ldr	r2, [pc, #24]	@ (810094c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8100934:	6013      	str	r3, [r2, #0]
}
 8100936:	bf00      	nop
 8100938:	3708      	adds	r7, #8
 810093a:	46bd      	mov	sp, r7
 810093c:	bd80      	pop	{r7, pc}
 810093e:	bf00      	nop
 8100940:	10000110 	.word	0x10000110
 8100944:	10000114 	.word	0x10000114
 8100948:	10000118 	.word	0x10000118
 810094c:	1000011c 	.word	0x1000011c

08100950 <_GLOBAL__sub_I_hi2c4>:
 8100950:	b580      	push	{r7, lr}
 8100952:	af00      	add	r7, sp, #0
 8100954:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8100958:	2001      	movs	r0, #1
 810095a:	f7ff ffbf 	bl	81008dc <_Z41__static_initialization_and_destruction_0ii>
 810095e:	bd80      	pop	{r7, pc}

08100960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100960:	b580      	push	{r7, lr}
 8100962:	b082      	sub	sp, #8
 8100964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100966:	4b10      	ldr	r3, [pc, #64]	@ (81009a8 <HAL_MspInit+0x48>)
 8100968:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810096c:	4a0e      	ldr	r2, [pc, #56]	@ (81009a8 <HAL_MspInit+0x48>)
 810096e:	f043 0302 	orr.w	r3, r3, #2
 8100972:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100976:	4b0c      	ldr	r3, [pc, #48]	@ (81009a8 <HAL_MspInit+0x48>)
 8100978:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810097c:	f003 0302 	and.w	r3, r3, #2
 8100980:	607b      	str	r3, [r7, #4]
 8100982:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8100984:	2200      	movs	r2, #0
 8100986:	210f      	movs	r1, #15
 8100988:	f06f 0001 	mvn.w	r0, #1
 810098c:	f006 fd0c 	bl	81073a8 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 7, 0);
 8100990:	2200      	movs	r2, #0
 8100992:	2107      	movs	r1, #7
 8100994:	207e      	movs	r0, #126	@ 0x7e
 8100996:	f006 fd07 	bl	81073a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 810099a:	207e      	movs	r0, #126	@ 0x7e
 810099c:	f006 fd1e 	bl	81073dc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81009a0:	bf00      	nop
 81009a2:	3708      	adds	r7, #8
 81009a4:	46bd      	mov	sp, r7
 81009a6:	bd80      	pop	{r7, pc}
 81009a8:	58024400 	.word	0x58024400

081009ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 81009ac:	b580      	push	{r7, lr}
 81009ae:	b0bc      	sub	sp, #240	@ 0xf0
 81009b0:	af00      	add	r7, sp, #0
 81009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81009b4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81009b8:	2200      	movs	r2, #0
 81009ba:	601a      	str	r2, [r3, #0]
 81009bc:	605a      	str	r2, [r3, #4]
 81009be:	609a      	str	r2, [r3, #8]
 81009c0:	60da      	str	r2, [r3, #12]
 81009c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81009c4:	f107 0310 	add.w	r3, r7, #16
 81009c8:	22c8      	movs	r2, #200	@ 0xc8
 81009ca:	2100      	movs	r1, #0
 81009cc:	4618      	mov	r0, r3
 81009ce:	f01b fabc 	bl	811bf4a <memset>
  if(hi2c->Instance==I2C4)
 81009d2:	687b      	ldr	r3, [r7, #4]
 81009d4:	681b      	ldr	r3, [r3, #0]
 81009d6:	4a27      	ldr	r2, [pc, #156]	@ (8100a74 <HAL_I2C_MspInit+0xc8>)
 81009d8:	4293      	cmp	r3, r2
 81009da:	d146      	bne.n	8100a6a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 81009dc:	f04f 0210 	mov.w	r2, #16
 81009e0:	f04f 0300 	mov.w	r3, #0
 81009e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 81009e8:	2300      	movs	r3, #0
 81009ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81009ee:	f107 0310 	add.w	r3, r7, #16
 81009f2:	4618      	mov	r0, r3
 81009f4:	f009 fd32 	bl	810a45c <HAL_RCCEx_PeriphCLKConfig>
 81009f8:	4603      	mov	r3, r0
 81009fa:	2b00      	cmp	r3, #0
 81009fc:	d001      	beq.n	8100a02 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 81009fe:	f7ff ff67 	bl	81008d0 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8100a02:	4b1d      	ldr	r3, [pc, #116]	@ (8100a78 <HAL_I2C_MspInit+0xcc>)
 8100a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100a08:	4a1b      	ldr	r2, [pc, #108]	@ (8100a78 <HAL_I2C_MspInit+0xcc>)
 8100a0a:	f043 0308 	orr.w	r3, r3, #8
 8100a0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100a12:	4b19      	ldr	r3, [pc, #100]	@ (8100a78 <HAL_I2C_MspInit+0xcc>)
 8100a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100a18:	f003 0308 	and.w	r3, r3, #8
 8100a1c:	60fb      	str	r3, [r7, #12]
 8100a1e:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8100a20:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8100a24:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8100a28:	2312      	movs	r3, #18
 8100a2a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100a2e:	2300      	movs	r3, #0
 8100a30:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100a34:	2300      	movs	r3, #0
 8100a36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8100a3a:	2304      	movs	r3, #4
 8100a3c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8100a40:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8100a44:	4619      	mov	r1, r3
 8100a46:	480d      	ldr	r0, [pc, #52]	@ (8100a7c <HAL_I2C_MspInit+0xd0>)
 8100a48:	f008 fa68 	bl	8108f1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8100a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8100a78 <HAL_I2C_MspInit+0xcc>)
 8100a4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100a52:	4a09      	ldr	r2, [pc, #36]	@ (8100a78 <HAL_I2C_MspInit+0xcc>)
 8100a54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8100a58:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100a5c:	4b06      	ldr	r3, [pc, #24]	@ (8100a78 <HAL_I2C_MspInit+0xcc>)
 8100a5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8100a66:	60bb      	str	r3, [r7, #8]
 8100a68:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 8100a6a:	bf00      	nop
 8100a6c:	37f0      	adds	r7, #240	@ 0xf0
 8100a6e:	46bd      	mov	sp, r7
 8100a70:	bd80      	pop	{r7, pc}
 8100a72:	bf00      	nop
 8100a74:	58001c00 	.word	0x58001c00
 8100a78:	58024400 	.word	0x58024400
 8100a7c:	58020c00 	.word	0x58020c00

08100a80 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8100a80:	b580      	push	{r7, lr}
 8100a82:	b082      	sub	sp, #8
 8100a84:	af00      	add	r7, sp, #0
 8100a86:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C4)
 8100a88:	687b      	ldr	r3, [r7, #4]
 8100a8a:	681b      	ldr	r3, [r3, #0]
 8100a8c:	4a0c      	ldr	r2, [pc, #48]	@ (8100ac0 <HAL_I2C_MspDeInit+0x40>)
 8100a8e:	4293      	cmp	r3, r2
 8100a90:	d111      	bne.n	8100ab6 <HAL_I2C_MspDeInit+0x36>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 8100a92:	4b0c      	ldr	r3, [pc, #48]	@ (8100ac4 <HAL_I2C_MspDeInit+0x44>)
 8100a94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100a98:	4a0a      	ldr	r2, [pc, #40]	@ (8100ac4 <HAL_I2C_MspDeInit+0x44>)
 8100a9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8100a9e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4

    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8100aa2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8100aa6:	4808      	ldr	r0, [pc, #32]	@ (8100ac8 <HAL_I2C_MspDeInit+0x48>)
 8100aa8:	f008 fbe8 	bl	810927c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 8100aac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8100ab0:	4805      	ldr	r0, [pc, #20]	@ (8100ac8 <HAL_I2C_MspDeInit+0x48>)
 8100ab2:	f008 fbe3 	bl	810927c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8100ab6:	bf00      	nop
 8100ab8:	3708      	adds	r7, #8
 8100aba:	46bd      	mov	sp, r7
 8100abc:	bd80      	pop	{r7, pc}
 8100abe:	bf00      	nop
 8100ac0:	58001c00 	.word	0x58001c00
 8100ac4:	58024400 	.word	0x58024400
 8100ac8:	58020c00 	.word	0x58020c00

08100acc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100acc:	b580      	push	{r7, lr}
 8100ace:	b090      	sub	sp, #64	@ 0x40
 8100ad0:	af00      	add	r7, sp, #0
 8100ad2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100ad4:	687b      	ldr	r3, [r7, #4]
 8100ad6:	2b0f      	cmp	r3, #15
 8100ad8:	d827      	bhi.n	8100b2a <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8100ada:	2200      	movs	r2, #0
 8100adc:	6879      	ldr	r1, [r7, #4]
 8100ade:	2036      	movs	r0, #54	@ 0x36
 8100ae0:	f006 fc62 	bl	81073a8 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8100ae4:	2036      	movs	r0, #54	@ 0x36
 8100ae6:	f006 fc79 	bl	81073dc <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8100aea:	4a29      	ldr	r2, [pc, #164]	@ (8100b90 <HAL_InitTick+0xc4>)
 8100aec:	687b      	ldr	r3, [r7, #4]
 8100aee:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8100af0:	4b28      	ldr	r3, [pc, #160]	@ (8100b94 <HAL_InitTick+0xc8>)
 8100af2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100af6:	4a27      	ldr	r2, [pc, #156]	@ (8100b94 <HAL_InitTick+0xc8>)
 8100af8:	f043 0310 	orr.w	r3, r3, #16
 8100afc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8100b00:	4b24      	ldr	r3, [pc, #144]	@ (8100b94 <HAL_InitTick+0xc8>)
 8100b02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100b06:	f003 0310 	and.w	r3, r3, #16
 8100b0a:	60fb      	str	r3, [r7, #12]
 8100b0c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8100b0e:	f107 0210 	add.w	r2, r7, #16
 8100b12:	f107 0314 	add.w	r3, r7, #20
 8100b16:	4611      	mov	r1, r2
 8100b18:	4618      	mov	r0, r3
 8100b1a:	f009 fc5d 	bl	810a3d8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8100b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8100b20:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8100b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8100b24:	2b00      	cmp	r3, #0
 8100b26:	d106      	bne.n	8100b36 <HAL_InitTick+0x6a>
 8100b28:	e001      	b.n	8100b2e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8100b2a:	2301      	movs	r3, #1
 8100b2c:	e02b      	b.n	8100b86 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8100b2e:	f009 fc3d 	bl	810a3ac <HAL_RCC_GetPCLK1Freq>
 8100b32:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8100b34:	e004      	b.n	8100b40 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8100b36:	f009 fc39 	bl	810a3ac <HAL_RCC_GetPCLK1Freq>
 8100b3a:	4603      	mov	r3, r0
 8100b3c:	005b      	lsls	r3, r3, #1
 8100b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8100b40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8100b42:	4a15      	ldr	r2, [pc, #84]	@ (8100b98 <HAL_InitTick+0xcc>)
 8100b44:	fba2 2303 	umull	r2, r3, r2, r3
 8100b48:	0c9b      	lsrs	r3, r3, #18
 8100b4a:	3b01      	subs	r3, #1
 8100b4c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8100b4e:	4b13      	ldr	r3, [pc, #76]	@ (8100b9c <HAL_InitTick+0xd0>)
 8100b50:	4a13      	ldr	r2, [pc, #76]	@ (8100ba0 <HAL_InitTick+0xd4>)
 8100b52:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8100b54:	4b11      	ldr	r3, [pc, #68]	@ (8100b9c <HAL_InitTick+0xd0>)
 8100b56:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8100b5a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8100b5c:	4a0f      	ldr	r2, [pc, #60]	@ (8100b9c <HAL_InitTick+0xd0>)
 8100b5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8100b60:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8100b62:	4b0e      	ldr	r3, [pc, #56]	@ (8100b9c <HAL_InitTick+0xd0>)
 8100b64:	2200      	movs	r2, #0
 8100b66:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100b68:	4b0c      	ldr	r3, [pc, #48]	@ (8100b9c <HAL_InitTick+0xd0>)
 8100b6a:	2200      	movs	r2, #0
 8100b6c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8100b6e:	480b      	ldr	r0, [pc, #44]	@ (8100b9c <HAL_InitTick+0xd0>)
 8100b70:	f00b f822 	bl	810bbb8 <HAL_TIM_Base_Init>
 8100b74:	4603      	mov	r3, r0
 8100b76:	2b00      	cmp	r3, #0
 8100b78:	d104      	bne.n	8100b84 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8100b7a:	4808      	ldr	r0, [pc, #32]	@ (8100b9c <HAL_InitTick+0xd0>)
 8100b7c:	f00b f87e 	bl	810bc7c <HAL_TIM_Base_Start_IT>
 8100b80:	4603      	mov	r3, r0
 8100b82:	e000      	b.n	8100b86 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8100b84:	2301      	movs	r3, #1
}
 8100b86:	4618      	mov	r0, r3
 8100b88:	3740      	adds	r7, #64	@ 0x40
 8100b8a:	46bd      	mov	sp, r7
 8100b8c:	bd80      	pop	{r7, pc}
 8100b8e:	bf00      	nop
 8100b90:	1000001c 	.word	0x1000001c
 8100b94:	58024400 	.word	0x58024400
 8100b98:	431bde83 	.word	0x431bde83
 8100b9c:	10000120 	.word	0x10000120
 8100ba0:	40001000 	.word	0x40001000

08100ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100ba4:	b480      	push	{r7}
 8100ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100ba8:	bf00      	nop
 8100baa:	e7fd      	b.n	8100ba8 <NMI_Handler+0x4>

08100bac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100bac:	b480      	push	{r7}
 8100bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100bb0:	bf00      	nop
 8100bb2:	e7fd      	b.n	8100bb0 <HardFault_Handler+0x4>

08100bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100bb4:	b480      	push	{r7}
 8100bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100bb8:	bf00      	nop
 8100bba:	e7fd      	b.n	8100bb8 <MemManage_Handler+0x4>

08100bbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100bbc:	b480      	push	{r7}
 8100bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100bc0:	bf00      	nop
 8100bc2:	e7fd      	b.n	8100bc0 <BusFault_Handler+0x4>

08100bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100bc4:	b480      	push	{r7}
 8100bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100bc8:	bf00      	nop
 8100bca:	e7fd      	b.n	8100bc8 <UsageFault_Handler+0x4>

08100bcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100bcc:	b480      	push	{r7}
 8100bce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100bd0:	bf00      	nop
 8100bd2:	46bd      	mov	sp, r7
 8100bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bd8:	4770      	bx	lr
	...

08100bdc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8100bdc:	b580      	push	{r7, lr}
 8100bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8100be0:	4802      	ldr	r0, [pc, #8]	@ (8100bec <TIM6_DAC_IRQHandler+0x10>)
 8100be2:	f00b f8c3 	bl	810bd6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8100be6:	bf00      	nop
 8100be8:	bd80      	pop	{r7, pc}
 8100bea:	bf00      	nop
 8100bec:	10000120 	.word	0x10000120

08100bf0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8100bf0:	b580      	push	{r7, lr}
 8100bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8100bf4:	4802      	ldr	r0, [pc, #8]	@ (8100c00 <ETH_IRQHandler+0x10>)
 8100bf6:	f006 ffe9 	bl	8107bcc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8100bfa:	bf00      	nop
 8100bfc:	bd80      	pop	{r7, pc}
 8100bfe:	bf00      	nop
 8100c00:	1000025c 	.word	0x1000025c

08100c04 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 86.
  */
void ETH_WKUP_IRQHandler(void)
{
 8100c04:	b580      	push	{r7, lr}
 8100c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8100c08:	4802      	ldr	r0, [pc, #8]	@ (8100c14 <ETH_WKUP_IRQHandler+0x10>)
 8100c0a:	f006 ffdf 	bl	8107bcc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8100c0e:	bf00      	nop
 8100c10:	bd80      	pop	{r7, pc}
 8100c12:	bf00      	nop
 8100c14:	1000025c 	.word	0x1000025c

08100c18 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8100c18:	b580      	push	{r7, lr}
 8100c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8100c1c:	f008 fc82 	bl	8109524 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 8100c20:	bf00      	nop
 8100c22:	bd80      	pop	{r7, pc}

08100c24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8100c24:	b480      	push	{r7}
 8100c26:	af00      	add	r7, sp, #0
	return 1;
 8100c28:	2301      	movs	r3, #1
}
 8100c2a:	4618      	mov	r0, r3
 8100c2c:	46bd      	mov	sp, r7
 8100c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c32:	4770      	bx	lr

08100c34 <_kill>:

int _kill(int pid, int sig)
{
 8100c34:	b480      	push	{r7}
 8100c36:	b083      	sub	sp, #12
 8100c38:	af00      	add	r7, sp, #0
 8100c3a:	6078      	str	r0, [r7, #4]
 8100c3c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8100c3e:	4b05      	ldr	r3, [pc, #20]	@ (8100c54 <_kill+0x20>)
 8100c40:	2216      	movs	r2, #22
 8100c42:	601a      	str	r2, [r3, #0]
	return -1;
 8100c44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8100c48:	4618      	mov	r0, r3
 8100c4a:	370c      	adds	r7, #12
 8100c4c:	46bd      	mov	sp, r7
 8100c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c52:	4770      	bx	lr
 8100c54:	10011ecc 	.word	0x10011ecc

08100c58 <_exit>:

void _exit (int status)
{
 8100c58:	b580      	push	{r7, lr}
 8100c5a:	b082      	sub	sp, #8
 8100c5c:	af00      	add	r7, sp, #0
 8100c5e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8100c60:	f04f 31ff 	mov.w	r1, #4294967295
 8100c64:	6878      	ldr	r0, [r7, #4]
 8100c66:	f7ff ffe5 	bl	8100c34 <_kill>
	while (1) {}		/* Make sure we hang here */
 8100c6a:	bf00      	nop
 8100c6c:	e7fd      	b.n	8100c6a <_exit+0x12>

08100c6e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8100c6e:	b580      	push	{r7, lr}
 8100c70:	b086      	sub	sp, #24
 8100c72:	af00      	add	r7, sp, #0
 8100c74:	60f8      	str	r0, [r7, #12]
 8100c76:	60b9      	str	r1, [r7, #8]
 8100c78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100c7a:	2300      	movs	r3, #0
 8100c7c:	617b      	str	r3, [r7, #20]
 8100c7e:	e00a      	b.n	8100c96 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8100c80:	f3af 8000 	nop.w
 8100c84:	4601      	mov	r1, r0
 8100c86:	68bb      	ldr	r3, [r7, #8]
 8100c88:	1c5a      	adds	r2, r3, #1
 8100c8a:	60ba      	str	r2, [r7, #8]
 8100c8c:	b2ca      	uxtb	r2, r1
 8100c8e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100c90:	697b      	ldr	r3, [r7, #20]
 8100c92:	3301      	adds	r3, #1
 8100c94:	617b      	str	r3, [r7, #20]
 8100c96:	697a      	ldr	r2, [r7, #20]
 8100c98:	687b      	ldr	r3, [r7, #4]
 8100c9a:	429a      	cmp	r2, r3
 8100c9c:	dbf0      	blt.n	8100c80 <_read+0x12>
	}

return len;
 8100c9e:	687b      	ldr	r3, [r7, #4]
}
 8100ca0:	4618      	mov	r0, r3
 8100ca2:	3718      	adds	r7, #24
 8100ca4:	46bd      	mov	sp, r7
 8100ca6:	bd80      	pop	{r7, pc}

08100ca8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8100ca8:	b580      	push	{r7, lr}
 8100caa:	b086      	sub	sp, #24
 8100cac:	af00      	add	r7, sp, #0
 8100cae:	60f8      	str	r0, [r7, #12]
 8100cb0:	60b9      	str	r1, [r7, #8]
 8100cb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100cb4:	2300      	movs	r3, #0
 8100cb6:	617b      	str	r3, [r7, #20]
 8100cb8:	e009      	b.n	8100cce <_write+0x26>
	{
		__io_putchar(*ptr++);
 8100cba:	68bb      	ldr	r3, [r7, #8]
 8100cbc:	1c5a      	adds	r2, r3, #1
 8100cbe:	60ba      	str	r2, [r7, #8]
 8100cc0:	781b      	ldrb	r3, [r3, #0]
 8100cc2:	4618      	mov	r0, r3
 8100cc4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100cc8:	697b      	ldr	r3, [r7, #20]
 8100cca:	3301      	adds	r3, #1
 8100ccc:	617b      	str	r3, [r7, #20]
 8100cce:	697a      	ldr	r2, [r7, #20]
 8100cd0:	687b      	ldr	r3, [r7, #4]
 8100cd2:	429a      	cmp	r2, r3
 8100cd4:	dbf1      	blt.n	8100cba <_write+0x12>
	}
	return len;
 8100cd6:	687b      	ldr	r3, [r7, #4]
}
 8100cd8:	4618      	mov	r0, r3
 8100cda:	3718      	adds	r7, #24
 8100cdc:	46bd      	mov	sp, r7
 8100cde:	bd80      	pop	{r7, pc}

08100ce0 <_close>:

int _close(int file)
{
 8100ce0:	b480      	push	{r7}
 8100ce2:	b083      	sub	sp, #12
 8100ce4:	af00      	add	r7, sp, #0
 8100ce6:	6078      	str	r0, [r7, #4]
	return -1;
 8100ce8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8100cec:	4618      	mov	r0, r3
 8100cee:	370c      	adds	r7, #12
 8100cf0:	46bd      	mov	sp, r7
 8100cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cf6:	4770      	bx	lr

08100cf8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8100cf8:	b480      	push	{r7}
 8100cfa:	b083      	sub	sp, #12
 8100cfc:	af00      	add	r7, sp, #0
 8100cfe:	6078      	str	r0, [r7, #4]
 8100d00:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8100d02:	683b      	ldr	r3, [r7, #0]
 8100d04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8100d08:	605a      	str	r2, [r3, #4]
	return 0;
 8100d0a:	2300      	movs	r3, #0
}
 8100d0c:	4618      	mov	r0, r3
 8100d0e:	370c      	adds	r7, #12
 8100d10:	46bd      	mov	sp, r7
 8100d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d16:	4770      	bx	lr

08100d18 <_isatty>:

int _isatty(int file)
{
 8100d18:	b480      	push	{r7}
 8100d1a:	b083      	sub	sp, #12
 8100d1c:	af00      	add	r7, sp, #0
 8100d1e:	6078      	str	r0, [r7, #4]
	return 1;
 8100d20:	2301      	movs	r3, #1
}
 8100d22:	4618      	mov	r0, r3
 8100d24:	370c      	adds	r7, #12
 8100d26:	46bd      	mov	sp, r7
 8100d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d2c:	4770      	bx	lr

08100d2e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8100d2e:	b480      	push	{r7}
 8100d30:	b085      	sub	sp, #20
 8100d32:	af00      	add	r7, sp, #0
 8100d34:	60f8      	str	r0, [r7, #12]
 8100d36:	60b9      	str	r1, [r7, #8]
 8100d38:	607a      	str	r2, [r7, #4]
	return 0;
 8100d3a:	2300      	movs	r3, #0
}
 8100d3c:	4618      	mov	r0, r3
 8100d3e:	3714      	adds	r7, #20
 8100d40:	46bd      	mov	sp, r7
 8100d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d46:	4770      	bx	lr

08100d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8100d48:	b480      	push	{r7}
 8100d4a:	b087      	sub	sp, #28
 8100d4c:	af00      	add	r7, sp, #0
 8100d4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8100d50:	4a14      	ldr	r2, [pc, #80]	@ (8100da4 <_sbrk+0x5c>)
 8100d52:	4b15      	ldr	r3, [pc, #84]	@ (8100da8 <_sbrk+0x60>)
 8100d54:	1ad3      	subs	r3, r2, r3
 8100d56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8100d58:	697b      	ldr	r3, [r7, #20]
 8100d5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8100d5c:	4b13      	ldr	r3, [pc, #76]	@ (8100dac <_sbrk+0x64>)
 8100d5e:	681b      	ldr	r3, [r3, #0]
 8100d60:	2b00      	cmp	r3, #0
 8100d62:	d102      	bne.n	8100d6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8100d64:	4b11      	ldr	r3, [pc, #68]	@ (8100dac <_sbrk+0x64>)
 8100d66:	4a12      	ldr	r2, [pc, #72]	@ (8100db0 <_sbrk+0x68>)
 8100d68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8100d6a:	4b10      	ldr	r3, [pc, #64]	@ (8100dac <_sbrk+0x64>)
 8100d6c:	681a      	ldr	r2, [r3, #0]
 8100d6e:	687b      	ldr	r3, [r7, #4]
 8100d70:	4413      	add	r3, r2
 8100d72:	693a      	ldr	r2, [r7, #16]
 8100d74:	429a      	cmp	r2, r3
 8100d76:	d205      	bcs.n	8100d84 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8100d78:	4b0e      	ldr	r3, [pc, #56]	@ (8100db4 <_sbrk+0x6c>)
 8100d7a:	220c      	movs	r2, #12
 8100d7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8100d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8100d82:	e009      	b.n	8100d98 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8100d84:	4b09      	ldr	r3, [pc, #36]	@ (8100dac <_sbrk+0x64>)
 8100d86:	681b      	ldr	r3, [r3, #0]
 8100d88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8100d8a:	4b08      	ldr	r3, [pc, #32]	@ (8100dac <_sbrk+0x64>)
 8100d8c:	681a      	ldr	r2, [r3, #0]
 8100d8e:	687b      	ldr	r3, [r7, #4]
 8100d90:	4413      	add	r3, r2
 8100d92:	4a06      	ldr	r2, [pc, #24]	@ (8100dac <_sbrk+0x64>)
 8100d94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8100d96:	68fb      	ldr	r3, [r7, #12]
}
 8100d98:	4618      	mov	r0, r3
 8100d9a:	371c      	adds	r7, #28
 8100d9c:	46bd      	mov	sp, r7
 8100d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100da2:	4770      	bx	lr
 8100da4:	10048000 	.word	0x10048000
 8100da8:	00001000 	.word	0x00001000
 8100dac:	1000016c 	.word	0x1000016c
 8100db0:	10011ed8 	.word	0x10011ed8
 8100db4:	10011ecc 	.word	0x10011ecc

08100db8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8100db8:	b480      	push	{r7}
 8100dba:	b083      	sub	sp, #12
 8100dbc:	af00      	add	r7, sp, #0
 8100dbe:	6078      	str	r0, [r7, #4]
 8100dc0:	6039      	str	r1, [r7, #0]
 8100dc2:	683b      	ldr	r3, [r7, #0]
 8100dc4:	4618      	mov	r0, r3
 8100dc6:	370c      	adds	r7, #12
 8100dc8:	46bd      	mov	sp, r7
 8100dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100dce:	4770      	bx	lr

08100dd0 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       noexcept { return &_M_pod_data[0]; }
 8100dd0:	b480      	push	{r7}
 8100dd2:	b083      	sub	sp, #12
 8100dd4:	af00      	add	r7, sp, #0
 8100dd6:	6078      	str	r0, [r7, #4]
 8100dd8:	687b      	ldr	r3, [r7, #4]
 8100dda:	4618      	mov	r0, r3
 8100ddc:	370c      	adds	r7, #12
 8100dde:	46bd      	mov	sp, r7
 8100de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100de4:	4770      	bx	lr

08100de6 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const noexcept { return &_M_pod_data[0]; }
 8100de6:	b480      	push	{r7}
 8100de8:	b083      	sub	sp, #12
 8100dea:	af00      	add	r7, sp, #0
 8100dec:	6078      	str	r0, [r7, #4]
 8100dee:	687b      	ldr	r3, [r7, #4]
 8100df0:	4618      	mov	r0, r3
 8100df2:	370c      	adds	r7, #12
 8100df4:	46bd      	mov	sp, r7
 8100df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100dfa:	4770      	bx	lr

08100dfc <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8100dfc:	b580      	push	{r7, lr}
 8100dfe:	b082      	sub	sp, #8
 8100e00:	af00      	add	r7, sp, #0
 8100e02:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8100e04:	687b      	ldr	r3, [r7, #4]
 8100e06:	689b      	ldr	r3, [r3, #8]
 8100e08:	2b00      	cmp	r3, #0
 8100e0a:	d005      	beq.n	8100e18 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8100e0c:	687b      	ldr	r3, [r7, #4]
 8100e0e:	689b      	ldr	r3, [r3, #8]
 8100e10:	6878      	ldr	r0, [r7, #4]
 8100e12:	6879      	ldr	r1, [r7, #4]
 8100e14:	2203      	movs	r2, #3
 8100e16:	4798      	blx	r3
    }
 8100e18:	687b      	ldr	r3, [r7, #4]
 8100e1a:	4618      	mov	r0, r3
 8100e1c:	3708      	adds	r7, #8
 8100e1e:	46bd      	mov	sp, r7
 8100e20:	bd80      	pop	{r7, pc}
	...

08100e24 <_ZL15tcp_client_recvPvP7tcp_pcbP4pbufa>:
static struct tcp_pcb *tcp_client_pcb;
static char received_message[100] = {0};
static uint8_t connection_active = 0;

/* Funkcja wywoływana przy odbiorze danych */
static err_t tcp_client_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err) {
 8100e24:	b580      	push	{r7, lr}
 8100e26:	b084      	sub	sp, #16
 8100e28:	af00      	add	r7, sp, #0
 8100e2a:	60f8      	str	r0, [r7, #12]
 8100e2c:	60b9      	str	r1, [r7, #8]
 8100e2e:	607a      	str	r2, [r7, #4]
 8100e30:	70fb      	strb	r3, [r7, #3]
    if (p == NULL) {
 8100e32:	687b      	ldr	r3, [r7, #4]
 8100e34:	2b00      	cmp	r3, #0
 8100e36:	d107      	bne.n	8100e48 <_ZL15tcp_client_recvPvP7tcp_pcbP4pbufa+0x24>
        // Serwer zamknął połączenie
        tcp_close(tpcb);
 8100e38:	68b8      	ldr	r0, [r7, #8]
 8100e3a:	f014 fae1 	bl	8115400 <tcp_close>
        connection_active = 0;
 8100e3e:	4b12      	ldr	r3, [pc, #72]	@ (8100e88 <_ZL15tcp_client_recvPvP7tcp_pcbP4pbufa+0x64>)
 8100e40:	2200      	movs	r2, #0
 8100e42:	701a      	strb	r2, [r3, #0]
        return ERR_OK;
 8100e44:	2300      	movs	r3, #0
 8100e46:	e01b      	b.n	8100e80 <_ZL15tcp_client_recvPvP7tcp_pcbP4pbufa+0x5c>
    }

    /* Kopiuj dane do zmiennej */
    if (p->len < sizeof(received_message)) {
 8100e48:	687b      	ldr	r3, [r7, #4]
 8100e4a:	895b      	ldrh	r3, [r3, #10]
 8100e4c:	2b63      	cmp	r3, #99	@ 0x63
 8100e4e:	d80d      	bhi.n	8100e6c <_ZL15tcp_client_recvPvP7tcp_pcbP4pbufa+0x48>
        strncpy(received_message, (char *)p->payload, p->len);
 8100e50:	687b      	ldr	r3, [r7, #4]
 8100e52:	6859      	ldr	r1, [r3, #4]
 8100e54:	687b      	ldr	r3, [r7, #4]
 8100e56:	895b      	ldrh	r3, [r3, #10]
 8100e58:	461a      	mov	r2, r3
 8100e5a:	480c      	ldr	r0, [pc, #48]	@ (8100e8c <_ZL15tcp_client_recvPvP7tcp_pcbP4pbufa+0x68>)
 8100e5c:	f01b f87d 	bl	811bf5a <strncpy>
        received_message[p->len] = '\0';
 8100e60:	687b      	ldr	r3, [r7, #4]
 8100e62:	895b      	ldrh	r3, [r3, #10]
 8100e64:	461a      	mov	r2, r3
 8100e66:	4b09      	ldr	r3, [pc, #36]	@ (8100e8c <_ZL15tcp_client_recvPvP7tcp_pcbP4pbufa+0x68>)
 8100e68:	2100      	movs	r1, #0
 8100e6a:	5499      	strb	r1, [r3, r2]
        // Odebrano wiadomość, zapisana do zmiennej received_message
    }

    /* Zwalnij bufor */
    tcp_recved(tpcb, p->len);
 8100e6c:	687b      	ldr	r3, [r7, #4]
 8100e6e:	895b      	ldrh	r3, [r3, #10]
 8100e70:	4619      	mov	r1, r3
 8100e72:	68b8      	ldr	r0, [r7, #8]
 8100e74:	f014 fc14 	bl	81156a0 <tcp_recved>
    pbuf_free(p);
 8100e78:	6878      	ldr	r0, [r7, #4]
 8100e7a:	f013 fd25 	bl	81148c8 <pbuf_free>
    return ERR_OK;
 8100e7e:	2300      	movs	r3, #0
}
 8100e80:	4618      	mov	r0, r3
 8100e82:	3710      	adds	r7, #16
 8100e84:	46bd      	mov	sp, r7
 8100e86:	bd80      	pop	{r7, pc}
 8100e88:	100001d8 	.word	0x100001d8
 8100e8c:	10000174 	.word	0x10000174

08100e90 <_ZL15tcp_client_sentPvP7tcp_pcbt>:

/* Funkcja wywoływana przy wysłaniu danych */
static err_t tcp_client_sent(void *arg, struct tcp_pcb *tpcb, u16_t len) {
 8100e90:	b480      	push	{r7}
 8100e92:	b085      	sub	sp, #20
 8100e94:	af00      	add	r7, sp, #0
 8100e96:	60f8      	str	r0, [r7, #12]
 8100e98:	60b9      	str	r1, [r7, #8]
 8100e9a:	4613      	mov	r3, r2
 8100e9c:	80fb      	strh	r3, [r7, #6]
    // Dane wysłane
    return ERR_OK;
 8100e9e:	2300      	movs	r3, #0
}
 8100ea0:	4618      	mov	r0, r3
 8100ea2:	3714      	adds	r7, #20
 8100ea4:	46bd      	mov	sp, r7
 8100ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100eaa:	4770      	bx	lr

08100eac <_ZL20tcp_client_connectedPvP7tcp_pcba>:

/* Funkcja wywoływana po połączeniu z serwerem */
static err_t tcp_client_connected(void *arg, struct tcp_pcb *tpcb, err_t err) {
 8100eac:	b580      	push	{r7, lr}
 8100eae:	b084      	sub	sp, #16
 8100eb0:	af00      	add	r7, sp, #0
 8100eb2:	60f8      	str	r0, [r7, #12]
 8100eb4:	60b9      	str	r1, [r7, #8]
 8100eb6:	4613      	mov	r3, r2
 8100eb8:	71fb      	strb	r3, [r7, #7]
    if (err != ERR_OK) {
 8100eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8100ebe:	2b00      	cmp	r3, #0
 8100ec0:	d008      	beq.n	8100ed4 <_ZL20tcp_client_connectedPvP7tcp_pcba+0x28>
        // Błąd połączenia
        tcp_close(tpcb);
 8100ec2:	68b8      	ldr	r0, [r7, #8]
 8100ec4:	f014 fa9c 	bl	8115400 <tcp_close>
        connection_active = 0;
 8100ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8100ef4 <_ZL20tcp_client_connectedPvP7tcp_pcba+0x48>)
 8100eca:	2200      	movs	r2, #0
 8100ecc:	701a      	strb	r2, [r3, #0]
        return err;
 8100ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8100ed2:	e00b      	b.n	8100eec <_ZL20tcp_client_connectedPvP7tcp_pcba+0x40>
    }

    // Połączono z serwerem TCP
    connection_active = 1;
 8100ed4:	4b07      	ldr	r3, [pc, #28]	@ (8100ef4 <_ZL20tcp_client_connectedPvP7tcp_pcba+0x48>)
 8100ed6:	2201      	movs	r2, #1
 8100ed8:	701a      	strb	r2, [r3, #0]

    /* Ustaw funkcje odbioru i wysłania */
    tcp_recv(tpcb, tcp_client_recv);
 8100eda:	4907      	ldr	r1, [pc, #28]	@ (8100ef8 <_ZL20tcp_client_connectedPvP7tcp_pcba+0x4c>)
 8100edc:	68b8      	ldr	r0, [r7, #8]
 8100ede:	f015 fbbd 	bl	811665c <tcp_recv>
    tcp_sent(tpcb, tcp_client_sent);
 8100ee2:	4906      	ldr	r1, [pc, #24]	@ (8100efc <_ZL20tcp_client_connectedPvP7tcp_pcba+0x50>)
 8100ee4:	68b8      	ldr	r0, [r7, #8]
 8100ee6:	f015 fbdb 	bl	81166a0 <tcp_sent>

    return ERR_OK;
 8100eea:	2300      	movs	r3, #0
}
 8100eec:	4618      	mov	r0, r3
 8100eee:	3710      	adds	r7, #16
 8100ef0:	46bd      	mov	sp, r7
 8100ef2:	bd80      	pop	{r7, pc}
 8100ef4:	100001d8 	.word	0x100001d8
 8100ef8:	08100e25 	.word	0x08100e25
 8100efc:	08100e91 	.word	0x08100e91

08100f00 <_Z24StartTask_EdiabasConnMgrPv>:

void StartTask_EdiabasConnMgr(void *argument) {
 8100f00:	b590      	push	{r4, r7, lr}
 8100f02:	b087      	sub	sp, #28
 8100f04:	af00      	add	r7, sp, #0
 8100f06:	6078      	str	r0, [r7, #4]
    MX_LWIP_Init();
 8100f08:	f002 ff42 	bl	8103d90 <MX_LWIP_Init>

    ip_addr_t server_ip;
    err_t err;

    IP4_ADDR(&server_ip, 192, 168, 1, 10);  // Adres serwera
 8100f0c:	4b28      	ldr	r3, [pc, #160]	@ (8100fb0 <_Z24StartTask_EdiabasConnMgrPv+0xb0>)
 8100f0e:	60fb      	str	r3, [r7, #12]

    /* Infinite loop */
    for (;;) {
        if (!connection_active) {
 8100f10:	4b28      	ldr	r3, [pc, #160]	@ (8100fb4 <_Z24StartTask_EdiabasConnMgrPv+0xb4>)
 8100f12:	781b      	ldrb	r3, [r3, #0]
 8100f14:	2b00      	cmp	r3, #0
 8100f16:	d12d      	bne.n	8100f74 <_Z24StartTask_EdiabasConnMgrPv+0x74>
            /* Utwórz nowe PCB */
            tcp_client_pcb = tcp_new();
 8100f18:	f015 fb98 	bl	811664c <tcp_new>
 8100f1c:	4603      	mov	r3, r0
 8100f1e:	4a26      	ldr	r2, [pc, #152]	@ (8100fb8 <_Z24StartTask_EdiabasConnMgrPv+0xb8>)
 8100f20:	6013      	str	r3, [r2, #0]
            if (tcp_client_pcb == NULL) {
 8100f22:	4b25      	ldr	r3, [pc, #148]	@ (8100fb8 <_Z24StartTask_EdiabasConnMgrPv+0xb8>)
 8100f24:	681b      	ldr	r3, [r3, #0]
 8100f26:	2b00      	cmp	r3, #0
 8100f28:	d104      	bne.n	8100f34 <_Z24StartTask_EdiabasConnMgrPv+0x34>
                // Nie udało się utworzyć PCB TCP
                osDelay(5000);
 8100f2a:	f241 3088 	movw	r0, #5000	@ 0x1388
 8100f2e:	f00b fa46 	bl	810c3be <osDelay>
                continue;
 8100f32:	e03b      	b.n	8100fac <_Z24StartTask_EdiabasConnMgrPv+0xac>
            }
            /* Ustaw timeout dla PCB */
            tcp_poll(tcp_client_pcb, NULL, 4);
 8100f34:	4b20      	ldr	r3, [pc, #128]	@ (8100fb8 <_Z24StartTask_EdiabasConnMgrPv+0xb8>)
 8100f36:	681b      	ldr	r3, [r3, #0]
 8100f38:	2204      	movs	r2, #4
 8100f3a:	2100      	movs	r1, #0
 8100f3c:	4618      	mov	r0, r3
 8100f3e:	f015 fbd1 	bl	81166e4 <tcp_poll>

            /* Połącz z serwerem */
            err = tcp_connect(tcp_client_pcb, &server_ip, SERVER_PORT, tcp_client_connected);
 8100f42:	4b1d      	ldr	r3, [pc, #116]	@ (8100fb8 <_Z24StartTask_EdiabasConnMgrPv+0xb8>)
 8100f44:	6818      	ldr	r0, [r3, #0]
 8100f46:	f107 010c 	add.w	r1, r7, #12
 8100f4a:	4b1c      	ldr	r3, [pc, #112]	@ (8100fbc <_Z24StartTask_EdiabasConnMgrPv+0xbc>)
 8100f4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8100f50:	f014 fc3e 	bl	81157d0 <tcp_connect>
 8100f54:	4603      	mov	r3, r0
 8100f56:	74fb      	strb	r3, [r7, #19]
            if (err != ERR_OK) {
 8100f58:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8100f5c:	2b00      	cmp	r3, #0
 8100f5e:	d022      	beq.n	8100fa6 <_Z24StartTask_EdiabasConnMgrPv+0xa6>
                // Błąd podczas łączenia
                tcp_close(tcp_client_pcb);
 8100f60:	4b15      	ldr	r3, [pc, #84]	@ (8100fb8 <_Z24StartTask_EdiabasConnMgrPv+0xb8>)
 8100f62:	681b      	ldr	r3, [r3, #0]
 8100f64:	4618      	mov	r0, r3
 8100f66:	f014 fa4b 	bl	8115400 <tcp_close>
                osDelay(5000);
 8100f6a:	f241 3088 	movw	r0, #5000	@ 0x1388
 8100f6e:	f00b fa26 	bl	810c3be <osDelay>
                continue;
 8100f72:	e01b      	b.n	8100fac <_Z24StartTask_EdiabasConnMgrPv+0xac>
            }

            // Próba połączenia z serwerem
        } else {
            /* Wyślij wiadomość co 100 ms */
            const char *message = "Zapytanie od STM32\n";
 8100f74:	4b12      	ldr	r3, [pc, #72]	@ (8100fc0 <_Z24StartTask_EdiabasConnMgrPv+0xc0>)
 8100f76:	617b      	str	r3, [r7, #20]
            err = tcp_write(tcp_client_pcb, message, strlen(message), TCP_WRITE_FLAG_COPY);
 8100f78:	4b0f      	ldr	r3, [pc, #60]	@ (8100fb8 <_Z24StartTask_EdiabasConnMgrPv+0xb8>)
 8100f7a:	681c      	ldr	r4, [r3, #0]
 8100f7c:	6978      	ldr	r0, [r7, #20]
 8100f7e:	f7ff f9af 	bl	81002e0 <strlen>
 8100f82:	4603      	mov	r3, r0
 8100f84:	b29a      	uxth	r2, r3
 8100f86:	2301      	movs	r3, #1
 8100f88:	6979      	ldr	r1, [r7, #20]
 8100f8a:	4620      	mov	r0, r4
 8100f8c:	f018 fa58 	bl	8119440 <tcp_write>
 8100f90:	4603      	mov	r3, r0
 8100f92:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_OK) {
 8100f94:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8100f98:	2b00      	cmp	r3, #0
 8100f9a:	d104      	bne.n	8100fa6 <_Z24StartTask_EdiabasConnMgrPv+0xa6>
                tcp_output(tcp_client_pcb);
 8100f9c:	4b06      	ldr	r3, [pc, #24]	@ (8100fb8 <_Z24StartTask_EdiabasConnMgrPv+0xb8>)
 8100f9e:	681b      	ldr	r3, [r3, #0]
 8100fa0:	4618      	mov	r0, r3
 8100fa2:	f019 f837 	bl	811a014 <tcp_output>
            } else {
                // Błąd wysyłania danych
            }
        }

        osDelay(100);  // Czekaj 100 ms
 8100fa6:	2064      	movs	r0, #100	@ 0x64
 8100fa8:	f00b fa09 	bl	810c3be <osDelay>
    }
 8100fac:	e7b0      	b.n	8100f10 <_Z24StartTask_EdiabasConnMgrPv+0x10>
 8100fae:	bf00      	nop
 8100fb0:	0a01a8c0 	.word	0x0a01a8c0
 8100fb4:	100001d8 	.word	0x100001d8
 8100fb8:	10000170 	.word	0x10000170
 8100fbc:	08100ead 	.word	0x08100ead
 8100fc0:	0811cc3c 	.word	0x0811cc3c

08100fc4 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8100fc4:	b580      	push	{r7, lr}
 8100fc6:	b082      	sub	sp, #8
 8100fc8:	af00      	add	r7, sp, #0
 8100fca:	6078      	str	r0, [r7, #4]
 8100fcc:	687b      	ldr	r3, [r7, #4]
 8100fce:	4618      	mov	r0, r3
 8100fd0:	f7ff ff14 	bl	8100dfc <_ZNSt14_Function_baseD1Ev>
 8100fd4:	687b      	ldr	r3, [r7, #4]
 8100fd6:	4618      	mov	r0, r3
 8100fd8:	3708      	adds	r7, #8
 8100fda:	46bd      	mov	sp, r7
 8100fdc:	bd80      	pop	{r7, pc}

08100fde <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8100fde:	b480      	push	{r7}
 8100fe0:	b083      	sub	sp, #12
 8100fe2:	af00      	add	r7, sp, #0
 8100fe4:	6078      	str	r0, [r7, #4]
 8100fe6:	687b      	ldr	r3, [r7, #4]
 8100fe8:	461a      	mov	r2, r3
 8100fea:	2300      	movs	r3, #0
 8100fec:	6013      	str	r3, [r2, #0]
 8100fee:	6053      	str	r3, [r2, #4]
 8100ff0:	687b      	ldr	r3, [r7, #4]
 8100ff2:	2200      	movs	r2, #0
 8100ff4:	609a      	str	r2, [r3, #8]
 8100ff6:	687b      	ldr	r3, [r7, #4]
 8100ff8:	4618      	mov	r0, r3
 8100ffa:	370c      	adds	r7, #12
 8100ffc:	46bd      	mov	sp, r7
 8100ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101002:	4770      	bx	lr

08101004 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8101004:	b480      	push	{r7}
 8101006:	b083      	sub	sp, #12
 8101008:	af00      	add	r7, sp, #0
 810100a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810100c:	687b      	ldr	r3, [r7, #4]
 810100e:	4618      	mov	r0, r3
 8101010:	370c      	adds	r7, #12
 8101012:	46bd      	mov	sp, r7
 8101014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101018:	4770      	bx	lr

0810101a <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810101a:	b480      	push	{r7}
 810101c:	b083      	sub	sp, #12
 810101e:	af00      	add	r7, sp, #0
 8101020:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8101022:	687b      	ldr	r3, [r7, #4]
 8101024:	4618      	mov	r0, r3
 8101026:	370c      	adds	r7, #12
 8101028:	46bd      	mov	sp, r7
 810102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810102e:	4770      	bx	lr

08101030 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8101030:	b480      	push	{r7}
 8101032:	b083      	sub	sp, #12
 8101034:	af00      	add	r7, sp, #0
 8101036:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8101038:	687b      	ldr	r3, [r7, #4]
 810103a:	4618      	mov	r0, r3
 810103c:	370c      	adds	r7, #12
 810103e:	46bd      	mov	sp, r7
 8101040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101044:	4770      	bx	lr

08101046 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access() noexcept
 8101046:	b580      	push	{r7, lr}
 8101048:	b082      	sub	sp, #8
 810104a:	af00      	add	r7, sp, #0
 810104c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 810104e:	6878      	ldr	r0, [r7, #4]
 8101050:	f7ff febe 	bl	8100dd0 <_ZNSt9_Any_data9_M_accessEv>
 8101054:	4603      	mov	r3, r0
 8101056:	4618      	mov	r0, r3
 8101058:	3708      	adds	r7, #8
 810105a:	46bd      	mov	sp, r7
 810105c:	bd80      	pop	{r7, pc}

0810105e <_Z18StartTask_EDaemonNPv>:
#include "cm_ipc.h"

extern QueueHandle_t queueToNativeDaemon;

void StartTask_EDaemonN(void *argument)
{
 810105e:	b580      	push	{r7, lr}
 8101060:	b086      	sub	sp, #24
 8101062:	af00      	add	r7, sp, #0
 8101064:	6078      	str	r0, [r7, #4]
	ipc_start();
 8101066:	f7ff f9f3 	bl	8100450 <ipc_start>
	EdiabasDaemonNativeTask EdiabasDaemonNativeTaskInstance;
 810106a:	f107 030c 	add.w	r3, r7, #12
 810106e:	4618      	mov	r0, r3
 8101070:	f000 f80a 	bl	8101088 <_ZN23EdiabasDaemonNativeTaskC1Ev>

	for(;;)
	{
		EdiabasDaemonNativeTaskInstance.process();
 8101074:	f107 030c 	add.w	r3, r7, #12
 8101078:	4618      	mov	r0, r3
 810107a:	f000 f8b4 	bl	81011e6 <_ZN23EdiabasDaemonNativeTask7processEv>
		osDelay(1);
 810107e:	2001      	movs	r0, #1
 8101080:	f00b f99d 	bl	810c3be <osDelay>
		EdiabasDaemonNativeTaskInstance.process();
 8101084:	bf00      	nop
 8101086:	e7f5      	b.n	8101074 <_Z18StartTask_EDaemonNPv+0x16>

08101088 <_ZN23EdiabasDaemonNativeTaskC1Ev>:
	}
}

EdiabasDaemonNativeTask::EdiabasDaemonNativeTask() : event_bus(EventBus(queueToNativeDaemon, EVENT_CLIENT_DAEMON_NATIVE)) {}
 8101088:	b580      	push	{r7, lr}
 810108a:	b082      	sub	sp, #8
 810108c:	af00      	add	r7, sp, #0
 810108e:	6078      	str	r0, [r7, #4]
 8101090:	687b      	ldr	r3, [r7, #4]
 8101092:	4a05      	ldr	r2, [pc, #20]	@ (81010a8 <_ZN23EdiabasDaemonNativeTaskC1Ev+0x20>)
 8101094:	6811      	ldr	r1, [r2, #0]
 8101096:	2205      	movs	r2, #5
 8101098:	4618      	mov	r0, r3
 810109a:	f000 fab1 	bl	8101600 <_ZN8EventBusC1EP15QueueDefinition12EEventClient>
 810109e:	687b      	ldr	r3, [r7, #4]
 81010a0:	4618      	mov	r0, r3
 81010a2:	3708      	adds	r7, #8
 81010a4:	46bd      	mov	sp, r7
 81010a6:	bd80      	pop	{r7, pc}
 81010a8:	10000114 	.word	0x10000114

081010ac <_ZN23EdiabasDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_>:

void EdiabasDaemonNativeTask::OnEvent(EEventType event, UMessageData msg, EEventClient eventSender, EEventClient eventReceiver)
{
 81010ac:	b082      	sub	sp, #8
 81010ae:	b5b0      	push	{r4, r5, r7, lr}
 81010b0:	b08e      	sub	sp, #56	@ 0x38
 81010b2:	af04      	add	r7, sp, #16
 81010b4:	6078      	str	r0, [r7, #4]
 81010b6:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 81010ba:	e880 000c 	stmia.w	r0, {r2, r3}
 81010be:	460b      	mov	r3, r1
 81010c0:	807b      	strh	r3, [r7, #2]
	switch(eventReceiver)
 81010c2:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 81010c6:	2b00      	cmp	r3, #0
 81010c8:	d005      	beq.n	81010d6 <_ZN23EdiabasDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x2a>
 81010ca:	2b00      	cmp	r3, #0
 81010cc:	db31      	blt.n	8101132 <_ZN23EdiabasDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x86>
 81010ce:	3b02      	subs	r3, #2
 81010d0:	2b01      	cmp	r3, #1
 81010d2:	d82e      	bhi.n	8101132 <_ZN23EdiabasDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x86>
 81010d4:	e01a      	b.n	810110c <_ZN23EdiabasDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x60>
	{
	// if recipient is on CM7 side, then send message through IPC.
	case EVENT_CLIENT_FRONTEND:
	{
		SMessage sMsg;
		sMsg.event_type = event;
 81010d6:	887b      	ldrh	r3, [r7, #2]
 81010d8:	813b      	strh	r3, [r7, #8]
		sMsg.message_data = msg;
 81010da:	f107 040c 	add.w	r4, r7, #12
 81010de:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 81010e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81010e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		sMsg.event_sender = eventSender;
 81010e8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 81010ec:	773b      	strb	r3, [r7, #28]
		sMsg.event_receiver = eventReceiver;
 81010ee:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 81010f2:	777b      	strb	r3, [r7, #29]
		size_t len = sizeof(sMsg);
 81010f4:	2318      	movs	r3, #24
 81010f6:	627b      	str	r3, [r7, #36]	@ 0x24
		size_t ret = ipc_sendmsg(&sMsg, len, 1000);
 81010f8:	f107 0308 	add.w	r3, r7, #8
 81010fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8101100:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8101102:	4618      	mov	r0, r3
 8101104:	f7ff fa2a 	bl	810055c <ipc_sendmsg>
 8101108:	6238      	str	r0, [r7, #32]
		break;
 810110a:	e013      	b.n	8101134 <_ZN23EdiabasDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_+0x88>
	}
	// if recipient is on CM4 side, then forward to event manager.
	case EVENT_CLIENT_EDIABAS_CONNECTION_MANAGER:
	case EVENT_CLIENT_THERMOMETER:
		event_bus.send(event, msg, eventReceiver);
 810110c:	687c      	ldr	r4, [r7, #4]
 810110e:	887d      	ldrh	r5, [r7, #2]
 8101110:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8101114:	9302      	str	r3, [sp, #8]
 8101116:	466a      	mov	r2, sp
 8101118:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 810111c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8101120:	e882 0003 	stmia.w	r2, {r0, r1}
 8101124:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8101128:	cb0c      	ldmia	r3, {r2, r3}
 810112a:	4629      	mov	r1, r5
 810112c:	4620      	mov	r0, r4
 810112e:	f000 fa81 	bl	8101634 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient>
	default:
		break;;
 8101132:	bf00      	nop
	}
}
 8101134:	bf00      	nop
 8101136:	3728      	adds	r7, #40	@ 0x28
 8101138:	46bd      	mov	sp, r7
 810113a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 810113e:	b002      	add	sp, #8
 8101140:	4770      	bx	lr

08101142 <_ZN23EdiabasDaemonNativeTask17processIpcReceiveEv>:

void EdiabasDaemonNativeTask::processIpcReceive()
{
 8101142:	b590      	push	{r4, r7, lr}
 8101144:	b08f      	sub	sp, #60	@ 0x3c
 8101146:	af04      	add	r7, sp, #16
 8101148:	6078      	str	r0, [r7, #4]
	SMessage sMsg;
	size_t len = sizeof(sMsg);
 810114a:	2318      	movs	r3, #24
 810114c:	627b      	str	r3, [r7, #36]	@ 0x24
	size_t ret = ipc_recvmsg(&sMsg, len, 0);
 810114e:	f107 0308 	add.w	r3, r7, #8
 8101152:	2200      	movs	r2, #0
 8101154:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8101156:	4618      	mov	r0, r3
 8101158:	f7ff fa28 	bl	81005ac <ipc_recvmsg>
 810115c:	6238      	str	r0, [r7, #32]
	if(ret == len)
 810115e:	6a3a      	ldr	r2, [r7, #32]
 8101160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101162:	429a      	cmp	r2, r3
 8101164:	d112      	bne.n	810118c <_ZN23EdiabasDaemonNativeTask17processIpcReceiveEv+0x4a>
	{
		OnEvent(sMsg.event_type, sMsg.message_data, sMsg.event_sender, sMsg.event_receiver);
 8101166:	893c      	ldrh	r4, [r7, #8]
 8101168:	7f3b      	ldrb	r3, [r7, #28]
 810116a:	7f7a      	ldrb	r2, [r7, #29]
 810116c:	9203      	str	r2, [sp, #12]
 810116e:	9302      	str	r3, [sp, #8]
 8101170:	466a      	mov	r2, sp
 8101172:	f107 0314 	add.w	r3, r7, #20
 8101176:	e893 0003 	ldmia.w	r3, {r0, r1}
 810117a:	e882 0003 	stmia.w	r2, {r0, r1}
 810117e:	f107 030c 	add.w	r3, r7, #12
 8101182:	cb0c      	ldmia	r3, {r2, r3}
 8101184:	4621      	mov	r1, r4
 8101186:	6878      	ldr	r0, [r7, #4]
 8101188:	f7ff ff90 	bl	81010ac <_ZN23EdiabasDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_>
	}
}
 810118c:	bf00      	nop
 810118e:	372c      	adds	r7, #44	@ 0x2c
 8101190:	46bd      	mov	sp, r7
 8101192:	bd90      	pop	{r4, r7, pc}

08101194 <_ZZN23EdiabasDaemonNativeTask7processEvENKUl10EEventType12UMessageData12EEventClientS2_E_clES0_S1_S2_S2_>:


void EdiabasDaemonNativeTask::process()
{
	processIpcReceive();
	event_bus.receive([this](EEventType event, UMessageData msg, EEventClient eventSender, EEventClient eventReceiver){this->OnEvent(event, msg, eventSender, eventReceiver);});
 8101194:	b082      	sub	sp, #8
 8101196:	b5b0      	push	{r4, r5, r7, lr}
 8101198:	b086      	sub	sp, #24
 810119a:	af04      	add	r7, sp, #16
 810119c:	6078      	str	r0, [r7, #4]
 810119e:	f107 0018 	add.w	r0, r7, #24
 81011a2:	e880 000c 	stmia.w	r0, {r2, r3}
 81011a6:	460b      	mov	r3, r1
 81011a8:	807b      	strh	r3, [r7, #2]
 81011aa:	687b      	ldr	r3, [r7, #4]
 81011ac:	681c      	ldr	r4, [r3, #0]
 81011ae:	887d      	ldrh	r5, [r7, #2]
 81011b0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 81011b4:	9303      	str	r3, [sp, #12]
 81011b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 81011ba:	9302      	str	r3, [sp, #8]
 81011bc:	466a      	mov	r2, sp
 81011be:	f107 0320 	add.w	r3, r7, #32
 81011c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 81011c6:	e882 0003 	stmia.w	r2, {r0, r1}
 81011ca:	f107 0318 	add.w	r3, r7, #24
 81011ce:	cb0c      	ldmia	r3, {r2, r3}
 81011d0:	4629      	mov	r1, r5
 81011d2:	4620      	mov	r0, r4
 81011d4:	f7ff ff6a 	bl	81010ac <_ZN23EdiabasDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClientS2_>
 81011d8:	bf00      	nop
 81011da:	3708      	adds	r7, #8
 81011dc:	46bd      	mov	sp, r7
 81011de:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 81011e2:	b002      	add	sp, #8
 81011e4:	4770      	bx	lr

081011e6 <_ZN23EdiabasDaemonNativeTask7processEv>:
{
 81011e6:	b590      	push	{r4, r7, lr}
 81011e8:	b089      	sub	sp, #36	@ 0x24
 81011ea:	af00      	add	r7, sp, #0
 81011ec:	6078      	str	r0, [r7, #4]
	processIpcReceive();
 81011ee:	6878      	ldr	r0, [r7, #4]
 81011f0:	f7ff ffa7 	bl	8101142 <_ZN23EdiabasDaemonNativeTask17processIpcReceiveEv>
	event_bus.receive([this](EEventType event, UMessageData msg, EEventClient eventSender, EEventClient eventReceiver){this->OnEvent(event, msg, eventSender, eventReceiver);});
 81011f4:	687c      	ldr	r4, [r7, #4]
 81011f6:	687b      	ldr	r3, [r7, #4]
 81011f8:	61fb      	str	r3, [r7, #28]
 81011fa:	f107 021c 	add.w	r2, r7, #28
 81011fe:	f107 030c 	add.w	r3, r7, #12
 8101202:	4611      	mov	r1, r2
 8101204:	4618      	mov	r0, r3
 8101206:	f000 f80f 	bl	8101228 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_vEEOT_>
 810120a:	f107 030c 	add.w	r3, r7, #12
 810120e:	4619      	mov	r1, r3
 8101210:	4620      	mov	r0, r4
 8101212:	f000 fa47 	bl	81016a4 <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE>
 8101216:	f107 030c 	add.w	r3, r7, #12
 810121a:	4618      	mov	r0, r3
 810121c:	f7ff fed2 	bl	8100fc4 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EED1Ev>
}
 8101220:	bf00      	nop
 8101222:	3724      	adds	r7, #36	@ 0x24
 8101224:	46bd      	mov	sp, r7
 8101226:	bd90      	pop	{r4, r7, pc}

08101228 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_vEEOT_>:
       */
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2774. std::function construction vs assignment
      template<typename _Functor,
	       typename _Constraints = _Requires<_Callable<_Functor>>>
	function(_Functor&& __f)
 8101228:	b590      	push	{r4, r7, lr}
 810122a:	b083      	sub	sp, #12
 810122c:	af00      	add	r7, sp, #0
 810122e:	6078      	str	r0, [r7, #4]
 8101230:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	: _Function_base()
 8101232:	687b      	ldr	r3, [r7, #4]
 8101234:	461a      	mov	r2, r3
 8101236:	2300      	movs	r3, #0
 8101238:	6013      	str	r3, [r2, #0]
 810123a:	6053      	str	r3, [r2, #4]
 810123c:	6093      	str	r3, [r2, #8]
 810123e:	687b      	ldr	r3, [r7, #4]
 8101240:	4618      	mov	r0, r3
 8101242:	f7ff fecc 	bl	8100fde <_ZNSt14_Function_baseC1Ev>
 8101246:	687b      	ldr	r3, [r7, #4]
 8101248:	2200      	movs	r2, #0
 810124a:	60da      	str	r2, [r3, #12]
	      "std::function target must be constructible from the "
	      "constructor argument");

	  using _My_handler = _Handler<_Functor>;

	  if (_My_handler::_M_not_empty_function(__f))
 810124c:	6838      	ldr	r0, [r7, #0]
 810124e:	f000 f81b 	bl	8101288 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E21_M_not_empty_functionIS5_EEbRKT_>
 8101252:	4603      	mov	r3, r0
 8101254:	2b00      	cmp	r3, #0
 8101256:	d00e      	beq.n	8101276 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_vEEOT_+0x4e>
	    {
	      _My_handler::_M_init_functor(_M_functor,
 8101258:	687c      	ldr	r4, [r7, #4]
 810125a:	6838      	ldr	r0, [r7, #0]
 810125c:	f000 f81f 	bl	810129e <_ZSt7forwardIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 8101260:	4603      	mov	r3, r0
 8101262:	4619      	mov	r1, r3
 8101264:	4620      	mov	r0, r4
 8101266:	f000 f825 	bl	81012b4 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIS5_EEvRSt9_Any_dataOT_>
					   std::forward<_Functor>(__f));
	      _M_invoker = &_My_handler::_M_invoke;
 810126a:	687b      	ldr	r3, [r7, #4]
 810126c:	4a04      	ldr	r2, [pc, #16]	@ (8101280 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_vEEOT_+0x58>)
 810126e:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8101270:	687b      	ldr	r3, [r7, #4]
 8101272:	4a04      	ldr	r2, [pc, #16]	@ (8101284 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEC1IZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_vEEOT_+0x5c>)
 8101274:	609a      	str	r2, [r3, #8]
	    }
	}
 8101276:	687b      	ldr	r3, [r7, #4]
 8101278:	4618      	mov	r0, r3
 810127a:	370c      	adds	r7, #12
 810127c:	46bd      	mov	sp, r7
 810127e:	bd90      	pop	{r4, r7, pc}
 8101280:	081012d9 	.word	0x081012d9
 8101284:	08101329 	.word	0x08101329

08101288 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E21_M_not_empty_functionIS5_EEbRKT_>:
	  _M_not_empty_function(const _Tp&) noexcept
 8101288:	b480      	push	{r7}
 810128a:	b083      	sub	sp, #12
 810128c:	af00      	add	r7, sp, #0
 810128e:	6078      	str	r0, [r7, #4]
	  { return true; }
 8101290:	2301      	movs	r3, #1
 8101292:	4618      	mov	r0, r3
 8101294:	370c      	adds	r7, #12
 8101296:	46bd      	mov	sp, r7
 8101298:	f85d 7b04 	ldr.w	r7, [sp], #4
 810129c:	4770      	bx	lr

0810129e <_ZSt7forwardIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810129e:	b480      	push	{r7}
 81012a0:	b083      	sub	sp, #12
 81012a2:	af00      	add	r7, sp, #0
 81012a4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81012a6:	687b      	ldr	r3, [r7, #4]
 81012a8:	4618      	mov	r0, r3
 81012aa:	370c      	adds	r7, #12
 81012ac:	46bd      	mov	sp, r7
 81012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012b2:	4770      	bx	lr

081012b4 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIS5_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 81012b4:	b590      	push	{r4, r7, lr}
 81012b6:	b083      	sub	sp, #12
 81012b8:	af00      	add	r7, sp, #0
 81012ba:	6078      	str	r0, [r7, #4]
 81012bc:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 81012be:	6838      	ldr	r0, [r7, #0]
 81012c0:	f7ff ffed 	bl	810129e <_ZSt7forwardIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 81012c4:	4603      	mov	r3, r0
 81012c6:	4622      	mov	r2, r4
 81012c8:	4619      	mov	r1, r3
 81012ca:	6878      	ldr	r0, [r7, #4]
 81012cc:	f000 f84b 	bl	8101366 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 81012d0:	bf00      	nop
 81012d2:	370c      	adds	r7, #12
 81012d4:	46bd      	mov	sp, r7
 81012d6:	bd90      	pop	{r4, r7, pc}

081012d8 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_E9_M_invokeERKSt9_Any_dataOS0_OS1_OS2_SC_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 81012d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81012dc:	b086      	sub	sp, #24
 81012de:	af02      	add	r7, sp, #8
 81012e0:	60f8      	str	r0, [r7, #12]
 81012e2:	60b9      	str	r1, [r7, #8]
 81012e4:	607a      	str	r2, [r7, #4]
 81012e6:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 81012e8:	68f8      	ldr	r0, [r7, #12]
 81012ea:	f000 f855 	bl	8101398 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 81012ee:	4604      	mov	r4, r0
 81012f0:	68b8      	ldr	r0, [r7, #8]
 81012f2:	f7ff fe87 	bl	8101004 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 81012f6:	4605      	mov	r5, r0
 81012f8:	6878      	ldr	r0, [r7, #4]
 81012fa:	f7ff fe8e 	bl	810101a <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 81012fe:	4606      	mov	r6, r0
 8101300:	6838      	ldr	r0, [r7, #0]
 8101302:	f7ff fe95 	bl	8101030 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8101306:	4680      	mov	r8, r0
 8101308:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810130a:	f7ff fe91 	bl	8101030 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 810130e:	4603      	mov	r3, r0
 8101310:	9300      	str	r3, [sp, #0]
 8101312:	4643      	mov	r3, r8
 8101314:	4632      	mov	r2, r6
 8101316:	4629      	mov	r1, r5
 8101318:	4620      	mov	r0, r4
 810131a:	f000 f84e 	bl	81013ba <_ZSt10__invoke_rIvRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>
				     std::forward<_ArgTypes>(__args)...);
 810131e:	bf00      	nop
      }
 8101320:	3710      	adds	r7, #16
 8101322:	46bd      	mov	sp, r7
 8101324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08101328 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8101328:	b590      	push	{r4, r7, lr}
 810132a:	b085      	sub	sp, #20
 810132c:	af00      	add	r7, sp, #0
 810132e:	60f8      	str	r0, [r7, #12]
 8101330:	60b9      	str	r1, [r7, #8]
 8101332:	4613      	mov	r3, r2
 8101334:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8101336:	79fb      	ldrb	r3, [r7, #7]
 8101338:	2b01      	cmp	r3, #1
 810133a:	d109      	bne.n	8101350 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 810133c:	68f8      	ldr	r0, [r7, #12]
 810133e:	f000 f865 	bl	810140c <_ZNSt9_Any_data9_M_accessIPZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>
 8101342:	4604      	mov	r4, r0
 8101344:	68b8      	ldr	r0, [r7, #8]
 8101346:	f000 f827 	bl	8101398 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 810134a:	4603      	mov	r3, r0
 810134c:	6023      	str	r3, [r4, #0]
	    break;
 810134e:	e005      	b.n	810135c <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientS2_EZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8101350:	79fb      	ldrb	r3, [r7, #7]
 8101352:	461a      	mov	r2, r3
 8101354:	68b9      	ldr	r1, [r7, #8]
 8101356:	68f8      	ldr	r0, [r7, #12]
 8101358:	f000 f864 	bl	8101424 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>
	return false;
 810135c:	2300      	movs	r3, #0
      }
 810135e:	4618      	mov	r0, r3
 8101360:	3714      	adds	r7, #20
 8101362:	46bd      	mov	sp, r7
 8101364:	bd90      	pop	{r4, r7, pc}

08101366 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8101366:	b590      	push	{r4, r7, lr}
 8101368:	b085      	sub	sp, #20
 810136a:	af00      	add	r7, sp, #0
 810136c:	60f8      	str	r0, [r7, #12]
 810136e:	60b9      	str	r1, [r7, #8]
 8101370:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8101372:	68f8      	ldr	r0, [r7, #12]
 8101374:	f7ff fd2c 	bl	8100dd0 <_ZNSt9_Any_data9_M_accessEv>
 8101378:	4603      	mov	r3, r0
 810137a:	4619      	mov	r1, r3
 810137c:	2004      	movs	r0, #4
 810137e:	f7ff fd1b 	bl	8100db8 <_ZnwjPv>
 8101382:	4604      	mov	r4, r0
 8101384:	68b8      	ldr	r0, [r7, #8]
 8101386:	f7ff ff8a 	bl	810129e <_ZSt7forwardIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 810138a:	4603      	mov	r3, r0
 810138c:	681b      	ldr	r3, [r3, #0]
 810138e:	6023      	str	r3, [r4, #0]
	  }
 8101390:	bf00      	nop
 8101392:	3714      	adds	r7, #20
 8101394:	46bd      	mov	sp, r7
 8101396:	bd90      	pop	{r4, r7, pc}

08101398 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 8101398:	b580      	push	{r7, lr}
 810139a:	b084      	sub	sp, #16
 810139c:	af00      	add	r7, sp, #0
 810139e:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 81013a0:	6878      	ldr	r0, [r7, #4]
 81013a2:	f000 f879 	bl	8101498 <_ZNKSt9_Any_data9_M_accessIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERKT_v>
 81013a6:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 81013a8:	68f8      	ldr	r0, [r7, #12]
 81013aa:	f000 f881 	bl	81014b0 <_ZSt11__addressofIKZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EPT_RS6_>
 81013ae:	4603      	mov	r3, r0
 81013b0:	bf00      	nop
	}
 81013b2:	4618      	mov	r0, r3
 81013b4:	3710      	adds	r7, #16
 81013b6:	46bd      	mov	sp, r7
 81013b8:	bd80      	pop	{r7, pc}

081013ba <_ZSt10__invoke_rIvRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 81013ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 81013be:	b087      	sub	sp, #28
 81013c0:	af02      	add	r7, sp, #8
 81013c2:	60f8      	str	r0, [r7, #12]
 81013c4:	60b9      	str	r1, [r7, #8]
 81013c6:	607a      	str	r2, [r7, #4]
 81013c8:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 81013ca:	68f8      	ldr	r0, [r7, #12]
 81013cc:	f000 f87b 	bl	81014c6 <_ZSt7forwardIRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS6_E4typeE>
 81013d0:	4605      	mov	r5, r0
 81013d2:	68b8      	ldr	r0, [r7, #8]
 81013d4:	f7ff fe16 	bl	8101004 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 81013d8:	4606      	mov	r6, r0
 81013da:	6878      	ldr	r0, [r7, #4]
 81013dc:	f7ff fe1d 	bl	810101a <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 81013e0:	4680      	mov	r8, r0
 81013e2:	6838      	ldr	r0, [r7, #0]
 81013e4:	f7ff fe24 	bl	8101030 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 81013e8:	4604      	mov	r4, r0
 81013ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81013ec:	f7ff fe20 	bl	8101030 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 81013f0:	4603      	mov	r3, r0
 81013f2:	9301      	str	r3, [sp, #4]
 81013f4:	9400      	str	r4, [sp, #0]
 81013f6:	4643      	mov	r3, r8
 81013f8:	4632      	mov	r2, r6
 81013fa:	4629      	mov	r1, r5
 81013fc:	4648      	mov	r0, r9
 81013fe:	f000 f86d 	bl	81014dc <_ZSt13__invoke_implIvRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 8101402:	bf00      	nop
 8101404:	3714      	adds	r7, #20
 8101406:	46bd      	mov	sp, r7
 8101408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0810140c <_ZNSt9_Any_data9_M_accessIPZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>:
      _M_access() noexcept
 810140c:	b580      	push	{r7, lr}
 810140e:	b082      	sub	sp, #8
 8101410:	af00      	add	r7, sp, #0
 8101412:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8101414:	6878      	ldr	r0, [r7, #4]
 8101416:	f7ff fcdb 	bl	8100dd0 <_ZNSt9_Any_data9_M_accessEv>
 810141a:	4603      	mov	r3, r0
 810141c:	4618      	mov	r0, r3
 810141e:	3708      	adds	r7, #8
 8101420:	46bd      	mov	sp, r7
 8101422:	bd80      	pop	{r7, pc}

08101424 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8101424:	b590      	push	{r4, r7, lr}
 8101426:	b085      	sub	sp, #20
 8101428:	af00      	add	r7, sp, #0
 810142a:	60f8      	str	r0, [r7, #12]
 810142c:	60b9      	str	r1, [r7, #8]
 810142e:	4613      	mov	r3, r2
 8101430:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8101432:	79fb      	ldrb	r3, [r7, #7]
 8101434:	2b03      	cmp	r3, #3
 8101436:	d82a      	bhi.n	810148e <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
 8101438:	a201      	add	r2, pc, #4	@ (adr r2, 8101440 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x1c>)
 810143a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810143e:	bf00      	nop
 8101440:	08101451 	.word	0x08101451
 8101444:	0810145f 	.word	0x0810145f
 8101448:	08101473 	.word	0x08101473
 810144c:	08101485 	.word	0x08101485
	      __dest._M_access<const type_info*>() = nullptr;
 8101450:	68f8      	ldr	r0, [r7, #12]
 8101452:	f7ff fdf8 	bl	8101046 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8101456:	4603      	mov	r3, r0
 8101458:	2200      	movs	r2, #0
 810145a:	601a      	str	r2, [r3, #0]
	      break;
 810145c:	e017      	b.n	810148e <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 810145e:	68f8      	ldr	r0, [r7, #12]
 8101460:	f7ff ffd4 	bl	810140c <_ZNSt9_Any_data9_M_accessIPZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>
 8101464:	4604      	mov	r4, r0
 8101466:	68b8      	ldr	r0, [r7, #8]
 8101468:	f7ff ff96 	bl	8101398 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 810146c:	4603      	mov	r3, r0
 810146e:	6023      	str	r3, [r4, #0]
	      break;
 8101470:	e00d      	b.n	810148e <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8101472:	68b8      	ldr	r0, [r7, #8]
 8101474:	f7ff ff90 	bl	8101398 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E14_M_get_pointerERKSt9_Any_data>
 8101478:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 810147a:	4619      	mov	r1, r3
 810147c:	68f8      	ldr	r0, [r7, #12]
 810147e:	f000 f860 	bl	8101542 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIRKS5_EEvRSt9_Any_dataOT_>
	      break;
 8101482:	e004      	b.n	810148e <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8101484:	4621      	mov	r1, r4
 8101486:	68f8      	ldr	r0, [r7, #12]
 8101488:	f000 f86d 	bl	8101566 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 810148c:	bf00      	nop
	  return false;
 810148e:	2300      	movs	r3, #0
	}
 8101490:	4618      	mov	r0, r3
 8101492:	3714      	adds	r7, #20
 8101494:	46bd      	mov	sp, r7
 8101496:	bd90      	pop	{r4, r7, pc}

08101498 <_ZNKSt9_Any_data9_M_accessIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERKT_v>:
      _M_access() const noexcept
 8101498:	b580      	push	{r7, lr}
 810149a:	b082      	sub	sp, #8
 810149c:	af00      	add	r7, sp, #0
 810149e:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 81014a0:	6878      	ldr	r0, [r7, #4]
 81014a2:	f7ff fca0 	bl	8100de6 <_ZNKSt9_Any_data9_M_accessEv>
 81014a6:	4603      	mov	r3, r0
 81014a8:	4618      	mov	r0, r3
 81014aa:	3708      	adds	r7, #8
 81014ac:	46bd      	mov	sp, r7
 81014ae:	bd80      	pop	{r7, pc}

081014b0 <_ZSt11__addressofIKZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 81014b0:	b480      	push	{r7}
 81014b2:	b083      	sub	sp, #12
 81014b4:	af00      	add	r7, sp, #0
 81014b6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 81014b8:	687b      	ldr	r3, [r7, #4]
 81014ba:	4618      	mov	r0, r3
 81014bc:	370c      	adds	r7, #12
 81014be:	46bd      	mov	sp, r7
 81014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014c4:	4770      	bx	lr

081014c6 <_ZSt7forwardIRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81014c6:	b480      	push	{r7}
 81014c8:	b083      	sub	sp, #12
 81014ca:	af00      	add	r7, sp, #0
 81014cc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81014ce:	687b      	ldr	r3, [r7, #4]
 81014d0:	4618      	mov	r0, r3
 81014d2:	370c      	adds	r7, #12
 81014d4:	46bd      	mov	sp, r7
 81014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014da:	4770      	bx	lr

081014dc <_ZSt13__invoke_implIvRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_JS1_S2_S3_S3_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 81014dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81014e0:	b088      	sub	sp, #32
 81014e2:	af04      	add	r7, sp, #16
 81014e4:	7338      	strb	r0, [r7, #12]
 81014e6:	60b9      	str	r1, [r7, #8]
 81014e8:	607a      	str	r2, [r7, #4]
 81014ea:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 81014ec:	68b8      	ldr	r0, [r7, #8]
 81014ee:	f7ff ffea 	bl	81014c6 <_ZSt7forwardIRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS6_E4typeE>
 81014f2:	4680      	mov	r8, r0
 81014f4:	6878      	ldr	r0, [r7, #4]
 81014f6:	f7ff fd85 	bl	8101004 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 81014fa:	4603      	mov	r3, r0
 81014fc:	881e      	ldrh	r6, [r3, #0]
 81014fe:	6838      	ldr	r0, [r7, #0]
 8101500:	f7ff fd8b 	bl	810101a <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8101504:	4604      	mov	r4, r0
 8101506:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8101508:	f7ff fd92 	bl	8101030 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 810150c:	4603      	mov	r3, r0
 810150e:	781d      	ldrb	r5, [r3, #0]
 8101510:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8101512:	f7ff fd8d 	bl	8101030 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8101516:	4603      	mov	r3, r0
 8101518:	781b      	ldrb	r3, [r3, #0]
 810151a:	9303      	str	r3, [sp, #12]
 810151c:	9502      	str	r5, [sp, #8]
 810151e:	466a      	mov	r2, sp
 8101520:	f104 0308 	add.w	r3, r4, #8
 8101524:	e893 0003 	ldmia.w	r3, {r0, r1}
 8101528:	e882 0003 	stmia.w	r2, {r0, r1}
 810152c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8101530:	4631      	mov	r1, r6
 8101532:	4640      	mov	r0, r8
 8101534:	f7ff fe2e 	bl	8101194 <_ZZN23EdiabasDaemonNativeTask7processEvENKUl10EEventType12UMessageData12EEventClientS2_E_clES0_S1_S2_S2_>
 8101538:	bf00      	nop
 810153a:	3710      	adds	r7, #16
 810153c:	46bd      	mov	sp, r7
 810153e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08101542 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E15_M_init_functorIRKS5_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8101542:	b590      	push	{r4, r7, lr}
 8101544:	b083      	sub	sp, #12
 8101546:	af00      	add	r7, sp, #0
 8101548:	6078      	str	r0, [r7, #4]
 810154a:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 810154c:	6838      	ldr	r0, [r7, #0]
 810154e:	f000 f816 	bl	810157e <_ZSt7forwardIRKZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS7_E4typeE>
 8101552:	4603      	mov	r3, r0
 8101554:	4622      	mov	r2, r4
 8101556:	4619      	mov	r1, r3
 8101558:	6878      	ldr	r0, [r7, #4]
 810155a:	f000 f81b 	bl	8101594 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIRKS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 810155e:	bf00      	nop
 8101560:	370c      	adds	r7, #12
 8101562:	46bd      	mov	sp, r7
 8101564:	bd90      	pop	{r4, r7, pc}

08101566 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8101566:	b580      	push	{r7, lr}
 8101568:	b082      	sub	sp, #8
 810156a:	af00      	add	r7, sp, #0
 810156c:	6078      	str	r0, [r7, #4]
 810156e:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8101570:	6878      	ldr	r0, [r7, #4]
 8101572:	f000 f828 	bl	81015c6 <_ZNSt9_Any_data9_M_accessIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>
	}
 8101576:	bf00      	nop
 8101578:	3708      	adds	r7, #8
 810157a:	46bd      	mov	sp, r7
 810157c:	bd80      	pop	{r7, pc}

0810157e <_ZSt7forwardIRKZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810157e:	b480      	push	{r7}
 8101580:	b083      	sub	sp, #12
 8101582:	af00      	add	r7, sp, #0
 8101584:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8101586:	687b      	ldr	r3, [r7, #4]
 8101588:	4618      	mov	r0, r3
 810158a:	370c      	adds	r7, #12
 810158c:	46bd      	mov	sp, r7
 810158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101592:	4770      	bx	lr

08101594 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_E9_M_createIRKS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8101594:	b590      	push	{r4, r7, lr}
 8101596:	b085      	sub	sp, #20
 8101598:	af00      	add	r7, sp, #0
 810159a:	60f8      	str	r0, [r7, #12]
 810159c:	60b9      	str	r1, [r7, #8]
 810159e:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 81015a0:	68f8      	ldr	r0, [r7, #12]
 81015a2:	f7ff fc15 	bl	8100dd0 <_ZNSt9_Any_data9_M_accessEv>
 81015a6:	4603      	mov	r3, r0
 81015a8:	4619      	mov	r1, r3
 81015aa:	2004      	movs	r0, #4
 81015ac:	f7ff fc04 	bl	8100db8 <_ZnwjPv>
 81015b0:	4604      	mov	r4, r0
 81015b2:	68b8      	ldr	r0, [r7, #8]
 81015b4:	f7ff ffe3 	bl	810157e <_ZSt7forwardIRKZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS3_E_EOT_RNSt16remove_referenceIS7_E4typeE>
 81015b8:	4603      	mov	r3, r0
 81015ba:	681b      	ldr	r3, [r3, #0]
 81015bc:	6023      	str	r3, [r4, #0]
	  }
 81015be:	bf00      	nop
 81015c0:	3714      	adds	r7, #20
 81015c2:	46bd      	mov	sp, r7
 81015c4:	bd90      	pop	{r4, r7, pc}

081015c6 <_ZNSt9_Any_data9_M_accessIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientS4_E_EERT_v>:
      _M_access() noexcept
 81015c6:	b580      	push	{r7, lr}
 81015c8:	b082      	sub	sp, #8
 81015ca:	af00      	add	r7, sp, #0
 81015cc:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 81015ce:	6878      	ldr	r0, [r7, #4]
 81015d0:	f7ff fbfe 	bl	8100dd0 <_ZNSt9_Any_data9_M_accessEv>
 81015d4:	4603      	mov	r3, r0
 81015d6:	4618      	mov	r0, r3
 81015d8:	3708      	adds	r7, #8
 81015da:	46bd      	mov	sp, r7
 81015dc:	bd80      	pop	{r7, pc}

081015de <_ZNKSt14_Function_base8_M_emptyEv>:
    bool _M_empty() const { return !_M_manager; }
 81015de:	b480      	push	{r7}
 81015e0:	b083      	sub	sp, #12
 81015e2:	af00      	add	r7, sp, #0
 81015e4:	6078      	str	r0, [r7, #4]
 81015e6:	687b      	ldr	r3, [r7, #4]
 81015e8:	689b      	ldr	r3, [r3, #8]
 81015ea:	2b00      	cmp	r3, #0
 81015ec:	bf0c      	ite	eq
 81015ee:	2301      	moveq	r3, #1
 81015f0:	2300      	movne	r3, #0
 81015f2:	b2db      	uxtb	r3, r3
 81015f4:	4618      	mov	r0, r3
 81015f6:	370c      	adds	r7, #12
 81015f8:	46bd      	mov	sp, r7
 81015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015fe:	4770      	bx	lr

08101600 <_ZN8EventBusC1EP15QueueDefinition12EEventClient>:
#include "EventBus.h"

extern QueueHandle_t queueToEventManagerCM4;

EventBus::EventBus(QueueHandle_t queueSelf, EEventClient senderSelf)
 8101600:	b480      	push	{r7}
 8101602:	b085      	sub	sp, #20
 8101604:	af00      	add	r7, sp, #0
 8101606:	60f8      	str	r0, [r7, #12]
 8101608:	60b9      	str	r1, [r7, #8]
 810160a:	4613      	mov	r3, r2
 810160c:	71fb      	strb	r3, [r7, #7]
					 : queue_self(queueSelf),
 810160e:	68fb      	ldr	r3, [r7, #12]
 8101610:	68ba      	ldr	r2, [r7, #8]
 8101612:	601a      	str	r2, [r3, #0]
					   sender_self(senderSelf),
 8101614:	68fb      	ldr	r3, [r7, #12]
 8101616:	79fa      	ldrb	r2, [r7, #7]
 8101618:	711a      	strb	r2, [r3, #4]
					   queue_event_manager(queueToEventManagerCM4){}
 810161a:	4b05      	ldr	r3, [pc, #20]	@ (8101630 <_ZN8EventBusC1EP15QueueDefinition12EEventClient+0x30>)
 810161c:	681a      	ldr	r2, [r3, #0]
 810161e:	68fb      	ldr	r3, [r7, #12]
 8101620:	609a      	str	r2, [r3, #8]
 8101622:	68fb      	ldr	r3, [r7, #12]
 8101624:	4618      	mov	r0, r3
 8101626:	3714      	adds	r7, #20
 8101628:	46bd      	mov	sp, r7
 810162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810162e:	4770      	bx	lr
 8101630:	10000110 	.word	0x10000110

08101634 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient>:

bool EventBus::send(EEventType event, UMessageData message, EEventClient eventReceiver)
{
 8101634:	b082      	sub	sp, #8
 8101636:	b590      	push	{r4, r7, lr}
 8101638:	b08b      	sub	sp, #44	@ 0x2c
 810163a:	af00      	add	r7, sp, #0
 810163c:	6078      	str	r0, [r7, #4]
 810163e:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8101642:	e880 000c 	stmia.w	r0, {r2, r3}
 8101646:	460b      	mov	r3, r1
 8101648:	807b      	strh	r3, [r7, #2]
	if(queue_event_manager)
 810164a:	687b      	ldr	r3, [r7, #4]
 810164c:	689b      	ldr	r3, [r3, #8]
 810164e:	2b00      	cmp	r3, #0
 8101650:	d020      	beq.n	8101694 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient+0x60>
	{
		SMessage msg = {event, message, sender_self, eventReceiver};
 8101652:	887b      	ldrh	r3, [r7, #2]
 8101654:	81bb      	strh	r3, [r7, #12]
 8101656:	f107 0410 	add.w	r4, r7, #16
 810165a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 810165e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8101660:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101664:	687b      	ldr	r3, [r7, #4]
 8101666:	791b      	ldrb	r3, [r3, #4]
 8101668:	f887 3020 	strb.w	r3, [r7, #32]
 810166c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8101670:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
		BaseType_t ret = xQueueSend(queue_event_manager, static_cast<void*>(&msg), static_cast<TickType_t>(10));
 8101674:	687b      	ldr	r3, [r7, #4]
 8101676:	6898      	ldr	r0, [r3, #8]
 8101678:	f107 010c 	add.w	r1, r7, #12
 810167c:	2300      	movs	r3, #0
 810167e:	220a      	movs	r2, #10
 8101680:	f00c f9b0 	bl	810d9e4 <xQueueGenericSend>
 8101684:	6278      	str	r0, [r7, #36]	@ 0x24
		if( ret != pdPASS)
 8101686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101688:	2b01      	cmp	r3, #1
 810168a:	d001      	beq.n	8101690 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient+0x5c>
		{
			return false;
 810168c:	2300      	movs	r3, #0
 810168e:	e002      	b.n	8101696 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient+0x62>
		}
		return true;
 8101690:	2301      	movs	r3, #1
 8101692:	e000      	b.n	8101696 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient+0x62>
	}
	return false;
 8101694:	2300      	movs	r3, #0
}
 8101696:	4618      	mov	r0, r3
 8101698:	372c      	adds	r7, #44	@ 0x2c
 810169a:	46bd      	mov	sp, r7
 810169c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 81016a0:	b002      	add	sp, #8
 81016a2:	4770      	bx	lr

081016a4 <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE>:

void EventBus::receive(OnEventFunction on_event_function)
{
 81016a4:	b590      	push	{r4, r7, lr}
 81016a6:	b08f      	sub	sp, #60	@ 0x3c
 81016a8:	af04      	add	r7, sp, #16
 81016aa:	6078      	str	r0, [r7, #4]
 81016ac:	6039      	str	r1, [r7, #0]
	if(queue_self)
 81016ae:	687b      	ldr	r3, [r7, #4]
 81016b0:	681b      	ldr	r3, [r3, #0]
 81016b2:	2b00      	cmp	r3, #0
 81016b4:	d027      	beq.n	8101706 <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE+0x62>
	{
		SMessage msg;
		BaseType_t ret = pdTRUE;
 81016b6:	2301      	movs	r3, #1
 81016b8:	627b      	str	r3, [r7, #36]	@ 0x24

		while(xQueueReceive(queue_self, &(msg), static_cast<TickType_t>(0)) == pdTRUE)
 81016ba:	e014      	b.n	81016e6 <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE+0x42>
		{
			on_event_function(msg.event_type, msg.message_data, msg.event_sender, msg.event_receiver);
 81016bc:	89bc      	ldrh	r4, [r7, #12]
 81016be:	f897 3020 	ldrb.w	r3, [r7, #32]
 81016c2:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 81016c6:	9203      	str	r2, [sp, #12]
 81016c8:	9302      	str	r3, [sp, #8]
 81016ca:	466a      	mov	r2, sp
 81016cc:	f107 0318 	add.w	r3, r7, #24
 81016d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 81016d4:	e882 0003 	stmia.w	r2, {r0, r1}
 81016d8:	f107 0310 	add.w	r3, r7, #16
 81016dc:	cb0c      	ldmia	r3, {r2, r3}
 81016de:	4621      	mov	r1, r4
 81016e0:	6838      	ldr	r0, [r7, #0]
 81016e2:	f000 f814 	bl	810170e <_ZNKSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEclES0_S1_S2_S2_>
		while(xQueueReceive(queue_self, &(msg), static_cast<TickType_t>(0)) == pdTRUE)
 81016e6:	687b      	ldr	r3, [r7, #4]
 81016e8:	681b      	ldr	r3, [r3, #0]
 81016ea:	f107 010c 	add.w	r1, r7, #12
 81016ee:	2200      	movs	r2, #0
 81016f0:	4618      	mov	r0, r3
 81016f2:	f00c fba7 	bl	810de44 <xQueueReceive>
 81016f6:	4603      	mov	r3, r0
 81016f8:	2b01      	cmp	r3, #1
 81016fa:	bf0c      	ite	eq
 81016fc:	2301      	moveq	r3, #1
 81016fe:	2300      	movne	r3, #0
 8101700:	b2db      	uxtb	r3, r3
 8101702:	2b00      	cmp	r3, #0
 8101704:	d1da      	bne.n	81016bc <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientS3_EE+0x18>
		}
	}
}
 8101706:	bf00      	nop
 8101708:	372c      	adds	r7, #44	@ 0x2c
 810170a:	46bd      	mov	sp, r7
 810170c:	bd90      	pop	{r4, r7, pc}

0810170e <_ZNKSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEclES0_S1_S2_S2_>:
       *
       *  The function call operator invokes the target function object
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
 810170e:	b082      	sub	sp, #8
 8101710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8101714:	b085      	sub	sp, #20
 8101716:	af02      	add	r7, sp, #8
 8101718:	6078      	str	r0, [r7, #4]
 810171a:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 810171e:	e880 000c 	stmia.w	r0, {r2, r3}
 8101722:	460b      	mov	r3, r1
 8101724:	807b      	strh	r3, [r7, #2]
      {
	if (_M_empty())
 8101726:	687b      	ldr	r3, [r7, #4]
 8101728:	4618      	mov	r0, r3
 810172a:	f7ff ff58 	bl	81015de <_ZNKSt14_Function_base8_M_emptyEv>
 810172e:	4603      	mov	r3, r0
 8101730:	2b00      	cmp	r3, #0
 8101732:	d001      	beq.n	8101738 <_ZNKSt8functionIFv10EEventType12UMessageData12EEventClientS2_EEclES0_S1_S2_S2_+0x2a>
	  __throw_bad_function_call();
 8101734:	f01a f993 	bl	811ba5e <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8101738:	687b      	ldr	r3, [r7, #4]
 810173a:	68dc      	ldr	r4, [r3, #12]
 810173c:	687d      	ldr	r5, [r7, #4]
 810173e:	1cbb      	adds	r3, r7, #2
 8101740:	4618      	mov	r0, r3
 8101742:	f7ff fc5f 	bl	8101004 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8101746:	4606      	mov	r6, r0
 8101748:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 810174c:	f7ff fc65 	bl	810101a <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8101750:	4680      	mov	r8, r0
 8101752:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8101756:	4618      	mov	r0, r3
 8101758:	f7ff fc6a 	bl	8101030 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 810175c:	4681      	mov	r9, r0
 810175e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8101762:	4618      	mov	r0, r3
 8101764:	f7ff fc64 	bl	8101030 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8101768:	4603      	mov	r3, r0
 810176a:	9300      	str	r3, [sp, #0]
 810176c:	464b      	mov	r3, r9
 810176e:	4642      	mov	r2, r8
 8101770:	4631      	mov	r1, r6
 8101772:	4628      	mov	r0, r5
 8101774:	47a0      	blx	r4
 8101776:	bf00      	nop
      }
 8101778:	370c      	adds	r7, #12
 810177a:	46bd      	mov	sp, r7
 810177c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8101780:	b002      	add	sp, #8
 8101782:	4770      	bx	lr

08101784 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8101784:	b580      	push	{r7, lr}
 8101786:	b082      	sub	sp, #8
 8101788:	af00      	add	r7, sp, #0
 810178a:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 810178c:	687b      	ldr	r3, [r7, #4]
 810178e:	2200      	movs	r2, #0
 8101790:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8101792:	6878      	ldr	r0, [r7, #4]
 8101794:	f000 f805 	bl	81017a2 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 8101798:	687b      	ldr	r3, [r7, #4]
 810179a:	4618      	mov	r0, r3
 810179c:	3708      	adds	r7, #8
 810179e:	46bd      	mov	sp, r7
 81017a0:	bd80      	pop	{r7, pc}

081017a2 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 81017a2:	b480      	push	{r7}
 81017a4:	b083      	sub	sp, #12
 81017a6:	af00      	add	r7, sp, #0
 81017a8:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 81017aa:	687b      	ldr	r3, [r7, #4]
 81017ac:	2200      	movs	r2, #0
 81017ae:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 81017b0:	687a      	ldr	r2, [r7, #4]
 81017b2:	687b      	ldr	r3, [r7, #4]
 81017b4:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 81017b6:	687a      	ldr	r2, [r7, #4]
 81017b8:	687b      	ldr	r3, [r7, #4]
 81017ba:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 81017bc:	687b      	ldr	r3, [r7, #4]
 81017be:	2200      	movs	r2, #0
 81017c0:	611a      	str	r2, [r3, #16]
    }
 81017c2:	bf00      	nop
 81017c4:	370c      	adds	r7, #12
 81017c6:	46bd      	mov	sp, r7
 81017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017cc:	4770      	bx	lr

081017ce <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 81017ce:	b580      	push	{r7, lr}
 81017d0:	b082      	sub	sp, #8
 81017d2:	af00      	add	r7, sp, #0
 81017d4:	6078      	str	r0, [r7, #4]
 81017d6:	687b      	ldr	r3, [r7, #4]
 81017d8:	4618      	mov	r0, r3
 81017da:	f000 f92b 	bl	8101a34 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 81017de:	687b      	ldr	r3, [r7, #4]
 81017e0:	4618      	mov	r0, r3
 81017e2:	3708      	adds	r7, #8
 81017e4:	46bd      	mov	sp, r7
 81017e6:	bd80      	pop	{r7, pc}

081017e8 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 81017e8:	b580      	push	{r7, lr}
 81017ea:	b082      	sub	sp, #8
 81017ec:	af00      	add	r7, sp, #0
 81017ee:	6078      	str	r0, [r7, #4]
 81017f0:	687b      	ldr	r3, [r7, #4]
 81017f2:	4618      	mov	r0, r3
 81017f4:	f7ff ffeb 	bl	81017ce <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 81017f8:	687b      	ldr	r3, [r7, #4]
 81017fa:	4618      	mov	r0, r3
 81017fc:	3708      	adds	r7, #8
 81017fe:	46bd      	mov	sp, r7
 8101800:	bd80      	pop	{r7, pc}

08101802 <_ZN19EventManagerCM4TaskC1Ev>:
	{
		/* event queues of clients */
		EVENT_QUEUE_DAEMON_NATIVE = EVENT_CLIENT_DAEMON_NATIVE,
	};

	EventManagerCM4Task() {};
 8101802:	b580      	push	{r7, lr}
 8101804:	b082      	sub	sp, #8
 8101806:	af00      	add	r7, sp, #0
 8101808:	6078      	str	r0, [r7, #4]
 810180a:	687b      	ldr	r3, [r7, #4]
 810180c:	4618      	mov	r0, r3
 810180e:	f7ff ffeb 	bl	81017e8 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 8101812:	687b      	ldr	r3, [r7, #4]
 8101814:	4618      	mov	r0, r3
 8101816:	3708      	adds	r7, #8
 8101818:	46bd      	mov	sp, r7
 810181a:	bd80      	pop	{r7, pc}

0810181c <_Z20StartTask_EventMgrM4Pv>:

extern QueueHandle_t queueToEventManagerCM4;
extern QueueHandle_t queueToNativeDaemon;

void StartTask_EventMgrM4(void *argument)
{
 810181c:	b580      	push	{r7, lr}
 810181e:	b088      	sub	sp, #32
 8101820:	af00      	add	r7, sp, #0
 8101822:	6078      	str	r0, [r7, #4]
	EventManagerCM4Task eventManagerInstance;
 8101824:	f107 0308 	add.w	r3, r7, #8
 8101828:	4618      	mov	r0, r3
 810182a:	f7ff ffea 	bl	8101802 <_ZN19EventManagerCM4TaskC1Ev>
	eventManagerInstance.addQueue(EventManagerCM4Task::EVENT_QUEUE_DAEMON_NATIVE, queueToNativeDaemon);
 810182e:	4b09      	ldr	r3, [pc, #36]	@ (8101854 <_Z20StartTask_EventMgrM4Pv+0x38>)
 8101830:	681a      	ldr	r2, [r3, #0]
 8101832:	f107 0308 	add.w	r3, r7, #8
 8101836:	2105      	movs	r1, #5
 8101838:	4618      	mov	r0, r3
 810183a:	f000 f80d 	bl	8101858 <_ZN19EventManagerCM4Task8addQueueENS_11EEventQueueEP15QueueDefinition>

	for(;;)
	{
		eventManagerInstance.process();
 810183e:	f107 0308 	add.w	r3, r7, #8
 8101842:	4618      	mov	r0, r3
 8101844:	f000 f81b 	bl	810187e <_ZN19EventManagerCM4Task7processEv>
		osDelay(1);
 8101848:	2001      	movs	r0, #1
 810184a:	f00a fdb8 	bl	810c3be <osDelay>
		eventManagerInstance.process();
 810184e:	bf00      	nop
 8101850:	e7f5      	b.n	810183e <_Z20StartTask_EventMgrM4Pv+0x22>
 8101852:	bf00      	nop
 8101854:	10000114 	.word	0x10000114

08101858 <_ZN19EventManagerCM4Task8addQueueENS_11EEventQueueEP15QueueDefinition>:
	}
}


void EventManagerCM4Task::addQueue(EEventQueue eventClient, QueueHandle_t queueHandle)
{
 8101858:	b580      	push	{r7, lr}
 810185a:	b086      	sub	sp, #24
 810185c:	af00      	add	r7, sp, #0
 810185e:	60f8      	str	r0, [r7, #12]
 8101860:	460b      	mov	r3, r1
 8101862:	607a      	str	r2, [r7, #4]
 8101864:	72fb      	strb	r3, [r7, #11]
	queue_handles.emplace(eventClient, queueHandle);
 8101866:	68f9      	ldr	r1, [r7, #12]
 8101868:	f107 0010 	add.w	r0, r7, #16
 810186c:	1d3b      	adds	r3, r7, #4
 810186e:	f107 020b 	add.w	r2, r7, #11
 8101872:	f000 f8f4 	bl	8101a5e <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_>
}
 8101876:	bf00      	nop
 8101878:	3718      	adds	r7, #24
 810187a:	46bd      	mov	sp, r7
 810187c:	bd80      	pop	{r7, pc}

0810187e <_ZN19EventManagerCM4Task7processEv>:
	queue_handles.erase(eventClient);
}


void EventManagerCM4Task::process()
{
 810187e:	b580      	push	{r7, lr}
 8101880:	b086      	sub	sp, #24
 8101882:	af00      	add	r7, sp, #0
 8101884:	6078      	str	r0, [r7, #4]
	send(receive());
 8101886:	f107 030c 	add.w	r3, r7, #12
 810188a:	6879      	ldr	r1, [r7, #4]
 810188c:	4618      	mov	r0, r3
 810188e:	f000 f835 	bl	81018fc <_ZN19EventManagerCM4Task7receiveEv>
 8101892:	f107 030c 	add.w	r3, r7, #12
 8101896:	4619      	mov	r1, r3
 8101898:	6878      	ldr	r0, [r7, #4]
 810189a:	f000 f855 	bl	8101948 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE>
 810189e:	f107 030c 	add.w	r3, r7, #12
 81018a2:	4618      	mov	r0, r3
 81018a4:	f000 f8f5 	bl	8101a92 <_ZNSt6vectorI8SMessageSaIS0_EED1Ev>
}
 81018a8:	bf00      	nop
 81018aa:	3718      	adds	r7, #24
 81018ac:	46bd      	mov	sp, r7
 81018ae:	bd80      	pop	{r7, pc}

081018b0 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 81018b0:	b580      	push	{r7, lr}
 81018b2:	b082      	sub	sp, #8
 81018b4:	af00      	add	r7, sp, #0
 81018b6:	6078      	str	r0, [r7, #4]
 81018b8:	6878      	ldr	r0, [r7, #4]
 81018ba:	f000 f915 	bl	8101ae8 <_ZNSaI8SMessageED1Ev>
 81018be:	687b      	ldr	r3, [r7, #4]
 81018c0:	4618      	mov	r0, r3
 81018c2:	3708      	adds	r7, #8
 81018c4:	46bd      	mov	sp, r7
 81018c6:	bd80      	pop	{r7, pc}

081018c8 <_ZNSt12_Vector_baseI8SMessageSaIS0_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 81018c8:	b580      	push	{r7, lr}
 81018ca:	b082      	sub	sp, #8
 81018cc:	af00      	add	r7, sp, #0
 81018ce:	6078      	str	r0, [r7, #4]
 81018d0:	687b      	ldr	r3, [r7, #4]
 81018d2:	4618      	mov	r0, r3
 81018d4:	f000 f8f8 	bl	8101ac8 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implC1Ev>
 81018d8:	687b      	ldr	r3, [r7, #4]
 81018da:	4618      	mov	r0, r3
 81018dc:	3708      	adds	r7, #8
 81018de:	46bd      	mov	sp, r7
 81018e0:	bd80      	pop	{r7, pc}

081018e2 <_ZNSt6vectorI8SMessageSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 81018e2:	b580      	push	{r7, lr}
 81018e4:	b082      	sub	sp, #8
 81018e6:	af00      	add	r7, sp, #0
 81018e8:	6078      	str	r0, [r7, #4]
 81018ea:	687b      	ldr	r3, [r7, #4]
 81018ec:	4618      	mov	r0, r3
 81018ee:	f7ff ffeb 	bl	81018c8 <_ZNSt12_Vector_baseI8SMessageSaIS0_EEC1Ev>
 81018f2:	687b      	ldr	r3, [r7, #4]
 81018f4:	4618      	mov	r0, r3
 81018f6:	3708      	adds	r7, #8
 81018f8:	46bd      	mov	sp, r7
 81018fa:	bd80      	pop	{r7, pc}

081018fc <_ZN19EventManagerCM4Task7receiveEv>:

std::vector<SMessage> EventManagerCM4Task::receive()
{
 81018fc:	b580      	push	{r7, lr}
 81018fe:	b08a      	sub	sp, #40	@ 0x28
 8101900:	af00      	add	r7, sp, #0
 8101902:	6078      	str	r0, [r7, #4]
 8101904:	6039      	str	r1, [r7, #0]
	std::vector<SMessage> receivedMessages;
 8101906:	6878      	ldr	r0, [r7, #4]
 8101908:	f7ff ffeb 	bl	81018e2 <_ZNSt6vectorI8SMessageSaIS0_EEC1Ev>
	SMessage msg;

	BaseType_t ret = pdTRUE;
 810190c:	2301      	movs	r3, #1
 810190e:	627b      	str	r3, [r7, #36]	@ 0x24
	do
	{
		ret = xQueueReceive(queueToEventManagerCM4, &(msg), static_cast<TickType_t>(0));
 8101910:	4b0c      	ldr	r3, [pc, #48]	@ (8101944 <_ZN19EventManagerCM4Task7receiveEv+0x48>)
 8101912:	681b      	ldr	r3, [r3, #0]
 8101914:	f107 010c 	add.w	r1, r7, #12
 8101918:	2200      	movs	r2, #0
 810191a:	4618      	mov	r0, r3
 810191c:	f00c fa92 	bl	810de44 <xQueueReceive>
 8101920:	6278      	str	r0, [r7, #36]	@ 0x24
		if(ret == pdTRUE)
 8101922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101924:	2b01      	cmp	r3, #1
 8101926:	d105      	bne.n	8101934 <_ZN19EventManagerCM4Task7receiveEv+0x38>
		{
			receivedMessages.push_back(msg);
 8101928:	f107 030c 	add.w	r3, r7, #12
 810192c:	4619      	mov	r1, r3
 810192e:	6878      	ldr	r0, [r7, #4]
 8101930:	f000 f904 	bl	8101b3c <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_>
		}
	} while(ret == pdTRUE);
 8101934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101936:	2b01      	cmp	r3, #1
 8101938:	d0ea      	beq.n	8101910 <_ZN19EventManagerCM4Task7receiveEv+0x14>

	return receivedMessages;
 810193a:	bf00      	nop
}
 810193c:	6878      	ldr	r0, [r7, #4]
 810193e:	3728      	adds	r7, #40	@ 0x28
 8101940:	46bd      	mov	sp, r7
 8101942:	bd80      	pop	{r7, pc}
 8101944:	10000110 	.word	0x10000110

08101948 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE>:

void EventManagerCM4Task::send(const std::vector<SMessage>& messages)
{
 8101948:	b5b0      	push	{r4, r5, r7, lr}
 810194a:	b090      	sub	sp, #64	@ 0x40
 810194c:	af00      	add	r7, sp, #0
 810194e:	6078      	str	r0, [r7, #4]
 8101950:	6039      	str	r1, [r7, #0]
	for(auto msg : messages)
 8101952:	683b      	ldr	r3, [r7, #0]
 8101954:	63bb      	str	r3, [r7, #56]	@ 0x38
 8101956:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8101958:	f000 f916 	bl	8101b88 <_ZNKSt6vectorI8SMessageSaIS0_EE5beginEv>
 810195c:	4603      	mov	r3, r0
 810195e:	617b      	str	r3, [r7, #20]
 8101960:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8101962:	f000 f921 	bl	8101ba8 <_ZNKSt6vectorI8SMessageSaIS0_EE3endEv>
 8101966:	4603      	mov	r3, r0
 8101968:	613b      	str	r3, [r7, #16]
 810196a:	e053      	b.n	8101a14 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0xcc>
 810196c:	f107 0314 	add.w	r3, r7, #20
 8101970:	4618      	mov	r0, r3
 8101972:	f000 f953 	bl	8101c1c <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEdeEv>
 8101976:	4603      	mov	r3, r0
 8101978:	f107 0418 	add.w	r4, r7, #24
 810197c:	461d      	mov	r5, r3
 810197e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101980:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101982:	e895 0003 	ldmia.w	r5, {r0, r1}
 8101986:	e884 0003 	stmia.w	r4, {r0, r1}
	{
		auto eventReceiver = static_cast<EEventQueue>(msg.event_receiver);
 810198a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 810198e:	73fb      	strb	r3, [r7, #15]
		auto it = queue_handles.find(eventReceiver);
 8101990:	687b      	ldr	r3, [r7, #4]
 8101992:	f107 020f 	add.w	r2, r7, #15
 8101996:	4611      	mov	r1, r2
 8101998:	4618      	mov	r0, r3
 810199a:	f000 f94b 	bl	8101c34 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>
 810199e:	4603      	mov	r3, r0
 81019a0:	60bb      	str	r3, [r7, #8]

		QueueHandle_t targetQueue;

		if(it != queue_handles.end())
 81019a2:	687b      	ldr	r3, [r7, #4]
 81019a4:	4618      	mov	r0, r3
 81019a6:	f000 f954 	bl	8101c52 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 81019aa:	4603      	mov	r3, r0
 81019ac:	633b      	str	r3, [r7, #48]	@ 0x30
 81019ae:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 81019b2:	f107 0308 	add.w	r3, r7, #8
 81019b6:	4611      	mov	r1, r2
 81019b8:	4618      	mov	r0, r3
 81019ba:	f000 f957 	bl	8101c6c <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 81019be:	4603      	mov	r3, r0
 81019c0:	2b00      	cmp	r3, #0
 81019c2:	d00a      	beq.n	81019da <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0x92>
		{
			targetQueue = queue_handles[eventReceiver];
 81019c4:	687b      	ldr	r3, [r7, #4]
 81019c6:	f107 020f 	add.w	r2, r7, #15
 81019ca:	4611      	mov	r1, r2
 81019cc:	4618      	mov	r0, r3
 81019ce:	f000 f961 	bl	8101c94 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 81019d2:	4603      	mov	r3, r0
 81019d4:	681b      	ldr	r3, [r3, #0]
 81019d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81019d8:	e00c      	b.n	81019f4 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0xac>
		}
		else
		{
			// if receiver not found, then it means i has to be on CM7 side, so send to IPC connection damon.
			targetQueue = queue_handles[EVENT_QUEUE_DAEMON_NATIVE];
 81019da:	687b      	ldr	r3, [r7, #4]
 81019dc:	2205      	movs	r2, #5
 81019de:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 81019e2:	f107 0237 	add.w	r2, r7, #55	@ 0x37
 81019e6:	4611      	mov	r1, r2
 81019e8:	4618      	mov	r0, r3
 81019ea:	f000 f9af 	bl	8101d4c <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_>
 81019ee:	4603      	mov	r3, r0
 81019f0:	681b      	ldr	r3, [r3, #0]
 81019f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		}

		if(targetQueue)
 81019f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81019f6:	2b00      	cmp	r3, #0
 81019f8:	d007      	beq.n	8101a0a <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0xc2>
		{
			xQueueSend(targetQueue, static_cast<void*>(&msg), portMAX_DELAY);
 81019fa:	f107 0118 	add.w	r1, r7, #24
 81019fe:	2300      	movs	r3, #0
 8101a00:	f04f 32ff 	mov.w	r2, #4294967295
 8101a04:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8101a06:	f00b ffed 	bl	810d9e4 <xQueueGenericSend>
	for(auto msg : messages)
 8101a0a:	f107 0314 	add.w	r3, r7, #20
 8101a0e:	4618      	mov	r0, r3
 8101a10:	f000 f8f3 	bl	8101bfa <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEppEv>
 8101a14:	f107 0210 	add.w	r2, r7, #16
 8101a18:	f107 0314 	add.w	r3, r7, #20
 8101a1c:	4611      	mov	r1, r2
 8101a1e:	4618      	mov	r0, r3
 8101a20:	f000 f8d3 	bl	8101bca <_ZN9__gnu_cxxneIPK8SMessageSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8101a24:	4603      	mov	r3, r0
 8101a26:	2b00      	cmp	r3, #0
 8101a28:	d1a0      	bne.n	810196c <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0x24>
		}
	}
}
 8101a2a:	bf00      	nop
 8101a2c:	bf00      	nop
 8101a2e:	3740      	adds	r7, #64	@ 0x40
 8101a30:	46bd      	mov	sp, r7
 8101a32:	bdb0      	pop	{r4, r5, r7, pc}

08101a34 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8101a34:	b580      	push	{r7, lr}
 8101a36:	b082      	sub	sp, #8
 8101a38:	af00      	add	r7, sp, #0
 8101a3a:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8101a3c:	6878      	ldr	r0, [r7, #4]
 8101a3e:	f000 f9e5 	bl	8101e0c <_ZNSaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>
 8101a42:	687b      	ldr	r3, [r7, #4]
 8101a44:	4618      	mov	r0, r3
 8101a46:	f000 f9ed 	bl	8101e24 <_ZNSt20_Rb_tree_key_compareISt4lessIN19EventManagerCM4Task11EEventQueueEEEC1Ev>
 8101a4a:	687b      	ldr	r3, [r7, #4]
 8101a4c:	3304      	adds	r3, #4
 8101a4e:	4618      	mov	r0, r3
 8101a50:	f7ff fe98 	bl	8101784 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8101a54:	687b      	ldr	r3, [r7, #4]
 8101a56:	4618      	mov	r0, r3
 8101a58:	3708      	adds	r7, #8
 8101a5a:	46bd      	mov	sp, r7
 8101a5c:	bd80      	pop	{r7, pc}

08101a5e <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_>:
       *
       *  Insertion requires logarithmic time.
       */
      template<typename... _Args>
	std::pair<iterator, bool>
	emplace(_Args&&... __args)
 8101a5e:	b5b0      	push	{r4, r5, r7, lr}
 8101a60:	b084      	sub	sp, #16
 8101a62:	af00      	add	r7, sp, #0
 8101a64:	60f8      	str	r0, [r7, #12]
 8101a66:	60b9      	str	r1, [r7, #8]
 8101a68:	607a      	str	r2, [r7, #4]
 8101a6a:	603b      	str	r3, [r7, #0]
		      }
		    return {__i, false};
		  }
	      }
#endif
	  return _M_t._M_emplace_unique(std::forward<_Args>(__args)...);
 8101a6c:	68bc      	ldr	r4, [r7, #8]
 8101a6e:	6878      	ldr	r0, [r7, #4]
 8101a70:	f000 f9ef 	bl	8101e52 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8101a74:	4605      	mov	r5, r0
 8101a76:	6838      	ldr	r0, [r7, #0]
 8101a78:	f000 f9f6 	bl	8101e68 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8101a7c:	4603      	mov	r3, r0
 8101a7e:	68f8      	ldr	r0, [r7, #12]
 8101a80:	462a      	mov	r2, r5
 8101a82:	4621      	mov	r1, r4
 8101a84:	f000 f9fb 	bl	8101e7e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJRS1_RS5_EEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_>
 8101a88:	bf00      	nop
	}
 8101a8a:	68f8      	ldr	r0, [r7, #12]
 8101a8c:	3710      	adds	r7, #16
 8101a8e:	46bd      	mov	sp, r7
 8101a90:	bdb0      	pop	{r4, r5, r7, pc}

08101a92 <_ZNSt6vectorI8SMessageSaIS0_EED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 8101a92:	b5b0      	push	{r4, r5, r7, lr}
 8101a94:	b082      	sub	sp, #8
 8101a96:	af00      	add	r7, sp, #0
 8101a98:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8101a9a:	687b      	ldr	r3, [r7, #4]
 8101a9c:	681c      	ldr	r4, [r3, #0]
 8101a9e:	687b      	ldr	r3, [r7, #4]
 8101aa0:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8101aa2:	687b      	ldr	r3, [r7, #4]
 8101aa4:	4618      	mov	r0, r3
 8101aa6:	f000 fa3f 	bl	8101f28 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8101aaa:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8101aac:	461a      	mov	r2, r3
 8101aae:	4629      	mov	r1, r5
 8101ab0:	4620      	mov	r0, r4
 8101ab2:	f000 fa44 	bl	8101f3e <_ZSt8_DestroyIP8SMessageS0_EvT_S2_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8101ab6:	687b      	ldr	r3, [r7, #4]
 8101ab8:	4618      	mov	r0, r3
 8101aba:	f000 f821 	bl	8101b00 <_ZNSt12_Vector_baseI8SMessageSaIS0_EED1Ev>
 8101abe:	687b      	ldr	r3, [r7, #4]
 8101ac0:	4618      	mov	r0, r3
 8101ac2:	3708      	adds	r7, #8
 8101ac4:	46bd      	mov	sp, r7
 8101ac6:	bdb0      	pop	{r4, r5, r7, pc}

08101ac8 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8101ac8:	b580      	push	{r7, lr}
 8101aca:	b082      	sub	sp, #8
 8101acc:	af00      	add	r7, sp, #0
 8101ace:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8101ad0:	6878      	ldr	r0, [r7, #4]
 8101ad2:	f000 fa42 	bl	8101f5a <_ZNSaI8SMessageEC1Ev>
 8101ad6:	687b      	ldr	r3, [r7, #4]
 8101ad8:	4618      	mov	r0, r3
 8101ada:	f000 fa4a 	bl	8101f72 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 8101ade:	687b      	ldr	r3, [r7, #4]
 8101ae0:	4618      	mov	r0, r3
 8101ae2:	3708      	adds	r7, #8
 8101ae4:	46bd      	mov	sp, r7
 8101ae6:	bd80      	pop	{r7, pc}

08101ae8 <_ZNSaI8SMessageED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8101ae8:	b580      	push	{r7, lr}
 8101aea:	b082      	sub	sp, #8
 8101aec:	af00      	add	r7, sp, #0
 8101aee:	6078      	str	r0, [r7, #4]
 8101af0:	6878      	ldr	r0, [r7, #4]
 8101af2:	f000 fa52 	bl	8101f9a <_ZNSt15__new_allocatorI8SMessageED1Ev>
 8101af6:	687b      	ldr	r3, [r7, #4]
 8101af8:	4618      	mov	r0, r3
 8101afa:	3708      	adds	r7, #8
 8101afc:	46bd      	mov	sp, r7
 8101afe:	bd80      	pop	{r7, pc}

08101b00 <_ZNSt12_Vector_baseI8SMessageSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8101b00:	b580      	push	{r7, lr}
 8101b02:	b082      	sub	sp, #8
 8101b04:	af00      	add	r7, sp, #0
 8101b06:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8101b08:	687b      	ldr	r3, [r7, #4]
 8101b0a:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8101b0c:	687b      	ldr	r3, [r7, #4]
 8101b0e:	689a      	ldr	r2, [r3, #8]
 8101b10:	687b      	ldr	r3, [r7, #4]
 8101b12:	681b      	ldr	r3, [r3, #0]
 8101b14:	1ad3      	subs	r3, r2, r3
 8101b16:	10db      	asrs	r3, r3, #3
 8101b18:	4a07      	ldr	r2, [pc, #28]	@ (8101b38 <_ZNSt12_Vector_baseI8SMessageSaIS0_EED1Ev+0x38>)
 8101b1a:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8101b1e:	461a      	mov	r2, r3
 8101b20:	6878      	ldr	r0, [r7, #4]
 8101b22:	f000 fa45 	bl	8101fb0 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j>
      }
 8101b26:	687b      	ldr	r3, [r7, #4]
 8101b28:	4618      	mov	r0, r3
 8101b2a:	f7ff fec1 	bl	81018b0 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implD1Ev>
 8101b2e:	687b      	ldr	r3, [r7, #4]
 8101b30:	4618      	mov	r0, r3
 8101b32:	3708      	adds	r7, #8
 8101b34:	46bd      	mov	sp, r7
 8101b36:	bd80      	pop	{r7, pc}
 8101b38:	aaaaaaab 	.word	0xaaaaaaab

08101b3c <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_>:
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      _GLIBCXX20_CONSTEXPR
      void
      push_back(const value_type& __x)
 8101b3c:	b580      	push	{r7, lr}
 8101b3e:	b082      	sub	sp, #8
 8101b40:	af00      	add	r7, sp, #0
 8101b42:	6078      	str	r0, [r7, #4]
 8101b44:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8101b46:	687b      	ldr	r3, [r7, #4]
 8101b48:	685a      	ldr	r2, [r3, #4]
 8101b4a:	687b      	ldr	r3, [r7, #4]
 8101b4c:	689b      	ldr	r3, [r3, #8]
 8101b4e:	429a      	cmp	r2, r3
 8101b50:	d00d      	beq.n	8101b6e <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8101b52:	6878      	ldr	r0, [r7, #4]
 8101b54:	687b      	ldr	r3, [r7, #4]
 8101b56:	685b      	ldr	r3, [r3, #4]
 8101b58:	683a      	ldr	r2, [r7, #0]
 8101b5a:	4619      	mov	r1, r3
 8101b5c:	f000 fa3b 	bl	8101fd6 <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8101b60:	687b      	ldr	r3, [r7, #4]
 8101b62:	685b      	ldr	r3, [r3, #4]
 8101b64:	f103 0218 	add.w	r2, r3, #24
 8101b68:	687b      	ldr	r3, [r7, #4]
 8101b6a:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8101b6c:	e008      	b.n	8101b80 <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 8101b6e:	6878      	ldr	r0, [r7, #4]
 8101b70:	f000 fa44 	bl	8101ffc <_ZNSt6vectorI8SMessageSaIS0_EE3endEv>
 8101b74:	4603      	mov	r3, r0
 8101b76:	683a      	ldr	r2, [r7, #0]
 8101b78:	4619      	mov	r1, r3
 8101b7a:	6878      	ldr	r0, [r7, #4]
 8101b7c:	f000 fa66 	bl	810204c <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8101b80:	bf00      	nop
 8101b82:	3708      	adds	r7, #8
 8101b84:	46bd      	mov	sp, r7
 8101b86:	bd80      	pop	{r7, pc}

08101b88 <_ZNKSt6vectorI8SMessageSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8101b88:	b580      	push	{r7, lr}
 8101b8a:	b084      	sub	sp, #16
 8101b8c:	af00      	add	r7, sp, #0
 8101b8e:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8101b90:	687a      	ldr	r2, [r7, #4]
 8101b92:	f107 030c 	add.w	r3, r7, #12
 8101b96:	4611      	mov	r1, r2
 8101b98:	4618      	mov	r0, r3
 8101b9a:	f000 fb1f 	bl	81021dc <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8101b9e:	68fb      	ldr	r3, [r7, #12]
 8101ba0:	4618      	mov	r0, r3
 8101ba2:	3710      	adds	r7, #16
 8101ba4:	46bd      	mov	sp, r7
 8101ba6:	bd80      	pop	{r7, pc}

08101ba8 <_ZNKSt6vectorI8SMessageSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8101ba8:	b580      	push	{r7, lr}
 8101baa:	b084      	sub	sp, #16
 8101bac:	af00      	add	r7, sp, #0
 8101bae:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8101bb0:	687b      	ldr	r3, [r7, #4]
 8101bb2:	1d1a      	adds	r2, r3, #4
 8101bb4:	f107 030c 	add.w	r3, r7, #12
 8101bb8:	4611      	mov	r1, r2
 8101bba:	4618      	mov	r0, r3
 8101bbc:	f000 fb0e 	bl	81021dc <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8101bc0:	68fb      	ldr	r3, [r7, #12]
 8101bc2:	4618      	mov	r0, r3
 8101bc4:	3710      	adds	r7, #16
 8101bc6:	46bd      	mov	sp, r7
 8101bc8:	bd80      	pop	{r7, pc}

08101bca <_ZN9__gnu_cxxneIPK8SMessageSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8101bca:	b590      	push	{r4, r7, lr}
 8101bcc:	b083      	sub	sp, #12
 8101bce:	af00      	add	r7, sp, #0
 8101bd0:	6078      	str	r0, [r7, #4]
 8101bd2:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8101bd4:	6878      	ldr	r0, [r7, #4]
 8101bd6:	f000 fb11 	bl	81021fc <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8101bda:	4603      	mov	r3, r0
 8101bdc:	681c      	ldr	r4, [r3, #0]
 8101bde:	6838      	ldr	r0, [r7, #0]
 8101be0:	f000 fb0c 	bl	81021fc <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8101be4:	4603      	mov	r3, r0
 8101be6:	681b      	ldr	r3, [r3, #0]
 8101be8:	429c      	cmp	r4, r3
 8101bea:	bf14      	ite	ne
 8101bec:	2301      	movne	r3, #1
 8101bee:	2300      	moveq	r3, #0
 8101bf0:	b2db      	uxtb	r3, r3
 8101bf2:	4618      	mov	r0, r3
 8101bf4:	370c      	adds	r7, #12
 8101bf6:	46bd      	mov	sp, r7
 8101bf8:	bd90      	pop	{r4, r7, pc}

08101bfa <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8101bfa:	b480      	push	{r7}
 8101bfc:	b083      	sub	sp, #12
 8101bfe:	af00      	add	r7, sp, #0
 8101c00:	6078      	str	r0, [r7, #4]
	++_M_current;
 8101c02:	687b      	ldr	r3, [r7, #4]
 8101c04:	681b      	ldr	r3, [r3, #0]
 8101c06:	f103 0218 	add.w	r2, r3, #24
 8101c0a:	687b      	ldr	r3, [r7, #4]
 8101c0c:	601a      	str	r2, [r3, #0]
	return *this;
 8101c0e:	687b      	ldr	r3, [r7, #4]
      }
 8101c10:	4618      	mov	r0, r3
 8101c12:	370c      	adds	r7, #12
 8101c14:	46bd      	mov	sp, r7
 8101c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c1a:	4770      	bx	lr

08101c1c <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8101c1c:	b480      	push	{r7}
 8101c1e:	b083      	sub	sp, #12
 8101c20:	af00      	add	r7, sp, #0
 8101c22:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8101c24:	687b      	ldr	r3, [r7, #4]
 8101c26:	681b      	ldr	r3, [r3, #0]
 8101c28:	4618      	mov	r0, r3
 8101c2a:	370c      	adds	r7, #12
 8101c2c:	46bd      	mov	sp, r7
 8101c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c32:	4770      	bx	lr

08101c34 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>:
       *  pointing to the sought after %pair.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */

      iterator
      find(const key_type& __x)
 8101c34:	b580      	push	{r7, lr}
 8101c36:	b082      	sub	sp, #8
 8101c38:	af00      	add	r7, sp, #0
 8101c3a:	6078      	str	r0, [r7, #4]
 8101c3c:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 8101c3e:	687b      	ldr	r3, [r7, #4]
 8101c40:	6839      	ldr	r1, [r7, #0]
 8101c42:	4618      	mov	r0, r3
 8101c44:	f000 fae5 	bl	8102212 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 8101c48:	4603      	mov	r3, r0
 8101c4a:	4618      	mov	r0, r3
 8101c4c:	3708      	adds	r7, #8
 8101c4e:	46bd      	mov	sp, r7
 8101c50:	bd80      	pop	{r7, pc}

08101c52 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8101c52:	b580      	push	{r7, lr}
 8101c54:	b082      	sub	sp, #8
 8101c56:	af00      	add	r7, sp, #0
 8101c58:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8101c5a:	687b      	ldr	r3, [r7, #4]
 8101c5c:	4618      	mov	r0, r3
 8101c5e:	f000 fb14 	bl	810228a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8101c62:	4603      	mov	r3, r0
 8101c64:	4618      	mov	r0, r3
 8101c66:	3708      	adds	r7, #8
 8101c68:	46bd      	mov	sp, r7
 8101c6a:	bd80      	pop	{r7, pc}

08101c6c <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8101c6c:	b480      	push	{r7}
 8101c6e:	b083      	sub	sp, #12
 8101c70:	af00      	add	r7, sp, #0
 8101c72:	6078      	str	r0, [r7, #4]
 8101c74:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 8101c76:	687b      	ldr	r3, [r7, #4]
 8101c78:	681a      	ldr	r2, [r3, #0]
 8101c7a:	683b      	ldr	r3, [r7, #0]
 8101c7c:	681b      	ldr	r3, [r3, #0]
 8101c7e:	429a      	cmp	r2, r3
 8101c80:	bf14      	ite	ne
 8101c82:	2301      	movne	r3, #1
 8101c84:	2300      	moveq	r3, #0
 8101c86:	b2db      	uxtb	r3, r3
 8101c88:	4618      	mov	r0, r3
 8101c8a:	370c      	adds	r7, #12
 8101c8c:	46bd      	mov	sp, r7
 8101c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c92:	4770      	bx	lr

08101c94 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 8101c94:	b590      	push	{r4, r7, lr}
 8101c96:	b08b      	sub	sp, #44	@ 0x2c
 8101c98:	af02      	add	r7, sp, #8
 8101c9a:	6078      	str	r0, [r7, #4]
 8101c9c:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8101c9e:	6839      	ldr	r1, [r7, #0]
 8101ca0:	6878      	ldr	r0, [r7, #4]
 8101ca2:	f000 fb03 	bl	81022ac <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 8101ca6:	4603      	mov	r3, r0
 8101ca8:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8101caa:	6878      	ldr	r0, [r7, #4]
 8101cac:	f7ff ffd1 	bl	8101c52 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8101cb0:	4603      	mov	r3, r0
 8101cb2:	60fb      	str	r3, [r7, #12]
 8101cb4:	f107 020c 	add.w	r2, r7, #12
 8101cb8:	f107 0308 	add.w	r3, r7, #8
 8101cbc:	4611      	mov	r1, r2
 8101cbe:	4618      	mov	r0, r3
 8101cc0:	f000 fb03 	bl	81022ca <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 8101cc4:	4603      	mov	r3, r0
 8101cc6:	2b00      	cmp	r3, #0
 8101cc8:	d112      	bne.n	8101cf0 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x5c>
 8101cca:	6878      	ldr	r0, [r7, #4]
 8101ccc:	f000 fb11 	bl	81022f2 <_ZNKSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8101cd0:	f107 0308 	add.w	r3, r7, #8
 8101cd4:	4618      	mov	r0, r3
 8101cd6:	f000 fb19 	bl	810230c <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 8101cda:	4603      	mov	r3, r0
 8101cdc:	461a      	mov	r2, r3
 8101cde:	f107 0310 	add.w	r3, r7, #16
 8101ce2:	6839      	ldr	r1, [r7, #0]
 8101ce4:	4618      	mov	r0, r3
 8101ce6:	f000 fb1f 	bl	8102328 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8101cea:	4603      	mov	r3, r0
 8101cec:	2b00      	cmp	r3, #0
 8101cee:	d001      	beq.n	8101cf4 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 8101cf0:	2301      	movs	r3, #1
 8101cf2:	e000      	b.n	8101cf6 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x62>
 8101cf4:	2300      	movs	r3, #0
 8101cf6:	2b00      	cmp	r3, #0
 8101cf8:	d01b      	beq.n	8101d32 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8101cfa:	687c      	ldr	r4, [r7, #4]
 8101cfc:	f107 0208 	add.w	r2, r7, #8
 8101d00:	f107 0314 	add.w	r3, r7, #20
 8101d04:	4611      	mov	r1, r2
 8101d06:	4618      	mov	r0, r3
 8101d08:	f000 fb32 	bl	8102370 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 8101d0c:	f107 0318 	add.w	r3, r7, #24
 8101d10:	6839      	ldr	r1, [r7, #0]
 8101d12:	4618      	mov	r0, r3
 8101d14:	f000 fb1d 	bl	8102352 <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8101d18:	f107 0218 	add.w	r2, r7, #24
 8101d1c:	f107 031c 	add.w	r3, r7, #28
 8101d20:	9300      	str	r3, [sp, #0]
 8101d22:	4613      	mov	r3, r2
 8101d24:	4a08      	ldr	r2, [pc, #32]	@ (8101d48 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb4>)
 8101d26:	6979      	ldr	r1, [r7, #20]
 8101d28:	4620      	mov	r0, r4
 8101d2a:	f000 fb31 	bl	8102390 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 8101d2e:	4603      	mov	r3, r0
 8101d30:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8101d32:	f107 0308 	add.w	r3, r7, #8
 8101d36:	4618      	mov	r0, r3
 8101d38:	f000 fae8 	bl	810230c <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 8101d3c:	4603      	mov	r3, r0
 8101d3e:	3304      	adds	r3, #4
      }
 8101d40:	4618      	mov	r0, r3
 8101d42:	3724      	adds	r7, #36	@ 0x24
 8101d44:	46bd      	mov	sp, r7
 8101d46:	bd90      	pop	{r4, r7, pc}
 8101d48:	0811fc20 	.word	0x0811fc20

08101d4c <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_>:
      operator[](key_type&& __k)
 8101d4c:	b590      	push	{r4, r7, lr}
 8101d4e:	b08b      	sub	sp, #44	@ 0x2c
 8101d50:	af02      	add	r7, sp, #8
 8101d52:	6078      	str	r0, [r7, #4]
 8101d54:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8101d56:	6839      	ldr	r1, [r7, #0]
 8101d58:	6878      	ldr	r0, [r7, #4]
 8101d5a:	f000 faa7 	bl	81022ac <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 8101d5e:	4603      	mov	r3, r0
 8101d60:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8101d62:	6878      	ldr	r0, [r7, #4]
 8101d64:	f7ff ff75 	bl	8101c52 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8101d68:	4603      	mov	r3, r0
 8101d6a:	60fb      	str	r3, [r7, #12]
 8101d6c:	f107 020c 	add.w	r2, r7, #12
 8101d70:	f107 0308 	add.w	r3, r7, #8
 8101d74:	4611      	mov	r1, r2
 8101d76:	4618      	mov	r0, r3
 8101d78:	f000 faa7 	bl	81022ca <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 8101d7c:	4603      	mov	r3, r0
 8101d7e:	2b00      	cmp	r3, #0
 8101d80:	d112      	bne.n	8101da8 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_+0x5c>
 8101d82:	6878      	ldr	r0, [r7, #4]
 8101d84:	f000 fab5 	bl	81022f2 <_ZNKSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8101d88:	f107 0308 	add.w	r3, r7, #8
 8101d8c:	4618      	mov	r0, r3
 8101d8e:	f000 fabd 	bl	810230c <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 8101d92:	4603      	mov	r3, r0
 8101d94:	461a      	mov	r2, r3
 8101d96:	f107 0310 	add.w	r3, r7, #16
 8101d9a:	6839      	ldr	r1, [r7, #0]
 8101d9c:	4618      	mov	r0, r3
 8101d9e:	f000 fac3 	bl	8102328 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8101da2:	4603      	mov	r3, r0
 8101da4:	2b00      	cmp	r3, #0
 8101da6:	d001      	beq.n	8101dac <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_+0x60>
 8101da8:	2301      	movs	r3, #1
 8101daa:	e000      	b.n	8101dae <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_+0x62>
 8101dac:	2300      	movs	r3, #0
 8101dae:	2b00      	cmp	r3, #0
 8101db0:	d01f      	beq.n	8101df2 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_+0xa6>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8101db2:	687c      	ldr	r4, [r7, #4]
 8101db4:	f107 0208 	add.w	r2, r7, #8
 8101db8:	f107 0314 	add.w	r3, r7, #20
 8101dbc:	4611      	mov	r1, r2
 8101dbe:	4618      	mov	r0, r3
 8101dc0:	f000 fad6 	bl	8102370 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					std::forward_as_tuple(std::move(__k)),
 8101dc4:	6838      	ldr	r0, [r7, #0]
 8101dc6:	f000 fb29 	bl	810241c <_ZSt4moveIRN19EventManagerCM4Task11EEventQueueEEONSt16remove_referenceIT_E4typeEOS4_>
 8101dca:	4602      	mov	r2, r0
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8101dcc:	f107 0318 	add.w	r3, r7, #24
 8101dd0:	4611      	mov	r1, r2
 8101dd2:	4618      	mov	r0, r3
 8101dd4:	f000 fb3d 	bl	8102452 <_ZSt16forward_as_tupleIJN19EventManagerCM4Task11EEventQueueEEESt5tupleIJDpOT_EES5_>
 8101dd8:	f107 0218 	add.w	r2, r7, #24
 8101ddc:	f107 031c 	add.w	r3, r7, #28
 8101de0:	9300      	str	r3, [sp, #0]
 8101de2:	4613      	mov	r3, r2
 8101de4:	4a08      	ldr	r2, [pc, #32]	@ (8101e08 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixEOS1_+0xbc>)
 8101de6:	6979      	ldr	r1, [r7, #20]
 8101de8:	4620      	mov	r0, r4
 8101dea:	f000 fb43 	bl	8102474 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 8101dee:	4603      	mov	r3, r0
 8101df0:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8101df2:	f107 0308 	add.w	r3, r7, #8
 8101df6:	4618      	mov	r0, r3
 8101df8:	f000 fa88 	bl	810230c <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 8101dfc:	4603      	mov	r3, r0
 8101dfe:	3304      	adds	r3, #4
      }
 8101e00:	4618      	mov	r0, r3
 8101e02:	3724      	adds	r7, #36	@ 0x24
 8101e04:	46bd      	mov	sp, r7
 8101e06:	bd90      	pop	{r4, r7, pc}
 8101e08:	0811fc20 	.word	0x0811fc20

08101e0c <_ZNSaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8101e0c:	b580      	push	{r7, lr}
 8101e0e:	b082      	sub	sp, #8
 8101e10:	af00      	add	r7, sp, #0
 8101e12:	6078      	str	r0, [r7, #4]
 8101e14:	6878      	ldr	r0, [r7, #4]
 8101e16:	f000 fb73 	bl	8102500 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>
 8101e1a:	687b      	ldr	r3, [r7, #4]
 8101e1c:	4618      	mov	r0, r3
 8101e1e:	3708      	adds	r7, #8
 8101e20:	46bd      	mov	sp, r7
 8101e22:	bd80      	pop	{r7, pc}

08101e24 <_ZNSt20_Rb_tree_key_compareISt4lessIN19EventManagerCM4Task11EEventQueueEEEC1Ev>:
      _Rb_tree_key_compare()
 8101e24:	b480      	push	{r7}
 8101e26:	b083      	sub	sp, #12
 8101e28:	af00      	add	r7, sp, #0
 8101e2a:	6078      	str	r0, [r7, #4]
      { }
 8101e2c:	687b      	ldr	r3, [r7, #4]
 8101e2e:	4618      	mov	r0, r3
 8101e30:	370c      	adds	r7, #12
 8101e32:	46bd      	mov	sp, r7
 8101e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e38:	4770      	bx	lr

08101e3a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8101e3a:	b580      	push	{r7, lr}
 8101e3c:	b082      	sub	sp, #8
 8101e3e:	af00      	add	r7, sp, #0
 8101e40:	6078      	str	r0, [r7, #4]
      { return _M_mbegin(); }
 8101e42:	6878      	ldr	r0, [r7, #4]
 8101e44:	f000 fb90 	bl	8102568 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE9_M_mbeginEv>
 8101e48:	4603      	mov	r3, r0
 8101e4a:	4618      	mov	r0, r3
 8101e4c:	3708      	adds	r7, #8
 8101e4e:	46bd      	mov	sp, r7
 8101e50:	bd80      	pop	{r7, pc}

08101e52 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8101e52:	b480      	push	{r7}
 8101e54:	b083      	sub	sp, #12
 8101e56:	af00      	add	r7, sp, #0
 8101e58:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8101e5a:	687b      	ldr	r3, [r7, #4]
 8101e5c:	4618      	mov	r0, r3
 8101e5e:	370c      	adds	r7, #12
 8101e60:	46bd      	mov	sp, r7
 8101e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e66:	4770      	bx	lr

08101e68 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8101e68:	b480      	push	{r7}
 8101e6a:	b083      	sub	sp, #12
 8101e6c:	af00      	add	r7, sp, #0
 8101e6e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8101e70:	687b      	ldr	r3, [r7, #4]
 8101e72:	4618      	mov	r0, r3
 8101e74:	370c      	adds	r7, #12
 8101e76:	46bd      	mov	sp, r7
 8101e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e7c:	4770      	bx	lr

08101e7e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJRS1_RS5_EEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    template<typename... _Args>
      auto
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8101e7e:	b590      	push	{r4, r7, lr}
 8101e80:	b08d      	sub	sp, #52	@ 0x34
 8101e82:	af00      	add	r7, sp, #0
 8101e84:	60f8      	str	r0, [r7, #12]
 8101e86:	60b9      	str	r1, [r7, #8]
 8101e88:	607a      	str	r2, [r7, #4]
 8101e8a:	603b      	str	r3, [r7, #0]
      _M_emplace_unique(_Args&&... __args)
      -> pair<iterator, bool>
      {
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
 8101e8c:	6878      	ldr	r0, [r7, #4]
 8101e8e:	f7ff ffe0 	bl	8101e52 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8101e92:	4604      	mov	r4, r0
 8101e94:	6838      	ldr	r0, [r7, #0]
 8101e96:	f7ff ffe7 	bl	8101e68 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8101e9a:	4603      	mov	r3, r0
 8101e9c:	f107 0018 	add.w	r0, r7, #24
 8101ea0:	4622      	mov	r2, r4
 8101ea2:	68b9      	ldr	r1, [r7, #8]
 8101ea4:	f000 fb6c 	bl	8102580 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRS1_RS5_EEERSC_DpOT_>
	auto __res = _M_get_insert_unique_pos(__z._M_key());
 8101ea8:	f107 0318 	add.w	r3, r7, #24
 8101eac:	4618      	mov	r0, r3
 8101eae:	f000 fc20 	bl	81026f2 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>
 8101eb2:	4602      	mov	r2, r0
 8101eb4:	f107 0310 	add.w	r3, r7, #16
 8101eb8:	68b9      	ldr	r1, [r7, #8]
 8101eba:	4618      	mov	r0, r3
 8101ebc:	f000 fb94 	bl	81025e8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
	if (__res.second)
 8101ec0:	697b      	ldr	r3, [r7, #20]
 8101ec2:	2b00      	cmp	r3, #0
 8101ec4:	d015      	beq.n	8101ef2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJRS1_RS5_EEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_+0x74>
	  return {__z._M_insert(__res), true};
 8101ec6:	f107 0018 	add.w	r0, r7, #24
 8101eca:	f107 0310 	add.w	r3, r7, #16
 8101ece:	e893 0006 	ldmia.w	r3, {r1, r2}
 8101ed2:	f000 fc1c 	bl	810270e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>
 8101ed6:	4603      	mov	r3, r0
 8101ed8:	623b      	str	r3, [r7, #32]
 8101eda:	2301      	movs	r3, #1
 8101edc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8101ee0:	f107 0227 	add.w	r2, r7, #39	@ 0x27
 8101ee4:	f107 0320 	add.w	r3, r7, #32
 8101ee8:	4619      	mov	r1, r3
 8101eea:	68f8      	ldr	r0, [r7, #12]
 8101eec:	f000 fc28 	bl	8102740 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEbEC1IS7_bLb1EEEOT_OT0_>
 8101ef0:	e011      	b.n	8101f16 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJRS1_RS5_EEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_+0x98>
	return {iterator(__res.first), false};
 8101ef2:	693a      	ldr	r2, [r7, #16]
 8101ef4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8101ef8:	4611      	mov	r1, r2
 8101efa:	4618      	mov	r0, r3
 8101efc:	f000 fc39 	bl	8102772 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8101f00:	2300      	movs	r3, #0
 8101f02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8101f06:	f107 022f 	add.w	r2, r7, #47	@ 0x2f
 8101f0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8101f0e:	4619      	mov	r1, r3
 8101f10:	68f8      	ldr	r0, [r7, #12]
 8101f12:	f000 fc15 	bl	8102740 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEbEC1IS7_bLb1EEEOT_OT0_>
      }
 8101f16:	f107 0318 	add.w	r3, r7, #24
 8101f1a:	4618      	mov	r0, r3
 8101f1c:	f000 fb4f 	bl	81025be <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>
 8101f20:	68f8      	ldr	r0, [r7, #12]
 8101f22:	3734      	adds	r7, #52	@ 0x34
 8101f24:	46bd      	mov	sp, r7
 8101f26:	bd90      	pop	{r4, r7, pc}

08101f28 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8101f28:	b480      	push	{r7}
 8101f2a:	b083      	sub	sp, #12
 8101f2c:	af00      	add	r7, sp, #0
 8101f2e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8101f30:	687b      	ldr	r3, [r7, #4]
 8101f32:	4618      	mov	r0, r3
 8101f34:	370c      	adds	r7, #12
 8101f36:	46bd      	mov	sp, r7
 8101f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f3c:	4770      	bx	lr

08101f3e <_ZSt8_DestroyIP8SMessageS0_EvT_S2_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8101f3e:	b580      	push	{r7, lr}
 8101f40:	b084      	sub	sp, #16
 8101f42:	af00      	add	r7, sp, #0
 8101f44:	60f8      	str	r0, [r7, #12]
 8101f46:	60b9      	str	r1, [r7, #8]
 8101f48:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8101f4a:	68b9      	ldr	r1, [r7, #8]
 8101f4c:	68f8      	ldr	r0, [r7, #12]
 8101f4e:	f000 fc2b 	bl	81027a8 <_ZSt8_DestroyIP8SMessageEvT_S2_>
    }
 8101f52:	bf00      	nop
 8101f54:	3710      	adds	r7, #16
 8101f56:	46bd      	mov	sp, r7
 8101f58:	bd80      	pop	{r7, pc}

08101f5a <_ZNSaI8SMessageEC1Ev>:
 8101f5a:	b580      	push	{r7, lr}
 8101f5c:	b082      	sub	sp, #8
 8101f5e:	af00      	add	r7, sp, #0
 8101f60:	6078      	str	r0, [r7, #4]
 8101f62:	6878      	ldr	r0, [r7, #4]
 8101f64:	f000 fc2d 	bl	81027c2 <_ZNSt15__new_allocatorI8SMessageEC1Ev>
 8101f68:	687b      	ldr	r3, [r7, #4]
 8101f6a:	4618      	mov	r0, r3
 8101f6c:	3708      	adds	r7, #8
 8101f6e:	46bd      	mov	sp, r7
 8101f70:	bd80      	pop	{r7, pc}

08101f72 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8101f72:	b480      	push	{r7}
 8101f74:	b083      	sub	sp, #12
 8101f76:	af00      	add	r7, sp, #0
 8101f78:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8101f7a:	687b      	ldr	r3, [r7, #4]
 8101f7c:	2200      	movs	r2, #0
 8101f7e:	601a      	str	r2, [r3, #0]
 8101f80:	687b      	ldr	r3, [r7, #4]
 8101f82:	2200      	movs	r2, #0
 8101f84:	605a      	str	r2, [r3, #4]
 8101f86:	687b      	ldr	r3, [r7, #4]
 8101f88:	2200      	movs	r2, #0
 8101f8a:	609a      	str	r2, [r3, #8]
	{ }
 8101f8c:	687b      	ldr	r3, [r7, #4]
 8101f8e:	4618      	mov	r0, r3
 8101f90:	370c      	adds	r7, #12
 8101f92:	46bd      	mov	sp, r7
 8101f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f98:	4770      	bx	lr

08101f9a <_ZNSt15__new_allocatorI8SMessageED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8101f9a:	b480      	push	{r7}
 8101f9c:	b083      	sub	sp, #12
 8101f9e:	af00      	add	r7, sp, #0
 8101fa0:	6078      	str	r0, [r7, #4]
 8101fa2:	687b      	ldr	r3, [r7, #4]
 8101fa4:	4618      	mov	r0, r3
 8101fa6:	370c      	adds	r7, #12
 8101fa8:	46bd      	mov	sp, r7
 8101faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fae:	4770      	bx	lr

08101fb0 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8101fb0:	b580      	push	{r7, lr}
 8101fb2:	b084      	sub	sp, #16
 8101fb4:	af00      	add	r7, sp, #0
 8101fb6:	60f8      	str	r0, [r7, #12]
 8101fb8:	60b9      	str	r1, [r7, #8]
 8101fba:	607a      	str	r2, [r7, #4]
	if (__p)
 8101fbc:	68bb      	ldr	r3, [r7, #8]
 8101fbe:	2b00      	cmp	r3, #0
 8101fc0:	d005      	beq.n	8101fce <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8101fc2:	68fb      	ldr	r3, [r7, #12]
 8101fc4:	687a      	ldr	r2, [r7, #4]
 8101fc6:	68b9      	ldr	r1, [r7, #8]
 8101fc8:	4618      	mov	r0, r3
 8101fca:	f000 fc05 	bl	81027d8 <_ZNSt16allocator_traitsISaI8SMessageEE10deallocateERS1_PS0_j>
      }
 8101fce:	bf00      	nop
 8101fd0:	3710      	adds	r7, #16
 8101fd2:	46bd      	mov	sp, r7
 8101fd4:	bd80      	pop	{r7, pc}

08101fd6 <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8101fd6:	b580      	push	{r7, lr}
 8101fd8:	b084      	sub	sp, #16
 8101fda:	af00      	add	r7, sp, #0
 8101fdc:	60f8      	str	r0, [r7, #12]
 8101fde:	60b9      	str	r1, [r7, #8]
 8101fe0:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8101fe2:	6878      	ldr	r0, [r7, #4]
 8101fe4:	f000 fc07 	bl	81027f6 <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>
 8101fe8:	4603      	mov	r3, r0
 8101fea:	461a      	mov	r2, r3
 8101fec:	68b9      	ldr	r1, [r7, #8]
 8101fee:	68f8      	ldr	r0, [r7, #12]
 8101ff0:	f000 fc0c 	bl	810280c <_ZNSt15__new_allocatorI8SMessageE9constructIS0_JRKS0_EEEvPT_DpOT0_>
	}
 8101ff4:	bf00      	nop
 8101ff6:	3710      	adds	r7, #16
 8101ff8:	46bd      	mov	sp, r7
 8101ffa:	bd80      	pop	{r7, pc}

08101ffc <_ZNSt6vectorI8SMessageSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8101ffc:	b580      	push	{r7, lr}
 8101ffe:	b084      	sub	sp, #16
 8102000:	af00      	add	r7, sp, #0
 8102002:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8102004:	687b      	ldr	r3, [r7, #4]
 8102006:	1d1a      	adds	r2, r3, #4
 8102008:	f107 030c 	add.w	r3, r7, #12
 810200c:	4611      	mov	r1, r2
 810200e:	4618      	mov	r0, r3
 8102010:	f000 fc17 	bl	8102842 <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8102014:	68fb      	ldr	r3, [r7, #12]
 8102016:	4618      	mov	r0, r3
 8102018:	3710      	adds	r7, #16
 810201a:	46bd      	mov	sp, r7
 810201c:	bd80      	pop	{r7, pc}

0810201e <_ZNSt6vectorI8SMessageSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 810201e:	b580      	push	{r7, lr}
 8102020:	b082      	sub	sp, #8
 8102022:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8102024:	4618      	mov	r0, r3
 8102026:	f000 f805 	bl	8102034 <_ZNSt6vectorI8SMessageSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 810202a:	4603      	mov	r3, r0
      }
 810202c:	4618      	mov	r0, r3
 810202e:	3708      	adds	r7, #8
 8102030:	46bd      	mov	sp, r7
 8102032:	bd80      	pop	{r7, pc}

08102034 <_ZNSt6vectorI8SMessageSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8102034:	b480      	push	{r7}
 8102036:	b083      	sub	sp, #12
 8102038:	af00      	add	r7, sp, #0
 810203a:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 810203c:	2301      	movs	r3, #1
      }
 810203e:	4618      	mov	r0, r3
 8102040:	370c      	adds	r7, #12
 8102042:	46bd      	mov	sp, r7
 8102044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102048:	4770      	bx	lr
	...

0810204c <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 810204c:	b5b0      	push	{r4, r5, r7, lr}
 810204e:	b08c      	sub	sp, #48	@ 0x30
 8102050:	af00      	add	r7, sp, #0
 8102052:	60f8      	str	r0, [r7, #12]
 8102054:	60b9      	str	r1, [r7, #8]
 8102056:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8102058:	4a5e      	ldr	r2, [pc, #376]	@ (81021d4 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x188>)
 810205a:	2101      	movs	r1, #1
 810205c:	68f8      	ldr	r0, [r7, #12]
 810205e:	f000 fc00 	bl	8102862 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc>
 8102062:	62b8      	str	r0, [r7, #40]	@ 0x28
      pointer __old_start = this->_M_impl._M_start;
 8102064:	68fb      	ldr	r3, [r7, #12]
 8102066:	681b      	ldr	r3, [r3, #0]
 8102068:	627b      	str	r3, [r7, #36]	@ 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 810206a:	68fb      	ldr	r3, [r7, #12]
 810206c:	685b      	ldr	r3, [r3, #4]
 810206e:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8102070:	68f8      	ldr	r0, [r7, #12]
 8102072:	f000 fc3d 	bl	81028f0 <_ZNSt6vectorI8SMessageSaIS0_EE5beginEv>
 8102076:	4603      	mov	r3, r0
 8102078:	617b      	str	r3, [r7, #20]
 810207a:	f107 0214 	add.w	r2, r7, #20
 810207e:	f107 0308 	add.w	r3, r7, #8
 8102082:	4611      	mov	r1, r2
 8102084:	4618      	mov	r0, r3
 8102086:	f000 fc43 	bl	8102910 <_ZN9__gnu_cxxmiIP8SMessageSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 810208a:	4603      	mov	r3, r0
 810208c:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 810208e:	68fb      	ldr	r3, [r7, #12]
 8102090:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8102092:	4618      	mov	r0, r3
 8102094:	f000 fc56 	bl	8102944 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj>
 8102098:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 810209a:	69bb      	ldr	r3, [r7, #24]
 810209c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 810209e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 81020a0:	69fa      	ldr	r2, [r7, #28]
 81020a2:	4613      	mov	r3, r2
 81020a4:	005b      	lsls	r3, r3, #1
 81020a6:	4413      	add	r3, r2
 81020a8:	00db      	lsls	r3, r3, #3
 81020aa:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 81020ac:	69bb      	ldr	r3, [r7, #24]
 81020ae:	189d      	adds	r5, r3, r2
 81020b0:	6878      	ldr	r0, [r7, #4]
 81020b2:	f000 fba0 	bl	81027f6 <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>
 81020b6:	4603      	mov	r3, r0
 81020b8:	461a      	mov	r2, r3
 81020ba:	4629      	mov	r1, r5
 81020bc:	4620      	mov	r0, r4
 81020be:	f7ff ff8a 	bl	8101fd6 <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 81020c2:	2300      	movs	r3, #0
 81020c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 81020c6:	f7ff ffaa 	bl	810201e <_ZNSt6vectorI8SMessageSaIS0_EE15_S_use_relocateEv>
 81020ca:	4603      	mov	r3, r0
 81020cc:	2b00      	cmp	r3, #0
 81020ce:	d027      	beq.n	8102120 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd4>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 81020d0:	f107 0308 	add.w	r3, r7, #8
 81020d4:	4618      	mov	r0, r3
 81020d6:	f000 fc5d 	bl	8102994 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 81020da:	4603      	mov	r3, r0
 81020dc:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 81020de:	68fb      	ldr	r3, [r7, #12]
 81020e0:	4618      	mov	r0, r3
 81020e2:	f7ff ff21 	bl	8101f28 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 81020e6:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 81020e8:	69ba      	ldr	r2, [r7, #24]
 81020ea:	4621      	mov	r1, r4
 81020ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 81020ee:	f000 fc3d 	bl	810296c <_ZNSt6vectorI8SMessageSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 81020f2:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 81020f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81020f6:	3318      	adds	r3, #24
 81020f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 81020fa:	f107 0308 	add.w	r3, r7, #8
 81020fe:	4618      	mov	r0, r3
 8102100:	f000 fc48 	bl	8102994 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8102104:	4603      	mov	r3, r0
 8102106:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8102108:	68fb      	ldr	r3, [r7, #12]
 810210a:	4618      	mov	r0, r3
 810210c:	f7ff ff0c 	bl	8101f28 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8102110:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8102112:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8102114:	6a39      	ldr	r1, [r7, #32]
 8102116:	4620      	mov	r0, r4
 8102118:	f000 fc28 	bl	810296c <_ZNSt6vectorI8SMessageSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 810211c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 810211e:	e026      	b.n	810216e <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x122>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8102120:	f107 0308 	add.w	r3, r7, #8
 8102124:	4618      	mov	r0, r3
 8102126:	f000 fc35 	bl	8102994 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 810212a:	4603      	mov	r3, r0
 810212c:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 810212e:	68fb      	ldr	r3, [r7, #12]
 8102130:	4618      	mov	r0, r3
 8102132:	f7ff fef9 	bl	8101f28 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8102136:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8102138:	69ba      	ldr	r2, [r7, #24]
 810213a:	4621      	mov	r1, r4
 810213c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810213e:	f000 fc34 	bl	81029aa <_ZSt34__uninitialized_move_if_noexcept_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>
 8102142:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 8102144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102146:	3318      	adds	r3, #24
 8102148:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 810214a:	f107 0308 	add.w	r3, r7, #8
 810214e:	4618      	mov	r0, r3
 8102150:	f000 fc20 	bl	8102994 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8102154:	4603      	mov	r3, r0
 8102156:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8102158:	68fb      	ldr	r3, [r7, #12]
 810215a:	4618      	mov	r0, r3
 810215c:	f7ff fee4 	bl	8101f28 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8102160:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8102162:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8102164:	6a39      	ldr	r1, [r7, #32]
 8102166:	4620      	mov	r0, r4
 8102168:	f000 fc1f 	bl	81029aa <_ZSt34__uninitialized_move_if_noexcept_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>
 810216c:	62f8      	str	r0, [r7, #44]	@ 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 810216e:	f7ff ff56 	bl	810201e <_ZNSt6vectorI8SMessageSaIS0_EE15_S_use_relocateEv>
 8102172:	4603      	mov	r3, r0
 8102174:	f083 0301 	eor.w	r3, r3, #1
 8102178:	b2db      	uxtb	r3, r3
 810217a:	2b00      	cmp	r3, #0
 810217c:	d009      	beq.n	8102192 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x146>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 810217e:	68fb      	ldr	r3, [r7, #12]
 8102180:	4618      	mov	r0, r3
 8102182:	f7ff fed1 	bl	8101f28 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8102186:	4603      	mov	r3, r0
 8102188:	461a      	mov	r2, r3
 810218a:	6a39      	ldr	r1, [r7, #32]
 810218c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810218e:	f7ff fed6 	bl	8101f3e <_ZSt8_DestroyIP8SMessageS0_EvT_S2_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8102192:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8102194:	68fb      	ldr	r3, [r7, #12]
 8102196:	689a      	ldr	r2, [r3, #8]
 8102198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810219a:	1ad3      	subs	r3, r2, r3
 810219c:	10db      	asrs	r3, r3, #3
 810219e:	4a0e      	ldr	r2, [pc, #56]	@ (81021d8 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x18c>)
 81021a0:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 81021a4:	461a      	mov	r2, r3
 81021a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 81021a8:	f7ff ff02 	bl	8101fb0 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 81021ac:	68fb      	ldr	r3, [r7, #12]
 81021ae:	69ba      	ldr	r2, [r7, #24]
 81021b0:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 81021b2:	68fb      	ldr	r3, [r7, #12]
 81021b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81021b6:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 81021b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 81021ba:	4613      	mov	r3, r2
 81021bc:	005b      	lsls	r3, r3, #1
 81021be:	4413      	add	r3, r2
 81021c0:	00db      	lsls	r3, r3, #3
 81021c2:	461a      	mov	r2, r3
 81021c4:	69bb      	ldr	r3, [r7, #24]
 81021c6:	441a      	add	r2, r3
 81021c8:	68fb      	ldr	r3, [r7, #12]
 81021ca:	609a      	str	r2, [r3, #8]
    }
 81021cc:	bf00      	nop
 81021ce:	3730      	adds	r7, #48	@ 0x30
 81021d0:	46bd      	mov	sp, r7
 81021d2:	bdb0      	pop	{r4, r5, r7, pc}
 81021d4:	0811cc50 	.word	0x0811cc50
 81021d8:	aaaaaaab 	.word	0xaaaaaaab

081021dc <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 81021dc:	b480      	push	{r7}
 81021de:	b083      	sub	sp, #12
 81021e0:	af00      	add	r7, sp, #0
 81021e2:	6078      	str	r0, [r7, #4]
 81021e4:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 81021e6:	683b      	ldr	r3, [r7, #0]
 81021e8:	681a      	ldr	r2, [r3, #0]
 81021ea:	687b      	ldr	r3, [r7, #4]
 81021ec:	601a      	str	r2, [r3, #0]
 81021ee:	687b      	ldr	r3, [r7, #4]
 81021f0:	4618      	mov	r0, r3
 81021f2:	370c      	adds	r7, #12
 81021f4:	46bd      	mov	sp, r7
 81021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021fa:	4770      	bx	lr

081021fc <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 81021fc:	b480      	push	{r7}
 81021fe:	b083      	sub	sp, #12
 8102200:	af00      	add	r7, sp, #0
 8102202:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8102204:	687b      	ldr	r3, [r7, #4]
 8102206:	4618      	mov	r0, r3
 8102208:	370c      	adds	r7, #12
 810220a:	46bd      	mov	sp, r7
 810220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102210:	4770      	bx	lr

08102212 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8102212:	b590      	push	{r4, r7, lr}
 8102214:	b085      	sub	sp, #20
 8102216:	af00      	add	r7, sp, #0
 8102218:	6078      	str	r0, [r7, #4]
 810221a:	6039      	str	r1, [r7, #0]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 810221c:	6878      	ldr	r0, [r7, #4]
 810221e:	f7ff fe0c 	bl	8101e3a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8102222:	4604      	mov	r4, r0
 8102224:	6878      	ldr	r0, [r7, #4]
 8102226:	f000 fbd9 	bl	81029dc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 810222a:	4602      	mov	r2, r0
 810222c:	683b      	ldr	r3, [r7, #0]
 810222e:	4621      	mov	r1, r4
 8102230:	6878      	ldr	r0, [r7, #4]
 8102232:	f000 fbdf 	bl	81029f4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8102236:	4603      	mov	r3, r0
 8102238:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 810223a:	6878      	ldr	r0, [r7, #4]
 810223c:	f000 f825 	bl	810228a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8102240:	4603      	mov	r3, r0
 8102242:	60fb      	str	r3, [r7, #12]
 8102244:	f107 020c 	add.w	r2, r7, #12
 8102248:	f107 0308 	add.w	r3, r7, #8
 810224c:	4611      	mov	r1, r2
 810224e:	4618      	mov	r0, r3
 8102250:	f000 f83b 	bl	81022ca <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 8102254:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8102256:	2b00      	cmp	r3, #0
 8102258:	d10d      	bne.n	8102276 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x64>
	      || _M_impl._M_key_compare(__k,
 810225a:	687c      	ldr	r4, [r7, #4]
					_S_key(__j._M_node))) ? end() : __j;
 810225c:	68bb      	ldr	r3, [r7, #8]
	      || _M_impl._M_key_compare(__k,
 810225e:	4618      	mov	r0, r3
 8102260:	f000 fbf9 	bl	8102a56 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8102264:	4603      	mov	r3, r0
 8102266:	461a      	mov	r2, r3
 8102268:	6839      	ldr	r1, [r7, #0]
 810226a:	4620      	mov	r0, r4
 810226c:	f000 f85c 	bl	8102328 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8102270:	4603      	mov	r3, r0
 8102272:	2b00      	cmp	r3, #0
 8102274:	d004      	beq.n	8102280 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8102276:	6878      	ldr	r0, [r7, #4]
 8102278:	f000 f807 	bl	810228a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 810227c:	4603      	mov	r3, r0
 810227e:	e000      	b.n	8102282 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x70>
 8102280:	68bb      	ldr	r3, [r7, #8]
    }
 8102282:	4618      	mov	r0, r3
 8102284:	3714      	adds	r7, #20
 8102286:	46bd      	mov	sp, r7
 8102288:	bd90      	pop	{r4, r7, pc}

0810228a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 810228a:	b580      	push	{r7, lr}
 810228c:	b084      	sub	sp, #16
 810228e:	af00      	add	r7, sp, #0
 8102290:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8102292:	687b      	ldr	r3, [r7, #4]
 8102294:	1d1a      	adds	r2, r3, #4
 8102296:	f107 030c 	add.w	r3, r7, #12
 810229a:	4611      	mov	r1, r2
 810229c:	4618      	mov	r0, r3
 810229e:	f000 fa68 	bl	8102772 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 81022a2:	68fb      	ldr	r3, [r7, #12]
 81022a4:	4618      	mov	r0, r3
 81022a6:	3710      	adds	r7, #16
 81022a8:	46bd      	mov	sp, r7
 81022aa:	bd80      	pop	{r7, pc}

081022ac <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 81022ac:	b580      	push	{r7, lr}
 81022ae:	b082      	sub	sp, #8
 81022b0:	af00      	add	r7, sp, #0
 81022b2:	6078      	str	r0, [r7, #4]
 81022b4:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 81022b6:	687b      	ldr	r3, [r7, #4]
 81022b8:	6839      	ldr	r1, [r7, #0]
 81022ba:	4618      	mov	r0, r3
 81022bc:	f000 fbd7 	bl	8102a6e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 81022c0:	4603      	mov	r3, r0
 81022c2:	4618      	mov	r0, r3
 81022c4:	3708      	adds	r7, #8
 81022c6:	46bd      	mov	sp, r7
 81022c8:	bd80      	pop	{r7, pc}

081022ca <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 81022ca:	b480      	push	{r7}
 81022cc:	b083      	sub	sp, #12
 81022ce:	af00      	add	r7, sp, #0
 81022d0:	6078      	str	r0, [r7, #4]
 81022d2:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 81022d4:	687b      	ldr	r3, [r7, #4]
 81022d6:	681a      	ldr	r2, [r3, #0]
 81022d8:	683b      	ldr	r3, [r7, #0]
 81022da:	681b      	ldr	r3, [r3, #0]
 81022dc:	429a      	cmp	r2, r3
 81022de:	bf0c      	ite	eq
 81022e0:	2301      	moveq	r3, #1
 81022e2:	2300      	movne	r3, #0
 81022e4:	b2db      	uxtb	r3, r3
 81022e6:	4618      	mov	r0, r3
 81022e8:	370c      	adds	r7, #12
 81022ea:	46bd      	mov	sp, r7
 81022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022f0:	4770      	bx	lr

081022f2 <_ZNKSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 81022f2:	b590      	push	{r4, r7, lr}
 81022f4:	b083      	sub	sp, #12
 81022f6:	af00      	add	r7, sp, #0
 81022f8:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 81022fa:	687b      	ldr	r3, [r7, #4]
 81022fc:	4618      	mov	r0, r3
 81022fe:	f000 fbcd 	bl	8102a9c <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8102302:	bf00      	nop
 8102304:	4620      	mov	r0, r4
 8102306:	370c      	adds	r7, #12
 8102308:	46bd      	mov	sp, r7
 810230a:	bd90      	pop	{r4, r7, pc}

0810230c <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 810230c:	b580      	push	{r7, lr}
 810230e:	b082      	sub	sp, #8
 8102310:	af00      	add	r7, sp, #0
 8102312:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8102314:	687b      	ldr	r3, [r7, #4]
 8102316:	681b      	ldr	r3, [r3, #0]
 8102318:	4618      	mov	r0, r3
 810231a:	f000 fbca 	bl	8102ab2 <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 810231e:	4603      	mov	r3, r0
 8102320:	4618      	mov	r0, r3
 8102322:	3708      	adds	r7, #8
 8102324:	46bd      	mov	sp, r7
 8102326:	bd80      	pop	{r7, pc}

08102328 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8102328:	b480      	push	{r7}
 810232a:	b085      	sub	sp, #20
 810232c:	af00      	add	r7, sp, #0
 810232e:	60f8      	str	r0, [r7, #12]
 8102330:	60b9      	str	r1, [r7, #8]
 8102332:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8102334:	68bb      	ldr	r3, [r7, #8]
 8102336:	781a      	ldrb	r2, [r3, #0]
 8102338:	687b      	ldr	r3, [r7, #4]
 810233a:	781b      	ldrb	r3, [r3, #0]
 810233c:	429a      	cmp	r2, r3
 810233e:	bf34      	ite	cc
 8102340:	2301      	movcc	r3, #1
 8102342:	2300      	movcs	r3, #0
 8102344:	b2db      	uxtb	r3, r3
 8102346:	4618      	mov	r0, r3
 8102348:	3714      	adds	r7, #20
 810234a:	46bd      	mov	sp, r7
 810234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102350:	4770      	bx	lr

08102352 <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1ILb1ELb1EEES3_>:
	: _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
	constexpr
	tuple(const _Elements&... __elements)
 8102352:	b580      	push	{r7, lr}
 8102354:	b082      	sub	sp, #8
 8102356:	af00      	add	r7, sp, #0
 8102358:	6078      	str	r0, [r7, #4]
 810235a:	6039      	str	r1, [r7, #0]
	noexcept(__nothrow_constructible<const _Elements&...>())
	: _Inherited(__elements...) { }
 810235c:	687b      	ldr	r3, [r7, #4]
 810235e:	6839      	ldr	r1, [r7, #0]
 8102360:	4618      	mov	r0, r3
 8102362:	f000 fbb4 	bl	8102ace <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1ES3_>
 8102366:	687b      	ldr	r3, [r7, #4]
 8102368:	4618      	mov	r0, r3
 810236a:	3708      	adds	r7, #8
 810236c:	46bd      	mov	sp, r7
 810236e:	bd80      	pop	{r7, pc}

08102370 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8102370:	b480      	push	{r7}
 8102372:	b083      	sub	sp, #12
 8102374:	af00      	add	r7, sp, #0
 8102376:	6078      	str	r0, [r7, #4]
 8102378:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 810237a:	683b      	ldr	r3, [r7, #0]
 810237c:	681a      	ldr	r2, [r3, #0]
 810237e:	687b      	ldr	r3, [r7, #4]
 8102380:	601a      	str	r2, [r3, #0]
 8102382:	687b      	ldr	r3, [r7, #4]
 8102384:	4618      	mov	r0, r3
 8102386:	370c      	adds	r7, #12
 8102388:	46bd      	mov	sp, r7
 810238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810238e:	4770      	bx	lr

08102390 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8102390:	b5b0      	push	{r4, r5, r7, lr}
 8102392:	b08c      	sub	sp, #48	@ 0x30
 8102394:	af02      	add	r7, sp, #8
 8102396:	60f8      	str	r0, [r7, #12]
 8102398:	60b9      	str	r1, [r7, #8]
 810239a:	607a      	str	r2, [r7, #4]
 810239c:	603b      	str	r3, [r7, #0]
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
 810239e:	6878      	ldr	r0, [r7, #4]
 81023a0:	f000 fba4 	bl	8102aec <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 81023a4:	4604      	mov	r4, r0
 81023a6:	6838      	ldr	r0, [r7, #0]
 81023a8:	f000 fbab 	bl	8102b02 <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 81023ac:	4605      	mov	r5, r0
 81023ae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 81023b0:	f000 fbb2 	bl	8102b18 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 81023b4:	4603      	mov	r3, r0
 81023b6:	f107 001c 	add.w	r0, r7, #28
 81023ba:	9300      	str	r3, [sp, #0]
 81023bc:	462b      	mov	r3, r5
 81023be:	4622      	mov	r2, r4
 81023c0:	68f9      	ldr	r1, [r7, #12]
 81023c2:	f000 fbb4 	bl	8102b2e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEERSC_DpOT_>
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
 81023c6:	f107 031c 	add.w	r3, r7, #28
 81023ca:	4618      	mov	r0, r3
 81023cc:	f000 f991 	bl	81026f2 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>
 81023d0:	4603      	mov	r3, r0
 81023d2:	f107 0014 	add.w	r0, r7, #20
 81023d6:	68ba      	ldr	r2, [r7, #8]
 81023d8:	68f9      	ldr	r1, [r7, #12]
 81023da:	f000 fbcb 	bl	8102b74 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	if (__res.second)
 81023de:	69bb      	ldr	r3, [r7, #24]
 81023e0:	2b00      	cmp	r3, #0
 81023e2:	d009      	beq.n	81023f8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x68>
	  return __z._M_insert(__res);
 81023e4:	f107 001c 	add.w	r0, r7, #28
 81023e8:	f107 0314 	add.w	r3, r7, #20
 81023ec:	e893 0006 	ldmia.w	r3, {r1, r2}
 81023f0:	f000 f98d 	bl	810270e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>
 81023f4:	4604      	mov	r4, r0
 81023f6:	e007      	b.n	8102408 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x78>
	return iterator(__res.first);
 81023f8:	697a      	ldr	r2, [r7, #20]
 81023fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81023fe:	4611      	mov	r1, r2
 8102400:	4618      	mov	r0, r3
 8102402:	f000 f9b6 	bl	8102772 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8102406:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
      }
 8102408:	f107 031c 	add.w	r3, r7, #28
 810240c:	4618      	mov	r0, r3
 810240e:	f000 f8d6 	bl	81025be <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>
 8102412:	4623      	mov	r3, r4
 8102414:	4618      	mov	r0, r3
 8102416:	3728      	adds	r7, #40	@ 0x28
 8102418:	46bd      	mov	sp, r7
 810241a:	bdb0      	pop	{r4, r5, r7, pc}

0810241c <_ZSt4moveIRN19EventManagerCM4Task11EEventQueueEEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 810241c:	b480      	push	{r7}
 810241e:	b083      	sub	sp, #12
 8102420:	af00      	add	r7, sp, #0
 8102422:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8102424:	687b      	ldr	r3, [r7, #4]
 8102426:	4618      	mov	r0, r3
 8102428:	370c      	adds	r7, #12
 810242a:	46bd      	mov	sp, r7
 810242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102430:	4770      	bx	lr

08102432 <_ZNSt5tupleIJON19EventManagerCM4Task11EEventQueueEEEC1EOS3_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8102432:	b580      	push	{r7, lr}
 8102434:	b082      	sub	sp, #8
 8102436:	af00      	add	r7, sp, #0
 8102438:	6078      	str	r0, [r7, #4]
 810243a:	6039      	str	r1, [r7, #0]
 810243c:	687b      	ldr	r3, [r7, #4]
 810243e:	683a      	ldr	r2, [r7, #0]
 8102440:	4611      	mov	r1, r2
 8102442:	4618      	mov	r0, r3
 8102444:	f000 fcd7 	bl	8102df6 <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEEC1EOS3_>
 8102448:	687b      	ldr	r3, [r7, #4]
 810244a:	4618      	mov	r0, r3
 810244c:	3708      	adds	r7, #8
 810244e:	46bd      	mov	sp, r7
 8102450:	bd80      	pop	{r7, pc}

08102452 <_ZSt16forward_as_tupleIJN19EventManagerCM4Task11EEventQueueEEESt5tupleIJDpOT_EES5_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  /// std::forward_as_tuple
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
 8102452:	b580      	push	{r7, lr}
 8102454:	b082      	sub	sp, #8
 8102456:	af00      	add	r7, sp, #0
 8102458:	6078      	str	r0, [r7, #4]
 810245a:	6039      	str	r1, [r7, #0]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 810245c:	6838      	ldr	r0, [r7, #0]
 810245e:	f000 fcac 	bl	8102dba <_ZSt7forwardIN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS2_E4typeE>
 8102462:	4603      	mov	r3, r0
 8102464:	4619      	mov	r1, r3
 8102466:	6878      	ldr	r0, [r7, #4]
 8102468:	f000 fcb2 	bl	8102dd0 <_ZNSt5tupleIJON19EventManagerCM4Task11EEventQueueEEEC1IJS1_ELb1ELb1EEEDpOT_>
 810246c:	6878      	ldr	r0, [r7, #4]
 810246e:	3708      	adds	r7, #8
 8102470:	46bd      	mov	sp, r7
 8102472:	bd80      	pop	{r7, pc}

08102474 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8102474:	b5b0      	push	{r4, r5, r7, lr}
 8102476:	b08c      	sub	sp, #48	@ 0x30
 8102478:	af02      	add	r7, sp, #8
 810247a:	60f8      	str	r0, [r7, #12]
 810247c:	60b9      	str	r1, [r7, #8]
 810247e:	607a      	str	r2, [r7, #4]
 8102480:	603b      	str	r3, [r7, #0]
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
 8102482:	6878      	ldr	r0, [r7, #4]
 8102484:	f000 fb32 	bl	8102aec <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8102488:	4604      	mov	r4, r0
 810248a:	6838      	ldr	r0, [r7, #0]
 810248c:	f000 fcc3 	bl	8102e16 <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8102490:	4605      	mov	r5, r0
 8102492:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8102494:	f000 fb40 	bl	8102b18 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8102498:	4603      	mov	r3, r0
 810249a:	f107 001c 	add.w	r0, r7, #28
 810249e:	9300      	str	r3, [sp, #0]
 81024a0:	462b      	mov	r3, r5
 81024a2:	4622      	mov	r2, r4
 81024a4:	68f9      	ldr	r1, [r7, #12]
 81024a6:	f000 fcc1 	bl	8102e2c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJOS1_EESI_IJEEEEERSC_DpOT_>
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
 81024aa:	f107 031c 	add.w	r3, r7, #28
 81024ae:	4618      	mov	r0, r3
 81024b0:	f000 f91f 	bl	81026f2 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>
 81024b4:	4603      	mov	r3, r0
 81024b6:	f107 0014 	add.w	r0, r7, #20
 81024ba:	68ba      	ldr	r2, [r7, #8]
 81024bc:	68f9      	ldr	r1, [r7, #12]
 81024be:	f000 fb59 	bl	8102b74 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	if (__res.second)
 81024c2:	69bb      	ldr	r3, [r7, #24]
 81024c4:	2b00      	cmp	r3, #0
 81024c6:	d009      	beq.n	81024dc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x68>
	  return __z._M_insert(__res);
 81024c8:	f107 001c 	add.w	r0, r7, #28
 81024cc:	f107 0314 	add.w	r3, r7, #20
 81024d0:	e893 0006 	ldmia.w	r3, {r1, r2}
 81024d4:	f000 f91b 	bl	810270e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>
 81024d8:	4604      	mov	r4, r0
 81024da:	e007      	b.n	81024ec <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x78>
	return iterator(__res.first);
 81024dc:	697a      	ldr	r2, [r7, #20]
 81024de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81024e2:	4611      	mov	r1, r2
 81024e4:	4618      	mov	r0, r3
 81024e6:	f000 f944 	bl	8102772 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 81024ea:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
      }
 81024ec:	f107 031c 	add.w	r3, r7, #28
 81024f0:	4618      	mov	r0, r3
 81024f2:	f000 f864 	bl	81025be <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>
 81024f6:	4623      	mov	r3, r4
 81024f8:	4618      	mov	r0, r3
 81024fa:	3728      	adds	r7, #40	@ 0x28
 81024fc:	46bd      	mov	sp, r7
 81024fe:	bdb0      	pop	{r4, r5, r7, pc}

08102500 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8102500:	b480      	push	{r7}
 8102502:	b083      	sub	sp, #12
 8102504:	af00      	add	r7, sp, #0
 8102506:	6078      	str	r0, [r7, #4]
 8102508:	687b      	ldr	r3, [r7, #4]
 810250a:	4618      	mov	r0, r3
 810250c:	370c      	adds	r7, #12
 810250e:	46bd      	mov	sp, r7
 8102510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102514:	4770      	bx	lr

08102516 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8102516:	b480      	push	{r7}
 8102518:	b083      	sub	sp, #12
 810251a:	af00      	add	r7, sp, #0
 810251c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 810251e:	687b      	ldr	r3, [r7, #4]
 8102520:	68db      	ldr	r3, [r3, #12]
 8102522:	4618      	mov	r0, r3
 8102524:	370c      	adds	r7, #12
 8102526:	46bd      	mov	sp, r7
 8102528:	f85d 7b04 	ldr.w	r7, [sp], #4
 810252c:	4770      	bx	lr

0810252e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 810252e:	b480      	push	{r7}
 8102530:	b083      	sub	sp, #12
 8102532:	af00      	add	r7, sp, #0
 8102534:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8102536:	687b      	ldr	r3, [r7, #4]
 8102538:	689b      	ldr	r3, [r3, #8]
 810253a:	4618      	mov	r0, r3
 810253c:	370c      	adds	r7, #12
 810253e:	46bd      	mov	sp, r7
 8102540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102544:	4770      	bx	lr

08102546 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8102546:	b580      	push	{r7, lr}
 8102548:	b082      	sub	sp, #8
 810254a:	af00      	add	r7, sp, #0
 810254c:	6078      	str	r0, [r7, #4]
 810254e:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8102550:	6839      	ldr	r1, [r7, #0]
 8102552:	6878      	ldr	r0, [r7, #4]
 8102554:	f000 fc8d 	bl	8102e72 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8102558:	6839      	ldr	r1, [r7, #0]
 810255a:	6878      	ldr	r0, [r7, #4]
 810255c:	f000 fc9e 	bl	8102e9c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8102560:	bf00      	nop
 8102562:	3708      	adds	r7, #8
 8102564:	46bd      	mov	sp, r7
 8102566:	bd80      	pop	{r7, pc}

08102568 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE9_M_mbeginEv>:
      _M_mbegin() const _GLIBCXX_NOEXCEPT
 8102568:	b480      	push	{r7}
 810256a:	b083      	sub	sp, #12
 810256c:	af00      	add	r7, sp, #0
 810256e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8102570:	687b      	ldr	r3, [r7, #4]
 8102572:	689b      	ldr	r3, [r3, #8]
 8102574:	4618      	mov	r0, r3
 8102576:	370c      	adds	r7, #12
 8102578:	46bd      	mov	sp, r7
 810257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810257e:	4770      	bx	lr

08102580 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRS1_RS5_EEERSC_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
 8102580:	b590      	push	{r4, r7, lr}
 8102582:	b085      	sub	sp, #20
 8102584:	af00      	add	r7, sp, #0
 8102586:	60f8      	str	r0, [r7, #12]
 8102588:	60b9      	str	r1, [r7, #8]
 810258a:	607a      	str	r2, [r7, #4]
 810258c:	603b      	str	r3, [r7, #0]
	  : _M_t(__t),
 810258e:	68fb      	ldr	r3, [r7, #12]
 8102590:	68ba      	ldr	r2, [r7, #8]
 8102592:	601a      	str	r2, [r3, #0]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 8102594:	6878      	ldr	r0, [r7, #4]
 8102596:	f7ff fc5c 	bl	8101e52 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 810259a:	4604      	mov	r4, r0
 810259c:	6838      	ldr	r0, [r7, #0]
 810259e:	f7ff fc63 	bl	8101e68 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 81025a2:	4603      	mov	r3, r0
 81025a4:	461a      	mov	r2, r3
 81025a6:	4621      	mov	r1, r4
 81025a8:	68b8      	ldr	r0, [r7, #8]
 81025aa:	f000 fc89 	bl	8102ec0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRS1_RS5_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 81025ae:	4602      	mov	r2, r0
 81025b0:	68fb      	ldr	r3, [r7, #12]
 81025b2:	605a      	str	r2, [r3, #4]
	  { }
 81025b4:	68fb      	ldr	r3, [r7, #12]
 81025b6:	4618      	mov	r0, r3
 81025b8:	3714      	adds	r7, #20
 81025ba:	46bd      	mov	sp, r7
 81025bc:	bd90      	pop	{r4, r7, pc}

081025be <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>:
	~_Auto_node()
 81025be:	b580      	push	{r7, lr}
 81025c0:	b082      	sub	sp, #8
 81025c2:	af00      	add	r7, sp, #0
 81025c4:	6078      	str	r0, [r7, #4]
	  if (_M_node)
 81025c6:	687b      	ldr	r3, [r7, #4]
 81025c8:	685b      	ldr	r3, [r3, #4]
 81025ca:	2b00      	cmp	r3, #0
 81025cc:	d007      	beq.n	81025de <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev+0x20>
	    _M_t._M_drop_node(_M_node);
 81025ce:	687b      	ldr	r3, [r7, #4]
 81025d0:	681a      	ldr	r2, [r3, #0]
 81025d2:	687b      	ldr	r3, [r7, #4]
 81025d4:	685b      	ldr	r3, [r3, #4]
 81025d6:	4619      	mov	r1, r3
 81025d8:	4610      	mov	r0, r2
 81025da:	f7ff ffb4 	bl	8102546 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	}
 81025de:	687b      	ldr	r3, [r7, #4]
 81025e0:	4618      	mov	r0, r3
 81025e2:	3708      	adds	r7, #8
 81025e4:	46bd      	mov	sp, r7
 81025e6:	bd80      	pop	{r7, pc}

081025e8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 81025e8:	b590      	push	{r4, r7, lr}
 81025ea:	b08b      	sub	sp, #44	@ 0x2c
 81025ec:	af00      	add	r7, sp, #0
 81025ee:	60f8      	str	r0, [r7, #12]
 81025f0:	60b9      	str	r1, [r7, #8]
 81025f2:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 81025f4:	68b8      	ldr	r0, [r7, #8]
 81025f6:	f7ff fc20 	bl	8101e3a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 81025fa:	4603      	mov	r3, r0
 81025fc:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 81025fe:	68b8      	ldr	r0, [r7, #8]
 8102600:	f000 f9ec 	bl	81029dc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8102604:	4603      	mov	r3, r0
 8102606:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8102608:	2301      	movs	r3, #1
 810260a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      while (__x != 0)
 810260e:	e01f      	b.n	8102650 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x68>
	  __y = __x;
 8102610:	69bb      	ldr	r3, [r7, #24]
 8102612:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8102614:	68bc      	ldr	r4, [r7, #8]
 8102616:	69bb      	ldr	r3, [r7, #24]
 8102618:	4618      	mov	r0, r3
 810261a:	f000 fc6d 	bl	8102ef8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 810261e:	4603      	mov	r3, r0
 8102620:	461a      	mov	r2, r3
 8102622:	6879      	ldr	r1, [r7, #4]
 8102624:	4620      	mov	r0, r4
 8102626:	f7ff fe7f 	bl	8102328 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 810262a:	4603      	mov	r3, r0
 810262c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8102630:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8102634:	2b00      	cmp	r3, #0
 8102636:	d005      	beq.n	8102644 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x5c>
 8102638:	69bb      	ldr	r3, [r7, #24]
 810263a:	4618      	mov	r0, r3
 810263c:	f7ff ff77 	bl	810252e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8102640:	4603      	mov	r3, r0
 8102642:	e004      	b.n	810264e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 8102644:	69bb      	ldr	r3, [r7, #24]
 8102646:	4618      	mov	r0, r3
 8102648:	f7ff ff65 	bl	8102516 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 810264c:	4603      	mov	r3, r0
 810264e:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8102650:	69bb      	ldr	r3, [r7, #24]
 8102652:	2b00      	cmp	r3, #0
 8102654:	d1dc      	bne.n	8102610 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x28>
      iterator __j = iterator(__y);
 8102656:	697a      	ldr	r2, [r7, #20]
 8102658:	f107 0310 	add.w	r3, r7, #16
 810265c:	4611      	mov	r1, r2
 810265e:	4618      	mov	r0, r3
 8102660:	f000 f887 	bl	8102772 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8102664:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8102668:	2b00      	cmp	r3, #0
 810266a:	d01d      	beq.n	81026a8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc0>
	  if (__j == begin())
 810266c:	68b8      	ldr	r0, [r7, #8]
 810266e:	f000 fc56 	bl	8102f1e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 8102672:	4603      	mov	r3, r0
 8102674:	61fb      	str	r3, [r7, #28]
 8102676:	f107 021c 	add.w	r2, r7, #28
 810267a:	f107 0310 	add.w	r3, r7, #16
 810267e:	4611      	mov	r1, r2
 8102680:	4618      	mov	r0, r3
 8102682:	f7ff fe22 	bl	81022ca <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 8102686:	4603      	mov	r3, r0
 8102688:	2b00      	cmp	r3, #0
 810268a:	d008      	beq.n	810269e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xb6>
	    return _Res(__x, __y);
 810268c:	f107 0214 	add.w	r2, r7, #20
 8102690:	f107 0318 	add.w	r3, r7, #24
 8102694:	4619      	mov	r1, r3
 8102696:	68f8      	ldr	r0, [r7, #12]
 8102698:	f000 fc52 	bl	8102f40 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEERS1_Lb1EEEOT_OT0_>
 810269c:	e025      	b.n	81026ea <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
	    --__j;
 810269e:	f107 0310 	add.w	r3, r7, #16
 81026a2:	4618      	mov	r0, r3
 81026a4:	f000 fc65 	bl	8102f72 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 81026a8:	68bc      	ldr	r4, [r7, #8]
 81026aa:	693b      	ldr	r3, [r7, #16]
 81026ac:	4618      	mov	r0, r3
 81026ae:	f000 f9d2 	bl	8102a56 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 81026b2:	4603      	mov	r3, r0
 81026b4:	687a      	ldr	r2, [r7, #4]
 81026b6:	4619      	mov	r1, r3
 81026b8:	4620      	mov	r0, r4
 81026ba:	f7ff fe35 	bl	8102328 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 81026be:	4603      	mov	r3, r0
 81026c0:	2b00      	cmp	r3, #0
 81026c2:	d008      	beq.n	81026d6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xee>
	return _Res(__x, __y);
 81026c4:	f107 0214 	add.w	r2, r7, #20
 81026c8:	f107 0318 	add.w	r3, r7, #24
 81026cc:	4619      	mov	r1, r3
 81026ce:	68f8      	ldr	r0, [r7, #12]
 81026d0:	f000 fc36 	bl	8102f40 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEERS1_Lb1EEEOT_OT0_>
 81026d4:	e009      	b.n	81026ea <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
      return _Res(__j._M_node, 0);
 81026d6:	2300      	movs	r3, #0
 81026d8:	623b      	str	r3, [r7, #32]
 81026da:	f107 0220 	add.w	r2, r7, #32
 81026de:	f107 0310 	add.w	r3, r7, #16
 81026e2:	4619      	mov	r1, r3
 81026e4:	68f8      	ldr	r0, [r7, #12]
 81026e6:	f000 fc55 	bl	8102f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 81026ea:	68f8      	ldr	r0, [r7, #12]
 81026ec:	372c      	adds	r7, #44	@ 0x2c
 81026ee:	46bd      	mov	sp, r7
 81026f0:	bd90      	pop	{r4, r7, pc}

081026f2 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>:
	_M_key() const
 81026f2:	b580      	push	{r7, lr}
 81026f4:	b082      	sub	sp, #8
 81026f6:	af00      	add	r7, sp, #0
 81026f8:	6078      	str	r0, [r7, #4]
	{ return _S_key(_M_node); }
 81026fa:	687b      	ldr	r3, [r7, #4]
 81026fc:	685b      	ldr	r3, [r3, #4]
 81026fe:	4618      	mov	r0, r3
 8102700:	f000 fbfa 	bl	8102ef8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8102704:	4603      	mov	r3, r0
 8102706:	4618      	mov	r0, r3
 8102708:	3708      	adds	r7, #8
 810270a:	46bd      	mov	sp, r7
 810270c:	bd80      	pop	{r7, pc}

0810270e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>:
	_M_insert(pair<_Base_ptr, _Base_ptr> __p)
 810270e:	b580      	push	{r7, lr}
 8102710:	b086      	sub	sp, #24
 8102712:	af00      	add	r7, sp, #0
 8102714:	60f8      	str	r0, [r7, #12]
 8102716:	1d3b      	adds	r3, r7, #4
 8102718:	e883 0006 	stmia.w	r3, {r1, r2}
	  auto __it = _M_t._M_insert_node(__p.first, __p.second, _M_node);
 810271c:	68fb      	ldr	r3, [r7, #12]
 810271e:	6818      	ldr	r0, [r3, #0]
 8102720:	6879      	ldr	r1, [r7, #4]
 8102722:	68ba      	ldr	r2, [r7, #8]
 8102724:	68fb      	ldr	r3, [r7, #12]
 8102726:	685b      	ldr	r3, [r3, #4]
 8102728:	f000 fc49 	bl	8102fbe <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 810272c:	4603      	mov	r3, r0
 810272e:	617b      	str	r3, [r7, #20]
	  _M_node = nullptr;
 8102730:	68fb      	ldr	r3, [r7, #12]
 8102732:	2200      	movs	r2, #0
 8102734:	605a      	str	r2, [r3, #4]
	  return __it;
 8102736:	697b      	ldr	r3, [r7, #20]
	}
 8102738:	4618      	mov	r0, r3
 810273a:	3718      	adds	r7, #24
 810273c:	46bd      	mov	sp, r7
 810273e:	bd80      	pop	{r7, pc}

08102740 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEbEC1IS7_bLb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 8102740:	b580      	push	{r7, lr}
 8102742:	b084      	sub	sp, #16
 8102744:	af00      	add	r7, sp, #0
 8102746:	60f8      	str	r0, [r7, #12]
 8102748:	60b9      	str	r1, [r7, #8]
 810274a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 810274c:	68b8      	ldr	r0, [r7, #8]
 810274e:	f000 fc73 	bl	8103038 <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8102752:	4602      	mov	r2, r0
 8102754:	68fb      	ldr	r3, [r7, #12]
 8102756:	6812      	ldr	r2, [r2, #0]
 8102758:	601a      	str	r2, [r3, #0]
 810275a:	6878      	ldr	r0, [r7, #4]
 810275c:	f000 fc77 	bl	810304e <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8102760:	4603      	mov	r3, r0
 8102762:	781a      	ldrb	r2, [r3, #0]
 8102764:	68fb      	ldr	r3, [r7, #12]
 8102766:	711a      	strb	r2, [r3, #4]
 8102768:	68fb      	ldr	r3, [r7, #12]
 810276a:	4618      	mov	r0, r3
 810276c:	3710      	adds	r7, #16
 810276e:	46bd      	mov	sp, r7
 8102770:	bd80      	pop	{r7, pc}

08102772 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8102772:	b480      	push	{r7}
 8102774:	b083      	sub	sp, #12
 8102776:	af00      	add	r7, sp, #0
 8102778:	6078      	str	r0, [r7, #4]
 810277a:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 810277c:	687b      	ldr	r3, [r7, #4]
 810277e:	683a      	ldr	r2, [r7, #0]
 8102780:	601a      	str	r2, [r3, #0]
 8102782:	687b      	ldr	r3, [r7, #4]
 8102784:	4618      	mov	r0, r3
 8102786:	370c      	adds	r7, #12
 8102788:	46bd      	mov	sp, r7
 810278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810278e:	4770      	bx	lr

08102790 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8102790:	b480      	push	{r7}
 8102792:	b083      	sub	sp, #12
 8102794:	af00      	add	r7, sp, #0
 8102796:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8102798:	687b      	ldr	r3, [r7, #4]
 810279a:	695b      	ldr	r3, [r3, #20]
 810279c:	4618      	mov	r0, r3
 810279e:	370c      	adds	r7, #12
 81027a0:	46bd      	mov	sp, r7
 81027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027a6:	4770      	bx	lr

081027a8 <_ZSt8_DestroyIP8SMessageEvT_S2_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 81027a8:	b580      	push	{r7, lr}
 81027aa:	b082      	sub	sp, #8
 81027ac:	af00      	add	r7, sp, #0
 81027ae:	6078      	str	r0, [r7, #4]
 81027b0:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 81027b2:	6839      	ldr	r1, [r7, #0]
 81027b4:	6878      	ldr	r0, [r7, #4]
 81027b6:	f000 fc55 	bl	8103064 <_ZNSt12_Destroy_auxILb1EE9__destroyIP8SMessageEEvT_S4_>
    }
 81027ba:	bf00      	nop
 81027bc:	3708      	adds	r7, #8
 81027be:	46bd      	mov	sp, r7
 81027c0:	bd80      	pop	{r7, pc}

081027c2 <_ZNSt15__new_allocatorI8SMessageEC1Ev>:
 81027c2:	b480      	push	{r7}
 81027c4:	b083      	sub	sp, #12
 81027c6:	af00      	add	r7, sp, #0
 81027c8:	6078      	str	r0, [r7, #4]
 81027ca:	687b      	ldr	r3, [r7, #4]
 81027cc:	4618      	mov	r0, r3
 81027ce:	370c      	adds	r7, #12
 81027d0:	46bd      	mov	sp, r7
 81027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027d6:	4770      	bx	lr

081027d8 <_ZNSt16allocator_traitsISaI8SMessageEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 81027d8:	b580      	push	{r7, lr}
 81027da:	b084      	sub	sp, #16
 81027dc:	af00      	add	r7, sp, #0
 81027de:	60f8      	str	r0, [r7, #12]
 81027e0:	60b9      	str	r1, [r7, #8]
 81027e2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 81027e4:	687a      	ldr	r2, [r7, #4]
 81027e6:	68b9      	ldr	r1, [r7, #8]
 81027e8:	68f8      	ldr	r0, [r7, #12]
 81027ea:	f000 fc46 	bl	810307a <_ZNSt15__new_allocatorI8SMessageE10deallocateEPS0_j>
 81027ee:	bf00      	nop
 81027f0:	3710      	adds	r7, #16
 81027f2:	46bd      	mov	sp, r7
 81027f4:	bd80      	pop	{r7, pc}

081027f6 <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81027f6:	b480      	push	{r7}
 81027f8:	b083      	sub	sp, #12
 81027fa:	af00      	add	r7, sp, #0
 81027fc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81027fe:	687b      	ldr	r3, [r7, #4]
 8102800:	4618      	mov	r0, r3
 8102802:	370c      	adds	r7, #12
 8102804:	46bd      	mov	sp, r7
 8102806:	f85d 7b04 	ldr.w	r7, [sp], #4
 810280a:	4770      	bx	lr

0810280c <_ZNSt15__new_allocatorI8SMessageE9constructIS0_JRKS0_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 810280c:	b5b0      	push	{r4, r5, r7, lr}
 810280e:	b084      	sub	sp, #16
 8102810:	af00      	add	r7, sp, #0
 8102812:	60f8      	str	r0, [r7, #12]
 8102814:	60b9      	str	r1, [r7, #8]
 8102816:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8102818:	68bb      	ldr	r3, [r7, #8]
 810281a:	4619      	mov	r1, r3
 810281c:	2018      	movs	r0, #24
 810281e:	f7fe facb 	bl	8100db8 <_ZnwjPv>
 8102822:	4604      	mov	r4, r0
 8102824:	6878      	ldr	r0, [r7, #4]
 8102826:	f7ff ffe6 	bl	81027f6 <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>
 810282a:	4603      	mov	r3, r0
 810282c:	461d      	mov	r5, r3
 810282e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8102830:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8102832:	e895 0003 	ldmia.w	r5, {r0, r1}
 8102836:	e884 0003 	stmia.w	r4, {r0, r1}
 810283a:	bf00      	nop
 810283c:	3710      	adds	r7, #16
 810283e:	46bd      	mov	sp, r7
 8102840:	bdb0      	pop	{r4, r5, r7, pc}

08102842 <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8102842:	b480      	push	{r7}
 8102844:	b083      	sub	sp, #12
 8102846:	af00      	add	r7, sp, #0
 8102848:	6078      	str	r0, [r7, #4]
 810284a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 810284c:	683b      	ldr	r3, [r7, #0]
 810284e:	681a      	ldr	r2, [r3, #0]
 8102850:	687b      	ldr	r3, [r7, #4]
 8102852:	601a      	str	r2, [r3, #0]
 8102854:	687b      	ldr	r3, [r7, #4]
 8102856:	4618      	mov	r0, r3
 8102858:	370c      	adds	r7, #12
 810285a:	46bd      	mov	sp, r7
 810285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102860:	4770      	bx	lr

08102862 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8102862:	b590      	push	{r4, r7, lr}
 8102864:	b087      	sub	sp, #28
 8102866:	af00      	add	r7, sp, #0
 8102868:	60f8      	str	r0, [r7, #12]
 810286a:	60b9      	str	r1, [r7, #8]
 810286c:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 810286e:	68f8      	ldr	r0, [r7, #12]
 8102870:	f000 fc16 	bl	81030a0 <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>
 8102874:	4604      	mov	r4, r0
 8102876:	68f8      	ldr	r0, [r7, #12]
 8102878:	f000 fc24 	bl	81030c4 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 810287c:	4603      	mov	r3, r0
 810287e:	1ae2      	subs	r2, r4, r3
 8102880:	68bb      	ldr	r3, [r7, #8]
 8102882:	429a      	cmp	r2, r3
 8102884:	bf34      	ite	cc
 8102886:	2301      	movcc	r3, #1
 8102888:	2300      	movcs	r3, #0
 810288a:	b2db      	uxtb	r3, r3
 810288c:	2b00      	cmp	r3, #0
 810288e:	d002      	beq.n	8102896 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8102890:	6878      	ldr	r0, [r7, #4]
 8102892:	f019 f8e1 	bl	811ba58 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8102896:	68f8      	ldr	r0, [r7, #12]
 8102898:	f000 fc14 	bl	81030c4 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 810289c:	4604      	mov	r4, r0
 810289e:	68f8      	ldr	r0, [r7, #12]
 81028a0:	f000 fc10 	bl	81030c4 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 81028a4:	4603      	mov	r3, r0
 81028a6:	613b      	str	r3, [r7, #16]
 81028a8:	f107 0208 	add.w	r2, r7, #8
 81028ac:	f107 0310 	add.w	r3, r7, #16
 81028b0:	4611      	mov	r1, r2
 81028b2:	4618      	mov	r0, r3
 81028b4:	f000 fc1c 	bl	81030f0 <_ZSt3maxIjERKT_S2_S2_>
 81028b8:	4603      	mov	r3, r0
 81028ba:	681b      	ldr	r3, [r3, #0]
 81028bc:	4423      	add	r3, r4
 81028be:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 81028c0:	68f8      	ldr	r0, [r7, #12]
 81028c2:	f000 fbff 	bl	81030c4 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 81028c6:	4602      	mov	r2, r0
 81028c8:	697b      	ldr	r3, [r7, #20]
 81028ca:	4293      	cmp	r3, r2
 81028cc:	d306      	bcc.n	81028dc <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x7a>
 81028ce:	68f8      	ldr	r0, [r7, #12]
 81028d0:	f000 fbe6 	bl	81030a0 <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>
 81028d4:	4602      	mov	r2, r0
 81028d6:	697b      	ldr	r3, [r7, #20]
 81028d8:	4293      	cmp	r3, r2
 81028da:	d904      	bls.n	81028e6 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x84>
 81028dc:	68f8      	ldr	r0, [r7, #12]
 81028de:	f000 fbdf 	bl	81030a0 <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>
 81028e2:	4603      	mov	r3, r0
 81028e4:	e000      	b.n	81028e8 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x86>
 81028e6:	697b      	ldr	r3, [r7, #20]
      }
 81028e8:	4618      	mov	r0, r3
 81028ea:	371c      	adds	r7, #28
 81028ec:	46bd      	mov	sp, r7
 81028ee:	bd90      	pop	{r4, r7, pc}

081028f0 <_ZNSt6vectorI8SMessageSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 81028f0:	b580      	push	{r7, lr}
 81028f2:	b084      	sub	sp, #16
 81028f4:	af00      	add	r7, sp, #0
 81028f6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 81028f8:	687a      	ldr	r2, [r7, #4]
 81028fa:	f107 030c 	add.w	r3, r7, #12
 81028fe:	4611      	mov	r1, r2
 8102900:	4618      	mov	r0, r3
 8102902:	f7ff ff9e 	bl	8102842 <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8102906:	68fb      	ldr	r3, [r7, #12]
 8102908:	4618      	mov	r0, r3
 810290a:	3710      	adds	r7, #16
 810290c:	46bd      	mov	sp, r7
 810290e:	bd80      	pop	{r7, pc}

08102910 <_ZN9__gnu_cxxmiIP8SMessageSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8102910:	b590      	push	{r4, r7, lr}
 8102912:	b083      	sub	sp, #12
 8102914:	af00      	add	r7, sp, #0
 8102916:	6078      	str	r0, [r7, #4]
 8102918:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 810291a:	6878      	ldr	r0, [r7, #4]
 810291c:	f000 f83a 	bl	8102994 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8102920:	4603      	mov	r3, r0
 8102922:	681c      	ldr	r4, [r3, #0]
 8102924:	6838      	ldr	r0, [r7, #0]
 8102926:	f000 f835 	bl	8102994 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 810292a:	4603      	mov	r3, r0
 810292c:	681b      	ldr	r3, [r3, #0]
 810292e:	1ae3      	subs	r3, r4, r3
 8102930:	10db      	asrs	r3, r3, #3
 8102932:	4a03      	ldr	r2, [pc, #12]	@ (8102940 <_ZN9__gnu_cxxmiIP8SMessageSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_+0x30>)
 8102934:	fb02 f303 	mul.w	r3, r2, r3
 8102938:	4618      	mov	r0, r3
 810293a:	370c      	adds	r7, #12
 810293c:	46bd      	mov	sp, r7
 810293e:	bd90      	pop	{r4, r7, pc}
 8102940:	aaaaaaab 	.word	0xaaaaaaab

08102944 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8102944:	b580      	push	{r7, lr}
 8102946:	b082      	sub	sp, #8
 8102948:	af00      	add	r7, sp, #0
 810294a:	6078      	str	r0, [r7, #4]
 810294c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 810294e:	683b      	ldr	r3, [r7, #0]
 8102950:	2b00      	cmp	r3, #0
 8102952:	d006      	beq.n	8102962 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj+0x1e>
 8102954:	687b      	ldr	r3, [r7, #4]
 8102956:	6839      	ldr	r1, [r7, #0]
 8102958:	4618      	mov	r0, r3
 810295a:	f000 fbdd 	bl	8103118 <_ZNSt16allocator_traitsISaI8SMessageEE8allocateERS1_j>
 810295e:	4603      	mov	r3, r0
 8102960:	e000      	b.n	8102964 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj+0x20>
 8102962:	2300      	movs	r3, #0
      }
 8102964:	4618      	mov	r0, r3
 8102966:	3708      	adds	r7, #8
 8102968:	46bd      	mov	sp, r7
 810296a:	bd80      	pop	{r7, pc}

0810296c <_ZNSt6vectorI8SMessageSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 810296c:	b590      	push	{r4, r7, lr}
 810296e:	b087      	sub	sp, #28
 8102970:	af02      	add	r7, sp, #8
 8102972:	60f8      	str	r0, [r7, #12]
 8102974:	60b9      	str	r1, [r7, #8]
 8102976:	607a      	str	r2, [r7, #4]
 8102978:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 810297a:	f88d 4000 	strb.w	r4, [sp]
 810297e:	683b      	ldr	r3, [r7, #0]
 8102980:	687a      	ldr	r2, [r7, #4]
 8102982:	68b9      	ldr	r1, [r7, #8]
 8102984:	68f8      	ldr	r0, [r7, #12]
 8102986:	f000 fbd6 	bl	8103136 <_ZNSt6vectorI8SMessageSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 810298a:	4603      	mov	r3, r0
      }
 810298c:	4618      	mov	r0, r3
 810298e:	3714      	adds	r7, #20
 8102990:	46bd      	mov	sp, r7
 8102992:	bd90      	pop	{r4, r7, pc}

08102994 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8102994:	b480      	push	{r7}
 8102996:	b083      	sub	sp, #12
 8102998:	af00      	add	r7, sp, #0
 810299a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 810299c:	687b      	ldr	r3, [r7, #4]
 810299e:	4618      	mov	r0, r3
 81029a0:	370c      	adds	r7, #12
 81029a2:	46bd      	mov	sp, r7
 81029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029a8:	4770      	bx	lr

081029aa <_ZSt34__uninitialized_move_if_noexcept_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>:

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 81029aa:	b590      	push	{r4, r7, lr}
 81029ac:	b085      	sub	sp, #20
 81029ae:	af00      	add	r7, sp, #0
 81029b0:	60f8      	str	r0, [r7, #12]
 81029b2:	60b9      	str	r1, [r7, #8]
 81029b4:	607a      	str	r2, [r7, #4]
 81029b6:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 81029b8:	68f8      	ldr	r0, [r7, #12]
 81029ba:	f000 fbce 	bl	810315a <_ZSt32__make_move_if_noexcept_iteratorI8SMessageSt13move_iteratorIPS0_EET0_PT_>
 81029be:	4604      	mov	r4, r0
 81029c0:	68b8      	ldr	r0, [r7, #8]
 81029c2:	f000 fbca 	bl	810315a <_ZSt32__make_move_if_noexcept_iteratorI8SMessageSt13move_iteratorIPS0_EET0_PT_>
 81029c6:	4601      	mov	r1, r0
 81029c8:	683b      	ldr	r3, [r7, #0]
 81029ca:	687a      	ldr	r2, [r7, #4]
 81029cc:	4620      	mov	r0, r4
 81029ce:	f000 fbd3 	bl	8103178 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP8SMessageES2_S1_ET0_T_S5_S4_RSaIT1_E>
 81029d2:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 81029d4:	4618      	mov	r0, r3
 81029d6:	3714      	adds	r7, #20
 81029d8:	46bd      	mov	sp, r7
 81029da:	bd90      	pop	{r4, r7, pc}

081029dc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 81029dc:	b480      	push	{r7}
 81029de:	b083      	sub	sp, #12
 81029e0:	af00      	add	r7, sp, #0
 81029e2:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 81029e4:	687b      	ldr	r3, [r7, #4]
 81029e6:	3304      	adds	r3, #4
 81029e8:	4618      	mov	r0, r3
 81029ea:	370c      	adds	r7, #12
 81029ec:	46bd      	mov	sp, r7
 81029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029f2:	4770      	bx	lr

081029f4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 81029f4:	b590      	push	{r4, r7, lr}
 81029f6:	b087      	sub	sp, #28
 81029f8:	af00      	add	r7, sp, #0
 81029fa:	60f8      	str	r0, [r7, #12]
 81029fc:	60b9      	str	r1, [r7, #8]
 81029fe:	607a      	str	r2, [r7, #4]
 8102a00:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8102a02:	e01a      	b.n	8102a3a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8102a04:	68fc      	ldr	r4, [r7, #12]
 8102a06:	68b8      	ldr	r0, [r7, #8]
 8102a08:	f000 fa76 	bl	8102ef8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8102a0c:	4603      	mov	r3, r0
 8102a0e:	683a      	ldr	r2, [r7, #0]
 8102a10:	4619      	mov	r1, r3
 8102a12:	4620      	mov	r0, r4
 8102a14:	f7ff fc88 	bl	8102328 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8102a18:	4603      	mov	r3, r0
 8102a1a:	f083 0301 	eor.w	r3, r3, #1
 8102a1e:	b2db      	uxtb	r3, r3
 8102a20:	2b00      	cmp	r3, #0
 8102a22:	d006      	beq.n	8102a32 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x3e>
	  __y = __x, __x = _S_left(__x);
 8102a24:	68bb      	ldr	r3, [r7, #8]
 8102a26:	607b      	str	r3, [r7, #4]
 8102a28:	68b8      	ldr	r0, [r7, #8]
 8102a2a:	f7ff fd80 	bl	810252e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8102a2e:	60b8      	str	r0, [r7, #8]
 8102a30:	e003      	b.n	8102a3a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __x = _S_right(__x);
 8102a32:	68b8      	ldr	r0, [r7, #8]
 8102a34:	f7ff fd6f 	bl	8102516 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8102a38:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8102a3a:	68bb      	ldr	r3, [r7, #8]
 8102a3c:	2b00      	cmp	r3, #0
 8102a3e:	d1e1      	bne.n	8102a04 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x10>
      return iterator(__y);
 8102a40:	f107 0314 	add.w	r3, r7, #20
 8102a44:	6879      	ldr	r1, [r7, #4]
 8102a46:	4618      	mov	r0, r3
 8102a48:	f7ff fe93 	bl	8102772 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8102a4c:	697b      	ldr	r3, [r7, #20]
    }
 8102a4e:	4618      	mov	r0, r3
 8102a50:	371c      	adds	r7, #28
 8102a52:	46bd      	mov	sp, r7
 8102a54:	bd90      	pop	{r4, r7, pc}

08102a56 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8102a56:	b580      	push	{r7, lr}
 8102a58:	b082      	sub	sp, #8
 8102a5a:	af00      	add	r7, sp, #0
 8102a5c:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8102a5e:	6878      	ldr	r0, [r7, #4]
 8102a60:	f000 fa4a 	bl	8102ef8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8102a64:	4603      	mov	r3, r0
 8102a66:	4618      	mov	r0, r3
 8102a68:	3708      	adds	r7, #8
 8102a6a:	46bd      	mov	sp, r7
 8102a6c:	bd80      	pop	{r7, pc}

08102a6e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 8102a6e:	b590      	push	{r4, r7, lr}
 8102a70:	b083      	sub	sp, #12
 8102a72:	af00      	add	r7, sp, #0
 8102a74:	6078      	str	r0, [r7, #4]
 8102a76:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8102a78:	6878      	ldr	r0, [r7, #4]
 8102a7a:	f7ff f9de 	bl	8101e3a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8102a7e:	4604      	mov	r4, r0
 8102a80:	6878      	ldr	r0, [r7, #4]
 8102a82:	f7ff ffab 	bl	81029dc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8102a86:	4602      	mov	r2, r0
 8102a88:	683b      	ldr	r3, [r7, #0]
 8102a8a:	4621      	mov	r1, r4
 8102a8c:	6878      	ldr	r0, [r7, #4]
 8102a8e:	f7ff ffb1 	bl	81029f4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8102a92:	4603      	mov	r3, r0
 8102a94:	4618      	mov	r0, r3
 8102a96:	370c      	adds	r7, #12
 8102a98:	46bd      	mov	sp, r7
 8102a9a:	bd90      	pop	{r4, r7, pc}

08102a9c <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 8102a9c:	b480      	push	{r7}
 8102a9e:	b083      	sub	sp, #12
 8102aa0:	af00      	add	r7, sp, #0
 8102aa2:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8102aa4:	bf00      	nop
 8102aa6:	4618      	mov	r0, r3
 8102aa8:	370c      	adds	r7, #12
 8102aaa:	46bd      	mov	sp, r7
 8102aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ab0:	4770      	bx	lr

08102ab2 <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>:
      _M_valptr()
 8102ab2:	b580      	push	{r7, lr}
 8102ab4:	b082      	sub	sp, #8
 8102ab6:	af00      	add	r7, sp, #0
 8102ab8:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8102aba:	687b      	ldr	r3, [r7, #4]
 8102abc:	3310      	adds	r3, #16
 8102abe:	4618      	mov	r0, r3
 8102ac0:	f000 fb6b 	bl	810319a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>
 8102ac4:	4603      	mov	r3, r0
 8102ac6:	4618      	mov	r0, r3
 8102ac8:	3708      	adds	r7, #8
 8102aca:	46bd      	mov	sp, r7
 8102acc:	bd80      	pop	{r7, pc}

08102ace <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1ES3_>:
      _Tuple_impl(const _Head& __head)
 8102ace:	b580      	push	{r7, lr}
 8102ad0:	b082      	sub	sp, #8
 8102ad2:	af00      	add	r7, sp, #0
 8102ad4:	6078      	str	r0, [r7, #4]
 8102ad6:	6039      	str	r1, [r7, #0]
      : _Base(__head)
 8102ad8:	687b      	ldr	r3, [r7, #4]
 8102ada:	6839      	ldr	r1, [r7, #0]
 8102adc:	4618      	mov	r0, r3
 8102ade:	f000 fb68 	bl	81031b2 <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EEC1ES3_>
      { }
 8102ae2:	687b      	ldr	r3, [r7, #4]
 8102ae4:	4618      	mov	r0, r3
 8102ae6:	3708      	adds	r7, #8
 8102ae8:	46bd      	mov	sp, r7
 8102aea:	bd80      	pop	{r7, pc}

08102aec <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102aec:	b480      	push	{r7}
 8102aee:	b083      	sub	sp, #12
 8102af0:	af00      	add	r7, sp, #0
 8102af2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102af4:	687b      	ldr	r3, [r7, #4]
 8102af6:	4618      	mov	r0, r3
 8102af8:	370c      	adds	r7, #12
 8102afa:	46bd      	mov	sp, r7
 8102afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b00:	4770      	bx	lr

08102b02 <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102b02:	b480      	push	{r7}
 8102b04:	b083      	sub	sp, #12
 8102b06:	af00      	add	r7, sp, #0
 8102b08:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102b0a:	687b      	ldr	r3, [r7, #4]
 8102b0c:	4618      	mov	r0, r3
 8102b0e:	370c      	adds	r7, #12
 8102b10:	46bd      	mov	sp, r7
 8102b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b16:	4770      	bx	lr

08102b18 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102b18:	b480      	push	{r7}
 8102b1a:	b083      	sub	sp, #12
 8102b1c:	af00      	add	r7, sp, #0
 8102b1e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102b20:	687b      	ldr	r3, [r7, #4]
 8102b22:	4618      	mov	r0, r3
 8102b24:	370c      	adds	r7, #12
 8102b26:	46bd      	mov	sp, r7
 8102b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b2c:	4770      	bx	lr

08102b2e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEERSC_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
 8102b2e:	b5b0      	push	{r4, r5, r7, lr}
 8102b30:	b084      	sub	sp, #16
 8102b32:	af00      	add	r7, sp, #0
 8102b34:	60f8      	str	r0, [r7, #12]
 8102b36:	60b9      	str	r1, [r7, #8]
 8102b38:	607a      	str	r2, [r7, #4]
 8102b3a:	603b      	str	r3, [r7, #0]
	  : _M_t(__t),
 8102b3c:	68fb      	ldr	r3, [r7, #12]
 8102b3e:	68ba      	ldr	r2, [r7, #8]
 8102b40:	601a      	str	r2, [r3, #0]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 8102b42:	6878      	ldr	r0, [r7, #4]
 8102b44:	f7ff ffd2 	bl	8102aec <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8102b48:	4604      	mov	r4, r0
 8102b4a:	6838      	ldr	r0, [r7, #0]
 8102b4c:	f7ff ffd9 	bl	8102b02 <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8102b50:	4605      	mov	r5, r0
 8102b52:	6a38      	ldr	r0, [r7, #32]
 8102b54:	f7ff ffe0 	bl	8102b18 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8102b58:	4603      	mov	r3, r0
 8102b5a:	462a      	mov	r2, r5
 8102b5c:	4621      	mov	r1, r4
 8102b5e:	68b8      	ldr	r0, [r7, #8]
 8102b60:	f000 fb36 	bl	81031d0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8102b64:	4602      	mov	r2, r0
 8102b66:	68fb      	ldr	r3, [r7, #12]
 8102b68:	605a      	str	r2, [r3, #4]
	  { }
 8102b6a:	68fb      	ldr	r3, [r7, #12]
 8102b6c:	4618      	mov	r0, r3
 8102b6e:	3710      	adds	r7, #16
 8102b70:	46bd      	mov	sp, r7
 8102b72:	bdb0      	pop	{r4, r5, r7, pc}

08102b74 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8102b74:	b590      	push	{r4, r7, lr}
 8102b76:	b08d      	sub	sp, #52	@ 0x34
 8102b78:	af00      	add	r7, sp, #0
 8102b7a:	60f8      	str	r0, [r7, #12]
 8102b7c:	60b9      	str	r1, [r7, #8]
 8102b7e:	607a      	str	r2, [r7, #4]
 8102b80:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8102b82:	1d3b      	adds	r3, r7, #4
 8102b84:	4618      	mov	r0, r3
 8102b86:	f000 fb46 	bl	8103216 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE13_M_const_castEv>
 8102b8a:	4603      	mov	r3, r0
 8102b8c:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8102b8e:	69bc      	ldr	r4, [r7, #24]
 8102b90:	68b8      	ldr	r0, [r7, #8]
 8102b92:	f7ff ff23 	bl	81029dc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8102b96:	4603      	mov	r3, r0
 8102b98:	429c      	cmp	r4, r3
 8102b9a:	bf0c      	ite	eq
 8102b9c:	2301      	moveq	r3, #1
 8102b9e:	2300      	movne	r3, #0
 8102ba0:	b2db      	uxtb	r3, r3
 8102ba2:	2b00      	cmp	r3, #0
 8102ba4:	d030      	beq.n	8102c08 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x94>
	  if (size() > 0
 8102ba6:	68b8      	ldr	r0, [r7, #8]
 8102ba8:	f7ff fdf2 	bl	8102790 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 8102bac:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8102bae:	2b00      	cmp	r3, #0
 8102bb0:	d013      	beq.n	8102bda <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 8102bb2:	68bc      	ldr	r4, [r7, #8]
 8102bb4:	68b8      	ldr	r0, [r7, #8]
 8102bb6:	f000 fb3f 	bl	8103238 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8102bba:	4603      	mov	r3, r0
 8102bbc:	681b      	ldr	r3, [r3, #0]
 8102bbe:	4618      	mov	r0, r3
 8102bc0:	f7ff ff49 	bl	8102a56 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8102bc4:	4603      	mov	r3, r0
 8102bc6:	683a      	ldr	r2, [r7, #0]
 8102bc8:	4619      	mov	r1, r3
 8102bca:	4620      	mov	r0, r4
 8102bcc:	f7ff fbac 	bl	8102328 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8102bd0:	4603      	mov	r3, r0
 8102bd2:	2b00      	cmp	r3, #0
 8102bd4:	d001      	beq.n	8102bda <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 8102bd6:	2301      	movs	r3, #1
 8102bd8:	e000      	b.n	8102bdc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x68>
 8102bda:	2300      	movs	r3, #0
	  if (size() > 0
 8102bdc:	2b00      	cmp	r3, #0
 8102bde:	d00c      	beq.n	8102bfa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x86>
	    return _Res(0, _M_rightmost());
 8102be0:	2300      	movs	r3, #0
 8102be2:	61fb      	str	r3, [r7, #28]
 8102be4:	68b8      	ldr	r0, [r7, #8]
 8102be6:	f000 fb27 	bl	8103238 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8102bea:	4602      	mov	r2, r0
 8102bec:	f107 031c 	add.w	r3, r7, #28
 8102bf0:	4619      	mov	r1, r3
 8102bf2:	68f8      	ldr	r0, [r7, #12]
 8102bf4:	f000 f9ce 	bl	8102f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8102bf8:	e0db      	b.n	8102db2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8102bfa:	68fb      	ldr	r3, [r7, #12]
 8102bfc:	683a      	ldr	r2, [r7, #0]
 8102bfe:	68b9      	ldr	r1, [r7, #8]
 8102c00:	4618      	mov	r0, r3
 8102c02:	f7ff fcf1 	bl	81025e8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8102c06:	e0d4      	b.n	8102db2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8102c08:	68bc      	ldr	r4, [r7, #8]
 8102c0a:	69bb      	ldr	r3, [r7, #24]
 8102c0c:	4618      	mov	r0, r3
 8102c0e:	f7ff ff22 	bl	8102a56 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8102c12:	4603      	mov	r3, r0
 8102c14:	461a      	mov	r2, r3
 8102c16:	6839      	ldr	r1, [r7, #0]
 8102c18:	4620      	mov	r0, r4
 8102c1a:	f7ff fb85 	bl	8102328 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8102c1e:	4603      	mov	r3, r0
 8102c20:	2b00      	cmp	r3, #0
 8102c22:	d057      	beq.n	8102cd4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	  iterator __before = __pos;
 8102c24:	69bb      	ldr	r3, [r7, #24]
 8102c26:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8102c28:	69bc      	ldr	r4, [r7, #24]
 8102c2a:	68b8      	ldr	r0, [r7, #8]
 8102c2c:	f000 fb10 	bl	8103250 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8102c30:	4603      	mov	r3, r0
 8102c32:	681b      	ldr	r3, [r3, #0]
 8102c34:	429c      	cmp	r4, r3
 8102c36:	bf0c      	ite	eq
 8102c38:	2301      	moveq	r3, #1
 8102c3a:	2300      	movne	r3, #0
 8102c3c:	b2db      	uxtb	r3, r3
 8102c3e:	2b00      	cmp	r3, #0
 8102c40:	d00d      	beq.n	8102c5e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8102c42:	68b8      	ldr	r0, [r7, #8]
 8102c44:	f000 fb04 	bl	8103250 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8102c48:	4604      	mov	r4, r0
 8102c4a:	68b8      	ldr	r0, [r7, #8]
 8102c4c:	f000 fb00 	bl	8103250 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8102c50:	4603      	mov	r3, r0
 8102c52:	461a      	mov	r2, r3
 8102c54:	4621      	mov	r1, r4
 8102c56:	68f8      	ldr	r0, [r7, #12]
 8102c58:	f000 fb06 	bl	8103268 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8102c5c:	e0a9      	b.n	8102db2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8102c5e:	68bc      	ldr	r4, [r7, #8]
 8102c60:	f107 0314 	add.w	r3, r7, #20
 8102c64:	4618      	mov	r0, r3
 8102c66:	f000 f984 	bl	8102f72 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEmmEv>
 8102c6a:	4603      	mov	r3, r0
 8102c6c:	681b      	ldr	r3, [r3, #0]
 8102c6e:	4618      	mov	r0, r3
 8102c70:	f7ff fef1 	bl	8102a56 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8102c74:	4603      	mov	r3, r0
 8102c76:	683a      	ldr	r2, [r7, #0]
 8102c78:	4619      	mov	r1, r3
 8102c7a:	4620      	mov	r0, r4
 8102c7c:	f7ff fb54 	bl	8102328 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8102c80:	4603      	mov	r3, r0
 8102c82:	2b00      	cmp	r3, #0
 8102c84:	d01f      	beq.n	8102cc6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8102c86:	697b      	ldr	r3, [r7, #20]
 8102c88:	4618      	mov	r0, r3
 8102c8a:	f7ff fc44 	bl	8102516 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8102c8e:	4603      	mov	r3, r0
 8102c90:	2b00      	cmp	r3, #0
 8102c92:	bf0c      	ite	eq
 8102c94:	2301      	moveq	r3, #1
 8102c96:	2300      	movne	r3, #0
 8102c98:	b2db      	uxtb	r3, r3
 8102c9a:	2b00      	cmp	r3, #0
 8102c9c:	d00a      	beq.n	8102cb4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x140>
		return _Res(0, __before._M_node);
 8102c9e:	2300      	movs	r3, #0
 8102ca0:	623b      	str	r3, [r7, #32]
 8102ca2:	f107 0214 	add.w	r2, r7, #20
 8102ca6:	f107 0320 	add.w	r3, r7, #32
 8102caa:	4619      	mov	r1, r3
 8102cac:	68f8      	ldr	r0, [r7, #12]
 8102cae:	f000 f971 	bl	8102f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8102cb2:	e07e      	b.n	8102db2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8102cb4:	f107 0218 	add.w	r2, r7, #24
 8102cb8:	f107 0318 	add.w	r3, r7, #24
 8102cbc:	4619      	mov	r1, r3
 8102cbe:	68f8      	ldr	r0, [r7, #12]
 8102cc0:	f000 fad2 	bl	8103268 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8102cc4:	e075      	b.n	8102db2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8102cc6:	68fb      	ldr	r3, [r7, #12]
 8102cc8:	683a      	ldr	r2, [r7, #0]
 8102cca:	68b9      	ldr	r1, [r7, #8]
 8102ccc:	4618      	mov	r0, r3
 8102cce:	f7ff fc8b 	bl	81025e8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8102cd2:	e06e      	b.n	8102db2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8102cd4:	68bc      	ldr	r4, [r7, #8]
 8102cd6:	69bb      	ldr	r3, [r7, #24]
 8102cd8:	4618      	mov	r0, r3
 8102cda:	f7ff febc 	bl	8102a56 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8102cde:	4603      	mov	r3, r0
 8102ce0:	683a      	ldr	r2, [r7, #0]
 8102ce2:	4619      	mov	r1, r3
 8102ce4:	4620      	mov	r0, r4
 8102ce6:	f7ff fb1f 	bl	8102328 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8102cea:	4603      	mov	r3, r0
 8102cec:	2b00      	cmp	r3, #0
 8102cee:	d056      	beq.n	8102d9e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x22a>
	  iterator __after = __pos;
 8102cf0:	69bb      	ldr	r3, [r7, #24]
 8102cf2:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8102cf4:	69bc      	ldr	r4, [r7, #24]
 8102cf6:	68b8      	ldr	r0, [r7, #8]
 8102cf8:	f000 fa9e 	bl	8103238 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8102cfc:	4603      	mov	r3, r0
 8102cfe:	681b      	ldr	r3, [r3, #0]
 8102d00:	429c      	cmp	r4, r3
 8102d02:	bf0c      	ite	eq
 8102d04:	2301      	moveq	r3, #1
 8102d06:	2300      	movne	r3, #0
 8102d08:	b2db      	uxtb	r3, r3
 8102d0a:	2b00      	cmp	r3, #0
 8102d0c:	d00c      	beq.n	8102d28 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1b4>
	    return _Res(0, _M_rightmost());
 8102d0e:	2300      	movs	r3, #0
 8102d10:	627b      	str	r3, [r7, #36]	@ 0x24
 8102d12:	68b8      	ldr	r0, [r7, #8]
 8102d14:	f000 fa90 	bl	8103238 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8102d18:	4602      	mov	r2, r0
 8102d1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8102d1e:	4619      	mov	r1, r3
 8102d20:	68f8      	ldr	r0, [r7, #12]
 8102d22:	f000 f937 	bl	8102f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8102d26:	e044      	b.n	8102db2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8102d28:	68bc      	ldr	r4, [r7, #8]
 8102d2a:	f107 0310 	add.w	r3, r7, #16
 8102d2e:	4618      	mov	r0, r3
 8102d30:	f000 fab3 	bl	810329a <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEppEv>
 8102d34:	4603      	mov	r3, r0
 8102d36:	681b      	ldr	r3, [r3, #0]
 8102d38:	4618      	mov	r0, r3
 8102d3a:	f7ff fe8c 	bl	8102a56 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8102d3e:	4603      	mov	r3, r0
 8102d40:	461a      	mov	r2, r3
 8102d42:	6839      	ldr	r1, [r7, #0]
 8102d44:	4620      	mov	r0, r4
 8102d46:	f7ff faef 	bl	8102328 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8102d4a:	4603      	mov	r3, r0
 8102d4c:	2b00      	cmp	r3, #0
 8102d4e:	d01f      	beq.n	8102d90 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8102d50:	69bb      	ldr	r3, [r7, #24]
 8102d52:	4618      	mov	r0, r3
 8102d54:	f7ff fbdf 	bl	8102516 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8102d58:	4603      	mov	r3, r0
 8102d5a:	2b00      	cmp	r3, #0
 8102d5c:	bf0c      	ite	eq
 8102d5e:	2301      	moveq	r3, #1
 8102d60:	2300      	movne	r3, #0
 8102d62:	b2db      	uxtb	r3, r3
 8102d64:	2b00      	cmp	r3, #0
 8102d66:	d00a      	beq.n	8102d7e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x20a>
		return _Res(0, __pos._M_node);
 8102d68:	2300      	movs	r3, #0
 8102d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8102d6c:	f107 0218 	add.w	r2, r7, #24
 8102d70:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8102d74:	4619      	mov	r1, r3
 8102d76:	68f8      	ldr	r0, [r7, #12]
 8102d78:	f000 f90c 	bl	8102f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8102d7c:	e019      	b.n	8102db2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8102d7e:	f107 0210 	add.w	r2, r7, #16
 8102d82:	f107 0310 	add.w	r3, r7, #16
 8102d86:	4619      	mov	r1, r3
 8102d88:	68f8      	ldr	r0, [r7, #12]
 8102d8a:	f000 fa6d 	bl	8103268 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8102d8e:	e010      	b.n	8102db2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8102d90:	68fb      	ldr	r3, [r7, #12]
 8102d92:	683a      	ldr	r2, [r7, #0]
 8102d94:	68b9      	ldr	r1, [r7, #8]
 8102d96:	4618      	mov	r0, r3
 8102d98:	f7ff fc26 	bl	81025e8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8102d9c:	e009      	b.n	8102db2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	return _Res(__pos._M_node, 0);
 8102d9e:	2300      	movs	r3, #0
 8102da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8102da2:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8102da6:	f107 0318 	add.w	r3, r7, #24
 8102daa:	4619      	mov	r1, r3
 8102dac:	68f8      	ldr	r0, [r7, #12]
 8102dae:	f000 f8f1 	bl	8102f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8102db2:	68f8      	ldr	r0, [r7, #12]
 8102db4:	3734      	adds	r7, #52	@ 0x34
 8102db6:	46bd      	mov	sp, r7
 8102db8:	bd90      	pop	{r4, r7, pc}

08102dba <_ZSt7forwardIN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102dba:	b480      	push	{r7}
 8102dbc:	b083      	sub	sp, #12
 8102dbe:	af00      	add	r7, sp, #0
 8102dc0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102dc2:	687b      	ldr	r3, [r7, #4]
 8102dc4:	4618      	mov	r0, r3
 8102dc6:	370c      	adds	r7, #12
 8102dc8:	46bd      	mov	sp, r7
 8102dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102dce:	4770      	bx	lr

08102dd0 <_ZNSt5tupleIJON19EventManagerCM4Task11EEventQueueEEEC1IJS1_ELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
 8102dd0:	b590      	push	{r4, r7, lr}
 8102dd2:	b083      	sub	sp, #12
 8102dd4:	af00      	add	r7, sp, #0
 8102dd6:	6078      	str	r0, [r7, #4]
 8102dd8:	6039      	str	r1, [r7, #0]
	: _Inherited(std::forward<_UElements>(__elements)...) { }
 8102dda:	687c      	ldr	r4, [r7, #4]
 8102ddc:	6838      	ldr	r0, [r7, #0]
 8102dde:	f7ff ffec 	bl	8102dba <_ZSt7forwardIN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS2_E4typeE>
 8102de2:	4603      	mov	r3, r0
 8102de4:	4619      	mov	r1, r3
 8102de6:	4620      	mov	r0, r4
 8102de8:	f000 fa68 	bl	81032bc <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEEC1IS1_EEOT_>
 8102dec:	687b      	ldr	r3, [r7, #4]
 8102dee:	4618      	mov	r0, r3
 8102df0:	370c      	adds	r7, #12
 8102df2:	46bd      	mov	sp, r7
 8102df4:	bd90      	pop	{r4, r7, pc}

08102df6 <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEEC1EOS3_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8102df6:	b480      	push	{r7}
 8102df8:	b083      	sub	sp, #12
 8102dfa:	af00      	add	r7, sp, #0
 8102dfc:	6078      	str	r0, [r7, #4]
 8102dfe:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 8102e00:	687b      	ldr	r3, [r7, #4]
 8102e02:	683a      	ldr	r2, [r7, #0]
 8102e04:	6812      	ldr	r2, [r2, #0]
 8102e06:	601a      	str	r2, [r3, #0]
      { }
 8102e08:	687b      	ldr	r3, [r7, #4]
 8102e0a:	4618      	mov	r0, r3
 8102e0c:	370c      	adds	r7, #12
 8102e0e:	46bd      	mov	sp, r7
 8102e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e14:	4770      	bx	lr

08102e16 <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102e16:	b480      	push	{r7}
 8102e18:	b083      	sub	sp, #12
 8102e1a:	af00      	add	r7, sp, #0
 8102e1c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102e1e:	687b      	ldr	r3, [r7, #4]
 8102e20:	4618      	mov	r0, r3
 8102e22:	370c      	adds	r7, #12
 8102e24:	46bd      	mov	sp, r7
 8102e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e2a:	4770      	bx	lr

08102e2c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJOS1_EESI_IJEEEEERSC_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
 8102e2c:	b5b0      	push	{r4, r5, r7, lr}
 8102e2e:	b084      	sub	sp, #16
 8102e30:	af00      	add	r7, sp, #0
 8102e32:	60f8      	str	r0, [r7, #12]
 8102e34:	60b9      	str	r1, [r7, #8]
 8102e36:	607a      	str	r2, [r7, #4]
 8102e38:	603b      	str	r3, [r7, #0]
	  : _M_t(__t),
 8102e3a:	68fb      	ldr	r3, [r7, #12]
 8102e3c:	68ba      	ldr	r2, [r7, #8]
 8102e3e:	601a      	str	r2, [r3, #0]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 8102e40:	6878      	ldr	r0, [r7, #4]
 8102e42:	f7ff fe53 	bl	8102aec <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8102e46:	4604      	mov	r4, r0
 8102e48:	6838      	ldr	r0, [r7, #0]
 8102e4a:	f7ff ffe4 	bl	8102e16 <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8102e4e:	4605      	mov	r5, r0
 8102e50:	6a38      	ldr	r0, [r7, #32]
 8102e52:	f7ff fe61 	bl	8102b18 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8102e56:	4603      	mov	r3, r0
 8102e58:	462a      	mov	r2, r5
 8102e5a:	4621      	mov	r1, r4
 8102e5c:	68b8      	ldr	r0, [r7, #8]
 8102e5e:	f000 fa40 	bl	81032e2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8102e62:	4602      	mov	r2, r0
 8102e64:	68fb      	ldr	r3, [r7, #12]
 8102e66:	605a      	str	r2, [r3, #4]
	  { }
 8102e68:	68fb      	ldr	r3, [r7, #12]
 8102e6a:	4618      	mov	r0, r3
 8102e6c:	3710      	adds	r7, #16
 8102e6e:	46bd      	mov	sp, r7
 8102e70:	bdb0      	pop	{r4, r5, r7, pc}

08102e72 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8102e72:	b590      	push	{r4, r7, lr}
 8102e74:	b083      	sub	sp, #12
 8102e76:	af00      	add	r7, sp, #0
 8102e78:	6078      	str	r0, [r7, #4]
 8102e7a:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8102e7c:	6878      	ldr	r0, [r7, #4]
 8102e7e:	f000 fa53 	bl	8103328 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8102e82:	4604      	mov	r4, r0
 8102e84:	6838      	ldr	r0, [r7, #0]
 8102e86:	f7ff fe14 	bl	8102ab2 <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 8102e8a:	4603      	mov	r3, r0
 8102e8c:	4619      	mov	r1, r3
 8102e8e:	4620      	mov	r0, r4
 8102e90:	f000 fa55 	bl	810333e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE7destroyIS7_EEvRS9_PT_>
      }
 8102e94:	bf00      	nop
 8102e96:	370c      	adds	r7, #12
 8102e98:	46bd      	mov	sp, r7
 8102e9a:	bd90      	pop	{r4, r7, pc}

08102e9c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8102e9c:	b580      	push	{r7, lr}
 8102e9e:	b082      	sub	sp, #8
 8102ea0:	af00      	add	r7, sp, #0
 8102ea2:	6078      	str	r0, [r7, #4]
 8102ea4:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8102ea6:	6878      	ldr	r0, [r7, #4]
 8102ea8:	f000 fa3e 	bl	8103328 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8102eac:	4603      	mov	r3, r0
 8102eae:	2201      	movs	r2, #1
 8102eb0:	6839      	ldr	r1, [r7, #0]
 8102eb2:	4618      	mov	r0, r3
 8102eb4:	f000 fa50 	bl	8103358 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE10deallocateERS9_PS8_j>
 8102eb8:	bf00      	nop
 8102eba:	3708      	adds	r7, #8
 8102ebc:	46bd      	mov	sp, r7
 8102ebe:	bd80      	pop	{r7, pc}

08102ec0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRS1_RS5_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8102ec0:	b590      	push	{r4, r7, lr}
 8102ec2:	b087      	sub	sp, #28
 8102ec4:	af00      	add	r7, sp, #0
 8102ec6:	60f8      	str	r0, [r7, #12]
 8102ec8:	60b9      	str	r1, [r7, #8]
 8102eca:	607a      	str	r2, [r7, #4]
	  _Link_type __tmp = _M_get_node();
 8102ecc:	68f8      	ldr	r0, [r7, #12]
 8102ece:	f000 fa52 	bl	8103376 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 8102ed2:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8102ed4:	68b8      	ldr	r0, [r7, #8]
 8102ed6:	f7fe ffbc 	bl	8101e52 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8102eda:	4604      	mov	r4, r0
 8102edc:	6878      	ldr	r0, [r7, #4]
 8102ede:	f7fe ffc3 	bl	8101e68 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8102ee2:	4603      	mov	r3, r0
 8102ee4:	4622      	mov	r2, r4
 8102ee6:	6979      	ldr	r1, [r7, #20]
 8102ee8:	68f8      	ldr	r0, [r7, #12]
 8102eea:	f000 fa55 	bl	8103398 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRS1_RS5_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8102eee:	697b      	ldr	r3, [r7, #20]
	}
 8102ef0:	4618      	mov	r0, r3
 8102ef2:	371c      	adds	r7, #28
 8102ef4:	46bd      	mov	sp, r7
 8102ef6:	bd90      	pop	{r4, r7, pc}

08102ef8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 8102ef8:	b580      	push	{r7, lr}
 8102efa:	b084      	sub	sp, #16
 8102efc:	af00      	add	r7, sp, #0
 8102efe:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8102f00:	6878      	ldr	r0, [r7, #4]
 8102f02:	f000 fa6e 	bl	81033e2 <_ZNKSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 8102f06:	4602      	mov	r2, r0
 8102f08:	f107 030c 	add.w	r3, r7, #12
 8102f0c:	4611      	mov	r1, r2
 8102f0e:	4618      	mov	r0, r3
 8102f10:	f000 fa75 	bl	81033fe <_ZNKSt10_Select1stISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEclERKS6_>
 8102f14:	4603      	mov	r3, r0
      }
 8102f16:	4618      	mov	r0, r3
 8102f18:	3710      	adds	r7, #16
 8102f1a:	46bd      	mov	sp, r7
 8102f1c:	bd80      	pop	{r7, pc}

08102f1e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8102f1e:	b580      	push	{r7, lr}
 8102f20:	b084      	sub	sp, #16
 8102f22:	af00      	add	r7, sp, #0
 8102f24:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8102f26:	687b      	ldr	r3, [r7, #4]
 8102f28:	68da      	ldr	r2, [r3, #12]
 8102f2a:	f107 030c 	add.w	r3, r7, #12
 8102f2e:	4611      	mov	r1, r2
 8102f30:	4618      	mov	r0, r3
 8102f32:	f7ff fc1e 	bl	8102772 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8102f36:	68fb      	ldr	r3, [r7, #12]
 8102f38:	4618      	mov	r0, r3
 8102f3a:	3710      	adds	r7, #16
 8102f3c:	46bd      	mov	sp, r7
 8102f3e:	bd80      	pop	{r7, pc}

08102f40 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8102f40:	b580      	push	{r7, lr}
 8102f42:	b084      	sub	sp, #16
 8102f44:	af00      	add	r7, sp, #0
 8102f46:	60f8      	str	r0, [r7, #12]
 8102f48:	60b9      	str	r1, [r7, #8]
 8102f4a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8102f4c:	68b8      	ldr	r0, [r7, #8]
 8102f4e:	f000 fa62 	bl	8103416 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceISB_E4typeE>
 8102f52:	4603      	mov	r3, r0
 8102f54:	681a      	ldr	r2, [r3, #0]
 8102f56:	68fb      	ldr	r3, [r7, #12]
 8102f58:	601a      	str	r2, [r3, #0]
 8102f5a:	6878      	ldr	r0, [r7, #4]
 8102f5c:	f000 fa66 	bl	810342c <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8102f60:	4603      	mov	r3, r0
 8102f62:	681a      	ldr	r2, [r3, #0]
 8102f64:	68fb      	ldr	r3, [r7, #12]
 8102f66:	605a      	str	r2, [r3, #4]
 8102f68:	68fb      	ldr	r3, [r7, #12]
 8102f6a:	4618      	mov	r0, r3
 8102f6c:	3710      	adds	r7, #16
 8102f6e:	46bd      	mov	sp, r7
 8102f70:	bd80      	pop	{r7, pc}

08102f72 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8102f72:	b580      	push	{r7, lr}
 8102f74:	b082      	sub	sp, #8
 8102f76:	af00      	add	r7, sp, #0
 8102f78:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8102f7a:	687b      	ldr	r3, [r7, #4]
 8102f7c:	681b      	ldr	r3, [r3, #0]
 8102f7e:	4618      	mov	r0, r3
 8102f80:	f018 fcfe 	bl	811b980 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8102f84:	4602      	mov	r2, r0
 8102f86:	687b      	ldr	r3, [r7, #4]
 8102f88:	601a      	str	r2, [r3, #0]
	return *this;
 8102f8a:	687b      	ldr	r3, [r7, #4]
      }
 8102f8c:	4618      	mov	r0, r3
 8102f8e:	3708      	adds	r7, #8
 8102f90:	46bd      	mov	sp, r7
 8102f92:	bd80      	pop	{r7, pc}

08102f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>:
      constexpr pair(const _T1& __a, const _T2& __b)
 8102f94:	b480      	push	{r7}
 8102f96:	b085      	sub	sp, #20
 8102f98:	af00      	add	r7, sp, #0
 8102f9a:	60f8      	str	r0, [r7, #12]
 8102f9c:	60b9      	str	r1, [r7, #8]
 8102f9e:	607a      	str	r2, [r7, #4]
      : first(__a), second(__b) { }
 8102fa0:	68bb      	ldr	r3, [r7, #8]
 8102fa2:	681a      	ldr	r2, [r3, #0]
 8102fa4:	68fb      	ldr	r3, [r7, #12]
 8102fa6:	601a      	str	r2, [r3, #0]
 8102fa8:	687b      	ldr	r3, [r7, #4]
 8102faa:	681a      	ldr	r2, [r3, #0]
 8102fac:	68fb      	ldr	r3, [r7, #12]
 8102fae:	605a      	str	r2, [r3, #4]
 8102fb0:	68fb      	ldr	r3, [r7, #12]
 8102fb2:	4618      	mov	r0, r3
 8102fb4:	3714      	adds	r7, #20
 8102fb6:	46bd      	mov	sp, r7
 8102fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fbc:	4770      	bx	lr

08102fbe <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8102fbe:	b5b0      	push	{r4, r5, r7, lr}
 8102fc0:	b086      	sub	sp, #24
 8102fc2:	af00      	add	r7, sp, #0
 8102fc4:	60f8      	str	r0, [r7, #12]
 8102fc6:	60b9      	str	r1, [r7, #8]
 8102fc8:	607a      	str	r2, [r7, #4]
 8102fca:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8102fcc:	68bb      	ldr	r3, [r7, #8]
 8102fce:	2b00      	cmp	r3, #0
 8102fd0:	d117      	bne.n	8103002 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8102fd2:	68f8      	ldr	r0, [r7, #12]
 8102fd4:	f7ff fd02 	bl	81029dc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8102fd8:	4602      	mov	r2, r0
 8102fda:	687b      	ldr	r3, [r7, #4]
 8102fdc:	4293      	cmp	r3, r2
 8102fde:	d010      	beq.n	8103002 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 8102fe0:	68fc      	ldr	r4, [r7, #12]
 8102fe2:	6838      	ldr	r0, [r7, #0]
 8102fe4:	f7ff ff88 	bl	8102ef8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8102fe8:	4605      	mov	r5, r0
 8102fea:	6878      	ldr	r0, [r7, #4]
 8102fec:	f7ff fd33 	bl	8102a56 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8102ff0:	4603      	mov	r3, r0
 8102ff2:	461a      	mov	r2, r3
 8102ff4:	4629      	mov	r1, r5
 8102ff6:	4620      	mov	r0, r4
 8102ff8:	f7ff f996 	bl	8102328 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8102ffc:	4603      	mov	r3, r0
 8102ffe:	2b00      	cmp	r3, #0
 8103000:	d001      	beq.n	8103006 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
 8103002:	2301      	movs	r3, #1
 8103004:	e000      	b.n	8103008 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4a>
 8103006:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8103008:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 810300a:	68fb      	ldr	r3, [r7, #12]
 810300c:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 810300e:	7df8      	ldrb	r0, [r7, #23]
 8103010:	687a      	ldr	r2, [r7, #4]
 8103012:	6839      	ldr	r1, [r7, #0]
 8103014:	f018 fcb6 	bl	811b984 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8103018:	68fb      	ldr	r3, [r7, #12]
 810301a:	695b      	ldr	r3, [r3, #20]
 810301c:	1c5a      	adds	r2, r3, #1
 810301e:	68fb      	ldr	r3, [r7, #12]
 8103020:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8103022:	f107 0310 	add.w	r3, r7, #16
 8103026:	6839      	ldr	r1, [r7, #0]
 8103028:	4618      	mov	r0, r3
 810302a:	f7ff fba2 	bl	8102772 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 810302e:	693b      	ldr	r3, [r7, #16]
    }
 8103030:	4618      	mov	r0, r3
 8103032:	3718      	adds	r7, #24
 8103034:	46bd      	mov	sp, r7
 8103036:	bdb0      	pop	{r4, r5, r7, pc}

08103038 <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8103038:	b480      	push	{r7}
 810303a:	b083      	sub	sp, #12
 810303c:	af00      	add	r7, sp, #0
 810303e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8103040:	687b      	ldr	r3, [r7, #4]
 8103042:	4618      	mov	r0, r3
 8103044:	370c      	adds	r7, #12
 8103046:	46bd      	mov	sp, r7
 8103048:	f85d 7b04 	ldr.w	r7, [sp], #4
 810304c:	4770      	bx	lr

0810304e <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810304e:	b480      	push	{r7}
 8103050:	b083      	sub	sp, #12
 8103052:	af00      	add	r7, sp, #0
 8103054:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8103056:	687b      	ldr	r3, [r7, #4]
 8103058:	4618      	mov	r0, r3
 810305a:	370c      	adds	r7, #12
 810305c:	46bd      	mov	sp, r7
 810305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103062:	4770      	bx	lr

08103064 <_ZNSt12_Destroy_auxILb1EE9__destroyIP8SMessageEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8103064:	b480      	push	{r7}
 8103066:	b083      	sub	sp, #12
 8103068:	af00      	add	r7, sp, #0
 810306a:	6078      	str	r0, [r7, #4]
 810306c:	6039      	str	r1, [r7, #0]
 810306e:	bf00      	nop
 8103070:	370c      	adds	r7, #12
 8103072:	46bd      	mov	sp, r7
 8103074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103078:	4770      	bx	lr

0810307a <_ZNSt15__new_allocatorI8SMessageE10deallocateEPS0_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 810307a:	b580      	push	{r7, lr}
 810307c:	b084      	sub	sp, #16
 810307e:	af00      	add	r7, sp, #0
 8103080:	60f8      	str	r0, [r7, #12]
 8103082:	60b9      	str	r1, [r7, #8]
 8103084:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8103086:	687a      	ldr	r2, [r7, #4]
 8103088:	4613      	mov	r3, r2
 810308a:	005b      	lsls	r3, r3, #1
 810308c:	4413      	add	r3, r2
 810308e:	00db      	lsls	r3, r3, #3
 8103090:	4619      	mov	r1, r3
 8103092:	68b8      	ldr	r0, [r7, #8]
 8103094:	f018 fc0a 	bl	811b8ac <_ZdlPvj>
      }
 8103098:	bf00      	nop
 810309a:	3710      	adds	r7, #16
 810309c:	46bd      	mov	sp, r7
 810309e:	bd80      	pop	{r7, pc}

081030a0 <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 81030a0:	b580      	push	{r7, lr}
 81030a2:	b082      	sub	sp, #8
 81030a4:	af00      	add	r7, sp, #0
 81030a6:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 81030a8:	687b      	ldr	r3, [r7, #4]
 81030aa:	4618      	mov	r0, r3
 81030ac:	f000 f9e6 	bl	810347c <_ZNKSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 81030b0:	4603      	mov	r3, r0
 81030b2:	4618      	mov	r0, r3
 81030b4:	f000 f9c6 	bl	8103444 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_max_sizeERKS1_>
 81030b8:	4603      	mov	r3, r0
 81030ba:	4618      	mov	r0, r3
 81030bc:	3708      	adds	r7, #8
 81030be:	46bd      	mov	sp, r7
 81030c0:	bd80      	pop	{r7, pc}
	...

081030c4 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 81030c4:	b480      	push	{r7}
 81030c6:	b083      	sub	sp, #12
 81030c8:	af00      	add	r7, sp, #0
 81030ca:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 81030cc:	687b      	ldr	r3, [r7, #4]
 81030ce:	685a      	ldr	r2, [r3, #4]
 81030d0:	687b      	ldr	r3, [r7, #4]
 81030d2:	681b      	ldr	r3, [r3, #0]
 81030d4:	1ad3      	subs	r3, r2, r3
 81030d6:	10db      	asrs	r3, r3, #3
 81030d8:	4a04      	ldr	r2, [pc, #16]	@ (81030ec <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv+0x28>)
 81030da:	fb02 f303 	mul.w	r3, r2, r3
 81030de:	4618      	mov	r0, r3
 81030e0:	370c      	adds	r7, #12
 81030e2:	46bd      	mov	sp, r7
 81030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030e8:	4770      	bx	lr
 81030ea:	bf00      	nop
 81030ec:	aaaaaaab 	.word	0xaaaaaaab

081030f0 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 81030f0:	b480      	push	{r7}
 81030f2:	b083      	sub	sp, #12
 81030f4:	af00      	add	r7, sp, #0
 81030f6:	6078      	str	r0, [r7, #4]
 81030f8:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 81030fa:	687b      	ldr	r3, [r7, #4]
 81030fc:	681a      	ldr	r2, [r3, #0]
 81030fe:	683b      	ldr	r3, [r7, #0]
 8103100:	681b      	ldr	r3, [r3, #0]
 8103102:	429a      	cmp	r2, r3
 8103104:	d201      	bcs.n	810310a <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8103106:	683b      	ldr	r3, [r7, #0]
 8103108:	e000      	b.n	810310c <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 810310a:	687b      	ldr	r3, [r7, #4]
    }
 810310c:	4618      	mov	r0, r3
 810310e:	370c      	adds	r7, #12
 8103110:	46bd      	mov	sp, r7
 8103112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103116:	4770      	bx	lr

08103118 <_ZNSt16allocator_traitsISaI8SMessageEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8103118:	b580      	push	{r7, lr}
 810311a:	b082      	sub	sp, #8
 810311c:	af00      	add	r7, sp, #0
 810311e:	6078      	str	r0, [r7, #4]
 8103120:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8103122:	2200      	movs	r2, #0
 8103124:	6839      	ldr	r1, [r7, #0]
 8103126:	6878      	ldr	r0, [r7, #4]
 8103128:	f000 f9b4 	bl	8103494 <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv>
 810312c:	4603      	mov	r3, r0
 810312e:	4618      	mov	r0, r3
 8103130:	3708      	adds	r7, #8
 8103132:	46bd      	mov	sp, r7
 8103134:	bd80      	pop	{r7, pc}

08103136 <_ZNSt6vectorI8SMessageSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8103136:	b580      	push	{r7, lr}
 8103138:	b084      	sub	sp, #16
 810313a:	af00      	add	r7, sp, #0
 810313c:	60f8      	str	r0, [r7, #12]
 810313e:	60b9      	str	r1, [r7, #8]
 8103140:	607a      	str	r2, [r7, #4]
 8103142:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8103144:	683b      	ldr	r3, [r7, #0]
 8103146:	687a      	ldr	r2, [r7, #4]
 8103148:	68b9      	ldr	r1, [r7, #8]
 810314a:	68f8      	ldr	r0, [r7, #12]
 810314c:	f000 f9d0 	bl	81034f0 <_ZSt12__relocate_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>
 8103150:	4603      	mov	r3, r0
      }
 8103152:	4618      	mov	r0, r3
 8103154:	3710      	adds	r7, #16
 8103156:	46bd      	mov	sp, r7
 8103158:	bd80      	pop	{r7, pc}

0810315a <_ZSt32__make_move_if_noexcept_iteratorI8SMessageSt13move_iteratorIPS0_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = __conditional_t<__move_if_noexcept_cond<_Tp>::value,
		      const _Tp*, move_iterator<_Tp*>>>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 810315a:	b580      	push	{r7, lr}
 810315c:	b084      	sub	sp, #16
 810315e:	af00      	add	r7, sp, #0
 8103160:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8103162:	f107 030c 	add.w	r3, r7, #12
 8103166:	6879      	ldr	r1, [r7, #4]
 8103168:	4618      	mov	r0, r3
 810316a:	f000 f9de 	bl	810352a <_ZNSt13move_iteratorIP8SMessageEC1ES1_>
 810316e:	68fb      	ldr	r3, [r7, #12]
 8103170:	4618      	mov	r0, r3
 8103172:	3710      	adds	r7, #16
 8103174:	46bd      	mov	sp, r7
 8103176:	bd80      	pop	{r7, pc}

08103178 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP8SMessageES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8103178:	b580      	push	{r7, lr}
 810317a:	b084      	sub	sp, #16
 810317c:	af00      	add	r7, sp, #0
 810317e:	60f8      	str	r0, [r7, #12]
 8103180:	60b9      	str	r1, [r7, #8]
 8103182:	607a      	str	r2, [r7, #4]
 8103184:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 8103186:	687a      	ldr	r2, [r7, #4]
 8103188:	68b9      	ldr	r1, [r7, #8]
 810318a:	68f8      	ldr	r0, [r7, #12]
 810318c:	f000 f9df 	bl	810354e <_ZSt18uninitialized_copyISt13move_iteratorIP8SMessageES2_ET0_T_S5_S4_>
 8103190:	4603      	mov	r3, r0
    }
 8103192:	4618      	mov	r0, r3
 8103194:	3710      	adds	r7, #16
 8103196:	46bd      	mov	sp, r7
 8103198:	bd80      	pop	{r7, pc}

0810319a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 810319a:	b580      	push	{r7, lr}
 810319c:	b082      	sub	sp, #8
 810319e:	af00      	add	r7, sp, #0
 81031a0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 81031a2:	6878      	ldr	r0, [r7, #4]
 81031a4:	f000 f9e7 	bl	8103576 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>
 81031a8:	4603      	mov	r3, r0
 81031aa:	4618      	mov	r0, r3
 81031ac:	3708      	adds	r7, #8
 81031ae:	46bd      	mov	sp, r7
 81031b0:	bd80      	pop	{r7, pc}

081031b2 <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EEC1ES3_>:
      constexpr _Head_base(const _Head& __h)
 81031b2:	b480      	push	{r7}
 81031b4:	b083      	sub	sp, #12
 81031b6:	af00      	add	r7, sp, #0
 81031b8:	6078      	str	r0, [r7, #4]
 81031ba:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 81031bc:	687b      	ldr	r3, [r7, #4]
 81031be:	683a      	ldr	r2, [r7, #0]
 81031c0:	601a      	str	r2, [r3, #0]
 81031c2:	687b      	ldr	r3, [r7, #4]
 81031c4:	4618      	mov	r0, r3
 81031c6:	370c      	adds	r7, #12
 81031c8:	46bd      	mov	sp, r7
 81031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031ce:	4770      	bx	lr

081031d0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 81031d0:	b5b0      	push	{r4, r5, r7, lr}
 81031d2:	b088      	sub	sp, #32
 81031d4:	af02      	add	r7, sp, #8
 81031d6:	60f8      	str	r0, [r7, #12]
 81031d8:	60b9      	str	r1, [r7, #8]
 81031da:	607a      	str	r2, [r7, #4]
 81031dc:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 81031de:	68f8      	ldr	r0, [r7, #12]
 81031e0:	f000 f8c9 	bl	8103376 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 81031e4:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 81031e6:	68b8      	ldr	r0, [r7, #8]
 81031e8:	f7ff fc80 	bl	8102aec <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 81031ec:	4604      	mov	r4, r0
 81031ee:	6878      	ldr	r0, [r7, #4]
 81031f0:	f7ff fc87 	bl	8102b02 <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 81031f4:	4605      	mov	r5, r0
 81031f6:	6838      	ldr	r0, [r7, #0]
 81031f8:	f7ff fc8e 	bl	8102b18 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 81031fc:	4603      	mov	r3, r0
 81031fe:	9300      	str	r3, [sp, #0]
 8103200:	462b      	mov	r3, r5
 8103202:	4622      	mov	r2, r4
 8103204:	6979      	ldr	r1, [r7, #20]
 8103206:	68f8      	ldr	r0, [r7, #12]
 8103208:	f000 f9c0 	bl	810358c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 810320c:	697b      	ldr	r3, [r7, #20]
	}
 810320e:	4618      	mov	r0, r3
 8103210:	3718      	adds	r7, #24
 8103212:	46bd      	mov	sp, r7
 8103214:	bdb0      	pop	{r4, r5, r7, pc}

08103216 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8103216:	b580      	push	{r7, lr}
 8103218:	b084      	sub	sp, #16
 810321a:	af00      	add	r7, sp, #0
 810321c:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 810321e:	687b      	ldr	r3, [r7, #4]
 8103220:	681a      	ldr	r2, [r3, #0]
 8103222:	f107 030c 	add.w	r3, r7, #12
 8103226:	4611      	mov	r1, r2
 8103228:	4618      	mov	r0, r3
 810322a:	f7ff faa2 	bl	8102772 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 810322e:	68fb      	ldr	r3, [r7, #12]
 8103230:	4618      	mov	r0, r3
 8103232:	3710      	adds	r7, #16
 8103234:	46bd      	mov	sp, r7
 8103236:	bd80      	pop	{r7, pc}

08103238 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8103238:	b480      	push	{r7}
 810323a:	b083      	sub	sp, #12
 810323c:	af00      	add	r7, sp, #0
 810323e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8103240:	687b      	ldr	r3, [r7, #4]
 8103242:	3310      	adds	r3, #16
 8103244:	4618      	mov	r0, r3
 8103246:	370c      	adds	r7, #12
 8103248:	46bd      	mov	sp, r7
 810324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810324e:	4770      	bx	lr

08103250 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8103250:	b480      	push	{r7}
 8103252:	b083      	sub	sp, #12
 8103254:	af00      	add	r7, sp, #0
 8103256:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8103258:	687b      	ldr	r3, [r7, #4]
 810325a:	330c      	adds	r3, #12
 810325c:	4618      	mov	r0, r3
 810325e:	370c      	adds	r7, #12
 8103260:	46bd      	mov	sp, r7
 8103262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103266:	4770      	bx	lr

08103268 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8103268:	b580      	push	{r7, lr}
 810326a:	b084      	sub	sp, #16
 810326c:	af00      	add	r7, sp, #0
 810326e:	60f8      	str	r0, [r7, #12]
 8103270:	60b9      	str	r1, [r7, #8]
 8103272:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8103274:	68b8      	ldr	r0, [r7, #8]
 8103276:	f000 f8d9 	bl	810342c <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 810327a:	4603      	mov	r3, r0
 810327c:	681a      	ldr	r2, [r3, #0]
 810327e:	68fb      	ldr	r3, [r7, #12]
 8103280:	601a      	str	r2, [r3, #0]
 8103282:	6878      	ldr	r0, [r7, #4]
 8103284:	f000 f8d2 	bl	810342c <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8103288:	4603      	mov	r3, r0
 810328a:	681a      	ldr	r2, [r3, #0]
 810328c:	68fb      	ldr	r3, [r7, #12]
 810328e:	605a      	str	r2, [r3, #4]
 8103290:	68fb      	ldr	r3, [r7, #12]
 8103292:	4618      	mov	r0, r3
 8103294:	3710      	adds	r7, #16
 8103296:	46bd      	mov	sp, r7
 8103298:	bd80      	pop	{r7, pc}

0810329a <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 810329a:	b580      	push	{r7, lr}
 810329c:	b082      	sub	sp, #8
 810329e:	af00      	add	r7, sp, #0
 81032a0:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 81032a2:	687b      	ldr	r3, [r7, #4]
 81032a4:	681b      	ldr	r3, [r3, #0]
 81032a6:	4618      	mov	r0, r3
 81032a8:	f018 fb68 	bl	811b97c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 81032ac:	4602      	mov	r2, r0
 81032ae:	687b      	ldr	r3, [r7, #4]
 81032b0:	601a      	str	r2, [r3, #0]
	return *this;
 81032b2:	687b      	ldr	r3, [r7, #4]
      }
 81032b4:	4618      	mov	r0, r3
 81032b6:	3708      	adds	r7, #8
 81032b8:	46bd      	mov	sp, r7
 81032ba:	bd80      	pop	{r7, pc}

081032bc <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEEC1IS1_EEOT_>:
	_Tuple_impl(_UHead&& __head)
 81032bc:	b590      	push	{r4, r7, lr}
 81032be:	b083      	sub	sp, #12
 81032c0:	af00      	add	r7, sp, #0
 81032c2:	6078      	str	r0, [r7, #4]
 81032c4:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 81032c6:	687c      	ldr	r4, [r7, #4]
 81032c8:	6838      	ldr	r0, [r7, #0]
 81032ca:	f7ff fd76 	bl	8102dba <_ZSt7forwardIN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS2_E4typeE>
 81032ce:	4603      	mov	r3, r0
 81032d0:	4619      	mov	r1, r3
 81032d2:	4620      	mov	r0, r4
 81032d4:	f000 f987 	bl	81035e6 <_ZNSt10_Head_baseILj0EON19EventManagerCM4Task11EEventQueueELb0EEC1IS1_EEOT_>
	{ }
 81032d8:	687b      	ldr	r3, [r7, #4]
 81032da:	4618      	mov	r0, r3
 81032dc:	370c      	adds	r7, #12
 81032de:	46bd      	mov	sp, r7
 81032e0:	bd90      	pop	{r4, r7, pc}

081032e2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 81032e2:	b5b0      	push	{r4, r5, r7, lr}
 81032e4:	b088      	sub	sp, #32
 81032e6:	af02      	add	r7, sp, #8
 81032e8:	60f8      	str	r0, [r7, #12]
 81032ea:	60b9      	str	r1, [r7, #8]
 81032ec:	607a      	str	r2, [r7, #4]
 81032ee:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 81032f0:	68f8      	ldr	r0, [r7, #12]
 81032f2:	f000 f840 	bl	8103376 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 81032f6:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 81032f8:	68b8      	ldr	r0, [r7, #8]
 81032fa:	f7ff fbf7 	bl	8102aec <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 81032fe:	4604      	mov	r4, r0
 8103300:	6878      	ldr	r0, [r7, #4]
 8103302:	f7ff fd88 	bl	8102e16 <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8103306:	4605      	mov	r5, r0
 8103308:	6838      	ldr	r0, [r7, #0]
 810330a:	f7ff fc05 	bl	8102b18 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 810330e:	4603      	mov	r3, r0
 8103310:	9300      	str	r3, [sp, #0]
 8103312:	462b      	mov	r3, r5
 8103314:	4622      	mov	r2, r4
 8103316:	6979      	ldr	r1, [r7, #20]
 8103318:	68f8      	ldr	r0, [r7, #12]
 810331a:	f000 f974 	bl	8103606 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 810331e:	697b      	ldr	r3, [r7, #20]
	}
 8103320:	4618      	mov	r0, r3
 8103322:	3718      	adds	r7, #24
 8103324:	46bd      	mov	sp, r7
 8103326:	bdb0      	pop	{r4, r5, r7, pc}

08103328 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8103328:	b480      	push	{r7}
 810332a:	b083      	sub	sp, #12
 810332c:	af00      	add	r7, sp, #0
 810332e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8103330:	687b      	ldr	r3, [r7, #4]
 8103332:	4618      	mov	r0, r3
 8103334:	370c      	adds	r7, #12
 8103336:	46bd      	mov	sp, r7
 8103338:	f85d 7b04 	ldr.w	r7, [sp], #4
 810333c:	4770      	bx	lr

0810333e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 810333e:	b580      	push	{r7, lr}
 8103340:	b082      	sub	sp, #8
 8103342:	af00      	add	r7, sp, #0
 8103344:	6078      	str	r0, [r7, #4]
 8103346:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8103348:	6839      	ldr	r1, [r7, #0]
 810334a:	6878      	ldr	r0, [r7, #4]
 810334c:	f000 f988 	bl	8103660 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE7destroyIS7_EEvPT_>
	}
 8103350:	bf00      	nop
 8103352:	3708      	adds	r7, #8
 8103354:	46bd      	mov	sp, r7
 8103356:	bd80      	pop	{r7, pc}

08103358 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8103358:	b580      	push	{r7, lr}
 810335a:	b084      	sub	sp, #16
 810335c:	af00      	add	r7, sp, #0
 810335e:	60f8      	str	r0, [r7, #12]
 8103360:	60b9      	str	r1, [r7, #8]
 8103362:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8103364:	687a      	ldr	r2, [r7, #4]
 8103366:	68b9      	ldr	r1, [r7, #8]
 8103368:	68f8      	ldr	r0, [r7, #12]
 810336a:	f000 f984 	bl	8103676 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE10deallocateEPS8_j>
 810336e:	bf00      	nop
 8103370:	3710      	adds	r7, #16
 8103372:	46bd      	mov	sp, r7
 8103374:	bd80      	pop	{r7, pc}

08103376 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 8103376:	b580      	push	{r7, lr}
 8103378:	b082      	sub	sp, #8
 810337a:	af00      	add	r7, sp, #0
 810337c:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 810337e:	6878      	ldr	r0, [r7, #4]
 8103380:	f7ff ffd2 	bl	8103328 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8103384:	4603      	mov	r3, r0
 8103386:	2101      	movs	r1, #1
 8103388:	4618      	mov	r0, r3
 810338a:	f000 f987 	bl	810369c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE8allocateERS9_j>
 810338e:	4603      	mov	r3, r0
 8103390:	4618      	mov	r0, r3
 8103392:	3708      	adds	r7, #8
 8103394:	46bd      	mov	sp, r7
 8103396:	bd80      	pop	{r7, pc}

08103398 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRS1_RS5_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8103398:	b5f0      	push	{r4, r5, r6, r7, lr}
 810339a:	b085      	sub	sp, #20
 810339c:	af00      	add	r7, sp, #0
 810339e:	60f8      	str	r0, [r7, #12]
 81033a0:	60b9      	str	r1, [r7, #8]
 81033a2:	607a      	str	r2, [r7, #4]
 81033a4:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 81033a6:	68bb      	ldr	r3, [r7, #8]
 81033a8:	4619      	mov	r1, r3
 81033aa:	2018      	movs	r0, #24
 81033ac:	f7fd fd04 	bl	8100db8 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 81033b0:	68f8      	ldr	r0, [r7, #12]
 81033b2:	f7ff ffb9 	bl	8103328 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 81033b6:	4604      	mov	r4, r0
 81033b8:	68b8      	ldr	r0, [r7, #8]
 81033ba:	f7ff fb7a 	bl	8102ab2 <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 81033be:	4605      	mov	r5, r0
 81033c0:	6878      	ldr	r0, [r7, #4]
 81033c2:	f7fe fd46 	bl	8101e52 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 81033c6:	4606      	mov	r6, r0
 81033c8:	6838      	ldr	r0, [r7, #0]
 81033ca:	f7fe fd4d 	bl	8101e68 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 81033ce:	4603      	mov	r3, r0
 81033d0:	4632      	mov	r2, r6
 81033d2:	4629      	mov	r1, r5
 81033d4:	4620      	mov	r0, r4
 81033d6:	f000 f970 	bl	81036ba <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRS3_RS6_EEEvRS9_PT_DpOT0_>
	}
 81033da:	bf00      	nop
 81033dc:	3714      	adds	r7, #20
 81033de:	46bd      	mov	sp, r7
 81033e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

081033e2 <_ZNKSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>:
      _M_valptr() const
 81033e2:	b580      	push	{r7, lr}
 81033e4:	b082      	sub	sp, #8
 81033e6:	af00      	add	r7, sp, #0
 81033e8:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 81033ea:	687b      	ldr	r3, [r7, #4]
 81033ec:	3310      	adds	r3, #16
 81033ee:	4618      	mov	r0, r3
 81033f0:	f000 f97b 	bl	81036ea <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>
 81033f4:	4603      	mov	r3, r0
 81033f6:	4618      	mov	r0, r3
 81033f8:	3708      	adds	r7, #8
 81033fa:	46bd      	mov	sp, r7
 81033fc:	bd80      	pop	{r7, pc}

081033fe <_ZNKSt10_Select1stISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEclERKS6_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 81033fe:	b480      	push	{r7}
 8103400:	b083      	sub	sp, #12
 8103402:	af00      	add	r7, sp, #0
 8103404:	6078      	str	r0, [r7, #4]
 8103406:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8103408:	683b      	ldr	r3, [r7, #0]
 810340a:	4618      	mov	r0, r3
 810340c:	370c      	adds	r7, #12
 810340e:	46bd      	mov	sp, r7
 8103410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103414:	4770      	bx	lr

08103416 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8103416:	b480      	push	{r7}
 8103418:	b083      	sub	sp, #12
 810341a:	af00      	add	r7, sp, #0
 810341c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810341e:	687b      	ldr	r3, [r7, #4]
 8103420:	4618      	mov	r0, r3
 8103422:	370c      	adds	r7, #12
 8103424:	46bd      	mov	sp, r7
 8103426:	f85d 7b04 	ldr.w	r7, [sp], #4
 810342a:	4770      	bx	lr

0810342c <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810342c:	b480      	push	{r7}
 810342e:	b083      	sub	sp, #12
 8103430:	af00      	add	r7, sp, #0
 8103432:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8103434:	687b      	ldr	r3, [r7, #4]
 8103436:	4618      	mov	r0, r3
 8103438:	370c      	adds	r7, #12
 810343a:	46bd      	mov	sp, r7
 810343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103440:	4770      	bx	lr
	...

08103444 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_max_sizeERKS1_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8103444:	b580      	push	{r7, lr}
 8103446:	b084      	sub	sp, #16
 8103448:	af00      	add	r7, sp, #0
 810344a:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 810344c:	4b0a      	ldr	r3, [pc, #40]	@ (8103478 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 810344e:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8103450:	6878      	ldr	r0, [r7, #4]
 8103452:	f000 f956 	bl	8103702 <_ZNSt16allocator_traitsISaI8SMessageEE8max_sizeERKS1_>
 8103456:	4603      	mov	r3, r0
 8103458:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 810345a:	f107 0208 	add.w	r2, r7, #8
 810345e:	f107 030c 	add.w	r3, r7, #12
 8103462:	4611      	mov	r1, r2
 8103464:	4618      	mov	r0, r3
 8103466:	f000 f958 	bl	810371a <_ZSt3minIjERKT_S2_S2_>
 810346a:	4603      	mov	r3, r0
 810346c:	681b      	ldr	r3, [r3, #0]
      }
 810346e:	4618      	mov	r0, r3
 8103470:	3710      	adds	r7, #16
 8103472:	46bd      	mov	sp, r7
 8103474:	bd80      	pop	{r7, pc}
 8103476:	bf00      	nop
 8103478:	05555555 	.word	0x05555555

0810347c <_ZNKSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 810347c:	b480      	push	{r7}
 810347e:	b083      	sub	sp, #12
 8103480:	af00      	add	r7, sp, #0
 8103482:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8103484:	687b      	ldr	r3, [r7, #4]
 8103486:	4618      	mov	r0, r3
 8103488:	370c      	adds	r7, #12
 810348a:	46bd      	mov	sp, r7
 810348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103490:	4770      	bx	lr
	...

08103494 <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8103494:	b580      	push	{r7, lr}
 8103496:	b084      	sub	sp, #16
 8103498:	af00      	add	r7, sp, #0
 810349a:	60f8      	str	r0, [r7, #12]
 810349c:	60b9      	str	r1, [r7, #8]
 810349e:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 81034a0:	68f8      	ldr	r0, [r7, #12]
 81034a2:	f000 f94f 	bl	8103744 <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv>
 81034a6:	4602      	mov	r2, r0
 81034a8:	68bb      	ldr	r3, [r7, #8]
 81034aa:	4293      	cmp	r3, r2
 81034ac:	bf8c      	ite	hi
 81034ae:	2301      	movhi	r3, #1
 81034b0:	2300      	movls	r3, #0
 81034b2:	b2db      	uxtb	r3, r3
 81034b4:	2b00      	cmp	r3, #0
 81034b6:	bf14      	ite	ne
 81034b8:	2301      	movne	r3, #1
 81034ba:	2300      	moveq	r3, #0
 81034bc:	b2db      	uxtb	r3, r3
 81034be:	2b00      	cmp	r3, #0
 81034c0:	d007      	beq.n	81034d2 <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 81034c2:	68bb      	ldr	r3, [r7, #8]
 81034c4:	4a09      	ldr	r2, [pc, #36]	@ (81034ec <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv+0x58>)
 81034c6:	4293      	cmp	r3, r2
 81034c8:	d901      	bls.n	81034ce <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 81034ca:	f018 fac2 	bl	811ba52 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 81034ce:	f018 fabd 	bl	811ba4c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 81034d2:	68ba      	ldr	r2, [r7, #8]
 81034d4:	4613      	mov	r3, r2
 81034d6:	005b      	lsls	r3, r3, #1
 81034d8:	4413      	add	r3, r2
 81034da:	00db      	lsls	r3, r3, #3
 81034dc:	4618      	mov	r0, r3
 81034de:	f018 f9e7 	bl	811b8b0 <_Znwj>
 81034e2:	4603      	mov	r3, r0
      }
 81034e4:	4618      	mov	r0, r3
 81034e6:	3710      	adds	r7, #16
 81034e8:	46bd      	mov	sp, r7
 81034ea:	bd80      	pop	{r7, pc}
 81034ec:	0aaaaaaa 	.word	0x0aaaaaaa

081034f0 <_ZSt12__relocate_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 81034f0:	b5b0      	push	{r4, r5, r7, lr}
 81034f2:	b084      	sub	sp, #16
 81034f4:	af00      	add	r7, sp, #0
 81034f6:	60f8      	str	r0, [r7, #12]
 81034f8:	60b9      	str	r1, [r7, #8]
 81034fa:	607a      	str	r2, [r7, #4]
 81034fc:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 81034fe:	68f8      	ldr	r0, [r7, #12]
 8103500:	f000 f92e 	bl	8103760 <_ZSt12__niter_baseIP8SMessageET_S2_>
 8103504:	4604      	mov	r4, r0
 8103506:	68b8      	ldr	r0, [r7, #8]
 8103508:	f000 f92a 	bl	8103760 <_ZSt12__niter_baseIP8SMessageET_S2_>
 810350c:	4605      	mov	r5, r0
 810350e:	6878      	ldr	r0, [r7, #4]
 8103510:	f000 f926 	bl	8103760 <_ZSt12__niter_baseIP8SMessageET_S2_>
 8103514:	4602      	mov	r2, r0
 8103516:	683b      	ldr	r3, [r7, #0]
 8103518:	4629      	mov	r1, r5
 810351a:	4620      	mov	r0, r4
 810351c:	f000 f92c 	bl	8103778 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>
 8103520:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 8103522:	4618      	mov	r0, r3
 8103524:	3710      	adds	r7, #16
 8103526:	46bd      	mov	sp, r7
 8103528:	bdb0      	pop	{r4, r5, r7, pc}

0810352a <_ZNSt13move_iteratorIP8SMessageEC1ES1_>:
      move_iterator(iterator_type __i)
 810352a:	b580      	push	{r7, lr}
 810352c:	b082      	sub	sp, #8
 810352e:	af00      	add	r7, sp, #0
 8103530:	6078      	str	r0, [r7, #4]
 8103532:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8103534:	463b      	mov	r3, r7
 8103536:	4618      	mov	r0, r3
 8103538:	f000 f948 	bl	81037cc <_ZSt4moveIRP8SMessageEONSt16remove_referenceIT_E4typeEOS4_>
 810353c:	4603      	mov	r3, r0
 810353e:	681a      	ldr	r2, [r3, #0]
 8103540:	687b      	ldr	r3, [r7, #4]
 8103542:	601a      	str	r2, [r3, #0]
 8103544:	687b      	ldr	r3, [r7, #4]
 8103546:	4618      	mov	r0, r3
 8103548:	3708      	adds	r7, #8
 810354a:	46bd      	mov	sp, r7
 810354c:	bd80      	pop	{r7, pc}

0810354e <_ZSt18uninitialized_copyISt13move_iteratorIP8SMessageES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 810354e:	b580      	push	{r7, lr}
 8103550:	b086      	sub	sp, #24
 8103552:	af00      	add	r7, sp, #0
 8103554:	60f8      	str	r0, [r7, #12]
 8103556:	60b9      	str	r1, [r7, #8]
 8103558:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 810355a:	2301      	movs	r3, #1
 810355c:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 810355e:	2301      	movs	r3, #1
 8103560:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8103562:	687a      	ldr	r2, [r7, #4]
 8103564:	68b9      	ldr	r1, [r7, #8]
 8103566:	68f8      	ldr	r0, [r7, #12]
 8103568:	f000 f93b 	bl	81037e2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIP8SMessageES4_EET0_T_S7_S6_>
 810356c:	4603      	mov	r3, r0
    }
 810356e:	4618      	mov	r0, r3
 8103570:	3718      	adds	r7, #24
 8103572:	46bd      	mov	sp, r7
 8103574:	bd80      	pop	{r7, pc}

08103576 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>:
      _M_addr() noexcept
 8103576:	b480      	push	{r7}
 8103578:	b083      	sub	sp, #12
 810357a:	af00      	add	r7, sp, #0
 810357c:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 810357e:	687b      	ldr	r3, [r7, #4]
 8103580:	4618      	mov	r0, r3
 8103582:	370c      	adds	r7, #12
 8103584:	46bd      	mov	sp, r7
 8103586:	f85d 7b04 	ldr.w	r7, [sp], #4
 810358a:	4770      	bx	lr

0810358c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 810358c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8103590:	b086      	sub	sp, #24
 8103592:	af02      	add	r7, sp, #8
 8103594:	60f8      	str	r0, [r7, #12]
 8103596:	60b9      	str	r1, [r7, #8]
 8103598:	607a      	str	r2, [r7, #4]
 810359a:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 810359c:	68bb      	ldr	r3, [r7, #8]
 810359e:	4619      	mov	r1, r3
 81035a0:	2018      	movs	r0, #24
 81035a2:	f7fd fc09 	bl	8100db8 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 81035a6:	68f8      	ldr	r0, [r7, #12]
 81035a8:	f7ff febe 	bl	8103328 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 81035ac:	4604      	mov	r4, r0
 81035ae:	68b8      	ldr	r0, [r7, #8]
 81035b0:	f7ff fa7f 	bl	8102ab2 <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 81035b4:	4605      	mov	r5, r0
 81035b6:	6878      	ldr	r0, [r7, #4]
 81035b8:	f7ff fa98 	bl	8102aec <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 81035bc:	4606      	mov	r6, r0
 81035be:	6838      	ldr	r0, [r7, #0]
 81035c0:	f7ff fa9f 	bl	8102b02 <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 81035c4:	4680      	mov	r8, r0
 81035c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81035c8:	f7ff faa6 	bl	8102b18 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 81035cc:	4603      	mov	r3, r0
 81035ce:	9300      	str	r3, [sp, #0]
 81035d0:	4643      	mov	r3, r8
 81035d2:	4632      	mov	r2, r6
 81035d4:	4629      	mov	r1, r5
 81035d6:	4620      	mov	r0, r4
 81035d8:	f000 f913 	bl	8103802 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 81035dc:	bf00      	nop
 81035de:	3710      	adds	r7, #16
 81035e0:	46bd      	mov	sp, r7
 81035e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

081035e6 <_ZNSt10_Head_baseILj0EON19EventManagerCM4Task11EEventQueueELb0EEC1IS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 81035e6:	b580      	push	{r7, lr}
 81035e8:	b082      	sub	sp, #8
 81035ea:	af00      	add	r7, sp, #0
 81035ec:	6078      	str	r0, [r7, #4]
 81035ee:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 81035f0:	6838      	ldr	r0, [r7, #0]
 81035f2:	f7ff fbe2 	bl	8102dba <_ZSt7forwardIN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS2_E4typeE>
 81035f6:	4602      	mov	r2, r0
 81035f8:	687b      	ldr	r3, [r7, #4]
 81035fa:	601a      	str	r2, [r3, #0]
 81035fc:	687b      	ldr	r3, [r7, #4]
 81035fe:	4618      	mov	r0, r3
 8103600:	3708      	adds	r7, #8
 8103602:	46bd      	mov	sp, r7
 8103604:	bd80      	pop	{r7, pc}

08103606 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS1_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8103606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810360a:	b086      	sub	sp, #24
 810360c:	af02      	add	r7, sp, #8
 810360e:	60f8      	str	r0, [r7, #12]
 8103610:	60b9      	str	r1, [r7, #8]
 8103612:	607a      	str	r2, [r7, #4]
 8103614:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8103616:	68bb      	ldr	r3, [r7, #8]
 8103618:	4619      	mov	r1, r3
 810361a:	2018      	movs	r0, #24
 810361c:	f7fd fbcc 	bl	8100db8 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8103620:	68f8      	ldr	r0, [r7, #12]
 8103622:	f7ff fe81 	bl	8103328 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8103626:	4604      	mov	r4, r0
 8103628:	68b8      	ldr	r0, [r7, #8]
 810362a:	f7ff fa42 	bl	8102ab2 <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 810362e:	4605      	mov	r5, r0
 8103630:	6878      	ldr	r0, [r7, #4]
 8103632:	f7ff fa5b 	bl	8102aec <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8103636:	4606      	mov	r6, r0
 8103638:	6838      	ldr	r0, [r7, #0]
 810363a:	f7ff fbec 	bl	8102e16 <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 810363e:	4680      	mov	r8, r0
 8103640:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8103642:	f7ff fa69 	bl	8102b18 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8103646:	4603      	mov	r3, r0
 8103648:	9300      	str	r3, [sp, #0]
 810364a:	4643      	mov	r3, r8
 810364c:	4632      	mov	r2, r6
 810364e:	4629      	mov	r1, r5
 8103650:	4620      	mov	r0, r4
 8103652:	f000 f8f4 	bl	810383e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJOS3_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 8103656:	bf00      	nop
 8103658:	3710      	adds	r7, #16
 810365a:	46bd      	mov	sp, r7
 810365c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08103660 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE7destroyIS7_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 8103660:	b480      	push	{r7}
 8103662:	b083      	sub	sp, #12
 8103664:	af00      	add	r7, sp, #0
 8103666:	6078      	str	r0, [r7, #4]
 8103668:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 810366a:	bf00      	nop
 810366c:	370c      	adds	r7, #12
 810366e:	46bd      	mov	sp, r7
 8103670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103674:	4770      	bx	lr

08103676 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8103676:	b580      	push	{r7, lr}
 8103678:	b084      	sub	sp, #16
 810367a:	af00      	add	r7, sp, #0
 810367c:	60f8      	str	r0, [r7, #12]
 810367e:	60b9      	str	r1, [r7, #8]
 8103680:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8103682:	687a      	ldr	r2, [r7, #4]
 8103684:	4613      	mov	r3, r2
 8103686:	005b      	lsls	r3, r3, #1
 8103688:	4413      	add	r3, r2
 810368a:	00db      	lsls	r3, r3, #3
 810368c:	4619      	mov	r1, r3
 810368e:	68b8      	ldr	r0, [r7, #8]
 8103690:	f018 f90c 	bl	811b8ac <_ZdlPvj>
      }
 8103694:	bf00      	nop
 8103696:	3710      	adds	r7, #16
 8103698:	46bd      	mov	sp, r7
 810369a:	bd80      	pop	{r7, pc}

0810369c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 810369c:	b580      	push	{r7, lr}
 810369e:	b082      	sub	sp, #8
 81036a0:	af00      	add	r7, sp, #0
 81036a2:	6078      	str	r0, [r7, #4]
 81036a4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 81036a6:	2200      	movs	r2, #0
 81036a8:	6839      	ldr	r1, [r7, #0]
 81036aa:	6878      	ldr	r0, [r7, #4]
 81036ac:	f000 f8e6 	bl	810387c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv>
 81036b0:	4603      	mov	r3, r0
 81036b2:	4618      	mov	r0, r3
 81036b4:	3708      	adds	r7, #8
 81036b6:	46bd      	mov	sp, r7
 81036b8:	bd80      	pop	{r7, pc}

081036ba <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRS3_RS6_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 81036ba:	b590      	push	{r4, r7, lr}
 81036bc:	b085      	sub	sp, #20
 81036be:	af00      	add	r7, sp, #0
 81036c0:	60f8      	str	r0, [r7, #12]
 81036c2:	60b9      	str	r1, [r7, #8]
 81036c4:	607a      	str	r2, [r7, #4]
 81036c6:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 81036c8:	6878      	ldr	r0, [r7, #4]
 81036ca:	f7fe fbc2 	bl	8101e52 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 81036ce:	4604      	mov	r4, r0
 81036d0:	6838      	ldr	r0, [r7, #0]
 81036d2:	f7fe fbc9 	bl	8101e68 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 81036d6:	4603      	mov	r3, r0
 81036d8:	4622      	mov	r2, r4
 81036da:	68b9      	ldr	r1, [r7, #8]
 81036dc:	68f8      	ldr	r0, [r7, #12]
 81036de:	f000 f8fb 	bl	81038d8 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRS3_RS6_EEEvPT_DpOT0_>
	}
 81036e2:	bf00      	nop
 81036e4:	3714      	adds	r7, #20
 81036e6:	46bd      	mov	sp, r7
 81036e8:	bd90      	pop	{r4, r7, pc}

081036ea <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 81036ea:	b580      	push	{r7, lr}
 81036ec:	b082      	sub	sp, #8
 81036ee:	af00      	add	r7, sp, #0
 81036f0:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 81036f2:	6878      	ldr	r0, [r7, #4]
 81036f4:	f000 f90e 	bl	8103914 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>
 81036f8:	4603      	mov	r3, r0
 81036fa:	4618      	mov	r0, r3
 81036fc:	3708      	adds	r7, #8
 81036fe:	46bd      	mov	sp, r7
 8103700:	bd80      	pop	{r7, pc}

08103702 <_ZNSt16allocator_traitsISaI8SMessageEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8103702:	b580      	push	{r7, lr}
 8103704:	b082      	sub	sp, #8
 8103706:	af00      	add	r7, sp, #0
 8103708:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 810370a:	6878      	ldr	r0, [r7, #4]
 810370c:	f000 f90d 	bl	810392a <_ZNKSt15__new_allocatorI8SMessageE8max_sizeEv>
 8103710:	4603      	mov	r3, r0
      }
 8103712:	4618      	mov	r0, r3
 8103714:	3708      	adds	r7, #8
 8103716:	46bd      	mov	sp, r7
 8103718:	bd80      	pop	{r7, pc}

0810371a <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 810371a:	b480      	push	{r7}
 810371c:	b083      	sub	sp, #12
 810371e:	af00      	add	r7, sp, #0
 8103720:	6078      	str	r0, [r7, #4]
 8103722:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8103724:	683b      	ldr	r3, [r7, #0]
 8103726:	681a      	ldr	r2, [r3, #0]
 8103728:	687b      	ldr	r3, [r7, #4]
 810372a:	681b      	ldr	r3, [r3, #0]
 810372c:	429a      	cmp	r2, r3
 810372e:	d201      	bcs.n	8103734 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8103730:	683b      	ldr	r3, [r7, #0]
 8103732:	e000      	b.n	8103736 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8103734:	687b      	ldr	r3, [r7, #4]
    }
 8103736:	4618      	mov	r0, r3
 8103738:	370c      	adds	r7, #12
 810373a:	46bd      	mov	sp, r7
 810373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103740:	4770      	bx	lr
	...

08103744 <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8103744:	b480      	push	{r7}
 8103746:	b083      	sub	sp, #12
 8103748:	af00      	add	r7, sp, #0
 810374a:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 810374c:	4b03      	ldr	r3, [pc, #12]	@ (810375c <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 810374e:	4618      	mov	r0, r3
 8103750:	370c      	adds	r7, #12
 8103752:	46bd      	mov	sp, r7
 8103754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103758:	4770      	bx	lr
 810375a:	bf00      	nop
 810375c:	05555555 	.word	0x05555555

08103760 <_ZSt12__niter_baseIP8SMessageET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8103760:	b480      	push	{r7}
 8103762:	b083      	sub	sp, #12
 8103764:	af00      	add	r7, sp, #0
 8103766:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8103768:	687b      	ldr	r3, [r7, #4]
 810376a:	4618      	mov	r0, r3
 810376c:	370c      	adds	r7, #12
 810376e:	46bd      	mov	sp, r7
 8103770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103774:	4770      	bx	lr
	...

08103778 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8103778:	b580      	push	{r7, lr}
 810377a:	b086      	sub	sp, #24
 810377c:	af00      	add	r7, sp, #0
 810377e:	60f8      	str	r0, [r7, #12]
 8103780:	60b9      	str	r1, [r7, #8]
 8103782:	607a      	str	r2, [r7, #4]
 8103784:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8103786:	68ba      	ldr	r2, [r7, #8]
 8103788:	68fb      	ldr	r3, [r7, #12]
 810378a:	1ad3      	subs	r3, r2, r3
 810378c:	10db      	asrs	r3, r3, #3
 810378e:	4a0e      	ldr	r2, [pc, #56]	@ (81037c8 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x50>)
 8103790:	fb02 f303 	mul.w	r3, r2, r3
 8103794:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8103796:	697b      	ldr	r3, [r7, #20]
 8103798:	2b00      	cmp	r3, #0
 810379a:	dd09      	ble.n	81037b0 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x38>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 810379c:	697a      	ldr	r2, [r7, #20]
 810379e:	4613      	mov	r3, r2
 81037a0:	005b      	lsls	r3, r3, #1
 81037a2:	4413      	add	r3, r2
 81037a4:	00db      	lsls	r3, r3, #3
 81037a6:	461a      	mov	r2, r3
 81037a8:	68f9      	ldr	r1, [r7, #12]
 81037aa:	6878      	ldr	r0, [r7, #4]
 81037ac:	f018 fbb3 	bl	811bf16 <memmove>
      return __result + __count;
 81037b0:	697a      	ldr	r2, [r7, #20]
 81037b2:	4613      	mov	r3, r2
 81037b4:	005b      	lsls	r3, r3, #1
 81037b6:	4413      	add	r3, r2
 81037b8:	00db      	lsls	r3, r3, #3
 81037ba:	461a      	mov	r2, r3
 81037bc:	687b      	ldr	r3, [r7, #4]
 81037be:	4413      	add	r3, r2
    }
 81037c0:	4618      	mov	r0, r3
 81037c2:	3718      	adds	r7, #24
 81037c4:	46bd      	mov	sp, r7
 81037c6:	bd80      	pop	{r7, pc}
 81037c8:	aaaaaaab 	.word	0xaaaaaaab

081037cc <_ZSt4moveIRP8SMessageEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 81037cc:	b480      	push	{r7}
 81037ce:	b083      	sub	sp, #12
 81037d0:	af00      	add	r7, sp, #0
 81037d2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 81037d4:	687b      	ldr	r3, [r7, #4]
 81037d6:	4618      	mov	r0, r3
 81037d8:	370c      	adds	r7, #12
 81037da:	46bd      	mov	sp, r7
 81037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037e0:	4770      	bx	lr

081037e2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIP8SMessageES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 81037e2:	b580      	push	{r7, lr}
 81037e4:	b084      	sub	sp, #16
 81037e6:	af00      	add	r7, sp, #0
 81037e8:	60f8      	str	r0, [r7, #12]
 81037ea:	60b9      	str	r1, [r7, #8]
 81037ec:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 81037ee:	687a      	ldr	r2, [r7, #4]
 81037f0:	68b9      	ldr	r1, [r7, #8]
 81037f2:	68f8      	ldr	r0, [r7, #12]
 81037f4:	f000 f8a5 	bl	8103942 <_ZSt4copyISt13move_iteratorIP8SMessageES2_ET0_T_S5_S4_>
 81037f8:	4603      	mov	r3, r0
 81037fa:	4618      	mov	r0, r3
 81037fc:	3710      	adds	r7, #16
 81037fe:	46bd      	mov	sp, r7
 8103800:	bd80      	pop	{r7, pc}

08103802 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8103802:	b5b0      	push	{r4, r5, r7, lr}
 8103804:	b086      	sub	sp, #24
 8103806:	af02      	add	r7, sp, #8
 8103808:	60f8      	str	r0, [r7, #12]
 810380a:	60b9      	str	r1, [r7, #8]
 810380c:	607a      	str	r2, [r7, #4]
 810380e:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8103810:	6878      	ldr	r0, [r7, #4]
 8103812:	f7ff f96b 	bl	8102aec <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8103816:	4604      	mov	r4, r0
 8103818:	6838      	ldr	r0, [r7, #0]
 810381a:	f7ff f972 	bl	8102b02 <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 810381e:	4605      	mov	r5, r0
 8103820:	6a38      	ldr	r0, [r7, #32]
 8103822:	f7ff f979 	bl	8102b18 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8103826:	4603      	mov	r3, r0
 8103828:	9300      	str	r3, [sp, #0]
 810382a:	462b      	mov	r3, r5
 810382c:	4622      	mov	r2, r4
 810382e:	68b9      	ldr	r1, [r7, #8]
 8103830:	68f8      	ldr	r0, [r7, #12]
 8103832:	f000 f8ae 	bl	8103992 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvPT_DpOT0_>
	}
 8103836:	bf00      	nop
 8103838:	3710      	adds	r7, #16
 810383a:	46bd      	mov	sp, r7
 810383c:	bdb0      	pop	{r4, r5, r7, pc}

0810383e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJOS3_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 810383e:	b5b0      	push	{r4, r5, r7, lr}
 8103840:	b086      	sub	sp, #24
 8103842:	af02      	add	r7, sp, #8
 8103844:	60f8      	str	r0, [r7, #12]
 8103846:	60b9      	str	r1, [r7, #8]
 8103848:	607a      	str	r2, [r7, #4]
 810384a:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 810384c:	6878      	ldr	r0, [r7, #4]
 810384e:	f7ff f94d 	bl	8102aec <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8103852:	4604      	mov	r4, r0
 8103854:	6838      	ldr	r0, [r7, #0]
 8103856:	f7ff fade 	bl	8102e16 <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 810385a:	4605      	mov	r5, r0
 810385c:	6a38      	ldr	r0, [r7, #32]
 810385e:	f7ff f95b 	bl	8102b18 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8103862:	4603      	mov	r3, r0
 8103864:	9300      	str	r3, [sp, #0]
 8103866:	462b      	mov	r3, r5
 8103868:	4622      	mov	r2, r4
 810386a:	68b9      	ldr	r1, [r7, #8]
 810386c:	68f8      	ldr	r0, [r7, #12]
 810386e:	f000 f8b8 	bl	81039e2 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJOS3_EESE_IJEEEEEvPT_DpOT0_>
	}
 8103872:	bf00      	nop
 8103874:	3710      	adds	r7, #16
 8103876:	46bd      	mov	sp, r7
 8103878:	bdb0      	pop	{r4, r5, r7, pc}
	...

0810387c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 810387c:	b580      	push	{r7, lr}
 810387e:	b084      	sub	sp, #16
 8103880:	af00      	add	r7, sp, #0
 8103882:	60f8      	str	r0, [r7, #12]
 8103884:	60b9      	str	r1, [r7, #8]
 8103886:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8103888:	68f8      	ldr	r0, [r7, #12]
 810388a:	f000 f8d3 	bl	8103a34 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE11_M_max_sizeEv>
 810388e:	4602      	mov	r2, r0
 8103890:	68bb      	ldr	r3, [r7, #8]
 8103892:	4293      	cmp	r3, r2
 8103894:	bf8c      	ite	hi
 8103896:	2301      	movhi	r3, #1
 8103898:	2300      	movls	r3, #0
 810389a:	b2db      	uxtb	r3, r3
 810389c:	2b00      	cmp	r3, #0
 810389e:	bf14      	ite	ne
 81038a0:	2301      	movne	r3, #1
 81038a2:	2300      	moveq	r3, #0
 81038a4:	b2db      	uxtb	r3, r3
 81038a6:	2b00      	cmp	r3, #0
 81038a8:	d007      	beq.n	81038ba <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 81038aa:	68bb      	ldr	r3, [r7, #8]
 81038ac:	4a09      	ldr	r2, [pc, #36]	@ (81038d4 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv+0x58>)
 81038ae:	4293      	cmp	r3, r2
 81038b0:	d901      	bls.n	81038b6 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 81038b2:	f018 f8ce 	bl	811ba52 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 81038b6:	f018 f8c9 	bl	811ba4c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 81038ba:	68ba      	ldr	r2, [r7, #8]
 81038bc:	4613      	mov	r3, r2
 81038be:	005b      	lsls	r3, r3, #1
 81038c0:	4413      	add	r3, r2
 81038c2:	00db      	lsls	r3, r3, #3
 81038c4:	4618      	mov	r0, r3
 81038c6:	f017 fff3 	bl	811b8b0 <_Znwj>
 81038ca:	4603      	mov	r3, r0
      }
 81038cc:	4618      	mov	r0, r3
 81038ce:	3710      	adds	r7, #16
 81038d0:	46bd      	mov	sp, r7
 81038d2:	bd80      	pop	{r7, pc}
 81038d4:	0aaaaaaa 	.word	0x0aaaaaaa

081038d8 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRS3_RS6_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 81038d8:	b5b0      	push	{r4, r5, r7, lr}
 81038da:	b084      	sub	sp, #16
 81038dc:	af00      	add	r7, sp, #0
 81038de:	60f8      	str	r0, [r7, #12]
 81038e0:	60b9      	str	r1, [r7, #8]
 81038e2:	607a      	str	r2, [r7, #4]
 81038e4:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 81038e6:	68bb      	ldr	r3, [r7, #8]
 81038e8:	4619      	mov	r1, r3
 81038ea:	2008      	movs	r0, #8
 81038ec:	f7fd fa64 	bl	8100db8 <_ZnwjPv>
 81038f0:	4604      	mov	r4, r0
 81038f2:	6878      	ldr	r0, [r7, #4]
 81038f4:	f7fe faad 	bl	8101e52 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 81038f8:	4605      	mov	r5, r0
 81038fa:	6838      	ldr	r0, [r7, #0]
 81038fc:	f7fe fab4 	bl	8101e68 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8103900:	4603      	mov	r3, r0
 8103902:	461a      	mov	r2, r3
 8103904:	4629      	mov	r1, r5
 8103906:	4620      	mov	r0, r4
 8103908:	f000 f8a2 	bl	8103a50 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IRS1_RS4_Lb1EEEOT_OT0_>
 810390c:	bf00      	nop
 810390e:	3710      	adds	r7, #16
 8103910:	46bd      	mov	sp, r7
 8103912:	bdb0      	pop	{r4, r5, r7, pc}

08103914 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>:
      _M_addr() const noexcept
 8103914:	b480      	push	{r7}
 8103916:	b083      	sub	sp, #12
 8103918:	af00      	add	r7, sp, #0
 810391a:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 810391c:	687b      	ldr	r3, [r7, #4]
 810391e:	4618      	mov	r0, r3
 8103920:	370c      	adds	r7, #12
 8103922:	46bd      	mov	sp, r7
 8103924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103928:	4770      	bx	lr

0810392a <_ZNKSt15__new_allocatorI8SMessageE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 810392a:	b580      	push	{r7, lr}
 810392c:	b082      	sub	sp, #8
 810392e:	af00      	add	r7, sp, #0
 8103930:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8103932:	6878      	ldr	r0, [r7, #4]
 8103934:	f7ff ff06 	bl	8103744 <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv>
 8103938:	4603      	mov	r3, r0
 810393a:	4618      	mov	r0, r3
 810393c:	3708      	adds	r7, #8
 810393e:	46bd      	mov	sp, r7
 8103940:	bd80      	pop	{r7, pc}

08103942 <_ZSt4copyISt13move_iteratorIP8SMessageES2_ET0_T_S5_S4_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8103942:	b590      	push	{r4, r7, lr}
 8103944:	b085      	sub	sp, #20
 8103946:	af00      	add	r7, sp, #0
 8103948:	60f8      	str	r0, [r7, #12]
 810394a:	60b9      	str	r1, [r7, #8]
 810394c:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::reference>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 810394e:	68f8      	ldr	r0, [r7, #12]
 8103950:	f000 f897 	bl	8103a82 <_ZSt12__miter_baseIP8SMessageEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8103954:	4604      	mov	r4, r0
 8103956:	68b8      	ldr	r0, [r7, #8]
 8103958:	f000 f893 	bl	8103a82 <_ZSt12__miter_baseIP8SMessageEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 810395c:	4603      	mov	r3, r0
 810395e:	687a      	ldr	r2, [r7, #4]
 8103960:	4619      	mov	r1, r3
 8103962:	4620      	mov	r0, r4
 8103964:	f000 f89e 	bl	8103aa4 <_ZSt13__copy_move_aILb1EP8SMessageS1_ET1_T0_S3_S2_>
 8103968:	4603      	mov	r3, r0
    }
 810396a:	4618      	mov	r0, r3
 810396c:	3714      	adds	r7, #20
 810396e:	46bd      	mov	sp, r7
 8103970:	bd90      	pop	{r4, r7, pc}

08103972 <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>:
      constexpr tuple(tuple&&) = default;
 8103972:	b580      	push	{r7, lr}
 8103974:	b082      	sub	sp, #8
 8103976:	af00      	add	r7, sp, #0
 8103978:	6078      	str	r0, [r7, #4]
 810397a:	6039      	str	r1, [r7, #0]
 810397c:	687b      	ldr	r3, [r7, #4]
 810397e:	683a      	ldr	r2, [r7, #0]
 8103980:	4611      	mov	r1, r2
 8103982:	4618      	mov	r0, r3
 8103984:	f000 f8b1 	bl	8103aea <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>
 8103988:	687b      	ldr	r3, [r7, #4]
 810398a:	4618      	mov	r0, r3
 810398c:	3708      	adds	r7, #8
 810398e:	46bd      	mov	sp, r7
 8103990:	bd80      	pop	{r7, pc}

08103992 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8103992:	b5f0      	push	{r4, r5, r6, r7, lr}
 8103994:	b087      	sub	sp, #28
 8103996:	af00      	add	r7, sp, #0
 8103998:	60f8      	str	r0, [r7, #12]
 810399a:	60b9      	str	r1, [r7, #8]
 810399c:	607a      	str	r2, [r7, #4]
 810399e:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 81039a0:	68bb      	ldr	r3, [r7, #8]
 81039a2:	4619      	mov	r1, r3
 81039a4:	2008      	movs	r0, #8
 81039a6:	f7fd fa07 	bl	8100db8 <_ZnwjPv>
 81039aa:	4604      	mov	r4, r0
 81039ac:	6878      	ldr	r0, [r7, #4]
 81039ae:	f7ff f89d 	bl	8102aec <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 81039b2:	6838      	ldr	r0, [r7, #0]
 81039b4:	f7ff f8a5 	bl	8102b02 <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 81039b8:	4602      	mov	r2, r0
 81039ba:	f107 0314 	add.w	r3, r7, #20
 81039be:	4611      	mov	r1, r2
 81039c0:	4618      	mov	r0, r3
 81039c2:	f7ff ffd6 	bl	8103972 <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>
 81039c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81039c8:	f7ff f8a6 	bl	8102b18 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 81039cc:	f107 0214 	add.w	r2, r7, #20
 81039d0:	4633      	mov	r3, r6
 81039d2:	4629      	mov	r1, r5
 81039d4:	4620      	mov	r0, r4
 81039d6:	f000 f898 	bl	8103b0a <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 81039da:	bf00      	nop
 81039dc:	371c      	adds	r7, #28
 81039de:	46bd      	mov	sp, r7
 81039e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

081039e2 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJOS3_EESE_IJEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 81039e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 81039e4:	b087      	sub	sp, #28
 81039e6:	af00      	add	r7, sp, #0
 81039e8:	60f8      	str	r0, [r7, #12]
 81039ea:	60b9      	str	r1, [r7, #8]
 81039ec:	607a      	str	r2, [r7, #4]
 81039ee:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 81039f0:	68bb      	ldr	r3, [r7, #8]
 81039f2:	4619      	mov	r1, r3
 81039f4:	2008      	movs	r0, #8
 81039f6:	f7fd f9df 	bl	8100db8 <_ZnwjPv>
 81039fa:	4604      	mov	r4, r0
 81039fc:	6878      	ldr	r0, [r7, #4]
 81039fe:	f7ff f875 	bl	8102aec <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8103a02:	6838      	ldr	r0, [r7, #0]
 8103a04:	f7ff fa07 	bl	8102e16 <_ZSt7forwardISt5tupleIJON19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8103a08:	4602      	mov	r2, r0
 8103a0a:	f107 0314 	add.w	r3, r7, #20
 8103a0e:	4611      	mov	r1, r2
 8103a10:	4618      	mov	r0, r3
 8103a12:	f7fe fd0e 	bl	8102432 <_ZNSt5tupleIJON19EventManagerCM4Task11EEventQueueEEEC1EOS3_>
 8103a16:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8103a18:	f7ff f87e 	bl	8102b18 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8103a1c:	f107 0214 	add.w	r2, r7, #20
 8103a20:	4633      	mov	r3, r6
 8103a22:	4629      	mov	r1, r5
 8103a24:	4620      	mov	r0, r4
 8103a26:	f000 f884 	bl	8103b32 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJOS1_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 8103a2a:	bf00      	nop
 8103a2c:	371c      	adds	r7, #28
 8103a2e:	46bd      	mov	sp, r7
 8103a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08103a34 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8103a34:	b480      	push	{r7}
 8103a36:	b083      	sub	sp, #12
 8103a38:	af00      	add	r7, sp, #0
 8103a3a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8103a3c:	4b03      	ldr	r3, [pc, #12]	@ (8103a4c <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE11_M_max_sizeEv+0x18>)
      }
 8103a3e:	4618      	mov	r0, r3
 8103a40:	370c      	adds	r7, #12
 8103a42:	46bd      	mov	sp, r7
 8103a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a48:	4770      	bx	lr
 8103a4a:	bf00      	nop
 8103a4c:	05555555 	.word	0x05555555

08103a50 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IRS1_RS4_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8103a50:	b580      	push	{r7, lr}
 8103a52:	b084      	sub	sp, #16
 8103a54:	af00      	add	r7, sp, #0
 8103a56:	60f8      	str	r0, [r7, #12]
 8103a58:	60b9      	str	r1, [r7, #8]
 8103a5a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8103a5c:	68b8      	ldr	r0, [r7, #8]
 8103a5e:	f7fe f9f8 	bl	8101e52 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8103a62:	4603      	mov	r3, r0
 8103a64:	781a      	ldrb	r2, [r3, #0]
 8103a66:	68fb      	ldr	r3, [r7, #12]
 8103a68:	701a      	strb	r2, [r3, #0]
 8103a6a:	6878      	ldr	r0, [r7, #4]
 8103a6c:	f7fe f9fc 	bl	8101e68 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8103a70:	4603      	mov	r3, r0
 8103a72:	681a      	ldr	r2, [r3, #0]
 8103a74:	68fb      	ldr	r3, [r7, #12]
 8103a76:	605a      	str	r2, [r3, #4]
 8103a78:	68fb      	ldr	r3, [r7, #12]
 8103a7a:	4618      	mov	r0, r3
 8103a7c:	3710      	adds	r7, #16
 8103a7e:	46bd      	mov	sp, r7
 8103a80:	bd80      	pop	{r7, pc}

08103a82 <_ZSt12__miter_baseIP8SMessageEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    };

  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8103a82:	b580      	push	{r7, lr}
 8103a84:	b082      	sub	sp, #8
 8103a86:	af00      	add	r7, sp, #0
 8103a88:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8103a8a:	1d3b      	adds	r3, r7, #4
 8103a8c:	4618      	mov	r0, r3
 8103a8e:	f000 f864 	bl	8103b5a <_ZNKSt13move_iteratorIP8SMessageE4baseEv>
 8103a92:	4603      	mov	r3, r0
 8103a94:	4618      	mov	r0, r3
 8103a96:	f000 f86c 	bl	8103b72 <_ZSt12__miter_baseIP8SMessageET_S2_>
 8103a9a:	4603      	mov	r3, r0
 8103a9c:	4618      	mov	r0, r3
 8103a9e:	3708      	adds	r7, #8
 8103aa0:	46bd      	mov	sp, r7
 8103aa2:	bd80      	pop	{r7, pc}

08103aa4 <_ZSt13__copy_move_aILb1EP8SMessageS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8103aa4:	b5b0      	push	{r4, r5, r7, lr}
 8103aa6:	b084      	sub	sp, #16
 8103aa8:	af00      	add	r7, sp, #0
 8103aaa:	60f8      	str	r0, [r7, #12]
 8103aac:	60b9      	str	r1, [r7, #8]
 8103aae:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8103ab0:	68f8      	ldr	r0, [r7, #12]
 8103ab2:	f7ff fe55 	bl	8103760 <_ZSt12__niter_baseIP8SMessageET_S2_>
 8103ab6:	4604      	mov	r4, r0
 8103ab8:	68b8      	ldr	r0, [r7, #8]
 8103aba:	f7ff fe51 	bl	8103760 <_ZSt12__niter_baseIP8SMessageET_S2_>
 8103abe:	4605      	mov	r5, r0
 8103ac0:	687b      	ldr	r3, [r7, #4]
 8103ac2:	4618      	mov	r0, r3
 8103ac4:	f7ff fe4c 	bl	8103760 <_ZSt12__niter_baseIP8SMessageET_S2_>
 8103ac8:	4603      	mov	r3, r0
 8103aca:	461a      	mov	r2, r3
 8103acc:	4629      	mov	r1, r5
 8103ace:	4620      	mov	r0, r4
 8103ad0:	f000 f85a 	bl	8103b88 <_ZSt14__copy_move_a1ILb1EP8SMessageS1_ET1_T0_S3_S2_>
 8103ad4:	4602      	mov	r2, r0
 8103ad6:	1d3b      	adds	r3, r7, #4
 8103ad8:	4611      	mov	r1, r2
 8103ada:	4618      	mov	r0, r3
 8103adc:	f000 f864 	bl	8103ba8 <_ZSt12__niter_wrapIP8SMessageET_RKS2_S2_>
 8103ae0:	4603      	mov	r3, r0
    }
 8103ae2:	4618      	mov	r0, r3
 8103ae4:	3710      	adds	r7, #16
 8103ae6:	46bd      	mov	sp, r7
 8103ae8:	bdb0      	pop	{r4, r5, r7, pc}

08103aea <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8103aea:	b480      	push	{r7}
 8103aec:	b083      	sub	sp, #12
 8103aee:	af00      	add	r7, sp, #0
 8103af0:	6078      	str	r0, [r7, #4]
 8103af2:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 8103af4:	687b      	ldr	r3, [r7, #4]
 8103af6:	683a      	ldr	r2, [r7, #0]
 8103af8:	6812      	ldr	r2, [r2, #0]
 8103afa:	601a      	str	r2, [r3, #0]
      { }
 8103afc:	687b      	ldr	r3, [r7, #4]
 8103afe:	4618      	mov	r0, r3
 8103b00:	370c      	adds	r7, #12
 8103b02:	46bd      	mov	sp, r7
 8103b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b08:	4770      	bx	lr

08103b0a <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
  */
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      _GLIBCXX20_CONSTEXPR
      inline
      pair<_T1, _T2>::
 8103b0a:	b5b0      	push	{r4, r5, r7, lr}
 8103b0c:	b086      	sub	sp, #24
 8103b0e:	af02      	add	r7, sp, #8
 8103b10:	60f8      	str	r0, [r7, #12]
 8103b12:	7239      	strb	r1, [r7, #8]
 8103b14:	607a      	str	r2, [r7, #4]
 8103b16:	703b      	strb	r3, [r7, #0]
      pair(piecewise_construct_t,
	   tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8103b18:	463a      	mov	r2, r7
 8103b1a:	f88d 4000 	strb.w	r4, [sp]
 8103b1e:	462b      	mov	r3, r5
 8103b20:	6879      	ldr	r1, [r7, #4]
 8103b22:	68f8      	ldr	r0, [r7, #12]
 8103b24:	f000 f84c 	bl	8103bc0 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 8103b28:	68fb      	ldr	r3, [r7, #12]
 8103b2a:	4618      	mov	r0, r3
 8103b2c:	3710      	adds	r7, #16
 8103b2e:	46bd      	mov	sp, r7
 8103b30:	bdb0      	pop	{r4, r5, r7, pc}

08103b32 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJOS1_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 8103b32:	b5b0      	push	{r4, r5, r7, lr}
 8103b34:	b086      	sub	sp, #24
 8103b36:	af02      	add	r7, sp, #8
 8103b38:	60f8      	str	r0, [r7, #12]
 8103b3a:	7239      	strb	r1, [r7, #8]
 8103b3c:	607a      	str	r2, [r7, #4]
 8103b3e:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8103b40:	463a      	mov	r2, r7
 8103b42:	f88d 4000 	strb.w	r4, [sp]
 8103b46:	462b      	mov	r3, r5
 8103b48:	6879      	ldr	r1, [r7, #4]
 8103b4a:	68f8      	ldr	r0, [r7, #12]
 8103b4c:	f000 f852 	bl	8103bf4 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJOS1_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 8103b50:	68fb      	ldr	r3, [r7, #12]
 8103b52:	4618      	mov	r0, r3
 8103b54:	3710      	adds	r7, #16
 8103b56:	46bd      	mov	sp, r7
 8103b58:	bdb0      	pop	{r4, r5, r7, pc}

08103b5a <_ZNKSt13move_iteratorIP8SMessageE4baseEv>:
      base() const
 8103b5a:	b480      	push	{r7}
 8103b5c:	b083      	sub	sp, #12
 8103b5e:	af00      	add	r7, sp, #0
 8103b60:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8103b62:	687b      	ldr	r3, [r7, #4]
 8103b64:	681b      	ldr	r3, [r3, #0]
 8103b66:	4618      	mov	r0, r3
 8103b68:	370c      	adds	r7, #12
 8103b6a:	46bd      	mov	sp, r7
 8103b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b70:	4770      	bx	lr

08103b72 <_ZSt12__miter_baseIP8SMessageET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8103b72:	b480      	push	{r7}
 8103b74:	b083      	sub	sp, #12
 8103b76:	af00      	add	r7, sp, #0
 8103b78:	6078      	str	r0, [r7, #4]
    { return __it; }
 8103b7a:	687b      	ldr	r3, [r7, #4]
 8103b7c:	4618      	mov	r0, r3
 8103b7e:	370c      	adds	r7, #12
 8103b80:	46bd      	mov	sp, r7
 8103b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b86:	4770      	bx	lr

08103b88 <_ZSt14__copy_move_a1ILb1EP8SMessageS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8103b88:	b580      	push	{r7, lr}
 8103b8a:	b084      	sub	sp, #16
 8103b8c:	af00      	add	r7, sp, #0
 8103b8e:	60f8      	str	r0, [r7, #12]
 8103b90:	60b9      	str	r1, [r7, #8]
 8103b92:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8103b94:	687a      	ldr	r2, [r7, #4]
 8103b96:	68b9      	ldr	r1, [r7, #8]
 8103b98:	68f8      	ldr	r0, [r7, #12]
 8103b9a:	f000 f845 	bl	8103c28 <_ZSt14__copy_move_a2ILb1EP8SMessageS1_ET1_T0_S3_S2_>
 8103b9e:	4603      	mov	r3, r0
 8103ba0:	4618      	mov	r0, r3
 8103ba2:	3710      	adds	r7, #16
 8103ba4:	46bd      	mov	sp, r7
 8103ba6:	bd80      	pop	{r7, pc}

08103ba8 <_ZSt12__niter_wrapIP8SMessageET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8103ba8:	b480      	push	{r7}
 8103baa:	b083      	sub	sp, #12
 8103bac:	af00      	add	r7, sp, #0
 8103bae:	6078      	str	r0, [r7, #4]
 8103bb0:	6039      	str	r1, [r7, #0]
    { return __res; }
 8103bb2:	683b      	ldr	r3, [r7, #0]
 8103bb4:	4618      	mov	r0, r3
 8103bb6:	370c      	adds	r7, #12
 8103bb8:	46bd      	mov	sp, r7
 8103bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103bbe:	4770      	bx	lr

08103bc0 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, size_t... _Indexes1,
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 8103bc0:	b580      	push	{r7, lr}
 8103bc2:	b084      	sub	sp, #16
 8103bc4:	af00      	add	r7, sp, #0
 8103bc6:	60f8      	str	r0, [r7, #12]
 8103bc8:	60b9      	str	r1, [r7, #8]
 8103bca:	607a      	str	r2, [r7, #4]
 8103bcc:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8103bce:	68b8      	ldr	r0, [r7, #8]
 8103bd0:	f000 f83a 	bl	8103c48 <_ZSt3getILj0EJRKN19EventManagerCM4Task11EEventQueueEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8103bd4:	4603      	mov	r3, r0
 8103bd6:	4618      	mov	r0, r3
 8103bd8:	f000 f843 	bl	8103c62 <_ZSt7forwardIRKN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS4_E4typeE>
 8103bdc:	4603      	mov	r3, r0
 8103bde:	781a      	ldrb	r2, [r3, #0]
 8103be0:	68fb      	ldr	r3, [r7, #12]
 8103be2:	701a      	strb	r2, [r3, #0]
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8103be4:	68fb      	ldr	r3, [r7, #12]
 8103be6:	2200      	movs	r2, #0
 8103be8:	605a      	str	r2, [r3, #4]
      { }
 8103bea:	68fb      	ldr	r3, [r7, #12]
 8103bec:	4618      	mov	r0, r3
 8103bee:	3710      	adds	r7, #16
 8103bf0:	46bd      	mov	sp, r7
 8103bf2:	bd80      	pop	{r7, pc}

08103bf4 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJOS1_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8103bf4:	b580      	push	{r7, lr}
 8103bf6:	b084      	sub	sp, #16
 8103bf8:	af00      	add	r7, sp, #0
 8103bfa:	60f8      	str	r0, [r7, #12]
 8103bfc:	60b9      	str	r1, [r7, #8]
 8103bfe:	607a      	str	r2, [r7, #4]
 8103c00:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8103c02:	68b8      	ldr	r0, [r7, #8]
 8103c04:	f000 f838 	bl	8103c78 <_ZSt3getILj0EJON19EventManagerCM4Task11EEventQueueEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 8103c08:	4603      	mov	r3, r0
 8103c0a:	4618      	mov	r0, r3
 8103c0c:	f000 f841 	bl	8103c92 <_ZSt7forwardION19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8103c10:	4603      	mov	r3, r0
 8103c12:	781a      	ldrb	r2, [r3, #0]
 8103c14:	68fb      	ldr	r3, [r7, #12]
 8103c16:	701a      	strb	r2, [r3, #0]
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8103c18:	68fb      	ldr	r3, [r7, #12]
 8103c1a:	2200      	movs	r2, #0
 8103c1c:	605a      	str	r2, [r3, #4]
      { }
 8103c1e:	68fb      	ldr	r3, [r7, #12]
 8103c20:	4618      	mov	r0, r3
 8103c22:	3710      	adds	r7, #16
 8103c24:	46bd      	mov	sp, r7
 8103c26:	bd80      	pop	{r7, pc}

08103c28 <_ZSt14__copy_move_a2ILb1EP8SMessageS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8103c28:	b580      	push	{r7, lr}
 8103c2a:	b084      	sub	sp, #16
 8103c2c:	af00      	add	r7, sp, #0
 8103c2e:	60f8      	str	r0, [r7, #12]
 8103c30:	60b9      	str	r1, [r7, #8]
 8103c32:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8103c34:	687a      	ldr	r2, [r7, #4]
 8103c36:	68b9      	ldr	r1, [r7, #8]
 8103c38:	68f8      	ldr	r0, [r7, #12]
 8103c3a:	f000 f835 	bl	8103ca8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8SMessageEEPT_PKS4_S7_S5_>
 8103c3e:	4603      	mov	r3, r0
    }
 8103c40:	4618      	mov	r0, r3
 8103c42:	3710      	adds	r7, #16
 8103c44:	46bd      	mov	sp, r7
 8103c46:	bd80      	pop	{r7, pc}

08103c48 <_ZSt3getILj0EJRKN19EventManagerCM4Task11EEventQueueEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8103c48:	b580      	push	{r7, lr}
 8103c4a:	b082      	sub	sp, #8
 8103c4c:	af00      	add	r7, sp, #0
 8103c4e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8103c50:	687b      	ldr	r3, [r7, #4]
 8103c52:	4618      	mov	r0, r3
 8103c54:	f000 f852 	bl	8103cfc <_ZSt12__get_helperILj0ERKN19EventManagerCM4Task11EEventQueueEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8103c58:	4603      	mov	r3, r0
 8103c5a:	4618      	mov	r0, r3
 8103c5c:	3708      	adds	r7, #8
 8103c5e:	46bd      	mov	sp, r7
 8103c60:	bd80      	pop	{r7, pc}

08103c62 <_ZSt7forwardIRKN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8103c62:	b480      	push	{r7}
 8103c64:	b083      	sub	sp, #12
 8103c66:	af00      	add	r7, sp, #0
 8103c68:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8103c6a:	687b      	ldr	r3, [r7, #4]
 8103c6c:	4618      	mov	r0, r3
 8103c6e:	370c      	adds	r7, #12
 8103c70:	46bd      	mov	sp, r7
 8103c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c76:	4770      	bx	lr

08103c78 <_ZSt3getILj0EJON19EventManagerCM4Task11EEventQueueEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 8103c78:	b580      	push	{r7, lr}
 8103c7a:	b082      	sub	sp, #8
 8103c7c:	af00      	add	r7, sp, #0
 8103c7e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8103c80:	687b      	ldr	r3, [r7, #4]
 8103c82:	4618      	mov	r0, r3
 8103c84:	f000 f846 	bl	8103d14 <_ZSt12__get_helperILj0EON19EventManagerCM4Task11EEventQueueEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8103c88:	4603      	mov	r3, r0
 8103c8a:	4618      	mov	r0, r3
 8103c8c:	3708      	adds	r7, #8
 8103c8e:	46bd      	mov	sp, r7
 8103c90:	bd80      	pop	{r7, pc}

08103c92 <_ZSt7forwardION19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8103c92:	b480      	push	{r7}
 8103c94:	b083      	sub	sp, #12
 8103c96:	af00      	add	r7, sp, #0
 8103c98:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8103c9a:	687b      	ldr	r3, [r7, #4]
 8103c9c:	4618      	mov	r0, r3
 8103c9e:	370c      	adds	r7, #12
 8103ca0:	46bd      	mov	sp, r7
 8103ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ca6:	4770      	bx	lr

08103ca8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8SMessageEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8103ca8:	b580      	push	{r7, lr}
 8103caa:	b086      	sub	sp, #24
 8103cac:	af00      	add	r7, sp, #0
 8103cae:	60f8      	str	r0, [r7, #12]
 8103cb0:	60b9      	str	r1, [r7, #8]
 8103cb2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8103cb4:	68ba      	ldr	r2, [r7, #8]
 8103cb6:	68fb      	ldr	r3, [r7, #12]
 8103cb8:	1ad3      	subs	r3, r2, r3
 8103cba:	10db      	asrs	r3, r3, #3
 8103cbc:	4a0e      	ldr	r2, [pc, #56]	@ (8103cf8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8SMessageEEPT_PKS4_S7_S5_+0x50>)
 8103cbe:	fb02 f303 	mul.w	r3, r2, r3
 8103cc2:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8103cc4:	697b      	ldr	r3, [r7, #20]
 8103cc6:	2b00      	cmp	r3, #0
 8103cc8:	d009      	beq.n	8103cde <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8SMessageEEPT_PKS4_S7_S5_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8103cca:	697a      	ldr	r2, [r7, #20]
 8103ccc:	4613      	mov	r3, r2
 8103cce:	005b      	lsls	r3, r3, #1
 8103cd0:	4413      	add	r3, r2
 8103cd2:	00db      	lsls	r3, r3, #3
 8103cd4:	461a      	mov	r2, r3
 8103cd6:	68f9      	ldr	r1, [r7, #12]
 8103cd8:	6878      	ldr	r0, [r7, #4]
 8103cda:	f018 f91c 	bl	811bf16 <memmove>
	  return __result + _Num;
 8103cde:	697a      	ldr	r2, [r7, #20]
 8103ce0:	4613      	mov	r3, r2
 8103ce2:	005b      	lsls	r3, r3, #1
 8103ce4:	4413      	add	r3, r2
 8103ce6:	00db      	lsls	r3, r3, #3
 8103ce8:	461a      	mov	r2, r3
 8103cea:	687b      	ldr	r3, [r7, #4]
 8103cec:	4413      	add	r3, r2
	}
 8103cee:	4618      	mov	r0, r3
 8103cf0:	3718      	adds	r7, #24
 8103cf2:	46bd      	mov	sp, r7
 8103cf4:	bd80      	pop	{r7, pc}
 8103cf6:	bf00      	nop
 8103cf8:	aaaaaaab 	.word	0xaaaaaaab

08103cfc <_ZSt12__get_helperILj0ERKN19EventManagerCM4Task11EEventQueueEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8103cfc:	b580      	push	{r7, lr}
 8103cfe:	b082      	sub	sp, #8
 8103d00:	af00      	add	r7, sp, #0
 8103d02:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8103d04:	6878      	ldr	r0, [r7, #4]
 8103d06:	f000 f811 	bl	8103d2c <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEE7_M_headERS4_>
 8103d0a:	4603      	mov	r3, r0
 8103d0c:	4618      	mov	r0, r3
 8103d0e:	3708      	adds	r7, #8
 8103d10:	46bd      	mov	sp, r7
 8103d12:	bd80      	pop	{r7, pc}

08103d14 <_ZSt12__get_helperILj0EON19EventManagerCM4Task11EEventQueueEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8103d14:	b580      	push	{r7, lr}
 8103d16:	b082      	sub	sp, #8
 8103d18:	af00      	add	r7, sp, #0
 8103d1a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8103d1c:	6878      	ldr	r0, [r7, #4]
 8103d1e:	f000 f812 	bl	8103d46 <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEE7_M_headERS3_>
 8103d22:	4603      	mov	r3, r0
 8103d24:	4618      	mov	r0, r3
 8103d26:	3708      	adds	r7, #8
 8103d28:	46bd      	mov	sp, r7
 8103d2a:	bd80      	pop	{r7, pc}

08103d2c <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8103d2c:	b580      	push	{r7, lr}
 8103d2e:	b082      	sub	sp, #8
 8103d30:	af00      	add	r7, sp, #0
 8103d32:	6078      	str	r0, [r7, #4]
 8103d34:	687b      	ldr	r3, [r7, #4]
 8103d36:	4618      	mov	r0, r3
 8103d38:	f000 f812 	bl	8103d60 <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EE7_M_headERS4_>
 8103d3c:	4603      	mov	r3, r0
 8103d3e:	4618      	mov	r0, r3
 8103d40:	3708      	adds	r7, #8
 8103d42:	46bd      	mov	sp, r7
 8103d44:	bd80      	pop	{r7, pc}

08103d46 <_ZNSt11_Tuple_implILj0EJON19EventManagerCM4Task11EEventQueueEEE7_M_headERS3_>:
 8103d46:	b580      	push	{r7, lr}
 8103d48:	b082      	sub	sp, #8
 8103d4a:	af00      	add	r7, sp, #0
 8103d4c:	6078      	str	r0, [r7, #4]
 8103d4e:	687b      	ldr	r3, [r7, #4]
 8103d50:	4618      	mov	r0, r3
 8103d52:	f000 f811 	bl	8103d78 <_ZNSt10_Head_baseILj0EON19EventManagerCM4Task11EEventQueueELb0EE7_M_headERS3_>
 8103d56:	4603      	mov	r3, r0
 8103d58:	4618      	mov	r0, r3
 8103d5a:	3708      	adds	r7, #8
 8103d5c:	46bd      	mov	sp, r7
 8103d5e:	bd80      	pop	{r7, pc}

08103d60 <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8103d60:	b480      	push	{r7}
 8103d62:	b083      	sub	sp, #12
 8103d64:	af00      	add	r7, sp, #0
 8103d66:	6078      	str	r0, [r7, #4]
 8103d68:	687b      	ldr	r3, [r7, #4]
 8103d6a:	681b      	ldr	r3, [r3, #0]
 8103d6c:	4618      	mov	r0, r3
 8103d6e:	370c      	adds	r7, #12
 8103d70:	46bd      	mov	sp, r7
 8103d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d76:	4770      	bx	lr

08103d78 <_ZNSt10_Head_baseILj0EON19EventManagerCM4Task11EEventQueueELb0EE7_M_headERS3_>:
 8103d78:	b480      	push	{r7}
 8103d7a:	b083      	sub	sp, #12
 8103d7c:	af00      	add	r7, sp, #0
 8103d7e:	6078      	str	r0, [r7, #4]
 8103d80:	687b      	ldr	r3, [r7, #4]
 8103d82:	681b      	ldr	r3, [r3, #0]
 8103d84:	4618      	mov	r0, r3
 8103d86:	370c      	adds	r7, #12
 8103d88:	46bd      	mov	sp, r7
 8103d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d8e:	4770      	bx	lr

08103d90 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8103d90:	b580      	push	{r7, lr}
 8103d92:	b084      	sub	sp, #16
 8103d94:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8103d96:	4b92      	ldr	r3, [pc, #584]	@ (8103fe0 <MX_LWIP_Init+0x250>)
 8103d98:	22c0      	movs	r2, #192	@ 0xc0
 8103d9a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8103d9c:	4b90      	ldr	r3, [pc, #576]	@ (8103fe0 <MX_LWIP_Init+0x250>)
 8103d9e:	22a8      	movs	r2, #168	@ 0xa8
 8103da0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8103da2:	4b8f      	ldr	r3, [pc, #572]	@ (8103fe0 <MX_LWIP_Init+0x250>)
 8103da4:	2201      	movs	r2, #1
 8103da6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 11;
 8103da8:	4b8d      	ldr	r3, [pc, #564]	@ (8103fe0 <MX_LWIP_Init+0x250>)
 8103daa:	220b      	movs	r2, #11
 8103dac:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8103dae:	4b8d      	ldr	r3, [pc, #564]	@ (8103fe4 <MX_LWIP_Init+0x254>)
 8103db0:	22ff      	movs	r2, #255	@ 0xff
 8103db2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8103db4:	4b8b      	ldr	r3, [pc, #556]	@ (8103fe4 <MX_LWIP_Init+0x254>)
 8103db6:	22ff      	movs	r2, #255	@ 0xff
 8103db8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8103dba:	4b8a      	ldr	r3, [pc, #552]	@ (8103fe4 <MX_LWIP_Init+0x254>)
 8103dbc:	22ff      	movs	r2, #255	@ 0xff
 8103dbe:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8103dc0:	4b88      	ldr	r3, [pc, #544]	@ (8103fe4 <MX_LWIP_Init+0x254>)
 8103dc2:	2200      	movs	r2, #0
 8103dc4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8103dc6:	4b88      	ldr	r3, [pc, #544]	@ (8103fe8 <MX_LWIP_Init+0x258>)
 8103dc8:	2200      	movs	r2, #0
 8103dca:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8103dcc:	4b86      	ldr	r3, [pc, #536]	@ (8103fe8 <MX_LWIP_Init+0x258>)
 8103dce:	2200      	movs	r2, #0
 8103dd0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8103dd2:	4b85      	ldr	r3, [pc, #532]	@ (8103fe8 <MX_LWIP_Init+0x258>)
 8103dd4:	2200      	movs	r2, #0
 8103dd6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8103dd8:	4b83      	ldr	r3, [pc, #524]	@ (8103fe8 <MX_LWIP_Init+0x258>)
 8103dda:	2200      	movs	r2, #0
 8103ddc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8103dde:	2100      	movs	r1, #0
 8103de0:	2000      	movs	r0, #0
 8103de2:	f017 f9c1 	bl	811b168 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8103de6:	4b7e      	ldr	r3, [pc, #504]	@ (8103fe0 <MX_LWIP_Init+0x250>)
 8103de8:	781b      	ldrb	r3, [r3, #0]
 8103dea:	061a      	lsls	r2, r3, #24
 8103dec:	4b7c      	ldr	r3, [pc, #496]	@ (8103fe0 <MX_LWIP_Init+0x250>)
 8103dee:	785b      	ldrb	r3, [r3, #1]
 8103df0:	041b      	lsls	r3, r3, #16
 8103df2:	431a      	orrs	r2, r3
 8103df4:	4b7a      	ldr	r3, [pc, #488]	@ (8103fe0 <MX_LWIP_Init+0x250>)
 8103df6:	789b      	ldrb	r3, [r3, #2]
 8103df8:	021b      	lsls	r3, r3, #8
 8103dfa:	4313      	orrs	r3, r2
 8103dfc:	4a78      	ldr	r2, [pc, #480]	@ (8103fe0 <MX_LWIP_Init+0x250>)
 8103dfe:	78d2      	ldrb	r2, [r2, #3]
 8103e00:	4313      	orrs	r3, r2
 8103e02:	061a      	lsls	r2, r3, #24
 8103e04:	4b76      	ldr	r3, [pc, #472]	@ (8103fe0 <MX_LWIP_Init+0x250>)
 8103e06:	781b      	ldrb	r3, [r3, #0]
 8103e08:	0619      	lsls	r1, r3, #24
 8103e0a:	4b75      	ldr	r3, [pc, #468]	@ (8103fe0 <MX_LWIP_Init+0x250>)
 8103e0c:	785b      	ldrb	r3, [r3, #1]
 8103e0e:	041b      	lsls	r3, r3, #16
 8103e10:	4319      	orrs	r1, r3
 8103e12:	4b73      	ldr	r3, [pc, #460]	@ (8103fe0 <MX_LWIP_Init+0x250>)
 8103e14:	789b      	ldrb	r3, [r3, #2]
 8103e16:	021b      	lsls	r3, r3, #8
 8103e18:	430b      	orrs	r3, r1
 8103e1a:	4971      	ldr	r1, [pc, #452]	@ (8103fe0 <MX_LWIP_Init+0x250>)
 8103e1c:	78c9      	ldrb	r1, [r1, #3]
 8103e1e:	430b      	orrs	r3, r1
 8103e20:	021b      	lsls	r3, r3, #8
 8103e22:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8103e26:	431a      	orrs	r2, r3
 8103e28:	4b6d      	ldr	r3, [pc, #436]	@ (8103fe0 <MX_LWIP_Init+0x250>)
 8103e2a:	781b      	ldrb	r3, [r3, #0]
 8103e2c:	0619      	lsls	r1, r3, #24
 8103e2e:	4b6c      	ldr	r3, [pc, #432]	@ (8103fe0 <MX_LWIP_Init+0x250>)
 8103e30:	785b      	ldrb	r3, [r3, #1]
 8103e32:	041b      	lsls	r3, r3, #16
 8103e34:	4319      	orrs	r1, r3
 8103e36:	4b6a      	ldr	r3, [pc, #424]	@ (8103fe0 <MX_LWIP_Init+0x250>)
 8103e38:	789b      	ldrb	r3, [r3, #2]
 8103e3a:	021b      	lsls	r3, r3, #8
 8103e3c:	430b      	orrs	r3, r1
 8103e3e:	4968      	ldr	r1, [pc, #416]	@ (8103fe0 <MX_LWIP_Init+0x250>)
 8103e40:	78c9      	ldrb	r1, [r1, #3]
 8103e42:	430b      	orrs	r3, r1
 8103e44:	0a1b      	lsrs	r3, r3, #8
 8103e46:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8103e4a:	431a      	orrs	r2, r3
 8103e4c:	4b64      	ldr	r3, [pc, #400]	@ (8103fe0 <MX_LWIP_Init+0x250>)
 8103e4e:	781b      	ldrb	r3, [r3, #0]
 8103e50:	0619      	lsls	r1, r3, #24
 8103e52:	4b63      	ldr	r3, [pc, #396]	@ (8103fe0 <MX_LWIP_Init+0x250>)
 8103e54:	785b      	ldrb	r3, [r3, #1]
 8103e56:	041b      	lsls	r3, r3, #16
 8103e58:	4319      	orrs	r1, r3
 8103e5a:	4b61      	ldr	r3, [pc, #388]	@ (8103fe0 <MX_LWIP_Init+0x250>)
 8103e5c:	789b      	ldrb	r3, [r3, #2]
 8103e5e:	021b      	lsls	r3, r3, #8
 8103e60:	430b      	orrs	r3, r1
 8103e62:	495f      	ldr	r1, [pc, #380]	@ (8103fe0 <MX_LWIP_Init+0x250>)
 8103e64:	78c9      	ldrb	r1, [r1, #3]
 8103e66:	430b      	orrs	r3, r1
 8103e68:	0e1b      	lsrs	r3, r3, #24
 8103e6a:	4313      	orrs	r3, r2
 8103e6c:	4a5f      	ldr	r2, [pc, #380]	@ (8103fec <MX_LWIP_Init+0x25c>)
 8103e6e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8103e70:	4b5c      	ldr	r3, [pc, #368]	@ (8103fe4 <MX_LWIP_Init+0x254>)
 8103e72:	781b      	ldrb	r3, [r3, #0]
 8103e74:	061a      	lsls	r2, r3, #24
 8103e76:	4b5b      	ldr	r3, [pc, #364]	@ (8103fe4 <MX_LWIP_Init+0x254>)
 8103e78:	785b      	ldrb	r3, [r3, #1]
 8103e7a:	041b      	lsls	r3, r3, #16
 8103e7c:	431a      	orrs	r2, r3
 8103e7e:	4b59      	ldr	r3, [pc, #356]	@ (8103fe4 <MX_LWIP_Init+0x254>)
 8103e80:	789b      	ldrb	r3, [r3, #2]
 8103e82:	021b      	lsls	r3, r3, #8
 8103e84:	4313      	orrs	r3, r2
 8103e86:	4a57      	ldr	r2, [pc, #348]	@ (8103fe4 <MX_LWIP_Init+0x254>)
 8103e88:	78d2      	ldrb	r2, [r2, #3]
 8103e8a:	4313      	orrs	r3, r2
 8103e8c:	061a      	lsls	r2, r3, #24
 8103e8e:	4b55      	ldr	r3, [pc, #340]	@ (8103fe4 <MX_LWIP_Init+0x254>)
 8103e90:	781b      	ldrb	r3, [r3, #0]
 8103e92:	0619      	lsls	r1, r3, #24
 8103e94:	4b53      	ldr	r3, [pc, #332]	@ (8103fe4 <MX_LWIP_Init+0x254>)
 8103e96:	785b      	ldrb	r3, [r3, #1]
 8103e98:	041b      	lsls	r3, r3, #16
 8103e9a:	4319      	orrs	r1, r3
 8103e9c:	4b51      	ldr	r3, [pc, #324]	@ (8103fe4 <MX_LWIP_Init+0x254>)
 8103e9e:	789b      	ldrb	r3, [r3, #2]
 8103ea0:	021b      	lsls	r3, r3, #8
 8103ea2:	430b      	orrs	r3, r1
 8103ea4:	494f      	ldr	r1, [pc, #316]	@ (8103fe4 <MX_LWIP_Init+0x254>)
 8103ea6:	78c9      	ldrb	r1, [r1, #3]
 8103ea8:	430b      	orrs	r3, r1
 8103eaa:	021b      	lsls	r3, r3, #8
 8103eac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8103eb0:	431a      	orrs	r2, r3
 8103eb2:	4b4c      	ldr	r3, [pc, #304]	@ (8103fe4 <MX_LWIP_Init+0x254>)
 8103eb4:	781b      	ldrb	r3, [r3, #0]
 8103eb6:	0619      	lsls	r1, r3, #24
 8103eb8:	4b4a      	ldr	r3, [pc, #296]	@ (8103fe4 <MX_LWIP_Init+0x254>)
 8103eba:	785b      	ldrb	r3, [r3, #1]
 8103ebc:	041b      	lsls	r3, r3, #16
 8103ebe:	4319      	orrs	r1, r3
 8103ec0:	4b48      	ldr	r3, [pc, #288]	@ (8103fe4 <MX_LWIP_Init+0x254>)
 8103ec2:	789b      	ldrb	r3, [r3, #2]
 8103ec4:	021b      	lsls	r3, r3, #8
 8103ec6:	430b      	orrs	r3, r1
 8103ec8:	4946      	ldr	r1, [pc, #280]	@ (8103fe4 <MX_LWIP_Init+0x254>)
 8103eca:	78c9      	ldrb	r1, [r1, #3]
 8103ecc:	430b      	orrs	r3, r1
 8103ece:	0a1b      	lsrs	r3, r3, #8
 8103ed0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8103ed4:	431a      	orrs	r2, r3
 8103ed6:	4b43      	ldr	r3, [pc, #268]	@ (8103fe4 <MX_LWIP_Init+0x254>)
 8103ed8:	781b      	ldrb	r3, [r3, #0]
 8103eda:	0619      	lsls	r1, r3, #24
 8103edc:	4b41      	ldr	r3, [pc, #260]	@ (8103fe4 <MX_LWIP_Init+0x254>)
 8103ede:	785b      	ldrb	r3, [r3, #1]
 8103ee0:	041b      	lsls	r3, r3, #16
 8103ee2:	4319      	orrs	r1, r3
 8103ee4:	4b3f      	ldr	r3, [pc, #252]	@ (8103fe4 <MX_LWIP_Init+0x254>)
 8103ee6:	789b      	ldrb	r3, [r3, #2]
 8103ee8:	021b      	lsls	r3, r3, #8
 8103eea:	430b      	orrs	r3, r1
 8103eec:	493d      	ldr	r1, [pc, #244]	@ (8103fe4 <MX_LWIP_Init+0x254>)
 8103eee:	78c9      	ldrb	r1, [r1, #3]
 8103ef0:	430b      	orrs	r3, r1
 8103ef2:	0e1b      	lsrs	r3, r3, #24
 8103ef4:	4313      	orrs	r3, r2
 8103ef6:	4a3e      	ldr	r2, [pc, #248]	@ (8103ff0 <MX_LWIP_Init+0x260>)
 8103ef8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8103efa:	4b3b      	ldr	r3, [pc, #236]	@ (8103fe8 <MX_LWIP_Init+0x258>)
 8103efc:	781b      	ldrb	r3, [r3, #0]
 8103efe:	061a      	lsls	r2, r3, #24
 8103f00:	4b39      	ldr	r3, [pc, #228]	@ (8103fe8 <MX_LWIP_Init+0x258>)
 8103f02:	785b      	ldrb	r3, [r3, #1]
 8103f04:	041b      	lsls	r3, r3, #16
 8103f06:	431a      	orrs	r2, r3
 8103f08:	4b37      	ldr	r3, [pc, #220]	@ (8103fe8 <MX_LWIP_Init+0x258>)
 8103f0a:	789b      	ldrb	r3, [r3, #2]
 8103f0c:	021b      	lsls	r3, r3, #8
 8103f0e:	4313      	orrs	r3, r2
 8103f10:	4a35      	ldr	r2, [pc, #212]	@ (8103fe8 <MX_LWIP_Init+0x258>)
 8103f12:	78d2      	ldrb	r2, [r2, #3]
 8103f14:	4313      	orrs	r3, r2
 8103f16:	061a      	lsls	r2, r3, #24
 8103f18:	4b33      	ldr	r3, [pc, #204]	@ (8103fe8 <MX_LWIP_Init+0x258>)
 8103f1a:	781b      	ldrb	r3, [r3, #0]
 8103f1c:	0619      	lsls	r1, r3, #24
 8103f1e:	4b32      	ldr	r3, [pc, #200]	@ (8103fe8 <MX_LWIP_Init+0x258>)
 8103f20:	785b      	ldrb	r3, [r3, #1]
 8103f22:	041b      	lsls	r3, r3, #16
 8103f24:	4319      	orrs	r1, r3
 8103f26:	4b30      	ldr	r3, [pc, #192]	@ (8103fe8 <MX_LWIP_Init+0x258>)
 8103f28:	789b      	ldrb	r3, [r3, #2]
 8103f2a:	021b      	lsls	r3, r3, #8
 8103f2c:	430b      	orrs	r3, r1
 8103f2e:	492e      	ldr	r1, [pc, #184]	@ (8103fe8 <MX_LWIP_Init+0x258>)
 8103f30:	78c9      	ldrb	r1, [r1, #3]
 8103f32:	430b      	orrs	r3, r1
 8103f34:	021b      	lsls	r3, r3, #8
 8103f36:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8103f3a:	431a      	orrs	r2, r3
 8103f3c:	4b2a      	ldr	r3, [pc, #168]	@ (8103fe8 <MX_LWIP_Init+0x258>)
 8103f3e:	781b      	ldrb	r3, [r3, #0]
 8103f40:	0619      	lsls	r1, r3, #24
 8103f42:	4b29      	ldr	r3, [pc, #164]	@ (8103fe8 <MX_LWIP_Init+0x258>)
 8103f44:	785b      	ldrb	r3, [r3, #1]
 8103f46:	041b      	lsls	r3, r3, #16
 8103f48:	4319      	orrs	r1, r3
 8103f4a:	4b27      	ldr	r3, [pc, #156]	@ (8103fe8 <MX_LWIP_Init+0x258>)
 8103f4c:	789b      	ldrb	r3, [r3, #2]
 8103f4e:	021b      	lsls	r3, r3, #8
 8103f50:	430b      	orrs	r3, r1
 8103f52:	4925      	ldr	r1, [pc, #148]	@ (8103fe8 <MX_LWIP_Init+0x258>)
 8103f54:	78c9      	ldrb	r1, [r1, #3]
 8103f56:	430b      	orrs	r3, r1
 8103f58:	0a1b      	lsrs	r3, r3, #8
 8103f5a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8103f5e:	431a      	orrs	r2, r3
 8103f60:	4b21      	ldr	r3, [pc, #132]	@ (8103fe8 <MX_LWIP_Init+0x258>)
 8103f62:	781b      	ldrb	r3, [r3, #0]
 8103f64:	0619      	lsls	r1, r3, #24
 8103f66:	4b20      	ldr	r3, [pc, #128]	@ (8103fe8 <MX_LWIP_Init+0x258>)
 8103f68:	785b      	ldrb	r3, [r3, #1]
 8103f6a:	041b      	lsls	r3, r3, #16
 8103f6c:	4319      	orrs	r1, r3
 8103f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8103fe8 <MX_LWIP_Init+0x258>)
 8103f70:	789b      	ldrb	r3, [r3, #2]
 8103f72:	021b      	lsls	r3, r3, #8
 8103f74:	430b      	orrs	r3, r1
 8103f76:	491c      	ldr	r1, [pc, #112]	@ (8103fe8 <MX_LWIP_Init+0x258>)
 8103f78:	78c9      	ldrb	r1, [r1, #3]
 8103f7a:	430b      	orrs	r3, r1
 8103f7c:	0e1b      	lsrs	r3, r3, #24
 8103f7e:	4313      	orrs	r3, r2
 8103f80:	4a1c      	ldr	r2, [pc, #112]	@ (8103ff4 <MX_LWIP_Init+0x264>)
 8103f82:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8103f84:	4b1c      	ldr	r3, [pc, #112]	@ (8103ff8 <MX_LWIP_Init+0x268>)
 8103f86:	9302      	str	r3, [sp, #8]
 8103f88:	4b1c      	ldr	r3, [pc, #112]	@ (8103ffc <MX_LWIP_Init+0x26c>)
 8103f8a:	9301      	str	r3, [sp, #4]
 8103f8c:	2300      	movs	r3, #0
 8103f8e:	9300      	str	r3, [sp, #0]
 8103f90:	4b18      	ldr	r3, [pc, #96]	@ (8103ff4 <MX_LWIP_Init+0x264>)
 8103f92:	4a17      	ldr	r2, [pc, #92]	@ (8103ff0 <MX_LWIP_Init+0x260>)
 8103f94:	4915      	ldr	r1, [pc, #84]	@ (8103fec <MX_LWIP_Init+0x25c>)
 8103f96:	481a      	ldr	r0, [pc, #104]	@ (8104000 <MX_LWIP_Init+0x270>)
 8103f98:	f00f fe24 	bl	8113be4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8103f9c:	4818      	ldr	r0, [pc, #96]	@ (8104000 <MX_LWIP_Init+0x270>)
 8103f9e:	f00f ffd3 	bl	8113f48 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8103fa2:	4817      	ldr	r0, [pc, #92]	@ (8104000 <MX_LWIP_Init+0x270>)
 8103fa4:	f00f ffe0 	bl	8113f68 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8103fa8:	4916      	ldr	r1, [pc, #88]	@ (8104004 <MX_LWIP_Init+0x274>)
 8103faa:	4815      	ldr	r0, [pc, #84]	@ (8104000 <MX_LWIP_Init+0x270>)
 8103fac:	f010 f8de 	bl	811416c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8103fb0:	2224      	movs	r2, #36	@ 0x24
 8103fb2:	2100      	movs	r1, #0
 8103fb4:	4814      	ldr	r0, [pc, #80]	@ (8104008 <MX_LWIP_Init+0x278>)
 8103fb6:	f017 ffc8 	bl	811bf4a <memset>
  attributes.name = "EthLink";
 8103fba:	4b13      	ldr	r3, [pc, #76]	@ (8104008 <MX_LWIP_Init+0x278>)
 8103fbc:	4a13      	ldr	r2, [pc, #76]	@ (810400c <MX_LWIP_Init+0x27c>)
 8103fbe:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8103fc0:	4b11      	ldr	r3, [pc, #68]	@ (8104008 <MX_LWIP_Init+0x278>)
 8103fc2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8103fc6:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8103fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8104008 <MX_LWIP_Init+0x278>)
 8103fca:	2210      	movs	r2, #16
 8103fcc:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8103fce:	4a0e      	ldr	r2, [pc, #56]	@ (8104008 <MX_LWIP_Init+0x278>)
 8103fd0:	490b      	ldr	r1, [pc, #44]	@ (8104000 <MX_LWIP_Init+0x270>)
 8103fd2:	480f      	ldr	r0, [pc, #60]	@ (8104010 <MX_LWIP_Init+0x280>)
 8103fd4:	f008 f961 	bl	810c29a <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8103fd8:	bf00      	nop
 8103fda:	46bd      	mov	sp, r7
 8103fdc:	bd80      	pop	{r7, pc}
 8103fde:	bf00      	nop
 8103fe0:	1000021c 	.word	0x1000021c
 8103fe4:	10000220 	.word	0x10000220
 8103fe8:	10000224 	.word	0x10000224
 8103fec:	10000210 	.word	0x10000210
 8103ff0:	10000214 	.word	0x10000214
 8103ff4:	10000218 	.word	0x10000218
 8103ff8:	0811b0a5 	.word	0x0811b0a5
 8103ffc:	081044fd 	.word	0x081044fd
 8104000:	100001dc 	.word	0x100001dc
 8104004:	08104015 	.word	0x08104015
 8104008:	10000228 	.word	0x10000228
 810400c:	0811cc6c 	.word	0x0811cc6c
 8104010:	081047bd 	.word	0x081047bd

08104014 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8104014:	b480      	push	{r7}
 8104016:	b083      	sub	sp, #12
 8104018:	af00      	add	r7, sp, #0
 810401a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 810401c:	bf00      	nop
 810401e:	370c      	adds	r7, #12
 8104020:	46bd      	mov	sp, r7
 8104022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104026:	4770      	bx	lr

08104028 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8104028:	b580      	push	{r7, lr}
 810402a:	b082      	sub	sp, #8
 810402c:	af00      	add	r7, sp, #0
 810402e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8104030:	4b04      	ldr	r3, [pc, #16]	@ (8104044 <HAL_ETH_RxCpltCallback+0x1c>)
 8104032:	681b      	ldr	r3, [r3, #0]
 8104034:	4618      	mov	r0, r3
 8104036:	f008 fbc7 	bl	810c7c8 <osSemaphoreRelease>
}
 810403a:	bf00      	nop
 810403c:	3708      	adds	r7, #8
 810403e:	46bd      	mov	sp, r7
 8104040:	bd80      	pop	{r7, pc}
 8104042:	bf00      	nop
 8104044:	10000254 	.word	0x10000254

08104048 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8104048:	b580      	push	{r7, lr}
 810404a:	b082      	sub	sp, #8
 810404c:	af00      	add	r7, sp, #0
 810404e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8104050:	4b04      	ldr	r3, [pc, #16]	@ (8104064 <HAL_ETH_TxCpltCallback+0x1c>)
 8104052:	681b      	ldr	r3, [r3, #0]
 8104054:	4618      	mov	r0, r3
 8104056:	f008 fbb7 	bl	810c7c8 <osSemaphoreRelease>
}
 810405a:	bf00      	nop
 810405c:	3708      	adds	r7, #8
 810405e:	46bd      	mov	sp, r7
 8104060:	bd80      	pop	{r7, pc}
 8104062:	bf00      	nop
 8104064:	10000258 	.word	0x10000258

08104068 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8104068:	b580      	push	{r7, lr}
 810406a:	b082      	sub	sp, #8
 810406c:	af00      	add	r7, sp, #0
 810406e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8104070:	6878      	ldr	r0, [r7, #4]
 8104072:	f004 f9c6 	bl	8108402 <HAL_ETH_GetDMAError>
 8104076:	4603      	mov	r3, r0
 8104078:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810407c:	2b80      	cmp	r3, #128	@ 0x80
 810407e:	d104      	bne.n	810408a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8104080:	4b04      	ldr	r3, [pc, #16]	@ (8104094 <HAL_ETH_ErrorCallback+0x2c>)
 8104082:	681b      	ldr	r3, [r3, #0]
 8104084:	4618      	mov	r0, r3
 8104086:	f008 fb9f 	bl	810c7c8 <osSemaphoreRelease>
  }
}
 810408a:	bf00      	nop
 810408c:	3708      	adds	r7, #8
 810408e:	46bd      	mov	sp, r7
 8104090:	bd80      	pop	{r7, pc}
 8104092:	bf00      	nop
 8104094:	10000254 	.word	0x10000254

08104098 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8104098:	b580      	push	{r7, lr}
 810409a:	b0aa      	sub	sp, #168	@ 0xa8
 810409c:	af00      	add	r7, sp, #0
 810409e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 81040a0:	2300      	movs	r3, #0
 81040a2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 81040a6:	2300      	movs	r3, #0
 81040a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 81040ac:	2300      	movs	r3, #0
 81040ae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 81040b2:	f107 0310 	add.w	r3, r7, #16
 81040b6:	2264      	movs	r2, #100	@ 0x64
 81040b8:	2100      	movs	r1, #0
 81040ba:	4618      	mov	r0, r3
 81040bc:	f017 ff45 	bl	811bf4a <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 81040c0:	4b89      	ldr	r3, [pc, #548]	@ (81042e8 <low_level_init+0x250>)
 81040c2:	4a8a      	ldr	r2, [pc, #552]	@ (81042ec <low_level_init+0x254>)
 81040c4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 81040c6:	2300      	movs	r3, #0
 81040c8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 81040ca:	2380      	movs	r3, #128	@ 0x80
 81040cc:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 81040ce:	23e1      	movs	r3, #225	@ 0xe1
 81040d0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 81040d2:	2300      	movs	r3, #0
 81040d4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 81040d6:	2300      	movs	r3, #0
 81040d8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 81040da:	2300      	movs	r3, #0
 81040dc:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 81040de:	4a82      	ldr	r2, [pc, #520]	@ (81042e8 <low_level_init+0x250>)
 81040e0:	f107 0308 	add.w	r3, r7, #8
 81040e4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 81040e6:	4b80      	ldr	r3, [pc, #512]	@ (81042e8 <low_level_init+0x250>)
 81040e8:	2201      	movs	r2, #1
 81040ea:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 81040ec:	4b7e      	ldr	r3, [pc, #504]	@ (81042e8 <low_level_init+0x250>)
 81040ee:	4a80      	ldr	r2, [pc, #512]	@ (81042f0 <low_level_init+0x258>)
 81040f0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 81040f2:	4b7d      	ldr	r3, [pc, #500]	@ (81042e8 <low_level_init+0x250>)
 81040f4:	4a7f      	ldr	r2, [pc, #508]	@ (81042f4 <low_level_init+0x25c>)
 81040f6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 81040f8:	4b7b      	ldr	r3, [pc, #492]	@ (81042e8 <low_level_init+0x250>)
 81040fa:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 81040fe:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8104100:	4879      	ldr	r0, [pc, #484]	@ (81042e8 <low_level_init+0x250>)
 8104102:	f003 f98d 	bl	8107420 <HAL_ETH_Init>
 8104106:	4603      	mov	r3, r0
 8104108:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 810410c:	2238      	movs	r2, #56	@ 0x38
 810410e:	2100      	movs	r1, #0
 8104110:	4879      	ldr	r0, [pc, #484]	@ (81042f8 <low_level_init+0x260>)
 8104112:	f017 ff1a 	bl	811bf4a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8104116:	4b78      	ldr	r3, [pc, #480]	@ (81042f8 <low_level_init+0x260>)
 8104118:	2221      	movs	r2, #33	@ 0x21
 810411a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 810411c:	4b76      	ldr	r3, [pc, #472]	@ (81042f8 <low_level_init+0x260>)
 810411e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8104122:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8104124:	4b74      	ldr	r3, [pc, #464]	@ (81042f8 <low_level_init+0x260>)
 8104126:	2200      	movs	r2, #0
 8104128:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 810412a:	4874      	ldr	r0, [pc, #464]	@ (81042fc <low_level_init+0x264>)
 810412c:	f00f fc14 	bl	8113958 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8104130:	687b      	ldr	r3, [r7, #4]
 8104132:	2206      	movs	r2, #6
 8104134:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8104138:	4b6b      	ldr	r3, [pc, #428]	@ (81042e8 <low_level_init+0x250>)
 810413a:	685b      	ldr	r3, [r3, #4]
 810413c:	781a      	ldrb	r2, [r3, #0]
 810413e:	687b      	ldr	r3, [r7, #4]
 8104140:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8104144:	4b68      	ldr	r3, [pc, #416]	@ (81042e8 <low_level_init+0x250>)
 8104146:	685b      	ldr	r3, [r3, #4]
 8104148:	785a      	ldrb	r2, [r3, #1]
 810414a:	687b      	ldr	r3, [r7, #4]
 810414c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8104150:	4b65      	ldr	r3, [pc, #404]	@ (81042e8 <low_level_init+0x250>)
 8104152:	685b      	ldr	r3, [r3, #4]
 8104154:	789a      	ldrb	r2, [r3, #2]
 8104156:	687b      	ldr	r3, [r7, #4]
 8104158:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 810415c:	4b62      	ldr	r3, [pc, #392]	@ (81042e8 <low_level_init+0x250>)
 810415e:	685b      	ldr	r3, [r3, #4]
 8104160:	78da      	ldrb	r2, [r3, #3]
 8104162:	687b      	ldr	r3, [r7, #4]
 8104164:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8104168:	4b5f      	ldr	r3, [pc, #380]	@ (81042e8 <low_level_init+0x250>)
 810416a:	685b      	ldr	r3, [r3, #4]
 810416c:	791a      	ldrb	r2, [r3, #4]
 810416e:	687b      	ldr	r3, [r7, #4]
 8104170:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8104174:	4b5c      	ldr	r3, [pc, #368]	@ (81042e8 <low_level_init+0x250>)
 8104176:	685b      	ldr	r3, [r3, #4]
 8104178:	795a      	ldrb	r2, [r3, #5]
 810417a:	687b      	ldr	r3, [r7, #4]
 810417c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8104180:	687b      	ldr	r3, [r7, #4]
 8104182:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8104186:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8104188:	687b      	ldr	r3, [r7, #4]
 810418a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 810418e:	f043 030a 	orr.w	r3, r3, #10
 8104192:	b2da      	uxtb	r2, r3
 8104194:	687b      	ldr	r3, [r7, #4]
 8104196:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 810419a:	2200      	movs	r2, #0
 810419c:	2100      	movs	r1, #0
 810419e:	2001      	movs	r0, #1
 81041a0:	f008 fa36 	bl	810c610 <osSemaphoreNew>
 81041a4:	4603      	mov	r3, r0
 81041a6:	4a56      	ldr	r2, [pc, #344]	@ (8104300 <low_level_init+0x268>)
 81041a8:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 81041aa:	2200      	movs	r2, #0
 81041ac:	2100      	movs	r1, #0
 81041ae:	2001      	movs	r0, #1
 81041b0:	f008 fa2e 	bl	810c610 <osSemaphoreNew>
 81041b4:	4603      	mov	r3, r0
 81041b6:	4a53      	ldr	r2, [pc, #332]	@ (8104304 <low_level_init+0x26c>)
 81041b8:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 81041ba:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 81041be:	2224      	movs	r2, #36	@ 0x24
 81041c0:	2100      	movs	r1, #0
 81041c2:	4618      	mov	r0, r3
 81041c4:	f017 fec1 	bl	811bf4a <memset>
  attributes.name = "EthIf";
 81041c8:	4b4f      	ldr	r3, [pc, #316]	@ (8104308 <low_level_init+0x270>)
 81041ca:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 81041cc:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 81041d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 81041d4:	2330      	movs	r3, #48	@ 0x30
 81041d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 81041da:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 81041de:	461a      	mov	r2, r3
 81041e0:	6879      	ldr	r1, [r7, #4]
 81041e2:	484a      	ldr	r0, [pc, #296]	@ (810430c <low_level_init+0x274>)
 81041e4:	f008 f859 	bl	810c29a <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 81041e8:	4949      	ldr	r1, [pc, #292]	@ (8104310 <low_level_init+0x278>)
 81041ea:	484a      	ldr	r0, [pc, #296]	@ (8104314 <low_level_init+0x27c>)
 81041ec:	f002 fe6f 	bl	8106ece <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 81041f0:	4848      	ldr	r0, [pc, #288]	@ (8104314 <low_level_init+0x27c>)
 81041f2:	f002 fe9e 	bl	8106f32 <LAN8742_Init>
 81041f6:	4603      	mov	r3, r0
 81041f8:	2b00      	cmp	r3, #0
 81041fa:	d006      	beq.n	810420a <low_level_init+0x172>
  {
    netif_set_link_down(netif);
 81041fc:	6878      	ldr	r0, [r7, #4]
 81041fe:	f00f ff85 	bl	811410c <netif_set_link_down>
    netif_set_down(netif);
 8104202:	6878      	ldr	r0, [r7, #4]
 8104204:	f00f ff1c 	bl	8114040 <netif_set_down>
 8104208:	e06b      	b.n	81042e2 <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 810420a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 810420e:	2b00      	cmp	r3, #0
 8104210:	d165      	bne.n	81042de <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8104212:	4840      	ldr	r0, [pc, #256]	@ (8104314 <low_level_init+0x27c>)
 8104214:	f002 feda 	bl	8106fcc <LAN8742_GetLinkState>
 8104218:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 810421c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8104220:	2b01      	cmp	r3, #1
 8104222:	dc06      	bgt.n	8104232 <low_level_init+0x19a>
    {
      netif_set_link_down(netif);
 8104224:	6878      	ldr	r0, [r7, #4]
 8104226:	f00f ff71 	bl	811410c <netif_set_link_down>
      netif_set_down(netif);
 810422a:	6878      	ldr	r0, [r7, #4]
 810422c:	f00f ff08 	bl	8114040 <netif_set_down>
 8104230:	e057      	b.n	81042e2 <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 8104232:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8104236:	3b02      	subs	r3, #2
 8104238:	2b03      	cmp	r3, #3
 810423a:	d82b      	bhi.n	8104294 <low_level_init+0x1fc>
 810423c:	a201      	add	r2, pc, #4	@ (adr r2, 8104244 <low_level_init+0x1ac>)
 810423e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104242:	bf00      	nop
 8104244:	08104255 	.word	0x08104255
 8104248:	08104267 	.word	0x08104267
 810424c:	08104277 	.word	0x08104277
 8104250:	08104287 	.word	0x08104287
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8104254:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8104258:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 810425c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8104260:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8104264:	e01f      	b.n	81042a6 <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8104266:	2300      	movs	r3, #0
 8104268:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 810426c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8104270:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8104274:	e017      	b.n	81042a6 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8104276:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810427a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 810427e:	2300      	movs	r3, #0
 8104280:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8104284:	e00f      	b.n	81042a6 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8104286:	2300      	movs	r3, #0
 8104288:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 810428c:	2300      	movs	r3, #0
 810428e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8104292:	e008      	b.n	81042a6 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8104294:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8104298:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 810429c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 81042a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 81042a4:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 81042a6:	f107 0310 	add.w	r3, r7, #16
 81042aa:	4619      	mov	r1, r3
 81042ac:	480e      	ldr	r0, [pc, #56]	@ (81042e8 <low_level_init+0x250>)
 81042ae:	f003 fe5d 	bl	8107f6c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 81042b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 81042b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 81042b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 81042bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 81042be:	f107 0310 	add.w	r3, r7, #16
 81042c2:	4619      	mov	r1, r3
 81042c4:	4808      	ldr	r0, [pc, #32]	@ (81042e8 <low_level_init+0x250>)
 81042c6:	f004 f825 	bl	8108314 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 81042ca:	4807      	ldr	r0, [pc, #28]	@ (81042e8 <low_level_init+0x250>)
 81042cc:	f003 f9a6 	bl	810761c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 81042d0:	6878      	ldr	r0, [r7, #4]
 81042d2:	f00f fe49 	bl	8113f68 <netif_set_up>
    netif_set_link_up(netif);
 81042d6:	6878      	ldr	r0, [r7, #4]
 81042d8:	f00f fee4 	bl	81140a4 <netif_set_link_up>
 81042dc:	e001      	b.n	81042e2 <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 81042de:	f7fc faf7 	bl	81008d0 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 81042e2:	37a8      	adds	r7, #168	@ 0xa8
 81042e4:	46bd      	mov	sp, r7
 81042e6:	bd80      	pop	{r7, pc}
 81042e8:	1000025c 	.word	0x1000025c
 81042ec:	40028000 	.word	0x40028000
 81042f0:	10040100 	.word	0x10040100
 81042f4:	10040000 	.word	0x10040000
 81042f8:	1000030c 	.word	0x1000030c
 81042fc:	0811fc24 	.word	0x0811fc24
 8104300:	10000254 	.word	0x10000254
 8104304:	10000258 	.word	0x10000258
 8104308:	0811cc74 	.word	0x0811cc74
 810430c:	081044a9 	.word	0x081044a9
 8104310:	10000000 	.word	0x10000000
 8104314:	10000344 	.word	0x10000344

08104318 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8104318:	b580      	push	{r7, lr}
 810431a:	b092      	sub	sp, #72	@ 0x48
 810431c:	af00      	add	r7, sp, #0
 810431e:	6078      	str	r0, [r7, #4]
 8104320:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8104322:	2300      	movs	r3, #0
 8104324:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8104326:	2300      	movs	r3, #0
 8104328:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 810432a:	2300      	movs	r3, #0
 810432c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8104330:	f107 030c 	add.w	r3, r7, #12
 8104334:	2230      	movs	r2, #48	@ 0x30
 8104336:	2100      	movs	r1, #0
 8104338:	4618      	mov	r0, r3
 810433a:	f017 fe06 	bl	811bf4a <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 810433e:	f107 030c 	add.w	r3, r7, #12
 8104342:	2230      	movs	r2, #48	@ 0x30
 8104344:	2100      	movs	r1, #0
 8104346:	4618      	mov	r0, r3
 8104348:	f017 fdff 	bl	811bf4a <memset>

  for(q = p; q != NULL; q = q->next)
 810434c:	683b      	ldr	r3, [r7, #0]
 810434e:	643b      	str	r3, [r7, #64]	@ 0x40
 8104350:	e045      	b.n	81043de <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8104352:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8104354:	2b03      	cmp	r3, #3
 8104356:	d902      	bls.n	810435e <low_level_output+0x46>
      return ERR_IF;
 8104358:	f06f 030b 	mvn.w	r3, #11
 810435c:	e07f      	b.n	810445e <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 810435e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8104360:	6859      	ldr	r1, [r3, #4]
 8104362:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8104364:	4613      	mov	r3, r2
 8104366:	005b      	lsls	r3, r3, #1
 8104368:	4413      	add	r3, r2
 810436a:	009b      	lsls	r3, r3, #2
 810436c:	3348      	adds	r3, #72	@ 0x48
 810436e:	443b      	add	r3, r7
 8104370:	3b3c      	subs	r3, #60	@ 0x3c
 8104372:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8104374:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8104376:	895b      	ldrh	r3, [r3, #10]
 8104378:	4619      	mov	r1, r3
 810437a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810437c:	4613      	mov	r3, r2
 810437e:	005b      	lsls	r3, r3, #1
 8104380:	4413      	add	r3, r2
 8104382:	009b      	lsls	r3, r3, #2
 8104384:	3348      	adds	r3, #72	@ 0x48
 8104386:	443b      	add	r3, r7
 8104388:	3b38      	subs	r3, #56	@ 0x38
 810438a:	6019      	str	r1, [r3, #0]

    if(i>0)
 810438c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810438e:	2b00      	cmp	r3, #0
 8104390:	d011      	beq.n	81043b6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8104392:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8104394:	1e5a      	subs	r2, r3, #1
 8104396:	f107 000c 	add.w	r0, r7, #12
 810439a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810439c:	460b      	mov	r3, r1
 810439e:	005b      	lsls	r3, r3, #1
 81043a0:	440b      	add	r3, r1
 81043a2:	009b      	lsls	r3, r3, #2
 81043a4:	18c1      	adds	r1, r0, r3
 81043a6:	4613      	mov	r3, r2
 81043a8:	005b      	lsls	r3, r3, #1
 81043aa:	4413      	add	r3, r2
 81043ac:	009b      	lsls	r3, r3, #2
 81043ae:	3348      	adds	r3, #72	@ 0x48
 81043b0:	443b      	add	r3, r7
 81043b2:	3b34      	subs	r3, #52	@ 0x34
 81043b4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 81043b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81043b8:	681b      	ldr	r3, [r3, #0]
 81043ba:	2b00      	cmp	r3, #0
 81043bc:	d109      	bne.n	81043d2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 81043be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 81043c0:	4613      	mov	r3, r2
 81043c2:	005b      	lsls	r3, r3, #1
 81043c4:	4413      	add	r3, r2
 81043c6:	009b      	lsls	r3, r3, #2
 81043c8:	3348      	adds	r3, #72	@ 0x48
 81043ca:	443b      	add	r3, r7
 81043cc:	3b34      	subs	r3, #52	@ 0x34
 81043ce:	2200      	movs	r2, #0
 81043d0:	601a      	str	r2, [r3, #0]
    }

    i++;
 81043d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81043d4:	3301      	adds	r3, #1
 81043d6:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 81043d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81043da:	681b      	ldr	r3, [r3, #0]
 81043dc:	643b      	str	r3, [r7, #64]	@ 0x40
 81043de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81043e0:	2b00      	cmp	r3, #0
 81043e2:	d1b6      	bne.n	8104352 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 81043e4:	683b      	ldr	r3, [r7, #0]
 81043e6:	891b      	ldrh	r3, [r3, #8]
 81043e8:	461a      	mov	r2, r3
 81043ea:	4b1f      	ldr	r3, [pc, #124]	@ (8104468 <low_level_output+0x150>)
 81043ec:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 81043ee:	4a1e      	ldr	r2, [pc, #120]	@ (8104468 <low_level_output+0x150>)
 81043f0:	f107 030c 	add.w	r3, r7, #12
 81043f4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 81043f6:	4a1c      	ldr	r2, [pc, #112]	@ (8104468 <low_level_output+0x150>)
 81043f8:	683b      	ldr	r3, [r7, #0]
 81043fa:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 81043fc:	6838      	ldr	r0, [r7, #0]
 81043fe:	f010 fb09 	bl	8114a14 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 8104402:	4919      	ldr	r1, [pc, #100]	@ (8104468 <low_level_output+0x150>)
 8104404:	4819      	ldr	r0, [pc, #100]	@ (810446c <low_level_output+0x154>)
 8104406:	f003 f9f6 	bl	81077f6 <HAL_ETH_Transmit_IT>
 810440a:	4603      	mov	r3, r0
 810440c:	2b00      	cmp	r3, #0
 810440e:	d103      	bne.n	8104418 <low_level_output+0x100>
    {
      errval = ERR_OK;
 8104410:	2300      	movs	r3, #0
 8104412:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8104416:	e01b      	b.n	8104450 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8104418:	4814      	ldr	r0, [pc, #80]	@ (810446c <low_level_output+0x154>)
 810441a:	f003 ffe5 	bl	81083e8 <HAL_ETH_GetError>
 810441e:	4603      	mov	r3, r0
 8104420:	f003 0302 	and.w	r3, r3, #2
 8104424:	2b00      	cmp	r3, #0
 8104426:	d00d      	beq.n	8104444 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8104428:	4b11      	ldr	r3, [pc, #68]	@ (8104470 <low_level_output+0x158>)
 810442a:	681b      	ldr	r3, [r3, #0]
 810442c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8104430:	4618      	mov	r0, r3
 8104432:	f008 f977 	bl	810c724 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 8104436:	480d      	ldr	r0, [pc, #52]	@ (810446c <low_level_output+0x154>)
 8104438:	f003 fb64 	bl	8107b04 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 810443c:	23fe      	movs	r3, #254	@ 0xfe
 810443e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8104442:	e005      	b.n	8104450 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8104444:	6838      	ldr	r0, [r7, #0]
 8104446:	f010 fa3f 	bl	81148c8 <pbuf_free>
        errval =  ERR_IF;
 810444a:	23f4      	movs	r3, #244	@ 0xf4
 810444c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 8104450:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8104454:	f113 0f02 	cmn.w	r3, #2
 8104458:	d0d3      	beq.n	8104402 <low_level_output+0xea>

  return errval;
 810445a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 810445e:	4618      	mov	r0, r3
 8104460:	3748      	adds	r7, #72	@ 0x48
 8104462:	46bd      	mov	sp, r7
 8104464:	bd80      	pop	{r7, pc}
 8104466:	bf00      	nop
 8104468:	1000030c 	.word	0x1000030c
 810446c:	1000025c 	.word	0x1000025c
 8104470:	10000258 	.word	0x10000258

08104474 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8104474:	b580      	push	{r7, lr}
 8104476:	b084      	sub	sp, #16
 8104478:	af00      	add	r7, sp, #0
 810447a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 810447c:	2300      	movs	r3, #0
 810447e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8104480:	4b07      	ldr	r3, [pc, #28]	@ (81044a0 <low_level_input+0x2c>)
 8104482:	781b      	ldrb	r3, [r3, #0]
 8104484:	2b00      	cmp	r3, #0
 8104486:	d105      	bne.n	8104494 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8104488:	f107 030c 	add.w	r3, r7, #12
 810448c:	4619      	mov	r1, r3
 810448e:	4805      	ldr	r0, [pc, #20]	@ (81044a4 <low_level_input+0x30>)
 8104490:	f003 fa02 	bl	8107898 <HAL_ETH_ReadData>
  }

  return p;
 8104494:	68fb      	ldr	r3, [r7, #12]
}
 8104496:	4618      	mov	r0, r3
 8104498:	3710      	adds	r7, #16
 810449a:	46bd      	mov	sp, r7
 810449c:	bd80      	pop	{r7, pc}
 810449e:	bf00      	nop
 81044a0:	10000250 	.word	0x10000250
 81044a4:	1000025c 	.word	0x1000025c

081044a8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 81044a8:	b580      	push	{r7, lr}
 81044aa:	b084      	sub	sp, #16
 81044ac:	af00      	add	r7, sp, #0
 81044ae:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 81044b0:	2300      	movs	r3, #0
 81044b2:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 81044b4:	687b      	ldr	r3, [r7, #4]
 81044b6:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 81044b8:	4b0f      	ldr	r3, [pc, #60]	@ (81044f8 <ethernetif_input+0x50>)
 81044ba:	681b      	ldr	r3, [r3, #0]
 81044bc:	f04f 31ff 	mov.w	r1, #4294967295
 81044c0:	4618      	mov	r0, r3
 81044c2:	f008 f92f 	bl	810c724 <osSemaphoreAcquire>
 81044c6:	4603      	mov	r3, r0
 81044c8:	2b00      	cmp	r3, #0
 81044ca:	d1f5      	bne.n	81044b8 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 81044cc:	68b8      	ldr	r0, [r7, #8]
 81044ce:	f7ff ffd1 	bl	8104474 <low_level_input>
 81044d2:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 81044d4:	68fb      	ldr	r3, [r7, #12]
 81044d6:	2b00      	cmp	r3, #0
 81044d8:	d00a      	beq.n	81044f0 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 81044da:	68bb      	ldr	r3, [r7, #8]
 81044dc:	691b      	ldr	r3, [r3, #16]
 81044de:	68b9      	ldr	r1, [r7, #8]
 81044e0:	68f8      	ldr	r0, [r7, #12]
 81044e2:	4798      	blx	r3
 81044e4:	4603      	mov	r3, r0
 81044e6:	2b00      	cmp	r3, #0
 81044e8:	d002      	beq.n	81044f0 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 81044ea:	68f8      	ldr	r0, [r7, #12]
 81044ec:	f010 f9ec 	bl	81148c8 <pbuf_free>
          }
        }
      } while(p!=NULL);
 81044f0:	68fb      	ldr	r3, [r7, #12]
 81044f2:	2b00      	cmp	r3, #0
 81044f4:	d1ea      	bne.n	81044cc <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 81044f6:	e7df      	b.n	81044b8 <ethernetif_input+0x10>
 81044f8:	10000254 	.word	0x10000254

081044fc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 81044fc:	b580      	push	{r7, lr}
 81044fe:	b082      	sub	sp, #8
 8104500:	af00      	add	r7, sp, #0
 8104502:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8104504:	687b      	ldr	r3, [r7, #4]
 8104506:	2b00      	cmp	r3, #0
 8104508:	d106      	bne.n	8104518 <ethernetif_init+0x1c>
 810450a:	4b0e      	ldr	r3, [pc, #56]	@ (8104544 <ethernetif_init+0x48>)
 810450c:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8104510:	490d      	ldr	r1, [pc, #52]	@ (8104548 <ethernetif_init+0x4c>)
 8104512:	480e      	ldr	r0, [pc, #56]	@ (810454c <ethernetif_init+0x50>)
 8104514:	f017 fc9a 	bl	811be4c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8104518:	687b      	ldr	r3, [r7, #4]
 810451a:	2273      	movs	r2, #115	@ 0x73
 810451c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8104520:	687b      	ldr	r3, [r7, #4]
 8104522:	2274      	movs	r2, #116	@ 0x74
 8104524:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8104528:	687b      	ldr	r3, [r7, #4]
 810452a:	4a09      	ldr	r2, [pc, #36]	@ (8104550 <ethernetif_init+0x54>)
 810452c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 810452e:	687b      	ldr	r3, [r7, #4]
 8104530:	4a08      	ldr	r2, [pc, #32]	@ (8104554 <ethernetif_init+0x58>)
 8104532:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8104534:	6878      	ldr	r0, [r7, #4]
 8104536:	f7ff fdaf 	bl	8104098 <low_level_init>

  return ERR_OK;
 810453a:	2300      	movs	r3, #0
}
 810453c:	4618      	mov	r0, r3
 810453e:	3708      	adds	r7, #8
 8104540:	46bd      	mov	sp, r7
 8104542:	bd80      	pop	{r7, pc}
 8104544:	0811cc7c 	.word	0x0811cc7c
 8104548:	0811ccdc 	.word	0x0811ccdc
 810454c:	0811ccec 	.word	0x0811ccec
 8104550:	081112b1 	.word	0x081112b1
 8104554:	08104319 	.word	0x08104319

08104558 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8104558:	b580      	push	{r7, lr}
 810455a:	b084      	sub	sp, #16
 810455c:	af00      	add	r7, sp, #0
 810455e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8104560:	687b      	ldr	r3, [r7, #4]
 8104562:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8104564:	68f9      	ldr	r1, [r7, #12]
 8104566:	4809      	ldr	r0, [pc, #36]	@ (810458c <pbuf_free_custom+0x34>)
 8104568:	f00f fae6 	bl	8113b38 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 810456c:	4b08      	ldr	r3, [pc, #32]	@ (8104590 <pbuf_free_custom+0x38>)
 810456e:	781b      	ldrb	r3, [r3, #0]
 8104570:	2b01      	cmp	r3, #1
 8104572:	d107      	bne.n	8104584 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8104574:	4b06      	ldr	r3, [pc, #24]	@ (8104590 <pbuf_free_custom+0x38>)
 8104576:	2200      	movs	r2, #0
 8104578:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 810457a:	4b06      	ldr	r3, [pc, #24]	@ (8104594 <pbuf_free_custom+0x3c>)
 810457c:	681b      	ldr	r3, [r3, #0]
 810457e:	4618      	mov	r0, r3
 8104580:	f008 f922 	bl	810c7c8 <osSemaphoreRelease>
  }
}
 8104584:	bf00      	nop
 8104586:	3710      	adds	r7, #16
 8104588:	46bd      	mov	sp, r7
 810458a:	bd80      	pop	{r7, pc}
 810458c:	0811fc24 	.word	0x0811fc24
 8104590:	10000250 	.word	0x10000250
 8104594:	10000254 	.word	0x10000254

08104598 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8104598:	b580      	push	{r7, lr}
 810459a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 810459c:	f002 fe2c 	bl	81071f8 <HAL_GetTick>
 81045a0:	4603      	mov	r3, r0
}
 81045a2:	4618      	mov	r0, r3
 81045a4:	bd80      	pop	{r7, pc}
	...

081045a8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 81045a8:	b580      	push	{r7, lr}
 81045aa:	b08e      	sub	sp, #56	@ 0x38
 81045ac:	af00      	add	r7, sp, #0
 81045ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81045b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81045b4:	2200      	movs	r2, #0
 81045b6:	601a      	str	r2, [r3, #0]
 81045b8:	605a      	str	r2, [r3, #4]
 81045ba:	609a      	str	r2, [r3, #8]
 81045bc:	60da      	str	r2, [r3, #12]
 81045be:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 81045c0:	687b      	ldr	r3, [r7, #4]
 81045c2:	681b      	ldr	r3, [r3, #0]
 81045c4:	4a51      	ldr	r2, [pc, #324]	@ (810470c <HAL_ETH_MspInit+0x164>)
 81045c6:	4293      	cmp	r3, r2
 81045c8:	f040 809b 	bne.w	8104702 <HAL_ETH_MspInit+0x15a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 81045cc:	4b50      	ldr	r3, [pc, #320]	@ (8104710 <HAL_ETH_MspInit+0x168>)
 81045ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81045d2:	4a4f      	ldr	r2, [pc, #316]	@ (8104710 <HAL_ETH_MspInit+0x168>)
 81045d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 81045d8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81045dc:	4b4c      	ldr	r3, [pc, #304]	@ (8104710 <HAL_ETH_MspInit+0x168>)
 81045de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81045e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81045e6:	623b      	str	r3, [r7, #32]
 81045e8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 81045ea:	4b49      	ldr	r3, [pc, #292]	@ (8104710 <HAL_ETH_MspInit+0x168>)
 81045ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81045f0:	4a47      	ldr	r2, [pc, #284]	@ (8104710 <HAL_ETH_MspInit+0x168>)
 81045f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 81045f6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81045fa:	4b45      	ldr	r3, [pc, #276]	@ (8104710 <HAL_ETH_MspInit+0x168>)
 81045fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8104600:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8104604:	61fb      	str	r3, [r7, #28]
 8104606:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8104608:	4b41      	ldr	r3, [pc, #260]	@ (8104710 <HAL_ETH_MspInit+0x168>)
 810460a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810460e:	4a40      	ldr	r2, [pc, #256]	@ (8104710 <HAL_ETH_MspInit+0x168>)
 8104610:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104614:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8104618:	4b3d      	ldr	r3, [pc, #244]	@ (8104710 <HAL_ETH_MspInit+0x168>)
 810461a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810461e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104622:	61bb      	str	r3, [r7, #24]
 8104624:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8104626:	4b3a      	ldr	r3, [pc, #232]	@ (8104710 <HAL_ETH_MspInit+0x168>)
 8104628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810462c:	4a38      	ldr	r2, [pc, #224]	@ (8104710 <HAL_ETH_MspInit+0x168>)
 810462e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8104632:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8104636:	4b36      	ldr	r3, [pc, #216]	@ (8104710 <HAL_ETH_MspInit+0x168>)
 8104638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810463c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8104640:	617b      	str	r3, [r7, #20]
 8104642:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8104644:	4b32      	ldr	r3, [pc, #200]	@ (8104710 <HAL_ETH_MspInit+0x168>)
 8104646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810464a:	4a31      	ldr	r2, [pc, #196]	@ (8104710 <HAL_ETH_MspInit+0x168>)
 810464c:	f043 0304 	orr.w	r3, r3, #4
 8104650:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8104654:	4b2e      	ldr	r3, [pc, #184]	@ (8104710 <HAL_ETH_MspInit+0x168>)
 8104656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810465a:	f003 0304 	and.w	r3, r3, #4
 810465e:	613b      	str	r3, [r7, #16]
 8104660:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8104662:	4b2b      	ldr	r3, [pc, #172]	@ (8104710 <HAL_ETH_MspInit+0x168>)
 8104664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104668:	4a29      	ldr	r2, [pc, #164]	@ (8104710 <HAL_ETH_MspInit+0x168>)
 810466a:	f043 0301 	orr.w	r3, r3, #1
 810466e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8104672:	4b27      	ldr	r3, [pc, #156]	@ (8104710 <HAL_ETH_MspInit+0x168>)
 8104674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104678:	f003 0301 	and.w	r3, r3, #1
 810467c:	60fb      	str	r3, [r7, #12]
 810467e:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ETH_REF_CLK
    PA7     ------> ETH_CRS_DV
    PC4     ------> ETH_RXD0
    PC5     ------> ETH_RXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8104680:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8104684:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8104686:	2302      	movs	r3, #2
 8104688:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810468a:	2300      	movs	r3, #0
 810468c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810468e:	2303      	movs	r3, #3
 8104690:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8104692:	230b      	movs	r3, #11
 8104694:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8104696:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810469a:	4619      	mov	r1, r3
 810469c:	481d      	ldr	r0, [pc, #116]	@ (8104714 <HAL_ETH_MspInit+0x16c>)
 810469e:	f004 fc3d 	bl	8108f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 81046a2:	2332      	movs	r3, #50	@ 0x32
 81046a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81046a6:	2302      	movs	r3, #2
 81046a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81046aa:	2300      	movs	r3, #0
 81046ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81046ae:	2303      	movs	r3, #3
 81046b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81046b2:	230b      	movs	r3, #11
 81046b4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81046b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81046ba:	4619      	mov	r1, r3
 81046bc:	4816      	ldr	r0, [pc, #88]	@ (8104718 <HAL_ETH_MspInit+0x170>)
 81046be:	f004 fc2d 	bl	8108f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_7;
 81046c2:	2386      	movs	r3, #134	@ 0x86
 81046c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81046c6:	2302      	movs	r3, #2
 81046c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81046ca:	2300      	movs	r3, #0
 81046cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81046ce:	2303      	movs	r3, #3
 81046d0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81046d2:	230b      	movs	r3, #11
 81046d4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81046d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81046da:	4619      	mov	r1, r3
 81046dc:	480f      	ldr	r0, [pc, #60]	@ (810471c <HAL_ETH_MspInit+0x174>)
 81046de:	f004 fc1d 	bl	8108f1c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 81046e2:	2200      	movs	r2, #0
 81046e4:	2105      	movs	r1, #5
 81046e6:	203d      	movs	r0, #61	@ 0x3d
 81046e8:	f002 fe5e 	bl	81073a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 81046ec:	203d      	movs	r0, #61	@ 0x3d
 81046ee:	f002 fe75 	bl	81073dc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 6, 0);
 81046f2:	2200      	movs	r2, #0
 81046f4:	2106      	movs	r1, #6
 81046f6:	203e      	movs	r0, #62	@ 0x3e
 81046f8:	f002 fe56 	bl	81073a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 81046fc:	203e      	movs	r0, #62	@ 0x3e
 81046fe:	f002 fe6d 	bl	81073dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8104702:	bf00      	nop
 8104704:	3738      	adds	r7, #56	@ 0x38
 8104706:	46bd      	mov	sp, r7
 8104708:	bd80      	pop	{r7, pc}
 810470a:	bf00      	nop
 810470c:	40028000 	.word	0x40028000
 8104710:	58024400 	.word	0x58024400
 8104714:	58021800 	.word	0x58021800
 8104718:	58020800 	.word	0x58020800
 810471c:	58020000 	.word	0x58020000

08104720 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8104720:	b580      	push	{r7, lr}
 8104722:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8104724:	4802      	ldr	r0, [pc, #8]	@ (8104730 <ETH_PHY_IO_Init+0x10>)
 8104726:	f003 fe0f 	bl	8108348 <HAL_ETH_SetMDIOClockRange>

  return 0;
 810472a:	2300      	movs	r3, #0
}
 810472c:	4618      	mov	r0, r3
 810472e:	bd80      	pop	{r7, pc}
 8104730:	1000025c 	.word	0x1000025c

08104734 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8104734:	b480      	push	{r7}
 8104736:	af00      	add	r7, sp, #0
  return 0;
 8104738:	2300      	movs	r3, #0
}
 810473a:	4618      	mov	r0, r3
 810473c:	46bd      	mov	sp, r7
 810473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104742:	4770      	bx	lr

08104744 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8104744:	b580      	push	{r7, lr}
 8104746:	b084      	sub	sp, #16
 8104748:	af00      	add	r7, sp, #0
 810474a:	60f8      	str	r0, [r7, #12]
 810474c:	60b9      	str	r1, [r7, #8]
 810474e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8104750:	687b      	ldr	r3, [r7, #4]
 8104752:	68ba      	ldr	r2, [r7, #8]
 8104754:	68f9      	ldr	r1, [r7, #12]
 8104756:	4807      	ldr	r0, [pc, #28]	@ (8104774 <ETH_PHY_IO_ReadReg+0x30>)
 8104758:	f003 fb60 	bl	8107e1c <HAL_ETH_ReadPHYRegister>
 810475c:	4603      	mov	r3, r0
 810475e:	2b00      	cmp	r3, #0
 8104760:	d002      	beq.n	8104768 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8104762:	f04f 33ff 	mov.w	r3, #4294967295
 8104766:	e000      	b.n	810476a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8104768:	2300      	movs	r3, #0
}
 810476a:	4618      	mov	r0, r3
 810476c:	3710      	adds	r7, #16
 810476e:	46bd      	mov	sp, r7
 8104770:	bd80      	pop	{r7, pc}
 8104772:	bf00      	nop
 8104774:	1000025c 	.word	0x1000025c

08104778 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8104778:	b580      	push	{r7, lr}
 810477a:	b084      	sub	sp, #16
 810477c:	af00      	add	r7, sp, #0
 810477e:	60f8      	str	r0, [r7, #12]
 8104780:	60b9      	str	r1, [r7, #8]
 8104782:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8104784:	687b      	ldr	r3, [r7, #4]
 8104786:	68ba      	ldr	r2, [r7, #8]
 8104788:	68f9      	ldr	r1, [r7, #12]
 810478a:	4807      	ldr	r0, [pc, #28]	@ (81047a8 <ETH_PHY_IO_WriteReg+0x30>)
 810478c:	f003 fb9a 	bl	8107ec4 <HAL_ETH_WritePHYRegister>
 8104790:	4603      	mov	r3, r0
 8104792:	2b00      	cmp	r3, #0
 8104794:	d002      	beq.n	810479c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8104796:	f04f 33ff 	mov.w	r3, #4294967295
 810479a:	e000      	b.n	810479e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 810479c:	2300      	movs	r3, #0
}
 810479e:	4618      	mov	r0, r3
 81047a0:	3710      	adds	r7, #16
 81047a2:	46bd      	mov	sp, r7
 81047a4:	bd80      	pop	{r7, pc}
 81047a6:	bf00      	nop
 81047a8:	1000025c 	.word	0x1000025c

081047ac <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 81047ac:	b580      	push	{r7, lr}
 81047ae:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 81047b0:	f002 fd22 	bl	81071f8 <HAL_GetTick>
 81047b4:	4603      	mov	r3, r0
}
 81047b6:	4618      	mov	r0, r3
 81047b8:	bd80      	pop	{r7, pc}
	...

081047bc <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 81047bc:	b580      	push	{r7, lr}
 81047be:	b0a0      	sub	sp, #128	@ 0x80
 81047c0:	af00      	add	r7, sp, #0
 81047c2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 81047c4:	f107 0308 	add.w	r3, r7, #8
 81047c8:	2264      	movs	r2, #100	@ 0x64
 81047ca:	2100      	movs	r1, #0
 81047cc:	4618      	mov	r0, r3
 81047ce:	f017 fbbc 	bl	811bf4a <memset>
  int32_t PHYLinkState = 0;
 81047d2:	2300      	movs	r3, #0
 81047d4:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 81047d6:	2300      	movs	r3, #0
 81047d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 81047da:	2300      	movs	r3, #0
 81047dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 81047de:	2300      	movs	r3, #0
 81047e0:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 81047e2:	687b      	ldr	r3, [r7, #4]
 81047e4:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 81047e6:	483a      	ldr	r0, [pc, #232]	@ (81048d0 <ethernet_link_thread+0x114>)
 81047e8:	f002 fbf0 	bl	8106fcc <LAN8742_GetLinkState>
 81047ec:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 81047ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81047f0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 81047f4:	089b      	lsrs	r3, r3, #2
 81047f6:	f003 0301 	and.w	r3, r3, #1
 81047fa:	b2db      	uxtb	r3, r3
 81047fc:	2b00      	cmp	r3, #0
 81047fe:	d00c      	beq.n	810481a <ethernet_link_thread+0x5e>
 8104800:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8104802:	2b01      	cmp	r3, #1
 8104804:	dc09      	bgt.n	810481a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8104806:	4833      	ldr	r0, [pc, #204]	@ (81048d4 <ethernet_link_thread+0x118>)
 8104808:	f002 ff7d 	bl	8107706 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 810480c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 810480e:	f00f fc17 	bl	8114040 <netif_set_down>
    netif_set_link_down(netif);
 8104812:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8104814:	f00f fc7a 	bl	811410c <netif_set_link_down>
 8104818:	e055      	b.n	81048c6 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 810481a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810481c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8104820:	f003 0304 	and.w	r3, r3, #4
 8104824:	2b00      	cmp	r3, #0
 8104826:	d14e      	bne.n	81048c6 <ethernet_link_thread+0x10a>
 8104828:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 810482a:	2b01      	cmp	r3, #1
 810482c:	dd4b      	ble.n	81048c6 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 810482e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8104830:	3b02      	subs	r3, #2
 8104832:	2b03      	cmp	r3, #3
 8104834:	d82a      	bhi.n	810488c <ethernet_link_thread+0xd0>
 8104836:	a201      	add	r2, pc, #4	@ (adr r2, 810483c <ethernet_link_thread+0x80>)
 8104838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810483c:	0810484d 	.word	0x0810484d
 8104840:	0810485f 	.word	0x0810485f
 8104844:	0810486f 	.word	0x0810486f
 8104848:	0810487f 	.word	0x0810487f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 810484c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8104850:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8104852:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8104856:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8104858:	2301      	movs	r3, #1
 810485a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 810485c:	e017      	b.n	810488e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 810485e:	2300      	movs	r3, #0
 8104860:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8104862:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8104866:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8104868:	2301      	movs	r3, #1
 810486a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 810486c:	e00f      	b.n	810488e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 810486e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8104872:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8104874:	2300      	movs	r3, #0
 8104876:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8104878:	2301      	movs	r3, #1
 810487a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 810487c:	e007      	b.n	810488e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 810487e:	2300      	movs	r3, #0
 8104880:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8104882:	2300      	movs	r3, #0
 8104884:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8104886:	2301      	movs	r3, #1
 8104888:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 810488a:	e000      	b.n	810488e <ethernet_link_thread+0xd2>
    default:
      break;
 810488c:	bf00      	nop
    }

    if(linkchanged)
 810488e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8104890:	2b00      	cmp	r3, #0
 8104892:	d018      	beq.n	81048c6 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8104894:	f107 0308 	add.w	r3, r7, #8
 8104898:	4619      	mov	r1, r3
 810489a:	480e      	ldr	r0, [pc, #56]	@ (81048d4 <ethernet_link_thread+0x118>)
 810489c:	f003 fb66 	bl	8107f6c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 81048a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 81048a2:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 81048a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 81048a6:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 81048a8:	f107 0308 	add.w	r3, r7, #8
 81048ac:	4619      	mov	r1, r3
 81048ae:	4809      	ldr	r0, [pc, #36]	@ (81048d4 <ethernet_link_thread+0x118>)
 81048b0:	f003 fd30 	bl	8108314 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 81048b4:	4807      	ldr	r0, [pc, #28]	@ (81048d4 <ethernet_link_thread+0x118>)
 81048b6:	f002 feb1 	bl	810761c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 81048ba:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 81048bc:	f00f fb54 	bl	8113f68 <netif_set_up>
      netif_set_link_up(netif);
 81048c0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 81048c2:	f00f fbef 	bl	81140a4 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 81048c6:	2064      	movs	r0, #100	@ 0x64
 81048c8:	f007 fd79 	bl	810c3be <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 81048cc:	e78b      	b.n	81047e6 <ethernet_link_thread+0x2a>
 81048ce:	bf00      	nop
 81048d0:	10000344 	.word	0x10000344
 81048d4:	1000025c 	.word	0x1000025c

081048d8 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 81048d8:	b580      	push	{r7, lr}
 81048da:	b086      	sub	sp, #24
 81048dc:	af02      	add	r7, sp, #8
 81048de:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 81048e0:	4812      	ldr	r0, [pc, #72]	@ (810492c <HAL_ETH_RxAllocateCallback+0x54>)
 81048e2:	f00f f8b5 	bl	8113a50 <memp_malloc_pool>
 81048e6:	60f8      	str	r0, [r7, #12]
  if (p)
 81048e8:	68fb      	ldr	r3, [r7, #12]
 81048ea:	2b00      	cmp	r3, #0
 81048ec:	d014      	beq.n	8104918 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 81048ee:	68fb      	ldr	r3, [r7, #12]
 81048f0:	f103 0220 	add.w	r2, r3, #32
 81048f4:	687b      	ldr	r3, [r7, #4]
 81048f6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 81048f8:	68fb      	ldr	r3, [r7, #12]
 81048fa:	4a0d      	ldr	r2, [pc, #52]	@ (8104930 <HAL_ETH_RxAllocateCallback+0x58>)
 81048fc:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 81048fe:	687b      	ldr	r3, [r7, #4]
 8104900:	681b      	ldr	r3, [r3, #0]
 8104902:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8104906:	9201      	str	r2, [sp, #4]
 8104908:	9300      	str	r3, [sp, #0]
 810490a:	68fb      	ldr	r3, [r7, #12]
 810490c:	2241      	movs	r2, #65	@ 0x41
 810490e:	2100      	movs	r1, #0
 8104910:	2000      	movs	r0, #0
 8104912:	f00f fe21 	bl	8114558 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8104916:	e005      	b.n	8104924 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8104918:	4b06      	ldr	r3, [pc, #24]	@ (8104934 <HAL_ETH_RxAllocateCallback+0x5c>)
 810491a:	2201      	movs	r2, #1
 810491c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 810491e:	687b      	ldr	r3, [r7, #4]
 8104920:	2200      	movs	r2, #0
 8104922:	601a      	str	r2, [r3, #0]
}
 8104924:	bf00      	nop
 8104926:	3710      	adds	r7, #16
 8104928:	46bd      	mov	sp, r7
 810492a:	bd80      	pop	{r7, pc}
 810492c:	0811fc24 	.word	0x0811fc24
 8104930:	08104559 	.word	0x08104559
 8104934:	10000250 	.word	0x10000250

08104938 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8104938:	b480      	push	{r7}
 810493a:	b089      	sub	sp, #36	@ 0x24
 810493c:	af00      	add	r7, sp, #0
 810493e:	60f8      	str	r0, [r7, #12]
 8104940:	60b9      	str	r1, [r7, #8]
 8104942:	607a      	str	r2, [r7, #4]
 8104944:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8104946:	68fb      	ldr	r3, [r7, #12]
 8104948:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 810494a:	68bb      	ldr	r3, [r7, #8]
 810494c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 810494e:	2300      	movs	r3, #0
 8104950:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8104952:	687b      	ldr	r3, [r7, #4]
 8104954:	3b20      	subs	r3, #32
 8104956:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8104958:	69fb      	ldr	r3, [r7, #28]
 810495a:	2200      	movs	r2, #0
 810495c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 810495e:	69fb      	ldr	r3, [r7, #28]
 8104960:	2200      	movs	r2, #0
 8104962:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8104964:	69fb      	ldr	r3, [r7, #28]
 8104966:	887a      	ldrh	r2, [r7, #2]
 8104968:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 810496a:	69bb      	ldr	r3, [r7, #24]
 810496c:	681b      	ldr	r3, [r3, #0]
 810496e:	2b00      	cmp	r3, #0
 8104970:	d103      	bne.n	810497a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8104972:	69bb      	ldr	r3, [r7, #24]
 8104974:	69fa      	ldr	r2, [r7, #28]
 8104976:	601a      	str	r2, [r3, #0]
 8104978:	e003      	b.n	8104982 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 810497a:	697b      	ldr	r3, [r7, #20]
 810497c:	681b      	ldr	r3, [r3, #0]
 810497e:	69fa      	ldr	r2, [r7, #28]
 8104980:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8104982:	697b      	ldr	r3, [r7, #20]
 8104984:	69fa      	ldr	r2, [r7, #28]
 8104986:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8104988:	69bb      	ldr	r3, [r7, #24]
 810498a:	681b      	ldr	r3, [r3, #0]
 810498c:	61fb      	str	r3, [r7, #28]
 810498e:	e009      	b.n	81049a4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8104990:	69fb      	ldr	r3, [r7, #28]
 8104992:	891a      	ldrh	r2, [r3, #8]
 8104994:	887b      	ldrh	r3, [r7, #2]
 8104996:	4413      	add	r3, r2
 8104998:	b29a      	uxth	r2, r3
 810499a:	69fb      	ldr	r3, [r7, #28]
 810499c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 810499e:	69fb      	ldr	r3, [r7, #28]
 81049a0:	681b      	ldr	r3, [r3, #0]
 81049a2:	61fb      	str	r3, [r7, #28]
 81049a4:	69fb      	ldr	r3, [r7, #28]
 81049a6:	2b00      	cmp	r3, #0
 81049a8:	d1f2      	bne.n	8104990 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 81049aa:	bf00      	nop
 81049ac:	bf00      	nop
 81049ae:	3724      	adds	r7, #36	@ 0x24
 81049b0:	46bd      	mov	sp, r7
 81049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81049b6:	4770      	bx	lr

081049b8 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 81049b8:	b580      	push	{r7, lr}
 81049ba:	b082      	sub	sp, #8
 81049bc:	af00      	add	r7, sp, #0
 81049be:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 81049c0:	6878      	ldr	r0, [r7, #4]
 81049c2:	f00f ff81 	bl	81148c8 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 81049c6:	bf00      	nop
 81049c8:	3708      	adds	r7, #8
 81049ca:	46bd      	mov	sp, r7
 81049cc:	bd80      	pop	{r7, pc}
	...

081049d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81049d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8104a08 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81049d4:	f002 fb82 	bl	81070dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81049d8:	480c      	ldr	r0, [pc, #48]	@ (8104a0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81049da:	490d      	ldr	r1, [pc, #52]	@ (8104a10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81049dc:	4a0d      	ldr	r2, [pc, #52]	@ (8104a14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81049de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81049e0:	e002      	b.n	81049e8 <LoopCopyDataInit>

081049e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81049e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81049e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81049e6:	3304      	adds	r3, #4

081049e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81049e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81049ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81049ec:	d3f9      	bcc.n	81049e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81049ee:	4a0a      	ldr	r2, [pc, #40]	@ (8104a18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81049f0:	4c0a      	ldr	r4, [pc, #40]	@ (8104a1c <LoopFillZerobss+0x22>)
  movs r3, #0
 81049f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 81049f4:	e001      	b.n	81049fa <LoopFillZerobss>

081049f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81049f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81049f8:	3204      	adds	r2, #4

081049fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81049fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81049fc:	d3fb      	bcc.n	81049f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81049fe:	f017 fbaf 	bl	811c160 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8104a02:	f7fb fdf5 	bl	81005f0 <main>
  bx  lr
 8104a06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8104a08:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8104a0c:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8104a10:	10000090 	.word	0x10000090
  ldr r2, =_sidata
 8104a14:	0811fe58 	.word	0x0811fe58
  ldr r2, =_sbss
 8104a18:	10000090 	.word	0x10000090
  ldr r4, =_ebss
 8104a1c:	10011ed4 	.word	0x10011ed4

08104a20 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8104a20:	e7fe      	b.n	8104a20 <ADC3_IRQHandler>

08104a22 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>:
  };

  _GLIBCXX14_CONSTEXPR
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }
 8104a22:	b480      	push	{r7}
 8104a24:	af00      	add	r7, sp, #0
 8104a26:	bf00      	nop
 8104a28:	4618      	mov	r0, r3
 8104a2a:	46bd      	mov	sp, r7
 8104a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a30:	4770      	bx	lr

08104a32 <_ZN9__gnu_cxx5__ops14_Iter_less_valC1ENS0_15_Iter_less_iterE>:
    _Iter_less_val() { }
#endif

    _GLIBCXX20_CONSTEXPR
    explicit
    _Iter_less_val(_Iter_less_iter) { }
 8104a32:	b480      	push	{r7}
 8104a34:	b083      	sub	sp, #12
 8104a36:	af00      	add	r7, sp, #0
 8104a38:	6078      	str	r0, [r7, #4]
 8104a3a:	7039      	strb	r1, [r7, #0]
 8104a3c:	687b      	ldr	r3, [r7, #4]
 8104a3e:	4618      	mov	r0, r3
 8104a40:	370c      	adds	r7, #12
 8104a42:	46bd      	mov	sp, r7
 8104a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a48:	4770      	bx	lr

08104a4a <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>:
  { return _Val_less_iter(); }

  _GLIBCXX20_CONSTEXPR
  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }
 8104a4a:	b480      	push	{r7}
 8104a4c:	b083      	sub	sp, #12
 8104a4e:	af00      	add	r7, sp, #0
 8104a50:	7138      	strb	r0, [r7, #4]
 8104a52:	bf00      	nop
 8104a54:	4618      	mov	r0, r3
 8104a56:	370c      	adds	r7, #12
 8104a58:	46bd      	mov	sp, r7
 8104a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a5e:	4770      	bx	lr

08104a60 <_ZSt4__lgi>:

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 8104a60:	b480      	push	{r7}
 8104a62:	b083      	sub	sp, #12
 8104a64:	af00      	add	r7, sp, #0
 8104a66:	6078      	str	r0, [r7, #4]
 8104a68:	687b      	ldr	r3, [r7, #4]
 8104a6a:	fab3 f383 	clz	r3, r3
 8104a6e:	f1c3 031f 	rsb	r3, r3, #31
 8104a72:	4618      	mov	r0, r3
 8104a74:	370c      	adds	r7, #12
 8104a76:	46bd      	mov	sp, r7
 8104a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a7c:	4770      	bx	lr

08104a7e <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8104a7e:	b580      	push	{r7, lr}
 8104a80:	b082      	sub	sp, #8
 8104a82:	af00      	add	r7, sp, #0
 8104a84:	ed87 0a01 	vstr	s0, [r7, #4]
 8104a88:	ed97 0a01 	vldr	s0, [r7, #4]
 8104a8c:	f016 fff4 	bl	811ba78 <roundf>
 8104a90:	eef0 7a40 	vmov.f32	s15, s0
 8104a94:	eeb0 0a67 	vmov.f32	s0, s15
 8104a98:	3708      	adds	r7, #8
 8104a9a:	46bd      	mov	sp, r7
 8104a9c:	bd80      	pop	{r7, pc}
	...

08104aa0 <_ZNSt14numeric_limitsIsE3minEv>:
    struct numeric_limits<short>
    {
      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;

      static _GLIBCXX_CONSTEXPR short
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 8104aa0:	b480      	push	{r7}
 8104aa2:	af00      	add	r7, sp, #0
 8104aa4:	4b02      	ldr	r3, [pc, #8]	@ (8104ab0 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 8104aa6:	4618      	mov	r0, r3
 8104aa8:	46bd      	mov	sp, r7
 8104aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104aae:	4770      	bx	lr
 8104ab0:	ffff8000 	.word	0xffff8000

08104ab4 <_Z15StartTask_CTempPv>:
constexpr uint16_t MCP9808_I2C_ADDRESS 	= 0x18 << 1;  // MCP9808 address (shift for HAL I2C)
constexpr uint8_t  MCP9808_TEMP_REG    	= 0x05;       // Temperature register


void StartTask_CTemp(void *argument)
{
 8104ab4:	b580      	push	{r7, lr}
 8104ab6:	b08c      	sub	sp, #48	@ 0x30
 8104ab8:	af00      	add	r7, sp, #0
 8104aba:	6078      	str	r0, [r7, #4]
	TemperatureTask TemperatureTaskInstance;
 8104abc:	f107 0314 	add.w	r3, r7, #20
 8104ac0:	4618      	mov	r0, r3
 8104ac2:	f000 f85f 	bl	8104b84 <_ZN15TemperatureTaskC1Ev>

    int periodMs = 2000;
 8104ac6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8104aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t timeout;
    TickType_t period_tick = pdMS_TO_TICKS(periodMs);
 8104acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8104ace:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8104ad2:	fb02 f303 	mul.w	r3, r2, r3
 8104ad6:	4a17      	ldr	r2, [pc, #92]	@ (8104b34 <_Z15StartTask_CTempPv+0x80>)
 8104ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8104adc:	099b      	lsrs	r3, r3, #6
 8104ade:	60bb      	str	r3, [r7, #8]
    vTaskSetTimeOutState(&timeout);
 8104ae0:	f107 030c 	add.w	r3, r7, #12
 8104ae4:	4618      	mov	r0, r3
 8104ae6:	f00a ff27 	bl	810f938 <vTaskSetTimeOutState>

    for (;;)
    {
    	if(xTaskCheckForTimeOut(&timeout, &period_tick) != pdFALSE)
 8104aea:	f107 0208 	add.w	r2, r7, #8
 8104aee:	f107 030c 	add.w	r3, r7, #12
 8104af2:	4611      	mov	r1, r2
 8104af4:	4618      	mov	r0, r3
 8104af6:	f00a ff5d 	bl	810f9b4 <xTaskCheckForTimeOut>
 8104afa:	4603      	mov	r3, r0
 8104afc:	2b00      	cmp	r3, #0
 8104afe:	bf14      	ite	ne
 8104b00:	2301      	movne	r3, #1
 8104b02:	2300      	moveq	r3, #0
 8104b04:	b2db      	uxtb	r3, r3
 8104b06:	2b00      	cmp	r3, #0
 8104b08:	d0ef      	beq.n	8104aea <_Z15StartTask_CTempPv+0x36>
        {
    		vTaskSetTimeOutState(&timeout);
 8104b0a:	f107 030c 	add.w	r3, r7, #12
 8104b0e:	4618      	mov	r0, r3
 8104b10:	f00a ff12 	bl	810f938 <vTaskSetTimeOutState>
            period_tick = pdMS_TO_TICKS(periodMs);
 8104b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8104b16:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8104b1a:	fb02 f303 	mul.w	r3, r2, r3
 8104b1e:	4a05      	ldr	r2, [pc, #20]	@ (8104b34 <_Z15StartTask_CTempPv+0x80>)
 8104b20:	fba2 2303 	umull	r2, r3, r2, r3
 8104b24:	099b      	lsrs	r3, r3, #6
 8104b26:	60bb      	str	r3, [r7, #8]

            /* task */
            TemperatureTaskInstance.process();
 8104b28:	f107 0314 	add.w	r3, r7, #20
 8104b2c:	4618      	mov	r0, r3
 8104b2e:	f000 f845 	bl	8104bbc <_ZN15TemperatureTask7processEv>
    	if(xTaskCheckForTimeOut(&timeout, &period_tick) != pdFALSE)
 8104b32:	e7da      	b.n	8104aea <_Z15StartTask_CTempPv+0x36>
 8104b34:	10624dd3 	.word	0x10624dd3

08104b38 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8104b38:	b580      	push	{r7, lr}
 8104b3a:	b082      	sub	sp, #8
 8104b3c:	af00      	add	r7, sp, #0
 8104b3e:	6078      	str	r0, [r7, #4]
 8104b40:	6878      	ldr	r0, [r7, #4]
 8104b42:	f000 f9d4 	bl	8104eee <_ZNSaIfED1Ev>
 8104b46:	687b      	ldr	r3, [r7, #4]
 8104b48:	4618      	mov	r0, r3
 8104b4a:	3708      	adds	r7, #8
 8104b4c:	46bd      	mov	sp, r7
 8104b4e:	bd80      	pop	{r7, pc}

08104b50 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>:
      _Vector_base() = default;
 8104b50:	b580      	push	{r7, lr}
 8104b52:	b082      	sub	sp, #8
 8104b54:	af00      	add	r7, sp, #0
 8104b56:	6078      	str	r0, [r7, #4]
 8104b58:	687b      	ldr	r3, [r7, #4]
 8104b5a:	4618      	mov	r0, r3
 8104b5c:	f000 f9b7 	bl	8104ece <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>
 8104b60:	687b      	ldr	r3, [r7, #4]
 8104b62:	4618      	mov	r0, r3
 8104b64:	3708      	adds	r7, #8
 8104b66:	46bd      	mov	sp, r7
 8104b68:	bd80      	pop	{r7, pc}

08104b6a <_ZNSt6vectorIfSaIfEEC1Ev>:
      vector() = default;
 8104b6a:	b580      	push	{r7, lr}
 8104b6c:	b082      	sub	sp, #8
 8104b6e:	af00      	add	r7, sp, #0
 8104b70:	6078      	str	r0, [r7, #4]
 8104b72:	687b      	ldr	r3, [r7, #4]
 8104b74:	4618      	mov	r0, r3
 8104b76:	f7ff ffeb 	bl	8104b50 <_ZNSt12_Vector_baseIfSaIfEEC1Ev>
 8104b7a:	687b      	ldr	r3, [r7, #4]
 8104b7c:	4618      	mov	r0, r3
 8104b7e:	3708      	adds	r7, #8
 8104b80:	46bd      	mov	sp, r7
 8104b82:	bd80      	pop	{r7, pc}

08104b84 <_ZN15TemperatureTaskC1Ev>:
        }
    }
}

TemperatureTask::TemperatureTask() : event_bus(EventBus(queueToTemperature, EVENT_CLIENT_THERMOMETER))
 8104b84:	b580      	push	{r7, lr}
 8104b86:	b082      	sub	sp, #8
 8104b88:	af00      	add	r7, sp, #0
 8104b8a:	6078      	str	r0, [r7, #4]
 8104b8c:	687b      	ldr	r3, [r7, #4]
 8104b8e:	4618      	mov	r0, r3
 8104b90:	f7ff ffeb 	bl	8104b6a <_ZNSt6vectorIfSaIfEEC1Ev>
 8104b94:	687b      	ldr	r3, [r7, #4]
 8104b96:	330c      	adds	r3, #12
 8104b98:	4a07      	ldr	r2, [pc, #28]	@ (8104bb8 <_ZN15TemperatureTaskC1Ev+0x34>)
 8104b9a:	6811      	ldr	r1, [r2, #0]
 8104b9c:	2203      	movs	r2, #3
 8104b9e:	4618      	mov	r0, r3
 8104ba0:	f7fc fd2e 	bl	8101600 <_ZN8EventBusC1EP15QueueDefinition12EEventClient>
{
	measurements.reserve(MEASUREMENTS_COUNT);
 8104ba4:	687b      	ldr	r3, [r7, #4]
 8104ba6:	210a      	movs	r1, #10
 8104ba8:	4618      	mov	r0, r3
 8104baa:	f000 f9db 	bl	8104f64 <_ZNSt6vectorIfSaIfEE7reserveEj>
}
 8104bae:	687b      	ldr	r3, [r7, #4]
 8104bb0:	4618      	mov	r0, r3
 8104bb2:	3708      	adds	r7, #8
 8104bb4:	46bd      	mov	sp, r7
 8104bb6:	bd80      	pop	{r7, pc}
 8104bb8:	1000011c 	.word	0x1000011c

08104bbc <_ZN15TemperatureTask7processEv>:

void TemperatureTask::process()
{
 8104bbc:	b5b0      	push	{r4, r5, r7, lr}
 8104bbe:	b08e      	sub	sp, #56	@ 0x38
 8104bc0:	af04      	add	r7, sp, #16
 8104bc2:	6078      	str	r0, [r7, #4]
	uint32_t err = doMeasurement();
 8104bc4:	6878      	ldr	r0, [r7, #4]
 8104bc6:	f000 f8b3 	bl	8104d30 <_ZN15TemperatureTask13doMeasurementEv>
 8104bca:	6278      	str	r0, [r7, #36]	@ 0x24
	if( err != HAL_I2C_ERROR_NONE)
 8104bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104bce:	2b00      	cmp	r3, #0
 8104bd0:	d12f      	bne.n	8104c32 <_ZN15TemperatureTask7processEv+0x76>
	{
		return;
	}
	short int measurement = getMedian();
 8104bd2:	6878      	ldr	r0, [r7, #4]
 8104bd4:	f000 f833 	bl	8104c3e <_ZN15TemperatureTask9getMedianEv>
 8104bd8:	4603      	mov	r3, r0
 8104bda:	847b      	strh	r3, [r7, #34]	@ 0x22
	if(measurement == std::numeric_limits<short int>::min())
 8104bdc:	f7ff ff60 	bl	8104aa0 <_ZNSt14numeric_limitsIsE3minEv>
 8104be0:	4603      	mov	r3, r0
 8104be2:	461a      	mov	r2, r3
 8104be4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8104be8:	4293      	cmp	r3, r2
 8104bea:	bf0c      	ite	eq
 8104bec:	2301      	moveq	r3, #1
 8104bee:	2300      	movne	r3, #0
 8104bf0:	b2db      	uxtb	r3, r3
 8104bf2:	2b00      	cmp	r3, #0
 8104bf4:	d11f      	bne.n	8104c36 <_ZN15TemperatureTask7processEv+0x7a>
	{
		return;
	}
	EEventClient receiver = EVENT_CLIENT_FRONTEND;
 8104bf6:	2300      	movs	r3, #0
 8104bf8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	EEventType event = EVENT_UPDATE_ROOM_TEMPERATURE;
 8104bfc:	f240 1305 	movw	r3, #261	@ 0x105
 8104c00:	83fb      	strh	r3, [r7, #30]
	UMessageData data;
	data.room_temperature = measurement;
 8104c02:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8104c04:	81bb      	strh	r3, [r7, #12]
	event_bus.send(event, data, receiver);
 8104c06:	687b      	ldr	r3, [r7, #4]
 8104c08:	f103 040c 	add.w	r4, r3, #12
 8104c0c:	8bfd      	ldrh	r5, [r7, #30]
 8104c0e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8104c12:	9302      	str	r3, [sp, #8]
 8104c14:	466a      	mov	r2, sp
 8104c16:	f107 0314 	add.w	r3, r7, #20
 8104c1a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8104c1e:	e882 0003 	stmia.w	r2, {r0, r1}
 8104c22:	f107 030c 	add.w	r3, r7, #12
 8104c26:	cb0c      	ldmia	r3, {r2, r3}
 8104c28:	4629      	mov	r1, r5
 8104c2a:	4620      	mov	r0, r4
 8104c2c:	f7fc fd02 	bl	8101634 <_ZN8EventBus4sendE10EEventType12UMessageData12EEventClient>
 8104c30:	e002      	b.n	8104c38 <_ZN15TemperatureTask7processEv+0x7c>
		return;
 8104c32:	bf00      	nop
 8104c34:	e000      	b.n	8104c38 <_ZN15TemperatureTask7processEv+0x7c>
		return;
 8104c36:	bf00      	nop
}
 8104c38:	3728      	adds	r7, #40	@ 0x28
 8104c3a:	46bd      	mov	sp, r7
 8104c3c:	bdb0      	pop	{r4, r5, r7, pc}

08104c3e <_ZN15TemperatureTask9getMedianEv>:

short int TemperatureTask::getMedian()
{
 8104c3e:	b590      	push	{r4, r7, lr}
 8104c40:	ed2d 8b02 	vpush	{d8}
 8104c44:	b089      	sub	sp, #36	@ 0x24
 8104c46:	af00      	add	r7, sp, #0
 8104c48:	6078      	str	r0, [r7, #4]
	short int median = std::numeric_limits<short>::min();
 8104c4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8104c4e:	83fb      	strh	r3, [r7, #30]
	size_t currMesSize = measurements.size();
 8104c50:	687b      	ldr	r3, [r7, #4]
 8104c52:	4618      	mov	r0, r3
 8104c54:	f000 fa06 	bl	8105064 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8104c58:	61b8      	str	r0, [r7, #24]

	if(currMesSize > 0)
 8104c5a:	69bb      	ldr	r3, [r7, #24]
 8104c5c:	2b00      	cmp	r3, #0
 8104c5e:	d05f      	beq.n	8104d20 <_ZN15TemperatureTask9getMedianEv+0xe2>
	{
		std::vector<float> sortedCopy = measurements;
 8104c60:	687a      	ldr	r2, [r7, #4]
 8104c62:	f107 030c 	add.w	r3, r7, #12
 8104c66:	4611      	mov	r1, r2
 8104c68:	4618      	mov	r0, r3
 8104c6a:	f000 fa0b 	bl	8105084 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
		std::sort(sortedCopy.begin(), sortedCopy.end());
 8104c6e:	f107 030c 	add.w	r3, r7, #12
 8104c72:	4618      	mov	r0, r3
 8104c74:	f000 fa43 	bl	81050fe <_ZNSt6vectorIfSaIfEE5beginEv>
 8104c78:	4604      	mov	r4, r0
 8104c7a:	f107 030c 	add.w	r3, r7, #12
 8104c7e:	4618      	mov	r0, r3
 8104c80:	f000 fa4d 	bl	810511e <_ZNSt6vectorIfSaIfEE3endEv>
 8104c84:	4603      	mov	r3, r0
 8104c86:	4619      	mov	r1, r3
 8104c88:	4620      	mov	r0, r4
 8104c8a:	f000 fa59 	bl	8105140 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>

		if(currMesSize % 2 == 0)
 8104c8e:	69bb      	ldr	r3, [r7, #24]
 8104c90:	f003 0301 	and.w	r3, r3, #1
 8104c94:	2b00      	cmp	r3, #0
 8104c96:	d128      	bne.n	8104cea <_ZN15TemperatureTask9getMedianEv+0xac>
		{
			median = static_cast<short int>(std::round((sortedCopy[currMesSize / 2 - 1] + sortedCopy[currMesSize / 2]) / 2));
 8104c98:	69bb      	ldr	r3, [r7, #24]
 8104c9a:	085b      	lsrs	r3, r3, #1
 8104c9c:	1e5a      	subs	r2, r3, #1
 8104c9e:	f107 030c 	add.w	r3, r7, #12
 8104ca2:	4611      	mov	r1, r2
 8104ca4:	4618      	mov	r0, r3
 8104ca6:	f000 fa5b 	bl	8105160 <_ZNSt6vectorIfSaIfEEixEj>
 8104caa:	4603      	mov	r3, r0
 8104cac:	ed93 8a00 	vldr	s16, [r3]
 8104cb0:	69bb      	ldr	r3, [r7, #24]
 8104cb2:	085a      	lsrs	r2, r3, #1
 8104cb4:	f107 030c 	add.w	r3, r7, #12
 8104cb8:	4611      	mov	r1, r2
 8104cba:	4618      	mov	r0, r3
 8104cbc:	f000 fa50 	bl	8105160 <_ZNSt6vectorIfSaIfEEixEj>
 8104cc0:	4603      	mov	r3, r0
 8104cc2:	edd3 7a00 	vldr	s15, [r3]
 8104cc6:	ee78 7a27 	vadd.f32	s15, s16, s15
 8104cca:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8104cce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8104cd2:	eeb0 0a47 	vmov.f32	s0, s14
 8104cd6:	f7ff fed2 	bl	8104a7e <_ZSt5roundf>
 8104cda:	eef0 7a40 	vmov.f32	s15, s0
 8104cde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8104ce2:	ee17 3a90 	vmov	r3, s15
 8104ce6:	83fb      	strh	r3, [r7, #30]
 8104ce8:	e015      	b.n	8104d16 <_ZN15TemperatureTask9getMedianEv+0xd8>
		}
		else
		{
			median = static_cast<short int>(std::round(sortedCopy[currMesSize / 2]));
 8104cea:	69bb      	ldr	r3, [r7, #24]
 8104cec:	085a      	lsrs	r2, r3, #1
 8104cee:	f107 030c 	add.w	r3, r7, #12
 8104cf2:	4611      	mov	r1, r2
 8104cf4:	4618      	mov	r0, r3
 8104cf6:	f000 fa33 	bl	8105160 <_ZNSt6vectorIfSaIfEEixEj>
 8104cfa:	4603      	mov	r3, r0
 8104cfc:	edd3 7a00 	vldr	s15, [r3]
 8104d00:	eeb0 0a67 	vmov.f32	s0, s15
 8104d04:	f7ff febb 	bl	8104a7e <_ZSt5roundf>
 8104d08:	eef0 7a40 	vmov.f32	s15, s0
 8104d0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8104d10:	ee17 3a90 	vmov	r3, s15
 8104d14:	83fb      	strh	r3, [r7, #30]
		}
	}
 8104d16:	f107 030c 	add.w	r3, r7, #12
 8104d1a:	4618      	mov	r0, r3
 8104d1c:	f000 f8bc 	bl	8104e98 <_ZNSt6vectorIfSaIfEED1Ev>
	return median;
 8104d20:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8104d24:	4618      	mov	r0, r3
 8104d26:	3724      	adds	r7, #36	@ 0x24
 8104d28:	46bd      	mov	sp, r7
 8104d2a:	ecbd 8b02 	vpop	{d8}
 8104d2e:	bd90      	pop	{r4, r7, pc}

08104d30 <_ZN15TemperatureTask13doMeasurementEv>:

uint32_t TemperatureTask::doMeasurement()
{
 8104d30:	b5b0      	push	{r4, r5, r7, lr}
 8104d32:	b090      	sub	sp, #64	@ 0x40
 8104d34:	af04      	add	r7, sp, #16
 8104d36:	6078      	str	r0, [r7, #4]
	uint8_t data[2];

    if (HAL_I2C_Mem_Read(&hi2c4, MCP9808_I2C_ADDRESS, MCP9808_TEMP_REG, I2C_MEMADD_SIZE_8BIT, data, 2, 1000u) != HAL_OK)
 8104d38:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8104d3c:	9302      	str	r3, [sp, #8]
 8104d3e:	2302      	movs	r3, #2
 8104d40:	9301      	str	r3, [sp, #4]
 8104d42:	f107 030c 	add.w	r3, r7, #12
 8104d46:	9300      	str	r3, [sp, #0]
 8104d48:	2301      	movs	r3, #1
 8104d4a:	2205      	movs	r2, #5
 8104d4c:	2130      	movs	r1, #48	@ 0x30
 8104d4e:	4851      	ldr	r0, [pc, #324]	@ (8104e94 <_ZN15TemperatureTask13doMeasurementEv+0x164>)
 8104d50:	f004 fccc 	bl	81096ec <HAL_I2C_Mem_Read>
 8104d54:	4603      	mov	r3, r0
 8104d56:	2b00      	cmp	r3, #0
 8104d58:	bf14      	ite	ne
 8104d5a:	2301      	movne	r3, #1
 8104d5c:	2300      	moveq	r3, #0
 8104d5e:	b2db      	uxtb	r3, r3
 8104d60:	2b00      	cmp	r3, #0
 8104d62:	d00b      	beq.n	8104d7c <_ZN15TemperatureTask13doMeasurementEv+0x4c>
    {
    	uint32_t err = HAL_I2C_GetError(&hi2c4);
 8104d64:	484b      	ldr	r0, [pc, #300]	@ (8104e94 <_ZN15TemperatureTask13doMeasurementEv+0x164>)
 8104d66:	f004 fddb 	bl	8109920 <HAL_I2C_GetError>
 8104d6a:	61b8      	str	r0, [r7, #24]
        // Error handling - restart I2C4 interface
    	HAL_I2C_DeInit(&hi2c4);
 8104d6c:	4849      	ldr	r0, [pc, #292]	@ (8104e94 <_ZN15TemperatureTask13doMeasurementEv+0x164>)
 8104d6e:	f004 fc8e 	bl	810968e <HAL_I2C_DeInit>
    	HAL_I2C_Init(&hi2c4);
 8104d72:	4848      	ldr	r0, [pc, #288]	@ (8104e94 <_ZN15TemperatureTask13doMeasurementEv+0x164>)
 8104d74:	f004 fbf0 	bl	8109558 <HAL_I2C_Init>
    	//do not block other tasks, try again later.
    	return err;
 8104d78:	69bb      	ldr	r3, [r7, #24]
 8104d7a:	e086      	b.n	8104e8a <_ZN15TemperatureTask13doMeasurementEv+0x15a>
    }

	uint16_t dataLong;
	float tmpVal = 0;
 8104d7c:	f04f 0300 	mov.w	r3, #0
 8104d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float tmpValDec;

	dataLong = ((data[0] << 8u) | data[1]);
 8104d82:	7b3b      	ldrb	r3, [r7, #12]
 8104d84:	021b      	lsls	r3, r3, #8
 8104d86:	b21a      	sxth	r2, r3
 8104d88:	7b7b      	ldrb	r3, [r7, #13]
 8104d8a:	b21b      	sxth	r3, r3
 8104d8c:	4313      	orrs	r3, r2
 8104d8e:	b21b      	sxth	r3, r3
 8104d90:	847b      	strh	r3, [r7, #34]	@ 0x22
	/* Extract the integer part from the fixed point value */
	tmpVal = ((dataLong & 0x0FFF) >> 4);
 8104d92:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8104d94:	091b      	lsrs	r3, r3, #4
 8104d96:	b29b      	uxth	r3, r3
 8104d98:	b2db      	uxtb	r3, r3
 8104d9a:	ee07 3a90 	vmov	s15, r3
 8104d9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8104da2:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	/* Extract decimal part */
	tmpValDec = 0.0625;
 8104da6:	f04f 5376 	mov.w	r3, #1031798784	@ 0x3d800000
 8104daa:	62bb      	str	r3, [r7, #40]	@ 0x28
	for (int i=0; i < 4; i++)
 8104dac:	2300      	movs	r3, #0
 8104dae:	627b      	str	r3, [r7, #36]	@ 0x24
 8104db0:	e01c      	b.n	8104dec <_ZN15TemperatureTask13doMeasurementEv+0xbc>
	{
		tmpVal += ((dataLong >> i) & 0x0001) * tmpValDec;
 8104db2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8104db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104db6:	fa42 f303 	asr.w	r3, r2, r3
 8104dba:	f003 0301 	and.w	r3, r3, #1
 8104dbe:	ee07 3a90 	vmov	s15, r3
 8104dc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8104dc6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8104dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104dce:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8104dd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8104dd6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		tmpValDec *= 2u;
 8104dda:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8104dde:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8104de2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	for (int i=0; i < 4; i++)
 8104de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104de8:	3301      	adds	r3, #1
 8104dea:	627b      	str	r3, [r7, #36]	@ 0x24
 8104dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104dee:	2b03      	cmp	r3, #3
 8104df0:	dddf      	ble.n	8104db2 <_ZN15TemperatureTask13doMeasurementEv+0x82>
	}

	short int measurement = static_cast<short int>(tmpVal);
 8104df2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8104df6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8104dfa:	ee17 3a90 	vmov	r3, s15
 8104dfe:	843b      	strh	r3, [r7, #32]

	size_t currMesSize = measurements.size();
 8104e00:	687b      	ldr	r3, [r7, #4]
 8104e02:	4618      	mov	r0, r3
 8104e04:	f000 f92e 	bl	8105064 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8104e08:	61f8      	str	r0, [r7, #28]

	if(currMesSize < MEASUREMENTS_COUNT)
 8104e0a:	69fb      	ldr	r3, [r7, #28]
 8104e0c:	2b09      	cmp	r3, #9
 8104e0e:	d80f      	bhi.n	8104e30 <_ZN15TemperatureTask13doMeasurementEv+0x100>
	{
		measurements.push_back(measurement);
 8104e10:	687b      	ldr	r3, [r7, #4]
 8104e12:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8104e16:	ee07 2a90 	vmov	s15, r2
 8104e1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8104e1e:	edc7 7a04 	vstr	s15, [r7, #16]
 8104e22:	f107 0210 	add.w	r2, r7, #16
 8104e26:	4611      	mov	r1, r2
 8104e28:	4618      	mov	r0, r3
 8104e2a:	f000 f9a9 	bl	8105180 <_ZNSt6vectorIfSaIfEE9push_backEOf>
 8104e2e:	e02b      	b.n	8104e88 <_ZN15TemperatureTask13doMeasurementEv+0x158>
	}
	else
	{
		std::rotate(measurements.begin(), measurements.begin() + 1, measurements.end());
 8104e30:	687b      	ldr	r3, [r7, #4]
 8104e32:	4618      	mov	r0, r3
 8104e34:	f000 f963 	bl	81050fe <_ZNSt6vectorIfSaIfEE5beginEv>
 8104e38:	4604      	mov	r4, r0
 8104e3a:	687b      	ldr	r3, [r7, #4]
 8104e3c:	4618      	mov	r0, r3
 8104e3e:	f000 f95e 	bl	81050fe <_ZNSt6vectorIfSaIfEE5beginEv>
 8104e42:	4603      	mov	r3, r0
 8104e44:	617b      	str	r3, [r7, #20]
 8104e46:	f107 0314 	add.w	r3, r7, #20
 8104e4a:	2101      	movs	r1, #1
 8104e4c:	4618      	mov	r0, r3
 8104e4e:	f000 f9a8 	bl	81051a2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8104e52:	4605      	mov	r5, r0
 8104e54:	687b      	ldr	r3, [r7, #4]
 8104e56:	4618      	mov	r0, r3
 8104e58:	f000 f961 	bl	810511e <_ZNSt6vectorIfSaIfEE3endEv>
 8104e5c:	4603      	mov	r3, r0
 8104e5e:	461a      	mov	r2, r3
 8104e60:	4629      	mov	r1, r5
 8104e62:	4620      	mov	r0, r4
 8104e64:	f000 f9b5 	bl	81051d2 <_ZNSt3_V26rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_>
		measurements[currMesSize - 1] = measurement;
 8104e68:	687a      	ldr	r2, [r7, #4]
 8104e6a:	69fb      	ldr	r3, [r7, #28]
 8104e6c:	3b01      	subs	r3, #1
 8104e6e:	4619      	mov	r1, r3
 8104e70:	4610      	mov	r0, r2
 8104e72:	f000 f975 	bl	8105160 <_ZNSt6vectorIfSaIfEEixEj>
 8104e76:	4603      	mov	r3, r0
 8104e78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8104e7c:	ee07 2a90 	vmov	s15, r2
 8104e80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8104e84:	edc3 7a00 	vstr	s15, [r3]
	}
	return HAL_I2C_ERROR_NONE;
 8104e88:	2300      	movs	r3, #0
}
 8104e8a:	4618      	mov	r0, r3
 8104e8c:	3730      	adds	r7, #48	@ 0x30
 8104e8e:	46bd      	mov	sp, r7
 8104e90:	bdb0      	pop	{r4, r5, r7, pc}
 8104e92:	bf00      	nop
 8104e94:	100000ac 	.word	0x100000ac

08104e98 <_ZNSt6vectorIfSaIfEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8104e98:	b5b0      	push	{r4, r5, r7, lr}
 8104e9a:	b082      	sub	sp, #8
 8104e9c:	af00      	add	r7, sp, #0
 8104e9e:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8104ea0:	687b      	ldr	r3, [r7, #4]
 8104ea2:	681c      	ldr	r4, [r3, #0]
 8104ea4:	687b      	ldr	r3, [r7, #4]
 8104ea6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8104ea8:	687b      	ldr	r3, [r7, #4]
 8104eaa:	4618      	mov	r0, r3
 8104eac:	f000 f9a7 	bl	81051fe <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8104eb0:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8104eb2:	461a      	mov	r2, r3
 8104eb4:	4629      	mov	r1, r5
 8104eb6:	4620      	mov	r0, r4
 8104eb8:	f000 f9ac 	bl	8105214 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
      }
 8104ebc:	687b      	ldr	r3, [r7, #4]
 8104ebe:	4618      	mov	r0, r3
 8104ec0:	f000 f821 	bl	8104f06 <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 8104ec4:	687b      	ldr	r3, [r7, #4]
 8104ec6:	4618      	mov	r0, r3
 8104ec8:	3708      	adds	r7, #8
 8104eca:	46bd      	mov	sp, r7
 8104ecc:	bdb0      	pop	{r4, r5, r7, pc}

08104ece <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8104ece:	b580      	push	{r7, lr}
 8104ed0:	b082      	sub	sp, #8
 8104ed2:	af00      	add	r7, sp, #0
 8104ed4:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8104ed6:	6878      	ldr	r0, [r7, #4]
 8104ed8:	f000 f9aa 	bl	8105230 <_ZNSaIfEC1Ev>
 8104edc:	687b      	ldr	r3, [r7, #4]
 8104ede:	4618      	mov	r0, r3
 8104ee0:	f000 f9b2 	bl	8105248 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 8104ee4:	687b      	ldr	r3, [r7, #4]
 8104ee6:	4618      	mov	r0, r3
 8104ee8:	3708      	adds	r7, #8
 8104eea:	46bd      	mov	sp, r7
 8104eec:	bd80      	pop	{r7, pc}

08104eee <_ZNSaIfED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8104eee:	b580      	push	{r7, lr}
 8104ef0:	b082      	sub	sp, #8
 8104ef2:	af00      	add	r7, sp, #0
 8104ef4:	6078      	str	r0, [r7, #4]
 8104ef6:	6878      	ldr	r0, [r7, #4]
 8104ef8:	f000 f9ba 	bl	8105270 <_ZNSt15__new_allocatorIfED1Ev>
 8104efc:	687b      	ldr	r3, [r7, #4]
 8104efe:	4618      	mov	r0, r3
 8104f00:	3708      	adds	r7, #8
 8104f02:	46bd      	mov	sp, r7
 8104f04:	bd80      	pop	{r7, pc}

08104f06 <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8104f06:	b580      	push	{r7, lr}
 8104f08:	b082      	sub	sp, #8
 8104f0a:	af00      	add	r7, sp, #0
 8104f0c:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8104f0e:	687b      	ldr	r3, [r7, #4]
 8104f10:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8104f12:	687b      	ldr	r3, [r7, #4]
 8104f14:	689a      	ldr	r2, [r3, #8]
 8104f16:	687b      	ldr	r3, [r7, #4]
 8104f18:	681b      	ldr	r3, [r3, #0]
 8104f1a:	1ad3      	subs	r3, r2, r3
 8104f1c:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8104f1e:	461a      	mov	r2, r3
 8104f20:	6878      	ldr	r0, [r7, #4]
 8104f22:	f000 f9b0 	bl	8105286 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      }
 8104f26:	687b      	ldr	r3, [r7, #4]
 8104f28:	4618      	mov	r0, r3
 8104f2a:	f7ff fe05 	bl	8104b38 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
 8104f2e:	687b      	ldr	r3, [r7, #4]
 8104f30:	4618      	mov	r0, r3
 8104f32:	3708      	adds	r7, #8
 8104f34:	46bd      	mov	sp, r7
 8104f36:	bd80      	pop	{r7, pc}

08104f38 <_ZNSt6vectorIfSaIfEE15_S_use_relocateEv>:
      _S_use_relocate()
 8104f38:	b580      	push	{r7, lr}
 8104f3a:	b082      	sub	sp, #8
 8104f3c:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8104f3e:	4618      	mov	r0, r3
 8104f40:	f000 f805 	bl	8104f4e <_ZNSt6vectorIfSaIfEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8104f44:	4603      	mov	r3, r0
      }
 8104f46:	4618      	mov	r0, r3
 8104f48:	3708      	adds	r7, #8
 8104f4a:	46bd      	mov	sp, r7
 8104f4c:	bd80      	pop	{r7, pc}

08104f4e <_ZNSt6vectorIfSaIfEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8104f4e:	b480      	push	{r7}
 8104f50:	b083      	sub	sp, #12
 8104f52:	af00      	add	r7, sp, #0
 8104f54:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8104f56:	2301      	movs	r3, #1
      }
 8104f58:	4618      	mov	r0, r3
 8104f5a:	370c      	adds	r7, #12
 8104f5c:	46bd      	mov	sp, r7
 8104f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f62:	4770      	bx	lr

08104f64 <_ZNSt6vectorIfSaIfEE7reserveEj>:
    vector<_Tp, _Alloc>::
 8104f64:	b5b0      	push	{r4, r5, r7, lr}
 8104f66:	b084      	sub	sp, #16
 8104f68:	af00      	add	r7, sp, #0
 8104f6a:	6078      	str	r0, [r7, #4]
 8104f6c:	6039      	str	r1, [r7, #0]
      if (__n > this->max_size())
 8104f6e:	6878      	ldr	r0, [r7, #4]
 8104f70:	f000 f99c 	bl	81052ac <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8104f74:	4602      	mov	r2, r0
 8104f76:	683b      	ldr	r3, [r7, #0]
 8104f78:	4293      	cmp	r3, r2
 8104f7a:	bf8c      	ite	hi
 8104f7c:	2301      	movhi	r3, #1
 8104f7e:	2300      	movls	r3, #0
 8104f80:	b2db      	uxtb	r3, r3
 8104f82:	2b00      	cmp	r3, #0
 8104f84:	d002      	beq.n	8104f8c <_ZNSt6vectorIfSaIfEE7reserveEj+0x28>
	__throw_length_error(__N("vector::reserve"));
 8104f86:	4836      	ldr	r0, [pc, #216]	@ (8105060 <_ZNSt6vectorIfSaIfEE7reserveEj+0xfc>)
 8104f88:	f016 fd66 	bl	811ba58 <_ZSt20__throw_length_errorPKc>
      if (this->capacity() < __n)
 8104f8c:	6878      	ldr	r0, [r7, #4]
 8104f8e:	f000 f99e 	bl	81052ce <_ZNKSt6vectorIfSaIfEE8capacityEv>
 8104f92:	4602      	mov	r2, r0
 8104f94:	683b      	ldr	r3, [r7, #0]
 8104f96:	4293      	cmp	r3, r2
 8104f98:	bf8c      	ite	hi
 8104f9a:	2301      	movhi	r3, #1
 8104f9c:	2300      	movls	r3, #0
 8104f9e:	b2db      	uxtb	r3, r3
 8104fa0:	2b00      	cmp	r3, #0
 8104fa2:	d059      	beq.n	8105058 <_ZNSt6vectorIfSaIfEE7reserveEj+0xf4>
	  const size_type __old_size = size();
 8104fa4:	6878      	ldr	r0, [r7, #4]
 8104fa6:	f000 f85d 	bl	8105064 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8104faa:	60b8      	str	r0, [r7, #8]
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8104fac:	f7ff ffc4 	bl	8104f38 <_ZNSt6vectorIfSaIfEE15_S_use_relocateEv>
 8104fb0:	4603      	mov	r3, r0
 8104fb2:	2b00      	cmp	r3, #0
 8104fb4:	d014      	beq.n	8104fe0 <_ZNSt6vectorIfSaIfEE7reserveEj+0x7c>
	      __tmp = this->_M_allocate(__n);
 8104fb6:	687b      	ldr	r3, [r7, #4]
 8104fb8:	6839      	ldr	r1, [r7, #0]
 8104fba:	4618      	mov	r0, r3
 8104fbc:	f000 f997 	bl	81052ee <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8104fc0:	60f8      	str	r0, [r7, #12]
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 8104fc2:	687b      	ldr	r3, [r7, #4]
 8104fc4:	681c      	ldr	r4, [r3, #0]
 8104fc6:	687b      	ldr	r3, [r7, #4]
 8104fc8:	685d      	ldr	r5, [r3, #4]
			  __tmp, _M_get_Tp_allocator());
 8104fca:	687b      	ldr	r3, [r7, #4]
 8104fcc:	4618      	mov	r0, r3
 8104fce:	f000 f916 	bl	81051fe <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8104fd2:	4603      	mov	r3, r0
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 8104fd4:	68fa      	ldr	r2, [r7, #12]
 8104fd6:	4629      	mov	r1, r5
 8104fd8:	4620      	mov	r0, r4
 8104fda:	f000 f99c 	bl	8105316 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
 8104fde:	e01f      	b.n	8105020 <_ZNSt6vectorIfSaIfEE7reserveEj+0xbc>
	      __tmp = _M_allocate_and_copy(__n,
 8104fe0:	687b      	ldr	r3, [r7, #4]
 8104fe2:	681b      	ldr	r3, [r3, #0]
 8104fe4:	4618      	mov	r0, r3
 8104fe6:	f000 f9aa 	bl	810533e <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 8104fea:	4604      	mov	r4, r0
 8104fec:	687b      	ldr	r3, [r7, #4]
 8104fee:	685b      	ldr	r3, [r3, #4]
 8104ff0:	4618      	mov	r0, r3
 8104ff2:	f000 f9a4 	bl	810533e <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 8104ff6:	4603      	mov	r3, r0
 8104ff8:	4622      	mov	r2, r4
 8104ffa:	6839      	ldr	r1, [r7, #0]
 8104ffc:	6878      	ldr	r0, [r7, #4]
 8104ffe:	f000 f9ad 	bl	810535c <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyISt13move_iteratorIPfEEES4_jT_S6_>
 8105002:	60f8      	str	r0, [r7, #12]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8105004:	687b      	ldr	r3, [r7, #4]
 8105006:	681c      	ldr	r4, [r3, #0]
 8105008:	687b      	ldr	r3, [r7, #4]
 810500a:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 810500c:	687b      	ldr	r3, [r7, #4]
 810500e:	4618      	mov	r0, r3
 8105010:	f000 f8f5 	bl	81051fe <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8105014:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8105016:	461a      	mov	r2, r3
 8105018:	4629      	mov	r1, r5
 810501a:	4620      	mov	r0, r4
 810501c:	f000 f8fa 	bl	8105214 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	  _M_deallocate(this->_M_impl._M_start,
 8105020:	6878      	ldr	r0, [r7, #4]
 8105022:	687b      	ldr	r3, [r7, #4]
 8105024:	6819      	ldr	r1, [r3, #0]
			this->_M_impl._M_end_of_storage
 8105026:	687b      	ldr	r3, [r7, #4]
 8105028:	689a      	ldr	r2, [r3, #8]
			- this->_M_impl._M_start);
 810502a:	687b      	ldr	r3, [r7, #4]
 810502c:	681b      	ldr	r3, [r3, #0]
 810502e:	1ad3      	subs	r3, r2, r3
 8105030:	109b      	asrs	r3, r3, #2
	  _M_deallocate(this->_M_impl._M_start,
 8105032:	461a      	mov	r2, r3
 8105034:	f000 f927 	bl	8105286 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
	  this->_M_impl._M_start = __tmp;
 8105038:	687b      	ldr	r3, [r7, #4]
 810503a:	68fa      	ldr	r2, [r7, #12]
 810503c:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_finish = __tmp + __old_size;
 810503e:	68bb      	ldr	r3, [r7, #8]
 8105040:	009b      	lsls	r3, r3, #2
 8105042:	68fa      	ldr	r2, [r7, #12]
 8105044:	441a      	add	r2, r3
 8105046:	687b      	ldr	r3, [r7, #4]
 8105048:	605a      	str	r2, [r3, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 810504a:	687b      	ldr	r3, [r7, #4]
 810504c:	681a      	ldr	r2, [r3, #0]
 810504e:	683b      	ldr	r3, [r7, #0]
 8105050:	009b      	lsls	r3, r3, #2
 8105052:	441a      	add	r2, r3
 8105054:	687b      	ldr	r3, [r7, #4]
 8105056:	609a      	str	r2, [r3, #8]
    }
 8105058:	bf00      	nop
 810505a:	3710      	adds	r7, #16
 810505c:	46bd      	mov	sp, r7
 810505e:	bdb0      	pop	{r4, r5, r7, pc}
 8105060:	0811cd14 	.word	0x0811cd14

08105064 <_ZNKSt6vectorIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8105064:	b480      	push	{r7}
 8105066:	b083      	sub	sp, #12
 8105068:	af00      	add	r7, sp, #0
 810506a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 810506c:	687b      	ldr	r3, [r7, #4]
 810506e:	685a      	ldr	r2, [r3, #4]
 8105070:	687b      	ldr	r3, [r7, #4]
 8105072:	681b      	ldr	r3, [r3, #0]
 8105074:	1ad3      	subs	r3, r2, r3
 8105076:	109b      	asrs	r3, r3, #2
 8105078:	4618      	mov	r0, r3
 810507a:	370c      	adds	r7, #12
 810507c:	46bd      	mov	sp, r7
 810507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105082:	4770      	bx	lr

08105084 <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
 8105084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8105086:	b085      	sub	sp, #20
 8105088:	af00      	add	r7, sp, #0
 810508a:	6078      	str	r0, [r7, #4]
 810508c:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 810508e:	687c      	ldr	r4, [r7, #4]
 8105090:	6838      	ldr	r0, [r7, #0]
 8105092:	f7ff ffe7 	bl	8105064 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8105096:	4605      	mov	r5, r0
 8105098:	683b      	ldr	r3, [r7, #0]
 810509a:	4618      	mov	r0, r3
 810509c:	f000 f97a 	bl	8105394 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 81050a0:	4602      	mov	r2, r0
 81050a2:	f107 030c 	add.w	r3, r7, #12
 81050a6:	4611      	mov	r1, r2
 81050a8:	4618      	mov	r0, r3
 81050aa:	f000 f97e 	bl	81053aa <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>
 81050ae:	f107 030c 	add.w	r3, r7, #12
 81050b2:	461a      	mov	r2, r3
 81050b4:	4629      	mov	r1, r5
 81050b6:	4620      	mov	r0, r4
 81050b8:	f000 f985 	bl	81053c6 <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>
 81050bc:	f107 030c 	add.w	r3, r7, #12
 81050c0:	4618      	mov	r0, r3
 81050c2:	f7ff ff14 	bl	8104eee <_ZNSaIfED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 81050c6:	6838      	ldr	r0, [r7, #0]
 81050c8:	f000 f991 	bl	81053ee <_ZNKSt6vectorIfSaIfEE5beginEv>
 81050cc:	4605      	mov	r5, r0
 81050ce:	6838      	ldr	r0, [r7, #0]
 81050d0:	f000 f99d 	bl	810540e <_ZNKSt6vectorIfSaIfEE3endEv>
 81050d4:	4606      	mov	r6, r0
 81050d6:	687b      	ldr	r3, [r7, #4]
 81050d8:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 81050da:	687b      	ldr	r3, [r7, #4]
 81050dc:	4618      	mov	r0, r3
 81050de:	f000 f88e 	bl	81051fe <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 81050e2:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 81050e4:	4622      	mov	r2, r4
 81050e6:	4631      	mov	r1, r6
 81050e8:	4628      	mov	r0, r5
 81050ea:	f000 f9a1 	bl	8105430 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
 81050ee:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 81050f0:	687b      	ldr	r3, [r7, #4]
 81050f2:	605a      	str	r2, [r3, #4]
      }
 81050f4:	687b      	ldr	r3, [r7, #4]
 81050f6:	4618      	mov	r0, r3
 81050f8:	3714      	adds	r7, #20
 81050fa:	46bd      	mov	sp, r7
 81050fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

081050fe <_ZNSt6vectorIfSaIfEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 81050fe:	b580      	push	{r7, lr}
 8105100:	b084      	sub	sp, #16
 8105102:	af00      	add	r7, sp, #0
 8105104:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8105106:	687a      	ldr	r2, [r7, #4]
 8105108:	f107 030c 	add.w	r3, r7, #12
 810510c:	4611      	mov	r1, r2
 810510e:	4618      	mov	r0, r3
 8105110:	f000 f99f 	bl	8105452 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 8105114:	68fb      	ldr	r3, [r7, #12]
 8105116:	4618      	mov	r0, r3
 8105118:	3710      	adds	r7, #16
 810511a:	46bd      	mov	sp, r7
 810511c:	bd80      	pop	{r7, pc}

0810511e <_ZNSt6vectorIfSaIfEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 810511e:	b580      	push	{r7, lr}
 8105120:	b084      	sub	sp, #16
 8105122:	af00      	add	r7, sp, #0
 8105124:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8105126:	687b      	ldr	r3, [r7, #4]
 8105128:	1d1a      	adds	r2, r3, #4
 810512a:	f107 030c 	add.w	r3, r7, #12
 810512e:	4611      	mov	r1, r2
 8105130:	4618      	mov	r0, r3
 8105132:	f000 f98e 	bl	8105452 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 8105136:	68fb      	ldr	r3, [r7, #12]
 8105138:	4618      	mov	r0, r3
 810513a:	3710      	adds	r7, #16
 810513c:	46bd      	mov	sp, r7
 810513e:	bd80      	pop	{r7, pc}

08105140 <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEvT_S7_>:
   *  @p stable_sort() if this is needed.
  */
  template<typename _RandomAccessIterator>
    _GLIBCXX20_CONSTEXPR
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
 8105140:	b590      	push	{r4, r7, lr}
 8105142:	b083      	sub	sp, #12
 8105144:	af00      	add	r7, sp, #0
 8105146:	6078      	str	r0, [r7, #4]
 8105148:	6039      	str	r1, [r7, #0]
      __glibcxx_function_requires(_LessThanComparableConcept<
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive(__first, __last);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
 810514a:	f7ff fc6a 	bl	8104a22 <_ZN9__gnu_cxx5__ops16__iter_less_iterEv>
 810514e:	4622      	mov	r2, r4
 8105150:	6839      	ldr	r1, [r7, #0]
 8105152:	6878      	ldr	r0, [r7, #4]
 8105154:	f000 f98d 	bl	8105472 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 8105158:	bf00      	nop
 810515a:	370c      	adds	r7, #12
 810515c:	46bd      	mov	sp, r7
 810515e:	bd90      	pop	{r4, r7, pc}

08105160 <_ZNSt6vectorIfSaIfEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8105160:	b480      	push	{r7}
 8105162:	b083      	sub	sp, #12
 8105164:	af00      	add	r7, sp, #0
 8105166:	6078      	str	r0, [r7, #4]
 8105168:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 810516a:	687b      	ldr	r3, [r7, #4]
 810516c:	681a      	ldr	r2, [r3, #0]
 810516e:	683b      	ldr	r3, [r7, #0]
 8105170:	009b      	lsls	r3, r3, #2
 8105172:	4413      	add	r3, r2
      }
 8105174:	4618      	mov	r0, r3
 8105176:	370c      	adds	r7, #12
 8105178:	46bd      	mov	sp, r7
 810517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810517e:	4770      	bx	lr

08105180 <_ZNSt6vectorIfSaIfEE9push_backEOf>:
      push_back(value_type&& __x)
 8105180:	b580      	push	{r7, lr}
 8105182:	b082      	sub	sp, #8
 8105184:	af00      	add	r7, sp, #0
 8105186:	6078      	str	r0, [r7, #4]
 8105188:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 810518a:	6838      	ldr	r0, [r7, #0]
 810518c:	f000 f99e 	bl	81054cc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8105190:	4603      	mov	r3, r0
 8105192:	4619      	mov	r1, r3
 8105194:	6878      	ldr	r0, [r7, #4]
 8105196:	f000 f9a4 	bl	81054e2 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_>
 810519a:	bf00      	nop
 810519c:	3708      	adds	r7, #8
 810519e:	46bd      	mov	sp, r7
 81051a0:	bd80      	pop	{r7, pc}

081051a2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 81051a2:	b580      	push	{r7, lr}
 81051a4:	b084      	sub	sp, #16
 81051a6:	af00      	add	r7, sp, #0
 81051a8:	6078      	str	r0, [r7, #4]
 81051aa:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 81051ac:	687b      	ldr	r3, [r7, #4]
 81051ae:	681a      	ldr	r2, [r3, #0]
 81051b0:	683b      	ldr	r3, [r7, #0]
 81051b2:	009b      	lsls	r3, r3, #2
 81051b4:	4413      	add	r3, r2
 81051b6:	60fb      	str	r3, [r7, #12]
 81051b8:	f107 020c 	add.w	r2, r7, #12
 81051bc:	f107 0308 	add.w	r3, r7, #8
 81051c0:	4611      	mov	r1, r2
 81051c2:	4618      	mov	r0, r3
 81051c4:	f000 f945 	bl	8105452 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 81051c8:	68bb      	ldr	r3, [r7, #8]
 81051ca:	4618      	mov	r0, r3
 81051cc:	3710      	adds	r7, #16
 81051ce:	46bd      	mov	sp, r7
 81051d0:	bd80      	pop	{r7, pc}

081051d2 <_ZNSt3_V26rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_>:
    rotate(_ForwardIterator __first, _ForwardIterator __middle,
 81051d2:	b590      	push	{r4, r7, lr}
 81051d4:	b085      	sub	sp, #20
 81051d6:	af00      	add	r7, sp, #0
 81051d8:	60f8      	str	r0, [r7, #12]
 81051da:	60b9      	str	r1, [r7, #8]
 81051dc:	607a      	str	r2, [r7, #4]
			   std::__iterator_category(__first));
 81051de:	f107 030c 	add.w	r3, r7, #12
 81051e2:	4618      	mov	r0, r3
 81051e4:	f000 f9ab 	bl	810553e <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>
      return std::__rotate(__first, __middle, __last,
 81051e8:	4623      	mov	r3, r4
 81051ea:	687a      	ldr	r2, [r7, #4]
 81051ec:	68b9      	ldr	r1, [r7, #8]
 81051ee:	68f8      	ldr	r0, [r7, #12]
 81051f0:	f000 f9b0 	bl	8105554 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag>
 81051f4:	4603      	mov	r3, r0
    }
 81051f6:	4618      	mov	r0, r3
 81051f8:	3714      	adds	r7, #20
 81051fa:	46bd      	mov	sp, r7
 81051fc:	bd90      	pop	{r4, r7, pc}

081051fe <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 81051fe:	b480      	push	{r7}
 8105200:	b083      	sub	sp, #12
 8105202:	af00      	add	r7, sp, #0
 8105204:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8105206:	687b      	ldr	r3, [r7, #4]
 8105208:	4618      	mov	r0, r3
 810520a:	370c      	adds	r7, #12
 810520c:	46bd      	mov	sp, r7
 810520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105212:	4770      	bx	lr

08105214 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8105214:	b580      	push	{r7, lr}
 8105216:	b084      	sub	sp, #16
 8105218:	af00      	add	r7, sp, #0
 810521a:	60f8      	str	r0, [r7, #12]
 810521c:	60b9      	str	r1, [r7, #8]
 810521e:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8105220:	68b9      	ldr	r1, [r7, #8]
 8105222:	68f8      	ldr	r0, [r7, #12]
 8105224:	f000 fb07 	bl	8105836 <_ZSt8_DestroyIPfEvT_S1_>
    }
 8105228:	bf00      	nop
 810522a:	3710      	adds	r7, #16
 810522c:	46bd      	mov	sp, r7
 810522e:	bd80      	pop	{r7, pc}

08105230 <_ZNSaIfEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8105230:	b580      	push	{r7, lr}
 8105232:	b082      	sub	sp, #8
 8105234:	af00      	add	r7, sp, #0
 8105236:	6078      	str	r0, [r7, #4]
 8105238:	6878      	ldr	r0, [r7, #4]
 810523a:	f000 fb09 	bl	8105850 <_ZNSt15__new_allocatorIfEC1Ev>
 810523e:	687b      	ldr	r3, [r7, #4]
 8105240:	4618      	mov	r0, r3
 8105242:	3708      	adds	r7, #8
 8105244:	46bd      	mov	sp, r7
 8105246:	bd80      	pop	{r7, pc}

08105248 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8105248:	b480      	push	{r7}
 810524a:	b083      	sub	sp, #12
 810524c:	af00      	add	r7, sp, #0
 810524e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8105250:	687b      	ldr	r3, [r7, #4]
 8105252:	2200      	movs	r2, #0
 8105254:	601a      	str	r2, [r3, #0]
 8105256:	687b      	ldr	r3, [r7, #4]
 8105258:	2200      	movs	r2, #0
 810525a:	605a      	str	r2, [r3, #4]
 810525c:	687b      	ldr	r3, [r7, #4]
 810525e:	2200      	movs	r2, #0
 8105260:	609a      	str	r2, [r3, #8]
	{ }
 8105262:	687b      	ldr	r3, [r7, #4]
 8105264:	4618      	mov	r0, r3
 8105266:	370c      	adds	r7, #12
 8105268:	46bd      	mov	sp, r7
 810526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810526e:	4770      	bx	lr

08105270 <_ZNSt15__new_allocatorIfED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8105270:	b480      	push	{r7}
 8105272:	b083      	sub	sp, #12
 8105274:	af00      	add	r7, sp, #0
 8105276:	6078      	str	r0, [r7, #4]
 8105278:	687b      	ldr	r3, [r7, #4]
 810527a:	4618      	mov	r0, r3
 810527c:	370c      	adds	r7, #12
 810527e:	46bd      	mov	sp, r7
 8105280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105284:	4770      	bx	lr

08105286 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 8105286:	b580      	push	{r7, lr}
 8105288:	b084      	sub	sp, #16
 810528a:	af00      	add	r7, sp, #0
 810528c:	60f8      	str	r0, [r7, #12]
 810528e:	60b9      	str	r1, [r7, #8]
 8105290:	607a      	str	r2, [r7, #4]
	if (__p)
 8105292:	68bb      	ldr	r3, [r7, #8]
 8105294:	2b00      	cmp	r3, #0
 8105296:	d005      	beq.n	81052a4 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8105298:	68fb      	ldr	r3, [r7, #12]
 810529a:	687a      	ldr	r2, [r7, #4]
 810529c:	68b9      	ldr	r1, [r7, #8]
 810529e:	4618      	mov	r0, r3
 81052a0:	f000 fae1 	bl	8105866 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 81052a4:	bf00      	nop
 81052a6:	3710      	adds	r7, #16
 81052a8:	46bd      	mov	sp, r7
 81052aa:	bd80      	pop	{r7, pc}

081052ac <_ZNKSt6vectorIfSaIfEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 81052ac:	b580      	push	{r7, lr}
 81052ae:	b082      	sub	sp, #8
 81052b0:	af00      	add	r7, sp, #0
 81052b2:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 81052b4:	687b      	ldr	r3, [r7, #4]
 81052b6:	4618      	mov	r0, r3
 81052b8:	f000 f86c 	bl	8105394 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 81052bc:	4603      	mov	r3, r0
 81052be:	4618      	mov	r0, r3
 81052c0:	f000 fae0 	bl	8105884 <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>
 81052c4:	4603      	mov	r3, r0
 81052c6:	4618      	mov	r0, r3
 81052c8:	3708      	adds	r7, #8
 81052ca:	46bd      	mov	sp, r7
 81052cc:	bd80      	pop	{r7, pc}

081052ce <_ZNKSt6vectorIfSaIfEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 81052ce:	b480      	push	{r7}
 81052d0:	b083      	sub	sp, #12
 81052d2:	af00      	add	r7, sp, #0
 81052d4:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 81052d6:	687b      	ldr	r3, [r7, #4]
 81052d8:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 81052da:	687b      	ldr	r3, [r7, #4]
 81052dc:	681b      	ldr	r3, [r3, #0]
 81052de:	1ad3      	subs	r3, r2, r3
 81052e0:	109b      	asrs	r3, r3, #2
 81052e2:	4618      	mov	r0, r3
 81052e4:	370c      	adds	r7, #12
 81052e6:	46bd      	mov	sp, r7
 81052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81052ec:	4770      	bx	lr

081052ee <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 81052ee:	b580      	push	{r7, lr}
 81052f0:	b082      	sub	sp, #8
 81052f2:	af00      	add	r7, sp, #0
 81052f4:	6078      	str	r0, [r7, #4]
 81052f6:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 81052f8:	683b      	ldr	r3, [r7, #0]
 81052fa:	2b00      	cmp	r3, #0
 81052fc:	d006      	beq.n	810530c <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x1e>
 81052fe:	687b      	ldr	r3, [r7, #4]
 8105300:	6839      	ldr	r1, [r7, #0]
 8105302:	4618      	mov	r0, r3
 8105304:	f000 fad8 	bl	81058b8 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 8105308:	4603      	mov	r3, r0
 810530a:	e000      	b.n	810530e <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x20>
 810530c:	2300      	movs	r3, #0
      }
 810530e:	4618      	mov	r0, r3
 8105310:	3708      	adds	r7, #8
 8105312:	46bd      	mov	sp, r7
 8105314:	bd80      	pop	{r7, pc}

08105316 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8105316:	b590      	push	{r4, r7, lr}
 8105318:	b087      	sub	sp, #28
 810531a:	af02      	add	r7, sp, #8
 810531c:	60f8      	str	r0, [r7, #12]
 810531e:	60b9      	str	r1, [r7, #8]
 8105320:	607a      	str	r2, [r7, #4]
 8105322:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8105324:	f88d 4000 	strb.w	r4, [sp]
 8105328:	683b      	ldr	r3, [r7, #0]
 810532a:	687a      	ldr	r2, [r7, #4]
 810532c:	68b9      	ldr	r1, [r7, #8]
 810532e:	68f8      	ldr	r0, [r7, #12]
 8105330:	f000 fad1 	bl	81058d6 <_ZNSt6vectorIfSaIfEE14_S_do_relocateEPfS2_S2_RS0_St17integral_constantIbLb1EE>
 8105334:	4603      	mov	r3, r0
      }
 8105336:	4618      	mov	r0, r3
 8105338:	3714      	adds	r7, #20
 810533a:	46bd      	mov	sp, r7
 810533c:	bd90      	pop	{r4, r7, pc}

0810533e <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 810533e:	b580      	push	{r7, lr}
 8105340:	b084      	sub	sp, #16
 8105342:	af00      	add	r7, sp, #0
 8105344:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8105346:	f107 030c 	add.w	r3, r7, #12
 810534a:	6879      	ldr	r1, [r7, #4]
 810534c:	4618      	mov	r0, r3
 810534e:	f000 fad4 	bl	81058fa <_ZNSt13move_iteratorIPfEC1ES0_>
 8105352:	68fb      	ldr	r3, [r7, #12]
 8105354:	4618      	mov	r0, r3
 8105356:	3710      	adds	r7, #16
 8105358:	46bd      	mov	sp, r7
 810535a:	bd80      	pop	{r7, pc}

0810535c <_ZNSt6vectorIfSaIfEE20_M_allocate_and_copyISt13move_iteratorIPfEEES4_jT_S6_>:
	_M_allocate_and_copy(size_type __n,
 810535c:	b580      	push	{r7, lr}
 810535e:	b086      	sub	sp, #24
 8105360:	af00      	add	r7, sp, #0
 8105362:	60f8      	str	r0, [r7, #12]
 8105364:	60b9      	str	r1, [r7, #8]
 8105366:	607a      	str	r2, [r7, #4]
 8105368:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 810536a:	68fb      	ldr	r3, [r7, #12]
 810536c:	68b9      	ldr	r1, [r7, #8]
 810536e:	4618      	mov	r0, r3
 8105370:	f7ff ffbd 	bl	81052ee <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8105374:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 8105376:	68fb      	ldr	r3, [r7, #12]
 8105378:	4618      	mov	r0, r3
 810537a:	f7ff ff40 	bl	81051fe <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 810537e:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8105380:	697a      	ldr	r2, [r7, #20]
 8105382:	6839      	ldr	r1, [r7, #0]
 8105384:	6878      	ldr	r0, [r7, #4]
 8105386:	f000 faca 	bl	810591e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_fET0_T_S4_S3_RSaIT1_E>
	      return __result;
 810538a:	697b      	ldr	r3, [r7, #20]
	}
 810538c:	4618      	mov	r0, r3
 810538e:	3718      	adds	r7, #24
 8105390:	46bd      	mov	sp, r7
 8105392:	bd80      	pop	{r7, pc}

08105394 <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8105394:	b480      	push	{r7}
 8105396:	b083      	sub	sp, #12
 8105398:	af00      	add	r7, sp, #0
 810539a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 810539c:	687b      	ldr	r3, [r7, #4]
 810539e:	4618      	mov	r0, r3
 81053a0:	370c      	adds	r7, #12
 81053a2:	46bd      	mov	sp, r7
 81053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81053a8:	4770      	bx	lr

081053aa <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 81053aa:	b580      	push	{r7, lr}
 81053ac:	b082      	sub	sp, #8
 81053ae:	af00      	add	r7, sp, #0
 81053b0:	6078      	str	r0, [r7, #4]
 81053b2:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 81053b4:	687b      	ldr	r3, [r7, #4]
 81053b6:	6839      	ldr	r1, [r7, #0]
 81053b8:	4618      	mov	r0, r3
 81053ba:	f000 fac1 	bl	8105940 <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>
 81053be:	6878      	ldr	r0, [r7, #4]
 81053c0:	3708      	adds	r7, #8
 81053c2:	46bd      	mov	sp, r7
 81053c4:	bd80      	pop	{r7, pc}

081053c6 <_ZNSt12_Vector_baseIfSaIfEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 81053c6:	b580      	push	{r7, lr}
 81053c8:	b084      	sub	sp, #16
 81053ca:	af00      	add	r7, sp, #0
 81053cc:	60f8      	str	r0, [r7, #12]
 81053ce:	60b9      	str	r1, [r7, #8]
 81053d0:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 81053d2:	68fb      	ldr	r3, [r7, #12]
 81053d4:	6879      	ldr	r1, [r7, #4]
 81053d6:	4618      	mov	r0, r3
 81053d8:	f000 facd 	bl	8105976 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 81053dc:	68b9      	ldr	r1, [r7, #8]
 81053de:	68f8      	ldr	r0, [r7, #12]
 81053e0:	f000 fadb 	bl	810599a <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>
 81053e4:	68fb      	ldr	r3, [r7, #12]
 81053e6:	4618      	mov	r0, r3
 81053e8:	3710      	adds	r7, #16
 81053ea:	46bd      	mov	sp, r7
 81053ec:	bd80      	pop	{r7, pc}

081053ee <_ZNKSt6vectorIfSaIfEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 81053ee:	b580      	push	{r7, lr}
 81053f0:	b084      	sub	sp, #16
 81053f2:	af00      	add	r7, sp, #0
 81053f4:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 81053f6:	687a      	ldr	r2, [r7, #4]
 81053f8:	f107 030c 	add.w	r3, r7, #12
 81053fc:	4611      	mov	r1, r2
 81053fe:	4618      	mov	r0, r3
 8105400:	f000 fae6 	bl	81059d0 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 8105404:	68fb      	ldr	r3, [r7, #12]
 8105406:	4618      	mov	r0, r3
 8105408:	3710      	adds	r7, #16
 810540a:	46bd      	mov	sp, r7
 810540c:	bd80      	pop	{r7, pc}

0810540e <_ZNKSt6vectorIfSaIfEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 810540e:	b580      	push	{r7, lr}
 8105410:	b084      	sub	sp, #16
 8105412:	af00      	add	r7, sp, #0
 8105414:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8105416:	687b      	ldr	r3, [r7, #4]
 8105418:	1d1a      	adds	r2, r3, #4
 810541a:	f107 030c 	add.w	r3, r7, #12
 810541e:	4611      	mov	r1, r2
 8105420:	4618      	mov	r0, r3
 8105422:	f000 fad5 	bl	81059d0 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
 8105426:	68fb      	ldr	r3, [r7, #12]
 8105428:	4618      	mov	r0, r3
 810542a:	3710      	adds	r7, #16
 810542c:	46bd      	mov	sp, r7
 810542e:	bd80      	pop	{r7, pc}

08105430 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8105430:	b580      	push	{r7, lr}
 8105432:	b084      	sub	sp, #16
 8105434:	af00      	add	r7, sp, #0
 8105436:	60f8      	str	r0, [r7, #12]
 8105438:	60b9      	str	r1, [r7, #8]
 810543a:	607a      	str	r2, [r7, #4]
 810543c:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 810543e:	687a      	ldr	r2, [r7, #4]
 8105440:	68b9      	ldr	r1, [r7, #8]
 8105442:	68f8      	ldr	r0, [r7, #12]
 8105444:	f000 fad4 	bl	81059f0 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 8105448:	4603      	mov	r3, r0
    }
 810544a:	4618      	mov	r0, r3
 810544c:	3710      	adds	r7, #16
 810544e:	46bd      	mov	sp, r7
 8105450:	bd80      	pop	{r7, pc}

08105452 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8105452:	b480      	push	{r7}
 8105454:	b083      	sub	sp, #12
 8105456:	af00      	add	r7, sp, #0
 8105458:	6078      	str	r0, [r7, #4]
 810545a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 810545c:	683b      	ldr	r3, [r7, #0]
 810545e:	681a      	ldr	r2, [r3, #0]
 8105460:	687b      	ldr	r3, [r7, #4]
 8105462:	601a      	str	r2, [r3, #0]
 8105464:	687b      	ldr	r3, [r7, #4]
 8105466:	4618      	mov	r0, r3
 8105468:	370c      	adds	r7, #12
 810546a:	46bd      	mov	sp, r7
 810546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105470:	4770      	bx	lr

08105472 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8105472:	b5b0      	push	{r4, r5, r7, lr}
 8105474:	b084      	sub	sp, #16
 8105476:	af00      	add	r7, sp, #0
 8105478:	60f8      	str	r0, [r7, #12]
 810547a:	60b9      	str	r1, [r7, #8]
 810547c:	713a      	strb	r2, [r7, #4]
      if (__first != __last)
 810547e:	f107 0208 	add.w	r2, r7, #8
 8105482:	f107 030c 	add.w	r3, r7, #12
 8105486:	4611      	mov	r1, r2
 8105488:	4618      	mov	r0, r3
 810548a:	f000 fac5 	bl	8105a18 <_ZN9__gnu_cxxneIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 810548e:	4603      	mov	r3, r0
 8105490:	2b00      	cmp	r3, #0
 8105492:	d017      	beq.n	81054c4 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x52>
				std::__lg(__last - __first) * 2,
 8105494:	f107 020c 	add.w	r2, r7, #12
 8105498:	f107 0308 	add.w	r3, r7, #8
 810549c:	4611      	mov	r1, r2
 810549e:	4618      	mov	r0, r3
 81054a0:	f000 fad2 	bl	8105a48 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 81054a4:	4603      	mov	r3, r0
 81054a6:	4618      	mov	r0, r3
 81054a8:	f7ff fada 	bl	8104a60 <_ZSt4__lgi>
 81054ac:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 81054ae:	005a      	lsls	r2, r3, #1
 81054b0:	462b      	mov	r3, r5
 81054b2:	68b9      	ldr	r1, [r7, #8]
 81054b4:	68f8      	ldr	r0, [r7, #12]
 81054b6:	f000 fadc 	bl	8105a72 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 81054ba:	4622      	mov	r2, r4
 81054bc:	68b9      	ldr	r1, [r7, #8]
 81054be:	68f8      	ldr	r0, [r7, #12]
 81054c0:	f000 fb0e 	bl	8105ae0 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 81054c4:	bf00      	nop
 81054c6:	3710      	adds	r7, #16
 81054c8:	46bd      	mov	sp, r7
 81054ca:	bdb0      	pop	{r4, r5, r7, pc}

081054cc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 81054cc:	b480      	push	{r7}
 81054ce:	b083      	sub	sp, #12
 81054d0:	af00      	add	r7, sp, #0
 81054d2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 81054d4:	687b      	ldr	r3, [r7, #4]
 81054d6:	4618      	mov	r0, r3
 81054d8:	370c      	adds	r7, #12
 81054da:	46bd      	mov	sp, r7
 81054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81054e0:	4770      	bx	lr

081054e2 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 81054e2:	b5b0      	push	{r4, r5, r7, lr}
 81054e4:	b082      	sub	sp, #8
 81054e6:	af00      	add	r7, sp, #0
 81054e8:	6078      	str	r0, [r7, #4]
 81054ea:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 81054ec:	687b      	ldr	r3, [r7, #4]
 81054ee:	685a      	ldr	r2, [r3, #4]
 81054f0:	687b      	ldr	r3, [r7, #4]
 81054f2:	689b      	ldr	r3, [r3, #8]
 81054f4:	429a      	cmp	r2, r3
 81054f6:	d011      	beq.n	810551c <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 81054f8:	687c      	ldr	r4, [r7, #4]
 81054fa:	687b      	ldr	r3, [r7, #4]
 81054fc:	685d      	ldr	r5, [r3, #4]
 81054fe:	6838      	ldr	r0, [r7, #0]
 8105500:	f000 fb26 	bl	8105b50 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8105504:	4603      	mov	r3, r0
 8105506:	461a      	mov	r2, r3
 8105508:	4629      	mov	r1, r5
 810550a:	4620      	mov	r0, r4
 810550c:	f000 fb2b 	bl	8105b66 <_ZNSt16allocator_traitsISaIfEE9constructIfJfEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8105510:	687b      	ldr	r3, [r7, #4]
 8105512:	685b      	ldr	r3, [r3, #4]
 8105514:	1d1a      	adds	r2, r3, #4
 8105516:	687b      	ldr	r3, [r7, #4]
 8105518:	605a      	str	r2, [r3, #4]
      }
 810551a:	e00c      	b.n	8105536 <_ZNSt6vectorIfSaIfEE12emplace_backIJfEEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 810551c:	6878      	ldr	r0, [r7, #4]
 810551e:	f7ff fdfe 	bl	810511e <_ZNSt6vectorIfSaIfEE3endEv>
 8105522:	4604      	mov	r4, r0
 8105524:	6838      	ldr	r0, [r7, #0]
 8105526:	f000 fb13 	bl	8105b50 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 810552a:	4603      	mov	r3, r0
 810552c:	461a      	mov	r2, r3
 810552e:	4621      	mov	r1, r4
 8105530:	6878      	ldr	r0, [r7, #4]
 8105532:	f000 fb2b 	bl	8105b8c <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>
      }
 8105536:	bf00      	nop
 8105538:	3708      	adds	r7, #8
 810553a:	46bd      	mov	sp, r7
 810553c:	bdb0      	pop	{r4, r5, r7, pc}

0810553e <_ZSt19__iterator_categoryIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEENSt15iterator_traitsIT_E17iterator_categoryERKS8_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 810553e:	b480      	push	{r7}
 8105540:	b083      	sub	sp, #12
 8105542:	af00      	add	r7, sp, #0
 8105544:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8105546:	bf00      	nop
 8105548:	4618      	mov	r0, r3
 810554a:	370c      	adds	r7, #12
 810554c:	46bd      	mov	sp, r7
 810554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105552:	4770      	bx	lr

08105554 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag>:
    __rotate(_RandomAccessIterator __first,
 8105554:	b590      	push	{r4, r7, lr}
 8105556:	b095      	sub	sp, #84	@ 0x54
 8105558:	af00      	add	r7, sp, #0
 810555a:	60f8      	str	r0, [r7, #12]
 810555c:	60b9      	str	r1, [r7, #8]
 810555e:	607a      	str	r2, [r7, #4]
 8105560:	703b      	strb	r3, [r7, #0]
      if (__first == __middle)
 8105562:	f107 0208 	add.w	r2, r7, #8
 8105566:	f107 030c 	add.w	r3, r7, #12
 810556a:	4611      	mov	r1, r2
 810556c:	4618      	mov	r0, r3
 810556e:	f000 fbc9 	bl	8105d04 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8105572:	4603      	mov	r3, r0
 8105574:	2b00      	cmp	r3, #0
 8105576:	d001      	beq.n	810557c <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x28>
	return __last;
 8105578:	687b      	ldr	r3, [r7, #4]
 810557a:	e158      	b.n	810582e <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
      else if (__last == __middle)
 810557c:	f107 0208 	add.w	r2, r7, #8
 8105580:	1d3b      	adds	r3, r7, #4
 8105582:	4611      	mov	r1, r2
 8105584:	4618      	mov	r0, r3
 8105586:	f000 fbbd 	bl	8105d04 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 810558a:	4603      	mov	r3, r0
 810558c:	2b00      	cmp	r3, #0
 810558e:	d001      	beq.n	8105594 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x40>
	return __first;
 8105590:	68fb      	ldr	r3, [r7, #12]
 8105592:	e14c      	b.n	810582e <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
      _Distance __n = __last   - __first;
 8105594:	f107 020c 	add.w	r2, r7, #12
 8105598:	1d3b      	adds	r3, r7, #4
 810559a:	4611      	mov	r1, r2
 810559c:	4618      	mov	r0, r3
 810559e:	f000 fa53 	bl	8105a48 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 81055a2:	4603      	mov	r3, r0
 81055a4:	633b      	str	r3, [r7, #48]	@ 0x30
      _Distance __k = __middle - __first;
 81055a6:	f107 020c 	add.w	r2, r7, #12
 81055aa:	f107 0308 	add.w	r3, r7, #8
 81055ae:	4611      	mov	r1, r2
 81055b0:	4618      	mov	r0, r3
 81055b2:	f000 fa49 	bl	8105a48 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 81055b6:	4603      	mov	r3, r0
 81055b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__k == __n - __k)
 81055ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81055bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81055be:	1ad2      	subs	r2, r2, r3
 81055c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81055c2:	429a      	cmp	r2, r3
 81055c4:	d106      	bne.n	81055d4 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x80>
	  std::swap_ranges(__first, __middle, __middle);
 81055c6:	68ba      	ldr	r2, [r7, #8]
 81055c8:	68b9      	ldr	r1, [r7, #8]
 81055ca:	68f8      	ldr	r0, [r7, #12]
 81055cc:	f000 fbb2 	bl	8105d34 <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>
	  return __middle;
 81055d0:	68bb      	ldr	r3, [r7, #8]
 81055d2:	e12c      	b.n	810582e <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
      _RandomAccessIterator __p = __first;
 81055d4:	68fb      	ldr	r3, [r7, #12]
 81055d6:	62bb      	str	r3, [r7, #40]	@ 0x28
      _RandomAccessIterator __ret = __first + (__last - __middle);
 81055d8:	f107 0208 	add.w	r2, r7, #8
 81055dc:	1d3b      	adds	r3, r7, #4
 81055de:	4611      	mov	r1, r2
 81055e0:	4618      	mov	r0, r3
 81055e2:	f000 fa31 	bl	8105a48 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 81055e6:	4602      	mov	r2, r0
 81055e8:	f107 030c 	add.w	r3, r7, #12
 81055ec:	4611      	mov	r1, r2
 81055ee:	4618      	mov	r0, r3
 81055f0:	f7ff fdd7 	bl	81051a2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 81055f4:	4603      	mov	r3, r0
 81055f6:	627b      	str	r3, [r7, #36]	@ 0x24
	  if (__k < __n - __k)
 81055f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81055fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81055fc:	1ad2      	subs	r2, r2, r3
 81055fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105600:	429a      	cmp	r2, r3
 8105602:	f340 8081 	ble.w	8105708 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x1b4>
	      if (__is_pod(_ValueType) && __k == 1)
 8105606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105608:	2b01      	cmp	r3, #1
 810560a:	d140      	bne.n	810568e <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x13a>
		  _ValueType __t = _GLIBCXX_MOVE(*__p);
 810560c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8105610:	4618      	mov	r0, r3
 8105612:	f000 fbb3 	bl	8105d7c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8105616:	4603      	mov	r3, r0
 8105618:	4618      	mov	r0, r3
 810561a:	f7ff ff57 	bl	81054cc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810561e:	4603      	mov	r3, r0
 8105620:	681b      	ldr	r3, [r3, #0]
 8105622:	61fb      	str	r3, [r7, #28]
		  _GLIBCXX_MOVE3(__p + 1, __p + __n, __p);
 8105624:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8105628:	2101      	movs	r1, #1
 810562a:	4618      	mov	r0, r3
 810562c:	f7ff fdb9 	bl	81051a2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8105630:	4604      	mov	r4, r0
 8105632:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8105634:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8105638:	4611      	mov	r1, r2
 810563a:	4618      	mov	r0, r3
 810563c:	f7ff fdb1 	bl	81051a2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8105640:	4603      	mov	r3, r0
 8105642:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8105644:	4619      	mov	r1, r3
 8105646:	4620      	mov	r0, r4
 8105648:	f000 fba4 	bl	8105d94 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>
		  *(__p + __n - 1) = _GLIBCXX_MOVE(__t);
 810564c:	f107 031c 	add.w	r3, r7, #28
 8105650:	4618      	mov	r0, r3
 8105652:	f7ff ff3b 	bl	81054cc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8105656:	4604      	mov	r4, r0
 8105658:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810565a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810565e:	4611      	mov	r1, r2
 8105660:	4618      	mov	r0, r3
 8105662:	f7ff fd9e 	bl	81051a2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8105666:	4603      	mov	r3, r0
 8105668:	63bb      	str	r3, [r7, #56]	@ 0x38
 810566a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 810566e:	2101      	movs	r1, #1
 8105670:	4618      	mov	r0, r3
 8105672:	f000 fba7 	bl	8105dc4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 8105676:	4603      	mov	r3, r0
 8105678:	637b      	str	r3, [r7, #52]	@ 0x34
 810567a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 810567e:	4618      	mov	r0, r3
 8105680:	f000 fb7c 	bl	8105d7c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8105684:	4602      	mov	r2, r0
 8105686:	6823      	ldr	r3, [r4, #0]
 8105688:	6013      	str	r3, [r2, #0]
		  return __ret;
 810568a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810568c:	e0cf      	b.n	810582e <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
	      _RandomAccessIterator __q = __p + __k;
 810568e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8105690:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8105694:	4611      	mov	r1, r2
 8105696:	4618      	mov	r0, r3
 8105698:	f7ff fd83 	bl	81051a2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810569c:	4603      	mov	r3, r0
 810569e:	623b      	str	r3, [r7, #32]
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 81056a0:	2300      	movs	r3, #0
 81056a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81056a4:	e010      	b.n	81056c8 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x174>
		  std::iter_swap(__p, __q);
 81056a6:	6a39      	ldr	r1, [r7, #32]
 81056a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81056aa:	f000 fba4 	bl	8105df6 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
		  ++__p;
 81056ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81056b2:	4618      	mov	r0, r3
 81056b4:	f000 fbb6 	bl	8105e24 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
		  ++__q;
 81056b8:	f107 0320 	add.w	r3, r7, #32
 81056bc:	4618      	mov	r0, r3
 81056be:	f000 fbb1 	bl	8105e24 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 81056c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81056c4:	3301      	adds	r3, #1
 81056c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81056c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81056ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81056cc:	1ad3      	subs	r3, r2, r3
 81056ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 81056d0:	429a      	cmp	r2, r3
 81056d2:	dbe8      	blt.n	81056a6 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x152>
	      __n %= __k;
 81056d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81056d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81056d8:	fb93 f1f2 	sdiv	r1, r3, r2
 81056dc:	fb01 f202 	mul.w	r2, r1, r2
 81056e0:	1a9b      	subs	r3, r3, r2
 81056e2:	633b      	str	r3, [r7, #48]	@ 0x30
	      if (__n == 0)
 81056e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81056e6:	2b00      	cmp	r3, #0
 81056e8:	d101      	bne.n	81056ee <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x19a>
		return __ret;
 81056ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81056ec:	e09f      	b.n	810582e <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
	      std::swap(__n, __k);
 81056ee:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 81056f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 81056f6:	4611      	mov	r1, r2
 81056f8:	4618      	mov	r0, r3
 81056fa:	f000 fba3 	bl	8105e44 <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
	      __k = __n - __k;
 81056fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8105700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105702:	1ad3      	subs	r3, r2, r3
 8105704:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8105706:	e777      	b.n	81055f8 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0xa4>
	      __k = __n - __k;
 8105708:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810570a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810570c:	1ad3      	subs	r3, r2, r3
 810570e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	      if (__is_pod(_ValueType) && __k == 1)
 8105710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105712:	2b01      	cmp	r3, #1
 8105714:	d149      	bne.n	81057aa <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x256>
		  _ValueType __t = _GLIBCXX_MOVE(*(__p + __n - 1));
 8105716:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8105718:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810571c:	4611      	mov	r1, r2
 810571e:	4618      	mov	r0, r3
 8105720:	f7ff fd3f 	bl	81051a2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8105724:	4603      	mov	r3, r0
 8105726:	643b      	str	r3, [r7, #64]	@ 0x40
 8105728:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 810572c:	2101      	movs	r1, #1
 810572e:	4618      	mov	r0, r3
 8105730:	f000 fb48 	bl	8105dc4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 8105734:	4603      	mov	r3, r0
 8105736:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105738:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 810573c:	4618      	mov	r0, r3
 810573e:	f000 fb1d 	bl	8105d7c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8105742:	4603      	mov	r3, r0
 8105744:	4618      	mov	r0, r3
 8105746:	f7ff fec1 	bl	81054cc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810574a:	4603      	mov	r3, r0
 810574c:	681b      	ldr	r3, [r3, #0]
 810574e:	617b      	str	r3, [r7, #20]
		  _GLIBCXX_MOVE_BACKWARD3(__p, __p + __n - 1, __p + __n);
 8105750:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8105752:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8105756:	4611      	mov	r1, r2
 8105758:	4618      	mov	r0, r3
 810575a:	f7ff fd22 	bl	81051a2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810575e:	4603      	mov	r3, r0
 8105760:	647b      	str	r3, [r7, #68]	@ 0x44
 8105762:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8105766:	2101      	movs	r1, #1
 8105768:	4618      	mov	r0, r3
 810576a:	f000 fb2b 	bl	8105dc4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 810576e:	4604      	mov	r4, r0
 8105770:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8105772:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8105776:	4611      	mov	r1, r2
 8105778:	4618      	mov	r0, r3
 810577a:	f7ff fd12 	bl	81051a2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 810577e:	4603      	mov	r3, r0
 8105780:	461a      	mov	r2, r3
 8105782:	4621      	mov	r1, r4
 8105784:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8105786:	f000 fb7c 	bl	8105e82 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>
		  *__p = _GLIBCXX_MOVE(__t);
 810578a:	f107 0314 	add.w	r3, r7, #20
 810578e:	4618      	mov	r0, r3
 8105790:	f7ff fe9c 	bl	81054cc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8105794:	4604      	mov	r4, r0
 8105796:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810579a:	4618      	mov	r0, r3
 810579c:	f000 faee 	bl	8105d7c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 81057a0:	4602      	mov	r2, r0
 81057a2:	6823      	ldr	r3, [r4, #0]
 81057a4:	6013      	str	r3, [r2, #0]
		  return __ret;
 81057a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81057a8:	e041      	b.n	810582e <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
	      _RandomAccessIterator __q = __p + __n;
 81057aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81057ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81057b0:	4611      	mov	r1, r2
 81057b2:	4618      	mov	r0, r3
 81057b4:	f7ff fcf5 	bl	81051a2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 81057b8:	4603      	mov	r3, r0
 81057ba:	61bb      	str	r3, [r7, #24]
	      __p = __q - __k;
 81057bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81057be:	f107 0318 	add.w	r3, r7, #24
 81057c2:	4611      	mov	r1, r2
 81057c4:	4618      	mov	r0, r3
 81057c6:	f000 fafd 	bl	8105dc4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 81057ca:	4603      	mov	r3, r0
 81057cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 81057ce:	2300      	movs	r3, #0
 81057d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 81057d2:	e010      	b.n	81057f6 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2a2>
		  --__p;
 81057d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81057d8:	4618      	mov	r0, r3
 81057da:	f000 fb6a 	bl	8105eb2 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
		  --__q;
 81057de:	f107 0318 	add.w	r3, r7, #24
 81057e2:	4618      	mov	r0, r3
 81057e4:	f000 fb65 	bl	8105eb2 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
		  std::iter_swap(__p, __q);
 81057e8:	69b9      	ldr	r1, [r7, #24]
 81057ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81057ec:	f000 fb03 	bl	8105df6 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
 81057f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81057f2:	3301      	adds	r3, #1
 81057f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 81057f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81057f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81057fa:	1ad3      	subs	r3, r2, r3
 81057fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 81057fe:	429a      	cmp	r2, r3
 8105800:	dbe8      	blt.n	81057d4 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x280>
	      __n %= __k;
 8105802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105804:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8105806:	fb93 f1f2 	sdiv	r1, r3, r2
 810580a:	fb01 f202 	mul.w	r2, r1, r2
 810580e:	1a9b      	subs	r3, r3, r2
 8105810:	633b      	str	r3, [r7, #48]	@ 0x30
	      if (__n == 0)
 8105812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105814:	2b00      	cmp	r3, #0
 8105816:	d101      	bne.n	810581c <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2c8>
		return __ret;
 8105818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810581a:	e008      	b.n	810582e <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0x2da>
	      std::swap(__n, __k);
 810581c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8105820:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8105824:	4611      	mov	r1, r2
 8105826:	4618      	mov	r0, r3
 8105828:	f000 fb0c 	bl	8105e44 <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
      for (;;)
 810582c:	e6e4      	b.n	81055f8 <_ZNSt3_V28__rotateIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEEET_S8_S8_S8_St26random_access_iterator_tag+0xa4>
    }
 810582e:	4618      	mov	r0, r3
 8105830:	3754      	adds	r7, #84	@ 0x54
 8105832:	46bd      	mov	sp, r7
 8105834:	bd90      	pop	{r4, r7, pc}

08105836 <_ZSt8_DestroyIPfEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8105836:	b580      	push	{r7, lr}
 8105838:	b082      	sub	sp, #8
 810583a:	af00      	add	r7, sp, #0
 810583c:	6078      	str	r0, [r7, #4]
 810583e:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8105840:	6839      	ldr	r1, [r7, #0]
 8105842:	6878      	ldr	r0, [r7, #4]
 8105844:	f000 fb45 	bl	8105ed2 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
 8105848:	bf00      	nop
 810584a:	3708      	adds	r7, #8
 810584c:	46bd      	mov	sp, r7
 810584e:	bd80      	pop	{r7, pc}

08105850 <_ZNSt15__new_allocatorIfEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8105850:	b480      	push	{r7}
 8105852:	b083      	sub	sp, #12
 8105854:	af00      	add	r7, sp, #0
 8105856:	6078      	str	r0, [r7, #4]
 8105858:	687b      	ldr	r3, [r7, #4]
 810585a:	4618      	mov	r0, r3
 810585c:	370c      	adds	r7, #12
 810585e:	46bd      	mov	sp, r7
 8105860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105864:	4770      	bx	lr

08105866 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8105866:	b580      	push	{r7, lr}
 8105868:	b084      	sub	sp, #16
 810586a:	af00      	add	r7, sp, #0
 810586c:	60f8      	str	r0, [r7, #12]
 810586e:	60b9      	str	r1, [r7, #8]
 8105870:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8105872:	687a      	ldr	r2, [r7, #4]
 8105874:	68b9      	ldr	r1, [r7, #8]
 8105876:	68f8      	ldr	r0, [r7, #12]
 8105878:	f000 fb36 	bl	8105ee8 <_ZNSt15__new_allocatorIfE10deallocateEPfj>
 810587c:	bf00      	nop
 810587e:	3710      	adds	r7, #16
 8105880:	46bd      	mov	sp, r7
 8105882:	bd80      	pop	{r7, pc}

08105884 <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8105884:	b580      	push	{r7, lr}
 8105886:	b084      	sub	sp, #16
 8105888:	af00      	add	r7, sp, #0
 810588a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 810588c:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8105890:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8105892:	6878      	ldr	r0, [r7, #4]
 8105894:	f000 fb38 	bl	8105f08 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 8105898:	4603      	mov	r3, r0
 810589a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 810589c:	f107 0208 	add.w	r2, r7, #8
 81058a0:	f107 030c 	add.w	r3, r7, #12
 81058a4:	4611      	mov	r1, r2
 81058a6:	4618      	mov	r0, r3
 81058a8:	f7fd ff37 	bl	810371a <_ZSt3minIjERKT_S2_S2_>
 81058ac:	4603      	mov	r3, r0
 81058ae:	681b      	ldr	r3, [r3, #0]
      }
 81058b0:	4618      	mov	r0, r3
 81058b2:	3710      	adds	r7, #16
 81058b4:	46bd      	mov	sp, r7
 81058b6:	bd80      	pop	{r7, pc}

081058b8 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 81058b8:	b580      	push	{r7, lr}
 81058ba:	b082      	sub	sp, #8
 81058bc:	af00      	add	r7, sp, #0
 81058be:	6078      	str	r0, [r7, #4]
 81058c0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 81058c2:	2200      	movs	r2, #0
 81058c4:	6839      	ldr	r1, [r7, #0]
 81058c6:	6878      	ldr	r0, [r7, #4]
 81058c8:	f000 fb2a 	bl	8105f20 <_ZNSt15__new_allocatorIfE8allocateEjPKv>
 81058cc:	4603      	mov	r3, r0
 81058ce:	4618      	mov	r0, r3
 81058d0:	3708      	adds	r7, #8
 81058d2:	46bd      	mov	sp, r7
 81058d4:	bd80      	pop	{r7, pc}

081058d6 <_ZNSt6vectorIfSaIfEE14_S_do_relocateEPfS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 81058d6:	b580      	push	{r7, lr}
 81058d8:	b084      	sub	sp, #16
 81058da:	af00      	add	r7, sp, #0
 81058dc:	60f8      	str	r0, [r7, #12]
 81058de:	60b9      	str	r1, [r7, #8]
 81058e0:	607a      	str	r2, [r7, #4]
 81058e2:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 81058e4:	683b      	ldr	r3, [r7, #0]
 81058e6:	687a      	ldr	r2, [r7, #4]
 81058e8:	68b9      	ldr	r1, [r7, #8]
 81058ea:	68f8      	ldr	r0, [r7, #12]
 81058ec:	f000 fb41 	bl	8105f72 <_ZSt12__relocate_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 81058f0:	4603      	mov	r3, r0
      }
 81058f2:	4618      	mov	r0, r3
 81058f4:	3710      	adds	r7, #16
 81058f6:	46bd      	mov	sp, r7
 81058f8:	bd80      	pop	{r7, pc}

081058fa <_ZNSt13move_iteratorIPfEC1ES0_>:
      move_iterator(iterator_type __i)
 81058fa:	b580      	push	{r7, lr}
 81058fc:	b082      	sub	sp, #8
 81058fe:	af00      	add	r7, sp, #0
 8105900:	6078      	str	r0, [r7, #4]
 8105902:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8105904:	463b      	mov	r3, r7
 8105906:	4618      	mov	r0, r3
 8105908:	f000 fb50 	bl	8105fac <_ZSt4moveIRPfEONSt16remove_referenceIT_E4typeEOS3_>
 810590c:	4603      	mov	r3, r0
 810590e:	681a      	ldr	r2, [r3, #0]
 8105910:	687b      	ldr	r3, [r7, #4]
 8105912:	601a      	str	r2, [r3, #0]
 8105914:	687b      	ldr	r3, [r7, #4]
 8105916:	4618      	mov	r0, r3
 8105918:	3708      	adds	r7, #8
 810591a:	46bd      	mov	sp, r7
 810591c:	bd80      	pop	{r7, pc}

0810591e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_fET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 810591e:	b580      	push	{r7, lr}
 8105920:	b084      	sub	sp, #16
 8105922:	af00      	add	r7, sp, #0
 8105924:	60f8      	str	r0, [r7, #12]
 8105926:	60b9      	str	r1, [r7, #8]
 8105928:	607a      	str	r2, [r7, #4]
 810592a:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 810592c:	687a      	ldr	r2, [r7, #4]
 810592e:	68b9      	ldr	r1, [r7, #8]
 8105930:	68f8      	ldr	r0, [r7, #12]
 8105932:	f000 fb46 	bl	8105fc2 <_ZSt18uninitialized_copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>
 8105936:	4603      	mov	r3, r0
    }
 8105938:	4618      	mov	r0, r3
 810593a:	3710      	adds	r7, #16
 810593c:	46bd      	mov	sp, r7
 810593e:	bd80      	pop	{r7, pc}

08105940 <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 8105940:	b580      	push	{r7, lr}
 8105942:	b082      	sub	sp, #8
 8105944:	af00      	add	r7, sp, #0
 8105946:	6078      	str	r0, [r7, #4]
 8105948:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 810594a:	6839      	ldr	r1, [r7, #0]
 810594c:	6878      	ldr	r0, [r7, #4]
 810594e:	f000 f804 	bl	810595a <_ZNSaIfEC1ERKS_>
 8105952:	6878      	ldr	r0, [r7, #4]
 8105954:	3708      	adds	r7, #8
 8105956:	46bd      	mov	sp, r7
 8105958:	bd80      	pop	{r7, pc}

0810595a <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 810595a:	b580      	push	{r7, lr}
 810595c:	b082      	sub	sp, #8
 810595e:	af00      	add	r7, sp, #0
 8105960:	6078      	str	r0, [r7, #4]
 8105962:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8105964:	6839      	ldr	r1, [r7, #0]
 8105966:	6878      	ldr	r0, [r7, #4]
 8105968:	f000 fb3f 	bl	8105fea <_ZNSt15__new_allocatorIfEC1ERKS0_>
 810596c:	687b      	ldr	r3, [r7, #4]
 810596e:	4618      	mov	r0, r3
 8105970:	3708      	adds	r7, #8
 8105972:	46bd      	mov	sp, r7
 8105974:	bd80      	pop	{r7, pc}

08105976 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8105976:	b580      	push	{r7, lr}
 8105978:	b082      	sub	sp, #8
 810597a:	af00      	add	r7, sp, #0
 810597c:	6078      	str	r0, [r7, #4]
 810597e:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8105980:	6839      	ldr	r1, [r7, #0]
 8105982:	6878      	ldr	r0, [r7, #4]
 8105984:	f7ff ffe9 	bl	810595a <_ZNSaIfEC1ERKS_>
 8105988:	687b      	ldr	r3, [r7, #4]
 810598a:	4618      	mov	r0, r3
 810598c:	f7ff fc5c 	bl	8105248 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 8105990:	687b      	ldr	r3, [r7, #4]
 8105992:	4618      	mov	r0, r3
 8105994:	3708      	adds	r7, #8
 8105996:	46bd      	mov	sp, r7
 8105998:	bd80      	pop	{r7, pc}

0810599a <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 810599a:	b580      	push	{r7, lr}
 810599c:	b082      	sub	sp, #8
 810599e:	af00      	add	r7, sp, #0
 81059a0:	6078      	str	r0, [r7, #4]
 81059a2:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 81059a4:	6839      	ldr	r1, [r7, #0]
 81059a6:	6878      	ldr	r0, [r7, #4]
 81059a8:	f7ff fca1 	bl	81052ee <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 81059ac:	4602      	mov	r2, r0
 81059ae:	687b      	ldr	r3, [r7, #4]
 81059b0:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 81059b2:	687b      	ldr	r3, [r7, #4]
 81059b4:	681a      	ldr	r2, [r3, #0]
 81059b6:	687b      	ldr	r3, [r7, #4]
 81059b8:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 81059ba:	687b      	ldr	r3, [r7, #4]
 81059bc:	681a      	ldr	r2, [r3, #0]
 81059be:	683b      	ldr	r3, [r7, #0]
 81059c0:	009b      	lsls	r3, r3, #2
 81059c2:	441a      	add	r2, r3
 81059c4:	687b      	ldr	r3, [r7, #4]
 81059c6:	609a      	str	r2, [r3, #8]
      }
 81059c8:	bf00      	nop
 81059ca:	3708      	adds	r7, #8
 81059cc:	46bd      	mov	sp, r7
 81059ce:	bd80      	pop	{r7, pc}

081059d0 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 81059d0:	b480      	push	{r7}
 81059d2:	b083      	sub	sp, #12
 81059d4:	af00      	add	r7, sp, #0
 81059d6:	6078      	str	r0, [r7, #4]
 81059d8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 81059da:	683b      	ldr	r3, [r7, #0]
 81059dc:	681a      	ldr	r2, [r3, #0]
 81059de:	687b      	ldr	r3, [r7, #4]
 81059e0:	601a      	str	r2, [r3, #0]
 81059e2:	687b      	ldr	r3, [r7, #4]
 81059e4:	4618      	mov	r0, r3
 81059e6:	370c      	adds	r7, #12
 81059e8:	46bd      	mov	sp, r7
 81059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059ee:	4770      	bx	lr

081059f0 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 81059f0:	b580      	push	{r7, lr}
 81059f2:	b086      	sub	sp, #24
 81059f4:	af00      	add	r7, sp, #0
 81059f6:	60f8      	str	r0, [r7, #12]
 81059f8:	60b9      	str	r1, [r7, #8]
 81059fa:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 81059fc:	2301      	movs	r3, #1
 81059fe:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 8105a00:	2301      	movs	r3, #1
 8105a02:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8105a04:	687a      	ldr	r2, [r7, #4]
 8105a06:	68b9      	ldr	r1, [r7, #8]
 8105a08:	68f8      	ldr	r0, [r7, #12]
 8105a0a:	f000 fafa 	bl	8106002 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>
 8105a0e:	4603      	mov	r3, r0
    }
 8105a10:	4618      	mov	r0, r3
 8105a12:	3718      	adds	r7, #24
 8105a14:	46bd      	mov	sp, r7
 8105a16:	bd80      	pop	{r7, pc}

08105a18 <_ZN9__gnu_cxxneIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8105a18:	b590      	push	{r4, r7, lr}
 8105a1a:	b083      	sub	sp, #12
 8105a1c:	af00      	add	r7, sp, #0
 8105a1e:	6078      	str	r0, [r7, #4]
 8105a20:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8105a22:	6878      	ldr	r0, [r7, #4]
 8105a24:	f000 fafd 	bl	8106022 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8105a28:	4603      	mov	r3, r0
 8105a2a:	681c      	ldr	r4, [r3, #0]
 8105a2c:	6838      	ldr	r0, [r7, #0]
 8105a2e:	f000 faf8 	bl	8106022 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8105a32:	4603      	mov	r3, r0
 8105a34:	681b      	ldr	r3, [r3, #0]
 8105a36:	429c      	cmp	r4, r3
 8105a38:	bf14      	ite	ne
 8105a3a:	2301      	movne	r3, #1
 8105a3c:	2300      	moveq	r3, #0
 8105a3e:	b2db      	uxtb	r3, r3
 8105a40:	4618      	mov	r0, r3
 8105a42:	370c      	adds	r7, #12
 8105a44:	46bd      	mov	sp, r7
 8105a46:	bd90      	pop	{r4, r7, pc}

08105a48 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8105a48:	b590      	push	{r4, r7, lr}
 8105a4a:	b083      	sub	sp, #12
 8105a4c:	af00      	add	r7, sp, #0
 8105a4e:	6078      	str	r0, [r7, #4]
 8105a50:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8105a52:	6878      	ldr	r0, [r7, #4]
 8105a54:	f000 fae5 	bl	8106022 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8105a58:	4603      	mov	r3, r0
 8105a5a:	681c      	ldr	r4, [r3, #0]
 8105a5c:	6838      	ldr	r0, [r7, #0]
 8105a5e:	f000 fae0 	bl	8106022 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8105a62:	4603      	mov	r3, r0
 8105a64:	681b      	ldr	r3, [r3, #0]
 8105a66:	1ae3      	subs	r3, r4, r3
 8105a68:	109b      	asrs	r3, r3, #2
 8105a6a:	4618      	mov	r0, r3
 8105a6c:	370c      	adds	r7, #12
 8105a6e:	46bd      	mov	sp, r7
 8105a70:	bd90      	pop	{r4, r7, pc}

08105a72 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 8105a72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8105a74:	b087      	sub	sp, #28
 8105a76:	af00      	add	r7, sp, #0
 8105a78:	60f8      	str	r0, [r7, #12]
 8105a7a:	60b9      	str	r1, [r7, #8]
 8105a7c:	607a      	str	r2, [r7, #4]
 8105a7e:	703b      	strb	r3, [r7, #0]
      while (__last - __first > int(_S_threshold))
 8105a80:	e01b      	b.n	8105aba <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x48>
	  if (__depth_limit == 0)
 8105a82:	687b      	ldr	r3, [r7, #4]
 8105a84:	2b00      	cmp	r3, #0
 8105a86:	d106      	bne.n	8105a96 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x24>
	      std::__partial_sort(__first, __last, __last, __comp);
 8105a88:	4633      	mov	r3, r6
 8105a8a:	68ba      	ldr	r2, [r7, #8]
 8105a8c:	68b9      	ldr	r1, [r7, #8]
 8105a8e:	68f8      	ldr	r0, [r7, #12]
 8105a90:	f000 fad2 	bl	8106038 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>
 8105a94:	e021      	b.n	8105ada <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x68>
	  --__depth_limit;
 8105a96:	687b      	ldr	r3, [r7, #4]
 8105a98:	3b01      	subs	r3, #1
 8105a9a:	607b      	str	r3, [r7, #4]
	    std::__unguarded_partition_pivot(__first, __last, __comp);
 8105a9c:	462a      	mov	r2, r5
 8105a9e:	68b9      	ldr	r1, [r7, #8]
 8105aa0:	68f8      	ldr	r0, [r7, #12]
 8105aa2:	f000 fae0 	bl	8106066 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_T0_>
 8105aa6:	4603      	mov	r3, r0
 8105aa8:	617b      	str	r3, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 8105aaa:	4623      	mov	r3, r4
 8105aac:	687a      	ldr	r2, [r7, #4]
 8105aae:	68b9      	ldr	r1, [r7, #8]
 8105ab0:	6978      	ldr	r0, [r7, #20]
 8105ab2:	f7ff ffde 	bl	8105a72 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_>
	  __last = __cut;
 8105ab6:	697b      	ldr	r3, [r7, #20]
 8105ab8:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 8105aba:	f107 020c 	add.w	r2, r7, #12
 8105abe:	f107 0308 	add.w	r3, r7, #8
 8105ac2:	4611      	mov	r1, r2
 8105ac4:	4618      	mov	r0, r3
 8105ac6:	f7ff ffbf 	bl	8105a48 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8105aca:	4603      	mov	r3, r0
 8105acc:	2b10      	cmp	r3, #16
 8105ace:	bfcc      	ite	gt
 8105ad0:	2301      	movgt	r3, #1
 8105ad2:	2300      	movle	r3, #0
 8105ad4:	b2db      	uxtb	r3, r3
 8105ad6:	2b00      	cmp	r3, #0
 8105ad8:	d1d3      	bne.n	8105a82 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEiNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_+0x10>
    }
 8105ada:	371c      	adds	r7, #28
 8105adc:	46bd      	mov	sp, r7
 8105ade:	bdf0      	pop	{r4, r5, r6, r7, pc}

08105ae0 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 8105ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8105ae2:	b085      	sub	sp, #20
 8105ae4:	af00      	add	r7, sp, #0
 8105ae6:	60f8      	str	r0, [r7, #12]
 8105ae8:	60b9      	str	r1, [r7, #8]
 8105aea:	713a      	strb	r2, [r7, #4]
      if (__last - __first > int(_S_threshold))
 8105aec:	f107 020c 	add.w	r2, r7, #12
 8105af0:	f107 0308 	add.w	r3, r7, #8
 8105af4:	4611      	mov	r1, r2
 8105af6:	4618      	mov	r0, r3
 8105af8:	f7ff ffa6 	bl	8105a48 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8105afc:	4603      	mov	r3, r0
 8105afe:	2b10      	cmp	r3, #16
 8105b00:	bfcc      	ite	gt
 8105b02:	2301      	movgt	r3, #1
 8105b04:	2300      	movle	r3, #0
 8105b06:	b2db      	uxtb	r3, r3
 8105b08:	2b00      	cmp	r3, #0
 8105b0a:	d018      	beq.n	8105b3e <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 8105b0c:	f107 030c 	add.w	r3, r7, #12
 8105b10:	2110      	movs	r1, #16
 8105b12:	4618      	mov	r0, r3
 8105b14:	f7ff fb45 	bl	81051a2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8105b18:	4603      	mov	r3, r0
 8105b1a:	4632      	mov	r2, r6
 8105b1c:	4619      	mov	r1, r3
 8105b1e:	68f8      	ldr	r0, [r7, #12]
 8105b20:	f000 fae1 	bl	81060e6 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 8105b24:	f107 030c 	add.w	r3, r7, #12
 8105b28:	2110      	movs	r1, #16
 8105b2a:	4618      	mov	r0, r3
 8105b2c:	f7ff fb39 	bl	81051a2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8105b30:	4603      	mov	r3, r0
 8105b32:	462a      	mov	r2, r5
 8105b34:	68b9      	ldr	r1, [r7, #8]
 8105b36:	4618      	mov	r0, r3
 8105b38:	f000 fb3b 	bl	81061b2 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 8105b3c:	e004      	b.n	8105b48 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x68>
	std::__insertion_sort(__first, __last, __comp);
 8105b3e:	4622      	mov	r2, r4
 8105b40:	68b9      	ldr	r1, [r7, #8]
 8105b42:	68f8      	ldr	r0, [r7, #12]
 8105b44:	f000 facf 	bl	81060e6 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>
    }
 8105b48:	bf00      	nop
 8105b4a:	3714      	adds	r7, #20
 8105b4c:	46bd      	mov	sp, r7
 8105b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08105b50 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8105b50:	b480      	push	{r7}
 8105b52:	b083      	sub	sp, #12
 8105b54:	af00      	add	r7, sp, #0
 8105b56:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8105b58:	687b      	ldr	r3, [r7, #4]
 8105b5a:	4618      	mov	r0, r3
 8105b5c:	370c      	adds	r7, #12
 8105b5e:	46bd      	mov	sp, r7
 8105b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105b64:	4770      	bx	lr

08105b66 <_ZNSt16allocator_traitsISaIfEE9constructIfJfEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8105b66:	b580      	push	{r7, lr}
 8105b68:	b084      	sub	sp, #16
 8105b6a:	af00      	add	r7, sp, #0
 8105b6c:	60f8      	str	r0, [r7, #12]
 8105b6e:	60b9      	str	r1, [r7, #8]
 8105b70:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8105b72:	6878      	ldr	r0, [r7, #4]
 8105b74:	f7ff ffec 	bl	8105b50 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8105b78:	4603      	mov	r3, r0
 8105b7a:	461a      	mov	r2, r3
 8105b7c:	68b9      	ldr	r1, [r7, #8]
 8105b7e:	68f8      	ldr	r0, [r7, #12]
 8105b80:	f000 fb3c 	bl	81061fc <_ZNSt15__new_allocatorIfE9constructIfJfEEEvPT_DpOT0_>
	}
 8105b84:	bf00      	nop
 8105b86:	3710      	adds	r7, #16
 8105b88:	46bd      	mov	sp, r7
 8105b8a:	bd80      	pop	{r7, pc}

08105b8c <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8105b8c:	b5b0      	push	{r4, r5, r7, lr}
 8105b8e:	b08c      	sub	sp, #48	@ 0x30
 8105b90:	af00      	add	r7, sp, #0
 8105b92:	60f8      	str	r0, [r7, #12]
 8105b94:	60b9      	str	r1, [r7, #8]
 8105b96:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8105b98:	4a59      	ldr	r2, [pc, #356]	@ (8105d00 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x174>)
 8105b9a:	2101      	movs	r1, #1
 8105b9c:	68f8      	ldr	r0, [r7, #12]
 8105b9e:	f000 fb43 	bl	8106228 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>
 8105ba2:	62b8      	str	r0, [r7, #40]	@ 0x28
      pointer __old_start = this->_M_impl._M_start;
 8105ba4:	68fb      	ldr	r3, [r7, #12]
 8105ba6:	681b      	ldr	r3, [r3, #0]
 8105ba8:	627b      	str	r3, [r7, #36]	@ 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8105baa:	68fb      	ldr	r3, [r7, #12]
 8105bac:	685b      	ldr	r3, [r3, #4]
 8105bae:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8105bb0:	68f8      	ldr	r0, [r7, #12]
 8105bb2:	f7ff faa4 	bl	81050fe <_ZNSt6vectorIfSaIfEE5beginEv>
 8105bb6:	4603      	mov	r3, r0
 8105bb8:	617b      	str	r3, [r7, #20]
 8105bba:	f107 0214 	add.w	r2, r7, #20
 8105bbe:	f107 0308 	add.w	r3, r7, #8
 8105bc2:	4611      	mov	r1, r2
 8105bc4:	4618      	mov	r0, r3
 8105bc6:	f7ff ff3f 	bl	8105a48 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8105bca:	4603      	mov	r3, r0
 8105bcc:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8105bce:	68fb      	ldr	r3, [r7, #12]
 8105bd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8105bd2:	4618      	mov	r0, r3
 8105bd4:	f7ff fb8b 	bl	81052ee <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8105bd8:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8105bda:	69bb      	ldr	r3, [r7, #24]
 8105bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 8105bde:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8105be0:	69fb      	ldr	r3, [r7, #28]
 8105be2:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8105be4:	69ba      	ldr	r2, [r7, #24]
 8105be6:	18d5      	adds	r5, r2, r3
 8105be8:	6878      	ldr	r0, [r7, #4]
 8105bea:	f7ff ffb1 	bl	8105b50 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8105bee:	4603      	mov	r3, r0
 8105bf0:	461a      	mov	r2, r3
 8105bf2:	4629      	mov	r1, r5
 8105bf4:	4620      	mov	r0, r4
 8105bf6:	f7ff ffb6 	bl	8105b66 <_ZNSt16allocator_traitsISaIfEE9constructIfJfEEEvRS0_PT_DpOT0_>
	  __new_finish = pointer();
 8105bfa:	2300      	movs	r3, #0
 8105bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8105bfe:	f7ff f99b 	bl	8104f38 <_ZNSt6vectorIfSaIfEE15_S_use_relocateEv>
 8105c02:	4603      	mov	r3, r0
 8105c04:	2b00      	cmp	r3, #0
 8105c06:	d027      	beq.n	8105c58 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8105c08:	f107 0308 	add.w	r3, r7, #8
 8105c0c:	4618      	mov	r0, r3
 8105c0e:	f000 fa08 	bl	8106022 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8105c12:	4603      	mov	r3, r0
 8105c14:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8105c16:	68fb      	ldr	r3, [r7, #12]
 8105c18:	4618      	mov	r0, r3
 8105c1a:	f7ff faf0 	bl	81051fe <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8105c1e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8105c20:	69ba      	ldr	r2, [r7, #24]
 8105c22:	4621      	mov	r1, r4
 8105c24:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8105c26:	f7ff fb76 	bl	8105316 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
 8105c2a:	62f8      	str	r0, [r7, #44]	@ 0x2c
	      ++__new_finish;
 8105c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105c2e:	3304      	adds	r3, #4
 8105c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8105c32:	f107 0308 	add.w	r3, r7, #8
 8105c36:	4618      	mov	r0, r3
 8105c38:	f000 f9f3 	bl	8106022 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8105c3c:	4603      	mov	r3, r0
 8105c3e:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8105c40:	68fb      	ldr	r3, [r7, #12]
 8105c42:	4618      	mov	r0, r3
 8105c44:	f7ff fadb 	bl	81051fe <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8105c48:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8105c4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8105c4c:	6a39      	ldr	r1, [r7, #32]
 8105c4e:	4620      	mov	r0, r4
 8105c50:	f7ff fb61 	bl	8105316 <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
 8105c54:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8105c56:	e026      	b.n	8105ca6 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 8105c58:	f107 0308 	add.w	r3, r7, #8
 8105c5c:	4618      	mov	r0, r3
 8105c5e:	f000 f9e0 	bl	8106022 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8105c62:	4603      	mov	r3, r0
 8105c64:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8105c66:	68fb      	ldr	r3, [r7, #12]
 8105c68:	4618      	mov	r0, r3
 8105c6a:	f7ff fac8 	bl	81051fe <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8105c6e:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8105c70:	69ba      	ldr	r2, [r7, #24]
 8105c72:	4621      	mov	r1, r4
 8105c74:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8105c76:	f000 fb1e 	bl	81062b6 <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 8105c7a:	62f8      	str	r0, [r7, #44]	@ 0x2c
	      ++__new_finish;
 8105c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105c7e:	3304      	adds	r3, #4
 8105c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
		(__position.base(), __old_finish,
 8105c82:	f107 0308 	add.w	r3, r7, #8
 8105c86:	4618      	mov	r0, r3
 8105c88:	f000 f9cb 	bl	8106022 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8105c8c:	4603      	mov	r3, r0
 8105c8e:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8105c90:	68fb      	ldr	r3, [r7, #12]
 8105c92:	4618      	mov	r0, r3
 8105c94:	f7ff fab3 	bl	81051fe <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8105c98:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8105c9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8105c9c:	6a39      	ldr	r1, [r7, #32]
 8105c9e:	4620      	mov	r0, r4
 8105ca0:	f000 fb09 	bl	81062b6 <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 8105ca4:	62f8      	str	r0, [r7, #44]	@ 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8105ca6:	f7ff f947 	bl	8104f38 <_ZNSt6vectorIfSaIfEE15_S_use_relocateEv>
 8105caa:	4603      	mov	r3, r0
 8105cac:	f083 0301 	eor.w	r3, r3, #1
 8105cb0:	b2db      	uxtb	r3, r3
 8105cb2:	2b00      	cmp	r3, #0
 8105cb4:	d009      	beq.n	8105cca <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8105cb6:	68fb      	ldr	r3, [r7, #12]
 8105cb8:	4618      	mov	r0, r3
 8105cba:	f7ff faa0 	bl	81051fe <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8105cbe:	4603      	mov	r3, r0
 8105cc0:	461a      	mov	r2, r3
 8105cc2:	6a39      	ldr	r1, [r7, #32]
 8105cc4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8105cc6:	f7ff faa5 	bl	8105214 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
      _M_deallocate(__old_start,
 8105cca:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8105ccc:	68fb      	ldr	r3, [r7, #12]
 8105cce:	689a      	ldr	r2, [r3, #8]
 8105cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105cd2:	1ad3      	subs	r3, r2, r3
 8105cd4:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8105cd6:	461a      	mov	r2, r3
 8105cd8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8105cda:	f7ff fad4 	bl	8105286 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      this->_M_impl._M_start = __new_start;
 8105cde:	68fb      	ldr	r3, [r7, #12]
 8105ce0:	69ba      	ldr	r2, [r7, #24]
 8105ce2:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8105ce4:	68fb      	ldr	r3, [r7, #12]
 8105ce6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8105ce8:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8105cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105cec:	009b      	lsls	r3, r3, #2
 8105cee:	69ba      	ldr	r2, [r7, #24]
 8105cf0:	441a      	add	r2, r3
 8105cf2:	68fb      	ldr	r3, [r7, #12]
 8105cf4:	609a      	str	r2, [r3, #8]
    }
 8105cf6:	bf00      	nop
 8105cf8:	3730      	adds	r7, #48	@ 0x30
 8105cfa:	46bd      	mov	sp, r7
 8105cfc:	bdb0      	pop	{r4, r5, r7, pc}
 8105cfe:	bf00      	nop
 8105d00:	0811cd24 	.word	0x0811cd24

08105d04 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8105d04:	b590      	push	{r4, r7, lr}
 8105d06:	b083      	sub	sp, #12
 8105d08:	af00      	add	r7, sp, #0
 8105d0a:	6078      	str	r0, [r7, #4]
 8105d0c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8105d0e:	6878      	ldr	r0, [r7, #4]
 8105d10:	f000 f987 	bl	8106022 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8105d14:	4603      	mov	r3, r0
 8105d16:	681c      	ldr	r4, [r3, #0]
 8105d18:	6838      	ldr	r0, [r7, #0]
 8105d1a:	f000 f982 	bl	8106022 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8105d1e:	4603      	mov	r3, r0
 8105d20:	681b      	ldr	r3, [r3, #0]
 8105d22:	429c      	cmp	r4, r3
 8105d24:	bf0c      	ite	eq
 8105d26:	2301      	moveq	r3, #1
 8105d28:	2300      	movne	r3, #0
 8105d2a:	b2db      	uxtb	r3, r3
 8105d2c:	4618      	mov	r0, r3
 8105d2e:	370c      	adds	r7, #12
 8105d30:	46bd      	mov	sp, r7
 8105d32:	bd90      	pop	{r4, r7, pc}

08105d34 <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>:
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 8105d34:	b580      	push	{r7, lr}
 8105d36:	b084      	sub	sp, #16
 8105d38:	af00      	add	r7, sp, #0
 8105d3a:	60f8      	str	r0, [r7, #12]
 8105d3c:	60b9      	str	r1, [r7, #8]
 8105d3e:	607a      	str	r2, [r7, #4]
      for (; __first1 != __last1; ++__first1, (void)++__first2)
 8105d40:	e00c      	b.n	8105d5c <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_+0x28>
	std::iter_swap(__first1, __first2);
 8105d42:	6879      	ldr	r1, [r7, #4]
 8105d44:	68f8      	ldr	r0, [r7, #12]
 8105d46:	f000 f856 	bl	8105df6 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
      for (; __first1 != __last1; ++__first1, (void)++__first2)
 8105d4a:	f107 030c 	add.w	r3, r7, #12
 8105d4e:	4618      	mov	r0, r3
 8105d50:	f000 f868 	bl	8105e24 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 8105d54:	1d3b      	adds	r3, r7, #4
 8105d56:	4618      	mov	r0, r3
 8105d58:	f000 f864 	bl	8105e24 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 8105d5c:	f107 0208 	add.w	r2, r7, #8
 8105d60:	f107 030c 	add.w	r3, r7, #12
 8105d64:	4611      	mov	r1, r2
 8105d66:	4618      	mov	r0, r3
 8105d68:	f7ff fe56 	bl	8105a18 <_ZN9__gnu_cxxneIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8105d6c:	4603      	mov	r3, r0
 8105d6e:	2b00      	cmp	r3, #0
 8105d70:	d1e7      	bne.n	8105d42 <_ZSt11swap_rangesIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_+0xe>
      return __first2;
 8105d72:	687b      	ldr	r3, [r7, #4]
    }
 8105d74:	4618      	mov	r0, r3
 8105d76:	3710      	adds	r7, #16
 8105d78:	46bd      	mov	sp, r7
 8105d7a:	bd80      	pop	{r7, pc}

08105d7c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8105d7c:	b480      	push	{r7}
 8105d7e:	b083      	sub	sp, #12
 8105d80:	af00      	add	r7, sp, #0
 8105d82:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8105d84:	687b      	ldr	r3, [r7, #4]
 8105d86:	681b      	ldr	r3, [r3, #0]
 8105d88:	4618      	mov	r0, r3
 8105d8a:	370c      	adds	r7, #12
 8105d8c:	46bd      	mov	sp, r7
 8105d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d92:	4770      	bx	lr

08105d94 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>:
    move(_II __first, _II __last, _OI __result)
 8105d94:	b590      	push	{r4, r7, lr}
 8105d96:	b085      	sub	sp, #20
 8105d98:	af00      	add	r7, sp, #0
 8105d9a:	60f8      	str	r0, [r7, #12]
 8105d9c:	60b9      	str	r1, [r7, #8]
 8105d9e:	607a      	str	r2, [r7, #4]
      return std::__copy_move_a<true>(std::__miter_base(__first),
 8105da0:	68f8      	ldr	r0, [r7, #12]
 8105da2:	f000 faa1 	bl	81062e8 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 8105da6:	4604      	mov	r4, r0
 8105da8:	68b8      	ldr	r0, [r7, #8]
 8105daa:	f000 fa9d 	bl	81062e8 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 8105dae:	4603      	mov	r3, r0
 8105db0:	687a      	ldr	r2, [r7, #4]
 8105db2:	4619      	mov	r1, r3
 8105db4:	4620      	mov	r0, r4
 8105db6:	f000 faa2 	bl	81062fe <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>
 8105dba:	4603      	mov	r3, r0
    }
 8105dbc:	4618      	mov	r0, r3
 8105dbe:	3714      	adds	r7, #20
 8105dc0:	46bd      	mov	sp, r7
 8105dc2:	bd90      	pop	{r4, r7, pc}

08105dc4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8105dc4:	b580      	push	{r7, lr}
 8105dc6:	b084      	sub	sp, #16
 8105dc8:	af00      	add	r7, sp, #0
 8105dca:	6078      	str	r0, [r7, #4]
 8105dcc:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8105dce:	687b      	ldr	r3, [r7, #4]
 8105dd0:	681a      	ldr	r2, [r3, #0]
 8105dd2:	683b      	ldr	r3, [r7, #0]
 8105dd4:	009b      	lsls	r3, r3, #2
 8105dd6:	425b      	negs	r3, r3
 8105dd8:	4413      	add	r3, r2
 8105dda:	60fb      	str	r3, [r7, #12]
 8105ddc:	f107 020c 	add.w	r2, r7, #12
 8105de0:	f107 0308 	add.w	r3, r7, #8
 8105de4:	4611      	mov	r1, r2
 8105de6:	4618      	mov	r0, r3
 8105de8:	f7ff fb33 	bl	8105452 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 8105dec:	68bb      	ldr	r3, [r7, #8]
 8105dee:	4618      	mov	r0, r3
 8105df0:	3710      	adds	r7, #16
 8105df2:	46bd      	mov	sp, r7
 8105df4:	bd80      	pop	{r7, pc}

08105df6 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 8105df6:	b590      	push	{r4, r7, lr}
 8105df8:	b083      	sub	sp, #12
 8105dfa:	af00      	add	r7, sp, #0
 8105dfc:	6078      	str	r0, [r7, #4]
 8105dfe:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 8105e00:	1d3b      	adds	r3, r7, #4
 8105e02:	4618      	mov	r0, r3
 8105e04:	f7ff ffba 	bl	8105d7c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8105e08:	4604      	mov	r4, r0
 8105e0a:	463b      	mov	r3, r7
 8105e0c:	4618      	mov	r0, r3
 8105e0e:	f7ff ffb5 	bl	8105d7c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8105e12:	4603      	mov	r3, r0
 8105e14:	4619      	mov	r1, r3
 8105e16:	4620      	mov	r0, r4
 8105e18:	f000 fa92 	bl	8106340 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>
    }
 8105e1c:	bf00      	nop
 8105e1e:	370c      	adds	r7, #12
 8105e20:	46bd      	mov	sp, r7
 8105e22:	bd90      	pop	{r4, r7, pc}

08105e24 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8105e24:	b480      	push	{r7}
 8105e26:	b083      	sub	sp, #12
 8105e28:	af00      	add	r7, sp, #0
 8105e2a:	6078      	str	r0, [r7, #4]
	++_M_current;
 8105e2c:	687b      	ldr	r3, [r7, #4]
 8105e2e:	681b      	ldr	r3, [r3, #0]
 8105e30:	1d1a      	adds	r2, r3, #4
 8105e32:	687b      	ldr	r3, [r7, #4]
 8105e34:	601a      	str	r2, [r3, #0]
	return *this;
 8105e36:	687b      	ldr	r3, [r7, #4]
      }
 8105e38:	4618      	mov	r0, r3
 8105e3a:	370c      	adds	r7, #12
 8105e3c:	46bd      	mov	sp, r7
 8105e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e42:	4770      	bx	lr

08105e44 <_ZSt4swapIiENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8105e44:	b580      	push	{r7, lr}
 8105e46:	b084      	sub	sp, #16
 8105e48:	af00      	add	r7, sp, #0
 8105e4a:	6078      	str	r0, [r7, #4]
 8105e4c:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8105e4e:	6878      	ldr	r0, [r7, #4]
 8105e50:	f000 fa95 	bl	810637e <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 8105e54:	4603      	mov	r3, r0
 8105e56:	681b      	ldr	r3, [r3, #0]
 8105e58:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8105e5a:	6838      	ldr	r0, [r7, #0]
 8105e5c:	f000 fa8f 	bl	810637e <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 8105e60:	4603      	mov	r3, r0
 8105e62:	681a      	ldr	r2, [r3, #0]
 8105e64:	687b      	ldr	r3, [r7, #4]
 8105e66:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8105e68:	f107 030c 	add.w	r3, r7, #12
 8105e6c:	4618      	mov	r0, r3
 8105e6e:	f000 fa86 	bl	810637e <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>
 8105e72:	4603      	mov	r3, r0
 8105e74:	681a      	ldr	r2, [r3, #0]
 8105e76:	683b      	ldr	r3, [r7, #0]
 8105e78:	601a      	str	r2, [r3, #0]
    }
 8105e7a:	bf00      	nop
 8105e7c:	3710      	adds	r7, #16
 8105e7e:	46bd      	mov	sp, r7
 8105e80:	bd80      	pop	{r7, pc}

08105e82 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8105e82:	b590      	push	{r4, r7, lr}
 8105e84:	b085      	sub	sp, #20
 8105e86:	af00      	add	r7, sp, #0
 8105e88:	60f8      	str	r0, [r7, #12]
 8105e8a:	60b9      	str	r1, [r7, #8]
 8105e8c:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 8105e8e:	68f8      	ldr	r0, [r7, #12]
 8105e90:	f000 fa2a 	bl	81062e8 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 8105e94:	4604      	mov	r4, r0
 8105e96:	68b8      	ldr	r0, [r7, #8]
 8105e98:	f000 fa26 	bl	81062e8 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>
 8105e9c:	4603      	mov	r3, r0
 8105e9e:	687a      	ldr	r2, [r7, #4]
 8105ea0:	4619      	mov	r1, r3
 8105ea2:	4620      	mov	r0, r4
 8105ea4:	f000 fa76 	bl	8106394 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>
 8105ea8:	4603      	mov	r3, r0
    }
 8105eaa:	4618      	mov	r0, r3
 8105eac:	3714      	adds	r7, #20
 8105eae:	46bd      	mov	sp, r7
 8105eb0:	bd90      	pop	{r4, r7, pc}

08105eb2 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8105eb2:	b480      	push	{r7}
 8105eb4:	b083      	sub	sp, #12
 8105eb6:	af00      	add	r7, sp, #0
 8105eb8:	6078      	str	r0, [r7, #4]
	--_M_current;
 8105eba:	687b      	ldr	r3, [r7, #4]
 8105ebc:	681b      	ldr	r3, [r3, #0]
 8105ebe:	1f1a      	subs	r2, r3, #4
 8105ec0:	687b      	ldr	r3, [r7, #4]
 8105ec2:	601a      	str	r2, [r3, #0]
	return *this;
 8105ec4:	687b      	ldr	r3, [r7, #4]
      }
 8105ec6:	4618      	mov	r0, r3
 8105ec8:	370c      	adds	r7, #12
 8105eca:	46bd      	mov	sp, r7
 8105ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ed0:	4770      	bx	lr

08105ed2 <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8105ed2:	b480      	push	{r7}
 8105ed4:	b083      	sub	sp, #12
 8105ed6:	af00      	add	r7, sp, #0
 8105ed8:	6078      	str	r0, [r7, #4]
 8105eda:	6039      	str	r1, [r7, #0]
 8105edc:	bf00      	nop
 8105ede:	370c      	adds	r7, #12
 8105ee0:	46bd      	mov	sp, r7
 8105ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ee6:	4770      	bx	lr

08105ee8 <_ZNSt15__new_allocatorIfE10deallocateEPfj>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8105ee8:	b580      	push	{r7, lr}
 8105eea:	b084      	sub	sp, #16
 8105eec:	af00      	add	r7, sp, #0
 8105eee:	60f8      	str	r0, [r7, #12]
 8105ef0:	60b9      	str	r1, [r7, #8]
 8105ef2:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8105ef4:	687b      	ldr	r3, [r7, #4]
 8105ef6:	009b      	lsls	r3, r3, #2
 8105ef8:	4619      	mov	r1, r3
 8105efa:	68b8      	ldr	r0, [r7, #8]
 8105efc:	f015 fcd6 	bl	811b8ac <_ZdlPvj>
      }
 8105f00:	bf00      	nop
 8105f02:	3710      	adds	r7, #16
 8105f04:	46bd      	mov	sp, r7
 8105f06:	bd80      	pop	{r7, pc}

08105f08 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8105f08:	b580      	push	{r7, lr}
 8105f0a:	b082      	sub	sp, #8
 8105f0c:	af00      	add	r7, sp, #0
 8105f0e:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8105f10:	6878      	ldr	r0, [r7, #4]
 8105f12:	f000 fa60 	bl	81063d6 <_ZNKSt15__new_allocatorIfE8max_sizeEv>
 8105f16:	4603      	mov	r3, r0
      }
 8105f18:	4618      	mov	r0, r3
 8105f1a:	3708      	adds	r7, #8
 8105f1c:	46bd      	mov	sp, r7
 8105f1e:	bd80      	pop	{r7, pc}

08105f20 <_ZNSt15__new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8105f20:	b580      	push	{r7, lr}
 8105f22:	b084      	sub	sp, #16
 8105f24:	af00      	add	r7, sp, #0
 8105f26:	60f8      	str	r0, [r7, #12]
 8105f28:	60b9      	str	r1, [r7, #8]
 8105f2a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8105f2c:	68f8      	ldr	r0, [r7, #12]
 8105f2e:	f000 fa5e 	bl	81063ee <_ZNKSt15__new_allocatorIfE11_M_max_sizeEv>
 8105f32:	4602      	mov	r2, r0
 8105f34:	68bb      	ldr	r3, [r7, #8]
 8105f36:	4293      	cmp	r3, r2
 8105f38:	bf8c      	ite	hi
 8105f3a:	2301      	movhi	r3, #1
 8105f3c:	2300      	movls	r3, #0
 8105f3e:	b2db      	uxtb	r3, r3
 8105f40:	2b00      	cmp	r3, #0
 8105f42:	bf14      	ite	ne
 8105f44:	2301      	movne	r3, #1
 8105f46:	2300      	moveq	r3, #0
 8105f48:	b2db      	uxtb	r3, r3
 8105f4a:	2b00      	cmp	r3, #0
 8105f4c:	d007      	beq.n	8105f5e <_ZNSt15__new_allocatorIfE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8105f4e:	68bb      	ldr	r3, [r7, #8]
 8105f50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8105f54:	d301      	bcc.n	8105f5a <_ZNSt15__new_allocatorIfE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8105f56:	f015 fd7c 	bl	811ba52 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8105f5a:	f015 fd77 	bl	811ba4c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8105f5e:	68bb      	ldr	r3, [r7, #8]
 8105f60:	009b      	lsls	r3, r3, #2
 8105f62:	4618      	mov	r0, r3
 8105f64:	f015 fca4 	bl	811b8b0 <_Znwj>
 8105f68:	4603      	mov	r3, r0
      }
 8105f6a:	4618      	mov	r0, r3
 8105f6c:	3710      	adds	r7, #16
 8105f6e:	46bd      	mov	sp, r7
 8105f70:	bd80      	pop	{r7, pc}

08105f72 <_ZSt12__relocate_aIPfS0_SaIfEET0_T_S3_S2_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8105f72:	b5b0      	push	{r4, r5, r7, lr}
 8105f74:	b084      	sub	sp, #16
 8105f76:	af00      	add	r7, sp, #0
 8105f78:	60f8      	str	r0, [r7, #12]
 8105f7a:	60b9      	str	r1, [r7, #8]
 8105f7c:	607a      	str	r2, [r7, #4]
 8105f7e:	603b      	str	r3, [r7, #0]
      return std::__relocate_a_1(std::__niter_base(__first),
 8105f80:	68f8      	ldr	r0, [r7, #12]
 8105f82:	f000 fa40 	bl	8106406 <_ZSt12__niter_baseIPfET_S1_>
 8105f86:	4604      	mov	r4, r0
 8105f88:	68b8      	ldr	r0, [r7, #8]
 8105f8a:	f000 fa3c 	bl	8106406 <_ZSt12__niter_baseIPfET_S1_>
 8105f8e:	4605      	mov	r5, r0
 8105f90:	6878      	ldr	r0, [r7, #4]
 8105f92:	f000 fa38 	bl	8106406 <_ZSt12__niter_baseIPfET_S1_>
 8105f96:	4602      	mov	r2, r0
 8105f98:	683b      	ldr	r3, [r7, #0]
 8105f9a:	4629      	mov	r1, r5
 8105f9c:	4620      	mov	r0, r4
 8105f9e:	f000 fa3d 	bl	810641c <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 8105fa2:	4603      	mov	r3, r0
    }
 8105fa4:	4618      	mov	r0, r3
 8105fa6:	3710      	adds	r7, #16
 8105fa8:	46bd      	mov	sp, r7
 8105faa:	bdb0      	pop	{r4, r5, r7, pc}

08105fac <_ZSt4moveIRPfEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8105fac:	b480      	push	{r7}
 8105fae:	b083      	sub	sp, #12
 8105fb0:	af00      	add	r7, sp, #0
 8105fb2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8105fb4:	687b      	ldr	r3, [r7, #4]
 8105fb6:	4618      	mov	r0, r3
 8105fb8:	370c      	adds	r7, #12
 8105fba:	46bd      	mov	sp, r7
 8105fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105fc0:	4770      	bx	lr

08105fc2 <_ZSt18uninitialized_copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8105fc2:	b580      	push	{r7, lr}
 8105fc4:	b086      	sub	sp, #24
 8105fc6:	af00      	add	r7, sp, #0
 8105fc8:	60f8      	str	r0, [r7, #12]
 8105fca:	60b9      	str	r1, [r7, #8]
 8105fcc:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 8105fce:	2301      	movs	r3, #1
 8105fd0:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 8105fd2:	2301      	movs	r3, #1
 8105fd4:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8105fd6:	687a      	ldr	r2, [r7, #4]
 8105fd8:	68b9      	ldr	r1, [r7, #8]
 8105fda:	68f8      	ldr	r0, [r7, #12]
 8105fdc:	f000 fa3c 	bl	8106458 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPfES3_EET0_T_S6_S5_>
 8105fe0:	4603      	mov	r3, r0
    }
 8105fe2:	4618      	mov	r0, r3
 8105fe4:	3718      	adds	r7, #24
 8105fe6:	46bd      	mov	sp, r7
 8105fe8:	bd80      	pop	{r7, pc}

08105fea <_ZNSt15__new_allocatorIfEC1ERKS0_>:
      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8105fea:	b480      	push	{r7}
 8105fec:	b083      	sub	sp, #12
 8105fee:	af00      	add	r7, sp, #0
 8105ff0:	6078      	str	r0, [r7, #4]
 8105ff2:	6039      	str	r1, [r7, #0]
 8105ff4:	687b      	ldr	r3, [r7, #4]
 8105ff6:	4618      	mov	r0, r3
 8105ff8:	370c      	adds	r7, #12
 8105ffa:	46bd      	mov	sp, r7
 8105ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106000:	4770      	bx	lr

08106002 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8106002:	b580      	push	{r7, lr}
 8106004:	b084      	sub	sp, #16
 8106006:	af00      	add	r7, sp, #0
 8106008:	60f8      	str	r0, [r7, #12]
 810600a:	60b9      	str	r1, [r7, #8]
 810600c:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 810600e:	687a      	ldr	r2, [r7, #4]
 8106010:	68b9      	ldr	r1, [r7, #8]
 8106012:	68f8      	ldr	r0, [r7, #12]
 8106014:	f000 fa30 	bl	8106478 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
 8106018:	4603      	mov	r3, r0
 810601a:	4618      	mov	r0, r3
 810601c:	3710      	adds	r7, #16
 810601e:	46bd      	mov	sp, r7
 8106020:	bd80      	pop	{r7, pc}

08106022 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8106022:	b480      	push	{r7}
 8106024:	b083      	sub	sp, #12
 8106026:	af00      	add	r7, sp, #0
 8106028:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 810602a:	687b      	ldr	r3, [r7, #4]
 810602c:	4618      	mov	r0, r3
 810602e:	370c      	adds	r7, #12
 8106030:	46bd      	mov	sp, r7
 8106032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106036:	4770      	bx	lr

08106038 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>:
    __partial_sort(_RandomAccessIterator __first,
 8106038:	b590      	push	{r4, r7, lr}
 810603a:	b085      	sub	sp, #20
 810603c:	af00      	add	r7, sp, #0
 810603e:	60f8      	str	r0, [r7, #12]
 8106040:	60b9      	str	r1, [r7, #8]
 8106042:	607a      	str	r2, [r7, #4]
 8106044:	703b      	strb	r3, [r7, #0]
      std::__heap_select(__first, __middle, __last, __comp);
 8106046:	4623      	mov	r3, r4
 8106048:	687a      	ldr	r2, [r7, #4]
 810604a:	68b9      	ldr	r1, [r7, #8]
 810604c:	68f8      	ldr	r0, [r7, #12]
 810604e:	f000 fa2b 	bl	81064a8 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>
      std::__sort_heap(__first, __middle, __comp);
 8106052:	463b      	mov	r3, r7
 8106054:	461a      	mov	r2, r3
 8106056:	68b9      	ldr	r1, [r7, #8]
 8106058:	68f8      	ldr	r0, [r7, #12]
 810605a:	f000 fa58 	bl	810650e <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>
    }
 810605e:	bf00      	nop
 8106060:	3714      	adds	r7, #20
 8106062:	46bd      	mov	sp, r7
 8106064:	bd90      	pop	{r4, r7, pc}

08106066 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 8106066:	b5f0      	push	{r4, r5, r6, r7, lr}
 8106068:	b089      	sub	sp, #36	@ 0x24
 810606a:	af02      	add	r7, sp, #8
 810606c:	60f8      	str	r0, [r7, #12]
 810606e:	60b9      	str	r1, [r7, #8]
 8106070:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 8106072:	f107 020c 	add.w	r2, r7, #12
 8106076:	f107 0308 	add.w	r3, r7, #8
 810607a:	4611      	mov	r1, r2
 810607c:	4618      	mov	r0, r3
 810607e:	f7ff fce3 	bl	8105a48 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8106082:	4603      	mov	r3, r0
 8106084:	0fda      	lsrs	r2, r3, #31
 8106086:	4413      	add	r3, r2
 8106088:	105b      	asrs	r3, r3, #1
 810608a:	461a      	mov	r2, r3
 810608c:	f107 030c 	add.w	r3, r7, #12
 8106090:	4611      	mov	r1, r2
 8106092:	4618      	mov	r0, r3
 8106094:	f7ff f885 	bl	81051a2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8106098:	4603      	mov	r3, r0
 810609a:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 810609c:	f107 030c 	add.w	r3, r7, #12
 81060a0:	2101      	movs	r1, #1
 81060a2:	4618      	mov	r0, r3
 81060a4:	f7ff f87d 	bl	81051a2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 81060a8:	4604      	mov	r4, r0
 81060aa:	f107 0308 	add.w	r3, r7, #8
 81060ae:	2101      	movs	r1, #1
 81060b0:	4618      	mov	r0, r3
 81060b2:	f7ff fe87 	bl	8105dc4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmiEi>
 81060b6:	4603      	mov	r3, r0
 81060b8:	f88d 5000 	strb.w	r5, [sp]
 81060bc:	697a      	ldr	r2, [r7, #20]
 81060be:	4621      	mov	r1, r4
 81060c0:	68f8      	ldr	r0, [r7, #12]
 81060c2:	f000 fa4b 	bl	810655c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 81060c6:	f107 030c 	add.w	r3, r7, #12
 81060ca:	2101      	movs	r1, #1
 81060cc:	4618      	mov	r0, r3
 81060ce:	f7ff f868 	bl	81051a2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 81060d2:	4633      	mov	r3, r6
 81060d4:	68fa      	ldr	r2, [r7, #12]
 81060d6:	68b9      	ldr	r1, [r7, #8]
 81060d8:	f000 fa95 	bl	8106606 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_>
 81060dc:	4603      	mov	r3, r0
    }
 81060de:	4618      	mov	r0, r3
 81060e0:	371c      	adds	r7, #28
 81060e2:	46bd      	mov	sp, r7
 81060e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

081060e6 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 81060e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 81060e8:	b087      	sub	sp, #28
 81060ea:	af00      	add	r7, sp, #0
 81060ec:	60f8      	str	r0, [r7, #12]
 81060ee:	60b9      	str	r1, [r7, #8]
 81060f0:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 81060f2:	f107 0208 	add.w	r2, r7, #8
 81060f6:	f107 030c 	add.w	r3, r7, #12
 81060fa:	4611      	mov	r1, r2
 81060fc:	4618      	mov	r0, r3
 81060fe:	f7ff fe01 	bl	8105d04 <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8106102:	4603      	mov	r3, r0
 8106104:	2b00      	cmp	r3, #0
 8106106:	d150      	bne.n	81061aa <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xc4>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8106108:	f107 030c 	add.w	r3, r7, #12
 810610c:	2101      	movs	r1, #1
 810610e:	4618      	mov	r0, r3
 8106110:	f7ff f847 	bl	81051a2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8106114:	4603      	mov	r3, r0
 8106116:	617b      	str	r3, [r7, #20]
 8106118:	e03b      	b.n	8106192 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xac>
	  if (__comp(__i, __first))
 810611a:	1d3b      	adds	r3, r7, #4
 810611c:	68fa      	ldr	r2, [r7, #12]
 810611e:	6979      	ldr	r1, [r7, #20]
 8106120:	4618      	mov	r0, r3
 8106122:	f000 fab8 	bl	8106696 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 8106126:	4603      	mov	r3, r0
 8106128:	2b00      	cmp	r3, #0
 810612a:	d026      	beq.n	810617a <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x94>
		__val = _GLIBCXX_MOVE(*__i);
 810612c:	f107 0314 	add.w	r3, r7, #20
 8106130:	4618      	mov	r0, r3
 8106132:	f7ff fe23 	bl	8105d7c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8106136:	4603      	mov	r3, r0
 8106138:	4618      	mov	r0, r3
 810613a:	f7ff f9c7 	bl	81054cc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810613e:	4603      	mov	r3, r0
 8106140:	681b      	ldr	r3, [r3, #0]
 8106142:	613b      	str	r3, [r7, #16]
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 8106144:	f107 0314 	add.w	r3, r7, #20
 8106148:	2101      	movs	r1, #1
 810614a:	4618      	mov	r0, r3
 810614c:	f7ff f829 	bl	81051a2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8106150:	4603      	mov	r3, r0
 8106152:	461a      	mov	r2, r3
 8106154:	6979      	ldr	r1, [r7, #20]
 8106156:	68f8      	ldr	r0, [r7, #12]
 8106158:	f7ff fe93 	bl	8105e82 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET0_T_S8_S7_>
	      *__first = _GLIBCXX_MOVE(__val);
 810615c:	f107 0310 	add.w	r3, r7, #16
 8106160:	4618      	mov	r0, r3
 8106162:	f7ff f9b3 	bl	81054cc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8106166:	4604      	mov	r4, r0
 8106168:	f107 030c 	add.w	r3, r7, #12
 810616c:	4618      	mov	r0, r3
 810616e:	f7ff fe05 	bl	8105d7c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8106172:	4602      	mov	r2, r0
 8106174:	6823      	ldr	r3, [r4, #0]
 8106176:	6013      	str	r3, [r2, #0]
 8106178:	e006      	b.n	8106188 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xa2>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 810617a:	4630      	mov	r0, r6
 810617c:	f7fe fc65 	bl	8104a4a <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	    std::__unguarded_linear_insert(__i,
 8106180:	4629      	mov	r1, r5
 8106182:	6978      	ldr	r0, [r7, #20]
 8106184:	f000 faac 	bl	81066e0 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8106188:	f107 0314 	add.w	r3, r7, #20
 810618c:	4618      	mov	r0, r3
 810618e:	f7ff fe49 	bl	8105e24 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 8106192:	f107 0208 	add.w	r2, r7, #8
 8106196:	f107 0314 	add.w	r3, r7, #20
 810619a:	4611      	mov	r1, r2
 810619c:	4618      	mov	r0, r3
 810619e:	f7ff fc3b 	bl	8105a18 <_ZN9__gnu_cxxneIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 81061a2:	4603      	mov	r3, r0
 81061a4:	2b00      	cmp	r3, #0
 81061a6:	d1b8      	bne.n	810611a <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x34>
 81061a8:	e000      	b.n	81061ac <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0xc6>
      if (__first == __last) return;
 81061aa:	bf00      	nop
    }
 81061ac:	371c      	adds	r7, #28
 81061ae:	46bd      	mov	sp, r7
 81061b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

081061b2 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 81061b2:	b5b0      	push	{r4, r5, r7, lr}
 81061b4:	b086      	sub	sp, #24
 81061b6:	af00      	add	r7, sp, #0
 81061b8:	60f8      	str	r0, [r7, #12]
 81061ba:	60b9      	str	r1, [r7, #8]
 81061bc:	713a      	strb	r2, [r7, #4]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 81061be:	68fb      	ldr	r3, [r7, #12]
 81061c0:	617b      	str	r3, [r7, #20]
 81061c2:	e00b      	b.n	81061dc <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x2a>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
 81061c4:	4628      	mov	r0, r5
 81061c6:	f7fe fc40 	bl	8104a4a <_ZN9__gnu_cxx5__ops15__val_comp_iterENS0_15_Iter_less_iterE>
	std::__unguarded_linear_insert(__i,
 81061ca:	4621      	mov	r1, r4
 81061cc:	6978      	ldr	r0, [r7, #20]
 81061ce:	f000 fa87 	bl	81066e0 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 81061d2:	f107 0314 	add.w	r3, r7, #20
 81061d6:	4618      	mov	r0, r3
 81061d8:	f7ff fe24 	bl	8105e24 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 81061dc:	f107 0208 	add.w	r2, r7, #8
 81061e0:	f107 0314 	add.w	r3, r7, #20
 81061e4:	4611      	mov	r1, r2
 81061e6:	4618      	mov	r0, r3
 81061e8:	f7ff fc16 	bl	8105a18 <_ZN9__gnu_cxxneIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 81061ec:	4603      	mov	r3, r0
 81061ee:	2b00      	cmp	r3, #0
 81061f0:	d1e8      	bne.n	81061c4 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_T0_+0x12>
    }
 81061f2:	bf00      	nop
 81061f4:	bf00      	nop
 81061f6:	3718      	adds	r7, #24
 81061f8:	46bd      	mov	sp, r7
 81061fa:	bdb0      	pop	{r4, r5, r7, pc}

081061fc <_ZNSt15__new_allocatorIfE9constructIfJfEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 81061fc:	b590      	push	{r4, r7, lr}
 81061fe:	b085      	sub	sp, #20
 8106200:	af00      	add	r7, sp, #0
 8106202:	60f8      	str	r0, [r7, #12]
 8106204:	60b9      	str	r1, [r7, #8]
 8106206:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8106208:	68bb      	ldr	r3, [r7, #8]
 810620a:	4619      	mov	r1, r3
 810620c:	2004      	movs	r0, #4
 810620e:	f7fa fdd3 	bl	8100db8 <_ZnwjPv>
 8106212:	4604      	mov	r4, r0
 8106214:	6878      	ldr	r0, [r7, #4]
 8106216:	f7ff fc9b 	bl	8105b50 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 810621a:	4603      	mov	r3, r0
 810621c:	681b      	ldr	r3, [r3, #0]
 810621e:	6023      	str	r3, [r4, #0]
 8106220:	bf00      	nop
 8106222:	3714      	adds	r7, #20
 8106224:	46bd      	mov	sp, r7
 8106226:	bd90      	pop	{r4, r7, pc}

08106228 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8106228:	b590      	push	{r4, r7, lr}
 810622a:	b087      	sub	sp, #28
 810622c:	af00      	add	r7, sp, #0
 810622e:	60f8      	str	r0, [r7, #12]
 8106230:	60b9      	str	r1, [r7, #8]
 8106232:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8106234:	68f8      	ldr	r0, [r7, #12]
 8106236:	f7ff f839 	bl	81052ac <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 810623a:	4604      	mov	r4, r0
 810623c:	68f8      	ldr	r0, [r7, #12]
 810623e:	f7fe ff11 	bl	8105064 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8106242:	4603      	mov	r3, r0
 8106244:	1ae2      	subs	r2, r4, r3
 8106246:	68bb      	ldr	r3, [r7, #8]
 8106248:	429a      	cmp	r2, r3
 810624a:	bf34      	ite	cc
 810624c:	2301      	movcc	r3, #1
 810624e:	2300      	movcs	r3, #0
 8106250:	b2db      	uxtb	r3, r3
 8106252:	2b00      	cmp	r3, #0
 8106254:	d002      	beq.n	810625c <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8106256:	6878      	ldr	r0, [r7, #4]
 8106258:	f015 fbfe 	bl	811ba58 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 810625c:	68f8      	ldr	r0, [r7, #12]
 810625e:	f7fe ff01 	bl	8105064 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8106262:	4604      	mov	r4, r0
 8106264:	68f8      	ldr	r0, [r7, #12]
 8106266:	f7fe fefd 	bl	8105064 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 810626a:	4603      	mov	r3, r0
 810626c:	613b      	str	r3, [r7, #16]
 810626e:	f107 0208 	add.w	r2, r7, #8
 8106272:	f107 0310 	add.w	r3, r7, #16
 8106276:	4611      	mov	r1, r2
 8106278:	4618      	mov	r0, r3
 810627a:	f7fc ff39 	bl	81030f0 <_ZSt3maxIjERKT_S2_S2_>
 810627e:	4603      	mov	r3, r0
 8106280:	681b      	ldr	r3, [r3, #0]
 8106282:	4423      	add	r3, r4
 8106284:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8106286:	68f8      	ldr	r0, [r7, #12]
 8106288:	f7fe feec 	bl	8105064 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 810628c:	4602      	mov	r2, r0
 810628e:	697b      	ldr	r3, [r7, #20]
 8106290:	4293      	cmp	r3, r2
 8106292:	d306      	bcc.n	81062a2 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x7a>
 8106294:	68f8      	ldr	r0, [r7, #12]
 8106296:	f7ff f809 	bl	81052ac <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 810629a:	4602      	mov	r2, r0
 810629c:	697b      	ldr	r3, [r7, #20]
 810629e:	4293      	cmp	r3, r2
 81062a0:	d904      	bls.n	81062ac <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x84>
 81062a2:	68f8      	ldr	r0, [r7, #12]
 81062a4:	f7ff f802 	bl	81052ac <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 81062a8:	4603      	mov	r3, r0
 81062aa:	e000      	b.n	81062ae <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x86>
 81062ac:	697b      	ldr	r3, [r7, #20]
      }
 81062ae:	4618      	mov	r0, r3
 81062b0:	371c      	adds	r7, #28
 81062b2:	46bd      	mov	sp, r7
 81062b4:	bd90      	pop	{r4, r7, pc}

081062b6 <_ZSt34__uninitialized_move_if_noexcept_aIPfS0_SaIfEET0_T_S3_S2_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 81062b6:	b590      	push	{r4, r7, lr}
 81062b8:	b085      	sub	sp, #20
 81062ba:	af00      	add	r7, sp, #0
 81062bc:	60f8      	str	r0, [r7, #12]
 81062be:	60b9      	str	r1, [r7, #8]
 81062c0:	607a      	str	r2, [r7, #4]
 81062c2:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 81062c4:	68f8      	ldr	r0, [r7, #12]
 81062c6:	f7ff f83a 	bl	810533e <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 81062ca:	4604      	mov	r4, r0
 81062cc:	68b8      	ldr	r0, [r7, #8]
 81062ce:	f7ff f836 	bl	810533e <_ZSt32__make_move_if_noexcept_iteratorIfSt13move_iteratorIPfEET0_PT_>
 81062d2:	4601      	mov	r1, r0
 81062d4:	683b      	ldr	r3, [r7, #0]
 81062d6:	687a      	ldr	r2, [r7, #4]
 81062d8:	4620      	mov	r0, r4
 81062da:	f7ff fb20 	bl	810591e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPfES1_fET0_T_S4_S3_RSaIT1_E>
 81062de:	4603      	mov	r3, r0
    }
 81062e0:	4618      	mov	r0, r3
 81062e2:	3714      	adds	r7, #20
 81062e4:	46bd      	mov	sp, r7
 81062e6:	bd90      	pop	{r4, r7, pc}

081062e8 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEET_S7_>:
    __miter_base(_Iterator __it)
 81062e8:	b480      	push	{r7}
 81062ea:	b083      	sub	sp, #12
 81062ec:	af00      	add	r7, sp, #0
 81062ee:	6078      	str	r0, [r7, #4]
    { return __it; }
 81062f0:	687b      	ldr	r3, [r7, #4]
 81062f2:	4618      	mov	r0, r3
 81062f4:	370c      	adds	r7, #12
 81062f6:	46bd      	mov	sp, r7
 81062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81062fc:	4770      	bx	lr

081062fe <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 81062fe:	b5b0      	push	{r4, r5, r7, lr}
 8106300:	b084      	sub	sp, #16
 8106302:	af00      	add	r7, sp, #0
 8106304:	60f8      	str	r0, [r7, #12]
 8106306:	60b9      	str	r1, [r7, #8]
 8106308:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 810630a:	68f8      	ldr	r0, [r7, #12]
 810630c:	f000 fa33 	bl	8106776 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8106310:	4604      	mov	r4, r0
 8106312:	68b8      	ldr	r0, [r7, #8]
 8106314:	f000 fa2f 	bl	8106776 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8106318:	4605      	mov	r5, r0
 810631a:	6878      	ldr	r0, [r7, #4]
 810631c:	f000 fa2b 	bl	8106776 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8106320:	4603      	mov	r3, r0
 8106322:	461a      	mov	r2, r3
 8106324:	4629      	mov	r1, r5
 8106326:	4620      	mov	r0, r4
 8106328:	f000 fa33 	bl	8106792 <_ZSt14__copy_move_a1ILb1EPfS0_ET1_T0_S2_S1_>
 810632c:	4603      	mov	r3, r0
 810632e:	4619      	mov	r1, r3
 8106330:	6878      	ldr	r0, [r7, #4]
 8106332:	f000 fa3e 	bl	81067b2 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>
 8106336:	4603      	mov	r3, r0
    }
 8106338:	4618      	mov	r0, r3
 810633a:	3710      	adds	r7, #16
 810633c:	46bd      	mov	sp, r7
 810633e:	bdb0      	pop	{r4, r5, r7, pc}

08106340 <_ZSt4swapIfENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS4_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SE_>:
    swap(_Tp& __a, _Tp& __b)
 8106340:	b580      	push	{r7, lr}
 8106342:	b084      	sub	sp, #16
 8106344:	af00      	add	r7, sp, #0
 8106346:	6078      	str	r0, [r7, #4]
 8106348:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 810634a:	6878      	ldr	r0, [r7, #4]
 810634c:	f7ff f8be 	bl	81054cc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8106350:	4603      	mov	r3, r0
 8106352:	681b      	ldr	r3, [r3, #0]
 8106354:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8106356:	6838      	ldr	r0, [r7, #0]
 8106358:	f7ff f8b8 	bl	81054cc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810635c:	4603      	mov	r3, r0
 810635e:	681a      	ldr	r2, [r3, #0]
 8106360:	687b      	ldr	r3, [r7, #4]
 8106362:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8106364:	f107 030c 	add.w	r3, r7, #12
 8106368:	4618      	mov	r0, r3
 810636a:	f7ff f8af 	bl	81054cc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810636e:	4603      	mov	r3, r0
 8106370:	681a      	ldr	r2, [r3, #0]
 8106372:	683b      	ldr	r3, [r7, #0]
 8106374:	601a      	str	r2, [r3, #0]
    }
 8106376:	bf00      	nop
 8106378:	3710      	adds	r7, #16
 810637a:	46bd      	mov	sp, r7
 810637c:	bd80      	pop	{r7, pc}

0810637e <_ZSt4moveIRiEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 810637e:	b480      	push	{r7}
 8106380:	b083      	sub	sp, #12
 8106382:	af00      	add	r7, sp, #0
 8106384:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8106386:	687b      	ldr	r3, [r7, #4]
 8106388:	4618      	mov	r0, r3
 810638a:	370c      	adds	r7, #12
 810638c:	46bd      	mov	sp, r7
 810638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106392:	4770      	bx	lr

08106394 <_ZSt22__copy_move_backward_aILb1EN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_ET1_T0_S8_S7_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8106394:	b5b0      	push	{r4, r5, r7, lr}
 8106396:	b084      	sub	sp, #16
 8106398:	af00      	add	r7, sp, #0
 810639a:	60f8      	str	r0, [r7, #12]
 810639c:	60b9      	str	r1, [r7, #8]
 810639e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 81063a0:	68f8      	ldr	r0, [r7, #12]
 81063a2:	f000 f9e8 	bl	8106776 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 81063a6:	4604      	mov	r4, r0
 81063a8:	68b8      	ldr	r0, [r7, #8]
 81063aa:	f000 f9e4 	bl	8106776 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 81063ae:	4605      	mov	r5, r0
 81063b0:	6878      	ldr	r0, [r7, #4]
 81063b2:	f000 f9e0 	bl	8106776 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 81063b6:	4603      	mov	r3, r0
 81063b8:	461a      	mov	r2, r3
 81063ba:	4629      	mov	r1, r5
 81063bc:	4620      	mov	r0, r4
 81063be:	f000 fa0f 	bl	81067e0 <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>
 81063c2:	4603      	mov	r3, r0
 81063c4:	4619      	mov	r1, r3
 81063c6:	6878      	ldr	r0, [r7, #4]
 81063c8:	f000 f9f3 	bl	81067b2 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>
 81063cc:	4603      	mov	r3, r0
    }
 81063ce:	4618      	mov	r0, r3
 81063d0:	3710      	adds	r7, #16
 81063d2:	46bd      	mov	sp, r7
 81063d4:	bdb0      	pop	{r4, r5, r7, pc}

081063d6 <_ZNKSt15__new_allocatorIfE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 81063d6:	b580      	push	{r7, lr}
 81063d8:	b082      	sub	sp, #8
 81063da:	af00      	add	r7, sp, #0
 81063dc:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 81063de:	6878      	ldr	r0, [r7, #4]
 81063e0:	f000 f805 	bl	81063ee <_ZNKSt15__new_allocatorIfE11_M_max_sizeEv>
 81063e4:	4603      	mov	r3, r0
 81063e6:	4618      	mov	r0, r3
 81063e8:	3708      	adds	r7, #8
 81063ea:	46bd      	mov	sp, r7
 81063ec:	bd80      	pop	{r7, pc}

081063ee <_ZNKSt15__new_allocatorIfE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 81063ee:	b480      	push	{r7}
 81063f0:	b083      	sub	sp, #12
 81063f2:	af00      	add	r7, sp, #0
 81063f4:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 81063f6:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      }
 81063fa:	4618      	mov	r0, r3
 81063fc:	370c      	adds	r7, #12
 81063fe:	46bd      	mov	sp, r7
 8106400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106404:	4770      	bx	lr

08106406 <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 8106406:	b480      	push	{r7}
 8106408:	b083      	sub	sp, #12
 810640a:	af00      	add	r7, sp, #0
 810640c:	6078      	str	r0, [r7, #4]
    { return __it; }
 810640e:	687b      	ldr	r3, [r7, #4]
 8106410:	4618      	mov	r0, r3
 8106412:	370c      	adds	r7, #12
 8106414:	46bd      	mov	sp, r7
 8106416:	f85d 7b04 	ldr.w	r7, [sp], #4
 810641a:	4770      	bx	lr

0810641c <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 810641c:	b580      	push	{r7, lr}
 810641e:	b086      	sub	sp, #24
 8106420:	af00      	add	r7, sp, #0
 8106422:	60f8      	str	r0, [r7, #12]
 8106424:	60b9      	str	r1, [r7, #8]
 8106426:	607a      	str	r2, [r7, #4]
 8106428:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 810642a:	68ba      	ldr	r2, [r7, #8]
 810642c:	68fb      	ldr	r3, [r7, #12]
 810642e:	1ad3      	subs	r3, r2, r3
 8106430:	109b      	asrs	r3, r3, #2
 8106432:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8106434:	697b      	ldr	r3, [r7, #20]
 8106436:	2b00      	cmp	r3, #0
 8106438:	dd06      	ble.n	8106448 <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x2c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 810643a:	697b      	ldr	r3, [r7, #20]
 810643c:	009b      	lsls	r3, r3, #2
 810643e:	461a      	mov	r2, r3
 8106440:	68f9      	ldr	r1, [r7, #12]
 8106442:	6878      	ldr	r0, [r7, #4]
 8106444:	f015 fd67 	bl	811bf16 <memmove>
      return __result + __count;
 8106448:	697b      	ldr	r3, [r7, #20]
 810644a:	009b      	lsls	r3, r3, #2
 810644c:	687a      	ldr	r2, [r7, #4]
 810644e:	4413      	add	r3, r2
    }
 8106450:	4618      	mov	r0, r3
 8106452:	3718      	adds	r7, #24
 8106454:	46bd      	mov	sp, r7
 8106456:	bd80      	pop	{r7, pc}

08106458 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPfES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8106458:	b580      	push	{r7, lr}
 810645a:	b084      	sub	sp, #16
 810645c:	af00      	add	r7, sp, #0
 810645e:	60f8      	str	r0, [r7, #12]
 8106460:	60b9      	str	r1, [r7, #8]
 8106462:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8106464:	687a      	ldr	r2, [r7, #4]
 8106466:	68b9      	ldr	r1, [r7, #8]
 8106468:	68f8      	ldr	r0, [r7, #12]
 810646a:	f000 f9c9 	bl	8106800 <_ZSt4copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>
 810646e:	4603      	mov	r3, r0
 8106470:	4618      	mov	r0, r3
 8106472:	3710      	adds	r7, #16
 8106474:	46bd      	mov	sp, r7
 8106476:	bd80      	pop	{r7, pc}

08106478 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 8106478:	b590      	push	{r4, r7, lr}
 810647a:	b085      	sub	sp, #20
 810647c:	af00      	add	r7, sp, #0
 810647e:	60f8      	str	r0, [r7, #12]
 8106480:	60b9      	str	r1, [r7, #8]
 8106482:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8106484:	68f8      	ldr	r0, [r7, #12]
 8106486:	f000 f9d3 	bl	8106830 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 810648a:	4604      	mov	r4, r0
 810648c:	68b8      	ldr	r0, [r7, #8]
 810648e:	f000 f9cf 	bl	8106830 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
 8106492:	4603      	mov	r3, r0
 8106494:	687a      	ldr	r2, [r7, #4]
 8106496:	4619      	mov	r1, r3
 8106498:	4620      	mov	r0, r4
 810649a:	f000 f9d4 	bl	8106846 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>
 810649e:	4603      	mov	r3, r0
    }
 81064a0:	4618      	mov	r0, r3
 81064a2:	3714      	adds	r7, #20
 81064a4:	46bd      	mov	sp, r7
 81064a6:	bd90      	pop	{r4, r7, pc}

081064a8 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_>:
    __heap_select(_RandomAccessIterator __first,
 81064a8:	b580      	push	{r7, lr}
 81064aa:	b086      	sub	sp, #24
 81064ac:	af00      	add	r7, sp, #0
 81064ae:	60f8      	str	r0, [r7, #12]
 81064b0:	60b9      	str	r1, [r7, #8]
 81064b2:	607a      	str	r2, [r7, #4]
 81064b4:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 81064b6:	463b      	mov	r3, r7
 81064b8:	461a      	mov	r2, r3
 81064ba:	68b9      	ldr	r1, [r7, #8]
 81064bc:	68f8      	ldr	r0, [r7, #12]
 81064be:	f000 f9e5 	bl	810688c <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 81064c2:	68bb      	ldr	r3, [r7, #8]
 81064c4:	617b      	str	r3, [r7, #20]
 81064c6:	e013      	b.n	81064f0 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x48>
	if (__comp(__i, __first))
 81064c8:	463b      	mov	r3, r7
 81064ca:	68fa      	ldr	r2, [r7, #12]
 81064cc:	6979      	ldr	r1, [r7, #20]
 81064ce:	4618      	mov	r0, r3
 81064d0:	f000 f8e1 	bl	8106696 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 81064d4:	4603      	mov	r3, r0
 81064d6:	2b00      	cmp	r3, #0
 81064d8:	d005      	beq.n	81064e6 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x3e>
	  std::__pop_heap(__first, __middle, __i, __comp);
 81064da:	463b      	mov	r3, r7
 81064dc:	697a      	ldr	r2, [r7, #20]
 81064de:	68b9      	ldr	r1, [r7, #8]
 81064e0:	68f8      	ldr	r0, [r7, #12]
 81064e2:	f000 fa41 	bl	8106968 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 81064e6:	f107 0314 	add.w	r3, r7, #20
 81064ea:	4618      	mov	r0, r3
 81064ec:	f7ff fc9a 	bl	8105e24 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 81064f0:	1d3a      	adds	r2, r7, #4
 81064f2:	f107 0314 	add.w	r3, r7, #20
 81064f6:	4611      	mov	r1, r2
 81064f8:	4618      	mov	r0, r3
 81064fa:	f000 fa1d 	bl	8106938 <_ZN9__gnu_cxxltIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 81064fe:	4603      	mov	r3, r0
 8106500:	2b00      	cmp	r3, #0
 8106502:	d1e1      	bne.n	81064c8 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_T0_+0x20>
    }
 8106504:	bf00      	nop
 8106506:	bf00      	nop
 8106508:	3718      	adds	r7, #24
 810650a:	46bd      	mov	sp, r7
 810650c:	bd80      	pop	{r7, pc}

0810650e <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>:
    }

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 810650e:	b580      	push	{r7, lr}
 8106510:	b084      	sub	sp, #16
 8106512:	af00      	add	r7, sp, #0
 8106514:	60f8      	str	r0, [r7, #12]
 8106516:	60b9      	str	r1, [r7, #8]
 8106518:	607a      	str	r2, [r7, #4]
		_Compare& __comp)
    {
      while (__last - __first > 1)
 810651a:	e00a      	b.n	8106532 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0x24>
	{
	  --__last;
 810651c:	f107 0308 	add.w	r3, r7, #8
 8106520:	4618      	mov	r0, r3
 8106522:	f7ff fcc6 	bl	8105eb2 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  std::__pop_heap(__first, __last, __last, __comp);
 8106526:	687b      	ldr	r3, [r7, #4]
 8106528:	68ba      	ldr	r2, [r7, #8]
 810652a:	68b9      	ldr	r1, [r7, #8]
 810652c:	68f8      	ldr	r0, [r7, #12]
 810652e:	f000 fa1b 	bl	8106968 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>
      while (__last - __first > 1)
 8106532:	f107 020c 	add.w	r2, r7, #12
 8106536:	f107 0308 	add.w	r3, r7, #8
 810653a:	4611      	mov	r1, r2
 810653c:	4618      	mov	r0, r3
 810653e:	f7ff fa83 	bl	8105a48 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8106542:	4603      	mov	r3, r0
 8106544:	2b01      	cmp	r3, #1
 8106546:	bfcc      	ite	gt
 8106548:	2301      	movgt	r3, #1
 810654a:	2300      	movle	r3, #0
 810654c:	b2db      	uxtb	r3, r3
 810654e:	2b00      	cmp	r3, #0
 8106550:	d1e4      	bne.n	810651c <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xe>
	}
    }
 8106552:	bf00      	nop
 8106554:	bf00      	nop
 8106556:	3710      	adds	r7, #16
 8106558:	46bd      	mov	sp, r7
 810655a:	bd80      	pop	{r7, pc}

0810655c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 810655c:	b580      	push	{r7, lr}
 810655e:	b084      	sub	sp, #16
 8106560:	af00      	add	r7, sp, #0
 8106562:	60f8      	str	r0, [r7, #12]
 8106564:	60b9      	str	r1, [r7, #8]
 8106566:	607a      	str	r2, [r7, #4]
 8106568:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 810656a:	687a      	ldr	r2, [r7, #4]
 810656c:	68b9      	ldr	r1, [r7, #8]
 810656e:	f107 0018 	add.w	r0, r7, #24
 8106572:	f000 f890 	bl	8106696 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 8106576:	4603      	mov	r3, r0
 8106578:	2b00      	cmp	r3, #0
 810657a:	d020      	beq.n	81065be <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x62>
	  if (__comp(__b, __c))
 810657c:	683a      	ldr	r2, [r7, #0]
 810657e:	6879      	ldr	r1, [r7, #4]
 8106580:	f107 0018 	add.w	r0, r7, #24
 8106584:	f000 f887 	bl	8106696 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 8106588:	4603      	mov	r3, r0
 810658a:	2b00      	cmp	r3, #0
 810658c:	d004      	beq.n	8106598 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x3c>
	    std::iter_swap(__result, __b);
 810658e:	6879      	ldr	r1, [r7, #4]
 8106590:	68f8      	ldr	r0, [r7, #12]
 8106592:	f7ff fc30 	bl	8105df6 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 8106596:	e032      	b.n	81065fe <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	  else if (__comp(__a, __c))
 8106598:	683a      	ldr	r2, [r7, #0]
 810659a:	68b9      	ldr	r1, [r7, #8]
 810659c:	f107 0018 	add.w	r0, r7, #24
 81065a0:	f000 f879 	bl	8106696 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 81065a4:	4603      	mov	r3, r0
 81065a6:	2b00      	cmp	r3, #0
 81065a8:	d004      	beq.n	81065b4 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x58>
	    std::iter_swap(__result, __c);
 81065aa:	6839      	ldr	r1, [r7, #0]
 81065ac:	68f8      	ldr	r0, [r7, #12]
 81065ae:	f7ff fc22 	bl	8105df6 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 81065b2:	e024      	b.n	81065fe <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	    std::iter_swap(__result, __a);
 81065b4:	68b9      	ldr	r1, [r7, #8]
 81065b6:	68f8      	ldr	r0, [r7, #12]
 81065b8:	f7ff fc1d 	bl	8105df6 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 81065bc:	e01f      	b.n	81065fe <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
      else if (__comp(__a, __c))
 81065be:	683a      	ldr	r2, [r7, #0]
 81065c0:	68b9      	ldr	r1, [r7, #8]
 81065c2:	f107 0018 	add.w	r0, r7, #24
 81065c6:	f000 f866 	bl	8106696 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 81065ca:	4603      	mov	r3, r0
 81065cc:	2b00      	cmp	r3, #0
 81065ce:	d004      	beq.n	81065da <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x7e>
	std::iter_swap(__result, __a);
 81065d0:	68b9      	ldr	r1, [r7, #8]
 81065d2:	68f8      	ldr	r0, [r7, #12]
 81065d4:	f7ff fc0f 	bl	8105df6 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 81065d8:	e011      	b.n	81065fe <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
      else if (__comp(__b, __c))
 81065da:	683a      	ldr	r2, [r7, #0]
 81065dc:	6879      	ldr	r1, [r7, #4]
 81065de:	f107 0018 	add.w	r0, r7, #24
 81065e2:	f000 f858 	bl	8106696 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 81065e6:	4603      	mov	r3, r0
 81065e8:	2b00      	cmp	r3, #0
 81065ea:	d004      	beq.n	81065f6 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0x9a>
	std::iter_swap(__result, __c);
 81065ec:	6839      	ldr	r1, [r7, #0]
 81065ee:	68f8      	ldr	r0, [r7, #12]
 81065f0:	f7ff fc01 	bl	8105df6 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 81065f4:	e003      	b.n	81065fe <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_S9_T0_+0xa2>
	std::iter_swap(__result, __b);
 81065f6:	6879      	ldr	r1, [r7, #4]
 81065f8:	68f8      	ldr	r0, [r7, #12]
 81065fa:	f7ff fbfc 	bl	8105df6 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
    }
 81065fe:	bf00      	nop
 8106600:	3710      	adds	r7, #16
 8106602:	46bd      	mov	sp, r7
 8106604:	bd80      	pop	{r7, pc}

08106606 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 8106606:	b580      	push	{r7, lr}
 8106608:	b084      	sub	sp, #16
 810660a:	af00      	add	r7, sp, #0
 810660c:	60f8      	str	r0, [r7, #12]
 810660e:	60b9      	str	r1, [r7, #8]
 8106610:	607a      	str	r2, [r7, #4]
 8106612:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 8106614:	e004      	b.n	8106620 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x1a>
	    ++__first;
 8106616:	f107 030c 	add.w	r3, r7, #12
 810661a:	4618      	mov	r0, r3
 810661c:	f7ff fc02 	bl	8105e24 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
	  while (__comp(__first, __pivot))
 8106620:	463b      	mov	r3, r7
 8106622:	687a      	ldr	r2, [r7, #4]
 8106624:	68f9      	ldr	r1, [r7, #12]
 8106626:	4618      	mov	r0, r3
 8106628:	f000 f835 	bl	8106696 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 810662c:	4603      	mov	r3, r0
 810662e:	2b00      	cmp	r3, #0
 8106630:	d1f1      	bne.n	8106616 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x10>
	  --__last;
 8106632:	f107 0308 	add.w	r3, r7, #8
 8106636:	4618      	mov	r0, r3
 8106638:	f7ff fc3b 	bl	8105eb2 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  while (__comp(__pivot, __last))
 810663c:	e004      	b.n	8106648 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x42>
	    --__last;
 810663e:	f107 0308 	add.w	r3, r7, #8
 8106642:	4618      	mov	r0, r3
 8106644:	f7ff fc35 	bl	8105eb2 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
	  while (__comp(__pivot, __last))
 8106648:	463b      	mov	r3, r7
 810664a:	68ba      	ldr	r2, [r7, #8]
 810664c:	6879      	ldr	r1, [r7, #4]
 810664e:	4618      	mov	r0, r3
 8106650:	f000 f821 	bl	8106696 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 8106654:	4603      	mov	r3, r0
 8106656:	2b00      	cmp	r3, #0
 8106658:	d1f1      	bne.n	810663e <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x38>
	  if (!(__first < __last))
 810665a:	f107 0208 	add.w	r2, r7, #8
 810665e:	f107 030c 	add.w	r3, r7, #12
 8106662:	4611      	mov	r1, r2
 8106664:	4618      	mov	r0, r3
 8106666:	f000 f967 	bl	8106938 <_ZN9__gnu_cxxltIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 810666a:	4603      	mov	r3, r0
 810666c:	f083 0301 	eor.w	r3, r3, #1
 8106670:	b2db      	uxtb	r3, r3
 8106672:	2b00      	cmp	r3, #0
 8106674:	d001      	beq.n	810667a <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x74>
	    return __first;
 8106676:	68fb      	ldr	r3, [r7, #12]
 8106678:	e009      	b.n	810668e <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x88>
	  std::iter_swap(__first, __last);
 810667a:	68b9      	ldr	r1, [r7, #8]
 810667c:	68f8      	ldr	r0, [r7, #12]
 810667e:	f7ff fbba 	bl	8105df6 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES6_EvT_T0_>
	  ++__first;
 8106682:	f107 030c 	add.w	r3, r7, #12
 8106686:	4618      	mov	r0, r3
 8106688:	f7ff fbcc 	bl	8105e24 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
	  while (__comp(__first, __pivot))
 810668c:	e7c8      	b.n	8106620 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEET_S9_S9_S9_T0_+0x1a>
    }
 810668e:	4618      	mov	r0, r3
 8106690:	3710      	adds	r7, #16
 8106692:	46bd      	mov	sp, r7
 8106694:	bd80      	pop	{r7, pc}

08106696 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>:
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
 8106696:	b580      	push	{r7, lr}
 8106698:	ed2d 8b02 	vpush	{d8}
 810669c:	b084      	sub	sp, #16
 810669e:	af00      	add	r7, sp, #0
 81066a0:	60f8      	str	r0, [r7, #12]
 81066a2:	60b9      	str	r1, [r7, #8]
 81066a4:	607a      	str	r2, [r7, #4]
      { return *__it1 < *__it2; }
 81066a6:	f107 0308 	add.w	r3, r7, #8
 81066aa:	4618      	mov	r0, r3
 81066ac:	f7ff fb66 	bl	8105d7c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 81066b0:	4603      	mov	r3, r0
 81066b2:	ed93 8a00 	vldr	s16, [r3]
 81066b6:	1d3b      	adds	r3, r7, #4
 81066b8:	4618      	mov	r0, r3
 81066ba:	f7ff fb5f 	bl	8105d7c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 81066be:	4603      	mov	r3, r0
 81066c0:	edd3 7a00 	vldr	s15, [r3]
 81066c4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 81066c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81066cc:	bf4c      	ite	mi
 81066ce:	2301      	movmi	r3, #1
 81066d0:	2300      	movpl	r3, #0
 81066d2:	b2db      	uxtb	r3, r3
 81066d4:	4618      	mov	r0, r3
 81066d6:	3710      	adds	r7, #16
 81066d8:	46bd      	mov	sp, r7
 81066da:	ecbd 8b02 	vpop	{d8}
 81066de:	bd80      	pop	{r7, pc}

081066e0 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 81066e0:	b590      	push	{r4, r7, lr}
 81066e2:	b085      	sub	sp, #20
 81066e4:	af00      	add	r7, sp, #0
 81066e6:	6078      	str	r0, [r7, #4]
 81066e8:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 81066ea:	1d3b      	adds	r3, r7, #4
 81066ec:	4618      	mov	r0, r3
 81066ee:	f7ff fb45 	bl	8105d7c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 81066f2:	4603      	mov	r3, r0
 81066f4:	4618      	mov	r0, r3
 81066f6:	f7fe fee9 	bl	81054cc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 81066fa:	4603      	mov	r3, r0
 81066fc:	681b      	ldr	r3, [r3, #0]
 81066fe:	60fb      	str	r3, [r7, #12]
      _RandomAccessIterator __next = __last;
 8106700:	687b      	ldr	r3, [r7, #4]
 8106702:	60bb      	str	r3, [r7, #8]
      --__next;
 8106704:	f107 0308 	add.w	r3, r7, #8
 8106708:	4618      	mov	r0, r3
 810670a:	f7ff fbd2 	bl	8105eb2 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
      while (__comp(__val, __next))
 810670e:	e017      	b.n	8106740 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x60>
	  *__last = _GLIBCXX_MOVE(*__next);
 8106710:	f107 0308 	add.w	r3, r7, #8
 8106714:	4618      	mov	r0, r3
 8106716:	f7ff fb31 	bl	8105d7c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810671a:	4603      	mov	r3, r0
 810671c:	4618      	mov	r0, r3
 810671e:	f7fe fed5 	bl	81054cc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8106722:	4604      	mov	r4, r0
 8106724:	1d3b      	adds	r3, r7, #4
 8106726:	4618      	mov	r0, r3
 8106728:	f7ff fb28 	bl	8105d7c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810672c:	4602      	mov	r2, r0
 810672e:	6823      	ldr	r3, [r4, #0]
 8106730:	6013      	str	r3, [r2, #0]
	  __last = __next;
 8106732:	68bb      	ldr	r3, [r7, #8]
 8106734:	607b      	str	r3, [r7, #4]
	  --__next;
 8106736:	f107 0308 	add.w	r3, r7, #8
 810673a:	4618      	mov	r0, r3
 810673c:	f7ff fbb9 	bl	8105eb2 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEmmEv>
      while (__comp(__val, __next))
 8106740:	f107 010c 	add.w	r1, r7, #12
 8106744:	463b      	mov	r3, r7
 8106746:	68ba      	ldr	r2, [r7, #8]
 8106748:	4618      	mov	r0, r3
 810674a:	f000 f94d 	bl	81069e8 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEbRT_T0_>
 810674e:	4603      	mov	r3, r0
 8106750:	2b00      	cmp	r3, #0
 8106752:	d1dd      	bne.n	8106710 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x30>
      *__last = _GLIBCXX_MOVE(__val);
 8106754:	f107 030c 	add.w	r3, r7, #12
 8106758:	4618      	mov	r0, r3
 810675a:	f7fe feb7 	bl	81054cc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810675e:	4604      	mov	r4, r0
 8106760:	1d3b      	adds	r3, r7, #4
 8106762:	4618      	mov	r0, r3
 8106764:	f7ff fb0a 	bl	8105d7c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8106768:	4602      	mov	r2, r0
 810676a:	6823      	ldr	r3, [r4, #0]
 810676c:	6013      	str	r3, [r2, #0]
    }
 810676e:	bf00      	nop
 8106770:	3714      	adds	r7, #20
 8106772:	46bd      	mov	sp, r7
 8106774:	bd90      	pop	{r4, r7, pc}

08106776 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8106776:	b580      	push	{r7, lr}
 8106778:	b082      	sub	sp, #8
 810677a:	af00      	add	r7, sp, #0
 810677c:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 810677e:	1d3b      	adds	r3, r7, #4
 8106780:	4618      	mov	r0, r3
 8106782:	f7ff fc4e 	bl	8106022 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8106786:	4603      	mov	r3, r0
 8106788:	681b      	ldr	r3, [r3, #0]
 810678a:	4618      	mov	r0, r3
 810678c:	3708      	adds	r7, #8
 810678e:	46bd      	mov	sp, r7
 8106790:	bd80      	pop	{r7, pc}

08106792 <_ZSt14__copy_move_a1ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8106792:	b580      	push	{r7, lr}
 8106794:	b084      	sub	sp, #16
 8106796:	af00      	add	r7, sp, #0
 8106798:	60f8      	str	r0, [r7, #12]
 810679a:	60b9      	str	r1, [r7, #8]
 810679c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 810679e:	687a      	ldr	r2, [r7, #4]
 81067a0:	68b9      	ldr	r1, [r7, #8]
 81067a2:	68f8      	ldr	r0, [r7, #12]
 81067a4:	f000 f940 	bl	8106a28 <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_>
 81067a8:	4603      	mov	r3, r0
 81067aa:	4618      	mov	r0, r3
 81067ac:	3710      	adds	r7, #16
 81067ae:	46bd      	mov	sp, r7
 81067b0:	bd80      	pop	{r7, pc}

081067b2 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 81067b2:	b580      	push	{r7, lr}
 81067b4:	b082      	sub	sp, #8
 81067b6:	af00      	add	r7, sp, #0
 81067b8:	6078      	str	r0, [r7, #4]
 81067ba:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 81067bc:	6878      	ldr	r0, [r7, #4]
 81067be:	f7ff ffda 	bl	8106776 <_ZSt12__niter_baseIPfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 81067c2:	4602      	mov	r2, r0
 81067c4:	683b      	ldr	r3, [r7, #0]
 81067c6:	1a9b      	subs	r3, r3, r2
 81067c8:	109b      	asrs	r3, r3, #2
 81067ca:	461a      	mov	r2, r3
 81067cc:	1d3b      	adds	r3, r7, #4
 81067ce:	4611      	mov	r1, r2
 81067d0:	4618      	mov	r0, r3
 81067d2:	f7fe fce6 	bl	81051a2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 81067d6:	4603      	mov	r3, r0
 81067d8:	4618      	mov	r0, r3
 81067da:	3708      	adds	r7, #8
 81067dc:	46bd      	mov	sp, r7
 81067de:	bd80      	pop	{r7, pc}

081067e0 <_ZSt23__copy_move_backward_a1ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 81067e0:	b580      	push	{r7, lr}
 81067e2:	b084      	sub	sp, #16
 81067e4:	af00      	add	r7, sp, #0
 81067e6:	60f8      	str	r0, [r7, #12]
 81067e8:	60b9      	str	r1, [r7, #8]
 81067ea:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 81067ec:	687a      	ldr	r2, [r7, #4]
 81067ee:	68b9      	ldr	r1, [r7, #8]
 81067f0:	68f8      	ldr	r0, [r7, #12]
 81067f2:	f000 f929 	bl	8106a48 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>
 81067f6:	4603      	mov	r3, r0
 81067f8:	4618      	mov	r0, r3
 81067fa:	3710      	adds	r7, #16
 81067fc:	46bd      	mov	sp, r7
 81067fe:	bd80      	pop	{r7, pc}

08106800 <_ZSt4copyISt13move_iteratorIPfES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8106800:	b590      	push	{r4, r7, lr}
 8106802:	b085      	sub	sp, #20
 8106804:	af00      	add	r7, sp, #0
 8106806:	60f8      	str	r0, [r7, #12]
 8106808:	60b9      	str	r1, [r7, #8]
 810680a:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 810680c:	68f8      	ldr	r0, [r7, #12]
 810680e:	f000 f92b 	bl	8106a68 <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8106812:	4604      	mov	r4, r0
 8106814:	68b8      	ldr	r0, [r7, #8]
 8106816:	f000 f927 	bl	8106a68 <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 810681a:	4603      	mov	r3, r0
 810681c:	687a      	ldr	r2, [r7, #4]
 810681e:	4619      	mov	r1, r3
 8106820:	4620      	mov	r0, r4
 8106822:	f000 f932 	bl	8106a8a <_ZSt13__copy_move_aILb1EPfS0_ET1_T0_S2_S1_>
 8106826:	4603      	mov	r3, r0
    }
 8106828:	4618      	mov	r0, r3
 810682a:	3714      	adds	r7, #20
 810682c:	46bd      	mov	sp, r7
 810682e:	bd90      	pop	{r4, r7, pc}

08106830 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>:
    __miter_base(_Iterator __it)
 8106830:	b480      	push	{r7}
 8106832:	b083      	sub	sp, #12
 8106834:	af00      	add	r7, sp, #0
 8106836:	6078      	str	r0, [r7, #4]
    { return __it; }
 8106838:	687b      	ldr	r3, [r7, #4]
 810683a:	4618      	mov	r0, r3
 810683c:	370c      	adds	r7, #12
 810683e:	46bd      	mov	sp, r7
 8106840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106844:	4770      	bx	lr

08106846 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8106846:	b5b0      	push	{r4, r5, r7, lr}
 8106848:	b084      	sub	sp, #16
 810684a:	af00      	add	r7, sp, #0
 810684c:	60f8      	str	r0, [r7, #12]
 810684e:	60b9      	str	r1, [r7, #8]
 8106850:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8106852:	68f8      	ldr	r0, [r7, #12]
 8106854:	f000 f93c 	bl	8106ad0 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8106858:	4604      	mov	r4, r0
 810685a:	68b8      	ldr	r0, [r7, #8]
 810685c:	f000 f938 	bl	8106ad0 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8106860:	4605      	mov	r5, r0
 8106862:	687b      	ldr	r3, [r7, #4]
 8106864:	4618      	mov	r0, r3
 8106866:	f7ff fdce 	bl	8106406 <_ZSt12__niter_baseIPfET_S1_>
 810686a:	4603      	mov	r3, r0
 810686c:	461a      	mov	r2, r3
 810686e:	4629      	mov	r1, r5
 8106870:	4620      	mov	r0, r4
 8106872:	f000 f93b 	bl	8106aec <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 8106876:	4602      	mov	r2, r0
 8106878:	1d3b      	adds	r3, r7, #4
 810687a:	4611      	mov	r1, r2
 810687c:	4618      	mov	r0, r3
 810687e:	f000 f945 	bl	8106b0c <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 8106882:	4603      	mov	r3, r0
    }
 8106884:	4618      	mov	r0, r3
 8106886:	3710      	adds	r7, #16
 8106888:	46bd      	mov	sp, r7
 810688a:	bdb0      	pop	{r4, r5, r7, pc}

0810688c <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 810688c:	b590      	push	{r4, r7, lr}
 810688e:	b089      	sub	sp, #36	@ 0x24
 8106890:	af00      	add	r7, sp, #0
 8106892:	60f8      	str	r0, [r7, #12]
 8106894:	60b9      	str	r1, [r7, #8]
 8106896:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 8106898:	f107 020c 	add.w	r2, r7, #12
 810689c:	f107 0308 	add.w	r3, r7, #8
 81068a0:	4611      	mov	r1, r2
 81068a2:	4618      	mov	r0, r3
 81068a4:	f7ff f8d0 	bl	8105a48 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 81068a8:	4603      	mov	r3, r0
 81068aa:	2b01      	cmp	r3, #1
 81068ac:	bfd4      	ite	le
 81068ae:	2301      	movle	r3, #1
 81068b0:	2300      	movgt	r3, #0
 81068b2:	b2db      	uxtb	r3, r3
 81068b4:	2b00      	cmp	r3, #0
 81068b6:	d139      	bne.n	810692c <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa0>
      const _DistanceType __len = __last - __first;
 81068b8:	f107 020c 	add.w	r2, r7, #12
 81068bc:	f107 0308 	add.w	r3, r7, #8
 81068c0:	4611      	mov	r1, r2
 81068c2:	4618      	mov	r0, r3
 81068c4:	f7ff f8c0 	bl	8105a48 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 81068c8:	61b8      	str	r0, [r7, #24]
      _DistanceType __parent = (__len - 2) / 2;
 81068ca:	69bb      	ldr	r3, [r7, #24]
 81068cc:	3b02      	subs	r3, #2
 81068ce:	0fda      	lsrs	r2, r3, #31
 81068d0:	4413      	add	r3, r2
 81068d2:	105b      	asrs	r3, r3, #1
 81068d4:	61fb      	str	r3, [r7, #28]
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 81068d6:	f107 030c 	add.w	r3, r7, #12
 81068da:	69f9      	ldr	r1, [r7, #28]
 81068dc:	4618      	mov	r0, r3
 81068de:	f7fe fc60 	bl	81051a2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 81068e2:	4603      	mov	r3, r0
 81068e4:	617b      	str	r3, [r7, #20]
 81068e6:	f107 0314 	add.w	r3, r7, #20
 81068ea:	4618      	mov	r0, r3
 81068ec:	f7ff fa46 	bl	8105d7c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 81068f0:	4603      	mov	r3, r0
 81068f2:	4618      	mov	r0, r3
 81068f4:	f7fe fdea 	bl	81054cc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 81068f8:	4603      	mov	r3, r0
 81068fa:	681b      	ldr	r3, [r3, #0]
 81068fc:	613b      	str	r3, [r7, #16]
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 81068fe:	f107 0310 	add.w	r3, r7, #16
 8106902:	4618      	mov	r0, r3
 8106904:	f7fe fde2 	bl	81054cc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8106908:	4603      	mov	r3, r0
 810690a:	edd3 7a00 	vldr	s15, [r3]
 810690e:	4623      	mov	r3, r4
 8106910:	eeb0 0a67 	vmov.f32	s0, s15
 8106914:	69ba      	ldr	r2, [r7, #24]
 8106916:	69f9      	ldr	r1, [r7, #28]
 8106918:	68f8      	ldr	r0, [r7, #12]
 810691a:	f000 f903 	bl	8106b24 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>
	  if (__parent == 0)
 810691e:	69fb      	ldr	r3, [r7, #28]
 8106920:	2b00      	cmp	r3, #0
 8106922:	d005      	beq.n	8106930 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa4>
	  __parent--;
 8106924:	69fb      	ldr	r3, [r7, #28]
 8106926:	3b01      	subs	r3, #1
 8106928:	61fb      	str	r3, [r7, #28]
      while (true)
 810692a:	e7d4      	b.n	81068d6 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0x4a>
	return;
 810692c:	bf00      	nop
 810692e:	e000      	b.n	8106932 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_RT0_+0xa6>
	    return;
 8106930:	bf00      	nop
    }
 8106932:	3724      	adds	r7, #36	@ 0x24
 8106934:	46bd      	mov	sp, r7
 8106936:	bd90      	pop	{r4, r7, pc}

08106938 <_ZN9__gnu_cxxltIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
 8106938:	b590      	push	{r4, r7, lr}
 810693a:	b083      	sub	sp, #12
 810693c:	af00      	add	r7, sp, #0
 810693e:	6078      	str	r0, [r7, #4]
 8106940:	6039      	str	r1, [r7, #0]
    { return __lhs.base() < __rhs.base(); }
 8106942:	6878      	ldr	r0, [r7, #4]
 8106944:	f7ff fb6d 	bl	8106022 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8106948:	4603      	mov	r3, r0
 810694a:	681c      	ldr	r4, [r3, #0]
 810694c:	6838      	ldr	r0, [r7, #0]
 810694e:	f7ff fb68 	bl	8106022 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8106952:	4603      	mov	r3, r0
 8106954:	681b      	ldr	r3, [r3, #0]
 8106956:	429c      	cmp	r4, r3
 8106958:	bf34      	ite	cc
 810695a:	2301      	movcc	r3, #1
 810695c:	2300      	movcs	r3, #0
 810695e:	b2db      	uxtb	r3, r3
 8106960:	4618      	mov	r0, r3
 8106962:	370c      	adds	r7, #12
 8106964:	46bd      	mov	sp, r7
 8106966:	bd90      	pop	{r4, r7, pc}

08106968 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEENS0_5__ops15_Iter_less_iterEEvT_S9_S9_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8106968:	b5b0      	push	{r4, r5, r7, lr}
 810696a:	b086      	sub	sp, #24
 810696c:	af00      	add	r7, sp, #0
 810696e:	60f8      	str	r0, [r7, #12]
 8106970:	60b9      	str	r1, [r7, #8]
 8106972:	607a      	str	r2, [r7, #4]
 8106974:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 8106976:	1d3b      	adds	r3, r7, #4
 8106978:	4618      	mov	r0, r3
 810697a:	f7ff f9ff 	bl	8105d7c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 810697e:	4603      	mov	r3, r0
 8106980:	4618      	mov	r0, r3
 8106982:	f7fe fda3 	bl	81054cc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8106986:	4603      	mov	r3, r0
 8106988:	681b      	ldr	r3, [r3, #0]
 810698a:	617b      	str	r3, [r7, #20]
      *__result = _GLIBCXX_MOVE(*__first);
 810698c:	f107 030c 	add.w	r3, r7, #12
 8106990:	4618      	mov	r0, r3
 8106992:	f7ff f9f3 	bl	8105d7c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8106996:	4603      	mov	r3, r0
 8106998:	4618      	mov	r0, r3
 810699a:	f7fe fd97 	bl	81054cc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 810699e:	4604      	mov	r4, r0
 81069a0:	1d3b      	adds	r3, r7, #4
 81069a2:	4618      	mov	r0, r3
 81069a4:	f7ff f9ea 	bl	8105d7c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 81069a8:	4602      	mov	r2, r0
 81069aa:	6823      	ldr	r3, [r4, #0]
 81069ac:	6013      	str	r3, [r2, #0]
			 _DistanceType(__last - __first),
 81069ae:	f107 020c 	add.w	r2, r7, #12
 81069b2:	f107 0308 	add.w	r3, r7, #8
 81069b6:	4611      	mov	r1, r2
 81069b8:	4618      	mov	r0, r3
 81069ba:	f7ff f845 	bl	8105a48 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 81069be:	4604      	mov	r4, r0
			 _GLIBCXX_MOVE(__value), __comp);
 81069c0:	f107 0314 	add.w	r3, r7, #20
 81069c4:	4618      	mov	r0, r3
 81069c6:	f7fe fd81 	bl	81054cc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 81069ca:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 81069cc:	edd3 7a00 	vldr	s15, [r3]
 81069d0:	462b      	mov	r3, r5
 81069d2:	eeb0 0a67 	vmov.f32	s0, s15
 81069d6:	4622      	mov	r2, r4
 81069d8:	2100      	movs	r1, #0
 81069da:	68f8      	ldr	r0, [r7, #12]
 81069dc:	f000 f8a2 	bl	8106b24 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>
    }
 81069e0:	bf00      	nop
 81069e2:	3718      	adds	r7, #24
 81069e4:	46bd      	mov	sp, r7
 81069e6:	bdb0      	pop	{r4, r5, r7, pc}

081069e8 <_ZNK9__gnu_cxx5__ops14_Val_less_iterclIfNS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEEEbRT_T0_>:
      operator()(_Value& __val, _Iterator __it) const
 81069e8:	b580      	push	{r7, lr}
 81069ea:	ed2d 8b02 	vpush	{d8}
 81069ee:	b084      	sub	sp, #16
 81069f0:	af00      	add	r7, sp, #0
 81069f2:	60f8      	str	r0, [r7, #12]
 81069f4:	60b9      	str	r1, [r7, #8]
 81069f6:	607a      	str	r2, [r7, #4]
      { return __val < *__it; }
 81069f8:	68bb      	ldr	r3, [r7, #8]
 81069fa:	ed93 8a00 	vldr	s16, [r3]
 81069fe:	1d3b      	adds	r3, r7, #4
 8106a00:	4618      	mov	r0, r3
 8106a02:	f7ff f9bb 	bl	8105d7c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8106a06:	4603      	mov	r3, r0
 8106a08:	edd3 7a00 	vldr	s15, [r3]
 8106a0c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8106a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8106a14:	bf4c      	ite	mi
 8106a16:	2301      	movmi	r3, #1
 8106a18:	2300      	movpl	r3, #0
 8106a1a:	b2db      	uxtb	r3, r3
 8106a1c:	4618      	mov	r0, r3
 8106a1e:	3710      	adds	r7, #16
 8106a20:	46bd      	mov	sp, r7
 8106a22:	ecbd 8b02 	vpop	{d8}
 8106a26:	bd80      	pop	{r7, pc}

08106a28 <_ZSt14__copy_move_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8106a28:	b580      	push	{r7, lr}
 8106a2a:	b084      	sub	sp, #16
 8106a2c:	af00      	add	r7, sp, #0
 8106a2e:	60f8      	str	r0, [r7, #12]
 8106a30:	60b9      	str	r1, [r7, #8]
 8106a32:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8106a34:	687a      	ldr	r2, [r7, #4]
 8106a36:	68b9      	ldr	r1, [r7, #8]
 8106a38:	68f8      	ldr	r0, [r7, #12]
 8106a3a:	f000 f925 	bl	8106c88 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8106a3e:	4603      	mov	r3, r0
    }
 8106a40:	4618      	mov	r0, r3
 8106a42:	3710      	adds	r7, #16
 8106a44:	46bd      	mov	sp, r7
 8106a46:	bd80      	pop	{r7, pc}

08106a48 <_ZSt23__copy_move_backward_a2ILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8106a48:	b580      	push	{r7, lr}
 8106a4a:	b084      	sub	sp, #16
 8106a4c:	af00      	add	r7, sp, #0
 8106a4e:	60f8      	str	r0, [r7, #12]
 8106a50:	60b9      	str	r1, [r7, #8]
 8106a52:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8106a54:	687a      	ldr	r2, [r7, #4]
 8106a56:	68b9      	ldr	r1, [r7, #8]
 8106a58:	68f8      	ldr	r0, [r7, #12]
 8106a5a:	f000 f932 	bl	8106cc2 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>
 8106a5e:	4603      	mov	r3, r0
    }
 8106a60:	4618      	mov	r0, r3
 8106a62:	3710      	adds	r7, #16
 8106a64:	46bd      	mov	sp, r7
 8106a66:	bd80      	pop	{r7, pc}

08106a68 <_ZSt12__miter_baseIPfEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 8106a68:	b580      	push	{r7, lr}
 8106a6a:	b082      	sub	sp, #8
 8106a6c:	af00      	add	r7, sp, #0
 8106a6e:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 8106a70:	1d3b      	adds	r3, r7, #4
 8106a72:	4618      	mov	r0, r3
 8106a74:	f000 f947 	bl	8106d06 <_ZNKSt13move_iteratorIPfE4baseEv>
 8106a78:	4603      	mov	r3, r0
 8106a7a:	4618      	mov	r0, r3
 8106a7c:	f000 f94f 	bl	8106d1e <_ZSt12__miter_baseIPfET_S1_>
 8106a80:	4603      	mov	r3, r0
 8106a82:	4618      	mov	r0, r3
 8106a84:	3708      	adds	r7, #8
 8106a86:	46bd      	mov	sp, r7
 8106a88:	bd80      	pop	{r7, pc}

08106a8a <_ZSt13__copy_move_aILb1EPfS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8106a8a:	b5b0      	push	{r4, r5, r7, lr}
 8106a8c:	b084      	sub	sp, #16
 8106a8e:	af00      	add	r7, sp, #0
 8106a90:	60f8      	str	r0, [r7, #12]
 8106a92:	60b9      	str	r1, [r7, #8]
 8106a94:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8106a96:	68f8      	ldr	r0, [r7, #12]
 8106a98:	f7ff fcb5 	bl	8106406 <_ZSt12__niter_baseIPfET_S1_>
 8106a9c:	4604      	mov	r4, r0
 8106a9e:	68b8      	ldr	r0, [r7, #8]
 8106aa0:	f7ff fcb1 	bl	8106406 <_ZSt12__niter_baseIPfET_S1_>
 8106aa4:	4605      	mov	r5, r0
 8106aa6:	687b      	ldr	r3, [r7, #4]
 8106aa8:	4618      	mov	r0, r3
 8106aaa:	f7ff fcac 	bl	8106406 <_ZSt12__niter_baseIPfET_S1_>
 8106aae:	4603      	mov	r3, r0
 8106ab0:	461a      	mov	r2, r3
 8106ab2:	4629      	mov	r1, r5
 8106ab4:	4620      	mov	r0, r4
 8106ab6:	f7ff fe6c 	bl	8106792 <_ZSt14__copy_move_a1ILb1EPfS0_ET1_T0_S2_S1_>
 8106aba:	4602      	mov	r2, r0
 8106abc:	1d3b      	adds	r3, r7, #4
 8106abe:	4611      	mov	r1, r2
 8106ac0:	4618      	mov	r0, r3
 8106ac2:	f000 f823 	bl	8106b0c <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 8106ac6:	4603      	mov	r3, r0
    }
 8106ac8:	4618      	mov	r0, r3
 8106aca:	3710      	adds	r7, #16
 8106acc:	46bd      	mov	sp, r7
 8106ace:	bdb0      	pop	{r4, r5, r7, pc}

08106ad0 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8106ad0:	b580      	push	{r7, lr}
 8106ad2:	b082      	sub	sp, #8
 8106ad4:	af00      	add	r7, sp, #0
 8106ad6:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8106ad8:	1d3b      	adds	r3, r7, #4
 8106ada:	4618      	mov	r0, r3
 8106adc:	f000 f92a 	bl	8106d34 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>
 8106ae0:	4603      	mov	r3, r0
 8106ae2:	681b      	ldr	r3, [r3, #0]
 8106ae4:	4618      	mov	r0, r3
 8106ae6:	3708      	adds	r7, #8
 8106ae8:	46bd      	mov	sp, r7
 8106aea:	bd80      	pop	{r7, pc}

08106aec <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8106aec:	b580      	push	{r7, lr}
 8106aee:	b084      	sub	sp, #16
 8106af0:	af00      	add	r7, sp, #0
 8106af2:	60f8      	str	r0, [r7, #12]
 8106af4:	60b9      	str	r1, [r7, #8]
 8106af6:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8106af8:	687a      	ldr	r2, [r7, #4]
 8106afa:	68b9      	ldr	r1, [r7, #8]
 8106afc:	68f8      	ldr	r0, [r7, #12]
 8106afe:	f000 f924 	bl	8106d4a <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>
 8106b02:	4603      	mov	r3, r0
 8106b04:	4618      	mov	r0, r3
 8106b06:	3710      	adds	r7, #16
 8106b08:	46bd      	mov	sp, r7
 8106b0a:	bd80      	pop	{r7, pc}

08106b0c <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8106b0c:	b480      	push	{r7}
 8106b0e:	b083      	sub	sp, #12
 8106b10:	af00      	add	r7, sp, #0
 8106b12:	6078      	str	r0, [r7, #4]
 8106b14:	6039      	str	r1, [r7, #0]
    { return __res; }
 8106b16:	683b      	ldr	r3, [r7, #0]
 8106b18:	4618      	mov	r0, r3
 8106b1a:	370c      	adds	r7, #12
 8106b1c:	46bd      	mov	sp, r7
 8106b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b22:	4770      	bx	lr

08106b24 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 8106b24:	b5b0      	push	{r4, r5, r7, lr}
 8106b26:	b08e      	sub	sp, #56	@ 0x38
 8106b28:	af00      	add	r7, sp, #0
 8106b2a:	6178      	str	r0, [r7, #20]
 8106b2c:	6139      	str	r1, [r7, #16]
 8106b2e:	60fa      	str	r2, [r7, #12]
 8106b30:	ed87 0a02 	vstr	s0, [r7, #8]
 8106b34:	713b      	strb	r3, [r7, #4]
      const _Distance __topIndex = __holeIndex;
 8106b36:	693b      	ldr	r3, [r7, #16]
 8106b38:	633b      	str	r3, [r7, #48]	@ 0x30
      _Distance __secondChild = __holeIndex;
 8106b3a:	693b      	ldr	r3, [r7, #16]
 8106b3c:	637b      	str	r3, [r7, #52]	@ 0x34
      while (__secondChild < (__len - 1) / 2)
 8106b3e:	e042      	b.n	8106bc6 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0xa2>
	  __secondChild = 2 * (__secondChild + 1);
 8106b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106b42:	3301      	adds	r3, #1
 8106b44:	005b      	lsls	r3, r3, #1
 8106b46:	637b      	str	r3, [r7, #52]	@ 0x34
	  if (__comp(__first + __secondChild,
 8106b48:	f107 0314 	add.w	r3, r7, #20
 8106b4c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8106b4e:	4618      	mov	r0, r3
 8106b50:	f7fe fb27 	bl	81051a2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8106b54:	4604      	mov	r4, r0
 8106b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106b58:	1e5a      	subs	r2, r3, #1
 8106b5a:	f107 0314 	add.w	r3, r7, #20
 8106b5e:	4611      	mov	r1, r2
 8106b60:	4618      	mov	r0, r3
 8106b62:	f7fe fb1e 	bl	81051a2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8106b66:	4602      	mov	r2, r0
 8106b68:	1d3b      	adds	r3, r7, #4
 8106b6a:	4621      	mov	r1, r4
 8106b6c:	4618      	mov	r0, r3
 8106b6e:	f7ff fd92 	bl	8106696 <_ZNK9__gnu_cxx5__ops15_Iter_less_iterclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEES8_EEbT_T0_>
 8106b72:	4603      	mov	r3, r0
 8106b74:	2b00      	cmp	r3, #0
 8106b76:	d002      	beq.n	8106b7e <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x5a>
	    __secondChild--;
 8106b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106b7a:	3b01      	subs	r3, #1
 8106b7c:	637b      	str	r3, [r7, #52]	@ 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 8106b7e:	f107 0314 	add.w	r3, r7, #20
 8106b82:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8106b84:	4618      	mov	r0, r3
 8106b86:	f7fe fb0c 	bl	81051a2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8106b8a:	4603      	mov	r3, r0
 8106b8c:	623b      	str	r3, [r7, #32]
 8106b8e:	f107 0320 	add.w	r3, r7, #32
 8106b92:	4618      	mov	r0, r3
 8106b94:	f7ff f8f2 	bl	8105d7c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8106b98:	4603      	mov	r3, r0
 8106b9a:	4618      	mov	r0, r3
 8106b9c:	f7fe fc96 	bl	81054cc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8106ba0:	4604      	mov	r4, r0
 8106ba2:	f107 0314 	add.w	r3, r7, #20
 8106ba6:	6939      	ldr	r1, [r7, #16]
 8106ba8:	4618      	mov	r0, r3
 8106baa:	f7fe fafa 	bl	81051a2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8106bae:	4603      	mov	r3, r0
 8106bb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8106bb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8106bb6:	4618      	mov	r0, r3
 8106bb8:	f7ff f8e0 	bl	8105d7c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8106bbc:	4602      	mov	r2, r0
 8106bbe:	6823      	ldr	r3, [r4, #0]
 8106bc0:	6013      	str	r3, [r2, #0]
	  __holeIndex = __secondChild;
 8106bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106bc4:	613b      	str	r3, [r7, #16]
      while (__secondChild < (__len - 1) / 2)
 8106bc6:	68fb      	ldr	r3, [r7, #12]
 8106bc8:	3b01      	subs	r3, #1
 8106bca:	0fda      	lsrs	r2, r3, #31
 8106bcc:	4413      	add	r3, r2
 8106bce:	105b      	asrs	r3, r3, #1
 8106bd0:	461a      	mov	r2, r3
 8106bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106bd4:	4293      	cmp	r3, r2
 8106bd6:	dbb3      	blt.n	8106b40 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x1c>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 8106bd8:	68fb      	ldr	r3, [r7, #12]
 8106bda:	f003 0301 	and.w	r3, r3, #1
 8106bde:	2b00      	cmp	r3, #0
 8106be0:	d133      	bne.n	8106c4a <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x126>
 8106be2:	68fb      	ldr	r3, [r7, #12]
 8106be4:	3b02      	subs	r3, #2
 8106be6:	0fda      	lsrs	r2, r3, #31
 8106be8:	4413      	add	r3, r2
 8106bea:	105b      	asrs	r3, r3, #1
 8106bec:	461a      	mov	r2, r3
 8106bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106bf0:	4293      	cmp	r3, r2
 8106bf2:	d12a      	bne.n	8106c4a <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_+0x126>
	  __secondChild = 2 * (__secondChild + 1);
 8106bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106bf6:	3301      	adds	r3, #1
 8106bf8:	005b      	lsls	r3, r3, #1
 8106bfa:	637b      	str	r3, [r7, #52]	@ 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 8106bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106bfe:	1e5a      	subs	r2, r3, #1
 8106c00:	f107 0314 	add.w	r3, r7, #20
 8106c04:	4611      	mov	r1, r2
 8106c06:	4618      	mov	r0, r3
 8106c08:	f7fe facb 	bl	81051a2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8106c0c:	4603      	mov	r3, r0
 8106c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8106c10:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8106c14:	4618      	mov	r0, r3
 8106c16:	f7ff f8b1 	bl	8105d7c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8106c1a:	4603      	mov	r3, r0
 8106c1c:	4618      	mov	r0, r3
 8106c1e:	f7fe fc55 	bl	81054cc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8106c22:	4604      	mov	r4, r0
 8106c24:	f107 0314 	add.w	r3, r7, #20
 8106c28:	6939      	ldr	r1, [r7, #16]
 8106c2a:	4618      	mov	r0, r3
 8106c2c:	f7fe fab9 	bl	81051a2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8106c30:	4603      	mov	r3, r0
 8106c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8106c34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8106c38:	4618      	mov	r0, r3
 8106c3a:	f7ff f89f 	bl	8105d7c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8106c3e:	4602      	mov	r2, r0
 8106c40:	6823      	ldr	r3, [r4, #0]
 8106c42:	6013      	str	r3, [r2, #0]
	  __holeIndex = __secondChild - 1;
 8106c44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106c46:	3b01      	subs	r3, #1
 8106c48:	613b      	str	r3, [r7, #16]
	__cmp(_GLIBCXX_MOVE(__comp));
 8106c4a:	1d3b      	adds	r3, r7, #4
 8106c4c:	4618      	mov	r0, r3
 8106c4e:	f000 f88c 	bl	8106d6a <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_less_iterEEONSt16remove_referenceIT_E4typeEOS5_>
 8106c52:	f107 031c 	add.w	r3, r7, #28
 8106c56:	4629      	mov	r1, r5
 8106c58:	4618      	mov	r0, r3
 8106c5a:	f7fd feea 	bl	8104a32 <_ZN9__gnu_cxx5__ops14_Iter_less_valC1ENS0_15_Iter_less_iterE>
		       _GLIBCXX_MOVE(__value), __cmp);
 8106c5e:	f107 0308 	add.w	r3, r7, #8
 8106c62:	4618      	mov	r0, r3
 8106c64:	f7fe fc32 	bl	81054cc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8106c68:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 8106c6a:	edd3 7a00 	vldr	s15, [r3]
 8106c6e:	f107 031c 	add.w	r3, r7, #28
 8106c72:	eeb0 0a67 	vmov.f32	s0, s15
 8106c76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8106c78:	6939      	ldr	r1, [r7, #16]
 8106c7a:	6978      	ldr	r0, [r7, #20]
 8106c7c:	f000 f880 	bl	8106d80 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_>
    }
 8106c80:	bf00      	nop
 8106c82:	3738      	adds	r7, #56	@ 0x38
 8106c84:	46bd      	mov	sp, r7
 8106c86:	bdb0      	pop	{r4, r5, r7, pc}

08106c88 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8106c88:	b580      	push	{r7, lr}
 8106c8a:	b086      	sub	sp, #24
 8106c8c:	af00      	add	r7, sp, #0
 8106c8e:	60f8      	str	r0, [r7, #12]
 8106c90:	60b9      	str	r1, [r7, #8]
 8106c92:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8106c94:	68ba      	ldr	r2, [r7, #8]
 8106c96:	68fb      	ldr	r3, [r7, #12]
 8106c98:	1ad3      	subs	r3, r2, r3
 8106c9a:	109b      	asrs	r3, r3, #2
 8106c9c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8106c9e:	697b      	ldr	r3, [r7, #20]
 8106ca0:	2b00      	cmp	r3, #0
 8106ca2:	d006      	beq.n	8106cb2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8106ca4:	697b      	ldr	r3, [r7, #20]
 8106ca6:	009b      	lsls	r3, r3, #2
 8106ca8:	461a      	mov	r2, r3
 8106caa:	68f9      	ldr	r1, [r7, #12]
 8106cac:	6878      	ldr	r0, [r7, #4]
 8106cae:	f015 f932 	bl	811bf16 <memmove>
	  return __result + _Num;
 8106cb2:	697b      	ldr	r3, [r7, #20]
 8106cb4:	009b      	lsls	r3, r3, #2
 8106cb6:	687a      	ldr	r2, [r7, #4]
 8106cb8:	4413      	add	r3, r2
	}
 8106cba:	4618      	mov	r0, r3
 8106cbc:	3718      	adds	r7, #24
 8106cbe:	46bd      	mov	sp, r7
 8106cc0:	bd80      	pop	{r7, pc}

08106cc2 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8106cc2:	b580      	push	{r7, lr}
 8106cc4:	b086      	sub	sp, #24
 8106cc6:	af00      	add	r7, sp, #0
 8106cc8:	60f8      	str	r0, [r7, #12]
 8106cca:	60b9      	str	r1, [r7, #8]
 8106ccc:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8106cce:	68ba      	ldr	r2, [r7, #8]
 8106cd0:	68fb      	ldr	r3, [r7, #12]
 8106cd2:	1ad3      	subs	r3, r2, r3
 8106cd4:	109b      	asrs	r3, r3, #2
 8106cd6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8106cd8:	697b      	ldr	r3, [r7, #20]
 8106cda:	2b00      	cmp	r3, #0
 8106cdc:	d00a      	beq.n	8106cf4 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIfEEPT_PKS3_S6_S4_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8106cde:	697b      	ldr	r3, [r7, #20]
 8106ce0:	009b      	lsls	r3, r3, #2
 8106ce2:	425b      	negs	r3, r3
 8106ce4:	687a      	ldr	r2, [r7, #4]
 8106ce6:	18d0      	adds	r0, r2, r3
 8106ce8:	697b      	ldr	r3, [r7, #20]
 8106cea:	009b      	lsls	r3, r3, #2
 8106cec:	461a      	mov	r2, r3
 8106cee:	68f9      	ldr	r1, [r7, #12]
 8106cf0:	f015 f911 	bl	811bf16 <memmove>
	  return __result - _Num;
 8106cf4:	697b      	ldr	r3, [r7, #20]
 8106cf6:	009b      	lsls	r3, r3, #2
 8106cf8:	425b      	negs	r3, r3
 8106cfa:	687a      	ldr	r2, [r7, #4]
 8106cfc:	4413      	add	r3, r2
	}
 8106cfe:	4618      	mov	r0, r3
 8106d00:	3718      	adds	r7, #24
 8106d02:	46bd      	mov	sp, r7
 8106d04:	bd80      	pop	{r7, pc}

08106d06 <_ZNKSt13move_iteratorIPfE4baseEv>:
      base() const
 8106d06:	b480      	push	{r7}
 8106d08:	b083      	sub	sp, #12
 8106d0a:	af00      	add	r7, sp, #0
 8106d0c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8106d0e:	687b      	ldr	r3, [r7, #4]
 8106d10:	681b      	ldr	r3, [r3, #0]
 8106d12:	4618      	mov	r0, r3
 8106d14:	370c      	adds	r7, #12
 8106d16:	46bd      	mov	sp, r7
 8106d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d1c:	4770      	bx	lr

08106d1e <_ZSt12__miter_baseIPfET_S1_>:
    __miter_base(_Iterator __it)
 8106d1e:	b480      	push	{r7}
 8106d20:	b083      	sub	sp, #12
 8106d22:	af00      	add	r7, sp, #0
 8106d24:	6078      	str	r0, [r7, #4]
    { return __it; }
 8106d26:	687b      	ldr	r3, [r7, #4]
 8106d28:	4618      	mov	r0, r3
 8106d2a:	370c      	adds	r7, #12
 8106d2c:	46bd      	mov	sp, r7
 8106d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d32:	4770      	bx	lr

08106d34 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8106d34:	b480      	push	{r7}
 8106d36:	b083      	sub	sp, #12
 8106d38:	af00      	add	r7, sp, #0
 8106d3a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8106d3c:	687b      	ldr	r3, [r7, #4]
 8106d3e:	4618      	mov	r0, r3
 8106d40:	370c      	adds	r7, #12
 8106d42:	46bd      	mov	sp, r7
 8106d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d48:	4770      	bx	lr

08106d4a <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8106d4a:	b580      	push	{r7, lr}
 8106d4c:	b084      	sub	sp, #16
 8106d4e:	af00      	add	r7, sp, #0
 8106d50:	60f8      	str	r0, [r7, #12]
 8106d52:	60b9      	str	r1, [r7, #8]
 8106d54:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8106d56:	687a      	ldr	r2, [r7, #4]
 8106d58:	68b9      	ldr	r1, [r7, #8]
 8106d5a:	68f8      	ldr	r0, [r7, #12]
 8106d5c:	f000 f87d 	bl	8106e5a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8106d60:	4603      	mov	r3, r0
    }
 8106d62:	4618      	mov	r0, r3
 8106d64:	3710      	adds	r7, #16
 8106d66:	46bd      	mov	sp, r7
 8106d68:	bd80      	pop	{r7, pc}

08106d6a <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_less_iterEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8106d6a:	b480      	push	{r7}
 8106d6c:	b083      	sub	sp, #12
 8106d6e:	af00      	add	r7, sp, #0
 8106d70:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8106d72:	687b      	ldr	r3, [r7, #4]
 8106d74:	4618      	mov	r0, r3
 8106d76:	370c      	adds	r7, #12
 8106d78:	46bd      	mov	sp, r7
 8106d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d7e:	4770      	bx	lr

08106d80 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 8106d80:	b590      	push	{r4, r7, lr}
 8106d82:	b08b      	sub	sp, #44	@ 0x2c
 8106d84:	af00      	add	r7, sp, #0
 8106d86:	6178      	str	r0, [r7, #20]
 8106d88:	6139      	str	r1, [r7, #16]
 8106d8a:	60fa      	str	r2, [r7, #12]
 8106d8c:	ed87 0a02 	vstr	s0, [r7, #8]
 8106d90:	607b      	str	r3, [r7, #4]
      _Distance __parent = (__holeIndex - 1) / 2;
 8106d92:	693b      	ldr	r3, [r7, #16]
 8106d94:	3b01      	subs	r3, #1
 8106d96:	0fda      	lsrs	r2, r3, #31
 8106d98:	4413      	add	r3, r2
 8106d9a:	105b      	asrs	r3, r3, #1
 8106d9c:	627b      	str	r3, [r7, #36]	@ 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8106d9e:	e029      	b.n	8106df4 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0x74>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 8106da0:	f107 0314 	add.w	r3, r7, #20
 8106da4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8106da6:	4618      	mov	r0, r3
 8106da8:	f7fe f9fb 	bl	81051a2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8106dac:	4603      	mov	r3, r0
 8106dae:	61bb      	str	r3, [r7, #24]
 8106db0:	f107 0318 	add.w	r3, r7, #24
 8106db4:	4618      	mov	r0, r3
 8106db6:	f7fe ffe1 	bl	8105d7c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8106dba:	4603      	mov	r3, r0
 8106dbc:	4618      	mov	r0, r3
 8106dbe:	f7fe fb85 	bl	81054cc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8106dc2:	4604      	mov	r4, r0
 8106dc4:	f107 0314 	add.w	r3, r7, #20
 8106dc8:	6939      	ldr	r1, [r7, #16]
 8106dca:	4618      	mov	r0, r3
 8106dcc:	f7fe f9e9 	bl	81051a2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8106dd0:	4603      	mov	r3, r0
 8106dd2:	61fb      	str	r3, [r7, #28]
 8106dd4:	f107 031c 	add.w	r3, r7, #28
 8106dd8:	4618      	mov	r0, r3
 8106dda:	f7fe ffcf 	bl	8105d7c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8106dde:	4602      	mov	r2, r0
 8106de0:	6823      	ldr	r3, [r4, #0]
 8106de2:	6013      	str	r3, [r2, #0]
	  __holeIndex = __parent;
 8106de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106de6:	613b      	str	r3, [r7, #16]
	  __parent = (__holeIndex - 1) / 2;
 8106de8:	693b      	ldr	r3, [r7, #16]
 8106dea:	3b01      	subs	r3, #1
 8106dec:	0fda      	lsrs	r2, r3, #31
 8106dee:	4413      	add	r3, r2
 8106df0:	105b      	asrs	r3, r3, #1
 8106df2:	627b      	str	r3, [r7, #36]	@ 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8106df4:	693a      	ldr	r2, [r7, #16]
 8106df6:	68fb      	ldr	r3, [r7, #12]
 8106df8:	429a      	cmp	r2, r3
 8106dfa:	dd11      	ble.n	8106e20 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa0>
 8106dfc:	f107 0314 	add.w	r3, r7, #20
 8106e00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8106e02:	4618      	mov	r0, r3
 8106e04:	f7fe f9cd 	bl	81051a2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8106e08:	4601      	mov	r1, r0
 8106e0a:	f107 0308 	add.w	r3, r7, #8
 8106e0e:	461a      	mov	r2, r3
 8106e10:	6878      	ldr	r0, [r7, #4]
 8106e12:	f000 f83f 	bl	8106e94 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEEbT_RT0_>
 8106e16:	4603      	mov	r3, r0
 8106e18:	2b00      	cmp	r3, #0
 8106e1a:	d001      	beq.n	8106e20 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa0>
 8106e1c:	2301      	movs	r3, #1
 8106e1e:	e000      	b.n	8106e22 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0xa2>
 8106e20:	2300      	movs	r3, #0
 8106e22:	2b00      	cmp	r3, #0
 8106e24:	d1bc      	bne.n	8106da0 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEEifNS0_5__ops14_Iter_less_valEEvT_T0_SA_T1_RT2_+0x20>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 8106e26:	f107 0308 	add.w	r3, r7, #8
 8106e2a:	4618      	mov	r0, r3
 8106e2c:	f7fe fb4e 	bl	81054cc <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8106e30:	4604      	mov	r4, r0
 8106e32:	f107 0314 	add.w	r3, r7, #20
 8106e36:	6939      	ldr	r1, [r7, #16]
 8106e38:	4618      	mov	r0, r3
 8106e3a:	f7fe f9b2 	bl	81051a2 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEplEi>
 8106e3e:	4603      	mov	r3, r0
 8106e40:	623b      	str	r3, [r7, #32]
 8106e42:	f107 0320 	add.w	r3, r7, #32
 8106e46:	4618      	mov	r0, r3
 8106e48:	f7fe ff98 	bl	8105d7c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8106e4c:	4602      	mov	r2, r0
 8106e4e:	6823      	ldr	r3, [r4, #0]
 8106e50:	6013      	str	r3, [r2, #0]
    }
 8106e52:	bf00      	nop
 8106e54:	372c      	adds	r7, #44	@ 0x2c
 8106e56:	46bd      	mov	sp, r7
 8106e58:	bd90      	pop	{r4, r7, pc}

08106e5a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8106e5a:	b580      	push	{r7, lr}
 8106e5c:	b086      	sub	sp, #24
 8106e5e:	af00      	add	r7, sp, #0
 8106e60:	60f8      	str	r0, [r7, #12]
 8106e62:	60b9      	str	r1, [r7, #8]
 8106e64:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8106e66:	68ba      	ldr	r2, [r7, #8]
 8106e68:	68fb      	ldr	r3, [r7, #12]
 8106e6a:	1ad3      	subs	r3, r2, r3
 8106e6c:	109b      	asrs	r3, r3, #2
 8106e6e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8106e70:	697b      	ldr	r3, [r7, #20]
 8106e72:	2b00      	cmp	r3, #0
 8106e74:	d006      	beq.n	8106e84 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8106e76:	697b      	ldr	r3, [r7, #20]
 8106e78:	009b      	lsls	r3, r3, #2
 8106e7a:	461a      	mov	r2, r3
 8106e7c:	68f9      	ldr	r1, [r7, #12]
 8106e7e:	6878      	ldr	r0, [r7, #4]
 8106e80:	f015 f849 	bl	811bf16 <memmove>
	  return __result + _Num;
 8106e84:	697b      	ldr	r3, [r7, #20]
 8106e86:	009b      	lsls	r3, r3, #2
 8106e88:	687a      	ldr	r2, [r7, #4]
 8106e8a:	4413      	add	r3, r2
	}
 8106e8c:	4618      	mov	r0, r3
 8106e8e:	3718      	adds	r7, #24
 8106e90:	46bd      	mov	sp, r7
 8106e92:	bd80      	pop	{r7, pc}

08106e94 <_ZNK9__gnu_cxx5__ops14_Iter_less_valclINS_17__normal_iteratorIPfSt6vectorIfSaIfEEEEfEEbT_RT0_>:
      operator()(_Iterator __it, _Value& __val) const
 8106e94:	b580      	push	{r7, lr}
 8106e96:	b084      	sub	sp, #16
 8106e98:	af00      	add	r7, sp, #0
 8106e9a:	60f8      	str	r0, [r7, #12]
 8106e9c:	60b9      	str	r1, [r7, #8]
 8106e9e:	607a      	str	r2, [r7, #4]
      { return *__it < __val; }
 8106ea0:	f107 0308 	add.w	r3, r7, #8
 8106ea4:	4618      	mov	r0, r3
 8106ea6:	f7fe ff69 	bl	8105d7c <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8106eaa:	4603      	mov	r3, r0
 8106eac:	ed93 7a00 	vldr	s14, [r3]
 8106eb0:	687b      	ldr	r3, [r7, #4]
 8106eb2:	edd3 7a00 	vldr	s15, [r3]
 8106eb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8106eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8106ebe:	bf4c      	ite	mi
 8106ec0:	2301      	movmi	r3, #1
 8106ec2:	2300      	movpl	r3, #0
 8106ec4:	b2db      	uxtb	r3, r3
 8106ec6:	4618      	mov	r0, r3
 8106ec8:	3710      	adds	r7, #16
 8106eca:	46bd      	mov	sp, r7
 8106ecc:	bd80      	pop	{r7, pc}

08106ece <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8106ece:	b480      	push	{r7}
 8106ed0:	b083      	sub	sp, #12
 8106ed2:	af00      	add	r7, sp, #0
 8106ed4:	6078      	str	r0, [r7, #4]
 8106ed6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8106ed8:	687b      	ldr	r3, [r7, #4]
 8106eda:	2b00      	cmp	r3, #0
 8106edc:	d00b      	beq.n	8106ef6 <LAN8742_RegisterBusIO+0x28>
 8106ede:	683b      	ldr	r3, [r7, #0]
 8106ee0:	68db      	ldr	r3, [r3, #12]
 8106ee2:	2b00      	cmp	r3, #0
 8106ee4:	d007      	beq.n	8106ef6 <LAN8742_RegisterBusIO+0x28>
 8106ee6:	683b      	ldr	r3, [r7, #0]
 8106ee8:	689b      	ldr	r3, [r3, #8]
 8106eea:	2b00      	cmp	r3, #0
 8106eec:	d003      	beq.n	8106ef6 <LAN8742_RegisterBusIO+0x28>
 8106eee:	683b      	ldr	r3, [r7, #0]
 8106ef0:	691b      	ldr	r3, [r3, #16]
 8106ef2:	2b00      	cmp	r3, #0
 8106ef4:	d102      	bne.n	8106efc <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8106ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8106efa:	e014      	b.n	8106f26 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8106efc:	683b      	ldr	r3, [r7, #0]
 8106efe:	681a      	ldr	r2, [r3, #0]
 8106f00:	687b      	ldr	r3, [r7, #4]
 8106f02:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8106f04:	683b      	ldr	r3, [r7, #0]
 8106f06:	685a      	ldr	r2, [r3, #4]
 8106f08:	687b      	ldr	r3, [r7, #4]
 8106f0a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8106f0c:	683b      	ldr	r3, [r7, #0]
 8106f0e:	68da      	ldr	r2, [r3, #12]
 8106f10:	687b      	ldr	r3, [r7, #4]
 8106f12:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8106f14:	683b      	ldr	r3, [r7, #0]
 8106f16:	689a      	ldr	r2, [r3, #8]
 8106f18:	687b      	ldr	r3, [r7, #4]
 8106f1a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8106f1c:	683b      	ldr	r3, [r7, #0]
 8106f1e:	691a      	ldr	r2, [r3, #16]
 8106f20:	687b      	ldr	r3, [r7, #4]
 8106f22:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8106f24:	2300      	movs	r3, #0
}
 8106f26:	4618      	mov	r0, r3
 8106f28:	370c      	adds	r7, #12
 8106f2a:	46bd      	mov	sp, r7
 8106f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f30:	4770      	bx	lr

08106f32 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8106f32:	b580      	push	{r7, lr}
 8106f34:	b086      	sub	sp, #24
 8106f36:	af00      	add	r7, sp, #0
 8106f38:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8106f3a:	2300      	movs	r3, #0
 8106f3c:	60fb      	str	r3, [r7, #12]
 8106f3e:	2300      	movs	r3, #0
 8106f40:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8106f42:	2300      	movs	r3, #0
 8106f44:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8106f46:	687b      	ldr	r3, [r7, #4]
 8106f48:	685b      	ldr	r3, [r3, #4]
 8106f4a:	2b00      	cmp	r3, #0
 8106f4c:	d139      	bne.n	8106fc2 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8106f4e:	687b      	ldr	r3, [r7, #4]
 8106f50:	689b      	ldr	r3, [r3, #8]
 8106f52:	2b00      	cmp	r3, #0
 8106f54:	d002      	beq.n	8106f5c <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8106f56:	687b      	ldr	r3, [r7, #4]
 8106f58:	689b      	ldr	r3, [r3, #8]
 8106f5a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8106f5c:	687b      	ldr	r3, [r7, #4]
 8106f5e:	2220      	movs	r2, #32
 8106f60:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8106f62:	2300      	movs	r3, #0
 8106f64:	617b      	str	r3, [r7, #20]
 8106f66:	e01c      	b.n	8106fa2 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8106f68:	687b      	ldr	r3, [r7, #4]
 8106f6a:	695b      	ldr	r3, [r3, #20]
 8106f6c:	f107 020c 	add.w	r2, r7, #12
 8106f70:	2112      	movs	r1, #18
 8106f72:	6978      	ldr	r0, [r7, #20]
 8106f74:	4798      	blx	r3
 8106f76:	4603      	mov	r3, r0
 8106f78:	2b00      	cmp	r3, #0
 8106f7a:	da03      	bge.n	8106f84 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8106f7c:	f06f 0304 	mvn.w	r3, #4
 8106f80:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8106f82:	e00b      	b.n	8106f9c <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8106f84:	68fb      	ldr	r3, [r7, #12]
 8106f86:	f003 031f 	and.w	r3, r3, #31
 8106f8a:	697a      	ldr	r2, [r7, #20]
 8106f8c:	429a      	cmp	r2, r3
 8106f8e:	d105      	bne.n	8106f9c <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8106f90:	687b      	ldr	r3, [r7, #4]
 8106f92:	697a      	ldr	r2, [r7, #20]
 8106f94:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8106f96:	2300      	movs	r3, #0
 8106f98:	613b      	str	r3, [r7, #16]
         break;
 8106f9a:	e005      	b.n	8106fa8 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8106f9c:	697b      	ldr	r3, [r7, #20]
 8106f9e:	3301      	adds	r3, #1
 8106fa0:	617b      	str	r3, [r7, #20]
 8106fa2:	697b      	ldr	r3, [r7, #20]
 8106fa4:	2b1f      	cmp	r3, #31
 8106fa6:	d9df      	bls.n	8106f68 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8106fa8:	687b      	ldr	r3, [r7, #4]
 8106faa:	681b      	ldr	r3, [r3, #0]
 8106fac:	2b1f      	cmp	r3, #31
 8106fae:	d902      	bls.n	8106fb6 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8106fb0:	f06f 0302 	mvn.w	r3, #2
 8106fb4:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8106fb6:	693b      	ldr	r3, [r7, #16]
 8106fb8:	2b00      	cmp	r3, #0
 8106fba:	d102      	bne.n	8106fc2 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8106fbc:	687b      	ldr	r3, [r7, #4]
 8106fbe:	2201      	movs	r2, #1
 8106fc0:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8106fc2:	693b      	ldr	r3, [r7, #16]
 }
 8106fc4:	4618      	mov	r0, r3
 8106fc6:	3718      	adds	r7, #24
 8106fc8:	46bd      	mov	sp, r7
 8106fca:	bd80      	pop	{r7, pc}

08106fcc <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8106fcc:	b580      	push	{r7, lr}
 8106fce:	b084      	sub	sp, #16
 8106fd0:	af00      	add	r7, sp, #0
 8106fd2:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8106fd4:	2300      	movs	r3, #0
 8106fd6:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8106fd8:	687b      	ldr	r3, [r7, #4]
 8106fda:	695b      	ldr	r3, [r3, #20]
 8106fdc:	687a      	ldr	r2, [r7, #4]
 8106fde:	6810      	ldr	r0, [r2, #0]
 8106fe0:	f107 020c 	add.w	r2, r7, #12
 8106fe4:	2101      	movs	r1, #1
 8106fe6:	4798      	blx	r3
 8106fe8:	4603      	mov	r3, r0
 8106fea:	2b00      	cmp	r3, #0
 8106fec:	da02      	bge.n	8106ff4 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8106fee:	f06f 0304 	mvn.w	r3, #4
 8106ff2:	e06e      	b.n	81070d2 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8106ff4:	687b      	ldr	r3, [r7, #4]
 8106ff6:	695b      	ldr	r3, [r3, #20]
 8106ff8:	687a      	ldr	r2, [r7, #4]
 8106ffa:	6810      	ldr	r0, [r2, #0]
 8106ffc:	f107 020c 	add.w	r2, r7, #12
 8107000:	2101      	movs	r1, #1
 8107002:	4798      	blx	r3
 8107004:	4603      	mov	r3, r0
 8107006:	2b00      	cmp	r3, #0
 8107008:	da02      	bge.n	8107010 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 810700a:	f06f 0304 	mvn.w	r3, #4
 810700e:	e060      	b.n	81070d2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8107010:	68fb      	ldr	r3, [r7, #12]
 8107012:	f003 0304 	and.w	r3, r3, #4
 8107016:	2b00      	cmp	r3, #0
 8107018:	d101      	bne.n	810701e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 810701a:	2301      	movs	r3, #1
 810701c:	e059      	b.n	81070d2 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 810701e:	687b      	ldr	r3, [r7, #4]
 8107020:	695b      	ldr	r3, [r3, #20]
 8107022:	687a      	ldr	r2, [r7, #4]
 8107024:	6810      	ldr	r0, [r2, #0]
 8107026:	f107 020c 	add.w	r2, r7, #12
 810702a:	2100      	movs	r1, #0
 810702c:	4798      	blx	r3
 810702e:	4603      	mov	r3, r0
 8107030:	2b00      	cmp	r3, #0
 8107032:	da02      	bge.n	810703a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8107034:	f06f 0304 	mvn.w	r3, #4
 8107038:	e04b      	b.n	81070d2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 810703a:	68fb      	ldr	r3, [r7, #12]
 810703c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8107040:	2b00      	cmp	r3, #0
 8107042:	d11b      	bne.n	810707c <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8107044:	68fb      	ldr	r3, [r7, #12]
 8107046:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810704a:	2b00      	cmp	r3, #0
 810704c:	d006      	beq.n	810705c <LAN8742_GetLinkState+0x90>
 810704e:	68fb      	ldr	r3, [r7, #12]
 8107050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107054:	2b00      	cmp	r3, #0
 8107056:	d001      	beq.n	810705c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8107058:	2302      	movs	r3, #2
 810705a:	e03a      	b.n	81070d2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 810705c:	68fb      	ldr	r3, [r7, #12]
 810705e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8107062:	2b00      	cmp	r3, #0
 8107064:	d001      	beq.n	810706a <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8107066:	2303      	movs	r3, #3
 8107068:	e033      	b.n	81070d2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 810706a:	68fb      	ldr	r3, [r7, #12]
 810706c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107070:	2b00      	cmp	r3, #0
 8107072:	d001      	beq.n	8107078 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8107074:	2304      	movs	r3, #4
 8107076:	e02c      	b.n	81070d2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8107078:	2305      	movs	r3, #5
 810707a:	e02a      	b.n	81070d2 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 810707c:	687b      	ldr	r3, [r7, #4]
 810707e:	695b      	ldr	r3, [r3, #20]
 8107080:	687a      	ldr	r2, [r7, #4]
 8107082:	6810      	ldr	r0, [r2, #0]
 8107084:	f107 020c 	add.w	r2, r7, #12
 8107088:	211f      	movs	r1, #31
 810708a:	4798      	blx	r3
 810708c:	4603      	mov	r3, r0
 810708e:	2b00      	cmp	r3, #0
 8107090:	da02      	bge.n	8107098 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8107092:	f06f 0304 	mvn.w	r3, #4
 8107096:	e01c      	b.n	81070d2 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8107098:	68fb      	ldr	r3, [r7, #12]
 810709a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 810709e:	2b00      	cmp	r3, #0
 81070a0:	d101      	bne.n	81070a6 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 81070a2:	2306      	movs	r3, #6
 81070a4:	e015      	b.n	81070d2 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 81070a6:	68fb      	ldr	r3, [r7, #12]
 81070a8:	f003 031c 	and.w	r3, r3, #28
 81070ac:	2b18      	cmp	r3, #24
 81070ae:	d101      	bne.n	81070b4 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 81070b0:	2302      	movs	r3, #2
 81070b2:	e00e      	b.n	81070d2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 81070b4:	68fb      	ldr	r3, [r7, #12]
 81070b6:	f003 031c 	and.w	r3, r3, #28
 81070ba:	2b08      	cmp	r3, #8
 81070bc:	d101      	bne.n	81070c2 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 81070be:	2303      	movs	r3, #3
 81070c0:	e007      	b.n	81070d2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 81070c2:	68fb      	ldr	r3, [r7, #12]
 81070c4:	f003 031c 	and.w	r3, r3, #28
 81070c8:	2b14      	cmp	r3, #20
 81070ca:	d101      	bne.n	81070d0 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 81070cc:	2304      	movs	r3, #4
 81070ce:	e000      	b.n	81070d2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 81070d0:	2305      	movs	r3, #5
    }
  }
}
 81070d2:	4618      	mov	r0, r3
 81070d4:	3710      	adds	r7, #16
 81070d6:	46bd      	mov	sp, r7
 81070d8:	bd80      	pop	{r7, pc}
	...

081070dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81070dc:	b480      	push	{r7}
 81070de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81070e0:	4b0b      	ldr	r3, [pc, #44]	@ (8107110 <SystemInit+0x34>)
 81070e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81070e6:	4a0a      	ldr	r2, [pc, #40]	@ (8107110 <SystemInit+0x34>)
 81070e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81070ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81070f0:	4b07      	ldr	r3, [pc, #28]	@ (8107110 <SystemInit+0x34>)
 81070f2:	691b      	ldr	r3, [r3, #16]
 81070f4:	4a06      	ldr	r2, [pc, #24]	@ (8107110 <SystemInit+0x34>)
 81070f6:	f043 0310 	orr.w	r3, r3, #16
 81070fa:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 81070fc:	4b04      	ldr	r3, [pc, #16]	@ (8107110 <SystemInit+0x34>)
 81070fe:	f04f 6201 	mov.w	r2, #135266304	@ 0x8100000
 8107102:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8107104:	bf00      	nop
 8107106:	46bd      	mov	sp, r7
 8107108:	f85d 7b04 	ldr.w	r7, [sp], #4
 810710c:	4770      	bx	lr
 810710e:	bf00      	nop
 8107110:	e000ed00 	.word	0xe000ed00

08107114 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8107114:	b580      	push	{r7, lr}
 8107116:	b082      	sub	sp, #8
 8107118:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810711a:	4b28      	ldr	r3, [pc, #160]	@ (81071bc <HAL_Init+0xa8>)
 810711c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8107120:	4a26      	ldr	r2, [pc, #152]	@ (81071bc <HAL_Init+0xa8>)
 8107122:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8107126:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810712a:	4b24      	ldr	r3, [pc, #144]	@ (81071bc <HAL_Init+0xa8>)
 810712c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8107130:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8107134:	603b      	str	r3, [r7, #0]
 8107136:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8107138:	4b21      	ldr	r3, [pc, #132]	@ (81071c0 <HAL_Init+0xac>)
 810713a:	681b      	ldr	r3, [r3, #0]
 810713c:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8107140:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8107144:	4a1e      	ldr	r2, [pc, #120]	@ (81071c0 <HAL_Init+0xac>)
 8107146:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 810714a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 810714c:	4b1c      	ldr	r3, [pc, #112]	@ (81071c0 <HAL_Init+0xac>)
 810714e:	681b      	ldr	r3, [r3, #0]
 8107150:	4a1b      	ldr	r2, [pc, #108]	@ (81071c0 <HAL_Init+0xac>)
 8107152:	f043 0301 	orr.w	r3, r3, #1
 8107156:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8107158:	2003      	movs	r0, #3
 810715a:	f000 f91a 	bl	8107392 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810715e:	f002 ff79 	bl	810a054 <HAL_RCC_GetSysClockFreq>
 8107162:	4602      	mov	r2, r0
 8107164:	4b15      	ldr	r3, [pc, #84]	@ (81071bc <HAL_Init+0xa8>)
 8107166:	699b      	ldr	r3, [r3, #24]
 8107168:	0a1b      	lsrs	r3, r3, #8
 810716a:	f003 030f 	and.w	r3, r3, #15
 810716e:	4915      	ldr	r1, [pc, #84]	@ (81071c4 <HAL_Init+0xb0>)
 8107170:	5ccb      	ldrb	r3, [r1, r3]
 8107172:	f003 031f 	and.w	r3, r3, #31
 8107176:	fa22 f303 	lsr.w	r3, r2, r3
 810717a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810717c:	4b0f      	ldr	r3, [pc, #60]	@ (81071bc <HAL_Init+0xa8>)
 810717e:	699b      	ldr	r3, [r3, #24]
 8107180:	f003 030f 	and.w	r3, r3, #15
 8107184:	4a0f      	ldr	r2, [pc, #60]	@ (81071c4 <HAL_Init+0xb0>)
 8107186:	5cd3      	ldrb	r3, [r2, r3]
 8107188:	f003 031f 	and.w	r3, r3, #31
 810718c:	687a      	ldr	r2, [r7, #4]
 810718e:	fa22 f303 	lsr.w	r3, r2, r3
 8107192:	4a0d      	ldr	r2, [pc, #52]	@ (81071c8 <HAL_Init+0xb4>)
 8107194:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8107196:	4b0c      	ldr	r3, [pc, #48]	@ (81071c8 <HAL_Init+0xb4>)
 8107198:	681b      	ldr	r3, [r3, #0]
 810719a:	4a0c      	ldr	r2, [pc, #48]	@ (81071cc <HAL_Init+0xb8>)
 810719c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810719e:	2000      	movs	r0, #0
 81071a0:	f7f9 fc94 	bl	8100acc <HAL_InitTick>
 81071a4:	4603      	mov	r3, r0
 81071a6:	2b00      	cmp	r3, #0
 81071a8:	d001      	beq.n	81071ae <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81071aa:	2301      	movs	r3, #1
 81071ac:	e002      	b.n	81071b4 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81071ae:	f7f9 fbd7 	bl	8100960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81071b2:	2300      	movs	r3, #0
}
 81071b4:	4618      	mov	r0, r3
 81071b6:	3708      	adds	r7, #8
 81071b8:	46bd      	mov	sp, r7
 81071ba:	bd80      	pop	{r7, pc}
 81071bc:	58024400 	.word	0x58024400
 81071c0:	40024400 	.word	0x40024400
 81071c4:	0811fc30 	.word	0x0811fc30
 81071c8:	10000018 	.word	0x10000018
 81071cc:	10000014 	.word	0x10000014

081071d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81071d0:	b480      	push	{r7}
 81071d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81071d4:	4b06      	ldr	r3, [pc, #24]	@ (81071f0 <HAL_IncTick+0x20>)
 81071d6:	781b      	ldrb	r3, [r3, #0]
 81071d8:	461a      	mov	r2, r3
 81071da:	4b06      	ldr	r3, [pc, #24]	@ (81071f4 <HAL_IncTick+0x24>)
 81071dc:	681b      	ldr	r3, [r3, #0]
 81071de:	4413      	add	r3, r2
 81071e0:	4a04      	ldr	r2, [pc, #16]	@ (81071f4 <HAL_IncTick+0x24>)
 81071e2:	6013      	str	r3, [r2, #0]
}
 81071e4:	bf00      	nop
 81071e6:	46bd      	mov	sp, r7
 81071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81071ec:	4770      	bx	lr
 81071ee:	bf00      	nop
 81071f0:	10000020 	.word	0x10000020
 81071f4:	10000364 	.word	0x10000364

081071f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81071f8:	b480      	push	{r7}
 81071fa:	af00      	add	r7, sp, #0
  return uwTick;
 81071fc:	4b03      	ldr	r3, [pc, #12]	@ (810720c <HAL_GetTick+0x14>)
 81071fe:	681b      	ldr	r3, [r3, #0]
}
 8107200:	4618      	mov	r0, r3
 8107202:	46bd      	mov	sp, r7
 8107204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107208:	4770      	bx	lr
 810720a:	bf00      	nop
 810720c:	10000364 	.word	0x10000364

08107210 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8107210:	b480      	push	{r7}
 8107212:	b083      	sub	sp, #12
 8107214:	af00      	add	r7, sp, #0
 8107216:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8107218:	4b06      	ldr	r3, [pc, #24]	@ (8107234 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 810721a:	685b      	ldr	r3, [r3, #4]
 810721c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8107220:	4904      	ldr	r1, [pc, #16]	@ (8107234 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8107222:	687b      	ldr	r3, [r7, #4]
 8107224:	4313      	orrs	r3, r2
 8107226:	604b      	str	r3, [r1, #4]
}
 8107228:	bf00      	nop
 810722a:	370c      	adds	r7, #12
 810722c:	46bd      	mov	sp, r7
 810722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107232:	4770      	bx	lr
 8107234:	58000400 	.word	0x58000400

08107238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8107238:	b480      	push	{r7}
 810723a:	b085      	sub	sp, #20
 810723c:	af00      	add	r7, sp, #0
 810723e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8107240:	687b      	ldr	r3, [r7, #4]
 8107242:	f003 0307 	and.w	r3, r3, #7
 8107246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8107248:	4b0c      	ldr	r3, [pc, #48]	@ (810727c <__NVIC_SetPriorityGrouping+0x44>)
 810724a:	68db      	ldr	r3, [r3, #12]
 810724c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810724e:	68ba      	ldr	r2, [r7, #8]
 8107250:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8107254:	4013      	ands	r3, r2
 8107256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8107258:	68fb      	ldr	r3, [r7, #12]
 810725a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 810725c:	68bb      	ldr	r3, [r7, #8]
 810725e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8107260:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8107264:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810726a:	4a04      	ldr	r2, [pc, #16]	@ (810727c <__NVIC_SetPriorityGrouping+0x44>)
 810726c:	68bb      	ldr	r3, [r7, #8]
 810726e:	60d3      	str	r3, [r2, #12]
}
 8107270:	bf00      	nop
 8107272:	3714      	adds	r7, #20
 8107274:	46bd      	mov	sp, r7
 8107276:	f85d 7b04 	ldr.w	r7, [sp], #4
 810727a:	4770      	bx	lr
 810727c:	e000ed00 	.word	0xe000ed00

08107280 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8107280:	b480      	push	{r7}
 8107282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8107284:	4b04      	ldr	r3, [pc, #16]	@ (8107298 <__NVIC_GetPriorityGrouping+0x18>)
 8107286:	68db      	ldr	r3, [r3, #12]
 8107288:	0a1b      	lsrs	r3, r3, #8
 810728a:	f003 0307 	and.w	r3, r3, #7
}
 810728e:	4618      	mov	r0, r3
 8107290:	46bd      	mov	sp, r7
 8107292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107296:	4770      	bx	lr
 8107298:	e000ed00 	.word	0xe000ed00

0810729c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810729c:	b480      	push	{r7}
 810729e:	b083      	sub	sp, #12
 81072a0:	af00      	add	r7, sp, #0
 81072a2:	4603      	mov	r3, r0
 81072a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81072a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81072aa:	2b00      	cmp	r3, #0
 81072ac:	db0b      	blt.n	81072c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81072ae:	88fb      	ldrh	r3, [r7, #6]
 81072b0:	f003 021f 	and.w	r2, r3, #31
 81072b4:	4907      	ldr	r1, [pc, #28]	@ (81072d4 <__NVIC_EnableIRQ+0x38>)
 81072b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81072ba:	095b      	lsrs	r3, r3, #5
 81072bc:	2001      	movs	r0, #1
 81072be:	fa00 f202 	lsl.w	r2, r0, r2
 81072c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81072c6:	bf00      	nop
 81072c8:	370c      	adds	r7, #12
 81072ca:	46bd      	mov	sp, r7
 81072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81072d0:	4770      	bx	lr
 81072d2:	bf00      	nop
 81072d4:	e000e100 	.word	0xe000e100

081072d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81072d8:	b480      	push	{r7}
 81072da:	b083      	sub	sp, #12
 81072dc:	af00      	add	r7, sp, #0
 81072de:	4603      	mov	r3, r0
 81072e0:	6039      	str	r1, [r7, #0]
 81072e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81072e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81072e8:	2b00      	cmp	r3, #0
 81072ea:	db0a      	blt.n	8107302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81072ec:	683b      	ldr	r3, [r7, #0]
 81072ee:	b2da      	uxtb	r2, r3
 81072f0:	490c      	ldr	r1, [pc, #48]	@ (8107324 <__NVIC_SetPriority+0x4c>)
 81072f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81072f6:	0112      	lsls	r2, r2, #4
 81072f8:	b2d2      	uxtb	r2, r2
 81072fa:	440b      	add	r3, r1
 81072fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8107300:	e00a      	b.n	8107318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8107302:	683b      	ldr	r3, [r7, #0]
 8107304:	b2da      	uxtb	r2, r3
 8107306:	4908      	ldr	r1, [pc, #32]	@ (8107328 <__NVIC_SetPriority+0x50>)
 8107308:	88fb      	ldrh	r3, [r7, #6]
 810730a:	f003 030f 	and.w	r3, r3, #15
 810730e:	3b04      	subs	r3, #4
 8107310:	0112      	lsls	r2, r2, #4
 8107312:	b2d2      	uxtb	r2, r2
 8107314:	440b      	add	r3, r1
 8107316:	761a      	strb	r2, [r3, #24]
}
 8107318:	bf00      	nop
 810731a:	370c      	adds	r7, #12
 810731c:	46bd      	mov	sp, r7
 810731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107322:	4770      	bx	lr
 8107324:	e000e100 	.word	0xe000e100
 8107328:	e000ed00 	.word	0xe000ed00

0810732c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810732c:	b480      	push	{r7}
 810732e:	b089      	sub	sp, #36	@ 0x24
 8107330:	af00      	add	r7, sp, #0
 8107332:	60f8      	str	r0, [r7, #12]
 8107334:	60b9      	str	r1, [r7, #8]
 8107336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8107338:	68fb      	ldr	r3, [r7, #12]
 810733a:	f003 0307 	and.w	r3, r3, #7
 810733e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8107340:	69fb      	ldr	r3, [r7, #28]
 8107342:	f1c3 0307 	rsb	r3, r3, #7
 8107346:	2b04      	cmp	r3, #4
 8107348:	bf28      	it	cs
 810734a:	2304      	movcs	r3, #4
 810734c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810734e:	69fb      	ldr	r3, [r7, #28]
 8107350:	3304      	adds	r3, #4
 8107352:	2b06      	cmp	r3, #6
 8107354:	d902      	bls.n	810735c <NVIC_EncodePriority+0x30>
 8107356:	69fb      	ldr	r3, [r7, #28]
 8107358:	3b03      	subs	r3, #3
 810735a:	e000      	b.n	810735e <NVIC_EncodePriority+0x32>
 810735c:	2300      	movs	r3, #0
 810735e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8107360:	f04f 32ff 	mov.w	r2, #4294967295
 8107364:	69bb      	ldr	r3, [r7, #24]
 8107366:	fa02 f303 	lsl.w	r3, r2, r3
 810736a:	43da      	mvns	r2, r3
 810736c:	68bb      	ldr	r3, [r7, #8]
 810736e:	401a      	ands	r2, r3
 8107370:	697b      	ldr	r3, [r7, #20]
 8107372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8107374:	f04f 31ff 	mov.w	r1, #4294967295
 8107378:	697b      	ldr	r3, [r7, #20]
 810737a:	fa01 f303 	lsl.w	r3, r1, r3
 810737e:	43d9      	mvns	r1, r3
 8107380:	687b      	ldr	r3, [r7, #4]
 8107382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8107384:	4313      	orrs	r3, r2
         );
}
 8107386:	4618      	mov	r0, r3
 8107388:	3724      	adds	r7, #36	@ 0x24
 810738a:	46bd      	mov	sp, r7
 810738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107390:	4770      	bx	lr

08107392 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8107392:	b580      	push	{r7, lr}
 8107394:	b082      	sub	sp, #8
 8107396:	af00      	add	r7, sp, #0
 8107398:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810739a:	6878      	ldr	r0, [r7, #4]
 810739c:	f7ff ff4c 	bl	8107238 <__NVIC_SetPriorityGrouping>
}
 81073a0:	bf00      	nop
 81073a2:	3708      	adds	r7, #8
 81073a4:	46bd      	mov	sp, r7
 81073a6:	bd80      	pop	{r7, pc}

081073a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81073a8:	b580      	push	{r7, lr}
 81073aa:	b086      	sub	sp, #24
 81073ac:	af00      	add	r7, sp, #0
 81073ae:	4603      	mov	r3, r0
 81073b0:	60b9      	str	r1, [r7, #8]
 81073b2:	607a      	str	r2, [r7, #4]
 81073b4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81073b6:	f7ff ff63 	bl	8107280 <__NVIC_GetPriorityGrouping>
 81073ba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81073bc:	687a      	ldr	r2, [r7, #4]
 81073be:	68b9      	ldr	r1, [r7, #8]
 81073c0:	6978      	ldr	r0, [r7, #20]
 81073c2:	f7ff ffb3 	bl	810732c <NVIC_EncodePriority>
 81073c6:	4602      	mov	r2, r0
 81073c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81073cc:	4611      	mov	r1, r2
 81073ce:	4618      	mov	r0, r3
 81073d0:	f7ff ff82 	bl	81072d8 <__NVIC_SetPriority>
}
 81073d4:	bf00      	nop
 81073d6:	3718      	adds	r7, #24
 81073d8:	46bd      	mov	sp, r7
 81073da:	bd80      	pop	{r7, pc}

081073dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81073dc:	b580      	push	{r7, lr}
 81073de:	b082      	sub	sp, #8
 81073e0:	af00      	add	r7, sp, #0
 81073e2:	4603      	mov	r3, r0
 81073e4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81073e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81073ea:	4618      	mov	r0, r3
 81073ec:	f7ff ff56 	bl	810729c <__NVIC_EnableIRQ>
}
 81073f0:	bf00      	nop
 81073f2:	3708      	adds	r7, #8
 81073f4:	46bd      	mov	sp, r7
 81073f6:	bd80      	pop	{r7, pc}

081073f8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81073f8:	b480      	push	{r7}
 81073fa:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81073fc:	4b07      	ldr	r3, [pc, #28]	@ (810741c <HAL_GetCurrentCPUID+0x24>)
 81073fe:	681b      	ldr	r3, [r3, #0]
 8107400:	091b      	lsrs	r3, r3, #4
 8107402:	f003 030f 	and.w	r3, r3, #15
 8107406:	2b07      	cmp	r3, #7
 8107408:	d101      	bne.n	810740e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810740a:	2303      	movs	r3, #3
 810740c:	e000      	b.n	8107410 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810740e:	2301      	movs	r3, #1
  }
}
 8107410:	4618      	mov	r0, r3
 8107412:	46bd      	mov	sp, r7
 8107414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107418:	4770      	bx	lr
 810741a:	bf00      	nop
 810741c:	e000ed00 	.word	0xe000ed00

08107420 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8107420:	b580      	push	{r7, lr}
 8107422:	b084      	sub	sp, #16
 8107424:	af00      	add	r7, sp, #0
 8107426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8107428:	687b      	ldr	r3, [r7, #4]
 810742a:	2b00      	cmp	r3, #0
 810742c:	d101      	bne.n	8107432 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 810742e:	2301      	movs	r3, #1
 8107430:	e0e7      	b.n	8107602 <HAL_ETH_Init+0x1e2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8107432:	687b      	ldr	r3, [r7, #4]
 8107434:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8107438:	2b00      	cmp	r3, #0
 810743a:	d106      	bne.n	810744a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 810743c:	687b      	ldr	r3, [r7, #4]
 810743e:	2223      	movs	r2, #35	@ 0x23
 8107440:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8107444:	6878      	ldr	r0, [r7, #4]
 8107446:	f7fd f8af 	bl	81045a8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810744a:	4b70      	ldr	r3, [pc, #448]	@ (810760c <HAL_ETH_Init+0x1ec>)
 810744c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8107450:	4a6e      	ldr	r2, [pc, #440]	@ (810760c <HAL_ETH_Init+0x1ec>)
 8107452:	f043 0302 	orr.w	r3, r3, #2
 8107456:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 810745a:	4b6c      	ldr	r3, [pc, #432]	@ (810760c <HAL_ETH_Init+0x1ec>)
 810745c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8107460:	f003 0302 	and.w	r3, r3, #2
 8107464:	60bb      	str	r3, [r7, #8]
 8107466:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8107468:	687b      	ldr	r3, [r7, #4]
 810746a:	7a1b      	ldrb	r3, [r3, #8]
 810746c:	2b00      	cmp	r3, #0
 810746e:	d103      	bne.n	8107478 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8107470:	2000      	movs	r0, #0
 8107472:	f7ff fecd 	bl	8107210 <HAL_SYSCFG_ETHInterfaceSelect>
 8107476:	e003      	b.n	8107480 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8107478:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 810747c:	f7ff fec8 	bl	8107210 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8107480:	4b63      	ldr	r3, [pc, #396]	@ (8107610 <HAL_ETH_Init+0x1f0>)
 8107482:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8107484:	687b      	ldr	r3, [r7, #4]
 8107486:	681b      	ldr	r3, [r3, #0]
 8107488:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810748c:	681b      	ldr	r3, [r3, #0]
 810748e:	687a      	ldr	r2, [r7, #4]
 8107490:	6812      	ldr	r2, [r2, #0]
 8107492:	f043 0301 	orr.w	r3, r3, #1
 8107496:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810749a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 810749c:	f7ff feac 	bl	81071f8 <HAL_GetTick>
 81074a0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 81074a2:	e011      	b.n	81074c8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 81074a4:	f7ff fea8 	bl	81071f8 <HAL_GetTick>
 81074a8:	4602      	mov	r2, r0
 81074aa:	68fb      	ldr	r3, [r7, #12]
 81074ac:	1ad3      	subs	r3, r2, r3
 81074ae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 81074b2:	d909      	bls.n	81074c8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 81074b4:	687b      	ldr	r3, [r7, #4]
 81074b6:	2204      	movs	r2, #4
 81074b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 81074bc:	687b      	ldr	r3, [r7, #4]
 81074be:	22e0      	movs	r2, #224	@ 0xe0
 81074c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 81074c4:	2301      	movs	r3, #1
 81074c6:	e09c      	b.n	8107602 <HAL_ETH_Init+0x1e2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 81074c8:	687b      	ldr	r3, [r7, #4]
 81074ca:	681b      	ldr	r3, [r3, #0]
 81074cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81074d0:	681b      	ldr	r3, [r3, #0]
 81074d2:	f003 0301 	and.w	r3, r3, #1
 81074d6:	2b00      	cmp	r3, #0
 81074d8:	d1e4      	bne.n	81074a4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 81074da:	6878      	ldr	r0, [r7, #4]
 81074dc:	f000 ff34 	bl	8108348 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 81074e0:	f002 ff32 	bl	810a348 <HAL_RCC_GetHCLKFreq>
 81074e4:	4603      	mov	r3, r0
 81074e6:	4a4b      	ldr	r2, [pc, #300]	@ (8107614 <HAL_ETH_Init+0x1f4>)
 81074e8:	fba2 2303 	umull	r2, r3, r2, r3
 81074ec:	0c9a      	lsrs	r2, r3, #18
 81074ee:	687b      	ldr	r3, [r7, #4]
 81074f0:	681b      	ldr	r3, [r3, #0]
 81074f2:	3a01      	subs	r2, #1
 81074f4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 81074f8:	6878      	ldr	r0, [r7, #4]
 81074fa:	f001 f931 	bl	8108760 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 81074fe:	687b      	ldr	r3, [r7, #4]
 8107500:	681b      	ldr	r3, [r3, #0]
 8107502:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8107506:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 810750a:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 810750e:	687a      	ldr	r2, [r7, #4]
 8107510:	6812      	ldr	r2, [r2, #0]
 8107512:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8107516:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810751a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 810751e:	687b      	ldr	r3, [r7, #4]
 8107520:	695b      	ldr	r3, [r3, #20]
 8107522:	f003 0303 	and.w	r3, r3, #3
 8107526:	2b00      	cmp	r3, #0
 8107528:	d009      	beq.n	810753e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 810752a:	687b      	ldr	r3, [r7, #4]
 810752c:	2201      	movs	r2, #1
 810752e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8107532:	687b      	ldr	r3, [r7, #4]
 8107534:	22e0      	movs	r2, #224	@ 0xe0
 8107536:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 810753a:	2301      	movs	r3, #1
 810753c:	e061      	b.n	8107602 <HAL_ETH_Init+0x1e2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 810753e:	687b      	ldr	r3, [r7, #4]
 8107540:	681b      	ldr	r3, [r3, #0]
 8107542:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8107546:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 810754a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 810754e:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8107552:	687a      	ldr	r2, [r7, #4]
 8107554:	6952      	ldr	r2, [r2, #20]
 8107556:	0051      	lsls	r1, r2, #1
 8107558:	687a      	ldr	r2, [r7, #4]
 810755a:	6812      	ldr	r2, [r2, #0]
 810755c:	430b      	orrs	r3, r1
 810755e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8107562:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8107566:	6878      	ldr	r0, [r7, #4]
 8107568:	f001 f997 	bl	810889a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 810756c:	6878      	ldr	r0, [r7, #4]
 810756e:	f001 f9dd 	bl	810892c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8107572:	687b      	ldr	r3, [r7, #4]
 8107574:	685b      	ldr	r3, [r3, #4]
 8107576:	3305      	adds	r3, #5
 8107578:	781b      	ldrb	r3, [r3, #0]
 810757a:	021a      	lsls	r2, r3, #8
 810757c:	687b      	ldr	r3, [r7, #4]
 810757e:	685b      	ldr	r3, [r3, #4]
 8107580:	3304      	adds	r3, #4
 8107582:	781b      	ldrb	r3, [r3, #0]
 8107584:	4619      	mov	r1, r3
 8107586:	687b      	ldr	r3, [r7, #4]
 8107588:	681b      	ldr	r3, [r3, #0]
 810758a:	430a      	orrs	r2, r1
 810758c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8107590:	687b      	ldr	r3, [r7, #4]
 8107592:	685b      	ldr	r3, [r3, #4]
 8107594:	3303      	adds	r3, #3
 8107596:	781b      	ldrb	r3, [r3, #0]
 8107598:	061a      	lsls	r2, r3, #24
 810759a:	687b      	ldr	r3, [r7, #4]
 810759c:	685b      	ldr	r3, [r3, #4]
 810759e:	3302      	adds	r3, #2
 81075a0:	781b      	ldrb	r3, [r3, #0]
 81075a2:	041b      	lsls	r3, r3, #16
 81075a4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 81075a6:	687b      	ldr	r3, [r7, #4]
 81075a8:	685b      	ldr	r3, [r3, #4]
 81075aa:	3301      	adds	r3, #1
 81075ac:	781b      	ldrb	r3, [r3, #0]
 81075ae:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 81075b0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 81075b2:	687b      	ldr	r3, [r7, #4]
 81075b4:	685b      	ldr	r3, [r3, #4]
 81075b6:	781b      	ldrb	r3, [r3, #0]
 81075b8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 81075ba:	687b      	ldr	r3, [r7, #4]
 81075bc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 81075be:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 81075c0:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 81075c4:	687b      	ldr	r3, [r7, #4]
 81075c6:	681b      	ldr	r3, [r3, #0]
 81075c8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 81075cc:	687b      	ldr	r3, [r7, #4]
 81075ce:	681a      	ldr	r2, [r3, #0]
 81075d0:	4b11      	ldr	r3, [pc, #68]	@ (8107618 <HAL_ETH_Init+0x1f8>)
 81075d2:	430b      	orrs	r3, r1
 81075d4:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 81075d8:	687b      	ldr	r3, [r7, #4]
 81075da:	681b      	ldr	r3, [r3, #0]
 81075dc:	f8d3 3710 	ldr.w	r3, [r3, #1808]	@ 0x710
 81075e0:	687a      	ldr	r2, [r7, #4]
 81075e2:	6812      	ldr	r2, [r2, #0]
 81075e4:	f043 6342 	orr.w	r3, r3, #203423744	@ 0xc200000
 81075e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 81075ec:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 81075f0:	687b      	ldr	r3, [r7, #4]
 81075f2:	2200      	movs	r2, #0
 81075f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 81075f8:	687b      	ldr	r3, [r7, #4]
 81075fa:	2210      	movs	r2, #16
 81075fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8107600:	2300      	movs	r3, #0
}
 8107602:	4618      	mov	r0, r3
 8107604:	3710      	adds	r7, #16
 8107606:	46bd      	mov	sp, r7
 8107608:	bd80      	pop	{r7, pc}
 810760a:	bf00      	nop
 810760c:	58024400 	.word	0x58024400
 8107610:	58000400 	.word	0x58000400
 8107614:	431bde83 	.word	0x431bde83
 8107618:	0c020060 	.word	0x0c020060

0810761c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 810761c:	b580      	push	{r7, lr}
 810761e:	b082      	sub	sp, #8
 8107620:	af00      	add	r7, sp, #0
 8107622:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8107624:	687b      	ldr	r3, [r7, #4]
 8107626:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810762a:	2b10      	cmp	r3, #16
 810762c:	d166      	bne.n	81076fc <HAL_ETH_Start_IT+0xe0>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 810762e:	687b      	ldr	r3, [r7, #4]
 8107630:	2223      	movs	r2, #35	@ 0x23
 8107632:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8107636:	687b      	ldr	r3, [r7, #4]
 8107638:	2201      	movs	r2, #1
 810763a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 810763c:	687b      	ldr	r3, [r7, #4]
 810763e:	2204      	movs	r2, #4
 8107640:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8107642:	6878      	ldr	r0, [r7, #4]
 8107644:	f000 f9e5 	bl	8107a12 <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8107648:	687b      	ldr	r3, [r7, #4]
 810764a:	681b      	ldr	r3, [r3, #0]
 810764c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8107650:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8107654:	687a      	ldr	r2, [r7, #4]
 8107656:	6812      	ldr	r2, [r2, #0]
 8107658:	f043 0301 	orr.w	r3, r3, #1
 810765c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8107660:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8107664:	687b      	ldr	r3, [r7, #4]
 8107666:	681b      	ldr	r3, [r3, #0]
 8107668:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810766c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8107670:	687a      	ldr	r2, [r7, #4]
 8107672:	6812      	ldr	r2, [r2, #0]
 8107674:	f043 0301 	orr.w	r3, r3, #1
 8107678:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810767c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8107680:	687b      	ldr	r3, [r7, #4]
 8107682:	681b      	ldr	r3, [r3, #0]
 8107684:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8107688:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 810768c:	687a      	ldr	r2, [r7, #4]
 810768e:	6812      	ldr	r2, [r2, #0]
 8107690:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8107694:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8107698:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 810769c:	687b      	ldr	r3, [r7, #4]
 810769e:	681b      	ldr	r3, [r3, #0]
 81076a0:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 81076a4:	687b      	ldr	r3, [r7, #4]
 81076a6:	681b      	ldr	r3, [r3, #0]
 81076a8:	f042 0201 	orr.w	r2, r2, #1
 81076ac:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 81076b0:	687b      	ldr	r3, [r7, #4]
 81076b2:	681b      	ldr	r3, [r3, #0]
 81076b4:	681a      	ldr	r2, [r3, #0]
 81076b6:	687b      	ldr	r3, [r7, #4]
 81076b8:	681b      	ldr	r3, [r3, #0]
 81076ba:	f042 0202 	orr.w	r2, r2, #2
 81076be:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 81076c0:	687b      	ldr	r3, [r7, #4]
 81076c2:	681b      	ldr	r3, [r3, #0]
 81076c4:	681a      	ldr	r2, [r3, #0]
 81076c6:	687b      	ldr	r3, [r7, #4]
 81076c8:	681b      	ldr	r3, [r3, #0]
 81076ca:	f042 0201 	orr.w	r2, r2, #1
 81076ce:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 81076d0:	687b      	ldr	r3, [r7, #4]
 81076d2:	681b      	ldr	r3, [r3, #0]
 81076d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81076d8:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 81076dc:	687a      	ldr	r2, [r7, #4]
 81076de:	6812      	ldr	r2, [r2, #0]
 81076e0:	f443 4350 	orr.w	r3, r3, #53248	@ 0xd000
 81076e4:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 81076e8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81076ec:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 81076f0:	687b      	ldr	r3, [r7, #4]
 81076f2:	2223      	movs	r2, #35	@ 0x23
 81076f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 81076f8:	2300      	movs	r3, #0
 81076fa:	e000      	b.n	81076fe <HAL_ETH_Start_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 81076fc:	2301      	movs	r3, #1
  }
}
 81076fe:	4618      	mov	r0, r3
 8107700:	3708      	adds	r7, #8
 8107702:	46bd      	mov	sp, r7
 8107704:	bd80      	pop	{r7, pc}

08107706 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8107706:	b480      	push	{r7}
 8107708:	b085      	sub	sp, #20
 810770a:	af00      	add	r7, sp, #0
 810770c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 810770e:	687b      	ldr	r3, [r7, #4]
 8107710:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8107714:	2b23      	cmp	r3, #35	@ 0x23
 8107716:	d167      	bne.n	81077e8 <HAL_ETH_Stop_IT+0xe2>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8107718:	687b      	ldr	r3, [r7, #4]
 810771a:	2223      	movs	r2, #35	@ 0x23
 810771c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8107720:	687b      	ldr	r3, [r7, #4]
 8107722:	681b      	ldr	r3, [r3, #0]
 8107724:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8107728:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 810772c:	687a      	ldr	r2, [r7, #4]
 810772e:	6812      	ldr	r2, [r2, #0]
 8107730:	f423 4350 	bic.w	r3, r3, #53248	@ 0xd000
 8107734:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8107738:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810773c:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8107740:	687b      	ldr	r3, [r7, #4]
 8107742:	681b      	ldr	r3, [r3, #0]
 8107744:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8107748:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 810774c:	687a      	ldr	r2, [r7, #4]
 810774e:	6812      	ldr	r2, [r2, #0]
 8107750:	f023 0301 	bic.w	r3, r3, #1
 8107754:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8107758:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 810775c:	687b      	ldr	r3, [r7, #4]
 810775e:	681b      	ldr	r3, [r3, #0]
 8107760:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8107764:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8107768:	687a      	ldr	r2, [r7, #4]
 810776a:	6812      	ldr	r2, [r2, #0]
 810776c:	f023 0301 	bic.w	r3, r3, #1
 8107770:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8107774:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8107778:	687b      	ldr	r3, [r7, #4]
 810777a:	681b      	ldr	r3, [r3, #0]
 810777c:	681a      	ldr	r2, [r3, #0]
 810777e:	687b      	ldr	r3, [r7, #4]
 8107780:	681b      	ldr	r3, [r3, #0]
 8107782:	f022 0201 	bic.w	r2, r2, #1
 8107786:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8107788:	687b      	ldr	r3, [r7, #4]
 810778a:	681b      	ldr	r3, [r3, #0]
 810778c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8107790:	687b      	ldr	r3, [r7, #4]
 8107792:	681b      	ldr	r3, [r3, #0]
 8107794:	f042 0201 	orr.w	r2, r2, #1
 8107798:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 810779c:	687b      	ldr	r3, [r7, #4]
 810779e:	681b      	ldr	r3, [r3, #0]
 81077a0:	681a      	ldr	r2, [r3, #0]
 81077a2:	687b      	ldr	r3, [r7, #4]
 81077a4:	681b      	ldr	r3, [r3, #0]
 81077a6:	f022 0202 	bic.w	r2, r2, #2
 81077aa:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 81077ac:	2300      	movs	r3, #0
 81077ae:	60fb      	str	r3, [r7, #12]
 81077b0:	e00e      	b.n	81077d0 <HAL_ETH_Stop_IT+0xca>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 81077b2:	687b      	ldr	r3, [r7, #4]
 81077b4:	68fa      	ldr	r2, [r7, #12]
 81077b6:	3212      	adds	r2, #18
 81077b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81077bc:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 81077be:	68bb      	ldr	r3, [r7, #8]
 81077c0:	68db      	ldr	r3, [r3, #12]
 81077c2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 81077c6:	68bb      	ldr	r3, [r7, #8]
 81077c8:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 81077ca:	68fb      	ldr	r3, [r7, #12]
 81077cc:	3301      	adds	r3, #1
 81077ce:	60fb      	str	r3, [r7, #12]
 81077d0:	68fb      	ldr	r3, [r7, #12]
 81077d2:	2b03      	cmp	r3, #3
 81077d4:	d9ed      	bls.n	81077b2 <HAL_ETH_Stop_IT+0xac>
    }

    heth->RxDescList.ItMode = 0U;
 81077d6:	687b      	ldr	r3, [r7, #4]
 81077d8:	2200      	movs	r2, #0
 81077da:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 81077dc:	687b      	ldr	r3, [r7, #4]
 81077de:	2210      	movs	r2, #16
 81077e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 81077e4:	2300      	movs	r3, #0
 81077e6:	e000      	b.n	81077ea <HAL_ETH_Stop_IT+0xe4>
  }
  else
  {
    return HAL_ERROR;
 81077e8:	2301      	movs	r3, #1
  }
}
 81077ea:	4618      	mov	r0, r3
 81077ec:	3714      	adds	r7, #20
 81077ee:	46bd      	mov	sp, r7
 81077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81077f4:	4770      	bx	lr

081077f6 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 81077f6:	b580      	push	{r7, lr}
 81077f8:	b082      	sub	sp, #8
 81077fa:	af00      	add	r7, sp, #0
 81077fc:	6078      	str	r0, [r7, #4]
 81077fe:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8107800:	683b      	ldr	r3, [r7, #0]
 8107802:	2b00      	cmp	r3, #0
 8107804:	d109      	bne.n	810781a <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8107806:	687b      	ldr	r3, [r7, #4]
 8107808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810780c:	f043 0201 	orr.w	r2, r3, #1
 8107810:	687b      	ldr	r3, [r7, #4]
 8107812:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8107816:	2301      	movs	r3, #1
 8107818:	e03a      	b.n	8107890 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 810781a:	687b      	ldr	r3, [r7, #4]
 810781c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8107820:	2b23      	cmp	r3, #35	@ 0x23
 8107822:	d134      	bne.n	810788e <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8107824:	683b      	ldr	r3, [r7, #0]
 8107826:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8107828:	687b      	ldr	r3, [r7, #4]
 810782a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 810782c:	2201      	movs	r2, #1
 810782e:	6839      	ldr	r1, [r7, #0]
 8107830:	6878      	ldr	r0, [r7, #4]
 8107832:	f001 f8d8 	bl	81089e6 <ETH_Prepare_Tx_Descriptors>
 8107836:	4603      	mov	r3, r0
 8107838:	2b00      	cmp	r3, #0
 810783a:	d009      	beq.n	8107850 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 810783c:	687b      	ldr	r3, [r7, #4]
 810783e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8107842:	f043 0202 	orr.w	r2, r3, #2
 8107846:	687b      	ldr	r3, [r7, #4]
 8107848:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 810784c:	2301      	movs	r3, #1
 810784e:	e01f      	b.n	8107890 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8107850:	f3bf 8f4f 	dsb	sy
}
 8107854:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8107856:	687b      	ldr	r3, [r7, #4]
 8107858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810785a:	1c5a      	adds	r2, r3, #1
 810785c:	687b      	ldr	r3, [r7, #4]
 810785e:	629a      	str	r2, [r3, #40]	@ 0x28
 8107860:	687b      	ldr	r3, [r7, #4]
 8107862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107864:	2b03      	cmp	r3, #3
 8107866:	d904      	bls.n	8107872 <HAL_ETH_Transmit_IT+0x7c>
 8107868:	687b      	ldr	r3, [r7, #4]
 810786a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810786c:	1f1a      	subs	r2, r3, #4
 810786e:	687b      	ldr	r3, [r7, #4]
 8107870:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8107872:	687b      	ldr	r3, [r7, #4]
 8107874:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8107876:	687b      	ldr	r3, [r7, #4]
 8107878:	681a      	ldr	r2, [r3, #0]
 810787a:	687b      	ldr	r3, [r7, #4]
 810787c:	3106      	adds	r1, #6
 810787e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8107882:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8107886:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 810788a:	2300      	movs	r3, #0
 810788c:	e000      	b.n	8107890 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 810788e:	2301      	movs	r3, #1
  }
}
 8107890:	4618      	mov	r0, r3
 8107892:	3708      	adds	r7, #8
 8107894:	46bd      	mov	sp, r7
 8107896:	bd80      	pop	{r7, pc}

08107898 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8107898:	b580      	push	{r7, lr}
 810789a:	b088      	sub	sp, #32
 810789c:	af00      	add	r7, sp, #0
 810789e:	6078      	str	r0, [r7, #4]
 81078a0:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 81078a2:	2300      	movs	r3, #0
 81078a4:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 81078a6:	2300      	movs	r3, #0
 81078a8:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 81078aa:	683b      	ldr	r3, [r7, #0]
 81078ac:	2b00      	cmp	r3, #0
 81078ae:	d109      	bne.n	81078c4 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 81078b0:	687b      	ldr	r3, [r7, #4]
 81078b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81078b6:	f043 0201 	orr.w	r2, r3, #1
 81078ba:	687b      	ldr	r3, [r7, #4]
 81078bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 81078c0:	2301      	movs	r3, #1
 81078c2:	e0a2      	b.n	8107a0a <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 81078c4:	687b      	ldr	r3, [r7, #4]
 81078c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81078ca:	2b23      	cmp	r3, #35	@ 0x23
 81078cc:	d001      	beq.n	81078d2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 81078ce:	2301      	movs	r3, #1
 81078d0:	e09b      	b.n	8107a0a <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 81078d2:	687b      	ldr	r3, [r7, #4]
 81078d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81078d6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 81078d8:	687b      	ldr	r3, [r7, #4]
 81078da:	69fa      	ldr	r2, [r7, #28]
 81078dc:	3212      	adds	r2, #18
 81078de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81078e2:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 81078e4:	687b      	ldr	r3, [r7, #4]
 81078e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81078e8:	f1c3 0304 	rsb	r3, r3, #4
 81078ec:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 81078ee:	e064      	b.n	81079ba <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 81078f0:	69bb      	ldr	r3, [r7, #24]
 81078f2:	68db      	ldr	r3, [r3, #12]
 81078f4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 81078f8:	2b00      	cmp	r3, #0
 81078fa:	d007      	beq.n	810790c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 81078fc:	69bb      	ldr	r3, [r7, #24]
 81078fe:	685a      	ldr	r2, [r3, #4]
 8107900:	687b      	ldr	r3, [r7, #4]
 8107902:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8107904:	69bb      	ldr	r3, [r7, #24]
 8107906:	681a      	ldr	r2, [r3, #0]
 8107908:	687b      	ldr	r3, [r7, #4]
 810790a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 810790c:	69bb      	ldr	r3, [r7, #24]
 810790e:	68db      	ldr	r3, [r3, #12]
 8107910:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107914:	2b00      	cmp	r3, #0
 8107916:	d103      	bne.n	8107920 <HAL_ETH_ReadData+0x88>
 8107918:	687b      	ldr	r3, [r7, #4]
 810791a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810791c:	2b00      	cmp	r3, #0
 810791e:	d03a      	beq.n	8107996 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8107920:	69bb      	ldr	r3, [r7, #24]
 8107922:	68db      	ldr	r3, [r3, #12]
 8107924:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107928:	2b00      	cmp	r3, #0
 810792a:	d005      	beq.n	8107938 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 810792c:	687b      	ldr	r3, [r7, #4]
 810792e:	2200      	movs	r2, #0
 8107930:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8107932:	687b      	ldr	r3, [r7, #4]
 8107934:	2200      	movs	r2, #0
 8107936:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8107938:	69bb      	ldr	r3, [r7, #24]
 810793a:	68db      	ldr	r3, [r3, #12]
 810793c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8107940:	687b      	ldr	r3, [r7, #4]
 8107942:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8107944:	1ad3      	subs	r3, r2, r3
 8107946:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8107948:	69bb      	ldr	r3, [r7, #24]
 810794a:	68db      	ldr	r3, [r3, #12]
 810794c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8107950:	2b00      	cmp	r3, #0
 8107952:	d005      	beq.n	8107960 <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8107954:	69bb      	ldr	r3, [r7, #24]
 8107956:	68da      	ldr	r2, [r3, #12]
 8107958:	687b      	ldr	r3, [r7, #4]
 810795a:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 810795c:	2301      	movs	r3, #1
 810795e:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8107960:	687b      	ldr	r3, [r7, #4]
 8107962:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8107966:	687b      	ldr	r3, [r7, #4]
 8107968:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 810796c:	69bb      	ldr	r3, [r7, #24]
 810796e:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8107970:	461a      	mov	r2, r3
 8107972:	68bb      	ldr	r3, [r7, #8]
 8107974:	b29b      	uxth	r3, r3
 8107976:	f7fc ffdf 	bl	8104938 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 810797a:	687b      	ldr	r3, [r7, #4]
 810797c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810797e:	1c5a      	adds	r2, r3, #1
 8107980:	687b      	ldr	r3, [r7, #4]
 8107982:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8107984:	687b      	ldr	r3, [r7, #4]
 8107986:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8107988:	68bb      	ldr	r3, [r7, #8]
 810798a:	441a      	add	r2, r3
 810798c:	687b      	ldr	r3, [r7, #4]
 810798e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8107990:	69bb      	ldr	r3, [r7, #24]
 8107992:	2200      	movs	r2, #0
 8107994:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8107996:	69fb      	ldr	r3, [r7, #28]
 8107998:	3301      	adds	r3, #1
 810799a:	61fb      	str	r3, [r7, #28]
 810799c:	69fb      	ldr	r3, [r7, #28]
 810799e:	2b03      	cmp	r3, #3
 81079a0:	d902      	bls.n	81079a8 <HAL_ETH_ReadData+0x110>
 81079a2:	69fb      	ldr	r3, [r7, #28]
 81079a4:	3b04      	subs	r3, #4
 81079a6:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 81079a8:	687b      	ldr	r3, [r7, #4]
 81079aa:	69fa      	ldr	r2, [r7, #28]
 81079ac:	3212      	adds	r2, #18
 81079ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81079b2:	61bb      	str	r3, [r7, #24]
    desccnt++;
 81079b4:	697b      	ldr	r3, [r7, #20]
 81079b6:	3301      	adds	r3, #1
 81079b8:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 81079ba:	69bb      	ldr	r3, [r7, #24]
 81079bc:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 81079be:	2b00      	cmp	r3, #0
 81079c0:	db06      	blt.n	81079d0 <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 81079c2:	697a      	ldr	r2, [r7, #20]
 81079c4:	68fb      	ldr	r3, [r7, #12]
 81079c6:	429a      	cmp	r2, r3
 81079c8:	d202      	bcs.n	81079d0 <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 81079ca:	7cfb      	ldrb	r3, [r7, #19]
 81079cc:	2b00      	cmp	r3, #0
 81079ce:	d08f      	beq.n	81078f0 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 81079d0:	687b      	ldr	r3, [r7, #4]
 81079d2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 81079d4:	697b      	ldr	r3, [r7, #20]
 81079d6:	441a      	add	r2, r3
 81079d8:	687b      	ldr	r3, [r7, #4]
 81079da:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 81079dc:	687b      	ldr	r3, [r7, #4]
 81079de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81079e0:	2b00      	cmp	r3, #0
 81079e2:	d002      	beq.n	81079ea <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 81079e4:	6878      	ldr	r0, [r7, #4]
 81079e6:	f000 f814 	bl	8107a12 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 81079ea:	687b      	ldr	r3, [r7, #4]
 81079ec:	69fa      	ldr	r2, [r7, #28]
 81079ee:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 81079f0:	7cfb      	ldrb	r3, [r7, #19]
 81079f2:	2b01      	cmp	r3, #1
 81079f4:	d108      	bne.n	8107a08 <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 81079f6:	687b      	ldr	r3, [r7, #4]
 81079f8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 81079fa:	683b      	ldr	r3, [r7, #0]
 81079fc:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 81079fe:	687b      	ldr	r3, [r7, #4]
 8107a00:	2200      	movs	r2, #0
 8107a02:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8107a04:	2300      	movs	r3, #0
 8107a06:	e000      	b.n	8107a0a <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8107a08:	2301      	movs	r3, #1
}
 8107a0a:	4618      	mov	r0, r3
 8107a0c:	3720      	adds	r7, #32
 8107a0e:	46bd      	mov	sp, r7
 8107a10:	bd80      	pop	{r7, pc}

08107a12 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8107a12:	b580      	push	{r7, lr}
 8107a14:	b088      	sub	sp, #32
 8107a16:	af00      	add	r7, sp, #0
 8107a18:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8107a1a:	2300      	movs	r3, #0
 8107a1c:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8107a1e:	2301      	movs	r3, #1
 8107a20:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8107a22:	687b      	ldr	r3, [r7, #4]
 8107a24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8107a26:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8107a28:	687b      	ldr	r3, [r7, #4]
 8107a2a:	69fa      	ldr	r2, [r7, #28]
 8107a2c:	3212      	adds	r2, #18
 8107a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8107a32:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8107a34:	687b      	ldr	r3, [r7, #4]
 8107a36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8107a38:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8107a3a:	e038      	b.n	8107aae <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8107a3c:	697b      	ldr	r3, [r7, #20]
 8107a3e:	691b      	ldr	r3, [r3, #16]
 8107a40:	2b00      	cmp	r3, #0
 8107a42:	d112      	bne.n	8107a6a <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8107a44:	f107 0308 	add.w	r3, r7, #8
 8107a48:	4618      	mov	r0, r3
 8107a4a:	f7fc ff45 	bl	81048d8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8107a4e:	68bb      	ldr	r3, [r7, #8]
 8107a50:	2b00      	cmp	r3, #0
 8107a52:	d102      	bne.n	8107a5a <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8107a54:	2300      	movs	r3, #0
 8107a56:	74fb      	strb	r3, [r7, #19]
 8107a58:	e007      	b.n	8107a6a <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8107a5a:	68bb      	ldr	r3, [r7, #8]
 8107a5c:	461a      	mov	r2, r3
 8107a5e:	697b      	ldr	r3, [r7, #20]
 8107a60:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8107a62:	68bb      	ldr	r3, [r7, #8]
 8107a64:	461a      	mov	r2, r3
 8107a66:	697b      	ldr	r3, [r7, #20]
 8107a68:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8107a6a:	7cfb      	ldrb	r3, [r7, #19]
 8107a6c:	2b00      	cmp	r3, #0
 8107a6e:	d01e      	beq.n	8107aae <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 8107a70:	687b      	ldr	r3, [r7, #4]
 8107a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107a74:	2b00      	cmp	r3, #0
 8107a76:	d004      	beq.n	8107a82 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8107a78:	697b      	ldr	r3, [r7, #20]
 8107a7a:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8107a7e:	60da      	str	r2, [r3, #12]
 8107a80:	e003      	b.n	8107a8a <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8107a82:	697b      	ldr	r3, [r7, #20]
 8107a84:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 8107a88:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8107a8a:	69fb      	ldr	r3, [r7, #28]
 8107a8c:	3301      	adds	r3, #1
 8107a8e:	61fb      	str	r3, [r7, #28]
 8107a90:	69fb      	ldr	r3, [r7, #28]
 8107a92:	2b03      	cmp	r3, #3
 8107a94:	d902      	bls.n	8107a9c <ETH_UpdateDescriptor+0x8a>
 8107a96:	69fb      	ldr	r3, [r7, #28]
 8107a98:	3b04      	subs	r3, #4
 8107a9a:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8107a9c:	687b      	ldr	r3, [r7, #4]
 8107a9e:	69fa      	ldr	r2, [r7, #28]
 8107aa0:	3212      	adds	r2, #18
 8107aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8107aa6:	617b      	str	r3, [r7, #20]
      desccount--;
 8107aa8:	69bb      	ldr	r3, [r7, #24]
 8107aaa:	3b01      	subs	r3, #1
 8107aac:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8107aae:	69bb      	ldr	r3, [r7, #24]
 8107ab0:	2b00      	cmp	r3, #0
 8107ab2:	d002      	beq.n	8107aba <ETH_UpdateDescriptor+0xa8>
 8107ab4:	7cfb      	ldrb	r3, [r7, #19]
 8107ab6:	2b00      	cmp	r3, #0
 8107ab8:	d1c0      	bne.n	8107a3c <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8107aba:	687b      	ldr	r3, [r7, #4]
 8107abc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8107abe:	69ba      	ldr	r2, [r7, #24]
 8107ac0:	429a      	cmp	r2, r3
 8107ac2:	d01b      	beq.n	8107afc <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8107ac4:	69fb      	ldr	r3, [r7, #28]
 8107ac6:	3301      	adds	r3, #1
 8107ac8:	f003 0303 	and.w	r3, r3, #3
 8107acc:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8107ace:	f3bf 8f5f 	dmb	sy
}
 8107ad2:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8107ad4:	687b      	ldr	r3, [r7, #4]
 8107ad6:	6919      	ldr	r1, [r3, #16]
 8107ad8:	68fa      	ldr	r2, [r7, #12]
 8107ada:	4613      	mov	r3, r2
 8107adc:	005b      	lsls	r3, r3, #1
 8107ade:	4413      	add	r3, r2
 8107ae0:	00db      	lsls	r3, r3, #3
 8107ae2:	18ca      	adds	r2, r1, r3
 8107ae4:	687b      	ldr	r3, [r7, #4]
 8107ae6:	681b      	ldr	r3, [r3, #0]
 8107ae8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8107aec:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8107af0:	687b      	ldr	r3, [r7, #4]
 8107af2:	69fa      	ldr	r2, [r7, #28]
 8107af4:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8107af6:	687b      	ldr	r3, [r7, #4]
 8107af8:	69ba      	ldr	r2, [r7, #24]
 8107afa:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8107afc:	bf00      	nop
 8107afe:	3720      	adds	r7, #32
 8107b00:	46bd      	mov	sp, r7
 8107b02:	bd80      	pop	{r7, pc}

08107b04 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8107b04:	b580      	push	{r7, lr}
 8107b06:	b086      	sub	sp, #24
 8107b08:	af00      	add	r7, sp, #0
 8107b0a:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8107b0c:	687b      	ldr	r3, [r7, #4]
 8107b0e:	3318      	adds	r3, #24
 8107b10:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8107b12:	68bb      	ldr	r3, [r7, #8]
 8107b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107b16:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8107b18:	68bb      	ldr	r3, [r7, #8]
 8107b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107b1c:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8107b1e:	2301      	movs	r3, #1
 8107b20:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8107b22:	e047      	b.n	8107bb4 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8107b24:	2301      	movs	r3, #1
 8107b26:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8107b28:	697b      	ldr	r3, [r7, #20]
 8107b2a:	3b01      	subs	r3, #1
 8107b2c:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8107b2e:	68ba      	ldr	r2, [r7, #8]
 8107b30:	693b      	ldr	r3, [r7, #16]
 8107b32:	3304      	adds	r3, #4
 8107b34:	009b      	lsls	r3, r3, #2
 8107b36:	4413      	add	r3, r2
 8107b38:	685b      	ldr	r3, [r3, #4]
 8107b3a:	2b00      	cmp	r3, #0
 8107b3c:	d10a      	bne.n	8107b54 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8107b3e:	693b      	ldr	r3, [r7, #16]
 8107b40:	3301      	adds	r3, #1
 8107b42:	613b      	str	r3, [r7, #16]
 8107b44:	693b      	ldr	r3, [r7, #16]
 8107b46:	2b03      	cmp	r3, #3
 8107b48:	d902      	bls.n	8107b50 <HAL_ETH_ReleaseTxPacket+0x4c>
 8107b4a:	693b      	ldr	r3, [r7, #16]
 8107b4c:	3b04      	subs	r3, #4
 8107b4e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8107b50:	2300      	movs	r3, #0
 8107b52:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8107b54:	7bbb      	ldrb	r3, [r7, #14]
 8107b56:	2b00      	cmp	r3, #0
 8107b58:	d02c      	beq.n	8107bb4 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8107b5a:	687b      	ldr	r3, [r7, #4]
 8107b5c:	68d9      	ldr	r1, [r3, #12]
 8107b5e:	693a      	ldr	r2, [r7, #16]
 8107b60:	4613      	mov	r3, r2
 8107b62:	005b      	lsls	r3, r3, #1
 8107b64:	4413      	add	r3, r2
 8107b66:	00db      	lsls	r3, r3, #3
 8107b68:	440b      	add	r3, r1
 8107b6a:	68db      	ldr	r3, [r3, #12]
 8107b6c:	2b00      	cmp	r3, #0
 8107b6e:	db1f      	blt.n	8107bb0 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8107b70:	68ba      	ldr	r2, [r7, #8]
 8107b72:	693b      	ldr	r3, [r7, #16]
 8107b74:	3304      	adds	r3, #4
 8107b76:	009b      	lsls	r3, r3, #2
 8107b78:	4413      	add	r3, r2
 8107b7a:	685b      	ldr	r3, [r3, #4]
 8107b7c:	4618      	mov	r0, r3
 8107b7e:	f7fc ff1b 	bl	81049b8 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8107b82:	68ba      	ldr	r2, [r7, #8]
 8107b84:	693b      	ldr	r3, [r7, #16]
 8107b86:	3304      	adds	r3, #4
 8107b88:	009b      	lsls	r3, r3, #2
 8107b8a:	4413      	add	r3, r2
 8107b8c:	2200      	movs	r2, #0
 8107b8e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8107b90:	693b      	ldr	r3, [r7, #16]
 8107b92:	3301      	adds	r3, #1
 8107b94:	613b      	str	r3, [r7, #16]
 8107b96:	693b      	ldr	r3, [r7, #16]
 8107b98:	2b03      	cmp	r3, #3
 8107b9a:	d902      	bls.n	8107ba2 <HAL_ETH_ReleaseTxPacket+0x9e>
 8107b9c:	693b      	ldr	r3, [r7, #16]
 8107b9e:	3b04      	subs	r3, #4
 8107ba0:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8107ba2:	68bb      	ldr	r3, [r7, #8]
 8107ba4:	697a      	ldr	r2, [r7, #20]
 8107ba6:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8107ba8:	68bb      	ldr	r3, [r7, #8]
 8107baa:	693a      	ldr	r2, [r7, #16]
 8107bac:	62da      	str	r2, [r3, #44]	@ 0x2c
 8107bae:	e001      	b.n	8107bb4 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8107bb0:	2300      	movs	r3, #0
 8107bb2:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8107bb4:	697b      	ldr	r3, [r7, #20]
 8107bb6:	2b00      	cmp	r3, #0
 8107bb8:	d002      	beq.n	8107bc0 <HAL_ETH_ReleaseTxPacket+0xbc>
 8107bba:	7bfb      	ldrb	r3, [r7, #15]
 8107bbc:	2b00      	cmp	r3, #0
 8107bbe:	d1b1      	bne.n	8107b24 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8107bc0:	2300      	movs	r3, #0
}
 8107bc2:	4618      	mov	r0, r3
 8107bc4:	3718      	adds	r7, #24
 8107bc6:	46bd      	mov	sp, r7
 8107bc8:	bd80      	pop	{r7, pc}
	...

08107bcc <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8107bcc:	b580      	push	{r7, lr}
 8107bce:	b088      	sub	sp, #32
 8107bd0:	af00      	add	r7, sp, #0
 8107bd2:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 8107bd4:	687b      	ldr	r3, [r7, #4]
 8107bd6:	681b      	ldr	r3, [r3, #0]
 8107bd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8107bdc:	61fb      	str	r3, [r7, #28]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 8107bde:	687b      	ldr	r3, [r7, #4]
 8107be0:	681b      	ldr	r3, [r3, #0]
 8107be2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8107be6:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8107bea:	61bb      	str	r3, [r7, #24]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 8107bec:	687b      	ldr	r3, [r7, #4]
 8107bee:	681b      	ldr	r3, [r3, #0]
 8107bf0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8107bf4:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8107bf8:	617b      	str	r3, [r7, #20]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 8107bfa:	4b77      	ldr	r3, [pc, #476]	@ (8107dd8 <HAL_ETH_IRQHandler+0x20c>)
 8107bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107bfe:	613b      	str	r3, [r7, #16]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
 8107c00:	4b76      	ldr	r3, [pc, #472]	@ (8107ddc <HAL_ETH_IRQHandler+0x210>)
 8107c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107c04:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 8107c06:	69bb      	ldr	r3, [r7, #24]
 8107c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8107c0c:	2b00      	cmp	r3, #0
 8107c0e:	d010      	beq.n	8107c32 <HAL_ETH_IRQHandler+0x66>
 8107c10:	697b      	ldr	r3, [r7, #20]
 8107c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8107c16:	2b00      	cmp	r3, #0
 8107c18:	d00b      	beq.n	8107c32 <HAL_ETH_IRQHandler+0x66>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8107c1a:	687b      	ldr	r3, [r7, #4]
 8107c1c:	681b      	ldr	r3, [r3, #0]
 8107c1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8107c22:	461a      	mov	r2, r3
 8107c24:	f248 0340 	movw	r3, #32832	@ 0x8040
 8107c28:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8107c2c:	6878      	ldr	r0, [r7, #4]
 8107c2e:	f7fc f9fb 	bl	8104028 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 8107c32:	69bb      	ldr	r3, [r7, #24]
 8107c34:	f003 0301 	and.w	r3, r3, #1
 8107c38:	2b00      	cmp	r3, #0
 8107c3a:	d010      	beq.n	8107c5e <HAL_ETH_IRQHandler+0x92>
 8107c3c:	697b      	ldr	r3, [r7, #20]
 8107c3e:	f003 0301 	and.w	r3, r3, #1
 8107c42:	2b00      	cmp	r3, #0
 8107c44:	d00b      	beq.n	8107c5e <HAL_ETH_IRQHandler+0x92>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8107c46:	687b      	ldr	r3, [r7, #4]
 8107c48:	681b      	ldr	r3, [r3, #0]
 8107c4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8107c4e:	461a      	mov	r2, r3
 8107c50:	f248 0301 	movw	r3, #32769	@ 0x8001
 8107c54:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8107c58:	6878      	ldr	r0, [r7, #4]
 8107c5a:	f7fc f9f5 	bl	8104048 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 8107c5e:	69bb      	ldr	r3, [r7, #24]
 8107c60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8107c64:	2b00      	cmp	r3, #0
 8107c66:	d047      	beq.n	8107cf8 <HAL_ETH_IRQHandler+0x12c>
 8107c68:	697b      	ldr	r3, [r7, #20]
 8107c6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8107c6e:	2b00      	cmp	r3, #0
 8107c70:	d042      	beq.n	8107cf8 <HAL_ETH_IRQHandler+0x12c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8107c72:	687b      	ldr	r3, [r7, #4]
 8107c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8107c78:	f043 0208 	orr.w	r2, r3, #8
 8107c7c:	687b      	ldr	r3, [r7, #4]
 8107c7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 8107c82:	69bb      	ldr	r3, [r7, #24]
 8107c84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8107c88:	2b00      	cmp	r3, #0
 8107c8a:	d01e      	beq.n	8107cca <HAL_ETH_IRQHandler+0xfe>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8107c8c:	687b      	ldr	r3, [r7, #4]
 8107c8e:	681b      	ldr	r3, [r3, #0]
 8107c90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8107c94:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8107c98:	f241 1302 	movw	r3, #4354	@ 0x1102
 8107c9c:	4013      	ands	r3, r2
 8107c9e:	687a      	ldr	r2, [r7, #4]
 8107ca0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8107ca4:	687b      	ldr	r3, [r7, #4]
 8107ca6:	681b      	ldr	r3, [r3, #0]
 8107ca8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8107cac:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8107cb0:	687a      	ldr	r2, [r7, #4]
 8107cb2:	6812      	ldr	r2, [r2, #0]
 8107cb4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8107cb8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8107cbc:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8107cc0:	687b      	ldr	r3, [r7, #4]
 8107cc2:	22e0      	movs	r2, #224	@ 0xe0
 8107cc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8107cc8:	e013      	b.n	8107cf2 <HAL_ETH_IRQHandler+0x126>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8107cca:	687b      	ldr	r3, [r7, #4]
 8107ccc:	681b      	ldr	r3, [r3, #0]
 8107cce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8107cd2:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8107cd6:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 8107cda:	687b      	ldr	r3, [r7, #4]
 8107cdc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8107ce0:	687b      	ldr	r3, [r7, #4]
 8107ce2:	681b      	ldr	r3, [r3, #0]
 8107ce4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8107ce8:	461a      	mov	r2, r3
 8107cea:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8107cee:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8107cf2:	6878      	ldr	r0, [r7, #4]
 8107cf4:	f7fc f9b8 	bl	8104068 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8107cf8:	69fb      	ldr	r3, [r7, #28]
 8107cfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8107cfe:	2b00      	cmp	r3, #0
 8107d00:	d104      	bne.n	8107d0c <HAL_ETH_IRQHandler+0x140>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8107d02:	69fb      	ldr	r3, [r7, #28]
 8107d04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8107d08:	2b00      	cmp	r3, #0
 8107d0a:	d019      	beq.n	8107d40 <HAL_ETH_IRQHandler+0x174>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8107d0c:	687b      	ldr	r3, [r7, #4]
 8107d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8107d12:	f043 0210 	orr.w	r2, r3, #16
 8107d16:	687b      	ldr	r3, [r7, #4]
 8107d18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8107d1c:	687b      	ldr	r3, [r7, #4]
 8107d1e:	681b      	ldr	r3, [r3, #0]
 8107d20:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8107d24:	687b      	ldr	r3, [r7, #4]
 8107d26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8107d2a:	687b      	ldr	r3, [r7, #4]
 8107d2c:	22e0      	movs	r2, #224	@ 0xe0
 8107d2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8107d32:	6878      	ldr	r0, [r7, #4]
 8107d34:	f7fc f998 	bl	8104068 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 8107d38:	687b      	ldr	r3, [r7, #4]
 8107d3a:	2200      	movs	r2, #0
 8107d3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8107d40:	69fb      	ldr	r3, [r7, #28]
 8107d42:	f003 0310 	and.w	r3, r3, #16
 8107d46:	2b00      	cmp	r3, #0
 8107d48:	d00f      	beq.n	8107d6a <HAL_ETH_IRQHandler+0x19e>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8107d4a:	687b      	ldr	r3, [r7, #4]
 8107d4c:	681b      	ldr	r3, [r3, #0]
 8107d4e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8107d52:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8107d56:	687b      	ldr	r3, [r7, #4]
 8107d58:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8107d5c:	6878      	ldr	r0, [r7, #4]
 8107d5e:	f000 f83f 	bl	8107de0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8107d62:	687b      	ldr	r3, [r7, #4]
 8107d64:	2200      	movs	r2, #0
 8107d66:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 8107d6a:	69fb      	ldr	r3, [r7, #28]
 8107d6c:	f003 0320 	and.w	r3, r3, #32
 8107d70:	2b00      	cmp	r3, #0
 8107d72:	d00f      	beq.n	8107d94 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 8107d74:	687b      	ldr	r3, [r7, #4]
 8107d76:	681b      	ldr	r3, [r3, #0]
 8107d78:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8107d7c:	f003 020f 	and.w	r2, r3, #15
 8107d80:	687b      	ldr	r3, [r7, #4]
 8107d82:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8107d86:	6878      	ldr	r0, [r7, #4]
 8107d88:	f000 f834 	bl	8107df4 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8107d8c:	687b      	ldr	r3, [r7, #4]
 8107d8e:	2200      	movs	r2, #0
 8107d90:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8107d94:	f7ff fb30 	bl	81073f8 <HAL_GetCurrentCPUID>
 8107d98:	4603      	mov	r3, r0
 8107d9a:	2b03      	cmp	r3, #3
 8107d9c:	d10c      	bne.n	8107db8 <HAL_ETH_IRQHandler+0x1ec>
  {
    /* check ETH WAKEUP exti flag */
    if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8107d9e:	693b      	ldr	r3, [r7, #16]
 8107da0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8107da4:	2b00      	cmp	r3, #0
 8107da6:	d013      	beq.n	8107dd0 <HAL_ETH_IRQHandler+0x204>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8107da8:	4b0b      	ldr	r3, [pc, #44]	@ (8107dd8 <HAL_ETH_IRQHandler+0x20c>)
 8107daa:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8107dae:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8107db0:	6878      	ldr	r0, [r7, #4]
 8107db2:	f000 f829 	bl	8107e08 <HAL_ETH_WakeUpCallback>
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 8107db6:	e00b      	b.n	8107dd0 <HAL_ETH_IRQHandler+0x204>
    if ((exti_d2_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8107db8:	68fb      	ldr	r3, [r7, #12]
 8107dba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8107dbe:	2b00      	cmp	r3, #0
 8107dc0:	d006      	beq.n	8107dd0 <HAL_ETH_IRQHandler+0x204>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8107dc2:	4b06      	ldr	r3, [pc, #24]	@ (8107ddc <HAL_ETH_IRQHandler+0x210>)
 8107dc4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8107dc8:	629a      	str	r2, [r3, #40]	@ 0x28
      HAL_ETH_WakeUpCallback(heth);
 8107dca:	6878      	ldr	r0, [r7, #4]
 8107dcc:	f000 f81c 	bl	8107e08 <HAL_ETH_WakeUpCallback>
}
 8107dd0:	bf00      	nop
 8107dd2:	3720      	adds	r7, #32
 8107dd4:	46bd      	mov	sp, r7
 8107dd6:	bd80      	pop	{r7, pc}
 8107dd8:	58000080 	.word	0x58000080
 8107ddc:	580000c0 	.word	0x580000c0

08107de0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8107de0:	b480      	push	{r7}
 8107de2:	b083      	sub	sp, #12
 8107de4:	af00      	add	r7, sp, #0
 8107de6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8107de8:	bf00      	nop
 8107dea:	370c      	adds	r7, #12
 8107dec:	46bd      	mov	sp, r7
 8107dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107df2:	4770      	bx	lr

08107df4 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8107df4:	b480      	push	{r7}
 8107df6:	b083      	sub	sp, #12
 8107df8:	af00      	add	r7, sp, #0
 8107dfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8107dfc:	bf00      	nop
 8107dfe:	370c      	adds	r7, #12
 8107e00:	46bd      	mov	sp, r7
 8107e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e06:	4770      	bx	lr

08107e08 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8107e08:	b480      	push	{r7}
 8107e0a:	b083      	sub	sp, #12
 8107e0c:	af00      	add	r7, sp, #0
 8107e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8107e10:	bf00      	nop
 8107e12:	370c      	adds	r7, #12
 8107e14:	46bd      	mov	sp, r7
 8107e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e1a:	4770      	bx	lr

08107e1c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8107e1c:	b580      	push	{r7, lr}
 8107e1e:	b086      	sub	sp, #24
 8107e20:	af00      	add	r7, sp, #0
 8107e22:	60f8      	str	r0, [r7, #12]
 8107e24:	60b9      	str	r1, [r7, #8]
 8107e26:	607a      	str	r2, [r7, #4]
 8107e28:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8107e2a:	68fb      	ldr	r3, [r7, #12]
 8107e2c:	681b      	ldr	r3, [r3, #0]
 8107e2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8107e32:	f003 0301 	and.w	r3, r3, #1
 8107e36:	2b00      	cmp	r3, #0
 8107e38:	d001      	beq.n	8107e3e <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8107e3a:	2301      	movs	r3, #1
 8107e3c:	e03e      	b.n	8107ebc <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8107e3e:	68fb      	ldr	r3, [r7, #12]
 8107e40:	681b      	ldr	r3, [r3, #0]
 8107e42:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8107e46:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8107e48:	697b      	ldr	r3, [r7, #20]
 8107e4a:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8107e4e:	68bb      	ldr	r3, [r7, #8]
 8107e50:	055b      	lsls	r3, r3, #21
 8107e52:	4313      	orrs	r3, r2
 8107e54:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8107e56:	697b      	ldr	r3, [r7, #20]
 8107e58:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8107e5c:	687b      	ldr	r3, [r7, #4]
 8107e5e:	041b      	lsls	r3, r3, #16
 8107e60:	4313      	orrs	r3, r2
 8107e62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8107e64:	697b      	ldr	r3, [r7, #20]
 8107e66:	f043 030c 	orr.w	r3, r3, #12
 8107e6a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8107e6c:	697b      	ldr	r3, [r7, #20]
 8107e6e:	f043 0301 	orr.w	r3, r3, #1
 8107e72:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8107e74:	68fb      	ldr	r3, [r7, #12]
 8107e76:	681b      	ldr	r3, [r3, #0]
 8107e78:	697a      	ldr	r2, [r7, #20]
 8107e7a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8107e7e:	f7ff f9bb 	bl	81071f8 <HAL_GetTick>
 8107e82:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8107e84:	e009      	b.n	8107e9a <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8107e86:	f7ff f9b7 	bl	81071f8 <HAL_GetTick>
 8107e8a:	4602      	mov	r2, r0
 8107e8c:	693b      	ldr	r3, [r7, #16]
 8107e8e:	1ad3      	subs	r3, r2, r3
 8107e90:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8107e94:	d901      	bls.n	8107e9a <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8107e96:	2301      	movs	r3, #1
 8107e98:	e010      	b.n	8107ebc <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8107e9a:	68fb      	ldr	r3, [r7, #12]
 8107e9c:	681b      	ldr	r3, [r3, #0]
 8107e9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8107ea2:	f003 0301 	and.w	r3, r3, #1
 8107ea6:	2b00      	cmp	r3, #0
 8107ea8:	d1ed      	bne.n	8107e86 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8107eaa:	68fb      	ldr	r3, [r7, #12]
 8107eac:	681b      	ldr	r3, [r3, #0]
 8107eae:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8107eb2:	b29b      	uxth	r3, r3
 8107eb4:	461a      	mov	r2, r3
 8107eb6:	683b      	ldr	r3, [r7, #0]
 8107eb8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8107eba:	2300      	movs	r3, #0
}
 8107ebc:	4618      	mov	r0, r3
 8107ebe:	3718      	adds	r7, #24
 8107ec0:	46bd      	mov	sp, r7
 8107ec2:	bd80      	pop	{r7, pc}

08107ec4 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8107ec4:	b580      	push	{r7, lr}
 8107ec6:	b086      	sub	sp, #24
 8107ec8:	af00      	add	r7, sp, #0
 8107eca:	60f8      	str	r0, [r7, #12]
 8107ecc:	60b9      	str	r1, [r7, #8]
 8107ece:	607a      	str	r2, [r7, #4]
 8107ed0:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8107ed2:	68fb      	ldr	r3, [r7, #12]
 8107ed4:	681b      	ldr	r3, [r3, #0]
 8107ed6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8107eda:	f003 0301 	and.w	r3, r3, #1
 8107ede:	2b00      	cmp	r3, #0
 8107ee0:	d001      	beq.n	8107ee6 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8107ee2:	2301      	movs	r3, #1
 8107ee4:	e03c      	b.n	8107f60 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8107ee6:	68fb      	ldr	r3, [r7, #12]
 8107ee8:	681b      	ldr	r3, [r3, #0]
 8107eea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8107eee:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8107ef0:	697b      	ldr	r3, [r7, #20]
 8107ef2:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8107ef6:	68bb      	ldr	r3, [r7, #8]
 8107ef8:	055b      	lsls	r3, r3, #21
 8107efa:	4313      	orrs	r3, r2
 8107efc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8107efe:	697b      	ldr	r3, [r7, #20]
 8107f00:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8107f04:	687b      	ldr	r3, [r7, #4]
 8107f06:	041b      	lsls	r3, r3, #16
 8107f08:	4313      	orrs	r3, r2
 8107f0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8107f0c:	697b      	ldr	r3, [r7, #20]
 8107f0e:	f023 030c 	bic.w	r3, r3, #12
 8107f12:	f043 0304 	orr.w	r3, r3, #4
 8107f16:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8107f18:	697b      	ldr	r3, [r7, #20]
 8107f1a:	f043 0301 	orr.w	r3, r3, #1
 8107f1e:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8107f20:	683b      	ldr	r3, [r7, #0]
 8107f22:	b29a      	uxth	r2, r3
 8107f24:	4b10      	ldr	r3, [pc, #64]	@ (8107f68 <HAL_ETH_WritePHYRegister+0xa4>)
 8107f26:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8107f2a:	4a0f      	ldr	r2, [pc, #60]	@ (8107f68 <HAL_ETH_WritePHYRegister+0xa4>)
 8107f2c:	697b      	ldr	r3, [r7, #20]
 8107f2e:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8107f32:	f7ff f961 	bl	81071f8 <HAL_GetTick>
 8107f36:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8107f38:	e009      	b.n	8107f4e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8107f3a:	f7ff f95d 	bl	81071f8 <HAL_GetTick>
 8107f3e:	4602      	mov	r2, r0
 8107f40:	693b      	ldr	r3, [r7, #16]
 8107f42:	1ad3      	subs	r3, r2, r3
 8107f44:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8107f48:	d901      	bls.n	8107f4e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8107f4a:	2301      	movs	r3, #1
 8107f4c:	e008      	b.n	8107f60 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8107f4e:	68fb      	ldr	r3, [r7, #12]
 8107f50:	681b      	ldr	r3, [r3, #0]
 8107f52:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8107f56:	f003 0301 	and.w	r3, r3, #1
 8107f5a:	2b00      	cmp	r3, #0
 8107f5c:	d1ed      	bne.n	8107f3a <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8107f5e:	2300      	movs	r3, #0
}
 8107f60:	4618      	mov	r0, r3
 8107f62:	3718      	adds	r7, #24
 8107f64:	46bd      	mov	sp, r7
 8107f66:	bd80      	pop	{r7, pc}
 8107f68:	40028000 	.word	0x40028000

08107f6c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8107f6c:	b480      	push	{r7}
 8107f6e:	b083      	sub	sp, #12
 8107f70:	af00      	add	r7, sp, #0
 8107f72:	6078      	str	r0, [r7, #4]
 8107f74:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8107f76:	683b      	ldr	r3, [r7, #0]
 8107f78:	2b00      	cmp	r3, #0
 8107f7a:	d101      	bne.n	8107f80 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8107f7c:	2301      	movs	r3, #1
 8107f7e:	e1c3      	b.n	8108308 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8107f80:	687b      	ldr	r3, [r7, #4]
 8107f82:	681b      	ldr	r3, [r3, #0]
 8107f84:	681b      	ldr	r3, [r3, #0]
 8107f86:	f003 020c 	and.w	r2, r3, #12
 8107f8a:	683b      	ldr	r3, [r7, #0]
 8107f8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8107f8e:	687b      	ldr	r3, [r7, #4]
 8107f90:	681b      	ldr	r3, [r3, #0]
 8107f92:	681b      	ldr	r3, [r3, #0]
 8107f94:	f003 0310 	and.w	r3, r3, #16
 8107f98:	2b00      	cmp	r3, #0
 8107f9a:	bf14      	ite	ne
 8107f9c:	2301      	movne	r3, #1
 8107f9e:	2300      	moveq	r3, #0
 8107fa0:	b2db      	uxtb	r3, r3
 8107fa2:	461a      	mov	r2, r3
 8107fa4:	683b      	ldr	r3, [r7, #0]
 8107fa6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8107faa:	687b      	ldr	r3, [r7, #4]
 8107fac:	681b      	ldr	r3, [r3, #0]
 8107fae:	681b      	ldr	r3, [r3, #0]
 8107fb0:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8107fb4:	683b      	ldr	r3, [r7, #0]
 8107fb6:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8107fb8:	687b      	ldr	r3, [r7, #4]
 8107fba:	681b      	ldr	r3, [r3, #0]
 8107fbc:	681b      	ldr	r3, [r3, #0]
 8107fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107fc2:	2b00      	cmp	r3, #0
 8107fc4:	bf0c      	ite	eq
 8107fc6:	2301      	moveq	r3, #1
 8107fc8:	2300      	movne	r3, #0
 8107fca:	b2db      	uxtb	r3, r3
 8107fcc:	461a      	mov	r2, r3
 8107fce:	683b      	ldr	r3, [r7, #0]
 8107fd0:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8107fd4:	687b      	ldr	r3, [r7, #4]
 8107fd6:	681b      	ldr	r3, [r3, #0]
 8107fd8:	681b      	ldr	r3, [r3, #0]
 8107fda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 8107fde:	2b00      	cmp	r3, #0
 8107fe0:	bf14      	ite	ne
 8107fe2:	2301      	movne	r3, #1
 8107fe4:	2300      	moveq	r3, #0
 8107fe6:	b2db      	uxtb	r3, r3
 8107fe8:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8107fea:	683b      	ldr	r3, [r7, #0]
 8107fec:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8107fee:	687b      	ldr	r3, [r7, #4]
 8107ff0:	681b      	ldr	r3, [r3, #0]
 8107ff2:	681b      	ldr	r3, [r3, #0]
 8107ff4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8107ff8:	2b00      	cmp	r3, #0
 8107ffa:	bf0c      	ite	eq
 8107ffc:	2301      	moveq	r3, #1
 8107ffe:	2300      	movne	r3, #0
 8108000:	b2db      	uxtb	r3, r3
 8108002:	461a      	mov	r2, r3
 8108004:	683b      	ldr	r3, [r7, #0]
 8108006:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8108008:	687b      	ldr	r3, [r7, #4]
 810800a:	681b      	ldr	r3, [r3, #0]
 810800c:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 810800e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8108012:	2b00      	cmp	r3, #0
 8108014:	bf14      	ite	ne
 8108016:	2301      	movne	r3, #1
 8108018:	2300      	moveq	r3, #0
 810801a:	b2db      	uxtb	r3, r3
 810801c:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 810801e:	683b      	ldr	r3, [r7, #0]
 8108020:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8108022:	687b      	ldr	r3, [r7, #4]
 8108024:	681b      	ldr	r3, [r3, #0]
 8108026:	681b      	ldr	r3, [r3, #0]
 8108028:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 810802c:	2b00      	cmp	r3, #0
 810802e:	bf14      	ite	ne
 8108030:	2301      	movne	r3, #1
 8108032:	2300      	moveq	r3, #0
 8108034:	b2db      	uxtb	r3, r3
 8108036:	461a      	mov	r2, r3
 8108038:	683b      	ldr	r3, [r7, #0]
 810803a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 810803c:	687b      	ldr	r3, [r7, #4]
 810803e:	681b      	ldr	r3, [r3, #0]
 8108040:	681b      	ldr	r3, [r3, #0]
 8108042:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8108046:	683b      	ldr	r3, [r7, #0]
 8108048:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 810804a:	687b      	ldr	r3, [r7, #4]
 810804c:	681b      	ldr	r3, [r3, #0]
 810804e:	681b      	ldr	r3, [r3, #0]
 8108050:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8108054:	683b      	ldr	r3, [r7, #0]
 8108056:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8108058:	687b      	ldr	r3, [r7, #4]
 810805a:	681b      	ldr	r3, [r3, #0]
 810805c:	681b      	ldr	r3, [r3, #0]
 810805e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8108062:	2b00      	cmp	r3, #0
 8108064:	bf14      	ite	ne
 8108066:	2301      	movne	r3, #1
 8108068:	2300      	moveq	r3, #0
 810806a:	b2db      	uxtb	r3, r3
 810806c:	461a      	mov	r2, r3
 810806e:	683b      	ldr	r3, [r7, #0]
 8108070:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8108072:	687b      	ldr	r3, [r7, #4]
 8108074:	681b      	ldr	r3, [r3, #0]
 8108076:	681b      	ldr	r3, [r3, #0]
 8108078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810807c:	2b00      	cmp	r3, #0
 810807e:	bf0c      	ite	eq
 8108080:	2301      	moveq	r3, #1
 8108082:	2300      	movne	r3, #0
 8108084:	b2db      	uxtb	r3, r3
 8108086:	461a      	mov	r2, r3
 8108088:	683b      	ldr	r3, [r7, #0]
 810808a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 810808c:	687b      	ldr	r3, [r7, #4]
 810808e:	681b      	ldr	r3, [r3, #0]
 8108090:	681b      	ldr	r3, [r3, #0]
 8108092:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8108096:	2b00      	cmp	r3, #0
 8108098:	bf0c      	ite	eq
 810809a:	2301      	moveq	r3, #1
 810809c:	2300      	movne	r3, #0
 810809e:	b2db      	uxtb	r3, r3
 81080a0:	461a      	mov	r2, r3
 81080a2:	683b      	ldr	r3, [r7, #0]
 81080a4:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 81080a6:	687b      	ldr	r3, [r7, #4]
 81080a8:	681b      	ldr	r3, [r3, #0]
 81080aa:	681b      	ldr	r3, [r3, #0]
 81080ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 81080b0:	2b00      	cmp	r3, #0
 81080b2:	bf14      	ite	ne
 81080b4:	2301      	movne	r3, #1
 81080b6:	2300      	moveq	r3, #0
 81080b8:	b2db      	uxtb	r3, r3
 81080ba:	461a      	mov	r2, r3
 81080bc:	683b      	ldr	r3, [r7, #0]
 81080be:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 81080c0:	687b      	ldr	r3, [r7, #4]
 81080c2:	681b      	ldr	r3, [r3, #0]
 81080c4:	681b      	ldr	r3, [r3, #0]
 81080c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81080ca:	2b00      	cmp	r3, #0
 81080cc:	bf14      	ite	ne
 81080ce:	2301      	movne	r3, #1
 81080d0:	2300      	moveq	r3, #0
 81080d2:	b2db      	uxtb	r3, r3
 81080d4:	461a      	mov	r2, r3
 81080d6:	683b      	ldr	r3, [r7, #0]
 81080d8:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 81080da:	687b      	ldr	r3, [r7, #4]
 81080dc:	681b      	ldr	r3, [r3, #0]
 81080de:	681b      	ldr	r3, [r3, #0]
 81080e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 81080e4:	2b00      	cmp	r3, #0
 81080e6:	bf14      	ite	ne
 81080e8:	2301      	movne	r3, #1
 81080ea:	2300      	moveq	r3, #0
 81080ec:	b2db      	uxtb	r3, r3
 81080ee:	461a      	mov	r2, r3
 81080f0:	683b      	ldr	r3, [r7, #0]
 81080f2:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 81080f4:	687b      	ldr	r3, [r7, #4]
 81080f6:	681b      	ldr	r3, [r3, #0]
 81080f8:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 81080fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 81080fe:	2b00      	cmp	r3, #0
 8108100:	bf14      	ite	ne
 8108102:	2301      	movne	r3, #1
 8108104:	2300      	moveq	r3, #0
 8108106:	b2db      	uxtb	r3, r3
 8108108:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 810810a:	683b      	ldr	r3, [r7, #0]
 810810c:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 810810e:	687b      	ldr	r3, [r7, #4]
 8108110:	681b      	ldr	r3, [r3, #0]
 8108112:	681b      	ldr	r3, [r3, #0]
 8108114:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8108118:	683b      	ldr	r3, [r7, #0]
 810811a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 810811c:	687b      	ldr	r3, [r7, #4]
 810811e:	681b      	ldr	r3, [r3, #0]
 8108120:	681b      	ldr	r3, [r3, #0]
 8108122:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8108126:	2b00      	cmp	r3, #0
 8108128:	bf14      	ite	ne
 810812a:	2301      	movne	r3, #1
 810812c:	2300      	moveq	r3, #0
 810812e:	b2db      	uxtb	r3, r3
 8108130:	461a      	mov	r2, r3
 8108132:	683b      	ldr	r3, [r7, #0]
 8108134:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8108136:	687b      	ldr	r3, [r7, #4]
 8108138:	681b      	ldr	r3, [r3, #0]
 810813a:	681b      	ldr	r3, [r3, #0]
 810813c:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8108140:	683b      	ldr	r3, [r7, #0]
 8108142:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8108144:	687b      	ldr	r3, [r7, #4]
 8108146:	681b      	ldr	r3, [r3, #0]
 8108148:	685b      	ldr	r3, [r3, #4]
 810814a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 810814e:	683b      	ldr	r3, [r7, #0]
 8108150:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8108152:	687b      	ldr	r3, [r7, #4]
 8108154:	681b      	ldr	r3, [r3, #0]
 8108156:	685b      	ldr	r3, [r3, #4]
 8108158:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810815c:	2b00      	cmp	r3, #0
 810815e:	bf0c      	ite	eq
 8108160:	2301      	moveq	r3, #1
 8108162:	2300      	movne	r3, #0
 8108164:	b2db      	uxtb	r3, r3
 8108166:	461a      	mov	r2, r3
 8108168:	683b      	ldr	r3, [r7, #0]
 810816a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 810816e:	687b      	ldr	r3, [r7, #4]
 8108170:	681b      	ldr	r3, [r3, #0]
 8108172:	685b      	ldr	r3, [r3, #4]
 8108174:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8108178:	2b00      	cmp	r3, #0
 810817a:	bf14      	ite	ne
 810817c:	2301      	movne	r3, #1
 810817e:	2300      	moveq	r3, #0
 8108180:	b2db      	uxtb	r3, r3
 8108182:	461a      	mov	r2, r3
 8108184:	683b      	ldr	r3, [r7, #0]
 8108186:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 810818a:	687b      	ldr	r3, [r7, #4]
 810818c:	681b      	ldr	r3, [r3, #0]
 810818e:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8108190:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8108194:	2b00      	cmp	r3, #0
 8108196:	bf14      	ite	ne
 8108198:	2301      	movne	r3, #1
 810819a:	2300      	moveq	r3, #0
 810819c:	b2db      	uxtb	r3, r3
 810819e:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 81081a0:	683b      	ldr	r3, [r7, #0]
 81081a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 81081a6:	687b      	ldr	r3, [r7, #4]
 81081a8:	681b      	ldr	r3, [r3, #0]
 81081aa:	685b      	ldr	r3, [r3, #4]
 81081ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 81081b0:	2b00      	cmp	r3, #0
 81081b2:	bf14      	ite	ne
 81081b4:	2301      	movne	r3, #1
 81081b6:	2300      	moveq	r3, #0
 81081b8:	b2db      	uxtb	r3, r3
 81081ba:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 81081bc:	683b      	ldr	r3, [r7, #0]
 81081be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 81081c2:	687b      	ldr	r3, [r7, #4]
 81081c4:	681b      	ldr	r3, [r3, #0]
 81081c6:	685b      	ldr	r3, [r3, #4]
 81081c8:	0e5b      	lsrs	r3, r3, #25
 81081ca:	f003 021f 	and.w	r2, r3, #31
 81081ce:	683b      	ldr	r3, [r7, #0]
 81081d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 81081d2:	687b      	ldr	r3, [r7, #4]
 81081d4:	681b      	ldr	r3, [r3, #0]
 81081d6:	68db      	ldr	r3, [r3, #12]
 81081d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81081dc:	2b00      	cmp	r3, #0
 81081de:	bf14      	ite	ne
 81081e0:	2301      	movne	r3, #1
 81081e2:	2300      	moveq	r3, #0
 81081e4:	b2db      	uxtb	r3, r3
 81081e6:	461a      	mov	r2, r3
 81081e8:	683b      	ldr	r3, [r7, #0]
 81081ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 81081ee:	687b      	ldr	r3, [r7, #4]
 81081f0:	681b      	ldr	r3, [r3, #0]
 81081f2:	68db      	ldr	r3, [r3, #12]
 81081f4:	f003 020f 	and.w	r2, r3, #15
 81081f8:	683b      	ldr	r3, [r7, #0]
 81081fa:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 81081fc:	687b      	ldr	r3, [r7, #4]
 81081fe:	681b      	ldr	r3, [r3, #0]
 8108200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8108202:	f003 0302 	and.w	r3, r3, #2
 8108206:	2b00      	cmp	r3, #0
 8108208:	bf14      	ite	ne
 810820a:	2301      	movne	r3, #1
 810820c:	2300      	moveq	r3, #0
 810820e:	b2db      	uxtb	r3, r3
 8108210:	461a      	mov	r2, r3
 8108212:	683b      	ldr	r3, [r7, #0]
 8108214:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8108218:	687b      	ldr	r3, [r7, #4]
 810821a:	681b      	ldr	r3, [r3, #0]
 810821c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810821e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8108222:	2b00      	cmp	r3, #0
 8108224:	bf0c      	ite	eq
 8108226:	2301      	moveq	r3, #1
 8108228:	2300      	movne	r3, #0
 810822a:	b2db      	uxtb	r3, r3
 810822c:	461a      	mov	r2, r3
 810822e:	683b      	ldr	r3, [r7, #0]
 8108230:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8108234:	687b      	ldr	r3, [r7, #4]
 8108236:	681b      	ldr	r3, [r3, #0]
 8108238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810823a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 810823e:	683b      	ldr	r3, [r7, #0]
 8108240:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8108242:	687b      	ldr	r3, [r7, #4]
 8108244:	681b      	ldr	r3, [r3, #0]
 8108246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8108248:	0c1b      	lsrs	r3, r3, #16
 810824a:	b29a      	uxth	r2, r3
 810824c:	683b      	ldr	r3, [r7, #0]
 810824e:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8108250:	687b      	ldr	r3, [r7, #4]
 8108252:	681b      	ldr	r3, [r3, #0]
 8108254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8108258:	f003 0301 	and.w	r3, r3, #1
 810825c:	2b00      	cmp	r3, #0
 810825e:	bf14      	ite	ne
 8108260:	2301      	movne	r3, #1
 8108262:	2300      	moveq	r3, #0
 8108264:	b2db      	uxtb	r3, r3
 8108266:	461a      	mov	r2, r3
 8108268:	683b      	ldr	r3, [r7, #0]
 810826a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 810826e:	687b      	ldr	r3, [r7, #4]
 8108270:	681b      	ldr	r3, [r3, #0]
 8108272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8108276:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 810827a:	2b00      	cmp	r3, #0
 810827c:	bf14      	ite	ne
 810827e:	2301      	movne	r3, #1
 8108280:	2300      	moveq	r3, #0
 8108282:	b2db      	uxtb	r3, r3
 8108284:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8108286:	683b      	ldr	r3, [r7, #0]
 8108288:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 810828c:	687b      	ldr	r3, [r7, #4]
 810828e:	681b      	ldr	r3, [r3, #0]
 8108290:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8108294:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8108298:	683b      	ldr	r3, [r7, #0]
 810829a:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 810829c:	687b      	ldr	r3, [r7, #4]
 810829e:	681b      	ldr	r3, [r3, #0]
 81082a0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 81082a4:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 81082a8:	683b      	ldr	r3, [r7, #0]
 81082aa:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 81082ac:	687b      	ldr	r3, [r7, #4]
 81082ae:	681b      	ldr	r3, [r3, #0]
 81082b0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 81082b4:	f003 0308 	and.w	r3, r3, #8
 81082b8:	2b00      	cmp	r3, #0
 81082ba:	bf14      	ite	ne
 81082bc:	2301      	movne	r3, #1
 81082be:	2300      	moveq	r3, #0
 81082c0:	b2db      	uxtb	r3, r3
 81082c2:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 81082c4:	683b      	ldr	r3, [r7, #0]
 81082c6:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 81082ca:	687b      	ldr	r3, [r7, #4]
 81082cc:	681b      	ldr	r3, [r3, #0]
 81082ce:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 81082d2:	f003 0310 	and.w	r3, r3, #16
 81082d6:	2b00      	cmp	r3, #0
 81082d8:	bf14      	ite	ne
 81082da:	2301      	movne	r3, #1
 81082dc:	2300      	moveq	r3, #0
 81082de:	b2db      	uxtb	r3, r3
 81082e0:	461a      	mov	r2, r3
 81082e2:	683b      	ldr	r3, [r7, #0]
 81082e4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 81082e8:	687b      	ldr	r3, [r7, #4]
 81082ea:	681b      	ldr	r3, [r3, #0]
 81082ec:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 81082f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81082f4:	2b00      	cmp	r3, #0
 81082f6:	bf0c      	ite	eq
 81082f8:	2301      	moveq	r3, #1
 81082fa:	2300      	movne	r3, #0
 81082fc:	b2db      	uxtb	r3, r3
 81082fe:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8108300:	683b      	ldr	r3, [r7, #0]
 8108302:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8108306:	2300      	movs	r3, #0
}
 8108308:	4618      	mov	r0, r3
 810830a:	370c      	adds	r7, #12
 810830c:	46bd      	mov	sp, r7
 810830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108312:	4770      	bx	lr

08108314 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8108314:	b580      	push	{r7, lr}
 8108316:	b082      	sub	sp, #8
 8108318:	af00      	add	r7, sp, #0
 810831a:	6078      	str	r0, [r7, #4]
 810831c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 810831e:	683b      	ldr	r3, [r7, #0]
 8108320:	2b00      	cmp	r3, #0
 8108322:	d101      	bne.n	8108328 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8108324:	2301      	movs	r3, #1
 8108326:	e00b      	b.n	8108340 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8108328:	687b      	ldr	r3, [r7, #4]
 810832a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810832e:	2b10      	cmp	r3, #16
 8108330:	d105      	bne.n	810833e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8108332:	6839      	ldr	r1, [r7, #0]
 8108334:	6878      	ldr	r0, [r7, #4]
 8108336:	f000 f871 	bl	810841c <ETH_SetMACConfig>

    return HAL_OK;
 810833a:	2300      	movs	r3, #0
 810833c:	e000      	b.n	8108340 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 810833e:	2301      	movs	r3, #1
  }
}
 8108340:	4618      	mov	r0, r3
 8108342:	3708      	adds	r7, #8
 8108344:	46bd      	mov	sp, r7
 8108346:	bd80      	pop	{r7, pc}

08108348 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8108348:	b580      	push	{r7, lr}
 810834a:	b084      	sub	sp, #16
 810834c:	af00      	add	r7, sp, #0
 810834e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8108350:	687b      	ldr	r3, [r7, #4]
 8108352:	681b      	ldr	r3, [r3, #0]
 8108354:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8108358:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 810835a:	68fb      	ldr	r3, [r7, #12]
 810835c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8108360:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8108362:	f001 fff1 	bl	810a348 <HAL_RCC_GetHCLKFreq>
 8108366:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8108368:	68bb      	ldr	r3, [r7, #8]
 810836a:	4a1a      	ldr	r2, [pc, #104]	@ (81083d4 <HAL_ETH_SetMDIOClockRange+0x8c>)
 810836c:	4293      	cmp	r3, r2
 810836e:	d804      	bhi.n	810837a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8108370:	68fb      	ldr	r3, [r7, #12]
 8108372:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8108376:	60fb      	str	r3, [r7, #12]
 8108378:	e022      	b.n	81083c0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 810837a:	68bb      	ldr	r3, [r7, #8]
 810837c:	4a16      	ldr	r2, [pc, #88]	@ (81083d8 <HAL_ETH_SetMDIOClockRange+0x90>)
 810837e:	4293      	cmp	r3, r2
 8108380:	d204      	bcs.n	810838c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8108382:	68fb      	ldr	r3, [r7, #12]
 8108384:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8108388:	60fb      	str	r3, [r7, #12]
 810838a:	e019      	b.n	81083c0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 810838c:	68bb      	ldr	r3, [r7, #8]
 810838e:	4a13      	ldr	r2, [pc, #76]	@ (81083dc <HAL_ETH_SetMDIOClockRange+0x94>)
 8108390:	4293      	cmp	r3, r2
 8108392:	d915      	bls.n	81083c0 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8108394:	68bb      	ldr	r3, [r7, #8]
 8108396:	4a12      	ldr	r2, [pc, #72]	@ (81083e0 <HAL_ETH_SetMDIOClockRange+0x98>)
 8108398:	4293      	cmp	r3, r2
 810839a:	d804      	bhi.n	81083a6 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 810839c:	68fb      	ldr	r3, [r7, #12]
 810839e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81083a2:	60fb      	str	r3, [r7, #12]
 81083a4:	e00c      	b.n	81083c0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 81083a6:	68bb      	ldr	r3, [r7, #8]
 81083a8:	4a0e      	ldr	r2, [pc, #56]	@ (81083e4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 81083aa:	4293      	cmp	r3, r2
 81083ac:	d804      	bhi.n	81083b8 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 81083ae:	68fb      	ldr	r3, [r7, #12]
 81083b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 81083b4:	60fb      	str	r3, [r7, #12]
 81083b6:	e003      	b.n	81083c0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 81083b8:	68fb      	ldr	r3, [r7, #12]
 81083ba:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 81083be:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 81083c0:	687b      	ldr	r3, [r7, #4]
 81083c2:	681b      	ldr	r3, [r3, #0]
 81083c4:	68fa      	ldr	r2, [r7, #12]
 81083c6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 81083ca:	bf00      	nop
 81083cc:	3710      	adds	r7, #16
 81083ce:	46bd      	mov	sp, r7
 81083d0:	bd80      	pop	{r7, pc}
 81083d2:	bf00      	nop
 81083d4:	02160ebf 	.word	0x02160ebf
 81083d8:	03938700 	.word	0x03938700
 81083dc:	05f5e0ff 	.word	0x05f5e0ff
 81083e0:	08f0d17f 	.word	0x08f0d17f
 81083e4:	0ee6b27f 	.word	0x0ee6b27f

081083e8 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 81083e8:	b480      	push	{r7}
 81083ea:	b083      	sub	sp, #12
 81083ec:	af00      	add	r7, sp, #0
 81083ee:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 81083f0:	687b      	ldr	r3, [r7, #4]
 81083f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 81083f6:	4618      	mov	r0, r3
 81083f8:	370c      	adds	r7, #12
 81083fa:	46bd      	mov	sp, r7
 81083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108400:	4770      	bx	lr

08108402 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8108402:	b480      	push	{r7}
 8108404:	b083      	sub	sp, #12
 8108406:	af00      	add	r7, sp, #0
 8108408:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 810840a:	687b      	ldr	r3, [r7, #4]
 810840c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8108410:	4618      	mov	r0, r3
 8108412:	370c      	adds	r7, #12
 8108414:	46bd      	mov	sp, r7
 8108416:	f85d 7b04 	ldr.w	r7, [sp], #4
 810841a:	4770      	bx	lr

0810841c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 810841c:	b480      	push	{r7}
 810841e:	b085      	sub	sp, #20
 8108420:	af00      	add	r7, sp, #0
 8108422:	6078      	str	r0, [r7, #4]
 8108424:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8108426:	683b      	ldr	r3, [r7, #0]
 8108428:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 810842a:	683b      	ldr	r3, [r7, #0]
 810842c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 810842e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8108430:	683b      	ldr	r3, [r7, #0]
 8108432:	791b      	ldrb	r3, [r3, #4]
 8108434:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8108436:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8108438:	683b      	ldr	r3, [r7, #0]
 810843a:	7b1b      	ldrb	r3, [r3, #12]
 810843c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 810843e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8108440:	683b      	ldr	r3, [r7, #0]
 8108442:	7b5b      	ldrb	r3, [r3, #13]
 8108444:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8108446:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8108448:	683b      	ldr	r3, [r7, #0]
 810844a:	7b9b      	ldrb	r3, [r3, #14]
 810844c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 810844e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8108450:	683b      	ldr	r3, [r7, #0]
 8108452:	7bdb      	ldrb	r3, [r3, #15]
 8108454:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8108456:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8108458:	683a      	ldr	r2, [r7, #0]
 810845a:	7c12      	ldrb	r2, [r2, #16]
 810845c:	2a00      	cmp	r2, #0
 810845e:	d102      	bne.n	8108466 <ETH_SetMACConfig+0x4a>
 8108460:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8108464:	e000      	b.n	8108468 <ETH_SetMACConfig+0x4c>
 8108466:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8108468:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 810846a:	683a      	ldr	r2, [r7, #0]
 810846c:	7c52      	ldrb	r2, [r2, #17]
 810846e:	2a00      	cmp	r2, #0
 8108470:	d102      	bne.n	8108478 <ETH_SetMACConfig+0x5c>
 8108472:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8108476:	e000      	b.n	810847a <ETH_SetMACConfig+0x5e>
 8108478:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 810847a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 810847c:	683b      	ldr	r3, [r7, #0]
 810847e:	7c9b      	ldrb	r3, [r3, #18]
 8108480:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8108482:	431a      	orrs	r2, r3
               macconf->Speed |
 8108484:	683b      	ldr	r3, [r7, #0]
 8108486:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8108488:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 810848a:	683b      	ldr	r3, [r7, #0]
 810848c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 810848e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8108490:	683b      	ldr	r3, [r7, #0]
 8108492:	7f1b      	ldrb	r3, [r3, #28]
 8108494:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8108496:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8108498:	683b      	ldr	r3, [r7, #0]
 810849a:	7f5b      	ldrb	r3, [r3, #29]
 810849c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 810849e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 81084a0:	683a      	ldr	r2, [r7, #0]
 81084a2:	7f92      	ldrb	r2, [r2, #30]
 81084a4:	2a00      	cmp	r2, #0
 81084a6:	d102      	bne.n	81084ae <ETH_SetMACConfig+0x92>
 81084a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 81084ac:	e000      	b.n	81084b0 <ETH_SetMACConfig+0x94>
 81084ae:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 81084b0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 81084b2:	683b      	ldr	r3, [r7, #0]
 81084b4:	7fdb      	ldrb	r3, [r3, #31]
 81084b6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 81084b8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 81084ba:	683a      	ldr	r2, [r7, #0]
 81084bc:	f892 2020 	ldrb.w	r2, [r2, #32]
 81084c0:	2a00      	cmp	r2, #0
 81084c2:	d102      	bne.n	81084ca <ETH_SetMACConfig+0xae>
 81084c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81084c8:	e000      	b.n	81084cc <ETH_SetMACConfig+0xb0>
 81084ca:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 81084cc:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 81084ce:	683b      	ldr	r3, [r7, #0]
 81084d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 81084d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 81084d4:	683b      	ldr	r3, [r7, #0]
 81084d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81084da:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 81084dc:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 81084de:	683b      	ldr	r3, [r7, #0]
 81084e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 81084e2:	4313      	orrs	r3, r2
 81084e4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 81084e6:	687b      	ldr	r3, [r7, #4]
 81084e8:	681b      	ldr	r3, [r3, #0]
 81084ea:	681a      	ldr	r2, [r3, #0]
 81084ec:	4b57      	ldr	r3, [pc, #348]	@ (810864c <ETH_SetMACConfig+0x230>)
 81084ee:	4013      	ands	r3, r2
 81084f0:	687a      	ldr	r2, [r7, #4]
 81084f2:	6812      	ldr	r2, [r2, #0]
 81084f4:	68f9      	ldr	r1, [r7, #12]
 81084f6:	430b      	orrs	r3, r1
 81084f8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 81084fa:	683b      	ldr	r3, [r7, #0]
 81084fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81084fe:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8108500:	683b      	ldr	r3, [r7, #0]
 8108502:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8108506:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8108508:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 810850a:	683b      	ldr	r3, [r7, #0]
 810850c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8108510:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8108512:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8108514:	683b      	ldr	r3, [r7, #0]
 8108516:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 810851a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 810851c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 810851e:	683a      	ldr	r2, [r7, #0]
 8108520:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8108524:	2a00      	cmp	r2, #0
 8108526:	d102      	bne.n	810852e <ETH_SetMACConfig+0x112>
 8108528:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 810852c:	e000      	b.n	8108530 <ETH_SetMACConfig+0x114>
 810852e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8108530:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8108532:	683b      	ldr	r3, [r7, #0]
 8108534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8108536:	4313      	orrs	r3, r2
 8108538:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 810853a:	687b      	ldr	r3, [r7, #4]
 810853c:	681b      	ldr	r3, [r3, #0]
 810853e:	685a      	ldr	r2, [r3, #4]
 8108540:	4b43      	ldr	r3, [pc, #268]	@ (8108650 <ETH_SetMACConfig+0x234>)
 8108542:	4013      	ands	r3, r2
 8108544:	687a      	ldr	r2, [r7, #4]
 8108546:	6812      	ldr	r2, [r2, #0]
 8108548:	68f9      	ldr	r1, [r7, #12]
 810854a:	430b      	orrs	r3, r1
 810854c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 810854e:	683b      	ldr	r3, [r7, #0]
 8108550:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8108554:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8108556:	683b      	ldr	r3, [r7, #0]
 8108558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 810855a:	4313      	orrs	r3, r2
 810855c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 810855e:	687b      	ldr	r3, [r7, #4]
 8108560:	681b      	ldr	r3, [r3, #0]
 8108562:	68db      	ldr	r3, [r3, #12]
 8108564:	f423 7387 	bic.w	r3, r3, #270	@ 0x10e
 8108568:	f023 0301 	bic.w	r3, r3, #1
 810856c:	687a      	ldr	r2, [r7, #4]
 810856e:	6812      	ldr	r2, [r2, #0]
 8108570:	68f9      	ldr	r1, [r7, #12]
 8108572:	430b      	orrs	r3, r1
 8108574:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8108576:	683b      	ldr	r3, [r7, #0]
 8108578:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 810857c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 810857e:	683b      	ldr	r3, [r7, #0]
 8108580:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8108582:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8108584:	683a      	ldr	r2, [r7, #0]
 8108586:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 810858a:	2a00      	cmp	r2, #0
 810858c:	d101      	bne.n	8108592 <ETH_SetMACConfig+0x176>
 810858e:	2280      	movs	r2, #128	@ 0x80
 8108590:	e000      	b.n	8108594 <ETH_SetMACConfig+0x178>
 8108592:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8108594:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8108596:	683b      	ldr	r3, [r7, #0]
 8108598:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810859a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 810859c:	4313      	orrs	r3, r2
 810859e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 81085a0:	687b      	ldr	r3, [r7, #4]
 81085a2:	681b      	ldr	r3, [r3, #0]
 81085a4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 81085a6:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 81085aa:	4013      	ands	r3, r2
 81085ac:	687a      	ldr	r2, [r7, #4]
 81085ae:	6812      	ldr	r2, [r2, #0]
 81085b0:	68f9      	ldr	r1, [r7, #12]
 81085b2:	430b      	orrs	r3, r1
 81085b4:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 81085b6:	683b      	ldr	r3, [r7, #0]
 81085b8:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 81085bc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 81085be:	683b      	ldr	r3, [r7, #0]
 81085c0:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 81085c4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 81085c6:	4313      	orrs	r3, r2
 81085c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 81085ca:	687b      	ldr	r3, [r7, #4]
 81085cc:	681b      	ldr	r3, [r3, #0]
 81085ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81085d2:	f023 0103 	bic.w	r1, r3, #3
 81085d6:	687b      	ldr	r3, [r7, #4]
 81085d8:	681b      	ldr	r3, [r3, #0]
 81085da:	68fa      	ldr	r2, [r7, #12]
 81085dc:	430a      	orrs	r2, r1
 81085de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 81085e2:	687b      	ldr	r3, [r7, #4]
 81085e4:	681b      	ldr	r3, [r3, #0]
 81085e6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 81085ea:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 81085ee:	683b      	ldr	r3, [r7, #0]
 81085f0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 81085f2:	687b      	ldr	r3, [r7, #4]
 81085f4:	681b      	ldr	r3, [r3, #0]
 81085f6:	430a      	orrs	r2, r1
 81085f8:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 81085fc:	683b      	ldr	r3, [r7, #0]
 81085fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8108600:	683a      	ldr	r2, [r7, #0]
 8108602:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8108606:	2a00      	cmp	r2, #0
 8108608:	d101      	bne.n	810860e <ETH_SetMACConfig+0x1f2>
 810860a:	2240      	movs	r2, #64	@ 0x40
 810860c:	e000      	b.n	8108610 <ETH_SetMACConfig+0x1f4>
 810860e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8108610:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8108612:	683b      	ldr	r3, [r7, #0]
 8108614:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8108618:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 810861a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 810861c:	683b      	ldr	r3, [r7, #0]
 810861e:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8108622:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8108624:	4313      	orrs	r3, r2
 8108626:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8108628:	687b      	ldr	r3, [r7, #4]
 810862a:	681b      	ldr	r3, [r3, #0]
 810862c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8108630:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8108634:	687b      	ldr	r3, [r7, #4]
 8108636:	681b      	ldr	r3, [r3, #0]
 8108638:	68fa      	ldr	r2, [r7, #12]
 810863a:	430a      	orrs	r2, r1
 810863c:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8108640:	bf00      	nop
 8108642:	3714      	adds	r7, #20
 8108644:	46bd      	mov	sp, r7
 8108646:	f85d 7b04 	ldr.w	r7, [sp], #4
 810864a:	4770      	bx	lr
 810864c:	00048083 	.word	0x00048083
 8108650:	c0f88000 	.word	0xc0f88000

08108654 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8108654:	b480      	push	{r7}
 8108656:	b085      	sub	sp, #20
 8108658:	af00      	add	r7, sp, #0
 810865a:	6078      	str	r0, [r7, #4]
 810865c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 810865e:	687b      	ldr	r3, [r7, #4]
 8108660:	681b      	ldr	r3, [r3, #0]
 8108662:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8108666:	681b      	ldr	r3, [r3, #0]
 8108668:	f423 43f0 	bic.w	r3, r3, #30720	@ 0x7800
 810866c:	f023 0302 	bic.w	r3, r3, #2
 8108670:	683a      	ldr	r2, [r7, #0]
 8108672:	6811      	ldr	r1, [r2, #0]
 8108674:	687a      	ldr	r2, [r7, #4]
 8108676:	6812      	ldr	r2, [r2, #0]
 8108678:	430b      	orrs	r3, r1
 810867a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810867e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8108680:	683b      	ldr	r3, [r7, #0]
 8108682:	791b      	ldrb	r3, [r3, #4]
 8108684:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8108686:	683b      	ldr	r3, [r7, #0]
 8108688:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 810868a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 810868c:	683b      	ldr	r3, [r7, #0]
 810868e:	7b1b      	ldrb	r3, [r3, #12]
 8108690:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8108692:	4313      	orrs	r3, r2
 8108694:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8108696:	687b      	ldr	r3, [r7, #4]
 8108698:	681b      	ldr	r3, [r3, #0]
 810869a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810869e:	685b      	ldr	r3, [r3, #4]
 81086a0:	f423 4350 	bic.w	r3, r3, #53248	@ 0xd000
 81086a4:	f023 0301 	bic.w	r3, r3, #1
 81086a8:	687a      	ldr	r2, [r7, #4]
 81086aa:	6812      	ldr	r2, [r2, #0]
 81086ac:	68f9      	ldr	r1, [r7, #12]
 81086ae:	430b      	orrs	r3, r1
 81086b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81086b4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 81086b6:	683b      	ldr	r3, [r7, #0]
 81086b8:	7b5b      	ldrb	r3, [r3, #13]
 81086ba:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 81086bc:	683b      	ldr	r3, [r7, #0]
 81086be:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 81086c0:	4313      	orrs	r3, r2
 81086c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 81086c4:	687b      	ldr	r3, [r7, #4]
 81086c6:	681b      	ldr	r3, [r3, #0]
 81086c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81086cc:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 81086d0:	4b21      	ldr	r3, [pc, #132]	@ (8108758 <ETH_SetDMAConfig+0x104>)
 81086d2:	4013      	ands	r3, r2
 81086d4:	687a      	ldr	r2, [r7, #4]
 81086d6:	6812      	ldr	r2, [r2, #0]
 81086d8:	68f9      	ldr	r1, [r7, #12]
 81086da:	430b      	orrs	r3, r1
 81086dc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 81086e0:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 81086e4:	683b      	ldr	r3, [r7, #0]
 81086e6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 81086e8:	683b      	ldr	r3, [r7, #0]
 81086ea:	7d1b      	ldrb	r3, [r3, #20]
 81086ec:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 81086ee:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 81086f0:	683b      	ldr	r3, [r7, #0]
 81086f2:	7f5b      	ldrb	r3, [r3, #29]
 81086f4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 81086f6:	4313      	orrs	r3, r2
 81086f8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 81086fa:	687b      	ldr	r3, [r7, #4]
 81086fc:	681b      	ldr	r3, [r3, #0]
 81086fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8108702:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8108706:	4b15      	ldr	r3, [pc, #84]	@ (810875c <ETH_SetDMAConfig+0x108>)
 8108708:	4013      	ands	r3, r2
 810870a:	687a      	ldr	r2, [r7, #4]
 810870c:	6812      	ldr	r2, [r2, #0]
 810870e:	68f9      	ldr	r1, [r7, #12]
 8108710:	430b      	orrs	r3, r1
 8108712:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8108716:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 810871a:	683b      	ldr	r3, [r7, #0]
 810871c:	7f1b      	ldrb	r3, [r3, #28]
 810871e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8108720:	683b      	ldr	r3, [r7, #0]
 8108722:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8108724:	4313      	orrs	r3, r2
 8108726:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8108728:	687b      	ldr	r3, [r7, #4]
 810872a:	681b      	ldr	r3, [r3, #0]
 810872c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8108730:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8108734:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8108738:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 810873c:	687a      	ldr	r2, [r7, #4]
 810873e:	6812      	ldr	r2, [r2, #0]
 8108740:	68f9      	ldr	r1, [r7, #12]
 8108742:	430b      	orrs	r3, r1
 8108744:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8108748:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 810874c:	bf00      	nop
 810874e:	3714      	adds	r7, #20
 8108750:	46bd      	mov	sp, r7
 8108752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108756:	4770      	bx	lr
 8108758:	fffec000 	.word	0xfffec000
 810875c:	ffc0efef 	.word	0xffc0efef

08108760 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8108760:	b580      	push	{r7, lr}
 8108762:	b0a4      	sub	sp, #144	@ 0x90
 8108764:	af00      	add	r7, sp, #0
 8108766:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8108768:	2301      	movs	r3, #1
 810876a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 810876e:	2300      	movs	r3, #0
 8108770:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8108772:	2300      	movs	r3, #0
 8108774:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8108778:	2300      	movs	r3, #0
 810877a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 810877e:	2301      	movs	r3, #1
 8108780:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8108784:	2301      	movs	r3, #1
 8108786:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 810878a:	2301      	movs	r3, #1
 810878c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8108790:	2300      	movs	r3, #0
 8108792:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8108796:	2301      	movs	r3, #1
 8108798:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 810879c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 81087a0:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 81087a2:	2300      	movs	r3, #0
 81087a4:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 81087a8:	2300      	movs	r3, #0
 81087aa:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 81087ac:	2300      	movs	r3, #0
 81087ae:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 81087b2:	2300      	movs	r3, #0
 81087b4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 81087b8:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 81087bc:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 81087be:	2300      	movs	r3, #0
 81087c0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 81087c4:	2300      	movs	r3, #0
 81087c6:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 81087c8:	2301      	movs	r3, #1
 81087ca:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 81087ce:	2300      	movs	r3, #0
 81087d0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 81087d4:	2300      	movs	r3, #0
 81087d6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 81087da:	2300      	movs	r3, #0
 81087dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 81087de:	2300      	movs	r3, #0
 81087e0:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 81087e2:	2300      	movs	r3, #0
 81087e4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 81087e6:	2300      	movs	r3, #0
 81087e8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 81087ec:	2300      	movs	r3, #0
 81087ee:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 81087f2:	2301      	movs	r3, #1
 81087f4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 81087f8:	2320      	movs	r3, #32
 81087fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 81087fe:	2301      	movs	r3, #1
 8108800:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8108804:	2300      	movs	r3, #0
 8108806:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 810880a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 810880e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8108810:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8108814:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8108816:	2300      	movs	r3, #0
 8108818:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 810881c:	2302      	movs	r3, #2
 810881e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8108822:	2300      	movs	r3, #0
 8108824:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8108828:	2300      	movs	r3, #0
 810882a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 810882e:	2300      	movs	r3, #0
 8108830:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8108834:	2301      	movs	r3, #1
 8108836:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 810883a:	2300      	movs	r3, #0
 810883c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 810883e:	2301      	movs	r3, #1
 8108840:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8108844:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8108848:	4619      	mov	r1, r3
 810884a:	6878      	ldr	r0, [r7, #4]
 810884c:	f7ff fde6 	bl	810841c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8108850:	2301      	movs	r3, #1
 8108852:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8108854:	2301      	movs	r3, #1
 8108856:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8108858:	2300      	movs	r3, #0
 810885a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 810885c:	2300      	movs	r3, #0
 810885e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8108862:	2300      	movs	r3, #0
 8108864:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8108866:	2300      	movs	r3, #0
 8108868:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 810886a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 810886e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8108870:	2300      	movs	r3, #0
 8108872:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8108874:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8108878:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 810887a:	2300      	movs	r3, #0
 810887c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8108880:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8108884:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8108886:	f107 0308 	add.w	r3, r7, #8
 810888a:	4619      	mov	r1, r3
 810888c:	6878      	ldr	r0, [r7, #4]
 810888e:	f7ff fee1 	bl	8108654 <ETH_SetDMAConfig>
}
 8108892:	bf00      	nop
 8108894:	3790      	adds	r7, #144	@ 0x90
 8108896:	46bd      	mov	sp, r7
 8108898:	bd80      	pop	{r7, pc}

0810889a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 810889a:	b480      	push	{r7}
 810889c:	b085      	sub	sp, #20
 810889e:	af00      	add	r7, sp, #0
 81088a0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 81088a2:	2300      	movs	r3, #0
 81088a4:	60fb      	str	r3, [r7, #12]
 81088a6:	e01d      	b.n	81088e4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 81088a8:	687b      	ldr	r3, [r7, #4]
 81088aa:	68d9      	ldr	r1, [r3, #12]
 81088ac:	68fa      	ldr	r2, [r7, #12]
 81088ae:	4613      	mov	r3, r2
 81088b0:	005b      	lsls	r3, r3, #1
 81088b2:	4413      	add	r3, r2
 81088b4:	00db      	lsls	r3, r3, #3
 81088b6:	440b      	add	r3, r1
 81088b8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 81088ba:	68bb      	ldr	r3, [r7, #8]
 81088bc:	2200      	movs	r2, #0
 81088be:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 81088c0:	68bb      	ldr	r3, [r7, #8]
 81088c2:	2200      	movs	r2, #0
 81088c4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 81088c6:	68bb      	ldr	r3, [r7, #8]
 81088c8:	2200      	movs	r2, #0
 81088ca:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 81088cc:	68bb      	ldr	r3, [r7, #8]
 81088ce:	2200      	movs	r2, #0
 81088d0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 81088d2:	68b9      	ldr	r1, [r7, #8]
 81088d4:	687b      	ldr	r3, [r7, #4]
 81088d6:	68fa      	ldr	r2, [r7, #12]
 81088d8:	3206      	adds	r2, #6
 81088da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 81088de:	68fb      	ldr	r3, [r7, #12]
 81088e0:	3301      	adds	r3, #1
 81088e2:	60fb      	str	r3, [r7, #12]
 81088e4:	68fb      	ldr	r3, [r7, #12]
 81088e6:	2b03      	cmp	r3, #3
 81088e8:	d9de      	bls.n	81088a8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 81088ea:	687b      	ldr	r3, [r7, #4]
 81088ec:	2200      	movs	r2, #0
 81088ee:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 81088f0:	687b      	ldr	r3, [r7, #4]
 81088f2:	681b      	ldr	r3, [r3, #0]
 81088f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81088f8:	461a      	mov	r2, r3
 81088fa:	2303      	movs	r3, #3
 81088fc:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8108900:	687b      	ldr	r3, [r7, #4]
 8108902:	68da      	ldr	r2, [r3, #12]
 8108904:	687b      	ldr	r3, [r7, #4]
 8108906:	681b      	ldr	r3, [r3, #0]
 8108908:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810890c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8108910:	687b      	ldr	r3, [r7, #4]
 8108912:	68da      	ldr	r2, [r3, #12]
 8108914:	687b      	ldr	r3, [r7, #4]
 8108916:	681b      	ldr	r3, [r3, #0]
 8108918:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810891c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8108920:	bf00      	nop
 8108922:	3714      	adds	r7, #20
 8108924:	46bd      	mov	sp, r7
 8108926:	f85d 7b04 	ldr.w	r7, [sp], #4
 810892a:	4770      	bx	lr

0810892c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 810892c:	b480      	push	{r7}
 810892e:	b085      	sub	sp, #20
 8108930:	af00      	add	r7, sp, #0
 8108932:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8108934:	2300      	movs	r3, #0
 8108936:	60fb      	str	r3, [r7, #12]
 8108938:	e023      	b.n	8108982 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 810893a:	687b      	ldr	r3, [r7, #4]
 810893c:	6919      	ldr	r1, [r3, #16]
 810893e:	68fa      	ldr	r2, [r7, #12]
 8108940:	4613      	mov	r3, r2
 8108942:	005b      	lsls	r3, r3, #1
 8108944:	4413      	add	r3, r2
 8108946:	00db      	lsls	r3, r3, #3
 8108948:	440b      	add	r3, r1
 810894a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 810894c:	68bb      	ldr	r3, [r7, #8]
 810894e:	2200      	movs	r2, #0
 8108950:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8108952:	68bb      	ldr	r3, [r7, #8]
 8108954:	2200      	movs	r2, #0
 8108956:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8108958:	68bb      	ldr	r3, [r7, #8]
 810895a:	2200      	movs	r2, #0
 810895c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 810895e:	68bb      	ldr	r3, [r7, #8]
 8108960:	2200      	movs	r2, #0
 8108962:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8108964:	68bb      	ldr	r3, [r7, #8]
 8108966:	2200      	movs	r2, #0
 8108968:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 810896a:	68bb      	ldr	r3, [r7, #8]
 810896c:	2200      	movs	r2, #0
 810896e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8108970:	68b9      	ldr	r1, [r7, #8]
 8108972:	687b      	ldr	r3, [r7, #4]
 8108974:	68fa      	ldr	r2, [r7, #12]
 8108976:	3212      	adds	r2, #18
 8108978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 810897c:	68fb      	ldr	r3, [r7, #12]
 810897e:	3301      	adds	r3, #1
 8108980:	60fb      	str	r3, [r7, #12]
 8108982:	68fb      	ldr	r3, [r7, #12]
 8108984:	2b03      	cmp	r3, #3
 8108986:	d9d8      	bls.n	810893a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8108988:	687b      	ldr	r3, [r7, #4]
 810898a:	2200      	movs	r2, #0
 810898c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 810898e:	687b      	ldr	r3, [r7, #4]
 8108990:	2200      	movs	r2, #0
 8108992:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8108994:	687b      	ldr	r3, [r7, #4]
 8108996:	2200      	movs	r2, #0
 8108998:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 810899a:	687b      	ldr	r3, [r7, #4]
 810899c:	2200      	movs	r2, #0
 810899e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 81089a0:	687b      	ldr	r3, [r7, #4]
 81089a2:	2200      	movs	r2, #0
 81089a4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 81089a6:	687b      	ldr	r3, [r7, #4]
 81089a8:	681b      	ldr	r3, [r3, #0]
 81089aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81089ae:	461a      	mov	r2, r3
 81089b0:	2303      	movs	r3, #3
 81089b2:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 81089b6:	687b      	ldr	r3, [r7, #4]
 81089b8:	691a      	ldr	r2, [r3, #16]
 81089ba:	687b      	ldr	r3, [r7, #4]
 81089bc:	681b      	ldr	r3, [r3, #0]
 81089be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81089c2:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 81089c6:	687b      	ldr	r3, [r7, #4]
 81089c8:	691b      	ldr	r3, [r3, #16]
 81089ca:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 81089ce:	687b      	ldr	r3, [r7, #4]
 81089d0:	681b      	ldr	r3, [r3, #0]
 81089d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81089d6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 81089da:	bf00      	nop
 81089dc:	3714      	adds	r7, #20
 81089de:	46bd      	mov	sp, r7
 81089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81089e4:	4770      	bx	lr

081089e6 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 81089e6:	b480      	push	{r7}
 81089e8:	b091      	sub	sp, #68	@ 0x44
 81089ea:	af00      	add	r7, sp, #0
 81089ec:	60f8      	str	r0, [r7, #12]
 81089ee:	60b9      	str	r1, [r7, #8]
 81089f0:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 81089f2:	68fb      	ldr	r3, [r7, #12]
 81089f4:	3318      	adds	r3, #24
 81089f6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 81089f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81089fa:	691b      	ldr	r3, [r3, #16]
 81089fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 81089fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108a00:	691b      	ldr	r3, [r3, #16]
 8108a02:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8108a04:	2300      	movs	r3, #0
 8108a06:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8108a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108a0a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8108a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8108a10:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8108a12:	68bb      	ldr	r3, [r7, #8]
 8108a14:	689b      	ldr	r3, [r3, #8]
 8108a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8108a18:	2300      	movs	r3, #0
 8108a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8108a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108a1e:	68db      	ldr	r3, [r3, #12]
 8108a20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8108a24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8108a28:	d007      	beq.n	8108a3a <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8108a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8108a2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108a2e:	3304      	adds	r3, #4
 8108a30:	009b      	lsls	r3, r3, #2
 8108a32:	4413      	add	r3, r2
 8108a34:	685b      	ldr	r3, [r3, #4]
 8108a36:	2b00      	cmp	r3, #0
 8108a38:	d001      	beq.n	8108a3e <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8108a3a:	2302      	movs	r3, #2
 8108a3c:	e267      	b.n	8108f0e <ETH_Prepare_Tx_Descriptors+0x528>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8108a3e:	68bb      	ldr	r3, [r7, #8]
 8108a40:	681b      	ldr	r3, [r3, #0]
 8108a42:	f003 0304 	and.w	r3, r3, #4
 8108a46:	2b00      	cmp	r3, #0
 8108a48:	d044      	beq.n	8108ad4 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8108a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108a4c:	68db      	ldr	r3, [r3, #12]
 8108a4e:	0c1b      	lsrs	r3, r3, #16
 8108a50:	041b      	lsls	r3, r3, #16
 8108a52:	68ba      	ldr	r2, [r7, #8]
 8108a54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8108a56:	431a      	orrs	r2, r3
 8108a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108a5a:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8108a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108a5e:	68db      	ldr	r3, [r3, #12]
 8108a60:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8108a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108a66:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8108a68:	68fb      	ldr	r3, [r7, #12]
 8108a6a:	681b      	ldr	r3, [r3, #0]
 8108a6c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8108a6e:	68fb      	ldr	r3, [r7, #12]
 8108a70:	681b      	ldr	r3, [r3, #0]
 8108a72:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8108a76:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8108a78:	68bb      	ldr	r3, [r7, #8]
 8108a7a:	681b      	ldr	r3, [r3, #0]
 8108a7c:	f003 0308 	and.w	r3, r3, #8
 8108a80:	2b00      	cmp	r3, #0
 8108a82:	d027      	beq.n	8108ad4 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8108a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108a86:	689b      	ldr	r3, [r3, #8]
 8108a88:	b29a      	uxth	r2, r3
 8108a8a:	68bb      	ldr	r3, [r7, #8]
 8108a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108a8e:	041b      	lsls	r3, r3, #16
 8108a90:	431a      	orrs	r2, r3
 8108a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108a94:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8108a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108a98:	68db      	ldr	r3, [r3, #12]
 8108a9a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8108a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108aa0:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8108aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108aa4:	68db      	ldr	r3, [r3, #12]
 8108aa6:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8108aaa:	68bb      	ldr	r3, [r7, #8]
 8108aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108aae:	431a      	orrs	r2, r3
 8108ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108ab2:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8108ab4:	68fb      	ldr	r3, [r7, #12]
 8108ab6:	681b      	ldr	r3, [r3, #0]
 8108ab8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8108aba:	68fb      	ldr	r3, [r7, #12]
 8108abc:	681b      	ldr	r3, [r3, #0]
 8108abe:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8108ac2:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8108ac4:	68fb      	ldr	r3, [r7, #12]
 8108ac6:	681b      	ldr	r3, [r3, #0]
 8108ac8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8108aca:	68fb      	ldr	r3, [r7, #12]
 8108acc:	681b      	ldr	r3, [r3, #0]
 8108ace:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8108ad2:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8108ad4:	68bb      	ldr	r3, [r7, #8]
 8108ad6:	681b      	ldr	r3, [r3, #0]
 8108ad8:	f003 0310 	and.w	r3, r3, #16
 8108adc:	2b00      	cmp	r3, #0
 8108ade:	d010      	beq.n	8108b02 <ETH_Prepare_Tx_Descriptors+0x11c>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8108ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108ae2:	689b      	ldr	r3, [r3, #8]
 8108ae4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8108ae8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8108aec:	68ba      	ldr	r2, [r7, #8]
 8108aee:	6992      	ldr	r2, [r2, #24]
 8108af0:	431a      	orrs	r2, r3
 8108af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108af4:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8108af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108af8:	68db      	ldr	r3, [r3, #12]
 8108afa:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8108afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108b00:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8108b02:	68bb      	ldr	r3, [r7, #8]
 8108b04:	681b      	ldr	r3, [r3, #0]
 8108b06:	f003 0304 	and.w	r3, r3, #4
 8108b0a:	2b00      	cmp	r3, #0
 8108b0c:	d105      	bne.n	8108b1a <ETH_Prepare_Tx_Descriptors+0x134>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8108b0e:	68bb      	ldr	r3, [r7, #8]
 8108b10:	681b      	ldr	r3, [r3, #0]
 8108b12:	f003 0310 	and.w	r3, r3, #16
 8108b16:	2b00      	cmp	r3, #0
 8108b18:	d036      	beq.n	8108b88 <ETH_Prepare_Tx_Descriptors+0x1a2>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8108b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108b1c:	68db      	ldr	r3, [r3, #12]
 8108b1e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8108b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108b24:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8108b26:	f3bf 8f5f 	dmb	sy
}
 8108b2a:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8108b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108b2e:	68db      	ldr	r3, [r3, #12]
 8108b30:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8108b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108b36:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8108b38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108b3a:	3301      	adds	r3, #1
 8108b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108b3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108b40:	2b03      	cmp	r3, #3
 8108b42:	d902      	bls.n	8108b4a <ETH_Prepare_Tx_Descriptors+0x164>
 8108b44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108b46:	3b04      	subs	r3, #4
 8108b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8108b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108b4c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8108b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8108b52:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 8108b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108b56:	3301      	adds	r3, #1
 8108b58:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8108b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108b5c:	68db      	ldr	r3, [r3, #12]
 8108b5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8108b62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8108b66:	d10f      	bne.n	8108b88 <ETH_Prepare_Tx_Descriptors+0x1a2>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8108b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108b6a:	6a3a      	ldr	r2, [r7, #32]
 8108b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8108b70:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8108b72:	f3bf 8f5f 	dmb	sy
}
 8108b76:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8108b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108b7a:	68db      	ldr	r3, [r3, #12]
 8108b7c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8108b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108b82:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8108b84:	2302      	movs	r3, #2
 8108b86:	e1c2      	b.n	8108f0e <ETH_Prepare_Tx_Descriptors+0x528>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8108b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108b8a:	3301      	adds	r3, #1
 8108b8c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8108b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108b90:	681b      	ldr	r3, [r3, #0]
 8108b92:	461a      	mov	r2, r3
 8108b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108b96:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8108b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108b9a:	689b      	ldr	r3, [r3, #8]
 8108b9c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8108ba0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8108ba4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8108ba6:	6852      	ldr	r2, [r2, #4]
 8108ba8:	431a      	orrs	r2, r3
 8108baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108bac:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8108bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108bb0:	689b      	ldr	r3, [r3, #8]
 8108bb2:	2b00      	cmp	r3, #0
 8108bb4:	d014      	beq.n	8108be0 <ETH_Prepare_Tx_Descriptors+0x1fa>
  {
    txbuffer = txbuffer->next;
 8108bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108bb8:	689b      	ldr	r3, [r3, #8]
 8108bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8108bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108bbe:	681b      	ldr	r3, [r3, #0]
 8108bc0:	461a      	mov	r2, r3
 8108bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108bc4:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8108bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108bc8:	689b      	ldr	r3, [r3, #8]
 8108bca:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 8108bce:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8108bd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8108bd4:	6852      	ldr	r2, [r2, #4]
 8108bd6:	0412      	lsls	r2, r2, #16
 8108bd8:	431a      	orrs	r2, r3
 8108bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108bdc:	609a      	str	r2, [r3, #8]
 8108bde:	e00a      	b.n	8108bf6 <ETH_Prepare_Tx_Descriptors+0x210>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8108be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108be2:	2200      	movs	r2, #0
 8108be4:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8108be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108be8:	689b      	ldr	r3, [r3, #8]
 8108bea:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 8108bee:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8108bf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8108bf4:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8108bf6:	68bb      	ldr	r3, [r7, #8]
 8108bf8:	681b      	ldr	r3, [r3, #0]
 8108bfa:	f003 0310 	and.w	r3, r3, #16
 8108bfe:	2b00      	cmp	r3, #0
 8108c00:	d019      	beq.n	8108c36 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8108c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108c04:	68db      	ldr	r3, [r3, #12]
 8108c06:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 8108c0a:	68bb      	ldr	r3, [r7, #8]
 8108c0c:	6a1b      	ldr	r3, [r3, #32]
 8108c0e:	04db      	lsls	r3, r3, #19
 8108c10:	431a      	orrs	r2, r3
 8108c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108c14:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8108c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108c18:	68db      	ldr	r3, [r3, #12]
 8108c1a:	0c9b      	lsrs	r3, r3, #18
 8108c1c:	049b      	lsls	r3, r3, #18
 8108c1e:	68ba      	ldr	r2, [r7, #8]
 8108c20:	69d2      	ldr	r2, [r2, #28]
 8108c22:	431a      	orrs	r2, r3
 8108c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108c26:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8108c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108c2a:	68db      	ldr	r3, [r3, #12]
 8108c2c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8108c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108c32:	60da      	str	r2, [r3, #12]
 8108c34:	e028      	b.n	8108c88 <ETH_Prepare_Tx_Descriptors+0x2a2>
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8108c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108c38:	68db      	ldr	r3, [r3, #12]
 8108c3a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8108c3e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8108c42:	68ba      	ldr	r2, [r7, #8]
 8108c44:	6852      	ldr	r2, [r2, #4]
 8108c46:	431a      	orrs	r2, r3
 8108c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108c4a:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8108c4c:	68bb      	ldr	r3, [r7, #8]
 8108c4e:	681b      	ldr	r3, [r3, #0]
 8108c50:	f003 0301 	and.w	r3, r3, #1
 8108c54:	2b00      	cmp	r3, #0
 8108c56:	d008      	beq.n	8108c6a <ETH_Prepare_Tx_Descriptors+0x284>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8108c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108c5a:	68db      	ldr	r3, [r3, #12]
 8108c5c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8108c60:	68bb      	ldr	r3, [r7, #8]
 8108c62:	695b      	ldr	r3, [r3, #20]
 8108c64:	431a      	orrs	r2, r3
 8108c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108c68:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8108c6a:	68bb      	ldr	r3, [r7, #8]
 8108c6c:	681b      	ldr	r3, [r3, #0]
 8108c6e:	f003 0320 	and.w	r3, r3, #32
 8108c72:	2b00      	cmp	r3, #0
 8108c74:	d008      	beq.n	8108c88 <ETH_Prepare_Tx_Descriptors+0x2a2>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8108c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108c78:	68db      	ldr	r3, [r3, #12]
 8108c7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8108c7e:	68bb      	ldr	r3, [r7, #8]
 8108c80:	691b      	ldr	r3, [r3, #16]
 8108c82:	431a      	orrs	r2, r3
 8108c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108c86:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8108c88:	68bb      	ldr	r3, [r7, #8]
 8108c8a:	681b      	ldr	r3, [r3, #0]
 8108c8c:	f003 0304 	and.w	r3, r3, #4
 8108c90:	2b00      	cmp	r3, #0
 8108c92:	d008      	beq.n	8108ca6 <ETH_Prepare_Tx_Descriptors+0x2c0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8108c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108c96:	689b      	ldr	r3, [r3, #8]
 8108c98:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8108c9c:	68bb      	ldr	r3, [r7, #8]
 8108c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108ca0:	431a      	orrs	r2, r3
 8108ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108ca4:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8108ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108ca8:	68db      	ldr	r3, [r3, #12]
 8108caa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8108cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108cb0:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8108cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108cb4:	68db      	ldr	r3, [r3, #12]
 8108cb6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8108cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108cbc:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8108cbe:	f3bf 8f5f 	dmb	sy
}
 8108cc2:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8108cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108cc6:	68db      	ldr	r3, [r3, #12]
 8108cc8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8108ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108cce:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8108cd0:	68bb      	ldr	r3, [r7, #8]
 8108cd2:	681b      	ldr	r3, [r3, #0]
 8108cd4:	f003 0302 	and.w	r3, r3, #2
 8108cd8:	2b00      	cmp	r3, #0
 8108cda:	f000 80d9 	beq.w	8108e90 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8108cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108ce0:	68db      	ldr	r3, [r3, #12]
 8108ce2:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 8108ce6:	68bb      	ldr	r3, [r7, #8]
 8108ce8:	68db      	ldr	r3, [r3, #12]
 8108cea:	431a      	orrs	r2, r3
 8108cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108cee:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8108cf0:	e0ce      	b.n	8108e90 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8108cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108cf4:	68db      	ldr	r3, [r3, #12]
 8108cf6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8108cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108cfc:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8108cfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108d00:	3301      	adds	r3, #1
 8108d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108d04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108d06:	2b03      	cmp	r3, #3
 8108d08:	d902      	bls.n	8108d10 <ETH_Prepare_Tx_Descriptors+0x32a>
 8108d0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108d0c:	3b04      	subs	r3, #4
 8108d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8108d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108d12:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8108d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8108d18:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8108d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108d1c:	68db      	ldr	r3, [r3, #12]
 8108d1e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8108d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108d24:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8108d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108d28:	68db      	ldr	r3, [r3, #12]
 8108d2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8108d2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8108d32:	d007      	beq.n	8108d44 <ETH_Prepare_Tx_Descriptors+0x35e>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8108d34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8108d36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108d38:	3304      	adds	r3, #4
 8108d3a:	009b      	lsls	r3, r3, #2
 8108d3c:	4413      	add	r3, r2
 8108d3e:	685b      	ldr	r3, [r3, #4]
 8108d40:	2b00      	cmp	r3, #0
 8108d42:	d029      	beq.n	8108d98 <ETH_Prepare_Tx_Descriptors+0x3b2>
    {
      descidx = firstdescidx;
 8108d44:	6a3b      	ldr	r3, [r7, #32]
 8108d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8108d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108d4a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8108d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8108d50:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8108d52:	2300      	movs	r3, #0
 8108d54:	63bb      	str	r3, [r7, #56]	@ 0x38
 8108d56:	e019      	b.n	8108d8c <ETH_Prepare_Tx_Descriptors+0x3a6>
  __ASM volatile ("dmb 0xF":::"memory");
 8108d58:	f3bf 8f5f 	dmb	sy
}
 8108d5c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8108d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108d60:	68db      	ldr	r3, [r3, #12]
 8108d62:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8108d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108d68:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8108d6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108d6c:	3301      	adds	r3, #1
 8108d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8108d70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108d72:	2b03      	cmp	r3, #3
 8108d74:	d902      	bls.n	8108d7c <ETH_Prepare_Tx_Descriptors+0x396>
 8108d76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108d78:	3b04      	subs	r3, #4
 8108d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8108d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108d7e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8108d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8108d84:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8108d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108d88:	3301      	adds	r3, #1
 8108d8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8108d8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8108d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108d90:	429a      	cmp	r2, r3
 8108d92:	d3e1      	bcc.n	8108d58 <ETH_Prepare_Tx_Descriptors+0x372>
      }

      return HAL_ETH_ERROR_BUSY;
 8108d94:	2302      	movs	r3, #2
 8108d96:	e0ba      	b.n	8108f0e <ETH_Prepare_Tx_Descriptors+0x528>
    }

    descnbr += 1U;
 8108d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8108d9a:	3301      	adds	r3, #1
 8108d9c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8108d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108da0:	689b      	ldr	r3, [r3, #8]
 8108da2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8108da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108da6:	681b      	ldr	r3, [r3, #0]
 8108da8:	461a      	mov	r2, r3
 8108daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108dac:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8108dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108db0:	689b      	ldr	r3, [r3, #8]
 8108db2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8108db6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8108dba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8108dbc:	6852      	ldr	r2, [r2, #4]
 8108dbe:	431a      	orrs	r2, r3
 8108dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108dc2:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8108dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108dc6:	689b      	ldr	r3, [r3, #8]
 8108dc8:	2b00      	cmp	r3, #0
 8108dca:	d014      	beq.n	8108df6 <ETH_Prepare_Tx_Descriptors+0x410>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8108dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108dce:	689b      	ldr	r3, [r3, #8]
 8108dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8108dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108dd4:	681b      	ldr	r3, [r3, #0]
 8108dd6:	461a      	mov	r2, r3
 8108dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108dda:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8108ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108dde:	689b      	ldr	r3, [r3, #8]
 8108de0:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 8108de4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8108de8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8108dea:	6852      	ldr	r2, [r2, #4]
 8108dec:	0412      	lsls	r2, r2, #16
 8108dee:	431a      	orrs	r2, r3
 8108df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108df2:	609a      	str	r2, [r3, #8]
 8108df4:	e00a      	b.n	8108e0c <ETH_Prepare_Tx_Descriptors+0x426>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8108df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108df8:	2200      	movs	r2, #0
 8108dfa:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8108dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108dfe:	689b      	ldr	r3, [r3, #8]
 8108e00:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 8108e04:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8108e08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8108e0a:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8108e0c:	68bb      	ldr	r3, [r7, #8]
 8108e0e:	681b      	ldr	r3, [r3, #0]
 8108e10:	f003 0310 	and.w	r3, r3, #16
 8108e14:	2b00      	cmp	r3, #0
 8108e16:	d00f      	beq.n	8108e38 <ETH_Prepare_Tx_Descriptors+0x452>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8108e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108e1a:	68db      	ldr	r3, [r3, #12]
 8108e1c:	0c9b      	lsrs	r3, r3, #18
 8108e1e:	049b      	lsls	r3, r3, #18
 8108e20:	68ba      	ldr	r2, [r7, #8]
 8108e22:	69d2      	ldr	r2, [r2, #28]
 8108e24:	431a      	orrs	r2, r3
 8108e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108e28:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8108e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108e2c:	68db      	ldr	r3, [r3, #12]
 8108e2e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8108e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108e34:	60da      	str	r2, [r3, #12]
 8108e36:	e019      	b.n	8108e6c <ETH_Prepare_Tx_Descriptors+0x486>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8108e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108e3a:	68db      	ldr	r3, [r3, #12]
 8108e3c:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8108e40:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8108e44:	68ba      	ldr	r2, [r7, #8]
 8108e46:	6852      	ldr	r2, [r2, #4]
 8108e48:	431a      	orrs	r2, r3
 8108e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108e4c:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8108e4e:	68bb      	ldr	r3, [r7, #8]
 8108e50:	681b      	ldr	r3, [r3, #0]
 8108e52:	f003 0301 	and.w	r3, r3, #1
 8108e56:	2b00      	cmp	r3, #0
 8108e58:	d008      	beq.n	8108e6c <ETH_Prepare_Tx_Descriptors+0x486>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8108e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108e5c:	68db      	ldr	r3, [r3, #12]
 8108e5e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8108e62:	68bb      	ldr	r3, [r7, #8]
 8108e64:	695b      	ldr	r3, [r3, #20]
 8108e66:	431a      	orrs	r2, r3
 8108e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108e6a:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8108e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108e6e:	3301      	adds	r3, #1
 8108e70:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8108e72:	f3bf 8f5f 	dmb	sy
}
 8108e76:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8108e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108e7a:	68db      	ldr	r3, [r3, #12]
 8108e7c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8108e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108e82:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8108e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108e86:	68db      	ldr	r3, [r3, #12]
 8108e88:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8108e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108e8e:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8108e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108e92:	689b      	ldr	r3, [r3, #8]
 8108e94:	2b00      	cmp	r3, #0
 8108e96:	f47f af2c 	bne.w	8108cf2 <ETH_Prepare_Tx_Descriptors+0x30c>
  }

  if (ItMode != ((uint32_t)RESET))
 8108e9a:	687b      	ldr	r3, [r7, #4]
 8108e9c:	2b00      	cmp	r3, #0
 8108e9e:	d006      	beq.n	8108eae <ETH_Prepare_Tx_Descriptors+0x4c8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8108ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108ea2:	689b      	ldr	r3, [r3, #8]
 8108ea4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8108ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108eaa:	609a      	str	r2, [r3, #8]
 8108eac:	e005      	b.n	8108eba <ETH_Prepare_Tx_Descriptors+0x4d4>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8108eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108eb0:	689b      	ldr	r3, [r3, #8]
 8108eb2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8108eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108eb8:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8108eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108ebc:	68db      	ldr	r3, [r3, #12]
 8108ebe:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8108ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108ec4:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8108ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108ec8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8108eca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8108ecc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108ece:	3304      	adds	r3, #4
 8108ed0:	009b      	lsls	r3, r3, #2
 8108ed2:	440b      	add	r3, r1
 8108ed4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8108ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108ed8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8108eda:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8108edc:	f3ef 8310 	mrs	r3, PRIMASK
 8108ee0:	613b      	str	r3, [r7, #16]
  return(result);
 8108ee2:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8108ee4:	61fb      	str	r3, [r7, #28]
 8108ee6:	2301      	movs	r3, #1
 8108ee8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8108eea:	697b      	ldr	r3, [r7, #20]
 8108eec:	f383 8810 	msr	PRIMASK, r3
}
 8108ef0:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8108ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108ef4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8108ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108ef8:	4413      	add	r3, r2
 8108efa:	1c5a      	adds	r2, r3, #1
 8108efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108efe:	629a      	str	r2, [r3, #40]	@ 0x28
 8108f00:	69fb      	ldr	r3, [r7, #28]
 8108f02:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8108f04:	69bb      	ldr	r3, [r7, #24]
 8108f06:	f383 8810 	msr	PRIMASK, r3
}
 8108f0a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8108f0c:	2300      	movs	r3, #0
}
 8108f0e:	4618      	mov	r0, r3
 8108f10:	3744      	adds	r7, #68	@ 0x44
 8108f12:	46bd      	mov	sp, r7
 8108f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108f18:	4770      	bx	lr
	...

08108f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8108f1c:	b480      	push	{r7}
 8108f1e:	b089      	sub	sp, #36	@ 0x24
 8108f20:	af00      	add	r7, sp, #0
 8108f22:	6078      	str	r0, [r7, #4]
 8108f24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8108f26:	2300      	movs	r3, #0
 8108f28:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8108f2a:	4b89      	ldr	r3, [pc, #548]	@ (8109150 <HAL_GPIO_Init+0x234>)
 8108f2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8108f2e:	e194      	b.n	810925a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8108f30:	683b      	ldr	r3, [r7, #0]
 8108f32:	681a      	ldr	r2, [r3, #0]
 8108f34:	2101      	movs	r1, #1
 8108f36:	69fb      	ldr	r3, [r7, #28]
 8108f38:	fa01 f303 	lsl.w	r3, r1, r3
 8108f3c:	4013      	ands	r3, r2
 8108f3e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8108f40:	693b      	ldr	r3, [r7, #16]
 8108f42:	2b00      	cmp	r3, #0
 8108f44:	f000 8186 	beq.w	8109254 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8108f48:	683b      	ldr	r3, [r7, #0]
 8108f4a:	685b      	ldr	r3, [r3, #4]
 8108f4c:	f003 0303 	and.w	r3, r3, #3
 8108f50:	2b01      	cmp	r3, #1
 8108f52:	d005      	beq.n	8108f60 <HAL_GPIO_Init+0x44>
 8108f54:	683b      	ldr	r3, [r7, #0]
 8108f56:	685b      	ldr	r3, [r3, #4]
 8108f58:	f003 0303 	and.w	r3, r3, #3
 8108f5c:	2b02      	cmp	r3, #2
 8108f5e:	d130      	bne.n	8108fc2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8108f60:	687b      	ldr	r3, [r7, #4]
 8108f62:	689b      	ldr	r3, [r3, #8]
 8108f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8108f66:	69fb      	ldr	r3, [r7, #28]
 8108f68:	005b      	lsls	r3, r3, #1
 8108f6a:	2203      	movs	r2, #3
 8108f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8108f70:	43db      	mvns	r3, r3
 8108f72:	69ba      	ldr	r2, [r7, #24]
 8108f74:	4013      	ands	r3, r2
 8108f76:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8108f78:	683b      	ldr	r3, [r7, #0]
 8108f7a:	68da      	ldr	r2, [r3, #12]
 8108f7c:	69fb      	ldr	r3, [r7, #28]
 8108f7e:	005b      	lsls	r3, r3, #1
 8108f80:	fa02 f303 	lsl.w	r3, r2, r3
 8108f84:	69ba      	ldr	r2, [r7, #24]
 8108f86:	4313      	orrs	r3, r2
 8108f88:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8108f8a:	687b      	ldr	r3, [r7, #4]
 8108f8c:	69ba      	ldr	r2, [r7, #24]
 8108f8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8108f90:	687b      	ldr	r3, [r7, #4]
 8108f92:	685b      	ldr	r3, [r3, #4]
 8108f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8108f96:	2201      	movs	r2, #1
 8108f98:	69fb      	ldr	r3, [r7, #28]
 8108f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8108f9e:	43db      	mvns	r3, r3
 8108fa0:	69ba      	ldr	r2, [r7, #24]
 8108fa2:	4013      	ands	r3, r2
 8108fa4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8108fa6:	683b      	ldr	r3, [r7, #0]
 8108fa8:	685b      	ldr	r3, [r3, #4]
 8108faa:	091b      	lsrs	r3, r3, #4
 8108fac:	f003 0201 	and.w	r2, r3, #1
 8108fb0:	69fb      	ldr	r3, [r7, #28]
 8108fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8108fb6:	69ba      	ldr	r2, [r7, #24]
 8108fb8:	4313      	orrs	r3, r2
 8108fba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8108fbc:	687b      	ldr	r3, [r7, #4]
 8108fbe:	69ba      	ldr	r2, [r7, #24]
 8108fc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8108fc2:	683b      	ldr	r3, [r7, #0]
 8108fc4:	685b      	ldr	r3, [r3, #4]
 8108fc6:	f003 0303 	and.w	r3, r3, #3
 8108fca:	2b03      	cmp	r3, #3
 8108fcc:	d017      	beq.n	8108ffe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8108fce:	687b      	ldr	r3, [r7, #4]
 8108fd0:	68db      	ldr	r3, [r3, #12]
 8108fd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8108fd4:	69fb      	ldr	r3, [r7, #28]
 8108fd6:	005b      	lsls	r3, r3, #1
 8108fd8:	2203      	movs	r2, #3
 8108fda:	fa02 f303 	lsl.w	r3, r2, r3
 8108fde:	43db      	mvns	r3, r3
 8108fe0:	69ba      	ldr	r2, [r7, #24]
 8108fe2:	4013      	ands	r3, r2
 8108fe4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8108fe6:	683b      	ldr	r3, [r7, #0]
 8108fe8:	689a      	ldr	r2, [r3, #8]
 8108fea:	69fb      	ldr	r3, [r7, #28]
 8108fec:	005b      	lsls	r3, r3, #1
 8108fee:	fa02 f303 	lsl.w	r3, r2, r3
 8108ff2:	69ba      	ldr	r2, [r7, #24]
 8108ff4:	4313      	orrs	r3, r2
 8108ff6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8108ff8:	687b      	ldr	r3, [r7, #4]
 8108ffa:	69ba      	ldr	r2, [r7, #24]
 8108ffc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8108ffe:	683b      	ldr	r3, [r7, #0]
 8109000:	685b      	ldr	r3, [r3, #4]
 8109002:	f003 0303 	and.w	r3, r3, #3
 8109006:	2b02      	cmp	r3, #2
 8109008:	d123      	bne.n	8109052 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810900a:	69fb      	ldr	r3, [r7, #28]
 810900c:	08da      	lsrs	r2, r3, #3
 810900e:	687b      	ldr	r3, [r7, #4]
 8109010:	3208      	adds	r2, #8
 8109012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8109016:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8109018:	69fb      	ldr	r3, [r7, #28]
 810901a:	f003 0307 	and.w	r3, r3, #7
 810901e:	009b      	lsls	r3, r3, #2
 8109020:	220f      	movs	r2, #15
 8109022:	fa02 f303 	lsl.w	r3, r2, r3
 8109026:	43db      	mvns	r3, r3
 8109028:	69ba      	ldr	r2, [r7, #24]
 810902a:	4013      	ands	r3, r2
 810902c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810902e:	683b      	ldr	r3, [r7, #0]
 8109030:	691a      	ldr	r2, [r3, #16]
 8109032:	69fb      	ldr	r3, [r7, #28]
 8109034:	f003 0307 	and.w	r3, r3, #7
 8109038:	009b      	lsls	r3, r3, #2
 810903a:	fa02 f303 	lsl.w	r3, r2, r3
 810903e:	69ba      	ldr	r2, [r7, #24]
 8109040:	4313      	orrs	r3, r2
 8109042:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8109044:	69fb      	ldr	r3, [r7, #28]
 8109046:	08da      	lsrs	r2, r3, #3
 8109048:	687b      	ldr	r3, [r7, #4]
 810904a:	3208      	adds	r2, #8
 810904c:	69b9      	ldr	r1, [r7, #24]
 810904e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8109052:	687b      	ldr	r3, [r7, #4]
 8109054:	681b      	ldr	r3, [r3, #0]
 8109056:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8109058:	69fb      	ldr	r3, [r7, #28]
 810905a:	005b      	lsls	r3, r3, #1
 810905c:	2203      	movs	r2, #3
 810905e:	fa02 f303 	lsl.w	r3, r2, r3
 8109062:	43db      	mvns	r3, r3
 8109064:	69ba      	ldr	r2, [r7, #24]
 8109066:	4013      	ands	r3, r2
 8109068:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810906a:	683b      	ldr	r3, [r7, #0]
 810906c:	685b      	ldr	r3, [r3, #4]
 810906e:	f003 0203 	and.w	r2, r3, #3
 8109072:	69fb      	ldr	r3, [r7, #28]
 8109074:	005b      	lsls	r3, r3, #1
 8109076:	fa02 f303 	lsl.w	r3, r2, r3
 810907a:	69ba      	ldr	r2, [r7, #24]
 810907c:	4313      	orrs	r3, r2
 810907e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8109080:	687b      	ldr	r3, [r7, #4]
 8109082:	69ba      	ldr	r2, [r7, #24]
 8109084:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8109086:	683b      	ldr	r3, [r7, #0]
 8109088:	685b      	ldr	r3, [r3, #4]
 810908a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 810908e:	2b00      	cmp	r3, #0
 8109090:	f000 80e0 	beq.w	8109254 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8109094:	4b2f      	ldr	r3, [pc, #188]	@ (8109154 <HAL_GPIO_Init+0x238>)
 8109096:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810909a:	4a2e      	ldr	r2, [pc, #184]	@ (8109154 <HAL_GPIO_Init+0x238>)
 810909c:	f043 0302 	orr.w	r3, r3, #2
 81090a0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81090a4:	4b2b      	ldr	r3, [pc, #172]	@ (8109154 <HAL_GPIO_Init+0x238>)
 81090a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81090aa:	f003 0302 	and.w	r3, r3, #2
 81090ae:	60fb      	str	r3, [r7, #12]
 81090b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81090b2:	4a29      	ldr	r2, [pc, #164]	@ (8109158 <HAL_GPIO_Init+0x23c>)
 81090b4:	69fb      	ldr	r3, [r7, #28]
 81090b6:	089b      	lsrs	r3, r3, #2
 81090b8:	3302      	adds	r3, #2
 81090ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81090be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81090c0:	69fb      	ldr	r3, [r7, #28]
 81090c2:	f003 0303 	and.w	r3, r3, #3
 81090c6:	009b      	lsls	r3, r3, #2
 81090c8:	220f      	movs	r2, #15
 81090ca:	fa02 f303 	lsl.w	r3, r2, r3
 81090ce:	43db      	mvns	r3, r3
 81090d0:	69ba      	ldr	r2, [r7, #24]
 81090d2:	4013      	ands	r3, r2
 81090d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81090d6:	687b      	ldr	r3, [r7, #4]
 81090d8:	4a20      	ldr	r2, [pc, #128]	@ (810915c <HAL_GPIO_Init+0x240>)
 81090da:	4293      	cmp	r3, r2
 81090dc:	d052      	beq.n	8109184 <HAL_GPIO_Init+0x268>
 81090de:	687b      	ldr	r3, [r7, #4]
 81090e0:	4a1f      	ldr	r2, [pc, #124]	@ (8109160 <HAL_GPIO_Init+0x244>)
 81090e2:	4293      	cmp	r3, r2
 81090e4:	d031      	beq.n	810914a <HAL_GPIO_Init+0x22e>
 81090e6:	687b      	ldr	r3, [r7, #4]
 81090e8:	4a1e      	ldr	r2, [pc, #120]	@ (8109164 <HAL_GPIO_Init+0x248>)
 81090ea:	4293      	cmp	r3, r2
 81090ec:	d02b      	beq.n	8109146 <HAL_GPIO_Init+0x22a>
 81090ee:	687b      	ldr	r3, [r7, #4]
 81090f0:	4a1d      	ldr	r2, [pc, #116]	@ (8109168 <HAL_GPIO_Init+0x24c>)
 81090f2:	4293      	cmp	r3, r2
 81090f4:	d025      	beq.n	8109142 <HAL_GPIO_Init+0x226>
 81090f6:	687b      	ldr	r3, [r7, #4]
 81090f8:	4a1c      	ldr	r2, [pc, #112]	@ (810916c <HAL_GPIO_Init+0x250>)
 81090fa:	4293      	cmp	r3, r2
 81090fc:	d01f      	beq.n	810913e <HAL_GPIO_Init+0x222>
 81090fe:	687b      	ldr	r3, [r7, #4]
 8109100:	4a1b      	ldr	r2, [pc, #108]	@ (8109170 <HAL_GPIO_Init+0x254>)
 8109102:	4293      	cmp	r3, r2
 8109104:	d019      	beq.n	810913a <HAL_GPIO_Init+0x21e>
 8109106:	687b      	ldr	r3, [r7, #4]
 8109108:	4a1a      	ldr	r2, [pc, #104]	@ (8109174 <HAL_GPIO_Init+0x258>)
 810910a:	4293      	cmp	r3, r2
 810910c:	d013      	beq.n	8109136 <HAL_GPIO_Init+0x21a>
 810910e:	687b      	ldr	r3, [r7, #4]
 8109110:	4a19      	ldr	r2, [pc, #100]	@ (8109178 <HAL_GPIO_Init+0x25c>)
 8109112:	4293      	cmp	r3, r2
 8109114:	d00d      	beq.n	8109132 <HAL_GPIO_Init+0x216>
 8109116:	687b      	ldr	r3, [r7, #4]
 8109118:	4a18      	ldr	r2, [pc, #96]	@ (810917c <HAL_GPIO_Init+0x260>)
 810911a:	4293      	cmp	r3, r2
 810911c:	d007      	beq.n	810912e <HAL_GPIO_Init+0x212>
 810911e:	687b      	ldr	r3, [r7, #4]
 8109120:	4a17      	ldr	r2, [pc, #92]	@ (8109180 <HAL_GPIO_Init+0x264>)
 8109122:	4293      	cmp	r3, r2
 8109124:	d101      	bne.n	810912a <HAL_GPIO_Init+0x20e>
 8109126:	2309      	movs	r3, #9
 8109128:	e02d      	b.n	8109186 <HAL_GPIO_Init+0x26a>
 810912a:	230a      	movs	r3, #10
 810912c:	e02b      	b.n	8109186 <HAL_GPIO_Init+0x26a>
 810912e:	2308      	movs	r3, #8
 8109130:	e029      	b.n	8109186 <HAL_GPIO_Init+0x26a>
 8109132:	2307      	movs	r3, #7
 8109134:	e027      	b.n	8109186 <HAL_GPIO_Init+0x26a>
 8109136:	2306      	movs	r3, #6
 8109138:	e025      	b.n	8109186 <HAL_GPIO_Init+0x26a>
 810913a:	2305      	movs	r3, #5
 810913c:	e023      	b.n	8109186 <HAL_GPIO_Init+0x26a>
 810913e:	2304      	movs	r3, #4
 8109140:	e021      	b.n	8109186 <HAL_GPIO_Init+0x26a>
 8109142:	2303      	movs	r3, #3
 8109144:	e01f      	b.n	8109186 <HAL_GPIO_Init+0x26a>
 8109146:	2302      	movs	r3, #2
 8109148:	e01d      	b.n	8109186 <HAL_GPIO_Init+0x26a>
 810914a:	2301      	movs	r3, #1
 810914c:	e01b      	b.n	8109186 <HAL_GPIO_Init+0x26a>
 810914e:	bf00      	nop
 8109150:	580000c0 	.word	0x580000c0
 8109154:	58024400 	.word	0x58024400
 8109158:	58000400 	.word	0x58000400
 810915c:	58020000 	.word	0x58020000
 8109160:	58020400 	.word	0x58020400
 8109164:	58020800 	.word	0x58020800
 8109168:	58020c00 	.word	0x58020c00
 810916c:	58021000 	.word	0x58021000
 8109170:	58021400 	.word	0x58021400
 8109174:	58021800 	.word	0x58021800
 8109178:	58021c00 	.word	0x58021c00
 810917c:	58022000 	.word	0x58022000
 8109180:	58022400 	.word	0x58022400
 8109184:	2300      	movs	r3, #0
 8109186:	69fa      	ldr	r2, [r7, #28]
 8109188:	f002 0203 	and.w	r2, r2, #3
 810918c:	0092      	lsls	r2, r2, #2
 810918e:	4093      	lsls	r3, r2
 8109190:	69ba      	ldr	r2, [r7, #24]
 8109192:	4313      	orrs	r3, r2
 8109194:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8109196:	4938      	ldr	r1, [pc, #224]	@ (8109278 <HAL_GPIO_Init+0x35c>)
 8109198:	69fb      	ldr	r3, [r7, #28]
 810919a:	089b      	lsrs	r3, r3, #2
 810919c:	3302      	adds	r3, #2
 810919e:	69ba      	ldr	r2, [r7, #24]
 81091a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81091a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81091a8:	681b      	ldr	r3, [r3, #0]
 81091aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81091ac:	693b      	ldr	r3, [r7, #16]
 81091ae:	43db      	mvns	r3, r3
 81091b0:	69ba      	ldr	r2, [r7, #24]
 81091b2:	4013      	ands	r3, r2
 81091b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81091b6:	683b      	ldr	r3, [r7, #0]
 81091b8:	685b      	ldr	r3, [r3, #4]
 81091ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 81091be:	2b00      	cmp	r3, #0
 81091c0:	d003      	beq.n	81091ca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81091c2:	69ba      	ldr	r2, [r7, #24]
 81091c4:	693b      	ldr	r3, [r7, #16]
 81091c6:	4313      	orrs	r3, r2
 81091c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81091ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81091ce:	69bb      	ldr	r3, [r7, #24]
 81091d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81091d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81091d6:	685b      	ldr	r3, [r3, #4]
 81091d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81091da:	693b      	ldr	r3, [r7, #16]
 81091dc:	43db      	mvns	r3, r3
 81091de:	69ba      	ldr	r2, [r7, #24]
 81091e0:	4013      	ands	r3, r2
 81091e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 81091e4:	683b      	ldr	r3, [r7, #0]
 81091e6:	685b      	ldr	r3, [r3, #4]
 81091e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81091ec:	2b00      	cmp	r3, #0
 81091ee:	d003      	beq.n	81091f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 81091f0:	69ba      	ldr	r2, [r7, #24]
 81091f2:	693b      	ldr	r3, [r7, #16]
 81091f4:	4313      	orrs	r3, r2
 81091f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81091f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81091fc:	69bb      	ldr	r3, [r7, #24]
 81091fe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8109200:	697b      	ldr	r3, [r7, #20]
 8109202:	685b      	ldr	r3, [r3, #4]
 8109204:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8109206:	693b      	ldr	r3, [r7, #16]
 8109208:	43db      	mvns	r3, r3
 810920a:	69ba      	ldr	r2, [r7, #24]
 810920c:	4013      	ands	r3, r2
 810920e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8109210:	683b      	ldr	r3, [r7, #0]
 8109212:	685b      	ldr	r3, [r3, #4]
 8109214:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8109218:	2b00      	cmp	r3, #0
 810921a:	d003      	beq.n	8109224 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 810921c:	69ba      	ldr	r2, [r7, #24]
 810921e:	693b      	ldr	r3, [r7, #16]
 8109220:	4313      	orrs	r3, r2
 8109222:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8109224:	697b      	ldr	r3, [r7, #20]
 8109226:	69ba      	ldr	r2, [r7, #24]
 8109228:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810922a:	697b      	ldr	r3, [r7, #20]
 810922c:	681b      	ldr	r3, [r3, #0]
 810922e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8109230:	693b      	ldr	r3, [r7, #16]
 8109232:	43db      	mvns	r3, r3
 8109234:	69ba      	ldr	r2, [r7, #24]
 8109236:	4013      	ands	r3, r2
 8109238:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810923a:	683b      	ldr	r3, [r7, #0]
 810923c:	685b      	ldr	r3, [r3, #4]
 810923e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8109242:	2b00      	cmp	r3, #0
 8109244:	d003      	beq.n	810924e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8109246:	69ba      	ldr	r2, [r7, #24]
 8109248:	693b      	ldr	r3, [r7, #16]
 810924a:	4313      	orrs	r3, r2
 810924c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810924e:	697b      	ldr	r3, [r7, #20]
 8109250:	69ba      	ldr	r2, [r7, #24]
 8109252:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8109254:	69fb      	ldr	r3, [r7, #28]
 8109256:	3301      	adds	r3, #1
 8109258:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810925a:	683b      	ldr	r3, [r7, #0]
 810925c:	681a      	ldr	r2, [r3, #0]
 810925e:	69fb      	ldr	r3, [r7, #28]
 8109260:	fa22 f303 	lsr.w	r3, r2, r3
 8109264:	2b00      	cmp	r3, #0
 8109266:	f47f ae63 	bne.w	8108f30 <HAL_GPIO_Init+0x14>
  }
}
 810926a:	bf00      	nop
 810926c:	bf00      	nop
 810926e:	3724      	adds	r7, #36	@ 0x24
 8109270:	46bd      	mov	sp, r7
 8109272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109276:	4770      	bx	lr
 8109278:	58000400 	.word	0x58000400

0810927c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 810927c:	b480      	push	{r7}
 810927e:	b087      	sub	sp, #28
 8109280:	af00      	add	r7, sp, #0
 8109282:	6078      	str	r0, [r7, #4]
 8109284:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8109286:	2300      	movs	r3, #0
 8109288:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t tmp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810928a:	4b75      	ldr	r3, [pc, #468]	@ (8109460 <HAL_GPIO_DeInit+0x1e4>)
 810928c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 810928e:	e0d9      	b.n	8109444 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8109290:	2201      	movs	r2, #1
 8109292:	697b      	ldr	r3, [r7, #20]
 8109294:	fa02 f303 	lsl.w	r3, r2, r3
 8109298:	683a      	ldr	r2, [r7, #0]
 810929a:	4013      	ands	r3, r2
 810929c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 810929e:	68fb      	ldr	r3, [r7, #12]
 81092a0:	2b00      	cmp	r3, #0
 81092a2:	f000 80cc 	beq.w	810943e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 81092a6:	4a6f      	ldr	r2, [pc, #444]	@ (8109464 <HAL_GPIO_DeInit+0x1e8>)
 81092a8:	697b      	ldr	r3, [r7, #20]
 81092aa:	089b      	lsrs	r3, r3, #2
 81092ac:	3302      	adds	r3, #2
 81092ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81092b2:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 81092b4:	697b      	ldr	r3, [r7, #20]
 81092b6:	f003 0303 	and.w	r3, r3, #3
 81092ba:	009b      	lsls	r3, r3, #2
 81092bc:	220f      	movs	r2, #15
 81092be:	fa02 f303 	lsl.w	r3, r2, r3
 81092c2:	68ba      	ldr	r2, [r7, #8]
 81092c4:	4013      	ands	r3, r2
 81092c6:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 81092c8:	687b      	ldr	r3, [r7, #4]
 81092ca:	4a67      	ldr	r2, [pc, #412]	@ (8109468 <HAL_GPIO_DeInit+0x1ec>)
 81092cc:	4293      	cmp	r3, r2
 81092ce:	d037      	beq.n	8109340 <HAL_GPIO_DeInit+0xc4>
 81092d0:	687b      	ldr	r3, [r7, #4]
 81092d2:	4a66      	ldr	r2, [pc, #408]	@ (810946c <HAL_GPIO_DeInit+0x1f0>)
 81092d4:	4293      	cmp	r3, r2
 81092d6:	d031      	beq.n	810933c <HAL_GPIO_DeInit+0xc0>
 81092d8:	687b      	ldr	r3, [r7, #4]
 81092da:	4a65      	ldr	r2, [pc, #404]	@ (8109470 <HAL_GPIO_DeInit+0x1f4>)
 81092dc:	4293      	cmp	r3, r2
 81092de:	d02b      	beq.n	8109338 <HAL_GPIO_DeInit+0xbc>
 81092e0:	687b      	ldr	r3, [r7, #4]
 81092e2:	4a64      	ldr	r2, [pc, #400]	@ (8109474 <HAL_GPIO_DeInit+0x1f8>)
 81092e4:	4293      	cmp	r3, r2
 81092e6:	d025      	beq.n	8109334 <HAL_GPIO_DeInit+0xb8>
 81092e8:	687b      	ldr	r3, [r7, #4]
 81092ea:	4a63      	ldr	r2, [pc, #396]	@ (8109478 <HAL_GPIO_DeInit+0x1fc>)
 81092ec:	4293      	cmp	r3, r2
 81092ee:	d01f      	beq.n	8109330 <HAL_GPIO_DeInit+0xb4>
 81092f0:	687b      	ldr	r3, [r7, #4]
 81092f2:	4a62      	ldr	r2, [pc, #392]	@ (810947c <HAL_GPIO_DeInit+0x200>)
 81092f4:	4293      	cmp	r3, r2
 81092f6:	d019      	beq.n	810932c <HAL_GPIO_DeInit+0xb0>
 81092f8:	687b      	ldr	r3, [r7, #4]
 81092fa:	4a61      	ldr	r2, [pc, #388]	@ (8109480 <HAL_GPIO_DeInit+0x204>)
 81092fc:	4293      	cmp	r3, r2
 81092fe:	d013      	beq.n	8109328 <HAL_GPIO_DeInit+0xac>
 8109300:	687b      	ldr	r3, [r7, #4]
 8109302:	4a60      	ldr	r2, [pc, #384]	@ (8109484 <HAL_GPIO_DeInit+0x208>)
 8109304:	4293      	cmp	r3, r2
 8109306:	d00d      	beq.n	8109324 <HAL_GPIO_DeInit+0xa8>
 8109308:	687b      	ldr	r3, [r7, #4]
 810930a:	4a5f      	ldr	r2, [pc, #380]	@ (8109488 <HAL_GPIO_DeInit+0x20c>)
 810930c:	4293      	cmp	r3, r2
 810930e:	d007      	beq.n	8109320 <HAL_GPIO_DeInit+0xa4>
 8109310:	687b      	ldr	r3, [r7, #4]
 8109312:	4a5e      	ldr	r2, [pc, #376]	@ (810948c <HAL_GPIO_DeInit+0x210>)
 8109314:	4293      	cmp	r3, r2
 8109316:	d101      	bne.n	810931c <HAL_GPIO_DeInit+0xa0>
 8109318:	2309      	movs	r3, #9
 810931a:	e012      	b.n	8109342 <HAL_GPIO_DeInit+0xc6>
 810931c:	230a      	movs	r3, #10
 810931e:	e010      	b.n	8109342 <HAL_GPIO_DeInit+0xc6>
 8109320:	2308      	movs	r3, #8
 8109322:	e00e      	b.n	8109342 <HAL_GPIO_DeInit+0xc6>
 8109324:	2307      	movs	r3, #7
 8109326:	e00c      	b.n	8109342 <HAL_GPIO_DeInit+0xc6>
 8109328:	2306      	movs	r3, #6
 810932a:	e00a      	b.n	8109342 <HAL_GPIO_DeInit+0xc6>
 810932c:	2305      	movs	r3, #5
 810932e:	e008      	b.n	8109342 <HAL_GPIO_DeInit+0xc6>
 8109330:	2304      	movs	r3, #4
 8109332:	e006      	b.n	8109342 <HAL_GPIO_DeInit+0xc6>
 8109334:	2303      	movs	r3, #3
 8109336:	e004      	b.n	8109342 <HAL_GPIO_DeInit+0xc6>
 8109338:	2302      	movs	r3, #2
 810933a:	e002      	b.n	8109342 <HAL_GPIO_DeInit+0xc6>
 810933c:	2301      	movs	r3, #1
 810933e:	e000      	b.n	8109342 <HAL_GPIO_DeInit+0xc6>
 8109340:	2300      	movs	r3, #0
 8109342:	697a      	ldr	r2, [r7, #20]
 8109344:	f002 0203 	and.w	r2, r2, #3
 8109348:	0092      	lsls	r2, r2, #2
 810934a:	4093      	lsls	r3, r2
 810934c:	68ba      	ldr	r2, [r7, #8]
 810934e:	429a      	cmp	r2, r3
 8109350:	d136      	bne.n	81093c0 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8109352:	693b      	ldr	r3, [r7, #16]
 8109354:	681a      	ldr	r2, [r3, #0]
 8109356:	68fb      	ldr	r3, [r7, #12]
 8109358:	43db      	mvns	r3, r3
 810935a:	401a      	ands	r2, r3
 810935c:	693b      	ldr	r3, [r7, #16]
 810935e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8109360:	693b      	ldr	r3, [r7, #16]
 8109362:	685a      	ldr	r2, [r3, #4]
 8109364:	68fb      	ldr	r3, [r7, #12]
 8109366:	43db      	mvns	r3, r3
 8109368:	401a      	ands	r2, r3
 810936a:	693b      	ldr	r3, [r7, #16]
 810936c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 810936e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8109372:	685a      	ldr	r2, [r3, #4]
 8109374:	68fb      	ldr	r3, [r7, #12]
 8109376:	43db      	mvns	r3, r3
 8109378:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 810937c:	4013      	ands	r3, r2
 810937e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8109380:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8109384:	681a      	ldr	r2, [r3, #0]
 8109386:	68fb      	ldr	r3, [r7, #12]
 8109388:	43db      	mvns	r3, r3
 810938a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 810938e:	4013      	ands	r3, r2
 8109390:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8109392:	697b      	ldr	r3, [r7, #20]
 8109394:	f003 0303 	and.w	r3, r3, #3
 8109398:	009b      	lsls	r3, r3, #2
 810939a:	220f      	movs	r2, #15
 810939c:	fa02 f303 	lsl.w	r3, r2, r3
 81093a0:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 81093a2:	4a30      	ldr	r2, [pc, #192]	@ (8109464 <HAL_GPIO_DeInit+0x1e8>)
 81093a4:	697b      	ldr	r3, [r7, #20]
 81093a6:	089b      	lsrs	r3, r3, #2
 81093a8:	3302      	adds	r3, #2
 81093aa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 81093ae:	68bb      	ldr	r3, [r7, #8]
 81093b0:	43da      	mvns	r2, r3
 81093b2:	482c      	ldr	r0, [pc, #176]	@ (8109464 <HAL_GPIO_DeInit+0x1e8>)
 81093b4:	697b      	ldr	r3, [r7, #20]
 81093b6:	089b      	lsrs	r3, r3, #2
 81093b8:	400a      	ands	r2, r1
 81093ba:	3302      	adds	r3, #2
 81093bc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 81093c0:	687b      	ldr	r3, [r7, #4]
 81093c2:	681a      	ldr	r2, [r3, #0]
 81093c4:	697b      	ldr	r3, [r7, #20]
 81093c6:	005b      	lsls	r3, r3, #1
 81093c8:	2103      	movs	r1, #3
 81093ca:	fa01 f303 	lsl.w	r3, r1, r3
 81093ce:	431a      	orrs	r2, r3
 81093d0:	687b      	ldr	r3, [r7, #4]
 81093d2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 81093d4:	697b      	ldr	r3, [r7, #20]
 81093d6:	08da      	lsrs	r2, r3, #3
 81093d8:	687b      	ldr	r3, [r7, #4]
 81093da:	3208      	adds	r2, #8
 81093dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 81093e0:	697b      	ldr	r3, [r7, #20]
 81093e2:	f003 0307 	and.w	r3, r3, #7
 81093e6:	009b      	lsls	r3, r3, #2
 81093e8:	220f      	movs	r2, #15
 81093ea:	fa02 f303 	lsl.w	r3, r2, r3
 81093ee:	43db      	mvns	r3, r3
 81093f0:	697a      	ldr	r2, [r7, #20]
 81093f2:	08d2      	lsrs	r2, r2, #3
 81093f4:	4019      	ands	r1, r3
 81093f6:	687b      	ldr	r3, [r7, #4]
 81093f8:	3208      	adds	r2, #8
 81093fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81093fe:	687b      	ldr	r3, [r7, #4]
 8109400:	68da      	ldr	r2, [r3, #12]
 8109402:	697b      	ldr	r3, [r7, #20]
 8109404:	005b      	lsls	r3, r3, #1
 8109406:	2103      	movs	r1, #3
 8109408:	fa01 f303 	lsl.w	r3, r1, r3
 810940c:	43db      	mvns	r3, r3
 810940e:	401a      	ands	r2, r3
 8109410:	687b      	ldr	r3, [r7, #4]
 8109412:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8109414:	687b      	ldr	r3, [r7, #4]
 8109416:	685a      	ldr	r2, [r3, #4]
 8109418:	2101      	movs	r1, #1
 810941a:	697b      	ldr	r3, [r7, #20]
 810941c:	fa01 f303 	lsl.w	r3, r1, r3
 8109420:	43db      	mvns	r3, r3
 8109422:	401a      	ands	r2, r3
 8109424:	687b      	ldr	r3, [r7, #4]
 8109426:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8109428:	687b      	ldr	r3, [r7, #4]
 810942a:	689a      	ldr	r2, [r3, #8]
 810942c:	697b      	ldr	r3, [r7, #20]
 810942e:	005b      	lsls	r3, r3, #1
 8109430:	2103      	movs	r1, #3
 8109432:	fa01 f303 	lsl.w	r3, r1, r3
 8109436:	43db      	mvns	r3, r3
 8109438:	401a      	ands	r2, r3
 810943a:	687b      	ldr	r3, [r7, #4]
 810943c:	609a      	str	r2, [r3, #8]
    }

    position++;
 810943e:	697b      	ldr	r3, [r7, #20]
 8109440:	3301      	adds	r3, #1
 8109442:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8109444:	683a      	ldr	r2, [r7, #0]
 8109446:	697b      	ldr	r3, [r7, #20]
 8109448:	fa22 f303 	lsr.w	r3, r2, r3
 810944c:	2b00      	cmp	r3, #0
 810944e:	f47f af1f 	bne.w	8109290 <HAL_GPIO_DeInit+0x14>
  }
}
 8109452:	bf00      	nop
 8109454:	bf00      	nop
 8109456:	371c      	adds	r7, #28
 8109458:	46bd      	mov	sp, r7
 810945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810945e:	4770      	bx	lr
 8109460:	580000c0 	.word	0x580000c0
 8109464:	58000400 	.word	0x58000400
 8109468:	58020000 	.word	0x58020000
 810946c:	58020400 	.word	0x58020400
 8109470:	58020800 	.word	0x58020800
 8109474:	58020c00 	.word	0x58020c00
 8109478:	58021000 	.word	0x58021000
 810947c:	58021400 	.word	0x58021400
 8109480:	58021800 	.word	0x58021800
 8109484:	58021c00 	.word	0x58021c00
 8109488:	58022000 	.word	0x58022000
 810948c:	58022400 	.word	0x58022400

08109490 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 8109490:	b480      	push	{r7}
 8109492:	b083      	sub	sp, #12
 8109494:	af00      	add	r7, sp, #0
 8109496:	6078      	str	r0, [r7, #4]
 8109498:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 810949a:	490e      	ldr	r1, [pc, #56]	@ (81094d4 <HAL_HSEM_Take+0x44>)
 810949c:	683b      	ldr	r3, [r7, #0]
 810949e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 81094a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81094a6:	687a      	ldr	r2, [r7, #4]
 81094a8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 81094ac:	4a09      	ldr	r2, [pc, #36]	@ (81094d4 <HAL_HSEM_Take+0x44>)
 81094ae:	687b      	ldr	r3, [r7, #4]
 81094b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 81094b4:	683b      	ldr	r3, [r7, #0]
 81094b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 81094ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81094be:	429a      	cmp	r2, r3
 81094c0:	d101      	bne.n	81094c6 <HAL_HSEM_Take+0x36>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 81094c2:	2300      	movs	r3, #0
 81094c4:	e000      	b.n	81094c8 <HAL_HSEM_Take+0x38>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 81094c6:	2301      	movs	r3, #1
}
 81094c8:	4618      	mov	r0, r3
 81094ca:	370c      	adds	r7, #12
 81094cc:	46bd      	mov	sp, r7
 81094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81094d2:	4770      	bx	lr
 81094d4:	58026400 	.word	0x58026400

081094d8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 81094d8:	b480      	push	{r7}
 81094da:	b083      	sub	sp, #12
 81094dc:	af00      	add	r7, sp, #0
 81094de:	6078      	str	r0, [r7, #4]
 81094e0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 81094e2:	4906      	ldr	r1, [pc, #24]	@ (81094fc <HAL_HSEM_Release+0x24>)
 81094e4:	683b      	ldr	r3, [r7, #0]
 81094e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 81094ea:	687b      	ldr	r3, [r7, #4]
 81094ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 81094f0:	bf00      	nop
 81094f2:	370c      	adds	r7, #12
 81094f4:	46bd      	mov	sp, r7
 81094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81094fa:	4770      	bx	lr
 81094fc:	58026400 	.word	0x58026400

08109500 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8109500:	b480      	push	{r7}
 8109502:	b083      	sub	sp, #12
 8109504:	af00      	add	r7, sp, #0
 8109506:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8109508:	4b05      	ldr	r3, [pc, #20]	@ (8109520 <HAL_HSEM_ActivateNotification+0x20>)
 810950a:	681a      	ldr	r2, [r3, #0]
 810950c:	4904      	ldr	r1, [pc, #16]	@ (8109520 <HAL_HSEM_ActivateNotification+0x20>)
 810950e:	687b      	ldr	r3, [r7, #4]
 8109510:	4313      	orrs	r3, r2
 8109512:	600b      	str	r3, [r1, #0]
#endif
}
 8109514:	bf00      	nop
 8109516:	370c      	adds	r7, #12
 8109518:	46bd      	mov	sp, r7
 810951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810951e:	4770      	bx	lr
 8109520:	58026510 	.word	0x58026510

08109524 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8109524:	b580      	push	{r7, lr}
 8109526:	b082      	sub	sp, #8
 8109528:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 810952a:	4b0a      	ldr	r3, [pc, #40]	@ (8109554 <HAL_HSEM_IRQHandler+0x30>)
 810952c:	68db      	ldr	r3, [r3, #12]
 810952e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8109530:	4b08      	ldr	r3, [pc, #32]	@ (8109554 <HAL_HSEM_IRQHandler+0x30>)
 8109532:	681a      	ldr	r2, [r3, #0]
 8109534:	687b      	ldr	r3, [r7, #4]
 8109536:	43db      	mvns	r3, r3
 8109538:	4906      	ldr	r1, [pc, #24]	@ (8109554 <HAL_HSEM_IRQHandler+0x30>)
 810953a:	4013      	ands	r3, r2
 810953c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 810953e:	4a05      	ldr	r2, [pc, #20]	@ (8109554 <HAL_HSEM_IRQHandler+0x30>)
 8109540:	687b      	ldr	r3, [r7, #4]
 8109542:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8109544:	6878      	ldr	r0, [r7, #4]
 8109546:	f7f6 ff23 	bl	8100390 <HAL_HSEM_FreeCallback>
}
 810954a:	bf00      	nop
 810954c:	3708      	adds	r7, #8
 810954e:	46bd      	mov	sp, r7
 8109550:	bd80      	pop	{r7, pc}
 8109552:	bf00      	nop
 8109554:	58026510 	.word	0x58026510

08109558 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8109558:	b580      	push	{r7, lr}
 810955a:	b082      	sub	sp, #8
 810955c:	af00      	add	r7, sp, #0
 810955e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8109560:	687b      	ldr	r3, [r7, #4]
 8109562:	2b00      	cmp	r3, #0
 8109564:	d101      	bne.n	810956a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8109566:	2301      	movs	r3, #1
 8109568:	e08d      	b.n	8109686 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 810956a:	687b      	ldr	r3, [r7, #4]
 810956c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8109570:	b2db      	uxtb	r3, r3
 8109572:	2b00      	cmp	r3, #0
 8109574:	d106      	bne.n	8109584 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8109576:	687b      	ldr	r3, [r7, #4]
 8109578:	2200      	movs	r2, #0
 810957a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 810957e:	6878      	ldr	r0, [r7, #4]
 8109580:	f7f7 fa14 	bl	81009ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8109584:	687b      	ldr	r3, [r7, #4]
 8109586:	2224      	movs	r2, #36	@ 0x24
 8109588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 810958c:	687b      	ldr	r3, [r7, #4]
 810958e:	681b      	ldr	r3, [r3, #0]
 8109590:	681a      	ldr	r2, [r3, #0]
 8109592:	687b      	ldr	r3, [r7, #4]
 8109594:	681b      	ldr	r3, [r3, #0]
 8109596:	f022 0201 	bic.w	r2, r2, #1
 810959a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 810959c:	687b      	ldr	r3, [r7, #4]
 810959e:	685a      	ldr	r2, [r3, #4]
 81095a0:	687b      	ldr	r3, [r7, #4]
 81095a2:	681b      	ldr	r3, [r3, #0]
 81095a4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 81095a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 81095aa:	687b      	ldr	r3, [r7, #4]
 81095ac:	681b      	ldr	r3, [r3, #0]
 81095ae:	689a      	ldr	r2, [r3, #8]
 81095b0:	687b      	ldr	r3, [r7, #4]
 81095b2:	681b      	ldr	r3, [r3, #0]
 81095b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 81095b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 81095ba:	687b      	ldr	r3, [r7, #4]
 81095bc:	68db      	ldr	r3, [r3, #12]
 81095be:	2b01      	cmp	r3, #1
 81095c0:	d107      	bne.n	81095d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 81095c2:	687b      	ldr	r3, [r7, #4]
 81095c4:	689a      	ldr	r2, [r3, #8]
 81095c6:	687b      	ldr	r3, [r7, #4]
 81095c8:	681b      	ldr	r3, [r3, #0]
 81095ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 81095ce:	609a      	str	r2, [r3, #8]
 81095d0:	e006      	b.n	81095e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 81095d2:	687b      	ldr	r3, [r7, #4]
 81095d4:	689a      	ldr	r2, [r3, #8]
 81095d6:	687b      	ldr	r3, [r7, #4]
 81095d8:	681b      	ldr	r3, [r3, #0]
 81095da:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 81095de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 81095e0:	687b      	ldr	r3, [r7, #4]
 81095e2:	68db      	ldr	r3, [r3, #12]
 81095e4:	2b02      	cmp	r3, #2
 81095e6:	d108      	bne.n	81095fa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 81095e8:	687b      	ldr	r3, [r7, #4]
 81095ea:	681b      	ldr	r3, [r3, #0]
 81095ec:	685a      	ldr	r2, [r3, #4]
 81095ee:	687b      	ldr	r3, [r7, #4]
 81095f0:	681b      	ldr	r3, [r3, #0]
 81095f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 81095f6:	605a      	str	r2, [r3, #4]
 81095f8:	e007      	b.n	810960a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 81095fa:	687b      	ldr	r3, [r7, #4]
 81095fc:	681b      	ldr	r3, [r3, #0]
 81095fe:	685a      	ldr	r2, [r3, #4]
 8109600:	687b      	ldr	r3, [r7, #4]
 8109602:	681b      	ldr	r3, [r3, #0]
 8109604:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8109608:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 810960a:	687b      	ldr	r3, [r7, #4]
 810960c:	681b      	ldr	r3, [r3, #0]
 810960e:	685b      	ldr	r3, [r3, #4]
 8109610:	687a      	ldr	r2, [r7, #4]
 8109612:	6812      	ldr	r2, [r2, #0]
 8109614:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8109618:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 810961c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 810961e:	687b      	ldr	r3, [r7, #4]
 8109620:	681b      	ldr	r3, [r3, #0]
 8109622:	68da      	ldr	r2, [r3, #12]
 8109624:	687b      	ldr	r3, [r7, #4]
 8109626:	681b      	ldr	r3, [r3, #0]
 8109628:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 810962c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 810962e:	687b      	ldr	r3, [r7, #4]
 8109630:	691a      	ldr	r2, [r3, #16]
 8109632:	687b      	ldr	r3, [r7, #4]
 8109634:	695b      	ldr	r3, [r3, #20]
 8109636:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 810963a:	687b      	ldr	r3, [r7, #4]
 810963c:	699b      	ldr	r3, [r3, #24]
 810963e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8109640:	687b      	ldr	r3, [r7, #4]
 8109642:	681b      	ldr	r3, [r3, #0]
 8109644:	430a      	orrs	r2, r1
 8109646:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8109648:	687b      	ldr	r3, [r7, #4]
 810964a:	69d9      	ldr	r1, [r3, #28]
 810964c:	687b      	ldr	r3, [r7, #4]
 810964e:	6a1a      	ldr	r2, [r3, #32]
 8109650:	687b      	ldr	r3, [r7, #4]
 8109652:	681b      	ldr	r3, [r3, #0]
 8109654:	430a      	orrs	r2, r1
 8109656:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8109658:	687b      	ldr	r3, [r7, #4]
 810965a:	681b      	ldr	r3, [r3, #0]
 810965c:	681a      	ldr	r2, [r3, #0]
 810965e:	687b      	ldr	r3, [r7, #4]
 8109660:	681b      	ldr	r3, [r3, #0]
 8109662:	f042 0201 	orr.w	r2, r2, #1
 8109666:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8109668:	687b      	ldr	r3, [r7, #4]
 810966a:	2200      	movs	r2, #0
 810966c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 810966e:	687b      	ldr	r3, [r7, #4]
 8109670:	2220      	movs	r2, #32
 8109672:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8109676:	687b      	ldr	r3, [r7, #4]
 8109678:	2200      	movs	r2, #0
 810967a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 810967c:	687b      	ldr	r3, [r7, #4]
 810967e:	2200      	movs	r2, #0
 8109680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8109684:	2300      	movs	r3, #0
}
 8109686:	4618      	mov	r0, r3
 8109688:	3708      	adds	r7, #8
 810968a:	46bd      	mov	sp, r7
 810968c:	bd80      	pop	{r7, pc}

0810968e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 810968e:	b580      	push	{r7, lr}
 8109690:	b082      	sub	sp, #8
 8109692:	af00      	add	r7, sp, #0
 8109694:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8109696:	687b      	ldr	r3, [r7, #4]
 8109698:	2b00      	cmp	r3, #0
 810969a:	d101      	bne.n	81096a0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 810969c:	2301      	movs	r3, #1
 810969e:	e021      	b.n	81096e4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 81096a0:	687b      	ldr	r3, [r7, #4]
 81096a2:	2224      	movs	r2, #36	@ 0x24
 81096a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 81096a8:	687b      	ldr	r3, [r7, #4]
 81096aa:	681b      	ldr	r3, [r3, #0]
 81096ac:	681a      	ldr	r2, [r3, #0]
 81096ae:	687b      	ldr	r3, [r7, #4]
 81096b0:	681b      	ldr	r3, [r3, #0]
 81096b2:	f022 0201 	bic.w	r2, r2, #1
 81096b6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 81096b8:	6878      	ldr	r0, [r7, #4]
 81096ba:	f7f7 f9e1 	bl	8100a80 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81096be:	687b      	ldr	r3, [r7, #4]
 81096c0:	2200      	movs	r2, #0
 81096c2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 81096c4:	687b      	ldr	r3, [r7, #4]
 81096c6:	2200      	movs	r2, #0
 81096c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 81096cc:	687b      	ldr	r3, [r7, #4]
 81096ce:	2200      	movs	r2, #0
 81096d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 81096d2:	687b      	ldr	r3, [r7, #4]
 81096d4:	2200      	movs	r2, #0
 81096d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 81096da:	687b      	ldr	r3, [r7, #4]
 81096dc:	2200      	movs	r2, #0
 81096de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 81096e2:	2300      	movs	r3, #0
}
 81096e4:	4618      	mov	r0, r3
 81096e6:	3708      	adds	r7, #8
 81096e8:	46bd      	mov	sp, r7
 81096ea:	bd80      	pop	{r7, pc}

081096ec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81096ec:	b580      	push	{r7, lr}
 81096ee:	b088      	sub	sp, #32
 81096f0:	af02      	add	r7, sp, #8
 81096f2:	60f8      	str	r0, [r7, #12]
 81096f4:	4608      	mov	r0, r1
 81096f6:	4611      	mov	r1, r2
 81096f8:	461a      	mov	r2, r3
 81096fa:	4603      	mov	r3, r0
 81096fc:	817b      	strh	r3, [r7, #10]
 81096fe:	460b      	mov	r3, r1
 8109700:	813b      	strh	r3, [r7, #8]
 8109702:	4613      	mov	r3, r2
 8109704:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8109706:	68fb      	ldr	r3, [r7, #12]
 8109708:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810970c:	b2db      	uxtb	r3, r3
 810970e:	2b20      	cmp	r3, #32
 8109710:	f040 80fd 	bne.w	810990e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8109714:	6a3b      	ldr	r3, [r7, #32]
 8109716:	2b00      	cmp	r3, #0
 8109718:	d002      	beq.n	8109720 <HAL_I2C_Mem_Read+0x34>
 810971a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 810971c:	2b00      	cmp	r3, #0
 810971e:	d105      	bne.n	810972c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8109720:	68fb      	ldr	r3, [r7, #12]
 8109722:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8109726:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8109728:	2301      	movs	r3, #1
 810972a:	e0f1      	b.n	8109910 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 810972c:	68fb      	ldr	r3, [r7, #12]
 810972e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8109732:	2b01      	cmp	r3, #1
 8109734:	d101      	bne.n	810973a <HAL_I2C_Mem_Read+0x4e>
 8109736:	2302      	movs	r3, #2
 8109738:	e0ea      	b.n	8109910 <HAL_I2C_Mem_Read+0x224>
 810973a:	68fb      	ldr	r3, [r7, #12]
 810973c:	2201      	movs	r2, #1
 810973e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8109742:	f7fd fd59 	bl	81071f8 <HAL_GetTick>
 8109746:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8109748:	697b      	ldr	r3, [r7, #20]
 810974a:	9300      	str	r3, [sp, #0]
 810974c:	2319      	movs	r3, #25
 810974e:	2201      	movs	r2, #1
 8109750:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8109754:	68f8      	ldr	r0, [r7, #12]
 8109756:	f000 f967 	bl	8109a28 <I2C_WaitOnFlagUntilTimeout>
 810975a:	4603      	mov	r3, r0
 810975c:	2b00      	cmp	r3, #0
 810975e:	d001      	beq.n	8109764 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8109760:	2301      	movs	r3, #1
 8109762:	e0d5      	b.n	8109910 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8109764:	68fb      	ldr	r3, [r7, #12]
 8109766:	2222      	movs	r2, #34	@ 0x22
 8109768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 810976c:	68fb      	ldr	r3, [r7, #12]
 810976e:	2240      	movs	r2, #64	@ 0x40
 8109770:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8109774:	68fb      	ldr	r3, [r7, #12]
 8109776:	2200      	movs	r2, #0
 8109778:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 810977a:	68fb      	ldr	r3, [r7, #12]
 810977c:	6a3a      	ldr	r2, [r7, #32]
 810977e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8109780:	68fb      	ldr	r3, [r7, #12]
 8109782:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8109784:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8109786:	68fb      	ldr	r3, [r7, #12]
 8109788:	2200      	movs	r2, #0
 810978a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 810978c:	88f8      	ldrh	r0, [r7, #6]
 810978e:	893a      	ldrh	r2, [r7, #8]
 8109790:	8979      	ldrh	r1, [r7, #10]
 8109792:	697b      	ldr	r3, [r7, #20]
 8109794:	9301      	str	r3, [sp, #4]
 8109796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109798:	9300      	str	r3, [sp, #0]
 810979a:	4603      	mov	r3, r0
 810979c:	68f8      	ldr	r0, [r7, #12]
 810979e:	f000 f8cb 	bl	8109938 <I2C_RequestMemoryRead>
 81097a2:	4603      	mov	r3, r0
 81097a4:	2b00      	cmp	r3, #0
 81097a6:	d005      	beq.n	81097b4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81097a8:	68fb      	ldr	r3, [r7, #12]
 81097aa:	2200      	movs	r2, #0
 81097ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 81097b0:	2301      	movs	r3, #1
 81097b2:	e0ad      	b.n	8109910 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81097b4:	68fb      	ldr	r3, [r7, #12]
 81097b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81097b8:	b29b      	uxth	r3, r3
 81097ba:	2bff      	cmp	r3, #255	@ 0xff
 81097bc:	d90e      	bls.n	81097dc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81097be:	68fb      	ldr	r3, [r7, #12]
 81097c0:	22ff      	movs	r2, #255	@ 0xff
 81097c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 81097c4:	68fb      	ldr	r3, [r7, #12]
 81097c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81097c8:	b2da      	uxtb	r2, r3
 81097ca:	8979      	ldrh	r1, [r7, #10]
 81097cc:	4b52      	ldr	r3, [pc, #328]	@ (8109918 <HAL_I2C_Mem_Read+0x22c>)
 81097ce:	9300      	str	r3, [sp, #0]
 81097d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 81097d4:	68f8      	ldr	r0, [r7, #12]
 81097d6:	f000 faeb 	bl	8109db0 <I2C_TransferConfig>
 81097da:	e00f      	b.n	81097fc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81097dc:	68fb      	ldr	r3, [r7, #12]
 81097de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81097e0:	b29a      	uxth	r2, r3
 81097e2:	68fb      	ldr	r3, [r7, #12]
 81097e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81097e6:	68fb      	ldr	r3, [r7, #12]
 81097e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81097ea:	b2da      	uxtb	r2, r3
 81097ec:	8979      	ldrh	r1, [r7, #10]
 81097ee:	4b4a      	ldr	r3, [pc, #296]	@ (8109918 <HAL_I2C_Mem_Read+0x22c>)
 81097f0:	9300      	str	r3, [sp, #0]
 81097f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81097f6:	68f8      	ldr	r0, [r7, #12]
 81097f8:	f000 fada 	bl	8109db0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 81097fc:	697b      	ldr	r3, [r7, #20]
 81097fe:	9300      	str	r3, [sp, #0]
 8109800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109802:	2200      	movs	r2, #0
 8109804:	2104      	movs	r1, #4
 8109806:	68f8      	ldr	r0, [r7, #12]
 8109808:	f000 f90e 	bl	8109a28 <I2C_WaitOnFlagUntilTimeout>
 810980c:	4603      	mov	r3, r0
 810980e:	2b00      	cmp	r3, #0
 8109810:	d001      	beq.n	8109816 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8109812:	2301      	movs	r3, #1
 8109814:	e07c      	b.n	8109910 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8109816:	68fb      	ldr	r3, [r7, #12]
 8109818:	681b      	ldr	r3, [r3, #0]
 810981a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810981c:	68fb      	ldr	r3, [r7, #12]
 810981e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8109820:	b2d2      	uxtb	r2, r2
 8109822:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8109824:	68fb      	ldr	r3, [r7, #12]
 8109826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8109828:	1c5a      	adds	r2, r3, #1
 810982a:	68fb      	ldr	r3, [r7, #12]
 810982c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 810982e:	68fb      	ldr	r3, [r7, #12]
 8109830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8109832:	3b01      	subs	r3, #1
 8109834:	b29a      	uxth	r2, r3
 8109836:	68fb      	ldr	r3, [r7, #12]
 8109838:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 810983a:	68fb      	ldr	r3, [r7, #12]
 810983c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810983e:	b29b      	uxth	r3, r3
 8109840:	3b01      	subs	r3, #1
 8109842:	b29a      	uxth	r2, r3
 8109844:	68fb      	ldr	r3, [r7, #12]
 8109846:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8109848:	68fb      	ldr	r3, [r7, #12]
 810984a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810984c:	b29b      	uxth	r3, r3
 810984e:	2b00      	cmp	r3, #0
 8109850:	d034      	beq.n	81098bc <HAL_I2C_Mem_Read+0x1d0>
 8109852:	68fb      	ldr	r3, [r7, #12]
 8109854:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8109856:	2b00      	cmp	r3, #0
 8109858:	d130      	bne.n	81098bc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 810985a:	697b      	ldr	r3, [r7, #20]
 810985c:	9300      	str	r3, [sp, #0]
 810985e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109860:	2200      	movs	r2, #0
 8109862:	2180      	movs	r1, #128	@ 0x80
 8109864:	68f8      	ldr	r0, [r7, #12]
 8109866:	f000 f8df 	bl	8109a28 <I2C_WaitOnFlagUntilTimeout>
 810986a:	4603      	mov	r3, r0
 810986c:	2b00      	cmp	r3, #0
 810986e:	d001      	beq.n	8109874 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8109870:	2301      	movs	r3, #1
 8109872:	e04d      	b.n	8109910 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8109874:	68fb      	ldr	r3, [r7, #12]
 8109876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8109878:	b29b      	uxth	r3, r3
 810987a:	2bff      	cmp	r3, #255	@ 0xff
 810987c:	d90e      	bls.n	810989c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 810987e:	68fb      	ldr	r3, [r7, #12]
 8109880:	22ff      	movs	r2, #255	@ 0xff
 8109882:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8109884:	68fb      	ldr	r3, [r7, #12]
 8109886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8109888:	b2da      	uxtb	r2, r3
 810988a:	8979      	ldrh	r1, [r7, #10]
 810988c:	2300      	movs	r3, #0
 810988e:	9300      	str	r3, [sp, #0]
 8109890:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8109894:	68f8      	ldr	r0, [r7, #12]
 8109896:	f000 fa8b 	bl	8109db0 <I2C_TransferConfig>
 810989a:	e00f      	b.n	81098bc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 810989c:	68fb      	ldr	r3, [r7, #12]
 810989e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81098a0:	b29a      	uxth	r2, r3
 81098a2:	68fb      	ldr	r3, [r7, #12]
 81098a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81098a6:	68fb      	ldr	r3, [r7, #12]
 81098a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81098aa:	b2da      	uxtb	r2, r3
 81098ac:	8979      	ldrh	r1, [r7, #10]
 81098ae:	2300      	movs	r3, #0
 81098b0:	9300      	str	r3, [sp, #0]
 81098b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81098b6:	68f8      	ldr	r0, [r7, #12]
 81098b8:	f000 fa7a 	bl	8109db0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 81098bc:	68fb      	ldr	r3, [r7, #12]
 81098be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81098c0:	b29b      	uxth	r3, r3
 81098c2:	2b00      	cmp	r3, #0
 81098c4:	d19a      	bne.n	81097fc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81098c6:	697a      	ldr	r2, [r7, #20]
 81098c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 81098ca:	68f8      	ldr	r0, [r7, #12]
 81098cc:	f000 f94c 	bl	8109b68 <I2C_WaitOnSTOPFlagUntilTimeout>
 81098d0:	4603      	mov	r3, r0
 81098d2:	2b00      	cmp	r3, #0
 81098d4:	d001      	beq.n	81098da <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 81098d6:	2301      	movs	r3, #1
 81098d8:	e01a      	b.n	8109910 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81098da:	68fb      	ldr	r3, [r7, #12]
 81098dc:	681b      	ldr	r3, [r3, #0]
 81098de:	2220      	movs	r2, #32
 81098e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81098e2:	68fb      	ldr	r3, [r7, #12]
 81098e4:	681b      	ldr	r3, [r3, #0]
 81098e6:	6859      	ldr	r1, [r3, #4]
 81098e8:	68fb      	ldr	r3, [r7, #12]
 81098ea:	681a      	ldr	r2, [r3, #0]
 81098ec:	4b0b      	ldr	r3, [pc, #44]	@ (810991c <HAL_I2C_Mem_Read+0x230>)
 81098ee:	400b      	ands	r3, r1
 81098f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 81098f2:	68fb      	ldr	r3, [r7, #12]
 81098f4:	2220      	movs	r2, #32
 81098f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 81098fa:	68fb      	ldr	r3, [r7, #12]
 81098fc:	2200      	movs	r2, #0
 81098fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8109902:	68fb      	ldr	r3, [r7, #12]
 8109904:	2200      	movs	r2, #0
 8109906:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 810990a:	2300      	movs	r3, #0
 810990c:	e000      	b.n	8109910 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 810990e:	2302      	movs	r3, #2
  }
}
 8109910:	4618      	mov	r0, r3
 8109912:	3718      	adds	r7, #24
 8109914:	46bd      	mov	sp, r7
 8109916:	bd80      	pop	{r7, pc}
 8109918:	80002400 	.word	0x80002400
 810991c:	fe00e800 	.word	0xfe00e800

08109920 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8109920:	b480      	push	{r7}
 8109922:	b083      	sub	sp, #12
 8109924:	af00      	add	r7, sp, #0
 8109926:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8109928:	687b      	ldr	r3, [r7, #4]
 810992a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 810992c:	4618      	mov	r0, r3
 810992e:	370c      	adds	r7, #12
 8109930:	46bd      	mov	sp, r7
 8109932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109936:	4770      	bx	lr

08109938 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8109938:	b580      	push	{r7, lr}
 810993a:	b086      	sub	sp, #24
 810993c:	af02      	add	r7, sp, #8
 810993e:	60f8      	str	r0, [r7, #12]
 8109940:	4608      	mov	r0, r1
 8109942:	4611      	mov	r1, r2
 8109944:	461a      	mov	r2, r3
 8109946:	4603      	mov	r3, r0
 8109948:	817b      	strh	r3, [r7, #10]
 810994a:	460b      	mov	r3, r1
 810994c:	813b      	strh	r3, [r7, #8]
 810994e:	4613      	mov	r3, r2
 8109950:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8109952:	88fb      	ldrh	r3, [r7, #6]
 8109954:	b2da      	uxtb	r2, r3
 8109956:	8979      	ldrh	r1, [r7, #10]
 8109958:	4b20      	ldr	r3, [pc, #128]	@ (81099dc <I2C_RequestMemoryRead+0xa4>)
 810995a:	9300      	str	r3, [sp, #0]
 810995c:	2300      	movs	r3, #0
 810995e:	68f8      	ldr	r0, [r7, #12]
 8109960:	f000 fa26 	bl	8109db0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8109964:	69fa      	ldr	r2, [r7, #28]
 8109966:	69b9      	ldr	r1, [r7, #24]
 8109968:	68f8      	ldr	r0, [r7, #12]
 810996a:	f000 f8b6 	bl	8109ada <I2C_WaitOnTXISFlagUntilTimeout>
 810996e:	4603      	mov	r3, r0
 8109970:	2b00      	cmp	r3, #0
 8109972:	d001      	beq.n	8109978 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8109974:	2301      	movs	r3, #1
 8109976:	e02c      	b.n	81099d2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8109978:	88fb      	ldrh	r3, [r7, #6]
 810997a:	2b01      	cmp	r3, #1
 810997c:	d105      	bne.n	810998a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810997e:	893b      	ldrh	r3, [r7, #8]
 8109980:	b2da      	uxtb	r2, r3
 8109982:	68fb      	ldr	r3, [r7, #12]
 8109984:	681b      	ldr	r3, [r3, #0]
 8109986:	629a      	str	r2, [r3, #40]	@ 0x28
 8109988:	e015      	b.n	81099b6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 810998a:	893b      	ldrh	r3, [r7, #8]
 810998c:	0a1b      	lsrs	r3, r3, #8
 810998e:	b29b      	uxth	r3, r3
 8109990:	b2da      	uxtb	r2, r3
 8109992:	68fb      	ldr	r3, [r7, #12]
 8109994:	681b      	ldr	r3, [r3, #0]
 8109996:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8109998:	69fa      	ldr	r2, [r7, #28]
 810999a:	69b9      	ldr	r1, [r7, #24]
 810999c:	68f8      	ldr	r0, [r7, #12]
 810999e:	f000 f89c 	bl	8109ada <I2C_WaitOnTXISFlagUntilTimeout>
 81099a2:	4603      	mov	r3, r0
 81099a4:	2b00      	cmp	r3, #0
 81099a6:	d001      	beq.n	81099ac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 81099a8:	2301      	movs	r3, #1
 81099aa:	e012      	b.n	81099d2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81099ac:	893b      	ldrh	r3, [r7, #8]
 81099ae:	b2da      	uxtb	r2, r3
 81099b0:	68fb      	ldr	r3, [r7, #12]
 81099b2:	681b      	ldr	r3, [r3, #0]
 81099b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 81099b6:	69fb      	ldr	r3, [r7, #28]
 81099b8:	9300      	str	r3, [sp, #0]
 81099ba:	69bb      	ldr	r3, [r7, #24]
 81099bc:	2200      	movs	r2, #0
 81099be:	2140      	movs	r1, #64	@ 0x40
 81099c0:	68f8      	ldr	r0, [r7, #12]
 81099c2:	f000 f831 	bl	8109a28 <I2C_WaitOnFlagUntilTimeout>
 81099c6:	4603      	mov	r3, r0
 81099c8:	2b00      	cmp	r3, #0
 81099ca:	d001      	beq.n	81099d0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 81099cc:	2301      	movs	r3, #1
 81099ce:	e000      	b.n	81099d2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 81099d0:	2300      	movs	r3, #0
}
 81099d2:	4618      	mov	r0, r3
 81099d4:	3710      	adds	r7, #16
 81099d6:	46bd      	mov	sp, r7
 81099d8:	bd80      	pop	{r7, pc}
 81099da:	bf00      	nop
 81099dc:	80002000 	.word	0x80002000

081099e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 81099e0:	b480      	push	{r7}
 81099e2:	b083      	sub	sp, #12
 81099e4:	af00      	add	r7, sp, #0
 81099e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 81099e8:	687b      	ldr	r3, [r7, #4]
 81099ea:	681b      	ldr	r3, [r3, #0]
 81099ec:	699b      	ldr	r3, [r3, #24]
 81099ee:	f003 0302 	and.w	r3, r3, #2
 81099f2:	2b02      	cmp	r3, #2
 81099f4:	d103      	bne.n	81099fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 81099f6:	687b      	ldr	r3, [r7, #4]
 81099f8:	681b      	ldr	r3, [r3, #0]
 81099fa:	2200      	movs	r2, #0
 81099fc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 81099fe:	687b      	ldr	r3, [r7, #4]
 8109a00:	681b      	ldr	r3, [r3, #0]
 8109a02:	699b      	ldr	r3, [r3, #24]
 8109a04:	f003 0301 	and.w	r3, r3, #1
 8109a08:	2b01      	cmp	r3, #1
 8109a0a:	d007      	beq.n	8109a1c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8109a0c:	687b      	ldr	r3, [r7, #4]
 8109a0e:	681b      	ldr	r3, [r3, #0]
 8109a10:	699a      	ldr	r2, [r3, #24]
 8109a12:	687b      	ldr	r3, [r7, #4]
 8109a14:	681b      	ldr	r3, [r3, #0]
 8109a16:	f042 0201 	orr.w	r2, r2, #1
 8109a1a:	619a      	str	r2, [r3, #24]
  }
}
 8109a1c:	bf00      	nop
 8109a1e:	370c      	adds	r7, #12
 8109a20:	46bd      	mov	sp, r7
 8109a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a26:	4770      	bx	lr

08109a28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8109a28:	b580      	push	{r7, lr}
 8109a2a:	b084      	sub	sp, #16
 8109a2c:	af00      	add	r7, sp, #0
 8109a2e:	60f8      	str	r0, [r7, #12]
 8109a30:	60b9      	str	r1, [r7, #8]
 8109a32:	603b      	str	r3, [r7, #0]
 8109a34:	4613      	mov	r3, r2
 8109a36:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8109a38:	e03b      	b.n	8109ab2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8109a3a:	69ba      	ldr	r2, [r7, #24]
 8109a3c:	6839      	ldr	r1, [r7, #0]
 8109a3e:	68f8      	ldr	r0, [r7, #12]
 8109a40:	f000 f8d6 	bl	8109bf0 <I2C_IsErrorOccurred>
 8109a44:	4603      	mov	r3, r0
 8109a46:	2b00      	cmp	r3, #0
 8109a48:	d001      	beq.n	8109a4e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8109a4a:	2301      	movs	r3, #1
 8109a4c:	e041      	b.n	8109ad2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8109a4e:	683b      	ldr	r3, [r7, #0]
 8109a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109a54:	d02d      	beq.n	8109ab2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8109a56:	f7fd fbcf 	bl	81071f8 <HAL_GetTick>
 8109a5a:	4602      	mov	r2, r0
 8109a5c:	69bb      	ldr	r3, [r7, #24]
 8109a5e:	1ad3      	subs	r3, r2, r3
 8109a60:	683a      	ldr	r2, [r7, #0]
 8109a62:	429a      	cmp	r2, r3
 8109a64:	d302      	bcc.n	8109a6c <I2C_WaitOnFlagUntilTimeout+0x44>
 8109a66:	683b      	ldr	r3, [r7, #0]
 8109a68:	2b00      	cmp	r3, #0
 8109a6a:	d122      	bne.n	8109ab2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8109a6c:	68fb      	ldr	r3, [r7, #12]
 8109a6e:	681b      	ldr	r3, [r3, #0]
 8109a70:	699a      	ldr	r2, [r3, #24]
 8109a72:	68bb      	ldr	r3, [r7, #8]
 8109a74:	4013      	ands	r3, r2
 8109a76:	68ba      	ldr	r2, [r7, #8]
 8109a78:	429a      	cmp	r2, r3
 8109a7a:	bf0c      	ite	eq
 8109a7c:	2301      	moveq	r3, #1
 8109a7e:	2300      	movne	r3, #0
 8109a80:	b2db      	uxtb	r3, r3
 8109a82:	461a      	mov	r2, r3
 8109a84:	79fb      	ldrb	r3, [r7, #7]
 8109a86:	429a      	cmp	r2, r3
 8109a88:	d113      	bne.n	8109ab2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8109a8a:	68fb      	ldr	r3, [r7, #12]
 8109a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8109a8e:	f043 0220 	orr.w	r2, r3, #32
 8109a92:	68fb      	ldr	r3, [r7, #12]
 8109a94:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8109a96:	68fb      	ldr	r3, [r7, #12]
 8109a98:	2220      	movs	r2, #32
 8109a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8109a9e:	68fb      	ldr	r3, [r7, #12]
 8109aa0:	2200      	movs	r2, #0
 8109aa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8109aa6:	68fb      	ldr	r3, [r7, #12]
 8109aa8:	2200      	movs	r2, #0
 8109aaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8109aae:	2301      	movs	r3, #1
 8109ab0:	e00f      	b.n	8109ad2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8109ab2:	68fb      	ldr	r3, [r7, #12]
 8109ab4:	681b      	ldr	r3, [r3, #0]
 8109ab6:	699a      	ldr	r2, [r3, #24]
 8109ab8:	68bb      	ldr	r3, [r7, #8]
 8109aba:	4013      	ands	r3, r2
 8109abc:	68ba      	ldr	r2, [r7, #8]
 8109abe:	429a      	cmp	r2, r3
 8109ac0:	bf0c      	ite	eq
 8109ac2:	2301      	moveq	r3, #1
 8109ac4:	2300      	movne	r3, #0
 8109ac6:	b2db      	uxtb	r3, r3
 8109ac8:	461a      	mov	r2, r3
 8109aca:	79fb      	ldrb	r3, [r7, #7]
 8109acc:	429a      	cmp	r2, r3
 8109ace:	d0b4      	beq.n	8109a3a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8109ad0:	2300      	movs	r3, #0
}
 8109ad2:	4618      	mov	r0, r3
 8109ad4:	3710      	adds	r7, #16
 8109ad6:	46bd      	mov	sp, r7
 8109ad8:	bd80      	pop	{r7, pc}

08109ada <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8109ada:	b580      	push	{r7, lr}
 8109adc:	b084      	sub	sp, #16
 8109ade:	af00      	add	r7, sp, #0
 8109ae0:	60f8      	str	r0, [r7, #12]
 8109ae2:	60b9      	str	r1, [r7, #8]
 8109ae4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8109ae6:	e033      	b.n	8109b50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8109ae8:	687a      	ldr	r2, [r7, #4]
 8109aea:	68b9      	ldr	r1, [r7, #8]
 8109aec:	68f8      	ldr	r0, [r7, #12]
 8109aee:	f000 f87f 	bl	8109bf0 <I2C_IsErrorOccurred>
 8109af2:	4603      	mov	r3, r0
 8109af4:	2b00      	cmp	r3, #0
 8109af6:	d001      	beq.n	8109afc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8109af8:	2301      	movs	r3, #1
 8109afa:	e031      	b.n	8109b60 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8109afc:	68bb      	ldr	r3, [r7, #8]
 8109afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109b02:	d025      	beq.n	8109b50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8109b04:	f7fd fb78 	bl	81071f8 <HAL_GetTick>
 8109b08:	4602      	mov	r2, r0
 8109b0a:	687b      	ldr	r3, [r7, #4]
 8109b0c:	1ad3      	subs	r3, r2, r3
 8109b0e:	68ba      	ldr	r2, [r7, #8]
 8109b10:	429a      	cmp	r2, r3
 8109b12:	d302      	bcc.n	8109b1a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8109b14:	68bb      	ldr	r3, [r7, #8]
 8109b16:	2b00      	cmp	r3, #0
 8109b18:	d11a      	bne.n	8109b50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8109b1a:	68fb      	ldr	r3, [r7, #12]
 8109b1c:	681b      	ldr	r3, [r3, #0]
 8109b1e:	699b      	ldr	r3, [r3, #24]
 8109b20:	f003 0302 	and.w	r3, r3, #2
 8109b24:	2b02      	cmp	r3, #2
 8109b26:	d013      	beq.n	8109b50 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8109b28:	68fb      	ldr	r3, [r7, #12]
 8109b2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8109b2c:	f043 0220 	orr.w	r2, r3, #32
 8109b30:	68fb      	ldr	r3, [r7, #12]
 8109b32:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8109b34:	68fb      	ldr	r3, [r7, #12]
 8109b36:	2220      	movs	r2, #32
 8109b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8109b3c:	68fb      	ldr	r3, [r7, #12]
 8109b3e:	2200      	movs	r2, #0
 8109b40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8109b44:	68fb      	ldr	r3, [r7, #12]
 8109b46:	2200      	movs	r2, #0
 8109b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8109b4c:	2301      	movs	r3, #1
 8109b4e:	e007      	b.n	8109b60 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8109b50:	68fb      	ldr	r3, [r7, #12]
 8109b52:	681b      	ldr	r3, [r3, #0]
 8109b54:	699b      	ldr	r3, [r3, #24]
 8109b56:	f003 0302 	and.w	r3, r3, #2
 8109b5a:	2b02      	cmp	r3, #2
 8109b5c:	d1c4      	bne.n	8109ae8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8109b5e:	2300      	movs	r3, #0
}
 8109b60:	4618      	mov	r0, r3
 8109b62:	3710      	adds	r7, #16
 8109b64:	46bd      	mov	sp, r7
 8109b66:	bd80      	pop	{r7, pc}

08109b68 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8109b68:	b580      	push	{r7, lr}
 8109b6a:	b084      	sub	sp, #16
 8109b6c:	af00      	add	r7, sp, #0
 8109b6e:	60f8      	str	r0, [r7, #12]
 8109b70:	60b9      	str	r1, [r7, #8]
 8109b72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8109b74:	e02f      	b.n	8109bd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8109b76:	687a      	ldr	r2, [r7, #4]
 8109b78:	68b9      	ldr	r1, [r7, #8]
 8109b7a:	68f8      	ldr	r0, [r7, #12]
 8109b7c:	f000 f838 	bl	8109bf0 <I2C_IsErrorOccurred>
 8109b80:	4603      	mov	r3, r0
 8109b82:	2b00      	cmp	r3, #0
 8109b84:	d001      	beq.n	8109b8a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8109b86:	2301      	movs	r3, #1
 8109b88:	e02d      	b.n	8109be6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8109b8a:	f7fd fb35 	bl	81071f8 <HAL_GetTick>
 8109b8e:	4602      	mov	r2, r0
 8109b90:	687b      	ldr	r3, [r7, #4]
 8109b92:	1ad3      	subs	r3, r2, r3
 8109b94:	68ba      	ldr	r2, [r7, #8]
 8109b96:	429a      	cmp	r2, r3
 8109b98:	d302      	bcc.n	8109ba0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8109b9a:	68bb      	ldr	r3, [r7, #8]
 8109b9c:	2b00      	cmp	r3, #0
 8109b9e:	d11a      	bne.n	8109bd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8109ba0:	68fb      	ldr	r3, [r7, #12]
 8109ba2:	681b      	ldr	r3, [r3, #0]
 8109ba4:	699b      	ldr	r3, [r3, #24]
 8109ba6:	f003 0320 	and.w	r3, r3, #32
 8109baa:	2b20      	cmp	r3, #32
 8109bac:	d013      	beq.n	8109bd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8109bae:	68fb      	ldr	r3, [r7, #12]
 8109bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8109bb2:	f043 0220 	orr.w	r2, r3, #32
 8109bb6:	68fb      	ldr	r3, [r7, #12]
 8109bb8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8109bba:	68fb      	ldr	r3, [r7, #12]
 8109bbc:	2220      	movs	r2, #32
 8109bbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8109bc2:	68fb      	ldr	r3, [r7, #12]
 8109bc4:	2200      	movs	r2, #0
 8109bc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8109bca:	68fb      	ldr	r3, [r7, #12]
 8109bcc:	2200      	movs	r2, #0
 8109bce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8109bd2:	2301      	movs	r3, #1
 8109bd4:	e007      	b.n	8109be6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8109bd6:	68fb      	ldr	r3, [r7, #12]
 8109bd8:	681b      	ldr	r3, [r3, #0]
 8109bda:	699b      	ldr	r3, [r3, #24]
 8109bdc:	f003 0320 	and.w	r3, r3, #32
 8109be0:	2b20      	cmp	r3, #32
 8109be2:	d1c8      	bne.n	8109b76 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8109be4:	2300      	movs	r3, #0
}
 8109be6:	4618      	mov	r0, r3
 8109be8:	3710      	adds	r7, #16
 8109bea:	46bd      	mov	sp, r7
 8109bec:	bd80      	pop	{r7, pc}
	...

08109bf0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8109bf0:	b580      	push	{r7, lr}
 8109bf2:	b08a      	sub	sp, #40	@ 0x28
 8109bf4:	af00      	add	r7, sp, #0
 8109bf6:	60f8      	str	r0, [r7, #12]
 8109bf8:	60b9      	str	r1, [r7, #8]
 8109bfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8109bfc:	2300      	movs	r3, #0
 8109bfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8109c02:	68fb      	ldr	r3, [r7, #12]
 8109c04:	681b      	ldr	r3, [r3, #0]
 8109c06:	699b      	ldr	r3, [r3, #24]
 8109c08:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8109c0a:	2300      	movs	r3, #0
 8109c0c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8109c0e:	687b      	ldr	r3, [r7, #4]
 8109c10:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8109c12:	69bb      	ldr	r3, [r7, #24]
 8109c14:	f003 0310 	and.w	r3, r3, #16
 8109c18:	2b00      	cmp	r3, #0
 8109c1a:	d068      	beq.n	8109cee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8109c1c:	68fb      	ldr	r3, [r7, #12]
 8109c1e:	681b      	ldr	r3, [r3, #0]
 8109c20:	2210      	movs	r2, #16
 8109c22:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8109c24:	e049      	b.n	8109cba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8109c26:	68bb      	ldr	r3, [r7, #8]
 8109c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109c2c:	d045      	beq.n	8109cba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8109c2e:	f7fd fae3 	bl	81071f8 <HAL_GetTick>
 8109c32:	4602      	mov	r2, r0
 8109c34:	69fb      	ldr	r3, [r7, #28]
 8109c36:	1ad3      	subs	r3, r2, r3
 8109c38:	68ba      	ldr	r2, [r7, #8]
 8109c3a:	429a      	cmp	r2, r3
 8109c3c:	d302      	bcc.n	8109c44 <I2C_IsErrorOccurred+0x54>
 8109c3e:	68bb      	ldr	r3, [r7, #8]
 8109c40:	2b00      	cmp	r3, #0
 8109c42:	d13a      	bne.n	8109cba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8109c44:	68fb      	ldr	r3, [r7, #12]
 8109c46:	681b      	ldr	r3, [r3, #0]
 8109c48:	685b      	ldr	r3, [r3, #4]
 8109c4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8109c4e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8109c50:	68fb      	ldr	r3, [r7, #12]
 8109c52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8109c56:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8109c58:	68fb      	ldr	r3, [r7, #12]
 8109c5a:	681b      	ldr	r3, [r3, #0]
 8109c5c:	699b      	ldr	r3, [r3, #24]
 8109c5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8109c62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8109c66:	d121      	bne.n	8109cac <I2C_IsErrorOccurred+0xbc>
 8109c68:	697b      	ldr	r3, [r7, #20]
 8109c6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8109c6e:	d01d      	beq.n	8109cac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8109c70:	7cfb      	ldrb	r3, [r7, #19]
 8109c72:	2b20      	cmp	r3, #32
 8109c74:	d01a      	beq.n	8109cac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8109c76:	68fb      	ldr	r3, [r7, #12]
 8109c78:	681b      	ldr	r3, [r3, #0]
 8109c7a:	685a      	ldr	r2, [r3, #4]
 8109c7c:	68fb      	ldr	r3, [r7, #12]
 8109c7e:	681b      	ldr	r3, [r3, #0]
 8109c80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8109c84:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8109c86:	f7fd fab7 	bl	81071f8 <HAL_GetTick>
 8109c8a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8109c8c:	e00e      	b.n	8109cac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8109c8e:	f7fd fab3 	bl	81071f8 <HAL_GetTick>
 8109c92:	4602      	mov	r2, r0
 8109c94:	69fb      	ldr	r3, [r7, #28]
 8109c96:	1ad3      	subs	r3, r2, r3
 8109c98:	2b19      	cmp	r3, #25
 8109c9a:	d907      	bls.n	8109cac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8109c9c:	6a3b      	ldr	r3, [r7, #32]
 8109c9e:	f043 0320 	orr.w	r3, r3, #32
 8109ca2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8109ca4:	2301      	movs	r3, #1
 8109ca6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8109caa:	e006      	b.n	8109cba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8109cac:	68fb      	ldr	r3, [r7, #12]
 8109cae:	681b      	ldr	r3, [r3, #0]
 8109cb0:	699b      	ldr	r3, [r3, #24]
 8109cb2:	f003 0320 	and.w	r3, r3, #32
 8109cb6:	2b20      	cmp	r3, #32
 8109cb8:	d1e9      	bne.n	8109c8e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8109cba:	68fb      	ldr	r3, [r7, #12]
 8109cbc:	681b      	ldr	r3, [r3, #0]
 8109cbe:	699b      	ldr	r3, [r3, #24]
 8109cc0:	f003 0320 	and.w	r3, r3, #32
 8109cc4:	2b20      	cmp	r3, #32
 8109cc6:	d003      	beq.n	8109cd0 <I2C_IsErrorOccurred+0xe0>
 8109cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8109ccc:	2b00      	cmp	r3, #0
 8109cce:	d0aa      	beq.n	8109c26 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8109cd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8109cd4:	2b00      	cmp	r3, #0
 8109cd6:	d103      	bne.n	8109ce0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8109cd8:	68fb      	ldr	r3, [r7, #12]
 8109cda:	681b      	ldr	r3, [r3, #0]
 8109cdc:	2220      	movs	r2, #32
 8109cde:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8109ce0:	6a3b      	ldr	r3, [r7, #32]
 8109ce2:	f043 0304 	orr.w	r3, r3, #4
 8109ce6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8109ce8:	2301      	movs	r3, #1
 8109cea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8109cee:	68fb      	ldr	r3, [r7, #12]
 8109cf0:	681b      	ldr	r3, [r3, #0]
 8109cf2:	699b      	ldr	r3, [r3, #24]
 8109cf4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8109cf6:	69bb      	ldr	r3, [r7, #24]
 8109cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8109cfc:	2b00      	cmp	r3, #0
 8109cfe:	d00b      	beq.n	8109d18 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8109d00:	6a3b      	ldr	r3, [r7, #32]
 8109d02:	f043 0301 	orr.w	r3, r3, #1
 8109d06:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8109d08:	68fb      	ldr	r3, [r7, #12]
 8109d0a:	681b      	ldr	r3, [r3, #0]
 8109d0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8109d10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8109d12:	2301      	movs	r3, #1
 8109d14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8109d18:	69bb      	ldr	r3, [r7, #24]
 8109d1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8109d1e:	2b00      	cmp	r3, #0
 8109d20:	d00b      	beq.n	8109d3a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8109d22:	6a3b      	ldr	r3, [r7, #32]
 8109d24:	f043 0308 	orr.w	r3, r3, #8
 8109d28:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8109d2a:	68fb      	ldr	r3, [r7, #12]
 8109d2c:	681b      	ldr	r3, [r3, #0]
 8109d2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8109d32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8109d34:	2301      	movs	r3, #1
 8109d36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8109d3a:	69bb      	ldr	r3, [r7, #24]
 8109d3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8109d40:	2b00      	cmp	r3, #0
 8109d42:	d00b      	beq.n	8109d5c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8109d44:	6a3b      	ldr	r3, [r7, #32]
 8109d46:	f043 0302 	orr.w	r3, r3, #2
 8109d4a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8109d4c:	68fb      	ldr	r3, [r7, #12]
 8109d4e:	681b      	ldr	r3, [r3, #0]
 8109d50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8109d54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8109d56:	2301      	movs	r3, #1
 8109d58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8109d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8109d60:	2b00      	cmp	r3, #0
 8109d62:	d01c      	beq.n	8109d9e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8109d64:	68f8      	ldr	r0, [r7, #12]
 8109d66:	f7ff fe3b 	bl	81099e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8109d6a:	68fb      	ldr	r3, [r7, #12]
 8109d6c:	681b      	ldr	r3, [r3, #0]
 8109d6e:	6859      	ldr	r1, [r3, #4]
 8109d70:	68fb      	ldr	r3, [r7, #12]
 8109d72:	681a      	ldr	r2, [r3, #0]
 8109d74:	4b0d      	ldr	r3, [pc, #52]	@ (8109dac <I2C_IsErrorOccurred+0x1bc>)
 8109d76:	400b      	ands	r3, r1
 8109d78:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8109d7a:	68fb      	ldr	r3, [r7, #12]
 8109d7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8109d7e:	6a3b      	ldr	r3, [r7, #32]
 8109d80:	431a      	orrs	r2, r3
 8109d82:	68fb      	ldr	r3, [r7, #12]
 8109d84:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8109d86:	68fb      	ldr	r3, [r7, #12]
 8109d88:	2220      	movs	r2, #32
 8109d8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8109d8e:	68fb      	ldr	r3, [r7, #12]
 8109d90:	2200      	movs	r2, #0
 8109d92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8109d96:	68fb      	ldr	r3, [r7, #12]
 8109d98:	2200      	movs	r2, #0
 8109d9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8109d9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8109da2:	4618      	mov	r0, r3
 8109da4:	3728      	adds	r7, #40	@ 0x28
 8109da6:	46bd      	mov	sp, r7
 8109da8:	bd80      	pop	{r7, pc}
 8109daa:	bf00      	nop
 8109dac:	fe00e800 	.word	0xfe00e800

08109db0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8109db0:	b480      	push	{r7}
 8109db2:	b087      	sub	sp, #28
 8109db4:	af00      	add	r7, sp, #0
 8109db6:	60f8      	str	r0, [r7, #12]
 8109db8:	607b      	str	r3, [r7, #4]
 8109dba:	460b      	mov	r3, r1
 8109dbc:	817b      	strh	r3, [r7, #10]
 8109dbe:	4613      	mov	r3, r2
 8109dc0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8109dc2:	897b      	ldrh	r3, [r7, #10]
 8109dc4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8109dc8:	7a7b      	ldrb	r3, [r7, #9]
 8109dca:	041b      	lsls	r3, r3, #16
 8109dcc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8109dd0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8109dd2:	687b      	ldr	r3, [r7, #4]
 8109dd4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8109dd6:	6a3b      	ldr	r3, [r7, #32]
 8109dd8:	4313      	orrs	r3, r2
 8109dda:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8109dde:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8109de0:	68fb      	ldr	r3, [r7, #12]
 8109de2:	681b      	ldr	r3, [r3, #0]
 8109de4:	685a      	ldr	r2, [r3, #4]
 8109de6:	6a3b      	ldr	r3, [r7, #32]
 8109de8:	0d5b      	lsrs	r3, r3, #21
 8109dea:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8109dee:	4b08      	ldr	r3, [pc, #32]	@ (8109e10 <I2C_TransferConfig+0x60>)
 8109df0:	430b      	orrs	r3, r1
 8109df2:	43db      	mvns	r3, r3
 8109df4:	ea02 0103 	and.w	r1, r2, r3
 8109df8:	68fb      	ldr	r3, [r7, #12]
 8109dfa:	681b      	ldr	r3, [r3, #0]
 8109dfc:	697a      	ldr	r2, [r7, #20]
 8109dfe:	430a      	orrs	r2, r1
 8109e00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8109e02:	bf00      	nop
 8109e04:	371c      	adds	r7, #28
 8109e06:	46bd      	mov	sp, r7
 8109e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109e0c:	4770      	bx	lr
 8109e0e:	bf00      	nop
 8109e10:	03ff63ff 	.word	0x03ff63ff

08109e14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8109e14:	b480      	push	{r7}
 8109e16:	b083      	sub	sp, #12
 8109e18:	af00      	add	r7, sp, #0
 8109e1a:	6078      	str	r0, [r7, #4]
 8109e1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8109e1e:	687b      	ldr	r3, [r7, #4]
 8109e20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8109e24:	b2db      	uxtb	r3, r3
 8109e26:	2b20      	cmp	r3, #32
 8109e28:	d138      	bne.n	8109e9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8109e2a:	687b      	ldr	r3, [r7, #4]
 8109e2c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8109e30:	2b01      	cmp	r3, #1
 8109e32:	d101      	bne.n	8109e38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8109e34:	2302      	movs	r3, #2
 8109e36:	e032      	b.n	8109e9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8109e38:	687b      	ldr	r3, [r7, #4]
 8109e3a:	2201      	movs	r2, #1
 8109e3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8109e40:	687b      	ldr	r3, [r7, #4]
 8109e42:	2224      	movs	r2, #36	@ 0x24
 8109e44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8109e48:	687b      	ldr	r3, [r7, #4]
 8109e4a:	681b      	ldr	r3, [r3, #0]
 8109e4c:	681a      	ldr	r2, [r3, #0]
 8109e4e:	687b      	ldr	r3, [r7, #4]
 8109e50:	681b      	ldr	r3, [r3, #0]
 8109e52:	f022 0201 	bic.w	r2, r2, #1
 8109e56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8109e58:	687b      	ldr	r3, [r7, #4]
 8109e5a:	681b      	ldr	r3, [r3, #0]
 8109e5c:	681a      	ldr	r2, [r3, #0]
 8109e5e:	687b      	ldr	r3, [r7, #4]
 8109e60:	681b      	ldr	r3, [r3, #0]
 8109e62:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8109e66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8109e68:	687b      	ldr	r3, [r7, #4]
 8109e6a:	681b      	ldr	r3, [r3, #0]
 8109e6c:	6819      	ldr	r1, [r3, #0]
 8109e6e:	687b      	ldr	r3, [r7, #4]
 8109e70:	681b      	ldr	r3, [r3, #0]
 8109e72:	683a      	ldr	r2, [r7, #0]
 8109e74:	430a      	orrs	r2, r1
 8109e76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8109e78:	687b      	ldr	r3, [r7, #4]
 8109e7a:	681b      	ldr	r3, [r3, #0]
 8109e7c:	681a      	ldr	r2, [r3, #0]
 8109e7e:	687b      	ldr	r3, [r7, #4]
 8109e80:	681b      	ldr	r3, [r3, #0]
 8109e82:	f042 0201 	orr.w	r2, r2, #1
 8109e86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8109e88:	687b      	ldr	r3, [r7, #4]
 8109e8a:	2220      	movs	r2, #32
 8109e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8109e90:	687b      	ldr	r3, [r7, #4]
 8109e92:	2200      	movs	r2, #0
 8109e94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8109e98:	2300      	movs	r3, #0
 8109e9a:	e000      	b.n	8109e9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8109e9c:	2302      	movs	r3, #2
  }
}
 8109e9e:	4618      	mov	r0, r3
 8109ea0:	370c      	adds	r7, #12
 8109ea2:	46bd      	mov	sp, r7
 8109ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109ea8:	4770      	bx	lr

08109eaa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8109eaa:	b480      	push	{r7}
 8109eac:	b085      	sub	sp, #20
 8109eae:	af00      	add	r7, sp, #0
 8109eb0:	6078      	str	r0, [r7, #4]
 8109eb2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8109eb4:	687b      	ldr	r3, [r7, #4]
 8109eb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8109eba:	b2db      	uxtb	r3, r3
 8109ebc:	2b20      	cmp	r3, #32
 8109ebe:	d139      	bne.n	8109f34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8109ec0:	687b      	ldr	r3, [r7, #4]
 8109ec2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8109ec6:	2b01      	cmp	r3, #1
 8109ec8:	d101      	bne.n	8109ece <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8109eca:	2302      	movs	r3, #2
 8109ecc:	e033      	b.n	8109f36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8109ece:	687b      	ldr	r3, [r7, #4]
 8109ed0:	2201      	movs	r2, #1
 8109ed2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8109ed6:	687b      	ldr	r3, [r7, #4]
 8109ed8:	2224      	movs	r2, #36	@ 0x24
 8109eda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8109ede:	687b      	ldr	r3, [r7, #4]
 8109ee0:	681b      	ldr	r3, [r3, #0]
 8109ee2:	681a      	ldr	r2, [r3, #0]
 8109ee4:	687b      	ldr	r3, [r7, #4]
 8109ee6:	681b      	ldr	r3, [r3, #0]
 8109ee8:	f022 0201 	bic.w	r2, r2, #1
 8109eec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8109eee:	687b      	ldr	r3, [r7, #4]
 8109ef0:	681b      	ldr	r3, [r3, #0]
 8109ef2:	681b      	ldr	r3, [r3, #0]
 8109ef4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8109ef6:	68fb      	ldr	r3, [r7, #12]
 8109ef8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8109efc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8109efe:	683b      	ldr	r3, [r7, #0]
 8109f00:	021b      	lsls	r3, r3, #8
 8109f02:	68fa      	ldr	r2, [r7, #12]
 8109f04:	4313      	orrs	r3, r2
 8109f06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8109f08:	687b      	ldr	r3, [r7, #4]
 8109f0a:	681b      	ldr	r3, [r3, #0]
 8109f0c:	68fa      	ldr	r2, [r7, #12]
 8109f0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8109f10:	687b      	ldr	r3, [r7, #4]
 8109f12:	681b      	ldr	r3, [r3, #0]
 8109f14:	681a      	ldr	r2, [r3, #0]
 8109f16:	687b      	ldr	r3, [r7, #4]
 8109f18:	681b      	ldr	r3, [r3, #0]
 8109f1a:	f042 0201 	orr.w	r2, r2, #1
 8109f1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8109f20:	687b      	ldr	r3, [r7, #4]
 8109f22:	2220      	movs	r2, #32
 8109f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8109f28:	687b      	ldr	r3, [r7, #4]
 8109f2a:	2200      	movs	r2, #0
 8109f2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8109f30:	2300      	movs	r3, #0
 8109f32:	e000      	b.n	8109f36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8109f34:	2302      	movs	r3, #2
  }
}
 8109f36:	4618      	mov	r0, r3
 8109f38:	3714      	adds	r7, #20
 8109f3a:	46bd      	mov	sp, r7
 8109f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109f40:	4770      	bx	lr
	...

08109f44 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8109f44:	b580      	push	{r7, lr}
 8109f46:	b084      	sub	sp, #16
 8109f48:	af00      	add	r7, sp, #0
 8109f4a:	60f8      	str	r0, [r7, #12]
 8109f4c:	460b      	mov	r3, r1
 8109f4e:	607a      	str	r2, [r7, #4]
 8109f50:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8109f52:	4b37      	ldr	r3, [pc, #220]	@ (810a030 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109f54:	681b      	ldr	r3, [r3, #0]
 8109f56:	f023 0201 	bic.w	r2, r3, #1
 8109f5a:	4935      	ldr	r1, [pc, #212]	@ (810a030 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109f5c:	68fb      	ldr	r3, [r7, #12]
 8109f5e:	4313      	orrs	r3, r2
 8109f60:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8109f62:	687b      	ldr	r3, [r7, #4]
 8109f64:	2b00      	cmp	r3, #0
 8109f66:	d123      	bne.n	8109fb0 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8109f68:	f7fd fa46 	bl	81073f8 <HAL_GetCurrentCPUID>
 8109f6c:	4603      	mov	r3, r0
 8109f6e:	2b03      	cmp	r3, #3
 8109f70:	d158      	bne.n	810a024 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8109f72:	4b2f      	ldr	r3, [pc, #188]	@ (810a030 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109f74:	691b      	ldr	r3, [r3, #16]
 8109f76:	4a2e      	ldr	r2, [pc, #184]	@ (810a030 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109f78:	f023 0301 	bic.w	r3, r3, #1
 8109f7c:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8109f7e:	4b2d      	ldr	r3, [pc, #180]	@ (810a034 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109f80:	691b      	ldr	r3, [r3, #16]
 8109f82:	4a2c      	ldr	r2, [pc, #176]	@ (810a034 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109f84:	f043 0304 	orr.w	r3, r3, #4
 8109f88:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8109f8a:	f3bf 8f4f 	dsb	sy
}
 8109f8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8109f90:	f3bf 8f6f 	isb	sy
}
 8109f94:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8109f96:	7afb      	ldrb	r3, [r7, #11]
 8109f98:	2b01      	cmp	r3, #1
 8109f9a:	d101      	bne.n	8109fa0 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8109f9c:	bf30      	wfi
 8109f9e:	e000      	b.n	8109fa2 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8109fa0:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8109fa2:	4b24      	ldr	r3, [pc, #144]	@ (810a034 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109fa4:	691b      	ldr	r3, [r3, #16]
 8109fa6:	4a23      	ldr	r2, [pc, #140]	@ (810a034 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109fa8:	f023 0304 	bic.w	r3, r3, #4
 8109fac:	6113      	str	r3, [r2, #16]
 8109fae:	e03c      	b.n	810a02a <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8109fb0:	687b      	ldr	r3, [r7, #4]
 8109fb2:	2b01      	cmp	r3, #1
 8109fb4:	d123      	bne.n	8109ffe <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8109fb6:	f7fd fa1f 	bl	81073f8 <HAL_GetCurrentCPUID>
 8109fba:	4603      	mov	r3, r0
 8109fbc:	2b01      	cmp	r3, #1
 8109fbe:	d133      	bne.n	810a028 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8109fc0:	4b1b      	ldr	r3, [pc, #108]	@ (810a030 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109fc2:	695b      	ldr	r3, [r3, #20]
 8109fc4:	4a1a      	ldr	r2, [pc, #104]	@ (810a030 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109fc6:	f023 0302 	bic.w	r3, r3, #2
 8109fca:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8109fcc:	4b19      	ldr	r3, [pc, #100]	@ (810a034 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109fce:	691b      	ldr	r3, [r3, #16]
 8109fd0:	4a18      	ldr	r2, [pc, #96]	@ (810a034 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109fd2:	f043 0304 	orr.w	r3, r3, #4
 8109fd6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8109fd8:	f3bf 8f4f 	dsb	sy
}
 8109fdc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8109fde:	f3bf 8f6f 	isb	sy
}
 8109fe2:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8109fe4:	7afb      	ldrb	r3, [r7, #11]
 8109fe6:	2b01      	cmp	r3, #1
 8109fe8:	d101      	bne.n	8109fee <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8109fea:	bf30      	wfi
 8109fec:	e000      	b.n	8109ff0 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8109fee:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8109ff0:	4b10      	ldr	r3, [pc, #64]	@ (810a034 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109ff2:	691b      	ldr	r3, [r3, #16]
 8109ff4:	4a0f      	ldr	r2, [pc, #60]	@ (810a034 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109ff6:	f023 0304 	bic.w	r3, r3, #4
 8109ffa:	6113      	str	r3, [r2, #16]
 8109ffc:	e015      	b.n	810a02a <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8109ffe:	f7fd f9fb 	bl	81073f8 <HAL_GetCurrentCPUID>
 810a002:	4603      	mov	r3, r0
 810a004:	2b03      	cmp	r3, #3
 810a006:	d106      	bne.n	810a016 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 810a008:	4b09      	ldr	r3, [pc, #36]	@ (810a030 <HAL_PWREx_EnterSTOPMode+0xec>)
 810a00a:	691b      	ldr	r3, [r3, #16]
 810a00c:	4a08      	ldr	r2, [pc, #32]	@ (810a030 <HAL_PWREx_EnterSTOPMode+0xec>)
 810a00e:	f023 0304 	bic.w	r3, r3, #4
 810a012:	6113      	str	r3, [r2, #16]
 810a014:	e009      	b.n	810a02a <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810a016:	4b06      	ldr	r3, [pc, #24]	@ (810a030 <HAL_PWREx_EnterSTOPMode+0xec>)
 810a018:	695b      	ldr	r3, [r3, #20]
 810a01a:	4a05      	ldr	r2, [pc, #20]	@ (810a030 <HAL_PWREx_EnterSTOPMode+0xec>)
 810a01c:	f023 0304 	bic.w	r3, r3, #4
 810a020:	6153      	str	r3, [r2, #20]
 810a022:	e002      	b.n	810a02a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810a024:	bf00      	nop
 810a026:	e000      	b.n	810a02a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810a028:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810a02a:	3710      	adds	r7, #16
 810a02c:	46bd      	mov	sp, r7
 810a02e:	bd80      	pop	{r7, pc}
 810a030:	58024800 	.word	0x58024800
 810a034:	e000ed00 	.word	0xe000ed00

0810a038 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 810a038:	b580      	push	{r7, lr}
 810a03a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810a03c:	f7fd f9dc 	bl	81073f8 <HAL_GetCurrentCPUID>
 810a040:	4603      	mov	r3, r0
 810a042:	2b03      	cmp	r3, #3
 810a044:	d101      	bne.n	810a04a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810a046:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 810a048:	e001      	b.n	810a04e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810a04a:	bf40      	sev
    __WFE ();
 810a04c:	bf20      	wfe
}
 810a04e:	bf00      	nop
 810a050:	bd80      	pop	{r7, pc}
	...

0810a054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 810a054:	b480      	push	{r7}
 810a056:	b089      	sub	sp, #36	@ 0x24
 810a058:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810a05a:	4bb3      	ldr	r3, [pc, #716]	@ (810a328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a05c:	691b      	ldr	r3, [r3, #16]
 810a05e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810a062:	2b18      	cmp	r3, #24
 810a064:	f200 8155 	bhi.w	810a312 <HAL_RCC_GetSysClockFreq+0x2be>
 810a068:	a201      	add	r2, pc, #4	@ (adr r2, 810a070 <HAL_RCC_GetSysClockFreq+0x1c>)
 810a06a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a06e:	bf00      	nop
 810a070:	0810a0d5 	.word	0x0810a0d5
 810a074:	0810a313 	.word	0x0810a313
 810a078:	0810a313 	.word	0x0810a313
 810a07c:	0810a313 	.word	0x0810a313
 810a080:	0810a313 	.word	0x0810a313
 810a084:	0810a313 	.word	0x0810a313
 810a088:	0810a313 	.word	0x0810a313
 810a08c:	0810a313 	.word	0x0810a313
 810a090:	0810a0fb 	.word	0x0810a0fb
 810a094:	0810a313 	.word	0x0810a313
 810a098:	0810a313 	.word	0x0810a313
 810a09c:	0810a313 	.word	0x0810a313
 810a0a0:	0810a313 	.word	0x0810a313
 810a0a4:	0810a313 	.word	0x0810a313
 810a0a8:	0810a313 	.word	0x0810a313
 810a0ac:	0810a313 	.word	0x0810a313
 810a0b0:	0810a101 	.word	0x0810a101
 810a0b4:	0810a313 	.word	0x0810a313
 810a0b8:	0810a313 	.word	0x0810a313
 810a0bc:	0810a313 	.word	0x0810a313
 810a0c0:	0810a313 	.word	0x0810a313
 810a0c4:	0810a313 	.word	0x0810a313
 810a0c8:	0810a313 	.word	0x0810a313
 810a0cc:	0810a313 	.word	0x0810a313
 810a0d0:	0810a107 	.word	0x0810a107
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a0d4:	4b94      	ldr	r3, [pc, #592]	@ (810a328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a0d6:	681b      	ldr	r3, [r3, #0]
 810a0d8:	f003 0320 	and.w	r3, r3, #32
 810a0dc:	2b00      	cmp	r3, #0
 810a0de:	d009      	beq.n	810a0f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810a0e0:	4b91      	ldr	r3, [pc, #580]	@ (810a328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a0e2:	681b      	ldr	r3, [r3, #0]
 810a0e4:	08db      	lsrs	r3, r3, #3
 810a0e6:	f003 0303 	and.w	r3, r3, #3
 810a0ea:	4a90      	ldr	r2, [pc, #576]	@ (810a32c <HAL_RCC_GetSysClockFreq+0x2d8>)
 810a0ec:	fa22 f303 	lsr.w	r3, r2, r3
 810a0f0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 810a0f2:	e111      	b.n	810a318 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810a0f4:	4b8d      	ldr	r3, [pc, #564]	@ (810a32c <HAL_RCC_GetSysClockFreq+0x2d8>)
 810a0f6:	61bb      	str	r3, [r7, #24]
      break;
 810a0f8:	e10e      	b.n	810a318 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 810a0fa:	4b8d      	ldr	r3, [pc, #564]	@ (810a330 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810a0fc:	61bb      	str	r3, [r7, #24]
      break;
 810a0fe:	e10b      	b.n	810a318 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 810a100:	4b8c      	ldr	r3, [pc, #560]	@ (810a334 <HAL_RCC_GetSysClockFreq+0x2e0>)
 810a102:	61bb      	str	r3, [r7, #24]
      break;
 810a104:	e108      	b.n	810a318 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810a106:	4b88      	ldr	r3, [pc, #544]	@ (810a328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a10a:	f003 0303 	and.w	r3, r3, #3
 810a10e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 810a110:	4b85      	ldr	r3, [pc, #532]	@ (810a328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a114:	091b      	lsrs	r3, r3, #4
 810a116:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810a11a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 810a11c:	4b82      	ldr	r3, [pc, #520]	@ (810a328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a11e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a120:	f003 0301 	and.w	r3, r3, #1
 810a124:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810a126:	4b80      	ldr	r3, [pc, #512]	@ (810a328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a12a:	08db      	lsrs	r3, r3, #3
 810a12c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810a130:	68fa      	ldr	r2, [r7, #12]
 810a132:	fb02 f303 	mul.w	r3, r2, r3
 810a136:	ee07 3a90 	vmov	s15, r3
 810a13a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a13e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 810a142:	693b      	ldr	r3, [r7, #16]
 810a144:	2b00      	cmp	r3, #0
 810a146:	f000 80e1 	beq.w	810a30c <HAL_RCC_GetSysClockFreq+0x2b8>
 810a14a:	697b      	ldr	r3, [r7, #20]
 810a14c:	2b02      	cmp	r3, #2
 810a14e:	f000 8083 	beq.w	810a258 <HAL_RCC_GetSysClockFreq+0x204>
 810a152:	697b      	ldr	r3, [r7, #20]
 810a154:	2b02      	cmp	r3, #2
 810a156:	f200 80a1 	bhi.w	810a29c <HAL_RCC_GetSysClockFreq+0x248>
 810a15a:	697b      	ldr	r3, [r7, #20]
 810a15c:	2b00      	cmp	r3, #0
 810a15e:	d003      	beq.n	810a168 <HAL_RCC_GetSysClockFreq+0x114>
 810a160:	697b      	ldr	r3, [r7, #20]
 810a162:	2b01      	cmp	r3, #1
 810a164:	d056      	beq.n	810a214 <HAL_RCC_GetSysClockFreq+0x1c0>
 810a166:	e099      	b.n	810a29c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a168:	4b6f      	ldr	r3, [pc, #444]	@ (810a328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a16a:	681b      	ldr	r3, [r3, #0]
 810a16c:	f003 0320 	and.w	r3, r3, #32
 810a170:	2b00      	cmp	r3, #0
 810a172:	d02d      	beq.n	810a1d0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810a174:	4b6c      	ldr	r3, [pc, #432]	@ (810a328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a176:	681b      	ldr	r3, [r3, #0]
 810a178:	08db      	lsrs	r3, r3, #3
 810a17a:	f003 0303 	and.w	r3, r3, #3
 810a17e:	4a6b      	ldr	r2, [pc, #428]	@ (810a32c <HAL_RCC_GetSysClockFreq+0x2d8>)
 810a180:	fa22 f303 	lsr.w	r3, r2, r3
 810a184:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810a186:	687b      	ldr	r3, [r7, #4]
 810a188:	ee07 3a90 	vmov	s15, r3
 810a18c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a190:	693b      	ldr	r3, [r7, #16]
 810a192:	ee07 3a90 	vmov	s15, r3
 810a196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a19a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a19e:	4b62      	ldr	r3, [pc, #392]	@ (810a328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a1a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a1a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a1a6:	ee07 3a90 	vmov	s15, r3
 810a1aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a1ae:	ed97 6a02 	vldr	s12, [r7, #8]
 810a1b2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 810a338 <HAL_RCC_GetSysClockFreq+0x2e4>
 810a1b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a1ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a1be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a1c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a1c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a1ca:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 810a1ce:	e087      	b.n	810a2e0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810a1d0:	693b      	ldr	r3, [r7, #16]
 810a1d2:	ee07 3a90 	vmov	s15, r3
 810a1d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a1da:	eddf 6a58 	vldr	s13, [pc, #352]	@ 810a33c <HAL_RCC_GetSysClockFreq+0x2e8>
 810a1de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a1e2:	4b51      	ldr	r3, [pc, #324]	@ (810a328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a1e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a1e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a1ea:	ee07 3a90 	vmov	s15, r3
 810a1ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a1f2:	ed97 6a02 	vldr	s12, [r7, #8]
 810a1f6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 810a338 <HAL_RCC_GetSysClockFreq+0x2e4>
 810a1fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a1fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a202:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a20a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a20e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810a212:	e065      	b.n	810a2e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810a214:	693b      	ldr	r3, [r7, #16]
 810a216:	ee07 3a90 	vmov	s15, r3
 810a21a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a21e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 810a340 <HAL_RCC_GetSysClockFreq+0x2ec>
 810a222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a226:	4b40      	ldr	r3, [pc, #256]	@ (810a328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a22a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a22e:	ee07 3a90 	vmov	s15, r3
 810a232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a236:	ed97 6a02 	vldr	s12, [r7, #8]
 810a23a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 810a338 <HAL_RCC_GetSysClockFreq+0x2e4>
 810a23e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a246:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a24a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a24e:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a252:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810a256:	e043      	b.n	810a2e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810a258:	693b      	ldr	r3, [r7, #16]
 810a25a:	ee07 3a90 	vmov	s15, r3
 810a25e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a262:	eddf 6a38 	vldr	s13, [pc, #224]	@ 810a344 <HAL_RCC_GetSysClockFreq+0x2f0>
 810a266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a26a:	4b2f      	ldr	r3, [pc, #188]	@ (810a328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a26c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a26e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a272:	ee07 3a90 	vmov	s15, r3
 810a276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a27a:	ed97 6a02 	vldr	s12, [r7, #8]
 810a27e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 810a338 <HAL_RCC_GetSysClockFreq+0x2e4>
 810a282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a28a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a28e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a292:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a296:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810a29a:	e021      	b.n	810a2e0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810a29c:	693b      	ldr	r3, [r7, #16]
 810a29e:	ee07 3a90 	vmov	s15, r3
 810a2a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a2a6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 810a340 <HAL_RCC_GetSysClockFreq+0x2ec>
 810a2aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a2ae:	4b1e      	ldr	r3, [pc, #120]	@ (810a328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a2b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a2b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a2b6:	ee07 3a90 	vmov	s15, r3
 810a2ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a2be:	ed97 6a02 	vldr	s12, [r7, #8]
 810a2c2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 810a338 <HAL_RCC_GetSysClockFreq+0x2e4>
 810a2c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a2ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a2ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810a2d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a2d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a2da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810a2de:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 810a2e0:	4b11      	ldr	r3, [pc, #68]	@ (810a328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a2e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a2e4:	0a5b      	lsrs	r3, r3, #9
 810a2e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810a2ea:	3301      	adds	r3, #1
 810a2ec:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 810a2ee:	683b      	ldr	r3, [r7, #0]
 810a2f0:	ee07 3a90 	vmov	s15, r3
 810a2f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810a2f8:	edd7 6a07 	vldr	s13, [r7, #28]
 810a2fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a300:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a304:	ee17 3a90 	vmov	r3, s15
 810a308:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 810a30a:	e005      	b.n	810a318 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 810a30c:	2300      	movs	r3, #0
 810a30e:	61bb      	str	r3, [r7, #24]
      break;
 810a310:	e002      	b.n	810a318 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810a312:	4b07      	ldr	r3, [pc, #28]	@ (810a330 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810a314:	61bb      	str	r3, [r7, #24]
      break;
 810a316:	bf00      	nop
  }

  return sysclockfreq;
 810a318:	69bb      	ldr	r3, [r7, #24]
}
 810a31a:	4618      	mov	r0, r3
 810a31c:	3724      	adds	r7, #36	@ 0x24
 810a31e:	46bd      	mov	sp, r7
 810a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a324:	4770      	bx	lr
 810a326:	bf00      	nop
 810a328:	58024400 	.word	0x58024400
 810a32c:	03d09000 	.word	0x03d09000
 810a330:	003d0900 	.word	0x003d0900
 810a334:	017d7840 	.word	0x017d7840
 810a338:	46000000 	.word	0x46000000
 810a33c:	4c742400 	.word	0x4c742400
 810a340:	4a742400 	.word	0x4a742400
 810a344:	4bbebc20 	.word	0x4bbebc20

0810a348 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 810a348:	b580      	push	{r7, lr}
 810a34a:	b082      	sub	sp, #8
 810a34c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810a34e:	f7ff fe81 	bl	810a054 <HAL_RCC_GetSysClockFreq>
 810a352:	4602      	mov	r2, r0
 810a354:	4b11      	ldr	r3, [pc, #68]	@ (810a39c <HAL_RCC_GetHCLKFreq+0x54>)
 810a356:	699b      	ldr	r3, [r3, #24]
 810a358:	0a1b      	lsrs	r3, r3, #8
 810a35a:	f003 030f 	and.w	r3, r3, #15
 810a35e:	4910      	ldr	r1, [pc, #64]	@ (810a3a0 <HAL_RCC_GetHCLKFreq+0x58>)
 810a360:	5ccb      	ldrb	r3, [r1, r3]
 810a362:	f003 031f 	and.w	r3, r3, #31
 810a366:	fa22 f303 	lsr.w	r3, r2, r3
 810a36a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810a36c:	4b0b      	ldr	r3, [pc, #44]	@ (810a39c <HAL_RCC_GetHCLKFreq+0x54>)
 810a36e:	699b      	ldr	r3, [r3, #24]
 810a370:	f003 030f 	and.w	r3, r3, #15
 810a374:	4a0a      	ldr	r2, [pc, #40]	@ (810a3a0 <HAL_RCC_GetHCLKFreq+0x58>)
 810a376:	5cd3      	ldrb	r3, [r2, r3]
 810a378:	f003 031f 	and.w	r3, r3, #31
 810a37c:	687a      	ldr	r2, [r7, #4]
 810a37e:	fa22 f303 	lsr.w	r3, r2, r3
 810a382:	4a08      	ldr	r2, [pc, #32]	@ (810a3a4 <HAL_RCC_GetHCLKFreq+0x5c>)
 810a384:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810a386:	4b07      	ldr	r3, [pc, #28]	@ (810a3a4 <HAL_RCC_GetHCLKFreq+0x5c>)
 810a388:	681b      	ldr	r3, [r3, #0]
 810a38a:	4a07      	ldr	r2, [pc, #28]	@ (810a3a8 <HAL_RCC_GetHCLKFreq+0x60>)
 810a38c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810a38e:	4b05      	ldr	r3, [pc, #20]	@ (810a3a4 <HAL_RCC_GetHCLKFreq+0x5c>)
 810a390:	681b      	ldr	r3, [r3, #0]
}
 810a392:	4618      	mov	r0, r3
 810a394:	3708      	adds	r7, #8
 810a396:	46bd      	mov	sp, r7
 810a398:	bd80      	pop	{r7, pc}
 810a39a:	bf00      	nop
 810a39c:	58024400 	.word	0x58024400
 810a3a0:	0811fc30 	.word	0x0811fc30
 810a3a4:	10000018 	.word	0x10000018
 810a3a8:	10000014 	.word	0x10000014

0810a3ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 810a3ac:	b580      	push	{r7, lr}
 810a3ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 810a3b0:	f7ff ffca 	bl	810a348 <HAL_RCC_GetHCLKFreq>
 810a3b4:	4602      	mov	r2, r0
 810a3b6:	4b06      	ldr	r3, [pc, #24]	@ (810a3d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 810a3b8:	69db      	ldr	r3, [r3, #28]
 810a3ba:	091b      	lsrs	r3, r3, #4
 810a3bc:	f003 0307 	and.w	r3, r3, #7
 810a3c0:	4904      	ldr	r1, [pc, #16]	@ (810a3d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 810a3c2:	5ccb      	ldrb	r3, [r1, r3]
 810a3c4:	f003 031f 	and.w	r3, r3, #31
 810a3c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 810a3cc:	4618      	mov	r0, r3
 810a3ce:	bd80      	pop	{r7, pc}
 810a3d0:	58024400 	.word	0x58024400
 810a3d4:	0811fc30 	.word	0x0811fc30

0810a3d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 810a3d8:	b480      	push	{r7}
 810a3da:	b083      	sub	sp, #12
 810a3dc:	af00      	add	r7, sp, #0
 810a3de:	6078      	str	r0, [r7, #4]
 810a3e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 810a3e2:	687b      	ldr	r3, [r7, #4]
 810a3e4:	223f      	movs	r2, #63	@ 0x3f
 810a3e6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 810a3e8:	4b1a      	ldr	r3, [pc, #104]	@ (810a454 <HAL_RCC_GetClockConfig+0x7c>)
 810a3ea:	691b      	ldr	r3, [r3, #16]
 810a3ec:	f003 0207 	and.w	r2, r3, #7
 810a3f0:	687b      	ldr	r3, [r7, #4]
 810a3f2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 810a3f4:	4b17      	ldr	r3, [pc, #92]	@ (810a454 <HAL_RCC_GetClockConfig+0x7c>)
 810a3f6:	699b      	ldr	r3, [r3, #24]
 810a3f8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 810a3fc:	687b      	ldr	r3, [r7, #4]
 810a3fe:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 810a400:	4b14      	ldr	r3, [pc, #80]	@ (810a454 <HAL_RCC_GetClockConfig+0x7c>)
 810a402:	699b      	ldr	r3, [r3, #24]
 810a404:	f003 020f 	and.w	r2, r3, #15
 810a408:	687b      	ldr	r3, [r7, #4]
 810a40a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 810a40c:	4b11      	ldr	r3, [pc, #68]	@ (810a454 <HAL_RCC_GetClockConfig+0x7c>)
 810a40e:	699b      	ldr	r3, [r3, #24]
 810a410:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 810a414:	687b      	ldr	r3, [r7, #4]
 810a416:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 810a418:	4b0e      	ldr	r3, [pc, #56]	@ (810a454 <HAL_RCC_GetClockConfig+0x7c>)
 810a41a:	69db      	ldr	r3, [r3, #28]
 810a41c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 810a420:	687b      	ldr	r3, [r7, #4]
 810a422:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 810a424:	4b0b      	ldr	r3, [pc, #44]	@ (810a454 <HAL_RCC_GetClockConfig+0x7c>)
 810a426:	69db      	ldr	r3, [r3, #28]
 810a428:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 810a42c:	687b      	ldr	r3, [r7, #4]
 810a42e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 810a430:	4b08      	ldr	r3, [pc, #32]	@ (810a454 <HAL_RCC_GetClockConfig+0x7c>)
 810a432:	6a1b      	ldr	r3, [r3, #32]
 810a434:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 810a438:	687b      	ldr	r3, [r7, #4]
 810a43a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 810a43c:	4b06      	ldr	r3, [pc, #24]	@ (810a458 <HAL_RCC_GetClockConfig+0x80>)
 810a43e:	681b      	ldr	r3, [r3, #0]
 810a440:	f003 020f 	and.w	r2, r3, #15
 810a444:	683b      	ldr	r3, [r7, #0]
 810a446:	601a      	str	r2, [r3, #0]
}
 810a448:	bf00      	nop
 810a44a:	370c      	adds	r7, #12
 810a44c:	46bd      	mov	sp, r7
 810a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a452:	4770      	bx	lr
 810a454:	58024400 	.word	0x58024400
 810a458:	52002000 	.word	0x52002000

0810a45c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 810a45c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810a460:	b0cc      	sub	sp, #304	@ 0x130
 810a462:	af00      	add	r7, sp, #0
 810a464:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 810a468:	2300      	movs	r3, #0
 810a46a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 810a46e:	2300      	movs	r3, #0
 810a470:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 810a474:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a478:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a47c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 810a480:	2500      	movs	r5, #0
 810a482:	ea54 0305 	orrs.w	r3, r4, r5
 810a486:	d049      	beq.n	810a51c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 810a488:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a48c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810a48e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810a492:	d02f      	beq.n	810a4f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 810a494:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810a498:	d828      	bhi.n	810a4ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 810a49a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810a49e:	d01a      	beq.n	810a4d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 810a4a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810a4a4:	d822      	bhi.n	810a4ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 810a4a6:	2b00      	cmp	r3, #0
 810a4a8:	d003      	beq.n	810a4b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 810a4aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810a4ae:	d007      	beq.n	810a4c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 810a4b0:	e01c      	b.n	810a4ec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a4b2:	4bb8      	ldr	r3, [pc, #736]	@ (810a794 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a4b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a4b6:	4ab7      	ldr	r2, [pc, #732]	@ (810a794 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a4b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a4bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810a4be:	e01a      	b.n	810a4f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810a4c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a4c4:	3308      	adds	r3, #8
 810a4c6:	2102      	movs	r1, #2
 810a4c8:	4618      	mov	r0, r3
 810a4ca:	f001 fa11 	bl	810b8f0 <RCCEx_PLL2_Config>
 810a4ce:	4603      	mov	r3, r0
 810a4d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810a4d4:	e00f      	b.n	810a4f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810a4d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a4da:	3328      	adds	r3, #40	@ 0x28
 810a4dc:	2102      	movs	r1, #2
 810a4de:	4618      	mov	r0, r3
 810a4e0:	f001 fab8 	bl	810ba54 <RCCEx_PLL3_Config>
 810a4e4:	4603      	mov	r3, r0
 810a4e6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810a4ea:	e004      	b.n	810a4f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a4ec:	2301      	movs	r3, #1
 810a4ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810a4f2:	e000      	b.n	810a4f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 810a4f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a4f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a4fa:	2b00      	cmp	r3, #0
 810a4fc:	d10a      	bne.n	810a514 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 810a4fe:	4ba5      	ldr	r3, [pc, #660]	@ (810a794 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a502:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810a506:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a50a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810a50c:	4aa1      	ldr	r2, [pc, #644]	@ (810a794 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a50e:	430b      	orrs	r3, r1
 810a510:	6513      	str	r3, [r2, #80]	@ 0x50
 810a512:	e003      	b.n	810a51c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a514:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a518:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 810a51c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a520:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a524:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 810a528:	f04f 0900 	mov.w	r9, #0
 810a52c:	ea58 0309 	orrs.w	r3, r8, r9
 810a530:	d047      	beq.n	810a5c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 810a532:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810a538:	2b04      	cmp	r3, #4
 810a53a:	d82a      	bhi.n	810a592 <HAL_RCCEx_PeriphCLKConfig+0x136>
 810a53c:	a201      	add	r2, pc, #4	@ (adr r2, 810a544 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 810a53e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a542:	bf00      	nop
 810a544:	0810a559 	.word	0x0810a559
 810a548:	0810a567 	.word	0x0810a567
 810a54c:	0810a57d 	.word	0x0810a57d
 810a550:	0810a59b 	.word	0x0810a59b
 810a554:	0810a59b 	.word	0x0810a59b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a558:	4b8e      	ldr	r3, [pc, #568]	@ (810a794 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a55a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a55c:	4a8d      	ldr	r2, [pc, #564]	@ (810a794 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a55e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a562:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810a564:	e01a      	b.n	810a59c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810a566:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a56a:	3308      	adds	r3, #8
 810a56c:	2100      	movs	r1, #0
 810a56e:	4618      	mov	r0, r3
 810a570:	f001 f9be 	bl	810b8f0 <RCCEx_PLL2_Config>
 810a574:	4603      	mov	r3, r0
 810a576:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810a57a:	e00f      	b.n	810a59c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810a57c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a580:	3328      	adds	r3, #40	@ 0x28
 810a582:	2100      	movs	r1, #0
 810a584:	4618      	mov	r0, r3
 810a586:	f001 fa65 	bl	810ba54 <RCCEx_PLL3_Config>
 810a58a:	4603      	mov	r3, r0
 810a58c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810a590:	e004      	b.n	810a59c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a592:	2301      	movs	r3, #1
 810a594:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810a598:	e000      	b.n	810a59c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 810a59a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a59c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a5a0:	2b00      	cmp	r3, #0
 810a5a2:	d10a      	bne.n	810a5ba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 810a5a4:	4b7b      	ldr	r3, [pc, #492]	@ (810a794 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a5a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a5a8:	f023 0107 	bic.w	r1, r3, #7
 810a5ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a5b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810a5b2:	4a78      	ldr	r2, [pc, #480]	@ (810a794 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a5b4:	430b      	orrs	r3, r1
 810a5b6:	6513      	str	r3, [r2, #80]	@ 0x50
 810a5b8:	e003      	b.n	810a5c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a5ba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a5be:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 810a5c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a5ca:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 810a5ce:	f04f 0b00 	mov.w	fp, #0
 810a5d2:	ea5a 030b 	orrs.w	r3, sl, fp
 810a5d6:	d04c      	beq.n	810a672 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 810a5d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a5dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810a5de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810a5e2:	d030      	beq.n	810a646 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 810a5e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810a5e8:	d829      	bhi.n	810a63e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810a5ea:	2bc0      	cmp	r3, #192	@ 0xc0
 810a5ec:	d02d      	beq.n	810a64a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 810a5ee:	2bc0      	cmp	r3, #192	@ 0xc0
 810a5f0:	d825      	bhi.n	810a63e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810a5f2:	2b80      	cmp	r3, #128	@ 0x80
 810a5f4:	d018      	beq.n	810a628 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 810a5f6:	2b80      	cmp	r3, #128	@ 0x80
 810a5f8:	d821      	bhi.n	810a63e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810a5fa:	2b00      	cmp	r3, #0
 810a5fc:	d002      	beq.n	810a604 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 810a5fe:	2b40      	cmp	r3, #64	@ 0x40
 810a600:	d007      	beq.n	810a612 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 810a602:	e01c      	b.n	810a63e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a604:	4b63      	ldr	r3, [pc, #396]	@ (810a794 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a608:	4a62      	ldr	r2, [pc, #392]	@ (810a794 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a60a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a60e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810a610:	e01c      	b.n	810a64c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810a612:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a616:	3308      	adds	r3, #8
 810a618:	2100      	movs	r1, #0
 810a61a:	4618      	mov	r0, r3
 810a61c:	f001 f968 	bl	810b8f0 <RCCEx_PLL2_Config>
 810a620:	4603      	mov	r3, r0
 810a622:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810a626:	e011      	b.n	810a64c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810a628:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a62c:	3328      	adds	r3, #40	@ 0x28
 810a62e:	2100      	movs	r1, #0
 810a630:	4618      	mov	r0, r3
 810a632:	f001 fa0f 	bl	810ba54 <RCCEx_PLL3_Config>
 810a636:	4603      	mov	r3, r0
 810a638:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810a63c:	e006      	b.n	810a64c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a63e:	2301      	movs	r3, #1
 810a640:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810a644:	e002      	b.n	810a64c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810a646:	bf00      	nop
 810a648:	e000      	b.n	810a64c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810a64a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a64c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a650:	2b00      	cmp	r3, #0
 810a652:	d10a      	bne.n	810a66a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 810a654:	4b4f      	ldr	r3, [pc, #316]	@ (810a794 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a656:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a658:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 810a65c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a660:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810a662:	4a4c      	ldr	r2, [pc, #304]	@ (810a794 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a664:	430b      	orrs	r3, r1
 810a666:	6513      	str	r3, [r2, #80]	@ 0x50
 810a668:	e003      	b.n	810a672 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a66a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a66e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810a672:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a676:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a67a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 810a67e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 810a682:	2300      	movs	r3, #0
 810a684:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 810a688:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 810a68c:	460b      	mov	r3, r1
 810a68e:	4313      	orrs	r3, r2
 810a690:	d053      	beq.n	810a73a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 810a692:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a696:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810a69a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810a69e:	d035      	beq.n	810a70c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 810a6a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810a6a4:	d82e      	bhi.n	810a704 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810a6a6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810a6aa:	d031      	beq.n	810a710 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 810a6ac:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810a6b0:	d828      	bhi.n	810a704 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810a6b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810a6b6:	d01a      	beq.n	810a6ee <HAL_RCCEx_PeriphCLKConfig+0x292>
 810a6b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810a6bc:	d822      	bhi.n	810a704 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810a6be:	2b00      	cmp	r3, #0
 810a6c0:	d003      	beq.n	810a6ca <HAL_RCCEx_PeriphCLKConfig+0x26e>
 810a6c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810a6c6:	d007      	beq.n	810a6d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 810a6c8:	e01c      	b.n	810a704 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a6ca:	4b32      	ldr	r3, [pc, #200]	@ (810a794 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a6cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a6ce:	4a31      	ldr	r2, [pc, #196]	@ (810a794 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a6d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a6d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810a6d6:	e01c      	b.n	810a712 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810a6d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a6dc:	3308      	adds	r3, #8
 810a6de:	2100      	movs	r1, #0
 810a6e0:	4618      	mov	r0, r3
 810a6e2:	f001 f905 	bl	810b8f0 <RCCEx_PLL2_Config>
 810a6e6:	4603      	mov	r3, r0
 810a6e8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810a6ec:	e011      	b.n	810a712 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810a6ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a6f2:	3328      	adds	r3, #40	@ 0x28
 810a6f4:	2100      	movs	r1, #0
 810a6f6:	4618      	mov	r0, r3
 810a6f8:	f001 f9ac 	bl	810ba54 <RCCEx_PLL3_Config>
 810a6fc:	4603      	mov	r3, r0
 810a6fe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810a702:	e006      	b.n	810a712 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810a704:	2301      	movs	r3, #1
 810a706:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810a70a:	e002      	b.n	810a712 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 810a70c:	bf00      	nop
 810a70e:	e000      	b.n	810a712 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 810a710:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a712:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a716:	2b00      	cmp	r3, #0
 810a718:	d10b      	bne.n	810a732 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 810a71a:	4b1e      	ldr	r3, [pc, #120]	@ (810a794 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a71c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810a71e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 810a722:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a726:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810a72a:	4a1a      	ldr	r2, [pc, #104]	@ (810a794 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a72c:	430b      	orrs	r3, r1
 810a72e:	6593      	str	r3, [r2, #88]	@ 0x58
 810a730:	e003      	b.n	810a73a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a732:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a736:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810a73a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a742:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 810a746:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 810a74a:	2300      	movs	r3, #0
 810a74c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 810a750:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 810a754:	460b      	mov	r3, r1
 810a756:	4313      	orrs	r3, r2
 810a758:	d056      	beq.n	810a808 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 810a75a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a75e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 810a762:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810a766:	d038      	beq.n	810a7da <HAL_RCCEx_PeriphCLKConfig+0x37e>
 810a768:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810a76c:	d831      	bhi.n	810a7d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810a76e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810a772:	d034      	beq.n	810a7de <HAL_RCCEx_PeriphCLKConfig+0x382>
 810a774:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810a778:	d82b      	bhi.n	810a7d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810a77a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810a77e:	d01d      	beq.n	810a7bc <HAL_RCCEx_PeriphCLKConfig+0x360>
 810a780:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810a784:	d825      	bhi.n	810a7d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810a786:	2b00      	cmp	r3, #0
 810a788:	d006      	beq.n	810a798 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 810a78a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810a78e:	d00a      	beq.n	810a7a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 810a790:	e01f      	b.n	810a7d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810a792:	bf00      	nop
 810a794:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a798:	4ba2      	ldr	r3, [pc, #648]	@ (810aa24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a79a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a79c:	4aa1      	ldr	r2, [pc, #644]	@ (810aa24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a79e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a7a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810a7a4:	e01c      	b.n	810a7e0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810a7a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a7aa:	3308      	adds	r3, #8
 810a7ac:	2100      	movs	r1, #0
 810a7ae:	4618      	mov	r0, r3
 810a7b0:	f001 f89e 	bl	810b8f0 <RCCEx_PLL2_Config>
 810a7b4:	4603      	mov	r3, r0
 810a7b6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810a7ba:	e011      	b.n	810a7e0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810a7bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a7c0:	3328      	adds	r3, #40	@ 0x28
 810a7c2:	2100      	movs	r1, #0
 810a7c4:	4618      	mov	r0, r3
 810a7c6:	f001 f945 	bl	810ba54 <RCCEx_PLL3_Config>
 810a7ca:	4603      	mov	r3, r0
 810a7cc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810a7d0:	e006      	b.n	810a7e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810a7d2:	2301      	movs	r3, #1
 810a7d4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810a7d8:	e002      	b.n	810a7e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810a7da:	bf00      	nop
 810a7dc:	e000      	b.n	810a7e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810a7de:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a7e0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a7e4:	2b00      	cmp	r3, #0
 810a7e6:	d10b      	bne.n	810a800 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 810a7e8:	4b8e      	ldr	r3, [pc, #568]	@ (810aa24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a7ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810a7ec:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 810a7f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a7f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 810a7f8:	4a8a      	ldr	r2, [pc, #552]	@ (810aa24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a7fa:	430b      	orrs	r3, r1
 810a7fc:	6593      	str	r3, [r2, #88]	@ 0x58
 810a7fe:	e003      	b.n	810a808 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a800:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a804:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 810a808:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a810:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 810a814:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 810a818:	2300      	movs	r3, #0
 810a81a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 810a81e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 810a822:	460b      	mov	r3, r1
 810a824:	4313      	orrs	r3, r2
 810a826:	d03a      	beq.n	810a89e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 810a828:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a82c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810a82e:	2b30      	cmp	r3, #48	@ 0x30
 810a830:	d01f      	beq.n	810a872 <HAL_RCCEx_PeriphCLKConfig+0x416>
 810a832:	2b30      	cmp	r3, #48	@ 0x30
 810a834:	d819      	bhi.n	810a86a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810a836:	2b20      	cmp	r3, #32
 810a838:	d00c      	beq.n	810a854 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 810a83a:	2b20      	cmp	r3, #32
 810a83c:	d815      	bhi.n	810a86a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810a83e:	2b00      	cmp	r3, #0
 810a840:	d019      	beq.n	810a876 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 810a842:	2b10      	cmp	r3, #16
 810a844:	d111      	bne.n	810a86a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a846:	4b77      	ldr	r3, [pc, #476]	@ (810aa24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a84a:	4a76      	ldr	r2, [pc, #472]	@ (810aa24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a84c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a850:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810a852:	e011      	b.n	810a878 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810a854:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a858:	3308      	adds	r3, #8
 810a85a:	2102      	movs	r1, #2
 810a85c:	4618      	mov	r0, r3
 810a85e:	f001 f847 	bl	810b8f0 <RCCEx_PLL2_Config>
 810a862:	4603      	mov	r3, r0
 810a864:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810a868:	e006      	b.n	810a878 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 810a86a:	2301      	movs	r3, #1
 810a86c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810a870:	e002      	b.n	810a878 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810a872:	bf00      	nop
 810a874:	e000      	b.n	810a878 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810a876:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a878:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a87c:	2b00      	cmp	r3, #0
 810a87e:	d10a      	bne.n	810a896 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 810a880:	4b68      	ldr	r3, [pc, #416]	@ (810aa24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a882:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810a884:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 810a888:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a88c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810a88e:	4a65      	ldr	r2, [pc, #404]	@ (810aa24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a890:	430b      	orrs	r3, r1
 810a892:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810a894:	e003      	b.n	810a89e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a896:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a89a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810a89e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a8a6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 810a8aa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 810a8ae:	2300      	movs	r3, #0
 810a8b0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 810a8b4:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 810a8b8:	460b      	mov	r3, r1
 810a8ba:	4313      	orrs	r3, r2
 810a8bc:	d051      	beq.n	810a962 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 810a8be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a8c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810a8c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810a8c8:	d035      	beq.n	810a936 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 810a8ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810a8ce:	d82e      	bhi.n	810a92e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810a8d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810a8d4:	d031      	beq.n	810a93a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 810a8d6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810a8da:	d828      	bhi.n	810a92e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810a8dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810a8e0:	d01a      	beq.n	810a918 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 810a8e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810a8e6:	d822      	bhi.n	810a92e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810a8e8:	2b00      	cmp	r3, #0
 810a8ea:	d003      	beq.n	810a8f4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 810a8ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810a8f0:	d007      	beq.n	810a902 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 810a8f2:	e01c      	b.n	810a92e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a8f4:	4b4b      	ldr	r3, [pc, #300]	@ (810aa24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a8f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a8f8:	4a4a      	ldr	r2, [pc, #296]	@ (810aa24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a8fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a8fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810a900:	e01c      	b.n	810a93c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810a902:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a906:	3308      	adds	r3, #8
 810a908:	2100      	movs	r1, #0
 810a90a:	4618      	mov	r0, r3
 810a90c:	f000 fff0 	bl	810b8f0 <RCCEx_PLL2_Config>
 810a910:	4603      	mov	r3, r0
 810a912:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810a916:	e011      	b.n	810a93c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810a918:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a91c:	3328      	adds	r3, #40	@ 0x28
 810a91e:	2100      	movs	r1, #0
 810a920:	4618      	mov	r0, r3
 810a922:	f001 f897 	bl	810ba54 <RCCEx_PLL3_Config>
 810a926:	4603      	mov	r3, r0
 810a928:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810a92c:	e006      	b.n	810a93c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a92e:	2301      	movs	r3, #1
 810a930:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810a934:	e002      	b.n	810a93c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810a936:	bf00      	nop
 810a938:	e000      	b.n	810a93c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810a93a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a93c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a940:	2b00      	cmp	r3, #0
 810a942:	d10a      	bne.n	810a95a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810a944:	4b37      	ldr	r3, [pc, #220]	@ (810aa24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a946:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810a948:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 810a94c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a950:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810a952:	4a34      	ldr	r2, [pc, #208]	@ (810aa24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a954:	430b      	orrs	r3, r1
 810a956:	6513      	str	r3, [r2, #80]	@ 0x50
 810a958:	e003      	b.n	810a962 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a95a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810a95e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810a962:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a966:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a96a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 810a96e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 810a972:	2300      	movs	r3, #0
 810a974:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 810a978:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 810a97c:	460b      	mov	r3, r1
 810a97e:	4313      	orrs	r3, r2
 810a980:	d056      	beq.n	810aa30 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 810a982:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a986:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810a988:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810a98c:	d033      	beq.n	810a9f6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810a98e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810a992:	d82c      	bhi.n	810a9ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 810a994:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810a998:	d02f      	beq.n	810a9fa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 810a99a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810a99e:	d826      	bhi.n	810a9ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 810a9a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810a9a4:	d02b      	beq.n	810a9fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 810a9a6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810a9aa:	d820      	bhi.n	810a9ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 810a9ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810a9b0:	d012      	beq.n	810a9d8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 810a9b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810a9b6:	d81a      	bhi.n	810a9ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 810a9b8:	2b00      	cmp	r3, #0
 810a9ba:	d022      	beq.n	810aa02 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 810a9bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810a9c0:	d115      	bne.n	810a9ee <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810a9c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a9c6:	3308      	adds	r3, #8
 810a9c8:	2101      	movs	r1, #1
 810a9ca:	4618      	mov	r0, r3
 810a9cc:	f000 ff90 	bl	810b8f0 <RCCEx_PLL2_Config>
 810a9d0:	4603      	mov	r3, r0
 810a9d2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810a9d6:	e015      	b.n	810aa04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810a9d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810a9dc:	3328      	adds	r3, #40	@ 0x28
 810a9de:	2101      	movs	r1, #1
 810a9e0:	4618      	mov	r0, r3
 810a9e2:	f001 f837 	bl	810ba54 <RCCEx_PLL3_Config>
 810a9e6:	4603      	mov	r3, r0
 810a9e8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810a9ec:	e00a      	b.n	810aa04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a9ee:	2301      	movs	r3, #1
 810a9f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810a9f4:	e006      	b.n	810aa04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810a9f6:	bf00      	nop
 810a9f8:	e004      	b.n	810aa04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810a9fa:	bf00      	nop
 810a9fc:	e002      	b.n	810aa04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810a9fe:	bf00      	nop
 810aa00:	e000      	b.n	810aa04 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810aa02:	bf00      	nop
    }

    if (ret == HAL_OK)
 810aa04:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810aa08:	2b00      	cmp	r3, #0
 810aa0a:	d10d      	bne.n	810aa28 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810aa0c:	4b05      	ldr	r3, [pc, #20]	@ (810aa24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810aa0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810aa10:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 810aa14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810aa18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810aa1a:	4a02      	ldr	r2, [pc, #8]	@ (810aa24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810aa1c:	430b      	orrs	r3, r1
 810aa1e:	6513      	str	r3, [r2, #80]	@ 0x50
 810aa20:	e006      	b.n	810aa30 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 810aa22:	bf00      	nop
 810aa24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810aa28:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810aa2c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 810aa30:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810aa34:	e9d3 2300 	ldrd	r2, r3, [r3]
 810aa38:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 810aa3c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 810aa40:	2300      	movs	r3, #0
 810aa42:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 810aa46:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 810aa4a:	460b      	mov	r3, r1
 810aa4c:	4313      	orrs	r3, r2
 810aa4e:	d055      	beq.n	810aafc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 810aa50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810aa54:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810aa58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810aa5c:	d033      	beq.n	810aac6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 810aa5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810aa62:	d82c      	bhi.n	810aabe <HAL_RCCEx_PeriphCLKConfig+0x662>
 810aa64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810aa68:	d02f      	beq.n	810aaca <HAL_RCCEx_PeriphCLKConfig+0x66e>
 810aa6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810aa6e:	d826      	bhi.n	810aabe <HAL_RCCEx_PeriphCLKConfig+0x662>
 810aa70:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810aa74:	d02b      	beq.n	810aace <HAL_RCCEx_PeriphCLKConfig+0x672>
 810aa76:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810aa7a:	d820      	bhi.n	810aabe <HAL_RCCEx_PeriphCLKConfig+0x662>
 810aa7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810aa80:	d012      	beq.n	810aaa8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 810aa82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810aa86:	d81a      	bhi.n	810aabe <HAL_RCCEx_PeriphCLKConfig+0x662>
 810aa88:	2b00      	cmp	r3, #0
 810aa8a:	d022      	beq.n	810aad2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 810aa8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810aa90:	d115      	bne.n	810aabe <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810aa92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810aa96:	3308      	adds	r3, #8
 810aa98:	2101      	movs	r1, #1
 810aa9a:	4618      	mov	r0, r3
 810aa9c:	f000 ff28 	bl	810b8f0 <RCCEx_PLL2_Config>
 810aaa0:	4603      	mov	r3, r0
 810aaa2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810aaa6:	e015      	b.n	810aad4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810aaa8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810aaac:	3328      	adds	r3, #40	@ 0x28
 810aaae:	2101      	movs	r1, #1
 810aab0:	4618      	mov	r0, r3
 810aab2:	f000 ffcf 	bl	810ba54 <RCCEx_PLL3_Config>
 810aab6:	4603      	mov	r3, r0
 810aab8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810aabc:	e00a      	b.n	810aad4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 810aabe:	2301      	movs	r3, #1
 810aac0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810aac4:	e006      	b.n	810aad4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810aac6:	bf00      	nop
 810aac8:	e004      	b.n	810aad4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810aaca:	bf00      	nop
 810aacc:	e002      	b.n	810aad4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810aace:	bf00      	nop
 810aad0:	e000      	b.n	810aad4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810aad2:	bf00      	nop
    }

    if (ret == HAL_OK)
 810aad4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810aad8:	2b00      	cmp	r3, #0
 810aada:	d10b      	bne.n	810aaf4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 810aadc:	4bb7      	ldr	r3, [pc, #732]	@ (810adbc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810aade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810aae0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 810aae4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810aae8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810aaec:	4ab3      	ldr	r2, [pc, #716]	@ (810adbc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810aaee:	430b      	orrs	r3, r1
 810aaf0:	6593      	str	r3, [r2, #88]	@ 0x58
 810aaf2:	e003      	b.n	810aafc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810aaf4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810aaf8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 810aafc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ab00:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ab04:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 810ab08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 810ab0c:	2300      	movs	r3, #0
 810ab0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 810ab12:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 810ab16:	460b      	mov	r3, r1
 810ab18:	4313      	orrs	r3, r2
 810ab1a:	d02a      	beq.n	810ab72 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 810ab1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ab20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810ab22:	2b00      	cmp	r3, #0
 810ab24:	d011      	beq.n	810ab4a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 810ab26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810ab2a:	d10a      	bne.n	810ab42 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810ab2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ab30:	3308      	adds	r3, #8
 810ab32:	2101      	movs	r1, #1
 810ab34:	4618      	mov	r0, r3
 810ab36:	f000 fedb 	bl	810b8f0 <RCCEx_PLL2_Config>
 810ab3a:	4603      	mov	r3, r0
 810ab3c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 810ab40:	e004      	b.n	810ab4c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810ab42:	2301      	movs	r3, #1
 810ab44:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810ab48:	e000      	b.n	810ab4c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 810ab4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810ab4c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810ab50:	2b00      	cmp	r3, #0
 810ab52:	d10a      	bne.n	810ab6a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 810ab54:	4b99      	ldr	r3, [pc, #612]	@ (810adbc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810ab56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810ab58:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 810ab5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ab60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810ab62:	4a96      	ldr	r2, [pc, #600]	@ (810adbc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810ab64:	430b      	orrs	r3, r1
 810ab66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810ab68:	e003      	b.n	810ab72 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810ab6a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810ab6e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 810ab72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ab76:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ab7a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 810ab7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 810ab82:	2300      	movs	r3, #0
 810ab84:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 810ab88:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 810ab8c:	460b      	mov	r3, r1
 810ab8e:	4313      	orrs	r3, r2
 810ab90:	d037      	beq.n	810ac02 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 810ab92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ab96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810ab98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810ab9c:	d00e      	beq.n	810abbc <HAL_RCCEx_PeriphCLKConfig+0x760>
 810ab9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810aba2:	d816      	bhi.n	810abd2 <HAL_RCCEx_PeriphCLKConfig+0x776>
 810aba4:	2b00      	cmp	r3, #0
 810aba6:	d018      	beq.n	810abda <HAL_RCCEx_PeriphCLKConfig+0x77e>
 810aba8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810abac:	d111      	bne.n	810abd2 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810abae:	4b83      	ldr	r3, [pc, #524]	@ (810adbc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810abb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810abb2:	4a82      	ldr	r2, [pc, #520]	@ (810adbc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810abb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810abb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810abba:	e00f      	b.n	810abdc <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810abbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810abc0:	3308      	adds	r3, #8
 810abc2:	2101      	movs	r1, #1
 810abc4:	4618      	mov	r0, r3
 810abc6:	f000 fe93 	bl	810b8f0 <RCCEx_PLL2_Config>
 810abca:	4603      	mov	r3, r0
 810abcc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810abd0:	e004      	b.n	810abdc <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810abd2:	2301      	movs	r3, #1
 810abd4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810abd8:	e000      	b.n	810abdc <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 810abda:	bf00      	nop
    }

    if (ret == HAL_OK)
 810abdc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810abe0:	2b00      	cmp	r3, #0
 810abe2:	d10a      	bne.n	810abfa <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810abe4:	4b75      	ldr	r3, [pc, #468]	@ (810adbc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810abe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810abe8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 810abec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810abf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810abf2:	4a72      	ldr	r2, [pc, #456]	@ (810adbc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810abf4:	430b      	orrs	r3, r1
 810abf6:	6513      	str	r3, [r2, #80]	@ 0x50
 810abf8:	e003      	b.n	810ac02 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810abfa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810abfe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 810ac02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ac06:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ac0a:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 810ac0e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 810ac12:	2300      	movs	r3, #0
 810ac14:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 810ac18:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 810ac1c:	460b      	mov	r3, r1
 810ac1e:	4313      	orrs	r3, r2
 810ac20:	d03a      	beq.n	810ac98 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 810ac22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ac26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810ac28:	2b03      	cmp	r3, #3
 810ac2a:	d81d      	bhi.n	810ac68 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 810ac2c:	a201      	add	r2, pc, #4	@ (adr r2, 810ac34 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 810ac2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ac32:	bf00      	nop
 810ac34:	0810ac71 	.word	0x0810ac71
 810ac38:	0810ac45 	.word	0x0810ac45
 810ac3c:	0810ac53 	.word	0x0810ac53
 810ac40:	0810ac71 	.word	0x0810ac71
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810ac44:	4b5d      	ldr	r3, [pc, #372]	@ (810adbc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810ac46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ac48:	4a5c      	ldr	r2, [pc, #368]	@ (810adbc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810ac4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810ac4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 810ac50:	e00f      	b.n	810ac72 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810ac52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ac56:	3308      	adds	r3, #8
 810ac58:	2102      	movs	r1, #2
 810ac5a:	4618      	mov	r0, r3
 810ac5c:	f000 fe48 	bl	810b8f0 <RCCEx_PLL2_Config>
 810ac60:	4603      	mov	r3, r0
 810ac62:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 810ac66:	e004      	b.n	810ac72 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 810ac68:	2301      	movs	r3, #1
 810ac6a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810ac6e:	e000      	b.n	810ac72 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 810ac70:	bf00      	nop
    }

    if (ret == HAL_OK)
 810ac72:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810ac76:	2b00      	cmp	r3, #0
 810ac78:	d10a      	bne.n	810ac90 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810ac7a:	4b50      	ldr	r3, [pc, #320]	@ (810adbc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810ac7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810ac7e:	f023 0103 	bic.w	r1, r3, #3
 810ac82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ac86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810ac88:	4a4c      	ldr	r2, [pc, #304]	@ (810adbc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810ac8a:	430b      	orrs	r3, r1
 810ac8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810ac8e:	e003      	b.n	810ac98 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810ac90:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810ac94:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 810ac98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ac9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810aca0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 810aca4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 810aca8:	2300      	movs	r3, #0
 810acaa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 810acae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 810acb2:	460b      	mov	r3, r1
 810acb4:	4313      	orrs	r3, r2
 810acb6:	f000 80a0 	beq.w	810adfa <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810acba:	4b41      	ldr	r3, [pc, #260]	@ (810adc0 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 810acbc:	681b      	ldr	r3, [r3, #0]
 810acbe:	4a40      	ldr	r2, [pc, #256]	@ (810adc0 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 810acc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810acc4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810acc6:	f7fc fa97 	bl	81071f8 <HAL_GetTick>
 810acca:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810acce:	e00b      	b.n	810ace8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 810acd0:	f7fc fa92 	bl	81071f8 <HAL_GetTick>
 810acd4:	4602      	mov	r2, r0
 810acd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 810acda:	1ad3      	subs	r3, r2, r3
 810acdc:	2b64      	cmp	r3, #100	@ 0x64
 810acde:	d903      	bls.n	810ace8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 810ace0:	2303      	movs	r3, #3
 810ace2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810ace6:	e005      	b.n	810acf4 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810ace8:	4b35      	ldr	r3, [pc, #212]	@ (810adc0 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 810acea:	681b      	ldr	r3, [r3, #0]
 810acec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810acf0:	2b00      	cmp	r3, #0
 810acf2:	d0ed      	beq.n	810acd0 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 810acf4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810acf8:	2b00      	cmp	r3, #0
 810acfa:	d17a      	bne.n	810adf2 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810acfc:	4b2f      	ldr	r3, [pc, #188]	@ (810adbc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810acfe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 810ad00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ad04:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810ad08:	4053      	eors	r3, r2
 810ad0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810ad0e:	2b00      	cmp	r3, #0
 810ad10:	d015      	beq.n	810ad3e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810ad12:	4b2a      	ldr	r3, [pc, #168]	@ (810adbc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810ad14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810ad16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810ad1a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810ad1e:	4b27      	ldr	r3, [pc, #156]	@ (810adbc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810ad20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810ad22:	4a26      	ldr	r2, [pc, #152]	@ (810adbc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810ad24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 810ad28:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810ad2a:	4b24      	ldr	r3, [pc, #144]	@ (810adbc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810ad2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810ad2e:	4a23      	ldr	r2, [pc, #140]	@ (810adbc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810ad30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810ad34:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810ad36:	4a21      	ldr	r2, [pc, #132]	@ (810adbc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810ad38:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 810ad3c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810ad3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ad42:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810ad46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810ad4a:	d118      	bne.n	810ad7e <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810ad4c:	f7fc fa54 	bl	81071f8 <HAL_GetTick>
 810ad50:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810ad54:	e00d      	b.n	810ad72 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810ad56:	f7fc fa4f 	bl	81071f8 <HAL_GetTick>
 810ad5a:	4602      	mov	r2, r0
 810ad5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 810ad60:	1ad2      	subs	r2, r2, r3
 810ad62:	f241 3388 	movw	r3, #5000	@ 0x1388
 810ad66:	429a      	cmp	r2, r3
 810ad68:	d903      	bls.n	810ad72 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 810ad6a:	2303      	movs	r3, #3
 810ad6c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 810ad70:	e005      	b.n	810ad7e <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810ad72:	4b12      	ldr	r3, [pc, #72]	@ (810adbc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810ad74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810ad76:	f003 0302 	and.w	r3, r3, #2
 810ad7a:	2b00      	cmp	r3, #0
 810ad7c:	d0eb      	beq.n	810ad56 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 810ad7e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810ad82:	2b00      	cmp	r3, #0
 810ad84:	d130      	bne.n	810ade8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 810ad86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ad8a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810ad8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810ad92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810ad96:	d115      	bne.n	810adc4 <HAL_RCCEx_PeriphCLKConfig+0x968>
 810ad98:	4b08      	ldr	r3, [pc, #32]	@ (810adbc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810ad9a:	691b      	ldr	r3, [r3, #16]
 810ad9c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 810ada0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ada4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810ada8:	091b      	lsrs	r3, r3, #4
 810adaa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 810adae:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 810adb2:	4a02      	ldr	r2, [pc, #8]	@ (810adbc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810adb4:	430b      	orrs	r3, r1
 810adb6:	6113      	str	r3, [r2, #16]
 810adb8:	e00a      	b.n	810add0 <HAL_RCCEx_PeriphCLKConfig+0x974>
 810adba:	bf00      	nop
 810adbc:	58024400 	.word	0x58024400
 810adc0:	58024800 	.word	0x58024800
 810adc4:	4bd4      	ldr	r3, [pc, #848]	@ (810b118 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810adc6:	691b      	ldr	r3, [r3, #16]
 810adc8:	4ad3      	ldr	r2, [pc, #844]	@ (810b118 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810adca:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 810adce:	6113      	str	r3, [r2, #16]
 810add0:	4bd1      	ldr	r3, [pc, #836]	@ (810b118 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810add2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 810add4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810add8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810addc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810ade0:	4acd      	ldr	r2, [pc, #820]	@ (810b118 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810ade2:	430b      	orrs	r3, r1
 810ade4:	6713      	str	r3, [r2, #112]	@ 0x70
 810ade6:	e008      	b.n	810adfa <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810ade8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810adec:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 810adf0:	e003      	b.n	810adfa <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 810adf2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810adf6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 810adfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810adfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ae02:	f002 0301 	and.w	r3, r2, #1
 810ae06:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 810ae0a:	2300      	movs	r3, #0
 810ae0c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 810ae10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 810ae14:	460b      	mov	r3, r1
 810ae16:	4313      	orrs	r3, r2
 810ae18:	f000 808b 	beq.w	810af32 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 810ae1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810ae20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810ae24:	2b28      	cmp	r3, #40	@ 0x28
 810ae26:	d86b      	bhi.n	810af00 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 810ae28:	a201      	add	r2, pc, #4	@ (adr r2, 810ae30 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 810ae2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ae2e:	bf00      	nop
 810ae30:	0810af09 	.word	0x0810af09
 810ae34:	0810af01 	.word	0x0810af01
 810ae38:	0810af01 	.word	0x0810af01
 810ae3c:	0810af01 	.word	0x0810af01
 810ae40:	0810af01 	.word	0x0810af01
 810ae44:	0810af01 	.word	0x0810af01
 810ae48:	0810af01 	.word	0x0810af01
 810ae4c:	0810af01 	.word	0x0810af01
 810ae50:	0810aed5 	.word	0x0810aed5
 810ae54:	0810af01 	.word	0x0810af01
 810ae58:	0810af01 	.word	0x0810af01
 810ae5c:	0810af01 	.word	0x0810af01
 810ae60:	0810af01 	.word	0x0810af01
 810ae64:	0810af01 	.word	0x0810af01
 810ae68:	0810af01 	.word	0x0810af01
 810ae6c:	0810af01 	.word	0x0810af01
 810ae70:	0810aeeb 	.word	0x0810aeeb
 810ae74:	0810af01 	.word	0x0810af01
 810ae78:	0810af01 	.word	0x0810af01
 810ae7c:	0810af01 	.word	0x0810af01
 810ae80:	0810af01 	.word	0x0810af01
 810ae84:	0810af01 	.word	0x0810af01
 810ae88:	0810af01 	.word	0x0810af01
 810ae8c:	0810af01 	.word	0x0810af01
 810ae90:	0810af09 	.word	0x0810af09
 810ae94:	0810af01 	.word	0x0810af01
 810ae98:	0810af01 	.word	0x0810af01
 810ae9c:	0810af01 	.word	0x0810af01
 810aea0:	0810af01 	.word	0x0810af01
 810aea4:	0810af01 	.word	0x0810af01
 810aea8:	0810af01 	.word	0x0810af01
 810aeac:	0810af01 	.word	0x0810af01
 810aeb0:	0810af09 	.word	0x0810af09
 810aeb4:	0810af01 	.word	0x0810af01
 810aeb8:	0810af01 	.word	0x0810af01
 810aebc:	0810af01 	.word	0x0810af01
 810aec0:	0810af01 	.word	0x0810af01
 810aec4:	0810af01 	.word	0x0810af01
 810aec8:	0810af01 	.word	0x0810af01
 810aecc:	0810af01 	.word	0x0810af01
 810aed0:	0810af09 	.word	0x0810af09
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810aed4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810aed8:	3308      	adds	r3, #8
 810aeda:	2101      	movs	r1, #1
 810aedc:	4618      	mov	r0, r3
 810aede:	f000 fd07 	bl	810b8f0 <RCCEx_PLL2_Config>
 810aee2:	4603      	mov	r3, r0
 810aee4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810aee8:	e00f      	b.n	810af0a <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810aeea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810aeee:	3328      	adds	r3, #40	@ 0x28
 810aef0:	2101      	movs	r1, #1
 810aef2:	4618      	mov	r0, r3
 810aef4:	f000 fdae 	bl	810ba54 <RCCEx_PLL3_Config>
 810aef8:	4603      	mov	r3, r0
 810aefa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810aefe:	e004      	b.n	810af0a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810af00:	2301      	movs	r3, #1
 810af02:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810af06:	e000      	b.n	810af0a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 810af08:	bf00      	nop
    }

    if (ret == HAL_OK)
 810af0a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810af0e:	2b00      	cmp	r3, #0
 810af10:	d10b      	bne.n	810af2a <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810af12:	4b81      	ldr	r3, [pc, #516]	@ (810b118 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810af14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810af16:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 810af1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810af1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810af22:	4a7d      	ldr	r2, [pc, #500]	@ (810b118 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810af24:	430b      	orrs	r3, r1
 810af26:	6553      	str	r3, [r2, #84]	@ 0x54
 810af28:	e003      	b.n	810af32 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810af2a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810af2e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810af32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810af36:	e9d3 2300 	ldrd	r2, r3, [r3]
 810af3a:	f002 0302 	and.w	r3, r2, #2
 810af3e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 810af42:	2300      	movs	r3, #0
 810af44:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 810af48:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 810af4c:	460b      	mov	r3, r1
 810af4e:	4313      	orrs	r3, r2
 810af50:	d042      	beq.n	810afd8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 810af52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810af56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810af58:	2b05      	cmp	r3, #5
 810af5a:	d825      	bhi.n	810afa8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 810af5c:	a201      	add	r2, pc, #4	@ (adr r2, 810af64 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 810af5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810af62:	bf00      	nop
 810af64:	0810afb1 	.word	0x0810afb1
 810af68:	0810af7d 	.word	0x0810af7d
 810af6c:	0810af93 	.word	0x0810af93
 810af70:	0810afb1 	.word	0x0810afb1
 810af74:	0810afb1 	.word	0x0810afb1
 810af78:	0810afb1 	.word	0x0810afb1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810af7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810af80:	3308      	adds	r3, #8
 810af82:	2101      	movs	r1, #1
 810af84:	4618      	mov	r0, r3
 810af86:	f000 fcb3 	bl	810b8f0 <RCCEx_PLL2_Config>
 810af8a:	4603      	mov	r3, r0
 810af8c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810af90:	e00f      	b.n	810afb2 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810af92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810af96:	3328      	adds	r3, #40	@ 0x28
 810af98:	2101      	movs	r1, #1
 810af9a:	4618      	mov	r0, r3
 810af9c:	f000 fd5a 	bl	810ba54 <RCCEx_PLL3_Config>
 810afa0:	4603      	mov	r3, r0
 810afa2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810afa6:	e004      	b.n	810afb2 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810afa8:	2301      	movs	r3, #1
 810afaa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810afae:	e000      	b.n	810afb2 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 810afb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 810afb2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810afb6:	2b00      	cmp	r3, #0
 810afb8:	d10a      	bne.n	810afd0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810afba:	4b57      	ldr	r3, [pc, #348]	@ (810b118 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810afbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810afbe:	f023 0107 	bic.w	r1, r3, #7
 810afc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810afc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810afc8:	4a53      	ldr	r2, [pc, #332]	@ (810b118 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810afca:	430b      	orrs	r3, r1
 810afcc:	6553      	str	r3, [r2, #84]	@ 0x54
 810afce:	e003      	b.n	810afd8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810afd0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810afd4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 810afd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810afdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810afe0:	f002 0304 	and.w	r3, r2, #4
 810afe4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 810afe8:	2300      	movs	r3, #0
 810afea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 810afee:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 810aff2:	460b      	mov	r3, r1
 810aff4:	4313      	orrs	r3, r2
 810aff6:	d044      	beq.n	810b082 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 810aff8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810affc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810b000:	2b05      	cmp	r3, #5
 810b002:	d825      	bhi.n	810b050 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 810b004:	a201      	add	r2, pc, #4	@ (adr r2, 810b00c <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 810b006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b00a:	bf00      	nop
 810b00c:	0810b059 	.word	0x0810b059
 810b010:	0810b025 	.word	0x0810b025
 810b014:	0810b03b 	.word	0x0810b03b
 810b018:	0810b059 	.word	0x0810b059
 810b01c:	0810b059 	.word	0x0810b059
 810b020:	0810b059 	.word	0x0810b059
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810b024:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b028:	3308      	adds	r3, #8
 810b02a:	2101      	movs	r1, #1
 810b02c:	4618      	mov	r0, r3
 810b02e:	f000 fc5f 	bl	810b8f0 <RCCEx_PLL2_Config>
 810b032:	4603      	mov	r3, r0
 810b034:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810b038:	e00f      	b.n	810b05a <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810b03a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b03e:	3328      	adds	r3, #40	@ 0x28
 810b040:	2101      	movs	r1, #1
 810b042:	4618      	mov	r0, r3
 810b044:	f000 fd06 	bl	810ba54 <RCCEx_PLL3_Config>
 810b048:	4603      	mov	r3, r0
 810b04a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810b04e:	e004      	b.n	810b05a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810b050:	2301      	movs	r3, #1
 810b052:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810b056:	e000      	b.n	810b05a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 810b058:	bf00      	nop
    }

    if (ret == HAL_OK)
 810b05a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b05e:	2b00      	cmp	r3, #0
 810b060:	d10b      	bne.n	810b07a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810b062:	4b2d      	ldr	r3, [pc, #180]	@ (810b118 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810b064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b066:	f023 0107 	bic.w	r1, r3, #7
 810b06a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b06e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810b072:	4a29      	ldr	r2, [pc, #164]	@ (810b118 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810b074:	430b      	orrs	r3, r1
 810b076:	6593      	str	r3, [r2, #88]	@ 0x58
 810b078:	e003      	b.n	810b082 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b07a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b07e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810b082:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b086:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b08a:	f002 0320 	and.w	r3, r2, #32
 810b08e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 810b092:	2300      	movs	r3, #0
 810b094:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 810b098:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 810b09c:	460b      	mov	r3, r1
 810b09e:	4313      	orrs	r3, r2
 810b0a0:	d057      	beq.n	810b152 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 810b0a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b0a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810b0aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810b0ae:	d035      	beq.n	810b11c <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 810b0b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810b0b4:	d82c      	bhi.n	810b110 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810b0b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810b0ba:	d031      	beq.n	810b120 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 810b0bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810b0c0:	d826      	bhi.n	810b110 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810b0c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810b0c6:	d02d      	beq.n	810b124 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 810b0c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810b0cc:	d820      	bhi.n	810b110 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810b0ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810b0d2:	d012      	beq.n	810b0fa <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 810b0d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810b0d8:	d81a      	bhi.n	810b110 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810b0da:	2b00      	cmp	r3, #0
 810b0dc:	d024      	beq.n	810b128 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 810b0de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810b0e2:	d115      	bne.n	810b110 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810b0e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b0e8:	3308      	adds	r3, #8
 810b0ea:	2100      	movs	r1, #0
 810b0ec:	4618      	mov	r0, r3
 810b0ee:	f000 fbff 	bl	810b8f0 <RCCEx_PLL2_Config>
 810b0f2:	4603      	mov	r3, r0
 810b0f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810b0f8:	e017      	b.n	810b12a <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810b0fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b0fe:	3328      	adds	r3, #40	@ 0x28
 810b100:	2102      	movs	r1, #2
 810b102:	4618      	mov	r0, r3
 810b104:	f000 fca6 	bl	810ba54 <RCCEx_PLL3_Config>
 810b108:	4603      	mov	r3, r0
 810b10a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810b10e:	e00c      	b.n	810b12a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810b110:	2301      	movs	r3, #1
 810b112:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810b116:	e008      	b.n	810b12a <HAL_RCCEx_PeriphCLKConfig+0xcce>
 810b118:	58024400 	.word	0x58024400
        break;
 810b11c:	bf00      	nop
 810b11e:	e004      	b.n	810b12a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 810b120:	bf00      	nop
 810b122:	e002      	b.n	810b12a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 810b124:	bf00      	nop
 810b126:	e000      	b.n	810b12a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 810b128:	bf00      	nop
    }

    if (ret == HAL_OK)
 810b12a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b12e:	2b00      	cmp	r3, #0
 810b130:	d10b      	bne.n	810b14a <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810b132:	4bc2      	ldr	r3, [pc, #776]	@ (810b43c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810b134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b136:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 810b13a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b13e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810b142:	4abe      	ldr	r2, [pc, #760]	@ (810b43c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810b144:	430b      	orrs	r3, r1
 810b146:	6553      	str	r3, [r2, #84]	@ 0x54
 810b148:	e003      	b.n	810b152 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b14a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b14e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 810b152:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b156:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b15a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 810b15e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 810b162:	2300      	movs	r3, #0
 810b164:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 810b168:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 810b16c:	460b      	mov	r3, r1
 810b16e:	4313      	orrs	r3, r2
 810b170:	d055      	beq.n	810b21e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 810b172:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b176:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810b17a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 810b17e:	d033      	beq.n	810b1e8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 810b180:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 810b184:	d82c      	bhi.n	810b1e0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 810b186:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810b18a:	d02f      	beq.n	810b1ec <HAL_RCCEx_PeriphCLKConfig+0xd90>
 810b18c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810b190:	d826      	bhi.n	810b1e0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 810b192:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 810b196:	d02b      	beq.n	810b1f0 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 810b198:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 810b19c:	d820      	bhi.n	810b1e0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 810b19e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810b1a2:	d012      	beq.n	810b1ca <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 810b1a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810b1a8:	d81a      	bhi.n	810b1e0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 810b1aa:	2b00      	cmp	r3, #0
 810b1ac:	d022      	beq.n	810b1f4 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 810b1ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 810b1b2:	d115      	bne.n	810b1e0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810b1b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b1b8:	3308      	adds	r3, #8
 810b1ba:	2100      	movs	r1, #0
 810b1bc:	4618      	mov	r0, r3
 810b1be:	f000 fb97 	bl	810b8f0 <RCCEx_PLL2_Config>
 810b1c2:	4603      	mov	r3, r0
 810b1c4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810b1c8:	e015      	b.n	810b1f6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810b1ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b1ce:	3328      	adds	r3, #40	@ 0x28
 810b1d0:	2102      	movs	r1, #2
 810b1d2:	4618      	mov	r0, r3
 810b1d4:	f000 fc3e 	bl	810ba54 <RCCEx_PLL3_Config>
 810b1d8:	4603      	mov	r3, r0
 810b1da:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810b1de:	e00a      	b.n	810b1f6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810b1e0:	2301      	movs	r3, #1
 810b1e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810b1e6:	e006      	b.n	810b1f6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 810b1e8:	bf00      	nop
 810b1ea:	e004      	b.n	810b1f6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 810b1ec:	bf00      	nop
 810b1ee:	e002      	b.n	810b1f6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 810b1f0:	bf00      	nop
 810b1f2:	e000      	b.n	810b1f6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 810b1f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 810b1f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b1fa:	2b00      	cmp	r3, #0
 810b1fc:	d10b      	bne.n	810b216 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810b1fe:	4b8f      	ldr	r3, [pc, #572]	@ (810b43c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810b200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b202:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 810b206:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b20a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810b20e:	4a8b      	ldr	r2, [pc, #556]	@ (810b43c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810b210:	430b      	orrs	r3, r1
 810b212:	6593      	str	r3, [r2, #88]	@ 0x58
 810b214:	e003      	b.n	810b21e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b216:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b21a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 810b21e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b222:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b226:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 810b22a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 810b22e:	2300      	movs	r3, #0
 810b230:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 810b234:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 810b238:	460b      	mov	r3, r1
 810b23a:	4313      	orrs	r3, r2
 810b23c:	d055      	beq.n	810b2ea <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 810b23e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b242:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810b246:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 810b24a:	d033      	beq.n	810b2b4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 810b24c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 810b250:	d82c      	bhi.n	810b2ac <HAL_RCCEx_PeriphCLKConfig+0xe50>
 810b252:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810b256:	d02f      	beq.n	810b2b8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 810b258:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810b25c:	d826      	bhi.n	810b2ac <HAL_RCCEx_PeriphCLKConfig+0xe50>
 810b25e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 810b262:	d02b      	beq.n	810b2bc <HAL_RCCEx_PeriphCLKConfig+0xe60>
 810b264:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 810b268:	d820      	bhi.n	810b2ac <HAL_RCCEx_PeriphCLKConfig+0xe50>
 810b26a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810b26e:	d012      	beq.n	810b296 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 810b270:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810b274:	d81a      	bhi.n	810b2ac <HAL_RCCEx_PeriphCLKConfig+0xe50>
 810b276:	2b00      	cmp	r3, #0
 810b278:	d022      	beq.n	810b2c0 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 810b27a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810b27e:	d115      	bne.n	810b2ac <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810b280:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b284:	3308      	adds	r3, #8
 810b286:	2100      	movs	r1, #0
 810b288:	4618      	mov	r0, r3
 810b28a:	f000 fb31 	bl	810b8f0 <RCCEx_PLL2_Config>
 810b28e:	4603      	mov	r3, r0
 810b290:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810b294:	e015      	b.n	810b2c2 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810b296:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b29a:	3328      	adds	r3, #40	@ 0x28
 810b29c:	2102      	movs	r1, #2
 810b29e:	4618      	mov	r0, r3
 810b2a0:	f000 fbd8 	bl	810ba54 <RCCEx_PLL3_Config>
 810b2a4:	4603      	mov	r3, r0
 810b2a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810b2aa:	e00a      	b.n	810b2c2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810b2ac:	2301      	movs	r3, #1
 810b2ae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810b2b2:	e006      	b.n	810b2c2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 810b2b4:	bf00      	nop
 810b2b6:	e004      	b.n	810b2c2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 810b2b8:	bf00      	nop
 810b2ba:	e002      	b.n	810b2c2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 810b2bc:	bf00      	nop
 810b2be:	e000      	b.n	810b2c2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 810b2c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 810b2c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b2c6:	2b00      	cmp	r3, #0
 810b2c8:	d10b      	bne.n	810b2e2 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810b2ca:	4b5c      	ldr	r3, [pc, #368]	@ (810b43c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810b2cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b2ce:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 810b2d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b2d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810b2da:	4a58      	ldr	r2, [pc, #352]	@ (810b43c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810b2dc:	430b      	orrs	r3, r1
 810b2de:	6593      	str	r3, [r2, #88]	@ 0x58
 810b2e0:	e003      	b.n	810b2ea <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b2e2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b2e6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810b2ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b2f2:	f002 0308 	and.w	r3, r2, #8
 810b2f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 810b2fa:	2300      	movs	r3, #0
 810b2fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810b300:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 810b304:	460b      	mov	r3, r1
 810b306:	4313      	orrs	r3, r2
 810b308:	d01e      	beq.n	810b348 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 810b30a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b30e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810b312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810b316:	d10c      	bne.n	810b332 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810b318:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b31c:	3328      	adds	r3, #40	@ 0x28
 810b31e:	2102      	movs	r1, #2
 810b320:	4618      	mov	r0, r3
 810b322:	f000 fb97 	bl	810ba54 <RCCEx_PLL3_Config>
 810b326:	4603      	mov	r3, r0
 810b328:	2b00      	cmp	r3, #0
 810b32a:	d002      	beq.n	810b332 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 810b32c:	2301      	movs	r3, #1
 810b32e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810b332:	4b42      	ldr	r3, [pc, #264]	@ (810b43c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810b334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b336:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810b33a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b33e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810b342:	4a3e      	ldr	r2, [pc, #248]	@ (810b43c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810b344:	430b      	orrs	r3, r1
 810b346:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810b348:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b350:	f002 0310 	and.w	r3, r2, #16
 810b354:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 810b358:	2300      	movs	r3, #0
 810b35a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 810b35e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 810b362:	460b      	mov	r3, r1
 810b364:	4313      	orrs	r3, r2
 810b366:	d01e      	beq.n	810b3a6 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 810b368:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b36c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810b370:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810b374:	d10c      	bne.n	810b390 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810b376:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b37a:	3328      	adds	r3, #40	@ 0x28
 810b37c:	2102      	movs	r1, #2
 810b37e:	4618      	mov	r0, r3
 810b380:	f000 fb68 	bl	810ba54 <RCCEx_PLL3_Config>
 810b384:	4603      	mov	r3, r0
 810b386:	2b00      	cmp	r3, #0
 810b388:	d002      	beq.n	810b390 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 810b38a:	2301      	movs	r3, #1
 810b38c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810b390:	4b2a      	ldr	r3, [pc, #168]	@ (810b43c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810b392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b394:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810b398:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b39c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810b3a0:	4a26      	ldr	r2, [pc, #152]	@ (810b43c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810b3a2:	430b      	orrs	r3, r1
 810b3a4:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 810b3a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b3ae:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 810b3b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810b3b6:	2300      	movs	r3, #0
 810b3b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810b3bc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 810b3c0:	460b      	mov	r3, r1
 810b3c2:	4313      	orrs	r3, r2
 810b3c4:	d040      	beq.n	810b448 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 810b3c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b3ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 810b3ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810b3d2:	d022      	beq.n	810b41a <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 810b3d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810b3d8:	d81b      	bhi.n	810b412 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 810b3da:	2b00      	cmp	r3, #0
 810b3dc:	d003      	beq.n	810b3e6 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 810b3de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810b3e2:	d00b      	beq.n	810b3fc <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 810b3e4:	e015      	b.n	810b412 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810b3e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b3ea:	3308      	adds	r3, #8
 810b3ec:	2100      	movs	r1, #0
 810b3ee:	4618      	mov	r0, r3
 810b3f0:	f000 fa7e 	bl	810b8f0 <RCCEx_PLL2_Config>
 810b3f4:	4603      	mov	r3, r0
 810b3f6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 810b3fa:	e00f      	b.n	810b41c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810b3fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b400:	3328      	adds	r3, #40	@ 0x28
 810b402:	2102      	movs	r1, #2
 810b404:	4618      	mov	r0, r3
 810b406:	f000 fb25 	bl	810ba54 <RCCEx_PLL3_Config>
 810b40a:	4603      	mov	r3, r0
 810b40c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 810b410:	e004      	b.n	810b41c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810b412:	2301      	movs	r3, #1
 810b414:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810b418:	e000      	b.n	810b41c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 810b41a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810b41c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b420:	2b00      	cmp	r3, #0
 810b422:	d10d      	bne.n	810b440 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 810b424:	4b05      	ldr	r3, [pc, #20]	@ (810b43c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810b426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b428:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 810b42c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b430:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 810b434:	4a01      	ldr	r2, [pc, #4]	@ (810b43c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810b436:	430b      	orrs	r3, r1
 810b438:	6593      	str	r3, [r2, #88]	@ 0x58
 810b43a:	e005      	b.n	810b448 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 810b43c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b440:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b444:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810b448:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b450:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 810b454:	67bb      	str	r3, [r7, #120]	@ 0x78
 810b456:	2300      	movs	r3, #0
 810b458:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810b45a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 810b45e:	460b      	mov	r3, r1
 810b460:	4313      	orrs	r3, r2
 810b462:	d03b      	beq.n	810b4dc <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 810b464:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b468:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810b46c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810b470:	d01f      	beq.n	810b4b2 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 810b472:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810b476:	d818      	bhi.n	810b4aa <HAL_RCCEx_PeriphCLKConfig+0x104e>
 810b478:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810b47c:	d003      	beq.n	810b486 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 810b47e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810b482:	d007      	beq.n	810b494 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 810b484:	e011      	b.n	810b4aa <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810b486:	4b64      	ldr	r3, [pc, #400]	@ (810b618 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810b488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b48a:	4a63      	ldr	r2, [pc, #396]	@ (810b618 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810b48c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810b490:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 810b492:	e00f      	b.n	810b4b4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810b494:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b498:	3328      	adds	r3, #40	@ 0x28
 810b49a:	2101      	movs	r1, #1
 810b49c:	4618      	mov	r0, r3
 810b49e:	f000 fad9 	bl	810ba54 <RCCEx_PLL3_Config>
 810b4a2:	4603      	mov	r3, r0
 810b4a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 810b4a8:	e004      	b.n	810b4b4 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810b4aa:	2301      	movs	r3, #1
 810b4ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810b4b0:	e000      	b.n	810b4b4 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 810b4b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 810b4b4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b4b8:	2b00      	cmp	r3, #0
 810b4ba:	d10b      	bne.n	810b4d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810b4bc:	4b56      	ldr	r3, [pc, #344]	@ (810b618 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810b4be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b4c0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810b4c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b4c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810b4cc:	4a52      	ldr	r2, [pc, #328]	@ (810b618 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810b4ce:	430b      	orrs	r3, r1
 810b4d0:	6553      	str	r3, [r2, #84]	@ 0x54
 810b4d2:	e003      	b.n	810b4dc <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b4d4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b4d8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810b4dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b4e4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 810b4e8:	673b      	str	r3, [r7, #112]	@ 0x70
 810b4ea:	2300      	movs	r3, #0
 810b4ec:	677b      	str	r3, [r7, #116]	@ 0x74
 810b4ee:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 810b4f2:	460b      	mov	r3, r1
 810b4f4:	4313      	orrs	r3, r2
 810b4f6:	d031      	beq.n	810b55c <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 810b4f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b4fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b4fe:	2b00      	cmp	r3, #0
 810b500:	d003      	beq.n	810b50a <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 810b502:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810b506:	d007      	beq.n	810b518 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 810b508:	e011      	b.n	810b52e <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810b50a:	4b43      	ldr	r3, [pc, #268]	@ (810b618 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810b50c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b50e:	4a42      	ldr	r2, [pc, #264]	@ (810b618 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810b510:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810b514:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810b516:	e00e      	b.n	810b536 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810b518:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b51c:	3308      	adds	r3, #8
 810b51e:	2102      	movs	r1, #2
 810b520:	4618      	mov	r0, r3
 810b522:	f000 f9e5 	bl	810b8f0 <RCCEx_PLL2_Config>
 810b526:	4603      	mov	r3, r0
 810b528:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810b52c:	e003      	b.n	810b536 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 810b52e:	2301      	movs	r3, #1
 810b530:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810b534:	bf00      	nop
    }

    if (ret == HAL_OK)
 810b536:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b53a:	2b00      	cmp	r3, #0
 810b53c:	d10a      	bne.n	810b554 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810b53e:	4b36      	ldr	r3, [pc, #216]	@ (810b618 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810b540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810b542:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810b546:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b54a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b54c:	4a32      	ldr	r2, [pc, #200]	@ (810b618 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810b54e:	430b      	orrs	r3, r1
 810b550:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810b552:	e003      	b.n	810b55c <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b554:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b558:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810b55c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b560:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b564:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 810b568:	66bb      	str	r3, [r7, #104]	@ 0x68
 810b56a:	2300      	movs	r3, #0
 810b56c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 810b56e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 810b572:	460b      	mov	r3, r1
 810b574:	4313      	orrs	r3, r2
 810b576:	d00c      	beq.n	810b592 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810b578:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b57c:	3328      	adds	r3, #40	@ 0x28
 810b57e:	2102      	movs	r1, #2
 810b580:	4618      	mov	r0, r3
 810b582:	f000 fa67 	bl	810ba54 <RCCEx_PLL3_Config>
 810b586:	4603      	mov	r3, r0
 810b588:	2b00      	cmp	r3, #0
 810b58a:	d002      	beq.n	810b592 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 810b58c:	2301      	movs	r3, #1
 810b58e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810b592:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b596:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b59a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 810b59e:	663b      	str	r3, [r7, #96]	@ 0x60
 810b5a0:	2300      	movs	r3, #0
 810b5a2:	667b      	str	r3, [r7, #100]	@ 0x64
 810b5a4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 810b5a8:	460b      	mov	r3, r1
 810b5aa:	4313      	orrs	r3, r2
 810b5ac:	d03a      	beq.n	810b624 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 810b5ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b5b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810b5b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810b5ba:	d018      	beq.n	810b5ee <HAL_RCCEx_PeriphCLKConfig+0x1192>
 810b5bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810b5c0:	d811      	bhi.n	810b5e6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 810b5c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810b5c6:	d014      	beq.n	810b5f2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 810b5c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810b5cc:	d80b      	bhi.n	810b5e6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 810b5ce:	2b00      	cmp	r3, #0
 810b5d0:	d011      	beq.n	810b5f6 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 810b5d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810b5d6:	d106      	bne.n	810b5e6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810b5d8:	4b0f      	ldr	r3, [pc, #60]	@ (810b618 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810b5da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b5dc:	4a0e      	ldr	r2, [pc, #56]	@ (810b618 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810b5de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810b5e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 810b5e4:	e008      	b.n	810b5f8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810b5e6:	2301      	movs	r3, #1
 810b5e8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810b5ec:	e004      	b.n	810b5f8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 810b5ee:	bf00      	nop
 810b5f0:	e002      	b.n	810b5f8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 810b5f2:	bf00      	nop
 810b5f4:	e000      	b.n	810b5f8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 810b5f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 810b5f8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b5fc:	2b00      	cmp	r3, #0
 810b5fe:	d10d      	bne.n	810b61c <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810b600:	4b05      	ldr	r3, [pc, #20]	@ (810b618 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810b602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b604:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810b608:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b60c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810b610:	4a01      	ldr	r2, [pc, #4]	@ (810b618 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810b612:	430b      	orrs	r3, r1
 810b614:	6553      	str	r3, [r2, #84]	@ 0x54
 810b616:	e005      	b.n	810b624 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 810b618:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b61c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b620:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810b624:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b628:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b62c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 810b630:	65bb      	str	r3, [r7, #88]	@ 0x58
 810b632:	2300      	movs	r3, #0
 810b634:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810b636:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 810b63a:	460b      	mov	r3, r1
 810b63c:	4313      	orrs	r3, r2
 810b63e:	d009      	beq.n	810b654 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 810b640:	4baa      	ldr	r3, [pc, #680]	@ (810b8ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b642:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810b644:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 810b648:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b64c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810b64e:	4aa7      	ldr	r2, [pc, #668]	@ (810b8ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b650:	430b      	orrs	r3, r1
 810b652:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 810b654:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b658:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b65c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 810b660:	653b      	str	r3, [r7, #80]	@ 0x50
 810b662:	2300      	movs	r3, #0
 810b664:	657b      	str	r3, [r7, #84]	@ 0x54
 810b666:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 810b66a:	460b      	mov	r3, r1
 810b66c:	4313      	orrs	r3, r2
 810b66e:	d00a      	beq.n	810b686 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 810b670:	4b9e      	ldr	r3, [pc, #632]	@ (810b8ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b672:	691b      	ldr	r3, [r3, #16]
 810b674:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 810b678:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b67c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 810b680:	4a9a      	ldr	r2, [pc, #616]	@ (810b8ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b682:	430b      	orrs	r3, r1
 810b684:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810b686:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b68e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 810b692:	64bb      	str	r3, [r7, #72]	@ 0x48
 810b694:	2300      	movs	r3, #0
 810b696:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810b698:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 810b69c:	460b      	mov	r3, r1
 810b69e:	4313      	orrs	r3, r2
 810b6a0:	d009      	beq.n	810b6b6 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810b6a2:	4b92      	ldr	r3, [pc, #584]	@ (810b8ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b6a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810b6a6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 810b6aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b6ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810b6b0:	4a8e      	ldr	r2, [pc, #568]	@ (810b8ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b6b2:	430b      	orrs	r3, r1
 810b6b4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810b6b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b6be:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 810b6c2:	643b      	str	r3, [r7, #64]	@ 0x40
 810b6c4:	2300      	movs	r3, #0
 810b6c6:	647b      	str	r3, [r7, #68]	@ 0x44
 810b6c8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 810b6cc:	460b      	mov	r3, r1
 810b6ce:	4313      	orrs	r3, r2
 810b6d0:	d00e      	beq.n	810b6f0 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810b6d2:	4b86      	ldr	r3, [pc, #536]	@ (810b8ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b6d4:	691b      	ldr	r3, [r3, #16]
 810b6d6:	4a85      	ldr	r2, [pc, #532]	@ (810b8ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b6d8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 810b6dc:	6113      	str	r3, [r2, #16]
 810b6de:	4b83      	ldr	r3, [pc, #524]	@ (810b8ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b6e0:	6919      	ldr	r1, [r3, #16]
 810b6e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b6e6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 810b6ea:	4a80      	ldr	r2, [pc, #512]	@ (810b8ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b6ec:	430b      	orrs	r3, r1
 810b6ee:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 810b6f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b6f8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 810b6fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 810b6fe:	2300      	movs	r3, #0
 810b700:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810b702:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 810b706:	460b      	mov	r3, r1
 810b708:	4313      	orrs	r3, r2
 810b70a:	d009      	beq.n	810b720 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 810b70c:	4b77      	ldr	r3, [pc, #476]	@ (810b8ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b70e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810b710:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 810b714:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b71a:	4a74      	ldr	r2, [pc, #464]	@ (810b8ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b71c:	430b      	orrs	r3, r1
 810b71e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810b720:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b724:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b728:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 810b72c:	633b      	str	r3, [r7, #48]	@ 0x30
 810b72e:	2300      	movs	r3, #0
 810b730:	637b      	str	r3, [r7, #52]	@ 0x34
 810b732:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 810b736:	460b      	mov	r3, r1
 810b738:	4313      	orrs	r3, r2
 810b73a:	d00a      	beq.n	810b752 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810b73c:	4b6b      	ldr	r3, [pc, #428]	@ (810b8ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b73e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b740:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 810b744:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810b74c:	4a67      	ldr	r2, [pc, #412]	@ (810b8ec <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b74e:	430b      	orrs	r3, r1
 810b750:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 810b752:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b756:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b75a:	2100      	movs	r1, #0
 810b75c:	62b9      	str	r1, [r7, #40]	@ 0x28
 810b75e:	f003 0301 	and.w	r3, r3, #1
 810b762:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810b764:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 810b768:	460b      	mov	r3, r1
 810b76a:	4313      	orrs	r3, r2
 810b76c:	d011      	beq.n	810b792 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810b76e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b772:	3308      	adds	r3, #8
 810b774:	2100      	movs	r1, #0
 810b776:	4618      	mov	r0, r3
 810b778:	f000 f8ba 	bl	810b8f0 <RCCEx_PLL2_Config>
 810b77c:	4603      	mov	r3, r0
 810b77e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810b782:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b786:	2b00      	cmp	r3, #0
 810b788:	d003      	beq.n	810b792 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b78a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b78e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 810b792:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b796:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b79a:	2100      	movs	r1, #0
 810b79c:	6239      	str	r1, [r7, #32]
 810b79e:	f003 0302 	and.w	r3, r3, #2
 810b7a2:	627b      	str	r3, [r7, #36]	@ 0x24
 810b7a4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 810b7a8:	460b      	mov	r3, r1
 810b7aa:	4313      	orrs	r3, r2
 810b7ac:	d011      	beq.n	810b7d2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810b7ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b7b2:	3308      	adds	r3, #8
 810b7b4:	2101      	movs	r1, #1
 810b7b6:	4618      	mov	r0, r3
 810b7b8:	f000 f89a 	bl	810b8f0 <RCCEx_PLL2_Config>
 810b7bc:	4603      	mov	r3, r0
 810b7be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810b7c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b7c6:	2b00      	cmp	r3, #0
 810b7c8:	d003      	beq.n	810b7d2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b7ca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b7ce:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 810b7d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b7da:	2100      	movs	r1, #0
 810b7dc:	61b9      	str	r1, [r7, #24]
 810b7de:	f003 0304 	and.w	r3, r3, #4
 810b7e2:	61fb      	str	r3, [r7, #28]
 810b7e4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 810b7e8:	460b      	mov	r3, r1
 810b7ea:	4313      	orrs	r3, r2
 810b7ec:	d011      	beq.n	810b812 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810b7ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b7f2:	3308      	adds	r3, #8
 810b7f4:	2102      	movs	r1, #2
 810b7f6:	4618      	mov	r0, r3
 810b7f8:	f000 f87a 	bl	810b8f0 <RCCEx_PLL2_Config>
 810b7fc:	4603      	mov	r3, r0
 810b7fe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810b802:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b806:	2b00      	cmp	r3, #0
 810b808:	d003      	beq.n	810b812 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b80a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b80e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 810b812:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b816:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b81a:	2100      	movs	r1, #0
 810b81c:	6139      	str	r1, [r7, #16]
 810b81e:	f003 0308 	and.w	r3, r3, #8
 810b822:	617b      	str	r3, [r7, #20]
 810b824:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 810b828:	460b      	mov	r3, r1
 810b82a:	4313      	orrs	r3, r2
 810b82c:	d011      	beq.n	810b852 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810b82e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b832:	3328      	adds	r3, #40	@ 0x28
 810b834:	2100      	movs	r1, #0
 810b836:	4618      	mov	r0, r3
 810b838:	f000 f90c 	bl	810ba54 <RCCEx_PLL3_Config>
 810b83c:	4603      	mov	r3, r0
 810b83e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 810b842:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b846:	2b00      	cmp	r3, #0
 810b848:	d003      	beq.n	810b852 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b84a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b84e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 810b852:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b856:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b85a:	2100      	movs	r1, #0
 810b85c:	60b9      	str	r1, [r7, #8]
 810b85e:	f003 0310 	and.w	r3, r3, #16
 810b862:	60fb      	str	r3, [r7, #12]
 810b864:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 810b868:	460b      	mov	r3, r1
 810b86a:	4313      	orrs	r3, r2
 810b86c:	d011      	beq.n	810b892 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810b86e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b872:	3328      	adds	r3, #40	@ 0x28
 810b874:	2101      	movs	r1, #1
 810b876:	4618      	mov	r0, r3
 810b878:	f000 f8ec 	bl	810ba54 <RCCEx_PLL3_Config>
 810b87c:	4603      	mov	r3, r0
 810b87e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810b882:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b886:	2b00      	cmp	r3, #0
 810b888:	d003      	beq.n	810b892 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b88a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b88e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 810b892:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b896:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b89a:	2100      	movs	r1, #0
 810b89c:	6039      	str	r1, [r7, #0]
 810b89e:	f003 0320 	and.w	r3, r3, #32
 810b8a2:	607b      	str	r3, [r7, #4]
 810b8a4:	e9d7 1200 	ldrd	r1, r2, [r7]
 810b8a8:	460b      	mov	r3, r1
 810b8aa:	4313      	orrs	r3, r2
 810b8ac:	d011      	beq.n	810b8d2 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810b8ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810b8b2:	3328      	adds	r3, #40	@ 0x28
 810b8b4:	2102      	movs	r1, #2
 810b8b6:	4618      	mov	r0, r3
 810b8b8:	f000 f8cc 	bl	810ba54 <RCCEx_PLL3_Config>
 810b8bc:	4603      	mov	r3, r0
 810b8be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 810b8c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b8c6:	2b00      	cmp	r3, #0
 810b8c8:	d003      	beq.n	810b8d2 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b8ca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810b8ce:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 810b8d2:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 810b8d6:	2b00      	cmp	r3, #0
 810b8d8:	d101      	bne.n	810b8de <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 810b8da:	2300      	movs	r3, #0
 810b8dc:	e000      	b.n	810b8e0 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 810b8de:	2301      	movs	r3, #1
}
 810b8e0:	4618      	mov	r0, r3
 810b8e2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 810b8e6:	46bd      	mov	sp, r7
 810b8e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810b8ec:	58024400 	.word	0x58024400

0810b8f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 810b8f0:	b580      	push	{r7, lr}
 810b8f2:	b084      	sub	sp, #16
 810b8f4:	af00      	add	r7, sp, #0
 810b8f6:	6078      	str	r0, [r7, #4]
 810b8f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810b8fa:	2300      	movs	r3, #0
 810b8fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810b8fe:	4b54      	ldr	r3, [pc, #336]	@ (810ba50 <RCCEx_PLL2_Config+0x160>)
 810b900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b902:	f003 0303 	and.w	r3, r3, #3
 810b906:	2b03      	cmp	r3, #3
 810b908:	d101      	bne.n	810b90e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810b90a:	2301      	movs	r3, #1
 810b90c:	e09b      	b.n	810ba46 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810b90e:	4b50      	ldr	r3, [pc, #320]	@ (810ba50 <RCCEx_PLL2_Config+0x160>)
 810b910:	681b      	ldr	r3, [r3, #0]
 810b912:	4a4f      	ldr	r2, [pc, #316]	@ (810ba50 <RCCEx_PLL2_Config+0x160>)
 810b914:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810b918:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810b91a:	f7fb fc6d 	bl	81071f8 <HAL_GetTick>
 810b91e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810b920:	e008      	b.n	810b934 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810b922:	f7fb fc69 	bl	81071f8 <HAL_GetTick>
 810b926:	4602      	mov	r2, r0
 810b928:	68bb      	ldr	r3, [r7, #8]
 810b92a:	1ad3      	subs	r3, r2, r3
 810b92c:	2b02      	cmp	r3, #2
 810b92e:	d901      	bls.n	810b934 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 810b930:	2303      	movs	r3, #3
 810b932:	e088      	b.n	810ba46 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810b934:	4b46      	ldr	r3, [pc, #280]	@ (810ba50 <RCCEx_PLL2_Config+0x160>)
 810b936:	681b      	ldr	r3, [r3, #0]
 810b938:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810b93c:	2b00      	cmp	r3, #0
 810b93e:	d1f0      	bne.n	810b922 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810b940:	4b43      	ldr	r3, [pc, #268]	@ (810ba50 <RCCEx_PLL2_Config+0x160>)
 810b942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b944:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 810b948:	687b      	ldr	r3, [r7, #4]
 810b94a:	681b      	ldr	r3, [r3, #0]
 810b94c:	031b      	lsls	r3, r3, #12
 810b94e:	4940      	ldr	r1, [pc, #256]	@ (810ba50 <RCCEx_PLL2_Config+0x160>)
 810b950:	4313      	orrs	r3, r2
 810b952:	628b      	str	r3, [r1, #40]	@ 0x28
 810b954:	687b      	ldr	r3, [r7, #4]
 810b956:	685b      	ldr	r3, [r3, #4]
 810b958:	3b01      	subs	r3, #1
 810b95a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810b95e:	687b      	ldr	r3, [r7, #4]
 810b960:	689b      	ldr	r3, [r3, #8]
 810b962:	3b01      	subs	r3, #1
 810b964:	025b      	lsls	r3, r3, #9
 810b966:	b29b      	uxth	r3, r3
 810b968:	431a      	orrs	r2, r3
 810b96a:	687b      	ldr	r3, [r7, #4]
 810b96c:	68db      	ldr	r3, [r3, #12]
 810b96e:	3b01      	subs	r3, #1
 810b970:	041b      	lsls	r3, r3, #16
 810b972:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810b976:	431a      	orrs	r2, r3
 810b978:	687b      	ldr	r3, [r7, #4]
 810b97a:	691b      	ldr	r3, [r3, #16]
 810b97c:	3b01      	subs	r3, #1
 810b97e:	061b      	lsls	r3, r3, #24
 810b980:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 810b984:	4932      	ldr	r1, [pc, #200]	@ (810ba50 <RCCEx_PLL2_Config+0x160>)
 810b986:	4313      	orrs	r3, r2
 810b988:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810b98a:	4b31      	ldr	r3, [pc, #196]	@ (810ba50 <RCCEx_PLL2_Config+0x160>)
 810b98c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b98e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 810b992:	687b      	ldr	r3, [r7, #4]
 810b994:	695b      	ldr	r3, [r3, #20]
 810b996:	492e      	ldr	r1, [pc, #184]	@ (810ba50 <RCCEx_PLL2_Config+0x160>)
 810b998:	4313      	orrs	r3, r2
 810b99a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810b99c:	4b2c      	ldr	r3, [pc, #176]	@ (810ba50 <RCCEx_PLL2_Config+0x160>)
 810b99e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b9a0:	f023 0220 	bic.w	r2, r3, #32
 810b9a4:	687b      	ldr	r3, [r7, #4]
 810b9a6:	699b      	ldr	r3, [r3, #24]
 810b9a8:	4929      	ldr	r1, [pc, #164]	@ (810ba50 <RCCEx_PLL2_Config+0x160>)
 810b9aa:	4313      	orrs	r3, r2
 810b9ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810b9ae:	4b28      	ldr	r3, [pc, #160]	@ (810ba50 <RCCEx_PLL2_Config+0x160>)
 810b9b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b9b2:	4a27      	ldr	r2, [pc, #156]	@ (810ba50 <RCCEx_PLL2_Config+0x160>)
 810b9b4:	f023 0310 	bic.w	r3, r3, #16
 810b9b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810b9ba:	4b25      	ldr	r3, [pc, #148]	@ (810ba50 <RCCEx_PLL2_Config+0x160>)
 810b9bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810b9be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810b9c2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810b9c6:	687a      	ldr	r2, [r7, #4]
 810b9c8:	69d2      	ldr	r2, [r2, #28]
 810b9ca:	00d2      	lsls	r2, r2, #3
 810b9cc:	4920      	ldr	r1, [pc, #128]	@ (810ba50 <RCCEx_PLL2_Config+0x160>)
 810b9ce:	4313      	orrs	r3, r2
 810b9d0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810b9d2:	4b1f      	ldr	r3, [pc, #124]	@ (810ba50 <RCCEx_PLL2_Config+0x160>)
 810b9d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b9d6:	4a1e      	ldr	r2, [pc, #120]	@ (810ba50 <RCCEx_PLL2_Config+0x160>)
 810b9d8:	f043 0310 	orr.w	r3, r3, #16
 810b9dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810b9de:	683b      	ldr	r3, [r7, #0]
 810b9e0:	2b00      	cmp	r3, #0
 810b9e2:	d106      	bne.n	810b9f2 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810b9e4:	4b1a      	ldr	r3, [pc, #104]	@ (810ba50 <RCCEx_PLL2_Config+0x160>)
 810b9e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b9e8:	4a19      	ldr	r2, [pc, #100]	@ (810ba50 <RCCEx_PLL2_Config+0x160>)
 810b9ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810b9ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810b9f0:	e00f      	b.n	810ba12 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810b9f2:	683b      	ldr	r3, [r7, #0]
 810b9f4:	2b01      	cmp	r3, #1
 810b9f6:	d106      	bne.n	810ba06 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 810b9f8:	4b15      	ldr	r3, [pc, #84]	@ (810ba50 <RCCEx_PLL2_Config+0x160>)
 810b9fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b9fc:	4a14      	ldr	r2, [pc, #80]	@ (810ba50 <RCCEx_PLL2_Config+0x160>)
 810b9fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810ba02:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810ba04:	e005      	b.n	810ba12 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810ba06:	4b12      	ldr	r3, [pc, #72]	@ (810ba50 <RCCEx_PLL2_Config+0x160>)
 810ba08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ba0a:	4a11      	ldr	r2, [pc, #68]	@ (810ba50 <RCCEx_PLL2_Config+0x160>)
 810ba0c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 810ba10:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810ba12:	4b0f      	ldr	r3, [pc, #60]	@ (810ba50 <RCCEx_PLL2_Config+0x160>)
 810ba14:	681b      	ldr	r3, [r3, #0]
 810ba16:	4a0e      	ldr	r2, [pc, #56]	@ (810ba50 <RCCEx_PLL2_Config+0x160>)
 810ba18:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 810ba1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810ba1e:	f7fb fbeb 	bl	81071f8 <HAL_GetTick>
 810ba22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810ba24:	e008      	b.n	810ba38 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810ba26:	f7fb fbe7 	bl	81071f8 <HAL_GetTick>
 810ba2a:	4602      	mov	r2, r0
 810ba2c:	68bb      	ldr	r3, [r7, #8]
 810ba2e:	1ad3      	subs	r3, r2, r3
 810ba30:	2b02      	cmp	r3, #2
 810ba32:	d901      	bls.n	810ba38 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 810ba34:	2303      	movs	r3, #3
 810ba36:	e006      	b.n	810ba46 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810ba38:	4b05      	ldr	r3, [pc, #20]	@ (810ba50 <RCCEx_PLL2_Config+0x160>)
 810ba3a:	681b      	ldr	r3, [r3, #0]
 810ba3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810ba40:	2b00      	cmp	r3, #0
 810ba42:	d0f0      	beq.n	810ba26 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 810ba44:	7bfb      	ldrb	r3, [r7, #15]
}
 810ba46:	4618      	mov	r0, r3
 810ba48:	3710      	adds	r7, #16
 810ba4a:	46bd      	mov	sp, r7
 810ba4c:	bd80      	pop	{r7, pc}
 810ba4e:	bf00      	nop
 810ba50:	58024400 	.word	0x58024400

0810ba54 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 810ba54:	b580      	push	{r7, lr}
 810ba56:	b084      	sub	sp, #16
 810ba58:	af00      	add	r7, sp, #0
 810ba5a:	6078      	str	r0, [r7, #4]
 810ba5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810ba5e:	2300      	movs	r3, #0
 810ba60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810ba62:	4b54      	ldr	r3, [pc, #336]	@ (810bbb4 <RCCEx_PLL3_Config+0x160>)
 810ba64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810ba66:	f003 0303 	and.w	r3, r3, #3
 810ba6a:	2b03      	cmp	r3, #3
 810ba6c:	d101      	bne.n	810ba72 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810ba6e:	2301      	movs	r3, #1
 810ba70:	e09b      	b.n	810bbaa <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810ba72:	4b50      	ldr	r3, [pc, #320]	@ (810bbb4 <RCCEx_PLL3_Config+0x160>)
 810ba74:	681b      	ldr	r3, [r3, #0]
 810ba76:	4a4f      	ldr	r2, [pc, #316]	@ (810bbb4 <RCCEx_PLL3_Config+0x160>)
 810ba78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810ba7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810ba7e:	f7fb fbbb 	bl	81071f8 <HAL_GetTick>
 810ba82:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810ba84:	e008      	b.n	810ba98 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810ba86:	f7fb fbb7 	bl	81071f8 <HAL_GetTick>
 810ba8a:	4602      	mov	r2, r0
 810ba8c:	68bb      	ldr	r3, [r7, #8]
 810ba8e:	1ad3      	subs	r3, r2, r3
 810ba90:	2b02      	cmp	r3, #2
 810ba92:	d901      	bls.n	810ba98 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810ba94:	2303      	movs	r3, #3
 810ba96:	e088      	b.n	810bbaa <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810ba98:	4b46      	ldr	r3, [pc, #280]	@ (810bbb4 <RCCEx_PLL3_Config+0x160>)
 810ba9a:	681b      	ldr	r3, [r3, #0]
 810ba9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810baa0:	2b00      	cmp	r3, #0
 810baa2:	d1f0      	bne.n	810ba86 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810baa4:	4b43      	ldr	r3, [pc, #268]	@ (810bbb4 <RCCEx_PLL3_Config+0x160>)
 810baa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810baa8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 810baac:	687b      	ldr	r3, [r7, #4]
 810baae:	681b      	ldr	r3, [r3, #0]
 810bab0:	051b      	lsls	r3, r3, #20
 810bab2:	4940      	ldr	r1, [pc, #256]	@ (810bbb4 <RCCEx_PLL3_Config+0x160>)
 810bab4:	4313      	orrs	r3, r2
 810bab6:	628b      	str	r3, [r1, #40]	@ 0x28
 810bab8:	687b      	ldr	r3, [r7, #4]
 810baba:	685b      	ldr	r3, [r3, #4]
 810babc:	3b01      	subs	r3, #1
 810babe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810bac2:	687b      	ldr	r3, [r7, #4]
 810bac4:	689b      	ldr	r3, [r3, #8]
 810bac6:	3b01      	subs	r3, #1
 810bac8:	025b      	lsls	r3, r3, #9
 810baca:	b29b      	uxth	r3, r3
 810bacc:	431a      	orrs	r2, r3
 810bace:	687b      	ldr	r3, [r7, #4]
 810bad0:	68db      	ldr	r3, [r3, #12]
 810bad2:	3b01      	subs	r3, #1
 810bad4:	041b      	lsls	r3, r3, #16
 810bad6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810bada:	431a      	orrs	r2, r3
 810badc:	687b      	ldr	r3, [r7, #4]
 810bade:	691b      	ldr	r3, [r3, #16]
 810bae0:	3b01      	subs	r3, #1
 810bae2:	061b      	lsls	r3, r3, #24
 810bae4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 810bae8:	4932      	ldr	r1, [pc, #200]	@ (810bbb4 <RCCEx_PLL3_Config+0x160>)
 810baea:	4313      	orrs	r3, r2
 810baec:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810baee:	4b31      	ldr	r3, [pc, #196]	@ (810bbb4 <RCCEx_PLL3_Config+0x160>)
 810baf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810baf2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 810baf6:	687b      	ldr	r3, [r7, #4]
 810baf8:	695b      	ldr	r3, [r3, #20]
 810bafa:	492e      	ldr	r1, [pc, #184]	@ (810bbb4 <RCCEx_PLL3_Config+0x160>)
 810bafc:	4313      	orrs	r3, r2
 810bafe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 810bb00:	4b2c      	ldr	r3, [pc, #176]	@ (810bbb4 <RCCEx_PLL3_Config+0x160>)
 810bb02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810bb04:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 810bb08:	687b      	ldr	r3, [r7, #4]
 810bb0a:	699b      	ldr	r3, [r3, #24]
 810bb0c:	4929      	ldr	r1, [pc, #164]	@ (810bbb4 <RCCEx_PLL3_Config+0x160>)
 810bb0e:	4313      	orrs	r3, r2
 810bb10:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810bb12:	4b28      	ldr	r3, [pc, #160]	@ (810bbb4 <RCCEx_PLL3_Config+0x160>)
 810bb14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810bb16:	4a27      	ldr	r2, [pc, #156]	@ (810bbb4 <RCCEx_PLL3_Config+0x160>)
 810bb18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810bb1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810bb1e:	4b25      	ldr	r3, [pc, #148]	@ (810bbb4 <RCCEx_PLL3_Config+0x160>)
 810bb20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810bb22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810bb26:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810bb2a:	687a      	ldr	r2, [r7, #4]
 810bb2c:	69d2      	ldr	r2, [r2, #28]
 810bb2e:	00d2      	lsls	r2, r2, #3
 810bb30:	4920      	ldr	r1, [pc, #128]	@ (810bbb4 <RCCEx_PLL3_Config+0x160>)
 810bb32:	4313      	orrs	r3, r2
 810bb34:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810bb36:	4b1f      	ldr	r3, [pc, #124]	@ (810bbb4 <RCCEx_PLL3_Config+0x160>)
 810bb38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810bb3a:	4a1e      	ldr	r2, [pc, #120]	@ (810bbb4 <RCCEx_PLL3_Config+0x160>)
 810bb3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810bb40:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810bb42:	683b      	ldr	r3, [r7, #0]
 810bb44:	2b00      	cmp	r3, #0
 810bb46:	d106      	bne.n	810bb56 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810bb48:	4b1a      	ldr	r3, [pc, #104]	@ (810bbb4 <RCCEx_PLL3_Config+0x160>)
 810bb4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810bb4c:	4a19      	ldr	r2, [pc, #100]	@ (810bbb4 <RCCEx_PLL3_Config+0x160>)
 810bb4e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 810bb52:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810bb54:	e00f      	b.n	810bb76 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810bb56:	683b      	ldr	r3, [r7, #0]
 810bb58:	2b01      	cmp	r3, #1
 810bb5a:	d106      	bne.n	810bb6a <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810bb5c:	4b15      	ldr	r3, [pc, #84]	@ (810bbb4 <RCCEx_PLL3_Config+0x160>)
 810bb5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810bb60:	4a14      	ldr	r2, [pc, #80]	@ (810bbb4 <RCCEx_PLL3_Config+0x160>)
 810bb62:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 810bb66:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810bb68:	e005      	b.n	810bb76 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810bb6a:	4b12      	ldr	r3, [pc, #72]	@ (810bbb4 <RCCEx_PLL3_Config+0x160>)
 810bb6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810bb6e:	4a11      	ldr	r2, [pc, #68]	@ (810bbb4 <RCCEx_PLL3_Config+0x160>)
 810bb70:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 810bb74:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810bb76:	4b0f      	ldr	r3, [pc, #60]	@ (810bbb4 <RCCEx_PLL3_Config+0x160>)
 810bb78:	681b      	ldr	r3, [r3, #0]
 810bb7a:	4a0e      	ldr	r2, [pc, #56]	@ (810bbb4 <RCCEx_PLL3_Config+0x160>)
 810bb7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810bb80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810bb82:	f7fb fb39 	bl	81071f8 <HAL_GetTick>
 810bb86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810bb88:	e008      	b.n	810bb9c <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810bb8a:	f7fb fb35 	bl	81071f8 <HAL_GetTick>
 810bb8e:	4602      	mov	r2, r0
 810bb90:	68bb      	ldr	r3, [r7, #8]
 810bb92:	1ad3      	subs	r3, r2, r3
 810bb94:	2b02      	cmp	r3, #2
 810bb96:	d901      	bls.n	810bb9c <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 810bb98:	2303      	movs	r3, #3
 810bb9a:	e006      	b.n	810bbaa <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810bb9c:	4b05      	ldr	r3, [pc, #20]	@ (810bbb4 <RCCEx_PLL3_Config+0x160>)
 810bb9e:	681b      	ldr	r3, [r3, #0]
 810bba0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810bba4:	2b00      	cmp	r3, #0
 810bba6:	d0f0      	beq.n	810bb8a <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 810bba8:	7bfb      	ldrb	r3, [r7, #15]
}
 810bbaa:	4618      	mov	r0, r3
 810bbac:	3710      	adds	r7, #16
 810bbae:	46bd      	mov	sp, r7
 810bbb0:	bd80      	pop	{r7, pc}
 810bbb2:	bf00      	nop
 810bbb4:	58024400 	.word	0x58024400

0810bbb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 810bbb8:	b580      	push	{r7, lr}
 810bbba:	b082      	sub	sp, #8
 810bbbc:	af00      	add	r7, sp, #0
 810bbbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810bbc0:	687b      	ldr	r3, [r7, #4]
 810bbc2:	2b00      	cmp	r3, #0
 810bbc4:	d101      	bne.n	810bbca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810bbc6:	2301      	movs	r3, #1
 810bbc8:	e049      	b.n	810bc5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810bbca:	687b      	ldr	r3, [r7, #4]
 810bbcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810bbd0:	b2db      	uxtb	r3, r3
 810bbd2:	2b00      	cmp	r3, #0
 810bbd4:	d106      	bne.n	810bbe4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810bbd6:	687b      	ldr	r3, [r7, #4]
 810bbd8:	2200      	movs	r2, #0
 810bbda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810bbde:	6878      	ldr	r0, [r7, #4]
 810bbe0:	f000 f841 	bl	810bc66 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810bbe4:	687b      	ldr	r3, [r7, #4]
 810bbe6:	2202      	movs	r2, #2
 810bbe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810bbec:	687b      	ldr	r3, [r7, #4]
 810bbee:	681a      	ldr	r2, [r3, #0]
 810bbf0:	687b      	ldr	r3, [r7, #4]
 810bbf2:	3304      	adds	r3, #4
 810bbf4:	4619      	mov	r1, r3
 810bbf6:	4610      	mov	r0, r2
 810bbf8:	f000 f9e8 	bl	810bfcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810bbfc:	687b      	ldr	r3, [r7, #4]
 810bbfe:	2201      	movs	r2, #1
 810bc00:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810bc04:	687b      	ldr	r3, [r7, #4]
 810bc06:	2201      	movs	r2, #1
 810bc08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810bc0c:	687b      	ldr	r3, [r7, #4]
 810bc0e:	2201      	movs	r2, #1
 810bc10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 810bc14:	687b      	ldr	r3, [r7, #4]
 810bc16:	2201      	movs	r2, #1
 810bc18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810bc1c:	687b      	ldr	r3, [r7, #4]
 810bc1e:	2201      	movs	r2, #1
 810bc20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 810bc24:	687b      	ldr	r3, [r7, #4]
 810bc26:	2201      	movs	r2, #1
 810bc28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 810bc2c:	687b      	ldr	r3, [r7, #4]
 810bc2e:	2201      	movs	r2, #1
 810bc30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810bc34:	687b      	ldr	r3, [r7, #4]
 810bc36:	2201      	movs	r2, #1
 810bc38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810bc3c:	687b      	ldr	r3, [r7, #4]
 810bc3e:	2201      	movs	r2, #1
 810bc40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810bc44:	687b      	ldr	r3, [r7, #4]
 810bc46:	2201      	movs	r2, #1
 810bc48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 810bc4c:	687b      	ldr	r3, [r7, #4]
 810bc4e:	2201      	movs	r2, #1
 810bc50:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810bc54:	687b      	ldr	r3, [r7, #4]
 810bc56:	2201      	movs	r2, #1
 810bc58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 810bc5c:	2300      	movs	r3, #0
}
 810bc5e:	4618      	mov	r0, r3
 810bc60:	3708      	adds	r7, #8
 810bc62:	46bd      	mov	sp, r7
 810bc64:	bd80      	pop	{r7, pc}

0810bc66 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 810bc66:	b480      	push	{r7}
 810bc68:	b083      	sub	sp, #12
 810bc6a:	af00      	add	r7, sp, #0
 810bc6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 810bc6e:	bf00      	nop
 810bc70:	370c      	adds	r7, #12
 810bc72:	46bd      	mov	sp, r7
 810bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bc78:	4770      	bx	lr
	...

0810bc7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 810bc7c:	b480      	push	{r7}
 810bc7e:	b085      	sub	sp, #20
 810bc80:	af00      	add	r7, sp, #0
 810bc82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 810bc84:	687b      	ldr	r3, [r7, #4]
 810bc86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810bc8a:	b2db      	uxtb	r3, r3
 810bc8c:	2b01      	cmp	r3, #1
 810bc8e:	d001      	beq.n	810bc94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 810bc90:	2301      	movs	r3, #1
 810bc92:	e054      	b.n	810bd3e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810bc94:	687b      	ldr	r3, [r7, #4]
 810bc96:	2202      	movs	r2, #2
 810bc98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 810bc9c:	687b      	ldr	r3, [r7, #4]
 810bc9e:	681b      	ldr	r3, [r3, #0]
 810bca0:	68da      	ldr	r2, [r3, #12]
 810bca2:	687b      	ldr	r3, [r7, #4]
 810bca4:	681b      	ldr	r3, [r3, #0]
 810bca6:	f042 0201 	orr.w	r2, r2, #1
 810bcaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810bcac:	687b      	ldr	r3, [r7, #4]
 810bcae:	681b      	ldr	r3, [r3, #0]
 810bcb0:	4a26      	ldr	r2, [pc, #152]	@ (810bd4c <HAL_TIM_Base_Start_IT+0xd0>)
 810bcb2:	4293      	cmp	r3, r2
 810bcb4:	d022      	beq.n	810bcfc <HAL_TIM_Base_Start_IT+0x80>
 810bcb6:	687b      	ldr	r3, [r7, #4]
 810bcb8:	681b      	ldr	r3, [r3, #0]
 810bcba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810bcbe:	d01d      	beq.n	810bcfc <HAL_TIM_Base_Start_IT+0x80>
 810bcc0:	687b      	ldr	r3, [r7, #4]
 810bcc2:	681b      	ldr	r3, [r3, #0]
 810bcc4:	4a22      	ldr	r2, [pc, #136]	@ (810bd50 <HAL_TIM_Base_Start_IT+0xd4>)
 810bcc6:	4293      	cmp	r3, r2
 810bcc8:	d018      	beq.n	810bcfc <HAL_TIM_Base_Start_IT+0x80>
 810bcca:	687b      	ldr	r3, [r7, #4]
 810bccc:	681b      	ldr	r3, [r3, #0]
 810bcce:	4a21      	ldr	r2, [pc, #132]	@ (810bd54 <HAL_TIM_Base_Start_IT+0xd8>)
 810bcd0:	4293      	cmp	r3, r2
 810bcd2:	d013      	beq.n	810bcfc <HAL_TIM_Base_Start_IT+0x80>
 810bcd4:	687b      	ldr	r3, [r7, #4]
 810bcd6:	681b      	ldr	r3, [r3, #0]
 810bcd8:	4a1f      	ldr	r2, [pc, #124]	@ (810bd58 <HAL_TIM_Base_Start_IT+0xdc>)
 810bcda:	4293      	cmp	r3, r2
 810bcdc:	d00e      	beq.n	810bcfc <HAL_TIM_Base_Start_IT+0x80>
 810bcde:	687b      	ldr	r3, [r7, #4]
 810bce0:	681b      	ldr	r3, [r3, #0]
 810bce2:	4a1e      	ldr	r2, [pc, #120]	@ (810bd5c <HAL_TIM_Base_Start_IT+0xe0>)
 810bce4:	4293      	cmp	r3, r2
 810bce6:	d009      	beq.n	810bcfc <HAL_TIM_Base_Start_IT+0x80>
 810bce8:	687b      	ldr	r3, [r7, #4]
 810bcea:	681b      	ldr	r3, [r3, #0]
 810bcec:	4a1c      	ldr	r2, [pc, #112]	@ (810bd60 <HAL_TIM_Base_Start_IT+0xe4>)
 810bcee:	4293      	cmp	r3, r2
 810bcf0:	d004      	beq.n	810bcfc <HAL_TIM_Base_Start_IT+0x80>
 810bcf2:	687b      	ldr	r3, [r7, #4]
 810bcf4:	681b      	ldr	r3, [r3, #0]
 810bcf6:	4a1b      	ldr	r2, [pc, #108]	@ (810bd64 <HAL_TIM_Base_Start_IT+0xe8>)
 810bcf8:	4293      	cmp	r3, r2
 810bcfa:	d115      	bne.n	810bd28 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810bcfc:	687b      	ldr	r3, [r7, #4]
 810bcfe:	681b      	ldr	r3, [r3, #0]
 810bd00:	689a      	ldr	r2, [r3, #8]
 810bd02:	4b19      	ldr	r3, [pc, #100]	@ (810bd68 <HAL_TIM_Base_Start_IT+0xec>)
 810bd04:	4013      	ands	r3, r2
 810bd06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810bd08:	68fb      	ldr	r3, [r7, #12]
 810bd0a:	2b06      	cmp	r3, #6
 810bd0c:	d015      	beq.n	810bd3a <HAL_TIM_Base_Start_IT+0xbe>
 810bd0e:	68fb      	ldr	r3, [r7, #12]
 810bd10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810bd14:	d011      	beq.n	810bd3a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 810bd16:	687b      	ldr	r3, [r7, #4]
 810bd18:	681b      	ldr	r3, [r3, #0]
 810bd1a:	681a      	ldr	r2, [r3, #0]
 810bd1c:	687b      	ldr	r3, [r7, #4]
 810bd1e:	681b      	ldr	r3, [r3, #0]
 810bd20:	f042 0201 	orr.w	r2, r2, #1
 810bd24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810bd26:	e008      	b.n	810bd3a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810bd28:	687b      	ldr	r3, [r7, #4]
 810bd2a:	681b      	ldr	r3, [r3, #0]
 810bd2c:	681a      	ldr	r2, [r3, #0]
 810bd2e:	687b      	ldr	r3, [r7, #4]
 810bd30:	681b      	ldr	r3, [r3, #0]
 810bd32:	f042 0201 	orr.w	r2, r2, #1
 810bd36:	601a      	str	r2, [r3, #0]
 810bd38:	e000      	b.n	810bd3c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810bd3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810bd3c:	2300      	movs	r3, #0
}
 810bd3e:	4618      	mov	r0, r3
 810bd40:	3714      	adds	r7, #20
 810bd42:	46bd      	mov	sp, r7
 810bd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bd48:	4770      	bx	lr
 810bd4a:	bf00      	nop
 810bd4c:	40010000 	.word	0x40010000
 810bd50:	40000400 	.word	0x40000400
 810bd54:	40000800 	.word	0x40000800
 810bd58:	40000c00 	.word	0x40000c00
 810bd5c:	40010400 	.word	0x40010400
 810bd60:	40001800 	.word	0x40001800
 810bd64:	40014000 	.word	0x40014000
 810bd68:	00010007 	.word	0x00010007

0810bd6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 810bd6c:	b580      	push	{r7, lr}
 810bd6e:	b084      	sub	sp, #16
 810bd70:	af00      	add	r7, sp, #0
 810bd72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 810bd74:	687b      	ldr	r3, [r7, #4]
 810bd76:	681b      	ldr	r3, [r3, #0]
 810bd78:	68db      	ldr	r3, [r3, #12]
 810bd7a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 810bd7c:	687b      	ldr	r3, [r7, #4]
 810bd7e:	681b      	ldr	r3, [r3, #0]
 810bd80:	691b      	ldr	r3, [r3, #16]
 810bd82:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 810bd84:	68bb      	ldr	r3, [r7, #8]
 810bd86:	f003 0302 	and.w	r3, r3, #2
 810bd8a:	2b00      	cmp	r3, #0
 810bd8c:	d020      	beq.n	810bdd0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 810bd8e:	68fb      	ldr	r3, [r7, #12]
 810bd90:	f003 0302 	and.w	r3, r3, #2
 810bd94:	2b00      	cmp	r3, #0
 810bd96:	d01b      	beq.n	810bdd0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 810bd98:	687b      	ldr	r3, [r7, #4]
 810bd9a:	681b      	ldr	r3, [r3, #0]
 810bd9c:	f06f 0202 	mvn.w	r2, #2
 810bda0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810bda2:	687b      	ldr	r3, [r7, #4]
 810bda4:	2201      	movs	r2, #1
 810bda6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 810bda8:	687b      	ldr	r3, [r7, #4]
 810bdaa:	681b      	ldr	r3, [r3, #0]
 810bdac:	699b      	ldr	r3, [r3, #24]
 810bdae:	f003 0303 	and.w	r3, r3, #3
 810bdb2:	2b00      	cmp	r3, #0
 810bdb4:	d003      	beq.n	810bdbe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 810bdb6:	6878      	ldr	r0, [r7, #4]
 810bdb8:	f000 f8e9 	bl	810bf8e <HAL_TIM_IC_CaptureCallback>
 810bdbc:	e005      	b.n	810bdca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810bdbe:	6878      	ldr	r0, [r7, #4]
 810bdc0:	f000 f8db 	bl	810bf7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 810bdc4:	6878      	ldr	r0, [r7, #4]
 810bdc6:	f000 f8ec 	bl	810bfa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810bdca:	687b      	ldr	r3, [r7, #4]
 810bdcc:	2200      	movs	r2, #0
 810bdce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 810bdd0:	68bb      	ldr	r3, [r7, #8]
 810bdd2:	f003 0304 	and.w	r3, r3, #4
 810bdd6:	2b00      	cmp	r3, #0
 810bdd8:	d020      	beq.n	810be1c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 810bdda:	68fb      	ldr	r3, [r7, #12]
 810bddc:	f003 0304 	and.w	r3, r3, #4
 810bde0:	2b00      	cmp	r3, #0
 810bde2:	d01b      	beq.n	810be1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 810bde4:	687b      	ldr	r3, [r7, #4]
 810bde6:	681b      	ldr	r3, [r3, #0]
 810bde8:	f06f 0204 	mvn.w	r2, #4
 810bdec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 810bdee:	687b      	ldr	r3, [r7, #4]
 810bdf0:	2202      	movs	r2, #2
 810bdf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 810bdf4:	687b      	ldr	r3, [r7, #4]
 810bdf6:	681b      	ldr	r3, [r3, #0]
 810bdf8:	699b      	ldr	r3, [r3, #24]
 810bdfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810bdfe:	2b00      	cmp	r3, #0
 810be00:	d003      	beq.n	810be0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810be02:	6878      	ldr	r0, [r7, #4]
 810be04:	f000 f8c3 	bl	810bf8e <HAL_TIM_IC_CaptureCallback>
 810be08:	e005      	b.n	810be16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810be0a:	6878      	ldr	r0, [r7, #4]
 810be0c:	f000 f8b5 	bl	810bf7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810be10:	6878      	ldr	r0, [r7, #4]
 810be12:	f000 f8c6 	bl	810bfa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810be16:	687b      	ldr	r3, [r7, #4]
 810be18:	2200      	movs	r2, #0
 810be1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 810be1c:	68bb      	ldr	r3, [r7, #8]
 810be1e:	f003 0308 	and.w	r3, r3, #8
 810be22:	2b00      	cmp	r3, #0
 810be24:	d020      	beq.n	810be68 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 810be26:	68fb      	ldr	r3, [r7, #12]
 810be28:	f003 0308 	and.w	r3, r3, #8
 810be2c:	2b00      	cmp	r3, #0
 810be2e:	d01b      	beq.n	810be68 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 810be30:	687b      	ldr	r3, [r7, #4]
 810be32:	681b      	ldr	r3, [r3, #0]
 810be34:	f06f 0208 	mvn.w	r2, #8
 810be38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 810be3a:	687b      	ldr	r3, [r7, #4]
 810be3c:	2204      	movs	r2, #4
 810be3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 810be40:	687b      	ldr	r3, [r7, #4]
 810be42:	681b      	ldr	r3, [r3, #0]
 810be44:	69db      	ldr	r3, [r3, #28]
 810be46:	f003 0303 	and.w	r3, r3, #3
 810be4a:	2b00      	cmp	r3, #0
 810be4c:	d003      	beq.n	810be56 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810be4e:	6878      	ldr	r0, [r7, #4]
 810be50:	f000 f89d 	bl	810bf8e <HAL_TIM_IC_CaptureCallback>
 810be54:	e005      	b.n	810be62 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810be56:	6878      	ldr	r0, [r7, #4]
 810be58:	f000 f88f 	bl	810bf7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810be5c:	6878      	ldr	r0, [r7, #4]
 810be5e:	f000 f8a0 	bl	810bfa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810be62:	687b      	ldr	r3, [r7, #4]
 810be64:	2200      	movs	r2, #0
 810be66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 810be68:	68bb      	ldr	r3, [r7, #8]
 810be6a:	f003 0310 	and.w	r3, r3, #16
 810be6e:	2b00      	cmp	r3, #0
 810be70:	d020      	beq.n	810beb4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 810be72:	68fb      	ldr	r3, [r7, #12]
 810be74:	f003 0310 	and.w	r3, r3, #16
 810be78:	2b00      	cmp	r3, #0
 810be7a:	d01b      	beq.n	810beb4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 810be7c:	687b      	ldr	r3, [r7, #4]
 810be7e:	681b      	ldr	r3, [r3, #0]
 810be80:	f06f 0210 	mvn.w	r2, #16
 810be84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810be86:	687b      	ldr	r3, [r7, #4]
 810be88:	2208      	movs	r2, #8
 810be8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 810be8c:	687b      	ldr	r3, [r7, #4]
 810be8e:	681b      	ldr	r3, [r3, #0]
 810be90:	69db      	ldr	r3, [r3, #28]
 810be92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810be96:	2b00      	cmp	r3, #0
 810be98:	d003      	beq.n	810bea2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810be9a:	6878      	ldr	r0, [r7, #4]
 810be9c:	f000 f877 	bl	810bf8e <HAL_TIM_IC_CaptureCallback>
 810bea0:	e005      	b.n	810beae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810bea2:	6878      	ldr	r0, [r7, #4]
 810bea4:	f000 f869 	bl	810bf7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810bea8:	6878      	ldr	r0, [r7, #4]
 810beaa:	f000 f87a 	bl	810bfa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810beae:	687b      	ldr	r3, [r7, #4]
 810beb0:	2200      	movs	r2, #0
 810beb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 810beb4:	68bb      	ldr	r3, [r7, #8]
 810beb6:	f003 0301 	and.w	r3, r3, #1
 810beba:	2b00      	cmp	r3, #0
 810bebc:	d00c      	beq.n	810bed8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 810bebe:	68fb      	ldr	r3, [r7, #12]
 810bec0:	f003 0301 	and.w	r3, r3, #1
 810bec4:	2b00      	cmp	r3, #0
 810bec6:	d007      	beq.n	810bed8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 810bec8:	687b      	ldr	r3, [r7, #4]
 810beca:	681b      	ldr	r3, [r3, #0]
 810becc:	f06f 0201 	mvn.w	r2, #1
 810bed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810bed2:	6878      	ldr	r0, [r7, #4]
 810bed4:	f7f4 fcea 	bl	81008ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 810bed8:	68bb      	ldr	r3, [r7, #8]
 810beda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810bede:	2b00      	cmp	r3, #0
 810bee0:	d104      	bne.n	810beec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 810bee2:	68bb      	ldr	r3, [r7, #8]
 810bee4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 810bee8:	2b00      	cmp	r3, #0
 810beea:	d00c      	beq.n	810bf06 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 810beec:	68fb      	ldr	r3, [r7, #12]
 810beee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810bef2:	2b00      	cmp	r3, #0
 810bef4:	d007      	beq.n	810bf06 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 810bef6:	687b      	ldr	r3, [r7, #4]
 810bef8:	681b      	ldr	r3, [r3, #0]
 810befa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 810befe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810bf00:	6878      	ldr	r0, [r7, #4]
 810bf02:	f000 f913 	bl	810c12c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 810bf06:	68bb      	ldr	r3, [r7, #8]
 810bf08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810bf0c:	2b00      	cmp	r3, #0
 810bf0e:	d00c      	beq.n	810bf2a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 810bf10:	68fb      	ldr	r3, [r7, #12]
 810bf12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810bf16:	2b00      	cmp	r3, #0
 810bf18:	d007      	beq.n	810bf2a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 810bf1a:	687b      	ldr	r3, [r7, #4]
 810bf1c:	681b      	ldr	r3, [r3, #0]
 810bf1e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 810bf22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 810bf24:	6878      	ldr	r0, [r7, #4]
 810bf26:	f000 f90b 	bl	810c140 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 810bf2a:	68bb      	ldr	r3, [r7, #8]
 810bf2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810bf30:	2b00      	cmp	r3, #0
 810bf32:	d00c      	beq.n	810bf4e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 810bf34:	68fb      	ldr	r3, [r7, #12]
 810bf36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810bf3a:	2b00      	cmp	r3, #0
 810bf3c:	d007      	beq.n	810bf4e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 810bf3e:	687b      	ldr	r3, [r7, #4]
 810bf40:	681b      	ldr	r3, [r3, #0]
 810bf42:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 810bf46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 810bf48:	6878      	ldr	r0, [r7, #4]
 810bf4a:	f000 f834 	bl	810bfb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 810bf4e:	68bb      	ldr	r3, [r7, #8]
 810bf50:	f003 0320 	and.w	r3, r3, #32
 810bf54:	2b00      	cmp	r3, #0
 810bf56:	d00c      	beq.n	810bf72 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 810bf58:	68fb      	ldr	r3, [r7, #12]
 810bf5a:	f003 0320 	and.w	r3, r3, #32
 810bf5e:	2b00      	cmp	r3, #0
 810bf60:	d007      	beq.n	810bf72 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 810bf62:	687b      	ldr	r3, [r7, #4]
 810bf64:	681b      	ldr	r3, [r3, #0]
 810bf66:	f06f 0220 	mvn.w	r2, #32
 810bf6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 810bf6c:	6878      	ldr	r0, [r7, #4]
 810bf6e:	f000 f8d3 	bl	810c118 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810bf72:	bf00      	nop
 810bf74:	3710      	adds	r7, #16
 810bf76:	46bd      	mov	sp, r7
 810bf78:	bd80      	pop	{r7, pc}

0810bf7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 810bf7a:	b480      	push	{r7}
 810bf7c:	b083      	sub	sp, #12
 810bf7e:	af00      	add	r7, sp, #0
 810bf80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 810bf82:	bf00      	nop
 810bf84:	370c      	adds	r7, #12
 810bf86:	46bd      	mov	sp, r7
 810bf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bf8c:	4770      	bx	lr

0810bf8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810bf8e:	b480      	push	{r7}
 810bf90:	b083      	sub	sp, #12
 810bf92:	af00      	add	r7, sp, #0
 810bf94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 810bf96:	bf00      	nop
 810bf98:	370c      	adds	r7, #12
 810bf9a:	46bd      	mov	sp, r7
 810bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bfa0:	4770      	bx	lr

0810bfa2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 810bfa2:	b480      	push	{r7}
 810bfa4:	b083      	sub	sp, #12
 810bfa6:	af00      	add	r7, sp, #0
 810bfa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810bfaa:	bf00      	nop
 810bfac:	370c      	adds	r7, #12
 810bfae:	46bd      	mov	sp, r7
 810bfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bfb4:	4770      	bx	lr

0810bfb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 810bfb6:	b480      	push	{r7}
 810bfb8:	b083      	sub	sp, #12
 810bfba:	af00      	add	r7, sp, #0
 810bfbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 810bfbe:	bf00      	nop
 810bfc0:	370c      	adds	r7, #12
 810bfc2:	46bd      	mov	sp, r7
 810bfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bfc8:	4770      	bx	lr
	...

0810bfcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 810bfcc:	b480      	push	{r7}
 810bfce:	b085      	sub	sp, #20
 810bfd0:	af00      	add	r7, sp, #0
 810bfd2:	6078      	str	r0, [r7, #4]
 810bfd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810bfd6:	687b      	ldr	r3, [r7, #4]
 810bfd8:	681b      	ldr	r3, [r3, #0]
 810bfda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810bfdc:	687b      	ldr	r3, [r7, #4]
 810bfde:	4a46      	ldr	r2, [pc, #280]	@ (810c0f8 <TIM_Base_SetConfig+0x12c>)
 810bfe0:	4293      	cmp	r3, r2
 810bfe2:	d013      	beq.n	810c00c <TIM_Base_SetConfig+0x40>
 810bfe4:	687b      	ldr	r3, [r7, #4]
 810bfe6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810bfea:	d00f      	beq.n	810c00c <TIM_Base_SetConfig+0x40>
 810bfec:	687b      	ldr	r3, [r7, #4]
 810bfee:	4a43      	ldr	r2, [pc, #268]	@ (810c0fc <TIM_Base_SetConfig+0x130>)
 810bff0:	4293      	cmp	r3, r2
 810bff2:	d00b      	beq.n	810c00c <TIM_Base_SetConfig+0x40>
 810bff4:	687b      	ldr	r3, [r7, #4]
 810bff6:	4a42      	ldr	r2, [pc, #264]	@ (810c100 <TIM_Base_SetConfig+0x134>)
 810bff8:	4293      	cmp	r3, r2
 810bffa:	d007      	beq.n	810c00c <TIM_Base_SetConfig+0x40>
 810bffc:	687b      	ldr	r3, [r7, #4]
 810bffe:	4a41      	ldr	r2, [pc, #260]	@ (810c104 <TIM_Base_SetConfig+0x138>)
 810c000:	4293      	cmp	r3, r2
 810c002:	d003      	beq.n	810c00c <TIM_Base_SetConfig+0x40>
 810c004:	687b      	ldr	r3, [r7, #4]
 810c006:	4a40      	ldr	r2, [pc, #256]	@ (810c108 <TIM_Base_SetConfig+0x13c>)
 810c008:	4293      	cmp	r3, r2
 810c00a:	d108      	bne.n	810c01e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810c00c:	68fb      	ldr	r3, [r7, #12]
 810c00e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810c012:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 810c014:	683b      	ldr	r3, [r7, #0]
 810c016:	685b      	ldr	r3, [r3, #4]
 810c018:	68fa      	ldr	r2, [r7, #12]
 810c01a:	4313      	orrs	r3, r2
 810c01c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810c01e:	687b      	ldr	r3, [r7, #4]
 810c020:	4a35      	ldr	r2, [pc, #212]	@ (810c0f8 <TIM_Base_SetConfig+0x12c>)
 810c022:	4293      	cmp	r3, r2
 810c024:	d01f      	beq.n	810c066 <TIM_Base_SetConfig+0x9a>
 810c026:	687b      	ldr	r3, [r7, #4]
 810c028:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810c02c:	d01b      	beq.n	810c066 <TIM_Base_SetConfig+0x9a>
 810c02e:	687b      	ldr	r3, [r7, #4]
 810c030:	4a32      	ldr	r2, [pc, #200]	@ (810c0fc <TIM_Base_SetConfig+0x130>)
 810c032:	4293      	cmp	r3, r2
 810c034:	d017      	beq.n	810c066 <TIM_Base_SetConfig+0x9a>
 810c036:	687b      	ldr	r3, [r7, #4]
 810c038:	4a31      	ldr	r2, [pc, #196]	@ (810c100 <TIM_Base_SetConfig+0x134>)
 810c03a:	4293      	cmp	r3, r2
 810c03c:	d013      	beq.n	810c066 <TIM_Base_SetConfig+0x9a>
 810c03e:	687b      	ldr	r3, [r7, #4]
 810c040:	4a30      	ldr	r2, [pc, #192]	@ (810c104 <TIM_Base_SetConfig+0x138>)
 810c042:	4293      	cmp	r3, r2
 810c044:	d00f      	beq.n	810c066 <TIM_Base_SetConfig+0x9a>
 810c046:	687b      	ldr	r3, [r7, #4]
 810c048:	4a2f      	ldr	r2, [pc, #188]	@ (810c108 <TIM_Base_SetConfig+0x13c>)
 810c04a:	4293      	cmp	r3, r2
 810c04c:	d00b      	beq.n	810c066 <TIM_Base_SetConfig+0x9a>
 810c04e:	687b      	ldr	r3, [r7, #4]
 810c050:	4a2e      	ldr	r2, [pc, #184]	@ (810c10c <TIM_Base_SetConfig+0x140>)
 810c052:	4293      	cmp	r3, r2
 810c054:	d007      	beq.n	810c066 <TIM_Base_SetConfig+0x9a>
 810c056:	687b      	ldr	r3, [r7, #4]
 810c058:	4a2d      	ldr	r2, [pc, #180]	@ (810c110 <TIM_Base_SetConfig+0x144>)
 810c05a:	4293      	cmp	r3, r2
 810c05c:	d003      	beq.n	810c066 <TIM_Base_SetConfig+0x9a>
 810c05e:	687b      	ldr	r3, [r7, #4]
 810c060:	4a2c      	ldr	r2, [pc, #176]	@ (810c114 <TIM_Base_SetConfig+0x148>)
 810c062:	4293      	cmp	r3, r2
 810c064:	d108      	bne.n	810c078 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810c066:	68fb      	ldr	r3, [r7, #12]
 810c068:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810c06c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810c06e:	683b      	ldr	r3, [r7, #0]
 810c070:	68db      	ldr	r3, [r3, #12]
 810c072:	68fa      	ldr	r2, [r7, #12]
 810c074:	4313      	orrs	r3, r2
 810c076:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 810c078:	68fb      	ldr	r3, [r7, #12]
 810c07a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 810c07e:	683b      	ldr	r3, [r7, #0]
 810c080:	695b      	ldr	r3, [r3, #20]
 810c082:	4313      	orrs	r3, r2
 810c084:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810c086:	687b      	ldr	r3, [r7, #4]
 810c088:	68fa      	ldr	r2, [r7, #12]
 810c08a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810c08c:	683b      	ldr	r3, [r7, #0]
 810c08e:	689a      	ldr	r2, [r3, #8]
 810c090:	687b      	ldr	r3, [r7, #4]
 810c092:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 810c094:	683b      	ldr	r3, [r7, #0]
 810c096:	681a      	ldr	r2, [r3, #0]
 810c098:	687b      	ldr	r3, [r7, #4]
 810c09a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810c09c:	687b      	ldr	r3, [r7, #4]
 810c09e:	4a16      	ldr	r2, [pc, #88]	@ (810c0f8 <TIM_Base_SetConfig+0x12c>)
 810c0a0:	4293      	cmp	r3, r2
 810c0a2:	d00f      	beq.n	810c0c4 <TIM_Base_SetConfig+0xf8>
 810c0a4:	687b      	ldr	r3, [r7, #4]
 810c0a6:	4a18      	ldr	r2, [pc, #96]	@ (810c108 <TIM_Base_SetConfig+0x13c>)
 810c0a8:	4293      	cmp	r3, r2
 810c0aa:	d00b      	beq.n	810c0c4 <TIM_Base_SetConfig+0xf8>
 810c0ac:	687b      	ldr	r3, [r7, #4]
 810c0ae:	4a17      	ldr	r2, [pc, #92]	@ (810c10c <TIM_Base_SetConfig+0x140>)
 810c0b0:	4293      	cmp	r3, r2
 810c0b2:	d007      	beq.n	810c0c4 <TIM_Base_SetConfig+0xf8>
 810c0b4:	687b      	ldr	r3, [r7, #4]
 810c0b6:	4a16      	ldr	r2, [pc, #88]	@ (810c110 <TIM_Base_SetConfig+0x144>)
 810c0b8:	4293      	cmp	r3, r2
 810c0ba:	d003      	beq.n	810c0c4 <TIM_Base_SetConfig+0xf8>
 810c0bc:	687b      	ldr	r3, [r7, #4]
 810c0be:	4a15      	ldr	r2, [pc, #84]	@ (810c114 <TIM_Base_SetConfig+0x148>)
 810c0c0:	4293      	cmp	r3, r2
 810c0c2:	d103      	bne.n	810c0cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 810c0c4:	683b      	ldr	r3, [r7, #0]
 810c0c6:	691a      	ldr	r2, [r3, #16]
 810c0c8:	687b      	ldr	r3, [r7, #4]
 810c0ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810c0cc:	687b      	ldr	r3, [r7, #4]
 810c0ce:	2201      	movs	r2, #1
 810c0d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 810c0d2:	687b      	ldr	r3, [r7, #4]
 810c0d4:	691b      	ldr	r3, [r3, #16]
 810c0d6:	f003 0301 	and.w	r3, r3, #1
 810c0da:	2b01      	cmp	r3, #1
 810c0dc:	d105      	bne.n	810c0ea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 810c0de:	687b      	ldr	r3, [r7, #4]
 810c0e0:	691b      	ldr	r3, [r3, #16]
 810c0e2:	f023 0201 	bic.w	r2, r3, #1
 810c0e6:	687b      	ldr	r3, [r7, #4]
 810c0e8:	611a      	str	r2, [r3, #16]
  }
}
 810c0ea:	bf00      	nop
 810c0ec:	3714      	adds	r7, #20
 810c0ee:	46bd      	mov	sp, r7
 810c0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c0f4:	4770      	bx	lr
 810c0f6:	bf00      	nop
 810c0f8:	40010000 	.word	0x40010000
 810c0fc:	40000400 	.word	0x40000400
 810c100:	40000800 	.word	0x40000800
 810c104:	40000c00 	.word	0x40000c00
 810c108:	40010400 	.word	0x40010400
 810c10c:	40014000 	.word	0x40014000
 810c110:	40014400 	.word	0x40014400
 810c114:	40014800 	.word	0x40014800

0810c118 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 810c118:	b480      	push	{r7}
 810c11a:	b083      	sub	sp, #12
 810c11c:	af00      	add	r7, sp, #0
 810c11e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 810c120:	bf00      	nop
 810c122:	370c      	adds	r7, #12
 810c124:	46bd      	mov	sp, r7
 810c126:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c12a:	4770      	bx	lr

0810c12c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810c12c:	b480      	push	{r7}
 810c12e:	b083      	sub	sp, #12
 810c130:	af00      	add	r7, sp, #0
 810c132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 810c134:	bf00      	nop
 810c136:	370c      	adds	r7, #12
 810c138:	46bd      	mov	sp, r7
 810c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c13e:	4770      	bx	lr

0810c140 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 810c140:	b480      	push	{r7}
 810c142:	b083      	sub	sp, #12
 810c144:	af00      	add	r7, sp, #0
 810c146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 810c148:	bf00      	nop
 810c14a:	370c      	adds	r7, #12
 810c14c:	46bd      	mov	sp, r7
 810c14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c152:	4770      	bx	lr

0810c154 <__NVIC_SetPriority>:
{
 810c154:	b480      	push	{r7}
 810c156:	b083      	sub	sp, #12
 810c158:	af00      	add	r7, sp, #0
 810c15a:	4603      	mov	r3, r0
 810c15c:	6039      	str	r1, [r7, #0]
 810c15e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810c160:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810c164:	2b00      	cmp	r3, #0
 810c166:	db0a      	blt.n	810c17e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810c168:	683b      	ldr	r3, [r7, #0]
 810c16a:	b2da      	uxtb	r2, r3
 810c16c:	490c      	ldr	r1, [pc, #48]	@ (810c1a0 <__NVIC_SetPriority+0x4c>)
 810c16e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810c172:	0112      	lsls	r2, r2, #4
 810c174:	b2d2      	uxtb	r2, r2
 810c176:	440b      	add	r3, r1
 810c178:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 810c17c:	e00a      	b.n	810c194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810c17e:	683b      	ldr	r3, [r7, #0]
 810c180:	b2da      	uxtb	r2, r3
 810c182:	4908      	ldr	r1, [pc, #32]	@ (810c1a4 <__NVIC_SetPriority+0x50>)
 810c184:	88fb      	ldrh	r3, [r7, #6]
 810c186:	f003 030f 	and.w	r3, r3, #15
 810c18a:	3b04      	subs	r3, #4
 810c18c:	0112      	lsls	r2, r2, #4
 810c18e:	b2d2      	uxtb	r2, r2
 810c190:	440b      	add	r3, r1
 810c192:	761a      	strb	r2, [r3, #24]
}
 810c194:	bf00      	nop
 810c196:	370c      	adds	r7, #12
 810c198:	46bd      	mov	sp, r7
 810c19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c19e:	4770      	bx	lr
 810c1a0:	e000e100 	.word	0xe000e100
 810c1a4:	e000ed00 	.word	0xe000ed00

0810c1a8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 810c1a8:	b580      	push	{r7, lr}
 810c1aa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 810c1ac:	4b05      	ldr	r3, [pc, #20]	@ (810c1c4 <SysTick_Handler+0x1c>)
 810c1ae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 810c1b0:	f003 fd5c 	bl	810fc6c <xTaskGetSchedulerState>
 810c1b4:	4603      	mov	r3, r0
 810c1b6:	2b01      	cmp	r3, #1
 810c1b8:	d001      	beq.n	810c1be <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 810c1ba:	f001 f915 	bl	810d3e8 <xPortSysTickHandler>
  }
}
 810c1be:	bf00      	nop
 810c1c0:	bd80      	pop	{r7, pc}
 810c1c2:	bf00      	nop
 810c1c4:	e000e010 	.word	0xe000e010

0810c1c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 810c1c8:	b580      	push	{r7, lr}
 810c1ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 810c1cc:	2100      	movs	r1, #0
 810c1ce:	f06f 0004 	mvn.w	r0, #4
 810c1d2:	f7ff ffbf 	bl	810c154 <__NVIC_SetPriority>
#endif
}
 810c1d6:	bf00      	nop
 810c1d8:	bd80      	pop	{r7, pc}
	...

0810c1dc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 810c1dc:	b480      	push	{r7}
 810c1de:	b083      	sub	sp, #12
 810c1e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810c1e2:	f3ef 8305 	mrs	r3, IPSR
 810c1e6:	603b      	str	r3, [r7, #0]
  return(result);
 810c1e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810c1ea:	2b00      	cmp	r3, #0
 810c1ec:	d003      	beq.n	810c1f6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 810c1ee:	f06f 0305 	mvn.w	r3, #5
 810c1f2:	607b      	str	r3, [r7, #4]
 810c1f4:	e00c      	b.n	810c210 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 810c1f6:	4b0a      	ldr	r3, [pc, #40]	@ (810c220 <osKernelInitialize+0x44>)
 810c1f8:	681b      	ldr	r3, [r3, #0]
 810c1fa:	2b00      	cmp	r3, #0
 810c1fc:	d105      	bne.n	810c20a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 810c1fe:	4b08      	ldr	r3, [pc, #32]	@ (810c220 <osKernelInitialize+0x44>)
 810c200:	2201      	movs	r2, #1
 810c202:	601a      	str	r2, [r3, #0]
      stat = osOK;
 810c204:	2300      	movs	r3, #0
 810c206:	607b      	str	r3, [r7, #4]
 810c208:	e002      	b.n	810c210 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 810c20a:	f04f 33ff 	mov.w	r3, #4294967295
 810c20e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 810c210:	687b      	ldr	r3, [r7, #4]
}
 810c212:	4618      	mov	r0, r3
 810c214:	370c      	adds	r7, #12
 810c216:	46bd      	mov	sp, r7
 810c218:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c21c:	4770      	bx	lr
 810c21e:	bf00      	nop
 810c220:	10000368 	.word	0x10000368

0810c224 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 810c224:	b580      	push	{r7, lr}
 810c226:	b082      	sub	sp, #8
 810c228:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810c22a:	f3ef 8305 	mrs	r3, IPSR
 810c22e:	603b      	str	r3, [r7, #0]
  return(result);
 810c230:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810c232:	2b00      	cmp	r3, #0
 810c234:	d003      	beq.n	810c23e <osKernelStart+0x1a>
    stat = osErrorISR;
 810c236:	f06f 0305 	mvn.w	r3, #5
 810c23a:	607b      	str	r3, [r7, #4]
 810c23c:	e010      	b.n	810c260 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 810c23e:	4b0b      	ldr	r3, [pc, #44]	@ (810c26c <osKernelStart+0x48>)
 810c240:	681b      	ldr	r3, [r3, #0]
 810c242:	2b01      	cmp	r3, #1
 810c244:	d109      	bne.n	810c25a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 810c246:	f7ff ffbf 	bl	810c1c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 810c24a:	4b08      	ldr	r3, [pc, #32]	@ (810c26c <osKernelStart+0x48>)
 810c24c:	2202      	movs	r2, #2
 810c24e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 810c250:	f003 f85e 	bl	810f310 <vTaskStartScheduler>
      stat = osOK;
 810c254:	2300      	movs	r3, #0
 810c256:	607b      	str	r3, [r7, #4]
 810c258:	e002      	b.n	810c260 <osKernelStart+0x3c>
    } else {
      stat = osError;
 810c25a:	f04f 33ff 	mov.w	r3, #4294967295
 810c25e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 810c260:	687b      	ldr	r3, [r7, #4]
}
 810c262:	4618      	mov	r0, r3
 810c264:	3708      	adds	r7, #8
 810c266:	46bd      	mov	sp, r7
 810c268:	bd80      	pop	{r7, pc}
 810c26a:	bf00      	nop
 810c26c:	10000368 	.word	0x10000368

0810c270 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 810c270:	b580      	push	{r7, lr}
 810c272:	b082      	sub	sp, #8
 810c274:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810c276:	f3ef 8305 	mrs	r3, IPSR
 810c27a:	603b      	str	r3, [r7, #0]
  return(result);
 810c27c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 810c27e:	2b00      	cmp	r3, #0
 810c280:	d003      	beq.n	810c28a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 810c282:	f003 f971 	bl	810f568 <xTaskGetTickCountFromISR>
 810c286:	6078      	str	r0, [r7, #4]
 810c288:	e002      	b.n	810c290 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 810c28a:	f003 f95d 	bl	810f548 <xTaskGetTickCount>
 810c28e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 810c290:	687b      	ldr	r3, [r7, #4]
}
 810c292:	4618      	mov	r0, r3
 810c294:	3708      	adds	r7, #8
 810c296:	46bd      	mov	sp, r7
 810c298:	bd80      	pop	{r7, pc}

0810c29a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 810c29a:	b580      	push	{r7, lr}
 810c29c:	b08e      	sub	sp, #56	@ 0x38
 810c29e:	af04      	add	r7, sp, #16
 810c2a0:	60f8      	str	r0, [r7, #12]
 810c2a2:	60b9      	str	r1, [r7, #8]
 810c2a4:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 810c2a6:	2300      	movs	r3, #0
 810c2a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810c2aa:	f3ef 8305 	mrs	r3, IPSR
 810c2ae:	617b      	str	r3, [r7, #20]
  return(result);
 810c2b0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 810c2b2:	2b00      	cmp	r3, #0
 810c2b4:	d17e      	bne.n	810c3b4 <osThreadNew+0x11a>
 810c2b6:	68fb      	ldr	r3, [r7, #12]
 810c2b8:	2b00      	cmp	r3, #0
 810c2ba:	d07b      	beq.n	810c3b4 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 810c2bc:	2380      	movs	r3, #128	@ 0x80
 810c2be:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 810c2c0:	2318      	movs	r3, #24
 810c2c2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 810c2c4:	2300      	movs	r3, #0
 810c2c6:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 810c2c8:	f04f 33ff 	mov.w	r3, #4294967295
 810c2cc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 810c2ce:	687b      	ldr	r3, [r7, #4]
 810c2d0:	2b00      	cmp	r3, #0
 810c2d2:	d045      	beq.n	810c360 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 810c2d4:	687b      	ldr	r3, [r7, #4]
 810c2d6:	681b      	ldr	r3, [r3, #0]
 810c2d8:	2b00      	cmp	r3, #0
 810c2da:	d002      	beq.n	810c2e2 <osThreadNew+0x48>
        name = attr->name;
 810c2dc:	687b      	ldr	r3, [r7, #4]
 810c2de:	681b      	ldr	r3, [r3, #0]
 810c2e0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 810c2e2:	687b      	ldr	r3, [r7, #4]
 810c2e4:	699b      	ldr	r3, [r3, #24]
 810c2e6:	2b00      	cmp	r3, #0
 810c2e8:	d002      	beq.n	810c2f0 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 810c2ea:	687b      	ldr	r3, [r7, #4]
 810c2ec:	699b      	ldr	r3, [r3, #24]
 810c2ee:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 810c2f0:	69fb      	ldr	r3, [r7, #28]
 810c2f2:	2b00      	cmp	r3, #0
 810c2f4:	d008      	beq.n	810c308 <osThreadNew+0x6e>
 810c2f6:	69fb      	ldr	r3, [r7, #28]
 810c2f8:	2b38      	cmp	r3, #56	@ 0x38
 810c2fa:	d805      	bhi.n	810c308 <osThreadNew+0x6e>
 810c2fc:	687b      	ldr	r3, [r7, #4]
 810c2fe:	685b      	ldr	r3, [r3, #4]
 810c300:	f003 0301 	and.w	r3, r3, #1
 810c304:	2b00      	cmp	r3, #0
 810c306:	d001      	beq.n	810c30c <osThreadNew+0x72>
        return (NULL);
 810c308:	2300      	movs	r3, #0
 810c30a:	e054      	b.n	810c3b6 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 810c30c:	687b      	ldr	r3, [r7, #4]
 810c30e:	695b      	ldr	r3, [r3, #20]
 810c310:	2b00      	cmp	r3, #0
 810c312:	d003      	beq.n	810c31c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 810c314:	687b      	ldr	r3, [r7, #4]
 810c316:	695b      	ldr	r3, [r3, #20]
 810c318:	089b      	lsrs	r3, r3, #2
 810c31a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810c31c:	687b      	ldr	r3, [r7, #4]
 810c31e:	689b      	ldr	r3, [r3, #8]
 810c320:	2b00      	cmp	r3, #0
 810c322:	d00e      	beq.n	810c342 <osThreadNew+0xa8>
 810c324:	687b      	ldr	r3, [r7, #4]
 810c326:	68db      	ldr	r3, [r3, #12]
 810c328:	2ba7      	cmp	r3, #167	@ 0xa7
 810c32a:	d90a      	bls.n	810c342 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810c32c:	687b      	ldr	r3, [r7, #4]
 810c32e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810c330:	2b00      	cmp	r3, #0
 810c332:	d006      	beq.n	810c342 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810c334:	687b      	ldr	r3, [r7, #4]
 810c336:	695b      	ldr	r3, [r3, #20]
 810c338:	2b00      	cmp	r3, #0
 810c33a:	d002      	beq.n	810c342 <osThreadNew+0xa8>
        mem = 1;
 810c33c:	2301      	movs	r3, #1
 810c33e:	61bb      	str	r3, [r7, #24]
 810c340:	e010      	b.n	810c364 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 810c342:	687b      	ldr	r3, [r7, #4]
 810c344:	689b      	ldr	r3, [r3, #8]
 810c346:	2b00      	cmp	r3, #0
 810c348:	d10c      	bne.n	810c364 <osThreadNew+0xca>
 810c34a:	687b      	ldr	r3, [r7, #4]
 810c34c:	68db      	ldr	r3, [r3, #12]
 810c34e:	2b00      	cmp	r3, #0
 810c350:	d108      	bne.n	810c364 <osThreadNew+0xca>
 810c352:	687b      	ldr	r3, [r7, #4]
 810c354:	691b      	ldr	r3, [r3, #16]
 810c356:	2b00      	cmp	r3, #0
 810c358:	d104      	bne.n	810c364 <osThreadNew+0xca>
          mem = 0;
 810c35a:	2300      	movs	r3, #0
 810c35c:	61bb      	str	r3, [r7, #24]
 810c35e:	e001      	b.n	810c364 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 810c360:	2300      	movs	r3, #0
 810c362:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 810c364:	69bb      	ldr	r3, [r7, #24]
 810c366:	2b01      	cmp	r3, #1
 810c368:	d110      	bne.n	810c38c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810c36a:	687b      	ldr	r3, [r7, #4]
 810c36c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 810c36e:	687a      	ldr	r2, [r7, #4]
 810c370:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810c372:	9202      	str	r2, [sp, #8]
 810c374:	9301      	str	r3, [sp, #4]
 810c376:	69fb      	ldr	r3, [r7, #28]
 810c378:	9300      	str	r3, [sp, #0]
 810c37a:	68bb      	ldr	r3, [r7, #8]
 810c37c:	6a3a      	ldr	r2, [r7, #32]
 810c37e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810c380:	68f8      	ldr	r0, [r7, #12]
 810c382:	f002 fdd1 	bl	810ef28 <xTaskCreateStatic>
 810c386:	4603      	mov	r3, r0
 810c388:	613b      	str	r3, [r7, #16]
 810c38a:	e013      	b.n	810c3b4 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 810c38c:	69bb      	ldr	r3, [r7, #24]
 810c38e:	2b00      	cmp	r3, #0
 810c390:	d110      	bne.n	810c3b4 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 810c392:	6a3b      	ldr	r3, [r7, #32]
 810c394:	b29a      	uxth	r2, r3
 810c396:	f107 0310 	add.w	r3, r7, #16
 810c39a:	9301      	str	r3, [sp, #4]
 810c39c:	69fb      	ldr	r3, [r7, #28]
 810c39e:	9300      	str	r3, [sp, #0]
 810c3a0:	68bb      	ldr	r3, [r7, #8]
 810c3a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810c3a4:	68f8      	ldr	r0, [r7, #12]
 810c3a6:	f002 fe1f 	bl	810efe8 <xTaskCreate>
 810c3aa:	4603      	mov	r3, r0
 810c3ac:	2b01      	cmp	r3, #1
 810c3ae:	d001      	beq.n	810c3b4 <osThreadNew+0x11a>
            hTask = NULL;
 810c3b0:	2300      	movs	r3, #0
 810c3b2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 810c3b4:	693b      	ldr	r3, [r7, #16]
}
 810c3b6:	4618      	mov	r0, r3
 810c3b8:	3728      	adds	r7, #40	@ 0x28
 810c3ba:	46bd      	mov	sp, r7
 810c3bc:	bd80      	pop	{r7, pc}

0810c3be <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 810c3be:	b580      	push	{r7, lr}
 810c3c0:	b084      	sub	sp, #16
 810c3c2:	af00      	add	r7, sp, #0
 810c3c4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810c3c6:	f3ef 8305 	mrs	r3, IPSR
 810c3ca:	60bb      	str	r3, [r7, #8]
  return(result);
 810c3cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 810c3ce:	2b00      	cmp	r3, #0
 810c3d0:	d003      	beq.n	810c3da <osDelay+0x1c>
    stat = osErrorISR;
 810c3d2:	f06f 0305 	mvn.w	r3, #5
 810c3d6:	60fb      	str	r3, [r7, #12]
 810c3d8:	e007      	b.n	810c3ea <osDelay+0x2c>
  }
  else {
    stat = osOK;
 810c3da:	2300      	movs	r3, #0
 810c3dc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 810c3de:	687b      	ldr	r3, [r7, #4]
 810c3e0:	2b00      	cmp	r3, #0
 810c3e2:	d002      	beq.n	810c3ea <osDelay+0x2c>
      vTaskDelay(ticks);
 810c3e4:	6878      	ldr	r0, [r7, #4]
 810c3e6:	f002 ff5d 	bl	810f2a4 <vTaskDelay>
    }
  }

  return (stat);
 810c3ea:	68fb      	ldr	r3, [r7, #12]
}
 810c3ec:	4618      	mov	r0, r3
 810c3ee:	3710      	adds	r7, #16
 810c3f0:	46bd      	mov	sp, r7
 810c3f2:	bd80      	pop	{r7, pc}

0810c3f4 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 810c3f4:	b580      	push	{r7, lr}
 810c3f6:	b088      	sub	sp, #32
 810c3f8:	af00      	add	r7, sp, #0
 810c3fa:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 810c3fc:	2300      	movs	r3, #0
 810c3fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810c400:	f3ef 8305 	mrs	r3, IPSR
 810c404:	60bb      	str	r3, [r7, #8]
  return(result);
 810c406:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 810c408:	2b00      	cmp	r3, #0
 810c40a:	d174      	bne.n	810c4f6 <osMutexNew+0x102>
    if (attr != NULL) {
 810c40c:	687b      	ldr	r3, [r7, #4]
 810c40e:	2b00      	cmp	r3, #0
 810c410:	d003      	beq.n	810c41a <osMutexNew+0x26>
      type = attr->attr_bits;
 810c412:	687b      	ldr	r3, [r7, #4]
 810c414:	685b      	ldr	r3, [r3, #4]
 810c416:	61bb      	str	r3, [r7, #24]
 810c418:	e001      	b.n	810c41e <osMutexNew+0x2a>
    } else {
      type = 0U;
 810c41a:	2300      	movs	r3, #0
 810c41c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 810c41e:	69bb      	ldr	r3, [r7, #24]
 810c420:	f003 0301 	and.w	r3, r3, #1
 810c424:	2b00      	cmp	r3, #0
 810c426:	d002      	beq.n	810c42e <osMutexNew+0x3a>
      rmtx = 1U;
 810c428:	2301      	movs	r3, #1
 810c42a:	617b      	str	r3, [r7, #20]
 810c42c:	e001      	b.n	810c432 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 810c42e:	2300      	movs	r3, #0
 810c430:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 810c432:	69bb      	ldr	r3, [r7, #24]
 810c434:	f003 0308 	and.w	r3, r3, #8
 810c438:	2b00      	cmp	r3, #0
 810c43a:	d15c      	bne.n	810c4f6 <osMutexNew+0x102>
      mem = -1;
 810c43c:	f04f 33ff 	mov.w	r3, #4294967295
 810c440:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 810c442:	687b      	ldr	r3, [r7, #4]
 810c444:	2b00      	cmp	r3, #0
 810c446:	d015      	beq.n	810c474 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 810c448:	687b      	ldr	r3, [r7, #4]
 810c44a:	689b      	ldr	r3, [r3, #8]
 810c44c:	2b00      	cmp	r3, #0
 810c44e:	d006      	beq.n	810c45e <osMutexNew+0x6a>
 810c450:	687b      	ldr	r3, [r7, #4]
 810c452:	68db      	ldr	r3, [r3, #12]
 810c454:	2b4f      	cmp	r3, #79	@ 0x4f
 810c456:	d902      	bls.n	810c45e <osMutexNew+0x6a>
          mem = 1;
 810c458:	2301      	movs	r3, #1
 810c45a:	613b      	str	r3, [r7, #16]
 810c45c:	e00c      	b.n	810c478 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 810c45e:	687b      	ldr	r3, [r7, #4]
 810c460:	689b      	ldr	r3, [r3, #8]
 810c462:	2b00      	cmp	r3, #0
 810c464:	d108      	bne.n	810c478 <osMutexNew+0x84>
 810c466:	687b      	ldr	r3, [r7, #4]
 810c468:	68db      	ldr	r3, [r3, #12]
 810c46a:	2b00      	cmp	r3, #0
 810c46c:	d104      	bne.n	810c478 <osMutexNew+0x84>
            mem = 0;
 810c46e:	2300      	movs	r3, #0
 810c470:	613b      	str	r3, [r7, #16]
 810c472:	e001      	b.n	810c478 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 810c474:	2300      	movs	r3, #0
 810c476:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 810c478:	693b      	ldr	r3, [r7, #16]
 810c47a:	2b01      	cmp	r3, #1
 810c47c:	d112      	bne.n	810c4a4 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 810c47e:	697b      	ldr	r3, [r7, #20]
 810c480:	2b00      	cmp	r3, #0
 810c482:	d007      	beq.n	810c494 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 810c484:	687b      	ldr	r3, [r7, #4]
 810c486:	689b      	ldr	r3, [r3, #8]
 810c488:	4619      	mov	r1, r3
 810c48a:	2004      	movs	r0, #4
 810c48c:	f001 f9b5 	bl	810d7fa <xQueueCreateMutexStatic>
 810c490:	61f8      	str	r0, [r7, #28]
 810c492:	e016      	b.n	810c4c2 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 810c494:	687b      	ldr	r3, [r7, #4]
 810c496:	689b      	ldr	r3, [r3, #8]
 810c498:	4619      	mov	r1, r3
 810c49a:	2001      	movs	r0, #1
 810c49c:	f001 f9ad 	bl	810d7fa <xQueueCreateMutexStatic>
 810c4a0:	61f8      	str	r0, [r7, #28]
 810c4a2:	e00e      	b.n	810c4c2 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 810c4a4:	693b      	ldr	r3, [r7, #16]
 810c4a6:	2b00      	cmp	r3, #0
 810c4a8:	d10b      	bne.n	810c4c2 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 810c4aa:	697b      	ldr	r3, [r7, #20]
 810c4ac:	2b00      	cmp	r3, #0
 810c4ae:	d004      	beq.n	810c4ba <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 810c4b0:	2004      	movs	r0, #4
 810c4b2:	f001 f98a 	bl	810d7ca <xQueueCreateMutex>
 810c4b6:	61f8      	str	r0, [r7, #28]
 810c4b8:	e003      	b.n	810c4c2 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 810c4ba:	2001      	movs	r0, #1
 810c4bc:	f001 f985 	bl	810d7ca <xQueueCreateMutex>
 810c4c0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 810c4c2:	69fb      	ldr	r3, [r7, #28]
 810c4c4:	2b00      	cmp	r3, #0
 810c4c6:	d00c      	beq.n	810c4e2 <osMutexNew+0xee>
        if (attr != NULL) {
 810c4c8:	687b      	ldr	r3, [r7, #4]
 810c4ca:	2b00      	cmp	r3, #0
 810c4cc:	d003      	beq.n	810c4d6 <osMutexNew+0xe2>
          name = attr->name;
 810c4ce:	687b      	ldr	r3, [r7, #4]
 810c4d0:	681b      	ldr	r3, [r3, #0]
 810c4d2:	60fb      	str	r3, [r7, #12]
 810c4d4:	e001      	b.n	810c4da <osMutexNew+0xe6>
        } else {
          name = NULL;
 810c4d6:	2300      	movs	r3, #0
 810c4d8:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 810c4da:	68f9      	ldr	r1, [r7, #12]
 810c4dc:	69f8      	ldr	r0, [r7, #28]
 810c4de:	f002 f871 	bl	810e5c4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 810c4e2:	69fb      	ldr	r3, [r7, #28]
 810c4e4:	2b00      	cmp	r3, #0
 810c4e6:	d006      	beq.n	810c4f6 <osMutexNew+0x102>
 810c4e8:	697b      	ldr	r3, [r7, #20]
 810c4ea:	2b00      	cmp	r3, #0
 810c4ec:	d003      	beq.n	810c4f6 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 810c4ee:	69fb      	ldr	r3, [r7, #28]
 810c4f0:	f043 0301 	orr.w	r3, r3, #1
 810c4f4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 810c4f6:	69fb      	ldr	r3, [r7, #28]
}
 810c4f8:	4618      	mov	r0, r3
 810c4fa:	3720      	adds	r7, #32
 810c4fc:	46bd      	mov	sp, r7
 810c4fe:	bd80      	pop	{r7, pc}

0810c500 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 810c500:	b580      	push	{r7, lr}
 810c502:	b086      	sub	sp, #24
 810c504:	af00      	add	r7, sp, #0
 810c506:	6078      	str	r0, [r7, #4]
 810c508:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 810c50a:	687b      	ldr	r3, [r7, #4]
 810c50c:	f023 0301 	bic.w	r3, r3, #1
 810c510:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 810c512:	687b      	ldr	r3, [r7, #4]
 810c514:	f003 0301 	and.w	r3, r3, #1
 810c518:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 810c51a:	2300      	movs	r3, #0
 810c51c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810c51e:	f3ef 8305 	mrs	r3, IPSR
 810c522:	60bb      	str	r3, [r7, #8]
  return(result);
 810c524:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 810c526:	2b00      	cmp	r3, #0
 810c528:	d003      	beq.n	810c532 <osMutexAcquire+0x32>
    stat = osErrorISR;
 810c52a:	f06f 0305 	mvn.w	r3, #5
 810c52e:	617b      	str	r3, [r7, #20]
 810c530:	e02c      	b.n	810c58c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 810c532:	693b      	ldr	r3, [r7, #16]
 810c534:	2b00      	cmp	r3, #0
 810c536:	d103      	bne.n	810c540 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 810c538:	f06f 0303 	mvn.w	r3, #3
 810c53c:	617b      	str	r3, [r7, #20]
 810c53e:	e025      	b.n	810c58c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 810c540:	68fb      	ldr	r3, [r7, #12]
 810c542:	2b00      	cmp	r3, #0
 810c544:	d011      	beq.n	810c56a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 810c546:	6839      	ldr	r1, [r7, #0]
 810c548:	6938      	ldr	r0, [r7, #16]
 810c54a:	f001 f9a6 	bl	810d89a <xQueueTakeMutexRecursive>
 810c54e:	4603      	mov	r3, r0
 810c550:	2b01      	cmp	r3, #1
 810c552:	d01b      	beq.n	810c58c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 810c554:	683b      	ldr	r3, [r7, #0]
 810c556:	2b00      	cmp	r3, #0
 810c558:	d003      	beq.n	810c562 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 810c55a:	f06f 0301 	mvn.w	r3, #1
 810c55e:	617b      	str	r3, [r7, #20]
 810c560:	e014      	b.n	810c58c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 810c562:	f06f 0302 	mvn.w	r3, #2
 810c566:	617b      	str	r3, [r7, #20]
 810c568:	e010      	b.n	810c58c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 810c56a:	6839      	ldr	r1, [r7, #0]
 810c56c:	6938      	ldr	r0, [r7, #16]
 810c56e:	f001 fd4b 	bl	810e008 <xQueueSemaphoreTake>
 810c572:	4603      	mov	r3, r0
 810c574:	2b01      	cmp	r3, #1
 810c576:	d009      	beq.n	810c58c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 810c578:	683b      	ldr	r3, [r7, #0]
 810c57a:	2b00      	cmp	r3, #0
 810c57c:	d003      	beq.n	810c586 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 810c57e:	f06f 0301 	mvn.w	r3, #1
 810c582:	617b      	str	r3, [r7, #20]
 810c584:	e002      	b.n	810c58c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 810c586:	f06f 0302 	mvn.w	r3, #2
 810c58a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 810c58c:	697b      	ldr	r3, [r7, #20]
}
 810c58e:	4618      	mov	r0, r3
 810c590:	3718      	adds	r7, #24
 810c592:	46bd      	mov	sp, r7
 810c594:	bd80      	pop	{r7, pc}

0810c596 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 810c596:	b580      	push	{r7, lr}
 810c598:	b086      	sub	sp, #24
 810c59a:	af00      	add	r7, sp, #0
 810c59c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 810c59e:	687b      	ldr	r3, [r7, #4]
 810c5a0:	f023 0301 	bic.w	r3, r3, #1
 810c5a4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 810c5a6:	687b      	ldr	r3, [r7, #4]
 810c5a8:	f003 0301 	and.w	r3, r3, #1
 810c5ac:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 810c5ae:	2300      	movs	r3, #0
 810c5b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810c5b2:	f3ef 8305 	mrs	r3, IPSR
 810c5b6:	60bb      	str	r3, [r7, #8]
  return(result);
 810c5b8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 810c5ba:	2b00      	cmp	r3, #0
 810c5bc:	d003      	beq.n	810c5c6 <osMutexRelease+0x30>
    stat = osErrorISR;
 810c5be:	f06f 0305 	mvn.w	r3, #5
 810c5c2:	617b      	str	r3, [r7, #20]
 810c5c4:	e01f      	b.n	810c606 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 810c5c6:	693b      	ldr	r3, [r7, #16]
 810c5c8:	2b00      	cmp	r3, #0
 810c5ca:	d103      	bne.n	810c5d4 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 810c5cc:	f06f 0303 	mvn.w	r3, #3
 810c5d0:	617b      	str	r3, [r7, #20]
 810c5d2:	e018      	b.n	810c606 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 810c5d4:	68fb      	ldr	r3, [r7, #12]
 810c5d6:	2b00      	cmp	r3, #0
 810c5d8:	d009      	beq.n	810c5ee <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 810c5da:	6938      	ldr	r0, [r7, #16]
 810c5dc:	f001 f928 	bl	810d830 <xQueueGiveMutexRecursive>
 810c5e0:	4603      	mov	r3, r0
 810c5e2:	2b01      	cmp	r3, #1
 810c5e4:	d00f      	beq.n	810c606 <osMutexRelease+0x70>
        stat = osErrorResource;
 810c5e6:	f06f 0302 	mvn.w	r3, #2
 810c5ea:	617b      	str	r3, [r7, #20]
 810c5ec:	e00b      	b.n	810c606 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 810c5ee:	2300      	movs	r3, #0
 810c5f0:	2200      	movs	r2, #0
 810c5f2:	2100      	movs	r1, #0
 810c5f4:	6938      	ldr	r0, [r7, #16]
 810c5f6:	f001 f9f5 	bl	810d9e4 <xQueueGenericSend>
 810c5fa:	4603      	mov	r3, r0
 810c5fc:	2b01      	cmp	r3, #1
 810c5fe:	d002      	beq.n	810c606 <osMutexRelease+0x70>
        stat = osErrorResource;
 810c600:	f06f 0302 	mvn.w	r3, #2
 810c604:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 810c606:	697b      	ldr	r3, [r7, #20]
}
 810c608:	4618      	mov	r0, r3
 810c60a:	3718      	adds	r7, #24
 810c60c:	46bd      	mov	sp, r7
 810c60e:	bd80      	pop	{r7, pc}

0810c610 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 810c610:	b580      	push	{r7, lr}
 810c612:	b08a      	sub	sp, #40	@ 0x28
 810c614:	af02      	add	r7, sp, #8
 810c616:	60f8      	str	r0, [r7, #12]
 810c618:	60b9      	str	r1, [r7, #8]
 810c61a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 810c61c:	2300      	movs	r3, #0
 810c61e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810c620:	f3ef 8305 	mrs	r3, IPSR
 810c624:	613b      	str	r3, [r7, #16]
  return(result);
 810c626:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 810c628:	2b00      	cmp	r3, #0
 810c62a:	d175      	bne.n	810c718 <osSemaphoreNew+0x108>
 810c62c:	68fb      	ldr	r3, [r7, #12]
 810c62e:	2b00      	cmp	r3, #0
 810c630:	d072      	beq.n	810c718 <osSemaphoreNew+0x108>
 810c632:	68ba      	ldr	r2, [r7, #8]
 810c634:	68fb      	ldr	r3, [r7, #12]
 810c636:	429a      	cmp	r2, r3
 810c638:	d86e      	bhi.n	810c718 <osSemaphoreNew+0x108>
    mem = -1;
 810c63a:	f04f 33ff 	mov.w	r3, #4294967295
 810c63e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 810c640:	687b      	ldr	r3, [r7, #4]
 810c642:	2b00      	cmp	r3, #0
 810c644:	d015      	beq.n	810c672 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 810c646:	687b      	ldr	r3, [r7, #4]
 810c648:	689b      	ldr	r3, [r3, #8]
 810c64a:	2b00      	cmp	r3, #0
 810c64c:	d006      	beq.n	810c65c <osSemaphoreNew+0x4c>
 810c64e:	687b      	ldr	r3, [r7, #4]
 810c650:	68db      	ldr	r3, [r3, #12]
 810c652:	2b4f      	cmp	r3, #79	@ 0x4f
 810c654:	d902      	bls.n	810c65c <osSemaphoreNew+0x4c>
        mem = 1;
 810c656:	2301      	movs	r3, #1
 810c658:	61bb      	str	r3, [r7, #24]
 810c65a:	e00c      	b.n	810c676 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 810c65c:	687b      	ldr	r3, [r7, #4]
 810c65e:	689b      	ldr	r3, [r3, #8]
 810c660:	2b00      	cmp	r3, #0
 810c662:	d108      	bne.n	810c676 <osSemaphoreNew+0x66>
 810c664:	687b      	ldr	r3, [r7, #4]
 810c666:	68db      	ldr	r3, [r3, #12]
 810c668:	2b00      	cmp	r3, #0
 810c66a:	d104      	bne.n	810c676 <osSemaphoreNew+0x66>
          mem = 0;
 810c66c:	2300      	movs	r3, #0
 810c66e:	61bb      	str	r3, [r7, #24]
 810c670:	e001      	b.n	810c676 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 810c672:	2300      	movs	r3, #0
 810c674:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 810c676:	69bb      	ldr	r3, [r7, #24]
 810c678:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c67c:	d04c      	beq.n	810c718 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 810c67e:	68fb      	ldr	r3, [r7, #12]
 810c680:	2b01      	cmp	r3, #1
 810c682:	d128      	bne.n	810c6d6 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 810c684:	69bb      	ldr	r3, [r7, #24]
 810c686:	2b01      	cmp	r3, #1
 810c688:	d10a      	bne.n	810c6a0 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 810c68a:	687b      	ldr	r3, [r7, #4]
 810c68c:	689b      	ldr	r3, [r3, #8]
 810c68e:	2203      	movs	r2, #3
 810c690:	9200      	str	r2, [sp, #0]
 810c692:	2200      	movs	r2, #0
 810c694:	2100      	movs	r1, #0
 810c696:	2001      	movs	r0, #1
 810c698:	f000 ffa2 	bl	810d5e0 <xQueueGenericCreateStatic>
 810c69c:	61f8      	str	r0, [r7, #28]
 810c69e:	e005      	b.n	810c6ac <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 810c6a0:	2203      	movs	r2, #3
 810c6a2:	2100      	movs	r1, #0
 810c6a4:	2001      	movs	r0, #1
 810c6a6:	f001 f818 	bl	810d6da <xQueueGenericCreate>
 810c6aa:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 810c6ac:	69fb      	ldr	r3, [r7, #28]
 810c6ae:	2b00      	cmp	r3, #0
 810c6b0:	d022      	beq.n	810c6f8 <osSemaphoreNew+0xe8>
 810c6b2:	68bb      	ldr	r3, [r7, #8]
 810c6b4:	2b00      	cmp	r3, #0
 810c6b6:	d01f      	beq.n	810c6f8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 810c6b8:	2300      	movs	r3, #0
 810c6ba:	2200      	movs	r2, #0
 810c6bc:	2100      	movs	r1, #0
 810c6be:	69f8      	ldr	r0, [r7, #28]
 810c6c0:	f001 f990 	bl	810d9e4 <xQueueGenericSend>
 810c6c4:	4603      	mov	r3, r0
 810c6c6:	2b01      	cmp	r3, #1
 810c6c8:	d016      	beq.n	810c6f8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 810c6ca:	69f8      	ldr	r0, [r7, #28]
 810c6cc:	f001 fe2e 	bl	810e32c <vQueueDelete>
            hSemaphore = NULL;
 810c6d0:	2300      	movs	r3, #0
 810c6d2:	61fb      	str	r3, [r7, #28]
 810c6d4:	e010      	b.n	810c6f8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 810c6d6:	69bb      	ldr	r3, [r7, #24]
 810c6d8:	2b01      	cmp	r3, #1
 810c6da:	d108      	bne.n	810c6ee <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 810c6dc:	687b      	ldr	r3, [r7, #4]
 810c6de:	689b      	ldr	r3, [r3, #8]
 810c6e0:	461a      	mov	r2, r3
 810c6e2:	68b9      	ldr	r1, [r7, #8]
 810c6e4:	68f8      	ldr	r0, [r7, #12]
 810c6e6:	f001 f90f 	bl	810d908 <xQueueCreateCountingSemaphoreStatic>
 810c6ea:	61f8      	str	r0, [r7, #28]
 810c6ec:	e004      	b.n	810c6f8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 810c6ee:	68b9      	ldr	r1, [r7, #8]
 810c6f0:	68f8      	ldr	r0, [r7, #12]
 810c6f2:	f001 f942 	bl	810d97a <xQueueCreateCountingSemaphore>
 810c6f6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 810c6f8:	69fb      	ldr	r3, [r7, #28]
 810c6fa:	2b00      	cmp	r3, #0
 810c6fc:	d00c      	beq.n	810c718 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 810c6fe:	687b      	ldr	r3, [r7, #4]
 810c700:	2b00      	cmp	r3, #0
 810c702:	d003      	beq.n	810c70c <osSemaphoreNew+0xfc>
          name = attr->name;
 810c704:	687b      	ldr	r3, [r7, #4]
 810c706:	681b      	ldr	r3, [r3, #0]
 810c708:	617b      	str	r3, [r7, #20]
 810c70a:	e001      	b.n	810c710 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 810c70c:	2300      	movs	r3, #0
 810c70e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 810c710:	6979      	ldr	r1, [r7, #20]
 810c712:	69f8      	ldr	r0, [r7, #28]
 810c714:	f001 ff56 	bl	810e5c4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 810c718:	69fb      	ldr	r3, [r7, #28]
}
 810c71a:	4618      	mov	r0, r3
 810c71c:	3720      	adds	r7, #32
 810c71e:	46bd      	mov	sp, r7
 810c720:	bd80      	pop	{r7, pc}
	...

0810c724 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 810c724:	b580      	push	{r7, lr}
 810c726:	b086      	sub	sp, #24
 810c728:	af00      	add	r7, sp, #0
 810c72a:	6078      	str	r0, [r7, #4]
 810c72c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 810c72e:	687b      	ldr	r3, [r7, #4]
 810c730:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 810c732:	2300      	movs	r3, #0
 810c734:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 810c736:	693b      	ldr	r3, [r7, #16]
 810c738:	2b00      	cmp	r3, #0
 810c73a:	d103      	bne.n	810c744 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 810c73c:	f06f 0303 	mvn.w	r3, #3
 810c740:	617b      	str	r3, [r7, #20]
 810c742:	e039      	b.n	810c7b8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810c744:	f3ef 8305 	mrs	r3, IPSR
 810c748:	60fb      	str	r3, [r7, #12]
  return(result);
 810c74a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 810c74c:	2b00      	cmp	r3, #0
 810c74e:	d022      	beq.n	810c796 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 810c750:	683b      	ldr	r3, [r7, #0]
 810c752:	2b00      	cmp	r3, #0
 810c754:	d003      	beq.n	810c75e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 810c756:	f06f 0303 	mvn.w	r3, #3
 810c75a:	617b      	str	r3, [r7, #20]
 810c75c:	e02c      	b.n	810c7b8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 810c75e:	2300      	movs	r3, #0
 810c760:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 810c762:	f107 0308 	add.w	r3, r7, #8
 810c766:	461a      	mov	r2, r3
 810c768:	2100      	movs	r1, #0
 810c76a:	6938      	ldr	r0, [r7, #16]
 810c76c:	f001 fd5c 	bl	810e228 <xQueueReceiveFromISR>
 810c770:	4603      	mov	r3, r0
 810c772:	2b01      	cmp	r3, #1
 810c774:	d003      	beq.n	810c77e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 810c776:	f06f 0302 	mvn.w	r3, #2
 810c77a:	617b      	str	r3, [r7, #20]
 810c77c:	e01c      	b.n	810c7b8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 810c77e:	68bb      	ldr	r3, [r7, #8]
 810c780:	2b00      	cmp	r3, #0
 810c782:	d019      	beq.n	810c7b8 <osSemaphoreAcquire+0x94>
 810c784:	4b0f      	ldr	r3, [pc, #60]	@ (810c7c4 <osSemaphoreAcquire+0xa0>)
 810c786:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810c78a:	601a      	str	r2, [r3, #0]
 810c78c:	f3bf 8f4f 	dsb	sy
 810c790:	f3bf 8f6f 	isb	sy
 810c794:	e010      	b.n	810c7b8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 810c796:	6839      	ldr	r1, [r7, #0]
 810c798:	6938      	ldr	r0, [r7, #16]
 810c79a:	f001 fc35 	bl	810e008 <xQueueSemaphoreTake>
 810c79e:	4603      	mov	r3, r0
 810c7a0:	2b01      	cmp	r3, #1
 810c7a2:	d009      	beq.n	810c7b8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 810c7a4:	683b      	ldr	r3, [r7, #0]
 810c7a6:	2b00      	cmp	r3, #0
 810c7a8:	d003      	beq.n	810c7b2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 810c7aa:	f06f 0301 	mvn.w	r3, #1
 810c7ae:	617b      	str	r3, [r7, #20]
 810c7b0:	e002      	b.n	810c7b8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 810c7b2:	f06f 0302 	mvn.w	r3, #2
 810c7b6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 810c7b8:	697b      	ldr	r3, [r7, #20]
}
 810c7ba:	4618      	mov	r0, r3
 810c7bc:	3718      	adds	r7, #24
 810c7be:	46bd      	mov	sp, r7
 810c7c0:	bd80      	pop	{r7, pc}
 810c7c2:	bf00      	nop
 810c7c4:	e000ed04 	.word	0xe000ed04

0810c7c8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 810c7c8:	b580      	push	{r7, lr}
 810c7ca:	b086      	sub	sp, #24
 810c7cc:	af00      	add	r7, sp, #0
 810c7ce:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 810c7d0:	687b      	ldr	r3, [r7, #4]
 810c7d2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 810c7d4:	2300      	movs	r3, #0
 810c7d6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 810c7d8:	693b      	ldr	r3, [r7, #16]
 810c7da:	2b00      	cmp	r3, #0
 810c7dc:	d103      	bne.n	810c7e6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 810c7de:	f06f 0303 	mvn.w	r3, #3
 810c7e2:	617b      	str	r3, [r7, #20]
 810c7e4:	e02c      	b.n	810c840 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810c7e6:	f3ef 8305 	mrs	r3, IPSR
 810c7ea:	60fb      	str	r3, [r7, #12]
  return(result);
 810c7ec:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 810c7ee:	2b00      	cmp	r3, #0
 810c7f0:	d01a      	beq.n	810c828 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 810c7f2:	2300      	movs	r3, #0
 810c7f4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 810c7f6:	f107 0308 	add.w	r3, r7, #8
 810c7fa:	4619      	mov	r1, r3
 810c7fc:	6938      	ldr	r0, [r7, #16]
 810c7fe:	f001 fa91 	bl	810dd24 <xQueueGiveFromISR>
 810c802:	4603      	mov	r3, r0
 810c804:	2b01      	cmp	r3, #1
 810c806:	d003      	beq.n	810c810 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 810c808:	f06f 0302 	mvn.w	r3, #2
 810c80c:	617b      	str	r3, [r7, #20]
 810c80e:	e017      	b.n	810c840 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 810c810:	68bb      	ldr	r3, [r7, #8]
 810c812:	2b00      	cmp	r3, #0
 810c814:	d014      	beq.n	810c840 <osSemaphoreRelease+0x78>
 810c816:	4b0d      	ldr	r3, [pc, #52]	@ (810c84c <osSemaphoreRelease+0x84>)
 810c818:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810c81c:	601a      	str	r2, [r3, #0]
 810c81e:	f3bf 8f4f 	dsb	sy
 810c822:	f3bf 8f6f 	isb	sy
 810c826:	e00b      	b.n	810c840 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 810c828:	2300      	movs	r3, #0
 810c82a:	2200      	movs	r2, #0
 810c82c:	2100      	movs	r1, #0
 810c82e:	6938      	ldr	r0, [r7, #16]
 810c830:	f001 f8d8 	bl	810d9e4 <xQueueGenericSend>
 810c834:	4603      	mov	r3, r0
 810c836:	2b01      	cmp	r3, #1
 810c838:	d002      	beq.n	810c840 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 810c83a:	f06f 0302 	mvn.w	r3, #2
 810c83e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 810c840:	697b      	ldr	r3, [r7, #20]
}
 810c842:	4618      	mov	r0, r3
 810c844:	3718      	adds	r7, #24
 810c846:	46bd      	mov	sp, r7
 810c848:	bd80      	pop	{r7, pc}
 810c84a:	bf00      	nop
 810c84c:	e000ed04 	.word	0xe000ed04

0810c850 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 810c850:	b580      	push	{r7, lr}
 810c852:	b08a      	sub	sp, #40	@ 0x28
 810c854:	af02      	add	r7, sp, #8
 810c856:	60f8      	str	r0, [r7, #12]
 810c858:	60b9      	str	r1, [r7, #8]
 810c85a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 810c85c:	2300      	movs	r3, #0
 810c85e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810c860:	f3ef 8305 	mrs	r3, IPSR
 810c864:	613b      	str	r3, [r7, #16]
  return(result);
 810c866:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 810c868:	2b00      	cmp	r3, #0
 810c86a:	d15f      	bne.n	810c92c <osMessageQueueNew+0xdc>
 810c86c:	68fb      	ldr	r3, [r7, #12]
 810c86e:	2b00      	cmp	r3, #0
 810c870:	d05c      	beq.n	810c92c <osMessageQueueNew+0xdc>
 810c872:	68bb      	ldr	r3, [r7, #8]
 810c874:	2b00      	cmp	r3, #0
 810c876:	d059      	beq.n	810c92c <osMessageQueueNew+0xdc>
    mem = -1;
 810c878:	f04f 33ff 	mov.w	r3, #4294967295
 810c87c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 810c87e:	687b      	ldr	r3, [r7, #4]
 810c880:	2b00      	cmp	r3, #0
 810c882:	d029      	beq.n	810c8d8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 810c884:	687b      	ldr	r3, [r7, #4]
 810c886:	689b      	ldr	r3, [r3, #8]
 810c888:	2b00      	cmp	r3, #0
 810c88a:	d012      	beq.n	810c8b2 <osMessageQueueNew+0x62>
 810c88c:	687b      	ldr	r3, [r7, #4]
 810c88e:	68db      	ldr	r3, [r3, #12]
 810c890:	2b4f      	cmp	r3, #79	@ 0x4f
 810c892:	d90e      	bls.n	810c8b2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 810c894:	687b      	ldr	r3, [r7, #4]
 810c896:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 810c898:	2b00      	cmp	r3, #0
 810c89a:	d00a      	beq.n	810c8b2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 810c89c:	687b      	ldr	r3, [r7, #4]
 810c89e:	695a      	ldr	r2, [r3, #20]
 810c8a0:	68fb      	ldr	r3, [r7, #12]
 810c8a2:	68b9      	ldr	r1, [r7, #8]
 810c8a4:	fb01 f303 	mul.w	r3, r1, r3
 810c8a8:	429a      	cmp	r2, r3
 810c8aa:	d302      	bcc.n	810c8b2 <osMessageQueueNew+0x62>
        mem = 1;
 810c8ac:	2301      	movs	r3, #1
 810c8ae:	61bb      	str	r3, [r7, #24]
 810c8b0:	e014      	b.n	810c8dc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 810c8b2:	687b      	ldr	r3, [r7, #4]
 810c8b4:	689b      	ldr	r3, [r3, #8]
 810c8b6:	2b00      	cmp	r3, #0
 810c8b8:	d110      	bne.n	810c8dc <osMessageQueueNew+0x8c>
 810c8ba:	687b      	ldr	r3, [r7, #4]
 810c8bc:	68db      	ldr	r3, [r3, #12]
 810c8be:	2b00      	cmp	r3, #0
 810c8c0:	d10c      	bne.n	810c8dc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 810c8c2:	687b      	ldr	r3, [r7, #4]
 810c8c4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 810c8c6:	2b00      	cmp	r3, #0
 810c8c8:	d108      	bne.n	810c8dc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 810c8ca:	687b      	ldr	r3, [r7, #4]
 810c8cc:	695b      	ldr	r3, [r3, #20]
 810c8ce:	2b00      	cmp	r3, #0
 810c8d0:	d104      	bne.n	810c8dc <osMessageQueueNew+0x8c>
          mem = 0;
 810c8d2:	2300      	movs	r3, #0
 810c8d4:	61bb      	str	r3, [r7, #24]
 810c8d6:	e001      	b.n	810c8dc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 810c8d8:	2300      	movs	r3, #0
 810c8da:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 810c8dc:	69bb      	ldr	r3, [r7, #24]
 810c8de:	2b01      	cmp	r3, #1
 810c8e0:	d10b      	bne.n	810c8fa <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 810c8e2:	687b      	ldr	r3, [r7, #4]
 810c8e4:	691a      	ldr	r2, [r3, #16]
 810c8e6:	687b      	ldr	r3, [r7, #4]
 810c8e8:	689b      	ldr	r3, [r3, #8]
 810c8ea:	2100      	movs	r1, #0
 810c8ec:	9100      	str	r1, [sp, #0]
 810c8ee:	68b9      	ldr	r1, [r7, #8]
 810c8f0:	68f8      	ldr	r0, [r7, #12]
 810c8f2:	f000 fe75 	bl	810d5e0 <xQueueGenericCreateStatic>
 810c8f6:	61f8      	str	r0, [r7, #28]
 810c8f8:	e008      	b.n	810c90c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 810c8fa:	69bb      	ldr	r3, [r7, #24]
 810c8fc:	2b00      	cmp	r3, #0
 810c8fe:	d105      	bne.n	810c90c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 810c900:	2200      	movs	r2, #0
 810c902:	68b9      	ldr	r1, [r7, #8]
 810c904:	68f8      	ldr	r0, [r7, #12]
 810c906:	f000 fee8 	bl	810d6da <xQueueGenericCreate>
 810c90a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 810c90c:	69fb      	ldr	r3, [r7, #28]
 810c90e:	2b00      	cmp	r3, #0
 810c910:	d00c      	beq.n	810c92c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 810c912:	687b      	ldr	r3, [r7, #4]
 810c914:	2b00      	cmp	r3, #0
 810c916:	d003      	beq.n	810c920 <osMessageQueueNew+0xd0>
        name = attr->name;
 810c918:	687b      	ldr	r3, [r7, #4]
 810c91a:	681b      	ldr	r3, [r3, #0]
 810c91c:	617b      	str	r3, [r7, #20]
 810c91e:	e001      	b.n	810c924 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 810c920:	2300      	movs	r3, #0
 810c922:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 810c924:	6979      	ldr	r1, [r7, #20]
 810c926:	69f8      	ldr	r0, [r7, #28]
 810c928:	f001 fe4c 	bl	810e5c4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 810c92c:	69fb      	ldr	r3, [r7, #28]
}
 810c92e:	4618      	mov	r0, r3
 810c930:	3720      	adds	r7, #32
 810c932:	46bd      	mov	sp, r7
 810c934:	bd80      	pop	{r7, pc}
	...

0810c938 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 810c938:	b580      	push	{r7, lr}
 810c93a:	b088      	sub	sp, #32
 810c93c:	af00      	add	r7, sp, #0
 810c93e:	60f8      	str	r0, [r7, #12]
 810c940:	60b9      	str	r1, [r7, #8]
 810c942:	603b      	str	r3, [r7, #0]
 810c944:	4613      	mov	r3, r2
 810c946:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 810c948:	68fb      	ldr	r3, [r7, #12]
 810c94a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 810c94c:	2300      	movs	r3, #0
 810c94e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810c950:	f3ef 8305 	mrs	r3, IPSR
 810c954:	617b      	str	r3, [r7, #20]
  return(result);
 810c956:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 810c958:	2b00      	cmp	r3, #0
 810c95a:	d028      	beq.n	810c9ae <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 810c95c:	69bb      	ldr	r3, [r7, #24]
 810c95e:	2b00      	cmp	r3, #0
 810c960:	d005      	beq.n	810c96e <osMessageQueuePut+0x36>
 810c962:	68bb      	ldr	r3, [r7, #8]
 810c964:	2b00      	cmp	r3, #0
 810c966:	d002      	beq.n	810c96e <osMessageQueuePut+0x36>
 810c968:	683b      	ldr	r3, [r7, #0]
 810c96a:	2b00      	cmp	r3, #0
 810c96c:	d003      	beq.n	810c976 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 810c96e:	f06f 0303 	mvn.w	r3, #3
 810c972:	61fb      	str	r3, [r7, #28]
 810c974:	e038      	b.n	810c9e8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 810c976:	2300      	movs	r3, #0
 810c978:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 810c97a:	f107 0210 	add.w	r2, r7, #16
 810c97e:	2300      	movs	r3, #0
 810c980:	68b9      	ldr	r1, [r7, #8]
 810c982:	69b8      	ldr	r0, [r7, #24]
 810c984:	f001 f930 	bl	810dbe8 <xQueueGenericSendFromISR>
 810c988:	4603      	mov	r3, r0
 810c98a:	2b01      	cmp	r3, #1
 810c98c:	d003      	beq.n	810c996 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 810c98e:	f06f 0302 	mvn.w	r3, #2
 810c992:	61fb      	str	r3, [r7, #28]
 810c994:	e028      	b.n	810c9e8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 810c996:	693b      	ldr	r3, [r7, #16]
 810c998:	2b00      	cmp	r3, #0
 810c99a:	d025      	beq.n	810c9e8 <osMessageQueuePut+0xb0>
 810c99c:	4b15      	ldr	r3, [pc, #84]	@ (810c9f4 <osMessageQueuePut+0xbc>)
 810c99e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810c9a2:	601a      	str	r2, [r3, #0]
 810c9a4:	f3bf 8f4f 	dsb	sy
 810c9a8:	f3bf 8f6f 	isb	sy
 810c9ac:	e01c      	b.n	810c9e8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 810c9ae:	69bb      	ldr	r3, [r7, #24]
 810c9b0:	2b00      	cmp	r3, #0
 810c9b2:	d002      	beq.n	810c9ba <osMessageQueuePut+0x82>
 810c9b4:	68bb      	ldr	r3, [r7, #8]
 810c9b6:	2b00      	cmp	r3, #0
 810c9b8:	d103      	bne.n	810c9c2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 810c9ba:	f06f 0303 	mvn.w	r3, #3
 810c9be:	61fb      	str	r3, [r7, #28]
 810c9c0:	e012      	b.n	810c9e8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 810c9c2:	2300      	movs	r3, #0
 810c9c4:	683a      	ldr	r2, [r7, #0]
 810c9c6:	68b9      	ldr	r1, [r7, #8]
 810c9c8:	69b8      	ldr	r0, [r7, #24]
 810c9ca:	f001 f80b 	bl	810d9e4 <xQueueGenericSend>
 810c9ce:	4603      	mov	r3, r0
 810c9d0:	2b01      	cmp	r3, #1
 810c9d2:	d009      	beq.n	810c9e8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 810c9d4:	683b      	ldr	r3, [r7, #0]
 810c9d6:	2b00      	cmp	r3, #0
 810c9d8:	d003      	beq.n	810c9e2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 810c9da:	f06f 0301 	mvn.w	r3, #1
 810c9de:	61fb      	str	r3, [r7, #28]
 810c9e0:	e002      	b.n	810c9e8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 810c9e2:	f06f 0302 	mvn.w	r3, #2
 810c9e6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 810c9e8:	69fb      	ldr	r3, [r7, #28]
}
 810c9ea:	4618      	mov	r0, r3
 810c9ec:	3720      	adds	r7, #32
 810c9ee:	46bd      	mov	sp, r7
 810c9f0:	bd80      	pop	{r7, pc}
 810c9f2:	bf00      	nop
 810c9f4:	e000ed04 	.word	0xe000ed04

0810c9f8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 810c9f8:	b580      	push	{r7, lr}
 810c9fa:	b088      	sub	sp, #32
 810c9fc:	af00      	add	r7, sp, #0
 810c9fe:	60f8      	str	r0, [r7, #12]
 810ca00:	60b9      	str	r1, [r7, #8]
 810ca02:	607a      	str	r2, [r7, #4]
 810ca04:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 810ca06:	68fb      	ldr	r3, [r7, #12]
 810ca08:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 810ca0a:	2300      	movs	r3, #0
 810ca0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810ca0e:	f3ef 8305 	mrs	r3, IPSR
 810ca12:	617b      	str	r3, [r7, #20]
  return(result);
 810ca14:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 810ca16:	2b00      	cmp	r3, #0
 810ca18:	d028      	beq.n	810ca6c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 810ca1a:	69bb      	ldr	r3, [r7, #24]
 810ca1c:	2b00      	cmp	r3, #0
 810ca1e:	d005      	beq.n	810ca2c <osMessageQueueGet+0x34>
 810ca20:	68bb      	ldr	r3, [r7, #8]
 810ca22:	2b00      	cmp	r3, #0
 810ca24:	d002      	beq.n	810ca2c <osMessageQueueGet+0x34>
 810ca26:	683b      	ldr	r3, [r7, #0]
 810ca28:	2b00      	cmp	r3, #0
 810ca2a:	d003      	beq.n	810ca34 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 810ca2c:	f06f 0303 	mvn.w	r3, #3
 810ca30:	61fb      	str	r3, [r7, #28]
 810ca32:	e037      	b.n	810caa4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 810ca34:	2300      	movs	r3, #0
 810ca36:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 810ca38:	f107 0310 	add.w	r3, r7, #16
 810ca3c:	461a      	mov	r2, r3
 810ca3e:	68b9      	ldr	r1, [r7, #8]
 810ca40:	69b8      	ldr	r0, [r7, #24]
 810ca42:	f001 fbf1 	bl	810e228 <xQueueReceiveFromISR>
 810ca46:	4603      	mov	r3, r0
 810ca48:	2b01      	cmp	r3, #1
 810ca4a:	d003      	beq.n	810ca54 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 810ca4c:	f06f 0302 	mvn.w	r3, #2
 810ca50:	61fb      	str	r3, [r7, #28]
 810ca52:	e027      	b.n	810caa4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 810ca54:	693b      	ldr	r3, [r7, #16]
 810ca56:	2b00      	cmp	r3, #0
 810ca58:	d024      	beq.n	810caa4 <osMessageQueueGet+0xac>
 810ca5a:	4b15      	ldr	r3, [pc, #84]	@ (810cab0 <osMessageQueueGet+0xb8>)
 810ca5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810ca60:	601a      	str	r2, [r3, #0]
 810ca62:	f3bf 8f4f 	dsb	sy
 810ca66:	f3bf 8f6f 	isb	sy
 810ca6a:	e01b      	b.n	810caa4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 810ca6c:	69bb      	ldr	r3, [r7, #24]
 810ca6e:	2b00      	cmp	r3, #0
 810ca70:	d002      	beq.n	810ca78 <osMessageQueueGet+0x80>
 810ca72:	68bb      	ldr	r3, [r7, #8]
 810ca74:	2b00      	cmp	r3, #0
 810ca76:	d103      	bne.n	810ca80 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 810ca78:	f06f 0303 	mvn.w	r3, #3
 810ca7c:	61fb      	str	r3, [r7, #28]
 810ca7e:	e011      	b.n	810caa4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 810ca80:	683a      	ldr	r2, [r7, #0]
 810ca82:	68b9      	ldr	r1, [r7, #8]
 810ca84:	69b8      	ldr	r0, [r7, #24]
 810ca86:	f001 f9dd 	bl	810de44 <xQueueReceive>
 810ca8a:	4603      	mov	r3, r0
 810ca8c:	2b01      	cmp	r3, #1
 810ca8e:	d009      	beq.n	810caa4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 810ca90:	683b      	ldr	r3, [r7, #0]
 810ca92:	2b00      	cmp	r3, #0
 810ca94:	d003      	beq.n	810ca9e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 810ca96:	f06f 0301 	mvn.w	r3, #1
 810ca9a:	61fb      	str	r3, [r7, #28]
 810ca9c:	e002      	b.n	810caa4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 810ca9e:	f06f 0302 	mvn.w	r3, #2
 810caa2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 810caa4:	69fb      	ldr	r3, [r7, #28]
}
 810caa6:	4618      	mov	r0, r3
 810caa8:	3720      	adds	r7, #32
 810caaa:	46bd      	mov	sp, r7
 810caac:	bd80      	pop	{r7, pc}
 810caae:	bf00      	nop
 810cab0:	e000ed04 	.word	0xe000ed04

0810cab4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 810cab4:	b480      	push	{r7}
 810cab6:	b085      	sub	sp, #20
 810cab8:	af00      	add	r7, sp, #0
 810caba:	60f8      	str	r0, [r7, #12]
 810cabc:	60b9      	str	r1, [r7, #8]
 810cabe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 810cac0:	68fb      	ldr	r3, [r7, #12]
 810cac2:	4a07      	ldr	r2, [pc, #28]	@ (810cae0 <vApplicationGetIdleTaskMemory+0x2c>)
 810cac4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 810cac6:	68bb      	ldr	r3, [r7, #8]
 810cac8:	4a06      	ldr	r2, [pc, #24]	@ (810cae4 <vApplicationGetIdleTaskMemory+0x30>)
 810caca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 810cacc:	687b      	ldr	r3, [r7, #4]
 810cace:	2280      	movs	r2, #128	@ 0x80
 810cad0:	601a      	str	r2, [r3, #0]
}
 810cad2:	bf00      	nop
 810cad4:	3714      	adds	r7, #20
 810cad6:	46bd      	mov	sp, r7
 810cad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cadc:	4770      	bx	lr
 810cade:	bf00      	nop
 810cae0:	1000036c 	.word	0x1000036c
 810cae4:	10000414 	.word	0x10000414

0810cae8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 810cae8:	b480      	push	{r7}
 810caea:	b085      	sub	sp, #20
 810caec:	af00      	add	r7, sp, #0
 810caee:	60f8      	str	r0, [r7, #12]
 810caf0:	60b9      	str	r1, [r7, #8]
 810caf2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 810caf4:	68fb      	ldr	r3, [r7, #12]
 810caf6:	4a07      	ldr	r2, [pc, #28]	@ (810cb14 <vApplicationGetTimerTaskMemory+0x2c>)
 810caf8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 810cafa:	68bb      	ldr	r3, [r7, #8]
 810cafc:	4a06      	ldr	r2, [pc, #24]	@ (810cb18 <vApplicationGetTimerTaskMemory+0x30>)
 810cafe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 810cb00:	687b      	ldr	r3, [r7, #4]
 810cb02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810cb06:	601a      	str	r2, [r3, #0]
}
 810cb08:	bf00      	nop
 810cb0a:	3714      	adds	r7, #20
 810cb0c:	46bd      	mov	sp, r7
 810cb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cb12:	4770      	bx	lr
 810cb14:	10000614 	.word	0x10000614
 810cb18:	100006bc 	.word	0x100006bc

0810cb1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 810cb1c:	b580      	push	{r7, lr}
 810cb1e:	b08a      	sub	sp, #40	@ 0x28
 810cb20:	af00      	add	r7, sp, #0
 810cb22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 810cb24:	2300      	movs	r3, #0
 810cb26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 810cb28:	f002 fc62 	bl	810f3f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 810cb2c:	4b5c      	ldr	r3, [pc, #368]	@ (810cca0 <pvPortMalloc+0x184>)
 810cb2e:	681b      	ldr	r3, [r3, #0]
 810cb30:	2b00      	cmp	r3, #0
 810cb32:	d101      	bne.n	810cb38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 810cb34:	f000 f924 	bl	810cd80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 810cb38:	4b5a      	ldr	r3, [pc, #360]	@ (810cca4 <pvPortMalloc+0x188>)
 810cb3a:	681a      	ldr	r2, [r3, #0]
 810cb3c:	687b      	ldr	r3, [r7, #4]
 810cb3e:	4013      	ands	r3, r2
 810cb40:	2b00      	cmp	r3, #0
 810cb42:	f040 8095 	bne.w	810cc70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 810cb46:	687b      	ldr	r3, [r7, #4]
 810cb48:	2b00      	cmp	r3, #0
 810cb4a:	d01e      	beq.n	810cb8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 810cb4c:	2208      	movs	r2, #8
 810cb4e:	687b      	ldr	r3, [r7, #4]
 810cb50:	4413      	add	r3, r2
 810cb52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 810cb54:	687b      	ldr	r3, [r7, #4]
 810cb56:	f003 0307 	and.w	r3, r3, #7
 810cb5a:	2b00      	cmp	r3, #0
 810cb5c:	d015      	beq.n	810cb8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 810cb5e:	687b      	ldr	r3, [r7, #4]
 810cb60:	f023 0307 	bic.w	r3, r3, #7
 810cb64:	3308      	adds	r3, #8
 810cb66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 810cb68:	687b      	ldr	r3, [r7, #4]
 810cb6a:	f003 0307 	and.w	r3, r3, #7
 810cb6e:	2b00      	cmp	r3, #0
 810cb70:	d00b      	beq.n	810cb8a <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 810cb72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cb76:	f383 8811 	msr	BASEPRI, r3
 810cb7a:	f3bf 8f6f 	isb	sy
 810cb7e:	f3bf 8f4f 	dsb	sy
 810cb82:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 810cb84:	bf00      	nop
 810cb86:	bf00      	nop
 810cb88:	e7fd      	b.n	810cb86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 810cb8a:	687b      	ldr	r3, [r7, #4]
 810cb8c:	2b00      	cmp	r3, #0
 810cb8e:	d06f      	beq.n	810cc70 <pvPortMalloc+0x154>
 810cb90:	4b45      	ldr	r3, [pc, #276]	@ (810cca8 <pvPortMalloc+0x18c>)
 810cb92:	681b      	ldr	r3, [r3, #0]
 810cb94:	687a      	ldr	r2, [r7, #4]
 810cb96:	429a      	cmp	r2, r3
 810cb98:	d86a      	bhi.n	810cc70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 810cb9a:	4b44      	ldr	r3, [pc, #272]	@ (810ccac <pvPortMalloc+0x190>)
 810cb9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 810cb9e:	4b43      	ldr	r3, [pc, #268]	@ (810ccac <pvPortMalloc+0x190>)
 810cba0:	681b      	ldr	r3, [r3, #0]
 810cba2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810cba4:	e004      	b.n	810cbb0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 810cba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810cba8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 810cbaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810cbac:	681b      	ldr	r3, [r3, #0]
 810cbae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810cbb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810cbb2:	685b      	ldr	r3, [r3, #4]
 810cbb4:	687a      	ldr	r2, [r7, #4]
 810cbb6:	429a      	cmp	r2, r3
 810cbb8:	d903      	bls.n	810cbc2 <pvPortMalloc+0xa6>
 810cbba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810cbbc:	681b      	ldr	r3, [r3, #0]
 810cbbe:	2b00      	cmp	r3, #0
 810cbc0:	d1f1      	bne.n	810cba6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 810cbc2:	4b37      	ldr	r3, [pc, #220]	@ (810cca0 <pvPortMalloc+0x184>)
 810cbc4:	681b      	ldr	r3, [r3, #0]
 810cbc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810cbc8:	429a      	cmp	r2, r3
 810cbca:	d051      	beq.n	810cc70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 810cbcc:	6a3b      	ldr	r3, [r7, #32]
 810cbce:	681b      	ldr	r3, [r3, #0]
 810cbd0:	2208      	movs	r2, #8
 810cbd2:	4413      	add	r3, r2
 810cbd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 810cbd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810cbd8:	681a      	ldr	r2, [r3, #0]
 810cbda:	6a3b      	ldr	r3, [r7, #32]
 810cbdc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 810cbde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810cbe0:	685a      	ldr	r2, [r3, #4]
 810cbe2:	687b      	ldr	r3, [r7, #4]
 810cbe4:	1ad2      	subs	r2, r2, r3
 810cbe6:	2308      	movs	r3, #8
 810cbe8:	005b      	lsls	r3, r3, #1
 810cbea:	429a      	cmp	r2, r3
 810cbec:	d920      	bls.n	810cc30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 810cbee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810cbf0:	687b      	ldr	r3, [r7, #4]
 810cbf2:	4413      	add	r3, r2
 810cbf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 810cbf6:	69bb      	ldr	r3, [r7, #24]
 810cbf8:	f003 0307 	and.w	r3, r3, #7
 810cbfc:	2b00      	cmp	r3, #0
 810cbfe:	d00b      	beq.n	810cc18 <pvPortMalloc+0xfc>
	__asm volatile
 810cc00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cc04:	f383 8811 	msr	BASEPRI, r3
 810cc08:	f3bf 8f6f 	isb	sy
 810cc0c:	f3bf 8f4f 	dsb	sy
 810cc10:	613b      	str	r3, [r7, #16]
}
 810cc12:	bf00      	nop
 810cc14:	bf00      	nop
 810cc16:	e7fd      	b.n	810cc14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 810cc18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810cc1a:	685a      	ldr	r2, [r3, #4]
 810cc1c:	687b      	ldr	r3, [r7, #4]
 810cc1e:	1ad2      	subs	r2, r2, r3
 810cc20:	69bb      	ldr	r3, [r7, #24]
 810cc22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 810cc24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810cc26:	687a      	ldr	r2, [r7, #4]
 810cc28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 810cc2a:	69b8      	ldr	r0, [r7, #24]
 810cc2c:	f000 f90a 	bl	810ce44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 810cc30:	4b1d      	ldr	r3, [pc, #116]	@ (810cca8 <pvPortMalloc+0x18c>)
 810cc32:	681a      	ldr	r2, [r3, #0]
 810cc34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810cc36:	685b      	ldr	r3, [r3, #4]
 810cc38:	1ad3      	subs	r3, r2, r3
 810cc3a:	4a1b      	ldr	r2, [pc, #108]	@ (810cca8 <pvPortMalloc+0x18c>)
 810cc3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 810cc3e:	4b1a      	ldr	r3, [pc, #104]	@ (810cca8 <pvPortMalloc+0x18c>)
 810cc40:	681a      	ldr	r2, [r3, #0]
 810cc42:	4b1b      	ldr	r3, [pc, #108]	@ (810ccb0 <pvPortMalloc+0x194>)
 810cc44:	681b      	ldr	r3, [r3, #0]
 810cc46:	429a      	cmp	r2, r3
 810cc48:	d203      	bcs.n	810cc52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 810cc4a:	4b17      	ldr	r3, [pc, #92]	@ (810cca8 <pvPortMalloc+0x18c>)
 810cc4c:	681b      	ldr	r3, [r3, #0]
 810cc4e:	4a18      	ldr	r2, [pc, #96]	@ (810ccb0 <pvPortMalloc+0x194>)
 810cc50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 810cc52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810cc54:	685a      	ldr	r2, [r3, #4]
 810cc56:	4b13      	ldr	r3, [pc, #76]	@ (810cca4 <pvPortMalloc+0x188>)
 810cc58:	681b      	ldr	r3, [r3, #0]
 810cc5a:	431a      	orrs	r2, r3
 810cc5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810cc5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 810cc60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810cc62:	2200      	movs	r2, #0
 810cc64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 810cc66:	4b13      	ldr	r3, [pc, #76]	@ (810ccb4 <pvPortMalloc+0x198>)
 810cc68:	681b      	ldr	r3, [r3, #0]
 810cc6a:	3301      	adds	r3, #1
 810cc6c:	4a11      	ldr	r2, [pc, #68]	@ (810ccb4 <pvPortMalloc+0x198>)
 810cc6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 810cc70:	f002 fbcc 	bl	810f40c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 810cc74:	69fb      	ldr	r3, [r7, #28]
 810cc76:	f003 0307 	and.w	r3, r3, #7
 810cc7a:	2b00      	cmp	r3, #0
 810cc7c:	d00b      	beq.n	810cc96 <pvPortMalloc+0x17a>
	__asm volatile
 810cc7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cc82:	f383 8811 	msr	BASEPRI, r3
 810cc86:	f3bf 8f6f 	isb	sy
 810cc8a:	f3bf 8f4f 	dsb	sy
 810cc8e:	60fb      	str	r3, [r7, #12]
}
 810cc90:	bf00      	nop
 810cc92:	bf00      	nop
 810cc94:	e7fd      	b.n	810cc92 <pvPortMalloc+0x176>
	return pvReturn;
 810cc96:	69fb      	ldr	r3, [r7, #28]
}
 810cc98:	4618      	mov	r0, r3
 810cc9a:	3728      	adds	r7, #40	@ 0x28
 810cc9c:	46bd      	mov	sp, r7
 810cc9e:	bd80      	pop	{r7, pc}
 810cca0:	1000aac4 	.word	0x1000aac4
 810cca4:	1000aad8 	.word	0x1000aad8
 810cca8:	1000aac8 	.word	0x1000aac8
 810ccac:	1000aabc 	.word	0x1000aabc
 810ccb0:	1000aacc 	.word	0x1000aacc
 810ccb4:	1000aad0 	.word	0x1000aad0

0810ccb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 810ccb8:	b580      	push	{r7, lr}
 810ccba:	b086      	sub	sp, #24
 810ccbc:	af00      	add	r7, sp, #0
 810ccbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 810ccc0:	687b      	ldr	r3, [r7, #4]
 810ccc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 810ccc4:	687b      	ldr	r3, [r7, #4]
 810ccc6:	2b00      	cmp	r3, #0
 810ccc8:	d04f      	beq.n	810cd6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 810ccca:	2308      	movs	r3, #8
 810cccc:	425b      	negs	r3, r3
 810ccce:	697a      	ldr	r2, [r7, #20]
 810ccd0:	4413      	add	r3, r2
 810ccd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 810ccd4:	697b      	ldr	r3, [r7, #20]
 810ccd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 810ccd8:	693b      	ldr	r3, [r7, #16]
 810ccda:	685a      	ldr	r2, [r3, #4]
 810ccdc:	4b25      	ldr	r3, [pc, #148]	@ (810cd74 <vPortFree+0xbc>)
 810ccde:	681b      	ldr	r3, [r3, #0]
 810cce0:	4013      	ands	r3, r2
 810cce2:	2b00      	cmp	r3, #0
 810cce4:	d10b      	bne.n	810ccfe <vPortFree+0x46>
	__asm volatile
 810cce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ccea:	f383 8811 	msr	BASEPRI, r3
 810ccee:	f3bf 8f6f 	isb	sy
 810ccf2:	f3bf 8f4f 	dsb	sy
 810ccf6:	60fb      	str	r3, [r7, #12]
}
 810ccf8:	bf00      	nop
 810ccfa:	bf00      	nop
 810ccfc:	e7fd      	b.n	810ccfa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 810ccfe:	693b      	ldr	r3, [r7, #16]
 810cd00:	681b      	ldr	r3, [r3, #0]
 810cd02:	2b00      	cmp	r3, #0
 810cd04:	d00b      	beq.n	810cd1e <vPortFree+0x66>
	__asm volatile
 810cd06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cd0a:	f383 8811 	msr	BASEPRI, r3
 810cd0e:	f3bf 8f6f 	isb	sy
 810cd12:	f3bf 8f4f 	dsb	sy
 810cd16:	60bb      	str	r3, [r7, #8]
}
 810cd18:	bf00      	nop
 810cd1a:	bf00      	nop
 810cd1c:	e7fd      	b.n	810cd1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 810cd1e:	693b      	ldr	r3, [r7, #16]
 810cd20:	685a      	ldr	r2, [r3, #4]
 810cd22:	4b14      	ldr	r3, [pc, #80]	@ (810cd74 <vPortFree+0xbc>)
 810cd24:	681b      	ldr	r3, [r3, #0]
 810cd26:	4013      	ands	r3, r2
 810cd28:	2b00      	cmp	r3, #0
 810cd2a:	d01e      	beq.n	810cd6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 810cd2c:	693b      	ldr	r3, [r7, #16]
 810cd2e:	681b      	ldr	r3, [r3, #0]
 810cd30:	2b00      	cmp	r3, #0
 810cd32:	d11a      	bne.n	810cd6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 810cd34:	693b      	ldr	r3, [r7, #16]
 810cd36:	685a      	ldr	r2, [r3, #4]
 810cd38:	4b0e      	ldr	r3, [pc, #56]	@ (810cd74 <vPortFree+0xbc>)
 810cd3a:	681b      	ldr	r3, [r3, #0]
 810cd3c:	43db      	mvns	r3, r3
 810cd3e:	401a      	ands	r2, r3
 810cd40:	693b      	ldr	r3, [r7, #16]
 810cd42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 810cd44:	f002 fb54 	bl	810f3f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 810cd48:	693b      	ldr	r3, [r7, #16]
 810cd4a:	685a      	ldr	r2, [r3, #4]
 810cd4c:	4b0a      	ldr	r3, [pc, #40]	@ (810cd78 <vPortFree+0xc0>)
 810cd4e:	681b      	ldr	r3, [r3, #0]
 810cd50:	4413      	add	r3, r2
 810cd52:	4a09      	ldr	r2, [pc, #36]	@ (810cd78 <vPortFree+0xc0>)
 810cd54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 810cd56:	6938      	ldr	r0, [r7, #16]
 810cd58:	f000 f874 	bl	810ce44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 810cd5c:	4b07      	ldr	r3, [pc, #28]	@ (810cd7c <vPortFree+0xc4>)
 810cd5e:	681b      	ldr	r3, [r3, #0]
 810cd60:	3301      	adds	r3, #1
 810cd62:	4a06      	ldr	r2, [pc, #24]	@ (810cd7c <vPortFree+0xc4>)
 810cd64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 810cd66:	f002 fb51 	bl	810f40c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 810cd6a:	bf00      	nop
 810cd6c:	3718      	adds	r7, #24
 810cd6e:	46bd      	mov	sp, r7
 810cd70:	bd80      	pop	{r7, pc}
 810cd72:	bf00      	nop
 810cd74:	1000aad8 	.word	0x1000aad8
 810cd78:	1000aac8 	.word	0x1000aac8
 810cd7c:	1000aad4 	.word	0x1000aad4

0810cd80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 810cd80:	b480      	push	{r7}
 810cd82:	b085      	sub	sp, #20
 810cd84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 810cd86:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 810cd8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 810cd8c:	4b27      	ldr	r3, [pc, #156]	@ (810ce2c <prvHeapInit+0xac>)
 810cd8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 810cd90:	68fb      	ldr	r3, [r7, #12]
 810cd92:	f003 0307 	and.w	r3, r3, #7
 810cd96:	2b00      	cmp	r3, #0
 810cd98:	d00c      	beq.n	810cdb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 810cd9a:	68fb      	ldr	r3, [r7, #12]
 810cd9c:	3307      	adds	r3, #7
 810cd9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 810cda0:	68fb      	ldr	r3, [r7, #12]
 810cda2:	f023 0307 	bic.w	r3, r3, #7
 810cda6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 810cda8:	68ba      	ldr	r2, [r7, #8]
 810cdaa:	68fb      	ldr	r3, [r7, #12]
 810cdac:	1ad3      	subs	r3, r2, r3
 810cdae:	4a1f      	ldr	r2, [pc, #124]	@ (810ce2c <prvHeapInit+0xac>)
 810cdb0:	4413      	add	r3, r2
 810cdb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 810cdb4:	68fb      	ldr	r3, [r7, #12]
 810cdb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 810cdb8:	4a1d      	ldr	r2, [pc, #116]	@ (810ce30 <prvHeapInit+0xb0>)
 810cdba:	687b      	ldr	r3, [r7, #4]
 810cdbc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 810cdbe:	4b1c      	ldr	r3, [pc, #112]	@ (810ce30 <prvHeapInit+0xb0>)
 810cdc0:	2200      	movs	r2, #0
 810cdc2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 810cdc4:	687b      	ldr	r3, [r7, #4]
 810cdc6:	68ba      	ldr	r2, [r7, #8]
 810cdc8:	4413      	add	r3, r2
 810cdca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 810cdcc:	2208      	movs	r2, #8
 810cdce:	68fb      	ldr	r3, [r7, #12]
 810cdd0:	1a9b      	subs	r3, r3, r2
 810cdd2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 810cdd4:	68fb      	ldr	r3, [r7, #12]
 810cdd6:	f023 0307 	bic.w	r3, r3, #7
 810cdda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 810cddc:	68fb      	ldr	r3, [r7, #12]
 810cdde:	4a15      	ldr	r2, [pc, #84]	@ (810ce34 <prvHeapInit+0xb4>)
 810cde0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 810cde2:	4b14      	ldr	r3, [pc, #80]	@ (810ce34 <prvHeapInit+0xb4>)
 810cde4:	681b      	ldr	r3, [r3, #0]
 810cde6:	2200      	movs	r2, #0
 810cde8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 810cdea:	4b12      	ldr	r3, [pc, #72]	@ (810ce34 <prvHeapInit+0xb4>)
 810cdec:	681b      	ldr	r3, [r3, #0]
 810cdee:	2200      	movs	r2, #0
 810cdf0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 810cdf2:	687b      	ldr	r3, [r7, #4]
 810cdf4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 810cdf6:	683b      	ldr	r3, [r7, #0]
 810cdf8:	68fa      	ldr	r2, [r7, #12]
 810cdfa:	1ad2      	subs	r2, r2, r3
 810cdfc:	683b      	ldr	r3, [r7, #0]
 810cdfe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 810ce00:	4b0c      	ldr	r3, [pc, #48]	@ (810ce34 <prvHeapInit+0xb4>)
 810ce02:	681a      	ldr	r2, [r3, #0]
 810ce04:	683b      	ldr	r3, [r7, #0]
 810ce06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810ce08:	683b      	ldr	r3, [r7, #0]
 810ce0a:	685b      	ldr	r3, [r3, #4]
 810ce0c:	4a0a      	ldr	r2, [pc, #40]	@ (810ce38 <prvHeapInit+0xb8>)
 810ce0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810ce10:	683b      	ldr	r3, [r7, #0]
 810ce12:	685b      	ldr	r3, [r3, #4]
 810ce14:	4a09      	ldr	r2, [pc, #36]	@ (810ce3c <prvHeapInit+0xbc>)
 810ce16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 810ce18:	4b09      	ldr	r3, [pc, #36]	@ (810ce40 <prvHeapInit+0xc0>)
 810ce1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 810ce1e:	601a      	str	r2, [r3, #0]
}
 810ce20:	bf00      	nop
 810ce22:	3714      	adds	r7, #20
 810ce24:	46bd      	mov	sp, r7
 810ce26:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ce2a:	4770      	bx	lr
 810ce2c:	10000abc 	.word	0x10000abc
 810ce30:	1000aabc 	.word	0x1000aabc
 810ce34:	1000aac4 	.word	0x1000aac4
 810ce38:	1000aacc 	.word	0x1000aacc
 810ce3c:	1000aac8 	.word	0x1000aac8
 810ce40:	1000aad8 	.word	0x1000aad8

0810ce44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 810ce44:	b480      	push	{r7}
 810ce46:	b085      	sub	sp, #20
 810ce48:	af00      	add	r7, sp, #0
 810ce4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 810ce4c:	4b28      	ldr	r3, [pc, #160]	@ (810cef0 <prvInsertBlockIntoFreeList+0xac>)
 810ce4e:	60fb      	str	r3, [r7, #12]
 810ce50:	e002      	b.n	810ce58 <prvInsertBlockIntoFreeList+0x14>
 810ce52:	68fb      	ldr	r3, [r7, #12]
 810ce54:	681b      	ldr	r3, [r3, #0]
 810ce56:	60fb      	str	r3, [r7, #12]
 810ce58:	68fb      	ldr	r3, [r7, #12]
 810ce5a:	681b      	ldr	r3, [r3, #0]
 810ce5c:	687a      	ldr	r2, [r7, #4]
 810ce5e:	429a      	cmp	r2, r3
 810ce60:	d8f7      	bhi.n	810ce52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 810ce62:	68fb      	ldr	r3, [r7, #12]
 810ce64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 810ce66:	68fb      	ldr	r3, [r7, #12]
 810ce68:	685b      	ldr	r3, [r3, #4]
 810ce6a:	68ba      	ldr	r2, [r7, #8]
 810ce6c:	4413      	add	r3, r2
 810ce6e:	687a      	ldr	r2, [r7, #4]
 810ce70:	429a      	cmp	r2, r3
 810ce72:	d108      	bne.n	810ce86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 810ce74:	68fb      	ldr	r3, [r7, #12]
 810ce76:	685a      	ldr	r2, [r3, #4]
 810ce78:	687b      	ldr	r3, [r7, #4]
 810ce7a:	685b      	ldr	r3, [r3, #4]
 810ce7c:	441a      	add	r2, r3
 810ce7e:	68fb      	ldr	r3, [r7, #12]
 810ce80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 810ce82:	68fb      	ldr	r3, [r7, #12]
 810ce84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 810ce86:	687b      	ldr	r3, [r7, #4]
 810ce88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 810ce8a:	687b      	ldr	r3, [r7, #4]
 810ce8c:	685b      	ldr	r3, [r3, #4]
 810ce8e:	68ba      	ldr	r2, [r7, #8]
 810ce90:	441a      	add	r2, r3
 810ce92:	68fb      	ldr	r3, [r7, #12]
 810ce94:	681b      	ldr	r3, [r3, #0]
 810ce96:	429a      	cmp	r2, r3
 810ce98:	d118      	bne.n	810cecc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 810ce9a:	68fb      	ldr	r3, [r7, #12]
 810ce9c:	681a      	ldr	r2, [r3, #0]
 810ce9e:	4b15      	ldr	r3, [pc, #84]	@ (810cef4 <prvInsertBlockIntoFreeList+0xb0>)
 810cea0:	681b      	ldr	r3, [r3, #0]
 810cea2:	429a      	cmp	r2, r3
 810cea4:	d00d      	beq.n	810cec2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 810cea6:	687b      	ldr	r3, [r7, #4]
 810cea8:	685a      	ldr	r2, [r3, #4]
 810ceaa:	68fb      	ldr	r3, [r7, #12]
 810ceac:	681b      	ldr	r3, [r3, #0]
 810ceae:	685b      	ldr	r3, [r3, #4]
 810ceb0:	441a      	add	r2, r3
 810ceb2:	687b      	ldr	r3, [r7, #4]
 810ceb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 810ceb6:	68fb      	ldr	r3, [r7, #12]
 810ceb8:	681b      	ldr	r3, [r3, #0]
 810ceba:	681a      	ldr	r2, [r3, #0]
 810cebc:	687b      	ldr	r3, [r7, #4]
 810cebe:	601a      	str	r2, [r3, #0]
 810cec0:	e008      	b.n	810ced4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 810cec2:	4b0c      	ldr	r3, [pc, #48]	@ (810cef4 <prvInsertBlockIntoFreeList+0xb0>)
 810cec4:	681a      	ldr	r2, [r3, #0]
 810cec6:	687b      	ldr	r3, [r7, #4]
 810cec8:	601a      	str	r2, [r3, #0]
 810ceca:	e003      	b.n	810ced4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 810cecc:	68fb      	ldr	r3, [r7, #12]
 810cece:	681a      	ldr	r2, [r3, #0]
 810ced0:	687b      	ldr	r3, [r7, #4]
 810ced2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 810ced4:	68fa      	ldr	r2, [r7, #12]
 810ced6:	687b      	ldr	r3, [r7, #4]
 810ced8:	429a      	cmp	r2, r3
 810ceda:	d002      	beq.n	810cee2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 810cedc:	68fb      	ldr	r3, [r7, #12]
 810cede:	687a      	ldr	r2, [r7, #4]
 810cee0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810cee2:	bf00      	nop
 810cee4:	3714      	adds	r7, #20
 810cee6:	46bd      	mov	sp, r7
 810cee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ceec:	4770      	bx	lr
 810ceee:	bf00      	nop
 810cef0:	1000aabc 	.word	0x1000aabc
 810cef4:	1000aac4 	.word	0x1000aac4

0810cef8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 810cef8:	b480      	push	{r7}
 810cefa:	b083      	sub	sp, #12
 810cefc:	af00      	add	r7, sp, #0
 810cefe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810cf00:	687b      	ldr	r3, [r7, #4]
 810cf02:	f103 0208 	add.w	r2, r3, #8
 810cf06:	687b      	ldr	r3, [r7, #4]
 810cf08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 810cf0a:	687b      	ldr	r3, [r7, #4]
 810cf0c:	f04f 32ff 	mov.w	r2, #4294967295
 810cf10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810cf12:	687b      	ldr	r3, [r7, #4]
 810cf14:	f103 0208 	add.w	r2, r3, #8
 810cf18:	687b      	ldr	r3, [r7, #4]
 810cf1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810cf1c:	687b      	ldr	r3, [r7, #4]
 810cf1e:	f103 0208 	add.w	r2, r3, #8
 810cf22:	687b      	ldr	r3, [r7, #4]
 810cf24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 810cf26:	687b      	ldr	r3, [r7, #4]
 810cf28:	2200      	movs	r2, #0
 810cf2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 810cf2c:	bf00      	nop
 810cf2e:	370c      	adds	r7, #12
 810cf30:	46bd      	mov	sp, r7
 810cf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cf36:	4770      	bx	lr

0810cf38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 810cf38:	b480      	push	{r7}
 810cf3a:	b083      	sub	sp, #12
 810cf3c:	af00      	add	r7, sp, #0
 810cf3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 810cf40:	687b      	ldr	r3, [r7, #4]
 810cf42:	2200      	movs	r2, #0
 810cf44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 810cf46:	bf00      	nop
 810cf48:	370c      	adds	r7, #12
 810cf4a:	46bd      	mov	sp, r7
 810cf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cf50:	4770      	bx	lr

0810cf52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810cf52:	b480      	push	{r7}
 810cf54:	b085      	sub	sp, #20
 810cf56:	af00      	add	r7, sp, #0
 810cf58:	6078      	str	r0, [r7, #4]
 810cf5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 810cf5c:	687b      	ldr	r3, [r7, #4]
 810cf5e:	685b      	ldr	r3, [r3, #4]
 810cf60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 810cf62:	683b      	ldr	r3, [r7, #0]
 810cf64:	68fa      	ldr	r2, [r7, #12]
 810cf66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 810cf68:	68fb      	ldr	r3, [r7, #12]
 810cf6a:	689a      	ldr	r2, [r3, #8]
 810cf6c:	683b      	ldr	r3, [r7, #0]
 810cf6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 810cf70:	68fb      	ldr	r3, [r7, #12]
 810cf72:	689b      	ldr	r3, [r3, #8]
 810cf74:	683a      	ldr	r2, [r7, #0]
 810cf76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 810cf78:	68fb      	ldr	r3, [r7, #12]
 810cf7a:	683a      	ldr	r2, [r7, #0]
 810cf7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 810cf7e:	683b      	ldr	r3, [r7, #0]
 810cf80:	687a      	ldr	r2, [r7, #4]
 810cf82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810cf84:	687b      	ldr	r3, [r7, #4]
 810cf86:	681b      	ldr	r3, [r3, #0]
 810cf88:	1c5a      	adds	r2, r3, #1
 810cf8a:	687b      	ldr	r3, [r7, #4]
 810cf8c:	601a      	str	r2, [r3, #0]
}
 810cf8e:	bf00      	nop
 810cf90:	3714      	adds	r7, #20
 810cf92:	46bd      	mov	sp, r7
 810cf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cf98:	4770      	bx	lr

0810cf9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810cf9a:	b480      	push	{r7}
 810cf9c:	b085      	sub	sp, #20
 810cf9e:	af00      	add	r7, sp, #0
 810cfa0:	6078      	str	r0, [r7, #4]
 810cfa2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 810cfa4:	683b      	ldr	r3, [r7, #0]
 810cfa6:	681b      	ldr	r3, [r3, #0]
 810cfa8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 810cfaa:	68bb      	ldr	r3, [r7, #8]
 810cfac:	f1b3 3fff 	cmp.w	r3, #4294967295
 810cfb0:	d103      	bne.n	810cfba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 810cfb2:	687b      	ldr	r3, [r7, #4]
 810cfb4:	691b      	ldr	r3, [r3, #16]
 810cfb6:	60fb      	str	r3, [r7, #12]
 810cfb8:	e00c      	b.n	810cfd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 810cfba:	687b      	ldr	r3, [r7, #4]
 810cfbc:	3308      	adds	r3, #8
 810cfbe:	60fb      	str	r3, [r7, #12]
 810cfc0:	e002      	b.n	810cfc8 <vListInsert+0x2e>
 810cfc2:	68fb      	ldr	r3, [r7, #12]
 810cfc4:	685b      	ldr	r3, [r3, #4]
 810cfc6:	60fb      	str	r3, [r7, #12]
 810cfc8:	68fb      	ldr	r3, [r7, #12]
 810cfca:	685b      	ldr	r3, [r3, #4]
 810cfcc:	681b      	ldr	r3, [r3, #0]
 810cfce:	68ba      	ldr	r2, [r7, #8]
 810cfd0:	429a      	cmp	r2, r3
 810cfd2:	d2f6      	bcs.n	810cfc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 810cfd4:	68fb      	ldr	r3, [r7, #12]
 810cfd6:	685a      	ldr	r2, [r3, #4]
 810cfd8:	683b      	ldr	r3, [r7, #0]
 810cfda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 810cfdc:	683b      	ldr	r3, [r7, #0]
 810cfde:	685b      	ldr	r3, [r3, #4]
 810cfe0:	683a      	ldr	r2, [r7, #0]
 810cfe2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 810cfe4:	683b      	ldr	r3, [r7, #0]
 810cfe6:	68fa      	ldr	r2, [r7, #12]
 810cfe8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 810cfea:	68fb      	ldr	r3, [r7, #12]
 810cfec:	683a      	ldr	r2, [r7, #0]
 810cfee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 810cff0:	683b      	ldr	r3, [r7, #0]
 810cff2:	687a      	ldr	r2, [r7, #4]
 810cff4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810cff6:	687b      	ldr	r3, [r7, #4]
 810cff8:	681b      	ldr	r3, [r3, #0]
 810cffa:	1c5a      	adds	r2, r3, #1
 810cffc:	687b      	ldr	r3, [r7, #4]
 810cffe:	601a      	str	r2, [r3, #0]
}
 810d000:	bf00      	nop
 810d002:	3714      	adds	r7, #20
 810d004:	46bd      	mov	sp, r7
 810d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d00a:	4770      	bx	lr

0810d00c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 810d00c:	b480      	push	{r7}
 810d00e:	b085      	sub	sp, #20
 810d010:	af00      	add	r7, sp, #0
 810d012:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 810d014:	687b      	ldr	r3, [r7, #4]
 810d016:	691b      	ldr	r3, [r3, #16]
 810d018:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 810d01a:	687b      	ldr	r3, [r7, #4]
 810d01c:	685b      	ldr	r3, [r3, #4]
 810d01e:	687a      	ldr	r2, [r7, #4]
 810d020:	6892      	ldr	r2, [r2, #8]
 810d022:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 810d024:	687b      	ldr	r3, [r7, #4]
 810d026:	689b      	ldr	r3, [r3, #8]
 810d028:	687a      	ldr	r2, [r7, #4]
 810d02a:	6852      	ldr	r2, [r2, #4]
 810d02c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 810d02e:	68fb      	ldr	r3, [r7, #12]
 810d030:	685b      	ldr	r3, [r3, #4]
 810d032:	687a      	ldr	r2, [r7, #4]
 810d034:	429a      	cmp	r2, r3
 810d036:	d103      	bne.n	810d040 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 810d038:	687b      	ldr	r3, [r7, #4]
 810d03a:	689a      	ldr	r2, [r3, #8]
 810d03c:	68fb      	ldr	r3, [r7, #12]
 810d03e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 810d040:	687b      	ldr	r3, [r7, #4]
 810d042:	2200      	movs	r2, #0
 810d044:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 810d046:	68fb      	ldr	r3, [r7, #12]
 810d048:	681b      	ldr	r3, [r3, #0]
 810d04a:	1e5a      	subs	r2, r3, #1
 810d04c:	68fb      	ldr	r3, [r7, #12]
 810d04e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 810d050:	68fb      	ldr	r3, [r7, #12]
 810d052:	681b      	ldr	r3, [r3, #0]
}
 810d054:	4618      	mov	r0, r3
 810d056:	3714      	adds	r7, #20
 810d058:	46bd      	mov	sp, r7
 810d05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d05e:	4770      	bx	lr

0810d060 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 810d060:	b480      	push	{r7}
 810d062:	b085      	sub	sp, #20
 810d064:	af00      	add	r7, sp, #0
 810d066:	60f8      	str	r0, [r7, #12]
 810d068:	60b9      	str	r1, [r7, #8]
 810d06a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 810d06c:	68fb      	ldr	r3, [r7, #12]
 810d06e:	3b04      	subs	r3, #4
 810d070:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 810d072:	68fb      	ldr	r3, [r7, #12]
 810d074:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 810d078:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810d07a:	68fb      	ldr	r3, [r7, #12]
 810d07c:	3b04      	subs	r3, #4
 810d07e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 810d080:	68bb      	ldr	r3, [r7, #8]
 810d082:	f023 0201 	bic.w	r2, r3, #1
 810d086:	68fb      	ldr	r3, [r7, #12]
 810d088:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810d08a:	68fb      	ldr	r3, [r7, #12]
 810d08c:	3b04      	subs	r3, #4
 810d08e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 810d090:	4a0c      	ldr	r2, [pc, #48]	@ (810d0c4 <pxPortInitialiseStack+0x64>)
 810d092:	68fb      	ldr	r3, [r7, #12]
 810d094:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 810d096:	68fb      	ldr	r3, [r7, #12]
 810d098:	3b14      	subs	r3, #20
 810d09a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 810d09c:	687a      	ldr	r2, [r7, #4]
 810d09e:	68fb      	ldr	r3, [r7, #12]
 810d0a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 810d0a2:	68fb      	ldr	r3, [r7, #12]
 810d0a4:	3b04      	subs	r3, #4
 810d0a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 810d0a8:	68fb      	ldr	r3, [r7, #12]
 810d0aa:	f06f 0202 	mvn.w	r2, #2
 810d0ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 810d0b0:	68fb      	ldr	r3, [r7, #12]
 810d0b2:	3b20      	subs	r3, #32
 810d0b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 810d0b6:	68fb      	ldr	r3, [r7, #12]
}
 810d0b8:	4618      	mov	r0, r3
 810d0ba:	3714      	adds	r7, #20
 810d0bc:	46bd      	mov	sp, r7
 810d0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d0c2:	4770      	bx	lr
 810d0c4:	0810d0c9 	.word	0x0810d0c9

0810d0c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 810d0c8:	b480      	push	{r7}
 810d0ca:	b085      	sub	sp, #20
 810d0cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 810d0ce:	2300      	movs	r3, #0
 810d0d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 810d0d2:	4b13      	ldr	r3, [pc, #76]	@ (810d120 <prvTaskExitError+0x58>)
 810d0d4:	681b      	ldr	r3, [r3, #0]
 810d0d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d0da:	d00b      	beq.n	810d0f4 <prvTaskExitError+0x2c>
	__asm volatile
 810d0dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d0e0:	f383 8811 	msr	BASEPRI, r3
 810d0e4:	f3bf 8f6f 	isb	sy
 810d0e8:	f3bf 8f4f 	dsb	sy
 810d0ec:	60fb      	str	r3, [r7, #12]
}
 810d0ee:	bf00      	nop
 810d0f0:	bf00      	nop
 810d0f2:	e7fd      	b.n	810d0f0 <prvTaskExitError+0x28>
	__asm volatile
 810d0f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d0f8:	f383 8811 	msr	BASEPRI, r3
 810d0fc:	f3bf 8f6f 	isb	sy
 810d100:	f3bf 8f4f 	dsb	sy
 810d104:	60bb      	str	r3, [r7, #8]
}
 810d106:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 810d108:	bf00      	nop
 810d10a:	687b      	ldr	r3, [r7, #4]
 810d10c:	2b00      	cmp	r3, #0
 810d10e:	d0fc      	beq.n	810d10a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 810d110:	bf00      	nop
 810d112:	bf00      	nop
 810d114:	3714      	adds	r7, #20
 810d116:	46bd      	mov	sp, r7
 810d118:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d11c:	4770      	bx	lr
 810d11e:	bf00      	nop
 810d120:	10000024 	.word	0x10000024
	...

0810d130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 810d130:	4b07      	ldr	r3, [pc, #28]	@ (810d150 <pxCurrentTCBConst2>)
 810d132:	6819      	ldr	r1, [r3, #0]
 810d134:	6808      	ldr	r0, [r1, #0]
 810d136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d13a:	f380 8809 	msr	PSP, r0
 810d13e:	f3bf 8f6f 	isb	sy
 810d142:	f04f 0000 	mov.w	r0, #0
 810d146:	f380 8811 	msr	BASEPRI, r0
 810d14a:	4770      	bx	lr
 810d14c:	f3af 8000 	nop.w

0810d150 <pxCurrentTCBConst2>:
 810d150:	1000ab24 	.word	0x1000ab24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 810d154:	bf00      	nop
 810d156:	bf00      	nop

0810d158 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 810d158:	4808      	ldr	r0, [pc, #32]	@ (810d17c <prvPortStartFirstTask+0x24>)
 810d15a:	6800      	ldr	r0, [r0, #0]
 810d15c:	6800      	ldr	r0, [r0, #0]
 810d15e:	f380 8808 	msr	MSP, r0
 810d162:	f04f 0000 	mov.w	r0, #0
 810d166:	f380 8814 	msr	CONTROL, r0
 810d16a:	b662      	cpsie	i
 810d16c:	b661      	cpsie	f
 810d16e:	f3bf 8f4f 	dsb	sy
 810d172:	f3bf 8f6f 	isb	sy
 810d176:	df00      	svc	0
 810d178:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 810d17a:	bf00      	nop
 810d17c:	e000ed08 	.word	0xe000ed08

0810d180 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 810d180:	b580      	push	{r7, lr}
 810d182:	b086      	sub	sp, #24
 810d184:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 810d186:	4b47      	ldr	r3, [pc, #284]	@ (810d2a4 <xPortStartScheduler+0x124>)
 810d188:	681b      	ldr	r3, [r3, #0]
 810d18a:	4a47      	ldr	r2, [pc, #284]	@ (810d2a8 <xPortStartScheduler+0x128>)
 810d18c:	4293      	cmp	r3, r2
 810d18e:	d10b      	bne.n	810d1a8 <xPortStartScheduler+0x28>
	__asm volatile
 810d190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d194:	f383 8811 	msr	BASEPRI, r3
 810d198:	f3bf 8f6f 	isb	sy
 810d19c:	f3bf 8f4f 	dsb	sy
 810d1a0:	613b      	str	r3, [r7, #16]
}
 810d1a2:	bf00      	nop
 810d1a4:	bf00      	nop
 810d1a6:	e7fd      	b.n	810d1a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 810d1a8:	4b3e      	ldr	r3, [pc, #248]	@ (810d2a4 <xPortStartScheduler+0x124>)
 810d1aa:	681b      	ldr	r3, [r3, #0]
 810d1ac:	4a3f      	ldr	r2, [pc, #252]	@ (810d2ac <xPortStartScheduler+0x12c>)
 810d1ae:	4293      	cmp	r3, r2
 810d1b0:	d10b      	bne.n	810d1ca <xPortStartScheduler+0x4a>
	__asm volatile
 810d1b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d1b6:	f383 8811 	msr	BASEPRI, r3
 810d1ba:	f3bf 8f6f 	isb	sy
 810d1be:	f3bf 8f4f 	dsb	sy
 810d1c2:	60fb      	str	r3, [r7, #12]
}
 810d1c4:	bf00      	nop
 810d1c6:	bf00      	nop
 810d1c8:	e7fd      	b.n	810d1c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 810d1ca:	4b39      	ldr	r3, [pc, #228]	@ (810d2b0 <xPortStartScheduler+0x130>)
 810d1cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 810d1ce:	697b      	ldr	r3, [r7, #20]
 810d1d0:	781b      	ldrb	r3, [r3, #0]
 810d1d2:	b2db      	uxtb	r3, r3
 810d1d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 810d1d6:	697b      	ldr	r3, [r7, #20]
 810d1d8:	22ff      	movs	r2, #255	@ 0xff
 810d1da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 810d1dc:	697b      	ldr	r3, [r7, #20]
 810d1de:	781b      	ldrb	r3, [r3, #0]
 810d1e0:	b2db      	uxtb	r3, r3
 810d1e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 810d1e4:	78fb      	ldrb	r3, [r7, #3]
 810d1e6:	b2db      	uxtb	r3, r3
 810d1e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 810d1ec:	b2da      	uxtb	r2, r3
 810d1ee:	4b31      	ldr	r3, [pc, #196]	@ (810d2b4 <xPortStartScheduler+0x134>)
 810d1f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 810d1f2:	4b31      	ldr	r3, [pc, #196]	@ (810d2b8 <xPortStartScheduler+0x138>)
 810d1f4:	2207      	movs	r2, #7
 810d1f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810d1f8:	e009      	b.n	810d20e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 810d1fa:	4b2f      	ldr	r3, [pc, #188]	@ (810d2b8 <xPortStartScheduler+0x138>)
 810d1fc:	681b      	ldr	r3, [r3, #0]
 810d1fe:	3b01      	subs	r3, #1
 810d200:	4a2d      	ldr	r2, [pc, #180]	@ (810d2b8 <xPortStartScheduler+0x138>)
 810d202:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 810d204:	78fb      	ldrb	r3, [r7, #3]
 810d206:	b2db      	uxtb	r3, r3
 810d208:	005b      	lsls	r3, r3, #1
 810d20a:	b2db      	uxtb	r3, r3
 810d20c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810d20e:	78fb      	ldrb	r3, [r7, #3]
 810d210:	b2db      	uxtb	r3, r3
 810d212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810d216:	2b80      	cmp	r3, #128	@ 0x80
 810d218:	d0ef      	beq.n	810d1fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 810d21a:	4b27      	ldr	r3, [pc, #156]	@ (810d2b8 <xPortStartScheduler+0x138>)
 810d21c:	681b      	ldr	r3, [r3, #0]
 810d21e:	f1c3 0307 	rsb	r3, r3, #7
 810d222:	2b04      	cmp	r3, #4
 810d224:	d00b      	beq.n	810d23e <xPortStartScheduler+0xbe>
	__asm volatile
 810d226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d22a:	f383 8811 	msr	BASEPRI, r3
 810d22e:	f3bf 8f6f 	isb	sy
 810d232:	f3bf 8f4f 	dsb	sy
 810d236:	60bb      	str	r3, [r7, #8]
}
 810d238:	bf00      	nop
 810d23a:	bf00      	nop
 810d23c:	e7fd      	b.n	810d23a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 810d23e:	4b1e      	ldr	r3, [pc, #120]	@ (810d2b8 <xPortStartScheduler+0x138>)
 810d240:	681b      	ldr	r3, [r3, #0]
 810d242:	021b      	lsls	r3, r3, #8
 810d244:	4a1c      	ldr	r2, [pc, #112]	@ (810d2b8 <xPortStartScheduler+0x138>)
 810d246:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 810d248:	4b1b      	ldr	r3, [pc, #108]	@ (810d2b8 <xPortStartScheduler+0x138>)
 810d24a:	681b      	ldr	r3, [r3, #0]
 810d24c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 810d250:	4a19      	ldr	r2, [pc, #100]	@ (810d2b8 <xPortStartScheduler+0x138>)
 810d252:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 810d254:	687b      	ldr	r3, [r7, #4]
 810d256:	b2da      	uxtb	r2, r3
 810d258:	697b      	ldr	r3, [r7, #20]
 810d25a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 810d25c:	4b17      	ldr	r3, [pc, #92]	@ (810d2bc <xPortStartScheduler+0x13c>)
 810d25e:	681b      	ldr	r3, [r3, #0]
 810d260:	4a16      	ldr	r2, [pc, #88]	@ (810d2bc <xPortStartScheduler+0x13c>)
 810d262:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 810d266:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 810d268:	4b14      	ldr	r3, [pc, #80]	@ (810d2bc <xPortStartScheduler+0x13c>)
 810d26a:	681b      	ldr	r3, [r3, #0]
 810d26c:	4a13      	ldr	r2, [pc, #76]	@ (810d2bc <xPortStartScheduler+0x13c>)
 810d26e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 810d272:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 810d274:	f000 f8da 	bl	810d42c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 810d278:	4b11      	ldr	r3, [pc, #68]	@ (810d2c0 <xPortStartScheduler+0x140>)
 810d27a:	2200      	movs	r2, #0
 810d27c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 810d27e:	f000 f8f9 	bl	810d474 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 810d282:	4b10      	ldr	r3, [pc, #64]	@ (810d2c4 <xPortStartScheduler+0x144>)
 810d284:	681b      	ldr	r3, [r3, #0]
 810d286:	4a0f      	ldr	r2, [pc, #60]	@ (810d2c4 <xPortStartScheduler+0x144>)
 810d288:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 810d28c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 810d28e:	f7ff ff63 	bl	810d158 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 810d292:	f002 fa35 	bl	810f700 <vTaskSwitchContext>
	prvTaskExitError();
 810d296:	f7ff ff17 	bl	810d0c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 810d29a:	2300      	movs	r3, #0
}
 810d29c:	4618      	mov	r0, r3
 810d29e:	3718      	adds	r7, #24
 810d2a0:	46bd      	mov	sp, r7
 810d2a2:	bd80      	pop	{r7, pc}
 810d2a4:	e000ed00 	.word	0xe000ed00
 810d2a8:	410fc271 	.word	0x410fc271
 810d2ac:	410fc270 	.word	0x410fc270
 810d2b0:	e000e400 	.word	0xe000e400
 810d2b4:	1000aadc 	.word	0x1000aadc
 810d2b8:	1000aae0 	.word	0x1000aae0
 810d2bc:	e000ed20 	.word	0xe000ed20
 810d2c0:	10000024 	.word	0x10000024
 810d2c4:	e000ef34 	.word	0xe000ef34

0810d2c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 810d2c8:	b480      	push	{r7}
 810d2ca:	b083      	sub	sp, #12
 810d2cc:	af00      	add	r7, sp, #0
	__asm volatile
 810d2ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d2d2:	f383 8811 	msr	BASEPRI, r3
 810d2d6:	f3bf 8f6f 	isb	sy
 810d2da:	f3bf 8f4f 	dsb	sy
 810d2de:	607b      	str	r3, [r7, #4]
}
 810d2e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 810d2e2:	4b10      	ldr	r3, [pc, #64]	@ (810d324 <vPortEnterCritical+0x5c>)
 810d2e4:	681b      	ldr	r3, [r3, #0]
 810d2e6:	3301      	adds	r3, #1
 810d2e8:	4a0e      	ldr	r2, [pc, #56]	@ (810d324 <vPortEnterCritical+0x5c>)
 810d2ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 810d2ec:	4b0d      	ldr	r3, [pc, #52]	@ (810d324 <vPortEnterCritical+0x5c>)
 810d2ee:	681b      	ldr	r3, [r3, #0]
 810d2f0:	2b01      	cmp	r3, #1
 810d2f2:	d110      	bne.n	810d316 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 810d2f4:	4b0c      	ldr	r3, [pc, #48]	@ (810d328 <vPortEnterCritical+0x60>)
 810d2f6:	681b      	ldr	r3, [r3, #0]
 810d2f8:	b2db      	uxtb	r3, r3
 810d2fa:	2b00      	cmp	r3, #0
 810d2fc:	d00b      	beq.n	810d316 <vPortEnterCritical+0x4e>
	__asm volatile
 810d2fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d302:	f383 8811 	msr	BASEPRI, r3
 810d306:	f3bf 8f6f 	isb	sy
 810d30a:	f3bf 8f4f 	dsb	sy
 810d30e:	603b      	str	r3, [r7, #0]
}
 810d310:	bf00      	nop
 810d312:	bf00      	nop
 810d314:	e7fd      	b.n	810d312 <vPortEnterCritical+0x4a>
	}
}
 810d316:	bf00      	nop
 810d318:	370c      	adds	r7, #12
 810d31a:	46bd      	mov	sp, r7
 810d31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d320:	4770      	bx	lr
 810d322:	bf00      	nop
 810d324:	10000024 	.word	0x10000024
 810d328:	e000ed04 	.word	0xe000ed04

0810d32c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 810d32c:	b480      	push	{r7}
 810d32e:	b083      	sub	sp, #12
 810d330:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 810d332:	4b12      	ldr	r3, [pc, #72]	@ (810d37c <vPortExitCritical+0x50>)
 810d334:	681b      	ldr	r3, [r3, #0]
 810d336:	2b00      	cmp	r3, #0
 810d338:	d10b      	bne.n	810d352 <vPortExitCritical+0x26>
	__asm volatile
 810d33a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d33e:	f383 8811 	msr	BASEPRI, r3
 810d342:	f3bf 8f6f 	isb	sy
 810d346:	f3bf 8f4f 	dsb	sy
 810d34a:	607b      	str	r3, [r7, #4]
}
 810d34c:	bf00      	nop
 810d34e:	bf00      	nop
 810d350:	e7fd      	b.n	810d34e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 810d352:	4b0a      	ldr	r3, [pc, #40]	@ (810d37c <vPortExitCritical+0x50>)
 810d354:	681b      	ldr	r3, [r3, #0]
 810d356:	3b01      	subs	r3, #1
 810d358:	4a08      	ldr	r2, [pc, #32]	@ (810d37c <vPortExitCritical+0x50>)
 810d35a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 810d35c:	4b07      	ldr	r3, [pc, #28]	@ (810d37c <vPortExitCritical+0x50>)
 810d35e:	681b      	ldr	r3, [r3, #0]
 810d360:	2b00      	cmp	r3, #0
 810d362:	d105      	bne.n	810d370 <vPortExitCritical+0x44>
 810d364:	2300      	movs	r3, #0
 810d366:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 810d368:	683b      	ldr	r3, [r7, #0]
 810d36a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 810d36e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 810d370:	bf00      	nop
 810d372:	370c      	adds	r7, #12
 810d374:	46bd      	mov	sp, r7
 810d376:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d37a:	4770      	bx	lr
 810d37c:	10000024 	.word	0x10000024

0810d380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 810d380:	f3ef 8009 	mrs	r0, PSP
 810d384:	f3bf 8f6f 	isb	sy
 810d388:	4b15      	ldr	r3, [pc, #84]	@ (810d3e0 <pxCurrentTCBConst>)
 810d38a:	681a      	ldr	r2, [r3, #0]
 810d38c:	f01e 0f10 	tst.w	lr, #16
 810d390:	bf08      	it	eq
 810d392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 810d396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d39a:	6010      	str	r0, [r2, #0]
 810d39c:	e92d 0009 	stmdb	sp!, {r0, r3}
 810d3a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 810d3a4:	f380 8811 	msr	BASEPRI, r0
 810d3a8:	f3bf 8f4f 	dsb	sy
 810d3ac:	f3bf 8f6f 	isb	sy
 810d3b0:	f002 f9a6 	bl	810f700 <vTaskSwitchContext>
 810d3b4:	f04f 0000 	mov.w	r0, #0
 810d3b8:	f380 8811 	msr	BASEPRI, r0
 810d3bc:	bc09      	pop	{r0, r3}
 810d3be:	6819      	ldr	r1, [r3, #0]
 810d3c0:	6808      	ldr	r0, [r1, #0]
 810d3c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d3c6:	f01e 0f10 	tst.w	lr, #16
 810d3ca:	bf08      	it	eq
 810d3cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 810d3d0:	f380 8809 	msr	PSP, r0
 810d3d4:	f3bf 8f6f 	isb	sy
 810d3d8:	4770      	bx	lr
 810d3da:	bf00      	nop
 810d3dc:	f3af 8000 	nop.w

0810d3e0 <pxCurrentTCBConst>:
 810d3e0:	1000ab24 	.word	0x1000ab24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 810d3e4:	bf00      	nop
 810d3e6:	bf00      	nop

0810d3e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 810d3e8:	b580      	push	{r7, lr}
 810d3ea:	b082      	sub	sp, #8
 810d3ec:	af00      	add	r7, sp, #0
	__asm volatile
 810d3ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d3f2:	f383 8811 	msr	BASEPRI, r3
 810d3f6:	f3bf 8f6f 	isb	sy
 810d3fa:	f3bf 8f4f 	dsb	sy
 810d3fe:	607b      	str	r3, [r7, #4]
}
 810d400:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 810d402:	f002 f8c3 	bl	810f58c <xTaskIncrementTick>
 810d406:	4603      	mov	r3, r0
 810d408:	2b00      	cmp	r3, #0
 810d40a:	d003      	beq.n	810d414 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810d40c:	4b06      	ldr	r3, [pc, #24]	@ (810d428 <xPortSysTickHandler+0x40>)
 810d40e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810d412:	601a      	str	r2, [r3, #0]
 810d414:	2300      	movs	r3, #0
 810d416:	603b      	str	r3, [r7, #0]
	__asm volatile
 810d418:	683b      	ldr	r3, [r7, #0]
 810d41a:	f383 8811 	msr	BASEPRI, r3
}
 810d41e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 810d420:	bf00      	nop
 810d422:	3708      	adds	r7, #8
 810d424:	46bd      	mov	sp, r7
 810d426:	bd80      	pop	{r7, pc}
 810d428:	e000ed04 	.word	0xe000ed04

0810d42c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 810d42c:	b480      	push	{r7}
 810d42e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 810d430:	4b0b      	ldr	r3, [pc, #44]	@ (810d460 <vPortSetupTimerInterrupt+0x34>)
 810d432:	2200      	movs	r2, #0
 810d434:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 810d436:	4b0b      	ldr	r3, [pc, #44]	@ (810d464 <vPortSetupTimerInterrupt+0x38>)
 810d438:	2200      	movs	r2, #0
 810d43a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 810d43c:	4b0a      	ldr	r3, [pc, #40]	@ (810d468 <vPortSetupTimerInterrupt+0x3c>)
 810d43e:	681b      	ldr	r3, [r3, #0]
 810d440:	4a0a      	ldr	r2, [pc, #40]	@ (810d46c <vPortSetupTimerInterrupt+0x40>)
 810d442:	fba2 2303 	umull	r2, r3, r2, r3
 810d446:	099b      	lsrs	r3, r3, #6
 810d448:	4a09      	ldr	r2, [pc, #36]	@ (810d470 <vPortSetupTimerInterrupt+0x44>)
 810d44a:	3b01      	subs	r3, #1
 810d44c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 810d44e:	4b04      	ldr	r3, [pc, #16]	@ (810d460 <vPortSetupTimerInterrupt+0x34>)
 810d450:	2207      	movs	r2, #7
 810d452:	601a      	str	r2, [r3, #0]
}
 810d454:	bf00      	nop
 810d456:	46bd      	mov	sp, r7
 810d458:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d45c:	4770      	bx	lr
 810d45e:	bf00      	nop
 810d460:	e000e010 	.word	0xe000e010
 810d464:	e000e018 	.word	0xe000e018
 810d468:	10000018 	.word	0x10000018
 810d46c:	10624dd3 	.word	0x10624dd3
 810d470:	e000e014 	.word	0xe000e014

0810d474 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 810d474:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 810d484 <vPortEnableVFP+0x10>
 810d478:	6801      	ldr	r1, [r0, #0]
 810d47a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810d47e:	6001      	str	r1, [r0, #0]
 810d480:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 810d482:	bf00      	nop
 810d484:	e000ed88 	.word	0xe000ed88

0810d488 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 810d488:	b480      	push	{r7}
 810d48a:	b085      	sub	sp, #20
 810d48c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 810d48e:	f3ef 8305 	mrs	r3, IPSR
 810d492:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 810d494:	68fb      	ldr	r3, [r7, #12]
 810d496:	2b0f      	cmp	r3, #15
 810d498:	d915      	bls.n	810d4c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 810d49a:	4a18      	ldr	r2, [pc, #96]	@ (810d4fc <vPortValidateInterruptPriority+0x74>)
 810d49c:	68fb      	ldr	r3, [r7, #12]
 810d49e:	4413      	add	r3, r2
 810d4a0:	781b      	ldrb	r3, [r3, #0]
 810d4a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 810d4a4:	4b16      	ldr	r3, [pc, #88]	@ (810d500 <vPortValidateInterruptPriority+0x78>)
 810d4a6:	781b      	ldrb	r3, [r3, #0]
 810d4a8:	7afa      	ldrb	r2, [r7, #11]
 810d4aa:	429a      	cmp	r2, r3
 810d4ac:	d20b      	bcs.n	810d4c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 810d4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d4b2:	f383 8811 	msr	BASEPRI, r3
 810d4b6:	f3bf 8f6f 	isb	sy
 810d4ba:	f3bf 8f4f 	dsb	sy
 810d4be:	607b      	str	r3, [r7, #4]
}
 810d4c0:	bf00      	nop
 810d4c2:	bf00      	nop
 810d4c4:	e7fd      	b.n	810d4c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 810d4c6:	4b0f      	ldr	r3, [pc, #60]	@ (810d504 <vPortValidateInterruptPriority+0x7c>)
 810d4c8:	681b      	ldr	r3, [r3, #0]
 810d4ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 810d4ce:	4b0e      	ldr	r3, [pc, #56]	@ (810d508 <vPortValidateInterruptPriority+0x80>)
 810d4d0:	681b      	ldr	r3, [r3, #0]
 810d4d2:	429a      	cmp	r2, r3
 810d4d4:	d90b      	bls.n	810d4ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 810d4d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d4da:	f383 8811 	msr	BASEPRI, r3
 810d4de:	f3bf 8f6f 	isb	sy
 810d4e2:	f3bf 8f4f 	dsb	sy
 810d4e6:	603b      	str	r3, [r7, #0]
}
 810d4e8:	bf00      	nop
 810d4ea:	bf00      	nop
 810d4ec:	e7fd      	b.n	810d4ea <vPortValidateInterruptPriority+0x62>
	}
 810d4ee:	bf00      	nop
 810d4f0:	3714      	adds	r7, #20
 810d4f2:	46bd      	mov	sp, r7
 810d4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d4f8:	4770      	bx	lr
 810d4fa:	bf00      	nop
 810d4fc:	e000e3f0 	.word	0xe000e3f0
 810d500:	1000aadc 	.word	0x1000aadc
 810d504:	e000ed0c 	.word	0xe000ed0c
 810d508:	1000aae0 	.word	0x1000aae0

0810d50c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 810d50c:	b580      	push	{r7, lr}
 810d50e:	b084      	sub	sp, #16
 810d510:	af00      	add	r7, sp, #0
 810d512:	6078      	str	r0, [r7, #4]
 810d514:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 810d516:	687b      	ldr	r3, [r7, #4]
 810d518:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 810d51a:	68fb      	ldr	r3, [r7, #12]
 810d51c:	2b00      	cmp	r3, #0
 810d51e:	d10b      	bne.n	810d538 <xQueueGenericReset+0x2c>
	__asm volatile
 810d520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d524:	f383 8811 	msr	BASEPRI, r3
 810d528:	f3bf 8f6f 	isb	sy
 810d52c:	f3bf 8f4f 	dsb	sy
 810d530:	60bb      	str	r3, [r7, #8]
}
 810d532:	bf00      	nop
 810d534:	bf00      	nop
 810d536:	e7fd      	b.n	810d534 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 810d538:	f7ff fec6 	bl	810d2c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810d53c:	68fb      	ldr	r3, [r7, #12]
 810d53e:	681a      	ldr	r2, [r3, #0]
 810d540:	68fb      	ldr	r3, [r7, #12]
 810d542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810d544:	68f9      	ldr	r1, [r7, #12]
 810d546:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 810d548:	fb01 f303 	mul.w	r3, r1, r3
 810d54c:	441a      	add	r2, r3
 810d54e:	68fb      	ldr	r3, [r7, #12]
 810d550:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 810d552:	68fb      	ldr	r3, [r7, #12]
 810d554:	2200      	movs	r2, #0
 810d556:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 810d558:	68fb      	ldr	r3, [r7, #12]
 810d55a:	681a      	ldr	r2, [r3, #0]
 810d55c:	68fb      	ldr	r3, [r7, #12]
 810d55e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810d560:	68fb      	ldr	r3, [r7, #12]
 810d562:	681a      	ldr	r2, [r3, #0]
 810d564:	68fb      	ldr	r3, [r7, #12]
 810d566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810d568:	3b01      	subs	r3, #1
 810d56a:	68f9      	ldr	r1, [r7, #12]
 810d56c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 810d56e:	fb01 f303 	mul.w	r3, r1, r3
 810d572:	441a      	add	r2, r3
 810d574:	68fb      	ldr	r3, [r7, #12]
 810d576:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 810d578:	68fb      	ldr	r3, [r7, #12]
 810d57a:	22ff      	movs	r2, #255	@ 0xff
 810d57c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 810d580:	68fb      	ldr	r3, [r7, #12]
 810d582:	22ff      	movs	r2, #255	@ 0xff
 810d584:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 810d588:	683b      	ldr	r3, [r7, #0]
 810d58a:	2b00      	cmp	r3, #0
 810d58c:	d114      	bne.n	810d5b8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810d58e:	68fb      	ldr	r3, [r7, #12]
 810d590:	691b      	ldr	r3, [r3, #16]
 810d592:	2b00      	cmp	r3, #0
 810d594:	d01a      	beq.n	810d5cc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810d596:	68fb      	ldr	r3, [r7, #12]
 810d598:	3310      	adds	r3, #16
 810d59a:	4618      	mov	r0, r3
 810d59c:	f002 f968 	bl	810f870 <xTaskRemoveFromEventList>
 810d5a0:	4603      	mov	r3, r0
 810d5a2:	2b00      	cmp	r3, #0
 810d5a4:	d012      	beq.n	810d5cc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 810d5a6:	4b0d      	ldr	r3, [pc, #52]	@ (810d5dc <xQueueGenericReset+0xd0>)
 810d5a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810d5ac:	601a      	str	r2, [r3, #0]
 810d5ae:	f3bf 8f4f 	dsb	sy
 810d5b2:	f3bf 8f6f 	isb	sy
 810d5b6:	e009      	b.n	810d5cc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 810d5b8:	68fb      	ldr	r3, [r7, #12]
 810d5ba:	3310      	adds	r3, #16
 810d5bc:	4618      	mov	r0, r3
 810d5be:	f7ff fc9b 	bl	810cef8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 810d5c2:	68fb      	ldr	r3, [r7, #12]
 810d5c4:	3324      	adds	r3, #36	@ 0x24
 810d5c6:	4618      	mov	r0, r3
 810d5c8:	f7ff fc96 	bl	810cef8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 810d5cc:	f7ff feae 	bl	810d32c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 810d5d0:	2301      	movs	r3, #1
}
 810d5d2:	4618      	mov	r0, r3
 810d5d4:	3710      	adds	r7, #16
 810d5d6:	46bd      	mov	sp, r7
 810d5d8:	bd80      	pop	{r7, pc}
 810d5da:	bf00      	nop
 810d5dc:	e000ed04 	.word	0xe000ed04

0810d5e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 810d5e0:	b580      	push	{r7, lr}
 810d5e2:	b08e      	sub	sp, #56	@ 0x38
 810d5e4:	af02      	add	r7, sp, #8
 810d5e6:	60f8      	str	r0, [r7, #12]
 810d5e8:	60b9      	str	r1, [r7, #8]
 810d5ea:	607a      	str	r2, [r7, #4]
 810d5ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810d5ee:	68fb      	ldr	r3, [r7, #12]
 810d5f0:	2b00      	cmp	r3, #0
 810d5f2:	d10b      	bne.n	810d60c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 810d5f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d5f8:	f383 8811 	msr	BASEPRI, r3
 810d5fc:	f3bf 8f6f 	isb	sy
 810d600:	f3bf 8f4f 	dsb	sy
 810d604:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810d606:	bf00      	nop
 810d608:	bf00      	nop
 810d60a:	e7fd      	b.n	810d608 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 810d60c:	683b      	ldr	r3, [r7, #0]
 810d60e:	2b00      	cmp	r3, #0
 810d610:	d10b      	bne.n	810d62a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 810d612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d616:	f383 8811 	msr	BASEPRI, r3
 810d61a:	f3bf 8f6f 	isb	sy
 810d61e:	f3bf 8f4f 	dsb	sy
 810d622:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810d624:	bf00      	nop
 810d626:	bf00      	nop
 810d628:	e7fd      	b.n	810d626 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 810d62a:	687b      	ldr	r3, [r7, #4]
 810d62c:	2b00      	cmp	r3, #0
 810d62e:	d002      	beq.n	810d636 <xQueueGenericCreateStatic+0x56>
 810d630:	68bb      	ldr	r3, [r7, #8]
 810d632:	2b00      	cmp	r3, #0
 810d634:	d001      	beq.n	810d63a <xQueueGenericCreateStatic+0x5a>
 810d636:	2301      	movs	r3, #1
 810d638:	e000      	b.n	810d63c <xQueueGenericCreateStatic+0x5c>
 810d63a:	2300      	movs	r3, #0
 810d63c:	2b00      	cmp	r3, #0
 810d63e:	d10b      	bne.n	810d658 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 810d640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d644:	f383 8811 	msr	BASEPRI, r3
 810d648:	f3bf 8f6f 	isb	sy
 810d64c:	f3bf 8f4f 	dsb	sy
 810d650:	623b      	str	r3, [r7, #32]
}
 810d652:	bf00      	nop
 810d654:	bf00      	nop
 810d656:	e7fd      	b.n	810d654 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 810d658:	687b      	ldr	r3, [r7, #4]
 810d65a:	2b00      	cmp	r3, #0
 810d65c:	d102      	bne.n	810d664 <xQueueGenericCreateStatic+0x84>
 810d65e:	68bb      	ldr	r3, [r7, #8]
 810d660:	2b00      	cmp	r3, #0
 810d662:	d101      	bne.n	810d668 <xQueueGenericCreateStatic+0x88>
 810d664:	2301      	movs	r3, #1
 810d666:	e000      	b.n	810d66a <xQueueGenericCreateStatic+0x8a>
 810d668:	2300      	movs	r3, #0
 810d66a:	2b00      	cmp	r3, #0
 810d66c:	d10b      	bne.n	810d686 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 810d66e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d672:	f383 8811 	msr	BASEPRI, r3
 810d676:	f3bf 8f6f 	isb	sy
 810d67a:	f3bf 8f4f 	dsb	sy
 810d67e:	61fb      	str	r3, [r7, #28]
}
 810d680:	bf00      	nop
 810d682:	bf00      	nop
 810d684:	e7fd      	b.n	810d682 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 810d686:	2350      	movs	r3, #80	@ 0x50
 810d688:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 810d68a:	697b      	ldr	r3, [r7, #20]
 810d68c:	2b50      	cmp	r3, #80	@ 0x50
 810d68e:	d00b      	beq.n	810d6a8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 810d690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d694:	f383 8811 	msr	BASEPRI, r3
 810d698:	f3bf 8f6f 	isb	sy
 810d69c:	f3bf 8f4f 	dsb	sy
 810d6a0:	61bb      	str	r3, [r7, #24]
}
 810d6a2:	bf00      	nop
 810d6a4:	bf00      	nop
 810d6a6:	e7fd      	b.n	810d6a4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 810d6a8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810d6aa:	683b      	ldr	r3, [r7, #0]
 810d6ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 810d6ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d6b0:	2b00      	cmp	r3, #0
 810d6b2:	d00d      	beq.n	810d6d0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 810d6b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d6b6:	2201      	movs	r2, #1
 810d6b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810d6bc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 810d6c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d6c2:	9300      	str	r3, [sp, #0]
 810d6c4:	4613      	mov	r3, r2
 810d6c6:	687a      	ldr	r2, [r7, #4]
 810d6c8:	68b9      	ldr	r1, [r7, #8]
 810d6ca:	68f8      	ldr	r0, [r7, #12]
 810d6cc:	f000 f840 	bl	810d750 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 810d6d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 810d6d2:	4618      	mov	r0, r3
 810d6d4:	3730      	adds	r7, #48	@ 0x30
 810d6d6:	46bd      	mov	sp, r7
 810d6d8:	bd80      	pop	{r7, pc}

0810d6da <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 810d6da:	b580      	push	{r7, lr}
 810d6dc:	b08a      	sub	sp, #40	@ 0x28
 810d6de:	af02      	add	r7, sp, #8
 810d6e0:	60f8      	str	r0, [r7, #12]
 810d6e2:	60b9      	str	r1, [r7, #8]
 810d6e4:	4613      	mov	r3, r2
 810d6e6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810d6e8:	68fb      	ldr	r3, [r7, #12]
 810d6ea:	2b00      	cmp	r3, #0
 810d6ec:	d10b      	bne.n	810d706 <xQueueGenericCreate+0x2c>
	__asm volatile
 810d6ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d6f2:	f383 8811 	msr	BASEPRI, r3
 810d6f6:	f3bf 8f6f 	isb	sy
 810d6fa:	f3bf 8f4f 	dsb	sy
 810d6fe:	613b      	str	r3, [r7, #16]
}
 810d700:	bf00      	nop
 810d702:	bf00      	nop
 810d704:	e7fd      	b.n	810d702 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810d706:	68fb      	ldr	r3, [r7, #12]
 810d708:	68ba      	ldr	r2, [r7, #8]
 810d70a:	fb02 f303 	mul.w	r3, r2, r3
 810d70e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 810d710:	69fb      	ldr	r3, [r7, #28]
 810d712:	3350      	adds	r3, #80	@ 0x50
 810d714:	4618      	mov	r0, r3
 810d716:	f7ff fa01 	bl	810cb1c <pvPortMalloc>
 810d71a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 810d71c:	69bb      	ldr	r3, [r7, #24]
 810d71e:	2b00      	cmp	r3, #0
 810d720:	d011      	beq.n	810d746 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 810d722:	69bb      	ldr	r3, [r7, #24]
 810d724:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810d726:	697b      	ldr	r3, [r7, #20]
 810d728:	3350      	adds	r3, #80	@ 0x50
 810d72a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 810d72c:	69bb      	ldr	r3, [r7, #24]
 810d72e:	2200      	movs	r2, #0
 810d730:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810d734:	79fa      	ldrb	r2, [r7, #7]
 810d736:	69bb      	ldr	r3, [r7, #24]
 810d738:	9300      	str	r3, [sp, #0]
 810d73a:	4613      	mov	r3, r2
 810d73c:	697a      	ldr	r2, [r7, #20]
 810d73e:	68b9      	ldr	r1, [r7, #8]
 810d740:	68f8      	ldr	r0, [r7, #12]
 810d742:	f000 f805 	bl	810d750 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 810d746:	69bb      	ldr	r3, [r7, #24]
	}
 810d748:	4618      	mov	r0, r3
 810d74a:	3720      	adds	r7, #32
 810d74c:	46bd      	mov	sp, r7
 810d74e:	bd80      	pop	{r7, pc}

0810d750 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 810d750:	b580      	push	{r7, lr}
 810d752:	b084      	sub	sp, #16
 810d754:	af00      	add	r7, sp, #0
 810d756:	60f8      	str	r0, [r7, #12]
 810d758:	60b9      	str	r1, [r7, #8]
 810d75a:	607a      	str	r2, [r7, #4]
 810d75c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 810d75e:	68bb      	ldr	r3, [r7, #8]
 810d760:	2b00      	cmp	r3, #0
 810d762:	d103      	bne.n	810d76c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 810d764:	69bb      	ldr	r3, [r7, #24]
 810d766:	69ba      	ldr	r2, [r7, #24]
 810d768:	601a      	str	r2, [r3, #0]
 810d76a:	e002      	b.n	810d772 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 810d76c:	69bb      	ldr	r3, [r7, #24]
 810d76e:	687a      	ldr	r2, [r7, #4]
 810d770:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 810d772:	69bb      	ldr	r3, [r7, #24]
 810d774:	68fa      	ldr	r2, [r7, #12]
 810d776:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 810d778:	69bb      	ldr	r3, [r7, #24]
 810d77a:	68ba      	ldr	r2, [r7, #8]
 810d77c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 810d77e:	2101      	movs	r1, #1
 810d780:	69b8      	ldr	r0, [r7, #24]
 810d782:	f7ff fec3 	bl	810d50c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 810d786:	69bb      	ldr	r3, [r7, #24]
 810d788:	78fa      	ldrb	r2, [r7, #3]
 810d78a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 810d78e:	bf00      	nop
 810d790:	3710      	adds	r7, #16
 810d792:	46bd      	mov	sp, r7
 810d794:	bd80      	pop	{r7, pc}

0810d796 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 810d796:	b580      	push	{r7, lr}
 810d798:	b082      	sub	sp, #8
 810d79a:	af00      	add	r7, sp, #0
 810d79c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 810d79e:	687b      	ldr	r3, [r7, #4]
 810d7a0:	2b00      	cmp	r3, #0
 810d7a2:	d00e      	beq.n	810d7c2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 810d7a4:	687b      	ldr	r3, [r7, #4]
 810d7a6:	2200      	movs	r2, #0
 810d7a8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 810d7aa:	687b      	ldr	r3, [r7, #4]
 810d7ac:	2200      	movs	r2, #0
 810d7ae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 810d7b0:	687b      	ldr	r3, [r7, #4]
 810d7b2:	2200      	movs	r2, #0
 810d7b4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 810d7b6:	2300      	movs	r3, #0
 810d7b8:	2200      	movs	r2, #0
 810d7ba:	2100      	movs	r1, #0
 810d7bc:	6878      	ldr	r0, [r7, #4]
 810d7be:	f000 f911 	bl	810d9e4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 810d7c2:	bf00      	nop
 810d7c4:	3708      	adds	r7, #8
 810d7c6:	46bd      	mov	sp, r7
 810d7c8:	bd80      	pop	{r7, pc}

0810d7ca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 810d7ca:	b580      	push	{r7, lr}
 810d7cc:	b086      	sub	sp, #24
 810d7ce:	af00      	add	r7, sp, #0
 810d7d0:	4603      	mov	r3, r0
 810d7d2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 810d7d4:	2301      	movs	r3, #1
 810d7d6:	617b      	str	r3, [r7, #20]
 810d7d8:	2300      	movs	r3, #0
 810d7da:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 810d7dc:	79fb      	ldrb	r3, [r7, #7]
 810d7de:	461a      	mov	r2, r3
 810d7e0:	6939      	ldr	r1, [r7, #16]
 810d7e2:	6978      	ldr	r0, [r7, #20]
 810d7e4:	f7ff ff79 	bl	810d6da <xQueueGenericCreate>
 810d7e8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 810d7ea:	68f8      	ldr	r0, [r7, #12]
 810d7ec:	f7ff ffd3 	bl	810d796 <prvInitialiseMutex>

		return xNewQueue;
 810d7f0:	68fb      	ldr	r3, [r7, #12]
	}
 810d7f2:	4618      	mov	r0, r3
 810d7f4:	3718      	adds	r7, #24
 810d7f6:	46bd      	mov	sp, r7
 810d7f8:	bd80      	pop	{r7, pc}

0810d7fa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 810d7fa:	b580      	push	{r7, lr}
 810d7fc:	b088      	sub	sp, #32
 810d7fe:	af02      	add	r7, sp, #8
 810d800:	4603      	mov	r3, r0
 810d802:	6039      	str	r1, [r7, #0]
 810d804:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 810d806:	2301      	movs	r3, #1
 810d808:	617b      	str	r3, [r7, #20]
 810d80a:	2300      	movs	r3, #0
 810d80c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 810d80e:	79fb      	ldrb	r3, [r7, #7]
 810d810:	9300      	str	r3, [sp, #0]
 810d812:	683b      	ldr	r3, [r7, #0]
 810d814:	2200      	movs	r2, #0
 810d816:	6939      	ldr	r1, [r7, #16]
 810d818:	6978      	ldr	r0, [r7, #20]
 810d81a:	f7ff fee1 	bl	810d5e0 <xQueueGenericCreateStatic>
 810d81e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 810d820:	68f8      	ldr	r0, [r7, #12]
 810d822:	f7ff ffb8 	bl	810d796 <prvInitialiseMutex>

		return xNewQueue;
 810d826:	68fb      	ldr	r3, [r7, #12]
	}
 810d828:	4618      	mov	r0, r3
 810d82a:	3718      	adds	r7, #24
 810d82c:	46bd      	mov	sp, r7
 810d82e:	bd80      	pop	{r7, pc}

0810d830 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 810d830:	b590      	push	{r4, r7, lr}
 810d832:	b087      	sub	sp, #28
 810d834:	af00      	add	r7, sp, #0
 810d836:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 810d838:	687b      	ldr	r3, [r7, #4]
 810d83a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 810d83c:	693b      	ldr	r3, [r7, #16]
 810d83e:	2b00      	cmp	r3, #0
 810d840:	d10b      	bne.n	810d85a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 810d842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d846:	f383 8811 	msr	BASEPRI, r3
 810d84a:	f3bf 8f6f 	isb	sy
 810d84e:	f3bf 8f4f 	dsb	sy
 810d852:	60fb      	str	r3, [r7, #12]
}
 810d854:	bf00      	nop
 810d856:	bf00      	nop
 810d858:	e7fd      	b.n	810d856 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 810d85a:	693b      	ldr	r3, [r7, #16]
 810d85c:	689c      	ldr	r4, [r3, #8]
 810d85e:	f002 f9f5 	bl	810fc4c <xTaskGetCurrentTaskHandle>
 810d862:	4603      	mov	r3, r0
 810d864:	429c      	cmp	r4, r3
 810d866:	d111      	bne.n	810d88c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 810d868:	693b      	ldr	r3, [r7, #16]
 810d86a:	68db      	ldr	r3, [r3, #12]
 810d86c:	1e5a      	subs	r2, r3, #1
 810d86e:	693b      	ldr	r3, [r7, #16]
 810d870:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 810d872:	693b      	ldr	r3, [r7, #16]
 810d874:	68db      	ldr	r3, [r3, #12]
 810d876:	2b00      	cmp	r3, #0
 810d878:	d105      	bne.n	810d886 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 810d87a:	2300      	movs	r3, #0
 810d87c:	2200      	movs	r2, #0
 810d87e:	2100      	movs	r1, #0
 810d880:	6938      	ldr	r0, [r7, #16]
 810d882:	f000 f8af 	bl	810d9e4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 810d886:	2301      	movs	r3, #1
 810d888:	617b      	str	r3, [r7, #20]
 810d88a:	e001      	b.n	810d890 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 810d88c:	2300      	movs	r3, #0
 810d88e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 810d890:	697b      	ldr	r3, [r7, #20]
	}
 810d892:	4618      	mov	r0, r3
 810d894:	371c      	adds	r7, #28
 810d896:	46bd      	mov	sp, r7
 810d898:	bd90      	pop	{r4, r7, pc}

0810d89a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 810d89a:	b590      	push	{r4, r7, lr}
 810d89c:	b087      	sub	sp, #28
 810d89e:	af00      	add	r7, sp, #0
 810d8a0:	6078      	str	r0, [r7, #4]
 810d8a2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 810d8a4:	687b      	ldr	r3, [r7, #4]
 810d8a6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 810d8a8:	693b      	ldr	r3, [r7, #16]
 810d8aa:	2b00      	cmp	r3, #0
 810d8ac:	d10b      	bne.n	810d8c6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 810d8ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d8b2:	f383 8811 	msr	BASEPRI, r3
 810d8b6:	f3bf 8f6f 	isb	sy
 810d8ba:	f3bf 8f4f 	dsb	sy
 810d8be:	60fb      	str	r3, [r7, #12]
}
 810d8c0:	bf00      	nop
 810d8c2:	bf00      	nop
 810d8c4:	e7fd      	b.n	810d8c2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 810d8c6:	693b      	ldr	r3, [r7, #16]
 810d8c8:	689c      	ldr	r4, [r3, #8]
 810d8ca:	f002 f9bf 	bl	810fc4c <xTaskGetCurrentTaskHandle>
 810d8ce:	4603      	mov	r3, r0
 810d8d0:	429c      	cmp	r4, r3
 810d8d2:	d107      	bne.n	810d8e4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 810d8d4:	693b      	ldr	r3, [r7, #16]
 810d8d6:	68db      	ldr	r3, [r3, #12]
 810d8d8:	1c5a      	adds	r2, r3, #1
 810d8da:	693b      	ldr	r3, [r7, #16]
 810d8dc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 810d8de:	2301      	movs	r3, #1
 810d8e0:	617b      	str	r3, [r7, #20]
 810d8e2:	e00c      	b.n	810d8fe <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 810d8e4:	6839      	ldr	r1, [r7, #0]
 810d8e6:	6938      	ldr	r0, [r7, #16]
 810d8e8:	f000 fb8e 	bl	810e008 <xQueueSemaphoreTake>
 810d8ec:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 810d8ee:	697b      	ldr	r3, [r7, #20]
 810d8f0:	2b00      	cmp	r3, #0
 810d8f2:	d004      	beq.n	810d8fe <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 810d8f4:	693b      	ldr	r3, [r7, #16]
 810d8f6:	68db      	ldr	r3, [r3, #12]
 810d8f8:	1c5a      	adds	r2, r3, #1
 810d8fa:	693b      	ldr	r3, [r7, #16]
 810d8fc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 810d8fe:	697b      	ldr	r3, [r7, #20]
	}
 810d900:	4618      	mov	r0, r3
 810d902:	371c      	adds	r7, #28
 810d904:	46bd      	mov	sp, r7
 810d906:	bd90      	pop	{r4, r7, pc}

0810d908 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 810d908:	b580      	push	{r7, lr}
 810d90a:	b08a      	sub	sp, #40	@ 0x28
 810d90c:	af02      	add	r7, sp, #8
 810d90e:	60f8      	str	r0, [r7, #12]
 810d910:	60b9      	str	r1, [r7, #8]
 810d912:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 810d914:	68fb      	ldr	r3, [r7, #12]
 810d916:	2b00      	cmp	r3, #0
 810d918:	d10b      	bne.n	810d932 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 810d91a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d91e:	f383 8811 	msr	BASEPRI, r3
 810d922:	f3bf 8f6f 	isb	sy
 810d926:	f3bf 8f4f 	dsb	sy
 810d92a:	61bb      	str	r3, [r7, #24]
}
 810d92c:	bf00      	nop
 810d92e:	bf00      	nop
 810d930:	e7fd      	b.n	810d92e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 810d932:	68ba      	ldr	r2, [r7, #8]
 810d934:	68fb      	ldr	r3, [r7, #12]
 810d936:	429a      	cmp	r2, r3
 810d938:	d90b      	bls.n	810d952 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 810d93a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d93e:	f383 8811 	msr	BASEPRI, r3
 810d942:	f3bf 8f6f 	isb	sy
 810d946:	f3bf 8f4f 	dsb	sy
 810d94a:	617b      	str	r3, [r7, #20]
}
 810d94c:	bf00      	nop
 810d94e:	bf00      	nop
 810d950:	e7fd      	b.n	810d94e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 810d952:	2302      	movs	r3, #2
 810d954:	9300      	str	r3, [sp, #0]
 810d956:	687b      	ldr	r3, [r7, #4]
 810d958:	2200      	movs	r2, #0
 810d95a:	2100      	movs	r1, #0
 810d95c:	68f8      	ldr	r0, [r7, #12]
 810d95e:	f7ff fe3f 	bl	810d5e0 <xQueueGenericCreateStatic>
 810d962:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 810d964:	69fb      	ldr	r3, [r7, #28]
 810d966:	2b00      	cmp	r3, #0
 810d968:	d002      	beq.n	810d970 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 810d96a:	69fb      	ldr	r3, [r7, #28]
 810d96c:	68ba      	ldr	r2, [r7, #8]
 810d96e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 810d970:	69fb      	ldr	r3, [r7, #28]
	}
 810d972:	4618      	mov	r0, r3
 810d974:	3720      	adds	r7, #32
 810d976:	46bd      	mov	sp, r7
 810d978:	bd80      	pop	{r7, pc}

0810d97a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 810d97a:	b580      	push	{r7, lr}
 810d97c:	b086      	sub	sp, #24
 810d97e:	af00      	add	r7, sp, #0
 810d980:	6078      	str	r0, [r7, #4]
 810d982:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 810d984:	687b      	ldr	r3, [r7, #4]
 810d986:	2b00      	cmp	r3, #0
 810d988:	d10b      	bne.n	810d9a2 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 810d98a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d98e:	f383 8811 	msr	BASEPRI, r3
 810d992:	f3bf 8f6f 	isb	sy
 810d996:	f3bf 8f4f 	dsb	sy
 810d99a:	613b      	str	r3, [r7, #16]
}
 810d99c:	bf00      	nop
 810d99e:	bf00      	nop
 810d9a0:	e7fd      	b.n	810d99e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 810d9a2:	683a      	ldr	r2, [r7, #0]
 810d9a4:	687b      	ldr	r3, [r7, #4]
 810d9a6:	429a      	cmp	r2, r3
 810d9a8:	d90b      	bls.n	810d9c2 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 810d9aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d9ae:	f383 8811 	msr	BASEPRI, r3
 810d9b2:	f3bf 8f6f 	isb	sy
 810d9b6:	f3bf 8f4f 	dsb	sy
 810d9ba:	60fb      	str	r3, [r7, #12]
}
 810d9bc:	bf00      	nop
 810d9be:	bf00      	nop
 810d9c0:	e7fd      	b.n	810d9be <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 810d9c2:	2202      	movs	r2, #2
 810d9c4:	2100      	movs	r1, #0
 810d9c6:	6878      	ldr	r0, [r7, #4]
 810d9c8:	f7ff fe87 	bl	810d6da <xQueueGenericCreate>
 810d9cc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 810d9ce:	697b      	ldr	r3, [r7, #20]
 810d9d0:	2b00      	cmp	r3, #0
 810d9d2:	d002      	beq.n	810d9da <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 810d9d4:	697b      	ldr	r3, [r7, #20]
 810d9d6:	683a      	ldr	r2, [r7, #0]
 810d9d8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 810d9da:	697b      	ldr	r3, [r7, #20]
	}
 810d9dc:	4618      	mov	r0, r3
 810d9de:	3718      	adds	r7, #24
 810d9e0:	46bd      	mov	sp, r7
 810d9e2:	bd80      	pop	{r7, pc}

0810d9e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 810d9e4:	b580      	push	{r7, lr}
 810d9e6:	b08e      	sub	sp, #56	@ 0x38
 810d9e8:	af00      	add	r7, sp, #0
 810d9ea:	60f8      	str	r0, [r7, #12]
 810d9ec:	60b9      	str	r1, [r7, #8]
 810d9ee:	607a      	str	r2, [r7, #4]
 810d9f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 810d9f2:	2300      	movs	r3, #0
 810d9f4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810d9f6:	68fb      	ldr	r3, [r7, #12]
 810d9f8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 810d9fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d9fc:	2b00      	cmp	r3, #0
 810d9fe:	d10b      	bne.n	810da18 <xQueueGenericSend+0x34>
	__asm volatile
 810da00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810da04:	f383 8811 	msr	BASEPRI, r3
 810da08:	f3bf 8f6f 	isb	sy
 810da0c:	f3bf 8f4f 	dsb	sy
 810da10:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810da12:	bf00      	nop
 810da14:	bf00      	nop
 810da16:	e7fd      	b.n	810da14 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810da18:	68bb      	ldr	r3, [r7, #8]
 810da1a:	2b00      	cmp	r3, #0
 810da1c:	d103      	bne.n	810da26 <xQueueGenericSend+0x42>
 810da1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810da20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810da22:	2b00      	cmp	r3, #0
 810da24:	d101      	bne.n	810da2a <xQueueGenericSend+0x46>
 810da26:	2301      	movs	r3, #1
 810da28:	e000      	b.n	810da2c <xQueueGenericSend+0x48>
 810da2a:	2300      	movs	r3, #0
 810da2c:	2b00      	cmp	r3, #0
 810da2e:	d10b      	bne.n	810da48 <xQueueGenericSend+0x64>
	__asm volatile
 810da30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810da34:	f383 8811 	msr	BASEPRI, r3
 810da38:	f3bf 8f6f 	isb	sy
 810da3c:	f3bf 8f4f 	dsb	sy
 810da40:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810da42:	bf00      	nop
 810da44:	bf00      	nop
 810da46:	e7fd      	b.n	810da44 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810da48:	683b      	ldr	r3, [r7, #0]
 810da4a:	2b02      	cmp	r3, #2
 810da4c:	d103      	bne.n	810da56 <xQueueGenericSend+0x72>
 810da4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810da50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810da52:	2b01      	cmp	r3, #1
 810da54:	d101      	bne.n	810da5a <xQueueGenericSend+0x76>
 810da56:	2301      	movs	r3, #1
 810da58:	e000      	b.n	810da5c <xQueueGenericSend+0x78>
 810da5a:	2300      	movs	r3, #0
 810da5c:	2b00      	cmp	r3, #0
 810da5e:	d10b      	bne.n	810da78 <xQueueGenericSend+0x94>
	__asm volatile
 810da60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810da64:	f383 8811 	msr	BASEPRI, r3
 810da68:	f3bf 8f6f 	isb	sy
 810da6c:	f3bf 8f4f 	dsb	sy
 810da70:	623b      	str	r3, [r7, #32]
}
 810da72:	bf00      	nop
 810da74:	bf00      	nop
 810da76:	e7fd      	b.n	810da74 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810da78:	f002 f8f8 	bl	810fc6c <xTaskGetSchedulerState>
 810da7c:	4603      	mov	r3, r0
 810da7e:	2b00      	cmp	r3, #0
 810da80:	d102      	bne.n	810da88 <xQueueGenericSend+0xa4>
 810da82:	687b      	ldr	r3, [r7, #4]
 810da84:	2b00      	cmp	r3, #0
 810da86:	d101      	bne.n	810da8c <xQueueGenericSend+0xa8>
 810da88:	2301      	movs	r3, #1
 810da8a:	e000      	b.n	810da8e <xQueueGenericSend+0xaa>
 810da8c:	2300      	movs	r3, #0
 810da8e:	2b00      	cmp	r3, #0
 810da90:	d10b      	bne.n	810daaa <xQueueGenericSend+0xc6>
	__asm volatile
 810da92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810da96:	f383 8811 	msr	BASEPRI, r3
 810da9a:	f3bf 8f6f 	isb	sy
 810da9e:	f3bf 8f4f 	dsb	sy
 810daa2:	61fb      	str	r3, [r7, #28]
}
 810daa4:	bf00      	nop
 810daa6:	bf00      	nop
 810daa8:	e7fd      	b.n	810daa6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810daaa:	f7ff fc0d 	bl	810d2c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810daae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dab0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810dab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810dab6:	429a      	cmp	r2, r3
 810dab8:	d302      	bcc.n	810dac0 <xQueueGenericSend+0xdc>
 810daba:	683b      	ldr	r3, [r7, #0]
 810dabc:	2b02      	cmp	r3, #2
 810dabe:	d129      	bne.n	810db14 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810dac0:	683a      	ldr	r2, [r7, #0]
 810dac2:	68b9      	ldr	r1, [r7, #8]
 810dac4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810dac6:	f000 fc6d 	bl	810e3a4 <prvCopyDataToQueue>
 810daca:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810dacc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810dad0:	2b00      	cmp	r3, #0
 810dad2:	d010      	beq.n	810daf6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810dad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dad6:	3324      	adds	r3, #36	@ 0x24
 810dad8:	4618      	mov	r0, r3
 810dada:	f001 fec9 	bl	810f870 <xTaskRemoveFromEventList>
 810dade:	4603      	mov	r3, r0
 810dae0:	2b00      	cmp	r3, #0
 810dae2:	d013      	beq.n	810db0c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 810dae4:	4b3f      	ldr	r3, [pc, #252]	@ (810dbe4 <xQueueGenericSend+0x200>)
 810dae6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810daea:	601a      	str	r2, [r3, #0]
 810daec:	f3bf 8f4f 	dsb	sy
 810daf0:	f3bf 8f6f 	isb	sy
 810daf4:	e00a      	b.n	810db0c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 810daf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810daf8:	2b00      	cmp	r3, #0
 810dafa:	d007      	beq.n	810db0c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 810dafc:	4b39      	ldr	r3, [pc, #228]	@ (810dbe4 <xQueueGenericSend+0x200>)
 810dafe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810db02:	601a      	str	r2, [r3, #0]
 810db04:	f3bf 8f4f 	dsb	sy
 810db08:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 810db0c:	f7ff fc0e 	bl	810d32c <vPortExitCritical>
				return pdPASS;
 810db10:	2301      	movs	r3, #1
 810db12:	e063      	b.n	810dbdc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810db14:	687b      	ldr	r3, [r7, #4]
 810db16:	2b00      	cmp	r3, #0
 810db18:	d103      	bne.n	810db22 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810db1a:	f7ff fc07 	bl	810d32c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 810db1e:	2300      	movs	r3, #0
 810db20:	e05c      	b.n	810dbdc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 810db22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810db24:	2b00      	cmp	r3, #0
 810db26:	d106      	bne.n	810db36 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810db28:	f107 0314 	add.w	r3, r7, #20
 810db2c:	4618      	mov	r0, r3
 810db2e:	f001 ff2b 	bl	810f988 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810db32:	2301      	movs	r3, #1
 810db34:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810db36:	f7ff fbf9 	bl	810d32c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810db3a:	f001 fc59 	bl	810f3f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810db3e:	f7ff fbc3 	bl	810d2c8 <vPortEnterCritical>
 810db42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810db48:	b25b      	sxtb	r3, r3
 810db4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810db4e:	d103      	bne.n	810db58 <xQueueGenericSend+0x174>
 810db50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db52:	2200      	movs	r2, #0
 810db54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810db58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810db5e:	b25b      	sxtb	r3, r3
 810db60:	f1b3 3fff 	cmp.w	r3, #4294967295
 810db64:	d103      	bne.n	810db6e <xQueueGenericSend+0x18a>
 810db66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db68:	2200      	movs	r2, #0
 810db6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810db6e:	f7ff fbdd 	bl	810d32c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810db72:	1d3a      	adds	r2, r7, #4
 810db74:	f107 0314 	add.w	r3, r7, #20
 810db78:	4611      	mov	r1, r2
 810db7a:	4618      	mov	r0, r3
 810db7c:	f001 ff1a 	bl	810f9b4 <xTaskCheckForTimeOut>
 810db80:	4603      	mov	r3, r0
 810db82:	2b00      	cmp	r3, #0
 810db84:	d124      	bne.n	810dbd0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 810db86:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810db88:	f000 fd04 	bl	810e594 <prvIsQueueFull>
 810db8c:	4603      	mov	r3, r0
 810db8e:	2b00      	cmp	r3, #0
 810db90:	d018      	beq.n	810dbc4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 810db92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810db94:	3310      	adds	r3, #16
 810db96:	687a      	ldr	r2, [r7, #4]
 810db98:	4611      	mov	r1, r2
 810db9a:	4618      	mov	r0, r3
 810db9c:	f001 fe16 	bl	810f7cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 810dba0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810dba2:	f000 fc8f 	bl	810e4c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 810dba6:	f001 fc31 	bl	810f40c <xTaskResumeAll>
 810dbaa:	4603      	mov	r3, r0
 810dbac:	2b00      	cmp	r3, #0
 810dbae:	f47f af7c 	bne.w	810daaa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 810dbb2:	4b0c      	ldr	r3, [pc, #48]	@ (810dbe4 <xQueueGenericSend+0x200>)
 810dbb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810dbb8:	601a      	str	r2, [r3, #0]
 810dbba:	f3bf 8f4f 	dsb	sy
 810dbbe:	f3bf 8f6f 	isb	sy
 810dbc2:	e772      	b.n	810daaa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 810dbc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810dbc6:	f000 fc7d 	bl	810e4c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810dbca:	f001 fc1f 	bl	810f40c <xTaskResumeAll>
 810dbce:	e76c      	b.n	810daaa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 810dbd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810dbd2:	f000 fc77 	bl	810e4c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810dbd6:	f001 fc19 	bl	810f40c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 810dbda:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 810dbdc:	4618      	mov	r0, r3
 810dbde:	3738      	adds	r7, #56	@ 0x38
 810dbe0:	46bd      	mov	sp, r7
 810dbe2:	bd80      	pop	{r7, pc}
 810dbe4:	e000ed04 	.word	0xe000ed04

0810dbe8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 810dbe8:	b580      	push	{r7, lr}
 810dbea:	b090      	sub	sp, #64	@ 0x40
 810dbec:	af00      	add	r7, sp, #0
 810dbee:	60f8      	str	r0, [r7, #12]
 810dbf0:	60b9      	str	r1, [r7, #8]
 810dbf2:	607a      	str	r2, [r7, #4]
 810dbf4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810dbf6:	68fb      	ldr	r3, [r7, #12]
 810dbf8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 810dbfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810dbfc:	2b00      	cmp	r3, #0
 810dbfe:	d10b      	bne.n	810dc18 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 810dc00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810dc04:	f383 8811 	msr	BASEPRI, r3
 810dc08:	f3bf 8f6f 	isb	sy
 810dc0c:	f3bf 8f4f 	dsb	sy
 810dc10:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810dc12:	bf00      	nop
 810dc14:	bf00      	nop
 810dc16:	e7fd      	b.n	810dc14 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810dc18:	68bb      	ldr	r3, [r7, #8]
 810dc1a:	2b00      	cmp	r3, #0
 810dc1c:	d103      	bne.n	810dc26 <xQueueGenericSendFromISR+0x3e>
 810dc1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810dc20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810dc22:	2b00      	cmp	r3, #0
 810dc24:	d101      	bne.n	810dc2a <xQueueGenericSendFromISR+0x42>
 810dc26:	2301      	movs	r3, #1
 810dc28:	e000      	b.n	810dc2c <xQueueGenericSendFromISR+0x44>
 810dc2a:	2300      	movs	r3, #0
 810dc2c:	2b00      	cmp	r3, #0
 810dc2e:	d10b      	bne.n	810dc48 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 810dc30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810dc34:	f383 8811 	msr	BASEPRI, r3
 810dc38:	f3bf 8f6f 	isb	sy
 810dc3c:	f3bf 8f4f 	dsb	sy
 810dc40:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810dc42:	bf00      	nop
 810dc44:	bf00      	nop
 810dc46:	e7fd      	b.n	810dc44 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810dc48:	683b      	ldr	r3, [r7, #0]
 810dc4a:	2b02      	cmp	r3, #2
 810dc4c:	d103      	bne.n	810dc56 <xQueueGenericSendFromISR+0x6e>
 810dc4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810dc50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810dc52:	2b01      	cmp	r3, #1
 810dc54:	d101      	bne.n	810dc5a <xQueueGenericSendFromISR+0x72>
 810dc56:	2301      	movs	r3, #1
 810dc58:	e000      	b.n	810dc5c <xQueueGenericSendFromISR+0x74>
 810dc5a:	2300      	movs	r3, #0
 810dc5c:	2b00      	cmp	r3, #0
 810dc5e:	d10b      	bne.n	810dc78 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 810dc60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810dc64:	f383 8811 	msr	BASEPRI, r3
 810dc68:	f3bf 8f6f 	isb	sy
 810dc6c:	f3bf 8f4f 	dsb	sy
 810dc70:	623b      	str	r3, [r7, #32]
}
 810dc72:	bf00      	nop
 810dc74:	bf00      	nop
 810dc76:	e7fd      	b.n	810dc74 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810dc78:	f7ff fc06 	bl	810d488 <vPortValidateInterruptPriority>
	__asm volatile
 810dc7c:	f3ef 8211 	mrs	r2, BASEPRI
 810dc80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810dc84:	f383 8811 	msr	BASEPRI, r3
 810dc88:	f3bf 8f6f 	isb	sy
 810dc8c:	f3bf 8f4f 	dsb	sy
 810dc90:	61fa      	str	r2, [r7, #28]
 810dc92:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 810dc94:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810dc96:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810dc98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810dc9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810dc9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810dc9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810dca0:	429a      	cmp	r2, r3
 810dca2:	d302      	bcc.n	810dcaa <xQueueGenericSendFromISR+0xc2>
 810dca4:	683b      	ldr	r3, [r7, #0]
 810dca6:	2b02      	cmp	r3, #2
 810dca8:	d12f      	bne.n	810dd0a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 810dcaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810dcac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810dcb0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 810dcb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810dcb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810dcb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810dcba:	683a      	ldr	r2, [r7, #0]
 810dcbc:	68b9      	ldr	r1, [r7, #8]
 810dcbe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 810dcc0:	f000 fb70 	bl	810e3a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 810dcc4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 810dcc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 810dccc:	d112      	bne.n	810dcf4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810dcce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810dcd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810dcd2:	2b00      	cmp	r3, #0
 810dcd4:	d016      	beq.n	810dd04 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810dcd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810dcd8:	3324      	adds	r3, #36	@ 0x24
 810dcda:	4618      	mov	r0, r3
 810dcdc:	f001 fdc8 	bl	810f870 <xTaskRemoveFromEventList>
 810dce0:	4603      	mov	r3, r0
 810dce2:	2b00      	cmp	r3, #0
 810dce4:	d00e      	beq.n	810dd04 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 810dce6:	687b      	ldr	r3, [r7, #4]
 810dce8:	2b00      	cmp	r3, #0
 810dcea:	d00b      	beq.n	810dd04 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 810dcec:	687b      	ldr	r3, [r7, #4]
 810dcee:	2201      	movs	r2, #1
 810dcf0:	601a      	str	r2, [r3, #0]
 810dcf2:	e007      	b.n	810dd04 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 810dcf4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 810dcf8:	3301      	adds	r3, #1
 810dcfa:	b2db      	uxtb	r3, r3
 810dcfc:	b25a      	sxtb	r2, r3
 810dcfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810dd00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 810dd04:	2301      	movs	r3, #1
 810dd06:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 810dd08:	e001      	b.n	810dd0e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 810dd0a:	2300      	movs	r3, #0
 810dd0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810dd0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810dd10:	617b      	str	r3, [r7, #20]
	__asm volatile
 810dd12:	697b      	ldr	r3, [r7, #20]
 810dd14:	f383 8811 	msr	BASEPRI, r3
}
 810dd18:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810dd1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 810dd1c:	4618      	mov	r0, r3
 810dd1e:	3740      	adds	r7, #64	@ 0x40
 810dd20:	46bd      	mov	sp, r7
 810dd22:	bd80      	pop	{r7, pc}

0810dd24 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 810dd24:	b580      	push	{r7, lr}
 810dd26:	b08e      	sub	sp, #56	@ 0x38
 810dd28:	af00      	add	r7, sp, #0
 810dd2a:	6078      	str	r0, [r7, #4]
 810dd2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810dd2e:	687b      	ldr	r3, [r7, #4]
 810dd30:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 810dd32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dd34:	2b00      	cmp	r3, #0
 810dd36:	d10b      	bne.n	810dd50 <xQueueGiveFromISR+0x2c>
	__asm volatile
 810dd38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810dd3c:	f383 8811 	msr	BASEPRI, r3
 810dd40:	f3bf 8f6f 	isb	sy
 810dd44:	f3bf 8f4f 	dsb	sy
 810dd48:	623b      	str	r3, [r7, #32]
}
 810dd4a:	bf00      	nop
 810dd4c:	bf00      	nop
 810dd4e:	e7fd      	b.n	810dd4c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 810dd50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dd52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810dd54:	2b00      	cmp	r3, #0
 810dd56:	d00b      	beq.n	810dd70 <xQueueGiveFromISR+0x4c>
	__asm volatile
 810dd58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810dd5c:	f383 8811 	msr	BASEPRI, r3
 810dd60:	f3bf 8f6f 	isb	sy
 810dd64:	f3bf 8f4f 	dsb	sy
 810dd68:	61fb      	str	r3, [r7, #28]
}
 810dd6a:	bf00      	nop
 810dd6c:	bf00      	nop
 810dd6e:	e7fd      	b.n	810dd6c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 810dd70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dd72:	681b      	ldr	r3, [r3, #0]
 810dd74:	2b00      	cmp	r3, #0
 810dd76:	d103      	bne.n	810dd80 <xQueueGiveFromISR+0x5c>
 810dd78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dd7a:	689b      	ldr	r3, [r3, #8]
 810dd7c:	2b00      	cmp	r3, #0
 810dd7e:	d101      	bne.n	810dd84 <xQueueGiveFromISR+0x60>
 810dd80:	2301      	movs	r3, #1
 810dd82:	e000      	b.n	810dd86 <xQueueGiveFromISR+0x62>
 810dd84:	2300      	movs	r3, #0
 810dd86:	2b00      	cmp	r3, #0
 810dd88:	d10b      	bne.n	810dda2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 810dd8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810dd8e:	f383 8811 	msr	BASEPRI, r3
 810dd92:	f3bf 8f6f 	isb	sy
 810dd96:	f3bf 8f4f 	dsb	sy
 810dd9a:	61bb      	str	r3, [r7, #24]
}
 810dd9c:	bf00      	nop
 810dd9e:	bf00      	nop
 810dda0:	e7fd      	b.n	810dd9e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810dda2:	f7ff fb71 	bl	810d488 <vPortValidateInterruptPriority>
	__asm volatile
 810dda6:	f3ef 8211 	mrs	r2, BASEPRI
 810ddaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ddae:	f383 8811 	msr	BASEPRI, r3
 810ddb2:	f3bf 8f6f 	isb	sy
 810ddb6:	f3bf 8f4f 	dsb	sy
 810ddba:	617a      	str	r2, [r7, #20]
 810ddbc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 810ddbe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810ddc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810ddc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ddc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810ddc6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 810ddc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ddca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810ddcc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810ddce:	429a      	cmp	r2, r3
 810ddd0:	d22b      	bcs.n	810de2a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 810ddd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ddd4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810ddd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 810dddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ddde:	1c5a      	adds	r2, r3, #1
 810dde0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810dde2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 810dde4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 810dde8:	f1b3 3fff 	cmp.w	r3, #4294967295
 810ddec:	d112      	bne.n	810de14 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810ddee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ddf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810ddf2:	2b00      	cmp	r3, #0
 810ddf4:	d016      	beq.n	810de24 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810ddf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ddf8:	3324      	adds	r3, #36	@ 0x24
 810ddfa:	4618      	mov	r0, r3
 810ddfc:	f001 fd38 	bl	810f870 <xTaskRemoveFromEventList>
 810de00:	4603      	mov	r3, r0
 810de02:	2b00      	cmp	r3, #0
 810de04:	d00e      	beq.n	810de24 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 810de06:	683b      	ldr	r3, [r7, #0]
 810de08:	2b00      	cmp	r3, #0
 810de0a:	d00b      	beq.n	810de24 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 810de0c:	683b      	ldr	r3, [r7, #0]
 810de0e:	2201      	movs	r2, #1
 810de10:	601a      	str	r2, [r3, #0]
 810de12:	e007      	b.n	810de24 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 810de14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810de18:	3301      	adds	r3, #1
 810de1a:	b2db      	uxtb	r3, r3
 810de1c:	b25a      	sxtb	r2, r3
 810de1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810de20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 810de24:	2301      	movs	r3, #1
 810de26:	637b      	str	r3, [r7, #52]	@ 0x34
 810de28:	e001      	b.n	810de2e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 810de2a:	2300      	movs	r3, #0
 810de2c:	637b      	str	r3, [r7, #52]	@ 0x34
 810de2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810de30:	60fb      	str	r3, [r7, #12]
	__asm volatile
 810de32:	68fb      	ldr	r3, [r7, #12]
 810de34:	f383 8811 	msr	BASEPRI, r3
}
 810de38:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810de3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 810de3c:	4618      	mov	r0, r3
 810de3e:	3738      	adds	r7, #56	@ 0x38
 810de40:	46bd      	mov	sp, r7
 810de42:	bd80      	pop	{r7, pc}

0810de44 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 810de44:	b580      	push	{r7, lr}
 810de46:	b08c      	sub	sp, #48	@ 0x30
 810de48:	af00      	add	r7, sp, #0
 810de4a:	60f8      	str	r0, [r7, #12]
 810de4c:	60b9      	str	r1, [r7, #8]
 810de4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 810de50:	2300      	movs	r3, #0
 810de52:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810de54:	68fb      	ldr	r3, [r7, #12]
 810de56:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 810de58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810de5a:	2b00      	cmp	r3, #0
 810de5c:	d10b      	bne.n	810de76 <xQueueReceive+0x32>
	__asm volatile
 810de5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810de62:	f383 8811 	msr	BASEPRI, r3
 810de66:	f3bf 8f6f 	isb	sy
 810de6a:	f3bf 8f4f 	dsb	sy
 810de6e:	623b      	str	r3, [r7, #32]
}
 810de70:	bf00      	nop
 810de72:	bf00      	nop
 810de74:	e7fd      	b.n	810de72 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810de76:	68bb      	ldr	r3, [r7, #8]
 810de78:	2b00      	cmp	r3, #0
 810de7a:	d103      	bne.n	810de84 <xQueueReceive+0x40>
 810de7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810de7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810de80:	2b00      	cmp	r3, #0
 810de82:	d101      	bne.n	810de88 <xQueueReceive+0x44>
 810de84:	2301      	movs	r3, #1
 810de86:	e000      	b.n	810de8a <xQueueReceive+0x46>
 810de88:	2300      	movs	r3, #0
 810de8a:	2b00      	cmp	r3, #0
 810de8c:	d10b      	bne.n	810dea6 <xQueueReceive+0x62>
	__asm volatile
 810de8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810de92:	f383 8811 	msr	BASEPRI, r3
 810de96:	f3bf 8f6f 	isb	sy
 810de9a:	f3bf 8f4f 	dsb	sy
 810de9e:	61fb      	str	r3, [r7, #28]
}
 810dea0:	bf00      	nop
 810dea2:	bf00      	nop
 810dea4:	e7fd      	b.n	810dea2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810dea6:	f001 fee1 	bl	810fc6c <xTaskGetSchedulerState>
 810deaa:	4603      	mov	r3, r0
 810deac:	2b00      	cmp	r3, #0
 810deae:	d102      	bne.n	810deb6 <xQueueReceive+0x72>
 810deb0:	687b      	ldr	r3, [r7, #4]
 810deb2:	2b00      	cmp	r3, #0
 810deb4:	d101      	bne.n	810deba <xQueueReceive+0x76>
 810deb6:	2301      	movs	r3, #1
 810deb8:	e000      	b.n	810debc <xQueueReceive+0x78>
 810deba:	2300      	movs	r3, #0
 810debc:	2b00      	cmp	r3, #0
 810debe:	d10b      	bne.n	810ded8 <xQueueReceive+0x94>
	__asm volatile
 810dec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810dec4:	f383 8811 	msr	BASEPRI, r3
 810dec8:	f3bf 8f6f 	isb	sy
 810decc:	f3bf 8f4f 	dsb	sy
 810ded0:	61bb      	str	r3, [r7, #24]
}
 810ded2:	bf00      	nop
 810ded4:	bf00      	nop
 810ded6:	e7fd      	b.n	810ded4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810ded8:	f7ff f9f6 	bl	810d2c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810dedc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810dede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810dee0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810dee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810dee4:	2b00      	cmp	r3, #0
 810dee6:	d01f      	beq.n	810df28 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 810dee8:	68b9      	ldr	r1, [r7, #8]
 810deea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810deec:	f000 fac4 	bl	810e478 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 810def0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810def2:	1e5a      	subs	r2, r3, #1
 810def4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810def6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810def8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810defa:	691b      	ldr	r3, [r3, #16]
 810defc:	2b00      	cmp	r3, #0
 810defe:	d00f      	beq.n	810df20 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810df00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810df02:	3310      	adds	r3, #16
 810df04:	4618      	mov	r0, r3
 810df06:	f001 fcb3 	bl	810f870 <xTaskRemoveFromEventList>
 810df0a:	4603      	mov	r3, r0
 810df0c:	2b00      	cmp	r3, #0
 810df0e:	d007      	beq.n	810df20 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 810df10:	4b3c      	ldr	r3, [pc, #240]	@ (810e004 <xQueueReceive+0x1c0>)
 810df12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810df16:	601a      	str	r2, [r3, #0]
 810df18:	f3bf 8f4f 	dsb	sy
 810df1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 810df20:	f7ff fa04 	bl	810d32c <vPortExitCritical>
				return pdPASS;
 810df24:	2301      	movs	r3, #1
 810df26:	e069      	b.n	810dffc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810df28:	687b      	ldr	r3, [r7, #4]
 810df2a:	2b00      	cmp	r3, #0
 810df2c:	d103      	bne.n	810df36 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810df2e:	f7ff f9fd 	bl	810d32c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 810df32:	2300      	movs	r3, #0
 810df34:	e062      	b.n	810dffc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 810df36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810df38:	2b00      	cmp	r3, #0
 810df3a:	d106      	bne.n	810df4a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810df3c:	f107 0310 	add.w	r3, r7, #16
 810df40:	4618      	mov	r0, r3
 810df42:	f001 fd21 	bl	810f988 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810df46:	2301      	movs	r3, #1
 810df48:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810df4a:	f7ff f9ef 	bl	810d32c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810df4e:	f001 fa4f 	bl	810f3f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810df52:	f7ff f9b9 	bl	810d2c8 <vPortEnterCritical>
 810df56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810df58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810df5c:	b25b      	sxtb	r3, r3
 810df5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 810df62:	d103      	bne.n	810df6c <xQueueReceive+0x128>
 810df64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810df66:	2200      	movs	r2, #0
 810df68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810df6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810df6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810df72:	b25b      	sxtb	r3, r3
 810df74:	f1b3 3fff 	cmp.w	r3, #4294967295
 810df78:	d103      	bne.n	810df82 <xQueueReceive+0x13e>
 810df7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810df7c:	2200      	movs	r2, #0
 810df7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810df82:	f7ff f9d3 	bl	810d32c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810df86:	1d3a      	adds	r2, r7, #4
 810df88:	f107 0310 	add.w	r3, r7, #16
 810df8c:	4611      	mov	r1, r2
 810df8e:	4618      	mov	r0, r3
 810df90:	f001 fd10 	bl	810f9b4 <xTaskCheckForTimeOut>
 810df94:	4603      	mov	r3, r0
 810df96:	2b00      	cmp	r3, #0
 810df98:	d123      	bne.n	810dfe2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810df9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810df9c:	f000 fae4 	bl	810e568 <prvIsQueueEmpty>
 810dfa0:	4603      	mov	r3, r0
 810dfa2:	2b00      	cmp	r3, #0
 810dfa4:	d017      	beq.n	810dfd6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 810dfa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810dfa8:	3324      	adds	r3, #36	@ 0x24
 810dfaa:	687a      	ldr	r2, [r7, #4]
 810dfac:	4611      	mov	r1, r2
 810dfae:	4618      	mov	r0, r3
 810dfb0:	f001 fc0c 	bl	810f7cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 810dfb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810dfb6:	f000 fa85 	bl	810e4c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 810dfba:	f001 fa27 	bl	810f40c <xTaskResumeAll>
 810dfbe:	4603      	mov	r3, r0
 810dfc0:	2b00      	cmp	r3, #0
 810dfc2:	d189      	bne.n	810ded8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 810dfc4:	4b0f      	ldr	r3, [pc, #60]	@ (810e004 <xQueueReceive+0x1c0>)
 810dfc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810dfca:	601a      	str	r2, [r3, #0]
 810dfcc:	f3bf 8f4f 	dsb	sy
 810dfd0:	f3bf 8f6f 	isb	sy
 810dfd4:	e780      	b.n	810ded8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 810dfd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810dfd8:	f000 fa74 	bl	810e4c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810dfdc:	f001 fa16 	bl	810f40c <xTaskResumeAll>
 810dfe0:	e77a      	b.n	810ded8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 810dfe2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810dfe4:	f000 fa6e 	bl	810e4c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810dfe8:	f001 fa10 	bl	810f40c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810dfec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810dfee:	f000 fabb 	bl	810e568 <prvIsQueueEmpty>
 810dff2:	4603      	mov	r3, r0
 810dff4:	2b00      	cmp	r3, #0
 810dff6:	f43f af6f 	beq.w	810ded8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 810dffa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 810dffc:	4618      	mov	r0, r3
 810dffe:	3730      	adds	r7, #48	@ 0x30
 810e000:	46bd      	mov	sp, r7
 810e002:	bd80      	pop	{r7, pc}
 810e004:	e000ed04 	.word	0xe000ed04

0810e008 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 810e008:	b580      	push	{r7, lr}
 810e00a:	b08e      	sub	sp, #56	@ 0x38
 810e00c:	af00      	add	r7, sp, #0
 810e00e:	6078      	str	r0, [r7, #4]
 810e010:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 810e012:	2300      	movs	r3, #0
 810e014:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810e016:	687b      	ldr	r3, [r7, #4]
 810e018:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 810e01a:	2300      	movs	r3, #0
 810e01c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 810e01e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e020:	2b00      	cmp	r3, #0
 810e022:	d10b      	bne.n	810e03c <xQueueSemaphoreTake+0x34>
	__asm volatile
 810e024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e028:	f383 8811 	msr	BASEPRI, r3
 810e02c:	f3bf 8f6f 	isb	sy
 810e030:	f3bf 8f4f 	dsb	sy
 810e034:	623b      	str	r3, [r7, #32]
}
 810e036:	bf00      	nop
 810e038:	bf00      	nop
 810e03a:	e7fd      	b.n	810e038 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 810e03c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e03e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810e040:	2b00      	cmp	r3, #0
 810e042:	d00b      	beq.n	810e05c <xQueueSemaphoreTake+0x54>
	__asm volatile
 810e044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e048:	f383 8811 	msr	BASEPRI, r3
 810e04c:	f3bf 8f6f 	isb	sy
 810e050:	f3bf 8f4f 	dsb	sy
 810e054:	61fb      	str	r3, [r7, #28]
}
 810e056:	bf00      	nop
 810e058:	bf00      	nop
 810e05a:	e7fd      	b.n	810e058 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810e05c:	f001 fe06 	bl	810fc6c <xTaskGetSchedulerState>
 810e060:	4603      	mov	r3, r0
 810e062:	2b00      	cmp	r3, #0
 810e064:	d102      	bne.n	810e06c <xQueueSemaphoreTake+0x64>
 810e066:	683b      	ldr	r3, [r7, #0]
 810e068:	2b00      	cmp	r3, #0
 810e06a:	d101      	bne.n	810e070 <xQueueSemaphoreTake+0x68>
 810e06c:	2301      	movs	r3, #1
 810e06e:	e000      	b.n	810e072 <xQueueSemaphoreTake+0x6a>
 810e070:	2300      	movs	r3, #0
 810e072:	2b00      	cmp	r3, #0
 810e074:	d10b      	bne.n	810e08e <xQueueSemaphoreTake+0x86>
	__asm volatile
 810e076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e07a:	f383 8811 	msr	BASEPRI, r3
 810e07e:	f3bf 8f6f 	isb	sy
 810e082:	f3bf 8f4f 	dsb	sy
 810e086:	61bb      	str	r3, [r7, #24]
}
 810e088:	bf00      	nop
 810e08a:	bf00      	nop
 810e08c:	e7fd      	b.n	810e08a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810e08e:	f7ff f91b 	bl	810d2c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 810e092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810e096:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 810e098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e09a:	2b00      	cmp	r3, #0
 810e09c:	d024      	beq.n	810e0e8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 810e09e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e0a0:	1e5a      	subs	r2, r3, #1
 810e0a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e0a4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810e0a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e0a8:	681b      	ldr	r3, [r3, #0]
 810e0aa:	2b00      	cmp	r3, #0
 810e0ac:	d104      	bne.n	810e0b8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 810e0ae:	f001 ff57 	bl	810ff60 <pvTaskIncrementMutexHeldCount>
 810e0b2:	4602      	mov	r2, r0
 810e0b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e0b6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810e0b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e0ba:	691b      	ldr	r3, [r3, #16]
 810e0bc:	2b00      	cmp	r3, #0
 810e0be:	d00f      	beq.n	810e0e0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810e0c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e0c2:	3310      	adds	r3, #16
 810e0c4:	4618      	mov	r0, r3
 810e0c6:	f001 fbd3 	bl	810f870 <xTaskRemoveFromEventList>
 810e0ca:	4603      	mov	r3, r0
 810e0cc:	2b00      	cmp	r3, #0
 810e0ce:	d007      	beq.n	810e0e0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 810e0d0:	4b54      	ldr	r3, [pc, #336]	@ (810e224 <xQueueSemaphoreTake+0x21c>)
 810e0d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810e0d6:	601a      	str	r2, [r3, #0]
 810e0d8:	f3bf 8f4f 	dsb	sy
 810e0dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 810e0e0:	f7ff f924 	bl	810d32c <vPortExitCritical>
				return pdPASS;
 810e0e4:	2301      	movs	r3, #1
 810e0e6:	e098      	b.n	810e21a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810e0e8:	683b      	ldr	r3, [r7, #0]
 810e0ea:	2b00      	cmp	r3, #0
 810e0ec:	d112      	bne.n	810e114 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 810e0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e0f0:	2b00      	cmp	r3, #0
 810e0f2:	d00b      	beq.n	810e10c <xQueueSemaphoreTake+0x104>
	__asm volatile
 810e0f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e0f8:	f383 8811 	msr	BASEPRI, r3
 810e0fc:	f3bf 8f6f 	isb	sy
 810e100:	f3bf 8f4f 	dsb	sy
 810e104:	617b      	str	r3, [r7, #20]
}
 810e106:	bf00      	nop
 810e108:	bf00      	nop
 810e10a:	e7fd      	b.n	810e108 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 810e10c:	f7ff f90e 	bl	810d32c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 810e110:	2300      	movs	r3, #0
 810e112:	e082      	b.n	810e21a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 810e114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e116:	2b00      	cmp	r3, #0
 810e118:	d106      	bne.n	810e128 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810e11a:	f107 030c 	add.w	r3, r7, #12
 810e11e:	4618      	mov	r0, r3
 810e120:	f001 fc32 	bl	810f988 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810e124:	2301      	movs	r3, #1
 810e126:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810e128:	f7ff f900 	bl	810d32c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 810e12c:	f001 f960 	bl	810f3f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810e130:	f7ff f8ca 	bl	810d2c8 <vPortEnterCritical>
 810e134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e136:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810e13a:	b25b      	sxtb	r3, r3
 810e13c:	f1b3 3fff 	cmp.w	r3, #4294967295
 810e140:	d103      	bne.n	810e14a <xQueueSemaphoreTake+0x142>
 810e142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e144:	2200      	movs	r2, #0
 810e146:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810e14a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e14c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810e150:	b25b      	sxtb	r3, r3
 810e152:	f1b3 3fff 	cmp.w	r3, #4294967295
 810e156:	d103      	bne.n	810e160 <xQueueSemaphoreTake+0x158>
 810e158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e15a:	2200      	movs	r2, #0
 810e15c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810e160:	f7ff f8e4 	bl	810d32c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810e164:	463a      	mov	r2, r7
 810e166:	f107 030c 	add.w	r3, r7, #12
 810e16a:	4611      	mov	r1, r2
 810e16c:	4618      	mov	r0, r3
 810e16e:	f001 fc21 	bl	810f9b4 <xTaskCheckForTimeOut>
 810e172:	4603      	mov	r3, r0
 810e174:	2b00      	cmp	r3, #0
 810e176:	d132      	bne.n	810e1de <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810e178:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810e17a:	f000 f9f5 	bl	810e568 <prvIsQueueEmpty>
 810e17e:	4603      	mov	r3, r0
 810e180:	2b00      	cmp	r3, #0
 810e182:	d026      	beq.n	810e1d2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810e184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e186:	681b      	ldr	r3, [r3, #0]
 810e188:	2b00      	cmp	r3, #0
 810e18a:	d109      	bne.n	810e1a0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 810e18c:	f7ff f89c 	bl	810d2c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 810e190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e192:	689b      	ldr	r3, [r3, #8]
 810e194:	4618      	mov	r0, r3
 810e196:	f001 fd87 	bl	810fca8 <xTaskPriorityInherit>
 810e19a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 810e19c:	f7ff f8c6 	bl	810d32c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 810e1a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e1a2:	3324      	adds	r3, #36	@ 0x24
 810e1a4:	683a      	ldr	r2, [r7, #0]
 810e1a6:	4611      	mov	r1, r2
 810e1a8:	4618      	mov	r0, r3
 810e1aa:	f001 fb0f 	bl	810f7cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 810e1ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810e1b0:	f000 f988 	bl	810e4c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 810e1b4:	f001 f92a 	bl	810f40c <xTaskResumeAll>
 810e1b8:	4603      	mov	r3, r0
 810e1ba:	2b00      	cmp	r3, #0
 810e1bc:	f47f af67 	bne.w	810e08e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 810e1c0:	4b18      	ldr	r3, [pc, #96]	@ (810e224 <xQueueSemaphoreTake+0x21c>)
 810e1c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810e1c6:	601a      	str	r2, [r3, #0]
 810e1c8:	f3bf 8f4f 	dsb	sy
 810e1cc:	f3bf 8f6f 	isb	sy
 810e1d0:	e75d      	b.n	810e08e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 810e1d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810e1d4:	f000 f976 	bl	810e4c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810e1d8:	f001 f918 	bl	810f40c <xTaskResumeAll>
 810e1dc:	e757      	b.n	810e08e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 810e1de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810e1e0:	f000 f970 	bl	810e4c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810e1e4:	f001 f912 	bl	810f40c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810e1e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810e1ea:	f000 f9bd 	bl	810e568 <prvIsQueueEmpty>
 810e1ee:	4603      	mov	r3, r0
 810e1f0:	2b00      	cmp	r3, #0
 810e1f2:	f43f af4c 	beq.w	810e08e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 810e1f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e1f8:	2b00      	cmp	r3, #0
 810e1fa:	d00d      	beq.n	810e218 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 810e1fc:	f7ff f864 	bl	810d2c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 810e200:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810e202:	f000 f8b7 	bl	810e374 <prvGetDisinheritPriorityAfterTimeout>
 810e206:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 810e208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e20a:	689b      	ldr	r3, [r3, #8]
 810e20c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810e20e:	4618      	mov	r0, r3
 810e210:	f001 fe22 	bl	810fe58 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 810e214:	f7ff f88a 	bl	810d32c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 810e218:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 810e21a:	4618      	mov	r0, r3
 810e21c:	3738      	adds	r7, #56	@ 0x38
 810e21e:	46bd      	mov	sp, r7
 810e220:	bd80      	pop	{r7, pc}
 810e222:	bf00      	nop
 810e224:	e000ed04 	.word	0xe000ed04

0810e228 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 810e228:	b580      	push	{r7, lr}
 810e22a:	b08e      	sub	sp, #56	@ 0x38
 810e22c:	af00      	add	r7, sp, #0
 810e22e:	60f8      	str	r0, [r7, #12]
 810e230:	60b9      	str	r1, [r7, #8]
 810e232:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810e234:	68fb      	ldr	r3, [r7, #12]
 810e236:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 810e238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e23a:	2b00      	cmp	r3, #0
 810e23c:	d10b      	bne.n	810e256 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 810e23e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e242:	f383 8811 	msr	BASEPRI, r3
 810e246:	f3bf 8f6f 	isb	sy
 810e24a:	f3bf 8f4f 	dsb	sy
 810e24e:	623b      	str	r3, [r7, #32]
}
 810e250:	bf00      	nop
 810e252:	bf00      	nop
 810e254:	e7fd      	b.n	810e252 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810e256:	68bb      	ldr	r3, [r7, #8]
 810e258:	2b00      	cmp	r3, #0
 810e25a:	d103      	bne.n	810e264 <xQueueReceiveFromISR+0x3c>
 810e25c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e25e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810e260:	2b00      	cmp	r3, #0
 810e262:	d101      	bne.n	810e268 <xQueueReceiveFromISR+0x40>
 810e264:	2301      	movs	r3, #1
 810e266:	e000      	b.n	810e26a <xQueueReceiveFromISR+0x42>
 810e268:	2300      	movs	r3, #0
 810e26a:	2b00      	cmp	r3, #0
 810e26c:	d10b      	bne.n	810e286 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 810e26e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e272:	f383 8811 	msr	BASEPRI, r3
 810e276:	f3bf 8f6f 	isb	sy
 810e27a:	f3bf 8f4f 	dsb	sy
 810e27e:	61fb      	str	r3, [r7, #28]
}
 810e280:	bf00      	nop
 810e282:	bf00      	nop
 810e284:	e7fd      	b.n	810e282 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810e286:	f7ff f8ff 	bl	810d488 <vPortValidateInterruptPriority>
	__asm volatile
 810e28a:	f3ef 8211 	mrs	r2, BASEPRI
 810e28e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e292:	f383 8811 	msr	BASEPRI, r3
 810e296:	f3bf 8f6f 	isb	sy
 810e29a:	f3bf 8f4f 	dsb	sy
 810e29e:	61ba      	str	r2, [r7, #24]
 810e2a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 810e2a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810e2a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810e2a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e2a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810e2aa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810e2ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e2ae:	2b00      	cmp	r3, #0
 810e2b0:	d02f      	beq.n	810e312 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 810e2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e2b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810e2b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 810e2bc:	68b9      	ldr	r1, [r7, #8]
 810e2be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810e2c0:	f000 f8da 	bl	810e478 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 810e2c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e2c6:	1e5a      	subs	r2, r3, #1
 810e2c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e2ca:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 810e2cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 810e2d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 810e2d4:	d112      	bne.n	810e2fc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810e2d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e2d8:	691b      	ldr	r3, [r3, #16]
 810e2da:	2b00      	cmp	r3, #0
 810e2dc:	d016      	beq.n	810e30c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810e2de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e2e0:	3310      	adds	r3, #16
 810e2e2:	4618      	mov	r0, r3
 810e2e4:	f001 fac4 	bl	810f870 <xTaskRemoveFromEventList>
 810e2e8:	4603      	mov	r3, r0
 810e2ea:	2b00      	cmp	r3, #0
 810e2ec:	d00e      	beq.n	810e30c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 810e2ee:	687b      	ldr	r3, [r7, #4]
 810e2f0:	2b00      	cmp	r3, #0
 810e2f2:	d00b      	beq.n	810e30c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 810e2f4:	687b      	ldr	r3, [r7, #4]
 810e2f6:	2201      	movs	r2, #1
 810e2f8:	601a      	str	r2, [r3, #0]
 810e2fa:	e007      	b.n	810e30c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 810e2fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810e300:	3301      	adds	r3, #1
 810e302:	b2db      	uxtb	r3, r3
 810e304:	b25a      	sxtb	r2, r3
 810e306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e308:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 810e30c:	2301      	movs	r3, #1
 810e30e:	637b      	str	r3, [r7, #52]	@ 0x34
 810e310:	e001      	b.n	810e316 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 810e312:	2300      	movs	r3, #0
 810e314:	637b      	str	r3, [r7, #52]	@ 0x34
 810e316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e318:	613b      	str	r3, [r7, #16]
	__asm volatile
 810e31a:	693b      	ldr	r3, [r7, #16]
 810e31c:	f383 8811 	msr	BASEPRI, r3
}
 810e320:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810e322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 810e324:	4618      	mov	r0, r3
 810e326:	3738      	adds	r7, #56	@ 0x38
 810e328:	46bd      	mov	sp, r7
 810e32a:	bd80      	pop	{r7, pc}

0810e32c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 810e32c:	b580      	push	{r7, lr}
 810e32e:	b084      	sub	sp, #16
 810e330:	af00      	add	r7, sp, #0
 810e332:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 810e334:	687b      	ldr	r3, [r7, #4]
 810e336:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 810e338:	68fb      	ldr	r3, [r7, #12]
 810e33a:	2b00      	cmp	r3, #0
 810e33c:	d10b      	bne.n	810e356 <vQueueDelete+0x2a>
	__asm volatile
 810e33e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e342:	f383 8811 	msr	BASEPRI, r3
 810e346:	f3bf 8f6f 	isb	sy
 810e34a:	f3bf 8f4f 	dsb	sy
 810e34e:	60bb      	str	r3, [r7, #8]
}
 810e350:	bf00      	nop
 810e352:	bf00      	nop
 810e354:	e7fd      	b.n	810e352 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 810e356:	68f8      	ldr	r0, [r7, #12]
 810e358:	f000 f95e 	bl	810e618 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 810e35c:	68fb      	ldr	r3, [r7, #12]
 810e35e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 810e362:	2b00      	cmp	r3, #0
 810e364:	d102      	bne.n	810e36c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 810e366:	68f8      	ldr	r0, [r7, #12]
 810e368:	f7fe fca6 	bl	810ccb8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 810e36c:	bf00      	nop
 810e36e:	3710      	adds	r7, #16
 810e370:	46bd      	mov	sp, r7
 810e372:	bd80      	pop	{r7, pc}

0810e374 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 810e374:	b480      	push	{r7}
 810e376:	b085      	sub	sp, #20
 810e378:	af00      	add	r7, sp, #0
 810e37a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 810e37c:	687b      	ldr	r3, [r7, #4]
 810e37e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e380:	2b00      	cmp	r3, #0
 810e382:	d006      	beq.n	810e392 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 810e384:	687b      	ldr	r3, [r7, #4]
 810e386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810e388:	681b      	ldr	r3, [r3, #0]
 810e38a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 810e38e:	60fb      	str	r3, [r7, #12]
 810e390:	e001      	b.n	810e396 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 810e392:	2300      	movs	r3, #0
 810e394:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 810e396:	68fb      	ldr	r3, [r7, #12]
	}
 810e398:	4618      	mov	r0, r3
 810e39a:	3714      	adds	r7, #20
 810e39c:	46bd      	mov	sp, r7
 810e39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e3a2:	4770      	bx	lr

0810e3a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 810e3a4:	b580      	push	{r7, lr}
 810e3a6:	b086      	sub	sp, #24
 810e3a8:	af00      	add	r7, sp, #0
 810e3aa:	60f8      	str	r0, [r7, #12]
 810e3ac:	60b9      	str	r1, [r7, #8]
 810e3ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 810e3b0:	2300      	movs	r3, #0
 810e3b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810e3b4:	68fb      	ldr	r3, [r7, #12]
 810e3b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810e3b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 810e3ba:	68fb      	ldr	r3, [r7, #12]
 810e3bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810e3be:	2b00      	cmp	r3, #0
 810e3c0:	d10d      	bne.n	810e3de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810e3c2:	68fb      	ldr	r3, [r7, #12]
 810e3c4:	681b      	ldr	r3, [r3, #0]
 810e3c6:	2b00      	cmp	r3, #0
 810e3c8:	d14d      	bne.n	810e466 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 810e3ca:	68fb      	ldr	r3, [r7, #12]
 810e3cc:	689b      	ldr	r3, [r3, #8]
 810e3ce:	4618      	mov	r0, r3
 810e3d0:	f001 fcd2 	bl	810fd78 <xTaskPriorityDisinherit>
 810e3d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 810e3d6:	68fb      	ldr	r3, [r7, #12]
 810e3d8:	2200      	movs	r2, #0
 810e3da:	609a      	str	r2, [r3, #8]
 810e3dc:	e043      	b.n	810e466 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 810e3de:	687b      	ldr	r3, [r7, #4]
 810e3e0:	2b00      	cmp	r3, #0
 810e3e2:	d119      	bne.n	810e418 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810e3e4:	68fb      	ldr	r3, [r7, #12]
 810e3e6:	6858      	ldr	r0, [r3, #4]
 810e3e8:	68fb      	ldr	r3, [r7, #12]
 810e3ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810e3ec:	461a      	mov	r2, r3
 810e3ee:	68b9      	ldr	r1, [r7, #8]
 810e3f0:	f00d fedd 	bl	811c1ae <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810e3f4:	68fb      	ldr	r3, [r7, #12]
 810e3f6:	685a      	ldr	r2, [r3, #4]
 810e3f8:	68fb      	ldr	r3, [r7, #12]
 810e3fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810e3fc:	441a      	add	r2, r3
 810e3fe:	68fb      	ldr	r3, [r7, #12]
 810e400:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810e402:	68fb      	ldr	r3, [r7, #12]
 810e404:	685a      	ldr	r2, [r3, #4]
 810e406:	68fb      	ldr	r3, [r7, #12]
 810e408:	689b      	ldr	r3, [r3, #8]
 810e40a:	429a      	cmp	r2, r3
 810e40c:	d32b      	bcc.n	810e466 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 810e40e:	68fb      	ldr	r3, [r7, #12]
 810e410:	681a      	ldr	r2, [r3, #0]
 810e412:	68fb      	ldr	r3, [r7, #12]
 810e414:	605a      	str	r2, [r3, #4]
 810e416:	e026      	b.n	810e466 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 810e418:	68fb      	ldr	r3, [r7, #12]
 810e41a:	68d8      	ldr	r0, [r3, #12]
 810e41c:	68fb      	ldr	r3, [r7, #12]
 810e41e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810e420:	461a      	mov	r2, r3
 810e422:	68b9      	ldr	r1, [r7, #8]
 810e424:	f00d fec3 	bl	811c1ae <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 810e428:	68fb      	ldr	r3, [r7, #12]
 810e42a:	68da      	ldr	r2, [r3, #12]
 810e42c:	68fb      	ldr	r3, [r7, #12]
 810e42e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810e430:	425b      	negs	r3, r3
 810e432:	441a      	add	r2, r3
 810e434:	68fb      	ldr	r3, [r7, #12]
 810e436:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810e438:	68fb      	ldr	r3, [r7, #12]
 810e43a:	68da      	ldr	r2, [r3, #12]
 810e43c:	68fb      	ldr	r3, [r7, #12]
 810e43e:	681b      	ldr	r3, [r3, #0]
 810e440:	429a      	cmp	r2, r3
 810e442:	d207      	bcs.n	810e454 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 810e444:	68fb      	ldr	r3, [r7, #12]
 810e446:	689a      	ldr	r2, [r3, #8]
 810e448:	68fb      	ldr	r3, [r7, #12]
 810e44a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810e44c:	425b      	negs	r3, r3
 810e44e:	441a      	add	r2, r3
 810e450:	68fb      	ldr	r3, [r7, #12]
 810e452:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 810e454:	687b      	ldr	r3, [r7, #4]
 810e456:	2b02      	cmp	r3, #2
 810e458:	d105      	bne.n	810e466 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810e45a:	693b      	ldr	r3, [r7, #16]
 810e45c:	2b00      	cmp	r3, #0
 810e45e:	d002      	beq.n	810e466 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 810e460:	693b      	ldr	r3, [r7, #16]
 810e462:	3b01      	subs	r3, #1
 810e464:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 810e466:	693b      	ldr	r3, [r7, #16]
 810e468:	1c5a      	adds	r2, r3, #1
 810e46a:	68fb      	ldr	r3, [r7, #12]
 810e46c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 810e46e:	697b      	ldr	r3, [r7, #20]
}
 810e470:	4618      	mov	r0, r3
 810e472:	3718      	adds	r7, #24
 810e474:	46bd      	mov	sp, r7
 810e476:	bd80      	pop	{r7, pc}

0810e478 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 810e478:	b580      	push	{r7, lr}
 810e47a:	b082      	sub	sp, #8
 810e47c:	af00      	add	r7, sp, #0
 810e47e:	6078      	str	r0, [r7, #4]
 810e480:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 810e482:	687b      	ldr	r3, [r7, #4]
 810e484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810e486:	2b00      	cmp	r3, #0
 810e488:	d018      	beq.n	810e4bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810e48a:	687b      	ldr	r3, [r7, #4]
 810e48c:	68da      	ldr	r2, [r3, #12]
 810e48e:	687b      	ldr	r3, [r7, #4]
 810e490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810e492:	441a      	add	r2, r3
 810e494:	687b      	ldr	r3, [r7, #4]
 810e496:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 810e498:	687b      	ldr	r3, [r7, #4]
 810e49a:	68da      	ldr	r2, [r3, #12]
 810e49c:	687b      	ldr	r3, [r7, #4]
 810e49e:	689b      	ldr	r3, [r3, #8]
 810e4a0:	429a      	cmp	r2, r3
 810e4a2:	d303      	bcc.n	810e4ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 810e4a4:	687b      	ldr	r3, [r7, #4]
 810e4a6:	681a      	ldr	r2, [r3, #0]
 810e4a8:	687b      	ldr	r3, [r7, #4]
 810e4aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810e4ac:	687b      	ldr	r3, [r7, #4]
 810e4ae:	68d9      	ldr	r1, [r3, #12]
 810e4b0:	687b      	ldr	r3, [r7, #4]
 810e4b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810e4b4:	461a      	mov	r2, r3
 810e4b6:	6838      	ldr	r0, [r7, #0]
 810e4b8:	f00d fe79 	bl	811c1ae <memcpy>
	}
}
 810e4bc:	bf00      	nop
 810e4be:	3708      	adds	r7, #8
 810e4c0:	46bd      	mov	sp, r7
 810e4c2:	bd80      	pop	{r7, pc}

0810e4c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 810e4c4:	b580      	push	{r7, lr}
 810e4c6:	b084      	sub	sp, #16
 810e4c8:	af00      	add	r7, sp, #0
 810e4ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 810e4cc:	f7fe fefc 	bl	810d2c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 810e4d0:	687b      	ldr	r3, [r7, #4]
 810e4d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810e4d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810e4d8:	e011      	b.n	810e4fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810e4da:	687b      	ldr	r3, [r7, #4]
 810e4dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810e4de:	2b00      	cmp	r3, #0
 810e4e0:	d012      	beq.n	810e508 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810e4e2:	687b      	ldr	r3, [r7, #4]
 810e4e4:	3324      	adds	r3, #36	@ 0x24
 810e4e6:	4618      	mov	r0, r3
 810e4e8:	f001 f9c2 	bl	810f870 <xTaskRemoveFromEventList>
 810e4ec:	4603      	mov	r3, r0
 810e4ee:	2b00      	cmp	r3, #0
 810e4f0:	d001      	beq.n	810e4f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 810e4f2:	f001 fac3 	bl	810fa7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 810e4f6:	7bfb      	ldrb	r3, [r7, #15]
 810e4f8:	3b01      	subs	r3, #1
 810e4fa:	b2db      	uxtb	r3, r3
 810e4fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810e4fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810e502:	2b00      	cmp	r3, #0
 810e504:	dce9      	bgt.n	810e4da <prvUnlockQueue+0x16>
 810e506:	e000      	b.n	810e50a <prvUnlockQueue+0x46>
					break;
 810e508:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 810e50a:	687b      	ldr	r3, [r7, #4]
 810e50c:	22ff      	movs	r2, #255	@ 0xff
 810e50e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 810e512:	f7fe ff0b 	bl	810d32c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 810e516:	f7fe fed7 	bl	810d2c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 810e51a:	687b      	ldr	r3, [r7, #4]
 810e51c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810e520:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 810e522:	e011      	b.n	810e548 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810e524:	687b      	ldr	r3, [r7, #4]
 810e526:	691b      	ldr	r3, [r3, #16]
 810e528:	2b00      	cmp	r3, #0
 810e52a:	d012      	beq.n	810e552 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810e52c:	687b      	ldr	r3, [r7, #4]
 810e52e:	3310      	adds	r3, #16
 810e530:	4618      	mov	r0, r3
 810e532:	f001 f99d 	bl	810f870 <xTaskRemoveFromEventList>
 810e536:	4603      	mov	r3, r0
 810e538:	2b00      	cmp	r3, #0
 810e53a:	d001      	beq.n	810e540 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 810e53c:	f001 fa9e 	bl	810fa7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 810e540:	7bbb      	ldrb	r3, [r7, #14]
 810e542:	3b01      	subs	r3, #1
 810e544:	b2db      	uxtb	r3, r3
 810e546:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 810e548:	f997 300e 	ldrsb.w	r3, [r7, #14]
 810e54c:	2b00      	cmp	r3, #0
 810e54e:	dce9      	bgt.n	810e524 <prvUnlockQueue+0x60>
 810e550:	e000      	b.n	810e554 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 810e552:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 810e554:	687b      	ldr	r3, [r7, #4]
 810e556:	22ff      	movs	r2, #255	@ 0xff
 810e558:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 810e55c:	f7fe fee6 	bl	810d32c <vPortExitCritical>
}
 810e560:	bf00      	nop
 810e562:	3710      	adds	r7, #16
 810e564:	46bd      	mov	sp, r7
 810e566:	bd80      	pop	{r7, pc}

0810e568 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 810e568:	b580      	push	{r7, lr}
 810e56a:	b084      	sub	sp, #16
 810e56c:	af00      	add	r7, sp, #0
 810e56e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810e570:	f7fe feaa 	bl	810d2c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 810e574:	687b      	ldr	r3, [r7, #4]
 810e576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810e578:	2b00      	cmp	r3, #0
 810e57a:	d102      	bne.n	810e582 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 810e57c:	2301      	movs	r3, #1
 810e57e:	60fb      	str	r3, [r7, #12]
 810e580:	e001      	b.n	810e586 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 810e582:	2300      	movs	r3, #0
 810e584:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810e586:	f7fe fed1 	bl	810d32c <vPortExitCritical>

	return xReturn;
 810e58a:	68fb      	ldr	r3, [r7, #12]
}
 810e58c:	4618      	mov	r0, r3
 810e58e:	3710      	adds	r7, #16
 810e590:	46bd      	mov	sp, r7
 810e592:	bd80      	pop	{r7, pc}

0810e594 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 810e594:	b580      	push	{r7, lr}
 810e596:	b084      	sub	sp, #16
 810e598:	af00      	add	r7, sp, #0
 810e59a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810e59c:	f7fe fe94 	bl	810d2c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 810e5a0:	687b      	ldr	r3, [r7, #4]
 810e5a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810e5a4:	687b      	ldr	r3, [r7, #4]
 810e5a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810e5a8:	429a      	cmp	r2, r3
 810e5aa:	d102      	bne.n	810e5b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 810e5ac:	2301      	movs	r3, #1
 810e5ae:	60fb      	str	r3, [r7, #12]
 810e5b0:	e001      	b.n	810e5b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 810e5b2:	2300      	movs	r3, #0
 810e5b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810e5b6:	f7fe feb9 	bl	810d32c <vPortExitCritical>

	return xReturn;
 810e5ba:	68fb      	ldr	r3, [r7, #12]
}
 810e5bc:	4618      	mov	r0, r3
 810e5be:	3710      	adds	r7, #16
 810e5c0:	46bd      	mov	sp, r7
 810e5c2:	bd80      	pop	{r7, pc}

0810e5c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 810e5c4:	b480      	push	{r7}
 810e5c6:	b085      	sub	sp, #20
 810e5c8:	af00      	add	r7, sp, #0
 810e5ca:	6078      	str	r0, [r7, #4]
 810e5cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810e5ce:	2300      	movs	r3, #0
 810e5d0:	60fb      	str	r3, [r7, #12]
 810e5d2:	e014      	b.n	810e5fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 810e5d4:	4a0f      	ldr	r2, [pc, #60]	@ (810e614 <vQueueAddToRegistry+0x50>)
 810e5d6:	68fb      	ldr	r3, [r7, #12]
 810e5d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 810e5dc:	2b00      	cmp	r3, #0
 810e5de:	d10b      	bne.n	810e5f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 810e5e0:	490c      	ldr	r1, [pc, #48]	@ (810e614 <vQueueAddToRegistry+0x50>)
 810e5e2:	68fb      	ldr	r3, [r7, #12]
 810e5e4:	683a      	ldr	r2, [r7, #0]
 810e5e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 810e5ea:	4a0a      	ldr	r2, [pc, #40]	@ (810e614 <vQueueAddToRegistry+0x50>)
 810e5ec:	68fb      	ldr	r3, [r7, #12]
 810e5ee:	00db      	lsls	r3, r3, #3
 810e5f0:	4413      	add	r3, r2
 810e5f2:	687a      	ldr	r2, [r7, #4]
 810e5f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 810e5f6:	e006      	b.n	810e606 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810e5f8:	68fb      	ldr	r3, [r7, #12]
 810e5fa:	3301      	adds	r3, #1
 810e5fc:	60fb      	str	r3, [r7, #12]
 810e5fe:	68fb      	ldr	r3, [r7, #12]
 810e600:	2b07      	cmp	r3, #7
 810e602:	d9e7      	bls.n	810e5d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 810e604:	bf00      	nop
 810e606:	bf00      	nop
 810e608:	3714      	adds	r7, #20
 810e60a:	46bd      	mov	sp, r7
 810e60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e610:	4770      	bx	lr
 810e612:	bf00      	nop
 810e614:	1000aae4 	.word	0x1000aae4

0810e618 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 810e618:	b480      	push	{r7}
 810e61a:	b085      	sub	sp, #20
 810e61c:	af00      	add	r7, sp, #0
 810e61e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810e620:	2300      	movs	r3, #0
 810e622:	60fb      	str	r3, [r7, #12]
 810e624:	e016      	b.n	810e654 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 810e626:	4a10      	ldr	r2, [pc, #64]	@ (810e668 <vQueueUnregisterQueue+0x50>)
 810e628:	68fb      	ldr	r3, [r7, #12]
 810e62a:	00db      	lsls	r3, r3, #3
 810e62c:	4413      	add	r3, r2
 810e62e:	685b      	ldr	r3, [r3, #4]
 810e630:	687a      	ldr	r2, [r7, #4]
 810e632:	429a      	cmp	r2, r3
 810e634:	d10b      	bne.n	810e64e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 810e636:	4a0c      	ldr	r2, [pc, #48]	@ (810e668 <vQueueUnregisterQueue+0x50>)
 810e638:	68fb      	ldr	r3, [r7, #12]
 810e63a:	2100      	movs	r1, #0
 810e63c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 810e640:	4a09      	ldr	r2, [pc, #36]	@ (810e668 <vQueueUnregisterQueue+0x50>)
 810e642:	68fb      	ldr	r3, [r7, #12]
 810e644:	00db      	lsls	r3, r3, #3
 810e646:	4413      	add	r3, r2
 810e648:	2200      	movs	r2, #0
 810e64a:	605a      	str	r2, [r3, #4]
				break;
 810e64c:	e006      	b.n	810e65c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810e64e:	68fb      	ldr	r3, [r7, #12]
 810e650:	3301      	adds	r3, #1
 810e652:	60fb      	str	r3, [r7, #12]
 810e654:	68fb      	ldr	r3, [r7, #12]
 810e656:	2b07      	cmp	r3, #7
 810e658:	d9e5      	bls.n	810e626 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 810e65a:	bf00      	nop
 810e65c:	bf00      	nop
 810e65e:	3714      	adds	r7, #20
 810e660:	46bd      	mov	sp, r7
 810e662:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e666:	4770      	bx	lr
 810e668:	1000aae4 	.word	0x1000aae4

0810e66c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810e66c:	b580      	push	{r7, lr}
 810e66e:	b086      	sub	sp, #24
 810e670:	af00      	add	r7, sp, #0
 810e672:	60f8      	str	r0, [r7, #12]
 810e674:	60b9      	str	r1, [r7, #8]
 810e676:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 810e678:	68fb      	ldr	r3, [r7, #12]
 810e67a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 810e67c:	f7fe fe24 	bl	810d2c8 <vPortEnterCritical>
 810e680:	697b      	ldr	r3, [r7, #20]
 810e682:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810e686:	b25b      	sxtb	r3, r3
 810e688:	f1b3 3fff 	cmp.w	r3, #4294967295
 810e68c:	d103      	bne.n	810e696 <vQueueWaitForMessageRestricted+0x2a>
 810e68e:	697b      	ldr	r3, [r7, #20]
 810e690:	2200      	movs	r2, #0
 810e692:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810e696:	697b      	ldr	r3, [r7, #20]
 810e698:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810e69c:	b25b      	sxtb	r3, r3
 810e69e:	f1b3 3fff 	cmp.w	r3, #4294967295
 810e6a2:	d103      	bne.n	810e6ac <vQueueWaitForMessageRestricted+0x40>
 810e6a4:	697b      	ldr	r3, [r7, #20]
 810e6a6:	2200      	movs	r2, #0
 810e6a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810e6ac:	f7fe fe3e 	bl	810d32c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 810e6b0:	697b      	ldr	r3, [r7, #20]
 810e6b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810e6b4:	2b00      	cmp	r3, #0
 810e6b6:	d106      	bne.n	810e6c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 810e6b8:	697b      	ldr	r3, [r7, #20]
 810e6ba:	3324      	adds	r3, #36	@ 0x24
 810e6bc:	687a      	ldr	r2, [r7, #4]
 810e6be:	68b9      	ldr	r1, [r7, #8]
 810e6c0:	4618      	mov	r0, r3
 810e6c2:	f001 f8a9 	bl	810f818 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 810e6c6:	6978      	ldr	r0, [r7, #20]
 810e6c8:	f7ff fefc 	bl	810e4c4 <prvUnlockQueue>
	}
 810e6cc:	bf00      	nop
 810e6ce:	3718      	adds	r7, #24
 810e6d0:	46bd      	mov	sp, r7
 810e6d2:	bd80      	pop	{r7, pc}

0810e6d4 <xStreamBufferGenericCreateStatic>:
	StreamBufferHandle_t xStreamBufferGenericCreateStatic( size_t xBufferSizeBytes,
														   size_t xTriggerLevelBytes,
														   BaseType_t xIsMessageBuffer,
														   uint8_t * const pucStreamBufferStorageArea,
														   StaticStreamBuffer_t * const pxStaticStreamBuffer )
	{
 810e6d4:	b580      	push	{r7, lr}
 810e6d6:	b090      	sub	sp, #64	@ 0x40
 810e6d8:	af02      	add	r7, sp, #8
 810e6da:	60f8      	str	r0, [r7, #12]
 810e6dc:	60b9      	str	r1, [r7, #8]
 810e6de:	607a      	str	r2, [r7, #4]
 810e6e0:	603b      	str	r3, [r7, #0]
	StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) pxStaticStreamBuffer; /*lint !e740 !e9087 Safe cast as StaticStreamBuffer_t is opaque Streambuffer_t. */
 810e6e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810e6e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	StreamBufferHandle_t xReturn;
	uint8_t ucFlags;

		configASSERT( pucStreamBufferStorageArea );
 810e6e6:	683b      	ldr	r3, [r7, #0]
 810e6e8:	2b00      	cmp	r3, #0
 810e6ea:	d10b      	bne.n	810e704 <xStreamBufferGenericCreateStatic+0x30>
	__asm volatile
 810e6ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e6f0:	f383 8811 	msr	BASEPRI, r3
 810e6f4:	f3bf 8f6f 	isb	sy
 810e6f8:	f3bf 8f4f 	dsb	sy
 810e6fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810e6fe:	bf00      	nop
 810e700:	bf00      	nop
 810e702:	e7fd      	b.n	810e700 <xStreamBufferGenericCreateStatic+0x2c>
		configASSERT( pxStaticStreamBuffer );
 810e704:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810e706:	2b00      	cmp	r3, #0
 810e708:	d10b      	bne.n	810e722 <xStreamBufferGenericCreateStatic+0x4e>
	__asm volatile
 810e70a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e70e:	f383 8811 	msr	BASEPRI, r3
 810e712:	f3bf 8f6f 	isb	sy
 810e716:	f3bf 8f4f 	dsb	sy
 810e71a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810e71c:	bf00      	nop
 810e71e:	bf00      	nop
 810e720:	e7fd      	b.n	810e71e <xStreamBufferGenericCreateStatic+0x4a>
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 810e722:	68ba      	ldr	r2, [r7, #8]
 810e724:	68fb      	ldr	r3, [r7, #12]
 810e726:	429a      	cmp	r2, r3
 810e728:	d90b      	bls.n	810e742 <xStreamBufferGenericCreateStatic+0x6e>
	__asm volatile
 810e72a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e72e:	f383 8811 	msr	BASEPRI, r3
 810e732:	f3bf 8f6f 	isb	sy
 810e736:	f3bf 8f4f 	dsb	sy
 810e73a:	623b      	str	r3, [r7, #32]
}
 810e73c:	bf00      	nop
 810e73e:	bf00      	nop
 810e740:	e7fd      	b.n	810e73e <xStreamBufferGenericCreateStatic+0x6a>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 810e742:	68bb      	ldr	r3, [r7, #8]
 810e744:	2b00      	cmp	r3, #0
 810e746:	d101      	bne.n	810e74c <xStreamBufferGenericCreateStatic+0x78>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 810e748:	2301      	movs	r3, #1
 810e74a:	60bb      	str	r3, [r7, #8]
		}

		if( xIsMessageBuffer != pdFALSE )
 810e74c:	687b      	ldr	r3, [r7, #4]
 810e74e:	2b00      	cmp	r3, #0
 810e750:	d003      	beq.n	810e75a <xStreamBufferGenericCreateStatic+0x86>
		{
			/* Statically allocated message buffer. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER | sbFLAGS_IS_STATICALLY_ALLOCATED;
 810e752:	2303      	movs	r3, #3
 810e754:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 810e758:	e002      	b.n	810e760 <xStreamBufferGenericCreateStatic+0x8c>
		}
		else
		{
			/* Statically allocated stream buffer. */
			ucFlags = sbFLAGS_IS_STATICALLY_ALLOCATED;
 810e75a:	2302      	movs	r3, #2
 810e75c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 810e760:	68fb      	ldr	r3, [r7, #12]
 810e762:	2b04      	cmp	r3, #4
 810e764:	d80b      	bhi.n	810e77e <xStreamBufferGenericCreateStatic+0xaa>
	__asm volatile
 810e766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e76a:	f383 8811 	msr	BASEPRI, r3
 810e76e:	f3bf 8f6f 	isb	sy
 810e772:	f3bf 8f4f 	dsb	sy
 810e776:	61fb      	str	r3, [r7, #28]
}
 810e778:	bf00      	nop
 810e77a:	bf00      	nop
 810e77c:	e7fd      	b.n	810e77a <xStreamBufferGenericCreateStatic+0xa6>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticStreamBuffer_t equals the size of the real
			message buffer structure. */
			volatile size_t xSize = sizeof( StaticStreamBuffer_t );
 810e77e:	2324      	movs	r3, #36	@ 0x24
 810e780:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( StreamBuffer_t ) );
 810e782:	697b      	ldr	r3, [r7, #20]
 810e784:	2b24      	cmp	r3, #36	@ 0x24
 810e786:	d00b      	beq.n	810e7a0 <xStreamBufferGenericCreateStatic+0xcc>
	__asm volatile
 810e788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e78c:	f383 8811 	msr	BASEPRI, r3
 810e790:	f3bf 8f6f 	isb	sy
 810e794:	f3bf 8f4f 	dsb	sy
 810e798:	61bb      	str	r3, [r7, #24]
}
 810e79a:	bf00      	nop
 810e79c:	bf00      	nop
 810e79e:	e7fd      	b.n	810e79c <xStreamBufferGenericCreateStatic+0xc8>
		} /*lint !e529 xSize is referenced is configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		if( ( pucStreamBufferStorageArea != NULL ) && ( pxStaticStreamBuffer != NULL ) )
 810e7a0:	683b      	ldr	r3, [r7, #0]
 810e7a2:	2b00      	cmp	r3, #0
 810e7a4:	d015      	beq.n	810e7d2 <xStreamBufferGenericCreateStatic+0xfe>
 810e7a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810e7a8:	2b00      	cmp	r3, #0
 810e7aa:	d012      	beq.n	810e7d2 <xStreamBufferGenericCreateStatic+0xfe>
		{
			prvInitialiseNewStreamBuffer( pxStreamBuffer,
 810e7ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 810e7b0:	9300      	str	r3, [sp, #0]
 810e7b2:	68bb      	ldr	r3, [r7, #8]
 810e7b4:	68fa      	ldr	r2, [r7, #12]
 810e7b6:	6839      	ldr	r1, [r7, #0]
 810e7b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810e7ba:	f000 fb81 	bl	810eec0 <prvInitialiseNewStreamBuffer>
										  xTriggerLevelBytes,
										  ucFlags );

			/* Remember this was statically allocated in case it is ever deleted
			again. */
			pxStreamBuffer->ucFlags |= sbFLAGS_IS_STATICALLY_ALLOCATED;
 810e7be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e7c0:	7f1b      	ldrb	r3, [r3, #28]
 810e7c2:	f043 0302 	orr.w	r3, r3, #2
 810e7c6:	b2da      	uxtb	r2, r3
 810e7c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e7ca:	771a      	strb	r2, [r3, #28]

			traceSTREAM_BUFFER_CREATE( pxStreamBuffer, xIsMessageBuffer );

			xReturn = ( StreamBufferHandle_t ) pxStaticStreamBuffer; /*lint !e9087 Data hiding requires cast to opaque type. */
 810e7cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810e7ce:	637b      	str	r3, [r7, #52]	@ 0x34
 810e7d0:	e001      	b.n	810e7d6 <xStreamBufferGenericCreateStatic+0x102>
		}
		else
		{
			xReturn = NULL;
 810e7d2:	2300      	movs	r3, #0
 810e7d4:	637b      	str	r3, [r7, #52]	@ 0x34
			traceSTREAM_BUFFER_CREATE_STATIC_FAILED( xReturn, xIsMessageBuffer );
		}

		return xReturn;
 810e7d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 810e7d8:	4618      	mov	r0, r3
 810e7da:	3738      	adds	r7, #56	@ 0x38
 810e7dc:	46bd      	mov	sp, r7
 810e7de:	bd80      	pop	{r7, pc}

0810e7e0 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 810e7e0:	b480      	push	{r7}
 810e7e2:	b087      	sub	sp, #28
 810e7e4:	af00      	add	r7, sp, #0
 810e7e6:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 810e7e8:	687b      	ldr	r3, [r7, #4]
 810e7ea:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 810e7ec:	693b      	ldr	r3, [r7, #16]
 810e7ee:	2b00      	cmp	r3, #0
 810e7f0:	d10b      	bne.n	810e80a <xStreamBufferSpacesAvailable+0x2a>
	__asm volatile
 810e7f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e7f6:	f383 8811 	msr	BASEPRI, r3
 810e7fa:	f3bf 8f6f 	isb	sy
 810e7fe:	f3bf 8f4f 	dsb	sy
 810e802:	60fb      	str	r3, [r7, #12]
}
 810e804:	bf00      	nop
 810e806:	bf00      	nop
 810e808:	e7fd      	b.n	810e806 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 810e80a:	693b      	ldr	r3, [r7, #16]
 810e80c:	689a      	ldr	r2, [r3, #8]
 810e80e:	693b      	ldr	r3, [r7, #16]
 810e810:	681b      	ldr	r3, [r3, #0]
 810e812:	4413      	add	r3, r2
 810e814:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 810e816:	693b      	ldr	r3, [r7, #16]
 810e818:	685b      	ldr	r3, [r3, #4]
 810e81a:	697a      	ldr	r2, [r7, #20]
 810e81c:	1ad3      	subs	r3, r2, r3
 810e81e:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 810e820:	697b      	ldr	r3, [r7, #20]
 810e822:	3b01      	subs	r3, #1
 810e824:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 810e826:	693b      	ldr	r3, [r7, #16]
 810e828:	689b      	ldr	r3, [r3, #8]
 810e82a:	697a      	ldr	r2, [r7, #20]
 810e82c:	429a      	cmp	r2, r3
 810e82e:	d304      	bcc.n	810e83a <xStreamBufferSpacesAvailable+0x5a>
	{
		xSpace -= pxStreamBuffer->xLength;
 810e830:	693b      	ldr	r3, [r7, #16]
 810e832:	689b      	ldr	r3, [r3, #8]
 810e834:	697a      	ldr	r2, [r7, #20]
 810e836:	1ad3      	subs	r3, r2, r3
 810e838:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 810e83a:	697b      	ldr	r3, [r7, #20]
}
 810e83c:	4618      	mov	r0, r3
 810e83e:	371c      	adds	r7, #28
 810e840:	46bd      	mov	sp, r7
 810e842:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e846:	4770      	bx	lr

0810e848 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 810e848:	b580      	push	{r7, lr}
 810e84a:	b090      	sub	sp, #64	@ 0x40
 810e84c:	af02      	add	r7, sp, #8
 810e84e:	60f8      	str	r0, [r7, #12]
 810e850:	60b9      	str	r1, [r7, #8]
 810e852:	607a      	str	r2, [r7, #4]
 810e854:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 810e856:	68fb      	ldr	r3, [r7, #12]
 810e858:	62fb      	str	r3, [r7, #44]	@ 0x2c
size_t xReturn, xSpace = 0;
 810e85a:	2300      	movs	r3, #0
 810e85c:	637b      	str	r3, [r7, #52]	@ 0x34
size_t xRequiredSpace = xDataLengthBytes;
 810e85e:	687b      	ldr	r3, [r7, #4]
 810e860:	633b      	str	r3, [r7, #48]	@ 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 810e862:	68bb      	ldr	r3, [r7, #8]
 810e864:	2b00      	cmp	r3, #0
 810e866:	d10b      	bne.n	810e880 <xStreamBufferSend+0x38>
	__asm volatile
 810e868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e86c:	f383 8811 	msr	BASEPRI, r3
 810e870:	f3bf 8f6f 	isb	sy
 810e874:	f3bf 8f4f 	dsb	sy
 810e878:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810e87a:	bf00      	nop
 810e87c:	bf00      	nop
 810e87e:	e7fd      	b.n	810e87c <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 810e880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e882:	2b00      	cmp	r3, #0
 810e884:	d10b      	bne.n	810e89e <xStreamBufferSend+0x56>
	__asm volatile
 810e886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e88a:	f383 8811 	msr	BASEPRI, r3
 810e88e:	f3bf 8f6f 	isb	sy
 810e892:	f3bf 8f4f 	dsb	sy
 810e896:	623b      	str	r3, [r7, #32]
}
 810e898:	bf00      	nop
 810e89a:	bf00      	nop
 810e89c:	e7fd      	b.n	810e89a <xStreamBufferSend+0x52>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 810e89e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e8a0:	7f1b      	ldrb	r3, [r3, #28]
 810e8a2:	f003 0301 	and.w	r3, r3, #1
 810e8a6:	2b00      	cmp	r3, #0
 810e8a8:	d012      	beq.n	810e8d0 <xStreamBufferSend+0x88>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 810e8aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e8ac:	3304      	adds	r3, #4
 810e8ae:	633b      	str	r3, [r7, #48]	@ 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 810e8b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810e8b2:	687b      	ldr	r3, [r7, #4]
 810e8b4:	429a      	cmp	r2, r3
 810e8b6:	d80b      	bhi.n	810e8d0 <xStreamBufferSend+0x88>
	__asm volatile
 810e8b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e8bc:	f383 8811 	msr	BASEPRI, r3
 810e8c0:	f3bf 8f6f 	isb	sy
 810e8c4:	f3bf 8f4f 	dsb	sy
 810e8c8:	61fb      	str	r3, [r7, #28]
}
 810e8ca:	bf00      	nop
 810e8cc:	bf00      	nop
 810e8ce:	e7fd      	b.n	810e8cc <xStreamBufferSend+0x84>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 810e8d0:	683b      	ldr	r3, [r7, #0]
 810e8d2:	2b00      	cmp	r3, #0
 810e8d4:	d03f      	beq.n	810e956 <xStreamBufferSend+0x10e>
	{
		vTaskSetTimeOutState( &xTimeOut );
 810e8d6:	f107 0310 	add.w	r3, r7, #16
 810e8da:	4618      	mov	r0, r3
 810e8dc:	f001 f82c 	bl	810f938 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 810e8e0:	f7fe fcf2 	bl	810d2c8 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 810e8e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810e8e6:	f7ff ff7b 	bl	810e7e0 <xStreamBufferSpacesAvailable>
 810e8ea:	6378      	str	r0, [r7, #52]	@ 0x34

				if( xSpace < xRequiredSpace )
 810e8ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810e8ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e8f0:	429a      	cmp	r2, r3
 810e8f2:	d218      	bcs.n	810e926 <xStreamBufferSend+0xde>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 810e8f4:	2000      	movs	r0, #0
 810e8f6:	f001 fc8d 	bl	8110214 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 810e8fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e8fc:	695b      	ldr	r3, [r3, #20]
 810e8fe:	2b00      	cmp	r3, #0
 810e900:	d00b      	beq.n	810e91a <xStreamBufferSend+0xd2>
	__asm volatile
 810e902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e906:	f383 8811 	msr	BASEPRI, r3
 810e90a:	f3bf 8f6f 	isb	sy
 810e90e:	f3bf 8f4f 	dsb	sy
 810e912:	61bb      	str	r3, [r7, #24]
}
 810e914:	bf00      	nop
 810e916:	bf00      	nop
 810e918:	e7fd      	b.n	810e916 <xStreamBufferSend+0xce>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 810e91a:	f001 f997 	bl	810fc4c <xTaskGetCurrentTaskHandle>
 810e91e:	4602      	mov	r2, r0
 810e920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e922:	615a      	str	r2, [r3, #20]
 810e924:	e002      	b.n	810e92c <xStreamBufferSend+0xe4>
				}
				else
				{
					taskEXIT_CRITICAL();
 810e926:	f7fe fd01 	bl	810d32c <vPortExitCritical>
					break;
 810e92a:	e014      	b.n	810e956 <xStreamBufferSend+0x10e>
				}
			}
			taskEXIT_CRITICAL();
 810e92c:	f7fe fcfe 	bl	810d32c <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 810e930:	683b      	ldr	r3, [r7, #0]
 810e932:	2200      	movs	r2, #0
 810e934:	2100      	movs	r1, #0
 810e936:	2000      	movs	r0, #0
 810e938:	f001 fb26 	bl	810ff88 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 810e93c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e93e:	2200      	movs	r2, #0
 810e940:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 810e942:	463a      	mov	r2, r7
 810e944:	f107 0310 	add.w	r3, r7, #16
 810e948:	4611      	mov	r1, r2
 810e94a:	4618      	mov	r0, r3
 810e94c:	f001 f832 	bl	810f9b4 <xTaskCheckForTimeOut>
 810e950:	4603      	mov	r3, r0
 810e952:	2b00      	cmp	r3, #0
 810e954:	d0c4      	beq.n	810e8e0 <xStreamBufferSend+0x98>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 810e956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e958:	2b00      	cmp	r3, #0
 810e95a:	d103      	bne.n	810e964 <xStreamBufferSend+0x11c>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 810e95c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810e95e:	f7ff ff3f 	bl	810e7e0 <xStreamBufferSpacesAvailable>
 810e962:	6378      	str	r0, [r7, #52]	@ 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 810e964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810e966:	9300      	str	r3, [sp, #0]
 810e968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810e96a:	687a      	ldr	r2, [r7, #4]
 810e96c:	68b9      	ldr	r1, [r7, #8]
 810e96e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810e970:	f000 f814 	bl	810e99c <prvWriteMessageToBuffer>
 810e974:	62b8      	str	r0, [r7, #40]	@ 0x28

	if( xReturn > ( size_t ) 0 )
 810e976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810e978:	2b00      	cmp	r3, #0
 810e97a:	d00a      	beq.n	810e992 <xStreamBufferSend+0x14a>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 810e97c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810e97e:	f000 fa7f 	bl	810ee80 <prvBytesInBuffer>
 810e982:	4602      	mov	r2, r0
 810e984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810e986:	68db      	ldr	r3, [r3, #12]
 810e988:	429a      	cmp	r2, r3
 810e98a:	d302      	bcc.n	810e992 <xStreamBufferSend+0x14a>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 810e98c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810e98e:	f7f1 fdb5 	bl	81004fc <vGenerateRemoteInterrupt>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 810e992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 810e994:	4618      	mov	r0, r3
 810e996:	3738      	adds	r7, #56	@ 0x38
 810e998:	46bd      	mov	sp, r7
 810e99a:	bd80      	pop	{r7, pc}

0810e99c <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 810e99c:	b580      	push	{r7, lr}
 810e99e:	b086      	sub	sp, #24
 810e9a0:	af00      	add	r7, sp, #0
 810e9a2:	60f8      	str	r0, [r7, #12]
 810e9a4:	60b9      	str	r1, [r7, #8]
 810e9a6:	607a      	str	r2, [r7, #4]
 810e9a8:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 810e9aa:	683b      	ldr	r3, [r7, #0]
 810e9ac:	2b00      	cmp	r3, #0
 810e9ae:	d102      	bne.n	810e9b6 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 810e9b0:	2300      	movs	r3, #0
 810e9b2:	617b      	str	r3, [r7, #20]
 810e9b4:	e01d      	b.n	810e9f2 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 810e9b6:	68fb      	ldr	r3, [r7, #12]
 810e9b8:	7f1b      	ldrb	r3, [r3, #28]
 810e9ba:	f003 0301 	and.w	r3, r3, #1
 810e9be:	2b00      	cmp	r3, #0
 810e9c0:	d108      	bne.n	810e9d4 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 810e9c2:	2301      	movs	r3, #1
 810e9c4:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 810e9c6:	687a      	ldr	r2, [r7, #4]
 810e9c8:	683b      	ldr	r3, [r7, #0]
 810e9ca:	4293      	cmp	r3, r2
 810e9cc:	bf28      	it	cs
 810e9ce:	4613      	movcs	r3, r2
 810e9d0:	607b      	str	r3, [r7, #4]
 810e9d2:	e00e      	b.n	810e9f2 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 810e9d4:	683a      	ldr	r2, [r7, #0]
 810e9d6:	6a3b      	ldr	r3, [r7, #32]
 810e9d8:	429a      	cmp	r2, r3
 810e9da:	d308      	bcc.n	810e9ee <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 810e9dc:	2301      	movs	r3, #1
 810e9de:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 810e9e0:	1d3b      	adds	r3, r7, #4
 810e9e2:	2204      	movs	r2, #4
 810e9e4:	4619      	mov	r1, r3
 810e9e6:	68f8      	ldr	r0, [r7, #12]
 810e9e8:	f000 f958 	bl	810ec9c <prvWriteBytesToBuffer>
 810e9ec:	e001      	b.n	810e9f2 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 810e9ee:	2300      	movs	r3, #0
 810e9f0:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 810e9f2:	697b      	ldr	r3, [r7, #20]
 810e9f4:	2b00      	cmp	r3, #0
 810e9f6:	d007      	beq.n	810ea08 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 810e9f8:	687b      	ldr	r3, [r7, #4]
 810e9fa:	461a      	mov	r2, r3
 810e9fc:	68b9      	ldr	r1, [r7, #8]
 810e9fe:	68f8      	ldr	r0, [r7, #12]
 810ea00:	f000 f94c 	bl	810ec9c <prvWriteBytesToBuffer>
 810ea04:	6138      	str	r0, [r7, #16]
 810ea06:	e001      	b.n	810ea0c <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 810ea08:	2300      	movs	r3, #0
 810ea0a:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 810ea0c:	693b      	ldr	r3, [r7, #16]
}
 810ea0e:	4618      	mov	r0, r3
 810ea10:	3718      	adds	r7, #24
 810ea12:	46bd      	mov	sp, r7
 810ea14:	bd80      	pop	{r7, pc}

0810ea16 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 810ea16:	b580      	push	{r7, lr}
 810ea18:	b08e      	sub	sp, #56	@ 0x38
 810ea1a:	af02      	add	r7, sp, #8
 810ea1c:	60f8      	str	r0, [r7, #12]
 810ea1e:	60b9      	str	r1, [r7, #8]
 810ea20:	607a      	str	r2, [r7, #4]
 810ea22:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 810ea24:	68fb      	ldr	r3, [r7, #12]
 810ea26:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 810ea28:	2300      	movs	r3, #0
 810ea2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	configASSERT( pvRxData );
 810ea2c:	68bb      	ldr	r3, [r7, #8]
 810ea2e:	2b00      	cmp	r3, #0
 810ea30:	d10b      	bne.n	810ea4a <xStreamBufferReceive+0x34>
	__asm volatile
 810ea32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ea36:	f383 8811 	msr	BASEPRI, r3
 810ea3a:	f3bf 8f6f 	isb	sy
 810ea3e:	f3bf 8f4f 	dsb	sy
 810ea42:	61fb      	str	r3, [r7, #28]
}
 810ea44:	bf00      	nop
 810ea46:	bf00      	nop
 810ea48:	e7fd      	b.n	810ea46 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 810ea4a:	6a3b      	ldr	r3, [r7, #32]
 810ea4c:	2b00      	cmp	r3, #0
 810ea4e:	d10b      	bne.n	810ea68 <xStreamBufferReceive+0x52>
	__asm volatile
 810ea50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ea54:	f383 8811 	msr	BASEPRI, r3
 810ea58:	f3bf 8f6f 	isb	sy
 810ea5c:	f3bf 8f4f 	dsb	sy
 810ea60:	61bb      	str	r3, [r7, #24]
}
 810ea62:	bf00      	nop
 810ea64:	bf00      	nop
 810ea66:	e7fd      	b.n	810ea64 <xStreamBufferReceive+0x4e>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 810ea68:	6a3b      	ldr	r3, [r7, #32]
 810ea6a:	7f1b      	ldrb	r3, [r3, #28]
 810ea6c:	f003 0301 	and.w	r3, r3, #1
 810ea70:	2b00      	cmp	r3, #0
 810ea72:	d002      	beq.n	810ea7a <xStreamBufferReceive+0x64>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 810ea74:	2304      	movs	r3, #4
 810ea76:	627b      	str	r3, [r7, #36]	@ 0x24
 810ea78:	e001      	b.n	810ea7e <xStreamBufferReceive+0x68>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 810ea7a:	2300      	movs	r3, #0
 810ea7c:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 810ea7e:	683b      	ldr	r3, [r7, #0]
 810ea80:	2b00      	cmp	r3, #0
 810ea82:	d035      	beq.n	810eaf0 <xStreamBufferReceive+0xda>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 810ea84:	f7fe fc20 	bl	810d2c8 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 810ea88:	6a38      	ldr	r0, [r7, #32]
 810ea8a:	f000 f9f9 	bl	810ee80 <prvBytesInBuffer>
 810ea8e:	62b8      	str	r0, [r7, #40]	@ 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 810ea90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810ea92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ea94:	429a      	cmp	r2, r3
 810ea96:	d817      	bhi.n	810eac8 <xStreamBufferReceive+0xb2>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 810ea98:	2000      	movs	r0, #0
 810ea9a:	f001 fbbb 	bl	8110214 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 810ea9e:	6a3b      	ldr	r3, [r7, #32]
 810eaa0:	691b      	ldr	r3, [r3, #16]
 810eaa2:	2b00      	cmp	r3, #0
 810eaa4:	d00b      	beq.n	810eabe <xStreamBufferReceive+0xa8>
	__asm volatile
 810eaa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810eaaa:	f383 8811 	msr	BASEPRI, r3
 810eaae:	f3bf 8f6f 	isb	sy
 810eab2:	f3bf 8f4f 	dsb	sy
 810eab6:	617b      	str	r3, [r7, #20]
}
 810eab8:	bf00      	nop
 810eaba:	bf00      	nop
 810eabc:	e7fd      	b.n	810eaba <xStreamBufferReceive+0xa4>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 810eabe:	f001 f8c5 	bl	810fc4c <xTaskGetCurrentTaskHandle>
 810eac2:	4602      	mov	r2, r0
 810eac4:	6a3b      	ldr	r3, [r7, #32]
 810eac6:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 810eac8:	f7fe fc30 	bl	810d32c <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 810eacc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810eace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ead0:	429a      	cmp	r2, r3
 810ead2:	d811      	bhi.n	810eaf8 <xStreamBufferReceive+0xe2>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 810ead4:	683b      	ldr	r3, [r7, #0]
 810ead6:	2200      	movs	r2, #0
 810ead8:	2100      	movs	r1, #0
 810eada:	2000      	movs	r0, #0
 810eadc:	f001 fa54 	bl	810ff88 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 810eae0:	6a3b      	ldr	r3, [r7, #32]
 810eae2:	2200      	movs	r2, #0
 810eae4:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 810eae6:	6a38      	ldr	r0, [r7, #32]
 810eae8:	f000 f9ca 	bl	810ee80 <prvBytesInBuffer>
 810eaec:	62b8      	str	r0, [r7, #40]	@ 0x28
 810eaee:	e003      	b.n	810eaf8 <xStreamBufferReceive+0xe2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 810eaf0:	6a38      	ldr	r0, [r7, #32]
 810eaf2:	f000 f9c5 	bl	810ee80 <prvBytesInBuffer>
 810eaf6:	62b8      	str	r0, [r7, #40]	@ 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 810eaf8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810eafa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810eafc:	429a      	cmp	r2, r3
 810eafe:	d90e      	bls.n	810eb1e <xStreamBufferReceive+0x108>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 810eb00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810eb02:	9300      	str	r3, [sp, #0]
 810eb04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810eb06:	687a      	ldr	r2, [r7, #4]
 810eb08:	68b9      	ldr	r1, [r7, #8]
 810eb0a:	6a38      	ldr	r0, [r7, #32]
 810eb0c:	f000 f80c 	bl	810eb28 <prvReadMessageFromBuffer>
 810eb10:	62f8      	str	r0, [r7, #44]	@ 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 810eb12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810eb14:	2b00      	cmp	r3, #0
 810eb16:	d002      	beq.n	810eb1e <xStreamBufferReceive+0x108>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 810eb18:	6a38      	ldr	r0, [r7, #32]
 810eb1a:	f7f1 fcef 	bl	81004fc <vGenerateRemoteInterrupt>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 810eb1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 810eb20:	4618      	mov	r0, r3
 810eb22:	3730      	adds	r7, #48	@ 0x30
 810eb24:	46bd      	mov	sp, r7
 810eb26:	bd80      	pop	{r7, pc}

0810eb28 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 810eb28:	b580      	push	{r7, lr}
 810eb2a:	b088      	sub	sp, #32
 810eb2c:	af00      	add	r7, sp, #0
 810eb2e:	60f8      	str	r0, [r7, #12]
 810eb30:	60b9      	str	r1, [r7, #8]
 810eb32:	607a      	str	r2, [r7, #4]
 810eb34:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 810eb36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810eb38:	2b00      	cmp	r3, #0
 810eb3a:	d019      	beq.n	810eb70 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 810eb3c:	68fb      	ldr	r3, [r7, #12]
 810eb3e:	681b      	ldr	r3, [r3, #0]
 810eb40:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 810eb42:	f107 0110 	add.w	r1, r7, #16
 810eb46:	683b      	ldr	r3, [r7, #0]
 810eb48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810eb4a:	68f8      	ldr	r0, [r7, #12]
 810eb4c:	f000 f91b 	bl	810ed86 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 810eb50:	693b      	ldr	r3, [r7, #16]
 810eb52:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 810eb54:	683a      	ldr	r2, [r7, #0]
 810eb56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810eb58:	1ad3      	subs	r3, r2, r3
 810eb5a:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 810eb5c:	69fa      	ldr	r2, [r7, #28]
 810eb5e:	687b      	ldr	r3, [r7, #4]
 810eb60:	429a      	cmp	r2, r3
 810eb62:	d907      	bls.n	810eb74 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 810eb64:	68fb      	ldr	r3, [r7, #12]
 810eb66:	69ba      	ldr	r2, [r7, #24]
 810eb68:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 810eb6a:	2300      	movs	r3, #0
 810eb6c:	61fb      	str	r3, [r7, #28]
 810eb6e:	e001      	b.n	810eb74 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 810eb70:	687b      	ldr	r3, [r7, #4]
 810eb72:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 810eb74:	683b      	ldr	r3, [r7, #0]
 810eb76:	69fa      	ldr	r2, [r7, #28]
 810eb78:	68b9      	ldr	r1, [r7, #8]
 810eb7a:	68f8      	ldr	r0, [r7, #12]
 810eb7c:	f000 f903 	bl	810ed86 <prvReadBytesFromBuffer>
 810eb80:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 810eb82:	697b      	ldr	r3, [r7, #20]
}
 810eb84:	4618      	mov	r0, r3
 810eb86:	3720      	adds	r7, #32
 810eb88:	46bd      	mov	sp, r7
 810eb8a:	bd80      	pop	{r7, pc}

0810eb8c <xStreamBufferSendCompletedFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
 810eb8c:	b580      	push	{r7, lr}
 810eb8e:	b08c      	sub	sp, #48	@ 0x30
 810eb90:	af02      	add	r7, sp, #8
 810eb92:	6078      	str	r0, [r7, #4]
 810eb94:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 810eb96:	687b      	ldr	r3, [r7, #4]
 810eb98:	623b      	str	r3, [r7, #32]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );
 810eb9a:	6a3b      	ldr	r3, [r7, #32]
 810eb9c:	2b00      	cmp	r3, #0
 810eb9e:	d10b      	bne.n	810ebb8 <xStreamBufferSendCompletedFromISR+0x2c>
	__asm volatile
 810eba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810eba4:	f383 8811 	msr	BASEPRI, r3
 810eba8:	f3bf 8f6f 	isb	sy
 810ebac:	f3bf 8f4f 	dsb	sy
 810ebb0:	61bb      	str	r3, [r7, #24]
}
 810ebb2:	bf00      	nop
 810ebb4:	bf00      	nop
 810ebb6:	e7fd      	b.n	810ebb4 <xStreamBufferSendCompletedFromISR+0x28>
	__asm volatile
 810ebb8:	f3ef 8211 	mrs	r2, BASEPRI
 810ebbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ebc0:	f383 8811 	msr	BASEPRI, r3
 810ebc4:	f3bf 8f6f 	isb	sy
 810ebc8:	f3bf 8f4f 	dsb	sy
 810ebcc:	617a      	str	r2, [r7, #20]
 810ebce:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 810ebd0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 810ebd2:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
 810ebd4:	6a3b      	ldr	r3, [r7, #32]
 810ebd6:	691b      	ldr	r3, [r3, #16]
 810ebd8:	2b00      	cmp	r3, #0
 810ebda:	d00e      	beq.n	810ebfa <xStreamBufferSendCompletedFromISR+0x6e>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
 810ebdc:	6a3b      	ldr	r3, [r7, #32]
 810ebde:	6918      	ldr	r0, [r3, #16]
 810ebe0:	683b      	ldr	r3, [r7, #0]
 810ebe2:	9300      	str	r3, [sp, #0]
 810ebe4:	2300      	movs	r3, #0
 810ebe6:	2200      	movs	r2, #0
 810ebe8:	2100      	movs	r1, #0
 810ebea:	f001 fa2d 	bl	8110048 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
 810ebee:	6a3b      	ldr	r3, [r7, #32]
 810ebf0:	2200      	movs	r2, #0
 810ebf2:	611a      	str	r2, [r3, #16]
			xReturn = pdTRUE;
 810ebf4:	2301      	movs	r3, #1
 810ebf6:	627b      	str	r3, [r7, #36]	@ 0x24
 810ebf8:	e001      	b.n	810ebfe <xStreamBufferSendCompletedFromISR+0x72>
		}
		else
		{
			xReturn = pdFALSE;
 810ebfa:	2300      	movs	r3, #0
 810ebfc:	627b      	str	r3, [r7, #36]	@ 0x24
 810ebfe:	69fb      	ldr	r3, [r7, #28]
 810ec00:	60fb      	str	r3, [r7, #12]
	__asm volatile
 810ec02:	68fb      	ldr	r3, [r7, #12]
 810ec04:	f383 8811 	msr	BASEPRI, r3
}
 810ec08:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810ec0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 810ec0c:	4618      	mov	r0, r3
 810ec0e:	3728      	adds	r7, #40	@ 0x28
 810ec10:	46bd      	mov	sp, r7
 810ec12:	bd80      	pop	{r7, pc}

0810ec14 <xStreamBufferReceiveCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
 810ec14:	b580      	push	{r7, lr}
 810ec16:	b08c      	sub	sp, #48	@ 0x30
 810ec18:	af02      	add	r7, sp, #8
 810ec1a:	6078      	str	r0, [r7, #4]
 810ec1c:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 810ec1e:	687b      	ldr	r3, [r7, #4]
 810ec20:	623b      	str	r3, [r7, #32]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );
 810ec22:	6a3b      	ldr	r3, [r7, #32]
 810ec24:	2b00      	cmp	r3, #0
 810ec26:	d10b      	bne.n	810ec40 <xStreamBufferReceiveCompletedFromISR+0x2c>
	__asm volatile
 810ec28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ec2c:	f383 8811 	msr	BASEPRI, r3
 810ec30:	f3bf 8f6f 	isb	sy
 810ec34:	f3bf 8f4f 	dsb	sy
 810ec38:	61bb      	str	r3, [r7, #24]
}
 810ec3a:	bf00      	nop
 810ec3c:	bf00      	nop
 810ec3e:	e7fd      	b.n	810ec3c <xStreamBufferReceiveCompletedFromISR+0x28>
	__asm volatile
 810ec40:	f3ef 8211 	mrs	r2, BASEPRI
 810ec44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ec48:	f383 8811 	msr	BASEPRI, r3
 810ec4c:	f3bf 8f6f 	isb	sy
 810ec50:	f3bf 8f4f 	dsb	sy
 810ec54:	617a      	str	r2, [r7, #20]
 810ec56:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 810ec58:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 810ec5a:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
 810ec5c:	6a3b      	ldr	r3, [r7, #32]
 810ec5e:	695b      	ldr	r3, [r3, #20]
 810ec60:	2b00      	cmp	r3, #0
 810ec62:	d00e      	beq.n	810ec82 <xStreamBufferReceiveCompletedFromISR+0x6e>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
 810ec64:	6a3b      	ldr	r3, [r7, #32]
 810ec66:	6958      	ldr	r0, [r3, #20]
 810ec68:	683b      	ldr	r3, [r7, #0]
 810ec6a:	9300      	str	r3, [sp, #0]
 810ec6c:	2300      	movs	r3, #0
 810ec6e:	2200      	movs	r2, #0
 810ec70:	2100      	movs	r1, #0
 810ec72:	f001 f9e9 	bl	8110048 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToSend = NULL;
 810ec76:	6a3b      	ldr	r3, [r7, #32]
 810ec78:	2200      	movs	r2, #0
 810ec7a:	615a      	str	r2, [r3, #20]
			xReturn = pdTRUE;
 810ec7c:	2301      	movs	r3, #1
 810ec7e:	627b      	str	r3, [r7, #36]	@ 0x24
 810ec80:	e001      	b.n	810ec86 <xStreamBufferReceiveCompletedFromISR+0x72>
		}
		else
		{
			xReturn = pdFALSE;
 810ec82:	2300      	movs	r3, #0
 810ec84:	627b      	str	r3, [r7, #36]	@ 0x24
 810ec86:	69fb      	ldr	r3, [r7, #28]
 810ec88:	60fb      	str	r3, [r7, #12]
	__asm volatile
 810ec8a:	68fb      	ldr	r3, [r7, #12]
 810ec8c:	f383 8811 	msr	BASEPRI, r3
}
 810ec90:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810ec92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 810ec94:	4618      	mov	r0, r3
 810ec96:	3728      	adds	r7, #40	@ 0x28
 810ec98:	46bd      	mov	sp, r7
 810ec9a:	bd80      	pop	{r7, pc}

0810ec9c <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 810ec9c:	b580      	push	{r7, lr}
 810ec9e:	b08a      	sub	sp, #40	@ 0x28
 810eca0:	af00      	add	r7, sp, #0
 810eca2:	60f8      	str	r0, [r7, #12]
 810eca4:	60b9      	str	r1, [r7, #8]
 810eca6:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 810eca8:	687b      	ldr	r3, [r7, #4]
 810ecaa:	2b00      	cmp	r3, #0
 810ecac:	d10b      	bne.n	810ecc6 <prvWriteBytesToBuffer+0x2a>
	__asm volatile
 810ecae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ecb2:	f383 8811 	msr	BASEPRI, r3
 810ecb6:	f3bf 8f6f 	isb	sy
 810ecba:	f3bf 8f4f 	dsb	sy
 810ecbe:	61fb      	str	r3, [r7, #28]
}
 810ecc0:	bf00      	nop
 810ecc2:	bf00      	nop
 810ecc4:	e7fd      	b.n	810ecc2 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 810ecc6:	68fb      	ldr	r3, [r7, #12]
 810ecc8:	685b      	ldr	r3, [r3, #4]
 810ecca:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 810eccc:	68fb      	ldr	r3, [r7, #12]
 810ecce:	689a      	ldr	r2, [r3, #8]
 810ecd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ecd2:	1ad3      	subs	r3, r2, r3
 810ecd4:	687a      	ldr	r2, [r7, #4]
 810ecd6:	4293      	cmp	r3, r2
 810ecd8:	bf28      	it	cs
 810ecda:	4613      	movcs	r3, r2
 810ecdc:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 810ecde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810ece0:	6a3b      	ldr	r3, [r7, #32]
 810ece2:	441a      	add	r2, r3
 810ece4:	68fb      	ldr	r3, [r7, #12]
 810ece6:	689b      	ldr	r3, [r3, #8]
 810ece8:	429a      	cmp	r2, r3
 810ecea:	d90b      	bls.n	810ed04 <prvWriteBytesToBuffer+0x68>
	__asm volatile
 810ecec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ecf0:	f383 8811 	msr	BASEPRI, r3
 810ecf4:	f3bf 8f6f 	isb	sy
 810ecf8:	f3bf 8f4f 	dsb	sy
 810ecfc:	61bb      	str	r3, [r7, #24]
}
 810ecfe:	bf00      	nop
 810ed00:	bf00      	nop
 810ed02:	e7fd      	b.n	810ed00 <prvWriteBytesToBuffer+0x64>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 810ed04:	68fb      	ldr	r3, [r7, #12]
 810ed06:	699a      	ldr	r2, [r3, #24]
 810ed08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ed0a:	4413      	add	r3, r2
 810ed0c:	6a3a      	ldr	r2, [r7, #32]
 810ed0e:	68b9      	ldr	r1, [r7, #8]
 810ed10:	4618      	mov	r0, r3
 810ed12:	f00d fa4c 	bl	811c1ae <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 810ed16:	687a      	ldr	r2, [r7, #4]
 810ed18:	6a3b      	ldr	r3, [r7, #32]
 810ed1a:	429a      	cmp	r2, r3
 810ed1c:	d91d      	bls.n	810ed5a <prvWriteBytesToBuffer+0xbe>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 810ed1e:	687a      	ldr	r2, [r7, #4]
 810ed20:	6a3b      	ldr	r3, [r7, #32]
 810ed22:	1ad2      	subs	r2, r2, r3
 810ed24:	68fb      	ldr	r3, [r7, #12]
 810ed26:	689b      	ldr	r3, [r3, #8]
 810ed28:	429a      	cmp	r2, r3
 810ed2a:	d90b      	bls.n	810ed44 <prvWriteBytesToBuffer+0xa8>
	__asm volatile
 810ed2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ed30:	f383 8811 	msr	BASEPRI, r3
 810ed34:	f3bf 8f6f 	isb	sy
 810ed38:	f3bf 8f4f 	dsb	sy
 810ed3c:	617b      	str	r3, [r7, #20]
}
 810ed3e:	bf00      	nop
 810ed40:	bf00      	nop
 810ed42:	e7fd      	b.n	810ed40 <prvWriteBytesToBuffer+0xa4>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 810ed44:	68fb      	ldr	r3, [r7, #12]
 810ed46:	6998      	ldr	r0, [r3, #24]
 810ed48:	68ba      	ldr	r2, [r7, #8]
 810ed4a:	6a3b      	ldr	r3, [r7, #32]
 810ed4c:	18d1      	adds	r1, r2, r3
 810ed4e:	687a      	ldr	r2, [r7, #4]
 810ed50:	6a3b      	ldr	r3, [r7, #32]
 810ed52:	1ad3      	subs	r3, r2, r3
 810ed54:	461a      	mov	r2, r3
 810ed56:	f00d fa2a 	bl	811c1ae <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 810ed5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810ed5c:	687b      	ldr	r3, [r7, #4]
 810ed5e:	4413      	add	r3, r2
 810ed60:	627b      	str	r3, [r7, #36]	@ 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 810ed62:	68fb      	ldr	r3, [r7, #12]
 810ed64:	689b      	ldr	r3, [r3, #8]
 810ed66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810ed68:	429a      	cmp	r2, r3
 810ed6a:	d304      	bcc.n	810ed76 <prvWriteBytesToBuffer+0xda>
	{
		xNextHead -= pxStreamBuffer->xLength;
 810ed6c:	68fb      	ldr	r3, [r7, #12]
 810ed6e:	689b      	ldr	r3, [r3, #8]
 810ed70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810ed72:	1ad3      	subs	r3, r2, r3
 810ed74:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 810ed76:	68fb      	ldr	r3, [r7, #12]
 810ed78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810ed7a:	605a      	str	r2, [r3, #4]

	return xCount;
 810ed7c:	687b      	ldr	r3, [r7, #4]
}
 810ed7e:	4618      	mov	r0, r3
 810ed80:	3728      	adds	r7, #40	@ 0x28
 810ed82:	46bd      	mov	sp, r7
 810ed84:	bd80      	pop	{r7, pc}

0810ed86 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 810ed86:	b580      	push	{r7, lr}
 810ed88:	b08a      	sub	sp, #40	@ 0x28
 810ed8a:	af00      	add	r7, sp, #0
 810ed8c:	60f8      	str	r0, [r7, #12]
 810ed8e:	60b9      	str	r1, [r7, #8]
 810ed90:	607a      	str	r2, [r7, #4]
 810ed92:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 810ed94:	687a      	ldr	r2, [r7, #4]
 810ed96:	683b      	ldr	r3, [r7, #0]
 810ed98:	4293      	cmp	r3, r2
 810ed9a:	bf28      	it	cs
 810ed9c:	4613      	movcs	r3, r2
 810ed9e:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 810eda0:	6a3b      	ldr	r3, [r7, #32]
 810eda2:	2b00      	cmp	r3, #0
 810eda4:	d067      	beq.n	810ee76 <prvReadBytesFromBuffer+0xf0>
	{
		xNextTail = pxStreamBuffer->xTail;
 810eda6:	68fb      	ldr	r3, [r7, #12]
 810eda8:	681b      	ldr	r3, [r3, #0]
 810edaa:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 810edac:	68fb      	ldr	r3, [r7, #12]
 810edae:	689a      	ldr	r2, [r3, #8]
 810edb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810edb2:	1ad3      	subs	r3, r2, r3
 810edb4:	6a3a      	ldr	r2, [r7, #32]
 810edb6:	4293      	cmp	r3, r2
 810edb8:	bf28      	it	cs
 810edba:	4613      	movcs	r3, r2
 810edbc:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 810edbe:	69fa      	ldr	r2, [r7, #28]
 810edc0:	687b      	ldr	r3, [r7, #4]
 810edc2:	429a      	cmp	r2, r3
 810edc4:	d90b      	bls.n	810edde <prvReadBytesFromBuffer+0x58>
	__asm volatile
 810edc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810edca:	f383 8811 	msr	BASEPRI, r3
 810edce:	f3bf 8f6f 	isb	sy
 810edd2:	f3bf 8f4f 	dsb	sy
 810edd6:	61bb      	str	r3, [r7, #24]
}
 810edd8:	bf00      	nop
 810edda:	bf00      	nop
 810eddc:	e7fd      	b.n	810edda <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 810edde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810ede0:	69fb      	ldr	r3, [r7, #28]
 810ede2:	441a      	add	r2, r3
 810ede4:	68fb      	ldr	r3, [r7, #12]
 810ede6:	689b      	ldr	r3, [r3, #8]
 810ede8:	429a      	cmp	r2, r3
 810edea:	d90b      	bls.n	810ee04 <prvReadBytesFromBuffer+0x7e>
	__asm volatile
 810edec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810edf0:	f383 8811 	msr	BASEPRI, r3
 810edf4:	f3bf 8f6f 	isb	sy
 810edf8:	f3bf 8f4f 	dsb	sy
 810edfc:	617b      	str	r3, [r7, #20]
}
 810edfe:	bf00      	nop
 810ee00:	bf00      	nop
 810ee02:	e7fd      	b.n	810ee00 <prvReadBytesFromBuffer+0x7a>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 810ee04:	68fb      	ldr	r3, [r7, #12]
 810ee06:	699a      	ldr	r2, [r3, #24]
 810ee08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ee0a:	4413      	add	r3, r2
 810ee0c:	69fa      	ldr	r2, [r7, #28]
 810ee0e:	4619      	mov	r1, r3
 810ee10:	68b8      	ldr	r0, [r7, #8]
 810ee12:	f00d f9cc 	bl	811c1ae <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 810ee16:	6a3a      	ldr	r2, [r7, #32]
 810ee18:	69fb      	ldr	r3, [r7, #28]
 810ee1a:	429a      	cmp	r2, r3
 810ee1c:	d91a      	bls.n	810ee54 <prvReadBytesFromBuffer+0xce>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 810ee1e:	6a3a      	ldr	r2, [r7, #32]
 810ee20:	687b      	ldr	r3, [r7, #4]
 810ee22:	429a      	cmp	r2, r3
 810ee24:	d90b      	bls.n	810ee3e <prvReadBytesFromBuffer+0xb8>
	__asm volatile
 810ee26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ee2a:	f383 8811 	msr	BASEPRI, r3
 810ee2e:	f3bf 8f6f 	isb	sy
 810ee32:	f3bf 8f4f 	dsb	sy
 810ee36:	613b      	str	r3, [r7, #16]
}
 810ee38:	bf00      	nop
 810ee3a:	bf00      	nop
 810ee3c:	e7fd      	b.n	810ee3a <prvReadBytesFromBuffer+0xb4>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 810ee3e:	68ba      	ldr	r2, [r7, #8]
 810ee40:	69fb      	ldr	r3, [r7, #28]
 810ee42:	18d0      	adds	r0, r2, r3
 810ee44:	68fb      	ldr	r3, [r7, #12]
 810ee46:	6999      	ldr	r1, [r3, #24]
 810ee48:	6a3a      	ldr	r2, [r7, #32]
 810ee4a:	69fb      	ldr	r3, [r7, #28]
 810ee4c:	1ad3      	subs	r3, r2, r3
 810ee4e:	461a      	mov	r2, r3
 810ee50:	f00d f9ad 	bl	811c1ae <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 810ee54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810ee56:	6a3b      	ldr	r3, [r7, #32]
 810ee58:	4413      	add	r3, r2
 810ee5a:	627b      	str	r3, [r7, #36]	@ 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 810ee5c:	68fb      	ldr	r3, [r7, #12]
 810ee5e:	689b      	ldr	r3, [r3, #8]
 810ee60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810ee62:	429a      	cmp	r2, r3
 810ee64:	d304      	bcc.n	810ee70 <prvReadBytesFromBuffer+0xea>
		{
			xNextTail -= pxStreamBuffer->xLength;
 810ee66:	68fb      	ldr	r3, [r7, #12]
 810ee68:	689b      	ldr	r3, [r3, #8]
 810ee6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810ee6c:	1ad3      	subs	r3, r2, r3
 810ee6e:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 810ee70:	68fb      	ldr	r3, [r7, #12]
 810ee72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810ee74:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 810ee76:	6a3b      	ldr	r3, [r7, #32]
}
 810ee78:	4618      	mov	r0, r3
 810ee7a:	3728      	adds	r7, #40	@ 0x28
 810ee7c:	46bd      	mov	sp, r7
 810ee7e:	bd80      	pop	{r7, pc}

0810ee80 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 810ee80:	b480      	push	{r7}
 810ee82:	b085      	sub	sp, #20
 810ee84:	af00      	add	r7, sp, #0
 810ee86:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 810ee88:	687b      	ldr	r3, [r7, #4]
 810ee8a:	689a      	ldr	r2, [r3, #8]
 810ee8c:	687b      	ldr	r3, [r7, #4]
 810ee8e:	685b      	ldr	r3, [r3, #4]
 810ee90:	4413      	add	r3, r2
 810ee92:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 810ee94:	687b      	ldr	r3, [r7, #4]
 810ee96:	681b      	ldr	r3, [r3, #0]
 810ee98:	68fa      	ldr	r2, [r7, #12]
 810ee9a:	1ad3      	subs	r3, r2, r3
 810ee9c:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 810ee9e:	687b      	ldr	r3, [r7, #4]
 810eea0:	689b      	ldr	r3, [r3, #8]
 810eea2:	68fa      	ldr	r2, [r7, #12]
 810eea4:	429a      	cmp	r2, r3
 810eea6:	d304      	bcc.n	810eeb2 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 810eea8:	687b      	ldr	r3, [r7, #4]
 810eeaa:	689b      	ldr	r3, [r3, #8]
 810eeac:	68fa      	ldr	r2, [r7, #12]
 810eeae:	1ad3      	subs	r3, r2, r3
 810eeb0:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 810eeb2:	68fb      	ldr	r3, [r7, #12]
}
 810eeb4:	4618      	mov	r0, r3
 810eeb6:	3714      	adds	r7, #20
 810eeb8:	46bd      	mov	sp, r7
 810eeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 810eebe:	4770      	bx	lr

0810eec0 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 810eec0:	b580      	push	{r7, lr}
 810eec2:	b086      	sub	sp, #24
 810eec4:	af00      	add	r7, sp, #0
 810eec6:	60f8      	str	r0, [r7, #12]
 810eec8:	60b9      	str	r1, [r7, #8]
 810eeca:	607a      	str	r2, [r7, #4]
 810eecc:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 810eece:	2355      	movs	r3, #85	@ 0x55
 810eed0:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 810eed2:	687a      	ldr	r2, [r7, #4]
 810eed4:	6979      	ldr	r1, [r7, #20]
 810eed6:	68b8      	ldr	r0, [r7, #8]
 810eed8:	f00d f837 	bl	811bf4a <memset>
 810eedc:	4602      	mov	r2, r0
 810eede:	68bb      	ldr	r3, [r7, #8]
 810eee0:	4293      	cmp	r3, r2
 810eee2:	d00b      	beq.n	810eefc <prvInitialiseNewStreamBuffer+0x3c>
	__asm volatile
 810eee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810eee8:	f383 8811 	msr	BASEPRI, r3
 810eeec:	f3bf 8f6f 	isb	sy
 810eef0:	f3bf 8f4f 	dsb	sy
 810eef4:	613b      	str	r3, [r7, #16]
}
 810eef6:	bf00      	nop
 810eef8:	bf00      	nop
 810eefa:	e7fd      	b.n	810eef8 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 810eefc:	2224      	movs	r2, #36	@ 0x24
 810eefe:	2100      	movs	r1, #0
 810ef00:	68f8      	ldr	r0, [r7, #12]
 810ef02:	f00d f822 	bl	811bf4a <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 810ef06:	68fb      	ldr	r3, [r7, #12]
 810ef08:	68ba      	ldr	r2, [r7, #8]
 810ef0a:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 810ef0c:	68fb      	ldr	r3, [r7, #12]
 810ef0e:	687a      	ldr	r2, [r7, #4]
 810ef10:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 810ef12:	68fb      	ldr	r3, [r7, #12]
 810ef14:	683a      	ldr	r2, [r7, #0]
 810ef16:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 810ef18:	68fb      	ldr	r3, [r7, #12]
 810ef1a:	f897 2020 	ldrb.w	r2, [r7, #32]
 810ef1e:	771a      	strb	r2, [r3, #28]
}
 810ef20:	bf00      	nop
 810ef22:	3718      	adds	r7, #24
 810ef24:	46bd      	mov	sp, r7
 810ef26:	bd80      	pop	{r7, pc}

0810ef28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 810ef28:	b580      	push	{r7, lr}
 810ef2a:	b08e      	sub	sp, #56	@ 0x38
 810ef2c:	af04      	add	r7, sp, #16
 810ef2e:	60f8      	str	r0, [r7, #12]
 810ef30:	60b9      	str	r1, [r7, #8]
 810ef32:	607a      	str	r2, [r7, #4]
 810ef34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 810ef36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ef38:	2b00      	cmp	r3, #0
 810ef3a:	d10b      	bne.n	810ef54 <xTaskCreateStatic+0x2c>
	__asm volatile
 810ef3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ef40:	f383 8811 	msr	BASEPRI, r3
 810ef44:	f3bf 8f6f 	isb	sy
 810ef48:	f3bf 8f4f 	dsb	sy
 810ef4c:	623b      	str	r3, [r7, #32]
}
 810ef4e:	bf00      	nop
 810ef50:	bf00      	nop
 810ef52:	e7fd      	b.n	810ef50 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 810ef54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ef56:	2b00      	cmp	r3, #0
 810ef58:	d10b      	bne.n	810ef72 <xTaskCreateStatic+0x4a>
	__asm volatile
 810ef5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ef5e:	f383 8811 	msr	BASEPRI, r3
 810ef62:	f3bf 8f6f 	isb	sy
 810ef66:	f3bf 8f4f 	dsb	sy
 810ef6a:	61fb      	str	r3, [r7, #28]
}
 810ef6c:	bf00      	nop
 810ef6e:	bf00      	nop
 810ef70:	e7fd      	b.n	810ef6e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 810ef72:	23a8      	movs	r3, #168	@ 0xa8
 810ef74:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 810ef76:	693b      	ldr	r3, [r7, #16]
 810ef78:	2ba8      	cmp	r3, #168	@ 0xa8
 810ef7a:	d00b      	beq.n	810ef94 <xTaskCreateStatic+0x6c>
	__asm volatile
 810ef7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ef80:	f383 8811 	msr	BASEPRI, r3
 810ef84:	f3bf 8f6f 	isb	sy
 810ef88:	f3bf 8f4f 	dsb	sy
 810ef8c:	61bb      	str	r3, [r7, #24]
}
 810ef8e:	bf00      	nop
 810ef90:	bf00      	nop
 810ef92:	e7fd      	b.n	810ef90 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 810ef94:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 810ef96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ef98:	2b00      	cmp	r3, #0
 810ef9a:	d01e      	beq.n	810efda <xTaskCreateStatic+0xb2>
 810ef9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810ef9e:	2b00      	cmp	r3, #0
 810efa0:	d01b      	beq.n	810efda <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810efa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810efa4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 810efa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810efa8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810efaa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 810efac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810efae:	2202      	movs	r2, #2
 810efb0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 810efb4:	2300      	movs	r3, #0
 810efb6:	9303      	str	r3, [sp, #12]
 810efb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810efba:	9302      	str	r3, [sp, #8]
 810efbc:	f107 0314 	add.w	r3, r7, #20
 810efc0:	9301      	str	r3, [sp, #4]
 810efc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810efc4:	9300      	str	r3, [sp, #0]
 810efc6:	683b      	ldr	r3, [r7, #0]
 810efc8:	687a      	ldr	r2, [r7, #4]
 810efca:	68b9      	ldr	r1, [r7, #8]
 810efcc:	68f8      	ldr	r0, [r7, #12]
 810efce:	f000 f851 	bl	810f074 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810efd2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810efd4:	f000 f8f6 	bl	810f1c4 <prvAddNewTaskToReadyList>
 810efd8:	e001      	b.n	810efde <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 810efda:	2300      	movs	r3, #0
 810efdc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 810efde:	697b      	ldr	r3, [r7, #20]
	}
 810efe0:	4618      	mov	r0, r3
 810efe2:	3728      	adds	r7, #40	@ 0x28
 810efe4:	46bd      	mov	sp, r7
 810efe6:	bd80      	pop	{r7, pc}

0810efe8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 810efe8:	b580      	push	{r7, lr}
 810efea:	b08c      	sub	sp, #48	@ 0x30
 810efec:	af04      	add	r7, sp, #16
 810efee:	60f8      	str	r0, [r7, #12]
 810eff0:	60b9      	str	r1, [r7, #8]
 810eff2:	603b      	str	r3, [r7, #0]
 810eff4:	4613      	mov	r3, r2
 810eff6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 810eff8:	88fb      	ldrh	r3, [r7, #6]
 810effa:	009b      	lsls	r3, r3, #2
 810effc:	4618      	mov	r0, r3
 810effe:	f7fd fd8d 	bl	810cb1c <pvPortMalloc>
 810f002:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 810f004:	697b      	ldr	r3, [r7, #20]
 810f006:	2b00      	cmp	r3, #0
 810f008:	d00e      	beq.n	810f028 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 810f00a:	20a8      	movs	r0, #168	@ 0xa8
 810f00c:	f7fd fd86 	bl	810cb1c <pvPortMalloc>
 810f010:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 810f012:	69fb      	ldr	r3, [r7, #28]
 810f014:	2b00      	cmp	r3, #0
 810f016:	d003      	beq.n	810f020 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 810f018:	69fb      	ldr	r3, [r7, #28]
 810f01a:	697a      	ldr	r2, [r7, #20]
 810f01c:	631a      	str	r2, [r3, #48]	@ 0x30
 810f01e:	e005      	b.n	810f02c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 810f020:	6978      	ldr	r0, [r7, #20]
 810f022:	f7fd fe49 	bl	810ccb8 <vPortFree>
 810f026:	e001      	b.n	810f02c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 810f028:	2300      	movs	r3, #0
 810f02a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 810f02c:	69fb      	ldr	r3, [r7, #28]
 810f02e:	2b00      	cmp	r3, #0
 810f030:	d017      	beq.n	810f062 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 810f032:	69fb      	ldr	r3, [r7, #28]
 810f034:	2200      	movs	r2, #0
 810f036:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 810f03a:	88fa      	ldrh	r2, [r7, #6]
 810f03c:	2300      	movs	r3, #0
 810f03e:	9303      	str	r3, [sp, #12]
 810f040:	69fb      	ldr	r3, [r7, #28]
 810f042:	9302      	str	r3, [sp, #8]
 810f044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f046:	9301      	str	r3, [sp, #4]
 810f048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f04a:	9300      	str	r3, [sp, #0]
 810f04c:	683b      	ldr	r3, [r7, #0]
 810f04e:	68b9      	ldr	r1, [r7, #8]
 810f050:	68f8      	ldr	r0, [r7, #12]
 810f052:	f000 f80f 	bl	810f074 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810f056:	69f8      	ldr	r0, [r7, #28]
 810f058:	f000 f8b4 	bl	810f1c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 810f05c:	2301      	movs	r3, #1
 810f05e:	61bb      	str	r3, [r7, #24]
 810f060:	e002      	b.n	810f068 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 810f062:	f04f 33ff 	mov.w	r3, #4294967295
 810f066:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 810f068:	69bb      	ldr	r3, [r7, #24]
	}
 810f06a:	4618      	mov	r0, r3
 810f06c:	3720      	adds	r7, #32
 810f06e:	46bd      	mov	sp, r7
 810f070:	bd80      	pop	{r7, pc}
	...

0810f074 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 810f074:	b580      	push	{r7, lr}
 810f076:	b088      	sub	sp, #32
 810f078:	af00      	add	r7, sp, #0
 810f07a:	60f8      	str	r0, [r7, #12]
 810f07c:	60b9      	str	r1, [r7, #8]
 810f07e:	607a      	str	r2, [r7, #4]
 810f080:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 810f082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f084:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 810f086:	687b      	ldr	r3, [r7, #4]
 810f088:	009b      	lsls	r3, r3, #2
 810f08a:	461a      	mov	r2, r3
 810f08c:	21a5      	movs	r1, #165	@ 0xa5
 810f08e:	f00c ff5c 	bl	811bf4a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 810f092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f094:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810f096:	687b      	ldr	r3, [r7, #4]
 810f098:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 810f09c:	3b01      	subs	r3, #1
 810f09e:	009b      	lsls	r3, r3, #2
 810f0a0:	4413      	add	r3, r2
 810f0a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 810f0a4:	69bb      	ldr	r3, [r7, #24]
 810f0a6:	f023 0307 	bic.w	r3, r3, #7
 810f0aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 810f0ac:	69bb      	ldr	r3, [r7, #24]
 810f0ae:	f003 0307 	and.w	r3, r3, #7
 810f0b2:	2b00      	cmp	r3, #0
 810f0b4:	d00b      	beq.n	810f0ce <prvInitialiseNewTask+0x5a>
	__asm volatile
 810f0b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f0ba:	f383 8811 	msr	BASEPRI, r3
 810f0be:	f3bf 8f6f 	isb	sy
 810f0c2:	f3bf 8f4f 	dsb	sy
 810f0c6:	617b      	str	r3, [r7, #20]
}
 810f0c8:	bf00      	nop
 810f0ca:	bf00      	nop
 810f0cc:	e7fd      	b.n	810f0ca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 810f0ce:	68bb      	ldr	r3, [r7, #8]
 810f0d0:	2b00      	cmp	r3, #0
 810f0d2:	d01f      	beq.n	810f114 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810f0d4:	2300      	movs	r3, #0
 810f0d6:	61fb      	str	r3, [r7, #28]
 810f0d8:	e012      	b.n	810f100 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 810f0da:	68ba      	ldr	r2, [r7, #8]
 810f0dc:	69fb      	ldr	r3, [r7, #28]
 810f0de:	4413      	add	r3, r2
 810f0e0:	7819      	ldrb	r1, [r3, #0]
 810f0e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810f0e4:	69fb      	ldr	r3, [r7, #28]
 810f0e6:	4413      	add	r3, r2
 810f0e8:	3334      	adds	r3, #52	@ 0x34
 810f0ea:	460a      	mov	r2, r1
 810f0ec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 810f0ee:	68ba      	ldr	r2, [r7, #8]
 810f0f0:	69fb      	ldr	r3, [r7, #28]
 810f0f2:	4413      	add	r3, r2
 810f0f4:	781b      	ldrb	r3, [r3, #0]
 810f0f6:	2b00      	cmp	r3, #0
 810f0f8:	d006      	beq.n	810f108 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810f0fa:	69fb      	ldr	r3, [r7, #28]
 810f0fc:	3301      	adds	r3, #1
 810f0fe:	61fb      	str	r3, [r7, #28]
 810f100:	69fb      	ldr	r3, [r7, #28]
 810f102:	2b0f      	cmp	r3, #15
 810f104:	d9e9      	bls.n	810f0da <prvInitialiseNewTask+0x66>
 810f106:	e000      	b.n	810f10a <prvInitialiseNewTask+0x96>
			{
				break;
 810f108:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 810f10a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f10c:	2200      	movs	r2, #0
 810f10e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 810f112:	e003      	b.n	810f11c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 810f114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f116:	2200      	movs	r2, #0
 810f118:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 810f11c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f11e:	2b37      	cmp	r3, #55	@ 0x37
 810f120:	d901      	bls.n	810f126 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 810f122:	2337      	movs	r3, #55	@ 0x37
 810f124:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 810f126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f128:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810f12a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 810f12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f12e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810f130:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 810f132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f134:	2200      	movs	r2, #0
 810f136:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 810f138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f13a:	3304      	adds	r3, #4
 810f13c:	4618      	mov	r0, r3
 810f13e:	f7fd fefb 	bl	810cf38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 810f142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f144:	3318      	adds	r3, #24
 810f146:	4618      	mov	r0, r3
 810f148:	f7fd fef6 	bl	810cf38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 810f14c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f14e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810f150:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810f152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810f154:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810f158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f15a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 810f15c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f15e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810f160:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 810f162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f164:	2200      	movs	r2, #0
 810f166:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810f16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f16c:	2200      	movs	r2, #0
 810f16e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 810f172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f174:	3354      	adds	r3, #84	@ 0x54
 810f176:	224c      	movs	r2, #76	@ 0x4c
 810f178:	2100      	movs	r1, #0
 810f17a:	4618      	mov	r0, r3
 810f17c:	f00c fee5 	bl	811bf4a <memset>
 810f180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f182:	4a0d      	ldr	r2, [pc, #52]	@ (810f1b8 <prvInitialiseNewTask+0x144>)
 810f184:	659a      	str	r2, [r3, #88]	@ 0x58
 810f186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f188:	4a0c      	ldr	r2, [pc, #48]	@ (810f1bc <prvInitialiseNewTask+0x148>)
 810f18a:	65da      	str	r2, [r3, #92]	@ 0x5c
 810f18c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f18e:	4a0c      	ldr	r2, [pc, #48]	@ (810f1c0 <prvInitialiseNewTask+0x14c>)
 810f190:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 810f192:	683a      	ldr	r2, [r7, #0]
 810f194:	68f9      	ldr	r1, [r7, #12]
 810f196:	69b8      	ldr	r0, [r7, #24]
 810f198:	f7fd ff62 	bl	810d060 <pxPortInitialiseStack>
 810f19c:	4602      	mov	r2, r0
 810f19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810f1a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 810f1a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f1a4:	2b00      	cmp	r3, #0
 810f1a6:	d002      	beq.n	810f1ae <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 810f1a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810f1aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810f1ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810f1ae:	bf00      	nop
 810f1b0:	3720      	adds	r7, #32
 810f1b2:	46bd      	mov	sp, r7
 810f1b4:	bd80      	pop	{r7, pc}
 810f1b6:	bf00      	nop
 810f1b8:	10011d90 	.word	0x10011d90
 810f1bc:	10011df8 	.word	0x10011df8
 810f1c0:	10011e60 	.word	0x10011e60

0810f1c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 810f1c4:	b580      	push	{r7, lr}
 810f1c6:	b082      	sub	sp, #8
 810f1c8:	af00      	add	r7, sp, #0
 810f1ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 810f1cc:	f7fe f87c 	bl	810d2c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 810f1d0:	4b2d      	ldr	r3, [pc, #180]	@ (810f288 <prvAddNewTaskToReadyList+0xc4>)
 810f1d2:	681b      	ldr	r3, [r3, #0]
 810f1d4:	3301      	adds	r3, #1
 810f1d6:	4a2c      	ldr	r2, [pc, #176]	@ (810f288 <prvAddNewTaskToReadyList+0xc4>)
 810f1d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 810f1da:	4b2c      	ldr	r3, [pc, #176]	@ (810f28c <prvAddNewTaskToReadyList+0xc8>)
 810f1dc:	681b      	ldr	r3, [r3, #0]
 810f1de:	2b00      	cmp	r3, #0
 810f1e0:	d109      	bne.n	810f1f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 810f1e2:	4a2a      	ldr	r2, [pc, #168]	@ (810f28c <prvAddNewTaskToReadyList+0xc8>)
 810f1e4:	687b      	ldr	r3, [r7, #4]
 810f1e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 810f1e8:	4b27      	ldr	r3, [pc, #156]	@ (810f288 <prvAddNewTaskToReadyList+0xc4>)
 810f1ea:	681b      	ldr	r3, [r3, #0]
 810f1ec:	2b01      	cmp	r3, #1
 810f1ee:	d110      	bne.n	810f212 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 810f1f0:	f000 fc68 	bl	810fac4 <prvInitialiseTaskLists>
 810f1f4:	e00d      	b.n	810f212 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 810f1f6:	4b26      	ldr	r3, [pc, #152]	@ (810f290 <prvAddNewTaskToReadyList+0xcc>)
 810f1f8:	681b      	ldr	r3, [r3, #0]
 810f1fa:	2b00      	cmp	r3, #0
 810f1fc:	d109      	bne.n	810f212 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 810f1fe:	4b23      	ldr	r3, [pc, #140]	@ (810f28c <prvAddNewTaskToReadyList+0xc8>)
 810f200:	681b      	ldr	r3, [r3, #0]
 810f202:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f204:	687b      	ldr	r3, [r7, #4]
 810f206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810f208:	429a      	cmp	r2, r3
 810f20a:	d802      	bhi.n	810f212 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 810f20c:	4a1f      	ldr	r2, [pc, #124]	@ (810f28c <prvAddNewTaskToReadyList+0xc8>)
 810f20e:	687b      	ldr	r3, [r7, #4]
 810f210:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 810f212:	4b20      	ldr	r3, [pc, #128]	@ (810f294 <prvAddNewTaskToReadyList+0xd0>)
 810f214:	681b      	ldr	r3, [r3, #0]
 810f216:	3301      	adds	r3, #1
 810f218:	4a1e      	ldr	r2, [pc, #120]	@ (810f294 <prvAddNewTaskToReadyList+0xd0>)
 810f21a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 810f21c:	4b1d      	ldr	r3, [pc, #116]	@ (810f294 <prvAddNewTaskToReadyList+0xd0>)
 810f21e:	681a      	ldr	r2, [r3, #0]
 810f220:	687b      	ldr	r3, [r7, #4]
 810f222:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 810f224:	687b      	ldr	r3, [r7, #4]
 810f226:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f228:	4b1b      	ldr	r3, [pc, #108]	@ (810f298 <prvAddNewTaskToReadyList+0xd4>)
 810f22a:	681b      	ldr	r3, [r3, #0]
 810f22c:	429a      	cmp	r2, r3
 810f22e:	d903      	bls.n	810f238 <prvAddNewTaskToReadyList+0x74>
 810f230:	687b      	ldr	r3, [r7, #4]
 810f232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810f234:	4a18      	ldr	r2, [pc, #96]	@ (810f298 <prvAddNewTaskToReadyList+0xd4>)
 810f236:	6013      	str	r3, [r2, #0]
 810f238:	687b      	ldr	r3, [r7, #4]
 810f23a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f23c:	4613      	mov	r3, r2
 810f23e:	009b      	lsls	r3, r3, #2
 810f240:	4413      	add	r3, r2
 810f242:	009b      	lsls	r3, r3, #2
 810f244:	4a15      	ldr	r2, [pc, #84]	@ (810f29c <prvAddNewTaskToReadyList+0xd8>)
 810f246:	441a      	add	r2, r3
 810f248:	687b      	ldr	r3, [r7, #4]
 810f24a:	3304      	adds	r3, #4
 810f24c:	4619      	mov	r1, r3
 810f24e:	4610      	mov	r0, r2
 810f250:	f7fd fe7f 	bl	810cf52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 810f254:	f7fe f86a 	bl	810d32c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 810f258:	4b0d      	ldr	r3, [pc, #52]	@ (810f290 <prvAddNewTaskToReadyList+0xcc>)
 810f25a:	681b      	ldr	r3, [r3, #0]
 810f25c:	2b00      	cmp	r3, #0
 810f25e:	d00e      	beq.n	810f27e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 810f260:	4b0a      	ldr	r3, [pc, #40]	@ (810f28c <prvAddNewTaskToReadyList+0xc8>)
 810f262:	681b      	ldr	r3, [r3, #0]
 810f264:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f266:	687b      	ldr	r3, [r7, #4]
 810f268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810f26a:	429a      	cmp	r2, r3
 810f26c:	d207      	bcs.n	810f27e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 810f26e:	4b0c      	ldr	r3, [pc, #48]	@ (810f2a0 <prvAddNewTaskToReadyList+0xdc>)
 810f270:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810f274:	601a      	str	r2, [r3, #0]
 810f276:	f3bf 8f4f 	dsb	sy
 810f27a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810f27e:	bf00      	nop
 810f280:	3708      	adds	r7, #8
 810f282:	46bd      	mov	sp, r7
 810f284:	bd80      	pop	{r7, pc}
 810f286:	bf00      	nop
 810f288:	1000aff8 	.word	0x1000aff8
 810f28c:	1000ab24 	.word	0x1000ab24
 810f290:	1000b004 	.word	0x1000b004
 810f294:	1000b014 	.word	0x1000b014
 810f298:	1000b000 	.word	0x1000b000
 810f29c:	1000ab28 	.word	0x1000ab28
 810f2a0:	e000ed04 	.word	0xe000ed04

0810f2a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 810f2a4:	b580      	push	{r7, lr}
 810f2a6:	b084      	sub	sp, #16
 810f2a8:	af00      	add	r7, sp, #0
 810f2aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 810f2ac:	2300      	movs	r3, #0
 810f2ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 810f2b0:	687b      	ldr	r3, [r7, #4]
 810f2b2:	2b00      	cmp	r3, #0
 810f2b4:	d018      	beq.n	810f2e8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 810f2b6:	4b14      	ldr	r3, [pc, #80]	@ (810f308 <vTaskDelay+0x64>)
 810f2b8:	681b      	ldr	r3, [r3, #0]
 810f2ba:	2b00      	cmp	r3, #0
 810f2bc:	d00b      	beq.n	810f2d6 <vTaskDelay+0x32>
	__asm volatile
 810f2be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f2c2:	f383 8811 	msr	BASEPRI, r3
 810f2c6:	f3bf 8f6f 	isb	sy
 810f2ca:	f3bf 8f4f 	dsb	sy
 810f2ce:	60bb      	str	r3, [r7, #8]
}
 810f2d0:	bf00      	nop
 810f2d2:	bf00      	nop
 810f2d4:	e7fd      	b.n	810f2d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 810f2d6:	f000 f88b 	bl	810f3f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 810f2da:	2100      	movs	r1, #0
 810f2dc:	6878      	ldr	r0, [r7, #4]
 810f2de:	f000 ffbf 	bl	8110260 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 810f2e2:	f000 f893 	bl	810f40c <xTaskResumeAll>
 810f2e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 810f2e8:	68fb      	ldr	r3, [r7, #12]
 810f2ea:	2b00      	cmp	r3, #0
 810f2ec:	d107      	bne.n	810f2fe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 810f2ee:	4b07      	ldr	r3, [pc, #28]	@ (810f30c <vTaskDelay+0x68>)
 810f2f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810f2f4:	601a      	str	r2, [r3, #0]
 810f2f6:	f3bf 8f4f 	dsb	sy
 810f2fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810f2fe:	bf00      	nop
 810f300:	3710      	adds	r7, #16
 810f302:	46bd      	mov	sp, r7
 810f304:	bd80      	pop	{r7, pc}
 810f306:	bf00      	nop
 810f308:	1000b020 	.word	0x1000b020
 810f30c:	e000ed04 	.word	0xe000ed04

0810f310 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 810f310:	b580      	push	{r7, lr}
 810f312:	b08a      	sub	sp, #40	@ 0x28
 810f314:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 810f316:	2300      	movs	r3, #0
 810f318:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 810f31a:	2300      	movs	r3, #0
 810f31c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 810f31e:	463a      	mov	r2, r7
 810f320:	1d39      	adds	r1, r7, #4
 810f322:	f107 0308 	add.w	r3, r7, #8
 810f326:	4618      	mov	r0, r3
 810f328:	f7fd fbc4 	bl	810cab4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 810f32c:	6839      	ldr	r1, [r7, #0]
 810f32e:	687b      	ldr	r3, [r7, #4]
 810f330:	68ba      	ldr	r2, [r7, #8]
 810f332:	9202      	str	r2, [sp, #8]
 810f334:	9301      	str	r3, [sp, #4]
 810f336:	2300      	movs	r3, #0
 810f338:	9300      	str	r3, [sp, #0]
 810f33a:	2300      	movs	r3, #0
 810f33c:	460a      	mov	r2, r1
 810f33e:	4924      	ldr	r1, [pc, #144]	@ (810f3d0 <vTaskStartScheduler+0xc0>)
 810f340:	4824      	ldr	r0, [pc, #144]	@ (810f3d4 <vTaskStartScheduler+0xc4>)
 810f342:	f7ff fdf1 	bl	810ef28 <xTaskCreateStatic>
 810f346:	4603      	mov	r3, r0
 810f348:	4a23      	ldr	r2, [pc, #140]	@ (810f3d8 <vTaskStartScheduler+0xc8>)
 810f34a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 810f34c:	4b22      	ldr	r3, [pc, #136]	@ (810f3d8 <vTaskStartScheduler+0xc8>)
 810f34e:	681b      	ldr	r3, [r3, #0]
 810f350:	2b00      	cmp	r3, #0
 810f352:	d002      	beq.n	810f35a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 810f354:	2301      	movs	r3, #1
 810f356:	617b      	str	r3, [r7, #20]
 810f358:	e001      	b.n	810f35e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 810f35a:	2300      	movs	r3, #0
 810f35c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 810f35e:	697b      	ldr	r3, [r7, #20]
 810f360:	2b01      	cmp	r3, #1
 810f362:	d102      	bne.n	810f36a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 810f364:	f000 ffd0 	bl	8110308 <xTimerCreateTimerTask>
 810f368:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 810f36a:	697b      	ldr	r3, [r7, #20]
 810f36c:	2b01      	cmp	r3, #1
 810f36e:	d11b      	bne.n	810f3a8 <vTaskStartScheduler+0x98>
	__asm volatile
 810f370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f374:	f383 8811 	msr	BASEPRI, r3
 810f378:	f3bf 8f6f 	isb	sy
 810f37c:	f3bf 8f4f 	dsb	sy
 810f380:	613b      	str	r3, [r7, #16]
}
 810f382:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 810f384:	4b15      	ldr	r3, [pc, #84]	@ (810f3dc <vTaskStartScheduler+0xcc>)
 810f386:	681b      	ldr	r3, [r3, #0]
 810f388:	3354      	adds	r3, #84	@ 0x54
 810f38a:	4a15      	ldr	r2, [pc, #84]	@ (810f3e0 <vTaskStartScheduler+0xd0>)
 810f38c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 810f38e:	4b15      	ldr	r3, [pc, #84]	@ (810f3e4 <vTaskStartScheduler+0xd4>)
 810f390:	f04f 32ff 	mov.w	r2, #4294967295
 810f394:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 810f396:	4b14      	ldr	r3, [pc, #80]	@ (810f3e8 <vTaskStartScheduler+0xd8>)
 810f398:	2201      	movs	r2, #1
 810f39a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 810f39c:	4b13      	ldr	r3, [pc, #76]	@ (810f3ec <vTaskStartScheduler+0xdc>)
 810f39e:	2200      	movs	r2, #0
 810f3a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 810f3a2:	f7fd feed 	bl	810d180 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 810f3a6:	e00f      	b.n	810f3c8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 810f3a8:	697b      	ldr	r3, [r7, #20]
 810f3aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 810f3ae:	d10b      	bne.n	810f3c8 <vTaskStartScheduler+0xb8>
	__asm volatile
 810f3b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f3b4:	f383 8811 	msr	BASEPRI, r3
 810f3b8:	f3bf 8f6f 	isb	sy
 810f3bc:	f3bf 8f4f 	dsb	sy
 810f3c0:	60fb      	str	r3, [r7, #12]
}
 810f3c2:	bf00      	nop
 810f3c4:	bf00      	nop
 810f3c6:	e7fd      	b.n	810f3c4 <vTaskStartScheduler+0xb4>
}
 810f3c8:	bf00      	nop
 810f3ca:	3718      	adds	r7, #24
 810f3cc:	46bd      	mov	sp, r7
 810f3ce:	bd80      	pop	{r7, pc}
 810f3d0:	0811cd40 	.word	0x0811cd40
 810f3d4:	0810fa95 	.word	0x0810fa95
 810f3d8:	1000b01c 	.word	0x1000b01c
 810f3dc:	1000ab24 	.word	0x1000ab24
 810f3e0:	10000040 	.word	0x10000040
 810f3e4:	1000b018 	.word	0x1000b018
 810f3e8:	1000b004 	.word	0x1000b004
 810f3ec:	1000affc 	.word	0x1000affc

0810f3f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 810f3f0:	b480      	push	{r7}
 810f3f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 810f3f4:	4b04      	ldr	r3, [pc, #16]	@ (810f408 <vTaskSuspendAll+0x18>)
 810f3f6:	681b      	ldr	r3, [r3, #0]
 810f3f8:	3301      	adds	r3, #1
 810f3fa:	4a03      	ldr	r2, [pc, #12]	@ (810f408 <vTaskSuspendAll+0x18>)
 810f3fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 810f3fe:	bf00      	nop
 810f400:	46bd      	mov	sp, r7
 810f402:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f406:	4770      	bx	lr
 810f408:	1000b020 	.word	0x1000b020

0810f40c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 810f40c:	b580      	push	{r7, lr}
 810f40e:	b084      	sub	sp, #16
 810f410:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 810f412:	2300      	movs	r3, #0
 810f414:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810f416:	2300      	movs	r3, #0
 810f418:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 810f41a:	4b42      	ldr	r3, [pc, #264]	@ (810f524 <xTaskResumeAll+0x118>)
 810f41c:	681b      	ldr	r3, [r3, #0]
 810f41e:	2b00      	cmp	r3, #0
 810f420:	d10b      	bne.n	810f43a <xTaskResumeAll+0x2e>
	__asm volatile
 810f422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f426:	f383 8811 	msr	BASEPRI, r3
 810f42a:	f3bf 8f6f 	isb	sy
 810f42e:	f3bf 8f4f 	dsb	sy
 810f432:	603b      	str	r3, [r7, #0]
}
 810f434:	bf00      	nop
 810f436:	bf00      	nop
 810f438:	e7fd      	b.n	810f436 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 810f43a:	f7fd ff45 	bl	810d2c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 810f43e:	4b39      	ldr	r3, [pc, #228]	@ (810f524 <xTaskResumeAll+0x118>)
 810f440:	681b      	ldr	r3, [r3, #0]
 810f442:	3b01      	subs	r3, #1
 810f444:	4a37      	ldr	r2, [pc, #220]	@ (810f524 <xTaskResumeAll+0x118>)
 810f446:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810f448:	4b36      	ldr	r3, [pc, #216]	@ (810f524 <xTaskResumeAll+0x118>)
 810f44a:	681b      	ldr	r3, [r3, #0]
 810f44c:	2b00      	cmp	r3, #0
 810f44e:	d162      	bne.n	810f516 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 810f450:	4b35      	ldr	r3, [pc, #212]	@ (810f528 <xTaskResumeAll+0x11c>)
 810f452:	681b      	ldr	r3, [r3, #0]
 810f454:	2b00      	cmp	r3, #0
 810f456:	d05e      	beq.n	810f516 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810f458:	e02f      	b.n	810f4ba <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810f45a:	4b34      	ldr	r3, [pc, #208]	@ (810f52c <xTaskResumeAll+0x120>)
 810f45c:	68db      	ldr	r3, [r3, #12]
 810f45e:	68db      	ldr	r3, [r3, #12]
 810f460:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810f462:	68fb      	ldr	r3, [r7, #12]
 810f464:	3318      	adds	r3, #24
 810f466:	4618      	mov	r0, r3
 810f468:	f7fd fdd0 	bl	810d00c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810f46c:	68fb      	ldr	r3, [r7, #12]
 810f46e:	3304      	adds	r3, #4
 810f470:	4618      	mov	r0, r3
 810f472:	f7fd fdcb 	bl	810d00c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810f476:	68fb      	ldr	r3, [r7, #12]
 810f478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f47a:	4b2d      	ldr	r3, [pc, #180]	@ (810f530 <xTaskResumeAll+0x124>)
 810f47c:	681b      	ldr	r3, [r3, #0]
 810f47e:	429a      	cmp	r2, r3
 810f480:	d903      	bls.n	810f48a <xTaskResumeAll+0x7e>
 810f482:	68fb      	ldr	r3, [r7, #12]
 810f484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810f486:	4a2a      	ldr	r2, [pc, #168]	@ (810f530 <xTaskResumeAll+0x124>)
 810f488:	6013      	str	r3, [r2, #0]
 810f48a:	68fb      	ldr	r3, [r7, #12]
 810f48c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f48e:	4613      	mov	r3, r2
 810f490:	009b      	lsls	r3, r3, #2
 810f492:	4413      	add	r3, r2
 810f494:	009b      	lsls	r3, r3, #2
 810f496:	4a27      	ldr	r2, [pc, #156]	@ (810f534 <xTaskResumeAll+0x128>)
 810f498:	441a      	add	r2, r3
 810f49a:	68fb      	ldr	r3, [r7, #12]
 810f49c:	3304      	adds	r3, #4
 810f49e:	4619      	mov	r1, r3
 810f4a0:	4610      	mov	r0, r2
 810f4a2:	f7fd fd56 	bl	810cf52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810f4a6:	68fb      	ldr	r3, [r7, #12]
 810f4a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f4aa:	4b23      	ldr	r3, [pc, #140]	@ (810f538 <xTaskResumeAll+0x12c>)
 810f4ac:	681b      	ldr	r3, [r3, #0]
 810f4ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810f4b0:	429a      	cmp	r2, r3
 810f4b2:	d302      	bcc.n	810f4ba <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 810f4b4:	4b21      	ldr	r3, [pc, #132]	@ (810f53c <xTaskResumeAll+0x130>)
 810f4b6:	2201      	movs	r2, #1
 810f4b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810f4ba:	4b1c      	ldr	r3, [pc, #112]	@ (810f52c <xTaskResumeAll+0x120>)
 810f4bc:	681b      	ldr	r3, [r3, #0]
 810f4be:	2b00      	cmp	r3, #0
 810f4c0:	d1cb      	bne.n	810f45a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 810f4c2:	68fb      	ldr	r3, [r7, #12]
 810f4c4:	2b00      	cmp	r3, #0
 810f4c6:	d001      	beq.n	810f4cc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 810f4c8:	f000 fba0 	bl	810fc0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 810f4cc:	4b1c      	ldr	r3, [pc, #112]	@ (810f540 <xTaskResumeAll+0x134>)
 810f4ce:	681b      	ldr	r3, [r3, #0]
 810f4d0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 810f4d2:	687b      	ldr	r3, [r7, #4]
 810f4d4:	2b00      	cmp	r3, #0
 810f4d6:	d010      	beq.n	810f4fa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 810f4d8:	f000 f858 	bl	810f58c <xTaskIncrementTick>
 810f4dc:	4603      	mov	r3, r0
 810f4de:	2b00      	cmp	r3, #0
 810f4e0:	d002      	beq.n	810f4e8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 810f4e2:	4b16      	ldr	r3, [pc, #88]	@ (810f53c <xTaskResumeAll+0x130>)
 810f4e4:	2201      	movs	r2, #1
 810f4e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 810f4e8:	687b      	ldr	r3, [r7, #4]
 810f4ea:	3b01      	subs	r3, #1
 810f4ec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 810f4ee:	687b      	ldr	r3, [r7, #4]
 810f4f0:	2b00      	cmp	r3, #0
 810f4f2:	d1f1      	bne.n	810f4d8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 810f4f4:	4b12      	ldr	r3, [pc, #72]	@ (810f540 <xTaskResumeAll+0x134>)
 810f4f6:	2200      	movs	r2, #0
 810f4f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 810f4fa:	4b10      	ldr	r3, [pc, #64]	@ (810f53c <xTaskResumeAll+0x130>)
 810f4fc:	681b      	ldr	r3, [r3, #0]
 810f4fe:	2b00      	cmp	r3, #0
 810f500:	d009      	beq.n	810f516 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 810f502:	2301      	movs	r3, #1
 810f504:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 810f506:	4b0f      	ldr	r3, [pc, #60]	@ (810f544 <xTaskResumeAll+0x138>)
 810f508:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810f50c:	601a      	str	r2, [r3, #0]
 810f50e:	f3bf 8f4f 	dsb	sy
 810f512:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810f516:	f7fd ff09 	bl	810d32c <vPortExitCritical>

	return xAlreadyYielded;
 810f51a:	68bb      	ldr	r3, [r7, #8]
}
 810f51c:	4618      	mov	r0, r3
 810f51e:	3710      	adds	r7, #16
 810f520:	46bd      	mov	sp, r7
 810f522:	bd80      	pop	{r7, pc}
 810f524:	1000b020 	.word	0x1000b020
 810f528:	1000aff8 	.word	0x1000aff8
 810f52c:	1000afb8 	.word	0x1000afb8
 810f530:	1000b000 	.word	0x1000b000
 810f534:	1000ab28 	.word	0x1000ab28
 810f538:	1000ab24 	.word	0x1000ab24
 810f53c:	1000b00c 	.word	0x1000b00c
 810f540:	1000b008 	.word	0x1000b008
 810f544:	e000ed04 	.word	0xe000ed04

0810f548 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 810f548:	b480      	push	{r7}
 810f54a:	b083      	sub	sp, #12
 810f54c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 810f54e:	4b05      	ldr	r3, [pc, #20]	@ (810f564 <xTaskGetTickCount+0x1c>)
 810f550:	681b      	ldr	r3, [r3, #0]
 810f552:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 810f554:	687b      	ldr	r3, [r7, #4]
}
 810f556:	4618      	mov	r0, r3
 810f558:	370c      	adds	r7, #12
 810f55a:	46bd      	mov	sp, r7
 810f55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f560:	4770      	bx	lr
 810f562:	bf00      	nop
 810f564:	1000affc 	.word	0x1000affc

0810f568 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 810f568:	b580      	push	{r7, lr}
 810f56a:	b082      	sub	sp, #8
 810f56c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810f56e:	f7fd ff8b 	bl	810d488 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 810f572:	2300      	movs	r3, #0
 810f574:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 810f576:	4b04      	ldr	r3, [pc, #16]	@ (810f588 <xTaskGetTickCountFromISR+0x20>)
 810f578:	681b      	ldr	r3, [r3, #0]
 810f57a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810f57c:	683b      	ldr	r3, [r7, #0]
}
 810f57e:	4618      	mov	r0, r3
 810f580:	3708      	adds	r7, #8
 810f582:	46bd      	mov	sp, r7
 810f584:	bd80      	pop	{r7, pc}
 810f586:	bf00      	nop
 810f588:	1000affc 	.word	0x1000affc

0810f58c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 810f58c:	b580      	push	{r7, lr}
 810f58e:	b086      	sub	sp, #24
 810f590:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 810f592:	2300      	movs	r3, #0
 810f594:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810f596:	4b4f      	ldr	r3, [pc, #316]	@ (810f6d4 <xTaskIncrementTick+0x148>)
 810f598:	681b      	ldr	r3, [r3, #0]
 810f59a:	2b00      	cmp	r3, #0
 810f59c:	f040 8090 	bne.w	810f6c0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 810f5a0:	4b4d      	ldr	r3, [pc, #308]	@ (810f6d8 <xTaskIncrementTick+0x14c>)
 810f5a2:	681b      	ldr	r3, [r3, #0]
 810f5a4:	3301      	adds	r3, #1
 810f5a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 810f5a8:	4a4b      	ldr	r2, [pc, #300]	@ (810f6d8 <xTaskIncrementTick+0x14c>)
 810f5aa:	693b      	ldr	r3, [r7, #16]
 810f5ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 810f5ae:	693b      	ldr	r3, [r7, #16]
 810f5b0:	2b00      	cmp	r3, #0
 810f5b2:	d121      	bne.n	810f5f8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 810f5b4:	4b49      	ldr	r3, [pc, #292]	@ (810f6dc <xTaskIncrementTick+0x150>)
 810f5b6:	681b      	ldr	r3, [r3, #0]
 810f5b8:	681b      	ldr	r3, [r3, #0]
 810f5ba:	2b00      	cmp	r3, #0
 810f5bc:	d00b      	beq.n	810f5d6 <xTaskIncrementTick+0x4a>
	__asm volatile
 810f5be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f5c2:	f383 8811 	msr	BASEPRI, r3
 810f5c6:	f3bf 8f6f 	isb	sy
 810f5ca:	f3bf 8f4f 	dsb	sy
 810f5ce:	603b      	str	r3, [r7, #0]
}
 810f5d0:	bf00      	nop
 810f5d2:	bf00      	nop
 810f5d4:	e7fd      	b.n	810f5d2 <xTaskIncrementTick+0x46>
 810f5d6:	4b41      	ldr	r3, [pc, #260]	@ (810f6dc <xTaskIncrementTick+0x150>)
 810f5d8:	681b      	ldr	r3, [r3, #0]
 810f5da:	60fb      	str	r3, [r7, #12]
 810f5dc:	4b40      	ldr	r3, [pc, #256]	@ (810f6e0 <xTaskIncrementTick+0x154>)
 810f5de:	681b      	ldr	r3, [r3, #0]
 810f5e0:	4a3e      	ldr	r2, [pc, #248]	@ (810f6dc <xTaskIncrementTick+0x150>)
 810f5e2:	6013      	str	r3, [r2, #0]
 810f5e4:	4a3e      	ldr	r2, [pc, #248]	@ (810f6e0 <xTaskIncrementTick+0x154>)
 810f5e6:	68fb      	ldr	r3, [r7, #12]
 810f5e8:	6013      	str	r3, [r2, #0]
 810f5ea:	4b3e      	ldr	r3, [pc, #248]	@ (810f6e4 <xTaskIncrementTick+0x158>)
 810f5ec:	681b      	ldr	r3, [r3, #0]
 810f5ee:	3301      	adds	r3, #1
 810f5f0:	4a3c      	ldr	r2, [pc, #240]	@ (810f6e4 <xTaskIncrementTick+0x158>)
 810f5f2:	6013      	str	r3, [r2, #0]
 810f5f4:	f000 fb0a 	bl	810fc0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 810f5f8:	4b3b      	ldr	r3, [pc, #236]	@ (810f6e8 <xTaskIncrementTick+0x15c>)
 810f5fa:	681b      	ldr	r3, [r3, #0]
 810f5fc:	693a      	ldr	r2, [r7, #16]
 810f5fe:	429a      	cmp	r2, r3
 810f600:	d349      	bcc.n	810f696 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810f602:	4b36      	ldr	r3, [pc, #216]	@ (810f6dc <xTaskIncrementTick+0x150>)
 810f604:	681b      	ldr	r3, [r3, #0]
 810f606:	681b      	ldr	r3, [r3, #0]
 810f608:	2b00      	cmp	r3, #0
 810f60a:	d104      	bne.n	810f616 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810f60c:	4b36      	ldr	r3, [pc, #216]	@ (810f6e8 <xTaskIncrementTick+0x15c>)
 810f60e:	f04f 32ff 	mov.w	r2, #4294967295
 810f612:	601a      	str	r2, [r3, #0]
					break;
 810f614:	e03f      	b.n	810f696 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810f616:	4b31      	ldr	r3, [pc, #196]	@ (810f6dc <xTaskIncrementTick+0x150>)
 810f618:	681b      	ldr	r3, [r3, #0]
 810f61a:	68db      	ldr	r3, [r3, #12]
 810f61c:	68db      	ldr	r3, [r3, #12]
 810f61e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 810f620:	68bb      	ldr	r3, [r7, #8]
 810f622:	685b      	ldr	r3, [r3, #4]
 810f624:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 810f626:	693a      	ldr	r2, [r7, #16]
 810f628:	687b      	ldr	r3, [r7, #4]
 810f62a:	429a      	cmp	r2, r3
 810f62c:	d203      	bcs.n	810f636 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 810f62e:	4a2e      	ldr	r2, [pc, #184]	@ (810f6e8 <xTaskIncrementTick+0x15c>)
 810f630:	687b      	ldr	r3, [r7, #4]
 810f632:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 810f634:	e02f      	b.n	810f696 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810f636:	68bb      	ldr	r3, [r7, #8]
 810f638:	3304      	adds	r3, #4
 810f63a:	4618      	mov	r0, r3
 810f63c:	f7fd fce6 	bl	810d00c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 810f640:	68bb      	ldr	r3, [r7, #8]
 810f642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810f644:	2b00      	cmp	r3, #0
 810f646:	d004      	beq.n	810f652 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810f648:	68bb      	ldr	r3, [r7, #8]
 810f64a:	3318      	adds	r3, #24
 810f64c:	4618      	mov	r0, r3
 810f64e:	f7fd fcdd 	bl	810d00c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 810f652:	68bb      	ldr	r3, [r7, #8]
 810f654:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f656:	4b25      	ldr	r3, [pc, #148]	@ (810f6ec <xTaskIncrementTick+0x160>)
 810f658:	681b      	ldr	r3, [r3, #0]
 810f65a:	429a      	cmp	r2, r3
 810f65c:	d903      	bls.n	810f666 <xTaskIncrementTick+0xda>
 810f65e:	68bb      	ldr	r3, [r7, #8]
 810f660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810f662:	4a22      	ldr	r2, [pc, #136]	@ (810f6ec <xTaskIncrementTick+0x160>)
 810f664:	6013      	str	r3, [r2, #0]
 810f666:	68bb      	ldr	r3, [r7, #8]
 810f668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f66a:	4613      	mov	r3, r2
 810f66c:	009b      	lsls	r3, r3, #2
 810f66e:	4413      	add	r3, r2
 810f670:	009b      	lsls	r3, r3, #2
 810f672:	4a1f      	ldr	r2, [pc, #124]	@ (810f6f0 <xTaskIncrementTick+0x164>)
 810f674:	441a      	add	r2, r3
 810f676:	68bb      	ldr	r3, [r7, #8]
 810f678:	3304      	adds	r3, #4
 810f67a:	4619      	mov	r1, r3
 810f67c:	4610      	mov	r0, r2
 810f67e:	f7fd fc68 	bl	810cf52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810f682:	68bb      	ldr	r3, [r7, #8]
 810f684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f686:	4b1b      	ldr	r3, [pc, #108]	@ (810f6f4 <xTaskIncrementTick+0x168>)
 810f688:	681b      	ldr	r3, [r3, #0]
 810f68a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810f68c:	429a      	cmp	r2, r3
 810f68e:	d3b8      	bcc.n	810f602 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 810f690:	2301      	movs	r3, #1
 810f692:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810f694:	e7b5      	b.n	810f602 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 810f696:	4b17      	ldr	r3, [pc, #92]	@ (810f6f4 <xTaskIncrementTick+0x168>)
 810f698:	681b      	ldr	r3, [r3, #0]
 810f69a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f69c:	4914      	ldr	r1, [pc, #80]	@ (810f6f0 <xTaskIncrementTick+0x164>)
 810f69e:	4613      	mov	r3, r2
 810f6a0:	009b      	lsls	r3, r3, #2
 810f6a2:	4413      	add	r3, r2
 810f6a4:	009b      	lsls	r3, r3, #2
 810f6a6:	440b      	add	r3, r1
 810f6a8:	681b      	ldr	r3, [r3, #0]
 810f6aa:	2b01      	cmp	r3, #1
 810f6ac:	d901      	bls.n	810f6b2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 810f6ae:	2301      	movs	r3, #1
 810f6b0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 810f6b2:	4b11      	ldr	r3, [pc, #68]	@ (810f6f8 <xTaskIncrementTick+0x16c>)
 810f6b4:	681b      	ldr	r3, [r3, #0]
 810f6b6:	2b00      	cmp	r3, #0
 810f6b8:	d007      	beq.n	810f6ca <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 810f6ba:	2301      	movs	r3, #1
 810f6bc:	617b      	str	r3, [r7, #20]
 810f6be:	e004      	b.n	810f6ca <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 810f6c0:	4b0e      	ldr	r3, [pc, #56]	@ (810f6fc <xTaskIncrementTick+0x170>)
 810f6c2:	681b      	ldr	r3, [r3, #0]
 810f6c4:	3301      	adds	r3, #1
 810f6c6:	4a0d      	ldr	r2, [pc, #52]	@ (810f6fc <xTaskIncrementTick+0x170>)
 810f6c8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 810f6ca:	697b      	ldr	r3, [r7, #20]
}
 810f6cc:	4618      	mov	r0, r3
 810f6ce:	3718      	adds	r7, #24
 810f6d0:	46bd      	mov	sp, r7
 810f6d2:	bd80      	pop	{r7, pc}
 810f6d4:	1000b020 	.word	0x1000b020
 810f6d8:	1000affc 	.word	0x1000affc
 810f6dc:	1000afb0 	.word	0x1000afb0
 810f6e0:	1000afb4 	.word	0x1000afb4
 810f6e4:	1000b010 	.word	0x1000b010
 810f6e8:	1000b018 	.word	0x1000b018
 810f6ec:	1000b000 	.word	0x1000b000
 810f6f0:	1000ab28 	.word	0x1000ab28
 810f6f4:	1000ab24 	.word	0x1000ab24
 810f6f8:	1000b00c 	.word	0x1000b00c
 810f6fc:	1000b008 	.word	0x1000b008

0810f700 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 810f700:	b480      	push	{r7}
 810f702:	b085      	sub	sp, #20
 810f704:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 810f706:	4b2b      	ldr	r3, [pc, #172]	@ (810f7b4 <vTaskSwitchContext+0xb4>)
 810f708:	681b      	ldr	r3, [r3, #0]
 810f70a:	2b00      	cmp	r3, #0
 810f70c:	d003      	beq.n	810f716 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 810f70e:	4b2a      	ldr	r3, [pc, #168]	@ (810f7b8 <vTaskSwitchContext+0xb8>)
 810f710:	2201      	movs	r2, #1
 810f712:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 810f714:	e047      	b.n	810f7a6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 810f716:	4b28      	ldr	r3, [pc, #160]	@ (810f7b8 <vTaskSwitchContext+0xb8>)
 810f718:	2200      	movs	r2, #0
 810f71a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810f71c:	4b27      	ldr	r3, [pc, #156]	@ (810f7bc <vTaskSwitchContext+0xbc>)
 810f71e:	681b      	ldr	r3, [r3, #0]
 810f720:	60fb      	str	r3, [r7, #12]
 810f722:	e011      	b.n	810f748 <vTaskSwitchContext+0x48>
 810f724:	68fb      	ldr	r3, [r7, #12]
 810f726:	2b00      	cmp	r3, #0
 810f728:	d10b      	bne.n	810f742 <vTaskSwitchContext+0x42>
	__asm volatile
 810f72a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f72e:	f383 8811 	msr	BASEPRI, r3
 810f732:	f3bf 8f6f 	isb	sy
 810f736:	f3bf 8f4f 	dsb	sy
 810f73a:	607b      	str	r3, [r7, #4]
}
 810f73c:	bf00      	nop
 810f73e:	bf00      	nop
 810f740:	e7fd      	b.n	810f73e <vTaskSwitchContext+0x3e>
 810f742:	68fb      	ldr	r3, [r7, #12]
 810f744:	3b01      	subs	r3, #1
 810f746:	60fb      	str	r3, [r7, #12]
 810f748:	491d      	ldr	r1, [pc, #116]	@ (810f7c0 <vTaskSwitchContext+0xc0>)
 810f74a:	68fa      	ldr	r2, [r7, #12]
 810f74c:	4613      	mov	r3, r2
 810f74e:	009b      	lsls	r3, r3, #2
 810f750:	4413      	add	r3, r2
 810f752:	009b      	lsls	r3, r3, #2
 810f754:	440b      	add	r3, r1
 810f756:	681b      	ldr	r3, [r3, #0]
 810f758:	2b00      	cmp	r3, #0
 810f75a:	d0e3      	beq.n	810f724 <vTaskSwitchContext+0x24>
 810f75c:	68fa      	ldr	r2, [r7, #12]
 810f75e:	4613      	mov	r3, r2
 810f760:	009b      	lsls	r3, r3, #2
 810f762:	4413      	add	r3, r2
 810f764:	009b      	lsls	r3, r3, #2
 810f766:	4a16      	ldr	r2, [pc, #88]	@ (810f7c0 <vTaskSwitchContext+0xc0>)
 810f768:	4413      	add	r3, r2
 810f76a:	60bb      	str	r3, [r7, #8]
 810f76c:	68bb      	ldr	r3, [r7, #8]
 810f76e:	685b      	ldr	r3, [r3, #4]
 810f770:	685a      	ldr	r2, [r3, #4]
 810f772:	68bb      	ldr	r3, [r7, #8]
 810f774:	605a      	str	r2, [r3, #4]
 810f776:	68bb      	ldr	r3, [r7, #8]
 810f778:	685a      	ldr	r2, [r3, #4]
 810f77a:	68bb      	ldr	r3, [r7, #8]
 810f77c:	3308      	adds	r3, #8
 810f77e:	429a      	cmp	r2, r3
 810f780:	d104      	bne.n	810f78c <vTaskSwitchContext+0x8c>
 810f782:	68bb      	ldr	r3, [r7, #8]
 810f784:	685b      	ldr	r3, [r3, #4]
 810f786:	685a      	ldr	r2, [r3, #4]
 810f788:	68bb      	ldr	r3, [r7, #8]
 810f78a:	605a      	str	r2, [r3, #4]
 810f78c:	68bb      	ldr	r3, [r7, #8]
 810f78e:	685b      	ldr	r3, [r3, #4]
 810f790:	68db      	ldr	r3, [r3, #12]
 810f792:	4a0c      	ldr	r2, [pc, #48]	@ (810f7c4 <vTaskSwitchContext+0xc4>)
 810f794:	6013      	str	r3, [r2, #0]
 810f796:	4a09      	ldr	r2, [pc, #36]	@ (810f7bc <vTaskSwitchContext+0xbc>)
 810f798:	68fb      	ldr	r3, [r7, #12]
 810f79a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 810f79c:	4b09      	ldr	r3, [pc, #36]	@ (810f7c4 <vTaskSwitchContext+0xc4>)
 810f79e:	681b      	ldr	r3, [r3, #0]
 810f7a0:	3354      	adds	r3, #84	@ 0x54
 810f7a2:	4a09      	ldr	r2, [pc, #36]	@ (810f7c8 <vTaskSwitchContext+0xc8>)
 810f7a4:	6013      	str	r3, [r2, #0]
}
 810f7a6:	bf00      	nop
 810f7a8:	3714      	adds	r7, #20
 810f7aa:	46bd      	mov	sp, r7
 810f7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f7b0:	4770      	bx	lr
 810f7b2:	bf00      	nop
 810f7b4:	1000b020 	.word	0x1000b020
 810f7b8:	1000b00c 	.word	0x1000b00c
 810f7bc:	1000b000 	.word	0x1000b000
 810f7c0:	1000ab28 	.word	0x1000ab28
 810f7c4:	1000ab24 	.word	0x1000ab24
 810f7c8:	10000040 	.word	0x10000040

0810f7cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 810f7cc:	b580      	push	{r7, lr}
 810f7ce:	b084      	sub	sp, #16
 810f7d0:	af00      	add	r7, sp, #0
 810f7d2:	6078      	str	r0, [r7, #4]
 810f7d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 810f7d6:	687b      	ldr	r3, [r7, #4]
 810f7d8:	2b00      	cmp	r3, #0
 810f7da:	d10b      	bne.n	810f7f4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 810f7dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f7e0:	f383 8811 	msr	BASEPRI, r3
 810f7e4:	f3bf 8f6f 	isb	sy
 810f7e8:	f3bf 8f4f 	dsb	sy
 810f7ec:	60fb      	str	r3, [r7, #12]
}
 810f7ee:	bf00      	nop
 810f7f0:	bf00      	nop
 810f7f2:	e7fd      	b.n	810f7f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810f7f4:	4b07      	ldr	r3, [pc, #28]	@ (810f814 <vTaskPlaceOnEventList+0x48>)
 810f7f6:	681b      	ldr	r3, [r3, #0]
 810f7f8:	3318      	adds	r3, #24
 810f7fa:	4619      	mov	r1, r3
 810f7fc:	6878      	ldr	r0, [r7, #4]
 810f7fe:	f7fd fbcc 	bl	810cf9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 810f802:	2101      	movs	r1, #1
 810f804:	6838      	ldr	r0, [r7, #0]
 810f806:	f000 fd2b 	bl	8110260 <prvAddCurrentTaskToDelayedList>
}
 810f80a:	bf00      	nop
 810f80c:	3710      	adds	r7, #16
 810f80e:	46bd      	mov	sp, r7
 810f810:	bd80      	pop	{r7, pc}
 810f812:	bf00      	nop
 810f814:	1000ab24 	.word	0x1000ab24

0810f818 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810f818:	b580      	push	{r7, lr}
 810f81a:	b086      	sub	sp, #24
 810f81c:	af00      	add	r7, sp, #0
 810f81e:	60f8      	str	r0, [r7, #12]
 810f820:	60b9      	str	r1, [r7, #8]
 810f822:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 810f824:	68fb      	ldr	r3, [r7, #12]
 810f826:	2b00      	cmp	r3, #0
 810f828:	d10b      	bne.n	810f842 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 810f82a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f82e:	f383 8811 	msr	BASEPRI, r3
 810f832:	f3bf 8f6f 	isb	sy
 810f836:	f3bf 8f4f 	dsb	sy
 810f83a:	617b      	str	r3, [r7, #20]
}
 810f83c:	bf00      	nop
 810f83e:	bf00      	nop
 810f840:	e7fd      	b.n	810f83e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810f842:	4b0a      	ldr	r3, [pc, #40]	@ (810f86c <vTaskPlaceOnEventListRestricted+0x54>)
 810f844:	681b      	ldr	r3, [r3, #0]
 810f846:	3318      	adds	r3, #24
 810f848:	4619      	mov	r1, r3
 810f84a:	68f8      	ldr	r0, [r7, #12]
 810f84c:	f7fd fb81 	bl	810cf52 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 810f850:	687b      	ldr	r3, [r7, #4]
 810f852:	2b00      	cmp	r3, #0
 810f854:	d002      	beq.n	810f85c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 810f856:	f04f 33ff 	mov.w	r3, #4294967295
 810f85a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 810f85c:	6879      	ldr	r1, [r7, #4]
 810f85e:	68b8      	ldr	r0, [r7, #8]
 810f860:	f000 fcfe 	bl	8110260 <prvAddCurrentTaskToDelayedList>
	}
 810f864:	bf00      	nop
 810f866:	3718      	adds	r7, #24
 810f868:	46bd      	mov	sp, r7
 810f86a:	bd80      	pop	{r7, pc}
 810f86c:	1000ab24 	.word	0x1000ab24

0810f870 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 810f870:	b580      	push	{r7, lr}
 810f872:	b086      	sub	sp, #24
 810f874:	af00      	add	r7, sp, #0
 810f876:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810f878:	687b      	ldr	r3, [r7, #4]
 810f87a:	68db      	ldr	r3, [r3, #12]
 810f87c:	68db      	ldr	r3, [r3, #12]
 810f87e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 810f880:	693b      	ldr	r3, [r7, #16]
 810f882:	2b00      	cmp	r3, #0
 810f884:	d10b      	bne.n	810f89e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 810f886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f88a:	f383 8811 	msr	BASEPRI, r3
 810f88e:	f3bf 8f6f 	isb	sy
 810f892:	f3bf 8f4f 	dsb	sy
 810f896:	60fb      	str	r3, [r7, #12]
}
 810f898:	bf00      	nop
 810f89a:	bf00      	nop
 810f89c:	e7fd      	b.n	810f89a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 810f89e:	693b      	ldr	r3, [r7, #16]
 810f8a0:	3318      	adds	r3, #24
 810f8a2:	4618      	mov	r0, r3
 810f8a4:	f7fd fbb2 	bl	810d00c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810f8a8:	4b1d      	ldr	r3, [pc, #116]	@ (810f920 <xTaskRemoveFromEventList+0xb0>)
 810f8aa:	681b      	ldr	r3, [r3, #0]
 810f8ac:	2b00      	cmp	r3, #0
 810f8ae:	d11d      	bne.n	810f8ec <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 810f8b0:	693b      	ldr	r3, [r7, #16]
 810f8b2:	3304      	adds	r3, #4
 810f8b4:	4618      	mov	r0, r3
 810f8b6:	f7fd fba9 	bl	810d00c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 810f8ba:	693b      	ldr	r3, [r7, #16]
 810f8bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f8be:	4b19      	ldr	r3, [pc, #100]	@ (810f924 <xTaskRemoveFromEventList+0xb4>)
 810f8c0:	681b      	ldr	r3, [r3, #0]
 810f8c2:	429a      	cmp	r2, r3
 810f8c4:	d903      	bls.n	810f8ce <xTaskRemoveFromEventList+0x5e>
 810f8c6:	693b      	ldr	r3, [r7, #16]
 810f8c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810f8ca:	4a16      	ldr	r2, [pc, #88]	@ (810f924 <xTaskRemoveFromEventList+0xb4>)
 810f8cc:	6013      	str	r3, [r2, #0]
 810f8ce:	693b      	ldr	r3, [r7, #16]
 810f8d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f8d2:	4613      	mov	r3, r2
 810f8d4:	009b      	lsls	r3, r3, #2
 810f8d6:	4413      	add	r3, r2
 810f8d8:	009b      	lsls	r3, r3, #2
 810f8da:	4a13      	ldr	r2, [pc, #76]	@ (810f928 <xTaskRemoveFromEventList+0xb8>)
 810f8dc:	441a      	add	r2, r3
 810f8de:	693b      	ldr	r3, [r7, #16]
 810f8e0:	3304      	adds	r3, #4
 810f8e2:	4619      	mov	r1, r3
 810f8e4:	4610      	mov	r0, r2
 810f8e6:	f7fd fb34 	bl	810cf52 <vListInsertEnd>
 810f8ea:	e005      	b.n	810f8f8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 810f8ec:	693b      	ldr	r3, [r7, #16]
 810f8ee:	3318      	adds	r3, #24
 810f8f0:	4619      	mov	r1, r3
 810f8f2:	480e      	ldr	r0, [pc, #56]	@ (810f92c <xTaskRemoveFromEventList+0xbc>)
 810f8f4:	f7fd fb2d 	bl	810cf52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 810f8f8:	693b      	ldr	r3, [r7, #16]
 810f8fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810f8fc:	4b0c      	ldr	r3, [pc, #48]	@ (810f930 <xTaskRemoveFromEventList+0xc0>)
 810f8fe:	681b      	ldr	r3, [r3, #0]
 810f900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810f902:	429a      	cmp	r2, r3
 810f904:	d905      	bls.n	810f912 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 810f906:	2301      	movs	r3, #1
 810f908:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 810f90a:	4b0a      	ldr	r3, [pc, #40]	@ (810f934 <xTaskRemoveFromEventList+0xc4>)
 810f90c:	2201      	movs	r2, #1
 810f90e:	601a      	str	r2, [r3, #0]
 810f910:	e001      	b.n	810f916 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 810f912:	2300      	movs	r3, #0
 810f914:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 810f916:	697b      	ldr	r3, [r7, #20]
}
 810f918:	4618      	mov	r0, r3
 810f91a:	3718      	adds	r7, #24
 810f91c:	46bd      	mov	sp, r7
 810f91e:	bd80      	pop	{r7, pc}
 810f920:	1000b020 	.word	0x1000b020
 810f924:	1000b000 	.word	0x1000b000
 810f928:	1000ab28 	.word	0x1000ab28
 810f92c:	1000afb8 	.word	0x1000afb8
 810f930:	1000ab24 	.word	0x1000ab24
 810f934:	1000b00c 	.word	0x1000b00c

0810f938 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 810f938:	b580      	push	{r7, lr}
 810f93a:	b084      	sub	sp, #16
 810f93c:	af00      	add	r7, sp, #0
 810f93e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 810f940:	687b      	ldr	r3, [r7, #4]
 810f942:	2b00      	cmp	r3, #0
 810f944:	d10b      	bne.n	810f95e <vTaskSetTimeOutState+0x26>
	__asm volatile
 810f946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f94a:	f383 8811 	msr	BASEPRI, r3
 810f94e:	f3bf 8f6f 	isb	sy
 810f952:	f3bf 8f4f 	dsb	sy
 810f956:	60fb      	str	r3, [r7, #12]
}
 810f958:	bf00      	nop
 810f95a:	bf00      	nop
 810f95c:	e7fd      	b.n	810f95a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 810f95e:	f7fd fcb3 	bl	810d2c8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 810f962:	4b07      	ldr	r3, [pc, #28]	@ (810f980 <vTaskSetTimeOutState+0x48>)
 810f964:	681a      	ldr	r2, [r3, #0]
 810f966:	687b      	ldr	r3, [r7, #4]
 810f968:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 810f96a:	4b06      	ldr	r3, [pc, #24]	@ (810f984 <vTaskSetTimeOutState+0x4c>)
 810f96c:	681a      	ldr	r2, [r3, #0]
 810f96e:	687b      	ldr	r3, [r7, #4]
 810f970:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 810f972:	f7fd fcdb 	bl	810d32c <vPortExitCritical>
}
 810f976:	bf00      	nop
 810f978:	3710      	adds	r7, #16
 810f97a:	46bd      	mov	sp, r7
 810f97c:	bd80      	pop	{r7, pc}
 810f97e:	bf00      	nop
 810f980:	1000b010 	.word	0x1000b010
 810f984:	1000affc 	.word	0x1000affc

0810f988 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 810f988:	b480      	push	{r7}
 810f98a:	b083      	sub	sp, #12
 810f98c:	af00      	add	r7, sp, #0
 810f98e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 810f990:	4b06      	ldr	r3, [pc, #24]	@ (810f9ac <vTaskInternalSetTimeOutState+0x24>)
 810f992:	681a      	ldr	r2, [r3, #0]
 810f994:	687b      	ldr	r3, [r7, #4]
 810f996:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 810f998:	4b05      	ldr	r3, [pc, #20]	@ (810f9b0 <vTaskInternalSetTimeOutState+0x28>)
 810f99a:	681a      	ldr	r2, [r3, #0]
 810f99c:	687b      	ldr	r3, [r7, #4]
 810f99e:	605a      	str	r2, [r3, #4]
}
 810f9a0:	bf00      	nop
 810f9a2:	370c      	adds	r7, #12
 810f9a4:	46bd      	mov	sp, r7
 810f9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f9aa:	4770      	bx	lr
 810f9ac:	1000b010 	.word	0x1000b010
 810f9b0:	1000affc 	.word	0x1000affc

0810f9b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 810f9b4:	b580      	push	{r7, lr}
 810f9b6:	b088      	sub	sp, #32
 810f9b8:	af00      	add	r7, sp, #0
 810f9ba:	6078      	str	r0, [r7, #4]
 810f9bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 810f9be:	687b      	ldr	r3, [r7, #4]
 810f9c0:	2b00      	cmp	r3, #0
 810f9c2:	d10b      	bne.n	810f9dc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 810f9c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f9c8:	f383 8811 	msr	BASEPRI, r3
 810f9cc:	f3bf 8f6f 	isb	sy
 810f9d0:	f3bf 8f4f 	dsb	sy
 810f9d4:	613b      	str	r3, [r7, #16]
}
 810f9d6:	bf00      	nop
 810f9d8:	bf00      	nop
 810f9da:	e7fd      	b.n	810f9d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 810f9dc:	683b      	ldr	r3, [r7, #0]
 810f9de:	2b00      	cmp	r3, #0
 810f9e0:	d10b      	bne.n	810f9fa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 810f9e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810f9e6:	f383 8811 	msr	BASEPRI, r3
 810f9ea:	f3bf 8f6f 	isb	sy
 810f9ee:	f3bf 8f4f 	dsb	sy
 810f9f2:	60fb      	str	r3, [r7, #12]
}
 810f9f4:	bf00      	nop
 810f9f6:	bf00      	nop
 810f9f8:	e7fd      	b.n	810f9f6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 810f9fa:	f7fd fc65 	bl	810d2c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 810f9fe:	4b1d      	ldr	r3, [pc, #116]	@ (810fa74 <xTaskCheckForTimeOut+0xc0>)
 810fa00:	681b      	ldr	r3, [r3, #0]
 810fa02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 810fa04:	687b      	ldr	r3, [r7, #4]
 810fa06:	685b      	ldr	r3, [r3, #4]
 810fa08:	69ba      	ldr	r2, [r7, #24]
 810fa0a:	1ad3      	subs	r3, r2, r3
 810fa0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 810fa0e:	683b      	ldr	r3, [r7, #0]
 810fa10:	681b      	ldr	r3, [r3, #0]
 810fa12:	f1b3 3fff 	cmp.w	r3, #4294967295
 810fa16:	d102      	bne.n	810fa1e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 810fa18:	2300      	movs	r3, #0
 810fa1a:	61fb      	str	r3, [r7, #28]
 810fa1c:	e023      	b.n	810fa66 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 810fa1e:	687b      	ldr	r3, [r7, #4]
 810fa20:	681a      	ldr	r2, [r3, #0]
 810fa22:	4b15      	ldr	r3, [pc, #84]	@ (810fa78 <xTaskCheckForTimeOut+0xc4>)
 810fa24:	681b      	ldr	r3, [r3, #0]
 810fa26:	429a      	cmp	r2, r3
 810fa28:	d007      	beq.n	810fa3a <xTaskCheckForTimeOut+0x86>
 810fa2a:	687b      	ldr	r3, [r7, #4]
 810fa2c:	685b      	ldr	r3, [r3, #4]
 810fa2e:	69ba      	ldr	r2, [r7, #24]
 810fa30:	429a      	cmp	r2, r3
 810fa32:	d302      	bcc.n	810fa3a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 810fa34:	2301      	movs	r3, #1
 810fa36:	61fb      	str	r3, [r7, #28]
 810fa38:	e015      	b.n	810fa66 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 810fa3a:	683b      	ldr	r3, [r7, #0]
 810fa3c:	681b      	ldr	r3, [r3, #0]
 810fa3e:	697a      	ldr	r2, [r7, #20]
 810fa40:	429a      	cmp	r2, r3
 810fa42:	d20b      	bcs.n	810fa5c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 810fa44:	683b      	ldr	r3, [r7, #0]
 810fa46:	681a      	ldr	r2, [r3, #0]
 810fa48:	697b      	ldr	r3, [r7, #20]
 810fa4a:	1ad2      	subs	r2, r2, r3
 810fa4c:	683b      	ldr	r3, [r7, #0]
 810fa4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 810fa50:	6878      	ldr	r0, [r7, #4]
 810fa52:	f7ff ff99 	bl	810f988 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 810fa56:	2300      	movs	r3, #0
 810fa58:	61fb      	str	r3, [r7, #28]
 810fa5a:	e004      	b.n	810fa66 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 810fa5c:	683b      	ldr	r3, [r7, #0]
 810fa5e:	2200      	movs	r2, #0
 810fa60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 810fa62:	2301      	movs	r3, #1
 810fa64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 810fa66:	f7fd fc61 	bl	810d32c <vPortExitCritical>

	return xReturn;
 810fa6a:	69fb      	ldr	r3, [r7, #28]
}
 810fa6c:	4618      	mov	r0, r3
 810fa6e:	3720      	adds	r7, #32
 810fa70:	46bd      	mov	sp, r7
 810fa72:	bd80      	pop	{r7, pc}
 810fa74:	1000affc 	.word	0x1000affc
 810fa78:	1000b010 	.word	0x1000b010

0810fa7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 810fa7c:	b480      	push	{r7}
 810fa7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 810fa80:	4b03      	ldr	r3, [pc, #12]	@ (810fa90 <vTaskMissedYield+0x14>)
 810fa82:	2201      	movs	r2, #1
 810fa84:	601a      	str	r2, [r3, #0]
}
 810fa86:	bf00      	nop
 810fa88:	46bd      	mov	sp, r7
 810fa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fa8e:	4770      	bx	lr
 810fa90:	1000b00c 	.word	0x1000b00c

0810fa94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 810fa94:	b580      	push	{r7, lr}
 810fa96:	b082      	sub	sp, #8
 810fa98:	af00      	add	r7, sp, #0
 810fa9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 810fa9c:	f000 f852 	bl	810fb44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 810faa0:	4b06      	ldr	r3, [pc, #24]	@ (810fabc <prvIdleTask+0x28>)
 810faa2:	681b      	ldr	r3, [r3, #0]
 810faa4:	2b01      	cmp	r3, #1
 810faa6:	d9f9      	bls.n	810fa9c <prvIdleTask+0x8>
			{
				taskYIELD();
 810faa8:	4b05      	ldr	r3, [pc, #20]	@ (810fac0 <prvIdleTask+0x2c>)
 810faaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810faae:	601a      	str	r2, [r3, #0]
 810fab0:	f3bf 8f4f 	dsb	sy
 810fab4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 810fab8:	e7f0      	b.n	810fa9c <prvIdleTask+0x8>
 810faba:	bf00      	nop
 810fabc:	1000ab28 	.word	0x1000ab28
 810fac0:	e000ed04 	.word	0xe000ed04

0810fac4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 810fac4:	b580      	push	{r7, lr}
 810fac6:	b082      	sub	sp, #8
 810fac8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810faca:	2300      	movs	r3, #0
 810facc:	607b      	str	r3, [r7, #4]
 810face:	e00c      	b.n	810faea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 810fad0:	687a      	ldr	r2, [r7, #4]
 810fad2:	4613      	mov	r3, r2
 810fad4:	009b      	lsls	r3, r3, #2
 810fad6:	4413      	add	r3, r2
 810fad8:	009b      	lsls	r3, r3, #2
 810fada:	4a12      	ldr	r2, [pc, #72]	@ (810fb24 <prvInitialiseTaskLists+0x60>)
 810fadc:	4413      	add	r3, r2
 810fade:	4618      	mov	r0, r3
 810fae0:	f7fd fa0a 	bl	810cef8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810fae4:	687b      	ldr	r3, [r7, #4]
 810fae6:	3301      	adds	r3, #1
 810fae8:	607b      	str	r3, [r7, #4]
 810faea:	687b      	ldr	r3, [r7, #4]
 810faec:	2b37      	cmp	r3, #55	@ 0x37
 810faee:	d9ef      	bls.n	810fad0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 810faf0:	480d      	ldr	r0, [pc, #52]	@ (810fb28 <prvInitialiseTaskLists+0x64>)
 810faf2:	f7fd fa01 	bl	810cef8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 810faf6:	480d      	ldr	r0, [pc, #52]	@ (810fb2c <prvInitialiseTaskLists+0x68>)
 810faf8:	f7fd f9fe 	bl	810cef8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 810fafc:	480c      	ldr	r0, [pc, #48]	@ (810fb30 <prvInitialiseTaskLists+0x6c>)
 810fafe:	f7fd f9fb 	bl	810cef8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 810fb02:	480c      	ldr	r0, [pc, #48]	@ (810fb34 <prvInitialiseTaskLists+0x70>)
 810fb04:	f7fd f9f8 	bl	810cef8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 810fb08:	480b      	ldr	r0, [pc, #44]	@ (810fb38 <prvInitialiseTaskLists+0x74>)
 810fb0a:	f7fd f9f5 	bl	810cef8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 810fb0e:	4b0b      	ldr	r3, [pc, #44]	@ (810fb3c <prvInitialiseTaskLists+0x78>)
 810fb10:	4a05      	ldr	r2, [pc, #20]	@ (810fb28 <prvInitialiseTaskLists+0x64>)
 810fb12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 810fb14:	4b0a      	ldr	r3, [pc, #40]	@ (810fb40 <prvInitialiseTaskLists+0x7c>)
 810fb16:	4a05      	ldr	r2, [pc, #20]	@ (810fb2c <prvInitialiseTaskLists+0x68>)
 810fb18:	601a      	str	r2, [r3, #0]
}
 810fb1a:	bf00      	nop
 810fb1c:	3708      	adds	r7, #8
 810fb1e:	46bd      	mov	sp, r7
 810fb20:	bd80      	pop	{r7, pc}
 810fb22:	bf00      	nop
 810fb24:	1000ab28 	.word	0x1000ab28
 810fb28:	1000af88 	.word	0x1000af88
 810fb2c:	1000af9c 	.word	0x1000af9c
 810fb30:	1000afb8 	.word	0x1000afb8
 810fb34:	1000afcc 	.word	0x1000afcc
 810fb38:	1000afe4 	.word	0x1000afe4
 810fb3c:	1000afb0 	.word	0x1000afb0
 810fb40:	1000afb4 	.word	0x1000afb4

0810fb44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 810fb44:	b580      	push	{r7, lr}
 810fb46:	b082      	sub	sp, #8
 810fb48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810fb4a:	e019      	b.n	810fb80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 810fb4c:	f7fd fbbc 	bl	810d2c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810fb50:	4b10      	ldr	r3, [pc, #64]	@ (810fb94 <prvCheckTasksWaitingTermination+0x50>)
 810fb52:	68db      	ldr	r3, [r3, #12]
 810fb54:	68db      	ldr	r3, [r3, #12]
 810fb56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810fb58:	687b      	ldr	r3, [r7, #4]
 810fb5a:	3304      	adds	r3, #4
 810fb5c:	4618      	mov	r0, r3
 810fb5e:	f7fd fa55 	bl	810d00c <uxListRemove>
				--uxCurrentNumberOfTasks;
 810fb62:	4b0d      	ldr	r3, [pc, #52]	@ (810fb98 <prvCheckTasksWaitingTermination+0x54>)
 810fb64:	681b      	ldr	r3, [r3, #0]
 810fb66:	3b01      	subs	r3, #1
 810fb68:	4a0b      	ldr	r2, [pc, #44]	@ (810fb98 <prvCheckTasksWaitingTermination+0x54>)
 810fb6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 810fb6c:	4b0b      	ldr	r3, [pc, #44]	@ (810fb9c <prvCheckTasksWaitingTermination+0x58>)
 810fb6e:	681b      	ldr	r3, [r3, #0]
 810fb70:	3b01      	subs	r3, #1
 810fb72:	4a0a      	ldr	r2, [pc, #40]	@ (810fb9c <prvCheckTasksWaitingTermination+0x58>)
 810fb74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 810fb76:	f7fd fbd9 	bl	810d32c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 810fb7a:	6878      	ldr	r0, [r7, #4]
 810fb7c:	f000 f810 	bl	810fba0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810fb80:	4b06      	ldr	r3, [pc, #24]	@ (810fb9c <prvCheckTasksWaitingTermination+0x58>)
 810fb82:	681b      	ldr	r3, [r3, #0]
 810fb84:	2b00      	cmp	r3, #0
 810fb86:	d1e1      	bne.n	810fb4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 810fb88:	bf00      	nop
 810fb8a:	bf00      	nop
 810fb8c:	3708      	adds	r7, #8
 810fb8e:	46bd      	mov	sp, r7
 810fb90:	bd80      	pop	{r7, pc}
 810fb92:	bf00      	nop
 810fb94:	1000afcc 	.word	0x1000afcc
 810fb98:	1000aff8 	.word	0x1000aff8
 810fb9c:	1000afe0 	.word	0x1000afe0

0810fba0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 810fba0:	b580      	push	{r7, lr}
 810fba2:	b084      	sub	sp, #16
 810fba4:	af00      	add	r7, sp, #0
 810fba6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 810fba8:	687b      	ldr	r3, [r7, #4]
 810fbaa:	3354      	adds	r3, #84	@ 0x54
 810fbac:	4618      	mov	r0, r3
 810fbae:	f00c fa27 	bl	811c000 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 810fbb2:	687b      	ldr	r3, [r7, #4]
 810fbb4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 810fbb8:	2b00      	cmp	r3, #0
 810fbba:	d108      	bne.n	810fbce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 810fbbc:	687b      	ldr	r3, [r7, #4]
 810fbbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810fbc0:	4618      	mov	r0, r3
 810fbc2:	f7fd f879 	bl	810ccb8 <vPortFree>
				vPortFree( pxTCB );
 810fbc6:	6878      	ldr	r0, [r7, #4]
 810fbc8:	f7fd f876 	bl	810ccb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 810fbcc:	e019      	b.n	810fc02 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 810fbce:	687b      	ldr	r3, [r7, #4]
 810fbd0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 810fbd4:	2b01      	cmp	r3, #1
 810fbd6:	d103      	bne.n	810fbe0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 810fbd8:	6878      	ldr	r0, [r7, #4]
 810fbda:	f7fd f86d 	bl	810ccb8 <vPortFree>
	}
 810fbde:	e010      	b.n	810fc02 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 810fbe0:	687b      	ldr	r3, [r7, #4]
 810fbe2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 810fbe6:	2b02      	cmp	r3, #2
 810fbe8:	d00b      	beq.n	810fc02 <prvDeleteTCB+0x62>
	__asm volatile
 810fbea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810fbee:	f383 8811 	msr	BASEPRI, r3
 810fbf2:	f3bf 8f6f 	isb	sy
 810fbf6:	f3bf 8f4f 	dsb	sy
 810fbfa:	60fb      	str	r3, [r7, #12]
}
 810fbfc:	bf00      	nop
 810fbfe:	bf00      	nop
 810fc00:	e7fd      	b.n	810fbfe <prvDeleteTCB+0x5e>
	}
 810fc02:	bf00      	nop
 810fc04:	3710      	adds	r7, #16
 810fc06:	46bd      	mov	sp, r7
 810fc08:	bd80      	pop	{r7, pc}
	...

0810fc0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 810fc0c:	b480      	push	{r7}
 810fc0e:	b083      	sub	sp, #12
 810fc10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810fc12:	4b0c      	ldr	r3, [pc, #48]	@ (810fc44 <prvResetNextTaskUnblockTime+0x38>)
 810fc14:	681b      	ldr	r3, [r3, #0]
 810fc16:	681b      	ldr	r3, [r3, #0]
 810fc18:	2b00      	cmp	r3, #0
 810fc1a:	d104      	bne.n	810fc26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 810fc1c:	4b0a      	ldr	r3, [pc, #40]	@ (810fc48 <prvResetNextTaskUnblockTime+0x3c>)
 810fc1e:	f04f 32ff 	mov.w	r2, #4294967295
 810fc22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 810fc24:	e008      	b.n	810fc38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810fc26:	4b07      	ldr	r3, [pc, #28]	@ (810fc44 <prvResetNextTaskUnblockTime+0x38>)
 810fc28:	681b      	ldr	r3, [r3, #0]
 810fc2a:	68db      	ldr	r3, [r3, #12]
 810fc2c:	68db      	ldr	r3, [r3, #12]
 810fc2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 810fc30:	687b      	ldr	r3, [r7, #4]
 810fc32:	685b      	ldr	r3, [r3, #4]
 810fc34:	4a04      	ldr	r2, [pc, #16]	@ (810fc48 <prvResetNextTaskUnblockTime+0x3c>)
 810fc36:	6013      	str	r3, [r2, #0]
}
 810fc38:	bf00      	nop
 810fc3a:	370c      	adds	r7, #12
 810fc3c:	46bd      	mov	sp, r7
 810fc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fc42:	4770      	bx	lr
 810fc44:	1000afb0 	.word	0x1000afb0
 810fc48:	1000b018 	.word	0x1000b018

0810fc4c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 810fc4c:	b480      	push	{r7}
 810fc4e:	b083      	sub	sp, #12
 810fc50:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 810fc52:	4b05      	ldr	r3, [pc, #20]	@ (810fc68 <xTaskGetCurrentTaskHandle+0x1c>)
 810fc54:	681b      	ldr	r3, [r3, #0]
 810fc56:	607b      	str	r3, [r7, #4]

		return xReturn;
 810fc58:	687b      	ldr	r3, [r7, #4]
	}
 810fc5a:	4618      	mov	r0, r3
 810fc5c:	370c      	adds	r7, #12
 810fc5e:	46bd      	mov	sp, r7
 810fc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fc64:	4770      	bx	lr
 810fc66:	bf00      	nop
 810fc68:	1000ab24 	.word	0x1000ab24

0810fc6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 810fc6c:	b480      	push	{r7}
 810fc6e:	b083      	sub	sp, #12
 810fc70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 810fc72:	4b0b      	ldr	r3, [pc, #44]	@ (810fca0 <xTaskGetSchedulerState+0x34>)
 810fc74:	681b      	ldr	r3, [r3, #0]
 810fc76:	2b00      	cmp	r3, #0
 810fc78:	d102      	bne.n	810fc80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 810fc7a:	2301      	movs	r3, #1
 810fc7c:	607b      	str	r3, [r7, #4]
 810fc7e:	e008      	b.n	810fc92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810fc80:	4b08      	ldr	r3, [pc, #32]	@ (810fca4 <xTaskGetSchedulerState+0x38>)
 810fc82:	681b      	ldr	r3, [r3, #0]
 810fc84:	2b00      	cmp	r3, #0
 810fc86:	d102      	bne.n	810fc8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 810fc88:	2302      	movs	r3, #2
 810fc8a:	607b      	str	r3, [r7, #4]
 810fc8c:	e001      	b.n	810fc92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 810fc8e:	2300      	movs	r3, #0
 810fc90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 810fc92:	687b      	ldr	r3, [r7, #4]
	}
 810fc94:	4618      	mov	r0, r3
 810fc96:	370c      	adds	r7, #12
 810fc98:	46bd      	mov	sp, r7
 810fc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fc9e:	4770      	bx	lr
 810fca0:	1000b004 	.word	0x1000b004
 810fca4:	1000b020 	.word	0x1000b020

0810fca8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 810fca8:	b580      	push	{r7, lr}
 810fcaa:	b084      	sub	sp, #16
 810fcac:	af00      	add	r7, sp, #0
 810fcae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 810fcb0:	687b      	ldr	r3, [r7, #4]
 810fcb2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 810fcb4:	2300      	movs	r3, #0
 810fcb6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 810fcb8:	687b      	ldr	r3, [r7, #4]
 810fcba:	2b00      	cmp	r3, #0
 810fcbc:	d051      	beq.n	810fd62 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 810fcbe:	68bb      	ldr	r3, [r7, #8]
 810fcc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810fcc2:	4b2a      	ldr	r3, [pc, #168]	@ (810fd6c <xTaskPriorityInherit+0xc4>)
 810fcc4:	681b      	ldr	r3, [r3, #0]
 810fcc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810fcc8:	429a      	cmp	r2, r3
 810fcca:	d241      	bcs.n	810fd50 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 810fccc:	68bb      	ldr	r3, [r7, #8]
 810fcce:	699b      	ldr	r3, [r3, #24]
 810fcd0:	2b00      	cmp	r3, #0
 810fcd2:	db06      	blt.n	810fce2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810fcd4:	4b25      	ldr	r3, [pc, #148]	@ (810fd6c <xTaskPriorityInherit+0xc4>)
 810fcd6:	681b      	ldr	r3, [r3, #0]
 810fcd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810fcda:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810fcde:	68bb      	ldr	r3, [r7, #8]
 810fce0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 810fce2:	68bb      	ldr	r3, [r7, #8]
 810fce4:	6959      	ldr	r1, [r3, #20]
 810fce6:	68bb      	ldr	r3, [r7, #8]
 810fce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810fcea:	4613      	mov	r3, r2
 810fcec:	009b      	lsls	r3, r3, #2
 810fcee:	4413      	add	r3, r2
 810fcf0:	009b      	lsls	r3, r3, #2
 810fcf2:	4a1f      	ldr	r2, [pc, #124]	@ (810fd70 <xTaskPriorityInherit+0xc8>)
 810fcf4:	4413      	add	r3, r2
 810fcf6:	4299      	cmp	r1, r3
 810fcf8:	d122      	bne.n	810fd40 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810fcfa:	68bb      	ldr	r3, [r7, #8]
 810fcfc:	3304      	adds	r3, #4
 810fcfe:	4618      	mov	r0, r3
 810fd00:	f7fd f984 	bl	810d00c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 810fd04:	4b19      	ldr	r3, [pc, #100]	@ (810fd6c <xTaskPriorityInherit+0xc4>)
 810fd06:	681b      	ldr	r3, [r3, #0]
 810fd08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810fd0a:	68bb      	ldr	r3, [r7, #8]
 810fd0c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 810fd0e:	68bb      	ldr	r3, [r7, #8]
 810fd10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810fd12:	4b18      	ldr	r3, [pc, #96]	@ (810fd74 <xTaskPriorityInherit+0xcc>)
 810fd14:	681b      	ldr	r3, [r3, #0]
 810fd16:	429a      	cmp	r2, r3
 810fd18:	d903      	bls.n	810fd22 <xTaskPriorityInherit+0x7a>
 810fd1a:	68bb      	ldr	r3, [r7, #8]
 810fd1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810fd1e:	4a15      	ldr	r2, [pc, #84]	@ (810fd74 <xTaskPriorityInherit+0xcc>)
 810fd20:	6013      	str	r3, [r2, #0]
 810fd22:	68bb      	ldr	r3, [r7, #8]
 810fd24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810fd26:	4613      	mov	r3, r2
 810fd28:	009b      	lsls	r3, r3, #2
 810fd2a:	4413      	add	r3, r2
 810fd2c:	009b      	lsls	r3, r3, #2
 810fd2e:	4a10      	ldr	r2, [pc, #64]	@ (810fd70 <xTaskPriorityInherit+0xc8>)
 810fd30:	441a      	add	r2, r3
 810fd32:	68bb      	ldr	r3, [r7, #8]
 810fd34:	3304      	adds	r3, #4
 810fd36:	4619      	mov	r1, r3
 810fd38:	4610      	mov	r0, r2
 810fd3a:	f7fd f90a 	bl	810cf52 <vListInsertEnd>
 810fd3e:	e004      	b.n	810fd4a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 810fd40:	4b0a      	ldr	r3, [pc, #40]	@ (810fd6c <xTaskPriorityInherit+0xc4>)
 810fd42:	681b      	ldr	r3, [r3, #0]
 810fd44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810fd46:	68bb      	ldr	r3, [r7, #8]
 810fd48:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 810fd4a:	2301      	movs	r3, #1
 810fd4c:	60fb      	str	r3, [r7, #12]
 810fd4e:	e008      	b.n	810fd62 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 810fd50:	68bb      	ldr	r3, [r7, #8]
 810fd52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810fd54:	4b05      	ldr	r3, [pc, #20]	@ (810fd6c <xTaskPriorityInherit+0xc4>)
 810fd56:	681b      	ldr	r3, [r3, #0]
 810fd58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810fd5a:	429a      	cmp	r2, r3
 810fd5c:	d201      	bcs.n	810fd62 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 810fd5e:	2301      	movs	r3, #1
 810fd60:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810fd62:	68fb      	ldr	r3, [r7, #12]
	}
 810fd64:	4618      	mov	r0, r3
 810fd66:	3710      	adds	r7, #16
 810fd68:	46bd      	mov	sp, r7
 810fd6a:	bd80      	pop	{r7, pc}
 810fd6c:	1000ab24 	.word	0x1000ab24
 810fd70:	1000ab28 	.word	0x1000ab28
 810fd74:	1000b000 	.word	0x1000b000

0810fd78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 810fd78:	b580      	push	{r7, lr}
 810fd7a:	b086      	sub	sp, #24
 810fd7c:	af00      	add	r7, sp, #0
 810fd7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 810fd80:	687b      	ldr	r3, [r7, #4]
 810fd82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 810fd84:	2300      	movs	r3, #0
 810fd86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810fd88:	687b      	ldr	r3, [r7, #4]
 810fd8a:	2b00      	cmp	r3, #0
 810fd8c:	d058      	beq.n	810fe40 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 810fd8e:	4b2f      	ldr	r3, [pc, #188]	@ (810fe4c <xTaskPriorityDisinherit+0xd4>)
 810fd90:	681b      	ldr	r3, [r3, #0]
 810fd92:	693a      	ldr	r2, [r7, #16]
 810fd94:	429a      	cmp	r2, r3
 810fd96:	d00b      	beq.n	810fdb0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 810fd98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810fd9c:	f383 8811 	msr	BASEPRI, r3
 810fda0:	f3bf 8f6f 	isb	sy
 810fda4:	f3bf 8f4f 	dsb	sy
 810fda8:	60fb      	str	r3, [r7, #12]
}
 810fdaa:	bf00      	nop
 810fdac:	bf00      	nop
 810fdae:	e7fd      	b.n	810fdac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 810fdb0:	693b      	ldr	r3, [r7, #16]
 810fdb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810fdb4:	2b00      	cmp	r3, #0
 810fdb6:	d10b      	bne.n	810fdd0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 810fdb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810fdbc:	f383 8811 	msr	BASEPRI, r3
 810fdc0:	f3bf 8f6f 	isb	sy
 810fdc4:	f3bf 8f4f 	dsb	sy
 810fdc8:	60bb      	str	r3, [r7, #8]
}
 810fdca:	bf00      	nop
 810fdcc:	bf00      	nop
 810fdce:	e7fd      	b.n	810fdcc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 810fdd0:	693b      	ldr	r3, [r7, #16]
 810fdd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810fdd4:	1e5a      	subs	r2, r3, #1
 810fdd6:	693b      	ldr	r3, [r7, #16]
 810fdd8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 810fdda:	693b      	ldr	r3, [r7, #16]
 810fddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810fdde:	693b      	ldr	r3, [r7, #16]
 810fde0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810fde2:	429a      	cmp	r2, r3
 810fde4:	d02c      	beq.n	810fe40 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 810fde6:	693b      	ldr	r3, [r7, #16]
 810fde8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810fdea:	2b00      	cmp	r3, #0
 810fdec:	d128      	bne.n	810fe40 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810fdee:	693b      	ldr	r3, [r7, #16]
 810fdf0:	3304      	adds	r3, #4
 810fdf2:	4618      	mov	r0, r3
 810fdf4:	f7fd f90a 	bl	810d00c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 810fdf8:	693b      	ldr	r3, [r7, #16]
 810fdfa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810fdfc:	693b      	ldr	r3, [r7, #16]
 810fdfe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810fe00:	693b      	ldr	r3, [r7, #16]
 810fe02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810fe04:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810fe08:	693b      	ldr	r3, [r7, #16]
 810fe0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 810fe0c:	693b      	ldr	r3, [r7, #16]
 810fe0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810fe10:	4b0f      	ldr	r3, [pc, #60]	@ (810fe50 <xTaskPriorityDisinherit+0xd8>)
 810fe12:	681b      	ldr	r3, [r3, #0]
 810fe14:	429a      	cmp	r2, r3
 810fe16:	d903      	bls.n	810fe20 <xTaskPriorityDisinherit+0xa8>
 810fe18:	693b      	ldr	r3, [r7, #16]
 810fe1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810fe1c:	4a0c      	ldr	r2, [pc, #48]	@ (810fe50 <xTaskPriorityDisinherit+0xd8>)
 810fe1e:	6013      	str	r3, [r2, #0]
 810fe20:	693b      	ldr	r3, [r7, #16]
 810fe22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810fe24:	4613      	mov	r3, r2
 810fe26:	009b      	lsls	r3, r3, #2
 810fe28:	4413      	add	r3, r2
 810fe2a:	009b      	lsls	r3, r3, #2
 810fe2c:	4a09      	ldr	r2, [pc, #36]	@ (810fe54 <xTaskPriorityDisinherit+0xdc>)
 810fe2e:	441a      	add	r2, r3
 810fe30:	693b      	ldr	r3, [r7, #16]
 810fe32:	3304      	adds	r3, #4
 810fe34:	4619      	mov	r1, r3
 810fe36:	4610      	mov	r0, r2
 810fe38:	f7fd f88b 	bl	810cf52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 810fe3c:	2301      	movs	r3, #1
 810fe3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810fe40:	697b      	ldr	r3, [r7, #20]
	}
 810fe42:	4618      	mov	r0, r3
 810fe44:	3718      	adds	r7, #24
 810fe46:	46bd      	mov	sp, r7
 810fe48:	bd80      	pop	{r7, pc}
 810fe4a:	bf00      	nop
 810fe4c:	1000ab24 	.word	0x1000ab24
 810fe50:	1000b000 	.word	0x1000b000
 810fe54:	1000ab28 	.word	0x1000ab28

0810fe58 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 810fe58:	b580      	push	{r7, lr}
 810fe5a:	b088      	sub	sp, #32
 810fe5c:	af00      	add	r7, sp, #0
 810fe5e:	6078      	str	r0, [r7, #4]
 810fe60:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 810fe62:	687b      	ldr	r3, [r7, #4]
 810fe64:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 810fe66:	2301      	movs	r3, #1
 810fe68:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810fe6a:	687b      	ldr	r3, [r7, #4]
 810fe6c:	2b00      	cmp	r3, #0
 810fe6e:	d06c      	beq.n	810ff4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 810fe70:	69bb      	ldr	r3, [r7, #24]
 810fe72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810fe74:	2b00      	cmp	r3, #0
 810fe76:	d10b      	bne.n	810fe90 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 810fe78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810fe7c:	f383 8811 	msr	BASEPRI, r3
 810fe80:	f3bf 8f6f 	isb	sy
 810fe84:	f3bf 8f4f 	dsb	sy
 810fe88:	60fb      	str	r3, [r7, #12]
}
 810fe8a:	bf00      	nop
 810fe8c:	bf00      	nop
 810fe8e:	e7fd      	b.n	810fe8c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 810fe90:	69bb      	ldr	r3, [r7, #24]
 810fe92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810fe94:	683a      	ldr	r2, [r7, #0]
 810fe96:	429a      	cmp	r2, r3
 810fe98:	d902      	bls.n	810fea0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 810fe9a:	683b      	ldr	r3, [r7, #0]
 810fe9c:	61fb      	str	r3, [r7, #28]
 810fe9e:	e002      	b.n	810fea6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 810fea0:	69bb      	ldr	r3, [r7, #24]
 810fea2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810fea4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 810fea6:	69bb      	ldr	r3, [r7, #24]
 810fea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810feaa:	69fa      	ldr	r2, [r7, #28]
 810feac:	429a      	cmp	r2, r3
 810feae:	d04c      	beq.n	810ff4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 810feb0:	69bb      	ldr	r3, [r7, #24]
 810feb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810feb4:	697a      	ldr	r2, [r7, #20]
 810feb6:	429a      	cmp	r2, r3
 810feb8:	d147      	bne.n	810ff4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 810feba:	4b26      	ldr	r3, [pc, #152]	@ (810ff54 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 810febc:	681b      	ldr	r3, [r3, #0]
 810febe:	69ba      	ldr	r2, [r7, #24]
 810fec0:	429a      	cmp	r2, r3
 810fec2:	d10b      	bne.n	810fedc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 810fec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810fec8:	f383 8811 	msr	BASEPRI, r3
 810fecc:	f3bf 8f6f 	isb	sy
 810fed0:	f3bf 8f4f 	dsb	sy
 810fed4:	60bb      	str	r3, [r7, #8]
}
 810fed6:	bf00      	nop
 810fed8:	bf00      	nop
 810feda:	e7fd      	b.n	810fed8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 810fedc:	69bb      	ldr	r3, [r7, #24]
 810fede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810fee0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 810fee2:	69bb      	ldr	r3, [r7, #24]
 810fee4:	69fa      	ldr	r2, [r7, #28]
 810fee6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 810fee8:	69bb      	ldr	r3, [r7, #24]
 810feea:	699b      	ldr	r3, [r3, #24]
 810feec:	2b00      	cmp	r3, #0
 810feee:	db04      	blt.n	810fefa <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810fef0:	69fb      	ldr	r3, [r7, #28]
 810fef2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810fef6:	69bb      	ldr	r3, [r7, #24]
 810fef8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 810fefa:	69bb      	ldr	r3, [r7, #24]
 810fefc:	6959      	ldr	r1, [r3, #20]
 810fefe:	693a      	ldr	r2, [r7, #16]
 810ff00:	4613      	mov	r3, r2
 810ff02:	009b      	lsls	r3, r3, #2
 810ff04:	4413      	add	r3, r2
 810ff06:	009b      	lsls	r3, r3, #2
 810ff08:	4a13      	ldr	r2, [pc, #76]	@ (810ff58 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 810ff0a:	4413      	add	r3, r2
 810ff0c:	4299      	cmp	r1, r3
 810ff0e:	d11c      	bne.n	810ff4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810ff10:	69bb      	ldr	r3, [r7, #24]
 810ff12:	3304      	adds	r3, #4
 810ff14:	4618      	mov	r0, r3
 810ff16:	f7fd f879 	bl	810d00c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 810ff1a:	69bb      	ldr	r3, [r7, #24]
 810ff1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ff1e:	4b0f      	ldr	r3, [pc, #60]	@ (810ff5c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 810ff20:	681b      	ldr	r3, [r3, #0]
 810ff22:	429a      	cmp	r2, r3
 810ff24:	d903      	bls.n	810ff2e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 810ff26:	69bb      	ldr	r3, [r7, #24]
 810ff28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ff2a:	4a0c      	ldr	r2, [pc, #48]	@ (810ff5c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 810ff2c:	6013      	str	r3, [r2, #0]
 810ff2e:	69bb      	ldr	r3, [r7, #24]
 810ff30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ff32:	4613      	mov	r3, r2
 810ff34:	009b      	lsls	r3, r3, #2
 810ff36:	4413      	add	r3, r2
 810ff38:	009b      	lsls	r3, r3, #2
 810ff3a:	4a07      	ldr	r2, [pc, #28]	@ (810ff58 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 810ff3c:	441a      	add	r2, r3
 810ff3e:	69bb      	ldr	r3, [r7, #24]
 810ff40:	3304      	adds	r3, #4
 810ff42:	4619      	mov	r1, r3
 810ff44:	4610      	mov	r0, r2
 810ff46:	f7fd f804 	bl	810cf52 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810ff4a:	bf00      	nop
 810ff4c:	3720      	adds	r7, #32
 810ff4e:	46bd      	mov	sp, r7
 810ff50:	bd80      	pop	{r7, pc}
 810ff52:	bf00      	nop
 810ff54:	1000ab24 	.word	0x1000ab24
 810ff58:	1000ab28 	.word	0x1000ab28
 810ff5c:	1000b000 	.word	0x1000b000

0810ff60 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 810ff60:	b480      	push	{r7}
 810ff62:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 810ff64:	4b07      	ldr	r3, [pc, #28]	@ (810ff84 <pvTaskIncrementMutexHeldCount+0x24>)
 810ff66:	681b      	ldr	r3, [r3, #0]
 810ff68:	2b00      	cmp	r3, #0
 810ff6a:	d004      	beq.n	810ff76 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 810ff6c:	4b05      	ldr	r3, [pc, #20]	@ (810ff84 <pvTaskIncrementMutexHeldCount+0x24>)
 810ff6e:	681b      	ldr	r3, [r3, #0]
 810ff70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 810ff72:	3201      	adds	r2, #1
 810ff74:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 810ff76:	4b03      	ldr	r3, [pc, #12]	@ (810ff84 <pvTaskIncrementMutexHeldCount+0x24>)
 810ff78:	681b      	ldr	r3, [r3, #0]
	}
 810ff7a:	4618      	mov	r0, r3
 810ff7c:	46bd      	mov	sp, r7
 810ff7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ff82:	4770      	bx	lr
 810ff84:	1000ab24 	.word	0x1000ab24

0810ff88 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 810ff88:	b580      	push	{r7, lr}
 810ff8a:	b086      	sub	sp, #24
 810ff8c:	af00      	add	r7, sp, #0
 810ff8e:	60f8      	str	r0, [r7, #12]
 810ff90:	60b9      	str	r1, [r7, #8]
 810ff92:	607a      	str	r2, [r7, #4]
 810ff94:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 810ff96:	f7fd f997 	bl	810d2c8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 810ff9a:	4b29      	ldr	r3, [pc, #164]	@ (8110040 <xTaskNotifyWait+0xb8>)
 810ff9c:	681b      	ldr	r3, [r3, #0]
 810ff9e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 810ffa2:	b2db      	uxtb	r3, r3
 810ffa4:	2b02      	cmp	r3, #2
 810ffa6:	d01c      	beq.n	810ffe2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 810ffa8:	4b25      	ldr	r3, [pc, #148]	@ (8110040 <xTaskNotifyWait+0xb8>)
 810ffaa:	681b      	ldr	r3, [r3, #0]
 810ffac:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 810ffb0:	68fa      	ldr	r2, [r7, #12]
 810ffb2:	43d2      	mvns	r2, r2
 810ffb4:	400a      	ands	r2, r1
 810ffb6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 810ffba:	4b21      	ldr	r3, [pc, #132]	@ (8110040 <xTaskNotifyWait+0xb8>)
 810ffbc:	681b      	ldr	r3, [r3, #0]
 810ffbe:	2201      	movs	r2, #1
 810ffc0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 810ffc4:	683b      	ldr	r3, [r7, #0]
 810ffc6:	2b00      	cmp	r3, #0
 810ffc8:	d00b      	beq.n	810ffe2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 810ffca:	2101      	movs	r1, #1
 810ffcc:	6838      	ldr	r0, [r7, #0]
 810ffce:	f000 f947 	bl	8110260 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 810ffd2:	4b1c      	ldr	r3, [pc, #112]	@ (8110044 <xTaskNotifyWait+0xbc>)
 810ffd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810ffd8:	601a      	str	r2, [r3, #0]
 810ffda:	f3bf 8f4f 	dsb	sy
 810ffde:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 810ffe2:	f7fd f9a3 	bl	810d32c <vPortExitCritical>

		taskENTER_CRITICAL();
 810ffe6:	f7fd f96f 	bl	810d2c8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 810ffea:	687b      	ldr	r3, [r7, #4]
 810ffec:	2b00      	cmp	r3, #0
 810ffee:	d005      	beq.n	810fffc <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 810fff0:	4b13      	ldr	r3, [pc, #76]	@ (8110040 <xTaskNotifyWait+0xb8>)
 810fff2:	681b      	ldr	r3, [r3, #0]
 810fff4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 810fff8:	687b      	ldr	r3, [r7, #4]
 810fffa:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 810fffc:	4b10      	ldr	r3, [pc, #64]	@ (8110040 <xTaskNotifyWait+0xb8>)
 810fffe:	681b      	ldr	r3, [r3, #0]
 8110000:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8110004:	b2db      	uxtb	r3, r3
 8110006:	2b02      	cmp	r3, #2
 8110008:	d002      	beq.n	8110010 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 811000a:	2300      	movs	r3, #0
 811000c:	617b      	str	r3, [r7, #20]
 811000e:	e00a      	b.n	8110026 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8110010:	4b0b      	ldr	r3, [pc, #44]	@ (8110040 <xTaskNotifyWait+0xb8>)
 8110012:	681b      	ldr	r3, [r3, #0]
 8110014:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8110018:	68ba      	ldr	r2, [r7, #8]
 811001a:	43d2      	mvns	r2, r2
 811001c:	400a      	ands	r2, r1
 811001e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 8110022:	2301      	movs	r3, #1
 8110024:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8110026:	4b06      	ldr	r3, [pc, #24]	@ (8110040 <xTaskNotifyWait+0xb8>)
 8110028:	681b      	ldr	r3, [r3, #0]
 811002a:	2200      	movs	r2, #0
 811002c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8110030:	f7fd f97c 	bl	810d32c <vPortExitCritical>

		return xReturn;
 8110034:	697b      	ldr	r3, [r7, #20]
	}
 8110036:	4618      	mov	r0, r3
 8110038:	3718      	adds	r7, #24
 811003a:	46bd      	mov	sp, r7
 811003c:	bd80      	pop	{r7, pc}
 811003e:	bf00      	nop
 8110040:	1000ab24 	.word	0x1000ab24
 8110044:	e000ed04 	.word	0xe000ed04

08110048 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8110048:	b580      	push	{r7, lr}
 811004a:	b08e      	sub	sp, #56	@ 0x38
 811004c:	af00      	add	r7, sp, #0
 811004e:	60f8      	str	r0, [r7, #12]
 8110050:	60b9      	str	r1, [r7, #8]
 8110052:	603b      	str	r3, [r7, #0]
 8110054:	4613      	mov	r3, r2
 8110056:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8110058:	2301      	movs	r3, #1
 811005a:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 811005c:	68fb      	ldr	r3, [r7, #12]
 811005e:	2b00      	cmp	r3, #0
 8110060:	d10b      	bne.n	811007a <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8110062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110066:	f383 8811 	msr	BASEPRI, r3
 811006a:	f3bf 8f6f 	isb	sy
 811006e:	f3bf 8f4f 	dsb	sy
 8110072:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8110074:	bf00      	nop
 8110076:	bf00      	nop
 8110078:	e7fd      	b.n	8110076 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 811007a:	f7fd fa05 	bl	810d488 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 811007e:	68fb      	ldr	r3, [r7, #12]
 8110080:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8110082:	f3ef 8211 	mrs	r2, BASEPRI
 8110086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811008a:	f383 8811 	msr	BASEPRI, r3
 811008e:	f3bf 8f6f 	isb	sy
 8110092:	f3bf 8f4f 	dsb	sy
 8110096:	623a      	str	r2, [r7, #32]
 8110098:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 811009a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 811009c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 811009e:	683b      	ldr	r3, [r7, #0]
 81100a0:	2b00      	cmp	r3, #0
 81100a2:	d004      	beq.n	81100ae <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 81100a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81100a6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 81100aa:	683b      	ldr	r3, [r7, #0]
 81100ac:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 81100ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81100b0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 81100b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 81100b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81100ba:	2202      	movs	r2, #2
 81100bc:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 81100c0:	79fb      	ldrb	r3, [r7, #7]
 81100c2:	2b04      	cmp	r3, #4
 81100c4:	d82e      	bhi.n	8110124 <xTaskGenericNotifyFromISR+0xdc>
 81100c6:	a201      	add	r2, pc, #4	@ (adr r2, 81100cc <xTaskGenericNotifyFromISR+0x84>)
 81100c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81100cc:	08110149 	.word	0x08110149
 81100d0:	081100e1 	.word	0x081100e1
 81100d4:	081100f3 	.word	0x081100f3
 81100d8:	08110103 	.word	0x08110103
 81100dc:	0811010d 	.word	0x0811010d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 81100e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81100e2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 81100e6:	68bb      	ldr	r3, [r7, #8]
 81100e8:	431a      	orrs	r2, r3
 81100ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81100ec:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 81100f0:	e02d      	b.n	811014e <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 81100f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81100f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81100f8:	1c5a      	adds	r2, r3, #1
 81100fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81100fc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8110100:	e025      	b.n	811014e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8110102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110104:	68ba      	ldr	r2, [r7, #8]
 8110106:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 811010a:	e020      	b.n	811014e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 811010c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8110110:	2b02      	cmp	r3, #2
 8110112:	d004      	beq.n	811011e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8110114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110116:	68ba      	ldr	r2, [r7, #8]
 8110118:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 811011c:	e017      	b.n	811014e <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 811011e:	2300      	movs	r3, #0
 8110120:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8110122:	e014      	b.n	811014e <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8110124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110126:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 811012a:	f1b3 3fff 	cmp.w	r3, #4294967295
 811012e:	d00d      	beq.n	811014c <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8110130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110134:	f383 8811 	msr	BASEPRI, r3
 8110138:	f3bf 8f6f 	isb	sy
 811013c:	f3bf 8f4f 	dsb	sy
 8110140:	61bb      	str	r3, [r7, #24]
}
 8110142:	bf00      	nop
 8110144:	bf00      	nop
 8110146:	e7fd      	b.n	8110144 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8110148:	bf00      	nop
 811014a:	e000      	b.n	811014e <xTaskGenericNotifyFromISR+0x106>
					break;
 811014c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 811014e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8110152:	2b01      	cmp	r3, #1
 8110154:	d147      	bne.n	81101e6 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8110156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 811015a:	2b00      	cmp	r3, #0
 811015c:	d00b      	beq.n	8110176 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 811015e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110162:	f383 8811 	msr	BASEPRI, r3
 8110166:	f3bf 8f6f 	isb	sy
 811016a:	f3bf 8f4f 	dsb	sy
 811016e:	617b      	str	r3, [r7, #20]
}
 8110170:	bf00      	nop
 8110172:	bf00      	nop
 8110174:	e7fd      	b.n	8110172 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8110176:	4b21      	ldr	r3, [pc, #132]	@ (81101fc <xTaskGenericNotifyFromISR+0x1b4>)
 8110178:	681b      	ldr	r3, [r3, #0]
 811017a:	2b00      	cmp	r3, #0
 811017c:	d11d      	bne.n	81101ba <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 811017e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110180:	3304      	adds	r3, #4
 8110182:	4618      	mov	r0, r3
 8110184:	f7fc ff42 	bl	810d00c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8110188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811018a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811018c:	4b1c      	ldr	r3, [pc, #112]	@ (8110200 <xTaskGenericNotifyFromISR+0x1b8>)
 811018e:	681b      	ldr	r3, [r3, #0]
 8110190:	429a      	cmp	r2, r3
 8110192:	d903      	bls.n	811019c <xTaskGenericNotifyFromISR+0x154>
 8110194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8110196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8110198:	4a19      	ldr	r2, [pc, #100]	@ (8110200 <xTaskGenericNotifyFromISR+0x1b8>)
 811019a:	6013      	str	r3, [r2, #0]
 811019c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811019e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81101a0:	4613      	mov	r3, r2
 81101a2:	009b      	lsls	r3, r3, #2
 81101a4:	4413      	add	r3, r2
 81101a6:	009b      	lsls	r3, r3, #2
 81101a8:	4a16      	ldr	r2, [pc, #88]	@ (8110204 <xTaskGenericNotifyFromISR+0x1bc>)
 81101aa:	441a      	add	r2, r3
 81101ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81101ae:	3304      	adds	r3, #4
 81101b0:	4619      	mov	r1, r3
 81101b2:	4610      	mov	r0, r2
 81101b4:	f7fc fecd 	bl	810cf52 <vListInsertEnd>
 81101b8:	e005      	b.n	81101c6 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 81101ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81101bc:	3318      	adds	r3, #24
 81101be:	4619      	mov	r1, r3
 81101c0:	4811      	ldr	r0, [pc, #68]	@ (8110208 <xTaskGenericNotifyFromISR+0x1c0>)
 81101c2:	f7fc fec6 	bl	810cf52 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 81101c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81101c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81101ca:	4b10      	ldr	r3, [pc, #64]	@ (811020c <xTaskGenericNotifyFromISR+0x1c4>)
 81101cc:	681b      	ldr	r3, [r3, #0]
 81101ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81101d0:	429a      	cmp	r2, r3
 81101d2:	d908      	bls.n	81101e6 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 81101d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81101d6:	2b00      	cmp	r3, #0
 81101d8:	d002      	beq.n	81101e0 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 81101da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81101dc:	2201      	movs	r2, #1
 81101de:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 81101e0:	4b0b      	ldr	r3, [pc, #44]	@ (8110210 <xTaskGenericNotifyFromISR+0x1c8>)
 81101e2:	2201      	movs	r2, #1
 81101e4:	601a      	str	r2, [r3, #0]
 81101e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81101e8:	613b      	str	r3, [r7, #16]
	__asm volatile
 81101ea:	693b      	ldr	r3, [r7, #16]
 81101ec:	f383 8811 	msr	BASEPRI, r3
}
 81101f0:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 81101f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 81101f4:	4618      	mov	r0, r3
 81101f6:	3738      	adds	r7, #56	@ 0x38
 81101f8:	46bd      	mov	sp, r7
 81101fa:	bd80      	pop	{r7, pc}
 81101fc:	1000b020 	.word	0x1000b020
 8110200:	1000b000 	.word	0x1000b000
 8110204:	1000ab28 	.word	0x1000ab28
 8110208:	1000afb8 	.word	0x1000afb8
 811020c:	1000ab24 	.word	0x1000ab24
 8110210:	1000b00c 	.word	0x1000b00c

08110214 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8110214:	b580      	push	{r7, lr}
 8110216:	b084      	sub	sp, #16
 8110218:	af00      	add	r7, sp, #0
 811021a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 811021c:	687b      	ldr	r3, [r7, #4]
 811021e:	2b00      	cmp	r3, #0
 8110220:	d102      	bne.n	8110228 <xTaskNotifyStateClear+0x14>
 8110222:	4b0e      	ldr	r3, [pc, #56]	@ (811025c <xTaskNotifyStateClear+0x48>)
 8110224:	681b      	ldr	r3, [r3, #0]
 8110226:	e000      	b.n	811022a <xTaskNotifyStateClear+0x16>
 8110228:	687b      	ldr	r3, [r7, #4]
 811022a:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 811022c:	f7fd f84c 	bl	810d2c8 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8110230:	68bb      	ldr	r3, [r7, #8]
 8110232:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8110236:	b2db      	uxtb	r3, r3
 8110238:	2b02      	cmp	r3, #2
 811023a:	d106      	bne.n	811024a <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 811023c:	68bb      	ldr	r3, [r7, #8]
 811023e:	2200      	movs	r2, #0
 8110240:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				xReturn = pdPASS;
 8110244:	2301      	movs	r3, #1
 8110246:	60fb      	str	r3, [r7, #12]
 8110248:	e001      	b.n	811024e <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 811024a:	2300      	movs	r3, #0
 811024c:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 811024e:	f7fd f86d 	bl	810d32c <vPortExitCritical>

		return xReturn;
 8110252:	68fb      	ldr	r3, [r7, #12]
	}
 8110254:	4618      	mov	r0, r3
 8110256:	3710      	adds	r7, #16
 8110258:	46bd      	mov	sp, r7
 811025a:	bd80      	pop	{r7, pc}
 811025c:	1000ab24 	.word	0x1000ab24

08110260 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8110260:	b580      	push	{r7, lr}
 8110262:	b084      	sub	sp, #16
 8110264:	af00      	add	r7, sp, #0
 8110266:	6078      	str	r0, [r7, #4]
 8110268:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 811026a:	4b21      	ldr	r3, [pc, #132]	@ (81102f0 <prvAddCurrentTaskToDelayedList+0x90>)
 811026c:	681b      	ldr	r3, [r3, #0]
 811026e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8110270:	4b20      	ldr	r3, [pc, #128]	@ (81102f4 <prvAddCurrentTaskToDelayedList+0x94>)
 8110272:	681b      	ldr	r3, [r3, #0]
 8110274:	3304      	adds	r3, #4
 8110276:	4618      	mov	r0, r3
 8110278:	f7fc fec8 	bl	810d00c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 811027c:	687b      	ldr	r3, [r7, #4]
 811027e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8110282:	d10a      	bne.n	811029a <prvAddCurrentTaskToDelayedList+0x3a>
 8110284:	683b      	ldr	r3, [r7, #0]
 8110286:	2b00      	cmp	r3, #0
 8110288:	d007      	beq.n	811029a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 811028a:	4b1a      	ldr	r3, [pc, #104]	@ (81102f4 <prvAddCurrentTaskToDelayedList+0x94>)
 811028c:	681b      	ldr	r3, [r3, #0]
 811028e:	3304      	adds	r3, #4
 8110290:	4619      	mov	r1, r3
 8110292:	4819      	ldr	r0, [pc, #100]	@ (81102f8 <prvAddCurrentTaskToDelayedList+0x98>)
 8110294:	f7fc fe5d 	bl	810cf52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8110298:	e026      	b.n	81102e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 811029a:	68fa      	ldr	r2, [r7, #12]
 811029c:	687b      	ldr	r3, [r7, #4]
 811029e:	4413      	add	r3, r2
 81102a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 81102a2:	4b14      	ldr	r3, [pc, #80]	@ (81102f4 <prvAddCurrentTaskToDelayedList+0x94>)
 81102a4:	681b      	ldr	r3, [r3, #0]
 81102a6:	68ba      	ldr	r2, [r7, #8]
 81102a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 81102aa:	68ba      	ldr	r2, [r7, #8]
 81102ac:	68fb      	ldr	r3, [r7, #12]
 81102ae:	429a      	cmp	r2, r3
 81102b0:	d209      	bcs.n	81102c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81102b2:	4b12      	ldr	r3, [pc, #72]	@ (81102fc <prvAddCurrentTaskToDelayedList+0x9c>)
 81102b4:	681a      	ldr	r2, [r3, #0]
 81102b6:	4b0f      	ldr	r3, [pc, #60]	@ (81102f4 <prvAddCurrentTaskToDelayedList+0x94>)
 81102b8:	681b      	ldr	r3, [r3, #0]
 81102ba:	3304      	adds	r3, #4
 81102bc:	4619      	mov	r1, r3
 81102be:	4610      	mov	r0, r2
 81102c0:	f7fc fe6b 	bl	810cf9a <vListInsert>
}
 81102c4:	e010      	b.n	81102e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81102c6:	4b0e      	ldr	r3, [pc, #56]	@ (8110300 <prvAddCurrentTaskToDelayedList+0xa0>)
 81102c8:	681a      	ldr	r2, [r3, #0]
 81102ca:	4b0a      	ldr	r3, [pc, #40]	@ (81102f4 <prvAddCurrentTaskToDelayedList+0x94>)
 81102cc:	681b      	ldr	r3, [r3, #0]
 81102ce:	3304      	adds	r3, #4
 81102d0:	4619      	mov	r1, r3
 81102d2:	4610      	mov	r0, r2
 81102d4:	f7fc fe61 	bl	810cf9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 81102d8:	4b0a      	ldr	r3, [pc, #40]	@ (8110304 <prvAddCurrentTaskToDelayedList+0xa4>)
 81102da:	681b      	ldr	r3, [r3, #0]
 81102dc:	68ba      	ldr	r2, [r7, #8]
 81102de:	429a      	cmp	r2, r3
 81102e0:	d202      	bcs.n	81102e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 81102e2:	4a08      	ldr	r2, [pc, #32]	@ (8110304 <prvAddCurrentTaskToDelayedList+0xa4>)
 81102e4:	68bb      	ldr	r3, [r7, #8]
 81102e6:	6013      	str	r3, [r2, #0]
}
 81102e8:	bf00      	nop
 81102ea:	3710      	adds	r7, #16
 81102ec:	46bd      	mov	sp, r7
 81102ee:	bd80      	pop	{r7, pc}
 81102f0:	1000affc 	.word	0x1000affc
 81102f4:	1000ab24 	.word	0x1000ab24
 81102f8:	1000afe4 	.word	0x1000afe4
 81102fc:	1000afb4 	.word	0x1000afb4
 8110300:	1000afb0 	.word	0x1000afb0
 8110304:	1000b018 	.word	0x1000b018

08110308 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8110308:	b580      	push	{r7, lr}
 811030a:	b08a      	sub	sp, #40	@ 0x28
 811030c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 811030e:	2300      	movs	r3, #0
 8110310:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8110312:	f000 fb13 	bl	811093c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8110316:	4b1d      	ldr	r3, [pc, #116]	@ (811038c <xTimerCreateTimerTask+0x84>)
 8110318:	681b      	ldr	r3, [r3, #0]
 811031a:	2b00      	cmp	r3, #0
 811031c:	d021      	beq.n	8110362 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 811031e:	2300      	movs	r3, #0
 8110320:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8110322:	2300      	movs	r3, #0
 8110324:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8110326:	1d3a      	adds	r2, r7, #4
 8110328:	f107 0108 	add.w	r1, r7, #8
 811032c:	f107 030c 	add.w	r3, r7, #12
 8110330:	4618      	mov	r0, r3
 8110332:	f7fc fbd9 	bl	810cae8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8110336:	6879      	ldr	r1, [r7, #4]
 8110338:	68bb      	ldr	r3, [r7, #8]
 811033a:	68fa      	ldr	r2, [r7, #12]
 811033c:	9202      	str	r2, [sp, #8]
 811033e:	9301      	str	r3, [sp, #4]
 8110340:	2302      	movs	r3, #2
 8110342:	9300      	str	r3, [sp, #0]
 8110344:	2300      	movs	r3, #0
 8110346:	460a      	mov	r2, r1
 8110348:	4911      	ldr	r1, [pc, #68]	@ (8110390 <xTimerCreateTimerTask+0x88>)
 811034a:	4812      	ldr	r0, [pc, #72]	@ (8110394 <xTimerCreateTimerTask+0x8c>)
 811034c:	f7fe fdec 	bl	810ef28 <xTaskCreateStatic>
 8110350:	4603      	mov	r3, r0
 8110352:	4a11      	ldr	r2, [pc, #68]	@ (8110398 <xTimerCreateTimerTask+0x90>)
 8110354:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8110356:	4b10      	ldr	r3, [pc, #64]	@ (8110398 <xTimerCreateTimerTask+0x90>)
 8110358:	681b      	ldr	r3, [r3, #0]
 811035a:	2b00      	cmp	r3, #0
 811035c:	d001      	beq.n	8110362 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 811035e:	2301      	movs	r3, #1
 8110360:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8110362:	697b      	ldr	r3, [r7, #20]
 8110364:	2b00      	cmp	r3, #0
 8110366:	d10b      	bne.n	8110380 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8110368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 811036c:	f383 8811 	msr	BASEPRI, r3
 8110370:	f3bf 8f6f 	isb	sy
 8110374:	f3bf 8f4f 	dsb	sy
 8110378:	613b      	str	r3, [r7, #16]
}
 811037a:	bf00      	nop
 811037c:	bf00      	nop
 811037e:	e7fd      	b.n	811037c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8110380:	697b      	ldr	r3, [r7, #20]
}
 8110382:	4618      	mov	r0, r3
 8110384:	3718      	adds	r7, #24
 8110386:	46bd      	mov	sp, r7
 8110388:	bd80      	pop	{r7, pc}
 811038a:	bf00      	nop
 811038c:	1000b054 	.word	0x1000b054
 8110390:	0811cd48 	.word	0x0811cd48
 8110394:	081104d5 	.word	0x081104d5
 8110398:	1000b058 	.word	0x1000b058

0811039c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 811039c:	b580      	push	{r7, lr}
 811039e:	b08a      	sub	sp, #40	@ 0x28
 81103a0:	af00      	add	r7, sp, #0
 81103a2:	60f8      	str	r0, [r7, #12]
 81103a4:	60b9      	str	r1, [r7, #8]
 81103a6:	607a      	str	r2, [r7, #4]
 81103a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 81103aa:	2300      	movs	r3, #0
 81103ac:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 81103ae:	68fb      	ldr	r3, [r7, #12]
 81103b0:	2b00      	cmp	r3, #0
 81103b2:	d10b      	bne.n	81103cc <xTimerGenericCommand+0x30>
	__asm volatile
 81103b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81103b8:	f383 8811 	msr	BASEPRI, r3
 81103bc:	f3bf 8f6f 	isb	sy
 81103c0:	f3bf 8f4f 	dsb	sy
 81103c4:	623b      	str	r3, [r7, #32]
}
 81103c6:	bf00      	nop
 81103c8:	bf00      	nop
 81103ca:	e7fd      	b.n	81103c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 81103cc:	4b19      	ldr	r3, [pc, #100]	@ (8110434 <xTimerGenericCommand+0x98>)
 81103ce:	681b      	ldr	r3, [r3, #0]
 81103d0:	2b00      	cmp	r3, #0
 81103d2:	d02a      	beq.n	811042a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 81103d4:	68bb      	ldr	r3, [r7, #8]
 81103d6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 81103d8:	687b      	ldr	r3, [r7, #4]
 81103da:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 81103dc:	68fb      	ldr	r3, [r7, #12]
 81103de:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 81103e0:	68bb      	ldr	r3, [r7, #8]
 81103e2:	2b05      	cmp	r3, #5
 81103e4:	dc18      	bgt.n	8110418 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 81103e6:	f7ff fc41 	bl	810fc6c <xTaskGetSchedulerState>
 81103ea:	4603      	mov	r3, r0
 81103ec:	2b02      	cmp	r3, #2
 81103ee:	d109      	bne.n	8110404 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 81103f0:	4b10      	ldr	r3, [pc, #64]	@ (8110434 <xTimerGenericCommand+0x98>)
 81103f2:	6818      	ldr	r0, [r3, #0]
 81103f4:	f107 0110 	add.w	r1, r7, #16
 81103f8:	2300      	movs	r3, #0
 81103fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81103fc:	f7fd faf2 	bl	810d9e4 <xQueueGenericSend>
 8110400:	6278      	str	r0, [r7, #36]	@ 0x24
 8110402:	e012      	b.n	811042a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8110404:	4b0b      	ldr	r3, [pc, #44]	@ (8110434 <xTimerGenericCommand+0x98>)
 8110406:	6818      	ldr	r0, [r3, #0]
 8110408:	f107 0110 	add.w	r1, r7, #16
 811040c:	2300      	movs	r3, #0
 811040e:	2200      	movs	r2, #0
 8110410:	f7fd fae8 	bl	810d9e4 <xQueueGenericSend>
 8110414:	6278      	str	r0, [r7, #36]	@ 0x24
 8110416:	e008      	b.n	811042a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8110418:	4b06      	ldr	r3, [pc, #24]	@ (8110434 <xTimerGenericCommand+0x98>)
 811041a:	6818      	ldr	r0, [r3, #0]
 811041c:	f107 0110 	add.w	r1, r7, #16
 8110420:	2300      	movs	r3, #0
 8110422:	683a      	ldr	r2, [r7, #0]
 8110424:	f7fd fbe0 	bl	810dbe8 <xQueueGenericSendFromISR>
 8110428:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 811042a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 811042c:	4618      	mov	r0, r3
 811042e:	3728      	adds	r7, #40	@ 0x28
 8110430:	46bd      	mov	sp, r7
 8110432:	bd80      	pop	{r7, pc}
 8110434:	1000b054 	.word	0x1000b054

08110438 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8110438:	b580      	push	{r7, lr}
 811043a:	b088      	sub	sp, #32
 811043c:	af02      	add	r7, sp, #8
 811043e:	6078      	str	r0, [r7, #4]
 8110440:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8110442:	4b23      	ldr	r3, [pc, #140]	@ (81104d0 <prvProcessExpiredTimer+0x98>)
 8110444:	681b      	ldr	r3, [r3, #0]
 8110446:	68db      	ldr	r3, [r3, #12]
 8110448:	68db      	ldr	r3, [r3, #12]
 811044a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 811044c:	697b      	ldr	r3, [r7, #20]
 811044e:	3304      	adds	r3, #4
 8110450:	4618      	mov	r0, r3
 8110452:	f7fc fddb 	bl	810d00c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8110456:	697b      	ldr	r3, [r7, #20]
 8110458:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 811045c:	f003 0304 	and.w	r3, r3, #4
 8110460:	2b00      	cmp	r3, #0
 8110462:	d023      	beq.n	81104ac <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8110464:	697b      	ldr	r3, [r7, #20]
 8110466:	699a      	ldr	r2, [r3, #24]
 8110468:	687b      	ldr	r3, [r7, #4]
 811046a:	18d1      	adds	r1, r2, r3
 811046c:	687b      	ldr	r3, [r7, #4]
 811046e:	683a      	ldr	r2, [r7, #0]
 8110470:	6978      	ldr	r0, [r7, #20]
 8110472:	f000 f8d5 	bl	8110620 <prvInsertTimerInActiveList>
 8110476:	4603      	mov	r3, r0
 8110478:	2b00      	cmp	r3, #0
 811047a:	d020      	beq.n	81104be <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 811047c:	2300      	movs	r3, #0
 811047e:	9300      	str	r3, [sp, #0]
 8110480:	2300      	movs	r3, #0
 8110482:	687a      	ldr	r2, [r7, #4]
 8110484:	2100      	movs	r1, #0
 8110486:	6978      	ldr	r0, [r7, #20]
 8110488:	f7ff ff88 	bl	811039c <xTimerGenericCommand>
 811048c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 811048e:	693b      	ldr	r3, [r7, #16]
 8110490:	2b00      	cmp	r3, #0
 8110492:	d114      	bne.n	81104be <prvProcessExpiredTimer+0x86>
	__asm volatile
 8110494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8110498:	f383 8811 	msr	BASEPRI, r3
 811049c:	f3bf 8f6f 	isb	sy
 81104a0:	f3bf 8f4f 	dsb	sy
 81104a4:	60fb      	str	r3, [r7, #12]
}
 81104a6:	bf00      	nop
 81104a8:	bf00      	nop
 81104aa:	e7fd      	b.n	81104a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 81104ac:	697b      	ldr	r3, [r7, #20]
 81104ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81104b2:	f023 0301 	bic.w	r3, r3, #1
 81104b6:	b2da      	uxtb	r2, r3
 81104b8:	697b      	ldr	r3, [r7, #20]
 81104ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81104be:	697b      	ldr	r3, [r7, #20]
 81104c0:	6a1b      	ldr	r3, [r3, #32]
 81104c2:	6978      	ldr	r0, [r7, #20]
 81104c4:	4798      	blx	r3
}
 81104c6:	bf00      	nop
 81104c8:	3718      	adds	r7, #24
 81104ca:	46bd      	mov	sp, r7
 81104cc:	bd80      	pop	{r7, pc}
 81104ce:	bf00      	nop
 81104d0:	1000b04c 	.word	0x1000b04c

081104d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 81104d4:	b580      	push	{r7, lr}
 81104d6:	b084      	sub	sp, #16
 81104d8:	af00      	add	r7, sp, #0
 81104da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 81104dc:	f107 0308 	add.w	r3, r7, #8
 81104e0:	4618      	mov	r0, r3
 81104e2:	f000 f859 	bl	8110598 <prvGetNextExpireTime>
 81104e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 81104e8:	68bb      	ldr	r3, [r7, #8]
 81104ea:	4619      	mov	r1, r3
 81104ec:	68f8      	ldr	r0, [r7, #12]
 81104ee:	f000 f805 	bl	81104fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 81104f2:	f000 f8d7 	bl	81106a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 81104f6:	bf00      	nop
 81104f8:	e7f0      	b.n	81104dc <prvTimerTask+0x8>
	...

081104fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 81104fc:	b580      	push	{r7, lr}
 81104fe:	b084      	sub	sp, #16
 8110500:	af00      	add	r7, sp, #0
 8110502:	6078      	str	r0, [r7, #4]
 8110504:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8110506:	f7fe ff73 	bl	810f3f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 811050a:	f107 0308 	add.w	r3, r7, #8
 811050e:	4618      	mov	r0, r3
 8110510:	f000 f866 	bl	81105e0 <prvSampleTimeNow>
 8110514:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8110516:	68bb      	ldr	r3, [r7, #8]
 8110518:	2b00      	cmp	r3, #0
 811051a:	d130      	bne.n	811057e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 811051c:	683b      	ldr	r3, [r7, #0]
 811051e:	2b00      	cmp	r3, #0
 8110520:	d10a      	bne.n	8110538 <prvProcessTimerOrBlockTask+0x3c>
 8110522:	687a      	ldr	r2, [r7, #4]
 8110524:	68fb      	ldr	r3, [r7, #12]
 8110526:	429a      	cmp	r2, r3
 8110528:	d806      	bhi.n	8110538 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 811052a:	f7fe ff6f 	bl	810f40c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 811052e:	68f9      	ldr	r1, [r7, #12]
 8110530:	6878      	ldr	r0, [r7, #4]
 8110532:	f7ff ff81 	bl	8110438 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8110536:	e024      	b.n	8110582 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8110538:	683b      	ldr	r3, [r7, #0]
 811053a:	2b00      	cmp	r3, #0
 811053c:	d008      	beq.n	8110550 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 811053e:	4b13      	ldr	r3, [pc, #76]	@ (811058c <prvProcessTimerOrBlockTask+0x90>)
 8110540:	681b      	ldr	r3, [r3, #0]
 8110542:	681b      	ldr	r3, [r3, #0]
 8110544:	2b00      	cmp	r3, #0
 8110546:	d101      	bne.n	811054c <prvProcessTimerOrBlockTask+0x50>
 8110548:	2301      	movs	r3, #1
 811054a:	e000      	b.n	811054e <prvProcessTimerOrBlockTask+0x52>
 811054c:	2300      	movs	r3, #0
 811054e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8110550:	4b0f      	ldr	r3, [pc, #60]	@ (8110590 <prvProcessTimerOrBlockTask+0x94>)
 8110552:	6818      	ldr	r0, [r3, #0]
 8110554:	687a      	ldr	r2, [r7, #4]
 8110556:	68fb      	ldr	r3, [r7, #12]
 8110558:	1ad3      	subs	r3, r2, r3
 811055a:	683a      	ldr	r2, [r7, #0]
 811055c:	4619      	mov	r1, r3
 811055e:	f7fe f885 	bl	810e66c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8110562:	f7fe ff53 	bl	810f40c <xTaskResumeAll>
 8110566:	4603      	mov	r3, r0
 8110568:	2b00      	cmp	r3, #0
 811056a:	d10a      	bne.n	8110582 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 811056c:	4b09      	ldr	r3, [pc, #36]	@ (8110594 <prvProcessTimerOrBlockTask+0x98>)
 811056e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8110572:	601a      	str	r2, [r3, #0]
 8110574:	f3bf 8f4f 	dsb	sy
 8110578:	f3bf 8f6f 	isb	sy
}
 811057c:	e001      	b.n	8110582 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 811057e:	f7fe ff45 	bl	810f40c <xTaskResumeAll>
}
 8110582:	bf00      	nop
 8110584:	3710      	adds	r7, #16
 8110586:	46bd      	mov	sp, r7
 8110588:	bd80      	pop	{r7, pc}
 811058a:	bf00      	nop
 811058c:	1000b050 	.word	0x1000b050
 8110590:	1000b054 	.word	0x1000b054
 8110594:	e000ed04 	.word	0xe000ed04

08110598 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8110598:	b480      	push	{r7}
 811059a:	b085      	sub	sp, #20
 811059c:	af00      	add	r7, sp, #0
 811059e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 81105a0:	4b0e      	ldr	r3, [pc, #56]	@ (81105dc <prvGetNextExpireTime+0x44>)
 81105a2:	681b      	ldr	r3, [r3, #0]
 81105a4:	681b      	ldr	r3, [r3, #0]
 81105a6:	2b00      	cmp	r3, #0
 81105a8:	d101      	bne.n	81105ae <prvGetNextExpireTime+0x16>
 81105aa:	2201      	movs	r2, #1
 81105ac:	e000      	b.n	81105b0 <prvGetNextExpireTime+0x18>
 81105ae:	2200      	movs	r2, #0
 81105b0:	687b      	ldr	r3, [r7, #4]
 81105b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 81105b4:	687b      	ldr	r3, [r7, #4]
 81105b6:	681b      	ldr	r3, [r3, #0]
 81105b8:	2b00      	cmp	r3, #0
 81105ba:	d105      	bne.n	81105c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 81105bc:	4b07      	ldr	r3, [pc, #28]	@ (81105dc <prvGetNextExpireTime+0x44>)
 81105be:	681b      	ldr	r3, [r3, #0]
 81105c0:	68db      	ldr	r3, [r3, #12]
 81105c2:	681b      	ldr	r3, [r3, #0]
 81105c4:	60fb      	str	r3, [r7, #12]
 81105c6:	e001      	b.n	81105cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 81105c8:	2300      	movs	r3, #0
 81105ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 81105cc:	68fb      	ldr	r3, [r7, #12]
}
 81105ce:	4618      	mov	r0, r3
 81105d0:	3714      	adds	r7, #20
 81105d2:	46bd      	mov	sp, r7
 81105d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81105d8:	4770      	bx	lr
 81105da:	bf00      	nop
 81105dc:	1000b04c 	.word	0x1000b04c

081105e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 81105e0:	b580      	push	{r7, lr}
 81105e2:	b084      	sub	sp, #16
 81105e4:	af00      	add	r7, sp, #0
 81105e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 81105e8:	f7fe ffae 	bl	810f548 <xTaskGetTickCount>
 81105ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 81105ee:	4b0b      	ldr	r3, [pc, #44]	@ (811061c <prvSampleTimeNow+0x3c>)
 81105f0:	681b      	ldr	r3, [r3, #0]
 81105f2:	68fa      	ldr	r2, [r7, #12]
 81105f4:	429a      	cmp	r2, r3
 81105f6:	d205      	bcs.n	8110604 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 81105f8:	f000 f93a 	bl	8110870 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 81105fc:	687b      	ldr	r3, [r7, #4]
 81105fe:	2201      	movs	r2, #1
 8110600:	601a      	str	r2, [r3, #0]
 8110602:	e002      	b.n	811060a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8110604:	687b      	ldr	r3, [r7, #4]
 8110606:	2200      	movs	r2, #0
 8110608:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 811060a:	4a04      	ldr	r2, [pc, #16]	@ (811061c <prvSampleTimeNow+0x3c>)
 811060c:	68fb      	ldr	r3, [r7, #12]
 811060e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8110610:	68fb      	ldr	r3, [r7, #12]
}
 8110612:	4618      	mov	r0, r3
 8110614:	3710      	adds	r7, #16
 8110616:	46bd      	mov	sp, r7
 8110618:	bd80      	pop	{r7, pc}
 811061a:	bf00      	nop
 811061c:	1000b05c 	.word	0x1000b05c

08110620 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8110620:	b580      	push	{r7, lr}
 8110622:	b086      	sub	sp, #24
 8110624:	af00      	add	r7, sp, #0
 8110626:	60f8      	str	r0, [r7, #12]
 8110628:	60b9      	str	r1, [r7, #8]
 811062a:	607a      	str	r2, [r7, #4]
 811062c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 811062e:	2300      	movs	r3, #0
 8110630:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8110632:	68fb      	ldr	r3, [r7, #12]
 8110634:	68ba      	ldr	r2, [r7, #8]
 8110636:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8110638:	68fb      	ldr	r3, [r7, #12]
 811063a:	68fa      	ldr	r2, [r7, #12]
 811063c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 811063e:	68ba      	ldr	r2, [r7, #8]
 8110640:	687b      	ldr	r3, [r7, #4]
 8110642:	429a      	cmp	r2, r3
 8110644:	d812      	bhi.n	811066c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8110646:	687a      	ldr	r2, [r7, #4]
 8110648:	683b      	ldr	r3, [r7, #0]
 811064a:	1ad2      	subs	r2, r2, r3
 811064c:	68fb      	ldr	r3, [r7, #12]
 811064e:	699b      	ldr	r3, [r3, #24]
 8110650:	429a      	cmp	r2, r3
 8110652:	d302      	bcc.n	811065a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8110654:	2301      	movs	r3, #1
 8110656:	617b      	str	r3, [r7, #20]
 8110658:	e01b      	b.n	8110692 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 811065a:	4b10      	ldr	r3, [pc, #64]	@ (811069c <prvInsertTimerInActiveList+0x7c>)
 811065c:	681a      	ldr	r2, [r3, #0]
 811065e:	68fb      	ldr	r3, [r7, #12]
 8110660:	3304      	adds	r3, #4
 8110662:	4619      	mov	r1, r3
 8110664:	4610      	mov	r0, r2
 8110666:	f7fc fc98 	bl	810cf9a <vListInsert>
 811066a:	e012      	b.n	8110692 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 811066c:	687a      	ldr	r2, [r7, #4]
 811066e:	683b      	ldr	r3, [r7, #0]
 8110670:	429a      	cmp	r2, r3
 8110672:	d206      	bcs.n	8110682 <prvInsertTimerInActiveList+0x62>
 8110674:	68ba      	ldr	r2, [r7, #8]
 8110676:	683b      	ldr	r3, [r7, #0]
 8110678:	429a      	cmp	r2, r3
 811067a:	d302      	bcc.n	8110682 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 811067c:	2301      	movs	r3, #1
 811067e:	617b      	str	r3, [r7, #20]
 8110680:	e007      	b.n	8110692 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8110682:	4b07      	ldr	r3, [pc, #28]	@ (81106a0 <prvInsertTimerInActiveList+0x80>)
 8110684:	681a      	ldr	r2, [r3, #0]
 8110686:	68fb      	ldr	r3, [r7, #12]
 8110688:	3304      	adds	r3, #4
 811068a:	4619      	mov	r1, r3
 811068c:	4610      	mov	r0, r2
 811068e:	f7fc fc84 	bl	810cf9a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8110692:	697b      	ldr	r3, [r7, #20]
}
 8110694:	4618      	mov	r0, r3
 8110696:	3718      	adds	r7, #24
 8110698:	46bd      	mov	sp, r7
 811069a:	bd80      	pop	{r7, pc}
 811069c:	1000b050 	.word	0x1000b050
 81106a0:	1000b04c 	.word	0x1000b04c

081106a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 81106a4:	b580      	push	{r7, lr}
 81106a6:	b08e      	sub	sp, #56	@ 0x38
 81106a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 81106aa:	e0ce      	b.n	811084a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 81106ac:	687b      	ldr	r3, [r7, #4]
 81106ae:	2b00      	cmp	r3, #0
 81106b0:	da19      	bge.n	81106e6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 81106b2:	1d3b      	adds	r3, r7, #4
 81106b4:	3304      	adds	r3, #4
 81106b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 81106b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81106ba:	2b00      	cmp	r3, #0
 81106bc:	d10b      	bne.n	81106d6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 81106be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81106c2:	f383 8811 	msr	BASEPRI, r3
 81106c6:	f3bf 8f6f 	isb	sy
 81106ca:	f3bf 8f4f 	dsb	sy
 81106ce:	61fb      	str	r3, [r7, #28]
}
 81106d0:	bf00      	nop
 81106d2:	bf00      	nop
 81106d4:	e7fd      	b.n	81106d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 81106d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81106d8:	681b      	ldr	r3, [r3, #0]
 81106da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81106dc:	6850      	ldr	r0, [r2, #4]
 81106de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81106e0:	6892      	ldr	r2, [r2, #8]
 81106e2:	4611      	mov	r1, r2
 81106e4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 81106e6:	687b      	ldr	r3, [r7, #4]
 81106e8:	2b00      	cmp	r3, #0
 81106ea:	f2c0 80ae 	blt.w	811084a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 81106ee:	68fb      	ldr	r3, [r7, #12]
 81106f0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 81106f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81106f4:	695b      	ldr	r3, [r3, #20]
 81106f6:	2b00      	cmp	r3, #0
 81106f8:	d004      	beq.n	8110704 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 81106fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81106fc:	3304      	adds	r3, #4
 81106fe:	4618      	mov	r0, r3
 8110700:	f7fc fc84 	bl	810d00c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8110704:	463b      	mov	r3, r7
 8110706:	4618      	mov	r0, r3
 8110708:	f7ff ff6a 	bl	81105e0 <prvSampleTimeNow>
 811070c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 811070e:	687b      	ldr	r3, [r7, #4]
 8110710:	2b09      	cmp	r3, #9
 8110712:	f200 8097 	bhi.w	8110844 <prvProcessReceivedCommands+0x1a0>
 8110716:	a201      	add	r2, pc, #4	@ (adr r2, 811071c <prvProcessReceivedCommands+0x78>)
 8110718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 811071c:	08110745 	.word	0x08110745
 8110720:	08110745 	.word	0x08110745
 8110724:	08110745 	.word	0x08110745
 8110728:	081107bb 	.word	0x081107bb
 811072c:	081107cf 	.word	0x081107cf
 8110730:	0811081b 	.word	0x0811081b
 8110734:	08110745 	.word	0x08110745
 8110738:	08110745 	.word	0x08110745
 811073c:	081107bb 	.word	0x081107bb
 8110740:	081107cf 	.word	0x081107cf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8110744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110746:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 811074a:	f043 0301 	orr.w	r3, r3, #1
 811074e:	b2da      	uxtb	r2, r3
 8110750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110752:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8110756:	68ba      	ldr	r2, [r7, #8]
 8110758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811075a:	699b      	ldr	r3, [r3, #24]
 811075c:	18d1      	adds	r1, r2, r3
 811075e:	68bb      	ldr	r3, [r7, #8]
 8110760:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8110762:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8110764:	f7ff ff5c 	bl	8110620 <prvInsertTimerInActiveList>
 8110768:	4603      	mov	r3, r0
 811076a:	2b00      	cmp	r3, #0
 811076c:	d06c      	beq.n	8110848 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 811076e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110770:	6a1b      	ldr	r3, [r3, #32]
 8110772:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8110774:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8110776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110778:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 811077c:	f003 0304 	and.w	r3, r3, #4
 8110780:	2b00      	cmp	r3, #0
 8110782:	d061      	beq.n	8110848 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8110784:	68ba      	ldr	r2, [r7, #8]
 8110786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110788:	699b      	ldr	r3, [r3, #24]
 811078a:	441a      	add	r2, r3
 811078c:	2300      	movs	r3, #0
 811078e:	9300      	str	r3, [sp, #0]
 8110790:	2300      	movs	r3, #0
 8110792:	2100      	movs	r1, #0
 8110794:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8110796:	f7ff fe01 	bl	811039c <xTimerGenericCommand>
 811079a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 811079c:	6a3b      	ldr	r3, [r7, #32]
 811079e:	2b00      	cmp	r3, #0
 81107a0:	d152      	bne.n	8110848 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 81107a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81107a6:	f383 8811 	msr	BASEPRI, r3
 81107aa:	f3bf 8f6f 	isb	sy
 81107ae:	f3bf 8f4f 	dsb	sy
 81107b2:	61bb      	str	r3, [r7, #24]
}
 81107b4:	bf00      	nop
 81107b6:	bf00      	nop
 81107b8:	e7fd      	b.n	81107b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 81107ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81107bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81107c0:	f023 0301 	bic.w	r3, r3, #1
 81107c4:	b2da      	uxtb	r2, r3
 81107c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81107c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 81107cc:	e03d      	b.n	811084a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 81107ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81107d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81107d4:	f043 0301 	orr.w	r3, r3, #1
 81107d8:	b2da      	uxtb	r2, r3
 81107da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81107dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 81107e0:	68ba      	ldr	r2, [r7, #8]
 81107e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81107e4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 81107e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81107e8:	699b      	ldr	r3, [r3, #24]
 81107ea:	2b00      	cmp	r3, #0
 81107ec:	d10b      	bne.n	8110806 <prvProcessReceivedCommands+0x162>
	__asm volatile
 81107ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81107f2:	f383 8811 	msr	BASEPRI, r3
 81107f6:	f3bf 8f6f 	isb	sy
 81107fa:	f3bf 8f4f 	dsb	sy
 81107fe:	617b      	str	r3, [r7, #20]
}
 8110800:	bf00      	nop
 8110802:	bf00      	nop
 8110804:	e7fd      	b.n	8110802 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8110806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110808:	699a      	ldr	r2, [r3, #24]
 811080a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811080c:	18d1      	adds	r1, r2, r3
 811080e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8110810:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8110812:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8110814:	f7ff ff04 	bl	8110620 <prvInsertTimerInActiveList>
					break;
 8110818:	e017      	b.n	811084a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 811081a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811081c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8110820:	f003 0302 	and.w	r3, r3, #2
 8110824:	2b00      	cmp	r3, #0
 8110826:	d103      	bne.n	8110830 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8110828:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 811082a:	f7fc fa45 	bl	810ccb8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 811082e:	e00c      	b.n	811084a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8110830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8110832:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8110836:	f023 0301 	bic.w	r3, r3, #1
 811083a:	b2da      	uxtb	r2, r3
 811083c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811083e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8110842:	e002      	b.n	811084a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8110844:	bf00      	nop
 8110846:	e000      	b.n	811084a <prvProcessReceivedCommands+0x1a6>
					break;
 8110848:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 811084a:	4b08      	ldr	r3, [pc, #32]	@ (811086c <prvProcessReceivedCommands+0x1c8>)
 811084c:	681b      	ldr	r3, [r3, #0]
 811084e:	1d39      	adds	r1, r7, #4
 8110850:	2200      	movs	r2, #0
 8110852:	4618      	mov	r0, r3
 8110854:	f7fd faf6 	bl	810de44 <xQueueReceive>
 8110858:	4603      	mov	r3, r0
 811085a:	2b00      	cmp	r3, #0
 811085c:	f47f af26 	bne.w	81106ac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8110860:	bf00      	nop
 8110862:	bf00      	nop
 8110864:	3730      	adds	r7, #48	@ 0x30
 8110866:	46bd      	mov	sp, r7
 8110868:	bd80      	pop	{r7, pc}
 811086a:	bf00      	nop
 811086c:	1000b054 	.word	0x1000b054

08110870 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8110870:	b580      	push	{r7, lr}
 8110872:	b088      	sub	sp, #32
 8110874:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8110876:	e049      	b.n	811090c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8110878:	4b2e      	ldr	r3, [pc, #184]	@ (8110934 <prvSwitchTimerLists+0xc4>)
 811087a:	681b      	ldr	r3, [r3, #0]
 811087c:	68db      	ldr	r3, [r3, #12]
 811087e:	681b      	ldr	r3, [r3, #0]
 8110880:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8110882:	4b2c      	ldr	r3, [pc, #176]	@ (8110934 <prvSwitchTimerLists+0xc4>)
 8110884:	681b      	ldr	r3, [r3, #0]
 8110886:	68db      	ldr	r3, [r3, #12]
 8110888:	68db      	ldr	r3, [r3, #12]
 811088a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 811088c:	68fb      	ldr	r3, [r7, #12]
 811088e:	3304      	adds	r3, #4
 8110890:	4618      	mov	r0, r3
 8110892:	f7fc fbbb 	bl	810d00c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8110896:	68fb      	ldr	r3, [r7, #12]
 8110898:	6a1b      	ldr	r3, [r3, #32]
 811089a:	68f8      	ldr	r0, [r7, #12]
 811089c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 811089e:	68fb      	ldr	r3, [r7, #12]
 81108a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81108a4:	f003 0304 	and.w	r3, r3, #4
 81108a8:	2b00      	cmp	r3, #0
 81108aa:	d02f      	beq.n	811090c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 81108ac:	68fb      	ldr	r3, [r7, #12]
 81108ae:	699b      	ldr	r3, [r3, #24]
 81108b0:	693a      	ldr	r2, [r7, #16]
 81108b2:	4413      	add	r3, r2
 81108b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 81108b6:	68ba      	ldr	r2, [r7, #8]
 81108b8:	693b      	ldr	r3, [r7, #16]
 81108ba:	429a      	cmp	r2, r3
 81108bc:	d90e      	bls.n	81108dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 81108be:	68fb      	ldr	r3, [r7, #12]
 81108c0:	68ba      	ldr	r2, [r7, #8]
 81108c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 81108c4:	68fb      	ldr	r3, [r7, #12]
 81108c6:	68fa      	ldr	r2, [r7, #12]
 81108c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 81108ca:	4b1a      	ldr	r3, [pc, #104]	@ (8110934 <prvSwitchTimerLists+0xc4>)
 81108cc:	681a      	ldr	r2, [r3, #0]
 81108ce:	68fb      	ldr	r3, [r7, #12]
 81108d0:	3304      	adds	r3, #4
 81108d2:	4619      	mov	r1, r3
 81108d4:	4610      	mov	r0, r2
 81108d6:	f7fc fb60 	bl	810cf9a <vListInsert>
 81108da:	e017      	b.n	811090c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 81108dc:	2300      	movs	r3, #0
 81108de:	9300      	str	r3, [sp, #0]
 81108e0:	2300      	movs	r3, #0
 81108e2:	693a      	ldr	r2, [r7, #16]
 81108e4:	2100      	movs	r1, #0
 81108e6:	68f8      	ldr	r0, [r7, #12]
 81108e8:	f7ff fd58 	bl	811039c <xTimerGenericCommand>
 81108ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 81108ee:	687b      	ldr	r3, [r7, #4]
 81108f0:	2b00      	cmp	r3, #0
 81108f2:	d10b      	bne.n	811090c <prvSwitchTimerLists+0x9c>
	__asm volatile
 81108f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81108f8:	f383 8811 	msr	BASEPRI, r3
 81108fc:	f3bf 8f6f 	isb	sy
 8110900:	f3bf 8f4f 	dsb	sy
 8110904:	603b      	str	r3, [r7, #0]
}
 8110906:	bf00      	nop
 8110908:	bf00      	nop
 811090a:	e7fd      	b.n	8110908 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 811090c:	4b09      	ldr	r3, [pc, #36]	@ (8110934 <prvSwitchTimerLists+0xc4>)
 811090e:	681b      	ldr	r3, [r3, #0]
 8110910:	681b      	ldr	r3, [r3, #0]
 8110912:	2b00      	cmp	r3, #0
 8110914:	d1b0      	bne.n	8110878 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8110916:	4b07      	ldr	r3, [pc, #28]	@ (8110934 <prvSwitchTimerLists+0xc4>)
 8110918:	681b      	ldr	r3, [r3, #0]
 811091a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 811091c:	4b06      	ldr	r3, [pc, #24]	@ (8110938 <prvSwitchTimerLists+0xc8>)
 811091e:	681b      	ldr	r3, [r3, #0]
 8110920:	4a04      	ldr	r2, [pc, #16]	@ (8110934 <prvSwitchTimerLists+0xc4>)
 8110922:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8110924:	4a04      	ldr	r2, [pc, #16]	@ (8110938 <prvSwitchTimerLists+0xc8>)
 8110926:	697b      	ldr	r3, [r7, #20]
 8110928:	6013      	str	r3, [r2, #0]
}
 811092a:	bf00      	nop
 811092c:	3718      	adds	r7, #24
 811092e:	46bd      	mov	sp, r7
 8110930:	bd80      	pop	{r7, pc}
 8110932:	bf00      	nop
 8110934:	1000b04c 	.word	0x1000b04c
 8110938:	1000b050 	.word	0x1000b050

0811093c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 811093c:	b580      	push	{r7, lr}
 811093e:	b082      	sub	sp, #8
 8110940:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8110942:	f7fc fcc1 	bl	810d2c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8110946:	4b15      	ldr	r3, [pc, #84]	@ (811099c <prvCheckForValidListAndQueue+0x60>)
 8110948:	681b      	ldr	r3, [r3, #0]
 811094a:	2b00      	cmp	r3, #0
 811094c:	d120      	bne.n	8110990 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 811094e:	4814      	ldr	r0, [pc, #80]	@ (81109a0 <prvCheckForValidListAndQueue+0x64>)
 8110950:	f7fc fad2 	bl	810cef8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8110954:	4813      	ldr	r0, [pc, #76]	@ (81109a4 <prvCheckForValidListAndQueue+0x68>)
 8110956:	f7fc facf 	bl	810cef8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 811095a:	4b13      	ldr	r3, [pc, #76]	@ (81109a8 <prvCheckForValidListAndQueue+0x6c>)
 811095c:	4a10      	ldr	r2, [pc, #64]	@ (81109a0 <prvCheckForValidListAndQueue+0x64>)
 811095e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8110960:	4b12      	ldr	r3, [pc, #72]	@ (81109ac <prvCheckForValidListAndQueue+0x70>)
 8110962:	4a10      	ldr	r2, [pc, #64]	@ (81109a4 <prvCheckForValidListAndQueue+0x68>)
 8110964:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8110966:	2300      	movs	r3, #0
 8110968:	9300      	str	r3, [sp, #0]
 811096a:	4b11      	ldr	r3, [pc, #68]	@ (81109b0 <prvCheckForValidListAndQueue+0x74>)
 811096c:	4a11      	ldr	r2, [pc, #68]	@ (81109b4 <prvCheckForValidListAndQueue+0x78>)
 811096e:	2110      	movs	r1, #16
 8110970:	200a      	movs	r0, #10
 8110972:	f7fc fe35 	bl	810d5e0 <xQueueGenericCreateStatic>
 8110976:	4603      	mov	r3, r0
 8110978:	4a08      	ldr	r2, [pc, #32]	@ (811099c <prvCheckForValidListAndQueue+0x60>)
 811097a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 811097c:	4b07      	ldr	r3, [pc, #28]	@ (811099c <prvCheckForValidListAndQueue+0x60>)
 811097e:	681b      	ldr	r3, [r3, #0]
 8110980:	2b00      	cmp	r3, #0
 8110982:	d005      	beq.n	8110990 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8110984:	4b05      	ldr	r3, [pc, #20]	@ (811099c <prvCheckForValidListAndQueue+0x60>)
 8110986:	681b      	ldr	r3, [r3, #0]
 8110988:	490b      	ldr	r1, [pc, #44]	@ (81109b8 <prvCheckForValidListAndQueue+0x7c>)
 811098a:	4618      	mov	r0, r3
 811098c:	f7fd fe1a 	bl	810e5c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8110990:	f7fc fccc 	bl	810d32c <vPortExitCritical>
}
 8110994:	bf00      	nop
 8110996:	46bd      	mov	sp, r7
 8110998:	bd80      	pop	{r7, pc}
 811099a:	bf00      	nop
 811099c:	1000b054 	.word	0x1000b054
 81109a0:	1000b024 	.word	0x1000b024
 81109a4:	1000b038 	.word	0x1000b038
 81109a8:	1000b04c 	.word	0x1000b04c
 81109ac:	1000b050 	.word	0x1000b050
 81109b0:	1000b100 	.word	0x1000b100
 81109b4:	1000b060 	.word	0x1000b060
 81109b8:	0811cd50 	.word	0x0811cd50

081109bc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 81109bc:	b480      	push	{r7}
 81109be:	b083      	sub	sp, #12
 81109c0:	af00      	add	r7, sp, #0
 81109c2:	4603      	mov	r3, r0
 81109c4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 81109c6:	88fb      	ldrh	r3, [r7, #6]
 81109c8:	021b      	lsls	r3, r3, #8
 81109ca:	b21a      	sxth	r2, r3
 81109cc:	88fb      	ldrh	r3, [r7, #6]
 81109ce:	0a1b      	lsrs	r3, r3, #8
 81109d0:	b29b      	uxth	r3, r3
 81109d2:	b21b      	sxth	r3, r3
 81109d4:	4313      	orrs	r3, r2
 81109d6:	b21b      	sxth	r3, r3
 81109d8:	b29b      	uxth	r3, r3
}
 81109da:	4618      	mov	r0, r3
 81109dc:	370c      	adds	r7, #12
 81109de:	46bd      	mov	sp, r7
 81109e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81109e4:	4770      	bx	lr

081109e6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 81109e6:	b480      	push	{r7}
 81109e8:	b083      	sub	sp, #12
 81109ea:	af00      	add	r7, sp, #0
 81109ec:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 81109ee:	687b      	ldr	r3, [r7, #4]
 81109f0:	061a      	lsls	r2, r3, #24
 81109f2:	687b      	ldr	r3, [r7, #4]
 81109f4:	021b      	lsls	r3, r3, #8
 81109f6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 81109fa:	431a      	orrs	r2, r3
 81109fc:	687b      	ldr	r3, [r7, #4]
 81109fe:	0a1b      	lsrs	r3, r3, #8
 8110a00:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8110a04:	431a      	orrs	r2, r3
 8110a06:	687b      	ldr	r3, [r7, #4]
 8110a08:	0e1b      	lsrs	r3, r3, #24
 8110a0a:	4313      	orrs	r3, r2
}
 8110a0c:	4618      	mov	r0, r3
 8110a0e:	370c      	adds	r7, #12
 8110a10:	46bd      	mov	sp, r7
 8110a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110a16:	4770      	bx	lr

08110a18 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8110a18:	b580      	push	{r7, lr}
 8110a1a:	b082      	sub	sp, #8
 8110a1c:	af00      	add	r7, sp, #0
 8110a1e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8110a20:	4915      	ldr	r1, [pc, #84]	@ (8110a78 <etharp_free_entry+0x60>)
 8110a22:	687a      	ldr	r2, [r7, #4]
 8110a24:	4613      	mov	r3, r2
 8110a26:	005b      	lsls	r3, r3, #1
 8110a28:	4413      	add	r3, r2
 8110a2a:	00db      	lsls	r3, r3, #3
 8110a2c:	440b      	add	r3, r1
 8110a2e:	681b      	ldr	r3, [r3, #0]
 8110a30:	2b00      	cmp	r3, #0
 8110a32:	d013      	beq.n	8110a5c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8110a34:	4910      	ldr	r1, [pc, #64]	@ (8110a78 <etharp_free_entry+0x60>)
 8110a36:	687a      	ldr	r2, [r7, #4]
 8110a38:	4613      	mov	r3, r2
 8110a3a:	005b      	lsls	r3, r3, #1
 8110a3c:	4413      	add	r3, r2
 8110a3e:	00db      	lsls	r3, r3, #3
 8110a40:	440b      	add	r3, r1
 8110a42:	681b      	ldr	r3, [r3, #0]
 8110a44:	4618      	mov	r0, r3
 8110a46:	f003 ff3f 	bl	81148c8 <pbuf_free>
    arp_table[i].q = NULL;
 8110a4a:	490b      	ldr	r1, [pc, #44]	@ (8110a78 <etharp_free_entry+0x60>)
 8110a4c:	687a      	ldr	r2, [r7, #4]
 8110a4e:	4613      	mov	r3, r2
 8110a50:	005b      	lsls	r3, r3, #1
 8110a52:	4413      	add	r3, r2
 8110a54:	00db      	lsls	r3, r3, #3
 8110a56:	440b      	add	r3, r1
 8110a58:	2200      	movs	r2, #0
 8110a5a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8110a5c:	4906      	ldr	r1, [pc, #24]	@ (8110a78 <etharp_free_entry+0x60>)
 8110a5e:	687a      	ldr	r2, [r7, #4]
 8110a60:	4613      	mov	r3, r2
 8110a62:	005b      	lsls	r3, r3, #1
 8110a64:	4413      	add	r3, r2
 8110a66:	00db      	lsls	r3, r3, #3
 8110a68:	440b      	add	r3, r1
 8110a6a:	3314      	adds	r3, #20
 8110a6c:	2200      	movs	r2, #0
 8110a6e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8110a70:	bf00      	nop
 8110a72:	3708      	adds	r7, #8
 8110a74:	46bd      	mov	sp, r7
 8110a76:	bd80      	pop	{r7, pc}
 8110a78:	1000b150 	.word	0x1000b150

08110a7c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8110a7c:	b580      	push	{r7, lr}
 8110a7e:	b082      	sub	sp, #8
 8110a80:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8110a82:	2300      	movs	r3, #0
 8110a84:	607b      	str	r3, [r7, #4]
 8110a86:	e096      	b.n	8110bb6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8110a88:	494f      	ldr	r1, [pc, #316]	@ (8110bc8 <etharp_tmr+0x14c>)
 8110a8a:	687a      	ldr	r2, [r7, #4]
 8110a8c:	4613      	mov	r3, r2
 8110a8e:	005b      	lsls	r3, r3, #1
 8110a90:	4413      	add	r3, r2
 8110a92:	00db      	lsls	r3, r3, #3
 8110a94:	440b      	add	r3, r1
 8110a96:	3314      	adds	r3, #20
 8110a98:	781b      	ldrb	r3, [r3, #0]
 8110a9a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8110a9c:	78fb      	ldrb	r3, [r7, #3]
 8110a9e:	2b00      	cmp	r3, #0
 8110aa0:	f000 8086 	beq.w	8110bb0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8110aa4:	4948      	ldr	r1, [pc, #288]	@ (8110bc8 <etharp_tmr+0x14c>)
 8110aa6:	687a      	ldr	r2, [r7, #4]
 8110aa8:	4613      	mov	r3, r2
 8110aaa:	005b      	lsls	r3, r3, #1
 8110aac:	4413      	add	r3, r2
 8110aae:	00db      	lsls	r3, r3, #3
 8110ab0:	440b      	add	r3, r1
 8110ab2:	3312      	adds	r3, #18
 8110ab4:	881b      	ldrh	r3, [r3, #0]
 8110ab6:	3301      	adds	r3, #1
 8110ab8:	b298      	uxth	r0, r3
 8110aba:	4943      	ldr	r1, [pc, #268]	@ (8110bc8 <etharp_tmr+0x14c>)
 8110abc:	687a      	ldr	r2, [r7, #4]
 8110abe:	4613      	mov	r3, r2
 8110ac0:	005b      	lsls	r3, r3, #1
 8110ac2:	4413      	add	r3, r2
 8110ac4:	00db      	lsls	r3, r3, #3
 8110ac6:	440b      	add	r3, r1
 8110ac8:	3312      	adds	r3, #18
 8110aca:	4602      	mov	r2, r0
 8110acc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8110ace:	493e      	ldr	r1, [pc, #248]	@ (8110bc8 <etharp_tmr+0x14c>)
 8110ad0:	687a      	ldr	r2, [r7, #4]
 8110ad2:	4613      	mov	r3, r2
 8110ad4:	005b      	lsls	r3, r3, #1
 8110ad6:	4413      	add	r3, r2
 8110ad8:	00db      	lsls	r3, r3, #3
 8110ada:	440b      	add	r3, r1
 8110adc:	3312      	adds	r3, #18
 8110ade:	881b      	ldrh	r3, [r3, #0]
 8110ae0:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8110ae4:	d215      	bcs.n	8110b12 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8110ae6:	4938      	ldr	r1, [pc, #224]	@ (8110bc8 <etharp_tmr+0x14c>)
 8110ae8:	687a      	ldr	r2, [r7, #4]
 8110aea:	4613      	mov	r3, r2
 8110aec:	005b      	lsls	r3, r3, #1
 8110aee:	4413      	add	r3, r2
 8110af0:	00db      	lsls	r3, r3, #3
 8110af2:	440b      	add	r3, r1
 8110af4:	3314      	adds	r3, #20
 8110af6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8110af8:	2b01      	cmp	r3, #1
 8110afa:	d10e      	bne.n	8110b1a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8110afc:	4932      	ldr	r1, [pc, #200]	@ (8110bc8 <etharp_tmr+0x14c>)
 8110afe:	687a      	ldr	r2, [r7, #4]
 8110b00:	4613      	mov	r3, r2
 8110b02:	005b      	lsls	r3, r3, #1
 8110b04:	4413      	add	r3, r2
 8110b06:	00db      	lsls	r3, r3, #3
 8110b08:	440b      	add	r3, r1
 8110b0a:	3312      	adds	r3, #18
 8110b0c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8110b0e:	2b04      	cmp	r3, #4
 8110b10:	d903      	bls.n	8110b1a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8110b12:	6878      	ldr	r0, [r7, #4]
 8110b14:	f7ff ff80 	bl	8110a18 <etharp_free_entry>
 8110b18:	e04a      	b.n	8110bb0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8110b1a:	492b      	ldr	r1, [pc, #172]	@ (8110bc8 <etharp_tmr+0x14c>)
 8110b1c:	687a      	ldr	r2, [r7, #4]
 8110b1e:	4613      	mov	r3, r2
 8110b20:	005b      	lsls	r3, r3, #1
 8110b22:	4413      	add	r3, r2
 8110b24:	00db      	lsls	r3, r3, #3
 8110b26:	440b      	add	r3, r1
 8110b28:	3314      	adds	r3, #20
 8110b2a:	781b      	ldrb	r3, [r3, #0]
 8110b2c:	2b03      	cmp	r3, #3
 8110b2e:	d10a      	bne.n	8110b46 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8110b30:	4925      	ldr	r1, [pc, #148]	@ (8110bc8 <etharp_tmr+0x14c>)
 8110b32:	687a      	ldr	r2, [r7, #4]
 8110b34:	4613      	mov	r3, r2
 8110b36:	005b      	lsls	r3, r3, #1
 8110b38:	4413      	add	r3, r2
 8110b3a:	00db      	lsls	r3, r3, #3
 8110b3c:	440b      	add	r3, r1
 8110b3e:	3314      	adds	r3, #20
 8110b40:	2204      	movs	r2, #4
 8110b42:	701a      	strb	r2, [r3, #0]
 8110b44:	e034      	b.n	8110bb0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8110b46:	4920      	ldr	r1, [pc, #128]	@ (8110bc8 <etharp_tmr+0x14c>)
 8110b48:	687a      	ldr	r2, [r7, #4]
 8110b4a:	4613      	mov	r3, r2
 8110b4c:	005b      	lsls	r3, r3, #1
 8110b4e:	4413      	add	r3, r2
 8110b50:	00db      	lsls	r3, r3, #3
 8110b52:	440b      	add	r3, r1
 8110b54:	3314      	adds	r3, #20
 8110b56:	781b      	ldrb	r3, [r3, #0]
 8110b58:	2b04      	cmp	r3, #4
 8110b5a:	d10a      	bne.n	8110b72 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8110b5c:	491a      	ldr	r1, [pc, #104]	@ (8110bc8 <etharp_tmr+0x14c>)
 8110b5e:	687a      	ldr	r2, [r7, #4]
 8110b60:	4613      	mov	r3, r2
 8110b62:	005b      	lsls	r3, r3, #1
 8110b64:	4413      	add	r3, r2
 8110b66:	00db      	lsls	r3, r3, #3
 8110b68:	440b      	add	r3, r1
 8110b6a:	3314      	adds	r3, #20
 8110b6c:	2202      	movs	r2, #2
 8110b6e:	701a      	strb	r2, [r3, #0]
 8110b70:	e01e      	b.n	8110bb0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8110b72:	4915      	ldr	r1, [pc, #84]	@ (8110bc8 <etharp_tmr+0x14c>)
 8110b74:	687a      	ldr	r2, [r7, #4]
 8110b76:	4613      	mov	r3, r2
 8110b78:	005b      	lsls	r3, r3, #1
 8110b7a:	4413      	add	r3, r2
 8110b7c:	00db      	lsls	r3, r3, #3
 8110b7e:	440b      	add	r3, r1
 8110b80:	3314      	adds	r3, #20
 8110b82:	781b      	ldrb	r3, [r3, #0]
 8110b84:	2b01      	cmp	r3, #1
 8110b86:	d113      	bne.n	8110bb0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8110b88:	490f      	ldr	r1, [pc, #60]	@ (8110bc8 <etharp_tmr+0x14c>)
 8110b8a:	687a      	ldr	r2, [r7, #4]
 8110b8c:	4613      	mov	r3, r2
 8110b8e:	005b      	lsls	r3, r3, #1
 8110b90:	4413      	add	r3, r2
 8110b92:	00db      	lsls	r3, r3, #3
 8110b94:	440b      	add	r3, r1
 8110b96:	3308      	adds	r3, #8
 8110b98:	6818      	ldr	r0, [r3, #0]
 8110b9a:	687a      	ldr	r2, [r7, #4]
 8110b9c:	4613      	mov	r3, r2
 8110b9e:	005b      	lsls	r3, r3, #1
 8110ba0:	4413      	add	r3, r2
 8110ba2:	00db      	lsls	r3, r3, #3
 8110ba4:	4a08      	ldr	r2, [pc, #32]	@ (8110bc8 <etharp_tmr+0x14c>)
 8110ba6:	4413      	add	r3, r2
 8110ba8:	3304      	adds	r3, #4
 8110baa:	4619      	mov	r1, r3
 8110bac:	f000 fe6e 	bl	811188c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8110bb0:	687b      	ldr	r3, [r7, #4]
 8110bb2:	3301      	adds	r3, #1
 8110bb4:	607b      	str	r3, [r7, #4]
 8110bb6:	687b      	ldr	r3, [r7, #4]
 8110bb8:	2b09      	cmp	r3, #9
 8110bba:	f77f af65 	ble.w	8110a88 <etharp_tmr+0xc>
      }
    }
  }
}
 8110bbe:	bf00      	nop
 8110bc0:	bf00      	nop
 8110bc2:	3708      	adds	r7, #8
 8110bc4:	46bd      	mov	sp, r7
 8110bc6:	bd80      	pop	{r7, pc}
 8110bc8:	1000b150 	.word	0x1000b150

08110bcc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8110bcc:	b580      	push	{r7, lr}
 8110bce:	b08a      	sub	sp, #40	@ 0x28
 8110bd0:	af00      	add	r7, sp, #0
 8110bd2:	60f8      	str	r0, [r7, #12]
 8110bd4:	460b      	mov	r3, r1
 8110bd6:	607a      	str	r2, [r7, #4]
 8110bd8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8110bda:	230a      	movs	r3, #10
 8110bdc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8110bde:	230a      	movs	r3, #10
 8110be0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8110be2:	230a      	movs	r3, #10
 8110be4:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8110be6:	2300      	movs	r3, #0
 8110be8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8110bea:	230a      	movs	r3, #10
 8110bec:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8110bee:	2300      	movs	r3, #0
 8110bf0:	83bb      	strh	r3, [r7, #28]
 8110bf2:	2300      	movs	r3, #0
 8110bf4:	837b      	strh	r3, [r7, #26]
 8110bf6:	2300      	movs	r3, #0
 8110bf8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8110bfa:	2300      	movs	r3, #0
 8110bfc:	843b      	strh	r3, [r7, #32]
 8110bfe:	e0ae      	b.n	8110d5e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8110c00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8110c04:	49a6      	ldr	r1, [pc, #664]	@ (8110ea0 <etharp_find_entry+0x2d4>)
 8110c06:	4613      	mov	r3, r2
 8110c08:	005b      	lsls	r3, r3, #1
 8110c0a:	4413      	add	r3, r2
 8110c0c:	00db      	lsls	r3, r3, #3
 8110c0e:	440b      	add	r3, r1
 8110c10:	3314      	adds	r3, #20
 8110c12:	781b      	ldrb	r3, [r3, #0]
 8110c14:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8110c16:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8110c1a:	2b0a      	cmp	r3, #10
 8110c1c:	d105      	bne.n	8110c2a <etharp_find_entry+0x5e>
 8110c1e:	7dfb      	ldrb	r3, [r7, #23]
 8110c20:	2b00      	cmp	r3, #0
 8110c22:	d102      	bne.n	8110c2a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8110c24:	8c3b      	ldrh	r3, [r7, #32]
 8110c26:	847b      	strh	r3, [r7, #34]	@ 0x22
 8110c28:	e095      	b.n	8110d56 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8110c2a:	7dfb      	ldrb	r3, [r7, #23]
 8110c2c:	2b00      	cmp	r3, #0
 8110c2e:	f000 8092 	beq.w	8110d56 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8110c32:	7dfb      	ldrb	r3, [r7, #23]
 8110c34:	2b01      	cmp	r3, #1
 8110c36:	d009      	beq.n	8110c4c <etharp_find_entry+0x80>
 8110c38:	7dfb      	ldrb	r3, [r7, #23]
 8110c3a:	2b01      	cmp	r3, #1
 8110c3c:	d806      	bhi.n	8110c4c <etharp_find_entry+0x80>
 8110c3e:	4b99      	ldr	r3, [pc, #612]	@ (8110ea4 <etharp_find_entry+0x2d8>)
 8110c40:	f240 1223 	movw	r2, #291	@ 0x123
 8110c44:	4998      	ldr	r1, [pc, #608]	@ (8110ea8 <etharp_find_entry+0x2dc>)
 8110c46:	4899      	ldr	r0, [pc, #612]	@ (8110eac <etharp_find_entry+0x2e0>)
 8110c48:	f00b f900 	bl	811be4c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8110c4c:	68fb      	ldr	r3, [r7, #12]
 8110c4e:	2b00      	cmp	r3, #0
 8110c50:	d020      	beq.n	8110c94 <etharp_find_entry+0xc8>
 8110c52:	68fb      	ldr	r3, [r7, #12]
 8110c54:	6819      	ldr	r1, [r3, #0]
 8110c56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8110c5a:	4891      	ldr	r0, [pc, #580]	@ (8110ea0 <etharp_find_entry+0x2d4>)
 8110c5c:	4613      	mov	r3, r2
 8110c5e:	005b      	lsls	r3, r3, #1
 8110c60:	4413      	add	r3, r2
 8110c62:	00db      	lsls	r3, r3, #3
 8110c64:	4403      	add	r3, r0
 8110c66:	3304      	adds	r3, #4
 8110c68:	681b      	ldr	r3, [r3, #0]
 8110c6a:	4299      	cmp	r1, r3
 8110c6c:	d112      	bne.n	8110c94 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8110c6e:	687b      	ldr	r3, [r7, #4]
 8110c70:	2b00      	cmp	r3, #0
 8110c72:	d00c      	beq.n	8110c8e <etharp_find_entry+0xc2>
 8110c74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8110c78:	4989      	ldr	r1, [pc, #548]	@ (8110ea0 <etharp_find_entry+0x2d4>)
 8110c7a:	4613      	mov	r3, r2
 8110c7c:	005b      	lsls	r3, r3, #1
 8110c7e:	4413      	add	r3, r2
 8110c80:	00db      	lsls	r3, r3, #3
 8110c82:	440b      	add	r3, r1
 8110c84:	3308      	adds	r3, #8
 8110c86:	681b      	ldr	r3, [r3, #0]
 8110c88:	687a      	ldr	r2, [r7, #4]
 8110c8a:	429a      	cmp	r2, r3
 8110c8c:	d102      	bne.n	8110c94 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8110c8e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8110c92:	e100      	b.n	8110e96 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8110c94:	7dfb      	ldrb	r3, [r7, #23]
 8110c96:	2b01      	cmp	r3, #1
 8110c98:	d140      	bne.n	8110d1c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8110c9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8110c9e:	4980      	ldr	r1, [pc, #512]	@ (8110ea0 <etharp_find_entry+0x2d4>)
 8110ca0:	4613      	mov	r3, r2
 8110ca2:	005b      	lsls	r3, r3, #1
 8110ca4:	4413      	add	r3, r2
 8110ca6:	00db      	lsls	r3, r3, #3
 8110ca8:	440b      	add	r3, r1
 8110caa:	681b      	ldr	r3, [r3, #0]
 8110cac:	2b00      	cmp	r3, #0
 8110cae:	d01a      	beq.n	8110ce6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8110cb0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8110cb4:	497a      	ldr	r1, [pc, #488]	@ (8110ea0 <etharp_find_entry+0x2d4>)
 8110cb6:	4613      	mov	r3, r2
 8110cb8:	005b      	lsls	r3, r3, #1
 8110cba:	4413      	add	r3, r2
 8110cbc:	00db      	lsls	r3, r3, #3
 8110cbe:	440b      	add	r3, r1
 8110cc0:	3312      	adds	r3, #18
 8110cc2:	881b      	ldrh	r3, [r3, #0]
 8110cc4:	8bba      	ldrh	r2, [r7, #28]
 8110cc6:	429a      	cmp	r2, r3
 8110cc8:	d845      	bhi.n	8110d56 <etharp_find_entry+0x18a>
            old_queue = i;
 8110cca:	8c3b      	ldrh	r3, [r7, #32]
 8110ccc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8110cce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8110cd2:	4973      	ldr	r1, [pc, #460]	@ (8110ea0 <etharp_find_entry+0x2d4>)
 8110cd4:	4613      	mov	r3, r2
 8110cd6:	005b      	lsls	r3, r3, #1
 8110cd8:	4413      	add	r3, r2
 8110cda:	00db      	lsls	r3, r3, #3
 8110cdc:	440b      	add	r3, r1
 8110cde:	3312      	adds	r3, #18
 8110ce0:	881b      	ldrh	r3, [r3, #0]
 8110ce2:	83bb      	strh	r3, [r7, #28]
 8110ce4:	e037      	b.n	8110d56 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8110ce6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8110cea:	496d      	ldr	r1, [pc, #436]	@ (8110ea0 <etharp_find_entry+0x2d4>)
 8110cec:	4613      	mov	r3, r2
 8110cee:	005b      	lsls	r3, r3, #1
 8110cf0:	4413      	add	r3, r2
 8110cf2:	00db      	lsls	r3, r3, #3
 8110cf4:	440b      	add	r3, r1
 8110cf6:	3312      	adds	r3, #18
 8110cf8:	881b      	ldrh	r3, [r3, #0]
 8110cfa:	8b7a      	ldrh	r2, [r7, #26]
 8110cfc:	429a      	cmp	r2, r3
 8110cfe:	d82a      	bhi.n	8110d56 <etharp_find_entry+0x18a>
            old_pending = i;
 8110d00:	8c3b      	ldrh	r3, [r7, #32]
 8110d02:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8110d04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8110d08:	4965      	ldr	r1, [pc, #404]	@ (8110ea0 <etharp_find_entry+0x2d4>)
 8110d0a:	4613      	mov	r3, r2
 8110d0c:	005b      	lsls	r3, r3, #1
 8110d0e:	4413      	add	r3, r2
 8110d10:	00db      	lsls	r3, r3, #3
 8110d12:	440b      	add	r3, r1
 8110d14:	3312      	adds	r3, #18
 8110d16:	881b      	ldrh	r3, [r3, #0]
 8110d18:	837b      	strh	r3, [r7, #26]
 8110d1a:	e01c      	b.n	8110d56 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8110d1c:	7dfb      	ldrb	r3, [r7, #23]
 8110d1e:	2b01      	cmp	r3, #1
 8110d20:	d919      	bls.n	8110d56 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8110d22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8110d26:	495e      	ldr	r1, [pc, #376]	@ (8110ea0 <etharp_find_entry+0x2d4>)
 8110d28:	4613      	mov	r3, r2
 8110d2a:	005b      	lsls	r3, r3, #1
 8110d2c:	4413      	add	r3, r2
 8110d2e:	00db      	lsls	r3, r3, #3
 8110d30:	440b      	add	r3, r1
 8110d32:	3312      	adds	r3, #18
 8110d34:	881b      	ldrh	r3, [r3, #0]
 8110d36:	8b3a      	ldrh	r2, [r7, #24]
 8110d38:	429a      	cmp	r2, r3
 8110d3a:	d80c      	bhi.n	8110d56 <etharp_find_entry+0x18a>
            old_stable = i;
 8110d3c:	8c3b      	ldrh	r3, [r7, #32]
 8110d3e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8110d40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8110d44:	4956      	ldr	r1, [pc, #344]	@ (8110ea0 <etharp_find_entry+0x2d4>)
 8110d46:	4613      	mov	r3, r2
 8110d48:	005b      	lsls	r3, r3, #1
 8110d4a:	4413      	add	r3, r2
 8110d4c:	00db      	lsls	r3, r3, #3
 8110d4e:	440b      	add	r3, r1
 8110d50:	3312      	adds	r3, #18
 8110d52:	881b      	ldrh	r3, [r3, #0]
 8110d54:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8110d56:	8c3b      	ldrh	r3, [r7, #32]
 8110d58:	3301      	adds	r3, #1
 8110d5a:	b29b      	uxth	r3, r3
 8110d5c:	843b      	strh	r3, [r7, #32]
 8110d5e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8110d62:	2b09      	cmp	r3, #9
 8110d64:	f77f af4c 	ble.w	8110c00 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8110d68:	7afb      	ldrb	r3, [r7, #11]
 8110d6a:	f003 0302 	and.w	r3, r3, #2
 8110d6e:	2b00      	cmp	r3, #0
 8110d70:	d108      	bne.n	8110d84 <etharp_find_entry+0x1b8>
 8110d72:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8110d76:	2b0a      	cmp	r3, #10
 8110d78:	d107      	bne.n	8110d8a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8110d7a:	7afb      	ldrb	r3, [r7, #11]
 8110d7c:	f003 0301 	and.w	r3, r3, #1
 8110d80:	2b00      	cmp	r3, #0
 8110d82:	d102      	bne.n	8110d8a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8110d84:	f04f 33ff 	mov.w	r3, #4294967295
 8110d88:	e085      	b.n	8110e96 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8110d8a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8110d8e:	2b09      	cmp	r3, #9
 8110d90:	dc02      	bgt.n	8110d98 <etharp_find_entry+0x1cc>
    i = empty;
 8110d92:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8110d94:	843b      	strh	r3, [r7, #32]
 8110d96:	e039      	b.n	8110e0c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8110d98:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8110d9c:	2b09      	cmp	r3, #9
 8110d9e:	dc14      	bgt.n	8110dca <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8110da0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8110da2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8110da4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8110da8:	493d      	ldr	r1, [pc, #244]	@ (8110ea0 <etharp_find_entry+0x2d4>)
 8110daa:	4613      	mov	r3, r2
 8110dac:	005b      	lsls	r3, r3, #1
 8110dae:	4413      	add	r3, r2
 8110db0:	00db      	lsls	r3, r3, #3
 8110db2:	440b      	add	r3, r1
 8110db4:	681b      	ldr	r3, [r3, #0]
 8110db6:	2b00      	cmp	r3, #0
 8110db8:	d018      	beq.n	8110dec <etharp_find_entry+0x220>
 8110dba:	4b3a      	ldr	r3, [pc, #232]	@ (8110ea4 <etharp_find_entry+0x2d8>)
 8110dbc:	f240 126d 	movw	r2, #365	@ 0x16d
 8110dc0:	493b      	ldr	r1, [pc, #236]	@ (8110eb0 <etharp_find_entry+0x2e4>)
 8110dc2:	483a      	ldr	r0, [pc, #232]	@ (8110eac <etharp_find_entry+0x2e0>)
 8110dc4:	f00b f842 	bl	811be4c <iprintf>
 8110dc8:	e010      	b.n	8110dec <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8110dca:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8110dce:	2b09      	cmp	r3, #9
 8110dd0:	dc02      	bgt.n	8110dd8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8110dd2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8110dd4:	843b      	strh	r3, [r7, #32]
 8110dd6:	e009      	b.n	8110dec <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8110dd8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8110ddc:	2b09      	cmp	r3, #9
 8110dde:	dc02      	bgt.n	8110de6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8110de0:	8bfb      	ldrh	r3, [r7, #30]
 8110de2:	843b      	strh	r3, [r7, #32]
 8110de4:	e002      	b.n	8110dec <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8110de6:	f04f 33ff 	mov.w	r3, #4294967295
 8110dea:	e054      	b.n	8110e96 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8110dec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8110df0:	2b09      	cmp	r3, #9
 8110df2:	dd06      	ble.n	8110e02 <etharp_find_entry+0x236>
 8110df4:	4b2b      	ldr	r3, [pc, #172]	@ (8110ea4 <etharp_find_entry+0x2d8>)
 8110df6:	f240 127f 	movw	r2, #383	@ 0x17f
 8110dfa:	492e      	ldr	r1, [pc, #184]	@ (8110eb4 <etharp_find_entry+0x2e8>)
 8110dfc:	482b      	ldr	r0, [pc, #172]	@ (8110eac <etharp_find_entry+0x2e0>)
 8110dfe:	f00b f825 	bl	811be4c <iprintf>
    etharp_free_entry(i);
 8110e02:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8110e06:	4618      	mov	r0, r3
 8110e08:	f7ff fe06 	bl	8110a18 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8110e0c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8110e10:	2b09      	cmp	r3, #9
 8110e12:	dd06      	ble.n	8110e22 <etharp_find_entry+0x256>
 8110e14:	4b23      	ldr	r3, [pc, #140]	@ (8110ea4 <etharp_find_entry+0x2d8>)
 8110e16:	f240 1283 	movw	r2, #387	@ 0x183
 8110e1a:	4926      	ldr	r1, [pc, #152]	@ (8110eb4 <etharp_find_entry+0x2e8>)
 8110e1c:	4823      	ldr	r0, [pc, #140]	@ (8110eac <etharp_find_entry+0x2e0>)
 8110e1e:	f00b f815 	bl	811be4c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8110e22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8110e26:	491e      	ldr	r1, [pc, #120]	@ (8110ea0 <etharp_find_entry+0x2d4>)
 8110e28:	4613      	mov	r3, r2
 8110e2a:	005b      	lsls	r3, r3, #1
 8110e2c:	4413      	add	r3, r2
 8110e2e:	00db      	lsls	r3, r3, #3
 8110e30:	440b      	add	r3, r1
 8110e32:	3314      	adds	r3, #20
 8110e34:	781b      	ldrb	r3, [r3, #0]
 8110e36:	2b00      	cmp	r3, #0
 8110e38:	d006      	beq.n	8110e48 <etharp_find_entry+0x27c>
 8110e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8110ea4 <etharp_find_entry+0x2d8>)
 8110e3c:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8110e40:	491d      	ldr	r1, [pc, #116]	@ (8110eb8 <etharp_find_entry+0x2ec>)
 8110e42:	481a      	ldr	r0, [pc, #104]	@ (8110eac <etharp_find_entry+0x2e0>)
 8110e44:	f00b f802 	bl	811be4c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8110e48:	68fb      	ldr	r3, [r7, #12]
 8110e4a:	2b00      	cmp	r3, #0
 8110e4c:	d00b      	beq.n	8110e66 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8110e4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8110e52:	68fb      	ldr	r3, [r7, #12]
 8110e54:	6819      	ldr	r1, [r3, #0]
 8110e56:	4812      	ldr	r0, [pc, #72]	@ (8110ea0 <etharp_find_entry+0x2d4>)
 8110e58:	4613      	mov	r3, r2
 8110e5a:	005b      	lsls	r3, r3, #1
 8110e5c:	4413      	add	r3, r2
 8110e5e:	00db      	lsls	r3, r3, #3
 8110e60:	4403      	add	r3, r0
 8110e62:	3304      	adds	r3, #4
 8110e64:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8110e66:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8110e6a:	490d      	ldr	r1, [pc, #52]	@ (8110ea0 <etharp_find_entry+0x2d4>)
 8110e6c:	4613      	mov	r3, r2
 8110e6e:	005b      	lsls	r3, r3, #1
 8110e70:	4413      	add	r3, r2
 8110e72:	00db      	lsls	r3, r3, #3
 8110e74:	440b      	add	r3, r1
 8110e76:	3312      	adds	r3, #18
 8110e78:	2200      	movs	r2, #0
 8110e7a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8110e7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8110e80:	4907      	ldr	r1, [pc, #28]	@ (8110ea0 <etharp_find_entry+0x2d4>)
 8110e82:	4613      	mov	r3, r2
 8110e84:	005b      	lsls	r3, r3, #1
 8110e86:	4413      	add	r3, r2
 8110e88:	00db      	lsls	r3, r3, #3
 8110e8a:	440b      	add	r3, r1
 8110e8c:	3308      	adds	r3, #8
 8110e8e:	687a      	ldr	r2, [r7, #4]
 8110e90:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8110e92:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8110e96:	4618      	mov	r0, r3
 8110e98:	3728      	adds	r7, #40	@ 0x28
 8110e9a:	46bd      	mov	sp, r7
 8110e9c:	bd80      	pop	{r7, pc}
 8110e9e:	bf00      	nop
 8110ea0:	1000b150 	.word	0x1000b150
 8110ea4:	0811cd58 	.word	0x0811cd58
 8110ea8:	0811cdd0 	.word	0x0811cdd0
 8110eac:	0811ce10 	.word	0x0811ce10
 8110eb0:	0811ce38 	.word	0x0811ce38
 8110eb4:	0811ce50 	.word	0x0811ce50
 8110eb8:	0811ce64 	.word	0x0811ce64

08110ebc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8110ebc:	b580      	push	{r7, lr}
 8110ebe:	b088      	sub	sp, #32
 8110ec0:	af02      	add	r7, sp, #8
 8110ec2:	60f8      	str	r0, [r7, #12]
 8110ec4:	60b9      	str	r1, [r7, #8]
 8110ec6:	607a      	str	r2, [r7, #4]
 8110ec8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8110eca:	68fb      	ldr	r3, [r7, #12]
 8110ecc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8110ed0:	2b06      	cmp	r3, #6
 8110ed2:	d006      	beq.n	8110ee2 <etharp_update_arp_entry+0x26>
 8110ed4:	4b48      	ldr	r3, [pc, #288]	@ (8110ff8 <etharp_update_arp_entry+0x13c>)
 8110ed6:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8110eda:	4948      	ldr	r1, [pc, #288]	@ (8110ffc <etharp_update_arp_entry+0x140>)
 8110edc:	4848      	ldr	r0, [pc, #288]	@ (8111000 <etharp_update_arp_entry+0x144>)
 8110ede:	f00a ffb5 	bl	811be4c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8110ee2:	68bb      	ldr	r3, [r7, #8]
 8110ee4:	2b00      	cmp	r3, #0
 8110ee6:	d012      	beq.n	8110f0e <etharp_update_arp_entry+0x52>
 8110ee8:	68bb      	ldr	r3, [r7, #8]
 8110eea:	681b      	ldr	r3, [r3, #0]
 8110eec:	2b00      	cmp	r3, #0
 8110eee:	d00e      	beq.n	8110f0e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8110ef0:	68bb      	ldr	r3, [r7, #8]
 8110ef2:	681b      	ldr	r3, [r3, #0]
 8110ef4:	68f9      	ldr	r1, [r7, #12]
 8110ef6:	4618      	mov	r0, r3
 8110ef8:	f001 face 	bl	8112498 <ip4_addr_isbroadcast_u32>
 8110efc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8110efe:	2b00      	cmp	r3, #0
 8110f00:	d105      	bne.n	8110f0e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8110f02:	68bb      	ldr	r3, [r7, #8]
 8110f04:	681b      	ldr	r3, [r3, #0]
 8110f06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8110f0a:	2be0      	cmp	r3, #224	@ 0xe0
 8110f0c:	d102      	bne.n	8110f14 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8110f0e:	f06f 030f 	mvn.w	r3, #15
 8110f12:	e06c      	b.n	8110fee <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8110f14:	78fb      	ldrb	r3, [r7, #3]
 8110f16:	68fa      	ldr	r2, [r7, #12]
 8110f18:	4619      	mov	r1, r3
 8110f1a:	68b8      	ldr	r0, [r7, #8]
 8110f1c:	f7ff fe56 	bl	8110bcc <etharp_find_entry>
 8110f20:	4603      	mov	r3, r0
 8110f22:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8110f24:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8110f28:	2b00      	cmp	r3, #0
 8110f2a:	da02      	bge.n	8110f32 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8110f2c:	8afb      	ldrh	r3, [r7, #22]
 8110f2e:	b25b      	sxtb	r3, r3
 8110f30:	e05d      	b.n	8110fee <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8110f32:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8110f36:	4933      	ldr	r1, [pc, #204]	@ (8111004 <etharp_update_arp_entry+0x148>)
 8110f38:	4613      	mov	r3, r2
 8110f3a:	005b      	lsls	r3, r3, #1
 8110f3c:	4413      	add	r3, r2
 8110f3e:	00db      	lsls	r3, r3, #3
 8110f40:	440b      	add	r3, r1
 8110f42:	3314      	adds	r3, #20
 8110f44:	2202      	movs	r2, #2
 8110f46:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8110f48:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8110f4c:	492d      	ldr	r1, [pc, #180]	@ (8111004 <etharp_update_arp_entry+0x148>)
 8110f4e:	4613      	mov	r3, r2
 8110f50:	005b      	lsls	r3, r3, #1
 8110f52:	4413      	add	r3, r2
 8110f54:	00db      	lsls	r3, r3, #3
 8110f56:	440b      	add	r3, r1
 8110f58:	3308      	adds	r3, #8
 8110f5a:	68fa      	ldr	r2, [r7, #12]
 8110f5c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8110f5e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8110f62:	4613      	mov	r3, r2
 8110f64:	005b      	lsls	r3, r3, #1
 8110f66:	4413      	add	r3, r2
 8110f68:	00db      	lsls	r3, r3, #3
 8110f6a:	3308      	adds	r3, #8
 8110f6c:	4a25      	ldr	r2, [pc, #148]	@ (8111004 <etharp_update_arp_entry+0x148>)
 8110f6e:	4413      	add	r3, r2
 8110f70:	3304      	adds	r3, #4
 8110f72:	2206      	movs	r2, #6
 8110f74:	6879      	ldr	r1, [r7, #4]
 8110f76:	4618      	mov	r0, r3
 8110f78:	f00b f919 	bl	811c1ae <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8110f7c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8110f80:	4920      	ldr	r1, [pc, #128]	@ (8111004 <etharp_update_arp_entry+0x148>)
 8110f82:	4613      	mov	r3, r2
 8110f84:	005b      	lsls	r3, r3, #1
 8110f86:	4413      	add	r3, r2
 8110f88:	00db      	lsls	r3, r3, #3
 8110f8a:	440b      	add	r3, r1
 8110f8c:	3312      	adds	r3, #18
 8110f8e:	2200      	movs	r2, #0
 8110f90:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8110f92:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8110f96:	491b      	ldr	r1, [pc, #108]	@ (8111004 <etharp_update_arp_entry+0x148>)
 8110f98:	4613      	mov	r3, r2
 8110f9a:	005b      	lsls	r3, r3, #1
 8110f9c:	4413      	add	r3, r2
 8110f9e:	00db      	lsls	r3, r3, #3
 8110fa0:	440b      	add	r3, r1
 8110fa2:	681b      	ldr	r3, [r3, #0]
 8110fa4:	2b00      	cmp	r3, #0
 8110fa6:	d021      	beq.n	8110fec <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8110fa8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8110fac:	4915      	ldr	r1, [pc, #84]	@ (8111004 <etharp_update_arp_entry+0x148>)
 8110fae:	4613      	mov	r3, r2
 8110fb0:	005b      	lsls	r3, r3, #1
 8110fb2:	4413      	add	r3, r2
 8110fb4:	00db      	lsls	r3, r3, #3
 8110fb6:	440b      	add	r3, r1
 8110fb8:	681b      	ldr	r3, [r3, #0]
 8110fba:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8110fbc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8110fc0:	4910      	ldr	r1, [pc, #64]	@ (8111004 <etharp_update_arp_entry+0x148>)
 8110fc2:	4613      	mov	r3, r2
 8110fc4:	005b      	lsls	r3, r3, #1
 8110fc6:	4413      	add	r3, r2
 8110fc8:	00db      	lsls	r3, r3, #3
 8110fca:	440b      	add	r3, r1
 8110fcc:	2200      	movs	r2, #0
 8110fce:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8110fd0:	68fb      	ldr	r3, [r7, #12]
 8110fd2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8110fd6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8110fda:	9300      	str	r3, [sp, #0]
 8110fdc:	687b      	ldr	r3, [r7, #4]
 8110fde:	6939      	ldr	r1, [r7, #16]
 8110fe0:	68f8      	ldr	r0, [r7, #12]
 8110fe2:	f000 fcf3 	bl	81119cc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8110fe6:	6938      	ldr	r0, [r7, #16]
 8110fe8:	f003 fc6e 	bl	81148c8 <pbuf_free>
  }
  return ERR_OK;
 8110fec:	2300      	movs	r3, #0
}
 8110fee:	4618      	mov	r0, r3
 8110ff0:	3718      	adds	r7, #24
 8110ff2:	46bd      	mov	sp, r7
 8110ff4:	bd80      	pop	{r7, pc}
 8110ff6:	bf00      	nop
 8110ff8:	0811cd58 	.word	0x0811cd58
 8110ffc:	0811ce90 	.word	0x0811ce90
 8111000:	0811ce10 	.word	0x0811ce10
 8111004:	1000b150 	.word	0x1000b150

08111008 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8111008:	b580      	push	{r7, lr}
 811100a:	b084      	sub	sp, #16
 811100c:	af00      	add	r7, sp, #0
 811100e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8111010:	2300      	movs	r3, #0
 8111012:	60fb      	str	r3, [r7, #12]
 8111014:	e01e      	b.n	8111054 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8111016:	4913      	ldr	r1, [pc, #76]	@ (8111064 <etharp_cleanup_netif+0x5c>)
 8111018:	68fa      	ldr	r2, [r7, #12]
 811101a:	4613      	mov	r3, r2
 811101c:	005b      	lsls	r3, r3, #1
 811101e:	4413      	add	r3, r2
 8111020:	00db      	lsls	r3, r3, #3
 8111022:	440b      	add	r3, r1
 8111024:	3314      	adds	r3, #20
 8111026:	781b      	ldrb	r3, [r3, #0]
 8111028:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 811102a:	7afb      	ldrb	r3, [r7, #11]
 811102c:	2b00      	cmp	r3, #0
 811102e:	d00e      	beq.n	811104e <etharp_cleanup_netif+0x46>
 8111030:	490c      	ldr	r1, [pc, #48]	@ (8111064 <etharp_cleanup_netif+0x5c>)
 8111032:	68fa      	ldr	r2, [r7, #12]
 8111034:	4613      	mov	r3, r2
 8111036:	005b      	lsls	r3, r3, #1
 8111038:	4413      	add	r3, r2
 811103a:	00db      	lsls	r3, r3, #3
 811103c:	440b      	add	r3, r1
 811103e:	3308      	adds	r3, #8
 8111040:	681b      	ldr	r3, [r3, #0]
 8111042:	687a      	ldr	r2, [r7, #4]
 8111044:	429a      	cmp	r2, r3
 8111046:	d102      	bne.n	811104e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8111048:	68f8      	ldr	r0, [r7, #12]
 811104a:	f7ff fce5 	bl	8110a18 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 811104e:	68fb      	ldr	r3, [r7, #12]
 8111050:	3301      	adds	r3, #1
 8111052:	60fb      	str	r3, [r7, #12]
 8111054:	68fb      	ldr	r3, [r7, #12]
 8111056:	2b09      	cmp	r3, #9
 8111058:	dddd      	ble.n	8111016 <etharp_cleanup_netif+0xe>
    }
  }
}
 811105a:	bf00      	nop
 811105c:	bf00      	nop
 811105e:	3710      	adds	r7, #16
 8111060:	46bd      	mov	sp, r7
 8111062:	bd80      	pop	{r7, pc}
 8111064:	1000b150 	.word	0x1000b150

08111068 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8111068:	b5b0      	push	{r4, r5, r7, lr}
 811106a:	b08a      	sub	sp, #40	@ 0x28
 811106c:	af04      	add	r7, sp, #16
 811106e:	6078      	str	r0, [r7, #4]
 8111070:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8111072:	683b      	ldr	r3, [r7, #0]
 8111074:	2b00      	cmp	r3, #0
 8111076:	d107      	bne.n	8111088 <etharp_input+0x20>
 8111078:	4b3d      	ldr	r3, [pc, #244]	@ (8111170 <etharp_input+0x108>)
 811107a:	f240 228a 	movw	r2, #650	@ 0x28a
 811107e:	493d      	ldr	r1, [pc, #244]	@ (8111174 <etharp_input+0x10c>)
 8111080:	483d      	ldr	r0, [pc, #244]	@ (8111178 <etharp_input+0x110>)
 8111082:	f00a fee3 	bl	811be4c <iprintf>
 8111086:	e06f      	b.n	8111168 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8111088:	687b      	ldr	r3, [r7, #4]
 811108a:	685b      	ldr	r3, [r3, #4]
 811108c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 811108e:	693b      	ldr	r3, [r7, #16]
 8111090:	881b      	ldrh	r3, [r3, #0]
 8111092:	b29b      	uxth	r3, r3
 8111094:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8111098:	d10c      	bne.n	81110b4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 811109a:	693b      	ldr	r3, [r7, #16]
 811109c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 811109e:	2b06      	cmp	r3, #6
 81110a0:	d108      	bne.n	81110b4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 81110a2:	693b      	ldr	r3, [r7, #16]
 81110a4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 81110a6:	2b04      	cmp	r3, #4
 81110a8:	d104      	bne.n	81110b4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 81110aa:	693b      	ldr	r3, [r7, #16]
 81110ac:	885b      	ldrh	r3, [r3, #2]
 81110ae:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 81110b0:	2b08      	cmp	r3, #8
 81110b2:	d003      	beq.n	81110bc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 81110b4:	6878      	ldr	r0, [r7, #4]
 81110b6:	f003 fc07 	bl	81148c8 <pbuf_free>
    return;
 81110ba:	e055      	b.n	8111168 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 81110bc:	693b      	ldr	r3, [r7, #16]
 81110be:	330e      	adds	r3, #14
 81110c0:	681b      	ldr	r3, [r3, #0]
 81110c2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 81110c4:	693b      	ldr	r3, [r7, #16]
 81110c6:	3318      	adds	r3, #24
 81110c8:	681b      	ldr	r3, [r3, #0]
 81110ca:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 81110cc:	683b      	ldr	r3, [r7, #0]
 81110ce:	3304      	adds	r3, #4
 81110d0:	681b      	ldr	r3, [r3, #0]
 81110d2:	2b00      	cmp	r3, #0
 81110d4:	d102      	bne.n	81110dc <etharp_input+0x74>
    for_us = 0;
 81110d6:	2300      	movs	r3, #0
 81110d8:	75fb      	strb	r3, [r7, #23]
 81110da:	e009      	b.n	81110f0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 81110dc:	68ba      	ldr	r2, [r7, #8]
 81110de:	683b      	ldr	r3, [r7, #0]
 81110e0:	3304      	adds	r3, #4
 81110e2:	681b      	ldr	r3, [r3, #0]
 81110e4:	429a      	cmp	r2, r3
 81110e6:	bf0c      	ite	eq
 81110e8:	2301      	moveq	r3, #1
 81110ea:	2300      	movne	r3, #0
 81110ec:	b2db      	uxtb	r3, r3
 81110ee:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 81110f0:	693b      	ldr	r3, [r7, #16]
 81110f2:	f103 0208 	add.w	r2, r3, #8
 81110f6:	7dfb      	ldrb	r3, [r7, #23]
 81110f8:	2b00      	cmp	r3, #0
 81110fa:	d001      	beq.n	8111100 <etharp_input+0x98>
 81110fc:	2301      	movs	r3, #1
 81110fe:	e000      	b.n	8111102 <etharp_input+0x9a>
 8111100:	2302      	movs	r3, #2
 8111102:	f107 010c 	add.w	r1, r7, #12
 8111106:	6838      	ldr	r0, [r7, #0]
 8111108:	f7ff fed8 	bl	8110ebc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 811110c:	693b      	ldr	r3, [r7, #16]
 811110e:	88db      	ldrh	r3, [r3, #6]
 8111110:	b29b      	uxth	r3, r3
 8111112:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8111116:	d003      	beq.n	8111120 <etharp_input+0xb8>
 8111118:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 811111c:	d01e      	beq.n	811115c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 811111e:	e020      	b.n	8111162 <etharp_input+0xfa>
      if (for_us) {
 8111120:	7dfb      	ldrb	r3, [r7, #23]
 8111122:	2b00      	cmp	r3, #0
 8111124:	d01c      	beq.n	8111160 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8111126:	683b      	ldr	r3, [r7, #0]
 8111128:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 811112c:	693b      	ldr	r3, [r7, #16]
 811112e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8111132:	683b      	ldr	r3, [r7, #0]
 8111134:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8111138:	683b      	ldr	r3, [r7, #0]
 811113a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 811113c:	693a      	ldr	r2, [r7, #16]
 811113e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8111140:	2102      	movs	r1, #2
 8111142:	9103      	str	r1, [sp, #12]
 8111144:	f107 010c 	add.w	r1, r7, #12
 8111148:	9102      	str	r1, [sp, #8]
 811114a:	9201      	str	r2, [sp, #4]
 811114c:	9300      	str	r3, [sp, #0]
 811114e:	462b      	mov	r3, r5
 8111150:	4622      	mov	r2, r4
 8111152:	4601      	mov	r1, r0
 8111154:	6838      	ldr	r0, [r7, #0]
 8111156:	f000 faeb 	bl	8111730 <etharp_raw>
      break;
 811115a:	e001      	b.n	8111160 <etharp_input+0xf8>
      break;
 811115c:	bf00      	nop
 811115e:	e000      	b.n	8111162 <etharp_input+0xfa>
      break;
 8111160:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8111162:	6878      	ldr	r0, [r7, #4]
 8111164:	f003 fbb0 	bl	81148c8 <pbuf_free>
}
 8111168:	3718      	adds	r7, #24
 811116a:	46bd      	mov	sp, r7
 811116c:	bdb0      	pop	{r4, r5, r7, pc}
 811116e:	bf00      	nop
 8111170:	0811cd58 	.word	0x0811cd58
 8111174:	0811cee8 	.word	0x0811cee8
 8111178:	0811ce10 	.word	0x0811ce10

0811117c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 811117c:	b580      	push	{r7, lr}
 811117e:	b086      	sub	sp, #24
 8111180:	af02      	add	r7, sp, #8
 8111182:	60f8      	str	r0, [r7, #12]
 8111184:	60b9      	str	r1, [r7, #8]
 8111186:	4613      	mov	r3, r2
 8111188:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 811118a:	79fa      	ldrb	r2, [r7, #7]
 811118c:	4944      	ldr	r1, [pc, #272]	@ (81112a0 <etharp_output_to_arp_index+0x124>)
 811118e:	4613      	mov	r3, r2
 8111190:	005b      	lsls	r3, r3, #1
 8111192:	4413      	add	r3, r2
 8111194:	00db      	lsls	r3, r3, #3
 8111196:	440b      	add	r3, r1
 8111198:	3314      	adds	r3, #20
 811119a:	781b      	ldrb	r3, [r3, #0]
 811119c:	2b01      	cmp	r3, #1
 811119e:	d806      	bhi.n	81111ae <etharp_output_to_arp_index+0x32>
 81111a0:	4b40      	ldr	r3, [pc, #256]	@ (81112a4 <etharp_output_to_arp_index+0x128>)
 81111a2:	f240 22ee 	movw	r2, #750	@ 0x2ee
 81111a6:	4940      	ldr	r1, [pc, #256]	@ (81112a8 <etharp_output_to_arp_index+0x12c>)
 81111a8:	4840      	ldr	r0, [pc, #256]	@ (81112ac <etharp_output_to_arp_index+0x130>)
 81111aa:	f00a fe4f 	bl	811be4c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 81111ae:	79fa      	ldrb	r2, [r7, #7]
 81111b0:	493b      	ldr	r1, [pc, #236]	@ (81112a0 <etharp_output_to_arp_index+0x124>)
 81111b2:	4613      	mov	r3, r2
 81111b4:	005b      	lsls	r3, r3, #1
 81111b6:	4413      	add	r3, r2
 81111b8:	00db      	lsls	r3, r3, #3
 81111ba:	440b      	add	r3, r1
 81111bc:	3314      	adds	r3, #20
 81111be:	781b      	ldrb	r3, [r3, #0]
 81111c0:	2b02      	cmp	r3, #2
 81111c2:	d153      	bne.n	811126c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 81111c4:	79fa      	ldrb	r2, [r7, #7]
 81111c6:	4936      	ldr	r1, [pc, #216]	@ (81112a0 <etharp_output_to_arp_index+0x124>)
 81111c8:	4613      	mov	r3, r2
 81111ca:	005b      	lsls	r3, r3, #1
 81111cc:	4413      	add	r3, r2
 81111ce:	00db      	lsls	r3, r3, #3
 81111d0:	440b      	add	r3, r1
 81111d2:	3312      	adds	r3, #18
 81111d4:	881b      	ldrh	r3, [r3, #0]
 81111d6:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 81111da:	d919      	bls.n	8111210 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 81111dc:	79fa      	ldrb	r2, [r7, #7]
 81111de:	4613      	mov	r3, r2
 81111e0:	005b      	lsls	r3, r3, #1
 81111e2:	4413      	add	r3, r2
 81111e4:	00db      	lsls	r3, r3, #3
 81111e6:	4a2e      	ldr	r2, [pc, #184]	@ (81112a0 <etharp_output_to_arp_index+0x124>)
 81111e8:	4413      	add	r3, r2
 81111ea:	3304      	adds	r3, #4
 81111ec:	4619      	mov	r1, r3
 81111ee:	68f8      	ldr	r0, [r7, #12]
 81111f0:	f000 fb4c 	bl	811188c <etharp_request>
 81111f4:	4603      	mov	r3, r0
 81111f6:	2b00      	cmp	r3, #0
 81111f8:	d138      	bne.n	811126c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 81111fa:	79fa      	ldrb	r2, [r7, #7]
 81111fc:	4928      	ldr	r1, [pc, #160]	@ (81112a0 <etharp_output_to_arp_index+0x124>)
 81111fe:	4613      	mov	r3, r2
 8111200:	005b      	lsls	r3, r3, #1
 8111202:	4413      	add	r3, r2
 8111204:	00db      	lsls	r3, r3, #3
 8111206:	440b      	add	r3, r1
 8111208:	3314      	adds	r3, #20
 811120a:	2203      	movs	r2, #3
 811120c:	701a      	strb	r2, [r3, #0]
 811120e:	e02d      	b.n	811126c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8111210:	79fa      	ldrb	r2, [r7, #7]
 8111212:	4923      	ldr	r1, [pc, #140]	@ (81112a0 <etharp_output_to_arp_index+0x124>)
 8111214:	4613      	mov	r3, r2
 8111216:	005b      	lsls	r3, r3, #1
 8111218:	4413      	add	r3, r2
 811121a:	00db      	lsls	r3, r3, #3
 811121c:	440b      	add	r3, r1
 811121e:	3312      	adds	r3, #18
 8111220:	881b      	ldrh	r3, [r3, #0]
 8111222:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8111226:	d321      	bcc.n	811126c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8111228:	79fa      	ldrb	r2, [r7, #7]
 811122a:	4613      	mov	r3, r2
 811122c:	005b      	lsls	r3, r3, #1
 811122e:	4413      	add	r3, r2
 8111230:	00db      	lsls	r3, r3, #3
 8111232:	4a1b      	ldr	r2, [pc, #108]	@ (81112a0 <etharp_output_to_arp_index+0x124>)
 8111234:	4413      	add	r3, r2
 8111236:	1d19      	adds	r1, r3, #4
 8111238:	79fa      	ldrb	r2, [r7, #7]
 811123a:	4613      	mov	r3, r2
 811123c:	005b      	lsls	r3, r3, #1
 811123e:	4413      	add	r3, r2
 8111240:	00db      	lsls	r3, r3, #3
 8111242:	3308      	adds	r3, #8
 8111244:	4a16      	ldr	r2, [pc, #88]	@ (81112a0 <etharp_output_to_arp_index+0x124>)
 8111246:	4413      	add	r3, r2
 8111248:	3304      	adds	r3, #4
 811124a:	461a      	mov	r2, r3
 811124c:	68f8      	ldr	r0, [r7, #12]
 811124e:	f000 fafb 	bl	8111848 <etharp_request_dst>
 8111252:	4603      	mov	r3, r0
 8111254:	2b00      	cmp	r3, #0
 8111256:	d109      	bne.n	811126c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8111258:	79fa      	ldrb	r2, [r7, #7]
 811125a:	4911      	ldr	r1, [pc, #68]	@ (81112a0 <etharp_output_to_arp_index+0x124>)
 811125c:	4613      	mov	r3, r2
 811125e:	005b      	lsls	r3, r3, #1
 8111260:	4413      	add	r3, r2
 8111262:	00db      	lsls	r3, r3, #3
 8111264:	440b      	add	r3, r1
 8111266:	3314      	adds	r3, #20
 8111268:	2203      	movs	r2, #3
 811126a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 811126c:	68fb      	ldr	r3, [r7, #12]
 811126e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8111272:	79fa      	ldrb	r2, [r7, #7]
 8111274:	4613      	mov	r3, r2
 8111276:	005b      	lsls	r3, r3, #1
 8111278:	4413      	add	r3, r2
 811127a:	00db      	lsls	r3, r3, #3
 811127c:	3308      	adds	r3, #8
 811127e:	4a08      	ldr	r2, [pc, #32]	@ (81112a0 <etharp_output_to_arp_index+0x124>)
 8111280:	4413      	add	r3, r2
 8111282:	3304      	adds	r3, #4
 8111284:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8111288:	9200      	str	r2, [sp, #0]
 811128a:	460a      	mov	r2, r1
 811128c:	68b9      	ldr	r1, [r7, #8]
 811128e:	68f8      	ldr	r0, [r7, #12]
 8111290:	f000 fb9c 	bl	81119cc <ethernet_output>
 8111294:	4603      	mov	r3, r0
}
 8111296:	4618      	mov	r0, r3
 8111298:	3710      	adds	r7, #16
 811129a:	46bd      	mov	sp, r7
 811129c:	bd80      	pop	{r7, pc}
 811129e:	bf00      	nop
 81112a0:	1000b150 	.word	0x1000b150
 81112a4:	0811cd58 	.word	0x0811cd58
 81112a8:	0811cf08 	.word	0x0811cf08
 81112ac:	0811ce10 	.word	0x0811ce10

081112b0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 81112b0:	b580      	push	{r7, lr}
 81112b2:	b08a      	sub	sp, #40	@ 0x28
 81112b4:	af02      	add	r7, sp, #8
 81112b6:	60f8      	str	r0, [r7, #12]
 81112b8:	60b9      	str	r1, [r7, #8]
 81112ba:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 81112bc:	687b      	ldr	r3, [r7, #4]
 81112be:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 81112c0:	68fb      	ldr	r3, [r7, #12]
 81112c2:	2b00      	cmp	r3, #0
 81112c4:	d106      	bne.n	81112d4 <etharp_output+0x24>
 81112c6:	4b73      	ldr	r3, [pc, #460]	@ (8111494 <etharp_output+0x1e4>)
 81112c8:	f240 321e 	movw	r2, #798	@ 0x31e
 81112cc:	4972      	ldr	r1, [pc, #456]	@ (8111498 <etharp_output+0x1e8>)
 81112ce:	4873      	ldr	r0, [pc, #460]	@ (811149c <etharp_output+0x1ec>)
 81112d0:	f00a fdbc 	bl	811be4c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 81112d4:	68bb      	ldr	r3, [r7, #8]
 81112d6:	2b00      	cmp	r3, #0
 81112d8:	d106      	bne.n	81112e8 <etharp_output+0x38>
 81112da:	4b6e      	ldr	r3, [pc, #440]	@ (8111494 <etharp_output+0x1e4>)
 81112dc:	f240 321f 	movw	r2, #799	@ 0x31f
 81112e0:	496f      	ldr	r1, [pc, #444]	@ (81114a0 <etharp_output+0x1f0>)
 81112e2:	486e      	ldr	r0, [pc, #440]	@ (811149c <etharp_output+0x1ec>)
 81112e4:	f00a fdb2 	bl	811be4c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 81112e8:	687b      	ldr	r3, [r7, #4]
 81112ea:	2b00      	cmp	r3, #0
 81112ec:	d106      	bne.n	81112fc <etharp_output+0x4c>
 81112ee:	4b69      	ldr	r3, [pc, #420]	@ (8111494 <etharp_output+0x1e4>)
 81112f0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 81112f4:	496b      	ldr	r1, [pc, #428]	@ (81114a4 <etharp_output+0x1f4>)
 81112f6:	4869      	ldr	r0, [pc, #420]	@ (811149c <etharp_output+0x1ec>)
 81112f8:	f00a fda8 	bl	811be4c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 81112fc:	687b      	ldr	r3, [r7, #4]
 81112fe:	681b      	ldr	r3, [r3, #0]
 8111300:	68f9      	ldr	r1, [r7, #12]
 8111302:	4618      	mov	r0, r3
 8111304:	f001 f8c8 	bl	8112498 <ip4_addr_isbroadcast_u32>
 8111308:	4603      	mov	r3, r0
 811130a:	2b00      	cmp	r3, #0
 811130c:	d002      	beq.n	8111314 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 811130e:	4b66      	ldr	r3, [pc, #408]	@ (81114a8 <etharp_output+0x1f8>)
 8111310:	61fb      	str	r3, [r7, #28]
 8111312:	e0af      	b.n	8111474 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8111314:	687b      	ldr	r3, [r7, #4]
 8111316:	681b      	ldr	r3, [r3, #0]
 8111318:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 811131c:	2be0      	cmp	r3, #224	@ 0xe0
 811131e:	d118      	bne.n	8111352 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8111320:	2301      	movs	r3, #1
 8111322:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8111324:	2300      	movs	r3, #0
 8111326:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8111328:	235e      	movs	r3, #94	@ 0x5e
 811132a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 811132c:	687b      	ldr	r3, [r7, #4]
 811132e:	3301      	adds	r3, #1
 8111330:	781b      	ldrb	r3, [r3, #0]
 8111332:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8111336:	b2db      	uxtb	r3, r3
 8111338:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 811133a:	687b      	ldr	r3, [r7, #4]
 811133c:	3302      	adds	r3, #2
 811133e:	781b      	ldrb	r3, [r3, #0]
 8111340:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8111342:	687b      	ldr	r3, [r7, #4]
 8111344:	3303      	adds	r3, #3
 8111346:	781b      	ldrb	r3, [r3, #0]
 8111348:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 811134a:	f107 0310 	add.w	r3, r7, #16
 811134e:	61fb      	str	r3, [r7, #28]
 8111350:	e090      	b.n	8111474 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8111352:	687b      	ldr	r3, [r7, #4]
 8111354:	681a      	ldr	r2, [r3, #0]
 8111356:	68fb      	ldr	r3, [r7, #12]
 8111358:	3304      	adds	r3, #4
 811135a:	681b      	ldr	r3, [r3, #0]
 811135c:	405a      	eors	r2, r3
 811135e:	68fb      	ldr	r3, [r7, #12]
 8111360:	3308      	adds	r3, #8
 8111362:	681b      	ldr	r3, [r3, #0]
 8111364:	4013      	ands	r3, r2
 8111366:	2b00      	cmp	r3, #0
 8111368:	d012      	beq.n	8111390 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 811136a:	687b      	ldr	r3, [r7, #4]
 811136c:	681b      	ldr	r3, [r3, #0]
 811136e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8111370:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8111374:	4293      	cmp	r3, r2
 8111376:	d00b      	beq.n	8111390 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8111378:	68fb      	ldr	r3, [r7, #12]
 811137a:	330c      	adds	r3, #12
 811137c:	681b      	ldr	r3, [r3, #0]
 811137e:	2b00      	cmp	r3, #0
 8111380:	d003      	beq.n	811138a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8111382:	68fb      	ldr	r3, [r7, #12]
 8111384:	330c      	adds	r3, #12
 8111386:	61bb      	str	r3, [r7, #24]
 8111388:	e002      	b.n	8111390 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 811138a:	f06f 0303 	mvn.w	r3, #3
 811138e:	e07d      	b.n	811148c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8111390:	4b46      	ldr	r3, [pc, #280]	@ (81114ac <etharp_output+0x1fc>)
 8111392:	781b      	ldrb	r3, [r3, #0]
 8111394:	4619      	mov	r1, r3
 8111396:	4a46      	ldr	r2, [pc, #280]	@ (81114b0 <etharp_output+0x200>)
 8111398:	460b      	mov	r3, r1
 811139a:	005b      	lsls	r3, r3, #1
 811139c:	440b      	add	r3, r1
 811139e:	00db      	lsls	r3, r3, #3
 81113a0:	4413      	add	r3, r2
 81113a2:	3314      	adds	r3, #20
 81113a4:	781b      	ldrb	r3, [r3, #0]
 81113a6:	2b01      	cmp	r3, #1
 81113a8:	d925      	bls.n	81113f6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 81113aa:	4b40      	ldr	r3, [pc, #256]	@ (81114ac <etharp_output+0x1fc>)
 81113ac:	781b      	ldrb	r3, [r3, #0]
 81113ae:	4619      	mov	r1, r3
 81113b0:	4a3f      	ldr	r2, [pc, #252]	@ (81114b0 <etharp_output+0x200>)
 81113b2:	460b      	mov	r3, r1
 81113b4:	005b      	lsls	r3, r3, #1
 81113b6:	440b      	add	r3, r1
 81113b8:	00db      	lsls	r3, r3, #3
 81113ba:	4413      	add	r3, r2
 81113bc:	3308      	adds	r3, #8
 81113be:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 81113c0:	68fa      	ldr	r2, [r7, #12]
 81113c2:	429a      	cmp	r2, r3
 81113c4:	d117      	bne.n	81113f6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 81113c6:	69bb      	ldr	r3, [r7, #24]
 81113c8:	681a      	ldr	r2, [r3, #0]
 81113ca:	4b38      	ldr	r3, [pc, #224]	@ (81114ac <etharp_output+0x1fc>)
 81113cc:	781b      	ldrb	r3, [r3, #0]
 81113ce:	4618      	mov	r0, r3
 81113d0:	4937      	ldr	r1, [pc, #220]	@ (81114b0 <etharp_output+0x200>)
 81113d2:	4603      	mov	r3, r0
 81113d4:	005b      	lsls	r3, r3, #1
 81113d6:	4403      	add	r3, r0
 81113d8:	00db      	lsls	r3, r3, #3
 81113da:	440b      	add	r3, r1
 81113dc:	3304      	adds	r3, #4
 81113de:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 81113e0:	429a      	cmp	r2, r3
 81113e2:	d108      	bne.n	81113f6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 81113e4:	4b31      	ldr	r3, [pc, #196]	@ (81114ac <etharp_output+0x1fc>)
 81113e6:	781b      	ldrb	r3, [r3, #0]
 81113e8:	461a      	mov	r2, r3
 81113ea:	68b9      	ldr	r1, [r7, #8]
 81113ec:	68f8      	ldr	r0, [r7, #12]
 81113ee:	f7ff fec5 	bl	811117c <etharp_output_to_arp_index>
 81113f2:	4603      	mov	r3, r0
 81113f4:	e04a      	b.n	811148c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 81113f6:	2300      	movs	r3, #0
 81113f8:	75fb      	strb	r3, [r7, #23]
 81113fa:	e031      	b.n	8111460 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 81113fc:	7dfa      	ldrb	r2, [r7, #23]
 81113fe:	492c      	ldr	r1, [pc, #176]	@ (81114b0 <etharp_output+0x200>)
 8111400:	4613      	mov	r3, r2
 8111402:	005b      	lsls	r3, r3, #1
 8111404:	4413      	add	r3, r2
 8111406:	00db      	lsls	r3, r3, #3
 8111408:	440b      	add	r3, r1
 811140a:	3314      	adds	r3, #20
 811140c:	781b      	ldrb	r3, [r3, #0]
 811140e:	2b01      	cmp	r3, #1
 8111410:	d923      	bls.n	811145a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8111412:	7dfa      	ldrb	r2, [r7, #23]
 8111414:	4926      	ldr	r1, [pc, #152]	@ (81114b0 <etharp_output+0x200>)
 8111416:	4613      	mov	r3, r2
 8111418:	005b      	lsls	r3, r3, #1
 811141a:	4413      	add	r3, r2
 811141c:	00db      	lsls	r3, r3, #3
 811141e:	440b      	add	r3, r1
 8111420:	3308      	adds	r3, #8
 8111422:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8111424:	68fa      	ldr	r2, [r7, #12]
 8111426:	429a      	cmp	r2, r3
 8111428:	d117      	bne.n	811145a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 811142a:	69bb      	ldr	r3, [r7, #24]
 811142c:	6819      	ldr	r1, [r3, #0]
 811142e:	7dfa      	ldrb	r2, [r7, #23]
 8111430:	481f      	ldr	r0, [pc, #124]	@ (81114b0 <etharp_output+0x200>)
 8111432:	4613      	mov	r3, r2
 8111434:	005b      	lsls	r3, r3, #1
 8111436:	4413      	add	r3, r2
 8111438:	00db      	lsls	r3, r3, #3
 811143a:	4403      	add	r3, r0
 811143c:	3304      	adds	r3, #4
 811143e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8111440:	4299      	cmp	r1, r3
 8111442:	d10a      	bne.n	811145a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8111444:	4a19      	ldr	r2, [pc, #100]	@ (81114ac <etharp_output+0x1fc>)
 8111446:	7dfb      	ldrb	r3, [r7, #23]
 8111448:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 811144a:	7dfb      	ldrb	r3, [r7, #23]
 811144c:	461a      	mov	r2, r3
 811144e:	68b9      	ldr	r1, [r7, #8]
 8111450:	68f8      	ldr	r0, [r7, #12]
 8111452:	f7ff fe93 	bl	811117c <etharp_output_to_arp_index>
 8111456:	4603      	mov	r3, r0
 8111458:	e018      	b.n	811148c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 811145a:	7dfb      	ldrb	r3, [r7, #23]
 811145c:	3301      	adds	r3, #1
 811145e:	75fb      	strb	r3, [r7, #23]
 8111460:	7dfb      	ldrb	r3, [r7, #23]
 8111462:	2b09      	cmp	r3, #9
 8111464:	d9ca      	bls.n	81113fc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8111466:	68ba      	ldr	r2, [r7, #8]
 8111468:	69b9      	ldr	r1, [r7, #24]
 811146a:	68f8      	ldr	r0, [r7, #12]
 811146c:	f000 f822 	bl	81114b4 <etharp_query>
 8111470:	4603      	mov	r3, r0
 8111472:	e00b      	b.n	811148c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8111474:	68fb      	ldr	r3, [r7, #12]
 8111476:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 811147a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 811147e:	9300      	str	r3, [sp, #0]
 8111480:	69fb      	ldr	r3, [r7, #28]
 8111482:	68b9      	ldr	r1, [r7, #8]
 8111484:	68f8      	ldr	r0, [r7, #12]
 8111486:	f000 faa1 	bl	81119cc <ethernet_output>
 811148a:	4603      	mov	r3, r0
}
 811148c:	4618      	mov	r0, r3
 811148e:	3720      	adds	r7, #32
 8111490:	46bd      	mov	sp, r7
 8111492:	bd80      	pop	{r7, pc}
 8111494:	0811cd58 	.word	0x0811cd58
 8111498:	0811cee8 	.word	0x0811cee8
 811149c:	0811ce10 	.word	0x0811ce10
 81114a0:	0811cf38 	.word	0x0811cf38
 81114a4:	0811ced8 	.word	0x0811ced8
 81114a8:	0811fc40 	.word	0x0811fc40
 81114ac:	1000b240 	.word	0x1000b240
 81114b0:	1000b150 	.word	0x1000b150

081114b4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 81114b4:	b580      	push	{r7, lr}
 81114b6:	b08c      	sub	sp, #48	@ 0x30
 81114b8:	af02      	add	r7, sp, #8
 81114ba:	60f8      	str	r0, [r7, #12]
 81114bc:	60b9      	str	r1, [r7, #8]
 81114be:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 81114c0:	68fb      	ldr	r3, [r7, #12]
 81114c2:	3326      	adds	r3, #38	@ 0x26
 81114c4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 81114c6:	23ff      	movs	r3, #255	@ 0xff
 81114c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 81114cc:	2300      	movs	r3, #0
 81114ce:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 81114d0:	68bb      	ldr	r3, [r7, #8]
 81114d2:	681b      	ldr	r3, [r3, #0]
 81114d4:	68f9      	ldr	r1, [r7, #12]
 81114d6:	4618      	mov	r0, r3
 81114d8:	f000 ffde 	bl	8112498 <ip4_addr_isbroadcast_u32>
 81114dc:	4603      	mov	r3, r0
 81114de:	2b00      	cmp	r3, #0
 81114e0:	d10c      	bne.n	81114fc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 81114e2:	68bb      	ldr	r3, [r7, #8]
 81114e4:	681b      	ldr	r3, [r3, #0]
 81114e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 81114ea:	2be0      	cmp	r3, #224	@ 0xe0
 81114ec:	d006      	beq.n	81114fc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 81114ee:	68bb      	ldr	r3, [r7, #8]
 81114f0:	2b00      	cmp	r3, #0
 81114f2:	d003      	beq.n	81114fc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 81114f4:	68bb      	ldr	r3, [r7, #8]
 81114f6:	681b      	ldr	r3, [r3, #0]
 81114f8:	2b00      	cmp	r3, #0
 81114fa:	d102      	bne.n	8111502 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 81114fc:	f06f 030f 	mvn.w	r3, #15
 8111500:	e101      	b.n	8111706 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8111502:	68fa      	ldr	r2, [r7, #12]
 8111504:	2101      	movs	r1, #1
 8111506:	68b8      	ldr	r0, [r7, #8]
 8111508:	f7ff fb60 	bl	8110bcc <etharp_find_entry>
 811150c:	4603      	mov	r3, r0
 811150e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8111510:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8111514:	2b00      	cmp	r3, #0
 8111516:	da02      	bge.n	811151e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8111518:	8a7b      	ldrh	r3, [r7, #18]
 811151a:	b25b      	sxtb	r3, r3
 811151c:	e0f3      	b.n	8111706 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 811151e:	8a7b      	ldrh	r3, [r7, #18]
 8111520:	2b7e      	cmp	r3, #126	@ 0x7e
 8111522:	d906      	bls.n	8111532 <etharp_query+0x7e>
 8111524:	4b7a      	ldr	r3, [pc, #488]	@ (8111710 <etharp_query+0x25c>)
 8111526:	f240 32c1 	movw	r2, #961	@ 0x3c1
 811152a:	497a      	ldr	r1, [pc, #488]	@ (8111714 <etharp_query+0x260>)
 811152c:	487a      	ldr	r0, [pc, #488]	@ (8111718 <etharp_query+0x264>)
 811152e:	f00a fc8d 	bl	811be4c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8111532:	8a7b      	ldrh	r3, [r7, #18]
 8111534:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8111536:	7c7a      	ldrb	r2, [r7, #17]
 8111538:	4978      	ldr	r1, [pc, #480]	@ (811171c <etharp_query+0x268>)
 811153a:	4613      	mov	r3, r2
 811153c:	005b      	lsls	r3, r3, #1
 811153e:	4413      	add	r3, r2
 8111540:	00db      	lsls	r3, r3, #3
 8111542:	440b      	add	r3, r1
 8111544:	3314      	adds	r3, #20
 8111546:	781b      	ldrb	r3, [r3, #0]
 8111548:	2b00      	cmp	r3, #0
 811154a:	d115      	bne.n	8111578 <etharp_query+0xc4>
    is_new_entry = 1;
 811154c:	2301      	movs	r3, #1
 811154e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8111550:	7c7a      	ldrb	r2, [r7, #17]
 8111552:	4972      	ldr	r1, [pc, #456]	@ (811171c <etharp_query+0x268>)
 8111554:	4613      	mov	r3, r2
 8111556:	005b      	lsls	r3, r3, #1
 8111558:	4413      	add	r3, r2
 811155a:	00db      	lsls	r3, r3, #3
 811155c:	440b      	add	r3, r1
 811155e:	3314      	adds	r3, #20
 8111560:	2201      	movs	r2, #1
 8111562:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8111564:	7c7a      	ldrb	r2, [r7, #17]
 8111566:	496d      	ldr	r1, [pc, #436]	@ (811171c <etharp_query+0x268>)
 8111568:	4613      	mov	r3, r2
 811156a:	005b      	lsls	r3, r3, #1
 811156c:	4413      	add	r3, r2
 811156e:	00db      	lsls	r3, r3, #3
 8111570:	440b      	add	r3, r1
 8111572:	3308      	adds	r3, #8
 8111574:	68fa      	ldr	r2, [r7, #12]
 8111576:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8111578:	7c7a      	ldrb	r2, [r7, #17]
 811157a:	4968      	ldr	r1, [pc, #416]	@ (811171c <etharp_query+0x268>)
 811157c:	4613      	mov	r3, r2
 811157e:	005b      	lsls	r3, r3, #1
 8111580:	4413      	add	r3, r2
 8111582:	00db      	lsls	r3, r3, #3
 8111584:	440b      	add	r3, r1
 8111586:	3314      	adds	r3, #20
 8111588:	781b      	ldrb	r3, [r3, #0]
 811158a:	2b01      	cmp	r3, #1
 811158c:	d011      	beq.n	81115b2 <etharp_query+0xfe>
 811158e:	7c7a      	ldrb	r2, [r7, #17]
 8111590:	4962      	ldr	r1, [pc, #392]	@ (811171c <etharp_query+0x268>)
 8111592:	4613      	mov	r3, r2
 8111594:	005b      	lsls	r3, r3, #1
 8111596:	4413      	add	r3, r2
 8111598:	00db      	lsls	r3, r3, #3
 811159a:	440b      	add	r3, r1
 811159c:	3314      	adds	r3, #20
 811159e:	781b      	ldrb	r3, [r3, #0]
 81115a0:	2b01      	cmp	r3, #1
 81115a2:	d806      	bhi.n	81115b2 <etharp_query+0xfe>
 81115a4:	4b5a      	ldr	r3, [pc, #360]	@ (8111710 <etharp_query+0x25c>)
 81115a6:	f240 32cd 	movw	r2, #973	@ 0x3cd
 81115aa:	495d      	ldr	r1, [pc, #372]	@ (8111720 <etharp_query+0x26c>)
 81115ac:	485a      	ldr	r0, [pc, #360]	@ (8111718 <etharp_query+0x264>)
 81115ae:	f00a fc4d 	bl	811be4c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 81115b2:	6a3b      	ldr	r3, [r7, #32]
 81115b4:	2b00      	cmp	r3, #0
 81115b6:	d102      	bne.n	81115be <etharp_query+0x10a>
 81115b8:	687b      	ldr	r3, [r7, #4]
 81115ba:	2b00      	cmp	r3, #0
 81115bc:	d10c      	bne.n	81115d8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 81115be:	68b9      	ldr	r1, [r7, #8]
 81115c0:	68f8      	ldr	r0, [r7, #12]
 81115c2:	f000 f963 	bl	811188c <etharp_request>
 81115c6:	4603      	mov	r3, r0
 81115c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 81115cc:	687b      	ldr	r3, [r7, #4]
 81115ce:	2b00      	cmp	r3, #0
 81115d0:	d102      	bne.n	81115d8 <etharp_query+0x124>
      return result;
 81115d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 81115d6:	e096      	b.n	8111706 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 81115d8:	687b      	ldr	r3, [r7, #4]
 81115da:	2b00      	cmp	r3, #0
 81115dc:	d106      	bne.n	81115ec <etharp_query+0x138>
 81115de:	4b4c      	ldr	r3, [pc, #304]	@ (8111710 <etharp_query+0x25c>)
 81115e0:	f240 32e1 	movw	r2, #993	@ 0x3e1
 81115e4:	494f      	ldr	r1, [pc, #316]	@ (8111724 <etharp_query+0x270>)
 81115e6:	484c      	ldr	r0, [pc, #304]	@ (8111718 <etharp_query+0x264>)
 81115e8:	f00a fc30 	bl	811be4c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 81115ec:	7c7a      	ldrb	r2, [r7, #17]
 81115ee:	494b      	ldr	r1, [pc, #300]	@ (811171c <etharp_query+0x268>)
 81115f0:	4613      	mov	r3, r2
 81115f2:	005b      	lsls	r3, r3, #1
 81115f4:	4413      	add	r3, r2
 81115f6:	00db      	lsls	r3, r3, #3
 81115f8:	440b      	add	r3, r1
 81115fa:	3314      	adds	r3, #20
 81115fc:	781b      	ldrb	r3, [r3, #0]
 81115fe:	2b01      	cmp	r3, #1
 8111600:	d917      	bls.n	8111632 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8111602:	4a49      	ldr	r2, [pc, #292]	@ (8111728 <etharp_query+0x274>)
 8111604:	7c7b      	ldrb	r3, [r7, #17]
 8111606:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8111608:	7c7a      	ldrb	r2, [r7, #17]
 811160a:	4613      	mov	r3, r2
 811160c:	005b      	lsls	r3, r3, #1
 811160e:	4413      	add	r3, r2
 8111610:	00db      	lsls	r3, r3, #3
 8111612:	3308      	adds	r3, #8
 8111614:	4a41      	ldr	r2, [pc, #260]	@ (811171c <etharp_query+0x268>)
 8111616:	4413      	add	r3, r2
 8111618:	3304      	adds	r3, #4
 811161a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 811161e:	9200      	str	r2, [sp, #0]
 8111620:	697a      	ldr	r2, [r7, #20]
 8111622:	6879      	ldr	r1, [r7, #4]
 8111624:	68f8      	ldr	r0, [r7, #12]
 8111626:	f000 f9d1 	bl	81119cc <ethernet_output>
 811162a:	4603      	mov	r3, r0
 811162c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8111630:	e067      	b.n	8111702 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8111632:	7c7a      	ldrb	r2, [r7, #17]
 8111634:	4939      	ldr	r1, [pc, #228]	@ (811171c <etharp_query+0x268>)
 8111636:	4613      	mov	r3, r2
 8111638:	005b      	lsls	r3, r3, #1
 811163a:	4413      	add	r3, r2
 811163c:	00db      	lsls	r3, r3, #3
 811163e:	440b      	add	r3, r1
 8111640:	3314      	adds	r3, #20
 8111642:	781b      	ldrb	r3, [r3, #0]
 8111644:	2b01      	cmp	r3, #1
 8111646:	d15c      	bne.n	8111702 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8111648:	2300      	movs	r3, #0
 811164a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 811164c:	687b      	ldr	r3, [r7, #4]
 811164e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8111650:	e01c      	b.n	811168c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8111652:	69fb      	ldr	r3, [r7, #28]
 8111654:	895a      	ldrh	r2, [r3, #10]
 8111656:	69fb      	ldr	r3, [r7, #28]
 8111658:	891b      	ldrh	r3, [r3, #8]
 811165a:	429a      	cmp	r2, r3
 811165c:	d10a      	bne.n	8111674 <etharp_query+0x1c0>
 811165e:	69fb      	ldr	r3, [r7, #28]
 8111660:	681b      	ldr	r3, [r3, #0]
 8111662:	2b00      	cmp	r3, #0
 8111664:	d006      	beq.n	8111674 <etharp_query+0x1c0>
 8111666:	4b2a      	ldr	r3, [pc, #168]	@ (8111710 <etharp_query+0x25c>)
 8111668:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 811166c:	492f      	ldr	r1, [pc, #188]	@ (811172c <etharp_query+0x278>)
 811166e:	482a      	ldr	r0, [pc, #168]	@ (8111718 <etharp_query+0x264>)
 8111670:	f00a fbec 	bl	811be4c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8111674:	69fb      	ldr	r3, [r7, #28]
 8111676:	7b1b      	ldrb	r3, [r3, #12]
 8111678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 811167c:	2b00      	cmp	r3, #0
 811167e:	d002      	beq.n	8111686 <etharp_query+0x1d2>
        copy_needed = 1;
 8111680:	2301      	movs	r3, #1
 8111682:	61bb      	str	r3, [r7, #24]
        break;
 8111684:	e005      	b.n	8111692 <etharp_query+0x1de>
      }
      p = p->next;
 8111686:	69fb      	ldr	r3, [r7, #28]
 8111688:	681b      	ldr	r3, [r3, #0]
 811168a:	61fb      	str	r3, [r7, #28]
    while (p) {
 811168c:	69fb      	ldr	r3, [r7, #28]
 811168e:	2b00      	cmp	r3, #0
 8111690:	d1df      	bne.n	8111652 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8111692:	69bb      	ldr	r3, [r7, #24]
 8111694:	2b00      	cmp	r3, #0
 8111696:	d007      	beq.n	81116a8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8111698:	687a      	ldr	r2, [r7, #4]
 811169a:	f44f 7120 	mov.w	r1, #640	@ 0x280
 811169e:	200e      	movs	r0, #14
 81116a0:	f003 fb7a 	bl	8114d98 <pbuf_clone>
 81116a4:	61f8      	str	r0, [r7, #28]
 81116a6:	e004      	b.n	81116b2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 81116a8:	687b      	ldr	r3, [r7, #4]
 81116aa:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 81116ac:	69f8      	ldr	r0, [r7, #28]
 81116ae:	f003 f9b1 	bl	8114a14 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 81116b2:	69fb      	ldr	r3, [r7, #28]
 81116b4:	2b00      	cmp	r3, #0
 81116b6:	d021      	beq.n	81116fc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 81116b8:	7c7a      	ldrb	r2, [r7, #17]
 81116ba:	4918      	ldr	r1, [pc, #96]	@ (811171c <etharp_query+0x268>)
 81116bc:	4613      	mov	r3, r2
 81116be:	005b      	lsls	r3, r3, #1
 81116c0:	4413      	add	r3, r2
 81116c2:	00db      	lsls	r3, r3, #3
 81116c4:	440b      	add	r3, r1
 81116c6:	681b      	ldr	r3, [r3, #0]
 81116c8:	2b00      	cmp	r3, #0
 81116ca:	d00a      	beq.n	81116e2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 81116cc:	7c7a      	ldrb	r2, [r7, #17]
 81116ce:	4913      	ldr	r1, [pc, #76]	@ (811171c <etharp_query+0x268>)
 81116d0:	4613      	mov	r3, r2
 81116d2:	005b      	lsls	r3, r3, #1
 81116d4:	4413      	add	r3, r2
 81116d6:	00db      	lsls	r3, r3, #3
 81116d8:	440b      	add	r3, r1
 81116da:	681b      	ldr	r3, [r3, #0]
 81116dc:	4618      	mov	r0, r3
 81116de:	f003 f8f3 	bl	81148c8 <pbuf_free>
      }
      arp_table[i].q = p;
 81116e2:	7c7a      	ldrb	r2, [r7, #17]
 81116e4:	490d      	ldr	r1, [pc, #52]	@ (811171c <etharp_query+0x268>)
 81116e6:	4613      	mov	r3, r2
 81116e8:	005b      	lsls	r3, r3, #1
 81116ea:	4413      	add	r3, r2
 81116ec:	00db      	lsls	r3, r3, #3
 81116ee:	440b      	add	r3, r1
 81116f0:	69fa      	ldr	r2, [r7, #28]
 81116f2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 81116f4:	2300      	movs	r3, #0
 81116f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 81116fa:	e002      	b.n	8111702 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 81116fc:	23ff      	movs	r3, #255	@ 0xff
 81116fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8111702:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8111706:	4618      	mov	r0, r3
 8111708:	3728      	adds	r7, #40	@ 0x28
 811170a:	46bd      	mov	sp, r7
 811170c:	bd80      	pop	{r7, pc}
 811170e:	bf00      	nop
 8111710:	0811cd58 	.word	0x0811cd58
 8111714:	0811cf44 	.word	0x0811cf44
 8111718:	0811ce10 	.word	0x0811ce10
 811171c:	1000b150 	.word	0x1000b150
 8111720:	0811cf54 	.word	0x0811cf54
 8111724:	0811cf38 	.word	0x0811cf38
 8111728:	1000b240 	.word	0x1000b240
 811172c:	0811cf7c 	.word	0x0811cf7c

08111730 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8111730:	b580      	push	{r7, lr}
 8111732:	b08a      	sub	sp, #40	@ 0x28
 8111734:	af02      	add	r7, sp, #8
 8111736:	60f8      	str	r0, [r7, #12]
 8111738:	60b9      	str	r1, [r7, #8]
 811173a:	607a      	str	r2, [r7, #4]
 811173c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 811173e:	2300      	movs	r3, #0
 8111740:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8111742:	68fb      	ldr	r3, [r7, #12]
 8111744:	2b00      	cmp	r3, #0
 8111746:	d106      	bne.n	8111756 <etharp_raw+0x26>
 8111748:	4b3a      	ldr	r3, [pc, #232]	@ (8111834 <etharp_raw+0x104>)
 811174a:	f240 4257 	movw	r2, #1111	@ 0x457
 811174e:	493a      	ldr	r1, [pc, #232]	@ (8111838 <etharp_raw+0x108>)
 8111750:	483a      	ldr	r0, [pc, #232]	@ (811183c <etharp_raw+0x10c>)
 8111752:	f00a fb7b 	bl	811be4c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8111756:	f44f 7220 	mov.w	r2, #640	@ 0x280
 811175a:	211c      	movs	r1, #28
 811175c:	200e      	movs	r0, #14
 811175e:	f002 fdcf 	bl	8114300 <pbuf_alloc>
 8111762:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8111764:	69bb      	ldr	r3, [r7, #24]
 8111766:	2b00      	cmp	r3, #0
 8111768:	d102      	bne.n	8111770 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 811176a:	f04f 33ff 	mov.w	r3, #4294967295
 811176e:	e05d      	b.n	811182c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8111770:	69bb      	ldr	r3, [r7, #24]
 8111772:	895b      	ldrh	r3, [r3, #10]
 8111774:	2b1b      	cmp	r3, #27
 8111776:	d806      	bhi.n	8111786 <etharp_raw+0x56>
 8111778:	4b2e      	ldr	r3, [pc, #184]	@ (8111834 <etharp_raw+0x104>)
 811177a:	f240 4262 	movw	r2, #1122	@ 0x462
 811177e:	4930      	ldr	r1, [pc, #192]	@ (8111840 <etharp_raw+0x110>)
 8111780:	482e      	ldr	r0, [pc, #184]	@ (811183c <etharp_raw+0x10c>)
 8111782:	f00a fb63 	bl	811be4c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8111786:	69bb      	ldr	r3, [r7, #24]
 8111788:	685b      	ldr	r3, [r3, #4]
 811178a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 811178c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 811178e:	4618      	mov	r0, r3
 8111790:	f7ff f914 	bl	81109bc <lwip_htons>
 8111794:	4603      	mov	r3, r0
 8111796:	461a      	mov	r2, r3
 8111798:	697b      	ldr	r3, [r7, #20]
 811179a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 811179c:	68fb      	ldr	r3, [r7, #12]
 811179e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 81117a2:	2b06      	cmp	r3, #6
 81117a4:	d006      	beq.n	81117b4 <etharp_raw+0x84>
 81117a6:	4b23      	ldr	r3, [pc, #140]	@ (8111834 <etharp_raw+0x104>)
 81117a8:	f240 4269 	movw	r2, #1129	@ 0x469
 81117ac:	4925      	ldr	r1, [pc, #148]	@ (8111844 <etharp_raw+0x114>)
 81117ae:	4823      	ldr	r0, [pc, #140]	@ (811183c <etharp_raw+0x10c>)
 81117b0:	f00a fb4c 	bl	811be4c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 81117b4:	697b      	ldr	r3, [r7, #20]
 81117b6:	3308      	adds	r3, #8
 81117b8:	2206      	movs	r2, #6
 81117ba:	6839      	ldr	r1, [r7, #0]
 81117bc:	4618      	mov	r0, r3
 81117be:	f00a fcf6 	bl	811c1ae <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 81117c2:	697b      	ldr	r3, [r7, #20]
 81117c4:	3312      	adds	r3, #18
 81117c6:	2206      	movs	r2, #6
 81117c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 81117ca:	4618      	mov	r0, r3
 81117cc:	f00a fcef 	bl	811c1ae <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 81117d0:	697b      	ldr	r3, [r7, #20]
 81117d2:	330e      	adds	r3, #14
 81117d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 81117d6:	6812      	ldr	r2, [r2, #0]
 81117d8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 81117da:	697b      	ldr	r3, [r7, #20]
 81117dc:	3318      	adds	r3, #24
 81117de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81117e0:	6812      	ldr	r2, [r2, #0]
 81117e2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 81117e4:	697b      	ldr	r3, [r7, #20]
 81117e6:	2200      	movs	r2, #0
 81117e8:	701a      	strb	r2, [r3, #0]
 81117ea:	2200      	movs	r2, #0
 81117ec:	f042 0201 	orr.w	r2, r2, #1
 81117f0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 81117f2:	697b      	ldr	r3, [r7, #20]
 81117f4:	2200      	movs	r2, #0
 81117f6:	f042 0208 	orr.w	r2, r2, #8
 81117fa:	709a      	strb	r2, [r3, #2]
 81117fc:	2200      	movs	r2, #0
 81117fe:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8111800:	697b      	ldr	r3, [r7, #20]
 8111802:	2206      	movs	r2, #6
 8111804:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8111806:	697b      	ldr	r3, [r7, #20]
 8111808:	2204      	movs	r2, #4
 811180a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 811180c:	f640 0306 	movw	r3, #2054	@ 0x806
 8111810:	9300      	str	r3, [sp, #0]
 8111812:	687b      	ldr	r3, [r7, #4]
 8111814:	68ba      	ldr	r2, [r7, #8]
 8111816:	69b9      	ldr	r1, [r7, #24]
 8111818:	68f8      	ldr	r0, [r7, #12]
 811181a:	f000 f8d7 	bl	81119cc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 811181e:	69b8      	ldr	r0, [r7, #24]
 8111820:	f003 f852 	bl	81148c8 <pbuf_free>
  p = NULL;
 8111824:	2300      	movs	r3, #0
 8111826:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8111828:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 811182c:	4618      	mov	r0, r3
 811182e:	3720      	adds	r7, #32
 8111830:	46bd      	mov	sp, r7
 8111832:	bd80      	pop	{r7, pc}
 8111834:	0811cd58 	.word	0x0811cd58
 8111838:	0811cee8 	.word	0x0811cee8
 811183c:	0811ce10 	.word	0x0811ce10
 8111840:	0811cf98 	.word	0x0811cf98
 8111844:	0811cfcc 	.word	0x0811cfcc

08111848 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8111848:	b580      	push	{r7, lr}
 811184a:	b088      	sub	sp, #32
 811184c:	af04      	add	r7, sp, #16
 811184e:	60f8      	str	r0, [r7, #12]
 8111850:	60b9      	str	r1, [r7, #8]
 8111852:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8111854:	68fb      	ldr	r3, [r7, #12]
 8111856:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 811185a:	68fb      	ldr	r3, [r7, #12]
 811185c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8111860:	68fb      	ldr	r3, [r7, #12]
 8111862:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8111864:	2201      	movs	r2, #1
 8111866:	9203      	str	r2, [sp, #12]
 8111868:	68ba      	ldr	r2, [r7, #8]
 811186a:	9202      	str	r2, [sp, #8]
 811186c:	4a06      	ldr	r2, [pc, #24]	@ (8111888 <etharp_request_dst+0x40>)
 811186e:	9201      	str	r2, [sp, #4]
 8111870:	9300      	str	r3, [sp, #0]
 8111872:	4603      	mov	r3, r0
 8111874:	687a      	ldr	r2, [r7, #4]
 8111876:	68f8      	ldr	r0, [r7, #12]
 8111878:	f7ff ff5a 	bl	8111730 <etharp_raw>
 811187c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 811187e:	4618      	mov	r0, r3
 8111880:	3710      	adds	r7, #16
 8111882:	46bd      	mov	sp, r7
 8111884:	bd80      	pop	{r7, pc}
 8111886:	bf00      	nop
 8111888:	0811fc48 	.word	0x0811fc48

0811188c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 811188c:	b580      	push	{r7, lr}
 811188e:	b082      	sub	sp, #8
 8111890:	af00      	add	r7, sp, #0
 8111892:	6078      	str	r0, [r7, #4]
 8111894:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8111896:	4a05      	ldr	r2, [pc, #20]	@ (81118ac <etharp_request+0x20>)
 8111898:	6839      	ldr	r1, [r7, #0]
 811189a:	6878      	ldr	r0, [r7, #4]
 811189c:	f7ff ffd4 	bl	8111848 <etharp_request_dst>
 81118a0:	4603      	mov	r3, r0
}
 81118a2:	4618      	mov	r0, r3
 81118a4:	3708      	adds	r7, #8
 81118a6:	46bd      	mov	sp, r7
 81118a8:	bd80      	pop	{r7, pc}
 81118aa:	bf00      	nop
 81118ac:	0811fc40 	.word	0x0811fc40

081118b0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 81118b0:	b580      	push	{r7, lr}
 81118b2:	b086      	sub	sp, #24
 81118b4:	af00      	add	r7, sp, #0
 81118b6:	6078      	str	r0, [r7, #4]
 81118b8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 81118ba:	230e      	movs	r3, #14
 81118bc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 81118be:	687b      	ldr	r3, [r7, #4]
 81118c0:	895b      	ldrh	r3, [r3, #10]
 81118c2:	2b0e      	cmp	r3, #14
 81118c4:	d96e      	bls.n	81119a4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 81118c6:	687b      	ldr	r3, [r7, #4]
 81118c8:	7bdb      	ldrb	r3, [r3, #15]
 81118ca:	2b00      	cmp	r3, #0
 81118cc:	d106      	bne.n	81118dc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 81118ce:	683b      	ldr	r3, [r7, #0]
 81118d0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 81118d4:	3301      	adds	r3, #1
 81118d6:	b2da      	uxtb	r2, r3
 81118d8:	687b      	ldr	r3, [r7, #4]
 81118da:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 81118dc:	687b      	ldr	r3, [r7, #4]
 81118de:	685b      	ldr	r3, [r3, #4]
 81118e0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 81118e2:	693b      	ldr	r3, [r7, #16]
 81118e4:	7b1a      	ldrb	r2, [r3, #12]
 81118e6:	7b5b      	ldrb	r3, [r3, #13]
 81118e8:	021b      	lsls	r3, r3, #8
 81118ea:	4313      	orrs	r3, r2
 81118ec:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 81118ee:	693b      	ldr	r3, [r7, #16]
 81118f0:	781b      	ldrb	r3, [r3, #0]
 81118f2:	f003 0301 	and.w	r3, r3, #1
 81118f6:	2b00      	cmp	r3, #0
 81118f8:	d023      	beq.n	8111942 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 81118fa:	693b      	ldr	r3, [r7, #16]
 81118fc:	781b      	ldrb	r3, [r3, #0]
 81118fe:	2b01      	cmp	r3, #1
 8111900:	d10f      	bne.n	8111922 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8111902:	693b      	ldr	r3, [r7, #16]
 8111904:	785b      	ldrb	r3, [r3, #1]
 8111906:	2b00      	cmp	r3, #0
 8111908:	d11b      	bne.n	8111942 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 811190a:	693b      	ldr	r3, [r7, #16]
 811190c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 811190e:	2b5e      	cmp	r3, #94	@ 0x5e
 8111910:	d117      	bne.n	8111942 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8111912:	687b      	ldr	r3, [r7, #4]
 8111914:	7b5b      	ldrb	r3, [r3, #13]
 8111916:	f043 0310 	orr.w	r3, r3, #16
 811191a:	b2da      	uxtb	r2, r3
 811191c:	687b      	ldr	r3, [r7, #4]
 811191e:	735a      	strb	r2, [r3, #13]
 8111920:	e00f      	b.n	8111942 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8111922:	693b      	ldr	r3, [r7, #16]
 8111924:	2206      	movs	r2, #6
 8111926:	4928      	ldr	r1, [pc, #160]	@ (81119c8 <ethernet_input+0x118>)
 8111928:	4618      	mov	r0, r3
 811192a:	f00a fae4 	bl	811bef6 <memcmp>
 811192e:	4603      	mov	r3, r0
 8111930:	2b00      	cmp	r3, #0
 8111932:	d106      	bne.n	8111942 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8111934:	687b      	ldr	r3, [r7, #4]
 8111936:	7b5b      	ldrb	r3, [r3, #13]
 8111938:	f043 0308 	orr.w	r3, r3, #8
 811193c:	b2da      	uxtb	r2, r3
 811193e:	687b      	ldr	r3, [r7, #4]
 8111940:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8111942:	89fb      	ldrh	r3, [r7, #14]
 8111944:	2b08      	cmp	r3, #8
 8111946:	d003      	beq.n	8111950 <ethernet_input+0xa0>
 8111948:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 811194c:	d014      	beq.n	8111978 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 811194e:	e032      	b.n	81119b6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8111950:	683b      	ldr	r3, [r7, #0]
 8111952:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8111956:	f003 0308 	and.w	r3, r3, #8
 811195a:	2b00      	cmp	r3, #0
 811195c:	d024      	beq.n	81119a8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 811195e:	8afb      	ldrh	r3, [r7, #22]
 8111960:	4619      	mov	r1, r3
 8111962:	6878      	ldr	r0, [r7, #4]
 8111964:	f002 ff2a 	bl	81147bc <pbuf_remove_header>
 8111968:	4603      	mov	r3, r0
 811196a:	2b00      	cmp	r3, #0
 811196c:	d11e      	bne.n	81119ac <ethernet_input+0xfc>
        ip4_input(p, netif);
 811196e:	6839      	ldr	r1, [r7, #0]
 8111970:	6878      	ldr	r0, [r7, #4]
 8111972:	f000 fb95 	bl	81120a0 <ip4_input>
      break;
 8111976:	e013      	b.n	81119a0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8111978:	683b      	ldr	r3, [r7, #0]
 811197a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811197e:	f003 0308 	and.w	r3, r3, #8
 8111982:	2b00      	cmp	r3, #0
 8111984:	d014      	beq.n	81119b0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8111986:	8afb      	ldrh	r3, [r7, #22]
 8111988:	4619      	mov	r1, r3
 811198a:	6878      	ldr	r0, [r7, #4]
 811198c:	f002 ff16 	bl	81147bc <pbuf_remove_header>
 8111990:	4603      	mov	r3, r0
 8111992:	2b00      	cmp	r3, #0
 8111994:	d10e      	bne.n	81119b4 <ethernet_input+0x104>
        etharp_input(p, netif);
 8111996:	6839      	ldr	r1, [r7, #0]
 8111998:	6878      	ldr	r0, [r7, #4]
 811199a:	f7ff fb65 	bl	8111068 <etharp_input>
      break;
 811199e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 81119a0:	2300      	movs	r3, #0
 81119a2:	e00c      	b.n	81119be <ethernet_input+0x10e>
    goto free_and_return;
 81119a4:	bf00      	nop
 81119a6:	e006      	b.n	81119b6 <ethernet_input+0x106>
        goto free_and_return;
 81119a8:	bf00      	nop
 81119aa:	e004      	b.n	81119b6 <ethernet_input+0x106>
        goto free_and_return;
 81119ac:	bf00      	nop
 81119ae:	e002      	b.n	81119b6 <ethernet_input+0x106>
        goto free_and_return;
 81119b0:	bf00      	nop
 81119b2:	e000      	b.n	81119b6 <ethernet_input+0x106>
        goto free_and_return;
 81119b4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 81119b6:	6878      	ldr	r0, [r7, #4]
 81119b8:	f002 ff86 	bl	81148c8 <pbuf_free>
  return ERR_OK;
 81119bc:	2300      	movs	r3, #0
}
 81119be:	4618      	mov	r0, r3
 81119c0:	3718      	adds	r7, #24
 81119c2:	46bd      	mov	sp, r7
 81119c4:	bd80      	pop	{r7, pc}
 81119c6:	bf00      	nop
 81119c8:	0811fc40 	.word	0x0811fc40

081119cc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 81119cc:	b580      	push	{r7, lr}
 81119ce:	b086      	sub	sp, #24
 81119d0:	af00      	add	r7, sp, #0
 81119d2:	60f8      	str	r0, [r7, #12]
 81119d4:	60b9      	str	r1, [r7, #8]
 81119d6:	607a      	str	r2, [r7, #4]
 81119d8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 81119da:	8c3b      	ldrh	r3, [r7, #32]
 81119dc:	4618      	mov	r0, r3
 81119de:	f7fe ffed 	bl	81109bc <lwip_htons>
 81119e2:	4603      	mov	r3, r0
 81119e4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 81119e6:	210e      	movs	r1, #14
 81119e8:	68b8      	ldr	r0, [r7, #8]
 81119ea:	f002 fed7 	bl	811479c <pbuf_add_header>
 81119ee:	4603      	mov	r3, r0
 81119f0:	2b00      	cmp	r3, #0
 81119f2:	d125      	bne.n	8111a40 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 81119f4:	68bb      	ldr	r3, [r7, #8]
 81119f6:	685b      	ldr	r3, [r3, #4]
 81119f8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 81119fa:	693b      	ldr	r3, [r7, #16]
 81119fc:	8afa      	ldrh	r2, [r7, #22]
 81119fe:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8111a00:	693b      	ldr	r3, [r7, #16]
 8111a02:	2206      	movs	r2, #6
 8111a04:	6839      	ldr	r1, [r7, #0]
 8111a06:	4618      	mov	r0, r3
 8111a08:	f00a fbd1 	bl	811c1ae <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8111a0c:	693b      	ldr	r3, [r7, #16]
 8111a0e:	3306      	adds	r3, #6
 8111a10:	2206      	movs	r2, #6
 8111a12:	6879      	ldr	r1, [r7, #4]
 8111a14:	4618      	mov	r0, r3
 8111a16:	f00a fbca 	bl	811c1ae <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8111a1a:	68fb      	ldr	r3, [r7, #12]
 8111a1c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8111a20:	2b06      	cmp	r3, #6
 8111a22:	d006      	beq.n	8111a32 <ethernet_output+0x66>
 8111a24:	4b0a      	ldr	r3, [pc, #40]	@ (8111a50 <ethernet_output+0x84>)
 8111a26:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8111a2a:	490a      	ldr	r1, [pc, #40]	@ (8111a54 <ethernet_output+0x88>)
 8111a2c:	480a      	ldr	r0, [pc, #40]	@ (8111a58 <ethernet_output+0x8c>)
 8111a2e:	f00a fa0d 	bl	811be4c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8111a32:	68fb      	ldr	r3, [r7, #12]
 8111a34:	699b      	ldr	r3, [r3, #24]
 8111a36:	68b9      	ldr	r1, [r7, #8]
 8111a38:	68f8      	ldr	r0, [r7, #12]
 8111a3a:	4798      	blx	r3
 8111a3c:	4603      	mov	r3, r0
 8111a3e:	e002      	b.n	8111a46 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8111a40:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8111a42:	f06f 0301 	mvn.w	r3, #1
}
 8111a46:	4618      	mov	r0, r3
 8111a48:	3718      	adds	r7, #24
 8111a4a:	46bd      	mov	sp, r7
 8111a4c:	bd80      	pop	{r7, pc}
 8111a4e:	bf00      	nop
 8111a50:	0811d010 	.word	0x0811d010
 8111a54:	0811d084 	.word	0x0811d084
 8111a58:	0811d0b8 	.word	0x0811d0b8

08111a5c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8111a5c:	b580      	push	{r7, lr}
 8111a5e:	b08e      	sub	sp, #56	@ 0x38
 8111a60:	af04      	add	r7, sp, #16
 8111a62:	6078      	str	r0, [r7, #4]
 8111a64:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8111a66:	4b87      	ldr	r3, [pc, #540]	@ (8111c84 <icmp_input+0x228>)
 8111a68:	689b      	ldr	r3, [r3, #8]
 8111a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8111a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8111a6e:	781b      	ldrb	r3, [r3, #0]
 8111a70:	f003 030f 	and.w	r3, r3, #15
 8111a74:	b2db      	uxtb	r3, r3
 8111a76:	009b      	lsls	r3, r3, #2
 8111a78:	b2db      	uxtb	r3, r3
 8111a7a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8111a7c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8111a7e:	2b13      	cmp	r3, #19
 8111a80:	f240 80e8 	bls.w	8111c54 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8111a84:	687b      	ldr	r3, [r7, #4]
 8111a86:	895b      	ldrh	r3, [r3, #10]
 8111a88:	2b03      	cmp	r3, #3
 8111a8a:	f240 80e5 	bls.w	8111c58 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8111a8e:	687b      	ldr	r3, [r7, #4]
 8111a90:	685b      	ldr	r3, [r3, #4]
 8111a92:	781b      	ldrb	r3, [r3, #0]
 8111a94:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8111a98:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8111a9c:	2b00      	cmp	r3, #0
 8111a9e:	f000 80d2 	beq.w	8111c46 <icmp_input+0x1ea>
 8111aa2:	2b08      	cmp	r3, #8
 8111aa4:	f040 80d2 	bne.w	8111c4c <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8111aa8:	4b77      	ldr	r3, [pc, #476]	@ (8111c88 <icmp_input+0x22c>)
 8111aaa:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8111aac:	4b75      	ldr	r3, [pc, #468]	@ (8111c84 <icmp_input+0x228>)
 8111aae:	695b      	ldr	r3, [r3, #20]
 8111ab0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8111ab4:	2be0      	cmp	r3, #224	@ 0xe0
 8111ab6:	f000 80d6 	beq.w	8111c66 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8111aba:	4b72      	ldr	r3, [pc, #456]	@ (8111c84 <icmp_input+0x228>)
 8111abc:	695b      	ldr	r3, [r3, #20]
 8111abe:	4a71      	ldr	r2, [pc, #452]	@ (8111c84 <icmp_input+0x228>)
 8111ac0:	6812      	ldr	r2, [r2, #0]
 8111ac2:	4611      	mov	r1, r2
 8111ac4:	4618      	mov	r0, r3
 8111ac6:	f000 fce7 	bl	8112498 <ip4_addr_isbroadcast_u32>
 8111aca:	4603      	mov	r3, r0
 8111acc:	2b00      	cmp	r3, #0
 8111ace:	f040 80cc 	bne.w	8111c6a <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8111ad2:	687b      	ldr	r3, [r7, #4]
 8111ad4:	891b      	ldrh	r3, [r3, #8]
 8111ad6:	2b07      	cmp	r3, #7
 8111ad8:	f240 80c0 	bls.w	8111c5c <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8111adc:	6878      	ldr	r0, [r7, #4]
 8111ade:	f000 f9e0 	bl	8111ea2 <inet_chksum_pbuf>
 8111ae2:	4603      	mov	r3, r0
 8111ae4:	2b00      	cmp	r3, #0
 8111ae6:	d003      	beq.n	8111af0 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8111ae8:	6878      	ldr	r0, [r7, #4]
 8111aea:	f002 feed 	bl	81148c8 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8111aee:	e0c5      	b.n	8111c7c <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8111af0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8111af2:	330e      	adds	r3, #14
 8111af4:	4619      	mov	r1, r3
 8111af6:	6878      	ldr	r0, [r7, #4]
 8111af8:	f002 fe50 	bl	811479c <pbuf_add_header>
 8111afc:	4603      	mov	r3, r0
 8111afe:	2b00      	cmp	r3, #0
 8111b00:	d04b      	beq.n	8111b9a <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8111b02:	687b      	ldr	r3, [r7, #4]
 8111b04:	891a      	ldrh	r2, [r3, #8]
 8111b06:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8111b08:	4413      	add	r3, r2
 8111b0a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8111b0c:	687b      	ldr	r3, [r7, #4]
 8111b0e:	891b      	ldrh	r3, [r3, #8]
 8111b10:	8b7a      	ldrh	r2, [r7, #26]
 8111b12:	429a      	cmp	r2, r3
 8111b14:	f0c0 80ab 	bcc.w	8111c6e <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8111b18:	8b7b      	ldrh	r3, [r7, #26]
 8111b1a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8111b1e:	4619      	mov	r1, r3
 8111b20:	200e      	movs	r0, #14
 8111b22:	f002 fbed 	bl	8114300 <pbuf_alloc>
 8111b26:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8111b28:	697b      	ldr	r3, [r7, #20]
 8111b2a:	2b00      	cmp	r3, #0
 8111b2c:	f000 80a1 	beq.w	8111c72 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8111b30:	697b      	ldr	r3, [r7, #20]
 8111b32:	895b      	ldrh	r3, [r3, #10]
 8111b34:	461a      	mov	r2, r3
 8111b36:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8111b38:	3308      	adds	r3, #8
 8111b3a:	429a      	cmp	r2, r3
 8111b3c:	d203      	bcs.n	8111b46 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8111b3e:	6978      	ldr	r0, [r7, #20]
 8111b40:	f002 fec2 	bl	81148c8 <pbuf_free>
          goto icmperr;
 8111b44:	e096      	b.n	8111c74 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8111b46:	697b      	ldr	r3, [r7, #20]
 8111b48:	685b      	ldr	r3, [r3, #4]
 8111b4a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8111b4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8111b4e:	4618      	mov	r0, r3
 8111b50:	f00a fb2d 	bl	811c1ae <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8111b54:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8111b56:	4619      	mov	r1, r3
 8111b58:	6978      	ldr	r0, [r7, #20]
 8111b5a:	f002 fe2f 	bl	81147bc <pbuf_remove_header>
 8111b5e:	4603      	mov	r3, r0
 8111b60:	2b00      	cmp	r3, #0
 8111b62:	d009      	beq.n	8111b78 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8111b64:	4b49      	ldr	r3, [pc, #292]	@ (8111c8c <icmp_input+0x230>)
 8111b66:	22b6      	movs	r2, #182	@ 0xb6
 8111b68:	4949      	ldr	r1, [pc, #292]	@ (8111c90 <icmp_input+0x234>)
 8111b6a:	484a      	ldr	r0, [pc, #296]	@ (8111c94 <icmp_input+0x238>)
 8111b6c:	f00a f96e 	bl	811be4c <iprintf>
          pbuf_free(r);
 8111b70:	6978      	ldr	r0, [r7, #20]
 8111b72:	f002 fea9 	bl	81148c8 <pbuf_free>
          goto icmperr;
 8111b76:	e07d      	b.n	8111c74 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8111b78:	6879      	ldr	r1, [r7, #4]
 8111b7a:	6978      	ldr	r0, [r7, #20]
 8111b7c:	f002 ffc8 	bl	8114b10 <pbuf_copy>
 8111b80:	4603      	mov	r3, r0
 8111b82:	2b00      	cmp	r3, #0
 8111b84:	d003      	beq.n	8111b8e <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8111b86:	6978      	ldr	r0, [r7, #20]
 8111b88:	f002 fe9e 	bl	81148c8 <pbuf_free>
          goto icmperr;
 8111b8c:	e072      	b.n	8111c74 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8111b8e:	6878      	ldr	r0, [r7, #4]
 8111b90:	f002 fe9a 	bl	81148c8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8111b94:	697b      	ldr	r3, [r7, #20]
 8111b96:	607b      	str	r3, [r7, #4]
 8111b98:	e00f      	b.n	8111bba <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8111b9a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8111b9c:	330e      	adds	r3, #14
 8111b9e:	4619      	mov	r1, r3
 8111ba0:	6878      	ldr	r0, [r7, #4]
 8111ba2:	f002 fe0b 	bl	81147bc <pbuf_remove_header>
 8111ba6:	4603      	mov	r3, r0
 8111ba8:	2b00      	cmp	r3, #0
 8111baa:	d006      	beq.n	8111bba <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8111bac:	4b37      	ldr	r3, [pc, #220]	@ (8111c8c <icmp_input+0x230>)
 8111bae:	22c7      	movs	r2, #199	@ 0xc7
 8111bb0:	4939      	ldr	r1, [pc, #228]	@ (8111c98 <icmp_input+0x23c>)
 8111bb2:	4838      	ldr	r0, [pc, #224]	@ (8111c94 <icmp_input+0x238>)
 8111bb4:	f00a f94a 	bl	811be4c <iprintf>
          goto icmperr;
 8111bb8:	e05c      	b.n	8111c74 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8111bba:	687b      	ldr	r3, [r7, #4]
 8111bbc:	685b      	ldr	r3, [r3, #4]
 8111bbe:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8111bc0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8111bc2:	4619      	mov	r1, r3
 8111bc4:	6878      	ldr	r0, [r7, #4]
 8111bc6:	f002 fde9 	bl	811479c <pbuf_add_header>
 8111bca:	4603      	mov	r3, r0
 8111bcc:	2b00      	cmp	r3, #0
 8111bce:	d13c      	bne.n	8111c4a <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8111bd0:	687b      	ldr	r3, [r7, #4]
 8111bd2:	685b      	ldr	r3, [r3, #4]
 8111bd4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8111bd6:	69fb      	ldr	r3, [r7, #28]
 8111bd8:	681a      	ldr	r2, [r3, #0]
 8111bda:	68fb      	ldr	r3, [r7, #12]
 8111bdc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8111bde:	4b29      	ldr	r3, [pc, #164]	@ (8111c84 <icmp_input+0x228>)
 8111be0:	691a      	ldr	r2, [r3, #16]
 8111be2:	68fb      	ldr	r3, [r7, #12]
 8111be4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8111be6:	693b      	ldr	r3, [r7, #16]
 8111be8:	2200      	movs	r2, #0
 8111bea:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8111bec:	693b      	ldr	r3, [r7, #16]
 8111bee:	885b      	ldrh	r3, [r3, #2]
 8111bf0:	b29b      	uxth	r3, r3
 8111bf2:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8111bf6:	4293      	cmp	r3, r2
 8111bf8:	d907      	bls.n	8111c0a <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8111bfa:	693b      	ldr	r3, [r7, #16]
 8111bfc:	885b      	ldrh	r3, [r3, #2]
 8111bfe:	b29b      	uxth	r3, r3
 8111c00:	3309      	adds	r3, #9
 8111c02:	b29a      	uxth	r2, r3
 8111c04:	693b      	ldr	r3, [r7, #16]
 8111c06:	805a      	strh	r2, [r3, #2]
 8111c08:	e006      	b.n	8111c18 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8111c0a:	693b      	ldr	r3, [r7, #16]
 8111c0c:	885b      	ldrh	r3, [r3, #2]
 8111c0e:	b29b      	uxth	r3, r3
 8111c10:	3308      	adds	r3, #8
 8111c12:	b29a      	uxth	r2, r3
 8111c14:	693b      	ldr	r3, [r7, #16]
 8111c16:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8111c18:	68fb      	ldr	r3, [r7, #12]
 8111c1a:	22ff      	movs	r2, #255	@ 0xff
 8111c1c:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8111c1e:	68fb      	ldr	r3, [r7, #12]
 8111c20:	2200      	movs	r2, #0
 8111c22:	729a      	strb	r2, [r3, #10]
 8111c24:	2200      	movs	r2, #0
 8111c26:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8111c28:	683b      	ldr	r3, [r7, #0]
 8111c2a:	9302      	str	r3, [sp, #8]
 8111c2c:	2301      	movs	r3, #1
 8111c2e:	9301      	str	r3, [sp, #4]
 8111c30:	2300      	movs	r3, #0
 8111c32:	9300      	str	r3, [sp, #0]
 8111c34:	23ff      	movs	r3, #255	@ 0xff
 8111c36:	2200      	movs	r2, #0
 8111c38:	69f9      	ldr	r1, [r7, #28]
 8111c3a:	6878      	ldr	r0, [r7, #4]
 8111c3c:	f000 fb54 	bl	81122e8 <ip4_output_if>
 8111c40:	4603      	mov	r3, r0
 8111c42:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8111c44:	e001      	b.n	8111c4a <icmp_input+0x1ee>
      break;
 8111c46:	bf00      	nop
 8111c48:	e000      	b.n	8111c4c <icmp_input+0x1f0>
      break;
 8111c4a:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8111c4c:	6878      	ldr	r0, [r7, #4]
 8111c4e:	f002 fe3b 	bl	81148c8 <pbuf_free>
  return;
 8111c52:	e013      	b.n	8111c7c <icmp_input+0x220>
    goto lenerr;
 8111c54:	bf00      	nop
 8111c56:	e002      	b.n	8111c5e <icmp_input+0x202>
    goto lenerr;
 8111c58:	bf00      	nop
 8111c5a:	e000      	b.n	8111c5e <icmp_input+0x202>
        goto lenerr;
 8111c5c:	bf00      	nop
lenerr:
  pbuf_free(p);
 8111c5e:	6878      	ldr	r0, [r7, #4]
 8111c60:	f002 fe32 	bl	81148c8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8111c64:	e00a      	b.n	8111c7c <icmp_input+0x220>
        goto icmperr;
 8111c66:	bf00      	nop
 8111c68:	e004      	b.n	8111c74 <icmp_input+0x218>
        goto icmperr;
 8111c6a:	bf00      	nop
 8111c6c:	e002      	b.n	8111c74 <icmp_input+0x218>
          goto icmperr;
 8111c6e:	bf00      	nop
 8111c70:	e000      	b.n	8111c74 <icmp_input+0x218>
          goto icmperr;
 8111c72:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8111c74:	6878      	ldr	r0, [r7, #4]
 8111c76:	f002 fe27 	bl	81148c8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8111c7a:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8111c7c:	3728      	adds	r7, #40	@ 0x28
 8111c7e:	46bd      	mov	sp, r7
 8111c80:	bd80      	pop	{r7, pc}
 8111c82:	bf00      	nop
 8111c84:	1000b244 	.word	0x1000b244
 8111c88:	1000b258 	.word	0x1000b258
 8111c8c:	0811d0e0 	.word	0x0811d0e0
 8111c90:	0811d154 	.word	0x0811d154
 8111c94:	0811d18c 	.word	0x0811d18c
 8111c98:	0811d1b4 	.word	0x0811d1b4

08111c9c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8111c9c:	b580      	push	{r7, lr}
 8111c9e:	b082      	sub	sp, #8
 8111ca0:	af00      	add	r7, sp, #0
 8111ca2:	6078      	str	r0, [r7, #4]
 8111ca4:	460b      	mov	r3, r1
 8111ca6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8111ca8:	78fb      	ldrb	r3, [r7, #3]
 8111caa:	461a      	mov	r2, r3
 8111cac:	2103      	movs	r1, #3
 8111cae:	6878      	ldr	r0, [r7, #4]
 8111cb0:	f000 f814 	bl	8111cdc <icmp_send_response>
}
 8111cb4:	bf00      	nop
 8111cb6:	3708      	adds	r7, #8
 8111cb8:	46bd      	mov	sp, r7
 8111cba:	bd80      	pop	{r7, pc}

08111cbc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8111cbc:	b580      	push	{r7, lr}
 8111cbe:	b082      	sub	sp, #8
 8111cc0:	af00      	add	r7, sp, #0
 8111cc2:	6078      	str	r0, [r7, #4]
 8111cc4:	460b      	mov	r3, r1
 8111cc6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8111cc8:	78fb      	ldrb	r3, [r7, #3]
 8111cca:	461a      	mov	r2, r3
 8111ccc:	210b      	movs	r1, #11
 8111cce:	6878      	ldr	r0, [r7, #4]
 8111cd0:	f000 f804 	bl	8111cdc <icmp_send_response>
}
 8111cd4:	bf00      	nop
 8111cd6:	3708      	adds	r7, #8
 8111cd8:	46bd      	mov	sp, r7
 8111cda:	bd80      	pop	{r7, pc}

08111cdc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8111cdc:	b580      	push	{r7, lr}
 8111cde:	b08c      	sub	sp, #48	@ 0x30
 8111ce0:	af04      	add	r7, sp, #16
 8111ce2:	6078      	str	r0, [r7, #4]
 8111ce4:	460b      	mov	r3, r1
 8111ce6:	70fb      	strb	r3, [r7, #3]
 8111ce8:	4613      	mov	r3, r2
 8111cea:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8111cec:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8111cf0:	2124      	movs	r1, #36	@ 0x24
 8111cf2:	2022      	movs	r0, #34	@ 0x22
 8111cf4:	f002 fb04 	bl	8114300 <pbuf_alloc>
 8111cf8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8111cfa:	69fb      	ldr	r3, [r7, #28]
 8111cfc:	2b00      	cmp	r3, #0
 8111cfe:	d056      	beq.n	8111dae <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8111d00:	69fb      	ldr	r3, [r7, #28]
 8111d02:	895b      	ldrh	r3, [r3, #10]
 8111d04:	2b23      	cmp	r3, #35	@ 0x23
 8111d06:	d806      	bhi.n	8111d16 <icmp_send_response+0x3a>
 8111d08:	4b2b      	ldr	r3, [pc, #172]	@ (8111db8 <icmp_send_response+0xdc>)
 8111d0a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8111d0e:	492b      	ldr	r1, [pc, #172]	@ (8111dbc <icmp_send_response+0xe0>)
 8111d10:	482b      	ldr	r0, [pc, #172]	@ (8111dc0 <icmp_send_response+0xe4>)
 8111d12:	f00a f89b 	bl	811be4c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8111d16:	687b      	ldr	r3, [r7, #4]
 8111d18:	685b      	ldr	r3, [r3, #4]
 8111d1a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8111d1c:	69fb      	ldr	r3, [r7, #28]
 8111d1e:	685b      	ldr	r3, [r3, #4]
 8111d20:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8111d22:	697b      	ldr	r3, [r7, #20]
 8111d24:	78fa      	ldrb	r2, [r7, #3]
 8111d26:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8111d28:	697b      	ldr	r3, [r7, #20]
 8111d2a:	78ba      	ldrb	r2, [r7, #2]
 8111d2c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8111d2e:	697b      	ldr	r3, [r7, #20]
 8111d30:	2200      	movs	r2, #0
 8111d32:	711a      	strb	r2, [r3, #4]
 8111d34:	2200      	movs	r2, #0
 8111d36:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8111d38:	697b      	ldr	r3, [r7, #20]
 8111d3a:	2200      	movs	r2, #0
 8111d3c:	719a      	strb	r2, [r3, #6]
 8111d3e:	2200      	movs	r2, #0
 8111d40:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8111d42:	69fb      	ldr	r3, [r7, #28]
 8111d44:	685b      	ldr	r3, [r3, #4]
 8111d46:	f103 0008 	add.w	r0, r3, #8
 8111d4a:	687b      	ldr	r3, [r7, #4]
 8111d4c:	685b      	ldr	r3, [r3, #4]
 8111d4e:	221c      	movs	r2, #28
 8111d50:	4619      	mov	r1, r3
 8111d52:	f00a fa2c 	bl	811c1ae <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8111d56:	69bb      	ldr	r3, [r7, #24]
 8111d58:	68db      	ldr	r3, [r3, #12]
 8111d5a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8111d5c:	f107 030c 	add.w	r3, r7, #12
 8111d60:	4618      	mov	r0, r3
 8111d62:	f000 f903 	bl	8111f6c <ip4_route>
 8111d66:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8111d68:	693b      	ldr	r3, [r7, #16]
 8111d6a:	2b00      	cmp	r3, #0
 8111d6c:	d01b      	beq.n	8111da6 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8111d6e:	697b      	ldr	r3, [r7, #20]
 8111d70:	2200      	movs	r2, #0
 8111d72:	709a      	strb	r2, [r3, #2]
 8111d74:	2200      	movs	r2, #0
 8111d76:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8111d78:	69fb      	ldr	r3, [r7, #28]
 8111d7a:	895b      	ldrh	r3, [r3, #10]
 8111d7c:	4619      	mov	r1, r3
 8111d7e:	6978      	ldr	r0, [r7, #20]
 8111d80:	f000 f87d 	bl	8111e7e <inet_chksum>
 8111d84:	4603      	mov	r3, r0
 8111d86:	461a      	mov	r2, r3
 8111d88:	697b      	ldr	r3, [r7, #20]
 8111d8a:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8111d8c:	f107 020c 	add.w	r2, r7, #12
 8111d90:	693b      	ldr	r3, [r7, #16]
 8111d92:	9302      	str	r3, [sp, #8]
 8111d94:	2301      	movs	r3, #1
 8111d96:	9301      	str	r3, [sp, #4]
 8111d98:	2300      	movs	r3, #0
 8111d9a:	9300      	str	r3, [sp, #0]
 8111d9c:	23ff      	movs	r3, #255	@ 0xff
 8111d9e:	2100      	movs	r1, #0
 8111da0:	69f8      	ldr	r0, [r7, #28]
 8111da2:	f000 faa1 	bl	81122e8 <ip4_output_if>
  }
  pbuf_free(q);
 8111da6:	69f8      	ldr	r0, [r7, #28]
 8111da8:	f002 fd8e 	bl	81148c8 <pbuf_free>
 8111dac:	e000      	b.n	8111db0 <icmp_send_response+0xd4>
    return;
 8111dae:	bf00      	nop
}
 8111db0:	3720      	adds	r7, #32
 8111db2:	46bd      	mov	sp, r7
 8111db4:	bd80      	pop	{r7, pc}
 8111db6:	bf00      	nop
 8111db8:	0811d0e0 	.word	0x0811d0e0
 8111dbc:	0811d1e8 	.word	0x0811d1e8
 8111dc0:	0811d18c 	.word	0x0811d18c

08111dc4 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8111dc4:	b480      	push	{r7}
 8111dc6:	b089      	sub	sp, #36	@ 0x24
 8111dc8:	af00      	add	r7, sp, #0
 8111dca:	6078      	str	r0, [r7, #4]
 8111dcc:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8111dce:	687b      	ldr	r3, [r7, #4]
 8111dd0:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8111dd2:	2300      	movs	r3, #0
 8111dd4:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8111dd6:	2300      	movs	r3, #0
 8111dd8:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8111dda:	69fb      	ldr	r3, [r7, #28]
 8111ddc:	f003 0301 	and.w	r3, r3, #1
 8111de0:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8111de2:	693b      	ldr	r3, [r7, #16]
 8111de4:	2b00      	cmp	r3, #0
 8111de6:	d00d      	beq.n	8111e04 <lwip_standard_chksum+0x40>
 8111de8:	683b      	ldr	r3, [r7, #0]
 8111dea:	2b00      	cmp	r3, #0
 8111dec:	dd0a      	ble.n	8111e04 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8111dee:	69fa      	ldr	r2, [r7, #28]
 8111df0:	1c53      	adds	r3, r2, #1
 8111df2:	61fb      	str	r3, [r7, #28]
 8111df4:	f107 030e 	add.w	r3, r7, #14
 8111df8:	3301      	adds	r3, #1
 8111dfa:	7812      	ldrb	r2, [r2, #0]
 8111dfc:	701a      	strb	r2, [r3, #0]
    len--;
 8111dfe:	683b      	ldr	r3, [r7, #0]
 8111e00:	3b01      	subs	r3, #1
 8111e02:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8111e04:	69fb      	ldr	r3, [r7, #28]
 8111e06:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8111e08:	e00a      	b.n	8111e20 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8111e0a:	69bb      	ldr	r3, [r7, #24]
 8111e0c:	1c9a      	adds	r2, r3, #2
 8111e0e:	61ba      	str	r2, [r7, #24]
 8111e10:	881b      	ldrh	r3, [r3, #0]
 8111e12:	461a      	mov	r2, r3
 8111e14:	697b      	ldr	r3, [r7, #20]
 8111e16:	4413      	add	r3, r2
 8111e18:	617b      	str	r3, [r7, #20]
    len -= 2;
 8111e1a:	683b      	ldr	r3, [r7, #0]
 8111e1c:	3b02      	subs	r3, #2
 8111e1e:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8111e20:	683b      	ldr	r3, [r7, #0]
 8111e22:	2b01      	cmp	r3, #1
 8111e24:	dcf1      	bgt.n	8111e0a <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8111e26:	683b      	ldr	r3, [r7, #0]
 8111e28:	2b00      	cmp	r3, #0
 8111e2a:	dd04      	ble.n	8111e36 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8111e2c:	f107 030e 	add.w	r3, r7, #14
 8111e30:	69ba      	ldr	r2, [r7, #24]
 8111e32:	7812      	ldrb	r2, [r2, #0]
 8111e34:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8111e36:	89fb      	ldrh	r3, [r7, #14]
 8111e38:	461a      	mov	r2, r3
 8111e3a:	697b      	ldr	r3, [r7, #20]
 8111e3c:	4413      	add	r3, r2
 8111e3e:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8111e40:	697b      	ldr	r3, [r7, #20]
 8111e42:	0c1a      	lsrs	r2, r3, #16
 8111e44:	697b      	ldr	r3, [r7, #20]
 8111e46:	b29b      	uxth	r3, r3
 8111e48:	4413      	add	r3, r2
 8111e4a:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8111e4c:	697b      	ldr	r3, [r7, #20]
 8111e4e:	0c1a      	lsrs	r2, r3, #16
 8111e50:	697b      	ldr	r3, [r7, #20]
 8111e52:	b29b      	uxth	r3, r3
 8111e54:	4413      	add	r3, r2
 8111e56:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8111e58:	693b      	ldr	r3, [r7, #16]
 8111e5a:	2b00      	cmp	r3, #0
 8111e5c:	d007      	beq.n	8111e6e <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8111e5e:	697b      	ldr	r3, [r7, #20]
 8111e60:	021b      	lsls	r3, r3, #8
 8111e62:	b29a      	uxth	r2, r3
 8111e64:	697b      	ldr	r3, [r7, #20]
 8111e66:	0a1b      	lsrs	r3, r3, #8
 8111e68:	b2db      	uxtb	r3, r3
 8111e6a:	4313      	orrs	r3, r2
 8111e6c:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8111e6e:	697b      	ldr	r3, [r7, #20]
 8111e70:	b29b      	uxth	r3, r3
}
 8111e72:	4618      	mov	r0, r3
 8111e74:	3724      	adds	r7, #36	@ 0x24
 8111e76:	46bd      	mov	sp, r7
 8111e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111e7c:	4770      	bx	lr

08111e7e <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8111e7e:	b580      	push	{r7, lr}
 8111e80:	b082      	sub	sp, #8
 8111e82:	af00      	add	r7, sp, #0
 8111e84:	6078      	str	r0, [r7, #4]
 8111e86:	460b      	mov	r3, r1
 8111e88:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8111e8a:	887b      	ldrh	r3, [r7, #2]
 8111e8c:	4619      	mov	r1, r3
 8111e8e:	6878      	ldr	r0, [r7, #4]
 8111e90:	f7ff ff98 	bl	8111dc4 <lwip_standard_chksum>
 8111e94:	4603      	mov	r3, r0
 8111e96:	43db      	mvns	r3, r3
 8111e98:	b29b      	uxth	r3, r3
}
 8111e9a:	4618      	mov	r0, r3
 8111e9c:	3708      	adds	r7, #8
 8111e9e:	46bd      	mov	sp, r7
 8111ea0:	bd80      	pop	{r7, pc}

08111ea2 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8111ea2:	b580      	push	{r7, lr}
 8111ea4:	b086      	sub	sp, #24
 8111ea6:	af00      	add	r7, sp, #0
 8111ea8:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8111eaa:	2300      	movs	r3, #0
 8111eac:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8111eae:	2300      	movs	r3, #0
 8111eb0:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8111eb2:	687b      	ldr	r3, [r7, #4]
 8111eb4:	613b      	str	r3, [r7, #16]
 8111eb6:	e02b      	b.n	8111f10 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8111eb8:	693b      	ldr	r3, [r7, #16]
 8111eba:	685a      	ldr	r2, [r3, #4]
 8111ebc:	693b      	ldr	r3, [r7, #16]
 8111ebe:	895b      	ldrh	r3, [r3, #10]
 8111ec0:	4619      	mov	r1, r3
 8111ec2:	4610      	mov	r0, r2
 8111ec4:	f7ff ff7e 	bl	8111dc4 <lwip_standard_chksum>
 8111ec8:	4603      	mov	r3, r0
 8111eca:	461a      	mov	r2, r3
 8111ecc:	697b      	ldr	r3, [r7, #20]
 8111ece:	4413      	add	r3, r2
 8111ed0:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8111ed2:	697b      	ldr	r3, [r7, #20]
 8111ed4:	0c1a      	lsrs	r2, r3, #16
 8111ed6:	697b      	ldr	r3, [r7, #20]
 8111ed8:	b29b      	uxth	r3, r3
 8111eda:	4413      	add	r3, r2
 8111edc:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8111ede:	693b      	ldr	r3, [r7, #16]
 8111ee0:	895b      	ldrh	r3, [r3, #10]
 8111ee2:	f003 0301 	and.w	r3, r3, #1
 8111ee6:	b29b      	uxth	r3, r3
 8111ee8:	2b00      	cmp	r3, #0
 8111eea:	d00e      	beq.n	8111f0a <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8111eec:	68fb      	ldr	r3, [r7, #12]
 8111eee:	2b00      	cmp	r3, #0
 8111ef0:	bf0c      	ite	eq
 8111ef2:	2301      	moveq	r3, #1
 8111ef4:	2300      	movne	r3, #0
 8111ef6:	b2db      	uxtb	r3, r3
 8111ef8:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8111efa:	697b      	ldr	r3, [r7, #20]
 8111efc:	021b      	lsls	r3, r3, #8
 8111efe:	b29a      	uxth	r2, r3
 8111f00:	697b      	ldr	r3, [r7, #20]
 8111f02:	0a1b      	lsrs	r3, r3, #8
 8111f04:	b2db      	uxtb	r3, r3
 8111f06:	4313      	orrs	r3, r2
 8111f08:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8111f0a:	693b      	ldr	r3, [r7, #16]
 8111f0c:	681b      	ldr	r3, [r3, #0]
 8111f0e:	613b      	str	r3, [r7, #16]
 8111f10:	693b      	ldr	r3, [r7, #16]
 8111f12:	2b00      	cmp	r3, #0
 8111f14:	d1d0      	bne.n	8111eb8 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8111f16:	68fb      	ldr	r3, [r7, #12]
 8111f18:	2b00      	cmp	r3, #0
 8111f1a:	d007      	beq.n	8111f2c <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8111f1c:	697b      	ldr	r3, [r7, #20]
 8111f1e:	021b      	lsls	r3, r3, #8
 8111f20:	b29a      	uxth	r2, r3
 8111f22:	697b      	ldr	r3, [r7, #20]
 8111f24:	0a1b      	lsrs	r3, r3, #8
 8111f26:	b2db      	uxtb	r3, r3
 8111f28:	4313      	orrs	r3, r2
 8111f2a:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8111f2c:	697b      	ldr	r3, [r7, #20]
 8111f2e:	b29b      	uxth	r3, r3
 8111f30:	43db      	mvns	r3, r3
 8111f32:	b29b      	uxth	r3, r3
}
 8111f34:	4618      	mov	r0, r3
 8111f36:	3718      	adds	r7, #24
 8111f38:	46bd      	mov	sp, r7
 8111f3a:	bd80      	pop	{r7, pc}

08111f3c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8111f3c:	b580      	push	{r7, lr}
 8111f3e:	b082      	sub	sp, #8
 8111f40:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8111f42:	2300      	movs	r3, #0
 8111f44:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8111f46:	f002 ffcf 	bl	8114ee8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8111f4a:	f001 f9e9 	bl	8113320 <mem_init>
  memp_init();
 8111f4e:	f001 fd33 	bl	81139b8 <memp_init>
  pbuf_init();
  netif_init();
 8111f52:	f001 fe3f 	bl	8113bd4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8111f56:	f009 faef 	bl	811b538 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8111f5a:	f003 f841 	bl	8114fe0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8111f5e:	f009 fa31 	bl	811b3c4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8111f62:	bf00      	nop
 8111f64:	3708      	adds	r7, #8
 8111f66:	46bd      	mov	sp, r7
 8111f68:	bd80      	pop	{r7, pc}
	...

08111f6c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8111f6c:	b480      	push	{r7}
 8111f6e:	b085      	sub	sp, #20
 8111f70:	af00      	add	r7, sp, #0
 8111f72:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8111f74:	4b33      	ldr	r3, [pc, #204]	@ (8112044 <ip4_route+0xd8>)
 8111f76:	681b      	ldr	r3, [r3, #0]
 8111f78:	60fb      	str	r3, [r7, #12]
 8111f7a:	e036      	b.n	8111fea <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8111f7c:	68fb      	ldr	r3, [r7, #12]
 8111f7e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8111f82:	f003 0301 	and.w	r3, r3, #1
 8111f86:	b2db      	uxtb	r3, r3
 8111f88:	2b00      	cmp	r3, #0
 8111f8a:	d02b      	beq.n	8111fe4 <ip4_route+0x78>
 8111f8c:	68fb      	ldr	r3, [r7, #12]
 8111f8e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8111f92:	089b      	lsrs	r3, r3, #2
 8111f94:	f003 0301 	and.w	r3, r3, #1
 8111f98:	b2db      	uxtb	r3, r3
 8111f9a:	2b00      	cmp	r3, #0
 8111f9c:	d022      	beq.n	8111fe4 <ip4_route+0x78>
 8111f9e:	68fb      	ldr	r3, [r7, #12]
 8111fa0:	3304      	adds	r3, #4
 8111fa2:	681b      	ldr	r3, [r3, #0]
 8111fa4:	2b00      	cmp	r3, #0
 8111fa6:	d01d      	beq.n	8111fe4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8111fa8:	687b      	ldr	r3, [r7, #4]
 8111faa:	681a      	ldr	r2, [r3, #0]
 8111fac:	68fb      	ldr	r3, [r7, #12]
 8111fae:	3304      	adds	r3, #4
 8111fb0:	681b      	ldr	r3, [r3, #0]
 8111fb2:	405a      	eors	r2, r3
 8111fb4:	68fb      	ldr	r3, [r7, #12]
 8111fb6:	3308      	adds	r3, #8
 8111fb8:	681b      	ldr	r3, [r3, #0]
 8111fba:	4013      	ands	r3, r2
 8111fbc:	2b00      	cmp	r3, #0
 8111fbe:	d101      	bne.n	8111fc4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8111fc0:	68fb      	ldr	r3, [r7, #12]
 8111fc2:	e038      	b.n	8112036 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8111fc4:	68fb      	ldr	r3, [r7, #12]
 8111fc6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8111fca:	f003 0302 	and.w	r3, r3, #2
 8111fce:	2b00      	cmp	r3, #0
 8111fd0:	d108      	bne.n	8111fe4 <ip4_route+0x78>
 8111fd2:	687b      	ldr	r3, [r7, #4]
 8111fd4:	681a      	ldr	r2, [r3, #0]
 8111fd6:	68fb      	ldr	r3, [r7, #12]
 8111fd8:	330c      	adds	r3, #12
 8111fda:	681b      	ldr	r3, [r3, #0]
 8111fdc:	429a      	cmp	r2, r3
 8111fde:	d101      	bne.n	8111fe4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8111fe0:	68fb      	ldr	r3, [r7, #12]
 8111fe2:	e028      	b.n	8112036 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8111fe4:	68fb      	ldr	r3, [r7, #12]
 8111fe6:	681b      	ldr	r3, [r3, #0]
 8111fe8:	60fb      	str	r3, [r7, #12]
 8111fea:	68fb      	ldr	r3, [r7, #12]
 8111fec:	2b00      	cmp	r3, #0
 8111fee:	d1c5      	bne.n	8111f7c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8111ff0:	4b15      	ldr	r3, [pc, #84]	@ (8112048 <ip4_route+0xdc>)
 8111ff2:	681b      	ldr	r3, [r3, #0]
 8111ff4:	2b00      	cmp	r3, #0
 8111ff6:	d01a      	beq.n	811202e <ip4_route+0xc2>
 8111ff8:	4b13      	ldr	r3, [pc, #76]	@ (8112048 <ip4_route+0xdc>)
 8111ffa:	681b      	ldr	r3, [r3, #0]
 8111ffc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8112000:	f003 0301 	and.w	r3, r3, #1
 8112004:	2b00      	cmp	r3, #0
 8112006:	d012      	beq.n	811202e <ip4_route+0xc2>
 8112008:	4b0f      	ldr	r3, [pc, #60]	@ (8112048 <ip4_route+0xdc>)
 811200a:	681b      	ldr	r3, [r3, #0]
 811200c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8112010:	f003 0304 	and.w	r3, r3, #4
 8112014:	2b00      	cmp	r3, #0
 8112016:	d00a      	beq.n	811202e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8112018:	4b0b      	ldr	r3, [pc, #44]	@ (8112048 <ip4_route+0xdc>)
 811201a:	681b      	ldr	r3, [r3, #0]
 811201c:	3304      	adds	r3, #4
 811201e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8112020:	2b00      	cmp	r3, #0
 8112022:	d004      	beq.n	811202e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8112024:	687b      	ldr	r3, [r7, #4]
 8112026:	681b      	ldr	r3, [r3, #0]
 8112028:	b2db      	uxtb	r3, r3
 811202a:	2b7f      	cmp	r3, #127	@ 0x7f
 811202c:	d101      	bne.n	8112032 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 811202e:	2300      	movs	r3, #0
 8112030:	e001      	b.n	8112036 <ip4_route+0xca>
  }

  return netif_default;
 8112032:	4b05      	ldr	r3, [pc, #20]	@ (8112048 <ip4_route+0xdc>)
 8112034:	681b      	ldr	r3, [r3, #0]
}
 8112036:	4618      	mov	r0, r3
 8112038:	3714      	adds	r7, #20
 811203a:	46bd      	mov	sp, r7
 811203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112040:	4770      	bx	lr
 8112042:	bf00      	nop
 8112044:	10011d04 	.word	0x10011d04
 8112048:	10011d08 	.word	0x10011d08

0811204c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 811204c:	b580      	push	{r7, lr}
 811204e:	b082      	sub	sp, #8
 8112050:	af00      	add	r7, sp, #0
 8112052:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8112054:	687b      	ldr	r3, [r7, #4]
 8112056:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811205a:	f003 0301 	and.w	r3, r3, #1
 811205e:	b2db      	uxtb	r3, r3
 8112060:	2b00      	cmp	r3, #0
 8112062:	d016      	beq.n	8112092 <ip4_input_accept+0x46>
 8112064:	687b      	ldr	r3, [r7, #4]
 8112066:	3304      	adds	r3, #4
 8112068:	681b      	ldr	r3, [r3, #0]
 811206a:	2b00      	cmp	r3, #0
 811206c:	d011      	beq.n	8112092 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 811206e:	4b0b      	ldr	r3, [pc, #44]	@ (811209c <ip4_input_accept+0x50>)
 8112070:	695a      	ldr	r2, [r3, #20]
 8112072:	687b      	ldr	r3, [r7, #4]
 8112074:	3304      	adds	r3, #4
 8112076:	681b      	ldr	r3, [r3, #0]
 8112078:	429a      	cmp	r2, r3
 811207a:	d008      	beq.n	811208e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 811207c:	4b07      	ldr	r3, [pc, #28]	@ (811209c <ip4_input_accept+0x50>)
 811207e:	695b      	ldr	r3, [r3, #20]
 8112080:	6879      	ldr	r1, [r7, #4]
 8112082:	4618      	mov	r0, r3
 8112084:	f000 fa08 	bl	8112498 <ip4_addr_isbroadcast_u32>
 8112088:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 811208a:	2b00      	cmp	r3, #0
 811208c:	d001      	beq.n	8112092 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 811208e:	2301      	movs	r3, #1
 8112090:	e000      	b.n	8112094 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8112092:	2300      	movs	r3, #0
}
 8112094:	4618      	mov	r0, r3
 8112096:	3708      	adds	r7, #8
 8112098:	46bd      	mov	sp, r7
 811209a:	bd80      	pop	{r7, pc}
 811209c:	1000b244 	.word	0x1000b244

081120a0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 81120a0:	b580      	push	{r7, lr}
 81120a2:	b086      	sub	sp, #24
 81120a4:	af00      	add	r7, sp, #0
 81120a6:	6078      	str	r0, [r7, #4]
 81120a8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 81120aa:	687b      	ldr	r3, [r7, #4]
 81120ac:	685b      	ldr	r3, [r3, #4]
 81120ae:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 81120b0:	697b      	ldr	r3, [r7, #20]
 81120b2:	781b      	ldrb	r3, [r3, #0]
 81120b4:	091b      	lsrs	r3, r3, #4
 81120b6:	b2db      	uxtb	r3, r3
 81120b8:	2b04      	cmp	r3, #4
 81120ba:	d004      	beq.n	81120c6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 81120bc:	6878      	ldr	r0, [r7, #4]
 81120be:	f002 fc03 	bl	81148c8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 81120c2:	2300      	movs	r3, #0
 81120c4:	e107      	b.n	81122d6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 81120c6:	697b      	ldr	r3, [r7, #20]
 81120c8:	781b      	ldrb	r3, [r3, #0]
 81120ca:	f003 030f 	and.w	r3, r3, #15
 81120ce:	b2db      	uxtb	r3, r3
 81120d0:	009b      	lsls	r3, r3, #2
 81120d2:	b2db      	uxtb	r3, r3
 81120d4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 81120d6:	697b      	ldr	r3, [r7, #20]
 81120d8:	885b      	ldrh	r3, [r3, #2]
 81120da:	b29b      	uxth	r3, r3
 81120dc:	4618      	mov	r0, r3
 81120de:	f7fe fc6d 	bl	81109bc <lwip_htons>
 81120e2:	4603      	mov	r3, r0
 81120e4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 81120e6:	687b      	ldr	r3, [r7, #4]
 81120e8:	891b      	ldrh	r3, [r3, #8]
 81120ea:	89ba      	ldrh	r2, [r7, #12]
 81120ec:	429a      	cmp	r2, r3
 81120ee:	d204      	bcs.n	81120fa <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 81120f0:	89bb      	ldrh	r3, [r7, #12]
 81120f2:	4619      	mov	r1, r3
 81120f4:	6878      	ldr	r0, [r7, #4]
 81120f6:	f002 fa63 	bl	81145c0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 81120fa:	687b      	ldr	r3, [r7, #4]
 81120fc:	895b      	ldrh	r3, [r3, #10]
 81120fe:	89fa      	ldrh	r2, [r7, #14]
 8112100:	429a      	cmp	r2, r3
 8112102:	d807      	bhi.n	8112114 <ip4_input+0x74>
 8112104:	687b      	ldr	r3, [r7, #4]
 8112106:	891b      	ldrh	r3, [r3, #8]
 8112108:	89ba      	ldrh	r2, [r7, #12]
 811210a:	429a      	cmp	r2, r3
 811210c:	d802      	bhi.n	8112114 <ip4_input+0x74>
 811210e:	89fb      	ldrh	r3, [r7, #14]
 8112110:	2b13      	cmp	r3, #19
 8112112:	d804      	bhi.n	811211e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8112114:	6878      	ldr	r0, [r7, #4]
 8112116:	f002 fbd7 	bl	81148c8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 811211a:	2300      	movs	r3, #0
 811211c:	e0db      	b.n	81122d6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 811211e:	697b      	ldr	r3, [r7, #20]
 8112120:	691b      	ldr	r3, [r3, #16]
 8112122:	4a6f      	ldr	r2, [pc, #444]	@ (81122e0 <ip4_input+0x240>)
 8112124:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8112126:	697b      	ldr	r3, [r7, #20]
 8112128:	68db      	ldr	r3, [r3, #12]
 811212a:	4a6d      	ldr	r2, [pc, #436]	@ (81122e0 <ip4_input+0x240>)
 811212c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 811212e:	4b6c      	ldr	r3, [pc, #432]	@ (81122e0 <ip4_input+0x240>)
 8112130:	695b      	ldr	r3, [r3, #20]
 8112132:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8112136:	2be0      	cmp	r3, #224	@ 0xe0
 8112138:	d112      	bne.n	8112160 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 811213a:	683b      	ldr	r3, [r7, #0]
 811213c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8112140:	f003 0301 	and.w	r3, r3, #1
 8112144:	b2db      	uxtb	r3, r3
 8112146:	2b00      	cmp	r3, #0
 8112148:	d007      	beq.n	811215a <ip4_input+0xba>
 811214a:	683b      	ldr	r3, [r7, #0]
 811214c:	3304      	adds	r3, #4
 811214e:	681b      	ldr	r3, [r3, #0]
 8112150:	2b00      	cmp	r3, #0
 8112152:	d002      	beq.n	811215a <ip4_input+0xba>
      netif = inp;
 8112154:	683b      	ldr	r3, [r7, #0]
 8112156:	613b      	str	r3, [r7, #16]
 8112158:	e02a      	b.n	81121b0 <ip4_input+0x110>
    } else {
      netif = NULL;
 811215a:	2300      	movs	r3, #0
 811215c:	613b      	str	r3, [r7, #16]
 811215e:	e027      	b.n	81121b0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8112160:	6838      	ldr	r0, [r7, #0]
 8112162:	f7ff ff73 	bl	811204c <ip4_input_accept>
 8112166:	4603      	mov	r3, r0
 8112168:	2b00      	cmp	r3, #0
 811216a:	d002      	beq.n	8112172 <ip4_input+0xd2>
      netif = inp;
 811216c:	683b      	ldr	r3, [r7, #0]
 811216e:	613b      	str	r3, [r7, #16]
 8112170:	e01e      	b.n	81121b0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8112172:	2300      	movs	r3, #0
 8112174:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8112176:	4b5a      	ldr	r3, [pc, #360]	@ (81122e0 <ip4_input+0x240>)
 8112178:	695b      	ldr	r3, [r3, #20]
 811217a:	b2db      	uxtb	r3, r3
 811217c:	2b7f      	cmp	r3, #127	@ 0x7f
 811217e:	d017      	beq.n	81121b0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8112180:	4b58      	ldr	r3, [pc, #352]	@ (81122e4 <ip4_input+0x244>)
 8112182:	681b      	ldr	r3, [r3, #0]
 8112184:	613b      	str	r3, [r7, #16]
 8112186:	e00e      	b.n	81121a6 <ip4_input+0x106>
          if (netif == inp) {
 8112188:	693a      	ldr	r2, [r7, #16]
 811218a:	683b      	ldr	r3, [r7, #0]
 811218c:	429a      	cmp	r2, r3
 811218e:	d006      	beq.n	811219e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8112190:	6938      	ldr	r0, [r7, #16]
 8112192:	f7ff ff5b 	bl	811204c <ip4_input_accept>
 8112196:	4603      	mov	r3, r0
 8112198:	2b00      	cmp	r3, #0
 811219a:	d108      	bne.n	81121ae <ip4_input+0x10e>
 811219c:	e000      	b.n	81121a0 <ip4_input+0x100>
            continue;
 811219e:	bf00      	nop
        NETIF_FOREACH(netif) {
 81121a0:	693b      	ldr	r3, [r7, #16]
 81121a2:	681b      	ldr	r3, [r3, #0]
 81121a4:	613b      	str	r3, [r7, #16]
 81121a6:	693b      	ldr	r3, [r7, #16]
 81121a8:	2b00      	cmp	r3, #0
 81121aa:	d1ed      	bne.n	8112188 <ip4_input+0xe8>
 81121ac:	e000      	b.n	81121b0 <ip4_input+0x110>
            break;
 81121ae:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 81121b0:	4b4b      	ldr	r3, [pc, #300]	@ (81122e0 <ip4_input+0x240>)
 81121b2:	691b      	ldr	r3, [r3, #16]
 81121b4:	6839      	ldr	r1, [r7, #0]
 81121b6:	4618      	mov	r0, r3
 81121b8:	f000 f96e 	bl	8112498 <ip4_addr_isbroadcast_u32>
 81121bc:	4603      	mov	r3, r0
 81121be:	2b00      	cmp	r3, #0
 81121c0:	d105      	bne.n	81121ce <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 81121c2:	4b47      	ldr	r3, [pc, #284]	@ (81122e0 <ip4_input+0x240>)
 81121c4:	691b      	ldr	r3, [r3, #16]
 81121c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 81121ca:	2be0      	cmp	r3, #224	@ 0xe0
 81121cc:	d104      	bne.n	81121d8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 81121ce:	6878      	ldr	r0, [r7, #4]
 81121d0:	f002 fb7a 	bl	81148c8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 81121d4:	2300      	movs	r3, #0
 81121d6:	e07e      	b.n	81122d6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 81121d8:	693b      	ldr	r3, [r7, #16]
 81121da:	2b00      	cmp	r3, #0
 81121dc:	d104      	bne.n	81121e8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 81121de:	6878      	ldr	r0, [r7, #4]
 81121e0:	f002 fb72 	bl	81148c8 <pbuf_free>
    return ERR_OK;
 81121e4:	2300      	movs	r3, #0
 81121e6:	e076      	b.n	81122d6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 81121e8:	697b      	ldr	r3, [r7, #20]
 81121ea:	88db      	ldrh	r3, [r3, #6]
 81121ec:	b29b      	uxth	r3, r3
 81121ee:	461a      	mov	r2, r3
 81121f0:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 81121f4:	4013      	ands	r3, r2
 81121f6:	2b00      	cmp	r3, #0
 81121f8:	d00b      	beq.n	8112212 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 81121fa:	6878      	ldr	r0, [r7, #4]
 81121fc:	f000 fc92 	bl	8112b24 <ip4_reass>
 8112200:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8112202:	687b      	ldr	r3, [r7, #4]
 8112204:	2b00      	cmp	r3, #0
 8112206:	d101      	bne.n	811220c <ip4_input+0x16c>
      return ERR_OK;
 8112208:	2300      	movs	r3, #0
 811220a:	e064      	b.n	81122d6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 811220c:	687b      	ldr	r3, [r7, #4]
 811220e:	685b      	ldr	r3, [r3, #4]
 8112210:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8112212:	4a33      	ldr	r2, [pc, #204]	@ (81122e0 <ip4_input+0x240>)
 8112214:	693b      	ldr	r3, [r7, #16]
 8112216:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8112218:	4a31      	ldr	r2, [pc, #196]	@ (81122e0 <ip4_input+0x240>)
 811221a:	683b      	ldr	r3, [r7, #0]
 811221c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 811221e:	4a30      	ldr	r2, [pc, #192]	@ (81122e0 <ip4_input+0x240>)
 8112220:	697b      	ldr	r3, [r7, #20]
 8112222:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8112224:	697b      	ldr	r3, [r7, #20]
 8112226:	781b      	ldrb	r3, [r3, #0]
 8112228:	f003 030f 	and.w	r3, r3, #15
 811222c:	b2db      	uxtb	r3, r3
 811222e:	009b      	lsls	r3, r3, #2
 8112230:	b2db      	uxtb	r3, r3
 8112232:	461a      	mov	r2, r3
 8112234:	4b2a      	ldr	r3, [pc, #168]	@ (81122e0 <ip4_input+0x240>)
 8112236:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8112238:	89fb      	ldrh	r3, [r7, #14]
 811223a:	4619      	mov	r1, r3
 811223c:	6878      	ldr	r0, [r7, #4]
 811223e:	f002 fabd 	bl	81147bc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8112242:	697b      	ldr	r3, [r7, #20]
 8112244:	7a5b      	ldrb	r3, [r3, #9]
 8112246:	2b11      	cmp	r3, #17
 8112248:	d006      	beq.n	8112258 <ip4_input+0x1b8>
 811224a:	2b11      	cmp	r3, #17
 811224c:	dc13      	bgt.n	8112276 <ip4_input+0x1d6>
 811224e:	2b01      	cmp	r3, #1
 8112250:	d00c      	beq.n	811226c <ip4_input+0x1cc>
 8112252:	2b06      	cmp	r3, #6
 8112254:	d005      	beq.n	8112262 <ip4_input+0x1c2>
 8112256:	e00e      	b.n	8112276 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8112258:	6839      	ldr	r1, [r7, #0]
 811225a:	6878      	ldr	r0, [r7, #4]
 811225c:	f009 f9e2 	bl	811b624 <udp_input>
        break;
 8112260:	e026      	b.n	81122b0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8112262:	6839      	ldr	r1, [r7, #0]
 8112264:	6878      	ldr	r0, [r7, #4]
 8112266:	f004 fc35 	bl	8116ad4 <tcp_input>
        break;
 811226a:	e021      	b.n	81122b0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 811226c:	6839      	ldr	r1, [r7, #0]
 811226e:	6878      	ldr	r0, [r7, #4]
 8112270:	f7ff fbf4 	bl	8111a5c <icmp_input>
        break;
 8112274:	e01c      	b.n	81122b0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8112276:	4b1a      	ldr	r3, [pc, #104]	@ (81122e0 <ip4_input+0x240>)
 8112278:	695b      	ldr	r3, [r3, #20]
 811227a:	6939      	ldr	r1, [r7, #16]
 811227c:	4618      	mov	r0, r3
 811227e:	f000 f90b 	bl	8112498 <ip4_addr_isbroadcast_u32>
 8112282:	4603      	mov	r3, r0
 8112284:	2b00      	cmp	r3, #0
 8112286:	d10f      	bne.n	81122a8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8112288:	4b15      	ldr	r3, [pc, #84]	@ (81122e0 <ip4_input+0x240>)
 811228a:	695b      	ldr	r3, [r3, #20]
 811228c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8112290:	2be0      	cmp	r3, #224	@ 0xe0
 8112292:	d009      	beq.n	81122a8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8112294:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8112298:	4619      	mov	r1, r3
 811229a:	6878      	ldr	r0, [r7, #4]
 811229c:	f002 fb01 	bl	81148a2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 81122a0:	2102      	movs	r1, #2
 81122a2:	6878      	ldr	r0, [r7, #4]
 81122a4:	f7ff fcfa 	bl	8111c9c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 81122a8:	6878      	ldr	r0, [r7, #4]
 81122aa:	f002 fb0d 	bl	81148c8 <pbuf_free>
        break;
 81122ae:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 81122b0:	4b0b      	ldr	r3, [pc, #44]	@ (81122e0 <ip4_input+0x240>)
 81122b2:	2200      	movs	r2, #0
 81122b4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 81122b6:	4b0a      	ldr	r3, [pc, #40]	@ (81122e0 <ip4_input+0x240>)
 81122b8:	2200      	movs	r2, #0
 81122ba:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 81122bc:	4b08      	ldr	r3, [pc, #32]	@ (81122e0 <ip4_input+0x240>)
 81122be:	2200      	movs	r2, #0
 81122c0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 81122c2:	4b07      	ldr	r3, [pc, #28]	@ (81122e0 <ip4_input+0x240>)
 81122c4:	2200      	movs	r2, #0
 81122c6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 81122c8:	4b05      	ldr	r3, [pc, #20]	@ (81122e0 <ip4_input+0x240>)
 81122ca:	2200      	movs	r2, #0
 81122cc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 81122ce:	4b04      	ldr	r3, [pc, #16]	@ (81122e0 <ip4_input+0x240>)
 81122d0:	2200      	movs	r2, #0
 81122d2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 81122d4:	2300      	movs	r3, #0
}
 81122d6:	4618      	mov	r0, r3
 81122d8:	3718      	adds	r7, #24
 81122da:	46bd      	mov	sp, r7
 81122dc:	bd80      	pop	{r7, pc}
 81122de:	bf00      	nop
 81122e0:	1000b244 	.word	0x1000b244
 81122e4:	10011d04 	.word	0x10011d04

081122e8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 81122e8:	b580      	push	{r7, lr}
 81122ea:	b08a      	sub	sp, #40	@ 0x28
 81122ec:	af04      	add	r7, sp, #16
 81122ee:	60f8      	str	r0, [r7, #12]
 81122f0:	60b9      	str	r1, [r7, #8]
 81122f2:	607a      	str	r2, [r7, #4]
 81122f4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 81122f6:	68bb      	ldr	r3, [r7, #8]
 81122f8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 81122fa:	687b      	ldr	r3, [r7, #4]
 81122fc:	2b00      	cmp	r3, #0
 81122fe:	d009      	beq.n	8112314 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8112300:	68bb      	ldr	r3, [r7, #8]
 8112302:	2b00      	cmp	r3, #0
 8112304:	d003      	beq.n	811230e <ip4_output_if+0x26>
 8112306:	68bb      	ldr	r3, [r7, #8]
 8112308:	681b      	ldr	r3, [r3, #0]
 811230a:	2b00      	cmp	r3, #0
 811230c:	d102      	bne.n	8112314 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 811230e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112310:	3304      	adds	r3, #4
 8112312:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8112314:	78fa      	ldrb	r2, [r7, #3]
 8112316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112318:	9302      	str	r3, [sp, #8]
 811231a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 811231e:	9301      	str	r3, [sp, #4]
 8112320:	f897 3020 	ldrb.w	r3, [r7, #32]
 8112324:	9300      	str	r3, [sp, #0]
 8112326:	4613      	mov	r3, r2
 8112328:	687a      	ldr	r2, [r7, #4]
 811232a:	6979      	ldr	r1, [r7, #20]
 811232c:	68f8      	ldr	r0, [r7, #12]
 811232e:	f000 f805 	bl	811233c <ip4_output_if_src>
 8112332:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8112334:	4618      	mov	r0, r3
 8112336:	3718      	adds	r7, #24
 8112338:	46bd      	mov	sp, r7
 811233a:	bd80      	pop	{r7, pc}

0811233c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 811233c:	b580      	push	{r7, lr}
 811233e:	b088      	sub	sp, #32
 8112340:	af00      	add	r7, sp, #0
 8112342:	60f8      	str	r0, [r7, #12]
 8112344:	60b9      	str	r1, [r7, #8]
 8112346:	607a      	str	r2, [r7, #4]
 8112348:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 811234a:	68fb      	ldr	r3, [r7, #12]
 811234c:	7b9b      	ldrb	r3, [r3, #14]
 811234e:	2b01      	cmp	r3, #1
 8112350:	d006      	beq.n	8112360 <ip4_output_if_src+0x24>
 8112352:	4b4b      	ldr	r3, [pc, #300]	@ (8112480 <ip4_output_if_src+0x144>)
 8112354:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8112358:	494a      	ldr	r1, [pc, #296]	@ (8112484 <ip4_output_if_src+0x148>)
 811235a:	484b      	ldr	r0, [pc, #300]	@ (8112488 <ip4_output_if_src+0x14c>)
 811235c:	f009 fd76 	bl	811be4c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8112360:	687b      	ldr	r3, [r7, #4]
 8112362:	2b00      	cmp	r3, #0
 8112364:	d060      	beq.n	8112428 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8112366:	2314      	movs	r3, #20
 8112368:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 811236a:	2114      	movs	r1, #20
 811236c:	68f8      	ldr	r0, [r7, #12]
 811236e:	f002 fa15 	bl	811479c <pbuf_add_header>
 8112372:	4603      	mov	r3, r0
 8112374:	2b00      	cmp	r3, #0
 8112376:	d002      	beq.n	811237e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8112378:	f06f 0301 	mvn.w	r3, #1
 811237c:	e07c      	b.n	8112478 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 811237e:	68fb      	ldr	r3, [r7, #12]
 8112380:	685b      	ldr	r3, [r3, #4]
 8112382:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8112384:	68fb      	ldr	r3, [r7, #12]
 8112386:	895b      	ldrh	r3, [r3, #10]
 8112388:	2b13      	cmp	r3, #19
 811238a:	d806      	bhi.n	811239a <ip4_output_if_src+0x5e>
 811238c:	4b3c      	ldr	r3, [pc, #240]	@ (8112480 <ip4_output_if_src+0x144>)
 811238e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8112392:	493e      	ldr	r1, [pc, #248]	@ (811248c <ip4_output_if_src+0x150>)
 8112394:	483c      	ldr	r0, [pc, #240]	@ (8112488 <ip4_output_if_src+0x14c>)
 8112396:	f009 fd59 	bl	811be4c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 811239a:	69fb      	ldr	r3, [r7, #28]
 811239c:	78fa      	ldrb	r2, [r7, #3]
 811239e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 81123a0:	69fb      	ldr	r3, [r7, #28]
 81123a2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 81123a6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 81123a8:	687b      	ldr	r3, [r7, #4]
 81123aa:	681a      	ldr	r2, [r3, #0]
 81123ac:	69fb      	ldr	r3, [r7, #28]
 81123ae:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 81123b0:	8b7b      	ldrh	r3, [r7, #26]
 81123b2:	089b      	lsrs	r3, r3, #2
 81123b4:	b29b      	uxth	r3, r3
 81123b6:	b2db      	uxtb	r3, r3
 81123b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81123bc:	b2da      	uxtb	r2, r3
 81123be:	69fb      	ldr	r3, [r7, #28]
 81123c0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 81123c2:	69fb      	ldr	r3, [r7, #28]
 81123c4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 81123c8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 81123ca:	68fb      	ldr	r3, [r7, #12]
 81123cc:	891b      	ldrh	r3, [r3, #8]
 81123ce:	4618      	mov	r0, r3
 81123d0:	f7fe faf4 	bl	81109bc <lwip_htons>
 81123d4:	4603      	mov	r3, r0
 81123d6:	461a      	mov	r2, r3
 81123d8:	69fb      	ldr	r3, [r7, #28]
 81123da:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 81123dc:	69fb      	ldr	r3, [r7, #28]
 81123de:	2200      	movs	r2, #0
 81123e0:	719a      	strb	r2, [r3, #6]
 81123e2:	2200      	movs	r2, #0
 81123e4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 81123e6:	4b2a      	ldr	r3, [pc, #168]	@ (8112490 <ip4_output_if_src+0x154>)
 81123e8:	881b      	ldrh	r3, [r3, #0]
 81123ea:	4618      	mov	r0, r3
 81123ec:	f7fe fae6 	bl	81109bc <lwip_htons>
 81123f0:	4603      	mov	r3, r0
 81123f2:	461a      	mov	r2, r3
 81123f4:	69fb      	ldr	r3, [r7, #28]
 81123f6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 81123f8:	4b25      	ldr	r3, [pc, #148]	@ (8112490 <ip4_output_if_src+0x154>)
 81123fa:	881b      	ldrh	r3, [r3, #0]
 81123fc:	3301      	adds	r3, #1
 81123fe:	b29a      	uxth	r2, r3
 8112400:	4b23      	ldr	r3, [pc, #140]	@ (8112490 <ip4_output_if_src+0x154>)
 8112402:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8112404:	68bb      	ldr	r3, [r7, #8]
 8112406:	2b00      	cmp	r3, #0
 8112408:	d104      	bne.n	8112414 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 811240a:	4b22      	ldr	r3, [pc, #136]	@ (8112494 <ip4_output_if_src+0x158>)
 811240c:	681a      	ldr	r2, [r3, #0]
 811240e:	69fb      	ldr	r3, [r7, #28]
 8112410:	60da      	str	r2, [r3, #12]
 8112412:	e003      	b.n	811241c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8112414:	68bb      	ldr	r3, [r7, #8]
 8112416:	681a      	ldr	r2, [r3, #0]
 8112418:	69fb      	ldr	r3, [r7, #28]
 811241a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 811241c:	69fb      	ldr	r3, [r7, #28]
 811241e:	2200      	movs	r2, #0
 8112420:	729a      	strb	r2, [r3, #10]
 8112422:	2200      	movs	r2, #0
 8112424:	72da      	strb	r2, [r3, #11]
 8112426:	e00f      	b.n	8112448 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8112428:	68fb      	ldr	r3, [r7, #12]
 811242a:	895b      	ldrh	r3, [r3, #10]
 811242c:	2b13      	cmp	r3, #19
 811242e:	d802      	bhi.n	8112436 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8112430:	f06f 0301 	mvn.w	r3, #1
 8112434:	e020      	b.n	8112478 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8112436:	68fb      	ldr	r3, [r7, #12]
 8112438:	685b      	ldr	r3, [r3, #4]
 811243a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 811243c:	69fb      	ldr	r3, [r7, #28]
 811243e:	691b      	ldr	r3, [r3, #16]
 8112440:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8112442:	f107 0314 	add.w	r3, r7, #20
 8112446:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8112448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811244a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 811244c:	2b00      	cmp	r3, #0
 811244e:	d00c      	beq.n	811246a <ip4_output_if_src+0x12e>
 8112450:	68fb      	ldr	r3, [r7, #12]
 8112452:	891a      	ldrh	r2, [r3, #8]
 8112454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112456:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8112458:	429a      	cmp	r2, r3
 811245a:	d906      	bls.n	811246a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 811245c:	687a      	ldr	r2, [r7, #4]
 811245e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8112460:	68f8      	ldr	r0, [r7, #12]
 8112462:	f000 fd53 	bl	8112f0c <ip4_frag>
 8112466:	4603      	mov	r3, r0
 8112468:	e006      	b.n	8112478 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 811246a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811246c:	695b      	ldr	r3, [r3, #20]
 811246e:	687a      	ldr	r2, [r7, #4]
 8112470:	68f9      	ldr	r1, [r7, #12]
 8112472:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8112474:	4798      	blx	r3
 8112476:	4603      	mov	r3, r0
}
 8112478:	4618      	mov	r0, r3
 811247a:	3720      	adds	r7, #32
 811247c:	46bd      	mov	sp, r7
 811247e:	bd80      	pop	{r7, pc}
 8112480:	0811d214 	.word	0x0811d214
 8112484:	0811d288 	.word	0x0811d288
 8112488:	0811d294 	.word	0x0811d294
 811248c:	0811d2bc 	.word	0x0811d2bc
 8112490:	1000b25c 	.word	0x1000b25c
 8112494:	0811fc50 	.word	0x0811fc50

08112498 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8112498:	b480      	push	{r7}
 811249a:	b085      	sub	sp, #20
 811249c:	af00      	add	r7, sp, #0
 811249e:	6078      	str	r0, [r7, #4]
 81124a0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 81124a2:	687b      	ldr	r3, [r7, #4]
 81124a4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 81124a6:	687b      	ldr	r3, [r7, #4]
 81124a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81124ac:	d002      	beq.n	81124b4 <ip4_addr_isbroadcast_u32+0x1c>
 81124ae:	687b      	ldr	r3, [r7, #4]
 81124b0:	2b00      	cmp	r3, #0
 81124b2:	d101      	bne.n	81124b8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 81124b4:	2301      	movs	r3, #1
 81124b6:	e02a      	b.n	811250e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 81124b8:	683b      	ldr	r3, [r7, #0]
 81124ba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 81124be:	f003 0302 	and.w	r3, r3, #2
 81124c2:	2b00      	cmp	r3, #0
 81124c4:	d101      	bne.n	81124ca <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 81124c6:	2300      	movs	r3, #0
 81124c8:	e021      	b.n	811250e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 81124ca:	683b      	ldr	r3, [r7, #0]
 81124cc:	3304      	adds	r3, #4
 81124ce:	681b      	ldr	r3, [r3, #0]
 81124d0:	687a      	ldr	r2, [r7, #4]
 81124d2:	429a      	cmp	r2, r3
 81124d4:	d101      	bne.n	81124da <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 81124d6:	2300      	movs	r3, #0
 81124d8:	e019      	b.n	811250e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 81124da:	68fa      	ldr	r2, [r7, #12]
 81124dc:	683b      	ldr	r3, [r7, #0]
 81124de:	3304      	adds	r3, #4
 81124e0:	681b      	ldr	r3, [r3, #0]
 81124e2:	405a      	eors	r2, r3
 81124e4:	683b      	ldr	r3, [r7, #0]
 81124e6:	3308      	adds	r3, #8
 81124e8:	681b      	ldr	r3, [r3, #0]
 81124ea:	4013      	ands	r3, r2
 81124ec:	2b00      	cmp	r3, #0
 81124ee:	d10d      	bne.n	811250c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 81124f0:	683b      	ldr	r3, [r7, #0]
 81124f2:	3308      	adds	r3, #8
 81124f4:	681b      	ldr	r3, [r3, #0]
 81124f6:	43da      	mvns	r2, r3
 81124f8:	687b      	ldr	r3, [r7, #4]
 81124fa:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 81124fc:	683b      	ldr	r3, [r7, #0]
 81124fe:	3308      	adds	r3, #8
 8112500:	681b      	ldr	r3, [r3, #0]
 8112502:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8112504:	429a      	cmp	r2, r3
 8112506:	d101      	bne.n	811250c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8112508:	2301      	movs	r3, #1
 811250a:	e000      	b.n	811250e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 811250c:	2300      	movs	r3, #0
  }
}
 811250e:	4618      	mov	r0, r3
 8112510:	3714      	adds	r7, #20
 8112512:	46bd      	mov	sp, r7
 8112514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8112518:	4770      	bx	lr
	...

0811251c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 811251c:	b580      	push	{r7, lr}
 811251e:	b084      	sub	sp, #16
 8112520:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8112522:	2300      	movs	r3, #0
 8112524:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8112526:	4b12      	ldr	r3, [pc, #72]	@ (8112570 <ip_reass_tmr+0x54>)
 8112528:	681b      	ldr	r3, [r3, #0]
 811252a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 811252c:	e018      	b.n	8112560 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 811252e:	68fb      	ldr	r3, [r7, #12]
 8112530:	7fdb      	ldrb	r3, [r3, #31]
 8112532:	2b00      	cmp	r3, #0
 8112534:	d00b      	beq.n	811254e <ip_reass_tmr+0x32>
      r->timer--;
 8112536:	68fb      	ldr	r3, [r7, #12]
 8112538:	7fdb      	ldrb	r3, [r3, #31]
 811253a:	3b01      	subs	r3, #1
 811253c:	b2da      	uxtb	r2, r3
 811253e:	68fb      	ldr	r3, [r7, #12]
 8112540:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8112542:	68fb      	ldr	r3, [r7, #12]
 8112544:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8112546:	68fb      	ldr	r3, [r7, #12]
 8112548:	681b      	ldr	r3, [r3, #0]
 811254a:	60fb      	str	r3, [r7, #12]
 811254c:	e008      	b.n	8112560 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 811254e:	68fb      	ldr	r3, [r7, #12]
 8112550:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8112552:	68fb      	ldr	r3, [r7, #12]
 8112554:	681b      	ldr	r3, [r3, #0]
 8112556:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8112558:	68b9      	ldr	r1, [r7, #8]
 811255a:	6878      	ldr	r0, [r7, #4]
 811255c:	f000 f80a 	bl	8112574 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8112560:	68fb      	ldr	r3, [r7, #12]
 8112562:	2b00      	cmp	r3, #0
 8112564:	d1e3      	bne.n	811252e <ip_reass_tmr+0x12>
    }
  }
}
 8112566:	bf00      	nop
 8112568:	bf00      	nop
 811256a:	3710      	adds	r7, #16
 811256c:	46bd      	mov	sp, r7
 811256e:	bd80      	pop	{r7, pc}
 8112570:	1000b260 	.word	0x1000b260

08112574 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8112574:	b580      	push	{r7, lr}
 8112576:	b088      	sub	sp, #32
 8112578:	af00      	add	r7, sp, #0
 811257a:	6078      	str	r0, [r7, #4]
 811257c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 811257e:	2300      	movs	r3, #0
 8112580:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8112582:	683a      	ldr	r2, [r7, #0]
 8112584:	687b      	ldr	r3, [r7, #4]
 8112586:	429a      	cmp	r2, r3
 8112588:	d105      	bne.n	8112596 <ip_reass_free_complete_datagram+0x22>
 811258a:	4b45      	ldr	r3, [pc, #276]	@ (81126a0 <ip_reass_free_complete_datagram+0x12c>)
 811258c:	22ab      	movs	r2, #171	@ 0xab
 811258e:	4945      	ldr	r1, [pc, #276]	@ (81126a4 <ip_reass_free_complete_datagram+0x130>)
 8112590:	4845      	ldr	r0, [pc, #276]	@ (81126a8 <ip_reass_free_complete_datagram+0x134>)
 8112592:	f009 fc5b 	bl	811be4c <iprintf>
  if (prev != NULL) {
 8112596:	683b      	ldr	r3, [r7, #0]
 8112598:	2b00      	cmp	r3, #0
 811259a:	d00a      	beq.n	81125b2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 811259c:	683b      	ldr	r3, [r7, #0]
 811259e:	681b      	ldr	r3, [r3, #0]
 81125a0:	687a      	ldr	r2, [r7, #4]
 81125a2:	429a      	cmp	r2, r3
 81125a4:	d005      	beq.n	81125b2 <ip_reass_free_complete_datagram+0x3e>
 81125a6:	4b3e      	ldr	r3, [pc, #248]	@ (81126a0 <ip_reass_free_complete_datagram+0x12c>)
 81125a8:	22ad      	movs	r2, #173	@ 0xad
 81125aa:	4940      	ldr	r1, [pc, #256]	@ (81126ac <ip_reass_free_complete_datagram+0x138>)
 81125ac:	483e      	ldr	r0, [pc, #248]	@ (81126a8 <ip_reass_free_complete_datagram+0x134>)
 81125ae:	f009 fc4d 	bl	811be4c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 81125b2:	687b      	ldr	r3, [r7, #4]
 81125b4:	685b      	ldr	r3, [r3, #4]
 81125b6:	685b      	ldr	r3, [r3, #4]
 81125b8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 81125ba:	697b      	ldr	r3, [r7, #20]
 81125bc:	889b      	ldrh	r3, [r3, #4]
 81125be:	b29b      	uxth	r3, r3
 81125c0:	2b00      	cmp	r3, #0
 81125c2:	d12a      	bne.n	811261a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 81125c4:	687b      	ldr	r3, [r7, #4]
 81125c6:	685b      	ldr	r3, [r3, #4]
 81125c8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 81125ca:	697b      	ldr	r3, [r7, #20]
 81125cc:	681a      	ldr	r2, [r3, #0]
 81125ce:	687b      	ldr	r3, [r7, #4]
 81125d0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 81125d2:	69bb      	ldr	r3, [r7, #24]
 81125d4:	6858      	ldr	r0, [r3, #4]
 81125d6:	687b      	ldr	r3, [r7, #4]
 81125d8:	3308      	adds	r3, #8
 81125da:	2214      	movs	r2, #20
 81125dc:	4619      	mov	r1, r3
 81125de:	f009 fde6 	bl	811c1ae <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 81125e2:	2101      	movs	r1, #1
 81125e4:	69b8      	ldr	r0, [r7, #24]
 81125e6:	f7ff fb69 	bl	8111cbc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 81125ea:	69b8      	ldr	r0, [r7, #24]
 81125ec:	f002 f9fa 	bl	81149e4 <pbuf_clen>
 81125f0:	4603      	mov	r3, r0
 81125f2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 81125f4:	8bfa      	ldrh	r2, [r7, #30]
 81125f6:	8a7b      	ldrh	r3, [r7, #18]
 81125f8:	4413      	add	r3, r2
 81125fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81125fe:	db05      	blt.n	811260c <ip_reass_free_complete_datagram+0x98>
 8112600:	4b27      	ldr	r3, [pc, #156]	@ (81126a0 <ip_reass_free_complete_datagram+0x12c>)
 8112602:	22bc      	movs	r2, #188	@ 0xbc
 8112604:	492a      	ldr	r1, [pc, #168]	@ (81126b0 <ip_reass_free_complete_datagram+0x13c>)
 8112606:	4828      	ldr	r0, [pc, #160]	@ (81126a8 <ip_reass_free_complete_datagram+0x134>)
 8112608:	f009 fc20 	bl	811be4c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 811260c:	8bfa      	ldrh	r2, [r7, #30]
 811260e:	8a7b      	ldrh	r3, [r7, #18]
 8112610:	4413      	add	r3, r2
 8112612:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8112614:	69b8      	ldr	r0, [r7, #24]
 8112616:	f002 f957 	bl	81148c8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 811261a:	687b      	ldr	r3, [r7, #4]
 811261c:	685b      	ldr	r3, [r3, #4]
 811261e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8112620:	e01f      	b.n	8112662 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8112622:	69bb      	ldr	r3, [r7, #24]
 8112624:	685b      	ldr	r3, [r3, #4]
 8112626:	617b      	str	r3, [r7, #20]
    pcur = p;
 8112628:	69bb      	ldr	r3, [r7, #24]
 811262a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 811262c:	697b      	ldr	r3, [r7, #20]
 811262e:	681b      	ldr	r3, [r3, #0]
 8112630:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8112632:	68f8      	ldr	r0, [r7, #12]
 8112634:	f002 f9d6 	bl	81149e4 <pbuf_clen>
 8112638:	4603      	mov	r3, r0
 811263a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 811263c:	8bfa      	ldrh	r2, [r7, #30]
 811263e:	8a7b      	ldrh	r3, [r7, #18]
 8112640:	4413      	add	r3, r2
 8112642:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8112646:	db05      	blt.n	8112654 <ip_reass_free_complete_datagram+0xe0>
 8112648:	4b15      	ldr	r3, [pc, #84]	@ (81126a0 <ip_reass_free_complete_datagram+0x12c>)
 811264a:	22cc      	movs	r2, #204	@ 0xcc
 811264c:	4918      	ldr	r1, [pc, #96]	@ (81126b0 <ip_reass_free_complete_datagram+0x13c>)
 811264e:	4816      	ldr	r0, [pc, #88]	@ (81126a8 <ip_reass_free_complete_datagram+0x134>)
 8112650:	f009 fbfc 	bl	811be4c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8112654:	8bfa      	ldrh	r2, [r7, #30]
 8112656:	8a7b      	ldrh	r3, [r7, #18]
 8112658:	4413      	add	r3, r2
 811265a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 811265c:	68f8      	ldr	r0, [r7, #12]
 811265e:	f002 f933 	bl	81148c8 <pbuf_free>
  while (p != NULL) {
 8112662:	69bb      	ldr	r3, [r7, #24]
 8112664:	2b00      	cmp	r3, #0
 8112666:	d1dc      	bne.n	8112622 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8112668:	6839      	ldr	r1, [r7, #0]
 811266a:	6878      	ldr	r0, [r7, #4]
 811266c:	f000 f8c2 	bl	81127f4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8112670:	4b10      	ldr	r3, [pc, #64]	@ (81126b4 <ip_reass_free_complete_datagram+0x140>)
 8112672:	881b      	ldrh	r3, [r3, #0]
 8112674:	8bfa      	ldrh	r2, [r7, #30]
 8112676:	429a      	cmp	r2, r3
 8112678:	d905      	bls.n	8112686 <ip_reass_free_complete_datagram+0x112>
 811267a:	4b09      	ldr	r3, [pc, #36]	@ (81126a0 <ip_reass_free_complete_datagram+0x12c>)
 811267c:	22d2      	movs	r2, #210	@ 0xd2
 811267e:	490e      	ldr	r1, [pc, #56]	@ (81126b8 <ip_reass_free_complete_datagram+0x144>)
 8112680:	4809      	ldr	r0, [pc, #36]	@ (81126a8 <ip_reass_free_complete_datagram+0x134>)
 8112682:	f009 fbe3 	bl	811be4c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8112686:	4b0b      	ldr	r3, [pc, #44]	@ (81126b4 <ip_reass_free_complete_datagram+0x140>)
 8112688:	881a      	ldrh	r2, [r3, #0]
 811268a:	8bfb      	ldrh	r3, [r7, #30]
 811268c:	1ad3      	subs	r3, r2, r3
 811268e:	b29a      	uxth	r2, r3
 8112690:	4b08      	ldr	r3, [pc, #32]	@ (81126b4 <ip_reass_free_complete_datagram+0x140>)
 8112692:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8112694:	8bfb      	ldrh	r3, [r7, #30]
}
 8112696:	4618      	mov	r0, r3
 8112698:	3720      	adds	r7, #32
 811269a:	46bd      	mov	sp, r7
 811269c:	bd80      	pop	{r7, pc}
 811269e:	bf00      	nop
 81126a0:	0811d2ec 	.word	0x0811d2ec
 81126a4:	0811d364 	.word	0x0811d364
 81126a8:	0811d370 	.word	0x0811d370
 81126ac:	0811d398 	.word	0x0811d398
 81126b0:	0811d3ac 	.word	0x0811d3ac
 81126b4:	1000b264 	.word	0x1000b264
 81126b8:	0811d3cc 	.word	0x0811d3cc

081126bc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 81126bc:	b580      	push	{r7, lr}
 81126be:	b08a      	sub	sp, #40	@ 0x28
 81126c0:	af00      	add	r7, sp, #0
 81126c2:	6078      	str	r0, [r7, #4]
 81126c4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 81126c6:	2300      	movs	r3, #0
 81126c8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 81126ca:	2300      	movs	r3, #0
 81126cc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 81126ce:	2300      	movs	r3, #0
 81126d0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 81126d2:	2300      	movs	r3, #0
 81126d4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 81126d6:	2300      	movs	r3, #0
 81126d8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 81126da:	4b28      	ldr	r3, [pc, #160]	@ (811277c <ip_reass_remove_oldest_datagram+0xc0>)
 81126dc:	681b      	ldr	r3, [r3, #0]
 81126de:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 81126e0:	e030      	b.n	8112744 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 81126e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81126e4:	695a      	ldr	r2, [r3, #20]
 81126e6:	687b      	ldr	r3, [r7, #4]
 81126e8:	68db      	ldr	r3, [r3, #12]
 81126ea:	429a      	cmp	r2, r3
 81126ec:	d10c      	bne.n	8112708 <ip_reass_remove_oldest_datagram+0x4c>
 81126ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81126f0:	699a      	ldr	r2, [r3, #24]
 81126f2:	687b      	ldr	r3, [r7, #4]
 81126f4:	691b      	ldr	r3, [r3, #16]
 81126f6:	429a      	cmp	r2, r3
 81126f8:	d106      	bne.n	8112708 <ip_reass_remove_oldest_datagram+0x4c>
 81126fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81126fc:	899a      	ldrh	r2, [r3, #12]
 81126fe:	687b      	ldr	r3, [r7, #4]
 8112700:	889b      	ldrh	r3, [r3, #4]
 8112702:	b29b      	uxth	r3, r3
 8112704:	429a      	cmp	r2, r3
 8112706:	d014      	beq.n	8112732 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8112708:	693b      	ldr	r3, [r7, #16]
 811270a:	3301      	adds	r3, #1
 811270c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 811270e:	6a3b      	ldr	r3, [r7, #32]
 8112710:	2b00      	cmp	r3, #0
 8112712:	d104      	bne.n	811271e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8112714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112716:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8112718:	69fb      	ldr	r3, [r7, #28]
 811271a:	61bb      	str	r3, [r7, #24]
 811271c:	e009      	b.n	8112732 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 811271e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112720:	7fda      	ldrb	r2, [r3, #31]
 8112722:	6a3b      	ldr	r3, [r7, #32]
 8112724:	7fdb      	ldrb	r3, [r3, #31]
 8112726:	429a      	cmp	r2, r3
 8112728:	d803      	bhi.n	8112732 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 811272a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811272c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 811272e:	69fb      	ldr	r3, [r7, #28]
 8112730:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8112732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112734:	681b      	ldr	r3, [r3, #0]
 8112736:	2b00      	cmp	r3, #0
 8112738:	d001      	beq.n	811273e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 811273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811273c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 811273e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112740:	681b      	ldr	r3, [r3, #0]
 8112742:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8112744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112746:	2b00      	cmp	r3, #0
 8112748:	d1cb      	bne.n	81126e2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 811274a:	6a3b      	ldr	r3, [r7, #32]
 811274c:	2b00      	cmp	r3, #0
 811274e:	d008      	beq.n	8112762 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8112750:	69b9      	ldr	r1, [r7, #24]
 8112752:	6a38      	ldr	r0, [r7, #32]
 8112754:	f7ff ff0e 	bl	8112574 <ip_reass_free_complete_datagram>
 8112758:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 811275a:	697a      	ldr	r2, [r7, #20]
 811275c:	68fb      	ldr	r3, [r7, #12]
 811275e:	4413      	add	r3, r2
 8112760:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8112762:	697a      	ldr	r2, [r7, #20]
 8112764:	683b      	ldr	r3, [r7, #0]
 8112766:	429a      	cmp	r2, r3
 8112768:	da02      	bge.n	8112770 <ip_reass_remove_oldest_datagram+0xb4>
 811276a:	693b      	ldr	r3, [r7, #16]
 811276c:	2b01      	cmp	r3, #1
 811276e:	dcac      	bgt.n	81126ca <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8112770:	697b      	ldr	r3, [r7, #20]
}
 8112772:	4618      	mov	r0, r3
 8112774:	3728      	adds	r7, #40	@ 0x28
 8112776:	46bd      	mov	sp, r7
 8112778:	bd80      	pop	{r7, pc}
 811277a:	bf00      	nop
 811277c:	1000b260 	.word	0x1000b260

08112780 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8112780:	b580      	push	{r7, lr}
 8112782:	b084      	sub	sp, #16
 8112784:	af00      	add	r7, sp, #0
 8112786:	6078      	str	r0, [r7, #4]
 8112788:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 811278a:	2004      	movs	r0, #4
 811278c:	f001 f982 	bl	8113a94 <memp_malloc>
 8112790:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8112792:	68fb      	ldr	r3, [r7, #12]
 8112794:	2b00      	cmp	r3, #0
 8112796:	d110      	bne.n	81127ba <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8112798:	6839      	ldr	r1, [r7, #0]
 811279a:	6878      	ldr	r0, [r7, #4]
 811279c:	f7ff ff8e 	bl	81126bc <ip_reass_remove_oldest_datagram>
 81127a0:	4602      	mov	r2, r0
 81127a2:	683b      	ldr	r3, [r7, #0]
 81127a4:	4293      	cmp	r3, r2
 81127a6:	dc03      	bgt.n	81127b0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 81127a8:	2004      	movs	r0, #4
 81127aa:	f001 f973 	bl	8113a94 <memp_malloc>
 81127ae:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 81127b0:	68fb      	ldr	r3, [r7, #12]
 81127b2:	2b00      	cmp	r3, #0
 81127b4:	d101      	bne.n	81127ba <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 81127b6:	2300      	movs	r3, #0
 81127b8:	e016      	b.n	81127e8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 81127ba:	2220      	movs	r2, #32
 81127bc:	2100      	movs	r1, #0
 81127be:	68f8      	ldr	r0, [r7, #12]
 81127c0:	f009 fbc3 	bl	811bf4a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 81127c4:	68fb      	ldr	r3, [r7, #12]
 81127c6:	220f      	movs	r2, #15
 81127c8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 81127ca:	4b09      	ldr	r3, [pc, #36]	@ (81127f0 <ip_reass_enqueue_new_datagram+0x70>)
 81127cc:	681a      	ldr	r2, [r3, #0]
 81127ce:	68fb      	ldr	r3, [r7, #12]
 81127d0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 81127d2:	4a07      	ldr	r2, [pc, #28]	@ (81127f0 <ip_reass_enqueue_new_datagram+0x70>)
 81127d4:	68fb      	ldr	r3, [r7, #12]
 81127d6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 81127d8:	68fb      	ldr	r3, [r7, #12]
 81127da:	3308      	adds	r3, #8
 81127dc:	2214      	movs	r2, #20
 81127de:	6879      	ldr	r1, [r7, #4]
 81127e0:	4618      	mov	r0, r3
 81127e2:	f009 fce4 	bl	811c1ae <memcpy>
  return ipr;
 81127e6:	68fb      	ldr	r3, [r7, #12]
}
 81127e8:	4618      	mov	r0, r3
 81127ea:	3710      	adds	r7, #16
 81127ec:	46bd      	mov	sp, r7
 81127ee:	bd80      	pop	{r7, pc}
 81127f0:	1000b260 	.word	0x1000b260

081127f4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 81127f4:	b580      	push	{r7, lr}
 81127f6:	b082      	sub	sp, #8
 81127f8:	af00      	add	r7, sp, #0
 81127fa:	6078      	str	r0, [r7, #4]
 81127fc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 81127fe:	4b10      	ldr	r3, [pc, #64]	@ (8112840 <ip_reass_dequeue_datagram+0x4c>)
 8112800:	681b      	ldr	r3, [r3, #0]
 8112802:	687a      	ldr	r2, [r7, #4]
 8112804:	429a      	cmp	r2, r3
 8112806:	d104      	bne.n	8112812 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8112808:	687b      	ldr	r3, [r7, #4]
 811280a:	681b      	ldr	r3, [r3, #0]
 811280c:	4a0c      	ldr	r2, [pc, #48]	@ (8112840 <ip_reass_dequeue_datagram+0x4c>)
 811280e:	6013      	str	r3, [r2, #0]
 8112810:	e00d      	b.n	811282e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8112812:	683b      	ldr	r3, [r7, #0]
 8112814:	2b00      	cmp	r3, #0
 8112816:	d106      	bne.n	8112826 <ip_reass_dequeue_datagram+0x32>
 8112818:	4b0a      	ldr	r3, [pc, #40]	@ (8112844 <ip_reass_dequeue_datagram+0x50>)
 811281a:	f240 1245 	movw	r2, #325	@ 0x145
 811281e:	490a      	ldr	r1, [pc, #40]	@ (8112848 <ip_reass_dequeue_datagram+0x54>)
 8112820:	480a      	ldr	r0, [pc, #40]	@ (811284c <ip_reass_dequeue_datagram+0x58>)
 8112822:	f009 fb13 	bl	811be4c <iprintf>
    prev->next = ipr->next;
 8112826:	687b      	ldr	r3, [r7, #4]
 8112828:	681a      	ldr	r2, [r3, #0]
 811282a:	683b      	ldr	r3, [r7, #0]
 811282c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 811282e:	6879      	ldr	r1, [r7, #4]
 8112830:	2004      	movs	r0, #4
 8112832:	f001 f9a5 	bl	8113b80 <memp_free>
}
 8112836:	bf00      	nop
 8112838:	3708      	adds	r7, #8
 811283a:	46bd      	mov	sp, r7
 811283c:	bd80      	pop	{r7, pc}
 811283e:	bf00      	nop
 8112840:	1000b260 	.word	0x1000b260
 8112844:	0811d2ec 	.word	0x0811d2ec
 8112848:	0811d3f0 	.word	0x0811d3f0
 811284c:	0811d370 	.word	0x0811d370

08112850 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8112850:	b580      	push	{r7, lr}
 8112852:	b08c      	sub	sp, #48	@ 0x30
 8112854:	af00      	add	r7, sp, #0
 8112856:	60f8      	str	r0, [r7, #12]
 8112858:	60b9      	str	r1, [r7, #8]
 811285a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 811285c:	2300      	movs	r3, #0
 811285e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8112860:	2301      	movs	r3, #1
 8112862:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8112864:	68bb      	ldr	r3, [r7, #8]
 8112866:	685b      	ldr	r3, [r3, #4]
 8112868:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 811286a:	69fb      	ldr	r3, [r7, #28]
 811286c:	885b      	ldrh	r3, [r3, #2]
 811286e:	b29b      	uxth	r3, r3
 8112870:	4618      	mov	r0, r3
 8112872:	f7fe f8a3 	bl	81109bc <lwip_htons>
 8112876:	4603      	mov	r3, r0
 8112878:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 811287a:	69fb      	ldr	r3, [r7, #28]
 811287c:	781b      	ldrb	r3, [r3, #0]
 811287e:	f003 030f 	and.w	r3, r3, #15
 8112882:	b2db      	uxtb	r3, r3
 8112884:	009b      	lsls	r3, r3, #2
 8112886:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8112888:	7e7b      	ldrb	r3, [r7, #25]
 811288a:	b29b      	uxth	r3, r3
 811288c:	8b7a      	ldrh	r2, [r7, #26]
 811288e:	429a      	cmp	r2, r3
 8112890:	d202      	bcs.n	8112898 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8112892:	f04f 33ff 	mov.w	r3, #4294967295
 8112896:	e135      	b.n	8112b04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8112898:	7e7b      	ldrb	r3, [r7, #25]
 811289a:	b29b      	uxth	r3, r3
 811289c:	8b7a      	ldrh	r2, [r7, #26]
 811289e:	1ad3      	subs	r3, r2, r3
 81128a0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 81128a2:	69fb      	ldr	r3, [r7, #28]
 81128a4:	88db      	ldrh	r3, [r3, #6]
 81128a6:	b29b      	uxth	r3, r3
 81128a8:	4618      	mov	r0, r3
 81128aa:	f7fe f887 	bl	81109bc <lwip_htons>
 81128ae:	4603      	mov	r3, r0
 81128b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81128b4:	b29b      	uxth	r3, r3
 81128b6:	00db      	lsls	r3, r3, #3
 81128b8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 81128ba:	68bb      	ldr	r3, [r7, #8]
 81128bc:	685b      	ldr	r3, [r3, #4]
 81128be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 81128c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81128c2:	2200      	movs	r2, #0
 81128c4:	701a      	strb	r2, [r3, #0]
 81128c6:	2200      	movs	r2, #0
 81128c8:	705a      	strb	r2, [r3, #1]
 81128ca:	2200      	movs	r2, #0
 81128cc:	709a      	strb	r2, [r3, #2]
 81128ce:	2200      	movs	r2, #0
 81128d0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 81128d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81128d4:	8afa      	ldrh	r2, [r7, #22]
 81128d6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 81128d8:	8afa      	ldrh	r2, [r7, #22]
 81128da:	8b7b      	ldrh	r3, [r7, #26]
 81128dc:	4413      	add	r3, r2
 81128de:	b29a      	uxth	r2, r3
 81128e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81128e2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 81128e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81128e6:	88db      	ldrh	r3, [r3, #6]
 81128e8:	b29b      	uxth	r3, r3
 81128ea:	8afa      	ldrh	r2, [r7, #22]
 81128ec:	429a      	cmp	r2, r3
 81128ee:	d902      	bls.n	81128f6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 81128f0:	f04f 33ff 	mov.w	r3, #4294967295
 81128f4:	e106      	b.n	8112b04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 81128f6:	68fb      	ldr	r3, [r7, #12]
 81128f8:	685b      	ldr	r3, [r3, #4]
 81128fa:	627b      	str	r3, [r7, #36]	@ 0x24
 81128fc:	e068      	b.n	81129d0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 81128fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112900:	685b      	ldr	r3, [r3, #4]
 8112902:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8112904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112906:	889b      	ldrh	r3, [r3, #4]
 8112908:	b29a      	uxth	r2, r3
 811290a:	693b      	ldr	r3, [r7, #16]
 811290c:	889b      	ldrh	r3, [r3, #4]
 811290e:	b29b      	uxth	r3, r3
 8112910:	429a      	cmp	r2, r3
 8112912:	d235      	bcs.n	8112980 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8112914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112916:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8112918:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 811291a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811291c:	2b00      	cmp	r3, #0
 811291e:	d020      	beq.n	8112962 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8112920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112922:	889b      	ldrh	r3, [r3, #4]
 8112924:	b29a      	uxth	r2, r3
 8112926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112928:	88db      	ldrh	r3, [r3, #6]
 811292a:	b29b      	uxth	r3, r3
 811292c:	429a      	cmp	r2, r3
 811292e:	d307      	bcc.n	8112940 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8112930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112932:	88db      	ldrh	r3, [r3, #6]
 8112934:	b29a      	uxth	r2, r3
 8112936:	693b      	ldr	r3, [r7, #16]
 8112938:	889b      	ldrh	r3, [r3, #4]
 811293a:	b29b      	uxth	r3, r3
 811293c:	429a      	cmp	r2, r3
 811293e:	d902      	bls.n	8112946 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8112940:	f04f 33ff 	mov.w	r3, #4294967295
 8112944:	e0de      	b.n	8112b04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8112946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112948:	68ba      	ldr	r2, [r7, #8]
 811294a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 811294c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811294e:	88db      	ldrh	r3, [r3, #6]
 8112950:	b29a      	uxth	r2, r3
 8112952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112954:	889b      	ldrh	r3, [r3, #4]
 8112956:	b29b      	uxth	r3, r3
 8112958:	429a      	cmp	r2, r3
 811295a:	d03d      	beq.n	81129d8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 811295c:	2300      	movs	r3, #0
 811295e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8112960:	e03a      	b.n	81129d8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8112962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112964:	88db      	ldrh	r3, [r3, #6]
 8112966:	b29a      	uxth	r2, r3
 8112968:	693b      	ldr	r3, [r7, #16]
 811296a:	889b      	ldrh	r3, [r3, #4]
 811296c:	b29b      	uxth	r3, r3
 811296e:	429a      	cmp	r2, r3
 8112970:	d902      	bls.n	8112978 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8112972:	f04f 33ff 	mov.w	r3, #4294967295
 8112976:	e0c5      	b.n	8112b04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8112978:	68fb      	ldr	r3, [r7, #12]
 811297a:	68ba      	ldr	r2, [r7, #8]
 811297c:	605a      	str	r2, [r3, #4]
      break;
 811297e:	e02b      	b.n	81129d8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8112980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112982:	889b      	ldrh	r3, [r3, #4]
 8112984:	b29a      	uxth	r2, r3
 8112986:	693b      	ldr	r3, [r7, #16]
 8112988:	889b      	ldrh	r3, [r3, #4]
 811298a:	b29b      	uxth	r3, r3
 811298c:	429a      	cmp	r2, r3
 811298e:	d102      	bne.n	8112996 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8112990:	f04f 33ff 	mov.w	r3, #4294967295
 8112994:	e0b6      	b.n	8112b04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8112996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112998:	889b      	ldrh	r3, [r3, #4]
 811299a:	b29a      	uxth	r2, r3
 811299c:	693b      	ldr	r3, [r7, #16]
 811299e:	88db      	ldrh	r3, [r3, #6]
 81129a0:	b29b      	uxth	r3, r3
 81129a2:	429a      	cmp	r2, r3
 81129a4:	d202      	bcs.n	81129ac <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 81129a6:	f04f 33ff 	mov.w	r3, #4294967295
 81129aa:	e0ab      	b.n	8112b04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 81129ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81129ae:	2b00      	cmp	r3, #0
 81129b0:	d009      	beq.n	81129c6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 81129b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81129b4:	88db      	ldrh	r3, [r3, #6]
 81129b6:	b29a      	uxth	r2, r3
 81129b8:	693b      	ldr	r3, [r7, #16]
 81129ba:	889b      	ldrh	r3, [r3, #4]
 81129bc:	b29b      	uxth	r3, r3
 81129be:	429a      	cmp	r2, r3
 81129c0:	d001      	beq.n	81129c6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 81129c2:	2300      	movs	r3, #0
 81129c4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 81129c6:	693b      	ldr	r3, [r7, #16]
 81129c8:	681b      	ldr	r3, [r3, #0]
 81129ca:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 81129cc:	693b      	ldr	r3, [r7, #16]
 81129ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 81129d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81129d2:	2b00      	cmp	r3, #0
 81129d4:	d193      	bne.n	81128fe <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 81129d6:	e000      	b.n	81129da <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 81129d8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 81129da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81129dc:	2b00      	cmp	r3, #0
 81129de:	d12d      	bne.n	8112a3c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 81129e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81129e2:	2b00      	cmp	r3, #0
 81129e4:	d01c      	beq.n	8112a20 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 81129e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81129e8:	88db      	ldrh	r3, [r3, #6]
 81129ea:	b29a      	uxth	r2, r3
 81129ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81129ee:	889b      	ldrh	r3, [r3, #4]
 81129f0:	b29b      	uxth	r3, r3
 81129f2:	429a      	cmp	r2, r3
 81129f4:	d906      	bls.n	8112a04 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 81129f6:	4b45      	ldr	r3, [pc, #276]	@ (8112b0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 81129f8:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 81129fc:	4944      	ldr	r1, [pc, #272]	@ (8112b10 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 81129fe:	4845      	ldr	r0, [pc, #276]	@ (8112b14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8112a00:	f009 fa24 	bl	811be4c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8112a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112a06:	68ba      	ldr	r2, [r7, #8]
 8112a08:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8112a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112a0c:	88db      	ldrh	r3, [r3, #6]
 8112a0e:	b29a      	uxth	r2, r3
 8112a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112a12:	889b      	ldrh	r3, [r3, #4]
 8112a14:	b29b      	uxth	r3, r3
 8112a16:	429a      	cmp	r2, r3
 8112a18:	d010      	beq.n	8112a3c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8112a1a:	2300      	movs	r3, #0
 8112a1c:	623b      	str	r3, [r7, #32]
 8112a1e:	e00d      	b.n	8112a3c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8112a20:	68fb      	ldr	r3, [r7, #12]
 8112a22:	685b      	ldr	r3, [r3, #4]
 8112a24:	2b00      	cmp	r3, #0
 8112a26:	d006      	beq.n	8112a36 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8112a28:	4b38      	ldr	r3, [pc, #224]	@ (8112b0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8112a2a:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8112a2e:	493a      	ldr	r1, [pc, #232]	@ (8112b18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8112a30:	4838      	ldr	r0, [pc, #224]	@ (8112b14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8112a32:	f009 fa0b 	bl	811be4c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8112a36:	68fb      	ldr	r3, [r7, #12]
 8112a38:	68ba      	ldr	r2, [r7, #8]
 8112a3a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8112a3c:	687b      	ldr	r3, [r7, #4]
 8112a3e:	2b00      	cmp	r3, #0
 8112a40:	d105      	bne.n	8112a4e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8112a42:	68fb      	ldr	r3, [r7, #12]
 8112a44:	7f9b      	ldrb	r3, [r3, #30]
 8112a46:	f003 0301 	and.w	r3, r3, #1
 8112a4a:	2b00      	cmp	r3, #0
 8112a4c:	d059      	beq.n	8112b02 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8112a4e:	6a3b      	ldr	r3, [r7, #32]
 8112a50:	2b00      	cmp	r3, #0
 8112a52:	d04f      	beq.n	8112af4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8112a54:	68fb      	ldr	r3, [r7, #12]
 8112a56:	685b      	ldr	r3, [r3, #4]
 8112a58:	2b00      	cmp	r3, #0
 8112a5a:	d006      	beq.n	8112a6a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8112a5c:	68fb      	ldr	r3, [r7, #12]
 8112a5e:	685b      	ldr	r3, [r3, #4]
 8112a60:	685b      	ldr	r3, [r3, #4]
 8112a62:	889b      	ldrh	r3, [r3, #4]
 8112a64:	b29b      	uxth	r3, r3
 8112a66:	2b00      	cmp	r3, #0
 8112a68:	d002      	beq.n	8112a70 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8112a6a:	2300      	movs	r3, #0
 8112a6c:	623b      	str	r3, [r7, #32]
 8112a6e:	e041      	b.n	8112af4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8112a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112a72:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8112a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112a76:	681b      	ldr	r3, [r3, #0]
 8112a78:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8112a7a:	e012      	b.n	8112aa2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8112a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112a7e:	685b      	ldr	r3, [r3, #4]
 8112a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8112a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112a84:	88db      	ldrh	r3, [r3, #6]
 8112a86:	b29a      	uxth	r2, r3
 8112a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112a8a:	889b      	ldrh	r3, [r3, #4]
 8112a8c:	b29b      	uxth	r3, r3
 8112a8e:	429a      	cmp	r2, r3
 8112a90:	d002      	beq.n	8112a98 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8112a92:	2300      	movs	r3, #0
 8112a94:	623b      	str	r3, [r7, #32]
            break;
 8112a96:	e007      	b.n	8112aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8112a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8112a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112a9e:	681b      	ldr	r3, [r3, #0]
 8112aa0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8112aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112aa4:	2b00      	cmp	r3, #0
 8112aa6:	d1e9      	bne.n	8112a7c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8112aa8:	6a3b      	ldr	r3, [r7, #32]
 8112aaa:	2b00      	cmp	r3, #0
 8112aac:	d022      	beq.n	8112af4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8112aae:	68fb      	ldr	r3, [r7, #12]
 8112ab0:	685b      	ldr	r3, [r3, #4]
 8112ab2:	2b00      	cmp	r3, #0
 8112ab4:	d106      	bne.n	8112ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8112ab6:	4b15      	ldr	r3, [pc, #84]	@ (8112b0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8112ab8:	f240 12df 	movw	r2, #479	@ 0x1df
 8112abc:	4917      	ldr	r1, [pc, #92]	@ (8112b1c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8112abe:	4815      	ldr	r0, [pc, #84]	@ (8112b14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8112ac0:	f009 f9c4 	bl	811be4c <iprintf>
          LWIP_ASSERT("sanity check",
 8112ac4:	68fb      	ldr	r3, [r7, #12]
 8112ac6:	685b      	ldr	r3, [r3, #4]
 8112ac8:	685b      	ldr	r3, [r3, #4]
 8112aca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8112acc:	429a      	cmp	r2, r3
 8112ace:	d106      	bne.n	8112ade <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8112ad0:	4b0e      	ldr	r3, [pc, #56]	@ (8112b0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8112ad2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8112ad6:	4911      	ldr	r1, [pc, #68]	@ (8112b1c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8112ad8:	480e      	ldr	r0, [pc, #56]	@ (8112b14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8112ada:	f009 f9b7 	bl	811be4c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8112ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112ae0:	681b      	ldr	r3, [r3, #0]
 8112ae2:	2b00      	cmp	r3, #0
 8112ae4:	d006      	beq.n	8112af4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8112ae6:	4b09      	ldr	r3, [pc, #36]	@ (8112b0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8112ae8:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8112aec:	490c      	ldr	r1, [pc, #48]	@ (8112b20 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8112aee:	4809      	ldr	r0, [pc, #36]	@ (8112b14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8112af0:	f009 f9ac 	bl	811be4c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8112af4:	6a3b      	ldr	r3, [r7, #32]
 8112af6:	2b00      	cmp	r3, #0
 8112af8:	bf14      	ite	ne
 8112afa:	2301      	movne	r3, #1
 8112afc:	2300      	moveq	r3, #0
 8112afe:	b2db      	uxtb	r3, r3
 8112b00:	e000      	b.n	8112b04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8112b02:	2300      	movs	r3, #0
}
 8112b04:	4618      	mov	r0, r3
 8112b06:	3730      	adds	r7, #48	@ 0x30
 8112b08:	46bd      	mov	sp, r7
 8112b0a:	bd80      	pop	{r7, pc}
 8112b0c:	0811d2ec 	.word	0x0811d2ec
 8112b10:	0811d40c 	.word	0x0811d40c
 8112b14:	0811d370 	.word	0x0811d370
 8112b18:	0811d42c 	.word	0x0811d42c
 8112b1c:	0811d464 	.word	0x0811d464
 8112b20:	0811d474 	.word	0x0811d474

08112b24 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8112b24:	b580      	push	{r7, lr}
 8112b26:	b08e      	sub	sp, #56	@ 0x38
 8112b28:	af00      	add	r7, sp, #0
 8112b2a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8112b2c:	687b      	ldr	r3, [r7, #4]
 8112b2e:	685b      	ldr	r3, [r3, #4]
 8112b30:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8112b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112b34:	781b      	ldrb	r3, [r3, #0]
 8112b36:	f003 030f 	and.w	r3, r3, #15
 8112b3a:	b2db      	uxtb	r3, r3
 8112b3c:	009b      	lsls	r3, r3, #2
 8112b3e:	b2db      	uxtb	r3, r3
 8112b40:	2b14      	cmp	r3, #20
 8112b42:	f040 8171 	bne.w	8112e28 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8112b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112b48:	88db      	ldrh	r3, [r3, #6]
 8112b4a:	b29b      	uxth	r3, r3
 8112b4c:	4618      	mov	r0, r3
 8112b4e:	f7fd ff35 	bl	81109bc <lwip_htons>
 8112b52:	4603      	mov	r3, r0
 8112b54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8112b58:	b29b      	uxth	r3, r3
 8112b5a:	00db      	lsls	r3, r3, #3
 8112b5c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8112b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112b60:	885b      	ldrh	r3, [r3, #2]
 8112b62:	b29b      	uxth	r3, r3
 8112b64:	4618      	mov	r0, r3
 8112b66:	f7fd ff29 	bl	81109bc <lwip_htons>
 8112b6a:	4603      	mov	r3, r0
 8112b6c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8112b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112b70:	781b      	ldrb	r3, [r3, #0]
 8112b72:	f003 030f 	and.w	r3, r3, #15
 8112b76:	b2db      	uxtb	r3, r3
 8112b78:	009b      	lsls	r3, r3, #2
 8112b7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8112b7e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8112b82:	b29b      	uxth	r3, r3
 8112b84:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8112b86:	429a      	cmp	r2, r3
 8112b88:	f0c0 8150 	bcc.w	8112e2c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8112b8c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8112b90:	b29b      	uxth	r3, r3
 8112b92:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8112b94:	1ad3      	subs	r3, r2, r3
 8112b96:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8112b98:	6878      	ldr	r0, [r7, #4]
 8112b9a:	f001 ff23 	bl	81149e4 <pbuf_clen>
 8112b9e:	4603      	mov	r3, r0
 8112ba0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8112ba2:	4b8c      	ldr	r3, [pc, #560]	@ (8112dd4 <ip4_reass+0x2b0>)
 8112ba4:	881b      	ldrh	r3, [r3, #0]
 8112ba6:	461a      	mov	r2, r3
 8112ba8:	8c3b      	ldrh	r3, [r7, #32]
 8112baa:	4413      	add	r3, r2
 8112bac:	2b0a      	cmp	r3, #10
 8112bae:	dd10      	ble.n	8112bd2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8112bb0:	8c3b      	ldrh	r3, [r7, #32]
 8112bb2:	4619      	mov	r1, r3
 8112bb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8112bb6:	f7ff fd81 	bl	81126bc <ip_reass_remove_oldest_datagram>
 8112bba:	4603      	mov	r3, r0
 8112bbc:	2b00      	cmp	r3, #0
 8112bbe:	f000 8137 	beq.w	8112e30 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8112bc2:	4b84      	ldr	r3, [pc, #528]	@ (8112dd4 <ip4_reass+0x2b0>)
 8112bc4:	881b      	ldrh	r3, [r3, #0]
 8112bc6:	461a      	mov	r2, r3
 8112bc8:	8c3b      	ldrh	r3, [r7, #32]
 8112bca:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8112bcc:	2b0a      	cmp	r3, #10
 8112bce:	f300 812f 	bgt.w	8112e30 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8112bd2:	4b81      	ldr	r3, [pc, #516]	@ (8112dd8 <ip4_reass+0x2b4>)
 8112bd4:	681b      	ldr	r3, [r3, #0]
 8112bd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8112bd8:	e015      	b.n	8112c06 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8112bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112bdc:	695a      	ldr	r2, [r3, #20]
 8112bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112be0:	68db      	ldr	r3, [r3, #12]
 8112be2:	429a      	cmp	r2, r3
 8112be4:	d10c      	bne.n	8112c00 <ip4_reass+0xdc>
 8112be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112be8:	699a      	ldr	r2, [r3, #24]
 8112bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112bec:	691b      	ldr	r3, [r3, #16]
 8112bee:	429a      	cmp	r2, r3
 8112bf0:	d106      	bne.n	8112c00 <ip4_reass+0xdc>
 8112bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112bf4:	899a      	ldrh	r2, [r3, #12]
 8112bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112bf8:	889b      	ldrh	r3, [r3, #4]
 8112bfa:	b29b      	uxth	r3, r3
 8112bfc:	429a      	cmp	r2, r3
 8112bfe:	d006      	beq.n	8112c0e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8112c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112c02:	681b      	ldr	r3, [r3, #0]
 8112c04:	633b      	str	r3, [r7, #48]	@ 0x30
 8112c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112c08:	2b00      	cmp	r3, #0
 8112c0a:	d1e6      	bne.n	8112bda <ip4_reass+0xb6>
 8112c0c:	e000      	b.n	8112c10 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8112c0e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8112c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112c12:	2b00      	cmp	r3, #0
 8112c14:	d109      	bne.n	8112c2a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8112c16:	8c3b      	ldrh	r3, [r7, #32]
 8112c18:	4619      	mov	r1, r3
 8112c1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8112c1c:	f7ff fdb0 	bl	8112780 <ip_reass_enqueue_new_datagram>
 8112c20:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8112c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112c24:	2b00      	cmp	r3, #0
 8112c26:	d11c      	bne.n	8112c62 <ip4_reass+0x13e>
      goto nullreturn;
 8112c28:	e105      	b.n	8112e36 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8112c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112c2c:	88db      	ldrh	r3, [r3, #6]
 8112c2e:	b29b      	uxth	r3, r3
 8112c30:	4618      	mov	r0, r3
 8112c32:	f7fd fec3 	bl	81109bc <lwip_htons>
 8112c36:	4603      	mov	r3, r0
 8112c38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8112c3c:	2b00      	cmp	r3, #0
 8112c3e:	d110      	bne.n	8112c62 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8112c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112c42:	89db      	ldrh	r3, [r3, #14]
 8112c44:	4618      	mov	r0, r3
 8112c46:	f7fd feb9 	bl	81109bc <lwip_htons>
 8112c4a:	4603      	mov	r3, r0
 8112c4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8112c50:	2b00      	cmp	r3, #0
 8112c52:	d006      	beq.n	8112c62 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8112c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112c56:	3308      	adds	r3, #8
 8112c58:	2214      	movs	r2, #20
 8112c5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8112c5c:	4618      	mov	r0, r3
 8112c5e:	f009 faa6 	bl	811c1ae <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8112c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112c64:	88db      	ldrh	r3, [r3, #6]
 8112c66:	b29b      	uxth	r3, r3
 8112c68:	f003 0320 	and.w	r3, r3, #32
 8112c6c:	2b00      	cmp	r3, #0
 8112c6e:	bf0c      	ite	eq
 8112c70:	2301      	moveq	r3, #1
 8112c72:	2300      	movne	r3, #0
 8112c74:	b2db      	uxtb	r3, r3
 8112c76:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8112c78:	69fb      	ldr	r3, [r7, #28]
 8112c7a:	2b00      	cmp	r3, #0
 8112c7c:	d00e      	beq.n	8112c9c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8112c7e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8112c80:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8112c82:	4413      	add	r3, r2
 8112c84:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8112c86:	8b7a      	ldrh	r2, [r7, #26]
 8112c88:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8112c8a:	429a      	cmp	r2, r3
 8112c8c:	f0c0 80a0 	bcc.w	8112dd0 <ip4_reass+0x2ac>
 8112c90:	8b7b      	ldrh	r3, [r7, #26]
 8112c92:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8112c96:	4293      	cmp	r3, r2
 8112c98:	f200 809a 	bhi.w	8112dd0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8112c9c:	69fa      	ldr	r2, [r7, #28]
 8112c9e:	6879      	ldr	r1, [r7, #4]
 8112ca0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8112ca2:	f7ff fdd5 	bl	8112850 <ip_reass_chain_frag_into_datagram_and_validate>
 8112ca6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8112ca8:	697b      	ldr	r3, [r7, #20]
 8112caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8112cae:	f000 809b 	beq.w	8112de8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8112cb2:	4b48      	ldr	r3, [pc, #288]	@ (8112dd4 <ip4_reass+0x2b0>)
 8112cb4:	881a      	ldrh	r2, [r3, #0]
 8112cb6:	8c3b      	ldrh	r3, [r7, #32]
 8112cb8:	4413      	add	r3, r2
 8112cba:	b29a      	uxth	r2, r3
 8112cbc:	4b45      	ldr	r3, [pc, #276]	@ (8112dd4 <ip4_reass+0x2b0>)
 8112cbe:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8112cc0:	69fb      	ldr	r3, [r7, #28]
 8112cc2:	2b00      	cmp	r3, #0
 8112cc4:	d00d      	beq.n	8112ce2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8112cc6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8112cc8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8112cca:	4413      	add	r3, r2
 8112ccc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8112cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112cd0:	8a7a      	ldrh	r2, [r7, #18]
 8112cd2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8112cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112cd6:	7f9b      	ldrb	r3, [r3, #30]
 8112cd8:	f043 0301 	orr.w	r3, r3, #1
 8112cdc:	b2da      	uxtb	r2, r3
 8112cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112ce0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8112ce2:	697b      	ldr	r3, [r7, #20]
 8112ce4:	2b01      	cmp	r3, #1
 8112ce6:	d171      	bne.n	8112dcc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8112ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112cea:	8b9b      	ldrh	r3, [r3, #28]
 8112cec:	3314      	adds	r3, #20
 8112cee:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8112cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112cf2:	685b      	ldr	r3, [r3, #4]
 8112cf4:	685b      	ldr	r3, [r3, #4]
 8112cf6:	681b      	ldr	r3, [r3, #0]
 8112cf8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8112cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112cfc:	685b      	ldr	r3, [r3, #4]
 8112cfe:	685b      	ldr	r3, [r3, #4]
 8112d00:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8112d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112d04:	3308      	adds	r3, #8
 8112d06:	2214      	movs	r2, #20
 8112d08:	4619      	mov	r1, r3
 8112d0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8112d0c:	f009 fa4f 	bl	811c1ae <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8112d10:	8a3b      	ldrh	r3, [r7, #16]
 8112d12:	4618      	mov	r0, r3
 8112d14:	f7fd fe52 	bl	81109bc <lwip_htons>
 8112d18:	4603      	mov	r3, r0
 8112d1a:	461a      	mov	r2, r3
 8112d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112d1e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8112d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112d22:	2200      	movs	r2, #0
 8112d24:	719a      	strb	r2, [r3, #6]
 8112d26:	2200      	movs	r2, #0
 8112d28:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8112d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8112d2c:	2200      	movs	r2, #0
 8112d2e:	729a      	strb	r2, [r3, #10]
 8112d30:	2200      	movs	r2, #0
 8112d32:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8112d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112d36:	685b      	ldr	r3, [r3, #4]
 8112d38:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8112d3a:	e00d      	b.n	8112d58 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8112d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8112d3e:	685b      	ldr	r3, [r3, #4]
 8112d40:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8112d42:	2114      	movs	r1, #20
 8112d44:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8112d46:	f001 fd39 	bl	81147bc <pbuf_remove_header>
      pbuf_cat(p, r);
 8112d4a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8112d4c:	6878      	ldr	r0, [r7, #4]
 8112d4e:	f001 fe89 	bl	8114a64 <pbuf_cat>
      r = iprh->next_pbuf;
 8112d52:	68fb      	ldr	r3, [r7, #12]
 8112d54:	681b      	ldr	r3, [r3, #0]
 8112d56:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8112d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8112d5a:	2b00      	cmp	r3, #0
 8112d5c:	d1ee      	bne.n	8112d3c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8112d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8112dd8 <ip4_reass+0x2b4>)
 8112d60:	681b      	ldr	r3, [r3, #0]
 8112d62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8112d64:	429a      	cmp	r2, r3
 8112d66:	d102      	bne.n	8112d6e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8112d68:	2300      	movs	r3, #0
 8112d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8112d6c:	e010      	b.n	8112d90 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8112d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8112dd8 <ip4_reass+0x2b4>)
 8112d70:	681b      	ldr	r3, [r3, #0]
 8112d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8112d74:	e007      	b.n	8112d86 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8112d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112d78:	681b      	ldr	r3, [r3, #0]
 8112d7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8112d7c:	429a      	cmp	r2, r3
 8112d7e:	d006      	beq.n	8112d8e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8112d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112d82:	681b      	ldr	r3, [r3, #0]
 8112d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8112d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8112d88:	2b00      	cmp	r3, #0
 8112d8a:	d1f4      	bne.n	8112d76 <ip4_reass+0x252>
 8112d8c:	e000      	b.n	8112d90 <ip4_reass+0x26c>
          break;
 8112d8e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8112d90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8112d92:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8112d94:	f7ff fd2e 	bl	81127f4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8112d98:	6878      	ldr	r0, [r7, #4]
 8112d9a:	f001 fe23 	bl	81149e4 <pbuf_clen>
 8112d9e:	4603      	mov	r3, r0
 8112da0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8112da2:	4b0c      	ldr	r3, [pc, #48]	@ (8112dd4 <ip4_reass+0x2b0>)
 8112da4:	881b      	ldrh	r3, [r3, #0]
 8112da6:	8c3a      	ldrh	r2, [r7, #32]
 8112da8:	429a      	cmp	r2, r3
 8112daa:	d906      	bls.n	8112dba <ip4_reass+0x296>
 8112dac:	4b0b      	ldr	r3, [pc, #44]	@ (8112ddc <ip4_reass+0x2b8>)
 8112dae:	f240 229b 	movw	r2, #667	@ 0x29b
 8112db2:	490b      	ldr	r1, [pc, #44]	@ (8112de0 <ip4_reass+0x2bc>)
 8112db4:	480b      	ldr	r0, [pc, #44]	@ (8112de4 <ip4_reass+0x2c0>)
 8112db6:	f009 f849 	bl	811be4c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8112dba:	4b06      	ldr	r3, [pc, #24]	@ (8112dd4 <ip4_reass+0x2b0>)
 8112dbc:	881a      	ldrh	r2, [r3, #0]
 8112dbe:	8c3b      	ldrh	r3, [r7, #32]
 8112dc0:	1ad3      	subs	r3, r2, r3
 8112dc2:	b29a      	uxth	r2, r3
 8112dc4:	4b03      	ldr	r3, [pc, #12]	@ (8112dd4 <ip4_reass+0x2b0>)
 8112dc6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8112dc8:	687b      	ldr	r3, [r7, #4]
 8112dca:	e038      	b.n	8112e3e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8112dcc:	2300      	movs	r3, #0
 8112dce:	e036      	b.n	8112e3e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8112dd0:	bf00      	nop
 8112dd2:	e00a      	b.n	8112dea <ip4_reass+0x2c6>
 8112dd4:	1000b264 	.word	0x1000b264
 8112dd8:	1000b260 	.word	0x1000b260
 8112ddc:	0811d2ec 	.word	0x0811d2ec
 8112de0:	0811d498 	.word	0x0811d498
 8112de4:	0811d370 	.word	0x0811d370
    goto nullreturn_ipr;
 8112de8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8112dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112dec:	2b00      	cmp	r3, #0
 8112dee:	d106      	bne.n	8112dfe <ip4_reass+0x2da>
 8112df0:	4b15      	ldr	r3, [pc, #84]	@ (8112e48 <ip4_reass+0x324>)
 8112df2:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8112df6:	4915      	ldr	r1, [pc, #84]	@ (8112e4c <ip4_reass+0x328>)
 8112df8:	4815      	ldr	r0, [pc, #84]	@ (8112e50 <ip4_reass+0x32c>)
 8112dfa:	f009 f827 	bl	811be4c <iprintf>
  if (ipr->p == NULL) {
 8112dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112e00:	685b      	ldr	r3, [r3, #4]
 8112e02:	2b00      	cmp	r3, #0
 8112e04:	d116      	bne.n	8112e34 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8112e06:	4b13      	ldr	r3, [pc, #76]	@ (8112e54 <ip4_reass+0x330>)
 8112e08:	681b      	ldr	r3, [r3, #0]
 8112e0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8112e0c:	429a      	cmp	r2, r3
 8112e0e:	d006      	beq.n	8112e1e <ip4_reass+0x2fa>
 8112e10:	4b0d      	ldr	r3, [pc, #52]	@ (8112e48 <ip4_reass+0x324>)
 8112e12:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8112e16:	4910      	ldr	r1, [pc, #64]	@ (8112e58 <ip4_reass+0x334>)
 8112e18:	480d      	ldr	r0, [pc, #52]	@ (8112e50 <ip4_reass+0x32c>)
 8112e1a:	f009 f817 	bl	811be4c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8112e1e:	2100      	movs	r1, #0
 8112e20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8112e22:	f7ff fce7 	bl	81127f4 <ip_reass_dequeue_datagram>
 8112e26:	e006      	b.n	8112e36 <ip4_reass+0x312>
    goto nullreturn;
 8112e28:	bf00      	nop
 8112e2a:	e004      	b.n	8112e36 <ip4_reass+0x312>
    goto nullreturn;
 8112e2c:	bf00      	nop
 8112e2e:	e002      	b.n	8112e36 <ip4_reass+0x312>
      goto nullreturn;
 8112e30:	bf00      	nop
 8112e32:	e000      	b.n	8112e36 <ip4_reass+0x312>
  }

nullreturn:
 8112e34:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8112e36:	6878      	ldr	r0, [r7, #4]
 8112e38:	f001 fd46 	bl	81148c8 <pbuf_free>
  return NULL;
 8112e3c:	2300      	movs	r3, #0
}
 8112e3e:	4618      	mov	r0, r3
 8112e40:	3738      	adds	r7, #56	@ 0x38
 8112e42:	46bd      	mov	sp, r7
 8112e44:	bd80      	pop	{r7, pc}
 8112e46:	bf00      	nop
 8112e48:	0811d2ec 	.word	0x0811d2ec
 8112e4c:	0811d4b4 	.word	0x0811d4b4
 8112e50:	0811d370 	.word	0x0811d370
 8112e54:	1000b260 	.word	0x1000b260
 8112e58:	0811d4c0 	.word	0x0811d4c0

08112e5c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8112e5c:	b580      	push	{r7, lr}
 8112e5e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8112e60:	2005      	movs	r0, #5
 8112e62:	f000 fe17 	bl	8113a94 <memp_malloc>
 8112e66:	4603      	mov	r3, r0
}
 8112e68:	4618      	mov	r0, r3
 8112e6a:	bd80      	pop	{r7, pc}

08112e6c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8112e6c:	b580      	push	{r7, lr}
 8112e6e:	b082      	sub	sp, #8
 8112e70:	af00      	add	r7, sp, #0
 8112e72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8112e74:	687b      	ldr	r3, [r7, #4]
 8112e76:	2b00      	cmp	r3, #0
 8112e78:	d106      	bne.n	8112e88 <ip_frag_free_pbuf_custom_ref+0x1c>
 8112e7a:	4b07      	ldr	r3, [pc, #28]	@ (8112e98 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8112e7c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8112e80:	4906      	ldr	r1, [pc, #24]	@ (8112e9c <ip_frag_free_pbuf_custom_ref+0x30>)
 8112e82:	4807      	ldr	r0, [pc, #28]	@ (8112ea0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8112e84:	f008 ffe2 	bl	811be4c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8112e88:	6879      	ldr	r1, [r7, #4]
 8112e8a:	2005      	movs	r0, #5
 8112e8c:	f000 fe78 	bl	8113b80 <memp_free>
}
 8112e90:	bf00      	nop
 8112e92:	3708      	adds	r7, #8
 8112e94:	46bd      	mov	sp, r7
 8112e96:	bd80      	pop	{r7, pc}
 8112e98:	0811d2ec 	.word	0x0811d2ec
 8112e9c:	0811d4e0 	.word	0x0811d4e0
 8112ea0:	0811d370 	.word	0x0811d370

08112ea4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8112ea4:	b580      	push	{r7, lr}
 8112ea6:	b084      	sub	sp, #16
 8112ea8:	af00      	add	r7, sp, #0
 8112eaa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8112eac:	687b      	ldr	r3, [r7, #4]
 8112eae:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8112eb0:	68fb      	ldr	r3, [r7, #12]
 8112eb2:	2b00      	cmp	r3, #0
 8112eb4:	d106      	bne.n	8112ec4 <ipfrag_free_pbuf_custom+0x20>
 8112eb6:	4b11      	ldr	r3, [pc, #68]	@ (8112efc <ipfrag_free_pbuf_custom+0x58>)
 8112eb8:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8112ebc:	4910      	ldr	r1, [pc, #64]	@ (8112f00 <ipfrag_free_pbuf_custom+0x5c>)
 8112ebe:	4811      	ldr	r0, [pc, #68]	@ (8112f04 <ipfrag_free_pbuf_custom+0x60>)
 8112ec0:	f008 ffc4 	bl	811be4c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8112ec4:	68fa      	ldr	r2, [r7, #12]
 8112ec6:	687b      	ldr	r3, [r7, #4]
 8112ec8:	429a      	cmp	r2, r3
 8112eca:	d006      	beq.n	8112eda <ipfrag_free_pbuf_custom+0x36>
 8112ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8112efc <ipfrag_free_pbuf_custom+0x58>)
 8112ece:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8112ed2:	490d      	ldr	r1, [pc, #52]	@ (8112f08 <ipfrag_free_pbuf_custom+0x64>)
 8112ed4:	480b      	ldr	r0, [pc, #44]	@ (8112f04 <ipfrag_free_pbuf_custom+0x60>)
 8112ed6:	f008 ffb9 	bl	811be4c <iprintf>
  if (pcr->original != NULL) {
 8112eda:	68fb      	ldr	r3, [r7, #12]
 8112edc:	695b      	ldr	r3, [r3, #20]
 8112ede:	2b00      	cmp	r3, #0
 8112ee0:	d004      	beq.n	8112eec <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8112ee2:	68fb      	ldr	r3, [r7, #12]
 8112ee4:	695b      	ldr	r3, [r3, #20]
 8112ee6:	4618      	mov	r0, r3
 8112ee8:	f001 fcee 	bl	81148c8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8112eec:	68f8      	ldr	r0, [r7, #12]
 8112eee:	f7ff ffbd 	bl	8112e6c <ip_frag_free_pbuf_custom_ref>
}
 8112ef2:	bf00      	nop
 8112ef4:	3710      	adds	r7, #16
 8112ef6:	46bd      	mov	sp, r7
 8112ef8:	bd80      	pop	{r7, pc}
 8112efa:	bf00      	nop
 8112efc:	0811d2ec 	.word	0x0811d2ec
 8112f00:	0811d4ec 	.word	0x0811d4ec
 8112f04:	0811d370 	.word	0x0811d370
 8112f08:	0811d4f8 	.word	0x0811d4f8

08112f0c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8112f0c:	b580      	push	{r7, lr}
 8112f0e:	b094      	sub	sp, #80	@ 0x50
 8112f10:	af02      	add	r7, sp, #8
 8112f12:	60f8      	str	r0, [r7, #12]
 8112f14:	60b9      	str	r1, [r7, #8]
 8112f16:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8112f18:	2300      	movs	r3, #0
 8112f1a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8112f1e:	68bb      	ldr	r3, [r7, #8]
 8112f20:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8112f22:	3b14      	subs	r3, #20
 8112f24:	2b00      	cmp	r3, #0
 8112f26:	da00      	bge.n	8112f2a <ip4_frag+0x1e>
 8112f28:	3307      	adds	r3, #7
 8112f2a:	10db      	asrs	r3, r3, #3
 8112f2c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8112f2e:	2314      	movs	r3, #20
 8112f30:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8112f32:	68fb      	ldr	r3, [r7, #12]
 8112f34:	685b      	ldr	r3, [r3, #4]
 8112f36:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8112f38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8112f3a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8112f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112f3e:	781b      	ldrb	r3, [r3, #0]
 8112f40:	f003 030f 	and.w	r3, r3, #15
 8112f44:	b2db      	uxtb	r3, r3
 8112f46:	009b      	lsls	r3, r3, #2
 8112f48:	b2db      	uxtb	r3, r3
 8112f4a:	2b14      	cmp	r3, #20
 8112f4c:	d002      	beq.n	8112f54 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8112f4e:	f06f 0305 	mvn.w	r3, #5
 8112f52:	e110      	b.n	8113176 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8112f54:	68fb      	ldr	r3, [r7, #12]
 8112f56:	895b      	ldrh	r3, [r3, #10]
 8112f58:	2b13      	cmp	r3, #19
 8112f5a:	d809      	bhi.n	8112f70 <ip4_frag+0x64>
 8112f5c:	4b88      	ldr	r3, [pc, #544]	@ (8113180 <ip4_frag+0x274>)
 8112f5e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8112f62:	4988      	ldr	r1, [pc, #544]	@ (8113184 <ip4_frag+0x278>)
 8112f64:	4888      	ldr	r0, [pc, #544]	@ (8113188 <ip4_frag+0x27c>)
 8112f66:	f008 ff71 	bl	811be4c <iprintf>
 8112f6a:	f06f 0305 	mvn.w	r3, #5
 8112f6e:	e102      	b.n	8113176 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8112f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8112f72:	88db      	ldrh	r3, [r3, #6]
 8112f74:	b29b      	uxth	r3, r3
 8112f76:	4618      	mov	r0, r3
 8112f78:	f7fd fd20 	bl	81109bc <lwip_htons>
 8112f7c:	4603      	mov	r3, r0
 8112f7e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8112f80:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8112f82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8112f86:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8112f8a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8112f8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8112f90:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8112f92:	68fb      	ldr	r3, [r7, #12]
 8112f94:	891b      	ldrh	r3, [r3, #8]
 8112f96:	3b14      	subs	r3, #20
 8112f98:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8112f9c:	e0e1      	b.n	8113162 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8112f9e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8112fa0:	00db      	lsls	r3, r3, #3
 8112fa2:	b29b      	uxth	r3, r3
 8112fa4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8112fa8:	4293      	cmp	r3, r2
 8112faa:	bf28      	it	cs
 8112fac:	4613      	movcs	r3, r2
 8112fae:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8112fb0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8112fb4:	2114      	movs	r1, #20
 8112fb6:	200e      	movs	r0, #14
 8112fb8:	f001 f9a2 	bl	8114300 <pbuf_alloc>
 8112fbc:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8112fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112fc0:	2b00      	cmp	r3, #0
 8112fc2:	f000 80d5 	beq.w	8113170 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8112fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112fc8:	895b      	ldrh	r3, [r3, #10]
 8112fca:	2b13      	cmp	r3, #19
 8112fcc:	d806      	bhi.n	8112fdc <ip4_frag+0xd0>
 8112fce:	4b6c      	ldr	r3, [pc, #432]	@ (8113180 <ip4_frag+0x274>)
 8112fd0:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8112fd4:	496d      	ldr	r1, [pc, #436]	@ (811318c <ip4_frag+0x280>)
 8112fd6:	486c      	ldr	r0, [pc, #432]	@ (8113188 <ip4_frag+0x27c>)
 8112fd8:	f008 ff38 	bl	811be4c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8112fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112fde:	685b      	ldr	r3, [r3, #4]
 8112fe0:	2214      	movs	r2, #20
 8112fe2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8112fe4:	4618      	mov	r0, r3
 8112fe6:	f009 f8e2 	bl	811c1ae <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8112fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8112fec:	685b      	ldr	r3, [r3, #4]
 8112fee:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8112ff0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8112ff2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8112ff6:	e064      	b.n	81130c2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8112ff8:	68fb      	ldr	r3, [r7, #12]
 8112ffa:	895a      	ldrh	r2, [r3, #10]
 8112ffc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8112ffe:	1ad3      	subs	r3, r2, r3
 8113000:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8113002:	68fb      	ldr	r3, [r7, #12]
 8113004:	895b      	ldrh	r3, [r3, #10]
 8113006:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8113008:	429a      	cmp	r2, r3
 811300a:	d906      	bls.n	811301a <ip4_frag+0x10e>
 811300c:	4b5c      	ldr	r3, [pc, #368]	@ (8113180 <ip4_frag+0x274>)
 811300e:	f240 322d 	movw	r2, #813	@ 0x32d
 8113012:	495f      	ldr	r1, [pc, #380]	@ (8113190 <ip4_frag+0x284>)
 8113014:	485c      	ldr	r0, [pc, #368]	@ (8113188 <ip4_frag+0x27c>)
 8113016:	f008 ff19 	bl	811be4c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 811301a:	8bfa      	ldrh	r2, [r7, #30]
 811301c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8113020:	4293      	cmp	r3, r2
 8113022:	bf28      	it	cs
 8113024:	4613      	movcs	r3, r2
 8113026:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 811302a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 811302e:	2b00      	cmp	r3, #0
 8113030:	d105      	bne.n	811303e <ip4_frag+0x132>
        poff = 0;
 8113032:	2300      	movs	r3, #0
 8113034:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8113036:	68fb      	ldr	r3, [r7, #12]
 8113038:	681b      	ldr	r3, [r3, #0]
 811303a:	60fb      	str	r3, [r7, #12]
        continue;
 811303c:	e041      	b.n	81130c2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 811303e:	f7ff ff0d 	bl	8112e5c <ip_frag_alloc_pbuf_custom_ref>
 8113042:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8113044:	69bb      	ldr	r3, [r7, #24]
 8113046:	2b00      	cmp	r3, #0
 8113048:	d103      	bne.n	8113052 <ip4_frag+0x146>
        pbuf_free(rambuf);
 811304a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811304c:	f001 fc3c 	bl	81148c8 <pbuf_free>
        goto memerr;
 8113050:	e08f      	b.n	8113172 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8113052:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8113054:	68fb      	ldr	r3, [r7, #12]
 8113056:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8113058:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 811305a:	4413      	add	r3, r2
 811305c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8113060:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8113064:	9201      	str	r2, [sp, #4]
 8113066:	9300      	str	r3, [sp, #0]
 8113068:	4603      	mov	r3, r0
 811306a:	2241      	movs	r2, #65	@ 0x41
 811306c:	2000      	movs	r0, #0
 811306e:	f001 fa73 	bl	8114558 <pbuf_alloced_custom>
 8113072:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8113074:	697b      	ldr	r3, [r7, #20]
 8113076:	2b00      	cmp	r3, #0
 8113078:	d106      	bne.n	8113088 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 811307a:	69b8      	ldr	r0, [r7, #24]
 811307c:	f7ff fef6 	bl	8112e6c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8113080:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8113082:	f001 fc21 	bl	81148c8 <pbuf_free>
        goto memerr;
 8113086:	e074      	b.n	8113172 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8113088:	68f8      	ldr	r0, [r7, #12]
 811308a:	f001 fcc3 	bl	8114a14 <pbuf_ref>
      pcr->original = p;
 811308e:	69bb      	ldr	r3, [r7, #24]
 8113090:	68fa      	ldr	r2, [r7, #12]
 8113092:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8113094:	69bb      	ldr	r3, [r7, #24]
 8113096:	4a3f      	ldr	r2, [pc, #252]	@ (8113194 <ip4_frag+0x288>)
 8113098:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 811309a:	6979      	ldr	r1, [r7, #20]
 811309c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811309e:	f001 fce1 	bl	8114a64 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 81130a2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 81130a6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 81130aa:	1ad3      	subs	r3, r2, r3
 81130ac:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 81130b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 81130b4:	2b00      	cmp	r3, #0
 81130b6:	d004      	beq.n	81130c2 <ip4_frag+0x1b6>
        poff = 0;
 81130b8:	2300      	movs	r3, #0
 81130ba:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 81130bc:	68fb      	ldr	r3, [r7, #12]
 81130be:	681b      	ldr	r3, [r3, #0]
 81130c0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 81130c2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 81130c6:	2b00      	cmp	r3, #0
 81130c8:	d196      	bne.n	8112ff8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 81130ca:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 81130cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 81130d0:	4413      	add	r3, r2
 81130d2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 81130d4:	68bb      	ldr	r3, [r7, #8]
 81130d6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 81130d8:	f1a3 0213 	sub.w	r2, r3, #19
 81130dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 81130e0:	429a      	cmp	r2, r3
 81130e2:	bfcc      	ite	gt
 81130e4:	2301      	movgt	r3, #1
 81130e6:	2300      	movle	r3, #0
 81130e8:	b2db      	uxtb	r3, r3
 81130ea:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 81130ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 81130f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81130f4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 81130f6:	6a3b      	ldr	r3, [r7, #32]
 81130f8:	2b00      	cmp	r3, #0
 81130fa:	d002      	beq.n	8113102 <ip4_frag+0x1f6>
 81130fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81130fe:	2b00      	cmp	r3, #0
 8113100:	d003      	beq.n	811310a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8113102:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8113104:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8113108:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 811310a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 811310c:	4618      	mov	r0, r3
 811310e:	f7fd fc55 	bl	81109bc <lwip_htons>
 8113112:	4603      	mov	r3, r0
 8113114:	461a      	mov	r2, r3
 8113116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8113118:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 811311a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 811311c:	3314      	adds	r3, #20
 811311e:	b29b      	uxth	r3, r3
 8113120:	4618      	mov	r0, r3
 8113122:	f7fd fc4b 	bl	81109bc <lwip_htons>
 8113126:	4603      	mov	r3, r0
 8113128:	461a      	mov	r2, r3
 811312a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 811312c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 811312e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8113130:	2200      	movs	r2, #0
 8113132:	729a      	strb	r2, [r3, #10]
 8113134:	2200      	movs	r2, #0
 8113136:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8113138:	68bb      	ldr	r3, [r7, #8]
 811313a:	695b      	ldr	r3, [r3, #20]
 811313c:	687a      	ldr	r2, [r7, #4]
 811313e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8113140:	68b8      	ldr	r0, [r7, #8]
 8113142:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8113144:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8113146:	f001 fbbf 	bl	81148c8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 811314a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 811314e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8113150:	1ad3      	subs	r3, r2, r3
 8113152:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8113156:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 811315a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 811315c:	4413      	add	r3, r2
 811315e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8113162:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8113166:	2b00      	cmp	r3, #0
 8113168:	f47f af19 	bne.w	8112f9e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 811316c:	2300      	movs	r3, #0
 811316e:	e002      	b.n	8113176 <ip4_frag+0x26a>
      goto memerr;
 8113170:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8113172:	f04f 33ff 	mov.w	r3, #4294967295
}
 8113176:	4618      	mov	r0, r3
 8113178:	3748      	adds	r7, #72	@ 0x48
 811317a:	46bd      	mov	sp, r7
 811317c:	bd80      	pop	{r7, pc}
 811317e:	bf00      	nop
 8113180:	0811d2ec 	.word	0x0811d2ec
 8113184:	0811d504 	.word	0x0811d504
 8113188:	0811d370 	.word	0x0811d370
 811318c:	0811d520 	.word	0x0811d520
 8113190:	0811d540 	.word	0x0811d540
 8113194:	08112ea5 	.word	0x08112ea5

08113198 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8113198:	b480      	push	{r7}
 811319a:	b083      	sub	sp, #12
 811319c:	af00      	add	r7, sp, #0
 811319e:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 81131a0:	4b04      	ldr	r3, [pc, #16]	@ (81131b4 <ptr_to_mem+0x1c>)
 81131a2:	681a      	ldr	r2, [r3, #0]
 81131a4:	687b      	ldr	r3, [r7, #4]
 81131a6:	4413      	add	r3, r2
}
 81131a8:	4618      	mov	r0, r3
 81131aa:	370c      	adds	r7, #12
 81131ac:	46bd      	mov	sp, r7
 81131ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81131b2:	4770      	bx	lr
 81131b4:	1000b268 	.word	0x1000b268

081131b8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 81131b8:	b480      	push	{r7}
 81131ba:	b083      	sub	sp, #12
 81131bc:	af00      	add	r7, sp, #0
 81131be:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 81131c0:	4b04      	ldr	r3, [pc, #16]	@ (81131d4 <mem_to_ptr+0x1c>)
 81131c2:	681b      	ldr	r3, [r3, #0]
 81131c4:	687a      	ldr	r2, [r7, #4]
 81131c6:	1ad3      	subs	r3, r2, r3
}
 81131c8:	4618      	mov	r0, r3
 81131ca:	370c      	adds	r7, #12
 81131cc:	46bd      	mov	sp, r7
 81131ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81131d2:	4770      	bx	lr
 81131d4:	1000b268 	.word	0x1000b268

081131d8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 81131d8:	b590      	push	{r4, r7, lr}
 81131da:	b085      	sub	sp, #20
 81131dc:	af00      	add	r7, sp, #0
 81131de:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 81131e0:	4b45      	ldr	r3, [pc, #276]	@ (81132f8 <plug_holes+0x120>)
 81131e2:	681b      	ldr	r3, [r3, #0]
 81131e4:	687a      	ldr	r2, [r7, #4]
 81131e6:	429a      	cmp	r2, r3
 81131e8:	d206      	bcs.n	81131f8 <plug_holes+0x20>
 81131ea:	4b44      	ldr	r3, [pc, #272]	@ (81132fc <plug_holes+0x124>)
 81131ec:	f240 12df 	movw	r2, #479	@ 0x1df
 81131f0:	4943      	ldr	r1, [pc, #268]	@ (8113300 <plug_holes+0x128>)
 81131f2:	4844      	ldr	r0, [pc, #272]	@ (8113304 <plug_holes+0x12c>)
 81131f4:	f008 fe2a 	bl	811be4c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 81131f8:	4b43      	ldr	r3, [pc, #268]	@ (8113308 <plug_holes+0x130>)
 81131fa:	681b      	ldr	r3, [r3, #0]
 81131fc:	687a      	ldr	r2, [r7, #4]
 81131fe:	429a      	cmp	r2, r3
 8113200:	d306      	bcc.n	8113210 <plug_holes+0x38>
 8113202:	4b3e      	ldr	r3, [pc, #248]	@ (81132fc <plug_holes+0x124>)
 8113204:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8113208:	4940      	ldr	r1, [pc, #256]	@ (811330c <plug_holes+0x134>)
 811320a:	483e      	ldr	r0, [pc, #248]	@ (8113304 <plug_holes+0x12c>)
 811320c:	f008 fe1e 	bl	811be4c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8113210:	687b      	ldr	r3, [r7, #4]
 8113212:	7a1b      	ldrb	r3, [r3, #8]
 8113214:	2b00      	cmp	r3, #0
 8113216:	d006      	beq.n	8113226 <plug_holes+0x4e>
 8113218:	4b38      	ldr	r3, [pc, #224]	@ (81132fc <plug_holes+0x124>)
 811321a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 811321e:	493c      	ldr	r1, [pc, #240]	@ (8113310 <plug_holes+0x138>)
 8113220:	4838      	ldr	r0, [pc, #224]	@ (8113304 <plug_holes+0x12c>)
 8113222:	f008 fe13 	bl	811be4c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8113226:	687b      	ldr	r3, [r7, #4]
 8113228:	681b      	ldr	r3, [r3, #0]
 811322a:	4a3a      	ldr	r2, [pc, #232]	@ (8113314 <plug_holes+0x13c>)
 811322c:	4293      	cmp	r3, r2
 811322e:	d906      	bls.n	811323e <plug_holes+0x66>
 8113230:	4b32      	ldr	r3, [pc, #200]	@ (81132fc <plug_holes+0x124>)
 8113232:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8113236:	4938      	ldr	r1, [pc, #224]	@ (8113318 <plug_holes+0x140>)
 8113238:	4832      	ldr	r0, [pc, #200]	@ (8113304 <plug_holes+0x12c>)
 811323a:	f008 fe07 	bl	811be4c <iprintf>

  nmem = ptr_to_mem(mem->next);
 811323e:	687b      	ldr	r3, [r7, #4]
 8113240:	681b      	ldr	r3, [r3, #0]
 8113242:	4618      	mov	r0, r3
 8113244:	f7ff ffa8 	bl	8113198 <ptr_to_mem>
 8113248:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 811324a:	687a      	ldr	r2, [r7, #4]
 811324c:	68fb      	ldr	r3, [r7, #12]
 811324e:	429a      	cmp	r2, r3
 8113250:	d024      	beq.n	811329c <plug_holes+0xc4>
 8113252:	68fb      	ldr	r3, [r7, #12]
 8113254:	7a1b      	ldrb	r3, [r3, #8]
 8113256:	2b00      	cmp	r3, #0
 8113258:	d120      	bne.n	811329c <plug_holes+0xc4>
 811325a:	4b2b      	ldr	r3, [pc, #172]	@ (8113308 <plug_holes+0x130>)
 811325c:	681b      	ldr	r3, [r3, #0]
 811325e:	68fa      	ldr	r2, [r7, #12]
 8113260:	429a      	cmp	r2, r3
 8113262:	d01b      	beq.n	811329c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8113264:	4b2d      	ldr	r3, [pc, #180]	@ (811331c <plug_holes+0x144>)
 8113266:	681b      	ldr	r3, [r3, #0]
 8113268:	68fa      	ldr	r2, [r7, #12]
 811326a:	429a      	cmp	r2, r3
 811326c:	d102      	bne.n	8113274 <plug_holes+0x9c>
      lfree = mem;
 811326e:	4a2b      	ldr	r2, [pc, #172]	@ (811331c <plug_holes+0x144>)
 8113270:	687b      	ldr	r3, [r7, #4]
 8113272:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8113274:	68fb      	ldr	r3, [r7, #12]
 8113276:	681a      	ldr	r2, [r3, #0]
 8113278:	687b      	ldr	r3, [r7, #4]
 811327a:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 811327c:	68fb      	ldr	r3, [r7, #12]
 811327e:	681b      	ldr	r3, [r3, #0]
 8113280:	4a24      	ldr	r2, [pc, #144]	@ (8113314 <plug_holes+0x13c>)
 8113282:	4293      	cmp	r3, r2
 8113284:	d00a      	beq.n	811329c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8113286:	68fb      	ldr	r3, [r7, #12]
 8113288:	681b      	ldr	r3, [r3, #0]
 811328a:	4618      	mov	r0, r3
 811328c:	f7ff ff84 	bl	8113198 <ptr_to_mem>
 8113290:	4604      	mov	r4, r0
 8113292:	6878      	ldr	r0, [r7, #4]
 8113294:	f7ff ff90 	bl	81131b8 <mem_to_ptr>
 8113298:	4603      	mov	r3, r0
 811329a:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 811329c:	687b      	ldr	r3, [r7, #4]
 811329e:	685b      	ldr	r3, [r3, #4]
 81132a0:	4618      	mov	r0, r3
 81132a2:	f7ff ff79 	bl	8113198 <ptr_to_mem>
 81132a6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 81132a8:	68ba      	ldr	r2, [r7, #8]
 81132aa:	687b      	ldr	r3, [r7, #4]
 81132ac:	429a      	cmp	r2, r3
 81132ae:	d01f      	beq.n	81132f0 <plug_holes+0x118>
 81132b0:	68bb      	ldr	r3, [r7, #8]
 81132b2:	7a1b      	ldrb	r3, [r3, #8]
 81132b4:	2b00      	cmp	r3, #0
 81132b6:	d11b      	bne.n	81132f0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 81132b8:	4b18      	ldr	r3, [pc, #96]	@ (811331c <plug_holes+0x144>)
 81132ba:	681b      	ldr	r3, [r3, #0]
 81132bc:	687a      	ldr	r2, [r7, #4]
 81132be:	429a      	cmp	r2, r3
 81132c0:	d102      	bne.n	81132c8 <plug_holes+0xf0>
      lfree = pmem;
 81132c2:	4a16      	ldr	r2, [pc, #88]	@ (811331c <plug_holes+0x144>)
 81132c4:	68bb      	ldr	r3, [r7, #8]
 81132c6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 81132c8:	687b      	ldr	r3, [r7, #4]
 81132ca:	681a      	ldr	r2, [r3, #0]
 81132cc:	68bb      	ldr	r3, [r7, #8]
 81132ce:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 81132d0:	687b      	ldr	r3, [r7, #4]
 81132d2:	681b      	ldr	r3, [r3, #0]
 81132d4:	4a0f      	ldr	r2, [pc, #60]	@ (8113314 <plug_holes+0x13c>)
 81132d6:	4293      	cmp	r3, r2
 81132d8:	d00a      	beq.n	81132f0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 81132da:	687b      	ldr	r3, [r7, #4]
 81132dc:	681b      	ldr	r3, [r3, #0]
 81132de:	4618      	mov	r0, r3
 81132e0:	f7ff ff5a 	bl	8113198 <ptr_to_mem>
 81132e4:	4604      	mov	r4, r0
 81132e6:	68b8      	ldr	r0, [r7, #8]
 81132e8:	f7ff ff66 	bl	81131b8 <mem_to_ptr>
 81132ec:	4603      	mov	r3, r0
 81132ee:	6063      	str	r3, [r4, #4]
    }
  }
}
 81132f0:	bf00      	nop
 81132f2:	3714      	adds	r7, #20
 81132f4:	46bd      	mov	sp, r7
 81132f6:	bd90      	pop	{r4, r7, pc}
 81132f8:	1000b268 	.word	0x1000b268
 81132fc:	0811d550 	.word	0x0811d550
 8113300:	0811d5c0 	.word	0x0811d5c0
 8113304:	0811d5d8 	.word	0x0811d5d8
 8113308:	1000b26c 	.word	0x1000b26c
 811330c:	0811d600 	.word	0x0811d600
 8113310:	0811d61c 	.word	0x0811d61c
 8113314:	0001ffe8 	.word	0x0001ffe8
 8113318:	0811d638 	.word	0x0811d638
 811331c:	1000b274 	.word	0x1000b274

08113320 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8113320:	b580      	push	{r7, lr}
 8113322:	b082      	sub	sp, #8
 8113324:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8113326:	4b1b      	ldr	r3, [pc, #108]	@ (8113394 <mem_init+0x74>)
 8113328:	4a1b      	ldr	r2, [pc, #108]	@ (8113398 <mem_init+0x78>)
 811332a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 811332c:	4b19      	ldr	r3, [pc, #100]	@ (8113394 <mem_init+0x74>)
 811332e:	681b      	ldr	r3, [r3, #0]
 8113330:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8113332:	687b      	ldr	r3, [r7, #4]
 8113334:	4a19      	ldr	r2, [pc, #100]	@ (811339c <mem_init+0x7c>)
 8113336:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 8113338:	687b      	ldr	r3, [r7, #4]
 811333a:	2200      	movs	r2, #0
 811333c:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 811333e:	687b      	ldr	r3, [r7, #4]
 8113340:	2200      	movs	r2, #0
 8113342:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8113344:	4815      	ldr	r0, [pc, #84]	@ (811339c <mem_init+0x7c>)
 8113346:	f7ff ff27 	bl	8113198 <ptr_to_mem>
 811334a:	4603      	mov	r3, r0
 811334c:	4a14      	ldr	r2, [pc, #80]	@ (81133a0 <mem_init+0x80>)
 811334e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8113350:	4b13      	ldr	r3, [pc, #76]	@ (81133a0 <mem_init+0x80>)
 8113352:	681b      	ldr	r3, [r3, #0]
 8113354:	2201      	movs	r2, #1
 8113356:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 8113358:	4b11      	ldr	r3, [pc, #68]	@ (81133a0 <mem_init+0x80>)
 811335a:	681b      	ldr	r3, [r3, #0]
 811335c:	4a0f      	ldr	r2, [pc, #60]	@ (811339c <mem_init+0x7c>)
 811335e:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8113360:	4b0f      	ldr	r3, [pc, #60]	@ (81133a0 <mem_init+0x80>)
 8113362:	681b      	ldr	r3, [r3, #0]
 8113364:	4a0d      	ldr	r2, [pc, #52]	@ (811339c <mem_init+0x7c>)
 8113366:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8113368:	4b0a      	ldr	r3, [pc, #40]	@ (8113394 <mem_init+0x74>)
 811336a:	681b      	ldr	r3, [r3, #0]
 811336c:	4a0d      	ldr	r2, [pc, #52]	@ (81133a4 <mem_init+0x84>)
 811336e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8113370:	480d      	ldr	r0, [pc, #52]	@ (81133a8 <mem_init+0x88>)
 8113372:	f001 fdc5 	bl	8114f00 <sys_mutex_new>
 8113376:	4603      	mov	r3, r0
 8113378:	2b00      	cmp	r3, #0
 811337a:	d006      	beq.n	811338a <mem_init+0x6a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 811337c:	4b0b      	ldr	r3, [pc, #44]	@ (81133ac <mem_init+0x8c>)
 811337e:	f240 221f 	movw	r2, #543	@ 0x21f
 8113382:	490b      	ldr	r1, [pc, #44]	@ (81133b0 <mem_init+0x90>)
 8113384:	480b      	ldr	r0, [pc, #44]	@ (81133b4 <mem_init+0x94>)
 8113386:	f008 fd61 	bl	811be4c <iprintf>
  }
}
 811338a:	bf00      	nop
 811338c:	3708      	adds	r7, #8
 811338e:	46bd      	mov	sp, r7
 8113390:	bd80      	pop	{r7, pc}
 8113392:	bf00      	nop
 8113394:	1000b268 	.word	0x1000b268
 8113398:	10020000 	.word	0x10020000
 811339c:	0001ffe8 	.word	0x0001ffe8
 81133a0:	1000b26c 	.word	0x1000b26c
 81133a4:	1000b274 	.word	0x1000b274
 81133a8:	1000b270 	.word	0x1000b270
 81133ac:	0811d550 	.word	0x0811d550
 81133b0:	0811d664 	.word	0x0811d664
 81133b4:	0811d5d8 	.word	0x0811d5d8

081133b8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 81133b8:	b580      	push	{r7, lr}
 81133ba:	b086      	sub	sp, #24
 81133bc:	af00      	add	r7, sp, #0
 81133be:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 81133c0:	6878      	ldr	r0, [r7, #4]
 81133c2:	f7ff fef9 	bl	81131b8 <mem_to_ptr>
 81133c6:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 81133c8:	687b      	ldr	r3, [r7, #4]
 81133ca:	681b      	ldr	r3, [r3, #0]
 81133cc:	4618      	mov	r0, r3
 81133ce:	f7ff fee3 	bl	8113198 <ptr_to_mem>
 81133d2:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 81133d4:	687b      	ldr	r3, [r7, #4]
 81133d6:	685b      	ldr	r3, [r3, #4]
 81133d8:	4618      	mov	r0, r3
 81133da:	f7ff fedd 	bl	8113198 <ptr_to_mem>
 81133de:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 81133e0:	687b      	ldr	r3, [r7, #4]
 81133e2:	681b      	ldr	r3, [r3, #0]
 81133e4:	4a11      	ldr	r2, [pc, #68]	@ (811342c <mem_link_valid+0x74>)
 81133e6:	4293      	cmp	r3, r2
 81133e8:	d818      	bhi.n	811341c <mem_link_valid+0x64>
 81133ea:	687b      	ldr	r3, [r7, #4]
 81133ec:	685b      	ldr	r3, [r3, #4]
 81133ee:	4a0f      	ldr	r2, [pc, #60]	@ (811342c <mem_link_valid+0x74>)
 81133f0:	4293      	cmp	r3, r2
 81133f2:	d813      	bhi.n	811341c <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 81133f4:	687b      	ldr	r3, [r7, #4]
 81133f6:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 81133f8:	697a      	ldr	r2, [r7, #20]
 81133fa:	429a      	cmp	r2, r3
 81133fc:	d004      	beq.n	8113408 <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 81133fe:	68fb      	ldr	r3, [r7, #12]
 8113400:	681b      	ldr	r3, [r3, #0]
 8113402:	697a      	ldr	r2, [r7, #20]
 8113404:	429a      	cmp	r2, r3
 8113406:	d109      	bne.n	811341c <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8113408:	4b09      	ldr	r3, [pc, #36]	@ (8113430 <mem_link_valid+0x78>)
 811340a:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 811340c:	693a      	ldr	r2, [r7, #16]
 811340e:	429a      	cmp	r2, r3
 8113410:	d006      	beq.n	8113420 <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8113412:	693b      	ldr	r3, [r7, #16]
 8113414:	685b      	ldr	r3, [r3, #4]
 8113416:	697a      	ldr	r2, [r7, #20]
 8113418:	429a      	cmp	r2, r3
 811341a:	d001      	beq.n	8113420 <mem_link_valid+0x68>
    return 0;
 811341c:	2300      	movs	r3, #0
 811341e:	e000      	b.n	8113422 <mem_link_valid+0x6a>
  }
  return 1;
 8113420:	2301      	movs	r3, #1
}
 8113422:	4618      	mov	r0, r3
 8113424:	3718      	adds	r7, #24
 8113426:	46bd      	mov	sp, r7
 8113428:	bd80      	pop	{r7, pc}
 811342a:	bf00      	nop
 811342c:	0001ffe8 	.word	0x0001ffe8
 8113430:	1000b26c 	.word	0x1000b26c

08113434 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8113434:	b580      	push	{r7, lr}
 8113436:	b088      	sub	sp, #32
 8113438:	af00      	add	r7, sp, #0
 811343a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 811343c:	687b      	ldr	r3, [r7, #4]
 811343e:	2b00      	cmp	r3, #0
 8113440:	d070      	beq.n	8113524 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8113442:	687b      	ldr	r3, [r7, #4]
 8113444:	f003 0303 	and.w	r3, r3, #3
 8113448:	2b00      	cmp	r3, #0
 811344a:	d00d      	beq.n	8113468 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 811344c:	4b37      	ldr	r3, [pc, #220]	@ (811352c <mem_free+0xf8>)
 811344e:	f240 2273 	movw	r2, #627	@ 0x273
 8113452:	4937      	ldr	r1, [pc, #220]	@ (8113530 <mem_free+0xfc>)
 8113454:	4837      	ldr	r0, [pc, #220]	@ (8113534 <mem_free+0x100>)
 8113456:	f008 fcf9 	bl	811be4c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 811345a:	f001 fda3 	bl	8114fa4 <sys_arch_protect>
 811345e:	60f8      	str	r0, [r7, #12]
 8113460:	68f8      	ldr	r0, [r7, #12]
 8113462:	f001 fdad 	bl	8114fc0 <sys_arch_unprotect>
    return;
 8113466:	e05e      	b.n	8113526 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8113468:	687b      	ldr	r3, [r7, #4]
 811346a:	3b0c      	subs	r3, #12
 811346c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 811346e:	4b32      	ldr	r3, [pc, #200]	@ (8113538 <mem_free+0x104>)
 8113470:	681b      	ldr	r3, [r3, #0]
 8113472:	69fa      	ldr	r2, [r7, #28]
 8113474:	429a      	cmp	r2, r3
 8113476:	d306      	bcc.n	8113486 <mem_free+0x52>
 8113478:	687b      	ldr	r3, [r7, #4]
 811347a:	f103 020c 	add.w	r2, r3, #12
 811347e:	4b2f      	ldr	r3, [pc, #188]	@ (811353c <mem_free+0x108>)
 8113480:	681b      	ldr	r3, [r3, #0]
 8113482:	429a      	cmp	r2, r3
 8113484:	d90d      	bls.n	81134a2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8113486:	4b29      	ldr	r3, [pc, #164]	@ (811352c <mem_free+0xf8>)
 8113488:	f240 227f 	movw	r2, #639	@ 0x27f
 811348c:	492c      	ldr	r1, [pc, #176]	@ (8113540 <mem_free+0x10c>)
 811348e:	4829      	ldr	r0, [pc, #164]	@ (8113534 <mem_free+0x100>)
 8113490:	f008 fcdc 	bl	811be4c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8113494:	f001 fd86 	bl	8114fa4 <sys_arch_protect>
 8113498:	6138      	str	r0, [r7, #16]
 811349a:	6938      	ldr	r0, [r7, #16]
 811349c:	f001 fd90 	bl	8114fc0 <sys_arch_unprotect>
    return;
 81134a0:	e041      	b.n	8113526 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 81134a2:	4828      	ldr	r0, [pc, #160]	@ (8113544 <mem_free+0x110>)
 81134a4:	f001 fd42 	bl	8114f2c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 81134a8:	69fb      	ldr	r3, [r7, #28]
 81134aa:	7a1b      	ldrb	r3, [r3, #8]
 81134ac:	2b00      	cmp	r3, #0
 81134ae:	d110      	bne.n	81134d2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 81134b0:	4b1e      	ldr	r3, [pc, #120]	@ (811352c <mem_free+0xf8>)
 81134b2:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 81134b6:	4924      	ldr	r1, [pc, #144]	@ (8113548 <mem_free+0x114>)
 81134b8:	481e      	ldr	r0, [pc, #120]	@ (8113534 <mem_free+0x100>)
 81134ba:	f008 fcc7 	bl	811be4c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 81134be:	4821      	ldr	r0, [pc, #132]	@ (8113544 <mem_free+0x110>)
 81134c0:	f001 fd43 	bl	8114f4a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 81134c4:	f001 fd6e 	bl	8114fa4 <sys_arch_protect>
 81134c8:	6178      	str	r0, [r7, #20]
 81134ca:	6978      	ldr	r0, [r7, #20]
 81134cc:	f001 fd78 	bl	8114fc0 <sys_arch_unprotect>
    return;
 81134d0:	e029      	b.n	8113526 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 81134d2:	69f8      	ldr	r0, [r7, #28]
 81134d4:	f7ff ff70 	bl	81133b8 <mem_link_valid>
 81134d8:	4603      	mov	r3, r0
 81134da:	2b00      	cmp	r3, #0
 81134dc:	d110      	bne.n	8113500 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 81134de:	4b13      	ldr	r3, [pc, #76]	@ (811352c <mem_free+0xf8>)
 81134e0:	f240 2295 	movw	r2, #661	@ 0x295
 81134e4:	4919      	ldr	r1, [pc, #100]	@ (811354c <mem_free+0x118>)
 81134e6:	4813      	ldr	r0, [pc, #76]	@ (8113534 <mem_free+0x100>)
 81134e8:	f008 fcb0 	bl	811be4c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 81134ec:	4815      	ldr	r0, [pc, #84]	@ (8113544 <mem_free+0x110>)
 81134ee:	f001 fd2c 	bl	8114f4a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 81134f2:	f001 fd57 	bl	8114fa4 <sys_arch_protect>
 81134f6:	61b8      	str	r0, [r7, #24]
 81134f8:	69b8      	ldr	r0, [r7, #24]
 81134fa:	f001 fd61 	bl	8114fc0 <sys_arch_unprotect>
    return;
 81134fe:	e012      	b.n	8113526 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8113500:	69fb      	ldr	r3, [r7, #28]
 8113502:	2200      	movs	r2, #0
 8113504:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 8113506:	4b12      	ldr	r3, [pc, #72]	@ (8113550 <mem_free+0x11c>)
 8113508:	681b      	ldr	r3, [r3, #0]
 811350a:	69fa      	ldr	r2, [r7, #28]
 811350c:	429a      	cmp	r2, r3
 811350e:	d202      	bcs.n	8113516 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8113510:	4a0f      	ldr	r2, [pc, #60]	@ (8113550 <mem_free+0x11c>)
 8113512:	69fb      	ldr	r3, [r7, #28]
 8113514:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8113516:	69f8      	ldr	r0, [r7, #28]
 8113518:	f7ff fe5e 	bl	81131d8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 811351c:	4809      	ldr	r0, [pc, #36]	@ (8113544 <mem_free+0x110>)
 811351e:	f001 fd14 	bl	8114f4a <sys_mutex_unlock>
 8113522:	e000      	b.n	8113526 <mem_free+0xf2>
    return;
 8113524:	bf00      	nop
}
 8113526:	3720      	adds	r7, #32
 8113528:	46bd      	mov	sp, r7
 811352a:	bd80      	pop	{r7, pc}
 811352c:	0811d550 	.word	0x0811d550
 8113530:	0811d680 	.word	0x0811d680
 8113534:	0811d5d8 	.word	0x0811d5d8
 8113538:	1000b268 	.word	0x1000b268
 811353c:	1000b26c 	.word	0x1000b26c
 8113540:	0811d6a4 	.word	0x0811d6a4
 8113544:	1000b270 	.word	0x1000b270
 8113548:	0811d6c0 	.word	0x0811d6c0
 811354c:	0811d6e8 	.word	0x0811d6e8
 8113550:	1000b274 	.word	0x1000b274

08113554 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8113554:	b580      	push	{r7, lr}
 8113556:	b08a      	sub	sp, #40	@ 0x28
 8113558:	af00      	add	r7, sp, #0
 811355a:	6078      	str	r0, [r7, #4]
 811355c:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 811355e:	683b      	ldr	r3, [r7, #0]
 8113560:	3303      	adds	r3, #3
 8113562:	f023 0303 	bic.w	r3, r3, #3
 8113566:	627b      	str	r3, [r7, #36]	@ 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 8113568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811356a:	2b0b      	cmp	r3, #11
 811356c:	d801      	bhi.n	8113572 <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 811356e:	230c      	movs	r3, #12
 8113570:	627b      	str	r3, [r7, #36]	@ 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8113572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113574:	4a6e      	ldr	r2, [pc, #440]	@ (8113730 <mem_trim+0x1dc>)
 8113576:	4293      	cmp	r3, r2
 8113578:	d803      	bhi.n	8113582 <mem_trim+0x2e>
 811357a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811357c:	683b      	ldr	r3, [r7, #0]
 811357e:	429a      	cmp	r2, r3
 8113580:	d201      	bcs.n	8113586 <mem_trim+0x32>
    return NULL;
 8113582:	2300      	movs	r3, #0
 8113584:	e0d0      	b.n	8113728 <mem_trim+0x1d4>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8113586:	4b6b      	ldr	r3, [pc, #428]	@ (8113734 <mem_trim+0x1e0>)
 8113588:	681b      	ldr	r3, [r3, #0]
 811358a:	687a      	ldr	r2, [r7, #4]
 811358c:	429a      	cmp	r2, r3
 811358e:	d304      	bcc.n	811359a <mem_trim+0x46>
 8113590:	4b69      	ldr	r3, [pc, #420]	@ (8113738 <mem_trim+0x1e4>)
 8113592:	681b      	ldr	r3, [r3, #0]
 8113594:	687a      	ldr	r2, [r7, #4]
 8113596:	429a      	cmp	r2, r3
 8113598:	d306      	bcc.n	81135a8 <mem_trim+0x54>
 811359a:	4b68      	ldr	r3, [pc, #416]	@ (811373c <mem_trim+0x1e8>)
 811359c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 81135a0:	4967      	ldr	r1, [pc, #412]	@ (8113740 <mem_trim+0x1ec>)
 81135a2:	4868      	ldr	r0, [pc, #416]	@ (8113744 <mem_trim+0x1f0>)
 81135a4:	f008 fc52 	bl	811be4c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 81135a8:	4b62      	ldr	r3, [pc, #392]	@ (8113734 <mem_trim+0x1e0>)
 81135aa:	681b      	ldr	r3, [r3, #0]
 81135ac:	687a      	ldr	r2, [r7, #4]
 81135ae:	429a      	cmp	r2, r3
 81135b0:	d304      	bcc.n	81135bc <mem_trim+0x68>
 81135b2:	4b61      	ldr	r3, [pc, #388]	@ (8113738 <mem_trim+0x1e4>)
 81135b4:	681b      	ldr	r3, [r3, #0]
 81135b6:	687a      	ldr	r2, [r7, #4]
 81135b8:	429a      	cmp	r2, r3
 81135ba:	d307      	bcc.n	81135cc <mem_trim+0x78>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 81135bc:	f001 fcf2 	bl	8114fa4 <sys_arch_protect>
 81135c0:	60b8      	str	r0, [r7, #8]
 81135c2:	68b8      	ldr	r0, [r7, #8]
 81135c4:	f001 fcfc 	bl	8114fc0 <sys_arch_unprotect>
    return rmem;
 81135c8:	687b      	ldr	r3, [r7, #4]
 81135ca:	e0ad      	b.n	8113728 <mem_trim+0x1d4>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 81135cc:	687b      	ldr	r3, [r7, #4]
 81135ce:	3b0c      	subs	r3, #12
 81135d0:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 81135d2:	6a38      	ldr	r0, [r7, #32]
 81135d4:	f7ff fdf0 	bl	81131b8 <mem_to_ptr>
 81135d8:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 81135da:	6a3b      	ldr	r3, [r7, #32]
 81135dc:	681a      	ldr	r2, [r3, #0]
 81135de:	69fb      	ldr	r3, [r7, #28]
 81135e0:	1ad3      	subs	r3, r2, r3
 81135e2:	3b0c      	subs	r3, #12
 81135e4:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 81135e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81135e8:	69bb      	ldr	r3, [r7, #24]
 81135ea:	429a      	cmp	r2, r3
 81135ec:	d906      	bls.n	81135fc <mem_trim+0xa8>
 81135ee:	4b53      	ldr	r3, [pc, #332]	@ (811373c <mem_trim+0x1e8>)
 81135f0:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 81135f4:	4954      	ldr	r1, [pc, #336]	@ (8113748 <mem_trim+0x1f4>)
 81135f6:	4853      	ldr	r0, [pc, #332]	@ (8113744 <mem_trim+0x1f0>)
 81135f8:	f008 fc28 	bl	811be4c <iprintf>
  if (newsize > size) {
 81135fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81135fe:	69bb      	ldr	r3, [r7, #24]
 8113600:	429a      	cmp	r2, r3
 8113602:	d901      	bls.n	8113608 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 8113604:	2300      	movs	r3, #0
 8113606:	e08f      	b.n	8113728 <mem_trim+0x1d4>
  }
  if (newsize == size) {
 8113608:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811360a:	69bb      	ldr	r3, [r7, #24]
 811360c:	429a      	cmp	r2, r3
 811360e:	d101      	bne.n	8113614 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 8113610:	687b      	ldr	r3, [r7, #4]
 8113612:	e089      	b.n	8113728 <mem_trim+0x1d4>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8113614:	484d      	ldr	r0, [pc, #308]	@ (811374c <mem_trim+0x1f8>)
 8113616:	f001 fc89 	bl	8114f2c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 811361a:	6a3b      	ldr	r3, [r7, #32]
 811361c:	681b      	ldr	r3, [r3, #0]
 811361e:	4618      	mov	r0, r3
 8113620:	f7ff fdba 	bl	8113198 <ptr_to_mem>
 8113624:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 8113626:	697b      	ldr	r3, [r7, #20]
 8113628:	7a1b      	ldrb	r3, [r3, #8]
 811362a:	2b00      	cmp	r3, #0
 811362c:	d13c      	bne.n	81136a8 <mem_trim+0x154>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 811362e:	6a3b      	ldr	r3, [r7, #32]
 8113630:	681b      	ldr	r3, [r3, #0]
 8113632:	4a3f      	ldr	r2, [pc, #252]	@ (8113730 <mem_trim+0x1dc>)
 8113634:	4293      	cmp	r3, r2
 8113636:	d106      	bne.n	8113646 <mem_trim+0xf2>
 8113638:	4b40      	ldr	r3, [pc, #256]	@ (811373c <mem_trim+0x1e8>)
 811363a:	f240 22f5 	movw	r2, #757	@ 0x2f5
 811363e:	4944      	ldr	r1, [pc, #272]	@ (8113750 <mem_trim+0x1fc>)
 8113640:	4840      	ldr	r0, [pc, #256]	@ (8113744 <mem_trim+0x1f0>)
 8113642:	f008 fc03 	bl	811be4c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8113646:	697b      	ldr	r3, [r7, #20]
 8113648:	681b      	ldr	r3, [r3, #0]
 811364a:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 811364c:	69fa      	ldr	r2, [r7, #28]
 811364e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113650:	4413      	add	r3, r2
 8113652:	330c      	adds	r3, #12
 8113654:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 8113656:	4b3f      	ldr	r3, [pc, #252]	@ (8113754 <mem_trim+0x200>)
 8113658:	681b      	ldr	r3, [r3, #0]
 811365a:	697a      	ldr	r2, [r7, #20]
 811365c:	429a      	cmp	r2, r3
 811365e:	d105      	bne.n	811366c <mem_trim+0x118>
      lfree = ptr_to_mem(ptr2);
 8113660:	6938      	ldr	r0, [r7, #16]
 8113662:	f7ff fd99 	bl	8113198 <ptr_to_mem>
 8113666:	4603      	mov	r3, r0
 8113668:	4a3a      	ldr	r2, [pc, #232]	@ (8113754 <mem_trim+0x200>)
 811366a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 811366c:	6938      	ldr	r0, [r7, #16]
 811366e:	f7ff fd93 	bl	8113198 <ptr_to_mem>
 8113672:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 8113674:	697b      	ldr	r3, [r7, #20]
 8113676:	2200      	movs	r2, #0
 8113678:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 811367a:	697b      	ldr	r3, [r7, #20]
 811367c:	68fa      	ldr	r2, [r7, #12]
 811367e:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8113680:	697b      	ldr	r3, [r7, #20]
 8113682:	69fa      	ldr	r2, [r7, #28]
 8113684:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 8113686:	6a3b      	ldr	r3, [r7, #32]
 8113688:	693a      	ldr	r2, [r7, #16]
 811368a:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 811368c:	697b      	ldr	r3, [r7, #20]
 811368e:	681b      	ldr	r3, [r3, #0]
 8113690:	4a27      	ldr	r2, [pc, #156]	@ (8113730 <mem_trim+0x1dc>)
 8113692:	4293      	cmp	r3, r2
 8113694:	d044      	beq.n	8113720 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8113696:	697b      	ldr	r3, [r7, #20]
 8113698:	681b      	ldr	r3, [r3, #0]
 811369a:	4618      	mov	r0, r3
 811369c:	f7ff fd7c 	bl	8113198 <ptr_to_mem>
 81136a0:	4602      	mov	r2, r0
 81136a2:	693b      	ldr	r3, [r7, #16]
 81136a4:	6053      	str	r3, [r2, #4]
 81136a6:	e03b      	b.n	8113720 <mem_trim+0x1cc>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 81136a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81136aa:	3318      	adds	r3, #24
 81136ac:	69ba      	ldr	r2, [r7, #24]
 81136ae:	429a      	cmp	r2, r3
 81136b0:	d336      	bcc.n	8113720 <mem_trim+0x1cc>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 81136b2:	69fa      	ldr	r2, [r7, #28]
 81136b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81136b6:	4413      	add	r3, r2
 81136b8:	330c      	adds	r3, #12
 81136ba:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 81136bc:	6a3b      	ldr	r3, [r7, #32]
 81136be:	681b      	ldr	r3, [r3, #0]
 81136c0:	4a1b      	ldr	r2, [pc, #108]	@ (8113730 <mem_trim+0x1dc>)
 81136c2:	4293      	cmp	r3, r2
 81136c4:	d106      	bne.n	81136d4 <mem_trim+0x180>
 81136c6:	4b1d      	ldr	r3, [pc, #116]	@ (811373c <mem_trim+0x1e8>)
 81136c8:	f240 3216 	movw	r2, #790	@ 0x316
 81136cc:	4920      	ldr	r1, [pc, #128]	@ (8113750 <mem_trim+0x1fc>)
 81136ce:	481d      	ldr	r0, [pc, #116]	@ (8113744 <mem_trim+0x1f0>)
 81136d0:	f008 fbbc 	bl	811be4c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 81136d4:	6938      	ldr	r0, [r7, #16]
 81136d6:	f7ff fd5f 	bl	8113198 <ptr_to_mem>
 81136da:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 81136dc:	4b1d      	ldr	r3, [pc, #116]	@ (8113754 <mem_trim+0x200>)
 81136de:	681b      	ldr	r3, [r3, #0]
 81136e0:	697a      	ldr	r2, [r7, #20]
 81136e2:	429a      	cmp	r2, r3
 81136e4:	d202      	bcs.n	81136ec <mem_trim+0x198>
      lfree = mem2;
 81136e6:	4a1b      	ldr	r2, [pc, #108]	@ (8113754 <mem_trim+0x200>)
 81136e8:	697b      	ldr	r3, [r7, #20]
 81136ea:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 81136ec:	697b      	ldr	r3, [r7, #20]
 81136ee:	2200      	movs	r2, #0
 81136f0:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 81136f2:	6a3b      	ldr	r3, [r7, #32]
 81136f4:	681a      	ldr	r2, [r3, #0]
 81136f6:	697b      	ldr	r3, [r7, #20]
 81136f8:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 81136fa:	697b      	ldr	r3, [r7, #20]
 81136fc:	69fa      	ldr	r2, [r7, #28]
 81136fe:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 8113700:	6a3b      	ldr	r3, [r7, #32]
 8113702:	693a      	ldr	r2, [r7, #16]
 8113704:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8113706:	697b      	ldr	r3, [r7, #20]
 8113708:	681b      	ldr	r3, [r3, #0]
 811370a:	4a09      	ldr	r2, [pc, #36]	@ (8113730 <mem_trim+0x1dc>)
 811370c:	4293      	cmp	r3, r2
 811370e:	d007      	beq.n	8113720 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8113710:	697b      	ldr	r3, [r7, #20]
 8113712:	681b      	ldr	r3, [r3, #0]
 8113714:	4618      	mov	r0, r3
 8113716:	f7ff fd3f 	bl	8113198 <ptr_to_mem>
 811371a:	4602      	mov	r2, r0
 811371c:	693b      	ldr	r3, [r7, #16]
 811371e:	6053      	str	r3, [r2, #4]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8113720:	480a      	ldr	r0, [pc, #40]	@ (811374c <mem_trim+0x1f8>)
 8113722:	f001 fc12 	bl	8114f4a <sys_mutex_unlock>
  return rmem;
 8113726:	687b      	ldr	r3, [r7, #4]
}
 8113728:	4618      	mov	r0, r3
 811372a:	3728      	adds	r7, #40	@ 0x28
 811372c:	46bd      	mov	sp, r7
 811372e:	bd80      	pop	{r7, pc}
 8113730:	0001ffe8 	.word	0x0001ffe8
 8113734:	1000b268 	.word	0x1000b268
 8113738:	1000b26c 	.word	0x1000b26c
 811373c:	0811d550 	.word	0x0811d550
 8113740:	0811d71c 	.word	0x0811d71c
 8113744:	0811d5d8 	.word	0x0811d5d8
 8113748:	0811d734 	.word	0x0811d734
 811374c:	1000b270 	.word	0x1000b270
 8113750:	0811d754 	.word	0x0811d754
 8113754:	1000b274 	.word	0x1000b274

08113758 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8113758:	b580      	push	{r7, lr}
 811375a:	b088      	sub	sp, #32
 811375c:	af00      	add	r7, sp, #0
 811375e:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8113760:	687b      	ldr	r3, [r7, #4]
 8113762:	2b00      	cmp	r3, #0
 8113764:	d101      	bne.n	811376a <mem_malloc+0x12>
    return NULL;
 8113766:	2300      	movs	r3, #0
 8113768:	e0db      	b.n	8113922 <mem_malloc+0x1ca>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 811376a:	687b      	ldr	r3, [r7, #4]
 811376c:	3303      	adds	r3, #3
 811376e:	f023 0303 	bic.w	r3, r3, #3
 8113772:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 8113774:	69bb      	ldr	r3, [r7, #24]
 8113776:	2b0b      	cmp	r3, #11
 8113778:	d801      	bhi.n	811377e <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 811377a:	230c      	movs	r3, #12
 811377c:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 811377e:	69bb      	ldr	r3, [r7, #24]
 8113780:	4a6a      	ldr	r2, [pc, #424]	@ (811392c <mem_malloc+0x1d4>)
 8113782:	4293      	cmp	r3, r2
 8113784:	d803      	bhi.n	811378e <mem_malloc+0x36>
 8113786:	69ba      	ldr	r2, [r7, #24]
 8113788:	687b      	ldr	r3, [r7, #4]
 811378a:	429a      	cmp	r2, r3
 811378c:	d201      	bcs.n	8113792 <mem_malloc+0x3a>
    return NULL;
 811378e:	2300      	movs	r3, #0
 8113790:	e0c7      	b.n	8113922 <mem_malloc+0x1ca>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8113792:	4867      	ldr	r0, [pc, #412]	@ (8113930 <mem_malloc+0x1d8>)
 8113794:	f001 fbca 	bl	8114f2c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8113798:	4b66      	ldr	r3, [pc, #408]	@ (8113934 <mem_malloc+0x1dc>)
 811379a:	681b      	ldr	r3, [r3, #0]
 811379c:	4618      	mov	r0, r3
 811379e:	f7ff fd0b 	bl	81131b8 <mem_to_ptr>
 81137a2:	61f8      	str	r0, [r7, #28]
 81137a4:	e0b0      	b.n	8113908 <mem_malloc+0x1b0>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 81137a6:	69f8      	ldr	r0, [r7, #28]
 81137a8:	f7ff fcf6 	bl	8113198 <ptr_to_mem>
 81137ac:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 81137ae:	693b      	ldr	r3, [r7, #16]
 81137b0:	7a1b      	ldrb	r3, [r3, #8]
 81137b2:	2b00      	cmp	r3, #0
 81137b4:	f040 80a2 	bne.w	81138fc <mem_malloc+0x1a4>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 81137b8:	693b      	ldr	r3, [r7, #16]
 81137ba:	681a      	ldr	r2, [r3, #0]
 81137bc:	69fb      	ldr	r3, [r7, #28]
 81137be:	1ad3      	subs	r3, r2, r3
 81137c0:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 81137c2:	69ba      	ldr	r2, [r7, #24]
 81137c4:	429a      	cmp	r2, r3
 81137c6:	f200 8099 	bhi.w	81138fc <mem_malloc+0x1a4>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 81137ca:	693b      	ldr	r3, [r7, #16]
 81137cc:	681a      	ldr	r2, [r3, #0]
 81137ce:	69fb      	ldr	r3, [r7, #28]
 81137d0:	1ad3      	subs	r3, r2, r3
 81137d2:	f1a3 020c 	sub.w	r2, r3, #12
 81137d6:	69bb      	ldr	r3, [r7, #24]
 81137d8:	3318      	adds	r3, #24
 81137da:	429a      	cmp	r2, r3
 81137dc:	d331      	bcc.n	8113842 <mem_malloc+0xea>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 81137de:	69fa      	ldr	r2, [r7, #28]
 81137e0:	69bb      	ldr	r3, [r7, #24]
 81137e2:	4413      	add	r3, r2
 81137e4:	330c      	adds	r3, #12
 81137e6:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 81137e8:	68fb      	ldr	r3, [r7, #12]
 81137ea:	4a50      	ldr	r2, [pc, #320]	@ (811392c <mem_malloc+0x1d4>)
 81137ec:	4293      	cmp	r3, r2
 81137ee:	d106      	bne.n	81137fe <mem_malloc+0xa6>
 81137f0:	4b51      	ldr	r3, [pc, #324]	@ (8113938 <mem_malloc+0x1e0>)
 81137f2:	f240 3287 	movw	r2, #903	@ 0x387
 81137f6:	4951      	ldr	r1, [pc, #324]	@ (811393c <mem_malloc+0x1e4>)
 81137f8:	4851      	ldr	r0, [pc, #324]	@ (8113940 <mem_malloc+0x1e8>)
 81137fa:	f008 fb27 	bl	811be4c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 81137fe:	68f8      	ldr	r0, [r7, #12]
 8113800:	f7ff fcca 	bl	8113198 <ptr_to_mem>
 8113804:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 8113806:	68bb      	ldr	r3, [r7, #8]
 8113808:	2200      	movs	r2, #0
 811380a:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 811380c:	693b      	ldr	r3, [r7, #16]
 811380e:	681a      	ldr	r2, [r3, #0]
 8113810:	68bb      	ldr	r3, [r7, #8]
 8113812:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 8113814:	68bb      	ldr	r3, [r7, #8]
 8113816:	69fa      	ldr	r2, [r7, #28]
 8113818:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 811381a:	693b      	ldr	r3, [r7, #16]
 811381c:	68fa      	ldr	r2, [r7, #12]
 811381e:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 8113820:	693b      	ldr	r3, [r7, #16]
 8113822:	2201      	movs	r2, #1
 8113824:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8113826:	68bb      	ldr	r3, [r7, #8]
 8113828:	681b      	ldr	r3, [r3, #0]
 811382a:	4a40      	ldr	r2, [pc, #256]	@ (811392c <mem_malloc+0x1d4>)
 811382c:	4293      	cmp	r3, r2
 811382e:	d00b      	beq.n	8113848 <mem_malloc+0xf0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8113830:	68bb      	ldr	r3, [r7, #8]
 8113832:	681b      	ldr	r3, [r3, #0]
 8113834:	4618      	mov	r0, r3
 8113836:	f7ff fcaf 	bl	8113198 <ptr_to_mem>
 811383a:	4602      	mov	r2, r0
 811383c:	68fb      	ldr	r3, [r7, #12]
 811383e:	6053      	str	r3, [r2, #4]
 8113840:	e002      	b.n	8113848 <mem_malloc+0xf0>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8113842:	693b      	ldr	r3, [r7, #16]
 8113844:	2201      	movs	r2, #1
 8113846:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8113848:	4b3a      	ldr	r3, [pc, #232]	@ (8113934 <mem_malloc+0x1dc>)
 811384a:	681b      	ldr	r3, [r3, #0]
 811384c:	693a      	ldr	r2, [r7, #16]
 811384e:	429a      	cmp	r2, r3
 8113850:	d127      	bne.n	81138a2 <mem_malloc+0x14a>
          struct mem *cur = lfree;
 8113852:	4b38      	ldr	r3, [pc, #224]	@ (8113934 <mem_malloc+0x1dc>)
 8113854:	681b      	ldr	r3, [r3, #0]
 8113856:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8113858:	e005      	b.n	8113866 <mem_malloc+0x10e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 811385a:	697b      	ldr	r3, [r7, #20]
 811385c:	681b      	ldr	r3, [r3, #0]
 811385e:	4618      	mov	r0, r3
 8113860:	f7ff fc9a 	bl	8113198 <ptr_to_mem>
 8113864:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 8113866:	697b      	ldr	r3, [r7, #20]
 8113868:	7a1b      	ldrb	r3, [r3, #8]
 811386a:	2b00      	cmp	r3, #0
 811386c:	d004      	beq.n	8113878 <mem_malloc+0x120>
 811386e:	4b35      	ldr	r3, [pc, #212]	@ (8113944 <mem_malloc+0x1ec>)
 8113870:	681b      	ldr	r3, [r3, #0]
 8113872:	697a      	ldr	r2, [r7, #20]
 8113874:	429a      	cmp	r2, r3
 8113876:	d1f0      	bne.n	811385a <mem_malloc+0x102>
          }
          lfree = cur;
 8113878:	4a2e      	ldr	r2, [pc, #184]	@ (8113934 <mem_malloc+0x1dc>)
 811387a:	697b      	ldr	r3, [r7, #20]
 811387c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 811387e:	4b2d      	ldr	r3, [pc, #180]	@ (8113934 <mem_malloc+0x1dc>)
 8113880:	681a      	ldr	r2, [r3, #0]
 8113882:	4b30      	ldr	r3, [pc, #192]	@ (8113944 <mem_malloc+0x1ec>)
 8113884:	681b      	ldr	r3, [r3, #0]
 8113886:	429a      	cmp	r2, r3
 8113888:	d00b      	beq.n	81138a2 <mem_malloc+0x14a>
 811388a:	4b2a      	ldr	r3, [pc, #168]	@ (8113934 <mem_malloc+0x1dc>)
 811388c:	681b      	ldr	r3, [r3, #0]
 811388e:	7a1b      	ldrb	r3, [r3, #8]
 8113890:	2b00      	cmp	r3, #0
 8113892:	d006      	beq.n	81138a2 <mem_malloc+0x14a>
 8113894:	4b28      	ldr	r3, [pc, #160]	@ (8113938 <mem_malloc+0x1e0>)
 8113896:	f240 32b5 	movw	r2, #949	@ 0x3b5
 811389a:	492b      	ldr	r1, [pc, #172]	@ (8113948 <mem_malloc+0x1f0>)
 811389c:	4828      	ldr	r0, [pc, #160]	@ (8113940 <mem_malloc+0x1e8>)
 811389e:	f008 fad5 	bl	811be4c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 81138a2:	4823      	ldr	r0, [pc, #140]	@ (8113930 <mem_malloc+0x1d8>)
 81138a4:	f001 fb51 	bl	8114f4a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 81138a8:	693a      	ldr	r2, [r7, #16]
 81138aa:	69bb      	ldr	r3, [r7, #24]
 81138ac:	4413      	add	r3, r2
 81138ae:	330c      	adds	r3, #12
 81138b0:	4a24      	ldr	r2, [pc, #144]	@ (8113944 <mem_malloc+0x1ec>)
 81138b2:	6812      	ldr	r2, [r2, #0]
 81138b4:	4293      	cmp	r3, r2
 81138b6:	d906      	bls.n	81138c6 <mem_malloc+0x16e>
 81138b8:	4b1f      	ldr	r3, [pc, #124]	@ (8113938 <mem_malloc+0x1e0>)
 81138ba:	f240 32b9 	movw	r2, #953	@ 0x3b9
 81138be:	4923      	ldr	r1, [pc, #140]	@ (811394c <mem_malloc+0x1f4>)
 81138c0:	481f      	ldr	r0, [pc, #124]	@ (8113940 <mem_malloc+0x1e8>)
 81138c2:	f008 fac3 	bl	811be4c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 81138c6:	693b      	ldr	r3, [r7, #16]
 81138c8:	f003 0303 	and.w	r3, r3, #3
 81138cc:	2b00      	cmp	r3, #0
 81138ce:	d006      	beq.n	81138de <mem_malloc+0x186>
 81138d0:	4b19      	ldr	r3, [pc, #100]	@ (8113938 <mem_malloc+0x1e0>)
 81138d2:	f240 32bb 	movw	r2, #955	@ 0x3bb
 81138d6:	491e      	ldr	r1, [pc, #120]	@ (8113950 <mem_malloc+0x1f8>)
 81138d8:	4819      	ldr	r0, [pc, #100]	@ (8113940 <mem_malloc+0x1e8>)
 81138da:	f008 fab7 	bl	811be4c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 81138de:	693b      	ldr	r3, [r7, #16]
 81138e0:	f003 0303 	and.w	r3, r3, #3
 81138e4:	2b00      	cmp	r3, #0
 81138e6:	d006      	beq.n	81138f6 <mem_malloc+0x19e>
 81138e8:	4b13      	ldr	r3, [pc, #76]	@ (8113938 <mem_malloc+0x1e0>)
 81138ea:	f240 32bd 	movw	r2, #957	@ 0x3bd
 81138ee:	4919      	ldr	r1, [pc, #100]	@ (8113954 <mem_malloc+0x1fc>)
 81138f0:	4813      	ldr	r0, [pc, #76]	@ (8113940 <mem_malloc+0x1e8>)
 81138f2:	f008 faab 	bl	811be4c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 81138f6:	693b      	ldr	r3, [r7, #16]
 81138f8:	330c      	adds	r3, #12
 81138fa:	e012      	b.n	8113922 <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
 81138fc:	69f8      	ldr	r0, [r7, #28]
 81138fe:	f7ff fc4b 	bl	8113198 <ptr_to_mem>
 8113902:	4603      	mov	r3, r0
 8113904:	681b      	ldr	r3, [r3, #0]
 8113906:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8113908:	69bb      	ldr	r3, [r7, #24]
 811390a:	f5c3 33ff 	rsb	r3, r3, #130560	@ 0x1fe00
 811390e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8113912:	69fa      	ldr	r2, [r7, #28]
 8113914:	429a      	cmp	r2, r3
 8113916:	f4ff af46 	bcc.w	81137a6 <mem_malloc+0x4e>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 811391a:	4805      	ldr	r0, [pc, #20]	@ (8113930 <mem_malloc+0x1d8>)
 811391c:	f001 fb15 	bl	8114f4a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8113920:	2300      	movs	r3, #0
}
 8113922:	4618      	mov	r0, r3
 8113924:	3720      	adds	r7, #32
 8113926:	46bd      	mov	sp, r7
 8113928:	bd80      	pop	{r7, pc}
 811392a:	bf00      	nop
 811392c:	0001ffe8 	.word	0x0001ffe8
 8113930:	1000b270 	.word	0x1000b270
 8113934:	1000b274 	.word	0x1000b274
 8113938:	0811d550 	.word	0x0811d550
 811393c:	0811d754 	.word	0x0811d754
 8113940:	0811d5d8 	.word	0x0811d5d8
 8113944:	1000b26c 	.word	0x1000b26c
 8113948:	0811d768 	.word	0x0811d768
 811394c:	0811d784 	.word	0x0811d784
 8113950:	0811d7b4 	.word	0x0811d7b4
 8113954:	0811d7e4 	.word	0x0811d7e4

08113958 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8113958:	b480      	push	{r7}
 811395a:	b085      	sub	sp, #20
 811395c:	af00      	add	r7, sp, #0
 811395e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8113960:	687b      	ldr	r3, [r7, #4]
 8113962:	689b      	ldr	r3, [r3, #8]
 8113964:	2200      	movs	r2, #0
 8113966:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8113968:	687b      	ldr	r3, [r7, #4]
 811396a:	685b      	ldr	r3, [r3, #4]
 811396c:	3303      	adds	r3, #3
 811396e:	f023 0303 	bic.w	r3, r3, #3
 8113972:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8113974:	2300      	movs	r3, #0
 8113976:	60fb      	str	r3, [r7, #12]
 8113978:	e011      	b.n	811399e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 811397a:	687b      	ldr	r3, [r7, #4]
 811397c:	689b      	ldr	r3, [r3, #8]
 811397e:	681a      	ldr	r2, [r3, #0]
 8113980:	68bb      	ldr	r3, [r7, #8]
 8113982:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8113984:	687b      	ldr	r3, [r7, #4]
 8113986:	689b      	ldr	r3, [r3, #8]
 8113988:	68ba      	ldr	r2, [r7, #8]
 811398a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 811398c:	687b      	ldr	r3, [r7, #4]
 811398e:	881b      	ldrh	r3, [r3, #0]
 8113990:	461a      	mov	r2, r3
 8113992:	68bb      	ldr	r3, [r7, #8]
 8113994:	4413      	add	r3, r2
 8113996:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8113998:	68fb      	ldr	r3, [r7, #12]
 811399a:	3301      	adds	r3, #1
 811399c:	60fb      	str	r3, [r7, #12]
 811399e:	687b      	ldr	r3, [r7, #4]
 81139a0:	885b      	ldrh	r3, [r3, #2]
 81139a2:	461a      	mov	r2, r3
 81139a4:	68fb      	ldr	r3, [r7, #12]
 81139a6:	4293      	cmp	r3, r2
 81139a8:	dbe7      	blt.n	811397a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 81139aa:	bf00      	nop
 81139ac:	bf00      	nop
 81139ae:	3714      	adds	r7, #20
 81139b0:	46bd      	mov	sp, r7
 81139b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81139b6:	4770      	bx	lr

081139b8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 81139b8:	b580      	push	{r7, lr}
 81139ba:	b082      	sub	sp, #8
 81139bc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 81139be:	2300      	movs	r3, #0
 81139c0:	80fb      	strh	r3, [r7, #6]
 81139c2:	e009      	b.n	81139d8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 81139c4:	88fb      	ldrh	r3, [r7, #6]
 81139c6:	4a08      	ldr	r2, [pc, #32]	@ (81139e8 <memp_init+0x30>)
 81139c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81139cc:	4618      	mov	r0, r3
 81139ce:	f7ff ffc3 	bl	8113958 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 81139d2:	88fb      	ldrh	r3, [r7, #6]
 81139d4:	3301      	adds	r3, #1
 81139d6:	80fb      	strh	r3, [r7, #6]
 81139d8:	88fb      	ldrh	r3, [r7, #6]
 81139da:	2b0c      	cmp	r3, #12
 81139dc:	d9f2      	bls.n	81139c4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 81139de:	bf00      	nop
 81139e0:	bf00      	nop
 81139e2:	3708      	adds	r7, #8
 81139e4:	46bd      	mov	sp, r7
 81139e6:	bd80      	pop	{r7, pc}
 81139e8:	0811fcf0 	.word	0x0811fcf0

081139ec <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 81139ec:	b580      	push	{r7, lr}
 81139ee:	b084      	sub	sp, #16
 81139f0:	af00      	add	r7, sp, #0
 81139f2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 81139f4:	f001 fad6 	bl	8114fa4 <sys_arch_protect>
 81139f8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 81139fa:	687b      	ldr	r3, [r7, #4]
 81139fc:	689b      	ldr	r3, [r3, #8]
 81139fe:	681b      	ldr	r3, [r3, #0]
 8113a00:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8113a02:	68bb      	ldr	r3, [r7, #8]
 8113a04:	2b00      	cmp	r3, #0
 8113a06:	d015      	beq.n	8113a34 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8113a08:	687b      	ldr	r3, [r7, #4]
 8113a0a:	689b      	ldr	r3, [r3, #8]
 8113a0c:	68ba      	ldr	r2, [r7, #8]
 8113a0e:	6812      	ldr	r2, [r2, #0]
 8113a10:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8113a12:	68bb      	ldr	r3, [r7, #8]
 8113a14:	f003 0303 	and.w	r3, r3, #3
 8113a18:	2b00      	cmp	r3, #0
 8113a1a:	d006      	beq.n	8113a2a <do_memp_malloc_pool+0x3e>
 8113a1c:	4b09      	ldr	r3, [pc, #36]	@ (8113a44 <do_memp_malloc_pool+0x58>)
 8113a1e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8113a22:	4909      	ldr	r1, [pc, #36]	@ (8113a48 <do_memp_malloc_pool+0x5c>)
 8113a24:	4809      	ldr	r0, [pc, #36]	@ (8113a4c <do_memp_malloc_pool+0x60>)
 8113a26:	f008 fa11 	bl	811be4c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8113a2a:	68f8      	ldr	r0, [r7, #12]
 8113a2c:	f001 fac8 	bl	8114fc0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8113a30:	68bb      	ldr	r3, [r7, #8]
 8113a32:	e003      	b.n	8113a3c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8113a34:	68f8      	ldr	r0, [r7, #12]
 8113a36:	f001 fac3 	bl	8114fc0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8113a3a:	2300      	movs	r3, #0
}
 8113a3c:	4618      	mov	r0, r3
 8113a3e:	3710      	adds	r7, #16
 8113a40:	46bd      	mov	sp, r7
 8113a42:	bd80      	pop	{r7, pc}
 8113a44:	0811d808 	.word	0x0811d808
 8113a48:	0811d878 	.word	0x0811d878
 8113a4c:	0811d89c 	.word	0x0811d89c

08113a50 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8113a50:	b580      	push	{r7, lr}
 8113a52:	b082      	sub	sp, #8
 8113a54:	af00      	add	r7, sp, #0
 8113a56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8113a58:	687b      	ldr	r3, [r7, #4]
 8113a5a:	2b00      	cmp	r3, #0
 8113a5c:	d106      	bne.n	8113a6c <memp_malloc_pool+0x1c>
 8113a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8113a88 <memp_malloc_pool+0x38>)
 8113a60:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8113a64:	4909      	ldr	r1, [pc, #36]	@ (8113a8c <memp_malloc_pool+0x3c>)
 8113a66:	480a      	ldr	r0, [pc, #40]	@ (8113a90 <memp_malloc_pool+0x40>)
 8113a68:	f008 f9f0 	bl	811be4c <iprintf>
  if (desc == NULL) {
 8113a6c:	687b      	ldr	r3, [r7, #4]
 8113a6e:	2b00      	cmp	r3, #0
 8113a70:	d101      	bne.n	8113a76 <memp_malloc_pool+0x26>
    return NULL;
 8113a72:	2300      	movs	r3, #0
 8113a74:	e003      	b.n	8113a7e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8113a76:	6878      	ldr	r0, [r7, #4]
 8113a78:	f7ff ffb8 	bl	81139ec <do_memp_malloc_pool>
 8113a7c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8113a7e:	4618      	mov	r0, r3
 8113a80:	3708      	adds	r7, #8
 8113a82:	46bd      	mov	sp, r7
 8113a84:	bd80      	pop	{r7, pc}
 8113a86:	bf00      	nop
 8113a88:	0811d808 	.word	0x0811d808
 8113a8c:	0811d8c4 	.word	0x0811d8c4
 8113a90:	0811d89c 	.word	0x0811d89c

08113a94 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8113a94:	b580      	push	{r7, lr}
 8113a96:	b084      	sub	sp, #16
 8113a98:	af00      	add	r7, sp, #0
 8113a9a:	4603      	mov	r3, r0
 8113a9c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8113a9e:	79fb      	ldrb	r3, [r7, #7]
 8113aa0:	2b0c      	cmp	r3, #12
 8113aa2:	d908      	bls.n	8113ab6 <memp_malloc+0x22>
 8113aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8113ad0 <memp_malloc+0x3c>)
 8113aa6:	f240 1257 	movw	r2, #343	@ 0x157
 8113aaa:	490a      	ldr	r1, [pc, #40]	@ (8113ad4 <memp_malloc+0x40>)
 8113aac:	480a      	ldr	r0, [pc, #40]	@ (8113ad8 <memp_malloc+0x44>)
 8113aae:	f008 f9cd 	bl	811be4c <iprintf>
 8113ab2:	2300      	movs	r3, #0
 8113ab4:	e008      	b.n	8113ac8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8113ab6:	79fb      	ldrb	r3, [r7, #7]
 8113ab8:	4a08      	ldr	r2, [pc, #32]	@ (8113adc <memp_malloc+0x48>)
 8113aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8113abe:	4618      	mov	r0, r3
 8113ac0:	f7ff ff94 	bl	81139ec <do_memp_malloc_pool>
 8113ac4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8113ac6:	68fb      	ldr	r3, [r7, #12]
}
 8113ac8:	4618      	mov	r0, r3
 8113aca:	3710      	adds	r7, #16
 8113acc:	46bd      	mov	sp, r7
 8113ace:	bd80      	pop	{r7, pc}
 8113ad0:	0811d808 	.word	0x0811d808
 8113ad4:	0811d8d8 	.word	0x0811d8d8
 8113ad8:	0811d89c 	.word	0x0811d89c
 8113adc:	0811fcf0 	.word	0x0811fcf0

08113ae0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8113ae0:	b580      	push	{r7, lr}
 8113ae2:	b084      	sub	sp, #16
 8113ae4:	af00      	add	r7, sp, #0
 8113ae6:	6078      	str	r0, [r7, #4]
 8113ae8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8113aea:	683b      	ldr	r3, [r7, #0]
 8113aec:	f003 0303 	and.w	r3, r3, #3
 8113af0:	2b00      	cmp	r3, #0
 8113af2:	d006      	beq.n	8113b02 <do_memp_free_pool+0x22>
 8113af4:	4b0d      	ldr	r3, [pc, #52]	@ (8113b2c <do_memp_free_pool+0x4c>)
 8113af6:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8113afa:	490d      	ldr	r1, [pc, #52]	@ (8113b30 <do_memp_free_pool+0x50>)
 8113afc:	480d      	ldr	r0, [pc, #52]	@ (8113b34 <do_memp_free_pool+0x54>)
 8113afe:	f008 f9a5 	bl	811be4c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8113b02:	683b      	ldr	r3, [r7, #0]
 8113b04:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8113b06:	f001 fa4d 	bl	8114fa4 <sys_arch_protect>
 8113b0a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8113b0c:	687b      	ldr	r3, [r7, #4]
 8113b0e:	689b      	ldr	r3, [r3, #8]
 8113b10:	681a      	ldr	r2, [r3, #0]
 8113b12:	68fb      	ldr	r3, [r7, #12]
 8113b14:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8113b16:	687b      	ldr	r3, [r7, #4]
 8113b18:	689b      	ldr	r3, [r3, #8]
 8113b1a:	68fa      	ldr	r2, [r7, #12]
 8113b1c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8113b1e:	68b8      	ldr	r0, [r7, #8]
 8113b20:	f001 fa4e 	bl	8114fc0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8113b24:	bf00      	nop
 8113b26:	3710      	adds	r7, #16
 8113b28:	46bd      	mov	sp, r7
 8113b2a:	bd80      	pop	{r7, pc}
 8113b2c:	0811d808 	.word	0x0811d808
 8113b30:	0811d8f8 	.word	0x0811d8f8
 8113b34:	0811d89c 	.word	0x0811d89c

08113b38 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8113b38:	b580      	push	{r7, lr}
 8113b3a:	b082      	sub	sp, #8
 8113b3c:	af00      	add	r7, sp, #0
 8113b3e:	6078      	str	r0, [r7, #4]
 8113b40:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8113b42:	687b      	ldr	r3, [r7, #4]
 8113b44:	2b00      	cmp	r3, #0
 8113b46:	d106      	bne.n	8113b56 <memp_free_pool+0x1e>
 8113b48:	4b0a      	ldr	r3, [pc, #40]	@ (8113b74 <memp_free_pool+0x3c>)
 8113b4a:	f240 1295 	movw	r2, #405	@ 0x195
 8113b4e:	490a      	ldr	r1, [pc, #40]	@ (8113b78 <memp_free_pool+0x40>)
 8113b50:	480a      	ldr	r0, [pc, #40]	@ (8113b7c <memp_free_pool+0x44>)
 8113b52:	f008 f97b 	bl	811be4c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8113b56:	687b      	ldr	r3, [r7, #4]
 8113b58:	2b00      	cmp	r3, #0
 8113b5a:	d007      	beq.n	8113b6c <memp_free_pool+0x34>
 8113b5c:	683b      	ldr	r3, [r7, #0]
 8113b5e:	2b00      	cmp	r3, #0
 8113b60:	d004      	beq.n	8113b6c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8113b62:	6839      	ldr	r1, [r7, #0]
 8113b64:	6878      	ldr	r0, [r7, #4]
 8113b66:	f7ff ffbb 	bl	8113ae0 <do_memp_free_pool>
 8113b6a:	e000      	b.n	8113b6e <memp_free_pool+0x36>
    return;
 8113b6c:	bf00      	nop
}
 8113b6e:	3708      	adds	r7, #8
 8113b70:	46bd      	mov	sp, r7
 8113b72:	bd80      	pop	{r7, pc}
 8113b74:	0811d808 	.word	0x0811d808
 8113b78:	0811d8c4 	.word	0x0811d8c4
 8113b7c:	0811d89c 	.word	0x0811d89c

08113b80 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8113b80:	b580      	push	{r7, lr}
 8113b82:	b082      	sub	sp, #8
 8113b84:	af00      	add	r7, sp, #0
 8113b86:	4603      	mov	r3, r0
 8113b88:	6039      	str	r1, [r7, #0]
 8113b8a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8113b8c:	79fb      	ldrb	r3, [r7, #7]
 8113b8e:	2b0c      	cmp	r3, #12
 8113b90:	d907      	bls.n	8113ba2 <memp_free+0x22>
 8113b92:	4b0c      	ldr	r3, [pc, #48]	@ (8113bc4 <memp_free+0x44>)
 8113b94:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8113b98:	490b      	ldr	r1, [pc, #44]	@ (8113bc8 <memp_free+0x48>)
 8113b9a:	480c      	ldr	r0, [pc, #48]	@ (8113bcc <memp_free+0x4c>)
 8113b9c:	f008 f956 	bl	811be4c <iprintf>
 8113ba0:	e00c      	b.n	8113bbc <memp_free+0x3c>

  if (mem == NULL) {
 8113ba2:	683b      	ldr	r3, [r7, #0]
 8113ba4:	2b00      	cmp	r3, #0
 8113ba6:	d008      	beq.n	8113bba <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8113ba8:	79fb      	ldrb	r3, [r7, #7]
 8113baa:	4a09      	ldr	r2, [pc, #36]	@ (8113bd0 <memp_free+0x50>)
 8113bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8113bb0:	6839      	ldr	r1, [r7, #0]
 8113bb2:	4618      	mov	r0, r3
 8113bb4:	f7ff ff94 	bl	8113ae0 <do_memp_free_pool>
 8113bb8:	e000      	b.n	8113bbc <memp_free+0x3c>
    return;
 8113bba:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8113bbc:	3708      	adds	r7, #8
 8113bbe:	46bd      	mov	sp, r7
 8113bc0:	bd80      	pop	{r7, pc}
 8113bc2:	bf00      	nop
 8113bc4:	0811d808 	.word	0x0811d808
 8113bc8:	0811d918 	.word	0x0811d918
 8113bcc:	0811d89c 	.word	0x0811d89c
 8113bd0:	0811fcf0 	.word	0x0811fcf0

08113bd4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8113bd4:	b480      	push	{r7}
 8113bd6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8113bd8:	bf00      	nop
 8113bda:	46bd      	mov	sp, r7
 8113bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113be0:	4770      	bx	lr
	...

08113be4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8113be4:	b580      	push	{r7, lr}
 8113be6:	b086      	sub	sp, #24
 8113be8:	af00      	add	r7, sp, #0
 8113bea:	60f8      	str	r0, [r7, #12]
 8113bec:	60b9      	str	r1, [r7, #8]
 8113bee:	607a      	str	r2, [r7, #4]
 8113bf0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8113bf2:	68fb      	ldr	r3, [r7, #12]
 8113bf4:	2b00      	cmp	r3, #0
 8113bf6:	d108      	bne.n	8113c0a <netif_add+0x26>
 8113bf8:	4b57      	ldr	r3, [pc, #348]	@ (8113d58 <netif_add+0x174>)
 8113bfa:	f240 1227 	movw	r2, #295	@ 0x127
 8113bfe:	4957      	ldr	r1, [pc, #348]	@ (8113d5c <netif_add+0x178>)
 8113c00:	4857      	ldr	r0, [pc, #348]	@ (8113d60 <netif_add+0x17c>)
 8113c02:	f008 f923 	bl	811be4c <iprintf>
 8113c06:	2300      	movs	r3, #0
 8113c08:	e0a2      	b.n	8113d50 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8113c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113c0c:	2b00      	cmp	r3, #0
 8113c0e:	d108      	bne.n	8113c22 <netif_add+0x3e>
 8113c10:	4b51      	ldr	r3, [pc, #324]	@ (8113d58 <netif_add+0x174>)
 8113c12:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8113c16:	4953      	ldr	r1, [pc, #332]	@ (8113d64 <netif_add+0x180>)
 8113c18:	4851      	ldr	r0, [pc, #324]	@ (8113d60 <netif_add+0x17c>)
 8113c1a:	f008 f917 	bl	811be4c <iprintf>
 8113c1e:	2300      	movs	r3, #0
 8113c20:	e096      	b.n	8113d50 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8113c22:	68bb      	ldr	r3, [r7, #8]
 8113c24:	2b00      	cmp	r3, #0
 8113c26:	d101      	bne.n	8113c2c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8113c28:	4b4f      	ldr	r3, [pc, #316]	@ (8113d68 <netif_add+0x184>)
 8113c2a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8113c2c:	687b      	ldr	r3, [r7, #4]
 8113c2e:	2b00      	cmp	r3, #0
 8113c30:	d101      	bne.n	8113c36 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8113c32:	4b4d      	ldr	r3, [pc, #308]	@ (8113d68 <netif_add+0x184>)
 8113c34:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8113c36:	683b      	ldr	r3, [r7, #0]
 8113c38:	2b00      	cmp	r3, #0
 8113c3a:	d101      	bne.n	8113c40 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8113c3c:	4b4a      	ldr	r3, [pc, #296]	@ (8113d68 <netif_add+0x184>)
 8113c3e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8113c40:	68fb      	ldr	r3, [r7, #12]
 8113c42:	2200      	movs	r2, #0
 8113c44:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8113c46:	68fb      	ldr	r3, [r7, #12]
 8113c48:	2200      	movs	r2, #0
 8113c4a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8113c4c:	68fb      	ldr	r3, [r7, #12]
 8113c4e:	2200      	movs	r2, #0
 8113c50:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8113c52:	68fb      	ldr	r3, [r7, #12]
 8113c54:	4a45      	ldr	r2, [pc, #276]	@ (8113d6c <netif_add+0x188>)
 8113c56:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8113c58:	68fb      	ldr	r3, [r7, #12]
 8113c5a:	2200      	movs	r2, #0
 8113c5c:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8113c5e:	68fb      	ldr	r3, [r7, #12]
 8113c60:	2200      	movs	r2, #0
 8113c62:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8113c66:	68fb      	ldr	r3, [r7, #12]
 8113c68:	2200      	movs	r2, #0
 8113c6a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8113c6c:	68fb      	ldr	r3, [r7, #12]
 8113c6e:	6a3a      	ldr	r2, [r7, #32]
 8113c70:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8113c72:	4b3f      	ldr	r3, [pc, #252]	@ (8113d70 <netif_add+0x18c>)
 8113c74:	781a      	ldrb	r2, [r3, #0]
 8113c76:	68fb      	ldr	r3, [r7, #12]
 8113c78:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8113c7c:	68fb      	ldr	r3, [r7, #12]
 8113c7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8113c80:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8113c82:	683b      	ldr	r3, [r7, #0]
 8113c84:	687a      	ldr	r2, [r7, #4]
 8113c86:	68b9      	ldr	r1, [r7, #8]
 8113c88:	68f8      	ldr	r0, [r7, #12]
 8113c8a:	f000 f913 	bl	8113eb4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8113c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8113c90:	68f8      	ldr	r0, [r7, #12]
 8113c92:	4798      	blx	r3
 8113c94:	4603      	mov	r3, r0
 8113c96:	2b00      	cmp	r3, #0
 8113c98:	d001      	beq.n	8113c9e <netif_add+0xba>
    return NULL;
 8113c9a:	2300      	movs	r3, #0
 8113c9c:	e058      	b.n	8113d50 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8113c9e:	68fb      	ldr	r3, [r7, #12]
 8113ca0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8113ca4:	2bff      	cmp	r3, #255	@ 0xff
 8113ca6:	d103      	bne.n	8113cb0 <netif_add+0xcc>
        netif->num = 0;
 8113ca8:	68fb      	ldr	r3, [r7, #12]
 8113caa:	2200      	movs	r2, #0
 8113cac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8113cb0:	2300      	movs	r3, #0
 8113cb2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8113cb4:	4b2f      	ldr	r3, [pc, #188]	@ (8113d74 <netif_add+0x190>)
 8113cb6:	681b      	ldr	r3, [r3, #0]
 8113cb8:	617b      	str	r3, [r7, #20]
 8113cba:	e02b      	b.n	8113d14 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8113cbc:	697a      	ldr	r2, [r7, #20]
 8113cbe:	68fb      	ldr	r3, [r7, #12]
 8113cc0:	429a      	cmp	r2, r3
 8113cc2:	d106      	bne.n	8113cd2 <netif_add+0xee>
 8113cc4:	4b24      	ldr	r3, [pc, #144]	@ (8113d58 <netif_add+0x174>)
 8113cc6:	f240 128b 	movw	r2, #395	@ 0x18b
 8113cca:	492b      	ldr	r1, [pc, #172]	@ (8113d78 <netif_add+0x194>)
 8113ccc:	4824      	ldr	r0, [pc, #144]	@ (8113d60 <netif_add+0x17c>)
 8113cce:	f008 f8bd 	bl	811be4c <iprintf>
        num_netifs++;
 8113cd2:	693b      	ldr	r3, [r7, #16]
 8113cd4:	3301      	adds	r3, #1
 8113cd6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8113cd8:	693b      	ldr	r3, [r7, #16]
 8113cda:	2bff      	cmp	r3, #255	@ 0xff
 8113cdc:	dd06      	ble.n	8113cec <netif_add+0x108>
 8113cde:	4b1e      	ldr	r3, [pc, #120]	@ (8113d58 <netif_add+0x174>)
 8113ce0:	f240 128d 	movw	r2, #397	@ 0x18d
 8113ce4:	4925      	ldr	r1, [pc, #148]	@ (8113d7c <netif_add+0x198>)
 8113ce6:	481e      	ldr	r0, [pc, #120]	@ (8113d60 <netif_add+0x17c>)
 8113ce8:	f008 f8b0 	bl	811be4c <iprintf>
        if (netif2->num == netif->num) {
 8113cec:	697b      	ldr	r3, [r7, #20]
 8113cee:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8113cf2:	68fb      	ldr	r3, [r7, #12]
 8113cf4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8113cf8:	429a      	cmp	r2, r3
 8113cfa:	d108      	bne.n	8113d0e <netif_add+0x12a>
          netif->num++;
 8113cfc:	68fb      	ldr	r3, [r7, #12]
 8113cfe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8113d02:	3301      	adds	r3, #1
 8113d04:	b2da      	uxtb	r2, r3
 8113d06:	68fb      	ldr	r3, [r7, #12]
 8113d08:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8113d0c:	e005      	b.n	8113d1a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8113d0e:	697b      	ldr	r3, [r7, #20]
 8113d10:	681b      	ldr	r3, [r3, #0]
 8113d12:	617b      	str	r3, [r7, #20]
 8113d14:	697b      	ldr	r3, [r7, #20]
 8113d16:	2b00      	cmp	r3, #0
 8113d18:	d1d0      	bne.n	8113cbc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8113d1a:	697b      	ldr	r3, [r7, #20]
 8113d1c:	2b00      	cmp	r3, #0
 8113d1e:	d1be      	bne.n	8113c9e <netif_add+0xba>
  }
  if (netif->num == 254) {
 8113d20:	68fb      	ldr	r3, [r7, #12]
 8113d22:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8113d26:	2bfe      	cmp	r3, #254	@ 0xfe
 8113d28:	d103      	bne.n	8113d32 <netif_add+0x14e>
    netif_num = 0;
 8113d2a:	4b11      	ldr	r3, [pc, #68]	@ (8113d70 <netif_add+0x18c>)
 8113d2c:	2200      	movs	r2, #0
 8113d2e:	701a      	strb	r2, [r3, #0]
 8113d30:	e006      	b.n	8113d40 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8113d32:	68fb      	ldr	r3, [r7, #12]
 8113d34:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8113d38:	3301      	adds	r3, #1
 8113d3a:	b2da      	uxtb	r2, r3
 8113d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8113d70 <netif_add+0x18c>)
 8113d3e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8113d40:	4b0c      	ldr	r3, [pc, #48]	@ (8113d74 <netif_add+0x190>)
 8113d42:	681a      	ldr	r2, [r3, #0]
 8113d44:	68fb      	ldr	r3, [r7, #12]
 8113d46:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8113d48:	4a0a      	ldr	r2, [pc, #40]	@ (8113d74 <netif_add+0x190>)
 8113d4a:	68fb      	ldr	r3, [r7, #12]
 8113d4c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8113d4e:	68fb      	ldr	r3, [r7, #12]
}
 8113d50:	4618      	mov	r0, r3
 8113d52:	3718      	adds	r7, #24
 8113d54:	46bd      	mov	sp, r7
 8113d56:	bd80      	pop	{r7, pc}
 8113d58:	0811d934 	.word	0x0811d934
 8113d5c:	0811da04 	.word	0x0811da04
 8113d60:	0811d9c0 	.word	0x0811d9c0
 8113d64:	0811da20 	.word	0x0811da20
 8113d68:	0811fc50 	.word	0x0811fc50
 8113d6c:	0811418f 	.word	0x0811418f
 8113d70:	10011d0c 	.word	0x10011d0c
 8113d74:	10011d04 	.word	0x10011d04
 8113d78:	0811da44 	.word	0x0811da44
 8113d7c:	0811da58 	.word	0x0811da58

08113d80 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8113d80:	b580      	push	{r7, lr}
 8113d82:	b082      	sub	sp, #8
 8113d84:	af00      	add	r7, sp, #0
 8113d86:	6078      	str	r0, [r7, #4]
 8113d88:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8113d8a:	6839      	ldr	r1, [r7, #0]
 8113d8c:	6878      	ldr	r0, [r7, #4]
 8113d8e:	f002 fe4f 	bl	8116a30 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8113d92:	6839      	ldr	r1, [r7, #0]
 8113d94:	6878      	ldr	r0, [r7, #4]
 8113d96:	f007 fd59 	bl	811b84c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8113d9a:	bf00      	nop
 8113d9c:	3708      	adds	r7, #8
 8113d9e:	46bd      	mov	sp, r7
 8113da0:	bd80      	pop	{r7, pc}
	...

08113da4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8113da4:	b580      	push	{r7, lr}
 8113da6:	b086      	sub	sp, #24
 8113da8:	af00      	add	r7, sp, #0
 8113daa:	60f8      	str	r0, [r7, #12]
 8113dac:	60b9      	str	r1, [r7, #8]
 8113dae:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8113db0:	68bb      	ldr	r3, [r7, #8]
 8113db2:	2b00      	cmp	r3, #0
 8113db4:	d106      	bne.n	8113dc4 <netif_do_set_ipaddr+0x20>
 8113db6:	4b1d      	ldr	r3, [pc, #116]	@ (8113e2c <netif_do_set_ipaddr+0x88>)
 8113db8:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8113dbc:	491c      	ldr	r1, [pc, #112]	@ (8113e30 <netif_do_set_ipaddr+0x8c>)
 8113dbe:	481d      	ldr	r0, [pc, #116]	@ (8113e34 <netif_do_set_ipaddr+0x90>)
 8113dc0:	f008 f844 	bl	811be4c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8113dc4:	687b      	ldr	r3, [r7, #4]
 8113dc6:	2b00      	cmp	r3, #0
 8113dc8:	d106      	bne.n	8113dd8 <netif_do_set_ipaddr+0x34>
 8113dca:	4b18      	ldr	r3, [pc, #96]	@ (8113e2c <netif_do_set_ipaddr+0x88>)
 8113dcc:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8113dd0:	4917      	ldr	r1, [pc, #92]	@ (8113e30 <netif_do_set_ipaddr+0x8c>)
 8113dd2:	4818      	ldr	r0, [pc, #96]	@ (8113e34 <netif_do_set_ipaddr+0x90>)
 8113dd4:	f008 f83a 	bl	811be4c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8113dd8:	68bb      	ldr	r3, [r7, #8]
 8113dda:	681a      	ldr	r2, [r3, #0]
 8113ddc:	68fb      	ldr	r3, [r7, #12]
 8113dde:	3304      	adds	r3, #4
 8113de0:	681b      	ldr	r3, [r3, #0]
 8113de2:	429a      	cmp	r2, r3
 8113de4:	d01c      	beq.n	8113e20 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8113de6:	68bb      	ldr	r3, [r7, #8]
 8113de8:	681b      	ldr	r3, [r3, #0]
 8113dea:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8113dec:	68fb      	ldr	r3, [r7, #12]
 8113dee:	3304      	adds	r3, #4
 8113df0:	681a      	ldr	r2, [r3, #0]
 8113df2:	687b      	ldr	r3, [r7, #4]
 8113df4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8113df6:	f107 0314 	add.w	r3, r7, #20
 8113dfa:	4619      	mov	r1, r3
 8113dfc:	6878      	ldr	r0, [r7, #4]
 8113dfe:	f7ff ffbf 	bl	8113d80 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8113e02:	68bb      	ldr	r3, [r7, #8]
 8113e04:	2b00      	cmp	r3, #0
 8113e06:	d002      	beq.n	8113e0e <netif_do_set_ipaddr+0x6a>
 8113e08:	68bb      	ldr	r3, [r7, #8]
 8113e0a:	681b      	ldr	r3, [r3, #0]
 8113e0c:	e000      	b.n	8113e10 <netif_do_set_ipaddr+0x6c>
 8113e0e:	2300      	movs	r3, #0
 8113e10:	68fa      	ldr	r2, [r7, #12]
 8113e12:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8113e14:	2101      	movs	r1, #1
 8113e16:	68f8      	ldr	r0, [r7, #12]
 8113e18:	f000 f8d2 	bl	8113fc0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8113e1c:	2301      	movs	r3, #1
 8113e1e:	e000      	b.n	8113e22 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8113e20:	2300      	movs	r3, #0
}
 8113e22:	4618      	mov	r0, r3
 8113e24:	3718      	adds	r7, #24
 8113e26:	46bd      	mov	sp, r7
 8113e28:	bd80      	pop	{r7, pc}
 8113e2a:	bf00      	nop
 8113e2c:	0811d934 	.word	0x0811d934
 8113e30:	0811da88 	.word	0x0811da88
 8113e34:	0811d9c0 	.word	0x0811d9c0

08113e38 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8113e38:	b480      	push	{r7}
 8113e3a:	b085      	sub	sp, #20
 8113e3c:	af00      	add	r7, sp, #0
 8113e3e:	60f8      	str	r0, [r7, #12]
 8113e40:	60b9      	str	r1, [r7, #8]
 8113e42:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8113e44:	68bb      	ldr	r3, [r7, #8]
 8113e46:	681a      	ldr	r2, [r3, #0]
 8113e48:	68fb      	ldr	r3, [r7, #12]
 8113e4a:	3308      	adds	r3, #8
 8113e4c:	681b      	ldr	r3, [r3, #0]
 8113e4e:	429a      	cmp	r2, r3
 8113e50:	d00a      	beq.n	8113e68 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8113e52:	68bb      	ldr	r3, [r7, #8]
 8113e54:	2b00      	cmp	r3, #0
 8113e56:	d002      	beq.n	8113e5e <netif_do_set_netmask+0x26>
 8113e58:	68bb      	ldr	r3, [r7, #8]
 8113e5a:	681b      	ldr	r3, [r3, #0]
 8113e5c:	e000      	b.n	8113e60 <netif_do_set_netmask+0x28>
 8113e5e:	2300      	movs	r3, #0
 8113e60:	68fa      	ldr	r2, [r7, #12]
 8113e62:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8113e64:	2301      	movs	r3, #1
 8113e66:	e000      	b.n	8113e6a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8113e68:	2300      	movs	r3, #0
}
 8113e6a:	4618      	mov	r0, r3
 8113e6c:	3714      	adds	r7, #20
 8113e6e:	46bd      	mov	sp, r7
 8113e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113e74:	4770      	bx	lr

08113e76 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8113e76:	b480      	push	{r7}
 8113e78:	b085      	sub	sp, #20
 8113e7a:	af00      	add	r7, sp, #0
 8113e7c:	60f8      	str	r0, [r7, #12]
 8113e7e:	60b9      	str	r1, [r7, #8]
 8113e80:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8113e82:	68bb      	ldr	r3, [r7, #8]
 8113e84:	681a      	ldr	r2, [r3, #0]
 8113e86:	68fb      	ldr	r3, [r7, #12]
 8113e88:	330c      	adds	r3, #12
 8113e8a:	681b      	ldr	r3, [r3, #0]
 8113e8c:	429a      	cmp	r2, r3
 8113e8e:	d00a      	beq.n	8113ea6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8113e90:	68bb      	ldr	r3, [r7, #8]
 8113e92:	2b00      	cmp	r3, #0
 8113e94:	d002      	beq.n	8113e9c <netif_do_set_gw+0x26>
 8113e96:	68bb      	ldr	r3, [r7, #8]
 8113e98:	681b      	ldr	r3, [r3, #0]
 8113e9a:	e000      	b.n	8113e9e <netif_do_set_gw+0x28>
 8113e9c:	2300      	movs	r3, #0
 8113e9e:	68fa      	ldr	r2, [r7, #12]
 8113ea0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8113ea2:	2301      	movs	r3, #1
 8113ea4:	e000      	b.n	8113ea8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8113ea6:	2300      	movs	r3, #0
}
 8113ea8:	4618      	mov	r0, r3
 8113eaa:	3714      	adds	r7, #20
 8113eac:	46bd      	mov	sp, r7
 8113eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113eb2:	4770      	bx	lr

08113eb4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8113eb4:	b580      	push	{r7, lr}
 8113eb6:	b088      	sub	sp, #32
 8113eb8:	af00      	add	r7, sp, #0
 8113eba:	60f8      	str	r0, [r7, #12]
 8113ebc:	60b9      	str	r1, [r7, #8]
 8113ebe:	607a      	str	r2, [r7, #4]
 8113ec0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8113ec2:	2300      	movs	r3, #0
 8113ec4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8113ec6:	2300      	movs	r3, #0
 8113ec8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8113eca:	68bb      	ldr	r3, [r7, #8]
 8113ecc:	2b00      	cmp	r3, #0
 8113ece:	d101      	bne.n	8113ed4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8113ed0:	4b1c      	ldr	r3, [pc, #112]	@ (8113f44 <netif_set_addr+0x90>)
 8113ed2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8113ed4:	687b      	ldr	r3, [r7, #4]
 8113ed6:	2b00      	cmp	r3, #0
 8113ed8:	d101      	bne.n	8113ede <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8113eda:	4b1a      	ldr	r3, [pc, #104]	@ (8113f44 <netif_set_addr+0x90>)
 8113edc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8113ede:	683b      	ldr	r3, [r7, #0]
 8113ee0:	2b00      	cmp	r3, #0
 8113ee2:	d101      	bne.n	8113ee8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8113ee4:	4b17      	ldr	r3, [pc, #92]	@ (8113f44 <netif_set_addr+0x90>)
 8113ee6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8113ee8:	68bb      	ldr	r3, [r7, #8]
 8113eea:	2b00      	cmp	r3, #0
 8113eec:	d003      	beq.n	8113ef6 <netif_set_addr+0x42>
 8113eee:	68bb      	ldr	r3, [r7, #8]
 8113ef0:	681b      	ldr	r3, [r3, #0]
 8113ef2:	2b00      	cmp	r3, #0
 8113ef4:	d101      	bne.n	8113efa <netif_set_addr+0x46>
 8113ef6:	2301      	movs	r3, #1
 8113ef8:	e000      	b.n	8113efc <netif_set_addr+0x48>
 8113efa:	2300      	movs	r3, #0
 8113efc:	617b      	str	r3, [r7, #20]
  if (remove) {
 8113efe:	697b      	ldr	r3, [r7, #20]
 8113f00:	2b00      	cmp	r3, #0
 8113f02:	d006      	beq.n	8113f12 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8113f04:	f107 0310 	add.w	r3, r7, #16
 8113f08:	461a      	mov	r2, r3
 8113f0a:	68b9      	ldr	r1, [r7, #8]
 8113f0c:	68f8      	ldr	r0, [r7, #12]
 8113f0e:	f7ff ff49 	bl	8113da4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8113f12:	69fa      	ldr	r2, [r7, #28]
 8113f14:	6879      	ldr	r1, [r7, #4]
 8113f16:	68f8      	ldr	r0, [r7, #12]
 8113f18:	f7ff ff8e 	bl	8113e38 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8113f1c:	69ba      	ldr	r2, [r7, #24]
 8113f1e:	6839      	ldr	r1, [r7, #0]
 8113f20:	68f8      	ldr	r0, [r7, #12]
 8113f22:	f7ff ffa8 	bl	8113e76 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8113f26:	697b      	ldr	r3, [r7, #20]
 8113f28:	2b00      	cmp	r3, #0
 8113f2a:	d106      	bne.n	8113f3a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8113f2c:	f107 0310 	add.w	r3, r7, #16
 8113f30:	461a      	mov	r2, r3
 8113f32:	68b9      	ldr	r1, [r7, #8]
 8113f34:	68f8      	ldr	r0, [r7, #12]
 8113f36:	f7ff ff35 	bl	8113da4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8113f3a:	bf00      	nop
 8113f3c:	3720      	adds	r7, #32
 8113f3e:	46bd      	mov	sp, r7
 8113f40:	bd80      	pop	{r7, pc}
 8113f42:	bf00      	nop
 8113f44:	0811fc50 	.word	0x0811fc50

08113f48 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8113f48:	b480      	push	{r7}
 8113f4a:	b083      	sub	sp, #12
 8113f4c:	af00      	add	r7, sp, #0
 8113f4e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8113f50:	4a04      	ldr	r2, [pc, #16]	@ (8113f64 <netif_set_default+0x1c>)
 8113f52:	687b      	ldr	r3, [r7, #4]
 8113f54:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8113f56:	bf00      	nop
 8113f58:	370c      	adds	r7, #12
 8113f5a:	46bd      	mov	sp, r7
 8113f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8113f60:	4770      	bx	lr
 8113f62:	bf00      	nop
 8113f64:	10011d08 	.word	0x10011d08

08113f68 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8113f68:	b580      	push	{r7, lr}
 8113f6a:	b082      	sub	sp, #8
 8113f6c:	af00      	add	r7, sp, #0
 8113f6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8113f70:	687b      	ldr	r3, [r7, #4]
 8113f72:	2b00      	cmp	r3, #0
 8113f74:	d107      	bne.n	8113f86 <netif_set_up+0x1e>
 8113f76:	4b0f      	ldr	r3, [pc, #60]	@ (8113fb4 <netif_set_up+0x4c>)
 8113f78:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8113f7c:	490e      	ldr	r1, [pc, #56]	@ (8113fb8 <netif_set_up+0x50>)
 8113f7e:	480f      	ldr	r0, [pc, #60]	@ (8113fbc <netif_set_up+0x54>)
 8113f80:	f007 ff64 	bl	811be4c <iprintf>
 8113f84:	e013      	b.n	8113fae <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8113f86:	687b      	ldr	r3, [r7, #4]
 8113f88:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8113f8c:	f003 0301 	and.w	r3, r3, #1
 8113f90:	2b00      	cmp	r3, #0
 8113f92:	d10c      	bne.n	8113fae <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8113f94:	687b      	ldr	r3, [r7, #4]
 8113f96:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8113f9a:	f043 0301 	orr.w	r3, r3, #1
 8113f9e:	b2da      	uxtb	r2, r3
 8113fa0:	687b      	ldr	r3, [r7, #4]
 8113fa2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8113fa6:	2103      	movs	r1, #3
 8113fa8:	6878      	ldr	r0, [r7, #4]
 8113faa:	f000 f809 	bl	8113fc0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8113fae:	3708      	adds	r7, #8
 8113fb0:	46bd      	mov	sp, r7
 8113fb2:	bd80      	pop	{r7, pc}
 8113fb4:	0811d934 	.word	0x0811d934
 8113fb8:	0811daf8 	.word	0x0811daf8
 8113fbc:	0811d9c0 	.word	0x0811d9c0

08113fc0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8113fc0:	b580      	push	{r7, lr}
 8113fc2:	b082      	sub	sp, #8
 8113fc4:	af00      	add	r7, sp, #0
 8113fc6:	6078      	str	r0, [r7, #4]
 8113fc8:	460b      	mov	r3, r1
 8113fca:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8113fcc:	687b      	ldr	r3, [r7, #4]
 8113fce:	2b00      	cmp	r3, #0
 8113fd0:	d106      	bne.n	8113fe0 <netif_issue_reports+0x20>
 8113fd2:	4b18      	ldr	r3, [pc, #96]	@ (8114034 <netif_issue_reports+0x74>)
 8113fd4:	f240 326d 	movw	r2, #877	@ 0x36d
 8113fd8:	4917      	ldr	r1, [pc, #92]	@ (8114038 <netif_issue_reports+0x78>)
 8113fda:	4818      	ldr	r0, [pc, #96]	@ (811403c <netif_issue_reports+0x7c>)
 8113fdc:	f007 ff36 	bl	811be4c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8113fe0:	687b      	ldr	r3, [r7, #4]
 8113fe2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8113fe6:	f003 0304 	and.w	r3, r3, #4
 8113fea:	2b00      	cmp	r3, #0
 8113fec:	d01e      	beq.n	811402c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8113fee:	687b      	ldr	r3, [r7, #4]
 8113ff0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8113ff4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8113ff8:	2b00      	cmp	r3, #0
 8113ffa:	d017      	beq.n	811402c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8113ffc:	78fb      	ldrb	r3, [r7, #3]
 8113ffe:	f003 0301 	and.w	r3, r3, #1
 8114002:	2b00      	cmp	r3, #0
 8114004:	d013      	beq.n	811402e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8114006:	687b      	ldr	r3, [r7, #4]
 8114008:	3304      	adds	r3, #4
 811400a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 811400c:	2b00      	cmp	r3, #0
 811400e:	d00e      	beq.n	811402e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8114010:	687b      	ldr	r3, [r7, #4]
 8114012:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8114016:	f003 0308 	and.w	r3, r3, #8
 811401a:	2b00      	cmp	r3, #0
 811401c:	d007      	beq.n	811402e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 811401e:	687b      	ldr	r3, [r7, #4]
 8114020:	3304      	adds	r3, #4
 8114022:	4619      	mov	r1, r3
 8114024:	6878      	ldr	r0, [r7, #4]
 8114026:	f7fd fc31 	bl	811188c <etharp_request>
 811402a:	e000      	b.n	811402e <netif_issue_reports+0x6e>
    return;
 811402c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 811402e:	3708      	adds	r7, #8
 8114030:	46bd      	mov	sp, r7
 8114032:	bd80      	pop	{r7, pc}
 8114034:	0811d934 	.word	0x0811d934
 8114038:	0811db14 	.word	0x0811db14
 811403c:	0811d9c0 	.word	0x0811d9c0

08114040 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8114040:	b580      	push	{r7, lr}
 8114042:	b082      	sub	sp, #8
 8114044:	af00      	add	r7, sp, #0
 8114046:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8114048:	687b      	ldr	r3, [r7, #4]
 811404a:	2b00      	cmp	r3, #0
 811404c:	d107      	bne.n	811405e <netif_set_down+0x1e>
 811404e:	4b12      	ldr	r3, [pc, #72]	@ (8114098 <netif_set_down+0x58>)
 8114050:	f240 329b 	movw	r2, #923	@ 0x39b
 8114054:	4911      	ldr	r1, [pc, #68]	@ (811409c <netif_set_down+0x5c>)
 8114056:	4812      	ldr	r0, [pc, #72]	@ (81140a0 <netif_set_down+0x60>)
 8114058:	f007 fef8 	bl	811be4c <iprintf>
 811405c:	e019      	b.n	8114092 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 811405e:	687b      	ldr	r3, [r7, #4]
 8114060:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8114064:	f003 0301 	and.w	r3, r3, #1
 8114068:	2b00      	cmp	r3, #0
 811406a:	d012      	beq.n	8114092 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 811406c:	687b      	ldr	r3, [r7, #4]
 811406e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8114072:	f023 0301 	bic.w	r3, r3, #1
 8114076:	b2da      	uxtb	r2, r3
 8114078:	687b      	ldr	r3, [r7, #4]
 811407a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 811407e:	687b      	ldr	r3, [r7, #4]
 8114080:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8114084:	f003 0308 	and.w	r3, r3, #8
 8114088:	2b00      	cmp	r3, #0
 811408a:	d002      	beq.n	8114092 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 811408c:	6878      	ldr	r0, [r7, #4]
 811408e:	f7fc ffbb 	bl	8111008 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8114092:	3708      	adds	r7, #8
 8114094:	46bd      	mov	sp, r7
 8114096:	bd80      	pop	{r7, pc}
 8114098:	0811d934 	.word	0x0811d934
 811409c:	0811db38 	.word	0x0811db38
 81140a0:	0811d9c0 	.word	0x0811d9c0

081140a4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 81140a4:	b580      	push	{r7, lr}
 81140a6:	b082      	sub	sp, #8
 81140a8:	af00      	add	r7, sp, #0
 81140aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 81140ac:	687b      	ldr	r3, [r7, #4]
 81140ae:	2b00      	cmp	r3, #0
 81140b0:	d107      	bne.n	81140c2 <netif_set_link_up+0x1e>
 81140b2:	4b13      	ldr	r3, [pc, #76]	@ (8114100 <netif_set_link_up+0x5c>)
 81140b4:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 81140b8:	4912      	ldr	r1, [pc, #72]	@ (8114104 <netif_set_link_up+0x60>)
 81140ba:	4813      	ldr	r0, [pc, #76]	@ (8114108 <netif_set_link_up+0x64>)
 81140bc:	f007 fec6 	bl	811be4c <iprintf>
 81140c0:	e01b      	b.n	81140fa <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 81140c2:	687b      	ldr	r3, [r7, #4]
 81140c4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 81140c8:	f003 0304 	and.w	r3, r3, #4
 81140cc:	2b00      	cmp	r3, #0
 81140ce:	d114      	bne.n	81140fa <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 81140d0:	687b      	ldr	r3, [r7, #4]
 81140d2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 81140d6:	f043 0304 	orr.w	r3, r3, #4
 81140da:	b2da      	uxtb	r2, r3
 81140dc:	687b      	ldr	r3, [r7, #4]
 81140de:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 81140e2:	2103      	movs	r1, #3
 81140e4:	6878      	ldr	r0, [r7, #4]
 81140e6:	f7ff ff6b 	bl	8113fc0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 81140ea:	687b      	ldr	r3, [r7, #4]
 81140ec:	69db      	ldr	r3, [r3, #28]
 81140ee:	2b00      	cmp	r3, #0
 81140f0:	d003      	beq.n	81140fa <netif_set_link_up+0x56>
 81140f2:	687b      	ldr	r3, [r7, #4]
 81140f4:	69db      	ldr	r3, [r3, #28]
 81140f6:	6878      	ldr	r0, [r7, #4]
 81140f8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 81140fa:	3708      	adds	r7, #8
 81140fc:	46bd      	mov	sp, r7
 81140fe:	bd80      	pop	{r7, pc}
 8114100:	0811d934 	.word	0x0811d934
 8114104:	0811db58 	.word	0x0811db58
 8114108:	0811d9c0 	.word	0x0811d9c0

0811410c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 811410c:	b580      	push	{r7, lr}
 811410e:	b082      	sub	sp, #8
 8114110:	af00      	add	r7, sp, #0
 8114112:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8114114:	687b      	ldr	r3, [r7, #4]
 8114116:	2b00      	cmp	r3, #0
 8114118:	d107      	bne.n	811412a <netif_set_link_down+0x1e>
 811411a:	4b11      	ldr	r3, [pc, #68]	@ (8114160 <netif_set_link_down+0x54>)
 811411c:	f240 4206 	movw	r2, #1030	@ 0x406
 8114120:	4910      	ldr	r1, [pc, #64]	@ (8114164 <netif_set_link_down+0x58>)
 8114122:	4811      	ldr	r0, [pc, #68]	@ (8114168 <netif_set_link_down+0x5c>)
 8114124:	f007 fe92 	bl	811be4c <iprintf>
 8114128:	e017      	b.n	811415a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 811412a:	687b      	ldr	r3, [r7, #4]
 811412c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8114130:	f003 0304 	and.w	r3, r3, #4
 8114134:	2b00      	cmp	r3, #0
 8114136:	d010      	beq.n	811415a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8114138:	687b      	ldr	r3, [r7, #4]
 811413a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811413e:	f023 0304 	bic.w	r3, r3, #4
 8114142:	b2da      	uxtb	r2, r3
 8114144:	687b      	ldr	r3, [r7, #4]
 8114146:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 811414a:	687b      	ldr	r3, [r7, #4]
 811414c:	69db      	ldr	r3, [r3, #28]
 811414e:	2b00      	cmp	r3, #0
 8114150:	d003      	beq.n	811415a <netif_set_link_down+0x4e>
 8114152:	687b      	ldr	r3, [r7, #4]
 8114154:	69db      	ldr	r3, [r3, #28]
 8114156:	6878      	ldr	r0, [r7, #4]
 8114158:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 811415a:	3708      	adds	r7, #8
 811415c:	46bd      	mov	sp, r7
 811415e:	bd80      	pop	{r7, pc}
 8114160:	0811d934 	.word	0x0811d934
 8114164:	0811db7c 	.word	0x0811db7c
 8114168:	0811d9c0 	.word	0x0811d9c0

0811416c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 811416c:	b480      	push	{r7}
 811416e:	b083      	sub	sp, #12
 8114170:	af00      	add	r7, sp, #0
 8114172:	6078      	str	r0, [r7, #4]
 8114174:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8114176:	687b      	ldr	r3, [r7, #4]
 8114178:	2b00      	cmp	r3, #0
 811417a:	d002      	beq.n	8114182 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 811417c:	687b      	ldr	r3, [r7, #4]
 811417e:	683a      	ldr	r2, [r7, #0]
 8114180:	61da      	str	r2, [r3, #28]
  }
}
 8114182:	bf00      	nop
 8114184:	370c      	adds	r7, #12
 8114186:	46bd      	mov	sp, r7
 8114188:	f85d 7b04 	ldr.w	r7, [sp], #4
 811418c:	4770      	bx	lr

0811418e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 811418e:	b480      	push	{r7}
 8114190:	b085      	sub	sp, #20
 8114192:	af00      	add	r7, sp, #0
 8114194:	60f8      	str	r0, [r7, #12]
 8114196:	60b9      	str	r1, [r7, #8]
 8114198:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 811419a:	f06f 030b 	mvn.w	r3, #11
}
 811419e:	4618      	mov	r0, r3
 81141a0:	3714      	adds	r7, #20
 81141a2:	46bd      	mov	sp, r7
 81141a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81141a8:	4770      	bx	lr
	...

081141ac <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 81141ac:	b480      	push	{r7}
 81141ae:	b085      	sub	sp, #20
 81141b0:	af00      	add	r7, sp, #0
 81141b2:	4603      	mov	r3, r0
 81141b4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 81141b6:	79fb      	ldrb	r3, [r7, #7]
 81141b8:	2b00      	cmp	r3, #0
 81141ba:	d013      	beq.n	81141e4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 81141bc:	4b0d      	ldr	r3, [pc, #52]	@ (81141f4 <netif_get_by_index+0x48>)
 81141be:	681b      	ldr	r3, [r3, #0]
 81141c0:	60fb      	str	r3, [r7, #12]
 81141c2:	e00c      	b.n	81141de <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 81141c4:	68fb      	ldr	r3, [r7, #12]
 81141c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 81141ca:	3301      	adds	r3, #1
 81141cc:	b2db      	uxtb	r3, r3
 81141ce:	79fa      	ldrb	r2, [r7, #7]
 81141d0:	429a      	cmp	r2, r3
 81141d2:	d101      	bne.n	81141d8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 81141d4:	68fb      	ldr	r3, [r7, #12]
 81141d6:	e006      	b.n	81141e6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 81141d8:	68fb      	ldr	r3, [r7, #12]
 81141da:	681b      	ldr	r3, [r3, #0]
 81141dc:	60fb      	str	r3, [r7, #12]
 81141de:	68fb      	ldr	r3, [r7, #12]
 81141e0:	2b00      	cmp	r3, #0
 81141e2:	d1ef      	bne.n	81141c4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 81141e4:	2300      	movs	r3, #0
}
 81141e6:	4618      	mov	r0, r3
 81141e8:	3714      	adds	r7, #20
 81141ea:	46bd      	mov	sp, r7
 81141ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81141f0:	4770      	bx	lr
 81141f2:	bf00      	nop
 81141f4:	10011d04 	.word	0x10011d04

081141f8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 81141f8:	b580      	push	{r7, lr}
 81141fa:	b082      	sub	sp, #8
 81141fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 81141fe:	f000 fed1 	bl	8114fa4 <sys_arch_protect>
 8114202:	6038      	str	r0, [r7, #0]
 8114204:	4b0d      	ldr	r3, [pc, #52]	@ (811423c <pbuf_free_ooseq+0x44>)
 8114206:	2200      	movs	r2, #0
 8114208:	701a      	strb	r2, [r3, #0]
 811420a:	6838      	ldr	r0, [r7, #0]
 811420c:	f000 fed8 	bl	8114fc0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8114210:	4b0b      	ldr	r3, [pc, #44]	@ (8114240 <pbuf_free_ooseq+0x48>)
 8114212:	681b      	ldr	r3, [r3, #0]
 8114214:	607b      	str	r3, [r7, #4]
 8114216:	e00a      	b.n	811422e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8114218:	687b      	ldr	r3, [r7, #4]
 811421a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811421c:	2b00      	cmp	r3, #0
 811421e:	d003      	beq.n	8114228 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8114220:	6878      	ldr	r0, [r7, #4]
 8114222:	f002 fc43 	bl	8116aac <tcp_free_ooseq>
      return;
 8114226:	e005      	b.n	8114234 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8114228:	687b      	ldr	r3, [r7, #4]
 811422a:	68db      	ldr	r3, [r3, #12]
 811422c:	607b      	str	r3, [r7, #4]
 811422e:	687b      	ldr	r3, [r7, #4]
 8114230:	2b00      	cmp	r3, #0
 8114232:	d1f1      	bne.n	8114218 <pbuf_free_ooseq+0x20>
    }
  }
}
 8114234:	3708      	adds	r7, #8
 8114236:	46bd      	mov	sp, r7
 8114238:	bd80      	pop	{r7, pc}
 811423a:	bf00      	nop
 811423c:	10011d0d 	.word	0x10011d0d
 8114240:	10011d20 	.word	0x10011d20

08114244 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8114244:	b580      	push	{r7, lr}
 8114246:	b082      	sub	sp, #8
 8114248:	af00      	add	r7, sp, #0
 811424a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 811424c:	f7ff ffd4 	bl	81141f8 <pbuf_free_ooseq>
}
 8114250:	bf00      	nop
 8114252:	3708      	adds	r7, #8
 8114254:	46bd      	mov	sp, r7
 8114256:	bd80      	pop	{r7, pc}

08114258 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8114258:	b580      	push	{r7, lr}
 811425a:	b082      	sub	sp, #8
 811425c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 811425e:	f000 fea1 	bl	8114fa4 <sys_arch_protect>
 8114262:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8114264:	4b0f      	ldr	r3, [pc, #60]	@ (81142a4 <pbuf_pool_is_empty+0x4c>)
 8114266:	781b      	ldrb	r3, [r3, #0]
 8114268:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 811426a:	4b0e      	ldr	r3, [pc, #56]	@ (81142a4 <pbuf_pool_is_empty+0x4c>)
 811426c:	2201      	movs	r2, #1
 811426e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8114270:	6878      	ldr	r0, [r7, #4]
 8114272:	f000 fea5 	bl	8114fc0 <sys_arch_unprotect>

  if (!queued) {
 8114276:	78fb      	ldrb	r3, [r7, #3]
 8114278:	2b00      	cmp	r3, #0
 811427a:	d10f      	bne.n	811429c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 811427c:	2100      	movs	r1, #0
 811427e:	480a      	ldr	r0, [pc, #40]	@ (81142a8 <pbuf_pool_is_empty+0x50>)
 8114280:	f006 ff32 	bl	811b0e8 <tcpip_try_callback>
 8114284:	4603      	mov	r3, r0
 8114286:	2b00      	cmp	r3, #0
 8114288:	d008      	beq.n	811429c <pbuf_pool_is_empty+0x44>
 811428a:	f000 fe8b 	bl	8114fa4 <sys_arch_protect>
 811428e:	6078      	str	r0, [r7, #4]
 8114290:	4b04      	ldr	r3, [pc, #16]	@ (81142a4 <pbuf_pool_is_empty+0x4c>)
 8114292:	2200      	movs	r2, #0
 8114294:	701a      	strb	r2, [r3, #0]
 8114296:	6878      	ldr	r0, [r7, #4]
 8114298:	f000 fe92 	bl	8114fc0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 811429c:	bf00      	nop
 811429e:	3708      	adds	r7, #8
 81142a0:	46bd      	mov	sp, r7
 81142a2:	bd80      	pop	{r7, pc}
 81142a4:	10011d0d 	.word	0x10011d0d
 81142a8:	08114245 	.word	0x08114245

081142ac <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 81142ac:	b480      	push	{r7}
 81142ae:	b085      	sub	sp, #20
 81142b0:	af00      	add	r7, sp, #0
 81142b2:	60f8      	str	r0, [r7, #12]
 81142b4:	60b9      	str	r1, [r7, #8]
 81142b6:	4611      	mov	r1, r2
 81142b8:	461a      	mov	r2, r3
 81142ba:	460b      	mov	r3, r1
 81142bc:	80fb      	strh	r3, [r7, #6]
 81142be:	4613      	mov	r3, r2
 81142c0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 81142c2:	68fb      	ldr	r3, [r7, #12]
 81142c4:	2200      	movs	r2, #0
 81142c6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 81142c8:	68fb      	ldr	r3, [r7, #12]
 81142ca:	68ba      	ldr	r2, [r7, #8]
 81142cc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 81142ce:	68fb      	ldr	r3, [r7, #12]
 81142d0:	88fa      	ldrh	r2, [r7, #6]
 81142d2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 81142d4:	68fb      	ldr	r3, [r7, #12]
 81142d6:	88ba      	ldrh	r2, [r7, #4]
 81142d8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 81142da:	8b3b      	ldrh	r3, [r7, #24]
 81142dc:	b2da      	uxtb	r2, r3
 81142de:	68fb      	ldr	r3, [r7, #12]
 81142e0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 81142e2:	68fb      	ldr	r3, [r7, #12]
 81142e4:	7f3a      	ldrb	r2, [r7, #28]
 81142e6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 81142e8:	68fb      	ldr	r3, [r7, #12]
 81142ea:	2201      	movs	r2, #1
 81142ec:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 81142ee:	68fb      	ldr	r3, [r7, #12]
 81142f0:	2200      	movs	r2, #0
 81142f2:	73da      	strb	r2, [r3, #15]
}
 81142f4:	bf00      	nop
 81142f6:	3714      	adds	r7, #20
 81142f8:	46bd      	mov	sp, r7
 81142fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81142fe:	4770      	bx	lr

08114300 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8114300:	b580      	push	{r7, lr}
 8114302:	b08c      	sub	sp, #48	@ 0x30
 8114304:	af02      	add	r7, sp, #8
 8114306:	4603      	mov	r3, r0
 8114308:	71fb      	strb	r3, [r7, #7]
 811430a:	460b      	mov	r3, r1
 811430c:	80bb      	strh	r3, [r7, #4]
 811430e:	4613      	mov	r3, r2
 8114310:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8114312:	79fb      	ldrb	r3, [r7, #7]
 8114314:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8114316:	887b      	ldrh	r3, [r7, #2]
 8114318:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 811431c:	f000 8082 	beq.w	8114424 <pbuf_alloc+0x124>
 8114320:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8114324:	f300 80c9 	bgt.w	81144ba <pbuf_alloc+0x1ba>
 8114328:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 811432c:	d010      	beq.n	8114350 <pbuf_alloc+0x50>
 811432e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8114332:	f300 80c2 	bgt.w	81144ba <pbuf_alloc+0x1ba>
 8114336:	2b01      	cmp	r3, #1
 8114338:	d002      	beq.n	8114340 <pbuf_alloc+0x40>
 811433a:	2b41      	cmp	r3, #65	@ 0x41
 811433c:	f040 80bd 	bne.w	81144ba <pbuf_alloc+0x1ba>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8114340:	887a      	ldrh	r2, [r7, #2]
 8114342:	88bb      	ldrh	r3, [r7, #4]
 8114344:	4619      	mov	r1, r3
 8114346:	2000      	movs	r0, #0
 8114348:	f000 f8d2 	bl	81144f0 <pbuf_alloc_reference>
 811434c:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 811434e:	e0be      	b.n	81144ce <pbuf_alloc+0x1ce>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8114350:	2300      	movs	r3, #0
 8114352:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8114354:	2300      	movs	r3, #0
 8114356:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8114358:	88bb      	ldrh	r3, [r7, #4]
 811435a:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 811435c:	200c      	movs	r0, #12
 811435e:	f7ff fb99 	bl	8113a94 <memp_malloc>
 8114362:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8114364:	693b      	ldr	r3, [r7, #16]
 8114366:	2b00      	cmp	r3, #0
 8114368:	d109      	bne.n	811437e <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 811436a:	f7ff ff75 	bl	8114258 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 811436e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114370:	2b00      	cmp	r3, #0
 8114372:	d002      	beq.n	811437a <pbuf_alloc+0x7a>
            pbuf_free(p);
 8114374:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8114376:	f000 faa7 	bl	81148c8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 811437a:	2300      	movs	r3, #0
 811437c:	e0a8      	b.n	81144d0 <pbuf_alloc+0x1d0>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 811437e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8114380:	3303      	adds	r3, #3
 8114382:	b29b      	uxth	r3, r3
 8114384:	f023 0303 	bic.w	r3, r3, #3
 8114388:	b29b      	uxth	r3, r3
 811438a:	f5c3 63bd 	rsb	r3, r3, #1512	@ 0x5e8
 811438e:	3304      	adds	r3, #4
 8114390:	b29b      	uxth	r3, r3
 8114392:	8b7a      	ldrh	r2, [r7, #26]
 8114394:	4293      	cmp	r3, r2
 8114396:	bf28      	it	cs
 8114398:	4613      	movcs	r3, r2
 811439a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 811439c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 811439e:	3310      	adds	r3, #16
 81143a0:	693a      	ldr	r2, [r7, #16]
 81143a2:	4413      	add	r3, r2
 81143a4:	3303      	adds	r3, #3
 81143a6:	f023 0303 	bic.w	r3, r3, #3
 81143aa:	4618      	mov	r0, r3
 81143ac:	89f9      	ldrh	r1, [r7, #14]
 81143ae:	8b7a      	ldrh	r2, [r7, #26]
 81143b0:	2300      	movs	r3, #0
 81143b2:	9301      	str	r3, [sp, #4]
 81143b4:	887b      	ldrh	r3, [r7, #2]
 81143b6:	9300      	str	r3, [sp, #0]
 81143b8:	460b      	mov	r3, r1
 81143ba:	4601      	mov	r1, r0
 81143bc:	6938      	ldr	r0, [r7, #16]
 81143be:	f7ff ff75 	bl	81142ac <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 81143c2:	693b      	ldr	r3, [r7, #16]
 81143c4:	685b      	ldr	r3, [r3, #4]
 81143c6:	f003 0303 	and.w	r3, r3, #3
 81143ca:	2b00      	cmp	r3, #0
 81143cc:	d006      	beq.n	81143dc <pbuf_alloc+0xdc>
 81143ce:	4b42      	ldr	r3, [pc, #264]	@ (81144d8 <pbuf_alloc+0x1d8>)
 81143d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81143d4:	4941      	ldr	r1, [pc, #260]	@ (81144dc <pbuf_alloc+0x1dc>)
 81143d6:	4842      	ldr	r0, [pc, #264]	@ (81144e0 <pbuf_alloc+0x1e0>)
 81143d8:	f007 fd38 	bl	811be4c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 81143dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 81143de:	3303      	adds	r3, #3
 81143e0:	f023 0303 	bic.w	r3, r3, #3
 81143e4:	f240 52ec 	movw	r2, #1516	@ 0x5ec
 81143e8:	4293      	cmp	r3, r2
 81143ea:	d106      	bne.n	81143fa <pbuf_alloc+0xfa>
 81143ec:	4b3a      	ldr	r3, [pc, #232]	@ (81144d8 <pbuf_alloc+0x1d8>)
 81143ee:	f44f 7281 	mov.w	r2, #258	@ 0x102
 81143f2:	493c      	ldr	r1, [pc, #240]	@ (81144e4 <pbuf_alloc+0x1e4>)
 81143f4:	483a      	ldr	r0, [pc, #232]	@ (81144e0 <pbuf_alloc+0x1e0>)
 81143f6:	f007 fd29 	bl	811be4c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 81143fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81143fc:	2b00      	cmp	r3, #0
 81143fe:	d102      	bne.n	8114406 <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8114400:	693b      	ldr	r3, [r7, #16]
 8114402:	627b      	str	r3, [r7, #36]	@ 0x24
 8114404:	e002      	b.n	811440c <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8114406:	69fb      	ldr	r3, [r7, #28]
 8114408:	693a      	ldr	r2, [r7, #16]
 811440a:	601a      	str	r2, [r3, #0]
        }
        last = q;
 811440c:	693b      	ldr	r3, [r7, #16]
 811440e:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8114410:	8b7a      	ldrh	r2, [r7, #26]
 8114412:	89fb      	ldrh	r3, [r7, #14]
 8114414:	1ad3      	subs	r3, r2, r3
 8114416:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8114418:	2300      	movs	r3, #0
 811441a:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 811441c:	8b7b      	ldrh	r3, [r7, #26]
 811441e:	2b00      	cmp	r3, #0
 8114420:	d19c      	bne.n	811435c <pbuf_alloc+0x5c>
      break;
 8114422:	e054      	b.n	81144ce <pbuf_alloc+0x1ce>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8114424:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8114426:	3303      	adds	r3, #3
 8114428:	b29b      	uxth	r3, r3
 811442a:	f023 0303 	bic.w	r3, r3, #3
 811442e:	b29a      	uxth	r2, r3
 8114430:	88bb      	ldrh	r3, [r7, #4]
 8114432:	3303      	adds	r3, #3
 8114434:	b29b      	uxth	r3, r3
 8114436:	f023 0303 	bic.w	r3, r3, #3
 811443a:	b29b      	uxth	r3, r3
 811443c:	4413      	add	r3, r2
 811443e:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8114440:	8b3b      	ldrh	r3, [r7, #24]
 8114442:	3310      	adds	r3, #16
 8114444:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8114446:	8b3a      	ldrh	r2, [r7, #24]
 8114448:	88bb      	ldrh	r3, [r7, #4]
 811444a:	3303      	adds	r3, #3
 811444c:	f023 0303 	bic.w	r3, r3, #3
 8114450:	429a      	cmp	r2, r3
 8114452:	d306      	bcc.n	8114462 <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8114454:	88bb      	ldrh	r3, [r7, #4]
 8114456:	3303      	adds	r3, #3
 8114458:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 811445c:	697a      	ldr	r2, [r7, #20]
 811445e:	429a      	cmp	r2, r3
 8114460:	d201      	bcs.n	8114466 <pbuf_alloc+0x166>
        return NULL;
 8114462:	2300      	movs	r3, #0
 8114464:	e034      	b.n	81144d0 <pbuf_alloc+0x1d0>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8114466:	6978      	ldr	r0, [r7, #20]
 8114468:	f7ff f976 	bl	8113758 <mem_malloc>
 811446c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 811446e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8114470:	2b00      	cmp	r3, #0
 8114472:	d101      	bne.n	8114478 <pbuf_alloc+0x178>
        return NULL;
 8114474:	2300      	movs	r3, #0
 8114476:	e02b      	b.n	81144d0 <pbuf_alloc+0x1d0>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8114478:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 811447a:	3310      	adds	r3, #16
 811447c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811447e:	4413      	add	r3, r2
 8114480:	3303      	adds	r3, #3
 8114482:	f023 0303 	bic.w	r3, r3, #3
 8114486:	4618      	mov	r0, r3
 8114488:	88b9      	ldrh	r1, [r7, #4]
 811448a:	88ba      	ldrh	r2, [r7, #4]
 811448c:	2300      	movs	r3, #0
 811448e:	9301      	str	r3, [sp, #4]
 8114490:	887b      	ldrh	r3, [r7, #2]
 8114492:	9300      	str	r3, [sp, #0]
 8114494:	460b      	mov	r3, r1
 8114496:	4601      	mov	r1, r0
 8114498:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811449a:	f7ff ff07 	bl	81142ac <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 811449e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81144a0:	685b      	ldr	r3, [r3, #4]
 81144a2:	f003 0303 	and.w	r3, r3, #3
 81144a6:	2b00      	cmp	r3, #0
 81144a8:	d010      	beq.n	81144cc <pbuf_alloc+0x1cc>
 81144aa:	4b0b      	ldr	r3, [pc, #44]	@ (81144d8 <pbuf_alloc+0x1d8>)
 81144ac:	f44f 7291 	mov.w	r2, #290	@ 0x122
 81144b0:	490d      	ldr	r1, [pc, #52]	@ (81144e8 <pbuf_alloc+0x1e8>)
 81144b2:	480b      	ldr	r0, [pc, #44]	@ (81144e0 <pbuf_alloc+0x1e0>)
 81144b4:	f007 fcca 	bl	811be4c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 81144b8:	e008      	b.n	81144cc <pbuf_alloc+0x1cc>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 81144ba:	4b07      	ldr	r3, [pc, #28]	@ (81144d8 <pbuf_alloc+0x1d8>)
 81144bc:	f240 1227 	movw	r2, #295	@ 0x127
 81144c0:	490a      	ldr	r1, [pc, #40]	@ (81144ec <pbuf_alloc+0x1ec>)
 81144c2:	4807      	ldr	r0, [pc, #28]	@ (81144e0 <pbuf_alloc+0x1e0>)
 81144c4:	f007 fcc2 	bl	811be4c <iprintf>
      return NULL;
 81144c8:	2300      	movs	r3, #0
 81144ca:	e001      	b.n	81144d0 <pbuf_alloc+0x1d0>
      break;
 81144cc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 81144ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 81144d0:	4618      	mov	r0, r3
 81144d2:	3728      	adds	r7, #40	@ 0x28
 81144d4:	46bd      	mov	sp, r7
 81144d6:	bd80      	pop	{r7, pc}
 81144d8:	0811dba0 	.word	0x0811dba0
 81144dc:	0811dc10 	.word	0x0811dc10
 81144e0:	0811dc40 	.word	0x0811dc40
 81144e4:	0811dc68 	.word	0x0811dc68
 81144e8:	0811dc9c 	.word	0x0811dc9c
 81144ec:	0811dcc8 	.word	0x0811dcc8

081144f0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 81144f0:	b580      	push	{r7, lr}
 81144f2:	b086      	sub	sp, #24
 81144f4:	af02      	add	r7, sp, #8
 81144f6:	6078      	str	r0, [r7, #4]
 81144f8:	460b      	mov	r3, r1
 81144fa:	807b      	strh	r3, [r7, #2]
 81144fc:	4613      	mov	r3, r2
 81144fe:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8114500:	883b      	ldrh	r3, [r7, #0]
 8114502:	2b41      	cmp	r3, #65	@ 0x41
 8114504:	d009      	beq.n	811451a <pbuf_alloc_reference+0x2a>
 8114506:	883b      	ldrh	r3, [r7, #0]
 8114508:	2b01      	cmp	r3, #1
 811450a:	d006      	beq.n	811451a <pbuf_alloc_reference+0x2a>
 811450c:	4b0f      	ldr	r3, [pc, #60]	@ (811454c <pbuf_alloc_reference+0x5c>)
 811450e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8114512:	490f      	ldr	r1, [pc, #60]	@ (8114550 <pbuf_alloc_reference+0x60>)
 8114514:	480f      	ldr	r0, [pc, #60]	@ (8114554 <pbuf_alloc_reference+0x64>)
 8114516:	f007 fc99 	bl	811be4c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 811451a:	200b      	movs	r0, #11
 811451c:	f7ff faba 	bl	8113a94 <memp_malloc>
 8114520:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8114522:	68fb      	ldr	r3, [r7, #12]
 8114524:	2b00      	cmp	r3, #0
 8114526:	d101      	bne.n	811452c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8114528:	2300      	movs	r3, #0
 811452a:	e00b      	b.n	8114544 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 811452c:	8879      	ldrh	r1, [r7, #2]
 811452e:	887a      	ldrh	r2, [r7, #2]
 8114530:	2300      	movs	r3, #0
 8114532:	9301      	str	r3, [sp, #4]
 8114534:	883b      	ldrh	r3, [r7, #0]
 8114536:	9300      	str	r3, [sp, #0]
 8114538:	460b      	mov	r3, r1
 811453a:	6879      	ldr	r1, [r7, #4]
 811453c:	68f8      	ldr	r0, [r7, #12]
 811453e:	f7ff feb5 	bl	81142ac <pbuf_init_alloced_pbuf>
  return p;
 8114542:	68fb      	ldr	r3, [r7, #12]
}
 8114544:	4618      	mov	r0, r3
 8114546:	3710      	adds	r7, #16
 8114548:	46bd      	mov	sp, r7
 811454a:	bd80      	pop	{r7, pc}
 811454c:	0811dba0 	.word	0x0811dba0
 8114550:	0811dce4 	.word	0x0811dce4
 8114554:	0811dc40 	.word	0x0811dc40

08114558 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8114558:	b580      	push	{r7, lr}
 811455a:	b088      	sub	sp, #32
 811455c:	af02      	add	r7, sp, #8
 811455e:	607b      	str	r3, [r7, #4]
 8114560:	4603      	mov	r3, r0
 8114562:	73fb      	strb	r3, [r7, #15]
 8114564:	460b      	mov	r3, r1
 8114566:	81bb      	strh	r3, [r7, #12]
 8114568:	4613      	mov	r3, r2
 811456a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 811456c:	7bfb      	ldrb	r3, [r7, #15]
 811456e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8114570:	8a7b      	ldrh	r3, [r7, #18]
 8114572:	3303      	adds	r3, #3
 8114574:	f023 0203 	bic.w	r2, r3, #3
 8114578:	89bb      	ldrh	r3, [r7, #12]
 811457a:	441a      	add	r2, r3
 811457c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 811457e:	429a      	cmp	r2, r3
 8114580:	d901      	bls.n	8114586 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8114582:	2300      	movs	r3, #0
 8114584:	e018      	b.n	81145b8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8114586:	6a3b      	ldr	r3, [r7, #32]
 8114588:	2b00      	cmp	r3, #0
 811458a:	d007      	beq.n	811459c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 811458c:	8a7b      	ldrh	r3, [r7, #18]
 811458e:	3303      	adds	r3, #3
 8114590:	f023 0303 	bic.w	r3, r3, #3
 8114594:	6a3a      	ldr	r2, [r7, #32]
 8114596:	4413      	add	r3, r2
 8114598:	617b      	str	r3, [r7, #20]
 811459a:	e001      	b.n	81145a0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 811459c:	2300      	movs	r3, #0
 811459e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 81145a0:	6878      	ldr	r0, [r7, #4]
 81145a2:	89b9      	ldrh	r1, [r7, #12]
 81145a4:	89ba      	ldrh	r2, [r7, #12]
 81145a6:	2302      	movs	r3, #2
 81145a8:	9301      	str	r3, [sp, #4]
 81145aa:	897b      	ldrh	r3, [r7, #10]
 81145ac:	9300      	str	r3, [sp, #0]
 81145ae:	460b      	mov	r3, r1
 81145b0:	6979      	ldr	r1, [r7, #20]
 81145b2:	f7ff fe7b 	bl	81142ac <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 81145b6:	687b      	ldr	r3, [r7, #4]
}
 81145b8:	4618      	mov	r0, r3
 81145ba:	3718      	adds	r7, #24
 81145bc:	46bd      	mov	sp, r7
 81145be:	bd80      	pop	{r7, pc}

081145c0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 81145c0:	b580      	push	{r7, lr}
 81145c2:	b084      	sub	sp, #16
 81145c4:	af00      	add	r7, sp, #0
 81145c6:	6078      	str	r0, [r7, #4]
 81145c8:	460b      	mov	r3, r1
 81145ca:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 81145cc:	687b      	ldr	r3, [r7, #4]
 81145ce:	2b00      	cmp	r3, #0
 81145d0:	d106      	bne.n	81145e0 <pbuf_realloc+0x20>
 81145d2:	4b39      	ldr	r3, [pc, #228]	@ (81146b8 <pbuf_realloc+0xf8>)
 81145d4:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 81145d8:	4938      	ldr	r1, [pc, #224]	@ (81146bc <pbuf_realloc+0xfc>)
 81145da:	4839      	ldr	r0, [pc, #228]	@ (81146c0 <pbuf_realloc+0x100>)
 81145dc:	f007 fc36 	bl	811be4c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 81145e0:	687b      	ldr	r3, [r7, #4]
 81145e2:	891b      	ldrh	r3, [r3, #8]
 81145e4:	887a      	ldrh	r2, [r7, #2]
 81145e6:	429a      	cmp	r2, r3
 81145e8:	d261      	bcs.n	81146ae <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 81145ea:	687b      	ldr	r3, [r7, #4]
 81145ec:	891a      	ldrh	r2, [r3, #8]
 81145ee:	887b      	ldrh	r3, [r7, #2]
 81145f0:	1ad3      	subs	r3, r2, r3
 81145f2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 81145f4:	887b      	ldrh	r3, [r7, #2]
 81145f6:	817b      	strh	r3, [r7, #10]
  q = p;
 81145f8:	687b      	ldr	r3, [r7, #4]
 81145fa:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 81145fc:	e018      	b.n	8114630 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 81145fe:	68fb      	ldr	r3, [r7, #12]
 8114600:	895b      	ldrh	r3, [r3, #10]
 8114602:	897a      	ldrh	r2, [r7, #10]
 8114604:	1ad3      	subs	r3, r2, r3
 8114606:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8114608:	68fb      	ldr	r3, [r7, #12]
 811460a:	891a      	ldrh	r2, [r3, #8]
 811460c:	893b      	ldrh	r3, [r7, #8]
 811460e:	1ad3      	subs	r3, r2, r3
 8114610:	b29a      	uxth	r2, r3
 8114612:	68fb      	ldr	r3, [r7, #12]
 8114614:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8114616:	68fb      	ldr	r3, [r7, #12]
 8114618:	681b      	ldr	r3, [r3, #0]
 811461a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 811461c:	68fb      	ldr	r3, [r7, #12]
 811461e:	2b00      	cmp	r3, #0
 8114620:	d106      	bne.n	8114630 <pbuf_realloc+0x70>
 8114622:	4b25      	ldr	r3, [pc, #148]	@ (81146b8 <pbuf_realloc+0xf8>)
 8114624:	f240 12af 	movw	r2, #431	@ 0x1af
 8114628:	4926      	ldr	r1, [pc, #152]	@ (81146c4 <pbuf_realloc+0x104>)
 811462a:	4825      	ldr	r0, [pc, #148]	@ (81146c0 <pbuf_realloc+0x100>)
 811462c:	f007 fc0e 	bl	811be4c <iprintf>
  while (rem_len > q->len) {
 8114630:	68fb      	ldr	r3, [r7, #12]
 8114632:	895b      	ldrh	r3, [r3, #10]
 8114634:	897a      	ldrh	r2, [r7, #10]
 8114636:	429a      	cmp	r2, r3
 8114638:	d8e1      	bhi.n	81145fe <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 811463a:	68fb      	ldr	r3, [r7, #12]
 811463c:	7b1b      	ldrb	r3, [r3, #12]
 811463e:	f003 030f 	and.w	r3, r3, #15
 8114642:	2b00      	cmp	r3, #0
 8114644:	d11f      	bne.n	8114686 <pbuf_realloc+0xc6>
 8114646:	68fb      	ldr	r3, [r7, #12]
 8114648:	895b      	ldrh	r3, [r3, #10]
 811464a:	897a      	ldrh	r2, [r7, #10]
 811464c:	429a      	cmp	r2, r3
 811464e:	d01a      	beq.n	8114686 <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8114650:	68fb      	ldr	r3, [r7, #12]
 8114652:	7b5b      	ldrb	r3, [r3, #13]
 8114654:	f003 0302 	and.w	r3, r3, #2
 8114658:	2b00      	cmp	r3, #0
 811465a:	d114      	bne.n	8114686 <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 811465c:	68fb      	ldr	r3, [r7, #12]
 811465e:	685a      	ldr	r2, [r3, #4]
 8114660:	68fb      	ldr	r3, [r7, #12]
 8114662:	1ad2      	subs	r2, r2, r3
 8114664:	897b      	ldrh	r3, [r7, #10]
 8114666:	4413      	add	r3, r2
 8114668:	4619      	mov	r1, r3
 811466a:	68f8      	ldr	r0, [r7, #12]
 811466c:	f7fe ff72 	bl	8113554 <mem_trim>
 8114670:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8114672:	68fb      	ldr	r3, [r7, #12]
 8114674:	2b00      	cmp	r3, #0
 8114676:	d106      	bne.n	8114686 <pbuf_realloc+0xc6>
 8114678:	4b0f      	ldr	r3, [pc, #60]	@ (81146b8 <pbuf_realloc+0xf8>)
 811467a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 811467e:	4912      	ldr	r1, [pc, #72]	@ (81146c8 <pbuf_realloc+0x108>)
 8114680:	480f      	ldr	r0, [pc, #60]	@ (81146c0 <pbuf_realloc+0x100>)
 8114682:	f007 fbe3 	bl	811be4c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8114686:	68fb      	ldr	r3, [r7, #12]
 8114688:	897a      	ldrh	r2, [r7, #10]
 811468a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 811468c:	68fb      	ldr	r3, [r7, #12]
 811468e:	895a      	ldrh	r2, [r3, #10]
 8114690:	68fb      	ldr	r3, [r7, #12]
 8114692:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8114694:	68fb      	ldr	r3, [r7, #12]
 8114696:	681b      	ldr	r3, [r3, #0]
 8114698:	2b00      	cmp	r3, #0
 811469a:	d004      	beq.n	81146a6 <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 811469c:	68fb      	ldr	r3, [r7, #12]
 811469e:	681b      	ldr	r3, [r3, #0]
 81146a0:	4618      	mov	r0, r3
 81146a2:	f000 f911 	bl	81148c8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 81146a6:	68fb      	ldr	r3, [r7, #12]
 81146a8:	2200      	movs	r2, #0
 81146aa:	601a      	str	r2, [r3, #0]
 81146ac:	e000      	b.n	81146b0 <pbuf_realloc+0xf0>
    return;
 81146ae:	bf00      	nop

}
 81146b0:	3710      	adds	r7, #16
 81146b2:	46bd      	mov	sp, r7
 81146b4:	bd80      	pop	{r7, pc}
 81146b6:	bf00      	nop
 81146b8:	0811dba0 	.word	0x0811dba0
 81146bc:	0811dcf8 	.word	0x0811dcf8
 81146c0:	0811dc40 	.word	0x0811dc40
 81146c4:	0811dd10 	.word	0x0811dd10
 81146c8:	0811dd28 	.word	0x0811dd28

081146cc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 81146cc:	b580      	push	{r7, lr}
 81146ce:	b086      	sub	sp, #24
 81146d0:	af00      	add	r7, sp, #0
 81146d2:	60f8      	str	r0, [r7, #12]
 81146d4:	60b9      	str	r1, [r7, #8]
 81146d6:	4613      	mov	r3, r2
 81146d8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 81146da:	68fb      	ldr	r3, [r7, #12]
 81146dc:	2b00      	cmp	r3, #0
 81146de:	d106      	bne.n	81146ee <pbuf_add_header_impl+0x22>
 81146e0:	4b2b      	ldr	r3, [pc, #172]	@ (8114790 <pbuf_add_header_impl+0xc4>)
 81146e2:	f240 12df 	movw	r2, #479	@ 0x1df
 81146e6:	492b      	ldr	r1, [pc, #172]	@ (8114794 <pbuf_add_header_impl+0xc8>)
 81146e8:	482b      	ldr	r0, [pc, #172]	@ (8114798 <pbuf_add_header_impl+0xcc>)
 81146ea:	f007 fbaf 	bl	811be4c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 81146ee:	68fb      	ldr	r3, [r7, #12]
 81146f0:	2b00      	cmp	r3, #0
 81146f2:	d003      	beq.n	81146fc <pbuf_add_header_impl+0x30>
 81146f4:	68bb      	ldr	r3, [r7, #8]
 81146f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81146fa:	d301      	bcc.n	8114700 <pbuf_add_header_impl+0x34>
    return 1;
 81146fc:	2301      	movs	r3, #1
 81146fe:	e043      	b.n	8114788 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8114700:	68bb      	ldr	r3, [r7, #8]
 8114702:	2b00      	cmp	r3, #0
 8114704:	d101      	bne.n	811470a <pbuf_add_header_impl+0x3e>
    return 0;
 8114706:	2300      	movs	r3, #0
 8114708:	e03e      	b.n	8114788 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 811470a:	68bb      	ldr	r3, [r7, #8]
 811470c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 811470e:	68fb      	ldr	r3, [r7, #12]
 8114710:	891a      	ldrh	r2, [r3, #8]
 8114712:	8a7b      	ldrh	r3, [r7, #18]
 8114714:	4413      	add	r3, r2
 8114716:	b29b      	uxth	r3, r3
 8114718:	8a7a      	ldrh	r2, [r7, #18]
 811471a:	429a      	cmp	r2, r3
 811471c:	d901      	bls.n	8114722 <pbuf_add_header_impl+0x56>
    return 1;
 811471e:	2301      	movs	r3, #1
 8114720:	e032      	b.n	8114788 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8114722:	68fb      	ldr	r3, [r7, #12]
 8114724:	7b1b      	ldrb	r3, [r3, #12]
 8114726:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8114728:	8a3b      	ldrh	r3, [r7, #16]
 811472a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 811472e:	2b00      	cmp	r3, #0
 8114730:	d00c      	beq.n	811474c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8114732:	68fb      	ldr	r3, [r7, #12]
 8114734:	685a      	ldr	r2, [r3, #4]
 8114736:	68bb      	ldr	r3, [r7, #8]
 8114738:	425b      	negs	r3, r3
 811473a:	4413      	add	r3, r2
 811473c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 811473e:	68fb      	ldr	r3, [r7, #12]
 8114740:	3310      	adds	r3, #16
 8114742:	697a      	ldr	r2, [r7, #20]
 8114744:	429a      	cmp	r2, r3
 8114746:	d20d      	bcs.n	8114764 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8114748:	2301      	movs	r3, #1
 811474a:	e01d      	b.n	8114788 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 811474c:	79fb      	ldrb	r3, [r7, #7]
 811474e:	2b00      	cmp	r3, #0
 8114750:	d006      	beq.n	8114760 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8114752:	68fb      	ldr	r3, [r7, #12]
 8114754:	685a      	ldr	r2, [r3, #4]
 8114756:	68bb      	ldr	r3, [r7, #8]
 8114758:	425b      	negs	r3, r3
 811475a:	4413      	add	r3, r2
 811475c:	617b      	str	r3, [r7, #20]
 811475e:	e001      	b.n	8114764 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8114760:	2301      	movs	r3, #1
 8114762:	e011      	b.n	8114788 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8114764:	68fb      	ldr	r3, [r7, #12]
 8114766:	697a      	ldr	r2, [r7, #20]
 8114768:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 811476a:	68fb      	ldr	r3, [r7, #12]
 811476c:	895a      	ldrh	r2, [r3, #10]
 811476e:	8a7b      	ldrh	r3, [r7, #18]
 8114770:	4413      	add	r3, r2
 8114772:	b29a      	uxth	r2, r3
 8114774:	68fb      	ldr	r3, [r7, #12]
 8114776:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8114778:	68fb      	ldr	r3, [r7, #12]
 811477a:	891a      	ldrh	r2, [r3, #8]
 811477c:	8a7b      	ldrh	r3, [r7, #18]
 811477e:	4413      	add	r3, r2
 8114780:	b29a      	uxth	r2, r3
 8114782:	68fb      	ldr	r3, [r7, #12]
 8114784:	811a      	strh	r2, [r3, #8]


  return 0;
 8114786:	2300      	movs	r3, #0
}
 8114788:	4618      	mov	r0, r3
 811478a:	3718      	adds	r7, #24
 811478c:	46bd      	mov	sp, r7
 811478e:	bd80      	pop	{r7, pc}
 8114790:	0811dba0 	.word	0x0811dba0
 8114794:	0811dd44 	.word	0x0811dd44
 8114798:	0811dc40 	.word	0x0811dc40

0811479c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 811479c:	b580      	push	{r7, lr}
 811479e:	b082      	sub	sp, #8
 81147a0:	af00      	add	r7, sp, #0
 81147a2:	6078      	str	r0, [r7, #4]
 81147a4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 81147a6:	2200      	movs	r2, #0
 81147a8:	6839      	ldr	r1, [r7, #0]
 81147aa:	6878      	ldr	r0, [r7, #4]
 81147ac:	f7ff ff8e 	bl	81146cc <pbuf_add_header_impl>
 81147b0:	4603      	mov	r3, r0
}
 81147b2:	4618      	mov	r0, r3
 81147b4:	3708      	adds	r7, #8
 81147b6:	46bd      	mov	sp, r7
 81147b8:	bd80      	pop	{r7, pc}
	...

081147bc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 81147bc:	b580      	push	{r7, lr}
 81147be:	b084      	sub	sp, #16
 81147c0:	af00      	add	r7, sp, #0
 81147c2:	6078      	str	r0, [r7, #4]
 81147c4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 81147c6:	687b      	ldr	r3, [r7, #4]
 81147c8:	2b00      	cmp	r3, #0
 81147ca:	d106      	bne.n	81147da <pbuf_remove_header+0x1e>
 81147cc:	4b20      	ldr	r3, [pc, #128]	@ (8114850 <pbuf_remove_header+0x94>)
 81147ce:	f240 224b 	movw	r2, #587	@ 0x24b
 81147d2:	4920      	ldr	r1, [pc, #128]	@ (8114854 <pbuf_remove_header+0x98>)
 81147d4:	4820      	ldr	r0, [pc, #128]	@ (8114858 <pbuf_remove_header+0x9c>)
 81147d6:	f007 fb39 	bl	811be4c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 81147da:	687b      	ldr	r3, [r7, #4]
 81147dc:	2b00      	cmp	r3, #0
 81147de:	d003      	beq.n	81147e8 <pbuf_remove_header+0x2c>
 81147e0:	683b      	ldr	r3, [r7, #0]
 81147e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81147e6:	d301      	bcc.n	81147ec <pbuf_remove_header+0x30>
    return 1;
 81147e8:	2301      	movs	r3, #1
 81147ea:	e02c      	b.n	8114846 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 81147ec:	683b      	ldr	r3, [r7, #0]
 81147ee:	2b00      	cmp	r3, #0
 81147f0:	d101      	bne.n	81147f6 <pbuf_remove_header+0x3a>
    return 0;
 81147f2:	2300      	movs	r3, #0
 81147f4:	e027      	b.n	8114846 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 81147f6:	683b      	ldr	r3, [r7, #0]
 81147f8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 81147fa:	687b      	ldr	r3, [r7, #4]
 81147fc:	895b      	ldrh	r3, [r3, #10]
 81147fe:	89fa      	ldrh	r2, [r7, #14]
 8114800:	429a      	cmp	r2, r3
 8114802:	d908      	bls.n	8114816 <pbuf_remove_header+0x5a>
 8114804:	4b12      	ldr	r3, [pc, #72]	@ (8114850 <pbuf_remove_header+0x94>)
 8114806:	f240 2255 	movw	r2, #597	@ 0x255
 811480a:	4914      	ldr	r1, [pc, #80]	@ (811485c <pbuf_remove_header+0xa0>)
 811480c:	4812      	ldr	r0, [pc, #72]	@ (8114858 <pbuf_remove_header+0x9c>)
 811480e:	f007 fb1d 	bl	811be4c <iprintf>
 8114812:	2301      	movs	r3, #1
 8114814:	e017      	b.n	8114846 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8114816:	687b      	ldr	r3, [r7, #4]
 8114818:	685b      	ldr	r3, [r3, #4]
 811481a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 811481c:	687b      	ldr	r3, [r7, #4]
 811481e:	685a      	ldr	r2, [r3, #4]
 8114820:	683b      	ldr	r3, [r7, #0]
 8114822:	441a      	add	r2, r3
 8114824:	687b      	ldr	r3, [r7, #4]
 8114826:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8114828:	687b      	ldr	r3, [r7, #4]
 811482a:	895a      	ldrh	r2, [r3, #10]
 811482c:	89fb      	ldrh	r3, [r7, #14]
 811482e:	1ad3      	subs	r3, r2, r3
 8114830:	b29a      	uxth	r2, r3
 8114832:	687b      	ldr	r3, [r7, #4]
 8114834:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8114836:	687b      	ldr	r3, [r7, #4]
 8114838:	891a      	ldrh	r2, [r3, #8]
 811483a:	89fb      	ldrh	r3, [r7, #14]
 811483c:	1ad3      	subs	r3, r2, r3
 811483e:	b29a      	uxth	r2, r3
 8114840:	687b      	ldr	r3, [r7, #4]
 8114842:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8114844:	2300      	movs	r3, #0
}
 8114846:	4618      	mov	r0, r3
 8114848:	3710      	adds	r7, #16
 811484a:	46bd      	mov	sp, r7
 811484c:	bd80      	pop	{r7, pc}
 811484e:	bf00      	nop
 8114850:	0811dba0 	.word	0x0811dba0
 8114854:	0811dd44 	.word	0x0811dd44
 8114858:	0811dc40 	.word	0x0811dc40
 811485c:	0811dd50 	.word	0x0811dd50

08114860 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8114860:	b580      	push	{r7, lr}
 8114862:	b082      	sub	sp, #8
 8114864:	af00      	add	r7, sp, #0
 8114866:	6078      	str	r0, [r7, #4]
 8114868:	460b      	mov	r3, r1
 811486a:	807b      	strh	r3, [r7, #2]
 811486c:	4613      	mov	r3, r2
 811486e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8114870:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8114874:	2b00      	cmp	r3, #0
 8114876:	da08      	bge.n	811488a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8114878:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 811487c:	425b      	negs	r3, r3
 811487e:	4619      	mov	r1, r3
 8114880:	6878      	ldr	r0, [r7, #4]
 8114882:	f7ff ff9b 	bl	81147bc <pbuf_remove_header>
 8114886:	4603      	mov	r3, r0
 8114888:	e007      	b.n	811489a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 811488a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 811488e:	787a      	ldrb	r2, [r7, #1]
 8114890:	4619      	mov	r1, r3
 8114892:	6878      	ldr	r0, [r7, #4]
 8114894:	f7ff ff1a 	bl	81146cc <pbuf_add_header_impl>
 8114898:	4603      	mov	r3, r0
  }
}
 811489a:	4618      	mov	r0, r3
 811489c:	3708      	adds	r7, #8
 811489e:	46bd      	mov	sp, r7
 81148a0:	bd80      	pop	{r7, pc}

081148a2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 81148a2:	b580      	push	{r7, lr}
 81148a4:	b082      	sub	sp, #8
 81148a6:	af00      	add	r7, sp, #0
 81148a8:	6078      	str	r0, [r7, #4]
 81148aa:	460b      	mov	r3, r1
 81148ac:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 81148ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 81148b2:	2201      	movs	r2, #1
 81148b4:	4619      	mov	r1, r3
 81148b6:	6878      	ldr	r0, [r7, #4]
 81148b8:	f7ff ffd2 	bl	8114860 <pbuf_header_impl>
 81148bc:	4603      	mov	r3, r0
}
 81148be:	4618      	mov	r0, r3
 81148c0:	3708      	adds	r7, #8
 81148c2:	46bd      	mov	sp, r7
 81148c4:	bd80      	pop	{r7, pc}
	...

081148c8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 81148c8:	b580      	push	{r7, lr}
 81148ca:	b088      	sub	sp, #32
 81148cc:	af00      	add	r7, sp, #0
 81148ce:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 81148d0:	687b      	ldr	r3, [r7, #4]
 81148d2:	2b00      	cmp	r3, #0
 81148d4:	d10b      	bne.n	81148ee <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 81148d6:	687b      	ldr	r3, [r7, #4]
 81148d8:	2b00      	cmp	r3, #0
 81148da:	d106      	bne.n	81148ea <pbuf_free+0x22>
 81148dc:	4b3b      	ldr	r3, [pc, #236]	@ (81149cc <pbuf_free+0x104>)
 81148de:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 81148e2:	493b      	ldr	r1, [pc, #236]	@ (81149d0 <pbuf_free+0x108>)
 81148e4:	483b      	ldr	r0, [pc, #236]	@ (81149d4 <pbuf_free+0x10c>)
 81148e6:	f007 fab1 	bl	811be4c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 81148ea:	2300      	movs	r3, #0
 81148ec:	e069      	b.n	81149c2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 81148ee:	2300      	movs	r3, #0
 81148f0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 81148f2:	e062      	b.n	81149ba <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 81148f4:	f000 fb56 	bl	8114fa4 <sys_arch_protect>
 81148f8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 81148fa:	687b      	ldr	r3, [r7, #4]
 81148fc:	7b9b      	ldrb	r3, [r3, #14]
 81148fe:	2b00      	cmp	r3, #0
 8114900:	d106      	bne.n	8114910 <pbuf_free+0x48>
 8114902:	4b32      	ldr	r3, [pc, #200]	@ (81149cc <pbuf_free+0x104>)
 8114904:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8114908:	4933      	ldr	r1, [pc, #204]	@ (81149d8 <pbuf_free+0x110>)
 811490a:	4832      	ldr	r0, [pc, #200]	@ (81149d4 <pbuf_free+0x10c>)
 811490c:	f007 fa9e 	bl	811be4c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8114910:	687b      	ldr	r3, [r7, #4]
 8114912:	7b9b      	ldrb	r3, [r3, #14]
 8114914:	3b01      	subs	r3, #1
 8114916:	b2da      	uxtb	r2, r3
 8114918:	687b      	ldr	r3, [r7, #4]
 811491a:	739a      	strb	r2, [r3, #14]
 811491c:	687b      	ldr	r3, [r7, #4]
 811491e:	7b9b      	ldrb	r3, [r3, #14]
 8114920:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8114922:	69b8      	ldr	r0, [r7, #24]
 8114924:	f000 fb4c 	bl	8114fc0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8114928:	7dfb      	ldrb	r3, [r7, #23]
 811492a:	2b00      	cmp	r3, #0
 811492c:	d143      	bne.n	81149b6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 811492e:	687b      	ldr	r3, [r7, #4]
 8114930:	681b      	ldr	r3, [r3, #0]
 8114932:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8114934:	687b      	ldr	r3, [r7, #4]
 8114936:	7b1b      	ldrb	r3, [r3, #12]
 8114938:	f003 030f 	and.w	r3, r3, #15
 811493c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 811493e:	687b      	ldr	r3, [r7, #4]
 8114940:	7b5b      	ldrb	r3, [r3, #13]
 8114942:	f003 0302 	and.w	r3, r3, #2
 8114946:	2b00      	cmp	r3, #0
 8114948:	d011      	beq.n	811496e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 811494a:	687b      	ldr	r3, [r7, #4]
 811494c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 811494e:	68bb      	ldr	r3, [r7, #8]
 8114950:	691b      	ldr	r3, [r3, #16]
 8114952:	2b00      	cmp	r3, #0
 8114954:	d106      	bne.n	8114964 <pbuf_free+0x9c>
 8114956:	4b1d      	ldr	r3, [pc, #116]	@ (81149cc <pbuf_free+0x104>)
 8114958:	f240 22ff 	movw	r2, #767	@ 0x2ff
 811495c:	491f      	ldr	r1, [pc, #124]	@ (81149dc <pbuf_free+0x114>)
 811495e:	481d      	ldr	r0, [pc, #116]	@ (81149d4 <pbuf_free+0x10c>)
 8114960:	f007 fa74 	bl	811be4c <iprintf>
        pc->custom_free_function(p);
 8114964:	68bb      	ldr	r3, [r7, #8]
 8114966:	691b      	ldr	r3, [r3, #16]
 8114968:	6878      	ldr	r0, [r7, #4]
 811496a:	4798      	blx	r3
 811496c:	e01d      	b.n	81149aa <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 811496e:	7bfb      	ldrb	r3, [r7, #15]
 8114970:	2b02      	cmp	r3, #2
 8114972:	d104      	bne.n	811497e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8114974:	6879      	ldr	r1, [r7, #4]
 8114976:	200c      	movs	r0, #12
 8114978:	f7ff f902 	bl	8113b80 <memp_free>
 811497c:	e015      	b.n	81149aa <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 811497e:	7bfb      	ldrb	r3, [r7, #15]
 8114980:	2b01      	cmp	r3, #1
 8114982:	d104      	bne.n	811498e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8114984:	6879      	ldr	r1, [r7, #4]
 8114986:	200b      	movs	r0, #11
 8114988:	f7ff f8fa 	bl	8113b80 <memp_free>
 811498c:	e00d      	b.n	81149aa <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 811498e:	7bfb      	ldrb	r3, [r7, #15]
 8114990:	2b00      	cmp	r3, #0
 8114992:	d103      	bne.n	811499c <pbuf_free+0xd4>
          mem_free(p);
 8114994:	6878      	ldr	r0, [r7, #4]
 8114996:	f7fe fd4d 	bl	8113434 <mem_free>
 811499a:	e006      	b.n	81149aa <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 811499c:	4b0b      	ldr	r3, [pc, #44]	@ (81149cc <pbuf_free+0x104>)
 811499e:	f240 320f 	movw	r2, #783	@ 0x30f
 81149a2:	490f      	ldr	r1, [pc, #60]	@ (81149e0 <pbuf_free+0x118>)
 81149a4:	480b      	ldr	r0, [pc, #44]	@ (81149d4 <pbuf_free+0x10c>)
 81149a6:	f007 fa51 	bl	811be4c <iprintf>
        }
      }
      count++;
 81149aa:	7ffb      	ldrb	r3, [r7, #31]
 81149ac:	3301      	adds	r3, #1
 81149ae:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 81149b0:	693b      	ldr	r3, [r7, #16]
 81149b2:	607b      	str	r3, [r7, #4]
 81149b4:	e001      	b.n	81149ba <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 81149b6:	2300      	movs	r3, #0
 81149b8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 81149ba:	687b      	ldr	r3, [r7, #4]
 81149bc:	2b00      	cmp	r3, #0
 81149be:	d199      	bne.n	81148f4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 81149c0:	7ffb      	ldrb	r3, [r7, #31]
}
 81149c2:	4618      	mov	r0, r3
 81149c4:	3720      	adds	r7, #32
 81149c6:	46bd      	mov	sp, r7
 81149c8:	bd80      	pop	{r7, pc}
 81149ca:	bf00      	nop
 81149cc:	0811dba0 	.word	0x0811dba0
 81149d0:	0811dd44 	.word	0x0811dd44
 81149d4:	0811dc40 	.word	0x0811dc40
 81149d8:	0811dd70 	.word	0x0811dd70
 81149dc:	0811dd88 	.word	0x0811dd88
 81149e0:	0811ddac 	.word	0x0811ddac

081149e4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 81149e4:	b480      	push	{r7}
 81149e6:	b085      	sub	sp, #20
 81149e8:	af00      	add	r7, sp, #0
 81149ea:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 81149ec:	2300      	movs	r3, #0
 81149ee:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 81149f0:	e005      	b.n	81149fe <pbuf_clen+0x1a>
    ++len;
 81149f2:	89fb      	ldrh	r3, [r7, #14]
 81149f4:	3301      	adds	r3, #1
 81149f6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 81149f8:	687b      	ldr	r3, [r7, #4]
 81149fa:	681b      	ldr	r3, [r3, #0]
 81149fc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 81149fe:	687b      	ldr	r3, [r7, #4]
 8114a00:	2b00      	cmp	r3, #0
 8114a02:	d1f6      	bne.n	81149f2 <pbuf_clen+0xe>
  }
  return len;
 8114a04:	89fb      	ldrh	r3, [r7, #14]
}
 8114a06:	4618      	mov	r0, r3
 8114a08:	3714      	adds	r7, #20
 8114a0a:	46bd      	mov	sp, r7
 8114a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8114a10:	4770      	bx	lr
	...

08114a14 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8114a14:	b580      	push	{r7, lr}
 8114a16:	b084      	sub	sp, #16
 8114a18:	af00      	add	r7, sp, #0
 8114a1a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8114a1c:	687b      	ldr	r3, [r7, #4]
 8114a1e:	2b00      	cmp	r3, #0
 8114a20:	d016      	beq.n	8114a50 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8114a22:	f000 fabf 	bl	8114fa4 <sys_arch_protect>
 8114a26:	60f8      	str	r0, [r7, #12]
 8114a28:	687b      	ldr	r3, [r7, #4]
 8114a2a:	7b9b      	ldrb	r3, [r3, #14]
 8114a2c:	3301      	adds	r3, #1
 8114a2e:	b2da      	uxtb	r2, r3
 8114a30:	687b      	ldr	r3, [r7, #4]
 8114a32:	739a      	strb	r2, [r3, #14]
 8114a34:	68f8      	ldr	r0, [r7, #12]
 8114a36:	f000 fac3 	bl	8114fc0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8114a3a:	687b      	ldr	r3, [r7, #4]
 8114a3c:	7b9b      	ldrb	r3, [r3, #14]
 8114a3e:	2b00      	cmp	r3, #0
 8114a40:	d106      	bne.n	8114a50 <pbuf_ref+0x3c>
 8114a42:	4b05      	ldr	r3, [pc, #20]	@ (8114a58 <pbuf_ref+0x44>)
 8114a44:	f240 3242 	movw	r2, #834	@ 0x342
 8114a48:	4904      	ldr	r1, [pc, #16]	@ (8114a5c <pbuf_ref+0x48>)
 8114a4a:	4805      	ldr	r0, [pc, #20]	@ (8114a60 <pbuf_ref+0x4c>)
 8114a4c:	f007 f9fe 	bl	811be4c <iprintf>
  }
}
 8114a50:	bf00      	nop
 8114a52:	3710      	adds	r7, #16
 8114a54:	46bd      	mov	sp, r7
 8114a56:	bd80      	pop	{r7, pc}
 8114a58:	0811dba0 	.word	0x0811dba0
 8114a5c:	0811ddc0 	.word	0x0811ddc0
 8114a60:	0811dc40 	.word	0x0811dc40

08114a64 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8114a64:	b580      	push	{r7, lr}
 8114a66:	b084      	sub	sp, #16
 8114a68:	af00      	add	r7, sp, #0
 8114a6a:	6078      	str	r0, [r7, #4]
 8114a6c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8114a6e:	687b      	ldr	r3, [r7, #4]
 8114a70:	2b00      	cmp	r3, #0
 8114a72:	d002      	beq.n	8114a7a <pbuf_cat+0x16>
 8114a74:	683b      	ldr	r3, [r7, #0]
 8114a76:	2b00      	cmp	r3, #0
 8114a78:	d107      	bne.n	8114a8a <pbuf_cat+0x26>
 8114a7a:	4b20      	ldr	r3, [pc, #128]	@ (8114afc <pbuf_cat+0x98>)
 8114a7c:	f240 3259 	movw	r2, #857	@ 0x359
 8114a80:	491f      	ldr	r1, [pc, #124]	@ (8114b00 <pbuf_cat+0x9c>)
 8114a82:	4820      	ldr	r0, [pc, #128]	@ (8114b04 <pbuf_cat+0xa0>)
 8114a84:	f007 f9e2 	bl	811be4c <iprintf>
 8114a88:	e034      	b.n	8114af4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8114a8a:	687b      	ldr	r3, [r7, #4]
 8114a8c:	60fb      	str	r3, [r7, #12]
 8114a8e:	e00a      	b.n	8114aa6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8114a90:	68fb      	ldr	r3, [r7, #12]
 8114a92:	891a      	ldrh	r2, [r3, #8]
 8114a94:	683b      	ldr	r3, [r7, #0]
 8114a96:	891b      	ldrh	r3, [r3, #8]
 8114a98:	4413      	add	r3, r2
 8114a9a:	b29a      	uxth	r2, r3
 8114a9c:	68fb      	ldr	r3, [r7, #12]
 8114a9e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8114aa0:	68fb      	ldr	r3, [r7, #12]
 8114aa2:	681b      	ldr	r3, [r3, #0]
 8114aa4:	60fb      	str	r3, [r7, #12]
 8114aa6:	68fb      	ldr	r3, [r7, #12]
 8114aa8:	681b      	ldr	r3, [r3, #0]
 8114aaa:	2b00      	cmp	r3, #0
 8114aac:	d1f0      	bne.n	8114a90 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8114aae:	68fb      	ldr	r3, [r7, #12]
 8114ab0:	891a      	ldrh	r2, [r3, #8]
 8114ab2:	68fb      	ldr	r3, [r7, #12]
 8114ab4:	895b      	ldrh	r3, [r3, #10]
 8114ab6:	429a      	cmp	r2, r3
 8114ab8:	d006      	beq.n	8114ac8 <pbuf_cat+0x64>
 8114aba:	4b10      	ldr	r3, [pc, #64]	@ (8114afc <pbuf_cat+0x98>)
 8114abc:	f240 3262 	movw	r2, #866	@ 0x362
 8114ac0:	4911      	ldr	r1, [pc, #68]	@ (8114b08 <pbuf_cat+0xa4>)
 8114ac2:	4810      	ldr	r0, [pc, #64]	@ (8114b04 <pbuf_cat+0xa0>)
 8114ac4:	f007 f9c2 	bl	811be4c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8114ac8:	68fb      	ldr	r3, [r7, #12]
 8114aca:	681b      	ldr	r3, [r3, #0]
 8114acc:	2b00      	cmp	r3, #0
 8114ace:	d006      	beq.n	8114ade <pbuf_cat+0x7a>
 8114ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8114afc <pbuf_cat+0x98>)
 8114ad2:	f240 3263 	movw	r2, #867	@ 0x363
 8114ad6:	490d      	ldr	r1, [pc, #52]	@ (8114b0c <pbuf_cat+0xa8>)
 8114ad8:	480a      	ldr	r0, [pc, #40]	@ (8114b04 <pbuf_cat+0xa0>)
 8114ada:	f007 f9b7 	bl	811be4c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8114ade:	68fb      	ldr	r3, [r7, #12]
 8114ae0:	891a      	ldrh	r2, [r3, #8]
 8114ae2:	683b      	ldr	r3, [r7, #0]
 8114ae4:	891b      	ldrh	r3, [r3, #8]
 8114ae6:	4413      	add	r3, r2
 8114ae8:	b29a      	uxth	r2, r3
 8114aea:	68fb      	ldr	r3, [r7, #12]
 8114aec:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8114aee:	68fb      	ldr	r3, [r7, #12]
 8114af0:	683a      	ldr	r2, [r7, #0]
 8114af2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8114af4:	3710      	adds	r7, #16
 8114af6:	46bd      	mov	sp, r7
 8114af8:	bd80      	pop	{r7, pc}
 8114afa:	bf00      	nop
 8114afc:	0811dba0 	.word	0x0811dba0
 8114b00:	0811ddd4 	.word	0x0811ddd4
 8114b04:	0811dc40 	.word	0x0811dc40
 8114b08:	0811de0c 	.word	0x0811de0c
 8114b0c:	0811de3c 	.word	0x0811de3c

08114b10 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8114b10:	b580      	push	{r7, lr}
 8114b12:	b086      	sub	sp, #24
 8114b14:	af00      	add	r7, sp, #0
 8114b16:	6078      	str	r0, [r7, #4]
 8114b18:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8114b1a:	2300      	movs	r3, #0
 8114b1c:	617b      	str	r3, [r7, #20]
 8114b1e:	2300      	movs	r3, #0
 8114b20:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8114b22:	687b      	ldr	r3, [r7, #4]
 8114b24:	2b00      	cmp	r3, #0
 8114b26:	d008      	beq.n	8114b3a <pbuf_copy+0x2a>
 8114b28:	683b      	ldr	r3, [r7, #0]
 8114b2a:	2b00      	cmp	r3, #0
 8114b2c:	d005      	beq.n	8114b3a <pbuf_copy+0x2a>
 8114b2e:	687b      	ldr	r3, [r7, #4]
 8114b30:	891a      	ldrh	r2, [r3, #8]
 8114b32:	683b      	ldr	r3, [r7, #0]
 8114b34:	891b      	ldrh	r3, [r3, #8]
 8114b36:	429a      	cmp	r2, r3
 8114b38:	d209      	bcs.n	8114b4e <pbuf_copy+0x3e>
 8114b3a:	4b57      	ldr	r3, [pc, #348]	@ (8114c98 <pbuf_copy+0x188>)
 8114b3c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8114b40:	4956      	ldr	r1, [pc, #344]	@ (8114c9c <pbuf_copy+0x18c>)
 8114b42:	4857      	ldr	r0, [pc, #348]	@ (8114ca0 <pbuf_copy+0x190>)
 8114b44:	f007 f982 	bl	811be4c <iprintf>
 8114b48:	f06f 030f 	mvn.w	r3, #15
 8114b4c:	e09f      	b.n	8114c8e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8114b4e:	687b      	ldr	r3, [r7, #4]
 8114b50:	895b      	ldrh	r3, [r3, #10]
 8114b52:	461a      	mov	r2, r3
 8114b54:	697b      	ldr	r3, [r7, #20]
 8114b56:	1ad2      	subs	r2, r2, r3
 8114b58:	683b      	ldr	r3, [r7, #0]
 8114b5a:	895b      	ldrh	r3, [r3, #10]
 8114b5c:	4619      	mov	r1, r3
 8114b5e:	693b      	ldr	r3, [r7, #16]
 8114b60:	1acb      	subs	r3, r1, r3
 8114b62:	429a      	cmp	r2, r3
 8114b64:	d306      	bcc.n	8114b74 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8114b66:	683b      	ldr	r3, [r7, #0]
 8114b68:	895b      	ldrh	r3, [r3, #10]
 8114b6a:	461a      	mov	r2, r3
 8114b6c:	693b      	ldr	r3, [r7, #16]
 8114b6e:	1ad3      	subs	r3, r2, r3
 8114b70:	60fb      	str	r3, [r7, #12]
 8114b72:	e005      	b.n	8114b80 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8114b74:	687b      	ldr	r3, [r7, #4]
 8114b76:	895b      	ldrh	r3, [r3, #10]
 8114b78:	461a      	mov	r2, r3
 8114b7a:	697b      	ldr	r3, [r7, #20]
 8114b7c:	1ad3      	subs	r3, r2, r3
 8114b7e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8114b80:	687b      	ldr	r3, [r7, #4]
 8114b82:	685a      	ldr	r2, [r3, #4]
 8114b84:	697b      	ldr	r3, [r7, #20]
 8114b86:	18d0      	adds	r0, r2, r3
 8114b88:	683b      	ldr	r3, [r7, #0]
 8114b8a:	685a      	ldr	r2, [r3, #4]
 8114b8c:	693b      	ldr	r3, [r7, #16]
 8114b8e:	4413      	add	r3, r2
 8114b90:	68fa      	ldr	r2, [r7, #12]
 8114b92:	4619      	mov	r1, r3
 8114b94:	f007 fb0b 	bl	811c1ae <memcpy>
    offset_to += len;
 8114b98:	697a      	ldr	r2, [r7, #20]
 8114b9a:	68fb      	ldr	r3, [r7, #12]
 8114b9c:	4413      	add	r3, r2
 8114b9e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8114ba0:	693a      	ldr	r2, [r7, #16]
 8114ba2:	68fb      	ldr	r3, [r7, #12]
 8114ba4:	4413      	add	r3, r2
 8114ba6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8114ba8:	687b      	ldr	r3, [r7, #4]
 8114baa:	895b      	ldrh	r3, [r3, #10]
 8114bac:	461a      	mov	r2, r3
 8114bae:	697b      	ldr	r3, [r7, #20]
 8114bb0:	4293      	cmp	r3, r2
 8114bb2:	d906      	bls.n	8114bc2 <pbuf_copy+0xb2>
 8114bb4:	4b38      	ldr	r3, [pc, #224]	@ (8114c98 <pbuf_copy+0x188>)
 8114bb6:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8114bba:	493a      	ldr	r1, [pc, #232]	@ (8114ca4 <pbuf_copy+0x194>)
 8114bbc:	4838      	ldr	r0, [pc, #224]	@ (8114ca0 <pbuf_copy+0x190>)
 8114bbe:	f007 f945 	bl	811be4c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8114bc2:	683b      	ldr	r3, [r7, #0]
 8114bc4:	895b      	ldrh	r3, [r3, #10]
 8114bc6:	461a      	mov	r2, r3
 8114bc8:	693b      	ldr	r3, [r7, #16]
 8114bca:	4293      	cmp	r3, r2
 8114bcc:	d906      	bls.n	8114bdc <pbuf_copy+0xcc>
 8114bce:	4b32      	ldr	r3, [pc, #200]	@ (8114c98 <pbuf_copy+0x188>)
 8114bd0:	f240 32da 	movw	r2, #986	@ 0x3da
 8114bd4:	4934      	ldr	r1, [pc, #208]	@ (8114ca8 <pbuf_copy+0x198>)
 8114bd6:	4832      	ldr	r0, [pc, #200]	@ (8114ca0 <pbuf_copy+0x190>)
 8114bd8:	f007 f938 	bl	811be4c <iprintf>
    if (offset_from >= p_from->len) {
 8114bdc:	683b      	ldr	r3, [r7, #0]
 8114bde:	895b      	ldrh	r3, [r3, #10]
 8114be0:	461a      	mov	r2, r3
 8114be2:	693b      	ldr	r3, [r7, #16]
 8114be4:	4293      	cmp	r3, r2
 8114be6:	d304      	bcc.n	8114bf2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8114be8:	2300      	movs	r3, #0
 8114bea:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8114bec:	683b      	ldr	r3, [r7, #0]
 8114bee:	681b      	ldr	r3, [r3, #0]
 8114bf0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8114bf2:	687b      	ldr	r3, [r7, #4]
 8114bf4:	895b      	ldrh	r3, [r3, #10]
 8114bf6:	461a      	mov	r2, r3
 8114bf8:	697b      	ldr	r3, [r7, #20]
 8114bfa:	4293      	cmp	r3, r2
 8114bfc:	d114      	bne.n	8114c28 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8114bfe:	2300      	movs	r3, #0
 8114c00:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8114c02:	687b      	ldr	r3, [r7, #4]
 8114c04:	681b      	ldr	r3, [r3, #0]
 8114c06:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8114c08:	687b      	ldr	r3, [r7, #4]
 8114c0a:	2b00      	cmp	r3, #0
 8114c0c:	d10c      	bne.n	8114c28 <pbuf_copy+0x118>
 8114c0e:	683b      	ldr	r3, [r7, #0]
 8114c10:	2b00      	cmp	r3, #0
 8114c12:	d009      	beq.n	8114c28 <pbuf_copy+0x118>
 8114c14:	4b20      	ldr	r3, [pc, #128]	@ (8114c98 <pbuf_copy+0x188>)
 8114c16:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8114c1a:	4924      	ldr	r1, [pc, #144]	@ (8114cac <pbuf_copy+0x19c>)
 8114c1c:	4820      	ldr	r0, [pc, #128]	@ (8114ca0 <pbuf_copy+0x190>)
 8114c1e:	f007 f915 	bl	811be4c <iprintf>
 8114c22:	f06f 030f 	mvn.w	r3, #15
 8114c26:	e032      	b.n	8114c8e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8114c28:	683b      	ldr	r3, [r7, #0]
 8114c2a:	2b00      	cmp	r3, #0
 8114c2c:	d013      	beq.n	8114c56 <pbuf_copy+0x146>
 8114c2e:	683b      	ldr	r3, [r7, #0]
 8114c30:	895a      	ldrh	r2, [r3, #10]
 8114c32:	683b      	ldr	r3, [r7, #0]
 8114c34:	891b      	ldrh	r3, [r3, #8]
 8114c36:	429a      	cmp	r2, r3
 8114c38:	d10d      	bne.n	8114c56 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8114c3a:	683b      	ldr	r3, [r7, #0]
 8114c3c:	681b      	ldr	r3, [r3, #0]
 8114c3e:	2b00      	cmp	r3, #0
 8114c40:	d009      	beq.n	8114c56 <pbuf_copy+0x146>
 8114c42:	4b15      	ldr	r3, [pc, #84]	@ (8114c98 <pbuf_copy+0x188>)
 8114c44:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8114c48:	4919      	ldr	r1, [pc, #100]	@ (8114cb0 <pbuf_copy+0x1a0>)
 8114c4a:	4815      	ldr	r0, [pc, #84]	@ (8114ca0 <pbuf_copy+0x190>)
 8114c4c:	f007 f8fe 	bl	811be4c <iprintf>
 8114c50:	f06f 0305 	mvn.w	r3, #5
 8114c54:	e01b      	b.n	8114c8e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8114c56:	687b      	ldr	r3, [r7, #4]
 8114c58:	2b00      	cmp	r3, #0
 8114c5a:	d013      	beq.n	8114c84 <pbuf_copy+0x174>
 8114c5c:	687b      	ldr	r3, [r7, #4]
 8114c5e:	895a      	ldrh	r2, [r3, #10]
 8114c60:	687b      	ldr	r3, [r7, #4]
 8114c62:	891b      	ldrh	r3, [r3, #8]
 8114c64:	429a      	cmp	r2, r3
 8114c66:	d10d      	bne.n	8114c84 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8114c68:	687b      	ldr	r3, [r7, #4]
 8114c6a:	681b      	ldr	r3, [r3, #0]
 8114c6c:	2b00      	cmp	r3, #0
 8114c6e:	d009      	beq.n	8114c84 <pbuf_copy+0x174>
 8114c70:	4b09      	ldr	r3, [pc, #36]	@ (8114c98 <pbuf_copy+0x188>)
 8114c72:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8114c76:	490e      	ldr	r1, [pc, #56]	@ (8114cb0 <pbuf_copy+0x1a0>)
 8114c78:	4809      	ldr	r0, [pc, #36]	@ (8114ca0 <pbuf_copy+0x190>)
 8114c7a:	f007 f8e7 	bl	811be4c <iprintf>
 8114c7e:	f06f 0305 	mvn.w	r3, #5
 8114c82:	e004      	b.n	8114c8e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8114c84:	683b      	ldr	r3, [r7, #0]
 8114c86:	2b00      	cmp	r3, #0
 8114c88:	f47f af61 	bne.w	8114b4e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8114c8c:	2300      	movs	r3, #0
}
 8114c8e:	4618      	mov	r0, r3
 8114c90:	3718      	adds	r7, #24
 8114c92:	46bd      	mov	sp, r7
 8114c94:	bd80      	pop	{r7, pc}
 8114c96:	bf00      	nop
 8114c98:	0811dba0 	.word	0x0811dba0
 8114c9c:	0811de88 	.word	0x0811de88
 8114ca0:	0811dc40 	.word	0x0811dc40
 8114ca4:	0811deb8 	.word	0x0811deb8
 8114ca8:	0811ded0 	.word	0x0811ded0
 8114cac:	0811deec 	.word	0x0811deec
 8114cb0:	0811defc 	.word	0x0811defc

08114cb4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8114cb4:	b580      	push	{r7, lr}
 8114cb6:	b088      	sub	sp, #32
 8114cb8:	af00      	add	r7, sp, #0
 8114cba:	60f8      	str	r0, [r7, #12]
 8114cbc:	60b9      	str	r1, [r7, #8]
 8114cbe:	4611      	mov	r1, r2
 8114cc0:	461a      	mov	r2, r3
 8114cc2:	460b      	mov	r3, r1
 8114cc4:	80fb      	strh	r3, [r7, #6]
 8114cc6:	4613      	mov	r3, r2
 8114cc8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8114cca:	2300      	movs	r3, #0
 8114ccc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8114cce:	2300      	movs	r3, #0
 8114cd0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8114cd2:	68fb      	ldr	r3, [r7, #12]
 8114cd4:	2b00      	cmp	r3, #0
 8114cd6:	d108      	bne.n	8114cea <pbuf_copy_partial+0x36>
 8114cd8:	4b2b      	ldr	r3, [pc, #172]	@ (8114d88 <pbuf_copy_partial+0xd4>)
 8114cda:	f240 420a 	movw	r2, #1034	@ 0x40a
 8114cde:	492b      	ldr	r1, [pc, #172]	@ (8114d8c <pbuf_copy_partial+0xd8>)
 8114ce0:	482b      	ldr	r0, [pc, #172]	@ (8114d90 <pbuf_copy_partial+0xdc>)
 8114ce2:	f007 f8b3 	bl	811be4c <iprintf>
 8114ce6:	2300      	movs	r3, #0
 8114ce8:	e04a      	b.n	8114d80 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8114cea:	68bb      	ldr	r3, [r7, #8]
 8114cec:	2b00      	cmp	r3, #0
 8114cee:	d108      	bne.n	8114d02 <pbuf_copy_partial+0x4e>
 8114cf0:	4b25      	ldr	r3, [pc, #148]	@ (8114d88 <pbuf_copy_partial+0xd4>)
 8114cf2:	f240 420b 	movw	r2, #1035	@ 0x40b
 8114cf6:	4927      	ldr	r1, [pc, #156]	@ (8114d94 <pbuf_copy_partial+0xe0>)
 8114cf8:	4825      	ldr	r0, [pc, #148]	@ (8114d90 <pbuf_copy_partial+0xdc>)
 8114cfa:	f007 f8a7 	bl	811be4c <iprintf>
 8114cfe:	2300      	movs	r3, #0
 8114d00:	e03e      	b.n	8114d80 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8114d02:	68fb      	ldr	r3, [r7, #12]
 8114d04:	61fb      	str	r3, [r7, #28]
 8114d06:	e034      	b.n	8114d72 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8114d08:	88bb      	ldrh	r3, [r7, #4]
 8114d0a:	2b00      	cmp	r3, #0
 8114d0c:	d00a      	beq.n	8114d24 <pbuf_copy_partial+0x70>
 8114d0e:	69fb      	ldr	r3, [r7, #28]
 8114d10:	895b      	ldrh	r3, [r3, #10]
 8114d12:	88ba      	ldrh	r2, [r7, #4]
 8114d14:	429a      	cmp	r2, r3
 8114d16:	d305      	bcc.n	8114d24 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8114d18:	69fb      	ldr	r3, [r7, #28]
 8114d1a:	895b      	ldrh	r3, [r3, #10]
 8114d1c:	88ba      	ldrh	r2, [r7, #4]
 8114d1e:	1ad3      	subs	r3, r2, r3
 8114d20:	80bb      	strh	r3, [r7, #4]
 8114d22:	e023      	b.n	8114d6c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8114d24:	69fb      	ldr	r3, [r7, #28]
 8114d26:	895a      	ldrh	r2, [r3, #10]
 8114d28:	88bb      	ldrh	r3, [r7, #4]
 8114d2a:	1ad3      	subs	r3, r2, r3
 8114d2c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8114d2e:	8b3a      	ldrh	r2, [r7, #24]
 8114d30:	88fb      	ldrh	r3, [r7, #6]
 8114d32:	429a      	cmp	r2, r3
 8114d34:	d901      	bls.n	8114d3a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8114d36:	88fb      	ldrh	r3, [r7, #6]
 8114d38:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8114d3a:	8b7b      	ldrh	r3, [r7, #26]
 8114d3c:	68ba      	ldr	r2, [r7, #8]
 8114d3e:	18d0      	adds	r0, r2, r3
 8114d40:	69fb      	ldr	r3, [r7, #28]
 8114d42:	685a      	ldr	r2, [r3, #4]
 8114d44:	88bb      	ldrh	r3, [r7, #4]
 8114d46:	4413      	add	r3, r2
 8114d48:	8b3a      	ldrh	r2, [r7, #24]
 8114d4a:	4619      	mov	r1, r3
 8114d4c:	f007 fa2f 	bl	811c1ae <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8114d50:	8afa      	ldrh	r2, [r7, #22]
 8114d52:	8b3b      	ldrh	r3, [r7, #24]
 8114d54:	4413      	add	r3, r2
 8114d56:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8114d58:	8b7a      	ldrh	r2, [r7, #26]
 8114d5a:	8b3b      	ldrh	r3, [r7, #24]
 8114d5c:	4413      	add	r3, r2
 8114d5e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8114d60:	88fa      	ldrh	r2, [r7, #6]
 8114d62:	8b3b      	ldrh	r3, [r7, #24]
 8114d64:	1ad3      	subs	r3, r2, r3
 8114d66:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8114d68:	2300      	movs	r3, #0
 8114d6a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8114d6c:	69fb      	ldr	r3, [r7, #28]
 8114d6e:	681b      	ldr	r3, [r3, #0]
 8114d70:	61fb      	str	r3, [r7, #28]
 8114d72:	88fb      	ldrh	r3, [r7, #6]
 8114d74:	2b00      	cmp	r3, #0
 8114d76:	d002      	beq.n	8114d7e <pbuf_copy_partial+0xca>
 8114d78:	69fb      	ldr	r3, [r7, #28]
 8114d7a:	2b00      	cmp	r3, #0
 8114d7c:	d1c4      	bne.n	8114d08 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8114d7e:	8afb      	ldrh	r3, [r7, #22]
}
 8114d80:	4618      	mov	r0, r3
 8114d82:	3720      	adds	r7, #32
 8114d84:	46bd      	mov	sp, r7
 8114d86:	bd80      	pop	{r7, pc}
 8114d88:	0811dba0 	.word	0x0811dba0
 8114d8c:	0811df28 	.word	0x0811df28
 8114d90:	0811dc40 	.word	0x0811dc40
 8114d94:	0811df48 	.word	0x0811df48

08114d98 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8114d98:	b580      	push	{r7, lr}
 8114d9a:	b084      	sub	sp, #16
 8114d9c:	af00      	add	r7, sp, #0
 8114d9e:	4603      	mov	r3, r0
 8114da0:	603a      	str	r2, [r7, #0]
 8114da2:	71fb      	strb	r3, [r7, #7]
 8114da4:	460b      	mov	r3, r1
 8114da6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8114da8:	683b      	ldr	r3, [r7, #0]
 8114daa:	8919      	ldrh	r1, [r3, #8]
 8114dac:	88ba      	ldrh	r2, [r7, #4]
 8114dae:	79fb      	ldrb	r3, [r7, #7]
 8114db0:	4618      	mov	r0, r3
 8114db2:	f7ff faa5 	bl	8114300 <pbuf_alloc>
 8114db6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8114db8:	68fb      	ldr	r3, [r7, #12]
 8114dba:	2b00      	cmp	r3, #0
 8114dbc:	d101      	bne.n	8114dc2 <pbuf_clone+0x2a>
    return NULL;
 8114dbe:	2300      	movs	r3, #0
 8114dc0:	e011      	b.n	8114de6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8114dc2:	6839      	ldr	r1, [r7, #0]
 8114dc4:	68f8      	ldr	r0, [r7, #12]
 8114dc6:	f7ff fea3 	bl	8114b10 <pbuf_copy>
 8114dca:	4603      	mov	r3, r0
 8114dcc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8114dce:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8114dd2:	2b00      	cmp	r3, #0
 8114dd4:	d006      	beq.n	8114de4 <pbuf_clone+0x4c>
 8114dd6:	4b06      	ldr	r3, [pc, #24]	@ (8114df0 <pbuf_clone+0x58>)
 8114dd8:	f240 5224 	movw	r2, #1316	@ 0x524
 8114ddc:	4905      	ldr	r1, [pc, #20]	@ (8114df4 <pbuf_clone+0x5c>)
 8114dde:	4806      	ldr	r0, [pc, #24]	@ (8114df8 <pbuf_clone+0x60>)
 8114de0:	f007 f834 	bl	811be4c <iprintf>
  return q;
 8114de4:	68fb      	ldr	r3, [r7, #12]
}
 8114de6:	4618      	mov	r0, r3
 8114de8:	3710      	adds	r7, #16
 8114dea:	46bd      	mov	sp, r7
 8114dec:	bd80      	pop	{r7, pc}
 8114dee:	bf00      	nop
 8114df0:	0811dba0 	.word	0x0811dba0
 8114df4:	0811e054 	.word	0x0811e054
 8114df8:	0811dc40 	.word	0x0811dc40

08114dfc <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8114dfc:	b580      	push	{r7, lr}
 8114dfe:	b082      	sub	sp, #8
 8114e00:	af00      	add	r7, sp, #0
 8114e02:	6078      	str	r0, [r7, #4]
 8114e04:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8114e06:	683b      	ldr	r3, [r7, #0]
 8114e08:	2200      	movs	r2, #0
 8114e0a:	2104      	movs	r1, #4
 8114e0c:	4618      	mov	r0, r3
 8114e0e:	f7f7 fd1f 	bl	810c850 <osMessageQueueNew>
 8114e12:	4602      	mov	r2, r0
 8114e14:	687b      	ldr	r3, [r7, #4]
 8114e16:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8114e18:	687b      	ldr	r3, [r7, #4]
 8114e1a:	681b      	ldr	r3, [r3, #0]
 8114e1c:	2b00      	cmp	r3, #0
 8114e1e:	d102      	bne.n	8114e26 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8114e20:	f04f 33ff 	mov.w	r3, #4294967295
 8114e24:	e000      	b.n	8114e28 <sys_mbox_new+0x2c>

  return ERR_OK;
 8114e26:	2300      	movs	r3, #0
}
 8114e28:	4618      	mov	r0, r3
 8114e2a:	3708      	adds	r7, #8
 8114e2c:	46bd      	mov	sp, r7
 8114e2e:	bd80      	pop	{r7, pc}

08114e30 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8114e30:	b580      	push	{r7, lr}
 8114e32:	b084      	sub	sp, #16
 8114e34:	af00      	add	r7, sp, #0
 8114e36:	6078      	str	r0, [r7, #4]
 8114e38:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8114e3a:	687b      	ldr	r3, [r7, #4]
 8114e3c:	6818      	ldr	r0, [r3, #0]
 8114e3e:	4639      	mov	r1, r7
 8114e40:	2300      	movs	r3, #0
 8114e42:	2200      	movs	r2, #0
 8114e44:	f7f7 fd78 	bl	810c938 <osMessageQueuePut>
 8114e48:	4603      	mov	r3, r0
 8114e4a:	2b00      	cmp	r3, #0
 8114e4c:	d102      	bne.n	8114e54 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8114e4e:	2300      	movs	r3, #0
 8114e50:	73fb      	strb	r3, [r7, #15]
 8114e52:	e001      	b.n	8114e58 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8114e54:	23ff      	movs	r3, #255	@ 0xff
 8114e56:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8114e58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8114e5c:	4618      	mov	r0, r3
 8114e5e:	3710      	adds	r7, #16
 8114e60:	46bd      	mov	sp, r7
 8114e62:	bd80      	pop	{r7, pc}

08114e64 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8114e64:	b580      	push	{r7, lr}
 8114e66:	b086      	sub	sp, #24
 8114e68:	af00      	add	r7, sp, #0
 8114e6a:	60f8      	str	r0, [r7, #12]
 8114e6c:	60b9      	str	r1, [r7, #8]
 8114e6e:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8114e70:	f7f7 f9fe 	bl	810c270 <osKernelGetTickCount>
 8114e74:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8114e76:	687b      	ldr	r3, [r7, #4]
 8114e78:	2b00      	cmp	r3, #0
 8114e7a:	d013      	beq.n	8114ea4 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8114e7c:	68fb      	ldr	r3, [r7, #12]
 8114e7e:	6818      	ldr	r0, [r3, #0]
 8114e80:	687b      	ldr	r3, [r7, #4]
 8114e82:	2200      	movs	r2, #0
 8114e84:	68b9      	ldr	r1, [r7, #8]
 8114e86:	f7f7 fdb7 	bl	810c9f8 <osMessageQueueGet>
 8114e8a:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8114e8c:	693b      	ldr	r3, [r7, #16]
 8114e8e:	2b00      	cmp	r3, #0
 8114e90:	d105      	bne.n	8114e9e <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8114e92:	f7f7 f9ed 	bl	810c270 <osKernelGetTickCount>
 8114e96:	4602      	mov	r2, r0
 8114e98:	697b      	ldr	r3, [r7, #20]
 8114e9a:	1ad3      	subs	r3, r2, r3
 8114e9c:	e00f      	b.n	8114ebe <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8114e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8114ea2:	e00c      	b.n	8114ebe <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8114ea4:	68fb      	ldr	r3, [r7, #12]
 8114ea6:	6818      	ldr	r0, [r3, #0]
 8114ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8114eac:	2200      	movs	r2, #0
 8114eae:	68b9      	ldr	r1, [r7, #8]
 8114eb0:	f7f7 fda2 	bl	810c9f8 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8114eb4:	f7f7 f9dc 	bl	810c270 <osKernelGetTickCount>
 8114eb8:	4602      	mov	r2, r0
 8114eba:	697b      	ldr	r3, [r7, #20]
 8114ebc:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8114ebe:	4618      	mov	r0, r3
 8114ec0:	3718      	adds	r7, #24
 8114ec2:	46bd      	mov	sp, r7
 8114ec4:	bd80      	pop	{r7, pc}

08114ec6 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8114ec6:	b480      	push	{r7}
 8114ec8:	b083      	sub	sp, #12
 8114eca:	af00      	add	r7, sp, #0
 8114ecc:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8114ece:	687b      	ldr	r3, [r7, #4]
 8114ed0:	681b      	ldr	r3, [r3, #0]
 8114ed2:	2b00      	cmp	r3, #0
 8114ed4:	d101      	bne.n	8114eda <sys_mbox_valid+0x14>
    return 0;
 8114ed6:	2300      	movs	r3, #0
 8114ed8:	e000      	b.n	8114edc <sys_mbox_valid+0x16>
  else
    return 1;
 8114eda:	2301      	movs	r3, #1
}
 8114edc:	4618      	mov	r0, r3
 8114ede:	370c      	adds	r7, #12
 8114ee0:	46bd      	mov	sp, r7
 8114ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8114ee6:	4770      	bx	lr

08114ee8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8114ee8:	b580      	push	{r7, lr}
 8114eea:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8114eec:	2000      	movs	r0, #0
 8114eee:	f7f7 fa81 	bl	810c3f4 <osMutexNew>
 8114ef2:	4603      	mov	r3, r0
 8114ef4:	4a01      	ldr	r2, [pc, #4]	@ (8114efc <sys_init+0x14>)
 8114ef6:	6013      	str	r3, [r2, #0]
#endif
}
 8114ef8:	bf00      	nop
 8114efa:	bd80      	pop	{r7, pc}
 8114efc:	10011d10 	.word	0x10011d10

08114f00 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8114f00:	b580      	push	{r7, lr}
 8114f02:	b082      	sub	sp, #8
 8114f04:	af00      	add	r7, sp, #0
 8114f06:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8114f08:	2000      	movs	r0, #0
 8114f0a:	f7f7 fa73 	bl	810c3f4 <osMutexNew>
 8114f0e:	4602      	mov	r2, r0
 8114f10:	687b      	ldr	r3, [r7, #4]
 8114f12:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8114f14:	687b      	ldr	r3, [r7, #4]
 8114f16:	681b      	ldr	r3, [r3, #0]
 8114f18:	2b00      	cmp	r3, #0
 8114f1a:	d102      	bne.n	8114f22 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8114f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8114f20:	e000      	b.n	8114f24 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8114f22:	2300      	movs	r3, #0
}
 8114f24:	4618      	mov	r0, r3
 8114f26:	3708      	adds	r7, #8
 8114f28:	46bd      	mov	sp, r7
 8114f2a:	bd80      	pop	{r7, pc}

08114f2c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8114f2c:	b580      	push	{r7, lr}
 8114f2e:	b082      	sub	sp, #8
 8114f30:	af00      	add	r7, sp, #0
 8114f32:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8114f34:	687b      	ldr	r3, [r7, #4]
 8114f36:	681b      	ldr	r3, [r3, #0]
 8114f38:	f04f 31ff 	mov.w	r1, #4294967295
 8114f3c:	4618      	mov	r0, r3
 8114f3e:	f7f7 fadf 	bl	810c500 <osMutexAcquire>
#endif
}
 8114f42:	bf00      	nop
 8114f44:	3708      	adds	r7, #8
 8114f46:	46bd      	mov	sp, r7
 8114f48:	bd80      	pop	{r7, pc}

08114f4a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8114f4a:	b580      	push	{r7, lr}
 8114f4c:	b082      	sub	sp, #8
 8114f4e:	af00      	add	r7, sp, #0
 8114f50:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8114f52:	687b      	ldr	r3, [r7, #4]
 8114f54:	681b      	ldr	r3, [r3, #0]
 8114f56:	4618      	mov	r0, r3
 8114f58:	f7f7 fb1d 	bl	810c596 <osMutexRelease>
}
 8114f5c:	bf00      	nop
 8114f5e:	3708      	adds	r7, #8
 8114f60:	46bd      	mov	sp, r7
 8114f62:	bd80      	pop	{r7, pc}

08114f64 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8114f64:	b580      	push	{r7, lr}
 8114f66:	b08e      	sub	sp, #56	@ 0x38
 8114f68:	af00      	add	r7, sp, #0
 8114f6a:	60f8      	str	r0, [r7, #12]
 8114f6c:	60b9      	str	r1, [r7, #8]
 8114f6e:	607a      	str	r2, [r7, #4]
 8114f70:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8114f72:	f107 0314 	add.w	r3, r7, #20
 8114f76:	2224      	movs	r2, #36	@ 0x24
 8114f78:	2100      	movs	r1, #0
 8114f7a:	4618      	mov	r0, r3
 8114f7c:	f006 ffe5 	bl	811bf4a <memset>
 8114f80:	68fb      	ldr	r3, [r7, #12]
 8114f82:	617b      	str	r3, [r7, #20]
 8114f84:	683b      	ldr	r3, [r7, #0]
 8114f86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8114f88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8114f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8114f8c:	f107 0314 	add.w	r3, r7, #20
 8114f90:	461a      	mov	r2, r3
 8114f92:	6879      	ldr	r1, [r7, #4]
 8114f94:	68b8      	ldr	r0, [r7, #8]
 8114f96:	f7f7 f980 	bl	810c29a <osThreadNew>
 8114f9a:	4603      	mov	r3, r0
#endif
}
 8114f9c:	4618      	mov	r0, r3
 8114f9e:	3738      	adds	r7, #56	@ 0x38
 8114fa0:	46bd      	mov	sp, r7
 8114fa2:	bd80      	pop	{r7, pc}

08114fa4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8114fa4:	b580      	push	{r7, lr}
 8114fa6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8114fa8:	4b04      	ldr	r3, [pc, #16]	@ (8114fbc <sys_arch_protect+0x18>)
 8114faa:	681b      	ldr	r3, [r3, #0]
 8114fac:	f04f 31ff 	mov.w	r1, #4294967295
 8114fb0:	4618      	mov	r0, r3
 8114fb2:	f7f7 faa5 	bl	810c500 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8114fb6:	2301      	movs	r3, #1
}
 8114fb8:	4618      	mov	r0, r3
 8114fba:	bd80      	pop	{r7, pc}
 8114fbc:	10011d10 	.word	0x10011d10

08114fc0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8114fc0:	b580      	push	{r7, lr}
 8114fc2:	b082      	sub	sp, #8
 8114fc4:	af00      	add	r7, sp, #0
 8114fc6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8114fc8:	4b04      	ldr	r3, [pc, #16]	@ (8114fdc <sys_arch_unprotect+0x1c>)
 8114fca:	681b      	ldr	r3, [r3, #0]
 8114fcc:	4618      	mov	r0, r3
 8114fce:	f7f7 fae2 	bl	810c596 <osMutexRelease>
}
 8114fd2:	bf00      	nop
 8114fd4:	3708      	adds	r7, #8
 8114fd6:	46bd      	mov	sp, r7
 8114fd8:	bd80      	pop	{r7, pc}
 8114fda:	bf00      	nop
 8114fdc:	10011d10 	.word	0x10011d10

08114fe0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8114fe0:	b580      	push	{r7, lr}
 8114fe2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8114fe4:	f006 fe32 	bl	811bc4c <rand>
 8114fe8:	4603      	mov	r3, r0
 8114fea:	b29b      	uxth	r3, r3
 8114fec:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8114ff0:	b29b      	uxth	r3, r3
 8114ff2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8114ff6:	b29a      	uxth	r2, r3
 8114ff8:	4b01      	ldr	r3, [pc, #4]	@ (8115000 <tcp_init+0x20>)
 8114ffa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8114ffc:	bf00      	nop
 8114ffe:	bd80      	pop	{r7, pc}
 8115000:	10000028 	.word	0x10000028

08115004 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8115004:	b580      	push	{r7, lr}
 8115006:	b082      	sub	sp, #8
 8115008:	af00      	add	r7, sp, #0
 811500a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 811500c:	687b      	ldr	r3, [r7, #4]
 811500e:	7d1b      	ldrb	r3, [r3, #20]
 8115010:	2b01      	cmp	r3, #1
 8115012:	d105      	bne.n	8115020 <tcp_free+0x1c>
 8115014:	4b06      	ldr	r3, [pc, #24]	@ (8115030 <tcp_free+0x2c>)
 8115016:	22d4      	movs	r2, #212	@ 0xd4
 8115018:	4906      	ldr	r1, [pc, #24]	@ (8115034 <tcp_free+0x30>)
 811501a:	4807      	ldr	r0, [pc, #28]	@ (8115038 <tcp_free+0x34>)
 811501c:	f006 ff16 	bl	811be4c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8115020:	6879      	ldr	r1, [r7, #4]
 8115022:	2001      	movs	r0, #1
 8115024:	f7fe fdac 	bl	8113b80 <memp_free>
}
 8115028:	bf00      	nop
 811502a:	3708      	adds	r7, #8
 811502c:	46bd      	mov	sp, r7
 811502e:	bd80      	pop	{r7, pc}
 8115030:	0811e0e0 	.word	0x0811e0e0
 8115034:	0811e150 	.word	0x0811e150
 8115038:	0811e164 	.word	0x0811e164

0811503c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 811503c:	b580      	push	{r7, lr}
 811503e:	b082      	sub	sp, #8
 8115040:	af00      	add	r7, sp, #0
 8115042:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8115044:	687b      	ldr	r3, [r7, #4]
 8115046:	7d1b      	ldrb	r3, [r3, #20]
 8115048:	2b01      	cmp	r3, #1
 811504a:	d105      	bne.n	8115058 <tcp_free_listen+0x1c>
 811504c:	4b06      	ldr	r3, [pc, #24]	@ (8115068 <tcp_free_listen+0x2c>)
 811504e:	22df      	movs	r2, #223	@ 0xdf
 8115050:	4906      	ldr	r1, [pc, #24]	@ (811506c <tcp_free_listen+0x30>)
 8115052:	4807      	ldr	r0, [pc, #28]	@ (8115070 <tcp_free_listen+0x34>)
 8115054:	f006 fefa 	bl	811be4c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8115058:	6879      	ldr	r1, [r7, #4]
 811505a:	2002      	movs	r0, #2
 811505c:	f7fe fd90 	bl	8113b80 <memp_free>
}
 8115060:	bf00      	nop
 8115062:	3708      	adds	r7, #8
 8115064:	46bd      	mov	sp, r7
 8115066:	bd80      	pop	{r7, pc}
 8115068:	0811e0e0 	.word	0x0811e0e0
 811506c:	0811e18c 	.word	0x0811e18c
 8115070:	0811e164 	.word	0x0811e164

08115074 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8115074:	b580      	push	{r7, lr}
 8115076:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8115078:	f001 f804 	bl	8116084 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 811507c:	4b07      	ldr	r3, [pc, #28]	@ (811509c <tcp_tmr+0x28>)
 811507e:	781b      	ldrb	r3, [r3, #0]
 8115080:	3301      	adds	r3, #1
 8115082:	b2da      	uxtb	r2, r3
 8115084:	4b05      	ldr	r3, [pc, #20]	@ (811509c <tcp_tmr+0x28>)
 8115086:	701a      	strb	r2, [r3, #0]
 8115088:	4b04      	ldr	r3, [pc, #16]	@ (811509c <tcp_tmr+0x28>)
 811508a:	781b      	ldrb	r3, [r3, #0]
 811508c:	f003 0301 	and.w	r3, r3, #1
 8115090:	2b00      	cmp	r3, #0
 8115092:	d001      	beq.n	8115098 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8115094:	f000 fcb4 	bl	8115a00 <tcp_slowtmr>
  }
}
 8115098:	bf00      	nop
 811509a:	bd80      	pop	{r7, pc}
 811509c:	10011d29 	.word	0x10011d29

081150a0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 81150a0:	b580      	push	{r7, lr}
 81150a2:	b084      	sub	sp, #16
 81150a4:	af00      	add	r7, sp, #0
 81150a6:	6078      	str	r0, [r7, #4]
 81150a8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 81150aa:	683b      	ldr	r3, [r7, #0]
 81150ac:	2b00      	cmp	r3, #0
 81150ae:	d105      	bne.n	81150bc <tcp_remove_listener+0x1c>
 81150b0:	4b0d      	ldr	r3, [pc, #52]	@ (81150e8 <tcp_remove_listener+0x48>)
 81150b2:	22ff      	movs	r2, #255	@ 0xff
 81150b4:	490d      	ldr	r1, [pc, #52]	@ (81150ec <tcp_remove_listener+0x4c>)
 81150b6:	480e      	ldr	r0, [pc, #56]	@ (81150f0 <tcp_remove_listener+0x50>)
 81150b8:	f006 fec8 	bl	811be4c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 81150bc:	687b      	ldr	r3, [r7, #4]
 81150be:	60fb      	str	r3, [r7, #12]
 81150c0:	e00a      	b.n	81150d8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 81150c2:	68fb      	ldr	r3, [r7, #12]
 81150c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81150c6:	683a      	ldr	r2, [r7, #0]
 81150c8:	429a      	cmp	r2, r3
 81150ca:	d102      	bne.n	81150d2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 81150cc:	68fb      	ldr	r3, [r7, #12]
 81150ce:	2200      	movs	r2, #0
 81150d0:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 81150d2:	68fb      	ldr	r3, [r7, #12]
 81150d4:	68db      	ldr	r3, [r3, #12]
 81150d6:	60fb      	str	r3, [r7, #12]
 81150d8:	68fb      	ldr	r3, [r7, #12]
 81150da:	2b00      	cmp	r3, #0
 81150dc:	d1f1      	bne.n	81150c2 <tcp_remove_listener+0x22>
    }
  }
}
 81150de:	bf00      	nop
 81150e0:	bf00      	nop
 81150e2:	3710      	adds	r7, #16
 81150e4:	46bd      	mov	sp, r7
 81150e6:	bd80      	pop	{r7, pc}
 81150e8:	0811e0e0 	.word	0x0811e0e0
 81150ec:	0811e1a8 	.word	0x0811e1a8
 81150f0:	0811e164 	.word	0x0811e164

081150f4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 81150f4:	b580      	push	{r7, lr}
 81150f6:	b084      	sub	sp, #16
 81150f8:	af00      	add	r7, sp, #0
 81150fa:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 81150fc:	687b      	ldr	r3, [r7, #4]
 81150fe:	2b00      	cmp	r3, #0
 8115100:	d106      	bne.n	8115110 <tcp_listen_closed+0x1c>
 8115102:	4b14      	ldr	r3, [pc, #80]	@ (8115154 <tcp_listen_closed+0x60>)
 8115104:	f240 1211 	movw	r2, #273	@ 0x111
 8115108:	4913      	ldr	r1, [pc, #76]	@ (8115158 <tcp_listen_closed+0x64>)
 811510a:	4814      	ldr	r0, [pc, #80]	@ (811515c <tcp_listen_closed+0x68>)
 811510c:	f006 fe9e 	bl	811be4c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8115110:	687b      	ldr	r3, [r7, #4]
 8115112:	7d1b      	ldrb	r3, [r3, #20]
 8115114:	2b01      	cmp	r3, #1
 8115116:	d006      	beq.n	8115126 <tcp_listen_closed+0x32>
 8115118:	4b0e      	ldr	r3, [pc, #56]	@ (8115154 <tcp_listen_closed+0x60>)
 811511a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 811511e:	4910      	ldr	r1, [pc, #64]	@ (8115160 <tcp_listen_closed+0x6c>)
 8115120:	480e      	ldr	r0, [pc, #56]	@ (811515c <tcp_listen_closed+0x68>)
 8115122:	f006 fe93 	bl	811be4c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8115126:	2301      	movs	r3, #1
 8115128:	60fb      	str	r3, [r7, #12]
 811512a:	e00b      	b.n	8115144 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 811512c:	4a0d      	ldr	r2, [pc, #52]	@ (8115164 <tcp_listen_closed+0x70>)
 811512e:	68fb      	ldr	r3, [r7, #12]
 8115130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8115134:	681b      	ldr	r3, [r3, #0]
 8115136:	6879      	ldr	r1, [r7, #4]
 8115138:	4618      	mov	r0, r3
 811513a:	f7ff ffb1 	bl	81150a0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 811513e:	68fb      	ldr	r3, [r7, #12]
 8115140:	3301      	adds	r3, #1
 8115142:	60fb      	str	r3, [r7, #12]
 8115144:	68fb      	ldr	r3, [r7, #12]
 8115146:	2b03      	cmp	r3, #3
 8115148:	d9f0      	bls.n	811512c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 811514a:	bf00      	nop
 811514c:	bf00      	nop
 811514e:	3710      	adds	r7, #16
 8115150:	46bd      	mov	sp, r7
 8115152:	bd80      	pop	{r7, pc}
 8115154:	0811e0e0 	.word	0x0811e0e0
 8115158:	0811e1d0 	.word	0x0811e1d0
 811515c:	0811e164 	.word	0x0811e164
 8115160:	0811e1dc 	.word	0x0811e1dc
 8115164:	0811fd3c 	.word	0x0811fd3c

08115168 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8115168:	b5b0      	push	{r4, r5, r7, lr}
 811516a:	b088      	sub	sp, #32
 811516c:	af04      	add	r7, sp, #16
 811516e:	6078      	str	r0, [r7, #4]
 8115170:	460b      	mov	r3, r1
 8115172:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8115174:	687b      	ldr	r3, [r7, #4]
 8115176:	2b00      	cmp	r3, #0
 8115178:	d106      	bne.n	8115188 <tcp_close_shutdown+0x20>
 811517a:	4b63      	ldr	r3, [pc, #396]	@ (8115308 <tcp_close_shutdown+0x1a0>)
 811517c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8115180:	4962      	ldr	r1, [pc, #392]	@ (811530c <tcp_close_shutdown+0x1a4>)
 8115182:	4863      	ldr	r0, [pc, #396]	@ (8115310 <tcp_close_shutdown+0x1a8>)
 8115184:	f006 fe62 	bl	811be4c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8115188:	78fb      	ldrb	r3, [r7, #3]
 811518a:	2b00      	cmp	r3, #0
 811518c:	d067      	beq.n	811525e <tcp_close_shutdown+0xf6>
 811518e:	687b      	ldr	r3, [r7, #4]
 8115190:	7d1b      	ldrb	r3, [r3, #20]
 8115192:	2b04      	cmp	r3, #4
 8115194:	d003      	beq.n	811519e <tcp_close_shutdown+0x36>
 8115196:	687b      	ldr	r3, [r7, #4]
 8115198:	7d1b      	ldrb	r3, [r3, #20]
 811519a:	2b07      	cmp	r3, #7
 811519c:	d15f      	bne.n	811525e <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 811519e:	687b      	ldr	r3, [r7, #4]
 81151a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81151a2:	2b00      	cmp	r3, #0
 81151a4:	d105      	bne.n	81151b2 <tcp_close_shutdown+0x4a>
 81151a6:	687b      	ldr	r3, [r7, #4]
 81151a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81151aa:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 81151ae:	4293      	cmp	r3, r2
 81151b0:	d055      	beq.n	811525e <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 81151b2:	687b      	ldr	r3, [r7, #4]
 81151b4:	8b5b      	ldrh	r3, [r3, #26]
 81151b6:	f003 0310 	and.w	r3, r3, #16
 81151ba:	2b00      	cmp	r3, #0
 81151bc:	d106      	bne.n	81151cc <tcp_close_shutdown+0x64>
 81151be:	4b52      	ldr	r3, [pc, #328]	@ (8115308 <tcp_close_shutdown+0x1a0>)
 81151c0:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 81151c4:	4953      	ldr	r1, [pc, #332]	@ (8115314 <tcp_close_shutdown+0x1ac>)
 81151c6:	4852      	ldr	r0, [pc, #328]	@ (8115310 <tcp_close_shutdown+0x1a8>)
 81151c8:	f006 fe40 	bl	811be4c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 81151cc:	687b      	ldr	r3, [r7, #4]
 81151ce:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 81151d0:	687b      	ldr	r3, [r7, #4]
 81151d2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 81151d4:	687d      	ldr	r5, [r7, #4]
 81151d6:	687b      	ldr	r3, [r7, #4]
 81151d8:	3304      	adds	r3, #4
 81151da:	687a      	ldr	r2, [r7, #4]
 81151dc:	8ad2      	ldrh	r2, [r2, #22]
 81151de:	6879      	ldr	r1, [r7, #4]
 81151e0:	8b09      	ldrh	r1, [r1, #24]
 81151e2:	9102      	str	r1, [sp, #8]
 81151e4:	9201      	str	r2, [sp, #4]
 81151e6:	9300      	str	r3, [sp, #0]
 81151e8:	462b      	mov	r3, r5
 81151ea:	4622      	mov	r2, r4
 81151ec:	4601      	mov	r1, r0
 81151ee:	6878      	ldr	r0, [r7, #4]
 81151f0:	f005 fcc4 	bl	811ab7c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 81151f4:	6878      	ldr	r0, [r7, #4]
 81151f6:	f001 faa5 	bl	8116744 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 81151fa:	4b47      	ldr	r3, [pc, #284]	@ (8115318 <tcp_close_shutdown+0x1b0>)
 81151fc:	681b      	ldr	r3, [r3, #0]
 81151fe:	687a      	ldr	r2, [r7, #4]
 8115200:	429a      	cmp	r2, r3
 8115202:	d105      	bne.n	8115210 <tcp_close_shutdown+0xa8>
 8115204:	4b44      	ldr	r3, [pc, #272]	@ (8115318 <tcp_close_shutdown+0x1b0>)
 8115206:	681b      	ldr	r3, [r3, #0]
 8115208:	68db      	ldr	r3, [r3, #12]
 811520a:	4a43      	ldr	r2, [pc, #268]	@ (8115318 <tcp_close_shutdown+0x1b0>)
 811520c:	6013      	str	r3, [r2, #0]
 811520e:	e013      	b.n	8115238 <tcp_close_shutdown+0xd0>
 8115210:	4b41      	ldr	r3, [pc, #260]	@ (8115318 <tcp_close_shutdown+0x1b0>)
 8115212:	681b      	ldr	r3, [r3, #0]
 8115214:	60fb      	str	r3, [r7, #12]
 8115216:	e00c      	b.n	8115232 <tcp_close_shutdown+0xca>
 8115218:	68fb      	ldr	r3, [r7, #12]
 811521a:	68db      	ldr	r3, [r3, #12]
 811521c:	687a      	ldr	r2, [r7, #4]
 811521e:	429a      	cmp	r2, r3
 8115220:	d104      	bne.n	811522c <tcp_close_shutdown+0xc4>
 8115222:	687b      	ldr	r3, [r7, #4]
 8115224:	68da      	ldr	r2, [r3, #12]
 8115226:	68fb      	ldr	r3, [r7, #12]
 8115228:	60da      	str	r2, [r3, #12]
 811522a:	e005      	b.n	8115238 <tcp_close_shutdown+0xd0>
 811522c:	68fb      	ldr	r3, [r7, #12]
 811522e:	68db      	ldr	r3, [r3, #12]
 8115230:	60fb      	str	r3, [r7, #12]
 8115232:	68fb      	ldr	r3, [r7, #12]
 8115234:	2b00      	cmp	r3, #0
 8115236:	d1ef      	bne.n	8115218 <tcp_close_shutdown+0xb0>
 8115238:	687b      	ldr	r3, [r7, #4]
 811523a:	2200      	movs	r2, #0
 811523c:	60da      	str	r2, [r3, #12]
 811523e:	4b37      	ldr	r3, [pc, #220]	@ (811531c <tcp_close_shutdown+0x1b4>)
 8115240:	2201      	movs	r2, #1
 8115242:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8115244:	4b36      	ldr	r3, [pc, #216]	@ (8115320 <tcp_close_shutdown+0x1b8>)
 8115246:	681b      	ldr	r3, [r3, #0]
 8115248:	687a      	ldr	r2, [r7, #4]
 811524a:	429a      	cmp	r2, r3
 811524c:	d102      	bne.n	8115254 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 811524e:	f003 ff3b 	bl	81190c8 <tcp_trigger_input_pcb_close>
 8115252:	e002      	b.n	811525a <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 8115254:	6878      	ldr	r0, [r7, #4]
 8115256:	f7ff fed5 	bl	8115004 <tcp_free>
      }
      return ERR_OK;
 811525a:	2300      	movs	r3, #0
 811525c:	e050      	b.n	8115300 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 811525e:	687b      	ldr	r3, [r7, #4]
 8115260:	7d1b      	ldrb	r3, [r3, #20]
 8115262:	2b02      	cmp	r3, #2
 8115264:	d03b      	beq.n	81152de <tcp_close_shutdown+0x176>
 8115266:	2b02      	cmp	r3, #2
 8115268:	dc44      	bgt.n	81152f4 <tcp_close_shutdown+0x18c>
 811526a:	2b00      	cmp	r3, #0
 811526c:	d002      	beq.n	8115274 <tcp_close_shutdown+0x10c>
 811526e:	2b01      	cmp	r3, #1
 8115270:	d02a      	beq.n	81152c8 <tcp_close_shutdown+0x160>
 8115272:	e03f      	b.n	81152f4 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8115274:	687b      	ldr	r3, [r7, #4]
 8115276:	8adb      	ldrh	r3, [r3, #22]
 8115278:	2b00      	cmp	r3, #0
 811527a:	d021      	beq.n	81152c0 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 811527c:	4b29      	ldr	r3, [pc, #164]	@ (8115324 <tcp_close_shutdown+0x1bc>)
 811527e:	681b      	ldr	r3, [r3, #0]
 8115280:	687a      	ldr	r2, [r7, #4]
 8115282:	429a      	cmp	r2, r3
 8115284:	d105      	bne.n	8115292 <tcp_close_shutdown+0x12a>
 8115286:	4b27      	ldr	r3, [pc, #156]	@ (8115324 <tcp_close_shutdown+0x1bc>)
 8115288:	681b      	ldr	r3, [r3, #0]
 811528a:	68db      	ldr	r3, [r3, #12]
 811528c:	4a25      	ldr	r2, [pc, #148]	@ (8115324 <tcp_close_shutdown+0x1bc>)
 811528e:	6013      	str	r3, [r2, #0]
 8115290:	e013      	b.n	81152ba <tcp_close_shutdown+0x152>
 8115292:	4b24      	ldr	r3, [pc, #144]	@ (8115324 <tcp_close_shutdown+0x1bc>)
 8115294:	681b      	ldr	r3, [r3, #0]
 8115296:	60bb      	str	r3, [r7, #8]
 8115298:	e00c      	b.n	81152b4 <tcp_close_shutdown+0x14c>
 811529a:	68bb      	ldr	r3, [r7, #8]
 811529c:	68db      	ldr	r3, [r3, #12]
 811529e:	687a      	ldr	r2, [r7, #4]
 81152a0:	429a      	cmp	r2, r3
 81152a2:	d104      	bne.n	81152ae <tcp_close_shutdown+0x146>
 81152a4:	687b      	ldr	r3, [r7, #4]
 81152a6:	68da      	ldr	r2, [r3, #12]
 81152a8:	68bb      	ldr	r3, [r7, #8]
 81152aa:	60da      	str	r2, [r3, #12]
 81152ac:	e005      	b.n	81152ba <tcp_close_shutdown+0x152>
 81152ae:	68bb      	ldr	r3, [r7, #8]
 81152b0:	68db      	ldr	r3, [r3, #12]
 81152b2:	60bb      	str	r3, [r7, #8]
 81152b4:	68bb      	ldr	r3, [r7, #8]
 81152b6:	2b00      	cmp	r3, #0
 81152b8:	d1ef      	bne.n	811529a <tcp_close_shutdown+0x132>
 81152ba:	687b      	ldr	r3, [r7, #4]
 81152bc:	2200      	movs	r2, #0
 81152be:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 81152c0:	6878      	ldr	r0, [r7, #4]
 81152c2:	f7ff fe9f 	bl	8115004 <tcp_free>
      break;
 81152c6:	e01a      	b.n	81152fe <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 81152c8:	6878      	ldr	r0, [r7, #4]
 81152ca:	f7ff ff13 	bl	81150f4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 81152ce:	6879      	ldr	r1, [r7, #4]
 81152d0:	4815      	ldr	r0, [pc, #84]	@ (8115328 <tcp_close_shutdown+0x1c0>)
 81152d2:	f001 fa87 	bl	81167e4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 81152d6:	6878      	ldr	r0, [r7, #4]
 81152d8:	f7ff feb0 	bl	811503c <tcp_free_listen>
      break;
 81152dc:	e00f      	b.n	81152fe <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 81152de:	6879      	ldr	r1, [r7, #4]
 81152e0:	480d      	ldr	r0, [pc, #52]	@ (8115318 <tcp_close_shutdown+0x1b0>)
 81152e2:	f001 fa7f 	bl	81167e4 <tcp_pcb_remove>
 81152e6:	4b0d      	ldr	r3, [pc, #52]	@ (811531c <tcp_close_shutdown+0x1b4>)
 81152e8:	2201      	movs	r2, #1
 81152ea:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 81152ec:	6878      	ldr	r0, [r7, #4]
 81152ee:	f7ff fe89 	bl	8115004 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 81152f2:	e004      	b.n	81152fe <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 81152f4:	6878      	ldr	r0, [r7, #4]
 81152f6:	f000 f819 	bl	811532c <tcp_close_shutdown_fin>
 81152fa:	4603      	mov	r3, r0
 81152fc:	e000      	b.n	8115300 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 81152fe:	2300      	movs	r3, #0
}
 8115300:	4618      	mov	r0, r3
 8115302:	3710      	adds	r7, #16
 8115304:	46bd      	mov	sp, r7
 8115306:	bdb0      	pop	{r4, r5, r7, pc}
 8115308:	0811e0e0 	.word	0x0811e0e0
 811530c:	0811e1f4 	.word	0x0811e1f4
 8115310:	0811e164 	.word	0x0811e164
 8115314:	0811e214 	.word	0x0811e214
 8115318:	10011d20 	.word	0x10011d20
 811531c:	10011d28 	.word	0x10011d28
 8115320:	10011d60 	.word	0x10011d60
 8115324:	10011d18 	.word	0x10011d18
 8115328:	10011d1c 	.word	0x10011d1c

0811532c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 811532c:	b580      	push	{r7, lr}
 811532e:	b084      	sub	sp, #16
 8115330:	af00      	add	r7, sp, #0
 8115332:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8115334:	687b      	ldr	r3, [r7, #4]
 8115336:	2b00      	cmp	r3, #0
 8115338:	d106      	bne.n	8115348 <tcp_close_shutdown_fin+0x1c>
 811533a:	4b2e      	ldr	r3, [pc, #184]	@ (81153f4 <tcp_close_shutdown_fin+0xc8>)
 811533c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8115340:	492d      	ldr	r1, [pc, #180]	@ (81153f8 <tcp_close_shutdown_fin+0xcc>)
 8115342:	482e      	ldr	r0, [pc, #184]	@ (81153fc <tcp_close_shutdown_fin+0xd0>)
 8115344:	f006 fd82 	bl	811be4c <iprintf>

  switch (pcb->state) {
 8115348:	687b      	ldr	r3, [r7, #4]
 811534a:	7d1b      	ldrb	r3, [r3, #20]
 811534c:	2b07      	cmp	r3, #7
 811534e:	d020      	beq.n	8115392 <tcp_close_shutdown_fin+0x66>
 8115350:	2b07      	cmp	r3, #7
 8115352:	dc2b      	bgt.n	81153ac <tcp_close_shutdown_fin+0x80>
 8115354:	2b03      	cmp	r3, #3
 8115356:	d002      	beq.n	811535e <tcp_close_shutdown_fin+0x32>
 8115358:	2b04      	cmp	r3, #4
 811535a:	d00d      	beq.n	8115378 <tcp_close_shutdown_fin+0x4c>
 811535c:	e026      	b.n	81153ac <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 811535e:	6878      	ldr	r0, [r7, #4]
 8115360:	f004 fd1a 	bl	8119d98 <tcp_send_fin>
 8115364:	4603      	mov	r3, r0
 8115366:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8115368:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811536c:	2b00      	cmp	r3, #0
 811536e:	d11f      	bne.n	81153b0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8115370:	687b      	ldr	r3, [r7, #4]
 8115372:	2205      	movs	r2, #5
 8115374:	751a      	strb	r2, [r3, #20]
      }
      break;
 8115376:	e01b      	b.n	81153b0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8115378:	6878      	ldr	r0, [r7, #4]
 811537a:	f004 fd0d 	bl	8119d98 <tcp_send_fin>
 811537e:	4603      	mov	r3, r0
 8115380:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8115382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8115386:	2b00      	cmp	r3, #0
 8115388:	d114      	bne.n	81153b4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 811538a:	687b      	ldr	r3, [r7, #4]
 811538c:	2205      	movs	r2, #5
 811538e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8115390:	e010      	b.n	81153b4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8115392:	6878      	ldr	r0, [r7, #4]
 8115394:	f004 fd00 	bl	8119d98 <tcp_send_fin>
 8115398:	4603      	mov	r3, r0
 811539a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 811539c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81153a0:	2b00      	cmp	r3, #0
 81153a2:	d109      	bne.n	81153b8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 81153a4:	687b      	ldr	r3, [r7, #4]
 81153a6:	2209      	movs	r2, #9
 81153a8:	751a      	strb	r2, [r3, #20]
      }
      break;
 81153aa:	e005      	b.n	81153b8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 81153ac:	2300      	movs	r3, #0
 81153ae:	e01c      	b.n	81153ea <tcp_close_shutdown_fin+0xbe>
      break;
 81153b0:	bf00      	nop
 81153b2:	e002      	b.n	81153ba <tcp_close_shutdown_fin+0x8e>
      break;
 81153b4:	bf00      	nop
 81153b6:	e000      	b.n	81153ba <tcp_close_shutdown_fin+0x8e>
      break;
 81153b8:	bf00      	nop
  }

  if (err == ERR_OK) {
 81153ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81153be:	2b00      	cmp	r3, #0
 81153c0:	d103      	bne.n	81153ca <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 81153c2:	6878      	ldr	r0, [r7, #4]
 81153c4:	f004 fe26 	bl	811a014 <tcp_output>
 81153c8:	e00d      	b.n	81153e6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 81153ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81153ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 81153d2:	d108      	bne.n	81153e6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 81153d4:	687b      	ldr	r3, [r7, #4]
 81153d6:	8b5b      	ldrh	r3, [r3, #26]
 81153d8:	f043 0308 	orr.w	r3, r3, #8
 81153dc:	b29a      	uxth	r2, r3
 81153de:	687b      	ldr	r3, [r7, #4]
 81153e0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 81153e2:	2300      	movs	r3, #0
 81153e4:	e001      	b.n	81153ea <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 81153e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 81153ea:	4618      	mov	r0, r3
 81153ec:	3710      	adds	r7, #16
 81153ee:	46bd      	mov	sp, r7
 81153f0:	bd80      	pop	{r7, pc}
 81153f2:	bf00      	nop
 81153f4:	0811e0e0 	.word	0x0811e0e0
 81153f8:	0811e1d0 	.word	0x0811e1d0
 81153fc:	0811e164 	.word	0x0811e164

08115400 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8115400:	b580      	push	{r7, lr}
 8115402:	b082      	sub	sp, #8
 8115404:	af00      	add	r7, sp, #0
 8115406:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8115408:	687b      	ldr	r3, [r7, #4]
 811540a:	2b00      	cmp	r3, #0
 811540c:	d109      	bne.n	8115422 <tcp_close+0x22>
 811540e:	4b0f      	ldr	r3, [pc, #60]	@ (811544c <tcp_close+0x4c>)
 8115410:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8115414:	490e      	ldr	r1, [pc, #56]	@ (8115450 <tcp_close+0x50>)
 8115416:	480f      	ldr	r0, [pc, #60]	@ (8115454 <tcp_close+0x54>)
 8115418:	f006 fd18 	bl	811be4c <iprintf>
 811541c:	f06f 030f 	mvn.w	r3, #15
 8115420:	e00f      	b.n	8115442 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8115422:	687b      	ldr	r3, [r7, #4]
 8115424:	7d1b      	ldrb	r3, [r3, #20]
 8115426:	2b01      	cmp	r3, #1
 8115428:	d006      	beq.n	8115438 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 811542a:	687b      	ldr	r3, [r7, #4]
 811542c:	8b5b      	ldrh	r3, [r3, #26]
 811542e:	f043 0310 	orr.w	r3, r3, #16
 8115432:	b29a      	uxth	r2, r3
 8115434:	687b      	ldr	r3, [r7, #4]
 8115436:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8115438:	2101      	movs	r1, #1
 811543a:	6878      	ldr	r0, [r7, #4]
 811543c:	f7ff fe94 	bl	8115168 <tcp_close_shutdown>
 8115440:	4603      	mov	r3, r0
}
 8115442:	4618      	mov	r0, r3
 8115444:	3708      	adds	r7, #8
 8115446:	46bd      	mov	sp, r7
 8115448:	bd80      	pop	{r7, pc}
 811544a:	bf00      	nop
 811544c:	0811e0e0 	.word	0x0811e0e0
 8115450:	0811e230 	.word	0x0811e230
 8115454:	0811e164 	.word	0x0811e164

08115458 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8115458:	b580      	push	{r7, lr}
 811545a:	b08e      	sub	sp, #56	@ 0x38
 811545c:	af04      	add	r7, sp, #16
 811545e:	6078      	str	r0, [r7, #4]
 8115460:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8115462:	687b      	ldr	r3, [r7, #4]
 8115464:	2b00      	cmp	r3, #0
 8115466:	d107      	bne.n	8115478 <tcp_abandon+0x20>
 8115468:	4b52      	ldr	r3, [pc, #328]	@ (81155b4 <tcp_abandon+0x15c>)
 811546a:	f240 223d 	movw	r2, #573	@ 0x23d
 811546e:	4952      	ldr	r1, [pc, #328]	@ (81155b8 <tcp_abandon+0x160>)
 8115470:	4852      	ldr	r0, [pc, #328]	@ (81155bc <tcp_abandon+0x164>)
 8115472:	f006 fceb 	bl	811be4c <iprintf>
 8115476:	e099      	b.n	81155ac <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8115478:	687b      	ldr	r3, [r7, #4]
 811547a:	7d1b      	ldrb	r3, [r3, #20]
 811547c:	2b01      	cmp	r3, #1
 811547e:	d106      	bne.n	811548e <tcp_abandon+0x36>
 8115480:	4b4c      	ldr	r3, [pc, #304]	@ (81155b4 <tcp_abandon+0x15c>)
 8115482:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8115486:	494e      	ldr	r1, [pc, #312]	@ (81155c0 <tcp_abandon+0x168>)
 8115488:	484c      	ldr	r0, [pc, #304]	@ (81155bc <tcp_abandon+0x164>)
 811548a:	f006 fcdf 	bl	811be4c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 811548e:	687b      	ldr	r3, [r7, #4]
 8115490:	7d1b      	ldrb	r3, [r3, #20]
 8115492:	2b0a      	cmp	r3, #10
 8115494:	d107      	bne.n	81154a6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8115496:	6879      	ldr	r1, [r7, #4]
 8115498:	484a      	ldr	r0, [pc, #296]	@ (81155c4 <tcp_abandon+0x16c>)
 811549a:	f001 f9a3 	bl	81167e4 <tcp_pcb_remove>
    tcp_free(pcb);
 811549e:	6878      	ldr	r0, [r7, #4]
 81154a0:	f7ff fdb0 	bl	8115004 <tcp_free>
 81154a4:	e082      	b.n	81155ac <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 81154a6:	2300      	movs	r3, #0
 81154a8:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 81154aa:	2300      	movs	r3, #0
 81154ac:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 81154ae:	687b      	ldr	r3, [r7, #4]
 81154b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81154b2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 81154b4:	687b      	ldr	r3, [r7, #4]
 81154b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81154b8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 81154ba:	687b      	ldr	r3, [r7, #4]
 81154bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81154c0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 81154c2:	687b      	ldr	r3, [r7, #4]
 81154c4:	691b      	ldr	r3, [r3, #16]
 81154c6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 81154c8:	687b      	ldr	r3, [r7, #4]
 81154ca:	7d1b      	ldrb	r3, [r3, #20]
 81154cc:	2b00      	cmp	r3, #0
 81154ce:	d126      	bne.n	811551e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 81154d0:	687b      	ldr	r3, [r7, #4]
 81154d2:	8adb      	ldrh	r3, [r3, #22]
 81154d4:	2b00      	cmp	r3, #0
 81154d6:	d02e      	beq.n	8115536 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 81154d8:	4b3b      	ldr	r3, [pc, #236]	@ (81155c8 <tcp_abandon+0x170>)
 81154da:	681b      	ldr	r3, [r3, #0]
 81154dc:	687a      	ldr	r2, [r7, #4]
 81154de:	429a      	cmp	r2, r3
 81154e0:	d105      	bne.n	81154ee <tcp_abandon+0x96>
 81154e2:	4b39      	ldr	r3, [pc, #228]	@ (81155c8 <tcp_abandon+0x170>)
 81154e4:	681b      	ldr	r3, [r3, #0]
 81154e6:	68db      	ldr	r3, [r3, #12]
 81154e8:	4a37      	ldr	r2, [pc, #220]	@ (81155c8 <tcp_abandon+0x170>)
 81154ea:	6013      	str	r3, [r2, #0]
 81154ec:	e013      	b.n	8115516 <tcp_abandon+0xbe>
 81154ee:	4b36      	ldr	r3, [pc, #216]	@ (81155c8 <tcp_abandon+0x170>)
 81154f0:	681b      	ldr	r3, [r3, #0]
 81154f2:	61fb      	str	r3, [r7, #28]
 81154f4:	e00c      	b.n	8115510 <tcp_abandon+0xb8>
 81154f6:	69fb      	ldr	r3, [r7, #28]
 81154f8:	68db      	ldr	r3, [r3, #12]
 81154fa:	687a      	ldr	r2, [r7, #4]
 81154fc:	429a      	cmp	r2, r3
 81154fe:	d104      	bne.n	811550a <tcp_abandon+0xb2>
 8115500:	687b      	ldr	r3, [r7, #4]
 8115502:	68da      	ldr	r2, [r3, #12]
 8115504:	69fb      	ldr	r3, [r7, #28]
 8115506:	60da      	str	r2, [r3, #12]
 8115508:	e005      	b.n	8115516 <tcp_abandon+0xbe>
 811550a:	69fb      	ldr	r3, [r7, #28]
 811550c:	68db      	ldr	r3, [r3, #12]
 811550e:	61fb      	str	r3, [r7, #28]
 8115510:	69fb      	ldr	r3, [r7, #28]
 8115512:	2b00      	cmp	r3, #0
 8115514:	d1ef      	bne.n	81154f6 <tcp_abandon+0x9e>
 8115516:	687b      	ldr	r3, [r7, #4]
 8115518:	2200      	movs	r2, #0
 811551a:	60da      	str	r2, [r3, #12]
 811551c:	e00b      	b.n	8115536 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 811551e:	683b      	ldr	r3, [r7, #0]
 8115520:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8115522:	687b      	ldr	r3, [r7, #4]
 8115524:	8adb      	ldrh	r3, [r3, #22]
 8115526:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8115528:	6879      	ldr	r1, [r7, #4]
 811552a:	4828      	ldr	r0, [pc, #160]	@ (81155cc <tcp_abandon+0x174>)
 811552c:	f001 f95a 	bl	81167e4 <tcp_pcb_remove>
 8115530:	4b27      	ldr	r3, [pc, #156]	@ (81155d0 <tcp_abandon+0x178>)
 8115532:	2201      	movs	r2, #1
 8115534:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8115536:	687b      	ldr	r3, [r7, #4]
 8115538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811553a:	2b00      	cmp	r3, #0
 811553c:	d004      	beq.n	8115548 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 811553e:	687b      	ldr	r3, [r7, #4]
 8115540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8115542:	4618      	mov	r0, r3
 8115544:	f000 fe80 	bl	8116248 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8115548:	687b      	ldr	r3, [r7, #4]
 811554a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811554c:	2b00      	cmp	r3, #0
 811554e:	d004      	beq.n	811555a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8115550:	687b      	ldr	r3, [r7, #4]
 8115552:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8115554:	4618      	mov	r0, r3
 8115556:	f000 fe77 	bl	8116248 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 811555a:	687b      	ldr	r3, [r7, #4]
 811555c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811555e:	2b00      	cmp	r3, #0
 8115560:	d004      	beq.n	811556c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8115562:	687b      	ldr	r3, [r7, #4]
 8115564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8115566:	4618      	mov	r0, r3
 8115568:	f000 fe6e 	bl	8116248 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 811556c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811556e:	2b00      	cmp	r3, #0
 8115570:	d00e      	beq.n	8115590 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8115572:	6879      	ldr	r1, [r7, #4]
 8115574:	687b      	ldr	r3, [r7, #4]
 8115576:	3304      	adds	r3, #4
 8115578:	687a      	ldr	r2, [r7, #4]
 811557a:	8b12      	ldrh	r2, [r2, #24]
 811557c:	9202      	str	r2, [sp, #8]
 811557e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8115580:	9201      	str	r2, [sp, #4]
 8115582:	9300      	str	r3, [sp, #0]
 8115584:	460b      	mov	r3, r1
 8115586:	697a      	ldr	r2, [r7, #20]
 8115588:	69b9      	ldr	r1, [r7, #24]
 811558a:	6878      	ldr	r0, [r7, #4]
 811558c:	f005 faf6 	bl	811ab7c <tcp_rst>
    }
    last_state = pcb->state;
 8115590:	687b      	ldr	r3, [r7, #4]
 8115592:	7d1b      	ldrb	r3, [r3, #20]
 8115594:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8115596:	6878      	ldr	r0, [r7, #4]
 8115598:	f7ff fd34 	bl	8115004 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 811559c:	693b      	ldr	r3, [r7, #16]
 811559e:	2b00      	cmp	r3, #0
 81155a0:	d004      	beq.n	81155ac <tcp_abandon+0x154>
 81155a2:	693b      	ldr	r3, [r7, #16]
 81155a4:	f06f 010c 	mvn.w	r1, #12
 81155a8:	68f8      	ldr	r0, [r7, #12]
 81155aa:	4798      	blx	r3
  }
}
 81155ac:	3728      	adds	r7, #40	@ 0x28
 81155ae:	46bd      	mov	sp, r7
 81155b0:	bd80      	pop	{r7, pc}
 81155b2:	bf00      	nop
 81155b4:	0811e0e0 	.word	0x0811e0e0
 81155b8:	0811e264 	.word	0x0811e264
 81155bc:	0811e164 	.word	0x0811e164
 81155c0:	0811e280 	.word	0x0811e280
 81155c4:	10011d24 	.word	0x10011d24
 81155c8:	10011d18 	.word	0x10011d18
 81155cc:	10011d20 	.word	0x10011d20
 81155d0:	10011d28 	.word	0x10011d28

081155d4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 81155d4:	b580      	push	{r7, lr}
 81155d6:	b082      	sub	sp, #8
 81155d8:	af00      	add	r7, sp, #0
 81155da:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 81155dc:	2101      	movs	r1, #1
 81155de:	6878      	ldr	r0, [r7, #4]
 81155e0:	f7ff ff3a 	bl	8115458 <tcp_abandon>
}
 81155e4:	bf00      	nop
 81155e6:	3708      	adds	r7, #8
 81155e8:	46bd      	mov	sp, r7
 81155ea:	bd80      	pop	{r7, pc}

081155ec <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 81155ec:	b580      	push	{r7, lr}
 81155ee:	b084      	sub	sp, #16
 81155f0:	af00      	add	r7, sp, #0
 81155f2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 81155f4:	687b      	ldr	r3, [r7, #4]
 81155f6:	2b00      	cmp	r3, #0
 81155f8:	d106      	bne.n	8115608 <tcp_update_rcv_ann_wnd+0x1c>
 81155fa:	4b25      	ldr	r3, [pc, #148]	@ (8115690 <tcp_update_rcv_ann_wnd+0xa4>)
 81155fc:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8115600:	4924      	ldr	r1, [pc, #144]	@ (8115694 <tcp_update_rcv_ann_wnd+0xa8>)
 8115602:	4825      	ldr	r0, [pc, #148]	@ (8115698 <tcp_update_rcv_ann_wnd+0xac>)
 8115604:	f006 fc22 	bl	811be4c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8115608:	687b      	ldr	r3, [r7, #4]
 811560a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811560c:	687a      	ldr	r2, [r7, #4]
 811560e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8115610:	4413      	add	r3, r2
 8115612:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8115614:	687b      	ldr	r3, [r7, #4]
 8115616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8115618:	687a      	ldr	r2, [r7, #4]
 811561a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 811561c:	f640 3168 	movw	r1, #2920	@ 0xb68
 8115620:	428a      	cmp	r2, r1
 8115622:	bf28      	it	cs
 8115624:	460a      	movcs	r2, r1
 8115626:	b292      	uxth	r2, r2
 8115628:	4413      	add	r3, r2
 811562a:	68fa      	ldr	r2, [r7, #12]
 811562c:	1ad3      	subs	r3, r2, r3
 811562e:	2b00      	cmp	r3, #0
 8115630:	db08      	blt.n	8115644 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8115632:	687b      	ldr	r3, [r7, #4]
 8115634:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8115636:	687b      	ldr	r3, [r7, #4]
 8115638:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 811563a:	687b      	ldr	r3, [r7, #4]
 811563c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811563e:	68fa      	ldr	r2, [r7, #12]
 8115640:	1ad3      	subs	r3, r2, r3
 8115642:	e020      	b.n	8115686 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8115644:	687b      	ldr	r3, [r7, #4]
 8115646:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8115648:	687b      	ldr	r3, [r7, #4]
 811564a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 811564c:	1ad3      	subs	r3, r2, r3
 811564e:	2b00      	cmp	r3, #0
 8115650:	dd03      	ble.n	811565a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8115652:	687b      	ldr	r3, [r7, #4]
 8115654:	2200      	movs	r2, #0
 8115656:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8115658:	e014      	b.n	8115684 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 811565a:	687b      	ldr	r3, [r7, #4]
 811565c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 811565e:	687b      	ldr	r3, [r7, #4]
 8115660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8115662:	1ad3      	subs	r3, r2, r3
 8115664:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8115666:	68bb      	ldr	r3, [r7, #8]
 8115668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 811566c:	d306      	bcc.n	811567c <tcp_update_rcv_ann_wnd+0x90>
 811566e:	4b08      	ldr	r3, [pc, #32]	@ (8115690 <tcp_update_rcv_ann_wnd+0xa4>)
 8115670:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8115674:	4909      	ldr	r1, [pc, #36]	@ (811569c <tcp_update_rcv_ann_wnd+0xb0>)
 8115676:	4808      	ldr	r0, [pc, #32]	@ (8115698 <tcp_update_rcv_ann_wnd+0xac>)
 8115678:	f006 fbe8 	bl	811be4c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 811567c:	68bb      	ldr	r3, [r7, #8]
 811567e:	b29a      	uxth	r2, r3
 8115680:	687b      	ldr	r3, [r7, #4]
 8115682:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8115684:	2300      	movs	r3, #0
  }
}
 8115686:	4618      	mov	r0, r3
 8115688:	3710      	adds	r7, #16
 811568a:	46bd      	mov	sp, r7
 811568c:	bd80      	pop	{r7, pc}
 811568e:	bf00      	nop
 8115690:	0811e0e0 	.word	0x0811e0e0
 8115694:	0811e37c 	.word	0x0811e37c
 8115698:	0811e164 	.word	0x0811e164
 811569c:	0811e3a0 	.word	0x0811e3a0

081156a0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 81156a0:	b580      	push	{r7, lr}
 81156a2:	b084      	sub	sp, #16
 81156a4:	af00      	add	r7, sp, #0
 81156a6:	6078      	str	r0, [r7, #4]
 81156a8:	460b      	mov	r3, r1
 81156aa:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 81156ac:	687b      	ldr	r3, [r7, #4]
 81156ae:	2b00      	cmp	r3, #0
 81156b0:	d107      	bne.n	81156c2 <tcp_recved+0x22>
 81156b2:	4b20      	ldr	r3, [pc, #128]	@ (8115734 <tcp_recved+0x94>)
 81156b4:	f240 32cf 	movw	r2, #975	@ 0x3cf
 81156b8:	491f      	ldr	r1, [pc, #124]	@ (8115738 <tcp_recved+0x98>)
 81156ba:	4820      	ldr	r0, [pc, #128]	@ (811573c <tcp_recved+0x9c>)
 81156bc:	f006 fbc6 	bl	811be4c <iprintf>
 81156c0:	e034      	b.n	811572c <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 81156c2:	687b      	ldr	r3, [r7, #4]
 81156c4:	7d1b      	ldrb	r3, [r3, #20]
 81156c6:	2b01      	cmp	r3, #1
 81156c8:	d106      	bne.n	81156d8 <tcp_recved+0x38>
 81156ca:	4b1a      	ldr	r3, [pc, #104]	@ (8115734 <tcp_recved+0x94>)
 81156cc:	f240 32d2 	movw	r2, #978	@ 0x3d2
 81156d0:	491b      	ldr	r1, [pc, #108]	@ (8115740 <tcp_recved+0xa0>)
 81156d2:	481a      	ldr	r0, [pc, #104]	@ (811573c <tcp_recved+0x9c>)
 81156d4:	f006 fbba 	bl	811be4c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 81156d8:	687b      	ldr	r3, [r7, #4]
 81156da:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 81156dc:	887b      	ldrh	r3, [r7, #2]
 81156de:	4413      	add	r3, r2
 81156e0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 81156e2:	89fb      	ldrh	r3, [r7, #14]
 81156e4:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 81156e8:	4293      	cmp	r3, r2
 81156ea:	d804      	bhi.n	81156f6 <tcp_recved+0x56>
 81156ec:	687b      	ldr	r3, [r7, #4]
 81156ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81156f0:	89fa      	ldrh	r2, [r7, #14]
 81156f2:	429a      	cmp	r2, r3
 81156f4:	d204      	bcs.n	8115700 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 81156f6:	687b      	ldr	r3, [r7, #4]
 81156f8:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 81156fc:	851a      	strh	r2, [r3, #40]	@ 0x28
 81156fe:	e002      	b.n	8115706 <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8115700:	687b      	ldr	r3, [r7, #4]
 8115702:	89fa      	ldrh	r2, [r7, #14]
 8115704:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8115706:	6878      	ldr	r0, [r7, #4]
 8115708:	f7ff ff70 	bl	81155ec <tcp_update_rcv_ann_wnd>
 811570c:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 811570e:	68bb      	ldr	r3, [r7, #8]
 8115710:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8115714:	4293      	cmp	r3, r2
 8115716:	d909      	bls.n	811572c <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 8115718:	687b      	ldr	r3, [r7, #4]
 811571a:	8b5b      	ldrh	r3, [r3, #26]
 811571c:	f043 0302 	orr.w	r3, r3, #2
 8115720:	b29a      	uxth	r2, r3
 8115722:	687b      	ldr	r3, [r7, #4]
 8115724:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8115726:	6878      	ldr	r0, [r7, #4]
 8115728:	f004 fc74 	bl	811a014 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 811572c:	3710      	adds	r7, #16
 811572e:	46bd      	mov	sp, r7
 8115730:	bd80      	pop	{r7, pc}
 8115732:	bf00      	nop
 8115734:	0811e0e0 	.word	0x0811e0e0
 8115738:	0811e3bc 	.word	0x0811e3bc
 811573c:	0811e164 	.word	0x0811e164
 8115740:	0811e3d4 	.word	0x0811e3d4

08115744 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8115744:	b480      	push	{r7}
 8115746:	b083      	sub	sp, #12
 8115748:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 811574a:	2300      	movs	r3, #0
 811574c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 811574e:	4b1e      	ldr	r3, [pc, #120]	@ (81157c8 <tcp_new_port+0x84>)
 8115750:	881b      	ldrh	r3, [r3, #0]
 8115752:	3301      	adds	r3, #1
 8115754:	b29a      	uxth	r2, r3
 8115756:	4b1c      	ldr	r3, [pc, #112]	@ (81157c8 <tcp_new_port+0x84>)
 8115758:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 811575a:	4b1b      	ldr	r3, [pc, #108]	@ (81157c8 <tcp_new_port+0x84>)
 811575c:	881b      	ldrh	r3, [r3, #0]
 811575e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8115762:	4293      	cmp	r3, r2
 8115764:	d103      	bne.n	811576e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8115766:	4b18      	ldr	r3, [pc, #96]	@ (81157c8 <tcp_new_port+0x84>)
 8115768:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 811576c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 811576e:	2300      	movs	r3, #0
 8115770:	71fb      	strb	r3, [r7, #7]
 8115772:	e01e      	b.n	81157b2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8115774:	79fb      	ldrb	r3, [r7, #7]
 8115776:	4a15      	ldr	r2, [pc, #84]	@ (81157cc <tcp_new_port+0x88>)
 8115778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 811577c:	681b      	ldr	r3, [r3, #0]
 811577e:	603b      	str	r3, [r7, #0]
 8115780:	e011      	b.n	81157a6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8115782:	683b      	ldr	r3, [r7, #0]
 8115784:	8ada      	ldrh	r2, [r3, #22]
 8115786:	4b10      	ldr	r3, [pc, #64]	@ (81157c8 <tcp_new_port+0x84>)
 8115788:	881b      	ldrh	r3, [r3, #0]
 811578a:	429a      	cmp	r2, r3
 811578c:	d108      	bne.n	81157a0 <tcp_new_port+0x5c>
        n++;
 811578e:	88bb      	ldrh	r3, [r7, #4]
 8115790:	3301      	adds	r3, #1
 8115792:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8115794:	88bb      	ldrh	r3, [r7, #4]
 8115796:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 811579a:	d3d8      	bcc.n	811574e <tcp_new_port+0xa>
          return 0;
 811579c:	2300      	movs	r3, #0
 811579e:	e00d      	b.n	81157bc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 81157a0:	683b      	ldr	r3, [r7, #0]
 81157a2:	68db      	ldr	r3, [r3, #12]
 81157a4:	603b      	str	r3, [r7, #0]
 81157a6:	683b      	ldr	r3, [r7, #0]
 81157a8:	2b00      	cmp	r3, #0
 81157aa:	d1ea      	bne.n	8115782 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 81157ac:	79fb      	ldrb	r3, [r7, #7]
 81157ae:	3301      	adds	r3, #1
 81157b0:	71fb      	strb	r3, [r7, #7]
 81157b2:	79fb      	ldrb	r3, [r7, #7]
 81157b4:	2b03      	cmp	r3, #3
 81157b6:	d9dd      	bls.n	8115774 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 81157b8:	4b03      	ldr	r3, [pc, #12]	@ (81157c8 <tcp_new_port+0x84>)
 81157ba:	881b      	ldrh	r3, [r3, #0]
}
 81157bc:	4618      	mov	r0, r3
 81157be:	370c      	adds	r7, #12
 81157c0:	46bd      	mov	sp, r7
 81157c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81157c6:	4770      	bx	lr
 81157c8:	10000028 	.word	0x10000028
 81157cc:	0811fd3c 	.word	0x0811fd3c

081157d0 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 81157d0:	b580      	push	{r7, lr}
 81157d2:	b08a      	sub	sp, #40	@ 0x28
 81157d4:	af00      	add	r7, sp, #0
 81157d6:	60f8      	str	r0, [r7, #12]
 81157d8:	60b9      	str	r1, [r7, #8]
 81157da:	603b      	str	r3, [r7, #0]
 81157dc:	4613      	mov	r3, r2
 81157de:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 81157e0:	2300      	movs	r3, #0
 81157e2:	627b      	str	r3, [r7, #36]	@ 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 81157e4:	68fb      	ldr	r3, [r7, #12]
 81157e6:	2b00      	cmp	r3, #0
 81157e8:	d109      	bne.n	81157fe <tcp_connect+0x2e>
 81157ea:	4b7d      	ldr	r3, [pc, #500]	@ (81159e0 <tcp_connect+0x210>)
 81157ec:	f240 4235 	movw	r2, #1077	@ 0x435
 81157f0:	497c      	ldr	r1, [pc, #496]	@ (81159e4 <tcp_connect+0x214>)
 81157f2:	487d      	ldr	r0, [pc, #500]	@ (81159e8 <tcp_connect+0x218>)
 81157f4:	f006 fb2a 	bl	811be4c <iprintf>
 81157f8:	f06f 030f 	mvn.w	r3, #15
 81157fc:	e0ec      	b.n	81159d8 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 81157fe:	68bb      	ldr	r3, [r7, #8]
 8115800:	2b00      	cmp	r3, #0
 8115802:	d109      	bne.n	8115818 <tcp_connect+0x48>
 8115804:	4b76      	ldr	r3, [pc, #472]	@ (81159e0 <tcp_connect+0x210>)
 8115806:	f240 4236 	movw	r2, #1078	@ 0x436
 811580a:	4978      	ldr	r1, [pc, #480]	@ (81159ec <tcp_connect+0x21c>)
 811580c:	4876      	ldr	r0, [pc, #472]	@ (81159e8 <tcp_connect+0x218>)
 811580e:	f006 fb1d 	bl	811be4c <iprintf>
 8115812:	f06f 030f 	mvn.w	r3, #15
 8115816:	e0df      	b.n	81159d8 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8115818:	68fb      	ldr	r3, [r7, #12]
 811581a:	7d1b      	ldrb	r3, [r3, #20]
 811581c:	2b00      	cmp	r3, #0
 811581e:	d009      	beq.n	8115834 <tcp_connect+0x64>
 8115820:	4b6f      	ldr	r3, [pc, #444]	@ (81159e0 <tcp_connect+0x210>)
 8115822:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 8115826:	4972      	ldr	r1, [pc, #456]	@ (81159f0 <tcp_connect+0x220>)
 8115828:	486f      	ldr	r0, [pc, #444]	@ (81159e8 <tcp_connect+0x218>)
 811582a:	f006 fb0f 	bl	811be4c <iprintf>
 811582e:	f06f 0309 	mvn.w	r3, #9
 8115832:	e0d1      	b.n	81159d8 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8115834:	68bb      	ldr	r3, [r7, #8]
 8115836:	2b00      	cmp	r3, #0
 8115838:	d002      	beq.n	8115840 <tcp_connect+0x70>
 811583a:	68bb      	ldr	r3, [r7, #8]
 811583c:	681b      	ldr	r3, [r3, #0]
 811583e:	e000      	b.n	8115842 <tcp_connect+0x72>
 8115840:	2300      	movs	r3, #0
 8115842:	68fa      	ldr	r2, [r7, #12]
 8115844:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8115846:	68fb      	ldr	r3, [r7, #12]
 8115848:	88fa      	ldrh	r2, [r7, #6]
 811584a:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 811584c:	68fb      	ldr	r3, [r7, #12]
 811584e:	7a1b      	ldrb	r3, [r3, #8]
 8115850:	2b00      	cmp	r3, #0
 8115852:	d006      	beq.n	8115862 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8115854:	68fb      	ldr	r3, [r7, #12]
 8115856:	7a1b      	ldrb	r3, [r3, #8]
 8115858:	4618      	mov	r0, r3
 811585a:	f7fe fca7 	bl	81141ac <netif_get_by_index>
 811585e:	6278      	str	r0, [r7, #36]	@ 0x24
 8115860:	e005      	b.n	811586e <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8115862:	68fb      	ldr	r3, [r7, #12]
 8115864:	3304      	adds	r3, #4
 8115866:	4618      	mov	r0, r3
 8115868:	f7fc fb80 	bl	8111f6c <ip4_route>
 811586c:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 811586e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115870:	2b00      	cmp	r3, #0
 8115872:	d102      	bne.n	811587a <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8115874:	f06f 0303 	mvn.w	r3, #3
 8115878:	e0ae      	b.n	81159d8 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 811587a:	68fb      	ldr	r3, [r7, #12]
 811587c:	2b00      	cmp	r3, #0
 811587e:	d003      	beq.n	8115888 <tcp_connect+0xb8>
 8115880:	68fb      	ldr	r3, [r7, #12]
 8115882:	681b      	ldr	r3, [r3, #0]
 8115884:	2b00      	cmp	r3, #0
 8115886:	d111      	bne.n	81158ac <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8115888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811588a:	2b00      	cmp	r3, #0
 811588c:	d002      	beq.n	8115894 <tcp_connect+0xc4>
 811588e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8115890:	3304      	adds	r3, #4
 8115892:	e000      	b.n	8115896 <tcp_connect+0xc6>
 8115894:	2300      	movs	r3, #0
 8115896:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8115898:	69fb      	ldr	r3, [r7, #28]
 811589a:	2b00      	cmp	r3, #0
 811589c:	d102      	bne.n	81158a4 <tcp_connect+0xd4>
      return ERR_RTE;
 811589e:	f06f 0303 	mvn.w	r3, #3
 81158a2:	e099      	b.n	81159d8 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 81158a4:	69fb      	ldr	r3, [r7, #28]
 81158a6:	681a      	ldr	r2, [r3, #0]
 81158a8:	68fb      	ldr	r3, [r7, #12]
 81158aa:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 81158ac:	68fb      	ldr	r3, [r7, #12]
 81158ae:	8adb      	ldrh	r3, [r3, #22]
 81158b0:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 81158b2:	68fb      	ldr	r3, [r7, #12]
 81158b4:	8adb      	ldrh	r3, [r3, #22]
 81158b6:	2b00      	cmp	r3, #0
 81158b8:	d10c      	bne.n	81158d4 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 81158ba:	f7ff ff43 	bl	8115744 <tcp_new_port>
 81158be:	4603      	mov	r3, r0
 81158c0:	461a      	mov	r2, r3
 81158c2:	68fb      	ldr	r3, [r7, #12]
 81158c4:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 81158c6:	68fb      	ldr	r3, [r7, #12]
 81158c8:	8adb      	ldrh	r3, [r3, #22]
 81158ca:	2b00      	cmp	r3, #0
 81158cc:	d102      	bne.n	81158d4 <tcp_connect+0x104>
      return ERR_BUF;
 81158ce:	f06f 0301 	mvn.w	r3, #1
 81158d2:	e081      	b.n	81159d8 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 81158d4:	68f8      	ldr	r0, [r7, #12]
 81158d6:	f001 f819 	bl	811690c <tcp_next_iss>
 81158da:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 81158dc:	68fb      	ldr	r3, [r7, #12]
 81158de:	2200      	movs	r2, #0
 81158e0:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 81158e2:	68fb      	ldr	r3, [r7, #12]
 81158e4:	697a      	ldr	r2, [r7, #20]
 81158e6:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 81158e8:	697b      	ldr	r3, [r7, #20]
 81158ea:	1e5a      	subs	r2, r3, #1
 81158ec:	68fb      	ldr	r3, [r7, #12]
 81158ee:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 81158f0:	697b      	ldr	r3, [r7, #20]
 81158f2:	1e5a      	subs	r2, r3, #1
 81158f4:	68fb      	ldr	r3, [r7, #12]
 81158f6:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 81158f8:	697b      	ldr	r3, [r7, #20]
 81158fa:	1e5a      	subs	r2, r3, #1
 81158fc:	68fb      	ldr	r3, [r7, #12]
 81158fe:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8115900:	68fb      	ldr	r3, [r7, #12]
 8115902:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8115906:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8115908:	68fb      	ldr	r3, [r7, #12]
 811590a:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 811590c:	68fb      	ldr	r3, [r7, #12]
 811590e:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8115910:	68fb      	ldr	r3, [r7, #12]
 8115912:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8115914:	68fb      	ldr	r3, [r7, #12]
 8115916:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 8115918:	68fb      	ldr	r3, [r7, #12]
 811591a:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 811591e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8115922:	68fb      	ldr	r3, [r7, #12]
 8115924:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8115928:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 811592a:	68fb      	ldr	r3, [r7, #12]
 811592c:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 811592e:	68fb      	ldr	r3, [r7, #12]
 8115930:	3304      	adds	r3, #4
 8115932:	461a      	mov	r2, r3
 8115934:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8115936:	f001 f80f 	bl	8116958 <tcp_eff_send_mss_netif>
 811593a:	4603      	mov	r3, r0
 811593c:	461a      	mov	r2, r3
 811593e:	68fb      	ldr	r3, [r7, #12]
 8115940:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8115942:	68fb      	ldr	r3, [r7, #12]
 8115944:	2201      	movs	r2, #1
 8115946:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 811594a:	68fb      	ldr	r3, [r7, #12]
 811594c:	683a      	ldr	r2, [r7, #0]
 811594e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8115952:	2102      	movs	r1, #2
 8115954:	68f8      	ldr	r0, [r7, #12]
 8115956:	f004 fa6f 	bl	8119e38 <tcp_enqueue_flags>
 811595a:	4603      	mov	r3, r0
 811595c:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 811595e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8115962:	2b00      	cmp	r3, #0
 8115964:	d136      	bne.n	81159d4 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8115966:	68fb      	ldr	r3, [r7, #12]
 8115968:	2202      	movs	r2, #2
 811596a:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 811596c:	8b7b      	ldrh	r3, [r7, #26]
 811596e:	2b00      	cmp	r3, #0
 8115970:	d021      	beq.n	81159b6 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8115972:	4b20      	ldr	r3, [pc, #128]	@ (81159f4 <tcp_connect+0x224>)
 8115974:	681b      	ldr	r3, [r3, #0]
 8115976:	68fa      	ldr	r2, [r7, #12]
 8115978:	429a      	cmp	r2, r3
 811597a:	d105      	bne.n	8115988 <tcp_connect+0x1b8>
 811597c:	4b1d      	ldr	r3, [pc, #116]	@ (81159f4 <tcp_connect+0x224>)
 811597e:	681b      	ldr	r3, [r3, #0]
 8115980:	68db      	ldr	r3, [r3, #12]
 8115982:	4a1c      	ldr	r2, [pc, #112]	@ (81159f4 <tcp_connect+0x224>)
 8115984:	6013      	str	r3, [r2, #0]
 8115986:	e013      	b.n	81159b0 <tcp_connect+0x1e0>
 8115988:	4b1a      	ldr	r3, [pc, #104]	@ (81159f4 <tcp_connect+0x224>)
 811598a:	681b      	ldr	r3, [r3, #0]
 811598c:	623b      	str	r3, [r7, #32]
 811598e:	e00c      	b.n	81159aa <tcp_connect+0x1da>
 8115990:	6a3b      	ldr	r3, [r7, #32]
 8115992:	68db      	ldr	r3, [r3, #12]
 8115994:	68fa      	ldr	r2, [r7, #12]
 8115996:	429a      	cmp	r2, r3
 8115998:	d104      	bne.n	81159a4 <tcp_connect+0x1d4>
 811599a:	68fb      	ldr	r3, [r7, #12]
 811599c:	68da      	ldr	r2, [r3, #12]
 811599e:	6a3b      	ldr	r3, [r7, #32]
 81159a0:	60da      	str	r2, [r3, #12]
 81159a2:	e005      	b.n	81159b0 <tcp_connect+0x1e0>
 81159a4:	6a3b      	ldr	r3, [r7, #32]
 81159a6:	68db      	ldr	r3, [r3, #12]
 81159a8:	623b      	str	r3, [r7, #32]
 81159aa:	6a3b      	ldr	r3, [r7, #32]
 81159ac:	2b00      	cmp	r3, #0
 81159ae:	d1ef      	bne.n	8115990 <tcp_connect+0x1c0>
 81159b0:	68fb      	ldr	r3, [r7, #12]
 81159b2:	2200      	movs	r2, #0
 81159b4:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 81159b6:	4b10      	ldr	r3, [pc, #64]	@ (81159f8 <tcp_connect+0x228>)
 81159b8:	681a      	ldr	r2, [r3, #0]
 81159ba:	68fb      	ldr	r3, [r7, #12]
 81159bc:	60da      	str	r2, [r3, #12]
 81159be:	4a0e      	ldr	r2, [pc, #56]	@ (81159f8 <tcp_connect+0x228>)
 81159c0:	68fb      	ldr	r3, [r7, #12]
 81159c2:	6013      	str	r3, [r2, #0]
 81159c4:	f005 fc3e 	bl	811b244 <tcp_timer_needed>
 81159c8:	4b0c      	ldr	r3, [pc, #48]	@ (81159fc <tcp_connect+0x22c>)
 81159ca:	2201      	movs	r2, #1
 81159cc:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 81159ce:	68f8      	ldr	r0, [r7, #12]
 81159d0:	f004 fb20 	bl	811a014 <tcp_output>
  }
  return ret;
 81159d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 81159d8:	4618      	mov	r0, r3
 81159da:	3728      	adds	r7, #40	@ 0x28
 81159dc:	46bd      	mov	sp, r7
 81159de:	bd80      	pop	{r7, pc}
 81159e0:	0811e0e0 	.word	0x0811e0e0
 81159e4:	0811e3fc 	.word	0x0811e3fc
 81159e8:	0811e164 	.word	0x0811e164
 81159ec:	0811e418 	.word	0x0811e418
 81159f0:	0811e434 	.word	0x0811e434
 81159f4:	10011d18 	.word	0x10011d18
 81159f8:	10011d20 	.word	0x10011d20
 81159fc:	10011d28 	.word	0x10011d28

08115a00 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8115a00:	b5b0      	push	{r4, r5, r7, lr}
 8115a02:	b090      	sub	sp, #64	@ 0x40
 8115a04:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8115a06:	2300      	movs	r3, #0
 8115a08:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8115a0c:	4b95      	ldr	r3, [pc, #596]	@ (8115c64 <tcp_slowtmr+0x264>)
 8115a0e:	681b      	ldr	r3, [r3, #0]
 8115a10:	3301      	adds	r3, #1
 8115a12:	4a94      	ldr	r2, [pc, #592]	@ (8115c64 <tcp_slowtmr+0x264>)
 8115a14:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8115a16:	4b94      	ldr	r3, [pc, #592]	@ (8115c68 <tcp_slowtmr+0x268>)
 8115a18:	781b      	ldrb	r3, [r3, #0]
 8115a1a:	3301      	adds	r3, #1
 8115a1c:	b2da      	uxtb	r2, r3
 8115a1e:	4b92      	ldr	r3, [pc, #584]	@ (8115c68 <tcp_slowtmr+0x268>)
 8115a20:	701a      	strb	r2, [r3, #0]
 8115a22:	e000      	b.n	8115a26 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8115a24:	bf00      	nop
  prev = NULL;
 8115a26:	2300      	movs	r3, #0
 8115a28:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8115a2a:	4b90      	ldr	r3, [pc, #576]	@ (8115c6c <tcp_slowtmr+0x26c>)
 8115a2c:	681b      	ldr	r3, [r3, #0]
 8115a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8115a30:	e29f      	b.n	8115f72 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8115a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115a34:	7d1b      	ldrb	r3, [r3, #20]
 8115a36:	2b00      	cmp	r3, #0
 8115a38:	d106      	bne.n	8115a48 <tcp_slowtmr+0x48>
 8115a3a:	4b8d      	ldr	r3, [pc, #564]	@ (8115c70 <tcp_slowtmr+0x270>)
 8115a3c:	f240 42be 	movw	r2, #1214	@ 0x4be
 8115a40:	498c      	ldr	r1, [pc, #560]	@ (8115c74 <tcp_slowtmr+0x274>)
 8115a42:	488d      	ldr	r0, [pc, #564]	@ (8115c78 <tcp_slowtmr+0x278>)
 8115a44:	f006 fa02 	bl	811be4c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8115a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115a4a:	7d1b      	ldrb	r3, [r3, #20]
 8115a4c:	2b01      	cmp	r3, #1
 8115a4e:	d106      	bne.n	8115a5e <tcp_slowtmr+0x5e>
 8115a50:	4b87      	ldr	r3, [pc, #540]	@ (8115c70 <tcp_slowtmr+0x270>)
 8115a52:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8115a56:	4989      	ldr	r1, [pc, #548]	@ (8115c7c <tcp_slowtmr+0x27c>)
 8115a58:	4887      	ldr	r0, [pc, #540]	@ (8115c78 <tcp_slowtmr+0x278>)
 8115a5a:	f006 f9f7 	bl	811be4c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8115a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115a60:	7d1b      	ldrb	r3, [r3, #20]
 8115a62:	2b0a      	cmp	r3, #10
 8115a64:	d106      	bne.n	8115a74 <tcp_slowtmr+0x74>
 8115a66:	4b82      	ldr	r3, [pc, #520]	@ (8115c70 <tcp_slowtmr+0x270>)
 8115a68:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8115a6c:	4984      	ldr	r1, [pc, #528]	@ (8115c80 <tcp_slowtmr+0x280>)
 8115a6e:	4882      	ldr	r0, [pc, #520]	@ (8115c78 <tcp_slowtmr+0x278>)
 8115a70:	f006 f9ec 	bl	811be4c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8115a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115a76:	7f9a      	ldrb	r2, [r3, #30]
 8115a78:	4b7b      	ldr	r3, [pc, #492]	@ (8115c68 <tcp_slowtmr+0x268>)
 8115a7a:	781b      	ldrb	r3, [r3, #0]
 8115a7c:	429a      	cmp	r2, r3
 8115a7e:	d105      	bne.n	8115a8c <tcp_slowtmr+0x8c>
      prev = pcb;
 8115a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115a82:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8115a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115a86:	68db      	ldr	r3, [r3, #12]
 8115a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8115a8a:	e272      	b.n	8115f72 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 8115a8c:	4b76      	ldr	r3, [pc, #472]	@ (8115c68 <tcp_slowtmr+0x268>)
 8115a8e:	781a      	ldrb	r2, [r3, #0]
 8115a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115a92:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8115a94:	2300      	movs	r3, #0
 8115a96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8115a9a:	2300      	movs	r3, #0
 8115a9c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8115aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115aa2:	7d1b      	ldrb	r3, [r3, #20]
 8115aa4:	2b02      	cmp	r3, #2
 8115aa6:	d10a      	bne.n	8115abe <tcp_slowtmr+0xbe>
 8115aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115aaa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8115aae:	2b05      	cmp	r3, #5
 8115ab0:	d905      	bls.n	8115abe <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8115ab2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8115ab6:	3301      	adds	r3, #1
 8115ab8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8115abc:	e11e      	b.n	8115cfc <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8115abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115ac0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8115ac4:	2b0b      	cmp	r3, #11
 8115ac6:	d905      	bls.n	8115ad4 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8115ac8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8115acc:	3301      	adds	r3, #1
 8115ace:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8115ad2:	e113      	b.n	8115cfc <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8115ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115ad6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8115ada:	2b00      	cmp	r3, #0
 8115adc:	d075      	beq.n	8115bca <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8115ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8115ae2:	2b00      	cmp	r3, #0
 8115ae4:	d006      	beq.n	8115af4 <tcp_slowtmr+0xf4>
 8115ae6:	4b62      	ldr	r3, [pc, #392]	@ (8115c70 <tcp_slowtmr+0x270>)
 8115ae8:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8115aec:	4965      	ldr	r1, [pc, #404]	@ (8115c84 <tcp_slowtmr+0x284>)
 8115aee:	4862      	ldr	r0, [pc, #392]	@ (8115c78 <tcp_slowtmr+0x278>)
 8115af0:	f006 f9ac 	bl	811be4c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8115af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115af6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8115af8:	2b00      	cmp	r3, #0
 8115afa:	d106      	bne.n	8115b0a <tcp_slowtmr+0x10a>
 8115afc:	4b5c      	ldr	r3, [pc, #368]	@ (8115c70 <tcp_slowtmr+0x270>)
 8115afe:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8115b02:	4961      	ldr	r1, [pc, #388]	@ (8115c88 <tcp_slowtmr+0x288>)
 8115b04:	485c      	ldr	r0, [pc, #368]	@ (8115c78 <tcp_slowtmr+0x278>)
 8115b06:	f006 f9a1 	bl	811be4c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8115b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115b0c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8115b10:	2b0b      	cmp	r3, #11
 8115b12:	d905      	bls.n	8115b20 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8115b14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8115b18:	3301      	adds	r3, #1
 8115b1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8115b1e:	e0ed      	b.n	8115cfc <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8115b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115b22:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8115b26:	3b01      	subs	r3, #1
 8115b28:	4a58      	ldr	r2, [pc, #352]	@ (8115c8c <tcp_slowtmr+0x28c>)
 8115b2a:	5cd3      	ldrb	r3, [r2, r3]
 8115b2c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8115b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115b30:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8115b34:	7c7a      	ldrb	r2, [r7, #17]
 8115b36:	429a      	cmp	r2, r3
 8115b38:	d907      	bls.n	8115b4a <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8115b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115b3c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8115b40:	3301      	adds	r3, #1
 8115b42:	b2da      	uxtb	r2, r3
 8115b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115b46:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8115b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115b4c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8115b50:	7c7a      	ldrb	r2, [r7, #17]
 8115b52:	429a      	cmp	r2, r3
 8115b54:	f200 80d2 	bhi.w	8115cfc <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8115b58:	2301      	movs	r3, #1
 8115b5a:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8115b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115b5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8115b62:	2b00      	cmp	r3, #0
 8115b64:	d108      	bne.n	8115b78 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8115b66:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8115b68:	f005 f8fc 	bl	811ad64 <tcp_zero_window_probe>
 8115b6c:	4603      	mov	r3, r0
 8115b6e:	2b00      	cmp	r3, #0
 8115b70:	d014      	beq.n	8115b9c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8115b72:	2300      	movs	r3, #0
 8115b74:	623b      	str	r3, [r7, #32]
 8115b76:	e011      	b.n	8115b9c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8115b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115b7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8115b7e:	4619      	mov	r1, r3
 8115b80:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8115b82:	f003 ffc1 	bl	8119b08 <tcp_split_unsent_seg>
 8115b86:	4603      	mov	r3, r0
 8115b88:	2b00      	cmp	r3, #0
 8115b8a:	d107      	bne.n	8115b9c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8115b8c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8115b8e:	f004 fa41 	bl	811a014 <tcp_output>
 8115b92:	4603      	mov	r3, r0
 8115b94:	2b00      	cmp	r3, #0
 8115b96:	d101      	bne.n	8115b9c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8115b98:	2300      	movs	r3, #0
 8115b9a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8115b9c:	6a3b      	ldr	r3, [r7, #32]
 8115b9e:	2b00      	cmp	r3, #0
 8115ba0:	f000 80ac 	beq.w	8115cfc <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8115ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115ba6:	2200      	movs	r2, #0
 8115ba8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8115bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115bae:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8115bb2:	2b06      	cmp	r3, #6
 8115bb4:	f200 80a2 	bhi.w	8115cfc <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8115bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115bba:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8115bbe:	3301      	adds	r3, #1
 8115bc0:	b2da      	uxtb	r2, r3
 8115bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115bc4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8115bc8:	e098      	b.n	8115cfc <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8115bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115bcc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8115bd0:	2b00      	cmp	r3, #0
 8115bd2:	db0f      	blt.n	8115bf4 <tcp_slowtmr+0x1f4>
 8115bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115bd6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8115bda:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8115bde:	4293      	cmp	r3, r2
 8115be0:	d008      	beq.n	8115bf4 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8115be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115be4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8115be8:	b29b      	uxth	r3, r3
 8115bea:	3301      	adds	r3, #1
 8115bec:	b29b      	uxth	r3, r3
 8115bee:	b21a      	sxth	r2, r3
 8115bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115bf2:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8115bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115bf6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8115bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115bfc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8115c00:	429a      	cmp	r2, r3
 8115c02:	db7b      	blt.n	8115cfc <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8115c04:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8115c06:	f004 fcf9 	bl	811a5fc <tcp_rexmit_rto_prepare>
 8115c0a:	4603      	mov	r3, r0
 8115c0c:	2b00      	cmp	r3, #0
 8115c0e:	d007      	beq.n	8115c20 <tcp_slowtmr+0x220>
 8115c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8115c14:	2b00      	cmp	r3, #0
 8115c16:	d171      	bne.n	8115cfc <tcp_slowtmr+0x2fc>
 8115c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115c1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8115c1c:	2b00      	cmp	r3, #0
 8115c1e:	d06d      	beq.n	8115cfc <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8115c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115c22:	7d1b      	ldrb	r3, [r3, #20]
 8115c24:	2b02      	cmp	r3, #2
 8115c26:	d03a      	beq.n	8115c9e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8115c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115c2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8115c2e:	2b0c      	cmp	r3, #12
 8115c30:	bf28      	it	cs
 8115c32:	230c      	movcs	r3, #12
 8115c34:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8115c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115c38:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8115c3c:	10db      	asrs	r3, r3, #3
 8115c3e:	b21b      	sxth	r3, r3
 8115c40:	461a      	mov	r2, r3
 8115c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115c44:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8115c48:	4413      	add	r3, r2
 8115c4a:	7efa      	ldrb	r2, [r7, #27]
 8115c4c:	4910      	ldr	r1, [pc, #64]	@ (8115c90 <tcp_slowtmr+0x290>)
 8115c4e:	5c8a      	ldrb	r2, [r1, r2]
 8115c50:	4093      	lsls	r3, r2
 8115c52:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8115c54:	697b      	ldr	r3, [r7, #20]
 8115c56:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8115c5a:	4293      	cmp	r3, r2
 8115c5c:	dc1a      	bgt.n	8115c94 <tcp_slowtmr+0x294>
 8115c5e:	697b      	ldr	r3, [r7, #20]
 8115c60:	b21a      	sxth	r2, r3
 8115c62:	e019      	b.n	8115c98 <tcp_slowtmr+0x298>
 8115c64:	10011d14 	.word	0x10011d14
 8115c68:	10011d2a 	.word	0x10011d2a
 8115c6c:	10011d20 	.word	0x10011d20
 8115c70:	0811e0e0 	.word	0x0811e0e0
 8115c74:	0811e464 	.word	0x0811e464
 8115c78:	0811e164 	.word	0x0811e164
 8115c7c:	0811e490 	.word	0x0811e490
 8115c80:	0811e4bc 	.word	0x0811e4bc
 8115c84:	0811e4ec 	.word	0x0811e4ec
 8115c88:	0811e520 	.word	0x0811e520
 8115c8c:	0811fd34 	.word	0x0811fd34
 8115c90:	0811fd24 	.word	0x0811fd24
 8115c94:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8115c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115c9a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8115c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115ca0:	2200      	movs	r2, #0
 8115ca2:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8115ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115ca6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8115caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115cac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8115cb0:	4293      	cmp	r3, r2
 8115cb2:	bf28      	it	cs
 8115cb4:	4613      	movcs	r3, r2
 8115cb6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8115cb8:	8a7b      	ldrh	r3, [r7, #18]
 8115cba:	085b      	lsrs	r3, r3, #1
 8115cbc:	b29a      	uxth	r2, r3
 8115cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115cc0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8115cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115cc6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8115cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115ccc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8115cce:	005b      	lsls	r3, r3, #1
 8115cd0:	b29b      	uxth	r3, r3
 8115cd2:	429a      	cmp	r2, r3
 8115cd4:	d206      	bcs.n	8115ce4 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8115cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115cd8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8115cda:	005b      	lsls	r3, r3, #1
 8115cdc:	b29a      	uxth	r2, r3
 8115cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115ce0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8115ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115ce6:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8115ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115cea:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8115cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115cf0:	2200      	movs	r2, #0
 8115cf2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8115cf6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8115cf8:	f004 fcf0 	bl	811a6dc <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8115cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115cfe:	7d1b      	ldrb	r3, [r3, #20]
 8115d00:	2b06      	cmp	r3, #6
 8115d02:	d111      	bne.n	8115d28 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8115d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115d06:	8b5b      	ldrh	r3, [r3, #26]
 8115d08:	f003 0310 	and.w	r3, r3, #16
 8115d0c:	2b00      	cmp	r3, #0
 8115d0e:	d00b      	beq.n	8115d28 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8115d10:	4b9d      	ldr	r3, [pc, #628]	@ (8115f88 <tcp_slowtmr+0x588>)
 8115d12:	681a      	ldr	r2, [r3, #0]
 8115d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115d16:	6a1b      	ldr	r3, [r3, #32]
 8115d18:	1ad3      	subs	r3, r2, r3
 8115d1a:	2b28      	cmp	r3, #40	@ 0x28
 8115d1c:	d904      	bls.n	8115d28 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8115d1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8115d22:	3301      	adds	r3, #1
 8115d24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8115d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115d2a:	7a5b      	ldrb	r3, [r3, #9]
 8115d2c:	f003 0308 	and.w	r3, r3, #8
 8115d30:	2b00      	cmp	r3, #0
 8115d32:	d04c      	beq.n	8115dce <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 8115d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115d36:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8115d38:	2b04      	cmp	r3, #4
 8115d3a:	d003      	beq.n	8115d44 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8115d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115d3e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8115d40:	2b07      	cmp	r3, #7
 8115d42:	d144      	bne.n	8115dce <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8115d44:	4b90      	ldr	r3, [pc, #576]	@ (8115f88 <tcp_slowtmr+0x588>)
 8115d46:	681a      	ldr	r2, [r3, #0]
 8115d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115d4a:	6a1b      	ldr	r3, [r3, #32]
 8115d4c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8115d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8115d54:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 8115d58:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8115d5c:	498b      	ldr	r1, [pc, #556]	@ (8115f8c <tcp_slowtmr+0x58c>)
 8115d5e:	fba1 1303 	umull	r1, r3, r1, r3
 8115d62:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8115d64:	429a      	cmp	r2, r3
 8115d66:	d90a      	bls.n	8115d7e <tcp_slowtmr+0x37e>
        ++pcb_remove;
 8115d68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8115d6c:	3301      	adds	r3, #1
 8115d6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8115d72:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8115d76:	3301      	adds	r3, #1
 8115d78:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8115d7c:	e027      	b.n	8115dce <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8115d7e:	4b82      	ldr	r3, [pc, #520]	@ (8115f88 <tcp_slowtmr+0x588>)
 8115d80:	681a      	ldr	r2, [r3, #0]
 8115d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115d84:	6a1b      	ldr	r3, [r3, #32]
 8115d86:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8115d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115d8a:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8115d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115d90:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8115d94:	4618      	mov	r0, r3
 8115d96:	4b7e      	ldr	r3, [pc, #504]	@ (8115f90 <tcp_slowtmr+0x590>)
 8115d98:	fb00 f303 	mul.w	r3, r0, r3
 8115d9c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8115d9e:	497b      	ldr	r1, [pc, #492]	@ (8115f8c <tcp_slowtmr+0x58c>)
 8115da0:	fba1 1303 	umull	r1, r3, r1, r3
 8115da4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8115da6:	429a      	cmp	r2, r3
 8115da8:	d911      	bls.n	8115dce <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 8115daa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8115dac:	f004 ff9a 	bl	811ace4 <tcp_keepalive>
 8115db0:	4603      	mov	r3, r0
 8115db2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8115db6:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8115dba:	2b00      	cmp	r3, #0
 8115dbc:	d107      	bne.n	8115dce <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 8115dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115dc0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8115dc4:	3301      	adds	r3, #1
 8115dc6:	b2da      	uxtb	r2, r3
 8115dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115dca:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8115dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115dd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8115dd2:	2b00      	cmp	r3, #0
 8115dd4:	d011      	beq.n	8115dfa <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8115dd6:	4b6c      	ldr	r3, [pc, #432]	@ (8115f88 <tcp_slowtmr+0x588>)
 8115dd8:	681a      	ldr	r2, [r3, #0]
 8115dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115ddc:	6a1b      	ldr	r3, [r3, #32]
 8115dde:	1ad2      	subs	r2, r2, r3
 8115de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115de2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8115de6:	4619      	mov	r1, r3
 8115de8:	460b      	mov	r3, r1
 8115dea:	005b      	lsls	r3, r3, #1
 8115dec:	440b      	add	r3, r1
 8115dee:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8115df0:	429a      	cmp	r2, r3
 8115df2:	d302      	bcc.n	8115dfa <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 8115df4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8115df6:	f000 fe59 	bl	8116aac <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8115dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115dfc:	7d1b      	ldrb	r3, [r3, #20]
 8115dfe:	2b03      	cmp	r3, #3
 8115e00:	d10b      	bne.n	8115e1a <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8115e02:	4b61      	ldr	r3, [pc, #388]	@ (8115f88 <tcp_slowtmr+0x588>)
 8115e04:	681a      	ldr	r2, [r3, #0]
 8115e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115e08:	6a1b      	ldr	r3, [r3, #32]
 8115e0a:	1ad3      	subs	r3, r2, r3
 8115e0c:	2b28      	cmp	r3, #40	@ 0x28
 8115e0e:	d904      	bls.n	8115e1a <tcp_slowtmr+0x41a>
        ++pcb_remove;
 8115e10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8115e14:	3301      	adds	r3, #1
 8115e16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8115e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115e1c:	7d1b      	ldrb	r3, [r3, #20]
 8115e1e:	2b09      	cmp	r3, #9
 8115e20:	d10b      	bne.n	8115e3a <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8115e22:	4b59      	ldr	r3, [pc, #356]	@ (8115f88 <tcp_slowtmr+0x588>)
 8115e24:	681a      	ldr	r2, [r3, #0]
 8115e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115e28:	6a1b      	ldr	r3, [r3, #32]
 8115e2a:	1ad3      	subs	r3, r2, r3
 8115e2c:	2bf0      	cmp	r3, #240	@ 0xf0
 8115e2e:	d904      	bls.n	8115e3a <tcp_slowtmr+0x43a>
        ++pcb_remove;
 8115e30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8115e34:	3301      	adds	r3, #1
 8115e36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8115e3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8115e3e:	2b00      	cmp	r3, #0
 8115e40:	d060      	beq.n	8115f04 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 8115e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8115e48:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8115e4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8115e4c:	f000 fc7a 	bl	8116744 <tcp_pcb_purge>
      if (prev != NULL) {
 8115e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115e52:	2b00      	cmp	r3, #0
 8115e54:	d010      	beq.n	8115e78 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8115e56:	4b4f      	ldr	r3, [pc, #316]	@ (8115f94 <tcp_slowtmr+0x594>)
 8115e58:	681b      	ldr	r3, [r3, #0]
 8115e5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8115e5c:	429a      	cmp	r2, r3
 8115e5e:	d106      	bne.n	8115e6e <tcp_slowtmr+0x46e>
 8115e60:	4b4d      	ldr	r3, [pc, #308]	@ (8115f98 <tcp_slowtmr+0x598>)
 8115e62:	f240 526d 	movw	r2, #1389	@ 0x56d
 8115e66:	494d      	ldr	r1, [pc, #308]	@ (8115f9c <tcp_slowtmr+0x59c>)
 8115e68:	484d      	ldr	r0, [pc, #308]	@ (8115fa0 <tcp_slowtmr+0x5a0>)
 8115e6a:	f005 ffef 	bl	811be4c <iprintf>
        prev->next = pcb->next;
 8115e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115e70:	68da      	ldr	r2, [r3, #12]
 8115e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115e74:	60da      	str	r2, [r3, #12]
 8115e76:	e00f      	b.n	8115e98 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8115e78:	4b46      	ldr	r3, [pc, #280]	@ (8115f94 <tcp_slowtmr+0x594>)
 8115e7a:	681b      	ldr	r3, [r3, #0]
 8115e7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8115e7e:	429a      	cmp	r2, r3
 8115e80:	d006      	beq.n	8115e90 <tcp_slowtmr+0x490>
 8115e82:	4b45      	ldr	r3, [pc, #276]	@ (8115f98 <tcp_slowtmr+0x598>)
 8115e84:	f240 5271 	movw	r2, #1393	@ 0x571
 8115e88:	4946      	ldr	r1, [pc, #280]	@ (8115fa4 <tcp_slowtmr+0x5a4>)
 8115e8a:	4845      	ldr	r0, [pc, #276]	@ (8115fa0 <tcp_slowtmr+0x5a0>)
 8115e8c:	f005 ffde 	bl	811be4c <iprintf>
        tcp_active_pcbs = pcb->next;
 8115e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115e92:	68db      	ldr	r3, [r3, #12]
 8115e94:	4a3f      	ldr	r2, [pc, #252]	@ (8115f94 <tcp_slowtmr+0x594>)
 8115e96:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8115e98:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8115e9c:	2b00      	cmp	r3, #0
 8115e9e:	d013      	beq.n	8115ec8 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8115ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115ea2:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8115ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115ea6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8115ea8:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8115eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115eac:	3304      	adds	r3, #4
 8115eae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8115eb0:	8ad2      	ldrh	r2, [r2, #22]
 8115eb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8115eb4:	8b09      	ldrh	r1, [r1, #24]
 8115eb6:	9102      	str	r1, [sp, #8]
 8115eb8:	9201      	str	r2, [sp, #4]
 8115eba:	9300      	str	r3, [sp, #0]
 8115ebc:	462b      	mov	r3, r5
 8115ebe:	4622      	mov	r2, r4
 8115ec0:	4601      	mov	r1, r0
 8115ec2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8115ec4:	f004 fe5a 	bl	811ab7c <tcp_rst>
      err_arg = pcb->callback_arg;
 8115ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115eca:	691b      	ldr	r3, [r3, #16]
 8115ecc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8115ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115ed0:	7d1b      	ldrb	r3, [r3, #20]
 8115ed2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8115ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115ed6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8115ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115eda:	68db      	ldr	r3, [r3, #12]
 8115edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8115ede:	6838      	ldr	r0, [r7, #0]
 8115ee0:	f7ff f890 	bl	8115004 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8115ee4:	4b30      	ldr	r3, [pc, #192]	@ (8115fa8 <tcp_slowtmr+0x5a8>)
 8115ee6:	2200      	movs	r2, #0
 8115ee8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8115eea:	68fb      	ldr	r3, [r7, #12]
 8115eec:	2b00      	cmp	r3, #0
 8115eee:	d004      	beq.n	8115efa <tcp_slowtmr+0x4fa>
 8115ef0:	68fb      	ldr	r3, [r7, #12]
 8115ef2:	f06f 010c 	mvn.w	r1, #12
 8115ef6:	68b8      	ldr	r0, [r7, #8]
 8115ef8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8115efa:	4b2b      	ldr	r3, [pc, #172]	@ (8115fa8 <tcp_slowtmr+0x5a8>)
 8115efc:	781b      	ldrb	r3, [r3, #0]
 8115efe:	2b00      	cmp	r3, #0
 8115f00:	d037      	beq.n	8115f72 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 8115f02:	e590      	b.n	8115a26 <tcp_slowtmr+0x26>
      prev = pcb;
 8115f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115f06:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8115f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115f0a:	68db      	ldr	r3, [r3, #12]
 8115f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8115f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115f10:	7f1b      	ldrb	r3, [r3, #28]
 8115f12:	3301      	adds	r3, #1
 8115f14:	b2da      	uxtb	r2, r3
 8115f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115f18:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8115f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115f1c:	7f1a      	ldrb	r2, [r3, #28]
 8115f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115f20:	7f5b      	ldrb	r3, [r3, #29]
 8115f22:	429a      	cmp	r2, r3
 8115f24:	d325      	bcc.n	8115f72 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 8115f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115f28:	2200      	movs	r2, #0
 8115f2a:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8115f2c:	4b1e      	ldr	r3, [pc, #120]	@ (8115fa8 <tcp_slowtmr+0x5a8>)
 8115f2e:	2200      	movs	r2, #0
 8115f30:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8115f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8115f38:	2b00      	cmp	r3, #0
 8115f3a:	d00b      	beq.n	8115f54 <tcp_slowtmr+0x554>
 8115f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115f3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8115f42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8115f44:	6912      	ldr	r2, [r2, #16]
 8115f46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8115f48:	4610      	mov	r0, r2
 8115f4a:	4798      	blx	r3
 8115f4c:	4603      	mov	r3, r0
 8115f4e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8115f52:	e002      	b.n	8115f5a <tcp_slowtmr+0x55a>
 8115f54:	2300      	movs	r3, #0
 8115f56:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8115f5a:	4b13      	ldr	r3, [pc, #76]	@ (8115fa8 <tcp_slowtmr+0x5a8>)
 8115f5c:	781b      	ldrb	r3, [r3, #0]
 8115f5e:	2b00      	cmp	r3, #0
 8115f60:	f47f ad60 	bne.w	8115a24 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8115f64:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8115f68:	2b00      	cmp	r3, #0
 8115f6a:	d102      	bne.n	8115f72 <tcp_slowtmr+0x572>
          tcp_output(prev);
 8115f6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8115f6e:	f004 f851 	bl	811a014 <tcp_output>
  while (pcb != NULL) {
 8115f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115f74:	2b00      	cmp	r3, #0
 8115f76:	f47f ad5c 	bne.w	8115a32 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8115f7a:	2300      	movs	r3, #0
 8115f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8115f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8115fac <tcp_slowtmr+0x5ac>)
 8115f80:	681b      	ldr	r3, [r3, #0]
 8115f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8115f84:	e067      	b.n	8116056 <tcp_slowtmr+0x656>
 8115f86:	bf00      	nop
 8115f88:	10011d14 	.word	0x10011d14
 8115f8c:	10624dd3 	.word	0x10624dd3
 8115f90:	000124f8 	.word	0x000124f8
 8115f94:	10011d20 	.word	0x10011d20
 8115f98:	0811e0e0 	.word	0x0811e0e0
 8115f9c:	0811e558 	.word	0x0811e558
 8115fa0:	0811e164 	.word	0x0811e164
 8115fa4:	0811e584 	.word	0x0811e584
 8115fa8:	10011d28 	.word	0x10011d28
 8115fac:	10011d24 	.word	0x10011d24
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8115fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115fb2:	7d1b      	ldrb	r3, [r3, #20]
 8115fb4:	2b0a      	cmp	r3, #10
 8115fb6:	d006      	beq.n	8115fc6 <tcp_slowtmr+0x5c6>
 8115fb8:	4b2b      	ldr	r3, [pc, #172]	@ (8116068 <tcp_slowtmr+0x668>)
 8115fba:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8115fbe:	492b      	ldr	r1, [pc, #172]	@ (811606c <tcp_slowtmr+0x66c>)
 8115fc0:	482b      	ldr	r0, [pc, #172]	@ (8116070 <tcp_slowtmr+0x670>)
 8115fc2:	f005 ff43 	bl	811be4c <iprintf>
    pcb_remove = 0;
 8115fc6:	2300      	movs	r3, #0
 8115fc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8115fcc:	4b29      	ldr	r3, [pc, #164]	@ (8116074 <tcp_slowtmr+0x674>)
 8115fce:	681a      	ldr	r2, [r3, #0]
 8115fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8115fd2:	6a1b      	ldr	r3, [r3, #32]
 8115fd4:	1ad3      	subs	r3, r2, r3
 8115fd6:	2bf0      	cmp	r3, #240	@ 0xf0
 8115fd8:	d904      	bls.n	8115fe4 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8115fda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8115fde:	3301      	adds	r3, #1
 8115fe0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8115fe4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8115fe8:	2b00      	cmp	r3, #0
 8115fea:	d02f      	beq.n	811604c <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8115fec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8115fee:	f000 fba9 	bl	8116744 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8115ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8115ff4:	2b00      	cmp	r3, #0
 8115ff6:	d010      	beq.n	811601a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8115ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8116078 <tcp_slowtmr+0x678>)
 8115ffa:	681b      	ldr	r3, [r3, #0]
 8115ffc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8115ffe:	429a      	cmp	r2, r3
 8116000:	d106      	bne.n	8116010 <tcp_slowtmr+0x610>
 8116002:	4b19      	ldr	r3, [pc, #100]	@ (8116068 <tcp_slowtmr+0x668>)
 8116004:	f240 52af 	movw	r2, #1455	@ 0x5af
 8116008:	491c      	ldr	r1, [pc, #112]	@ (811607c <tcp_slowtmr+0x67c>)
 811600a:	4819      	ldr	r0, [pc, #100]	@ (8116070 <tcp_slowtmr+0x670>)
 811600c:	f005 ff1e 	bl	811be4c <iprintf>
        prev->next = pcb->next;
 8116010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8116012:	68da      	ldr	r2, [r3, #12]
 8116014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8116016:	60da      	str	r2, [r3, #12]
 8116018:	e00f      	b.n	811603a <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 811601a:	4b17      	ldr	r3, [pc, #92]	@ (8116078 <tcp_slowtmr+0x678>)
 811601c:	681b      	ldr	r3, [r3, #0]
 811601e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8116020:	429a      	cmp	r2, r3
 8116022:	d006      	beq.n	8116032 <tcp_slowtmr+0x632>
 8116024:	4b10      	ldr	r3, [pc, #64]	@ (8116068 <tcp_slowtmr+0x668>)
 8116026:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 811602a:	4915      	ldr	r1, [pc, #84]	@ (8116080 <tcp_slowtmr+0x680>)
 811602c:	4810      	ldr	r0, [pc, #64]	@ (8116070 <tcp_slowtmr+0x670>)
 811602e:	f005 ff0d 	bl	811be4c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8116032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8116034:	68db      	ldr	r3, [r3, #12]
 8116036:	4a10      	ldr	r2, [pc, #64]	@ (8116078 <tcp_slowtmr+0x678>)
 8116038:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 811603a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811603c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 811603e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8116040:	68db      	ldr	r3, [r3, #12]
 8116042:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8116044:	69f8      	ldr	r0, [r7, #28]
 8116046:	f7fe ffdd 	bl	8115004 <tcp_free>
 811604a:	e004      	b.n	8116056 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 811604c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811604e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8116050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8116052:	68db      	ldr	r3, [r3, #12]
 8116054:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8116056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8116058:	2b00      	cmp	r3, #0
 811605a:	d1a9      	bne.n	8115fb0 <tcp_slowtmr+0x5b0>
    }
  }
}
 811605c:	bf00      	nop
 811605e:	bf00      	nop
 8116060:	3730      	adds	r7, #48	@ 0x30
 8116062:	46bd      	mov	sp, r7
 8116064:	bdb0      	pop	{r4, r5, r7, pc}
 8116066:	bf00      	nop
 8116068:	0811e0e0 	.word	0x0811e0e0
 811606c:	0811e5b0 	.word	0x0811e5b0
 8116070:	0811e164 	.word	0x0811e164
 8116074:	10011d14 	.word	0x10011d14
 8116078:	10011d24 	.word	0x10011d24
 811607c:	0811e5e0 	.word	0x0811e5e0
 8116080:	0811e608 	.word	0x0811e608

08116084 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8116084:	b580      	push	{r7, lr}
 8116086:	b082      	sub	sp, #8
 8116088:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 811608a:	4b2d      	ldr	r3, [pc, #180]	@ (8116140 <tcp_fasttmr+0xbc>)
 811608c:	781b      	ldrb	r3, [r3, #0]
 811608e:	3301      	adds	r3, #1
 8116090:	b2da      	uxtb	r2, r3
 8116092:	4b2b      	ldr	r3, [pc, #172]	@ (8116140 <tcp_fasttmr+0xbc>)
 8116094:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8116096:	4b2b      	ldr	r3, [pc, #172]	@ (8116144 <tcp_fasttmr+0xc0>)
 8116098:	681b      	ldr	r3, [r3, #0]
 811609a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 811609c:	e048      	b.n	8116130 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 811609e:	687b      	ldr	r3, [r7, #4]
 81160a0:	7f9a      	ldrb	r2, [r3, #30]
 81160a2:	4b27      	ldr	r3, [pc, #156]	@ (8116140 <tcp_fasttmr+0xbc>)
 81160a4:	781b      	ldrb	r3, [r3, #0]
 81160a6:	429a      	cmp	r2, r3
 81160a8:	d03f      	beq.n	811612a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 81160aa:	4b25      	ldr	r3, [pc, #148]	@ (8116140 <tcp_fasttmr+0xbc>)
 81160ac:	781a      	ldrb	r2, [r3, #0]
 81160ae:	687b      	ldr	r3, [r7, #4]
 81160b0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 81160b2:	687b      	ldr	r3, [r7, #4]
 81160b4:	8b5b      	ldrh	r3, [r3, #26]
 81160b6:	f003 0301 	and.w	r3, r3, #1
 81160ba:	2b00      	cmp	r3, #0
 81160bc:	d010      	beq.n	81160e0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 81160be:	687b      	ldr	r3, [r7, #4]
 81160c0:	8b5b      	ldrh	r3, [r3, #26]
 81160c2:	f043 0302 	orr.w	r3, r3, #2
 81160c6:	b29a      	uxth	r2, r3
 81160c8:	687b      	ldr	r3, [r7, #4]
 81160ca:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 81160cc:	6878      	ldr	r0, [r7, #4]
 81160ce:	f003 ffa1 	bl	811a014 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 81160d2:	687b      	ldr	r3, [r7, #4]
 81160d4:	8b5b      	ldrh	r3, [r3, #26]
 81160d6:	f023 0303 	bic.w	r3, r3, #3
 81160da:	b29a      	uxth	r2, r3
 81160dc:	687b      	ldr	r3, [r7, #4]
 81160de:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 81160e0:	687b      	ldr	r3, [r7, #4]
 81160e2:	8b5b      	ldrh	r3, [r3, #26]
 81160e4:	f003 0308 	and.w	r3, r3, #8
 81160e8:	2b00      	cmp	r3, #0
 81160ea:	d009      	beq.n	8116100 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 81160ec:	687b      	ldr	r3, [r7, #4]
 81160ee:	8b5b      	ldrh	r3, [r3, #26]
 81160f0:	f023 0308 	bic.w	r3, r3, #8
 81160f4:	b29a      	uxth	r2, r3
 81160f6:	687b      	ldr	r3, [r7, #4]
 81160f8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 81160fa:	6878      	ldr	r0, [r7, #4]
 81160fc:	f7ff f916 	bl	811532c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8116100:	687b      	ldr	r3, [r7, #4]
 8116102:	68db      	ldr	r3, [r3, #12]
 8116104:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8116106:	687b      	ldr	r3, [r7, #4]
 8116108:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811610a:	2b00      	cmp	r3, #0
 811610c:	d00a      	beq.n	8116124 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 811610e:	4b0e      	ldr	r3, [pc, #56]	@ (8116148 <tcp_fasttmr+0xc4>)
 8116110:	2200      	movs	r2, #0
 8116112:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8116114:	6878      	ldr	r0, [r7, #4]
 8116116:	f000 f819 	bl	811614c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 811611a:	4b0b      	ldr	r3, [pc, #44]	@ (8116148 <tcp_fasttmr+0xc4>)
 811611c:	781b      	ldrb	r3, [r3, #0]
 811611e:	2b00      	cmp	r3, #0
 8116120:	d000      	beq.n	8116124 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8116122:	e7b8      	b.n	8116096 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8116124:	683b      	ldr	r3, [r7, #0]
 8116126:	607b      	str	r3, [r7, #4]
 8116128:	e002      	b.n	8116130 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 811612a:	687b      	ldr	r3, [r7, #4]
 811612c:	68db      	ldr	r3, [r3, #12]
 811612e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8116130:	687b      	ldr	r3, [r7, #4]
 8116132:	2b00      	cmp	r3, #0
 8116134:	d1b3      	bne.n	811609e <tcp_fasttmr+0x1a>
    }
  }
}
 8116136:	bf00      	nop
 8116138:	bf00      	nop
 811613a:	3708      	adds	r7, #8
 811613c:	46bd      	mov	sp, r7
 811613e:	bd80      	pop	{r7, pc}
 8116140:	10011d2a 	.word	0x10011d2a
 8116144:	10011d20 	.word	0x10011d20
 8116148:	10011d28 	.word	0x10011d28

0811614c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 811614c:	b590      	push	{r4, r7, lr}
 811614e:	b085      	sub	sp, #20
 8116150:	af00      	add	r7, sp, #0
 8116152:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8116154:	687b      	ldr	r3, [r7, #4]
 8116156:	2b00      	cmp	r3, #0
 8116158:	d109      	bne.n	811616e <tcp_process_refused_data+0x22>
 811615a:	4b38      	ldr	r3, [pc, #224]	@ (811623c <tcp_process_refused_data+0xf0>)
 811615c:	f240 6209 	movw	r2, #1545	@ 0x609
 8116160:	4937      	ldr	r1, [pc, #220]	@ (8116240 <tcp_process_refused_data+0xf4>)
 8116162:	4838      	ldr	r0, [pc, #224]	@ (8116244 <tcp_process_refused_data+0xf8>)
 8116164:	f005 fe72 	bl	811be4c <iprintf>
 8116168:	f06f 030f 	mvn.w	r3, #15
 811616c:	e061      	b.n	8116232 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 811616e:	687b      	ldr	r3, [r7, #4]
 8116170:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8116172:	7b5b      	ldrb	r3, [r3, #13]
 8116174:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8116176:	687b      	ldr	r3, [r7, #4]
 8116178:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811617a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 811617c:	687b      	ldr	r3, [r7, #4]
 811617e:	2200      	movs	r2, #0
 8116180:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8116182:	687b      	ldr	r3, [r7, #4]
 8116184:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8116188:	2b00      	cmp	r3, #0
 811618a:	d00b      	beq.n	81161a4 <tcp_process_refused_data+0x58>
 811618c:	687b      	ldr	r3, [r7, #4]
 811618e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8116192:	687b      	ldr	r3, [r7, #4]
 8116194:	6918      	ldr	r0, [r3, #16]
 8116196:	2300      	movs	r3, #0
 8116198:	68ba      	ldr	r2, [r7, #8]
 811619a:	6879      	ldr	r1, [r7, #4]
 811619c:	47a0      	blx	r4
 811619e:	4603      	mov	r3, r0
 81161a0:	73fb      	strb	r3, [r7, #15]
 81161a2:	e007      	b.n	81161b4 <tcp_process_refused_data+0x68>
 81161a4:	2300      	movs	r3, #0
 81161a6:	68ba      	ldr	r2, [r7, #8]
 81161a8:	6879      	ldr	r1, [r7, #4]
 81161aa:	2000      	movs	r0, #0
 81161ac:	f000 f8a6 	bl	81162fc <tcp_recv_null>
 81161b0:	4603      	mov	r3, r0
 81161b2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 81161b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81161b8:	2b00      	cmp	r3, #0
 81161ba:	d12b      	bne.n	8116214 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 81161bc:	7bbb      	ldrb	r3, [r7, #14]
 81161be:	f003 0320 	and.w	r3, r3, #32
 81161c2:	2b00      	cmp	r3, #0
 81161c4:	d034      	beq.n	8116230 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 81161c6:	687b      	ldr	r3, [r7, #4]
 81161c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81161ca:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 81161ce:	4293      	cmp	r3, r2
 81161d0:	d005      	beq.n	81161de <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 81161d2:	687b      	ldr	r3, [r7, #4]
 81161d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81161d6:	3301      	adds	r3, #1
 81161d8:	b29a      	uxth	r2, r3
 81161da:	687b      	ldr	r3, [r7, #4]
 81161dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 81161de:	687b      	ldr	r3, [r7, #4]
 81161e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81161e4:	2b00      	cmp	r3, #0
 81161e6:	d00b      	beq.n	8116200 <tcp_process_refused_data+0xb4>
 81161e8:	687b      	ldr	r3, [r7, #4]
 81161ea:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 81161ee:	687b      	ldr	r3, [r7, #4]
 81161f0:	6918      	ldr	r0, [r3, #16]
 81161f2:	2300      	movs	r3, #0
 81161f4:	2200      	movs	r2, #0
 81161f6:	6879      	ldr	r1, [r7, #4]
 81161f8:	47a0      	blx	r4
 81161fa:	4603      	mov	r3, r0
 81161fc:	73fb      	strb	r3, [r7, #15]
 81161fe:	e001      	b.n	8116204 <tcp_process_refused_data+0xb8>
 8116200:	2300      	movs	r3, #0
 8116202:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8116204:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8116208:	f113 0f0d 	cmn.w	r3, #13
 811620c:	d110      	bne.n	8116230 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 811620e:	f06f 030c 	mvn.w	r3, #12
 8116212:	e00e      	b.n	8116232 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8116214:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8116218:	f113 0f0d 	cmn.w	r3, #13
 811621c:	d102      	bne.n	8116224 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 811621e:	f06f 030c 	mvn.w	r3, #12
 8116222:	e006      	b.n	8116232 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8116224:	687b      	ldr	r3, [r7, #4]
 8116226:	68ba      	ldr	r2, [r7, #8]
 8116228:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 811622a:	f06f 0304 	mvn.w	r3, #4
 811622e:	e000      	b.n	8116232 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8116230:	2300      	movs	r3, #0
}
 8116232:	4618      	mov	r0, r3
 8116234:	3714      	adds	r7, #20
 8116236:	46bd      	mov	sp, r7
 8116238:	bd90      	pop	{r4, r7, pc}
 811623a:	bf00      	nop
 811623c:	0811e0e0 	.word	0x0811e0e0
 8116240:	0811e630 	.word	0x0811e630
 8116244:	0811e164 	.word	0x0811e164

08116248 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8116248:	b580      	push	{r7, lr}
 811624a:	b084      	sub	sp, #16
 811624c:	af00      	add	r7, sp, #0
 811624e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8116250:	e007      	b.n	8116262 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8116252:	687b      	ldr	r3, [r7, #4]
 8116254:	681b      	ldr	r3, [r3, #0]
 8116256:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8116258:	6878      	ldr	r0, [r7, #4]
 811625a:	f000 f80a 	bl	8116272 <tcp_seg_free>
    seg = next;
 811625e:	68fb      	ldr	r3, [r7, #12]
 8116260:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8116262:	687b      	ldr	r3, [r7, #4]
 8116264:	2b00      	cmp	r3, #0
 8116266:	d1f4      	bne.n	8116252 <tcp_segs_free+0xa>
  }
}
 8116268:	bf00      	nop
 811626a:	bf00      	nop
 811626c:	3710      	adds	r7, #16
 811626e:	46bd      	mov	sp, r7
 8116270:	bd80      	pop	{r7, pc}

08116272 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8116272:	b580      	push	{r7, lr}
 8116274:	b082      	sub	sp, #8
 8116276:	af00      	add	r7, sp, #0
 8116278:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 811627a:	687b      	ldr	r3, [r7, #4]
 811627c:	2b00      	cmp	r3, #0
 811627e:	d00c      	beq.n	811629a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8116280:	687b      	ldr	r3, [r7, #4]
 8116282:	685b      	ldr	r3, [r3, #4]
 8116284:	2b00      	cmp	r3, #0
 8116286:	d004      	beq.n	8116292 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8116288:	687b      	ldr	r3, [r7, #4]
 811628a:	685b      	ldr	r3, [r3, #4]
 811628c:	4618      	mov	r0, r3
 811628e:	f7fe fb1b 	bl	81148c8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8116292:	6879      	ldr	r1, [r7, #4]
 8116294:	2003      	movs	r0, #3
 8116296:	f7fd fc73 	bl	8113b80 <memp_free>
  }
}
 811629a:	bf00      	nop
 811629c:	3708      	adds	r7, #8
 811629e:	46bd      	mov	sp, r7
 81162a0:	bd80      	pop	{r7, pc}
	...

081162a4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 81162a4:	b580      	push	{r7, lr}
 81162a6:	b084      	sub	sp, #16
 81162a8:	af00      	add	r7, sp, #0
 81162aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 81162ac:	687b      	ldr	r3, [r7, #4]
 81162ae:	2b00      	cmp	r3, #0
 81162b0:	d106      	bne.n	81162c0 <tcp_seg_copy+0x1c>
 81162b2:	4b0f      	ldr	r3, [pc, #60]	@ (81162f0 <tcp_seg_copy+0x4c>)
 81162b4:	f240 6282 	movw	r2, #1666	@ 0x682
 81162b8:	490e      	ldr	r1, [pc, #56]	@ (81162f4 <tcp_seg_copy+0x50>)
 81162ba:	480f      	ldr	r0, [pc, #60]	@ (81162f8 <tcp_seg_copy+0x54>)
 81162bc:	f005 fdc6 	bl	811be4c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 81162c0:	2003      	movs	r0, #3
 81162c2:	f7fd fbe7 	bl	8113a94 <memp_malloc>
 81162c6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 81162c8:	68fb      	ldr	r3, [r7, #12]
 81162ca:	2b00      	cmp	r3, #0
 81162cc:	d101      	bne.n	81162d2 <tcp_seg_copy+0x2e>
    return NULL;
 81162ce:	2300      	movs	r3, #0
 81162d0:	e00a      	b.n	81162e8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 81162d2:	2210      	movs	r2, #16
 81162d4:	6879      	ldr	r1, [r7, #4]
 81162d6:	68f8      	ldr	r0, [r7, #12]
 81162d8:	f005 ff69 	bl	811c1ae <memcpy>
  pbuf_ref(cseg->p);
 81162dc:	68fb      	ldr	r3, [r7, #12]
 81162de:	685b      	ldr	r3, [r3, #4]
 81162e0:	4618      	mov	r0, r3
 81162e2:	f7fe fb97 	bl	8114a14 <pbuf_ref>
  return cseg;
 81162e6:	68fb      	ldr	r3, [r7, #12]
}
 81162e8:	4618      	mov	r0, r3
 81162ea:	3710      	adds	r7, #16
 81162ec:	46bd      	mov	sp, r7
 81162ee:	bd80      	pop	{r7, pc}
 81162f0:	0811e0e0 	.word	0x0811e0e0
 81162f4:	0811e674 	.word	0x0811e674
 81162f8:	0811e164 	.word	0x0811e164

081162fc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 81162fc:	b580      	push	{r7, lr}
 81162fe:	b084      	sub	sp, #16
 8116300:	af00      	add	r7, sp, #0
 8116302:	60f8      	str	r0, [r7, #12]
 8116304:	60b9      	str	r1, [r7, #8]
 8116306:	607a      	str	r2, [r7, #4]
 8116308:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 811630a:	68bb      	ldr	r3, [r7, #8]
 811630c:	2b00      	cmp	r3, #0
 811630e:	d109      	bne.n	8116324 <tcp_recv_null+0x28>
 8116310:	4b12      	ldr	r3, [pc, #72]	@ (811635c <tcp_recv_null+0x60>)
 8116312:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8116316:	4912      	ldr	r1, [pc, #72]	@ (8116360 <tcp_recv_null+0x64>)
 8116318:	4812      	ldr	r0, [pc, #72]	@ (8116364 <tcp_recv_null+0x68>)
 811631a:	f005 fd97 	bl	811be4c <iprintf>
 811631e:	f06f 030f 	mvn.w	r3, #15
 8116322:	e016      	b.n	8116352 <tcp_recv_null+0x56>

  if (p != NULL) {
 8116324:	687b      	ldr	r3, [r7, #4]
 8116326:	2b00      	cmp	r3, #0
 8116328:	d009      	beq.n	811633e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 811632a:	687b      	ldr	r3, [r7, #4]
 811632c:	891b      	ldrh	r3, [r3, #8]
 811632e:	4619      	mov	r1, r3
 8116330:	68b8      	ldr	r0, [r7, #8]
 8116332:	f7ff f9b5 	bl	81156a0 <tcp_recved>
    pbuf_free(p);
 8116336:	6878      	ldr	r0, [r7, #4]
 8116338:	f7fe fac6 	bl	81148c8 <pbuf_free>
 811633c:	e008      	b.n	8116350 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 811633e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8116342:	2b00      	cmp	r3, #0
 8116344:	d104      	bne.n	8116350 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8116346:	68b8      	ldr	r0, [r7, #8]
 8116348:	f7ff f85a 	bl	8115400 <tcp_close>
 811634c:	4603      	mov	r3, r0
 811634e:	e000      	b.n	8116352 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8116350:	2300      	movs	r3, #0
}
 8116352:	4618      	mov	r0, r3
 8116354:	3710      	adds	r7, #16
 8116356:	46bd      	mov	sp, r7
 8116358:	bd80      	pop	{r7, pc}
 811635a:	bf00      	nop
 811635c:	0811e0e0 	.word	0x0811e0e0
 8116360:	0811e690 	.word	0x0811e690
 8116364:	0811e164 	.word	0x0811e164

08116368 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8116368:	b580      	push	{r7, lr}
 811636a:	b086      	sub	sp, #24
 811636c:	af00      	add	r7, sp, #0
 811636e:	4603      	mov	r3, r0
 8116370:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8116372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8116376:	2b00      	cmp	r3, #0
 8116378:	db01      	blt.n	811637e <tcp_kill_prio+0x16>
 811637a:	79fb      	ldrb	r3, [r7, #7]
 811637c:	e000      	b.n	8116380 <tcp_kill_prio+0x18>
 811637e:	237f      	movs	r3, #127	@ 0x7f
 8116380:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8116382:	7afb      	ldrb	r3, [r7, #11]
 8116384:	2b00      	cmp	r3, #0
 8116386:	d034      	beq.n	81163f2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8116388:	7afb      	ldrb	r3, [r7, #11]
 811638a:	3b01      	subs	r3, #1
 811638c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 811638e:	2300      	movs	r3, #0
 8116390:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8116392:	2300      	movs	r3, #0
 8116394:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8116396:	4b19      	ldr	r3, [pc, #100]	@ (81163fc <tcp_kill_prio+0x94>)
 8116398:	681b      	ldr	r3, [r3, #0]
 811639a:	617b      	str	r3, [r7, #20]
 811639c:	e01f      	b.n	81163de <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 811639e:	697b      	ldr	r3, [r7, #20]
 81163a0:	7d5b      	ldrb	r3, [r3, #21]
 81163a2:	7afa      	ldrb	r2, [r7, #11]
 81163a4:	429a      	cmp	r2, r3
 81163a6:	d80c      	bhi.n	81163c2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 81163a8:	697b      	ldr	r3, [r7, #20]
 81163aa:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 81163ac:	7afa      	ldrb	r2, [r7, #11]
 81163ae:	429a      	cmp	r2, r3
 81163b0:	d112      	bne.n	81163d8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 81163b2:	4b13      	ldr	r3, [pc, #76]	@ (8116400 <tcp_kill_prio+0x98>)
 81163b4:	681a      	ldr	r2, [r3, #0]
 81163b6:	697b      	ldr	r3, [r7, #20]
 81163b8:	6a1b      	ldr	r3, [r3, #32]
 81163ba:	1ad3      	subs	r3, r2, r3
 81163bc:	68fa      	ldr	r2, [r7, #12]
 81163be:	429a      	cmp	r2, r3
 81163c0:	d80a      	bhi.n	81163d8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 81163c2:	4b0f      	ldr	r3, [pc, #60]	@ (8116400 <tcp_kill_prio+0x98>)
 81163c4:	681a      	ldr	r2, [r3, #0]
 81163c6:	697b      	ldr	r3, [r7, #20]
 81163c8:	6a1b      	ldr	r3, [r3, #32]
 81163ca:	1ad3      	subs	r3, r2, r3
 81163cc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 81163ce:	697b      	ldr	r3, [r7, #20]
 81163d0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 81163d2:	697b      	ldr	r3, [r7, #20]
 81163d4:	7d5b      	ldrb	r3, [r3, #21]
 81163d6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 81163d8:	697b      	ldr	r3, [r7, #20]
 81163da:	68db      	ldr	r3, [r3, #12]
 81163dc:	617b      	str	r3, [r7, #20]
 81163de:	697b      	ldr	r3, [r7, #20]
 81163e0:	2b00      	cmp	r3, #0
 81163e2:	d1dc      	bne.n	811639e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 81163e4:	693b      	ldr	r3, [r7, #16]
 81163e6:	2b00      	cmp	r3, #0
 81163e8:	d004      	beq.n	81163f4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 81163ea:	6938      	ldr	r0, [r7, #16]
 81163ec:	f7ff f8f2 	bl	81155d4 <tcp_abort>
 81163f0:	e000      	b.n	81163f4 <tcp_kill_prio+0x8c>
    return;
 81163f2:	bf00      	nop
  }
}
 81163f4:	3718      	adds	r7, #24
 81163f6:	46bd      	mov	sp, r7
 81163f8:	bd80      	pop	{r7, pc}
 81163fa:	bf00      	nop
 81163fc:	10011d20 	.word	0x10011d20
 8116400:	10011d14 	.word	0x10011d14

08116404 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8116404:	b580      	push	{r7, lr}
 8116406:	b086      	sub	sp, #24
 8116408:	af00      	add	r7, sp, #0
 811640a:	4603      	mov	r3, r0
 811640c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 811640e:	79fb      	ldrb	r3, [r7, #7]
 8116410:	2b08      	cmp	r3, #8
 8116412:	d009      	beq.n	8116428 <tcp_kill_state+0x24>
 8116414:	79fb      	ldrb	r3, [r7, #7]
 8116416:	2b09      	cmp	r3, #9
 8116418:	d006      	beq.n	8116428 <tcp_kill_state+0x24>
 811641a:	4b1a      	ldr	r3, [pc, #104]	@ (8116484 <tcp_kill_state+0x80>)
 811641c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8116420:	4919      	ldr	r1, [pc, #100]	@ (8116488 <tcp_kill_state+0x84>)
 8116422:	481a      	ldr	r0, [pc, #104]	@ (811648c <tcp_kill_state+0x88>)
 8116424:	f005 fd12 	bl	811be4c <iprintf>

  inactivity = 0;
 8116428:	2300      	movs	r3, #0
 811642a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 811642c:	2300      	movs	r3, #0
 811642e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8116430:	4b17      	ldr	r3, [pc, #92]	@ (8116490 <tcp_kill_state+0x8c>)
 8116432:	681b      	ldr	r3, [r3, #0]
 8116434:	617b      	str	r3, [r7, #20]
 8116436:	e017      	b.n	8116468 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8116438:	697b      	ldr	r3, [r7, #20]
 811643a:	7d1b      	ldrb	r3, [r3, #20]
 811643c:	79fa      	ldrb	r2, [r7, #7]
 811643e:	429a      	cmp	r2, r3
 8116440:	d10f      	bne.n	8116462 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8116442:	4b14      	ldr	r3, [pc, #80]	@ (8116494 <tcp_kill_state+0x90>)
 8116444:	681a      	ldr	r2, [r3, #0]
 8116446:	697b      	ldr	r3, [r7, #20]
 8116448:	6a1b      	ldr	r3, [r3, #32]
 811644a:	1ad3      	subs	r3, r2, r3
 811644c:	68fa      	ldr	r2, [r7, #12]
 811644e:	429a      	cmp	r2, r3
 8116450:	d807      	bhi.n	8116462 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8116452:	4b10      	ldr	r3, [pc, #64]	@ (8116494 <tcp_kill_state+0x90>)
 8116454:	681a      	ldr	r2, [r3, #0]
 8116456:	697b      	ldr	r3, [r7, #20]
 8116458:	6a1b      	ldr	r3, [r3, #32]
 811645a:	1ad3      	subs	r3, r2, r3
 811645c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 811645e:	697b      	ldr	r3, [r7, #20]
 8116460:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8116462:	697b      	ldr	r3, [r7, #20]
 8116464:	68db      	ldr	r3, [r3, #12]
 8116466:	617b      	str	r3, [r7, #20]
 8116468:	697b      	ldr	r3, [r7, #20]
 811646a:	2b00      	cmp	r3, #0
 811646c:	d1e4      	bne.n	8116438 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 811646e:	693b      	ldr	r3, [r7, #16]
 8116470:	2b00      	cmp	r3, #0
 8116472:	d003      	beq.n	811647c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8116474:	2100      	movs	r1, #0
 8116476:	6938      	ldr	r0, [r7, #16]
 8116478:	f7fe ffee 	bl	8115458 <tcp_abandon>
  }
}
 811647c:	bf00      	nop
 811647e:	3718      	adds	r7, #24
 8116480:	46bd      	mov	sp, r7
 8116482:	bd80      	pop	{r7, pc}
 8116484:	0811e0e0 	.word	0x0811e0e0
 8116488:	0811e6ac 	.word	0x0811e6ac
 811648c:	0811e164 	.word	0x0811e164
 8116490:	10011d20 	.word	0x10011d20
 8116494:	10011d14 	.word	0x10011d14

08116498 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8116498:	b580      	push	{r7, lr}
 811649a:	b084      	sub	sp, #16
 811649c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 811649e:	2300      	movs	r3, #0
 81164a0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 81164a2:	2300      	movs	r3, #0
 81164a4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 81164a6:	4b12      	ldr	r3, [pc, #72]	@ (81164f0 <tcp_kill_timewait+0x58>)
 81164a8:	681b      	ldr	r3, [r3, #0]
 81164aa:	60fb      	str	r3, [r7, #12]
 81164ac:	e012      	b.n	81164d4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 81164ae:	4b11      	ldr	r3, [pc, #68]	@ (81164f4 <tcp_kill_timewait+0x5c>)
 81164b0:	681a      	ldr	r2, [r3, #0]
 81164b2:	68fb      	ldr	r3, [r7, #12]
 81164b4:	6a1b      	ldr	r3, [r3, #32]
 81164b6:	1ad3      	subs	r3, r2, r3
 81164b8:	687a      	ldr	r2, [r7, #4]
 81164ba:	429a      	cmp	r2, r3
 81164bc:	d807      	bhi.n	81164ce <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 81164be:	4b0d      	ldr	r3, [pc, #52]	@ (81164f4 <tcp_kill_timewait+0x5c>)
 81164c0:	681a      	ldr	r2, [r3, #0]
 81164c2:	68fb      	ldr	r3, [r7, #12]
 81164c4:	6a1b      	ldr	r3, [r3, #32]
 81164c6:	1ad3      	subs	r3, r2, r3
 81164c8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 81164ca:	68fb      	ldr	r3, [r7, #12]
 81164cc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 81164ce:	68fb      	ldr	r3, [r7, #12]
 81164d0:	68db      	ldr	r3, [r3, #12]
 81164d2:	60fb      	str	r3, [r7, #12]
 81164d4:	68fb      	ldr	r3, [r7, #12]
 81164d6:	2b00      	cmp	r3, #0
 81164d8:	d1e9      	bne.n	81164ae <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 81164da:	68bb      	ldr	r3, [r7, #8]
 81164dc:	2b00      	cmp	r3, #0
 81164de:	d002      	beq.n	81164e6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 81164e0:	68b8      	ldr	r0, [r7, #8]
 81164e2:	f7ff f877 	bl	81155d4 <tcp_abort>
  }
}
 81164e6:	bf00      	nop
 81164e8:	3710      	adds	r7, #16
 81164ea:	46bd      	mov	sp, r7
 81164ec:	bd80      	pop	{r7, pc}
 81164ee:	bf00      	nop
 81164f0:	10011d24 	.word	0x10011d24
 81164f4:	10011d14 	.word	0x10011d14

081164f8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 81164f8:	b580      	push	{r7, lr}
 81164fa:	b082      	sub	sp, #8
 81164fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 81164fe:	4b10      	ldr	r3, [pc, #64]	@ (8116540 <tcp_handle_closepend+0x48>)
 8116500:	681b      	ldr	r3, [r3, #0]
 8116502:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8116504:	e014      	b.n	8116530 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8116506:	687b      	ldr	r3, [r7, #4]
 8116508:	68db      	ldr	r3, [r3, #12]
 811650a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 811650c:	687b      	ldr	r3, [r7, #4]
 811650e:	8b5b      	ldrh	r3, [r3, #26]
 8116510:	f003 0308 	and.w	r3, r3, #8
 8116514:	2b00      	cmp	r3, #0
 8116516:	d009      	beq.n	811652c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8116518:	687b      	ldr	r3, [r7, #4]
 811651a:	8b5b      	ldrh	r3, [r3, #26]
 811651c:	f023 0308 	bic.w	r3, r3, #8
 8116520:	b29a      	uxth	r2, r3
 8116522:	687b      	ldr	r3, [r7, #4]
 8116524:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8116526:	6878      	ldr	r0, [r7, #4]
 8116528:	f7fe ff00 	bl	811532c <tcp_close_shutdown_fin>
    }
    pcb = next;
 811652c:	683b      	ldr	r3, [r7, #0]
 811652e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8116530:	687b      	ldr	r3, [r7, #4]
 8116532:	2b00      	cmp	r3, #0
 8116534:	d1e7      	bne.n	8116506 <tcp_handle_closepend+0xe>
  }
}
 8116536:	bf00      	nop
 8116538:	bf00      	nop
 811653a:	3708      	adds	r7, #8
 811653c:	46bd      	mov	sp, r7
 811653e:	bd80      	pop	{r7, pc}
 8116540:	10011d20 	.word	0x10011d20

08116544 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8116544:	b580      	push	{r7, lr}
 8116546:	b084      	sub	sp, #16
 8116548:	af00      	add	r7, sp, #0
 811654a:	4603      	mov	r3, r0
 811654c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 811654e:	2001      	movs	r0, #1
 8116550:	f7fd faa0 	bl	8113a94 <memp_malloc>
 8116554:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8116556:	68fb      	ldr	r3, [r7, #12]
 8116558:	2b00      	cmp	r3, #0
 811655a:	d126      	bne.n	81165aa <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 811655c:	f7ff ffcc 	bl	81164f8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8116560:	f7ff ff9a 	bl	8116498 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8116564:	2001      	movs	r0, #1
 8116566:	f7fd fa95 	bl	8113a94 <memp_malloc>
 811656a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 811656c:	68fb      	ldr	r3, [r7, #12]
 811656e:	2b00      	cmp	r3, #0
 8116570:	d11b      	bne.n	81165aa <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8116572:	2009      	movs	r0, #9
 8116574:	f7ff ff46 	bl	8116404 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8116578:	2001      	movs	r0, #1
 811657a:	f7fd fa8b 	bl	8113a94 <memp_malloc>
 811657e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8116580:	68fb      	ldr	r3, [r7, #12]
 8116582:	2b00      	cmp	r3, #0
 8116584:	d111      	bne.n	81165aa <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8116586:	2008      	movs	r0, #8
 8116588:	f7ff ff3c 	bl	8116404 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 811658c:	2001      	movs	r0, #1
 811658e:	f7fd fa81 	bl	8113a94 <memp_malloc>
 8116592:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8116594:	68fb      	ldr	r3, [r7, #12]
 8116596:	2b00      	cmp	r3, #0
 8116598:	d107      	bne.n	81165aa <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 811659a:	79fb      	ldrb	r3, [r7, #7]
 811659c:	4618      	mov	r0, r3
 811659e:	f7ff fee3 	bl	8116368 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 81165a2:	2001      	movs	r0, #1
 81165a4:	f7fd fa76 	bl	8113a94 <memp_malloc>
 81165a8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 81165aa:	68fb      	ldr	r3, [r7, #12]
 81165ac:	2b00      	cmp	r3, #0
 81165ae:	d03f      	beq.n	8116630 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 81165b0:	229c      	movs	r2, #156	@ 0x9c
 81165b2:	2100      	movs	r1, #0
 81165b4:	68f8      	ldr	r0, [r7, #12]
 81165b6:	f005 fcc8 	bl	811bf4a <memset>
    pcb->prio = prio;
 81165ba:	68fb      	ldr	r3, [r7, #12]
 81165bc:	79fa      	ldrb	r2, [r7, #7]
 81165be:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 81165c0:	68fb      	ldr	r3, [r7, #12]
 81165c2:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 81165c6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 81165ca:	68fb      	ldr	r3, [r7, #12]
 81165cc:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 81165d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 81165d2:	68fb      	ldr	r3, [r7, #12]
 81165d4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 81165d6:	68fb      	ldr	r3, [r7, #12]
 81165d8:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 81165da:	68fb      	ldr	r3, [r7, #12]
 81165dc:	22ff      	movs	r2, #255	@ 0xff
 81165de:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 81165e0:	68fb      	ldr	r3, [r7, #12]
 81165e2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 81165e6:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 81165e8:	68fb      	ldr	r3, [r7, #12]
 81165ea:	2206      	movs	r2, #6
 81165ec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 81165f0:	68fb      	ldr	r3, [r7, #12]
 81165f2:	2206      	movs	r2, #6
 81165f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 81165f6:	68fb      	ldr	r3, [r7, #12]
 81165f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 81165fc:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 81165fe:	68fb      	ldr	r3, [r7, #12]
 8116600:	2201      	movs	r2, #1
 8116602:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8116606:	4b0d      	ldr	r3, [pc, #52]	@ (811663c <tcp_alloc+0xf8>)
 8116608:	681a      	ldr	r2, [r3, #0]
 811660a:	68fb      	ldr	r3, [r7, #12]
 811660c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 811660e:	4b0c      	ldr	r3, [pc, #48]	@ (8116640 <tcp_alloc+0xfc>)
 8116610:	781a      	ldrb	r2, [r3, #0]
 8116612:	68fb      	ldr	r3, [r7, #12]
 8116614:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8116616:	68fb      	ldr	r3, [r7, #12]
 8116618:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 811661c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8116620:	68fb      	ldr	r3, [r7, #12]
 8116622:	4a08      	ldr	r2, [pc, #32]	@ (8116644 <tcp_alloc+0x100>)
 8116624:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8116628:	68fb      	ldr	r3, [r7, #12]
 811662a:	4a07      	ldr	r2, [pc, #28]	@ (8116648 <tcp_alloc+0x104>)
 811662c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8116630:	68fb      	ldr	r3, [r7, #12]
}
 8116632:	4618      	mov	r0, r3
 8116634:	3710      	adds	r7, #16
 8116636:	46bd      	mov	sp, r7
 8116638:	bd80      	pop	{r7, pc}
 811663a:	bf00      	nop
 811663c:	10011d14 	.word	0x10011d14
 8116640:	10011d2a 	.word	0x10011d2a
 8116644:	081162fd 	.word	0x081162fd
 8116648:	006ddd00 	.word	0x006ddd00

0811664c <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 811664c:	b580      	push	{r7, lr}
 811664e:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8116650:	2040      	movs	r0, #64	@ 0x40
 8116652:	f7ff ff77 	bl	8116544 <tcp_alloc>
 8116656:	4603      	mov	r3, r0
}
 8116658:	4618      	mov	r0, r3
 811665a:	bd80      	pop	{r7, pc}

0811665c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 811665c:	b580      	push	{r7, lr}
 811665e:	b082      	sub	sp, #8
 8116660:	af00      	add	r7, sp, #0
 8116662:	6078      	str	r0, [r7, #4]
 8116664:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8116666:	687b      	ldr	r3, [r7, #4]
 8116668:	2b00      	cmp	r3, #0
 811666a:	d00e      	beq.n	811668a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 811666c:	687b      	ldr	r3, [r7, #4]
 811666e:	7d1b      	ldrb	r3, [r3, #20]
 8116670:	2b01      	cmp	r3, #1
 8116672:	d106      	bne.n	8116682 <tcp_recv+0x26>
 8116674:	4b07      	ldr	r3, [pc, #28]	@ (8116694 <tcp_recv+0x38>)
 8116676:	f240 72df 	movw	r2, #2015	@ 0x7df
 811667a:	4907      	ldr	r1, [pc, #28]	@ (8116698 <tcp_recv+0x3c>)
 811667c:	4807      	ldr	r0, [pc, #28]	@ (811669c <tcp_recv+0x40>)
 811667e:	f005 fbe5 	bl	811be4c <iprintf>
    pcb->recv = recv;
 8116682:	687b      	ldr	r3, [r7, #4]
 8116684:	683a      	ldr	r2, [r7, #0]
 8116686:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 811668a:	bf00      	nop
 811668c:	3708      	adds	r7, #8
 811668e:	46bd      	mov	sp, r7
 8116690:	bd80      	pop	{r7, pc}
 8116692:	bf00      	nop
 8116694:	0811e0e0 	.word	0x0811e0e0
 8116698:	0811e6bc 	.word	0x0811e6bc
 811669c:	0811e164 	.word	0x0811e164

081166a0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 81166a0:	b580      	push	{r7, lr}
 81166a2:	b082      	sub	sp, #8
 81166a4:	af00      	add	r7, sp, #0
 81166a6:	6078      	str	r0, [r7, #4]
 81166a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 81166aa:	687b      	ldr	r3, [r7, #4]
 81166ac:	2b00      	cmp	r3, #0
 81166ae:	d00e      	beq.n	81166ce <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 81166b0:	687b      	ldr	r3, [r7, #4]
 81166b2:	7d1b      	ldrb	r3, [r3, #20]
 81166b4:	2b01      	cmp	r3, #1
 81166b6:	d106      	bne.n	81166c6 <tcp_sent+0x26>
 81166b8:	4b07      	ldr	r3, [pc, #28]	@ (81166d8 <tcp_sent+0x38>)
 81166ba:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 81166be:	4907      	ldr	r1, [pc, #28]	@ (81166dc <tcp_sent+0x3c>)
 81166c0:	4807      	ldr	r0, [pc, #28]	@ (81166e0 <tcp_sent+0x40>)
 81166c2:	f005 fbc3 	bl	811be4c <iprintf>
    pcb->sent = sent;
 81166c6:	687b      	ldr	r3, [r7, #4]
 81166c8:	683a      	ldr	r2, [r7, #0]
 81166ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 81166ce:	bf00      	nop
 81166d0:	3708      	adds	r7, #8
 81166d2:	46bd      	mov	sp, r7
 81166d4:	bd80      	pop	{r7, pc}
 81166d6:	bf00      	nop
 81166d8:	0811e0e0 	.word	0x0811e0e0
 81166dc:	0811e6e4 	.word	0x0811e6e4
 81166e0:	0811e164 	.word	0x0811e164

081166e4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 81166e4:	b580      	push	{r7, lr}
 81166e6:	b084      	sub	sp, #16
 81166e8:	af00      	add	r7, sp, #0
 81166ea:	60f8      	str	r0, [r7, #12]
 81166ec:	60b9      	str	r1, [r7, #8]
 81166ee:	4613      	mov	r3, r2
 81166f0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 81166f2:	68fb      	ldr	r3, [r7, #12]
 81166f4:	2b00      	cmp	r3, #0
 81166f6:	d107      	bne.n	8116708 <tcp_poll+0x24>
 81166f8:	4b0e      	ldr	r3, [pc, #56]	@ (8116734 <tcp_poll+0x50>)
 81166fa:	f640 023d 	movw	r2, #2109	@ 0x83d
 81166fe:	490e      	ldr	r1, [pc, #56]	@ (8116738 <tcp_poll+0x54>)
 8116700:	480e      	ldr	r0, [pc, #56]	@ (811673c <tcp_poll+0x58>)
 8116702:	f005 fba3 	bl	811be4c <iprintf>
 8116706:	e011      	b.n	811672c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8116708:	68fb      	ldr	r3, [r7, #12]
 811670a:	7d1b      	ldrb	r3, [r3, #20]
 811670c:	2b01      	cmp	r3, #1
 811670e:	d106      	bne.n	811671e <tcp_poll+0x3a>
 8116710:	4b08      	ldr	r3, [pc, #32]	@ (8116734 <tcp_poll+0x50>)
 8116712:	f640 023e 	movw	r2, #2110	@ 0x83e
 8116716:	490a      	ldr	r1, [pc, #40]	@ (8116740 <tcp_poll+0x5c>)
 8116718:	4808      	ldr	r0, [pc, #32]	@ (811673c <tcp_poll+0x58>)
 811671a:	f005 fb97 	bl	811be4c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 811671e:	68fb      	ldr	r3, [r7, #12]
 8116720:	68ba      	ldr	r2, [r7, #8]
 8116722:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8116726:	68fb      	ldr	r3, [r7, #12]
 8116728:	79fa      	ldrb	r2, [r7, #7]
 811672a:	775a      	strb	r2, [r3, #29]
}
 811672c:	3710      	adds	r7, #16
 811672e:	46bd      	mov	sp, r7
 8116730:	bd80      	pop	{r7, pc}
 8116732:	bf00      	nop
 8116734:	0811e0e0 	.word	0x0811e0e0
 8116738:	0811e734 	.word	0x0811e734
 811673c:	0811e164 	.word	0x0811e164
 8116740:	0811e74c 	.word	0x0811e74c

08116744 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8116744:	b580      	push	{r7, lr}
 8116746:	b082      	sub	sp, #8
 8116748:	af00      	add	r7, sp, #0
 811674a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 811674c:	687b      	ldr	r3, [r7, #4]
 811674e:	2b00      	cmp	r3, #0
 8116750:	d107      	bne.n	8116762 <tcp_pcb_purge+0x1e>
 8116752:	4b21      	ldr	r3, [pc, #132]	@ (81167d8 <tcp_pcb_purge+0x94>)
 8116754:	f640 0251 	movw	r2, #2129	@ 0x851
 8116758:	4920      	ldr	r1, [pc, #128]	@ (81167dc <tcp_pcb_purge+0x98>)
 811675a:	4821      	ldr	r0, [pc, #132]	@ (81167e0 <tcp_pcb_purge+0x9c>)
 811675c:	f005 fb76 	bl	811be4c <iprintf>
 8116760:	e037      	b.n	81167d2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8116762:	687b      	ldr	r3, [r7, #4]
 8116764:	7d1b      	ldrb	r3, [r3, #20]
 8116766:	2b00      	cmp	r3, #0
 8116768:	d033      	beq.n	81167d2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 811676a:	687b      	ldr	r3, [r7, #4]
 811676c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 811676e:	2b0a      	cmp	r3, #10
 8116770:	d02f      	beq.n	81167d2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8116772:	687b      	ldr	r3, [r7, #4]
 8116774:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8116776:	2b01      	cmp	r3, #1
 8116778:	d02b      	beq.n	81167d2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 811677a:	687b      	ldr	r3, [r7, #4]
 811677c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811677e:	2b00      	cmp	r3, #0
 8116780:	d007      	beq.n	8116792 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8116782:	687b      	ldr	r3, [r7, #4]
 8116784:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8116786:	4618      	mov	r0, r3
 8116788:	f7fe f89e 	bl	81148c8 <pbuf_free>
      pcb->refused_data = NULL;
 811678c:	687b      	ldr	r3, [r7, #4]
 811678e:	2200      	movs	r2, #0
 8116790:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8116792:	687b      	ldr	r3, [r7, #4]
 8116794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8116796:	2b00      	cmp	r3, #0
 8116798:	d002      	beq.n	81167a0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 811679a:	6878      	ldr	r0, [r7, #4]
 811679c:	f000 f986 	bl	8116aac <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 81167a0:	687b      	ldr	r3, [r7, #4]
 81167a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 81167a6:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 81167a8:	687b      	ldr	r3, [r7, #4]
 81167aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81167ac:	4618      	mov	r0, r3
 81167ae:	f7ff fd4b 	bl	8116248 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 81167b2:	687b      	ldr	r3, [r7, #4]
 81167b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81167b6:	4618      	mov	r0, r3
 81167b8:	f7ff fd46 	bl	8116248 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 81167bc:	687b      	ldr	r3, [r7, #4]
 81167be:	2200      	movs	r2, #0
 81167c0:	66da      	str	r2, [r3, #108]	@ 0x6c
 81167c2:	687b      	ldr	r3, [r7, #4]
 81167c4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 81167c6:	687b      	ldr	r3, [r7, #4]
 81167c8:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 81167ca:	687b      	ldr	r3, [r7, #4]
 81167cc:	2200      	movs	r2, #0
 81167ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 81167d2:	3708      	adds	r7, #8
 81167d4:	46bd      	mov	sp, r7
 81167d6:	bd80      	pop	{r7, pc}
 81167d8:	0811e0e0 	.word	0x0811e0e0
 81167dc:	0811e76c 	.word	0x0811e76c
 81167e0:	0811e164 	.word	0x0811e164

081167e4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 81167e4:	b580      	push	{r7, lr}
 81167e6:	b084      	sub	sp, #16
 81167e8:	af00      	add	r7, sp, #0
 81167ea:	6078      	str	r0, [r7, #4]
 81167ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 81167ee:	683b      	ldr	r3, [r7, #0]
 81167f0:	2b00      	cmp	r3, #0
 81167f2:	d106      	bne.n	8116802 <tcp_pcb_remove+0x1e>
 81167f4:	4b3e      	ldr	r3, [pc, #248]	@ (81168f0 <tcp_pcb_remove+0x10c>)
 81167f6:	f640 0283 	movw	r2, #2179	@ 0x883
 81167fa:	493e      	ldr	r1, [pc, #248]	@ (81168f4 <tcp_pcb_remove+0x110>)
 81167fc:	483e      	ldr	r0, [pc, #248]	@ (81168f8 <tcp_pcb_remove+0x114>)
 81167fe:	f005 fb25 	bl	811be4c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8116802:	687b      	ldr	r3, [r7, #4]
 8116804:	2b00      	cmp	r3, #0
 8116806:	d106      	bne.n	8116816 <tcp_pcb_remove+0x32>
 8116808:	4b39      	ldr	r3, [pc, #228]	@ (81168f0 <tcp_pcb_remove+0x10c>)
 811680a:	f640 0284 	movw	r2, #2180	@ 0x884
 811680e:	493b      	ldr	r1, [pc, #236]	@ (81168fc <tcp_pcb_remove+0x118>)
 8116810:	4839      	ldr	r0, [pc, #228]	@ (81168f8 <tcp_pcb_remove+0x114>)
 8116812:	f005 fb1b 	bl	811be4c <iprintf>

  TCP_RMV(pcblist, pcb);
 8116816:	687b      	ldr	r3, [r7, #4]
 8116818:	681b      	ldr	r3, [r3, #0]
 811681a:	683a      	ldr	r2, [r7, #0]
 811681c:	429a      	cmp	r2, r3
 811681e:	d105      	bne.n	811682c <tcp_pcb_remove+0x48>
 8116820:	687b      	ldr	r3, [r7, #4]
 8116822:	681b      	ldr	r3, [r3, #0]
 8116824:	68da      	ldr	r2, [r3, #12]
 8116826:	687b      	ldr	r3, [r7, #4]
 8116828:	601a      	str	r2, [r3, #0]
 811682a:	e013      	b.n	8116854 <tcp_pcb_remove+0x70>
 811682c:	687b      	ldr	r3, [r7, #4]
 811682e:	681b      	ldr	r3, [r3, #0]
 8116830:	60fb      	str	r3, [r7, #12]
 8116832:	e00c      	b.n	811684e <tcp_pcb_remove+0x6a>
 8116834:	68fb      	ldr	r3, [r7, #12]
 8116836:	68db      	ldr	r3, [r3, #12]
 8116838:	683a      	ldr	r2, [r7, #0]
 811683a:	429a      	cmp	r2, r3
 811683c:	d104      	bne.n	8116848 <tcp_pcb_remove+0x64>
 811683e:	683b      	ldr	r3, [r7, #0]
 8116840:	68da      	ldr	r2, [r3, #12]
 8116842:	68fb      	ldr	r3, [r7, #12]
 8116844:	60da      	str	r2, [r3, #12]
 8116846:	e005      	b.n	8116854 <tcp_pcb_remove+0x70>
 8116848:	68fb      	ldr	r3, [r7, #12]
 811684a:	68db      	ldr	r3, [r3, #12]
 811684c:	60fb      	str	r3, [r7, #12]
 811684e:	68fb      	ldr	r3, [r7, #12]
 8116850:	2b00      	cmp	r3, #0
 8116852:	d1ef      	bne.n	8116834 <tcp_pcb_remove+0x50>
 8116854:	683b      	ldr	r3, [r7, #0]
 8116856:	2200      	movs	r2, #0
 8116858:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 811685a:	6838      	ldr	r0, [r7, #0]
 811685c:	f7ff ff72 	bl	8116744 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8116860:	683b      	ldr	r3, [r7, #0]
 8116862:	7d1b      	ldrb	r3, [r3, #20]
 8116864:	2b0a      	cmp	r3, #10
 8116866:	d013      	beq.n	8116890 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8116868:	683b      	ldr	r3, [r7, #0]
 811686a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 811686c:	2b01      	cmp	r3, #1
 811686e:	d00f      	beq.n	8116890 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8116870:	683b      	ldr	r3, [r7, #0]
 8116872:	8b5b      	ldrh	r3, [r3, #26]
 8116874:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8116878:	2b00      	cmp	r3, #0
 811687a:	d009      	beq.n	8116890 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 811687c:	683b      	ldr	r3, [r7, #0]
 811687e:	8b5b      	ldrh	r3, [r3, #26]
 8116880:	f043 0302 	orr.w	r3, r3, #2
 8116884:	b29a      	uxth	r2, r3
 8116886:	683b      	ldr	r3, [r7, #0]
 8116888:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 811688a:	6838      	ldr	r0, [r7, #0]
 811688c:	f003 fbc2 	bl	811a014 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8116890:	683b      	ldr	r3, [r7, #0]
 8116892:	7d1b      	ldrb	r3, [r3, #20]
 8116894:	2b01      	cmp	r3, #1
 8116896:	d020      	beq.n	81168da <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8116898:	683b      	ldr	r3, [r7, #0]
 811689a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811689c:	2b00      	cmp	r3, #0
 811689e:	d006      	beq.n	81168ae <tcp_pcb_remove+0xca>
 81168a0:	4b13      	ldr	r3, [pc, #76]	@ (81168f0 <tcp_pcb_remove+0x10c>)
 81168a2:	f640 0293 	movw	r2, #2195	@ 0x893
 81168a6:	4916      	ldr	r1, [pc, #88]	@ (8116900 <tcp_pcb_remove+0x11c>)
 81168a8:	4813      	ldr	r0, [pc, #76]	@ (81168f8 <tcp_pcb_remove+0x114>)
 81168aa:	f005 facf 	bl	811be4c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 81168ae:	683b      	ldr	r3, [r7, #0]
 81168b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81168b2:	2b00      	cmp	r3, #0
 81168b4:	d006      	beq.n	81168c4 <tcp_pcb_remove+0xe0>
 81168b6:	4b0e      	ldr	r3, [pc, #56]	@ (81168f0 <tcp_pcb_remove+0x10c>)
 81168b8:	f640 0294 	movw	r2, #2196	@ 0x894
 81168bc:	4911      	ldr	r1, [pc, #68]	@ (8116904 <tcp_pcb_remove+0x120>)
 81168be:	480e      	ldr	r0, [pc, #56]	@ (81168f8 <tcp_pcb_remove+0x114>)
 81168c0:	f005 fac4 	bl	811be4c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 81168c4:	683b      	ldr	r3, [r7, #0]
 81168c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81168c8:	2b00      	cmp	r3, #0
 81168ca:	d006      	beq.n	81168da <tcp_pcb_remove+0xf6>
 81168cc:	4b08      	ldr	r3, [pc, #32]	@ (81168f0 <tcp_pcb_remove+0x10c>)
 81168ce:	f640 0296 	movw	r2, #2198	@ 0x896
 81168d2:	490d      	ldr	r1, [pc, #52]	@ (8116908 <tcp_pcb_remove+0x124>)
 81168d4:	4808      	ldr	r0, [pc, #32]	@ (81168f8 <tcp_pcb_remove+0x114>)
 81168d6:	f005 fab9 	bl	811be4c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 81168da:	683b      	ldr	r3, [r7, #0]
 81168dc:	2200      	movs	r2, #0
 81168de:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 81168e0:	683b      	ldr	r3, [r7, #0]
 81168e2:	2200      	movs	r2, #0
 81168e4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 81168e6:	bf00      	nop
 81168e8:	3710      	adds	r7, #16
 81168ea:	46bd      	mov	sp, r7
 81168ec:	bd80      	pop	{r7, pc}
 81168ee:	bf00      	nop
 81168f0:	0811e0e0 	.word	0x0811e0e0
 81168f4:	0811e788 	.word	0x0811e788
 81168f8:	0811e164 	.word	0x0811e164
 81168fc:	0811e7a4 	.word	0x0811e7a4
 8116900:	0811e7c4 	.word	0x0811e7c4
 8116904:	0811e7dc 	.word	0x0811e7dc
 8116908:	0811e7f8 	.word	0x0811e7f8

0811690c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 811690c:	b580      	push	{r7, lr}
 811690e:	b082      	sub	sp, #8
 8116910:	af00      	add	r7, sp, #0
 8116912:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8116914:	687b      	ldr	r3, [r7, #4]
 8116916:	2b00      	cmp	r3, #0
 8116918:	d106      	bne.n	8116928 <tcp_next_iss+0x1c>
 811691a:	4b0a      	ldr	r3, [pc, #40]	@ (8116944 <tcp_next_iss+0x38>)
 811691c:	f640 02af 	movw	r2, #2223	@ 0x8af
 8116920:	4909      	ldr	r1, [pc, #36]	@ (8116948 <tcp_next_iss+0x3c>)
 8116922:	480a      	ldr	r0, [pc, #40]	@ (811694c <tcp_next_iss+0x40>)
 8116924:	f005 fa92 	bl	811be4c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8116928:	4b09      	ldr	r3, [pc, #36]	@ (8116950 <tcp_next_iss+0x44>)
 811692a:	681a      	ldr	r2, [r3, #0]
 811692c:	4b09      	ldr	r3, [pc, #36]	@ (8116954 <tcp_next_iss+0x48>)
 811692e:	681b      	ldr	r3, [r3, #0]
 8116930:	4413      	add	r3, r2
 8116932:	4a07      	ldr	r2, [pc, #28]	@ (8116950 <tcp_next_iss+0x44>)
 8116934:	6013      	str	r3, [r2, #0]
  return iss;
 8116936:	4b06      	ldr	r3, [pc, #24]	@ (8116950 <tcp_next_iss+0x44>)
 8116938:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 811693a:	4618      	mov	r0, r3
 811693c:	3708      	adds	r7, #8
 811693e:	46bd      	mov	sp, r7
 8116940:	bd80      	pop	{r7, pc}
 8116942:	bf00      	nop
 8116944:	0811e0e0 	.word	0x0811e0e0
 8116948:	0811e810 	.word	0x0811e810
 811694c:	0811e164 	.word	0x0811e164
 8116950:	1000002c 	.word	0x1000002c
 8116954:	10011d14 	.word	0x10011d14

08116958 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8116958:	b580      	push	{r7, lr}
 811695a:	b086      	sub	sp, #24
 811695c:	af00      	add	r7, sp, #0
 811695e:	4603      	mov	r3, r0
 8116960:	60b9      	str	r1, [r7, #8]
 8116962:	607a      	str	r2, [r7, #4]
 8116964:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8116966:	687b      	ldr	r3, [r7, #4]
 8116968:	2b00      	cmp	r3, #0
 811696a:	d106      	bne.n	811697a <tcp_eff_send_mss_netif+0x22>
 811696c:	4b14      	ldr	r3, [pc, #80]	@ (81169c0 <tcp_eff_send_mss_netif+0x68>)
 811696e:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8116972:	4914      	ldr	r1, [pc, #80]	@ (81169c4 <tcp_eff_send_mss_netif+0x6c>)
 8116974:	4814      	ldr	r0, [pc, #80]	@ (81169c8 <tcp_eff_send_mss_netif+0x70>)
 8116976:	f005 fa69 	bl	811be4c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 811697a:	68bb      	ldr	r3, [r7, #8]
 811697c:	2b00      	cmp	r3, #0
 811697e:	d101      	bne.n	8116984 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8116980:	89fb      	ldrh	r3, [r7, #14]
 8116982:	e019      	b.n	81169b8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8116984:	68bb      	ldr	r3, [r7, #8]
 8116986:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8116988:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 811698a:	8afb      	ldrh	r3, [r7, #22]
 811698c:	2b00      	cmp	r3, #0
 811698e:	d012      	beq.n	81169b6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8116990:	2328      	movs	r3, #40	@ 0x28
 8116992:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8116994:	8afa      	ldrh	r2, [r7, #22]
 8116996:	8abb      	ldrh	r3, [r7, #20]
 8116998:	429a      	cmp	r2, r3
 811699a:	d904      	bls.n	81169a6 <tcp_eff_send_mss_netif+0x4e>
 811699c:	8afa      	ldrh	r2, [r7, #22]
 811699e:	8abb      	ldrh	r3, [r7, #20]
 81169a0:	1ad3      	subs	r3, r2, r3
 81169a2:	b29b      	uxth	r3, r3
 81169a4:	e000      	b.n	81169a8 <tcp_eff_send_mss_netif+0x50>
 81169a6:	2300      	movs	r3, #0
 81169a8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 81169aa:	8a7a      	ldrh	r2, [r7, #18]
 81169ac:	89fb      	ldrh	r3, [r7, #14]
 81169ae:	4293      	cmp	r3, r2
 81169b0:	bf28      	it	cs
 81169b2:	4613      	movcs	r3, r2
 81169b4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 81169b6:	89fb      	ldrh	r3, [r7, #14]
}
 81169b8:	4618      	mov	r0, r3
 81169ba:	3718      	adds	r7, #24
 81169bc:	46bd      	mov	sp, r7
 81169be:	bd80      	pop	{r7, pc}
 81169c0:	0811e0e0 	.word	0x0811e0e0
 81169c4:	0811e82c 	.word	0x0811e82c
 81169c8:	0811e164 	.word	0x0811e164

081169cc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 81169cc:	b580      	push	{r7, lr}
 81169ce:	b084      	sub	sp, #16
 81169d0:	af00      	add	r7, sp, #0
 81169d2:	6078      	str	r0, [r7, #4]
 81169d4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 81169d6:	683b      	ldr	r3, [r7, #0]
 81169d8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 81169da:	687b      	ldr	r3, [r7, #4]
 81169dc:	2b00      	cmp	r3, #0
 81169de:	d119      	bne.n	8116a14 <tcp_netif_ip_addr_changed_pcblist+0x48>
 81169e0:	4b10      	ldr	r3, [pc, #64]	@ (8116a24 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 81169e2:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 81169e6:	4910      	ldr	r1, [pc, #64]	@ (8116a28 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 81169e8:	4810      	ldr	r0, [pc, #64]	@ (8116a2c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 81169ea:	f005 fa2f 	bl	811be4c <iprintf>

  while (pcb != NULL) {
 81169ee:	e011      	b.n	8116a14 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 81169f0:	68fb      	ldr	r3, [r7, #12]
 81169f2:	681a      	ldr	r2, [r3, #0]
 81169f4:	687b      	ldr	r3, [r7, #4]
 81169f6:	681b      	ldr	r3, [r3, #0]
 81169f8:	429a      	cmp	r2, r3
 81169fa:	d108      	bne.n	8116a0e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 81169fc:	68fb      	ldr	r3, [r7, #12]
 81169fe:	68db      	ldr	r3, [r3, #12]
 8116a00:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8116a02:	68f8      	ldr	r0, [r7, #12]
 8116a04:	f7fe fde6 	bl	81155d4 <tcp_abort>
      pcb = next;
 8116a08:	68bb      	ldr	r3, [r7, #8]
 8116a0a:	60fb      	str	r3, [r7, #12]
 8116a0c:	e002      	b.n	8116a14 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8116a0e:	68fb      	ldr	r3, [r7, #12]
 8116a10:	68db      	ldr	r3, [r3, #12]
 8116a12:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8116a14:	68fb      	ldr	r3, [r7, #12]
 8116a16:	2b00      	cmp	r3, #0
 8116a18:	d1ea      	bne.n	81169f0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8116a1a:	bf00      	nop
 8116a1c:	bf00      	nop
 8116a1e:	3710      	adds	r7, #16
 8116a20:	46bd      	mov	sp, r7
 8116a22:	bd80      	pop	{r7, pc}
 8116a24:	0811e0e0 	.word	0x0811e0e0
 8116a28:	0811e854 	.word	0x0811e854
 8116a2c:	0811e164 	.word	0x0811e164

08116a30 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8116a30:	b580      	push	{r7, lr}
 8116a32:	b084      	sub	sp, #16
 8116a34:	af00      	add	r7, sp, #0
 8116a36:	6078      	str	r0, [r7, #4]
 8116a38:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8116a3a:	687b      	ldr	r3, [r7, #4]
 8116a3c:	2b00      	cmp	r3, #0
 8116a3e:	d02a      	beq.n	8116a96 <tcp_netif_ip_addr_changed+0x66>
 8116a40:	687b      	ldr	r3, [r7, #4]
 8116a42:	681b      	ldr	r3, [r3, #0]
 8116a44:	2b00      	cmp	r3, #0
 8116a46:	d026      	beq.n	8116a96 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8116a48:	4b15      	ldr	r3, [pc, #84]	@ (8116aa0 <tcp_netif_ip_addr_changed+0x70>)
 8116a4a:	681b      	ldr	r3, [r3, #0]
 8116a4c:	4619      	mov	r1, r3
 8116a4e:	6878      	ldr	r0, [r7, #4]
 8116a50:	f7ff ffbc 	bl	81169cc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8116a54:	4b13      	ldr	r3, [pc, #76]	@ (8116aa4 <tcp_netif_ip_addr_changed+0x74>)
 8116a56:	681b      	ldr	r3, [r3, #0]
 8116a58:	4619      	mov	r1, r3
 8116a5a:	6878      	ldr	r0, [r7, #4]
 8116a5c:	f7ff ffb6 	bl	81169cc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8116a60:	683b      	ldr	r3, [r7, #0]
 8116a62:	2b00      	cmp	r3, #0
 8116a64:	d017      	beq.n	8116a96 <tcp_netif_ip_addr_changed+0x66>
 8116a66:	683b      	ldr	r3, [r7, #0]
 8116a68:	681b      	ldr	r3, [r3, #0]
 8116a6a:	2b00      	cmp	r3, #0
 8116a6c:	d013      	beq.n	8116a96 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8116a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8116aa8 <tcp_netif_ip_addr_changed+0x78>)
 8116a70:	681b      	ldr	r3, [r3, #0]
 8116a72:	60fb      	str	r3, [r7, #12]
 8116a74:	e00c      	b.n	8116a90 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8116a76:	68fb      	ldr	r3, [r7, #12]
 8116a78:	681a      	ldr	r2, [r3, #0]
 8116a7a:	687b      	ldr	r3, [r7, #4]
 8116a7c:	681b      	ldr	r3, [r3, #0]
 8116a7e:	429a      	cmp	r2, r3
 8116a80:	d103      	bne.n	8116a8a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8116a82:	683b      	ldr	r3, [r7, #0]
 8116a84:	681a      	ldr	r2, [r3, #0]
 8116a86:	68fb      	ldr	r3, [r7, #12]
 8116a88:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8116a8a:	68fb      	ldr	r3, [r7, #12]
 8116a8c:	68db      	ldr	r3, [r3, #12]
 8116a8e:	60fb      	str	r3, [r7, #12]
 8116a90:	68fb      	ldr	r3, [r7, #12]
 8116a92:	2b00      	cmp	r3, #0
 8116a94:	d1ef      	bne.n	8116a76 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8116a96:	bf00      	nop
 8116a98:	3710      	adds	r7, #16
 8116a9a:	46bd      	mov	sp, r7
 8116a9c:	bd80      	pop	{r7, pc}
 8116a9e:	bf00      	nop
 8116aa0:	10011d20 	.word	0x10011d20
 8116aa4:	10011d18 	.word	0x10011d18
 8116aa8:	10011d1c 	.word	0x10011d1c

08116aac <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8116aac:	b580      	push	{r7, lr}
 8116aae:	b082      	sub	sp, #8
 8116ab0:	af00      	add	r7, sp, #0
 8116ab2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8116ab4:	687b      	ldr	r3, [r7, #4]
 8116ab6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8116ab8:	2b00      	cmp	r3, #0
 8116aba:	d007      	beq.n	8116acc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8116abc:	687b      	ldr	r3, [r7, #4]
 8116abe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8116ac0:	4618      	mov	r0, r3
 8116ac2:	f7ff fbc1 	bl	8116248 <tcp_segs_free>
    pcb->ooseq = NULL;
 8116ac6:	687b      	ldr	r3, [r7, #4]
 8116ac8:	2200      	movs	r2, #0
 8116aca:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8116acc:	bf00      	nop
 8116ace:	3708      	adds	r7, #8
 8116ad0:	46bd      	mov	sp, r7
 8116ad2:	bd80      	pop	{r7, pc}

08116ad4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8116ad4:	b590      	push	{r4, r7, lr}
 8116ad6:	b08d      	sub	sp, #52	@ 0x34
 8116ad8:	af04      	add	r7, sp, #16
 8116ada:	6078      	str	r0, [r7, #4]
 8116adc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8116ade:	687b      	ldr	r3, [r7, #4]
 8116ae0:	2b00      	cmp	r3, #0
 8116ae2:	d105      	bne.n	8116af0 <tcp_input+0x1c>
 8116ae4:	4b9b      	ldr	r3, [pc, #620]	@ (8116d54 <tcp_input+0x280>)
 8116ae6:	2283      	movs	r2, #131	@ 0x83
 8116ae8:	499b      	ldr	r1, [pc, #620]	@ (8116d58 <tcp_input+0x284>)
 8116aea:	489c      	ldr	r0, [pc, #624]	@ (8116d5c <tcp_input+0x288>)
 8116aec:	f005 f9ae 	bl	811be4c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8116af0:	687b      	ldr	r3, [r7, #4]
 8116af2:	685b      	ldr	r3, [r3, #4]
 8116af4:	4a9a      	ldr	r2, [pc, #616]	@ (8116d60 <tcp_input+0x28c>)
 8116af6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8116af8:	687b      	ldr	r3, [r7, #4]
 8116afa:	895b      	ldrh	r3, [r3, #10]
 8116afc:	2b13      	cmp	r3, #19
 8116afe:	f240 83d1 	bls.w	81172a4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8116b02:	4b98      	ldr	r3, [pc, #608]	@ (8116d64 <tcp_input+0x290>)
 8116b04:	695b      	ldr	r3, [r3, #20]
 8116b06:	4a97      	ldr	r2, [pc, #604]	@ (8116d64 <tcp_input+0x290>)
 8116b08:	6812      	ldr	r2, [r2, #0]
 8116b0a:	4611      	mov	r1, r2
 8116b0c:	4618      	mov	r0, r3
 8116b0e:	f7fb fcc3 	bl	8112498 <ip4_addr_isbroadcast_u32>
 8116b12:	4603      	mov	r3, r0
 8116b14:	2b00      	cmp	r3, #0
 8116b16:	f040 83c7 	bne.w	81172a8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8116b1a:	4b92      	ldr	r3, [pc, #584]	@ (8116d64 <tcp_input+0x290>)
 8116b1c:	695b      	ldr	r3, [r3, #20]
 8116b1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8116b22:	2be0      	cmp	r3, #224	@ 0xe0
 8116b24:	f000 83c0 	beq.w	81172a8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8116b28:	4b8d      	ldr	r3, [pc, #564]	@ (8116d60 <tcp_input+0x28c>)
 8116b2a:	681b      	ldr	r3, [r3, #0]
 8116b2c:	899b      	ldrh	r3, [r3, #12]
 8116b2e:	b29b      	uxth	r3, r3
 8116b30:	4618      	mov	r0, r3
 8116b32:	f7f9 ff43 	bl	81109bc <lwip_htons>
 8116b36:	4603      	mov	r3, r0
 8116b38:	0b1b      	lsrs	r3, r3, #12
 8116b3a:	b29b      	uxth	r3, r3
 8116b3c:	b2db      	uxtb	r3, r3
 8116b3e:	009b      	lsls	r3, r3, #2
 8116b40:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8116b42:	7cbb      	ldrb	r3, [r7, #18]
 8116b44:	2b13      	cmp	r3, #19
 8116b46:	f240 83b1 	bls.w	81172ac <tcp_input+0x7d8>
 8116b4a:	7cbb      	ldrb	r3, [r7, #18]
 8116b4c:	b29a      	uxth	r2, r3
 8116b4e:	687b      	ldr	r3, [r7, #4]
 8116b50:	891b      	ldrh	r3, [r3, #8]
 8116b52:	429a      	cmp	r2, r3
 8116b54:	f200 83aa 	bhi.w	81172ac <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8116b58:	7cbb      	ldrb	r3, [r7, #18]
 8116b5a:	b29b      	uxth	r3, r3
 8116b5c:	3b14      	subs	r3, #20
 8116b5e:	b29a      	uxth	r2, r3
 8116b60:	4b81      	ldr	r3, [pc, #516]	@ (8116d68 <tcp_input+0x294>)
 8116b62:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8116b64:	4b81      	ldr	r3, [pc, #516]	@ (8116d6c <tcp_input+0x298>)
 8116b66:	2200      	movs	r2, #0
 8116b68:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8116b6a:	687b      	ldr	r3, [r7, #4]
 8116b6c:	895a      	ldrh	r2, [r3, #10]
 8116b6e:	7cbb      	ldrb	r3, [r7, #18]
 8116b70:	b29b      	uxth	r3, r3
 8116b72:	429a      	cmp	r2, r3
 8116b74:	d309      	bcc.n	8116b8a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8116b76:	4b7c      	ldr	r3, [pc, #496]	@ (8116d68 <tcp_input+0x294>)
 8116b78:	881a      	ldrh	r2, [r3, #0]
 8116b7a:	4b7d      	ldr	r3, [pc, #500]	@ (8116d70 <tcp_input+0x29c>)
 8116b7c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8116b7e:	7cbb      	ldrb	r3, [r7, #18]
 8116b80:	4619      	mov	r1, r3
 8116b82:	6878      	ldr	r0, [r7, #4]
 8116b84:	f7fd fe1a 	bl	81147bc <pbuf_remove_header>
 8116b88:	e04e      	b.n	8116c28 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8116b8a:	687b      	ldr	r3, [r7, #4]
 8116b8c:	681b      	ldr	r3, [r3, #0]
 8116b8e:	2b00      	cmp	r3, #0
 8116b90:	d105      	bne.n	8116b9e <tcp_input+0xca>
 8116b92:	4b70      	ldr	r3, [pc, #448]	@ (8116d54 <tcp_input+0x280>)
 8116b94:	22c2      	movs	r2, #194	@ 0xc2
 8116b96:	4977      	ldr	r1, [pc, #476]	@ (8116d74 <tcp_input+0x2a0>)
 8116b98:	4870      	ldr	r0, [pc, #448]	@ (8116d5c <tcp_input+0x288>)
 8116b9a:	f005 f957 	bl	811be4c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8116b9e:	2114      	movs	r1, #20
 8116ba0:	6878      	ldr	r0, [r7, #4]
 8116ba2:	f7fd fe0b 	bl	81147bc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8116ba6:	687b      	ldr	r3, [r7, #4]
 8116ba8:	895a      	ldrh	r2, [r3, #10]
 8116baa:	4b71      	ldr	r3, [pc, #452]	@ (8116d70 <tcp_input+0x29c>)
 8116bac:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8116bae:	4b6e      	ldr	r3, [pc, #440]	@ (8116d68 <tcp_input+0x294>)
 8116bb0:	881a      	ldrh	r2, [r3, #0]
 8116bb2:	4b6f      	ldr	r3, [pc, #444]	@ (8116d70 <tcp_input+0x29c>)
 8116bb4:	881b      	ldrh	r3, [r3, #0]
 8116bb6:	1ad3      	subs	r3, r2, r3
 8116bb8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8116bba:	4b6d      	ldr	r3, [pc, #436]	@ (8116d70 <tcp_input+0x29c>)
 8116bbc:	881b      	ldrh	r3, [r3, #0]
 8116bbe:	4619      	mov	r1, r3
 8116bc0:	6878      	ldr	r0, [r7, #4]
 8116bc2:	f7fd fdfb 	bl	81147bc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8116bc6:	687b      	ldr	r3, [r7, #4]
 8116bc8:	681b      	ldr	r3, [r3, #0]
 8116bca:	895b      	ldrh	r3, [r3, #10]
 8116bcc:	8a3a      	ldrh	r2, [r7, #16]
 8116bce:	429a      	cmp	r2, r3
 8116bd0:	f200 836e 	bhi.w	81172b0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8116bd4:	687b      	ldr	r3, [r7, #4]
 8116bd6:	681b      	ldr	r3, [r3, #0]
 8116bd8:	685b      	ldr	r3, [r3, #4]
 8116bda:	4a64      	ldr	r2, [pc, #400]	@ (8116d6c <tcp_input+0x298>)
 8116bdc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8116bde:	687b      	ldr	r3, [r7, #4]
 8116be0:	681b      	ldr	r3, [r3, #0]
 8116be2:	8a3a      	ldrh	r2, [r7, #16]
 8116be4:	4611      	mov	r1, r2
 8116be6:	4618      	mov	r0, r3
 8116be8:	f7fd fde8 	bl	81147bc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8116bec:	687b      	ldr	r3, [r7, #4]
 8116bee:	891a      	ldrh	r2, [r3, #8]
 8116bf0:	8a3b      	ldrh	r3, [r7, #16]
 8116bf2:	1ad3      	subs	r3, r2, r3
 8116bf4:	b29a      	uxth	r2, r3
 8116bf6:	687b      	ldr	r3, [r7, #4]
 8116bf8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8116bfa:	687b      	ldr	r3, [r7, #4]
 8116bfc:	895b      	ldrh	r3, [r3, #10]
 8116bfe:	2b00      	cmp	r3, #0
 8116c00:	d005      	beq.n	8116c0e <tcp_input+0x13a>
 8116c02:	4b54      	ldr	r3, [pc, #336]	@ (8116d54 <tcp_input+0x280>)
 8116c04:	22df      	movs	r2, #223	@ 0xdf
 8116c06:	495c      	ldr	r1, [pc, #368]	@ (8116d78 <tcp_input+0x2a4>)
 8116c08:	4854      	ldr	r0, [pc, #336]	@ (8116d5c <tcp_input+0x288>)
 8116c0a:	f005 f91f 	bl	811be4c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8116c0e:	687b      	ldr	r3, [r7, #4]
 8116c10:	891a      	ldrh	r2, [r3, #8]
 8116c12:	687b      	ldr	r3, [r7, #4]
 8116c14:	681b      	ldr	r3, [r3, #0]
 8116c16:	891b      	ldrh	r3, [r3, #8]
 8116c18:	429a      	cmp	r2, r3
 8116c1a:	d005      	beq.n	8116c28 <tcp_input+0x154>
 8116c1c:	4b4d      	ldr	r3, [pc, #308]	@ (8116d54 <tcp_input+0x280>)
 8116c1e:	22e0      	movs	r2, #224	@ 0xe0
 8116c20:	4956      	ldr	r1, [pc, #344]	@ (8116d7c <tcp_input+0x2a8>)
 8116c22:	484e      	ldr	r0, [pc, #312]	@ (8116d5c <tcp_input+0x288>)
 8116c24:	f005 f912 	bl	811be4c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8116c28:	4b4d      	ldr	r3, [pc, #308]	@ (8116d60 <tcp_input+0x28c>)
 8116c2a:	681b      	ldr	r3, [r3, #0]
 8116c2c:	881b      	ldrh	r3, [r3, #0]
 8116c2e:	b29b      	uxth	r3, r3
 8116c30:	4a4b      	ldr	r2, [pc, #300]	@ (8116d60 <tcp_input+0x28c>)
 8116c32:	6814      	ldr	r4, [r2, #0]
 8116c34:	4618      	mov	r0, r3
 8116c36:	f7f9 fec1 	bl	81109bc <lwip_htons>
 8116c3a:	4603      	mov	r3, r0
 8116c3c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8116c3e:	4b48      	ldr	r3, [pc, #288]	@ (8116d60 <tcp_input+0x28c>)
 8116c40:	681b      	ldr	r3, [r3, #0]
 8116c42:	885b      	ldrh	r3, [r3, #2]
 8116c44:	b29b      	uxth	r3, r3
 8116c46:	4a46      	ldr	r2, [pc, #280]	@ (8116d60 <tcp_input+0x28c>)
 8116c48:	6814      	ldr	r4, [r2, #0]
 8116c4a:	4618      	mov	r0, r3
 8116c4c:	f7f9 feb6 	bl	81109bc <lwip_htons>
 8116c50:	4603      	mov	r3, r0
 8116c52:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8116c54:	4b42      	ldr	r3, [pc, #264]	@ (8116d60 <tcp_input+0x28c>)
 8116c56:	681b      	ldr	r3, [r3, #0]
 8116c58:	685b      	ldr	r3, [r3, #4]
 8116c5a:	4a41      	ldr	r2, [pc, #260]	@ (8116d60 <tcp_input+0x28c>)
 8116c5c:	6814      	ldr	r4, [r2, #0]
 8116c5e:	4618      	mov	r0, r3
 8116c60:	f7f9 fec1 	bl	81109e6 <lwip_htonl>
 8116c64:	4603      	mov	r3, r0
 8116c66:	6063      	str	r3, [r4, #4]
 8116c68:	6863      	ldr	r3, [r4, #4]
 8116c6a:	4a45      	ldr	r2, [pc, #276]	@ (8116d80 <tcp_input+0x2ac>)
 8116c6c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8116c6e:	4b3c      	ldr	r3, [pc, #240]	@ (8116d60 <tcp_input+0x28c>)
 8116c70:	681b      	ldr	r3, [r3, #0]
 8116c72:	689b      	ldr	r3, [r3, #8]
 8116c74:	4a3a      	ldr	r2, [pc, #232]	@ (8116d60 <tcp_input+0x28c>)
 8116c76:	6814      	ldr	r4, [r2, #0]
 8116c78:	4618      	mov	r0, r3
 8116c7a:	f7f9 feb4 	bl	81109e6 <lwip_htonl>
 8116c7e:	4603      	mov	r3, r0
 8116c80:	60a3      	str	r3, [r4, #8]
 8116c82:	68a3      	ldr	r3, [r4, #8]
 8116c84:	4a3f      	ldr	r2, [pc, #252]	@ (8116d84 <tcp_input+0x2b0>)
 8116c86:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8116c88:	4b35      	ldr	r3, [pc, #212]	@ (8116d60 <tcp_input+0x28c>)
 8116c8a:	681b      	ldr	r3, [r3, #0]
 8116c8c:	89db      	ldrh	r3, [r3, #14]
 8116c8e:	b29b      	uxth	r3, r3
 8116c90:	4a33      	ldr	r2, [pc, #204]	@ (8116d60 <tcp_input+0x28c>)
 8116c92:	6814      	ldr	r4, [r2, #0]
 8116c94:	4618      	mov	r0, r3
 8116c96:	f7f9 fe91 	bl	81109bc <lwip_htons>
 8116c9a:	4603      	mov	r3, r0
 8116c9c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8116c9e:	4b30      	ldr	r3, [pc, #192]	@ (8116d60 <tcp_input+0x28c>)
 8116ca0:	681b      	ldr	r3, [r3, #0]
 8116ca2:	899b      	ldrh	r3, [r3, #12]
 8116ca4:	b29b      	uxth	r3, r3
 8116ca6:	4618      	mov	r0, r3
 8116ca8:	f7f9 fe88 	bl	81109bc <lwip_htons>
 8116cac:	4603      	mov	r3, r0
 8116cae:	b2db      	uxtb	r3, r3
 8116cb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8116cb4:	b2da      	uxtb	r2, r3
 8116cb6:	4b34      	ldr	r3, [pc, #208]	@ (8116d88 <tcp_input+0x2b4>)
 8116cb8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8116cba:	687b      	ldr	r3, [r7, #4]
 8116cbc:	891a      	ldrh	r2, [r3, #8]
 8116cbe:	4b33      	ldr	r3, [pc, #204]	@ (8116d8c <tcp_input+0x2b8>)
 8116cc0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8116cc2:	4b31      	ldr	r3, [pc, #196]	@ (8116d88 <tcp_input+0x2b4>)
 8116cc4:	781b      	ldrb	r3, [r3, #0]
 8116cc6:	f003 0303 	and.w	r3, r3, #3
 8116cca:	2b00      	cmp	r3, #0
 8116ccc:	d00c      	beq.n	8116ce8 <tcp_input+0x214>
    tcplen++;
 8116cce:	4b2f      	ldr	r3, [pc, #188]	@ (8116d8c <tcp_input+0x2b8>)
 8116cd0:	881b      	ldrh	r3, [r3, #0]
 8116cd2:	3301      	adds	r3, #1
 8116cd4:	b29a      	uxth	r2, r3
 8116cd6:	4b2d      	ldr	r3, [pc, #180]	@ (8116d8c <tcp_input+0x2b8>)
 8116cd8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8116cda:	687b      	ldr	r3, [r7, #4]
 8116cdc:	891a      	ldrh	r2, [r3, #8]
 8116cde:	4b2b      	ldr	r3, [pc, #172]	@ (8116d8c <tcp_input+0x2b8>)
 8116ce0:	881b      	ldrh	r3, [r3, #0]
 8116ce2:	429a      	cmp	r2, r3
 8116ce4:	f200 82e6 	bhi.w	81172b4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8116ce8:	2300      	movs	r3, #0
 8116cea:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8116cec:	4b28      	ldr	r3, [pc, #160]	@ (8116d90 <tcp_input+0x2bc>)
 8116cee:	681b      	ldr	r3, [r3, #0]
 8116cf0:	61fb      	str	r3, [r7, #28]
 8116cf2:	e09d      	b.n	8116e30 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8116cf4:	69fb      	ldr	r3, [r7, #28]
 8116cf6:	7d1b      	ldrb	r3, [r3, #20]
 8116cf8:	2b00      	cmp	r3, #0
 8116cfa:	d105      	bne.n	8116d08 <tcp_input+0x234>
 8116cfc:	4b15      	ldr	r3, [pc, #84]	@ (8116d54 <tcp_input+0x280>)
 8116cfe:	22fb      	movs	r2, #251	@ 0xfb
 8116d00:	4924      	ldr	r1, [pc, #144]	@ (8116d94 <tcp_input+0x2c0>)
 8116d02:	4816      	ldr	r0, [pc, #88]	@ (8116d5c <tcp_input+0x288>)
 8116d04:	f005 f8a2 	bl	811be4c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8116d08:	69fb      	ldr	r3, [r7, #28]
 8116d0a:	7d1b      	ldrb	r3, [r3, #20]
 8116d0c:	2b0a      	cmp	r3, #10
 8116d0e:	d105      	bne.n	8116d1c <tcp_input+0x248>
 8116d10:	4b10      	ldr	r3, [pc, #64]	@ (8116d54 <tcp_input+0x280>)
 8116d12:	22fc      	movs	r2, #252	@ 0xfc
 8116d14:	4920      	ldr	r1, [pc, #128]	@ (8116d98 <tcp_input+0x2c4>)
 8116d16:	4811      	ldr	r0, [pc, #68]	@ (8116d5c <tcp_input+0x288>)
 8116d18:	f005 f898 	bl	811be4c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8116d1c:	69fb      	ldr	r3, [r7, #28]
 8116d1e:	7d1b      	ldrb	r3, [r3, #20]
 8116d20:	2b01      	cmp	r3, #1
 8116d22:	d105      	bne.n	8116d30 <tcp_input+0x25c>
 8116d24:	4b0b      	ldr	r3, [pc, #44]	@ (8116d54 <tcp_input+0x280>)
 8116d26:	22fd      	movs	r2, #253	@ 0xfd
 8116d28:	491c      	ldr	r1, [pc, #112]	@ (8116d9c <tcp_input+0x2c8>)
 8116d2a:	480c      	ldr	r0, [pc, #48]	@ (8116d5c <tcp_input+0x288>)
 8116d2c:	f005 f88e 	bl	811be4c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8116d30:	69fb      	ldr	r3, [r7, #28]
 8116d32:	7a1b      	ldrb	r3, [r3, #8]
 8116d34:	2b00      	cmp	r3, #0
 8116d36:	d033      	beq.n	8116da0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8116d38:	69fb      	ldr	r3, [r7, #28]
 8116d3a:	7a1a      	ldrb	r2, [r3, #8]
 8116d3c:	4b09      	ldr	r3, [pc, #36]	@ (8116d64 <tcp_input+0x290>)
 8116d3e:	685b      	ldr	r3, [r3, #4]
 8116d40:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8116d44:	3301      	adds	r3, #1
 8116d46:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8116d48:	429a      	cmp	r2, r3
 8116d4a:	d029      	beq.n	8116da0 <tcp_input+0x2cc>
      prev = pcb;
 8116d4c:	69fb      	ldr	r3, [r7, #28]
 8116d4e:	61bb      	str	r3, [r7, #24]
      continue;
 8116d50:	e06b      	b.n	8116e2a <tcp_input+0x356>
 8116d52:	bf00      	nop
 8116d54:	0811e888 	.word	0x0811e888
 8116d58:	0811e8fc 	.word	0x0811e8fc
 8116d5c:	0811e914 	.word	0x0811e914
 8116d60:	10011d3c 	.word	0x10011d3c
 8116d64:	1000b244 	.word	0x1000b244
 8116d68:	10011d40 	.word	0x10011d40
 8116d6c:	10011d44 	.word	0x10011d44
 8116d70:	10011d42 	.word	0x10011d42
 8116d74:	0811e93c 	.word	0x0811e93c
 8116d78:	0811e94c 	.word	0x0811e94c
 8116d7c:	0811e958 	.word	0x0811e958
 8116d80:	10011d4c 	.word	0x10011d4c
 8116d84:	10011d50 	.word	0x10011d50
 8116d88:	10011d58 	.word	0x10011d58
 8116d8c:	10011d56 	.word	0x10011d56
 8116d90:	10011d20 	.word	0x10011d20
 8116d94:	0811e978 	.word	0x0811e978
 8116d98:	0811e9a0 	.word	0x0811e9a0
 8116d9c:	0811e9cc 	.word	0x0811e9cc
    }

    if (pcb->remote_port == tcphdr->src &&
 8116da0:	69fb      	ldr	r3, [r7, #28]
 8116da2:	8b1a      	ldrh	r2, [r3, #24]
 8116da4:	4b72      	ldr	r3, [pc, #456]	@ (8116f70 <tcp_input+0x49c>)
 8116da6:	681b      	ldr	r3, [r3, #0]
 8116da8:	881b      	ldrh	r3, [r3, #0]
 8116daa:	b29b      	uxth	r3, r3
 8116dac:	429a      	cmp	r2, r3
 8116dae:	d13a      	bne.n	8116e26 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8116db0:	69fb      	ldr	r3, [r7, #28]
 8116db2:	8ada      	ldrh	r2, [r3, #22]
 8116db4:	4b6e      	ldr	r3, [pc, #440]	@ (8116f70 <tcp_input+0x49c>)
 8116db6:	681b      	ldr	r3, [r3, #0]
 8116db8:	885b      	ldrh	r3, [r3, #2]
 8116dba:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8116dbc:	429a      	cmp	r2, r3
 8116dbe:	d132      	bne.n	8116e26 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8116dc0:	69fb      	ldr	r3, [r7, #28]
 8116dc2:	685a      	ldr	r2, [r3, #4]
 8116dc4:	4b6b      	ldr	r3, [pc, #428]	@ (8116f74 <tcp_input+0x4a0>)
 8116dc6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8116dc8:	429a      	cmp	r2, r3
 8116dca:	d12c      	bne.n	8116e26 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8116dcc:	69fb      	ldr	r3, [r7, #28]
 8116dce:	681a      	ldr	r2, [r3, #0]
 8116dd0:	4b68      	ldr	r3, [pc, #416]	@ (8116f74 <tcp_input+0x4a0>)
 8116dd2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8116dd4:	429a      	cmp	r2, r3
 8116dd6:	d126      	bne.n	8116e26 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8116dd8:	69fb      	ldr	r3, [r7, #28]
 8116dda:	68db      	ldr	r3, [r3, #12]
 8116ddc:	69fa      	ldr	r2, [r7, #28]
 8116dde:	429a      	cmp	r2, r3
 8116de0:	d106      	bne.n	8116df0 <tcp_input+0x31c>
 8116de2:	4b65      	ldr	r3, [pc, #404]	@ (8116f78 <tcp_input+0x4a4>)
 8116de4:	f240 120d 	movw	r2, #269	@ 0x10d
 8116de8:	4964      	ldr	r1, [pc, #400]	@ (8116f7c <tcp_input+0x4a8>)
 8116dea:	4865      	ldr	r0, [pc, #404]	@ (8116f80 <tcp_input+0x4ac>)
 8116dec:	f005 f82e 	bl	811be4c <iprintf>
      if (prev != NULL) {
 8116df0:	69bb      	ldr	r3, [r7, #24]
 8116df2:	2b00      	cmp	r3, #0
 8116df4:	d00a      	beq.n	8116e0c <tcp_input+0x338>
        prev->next = pcb->next;
 8116df6:	69fb      	ldr	r3, [r7, #28]
 8116df8:	68da      	ldr	r2, [r3, #12]
 8116dfa:	69bb      	ldr	r3, [r7, #24]
 8116dfc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8116dfe:	4b61      	ldr	r3, [pc, #388]	@ (8116f84 <tcp_input+0x4b0>)
 8116e00:	681a      	ldr	r2, [r3, #0]
 8116e02:	69fb      	ldr	r3, [r7, #28]
 8116e04:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8116e06:	4a5f      	ldr	r2, [pc, #380]	@ (8116f84 <tcp_input+0x4b0>)
 8116e08:	69fb      	ldr	r3, [r7, #28]
 8116e0a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8116e0c:	69fb      	ldr	r3, [r7, #28]
 8116e0e:	68db      	ldr	r3, [r3, #12]
 8116e10:	69fa      	ldr	r2, [r7, #28]
 8116e12:	429a      	cmp	r2, r3
 8116e14:	d111      	bne.n	8116e3a <tcp_input+0x366>
 8116e16:	4b58      	ldr	r3, [pc, #352]	@ (8116f78 <tcp_input+0x4a4>)
 8116e18:	f240 1215 	movw	r2, #277	@ 0x115
 8116e1c:	495a      	ldr	r1, [pc, #360]	@ (8116f88 <tcp_input+0x4b4>)
 8116e1e:	4858      	ldr	r0, [pc, #352]	@ (8116f80 <tcp_input+0x4ac>)
 8116e20:	f005 f814 	bl	811be4c <iprintf>
      break;
 8116e24:	e009      	b.n	8116e3a <tcp_input+0x366>
    }
    prev = pcb;
 8116e26:	69fb      	ldr	r3, [r7, #28]
 8116e28:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8116e2a:	69fb      	ldr	r3, [r7, #28]
 8116e2c:	68db      	ldr	r3, [r3, #12]
 8116e2e:	61fb      	str	r3, [r7, #28]
 8116e30:	69fb      	ldr	r3, [r7, #28]
 8116e32:	2b00      	cmp	r3, #0
 8116e34:	f47f af5e 	bne.w	8116cf4 <tcp_input+0x220>
 8116e38:	e000      	b.n	8116e3c <tcp_input+0x368>
      break;
 8116e3a:	bf00      	nop
  }

  if (pcb == NULL) {
 8116e3c:	69fb      	ldr	r3, [r7, #28]
 8116e3e:	2b00      	cmp	r3, #0
 8116e40:	f040 80aa 	bne.w	8116f98 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8116e44:	4b51      	ldr	r3, [pc, #324]	@ (8116f8c <tcp_input+0x4b8>)
 8116e46:	681b      	ldr	r3, [r3, #0]
 8116e48:	61fb      	str	r3, [r7, #28]
 8116e4a:	e03f      	b.n	8116ecc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8116e4c:	69fb      	ldr	r3, [r7, #28]
 8116e4e:	7d1b      	ldrb	r3, [r3, #20]
 8116e50:	2b0a      	cmp	r3, #10
 8116e52:	d006      	beq.n	8116e62 <tcp_input+0x38e>
 8116e54:	4b48      	ldr	r3, [pc, #288]	@ (8116f78 <tcp_input+0x4a4>)
 8116e56:	f240 121f 	movw	r2, #287	@ 0x11f
 8116e5a:	494d      	ldr	r1, [pc, #308]	@ (8116f90 <tcp_input+0x4bc>)
 8116e5c:	4848      	ldr	r0, [pc, #288]	@ (8116f80 <tcp_input+0x4ac>)
 8116e5e:	f004 fff5 	bl	811be4c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8116e62:	69fb      	ldr	r3, [r7, #28]
 8116e64:	7a1b      	ldrb	r3, [r3, #8]
 8116e66:	2b00      	cmp	r3, #0
 8116e68:	d009      	beq.n	8116e7e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8116e6a:	69fb      	ldr	r3, [r7, #28]
 8116e6c:	7a1a      	ldrb	r2, [r3, #8]
 8116e6e:	4b41      	ldr	r3, [pc, #260]	@ (8116f74 <tcp_input+0x4a0>)
 8116e70:	685b      	ldr	r3, [r3, #4]
 8116e72:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8116e76:	3301      	adds	r3, #1
 8116e78:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8116e7a:	429a      	cmp	r2, r3
 8116e7c:	d122      	bne.n	8116ec4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8116e7e:	69fb      	ldr	r3, [r7, #28]
 8116e80:	8b1a      	ldrh	r2, [r3, #24]
 8116e82:	4b3b      	ldr	r3, [pc, #236]	@ (8116f70 <tcp_input+0x49c>)
 8116e84:	681b      	ldr	r3, [r3, #0]
 8116e86:	881b      	ldrh	r3, [r3, #0]
 8116e88:	b29b      	uxth	r3, r3
 8116e8a:	429a      	cmp	r2, r3
 8116e8c:	d11b      	bne.n	8116ec6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8116e8e:	69fb      	ldr	r3, [r7, #28]
 8116e90:	8ada      	ldrh	r2, [r3, #22]
 8116e92:	4b37      	ldr	r3, [pc, #220]	@ (8116f70 <tcp_input+0x49c>)
 8116e94:	681b      	ldr	r3, [r3, #0]
 8116e96:	885b      	ldrh	r3, [r3, #2]
 8116e98:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8116e9a:	429a      	cmp	r2, r3
 8116e9c:	d113      	bne.n	8116ec6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8116e9e:	69fb      	ldr	r3, [r7, #28]
 8116ea0:	685a      	ldr	r2, [r3, #4]
 8116ea2:	4b34      	ldr	r3, [pc, #208]	@ (8116f74 <tcp_input+0x4a0>)
 8116ea4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8116ea6:	429a      	cmp	r2, r3
 8116ea8:	d10d      	bne.n	8116ec6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8116eaa:	69fb      	ldr	r3, [r7, #28]
 8116eac:	681a      	ldr	r2, [r3, #0]
 8116eae:	4b31      	ldr	r3, [pc, #196]	@ (8116f74 <tcp_input+0x4a0>)
 8116eb0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8116eb2:	429a      	cmp	r2, r3
 8116eb4:	d107      	bne.n	8116ec6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8116eb6:	69f8      	ldr	r0, [r7, #28]
 8116eb8:	f000 fb56 	bl	8117568 <tcp_timewait_input>
        }
        pbuf_free(p);
 8116ebc:	6878      	ldr	r0, [r7, #4]
 8116ebe:	f7fd fd03 	bl	81148c8 <pbuf_free>
        return;
 8116ec2:	e1fd      	b.n	81172c0 <tcp_input+0x7ec>
        continue;
 8116ec4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8116ec6:	69fb      	ldr	r3, [r7, #28]
 8116ec8:	68db      	ldr	r3, [r3, #12]
 8116eca:	61fb      	str	r3, [r7, #28]
 8116ecc:	69fb      	ldr	r3, [r7, #28]
 8116ece:	2b00      	cmp	r3, #0
 8116ed0:	d1bc      	bne.n	8116e4c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8116ed2:	2300      	movs	r3, #0
 8116ed4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8116ed6:	4b2f      	ldr	r3, [pc, #188]	@ (8116f94 <tcp_input+0x4c0>)
 8116ed8:	681b      	ldr	r3, [r3, #0]
 8116eda:	617b      	str	r3, [r7, #20]
 8116edc:	e02a      	b.n	8116f34 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8116ede:	697b      	ldr	r3, [r7, #20]
 8116ee0:	7a1b      	ldrb	r3, [r3, #8]
 8116ee2:	2b00      	cmp	r3, #0
 8116ee4:	d00c      	beq.n	8116f00 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8116ee6:	697b      	ldr	r3, [r7, #20]
 8116ee8:	7a1a      	ldrb	r2, [r3, #8]
 8116eea:	4b22      	ldr	r3, [pc, #136]	@ (8116f74 <tcp_input+0x4a0>)
 8116eec:	685b      	ldr	r3, [r3, #4]
 8116eee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8116ef2:	3301      	adds	r3, #1
 8116ef4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8116ef6:	429a      	cmp	r2, r3
 8116ef8:	d002      	beq.n	8116f00 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8116efa:	697b      	ldr	r3, [r7, #20]
 8116efc:	61bb      	str	r3, [r7, #24]
        continue;
 8116efe:	e016      	b.n	8116f2e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8116f00:	697b      	ldr	r3, [r7, #20]
 8116f02:	8ada      	ldrh	r2, [r3, #22]
 8116f04:	4b1a      	ldr	r3, [pc, #104]	@ (8116f70 <tcp_input+0x49c>)
 8116f06:	681b      	ldr	r3, [r3, #0]
 8116f08:	885b      	ldrh	r3, [r3, #2]
 8116f0a:	b29b      	uxth	r3, r3
 8116f0c:	429a      	cmp	r2, r3
 8116f0e:	d10c      	bne.n	8116f2a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8116f10:	697b      	ldr	r3, [r7, #20]
 8116f12:	681a      	ldr	r2, [r3, #0]
 8116f14:	4b17      	ldr	r3, [pc, #92]	@ (8116f74 <tcp_input+0x4a0>)
 8116f16:	695b      	ldr	r3, [r3, #20]
 8116f18:	429a      	cmp	r2, r3
 8116f1a:	d00f      	beq.n	8116f3c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8116f1c:	697b      	ldr	r3, [r7, #20]
 8116f1e:	2b00      	cmp	r3, #0
 8116f20:	d00d      	beq.n	8116f3e <tcp_input+0x46a>
 8116f22:	697b      	ldr	r3, [r7, #20]
 8116f24:	681b      	ldr	r3, [r3, #0]
 8116f26:	2b00      	cmp	r3, #0
 8116f28:	d009      	beq.n	8116f3e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8116f2a:	697b      	ldr	r3, [r7, #20]
 8116f2c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8116f2e:	697b      	ldr	r3, [r7, #20]
 8116f30:	68db      	ldr	r3, [r3, #12]
 8116f32:	617b      	str	r3, [r7, #20]
 8116f34:	697b      	ldr	r3, [r7, #20]
 8116f36:	2b00      	cmp	r3, #0
 8116f38:	d1d1      	bne.n	8116ede <tcp_input+0x40a>
 8116f3a:	e000      	b.n	8116f3e <tcp_input+0x46a>
            break;
 8116f3c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8116f3e:	697b      	ldr	r3, [r7, #20]
 8116f40:	2b00      	cmp	r3, #0
 8116f42:	d029      	beq.n	8116f98 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8116f44:	69bb      	ldr	r3, [r7, #24]
 8116f46:	2b00      	cmp	r3, #0
 8116f48:	d00a      	beq.n	8116f60 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8116f4a:	697b      	ldr	r3, [r7, #20]
 8116f4c:	68da      	ldr	r2, [r3, #12]
 8116f4e:	69bb      	ldr	r3, [r7, #24]
 8116f50:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8116f52:	4b10      	ldr	r3, [pc, #64]	@ (8116f94 <tcp_input+0x4c0>)
 8116f54:	681a      	ldr	r2, [r3, #0]
 8116f56:	697b      	ldr	r3, [r7, #20]
 8116f58:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8116f5a:	4a0e      	ldr	r2, [pc, #56]	@ (8116f94 <tcp_input+0x4c0>)
 8116f5c:	697b      	ldr	r3, [r7, #20]
 8116f5e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8116f60:	6978      	ldr	r0, [r7, #20]
 8116f62:	f000 fa03 	bl	811736c <tcp_listen_input>
      }
      pbuf_free(p);
 8116f66:	6878      	ldr	r0, [r7, #4]
 8116f68:	f7fd fcae 	bl	81148c8 <pbuf_free>
      return;
 8116f6c:	e1a8      	b.n	81172c0 <tcp_input+0x7ec>
 8116f6e:	bf00      	nop
 8116f70:	10011d3c 	.word	0x10011d3c
 8116f74:	1000b244 	.word	0x1000b244
 8116f78:	0811e888 	.word	0x0811e888
 8116f7c:	0811e9f4 	.word	0x0811e9f4
 8116f80:	0811e914 	.word	0x0811e914
 8116f84:	10011d20 	.word	0x10011d20
 8116f88:	0811ea20 	.word	0x0811ea20
 8116f8c:	10011d24 	.word	0x10011d24
 8116f90:	0811ea4c 	.word	0x0811ea4c
 8116f94:	10011d1c 	.word	0x10011d1c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8116f98:	69fb      	ldr	r3, [r7, #28]
 8116f9a:	2b00      	cmp	r3, #0
 8116f9c:	f000 8158 	beq.w	8117250 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8116fa0:	4b95      	ldr	r3, [pc, #596]	@ (81171f8 <tcp_input+0x724>)
 8116fa2:	2200      	movs	r2, #0
 8116fa4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8116fa6:	687b      	ldr	r3, [r7, #4]
 8116fa8:	891a      	ldrh	r2, [r3, #8]
 8116faa:	4b93      	ldr	r3, [pc, #588]	@ (81171f8 <tcp_input+0x724>)
 8116fac:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8116fae:	4a92      	ldr	r2, [pc, #584]	@ (81171f8 <tcp_input+0x724>)
 8116fb0:	687b      	ldr	r3, [r7, #4]
 8116fb2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8116fb4:	4b91      	ldr	r3, [pc, #580]	@ (81171fc <tcp_input+0x728>)
 8116fb6:	681b      	ldr	r3, [r3, #0]
 8116fb8:	4a8f      	ldr	r2, [pc, #572]	@ (81171f8 <tcp_input+0x724>)
 8116fba:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8116fbc:	4b90      	ldr	r3, [pc, #576]	@ (8117200 <tcp_input+0x72c>)
 8116fbe:	2200      	movs	r2, #0
 8116fc0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8116fc2:	4b90      	ldr	r3, [pc, #576]	@ (8117204 <tcp_input+0x730>)
 8116fc4:	2200      	movs	r2, #0
 8116fc6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8116fc8:	4b8f      	ldr	r3, [pc, #572]	@ (8117208 <tcp_input+0x734>)
 8116fca:	2200      	movs	r2, #0
 8116fcc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8116fce:	4b8f      	ldr	r3, [pc, #572]	@ (811720c <tcp_input+0x738>)
 8116fd0:	781b      	ldrb	r3, [r3, #0]
 8116fd2:	f003 0308 	and.w	r3, r3, #8
 8116fd6:	2b00      	cmp	r3, #0
 8116fd8:	d006      	beq.n	8116fe8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8116fda:	687b      	ldr	r3, [r7, #4]
 8116fdc:	7b5b      	ldrb	r3, [r3, #13]
 8116fde:	f043 0301 	orr.w	r3, r3, #1
 8116fe2:	b2da      	uxtb	r2, r3
 8116fe4:	687b      	ldr	r3, [r7, #4]
 8116fe6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8116fe8:	69fb      	ldr	r3, [r7, #28]
 8116fea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8116fec:	2b00      	cmp	r3, #0
 8116fee:	d017      	beq.n	8117020 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8116ff0:	69f8      	ldr	r0, [r7, #28]
 8116ff2:	f7ff f8ab 	bl	811614c <tcp_process_refused_data>
 8116ff6:	4603      	mov	r3, r0
 8116ff8:	f113 0f0d 	cmn.w	r3, #13
 8116ffc:	d007      	beq.n	811700e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8116ffe:	69fb      	ldr	r3, [r7, #28]
 8117000:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8117002:	2b00      	cmp	r3, #0
 8117004:	d00c      	beq.n	8117020 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8117006:	4b82      	ldr	r3, [pc, #520]	@ (8117210 <tcp_input+0x73c>)
 8117008:	881b      	ldrh	r3, [r3, #0]
 811700a:	2b00      	cmp	r3, #0
 811700c:	d008      	beq.n	8117020 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 811700e:	69fb      	ldr	r3, [r7, #28]
 8117010:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8117012:	2b00      	cmp	r3, #0
 8117014:	f040 80e4 	bne.w	81171e0 <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8117018:	69f8      	ldr	r0, [r7, #28]
 811701a:	f003 fe01 	bl	811ac20 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 811701e:	e0df      	b.n	81171e0 <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 8117020:	4a7c      	ldr	r2, [pc, #496]	@ (8117214 <tcp_input+0x740>)
 8117022:	69fb      	ldr	r3, [r7, #28]
 8117024:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8117026:	69f8      	ldr	r0, [r7, #28]
 8117028:	f000 fb18 	bl	811765c <tcp_process>
 811702c:	4603      	mov	r3, r0
 811702e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8117030:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8117034:	f113 0f0d 	cmn.w	r3, #13
 8117038:	f000 80d4 	beq.w	81171e4 <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 811703c:	4b71      	ldr	r3, [pc, #452]	@ (8117204 <tcp_input+0x730>)
 811703e:	781b      	ldrb	r3, [r3, #0]
 8117040:	f003 0308 	and.w	r3, r3, #8
 8117044:	2b00      	cmp	r3, #0
 8117046:	d015      	beq.n	8117074 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8117048:	69fb      	ldr	r3, [r7, #28]
 811704a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 811704e:	2b00      	cmp	r3, #0
 8117050:	d008      	beq.n	8117064 <tcp_input+0x590>
 8117052:	69fb      	ldr	r3, [r7, #28]
 8117054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8117058:	69fa      	ldr	r2, [r7, #28]
 811705a:	6912      	ldr	r2, [r2, #16]
 811705c:	f06f 010d 	mvn.w	r1, #13
 8117060:	4610      	mov	r0, r2
 8117062:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8117064:	69f9      	ldr	r1, [r7, #28]
 8117066:	486c      	ldr	r0, [pc, #432]	@ (8117218 <tcp_input+0x744>)
 8117068:	f7ff fbbc 	bl	81167e4 <tcp_pcb_remove>
        tcp_free(pcb);
 811706c:	69f8      	ldr	r0, [r7, #28]
 811706e:	f7fd ffc9 	bl	8115004 <tcp_free>
 8117072:	e0da      	b.n	811722a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8117074:	2300      	movs	r3, #0
 8117076:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8117078:	4b63      	ldr	r3, [pc, #396]	@ (8117208 <tcp_input+0x734>)
 811707a:	881b      	ldrh	r3, [r3, #0]
 811707c:	2b00      	cmp	r3, #0
 811707e:	d01d      	beq.n	81170bc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8117080:	4b61      	ldr	r3, [pc, #388]	@ (8117208 <tcp_input+0x734>)
 8117082:	881b      	ldrh	r3, [r3, #0]
 8117084:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8117086:	69fb      	ldr	r3, [r7, #28]
 8117088:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 811708c:	2b00      	cmp	r3, #0
 811708e:	d00a      	beq.n	81170a6 <tcp_input+0x5d2>
 8117090:	69fb      	ldr	r3, [r7, #28]
 8117092:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8117096:	69fa      	ldr	r2, [r7, #28]
 8117098:	6910      	ldr	r0, [r2, #16]
 811709a:	89fa      	ldrh	r2, [r7, #14]
 811709c:	69f9      	ldr	r1, [r7, #28]
 811709e:	4798      	blx	r3
 81170a0:	4603      	mov	r3, r0
 81170a2:	74fb      	strb	r3, [r7, #19]
 81170a4:	e001      	b.n	81170aa <tcp_input+0x5d6>
 81170a6:	2300      	movs	r3, #0
 81170a8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 81170aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 81170ae:	f113 0f0d 	cmn.w	r3, #13
 81170b2:	f000 8099 	beq.w	81171e8 <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 81170b6:	4b54      	ldr	r3, [pc, #336]	@ (8117208 <tcp_input+0x734>)
 81170b8:	2200      	movs	r2, #0
 81170ba:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 81170bc:	69f8      	ldr	r0, [r7, #28]
 81170be:	f000 f915 	bl	81172ec <tcp_input_delayed_close>
 81170c2:	4603      	mov	r3, r0
 81170c4:	2b00      	cmp	r3, #0
 81170c6:	f040 8091 	bne.w	81171ec <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 81170ca:	4b4d      	ldr	r3, [pc, #308]	@ (8117200 <tcp_input+0x72c>)
 81170cc:	681b      	ldr	r3, [r3, #0]
 81170ce:	2b00      	cmp	r3, #0
 81170d0:	d041      	beq.n	8117156 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 81170d2:	69fb      	ldr	r3, [r7, #28]
 81170d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81170d6:	2b00      	cmp	r3, #0
 81170d8:	d006      	beq.n	81170e8 <tcp_input+0x614>
 81170da:	4b50      	ldr	r3, [pc, #320]	@ (811721c <tcp_input+0x748>)
 81170dc:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 81170e0:	494f      	ldr	r1, [pc, #316]	@ (8117220 <tcp_input+0x74c>)
 81170e2:	4850      	ldr	r0, [pc, #320]	@ (8117224 <tcp_input+0x750>)
 81170e4:	f004 feb2 	bl	811be4c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 81170e8:	69fb      	ldr	r3, [r7, #28]
 81170ea:	8b5b      	ldrh	r3, [r3, #26]
 81170ec:	f003 0310 	and.w	r3, r3, #16
 81170f0:	2b00      	cmp	r3, #0
 81170f2:	d008      	beq.n	8117106 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 81170f4:	4b42      	ldr	r3, [pc, #264]	@ (8117200 <tcp_input+0x72c>)
 81170f6:	681b      	ldr	r3, [r3, #0]
 81170f8:	4618      	mov	r0, r3
 81170fa:	f7fd fbe5 	bl	81148c8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 81170fe:	69f8      	ldr	r0, [r7, #28]
 8117100:	f7fe fa68 	bl	81155d4 <tcp_abort>
            goto aborted;
 8117104:	e091      	b.n	811722a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8117106:	69fb      	ldr	r3, [r7, #28]
 8117108:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 811710c:	2b00      	cmp	r3, #0
 811710e:	d00c      	beq.n	811712a <tcp_input+0x656>
 8117110:	69fb      	ldr	r3, [r7, #28]
 8117112:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8117116:	69fb      	ldr	r3, [r7, #28]
 8117118:	6918      	ldr	r0, [r3, #16]
 811711a:	4b39      	ldr	r3, [pc, #228]	@ (8117200 <tcp_input+0x72c>)
 811711c:	681a      	ldr	r2, [r3, #0]
 811711e:	2300      	movs	r3, #0
 8117120:	69f9      	ldr	r1, [r7, #28]
 8117122:	47a0      	blx	r4
 8117124:	4603      	mov	r3, r0
 8117126:	74fb      	strb	r3, [r7, #19]
 8117128:	e008      	b.n	811713c <tcp_input+0x668>
 811712a:	4b35      	ldr	r3, [pc, #212]	@ (8117200 <tcp_input+0x72c>)
 811712c:	681a      	ldr	r2, [r3, #0]
 811712e:	2300      	movs	r3, #0
 8117130:	69f9      	ldr	r1, [r7, #28]
 8117132:	2000      	movs	r0, #0
 8117134:	f7ff f8e2 	bl	81162fc <tcp_recv_null>
 8117138:	4603      	mov	r3, r0
 811713a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 811713c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8117140:	f113 0f0d 	cmn.w	r3, #13
 8117144:	d054      	beq.n	81171f0 <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8117146:	f997 3013 	ldrsb.w	r3, [r7, #19]
 811714a:	2b00      	cmp	r3, #0
 811714c:	d003      	beq.n	8117156 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 811714e:	4b2c      	ldr	r3, [pc, #176]	@ (8117200 <tcp_input+0x72c>)
 8117150:	681a      	ldr	r2, [r3, #0]
 8117152:	69fb      	ldr	r3, [r7, #28]
 8117154:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8117156:	4b2b      	ldr	r3, [pc, #172]	@ (8117204 <tcp_input+0x730>)
 8117158:	781b      	ldrb	r3, [r3, #0]
 811715a:	f003 0320 	and.w	r3, r3, #32
 811715e:	2b00      	cmp	r3, #0
 8117160:	d031      	beq.n	81171c6 <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 8117162:	69fb      	ldr	r3, [r7, #28]
 8117164:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8117166:	2b00      	cmp	r3, #0
 8117168:	d009      	beq.n	811717e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 811716a:	69fb      	ldr	r3, [r7, #28]
 811716c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 811716e:	7b5a      	ldrb	r2, [r3, #13]
 8117170:	69fb      	ldr	r3, [r7, #28]
 8117172:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8117174:	f042 0220 	orr.w	r2, r2, #32
 8117178:	b2d2      	uxtb	r2, r2
 811717a:	735a      	strb	r2, [r3, #13]
 811717c:	e023      	b.n	81171c6 <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 811717e:	69fb      	ldr	r3, [r7, #28]
 8117180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8117182:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8117186:	4293      	cmp	r3, r2
 8117188:	d005      	beq.n	8117196 <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 811718a:	69fb      	ldr	r3, [r7, #28]
 811718c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 811718e:	3301      	adds	r3, #1
 8117190:	b29a      	uxth	r2, r3
 8117192:	69fb      	ldr	r3, [r7, #28]
 8117194:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8117196:	69fb      	ldr	r3, [r7, #28]
 8117198:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 811719c:	2b00      	cmp	r3, #0
 811719e:	d00b      	beq.n	81171b8 <tcp_input+0x6e4>
 81171a0:	69fb      	ldr	r3, [r7, #28]
 81171a2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 81171a6:	69fb      	ldr	r3, [r7, #28]
 81171a8:	6918      	ldr	r0, [r3, #16]
 81171aa:	2300      	movs	r3, #0
 81171ac:	2200      	movs	r2, #0
 81171ae:	69f9      	ldr	r1, [r7, #28]
 81171b0:	47a0      	blx	r4
 81171b2:	4603      	mov	r3, r0
 81171b4:	74fb      	strb	r3, [r7, #19]
 81171b6:	e001      	b.n	81171bc <tcp_input+0x6e8>
 81171b8:	2300      	movs	r3, #0
 81171ba:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 81171bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 81171c0:	f113 0f0d 	cmn.w	r3, #13
 81171c4:	d016      	beq.n	81171f4 <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 81171c6:	4b13      	ldr	r3, [pc, #76]	@ (8117214 <tcp_input+0x740>)
 81171c8:	2200      	movs	r2, #0
 81171ca:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 81171cc:	69f8      	ldr	r0, [r7, #28]
 81171ce:	f000 f88d 	bl	81172ec <tcp_input_delayed_close>
 81171d2:	4603      	mov	r3, r0
 81171d4:	2b00      	cmp	r3, #0
 81171d6:	d127      	bne.n	8117228 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 81171d8:	69f8      	ldr	r0, [r7, #28]
 81171da:	f002 ff1b 	bl	811a014 <tcp_output>
 81171de:	e024      	b.n	811722a <tcp_input+0x756>
        goto aborted;
 81171e0:	bf00      	nop
 81171e2:	e022      	b.n	811722a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 81171e4:	bf00      	nop
 81171e6:	e020      	b.n	811722a <tcp_input+0x756>
              goto aborted;
 81171e8:	bf00      	nop
 81171ea:	e01e      	b.n	811722a <tcp_input+0x756>
          goto aborted;
 81171ec:	bf00      	nop
 81171ee:	e01c      	b.n	811722a <tcp_input+0x756>
            goto aborted;
 81171f0:	bf00      	nop
 81171f2:	e01a      	b.n	811722a <tcp_input+0x756>
              goto aborted;
 81171f4:	bf00      	nop
 81171f6:	e018      	b.n	811722a <tcp_input+0x756>
 81171f8:	10011d2c 	.word	0x10011d2c
 81171fc:	10011d3c 	.word	0x10011d3c
 8117200:	10011d5c 	.word	0x10011d5c
 8117204:	10011d59 	.word	0x10011d59
 8117208:	10011d54 	.word	0x10011d54
 811720c:	10011d58 	.word	0x10011d58
 8117210:	10011d56 	.word	0x10011d56
 8117214:	10011d60 	.word	0x10011d60
 8117218:	10011d20 	.word	0x10011d20
 811721c:	0811e888 	.word	0x0811e888
 8117220:	0811ea7c 	.word	0x0811ea7c
 8117224:	0811e914 	.word	0x0811e914
          goto aborted;
 8117228:	bf00      	nop
    tcp_input_pcb = NULL;
 811722a:	4b27      	ldr	r3, [pc, #156]	@ (81172c8 <tcp_input+0x7f4>)
 811722c:	2200      	movs	r2, #0
 811722e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8117230:	4b26      	ldr	r3, [pc, #152]	@ (81172cc <tcp_input+0x7f8>)
 8117232:	2200      	movs	r2, #0
 8117234:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8117236:	4b26      	ldr	r3, [pc, #152]	@ (81172d0 <tcp_input+0x7fc>)
 8117238:	685b      	ldr	r3, [r3, #4]
 811723a:	2b00      	cmp	r3, #0
 811723c:	d03f      	beq.n	81172be <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 811723e:	4b24      	ldr	r3, [pc, #144]	@ (81172d0 <tcp_input+0x7fc>)
 8117240:	685b      	ldr	r3, [r3, #4]
 8117242:	4618      	mov	r0, r3
 8117244:	f7fd fb40 	bl	81148c8 <pbuf_free>
      inseg.p = NULL;
 8117248:	4b21      	ldr	r3, [pc, #132]	@ (81172d0 <tcp_input+0x7fc>)
 811724a:	2200      	movs	r2, #0
 811724c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 811724e:	e036      	b.n	81172be <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8117250:	4b20      	ldr	r3, [pc, #128]	@ (81172d4 <tcp_input+0x800>)
 8117252:	681b      	ldr	r3, [r3, #0]
 8117254:	899b      	ldrh	r3, [r3, #12]
 8117256:	b29b      	uxth	r3, r3
 8117258:	4618      	mov	r0, r3
 811725a:	f7f9 fbaf 	bl	81109bc <lwip_htons>
 811725e:	4603      	mov	r3, r0
 8117260:	b2db      	uxtb	r3, r3
 8117262:	f003 0304 	and.w	r3, r3, #4
 8117266:	2b00      	cmp	r3, #0
 8117268:	d118      	bne.n	811729c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 811726a:	4b1b      	ldr	r3, [pc, #108]	@ (81172d8 <tcp_input+0x804>)
 811726c:	6819      	ldr	r1, [r3, #0]
 811726e:	4b1b      	ldr	r3, [pc, #108]	@ (81172dc <tcp_input+0x808>)
 8117270:	881b      	ldrh	r3, [r3, #0]
 8117272:	461a      	mov	r2, r3
 8117274:	4b1a      	ldr	r3, [pc, #104]	@ (81172e0 <tcp_input+0x80c>)
 8117276:	681b      	ldr	r3, [r3, #0]
 8117278:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 811727a:	4b16      	ldr	r3, [pc, #88]	@ (81172d4 <tcp_input+0x800>)
 811727c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 811727e:	885b      	ldrh	r3, [r3, #2]
 8117280:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8117282:	4a14      	ldr	r2, [pc, #80]	@ (81172d4 <tcp_input+0x800>)
 8117284:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8117286:	8812      	ldrh	r2, [r2, #0]
 8117288:	b292      	uxth	r2, r2
 811728a:	9202      	str	r2, [sp, #8]
 811728c:	9301      	str	r3, [sp, #4]
 811728e:	4b15      	ldr	r3, [pc, #84]	@ (81172e4 <tcp_input+0x810>)
 8117290:	9300      	str	r3, [sp, #0]
 8117292:	4b15      	ldr	r3, [pc, #84]	@ (81172e8 <tcp_input+0x814>)
 8117294:	4602      	mov	r2, r0
 8117296:	2000      	movs	r0, #0
 8117298:	f003 fc70 	bl	811ab7c <tcp_rst>
    pbuf_free(p);
 811729c:	6878      	ldr	r0, [r7, #4]
 811729e:	f7fd fb13 	bl	81148c8 <pbuf_free>
  return;
 81172a2:	e00c      	b.n	81172be <tcp_input+0x7ea>
    goto dropped;
 81172a4:	bf00      	nop
 81172a6:	e006      	b.n	81172b6 <tcp_input+0x7e2>
    goto dropped;
 81172a8:	bf00      	nop
 81172aa:	e004      	b.n	81172b6 <tcp_input+0x7e2>
    goto dropped;
 81172ac:	bf00      	nop
 81172ae:	e002      	b.n	81172b6 <tcp_input+0x7e2>
      goto dropped;
 81172b0:	bf00      	nop
 81172b2:	e000      	b.n	81172b6 <tcp_input+0x7e2>
      goto dropped;
 81172b4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 81172b6:	6878      	ldr	r0, [r7, #4]
 81172b8:	f7fd fb06 	bl	81148c8 <pbuf_free>
 81172bc:	e000      	b.n	81172c0 <tcp_input+0x7ec>
  return;
 81172be:	bf00      	nop
}
 81172c0:	3724      	adds	r7, #36	@ 0x24
 81172c2:	46bd      	mov	sp, r7
 81172c4:	bd90      	pop	{r4, r7, pc}
 81172c6:	bf00      	nop
 81172c8:	10011d60 	.word	0x10011d60
 81172cc:	10011d5c 	.word	0x10011d5c
 81172d0:	10011d2c 	.word	0x10011d2c
 81172d4:	10011d3c 	.word	0x10011d3c
 81172d8:	10011d50 	.word	0x10011d50
 81172dc:	10011d56 	.word	0x10011d56
 81172e0:	10011d4c 	.word	0x10011d4c
 81172e4:	1000b254 	.word	0x1000b254
 81172e8:	1000b258 	.word	0x1000b258

081172ec <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 81172ec:	b580      	push	{r7, lr}
 81172ee:	b082      	sub	sp, #8
 81172f0:	af00      	add	r7, sp, #0
 81172f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 81172f4:	687b      	ldr	r3, [r7, #4]
 81172f6:	2b00      	cmp	r3, #0
 81172f8:	d106      	bne.n	8117308 <tcp_input_delayed_close+0x1c>
 81172fa:	4b17      	ldr	r3, [pc, #92]	@ (8117358 <tcp_input_delayed_close+0x6c>)
 81172fc:	f240 225a 	movw	r2, #602	@ 0x25a
 8117300:	4916      	ldr	r1, [pc, #88]	@ (811735c <tcp_input_delayed_close+0x70>)
 8117302:	4817      	ldr	r0, [pc, #92]	@ (8117360 <tcp_input_delayed_close+0x74>)
 8117304:	f004 fda2 	bl	811be4c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8117308:	4b16      	ldr	r3, [pc, #88]	@ (8117364 <tcp_input_delayed_close+0x78>)
 811730a:	781b      	ldrb	r3, [r3, #0]
 811730c:	f003 0310 	and.w	r3, r3, #16
 8117310:	2b00      	cmp	r3, #0
 8117312:	d01c      	beq.n	811734e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8117314:	687b      	ldr	r3, [r7, #4]
 8117316:	8b5b      	ldrh	r3, [r3, #26]
 8117318:	f003 0310 	and.w	r3, r3, #16
 811731c:	2b00      	cmp	r3, #0
 811731e:	d10d      	bne.n	811733c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8117320:	687b      	ldr	r3, [r7, #4]
 8117322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8117326:	2b00      	cmp	r3, #0
 8117328:	d008      	beq.n	811733c <tcp_input_delayed_close+0x50>
 811732a:	687b      	ldr	r3, [r7, #4]
 811732c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8117330:	687a      	ldr	r2, [r7, #4]
 8117332:	6912      	ldr	r2, [r2, #16]
 8117334:	f06f 010e 	mvn.w	r1, #14
 8117338:	4610      	mov	r0, r2
 811733a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 811733c:	6879      	ldr	r1, [r7, #4]
 811733e:	480a      	ldr	r0, [pc, #40]	@ (8117368 <tcp_input_delayed_close+0x7c>)
 8117340:	f7ff fa50 	bl	81167e4 <tcp_pcb_remove>
    tcp_free(pcb);
 8117344:	6878      	ldr	r0, [r7, #4]
 8117346:	f7fd fe5d 	bl	8115004 <tcp_free>
    return 1;
 811734a:	2301      	movs	r3, #1
 811734c:	e000      	b.n	8117350 <tcp_input_delayed_close+0x64>
  }
  return 0;
 811734e:	2300      	movs	r3, #0
}
 8117350:	4618      	mov	r0, r3
 8117352:	3708      	adds	r7, #8
 8117354:	46bd      	mov	sp, r7
 8117356:	bd80      	pop	{r7, pc}
 8117358:	0811e888 	.word	0x0811e888
 811735c:	0811ea98 	.word	0x0811ea98
 8117360:	0811e914 	.word	0x0811e914
 8117364:	10011d59 	.word	0x10011d59
 8117368:	10011d20 	.word	0x10011d20

0811736c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 811736c:	b590      	push	{r4, r7, lr}
 811736e:	b08b      	sub	sp, #44	@ 0x2c
 8117370:	af04      	add	r7, sp, #16
 8117372:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8117374:	4b6f      	ldr	r3, [pc, #444]	@ (8117534 <tcp_listen_input+0x1c8>)
 8117376:	781b      	ldrb	r3, [r3, #0]
 8117378:	f003 0304 	and.w	r3, r3, #4
 811737c:	2b00      	cmp	r3, #0
 811737e:	f040 80d2 	bne.w	8117526 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8117382:	687b      	ldr	r3, [r7, #4]
 8117384:	2b00      	cmp	r3, #0
 8117386:	d106      	bne.n	8117396 <tcp_listen_input+0x2a>
 8117388:	4b6b      	ldr	r3, [pc, #428]	@ (8117538 <tcp_listen_input+0x1cc>)
 811738a:	f240 2281 	movw	r2, #641	@ 0x281
 811738e:	496b      	ldr	r1, [pc, #428]	@ (811753c <tcp_listen_input+0x1d0>)
 8117390:	486b      	ldr	r0, [pc, #428]	@ (8117540 <tcp_listen_input+0x1d4>)
 8117392:	f004 fd5b 	bl	811be4c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8117396:	4b67      	ldr	r3, [pc, #412]	@ (8117534 <tcp_listen_input+0x1c8>)
 8117398:	781b      	ldrb	r3, [r3, #0]
 811739a:	f003 0310 	and.w	r3, r3, #16
 811739e:	2b00      	cmp	r3, #0
 81173a0:	d019      	beq.n	81173d6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 81173a2:	4b68      	ldr	r3, [pc, #416]	@ (8117544 <tcp_listen_input+0x1d8>)
 81173a4:	6819      	ldr	r1, [r3, #0]
 81173a6:	4b68      	ldr	r3, [pc, #416]	@ (8117548 <tcp_listen_input+0x1dc>)
 81173a8:	881b      	ldrh	r3, [r3, #0]
 81173aa:	461a      	mov	r2, r3
 81173ac:	4b67      	ldr	r3, [pc, #412]	@ (811754c <tcp_listen_input+0x1e0>)
 81173ae:	681b      	ldr	r3, [r3, #0]
 81173b0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 81173b2:	4b67      	ldr	r3, [pc, #412]	@ (8117550 <tcp_listen_input+0x1e4>)
 81173b4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 81173b6:	885b      	ldrh	r3, [r3, #2]
 81173b8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 81173ba:	4a65      	ldr	r2, [pc, #404]	@ (8117550 <tcp_listen_input+0x1e4>)
 81173bc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 81173be:	8812      	ldrh	r2, [r2, #0]
 81173c0:	b292      	uxth	r2, r2
 81173c2:	9202      	str	r2, [sp, #8]
 81173c4:	9301      	str	r3, [sp, #4]
 81173c6:	4b63      	ldr	r3, [pc, #396]	@ (8117554 <tcp_listen_input+0x1e8>)
 81173c8:	9300      	str	r3, [sp, #0]
 81173ca:	4b63      	ldr	r3, [pc, #396]	@ (8117558 <tcp_listen_input+0x1ec>)
 81173cc:	4602      	mov	r2, r0
 81173ce:	6878      	ldr	r0, [r7, #4]
 81173d0:	f003 fbd4 	bl	811ab7c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 81173d4:	e0a9      	b.n	811752a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 81173d6:	4b57      	ldr	r3, [pc, #348]	@ (8117534 <tcp_listen_input+0x1c8>)
 81173d8:	781b      	ldrb	r3, [r3, #0]
 81173da:	f003 0302 	and.w	r3, r3, #2
 81173de:	2b00      	cmp	r3, #0
 81173e0:	f000 80a3 	beq.w	811752a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 81173e4:	687b      	ldr	r3, [r7, #4]
 81173e6:	7d5b      	ldrb	r3, [r3, #21]
 81173e8:	4618      	mov	r0, r3
 81173ea:	f7ff f8ab 	bl	8116544 <tcp_alloc>
 81173ee:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 81173f0:	697b      	ldr	r3, [r7, #20]
 81173f2:	2b00      	cmp	r3, #0
 81173f4:	d111      	bne.n	811741a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 81173f6:	687b      	ldr	r3, [r7, #4]
 81173f8:	699b      	ldr	r3, [r3, #24]
 81173fa:	2b00      	cmp	r3, #0
 81173fc:	d00a      	beq.n	8117414 <tcp_listen_input+0xa8>
 81173fe:	687b      	ldr	r3, [r7, #4]
 8117400:	699b      	ldr	r3, [r3, #24]
 8117402:	687a      	ldr	r2, [r7, #4]
 8117404:	6910      	ldr	r0, [r2, #16]
 8117406:	f04f 32ff 	mov.w	r2, #4294967295
 811740a:	2100      	movs	r1, #0
 811740c:	4798      	blx	r3
 811740e:	4603      	mov	r3, r0
 8117410:	73bb      	strb	r3, [r7, #14]
      return;
 8117412:	e08b      	b.n	811752c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8117414:	23f0      	movs	r3, #240	@ 0xf0
 8117416:	73bb      	strb	r3, [r7, #14]
      return;
 8117418:	e088      	b.n	811752c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 811741a:	4b50      	ldr	r3, [pc, #320]	@ (811755c <tcp_listen_input+0x1f0>)
 811741c:	695a      	ldr	r2, [r3, #20]
 811741e:	697b      	ldr	r3, [r7, #20]
 8117420:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8117422:	4b4e      	ldr	r3, [pc, #312]	@ (811755c <tcp_listen_input+0x1f0>)
 8117424:	691a      	ldr	r2, [r3, #16]
 8117426:	697b      	ldr	r3, [r7, #20]
 8117428:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 811742a:	687b      	ldr	r3, [r7, #4]
 811742c:	8ada      	ldrh	r2, [r3, #22]
 811742e:	697b      	ldr	r3, [r7, #20]
 8117430:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8117432:	4b47      	ldr	r3, [pc, #284]	@ (8117550 <tcp_listen_input+0x1e4>)
 8117434:	681b      	ldr	r3, [r3, #0]
 8117436:	881b      	ldrh	r3, [r3, #0]
 8117438:	b29a      	uxth	r2, r3
 811743a:	697b      	ldr	r3, [r7, #20]
 811743c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 811743e:	697b      	ldr	r3, [r7, #20]
 8117440:	2203      	movs	r2, #3
 8117442:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8117444:	4b41      	ldr	r3, [pc, #260]	@ (811754c <tcp_listen_input+0x1e0>)
 8117446:	681b      	ldr	r3, [r3, #0]
 8117448:	1c5a      	adds	r2, r3, #1
 811744a:	697b      	ldr	r3, [r7, #20]
 811744c:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 811744e:	697b      	ldr	r3, [r7, #20]
 8117450:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8117452:	697b      	ldr	r3, [r7, #20]
 8117454:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8117456:	6978      	ldr	r0, [r7, #20]
 8117458:	f7ff fa58 	bl	811690c <tcp_next_iss>
 811745c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 811745e:	697b      	ldr	r3, [r7, #20]
 8117460:	693a      	ldr	r2, [r7, #16]
 8117462:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8117464:	697b      	ldr	r3, [r7, #20]
 8117466:	693a      	ldr	r2, [r7, #16]
 8117468:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 811746a:	697b      	ldr	r3, [r7, #20]
 811746c:	693a      	ldr	r2, [r7, #16]
 811746e:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8117470:	697b      	ldr	r3, [r7, #20]
 8117472:	693a      	ldr	r2, [r7, #16]
 8117474:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8117476:	4b35      	ldr	r3, [pc, #212]	@ (811754c <tcp_listen_input+0x1e0>)
 8117478:	681b      	ldr	r3, [r3, #0]
 811747a:	1e5a      	subs	r2, r3, #1
 811747c:	697b      	ldr	r3, [r7, #20]
 811747e:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8117480:	687b      	ldr	r3, [r7, #4]
 8117482:	691a      	ldr	r2, [r3, #16]
 8117484:	697b      	ldr	r3, [r7, #20]
 8117486:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8117488:	697b      	ldr	r3, [r7, #20]
 811748a:	687a      	ldr	r2, [r7, #4]
 811748c:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 811748e:	687b      	ldr	r3, [r7, #4]
 8117490:	7a5b      	ldrb	r3, [r3, #9]
 8117492:	f003 030c 	and.w	r3, r3, #12
 8117496:	b2da      	uxtb	r2, r3
 8117498:	697b      	ldr	r3, [r7, #20]
 811749a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 811749c:	687b      	ldr	r3, [r7, #4]
 811749e:	7a1a      	ldrb	r2, [r3, #8]
 81174a0:	697b      	ldr	r3, [r7, #20]
 81174a2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 81174a4:	4b2e      	ldr	r3, [pc, #184]	@ (8117560 <tcp_listen_input+0x1f4>)
 81174a6:	681a      	ldr	r2, [r3, #0]
 81174a8:	697b      	ldr	r3, [r7, #20]
 81174aa:	60da      	str	r2, [r3, #12]
 81174ac:	4a2c      	ldr	r2, [pc, #176]	@ (8117560 <tcp_listen_input+0x1f4>)
 81174ae:	697b      	ldr	r3, [r7, #20]
 81174b0:	6013      	str	r3, [r2, #0]
 81174b2:	f003 fec7 	bl	811b244 <tcp_timer_needed>
 81174b6:	4b2b      	ldr	r3, [pc, #172]	@ (8117564 <tcp_listen_input+0x1f8>)
 81174b8:	2201      	movs	r2, #1
 81174ba:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 81174bc:	6978      	ldr	r0, [r7, #20]
 81174be:	f001 fd8b 	bl	8118fd8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 81174c2:	4b23      	ldr	r3, [pc, #140]	@ (8117550 <tcp_listen_input+0x1e4>)
 81174c4:	681b      	ldr	r3, [r3, #0]
 81174c6:	89db      	ldrh	r3, [r3, #14]
 81174c8:	b29a      	uxth	r2, r3
 81174ca:	697b      	ldr	r3, [r7, #20]
 81174cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 81174d0:	697b      	ldr	r3, [r7, #20]
 81174d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 81174d6:	697b      	ldr	r3, [r7, #20]
 81174d8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 81174dc:	697b      	ldr	r3, [r7, #20]
 81174de:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 81174e0:	697b      	ldr	r3, [r7, #20]
 81174e2:	3304      	adds	r3, #4
 81174e4:	4618      	mov	r0, r3
 81174e6:	f7fa fd41 	bl	8111f6c <ip4_route>
 81174ea:	4601      	mov	r1, r0
 81174ec:	697b      	ldr	r3, [r7, #20]
 81174ee:	3304      	adds	r3, #4
 81174f0:	461a      	mov	r2, r3
 81174f2:	4620      	mov	r0, r4
 81174f4:	f7ff fa30 	bl	8116958 <tcp_eff_send_mss_netif>
 81174f8:	4603      	mov	r3, r0
 81174fa:	461a      	mov	r2, r3
 81174fc:	697b      	ldr	r3, [r7, #20]
 81174fe:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8117500:	2112      	movs	r1, #18
 8117502:	6978      	ldr	r0, [r7, #20]
 8117504:	f002 fc98 	bl	8119e38 <tcp_enqueue_flags>
 8117508:	4603      	mov	r3, r0
 811750a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 811750c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8117510:	2b00      	cmp	r3, #0
 8117512:	d004      	beq.n	811751e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8117514:	2100      	movs	r1, #0
 8117516:	6978      	ldr	r0, [r7, #20]
 8117518:	f7fd ff9e 	bl	8115458 <tcp_abandon>
      return;
 811751c:	e006      	b.n	811752c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 811751e:	6978      	ldr	r0, [r7, #20]
 8117520:	f002 fd78 	bl	811a014 <tcp_output>
  return;
 8117524:	e001      	b.n	811752a <tcp_listen_input+0x1be>
    return;
 8117526:	bf00      	nop
 8117528:	e000      	b.n	811752c <tcp_listen_input+0x1c0>
  return;
 811752a:	bf00      	nop
}
 811752c:	371c      	adds	r7, #28
 811752e:	46bd      	mov	sp, r7
 8117530:	bd90      	pop	{r4, r7, pc}
 8117532:	bf00      	nop
 8117534:	10011d58 	.word	0x10011d58
 8117538:	0811e888 	.word	0x0811e888
 811753c:	0811eac0 	.word	0x0811eac0
 8117540:	0811e914 	.word	0x0811e914
 8117544:	10011d50 	.word	0x10011d50
 8117548:	10011d56 	.word	0x10011d56
 811754c:	10011d4c 	.word	0x10011d4c
 8117550:	10011d3c 	.word	0x10011d3c
 8117554:	1000b254 	.word	0x1000b254
 8117558:	1000b258 	.word	0x1000b258
 811755c:	1000b244 	.word	0x1000b244
 8117560:	10011d20 	.word	0x10011d20
 8117564:	10011d28 	.word	0x10011d28

08117568 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8117568:	b580      	push	{r7, lr}
 811756a:	b086      	sub	sp, #24
 811756c:	af04      	add	r7, sp, #16
 811756e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8117570:	4b2f      	ldr	r3, [pc, #188]	@ (8117630 <tcp_timewait_input+0xc8>)
 8117572:	781b      	ldrb	r3, [r3, #0]
 8117574:	f003 0304 	and.w	r3, r3, #4
 8117578:	2b00      	cmp	r3, #0
 811757a:	d153      	bne.n	8117624 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 811757c:	687b      	ldr	r3, [r7, #4]
 811757e:	2b00      	cmp	r3, #0
 8117580:	d106      	bne.n	8117590 <tcp_timewait_input+0x28>
 8117582:	4b2c      	ldr	r3, [pc, #176]	@ (8117634 <tcp_timewait_input+0xcc>)
 8117584:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8117588:	492b      	ldr	r1, [pc, #172]	@ (8117638 <tcp_timewait_input+0xd0>)
 811758a:	482c      	ldr	r0, [pc, #176]	@ (811763c <tcp_timewait_input+0xd4>)
 811758c:	f004 fc5e 	bl	811be4c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8117590:	4b27      	ldr	r3, [pc, #156]	@ (8117630 <tcp_timewait_input+0xc8>)
 8117592:	781b      	ldrb	r3, [r3, #0]
 8117594:	f003 0302 	and.w	r3, r3, #2
 8117598:	2b00      	cmp	r3, #0
 811759a:	d02a      	beq.n	81175f2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 811759c:	4b28      	ldr	r3, [pc, #160]	@ (8117640 <tcp_timewait_input+0xd8>)
 811759e:	681a      	ldr	r2, [r3, #0]
 81175a0:	687b      	ldr	r3, [r7, #4]
 81175a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81175a4:	1ad3      	subs	r3, r2, r3
 81175a6:	2b00      	cmp	r3, #0
 81175a8:	db2d      	blt.n	8117606 <tcp_timewait_input+0x9e>
 81175aa:	4b25      	ldr	r3, [pc, #148]	@ (8117640 <tcp_timewait_input+0xd8>)
 81175ac:	681a      	ldr	r2, [r3, #0]
 81175ae:	687b      	ldr	r3, [r7, #4]
 81175b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81175b2:	6879      	ldr	r1, [r7, #4]
 81175b4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 81175b6:	440b      	add	r3, r1
 81175b8:	1ad3      	subs	r3, r2, r3
 81175ba:	2b00      	cmp	r3, #0
 81175bc:	dc23      	bgt.n	8117606 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 81175be:	4b21      	ldr	r3, [pc, #132]	@ (8117644 <tcp_timewait_input+0xdc>)
 81175c0:	6819      	ldr	r1, [r3, #0]
 81175c2:	4b21      	ldr	r3, [pc, #132]	@ (8117648 <tcp_timewait_input+0xe0>)
 81175c4:	881b      	ldrh	r3, [r3, #0]
 81175c6:	461a      	mov	r2, r3
 81175c8:	4b1d      	ldr	r3, [pc, #116]	@ (8117640 <tcp_timewait_input+0xd8>)
 81175ca:	681b      	ldr	r3, [r3, #0]
 81175cc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 81175ce:	4b1f      	ldr	r3, [pc, #124]	@ (811764c <tcp_timewait_input+0xe4>)
 81175d0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 81175d2:	885b      	ldrh	r3, [r3, #2]
 81175d4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 81175d6:	4a1d      	ldr	r2, [pc, #116]	@ (811764c <tcp_timewait_input+0xe4>)
 81175d8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 81175da:	8812      	ldrh	r2, [r2, #0]
 81175dc:	b292      	uxth	r2, r2
 81175de:	9202      	str	r2, [sp, #8]
 81175e0:	9301      	str	r3, [sp, #4]
 81175e2:	4b1b      	ldr	r3, [pc, #108]	@ (8117650 <tcp_timewait_input+0xe8>)
 81175e4:	9300      	str	r3, [sp, #0]
 81175e6:	4b1b      	ldr	r3, [pc, #108]	@ (8117654 <tcp_timewait_input+0xec>)
 81175e8:	4602      	mov	r2, r0
 81175ea:	6878      	ldr	r0, [r7, #4]
 81175ec:	f003 fac6 	bl	811ab7c <tcp_rst>
      return;
 81175f0:	e01b      	b.n	811762a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 81175f2:	4b0f      	ldr	r3, [pc, #60]	@ (8117630 <tcp_timewait_input+0xc8>)
 81175f4:	781b      	ldrb	r3, [r3, #0]
 81175f6:	f003 0301 	and.w	r3, r3, #1
 81175fa:	2b00      	cmp	r3, #0
 81175fc:	d003      	beq.n	8117606 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 81175fe:	4b16      	ldr	r3, [pc, #88]	@ (8117658 <tcp_timewait_input+0xf0>)
 8117600:	681a      	ldr	r2, [r3, #0]
 8117602:	687b      	ldr	r3, [r7, #4]
 8117604:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8117606:	4b10      	ldr	r3, [pc, #64]	@ (8117648 <tcp_timewait_input+0xe0>)
 8117608:	881b      	ldrh	r3, [r3, #0]
 811760a:	2b00      	cmp	r3, #0
 811760c:	d00c      	beq.n	8117628 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 811760e:	687b      	ldr	r3, [r7, #4]
 8117610:	8b5b      	ldrh	r3, [r3, #26]
 8117612:	f043 0302 	orr.w	r3, r3, #2
 8117616:	b29a      	uxth	r2, r3
 8117618:	687b      	ldr	r3, [r7, #4]
 811761a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 811761c:	6878      	ldr	r0, [r7, #4]
 811761e:	f002 fcf9 	bl	811a014 <tcp_output>
  }
  return;
 8117622:	e001      	b.n	8117628 <tcp_timewait_input+0xc0>
    return;
 8117624:	bf00      	nop
 8117626:	e000      	b.n	811762a <tcp_timewait_input+0xc2>
  return;
 8117628:	bf00      	nop
}
 811762a:	3708      	adds	r7, #8
 811762c:	46bd      	mov	sp, r7
 811762e:	bd80      	pop	{r7, pc}
 8117630:	10011d58 	.word	0x10011d58
 8117634:	0811e888 	.word	0x0811e888
 8117638:	0811eae0 	.word	0x0811eae0
 811763c:	0811e914 	.word	0x0811e914
 8117640:	10011d4c 	.word	0x10011d4c
 8117644:	10011d50 	.word	0x10011d50
 8117648:	10011d56 	.word	0x10011d56
 811764c:	10011d3c 	.word	0x10011d3c
 8117650:	1000b254 	.word	0x1000b254
 8117654:	1000b258 	.word	0x1000b258
 8117658:	10011d14 	.word	0x10011d14

0811765c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 811765c:	b590      	push	{r4, r7, lr}
 811765e:	b08d      	sub	sp, #52	@ 0x34
 8117660:	af04      	add	r7, sp, #16
 8117662:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8117664:	2300      	movs	r3, #0
 8117666:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8117668:	2300      	movs	r3, #0
 811766a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 811766c:	687b      	ldr	r3, [r7, #4]
 811766e:	2b00      	cmp	r3, #0
 8117670:	d106      	bne.n	8117680 <tcp_process+0x24>
 8117672:	4b9d      	ldr	r3, [pc, #628]	@ (81178e8 <tcp_process+0x28c>)
 8117674:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8117678:	499c      	ldr	r1, [pc, #624]	@ (81178ec <tcp_process+0x290>)
 811767a:	489d      	ldr	r0, [pc, #628]	@ (81178f0 <tcp_process+0x294>)
 811767c:	f004 fbe6 	bl	811be4c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8117680:	4b9c      	ldr	r3, [pc, #624]	@ (81178f4 <tcp_process+0x298>)
 8117682:	781b      	ldrb	r3, [r3, #0]
 8117684:	f003 0304 	and.w	r3, r3, #4
 8117688:	2b00      	cmp	r3, #0
 811768a:	d04e      	beq.n	811772a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 811768c:	687b      	ldr	r3, [r7, #4]
 811768e:	7d1b      	ldrb	r3, [r3, #20]
 8117690:	2b02      	cmp	r3, #2
 8117692:	d108      	bne.n	81176a6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8117694:	687b      	ldr	r3, [r7, #4]
 8117696:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8117698:	4b97      	ldr	r3, [pc, #604]	@ (81178f8 <tcp_process+0x29c>)
 811769a:	681b      	ldr	r3, [r3, #0]
 811769c:	429a      	cmp	r2, r3
 811769e:	d123      	bne.n	81176e8 <tcp_process+0x8c>
        acceptable = 1;
 81176a0:	2301      	movs	r3, #1
 81176a2:	76fb      	strb	r3, [r7, #27]
 81176a4:	e020      	b.n	81176e8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 81176a6:	687b      	ldr	r3, [r7, #4]
 81176a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81176aa:	4b94      	ldr	r3, [pc, #592]	@ (81178fc <tcp_process+0x2a0>)
 81176ac:	681b      	ldr	r3, [r3, #0]
 81176ae:	429a      	cmp	r2, r3
 81176b0:	d102      	bne.n	81176b8 <tcp_process+0x5c>
        acceptable = 1;
 81176b2:	2301      	movs	r3, #1
 81176b4:	76fb      	strb	r3, [r7, #27]
 81176b6:	e017      	b.n	81176e8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 81176b8:	4b90      	ldr	r3, [pc, #576]	@ (81178fc <tcp_process+0x2a0>)
 81176ba:	681a      	ldr	r2, [r3, #0]
 81176bc:	687b      	ldr	r3, [r7, #4]
 81176be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81176c0:	1ad3      	subs	r3, r2, r3
 81176c2:	2b00      	cmp	r3, #0
 81176c4:	db10      	blt.n	81176e8 <tcp_process+0x8c>
 81176c6:	4b8d      	ldr	r3, [pc, #564]	@ (81178fc <tcp_process+0x2a0>)
 81176c8:	681a      	ldr	r2, [r3, #0]
 81176ca:	687b      	ldr	r3, [r7, #4]
 81176cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81176ce:	6879      	ldr	r1, [r7, #4]
 81176d0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 81176d2:	440b      	add	r3, r1
 81176d4:	1ad3      	subs	r3, r2, r3
 81176d6:	2b00      	cmp	r3, #0
 81176d8:	dc06      	bgt.n	81176e8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 81176da:	687b      	ldr	r3, [r7, #4]
 81176dc:	8b5b      	ldrh	r3, [r3, #26]
 81176de:	f043 0302 	orr.w	r3, r3, #2
 81176e2:	b29a      	uxth	r2, r3
 81176e4:	687b      	ldr	r3, [r7, #4]
 81176e6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 81176e8:	7efb      	ldrb	r3, [r7, #27]
 81176ea:	2b00      	cmp	r3, #0
 81176ec:	d01b      	beq.n	8117726 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 81176ee:	687b      	ldr	r3, [r7, #4]
 81176f0:	7d1b      	ldrb	r3, [r3, #20]
 81176f2:	2b00      	cmp	r3, #0
 81176f4:	d106      	bne.n	8117704 <tcp_process+0xa8>
 81176f6:	4b7c      	ldr	r3, [pc, #496]	@ (81178e8 <tcp_process+0x28c>)
 81176f8:	f44f 724e 	mov.w	r2, #824	@ 0x338
 81176fc:	4980      	ldr	r1, [pc, #512]	@ (8117900 <tcp_process+0x2a4>)
 81176fe:	487c      	ldr	r0, [pc, #496]	@ (81178f0 <tcp_process+0x294>)
 8117700:	f004 fba4 	bl	811be4c <iprintf>
      recv_flags |= TF_RESET;
 8117704:	4b7f      	ldr	r3, [pc, #508]	@ (8117904 <tcp_process+0x2a8>)
 8117706:	781b      	ldrb	r3, [r3, #0]
 8117708:	f043 0308 	orr.w	r3, r3, #8
 811770c:	b2da      	uxtb	r2, r3
 811770e:	4b7d      	ldr	r3, [pc, #500]	@ (8117904 <tcp_process+0x2a8>)
 8117710:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8117712:	687b      	ldr	r3, [r7, #4]
 8117714:	8b5b      	ldrh	r3, [r3, #26]
 8117716:	f023 0301 	bic.w	r3, r3, #1
 811771a:	b29a      	uxth	r2, r3
 811771c:	687b      	ldr	r3, [r7, #4]
 811771e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8117720:	f06f 030d 	mvn.w	r3, #13
 8117724:	e37a      	b.n	8117e1c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8117726:	2300      	movs	r3, #0
 8117728:	e378      	b.n	8117e1c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 811772a:	4b72      	ldr	r3, [pc, #456]	@ (81178f4 <tcp_process+0x298>)
 811772c:	781b      	ldrb	r3, [r3, #0]
 811772e:	f003 0302 	and.w	r3, r3, #2
 8117732:	2b00      	cmp	r3, #0
 8117734:	d010      	beq.n	8117758 <tcp_process+0xfc>
 8117736:	687b      	ldr	r3, [r7, #4]
 8117738:	7d1b      	ldrb	r3, [r3, #20]
 811773a:	2b02      	cmp	r3, #2
 811773c:	d00c      	beq.n	8117758 <tcp_process+0xfc>
 811773e:	687b      	ldr	r3, [r7, #4]
 8117740:	7d1b      	ldrb	r3, [r3, #20]
 8117742:	2b03      	cmp	r3, #3
 8117744:	d008      	beq.n	8117758 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8117746:	687b      	ldr	r3, [r7, #4]
 8117748:	8b5b      	ldrh	r3, [r3, #26]
 811774a:	f043 0302 	orr.w	r3, r3, #2
 811774e:	b29a      	uxth	r2, r3
 8117750:	687b      	ldr	r3, [r7, #4]
 8117752:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8117754:	2300      	movs	r3, #0
 8117756:	e361      	b.n	8117e1c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8117758:	687b      	ldr	r3, [r7, #4]
 811775a:	8b5b      	ldrh	r3, [r3, #26]
 811775c:	f003 0310 	and.w	r3, r3, #16
 8117760:	2b00      	cmp	r3, #0
 8117762:	d103      	bne.n	811776c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8117764:	4b68      	ldr	r3, [pc, #416]	@ (8117908 <tcp_process+0x2ac>)
 8117766:	681a      	ldr	r2, [r3, #0]
 8117768:	687b      	ldr	r3, [r7, #4]
 811776a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 811776c:	687b      	ldr	r3, [r7, #4]
 811776e:	2200      	movs	r2, #0
 8117770:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8117774:	687b      	ldr	r3, [r7, #4]
 8117776:	2200      	movs	r2, #0
 8117778:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 811777c:	6878      	ldr	r0, [r7, #4]
 811777e:	f001 fc2b 	bl	8118fd8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8117782:	687b      	ldr	r3, [r7, #4]
 8117784:	7d1b      	ldrb	r3, [r3, #20]
 8117786:	3b02      	subs	r3, #2
 8117788:	2b07      	cmp	r3, #7
 811778a:	f200 8337 	bhi.w	8117dfc <tcp_process+0x7a0>
 811778e:	a201      	add	r2, pc, #4	@ (adr r2, 8117794 <tcp_process+0x138>)
 8117790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8117794:	081177b5 	.word	0x081177b5
 8117798:	081179e5 	.word	0x081179e5
 811779c:	08117b5d 	.word	0x08117b5d
 81177a0:	08117b87 	.word	0x08117b87
 81177a4:	08117cab 	.word	0x08117cab
 81177a8:	08117b5d 	.word	0x08117b5d
 81177ac:	08117d37 	.word	0x08117d37
 81177b0:	08117dc7 	.word	0x08117dc7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 81177b4:	4b4f      	ldr	r3, [pc, #316]	@ (81178f4 <tcp_process+0x298>)
 81177b6:	781b      	ldrb	r3, [r3, #0]
 81177b8:	f003 0310 	and.w	r3, r3, #16
 81177bc:	2b00      	cmp	r3, #0
 81177be:	f000 80e4 	beq.w	811798a <tcp_process+0x32e>
 81177c2:	4b4c      	ldr	r3, [pc, #304]	@ (81178f4 <tcp_process+0x298>)
 81177c4:	781b      	ldrb	r3, [r3, #0]
 81177c6:	f003 0302 	and.w	r3, r3, #2
 81177ca:	2b00      	cmp	r3, #0
 81177cc:	f000 80dd 	beq.w	811798a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 81177d0:	687b      	ldr	r3, [r7, #4]
 81177d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81177d4:	1c5a      	adds	r2, r3, #1
 81177d6:	4b48      	ldr	r3, [pc, #288]	@ (81178f8 <tcp_process+0x29c>)
 81177d8:	681b      	ldr	r3, [r3, #0]
 81177da:	429a      	cmp	r2, r3
 81177dc:	f040 80d5 	bne.w	811798a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 81177e0:	4b46      	ldr	r3, [pc, #280]	@ (81178fc <tcp_process+0x2a0>)
 81177e2:	681b      	ldr	r3, [r3, #0]
 81177e4:	1c5a      	adds	r2, r3, #1
 81177e6:	687b      	ldr	r3, [r7, #4]
 81177e8:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 81177ea:	687b      	ldr	r3, [r7, #4]
 81177ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81177ee:	687b      	ldr	r3, [r7, #4]
 81177f0:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 81177f2:	4b41      	ldr	r3, [pc, #260]	@ (81178f8 <tcp_process+0x29c>)
 81177f4:	681a      	ldr	r2, [r3, #0]
 81177f6:	687b      	ldr	r3, [r7, #4]
 81177f8:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 81177fa:	4b44      	ldr	r3, [pc, #272]	@ (811790c <tcp_process+0x2b0>)
 81177fc:	681b      	ldr	r3, [r3, #0]
 81177fe:	89db      	ldrh	r3, [r3, #14]
 8117800:	b29a      	uxth	r2, r3
 8117802:	687b      	ldr	r3, [r7, #4]
 8117804:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8117808:	687b      	ldr	r3, [r7, #4]
 811780a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 811780e:	687b      	ldr	r3, [r7, #4]
 8117810:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8117814:	4b39      	ldr	r3, [pc, #228]	@ (81178fc <tcp_process+0x2a0>)
 8117816:	681b      	ldr	r3, [r3, #0]
 8117818:	1e5a      	subs	r2, r3, #1
 811781a:	687b      	ldr	r3, [r7, #4]
 811781c:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 811781e:	687b      	ldr	r3, [r7, #4]
 8117820:	2204      	movs	r2, #4
 8117822:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8117824:	687b      	ldr	r3, [r7, #4]
 8117826:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8117828:	687b      	ldr	r3, [r7, #4]
 811782a:	3304      	adds	r3, #4
 811782c:	4618      	mov	r0, r3
 811782e:	f7fa fb9d 	bl	8111f6c <ip4_route>
 8117832:	4601      	mov	r1, r0
 8117834:	687b      	ldr	r3, [r7, #4]
 8117836:	3304      	adds	r3, #4
 8117838:	461a      	mov	r2, r3
 811783a:	4620      	mov	r0, r4
 811783c:	f7ff f88c 	bl	8116958 <tcp_eff_send_mss_netif>
 8117840:	4603      	mov	r3, r0
 8117842:	461a      	mov	r2, r3
 8117844:	687b      	ldr	r3, [r7, #4]
 8117846:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8117848:	687b      	ldr	r3, [r7, #4]
 811784a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811784c:	009a      	lsls	r2, r3, #2
 811784e:	687b      	ldr	r3, [r7, #4]
 8117850:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8117852:	005b      	lsls	r3, r3, #1
 8117854:	f241 111c 	movw	r1, #4380	@ 0x111c
 8117858:	428b      	cmp	r3, r1
 811785a:	bf38      	it	cc
 811785c:	460b      	movcc	r3, r1
 811785e:	429a      	cmp	r2, r3
 8117860:	d204      	bcs.n	811786c <tcp_process+0x210>
 8117862:	687b      	ldr	r3, [r7, #4]
 8117864:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8117866:	009b      	lsls	r3, r3, #2
 8117868:	b29b      	uxth	r3, r3
 811786a:	e00d      	b.n	8117888 <tcp_process+0x22c>
 811786c:	687b      	ldr	r3, [r7, #4]
 811786e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8117870:	005b      	lsls	r3, r3, #1
 8117872:	f241 121c 	movw	r2, #4380	@ 0x111c
 8117876:	4293      	cmp	r3, r2
 8117878:	d904      	bls.n	8117884 <tcp_process+0x228>
 811787a:	687b      	ldr	r3, [r7, #4]
 811787c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811787e:	005b      	lsls	r3, r3, #1
 8117880:	b29b      	uxth	r3, r3
 8117882:	e001      	b.n	8117888 <tcp_process+0x22c>
 8117884:	f241 131c 	movw	r3, #4380	@ 0x111c
 8117888:	687a      	ldr	r2, [r7, #4]
 811788a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 811788e:	687b      	ldr	r3, [r7, #4]
 8117890:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8117894:	2b00      	cmp	r3, #0
 8117896:	d106      	bne.n	81178a6 <tcp_process+0x24a>
 8117898:	4b13      	ldr	r3, [pc, #76]	@ (81178e8 <tcp_process+0x28c>)
 811789a:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 811789e:	491c      	ldr	r1, [pc, #112]	@ (8117910 <tcp_process+0x2b4>)
 81178a0:	4813      	ldr	r0, [pc, #76]	@ (81178f0 <tcp_process+0x294>)
 81178a2:	f004 fad3 	bl	811be4c <iprintf>
        --pcb->snd_queuelen;
 81178a6:	687b      	ldr	r3, [r7, #4]
 81178a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 81178ac:	3b01      	subs	r3, #1
 81178ae:	b29a      	uxth	r2, r3
 81178b0:	687b      	ldr	r3, [r7, #4]
 81178b2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 81178b6:	687b      	ldr	r3, [r7, #4]
 81178b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81178ba:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 81178bc:	69fb      	ldr	r3, [r7, #28]
 81178be:	2b00      	cmp	r3, #0
 81178c0:	d12a      	bne.n	8117918 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 81178c2:	687b      	ldr	r3, [r7, #4]
 81178c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81178c6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 81178c8:	69fb      	ldr	r3, [r7, #28]
 81178ca:	2b00      	cmp	r3, #0
 81178cc:	d106      	bne.n	81178dc <tcp_process+0x280>
 81178ce:	4b06      	ldr	r3, [pc, #24]	@ (81178e8 <tcp_process+0x28c>)
 81178d0:	f44f 725d 	mov.w	r2, #884	@ 0x374
 81178d4:	490f      	ldr	r1, [pc, #60]	@ (8117914 <tcp_process+0x2b8>)
 81178d6:	4806      	ldr	r0, [pc, #24]	@ (81178f0 <tcp_process+0x294>)
 81178d8:	f004 fab8 	bl	811be4c <iprintf>
          pcb->unsent = rseg->next;
 81178dc:	69fb      	ldr	r3, [r7, #28]
 81178de:	681a      	ldr	r2, [r3, #0]
 81178e0:	687b      	ldr	r3, [r7, #4]
 81178e2:	66da      	str	r2, [r3, #108]	@ 0x6c
 81178e4:	e01c      	b.n	8117920 <tcp_process+0x2c4>
 81178e6:	bf00      	nop
 81178e8:	0811e888 	.word	0x0811e888
 81178ec:	0811eb00 	.word	0x0811eb00
 81178f0:	0811e914 	.word	0x0811e914
 81178f4:	10011d58 	.word	0x10011d58
 81178f8:	10011d50 	.word	0x10011d50
 81178fc:	10011d4c 	.word	0x10011d4c
 8117900:	0811eb1c 	.word	0x0811eb1c
 8117904:	10011d59 	.word	0x10011d59
 8117908:	10011d14 	.word	0x10011d14
 811790c:	10011d3c 	.word	0x10011d3c
 8117910:	0811eb3c 	.word	0x0811eb3c
 8117914:	0811eb54 	.word	0x0811eb54
        } else {
          pcb->unacked = rseg->next;
 8117918:	69fb      	ldr	r3, [r7, #28]
 811791a:	681a      	ldr	r2, [r3, #0]
 811791c:	687b      	ldr	r3, [r7, #4]
 811791e:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8117920:	69f8      	ldr	r0, [r7, #28]
 8117922:	f7fe fca6 	bl	8116272 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8117926:	687b      	ldr	r3, [r7, #4]
 8117928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811792a:	2b00      	cmp	r3, #0
 811792c:	d104      	bne.n	8117938 <tcp_process+0x2dc>
          pcb->rtime = -1;
 811792e:	687b      	ldr	r3, [r7, #4]
 8117930:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8117934:	861a      	strh	r2, [r3, #48]	@ 0x30
 8117936:	e006      	b.n	8117946 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8117938:	687b      	ldr	r3, [r7, #4]
 811793a:	2200      	movs	r2, #0
 811793c:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 811793e:	687b      	ldr	r3, [r7, #4]
 8117940:	2200      	movs	r2, #0
 8117942:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8117946:	687b      	ldr	r3, [r7, #4]
 8117948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 811794c:	2b00      	cmp	r3, #0
 811794e:	d00a      	beq.n	8117966 <tcp_process+0x30a>
 8117950:	687b      	ldr	r3, [r7, #4]
 8117952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8117956:	687a      	ldr	r2, [r7, #4]
 8117958:	6910      	ldr	r0, [r2, #16]
 811795a:	2200      	movs	r2, #0
 811795c:	6879      	ldr	r1, [r7, #4]
 811795e:	4798      	blx	r3
 8117960:	4603      	mov	r3, r0
 8117962:	76bb      	strb	r3, [r7, #26]
 8117964:	e001      	b.n	811796a <tcp_process+0x30e>
 8117966:	2300      	movs	r3, #0
 8117968:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 811796a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 811796e:	f113 0f0d 	cmn.w	r3, #13
 8117972:	d102      	bne.n	811797a <tcp_process+0x31e>
          return ERR_ABRT;
 8117974:	f06f 030c 	mvn.w	r3, #12
 8117978:	e250      	b.n	8117e1c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 811797a:	687b      	ldr	r3, [r7, #4]
 811797c:	8b5b      	ldrh	r3, [r3, #26]
 811797e:	f043 0302 	orr.w	r3, r3, #2
 8117982:	b29a      	uxth	r2, r3
 8117984:	687b      	ldr	r3, [r7, #4]
 8117986:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8117988:	e23a      	b.n	8117e00 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 811798a:	4b98      	ldr	r3, [pc, #608]	@ (8117bec <tcp_process+0x590>)
 811798c:	781b      	ldrb	r3, [r3, #0]
 811798e:	f003 0310 	and.w	r3, r3, #16
 8117992:	2b00      	cmp	r3, #0
 8117994:	f000 8234 	beq.w	8117e00 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8117998:	4b95      	ldr	r3, [pc, #596]	@ (8117bf0 <tcp_process+0x594>)
 811799a:	6819      	ldr	r1, [r3, #0]
 811799c:	4b95      	ldr	r3, [pc, #596]	@ (8117bf4 <tcp_process+0x598>)
 811799e:	881b      	ldrh	r3, [r3, #0]
 81179a0:	461a      	mov	r2, r3
 81179a2:	4b95      	ldr	r3, [pc, #596]	@ (8117bf8 <tcp_process+0x59c>)
 81179a4:	681b      	ldr	r3, [r3, #0]
 81179a6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 81179a8:	4b94      	ldr	r3, [pc, #592]	@ (8117bfc <tcp_process+0x5a0>)
 81179aa:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 81179ac:	885b      	ldrh	r3, [r3, #2]
 81179ae:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 81179b0:	4a92      	ldr	r2, [pc, #584]	@ (8117bfc <tcp_process+0x5a0>)
 81179b2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 81179b4:	8812      	ldrh	r2, [r2, #0]
 81179b6:	b292      	uxth	r2, r2
 81179b8:	9202      	str	r2, [sp, #8]
 81179ba:	9301      	str	r3, [sp, #4]
 81179bc:	4b90      	ldr	r3, [pc, #576]	@ (8117c00 <tcp_process+0x5a4>)
 81179be:	9300      	str	r3, [sp, #0]
 81179c0:	4b90      	ldr	r3, [pc, #576]	@ (8117c04 <tcp_process+0x5a8>)
 81179c2:	4602      	mov	r2, r0
 81179c4:	6878      	ldr	r0, [r7, #4]
 81179c6:	f003 f8d9 	bl	811ab7c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 81179ca:	687b      	ldr	r3, [r7, #4]
 81179cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 81179d0:	2b05      	cmp	r3, #5
 81179d2:	f200 8215 	bhi.w	8117e00 <tcp_process+0x7a4>
          pcb->rtime = 0;
 81179d6:	687b      	ldr	r3, [r7, #4]
 81179d8:	2200      	movs	r2, #0
 81179da:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 81179dc:	6878      	ldr	r0, [r7, #4]
 81179de:	f002 fea5 	bl	811a72c <tcp_rexmit_rto>
      break;
 81179e2:	e20d      	b.n	8117e00 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 81179e4:	4b81      	ldr	r3, [pc, #516]	@ (8117bec <tcp_process+0x590>)
 81179e6:	781b      	ldrb	r3, [r3, #0]
 81179e8:	f003 0310 	and.w	r3, r3, #16
 81179ec:	2b00      	cmp	r3, #0
 81179ee:	f000 80a1 	beq.w	8117b34 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 81179f2:	4b7f      	ldr	r3, [pc, #508]	@ (8117bf0 <tcp_process+0x594>)
 81179f4:	681a      	ldr	r2, [r3, #0]
 81179f6:	687b      	ldr	r3, [r7, #4]
 81179f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81179fa:	1ad3      	subs	r3, r2, r3
 81179fc:	3b01      	subs	r3, #1
 81179fe:	2b00      	cmp	r3, #0
 8117a00:	db7e      	blt.n	8117b00 <tcp_process+0x4a4>
 8117a02:	4b7b      	ldr	r3, [pc, #492]	@ (8117bf0 <tcp_process+0x594>)
 8117a04:	681a      	ldr	r2, [r3, #0]
 8117a06:	687b      	ldr	r3, [r7, #4]
 8117a08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8117a0a:	1ad3      	subs	r3, r2, r3
 8117a0c:	2b00      	cmp	r3, #0
 8117a0e:	dc77      	bgt.n	8117b00 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8117a10:	687b      	ldr	r3, [r7, #4]
 8117a12:	2204      	movs	r2, #4
 8117a14:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8117a16:	687b      	ldr	r3, [r7, #4]
 8117a18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8117a1a:	2b00      	cmp	r3, #0
 8117a1c:	d102      	bne.n	8117a24 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8117a1e:	23fa      	movs	r3, #250	@ 0xfa
 8117a20:	76bb      	strb	r3, [r7, #26]
 8117a22:	e01d      	b.n	8117a60 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8117a24:	687b      	ldr	r3, [r7, #4]
 8117a26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8117a28:	699b      	ldr	r3, [r3, #24]
 8117a2a:	2b00      	cmp	r3, #0
 8117a2c:	d106      	bne.n	8117a3c <tcp_process+0x3e0>
 8117a2e:	4b76      	ldr	r3, [pc, #472]	@ (8117c08 <tcp_process+0x5ac>)
 8117a30:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8117a34:	4975      	ldr	r1, [pc, #468]	@ (8117c0c <tcp_process+0x5b0>)
 8117a36:	4876      	ldr	r0, [pc, #472]	@ (8117c10 <tcp_process+0x5b4>)
 8117a38:	f004 fa08 	bl	811be4c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8117a3c:	687b      	ldr	r3, [r7, #4]
 8117a3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8117a40:	699b      	ldr	r3, [r3, #24]
 8117a42:	2b00      	cmp	r3, #0
 8117a44:	d00a      	beq.n	8117a5c <tcp_process+0x400>
 8117a46:	687b      	ldr	r3, [r7, #4]
 8117a48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8117a4a:	699b      	ldr	r3, [r3, #24]
 8117a4c:	687a      	ldr	r2, [r7, #4]
 8117a4e:	6910      	ldr	r0, [r2, #16]
 8117a50:	2200      	movs	r2, #0
 8117a52:	6879      	ldr	r1, [r7, #4]
 8117a54:	4798      	blx	r3
 8117a56:	4603      	mov	r3, r0
 8117a58:	76bb      	strb	r3, [r7, #26]
 8117a5a:	e001      	b.n	8117a60 <tcp_process+0x404>
 8117a5c:	23f0      	movs	r3, #240	@ 0xf0
 8117a5e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8117a60:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8117a64:	2b00      	cmp	r3, #0
 8117a66:	d00a      	beq.n	8117a7e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8117a68:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8117a6c:	f113 0f0d 	cmn.w	r3, #13
 8117a70:	d002      	beq.n	8117a78 <tcp_process+0x41c>
              tcp_abort(pcb);
 8117a72:	6878      	ldr	r0, [r7, #4]
 8117a74:	f7fd fdae 	bl	81155d4 <tcp_abort>
            }
            return ERR_ABRT;
 8117a78:	f06f 030c 	mvn.w	r3, #12
 8117a7c:	e1ce      	b.n	8117e1c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8117a7e:	6878      	ldr	r0, [r7, #4]
 8117a80:	f000 fae0 	bl	8118044 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8117a84:	4b63      	ldr	r3, [pc, #396]	@ (8117c14 <tcp_process+0x5b8>)
 8117a86:	881b      	ldrh	r3, [r3, #0]
 8117a88:	2b00      	cmp	r3, #0
 8117a8a:	d005      	beq.n	8117a98 <tcp_process+0x43c>
            recv_acked--;
 8117a8c:	4b61      	ldr	r3, [pc, #388]	@ (8117c14 <tcp_process+0x5b8>)
 8117a8e:	881b      	ldrh	r3, [r3, #0]
 8117a90:	3b01      	subs	r3, #1
 8117a92:	b29a      	uxth	r2, r3
 8117a94:	4b5f      	ldr	r3, [pc, #380]	@ (8117c14 <tcp_process+0x5b8>)
 8117a96:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8117a98:	687b      	ldr	r3, [r7, #4]
 8117a9a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8117a9c:	009a      	lsls	r2, r3, #2
 8117a9e:	687b      	ldr	r3, [r7, #4]
 8117aa0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8117aa2:	005b      	lsls	r3, r3, #1
 8117aa4:	f241 111c 	movw	r1, #4380	@ 0x111c
 8117aa8:	428b      	cmp	r3, r1
 8117aaa:	bf38      	it	cc
 8117aac:	460b      	movcc	r3, r1
 8117aae:	429a      	cmp	r2, r3
 8117ab0:	d204      	bcs.n	8117abc <tcp_process+0x460>
 8117ab2:	687b      	ldr	r3, [r7, #4]
 8117ab4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8117ab6:	009b      	lsls	r3, r3, #2
 8117ab8:	b29b      	uxth	r3, r3
 8117aba:	e00d      	b.n	8117ad8 <tcp_process+0x47c>
 8117abc:	687b      	ldr	r3, [r7, #4]
 8117abe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8117ac0:	005b      	lsls	r3, r3, #1
 8117ac2:	f241 121c 	movw	r2, #4380	@ 0x111c
 8117ac6:	4293      	cmp	r3, r2
 8117ac8:	d904      	bls.n	8117ad4 <tcp_process+0x478>
 8117aca:	687b      	ldr	r3, [r7, #4]
 8117acc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8117ace:	005b      	lsls	r3, r3, #1
 8117ad0:	b29b      	uxth	r3, r3
 8117ad2:	e001      	b.n	8117ad8 <tcp_process+0x47c>
 8117ad4:	f241 131c 	movw	r3, #4380	@ 0x111c
 8117ad8:	687a      	ldr	r2, [r7, #4]
 8117ada:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8117ade:	4b4e      	ldr	r3, [pc, #312]	@ (8117c18 <tcp_process+0x5bc>)
 8117ae0:	781b      	ldrb	r3, [r3, #0]
 8117ae2:	f003 0320 	and.w	r3, r3, #32
 8117ae6:	2b00      	cmp	r3, #0
 8117ae8:	d037      	beq.n	8117b5a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8117aea:	687b      	ldr	r3, [r7, #4]
 8117aec:	8b5b      	ldrh	r3, [r3, #26]
 8117aee:	f043 0302 	orr.w	r3, r3, #2
 8117af2:	b29a      	uxth	r2, r3
 8117af4:	687b      	ldr	r3, [r7, #4]
 8117af6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8117af8:	687b      	ldr	r3, [r7, #4]
 8117afa:	2207      	movs	r2, #7
 8117afc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8117afe:	e02c      	b.n	8117b5a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8117b00:	4b3b      	ldr	r3, [pc, #236]	@ (8117bf0 <tcp_process+0x594>)
 8117b02:	6819      	ldr	r1, [r3, #0]
 8117b04:	4b3b      	ldr	r3, [pc, #236]	@ (8117bf4 <tcp_process+0x598>)
 8117b06:	881b      	ldrh	r3, [r3, #0]
 8117b08:	461a      	mov	r2, r3
 8117b0a:	4b3b      	ldr	r3, [pc, #236]	@ (8117bf8 <tcp_process+0x59c>)
 8117b0c:	681b      	ldr	r3, [r3, #0]
 8117b0e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8117b10:	4b3a      	ldr	r3, [pc, #232]	@ (8117bfc <tcp_process+0x5a0>)
 8117b12:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8117b14:	885b      	ldrh	r3, [r3, #2]
 8117b16:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8117b18:	4a38      	ldr	r2, [pc, #224]	@ (8117bfc <tcp_process+0x5a0>)
 8117b1a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8117b1c:	8812      	ldrh	r2, [r2, #0]
 8117b1e:	b292      	uxth	r2, r2
 8117b20:	9202      	str	r2, [sp, #8]
 8117b22:	9301      	str	r3, [sp, #4]
 8117b24:	4b36      	ldr	r3, [pc, #216]	@ (8117c00 <tcp_process+0x5a4>)
 8117b26:	9300      	str	r3, [sp, #0]
 8117b28:	4b36      	ldr	r3, [pc, #216]	@ (8117c04 <tcp_process+0x5a8>)
 8117b2a:	4602      	mov	r2, r0
 8117b2c:	6878      	ldr	r0, [r7, #4]
 8117b2e:	f003 f825 	bl	811ab7c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8117b32:	e167      	b.n	8117e04 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8117b34:	4b2d      	ldr	r3, [pc, #180]	@ (8117bec <tcp_process+0x590>)
 8117b36:	781b      	ldrb	r3, [r3, #0]
 8117b38:	f003 0302 	and.w	r3, r3, #2
 8117b3c:	2b00      	cmp	r3, #0
 8117b3e:	f000 8161 	beq.w	8117e04 <tcp_process+0x7a8>
 8117b42:	687b      	ldr	r3, [r7, #4]
 8117b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8117b46:	1e5a      	subs	r2, r3, #1
 8117b48:	4b2b      	ldr	r3, [pc, #172]	@ (8117bf8 <tcp_process+0x59c>)
 8117b4a:	681b      	ldr	r3, [r3, #0]
 8117b4c:	429a      	cmp	r2, r3
 8117b4e:	f040 8159 	bne.w	8117e04 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8117b52:	6878      	ldr	r0, [r7, #4]
 8117b54:	f002 fe0c 	bl	811a770 <tcp_rexmit>
      break;
 8117b58:	e154      	b.n	8117e04 <tcp_process+0x7a8>
 8117b5a:	e153      	b.n	8117e04 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8117b5c:	6878      	ldr	r0, [r7, #4]
 8117b5e:	f000 fa71 	bl	8118044 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8117b62:	4b2d      	ldr	r3, [pc, #180]	@ (8117c18 <tcp_process+0x5bc>)
 8117b64:	781b      	ldrb	r3, [r3, #0]
 8117b66:	f003 0320 	and.w	r3, r3, #32
 8117b6a:	2b00      	cmp	r3, #0
 8117b6c:	f000 814c 	beq.w	8117e08 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8117b70:	687b      	ldr	r3, [r7, #4]
 8117b72:	8b5b      	ldrh	r3, [r3, #26]
 8117b74:	f043 0302 	orr.w	r3, r3, #2
 8117b78:	b29a      	uxth	r2, r3
 8117b7a:	687b      	ldr	r3, [r7, #4]
 8117b7c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8117b7e:	687b      	ldr	r3, [r7, #4]
 8117b80:	2207      	movs	r2, #7
 8117b82:	751a      	strb	r2, [r3, #20]
      }
      break;
 8117b84:	e140      	b.n	8117e08 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8117b86:	6878      	ldr	r0, [r7, #4]
 8117b88:	f000 fa5c 	bl	8118044 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8117b8c:	4b22      	ldr	r3, [pc, #136]	@ (8117c18 <tcp_process+0x5bc>)
 8117b8e:	781b      	ldrb	r3, [r3, #0]
 8117b90:	f003 0320 	and.w	r3, r3, #32
 8117b94:	2b00      	cmp	r3, #0
 8117b96:	d071      	beq.n	8117c7c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8117b98:	4b14      	ldr	r3, [pc, #80]	@ (8117bec <tcp_process+0x590>)
 8117b9a:	781b      	ldrb	r3, [r3, #0]
 8117b9c:	f003 0310 	and.w	r3, r3, #16
 8117ba0:	2b00      	cmp	r3, #0
 8117ba2:	d060      	beq.n	8117c66 <tcp_process+0x60a>
 8117ba4:	687b      	ldr	r3, [r7, #4]
 8117ba6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8117ba8:	4b11      	ldr	r3, [pc, #68]	@ (8117bf0 <tcp_process+0x594>)
 8117baa:	681b      	ldr	r3, [r3, #0]
 8117bac:	429a      	cmp	r2, r3
 8117bae:	d15a      	bne.n	8117c66 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8117bb0:	687b      	ldr	r3, [r7, #4]
 8117bb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8117bb4:	2b00      	cmp	r3, #0
 8117bb6:	d156      	bne.n	8117c66 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8117bb8:	687b      	ldr	r3, [r7, #4]
 8117bba:	8b5b      	ldrh	r3, [r3, #26]
 8117bbc:	f043 0302 	orr.w	r3, r3, #2
 8117bc0:	b29a      	uxth	r2, r3
 8117bc2:	687b      	ldr	r3, [r7, #4]
 8117bc4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8117bc6:	6878      	ldr	r0, [r7, #4]
 8117bc8:	f7fe fdbc 	bl	8116744 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8117bcc:	4b13      	ldr	r3, [pc, #76]	@ (8117c1c <tcp_process+0x5c0>)
 8117bce:	681b      	ldr	r3, [r3, #0]
 8117bd0:	687a      	ldr	r2, [r7, #4]
 8117bd2:	429a      	cmp	r2, r3
 8117bd4:	d105      	bne.n	8117be2 <tcp_process+0x586>
 8117bd6:	4b11      	ldr	r3, [pc, #68]	@ (8117c1c <tcp_process+0x5c0>)
 8117bd8:	681b      	ldr	r3, [r3, #0]
 8117bda:	68db      	ldr	r3, [r3, #12]
 8117bdc:	4a0f      	ldr	r2, [pc, #60]	@ (8117c1c <tcp_process+0x5c0>)
 8117bde:	6013      	str	r3, [r2, #0]
 8117be0:	e02e      	b.n	8117c40 <tcp_process+0x5e4>
 8117be2:	4b0e      	ldr	r3, [pc, #56]	@ (8117c1c <tcp_process+0x5c0>)
 8117be4:	681b      	ldr	r3, [r3, #0]
 8117be6:	617b      	str	r3, [r7, #20]
 8117be8:	e027      	b.n	8117c3a <tcp_process+0x5de>
 8117bea:	bf00      	nop
 8117bec:	10011d58 	.word	0x10011d58
 8117bf0:	10011d50 	.word	0x10011d50
 8117bf4:	10011d56 	.word	0x10011d56
 8117bf8:	10011d4c 	.word	0x10011d4c
 8117bfc:	10011d3c 	.word	0x10011d3c
 8117c00:	1000b254 	.word	0x1000b254
 8117c04:	1000b258 	.word	0x1000b258
 8117c08:	0811e888 	.word	0x0811e888
 8117c0c:	0811eb68 	.word	0x0811eb68
 8117c10:	0811e914 	.word	0x0811e914
 8117c14:	10011d54 	.word	0x10011d54
 8117c18:	10011d59 	.word	0x10011d59
 8117c1c:	10011d20 	.word	0x10011d20
 8117c20:	697b      	ldr	r3, [r7, #20]
 8117c22:	68db      	ldr	r3, [r3, #12]
 8117c24:	687a      	ldr	r2, [r7, #4]
 8117c26:	429a      	cmp	r2, r3
 8117c28:	d104      	bne.n	8117c34 <tcp_process+0x5d8>
 8117c2a:	687b      	ldr	r3, [r7, #4]
 8117c2c:	68da      	ldr	r2, [r3, #12]
 8117c2e:	697b      	ldr	r3, [r7, #20]
 8117c30:	60da      	str	r2, [r3, #12]
 8117c32:	e005      	b.n	8117c40 <tcp_process+0x5e4>
 8117c34:	697b      	ldr	r3, [r7, #20]
 8117c36:	68db      	ldr	r3, [r3, #12]
 8117c38:	617b      	str	r3, [r7, #20]
 8117c3a:	697b      	ldr	r3, [r7, #20]
 8117c3c:	2b00      	cmp	r3, #0
 8117c3e:	d1ef      	bne.n	8117c20 <tcp_process+0x5c4>
 8117c40:	687b      	ldr	r3, [r7, #4]
 8117c42:	2200      	movs	r2, #0
 8117c44:	60da      	str	r2, [r3, #12]
 8117c46:	4b77      	ldr	r3, [pc, #476]	@ (8117e24 <tcp_process+0x7c8>)
 8117c48:	2201      	movs	r2, #1
 8117c4a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8117c4c:	687b      	ldr	r3, [r7, #4]
 8117c4e:	220a      	movs	r2, #10
 8117c50:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8117c52:	4b75      	ldr	r3, [pc, #468]	@ (8117e28 <tcp_process+0x7cc>)
 8117c54:	681a      	ldr	r2, [r3, #0]
 8117c56:	687b      	ldr	r3, [r7, #4]
 8117c58:	60da      	str	r2, [r3, #12]
 8117c5a:	4a73      	ldr	r2, [pc, #460]	@ (8117e28 <tcp_process+0x7cc>)
 8117c5c:	687b      	ldr	r3, [r7, #4]
 8117c5e:	6013      	str	r3, [r2, #0]
 8117c60:	f003 faf0 	bl	811b244 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8117c64:	e0d2      	b.n	8117e0c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8117c66:	687b      	ldr	r3, [r7, #4]
 8117c68:	8b5b      	ldrh	r3, [r3, #26]
 8117c6a:	f043 0302 	orr.w	r3, r3, #2
 8117c6e:	b29a      	uxth	r2, r3
 8117c70:	687b      	ldr	r3, [r7, #4]
 8117c72:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8117c74:	687b      	ldr	r3, [r7, #4]
 8117c76:	2208      	movs	r2, #8
 8117c78:	751a      	strb	r2, [r3, #20]
      break;
 8117c7a:	e0c7      	b.n	8117e0c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8117c7c:	4b6b      	ldr	r3, [pc, #428]	@ (8117e2c <tcp_process+0x7d0>)
 8117c7e:	781b      	ldrb	r3, [r3, #0]
 8117c80:	f003 0310 	and.w	r3, r3, #16
 8117c84:	2b00      	cmp	r3, #0
 8117c86:	f000 80c1 	beq.w	8117e0c <tcp_process+0x7b0>
 8117c8a:	687b      	ldr	r3, [r7, #4]
 8117c8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8117c8e:	4b68      	ldr	r3, [pc, #416]	@ (8117e30 <tcp_process+0x7d4>)
 8117c90:	681b      	ldr	r3, [r3, #0]
 8117c92:	429a      	cmp	r2, r3
 8117c94:	f040 80ba 	bne.w	8117e0c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8117c98:	687b      	ldr	r3, [r7, #4]
 8117c9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8117c9c:	2b00      	cmp	r3, #0
 8117c9e:	f040 80b5 	bne.w	8117e0c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8117ca2:	687b      	ldr	r3, [r7, #4]
 8117ca4:	2206      	movs	r2, #6
 8117ca6:	751a      	strb	r2, [r3, #20]
      break;
 8117ca8:	e0b0      	b.n	8117e0c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8117caa:	6878      	ldr	r0, [r7, #4]
 8117cac:	f000 f9ca 	bl	8118044 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8117cb0:	4b60      	ldr	r3, [pc, #384]	@ (8117e34 <tcp_process+0x7d8>)
 8117cb2:	781b      	ldrb	r3, [r3, #0]
 8117cb4:	f003 0320 	and.w	r3, r3, #32
 8117cb8:	2b00      	cmp	r3, #0
 8117cba:	f000 80a9 	beq.w	8117e10 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8117cbe:	687b      	ldr	r3, [r7, #4]
 8117cc0:	8b5b      	ldrh	r3, [r3, #26]
 8117cc2:	f043 0302 	orr.w	r3, r3, #2
 8117cc6:	b29a      	uxth	r2, r3
 8117cc8:	687b      	ldr	r3, [r7, #4]
 8117cca:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8117ccc:	6878      	ldr	r0, [r7, #4]
 8117cce:	f7fe fd39 	bl	8116744 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8117cd2:	4b59      	ldr	r3, [pc, #356]	@ (8117e38 <tcp_process+0x7dc>)
 8117cd4:	681b      	ldr	r3, [r3, #0]
 8117cd6:	687a      	ldr	r2, [r7, #4]
 8117cd8:	429a      	cmp	r2, r3
 8117cda:	d105      	bne.n	8117ce8 <tcp_process+0x68c>
 8117cdc:	4b56      	ldr	r3, [pc, #344]	@ (8117e38 <tcp_process+0x7dc>)
 8117cde:	681b      	ldr	r3, [r3, #0]
 8117ce0:	68db      	ldr	r3, [r3, #12]
 8117ce2:	4a55      	ldr	r2, [pc, #340]	@ (8117e38 <tcp_process+0x7dc>)
 8117ce4:	6013      	str	r3, [r2, #0]
 8117ce6:	e013      	b.n	8117d10 <tcp_process+0x6b4>
 8117ce8:	4b53      	ldr	r3, [pc, #332]	@ (8117e38 <tcp_process+0x7dc>)
 8117cea:	681b      	ldr	r3, [r3, #0]
 8117cec:	613b      	str	r3, [r7, #16]
 8117cee:	e00c      	b.n	8117d0a <tcp_process+0x6ae>
 8117cf0:	693b      	ldr	r3, [r7, #16]
 8117cf2:	68db      	ldr	r3, [r3, #12]
 8117cf4:	687a      	ldr	r2, [r7, #4]
 8117cf6:	429a      	cmp	r2, r3
 8117cf8:	d104      	bne.n	8117d04 <tcp_process+0x6a8>
 8117cfa:	687b      	ldr	r3, [r7, #4]
 8117cfc:	68da      	ldr	r2, [r3, #12]
 8117cfe:	693b      	ldr	r3, [r7, #16]
 8117d00:	60da      	str	r2, [r3, #12]
 8117d02:	e005      	b.n	8117d10 <tcp_process+0x6b4>
 8117d04:	693b      	ldr	r3, [r7, #16]
 8117d06:	68db      	ldr	r3, [r3, #12]
 8117d08:	613b      	str	r3, [r7, #16]
 8117d0a:	693b      	ldr	r3, [r7, #16]
 8117d0c:	2b00      	cmp	r3, #0
 8117d0e:	d1ef      	bne.n	8117cf0 <tcp_process+0x694>
 8117d10:	687b      	ldr	r3, [r7, #4]
 8117d12:	2200      	movs	r2, #0
 8117d14:	60da      	str	r2, [r3, #12]
 8117d16:	4b43      	ldr	r3, [pc, #268]	@ (8117e24 <tcp_process+0x7c8>)
 8117d18:	2201      	movs	r2, #1
 8117d1a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8117d1c:	687b      	ldr	r3, [r7, #4]
 8117d1e:	220a      	movs	r2, #10
 8117d20:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8117d22:	4b41      	ldr	r3, [pc, #260]	@ (8117e28 <tcp_process+0x7cc>)
 8117d24:	681a      	ldr	r2, [r3, #0]
 8117d26:	687b      	ldr	r3, [r7, #4]
 8117d28:	60da      	str	r2, [r3, #12]
 8117d2a:	4a3f      	ldr	r2, [pc, #252]	@ (8117e28 <tcp_process+0x7cc>)
 8117d2c:	687b      	ldr	r3, [r7, #4]
 8117d2e:	6013      	str	r3, [r2, #0]
 8117d30:	f003 fa88 	bl	811b244 <tcp_timer_needed>
      }
      break;
 8117d34:	e06c      	b.n	8117e10 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8117d36:	6878      	ldr	r0, [r7, #4]
 8117d38:	f000 f984 	bl	8118044 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8117d3c:	4b3b      	ldr	r3, [pc, #236]	@ (8117e2c <tcp_process+0x7d0>)
 8117d3e:	781b      	ldrb	r3, [r3, #0]
 8117d40:	f003 0310 	and.w	r3, r3, #16
 8117d44:	2b00      	cmp	r3, #0
 8117d46:	d065      	beq.n	8117e14 <tcp_process+0x7b8>
 8117d48:	687b      	ldr	r3, [r7, #4]
 8117d4a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8117d4c:	4b38      	ldr	r3, [pc, #224]	@ (8117e30 <tcp_process+0x7d4>)
 8117d4e:	681b      	ldr	r3, [r3, #0]
 8117d50:	429a      	cmp	r2, r3
 8117d52:	d15f      	bne.n	8117e14 <tcp_process+0x7b8>
 8117d54:	687b      	ldr	r3, [r7, #4]
 8117d56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8117d58:	2b00      	cmp	r3, #0
 8117d5a:	d15b      	bne.n	8117e14 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8117d5c:	6878      	ldr	r0, [r7, #4]
 8117d5e:	f7fe fcf1 	bl	8116744 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8117d62:	4b35      	ldr	r3, [pc, #212]	@ (8117e38 <tcp_process+0x7dc>)
 8117d64:	681b      	ldr	r3, [r3, #0]
 8117d66:	687a      	ldr	r2, [r7, #4]
 8117d68:	429a      	cmp	r2, r3
 8117d6a:	d105      	bne.n	8117d78 <tcp_process+0x71c>
 8117d6c:	4b32      	ldr	r3, [pc, #200]	@ (8117e38 <tcp_process+0x7dc>)
 8117d6e:	681b      	ldr	r3, [r3, #0]
 8117d70:	68db      	ldr	r3, [r3, #12]
 8117d72:	4a31      	ldr	r2, [pc, #196]	@ (8117e38 <tcp_process+0x7dc>)
 8117d74:	6013      	str	r3, [r2, #0]
 8117d76:	e013      	b.n	8117da0 <tcp_process+0x744>
 8117d78:	4b2f      	ldr	r3, [pc, #188]	@ (8117e38 <tcp_process+0x7dc>)
 8117d7a:	681b      	ldr	r3, [r3, #0]
 8117d7c:	60fb      	str	r3, [r7, #12]
 8117d7e:	e00c      	b.n	8117d9a <tcp_process+0x73e>
 8117d80:	68fb      	ldr	r3, [r7, #12]
 8117d82:	68db      	ldr	r3, [r3, #12]
 8117d84:	687a      	ldr	r2, [r7, #4]
 8117d86:	429a      	cmp	r2, r3
 8117d88:	d104      	bne.n	8117d94 <tcp_process+0x738>
 8117d8a:	687b      	ldr	r3, [r7, #4]
 8117d8c:	68da      	ldr	r2, [r3, #12]
 8117d8e:	68fb      	ldr	r3, [r7, #12]
 8117d90:	60da      	str	r2, [r3, #12]
 8117d92:	e005      	b.n	8117da0 <tcp_process+0x744>
 8117d94:	68fb      	ldr	r3, [r7, #12]
 8117d96:	68db      	ldr	r3, [r3, #12]
 8117d98:	60fb      	str	r3, [r7, #12]
 8117d9a:	68fb      	ldr	r3, [r7, #12]
 8117d9c:	2b00      	cmp	r3, #0
 8117d9e:	d1ef      	bne.n	8117d80 <tcp_process+0x724>
 8117da0:	687b      	ldr	r3, [r7, #4]
 8117da2:	2200      	movs	r2, #0
 8117da4:	60da      	str	r2, [r3, #12]
 8117da6:	4b1f      	ldr	r3, [pc, #124]	@ (8117e24 <tcp_process+0x7c8>)
 8117da8:	2201      	movs	r2, #1
 8117daa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8117dac:	687b      	ldr	r3, [r7, #4]
 8117dae:	220a      	movs	r2, #10
 8117db0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8117db2:	4b1d      	ldr	r3, [pc, #116]	@ (8117e28 <tcp_process+0x7cc>)
 8117db4:	681a      	ldr	r2, [r3, #0]
 8117db6:	687b      	ldr	r3, [r7, #4]
 8117db8:	60da      	str	r2, [r3, #12]
 8117dba:	4a1b      	ldr	r2, [pc, #108]	@ (8117e28 <tcp_process+0x7cc>)
 8117dbc:	687b      	ldr	r3, [r7, #4]
 8117dbe:	6013      	str	r3, [r2, #0]
 8117dc0:	f003 fa40 	bl	811b244 <tcp_timer_needed>
      }
      break;
 8117dc4:	e026      	b.n	8117e14 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8117dc6:	6878      	ldr	r0, [r7, #4]
 8117dc8:	f000 f93c 	bl	8118044 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8117dcc:	4b17      	ldr	r3, [pc, #92]	@ (8117e2c <tcp_process+0x7d0>)
 8117dce:	781b      	ldrb	r3, [r3, #0]
 8117dd0:	f003 0310 	and.w	r3, r3, #16
 8117dd4:	2b00      	cmp	r3, #0
 8117dd6:	d01f      	beq.n	8117e18 <tcp_process+0x7bc>
 8117dd8:	687b      	ldr	r3, [r7, #4]
 8117dda:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8117ddc:	4b14      	ldr	r3, [pc, #80]	@ (8117e30 <tcp_process+0x7d4>)
 8117dde:	681b      	ldr	r3, [r3, #0]
 8117de0:	429a      	cmp	r2, r3
 8117de2:	d119      	bne.n	8117e18 <tcp_process+0x7bc>
 8117de4:	687b      	ldr	r3, [r7, #4]
 8117de6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8117de8:	2b00      	cmp	r3, #0
 8117dea:	d115      	bne.n	8117e18 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8117dec:	4b11      	ldr	r3, [pc, #68]	@ (8117e34 <tcp_process+0x7d8>)
 8117dee:	781b      	ldrb	r3, [r3, #0]
 8117df0:	f043 0310 	orr.w	r3, r3, #16
 8117df4:	b2da      	uxtb	r2, r3
 8117df6:	4b0f      	ldr	r3, [pc, #60]	@ (8117e34 <tcp_process+0x7d8>)
 8117df8:	701a      	strb	r2, [r3, #0]
      }
      break;
 8117dfa:	e00d      	b.n	8117e18 <tcp_process+0x7bc>
    default:
      break;
 8117dfc:	bf00      	nop
 8117dfe:	e00c      	b.n	8117e1a <tcp_process+0x7be>
      break;
 8117e00:	bf00      	nop
 8117e02:	e00a      	b.n	8117e1a <tcp_process+0x7be>
      break;
 8117e04:	bf00      	nop
 8117e06:	e008      	b.n	8117e1a <tcp_process+0x7be>
      break;
 8117e08:	bf00      	nop
 8117e0a:	e006      	b.n	8117e1a <tcp_process+0x7be>
      break;
 8117e0c:	bf00      	nop
 8117e0e:	e004      	b.n	8117e1a <tcp_process+0x7be>
      break;
 8117e10:	bf00      	nop
 8117e12:	e002      	b.n	8117e1a <tcp_process+0x7be>
      break;
 8117e14:	bf00      	nop
 8117e16:	e000      	b.n	8117e1a <tcp_process+0x7be>
      break;
 8117e18:	bf00      	nop
  }
  return ERR_OK;
 8117e1a:	2300      	movs	r3, #0
}
 8117e1c:	4618      	mov	r0, r3
 8117e1e:	3724      	adds	r7, #36	@ 0x24
 8117e20:	46bd      	mov	sp, r7
 8117e22:	bd90      	pop	{r4, r7, pc}
 8117e24:	10011d28 	.word	0x10011d28
 8117e28:	10011d24 	.word	0x10011d24
 8117e2c:	10011d58 	.word	0x10011d58
 8117e30:	10011d50 	.word	0x10011d50
 8117e34:	10011d59 	.word	0x10011d59
 8117e38:	10011d20 	.word	0x10011d20

08117e3c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8117e3c:	b590      	push	{r4, r7, lr}
 8117e3e:	b085      	sub	sp, #20
 8117e40:	af00      	add	r7, sp, #0
 8117e42:	6078      	str	r0, [r7, #4]
 8117e44:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8117e46:	687b      	ldr	r3, [r7, #4]
 8117e48:	2b00      	cmp	r3, #0
 8117e4a:	d106      	bne.n	8117e5a <tcp_oos_insert_segment+0x1e>
 8117e4c:	4b3b      	ldr	r3, [pc, #236]	@ (8117f3c <tcp_oos_insert_segment+0x100>)
 8117e4e:	f240 421f 	movw	r2, #1055	@ 0x41f
 8117e52:	493b      	ldr	r1, [pc, #236]	@ (8117f40 <tcp_oos_insert_segment+0x104>)
 8117e54:	483b      	ldr	r0, [pc, #236]	@ (8117f44 <tcp_oos_insert_segment+0x108>)
 8117e56:	f003 fff9 	bl	811be4c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8117e5a:	687b      	ldr	r3, [r7, #4]
 8117e5c:	68db      	ldr	r3, [r3, #12]
 8117e5e:	899b      	ldrh	r3, [r3, #12]
 8117e60:	b29b      	uxth	r3, r3
 8117e62:	4618      	mov	r0, r3
 8117e64:	f7f8 fdaa 	bl	81109bc <lwip_htons>
 8117e68:	4603      	mov	r3, r0
 8117e6a:	b2db      	uxtb	r3, r3
 8117e6c:	f003 0301 	and.w	r3, r3, #1
 8117e70:	2b00      	cmp	r3, #0
 8117e72:	d028      	beq.n	8117ec6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8117e74:	6838      	ldr	r0, [r7, #0]
 8117e76:	f7fe f9e7 	bl	8116248 <tcp_segs_free>
    next = NULL;
 8117e7a:	2300      	movs	r3, #0
 8117e7c:	603b      	str	r3, [r7, #0]
 8117e7e:	e056      	b.n	8117f2e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8117e80:	683b      	ldr	r3, [r7, #0]
 8117e82:	68db      	ldr	r3, [r3, #12]
 8117e84:	899b      	ldrh	r3, [r3, #12]
 8117e86:	b29b      	uxth	r3, r3
 8117e88:	4618      	mov	r0, r3
 8117e8a:	f7f8 fd97 	bl	81109bc <lwip_htons>
 8117e8e:	4603      	mov	r3, r0
 8117e90:	b2db      	uxtb	r3, r3
 8117e92:	f003 0301 	and.w	r3, r3, #1
 8117e96:	2b00      	cmp	r3, #0
 8117e98:	d00d      	beq.n	8117eb6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8117e9a:	687b      	ldr	r3, [r7, #4]
 8117e9c:	68db      	ldr	r3, [r3, #12]
 8117e9e:	899b      	ldrh	r3, [r3, #12]
 8117ea0:	b29c      	uxth	r4, r3
 8117ea2:	2001      	movs	r0, #1
 8117ea4:	f7f8 fd8a 	bl	81109bc <lwip_htons>
 8117ea8:	4603      	mov	r3, r0
 8117eaa:	461a      	mov	r2, r3
 8117eac:	687b      	ldr	r3, [r7, #4]
 8117eae:	68db      	ldr	r3, [r3, #12]
 8117eb0:	4322      	orrs	r2, r4
 8117eb2:	b292      	uxth	r2, r2
 8117eb4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8117eb6:	683b      	ldr	r3, [r7, #0]
 8117eb8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8117eba:	683b      	ldr	r3, [r7, #0]
 8117ebc:	681b      	ldr	r3, [r3, #0]
 8117ebe:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8117ec0:	68f8      	ldr	r0, [r7, #12]
 8117ec2:	f7fe f9d6 	bl	8116272 <tcp_seg_free>
    while (next &&
 8117ec6:	683b      	ldr	r3, [r7, #0]
 8117ec8:	2b00      	cmp	r3, #0
 8117eca:	d00e      	beq.n	8117eea <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8117ecc:	687b      	ldr	r3, [r7, #4]
 8117ece:	891b      	ldrh	r3, [r3, #8]
 8117ed0:	461a      	mov	r2, r3
 8117ed2:	4b1d      	ldr	r3, [pc, #116]	@ (8117f48 <tcp_oos_insert_segment+0x10c>)
 8117ed4:	681b      	ldr	r3, [r3, #0]
 8117ed6:	441a      	add	r2, r3
 8117ed8:	683b      	ldr	r3, [r7, #0]
 8117eda:	68db      	ldr	r3, [r3, #12]
 8117edc:	685b      	ldr	r3, [r3, #4]
 8117ede:	6839      	ldr	r1, [r7, #0]
 8117ee0:	8909      	ldrh	r1, [r1, #8]
 8117ee2:	440b      	add	r3, r1
 8117ee4:	1ad3      	subs	r3, r2, r3
    while (next &&
 8117ee6:	2b00      	cmp	r3, #0
 8117ee8:	daca      	bge.n	8117e80 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8117eea:	683b      	ldr	r3, [r7, #0]
 8117eec:	2b00      	cmp	r3, #0
 8117eee:	d01e      	beq.n	8117f2e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8117ef0:	687b      	ldr	r3, [r7, #4]
 8117ef2:	891b      	ldrh	r3, [r3, #8]
 8117ef4:	461a      	mov	r2, r3
 8117ef6:	4b14      	ldr	r3, [pc, #80]	@ (8117f48 <tcp_oos_insert_segment+0x10c>)
 8117ef8:	681b      	ldr	r3, [r3, #0]
 8117efa:	441a      	add	r2, r3
 8117efc:	683b      	ldr	r3, [r7, #0]
 8117efe:	68db      	ldr	r3, [r3, #12]
 8117f00:	685b      	ldr	r3, [r3, #4]
 8117f02:	1ad3      	subs	r3, r2, r3
    if (next &&
 8117f04:	2b00      	cmp	r3, #0
 8117f06:	dd12      	ble.n	8117f2e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8117f08:	683b      	ldr	r3, [r7, #0]
 8117f0a:	68db      	ldr	r3, [r3, #12]
 8117f0c:	685b      	ldr	r3, [r3, #4]
 8117f0e:	b29a      	uxth	r2, r3
 8117f10:	4b0d      	ldr	r3, [pc, #52]	@ (8117f48 <tcp_oos_insert_segment+0x10c>)
 8117f12:	681b      	ldr	r3, [r3, #0]
 8117f14:	b29b      	uxth	r3, r3
 8117f16:	1ad3      	subs	r3, r2, r3
 8117f18:	b29a      	uxth	r2, r3
 8117f1a:	687b      	ldr	r3, [r7, #4]
 8117f1c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8117f1e:	687b      	ldr	r3, [r7, #4]
 8117f20:	685a      	ldr	r2, [r3, #4]
 8117f22:	687b      	ldr	r3, [r7, #4]
 8117f24:	891b      	ldrh	r3, [r3, #8]
 8117f26:	4619      	mov	r1, r3
 8117f28:	4610      	mov	r0, r2
 8117f2a:	f7fc fb49 	bl	81145c0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8117f2e:	687b      	ldr	r3, [r7, #4]
 8117f30:	683a      	ldr	r2, [r7, #0]
 8117f32:	601a      	str	r2, [r3, #0]
}
 8117f34:	bf00      	nop
 8117f36:	3714      	adds	r7, #20
 8117f38:	46bd      	mov	sp, r7
 8117f3a:	bd90      	pop	{r4, r7, pc}
 8117f3c:	0811e888 	.word	0x0811e888
 8117f40:	0811eb88 	.word	0x0811eb88
 8117f44:	0811e914 	.word	0x0811e914
 8117f48:	10011d4c 	.word	0x10011d4c

08117f4c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8117f4c:	b5b0      	push	{r4, r5, r7, lr}
 8117f4e:	b086      	sub	sp, #24
 8117f50:	af00      	add	r7, sp, #0
 8117f52:	60f8      	str	r0, [r7, #12]
 8117f54:	60b9      	str	r1, [r7, #8]
 8117f56:	607a      	str	r2, [r7, #4]
 8117f58:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8117f5a:	e03e      	b.n	8117fda <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8117f5c:	68bb      	ldr	r3, [r7, #8]
 8117f5e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8117f60:	68bb      	ldr	r3, [r7, #8]
 8117f62:	681b      	ldr	r3, [r3, #0]
 8117f64:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8117f66:	697b      	ldr	r3, [r7, #20]
 8117f68:	685b      	ldr	r3, [r3, #4]
 8117f6a:	4618      	mov	r0, r3
 8117f6c:	f7fc fd3a 	bl	81149e4 <pbuf_clen>
 8117f70:	4603      	mov	r3, r0
 8117f72:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8117f74:	68fb      	ldr	r3, [r7, #12]
 8117f76:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8117f7a:	8a7a      	ldrh	r2, [r7, #18]
 8117f7c:	429a      	cmp	r2, r3
 8117f7e:	d906      	bls.n	8117f8e <tcp_free_acked_segments+0x42>
 8117f80:	4b2a      	ldr	r3, [pc, #168]	@ (811802c <tcp_free_acked_segments+0xe0>)
 8117f82:	f240 4257 	movw	r2, #1111	@ 0x457
 8117f86:	492a      	ldr	r1, [pc, #168]	@ (8118030 <tcp_free_acked_segments+0xe4>)
 8117f88:	482a      	ldr	r0, [pc, #168]	@ (8118034 <tcp_free_acked_segments+0xe8>)
 8117f8a:	f003 ff5f 	bl	811be4c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8117f8e:	68fb      	ldr	r3, [r7, #12]
 8117f90:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8117f94:	8a7b      	ldrh	r3, [r7, #18]
 8117f96:	1ad3      	subs	r3, r2, r3
 8117f98:	b29a      	uxth	r2, r3
 8117f9a:	68fb      	ldr	r3, [r7, #12]
 8117f9c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8117fa0:	697b      	ldr	r3, [r7, #20]
 8117fa2:	891a      	ldrh	r2, [r3, #8]
 8117fa4:	4b24      	ldr	r3, [pc, #144]	@ (8118038 <tcp_free_acked_segments+0xec>)
 8117fa6:	881b      	ldrh	r3, [r3, #0]
 8117fa8:	4413      	add	r3, r2
 8117faa:	b29a      	uxth	r2, r3
 8117fac:	4b22      	ldr	r3, [pc, #136]	@ (8118038 <tcp_free_acked_segments+0xec>)
 8117fae:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8117fb0:	6978      	ldr	r0, [r7, #20]
 8117fb2:	f7fe f95e 	bl	8116272 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8117fb6:	68fb      	ldr	r3, [r7, #12]
 8117fb8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8117fbc:	2b00      	cmp	r3, #0
 8117fbe:	d00c      	beq.n	8117fda <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8117fc0:	68bb      	ldr	r3, [r7, #8]
 8117fc2:	2b00      	cmp	r3, #0
 8117fc4:	d109      	bne.n	8117fda <tcp_free_acked_segments+0x8e>
 8117fc6:	683b      	ldr	r3, [r7, #0]
 8117fc8:	2b00      	cmp	r3, #0
 8117fca:	d106      	bne.n	8117fda <tcp_free_acked_segments+0x8e>
 8117fcc:	4b17      	ldr	r3, [pc, #92]	@ (811802c <tcp_free_acked_segments+0xe0>)
 8117fce:	f240 4261 	movw	r2, #1121	@ 0x461
 8117fd2:	491a      	ldr	r1, [pc, #104]	@ (811803c <tcp_free_acked_segments+0xf0>)
 8117fd4:	4817      	ldr	r0, [pc, #92]	@ (8118034 <tcp_free_acked_segments+0xe8>)
 8117fd6:	f003 ff39 	bl	811be4c <iprintf>
  while (seg_list != NULL &&
 8117fda:	68bb      	ldr	r3, [r7, #8]
 8117fdc:	2b00      	cmp	r3, #0
 8117fde:	d020      	beq.n	8118022 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8117fe0:	68bb      	ldr	r3, [r7, #8]
 8117fe2:	68db      	ldr	r3, [r3, #12]
 8117fe4:	685b      	ldr	r3, [r3, #4]
 8117fe6:	4618      	mov	r0, r3
 8117fe8:	f7f8 fcfd 	bl	81109e6 <lwip_htonl>
 8117fec:	4604      	mov	r4, r0
 8117fee:	68bb      	ldr	r3, [r7, #8]
 8117ff0:	891b      	ldrh	r3, [r3, #8]
 8117ff2:	461d      	mov	r5, r3
 8117ff4:	68bb      	ldr	r3, [r7, #8]
 8117ff6:	68db      	ldr	r3, [r3, #12]
 8117ff8:	899b      	ldrh	r3, [r3, #12]
 8117ffa:	b29b      	uxth	r3, r3
 8117ffc:	4618      	mov	r0, r3
 8117ffe:	f7f8 fcdd 	bl	81109bc <lwip_htons>
 8118002:	4603      	mov	r3, r0
 8118004:	b2db      	uxtb	r3, r3
 8118006:	f003 0303 	and.w	r3, r3, #3
 811800a:	2b00      	cmp	r3, #0
 811800c:	d001      	beq.n	8118012 <tcp_free_acked_segments+0xc6>
 811800e:	2301      	movs	r3, #1
 8118010:	e000      	b.n	8118014 <tcp_free_acked_segments+0xc8>
 8118012:	2300      	movs	r3, #0
 8118014:	442b      	add	r3, r5
 8118016:	18e2      	adds	r2, r4, r3
 8118018:	4b09      	ldr	r3, [pc, #36]	@ (8118040 <tcp_free_acked_segments+0xf4>)
 811801a:	681b      	ldr	r3, [r3, #0]
 811801c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 811801e:	2b00      	cmp	r3, #0
 8118020:	dd9c      	ble.n	8117f5c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8118022:	68bb      	ldr	r3, [r7, #8]
}
 8118024:	4618      	mov	r0, r3
 8118026:	3718      	adds	r7, #24
 8118028:	46bd      	mov	sp, r7
 811802a:	bdb0      	pop	{r4, r5, r7, pc}
 811802c:	0811e888 	.word	0x0811e888
 8118030:	0811ebb0 	.word	0x0811ebb0
 8118034:	0811e914 	.word	0x0811e914
 8118038:	10011d54 	.word	0x10011d54
 811803c:	0811ebd8 	.word	0x0811ebd8
 8118040:	10011d50 	.word	0x10011d50

08118044 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8118044:	b5b0      	push	{r4, r5, r7, lr}
 8118046:	b094      	sub	sp, #80	@ 0x50
 8118048:	af00      	add	r7, sp, #0
 811804a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 811804c:	2300      	movs	r3, #0
 811804e:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8118050:	687b      	ldr	r3, [r7, #4]
 8118052:	2b00      	cmp	r3, #0
 8118054:	d106      	bne.n	8118064 <tcp_receive+0x20>
 8118056:	4b91      	ldr	r3, [pc, #580]	@ (811829c <tcp_receive+0x258>)
 8118058:	f240 427b 	movw	r2, #1147	@ 0x47b
 811805c:	4990      	ldr	r1, [pc, #576]	@ (81182a0 <tcp_receive+0x25c>)
 811805e:	4891      	ldr	r0, [pc, #580]	@ (81182a4 <tcp_receive+0x260>)
 8118060:	f003 fef4 	bl	811be4c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8118064:	687b      	ldr	r3, [r7, #4]
 8118066:	7d1b      	ldrb	r3, [r3, #20]
 8118068:	2b03      	cmp	r3, #3
 811806a:	d806      	bhi.n	811807a <tcp_receive+0x36>
 811806c:	4b8b      	ldr	r3, [pc, #556]	@ (811829c <tcp_receive+0x258>)
 811806e:	f240 427c 	movw	r2, #1148	@ 0x47c
 8118072:	498d      	ldr	r1, [pc, #564]	@ (81182a8 <tcp_receive+0x264>)
 8118074:	488b      	ldr	r0, [pc, #556]	@ (81182a4 <tcp_receive+0x260>)
 8118076:	f003 fee9 	bl	811be4c <iprintf>

  if (flags & TCP_ACK) {
 811807a:	4b8c      	ldr	r3, [pc, #560]	@ (81182ac <tcp_receive+0x268>)
 811807c:	781b      	ldrb	r3, [r3, #0]
 811807e:	f003 0310 	and.w	r3, r3, #16
 8118082:	2b00      	cmp	r3, #0
 8118084:	f000 8264 	beq.w	8118550 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8118088:	687b      	ldr	r3, [r7, #4]
 811808a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811808e:	461a      	mov	r2, r3
 8118090:	687b      	ldr	r3, [r7, #4]
 8118092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8118094:	4413      	add	r3, r2
 8118096:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8118098:	687b      	ldr	r3, [r7, #4]
 811809a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 811809c:	4b84      	ldr	r3, [pc, #528]	@ (81182b0 <tcp_receive+0x26c>)
 811809e:	681b      	ldr	r3, [r3, #0]
 81180a0:	1ad3      	subs	r3, r2, r3
 81180a2:	2b00      	cmp	r3, #0
 81180a4:	db1b      	blt.n	81180de <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 81180a6:	687b      	ldr	r3, [r7, #4]
 81180a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 81180aa:	4b81      	ldr	r3, [pc, #516]	@ (81182b0 <tcp_receive+0x26c>)
 81180ac:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 81180ae:	429a      	cmp	r2, r3
 81180b0:	d106      	bne.n	81180c0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 81180b2:	687b      	ldr	r3, [r7, #4]
 81180b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 81180b6:	4b7f      	ldr	r3, [pc, #508]	@ (81182b4 <tcp_receive+0x270>)
 81180b8:	681b      	ldr	r3, [r3, #0]
 81180ba:	1ad3      	subs	r3, r2, r3
 81180bc:	2b00      	cmp	r3, #0
 81180be:	db0e      	blt.n	81180de <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 81180c0:	687b      	ldr	r3, [r7, #4]
 81180c2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 81180c4:	4b7b      	ldr	r3, [pc, #492]	@ (81182b4 <tcp_receive+0x270>)
 81180c6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 81180c8:	429a      	cmp	r2, r3
 81180ca:	d125      	bne.n	8118118 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 81180cc:	4b7a      	ldr	r3, [pc, #488]	@ (81182b8 <tcp_receive+0x274>)
 81180ce:	681b      	ldr	r3, [r3, #0]
 81180d0:	89db      	ldrh	r3, [r3, #14]
 81180d2:	b29a      	uxth	r2, r3
 81180d4:	687b      	ldr	r3, [r7, #4]
 81180d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 81180da:	429a      	cmp	r2, r3
 81180dc:	d91c      	bls.n	8118118 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 81180de:	4b76      	ldr	r3, [pc, #472]	@ (81182b8 <tcp_receive+0x274>)
 81180e0:	681b      	ldr	r3, [r3, #0]
 81180e2:	89db      	ldrh	r3, [r3, #14]
 81180e4:	b29a      	uxth	r2, r3
 81180e6:	687b      	ldr	r3, [r7, #4]
 81180e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 81180ec:	687b      	ldr	r3, [r7, #4]
 81180ee:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 81180f2:	687b      	ldr	r3, [r7, #4]
 81180f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 81180f8:	429a      	cmp	r2, r3
 81180fa:	d205      	bcs.n	8118108 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 81180fc:	687b      	ldr	r3, [r7, #4]
 81180fe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8118102:	687b      	ldr	r3, [r7, #4]
 8118104:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8118108:	4b69      	ldr	r3, [pc, #420]	@ (81182b0 <tcp_receive+0x26c>)
 811810a:	681a      	ldr	r2, [r3, #0]
 811810c:	687b      	ldr	r3, [r7, #4]
 811810e:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8118110:	4b68      	ldr	r3, [pc, #416]	@ (81182b4 <tcp_receive+0x270>)
 8118112:	681a      	ldr	r2, [r3, #0]
 8118114:	687b      	ldr	r3, [r7, #4]
 8118116:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8118118:	4b66      	ldr	r3, [pc, #408]	@ (81182b4 <tcp_receive+0x270>)
 811811a:	681a      	ldr	r2, [r3, #0]
 811811c:	687b      	ldr	r3, [r7, #4]
 811811e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8118120:	1ad3      	subs	r3, r2, r3
 8118122:	2b00      	cmp	r3, #0
 8118124:	dc58      	bgt.n	81181d8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8118126:	4b65      	ldr	r3, [pc, #404]	@ (81182bc <tcp_receive+0x278>)
 8118128:	881b      	ldrh	r3, [r3, #0]
 811812a:	2b00      	cmp	r3, #0
 811812c:	d14b      	bne.n	81181c6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 811812e:	687b      	ldr	r3, [r7, #4]
 8118130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8118132:	687a      	ldr	r2, [r7, #4]
 8118134:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8118138:	4413      	add	r3, r2
 811813a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 811813c:	429a      	cmp	r2, r3
 811813e:	d142      	bne.n	81181c6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8118140:	687b      	ldr	r3, [r7, #4]
 8118142:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8118146:	2b00      	cmp	r3, #0
 8118148:	db3d      	blt.n	81181c6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 811814a:	687b      	ldr	r3, [r7, #4]
 811814c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 811814e:	4b59      	ldr	r3, [pc, #356]	@ (81182b4 <tcp_receive+0x270>)
 8118150:	681b      	ldr	r3, [r3, #0]
 8118152:	429a      	cmp	r2, r3
 8118154:	d137      	bne.n	81181c6 <tcp_receive+0x182>
              found_dupack = 1;
 8118156:	2301      	movs	r3, #1
 8118158:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 811815a:	687b      	ldr	r3, [r7, #4]
 811815c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8118160:	2bff      	cmp	r3, #255	@ 0xff
 8118162:	d007      	beq.n	8118174 <tcp_receive+0x130>
                ++pcb->dupacks;
 8118164:	687b      	ldr	r3, [r7, #4]
 8118166:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 811816a:	3301      	adds	r3, #1
 811816c:	b2da      	uxtb	r2, r3
 811816e:	687b      	ldr	r3, [r7, #4]
 8118170:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8118174:	687b      	ldr	r3, [r7, #4]
 8118176:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 811817a:	2b03      	cmp	r3, #3
 811817c:	d91b      	bls.n	81181b6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 811817e:	687b      	ldr	r3, [r7, #4]
 8118180:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8118184:	687b      	ldr	r3, [r7, #4]
 8118186:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8118188:	4413      	add	r3, r2
 811818a:	b29a      	uxth	r2, r3
 811818c:	687b      	ldr	r3, [r7, #4]
 811818e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8118192:	429a      	cmp	r2, r3
 8118194:	d30a      	bcc.n	81181ac <tcp_receive+0x168>
 8118196:	687b      	ldr	r3, [r7, #4]
 8118198:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811819c:	687b      	ldr	r3, [r7, #4]
 811819e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81181a0:	4413      	add	r3, r2
 81181a2:	b29a      	uxth	r2, r3
 81181a4:	687b      	ldr	r3, [r7, #4]
 81181a6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 81181aa:	e004      	b.n	81181b6 <tcp_receive+0x172>
 81181ac:	687b      	ldr	r3, [r7, #4]
 81181ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 81181b2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 81181b6:	687b      	ldr	r3, [r7, #4]
 81181b8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 81181bc:	2b02      	cmp	r3, #2
 81181be:	d902      	bls.n	81181c6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 81181c0:	6878      	ldr	r0, [r7, #4]
 81181c2:	f002 fb41 	bl	811a848 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 81181c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81181c8:	2b00      	cmp	r3, #0
 81181ca:	f040 8161 	bne.w	8118490 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 81181ce:	687b      	ldr	r3, [r7, #4]
 81181d0:	2200      	movs	r2, #0
 81181d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 81181d6:	e15b      	b.n	8118490 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 81181d8:	4b36      	ldr	r3, [pc, #216]	@ (81182b4 <tcp_receive+0x270>)
 81181da:	681a      	ldr	r2, [r3, #0]
 81181dc:	687b      	ldr	r3, [r7, #4]
 81181de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81181e0:	1ad3      	subs	r3, r2, r3
 81181e2:	3b01      	subs	r3, #1
 81181e4:	2b00      	cmp	r3, #0
 81181e6:	f2c0 814e 	blt.w	8118486 <tcp_receive+0x442>
 81181ea:	4b32      	ldr	r3, [pc, #200]	@ (81182b4 <tcp_receive+0x270>)
 81181ec:	681a      	ldr	r2, [r3, #0]
 81181ee:	687b      	ldr	r3, [r7, #4]
 81181f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81181f2:	1ad3      	subs	r3, r2, r3
 81181f4:	2b00      	cmp	r3, #0
 81181f6:	f300 8146 	bgt.w	8118486 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 81181fa:	687b      	ldr	r3, [r7, #4]
 81181fc:	8b5b      	ldrh	r3, [r3, #26]
 81181fe:	f003 0304 	and.w	r3, r3, #4
 8118202:	2b00      	cmp	r3, #0
 8118204:	d010      	beq.n	8118228 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8118206:	687b      	ldr	r3, [r7, #4]
 8118208:	8b5b      	ldrh	r3, [r3, #26]
 811820a:	f023 0304 	bic.w	r3, r3, #4
 811820e:	b29a      	uxth	r2, r3
 8118210:	687b      	ldr	r3, [r7, #4]
 8118212:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8118214:	687b      	ldr	r3, [r7, #4]
 8118216:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 811821a:	687b      	ldr	r3, [r7, #4]
 811821c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8118220:	687b      	ldr	r3, [r7, #4]
 8118222:	2200      	movs	r2, #0
 8118224:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8118228:	687b      	ldr	r3, [r7, #4]
 811822a:	2200      	movs	r2, #0
 811822c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8118230:	687b      	ldr	r3, [r7, #4]
 8118232:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8118236:	10db      	asrs	r3, r3, #3
 8118238:	b21b      	sxth	r3, r3
 811823a:	b29a      	uxth	r2, r3
 811823c:	687b      	ldr	r3, [r7, #4]
 811823e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8118242:	b29b      	uxth	r3, r3
 8118244:	4413      	add	r3, r2
 8118246:	b29b      	uxth	r3, r3
 8118248:	b21a      	sxth	r2, r3
 811824a:	687b      	ldr	r3, [r7, #4]
 811824c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8118250:	4b18      	ldr	r3, [pc, #96]	@ (81182b4 <tcp_receive+0x270>)
 8118252:	681b      	ldr	r3, [r3, #0]
 8118254:	b29a      	uxth	r2, r3
 8118256:	687b      	ldr	r3, [r7, #4]
 8118258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811825a:	b29b      	uxth	r3, r3
 811825c:	1ad3      	subs	r3, r2, r3
 811825e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8118260:	687b      	ldr	r3, [r7, #4]
 8118262:	2200      	movs	r2, #0
 8118264:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8118268:	4b12      	ldr	r3, [pc, #72]	@ (81182b4 <tcp_receive+0x270>)
 811826a:	681a      	ldr	r2, [r3, #0]
 811826c:	687b      	ldr	r3, [r7, #4]
 811826e:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8118270:	687b      	ldr	r3, [r7, #4]
 8118272:	7d1b      	ldrb	r3, [r3, #20]
 8118274:	2b03      	cmp	r3, #3
 8118276:	f240 8097 	bls.w	81183a8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 811827a:	687b      	ldr	r3, [r7, #4]
 811827c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8118280:	687b      	ldr	r3, [r7, #4]
 8118282:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8118286:	429a      	cmp	r2, r3
 8118288:	d245      	bcs.n	8118316 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 811828a:	687b      	ldr	r3, [r7, #4]
 811828c:	8b5b      	ldrh	r3, [r3, #26]
 811828e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8118292:	2b00      	cmp	r3, #0
 8118294:	d014      	beq.n	81182c0 <tcp_receive+0x27c>
 8118296:	2301      	movs	r3, #1
 8118298:	e013      	b.n	81182c2 <tcp_receive+0x27e>
 811829a:	bf00      	nop
 811829c:	0811e888 	.word	0x0811e888
 81182a0:	0811ebf8 	.word	0x0811ebf8
 81182a4:	0811e914 	.word	0x0811e914
 81182a8:	0811ec14 	.word	0x0811ec14
 81182ac:	10011d58 	.word	0x10011d58
 81182b0:	10011d4c 	.word	0x10011d4c
 81182b4:	10011d50 	.word	0x10011d50
 81182b8:	10011d3c 	.word	0x10011d3c
 81182bc:	10011d56 	.word	0x10011d56
 81182c0:	2302      	movs	r3, #2
 81182c2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 81182c6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 81182ca:	b29a      	uxth	r2, r3
 81182cc:	687b      	ldr	r3, [r7, #4]
 81182ce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81182d0:	fb12 f303 	smulbb	r3, r2, r3
 81182d4:	b29b      	uxth	r3, r3
 81182d6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 81182d8:	4293      	cmp	r3, r2
 81182da:	bf28      	it	cs
 81182dc:	4613      	movcs	r3, r2
 81182de:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 81182e0:	687b      	ldr	r3, [r7, #4]
 81182e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 81182e6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 81182e8:	4413      	add	r3, r2
 81182ea:	b29a      	uxth	r2, r3
 81182ec:	687b      	ldr	r3, [r7, #4]
 81182ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 81182f2:	429a      	cmp	r2, r3
 81182f4:	d309      	bcc.n	811830a <tcp_receive+0x2c6>
 81182f6:	687b      	ldr	r3, [r7, #4]
 81182f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 81182fc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 81182fe:	4413      	add	r3, r2
 8118300:	b29a      	uxth	r2, r3
 8118302:	687b      	ldr	r3, [r7, #4]
 8118304:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8118308:	e04e      	b.n	81183a8 <tcp_receive+0x364>
 811830a:	687b      	ldr	r3, [r7, #4]
 811830c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8118310:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8118314:	e048      	b.n	81183a8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8118316:	687b      	ldr	r3, [r7, #4]
 8118318:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 811831c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 811831e:	4413      	add	r3, r2
 8118320:	b29a      	uxth	r2, r3
 8118322:	687b      	ldr	r3, [r7, #4]
 8118324:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8118328:	429a      	cmp	r2, r3
 811832a:	d309      	bcc.n	8118340 <tcp_receive+0x2fc>
 811832c:	687b      	ldr	r3, [r7, #4]
 811832e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8118332:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8118334:	4413      	add	r3, r2
 8118336:	b29a      	uxth	r2, r3
 8118338:	687b      	ldr	r3, [r7, #4]
 811833a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 811833e:	e004      	b.n	811834a <tcp_receive+0x306>
 8118340:	687b      	ldr	r3, [r7, #4]
 8118342:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8118346:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 811834a:	687b      	ldr	r3, [r7, #4]
 811834c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8118350:	687b      	ldr	r3, [r7, #4]
 8118352:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8118356:	429a      	cmp	r2, r3
 8118358:	d326      	bcc.n	81183a8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 811835a:	687b      	ldr	r3, [r7, #4]
 811835c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8118360:	687b      	ldr	r3, [r7, #4]
 8118362:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8118366:	1ad3      	subs	r3, r2, r3
 8118368:	b29a      	uxth	r2, r3
 811836a:	687b      	ldr	r3, [r7, #4]
 811836c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8118370:	687b      	ldr	r3, [r7, #4]
 8118372:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8118376:	687b      	ldr	r3, [r7, #4]
 8118378:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811837a:	4413      	add	r3, r2
 811837c:	b29a      	uxth	r2, r3
 811837e:	687b      	ldr	r3, [r7, #4]
 8118380:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8118384:	429a      	cmp	r2, r3
 8118386:	d30a      	bcc.n	811839e <tcp_receive+0x35a>
 8118388:	687b      	ldr	r3, [r7, #4]
 811838a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811838e:	687b      	ldr	r3, [r7, #4]
 8118390:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8118392:	4413      	add	r3, r2
 8118394:	b29a      	uxth	r2, r3
 8118396:	687b      	ldr	r3, [r7, #4]
 8118398:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 811839c:	e004      	b.n	81183a8 <tcp_receive+0x364>
 811839e:	687b      	ldr	r3, [r7, #4]
 81183a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 81183a4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 81183a8:	687b      	ldr	r3, [r7, #4]
 81183aa:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 81183ac:	687b      	ldr	r3, [r7, #4]
 81183ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81183b0:	4a98      	ldr	r2, [pc, #608]	@ (8118614 <tcp_receive+0x5d0>)
 81183b2:	6878      	ldr	r0, [r7, #4]
 81183b4:	f7ff fdca 	bl	8117f4c <tcp_free_acked_segments>
 81183b8:	4602      	mov	r2, r0
 81183ba:	687b      	ldr	r3, [r7, #4]
 81183bc:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 81183be:	687b      	ldr	r3, [r7, #4]
 81183c0:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 81183c2:	687b      	ldr	r3, [r7, #4]
 81183c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81183c6:	4a94      	ldr	r2, [pc, #592]	@ (8118618 <tcp_receive+0x5d4>)
 81183c8:	6878      	ldr	r0, [r7, #4]
 81183ca:	f7ff fdbf 	bl	8117f4c <tcp_free_acked_segments>
 81183ce:	4602      	mov	r2, r0
 81183d0:	687b      	ldr	r3, [r7, #4]
 81183d2:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 81183d4:	687b      	ldr	r3, [r7, #4]
 81183d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81183d8:	2b00      	cmp	r3, #0
 81183da:	d104      	bne.n	81183e6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 81183dc:	687b      	ldr	r3, [r7, #4]
 81183de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 81183e2:	861a      	strh	r2, [r3, #48]	@ 0x30
 81183e4:	e002      	b.n	81183ec <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 81183e6:	687b      	ldr	r3, [r7, #4]
 81183e8:	2200      	movs	r2, #0
 81183ea:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 81183ec:	687b      	ldr	r3, [r7, #4]
 81183ee:	2200      	movs	r2, #0
 81183f0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 81183f2:	687b      	ldr	r3, [r7, #4]
 81183f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81183f6:	2b00      	cmp	r3, #0
 81183f8:	d103      	bne.n	8118402 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 81183fa:	687b      	ldr	r3, [r7, #4]
 81183fc:	2200      	movs	r2, #0
 81183fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8118402:	687b      	ldr	r3, [r7, #4]
 8118404:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8118408:	4b84      	ldr	r3, [pc, #528]	@ (811861c <tcp_receive+0x5d8>)
 811840a:	881b      	ldrh	r3, [r3, #0]
 811840c:	4413      	add	r3, r2
 811840e:	b29a      	uxth	r2, r3
 8118410:	687b      	ldr	r3, [r7, #4]
 8118412:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8118416:	687b      	ldr	r3, [r7, #4]
 8118418:	8b5b      	ldrh	r3, [r3, #26]
 811841a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 811841e:	2b00      	cmp	r3, #0
 8118420:	d035      	beq.n	811848e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8118422:	687b      	ldr	r3, [r7, #4]
 8118424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8118426:	2b00      	cmp	r3, #0
 8118428:	d118      	bne.n	811845c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 811842a:	687b      	ldr	r3, [r7, #4]
 811842c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811842e:	2b00      	cmp	r3, #0
 8118430:	d00c      	beq.n	811844c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8118432:	687b      	ldr	r3, [r7, #4]
 8118434:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8118436:	687b      	ldr	r3, [r7, #4]
 8118438:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811843a:	68db      	ldr	r3, [r3, #12]
 811843c:	685b      	ldr	r3, [r3, #4]
 811843e:	4618      	mov	r0, r3
 8118440:	f7f8 fad1 	bl	81109e6 <lwip_htonl>
 8118444:	4603      	mov	r3, r0
 8118446:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8118448:	2b00      	cmp	r3, #0
 811844a:	dc20      	bgt.n	811848e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 811844c:	687b      	ldr	r3, [r7, #4]
 811844e:	8b5b      	ldrh	r3, [r3, #26]
 8118450:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8118454:	b29a      	uxth	r2, r3
 8118456:	687b      	ldr	r3, [r7, #4]
 8118458:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 811845a:	e018      	b.n	811848e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 811845c:	687b      	ldr	r3, [r7, #4]
 811845e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8118460:	687b      	ldr	r3, [r7, #4]
 8118462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8118464:	68db      	ldr	r3, [r3, #12]
 8118466:	685b      	ldr	r3, [r3, #4]
 8118468:	4618      	mov	r0, r3
 811846a:	f7f8 fabc 	bl	81109e6 <lwip_htonl>
 811846e:	4603      	mov	r3, r0
 8118470:	1ae3      	subs	r3, r4, r3
 8118472:	2b00      	cmp	r3, #0
 8118474:	dc0b      	bgt.n	811848e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8118476:	687b      	ldr	r3, [r7, #4]
 8118478:	8b5b      	ldrh	r3, [r3, #26]
 811847a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 811847e:	b29a      	uxth	r2, r3
 8118480:	687b      	ldr	r3, [r7, #4]
 8118482:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8118484:	e003      	b.n	811848e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8118486:	6878      	ldr	r0, [r7, #4]
 8118488:	f002 fbca 	bl	811ac20 <tcp_send_empty_ack>
 811848c:	e000      	b.n	8118490 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 811848e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8118490:	687b      	ldr	r3, [r7, #4]
 8118492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8118494:	2b00      	cmp	r3, #0
 8118496:	d05b      	beq.n	8118550 <tcp_receive+0x50c>
 8118498:	687b      	ldr	r3, [r7, #4]
 811849a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 811849c:	4b60      	ldr	r3, [pc, #384]	@ (8118620 <tcp_receive+0x5dc>)
 811849e:	681b      	ldr	r3, [r3, #0]
 81184a0:	1ad3      	subs	r3, r2, r3
 81184a2:	2b00      	cmp	r3, #0
 81184a4:	da54      	bge.n	8118550 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 81184a6:	4b5f      	ldr	r3, [pc, #380]	@ (8118624 <tcp_receive+0x5e0>)
 81184a8:	681b      	ldr	r3, [r3, #0]
 81184aa:	b29a      	uxth	r2, r3
 81184ac:	687b      	ldr	r3, [r7, #4]
 81184ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81184b0:	b29b      	uxth	r3, r3
 81184b2:	1ad3      	subs	r3, r2, r3
 81184b4:	b29b      	uxth	r3, r3
 81184b6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 81184ba:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 81184be:	687b      	ldr	r3, [r7, #4]
 81184c0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 81184c4:	10db      	asrs	r3, r3, #3
 81184c6:	b21b      	sxth	r3, r3
 81184c8:	b29b      	uxth	r3, r3
 81184ca:	1ad3      	subs	r3, r2, r3
 81184cc:	b29b      	uxth	r3, r3
 81184ce:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 81184d2:	687b      	ldr	r3, [r7, #4]
 81184d4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 81184d8:	b29a      	uxth	r2, r3
 81184da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 81184de:	4413      	add	r3, r2
 81184e0:	b29b      	uxth	r3, r3
 81184e2:	b21a      	sxth	r2, r3
 81184e4:	687b      	ldr	r3, [r7, #4]
 81184e6:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 81184e8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 81184ec:	2b00      	cmp	r3, #0
 81184ee:	da05      	bge.n	81184fc <tcp_receive+0x4b8>
        m = (s16_t) - m;
 81184f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 81184f4:	425b      	negs	r3, r3
 81184f6:	b29b      	uxth	r3, r3
 81184f8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 81184fc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8118500:	687b      	ldr	r3, [r7, #4]
 8118502:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8118506:	109b      	asrs	r3, r3, #2
 8118508:	b21b      	sxth	r3, r3
 811850a:	b29b      	uxth	r3, r3
 811850c:	1ad3      	subs	r3, r2, r3
 811850e:	b29b      	uxth	r3, r3
 8118510:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8118514:	687b      	ldr	r3, [r7, #4]
 8118516:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 811851a:	b29a      	uxth	r2, r3
 811851c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8118520:	4413      	add	r3, r2
 8118522:	b29b      	uxth	r3, r3
 8118524:	b21a      	sxth	r2, r3
 8118526:	687b      	ldr	r3, [r7, #4]
 8118528:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 811852a:	687b      	ldr	r3, [r7, #4]
 811852c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8118530:	10db      	asrs	r3, r3, #3
 8118532:	b21b      	sxth	r3, r3
 8118534:	b29a      	uxth	r2, r3
 8118536:	687b      	ldr	r3, [r7, #4]
 8118538:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 811853c:	b29b      	uxth	r3, r3
 811853e:	4413      	add	r3, r2
 8118540:	b29b      	uxth	r3, r3
 8118542:	b21a      	sxth	r2, r3
 8118544:	687b      	ldr	r3, [r7, #4]
 8118546:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 811854a:	687b      	ldr	r3, [r7, #4]
 811854c:	2200      	movs	r2, #0
 811854e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8118550:	4b35      	ldr	r3, [pc, #212]	@ (8118628 <tcp_receive+0x5e4>)
 8118552:	881b      	ldrh	r3, [r3, #0]
 8118554:	2b00      	cmp	r3, #0
 8118556:	f000 84df 	beq.w	8118f18 <tcp_receive+0xed4>
 811855a:	687b      	ldr	r3, [r7, #4]
 811855c:	7d1b      	ldrb	r3, [r3, #20]
 811855e:	2b06      	cmp	r3, #6
 8118560:	f200 84da 	bhi.w	8118f18 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8118564:	687b      	ldr	r3, [r7, #4]
 8118566:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8118568:	4b30      	ldr	r3, [pc, #192]	@ (811862c <tcp_receive+0x5e8>)
 811856a:	681b      	ldr	r3, [r3, #0]
 811856c:	1ad3      	subs	r3, r2, r3
 811856e:	3b01      	subs	r3, #1
 8118570:	2b00      	cmp	r3, #0
 8118572:	f2c0 808f 	blt.w	8118694 <tcp_receive+0x650>
 8118576:	687b      	ldr	r3, [r7, #4]
 8118578:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811857a:	4b2b      	ldr	r3, [pc, #172]	@ (8118628 <tcp_receive+0x5e4>)
 811857c:	881b      	ldrh	r3, [r3, #0]
 811857e:	4619      	mov	r1, r3
 8118580:	4b2a      	ldr	r3, [pc, #168]	@ (811862c <tcp_receive+0x5e8>)
 8118582:	681b      	ldr	r3, [r3, #0]
 8118584:	440b      	add	r3, r1
 8118586:	1ad3      	subs	r3, r2, r3
 8118588:	3301      	adds	r3, #1
 811858a:	2b00      	cmp	r3, #0
 811858c:	f300 8082 	bgt.w	8118694 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8118590:	4b27      	ldr	r3, [pc, #156]	@ (8118630 <tcp_receive+0x5ec>)
 8118592:	685b      	ldr	r3, [r3, #4]
 8118594:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8118596:	687b      	ldr	r3, [r7, #4]
 8118598:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811859a:	4b24      	ldr	r3, [pc, #144]	@ (811862c <tcp_receive+0x5e8>)
 811859c:	681b      	ldr	r3, [r3, #0]
 811859e:	1ad3      	subs	r3, r2, r3
 81185a0:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 81185a2:	4b23      	ldr	r3, [pc, #140]	@ (8118630 <tcp_receive+0x5ec>)
 81185a4:	685b      	ldr	r3, [r3, #4]
 81185a6:	2b00      	cmp	r3, #0
 81185a8:	d106      	bne.n	81185b8 <tcp_receive+0x574>
 81185aa:	4b22      	ldr	r3, [pc, #136]	@ (8118634 <tcp_receive+0x5f0>)
 81185ac:	f240 5294 	movw	r2, #1428	@ 0x594
 81185b0:	4921      	ldr	r1, [pc, #132]	@ (8118638 <tcp_receive+0x5f4>)
 81185b2:	4822      	ldr	r0, [pc, #136]	@ (811863c <tcp_receive+0x5f8>)
 81185b4:	f003 fc4a 	bl	811be4c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 81185b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81185ba:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 81185be:	4293      	cmp	r3, r2
 81185c0:	d906      	bls.n	81185d0 <tcp_receive+0x58c>
 81185c2:	4b1c      	ldr	r3, [pc, #112]	@ (8118634 <tcp_receive+0x5f0>)
 81185c4:	f240 5295 	movw	r2, #1429	@ 0x595
 81185c8:	491d      	ldr	r1, [pc, #116]	@ (8118640 <tcp_receive+0x5fc>)
 81185ca:	481c      	ldr	r0, [pc, #112]	@ (811863c <tcp_receive+0x5f8>)
 81185cc:	f003 fc3e 	bl	811be4c <iprintf>
      off = (u16_t)off32;
 81185d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81185d2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 81185d6:	4b16      	ldr	r3, [pc, #88]	@ (8118630 <tcp_receive+0x5ec>)
 81185d8:	685b      	ldr	r3, [r3, #4]
 81185da:	891b      	ldrh	r3, [r3, #8]
 81185dc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 81185e0:	429a      	cmp	r2, r3
 81185e2:	d906      	bls.n	81185f2 <tcp_receive+0x5ae>
 81185e4:	4b13      	ldr	r3, [pc, #76]	@ (8118634 <tcp_receive+0x5f0>)
 81185e6:	f240 5297 	movw	r2, #1431	@ 0x597
 81185ea:	4916      	ldr	r1, [pc, #88]	@ (8118644 <tcp_receive+0x600>)
 81185ec:	4813      	ldr	r0, [pc, #76]	@ (811863c <tcp_receive+0x5f8>)
 81185ee:	f003 fc2d 	bl	811be4c <iprintf>
      inseg.len -= off;
 81185f2:	4b0f      	ldr	r3, [pc, #60]	@ (8118630 <tcp_receive+0x5ec>)
 81185f4:	891a      	ldrh	r2, [r3, #8]
 81185f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 81185fa:	1ad3      	subs	r3, r2, r3
 81185fc:	b29a      	uxth	r2, r3
 81185fe:	4b0c      	ldr	r3, [pc, #48]	@ (8118630 <tcp_receive+0x5ec>)
 8118600:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8118602:	4b0b      	ldr	r3, [pc, #44]	@ (8118630 <tcp_receive+0x5ec>)
 8118604:	685b      	ldr	r3, [r3, #4]
 8118606:	891a      	ldrh	r2, [r3, #8]
 8118608:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 811860c:	1ad3      	subs	r3, r2, r3
 811860e:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8118610:	e02a      	b.n	8118668 <tcp_receive+0x624>
 8118612:	bf00      	nop
 8118614:	0811ec30 	.word	0x0811ec30
 8118618:	0811ec38 	.word	0x0811ec38
 811861c:	10011d54 	.word	0x10011d54
 8118620:	10011d50 	.word	0x10011d50
 8118624:	10011d14 	.word	0x10011d14
 8118628:	10011d56 	.word	0x10011d56
 811862c:	10011d4c 	.word	0x10011d4c
 8118630:	10011d2c 	.word	0x10011d2c
 8118634:	0811e888 	.word	0x0811e888
 8118638:	0811ec40 	.word	0x0811ec40
 811863c:	0811e914 	.word	0x0811e914
 8118640:	0811ec50 	.word	0x0811ec50
 8118644:	0811ec60 	.word	0x0811ec60
        off -= p->len;
 8118648:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811864a:	895b      	ldrh	r3, [r3, #10]
 811864c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8118650:	1ad3      	subs	r3, r2, r3
 8118652:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8118656:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8118658:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 811865a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 811865c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811865e:	2200      	movs	r2, #0
 8118660:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8118662:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8118664:	681b      	ldr	r3, [r3, #0]
 8118666:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8118668:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811866a:	895b      	ldrh	r3, [r3, #10]
 811866c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8118670:	429a      	cmp	r2, r3
 8118672:	d8e9      	bhi.n	8118648 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8118674:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8118678:	4619      	mov	r1, r3
 811867a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 811867c:	f7fc f89e 	bl	81147bc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8118680:	687b      	ldr	r3, [r7, #4]
 8118682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8118684:	4a90      	ldr	r2, [pc, #576]	@ (81188c8 <tcp_receive+0x884>)
 8118686:	6013      	str	r3, [r2, #0]
 8118688:	4b90      	ldr	r3, [pc, #576]	@ (81188cc <tcp_receive+0x888>)
 811868a:	68db      	ldr	r3, [r3, #12]
 811868c:	4a8e      	ldr	r2, [pc, #568]	@ (81188c8 <tcp_receive+0x884>)
 811868e:	6812      	ldr	r2, [r2, #0]
 8118690:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8118692:	e00d      	b.n	81186b0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8118694:	4b8c      	ldr	r3, [pc, #560]	@ (81188c8 <tcp_receive+0x884>)
 8118696:	681a      	ldr	r2, [r3, #0]
 8118698:	687b      	ldr	r3, [r7, #4]
 811869a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811869c:	1ad3      	subs	r3, r2, r3
 811869e:	2b00      	cmp	r3, #0
 81186a0:	da06      	bge.n	81186b0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 81186a2:	687b      	ldr	r3, [r7, #4]
 81186a4:	8b5b      	ldrh	r3, [r3, #26]
 81186a6:	f043 0302 	orr.w	r3, r3, #2
 81186aa:	b29a      	uxth	r2, r3
 81186ac:	687b      	ldr	r3, [r7, #4]
 81186ae:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 81186b0:	4b85      	ldr	r3, [pc, #532]	@ (81188c8 <tcp_receive+0x884>)
 81186b2:	681a      	ldr	r2, [r3, #0]
 81186b4:	687b      	ldr	r3, [r7, #4]
 81186b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81186b8:	1ad3      	subs	r3, r2, r3
 81186ba:	2b00      	cmp	r3, #0
 81186bc:	f2c0 8427 	blt.w	8118f0e <tcp_receive+0xeca>
 81186c0:	4b81      	ldr	r3, [pc, #516]	@ (81188c8 <tcp_receive+0x884>)
 81186c2:	681a      	ldr	r2, [r3, #0]
 81186c4:	687b      	ldr	r3, [r7, #4]
 81186c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81186c8:	6879      	ldr	r1, [r7, #4]
 81186ca:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 81186cc:	440b      	add	r3, r1
 81186ce:	1ad3      	subs	r3, r2, r3
 81186d0:	3301      	adds	r3, #1
 81186d2:	2b00      	cmp	r3, #0
 81186d4:	f300 841b 	bgt.w	8118f0e <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 81186d8:	687b      	ldr	r3, [r7, #4]
 81186da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81186dc:	4b7a      	ldr	r3, [pc, #488]	@ (81188c8 <tcp_receive+0x884>)
 81186de:	681b      	ldr	r3, [r3, #0]
 81186e0:	429a      	cmp	r2, r3
 81186e2:	f040 8298 	bne.w	8118c16 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 81186e6:	4b79      	ldr	r3, [pc, #484]	@ (81188cc <tcp_receive+0x888>)
 81186e8:	891c      	ldrh	r4, [r3, #8]
 81186ea:	4b78      	ldr	r3, [pc, #480]	@ (81188cc <tcp_receive+0x888>)
 81186ec:	68db      	ldr	r3, [r3, #12]
 81186ee:	899b      	ldrh	r3, [r3, #12]
 81186f0:	b29b      	uxth	r3, r3
 81186f2:	4618      	mov	r0, r3
 81186f4:	f7f8 f962 	bl	81109bc <lwip_htons>
 81186f8:	4603      	mov	r3, r0
 81186fa:	b2db      	uxtb	r3, r3
 81186fc:	f003 0303 	and.w	r3, r3, #3
 8118700:	2b00      	cmp	r3, #0
 8118702:	d001      	beq.n	8118708 <tcp_receive+0x6c4>
 8118704:	2301      	movs	r3, #1
 8118706:	e000      	b.n	811870a <tcp_receive+0x6c6>
 8118708:	2300      	movs	r3, #0
 811870a:	4423      	add	r3, r4
 811870c:	b29a      	uxth	r2, r3
 811870e:	4b70      	ldr	r3, [pc, #448]	@ (81188d0 <tcp_receive+0x88c>)
 8118710:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8118712:	687b      	ldr	r3, [r7, #4]
 8118714:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8118716:	4b6e      	ldr	r3, [pc, #440]	@ (81188d0 <tcp_receive+0x88c>)
 8118718:	881b      	ldrh	r3, [r3, #0]
 811871a:	429a      	cmp	r2, r3
 811871c:	d274      	bcs.n	8118808 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 811871e:	4b6b      	ldr	r3, [pc, #428]	@ (81188cc <tcp_receive+0x888>)
 8118720:	68db      	ldr	r3, [r3, #12]
 8118722:	899b      	ldrh	r3, [r3, #12]
 8118724:	b29b      	uxth	r3, r3
 8118726:	4618      	mov	r0, r3
 8118728:	f7f8 f948 	bl	81109bc <lwip_htons>
 811872c:	4603      	mov	r3, r0
 811872e:	b2db      	uxtb	r3, r3
 8118730:	f003 0301 	and.w	r3, r3, #1
 8118734:	2b00      	cmp	r3, #0
 8118736:	d01e      	beq.n	8118776 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8118738:	4b64      	ldr	r3, [pc, #400]	@ (81188cc <tcp_receive+0x888>)
 811873a:	68db      	ldr	r3, [r3, #12]
 811873c:	899b      	ldrh	r3, [r3, #12]
 811873e:	b29b      	uxth	r3, r3
 8118740:	b21b      	sxth	r3, r3
 8118742:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8118746:	b21c      	sxth	r4, r3
 8118748:	4b60      	ldr	r3, [pc, #384]	@ (81188cc <tcp_receive+0x888>)
 811874a:	68db      	ldr	r3, [r3, #12]
 811874c:	899b      	ldrh	r3, [r3, #12]
 811874e:	b29b      	uxth	r3, r3
 8118750:	4618      	mov	r0, r3
 8118752:	f7f8 f933 	bl	81109bc <lwip_htons>
 8118756:	4603      	mov	r3, r0
 8118758:	b2db      	uxtb	r3, r3
 811875a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 811875e:	b29b      	uxth	r3, r3
 8118760:	4618      	mov	r0, r3
 8118762:	f7f8 f92b 	bl	81109bc <lwip_htons>
 8118766:	4603      	mov	r3, r0
 8118768:	b21b      	sxth	r3, r3
 811876a:	4323      	orrs	r3, r4
 811876c:	b21a      	sxth	r2, r3
 811876e:	4b57      	ldr	r3, [pc, #348]	@ (81188cc <tcp_receive+0x888>)
 8118770:	68db      	ldr	r3, [r3, #12]
 8118772:	b292      	uxth	r2, r2
 8118774:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8118776:	687b      	ldr	r3, [r7, #4]
 8118778:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 811877a:	4b54      	ldr	r3, [pc, #336]	@ (81188cc <tcp_receive+0x888>)
 811877c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 811877e:	4b53      	ldr	r3, [pc, #332]	@ (81188cc <tcp_receive+0x888>)
 8118780:	68db      	ldr	r3, [r3, #12]
 8118782:	899b      	ldrh	r3, [r3, #12]
 8118784:	b29b      	uxth	r3, r3
 8118786:	4618      	mov	r0, r3
 8118788:	f7f8 f918 	bl	81109bc <lwip_htons>
 811878c:	4603      	mov	r3, r0
 811878e:	b2db      	uxtb	r3, r3
 8118790:	f003 0302 	and.w	r3, r3, #2
 8118794:	2b00      	cmp	r3, #0
 8118796:	d005      	beq.n	81187a4 <tcp_receive+0x760>
            inseg.len -= 1;
 8118798:	4b4c      	ldr	r3, [pc, #304]	@ (81188cc <tcp_receive+0x888>)
 811879a:	891b      	ldrh	r3, [r3, #8]
 811879c:	3b01      	subs	r3, #1
 811879e:	b29a      	uxth	r2, r3
 81187a0:	4b4a      	ldr	r3, [pc, #296]	@ (81188cc <tcp_receive+0x888>)
 81187a2:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 81187a4:	4b49      	ldr	r3, [pc, #292]	@ (81188cc <tcp_receive+0x888>)
 81187a6:	685b      	ldr	r3, [r3, #4]
 81187a8:	4a48      	ldr	r2, [pc, #288]	@ (81188cc <tcp_receive+0x888>)
 81187aa:	8912      	ldrh	r2, [r2, #8]
 81187ac:	4611      	mov	r1, r2
 81187ae:	4618      	mov	r0, r3
 81187b0:	f7fb ff06 	bl	81145c0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 81187b4:	4b45      	ldr	r3, [pc, #276]	@ (81188cc <tcp_receive+0x888>)
 81187b6:	891c      	ldrh	r4, [r3, #8]
 81187b8:	4b44      	ldr	r3, [pc, #272]	@ (81188cc <tcp_receive+0x888>)
 81187ba:	68db      	ldr	r3, [r3, #12]
 81187bc:	899b      	ldrh	r3, [r3, #12]
 81187be:	b29b      	uxth	r3, r3
 81187c0:	4618      	mov	r0, r3
 81187c2:	f7f8 f8fb 	bl	81109bc <lwip_htons>
 81187c6:	4603      	mov	r3, r0
 81187c8:	b2db      	uxtb	r3, r3
 81187ca:	f003 0303 	and.w	r3, r3, #3
 81187ce:	2b00      	cmp	r3, #0
 81187d0:	d001      	beq.n	81187d6 <tcp_receive+0x792>
 81187d2:	2301      	movs	r3, #1
 81187d4:	e000      	b.n	81187d8 <tcp_receive+0x794>
 81187d6:	2300      	movs	r3, #0
 81187d8:	4423      	add	r3, r4
 81187da:	b29a      	uxth	r2, r3
 81187dc:	4b3c      	ldr	r3, [pc, #240]	@ (81188d0 <tcp_receive+0x88c>)
 81187de:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 81187e0:	4b3b      	ldr	r3, [pc, #236]	@ (81188d0 <tcp_receive+0x88c>)
 81187e2:	881b      	ldrh	r3, [r3, #0]
 81187e4:	461a      	mov	r2, r3
 81187e6:	4b38      	ldr	r3, [pc, #224]	@ (81188c8 <tcp_receive+0x884>)
 81187e8:	681b      	ldr	r3, [r3, #0]
 81187ea:	441a      	add	r2, r3
 81187ec:	687b      	ldr	r3, [r7, #4]
 81187ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81187f0:	6879      	ldr	r1, [r7, #4]
 81187f2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 81187f4:	440b      	add	r3, r1
 81187f6:	429a      	cmp	r2, r3
 81187f8:	d006      	beq.n	8118808 <tcp_receive+0x7c4>
 81187fa:	4b36      	ldr	r3, [pc, #216]	@ (81188d4 <tcp_receive+0x890>)
 81187fc:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8118800:	4935      	ldr	r1, [pc, #212]	@ (81188d8 <tcp_receive+0x894>)
 8118802:	4836      	ldr	r0, [pc, #216]	@ (81188dc <tcp_receive+0x898>)
 8118804:	f003 fb22 	bl	811be4c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8118808:	687b      	ldr	r3, [r7, #4]
 811880a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 811880c:	2b00      	cmp	r3, #0
 811880e:	f000 80e6 	beq.w	81189de <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8118812:	4b2e      	ldr	r3, [pc, #184]	@ (81188cc <tcp_receive+0x888>)
 8118814:	68db      	ldr	r3, [r3, #12]
 8118816:	899b      	ldrh	r3, [r3, #12]
 8118818:	b29b      	uxth	r3, r3
 811881a:	4618      	mov	r0, r3
 811881c:	f7f8 f8ce 	bl	81109bc <lwip_htons>
 8118820:	4603      	mov	r3, r0
 8118822:	b2db      	uxtb	r3, r3
 8118824:	f003 0301 	and.w	r3, r3, #1
 8118828:	2b00      	cmp	r3, #0
 811882a:	d010      	beq.n	811884e <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 811882c:	e00a      	b.n	8118844 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 811882e:	687b      	ldr	r3, [r7, #4]
 8118830:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8118832:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8118834:	687b      	ldr	r3, [r7, #4]
 8118836:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8118838:	681a      	ldr	r2, [r3, #0]
 811883a:	687b      	ldr	r3, [r7, #4]
 811883c:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 811883e:	68f8      	ldr	r0, [r7, #12]
 8118840:	f7fd fd17 	bl	8116272 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8118844:	687b      	ldr	r3, [r7, #4]
 8118846:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8118848:	2b00      	cmp	r3, #0
 811884a:	d1f0      	bne.n	811882e <tcp_receive+0x7ea>
 811884c:	e0c7      	b.n	81189de <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 811884e:	687b      	ldr	r3, [r7, #4]
 8118850:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8118852:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8118854:	e051      	b.n	81188fa <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8118856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8118858:	68db      	ldr	r3, [r3, #12]
 811885a:	899b      	ldrh	r3, [r3, #12]
 811885c:	b29b      	uxth	r3, r3
 811885e:	4618      	mov	r0, r3
 8118860:	f7f8 f8ac 	bl	81109bc <lwip_htons>
 8118864:	4603      	mov	r3, r0
 8118866:	b2db      	uxtb	r3, r3
 8118868:	f003 0301 	and.w	r3, r3, #1
 811886c:	2b00      	cmp	r3, #0
 811886e:	d03c      	beq.n	81188ea <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8118870:	4b16      	ldr	r3, [pc, #88]	@ (81188cc <tcp_receive+0x888>)
 8118872:	68db      	ldr	r3, [r3, #12]
 8118874:	899b      	ldrh	r3, [r3, #12]
 8118876:	b29b      	uxth	r3, r3
 8118878:	4618      	mov	r0, r3
 811887a:	f7f8 f89f 	bl	81109bc <lwip_htons>
 811887e:	4603      	mov	r3, r0
 8118880:	b2db      	uxtb	r3, r3
 8118882:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8118886:	2b00      	cmp	r3, #0
 8118888:	d12f      	bne.n	81188ea <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 811888a:	4b10      	ldr	r3, [pc, #64]	@ (81188cc <tcp_receive+0x888>)
 811888c:	68db      	ldr	r3, [r3, #12]
 811888e:	899b      	ldrh	r3, [r3, #12]
 8118890:	b29c      	uxth	r4, r3
 8118892:	2001      	movs	r0, #1
 8118894:	f7f8 f892 	bl	81109bc <lwip_htons>
 8118898:	4603      	mov	r3, r0
 811889a:	461a      	mov	r2, r3
 811889c:	4b0b      	ldr	r3, [pc, #44]	@ (81188cc <tcp_receive+0x888>)
 811889e:	68db      	ldr	r3, [r3, #12]
 81188a0:	4322      	orrs	r2, r4
 81188a2:	b292      	uxth	r2, r2
 81188a4:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 81188a6:	4b09      	ldr	r3, [pc, #36]	@ (81188cc <tcp_receive+0x888>)
 81188a8:	891c      	ldrh	r4, [r3, #8]
 81188aa:	4b08      	ldr	r3, [pc, #32]	@ (81188cc <tcp_receive+0x888>)
 81188ac:	68db      	ldr	r3, [r3, #12]
 81188ae:	899b      	ldrh	r3, [r3, #12]
 81188b0:	b29b      	uxth	r3, r3
 81188b2:	4618      	mov	r0, r3
 81188b4:	f7f8 f882 	bl	81109bc <lwip_htons>
 81188b8:	4603      	mov	r3, r0
 81188ba:	b2db      	uxtb	r3, r3
 81188bc:	f003 0303 	and.w	r3, r3, #3
 81188c0:	2b00      	cmp	r3, #0
 81188c2:	d00d      	beq.n	81188e0 <tcp_receive+0x89c>
 81188c4:	2301      	movs	r3, #1
 81188c6:	e00c      	b.n	81188e2 <tcp_receive+0x89e>
 81188c8:	10011d4c 	.word	0x10011d4c
 81188cc:	10011d2c 	.word	0x10011d2c
 81188d0:	10011d56 	.word	0x10011d56
 81188d4:	0811e888 	.word	0x0811e888
 81188d8:	0811ec70 	.word	0x0811ec70
 81188dc:	0811e914 	.word	0x0811e914
 81188e0:	2300      	movs	r3, #0
 81188e2:	4423      	add	r3, r4
 81188e4:	b29a      	uxth	r2, r3
 81188e6:	4b98      	ldr	r3, [pc, #608]	@ (8118b48 <tcp_receive+0xb04>)
 81188e8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 81188ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81188ec:	613b      	str	r3, [r7, #16]
              next = next->next;
 81188ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81188f0:	681b      	ldr	r3, [r3, #0]
 81188f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 81188f4:	6938      	ldr	r0, [r7, #16]
 81188f6:	f7fd fcbc 	bl	8116272 <tcp_seg_free>
            while (next &&
 81188fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81188fc:	2b00      	cmp	r3, #0
 81188fe:	d00e      	beq.n	811891e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8118900:	4b91      	ldr	r3, [pc, #580]	@ (8118b48 <tcp_receive+0xb04>)
 8118902:	881b      	ldrh	r3, [r3, #0]
 8118904:	461a      	mov	r2, r3
 8118906:	4b91      	ldr	r3, [pc, #580]	@ (8118b4c <tcp_receive+0xb08>)
 8118908:	681b      	ldr	r3, [r3, #0]
 811890a:	441a      	add	r2, r3
 811890c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811890e:	68db      	ldr	r3, [r3, #12]
 8118910:	685b      	ldr	r3, [r3, #4]
 8118912:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8118914:	8909      	ldrh	r1, [r1, #8]
 8118916:	440b      	add	r3, r1
 8118918:	1ad3      	subs	r3, r2, r3
            while (next &&
 811891a:	2b00      	cmp	r3, #0
 811891c:	da9b      	bge.n	8118856 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 811891e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8118920:	2b00      	cmp	r3, #0
 8118922:	d059      	beq.n	81189d8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8118924:	4b88      	ldr	r3, [pc, #544]	@ (8118b48 <tcp_receive+0xb04>)
 8118926:	881b      	ldrh	r3, [r3, #0]
 8118928:	461a      	mov	r2, r3
 811892a:	4b88      	ldr	r3, [pc, #544]	@ (8118b4c <tcp_receive+0xb08>)
 811892c:	681b      	ldr	r3, [r3, #0]
 811892e:	441a      	add	r2, r3
 8118930:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8118932:	68db      	ldr	r3, [r3, #12]
 8118934:	685b      	ldr	r3, [r3, #4]
 8118936:	1ad3      	subs	r3, r2, r3
            if (next &&
 8118938:	2b00      	cmp	r3, #0
 811893a:	dd4d      	ble.n	81189d8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 811893c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 811893e:	68db      	ldr	r3, [r3, #12]
 8118940:	685b      	ldr	r3, [r3, #4]
 8118942:	b29a      	uxth	r2, r3
 8118944:	4b81      	ldr	r3, [pc, #516]	@ (8118b4c <tcp_receive+0xb08>)
 8118946:	681b      	ldr	r3, [r3, #0]
 8118948:	b29b      	uxth	r3, r3
 811894a:	1ad3      	subs	r3, r2, r3
 811894c:	b29a      	uxth	r2, r3
 811894e:	4b80      	ldr	r3, [pc, #512]	@ (8118b50 <tcp_receive+0xb0c>)
 8118950:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8118952:	4b7f      	ldr	r3, [pc, #508]	@ (8118b50 <tcp_receive+0xb0c>)
 8118954:	68db      	ldr	r3, [r3, #12]
 8118956:	899b      	ldrh	r3, [r3, #12]
 8118958:	b29b      	uxth	r3, r3
 811895a:	4618      	mov	r0, r3
 811895c:	f7f8 f82e 	bl	81109bc <lwip_htons>
 8118960:	4603      	mov	r3, r0
 8118962:	b2db      	uxtb	r3, r3
 8118964:	f003 0302 	and.w	r3, r3, #2
 8118968:	2b00      	cmp	r3, #0
 811896a:	d005      	beq.n	8118978 <tcp_receive+0x934>
                inseg.len -= 1;
 811896c:	4b78      	ldr	r3, [pc, #480]	@ (8118b50 <tcp_receive+0xb0c>)
 811896e:	891b      	ldrh	r3, [r3, #8]
 8118970:	3b01      	subs	r3, #1
 8118972:	b29a      	uxth	r2, r3
 8118974:	4b76      	ldr	r3, [pc, #472]	@ (8118b50 <tcp_receive+0xb0c>)
 8118976:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8118978:	4b75      	ldr	r3, [pc, #468]	@ (8118b50 <tcp_receive+0xb0c>)
 811897a:	685b      	ldr	r3, [r3, #4]
 811897c:	4a74      	ldr	r2, [pc, #464]	@ (8118b50 <tcp_receive+0xb0c>)
 811897e:	8912      	ldrh	r2, [r2, #8]
 8118980:	4611      	mov	r1, r2
 8118982:	4618      	mov	r0, r3
 8118984:	f7fb fe1c 	bl	81145c0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8118988:	4b71      	ldr	r3, [pc, #452]	@ (8118b50 <tcp_receive+0xb0c>)
 811898a:	891c      	ldrh	r4, [r3, #8]
 811898c:	4b70      	ldr	r3, [pc, #448]	@ (8118b50 <tcp_receive+0xb0c>)
 811898e:	68db      	ldr	r3, [r3, #12]
 8118990:	899b      	ldrh	r3, [r3, #12]
 8118992:	b29b      	uxth	r3, r3
 8118994:	4618      	mov	r0, r3
 8118996:	f7f8 f811 	bl	81109bc <lwip_htons>
 811899a:	4603      	mov	r3, r0
 811899c:	b2db      	uxtb	r3, r3
 811899e:	f003 0303 	and.w	r3, r3, #3
 81189a2:	2b00      	cmp	r3, #0
 81189a4:	d001      	beq.n	81189aa <tcp_receive+0x966>
 81189a6:	2301      	movs	r3, #1
 81189a8:	e000      	b.n	81189ac <tcp_receive+0x968>
 81189aa:	2300      	movs	r3, #0
 81189ac:	4423      	add	r3, r4
 81189ae:	b29a      	uxth	r2, r3
 81189b0:	4b65      	ldr	r3, [pc, #404]	@ (8118b48 <tcp_receive+0xb04>)
 81189b2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 81189b4:	4b64      	ldr	r3, [pc, #400]	@ (8118b48 <tcp_receive+0xb04>)
 81189b6:	881b      	ldrh	r3, [r3, #0]
 81189b8:	461a      	mov	r2, r3
 81189ba:	4b64      	ldr	r3, [pc, #400]	@ (8118b4c <tcp_receive+0xb08>)
 81189bc:	681b      	ldr	r3, [r3, #0]
 81189be:	441a      	add	r2, r3
 81189c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81189c2:	68db      	ldr	r3, [r3, #12]
 81189c4:	685b      	ldr	r3, [r3, #4]
 81189c6:	429a      	cmp	r2, r3
 81189c8:	d006      	beq.n	81189d8 <tcp_receive+0x994>
 81189ca:	4b62      	ldr	r3, [pc, #392]	@ (8118b54 <tcp_receive+0xb10>)
 81189cc:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 81189d0:	4961      	ldr	r1, [pc, #388]	@ (8118b58 <tcp_receive+0xb14>)
 81189d2:	4862      	ldr	r0, [pc, #392]	@ (8118b5c <tcp_receive+0xb18>)
 81189d4:	f003 fa3a 	bl	811be4c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 81189d8:	687b      	ldr	r3, [r7, #4]
 81189da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 81189dc:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 81189de:	4b5a      	ldr	r3, [pc, #360]	@ (8118b48 <tcp_receive+0xb04>)
 81189e0:	881b      	ldrh	r3, [r3, #0]
 81189e2:	461a      	mov	r2, r3
 81189e4:	4b59      	ldr	r3, [pc, #356]	@ (8118b4c <tcp_receive+0xb08>)
 81189e6:	681b      	ldr	r3, [r3, #0]
 81189e8:	441a      	add	r2, r3
 81189ea:	687b      	ldr	r3, [r7, #4]
 81189ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 81189ee:	687b      	ldr	r3, [r7, #4]
 81189f0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 81189f2:	4b55      	ldr	r3, [pc, #340]	@ (8118b48 <tcp_receive+0xb04>)
 81189f4:	881b      	ldrh	r3, [r3, #0]
 81189f6:	429a      	cmp	r2, r3
 81189f8:	d206      	bcs.n	8118a08 <tcp_receive+0x9c4>
 81189fa:	4b56      	ldr	r3, [pc, #344]	@ (8118b54 <tcp_receive+0xb10>)
 81189fc:	f240 6207 	movw	r2, #1543	@ 0x607
 8118a00:	4957      	ldr	r1, [pc, #348]	@ (8118b60 <tcp_receive+0xb1c>)
 8118a02:	4856      	ldr	r0, [pc, #344]	@ (8118b5c <tcp_receive+0xb18>)
 8118a04:	f003 fa22 	bl	811be4c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8118a08:	687b      	ldr	r3, [r7, #4]
 8118a0a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8118a0c:	4b4e      	ldr	r3, [pc, #312]	@ (8118b48 <tcp_receive+0xb04>)
 8118a0e:	881b      	ldrh	r3, [r3, #0]
 8118a10:	1ad3      	subs	r3, r2, r3
 8118a12:	b29a      	uxth	r2, r3
 8118a14:	687b      	ldr	r3, [r7, #4]
 8118a16:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8118a18:	6878      	ldr	r0, [r7, #4]
 8118a1a:	f7fc fde7 	bl	81155ec <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8118a1e:	4b4c      	ldr	r3, [pc, #304]	@ (8118b50 <tcp_receive+0xb0c>)
 8118a20:	685b      	ldr	r3, [r3, #4]
 8118a22:	891b      	ldrh	r3, [r3, #8]
 8118a24:	2b00      	cmp	r3, #0
 8118a26:	d006      	beq.n	8118a36 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8118a28:	4b49      	ldr	r3, [pc, #292]	@ (8118b50 <tcp_receive+0xb0c>)
 8118a2a:	685b      	ldr	r3, [r3, #4]
 8118a2c:	4a4d      	ldr	r2, [pc, #308]	@ (8118b64 <tcp_receive+0xb20>)
 8118a2e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8118a30:	4b47      	ldr	r3, [pc, #284]	@ (8118b50 <tcp_receive+0xb0c>)
 8118a32:	2200      	movs	r2, #0
 8118a34:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8118a36:	4b46      	ldr	r3, [pc, #280]	@ (8118b50 <tcp_receive+0xb0c>)
 8118a38:	68db      	ldr	r3, [r3, #12]
 8118a3a:	899b      	ldrh	r3, [r3, #12]
 8118a3c:	b29b      	uxth	r3, r3
 8118a3e:	4618      	mov	r0, r3
 8118a40:	f7f7 ffbc 	bl	81109bc <lwip_htons>
 8118a44:	4603      	mov	r3, r0
 8118a46:	b2db      	uxtb	r3, r3
 8118a48:	f003 0301 	and.w	r3, r3, #1
 8118a4c:	2b00      	cmp	r3, #0
 8118a4e:	f000 80b8 	beq.w	8118bc2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8118a52:	4b45      	ldr	r3, [pc, #276]	@ (8118b68 <tcp_receive+0xb24>)
 8118a54:	781b      	ldrb	r3, [r3, #0]
 8118a56:	f043 0320 	orr.w	r3, r3, #32
 8118a5a:	b2da      	uxtb	r2, r3
 8118a5c:	4b42      	ldr	r3, [pc, #264]	@ (8118b68 <tcp_receive+0xb24>)
 8118a5e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8118a60:	e0af      	b.n	8118bc2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8118a62:	687b      	ldr	r3, [r7, #4]
 8118a64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8118a66:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8118a68:	687b      	ldr	r3, [r7, #4]
 8118a6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8118a6c:	68db      	ldr	r3, [r3, #12]
 8118a6e:	685b      	ldr	r3, [r3, #4]
 8118a70:	4a36      	ldr	r2, [pc, #216]	@ (8118b4c <tcp_receive+0xb08>)
 8118a72:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8118a74:	68bb      	ldr	r3, [r7, #8]
 8118a76:	891b      	ldrh	r3, [r3, #8]
 8118a78:	461c      	mov	r4, r3
 8118a7a:	68bb      	ldr	r3, [r7, #8]
 8118a7c:	68db      	ldr	r3, [r3, #12]
 8118a7e:	899b      	ldrh	r3, [r3, #12]
 8118a80:	b29b      	uxth	r3, r3
 8118a82:	4618      	mov	r0, r3
 8118a84:	f7f7 ff9a 	bl	81109bc <lwip_htons>
 8118a88:	4603      	mov	r3, r0
 8118a8a:	b2db      	uxtb	r3, r3
 8118a8c:	f003 0303 	and.w	r3, r3, #3
 8118a90:	2b00      	cmp	r3, #0
 8118a92:	d001      	beq.n	8118a98 <tcp_receive+0xa54>
 8118a94:	2301      	movs	r3, #1
 8118a96:	e000      	b.n	8118a9a <tcp_receive+0xa56>
 8118a98:	2300      	movs	r3, #0
 8118a9a:	191a      	adds	r2, r3, r4
 8118a9c:	687b      	ldr	r3, [r7, #4]
 8118a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8118aa0:	441a      	add	r2, r3
 8118aa2:	687b      	ldr	r3, [r7, #4]
 8118aa4:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8118aa6:	687b      	ldr	r3, [r7, #4]
 8118aa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8118aaa:	461c      	mov	r4, r3
 8118aac:	68bb      	ldr	r3, [r7, #8]
 8118aae:	891b      	ldrh	r3, [r3, #8]
 8118ab0:	461d      	mov	r5, r3
 8118ab2:	68bb      	ldr	r3, [r7, #8]
 8118ab4:	68db      	ldr	r3, [r3, #12]
 8118ab6:	899b      	ldrh	r3, [r3, #12]
 8118ab8:	b29b      	uxth	r3, r3
 8118aba:	4618      	mov	r0, r3
 8118abc:	f7f7 ff7e 	bl	81109bc <lwip_htons>
 8118ac0:	4603      	mov	r3, r0
 8118ac2:	b2db      	uxtb	r3, r3
 8118ac4:	f003 0303 	and.w	r3, r3, #3
 8118ac8:	2b00      	cmp	r3, #0
 8118aca:	d001      	beq.n	8118ad0 <tcp_receive+0xa8c>
 8118acc:	2301      	movs	r3, #1
 8118ace:	e000      	b.n	8118ad2 <tcp_receive+0xa8e>
 8118ad0:	2300      	movs	r3, #0
 8118ad2:	442b      	add	r3, r5
 8118ad4:	429c      	cmp	r4, r3
 8118ad6:	d206      	bcs.n	8118ae6 <tcp_receive+0xaa2>
 8118ad8:	4b1e      	ldr	r3, [pc, #120]	@ (8118b54 <tcp_receive+0xb10>)
 8118ada:	f240 622b 	movw	r2, #1579	@ 0x62b
 8118ade:	4923      	ldr	r1, [pc, #140]	@ (8118b6c <tcp_receive+0xb28>)
 8118ae0:	481e      	ldr	r0, [pc, #120]	@ (8118b5c <tcp_receive+0xb18>)
 8118ae2:	f003 f9b3 	bl	811be4c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8118ae6:	68bb      	ldr	r3, [r7, #8]
 8118ae8:	891b      	ldrh	r3, [r3, #8]
 8118aea:	461c      	mov	r4, r3
 8118aec:	68bb      	ldr	r3, [r7, #8]
 8118aee:	68db      	ldr	r3, [r3, #12]
 8118af0:	899b      	ldrh	r3, [r3, #12]
 8118af2:	b29b      	uxth	r3, r3
 8118af4:	4618      	mov	r0, r3
 8118af6:	f7f7 ff61 	bl	81109bc <lwip_htons>
 8118afa:	4603      	mov	r3, r0
 8118afc:	b2db      	uxtb	r3, r3
 8118afe:	f003 0303 	and.w	r3, r3, #3
 8118b02:	2b00      	cmp	r3, #0
 8118b04:	d001      	beq.n	8118b0a <tcp_receive+0xac6>
 8118b06:	2301      	movs	r3, #1
 8118b08:	e000      	b.n	8118b0c <tcp_receive+0xac8>
 8118b0a:	2300      	movs	r3, #0
 8118b0c:	1919      	adds	r1, r3, r4
 8118b0e:	687b      	ldr	r3, [r7, #4]
 8118b10:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8118b12:	b28b      	uxth	r3, r1
 8118b14:	1ad3      	subs	r3, r2, r3
 8118b16:	b29a      	uxth	r2, r3
 8118b18:	687b      	ldr	r3, [r7, #4]
 8118b1a:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8118b1c:	6878      	ldr	r0, [r7, #4]
 8118b1e:	f7fc fd65 	bl	81155ec <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8118b22:	68bb      	ldr	r3, [r7, #8]
 8118b24:	685b      	ldr	r3, [r3, #4]
 8118b26:	891b      	ldrh	r3, [r3, #8]
 8118b28:	2b00      	cmp	r3, #0
 8118b2a:	d028      	beq.n	8118b7e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8118b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8118b64 <tcp_receive+0xb20>)
 8118b2e:	681b      	ldr	r3, [r3, #0]
 8118b30:	2b00      	cmp	r3, #0
 8118b32:	d01d      	beq.n	8118b70 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8118b34:	4b0b      	ldr	r3, [pc, #44]	@ (8118b64 <tcp_receive+0xb20>)
 8118b36:	681a      	ldr	r2, [r3, #0]
 8118b38:	68bb      	ldr	r3, [r7, #8]
 8118b3a:	685b      	ldr	r3, [r3, #4]
 8118b3c:	4619      	mov	r1, r3
 8118b3e:	4610      	mov	r0, r2
 8118b40:	f7fb ff90 	bl	8114a64 <pbuf_cat>
 8118b44:	e018      	b.n	8118b78 <tcp_receive+0xb34>
 8118b46:	bf00      	nop
 8118b48:	10011d56 	.word	0x10011d56
 8118b4c:	10011d4c 	.word	0x10011d4c
 8118b50:	10011d2c 	.word	0x10011d2c
 8118b54:	0811e888 	.word	0x0811e888
 8118b58:	0811eca8 	.word	0x0811eca8
 8118b5c:	0811e914 	.word	0x0811e914
 8118b60:	0811ece4 	.word	0x0811ece4
 8118b64:	10011d5c 	.word	0x10011d5c
 8118b68:	10011d59 	.word	0x10011d59
 8118b6c:	0811ed04 	.word	0x0811ed04
            } else {
              recv_data = cseg->p;
 8118b70:	68bb      	ldr	r3, [r7, #8]
 8118b72:	685b      	ldr	r3, [r3, #4]
 8118b74:	4a70      	ldr	r2, [pc, #448]	@ (8118d38 <tcp_receive+0xcf4>)
 8118b76:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8118b78:	68bb      	ldr	r3, [r7, #8]
 8118b7a:	2200      	movs	r2, #0
 8118b7c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8118b7e:	68bb      	ldr	r3, [r7, #8]
 8118b80:	68db      	ldr	r3, [r3, #12]
 8118b82:	899b      	ldrh	r3, [r3, #12]
 8118b84:	b29b      	uxth	r3, r3
 8118b86:	4618      	mov	r0, r3
 8118b88:	f7f7 ff18 	bl	81109bc <lwip_htons>
 8118b8c:	4603      	mov	r3, r0
 8118b8e:	b2db      	uxtb	r3, r3
 8118b90:	f003 0301 	and.w	r3, r3, #1
 8118b94:	2b00      	cmp	r3, #0
 8118b96:	d00d      	beq.n	8118bb4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8118b98:	4b68      	ldr	r3, [pc, #416]	@ (8118d3c <tcp_receive+0xcf8>)
 8118b9a:	781b      	ldrb	r3, [r3, #0]
 8118b9c:	f043 0320 	orr.w	r3, r3, #32
 8118ba0:	b2da      	uxtb	r2, r3
 8118ba2:	4b66      	ldr	r3, [pc, #408]	@ (8118d3c <tcp_receive+0xcf8>)
 8118ba4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8118ba6:	687b      	ldr	r3, [r7, #4]
 8118ba8:	7d1b      	ldrb	r3, [r3, #20]
 8118baa:	2b04      	cmp	r3, #4
 8118bac:	d102      	bne.n	8118bb4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8118bae:	687b      	ldr	r3, [r7, #4]
 8118bb0:	2207      	movs	r2, #7
 8118bb2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8118bb4:	68bb      	ldr	r3, [r7, #8]
 8118bb6:	681a      	ldr	r2, [r3, #0]
 8118bb8:	687b      	ldr	r3, [r7, #4]
 8118bba:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8118bbc:	68b8      	ldr	r0, [r7, #8]
 8118bbe:	f7fd fb58 	bl	8116272 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8118bc2:	687b      	ldr	r3, [r7, #4]
 8118bc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8118bc6:	2b00      	cmp	r3, #0
 8118bc8:	d008      	beq.n	8118bdc <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8118bca:	687b      	ldr	r3, [r7, #4]
 8118bcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8118bce:	68db      	ldr	r3, [r3, #12]
 8118bd0:	685a      	ldr	r2, [r3, #4]
 8118bd2:	687b      	ldr	r3, [r7, #4]
 8118bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8118bd6:	429a      	cmp	r2, r3
 8118bd8:	f43f af43 	beq.w	8118a62 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8118bdc:	687b      	ldr	r3, [r7, #4]
 8118bde:	8b5b      	ldrh	r3, [r3, #26]
 8118be0:	f003 0301 	and.w	r3, r3, #1
 8118be4:	2b00      	cmp	r3, #0
 8118be6:	d00e      	beq.n	8118c06 <tcp_receive+0xbc2>
 8118be8:	687b      	ldr	r3, [r7, #4]
 8118bea:	8b5b      	ldrh	r3, [r3, #26]
 8118bec:	f023 0301 	bic.w	r3, r3, #1
 8118bf0:	b29a      	uxth	r2, r3
 8118bf2:	687b      	ldr	r3, [r7, #4]
 8118bf4:	835a      	strh	r2, [r3, #26]
 8118bf6:	687b      	ldr	r3, [r7, #4]
 8118bf8:	8b5b      	ldrh	r3, [r3, #26]
 8118bfa:	f043 0302 	orr.w	r3, r3, #2
 8118bfe:	b29a      	uxth	r2, r3
 8118c00:	687b      	ldr	r3, [r7, #4]
 8118c02:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8118c04:	e187      	b.n	8118f16 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8118c06:	687b      	ldr	r3, [r7, #4]
 8118c08:	8b5b      	ldrh	r3, [r3, #26]
 8118c0a:	f043 0301 	orr.w	r3, r3, #1
 8118c0e:	b29a      	uxth	r2, r3
 8118c10:	687b      	ldr	r3, [r7, #4]
 8118c12:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8118c14:	e17f      	b.n	8118f16 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8118c16:	687b      	ldr	r3, [r7, #4]
 8118c18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8118c1a:	2b00      	cmp	r3, #0
 8118c1c:	d106      	bne.n	8118c2c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8118c1e:	4848      	ldr	r0, [pc, #288]	@ (8118d40 <tcp_receive+0xcfc>)
 8118c20:	f7fd fb40 	bl	81162a4 <tcp_seg_copy>
 8118c24:	4602      	mov	r2, r0
 8118c26:	687b      	ldr	r3, [r7, #4]
 8118c28:	675a      	str	r2, [r3, #116]	@ 0x74
 8118c2a:	e16c      	b.n	8118f06 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8118c2c:	2300      	movs	r3, #0
 8118c2e:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8118c30:	687b      	ldr	r3, [r7, #4]
 8118c32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8118c34:	63bb      	str	r3, [r7, #56]	@ 0x38
 8118c36:	e156      	b.n	8118ee6 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8118c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118c3a:	68db      	ldr	r3, [r3, #12]
 8118c3c:	685a      	ldr	r2, [r3, #4]
 8118c3e:	4b41      	ldr	r3, [pc, #260]	@ (8118d44 <tcp_receive+0xd00>)
 8118c40:	681b      	ldr	r3, [r3, #0]
 8118c42:	429a      	cmp	r2, r3
 8118c44:	d11d      	bne.n	8118c82 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8118c46:	4b3e      	ldr	r3, [pc, #248]	@ (8118d40 <tcp_receive+0xcfc>)
 8118c48:	891a      	ldrh	r2, [r3, #8]
 8118c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118c4c:	891b      	ldrh	r3, [r3, #8]
 8118c4e:	429a      	cmp	r2, r3
 8118c50:	f240 814e 	bls.w	8118ef0 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8118c54:	483a      	ldr	r0, [pc, #232]	@ (8118d40 <tcp_receive+0xcfc>)
 8118c56:	f7fd fb25 	bl	81162a4 <tcp_seg_copy>
 8118c5a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8118c5c:	697b      	ldr	r3, [r7, #20]
 8118c5e:	2b00      	cmp	r3, #0
 8118c60:	f000 8148 	beq.w	8118ef4 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8118c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8118c66:	2b00      	cmp	r3, #0
 8118c68:	d003      	beq.n	8118c72 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8118c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8118c6c:	697a      	ldr	r2, [r7, #20]
 8118c6e:	601a      	str	r2, [r3, #0]
 8118c70:	e002      	b.n	8118c78 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8118c72:	687b      	ldr	r3, [r7, #4]
 8118c74:	697a      	ldr	r2, [r7, #20]
 8118c76:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8118c78:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8118c7a:	6978      	ldr	r0, [r7, #20]
 8118c7c:	f7ff f8de 	bl	8117e3c <tcp_oos_insert_segment>
                }
                break;
 8118c80:	e138      	b.n	8118ef4 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8118c82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8118c84:	2b00      	cmp	r3, #0
 8118c86:	d117      	bne.n	8118cb8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8118c88:	4b2e      	ldr	r3, [pc, #184]	@ (8118d44 <tcp_receive+0xd00>)
 8118c8a:	681a      	ldr	r2, [r3, #0]
 8118c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118c8e:	68db      	ldr	r3, [r3, #12]
 8118c90:	685b      	ldr	r3, [r3, #4]
 8118c92:	1ad3      	subs	r3, r2, r3
 8118c94:	2b00      	cmp	r3, #0
 8118c96:	da57      	bge.n	8118d48 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8118c98:	4829      	ldr	r0, [pc, #164]	@ (8118d40 <tcp_receive+0xcfc>)
 8118c9a:	f7fd fb03 	bl	81162a4 <tcp_seg_copy>
 8118c9e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8118ca0:	69bb      	ldr	r3, [r7, #24]
 8118ca2:	2b00      	cmp	r3, #0
 8118ca4:	f000 8128 	beq.w	8118ef8 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8118ca8:	687b      	ldr	r3, [r7, #4]
 8118caa:	69ba      	ldr	r2, [r7, #24]
 8118cac:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8118cae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8118cb0:	69b8      	ldr	r0, [r7, #24]
 8118cb2:	f7ff f8c3 	bl	8117e3c <tcp_oos_insert_segment>
                  }
                  break;
 8118cb6:	e11f      	b.n	8118ef8 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8118cb8:	4b22      	ldr	r3, [pc, #136]	@ (8118d44 <tcp_receive+0xd00>)
 8118cba:	681a      	ldr	r2, [r3, #0]
 8118cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8118cbe:	68db      	ldr	r3, [r3, #12]
 8118cc0:	685b      	ldr	r3, [r3, #4]
 8118cc2:	1ad3      	subs	r3, r2, r3
 8118cc4:	3b01      	subs	r3, #1
 8118cc6:	2b00      	cmp	r3, #0
 8118cc8:	db3e      	blt.n	8118d48 <tcp_receive+0xd04>
 8118cca:	4b1e      	ldr	r3, [pc, #120]	@ (8118d44 <tcp_receive+0xd00>)
 8118ccc:	681a      	ldr	r2, [r3, #0]
 8118cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118cd0:	68db      	ldr	r3, [r3, #12]
 8118cd2:	685b      	ldr	r3, [r3, #4]
 8118cd4:	1ad3      	subs	r3, r2, r3
 8118cd6:	3301      	adds	r3, #1
 8118cd8:	2b00      	cmp	r3, #0
 8118cda:	dc35      	bgt.n	8118d48 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8118cdc:	4818      	ldr	r0, [pc, #96]	@ (8118d40 <tcp_receive+0xcfc>)
 8118cde:	f7fd fae1 	bl	81162a4 <tcp_seg_copy>
 8118ce2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8118ce4:	69fb      	ldr	r3, [r7, #28]
 8118ce6:	2b00      	cmp	r3, #0
 8118ce8:	f000 8108 	beq.w	8118efc <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8118cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8118cee:	68db      	ldr	r3, [r3, #12]
 8118cf0:	685b      	ldr	r3, [r3, #4]
 8118cf2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8118cf4:	8912      	ldrh	r2, [r2, #8]
 8118cf6:	441a      	add	r2, r3
 8118cf8:	4b12      	ldr	r3, [pc, #72]	@ (8118d44 <tcp_receive+0xd00>)
 8118cfa:	681b      	ldr	r3, [r3, #0]
 8118cfc:	1ad3      	subs	r3, r2, r3
 8118cfe:	2b00      	cmp	r3, #0
 8118d00:	dd12      	ble.n	8118d28 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8118d02:	4b10      	ldr	r3, [pc, #64]	@ (8118d44 <tcp_receive+0xd00>)
 8118d04:	681b      	ldr	r3, [r3, #0]
 8118d06:	b29a      	uxth	r2, r3
 8118d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8118d0a:	68db      	ldr	r3, [r3, #12]
 8118d0c:	685b      	ldr	r3, [r3, #4]
 8118d0e:	b29b      	uxth	r3, r3
 8118d10:	1ad3      	subs	r3, r2, r3
 8118d12:	b29a      	uxth	r2, r3
 8118d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8118d16:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8118d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8118d1a:	685a      	ldr	r2, [r3, #4]
 8118d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8118d1e:	891b      	ldrh	r3, [r3, #8]
 8118d20:	4619      	mov	r1, r3
 8118d22:	4610      	mov	r0, r2
 8118d24:	f7fb fc4c 	bl	81145c0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8118d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8118d2a:	69fa      	ldr	r2, [r7, #28]
 8118d2c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8118d2e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8118d30:	69f8      	ldr	r0, [r7, #28]
 8118d32:	f7ff f883 	bl	8117e3c <tcp_oos_insert_segment>
                  }
                  break;
 8118d36:	e0e1      	b.n	8118efc <tcp_receive+0xeb8>
 8118d38:	10011d5c 	.word	0x10011d5c
 8118d3c:	10011d59 	.word	0x10011d59
 8118d40:	10011d2c 	.word	0x10011d2c
 8118d44:	10011d4c 	.word	0x10011d4c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8118d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118d4a:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8118d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118d4e:	681b      	ldr	r3, [r3, #0]
 8118d50:	2b00      	cmp	r3, #0
 8118d52:	f040 80c5 	bne.w	8118ee0 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8118d56:	4b7f      	ldr	r3, [pc, #508]	@ (8118f54 <tcp_receive+0xf10>)
 8118d58:	681a      	ldr	r2, [r3, #0]
 8118d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118d5c:	68db      	ldr	r3, [r3, #12]
 8118d5e:	685b      	ldr	r3, [r3, #4]
 8118d60:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8118d62:	2b00      	cmp	r3, #0
 8118d64:	f340 80bc 	ble.w	8118ee0 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8118d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118d6a:	68db      	ldr	r3, [r3, #12]
 8118d6c:	899b      	ldrh	r3, [r3, #12]
 8118d6e:	b29b      	uxth	r3, r3
 8118d70:	4618      	mov	r0, r3
 8118d72:	f7f7 fe23 	bl	81109bc <lwip_htons>
 8118d76:	4603      	mov	r3, r0
 8118d78:	b2db      	uxtb	r3, r3
 8118d7a:	f003 0301 	and.w	r3, r3, #1
 8118d7e:	2b00      	cmp	r3, #0
 8118d80:	f040 80be 	bne.w	8118f00 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8118d84:	4874      	ldr	r0, [pc, #464]	@ (8118f58 <tcp_receive+0xf14>)
 8118d86:	f7fd fa8d 	bl	81162a4 <tcp_seg_copy>
 8118d8a:	4602      	mov	r2, r0
 8118d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118d8e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8118d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118d92:	681b      	ldr	r3, [r3, #0]
 8118d94:	2b00      	cmp	r3, #0
 8118d96:	f000 80b5 	beq.w	8118f04 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8118d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118d9c:	68db      	ldr	r3, [r3, #12]
 8118d9e:	685b      	ldr	r3, [r3, #4]
 8118da0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8118da2:	8912      	ldrh	r2, [r2, #8]
 8118da4:	441a      	add	r2, r3
 8118da6:	4b6b      	ldr	r3, [pc, #428]	@ (8118f54 <tcp_receive+0xf10>)
 8118da8:	681b      	ldr	r3, [r3, #0]
 8118daa:	1ad3      	subs	r3, r2, r3
 8118dac:	2b00      	cmp	r3, #0
 8118dae:	dd12      	ble.n	8118dd6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8118db0:	4b68      	ldr	r3, [pc, #416]	@ (8118f54 <tcp_receive+0xf10>)
 8118db2:	681b      	ldr	r3, [r3, #0]
 8118db4:	b29a      	uxth	r2, r3
 8118db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118db8:	68db      	ldr	r3, [r3, #12]
 8118dba:	685b      	ldr	r3, [r3, #4]
 8118dbc:	b29b      	uxth	r3, r3
 8118dbe:	1ad3      	subs	r3, r2, r3
 8118dc0:	b29a      	uxth	r2, r3
 8118dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118dc4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8118dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118dc8:	685a      	ldr	r2, [r3, #4]
 8118dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118dcc:	891b      	ldrh	r3, [r3, #8]
 8118dce:	4619      	mov	r1, r3
 8118dd0:	4610      	mov	r0, r2
 8118dd2:	f7fb fbf5 	bl	81145c0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8118dd6:	4b61      	ldr	r3, [pc, #388]	@ (8118f5c <tcp_receive+0xf18>)
 8118dd8:	881b      	ldrh	r3, [r3, #0]
 8118dda:	461a      	mov	r2, r3
 8118ddc:	4b5d      	ldr	r3, [pc, #372]	@ (8118f54 <tcp_receive+0xf10>)
 8118dde:	681b      	ldr	r3, [r3, #0]
 8118de0:	441a      	add	r2, r3
 8118de2:	687b      	ldr	r3, [r7, #4]
 8118de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8118de6:	6879      	ldr	r1, [r7, #4]
 8118de8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8118dea:	440b      	add	r3, r1
 8118dec:	1ad3      	subs	r3, r2, r3
 8118dee:	2b00      	cmp	r3, #0
 8118df0:	f340 8088 	ble.w	8118f04 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8118df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118df6:	681b      	ldr	r3, [r3, #0]
 8118df8:	68db      	ldr	r3, [r3, #12]
 8118dfa:	899b      	ldrh	r3, [r3, #12]
 8118dfc:	b29b      	uxth	r3, r3
 8118dfe:	4618      	mov	r0, r3
 8118e00:	f7f7 fddc 	bl	81109bc <lwip_htons>
 8118e04:	4603      	mov	r3, r0
 8118e06:	b2db      	uxtb	r3, r3
 8118e08:	f003 0301 	and.w	r3, r3, #1
 8118e0c:	2b00      	cmp	r3, #0
 8118e0e:	d021      	beq.n	8118e54 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8118e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118e12:	681b      	ldr	r3, [r3, #0]
 8118e14:	68db      	ldr	r3, [r3, #12]
 8118e16:	899b      	ldrh	r3, [r3, #12]
 8118e18:	b29b      	uxth	r3, r3
 8118e1a:	b21b      	sxth	r3, r3
 8118e1c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8118e20:	b21c      	sxth	r4, r3
 8118e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118e24:	681b      	ldr	r3, [r3, #0]
 8118e26:	68db      	ldr	r3, [r3, #12]
 8118e28:	899b      	ldrh	r3, [r3, #12]
 8118e2a:	b29b      	uxth	r3, r3
 8118e2c:	4618      	mov	r0, r3
 8118e2e:	f7f7 fdc5 	bl	81109bc <lwip_htons>
 8118e32:	4603      	mov	r3, r0
 8118e34:	b2db      	uxtb	r3, r3
 8118e36:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8118e3a:	b29b      	uxth	r3, r3
 8118e3c:	4618      	mov	r0, r3
 8118e3e:	f7f7 fdbd 	bl	81109bc <lwip_htons>
 8118e42:	4603      	mov	r3, r0
 8118e44:	b21b      	sxth	r3, r3
 8118e46:	4323      	orrs	r3, r4
 8118e48:	b21a      	sxth	r2, r3
 8118e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118e4c:	681b      	ldr	r3, [r3, #0]
 8118e4e:	68db      	ldr	r3, [r3, #12]
 8118e50:	b292      	uxth	r2, r2
 8118e52:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8118e54:	687b      	ldr	r3, [r7, #4]
 8118e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8118e58:	b29a      	uxth	r2, r3
 8118e5a:	687b      	ldr	r3, [r7, #4]
 8118e5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8118e5e:	4413      	add	r3, r2
 8118e60:	b299      	uxth	r1, r3
 8118e62:	4b3c      	ldr	r3, [pc, #240]	@ (8118f54 <tcp_receive+0xf10>)
 8118e64:	681b      	ldr	r3, [r3, #0]
 8118e66:	b29a      	uxth	r2, r3
 8118e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118e6a:	681b      	ldr	r3, [r3, #0]
 8118e6c:	1a8a      	subs	r2, r1, r2
 8118e6e:	b292      	uxth	r2, r2
 8118e70:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8118e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118e74:	681b      	ldr	r3, [r3, #0]
 8118e76:	685a      	ldr	r2, [r3, #4]
 8118e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118e7a:	681b      	ldr	r3, [r3, #0]
 8118e7c:	891b      	ldrh	r3, [r3, #8]
 8118e7e:	4619      	mov	r1, r3
 8118e80:	4610      	mov	r0, r2
 8118e82:	f7fb fb9d 	bl	81145c0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8118e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118e88:	681b      	ldr	r3, [r3, #0]
 8118e8a:	891c      	ldrh	r4, [r3, #8]
 8118e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118e8e:	681b      	ldr	r3, [r3, #0]
 8118e90:	68db      	ldr	r3, [r3, #12]
 8118e92:	899b      	ldrh	r3, [r3, #12]
 8118e94:	b29b      	uxth	r3, r3
 8118e96:	4618      	mov	r0, r3
 8118e98:	f7f7 fd90 	bl	81109bc <lwip_htons>
 8118e9c:	4603      	mov	r3, r0
 8118e9e:	b2db      	uxtb	r3, r3
 8118ea0:	f003 0303 	and.w	r3, r3, #3
 8118ea4:	2b00      	cmp	r3, #0
 8118ea6:	d001      	beq.n	8118eac <tcp_receive+0xe68>
 8118ea8:	2301      	movs	r3, #1
 8118eaa:	e000      	b.n	8118eae <tcp_receive+0xe6a>
 8118eac:	2300      	movs	r3, #0
 8118eae:	4423      	add	r3, r4
 8118eb0:	b29a      	uxth	r2, r3
 8118eb2:	4b2a      	ldr	r3, [pc, #168]	@ (8118f5c <tcp_receive+0xf18>)
 8118eb4:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8118eb6:	4b29      	ldr	r3, [pc, #164]	@ (8118f5c <tcp_receive+0xf18>)
 8118eb8:	881b      	ldrh	r3, [r3, #0]
 8118eba:	461a      	mov	r2, r3
 8118ebc:	4b25      	ldr	r3, [pc, #148]	@ (8118f54 <tcp_receive+0xf10>)
 8118ebe:	681b      	ldr	r3, [r3, #0]
 8118ec0:	441a      	add	r2, r3
 8118ec2:	687b      	ldr	r3, [r7, #4]
 8118ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8118ec6:	6879      	ldr	r1, [r7, #4]
 8118ec8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8118eca:	440b      	add	r3, r1
 8118ecc:	429a      	cmp	r2, r3
 8118ece:	d019      	beq.n	8118f04 <tcp_receive+0xec0>
 8118ed0:	4b23      	ldr	r3, [pc, #140]	@ (8118f60 <tcp_receive+0xf1c>)
 8118ed2:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8118ed6:	4923      	ldr	r1, [pc, #140]	@ (8118f64 <tcp_receive+0xf20>)
 8118ed8:	4823      	ldr	r0, [pc, #140]	@ (8118f68 <tcp_receive+0xf24>)
 8118eda:	f002 ffb7 	bl	811be4c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8118ede:	e011      	b.n	8118f04 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8118ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118ee2:	681b      	ldr	r3, [r3, #0]
 8118ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8118ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8118ee8:	2b00      	cmp	r3, #0
 8118eea:	f47f aea5 	bne.w	8118c38 <tcp_receive+0xbf4>
 8118eee:	e00a      	b.n	8118f06 <tcp_receive+0xec2>
                break;
 8118ef0:	bf00      	nop
 8118ef2:	e008      	b.n	8118f06 <tcp_receive+0xec2>
                break;
 8118ef4:	bf00      	nop
 8118ef6:	e006      	b.n	8118f06 <tcp_receive+0xec2>
                  break;
 8118ef8:	bf00      	nop
 8118efa:	e004      	b.n	8118f06 <tcp_receive+0xec2>
                  break;
 8118efc:	bf00      	nop
 8118efe:	e002      	b.n	8118f06 <tcp_receive+0xec2>
                  break;
 8118f00:	bf00      	nop
 8118f02:	e000      	b.n	8118f06 <tcp_receive+0xec2>
                break;
 8118f04:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8118f06:	6878      	ldr	r0, [r7, #4]
 8118f08:	f001 fe8a 	bl	811ac20 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8118f0c:	e003      	b.n	8118f16 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8118f0e:	6878      	ldr	r0, [r7, #4]
 8118f10:	f001 fe86 	bl	811ac20 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8118f14:	e01a      	b.n	8118f4c <tcp_receive+0xf08>
 8118f16:	e019      	b.n	8118f4c <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8118f18:	4b0e      	ldr	r3, [pc, #56]	@ (8118f54 <tcp_receive+0xf10>)
 8118f1a:	681a      	ldr	r2, [r3, #0]
 8118f1c:	687b      	ldr	r3, [r7, #4]
 8118f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8118f20:	1ad3      	subs	r3, r2, r3
 8118f22:	2b00      	cmp	r3, #0
 8118f24:	db0a      	blt.n	8118f3c <tcp_receive+0xef8>
 8118f26:	4b0b      	ldr	r3, [pc, #44]	@ (8118f54 <tcp_receive+0xf10>)
 8118f28:	681a      	ldr	r2, [r3, #0]
 8118f2a:	687b      	ldr	r3, [r7, #4]
 8118f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8118f2e:	6879      	ldr	r1, [r7, #4]
 8118f30:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8118f32:	440b      	add	r3, r1
 8118f34:	1ad3      	subs	r3, r2, r3
 8118f36:	3301      	adds	r3, #1
 8118f38:	2b00      	cmp	r3, #0
 8118f3a:	dd07      	ble.n	8118f4c <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8118f3c:	687b      	ldr	r3, [r7, #4]
 8118f3e:	8b5b      	ldrh	r3, [r3, #26]
 8118f40:	f043 0302 	orr.w	r3, r3, #2
 8118f44:	b29a      	uxth	r2, r3
 8118f46:	687b      	ldr	r3, [r7, #4]
 8118f48:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8118f4a:	e7ff      	b.n	8118f4c <tcp_receive+0xf08>
 8118f4c:	bf00      	nop
 8118f4e:	3750      	adds	r7, #80	@ 0x50
 8118f50:	46bd      	mov	sp, r7
 8118f52:	bdb0      	pop	{r4, r5, r7, pc}
 8118f54:	10011d4c 	.word	0x10011d4c
 8118f58:	10011d2c 	.word	0x10011d2c
 8118f5c:	10011d56 	.word	0x10011d56
 8118f60:	0811e888 	.word	0x0811e888
 8118f64:	0811ec70 	.word	0x0811ec70
 8118f68:	0811e914 	.word	0x0811e914

08118f6c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8118f6c:	b480      	push	{r7}
 8118f6e:	b083      	sub	sp, #12
 8118f70:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8118f72:	4b15      	ldr	r3, [pc, #84]	@ (8118fc8 <tcp_get_next_optbyte+0x5c>)
 8118f74:	881b      	ldrh	r3, [r3, #0]
 8118f76:	1c5a      	adds	r2, r3, #1
 8118f78:	b291      	uxth	r1, r2
 8118f7a:	4a13      	ldr	r2, [pc, #76]	@ (8118fc8 <tcp_get_next_optbyte+0x5c>)
 8118f7c:	8011      	strh	r1, [r2, #0]
 8118f7e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8118f80:	4b12      	ldr	r3, [pc, #72]	@ (8118fcc <tcp_get_next_optbyte+0x60>)
 8118f82:	681b      	ldr	r3, [r3, #0]
 8118f84:	2b00      	cmp	r3, #0
 8118f86:	d004      	beq.n	8118f92 <tcp_get_next_optbyte+0x26>
 8118f88:	4b11      	ldr	r3, [pc, #68]	@ (8118fd0 <tcp_get_next_optbyte+0x64>)
 8118f8a:	881b      	ldrh	r3, [r3, #0]
 8118f8c:	88fa      	ldrh	r2, [r7, #6]
 8118f8e:	429a      	cmp	r2, r3
 8118f90:	d208      	bcs.n	8118fa4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8118f92:	4b10      	ldr	r3, [pc, #64]	@ (8118fd4 <tcp_get_next_optbyte+0x68>)
 8118f94:	681b      	ldr	r3, [r3, #0]
 8118f96:	3314      	adds	r3, #20
 8118f98:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8118f9a:	88fb      	ldrh	r3, [r7, #6]
 8118f9c:	683a      	ldr	r2, [r7, #0]
 8118f9e:	4413      	add	r3, r2
 8118fa0:	781b      	ldrb	r3, [r3, #0]
 8118fa2:	e00b      	b.n	8118fbc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8118fa4:	88fb      	ldrh	r3, [r7, #6]
 8118fa6:	b2da      	uxtb	r2, r3
 8118fa8:	4b09      	ldr	r3, [pc, #36]	@ (8118fd0 <tcp_get_next_optbyte+0x64>)
 8118faa:	881b      	ldrh	r3, [r3, #0]
 8118fac:	b2db      	uxtb	r3, r3
 8118fae:	1ad3      	subs	r3, r2, r3
 8118fb0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8118fb2:	4b06      	ldr	r3, [pc, #24]	@ (8118fcc <tcp_get_next_optbyte+0x60>)
 8118fb4:	681a      	ldr	r2, [r3, #0]
 8118fb6:	797b      	ldrb	r3, [r7, #5]
 8118fb8:	4413      	add	r3, r2
 8118fba:	781b      	ldrb	r3, [r3, #0]
  }
}
 8118fbc:	4618      	mov	r0, r3
 8118fbe:	370c      	adds	r7, #12
 8118fc0:	46bd      	mov	sp, r7
 8118fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8118fc6:	4770      	bx	lr
 8118fc8:	10011d48 	.word	0x10011d48
 8118fcc:	10011d44 	.word	0x10011d44
 8118fd0:	10011d42 	.word	0x10011d42
 8118fd4:	10011d3c 	.word	0x10011d3c

08118fd8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8118fd8:	b580      	push	{r7, lr}
 8118fda:	b084      	sub	sp, #16
 8118fdc:	af00      	add	r7, sp, #0
 8118fde:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8118fe0:	687b      	ldr	r3, [r7, #4]
 8118fe2:	2b00      	cmp	r3, #0
 8118fe4:	d106      	bne.n	8118ff4 <tcp_parseopt+0x1c>
 8118fe6:	4b33      	ldr	r3, [pc, #204]	@ (81190b4 <tcp_parseopt+0xdc>)
 8118fe8:	f240 727d 	movw	r2, #1917	@ 0x77d
 8118fec:	4932      	ldr	r1, [pc, #200]	@ (81190b8 <tcp_parseopt+0xe0>)
 8118fee:	4833      	ldr	r0, [pc, #204]	@ (81190bc <tcp_parseopt+0xe4>)
 8118ff0:	f002 ff2c 	bl	811be4c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8118ff4:	4b32      	ldr	r3, [pc, #200]	@ (81190c0 <tcp_parseopt+0xe8>)
 8118ff6:	881b      	ldrh	r3, [r3, #0]
 8118ff8:	2b00      	cmp	r3, #0
 8118ffa:	d057      	beq.n	81190ac <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8118ffc:	4b31      	ldr	r3, [pc, #196]	@ (81190c4 <tcp_parseopt+0xec>)
 8118ffe:	2200      	movs	r2, #0
 8119000:	801a      	strh	r2, [r3, #0]
 8119002:	e047      	b.n	8119094 <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 8119004:	f7ff ffb2 	bl	8118f6c <tcp_get_next_optbyte>
 8119008:	4603      	mov	r3, r0
 811900a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 811900c:	7bfb      	ldrb	r3, [r7, #15]
 811900e:	2b02      	cmp	r3, #2
 8119010:	d006      	beq.n	8119020 <tcp_parseopt+0x48>
 8119012:	2b02      	cmp	r3, #2
 8119014:	dc2b      	bgt.n	811906e <tcp_parseopt+0x96>
 8119016:	2b00      	cmp	r3, #0
 8119018:	d043      	beq.n	81190a2 <tcp_parseopt+0xca>
 811901a:	2b01      	cmp	r3, #1
 811901c:	d039      	beq.n	8119092 <tcp_parseopt+0xba>
 811901e:	e026      	b.n	811906e <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8119020:	f7ff ffa4 	bl	8118f6c <tcp_get_next_optbyte>
 8119024:	4603      	mov	r3, r0
 8119026:	2b04      	cmp	r3, #4
 8119028:	d13d      	bne.n	81190a6 <tcp_parseopt+0xce>
 811902a:	4b26      	ldr	r3, [pc, #152]	@ (81190c4 <tcp_parseopt+0xec>)
 811902c:	881b      	ldrh	r3, [r3, #0]
 811902e:	3301      	adds	r3, #1
 8119030:	4a23      	ldr	r2, [pc, #140]	@ (81190c0 <tcp_parseopt+0xe8>)
 8119032:	8812      	ldrh	r2, [r2, #0]
 8119034:	4293      	cmp	r3, r2
 8119036:	da36      	bge.n	81190a6 <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8119038:	f7ff ff98 	bl	8118f6c <tcp_get_next_optbyte>
 811903c:	4603      	mov	r3, r0
 811903e:	021b      	lsls	r3, r3, #8
 8119040:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8119042:	f7ff ff93 	bl	8118f6c <tcp_get_next_optbyte>
 8119046:	4603      	mov	r3, r0
 8119048:	461a      	mov	r2, r3
 811904a:	89bb      	ldrh	r3, [r7, #12]
 811904c:	4313      	orrs	r3, r2
 811904e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8119050:	89bb      	ldrh	r3, [r7, #12]
 8119052:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8119056:	4293      	cmp	r3, r2
 8119058:	d804      	bhi.n	8119064 <tcp_parseopt+0x8c>
 811905a:	89bb      	ldrh	r3, [r7, #12]
 811905c:	2b00      	cmp	r3, #0
 811905e:	d001      	beq.n	8119064 <tcp_parseopt+0x8c>
 8119060:	89ba      	ldrh	r2, [r7, #12]
 8119062:	e001      	b.n	8119068 <tcp_parseopt+0x90>
 8119064:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8119068:	687b      	ldr	r3, [r7, #4]
 811906a:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 811906c:	e012      	b.n	8119094 <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 811906e:	f7ff ff7d 	bl	8118f6c <tcp_get_next_optbyte>
 8119072:	4603      	mov	r3, r0
 8119074:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8119076:	7afb      	ldrb	r3, [r7, #11]
 8119078:	2b01      	cmp	r3, #1
 811907a:	d916      	bls.n	81190aa <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 811907c:	7afb      	ldrb	r3, [r7, #11]
 811907e:	b29a      	uxth	r2, r3
 8119080:	4b10      	ldr	r3, [pc, #64]	@ (81190c4 <tcp_parseopt+0xec>)
 8119082:	881b      	ldrh	r3, [r3, #0]
 8119084:	4413      	add	r3, r2
 8119086:	b29b      	uxth	r3, r3
 8119088:	3b02      	subs	r3, #2
 811908a:	b29a      	uxth	r2, r3
 811908c:	4b0d      	ldr	r3, [pc, #52]	@ (81190c4 <tcp_parseopt+0xec>)
 811908e:	801a      	strh	r2, [r3, #0]
 8119090:	e000      	b.n	8119094 <tcp_parseopt+0xbc>
          break;
 8119092:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8119094:	4b0b      	ldr	r3, [pc, #44]	@ (81190c4 <tcp_parseopt+0xec>)
 8119096:	881a      	ldrh	r2, [r3, #0]
 8119098:	4b09      	ldr	r3, [pc, #36]	@ (81190c0 <tcp_parseopt+0xe8>)
 811909a:	881b      	ldrh	r3, [r3, #0]
 811909c:	429a      	cmp	r2, r3
 811909e:	d3b1      	bcc.n	8119004 <tcp_parseopt+0x2c>
 81190a0:	e004      	b.n	81190ac <tcp_parseopt+0xd4>
          return;
 81190a2:	bf00      	nop
 81190a4:	e002      	b.n	81190ac <tcp_parseopt+0xd4>
            return;
 81190a6:	bf00      	nop
 81190a8:	e000      	b.n	81190ac <tcp_parseopt+0xd4>
            return;
 81190aa:	bf00      	nop
      }
    }
  }
}
 81190ac:	3710      	adds	r7, #16
 81190ae:	46bd      	mov	sp, r7
 81190b0:	bd80      	pop	{r7, pc}
 81190b2:	bf00      	nop
 81190b4:	0811e888 	.word	0x0811e888
 81190b8:	0811ed2c 	.word	0x0811ed2c
 81190bc:	0811e914 	.word	0x0811e914
 81190c0:	10011d40 	.word	0x10011d40
 81190c4:	10011d48 	.word	0x10011d48

081190c8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 81190c8:	b480      	push	{r7}
 81190ca:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 81190cc:	4b05      	ldr	r3, [pc, #20]	@ (81190e4 <tcp_trigger_input_pcb_close+0x1c>)
 81190ce:	781b      	ldrb	r3, [r3, #0]
 81190d0:	f043 0310 	orr.w	r3, r3, #16
 81190d4:	b2da      	uxtb	r2, r3
 81190d6:	4b03      	ldr	r3, [pc, #12]	@ (81190e4 <tcp_trigger_input_pcb_close+0x1c>)
 81190d8:	701a      	strb	r2, [r3, #0]
}
 81190da:	bf00      	nop
 81190dc:	46bd      	mov	sp, r7
 81190de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81190e2:	4770      	bx	lr
 81190e4:	10011d59 	.word	0x10011d59

081190e8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 81190e8:	b580      	push	{r7, lr}
 81190ea:	b084      	sub	sp, #16
 81190ec:	af00      	add	r7, sp, #0
 81190ee:	60f8      	str	r0, [r7, #12]
 81190f0:	60b9      	str	r1, [r7, #8]
 81190f2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 81190f4:	68fb      	ldr	r3, [r7, #12]
 81190f6:	2b00      	cmp	r3, #0
 81190f8:	d00a      	beq.n	8119110 <tcp_route+0x28>
 81190fa:	68fb      	ldr	r3, [r7, #12]
 81190fc:	7a1b      	ldrb	r3, [r3, #8]
 81190fe:	2b00      	cmp	r3, #0
 8119100:	d006      	beq.n	8119110 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8119102:	68fb      	ldr	r3, [r7, #12]
 8119104:	7a1b      	ldrb	r3, [r3, #8]
 8119106:	4618      	mov	r0, r3
 8119108:	f7fb f850 	bl	81141ac <netif_get_by_index>
 811910c:	4603      	mov	r3, r0
 811910e:	e003      	b.n	8119118 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8119110:	6878      	ldr	r0, [r7, #4]
 8119112:	f7f8 ff2b 	bl	8111f6c <ip4_route>
 8119116:	4603      	mov	r3, r0
  }
}
 8119118:	4618      	mov	r0, r3
 811911a:	3710      	adds	r7, #16
 811911c:	46bd      	mov	sp, r7
 811911e:	bd80      	pop	{r7, pc}

08119120 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8119120:	b590      	push	{r4, r7, lr}
 8119122:	b087      	sub	sp, #28
 8119124:	af00      	add	r7, sp, #0
 8119126:	60f8      	str	r0, [r7, #12]
 8119128:	60b9      	str	r1, [r7, #8]
 811912a:	603b      	str	r3, [r7, #0]
 811912c:	4613      	mov	r3, r2
 811912e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8119130:	68fb      	ldr	r3, [r7, #12]
 8119132:	2b00      	cmp	r3, #0
 8119134:	d105      	bne.n	8119142 <tcp_create_segment+0x22>
 8119136:	4b43      	ldr	r3, [pc, #268]	@ (8119244 <tcp_create_segment+0x124>)
 8119138:	22a3      	movs	r2, #163	@ 0xa3
 811913a:	4943      	ldr	r1, [pc, #268]	@ (8119248 <tcp_create_segment+0x128>)
 811913c:	4843      	ldr	r0, [pc, #268]	@ (811924c <tcp_create_segment+0x12c>)
 811913e:	f002 fe85 	bl	811be4c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8119142:	68bb      	ldr	r3, [r7, #8]
 8119144:	2b00      	cmp	r3, #0
 8119146:	d105      	bne.n	8119154 <tcp_create_segment+0x34>
 8119148:	4b3e      	ldr	r3, [pc, #248]	@ (8119244 <tcp_create_segment+0x124>)
 811914a:	22a4      	movs	r2, #164	@ 0xa4
 811914c:	4940      	ldr	r1, [pc, #256]	@ (8119250 <tcp_create_segment+0x130>)
 811914e:	483f      	ldr	r0, [pc, #252]	@ (811924c <tcp_create_segment+0x12c>)
 8119150:	f002 fe7c 	bl	811be4c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8119154:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8119158:	009b      	lsls	r3, r3, #2
 811915a:	b2db      	uxtb	r3, r3
 811915c:	f003 0304 	and.w	r3, r3, #4
 8119160:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8119162:	2003      	movs	r0, #3
 8119164:	f7fa fc96 	bl	8113a94 <memp_malloc>
 8119168:	6138      	str	r0, [r7, #16]
 811916a:	693b      	ldr	r3, [r7, #16]
 811916c:	2b00      	cmp	r3, #0
 811916e:	d104      	bne.n	811917a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8119170:	68b8      	ldr	r0, [r7, #8]
 8119172:	f7fb fba9 	bl	81148c8 <pbuf_free>
    return NULL;
 8119176:	2300      	movs	r3, #0
 8119178:	e060      	b.n	811923c <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 811917a:	693b      	ldr	r3, [r7, #16]
 811917c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8119180:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8119182:	693b      	ldr	r3, [r7, #16]
 8119184:	2200      	movs	r2, #0
 8119186:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8119188:	693b      	ldr	r3, [r7, #16]
 811918a:	68ba      	ldr	r2, [r7, #8]
 811918c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 811918e:	68bb      	ldr	r3, [r7, #8]
 8119190:	891a      	ldrh	r2, [r3, #8]
 8119192:	7dfb      	ldrb	r3, [r7, #23]
 8119194:	b29b      	uxth	r3, r3
 8119196:	429a      	cmp	r2, r3
 8119198:	d205      	bcs.n	81191a6 <tcp_create_segment+0x86>
 811919a:	4b2a      	ldr	r3, [pc, #168]	@ (8119244 <tcp_create_segment+0x124>)
 811919c:	22b0      	movs	r2, #176	@ 0xb0
 811919e:	492d      	ldr	r1, [pc, #180]	@ (8119254 <tcp_create_segment+0x134>)
 81191a0:	482a      	ldr	r0, [pc, #168]	@ (811924c <tcp_create_segment+0x12c>)
 81191a2:	f002 fe53 	bl	811be4c <iprintf>
  seg->len = p->tot_len - optlen;
 81191a6:	68bb      	ldr	r3, [r7, #8]
 81191a8:	891a      	ldrh	r2, [r3, #8]
 81191aa:	7dfb      	ldrb	r3, [r7, #23]
 81191ac:	b29b      	uxth	r3, r3
 81191ae:	1ad3      	subs	r3, r2, r3
 81191b0:	b29a      	uxth	r2, r3
 81191b2:	693b      	ldr	r3, [r7, #16]
 81191b4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 81191b6:	2114      	movs	r1, #20
 81191b8:	68b8      	ldr	r0, [r7, #8]
 81191ba:	f7fb faef 	bl	811479c <pbuf_add_header>
 81191be:	4603      	mov	r3, r0
 81191c0:	2b00      	cmp	r3, #0
 81191c2:	d004      	beq.n	81191ce <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 81191c4:	6938      	ldr	r0, [r7, #16]
 81191c6:	f7fd f854 	bl	8116272 <tcp_seg_free>
    return NULL;
 81191ca:	2300      	movs	r3, #0
 81191cc:	e036      	b.n	811923c <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 81191ce:	693b      	ldr	r3, [r7, #16]
 81191d0:	685b      	ldr	r3, [r3, #4]
 81191d2:	685a      	ldr	r2, [r3, #4]
 81191d4:	693b      	ldr	r3, [r7, #16]
 81191d6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 81191d8:	68fb      	ldr	r3, [r7, #12]
 81191da:	8ada      	ldrh	r2, [r3, #22]
 81191dc:	693b      	ldr	r3, [r7, #16]
 81191de:	68dc      	ldr	r4, [r3, #12]
 81191e0:	4610      	mov	r0, r2
 81191e2:	f7f7 fbeb 	bl	81109bc <lwip_htons>
 81191e6:	4603      	mov	r3, r0
 81191e8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 81191ea:	68fb      	ldr	r3, [r7, #12]
 81191ec:	8b1a      	ldrh	r2, [r3, #24]
 81191ee:	693b      	ldr	r3, [r7, #16]
 81191f0:	68dc      	ldr	r4, [r3, #12]
 81191f2:	4610      	mov	r0, r2
 81191f4:	f7f7 fbe2 	bl	81109bc <lwip_htons>
 81191f8:	4603      	mov	r3, r0
 81191fa:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 81191fc:	693b      	ldr	r3, [r7, #16]
 81191fe:	68dc      	ldr	r4, [r3, #12]
 8119200:	6838      	ldr	r0, [r7, #0]
 8119202:	f7f7 fbf0 	bl	81109e6 <lwip_htonl>
 8119206:	4603      	mov	r3, r0
 8119208:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 811920a:	7dfb      	ldrb	r3, [r7, #23]
 811920c:	089b      	lsrs	r3, r3, #2
 811920e:	b2db      	uxtb	r3, r3
 8119210:	3305      	adds	r3, #5
 8119212:	b29b      	uxth	r3, r3
 8119214:	031b      	lsls	r3, r3, #12
 8119216:	b29a      	uxth	r2, r3
 8119218:	79fb      	ldrb	r3, [r7, #7]
 811921a:	b29b      	uxth	r3, r3
 811921c:	4313      	orrs	r3, r2
 811921e:	b29a      	uxth	r2, r3
 8119220:	693b      	ldr	r3, [r7, #16]
 8119222:	68dc      	ldr	r4, [r3, #12]
 8119224:	4610      	mov	r0, r2
 8119226:	f7f7 fbc9 	bl	81109bc <lwip_htons>
 811922a:	4603      	mov	r3, r0
 811922c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 811922e:	693b      	ldr	r3, [r7, #16]
 8119230:	68db      	ldr	r3, [r3, #12]
 8119232:	2200      	movs	r2, #0
 8119234:	749a      	strb	r2, [r3, #18]
 8119236:	2200      	movs	r2, #0
 8119238:	74da      	strb	r2, [r3, #19]
  return seg;
 811923a:	693b      	ldr	r3, [r7, #16]
}
 811923c:	4618      	mov	r0, r3
 811923e:	371c      	adds	r7, #28
 8119240:	46bd      	mov	sp, r7
 8119242:	bd90      	pop	{r4, r7, pc}
 8119244:	0811ed48 	.word	0x0811ed48
 8119248:	0811edbc 	.word	0x0811edbc
 811924c:	0811eddc 	.word	0x0811eddc
 8119250:	0811ee04 	.word	0x0811ee04
 8119254:	0811ee28 	.word	0x0811ee28

08119258 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8119258:	b580      	push	{r7, lr}
 811925a:	b086      	sub	sp, #24
 811925c:	af00      	add	r7, sp, #0
 811925e:	607b      	str	r3, [r7, #4]
 8119260:	4603      	mov	r3, r0
 8119262:	73fb      	strb	r3, [r7, #15]
 8119264:	460b      	mov	r3, r1
 8119266:	81bb      	strh	r3, [r7, #12]
 8119268:	4613      	mov	r3, r2
 811926a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 811926c:	89bb      	ldrh	r3, [r7, #12]
 811926e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8119270:	687b      	ldr	r3, [r7, #4]
 8119272:	2b00      	cmp	r3, #0
 8119274:	d105      	bne.n	8119282 <tcp_pbuf_prealloc+0x2a>
 8119276:	4b30      	ldr	r3, [pc, #192]	@ (8119338 <tcp_pbuf_prealloc+0xe0>)
 8119278:	22e8      	movs	r2, #232	@ 0xe8
 811927a:	4930      	ldr	r1, [pc, #192]	@ (811933c <tcp_pbuf_prealloc+0xe4>)
 811927c:	4830      	ldr	r0, [pc, #192]	@ (8119340 <tcp_pbuf_prealloc+0xe8>)
 811927e:	f002 fde5 	bl	811be4c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8119282:	6a3b      	ldr	r3, [r7, #32]
 8119284:	2b00      	cmp	r3, #0
 8119286:	d105      	bne.n	8119294 <tcp_pbuf_prealloc+0x3c>
 8119288:	4b2b      	ldr	r3, [pc, #172]	@ (8119338 <tcp_pbuf_prealloc+0xe0>)
 811928a:	22e9      	movs	r2, #233	@ 0xe9
 811928c:	492d      	ldr	r1, [pc, #180]	@ (8119344 <tcp_pbuf_prealloc+0xec>)
 811928e:	482c      	ldr	r0, [pc, #176]	@ (8119340 <tcp_pbuf_prealloc+0xe8>)
 8119290:	f002 fddc 	bl	811be4c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8119294:	89ba      	ldrh	r2, [r7, #12]
 8119296:	897b      	ldrh	r3, [r7, #10]
 8119298:	429a      	cmp	r2, r3
 811929a:	d221      	bcs.n	81192e0 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 811929c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 81192a0:	f003 0302 	and.w	r3, r3, #2
 81192a4:	2b00      	cmp	r3, #0
 81192a6:	d111      	bne.n	81192cc <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 81192a8:	6a3b      	ldr	r3, [r7, #32]
 81192aa:	8b5b      	ldrh	r3, [r3, #26]
 81192ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 81192b0:	2b00      	cmp	r3, #0
 81192b2:	d115      	bne.n	81192e0 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 81192b4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 81192b8:	2b00      	cmp	r3, #0
 81192ba:	d007      	beq.n	81192cc <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 81192bc:	6a3b      	ldr	r3, [r7, #32]
 81192be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 81192c0:	2b00      	cmp	r3, #0
 81192c2:	d103      	bne.n	81192cc <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 81192c4:	6a3b      	ldr	r3, [r7, #32]
 81192c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 81192c8:	2b00      	cmp	r3, #0
 81192ca:	d009      	beq.n	81192e0 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 81192cc:	89bb      	ldrh	r3, [r7, #12]
 81192ce:	f203 53b7 	addw	r3, r3, #1463	@ 0x5b7
 81192d2:	f023 0203 	bic.w	r2, r3, #3
 81192d6:	897b      	ldrh	r3, [r7, #10]
 81192d8:	4293      	cmp	r3, r2
 81192da:	bf28      	it	cs
 81192dc:	4613      	movcs	r3, r2
 81192de:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 81192e0:	8af9      	ldrh	r1, [r7, #22]
 81192e2:	7bfb      	ldrb	r3, [r7, #15]
 81192e4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 81192e8:	4618      	mov	r0, r3
 81192ea:	f7fb f809 	bl	8114300 <pbuf_alloc>
 81192ee:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 81192f0:	693b      	ldr	r3, [r7, #16]
 81192f2:	2b00      	cmp	r3, #0
 81192f4:	d101      	bne.n	81192fa <tcp_pbuf_prealloc+0xa2>
    return NULL;
 81192f6:	2300      	movs	r3, #0
 81192f8:	e019      	b.n	811932e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 81192fa:	693b      	ldr	r3, [r7, #16]
 81192fc:	681b      	ldr	r3, [r3, #0]
 81192fe:	2b00      	cmp	r3, #0
 8119300:	d006      	beq.n	8119310 <tcp_pbuf_prealloc+0xb8>
 8119302:	4b0d      	ldr	r3, [pc, #52]	@ (8119338 <tcp_pbuf_prealloc+0xe0>)
 8119304:	f240 120b 	movw	r2, #267	@ 0x10b
 8119308:	490f      	ldr	r1, [pc, #60]	@ (8119348 <tcp_pbuf_prealloc+0xf0>)
 811930a:	480d      	ldr	r0, [pc, #52]	@ (8119340 <tcp_pbuf_prealloc+0xe8>)
 811930c:	f002 fd9e 	bl	811be4c <iprintf>
  *oversize = p->len - length;
 8119310:	693b      	ldr	r3, [r7, #16]
 8119312:	895a      	ldrh	r2, [r3, #10]
 8119314:	89bb      	ldrh	r3, [r7, #12]
 8119316:	1ad3      	subs	r3, r2, r3
 8119318:	b29a      	uxth	r2, r3
 811931a:	687b      	ldr	r3, [r7, #4]
 811931c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 811931e:	693b      	ldr	r3, [r7, #16]
 8119320:	89ba      	ldrh	r2, [r7, #12]
 8119322:	811a      	strh	r2, [r3, #8]
 8119324:	693b      	ldr	r3, [r7, #16]
 8119326:	891a      	ldrh	r2, [r3, #8]
 8119328:	693b      	ldr	r3, [r7, #16]
 811932a:	815a      	strh	r2, [r3, #10]
  return p;
 811932c:	693b      	ldr	r3, [r7, #16]
}
 811932e:	4618      	mov	r0, r3
 8119330:	3718      	adds	r7, #24
 8119332:	46bd      	mov	sp, r7
 8119334:	bd80      	pop	{r7, pc}
 8119336:	bf00      	nop
 8119338:	0811ed48 	.word	0x0811ed48
 811933c:	0811ee40 	.word	0x0811ee40
 8119340:	0811eddc 	.word	0x0811eddc
 8119344:	0811ee64 	.word	0x0811ee64
 8119348:	0811ee84 	.word	0x0811ee84

0811934c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 811934c:	b580      	push	{r7, lr}
 811934e:	b082      	sub	sp, #8
 8119350:	af00      	add	r7, sp, #0
 8119352:	6078      	str	r0, [r7, #4]
 8119354:	460b      	mov	r3, r1
 8119356:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8119358:	687b      	ldr	r3, [r7, #4]
 811935a:	2b00      	cmp	r3, #0
 811935c:	d106      	bne.n	811936c <tcp_write_checks+0x20>
 811935e:	4b33      	ldr	r3, [pc, #204]	@ (811942c <tcp_write_checks+0xe0>)
 8119360:	f240 1233 	movw	r2, #307	@ 0x133
 8119364:	4932      	ldr	r1, [pc, #200]	@ (8119430 <tcp_write_checks+0xe4>)
 8119366:	4833      	ldr	r0, [pc, #204]	@ (8119434 <tcp_write_checks+0xe8>)
 8119368:	f002 fd70 	bl	811be4c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 811936c:	687b      	ldr	r3, [r7, #4]
 811936e:	7d1b      	ldrb	r3, [r3, #20]
 8119370:	2b04      	cmp	r3, #4
 8119372:	d00e      	beq.n	8119392 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8119374:	687b      	ldr	r3, [r7, #4]
 8119376:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8119378:	2b07      	cmp	r3, #7
 811937a:	d00a      	beq.n	8119392 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 811937c:	687b      	ldr	r3, [r7, #4]
 811937e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8119380:	2b02      	cmp	r3, #2
 8119382:	d006      	beq.n	8119392 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8119384:	687b      	ldr	r3, [r7, #4]
 8119386:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8119388:	2b03      	cmp	r3, #3
 811938a:	d002      	beq.n	8119392 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 811938c:	f06f 030a 	mvn.w	r3, #10
 8119390:	e048      	b.n	8119424 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8119392:	887b      	ldrh	r3, [r7, #2]
 8119394:	2b00      	cmp	r3, #0
 8119396:	d101      	bne.n	811939c <tcp_write_checks+0x50>
    return ERR_OK;
 8119398:	2300      	movs	r3, #0
 811939a:	e043      	b.n	8119424 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 811939c:	687b      	ldr	r3, [r7, #4]
 811939e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 81193a2:	887a      	ldrh	r2, [r7, #2]
 81193a4:	429a      	cmp	r2, r3
 81193a6:	d909      	bls.n	81193bc <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 81193a8:	687b      	ldr	r3, [r7, #4]
 81193aa:	8b5b      	ldrh	r3, [r3, #26]
 81193ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81193b0:	b29a      	uxth	r2, r3
 81193b2:	687b      	ldr	r3, [r7, #4]
 81193b4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 81193b6:	f04f 33ff 	mov.w	r3, #4294967295
 81193ba:	e033      	b.n	8119424 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 81193bc:	687b      	ldr	r3, [r7, #4]
 81193be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 81193c2:	2b0f      	cmp	r3, #15
 81193c4:	d909      	bls.n	81193da <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 81193c6:	687b      	ldr	r3, [r7, #4]
 81193c8:	8b5b      	ldrh	r3, [r3, #26]
 81193ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81193ce:	b29a      	uxth	r2, r3
 81193d0:	687b      	ldr	r3, [r7, #4]
 81193d2:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 81193d4:	f04f 33ff 	mov.w	r3, #4294967295
 81193d8:	e024      	b.n	8119424 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 81193da:	687b      	ldr	r3, [r7, #4]
 81193dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 81193e0:	2b00      	cmp	r3, #0
 81193e2:	d00f      	beq.n	8119404 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 81193e4:	687b      	ldr	r3, [r7, #4]
 81193e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81193e8:	2b00      	cmp	r3, #0
 81193ea:	d11a      	bne.n	8119422 <tcp_write_checks+0xd6>
 81193ec:	687b      	ldr	r3, [r7, #4]
 81193ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81193f0:	2b00      	cmp	r3, #0
 81193f2:	d116      	bne.n	8119422 <tcp_write_checks+0xd6>
 81193f4:	4b0d      	ldr	r3, [pc, #52]	@ (811942c <tcp_write_checks+0xe0>)
 81193f6:	f240 1255 	movw	r2, #341	@ 0x155
 81193fa:	490f      	ldr	r1, [pc, #60]	@ (8119438 <tcp_write_checks+0xec>)
 81193fc:	480d      	ldr	r0, [pc, #52]	@ (8119434 <tcp_write_checks+0xe8>)
 81193fe:	f002 fd25 	bl	811be4c <iprintf>
 8119402:	e00e      	b.n	8119422 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8119404:	687b      	ldr	r3, [r7, #4]
 8119406:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8119408:	2b00      	cmp	r3, #0
 811940a:	d103      	bne.n	8119414 <tcp_write_checks+0xc8>
 811940c:	687b      	ldr	r3, [r7, #4]
 811940e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8119410:	2b00      	cmp	r3, #0
 8119412:	d006      	beq.n	8119422 <tcp_write_checks+0xd6>
 8119414:	4b05      	ldr	r3, [pc, #20]	@ (811942c <tcp_write_checks+0xe0>)
 8119416:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 811941a:	4908      	ldr	r1, [pc, #32]	@ (811943c <tcp_write_checks+0xf0>)
 811941c:	4805      	ldr	r0, [pc, #20]	@ (8119434 <tcp_write_checks+0xe8>)
 811941e:	f002 fd15 	bl	811be4c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8119422:	2300      	movs	r3, #0
}
 8119424:	4618      	mov	r0, r3
 8119426:	3708      	adds	r7, #8
 8119428:	46bd      	mov	sp, r7
 811942a:	bd80      	pop	{r7, pc}
 811942c:	0811ed48 	.word	0x0811ed48
 8119430:	0811ee98 	.word	0x0811ee98
 8119434:	0811eddc 	.word	0x0811eddc
 8119438:	0811eeb8 	.word	0x0811eeb8
 811943c:	0811eef4 	.word	0x0811eef4

08119440 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8119440:	b590      	push	{r4, r7, lr}
 8119442:	b09b      	sub	sp, #108	@ 0x6c
 8119444:	af04      	add	r7, sp, #16
 8119446:	60f8      	str	r0, [r7, #12]
 8119448:	60b9      	str	r1, [r7, #8]
 811944a:	4611      	mov	r1, r2
 811944c:	461a      	mov	r2, r3
 811944e:	460b      	mov	r3, r1
 8119450:	80fb      	strh	r3, [r7, #6]
 8119452:	4613      	mov	r3, r2
 8119454:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8119456:	2300      	movs	r3, #0
 8119458:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 811945a:	2300      	movs	r3, #0
 811945c:	653b      	str	r3, [r7, #80]	@ 0x50
 811945e:	2300      	movs	r3, #0
 8119460:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8119462:	2300      	movs	r3, #0
 8119464:	64bb      	str	r3, [r7, #72]	@ 0x48
 8119466:	2300      	movs	r3, #0
 8119468:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 811946a:	2300      	movs	r3, #0
 811946c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8119470:	2300      	movs	r3, #0
 8119472:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8119476:	2300      	movs	r3, #0
 8119478:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 811947a:	2300      	movs	r3, #0
 811947c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 811947e:	2300      	movs	r3, #0
 8119480:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8119482:	68fb      	ldr	r3, [r7, #12]
 8119484:	2b00      	cmp	r3, #0
 8119486:	d109      	bne.n	811949c <tcp_write+0x5c>
 8119488:	4ba4      	ldr	r3, [pc, #656]	@ (811971c <tcp_write+0x2dc>)
 811948a:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 811948e:	49a4      	ldr	r1, [pc, #656]	@ (8119720 <tcp_write+0x2e0>)
 8119490:	48a4      	ldr	r0, [pc, #656]	@ (8119724 <tcp_write+0x2e4>)
 8119492:	f002 fcdb 	bl	811be4c <iprintf>
 8119496:	f06f 030f 	mvn.w	r3, #15
 811949a:	e32a      	b.n	8119af2 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 811949c:	68fb      	ldr	r3, [r7, #12]
 811949e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 81194a2:	085b      	lsrs	r3, r3, #1
 81194a4:	b29a      	uxth	r2, r3
 81194a6:	68fb      	ldr	r3, [r7, #12]
 81194a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81194aa:	4293      	cmp	r3, r2
 81194ac:	bf28      	it	cs
 81194ae:	4613      	movcs	r3, r2
 81194b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 81194b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 81194b4:	2b00      	cmp	r3, #0
 81194b6:	d102      	bne.n	81194be <tcp_write+0x7e>
 81194b8:	68fb      	ldr	r3, [r7, #12]
 81194ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 81194bc:	e000      	b.n	81194c0 <tcp_write+0x80>
 81194be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 81194c0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 81194c2:	68bb      	ldr	r3, [r7, #8]
 81194c4:	2b00      	cmp	r3, #0
 81194c6:	d109      	bne.n	81194dc <tcp_write+0x9c>
 81194c8:	4b94      	ldr	r3, [pc, #592]	@ (811971c <tcp_write+0x2dc>)
 81194ca:	f240 12ad 	movw	r2, #429	@ 0x1ad
 81194ce:	4996      	ldr	r1, [pc, #600]	@ (8119728 <tcp_write+0x2e8>)
 81194d0:	4894      	ldr	r0, [pc, #592]	@ (8119724 <tcp_write+0x2e4>)
 81194d2:	f002 fcbb 	bl	811be4c <iprintf>
 81194d6:	f06f 030f 	mvn.w	r3, #15
 81194da:	e30a      	b.n	8119af2 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 81194dc:	88fb      	ldrh	r3, [r7, #6]
 81194de:	4619      	mov	r1, r3
 81194e0:	68f8      	ldr	r0, [r7, #12]
 81194e2:	f7ff ff33 	bl	811934c <tcp_write_checks>
 81194e6:	4603      	mov	r3, r0
 81194e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 81194ec:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 81194f0:	2b00      	cmp	r3, #0
 81194f2:	d002      	beq.n	81194fa <tcp_write+0xba>
    return err;
 81194f4:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 81194f8:	e2fb      	b.n	8119af2 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 81194fa:	68fb      	ldr	r3, [r7, #12]
 81194fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8119500:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8119504:	2300      	movs	r3, #0
 8119506:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 811950a:	68fb      	ldr	r3, [r7, #12]
 811950c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811950e:	2b00      	cmp	r3, #0
 8119510:	f000 80f6 	beq.w	8119700 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8119514:	68fb      	ldr	r3, [r7, #12]
 8119516:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8119518:	653b      	str	r3, [r7, #80]	@ 0x50
 811951a:	e002      	b.n	8119522 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 811951c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811951e:	681b      	ldr	r3, [r3, #0]
 8119520:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8119522:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8119524:	681b      	ldr	r3, [r3, #0]
 8119526:	2b00      	cmp	r3, #0
 8119528:	d1f8      	bne.n	811951c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 811952a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811952c:	7a9b      	ldrb	r3, [r3, #10]
 811952e:	009b      	lsls	r3, r3, #2
 8119530:	b29b      	uxth	r3, r3
 8119532:	f003 0304 	and.w	r3, r3, #4
 8119536:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8119538:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 811953a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811953c:	891b      	ldrh	r3, [r3, #8]
 811953e:	4619      	mov	r1, r3
 8119540:	8c3b      	ldrh	r3, [r7, #32]
 8119542:	440b      	add	r3, r1
 8119544:	429a      	cmp	r2, r3
 8119546:	da06      	bge.n	8119556 <tcp_write+0x116>
 8119548:	4b74      	ldr	r3, [pc, #464]	@ (811971c <tcp_write+0x2dc>)
 811954a:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 811954e:	4977      	ldr	r1, [pc, #476]	@ (811972c <tcp_write+0x2ec>)
 8119550:	4874      	ldr	r0, [pc, #464]	@ (8119724 <tcp_write+0x2e4>)
 8119552:	f002 fc7b 	bl	811be4c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8119556:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8119558:	891a      	ldrh	r2, [r3, #8]
 811955a:	8c3b      	ldrh	r3, [r7, #32]
 811955c:	4413      	add	r3, r2
 811955e:	b29b      	uxth	r3, r3
 8119560:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8119562:	1ad3      	subs	r3, r2, r3
 8119564:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8119566:	68fb      	ldr	r3, [r7, #12]
 8119568:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 811956c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 811956e:	8a7b      	ldrh	r3, [r7, #18]
 8119570:	2b00      	cmp	r3, #0
 8119572:	d026      	beq.n	81195c2 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8119574:	8a7b      	ldrh	r3, [r7, #18]
 8119576:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8119578:	429a      	cmp	r2, r3
 811957a:	d206      	bcs.n	811958a <tcp_write+0x14a>
 811957c:	4b67      	ldr	r3, [pc, #412]	@ (811971c <tcp_write+0x2dc>)
 811957e:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8119582:	496b      	ldr	r1, [pc, #428]	@ (8119730 <tcp_write+0x2f0>)
 8119584:	4867      	ldr	r0, [pc, #412]	@ (8119724 <tcp_write+0x2e4>)
 8119586:	f002 fc61 	bl	811be4c <iprintf>
      seg = last_unsent;
 811958a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811958c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 811958e:	8a7b      	ldrh	r3, [r7, #18]
 8119590:	88fa      	ldrh	r2, [r7, #6]
 8119592:	4293      	cmp	r3, r2
 8119594:	bf28      	it	cs
 8119596:	4613      	movcs	r3, r2
 8119598:	b29b      	uxth	r3, r3
 811959a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 811959c:	4293      	cmp	r3, r2
 811959e:	bf28      	it	cs
 81195a0:	4613      	movcs	r3, r2
 81195a2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 81195a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 81195a8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 81195aa:	4413      	add	r3, r2
 81195ac:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 81195b0:	8a7a      	ldrh	r2, [r7, #18]
 81195b2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 81195b4:	1ad3      	subs	r3, r2, r3
 81195b6:	b29b      	uxth	r3, r3
 81195b8:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 81195ba:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 81195bc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 81195be:	1ad3      	subs	r3, r2, r3
 81195c0:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 81195c2:	8a7b      	ldrh	r3, [r7, #18]
 81195c4:	2b00      	cmp	r3, #0
 81195c6:	d00b      	beq.n	81195e0 <tcp_write+0x1a0>
 81195c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 81195cc:	88fb      	ldrh	r3, [r7, #6]
 81195ce:	429a      	cmp	r2, r3
 81195d0:	d006      	beq.n	81195e0 <tcp_write+0x1a0>
 81195d2:	4b52      	ldr	r3, [pc, #328]	@ (811971c <tcp_write+0x2dc>)
 81195d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 81195d8:	4956      	ldr	r1, [pc, #344]	@ (8119734 <tcp_write+0x2f4>)
 81195da:	4852      	ldr	r0, [pc, #328]	@ (8119724 <tcp_write+0x2e4>)
 81195dc:	f002 fc36 	bl	811be4c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 81195e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 81195e4:	88fb      	ldrh	r3, [r7, #6]
 81195e6:	429a      	cmp	r2, r3
 81195e8:	f080 8167 	bcs.w	81198ba <tcp_write+0x47a>
 81195ec:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 81195ee:	2b00      	cmp	r3, #0
 81195f0:	f000 8163 	beq.w	81198ba <tcp_write+0x47a>
 81195f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81195f6:	891b      	ldrh	r3, [r3, #8]
 81195f8:	2b00      	cmp	r3, #0
 81195fa:	f000 815e 	beq.w	81198ba <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 81195fe:	88fa      	ldrh	r2, [r7, #6]
 8119600:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8119604:	1ad2      	subs	r2, r2, r3
 8119606:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8119608:	4293      	cmp	r3, r2
 811960a:	bfa8      	it	ge
 811960c:	4613      	movge	r3, r2
 811960e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8119610:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8119612:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8119614:	797b      	ldrb	r3, [r7, #5]
 8119616:	f003 0301 	and.w	r3, r3, #1
 811961a:	2b00      	cmp	r3, #0
 811961c:	d027      	beq.n	811966e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 811961e:	f107 0012 	add.w	r0, r7, #18
 8119622:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8119624:	8bf9      	ldrh	r1, [r7, #30]
 8119626:	2301      	movs	r3, #1
 8119628:	9302      	str	r3, [sp, #8]
 811962a:	797b      	ldrb	r3, [r7, #5]
 811962c:	9301      	str	r3, [sp, #4]
 811962e:	68fb      	ldr	r3, [r7, #12]
 8119630:	9300      	str	r3, [sp, #0]
 8119632:	4603      	mov	r3, r0
 8119634:	2000      	movs	r0, #0
 8119636:	f7ff fe0f 	bl	8119258 <tcp_pbuf_prealloc>
 811963a:	6578      	str	r0, [r7, #84]	@ 0x54
 811963c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 811963e:	2b00      	cmp	r3, #0
 8119640:	f000 8225 	beq.w	8119a8e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8119644:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8119646:	6858      	ldr	r0, [r3, #4]
 8119648:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 811964c:	68ba      	ldr	r2, [r7, #8]
 811964e:	4413      	add	r3, r2
 8119650:	8bfa      	ldrh	r2, [r7, #30]
 8119652:	4619      	mov	r1, r3
 8119654:	f002 fdab 	bl	811c1ae <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8119658:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 811965a:	f7fb f9c3 	bl	81149e4 <pbuf_clen>
 811965e:	4603      	mov	r3, r0
 8119660:	461a      	mov	r2, r3
 8119662:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8119666:	4413      	add	r3, r2
 8119668:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 811966c:	e041      	b.n	81196f2 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 811966e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8119670:	685b      	ldr	r3, [r3, #4]
 8119672:	637b      	str	r3, [r7, #52]	@ 0x34
 8119674:	e002      	b.n	811967c <tcp_write+0x23c>
 8119676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8119678:	681b      	ldr	r3, [r3, #0]
 811967a:	637b      	str	r3, [r7, #52]	@ 0x34
 811967c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 811967e:	681b      	ldr	r3, [r3, #0]
 8119680:	2b00      	cmp	r3, #0
 8119682:	d1f8      	bne.n	8119676 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8119684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8119686:	7b1b      	ldrb	r3, [r3, #12]
 8119688:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 811968c:	2b00      	cmp	r3, #0
 811968e:	d115      	bne.n	81196bc <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8119690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8119692:	685b      	ldr	r3, [r3, #4]
 8119694:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8119696:	8952      	ldrh	r2, [r2, #10]
 8119698:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 811969a:	68ba      	ldr	r2, [r7, #8]
 811969c:	429a      	cmp	r2, r3
 811969e:	d10d      	bne.n	81196bc <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 81196a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 81196a4:	2b00      	cmp	r3, #0
 81196a6:	d006      	beq.n	81196b6 <tcp_write+0x276>
 81196a8:	4b1c      	ldr	r3, [pc, #112]	@ (811971c <tcp_write+0x2dc>)
 81196aa:	f240 2231 	movw	r2, #561	@ 0x231
 81196ae:	4922      	ldr	r1, [pc, #136]	@ (8119738 <tcp_write+0x2f8>)
 81196b0:	481c      	ldr	r0, [pc, #112]	@ (8119724 <tcp_write+0x2e4>)
 81196b2:	f002 fbcb 	bl	811be4c <iprintf>
          extendlen = seglen;
 81196b6:	8bfb      	ldrh	r3, [r7, #30]
 81196b8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 81196ba:	e01a      	b.n	81196f2 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 81196bc:	8bfb      	ldrh	r3, [r7, #30]
 81196be:	2201      	movs	r2, #1
 81196c0:	4619      	mov	r1, r3
 81196c2:	2000      	movs	r0, #0
 81196c4:	f7fa fe1c 	bl	8114300 <pbuf_alloc>
 81196c8:	6578      	str	r0, [r7, #84]	@ 0x54
 81196ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81196cc:	2b00      	cmp	r3, #0
 81196ce:	f000 81e0 	beq.w	8119a92 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 81196d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 81196d6:	68ba      	ldr	r2, [r7, #8]
 81196d8:	441a      	add	r2, r3
 81196da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81196dc:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 81196de:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 81196e0:	f7fb f980 	bl	81149e4 <pbuf_clen>
 81196e4:	4603      	mov	r3, r0
 81196e6:	461a      	mov	r2, r3
 81196e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 81196ec:	4413      	add	r3, r2
 81196ee:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 81196f2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 81196f6:	8bfb      	ldrh	r3, [r7, #30]
 81196f8:	4413      	add	r3, r2
 81196fa:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 81196fe:	e0dc      	b.n	81198ba <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8119700:	68fb      	ldr	r3, [r7, #12]
 8119702:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8119706:	2b00      	cmp	r3, #0
 8119708:	f000 80d7 	beq.w	81198ba <tcp_write+0x47a>
 811970c:	4b03      	ldr	r3, [pc, #12]	@ (811971c <tcp_write+0x2dc>)
 811970e:	f240 224a 	movw	r2, #586	@ 0x24a
 8119712:	490a      	ldr	r1, [pc, #40]	@ (811973c <tcp_write+0x2fc>)
 8119714:	4803      	ldr	r0, [pc, #12]	@ (8119724 <tcp_write+0x2e4>)
 8119716:	f002 fb99 	bl	811be4c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 811971a:	e0ce      	b.n	81198ba <tcp_write+0x47a>
 811971c:	0811ed48 	.word	0x0811ed48
 8119720:	0811ef28 	.word	0x0811ef28
 8119724:	0811eddc 	.word	0x0811eddc
 8119728:	0811ef40 	.word	0x0811ef40
 811972c:	0811ef74 	.word	0x0811ef74
 8119730:	0811ef8c 	.word	0x0811ef8c
 8119734:	0811efac 	.word	0x0811efac
 8119738:	0811efcc 	.word	0x0811efcc
 811973c:	0811eff8 	.word	0x0811eff8
    struct pbuf *p;
    u16_t left = len - pos;
 8119740:	88fa      	ldrh	r2, [r7, #6]
 8119742:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8119746:	1ad3      	subs	r3, r2, r3
 8119748:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 811974a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 811974e:	b29b      	uxth	r3, r3
 8119750:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8119752:	1ad3      	subs	r3, r2, r3
 8119754:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8119756:	8b7a      	ldrh	r2, [r7, #26]
 8119758:	8bbb      	ldrh	r3, [r7, #28]
 811975a:	4293      	cmp	r3, r2
 811975c:	bf28      	it	cs
 811975e:	4613      	movcs	r3, r2
 8119760:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8119762:	797b      	ldrb	r3, [r7, #5]
 8119764:	f003 0301 	and.w	r3, r3, #1
 8119768:	2b00      	cmp	r3, #0
 811976a:	d036      	beq.n	81197da <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 811976c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8119770:	b29a      	uxth	r2, r3
 8119772:	8b3b      	ldrh	r3, [r7, #24]
 8119774:	4413      	add	r3, r2
 8119776:	b299      	uxth	r1, r3
 8119778:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 811977a:	2b00      	cmp	r3, #0
 811977c:	bf0c      	ite	eq
 811977e:	2301      	moveq	r3, #1
 8119780:	2300      	movne	r3, #0
 8119782:	b2db      	uxtb	r3, r3
 8119784:	f107 0012 	add.w	r0, r7, #18
 8119788:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 811978a:	9302      	str	r3, [sp, #8]
 811978c:	797b      	ldrb	r3, [r7, #5]
 811978e:	9301      	str	r3, [sp, #4]
 8119790:	68fb      	ldr	r3, [r7, #12]
 8119792:	9300      	str	r3, [sp, #0]
 8119794:	4603      	mov	r3, r0
 8119796:	2036      	movs	r0, #54	@ 0x36
 8119798:	f7ff fd5e 	bl	8119258 <tcp_pbuf_prealloc>
 811979c:	6338      	str	r0, [r7, #48]	@ 0x30
 811979e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81197a0:	2b00      	cmp	r3, #0
 81197a2:	f000 8178 	beq.w	8119a96 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 81197a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81197a8:	895b      	ldrh	r3, [r3, #10]
 81197aa:	8b3a      	ldrh	r2, [r7, #24]
 81197ac:	429a      	cmp	r2, r3
 81197ae:	d906      	bls.n	81197be <tcp_write+0x37e>
 81197b0:	4b8c      	ldr	r3, [pc, #560]	@ (81199e4 <tcp_write+0x5a4>)
 81197b2:	f240 2266 	movw	r2, #614	@ 0x266
 81197b6:	498c      	ldr	r1, [pc, #560]	@ (81199e8 <tcp_write+0x5a8>)
 81197b8:	488c      	ldr	r0, [pc, #560]	@ (81199ec <tcp_write+0x5ac>)
 81197ba:	f002 fb47 	bl	811be4c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 81197be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81197c0:	685a      	ldr	r2, [r3, #4]
 81197c2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 81197c6:	18d0      	adds	r0, r2, r3
 81197c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 81197cc:	68ba      	ldr	r2, [r7, #8]
 81197ce:	4413      	add	r3, r2
 81197d0:	8b3a      	ldrh	r2, [r7, #24]
 81197d2:	4619      	mov	r1, r3
 81197d4:	f002 fceb 	bl	811c1ae <memcpy>
 81197d8:	e02f      	b.n	811983a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 81197da:	8a7b      	ldrh	r3, [r7, #18]
 81197dc:	2b00      	cmp	r3, #0
 81197de:	d006      	beq.n	81197ee <tcp_write+0x3ae>
 81197e0:	4b80      	ldr	r3, [pc, #512]	@ (81199e4 <tcp_write+0x5a4>)
 81197e2:	f240 2271 	movw	r2, #625	@ 0x271
 81197e6:	4982      	ldr	r1, [pc, #520]	@ (81199f0 <tcp_write+0x5b0>)
 81197e8:	4880      	ldr	r0, [pc, #512]	@ (81199ec <tcp_write+0x5ac>)
 81197ea:	f002 fb2f 	bl	811be4c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 81197ee:	8b3b      	ldrh	r3, [r7, #24]
 81197f0:	2201      	movs	r2, #1
 81197f2:	4619      	mov	r1, r3
 81197f4:	2036      	movs	r0, #54	@ 0x36
 81197f6:	f7fa fd83 	bl	8114300 <pbuf_alloc>
 81197fa:	6178      	str	r0, [r7, #20]
 81197fc:	697b      	ldr	r3, [r7, #20]
 81197fe:	2b00      	cmp	r3, #0
 8119800:	f000 814b 	beq.w	8119a9a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8119804:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8119808:	68ba      	ldr	r2, [r7, #8]
 811980a:	441a      	add	r2, r3
 811980c:	697b      	ldr	r3, [r7, #20]
 811980e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8119810:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8119814:	b29b      	uxth	r3, r3
 8119816:	f44f 7220 	mov.w	r2, #640	@ 0x280
 811981a:	4619      	mov	r1, r3
 811981c:	2036      	movs	r0, #54	@ 0x36
 811981e:	f7fa fd6f 	bl	8114300 <pbuf_alloc>
 8119822:	6338      	str	r0, [r7, #48]	@ 0x30
 8119824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8119826:	2b00      	cmp	r3, #0
 8119828:	d103      	bne.n	8119832 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 811982a:	6978      	ldr	r0, [r7, #20]
 811982c:	f7fb f84c 	bl	81148c8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8119830:	e136      	b.n	8119aa0 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8119832:	6979      	ldr	r1, [r7, #20]
 8119834:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8119836:	f7fb f915 	bl	8114a64 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 811983a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 811983c:	f7fb f8d2 	bl	81149e4 <pbuf_clen>
 8119840:	4603      	mov	r3, r0
 8119842:	461a      	mov	r2, r3
 8119844:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8119848:	4413      	add	r3, r2
 811984a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 811984e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8119852:	2b10      	cmp	r3, #16
 8119854:	d903      	bls.n	811985e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8119856:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8119858:	f7fb f836 	bl	81148c8 <pbuf_free>
      goto memerr;
 811985c:	e120      	b.n	8119aa0 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 811985e:	68fb      	ldr	r3, [r7, #12]
 8119860:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8119862:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8119866:	441a      	add	r2, r3
 8119868:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811986c:	9300      	str	r3, [sp, #0]
 811986e:	4613      	mov	r3, r2
 8119870:	2200      	movs	r2, #0
 8119872:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8119874:	68f8      	ldr	r0, [r7, #12]
 8119876:	f7ff fc53 	bl	8119120 <tcp_create_segment>
 811987a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 811987c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 811987e:	2b00      	cmp	r3, #0
 8119880:	f000 810d 	beq.w	8119a9e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8119884:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8119886:	2b00      	cmp	r3, #0
 8119888:	d102      	bne.n	8119890 <tcp_write+0x450>
      queue = seg;
 811988a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 811988c:	647b      	str	r3, [r7, #68]	@ 0x44
 811988e:	e00c      	b.n	81198aa <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8119890:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8119892:	2b00      	cmp	r3, #0
 8119894:	d106      	bne.n	81198a4 <tcp_write+0x464>
 8119896:	4b53      	ldr	r3, [pc, #332]	@ (81199e4 <tcp_write+0x5a4>)
 8119898:	f240 22ab 	movw	r2, #683	@ 0x2ab
 811989c:	4955      	ldr	r1, [pc, #340]	@ (81199f4 <tcp_write+0x5b4>)
 811989e:	4853      	ldr	r0, [pc, #332]	@ (81199ec <tcp_write+0x5ac>)
 81198a0:	f002 fad4 	bl	811be4c <iprintf>
      prev_seg->next = seg;
 81198a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81198a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 81198a8:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 81198aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81198ac:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 81198ae:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 81198b2:	8b3b      	ldrh	r3, [r7, #24]
 81198b4:	4413      	add	r3, r2
 81198b6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 81198ba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 81198be:	88fb      	ldrh	r3, [r7, #6]
 81198c0:	429a      	cmp	r2, r3
 81198c2:	f4ff af3d 	bcc.w	8119740 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 81198c6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 81198c8:	2b00      	cmp	r3, #0
 81198ca:	d02c      	beq.n	8119926 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 81198cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81198ce:	685b      	ldr	r3, [r3, #4]
 81198d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81198d2:	e01e      	b.n	8119912 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 81198d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81198d6:	891a      	ldrh	r2, [r3, #8]
 81198d8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 81198da:	4413      	add	r3, r2
 81198dc:	b29a      	uxth	r2, r3
 81198de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81198e0:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 81198e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81198e4:	681b      	ldr	r3, [r3, #0]
 81198e6:	2b00      	cmp	r3, #0
 81198e8:	d110      	bne.n	811990c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 81198ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81198ec:	685b      	ldr	r3, [r3, #4]
 81198ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81198f0:	8952      	ldrh	r2, [r2, #10]
 81198f2:	4413      	add	r3, r2
 81198f4:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 81198f6:	68b9      	ldr	r1, [r7, #8]
 81198f8:	4618      	mov	r0, r3
 81198fa:	f002 fc58 	bl	811c1ae <memcpy>
        p->len += oversize_used;
 81198fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8119900:	895a      	ldrh	r2, [r3, #10]
 8119902:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8119904:	4413      	add	r3, r2
 8119906:	b29a      	uxth	r2, r3
 8119908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811990a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 811990c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 811990e:	681b      	ldr	r3, [r3, #0]
 8119910:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8119912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8119914:	2b00      	cmp	r3, #0
 8119916:	d1dd      	bne.n	81198d4 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8119918:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811991a:	891a      	ldrh	r2, [r3, #8]
 811991c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 811991e:	4413      	add	r3, r2
 8119920:	b29a      	uxth	r2, r3
 8119922:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8119924:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8119926:	8a7a      	ldrh	r2, [r7, #18]
 8119928:	68fb      	ldr	r3, [r7, #12]
 811992a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 811992e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8119930:	2b00      	cmp	r3, #0
 8119932:	d018      	beq.n	8119966 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8119934:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8119936:	2b00      	cmp	r3, #0
 8119938:	d106      	bne.n	8119948 <tcp_write+0x508>
 811993a:	4b2a      	ldr	r3, [pc, #168]	@ (81199e4 <tcp_write+0x5a4>)
 811993c:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8119940:	492d      	ldr	r1, [pc, #180]	@ (81199f8 <tcp_write+0x5b8>)
 8119942:	482a      	ldr	r0, [pc, #168]	@ (81199ec <tcp_write+0x5ac>)
 8119944:	f002 fa82 	bl	811be4c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8119948:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811994a:	685b      	ldr	r3, [r3, #4]
 811994c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 811994e:	4618      	mov	r0, r3
 8119950:	f7fb f888 	bl	8114a64 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8119954:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8119956:	891a      	ldrh	r2, [r3, #8]
 8119958:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 811995a:	891b      	ldrh	r3, [r3, #8]
 811995c:	4413      	add	r3, r2
 811995e:	b29a      	uxth	r2, r3
 8119960:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8119962:	811a      	strh	r2, [r3, #8]
 8119964:	e037      	b.n	81199d6 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8119966:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8119968:	2b00      	cmp	r3, #0
 811996a:	d034      	beq.n	81199d6 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 811996c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811996e:	2b00      	cmp	r3, #0
 8119970:	d003      	beq.n	811997a <tcp_write+0x53a>
 8119972:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8119974:	685b      	ldr	r3, [r3, #4]
 8119976:	2b00      	cmp	r3, #0
 8119978:	d106      	bne.n	8119988 <tcp_write+0x548>
 811997a:	4b1a      	ldr	r3, [pc, #104]	@ (81199e4 <tcp_write+0x5a4>)
 811997c:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8119980:	491e      	ldr	r1, [pc, #120]	@ (81199fc <tcp_write+0x5bc>)
 8119982:	481a      	ldr	r0, [pc, #104]	@ (81199ec <tcp_write+0x5ac>)
 8119984:	f002 fa62 	bl	811be4c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8119988:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 811998a:	685b      	ldr	r3, [r3, #4]
 811998c:	62bb      	str	r3, [r7, #40]	@ 0x28
 811998e:	e009      	b.n	81199a4 <tcp_write+0x564>
      p->tot_len += extendlen;
 8119990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8119992:	891a      	ldrh	r2, [r3, #8]
 8119994:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8119996:	4413      	add	r3, r2
 8119998:	b29a      	uxth	r2, r3
 811999a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811999c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 811999e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81199a0:	681b      	ldr	r3, [r3, #0]
 81199a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 81199a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81199a6:	681b      	ldr	r3, [r3, #0]
 81199a8:	2b00      	cmp	r3, #0
 81199aa:	d1f1      	bne.n	8119990 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 81199ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81199ae:	891a      	ldrh	r2, [r3, #8]
 81199b0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 81199b2:	4413      	add	r3, r2
 81199b4:	b29a      	uxth	r2, r3
 81199b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81199b8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 81199ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81199bc:	895a      	ldrh	r2, [r3, #10]
 81199be:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 81199c0:	4413      	add	r3, r2
 81199c2:	b29a      	uxth	r2, r3
 81199c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81199c6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 81199c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81199ca:	891a      	ldrh	r2, [r3, #8]
 81199cc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 81199ce:	4413      	add	r3, r2
 81199d0:	b29a      	uxth	r2, r3
 81199d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81199d4:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 81199d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81199d8:	2b00      	cmp	r3, #0
 81199da:	d111      	bne.n	8119a00 <tcp_write+0x5c0>
    pcb->unsent = queue;
 81199dc:	68fb      	ldr	r3, [r7, #12]
 81199de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 81199e0:	66da      	str	r2, [r3, #108]	@ 0x6c
 81199e2:	e010      	b.n	8119a06 <tcp_write+0x5c6>
 81199e4:	0811ed48 	.word	0x0811ed48
 81199e8:	0811f028 	.word	0x0811f028
 81199ec:	0811eddc 	.word	0x0811eddc
 81199f0:	0811f068 	.word	0x0811f068
 81199f4:	0811f078 	.word	0x0811f078
 81199f8:	0811f08c 	.word	0x0811f08c
 81199fc:	0811f0c4 	.word	0x0811f0c4
  } else {
    last_unsent->next = queue;
 8119a00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8119a02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8119a04:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8119a06:	68fb      	ldr	r3, [r7, #12]
 8119a08:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8119a0a:	88fb      	ldrh	r3, [r7, #6]
 8119a0c:	441a      	add	r2, r3
 8119a0e:	68fb      	ldr	r3, [r7, #12]
 8119a10:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8119a12:	68fb      	ldr	r3, [r7, #12]
 8119a14:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8119a18:	88fb      	ldrh	r3, [r7, #6]
 8119a1a:	1ad3      	subs	r3, r2, r3
 8119a1c:	b29a      	uxth	r2, r3
 8119a1e:	68fb      	ldr	r3, [r7, #12]
 8119a20:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8119a24:	68fb      	ldr	r3, [r7, #12]
 8119a26:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8119a2a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8119a2e:	68fb      	ldr	r3, [r7, #12]
 8119a30:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8119a34:	2b00      	cmp	r3, #0
 8119a36:	d00e      	beq.n	8119a56 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8119a38:	68fb      	ldr	r3, [r7, #12]
 8119a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8119a3c:	2b00      	cmp	r3, #0
 8119a3e:	d10a      	bne.n	8119a56 <tcp_write+0x616>
 8119a40:	68fb      	ldr	r3, [r7, #12]
 8119a42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8119a44:	2b00      	cmp	r3, #0
 8119a46:	d106      	bne.n	8119a56 <tcp_write+0x616>
 8119a48:	4b2c      	ldr	r3, [pc, #176]	@ (8119afc <tcp_write+0x6bc>)
 8119a4a:	f240 3212 	movw	r2, #786	@ 0x312
 8119a4e:	492c      	ldr	r1, [pc, #176]	@ (8119b00 <tcp_write+0x6c0>)
 8119a50:	482c      	ldr	r0, [pc, #176]	@ (8119b04 <tcp_write+0x6c4>)
 8119a52:	f002 f9fb 	bl	811be4c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8119a56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8119a58:	2b00      	cmp	r3, #0
 8119a5a:	d016      	beq.n	8119a8a <tcp_write+0x64a>
 8119a5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8119a5e:	68db      	ldr	r3, [r3, #12]
 8119a60:	2b00      	cmp	r3, #0
 8119a62:	d012      	beq.n	8119a8a <tcp_write+0x64a>
 8119a64:	797b      	ldrb	r3, [r7, #5]
 8119a66:	f003 0302 	and.w	r3, r3, #2
 8119a6a:	2b00      	cmp	r3, #0
 8119a6c:	d10d      	bne.n	8119a8a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8119a6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8119a70:	68db      	ldr	r3, [r3, #12]
 8119a72:	899b      	ldrh	r3, [r3, #12]
 8119a74:	b29c      	uxth	r4, r3
 8119a76:	2008      	movs	r0, #8
 8119a78:	f7f6 ffa0 	bl	81109bc <lwip_htons>
 8119a7c:	4603      	mov	r3, r0
 8119a7e:	461a      	mov	r2, r3
 8119a80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8119a82:	68db      	ldr	r3, [r3, #12]
 8119a84:	4322      	orrs	r2, r4
 8119a86:	b292      	uxth	r2, r2
 8119a88:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8119a8a:	2300      	movs	r3, #0
 8119a8c:	e031      	b.n	8119af2 <tcp_write+0x6b2>
          goto memerr;
 8119a8e:	bf00      	nop
 8119a90:	e006      	b.n	8119aa0 <tcp_write+0x660>
            goto memerr;
 8119a92:	bf00      	nop
 8119a94:	e004      	b.n	8119aa0 <tcp_write+0x660>
        goto memerr;
 8119a96:	bf00      	nop
 8119a98:	e002      	b.n	8119aa0 <tcp_write+0x660>
        goto memerr;
 8119a9a:	bf00      	nop
 8119a9c:	e000      	b.n	8119aa0 <tcp_write+0x660>
      goto memerr;
 8119a9e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8119aa0:	68fb      	ldr	r3, [r7, #12]
 8119aa2:	8b5b      	ldrh	r3, [r3, #26]
 8119aa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8119aa8:	b29a      	uxth	r2, r3
 8119aaa:	68fb      	ldr	r3, [r7, #12]
 8119aac:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8119aae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8119ab0:	2b00      	cmp	r3, #0
 8119ab2:	d002      	beq.n	8119aba <tcp_write+0x67a>
    pbuf_free(concat_p);
 8119ab4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8119ab6:	f7fa ff07 	bl	81148c8 <pbuf_free>
  }
  if (queue != NULL) {
 8119aba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8119abc:	2b00      	cmp	r3, #0
 8119abe:	d002      	beq.n	8119ac6 <tcp_write+0x686>
    tcp_segs_free(queue);
 8119ac0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8119ac2:	f7fc fbc1 	bl	8116248 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8119ac6:	68fb      	ldr	r3, [r7, #12]
 8119ac8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8119acc:	2b00      	cmp	r3, #0
 8119ace:	d00e      	beq.n	8119aee <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8119ad0:	68fb      	ldr	r3, [r7, #12]
 8119ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8119ad4:	2b00      	cmp	r3, #0
 8119ad6:	d10a      	bne.n	8119aee <tcp_write+0x6ae>
 8119ad8:	68fb      	ldr	r3, [r7, #12]
 8119ada:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8119adc:	2b00      	cmp	r3, #0
 8119ade:	d106      	bne.n	8119aee <tcp_write+0x6ae>
 8119ae0:	4b06      	ldr	r3, [pc, #24]	@ (8119afc <tcp_write+0x6bc>)
 8119ae2:	f240 3227 	movw	r2, #807	@ 0x327
 8119ae6:	4906      	ldr	r1, [pc, #24]	@ (8119b00 <tcp_write+0x6c0>)
 8119ae8:	4806      	ldr	r0, [pc, #24]	@ (8119b04 <tcp_write+0x6c4>)
 8119aea:	f002 f9af 	bl	811be4c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8119aee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8119af2:	4618      	mov	r0, r3
 8119af4:	375c      	adds	r7, #92	@ 0x5c
 8119af6:	46bd      	mov	sp, r7
 8119af8:	bd90      	pop	{r4, r7, pc}
 8119afa:	bf00      	nop
 8119afc:	0811ed48 	.word	0x0811ed48
 8119b00:	0811f0fc 	.word	0x0811f0fc
 8119b04:	0811eddc 	.word	0x0811eddc

08119b08 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8119b08:	b590      	push	{r4, r7, lr}
 8119b0a:	b08b      	sub	sp, #44	@ 0x2c
 8119b0c:	af02      	add	r7, sp, #8
 8119b0e:	6078      	str	r0, [r7, #4]
 8119b10:	460b      	mov	r3, r1
 8119b12:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8119b14:	2300      	movs	r3, #0
 8119b16:	61fb      	str	r3, [r7, #28]
 8119b18:	2300      	movs	r3, #0
 8119b1a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8119b1c:	2300      	movs	r3, #0
 8119b1e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8119b20:	687b      	ldr	r3, [r7, #4]
 8119b22:	2b00      	cmp	r3, #0
 8119b24:	d106      	bne.n	8119b34 <tcp_split_unsent_seg+0x2c>
 8119b26:	4b95      	ldr	r3, [pc, #596]	@ (8119d7c <tcp_split_unsent_seg+0x274>)
 8119b28:	f240 324b 	movw	r2, #843	@ 0x34b
 8119b2c:	4994      	ldr	r1, [pc, #592]	@ (8119d80 <tcp_split_unsent_seg+0x278>)
 8119b2e:	4895      	ldr	r0, [pc, #596]	@ (8119d84 <tcp_split_unsent_seg+0x27c>)
 8119b30:	f002 f98c 	bl	811be4c <iprintf>

  useg = pcb->unsent;
 8119b34:	687b      	ldr	r3, [r7, #4]
 8119b36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8119b38:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8119b3a:	697b      	ldr	r3, [r7, #20]
 8119b3c:	2b00      	cmp	r3, #0
 8119b3e:	d102      	bne.n	8119b46 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8119b40:	f04f 33ff 	mov.w	r3, #4294967295
 8119b44:	e116      	b.n	8119d74 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8119b46:	887b      	ldrh	r3, [r7, #2]
 8119b48:	2b00      	cmp	r3, #0
 8119b4a:	d109      	bne.n	8119b60 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8119b4c:	4b8b      	ldr	r3, [pc, #556]	@ (8119d7c <tcp_split_unsent_seg+0x274>)
 8119b4e:	f240 3253 	movw	r2, #851	@ 0x353
 8119b52:	498d      	ldr	r1, [pc, #564]	@ (8119d88 <tcp_split_unsent_seg+0x280>)
 8119b54:	488b      	ldr	r0, [pc, #556]	@ (8119d84 <tcp_split_unsent_seg+0x27c>)
 8119b56:	f002 f979 	bl	811be4c <iprintf>
    return ERR_VAL;
 8119b5a:	f06f 0305 	mvn.w	r3, #5
 8119b5e:	e109      	b.n	8119d74 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8119b60:	697b      	ldr	r3, [r7, #20]
 8119b62:	891b      	ldrh	r3, [r3, #8]
 8119b64:	887a      	ldrh	r2, [r7, #2]
 8119b66:	429a      	cmp	r2, r3
 8119b68:	d301      	bcc.n	8119b6e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8119b6a:	2300      	movs	r3, #0
 8119b6c:	e102      	b.n	8119d74 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8119b6e:	687b      	ldr	r3, [r7, #4]
 8119b70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8119b72:	887a      	ldrh	r2, [r7, #2]
 8119b74:	429a      	cmp	r2, r3
 8119b76:	d906      	bls.n	8119b86 <tcp_split_unsent_seg+0x7e>
 8119b78:	4b80      	ldr	r3, [pc, #512]	@ (8119d7c <tcp_split_unsent_seg+0x274>)
 8119b7a:	f240 325b 	movw	r2, #859	@ 0x35b
 8119b7e:	4983      	ldr	r1, [pc, #524]	@ (8119d8c <tcp_split_unsent_seg+0x284>)
 8119b80:	4880      	ldr	r0, [pc, #512]	@ (8119d84 <tcp_split_unsent_seg+0x27c>)
 8119b82:	f002 f963 	bl	811be4c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8119b86:	697b      	ldr	r3, [r7, #20]
 8119b88:	891b      	ldrh	r3, [r3, #8]
 8119b8a:	2b00      	cmp	r3, #0
 8119b8c:	d106      	bne.n	8119b9c <tcp_split_unsent_seg+0x94>
 8119b8e:	4b7b      	ldr	r3, [pc, #492]	@ (8119d7c <tcp_split_unsent_seg+0x274>)
 8119b90:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8119b94:	497e      	ldr	r1, [pc, #504]	@ (8119d90 <tcp_split_unsent_seg+0x288>)
 8119b96:	487b      	ldr	r0, [pc, #492]	@ (8119d84 <tcp_split_unsent_seg+0x27c>)
 8119b98:	f002 f958 	bl	811be4c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8119b9c:	697b      	ldr	r3, [r7, #20]
 8119b9e:	7a9b      	ldrb	r3, [r3, #10]
 8119ba0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8119ba2:	7bfb      	ldrb	r3, [r7, #15]
 8119ba4:	009b      	lsls	r3, r3, #2
 8119ba6:	b2db      	uxtb	r3, r3
 8119ba8:	f003 0304 	and.w	r3, r3, #4
 8119bac:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8119bae:	697b      	ldr	r3, [r7, #20]
 8119bb0:	891a      	ldrh	r2, [r3, #8]
 8119bb2:	887b      	ldrh	r3, [r7, #2]
 8119bb4:	1ad3      	subs	r3, r2, r3
 8119bb6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8119bb8:	7bbb      	ldrb	r3, [r7, #14]
 8119bba:	b29a      	uxth	r2, r3
 8119bbc:	89bb      	ldrh	r3, [r7, #12]
 8119bbe:	4413      	add	r3, r2
 8119bc0:	b29b      	uxth	r3, r3
 8119bc2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8119bc6:	4619      	mov	r1, r3
 8119bc8:	2036      	movs	r0, #54	@ 0x36
 8119bca:	f7fa fb99 	bl	8114300 <pbuf_alloc>
 8119bce:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8119bd0:	693b      	ldr	r3, [r7, #16]
 8119bd2:	2b00      	cmp	r3, #0
 8119bd4:	f000 80b7 	beq.w	8119d46 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8119bd8:	697b      	ldr	r3, [r7, #20]
 8119bda:	685b      	ldr	r3, [r3, #4]
 8119bdc:	891a      	ldrh	r2, [r3, #8]
 8119bde:	697b      	ldr	r3, [r7, #20]
 8119be0:	891b      	ldrh	r3, [r3, #8]
 8119be2:	1ad3      	subs	r3, r2, r3
 8119be4:	b29a      	uxth	r2, r3
 8119be6:	887b      	ldrh	r3, [r7, #2]
 8119be8:	4413      	add	r3, r2
 8119bea:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8119bec:	697b      	ldr	r3, [r7, #20]
 8119bee:	6858      	ldr	r0, [r3, #4]
 8119bf0:	693b      	ldr	r3, [r7, #16]
 8119bf2:	685a      	ldr	r2, [r3, #4]
 8119bf4:	7bbb      	ldrb	r3, [r7, #14]
 8119bf6:	18d1      	adds	r1, r2, r3
 8119bf8:	897b      	ldrh	r3, [r7, #10]
 8119bfa:	89ba      	ldrh	r2, [r7, #12]
 8119bfc:	f7fb f85a 	bl	8114cb4 <pbuf_copy_partial>
 8119c00:	4603      	mov	r3, r0
 8119c02:	461a      	mov	r2, r3
 8119c04:	89bb      	ldrh	r3, [r7, #12]
 8119c06:	4293      	cmp	r3, r2
 8119c08:	f040 809f 	bne.w	8119d4a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8119c0c:	697b      	ldr	r3, [r7, #20]
 8119c0e:	68db      	ldr	r3, [r3, #12]
 8119c10:	899b      	ldrh	r3, [r3, #12]
 8119c12:	b29b      	uxth	r3, r3
 8119c14:	4618      	mov	r0, r3
 8119c16:	f7f6 fed1 	bl	81109bc <lwip_htons>
 8119c1a:	4603      	mov	r3, r0
 8119c1c:	b2db      	uxtb	r3, r3
 8119c1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8119c22:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8119c24:	2300      	movs	r3, #0
 8119c26:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8119c28:	7efb      	ldrb	r3, [r7, #27]
 8119c2a:	f003 0308 	and.w	r3, r3, #8
 8119c2e:	2b00      	cmp	r3, #0
 8119c30:	d007      	beq.n	8119c42 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8119c32:	7efb      	ldrb	r3, [r7, #27]
 8119c34:	f023 0308 	bic.w	r3, r3, #8
 8119c38:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8119c3a:	7ebb      	ldrb	r3, [r7, #26]
 8119c3c:	f043 0308 	orr.w	r3, r3, #8
 8119c40:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8119c42:	7efb      	ldrb	r3, [r7, #27]
 8119c44:	f003 0301 	and.w	r3, r3, #1
 8119c48:	2b00      	cmp	r3, #0
 8119c4a:	d007      	beq.n	8119c5c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8119c4c:	7efb      	ldrb	r3, [r7, #27]
 8119c4e:	f023 0301 	bic.w	r3, r3, #1
 8119c52:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8119c54:	7ebb      	ldrb	r3, [r7, #26]
 8119c56:	f043 0301 	orr.w	r3, r3, #1
 8119c5a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8119c5c:	697b      	ldr	r3, [r7, #20]
 8119c5e:	68db      	ldr	r3, [r3, #12]
 8119c60:	685b      	ldr	r3, [r3, #4]
 8119c62:	4618      	mov	r0, r3
 8119c64:	f7f6 febf 	bl	81109e6 <lwip_htonl>
 8119c68:	4602      	mov	r2, r0
 8119c6a:	887b      	ldrh	r3, [r7, #2]
 8119c6c:	18d1      	adds	r1, r2, r3
 8119c6e:	7eba      	ldrb	r2, [r7, #26]
 8119c70:	7bfb      	ldrb	r3, [r7, #15]
 8119c72:	9300      	str	r3, [sp, #0]
 8119c74:	460b      	mov	r3, r1
 8119c76:	6939      	ldr	r1, [r7, #16]
 8119c78:	6878      	ldr	r0, [r7, #4]
 8119c7a:	f7ff fa51 	bl	8119120 <tcp_create_segment>
 8119c7e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8119c80:	69fb      	ldr	r3, [r7, #28]
 8119c82:	2b00      	cmp	r3, #0
 8119c84:	d063      	beq.n	8119d4e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8119c86:	697b      	ldr	r3, [r7, #20]
 8119c88:	685b      	ldr	r3, [r3, #4]
 8119c8a:	4618      	mov	r0, r3
 8119c8c:	f7fa feaa 	bl	81149e4 <pbuf_clen>
 8119c90:	4603      	mov	r3, r0
 8119c92:	461a      	mov	r2, r3
 8119c94:	687b      	ldr	r3, [r7, #4]
 8119c96:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8119c9a:	1a9b      	subs	r3, r3, r2
 8119c9c:	b29a      	uxth	r2, r3
 8119c9e:	687b      	ldr	r3, [r7, #4]
 8119ca0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8119ca4:	697b      	ldr	r3, [r7, #20]
 8119ca6:	6858      	ldr	r0, [r3, #4]
 8119ca8:	697b      	ldr	r3, [r7, #20]
 8119caa:	685b      	ldr	r3, [r3, #4]
 8119cac:	891a      	ldrh	r2, [r3, #8]
 8119cae:	89bb      	ldrh	r3, [r7, #12]
 8119cb0:	1ad3      	subs	r3, r2, r3
 8119cb2:	b29b      	uxth	r3, r3
 8119cb4:	4619      	mov	r1, r3
 8119cb6:	f7fa fc83 	bl	81145c0 <pbuf_realloc>
  useg->len -= remainder;
 8119cba:	697b      	ldr	r3, [r7, #20]
 8119cbc:	891a      	ldrh	r2, [r3, #8]
 8119cbe:	89bb      	ldrh	r3, [r7, #12]
 8119cc0:	1ad3      	subs	r3, r2, r3
 8119cc2:	b29a      	uxth	r2, r3
 8119cc4:	697b      	ldr	r3, [r7, #20]
 8119cc6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8119cc8:	697b      	ldr	r3, [r7, #20]
 8119cca:	68db      	ldr	r3, [r3, #12]
 8119ccc:	899b      	ldrh	r3, [r3, #12]
 8119cce:	b29c      	uxth	r4, r3
 8119cd0:	7efb      	ldrb	r3, [r7, #27]
 8119cd2:	b29b      	uxth	r3, r3
 8119cd4:	4618      	mov	r0, r3
 8119cd6:	f7f6 fe71 	bl	81109bc <lwip_htons>
 8119cda:	4603      	mov	r3, r0
 8119cdc:	461a      	mov	r2, r3
 8119cde:	697b      	ldr	r3, [r7, #20]
 8119ce0:	68db      	ldr	r3, [r3, #12]
 8119ce2:	4322      	orrs	r2, r4
 8119ce4:	b292      	uxth	r2, r2
 8119ce6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8119ce8:	697b      	ldr	r3, [r7, #20]
 8119cea:	685b      	ldr	r3, [r3, #4]
 8119cec:	4618      	mov	r0, r3
 8119cee:	f7fa fe79 	bl	81149e4 <pbuf_clen>
 8119cf2:	4603      	mov	r3, r0
 8119cf4:	461a      	mov	r2, r3
 8119cf6:	687b      	ldr	r3, [r7, #4]
 8119cf8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8119cfc:	4413      	add	r3, r2
 8119cfe:	b29a      	uxth	r2, r3
 8119d00:	687b      	ldr	r3, [r7, #4]
 8119d02:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8119d06:	69fb      	ldr	r3, [r7, #28]
 8119d08:	685b      	ldr	r3, [r3, #4]
 8119d0a:	4618      	mov	r0, r3
 8119d0c:	f7fa fe6a 	bl	81149e4 <pbuf_clen>
 8119d10:	4603      	mov	r3, r0
 8119d12:	461a      	mov	r2, r3
 8119d14:	687b      	ldr	r3, [r7, #4]
 8119d16:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8119d1a:	4413      	add	r3, r2
 8119d1c:	b29a      	uxth	r2, r3
 8119d1e:	687b      	ldr	r3, [r7, #4]
 8119d20:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8119d24:	697b      	ldr	r3, [r7, #20]
 8119d26:	681a      	ldr	r2, [r3, #0]
 8119d28:	69fb      	ldr	r3, [r7, #28]
 8119d2a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8119d2c:	697b      	ldr	r3, [r7, #20]
 8119d2e:	69fa      	ldr	r2, [r7, #28]
 8119d30:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8119d32:	69fb      	ldr	r3, [r7, #28]
 8119d34:	681b      	ldr	r3, [r3, #0]
 8119d36:	2b00      	cmp	r3, #0
 8119d38:	d103      	bne.n	8119d42 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8119d3a:	687b      	ldr	r3, [r7, #4]
 8119d3c:	2200      	movs	r2, #0
 8119d3e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8119d42:	2300      	movs	r3, #0
 8119d44:	e016      	b.n	8119d74 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8119d46:	bf00      	nop
 8119d48:	e002      	b.n	8119d50 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8119d4a:	bf00      	nop
 8119d4c:	e000      	b.n	8119d50 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8119d4e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8119d50:	69fb      	ldr	r3, [r7, #28]
 8119d52:	2b00      	cmp	r3, #0
 8119d54:	d006      	beq.n	8119d64 <tcp_split_unsent_seg+0x25c>
 8119d56:	4b09      	ldr	r3, [pc, #36]	@ (8119d7c <tcp_split_unsent_seg+0x274>)
 8119d58:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8119d5c:	490d      	ldr	r1, [pc, #52]	@ (8119d94 <tcp_split_unsent_seg+0x28c>)
 8119d5e:	4809      	ldr	r0, [pc, #36]	@ (8119d84 <tcp_split_unsent_seg+0x27c>)
 8119d60:	f002 f874 	bl	811be4c <iprintf>
  if (p != NULL) {
 8119d64:	693b      	ldr	r3, [r7, #16]
 8119d66:	2b00      	cmp	r3, #0
 8119d68:	d002      	beq.n	8119d70 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8119d6a:	6938      	ldr	r0, [r7, #16]
 8119d6c:	f7fa fdac 	bl	81148c8 <pbuf_free>
  }

  return ERR_MEM;
 8119d70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8119d74:	4618      	mov	r0, r3
 8119d76:	3724      	adds	r7, #36	@ 0x24
 8119d78:	46bd      	mov	sp, r7
 8119d7a:	bd90      	pop	{r4, r7, pc}
 8119d7c:	0811ed48 	.word	0x0811ed48
 8119d80:	0811f11c 	.word	0x0811f11c
 8119d84:	0811eddc 	.word	0x0811eddc
 8119d88:	0811f140 	.word	0x0811f140
 8119d8c:	0811f164 	.word	0x0811f164
 8119d90:	0811f174 	.word	0x0811f174
 8119d94:	0811f184 	.word	0x0811f184

08119d98 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8119d98:	b590      	push	{r4, r7, lr}
 8119d9a:	b085      	sub	sp, #20
 8119d9c:	af00      	add	r7, sp, #0
 8119d9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8119da0:	687b      	ldr	r3, [r7, #4]
 8119da2:	2b00      	cmp	r3, #0
 8119da4:	d106      	bne.n	8119db4 <tcp_send_fin+0x1c>
 8119da6:	4b21      	ldr	r3, [pc, #132]	@ (8119e2c <tcp_send_fin+0x94>)
 8119da8:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8119dac:	4920      	ldr	r1, [pc, #128]	@ (8119e30 <tcp_send_fin+0x98>)
 8119dae:	4821      	ldr	r0, [pc, #132]	@ (8119e34 <tcp_send_fin+0x9c>)
 8119db0:	f002 f84c 	bl	811be4c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8119db4:	687b      	ldr	r3, [r7, #4]
 8119db6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8119db8:	2b00      	cmp	r3, #0
 8119dba:	d02e      	beq.n	8119e1a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8119dbc:	687b      	ldr	r3, [r7, #4]
 8119dbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8119dc0:	60fb      	str	r3, [r7, #12]
 8119dc2:	e002      	b.n	8119dca <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8119dc4:	68fb      	ldr	r3, [r7, #12]
 8119dc6:	681b      	ldr	r3, [r3, #0]
 8119dc8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8119dca:	68fb      	ldr	r3, [r7, #12]
 8119dcc:	681b      	ldr	r3, [r3, #0]
 8119dce:	2b00      	cmp	r3, #0
 8119dd0:	d1f8      	bne.n	8119dc4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8119dd2:	68fb      	ldr	r3, [r7, #12]
 8119dd4:	68db      	ldr	r3, [r3, #12]
 8119dd6:	899b      	ldrh	r3, [r3, #12]
 8119dd8:	b29b      	uxth	r3, r3
 8119dda:	4618      	mov	r0, r3
 8119ddc:	f7f6 fdee 	bl	81109bc <lwip_htons>
 8119de0:	4603      	mov	r3, r0
 8119de2:	b2db      	uxtb	r3, r3
 8119de4:	f003 0307 	and.w	r3, r3, #7
 8119de8:	2b00      	cmp	r3, #0
 8119dea:	d116      	bne.n	8119e1a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8119dec:	68fb      	ldr	r3, [r7, #12]
 8119dee:	68db      	ldr	r3, [r3, #12]
 8119df0:	899b      	ldrh	r3, [r3, #12]
 8119df2:	b29c      	uxth	r4, r3
 8119df4:	2001      	movs	r0, #1
 8119df6:	f7f6 fde1 	bl	81109bc <lwip_htons>
 8119dfa:	4603      	mov	r3, r0
 8119dfc:	461a      	mov	r2, r3
 8119dfe:	68fb      	ldr	r3, [r7, #12]
 8119e00:	68db      	ldr	r3, [r3, #12]
 8119e02:	4322      	orrs	r2, r4
 8119e04:	b292      	uxth	r2, r2
 8119e06:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8119e08:	687b      	ldr	r3, [r7, #4]
 8119e0a:	8b5b      	ldrh	r3, [r3, #26]
 8119e0c:	f043 0320 	orr.w	r3, r3, #32
 8119e10:	b29a      	uxth	r2, r3
 8119e12:	687b      	ldr	r3, [r7, #4]
 8119e14:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8119e16:	2300      	movs	r3, #0
 8119e18:	e004      	b.n	8119e24 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8119e1a:	2101      	movs	r1, #1
 8119e1c:	6878      	ldr	r0, [r7, #4]
 8119e1e:	f000 f80b 	bl	8119e38 <tcp_enqueue_flags>
 8119e22:	4603      	mov	r3, r0
}
 8119e24:	4618      	mov	r0, r3
 8119e26:	3714      	adds	r7, #20
 8119e28:	46bd      	mov	sp, r7
 8119e2a:	bd90      	pop	{r4, r7, pc}
 8119e2c:	0811ed48 	.word	0x0811ed48
 8119e30:	0811f190 	.word	0x0811f190
 8119e34:	0811eddc 	.word	0x0811eddc

08119e38 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8119e38:	b580      	push	{r7, lr}
 8119e3a:	b08a      	sub	sp, #40	@ 0x28
 8119e3c:	af02      	add	r7, sp, #8
 8119e3e:	6078      	str	r0, [r7, #4]
 8119e40:	460b      	mov	r3, r1
 8119e42:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8119e44:	2300      	movs	r3, #0
 8119e46:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8119e48:	2300      	movs	r3, #0
 8119e4a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8119e4c:	78fb      	ldrb	r3, [r7, #3]
 8119e4e:	f003 0303 	and.w	r3, r3, #3
 8119e52:	2b00      	cmp	r3, #0
 8119e54:	d106      	bne.n	8119e64 <tcp_enqueue_flags+0x2c>
 8119e56:	4b67      	ldr	r3, [pc, #412]	@ (8119ff4 <tcp_enqueue_flags+0x1bc>)
 8119e58:	f240 4211 	movw	r2, #1041	@ 0x411
 8119e5c:	4966      	ldr	r1, [pc, #408]	@ (8119ff8 <tcp_enqueue_flags+0x1c0>)
 8119e5e:	4867      	ldr	r0, [pc, #412]	@ (8119ffc <tcp_enqueue_flags+0x1c4>)
 8119e60:	f001 fff4 	bl	811be4c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8119e64:	687b      	ldr	r3, [r7, #4]
 8119e66:	2b00      	cmp	r3, #0
 8119e68:	d106      	bne.n	8119e78 <tcp_enqueue_flags+0x40>
 8119e6a:	4b62      	ldr	r3, [pc, #392]	@ (8119ff4 <tcp_enqueue_flags+0x1bc>)
 8119e6c:	f240 4213 	movw	r2, #1043	@ 0x413
 8119e70:	4963      	ldr	r1, [pc, #396]	@ (811a000 <tcp_enqueue_flags+0x1c8>)
 8119e72:	4862      	ldr	r0, [pc, #392]	@ (8119ffc <tcp_enqueue_flags+0x1c4>)
 8119e74:	f001 ffea 	bl	811be4c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8119e78:	78fb      	ldrb	r3, [r7, #3]
 8119e7a:	f003 0302 	and.w	r3, r3, #2
 8119e7e:	2b00      	cmp	r3, #0
 8119e80:	d001      	beq.n	8119e86 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8119e82:	2301      	movs	r3, #1
 8119e84:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8119e86:	7ffb      	ldrb	r3, [r7, #31]
 8119e88:	009b      	lsls	r3, r3, #2
 8119e8a:	b2db      	uxtb	r3, r3
 8119e8c:	f003 0304 	and.w	r3, r3, #4
 8119e90:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8119e92:	7dfb      	ldrb	r3, [r7, #23]
 8119e94:	b29b      	uxth	r3, r3
 8119e96:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8119e9a:	4619      	mov	r1, r3
 8119e9c:	2036      	movs	r0, #54	@ 0x36
 8119e9e:	f7fa fa2f 	bl	8114300 <pbuf_alloc>
 8119ea2:	6138      	str	r0, [r7, #16]
 8119ea4:	693b      	ldr	r3, [r7, #16]
 8119ea6:	2b00      	cmp	r3, #0
 8119ea8:	d109      	bne.n	8119ebe <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8119eaa:	687b      	ldr	r3, [r7, #4]
 8119eac:	8b5b      	ldrh	r3, [r3, #26]
 8119eae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8119eb2:	b29a      	uxth	r2, r3
 8119eb4:	687b      	ldr	r3, [r7, #4]
 8119eb6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8119eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8119ebc:	e095      	b.n	8119fea <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8119ebe:	693b      	ldr	r3, [r7, #16]
 8119ec0:	895a      	ldrh	r2, [r3, #10]
 8119ec2:	7dfb      	ldrb	r3, [r7, #23]
 8119ec4:	b29b      	uxth	r3, r3
 8119ec6:	429a      	cmp	r2, r3
 8119ec8:	d206      	bcs.n	8119ed8 <tcp_enqueue_flags+0xa0>
 8119eca:	4b4a      	ldr	r3, [pc, #296]	@ (8119ff4 <tcp_enqueue_flags+0x1bc>)
 8119ecc:	f240 4239 	movw	r2, #1081	@ 0x439
 8119ed0:	494c      	ldr	r1, [pc, #304]	@ (811a004 <tcp_enqueue_flags+0x1cc>)
 8119ed2:	484a      	ldr	r0, [pc, #296]	@ (8119ffc <tcp_enqueue_flags+0x1c4>)
 8119ed4:	f001 ffba 	bl	811be4c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8119ed8:	687b      	ldr	r3, [r7, #4]
 8119eda:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8119edc:	78fa      	ldrb	r2, [r7, #3]
 8119ede:	7ffb      	ldrb	r3, [r7, #31]
 8119ee0:	9300      	str	r3, [sp, #0]
 8119ee2:	460b      	mov	r3, r1
 8119ee4:	6939      	ldr	r1, [r7, #16]
 8119ee6:	6878      	ldr	r0, [r7, #4]
 8119ee8:	f7ff f91a 	bl	8119120 <tcp_create_segment>
 8119eec:	60f8      	str	r0, [r7, #12]
 8119eee:	68fb      	ldr	r3, [r7, #12]
 8119ef0:	2b00      	cmp	r3, #0
 8119ef2:	d109      	bne.n	8119f08 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8119ef4:	687b      	ldr	r3, [r7, #4]
 8119ef6:	8b5b      	ldrh	r3, [r3, #26]
 8119ef8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8119efc:	b29a      	uxth	r2, r3
 8119efe:	687b      	ldr	r3, [r7, #4]
 8119f00:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8119f02:	f04f 33ff 	mov.w	r3, #4294967295
 8119f06:	e070      	b.n	8119fea <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8119f08:	68fb      	ldr	r3, [r7, #12]
 8119f0a:	68db      	ldr	r3, [r3, #12]
 8119f0c:	f003 0303 	and.w	r3, r3, #3
 8119f10:	2b00      	cmp	r3, #0
 8119f12:	d006      	beq.n	8119f22 <tcp_enqueue_flags+0xea>
 8119f14:	4b37      	ldr	r3, [pc, #220]	@ (8119ff4 <tcp_enqueue_flags+0x1bc>)
 8119f16:	f240 4242 	movw	r2, #1090	@ 0x442
 8119f1a:	493b      	ldr	r1, [pc, #236]	@ (811a008 <tcp_enqueue_flags+0x1d0>)
 8119f1c:	4837      	ldr	r0, [pc, #220]	@ (8119ffc <tcp_enqueue_flags+0x1c4>)
 8119f1e:	f001 ff95 	bl	811be4c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8119f22:	68fb      	ldr	r3, [r7, #12]
 8119f24:	891b      	ldrh	r3, [r3, #8]
 8119f26:	2b00      	cmp	r3, #0
 8119f28:	d006      	beq.n	8119f38 <tcp_enqueue_flags+0x100>
 8119f2a:	4b32      	ldr	r3, [pc, #200]	@ (8119ff4 <tcp_enqueue_flags+0x1bc>)
 8119f2c:	f240 4243 	movw	r2, #1091	@ 0x443
 8119f30:	4936      	ldr	r1, [pc, #216]	@ (811a00c <tcp_enqueue_flags+0x1d4>)
 8119f32:	4832      	ldr	r0, [pc, #200]	@ (8119ffc <tcp_enqueue_flags+0x1c4>)
 8119f34:	f001 ff8a 	bl	811be4c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8119f38:	687b      	ldr	r3, [r7, #4]
 8119f3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8119f3c:	2b00      	cmp	r3, #0
 8119f3e:	d103      	bne.n	8119f48 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8119f40:	687b      	ldr	r3, [r7, #4]
 8119f42:	68fa      	ldr	r2, [r7, #12]
 8119f44:	66da      	str	r2, [r3, #108]	@ 0x6c
 8119f46:	e00d      	b.n	8119f64 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8119f48:	687b      	ldr	r3, [r7, #4]
 8119f4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8119f4c:	61bb      	str	r3, [r7, #24]
 8119f4e:	e002      	b.n	8119f56 <tcp_enqueue_flags+0x11e>
 8119f50:	69bb      	ldr	r3, [r7, #24]
 8119f52:	681b      	ldr	r3, [r3, #0]
 8119f54:	61bb      	str	r3, [r7, #24]
 8119f56:	69bb      	ldr	r3, [r7, #24]
 8119f58:	681b      	ldr	r3, [r3, #0]
 8119f5a:	2b00      	cmp	r3, #0
 8119f5c:	d1f8      	bne.n	8119f50 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8119f5e:	69bb      	ldr	r3, [r7, #24]
 8119f60:	68fa      	ldr	r2, [r7, #12]
 8119f62:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8119f64:	687b      	ldr	r3, [r7, #4]
 8119f66:	2200      	movs	r2, #0
 8119f68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8119f6c:	78fb      	ldrb	r3, [r7, #3]
 8119f6e:	f003 0302 	and.w	r3, r3, #2
 8119f72:	2b00      	cmp	r3, #0
 8119f74:	d104      	bne.n	8119f80 <tcp_enqueue_flags+0x148>
 8119f76:	78fb      	ldrb	r3, [r7, #3]
 8119f78:	f003 0301 	and.w	r3, r3, #1
 8119f7c:	2b00      	cmp	r3, #0
 8119f7e:	d004      	beq.n	8119f8a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8119f80:	687b      	ldr	r3, [r7, #4]
 8119f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8119f84:	1c5a      	adds	r2, r3, #1
 8119f86:	687b      	ldr	r3, [r7, #4]
 8119f88:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8119f8a:	78fb      	ldrb	r3, [r7, #3]
 8119f8c:	f003 0301 	and.w	r3, r3, #1
 8119f90:	2b00      	cmp	r3, #0
 8119f92:	d006      	beq.n	8119fa2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8119f94:	687b      	ldr	r3, [r7, #4]
 8119f96:	8b5b      	ldrh	r3, [r3, #26]
 8119f98:	f043 0320 	orr.w	r3, r3, #32
 8119f9c:	b29a      	uxth	r2, r3
 8119f9e:	687b      	ldr	r3, [r7, #4]
 8119fa0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8119fa2:	68fb      	ldr	r3, [r7, #12]
 8119fa4:	685b      	ldr	r3, [r3, #4]
 8119fa6:	4618      	mov	r0, r3
 8119fa8:	f7fa fd1c 	bl	81149e4 <pbuf_clen>
 8119fac:	4603      	mov	r3, r0
 8119fae:	461a      	mov	r2, r3
 8119fb0:	687b      	ldr	r3, [r7, #4]
 8119fb2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8119fb6:	4413      	add	r3, r2
 8119fb8:	b29a      	uxth	r2, r3
 8119fba:	687b      	ldr	r3, [r7, #4]
 8119fbc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8119fc0:	687b      	ldr	r3, [r7, #4]
 8119fc2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8119fc6:	2b00      	cmp	r3, #0
 8119fc8:	d00e      	beq.n	8119fe8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8119fca:	687b      	ldr	r3, [r7, #4]
 8119fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8119fce:	2b00      	cmp	r3, #0
 8119fd0:	d10a      	bne.n	8119fe8 <tcp_enqueue_flags+0x1b0>
 8119fd2:	687b      	ldr	r3, [r7, #4]
 8119fd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8119fd6:	2b00      	cmp	r3, #0
 8119fd8:	d106      	bne.n	8119fe8 <tcp_enqueue_flags+0x1b0>
 8119fda:	4b06      	ldr	r3, [pc, #24]	@ (8119ff4 <tcp_enqueue_flags+0x1bc>)
 8119fdc:	f240 4265 	movw	r2, #1125	@ 0x465
 8119fe0:	490b      	ldr	r1, [pc, #44]	@ (811a010 <tcp_enqueue_flags+0x1d8>)
 8119fe2:	4806      	ldr	r0, [pc, #24]	@ (8119ffc <tcp_enqueue_flags+0x1c4>)
 8119fe4:	f001 ff32 	bl	811be4c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8119fe8:	2300      	movs	r3, #0
}
 8119fea:	4618      	mov	r0, r3
 8119fec:	3720      	adds	r7, #32
 8119fee:	46bd      	mov	sp, r7
 8119ff0:	bd80      	pop	{r7, pc}
 8119ff2:	bf00      	nop
 8119ff4:	0811ed48 	.word	0x0811ed48
 8119ff8:	0811f1ac 	.word	0x0811f1ac
 8119ffc:	0811eddc 	.word	0x0811eddc
 811a000:	0811f204 	.word	0x0811f204
 811a004:	0811f224 	.word	0x0811f224
 811a008:	0811f260 	.word	0x0811f260
 811a00c:	0811f278 	.word	0x0811f278
 811a010:	0811f2a4 	.word	0x0811f2a4

0811a014 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 811a014:	b5b0      	push	{r4, r5, r7, lr}
 811a016:	b08a      	sub	sp, #40	@ 0x28
 811a018:	af00      	add	r7, sp, #0
 811a01a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 811a01c:	687b      	ldr	r3, [r7, #4]
 811a01e:	2b00      	cmp	r3, #0
 811a020:	d106      	bne.n	811a030 <tcp_output+0x1c>
 811a022:	4b8a      	ldr	r3, [pc, #552]	@ (811a24c <tcp_output+0x238>)
 811a024:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 811a028:	4989      	ldr	r1, [pc, #548]	@ (811a250 <tcp_output+0x23c>)
 811a02a:	488a      	ldr	r0, [pc, #552]	@ (811a254 <tcp_output+0x240>)
 811a02c:	f001 ff0e 	bl	811be4c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 811a030:	687b      	ldr	r3, [r7, #4]
 811a032:	7d1b      	ldrb	r3, [r3, #20]
 811a034:	2b01      	cmp	r3, #1
 811a036:	d106      	bne.n	811a046 <tcp_output+0x32>
 811a038:	4b84      	ldr	r3, [pc, #528]	@ (811a24c <tcp_output+0x238>)
 811a03a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 811a03e:	4986      	ldr	r1, [pc, #536]	@ (811a258 <tcp_output+0x244>)
 811a040:	4884      	ldr	r0, [pc, #528]	@ (811a254 <tcp_output+0x240>)
 811a042:	f001 ff03 	bl	811be4c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 811a046:	4b85      	ldr	r3, [pc, #532]	@ (811a25c <tcp_output+0x248>)
 811a048:	681b      	ldr	r3, [r3, #0]
 811a04a:	687a      	ldr	r2, [r7, #4]
 811a04c:	429a      	cmp	r2, r3
 811a04e:	d101      	bne.n	811a054 <tcp_output+0x40>
    return ERR_OK;
 811a050:	2300      	movs	r3, #0
 811a052:	e1ce      	b.n	811a3f2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 811a054:	687b      	ldr	r3, [r7, #4]
 811a056:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 811a05a:	687b      	ldr	r3, [r7, #4]
 811a05c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811a060:	4293      	cmp	r3, r2
 811a062:	bf28      	it	cs
 811a064:	4613      	movcs	r3, r2
 811a066:	b29b      	uxth	r3, r3
 811a068:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 811a06a:	687b      	ldr	r3, [r7, #4]
 811a06c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811a06e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 811a070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a072:	2b00      	cmp	r3, #0
 811a074:	d10b      	bne.n	811a08e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 811a076:	687b      	ldr	r3, [r7, #4]
 811a078:	8b5b      	ldrh	r3, [r3, #26]
 811a07a:	f003 0302 	and.w	r3, r3, #2
 811a07e:	2b00      	cmp	r3, #0
 811a080:	f000 81aa 	beq.w	811a3d8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 811a084:	6878      	ldr	r0, [r7, #4]
 811a086:	f000 fdcb 	bl	811ac20 <tcp_send_empty_ack>
 811a08a:	4603      	mov	r3, r0
 811a08c:	e1b1      	b.n	811a3f2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 811a08e:	6879      	ldr	r1, [r7, #4]
 811a090:	687b      	ldr	r3, [r7, #4]
 811a092:	3304      	adds	r3, #4
 811a094:	461a      	mov	r2, r3
 811a096:	6878      	ldr	r0, [r7, #4]
 811a098:	f7ff f826 	bl	81190e8 <tcp_route>
 811a09c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 811a09e:	697b      	ldr	r3, [r7, #20]
 811a0a0:	2b00      	cmp	r3, #0
 811a0a2:	d102      	bne.n	811a0aa <tcp_output+0x96>
    return ERR_RTE;
 811a0a4:	f06f 0303 	mvn.w	r3, #3
 811a0a8:	e1a3      	b.n	811a3f2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 811a0aa:	687b      	ldr	r3, [r7, #4]
 811a0ac:	2b00      	cmp	r3, #0
 811a0ae:	d003      	beq.n	811a0b8 <tcp_output+0xa4>
 811a0b0:	687b      	ldr	r3, [r7, #4]
 811a0b2:	681b      	ldr	r3, [r3, #0]
 811a0b4:	2b00      	cmp	r3, #0
 811a0b6:	d111      	bne.n	811a0dc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 811a0b8:	697b      	ldr	r3, [r7, #20]
 811a0ba:	2b00      	cmp	r3, #0
 811a0bc:	d002      	beq.n	811a0c4 <tcp_output+0xb0>
 811a0be:	697b      	ldr	r3, [r7, #20]
 811a0c0:	3304      	adds	r3, #4
 811a0c2:	e000      	b.n	811a0c6 <tcp_output+0xb2>
 811a0c4:	2300      	movs	r3, #0
 811a0c6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 811a0c8:	693b      	ldr	r3, [r7, #16]
 811a0ca:	2b00      	cmp	r3, #0
 811a0cc:	d102      	bne.n	811a0d4 <tcp_output+0xc0>
      return ERR_RTE;
 811a0ce:	f06f 0303 	mvn.w	r3, #3
 811a0d2:	e18e      	b.n	811a3f2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 811a0d4:	693b      	ldr	r3, [r7, #16]
 811a0d6:	681a      	ldr	r2, [r3, #0]
 811a0d8:	687b      	ldr	r3, [r7, #4]
 811a0da:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 811a0dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a0de:	68db      	ldr	r3, [r3, #12]
 811a0e0:	685b      	ldr	r3, [r3, #4]
 811a0e2:	4618      	mov	r0, r3
 811a0e4:	f7f6 fc7f 	bl	81109e6 <lwip_htonl>
 811a0e8:	4602      	mov	r2, r0
 811a0ea:	687b      	ldr	r3, [r7, #4]
 811a0ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811a0ee:	1ad3      	subs	r3, r2, r3
 811a0f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811a0f2:	8912      	ldrh	r2, [r2, #8]
 811a0f4:	4413      	add	r3, r2
 811a0f6:	69ba      	ldr	r2, [r7, #24]
 811a0f8:	429a      	cmp	r2, r3
 811a0fa:	d227      	bcs.n	811a14c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 811a0fc:	687b      	ldr	r3, [r7, #4]
 811a0fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 811a102:	461a      	mov	r2, r3
 811a104:	69bb      	ldr	r3, [r7, #24]
 811a106:	4293      	cmp	r3, r2
 811a108:	d114      	bne.n	811a134 <tcp_output+0x120>
 811a10a:	687b      	ldr	r3, [r7, #4]
 811a10c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811a10e:	2b00      	cmp	r3, #0
 811a110:	d110      	bne.n	811a134 <tcp_output+0x120>
 811a112:	687b      	ldr	r3, [r7, #4]
 811a114:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 811a118:	2b00      	cmp	r3, #0
 811a11a:	d10b      	bne.n	811a134 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 811a11c:	687b      	ldr	r3, [r7, #4]
 811a11e:	2200      	movs	r2, #0
 811a120:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 811a124:	687b      	ldr	r3, [r7, #4]
 811a126:	2201      	movs	r2, #1
 811a128:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 811a12c:	687b      	ldr	r3, [r7, #4]
 811a12e:	2200      	movs	r2, #0
 811a130:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 811a134:	687b      	ldr	r3, [r7, #4]
 811a136:	8b5b      	ldrh	r3, [r3, #26]
 811a138:	f003 0302 	and.w	r3, r3, #2
 811a13c:	2b00      	cmp	r3, #0
 811a13e:	f000 814d 	beq.w	811a3dc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 811a142:	6878      	ldr	r0, [r7, #4]
 811a144:	f000 fd6c 	bl	811ac20 <tcp_send_empty_ack>
 811a148:	4603      	mov	r3, r0
 811a14a:	e152      	b.n	811a3f2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 811a14c:	687b      	ldr	r3, [r7, #4]
 811a14e:	2200      	movs	r2, #0
 811a150:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 811a154:	687b      	ldr	r3, [r7, #4]
 811a156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811a158:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 811a15a:	6a3b      	ldr	r3, [r7, #32]
 811a15c:	2b00      	cmp	r3, #0
 811a15e:	f000 811c 	beq.w	811a39a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 811a162:	e002      	b.n	811a16a <tcp_output+0x156>
 811a164:	6a3b      	ldr	r3, [r7, #32]
 811a166:	681b      	ldr	r3, [r3, #0]
 811a168:	623b      	str	r3, [r7, #32]
 811a16a:	6a3b      	ldr	r3, [r7, #32]
 811a16c:	681b      	ldr	r3, [r3, #0]
 811a16e:	2b00      	cmp	r3, #0
 811a170:	d1f8      	bne.n	811a164 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 811a172:	e112      	b.n	811a39a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 811a174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a176:	68db      	ldr	r3, [r3, #12]
 811a178:	899b      	ldrh	r3, [r3, #12]
 811a17a:	b29b      	uxth	r3, r3
 811a17c:	4618      	mov	r0, r3
 811a17e:	f7f6 fc1d 	bl	81109bc <lwip_htons>
 811a182:	4603      	mov	r3, r0
 811a184:	b2db      	uxtb	r3, r3
 811a186:	f003 0304 	and.w	r3, r3, #4
 811a18a:	2b00      	cmp	r3, #0
 811a18c:	d006      	beq.n	811a19c <tcp_output+0x188>
 811a18e:	4b2f      	ldr	r3, [pc, #188]	@ (811a24c <tcp_output+0x238>)
 811a190:	f240 5236 	movw	r2, #1334	@ 0x536
 811a194:	4932      	ldr	r1, [pc, #200]	@ (811a260 <tcp_output+0x24c>)
 811a196:	482f      	ldr	r0, [pc, #188]	@ (811a254 <tcp_output+0x240>)
 811a198:	f001 fe58 	bl	811be4c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 811a19c:	687b      	ldr	r3, [r7, #4]
 811a19e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811a1a0:	2b00      	cmp	r3, #0
 811a1a2:	d01f      	beq.n	811a1e4 <tcp_output+0x1d0>
 811a1a4:	687b      	ldr	r3, [r7, #4]
 811a1a6:	8b5b      	ldrh	r3, [r3, #26]
 811a1a8:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 811a1ac:	2b00      	cmp	r3, #0
 811a1ae:	d119      	bne.n	811a1e4 <tcp_output+0x1d0>
 811a1b0:	687b      	ldr	r3, [r7, #4]
 811a1b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811a1b4:	2b00      	cmp	r3, #0
 811a1b6:	d00b      	beq.n	811a1d0 <tcp_output+0x1bc>
 811a1b8:	687b      	ldr	r3, [r7, #4]
 811a1ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811a1bc:	681b      	ldr	r3, [r3, #0]
 811a1be:	2b00      	cmp	r3, #0
 811a1c0:	d110      	bne.n	811a1e4 <tcp_output+0x1d0>
 811a1c2:	687b      	ldr	r3, [r7, #4]
 811a1c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811a1c6:	891a      	ldrh	r2, [r3, #8]
 811a1c8:	687b      	ldr	r3, [r7, #4]
 811a1ca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811a1cc:	429a      	cmp	r2, r3
 811a1ce:	d209      	bcs.n	811a1e4 <tcp_output+0x1d0>
 811a1d0:	687b      	ldr	r3, [r7, #4]
 811a1d2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 811a1d6:	2b00      	cmp	r3, #0
 811a1d8:	d004      	beq.n	811a1e4 <tcp_output+0x1d0>
 811a1da:	687b      	ldr	r3, [r7, #4]
 811a1dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 811a1e0:	2b0f      	cmp	r3, #15
 811a1e2:	d901      	bls.n	811a1e8 <tcp_output+0x1d4>
 811a1e4:	2301      	movs	r3, #1
 811a1e6:	e000      	b.n	811a1ea <tcp_output+0x1d6>
 811a1e8:	2300      	movs	r3, #0
 811a1ea:	2b00      	cmp	r3, #0
 811a1ec:	d106      	bne.n	811a1fc <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 811a1ee:	687b      	ldr	r3, [r7, #4]
 811a1f0:	8b5b      	ldrh	r3, [r3, #26]
 811a1f2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 811a1f6:	2b00      	cmp	r3, #0
 811a1f8:	f000 80e4 	beq.w	811a3c4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 811a1fc:	687b      	ldr	r3, [r7, #4]
 811a1fe:	7d1b      	ldrb	r3, [r3, #20]
 811a200:	2b02      	cmp	r3, #2
 811a202:	d00d      	beq.n	811a220 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 811a204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a206:	68db      	ldr	r3, [r3, #12]
 811a208:	899b      	ldrh	r3, [r3, #12]
 811a20a:	b29c      	uxth	r4, r3
 811a20c:	2010      	movs	r0, #16
 811a20e:	f7f6 fbd5 	bl	81109bc <lwip_htons>
 811a212:	4603      	mov	r3, r0
 811a214:	461a      	mov	r2, r3
 811a216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a218:	68db      	ldr	r3, [r3, #12]
 811a21a:	4322      	orrs	r2, r4
 811a21c:	b292      	uxth	r2, r2
 811a21e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 811a220:	697a      	ldr	r2, [r7, #20]
 811a222:	6879      	ldr	r1, [r7, #4]
 811a224:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811a226:	f000 f909 	bl	811a43c <tcp_output_segment>
 811a22a:	4603      	mov	r3, r0
 811a22c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 811a22e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811a232:	2b00      	cmp	r3, #0
 811a234:	d016      	beq.n	811a264 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 811a236:	687b      	ldr	r3, [r7, #4]
 811a238:	8b5b      	ldrh	r3, [r3, #26]
 811a23a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 811a23e:	b29a      	uxth	r2, r3
 811a240:	687b      	ldr	r3, [r7, #4]
 811a242:	835a      	strh	r2, [r3, #26]
      return err;
 811a244:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811a248:	e0d3      	b.n	811a3f2 <tcp_output+0x3de>
 811a24a:	bf00      	nop
 811a24c:	0811ed48 	.word	0x0811ed48
 811a250:	0811f2cc 	.word	0x0811f2cc
 811a254:	0811eddc 	.word	0x0811eddc
 811a258:	0811f2e4 	.word	0x0811f2e4
 811a25c:	10011d60 	.word	0x10011d60
 811a260:	0811f30c 	.word	0x0811f30c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 811a264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a266:	681a      	ldr	r2, [r3, #0]
 811a268:	687b      	ldr	r3, [r7, #4]
 811a26a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 811a26c:	687b      	ldr	r3, [r7, #4]
 811a26e:	7d1b      	ldrb	r3, [r3, #20]
 811a270:	2b02      	cmp	r3, #2
 811a272:	d006      	beq.n	811a282 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 811a274:	687b      	ldr	r3, [r7, #4]
 811a276:	8b5b      	ldrh	r3, [r3, #26]
 811a278:	f023 0303 	bic.w	r3, r3, #3
 811a27c:	b29a      	uxth	r2, r3
 811a27e:	687b      	ldr	r3, [r7, #4]
 811a280:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 811a282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a284:	68db      	ldr	r3, [r3, #12]
 811a286:	685b      	ldr	r3, [r3, #4]
 811a288:	4618      	mov	r0, r3
 811a28a:	f7f6 fbac 	bl	81109e6 <lwip_htonl>
 811a28e:	4604      	mov	r4, r0
 811a290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a292:	891b      	ldrh	r3, [r3, #8]
 811a294:	461d      	mov	r5, r3
 811a296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a298:	68db      	ldr	r3, [r3, #12]
 811a29a:	899b      	ldrh	r3, [r3, #12]
 811a29c:	b29b      	uxth	r3, r3
 811a29e:	4618      	mov	r0, r3
 811a2a0:	f7f6 fb8c 	bl	81109bc <lwip_htons>
 811a2a4:	4603      	mov	r3, r0
 811a2a6:	b2db      	uxtb	r3, r3
 811a2a8:	f003 0303 	and.w	r3, r3, #3
 811a2ac:	2b00      	cmp	r3, #0
 811a2ae:	d001      	beq.n	811a2b4 <tcp_output+0x2a0>
 811a2b0:	2301      	movs	r3, #1
 811a2b2:	e000      	b.n	811a2b6 <tcp_output+0x2a2>
 811a2b4:	2300      	movs	r3, #0
 811a2b6:	442b      	add	r3, r5
 811a2b8:	4423      	add	r3, r4
 811a2ba:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 811a2bc:	687b      	ldr	r3, [r7, #4]
 811a2be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 811a2c0:	68bb      	ldr	r3, [r7, #8]
 811a2c2:	1ad3      	subs	r3, r2, r3
 811a2c4:	2b00      	cmp	r3, #0
 811a2c6:	da02      	bge.n	811a2ce <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 811a2c8:	687b      	ldr	r3, [r7, #4]
 811a2ca:	68ba      	ldr	r2, [r7, #8]
 811a2cc:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 811a2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a2d0:	891b      	ldrh	r3, [r3, #8]
 811a2d2:	461c      	mov	r4, r3
 811a2d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a2d6:	68db      	ldr	r3, [r3, #12]
 811a2d8:	899b      	ldrh	r3, [r3, #12]
 811a2da:	b29b      	uxth	r3, r3
 811a2dc:	4618      	mov	r0, r3
 811a2de:	f7f6 fb6d 	bl	81109bc <lwip_htons>
 811a2e2:	4603      	mov	r3, r0
 811a2e4:	b2db      	uxtb	r3, r3
 811a2e6:	f003 0303 	and.w	r3, r3, #3
 811a2ea:	2b00      	cmp	r3, #0
 811a2ec:	d001      	beq.n	811a2f2 <tcp_output+0x2de>
 811a2ee:	2301      	movs	r3, #1
 811a2f0:	e000      	b.n	811a2f4 <tcp_output+0x2e0>
 811a2f2:	2300      	movs	r3, #0
 811a2f4:	4423      	add	r3, r4
 811a2f6:	2b00      	cmp	r3, #0
 811a2f8:	d049      	beq.n	811a38e <tcp_output+0x37a>
      seg->next = NULL;
 811a2fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a2fc:	2200      	movs	r2, #0
 811a2fe:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 811a300:	687b      	ldr	r3, [r7, #4]
 811a302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811a304:	2b00      	cmp	r3, #0
 811a306:	d105      	bne.n	811a314 <tcp_output+0x300>
        pcb->unacked = seg;
 811a308:	687b      	ldr	r3, [r7, #4]
 811a30a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811a30c:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 811a30e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a310:	623b      	str	r3, [r7, #32]
 811a312:	e03f      	b.n	811a394 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 811a314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a316:	68db      	ldr	r3, [r3, #12]
 811a318:	685b      	ldr	r3, [r3, #4]
 811a31a:	4618      	mov	r0, r3
 811a31c:	f7f6 fb63 	bl	81109e6 <lwip_htonl>
 811a320:	4604      	mov	r4, r0
 811a322:	6a3b      	ldr	r3, [r7, #32]
 811a324:	68db      	ldr	r3, [r3, #12]
 811a326:	685b      	ldr	r3, [r3, #4]
 811a328:	4618      	mov	r0, r3
 811a32a:	f7f6 fb5c 	bl	81109e6 <lwip_htonl>
 811a32e:	4603      	mov	r3, r0
 811a330:	1ae3      	subs	r3, r4, r3
 811a332:	2b00      	cmp	r3, #0
 811a334:	da24      	bge.n	811a380 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 811a336:	687b      	ldr	r3, [r7, #4]
 811a338:	3370      	adds	r3, #112	@ 0x70
 811a33a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 811a33c:	e002      	b.n	811a344 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 811a33e:	69fb      	ldr	r3, [r7, #28]
 811a340:	681b      	ldr	r3, [r3, #0]
 811a342:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 811a344:	69fb      	ldr	r3, [r7, #28]
 811a346:	681b      	ldr	r3, [r3, #0]
 811a348:	2b00      	cmp	r3, #0
 811a34a:	d011      	beq.n	811a370 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 811a34c:	69fb      	ldr	r3, [r7, #28]
 811a34e:	681b      	ldr	r3, [r3, #0]
 811a350:	68db      	ldr	r3, [r3, #12]
 811a352:	685b      	ldr	r3, [r3, #4]
 811a354:	4618      	mov	r0, r3
 811a356:	f7f6 fb46 	bl	81109e6 <lwip_htonl>
 811a35a:	4604      	mov	r4, r0
 811a35c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a35e:	68db      	ldr	r3, [r3, #12]
 811a360:	685b      	ldr	r3, [r3, #4]
 811a362:	4618      	mov	r0, r3
 811a364:	f7f6 fb3f 	bl	81109e6 <lwip_htonl>
 811a368:	4603      	mov	r3, r0
 811a36a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 811a36c:	2b00      	cmp	r3, #0
 811a36e:	dbe6      	blt.n	811a33e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 811a370:	69fb      	ldr	r3, [r7, #28]
 811a372:	681a      	ldr	r2, [r3, #0]
 811a374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a376:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 811a378:	69fb      	ldr	r3, [r7, #28]
 811a37a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811a37c:	601a      	str	r2, [r3, #0]
 811a37e:	e009      	b.n	811a394 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 811a380:	6a3b      	ldr	r3, [r7, #32]
 811a382:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811a384:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 811a386:	6a3b      	ldr	r3, [r7, #32]
 811a388:	681b      	ldr	r3, [r3, #0]
 811a38a:	623b      	str	r3, [r7, #32]
 811a38c:	e002      	b.n	811a394 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 811a38e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811a390:	f7fb ff6f 	bl	8116272 <tcp_seg_free>
    }
    seg = pcb->unsent;
 811a394:	687b      	ldr	r3, [r7, #4]
 811a396:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811a398:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 811a39a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a39c:	2b00      	cmp	r3, #0
 811a39e:	d012      	beq.n	811a3c6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 811a3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811a3a2:	68db      	ldr	r3, [r3, #12]
 811a3a4:	685b      	ldr	r3, [r3, #4]
 811a3a6:	4618      	mov	r0, r3
 811a3a8:	f7f6 fb1d 	bl	81109e6 <lwip_htonl>
 811a3ac:	4602      	mov	r2, r0
 811a3ae:	687b      	ldr	r3, [r7, #4]
 811a3b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 811a3b2:	1ad3      	subs	r3, r2, r3
 811a3b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 811a3b6:	8912      	ldrh	r2, [r2, #8]
 811a3b8:	4413      	add	r3, r2
  while (seg != NULL &&
 811a3ba:	69ba      	ldr	r2, [r7, #24]
 811a3bc:	429a      	cmp	r2, r3
 811a3be:	f4bf aed9 	bcs.w	811a174 <tcp_output+0x160>
 811a3c2:	e000      	b.n	811a3c6 <tcp_output+0x3b2>
      break;
 811a3c4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 811a3c6:	687b      	ldr	r3, [r7, #4]
 811a3c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811a3ca:	2b00      	cmp	r3, #0
 811a3cc:	d108      	bne.n	811a3e0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 811a3ce:	687b      	ldr	r3, [r7, #4]
 811a3d0:	2200      	movs	r2, #0
 811a3d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 811a3d6:	e004      	b.n	811a3e2 <tcp_output+0x3ce>
    goto output_done;
 811a3d8:	bf00      	nop
 811a3da:	e002      	b.n	811a3e2 <tcp_output+0x3ce>
    goto output_done;
 811a3dc:	bf00      	nop
 811a3de:	e000      	b.n	811a3e2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 811a3e0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 811a3e2:	687b      	ldr	r3, [r7, #4]
 811a3e4:	8b5b      	ldrh	r3, [r3, #26]
 811a3e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 811a3ea:	b29a      	uxth	r2, r3
 811a3ec:	687b      	ldr	r3, [r7, #4]
 811a3ee:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 811a3f0:	2300      	movs	r3, #0
}
 811a3f2:	4618      	mov	r0, r3
 811a3f4:	3728      	adds	r7, #40	@ 0x28
 811a3f6:	46bd      	mov	sp, r7
 811a3f8:	bdb0      	pop	{r4, r5, r7, pc}
 811a3fa:	bf00      	nop

0811a3fc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 811a3fc:	b580      	push	{r7, lr}
 811a3fe:	b082      	sub	sp, #8
 811a400:	af00      	add	r7, sp, #0
 811a402:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 811a404:	687b      	ldr	r3, [r7, #4]
 811a406:	2b00      	cmp	r3, #0
 811a408:	d106      	bne.n	811a418 <tcp_output_segment_busy+0x1c>
 811a40a:	4b09      	ldr	r3, [pc, #36]	@ (811a430 <tcp_output_segment_busy+0x34>)
 811a40c:	f240 529a 	movw	r2, #1434	@ 0x59a
 811a410:	4908      	ldr	r1, [pc, #32]	@ (811a434 <tcp_output_segment_busy+0x38>)
 811a412:	4809      	ldr	r0, [pc, #36]	@ (811a438 <tcp_output_segment_busy+0x3c>)
 811a414:	f001 fd1a 	bl	811be4c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 811a418:	687b      	ldr	r3, [r7, #4]
 811a41a:	685b      	ldr	r3, [r3, #4]
 811a41c:	7b9b      	ldrb	r3, [r3, #14]
 811a41e:	2b01      	cmp	r3, #1
 811a420:	d001      	beq.n	811a426 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 811a422:	2301      	movs	r3, #1
 811a424:	e000      	b.n	811a428 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 811a426:	2300      	movs	r3, #0
}
 811a428:	4618      	mov	r0, r3
 811a42a:	3708      	adds	r7, #8
 811a42c:	46bd      	mov	sp, r7
 811a42e:	bd80      	pop	{r7, pc}
 811a430:	0811ed48 	.word	0x0811ed48
 811a434:	0811f324 	.word	0x0811f324
 811a438:	0811eddc 	.word	0x0811eddc

0811a43c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 811a43c:	b5b0      	push	{r4, r5, r7, lr}
 811a43e:	b08c      	sub	sp, #48	@ 0x30
 811a440:	af04      	add	r7, sp, #16
 811a442:	60f8      	str	r0, [r7, #12]
 811a444:	60b9      	str	r1, [r7, #8]
 811a446:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 811a448:	68fb      	ldr	r3, [r7, #12]
 811a44a:	2b00      	cmp	r3, #0
 811a44c:	d106      	bne.n	811a45c <tcp_output_segment+0x20>
 811a44e:	4b64      	ldr	r3, [pc, #400]	@ (811a5e0 <tcp_output_segment+0x1a4>)
 811a450:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 811a454:	4963      	ldr	r1, [pc, #396]	@ (811a5e4 <tcp_output_segment+0x1a8>)
 811a456:	4864      	ldr	r0, [pc, #400]	@ (811a5e8 <tcp_output_segment+0x1ac>)
 811a458:	f001 fcf8 	bl	811be4c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 811a45c:	68bb      	ldr	r3, [r7, #8]
 811a45e:	2b00      	cmp	r3, #0
 811a460:	d106      	bne.n	811a470 <tcp_output_segment+0x34>
 811a462:	4b5f      	ldr	r3, [pc, #380]	@ (811a5e0 <tcp_output_segment+0x1a4>)
 811a464:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 811a468:	4960      	ldr	r1, [pc, #384]	@ (811a5ec <tcp_output_segment+0x1b0>)
 811a46a:	485f      	ldr	r0, [pc, #380]	@ (811a5e8 <tcp_output_segment+0x1ac>)
 811a46c:	f001 fcee 	bl	811be4c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 811a470:	687b      	ldr	r3, [r7, #4]
 811a472:	2b00      	cmp	r3, #0
 811a474:	d106      	bne.n	811a484 <tcp_output_segment+0x48>
 811a476:	4b5a      	ldr	r3, [pc, #360]	@ (811a5e0 <tcp_output_segment+0x1a4>)
 811a478:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 811a47c:	495c      	ldr	r1, [pc, #368]	@ (811a5f0 <tcp_output_segment+0x1b4>)
 811a47e:	485a      	ldr	r0, [pc, #360]	@ (811a5e8 <tcp_output_segment+0x1ac>)
 811a480:	f001 fce4 	bl	811be4c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 811a484:	68f8      	ldr	r0, [r7, #12]
 811a486:	f7ff ffb9 	bl	811a3fc <tcp_output_segment_busy>
 811a48a:	4603      	mov	r3, r0
 811a48c:	2b00      	cmp	r3, #0
 811a48e:	d001      	beq.n	811a494 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 811a490:	2300      	movs	r3, #0
 811a492:	e0a1      	b.n	811a5d8 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 811a494:	68bb      	ldr	r3, [r7, #8]
 811a496:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 811a498:	68fb      	ldr	r3, [r7, #12]
 811a49a:	68dc      	ldr	r4, [r3, #12]
 811a49c:	4610      	mov	r0, r2
 811a49e:	f7f6 faa2 	bl	81109e6 <lwip_htonl>
 811a4a2:	4603      	mov	r3, r0
 811a4a4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 811a4a6:	68bb      	ldr	r3, [r7, #8]
 811a4a8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 811a4aa:	68fb      	ldr	r3, [r7, #12]
 811a4ac:	68dc      	ldr	r4, [r3, #12]
 811a4ae:	4610      	mov	r0, r2
 811a4b0:	f7f6 fa84 	bl	81109bc <lwip_htons>
 811a4b4:	4603      	mov	r3, r0
 811a4b6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 811a4b8:	68bb      	ldr	r3, [r7, #8]
 811a4ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811a4bc:	68ba      	ldr	r2, [r7, #8]
 811a4be:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 811a4c0:	441a      	add	r2, r3
 811a4c2:	68bb      	ldr	r3, [r7, #8]
 811a4c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 811a4c6:	68fb      	ldr	r3, [r7, #12]
 811a4c8:	68db      	ldr	r3, [r3, #12]
 811a4ca:	3314      	adds	r3, #20
 811a4cc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 811a4ce:	68fb      	ldr	r3, [r7, #12]
 811a4d0:	7a9b      	ldrb	r3, [r3, #10]
 811a4d2:	f003 0301 	and.w	r3, r3, #1
 811a4d6:	2b00      	cmp	r3, #0
 811a4d8:	d015      	beq.n	811a506 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 811a4da:	68bb      	ldr	r3, [r7, #8]
 811a4dc:	3304      	adds	r3, #4
 811a4de:	461a      	mov	r2, r3
 811a4e0:	6879      	ldr	r1, [r7, #4]
 811a4e2:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 811a4e6:	f7fc fa37 	bl	8116958 <tcp_eff_send_mss_netif>
 811a4ea:	4603      	mov	r3, r0
 811a4ec:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 811a4ee:	8b7b      	ldrh	r3, [r7, #26]
 811a4f0:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 811a4f4:	4618      	mov	r0, r3
 811a4f6:	f7f6 fa76 	bl	81109e6 <lwip_htonl>
 811a4fa:	4602      	mov	r2, r0
 811a4fc:	69fb      	ldr	r3, [r7, #28]
 811a4fe:	601a      	str	r2, [r3, #0]
    opts += 1;
 811a500:	69fb      	ldr	r3, [r7, #28]
 811a502:	3304      	adds	r3, #4
 811a504:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 811a506:	68bb      	ldr	r3, [r7, #8]
 811a508:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 811a50c:	2b00      	cmp	r3, #0
 811a50e:	da02      	bge.n	811a516 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 811a510:	68bb      	ldr	r3, [r7, #8]
 811a512:	2200      	movs	r2, #0
 811a514:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 811a516:	68bb      	ldr	r3, [r7, #8]
 811a518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 811a51a:	2b00      	cmp	r3, #0
 811a51c:	d10c      	bne.n	811a538 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 811a51e:	4b35      	ldr	r3, [pc, #212]	@ (811a5f4 <tcp_output_segment+0x1b8>)
 811a520:	681a      	ldr	r2, [r3, #0]
 811a522:	68bb      	ldr	r3, [r7, #8]
 811a524:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 811a526:	68fb      	ldr	r3, [r7, #12]
 811a528:	68db      	ldr	r3, [r3, #12]
 811a52a:	685b      	ldr	r3, [r3, #4]
 811a52c:	4618      	mov	r0, r3
 811a52e:	f7f6 fa5a 	bl	81109e6 <lwip_htonl>
 811a532:	4602      	mov	r2, r0
 811a534:	68bb      	ldr	r3, [r7, #8]
 811a536:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 811a538:	68fb      	ldr	r3, [r7, #12]
 811a53a:	68da      	ldr	r2, [r3, #12]
 811a53c:	68fb      	ldr	r3, [r7, #12]
 811a53e:	685b      	ldr	r3, [r3, #4]
 811a540:	685b      	ldr	r3, [r3, #4]
 811a542:	1ad3      	subs	r3, r2, r3
 811a544:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 811a546:	68fb      	ldr	r3, [r7, #12]
 811a548:	685b      	ldr	r3, [r3, #4]
 811a54a:	8959      	ldrh	r1, [r3, #10]
 811a54c:	68fb      	ldr	r3, [r7, #12]
 811a54e:	685b      	ldr	r3, [r3, #4]
 811a550:	8b3a      	ldrh	r2, [r7, #24]
 811a552:	1a8a      	subs	r2, r1, r2
 811a554:	b292      	uxth	r2, r2
 811a556:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 811a558:	68fb      	ldr	r3, [r7, #12]
 811a55a:	685b      	ldr	r3, [r3, #4]
 811a55c:	8919      	ldrh	r1, [r3, #8]
 811a55e:	68fb      	ldr	r3, [r7, #12]
 811a560:	685b      	ldr	r3, [r3, #4]
 811a562:	8b3a      	ldrh	r2, [r7, #24]
 811a564:	1a8a      	subs	r2, r1, r2
 811a566:	b292      	uxth	r2, r2
 811a568:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 811a56a:	68fb      	ldr	r3, [r7, #12]
 811a56c:	685b      	ldr	r3, [r3, #4]
 811a56e:	68fa      	ldr	r2, [r7, #12]
 811a570:	68d2      	ldr	r2, [r2, #12]
 811a572:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 811a574:	68fb      	ldr	r3, [r7, #12]
 811a576:	68db      	ldr	r3, [r3, #12]
 811a578:	2200      	movs	r2, #0
 811a57a:	741a      	strb	r2, [r3, #16]
 811a57c:	2200      	movs	r2, #0
 811a57e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 811a580:	68fb      	ldr	r3, [r7, #12]
 811a582:	68da      	ldr	r2, [r3, #12]
 811a584:	68fb      	ldr	r3, [r7, #12]
 811a586:	7a9b      	ldrb	r3, [r3, #10]
 811a588:	f003 0301 	and.w	r3, r3, #1
 811a58c:	2b00      	cmp	r3, #0
 811a58e:	d001      	beq.n	811a594 <tcp_output_segment+0x158>
 811a590:	2318      	movs	r3, #24
 811a592:	e000      	b.n	811a596 <tcp_output_segment+0x15a>
 811a594:	2314      	movs	r3, #20
 811a596:	4413      	add	r3, r2
 811a598:	69fa      	ldr	r2, [r7, #28]
 811a59a:	429a      	cmp	r2, r3
 811a59c:	d006      	beq.n	811a5ac <tcp_output_segment+0x170>
 811a59e:	4b10      	ldr	r3, [pc, #64]	@ (811a5e0 <tcp_output_segment+0x1a4>)
 811a5a0:	f240 621c 	movw	r2, #1564	@ 0x61c
 811a5a4:	4914      	ldr	r1, [pc, #80]	@ (811a5f8 <tcp_output_segment+0x1bc>)
 811a5a6:	4810      	ldr	r0, [pc, #64]	@ (811a5e8 <tcp_output_segment+0x1ac>)
 811a5a8:	f001 fc50 	bl	811be4c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 811a5ac:	68fb      	ldr	r3, [r7, #12]
 811a5ae:	6858      	ldr	r0, [r3, #4]
 811a5b0:	68b9      	ldr	r1, [r7, #8]
 811a5b2:	68bb      	ldr	r3, [r7, #8]
 811a5b4:	1d1c      	adds	r4, r3, #4
 811a5b6:	68bb      	ldr	r3, [r7, #8]
 811a5b8:	7add      	ldrb	r5, [r3, #11]
 811a5ba:	68bb      	ldr	r3, [r7, #8]
 811a5bc:	7a9b      	ldrb	r3, [r3, #10]
 811a5be:	687a      	ldr	r2, [r7, #4]
 811a5c0:	9202      	str	r2, [sp, #8]
 811a5c2:	2206      	movs	r2, #6
 811a5c4:	9201      	str	r2, [sp, #4]
 811a5c6:	9300      	str	r3, [sp, #0]
 811a5c8:	462b      	mov	r3, r5
 811a5ca:	4622      	mov	r2, r4
 811a5cc:	f7f7 fe8c 	bl	81122e8 <ip4_output_if>
 811a5d0:	4603      	mov	r3, r0
 811a5d2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 811a5d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 811a5d8:	4618      	mov	r0, r3
 811a5da:	3720      	adds	r7, #32
 811a5dc:	46bd      	mov	sp, r7
 811a5de:	bdb0      	pop	{r4, r5, r7, pc}
 811a5e0:	0811ed48 	.word	0x0811ed48
 811a5e4:	0811f34c 	.word	0x0811f34c
 811a5e8:	0811eddc 	.word	0x0811eddc
 811a5ec:	0811f36c 	.word	0x0811f36c
 811a5f0:	0811f38c 	.word	0x0811f38c
 811a5f4:	10011d14 	.word	0x10011d14
 811a5f8:	0811f3b0 	.word	0x0811f3b0

0811a5fc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 811a5fc:	b5b0      	push	{r4, r5, r7, lr}
 811a5fe:	b084      	sub	sp, #16
 811a600:	af00      	add	r7, sp, #0
 811a602:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 811a604:	687b      	ldr	r3, [r7, #4]
 811a606:	2b00      	cmp	r3, #0
 811a608:	d106      	bne.n	811a618 <tcp_rexmit_rto_prepare+0x1c>
 811a60a:	4b31      	ldr	r3, [pc, #196]	@ (811a6d0 <tcp_rexmit_rto_prepare+0xd4>)
 811a60c:	f240 6263 	movw	r2, #1635	@ 0x663
 811a610:	4930      	ldr	r1, [pc, #192]	@ (811a6d4 <tcp_rexmit_rto_prepare+0xd8>)
 811a612:	4831      	ldr	r0, [pc, #196]	@ (811a6d8 <tcp_rexmit_rto_prepare+0xdc>)
 811a614:	f001 fc1a 	bl	811be4c <iprintf>

  if (pcb->unacked == NULL) {
 811a618:	687b      	ldr	r3, [r7, #4]
 811a61a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811a61c:	2b00      	cmp	r3, #0
 811a61e:	d102      	bne.n	811a626 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 811a620:	f06f 0305 	mvn.w	r3, #5
 811a624:	e050      	b.n	811a6c8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 811a626:	687b      	ldr	r3, [r7, #4]
 811a628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811a62a:	60fb      	str	r3, [r7, #12]
 811a62c:	e00b      	b.n	811a646 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 811a62e:	68f8      	ldr	r0, [r7, #12]
 811a630:	f7ff fee4 	bl	811a3fc <tcp_output_segment_busy>
 811a634:	4603      	mov	r3, r0
 811a636:	2b00      	cmp	r3, #0
 811a638:	d002      	beq.n	811a640 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 811a63a:	f06f 0305 	mvn.w	r3, #5
 811a63e:	e043      	b.n	811a6c8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 811a640:	68fb      	ldr	r3, [r7, #12]
 811a642:	681b      	ldr	r3, [r3, #0]
 811a644:	60fb      	str	r3, [r7, #12]
 811a646:	68fb      	ldr	r3, [r7, #12]
 811a648:	681b      	ldr	r3, [r3, #0]
 811a64a:	2b00      	cmp	r3, #0
 811a64c:	d1ef      	bne.n	811a62e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 811a64e:	68f8      	ldr	r0, [r7, #12]
 811a650:	f7ff fed4 	bl	811a3fc <tcp_output_segment_busy>
 811a654:	4603      	mov	r3, r0
 811a656:	2b00      	cmp	r3, #0
 811a658:	d002      	beq.n	811a660 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 811a65a:	f06f 0305 	mvn.w	r3, #5
 811a65e:	e033      	b.n	811a6c8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 811a660:	687b      	ldr	r3, [r7, #4]
 811a662:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 811a664:	68fb      	ldr	r3, [r7, #12]
 811a666:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 811a668:	687b      	ldr	r3, [r7, #4]
 811a66a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 811a66c:	687b      	ldr	r3, [r7, #4]
 811a66e:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 811a670:	687b      	ldr	r3, [r7, #4]
 811a672:	2200      	movs	r2, #0
 811a674:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 811a676:	687b      	ldr	r3, [r7, #4]
 811a678:	8b5b      	ldrh	r3, [r3, #26]
 811a67a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 811a67e:	b29a      	uxth	r2, r3
 811a680:	687b      	ldr	r3, [r7, #4]
 811a682:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 811a684:	68fb      	ldr	r3, [r7, #12]
 811a686:	68db      	ldr	r3, [r3, #12]
 811a688:	685b      	ldr	r3, [r3, #4]
 811a68a:	4618      	mov	r0, r3
 811a68c:	f7f6 f9ab 	bl	81109e6 <lwip_htonl>
 811a690:	4604      	mov	r4, r0
 811a692:	68fb      	ldr	r3, [r7, #12]
 811a694:	891b      	ldrh	r3, [r3, #8]
 811a696:	461d      	mov	r5, r3
 811a698:	68fb      	ldr	r3, [r7, #12]
 811a69a:	68db      	ldr	r3, [r3, #12]
 811a69c:	899b      	ldrh	r3, [r3, #12]
 811a69e:	b29b      	uxth	r3, r3
 811a6a0:	4618      	mov	r0, r3
 811a6a2:	f7f6 f98b 	bl	81109bc <lwip_htons>
 811a6a6:	4603      	mov	r3, r0
 811a6a8:	b2db      	uxtb	r3, r3
 811a6aa:	f003 0303 	and.w	r3, r3, #3
 811a6ae:	2b00      	cmp	r3, #0
 811a6b0:	d001      	beq.n	811a6b6 <tcp_rexmit_rto_prepare+0xba>
 811a6b2:	2301      	movs	r3, #1
 811a6b4:	e000      	b.n	811a6b8 <tcp_rexmit_rto_prepare+0xbc>
 811a6b6:	2300      	movs	r3, #0
 811a6b8:	442b      	add	r3, r5
 811a6ba:	18e2      	adds	r2, r4, r3
 811a6bc:	687b      	ldr	r3, [r7, #4]
 811a6be:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 811a6c0:	687b      	ldr	r3, [r7, #4]
 811a6c2:	2200      	movs	r2, #0
 811a6c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 811a6c6:	2300      	movs	r3, #0
}
 811a6c8:	4618      	mov	r0, r3
 811a6ca:	3710      	adds	r7, #16
 811a6cc:	46bd      	mov	sp, r7
 811a6ce:	bdb0      	pop	{r4, r5, r7, pc}
 811a6d0:	0811ed48 	.word	0x0811ed48
 811a6d4:	0811f3c4 	.word	0x0811f3c4
 811a6d8:	0811eddc 	.word	0x0811eddc

0811a6dc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 811a6dc:	b580      	push	{r7, lr}
 811a6de:	b082      	sub	sp, #8
 811a6e0:	af00      	add	r7, sp, #0
 811a6e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 811a6e4:	687b      	ldr	r3, [r7, #4]
 811a6e6:	2b00      	cmp	r3, #0
 811a6e8:	d106      	bne.n	811a6f8 <tcp_rexmit_rto_commit+0x1c>
 811a6ea:	4b0d      	ldr	r3, [pc, #52]	@ (811a720 <tcp_rexmit_rto_commit+0x44>)
 811a6ec:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 811a6f0:	490c      	ldr	r1, [pc, #48]	@ (811a724 <tcp_rexmit_rto_commit+0x48>)
 811a6f2:	480d      	ldr	r0, [pc, #52]	@ (811a728 <tcp_rexmit_rto_commit+0x4c>)
 811a6f4:	f001 fbaa 	bl	811be4c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 811a6f8:	687b      	ldr	r3, [r7, #4]
 811a6fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811a6fe:	2bff      	cmp	r3, #255	@ 0xff
 811a700:	d007      	beq.n	811a712 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 811a702:	687b      	ldr	r3, [r7, #4]
 811a704:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811a708:	3301      	adds	r3, #1
 811a70a:	b2da      	uxtb	r2, r3
 811a70c:	687b      	ldr	r3, [r7, #4]
 811a70e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 811a712:	6878      	ldr	r0, [r7, #4]
 811a714:	f7ff fc7e 	bl	811a014 <tcp_output>
}
 811a718:	bf00      	nop
 811a71a:	3708      	adds	r7, #8
 811a71c:	46bd      	mov	sp, r7
 811a71e:	bd80      	pop	{r7, pc}
 811a720:	0811ed48 	.word	0x0811ed48
 811a724:	0811f3e8 	.word	0x0811f3e8
 811a728:	0811eddc 	.word	0x0811eddc

0811a72c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 811a72c:	b580      	push	{r7, lr}
 811a72e:	b082      	sub	sp, #8
 811a730:	af00      	add	r7, sp, #0
 811a732:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 811a734:	687b      	ldr	r3, [r7, #4]
 811a736:	2b00      	cmp	r3, #0
 811a738:	d106      	bne.n	811a748 <tcp_rexmit_rto+0x1c>
 811a73a:	4b0a      	ldr	r3, [pc, #40]	@ (811a764 <tcp_rexmit_rto+0x38>)
 811a73c:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 811a740:	4909      	ldr	r1, [pc, #36]	@ (811a768 <tcp_rexmit_rto+0x3c>)
 811a742:	480a      	ldr	r0, [pc, #40]	@ (811a76c <tcp_rexmit_rto+0x40>)
 811a744:	f001 fb82 	bl	811be4c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 811a748:	6878      	ldr	r0, [r7, #4]
 811a74a:	f7ff ff57 	bl	811a5fc <tcp_rexmit_rto_prepare>
 811a74e:	4603      	mov	r3, r0
 811a750:	2b00      	cmp	r3, #0
 811a752:	d102      	bne.n	811a75a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 811a754:	6878      	ldr	r0, [r7, #4]
 811a756:	f7ff ffc1 	bl	811a6dc <tcp_rexmit_rto_commit>
  }
}
 811a75a:	bf00      	nop
 811a75c:	3708      	adds	r7, #8
 811a75e:	46bd      	mov	sp, r7
 811a760:	bd80      	pop	{r7, pc}
 811a762:	bf00      	nop
 811a764:	0811ed48 	.word	0x0811ed48
 811a768:	0811f40c 	.word	0x0811f40c
 811a76c:	0811eddc 	.word	0x0811eddc

0811a770 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 811a770:	b590      	push	{r4, r7, lr}
 811a772:	b085      	sub	sp, #20
 811a774:	af00      	add	r7, sp, #0
 811a776:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 811a778:	687b      	ldr	r3, [r7, #4]
 811a77a:	2b00      	cmp	r3, #0
 811a77c:	d106      	bne.n	811a78c <tcp_rexmit+0x1c>
 811a77e:	4b2f      	ldr	r3, [pc, #188]	@ (811a83c <tcp_rexmit+0xcc>)
 811a780:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 811a784:	492e      	ldr	r1, [pc, #184]	@ (811a840 <tcp_rexmit+0xd0>)
 811a786:	482f      	ldr	r0, [pc, #188]	@ (811a844 <tcp_rexmit+0xd4>)
 811a788:	f001 fb60 	bl	811be4c <iprintf>

  if (pcb->unacked == NULL) {
 811a78c:	687b      	ldr	r3, [r7, #4]
 811a78e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811a790:	2b00      	cmp	r3, #0
 811a792:	d102      	bne.n	811a79a <tcp_rexmit+0x2a>
    return ERR_VAL;
 811a794:	f06f 0305 	mvn.w	r3, #5
 811a798:	e04c      	b.n	811a834 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 811a79a:	687b      	ldr	r3, [r7, #4]
 811a79c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811a79e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 811a7a0:	68b8      	ldr	r0, [r7, #8]
 811a7a2:	f7ff fe2b 	bl	811a3fc <tcp_output_segment_busy>
 811a7a6:	4603      	mov	r3, r0
 811a7a8:	2b00      	cmp	r3, #0
 811a7aa:	d002      	beq.n	811a7b2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 811a7ac:	f06f 0305 	mvn.w	r3, #5
 811a7b0:	e040      	b.n	811a834 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 811a7b2:	68bb      	ldr	r3, [r7, #8]
 811a7b4:	681a      	ldr	r2, [r3, #0]
 811a7b6:	687b      	ldr	r3, [r7, #4]
 811a7b8:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 811a7ba:	687b      	ldr	r3, [r7, #4]
 811a7bc:	336c      	adds	r3, #108	@ 0x6c
 811a7be:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 811a7c0:	e002      	b.n	811a7c8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 811a7c2:	68fb      	ldr	r3, [r7, #12]
 811a7c4:	681b      	ldr	r3, [r3, #0]
 811a7c6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 811a7c8:	68fb      	ldr	r3, [r7, #12]
 811a7ca:	681b      	ldr	r3, [r3, #0]
 811a7cc:	2b00      	cmp	r3, #0
 811a7ce:	d011      	beq.n	811a7f4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 811a7d0:	68fb      	ldr	r3, [r7, #12]
 811a7d2:	681b      	ldr	r3, [r3, #0]
 811a7d4:	68db      	ldr	r3, [r3, #12]
 811a7d6:	685b      	ldr	r3, [r3, #4]
 811a7d8:	4618      	mov	r0, r3
 811a7da:	f7f6 f904 	bl	81109e6 <lwip_htonl>
 811a7de:	4604      	mov	r4, r0
 811a7e0:	68bb      	ldr	r3, [r7, #8]
 811a7e2:	68db      	ldr	r3, [r3, #12]
 811a7e4:	685b      	ldr	r3, [r3, #4]
 811a7e6:	4618      	mov	r0, r3
 811a7e8:	f7f6 f8fd 	bl	81109e6 <lwip_htonl>
 811a7ec:	4603      	mov	r3, r0
 811a7ee:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 811a7f0:	2b00      	cmp	r3, #0
 811a7f2:	dbe6      	blt.n	811a7c2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 811a7f4:	68fb      	ldr	r3, [r7, #12]
 811a7f6:	681a      	ldr	r2, [r3, #0]
 811a7f8:	68bb      	ldr	r3, [r7, #8]
 811a7fa:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 811a7fc:	68fb      	ldr	r3, [r7, #12]
 811a7fe:	68ba      	ldr	r2, [r7, #8]
 811a800:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 811a802:	68bb      	ldr	r3, [r7, #8]
 811a804:	681b      	ldr	r3, [r3, #0]
 811a806:	2b00      	cmp	r3, #0
 811a808:	d103      	bne.n	811a812 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 811a80a:	687b      	ldr	r3, [r7, #4]
 811a80c:	2200      	movs	r2, #0
 811a80e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 811a812:	687b      	ldr	r3, [r7, #4]
 811a814:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811a818:	2bff      	cmp	r3, #255	@ 0xff
 811a81a:	d007      	beq.n	811a82c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 811a81c:	687b      	ldr	r3, [r7, #4]
 811a81e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 811a822:	3301      	adds	r3, #1
 811a824:	b2da      	uxtb	r2, r3
 811a826:	687b      	ldr	r3, [r7, #4]
 811a828:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 811a82c:	687b      	ldr	r3, [r7, #4]
 811a82e:	2200      	movs	r2, #0
 811a830:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 811a832:	2300      	movs	r3, #0
}
 811a834:	4618      	mov	r0, r3
 811a836:	3714      	adds	r7, #20
 811a838:	46bd      	mov	sp, r7
 811a83a:	bd90      	pop	{r4, r7, pc}
 811a83c:	0811ed48 	.word	0x0811ed48
 811a840:	0811f428 	.word	0x0811f428
 811a844:	0811eddc 	.word	0x0811eddc

0811a848 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 811a848:	b580      	push	{r7, lr}
 811a84a:	b082      	sub	sp, #8
 811a84c:	af00      	add	r7, sp, #0
 811a84e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 811a850:	687b      	ldr	r3, [r7, #4]
 811a852:	2b00      	cmp	r3, #0
 811a854:	d106      	bne.n	811a864 <tcp_rexmit_fast+0x1c>
 811a856:	4b2a      	ldr	r3, [pc, #168]	@ (811a900 <tcp_rexmit_fast+0xb8>)
 811a858:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 811a85c:	4929      	ldr	r1, [pc, #164]	@ (811a904 <tcp_rexmit_fast+0xbc>)
 811a85e:	482a      	ldr	r0, [pc, #168]	@ (811a908 <tcp_rexmit_fast+0xc0>)
 811a860:	f001 faf4 	bl	811be4c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 811a864:	687b      	ldr	r3, [r7, #4]
 811a866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 811a868:	2b00      	cmp	r3, #0
 811a86a:	d044      	beq.n	811a8f6 <tcp_rexmit_fast+0xae>
 811a86c:	687b      	ldr	r3, [r7, #4]
 811a86e:	8b5b      	ldrh	r3, [r3, #26]
 811a870:	f003 0304 	and.w	r3, r3, #4
 811a874:	2b00      	cmp	r3, #0
 811a876:	d13e      	bne.n	811a8f6 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 811a878:	6878      	ldr	r0, [r7, #4]
 811a87a:	f7ff ff79 	bl	811a770 <tcp_rexmit>
 811a87e:	4603      	mov	r3, r0
 811a880:	2b00      	cmp	r3, #0
 811a882:	d138      	bne.n	811a8f6 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 811a884:	687b      	ldr	r3, [r7, #4]
 811a886:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 811a88a:	687b      	ldr	r3, [r7, #4]
 811a88c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 811a890:	4293      	cmp	r3, r2
 811a892:	bf28      	it	cs
 811a894:	4613      	movcs	r3, r2
 811a896:	b29b      	uxth	r3, r3
 811a898:	0fda      	lsrs	r2, r3, #31
 811a89a:	4413      	add	r3, r2
 811a89c:	105b      	asrs	r3, r3, #1
 811a89e:	b29a      	uxth	r2, r3
 811a8a0:	687b      	ldr	r3, [r7, #4]
 811a8a2:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 811a8a6:	687b      	ldr	r3, [r7, #4]
 811a8a8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 811a8ac:	461a      	mov	r2, r3
 811a8ae:	687b      	ldr	r3, [r7, #4]
 811a8b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811a8b2:	005b      	lsls	r3, r3, #1
 811a8b4:	429a      	cmp	r2, r3
 811a8b6:	d206      	bcs.n	811a8c6 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 811a8b8:	687b      	ldr	r3, [r7, #4]
 811a8ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811a8bc:	005b      	lsls	r3, r3, #1
 811a8be:	b29a      	uxth	r2, r3
 811a8c0:	687b      	ldr	r3, [r7, #4]
 811a8c2:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 811a8c6:	687b      	ldr	r3, [r7, #4]
 811a8c8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 811a8cc:	687b      	ldr	r3, [r7, #4]
 811a8ce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 811a8d0:	4619      	mov	r1, r3
 811a8d2:	0049      	lsls	r1, r1, #1
 811a8d4:	440b      	add	r3, r1
 811a8d6:	b29b      	uxth	r3, r3
 811a8d8:	4413      	add	r3, r2
 811a8da:	b29a      	uxth	r2, r3
 811a8dc:	687b      	ldr	r3, [r7, #4]
 811a8de:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 811a8e2:	687b      	ldr	r3, [r7, #4]
 811a8e4:	8b5b      	ldrh	r3, [r3, #26]
 811a8e6:	f043 0304 	orr.w	r3, r3, #4
 811a8ea:	b29a      	uxth	r2, r3
 811a8ec:	687b      	ldr	r3, [r7, #4]
 811a8ee:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 811a8f0:	687b      	ldr	r3, [r7, #4]
 811a8f2:	2200      	movs	r2, #0
 811a8f4:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 811a8f6:	bf00      	nop
 811a8f8:	3708      	adds	r7, #8
 811a8fa:	46bd      	mov	sp, r7
 811a8fc:	bd80      	pop	{r7, pc}
 811a8fe:	bf00      	nop
 811a900:	0811ed48 	.word	0x0811ed48
 811a904:	0811f440 	.word	0x0811f440
 811a908:	0811eddc 	.word	0x0811eddc

0811a90c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 811a90c:	b580      	push	{r7, lr}
 811a90e:	b086      	sub	sp, #24
 811a910:	af00      	add	r7, sp, #0
 811a912:	60f8      	str	r0, [r7, #12]
 811a914:	607b      	str	r3, [r7, #4]
 811a916:	460b      	mov	r3, r1
 811a918:	817b      	strh	r3, [r7, #10]
 811a91a:	4613      	mov	r3, r2
 811a91c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 811a91e:	897a      	ldrh	r2, [r7, #10]
 811a920:	893b      	ldrh	r3, [r7, #8]
 811a922:	4413      	add	r3, r2
 811a924:	b29b      	uxth	r3, r3
 811a926:	3314      	adds	r3, #20
 811a928:	b29b      	uxth	r3, r3
 811a92a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 811a92e:	4619      	mov	r1, r3
 811a930:	2022      	movs	r0, #34	@ 0x22
 811a932:	f7f9 fce5 	bl	8114300 <pbuf_alloc>
 811a936:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 811a938:	697b      	ldr	r3, [r7, #20]
 811a93a:	2b00      	cmp	r3, #0
 811a93c:	d04d      	beq.n	811a9da <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 811a93e:	897b      	ldrh	r3, [r7, #10]
 811a940:	3313      	adds	r3, #19
 811a942:	697a      	ldr	r2, [r7, #20]
 811a944:	8952      	ldrh	r2, [r2, #10]
 811a946:	4293      	cmp	r3, r2
 811a948:	db06      	blt.n	811a958 <tcp_output_alloc_header_common+0x4c>
 811a94a:	4b26      	ldr	r3, [pc, #152]	@ (811a9e4 <tcp_output_alloc_header_common+0xd8>)
 811a94c:	f240 7223 	movw	r2, #1827	@ 0x723
 811a950:	4925      	ldr	r1, [pc, #148]	@ (811a9e8 <tcp_output_alloc_header_common+0xdc>)
 811a952:	4826      	ldr	r0, [pc, #152]	@ (811a9ec <tcp_output_alloc_header_common+0xe0>)
 811a954:	f001 fa7a 	bl	811be4c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 811a958:	697b      	ldr	r3, [r7, #20]
 811a95a:	685b      	ldr	r3, [r3, #4]
 811a95c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 811a95e:	8c3b      	ldrh	r3, [r7, #32]
 811a960:	4618      	mov	r0, r3
 811a962:	f7f6 f82b 	bl	81109bc <lwip_htons>
 811a966:	4603      	mov	r3, r0
 811a968:	461a      	mov	r2, r3
 811a96a:	693b      	ldr	r3, [r7, #16]
 811a96c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 811a96e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 811a970:	4618      	mov	r0, r3
 811a972:	f7f6 f823 	bl	81109bc <lwip_htons>
 811a976:	4603      	mov	r3, r0
 811a978:	461a      	mov	r2, r3
 811a97a:	693b      	ldr	r3, [r7, #16]
 811a97c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 811a97e:	693b      	ldr	r3, [r7, #16]
 811a980:	687a      	ldr	r2, [r7, #4]
 811a982:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 811a984:	68f8      	ldr	r0, [r7, #12]
 811a986:	f7f6 f82e 	bl	81109e6 <lwip_htonl>
 811a98a:	4602      	mov	r2, r0
 811a98c:	693b      	ldr	r3, [r7, #16]
 811a98e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 811a990:	897b      	ldrh	r3, [r7, #10]
 811a992:	089b      	lsrs	r3, r3, #2
 811a994:	b29b      	uxth	r3, r3
 811a996:	3305      	adds	r3, #5
 811a998:	b29b      	uxth	r3, r3
 811a99a:	031b      	lsls	r3, r3, #12
 811a99c:	b29a      	uxth	r2, r3
 811a99e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 811a9a2:	b29b      	uxth	r3, r3
 811a9a4:	4313      	orrs	r3, r2
 811a9a6:	b29b      	uxth	r3, r3
 811a9a8:	4618      	mov	r0, r3
 811a9aa:	f7f6 f807 	bl	81109bc <lwip_htons>
 811a9ae:	4603      	mov	r3, r0
 811a9b0:	461a      	mov	r2, r3
 811a9b2:	693b      	ldr	r3, [r7, #16]
 811a9b4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 811a9b6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 811a9b8:	4618      	mov	r0, r3
 811a9ba:	f7f5 ffff 	bl	81109bc <lwip_htons>
 811a9be:	4603      	mov	r3, r0
 811a9c0:	461a      	mov	r2, r3
 811a9c2:	693b      	ldr	r3, [r7, #16]
 811a9c4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 811a9c6:	693b      	ldr	r3, [r7, #16]
 811a9c8:	2200      	movs	r2, #0
 811a9ca:	741a      	strb	r2, [r3, #16]
 811a9cc:	2200      	movs	r2, #0
 811a9ce:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 811a9d0:	693b      	ldr	r3, [r7, #16]
 811a9d2:	2200      	movs	r2, #0
 811a9d4:	749a      	strb	r2, [r3, #18]
 811a9d6:	2200      	movs	r2, #0
 811a9d8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 811a9da:	697b      	ldr	r3, [r7, #20]
}
 811a9dc:	4618      	mov	r0, r3
 811a9de:	3718      	adds	r7, #24
 811a9e0:	46bd      	mov	sp, r7
 811a9e2:	bd80      	pop	{r7, pc}
 811a9e4:	0811ed48 	.word	0x0811ed48
 811a9e8:	0811f460 	.word	0x0811f460
 811a9ec:	0811eddc 	.word	0x0811eddc

0811a9f0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 811a9f0:	b5b0      	push	{r4, r5, r7, lr}
 811a9f2:	b08a      	sub	sp, #40	@ 0x28
 811a9f4:	af04      	add	r7, sp, #16
 811a9f6:	60f8      	str	r0, [r7, #12]
 811a9f8:	607b      	str	r3, [r7, #4]
 811a9fa:	460b      	mov	r3, r1
 811a9fc:	817b      	strh	r3, [r7, #10]
 811a9fe:	4613      	mov	r3, r2
 811aa00:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 811aa02:	68fb      	ldr	r3, [r7, #12]
 811aa04:	2b00      	cmp	r3, #0
 811aa06:	d106      	bne.n	811aa16 <tcp_output_alloc_header+0x26>
 811aa08:	4b15      	ldr	r3, [pc, #84]	@ (811aa60 <tcp_output_alloc_header+0x70>)
 811aa0a:	f240 7242 	movw	r2, #1858	@ 0x742
 811aa0e:	4915      	ldr	r1, [pc, #84]	@ (811aa64 <tcp_output_alloc_header+0x74>)
 811aa10:	4815      	ldr	r0, [pc, #84]	@ (811aa68 <tcp_output_alloc_header+0x78>)
 811aa12:	f001 fa1b 	bl	811be4c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 811aa16:	68fb      	ldr	r3, [r7, #12]
 811aa18:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 811aa1a:	68fb      	ldr	r3, [r7, #12]
 811aa1c:	8adb      	ldrh	r3, [r3, #22]
 811aa1e:	68fa      	ldr	r2, [r7, #12]
 811aa20:	8b12      	ldrh	r2, [r2, #24]
 811aa22:	68f9      	ldr	r1, [r7, #12]
 811aa24:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 811aa26:	893d      	ldrh	r5, [r7, #8]
 811aa28:	897c      	ldrh	r4, [r7, #10]
 811aa2a:	9103      	str	r1, [sp, #12]
 811aa2c:	2110      	movs	r1, #16
 811aa2e:	9102      	str	r1, [sp, #8]
 811aa30:	9201      	str	r2, [sp, #4]
 811aa32:	9300      	str	r3, [sp, #0]
 811aa34:	687b      	ldr	r3, [r7, #4]
 811aa36:	462a      	mov	r2, r5
 811aa38:	4621      	mov	r1, r4
 811aa3a:	f7ff ff67 	bl	811a90c <tcp_output_alloc_header_common>
 811aa3e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 811aa40:	697b      	ldr	r3, [r7, #20]
 811aa42:	2b00      	cmp	r3, #0
 811aa44:	d006      	beq.n	811aa54 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 811aa46:	68fb      	ldr	r3, [r7, #12]
 811aa48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 811aa4a:	68fa      	ldr	r2, [r7, #12]
 811aa4c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 811aa4e:	441a      	add	r2, r3
 811aa50:	68fb      	ldr	r3, [r7, #12]
 811aa52:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 811aa54:	697b      	ldr	r3, [r7, #20]
}
 811aa56:	4618      	mov	r0, r3
 811aa58:	3718      	adds	r7, #24
 811aa5a:	46bd      	mov	sp, r7
 811aa5c:	bdb0      	pop	{r4, r5, r7, pc}
 811aa5e:	bf00      	nop
 811aa60:	0811ed48 	.word	0x0811ed48
 811aa64:	0811f490 	.word	0x0811f490
 811aa68:	0811eddc 	.word	0x0811eddc

0811aa6c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 811aa6c:	b580      	push	{r7, lr}
 811aa6e:	b088      	sub	sp, #32
 811aa70:	af00      	add	r7, sp, #0
 811aa72:	60f8      	str	r0, [r7, #12]
 811aa74:	60b9      	str	r1, [r7, #8]
 811aa76:	4611      	mov	r1, r2
 811aa78:	461a      	mov	r2, r3
 811aa7a:	460b      	mov	r3, r1
 811aa7c:	71fb      	strb	r3, [r7, #7]
 811aa7e:	4613      	mov	r3, r2
 811aa80:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 811aa82:	2300      	movs	r3, #0
 811aa84:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 811aa86:	68bb      	ldr	r3, [r7, #8]
 811aa88:	2b00      	cmp	r3, #0
 811aa8a:	d106      	bne.n	811aa9a <tcp_output_fill_options+0x2e>
 811aa8c:	4b12      	ldr	r3, [pc, #72]	@ (811aad8 <tcp_output_fill_options+0x6c>)
 811aa8e:	f240 7256 	movw	r2, #1878	@ 0x756
 811aa92:	4912      	ldr	r1, [pc, #72]	@ (811aadc <tcp_output_fill_options+0x70>)
 811aa94:	4812      	ldr	r0, [pc, #72]	@ (811aae0 <tcp_output_fill_options+0x74>)
 811aa96:	f001 f9d9 	bl	811be4c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 811aa9a:	68bb      	ldr	r3, [r7, #8]
 811aa9c:	685b      	ldr	r3, [r3, #4]
 811aa9e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 811aaa0:	69bb      	ldr	r3, [r7, #24]
 811aaa2:	3314      	adds	r3, #20
 811aaa4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 811aaa6:	8bfb      	ldrh	r3, [r7, #30]
 811aaa8:	009b      	lsls	r3, r3, #2
 811aaaa:	461a      	mov	r2, r3
 811aaac:	79fb      	ldrb	r3, [r7, #7]
 811aaae:	009b      	lsls	r3, r3, #2
 811aab0:	f003 0304 	and.w	r3, r3, #4
 811aab4:	4413      	add	r3, r2
 811aab6:	3314      	adds	r3, #20
 811aab8:	69ba      	ldr	r2, [r7, #24]
 811aaba:	4413      	add	r3, r2
 811aabc:	697a      	ldr	r2, [r7, #20]
 811aabe:	429a      	cmp	r2, r3
 811aac0:	d006      	beq.n	811aad0 <tcp_output_fill_options+0x64>
 811aac2:	4b05      	ldr	r3, [pc, #20]	@ (811aad8 <tcp_output_fill_options+0x6c>)
 811aac4:	f240 7275 	movw	r2, #1909	@ 0x775
 811aac8:	4906      	ldr	r1, [pc, #24]	@ (811aae4 <tcp_output_fill_options+0x78>)
 811aaca:	4805      	ldr	r0, [pc, #20]	@ (811aae0 <tcp_output_fill_options+0x74>)
 811aacc:	f001 f9be 	bl	811be4c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 811aad0:	bf00      	nop
 811aad2:	3720      	adds	r7, #32
 811aad4:	46bd      	mov	sp, r7
 811aad6:	bd80      	pop	{r7, pc}
 811aad8:	0811ed48 	.word	0x0811ed48
 811aadc:	0811f4b8 	.word	0x0811f4b8
 811aae0:	0811eddc 	.word	0x0811eddc
 811aae4:	0811f3b0 	.word	0x0811f3b0

0811aae8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 811aae8:	b580      	push	{r7, lr}
 811aaea:	b08a      	sub	sp, #40	@ 0x28
 811aaec:	af04      	add	r7, sp, #16
 811aaee:	60f8      	str	r0, [r7, #12]
 811aaf0:	60b9      	str	r1, [r7, #8]
 811aaf2:	607a      	str	r2, [r7, #4]
 811aaf4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 811aaf6:	68bb      	ldr	r3, [r7, #8]
 811aaf8:	2b00      	cmp	r3, #0
 811aafa:	d106      	bne.n	811ab0a <tcp_output_control_segment+0x22>
 811aafc:	4b1c      	ldr	r3, [pc, #112]	@ (811ab70 <tcp_output_control_segment+0x88>)
 811aafe:	f240 7287 	movw	r2, #1927	@ 0x787
 811ab02:	491c      	ldr	r1, [pc, #112]	@ (811ab74 <tcp_output_control_segment+0x8c>)
 811ab04:	481c      	ldr	r0, [pc, #112]	@ (811ab78 <tcp_output_control_segment+0x90>)
 811ab06:	f001 f9a1 	bl	811be4c <iprintf>

  netif = tcp_route(pcb, src, dst);
 811ab0a:	683a      	ldr	r2, [r7, #0]
 811ab0c:	6879      	ldr	r1, [r7, #4]
 811ab0e:	68f8      	ldr	r0, [r7, #12]
 811ab10:	f7fe faea 	bl	81190e8 <tcp_route>
 811ab14:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 811ab16:	693b      	ldr	r3, [r7, #16]
 811ab18:	2b00      	cmp	r3, #0
 811ab1a:	d102      	bne.n	811ab22 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 811ab1c:	23fc      	movs	r3, #252	@ 0xfc
 811ab1e:	75fb      	strb	r3, [r7, #23]
 811ab20:	e01c      	b.n	811ab5c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 811ab22:	68fb      	ldr	r3, [r7, #12]
 811ab24:	2b00      	cmp	r3, #0
 811ab26:	d006      	beq.n	811ab36 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 811ab28:	68fb      	ldr	r3, [r7, #12]
 811ab2a:	7adb      	ldrb	r3, [r3, #11]
 811ab2c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 811ab2e:	68fb      	ldr	r3, [r7, #12]
 811ab30:	7a9b      	ldrb	r3, [r3, #10]
 811ab32:	757b      	strb	r3, [r7, #21]
 811ab34:	e003      	b.n	811ab3e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 811ab36:	23ff      	movs	r3, #255	@ 0xff
 811ab38:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 811ab3a:	2300      	movs	r3, #0
 811ab3c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 811ab3e:	7dba      	ldrb	r2, [r7, #22]
 811ab40:	693b      	ldr	r3, [r7, #16]
 811ab42:	9302      	str	r3, [sp, #8]
 811ab44:	2306      	movs	r3, #6
 811ab46:	9301      	str	r3, [sp, #4]
 811ab48:	7d7b      	ldrb	r3, [r7, #21]
 811ab4a:	9300      	str	r3, [sp, #0]
 811ab4c:	4613      	mov	r3, r2
 811ab4e:	683a      	ldr	r2, [r7, #0]
 811ab50:	6879      	ldr	r1, [r7, #4]
 811ab52:	68b8      	ldr	r0, [r7, #8]
 811ab54:	f7f7 fbc8 	bl	81122e8 <ip4_output_if>
 811ab58:	4603      	mov	r3, r0
 811ab5a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 811ab5c:	68b8      	ldr	r0, [r7, #8]
 811ab5e:	f7f9 feb3 	bl	81148c8 <pbuf_free>
  return err;
 811ab62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 811ab66:	4618      	mov	r0, r3
 811ab68:	3718      	adds	r7, #24
 811ab6a:	46bd      	mov	sp, r7
 811ab6c:	bd80      	pop	{r7, pc}
 811ab6e:	bf00      	nop
 811ab70:	0811ed48 	.word	0x0811ed48
 811ab74:	0811f4e0 	.word	0x0811f4e0
 811ab78:	0811eddc 	.word	0x0811eddc

0811ab7c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 811ab7c:	b590      	push	{r4, r7, lr}
 811ab7e:	b08b      	sub	sp, #44	@ 0x2c
 811ab80:	af04      	add	r7, sp, #16
 811ab82:	60f8      	str	r0, [r7, #12]
 811ab84:	60b9      	str	r1, [r7, #8]
 811ab86:	607a      	str	r2, [r7, #4]
 811ab88:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 811ab8a:	683b      	ldr	r3, [r7, #0]
 811ab8c:	2b00      	cmp	r3, #0
 811ab8e:	d106      	bne.n	811ab9e <tcp_rst+0x22>
 811ab90:	4b1f      	ldr	r3, [pc, #124]	@ (811ac10 <tcp_rst+0x94>)
 811ab92:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 811ab96:	491f      	ldr	r1, [pc, #124]	@ (811ac14 <tcp_rst+0x98>)
 811ab98:	481f      	ldr	r0, [pc, #124]	@ (811ac18 <tcp_rst+0x9c>)
 811ab9a:	f001 f957 	bl	811be4c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 811ab9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811aba0:	2b00      	cmp	r3, #0
 811aba2:	d106      	bne.n	811abb2 <tcp_rst+0x36>
 811aba4:	4b1a      	ldr	r3, [pc, #104]	@ (811ac10 <tcp_rst+0x94>)
 811aba6:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 811abaa:	491c      	ldr	r1, [pc, #112]	@ (811ac1c <tcp_rst+0xa0>)
 811abac:	481a      	ldr	r0, [pc, #104]	@ (811ac18 <tcp_rst+0x9c>)
 811abae:	f001 f94d 	bl	811be4c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 811abb2:	2300      	movs	r3, #0
 811abb4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 811abb6:	f24d 0316 	movw	r3, #53270	@ 0xd016
 811abba:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 811abbc:	7dfb      	ldrb	r3, [r7, #23]
 811abbe:	b29c      	uxth	r4, r3
 811abc0:	68b8      	ldr	r0, [r7, #8]
 811abc2:	f7f5 ff10 	bl	81109e6 <lwip_htonl>
 811abc6:	4602      	mov	r2, r0
 811abc8:	8abb      	ldrh	r3, [r7, #20]
 811abca:	9303      	str	r3, [sp, #12]
 811abcc:	2314      	movs	r3, #20
 811abce:	9302      	str	r3, [sp, #8]
 811abd0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 811abd2:	9301      	str	r3, [sp, #4]
 811abd4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 811abd6:	9300      	str	r3, [sp, #0]
 811abd8:	4613      	mov	r3, r2
 811abda:	2200      	movs	r2, #0
 811abdc:	4621      	mov	r1, r4
 811abde:	6878      	ldr	r0, [r7, #4]
 811abe0:	f7ff fe94 	bl	811a90c <tcp_output_alloc_header_common>
 811abe4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 811abe6:	693b      	ldr	r3, [r7, #16]
 811abe8:	2b00      	cmp	r3, #0
 811abea:	d00c      	beq.n	811ac06 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 811abec:	7dfb      	ldrb	r3, [r7, #23]
 811abee:	2200      	movs	r2, #0
 811abf0:	6939      	ldr	r1, [r7, #16]
 811abf2:	68f8      	ldr	r0, [r7, #12]
 811abf4:	f7ff ff3a 	bl	811aa6c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 811abf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 811abfa:	683a      	ldr	r2, [r7, #0]
 811abfc:	6939      	ldr	r1, [r7, #16]
 811abfe:	68f8      	ldr	r0, [r7, #12]
 811ac00:	f7ff ff72 	bl	811aae8 <tcp_output_control_segment>
 811ac04:	e000      	b.n	811ac08 <tcp_rst+0x8c>
    return;
 811ac06:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 811ac08:	371c      	adds	r7, #28
 811ac0a:	46bd      	mov	sp, r7
 811ac0c:	bd90      	pop	{r4, r7, pc}
 811ac0e:	bf00      	nop
 811ac10:	0811ed48 	.word	0x0811ed48
 811ac14:	0811f50c 	.word	0x0811f50c
 811ac18:	0811eddc 	.word	0x0811eddc
 811ac1c:	0811f528 	.word	0x0811f528

0811ac20 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 811ac20:	b590      	push	{r4, r7, lr}
 811ac22:	b087      	sub	sp, #28
 811ac24:	af00      	add	r7, sp, #0
 811ac26:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 811ac28:	2300      	movs	r3, #0
 811ac2a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 811ac2c:	2300      	movs	r3, #0
 811ac2e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 811ac30:	687b      	ldr	r3, [r7, #4]
 811ac32:	2b00      	cmp	r3, #0
 811ac34:	d106      	bne.n	811ac44 <tcp_send_empty_ack+0x24>
 811ac36:	4b28      	ldr	r3, [pc, #160]	@ (811acd8 <tcp_send_empty_ack+0xb8>)
 811ac38:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 811ac3c:	4927      	ldr	r1, [pc, #156]	@ (811acdc <tcp_send_empty_ack+0xbc>)
 811ac3e:	4828      	ldr	r0, [pc, #160]	@ (811ace0 <tcp_send_empty_ack+0xc0>)
 811ac40:	f001 f904 	bl	811be4c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 811ac44:	7dfb      	ldrb	r3, [r7, #23]
 811ac46:	009b      	lsls	r3, r3, #2
 811ac48:	b2db      	uxtb	r3, r3
 811ac4a:	f003 0304 	and.w	r3, r3, #4
 811ac4e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 811ac50:	7d7b      	ldrb	r3, [r7, #21]
 811ac52:	b29c      	uxth	r4, r3
 811ac54:	687b      	ldr	r3, [r7, #4]
 811ac56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 811ac58:	4618      	mov	r0, r3
 811ac5a:	f7f5 fec4 	bl	81109e6 <lwip_htonl>
 811ac5e:	4603      	mov	r3, r0
 811ac60:	2200      	movs	r2, #0
 811ac62:	4621      	mov	r1, r4
 811ac64:	6878      	ldr	r0, [r7, #4]
 811ac66:	f7ff fec3 	bl	811a9f0 <tcp_output_alloc_header>
 811ac6a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 811ac6c:	693b      	ldr	r3, [r7, #16]
 811ac6e:	2b00      	cmp	r3, #0
 811ac70:	d109      	bne.n	811ac86 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 811ac72:	687b      	ldr	r3, [r7, #4]
 811ac74:	8b5b      	ldrh	r3, [r3, #26]
 811ac76:	f043 0303 	orr.w	r3, r3, #3
 811ac7a:	b29a      	uxth	r2, r3
 811ac7c:	687b      	ldr	r3, [r7, #4]
 811ac7e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 811ac80:	f06f 0301 	mvn.w	r3, #1
 811ac84:	e023      	b.n	811acce <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 811ac86:	7dbb      	ldrb	r3, [r7, #22]
 811ac88:	7dfa      	ldrb	r2, [r7, #23]
 811ac8a:	6939      	ldr	r1, [r7, #16]
 811ac8c:	6878      	ldr	r0, [r7, #4]
 811ac8e:	f7ff feed 	bl	811aa6c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 811ac92:	687a      	ldr	r2, [r7, #4]
 811ac94:	687b      	ldr	r3, [r7, #4]
 811ac96:	3304      	adds	r3, #4
 811ac98:	6939      	ldr	r1, [r7, #16]
 811ac9a:	6878      	ldr	r0, [r7, #4]
 811ac9c:	f7ff ff24 	bl	811aae8 <tcp_output_control_segment>
 811aca0:	4603      	mov	r3, r0
 811aca2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 811aca4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 811aca8:	2b00      	cmp	r3, #0
 811acaa:	d007      	beq.n	811acbc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 811acac:	687b      	ldr	r3, [r7, #4]
 811acae:	8b5b      	ldrh	r3, [r3, #26]
 811acb0:	f043 0303 	orr.w	r3, r3, #3
 811acb4:	b29a      	uxth	r2, r3
 811acb6:	687b      	ldr	r3, [r7, #4]
 811acb8:	835a      	strh	r2, [r3, #26]
 811acba:	e006      	b.n	811acca <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 811acbc:	687b      	ldr	r3, [r7, #4]
 811acbe:	8b5b      	ldrh	r3, [r3, #26]
 811acc0:	f023 0303 	bic.w	r3, r3, #3
 811acc4:	b29a      	uxth	r2, r3
 811acc6:	687b      	ldr	r3, [r7, #4]
 811acc8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 811acca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 811acce:	4618      	mov	r0, r3
 811acd0:	371c      	adds	r7, #28
 811acd2:	46bd      	mov	sp, r7
 811acd4:	bd90      	pop	{r4, r7, pc}
 811acd6:	bf00      	nop
 811acd8:	0811ed48 	.word	0x0811ed48
 811acdc:	0811f544 	.word	0x0811f544
 811ace0:	0811eddc 	.word	0x0811eddc

0811ace4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 811ace4:	b590      	push	{r4, r7, lr}
 811ace6:	b087      	sub	sp, #28
 811ace8:	af00      	add	r7, sp, #0
 811acea:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 811acec:	2300      	movs	r3, #0
 811acee:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 811acf0:	687b      	ldr	r3, [r7, #4]
 811acf2:	2b00      	cmp	r3, #0
 811acf4:	d106      	bne.n	811ad04 <tcp_keepalive+0x20>
 811acf6:	4b18      	ldr	r3, [pc, #96]	@ (811ad58 <tcp_keepalive+0x74>)
 811acf8:	f640 0224 	movw	r2, #2084	@ 0x824
 811acfc:	4917      	ldr	r1, [pc, #92]	@ (811ad5c <tcp_keepalive+0x78>)
 811acfe:	4818      	ldr	r0, [pc, #96]	@ (811ad60 <tcp_keepalive+0x7c>)
 811ad00:	f001 f8a4 	bl	811be4c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 811ad04:	7dfb      	ldrb	r3, [r7, #23]
 811ad06:	b29c      	uxth	r4, r3
 811ad08:	687b      	ldr	r3, [r7, #4]
 811ad0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 811ad0c:	3b01      	subs	r3, #1
 811ad0e:	4618      	mov	r0, r3
 811ad10:	f7f5 fe69 	bl	81109e6 <lwip_htonl>
 811ad14:	4603      	mov	r3, r0
 811ad16:	2200      	movs	r2, #0
 811ad18:	4621      	mov	r1, r4
 811ad1a:	6878      	ldr	r0, [r7, #4]
 811ad1c:	f7ff fe68 	bl	811a9f0 <tcp_output_alloc_header>
 811ad20:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 811ad22:	693b      	ldr	r3, [r7, #16]
 811ad24:	2b00      	cmp	r3, #0
 811ad26:	d102      	bne.n	811ad2e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 811ad28:	f04f 33ff 	mov.w	r3, #4294967295
 811ad2c:	e010      	b.n	811ad50 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 811ad2e:	7dfb      	ldrb	r3, [r7, #23]
 811ad30:	2200      	movs	r2, #0
 811ad32:	6939      	ldr	r1, [r7, #16]
 811ad34:	6878      	ldr	r0, [r7, #4]
 811ad36:	f7ff fe99 	bl	811aa6c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 811ad3a:	687a      	ldr	r2, [r7, #4]
 811ad3c:	687b      	ldr	r3, [r7, #4]
 811ad3e:	3304      	adds	r3, #4
 811ad40:	6939      	ldr	r1, [r7, #16]
 811ad42:	6878      	ldr	r0, [r7, #4]
 811ad44:	f7ff fed0 	bl	811aae8 <tcp_output_control_segment>
 811ad48:	4603      	mov	r3, r0
 811ad4a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 811ad4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 811ad50:	4618      	mov	r0, r3
 811ad52:	371c      	adds	r7, #28
 811ad54:	46bd      	mov	sp, r7
 811ad56:	bd90      	pop	{r4, r7, pc}
 811ad58:	0811ed48 	.word	0x0811ed48
 811ad5c:	0811f564 	.word	0x0811f564
 811ad60:	0811eddc 	.word	0x0811eddc

0811ad64 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 811ad64:	b590      	push	{r4, r7, lr}
 811ad66:	b08b      	sub	sp, #44	@ 0x2c
 811ad68:	af00      	add	r7, sp, #0
 811ad6a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 811ad6c:	2300      	movs	r3, #0
 811ad6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 811ad72:	687b      	ldr	r3, [r7, #4]
 811ad74:	2b00      	cmp	r3, #0
 811ad76:	d106      	bne.n	811ad86 <tcp_zero_window_probe+0x22>
 811ad78:	4b4c      	ldr	r3, [pc, #304]	@ (811aeac <tcp_zero_window_probe+0x148>)
 811ad7a:	f640 024f 	movw	r2, #2127	@ 0x84f
 811ad7e:	494c      	ldr	r1, [pc, #304]	@ (811aeb0 <tcp_zero_window_probe+0x14c>)
 811ad80:	484c      	ldr	r0, [pc, #304]	@ (811aeb4 <tcp_zero_window_probe+0x150>)
 811ad82:	f001 f863 	bl	811be4c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 811ad86:	687b      	ldr	r3, [r7, #4]
 811ad88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 811ad8a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 811ad8c:	6a3b      	ldr	r3, [r7, #32]
 811ad8e:	2b00      	cmp	r3, #0
 811ad90:	d101      	bne.n	811ad96 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 811ad92:	2300      	movs	r3, #0
 811ad94:	e086      	b.n	811aea4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 811ad96:	687b      	ldr	r3, [r7, #4]
 811ad98:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 811ad9c:	2bff      	cmp	r3, #255	@ 0xff
 811ad9e:	d007      	beq.n	811adb0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 811ada0:	687b      	ldr	r3, [r7, #4]
 811ada2:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 811ada6:	3301      	adds	r3, #1
 811ada8:	b2da      	uxtb	r2, r3
 811adaa:	687b      	ldr	r3, [r7, #4]
 811adac:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 811adb0:	6a3b      	ldr	r3, [r7, #32]
 811adb2:	68db      	ldr	r3, [r3, #12]
 811adb4:	899b      	ldrh	r3, [r3, #12]
 811adb6:	b29b      	uxth	r3, r3
 811adb8:	4618      	mov	r0, r3
 811adba:	f7f5 fdff 	bl	81109bc <lwip_htons>
 811adbe:	4603      	mov	r3, r0
 811adc0:	b2db      	uxtb	r3, r3
 811adc2:	f003 0301 	and.w	r3, r3, #1
 811adc6:	2b00      	cmp	r3, #0
 811adc8:	d005      	beq.n	811add6 <tcp_zero_window_probe+0x72>
 811adca:	6a3b      	ldr	r3, [r7, #32]
 811adcc:	891b      	ldrh	r3, [r3, #8]
 811adce:	2b00      	cmp	r3, #0
 811add0:	d101      	bne.n	811add6 <tcp_zero_window_probe+0x72>
 811add2:	2301      	movs	r3, #1
 811add4:	e000      	b.n	811add8 <tcp_zero_window_probe+0x74>
 811add6:	2300      	movs	r3, #0
 811add8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 811adda:	7ffb      	ldrb	r3, [r7, #31]
 811addc:	2b00      	cmp	r3, #0
 811adde:	bf0c      	ite	eq
 811ade0:	2301      	moveq	r3, #1
 811ade2:	2300      	movne	r3, #0
 811ade4:	b2db      	uxtb	r3, r3
 811ade6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 811ade8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811adec:	b299      	uxth	r1, r3
 811adee:	6a3b      	ldr	r3, [r7, #32]
 811adf0:	68db      	ldr	r3, [r3, #12]
 811adf2:	685b      	ldr	r3, [r3, #4]
 811adf4:	8bba      	ldrh	r2, [r7, #28]
 811adf6:	6878      	ldr	r0, [r7, #4]
 811adf8:	f7ff fdfa 	bl	811a9f0 <tcp_output_alloc_header>
 811adfc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 811adfe:	69bb      	ldr	r3, [r7, #24]
 811ae00:	2b00      	cmp	r3, #0
 811ae02:	d102      	bne.n	811ae0a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 811ae04:	f04f 33ff 	mov.w	r3, #4294967295
 811ae08:	e04c      	b.n	811aea4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 811ae0a:	69bb      	ldr	r3, [r7, #24]
 811ae0c:	685b      	ldr	r3, [r3, #4]
 811ae0e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 811ae10:	7ffb      	ldrb	r3, [r7, #31]
 811ae12:	2b00      	cmp	r3, #0
 811ae14:	d011      	beq.n	811ae3a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 811ae16:	697b      	ldr	r3, [r7, #20]
 811ae18:	899b      	ldrh	r3, [r3, #12]
 811ae1a:	b29b      	uxth	r3, r3
 811ae1c:	b21b      	sxth	r3, r3
 811ae1e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 811ae22:	b21c      	sxth	r4, r3
 811ae24:	2011      	movs	r0, #17
 811ae26:	f7f5 fdc9 	bl	81109bc <lwip_htons>
 811ae2a:	4603      	mov	r3, r0
 811ae2c:	b21b      	sxth	r3, r3
 811ae2e:	4323      	orrs	r3, r4
 811ae30:	b21b      	sxth	r3, r3
 811ae32:	b29a      	uxth	r2, r3
 811ae34:	697b      	ldr	r3, [r7, #20]
 811ae36:	819a      	strh	r2, [r3, #12]
 811ae38:	e010      	b.n	811ae5c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 811ae3a:	69bb      	ldr	r3, [r7, #24]
 811ae3c:	685b      	ldr	r3, [r3, #4]
 811ae3e:	3314      	adds	r3, #20
 811ae40:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 811ae42:	6a3b      	ldr	r3, [r7, #32]
 811ae44:	6858      	ldr	r0, [r3, #4]
 811ae46:	6a3b      	ldr	r3, [r7, #32]
 811ae48:	685b      	ldr	r3, [r3, #4]
 811ae4a:	891a      	ldrh	r2, [r3, #8]
 811ae4c:	6a3b      	ldr	r3, [r7, #32]
 811ae4e:	891b      	ldrh	r3, [r3, #8]
 811ae50:	1ad3      	subs	r3, r2, r3
 811ae52:	b29b      	uxth	r3, r3
 811ae54:	2201      	movs	r2, #1
 811ae56:	6939      	ldr	r1, [r7, #16]
 811ae58:	f7f9 ff2c 	bl	8114cb4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 811ae5c:	6a3b      	ldr	r3, [r7, #32]
 811ae5e:	68db      	ldr	r3, [r3, #12]
 811ae60:	685b      	ldr	r3, [r3, #4]
 811ae62:	4618      	mov	r0, r3
 811ae64:	f7f5 fdbf 	bl	81109e6 <lwip_htonl>
 811ae68:	4603      	mov	r3, r0
 811ae6a:	3301      	adds	r3, #1
 811ae6c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 811ae6e:	687b      	ldr	r3, [r7, #4]
 811ae70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 811ae72:	68fb      	ldr	r3, [r7, #12]
 811ae74:	1ad3      	subs	r3, r2, r3
 811ae76:	2b00      	cmp	r3, #0
 811ae78:	da02      	bge.n	811ae80 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 811ae7a:	687b      	ldr	r3, [r7, #4]
 811ae7c:	68fa      	ldr	r2, [r7, #12]
 811ae7e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 811ae80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 811ae84:	2200      	movs	r2, #0
 811ae86:	69b9      	ldr	r1, [r7, #24]
 811ae88:	6878      	ldr	r0, [r7, #4]
 811ae8a:	f7ff fdef 	bl	811aa6c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 811ae8e:	687a      	ldr	r2, [r7, #4]
 811ae90:	687b      	ldr	r3, [r7, #4]
 811ae92:	3304      	adds	r3, #4
 811ae94:	69b9      	ldr	r1, [r7, #24]
 811ae96:	6878      	ldr	r0, [r7, #4]
 811ae98:	f7ff fe26 	bl	811aae8 <tcp_output_control_segment>
 811ae9c:	4603      	mov	r3, r0
 811ae9e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 811aea0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 811aea4:	4618      	mov	r0, r3
 811aea6:	372c      	adds	r7, #44	@ 0x2c
 811aea8:	46bd      	mov	sp, r7
 811aeaa:	bd90      	pop	{r4, r7, pc}
 811aeac:	0811ed48 	.word	0x0811ed48
 811aeb0:	0811f580 	.word	0x0811f580
 811aeb4:	0811eddc 	.word	0x0811eddc

0811aeb8 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 811aeb8:	b580      	push	{r7, lr}
 811aeba:	b084      	sub	sp, #16
 811aebc:	af00      	add	r7, sp, #0
 811aebe:	6078      	str	r0, [r7, #4]
 811aec0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 811aec2:	f000 fb01 	bl	811b4c8 <sys_timeouts_sleeptime>
 811aec6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 811aec8:	68fb      	ldr	r3, [r7, #12]
 811aeca:	f1b3 3fff 	cmp.w	r3, #4294967295
 811aece:	d10b      	bne.n	811aee8 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 811aed0:	4813      	ldr	r0, [pc, #76]	@ (811af20 <tcpip_timeouts_mbox_fetch+0x68>)
 811aed2:	f7fa f83a 	bl	8114f4a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 811aed6:	2200      	movs	r2, #0
 811aed8:	6839      	ldr	r1, [r7, #0]
 811aeda:	6878      	ldr	r0, [r7, #4]
 811aedc:	f7f9 ffc2 	bl	8114e64 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 811aee0:	480f      	ldr	r0, [pc, #60]	@ (811af20 <tcpip_timeouts_mbox_fetch+0x68>)
 811aee2:	f7fa f823 	bl	8114f2c <sys_mutex_lock>
    return;
 811aee6:	e018      	b.n	811af1a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 811aee8:	68fb      	ldr	r3, [r7, #12]
 811aeea:	2b00      	cmp	r3, #0
 811aeec:	d102      	bne.n	811aef4 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 811aeee:	f000 fab1 	bl	811b454 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 811aef2:	e7e6      	b.n	811aec2 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 811aef4:	480a      	ldr	r0, [pc, #40]	@ (811af20 <tcpip_timeouts_mbox_fetch+0x68>)
 811aef6:	f7fa f828 	bl	8114f4a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 811aefa:	68fa      	ldr	r2, [r7, #12]
 811aefc:	6839      	ldr	r1, [r7, #0]
 811aefe:	6878      	ldr	r0, [r7, #4]
 811af00:	f7f9 ffb0 	bl	8114e64 <sys_arch_mbox_fetch>
 811af04:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 811af06:	4806      	ldr	r0, [pc, #24]	@ (811af20 <tcpip_timeouts_mbox_fetch+0x68>)
 811af08:	f7fa f810 	bl	8114f2c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 811af0c:	68bb      	ldr	r3, [r7, #8]
 811af0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 811af12:	d102      	bne.n	811af1a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 811af14:	f000 fa9e 	bl	811b454 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 811af18:	e7d3      	b.n	811aec2 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 811af1a:	3710      	adds	r7, #16
 811af1c:	46bd      	mov	sp, r7
 811af1e:	bd80      	pop	{r7, pc}
 811af20:	10011d70 	.word	0x10011d70

0811af24 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 811af24:	b580      	push	{r7, lr}
 811af26:	b084      	sub	sp, #16
 811af28:	af00      	add	r7, sp, #0
 811af2a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 811af2c:	4810      	ldr	r0, [pc, #64]	@ (811af70 <tcpip_thread+0x4c>)
 811af2e:	f7f9 fffd 	bl	8114f2c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 811af32:	4b10      	ldr	r3, [pc, #64]	@ (811af74 <tcpip_thread+0x50>)
 811af34:	681b      	ldr	r3, [r3, #0]
 811af36:	2b00      	cmp	r3, #0
 811af38:	d005      	beq.n	811af46 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 811af3a:	4b0e      	ldr	r3, [pc, #56]	@ (811af74 <tcpip_thread+0x50>)
 811af3c:	681b      	ldr	r3, [r3, #0]
 811af3e:	4a0e      	ldr	r2, [pc, #56]	@ (811af78 <tcpip_thread+0x54>)
 811af40:	6812      	ldr	r2, [r2, #0]
 811af42:	4610      	mov	r0, r2
 811af44:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 811af46:	f107 030c 	add.w	r3, r7, #12
 811af4a:	4619      	mov	r1, r3
 811af4c:	480b      	ldr	r0, [pc, #44]	@ (811af7c <tcpip_thread+0x58>)
 811af4e:	f7ff ffb3 	bl	811aeb8 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 811af52:	68fb      	ldr	r3, [r7, #12]
 811af54:	2b00      	cmp	r3, #0
 811af56:	d106      	bne.n	811af66 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 811af58:	4b09      	ldr	r3, [pc, #36]	@ (811af80 <tcpip_thread+0x5c>)
 811af5a:	2291      	movs	r2, #145	@ 0x91
 811af5c:	4909      	ldr	r1, [pc, #36]	@ (811af84 <tcpip_thread+0x60>)
 811af5e:	480a      	ldr	r0, [pc, #40]	@ (811af88 <tcpip_thread+0x64>)
 811af60:	f000 ff74 	bl	811be4c <iprintf>
      continue;
 811af64:	e003      	b.n	811af6e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 811af66:	68fb      	ldr	r3, [r7, #12]
 811af68:	4618      	mov	r0, r3
 811af6a:	f000 f80f 	bl	811af8c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 811af6e:	e7ea      	b.n	811af46 <tcpip_thread+0x22>
 811af70:	10011d70 	.word	0x10011d70
 811af74:	10011d64 	.word	0x10011d64
 811af78:	10011d68 	.word	0x10011d68
 811af7c:	10011d6c 	.word	0x10011d6c
 811af80:	0811f5a4 	.word	0x0811f5a4
 811af84:	0811f614 	.word	0x0811f614
 811af88:	0811f634 	.word	0x0811f634

0811af8c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 811af8c:	b580      	push	{r7, lr}
 811af8e:	b082      	sub	sp, #8
 811af90:	af00      	add	r7, sp, #0
 811af92:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 811af94:	687b      	ldr	r3, [r7, #4]
 811af96:	781b      	ldrb	r3, [r3, #0]
 811af98:	2b02      	cmp	r3, #2
 811af9a:	d026      	beq.n	811afea <tcpip_thread_handle_msg+0x5e>
 811af9c:	2b02      	cmp	r3, #2
 811af9e:	dc2b      	bgt.n	811aff8 <tcpip_thread_handle_msg+0x6c>
 811afa0:	2b00      	cmp	r3, #0
 811afa2:	d002      	beq.n	811afaa <tcpip_thread_handle_msg+0x1e>
 811afa4:	2b01      	cmp	r3, #1
 811afa6:	d015      	beq.n	811afd4 <tcpip_thread_handle_msg+0x48>
 811afa8:	e026      	b.n	811aff8 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 811afaa:	687b      	ldr	r3, [r7, #4]
 811afac:	68db      	ldr	r3, [r3, #12]
 811afae:	687a      	ldr	r2, [r7, #4]
 811afb0:	6850      	ldr	r0, [r2, #4]
 811afb2:	687a      	ldr	r2, [r7, #4]
 811afb4:	6892      	ldr	r2, [r2, #8]
 811afb6:	4611      	mov	r1, r2
 811afb8:	4798      	blx	r3
 811afba:	4603      	mov	r3, r0
 811afbc:	2b00      	cmp	r3, #0
 811afbe:	d004      	beq.n	811afca <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 811afc0:	687b      	ldr	r3, [r7, #4]
 811afc2:	685b      	ldr	r3, [r3, #4]
 811afc4:	4618      	mov	r0, r3
 811afc6:	f7f9 fc7f 	bl	81148c8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 811afca:	6879      	ldr	r1, [r7, #4]
 811afcc:	2009      	movs	r0, #9
 811afce:	f7f8 fdd7 	bl	8113b80 <memp_free>
      break;
 811afd2:	e018      	b.n	811b006 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 811afd4:	687b      	ldr	r3, [r7, #4]
 811afd6:	685b      	ldr	r3, [r3, #4]
 811afd8:	687a      	ldr	r2, [r7, #4]
 811afda:	6892      	ldr	r2, [r2, #8]
 811afdc:	4610      	mov	r0, r2
 811afde:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 811afe0:	6879      	ldr	r1, [r7, #4]
 811afe2:	2008      	movs	r0, #8
 811afe4:	f7f8 fdcc 	bl	8113b80 <memp_free>
      break;
 811afe8:	e00d      	b.n	811b006 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 811afea:	687b      	ldr	r3, [r7, #4]
 811afec:	685b      	ldr	r3, [r3, #4]
 811afee:	687a      	ldr	r2, [r7, #4]
 811aff0:	6892      	ldr	r2, [r2, #8]
 811aff2:	4610      	mov	r0, r2
 811aff4:	4798      	blx	r3
      break;
 811aff6:	e006      	b.n	811b006 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 811aff8:	4b05      	ldr	r3, [pc, #20]	@ (811b010 <tcpip_thread_handle_msg+0x84>)
 811affa:	22cf      	movs	r2, #207	@ 0xcf
 811affc:	4905      	ldr	r1, [pc, #20]	@ (811b014 <tcpip_thread_handle_msg+0x88>)
 811affe:	4806      	ldr	r0, [pc, #24]	@ (811b018 <tcpip_thread_handle_msg+0x8c>)
 811b000:	f000 ff24 	bl	811be4c <iprintf>
      break;
 811b004:	bf00      	nop
  }
}
 811b006:	bf00      	nop
 811b008:	3708      	adds	r7, #8
 811b00a:	46bd      	mov	sp, r7
 811b00c:	bd80      	pop	{r7, pc}
 811b00e:	bf00      	nop
 811b010:	0811f5a4 	.word	0x0811f5a4
 811b014:	0811f614 	.word	0x0811f614
 811b018:	0811f634 	.word	0x0811f634

0811b01c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 811b01c:	b580      	push	{r7, lr}
 811b01e:	b086      	sub	sp, #24
 811b020:	af00      	add	r7, sp, #0
 811b022:	60f8      	str	r0, [r7, #12]
 811b024:	60b9      	str	r1, [r7, #8]
 811b026:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 811b028:	481a      	ldr	r0, [pc, #104]	@ (811b094 <tcpip_inpkt+0x78>)
 811b02a:	f7f9 ff4c 	bl	8114ec6 <sys_mbox_valid>
 811b02e:	4603      	mov	r3, r0
 811b030:	2b00      	cmp	r3, #0
 811b032:	d105      	bne.n	811b040 <tcpip_inpkt+0x24>
 811b034:	4b18      	ldr	r3, [pc, #96]	@ (811b098 <tcpip_inpkt+0x7c>)
 811b036:	22fc      	movs	r2, #252	@ 0xfc
 811b038:	4918      	ldr	r1, [pc, #96]	@ (811b09c <tcpip_inpkt+0x80>)
 811b03a:	4819      	ldr	r0, [pc, #100]	@ (811b0a0 <tcpip_inpkt+0x84>)
 811b03c:	f000 ff06 	bl	811be4c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 811b040:	2009      	movs	r0, #9
 811b042:	f7f8 fd27 	bl	8113a94 <memp_malloc>
 811b046:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 811b048:	697b      	ldr	r3, [r7, #20]
 811b04a:	2b00      	cmp	r3, #0
 811b04c:	d102      	bne.n	811b054 <tcpip_inpkt+0x38>
    return ERR_MEM;
 811b04e:	f04f 33ff 	mov.w	r3, #4294967295
 811b052:	e01a      	b.n	811b08a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 811b054:	697b      	ldr	r3, [r7, #20]
 811b056:	2200      	movs	r2, #0
 811b058:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 811b05a:	697b      	ldr	r3, [r7, #20]
 811b05c:	68fa      	ldr	r2, [r7, #12]
 811b05e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 811b060:	697b      	ldr	r3, [r7, #20]
 811b062:	68ba      	ldr	r2, [r7, #8]
 811b064:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 811b066:	697b      	ldr	r3, [r7, #20]
 811b068:	687a      	ldr	r2, [r7, #4]
 811b06a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 811b06c:	6979      	ldr	r1, [r7, #20]
 811b06e:	4809      	ldr	r0, [pc, #36]	@ (811b094 <tcpip_inpkt+0x78>)
 811b070:	f7f9 fede 	bl	8114e30 <sys_mbox_trypost>
 811b074:	4603      	mov	r3, r0
 811b076:	2b00      	cmp	r3, #0
 811b078:	d006      	beq.n	811b088 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 811b07a:	6979      	ldr	r1, [r7, #20]
 811b07c:	2009      	movs	r0, #9
 811b07e:	f7f8 fd7f 	bl	8113b80 <memp_free>
    return ERR_MEM;
 811b082:	f04f 33ff 	mov.w	r3, #4294967295
 811b086:	e000      	b.n	811b08a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 811b088:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 811b08a:	4618      	mov	r0, r3
 811b08c:	3718      	adds	r7, #24
 811b08e:	46bd      	mov	sp, r7
 811b090:	bd80      	pop	{r7, pc}
 811b092:	bf00      	nop
 811b094:	10011d6c 	.word	0x10011d6c
 811b098:	0811f5a4 	.word	0x0811f5a4
 811b09c:	0811f65c 	.word	0x0811f65c
 811b0a0:	0811f634 	.word	0x0811f634

0811b0a4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 811b0a4:	b580      	push	{r7, lr}
 811b0a6:	b082      	sub	sp, #8
 811b0a8:	af00      	add	r7, sp, #0
 811b0aa:	6078      	str	r0, [r7, #4]
 811b0ac:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 811b0ae:	683b      	ldr	r3, [r7, #0]
 811b0b0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 811b0b4:	f003 0318 	and.w	r3, r3, #24
 811b0b8:	2b00      	cmp	r3, #0
 811b0ba:	d006      	beq.n	811b0ca <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 811b0bc:	4a08      	ldr	r2, [pc, #32]	@ (811b0e0 <tcpip_input+0x3c>)
 811b0be:	6839      	ldr	r1, [r7, #0]
 811b0c0:	6878      	ldr	r0, [r7, #4]
 811b0c2:	f7ff ffab 	bl	811b01c <tcpip_inpkt>
 811b0c6:	4603      	mov	r3, r0
 811b0c8:	e005      	b.n	811b0d6 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 811b0ca:	4a06      	ldr	r2, [pc, #24]	@ (811b0e4 <tcpip_input+0x40>)
 811b0cc:	6839      	ldr	r1, [r7, #0]
 811b0ce:	6878      	ldr	r0, [r7, #4]
 811b0d0:	f7ff ffa4 	bl	811b01c <tcpip_inpkt>
 811b0d4:	4603      	mov	r3, r0
}
 811b0d6:	4618      	mov	r0, r3
 811b0d8:	3708      	adds	r7, #8
 811b0da:	46bd      	mov	sp, r7
 811b0dc:	bd80      	pop	{r7, pc}
 811b0de:	bf00      	nop
 811b0e0:	081118b1 	.word	0x081118b1
 811b0e4:	081120a1 	.word	0x081120a1

0811b0e8 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 811b0e8:	b580      	push	{r7, lr}
 811b0ea:	b084      	sub	sp, #16
 811b0ec:	af00      	add	r7, sp, #0
 811b0ee:	6078      	str	r0, [r7, #4]
 811b0f0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 811b0f2:	4819      	ldr	r0, [pc, #100]	@ (811b158 <tcpip_try_callback+0x70>)
 811b0f4:	f7f9 fee7 	bl	8114ec6 <sys_mbox_valid>
 811b0f8:	4603      	mov	r3, r0
 811b0fa:	2b00      	cmp	r3, #0
 811b0fc:	d106      	bne.n	811b10c <tcpip_try_callback+0x24>
 811b0fe:	4b17      	ldr	r3, [pc, #92]	@ (811b15c <tcpip_try_callback+0x74>)
 811b100:	f240 125d 	movw	r2, #349	@ 0x15d
 811b104:	4916      	ldr	r1, [pc, #88]	@ (811b160 <tcpip_try_callback+0x78>)
 811b106:	4817      	ldr	r0, [pc, #92]	@ (811b164 <tcpip_try_callback+0x7c>)
 811b108:	f000 fea0 	bl	811be4c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 811b10c:	2008      	movs	r0, #8
 811b10e:	f7f8 fcc1 	bl	8113a94 <memp_malloc>
 811b112:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 811b114:	68fb      	ldr	r3, [r7, #12]
 811b116:	2b00      	cmp	r3, #0
 811b118:	d102      	bne.n	811b120 <tcpip_try_callback+0x38>
    return ERR_MEM;
 811b11a:	f04f 33ff 	mov.w	r3, #4294967295
 811b11e:	e017      	b.n	811b150 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 811b120:	68fb      	ldr	r3, [r7, #12]
 811b122:	2201      	movs	r2, #1
 811b124:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 811b126:	68fb      	ldr	r3, [r7, #12]
 811b128:	687a      	ldr	r2, [r7, #4]
 811b12a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 811b12c:	68fb      	ldr	r3, [r7, #12]
 811b12e:	683a      	ldr	r2, [r7, #0]
 811b130:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 811b132:	68f9      	ldr	r1, [r7, #12]
 811b134:	4808      	ldr	r0, [pc, #32]	@ (811b158 <tcpip_try_callback+0x70>)
 811b136:	f7f9 fe7b 	bl	8114e30 <sys_mbox_trypost>
 811b13a:	4603      	mov	r3, r0
 811b13c:	2b00      	cmp	r3, #0
 811b13e:	d006      	beq.n	811b14e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 811b140:	68f9      	ldr	r1, [r7, #12]
 811b142:	2008      	movs	r0, #8
 811b144:	f7f8 fd1c 	bl	8113b80 <memp_free>
    return ERR_MEM;
 811b148:	f04f 33ff 	mov.w	r3, #4294967295
 811b14c:	e000      	b.n	811b150 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 811b14e:	2300      	movs	r3, #0
}
 811b150:	4618      	mov	r0, r3
 811b152:	3710      	adds	r7, #16
 811b154:	46bd      	mov	sp, r7
 811b156:	bd80      	pop	{r7, pc}
 811b158:	10011d6c 	.word	0x10011d6c
 811b15c:	0811f5a4 	.word	0x0811f5a4
 811b160:	0811f65c 	.word	0x0811f65c
 811b164:	0811f634 	.word	0x0811f634

0811b168 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 811b168:	b580      	push	{r7, lr}
 811b16a:	b084      	sub	sp, #16
 811b16c:	af02      	add	r7, sp, #8
 811b16e:	6078      	str	r0, [r7, #4]
 811b170:	6039      	str	r1, [r7, #0]
  lwip_init();
 811b172:	f7f6 fee3 	bl	8111f3c <lwip_init>

  tcpip_init_done = initfunc;
 811b176:	4a17      	ldr	r2, [pc, #92]	@ (811b1d4 <tcpip_init+0x6c>)
 811b178:	687b      	ldr	r3, [r7, #4]
 811b17a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 811b17c:	4a16      	ldr	r2, [pc, #88]	@ (811b1d8 <tcpip_init+0x70>)
 811b17e:	683b      	ldr	r3, [r7, #0]
 811b180:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 811b182:	2106      	movs	r1, #6
 811b184:	4815      	ldr	r0, [pc, #84]	@ (811b1dc <tcpip_init+0x74>)
 811b186:	f7f9 fe39 	bl	8114dfc <sys_mbox_new>
 811b18a:	4603      	mov	r3, r0
 811b18c:	2b00      	cmp	r3, #0
 811b18e:	d006      	beq.n	811b19e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 811b190:	4b13      	ldr	r3, [pc, #76]	@ (811b1e0 <tcpip_init+0x78>)
 811b192:	f240 2261 	movw	r2, #609	@ 0x261
 811b196:	4913      	ldr	r1, [pc, #76]	@ (811b1e4 <tcpip_init+0x7c>)
 811b198:	4813      	ldr	r0, [pc, #76]	@ (811b1e8 <tcpip_init+0x80>)
 811b19a:	f000 fe57 	bl	811be4c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 811b19e:	4813      	ldr	r0, [pc, #76]	@ (811b1ec <tcpip_init+0x84>)
 811b1a0:	f7f9 feae 	bl	8114f00 <sys_mutex_new>
 811b1a4:	4603      	mov	r3, r0
 811b1a6:	2b00      	cmp	r3, #0
 811b1a8:	d006      	beq.n	811b1b8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 811b1aa:	4b0d      	ldr	r3, [pc, #52]	@ (811b1e0 <tcpip_init+0x78>)
 811b1ac:	f240 2265 	movw	r2, #613	@ 0x265
 811b1b0:	490f      	ldr	r1, [pc, #60]	@ (811b1f0 <tcpip_init+0x88>)
 811b1b2:	480d      	ldr	r0, [pc, #52]	@ (811b1e8 <tcpip_init+0x80>)
 811b1b4:	f000 fe4a 	bl	811be4c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 811b1b8:	2318      	movs	r3, #24
 811b1ba:	9300      	str	r3, [sp, #0]
 811b1bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 811b1c0:	2200      	movs	r2, #0
 811b1c2:	490c      	ldr	r1, [pc, #48]	@ (811b1f4 <tcpip_init+0x8c>)
 811b1c4:	480c      	ldr	r0, [pc, #48]	@ (811b1f8 <tcpip_init+0x90>)
 811b1c6:	f7f9 fecd 	bl	8114f64 <sys_thread_new>
}
 811b1ca:	bf00      	nop
 811b1cc:	3708      	adds	r7, #8
 811b1ce:	46bd      	mov	sp, r7
 811b1d0:	bd80      	pop	{r7, pc}
 811b1d2:	bf00      	nop
 811b1d4:	10011d64 	.word	0x10011d64
 811b1d8:	10011d68 	.word	0x10011d68
 811b1dc:	10011d6c 	.word	0x10011d6c
 811b1e0:	0811f5a4 	.word	0x0811f5a4
 811b1e4:	0811f66c 	.word	0x0811f66c
 811b1e8:	0811f634 	.word	0x0811f634
 811b1ec:	10011d70 	.word	0x10011d70
 811b1f0:	0811f690 	.word	0x0811f690
 811b1f4:	0811af25 	.word	0x0811af25
 811b1f8:	0811f6b4 	.word	0x0811f6b4

0811b1fc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 811b1fc:	b580      	push	{r7, lr}
 811b1fe:	b082      	sub	sp, #8
 811b200:	af00      	add	r7, sp, #0
 811b202:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 811b204:	f7f9 ff36 	bl	8115074 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 811b208:	4b0a      	ldr	r3, [pc, #40]	@ (811b234 <tcpip_tcp_timer+0x38>)
 811b20a:	681b      	ldr	r3, [r3, #0]
 811b20c:	2b00      	cmp	r3, #0
 811b20e:	d103      	bne.n	811b218 <tcpip_tcp_timer+0x1c>
 811b210:	4b09      	ldr	r3, [pc, #36]	@ (811b238 <tcpip_tcp_timer+0x3c>)
 811b212:	681b      	ldr	r3, [r3, #0]
 811b214:	2b00      	cmp	r3, #0
 811b216:	d005      	beq.n	811b224 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 811b218:	2200      	movs	r2, #0
 811b21a:	4908      	ldr	r1, [pc, #32]	@ (811b23c <tcpip_tcp_timer+0x40>)
 811b21c:	20fa      	movs	r0, #250	@ 0xfa
 811b21e:	f000 f8f3 	bl	811b408 <sys_timeout>
 811b222:	e003      	b.n	811b22c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 811b224:	4b06      	ldr	r3, [pc, #24]	@ (811b240 <tcpip_tcp_timer+0x44>)
 811b226:	2200      	movs	r2, #0
 811b228:	601a      	str	r2, [r3, #0]
  }
}
 811b22a:	bf00      	nop
 811b22c:	bf00      	nop
 811b22e:	3708      	adds	r7, #8
 811b230:	46bd      	mov	sp, r7
 811b232:	bd80      	pop	{r7, pc}
 811b234:	10011d20 	.word	0x10011d20
 811b238:	10011d24 	.word	0x10011d24
 811b23c:	0811b1fd 	.word	0x0811b1fd
 811b240:	10011d7c 	.word	0x10011d7c

0811b244 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 811b244:	b580      	push	{r7, lr}
 811b246:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 811b248:	4b0a      	ldr	r3, [pc, #40]	@ (811b274 <tcp_timer_needed+0x30>)
 811b24a:	681b      	ldr	r3, [r3, #0]
 811b24c:	2b00      	cmp	r3, #0
 811b24e:	d10f      	bne.n	811b270 <tcp_timer_needed+0x2c>
 811b250:	4b09      	ldr	r3, [pc, #36]	@ (811b278 <tcp_timer_needed+0x34>)
 811b252:	681b      	ldr	r3, [r3, #0]
 811b254:	2b00      	cmp	r3, #0
 811b256:	d103      	bne.n	811b260 <tcp_timer_needed+0x1c>
 811b258:	4b08      	ldr	r3, [pc, #32]	@ (811b27c <tcp_timer_needed+0x38>)
 811b25a:	681b      	ldr	r3, [r3, #0]
 811b25c:	2b00      	cmp	r3, #0
 811b25e:	d007      	beq.n	811b270 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 811b260:	4b04      	ldr	r3, [pc, #16]	@ (811b274 <tcp_timer_needed+0x30>)
 811b262:	2201      	movs	r2, #1
 811b264:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 811b266:	2200      	movs	r2, #0
 811b268:	4905      	ldr	r1, [pc, #20]	@ (811b280 <tcp_timer_needed+0x3c>)
 811b26a:	20fa      	movs	r0, #250	@ 0xfa
 811b26c:	f000 f8cc 	bl	811b408 <sys_timeout>
  }
}
 811b270:	bf00      	nop
 811b272:	bd80      	pop	{r7, pc}
 811b274:	10011d7c 	.word	0x10011d7c
 811b278:	10011d20 	.word	0x10011d20
 811b27c:	10011d24 	.word	0x10011d24
 811b280:	0811b1fd 	.word	0x0811b1fd

0811b284 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 811b284:	b580      	push	{r7, lr}
 811b286:	b086      	sub	sp, #24
 811b288:	af00      	add	r7, sp, #0
 811b28a:	60f8      	str	r0, [r7, #12]
 811b28c:	60b9      	str	r1, [r7, #8]
 811b28e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 811b290:	200a      	movs	r0, #10
 811b292:	f7f8 fbff 	bl	8113a94 <memp_malloc>
 811b296:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 811b298:	693b      	ldr	r3, [r7, #16]
 811b29a:	2b00      	cmp	r3, #0
 811b29c:	d109      	bne.n	811b2b2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 811b29e:	693b      	ldr	r3, [r7, #16]
 811b2a0:	2b00      	cmp	r3, #0
 811b2a2:	d151      	bne.n	811b348 <sys_timeout_abs+0xc4>
 811b2a4:	4b2a      	ldr	r3, [pc, #168]	@ (811b350 <sys_timeout_abs+0xcc>)
 811b2a6:	22be      	movs	r2, #190	@ 0xbe
 811b2a8:	492a      	ldr	r1, [pc, #168]	@ (811b354 <sys_timeout_abs+0xd0>)
 811b2aa:	482b      	ldr	r0, [pc, #172]	@ (811b358 <sys_timeout_abs+0xd4>)
 811b2ac:	f000 fdce 	bl	811be4c <iprintf>
    return;
 811b2b0:	e04a      	b.n	811b348 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 811b2b2:	693b      	ldr	r3, [r7, #16]
 811b2b4:	2200      	movs	r2, #0
 811b2b6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 811b2b8:	693b      	ldr	r3, [r7, #16]
 811b2ba:	68ba      	ldr	r2, [r7, #8]
 811b2bc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 811b2be:	693b      	ldr	r3, [r7, #16]
 811b2c0:	687a      	ldr	r2, [r7, #4]
 811b2c2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 811b2c4:	693b      	ldr	r3, [r7, #16]
 811b2c6:	68fa      	ldr	r2, [r7, #12]
 811b2c8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 811b2ca:	4b24      	ldr	r3, [pc, #144]	@ (811b35c <sys_timeout_abs+0xd8>)
 811b2cc:	681b      	ldr	r3, [r3, #0]
 811b2ce:	2b00      	cmp	r3, #0
 811b2d0:	d103      	bne.n	811b2da <sys_timeout_abs+0x56>
    next_timeout = timeout;
 811b2d2:	4a22      	ldr	r2, [pc, #136]	@ (811b35c <sys_timeout_abs+0xd8>)
 811b2d4:	693b      	ldr	r3, [r7, #16]
 811b2d6:	6013      	str	r3, [r2, #0]
    return;
 811b2d8:	e037      	b.n	811b34a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 811b2da:	693b      	ldr	r3, [r7, #16]
 811b2dc:	685a      	ldr	r2, [r3, #4]
 811b2de:	4b1f      	ldr	r3, [pc, #124]	@ (811b35c <sys_timeout_abs+0xd8>)
 811b2e0:	681b      	ldr	r3, [r3, #0]
 811b2e2:	685b      	ldr	r3, [r3, #4]
 811b2e4:	1ad3      	subs	r3, r2, r3
 811b2e6:	0fdb      	lsrs	r3, r3, #31
 811b2e8:	f003 0301 	and.w	r3, r3, #1
 811b2ec:	b2db      	uxtb	r3, r3
 811b2ee:	2b00      	cmp	r3, #0
 811b2f0:	d007      	beq.n	811b302 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 811b2f2:	4b1a      	ldr	r3, [pc, #104]	@ (811b35c <sys_timeout_abs+0xd8>)
 811b2f4:	681a      	ldr	r2, [r3, #0]
 811b2f6:	693b      	ldr	r3, [r7, #16]
 811b2f8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 811b2fa:	4a18      	ldr	r2, [pc, #96]	@ (811b35c <sys_timeout_abs+0xd8>)
 811b2fc:	693b      	ldr	r3, [r7, #16]
 811b2fe:	6013      	str	r3, [r2, #0]
 811b300:	e023      	b.n	811b34a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 811b302:	4b16      	ldr	r3, [pc, #88]	@ (811b35c <sys_timeout_abs+0xd8>)
 811b304:	681b      	ldr	r3, [r3, #0]
 811b306:	617b      	str	r3, [r7, #20]
 811b308:	e01a      	b.n	811b340 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 811b30a:	697b      	ldr	r3, [r7, #20]
 811b30c:	681b      	ldr	r3, [r3, #0]
 811b30e:	2b00      	cmp	r3, #0
 811b310:	d00b      	beq.n	811b32a <sys_timeout_abs+0xa6>
 811b312:	693b      	ldr	r3, [r7, #16]
 811b314:	685a      	ldr	r2, [r3, #4]
 811b316:	697b      	ldr	r3, [r7, #20]
 811b318:	681b      	ldr	r3, [r3, #0]
 811b31a:	685b      	ldr	r3, [r3, #4]
 811b31c:	1ad3      	subs	r3, r2, r3
 811b31e:	0fdb      	lsrs	r3, r3, #31
 811b320:	f003 0301 	and.w	r3, r3, #1
 811b324:	b2db      	uxtb	r3, r3
 811b326:	2b00      	cmp	r3, #0
 811b328:	d007      	beq.n	811b33a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 811b32a:	697b      	ldr	r3, [r7, #20]
 811b32c:	681a      	ldr	r2, [r3, #0]
 811b32e:	693b      	ldr	r3, [r7, #16]
 811b330:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 811b332:	697b      	ldr	r3, [r7, #20]
 811b334:	693a      	ldr	r2, [r7, #16]
 811b336:	601a      	str	r2, [r3, #0]
        break;
 811b338:	e007      	b.n	811b34a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 811b33a:	697b      	ldr	r3, [r7, #20]
 811b33c:	681b      	ldr	r3, [r3, #0]
 811b33e:	617b      	str	r3, [r7, #20]
 811b340:	697b      	ldr	r3, [r7, #20]
 811b342:	2b00      	cmp	r3, #0
 811b344:	d1e1      	bne.n	811b30a <sys_timeout_abs+0x86>
 811b346:	e000      	b.n	811b34a <sys_timeout_abs+0xc6>
    return;
 811b348:	bf00      	nop
      }
    }
  }
}
 811b34a:	3718      	adds	r7, #24
 811b34c:	46bd      	mov	sp, r7
 811b34e:	bd80      	pop	{r7, pc}
 811b350:	0811f6c4 	.word	0x0811f6c4
 811b354:	0811f738 	.word	0x0811f738
 811b358:	0811f778 	.word	0x0811f778
 811b35c:	10011d74 	.word	0x10011d74

0811b360 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 811b360:	b580      	push	{r7, lr}
 811b362:	b086      	sub	sp, #24
 811b364:	af00      	add	r7, sp, #0
 811b366:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 811b368:	687b      	ldr	r3, [r7, #4]
 811b36a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 811b36c:	697b      	ldr	r3, [r7, #20]
 811b36e:	685b      	ldr	r3, [r3, #4]
 811b370:	4798      	blx	r3

  now = sys_now();
 811b372:	f7e9 f911 	bl	8104598 <sys_now>
 811b376:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 811b378:	697b      	ldr	r3, [r7, #20]
 811b37a:	681a      	ldr	r2, [r3, #0]
 811b37c:	4b0f      	ldr	r3, [pc, #60]	@ (811b3bc <lwip_cyclic_timer+0x5c>)
 811b37e:	681b      	ldr	r3, [r3, #0]
 811b380:	4413      	add	r3, r2
 811b382:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 811b384:	68fa      	ldr	r2, [r7, #12]
 811b386:	693b      	ldr	r3, [r7, #16]
 811b388:	1ad3      	subs	r3, r2, r3
 811b38a:	0fdb      	lsrs	r3, r3, #31
 811b38c:	f003 0301 	and.w	r3, r3, #1
 811b390:	b2db      	uxtb	r3, r3
 811b392:	2b00      	cmp	r3, #0
 811b394:	d009      	beq.n	811b3aa <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 811b396:	697b      	ldr	r3, [r7, #20]
 811b398:	681a      	ldr	r2, [r3, #0]
 811b39a:	693b      	ldr	r3, [r7, #16]
 811b39c:	4413      	add	r3, r2
 811b39e:	687a      	ldr	r2, [r7, #4]
 811b3a0:	4907      	ldr	r1, [pc, #28]	@ (811b3c0 <lwip_cyclic_timer+0x60>)
 811b3a2:	4618      	mov	r0, r3
 811b3a4:	f7ff ff6e 	bl	811b284 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 811b3a8:	e004      	b.n	811b3b4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 811b3aa:	687a      	ldr	r2, [r7, #4]
 811b3ac:	4904      	ldr	r1, [pc, #16]	@ (811b3c0 <lwip_cyclic_timer+0x60>)
 811b3ae:	68f8      	ldr	r0, [r7, #12]
 811b3b0:	f7ff ff68 	bl	811b284 <sys_timeout_abs>
}
 811b3b4:	bf00      	nop
 811b3b6:	3718      	adds	r7, #24
 811b3b8:	46bd      	mov	sp, r7
 811b3ba:	bd80      	pop	{r7, pc}
 811b3bc:	10011d78 	.word	0x10011d78
 811b3c0:	0811b361 	.word	0x0811b361

0811b3c4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 811b3c4:	b580      	push	{r7, lr}
 811b3c6:	b082      	sub	sp, #8
 811b3c8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 811b3ca:	2301      	movs	r3, #1
 811b3cc:	607b      	str	r3, [r7, #4]
 811b3ce:	e00e      	b.n	811b3ee <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 811b3d0:	4a0b      	ldr	r2, [pc, #44]	@ (811b400 <sys_timeouts_init+0x3c>)
 811b3d2:	687b      	ldr	r3, [r7, #4]
 811b3d4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 811b3d8:	687b      	ldr	r3, [r7, #4]
 811b3da:	00db      	lsls	r3, r3, #3
 811b3dc:	4a08      	ldr	r2, [pc, #32]	@ (811b400 <sys_timeouts_init+0x3c>)
 811b3de:	4413      	add	r3, r2
 811b3e0:	461a      	mov	r2, r3
 811b3e2:	4908      	ldr	r1, [pc, #32]	@ (811b404 <sys_timeouts_init+0x40>)
 811b3e4:	f000 f810 	bl	811b408 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 811b3e8:	687b      	ldr	r3, [r7, #4]
 811b3ea:	3301      	adds	r3, #1
 811b3ec:	607b      	str	r3, [r7, #4]
 811b3ee:	687b      	ldr	r3, [r7, #4]
 811b3f0:	2b02      	cmp	r3, #2
 811b3f2:	d9ed      	bls.n	811b3d0 <sys_timeouts_init+0xc>
  }
}
 811b3f4:	bf00      	nop
 811b3f6:	bf00      	nop
 811b3f8:	3708      	adds	r7, #8
 811b3fa:	46bd      	mov	sp, r7
 811b3fc:	bd80      	pop	{r7, pc}
 811b3fe:	bf00      	nop
 811b400:	0811fd4c 	.word	0x0811fd4c
 811b404:	0811b361 	.word	0x0811b361

0811b408 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 811b408:	b580      	push	{r7, lr}
 811b40a:	b086      	sub	sp, #24
 811b40c:	af00      	add	r7, sp, #0
 811b40e:	60f8      	str	r0, [r7, #12]
 811b410:	60b9      	str	r1, [r7, #8]
 811b412:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 811b414:	68fb      	ldr	r3, [r7, #12]
 811b416:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 811b41a:	d306      	bcc.n	811b42a <sys_timeout+0x22>
 811b41c:	4b0a      	ldr	r3, [pc, #40]	@ (811b448 <sys_timeout+0x40>)
 811b41e:	f240 1229 	movw	r2, #297	@ 0x129
 811b422:	490a      	ldr	r1, [pc, #40]	@ (811b44c <sys_timeout+0x44>)
 811b424:	480a      	ldr	r0, [pc, #40]	@ (811b450 <sys_timeout+0x48>)
 811b426:	f000 fd11 	bl	811be4c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 811b42a:	f7e9 f8b5 	bl	8104598 <sys_now>
 811b42e:	4602      	mov	r2, r0
 811b430:	68fb      	ldr	r3, [r7, #12]
 811b432:	4413      	add	r3, r2
 811b434:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 811b436:	687a      	ldr	r2, [r7, #4]
 811b438:	68b9      	ldr	r1, [r7, #8]
 811b43a:	6978      	ldr	r0, [r7, #20]
 811b43c:	f7ff ff22 	bl	811b284 <sys_timeout_abs>
#endif
}
 811b440:	bf00      	nop
 811b442:	3718      	adds	r7, #24
 811b444:	46bd      	mov	sp, r7
 811b446:	bd80      	pop	{r7, pc}
 811b448:	0811f6c4 	.word	0x0811f6c4
 811b44c:	0811f7a0 	.word	0x0811f7a0
 811b450:	0811f778 	.word	0x0811f778

0811b454 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 811b454:	b580      	push	{r7, lr}
 811b456:	b084      	sub	sp, #16
 811b458:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 811b45a:	f7e9 f89d 	bl	8104598 <sys_now>
 811b45e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 811b460:	4b17      	ldr	r3, [pc, #92]	@ (811b4c0 <sys_check_timeouts+0x6c>)
 811b462:	681b      	ldr	r3, [r3, #0]
 811b464:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 811b466:	68bb      	ldr	r3, [r7, #8]
 811b468:	2b00      	cmp	r3, #0
 811b46a:	d022      	beq.n	811b4b2 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 811b46c:	68bb      	ldr	r3, [r7, #8]
 811b46e:	685b      	ldr	r3, [r3, #4]
 811b470:	68fa      	ldr	r2, [r7, #12]
 811b472:	1ad3      	subs	r3, r2, r3
 811b474:	0fdb      	lsrs	r3, r3, #31
 811b476:	f003 0301 	and.w	r3, r3, #1
 811b47a:	b2db      	uxtb	r3, r3
 811b47c:	2b00      	cmp	r3, #0
 811b47e:	d11a      	bne.n	811b4b6 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 811b480:	68bb      	ldr	r3, [r7, #8]
 811b482:	681b      	ldr	r3, [r3, #0]
 811b484:	4a0e      	ldr	r2, [pc, #56]	@ (811b4c0 <sys_check_timeouts+0x6c>)
 811b486:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 811b488:	68bb      	ldr	r3, [r7, #8]
 811b48a:	689b      	ldr	r3, [r3, #8]
 811b48c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 811b48e:	68bb      	ldr	r3, [r7, #8]
 811b490:	68db      	ldr	r3, [r3, #12]
 811b492:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 811b494:	68bb      	ldr	r3, [r7, #8]
 811b496:	685b      	ldr	r3, [r3, #4]
 811b498:	4a0a      	ldr	r2, [pc, #40]	@ (811b4c4 <sys_check_timeouts+0x70>)
 811b49a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 811b49c:	68b9      	ldr	r1, [r7, #8]
 811b49e:	200a      	movs	r0, #10
 811b4a0:	f7f8 fb6e 	bl	8113b80 <memp_free>
    if (handler != NULL) {
 811b4a4:	687b      	ldr	r3, [r7, #4]
 811b4a6:	2b00      	cmp	r3, #0
 811b4a8:	d0da      	beq.n	811b460 <sys_check_timeouts+0xc>
      handler(arg);
 811b4aa:	687b      	ldr	r3, [r7, #4]
 811b4ac:	6838      	ldr	r0, [r7, #0]
 811b4ae:	4798      	blx	r3
  do {
 811b4b0:	e7d6      	b.n	811b460 <sys_check_timeouts+0xc>
      return;
 811b4b2:	bf00      	nop
 811b4b4:	e000      	b.n	811b4b8 <sys_check_timeouts+0x64>
      return;
 811b4b6:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 811b4b8:	3710      	adds	r7, #16
 811b4ba:	46bd      	mov	sp, r7
 811b4bc:	bd80      	pop	{r7, pc}
 811b4be:	bf00      	nop
 811b4c0:	10011d74 	.word	0x10011d74
 811b4c4:	10011d78 	.word	0x10011d78

0811b4c8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 811b4c8:	b580      	push	{r7, lr}
 811b4ca:	b082      	sub	sp, #8
 811b4cc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 811b4ce:	4b16      	ldr	r3, [pc, #88]	@ (811b528 <sys_timeouts_sleeptime+0x60>)
 811b4d0:	681b      	ldr	r3, [r3, #0]
 811b4d2:	2b00      	cmp	r3, #0
 811b4d4:	d102      	bne.n	811b4dc <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 811b4d6:	f04f 33ff 	mov.w	r3, #4294967295
 811b4da:	e020      	b.n	811b51e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 811b4dc:	f7e9 f85c 	bl	8104598 <sys_now>
 811b4e0:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 811b4e2:	4b11      	ldr	r3, [pc, #68]	@ (811b528 <sys_timeouts_sleeptime+0x60>)
 811b4e4:	681b      	ldr	r3, [r3, #0]
 811b4e6:	685a      	ldr	r2, [r3, #4]
 811b4e8:	687b      	ldr	r3, [r7, #4]
 811b4ea:	1ad3      	subs	r3, r2, r3
 811b4ec:	0fdb      	lsrs	r3, r3, #31
 811b4ee:	f003 0301 	and.w	r3, r3, #1
 811b4f2:	b2db      	uxtb	r3, r3
 811b4f4:	2b00      	cmp	r3, #0
 811b4f6:	d001      	beq.n	811b4fc <sys_timeouts_sleeptime+0x34>
    return 0;
 811b4f8:	2300      	movs	r3, #0
 811b4fa:	e010      	b.n	811b51e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 811b4fc:	4b0a      	ldr	r3, [pc, #40]	@ (811b528 <sys_timeouts_sleeptime+0x60>)
 811b4fe:	681b      	ldr	r3, [r3, #0]
 811b500:	685a      	ldr	r2, [r3, #4]
 811b502:	687b      	ldr	r3, [r7, #4]
 811b504:	1ad3      	subs	r3, r2, r3
 811b506:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 811b508:	683b      	ldr	r3, [r7, #0]
 811b50a:	2b00      	cmp	r3, #0
 811b50c:	da06      	bge.n	811b51c <sys_timeouts_sleeptime+0x54>
 811b50e:	4b07      	ldr	r3, [pc, #28]	@ (811b52c <sys_timeouts_sleeptime+0x64>)
 811b510:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 811b514:	4906      	ldr	r1, [pc, #24]	@ (811b530 <sys_timeouts_sleeptime+0x68>)
 811b516:	4807      	ldr	r0, [pc, #28]	@ (811b534 <sys_timeouts_sleeptime+0x6c>)
 811b518:	f000 fc98 	bl	811be4c <iprintf>
    return ret;
 811b51c:	683b      	ldr	r3, [r7, #0]
  }
}
 811b51e:	4618      	mov	r0, r3
 811b520:	3708      	adds	r7, #8
 811b522:	46bd      	mov	sp, r7
 811b524:	bd80      	pop	{r7, pc}
 811b526:	bf00      	nop
 811b528:	10011d74 	.word	0x10011d74
 811b52c:	0811f6c4 	.word	0x0811f6c4
 811b530:	0811f7d8 	.word	0x0811f7d8
 811b534:	0811f778 	.word	0x0811f778

0811b538 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 811b538:	b580      	push	{r7, lr}
 811b53a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 811b53c:	f000 fb86 	bl	811bc4c <rand>
 811b540:	4603      	mov	r3, r0
 811b542:	b29b      	uxth	r3, r3
 811b544:	f3c3 030d 	ubfx	r3, r3, #0, #14
 811b548:	b29b      	uxth	r3, r3
 811b54a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 811b54e:	b29a      	uxth	r2, r3
 811b550:	4b01      	ldr	r3, [pc, #4]	@ (811b558 <udp_init+0x20>)
 811b552:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 811b554:	bf00      	nop
 811b556:	bd80      	pop	{r7, pc}
 811b558:	10000030 	.word	0x10000030

0811b55c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 811b55c:	b580      	push	{r7, lr}
 811b55e:	b084      	sub	sp, #16
 811b560:	af00      	add	r7, sp, #0
 811b562:	60f8      	str	r0, [r7, #12]
 811b564:	60b9      	str	r1, [r7, #8]
 811b566:	4613      	mov	r3, r2
 811b568:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 811b56a:	68fb      	ldr	r3, [r7, #12]
 811b56c:	2b00      	cmp	r3, #0
 811b56e:	d105      	bne.n	811b57c <udp_input_local_match+0x20>
 811b570:	4b27      	ldr	r3, [pc, #156]	@ (811b610 <udp_input_local_match+0xb4>)
 811b572:	2287      	movs	r2, #135	@ 0x87
 811b574:	4927      	ldr	r1, [pc, #156]	@ (811b614 <udp_input_local_match+0xb8>)
 811b576:	4828      	ldr	r0, [pc, #160]	@ (811b618 <udp_input_local_match+0xbc>)
 811b578:	f000 fc68 	bl	811be4c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 811b57c:	68bb      	ldr	r3, [r7, #8]
 811b57e:	2b00      	cmp	r3, #0
 811b580:	d105      	bne.n	811b58e <udp_input_local_match+0x32>
 811b582:	4b23      	ldr	r3, [pc, #140]	@ (811b610 <udp_input_local_match+0xb4>)
 811b584:	2288      	movs	r2, #136	@ 0x88
 811b586:	4925      	ldr	r1, [pc, #148]	@ (811b61c <udp_input_local_match+0xc0>)
 811b588:	4823      	ldr	r0, [pc, #140]	@ (811b618 <udp_input_local_match+0xbc>)
 811b58a:	f000 fc5f 	bl	811be4c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 811b58e:	68fb      	ldr	r3, [r7, #12]
 811b590:	7a1b      	ldrb	r3, [r3, #8]
 811b592:	2b00      	cmp	r3, #0
 811b594:	d00b      	beq.n	811b5ae <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 811b596:	68fb      	ldr	r3, [r7, #12]
 811b598:	7a1a      	ldrb	r2, [r3, #8]
 811b59a:	4b21      	ldr	r3, [pc, #132]	@ (811b620 <udp_input_local_match+0xc4>)
 811b59c:	685b      	ldr	r3, [r3, #4]
 811b59e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 811b5a2:	3301      	adds	r3, #1
 811b5a4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 811b5a6:	429a      	cmp	r2, r3
 811b5a8:	d001      	beq.n	811b5ae <udp_input_local_match+0x52>
    return 0;
 811b5aa:	2300      	movs	r3, #0
 811b5ac:	e02b      	b.n	811b606 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 811b5ae:	79fb      	ldrb	r3, [r7, #7]
 811b5b0:	2b00      	cmp	r3, #0
 811b5b2:	d018      	beq.n	811b5e6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 811b5b4:	68fb      	ldr	r3, [r7, #12]
 811b5b6:	2b00      	cmp	r3, #0
 811b5b8:	d013      	beq.n	811b5e2 <udp_input_local_match+0x86>
 811b5ba:	68fb      	ldr	r3, [r7, #12]
 811b5bc:	681b      	ldr	r3, [r3, #0]
 811b5be:	2b00      	cmp	r3, #0
 811b5c0:	d00f      	beq.n	811b5e2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 811b5c2:	4b17      	ldr	r3, [pc, #92]	@ (811b620 <udp_input_local_match+0xc4>)
 811b5c4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 811b5c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 811b5ca:	d00a      	beq.n	811b5e2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 811b5cc:	68fb      	ldr	r3, [r7, #12]
 811b5ce:	681a      	ldr	r2, [r3, #0]
 811b5d0:	4b13      	ldr	r3, [pc, #76]	@ (811b620 <udp_input_local_match+0xc4>)
 811b5d2:	695b      	ldr	r3, [r3, #20]
 811b5d4:	405a      	eors	r2, r3
 811b5d6:	68bb      	ldr	r3, [r7, #8]
 811b5d8:	3308      	adds	r3, #8
 811b5da:	681b      	ldr	r3, [r3, #0]
 811b5dc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 811b5de:	2b00      	cmp	r3, #0
 811b5e0:	d110      	bne.n	811b604 <udp_input_local_match+0xa8>
          return 1;
 811b5e2:	2301      	movs	r3, #1
 811b5e4:	e00f      	b.n	811b606 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 811b5e6:	68fb      	ldr	r3, [r7, #12]
 811b5e8:	2b00      	cmp	r3, #0
 811b5ea:	d009      	beq.n	811b600 <udp_input_local_match+0xa4>
 811b5ec:	68fb      	ldr	r3, [r7, #12]
 811b5ee:	681b      	ldr	r3, [r3, #0]
 811b5f0:	2b00      	cmp	r3, #0
 811b5f2:	d005      	beq.n	811b600 <udp_input_local_match+0xa4>
 811b5f4:	68fb      	ldr	r3, [r7, #12]
 811b5f6:	681a      	ldr	r2, [r3, #0]
 811b5f8:	4b09      	ldr	r3, [pc, #36]	@ (811b620 <udp_input_local_match+0xc4>)
 811b5fa:	695b      	ldr	r3, [r3, #20]
 811b5fc:	429a      	cmp	r2, r3
 811b5fe:	d101      	bne.n	811b604 <udp_input_local_match+0xa8>
        return 1;
 811b600:	2301      	movs	r3, #1
 811b602:	e000      	b.n	811b606 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 811b604:	2300      	movs	r3, #0
}
 811b606:	4618      	mov	r0, r3
 811b608:	3710      	adds	r7, #16
 811b60a:	46bd      	mov	sp, r7
 811b60c:	bd80      	pop	{r7, pc}
 811b60e:	bf00      	nop
 811b610:	0811f7ec 	.word	0x0811f7ec
 811b614:	0811f85c 	.word	0x0811f85c
 811b618:	0811f880 	.word	0x0811f880
 811b61c:	0811f8a8 	.word	0x0811f8a8
 811b620:	1000b244 	.word	0x1000b244

0811b624 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 811b624:	b590      	push	{r4, r7, lr}
 811b626:	b08d      	sub	sp, #52	@ 0x34
 811b628:	af02      	add	r7, sp, #8
 811b62a:	6078      	str	r0, [r7, #4]
 811b62c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 811b62e:	2300      	movs	r3, #0
 811b630:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 811b632:	687b      	ldr	r3, [r7, #4]
 811b634:	2b00      	cmp	r3, #0
 811b636:	d105      	bne.n	811b644 <udp_input+0x20>
 811b638:	4b7c      	ldr	r3, [pc, #496]	@ (811b82c <udp_input+0x208>)
 811b63a:	22cf      	movs	r2, #207	@ 0xcf
 811b63c:	497c      	ldr	r1, [pc, #496]	@ (811b830 <udp_input+0x20c>)
 811b63e:	487d      	ldr	r0, [pc, #500]	@ (811b834 <udp_input+0x210>)
 811b640:	f000 fc04 	bl	811be4c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 811b644:	683b      	ldr	r3, [r7, #0]
 811b646:	2b00      	cmp	r3, #0
 811b648:	d105      	bne.n	811b656 <udp_input+0x32>
 811b64a:	4b78      	ldr	r3, [pc, #480]	@ (811b82c <udp_input+0x208>)
 811b64c:	22d0      	movs	r2, #208	@ 0xd0
 811b64e:	497a      	ldr	r1, [pc, #488]	@ (811b838 <udp_input+0x214>)
 811b650:	4878      	ldr	r0, [pc, #480]	@ (811b834 <udp_input+0x210>)
 811b652:	f000 fbfb 	bl	811be4c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 811b656:	687b      	ldr	r3, [r7, #4]
 811b658:	895b      	ldrh	r3, [r3, #10]
 811b65a:	2b07      	cmp	r3, #7
 811b65c:	d803      	bhi.n	811b666 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 811b65e:	6878      	ldr	r0, [r7, #4]
 811b660:	f7f9 f932 	bl	81148c8 <pbuf_free>
    goto end;
 811b664:	e0de      	b.n	811b824 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 811b666:	687b      	ldr	r3, [r7, #4]
 811b668:	685b      	ldr	r3, [r3, #4]
 811b66a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 811b66c:	4b73      	ldr	r3, [pc, #460]	@ (811b83c <udp_input+0x218>)
 811b66e:	695b      	ldr	r3, [r3, #20]
 811b670:	4a72      	ldr	r2, [pc, #456]	@ (811b83c <udp_input+0x218>)
 811b672:	6812      	ldr	r2, [r2, #0]
 811b674:	4611      	mov	r1, r2
 811b676:	4618      	mov	r0, r3
 811b678:	f7f6 ff0e 	bl	8112498 <ip4_addr_isbroadcast_u32>
 811b67c:	4603      	mov	r3, r0
 811b67e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 811b680:	697b      	ldr	r3, [r7, #20]
 811b682:	881b      	ldrh	r3, [r3, #0]
 811b684:	b29b      	uxth	r3, r3
 811b686:	4618      	mov	r0, r3
 811b688:	f7f5 f998 	bl	81109bc <lwip_htons>
 811b68c:	4603      	mov	r3, r0
 811b68e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 811b690:	697b      	ldr	r3, [r7, #20]
 811b692:	885b      	ldrh	r3, [r3, #2]
 811b694:	b29b      	uxth	r3, r3
 811b696:	4618      	mov	r0, r3
 811b698:	f7f5 f990 	bl	81109bc <lwip_htons>
 811b69c:	4603      	mov	r3, r0
 811b69e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 811b6a0:	2300      	movs	r3, #0
 811b6a2:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 811b6a4:	2300      	movs	r3, #0
 811b6a6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 811b6a8:	2300      	movs	r3, #0
 811b6aa:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 811b6ac:	4b64      	ldr	r3, [pc, #400]	@ (811b840 <udp_input+0x21c>)
 811b6ae:	681b      	ldr	r3, [r3, #0]
 811b6b0:	627b      	str	r3, [r7, #36]	@ 0x24
 811b6b2:	e054      	b.n	811b75e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 811b6b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b6b6:	8a5b      	ldrh	r3, [r3, #18]
 811b6b8:	89fa      	ldrh	r2, [r7, #14]
 811b6ba:	429a      	cmp	r2, r3
 811b6bc:	d14a      	bne.n	811b754 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 811b6be:	7cfb      	ldrb	r3, [r7, #19]
 811b6c0:	461a      	mov	r2, r3
 811b6c2:	6839      	ldr	r1, [r7, #0]
 811b6c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 811b6c6:	f7ff ff49 	bl	811b55c <udp_input_local_match>
 811b6ca:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 811b6cc:	2b00      	cmp	r3, #0
 811b6ce:	d041      	beq.n	811b754 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 811b6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b6d2:	7c1b      	ldrb	r3, [r3, #16]
 811b6d4:	f003 0304 	and.w	r3, r3, #4
 811b6d8:	2b00      	cmp	r3, #0
 811b6da:	d11d      	bne.n	811b718 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 811b6dc:	69fb      	ldr	r3, [r7, #28]
 811b6de:	2b00      	cmp	r3, #0
 811b6e0:	d102      	bne.n	811b6e8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 811b6e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b6e4:	61fb      	str	r3, [r7, #28]
 811b6e6:	e017      	b.n	811b718 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 811b6e8:	7cfb      	ldrb	r3, [r7, #19]
 811b6ea:	2b00      	cmp	r3, #0
 811b6ec:	d014      	beq.n	811b718 <udp_input+0xf4>
 811b6ee:	4b53      	ldr	r3, [pc, #332]	@ (811b83c <udp_input+0x218>)
 811b6f0:	695b      	ldr	r3, [r3, #20]
 811b6f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 811b6f6:	d10f      	bne.n	811b718 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 811b6f8:	69fb      	ldr	r3, [r7, #28]
 811b6fa:	681a      	ldr	r2, [r3, #0]
 811b6fc:	683b      	ldr	r3, [r7, #0]
 811b6fe:	3304      	adds	r3, #4
 811b700:	681b      	ldr	r3, [r3, #0]
 811b702:	429a      	cmp	r2, r3
 811b704:	d008      	beq.n	811b718 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 811b706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b708:	681a      	ldr	r2, [r3, #0]
 811b70a:	683b      	ldr	r3, [r7, #0]
 811b70c:	3304      	adds	r3, #4
 811b70e:	681b      	ldr	r3, [r3, #0]
 811b710:	429a      	cmp	r2, r3
 811b712:	d101      	bne.n	811b718 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 811b714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b716:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 811b718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b71a:	8a9b      	ldrh	r3, [r3, #20]
 811b71c:	8a3a      	ldrh	r2, [r7, #16]
 811b71e:	429a      	cmp	r2, r3
 811b720:	d118      	bne.n	811b754 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 811b722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b724:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 811b726:	2b00      	cmp	r3, #0
 811b728:	d005      	beq.n	811b736 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 811b72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b72c:	685a      	ldr	r2, [r3, #4]
 811b72e:	4b43      	ldr	r3, [pc, #268]	@ (811b83c <udp_input+0x218>)
 811b730:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 811b732:	429a      	cmp	r2, r3
 811b734:	d10e      	bne.n	811b754 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 811b736:	6a3b      	ldr	r3, [r7, #32]
 811b738:	2b00      	cmp	r3, #0
 811b73a:	d014      	beq.n	811b766 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 811b73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b73e:	68da      	ldr	r2, [r3, #12]
 811b740:	6a3b      	ldr	r3, [r7, #32]
 811b742:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 811b744:	4b3e      	ldr	r3, [pc, #248]	@ (811b840 <udp_input+0x21c>)
 811b746:	681a      	ldr	r2, [r3, #0]
 811b748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b74a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 811b74c:	4a3c      	ldr	r2, [pc, #240]	@ (811b840 <udp_input+0x21c>)
 811b74e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b750:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 811b752:	e008      	b.n	811b766 <udp_input+0x142>
      }
    }

    prev = pcb;
 811b754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b756:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 811b758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b75a:	68db      	ldr	r3, [r3, #12]
 811b75c:	627b      	str	r3, [r7, #36]	@ 0x24
 811b75e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b760:	2b00      	cmp	r3, #0
 811b762:	d1a7      	bne.n	811b6b4 <udp_input+0x90>
 811b764:	e000      	b.n	811b768 <udp_input+0x144>
        break;
 811b766:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 811b768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b76a:	2b00      	cmp	r3, #0
 811b76c:	d101      	bne.n	811b772 <udp_input+0x14e>
    pcb = uncon_pcb;
 811b76e:	69fb      	ldr	r3, [r7, #28]
 811b770:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 811b772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b774:	2b00      	cmp	r3, #0
 811b776:	d002      	beq.n	811b77e <udp_input+0x15a>
    for_us = 1;
 811b778:	2301      	movs	r3, #1
 811b77a:	76fb      	strb	r3, [r7, #27]
 811b77c:	e00a      	b.n	811b794 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 811b77e:	683b      	ldr	r3, [r7, #0]
 811b780:	3304      	adds	r3, #4
 811b782:	681a      	ldr	r2, [r3, #0]
 811b784:	4b2d      	ldr	r3, [pc, #180]	@ (811b83c <udp_input+0x218>)
 811b786:	695b      	ldr	r3, [r3, #20]
 811b788:	429a      	cmp	r2, r3
 811b78a:	bf0c      	ite	eq
 811b78c:	2301      	moveq	r3, #1
 811b78e:	2300      	movne	r3, #0
 811b790:	b2db      	uxtb	r3, r3
 811b792:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 811b794:	7efb      	ldrb	r3, [r7, #27]
 811b796:	2b00      	cmp	r3, #0
 811b798:	d041      	beq.n	811b81e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 811b79a:	2108      	movs	r1, #8
 811b79c:	6878      	ldr	r0, [r7, #4]
 811b79e:	f7f9 f80d 	bl	81147bc <pbuf_remove_header>
 811b7a2:	4603      	mov	r3, r0
 811b7a4:	2b00      	cmp	r3, #0
 811b7a6:	d00a      	beq.n	811b7be <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 811b7a8:	4b20      	ldr	r3, [pc, #128]	@ (811b82c <udp_input+0x208>)
 811b7aa:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 811b7ae:	4925      	ldr	r1, [pc, #148]	@ (811b844 <udp_input+0x220>)
 811b7b0:	4820      	ldr	r0, [pc, #128]	@ (811b834 <udp_input+0x210>)
 811b7b2:	f000 fb4b 	bl	811be4c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 811b7b6:	6878      	ldr	r0, [r7, #4]
 811b7b8:	f7f9 f886 	bl	81148c8 <pbuf_free>
      goto end;
 811b7bc:	e032      	b.n	811b824 <udp_input+0x200>
    }

    if (pcb != NULL) {
 811b7be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b7c0:	2b00      	cmp	r3, #0
 811b7c2:	d012      	beq.n	811b7ea <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 811b7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b7c6:	699b      	ldr	r3, [r3, #24]
 811b7c8:	2b00      	cmp	r3, #0
 811b7ca:	d00a      	beq.n	811b7e2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 811b7cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b7ce:	699c      	ldr	r4, [r3, #24]
 811b7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 811b7d2:	69d8      	ldr	r0, [r3, #28]
 811b7d4:	8a3b      	ldrh	r3, [r7, #16]
 811b7d6:	9300      	str	r3, [sp, #0]
 811b7d8:	4b1b      	ldr	r3, [pc, #108]	@ (811b848 <udp_input+0x224>)
 811b7da:	687a      	ldr	r2, [r7, #4]
 811b7dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 811b7de:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 811b7e0:	e021      	b.n	811b826 <udp_input+0x202>
        pbuf_free(p);
 811b7e2:	6878      	ldr	r0, [r7, #4]
 811b7e4:	f7f9 f870 	bl	81148c8 <pbuf_free>
        goto end;
 811b7e8:	e01c      	b.n	811b824 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 811b7ea:	7cfb      	ldrb	r3, [r7, #19]
 811b7ec:	2b00      	cmp	r3, #0
 811b7ee:	d112      	bne.n	811b816 <udp_input+0x1f2>
 811b7f0:	4b12      	ldr	r3, [pc, #72]	@ (811b83c <udp_input+0x218>)
 811b7f2:	695b      	ldr	r3, [r3, #20]
 811b7f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 811b7f8:	2be0      	cmp	r3, #224	@ 0xe0
 811b7fa:	d00c      	beq.n	811b816 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 811b7fc:	4b0f      	ldr	r3, [pc, #60]	@ (811b83c <udp_input+0x218>)
 811b7fe:	899b      	ldrh	r3, [r3, #12]
 811b800:	3308      	adds	r3, #8
 811b802:	b29b      	uxth	r3, r3
 811b804:	b21b      	sxth	r3, r3
 811b806:	4619      	mov	r1, r3
 811b808:	6878      	ldr	r0, [r7, #4]
 811b80a:	f7f9 f84a 	bl	81148a2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 811b80e:	2103      	movs	r1, #3
 811b810:	6878      	ldr	r0, [r7, #4]
 811b812:	f7f6 fa43 	bl	8111c9c <icmp_dest_unreach>
      pbuf_free(p);
 811b816:	6878      	ldr	r0, [r7, #4]
 811b818:	f7f9 f856 	bl	81148c8 <pbuf_free>
  return;
 811b81c:	e003      	b.n	811b826 <udp_input+0x202>
    pbuf_free(p);
 811b81e:	6878      	ldr	r0, [r7, #4]
 811b820:	f7f9 f852 	bl	81148c8 <pbuf_free>
  return;
 811b824:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 811b826:	372c      	adds	r7, #44	@ 0x2c
 811b828:	46bd      	mov	sp, r7
 811b82a:	bd90      	pop	{r4, r7, pc}
 811b82c:	0811f7ec 	.word	0x0811f7ec
 811b830:	0811f8d0 	.word	0x0811f8d0
 811b834:	0811f880 	.word	0x0811f880
 811b838:	0811f8e8 	.word	0x0811f8e8
 811b83c:	1000b244 	.word	0x1000b244
 811b840:	10011d80 	.word	0x10011d80
 811b844:	0811f904 	.word	0x0811f904
 811b848:	1000b254 	.word	0x1000b254

0811b84c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 811b84c:	b480      	push	{r7}
 811b84e:	b085      	sub	sp, #20
 811b850:	af00      	add	r7, sp, #0
 811b852:	6078      	str	r0, [r7, #4]
 811b854:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 811b856:	687b      	ldr	r3, [r7, #4]
 811b858:	2b00      	cmp	r3, #0
 811b85a:	d01e      	beq.n	811b89a <udp_netif_ip_addr_changed+0x4e>
 811b85c:	687b      	ldr	r3, [r7, #4]
 811b85e:	681b      	ldr	r3, [r3, #0]
 811b860:	2b00      	cmp	r3, #0
 811b862:	d01a      	beq.n	811b89a <udp_netif_ip_addr_changed+0x4e>
 811b864:	683b      	ldr	r3, [r7, #0]
 811b866:	2b00      	cmp	r3, #0
 811b868:	d017      	beq.n	811b89a <udp_netif_ip_addr_changed+0x4e>
 811b86a:	683b      	ldr	r3, [r7, #0]
 811b86c:	681b      	ldr	r3, [r3, #0]
 811b86e:	2b00      	cmp	r3, #0
 811b870:	d013      	beq.n	811b89a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 811b872:	4b0d      	ldr	r3, [pc, #52]	@ (811b8a8 <udp_netif_ip_addr_changed+0x5c>)
 811b874:	681b      	ldr	r3, [r3, #0]
 811b876:	60fb      	str	r3, [r7, #12]
 811b878:	e00c      	b.n	811b894 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 811b87a:	68fb      	ldr	r3, [r7, #12]
 811b87c:	681a      	ldr	r2, [r3, #0]
 811b87e:	687b      	ldr	r3, [r7, #4]
 811b880:	681b      	ldr	r3, [r3, #0]
 811b882:	429a      	cmp	r2, r3
 811b884:	d103      	bne.n	811b88e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 811b886:	683b      	ldr	r3, [r7, #0]
 811b888:	681a      	ldr	r2, [r3, #0]
 811b88a:	68fb      	ldr	r3, [r7, #12]
 811b88c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 811b88e:	68fb      	ldr	r3, [r7, #12]
 811b890:	68db      	ldr	r3, [r3, #12]
 811b892:	60fb      	str	r3, [r7, #12]
 811b894:	68fb      	ldr	r3, [r7, #12]
 811b896:	2b00      	cmp	r3, #0
 811b898:	d1ef      	bne.n	811b87a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 811b89a:	bf00      	nop
 811b89c:	3714      	adds	r7, #20
 811b89e:	46bd      	mov	sp, r7
 811b8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 811b8a4:	4770      	bx	lr
 811b8a6:	bf00      	nop
 811b8a8:	10011d80 	.word	0x10011d80

0811b8ac <_ZdlPvj>:
 811b8ac:	f000 b8da 	b.w	811ba64 <_ZdlPv>

0811b8b0 <_Znwj>:
 811b8b0:	2801      	cmp	r0, #1
 811b8b2:	bf38      	it	cc
 811b8b4:	2001      	movcc	r0, #1
 811b8b6:	b510      	push	{r4, lr}
 811b8b8:	4604      	mov	r4, r0
 811b8ba:	4620      	mov	r0, r4
 811b8bc:	f000 f908 	bl	811bad0 <malloc>
 811b8c0:	b100      	cbz	r0, 811b8c4 <_Znwj+0x14>
 811b8c2:	bd10      	pop	{r4, pc}
 811b8c4:	f000 f8d0 	bl	811ba68 <_ZSt15get_new_handlerv>
 811b8c8:	b908      	cbnz	r0, 811b8ce <_Znwj+0x1e>
 811b8ca:	f000 f8f9 	bl	811bac0 <abort>
 811b8ce:	4780      	blx	r0
 811b8d0:	e7f3      	b.n	811b8ba <_Znwj+0xa>

0811b8d2 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 811b8d2:	68c3      	ldr	r3, [r0, #12]
 811b8d4:	689a      	ldr	r2, [r3, #8]
 811b8d6:	60c2      	str	r2, [r0, #12]
 811b8d8:	b510      	push	{r4, lr}
 811b8da:	b102      	cbz	r2, 811b8de <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 811b8dc:	6050      	str	r0, [r2, #4]
 811b8de:	6842      	ldr	r2, [r0, #4]
 811b8e0:	605a      	str	r2, [r3, #4]
 811b8e2:	680c      	ldr	r4, [r1, #0]
 811b8e4:	4284      	cmp	r4, r0
 811b8e6:	d103      	bne.n	811b8f0 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 811b8e8:	600b      	str	r3, [r1, #0]
 811b8ea:	6098      	str	r0, [r3, #8]
 811b8ec:	6043      	str	r3, [r0, #4]
 811b8ee:	bd10      	pop	{r4, pc}
 811b8f0:	6891      	ldr	r1, [r2, #8]
 811b8f2:	4281      	cmp	r1, r0
 811b8f4:	bf0c      	ite	eq
 811b8f6:	6093      	streq	r3, [r2, #8]
 811b8f8:	60d3      	strne	r3, [r2, #12]
 811b8fa:	e7f6      	b.n	811b8ea <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

0811b8fc <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 811b8fc:	6883      	ldr	r3, [r0, #8]
 811b8fe:	68da      	ldr	r2, [r3, #12]
 811b900:	6082      	str	r2, [r0, #8]
 811b902:	b510      	push	{r4, lr}
 811b904:	b102      	cbz	r2, 811b908 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 811b906:	6050      	str	r0, [r2, #4]
 811b908:	6842      	ldr	r2, [r0, #4]
 811b90a:	605a      	str	r2, [r3, #4]
 811b90c:	680c      	ldr	r4, [r1, #0]
 811b90e:	4284      	cmp	r4, r0
 811b910:	d103      	bne.n	811b91a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 811b912:	600b      	str	r3, [r1, #0]
 811b914:	60d8      	str	r0, [r3, #12]
 811b916:	6043      	str	r3, [r0, #4]
 811b918:	bd10      	pop	{r4, pc}
 811b91a:	68d1      	ldr	r1, [r2, #12]
 811b91c:	4281      	cmp	r1, r0
 811b91e:	bf0c      	ite	eq
 811b920:	60d3      	streq	r3, [r2, #12]
 811b922:	6093      	strne	r3, [r2, #8]
 811b924:	e7f6      	b.n	811b914 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

0811b926 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 811b926:	68c3      	ldr	r3, [r0, #12]
 811b928:	b123      	cbz	r3, 811b934 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 811b92a:	4618      	mov	r0, r3
 811b92c:	689b      	ldr	r3, [r3, #8]
 811b92e:	2b00      	cmp	r3, #0
 811b930:	d1fb      	bne.n	811b92a <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 811b932:	4770      	bx	lr
 811b934:	6843      	ldr	r3, [r0, #4]
 811b936:	68da      	ldr	r2, [r3, #12]
 811b938:	4282      	cmp	r2, r0
 811b93a:	d004      	beq.n	811b946 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x20>
 811b93c:	68c2      	ldr	r2, [r0, #12]
 811b93e:	4293      	cmp	r3, r2
 811b940:	bf18      	it	ne
 811b942:	4618      	movne	r0, r3
 811b944:	4770      	bx	lr
 811b946:	4618      	mov	r0, r3
 811b948:	685b      	ldr	r3, [r3, #4]
 811b94a:	e7f4      	b.n	811b936 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>

0811b94c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 811b94c:	7802      	ldrb	r2, [r0, #0]
 811b94e:	4603      	mov	r3, r0
 811b950:	b92a      	cbnz	r2, 811b95e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 811b952:	6842      	ldr	r2, [r0, #4]
 811b954:	6852      	ldr	r2, [r2, #4]
 811b956:	4282      	cmp	r2, r0
 811b958:	d101      	bne.n	811b95e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 811b95a:	68d0      	ldr	r0, [r2, #12]
 811b95c:	4770      	bx	lr
 811b95e:	689a      	ldr	r2, [r3, #8]
 811b960:	b122      	cbz	r2, 811b96c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 811b962:	4610      	mov	r0, r2
 811b964:	68d2      	ldr	r2, [r2, #12]
 811b966:	2a00      	cmp	r2, #0
 811b968:	d1fb      	bne.n	811b962 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 811b96a:	4770      	bx	lr
 811b96c:	6858      	ldr	r0, [r3, #4]
 811b96e:	6882      	ldr	r2, [r0, #8]
 811b970:	429a      	cmp	r2, r3
 811b972:	d000      	beq.n	811b976 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
 811b974:	4770      	bx	lr
 811b976:	4603      	mov	r3, r0
 811b978:	6840      	ldr	r0, [r0, #4]
 811b97a:	e7f8      	b.n	811b96e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

0811b97c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 811b97c:	f7ff bfd3 	b.w	811b926 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

0811b980 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 811b980:	f7ff bfe4 	b.w	811b94c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

0811b984 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 811b984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 811b988:	461d      	mov	r5, r3
 811b98a:	1d1f      	adds	r7, r3, #4
 811b98c:	2300      	movs	r3, #0
 811b98e:	e9c1 3302 	strd	r3, r3, [r1, #8]
 811b992:	460c      	mov	r4, r1
 811b994:	604a      	str	r2, [r1, #4]
 811b996:	700b      	strb	r3, [r1, #0]
 811b998:	b1a0      	cbz	r0, 811b9c4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x40>
 811b99a:	4295      	cmp	r5, r2
 811b99c:	6091      	str	r1, [r2, #8]
 811b99e:	d102      	bne.n	811b9a6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 811b9a0:	6069      	str	r1, [r5, #4]
 811b9a2:	60ec      	str	r4, [r5, #12]
 811b9a4:	e003      	b.n	811b9ae <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 811b9a6:	68ab      	ldr	r3, [r5, #8]
 811b9a8:	4293      	cmp	r3, r2
 811b9aa:	bf08      	it	eq
 811b9ac:	60a9      	streq	r1, [r5, #8]
 811b9ae:	f04f 0900 	mov.w	r9, #0
 811b9b2:	f04f 0801 	mov.w	r8, #1
 811b9b6:	686b      	ldr	r3, [r5, #4]
 811b9b8:	42a3      	cmp	r3, r4
 811b9ba:	d132      	bne.n	811ba22 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9e>
 811b9bc:	2201      	movs	r2, #1
 811b9be:	701a      	strb	r2, [r3, #0]
 811b9c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 811b9c4:	60d1      	str	r1, [r2, #12]
 811b9c6:	68eb      	ldr	r3, [r5, #12]
 811b9c8:	4293      	cmp	r3, r2
 811b9ca:	d1f0      	bne.n	811b9ae <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 811b9cc:	e7e9      	b.n	811b9a2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x1e>
 811b9ce:	68c3      	ldr	r3, [r0, #12]
 811b9d0:	42a3      	cmp	r3, r4
 811b9d2:	d103      	bne.n	811b9dc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x58>
 811b9d4:	4639      	mov	r1, r7
 811b9d6:	f7ff ff7c 	bl	811b8d2 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 811b9da:	4604      	mov	r4, r0
 811b9dc:	6863      	ldr	r3, [r4, #4]
 811b9de:	4639      	mov	r1, r7
 811b9e0:	f883 8000 	strb.w	r8, [r3]
 811b9e4:	4630      	mov	r0, r6
 811b9e6:	f886 9000 	strb.w	r9, [r6]
 811b9ea:	f7ff ff87 	bl	811b8fc <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 811b9ee:	e7e2      	b.n	811b9b6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 811b9f0:	b133      	cbz	r3, 811ba00 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 811b9f2:	781a      	ldrb	r2, [r3, #0]
 811b9f4:	b922      	cbnz	r2, 811ba00 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 811b9f6:	f880 8000 	strb.w	r8, [r0]
 811b9fa:	f883 8000 	strb.w	r8, [r3]
 811b9fe:	e021      	b.n	811ba44 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xc0>
 811ba00:	6883      	ldr	r3, [r0, #8]
 811ba02:	42a3      	cmp	r3, r4
 811ba04:	d103      	bne.n	811ba0e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8a>
 811ba06:	4639      	mov	r1, r7
 811ba08:	f7ff ff78 	bl	811b8fc <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 811ba0c:	4604      	mov	r4, r0
 811ba0e:	6863      	ldr	r3, [r4, #4]
 811ba10:	4639      	mov	r1, r7
 811ba12:	f883 8000 	strb.w	r8, [r3]
 811ba16:	4630      	mov	r0, r6
 811ba18:	f886 9000 	strb.w	r9, [r6]
 811ba1c:	f7ff ff59 	bl	811b8d2 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 811ba20:	e7c9      	b.n	811b9b6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 811ba22:	6860      	ldr	r0, [r4, #4]
 811ba24:	7802      	ldrb	r2, [r0, #0]
 811ba26:	2a00      	cmp	r2, #0
 811ba28:	d1c8      	bne.n	811b9bc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x38>
 811ba2a:	6846      	ldr	r6, [r0, #4]
 811ba2c:	68b3      	ldr	r3, [r6, #8]
 811ba2e:	4283      	cmp	r3, r0
 811ba30:	d1de      	bne.n	811b9f0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
 811ba32:	68f2      	ldr	r2, [r6, #12]
 811ba34:	2a00      	cmp	r2, #0
 811ba36:	d0ca      	beq.n	811b9ce <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 811ba38:	7811      	ldrb	r1, [r2, #0]
 811ba3a:	2900      	cmp	r1, #0
 811ba3c:	d1c7      	bne.n	811b9ce <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 811ba3e:	2101      	movs	r1, #1
 811ba40:	7019      	strb	r1, [r3, #0]
 811ba42:	7011      	strb	r1, [r2, #0]
 811ba44:	f886 9000 	strb.w	r9, [r6]
 811ba48:	4634      	mov	r4, r6
 811ba4a:	e7b4      	b.n	811b9b6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>

0811ba4c <_ZSt17__throw_bad_allocv>:
 811ba4c:	b508      	push	{r3, lr}
 811ba4e:	f000 f837 	bl	811bac0 <abort>

0811ba52 <_ZSt28__throw_bad_array_new_lengthv>:
 811ba52:	b508      	push	{r3, lr}
 811ba54:	f000 f834 	bl	811bac0 <abort>

0811ba58 <_ZSt20__throw_length_errorPKc>:
 811ba58:	b508      	push	{r3, lr}
 811ba5a:	f000 f831 	bl	811bac0 <abort>

0811ba5e <_ZSt25__throw_bad_function_callv>:
 811ba5e:	b508      	push	{r3, lr}
 811ba60:	f000 f82e 	bl	811bac0 <abort>

0811ba64 <_ZdlPv>:
 811ba64:	f000 b83c 	b.w	811bae0 <free>

0811ba68 <_ZSt15get_new_handlerv>:
 811ba68:	4b02      	ldr	r3, [pc, #8]	@ (811ba74 <_ZSt15get_new_handlerv+0xc>)
 811ba6a:	6818      	ldr	r0, [r3, #0]
 811ba6c:	f3bf 8f5b 	dmb	ish
 811ba70:	4770      	bx	lr
 811ba72:	bf00      	nop
 811ba74:	10011d84 	.word	0x10011d84

0811ba78 <roundf>:
 811ba78:	ee10 0a10 	vmov	r0, s0
 811ba7c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 811ba80:	3a7f      	subs	r2, #127	@ 0x7f
 811ba82:	2a16      	cmp	r2, #22
 811ba84:	dc15      	bgt.n	811bab2 <roundf+0x3a>
 811ba86:	2a00      	cmp	r2, #0
 811ba88:	da08      	bge.n	811ba9c <roundf+0x24>
 811ba8a:	3201      	adds	r2, #1
 811ba8c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 811ba90:	d101      	bne.n	811ba96 <roundf+0x1e>
 811ba92:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 811ba96:	ee00 3a10 	vmov	s0, r3
 811ba9a:	4770      	bx	lr
 811ba9c:	4907      	ldr	r1, [pc, #28]	@ (811babc <roundf+0x44>)
 811ba9e:	4111      	asrs	r1, r2
 811baa0:	4201      	tst	r1, r0
 811baa2:	d0fa      	beq.n	811ba9a <roundf+0x22>
 811baa4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 811baa8:	4113      	asrs	r3, r2
 811baaa:	4403      	add	r3, r0
 811baac:	ea23 0301 	bic.w	r3, r3, r1
 811bab0:	e7f1      	b.n	811ba96 <roundf+0x1e>
 811bab2:	2a80      	cmp	r2, #128	@ 0x80
 811bab4:	d1f1      	bne.n	811ba9a <roundf+0x22>
 811bab6:	ee30 0a00 	vadd.f32	s0, s0, s0
 811baba:	4770      	bx	lr
 811babc:	007fffff 	.word	0x007fffff

0811bac0 <abort>:
 811bac0:	b508      	push	{r3, lr}
 811bac2:	2006      	movs	r0, #6
 811bac4:	f000 fa84 	bl	811bfd0 <raise>
 811bac8:	2001      	movs	r0, #1
 811baca:	f7e5 f8c5 	bl	8100c58 <_exit>
	...

0811bad0 <malloc>:
 811bad0:	4b02      	ldr	r3, [pc, #8]	@ (811badc <malloc+0xc>)
 811bad2:	4601      	mov	r1, r0
 811bad4:	6818      	ldr	r0, [r3, #0]
 811bad6:	f000 b82d 	b.w	811bb34 <_malloc_r>
 811bada:	bf00      	nop
 811badc:	10000040 	.word	0x10000040

0811bae0 <free>:
 811bae0:	4b02      	ldr	r3, [pc, #8]	@ (811baec <free+0xc>)
 811bae2:	4601      	mov	r1, r0
 811bae4:	6818      	ldr	r0, [r3, #0]
 811bae6:	f000 bb8f 	b.w	811c208 <_free_r>
 811baea:	bf00      	nop
 811baec:	10000040 	.word	0x10000040

0811baf0 <sbrk_aligned>:
 811baf0:	b570      	push	{r4, r5, r6, lr}
 811baf2:	4e0f      	ldr	r6, [pc, #60]	@ (811bb30 <sbrk_aligned+0x40>)
 811baf4:	460c      	mov	r4, r1
 811baf6:	6831      	ldr	r1, [r6, #0]
 811baf8:	4605      	mov	r5, r0
 811bafa:	b911      	cbnz	r1, 811bb02 <sbrk_aligned+0x12>
 811bafc:	f000 fb0e 	bl	811c11c <_sbrk_r>
 811bb00:	6030      	str	r0, [r6, #0]
 811bb02:	4621      	mov	r1, r4
 811bb04:	4628      	mov	r0, r5
 811bb06:	f000 fb09 	bl	811c11c <_sbrk_r>
 811bb0a:	1c43      	adds	r3, r0, #1
 811bb0c:	d103      	bne.n	811bb16 <sbrk_aligned+0x26>
 811bb0e:	f04f 34ff 	mov.w	r4, #4294967295
 811bb12:	4620      	mov	r0, r4
 811bb14:	bd70      	pop	{r4, r5, r6, pc}
 811bb16:	1cc4      	adds	r4, r0, #3
 811bb18:	f024 0403 	bic.w	r4, r4, #3
 811bb1c:	42a0      	cmp	r0, r4
 811bb1e:	d0f8      	beq.n	811bb12 <sbrk_aligned+0x22>
 811bb20:	1a21      	subs	r1, r4, r0
 811bb22:	4628      	mov	r0, r5
 811bb24:	f000 fafa 	bl	811c11c <_sbrk_r>
 811bb28:	3001      	adds	r0, #1
 811bb2a:	d1f2      	bne.n	811bb12 <sbrk_aligned+0x22>
 811bb2c:	e7ef      	b.n	811bb0e <sbrk_aligned+0x1e>
 811bb2e:	bf00      	nop
 811bb30:	10011d88 	.word	0x10011d88

0811bb34 <_malloc_r>:
 811bb34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 811bb38:	1ccd      	adds	r5, r1, #3
 811bb3a:	f025 0503 	bic.w	r5, r5, #3
 811bb3e:	3508      	adds	r5, #8
 811bb40:	2d0c      	cmp	r5, #12
 811bb42:	bf38      	it	cc
 811bb44:	250c      	movcc	r5, #12
 811bb46:	2d00      	cmp	r5, #0
 811bb48:	4606      	mov	r6, r0
 811bb4a:	db01      	blt.n	811bb50 <_malloc_r+0x1c>
 811bb4c:	42a9      	cmp	r1, r5
 811bb4e:	d904      	bls.n	811bb5a <_malloc_r+0x26>
 811bb50:	230c      	movs	r3, #12
 811bb52:	6033      	str	r3, [r6, #0]
 811bb54:	2000      	movs	r0, #0
 811bb56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 811bb5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 811bc30 <_malloc_r+0xfc>
 811bb5e:	f000 f869 	bl	811bc34 <__malloc_lock>
 811bb62:	f8d8 3000 	ldr.w	r3, [r8]
 811bb66:	461c      	mov	r4, r3
 811bb68:	bb44      	cbnz	r4, 811bbbc <_malloc_r+0x88>
 811bb6a:	4629      	mov	r1, r5
 811bb6c:	4630      	mov	r0, r6
 811bb6e:	f7ff ffbf 	bl	811baf0 <sbrk_aligned>
 811bb72:	1c43      	adds	r3, r0, #1
 811bb74:	4604      	mov	r4, r0
 811bb76:	d158      	bne.n	811bc2a <_malloc_r+0xf6>
 811bb78:	f8d8 4000 	ldr.w	r4, [r8]
 811bb7c:	4627      	mov	r7, r4
 811bb7e:	2f00      	cmp	r7, #0
 811bb80:	d143      	bne.n	811bc0a <_malloc_r+0xd6>
 811bb82:	2c00      	cmp	r4, #0
 811bb84:	d04b      	beq.n	811bc1e <_malloc_r+0xea>
 811bb86:	6823      	ldr	r3, [r4, #0]
 811bb88:	4639      	mov	r1, r7
 811bb8a:	4630      	mov	r0, r6
 811bb8c:	eb04 0903 	add.w	r9, r4, r3
 811bb90:	f000 fac4 	bl	811c11c <_sbrk_r>
 811bb94:	4581      	cmp	r9, r0
 811bb96:	d142      	bne.n	811bc1e <_malloc_r+0xea>
 811bb98:	6821      	ldr	r1, [r4, #0]
 811bb9a:	1a6d      	subs	r5, r5, r1
 811bb9c:	4629      	mov	r1, r5
 811bb9e:	4630      	mov	r0, r6
 811bba0:	f7ff ffa6 	bl	811baf0 <sbrk_aligned>
 811bba4:	3001      	adds	r0, #1
 811bba6:	d03a      	beq.n	811bc1e <_malloc_r+0xea>
 811bba8:	6823      	ldr	r3, [r4, #0]
 811bbaa:	442b      	add	r3, r5
 811bbac:	6023      	str	r3, [r4, #0]
 811bbae:	f8d8 3000 	ldr.w	r3, [r8]
 811bbb2:	685a      	ldr	r2, [r3, #4]
 811bbb4:	bb62      	cbnz	r2, 811bc10 <_malloc_r+0xdc>
 811bbb6:	f8c8 7000 	str.w	r7, [r8]
 811bbba:	e00f      	b.n	811bbdc <_malloc_r+0xa8>
 811bbbc:	6822      	ldr	r2, [r4, #0]
 811bbbe:	1b52      	subs	r2, r2, r5
 811bbc0:	d420      	bmi.n	811bc04 <_malloc_r+0xd0>
 811bbc2:	2a0b      	cmp	r2, #11
 811bbc4:	d917      	bls.n	811bbf6 <_malloc_r+0xc2>
 811bbc6:	1961      	adds	r1, r4, r5
 811bbc8:	42a3      	cmp	r3, r4
 811bbca:	6025      	str	r5, [r4, #0]
 811bbcc:	bf18      	it	ne
 811bbce:	6059      	strne	r1, [r3, #4]
 811bbd0:	6863      	ldr	r3, [r4, #4]
 811bbd2:	bf08      	it	eq
 811bbd4:	f8c8 1000 	streq.w	r1, [r8]
 811bbd8:	5162      	str	r2, [r4, r5]
 811bbda:	604b      	str	r3, [r1, #4]
 811bbdc:	4630      	mov	r0, r6
 811bbde:	f000 f82f 	bl	811bc40 <__malloc_unlock>
 811bbe2:	f104 000b 	add.w	r0, r4, #11
 811bbe6:	1d23      	adds	r3, r4, #4
 811bbe8:	f020 0007 	bic.w	r0, r0, #7
 811bbec:	1ac2      	subs	r2, r0, r3
 811bbee:	bf1c      	itt	ne
 811bbf0:	1a1b      	subne	r3, r3, r0
 811bbf2:	50a3      	strne	r3, [r4, r2]
 811bbf4:	e7af      	b.n	811bb56 <_malloc_r+0x22>
 811bbf6:	6862      	ldr	r2, [r4, #4]
 811bbf8:	42a3      	cmp	r3, r4
 811bbfa:	bf0c      	ite	eq
 811bbfc:	f8c8 2000 	streq.w	r2, [r8]
 811bc00:	605a      	strne	r2, [r3, #4]
 811bc02:	e7eb      	b.n	811bbdc <_malloc_r+0xa8>
 811bc04:	4623      	mov	r3, r4
 811bc06:	6864      	ldr	r4, [r4, #4]
 811bc08:	e7ae      	b.n	811bb68 <_malloc_r+0x34>
 811bc0a:	463c      	mov	r4, r7
 811bc0c:	687f      	ldr	r7, [r7, #4]
 811bc0e:	e7b6      	b.n	811bb7e <_malloc_r+0x4a>
 811bc10:	461a      	mov	r2, r3
 811bc12:	685b      	ldr	r3, [r3, #4]
 811bc14:	42a3      	cmp	r3, r4
 811bc16:	d1fb      	bne.n	811bc10 <_malloc_r+0xdc>
 811bc18:	2300      	movs	r3, #0
 811bc1a:	6053      	str	r3, [r2, #4]
 811bc1c:	e7de      	b.n	811bbdc <_malloc_r+0xa8>
 811bc1e:	230c      	movs	r3, #12
 811bc20:	6033      	str	r3, [r6, #0]
 811bc22:	4630      	mov	r0, r6
 811bc24:	f000 f80c 	bl	811bc40 <__malloc_unlock>
 811bc28:	e794      	b.n	811bb54 <_malloc_r+0x20>
 811bc2a:	6005      	str	r5, [r0, #0]
 811bc2c:	e7d6      	b.n	811bbdc <_malloc_r+0xa8>
 811bc2e:	bf00      	nop
 811bc30:	10011d8c 	.word	0x10011d8c

0811bc34 <__malloc_lock>:
 811bc34:	4801      	ldr	r0, [pc, #4]	@ (811bc3c <__malloc_lock+0x8>)
 811bc36:	f000 bab8 	b.w	811c1aa <__retarget_lock_acquire_recursive>
 811bc3a:	bf00      	nop
 811bc3c:	10011ed0 	.word	0x10011ed0

0811bc40 <__malloc_unlock>:
 811bc40:	4801      	ldr	r0, [pc, #4]	@ (811bc48 <__malloc_unlock+0x8>)
 811bc42:	f000 bab3 	b.w	811c1ac <__retarget_lock_release_recursive>
 811bc46:	bf00      	nop
 811bc48:	10011ed0 	.word	0x10011ed0

0811bc4c <rand>:
 811bc4c:	4b16      	ldr	r3, [pc, #88]	@ (811bca8 <rand+0x5c>)
 811bc4e:	b510      	push	{r4, lr}
 811bc50:	681c      	ldr	r4, [r3, #0]
 811bc52:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 811bc54:	b9b3      	cbnz	r3, 811bc84 <rand+0x38>
 811bc56:	2018      	movs	r0, #24
 811bc58:	f7ff ff3a 	bl	811bad0 <malloc>
 811bc5c:	4602      	mov	r2, r0
 811bc5e:	6320      	str	r0, [r4, #48]	@ 0x30
 811bc60:	b920      	cbnz	r0, 811bc6c <rand+0x20>
 811bc62:	4b12      	ldr	r3, [pc, #72]	@ (811bcac <rand+0x60>)
 811bc64:	4812      	ldr	r0, [pc, #72]	@ (811bcb0 <rand+0x64>)
 811bc66:	2152      	movs	r1, #82	@ 0x52
 811bc68:	f000 fab0 	bl	811c1cc <__assert_func>
 811bc6c:	4911      	ldr	r1, [pc, #68]	@ (811bcb4 <rand+0x68>)
 811bc6e:	4b12      	ldr	r3, [pc, #72]	@ (811bcb8 <rand+0x6c>)
 811bc70:	e9c0 1300 	strd	r1, r3, [r0]
 811bc74:	4b11      	ldr	r3, [pc, #68]	@ (811bcbc <rand+0x70>)
 811bc76:	6083      	str	r3, [r0, #8]
 811bc78:	230b      	movs	r3, #11
 811bc7a:	8183      	strh	r3, [r0, #12]
 811bc7c:	2100      	movs	r1, #0
 811bc7e:	2001      	movs	r0, #1
 811bc80:	e9c2 0104 	strd	r0, r1, [r2, #16]
 811bc84:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 811bc86:	480e      	ldr	r0, [pc, #56]	@ (811bcc0 <rand+0x74>)
 811bc88:	690b      	ldr	r3, [r1, #16]
 811bc8a:	694c      	ldr	r4, [r1, #20]
 811bc8c:	4a0d      	ldr	r2, [pc, #52]	@ (811bcc4 <rand+0x78>)
 811bc8e:	4358      	muls	r0, r3
 811bc90:	fb02 0004 	mla	r0, r2, r4, r0
 811bc94:	fba3 3202 	umull	r3, r2, r3, r2
 811bc98:	3301      	adds	r3, #1
 811bc9a:	eb40 0002 	adc.w	r0, r0, r2
 811bc9e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 811bca2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 811bca6:	bd10      	pop	{r4, pc}
 811bca8:	10000040 	.word	0x10000040
 811bcac:	0811fd64 	.word	0x0811fd64
 811bcb0:	0811fd7b 	.word	0x0811fd7b
 811bcb4:	abcd330e 	.word	0xabcd330e
 811bcb8:	e66d1234 	.word	0xe66d1234
 811bcbc:	0005deec 	.word	0x0005deec
 811bcc0:	5851f42d 	.word	0x5851f42d
 811bcc4:	4c957f2d 	.word	0x4c957f2d

0811bcc8 <std>:
 811bcc8:	2300      	movs	r3, #0
 811bcca:	b510      	push	{r4, lr}
 811bccc:	4604      	mov	r4, r0
 811bcce:	e9c0 3300 	strd	r3, r3, [r0]
 811bcd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 811bcd6:	6083      	str	r3, [r0, #8]
 811bcd8:	8181      	strh	r1, [r0, #12]
 811bcda:	6643      	str	r3, [r0, #100]	@ 0x64
 811bcdc:	81c2      	strh	r2, [r0, #14]
 811bcde:	6183      	str	r3, [r0, #24]
 811bce0:	4619      	mov	r1, r3
 811bce2:	2208      	movs	r2, #8
 811bce4:	305c      	adds	r0, #92	@ 0x5c
 811bce6:	f000 f930 	bl	811bf4a <memset>
 811bcea:	4b0d      	ldr	r3, [pc, #52]	@ (811bd20 <std+0x58>)
 811bcec:	6263      	str	r3, [r4, #36]	@ 0x24
 811bcee:	4b0d      	ldr	r3, [pc, #52]	@ (811bd24 <std+0x5c>)
 811bcf0:	62a3      	str	r3, [r4, #40]	@ 0x28
 811bcf2:	4b0d      	ldr	r3, [pc, #52]	@ (811bd28 <std+0x60>)
 811bcf4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 811bcf6:	4b0d      	ldr	r3, [pc, #52]	@ (811bd2c <std+0x64>)
 811bcf8:	6323      	str	r3, [r4, #48]	@ 0x30
 811bcfa:	4b0d      	ldr	r3, [pc, #52]	@ (811bd30 <std+0x68>)
 811bcfc:	6224      	str	r4, [r4, #32]
 811bcfe:	429c      	cmp	r4, r3
 811bd00:	d006      	beq.n	811bd10 <std+0x48>
 811bd02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 811bd06:	4294      	cmp	r4, r2
 811bd08:	d002      	beq.n	811bd10 <std+0x48>
 811bd0a:	33d0      	adds	r3, #208	@ 0xd0
 811bd0c:	429c      	cmp	r4, r3
 811bd0e:	d105      	bne.n	811bd1c <std+0x54>
 811bd10:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 811bd14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 811bd18:	f000 ba46 	b.w	811c1a8 <__retarget_lock_init_recursive>
 811bd1c:	bd10      	pop	{r4, pc}
 811bd1e:	bf00      	nop
 811bd20:	0811be71 	.word	0x0811be71
 811bd24:	0811be93 	.word	0x0811be93
 811bd28:	0811becb 	.word	0x0811becb
 811bd2c:	0811beef 	.word	0x0811beef
 811bd30:	10011d90 	.word	0x10011d90

0811bd34 <stdio_exit_handler>:
 811bd34:	4a02      	ldr	r2, [pc, #8]	@ (811bd40 <stdio_exit_handler+0xc>)
 811bd36:	4903      	ldr	r1, [pc, #12]	@ (811bd44 <stdio_exit_handler+0x10>)
 811bd38:	4803      	ldr	r0, [pc, #12]	@ (811bd48 <stdio_exit_handler+0x14>)
 811bd3a:	f000 b869 	b.w	811be10 <_fwalk_sglue>
 811bd3e:	bf00      	nop
 811bd40:	10000034 	.word	0x10000034
 811bd44:	0811c945 	.word	0x0811c945
 811bd48:	10000044 	.word	0x10000044

0811bd4c <cleanup_stdio>:
 811bd4c:	6841      	ldr	r1, [r0, #4]
 811bd4e:	4b0c      	ldr	r3, [pc, #48]	@ (811bd80 <cleanup_stdio+0x34>)
 811bd50:	4299      	cmp	r1, r3
 811bd52:	b510      	push	{r4, lr}
 811bd54:	4604      	mov	r4, r0
 811bd56:	d001      	beq.n	811bd5c <cleanup_stdio+0x10>
 811bd58:	f000 fdf4 	bl	811c944 <_fflush_r>
 811bd5c:	68a1      	ldr	r1, [r4, #8]
 811bd5e:	4b09      	ldr	r3, [pc, #36]	@ (811bd84 <cleanup_stdio+0x38>)
 811bd60:	4299      	cmp	r1, r3
 811bd62:	d002      	beq.n	811bd6a <cleanup_stdio+0x1e>
 811bd64:	4620      	mov	r0, r4
 811bd66:	f000 fded 	bl	811c944 <_fflush_r>
 811bd6a:	68e1      	ldr	r1, [r4, #12]
 811bd6c:	4b06      	ldr	r3, [pc, #24]	@ (811bd88 <cleanup_stdio+0x3c>)
 811bd6e:	4299      	cmp	r1, r3
 811bd70:	d004      	beq.n	811bd7c <cleanup_stdio+0x30>
 811bd72:	4620      	mov	r0, r4
 811bd74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 811bd78:	f000 bde4 	b.w	811c944 <_fflush_r>
 811bd7c:	bd10      	pop	{r4, pc}
 811bd7e:	bf00      	nop
 811bd80:	10011d90 	.word	0x10011d90
 811bd84:	10011df8 	.word	0x10011df8
 811bd88:	10011e60 	.word	0x10011e60

0811bd8c <global_stdio_init.part.0>:
 811bd8c:	b510      	push	{r4, lr}
 811bd8e:	4b0b      	ldr	r3, [pc, #44]	@ (811bdbc <global_stdio_init.part.0+0x30>)
 811bd90:	4c0b      	ldr	r4, [pc, #44]	@ (811bdc0 <global_stdio_init.part.0+0x34>)
 811bd92:	4a0c      	ldr	r2, [pc, #48]	@ (811bdc4 <global_stdio_init.part.0+0x38>)
 811bd94:	601a      	str	r2, [r3, #0]
 811bd96:	4620      	mov	r0, r4
 811bd98:	2200      	movs	r2, #0
 811bd9a:	2104      	movs	r1, #4
 811bd9c:	f7ff ff94 	bl	811bcc8 <std>
 811bda0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 811bda4:	2201      	movs	r2, #1
 811bda6:	2109      	movs	r1, #9
 811bda8:	f7ff ff8e 	bl	811bcc8 <std>
 811bdac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 811bdb0:	2202      	movs	r2, #2
 811bdb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 811bdb6:	2112      	movs	r1, #18
 811bdb8:	f7ff bf86 	b.w	811bcc8 <std>
 811bdbc:	10011ec8 	.word	0x10011ec8
 811bdc0:	10011d90 	.word	0x10011d90
 811bdc4:	0811bd35 	.word	0x0811bd35

0811bdc8 <__sfp_lock_acquire>:
 811bdc8:	4801      	ldr	r0, [pc, #4]	@ (811bdd0 <__sfp_lock_acquire+0x8>)
 811bdca:	f000 b9ee 	b.w	811c1aa <__retarget_lock_acquire_recursive>
 811bdce:	bf00      	nop
 811bdd0:	10011ed1 	.word	0x10011ed1

0811bdd4 <__sfp_lock_release>:
 811bdd4:	4801      	ldr	r0, [pc, #4]	@ (811bddc <__sfp_lock_release+0x8>)
 811bdd6:	f000 b9e9 	b.w	811c1ac <__retarget_lock_release_recursive>
 811bdda:	bf00      	nop
 811bddc:	10011ed1 	.word	0x10011ed1

0811bde0 <__sinit>:
 811bde0:	b510      	push	{r4, lr}
 811bde2:	4604      	mov	r4, r0
 811bde4:	f7ff fff0 	bl	811bdc8 <__sfp_lock_acquire>
 811bde8:	6a23      	ldr	r3, [r4, #32]
 811bdea:	b11b      	cbz	r3, 811bdf4 <__sinit+0x14>
 811bdec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 811bdf0:	f7ff bff0 	b.w	811bdd4 <__sfp_lock_release>
 811bdf4:	4b04      	ldr	r3, [pc, #16]	@ (811be08 <__sinit+0x28>)
 811bdf6:	6223      	str	r3, [r4, #32]
 811bdf8:	4b04      	ldr	r3, [pc, #16]	@ (811be0c <__sinit+0x2c>)
 811bdfa:	681b      	ldr	r3, [r3, #0]
 811bdfc:	2b00      	cmp	r3, #0
 811bdfe:	d1f5      	bne.n	811bdec <__sinit+0xc>
 811be00:	f7ff ffc4 	bl	811bd8c <global_stdio_init.part.0>
 811be04:	e7f2      	b.n	811bdec <__sinit+0xc>
 811be06:	bf00      	nop
 811be08:	0811bd4d 	.word	0x0811bd4d
 811be0c:	10011ec8 	.word	0x10011ec8

0811be10 <_fwalk_sglue>:
 811be10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 811be14:	4607      	mov	r7, r0
 811be16:	4688      	mov	r8, r1
 811be18:	4614      	mov	r4, r2
 811be1a:	2600      	movs	r6, #0
 811be1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 811be20:	f1b9 0901 	subs.w	r9, r9, #1
 811be24:	d505      	bpl.n	811be32 <_fwalk_sglue+0x22>
 811be26:	6824      	ldr	r4, [r4, #0]
 811be28:	2c00      	cmp	r4, #0
 811be2a:	d1f7      	bne.n	811be1c <_fwalk_sglue+0xc>
 811be2c:	4630      	mov	r0, r6
 811be2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 811be32:	89ab      	ldrh	r3, [r5, #12]
 811be34:	2b01      	cmp	r3, #1
 811be36:	d907      	bls.n	811be48 <_fwalk_sglue+0x38>
 811be38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 811be3c:	3301      	adds	r3, #1
 811be3e:	d003      	beq.n	811be48 <_fwalk_sglue+0x38>
 811be40:	4629      	mov	r1, r5
 811be42:	4638      	mov	r0, r7
 811be44:	47c0      	blx	r8
 811be46:	4306      	orrs	r6, r0
 811be48:	3568      	adds	r5, #104	@ 0x68
 811be4a:	e7e9      	b.n	811be20 <_fwalk_sglue+0x10>

0811be4c <iprintf>:
 811be4c:	b40f      	push	{r0, r1, r2, r3}
 811be4e:	b507      	push	{r0, r1, r2, lr}
 811be50:	4906      	ldr	r1, [pc, #24]	@ (811be6c <iprintf+0x20>)
 811be52:	ab04      	add	r3, sp, #16
 811be54:	6808      	ldr	r0, [r1, #0]
 811be56:	f853 2b04 	ldr.w	r2, [r3], #4
 811be5a:	6881      	ldr	r1, [r0, #8]
 811be5c:	9301      	str	r3, [sp, #4]
 811be5e:	f000 fa47 	bl	811c2f0 <_vfiprintf_r>
 811be62:	b003      	add	sp, #12
 811be64:	f85d eb04 	ldr.w	lr, [sp], #4
 811be68:	b004      	add	sp, #16
 811be6a:	4770      	bx	lr
 811be6c:	10000040 	.word	0x10000040

0811be70 <__sread>:
 811be70:	b510      	push	{r4, lr}
 811be72:	460c      	mov	r4, r1
 811be74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811be78:	f000 f92a 	bl	811c0d0 <_read_r>
 811be7c:	2800      	cmp	r0, #0
 811be7e:	bfab      	itete	ge
 811be80:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 811be82:	89a3      	ldrhlt	r3, [r4, #12]
 811be84:	181b      	addge	r3, r3, r0
 811be86:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 811be8a:	bfac      	ite	ge
 811be8c:	6563      	strge	r3, [r4, #84]	@ 0x54
 811be8e:	81a3      	strhlt	r3, [r4, #12]
 811be90:	bd10      	pop	{r4, pc}

0811be92 <__swrite>:
 811be92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 811be96:	461f      	mov	r7, r3
 811be98:	898b      	ldrh	r3, [r1, #12]
 811be9a:	05db      	lsls	r3, r3, #23
 811be9c:	4605      	mov	r5, r0
 811be9e:	460c      	mov	r4, r1
 811bea0:	4616      	mov	r6, r2
 811bea2:	d505      	bpl.n	811beb0 <__swrite+0x1e>
 811bea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811bea8:	2302      	movs	r3, #2
 811beaa:	2200      	movs	r2, #0
 811beac:	f000 f8fe 	bl	811c0ac <_lseek_r>
 811beb0:	89a3      	ldrh	r3, [r4, #12]
 811beb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 811beb6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 811beba:	81a3      	strh	r3, [r4, #12]
 811bebc:	4632      	mov	r2, r6
 811bebe:	463b      	mov	r3, r7
 811bec0:	4628      	mov	r0, r5
 811bec2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 811bec6:	f000 b939 	b.w	811c13c <_write_r>

0811beca <__sseek>:
 811beca:	b510      	push	{r4, lr}
 811becc:	460c      	mov	r4, r1
 811bece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811bed2:	f000 f8eb 	bl	811c0ac <_lseek_r>
 811bed6:	1c43      	adds	r3, r0, #1
 811bed8:	89a3      	ldrh	r3, [r4, #12]
 811beda:	bf15      	itete	ne
 811bedc:	6560      	strne	r0, [r4, #84]	@ 0x54
 811bede:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 811bee2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 811bee6:	81a3      	strheq	r3, [r4, #12]
 811bee8:	bf18      	it	ne
 811beea:	81a3      	strhne	r3, [r4, #12]
 811beec:	bd10      	pop	{r4, pc}

0811beee <__sclose>:
 811beee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811bef2:	f000 b875 	b.w	811bfe0 <_close_r>

0811bef6 <memcmp>:
 811bef6:	b510      	push	{r4, lr}
 811bef8:	3901      	subs	r1, #1
 811befa:	4402      	add	r2, r0
 811befc:	4290      	cmp	r0, r2
 811befe:	d101      	bne.n	811bf04 <memcmp+0xe>
 811bf00:	2000      	movs	r0, #0
 811bf02:	e005      	b.n	811bf10 <memcmp+0x1a>
 811bf04:	7803      	ldrb	r3, [r0, #0]
 811bf06:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 811bf0a:	42a3      	cmp	r3, r4
 811bf0c:	d001      	beq.n	811bf12 <memcmp+0x1c>
 811bf0e:	1b18      	subs	r0, r3, r4
 811bf10:	bd10      	pop	{r4, pc}
 811bf12:	3001      	adds	r0, #1
 811bf14:	e7f2      	b.n	811befc <memcmp+0x6>

0811bf16 <memmove>:
 811bf16:	4288      	cmp	r0, r1
 811bf18:	b510      	push	{r4, lr}
 811bf1a:	eb01 0402 	add.w	r4, r1, r2
 811bf1e:	d902      	bls.n	811bf26 <memmove+0x10>
 811bf20:	4284      	cmp	r4, r0
 811bf22:	4623      	mov	r3, r4
 811bf24:	d807      	bhi.n	811bf36 <memmove+0x20>
 811bf26:	1e43      	subs	r3, r0, #1
 811bf28:	42a1      	cmp	r1, r4
 811bf2a:	d008      	beq.n	811bf3e <memmove+0x28>
 811bf2c:	f811 2b01 	ldrb.w	r2, [r1], #1
 811bf30:	f803 2f01 	strb.w	r2, [r3, #1]!
 811bf34:	e7f8      	b.n	811bf28 <memmove+0x12>
 811bf36:	4402      	add	r2, r0
 811bf38:	4601      	mov	r1, r0
 811bf3a:	428a      	cmp	r2, r1
 811bf3c:	d100      	bne.n	811bf40 <memmove+0x2a>
 811bf3e:	bd10      	pop	{r4, pc}
 811bf40:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 811bf44:	f802 4d01 	strb.w	r4, [r2, #-1]!
 811bf48:	e7f7      	b.n	811bf3a <memmove+0x24>

0811bf4a <memset>:
 811bf4a:	4402      	add	r2, r0
 811bf4c:	4603      	mov	r3, r0
 811bf4e:	4293      	cmp	r3, r2
 811bf50:	d100      	bne.n	811bf54 <memset+0xa>
 811bf52:	4770      	bx	lr
 811bf54:	f803 1b01 	strb.w	r1, [r3], #1
 811bf58:	e7f9      	b.n	811bf4e <memset+0x4>

0811bf5a <strncpy>:
 811bf5a:	b510      	push	{r4, lr}
 811bf5c:	3901      	subs	r1, #1
 811bf5e:	4603      	mov	r3, r0
 811bf60:	b132      	cbz	r2, 811bf70 <strncpy+0x16>
 811bf62:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 811bf66:	f803 4b01 	strb.w	r4, [r3], #1
 811bf6a:	3a01      	subs	r2, #1
 811bf6c:	2c00      	cmp	r4, #0
 811bf6e:	d1f7      	bne.n	811bf60 <strncpy+0x6>
 811bf70:	441a      	add	r2, r3
 811bf72:	2100      	movs	r1, #0
 811bf74:	4293      	cmp	r3, r2
 811bf76:	d100      	bne.n	811bf7a <strncpy+0x20>
 811bf78:	bd10      	pop	{r4, pc}
 811bf7a:	f803 1b01 	strb.w	r1, [r3], #1
 811bf7e:	e7f9      	b.n	811bf74 <strncpy+0x1a>

0811bf80 <_raise_r>:
 811bf80:	291f      	cmp	r1, #31
 811bf82:	b538      	push	{r3, r4, r5, lr}
 811bf84:	4605      	mov	r5, r0
 811bf86:	460c      	mov	r4, r1
 811bf88:	d904      	bls.n	811bf94 <_raise_r+0x14>
 811bf8a:	2316      	movs	r3, #22
 811bf8c:	6003      	str	r3, [r0, #0]
 811bf8e:	f04f 30ff 	mov.w	r0, #4294967295
 811bf92:	bd38      	pop	{r3, r4, r5, pc}
 811bf94:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 811bf96:	b112      	cbz	r2, 811bf9e <_raise_r+0x1e>
 811bf98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 811bf9c:	b94b      	cbnz	r3, 811bfb2 <_raise_r+0x32>
 811bf9e:	4628      	mov	r0, r5
 811bfa0:	f000 f8ba 	bl	811c118 <_getpid_r>
 811bfa4:	4622      	mov	r2, r4
 811bfa6:	4601      	mov	r1, r0
 811bfa8:	4628      	mov	r0, r5
 811bfaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 811bfae:	f000 b8a1 	b.w	811c0f4 <_kill_r>
 811bfb2:	2b01      	cmp	r3, #1
 811bfb4:	d00a      	beq.n	811bfcc <_raise_r+0x4c>
 811bfb6:	1c59      	adds	r1, r3, #1
 811bfb8:	d103      	bne.n	811bfc2 <_raise_r+0x42>
 811bfba:	2316      	movs	r3, #22
 811bfbc:	6003      	str	r3, [r0, #0]
 811bfbe:	2001      	movs	r0, #1
 811bfc0:	e7e7      	b.n	811bf92 <_raise_r+0x12>
 811bfc2:	2100      	movs	r1, #0
 811bfc4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 811bfc8:	4620      	mov	r0, r4
 811bfca:	4798      	blx	r3
 811bfcc:	2000      	movs	r0, #0
 811bfce:	e7e0      	b.n	811bf92 <_raise_r+0x12>

0811bfd0 <raise>:
 811bfd0:	4b02      	ldr	r3, [pc, #8]	@ (811bfdc <raise+0xc>)
 811bfd2:	4601      	mov	r1, r0
 811bfd4:	6818      	ldr	r0, [r3, #0]
 811bfd6:	f7ff bfd3 	b.w	811bf80 <_raise_r>
 811bfda:	bf00      	nop
 811bfdc:	10000040 	.word	0x10000040

0811bfe0 <_close_r>:
 811bfe0:	b538      	push	{r3, r4, r5, lr}
 811bfe2:	4d06      	ldr	r5, [pc, #24]	@ (811bffc <_close_r+0x1c>)
 811bfe4:	2300      	movs	r3, #0
 811bfe6:	4604      	mov	r4, r0
 811bfe8:	4608      	mov	r0, r1
 811bfea:	602b      	str	r3, [r5, #0]
 811bfec:	f7e4 fe78 	bl	8100ce0 <_close>
 811bff0:	1c43      	adds	r3, r0, #1
 811bff2:	d102      	bne.n	811bffa <_close_r+0x1a>
 811bff4:	682b      	ldr	r3, [r5, #0]
 811bff6:	b103      	cbz	r3, 811bffa <_close_r+0x1a>
 811bff8:	6023      	str	r3, [r4, #0]
 811bffa:	bd38      	pop	{r3, r4, r5, pc}
 811bffc:	10011ecc 	.word	0x10011ecc

0811c000 <_reclaim_reent>:
 811c000:	4b29      	ldr	r3, [pc, #164]	@ (811c0a8 <_reclaim_reent+0xa8>)
 811c002:	681b      	ldr	r3, [r3, #0]
 811c004:	4283      	cmp	r3, r0
 811c006:	b570      	push	{r4, r5, r6, lr}
 811c008:	4604      	mov	r4, r0
 811c00a:	d04b      	beq.n	811c0a4 <_reclaim_reent+0xa4>
 811c00c:	69c3      	ldr	r3, [r0, #28]
 811c00e:	b1ab      	cbz	r3, 811c03c <_reclaim_reent+0x3c>
 811c010:	68db      	ldr	r3, [r3, #12]
 811c012:	b16b      	cbz	r3, 811c030 <_reclaim_reent+0x30>
 811c014:	2500      	movs	r5, #0
 811c016:	69e3      	ldr	r3, [r4, #28]
 811c018:	68db      	ldr	r3, [r3, #12]
 811c01a:	5959      	ldr	r1, [r3, r5]
 811c01c:	2900      	cmp	r1, #0
 811c01e:	d13b      	bne.n	811c098 <_reclaim_reent+0x98>
 811c020:	3504      	adds	r5, #4
 811c022:	2d80      	cmp	r5, #128	@ 0x80
 811c024:	d1f7      	bne.n	811c016 <_reclaim_reent+0x16>
 811c026:	69e3      	ldr	r3, [r4, #28]
 811c028:	4620      	mov	r0, r4
 811c02a:	68d9      	ldr	r1, [r3, #12]
 811c02c:	f000 f8ec 	bl	811c208 <_free_r>
 811c030:	69e3      	ldr	r3, [r4, #28]
 811c032:	6819      	ldr	r1, [r3, #0]
 811c034:	b111      	cbz	r1, 811c03c <_reclaim_reent+0x3c>
 811c036:	4620      	mov	r0, r4
 811c038:	f000 f8e6 	bl	811c208 <_free_r>
 811c03c:	6961      	ldr	r1, [r4, #20]
 811c03e:	b111      	cbz	r1, 811c046 <_reclaim_reent+0x46>
 811c040:	4620      	mov	r0, r4
 811c042:	f000 f8e1 	bl	811c208 <_free_r>
 811c046:	69e1      	ldr	r1, [r4, #28]
 811c048:	b111      	cbz	r1, 811c050 <_reclaim_reent+0x50>
 811c04a:	4620      	mov	r0, r4
 811c04c:	f000 f8dc 	bl	811c208 <_free_r>
 811c050:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 811c052:	b111      	cbz	r1, 811c05a <_reclaim_reent+0x5a>
 811c054:	4620      	mov	r0, r4
 811c056:	f000 f8d7 	bl	811c208 <_free_r>
 811c05a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 811c05c:	b111      	cbz	r1, 811c064 <_reclaim_reent+0x64>
 811c05e:	4620      	mov	r0, r4
 811c060:	f000 f8d2 	bl	811c208 <_free_r>
 811c064:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 811c066:	b111      	cbz	r1, 811c06e <_reclaim_reent+0x6e>
 811c068:	4620      	mov	r0, r4
 811c06a:	f000 f8cd 	bl	811c208 <_free_r>
 811c06e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 811c070:	b111      	cbz	r1, 811c078 <_reclaim_reent+0x78>
 811c072:	4620      	mov	r0, r4
 811c074:	f000 f8c8 	bl	811c208 <_free_r>
 811c078:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 811c07a:	b111      	cbz	r1, 811c082 <_reclaim_reent+0x82>
 811c07c:	4620      	mov	r0, r4
 811c07e:	f000 f8c3 	bl	811c208 <_free_r>
 811c082:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 811c084:	b111      	cbz	r1, 811c08c <_reclaim_reent+0x8c>
 811c086:	4620      	mov	r0, r4
 811c088:	f000 f8be 	bl	811c208 <_free_r>
 811c08c:	6a23      	ldr	r3, [r4, #32]
 811c08e:	b14b      	cbz	r3, 811c0a4 <_reclaim_reent+0xa4>
 811c090:	4620      	mov	r0, r4
 811c092:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 811c096:	4718      	bx	r3
 811c098:	680e      	ldr	r6, [r1, #0]
 811c09a:	4620      	mov	r0, r4
 811c09c:	f000 f8b4 	bl	811c208 <_free_r>
 811c0a0:	4631      	mov	r1, r6
 811c0a2:	e7bb      	b.n	811c01c <_reclaim_reent+0x1c>
 811c0a4:	bd70      	pop	{r4, r5, r6, pc}
 811c0a6:	bf00      	nop
 811c0a8:	10000040 	.word	0x10000040

0811c0ac <_lseek_r>:
 811c0ac:	b538      	push	{r3, r4, r5, lr}
 811c0ae:	4d07      	ldr	r5, [pc, #28]	@ (811c0cc <_lseek_r+0x20>)
 811c0b0:	4604      	mov	r4, r0
 811c0b2:	4608      	mov	r0, r1
 811c0b4:	4611      	mov	r1, r2
 811c0b6:	2200      	movs	r2, #0
 811c0b8:	602a      	str	r2, [r5, #0]
 811c0ba:	461a      	mov	r2, r3
 811c0bc:	f7e4 fe37 	bl	8100d2e <_lseek>
 811c0c0:	1c43      	adds	r3, r0, #1
 811c0c2:	d102      	bne.n	811c0ca <_lseek_r+0x1e>
 811c0c4:	682b      	ldr	r3, [r5, #0]
 811c0c6:	b103      	cbz	r3, 811c0ca <_lseek_r+0x1e>
 811c0c8:	6023      	str	r3, [r4, #0]
 811c0ca:	bd38      	pop	{r3, r4, r5, pc}
 811c0cc:	10011ecc 	.word	0x10011ecc

0811c0d0 <_read_r>:
 811c0d0:	b538      	push	{r3, r4, r5, lr}
 811c0d2:	4d07      	ldr	r5, [pc, #28]	@ (811c0f0 <_read_r+0x20>)
 811c0d4:	4604      	mov	r4, r0
 811c0d6:	4608      	mov	r0, r1
 811c0d8:	4611      	mov	r1, r2
 811c0da:	2200      	movs	r2, #0
 811c0dc:	602a      	str	r2, [r5, #0]
 811c0de:	461a      	mov	r2, r3
 811c0e0:	f7e4 fdc5 	bl	8100c6e <_read>
 811c0e4:	1c43      	adds	r3, r0, #1
 811c0e6:	d102      	bne.n	811c0ee <_read_r+0x1e>
 811c0e8:	682b      	ldr	r3, [r5, #0]
 811c0ea:	b103      	cbz	r3, 811c0ee <_read_r+0x1e>
 811c0ec:	6023      	str	r3, [r4, #0]
 811c0ee:	bd38      	pop	{r3, r4, r5, pc}
 811c0f0:	10011ecc 	.word	0x10011ecc

0811c0f4 <_kill_r>:
 811c0f4:	b538      	push	{r3, r4, r5, lr}
 811c0f6:	4d07      	ldr	r5, [pc, #28]	@ (811c114 <_kill_r+0x20>)
 811c0f8:	2300      	movs	r3, #0
 811c0fa:	4604      	mov	r4, r0
 811c0fc:	4608      	mov	r0, r1
 811c0fe:	4611      	mov	r1, r2
 811c100:	602b      	str	r3, [r5, #0]
 811c102:	f7e4 fd97 	bl	8100c34 <_kill>
 811c106:	1c43      	adds	r3, r0, #1
 811c108:	d102      	bne.n	811c110 <_kill_r+0x1c>
 811c10a:	682b      	ldr	r3, [r5, #0]
 811c10c:	b103      	cbz	r3, 811c110 <_kill_r+0x1c>
 811c10e:	6023      	str	r3, [r4, #0]
 811c110:	bd38      	pop	{r3, r4, r5, pc}
 811c112:	bf00      	nop
 811c114:	10011ecc 	.word	0x10011ecc

0811c118 <_getpid_r>:
 811c118:	f7e4 bd84 	b.w	8100c24 <_getpid>

0811c11c <_sbrk_r>:
 811c11c:	b538      	push	{r3, r4, r5, lr}
 811c11e:	4d06      	ldr	r5, [pc, #24]	@ (811c138 <_sbrk_r+0x1c>)
 811c120:	2300      	movs	r3, #0
 811c122:	4604      	mov	r4, r0
 811c124:	4608      	mov	r0, r1
 811c126:	602b      	str	r3, [r5, #0]
 811c128:	f7e4 fe0e 	bl	8100d48 <_sbrk>
 811c12c:	1c43      	adds	r3, r0, #1
 811c12e:	d102      	bne.n	811c136 <_sbrk_r+0x1a>
 811c130:	682b      	ldr	r3, [r5, #0]
 811c132:	b103      	cbz	r3, 811c136 <_sbrk_r+0x1a>
 811c134:	6023      	str	r3, [r4, #0]
 811c136:	bd38      	pop	{r3, r4, r5, pc}
 811c138:	10011ecc 	.word	0x10011ecc

0811c13c <_write_r>:
 811c13c:	b538      	push	{r3, r4, r5, lr}
 811c13e:	4d07      	ldr	r5, [pc, #28]	@ (811c15c <_write_r+0x20>)
 811c140:	4604      	mov	r4, r0
 811c142:	4608      	mov	r0, r1
 811c144:	4611      	mov	r1, r2
 811c146:	2200      	movs	r2, #0
 811c148:	602a      	str	r2, [r5, #0]
 811c14a:	461a      	mov	r2, r3
 811c14c:	f7e4 fdac 	bl	8100ca8 <_write>
 811c150:	1c43      	adds	r3, r0, #1
 811c152:	d102      	bne.n	811c15a <_write_r+0x1e>
 811c154:	682b      	ldr	r3, [r5, #0]
 811c156:	b103      	cbz	r3, 811c15a <_write_r+0x1e>
 811c158:	6023      	str	r3, [r4, #0]
 811c15a:	bd38      	pop	{r3, r4, r5, pc}
 811c15c:	10011ecc 	.word	0x10011ecc

0811c160 <__libc_init_array>:
 811c160:	b570      	push	{r4, r5, r6, lr}
 811c162:	4d0d      	ldr	r5, [pc, #52]	@ (811c198 <__libc_init_array+0x38>)
 811c164:	4c0d      	ldr	r4, [pc, #52]	@ (811c19c <__libc_init_array+0x3c>)
 811c166:	1b64      	subs	r4, r4, r5
 811c168:	10a4      	asrs	r4, r4, #2
 811c16a:	2600      	movs	r6, #0
 811c16c:	42a6      	cmp	r6, r4
 811c16e:	d109      	bne.n	811c184 <__libc_init_array+0x24>
 811c170:	4d0b      	ldr	r5, [pc, #44]	@ (811c1a0 <__libc_init_array+0x40>)
 811c172:	4c0c      	ldr	r4, [pc, #48]	@ (811c1a4 <__libc_init_array+0x44>)
 811c174:	f000 fd38 	bl	811cbe8 <_init>
 811c178:	1b64      	subs	r4, r4, r5
 811c17a:	10a4      	asrs	r4, r4, #2
 811c17c:	2600      	movs	r6, #0
 811c17e:	42a6      	cmp	r6, r4
 811c180:	d105      	bne.n	811c18e <__libc_init_array+0x2e>
 811c182:	bd70      	pop	{r4, r5, r6, pc}
 811c184:	f855 3b04 	ldr.w	r3, [r5], #4
 811c188:	4798      	blx	r3
 811c18a:	3601      	adds	r6, #1
 811c18c:	e7ee      	b.n	811c16c <__libc_init_array+0xc>
 811c18e:	f855 3b04 	ldr.w	r3, [r5], #4
 811c192:	4798      	blx	r3
 811c194:	3601      	adds	r6, #1
 811c196:	e7f2      	b.n	811c17e <__libc_init_array+0x1e>
 811c198:	0811fe4c 	.word	0x0811fe4c
 811c19c:	0811fe4c 	.word	0x0811fe4c
 811c1a0:	0811fe4c 	.word	0x0811fe4c
 811c1a4:	0811fe54 	.word	0x0811fe54

0811c1a8 <__retarget_lock_init_recursive>:
 811c1a8:	4770      	bx	lr

0811c1aa <__retarget_lock_acquire_recursive>:
 811c1aa:	4770      	bx	lr

0811c1ac <__retarget_lock_release_recursive>:
 811c1ac:	4770      	bx	lr

0811c1ae <memcpy>:
 811c1ae:	440a      	add	r2, r1
 811c1b0:	4291      	cmp	r1, r2
 811c1b2:	f100 33ff 	add.w	r3, r0, #4294967295
 811c1b6:	d100      	bne.n	811c1ba <memcpy+0xc>
 811c1b8:	4770      	bx	lr
 811c1ba:	b510      	push	{r4, lr}
 811c1bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 811c1c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 811c1c4:	4291      	cmp	r1, r2
 811c1c6:	d1f9      	bne.n	811c1bc <memcpy+0xe>
 811c1c8:	bd10      	pop	{r4, pc}
	...

0811c1cc <__assert_func>:
 811c1cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 811c1ce:	4614      	mov	r4, r2
 811c1d0:	461a      	mov	r2, r3
 811c1d2:	4b09      	ldr	r3, [pc, #36]	@ (811c1f8 <__assert_func+0x2c>)
 811c1d4:	681b      	ldr	r3, [r3, #0]
 811c1d6:	4605      	mov	r5, r0
 811c1d8:	68d8      	ldr	r0, [r3, #12]
 811c1da:	b954      	cbnz	r4, 811c1f2 <__assert_func+0x26>
 811c1dc:	4b07      	ldr	r3, [pc, #28]	@ (811c1fc <__assert_func+0x30>)
 811c1de:	461c      	mov	r4, r3
 811c1e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 811c1e4:	9100      	str	r1, [sp, #0]
 811c1e6:	462b      	mov	r3, r5
 811c1e8:	4905      	ldr	r1, [pc, #20]	@ (811c200 <__assert_func+0x34>)
 811c1ea:	f000 fbd3 	bl	811c994 <fiprintf>
 811c1ee:	f7ff fc67 	bl	811bac0 <abort>
 811c1f2:	4b04      	ldr	r3, [pc, #16]	@ (811c204 <__assert_func+0x38>)
 811c1f4:	e7f4      	b.n	811c1e0 <__assert_func+0x14>
 811c1f6:	bf00      	nop
 811c1f8:	10000040 	.word	0x10000040
 811c1fc:	0811fe0e 	.word	0x0811fe0e
 811c200:	0811fde0 	.word	0x0811fde0
 811c204:	0811fdd3 	.word	0x0811fdd3

0811c208 <_free_r>:
 811c208:	b538      	push	{r3, r4, r5, lr}
 811c20a:	4605      	mov	r5, r0
 811c20c:	2900      	cmp	r1, #0
 811c20e:	d041      	beq.n	811c294 <_free_r+0x8c>
 811c210:	f851 3c04 	ldr.w	r3, [r1, #-4]
 811c214:	1f0c      	subs	r4, r1, #4
 811c216:	2b00      	cmp	r3, #0
 811c218:	bfb8      	it	lt
 811c21a:	18e4      	addlt	r4, r4, r3
 811c21c:	f7ff fd0a 	bl	811bc34 <__malloc_lock>
 811c220:	4a1d      	ldr	r2, [pc, #116]	@ (811c298 <_free_r+0x90>)
 811c222:	6813      	ldr	r3, [r2, #0]
 811c224:	b933      	cbnz	r3, 811c234 <_free_r+0x2c>
 811c226:	6063      	str	r3, [r4, #4]
 811c228:	6014      	str	r4, [r2, #0]
 811c22a:	4628      	mov	r0, r5
 811c22c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 811c230:	f7ff bd06 	b.w	811bc40 <__malloc_unlock>
 811c234:	42a3      	cmp	r3, r4
 811c236:	d908      	bls.n	811c24a <_free_r+0x42>
 811c238:	6820      	ldr	r0, [r4, #0]
 811c23a:	1821      	adds	r1, r4, r0
 811c23c:	428b      	cmp	r3, r1
 811c23e:	bf01      	itttt	eq
 811c240:	6819      	ldreq	r1, [r3, #0]
 811c242:	685b      	ldreq	r3, [r3, #4]
 811c244:	1809      	addeq	r1, r1, r0
 811c246:	6021      	streq	r1, [r4, #0]
 811c248:	e7ed      	b.n	811c226 <_free_r+0x1e>
 811c24a:	461a      	mov	r2, r3
 811c24c:	685b      	ldr	r3, [r3, #4]
 811c24e:	b10b      	cbz	r3, 811c254 <_free_r+0x4c>
 811c250:	42a3      	cmp	r3, r4
 811c252:	d9fa      	bls.n	811c24a <_free_r+0x42>
 811c254:	6811      	ldr	r1, [r2, #0]
 811c256:	1850      	adds	r0, r2, r1
 811c258:	42a0      	cmp	r0, r4
 811c25a:	d10b      	bne.n	811c274 <_free_r+0x6c>
 811c25c:	6820      	ldr	r0, [r4, #0]
 811c25e:	4401      	add	r1, r0
 811c260:	1850      	adds	r0, r2, r1
 811c262:	4283      	cmp	r3, r0
 811c264:	6011      	str	r1, [r2, #0]
 811c266:	d1e0      	bne.n	811c22a <_free_r+0x22>
 811c268:	6818      	ldr	r0, [r3, #0]
 811c26a:	685b      	ldr	r3, [r3, #4]
 811c26c:	6053      	str	r3, [r2, #4]
 811c26e:	4408      	add	r0, r1
 811c270:	6010      	str	r0, [r2, #0]
 811c272:	e7da      	b.n	811c22a <_free_r+0x22>
 811c274:	d902      	bls.n	811c27c <_free_r+0x74>
 811c276:	230c      	movs	r3, #12
 811c278:	602b      	str	r3, [r5, #0]
 811c27a:	e7d6      	b.n	811c22a <_free_r+0x22>
 811c27c:	6820      	ldr	r0, [r4, #0]
 811c27e:	1821      	adds	r1, r4, r0
 811c280:	428b      	cmp	r3, r1
 811c282:	bf04      	itt	eq
 811c284:	6819      	ldreq	r1, [r3, #0]
 811c286:	685b      	ldreq	r3, [r3, #4]
 811c288:	6063      	str	r3, [r4, #4]
 811c28a:	bf04      	itt	eq
 811c28c:	1809      	addeq	r1, r1, r0
 811c28e:	6021      	streq	r1, [r4, #0]
 811c290:	6054      	str	r4, [r2, #4]
 811c292:	e7ca      	b.n	811c22a <_free_r+0x22>
 811c294:	bd38      	pop	{r3, r4, r5, pc}
 811c296:	bf00      	nop
 811c298:	10011d8c 	.word	0x10011d8c

0811c29c <__sfputc_r>:
 811c29c:	6893      	ldr	r3, [r2, #8]
 811c29e:	3b01      	subs	r3, #1
 811c2a0:	2b00      	cmp	r3, #0
 811c2a2:	b410      	push	{r4}
 811c2a4:	6093      	str	r3, [r2, #8]
 811c2a6:	da08      	bge.n	811c2ba <__sfputc_r+0x1e>
 811c2a8:	6994      	ldr	r4, [r2, #24]
 811c2aa:	42a3      	cmp	r3, r4
 811c2ac:	db01      	blt.n	811c2b2 <__sfputc_r+0x16>
 811c2ae:	290a      	cmp	r1, #10
 811c2b0:	d103      	bne.n	811c2ba <__sfputc_r+0x1e>
 811c2b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 811c2b6:	f000 bb7f 	b.w	811c9b8 <__swbuf_r>
 811c2ba:	6813      	ldr	r3, [r2, #0]
 811c2bc:	1c58      	adds	r0, r3, #1
 811c2be:	6010      	str	r0, [r2, #0]
 811c2c0:	7019      	strb	r1, [r3, #0]
 811c2c2:	4608      	mov	r0, r1
 811c2c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 811c2c8:	4770      	bx	lr

0811c2ca <__sfputs_r>:
 811c2ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811c2cc:	4606      	mov	r6, r0
 811c2ce:	460f      	mov	r7, r1
 811c2d0:	4614      	mov	r4, r2
 811c2d2:	18d5      	adds	r5, r2, r3
 811c2d4:	42ac      	cmp	r4, r5
 811c2d6:	d101      	bne.n	811c2dc <__sfputs_r+0x12>
 811c2d8:	2000      	movs	r0, #0
 811c2da:	e007      	b.n	811c2ec <__sfputs_r+0x22>
 811c2dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 811c2e0:	463a      	mov	r2, r7
 811c2e2:	4630      	mov	r0, r6
 811c2e4:	f7ff ffda 	bl	811c29c <__sfputc_r>
 811c2e8:	1c43      	adds	r3, r0, #1
 811c2ea:	d1f3      	bne.n	811c2d4 <__sfputs_r+0xa>
 811c2ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0811c2f0 <_vfiprintf_r>:
 811c2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 811c2f4:	460d      	mov	r5, r1
 811c2f6:	b09d      	sub	sp, #116	@ 0x74
 811c2f8:	4614      	mov	r4, r2
 811c2fa:	4698      	mov	r8, r3
 811c2fc:	4606      	mov	r6, r0
 811c2fe:	b118      	cbz	r0, 811c308 <_vfiprintf_r+0x18>
 811c300:	6a03      	ldr	r3, [r0, #32]
 811c302:	b90b      	cbnz	r3, 811c308 <_vfiprintf_r+0x18>
 811c304:	f7ff fd6c 	bl	811bde0 <__sinit>
 811c308:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 811c30a:	07d9      	lsls	r1, r3, #31
 811c30c:	d405      	bmi.n	811c31a <_vfiprintf_r+0x2a>
 811c30e:	89ab      	ldrh	r3, [r5, #12]
 811c310:	059a      	lsls	r2, r3, #22
 811c312:	d402      	bmi.n	811c31a <_vfiprintf_r+0x2a>
 811c314:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 811c316:	f7ff ff48 	bl	811c1aa <__retarget_lock_acquire_recursive>
 811c31a:	89ab      	ldrh	r3, [r5, #12]
 811c31c:	071b      	lsls	r3, r3, #28
 811c31e:	d501      	bpl.n	811c324 <_vfiprintf_r+0x34>
 811c320:	692b      	ldr	r3, [r5, #16]
 811c322:	b99b      	cbnz	r3, 811c34c <_vfiprintf_r+0x5c>
 811c324:	4629      	mov	r1, r5
 811c326:	4630      	mov	r0, r6
 811c328:	f000 fb84 	bl	811ca34 <__swsetup_r>
 811c32c:	b170      	cbz	r0, 811c34c <_vfiprintf_r+0x5c>
 811c32e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 811c330:	07dc      	lsls	r4, r3, #31
 811c332:	d504      	bpl.n	811c33e <_vfiprintf_r+0x4e>
 811c334:	f04f 30ff 	mov.w	r0, #4294967295
 811c338:	b01d      	add	sp, #116	@ 0x74
 811c33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811c33e:	89ab      	ldrh	r3, [r5, #12]
 811c340:	0598      	lsls	r0, r3, #22
 811c342:	d4f7      	bmi.n	811c334 <_vfiprintf_r+0x44>
 811c344:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 811c346:	f7ff ff31 	bl	811c1ac <__retarget_lock_release_recursive>
 811c34a:	e7f3      	b.n	811c334 <_vfiprintf_r+0x44>
 811c34c:	2300      	movs	r3, #0
 811c34e:	9309      	str	r3, [sp, #36]	@ 0x24
 811c350:	2320      	movs	r3, #32
 811c352:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 811c356:	f8cd 800c 	str.w	r8, [sp, #12]
 811c35a:	2330      	movs	r3, #48	@ 0x30
 811c35c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 811c50c <_vfiprintf_r+0x21c>
 811c360:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 811c364:	f04f 0901 	mov.w	r9, #1
 811c368:	4623      	mov	r3, r4
 811c36a:	469a      	mov	sl, r3
 811c36c:	f813 2b01 	ldrb.w	r2, [r3], #1
 811c370:	b10a      	cbz	r2, 811c376 <_vfiprintf_r+0x86>
 811c372:	2a25      	cmp	r2, #37	@ 0x25
 811c374:	d1f9      	bne.n	811c36a <_vfiprintf_r+0x7a>
 811c376:	ebba 0b04 	subs.w	fp, sl, r4
 811c37a:	d00b      	beq.n	811c394 <_vfiprintf_r+0xa4>
 811c37c:	465b      	mov	r3, fp
 811c37e:	4622      	mov	r2, r4
 811c380:	4629      	mov	r1, r5
 811c382:	4630      	mov	r0, r6
 811c384:	f7ff ffa1 	bl	811c2ca <__sfputs_r>
 811c388:	3001      	adds	r0, #1
 811c38a:	f000 80a7 	beq.w	811c4dc <_vfiprintf_r+0x1ec>
 811c38e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 811c390:	445a      	add	r2, fp
 811c392:	9209      	str	r2, [sp, #36]	@ 0x24
 811c394:	f89a 3000 	ldrb.w	r3, [sl]
 811c398:	2b00      	cmp	r3, #0
 811c39a:	f000 809f 	beq.w	811c4dc <_vfiprintf_r+0x1ec>
 811c39e:	2300      	movs	r3, #0
 811c3a0:	f04f 32ff 	mov.w	r2, #4294967295
 811c3a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 811c3a8:	f10a 0a01 	add.w	sl, sl, #1
 811c3ac:	9304      	str	r3, [sp, #16]
 811c3ae:	9307      	str	r3, [sp, #28]
 811c3b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 811c3b4:	931a      	str	r3, [sp, #104]	@ 0x68
 811c3b6:	4654      	mov	r4, sl
 811c3b8:	2205      	movs	r2, #5
 811c3ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 811c3be:	4853      	ldr	r0, [pc, #332]	@ (811c50c <_vfiprintf_r+0x21c>)
 811c3c0:	f7e3 ff96 	bl	81002f0 <memchr>
 811c3c4:	9a04      	ldr	r2, [sp, #16]
 811c3c6:	b9d8      	cbnz	r0, 811c400 <_vfiprintf_r+0x110>
 811c3c8:	06d1      	lsls	r1, r2, #27
 811c3ca:	bf44      	itt	mi
 811c3cc:	2320      	movmi	r3, #32
 811c3ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 811c3d2:	0713      	lsls	r3, r2, #28
 811c3d4:	bf44      	itt	mi
 811c3d6:	232b      	movmi	r3, #43	@ 0x2b
 811c3d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 811c3dc:	f89a 3000 	ldrb.w	r3, [sl]
 811c3e0:	2b2a      	cmp	r3, #42	@ 0x2a
 811c3e2:	d015      	beq.n	811c410 <_vfiprintf_r+0x120>
 811c3e4:	9a07      	ldr	r2, [sp, #28]
 811c3e6:	4654      	mov	r4, sl
 811c3e8:	2000      	movs	r0, #0
 811c3ea:	f04f 0c0a 	mov.w	ip, #10
 811c3ee:	4621      	mov	r1, r4
 811c3f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 811c3f4:	3b30      	subs	r3, #48	@ 0x30
 811c3f6:	2b09      	cmp	r3, #9
 811c3f8:	d94b      	bls.n	811c492 <_vfiprintf_r+0x1a2>
 811c3fa:	b1b0      	cbz	r0, 811c42a <_vfiprintf_r+0x13a>
 811c3fc:	9207      	str	r2, [sp, #28]
 811c3fe:	e014      	b.n	811c42a <_vfiprintf_r+0x13a>
 811c400:	eba0 0308 	sub.w	r3, r0, r8
 811c404:	fa09 f303 	lsl.w	r3, r9, r3
 811c408:	4313      	orrs	r3, r2
 811c40a:	9304      	str	r3, [sp, #16]
 811c40c:	46a2      	mov	sl, r4
 811c40e:	e7d2      	b.n	811c3b6 <_vfiprintf_r+0xc6>
 811c410:	9b03      	ldr	r3, [sp, #12]
 811c412:	1d19      	adds	r1, r3, #4
 811c414:	681b      	ldr	r3, [r3, #0]
 811c416:	9103      	str	r1, [sp, #12]
 811c418:	2b00      	cmp	r3, #0
 811c41a:	bfbb      	ittet	lt
 811c41c:	425b      	neglt	r3, r3
 811c41e:	f042 0202 	orrlt.w	r2, r2, #2
 811c422:	9307      	strge	r3, [sp, #28]
 811c424:	9307      	strlt	r3, [sp, #28]
 811c426:	bfb8      	it	lt
 811c428:	9204      	strlt	r2, [sp, #16]
 811c42a:	7823      	ldrb	r3, [r4, #0]
 811c42c:	2b2e      	cmp	r3, #46	@ 0x2e
 811c42e:	d10a      	bne.n	811c446 <_vfiprintf_r+0x156>
 811c430:	7863      	ldrb	r3, [r4, #1]
 811c432:	2b2a      	cmp	r3, #42	@ 0x2a
 811c434:	d132      	bne.n	811c49c <_vfiprintf_r+0x1ac>
 811c436:	9b03      	ldr	r3, [sp, #12]
 811c438:	1d1a      	adds	r2, r3, #4
 811c43a:	681b      	ldr	r3, [r3, #0]
 811c43c:	9203      	str	r2, [sp, #12]
 811c43e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 811c442:	3402      	adds	r4, #2
 811c444:	9305      	str	r3, [sp, #20]
 811c446:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 811c51c <_vfiprintf_r+0x22c>
 811c44a:	7821      	ldrb	r1, [r4, #0]
 811c44c:	2203      	movs	r2, #3
 811c44e:	4650      	mov	r0, sl
 811c450:	f7e3 ff4e 	bl	81002f0 <memchr>
 811c454:	b138      	cbz	r0, 811c466 <_vfiprintf_r+0x176>
 811c456:	9b04      	ldr	r3, [sp, #16]
 811c458:	eba0 000a 	sub.w	r0, r0, sl
 811c45c:	2240      	movs	r2, #64	@ 0x40
 811c45e:	4082      	lsls	r2, r0
 811c460:	4313      	orrs	r3, r2
 811c462:	3401      	adds	r4, #1
 811c464:	9304      	str	r3, [sp, #16]
 811c466:	f814 1b01 	ldrb.w	r1, [r4], #1
 811c46a:	4829      	ldr	r0, [pc, #164]	@ (811c510 <_vfiprintf_r+0x220>)
 811c46c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 811c470:	2206      	movs	r2, #6
 811c472:	f7e3 ff3d 	bl	81002f0 <memchr>
 811c476:	2800      	cmp	r0, #0
 811c478:	d03f      	beq.n	811c4fa <_vfiprintf_r+0x20a>
 811c47a:	4b26      	ldr	r3, [pc, #152]	@ (811c514 <_vfiprintf_r+0x224>)
 811c47c:	bb1b      	cbnz	r3, 811c4c6 <_vfiprintf_r+0x1d6>
 811c47e:	9b03      	ldr	r3, [sp, #12]
 811c480:	3307      	adds	r3, #7
 811c482:	f023 0307 	bic.w	r3, r3, #7
 811c486:	3308      	adds	r3, #8
 811c488:	9303      	str	r3, [sp, #12]
 811c48a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 811c48c:	443b      	add	r3, r7
 811c48e:	9309      	str	r3, [sp, #36]	@ 0x24
 811c490:	e76a      	b.n	811c368 <_vfiprintf_r+0x78>
 811c492:	fb0c 3202 	mla	r2, ip, r2, r3
 811c496:	460c      	mov	r4, r1
 811c498:	2001      	movs	r0, #1
 811c49a:	e7a8      	b.n	811c3ee <_vfiprintf_r+0xfe>
 811c49c:	2300      	movs	r3, #0
 811c49e:	3401      	adds	r4, #1
 811c4a0:	9305      	str	r3, [sp, #20]
 811c4a2:	4619      	mov	r1, r3
 811c4a4:	f04f 0c0a 	mov.w	ip, #10
 811c4a8:	4620      	mov	r0, r4
 811c4aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 811c4ae:	3a30      	subs	r2, #48	@ 0x30
 811c4b0:	2a09      	cmp	r2, #9
 811c4b2:	d903      	bls.n	811c4bc <_vfiprintf_r+0x1cc>
 811c4b4:	2b00      	cmp	r3, #0
 811c4b6:	d0c6      	beq.n	811c446 <_vfiprintf_r+0x156>
 811c4b8:	9105      	str	r1, [sp, #20]
 811c4ba:	e7c4      	b.n	811c446 <_vfiprintf_r+0x156>
 811c4bc:	fb0c 2101 	mla	r1, ip, r1, r2
 811c4c0:	4604      	mov	r4, r0
 811c4c2:	2301      	movs	r3, #1
 811c4c4:	e7f0      	b.n	811c4a8 <_vfiprintf_r+0x1b8>
 811c4c6:	ab03      	add	r3, sp, #12
 811c4c8:	9300      	str	r3, [sp, #0]
 811c4ca:	462a      	mov	r2, r5
 811c4cc:	4b12      	ldr	r3, [pc, #72]	@ (811c518 <_vfiprintf_r+0x228>)
 811c4ce:	a904      	add	r1, sp, #16
 811c4d0:	4630      	mov	r0, r6
 811c4d2:	f3af 8000 	nop.w
 811c4d6:	4607      	mov	r7, r0
 811c4d8:	1c78      	adds	r0, r7, #1
 811c4da:	d1d6      	bne.n	811c48a <_vfiprintf_r+0x19a>
 811c4dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 811c4de:	07d9      	lsls	r1, r3, #31
 811c4e0:	d405      	bmi.n	811c4ee <_vfiprintf_r+0x1fe>
 811c4e2:	89ab      	ldrh	r3, [r5, #12]
 811c4e4:	059a      	lsls	r2, r3, #22
 811c4e6:	d402      	bmi.n	811c4ee <_vfiprintf_r+0x1fe>
 811c4e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 811c4ea:	f7ff fe5f 	bl	811c1ac <__retarget_lock_release_recursive>
 811c4ee:	89ab      	ldrh	r3, [r5, #12]
 811c4f0:	065b      	lsls	r3, r3, #25
 811c4f2:	f53f af1f 	bmi.w	811c334 <_vfiprintf_r+0x44>
 811c4f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 811c4f8:	e71e      	b.n	811c338 <_vfiprintf_r+0x48>
 811c4fa:	ab03      	add	r3, sp, #12
 811c4fc:	9300      	str	r3, [sp, #0]
 811c4fe:	462a      	mov	r2, r5
 811c500:	4b05      	ldr	r3, [pc, #20]	@ (811c518 <_vfiprintf_r+0x228>)
 811c502:	a904      	add	r1, sp, #16
 811c504:	4630      	mov	r0, r6
 811c506:	f000 f879 	bl	811c5fc <_printf_i>
 811c50a:	e7e4      	b.n	811c4d6 <_vfiprintf_r+0x1e6>
 811c50c:	0811fe0f 	.word	0x0811fe0f
 811c510:	0811fe19 	.word	0x0811fe19
 811c514:	00000000 	.word	0x00000000
 811c518:	0811c2cb 	.word	0x0811c2cb
 811c51c:	0811fe15 	.word	0x0811fe15

0811c520 <_printf_common>:
 811c520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 811c524:	4616      	mov	r6, r2
 811c526:	4698      	mov	r8, r3
 811c528:	688a      	ldr	r2, [r1, #8]
 811c52a:	690b      	ldr	r3, [r1, #16]
 811c52c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 811c530:	4293      	cmp	r3, r2
 811c532:	bfb8      	it	lt
 811c534:	4613      	movlt	r3, r2
 811c536:	6033      	str	r3, [r6, #0]
 811c538:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 811c53c:	4607      	mov	r7, r0
 811c53e:	460c      	mov	r4, r1
 811c540:	b10a      	cbz	r2, 811c546 <_printf_common+0x26>
 811c542:	3301      	adds	r3, #1
 811c544:	6033      	str	r3, [r6, #0]
 811c546:	6823      	ldr	r3, [r4, #0]
 811c548:	0699      	lsls	r1, r3, #26
 811c54a:	bf42      	ittt	mi
 811c54c:	6833      	ldrmi	r3, [r6, #0]
 811c54e:	3302      	addmi	r3, #2
 811c550:	6033      	strmi	r3, [r6, #0]
 811c552:	6825      	ldr	r5, [r4, #0]
 811c554:	f015 0506 	ands.w	r5, r5, #6
 811c558:	d106      	bne.n	811c568 <_printf_common+0x48>
 811c55a:	f104 0a19 	add.w	sl, r4, #25
 811c55e:	68e3      	ldr	r3, [r4, #12]
 811c560:	6832      	ldr	r2, [r6, #0]
 811c562:	1a9b      	subs	r3, r3, r2
 811c564:	42ab      	cmp	r3, r5
 811c566:	dc26      	bgt.n	811c5b6 <_printf_common+0x96>
 811c568:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 811c56c:	6822      	ldr	r2, [r4, #0]
 811c56e:	3b00      	subs	r3, #0
 811c570:	bf18      	it	ne
 811c572:	2301      	movne	r3, #1
 811c574:	0692      	lsls	r2, r2, #26
 811c576:	d42b      	bmi.n	811c5d0 <_printf_common+0xb0>
 811c578:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 811c57c:	4641      	mov	r1, r8
 811c57e:	4638      	mov	r0, r7
 811c580:	47c8      	blx	r9
 811c582:	3001      	adds	r0, #1
 811c584:	d01e      	beq.n	811c5c4 <_printf_common+0xa4>
 811c586:	6823      	ldr	r3, [r4, #0]
 811c588:	6922      	ldr	r2, [r4, #16]
 811c58a:	f003 0306 	and.w	r3, r3, #6
 811c58e:	2b04      	cmp	r3, #4
 811c590:	bf02      	ittt	eq
 811c592:	68e5      	ldreq	r5, [r4, #12]
 811c594:	6833      	ldreq	r3, [r6, #0]
 811c596:	1aed      	subeq	r5, r5, r3
 811c598:	68a3      	ldr	r3, [r4, #8]
 811c59a:	bf0c      	ite	eq
 811c59c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 811c5a0:	2500      	movne	r5, #0
 811c5a2:	4293      	cmp	r3, r2
 811c5a4:	bfc4      	itt	gt
 811c5a6:	1a9b      	subgt	r3, r3, r2
 811c5a8:	18ed      	addgt	r5, r5, r3
 811c5aa:	2600      	movs	r6, #0
 811c5ac:	341a      	adds	r4, #26
 811c5ae:	42b5      	cmp	r5, r6
 811c5b0:	d11a      	bne.n	811c5e8 <_printf_common+0xc8>
 811c5b2:	2000      	movs	r0, #0
 811c5b4:	e008      	b.n	811c5c8 <_printf_common+0xa8>
 811c5b6:	2301      	movs	r3, #1
 811c5b8:	4652      	mov	r2, sl
 811c5ba:	4641      	mov	r1, r8
 811c5bc:	4638      	mov	r0, r7
 811c5be:	47c8      	blx	r9
 811c5c0:	3001      	adds	r0, #1
 811c5c2:	d103      	bne.n	811c5cc <_printf_common+0xac>
 811c5c4:	f04f 30ff 	mov.w	r0, #4294967295
 811c5c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 811c5cc:	3501      	adds	r5, #1
 811c5ce:	e7c6      	b.n	811c55e <_printf_common+0x3e>
 811c5d0:	18e1      	adds	r1, r4, r3
 811c5d2:	1c5a      	adds	r2, r3, #1
 811c5d4:	2030      	movs	r0, #48	@ 0x30
 811c5d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 811c5da:	4422      	add	r2, r4
 811c5dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 811c5e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 811c5e4:	3302      	adds	r3, #2
 811c5e6:	e7c7      	b.n	811c578 <_printf_common+0x58>
 811c5e8:	2301      	movs	r3, #1
 811c5ea:	4622      	mov	r2, r4
 811c5ec:	4641      	mov	r1, r8
 811c5ee:	4638      	mov	r0, r7
 811c5f0:	47c8      	blx	r9
 811c5f2:	3001      	adds	r0, #1
 811c5f4:	d0e6      	beq.n	811c5c4 <_printf_common+0xa4>
 811c5f6:	3601      	adds	r6, #1
 811c5f8:	e7d9      	b.n	811c5ae <_printf_common+0x8e>
	...

0811c5fc <_printf_i>:
 811c5fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 811c600:	7e0f      	ldrb	r7, [r1, #24]
 811c602:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 811c604:	2f78      	cmp	r7, #120	@ 0x78
 811c606:	4691      	mov	r9, r2
 811c608:	4680      	mov	r8, r0
 811c60a:	460c      	mov	r4, r1
 811c60c:	469a      	mov	sl, r3
 811c60e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 811c612:	d807      	bhi.n	811c624 <_printf_i+0x28>
 811c614:	2f62      	cmp	r7, #98	@ 0x62
 811c616:	d80a      	bhi.n	811c62e <_printf_i+0x32>
 811c618:	2f00      	cmp	r7, #0
 811c61a:	f000 80d2 	beq.w	811c7c2 <_printf_i+0x1c6>
 811c61e:	2f58      	cmp	r7, #88	@ 0x58
 811c620:	f000 80b9 	beq.w	811c796 <_printf_i+0x19a>
 811c624:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 811c628:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 811c62c:	e03a      	b.n	811c6a4 <_printf_i+0xa8>
 811c62e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 811c632:	2b15      	cmp	r3, #21
 811c634:	d8f6      	bhi.n	811c624 <_printf_i+0x28>
 811c636:	a101      	add	r1, pc, #4	@ (adr r1, 811c63c <_printf_i+0x40>)
 811c638:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 811c63c:	0811c695 	.word	0x0811c695
 811c640:	0811c6a9 	.word	0x0811c6a9
 811c644:	0811c625 	.word	0x0811c625
 811c648:	0811c625 	.word	0x0811c625
 811c64c:	0811c625 	.word	0x0811c625
 811c650:	0811c625 	.word	0x0811c625
 811c654:	0811c6a9 	.word	0x0811c6a9
 811c658:	0811c625 	.word	0x0811c625
 811c65c:	0811c625 	.word	0x0811c625
 811c660:	0811c625 	.word	0x0811c625
 811c664:	0811c625 	.word	0x0811c625
 811c668:	0811c7a9 	.word	0x0811c7a9
 811c66c:	0811c6d3 	.word	0x0811c6d3
 811c670:	0811c763 	.word	0x0811c763
 811c674:	0811c625 	.word	0x0811c625
 811c678:	0811c625 	.word	0x0811c625
 811c67c:	0811c7cb 	.word	0x0811c7cb
 811c680:	0811c625 	.word	0x0811c625
 811c684:	0811c6d3 	.word	0x0811c6d3
 811c688:	0811c625 	.word	0x0811c625
 811c68c:	0811c625 	.word	0x0811c625
 811c690:	0811c76b 	.word	0x0811c76b
 811c694:	6833      	ldr	r3, [r6, #0]
 811c696:	1d1a      	adds	r2, r3, #4
 811c698:	681b      	ldr	r3, [r3, #0]
 811c69a:	6032      	str	r2, [r6, #0]
 811c69c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 811c6a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 811c6a4:	2301      	movs	r3, #1
 811c6a6:	e09d      	b.n	811c7e4 <_printf_i+0x1e8>
 811c6a8:	6833      	ldr	r3, [r6, #0]
 811c6aa:	6820      	ldr	r0, [r4, #0]
 811c6ac:	1d19      	adds	r1, r3, #4
 811c6ae:	6031      	str	r1, [r6, #0]
 811c6b0:	0606      	lsls	r6, r0, #24
 811c6b2:	d501      	bpl.n	811c6b8 <_printf_i+0xbc>
 811c6b4:	681d      	ldr	r5, [r3, #0]
 811c6b6:	e003      	b.n	811c6c0 <_printf_i+0xc4>
 811c6b8:	0645      	lsls	r5, r0, #25
 811c6ba:	d5fb      	bpl.n	811c6b4 <_printf_i+0xb8>
 811c6bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 811c6c0:	2d00      	cmp	r5, #0
 811c6c2:	da03      	bge.n	811c6cc <_printf_i+0xd0>
 811c6c4:	232d      	movs	r3, #45	@ 0x2d
 811c6c6:	426d      	negs	r5, r5
 811c6c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 811c6cc:	4859      	ldr	r0, [pc, #356]	@ (811c834 <_printf_i+0x238>)
 811c6ce:	230a      	movs	r3, #10
 811c6d0:	e011      	b.n	811c6f6 <_printf_i+0xfa>
 811c6d2:	6821      	ldr	r1, [r4, #0]
 811c6d4:	6833      	ldr	r3, [r6, #0]
 811c6d6:	0608      	lsls	r0, r1, #24
 811c6d8:	f853 5b04 	ldr.w	r5, [r3], #4
 811c6dc:	d402      	bmi.n	811c6e4 <_printf_i+0xe8>
 811c6de:	0649      	lsls	r1, r1, #25
 811c6e0:	bf48      	it	mi
 811c6e2:	b2ad      	uxthmi	r5, r5
 811c6e4:	2f6f      	cmp	r7, #111	@ 0x6f
 811c6e6:	4853      	ldr	r0, [pc, #332]	@ (811c834 <_printf_i+0x238>)
 811c6e8:	6033      	str	r3, [r6, #0]
 811c6ea:	bf14      	ite	ne
 811c6ec:	230a      	movne	r3, #10
 811c6ee:	2308      	moveq	r3, #8
 811c6f0:	2100      	movs	r1, #0
 811c6f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 811c6f6:	6866      	ldr	r6, [r4, #4]
 811c6f8:	60a6      	str	r6, [r4, #8]
 811c6fa:	2e00      	cmp	r6, #0
 811c6fc:	bfa2      	ittt	ge
 811c6fe:	6821      	ldrge	r1, [r4, #0]
 811c700:	f021 0104 	bicge.w	r1, r1, #4
 811c704:	6021      	strge	r1, [r4, #0]
 811c706:	b90d      	cbnz	r5, 811c70c <_printf_i+0x110>
 811c708:	2e00      	cmp	r6, #0
 811c70a:	d04b      	beq.n	811c7a4 <_printf_i+0x1a8>
 811c70c:	4616      	mov	r6, r2
 811c70e:	fbb5 f1f3 	udiv	r1, r5, r3
 811c712:	fb03 5711 	mls	r7, r3, r1, r5
 811c716:	5dc7      	ldrb	r7, [r0, r7]
 811c718:	f806 7d01 	strb.w	r7, [r6, #-1]!
 811c71c:	462f      	mov	r7, r5
 811c71e:	42bb      	cmp	r3, r7
 811c720:	460d      	mov	r5, r1
 811c722:	d9f4      	bls.n	811c70e <_printf_i+0x112>
 811c724:	2b08      	cmp	r3, #8
 811c726:	d10b      	bne.n	811c740 <_printf_i+0x144>
 811c728:	6823      	ldr	r3, [r4, #0]
 811c72a:	07df      	lsls	r7, r3, #31
 811c72c:	d508      	bpl.n	811c740 <_printf_i+0x144>
 811c72e:	6923      	ldr	r3, [r4, #16]
 811c730:	6861      	ldr	r1, [r4, #4]
 811c732:	4299      	cmp	r1, r3
 811c734:	bfde      	ittt	le
 811c736:	2330      	movle	r3, #48	@ 0x30
 811c738:	f806 3c01 	strble.w	r3, [r6, #-1]
 811c73c:	f106 36ff 	addle.w	r6, r6, #4294967295
 811c740:	1b92      	subs	r2, r2, r6
 811c742:	6122      	str	r2, [r4, #16]
 811c744:	f8cd a000 	str.w	sl, [sp]
 811c748:	464b      	mov	r3, r9
 811c74a:	aa03      	add	r2, sp, #12
 811c74c:	4621      	mov	r1, r4
 811c74e:	4640      	mov	r0, r8
 811c750:	f7ff fee6 	bl	811c520 <_printf_common>
 811c754:	3001      	adds	r0, #1
 811c756:	d14a      	bne.n	811c7ee <_printf_i+0x1f2>
 811c758:	f04f 30ff 	mov.w	r0, #4294967295
 811c75c:	b004      	add	sp, #16
 811c75e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 811c762:	6823      	ldr	r3, [r4, #0]
 811c764:	f043 0320 	orr.w	r3, r3, #32
 811c768:	6023      	str	r3, [r4, #0]
 811c76a:	4833      	ldr	r0, [pc, #204]	@ (811c838 <_printf_i+0x23c>)
 811c76c:	2778      	movs	r7, #120	@ 0x78
 811c76e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 811c772:	6823      	ldr	r3, [r4, #0]
 811c774:	6831      	ldr	r1, [r6, #0]
 811c776:	061f      	lsls	r7, r3, #24
 811c778:	f851 5b04 	ldr.w	r5, [r1], #4
 811c77c:	d402      	bmi.n	811c784 <_printf_i+0x188>
 811c77e:	065f      	lsls	r7, r3, #25
 811c780:	bf48      	it	mi
 811c782:	b2ad      	uxthmi	r5, r5
 811c784:	6031      	str	r1, [r6, #0]
 811c786:	07d9      	lsls	r1, r3, #31
 811c788:	bf44      	itt	mi
 811c78a:	f043 0320 	orrmi.w	r3, r3, #32
 811c78e:	6023      	strmi	r3, [r4, #0]
 811c790:	b11d      	cbz	r5, 811c79a <_printf_i+0x19e>
 811c792:	2310      	movs	r3, #16
 811c794:	e7ac      	b.n	811c6f0 <_printf_i+0xf4>
 811c796:	4827      	ldr	r0, [pc, #156]	@ (811c834 <_printf_i+0x238>)
 811c798:	e7e9      	b.n	811c76e <_printf_i+0x172>
 811c79a:	6823      	ldr	r3, [r4, #0]
 811c79c:	f023 0320 	bic.w	r3, r3, #32
 811c7a0:	6023      	str	r3, [r4, #0]
 811c7a2:	e7f6      	b.n	811c792 <_printf_i+0x196>
 811c7a4:	4616      	mov	r6, r2
 811c7a6:	e7bd      	b.n	811c724 <_printf_i+0x128>
 811c7a8:	6833      	ldr	r3, [r6, #0]
 811c7aa:	6825      	ldr	r5, [r4, #0]
 811c7ac:	6961      	ldr	r1, [r4, #20]
 811c7ae:	1d18      	adds	r0, r3, #4
 811c7b0:	6030      	str	r0, [r6, #0]
 811c7b2:	062e      	lsls	r6, r5, #24
 811c7b4:	681b      	ldr	r3, [r3, #0]
 811c7b6:	d501      	bpl.n	811c7bc <_printf_i+0x1c0>
 811c7b8:	6019      	str	r1, [r3, #0]
 811c7ba:	e002      	b.n	811c7c2 <_printf_i+0x1c6>
 811c7bc:	0668      	lsls	r0, r5, #25
 811c7be:	d5fb      	bpl.n	811c7b8 <_printf_i+0x1bc>
 811c7c0:	8019      	strh	r1, [r3, #0]
 811c7c2:	2300      	movs	r3, #0
 811c7c4:	6123      	str	r3, [r4, #16]
 811c7c6:	4616      	mov	r6, r2
 811c7c8:	e7bc      	b.n	811c744 <_printf_i+0x148>
 811c7ca:	6833      	ldr	r3, [r6, #0]
 811c7cc:	1d1a      	adds	r2, r3, #4
 811c7ce:	6032      	str	r2, [r6, #0]
 811c7d0:	681e      	ldr	r6, [r3, #0]
 811c7d2:	6862      	ldr	r2, [r4, #4]
 811c7d4:	2100      	movs	r1, #0
 811c7d6:	4630      	mov	r0, r6
 811c7d8:	f7e3 fd8a 	bl	81002f0 <memchr>
 811c7dc:	b108      	cbz	r0, 811c7e2 <_printf_i+0x1e6>
 811c7de:	1b80      	subs	r0, r0, r6
 811c7e0:	6060      	str	r0, [r4, #4]
 811c7e2:	6863      	ldr	r3, [r4, #4]
 811c7e4:	6123      	str	r3, [r4, #16]
 811c7e6:	2300      	movs	r3, #0
 811c7e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 811c7ec:	e7aa      	b.n	811c744 <_printf_i+0x148>
 811c7ee:	6923      	ldr	r3, [r4, #16]
 811c7f0:	4632      	mov	r2, r6
 811c7f2:	4649      	mov	r1, r9
 811c7f4:	4640      	mov	r0, r8
 811c7f6:	47d0      	blx	sl
 811c7f8:	3001      	adds	r0, #1
 811c7fa:	d0ad      	beq.n	811c758 <_printf_i+0x15c>
 811c7fc:	6823      	ldr	r3, [r4, #0]
 811c7fe:	079b      	lsls	r3, r3, #30
 811c800:	d413      	bmi.n	811c82a <_printf_i+0x22e>
 811c802:	68e0      	ldr	r0, [r4, #12]
 811c804:	9b03      	ldr	r3, [sp, #12]
 811c806:	4298      	cmp	r0, r3
 811c808:	bfb8      	it	lt
 811c80a:	4618      	movlt	r0, r3
 811c80c:	e7a6      	b.n	811c75c <_printf_i+0x160>
 811c80e:	2301      	movs	r3, #1
 811c810:	4632      	mov	r2, r6
 811c812:	4649      	mov	r1, r9
 811c814:	4640      	mov	r0, r8
 811c816:	47d0      	blx	sl
 811c818:	3001      	adds	r0, #1
 811c81a:	d09d      	beq.n	811c758 <_printf_i+0x15c>
 811c81c:	3501      	adds	r5, #1
 811c81e:	68e3      	ldr	r3, [r4, #12]
 811c820:	9903      	ldr	r1, [sp, #12]
 811c822:	1a5b      	subs	r3, r3, r1
 811c824:	42ab      	cmp	r3, r5
 811c826:	dcf2      	bgt.n	811c80e <_printf_i+0x212>
 811c828:	e7eb      	b.n	811c802 <_printf_i+0x206>
 811c82a:	2500      	movs	r5, #0
 811c82c:	f104 0619 	add.w	r6, r4, #25
 811c830:	e7f5      	b.n	811c81e <_printf_i+0x222>
 811c832:	bf00      	nop
 811c834:	0811fe20 	.word	0x0811fe20
 811c838:	0811fe31 	.word	0x0811fe31

0811c83c <__sflush_r>:
 811c83c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 811c840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 811c844:	0716      	lsls	r6, r2, #28
 811c846:	4605      	mov	r5, r0
 811c848:	460c      	mov	r4, r1
 811c84a:	d454      	bmi.n	811c8f6 <__sflush_r+0xba>
 811c84c:	684b      	ldr	r3, [r1, #4]
 811c84e:	2b00      	cmp	r3, #0
 811c850:	dc02      	bgt.n	811c858 <__sflush_r+0x1c>
 811c852:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 811c854:	2b00      	cmp	r3, #0
 811c856:	dd48      	ble.n	811c8ea <__sflush_r+0xae>
 811c858:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 811c85a:	2e00      	cmp	r6, #0
 811c85c:	d045      	beq.n	811c8ea <__sflush_r+0xae>
 811c85e:	2300      	movs	r3, #0
 811c860:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 811c864:	682f      	ldr	r7, [r5, #0]
 811c866:	6a21      	ldr	r1, [r4, #32]
 811c868:	602b      	str	r3, [r5, #0]
 811c86a:	d030      	beq.n	811c8ce <__sflush_r+0x92>
 811c86c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 811c86e:	89a3      	ldrh	r3, [r4, #12]
 811c870:	0759      	lsls	r1, r3, #29
 811c872:	d505      	bpl.n	811c880 <__sflush_r+0x44>
 811c874:	6863      	ldr	r3, [r4, #4]
 811c876:	1ad2      	subs	r2, r2, r3
 811c878:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 811c87a:	b10b      	cbz	r3, 811c880 <__sflush_r+0x44>
 811c87c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 811c87e:	1ad2      	subs	r2, r2, r3
 811c880:	2300      	movs	r3, #0
 811c882:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 811c884:	6a21      	ldr	r1, [r4, #32]
 811c886:	4628      	mov	r0, r5
 811c888:	47b0      	blx	r6
 811c88a:	1c43      	adds	r3, r0, #1
 811c88c:	89a3      	ldrh	r3, [r4, #12]
 811c88e:	d106      	bne.n	811c89e <__sflush_r+0x62>
 811c890:	6829      	ldr	r1, [r5, #0]
 811c892:	291d      	cmp	r1, #29
 811c894:	d82b      	bhi.n	811c8ee <__sflush_r+0xb2>
 811c896:	4a2a      	ldr	r2, [pc, #168]	@ (811c940 <__sflush_r+0x104>)
 811c898:	410a      	asrs	r2, r1
 811c89a:	07d6      	lsls	r6, r2, #31
 811c89c:	d427      	bmi.n	811c8ee <__sflush_r+0xb2>
 811c89e:	2200      	movs	r2, #0
 811c8a0:	6062      	str	r2, [r4, #4]
 811c8a2:	04d9      	lsls	r1, r3, #19
 811c8a4:	6922      	ldr	r2, [r4, #16]
 811c8a6:	6022      	str	r2, [r4, #0]
 811c8a8:	d504      	bpl.n	811c8b4 <__sflush_r+0x78>
 811c8aa:	1c42      	adds	r2, r0, #1
 811c8ac:	d101      	bne.n	811c8b2 <__sflush_r+0x76>
 811c8ae:	682b      	ldr	r3, [r5, #0]
 811c8b0:	b903      	cbnz	r3, 811c8b4 <__sflush_r+0x78>
 811c8b2:	6560      	str	r0, [r4, #84]	@ 0x54
 811c8b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 811c8b6:	602f      	str	r7, [r5, #0]
 811c8b8:	b1b9      	cbz	r1, 811c8ea <__sflush_r+0xae>
 811c8ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 811c8be:	4299      	cmp	r1, r3
 811c8c0:	d002      	beq.n	811c8c8 <__sflush_r+0x8c>
 811c8c2:	4628      	mov	r0, r5
 811c8c4:	f7ff fca0 	bl	811c208 <_free_r>
 811c8c8:	2300      	movs	r3, #0
 811c8ca:	6363      	str	r3, [r4, #52]	@ 0x34
 811c8cc:	e00d      	b.n	811c8ea <__sflush_r+0xae>
 811c8ce:	2301      	movs	r3, #1
 811c8d0:	4628      	mov	r0, r5
 811c8d2:	47b0      	blx	r6
 811c8d4:	4602      	mov	r2, r0
 811c8d6:	1c50      	adds	r0, r2, #1
 811c8d8:	d1c9      	bne.n	811c86e <__sflush_r+0x32>
 811c8da:	682b      	ldr	r3, [r5, #0]
 811c8dc:	2b00      	cmp	r3, #0
 811c8de:	d0c6      	beq.n	811c86e <__sflush_r+0x32>
 811c8e0:	2b1d      	cmp	r3, #29
 811c8e2:	d001      	beq.n	811c8e8 <__sflush_r+0xac>
 811c8e4:	2b16      	cmp	r3, #22
 811c8e6:	d11e      	bne.n	811c926 <__sflush_r+0xea>
 811c8e8:	602f      	str	r7, [r5, #0]
 811c8ea:	2000      	movs	r0, #0
 811c8ec:	e022      	b.n	811c934 <__sflush_r+0xf8>
 811c8ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 811c8f2:	b21b      	sxth	r3, r3
 811c8f4:	e01b      	b.n	811c92e <__sflush_r+0xf2>
 811c8f6:	690f      	ldr	r7, [r1, #16]
 811c8f8:	2f00      	cmp	r7, #0
 811c8fa:	d0f6      	beq.n	811c8ea <__sflush_r+0xae>
 811c8fc:	0793      	lsls	r3, r2, #30
 811c8fe:	680e      	ldr	r6, [r1, #0]
 811c900:	bf08      	it	eq
 811c902:	694b      	ldreq	r3, [r1, #20]
 811c904:	600f      	str	r7, [r1, #0]
 811c906:	bf18      	it	ne
 811c908:	2300      	movne	r3, #0
 811c90a:	eba6 0807 	sub.w	r8, r6, r7
 811c90e:	608b      	str	r3, [r1, #8]
 811c910:	f1b8 0f00 	cmp.w	r8, #0
 811c914:	dde9      	ble.n	811c8ea <__sflush_r+0xae>
 811c916:	6a21      	ldr	r1, [r4, #32]
 811c918:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 811c91a:	4643      	mov	r3, r8
 811c91c:	463a      	mov	r2, r7
 811c91e:	4628      	mov	r0, r5
 811c920:	47b0      	blx	r6
 811c922:	2800      	cmp	r0, #0
 811c924:	dc08      	bgt.n	811c938 <__sflush_r+0xfc>
 811c926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811c92a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 811c92e:	81a3      	strh	r3, [r4, #12]
 811c930:	f04f 30ff 	mov.w	r0, #4294967295
 811c934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 811c938:	4407      	add	r7, r0
 811c93a:	eba8 0800 	sub.w	r8, r8, r0
 811c93e:	e7e7      	b.n	811c910 <__sflush_r+0xd4>
 811c940:	dfbffffe 	.word	0xdfbffffe

0811c944 <_fflush_r>:
 811c944:	b538      	push	{r3, r4, r5, lr}
 811c946:	690b      	ldr	r3, [r1, #16]
 811c948:	4605      	mov	r5, r0
 811c94a:	460c      	mov	r4, r1
 811c94c:	b913      	cbnz	r3, 811c954 <_fflush_r+0x10>
 811c94e:	2500      	movs	r5, #0
 811c950:	4628      	mov	r0, r5
 811c952:	bd38      	pop	{r3, r4, r5, pc}
 811c954:	b118      	cbz	r0, 811c95e <_fflush_r+0x1a>
 811c956:	6a03      	ldr	r3, [r0, #32]
 811c958:	b90b      	cbnz	r3, 811c95e <_fflush_r+0x1a>
 811c95a:	f7ff fa41 	bl	811bde0 <__sinit>
 811c95e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811c962:	2b00      	cmp	r3, #0
 811c964:	d0f3      	beq.n	811c94e <_fflush_r+0xa>
 811c966:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 811c968:	07d0      	lsls	r0, r2, #31
 811c96a:	d404      	bmi.n	811c976 <_fflush_r+0x32>
 811c96c:	0599      	lsls	r1, r3, #22
 811c96e:	d402      	bmi.n	811c976 <_fflush_r+0x32>
 811c970:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 811c972:	f7ff fc1a 	bl	811c1aa <__retarget_lock_acquire_recursive>
 811c976:	4628      	mov	r0, r5
 811c978:	4621      	mov	r1, r4
 811c97a:	f7ff ff5f 	bl	811c83c <__sflush_r>
 811c97e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 811c980:	07da      	lsls	r2, r3, #31
 811c982:	4605      	mov	r5, r0
 811c984:	d4e4      	bmi.n	811c950 <_fflush_r+0xc>
 811c986:	89a3      	ldrh	r3, [r4, #12]
 811c988:	059b      	lsls	r3, r3, #22
 811c98a:	d4e1      	bmi.n	811c950 <_fflush_r+0xc>
 811c98c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 811c98e:	f7ff fc0d 	bl	811c1ac <__retarget_lock_release_recursive>
 811c992:	e7dd      	b.n	811c950 <_fflush_r+0xc>

0811c994 <fiprintf>:
 811c994:	b40e      	push	{r1, r2, r3}
 811c996:	b503      	push	{r0, r1, lr}
 811c998:	4601      	mov	r1, r0
 811c99a:	ab03      	add	r3, sp, #12
 811c99c:	4805      	ldr	r0, [pc, #20]	@ (811c9b4 <fiprintf+0x20>)
 811c99e:	f853 2b04 	ldr.w	r2, [r3], #4
 811c9a2:	6800      	ldr	r0, [r0, #0]
 811c9a4:	9301      	str	r3, [sp, #4]
 811c9a6:	f7ff fca3 	bl	811c2f0 <_vfiprintf_r>
 811c9aa:	b002      	add	sp, #8
 811c9ac:	f85d eb04 	ldr.w	lr, [sp], #4
 811c9b0:	b003      	add	sp, #12
 811c9b2:	4770      	bx	lr
 811c9b4:	10000040 	.word	0x10000040

0811c9b8 <__swbuf_r>:
 811c9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811c9ba:	460e      	mov	r6, r1
 811c9bc:	4614      	mov	r4, r2
 811c9be:	4605      	mov	r5, r0
 811c9c0:	b118      	cbz	r0, 811c9ca <__swbuf_r+0x12>
 811c9c2:	6a03      	ldr	r3, [r0, #32]
 811c9c4:	b90b      	cbnz	r3, 811c9ca <__swbuf_r+0x12>
 811c9c6:	f7ff fa0b 	bl	811bde0 <__sinit>
 811c9ca:	69a3      	ldr	r3, [r4, #24]
 811c9cc:	60a3      	str	r3, [r4, #8]
 811c9ce:	89a3      	ldrh	r3, [r4, #12]
 811c9d0:	071a      	lsls	r2, r3, #28
 811c9d2:	d501      	bpl.n	811c9d8 <__swbuf_r+0x20>
 811c9d4:	6923      	ldr	r3, [r4, #16]
 811c9d6:	b943      	cbnz	r3, 811c9ea <__swbuf_r+0x32>
 811c9d8:	4621      	mov	r1, r4
 811c9da:	4628      	mov	r0, r5
 811c9dc:	f000 f82a 	bl	811ca34 <__swsetup_r>
 811c9e0:	b118      	cbz	r0, 811c9ea <__swbuf_r+0x32>
 811c9e2:	f04f 37ff 	mov.w	r7, #4294967295
 811c9e6:	4638      	mov	r0, r7
 811c9e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 811c9ea:	6823      	ldr	r3, [r4, #0]
 811c9ec:	6922      	ldr	r2, [r4, #16]
 811c9ee:	1a98      	subs	r0, r3, r2
 811c9f0:	6963      	ldr	r3, [r4, #20]
 811c9f2:	b2f6      	uxtb	r6, r6
 811c9f4:	4283      	cmp	r3, r0
 811c9f6:	4637      	mov	r7, r6
 811c9f8:	dc05      	bgt.n	811ca06 <__swbuf_r+0x4e>
 811c9fa:	4621      	mov	r1, r4
 811c9fc:	4628      	mov	r0, r5
 811c9fe:	f7ff ffa1 	bl	811c944 <_fflush_r>
 811ca02:	2800      	cmp	r0, #0
 811ca04:	d1ed      	bne.n	811c9e2 <__swbuf_r+0x2a>
 811ca06:	68a3      	ldr	r3, [r4, #8]
 811ca08:	3b01      	subs	r3, #1
 811ca0a:	60a3      	str	r3, [r4, #8]
 811ca0c:	6823      	ldr	r3, [r4, #0]
 811ca0e:	1c5a      	adds	r2, r3, #1
 811ca10:	6022      	str	r2, [r4, #0]
 811ca12:	701e      	strb	r6, [r3, #0]
 811ca14:	6962      	ldr	r2, [r4, #20]
 811ca16:	1c43      	adds	r3, r0, #1
 811ca18:	429a      	cmp	r2, r3
 811ca1a:	d004      	beq.n	811ca26 <__swbuf_r+0x6e>
 811ca1c:	89a3      	ldrh	r3, [r4, #12]
 811ca1e:	07db      	lsls	r3, r3, #31
 811ca20:	d5e1      	bpl.n	811c9e6 <__swbuf_r+0x2e>
 811ca22:	2e0a      	cmp	r6, #10
 811ca24:	d1df      	bne.n	811c9e6 <__swbuf_r+0x2e>
 811ca26:	4621      	mov	r1, r4
 811ca28:	4628      	mov	r0, r5
 811ca2a:	f7ff ff8b 	bl	811c944 <_fflush_r>
 811ca2e:	2800      	cmp	r0, #0
 811ca30:	d0d9      	beq.n	811c9e6 <__swbuf_r+0x2e>
 811ca32:	e7d6      	b.n	811c9e2 <__swbuf_r+0x2a>

0811ca34 <__swsetup_r>:
 811ca34:	b538      	push	{r3, r4, r5, lr}
 811ca36:	4b29      	ldr	r3, [pc, #164]	@ (811cadc <__swsetup_r+0xa8>)
 811ca38:	4605      	mov	r5, r0
 811ca3a:	6818      	ldr	r0, [r3, #0]
 811ca3c:	460c      	mov	r4, r1
 811ca3e:	b118      	cbz	r0, 811ca48 <__swsetup_r+0x14>
 811ca40:	6a03      	ldr	r3, [r0, #32]
 811ca42:	b90b      	cbnz	r3, 811ca48 <__swsetup_r+0x14>
 811ca44:	f7ff f9cc 	bl	811bde0 <__sinit>
 811ca48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811ca4c:	0719      	lsls	r1, r3, #28
 811ca4e:	d422      	bmi.n	811ca96 <__swsetup_r+0x62>
 811ca50:	06da      	lsls	r2, r3, #27
 811ca52:	d407      	bmi.n	811ca64 <__swsetup_r+0x30>
 811ca54:	2209      	movs	r2, #9
 811ca56:	602a      	str	r2, [r5, #0]
 811ca58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 811ca5c:	81a3      	strh	r3, [r4, #12]
 811ca5e:	f04f 30ff 	mov.w	r0, #4294967295
 811ca62:	e033      	b.n	811cacc <__swsetup_r+0x98>
 811ca64:	0758      	lsls	r0, r3, #29
 811ca66:	d512      	bpl.n	811ca8e <__swsetup_r+0x5a>
 811ca68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 811ca6a:	b141      	cbz	r1, 811ca7e <__swsetup_r+0x4a>
 811ca6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 811ca70:	4299      	cmp	r1, r3
 811ca72:	d002      	beq.n	811ca7a <__swsetup_r+0x46>
 811ca74:	4628      	mov	r0, r5
 811ca76:	f7ff fbc7 	bl	811c208 <_free_r>
 811ca7a:	2300      	movs	r3, #0
 811ca7c:	6363      	str	r3, [r4, #52]	@ 0x34
 811ca7e:	89a3      	ldrh	r3, [r4, #12]
 811ca80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 811ca84:	81a3      	strh	r3, [r4, #12]
 811ca86:	2300      	movs	r3, #0
 811ca88:	6063      	str	r3, [r4, #4]
 811ca8a:	6923      	ldr	r3, [r4, #16]
 811ca8c:	6023      	str	r3, [r4, #0]
 811ca8e:	89a3      	ldrh	r3, [r4, #12]
 811ca90:	f043 0308 	orr.w	r3, r3, #8
 811ca94:	81a3      	strh	r3, [r4, #12]
 811ca96:	6923      	ldr	r3, [r4, #16]
 811ca98:	b94b      	cbnz	r3, 811caae <__swsetup_r+0x7a>
 811ca9a:	89a3      	ldrh	r3, [r4, #12]
 811ca9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 811caa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 811caa4:	d003      	beq.n	811caae <__swsetup_r+0x7a>
 811caa6:	4621      	mov	r1, r4
 811caa8:	4628      	mov	r0, r5
 811caaa:	f000 f83f 	bl	811cb2c <__smakebuf_r>
 811caae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811cab2:	f013 0201 	ands.w	r2, r3, #1
 811cab6:	d00a      	beq.n	811cace <__swsetup_r+0x9a>
 811cab8:	2200      	movs	r2, #0
 811caba:	60a2      	str	r2, [r4, #8]
 811cabc:	6962      	ldr	r2, [r4, #20]
 811cabe:	4252      	negs	r2, r2
 811cac0:	61a2      	str	r2, [r4, #24]
 811cac2:	6922      	ldr	r2, [r4, #16]
 811cac4:	b942      	cbnz	r2, 811cad8 <__swsetup_r+0xa4>
 811cac6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 811caca:	d1c5      	bne.n	811ca58 <__swsetup_r+0x24>
 811cacc:	bd38      	pop	{r3, r4, r5, pc}
 811cace:	0799      	lsls	r1, r3, #30
 811cad0:	bf58      	it	pl
 811cad2:	6962      	ldrpl	r2, [r4, #20]
 811cad4:	60a2      	str	r2, [r4, #8]
 811cad6:	e7f4      	b.n	811cac2 <__swsetup_r+0x8e>
 811cad8:	2000      	movs	r0, #0
 811cada:	e7f7      	b.n	811cacc <__swsetup_r+0x98>
 811cadc:	10000040 	.word	0x10000040

0811cae0 <__swhatbuf_r>:
 811cae0:	b570      	push	{r4, r5, r6, lr}
 811cae2:	460c      	mov	r4, r1
 811cae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 811cae8:	2900      	cmp	r1, #0
 811caea:	b096      	sub	sp, #88	@ 0x58
 811caec:	4615      	mov	r5, r2
 811caee:	461e      	mov	r6, r3
 811caf0:	da0d      	bge.n	811cb0e <__swhatbuf_r+0x2e>
 811caf2:	89a3      	ldrh	r3, [r4, #12]
 811caf4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 811caf8:	f04f 0100 	mov.w	r1, #0
 811cafc:	bf14      	ite	ne
 811cafe:	2340      	movne	r3, #64	@ 0x40
 811cb00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 811cb04:	2000      	movs	r0, #0
 811cb06:	6031      	str	r1, [r6, #0]
 811cb08:	602b      	str	r3, [r5, #0]
 811cb0a:	b016      	add	sp, #88	@ 0x58
 811cb0c:	bd70      	pop	{r4, r5, r6, pc}
 811cb0e:	466a      	mov	r2, sp
 811cb10:	f000 f848 	bl	811cba4 <_fstat_r>
 811cb14:	2800      	cmp	r0, #0
 811cb16:	dbec      	blt.n	811caf2 <__swhatbuf_r+0x12>
 811cb18:	9901      	ldr	r1, [sp, #4]
 811cb1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 811cb1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 811cb22:	4259      	negs	r1, r3
 811cb24:	4159      	adcs	r1, r3
 811cb26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 811cb2a:	e7eb      	b.n	811cb04 <__swhatbuf_r+0x24>

0811cb2c <__smakebuf_r>:
 811cb2c:	898b      	ldrh	r3, [r1, #12]
 811cb2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 811cb30:	079d      	lsls	r5, r3, #30
 811cb32:	4606      	mov	r6, r0
 811cb34:	460c      	mov	r4, r1
 811cb36:	d507      	bpl.n	811cb48 <__smakebuf_r+0x1c>
 811cb38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 811cb3c:	6023      	str	r3, [r4, #0]
 811cb3e:	6123      	str	r3, [r4, #16]
 811cb40:	2301      	movs	r3, #1
 811cb42:	6163      	str	r3, [r4, #20]
 811cb44:	b003      	add	sp, #12
 811cb46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 811cb48:	ab01      	add	r3, sp, #4
 811cb4a:	466a      	mov	r2, sp
 811cb4c:	f7ff ffc8 	bl	811cae0 <__swhatbuf_r>
 811cb50:	9f00      	ldr	r7, [sp, #0]
 811cb52:	4605      	mov	r5, r0
 811cb54:	4639      	mov	r1, r7
 811cb56:	4630      	mov	r0, r6
 811cb58:	f7fe ffec 	bl	811bb34 <_malloc_r>
 811cb5c:	b948      	cbnz	r0, 811cb72 <__smakebuf_r+0x46>
 811cb5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811cb62:	059a      	lsls	r2, r3, #22
 811cb64:	d4ee      	bmi.n	811cb44 <__smakebuf_r+0x18>
 811cb66:	f023 0303 	bic.w	r3, r3, #3
 811cb6a:	f043 0302 	orr.w	r3, r3, #2
 811cb6e:	81a3      	strh	r3, [r4, #12]
 811cb70:	e7e2      	b.n	811cb38 <__smakebuf_r+0xc>
 811cb72:	89a3      	ldrh	r3, [r4, #12]
 811cb74:	6020      	str	r0, [r4, #0]
 811cb76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 811cb7a:	81a3      	strh	r3, [r4, #12]
 811cb7c:	9b01      	ldr	r3, [sp, #4]
 811cb7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 811cb82:	b15b      	cbz	r3, 811cb9c <__smakebuf_r+0x70>
 811cb84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 811cb88:	4630      	mov	r0, r6
 811cb8a:	f000 f81d 	bl	811cbc8 <_isatty_r>
 811cb8e:	b128      	cbz	r0, 811cb9c <__smakebuf_r+0x70>
 811cb90:	89a3      	ldrh	r3, [r4, #12]
 811cb92:	f023 0303 	bic.w	r3, r3, #3
 811cb96:	f043 0301 	orr.w	r3, r3, #1
 811cb9a:	81a3      	strh	r3, [r4, #12]
 811cb9c:	89a3      	ldrh	r3, [r4, #12]
 811cb9e:	431d      	orrs	r5, r3
 811cba0:	81a5      	strh	r5, [r4, #12]
 811cba2:	e7cf      	b.n	811cb44 <__smakebuf_r+0x18>

0811cba4 <_fstat_r>:
 811cba4:	b538      	push	{r3, r4, r5, lr}
 811cba6:	4d07      	ldr	r5, [pc, #28]	@ (811cbc4 <_fstat_r+0x20>)
 811cba8:	2300      	movs	r3, #0
 811cbaa:	4604      	mov	r4, r0
 811cbac:	4608      	mov	r0, r1
 811cbae:	4611      	mov	r1, r2
 811cbb0:	602b      	str	r3, [r5, #0]
 811cbb2:	f7e4 f8a1 	bl	8100cf8 <_fstat>
 811cbb6:	1c43      	adds	r3, r0, #1
 811cbb8:	d102      	bne.n	811cbc0 <_fstat_r+0x1c>
 811cbba:	682b      	ldr	r3, [r5, #0]
 811cbbc:	b103      	cbz	r3, 811cbc0 <_fstat_r+0x1c>
 811cbbe:	6023      	str	r3, [r4, #0]
 811cbc0:	bd38      	pop	{r3, r4, r5, pc}
 811cbc2:	bf00      	nop
 811cbc4:	10011ecc 	.word	0x10011ecc

0811cbc8 <_isatty_r>:
 811cbc8:	b538      	push	{r3, r4, r5, lr}
 811cbca:	4d06      	ldr	r5, [pc, #24]	@ (811cbe4 <_isatty_r+0x1c>)
 811cbcc:	2300      	movs	r3, #0
 811cbce:	4604      	mov	r4, r0
 811cbd0:	4608      	mov	r0, r1
 811cbd2:	602b      	str	r3, [r5, #0]
 811cbd4:	f7e4 f8a0 	bl	8100d18 <_isatty>
 811cbd8:	1c43      	adds	r3, r0, #1
 811cbda:	d102      	bne.n	811cbe2 <_isatty_r+0x1a>
 811cbdc:	682b      	ldr	r3, [r5, #0]
 811cbde:	b103      	cbz	r3, 811cbe2 <_isatty_r+0x1a>
 811cbe0:	6023      	str	r3, [r4, #0]
 811cbe2:	bd38      	pop	{r3, r4, r5, pc}
 811cbe4:	10011ecc 	.word	0x10011ecc

0811cbe8 <_init>:
 811cbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811cbea:	bf00      	nop
 811cbec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 811cbee:	bc08      	pop	{r3}
 811cbf0:	469e      	mov	lr, r3
 811cbf2:	4770      	bx	lr

0811cbf4 <_fini>:
 811cbf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811cbf6:	bf00      	nop
 811cbf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 811cbfa:	bc08      	pop	{r3}
 811cbfc:	469e      	mov	lr, r3
 811cbfe:	4770      	bx	lr
