
STM32H747I-DISCO_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .shared_ram   00000bf0  38000000  38000000  0000a000  2**2
                  ALLOC
  2 .text         00007b5c  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000b0  08107dfc  08107dfc  00008dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08107eac  08107eac  00008eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08107eb4  08107eb4  00008eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000064  10000000  08107eb8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004bb4  10000064  08107f1c  00009064  2**2
                  ALLOC
  8 ._user_heap_stack 00002000  10004c18  08107f1c  00009c18  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 10 .debug_info   000288c2  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005330  00000000  00000000  00031956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e38  00000000  00000000  00036c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001725  00000000  00000000  00038ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00046018  00000000  00000000  0003a1e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001eb62  00000000  00000000  000801fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001c2dde  00000000  00000000  0009ed5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00261b3d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008a58  00000000  00000000  00261b80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008d  00000000  00000000  0026a5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000064 	.word	0x10000064
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08107de4 	.word	0x08107de4

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000068 	.word	0x10000068
 81002dc:	08107de4 	.word	0x08107de4

081002e0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 81002e0:	b580      	push	{r7, lr}
 81002e2:	b082      	sub	sp, #8
 81002e4:	af00      	add	r7, sp, #0
 81002e6:	6078      	str	r0, [r7, #4]
  if((SemMask &  __HAL_HSEM_SEMID_TO_MASK(HSEM_RX_ID))!= 0)
 81002e8:	687b      	ldr	r3, [r7, #4]
 81002ea:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 81002ee:	2b00      	cmp	r3, #0
 81002f0:	d006      	beq.n	8100300 <HAL_HSEM_FreeCallback+0x20>
  {
    /* Re-Activate HSEM notification */
    HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_RX_ID));
 81002f2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 81002f6:	f003 f95d 	bl	81035b4 <HAL_HSEM_ActivateNotification>
    /* New message received */
    prvCoreInterruptHandler(0);
 81002fa:	2000      	movs	r0, #0
 81002fc:	f000 f832 	bl	8100364 <prvCoreInterruptHandler>
  }
}
 8100300:	bf00      	nop
 8100302:	3708      	adds	r7, #8
 8100304:	46bd      	mov	sp, r7
 8100306:	bd80      	pop	{r7, pc}

08100308 <ipc_init>:

int ipc_init(void)
{
 8100308:	b480      	push	{r7}
 810030a:	b083      	sub	sp, #12
 810030c:	af00      	add	r7, sp, #0
    /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810030e:	4b0b      	ldr	r3, [pc, #44]	@ (810033c <ipc_init+0x34>)
 8100310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100314:	4a09      	ldr	r2, [pc, #36]	@ (810033c <ipc_init+0x34>)
 8100316:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810031a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810031e:	4b07      	ldr	r3, [pc, #28]	@ (810033c <ipc_init+0x34>)
 8100320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100324:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100328:	607b      	str	r3, [r7, #4]
 810032a:	687b      	ldr	r3, [r7, #4]
        shared_ram.channels[i].cm7_to_cm4_handle = xMessageBufferCreateStatic(IPC_CHANNEL_BUFFER_SIZE, (uint8_t*)shared_ram.channels[i].cm7_to_cm4_buffer,(StaticMessageBuffer_t*) &shared_ram.channels[i].cm7_to_cm4_xmsg);
        shared_ram.channels[i].cm4_to_cm7_handle = xMessageBufferCreateStatic(IPC_CHANNEL_BUFFER_SIZE, (uint8_t*)shared_ram.channels[i].cm4_to_cm7_buffer,(StaticMessageBuffer_t*) &shared_ram.channels[i].cm4_to_cm7_xmsg);
    }
#endif

    return 0;
 810032c:	2300      	movs	r3, #0
}
 810032e:	4618      	mov	r0, r3
 8100330:	370c      	adds	r7, #12
 8100332:	46bd      	mov	sp, r7
 8100334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100338:	4770      	bx	lr
 810033a:	bf00      	nop
 810033c:	58024400 	.word	0x58024400

08100340 <ipc_start>:

int ipc_start(void){
 8100340:	b580      	push	{r7, lr}
 8100342:	af00      	add	r7, sp, #0
    /* Enable HSEM Interrupt */
    HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 8100344:	2200      	movs	r2, #0
 8100346:	2105      	movs	r1, #5
 8100348:	207e      	movs	r0, #126	@ 0x7e
 810034a:	f003 f8bf 	bl	81034cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HSEM_IRQn);
 810034e:	207e      	movs	r0, #126	@ 0x7e
 8100350:	f003 f8d6 	bl	8103500 <HAL_NVIC_EnableIRQ>

    HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_RX_ID));
 8100354:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8100358:	f003 f92c 	bl	81035b4 <HAL_HSEM_ActivateNotification>
    return 0;
 810035c:	2300      	movs	r3, #0
}
 810035e:	4618      	mov	r0, r3
 8100360:	bd80      	pop	{r7, pc}
	...

08100364 <prvCoreInterruptHandler>:

static void prvCoreInterruptHandler(int ctrl)
{
 8100364:	b580      	push	{r7, lr}
 8100366:	b086      	sub	sp, #24
 8100368:	af00      	add	r7, sp, #0
 810036a:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 810036c:	2300      	movs	r3, #0
 810036e:	617b      	str	r3, [r7, #20]
    amp_ctrl_msg_t ctrl_msg;

    if (!xrx_ctrl_buf){
 8100370:	4b19      	ldr	r3, [pc, #100]	@ (81003d8 <prvCoreInterruptHandler+0x74>)
 8100372:	681b      	ldr	r3, [r3, #0]
 8100374:	2b00      	cmp	r3, #0
 8100376:	d02a      	beq.n	81003ce <prvCoreInterruptHandler+0x6a>
        return;
    }


	while(xMessageBufferReceiveFromISR(xrx_ctrl_buf, &ctrl_msg, sizeof(amp_ctrl_msg_t), &xHigherPriorityTaskWoken) == sizeof(amp_ctrl_msg_t)){
 8100378:	e011      	b.n	810039e <prvCoreInterruptHandler+0x3a>
		if(ctrl_msg.is_receive){
 810037a:	693b      	ldr	r3, [r7, #16]
 810037c:	2b00      	cmp	r3, #0
 810037e:	d007      	beq.n	8100390 <prvCoreInterruptHandler+0x2c>
			xMessageBufferSendCompletedFromISR(ctrl_msg.buffer,
 8100380:	68fb      	ldr	r3, [r7, #12]
 8100382:	f107 0214 	add.w	r2, r7, #20
 8100386:	4611      	mov	r1, r2
 8100388:	4618      	mov	r0, r3
 810038a:	f005 fc5e 	bl	8105c4a <xStreamBufferSendCompletedFromISR>
 810038e:	e006      	b.n	810039e <prvCoreInterruptHandler+0x3a>
											   &xHigherPriorityTaskWoken);
		}
		else {
			xMessageBufferReceiveCompletedFromISR(ctrl_msg.buffer,
 8100390:	68fb      	ldr	r3, [r7, #12]
 8100392:	f107 0214 	add.w	r2, r7, #20
 8100396:	4611      	mov	r1, r2
 8100398:	4618      	mov	r0, r3
 810039a:	f005 fc9a 	bl	8105cd2 <xStreamBufferReceiveCompletedFromISR>
	while(xMessageBufferReceiveFromISR(xrx_ctrl_buf, &ctrl_msg, sizeof(amp_ctrl_msg_t), &xHigherPriorityTaskWoken) == sizeof(amp_ctrl_msg_t)){
 810039e:	4b0e      	ldr	r3, [pc, #56]	@ (81003d8 <prvCoreInterruptHandler+0x74>)
 81003a0:	6818      	ldr	r0, [r3, #0]
 81003a2:	f107 0314 	add.w	r3, r7, #20
 81003a6:	f107 010c 	add.w	r1, r7, #12
 81003aa:	2208      	movs	r2, #8
 81003ac:	f005 fbca 	bl	8105b44 <xStreamBufferReceiveFromISR>
 81003b0:	4603      	mov	r3, r0
 81003b2:	2b08      	cmp	r3, #8
 81003b4:	d0e1      	beq.n	810037a <prvCoreInterruptHandler+0x16>
	}
    /* Normal FreeRTOS yield from interrupt semantics, where
       xHigherPriorityTaskWoken is initialzed to pdFALSE and will then get set
       to pdTRUE if the interrupt safe API unblocks a task that has a priority
       above that of the currently executing task. */
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 81003b6:	697b      	ldr	r3, [r7, #20]
 81003b8:	2b00      	cmp	r3, #0
 81003ba:	d009      	beq.n	81003d0 <prvCoreInterruptHandler+0x6c>
 81003bc:	4b07      	ldr	r3, [pc, #28]	@ (81003dc <prvCoreInterruptHandler+0x78>)
 81003be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81003c2:	601a      	str	r2, [r3, #0]
 81003c4:	f3bf 8f4f 	dsb	sy
 81003c8:	f3bf 8f6f 	isb	sy
 81003cc:	e000      	b.n	81003d0 <prvCoreInterruptHandler+0x6c>
        return;
 81003ce:	bf00      	nop
}
 81003d0:	3718      	adds	r7, #24
 81003d2:	46bd      	mov	sp, r7
 81003d4:	bd80      	pop	{r7, pc}
 81003d6:	bf00      	nop
 81003d8:	38000000 	.word	0x38000000
 81003dc:	e000ed04 	.word	0xe000ed04

081003e0 <vGenerateRemoteInterrupt>:

void vGenerateRemoteInterrupt(void * xUpdatedMessageBuffer, int is_receive)
{
 81003e0:	b580      	push	{r7, lr}
 81003e2:	b086      	sub	sp, #24
 81003e4:	af00      	add	r7, sp, #0
 81003e6:	6078      	str	r0, [r7, #4]
 81003e8:	6039      	str	r1, [r7, #0]
    MessageBufferHandle_t xUpdatedBuffer =
 81003ea:	687b      	ldr	r3, [r7, #4]
 81003ec:	617b      	str	r3, [r7, #20]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81003ee:	f3bf 8f4f 	dsb	sy
}
 81003f2:	bf00      	nop
        (MessageBufferHandle_t)xUpdatedMessageBuffer;
    amp_ctrl_msg_t ctrl_msg;

	__DSB();
    if (xUpdatedBuffer != xtx_ctrl_buf && xUpdatedBuffer != xrx_ctrl_buf)
 81003f4:	4b14      	ldr	r3, [pc, #80]	@ (8100448 <vGenerateRemoteInterrupt+0x68>)
 81003f6:	685b      	ldr	r3, [r3, #4]
 81003f8:	697a      	ldr	r2, [r7, #20]
 81003fa:	429a      	cmp	r2, r3
 81003fc:	d020      	beq.n	8100440 <vGenerateRemoteInterrupt+0x60>
 81003fe:	4b12      	ldr	r3, [pc, #72]	@ (8100448 <vGenerateRemoteInterrupt+0x68>)
 8100400:	681b      	ldr	r3, [r3, #0]
 8100402:	697a      	ldr	r2, [r7, #20]
 8100404:	429a      	cmp	r2, r3
 8100406:	d01b      	beq.n	8100440 <vGenerateRemoteInterrupt+0x60>
    {
		ctrl_msg.buffer = xUpdatedBuffer;
 8100408:	697b      	ldr	r3, [r7, #20]
 810040a:	60fb      	str	r3, [r7, #12]
		ctrl_msg.is_receive = is_receive;
 810040c:	683b      	ldr	r3, [r7, #0]
 810040e:	613b      	str	r3, [r7, #16]
		if(xMessageBufferSend(xtx_ctrl_buf, &ctrl_msg, sizeof(amp_ctrl_msg_t), 0) != sizeof(amp_ctrl_msg_t)){
 8100410:	4b0d      	ldr	r3, [pc, #52]	@ (8100448 <vGenerateRemoteInterrupt+0x68>)
 8100412:	6858      	ldr	r0, [r3, #4]
 8100414:	f107 010c 	add.w	r1, r7, #12
 8100418:	2300      	movs	r3, #0
 810041a:	2208      	movs	r2, #8
 810041c:	f005 fa20 	bl	8105860 <xStreamBufferSend>
 8100420:	4603      	mov	r3, r0
 8100422:	2b08      	cmp	r3, #8
 8100424:	d001      	beq.n	810042a <vGenerateRemoteInterrupt+0x4a>
			/* Control message buffer overflow */
			Error_Handler();
 8100426:	f000 f915 	bl	8100654 <Error_Handler>
		}

		/* Take the HW Semaphore with Process1 ID  */
		if(HAL_HSEM_Take(HSEM_TX_ID, HSEM_PROCESS) == HAL_OK)
 810042a:	211d      	movs	r1, #29
 810042c:	201f      	movs	r0, #31
 810042e:	f003 f889 	bl	8103544 <HAL_HSEM_Take>
 8100432:	4603      	mov	r3, r0
 8100434:	2b00      	cmp	r3, #0
 8100436:	d103      	bne.n	8100440 <vGenerateRemoteInterrupt+0x60>
		{
			/* Release the HW Semaphore */
			HAL_HSEM_Release(HSEM_TX_ID, HSEM_PROCESS);
 8100438:	211d      	movs	r1, #29
 810043a:	201f      	movs	r0, #31
 810043c:	f003 f8a6 	bl	810358c <HAL_HSEM_Release>
		}
    }
}
 8100440:	bf00      	nop
 8100442:	3718      	adds	r7, #24
 8100444:	46bd      	mov	sp, r7
 8100446:	bd80      	pop	{r7, pc}
 8100448:	38000000 	.word	0x38000000

0810044c <ipc_sendmsg>:

size_t ipc_sendmsg(unsigned int channel, ipc_msg* msg, uint32_t size, int32_t timeout)
{
 810044c:	b580      	push	{r7, lr}
 810044e:	b086      	sub	sp, #24
 8100450:	af00      	add	r7, sp, #0
 8100452:	60f8      	str	r0, [r7, #12]
 8100454:	60b9      	str	r1, [r7, #8]
 8100456:	607a      	str	r2, [r7, #4]
 8100458:	603b      	str	r3, [r7, #0]
	size_t len;
    if(xtx_ctrl_buf == 0)
 810045a:	4b1a      	ldr	r3, [pc, #104]	@ (81004c4 <ipc_sendmsg+0x78>)
 810045c:	685b      	ldr	r3, [r3, #4]
 810045e:	2b00      	cmp	r3, #0
 8100460:	d101      	bne.n	8100466 <ipc_sendmsg+0x1a>
      return 0;
 8100462:	2300      	movs	r3, #0
 8100464:	e02a      	b.n	81004bc <ipc_sendmsg+0x70>
    if(channel >= IPC_NUMBER_OF_CHANNELS)
 8100466:	68fb      	ldr	r3, [r7, #12]
 8100468:	2b01      	cmp	r3, #1
 810046a:	d901      	bls.n	8100470 <ipc_sendmsg+0x24>
      return 0;
 810046c:	2300      	movs	r3, #0
 810046e:	e025      	b.n	81004bc <ipc_sendmsg+0x70>

    if(timeout < 0)
 8100470:	683b      	ldr	r3, [r7, #0]
 8100472:	2b00      	cmp	r3, #0
 8100474:	da11      	bge.n	810049a <ipc_sendmsg+0x4e>
    	len = xMessageBufferSend(xtx_data_buf(channel), msg, size, portMAX_DELAY);
 8100476:	4a13      	ldr	r2, [pc, #76]	@ (81004c4 <ipc_sendmsg+0x78>)
 8100478:	68fb      	ldr	r3, [r7, #12]
 810047a:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 810047e:	fb01 f303 	mul.w	r3, r1, r3
 8100482:	4413      	add	r3, r2
 8100484:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 8100488:	6818      	ldr	r0, [r3, #0]
 810048a:	f04f 33ff 	mov.w	r3, #4294967295
 810048e:	687a      	ldr	r2, [r7, #4]
 8100490:	68b9      	ldr	r1, [r7, #8]
 8100492:	f005 f9e5 	bl	8105860 <xStreamBufferSend>
 8100496:	6178      	str	r0, [r7, #20]
 8100498:	e00f      	b.n	81004ba <ipc_sendmsg+0x6e>
    else
    	len = xMessageBufferSend(xtx_data_buf(channel), msg, size, (TickType_t)timeout);
 810049a:	4a0a      	ldr	r2, [pc, #40]	@ (81004c4 <ipc_sendmsg+0x78>)
 810049c:	68fb      	ldr	r3, [r7, #12]
 810049e:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 81004a2:	fb01 f303 	mul.w	r3, r1, r3
 81004a6:	4413      	add	r3, r2
 81004a8:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 81004ac:	6818      	ldr	r0, [r3, #0]
 81004ae:	683b      	ldr	r3, [r7, #0]
 81004b0:	687a      	ldr	r2, [r7, #4]
 81004b2:	68b9      	ldr	r1, [r7, #8]
 81004b4:	f005 f9d4 	bl	8105860 <xStreamBufferSend>
 81004b8:	6178      	str	r0, [r7, #20]

    return len;
 81004ba:	697b      	ldr	r3, [r7, #20]
}
 81004bc:	4618      	mov	r0, r3
 81004be:	3718      	adds	r7, #24
 81004c0:	46bd      	mov	sp, r7
 81004c2:	bd80      	pop	{r7, pc}
 81004c4:	38000000 	.word	0x38000000

081004c8 <ipc_recvmsg>:

size_t ipc_recvmsg(unsigned int channel, ipc_msg* msg, uint32_t size, int32_t timeout)
{
 81004c8:	b580      	push	{r7, lr}
 81004ca:	b086      	sub	sp, #24
 81004cc:	af00      	add	r7, sp, #0
 81004ce:	60f8      	str	r0, [r7, #12]
 81004d0:	60b9      	str	r1, [r7, #8]
 81004d2:	607a      	str	r2, [r7, #4]
 81004d4:	603b      	str	r3, [r7, #0]
    size_t len;

    if(channel >= IPC_NUMBER_OF_CHANNELS)
 81004d6:	68fb      	ldr	r3, [r7, #12]
 81004d8:	2b01      	cmp	r3, #1
 81004da:	d901      	bls.n	81004e0 <ipc_recvmsg+0x18>
      return 0;
 81004dc:	2300      	movs	r3, #0
 81004de:	e025      	b.n	810052c <ipc_recvmsg+0x64>

    if (timeout < 0)
 81004e0:	683b      	ldr	r3, [r7, #0]
 81004e2:	2b00      	cmp	r3, #0
 81004e4:	da11      	bge.n	810050a <ipc_recvmsg+0x42>
        len = xMessageBufferReceive(xrx_data_buf(channel), msg, size, portMAX_DELAY);
 81004e6:	4a13      	ldr	r2, [pc, #76]	@ (8100534 <ipc_recvmsg+0x6c>)
 81004e8:	68fb      	ldr	r3, [r7, #12]
 81004ea:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 81004ee:	fb01 f303 	mul.w	r3, r1, r3
 81004f2:	4413      	add	r3, r2
 81004f4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 81004f8:	6818      	ldr	r0, [r3, #0]
 81004fa:	f04f 33ff 	mov.w	r3, #4294967295
 81004fe:	687a      	ldr	r2, [r7, #4]
 8100500:	68b9      	ldr	r1, [r7, #8]
 8100502:	f005 fa95 	bl	8105a30 <xStreamBufferReceive>
 8100506:	6178      	str	r0, [r7, #20]
 8100508:	e00f      	b.n	810052a <ipc_recvmsg+0x62>
    else
        len = xMessageBufferReceive(xrx_data_buf(channel), msg, size, (TickType_t)timeout);
 810050a:	4a0a      	ldr	r2, [pc, #40]	@ (8100534 <ipc_recvmsg+0x6c>)
 810050c:	68fb      	ldr	r3, [r7, #12]
 810050e:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8100512:	fb01 f303 	mul.w	r3, r1, r3
 8100516:	4413      	add	r3, r2
 8100518:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 810051c:	6818      	ldr	r0, [r3, #0]
 810051e:	683b      	ldr	r3, [r7, #0]
 8100520:	687a      	ldr	r2, [r7, #4]
 8100522:	68b9      	ldr	r1, [r7, #8]
 8100524:	f005 fa84 	bl	8105a30 <xStreamBufferReceive>
 8100528:	6178      	str	r0, [r7, #20]

    return len;
 810052a:	697b      	ldr	r3, [r7, #20]
}
 810052c:	4618      	mov	r0, r3
 810052e:	3718      	adds	r7, #24
 8100530:	46bd      	mov	sp, r7
 8100532:	bd80      	pop	{r7, pc}
 8100534:	38000000 	.word	0x38000000

08100538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100538:	b580      	push	{r7, lr}
 810053a:	b082      	sub	sp, #8
 810053c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810053e:	4b26      	ldr	r3, [pc, #152]	@ (81005d8 <main+0xa0>)
 8100540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100544:	4a24      	ldr	r2, [pc, #144]	@ (81005d8 <main+0xa0>)
 8100546:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810054a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810054e:	4b22      	ldr	r3, [pc, #136]	@ (81005d8 <main+0xa0>)
 8100550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100554:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100558:	607b      	str	r3, [r7, #4]
 810055a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810055c:	2001      	movs	r0, #1
 810055e:	f003 f829 	bl	81035b4 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100562:	f003 f8cd 	bl	8103700 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100566:	2201      	movs	r2, #1
 8100568:	2102      	movs	r1, #2
 810056a:	2000      	movs	r0, #0
 810056c:	f003 f84e 	bl	810360c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100570:	4b1a      	ldr	r3, [pc, #104]	@ (81005dc <main+0xa4>)
 8100572:	681b      	ldr	r3, [r3, #0]
 8100574:	091b      	lsrs	r3, r3, #4
 8100576:	f003 030f 	and.w	r3, r3, #15
 810057a:	2b07      	cmp	r3, #7
 810057c:	d108      	bne.n	8100590 <main+0x58>
 810057e:	4b18      	ldr	r3, [pc, #96]	@ (81005e0 <main+0xa8>)
 8100580:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8100584:	4a16      	ldr	r2, [pc, #88]	@ (81005e0 <main+0xa8>)
 8100586:	f043 0301 	orr.w	r3, r3, #1
 810058a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 810058e:	e007      	b.n	81005a0 <main+0x68>
 8100590:	4b13      	ldr	r3, [pc, #76]	@ (81005e0 <main+0xa8>)
 8100592:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8100596:	4a12      	ldr	r2, [pc, #72]	@ (81005e0 <main+0xa8>)
 8100598:	f043 0301 	orr.w	r3, r3, #1
 810059c:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81005a0:	f002 fe6a 	bl	8103278 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_MDMA_Init();
 81005a4:	f000 f82a 	bl	81005fc <_ZL12MX_MDMA_Initv>
  /* USER CODE BEGIN 2 */
  ipc_init();
 81005a8:	f7ff feae 	bl	8100308 <ipc_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 81005ac:	f003 fdcc 	bl	8104148 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_EDaemonN */
  Task_EDaemonNHandle = osThreadNew(StartTask_EDaemonN, NULL, &Task_EDaemonN_attributes);
 81005b0:	4a0c      	ldr	r2, [pc, #48]	@ (81005e4 <main+0xac>)
 81005b2:	2100      	movs	r1, #0
 81005b4:	480c      	ldr	r0, [pc, #48]	@ (81005e8 <main+0xb0>)
 81005b6:	f003 fe11 	bl	81041dc <osThreadNew>
 81005ba:	4603      	mov	r3, r0
 81005bc:	4a0b      	ldr	r2, [pc, #44]	@ (81005ec <main+0xb4>)
 81005be:	6013      	str	r3, [r2, #0]

  /* creation of Task_EventMgrM4 */
  Task_EventMgrM4Handle = osThreadNew(StartTask_EventMgrM4, NULL, &Task_EventMgrM4_attributes);
 81005c0:	4a0b      	ldr	r2, [pc, #44]	@ (81005f0 <main+0xb8>)
 81005c2:	2100      	movs	r1, #0
 81005c4:	480b      	ldr	r0, [pc, #44]	@ (81005f4 <main+0xbc>)
 81005c6:	f003 fe09 	bl	81041dc <osThreadNew>
 81005ca:	4603      	mov	r3, r0
 81005cc:	4a0a      	ldr	r2, [pc, #40]	@ (81005f8 <main+0xc0>)
 81005ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 81005d0:	f003 fdde 	bl	8104190 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81005d4:	bf00      	nop
 81005d6:	e7fd      	b.n	81005d4 <main+0x9c>
 81005d8:	58024400 	.word	0x58024400
 81005dc:	e000ed00 	.word	0xe000ed00
 81005e0:	58026400 	.word	0x58026400
 81005e4:	08107e50 	.word	0x08107e50
 81005e8:	08100957 	.word	0x08100957
 81005ec:	10000080 	.word	0x10000080
 81005f0:	08107e74 	.word	0x08107e74
 81005f4:	0810105d 	.word	0x0810105d
 81005f8:	10000084 	.word	0x10000084

081005fc <_ZL12MX_MDMA_Initv>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 81005fc:	b480      	push	{r7}
 81005fe:	b083      	sub	sp, #12
 8100600:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8100602:	4b0a      	ldr	r3, [pc, #40]	@ (810062c <_ZL12MX_MDMA_Initv+0x30>)
 8100604:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8100608:	4a08      	ldr	r2, [pc, #32]	@ (810062c <_ZL12MX_MDMA_Initv+0x30>)
 810060a:	f043 0301 	orr.w	r3, r3, #1
 810060e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8100612:	4b06      	ldr	r3, [pc, #24]	@ (810062c <_ZL12MX_MDMA_Initv+0x30>)
 8100614:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8100618:	f003 0301 	and.w	r3, r3, #1
 810061c:	607b      	str	r3, [r7, #4]
 810061e:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

}
 8100620:	bf00      	nop
 8100622:	370c      	adds	r7, #12
 8100624:	46bd      	mov	sp, r7
 8100626:	f85d 7b04 	ldr.w	r7, [sp], #4
 810062a:	4770      	bx	lr
 810062c:	58024400 	.word	0x58024400

08100630 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8100630:	b580      	push	{r7, lr}
 8100632:	b082      	sub	sp, #8
 8100634:	af00      	add	r7, sp, #0
 8100636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8100638:	687b      	ldr	r3, [r7, #4]
 810063a:	681b      	ldr	r3, [r3, #0]
 810063c:	4a04      	ldr	r2, [pc, #16]	@ (8100650 <HAL_TIM_PeriodElapsedCallback+0x20>)
 810063e:	4293      	cmp	r3, r2
 8100640:	d101      	bne.n	8100646 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8100642:	f002 fe77 	bl	8103334 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8100646:	bf00      	nop
 8100648:	3708      	adds	r7, #8
 810064a:	46bd      	mov	sp, r7
 810064c:	bd80      	pop	{r7, pc}
 810064e:	bf00      	nop
 8100650:	40001000 	.word	0x40001000

08100654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100654:	b480      	push	{r7}
 8100656:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8100658:	b672      	cpsid	i
}
 810065a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 810065c:	bf00      	nop
 810065e:	e7fd      	b.n	810065c <Error_Handler+0x8>

08100660 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8100660:	b580      	push	{r7, lr}
 8100662:	b082      	sub	sp, #8
 8100664:	af00      	add	r7, sp, #0
 8100666:	6078      	str	r0, [r7, #4]
 8100668:	6039      	str	r1, [r7, #0]
 810066a:	687b      	ldr	r3, [r7, #4]
 810066c:	2b01      	cmp	r3, #1
 810066e:	d114      	bne.n	810069a <_Z41__static_initialization_and_destruction_0ii+0x3a>
 8100670:	683b      	ldr	r3, [r7, #0]
 8100672:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8100676:	4293      	cmp	r3, r2
 8100678:	d10f      	bne.n	810069a <_Z41__static_initialization_and_destruction_0ii+0x3a>
QueueHandle_t queueToEventManagerCM4 = xQueueCreate(8, sizeof(SMessage));
 810067a:	2200      	movs	r2, #0
 810067c:	2118      	movs	r1, #24
 810067e:	2008      	movs	r0, #8
 8100680:	f004 fc6b 	bl	8104f5a <xQueueGenericCreate>
 8100684:	4603      	mov	r3, r0
 8100686:	4a07      	ldr	r2, [pc, #28]	@ (81006a4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8100688:	6013      	str	r3, [r2, #0]
QueueHandle_t queueToNativeDaemon = xQueueCreate(16, sizeof(SMessage));
 810068a:	2200      	movs	r2, #0
 810068c:	2118      	movs	r1, #24
 810068e:	2010      	movs	r0, #16
 8100690:	f004 fc63 	bl	8104f5a <xQueueGenericCreate>
 8100694:	4603      	mov	r3, r0
 8100696:	4a04      	ldr	r2, [pc, #16]	@ (81006a8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8100698:	6013      	str	r3, [r2, #0]
}
 810069a:	bf00      	nop
 810069c:	3708      	adds	r7, #8
 810069e:	46bd      	mov	sp, r7
 81006a0:	bd80      	pop	{r7, pc}
 81006a2:	bf00      	nop
 81006a4:	10000088 	.word	0x10000088
 81006a8:	1000008c 	.word	0x1000008c

081006ac <_GLOBAL__sub_I_huart1>:
 81006ac:	b580      	push	{r7, lr}
 81006ae:	af00      	add	r7, sp, #0
 81006b0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 81006b4:	2001      	movs	r0, #1
 81006b6:	f7ff ffd3 	bl	8100660 <_Z41__static_initialization_and_destruction_0ii>
 81006ba:	bd80      	pop	{r7, pc}

081006bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81006bc:	b580      	push	{r7, lr}
 81006be:	b082      	sub	sp, #8
 81006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81006c2:	4b10      	ldr	r3, [pc, #64]	@ (8100704 <HAL_MspInit+0x48>)
 81006c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81006c8:	4a0e      	ldr	r2, [pc, #56]	@ (8100704 <HAL_MspInit+0x48>)
 81006ca:	f043 0302 	orr.w	r3, r3, #2
 81006ce:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81006d2:	4b0c      	ldr	r3, [pc, #48]	@ (8100704 <HAL_MspInit+0x48>)
 81006d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81006d8:	f003 0302 	and.w	r3, r3, #2
 81006dc:	607b      	str	r3, [r7, #4]
 81006de:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 81006e0:	2200      	movs	r2, #0
 81006e2:	210f      	movs	r1, #15
 81006e4:	f06f 0001 	mvn.w	r0, #1
 81006e8:	f002 fef0 	bl	81034cc <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 5, 0);
 81006ec:	2200      	movs	r2, #0
 81006ee:	2105      	movs	r1, #5
 81006f0:	207e      	movs	r0, #126	@ 0x7e
 81006f2:	f002 feeb 	bl	81034cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 81006f6:	207e      	movs	r0, #126	@ 0x7e
 81006f8:	f002 ff02 	bl	8103500 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81006fc:	bf00      	nop
 81006fe:	3708      	adds	r7, #8
 8100700:	46bd      	mov	sp, r7
 8100702:	bd80      	pop	{r7, pc}
 8100704:	58024400 	.word	0x58024400

08100708 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100708:	b580      	push	{r7, lr}
 810070a:	b090      	sub	sp, #64	@ 0x40
 810070c:	af00      	add	r7, sp, #0
 810070e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100710:	687b      	ldr	r3, [r7, #4]
 8100712:	2b0f      	cmp	r3, #15
 8100714:	d827      	bhi.n	8100766 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8100716:	2200      	movs	r2, #0
 8100718:	6879      	ldr	r1, [r7, #4]
 810071a:	2036      	movs	r0, #54	@ 0x36
 810071c:	f002 fed6 	bl	81034cc <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8100720:	2036      	movs	r0, #54	@ 0x36
 8100722:	f002 feed 	bl	8103500 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8100726:	4a29      	ldr	r2, [pc, #164]	@ (81007cc <HAL_InitTick+0xc4>)
 8100728:	687b      	ldr	r3, [r7, #4]
 810072a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 810072c:	4b28      	ldr	r3, [pc, #160]	@ (81007d0 <HAL_InitTick+0xc8>)
 810072e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100732:	4a27      	ldr	r2, [pc, #156]	@ (81007d0 <HAL_InitTick+0xc8>)
 8100734:	f043 0310 	orr.w	r3, r3, #16
 8100738:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 810073c:	4b24      	ldr	r3, [pc, #144]	@ (81007d0 <HAL_InitTick+0xc8>)
 810073e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100742:	f003 0310 	and.w	r3, r3, #16
 8100746:	60fb      	str	r3, [r7, #12]
 8100748:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 810074a:	f107 0210 	add.w	r2, r7, #16
 810074e:	f107 0314 	add.w	r3, r7, #20
 8100752:	4611      	mov	r1, r2
 8100754:	4618      	mov	r0, r3
 8100756:	f003 f9a3 	bl	8103aa0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 810075a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810075c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 810075e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8100760:	2b00      	cmp	r3, #0
 8100762:	d106      	bne.n	8100772 <HAL_InitTick+0x6a>
 8100764:	e001      	b.n	810076a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8100766:	2301      	movs	r3, #1
 8100768:	e02b      	b.n	81007c2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 810076a:	f003 f983 	bl	8103a74 <HAL_RCC_GetPCLK1Freq>
 810076e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8100770:	e004      	b.n	810077c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8100772:	f003 f97f 	bl	8103a74 <HAL_RCC_GetPCLK1Freq>
 8100776:	4603      	mov	r3, r0
 8100778:	005b      	lsls	r3, r3, #1
 810077a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 810077c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810077e:	4a15      	ldr	r2, [pc, #84]	@ (81007d4 <HAL_InitTick+0xcc>)
 8100780:	fba2 2303 	umull	r2, r3, r2, r3
 8100784:	0c9b      	lsrs	r3, r3, #18
 8100786:	3b01      	subs	r3, #1
 8100788:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 810078a:	4b13      	ldr	r3, [pc, #76]	@ (81007d8 <HAL_InitTick+0xd0>)
 810078c:	4a13      	ldr	r2, [pc, #76]	@ (81007dc <HAL_InitTick+0xd4>)
 810078e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8100790:	4b11      	ldr	r3, [pc, #68]	@ (81007d8 <HAL_InitTick+0xd0>)
 8100792:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8100796:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8100798:	4a0f      	ldr	r2, [pc, #60]	@ (81007d8 <HAL_InitTick+0xd0>)
 810079a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810079c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 810079e:	4b0e      	ldr	r3, [pc, #56]	@ (81007d8 <HAL_InitTick+0xd0>)
 81007a0:	2200      	movs	r2, #0
 81007a2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 81007a4:	4b0c      	ldr	r3, [pc, #48]	@ (81007d8 <HAL_InitTick+0xd0>)
 81007a6:	2200      	movs	r2, #0
 81007a8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 81007aa:	480b      	ldr	r0, [pc, #44]	@ (81007d8 <HAL_InitTick+0xd0>)
 81007ac:	f003 f9ba 	bl	8103b24 <HAL_TIM_Base_Init>
 81007b0:	4603      	mov	r3, r0
 81007b2:	2b00      	cmp	r3, #0
 81007b4:	d104      	bne.n	81007c0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 81007b6:	4808      	ldr	r0, [pc, #32]	@ (81007d8 <HAL_InitTick+0xd0>)
 81007b8:	f003 fa16 	bl	8103be8 <HAL_TIM_Base_Start_IT>
 81007bc:	4603      	mov	r3, r0
 81007be:	e000      	b.n	81007c2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 81007c0:	2301      	movs	r3, #1
}
 81007c2:	4618      	mov	r0, r3
 81007c4:	3740      	adds	r7, #64	@ 0x40
 81007c6:	46bd      	mov	sp, r7
 81007c8:	bd80      	pop	{r7, pc}
 81007ca:	bf00      	nop
 81007cc:	10000008 	.word	0x10000008
 81007d0:	58024400 	.word	0x58024400
 81007d4:	431bde83 	.word	0x431bde83
 81007d8:	10000090 	.word	0x10000090
 81007dc:	40001000 	.word	0x40001000

081007e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81007e0:	b480      	push	{r7}
 81007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81007e4:	bf00      	nop
 81007e6:	e7fd      	b.n	81007e4 <NMI_Handler+0x4>

081007e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81007e8:	b480      	push	{r7}
 81007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81007ec:	bf00      	nop
 81007ee:	e7fd      	b.n	81007ec <HardFault_Handler+0x4>

081007f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81007f0:	b480      	push	{r7}
 81007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81007f4:	bf00      	nop
 81007f6:	e7fd      	b.n	81007f4 <MemManage_Handler+0x4>

081007f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81007f8:	b480      	push	{r7}
 81007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81007fc:	bf00      	nop
 81007fe:	e7fd      	b.n	81007fc <BusFault_Handler+0x4>

08100800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100800:	b480      	push	{r7}
 8100802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100804:	bf00      	nop
 8100806:	e7fd      	b.n	8100804 <UsageFault_Handler+0x4>

08100808 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100808:	b480      	push	{r7}
 810080a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810080c:	bf00      	nop
 810080e:	46bd      	mov	sp, r7
 8100810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100814:	4770      	bx	lr
	...

08100818 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8100818:	b580      	push	{r7, lr}
 810081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 810081c:	4802      	ldr	r0, [pc, #8]	@ (8100828 <TIM6_DAC_IRQHandler+0x10>)
 810081e:	f003 fa5b 	bl	8103cd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8100822:	bf00      	nop
 8100824:	bd80      	pop	{r7, pc}
 8100826:	bf00      	nop
 8100828:	10000090 	.word	0x10000090

0810082c <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 810082c:	b580      	push	{r7, lr}
 810082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8100830:	f002 fed2 	bl	81035d8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 8100834:	bf00      	nop
 8100836:	bd80      	pop	{r7, pc}

08100838 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8100838:	b480      	push	{r7}
 810083a:	af00      	add	r7, sp, #0
	return 1;
 810083c:	2301      	movs	r3, #1
}
 810083e:	4618      	mov	r0, r3
 8100840:	46bd      	mov	sp, r7
 8100842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100846:	4770      	bx	lr

08100848 <_kill>:

int _kill(int pid, int sig)
{
 8100848:	b580      	push	{r7, lr}
 810084a:	b082      	sub	sp, #8
 810084c:	af00      	add	r7, sp, #0
 810084e:	6078      	str	r0, [r7, #4]
 8100850:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8100852:	f007 fa43 	bl	8107cdc <__errno>
 8100856:	4603      	mov	r3, r0
 8100858:	2216      	movs	r2, #22
 810085a:	601a      	str	r2, [r3, #0]
	return -1;
 810085c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8100860:	4618      	mov	r0, r3
 8100862:	3708      	adds	r7, #8
 8100864:	46bd      	mov	sp, r7
 8100866:	bd80      	pop	{r7, pc}

08100868 <_exit>:

void _exit (int status)
{
 8100868:	b580      	push	{r7, lr}
 810086a:	b082      	sub	sp, #8
 810086c:	af00      	add	r7, sp, #0
 810086e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8100870:	f04f 31ff 	mov.w	r1, #4294967295
 8100874:	6878      	ldr	r0, [r7, #4]
 8100876:	f7ff ffe7 	bl	8100848 <_kill>
	while (1) {}		/* Make sure we hang here */
 810087a:	bf00      	nop
 810087c:	e7fd      	b.n	810087a <_exit+0x12>
	...

08100880 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8100880:	b580      	push	{r7, lr}
 8100882:	b086      	sub	sp, #24
 8100884:	af00      	add	r7, sp, #0
 8100886:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8100888:	4a14      	ldr	r2, [pc, #80]	@ (81008dc <_sbrk+0x5c>)
 810088a:	4b15      	ldr	r3, [pc, #84]	@ (81008e0 <_sbrk+0x60>)
 810088c:	1ad3      	subs	r3, r2, r3
 810088e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8100890:	697b      	ldr	r3, [r7, #20]
 8100892:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8100894:	4b13      	ldr	r3, [pc, #76]	@ (81008e4 <_sbrk+0x64>)
 8100896:	681b      	ldr	r3, [r3, #0]
 8100898:	2b00      	cmp	r3, #0
 810089a:	d102      	bne.n	81008a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 810089c:	4b11      	ldr	r3, [pc, #68]	@ (81008e4 <_sbrk+0x64>)
 810089e:	4a12      	ldr	r2, [pc, #72]	@ (81008e8 <_sbrk+0x68>)
 81008a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 81008a2:	4b10      	ldr	r3, [pc, #64]	@ (81008e4 <_sbrk+0x64>)
 81008a4:	681a      	ldr	r2, [r3, #0]
 81008a6:	687b      	ldr	r3, [r7, #4]
 81008a8:	4413      	add	r3, r2
 81008aa:	693a      	ldr	r2, [r7, #16]
 81008ac:	429a      	cmp	r2, r3
 81008ae:	d207      	bcs.n	81008c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 81008b0:	f007 fa14 	bl	8107cdc <__errno>
 81008b4:	4603      	mov	r3, r0
 81008b6:	220c      	movs	r2, #12
 81008b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 81008ba:	f04f 33ff 	mov.w	r3, #4294967295
 81008be:	e009      	b.n	81008d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 81008c0:	4b08      	ldr	r3, [pc, #32]	@ (81008e4 <_sbrk+0x64>)
 81008c2:	681b      	ldr	r3, [r3, #0]
 81008c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 81008c6:	4b07      	ldr	r3, [pc, #28]	@ (81008e4 <_sbrk+0x64>)
 81008c8:	681a      	ldr	r2, [r3, #0]
 81008ca:	687b      	ldr	r3, [r7, #4]
 81008cc:	4413      	add	r3, r2
 81008ce:	4a05      	ldr	r2, [pc, #20]	@ (81008e4 <_sbrk+0x64>)
 81008d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 81008d2:	68fb      	ldr	r3, [r7, #12]
}
 81008d4:	4618      	mov	r0, r3
 81008d6:	3718      	adds	r7, #24
 81008d8:	46bd      	mov	sp, r7
 81008da:	bd80      	pop	{r7, pc}
 81008dc:	10048000 	.word	0x10048000
 81008e0:	00001000 	.word	0x00001000
 81008e4:	100000dc 	.word	0x100000dc
 81008e8:	10004c18 	.word	0x10004c18

081008ec <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 81008ec:	b480      	push	{r7}
 81008ee:	b083      	sub	sp, #12
 81008f0:	af00      	add	r7, sp, #0
 81008f2:	6078      	str	r0, [r7, #4]
 81008f4:	6039      	str	r1, [r7, #0]
 81008f6:	683b      	ldr	r3, [r7, #0]
 81008f8:	4618      	mov	r0, r3
 81008fa:	370c      	adds	r7, #12
 81008fc:	46bd      	mov	sp, r7
 81008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100902:	4770      	bx	lr

08100904 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       noexcept { return &_M_pod_data[0]; }
 8100904:	b480      	push	{r7}
 8100906:	b083      	sub	sp, #12
 8100908:	af00      	add	r7, sp, #0
 810090a:	6078      	str	r0, [r7, #4]
 810090c:	687b      	ldr	r3, [r7, #4]
 810090e:	4618      	mov	r0, r3
 8100910:	370c      	adds	r7, #12
 8100912:	46bd      	mov	sp, r7
 8100914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100918:	4770      	bx	lr

0810091a <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const noexcept { return &_M_pod_data[0]; }
 810091a:	b480      	push	{r7}
 810091c:	b083      	sub	sp, #12
 810091e:	af00      	add	r7, sp, #0
 8100920:	6078      	str	r0, [r7, #4]
 8100922:	687b      	ldr	r3, [r7, #4]
 8100924:	4618      	mov	r0, r3
 8100926:	370c      	adds	r7, #12
 8100928:	46bd      	mov	sp, r7
 810092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810092e:	4770      	bx	lr

08100930 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8100930:	b580      	push	{r7, lr}
 8100932:	b082      	sub	sp, #8
 8100934:	af00      	add	r7, sp, #0
 8100936:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8100938:	687b      	ldr	r3, [r7, #4]
 810093a:	689b      	ldr	r3, [r3, #8]
 810093c:	2b00      	cmp	r3, #0
 810093e:	d005      	beq.n	810094c <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8100940:	687b      	ldr	r3, [r7, #4]
 8100942:	689b      	ldr	r3, [r3, #8]
 8100944:	6878      	ldr	r0, [r7, #4]
 8100946:	6879      	ldr	r1, [r7, #4]
 8100948:	2203      	movs	r2, #3
 810094a:	4798      	blx	r3
    }
 810094c:	687b      	ldr	r3, [r7, #4]
 810094e:	4618      	mov	r0, r3
 8100950:	3708      	adds	r7, #8
 8100952:	46bd      	mov	sp, r7
 8100954:	bd80      	pop	{r7, pc}

08100956 <StartTask_EDaemonN>:
#include "cm_ipc.h"

extern QueueHandle_t queueToNativeDaemon;

void StartTask_EDaemonN(void *argument)
{
 8100956:	b580      	push	{r7, lr}
 8100958:	b086      	sub	sp, #24
 810095a:	af00      	add	r7, sp, #0
 810095c:	6078      	str	r0, [r7, #4]
	ipc_start();
 810095e:	f7ff fcef 	bl	8100340 <ipc_start>
	EdiabasDaemonNativeTask EdiabasDaemonNativeTaskInstance;
 8100962:	f107 030c 	add.w	r3, r7, #12
 8100966:	4618      	mov	r0, r3
 8100968:	f000 f80a 	bl	8100980 <_ZN23EdiabasDaemonNativeTaskC1Ev>

	for(;;)
	{
		EdiabasDaemonNativeTaskInstance.process();
 810096c:	f107 030c 	add.w	r3, r7, #12
 8100970:	4618      	mov	r0, r3
 8100972:	f000 f85d 	bl	8100a30 <_ZN23EdiabasDaemonNativeTask7processEv>
		osDelay(1);
 8100976:	2001      	movs	r0, #1
 8100978:	f003 fcc2 	bl	8104300 <osDelay>
		EdiabasDaemonNativeTaskInstance.process();
 810097c:	bf00      	nop
 810097e:	e7f5      	b.n	810096c <StartTask_EDaemonN+0x16>

08100980 <_ZN23EdiabasDaemonNativeTaskC1Ev>:
	}
}

EdiabasDaemonNativeTask::EdiabasDaemonNativeTask() : event_bus(EventBusManager(queueToNativeDaemon, EVENT_CLIENT_DAEMON)) {}
 8100980:	b580      	push	{r7, lr}
 8100982:	b082      	sub	sp, #8
 8100984:	af00      	add	r7, sp, #0
 8100986:	6078      	str	r0, [r7, #4]
 8100988:	687b      	ldr	r3, [r7, #4]
 810098a:	4a05      	ldr	r2, [pc, #20]	@ (81009a0 <_ZN23EdiabasDaemonNativeTaskC1Ev+0x20>)
 810098c:	6811      	ldr	r1, [r2, #0]
 810098e:	2202      	movs	r2, #2
 8100990:	4618      	mov	r0, r3
 8100992:	f000 fa97 	bl	8100ec4 <_ZN15EventBusManagerC1EP15QueueDefinition12EEventClient>
 8100996:	687b      	ldr	r3, [r7, #4]
 8100998:	4618      	mov	r0, r3
 810099a:	3708      	adds	r7, #8
 810099c:	46bd      	mov	sp, r7
 810099e:	bd80      	pop	{r7, pc}
 81009a0:	1000008c 	.word	0x1000008c

081009a4 <_ZN23EdiabasDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClient>:

void EdiabasDaemonNativeTask::OnEvent(EEventType event, UMessageData msg, EEventClient eventSender)
{
 81009a4:	b082      	sub	sp, #8
 81009a6:	b480      	push	{r7}
 81009a8:	b083      	sub	sp, #12
 81009aa:	af00      	add	r7, sp, #0
 81009ac:	6078      	str	r0, [r7, #4]
 81009ae:	f107 0010 	add.w	r0, r7, #16
 81009b2:	e880 000c 	stmia.w	r0, {r2, r3}
 81009b6:	460b      	mov	r3, r1
 81009b8:	70fb      	strb	r3, [r7, #3]
	switch(event)
	{
		default:
			break;
 81009ba:	bf00      	nop
	}
}
 81009bc:	bf00      	nop
 81009be:	370c      	adds	r7, #12
 81009c0:	46bd      	mov	sp, r7
 81009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009c6:	b002      	add	sp, #8
 81009c8:	4770      	bx	lr

081009ca <_ZZN23EdiabasDaemonNativeTask7processEvENKUl10EEventType12UMessageData12EEventClientE_clES0_S1_S2_>:
	size_t ret = ipc_recvmsg(1, &msg, len, 0);
	if(ret == len)
	{
		ipc_sendmsg(1, &msg, len, 0);
	}
	event_bus.receive([this](EEventType event, UMessageData msg, EEventClient eventSender){this->OnEvent(event, msg, eventSender);});
 81009ca:	b082      	sub	sp, #8
 81009cc:	b5b0      	push	{r4, r5, r7, lr}
 81009ce:	b086      	sub	sp, #24
 81009d0:	af04      	add	r7, sp, #16
 81009d2:	6078      	str	r0, [r7, #4]
 81009d4:	f107 0018 	add.w	r0, r7, #24
 81009d8:	e880 000c 	stmia.w	r0, {r2, r3}
 81009dc:	460b      	mov	r3, r1
 81009de:	70fb      	strb	r3, [r7, #3]
 81009e0:	687b      	ldr	r3, [r7, #4]
 81009e2:	681c      	ldr	r4, [r3, #0]
 81009e4:	78fd      	ldrb	r5, [r7, #3]
 81009e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 81009ea:	9302      	str	r3, [sp, #8]
 81009ec:	466a      	mov	r2, sp
 81009ee:	f107 0320 	add.w	r3, r7, #32
 81009f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 81009f6:	e882 0003 	stmia.w	r2, {r0, r1}
 81009fa:	f107 0318 	add.w	r3, r7, #24
 81009fe:	cb0c      	ldmia	r3, {r2, r3}
 8100a00:	4629      	mov	r1, r5
 8100a02:	4620      	mov	r0, r4
 8100a04:	f7ff ffce 	bl	81009a4 <_ZN23EdiabasDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClient>
 8100a08:	bf00      	nop
 8100a0a:	3708      	adds	r7, #8
 8100a0c:	46bd      	mov	sp, r7
 8100a0e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8100a12:	b002      	add	sp, #8
 8100a14:	4770      	bx	lr

08100a16 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8100a16:	b580      	push	{r7, lr}
 8100a18:	b082      	sub	sp, #8
 8100a1a:	af00      	add	r7, sp, #0
 8100a1c:	6078      	str	r0, [r7, #4]
 8100a1e:	687b      	ldr	r3, [r7, #4]
 8100a20:	4618      	mov	r0, r3
 8100a22:	f7ff ff85 	bl	8100930 <_ZNSt14_Function_baseD1Ev>
 8100a26:	687b      	ldr	r3, [r7, #4]
 8100a28:	4618      	mov	r0, r3
 8100a2a:	3708      	adds	r7, #8
 8100a2c:	46bd      	mov	sp, r7
 8100a2e:	bd80      	pop	{r7, pc}

08100a30 <_ZN23EdiabasDaemonNativeTask7processEv>:
{
 8100a30:	b590      	push	{r4, r7, lr}
 8100a32:	b091      	sub	sp, #68	@ 0x44
 8100a34:	af00      	add	r7, sp, #0
 8100a36:	6078      	str	r0, [r7, #4]
	size_t len = sizeof(msg);
 8100a38:	2318      	movs	r3, #24
 8100a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	size_t ret = ipc_recvmsg(1, &msg, len, 0);
 8100a3c:	f107 010c 	add.w	r1, r7, #12
 8100a40:	2300      	movs	r3, #0
 8100a42:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8100a44:	2001      	movs	r0, #1
 8100a46:	f7ff fd3f 	bl	81004c8 <ipc_recvmsg>
 8100a4a:	63b8      	str	r0, [r7, #56]	@ 0x38
	if(ret == len)
 8100a4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8100a4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8100a50:	429a      	cmp	r2, r3
 8100a52:	d106      	bne.n	8100a62 <_ZN23EdiabasDaemonNativeTask7processEv+0x32>
		ipc_sendmsg(1, &msg, len, 0);
 8100a54:	f107 010c 	add.w	r1, r7, #12
 8100a58:	2300      	movs	r3, #0
 8100a5a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8100a5c:	2001      	movs	r0, #1
 8100a5e:	f7ff fcf5 	bl	810044c <ipc_sendmsg>
	event_bus.receive([this](EEventType event, UMessageData msg, EEventClient eventSender){this->OnEvent(event, msg, eventSender);});
 8100a62:	687c      	ldr	r4, [r7, #4]
 8100a64:	687b      	ldr	r3, [r7, #4]
 8100a66:	637b      	str	r3, [r7, #52]	@ 0x34
 8100a68:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8100a6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8100a70:	4611      	mov	r1, r2
 8100a72:	4618      	mov	r0, r3
 8100a74:	f000 f822 	bl	8100abc <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientEEC1IZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_vEEOT_>
 8100a78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8100a7c:	4619      	mov	r1, r3
 8100a7e:	4620      	mov	r0, r4
 8100a80:	f000 fa3a 	bl	8100ef8 <_ZN15EventBusManager7receiveESt8functionIFv10EEventType12UMessageData12EEventClientEE>
 8100a84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8100a88:	4618      	mov	r0, r3
 8100a8a:	f7ff ffc4 	bl	8100a16 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientEED1Ev>
}
 8100a8e:	bf00      	nop
 8100a90:	3744      	adds	r7, #68	@ 0x44
 8100a92:	46bd      	mov	sp, r7
 8100a94:	bd90      	pop	{r4, r7, pc}

08100a96 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8100a96:	b480      	push	{r7}
 8100a98:	b083      	sub	sp, #12
 8100a9a:	af00      	add	r7, sp, #0
 8100a9c:	6078      	str	r0, [r7, #4]
 8100a9e:	687b      	ldr	r3, [r7, #4]
 8100aa0:	461a      	mov	r2, r3
 8100aa2:	2300      	movs	r3, #0
 8100aa4:	6013      	str	r3, [r2, #0]
 8100aa6:	6053      	str	r3, [r2, #4]
 8100aa8:	687b      	ldr	r3, [r7, #4]
 8100aaa:	2200      	movs	r2, #0
 8100aac:	609a      	str	r2, [r3, #8]
 8100aae:	687b      	ldr	r3, [r7, #4]
 8100ab0:	4618      	mov	r0, r3
 8100ab2:	370c      	adds	r7, #12
 8100ab4:	46bd      	mov	sp, r7
 8100ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100aba:	4770      	bx	lr

08100abc <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientEEC1IZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_vEEOT_>:
       */
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2774. std::function construction vs assignment
      template<typename _Functor,
	       typename _Constraints = _Requires<_Callable<_Functor>>>
	function(_Functor&& __f)
 8100abc:	b590      	push	{r4, r7, lr}
 8100abe:	b083      	sub	sp, #12
 8100ac0:	af00      	add	r7, sp, #0
 8100ac2:	6078      	str	r0, [r7, #4]
 8100ac4:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	: _Function_base()
 8100ac6:	687b      	ldr	r3, [r7, #4]
 8100ac8:	461a      	mov	r2, r3
 8100aca:	2300      	movs	r3, #0
 8100acc:	6013      	str	r3, [r2, #0]
 8100ace:	6053      	str	r3, [r2, #4]
 8100ad0:	6093      	str	r3, [r2, #8]
 8100ad2:	687b      	ldr	r3, [r7, #4]
 8100ad4:	4618      	mov	r0, r3
 8100ad6:	f7ff ffde 	bl	8100a96 <_ZNSt14_Function_baseC1Ev>
 8100ada:	687b      	ldr	r3, [r7, #4]
 8100adc:	2200      	movs	r2, #0
 8100ade:	60da      	str	r2, [r3, #12]
	      "std::function target must be constructible from the "
	      "constructor argument");

	  using _My_handler = _Handler<_Functor>;

	  if (_My_handler::_M_not_empty_function(__f))
 8100ae0:	6838      	ldr	r0, [r7, #0]
 8100ae2:	f000 f81b 	bl	8100b1c <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E21_M_not_empty_functionIS5_EEbRKT_>
 8100ae6:	4603      	mov	r3, r0
 8100ae8:	2b00      	cmp	r3, #0
 8100aea:	d00e      	beq.n	8100b0a <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientEEC1IZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_vEEOT_+0x4e>
	    {
	      _My_handler::_M_init_functor(_M_functor,
 8100aec:	687c      	ldr	r4, [r7, #4]
 8100aee:	6838      	ldr	r0, [r7, #0]
 8100af0:	f000 f81f 	bl	8100b32 <_ZSt7forwardIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8100af4:	4603      	mov	r3, r0
 8100af6:	4619      	mov	r1, r3
 8100af8:	4620      	mov	r0, r4
 8100afa:	f000 f825 	bl	8100b48 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E15_M_init_functorIS5_EEvRSt9_Any_dataOT_>
					   std::forward<_Functor>(__f));
	      _M_invoker = &_My_handler::_M_invoke;
 8100afe:	687b      	ldr	r3, [r7, #4]
 8100b00:	4a04      	ldr	r2, [pc, #16]	@ (8100b14 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientEEC1IZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_vEEOT_+0x58>)
 8100b02:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8100b04:	687b      	ldr	r3, [r7, #4]
 8100b06:	4a04      	ldr	r2, [pc, #16]	@ (8100b18 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientEEC1IZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_vEEOT_+0x5c>)
 8100b08:	609a      	str	r2, [r3, #8]
	    }
	}
 8100b0a:	687b      	ldr	r3, [r7, #4]
 8100b0c:	4618      	mov	r0, r3
 8100b0e:	370c      	adds	r7, #12
 8100b10:	46bd      	mov	sp, r7
 8100b12:	bd90      	pop	{r4, r7, pc}
 8100b14:	08100b6d 	.word	0x08100b6d
 8100b18:	08100bad 	.word	0x08100bad

08100b1c <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E21_M_not_empty_functionIS5_EEbRKT_>:
	  _M_not_empty_function(const _Tp&) noexcept
 8100b1c:	b480      	push	{r7}
 8100b1e:	b083      	sub	sp, #12
 8100b20:	af00      	add	r7, sp, #0
 8100b22:	6078      	str	r0, [r7, #4]
	  { return true; }
 8100b24:	2301      	movs	r3, #1
 8100b26:	4618      	mov	r0, r3
 8100b28:	370c      	adds	r7, #12
 8100b2a:	46bd      	mov	sp, r7
 8100b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b30:	4770      	bx	lr

08100b32 <_ZSt7forwardIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS5_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8100b32:	b480      	push	{r7}
 8100b34:	b083      	sub	sp, #12
 8100b36:	af00      	add	r7, sp, #0
 8100b38:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8100b3a:	687b      	ldr	r3, [r7, #4]
 8100b3c:	4618      	mov	r0, r3
 8100b3e:	370c      	adds	r7, #12
 8100b40:	46bd      	mov	sp, r7
 8100b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b46:	4770      	bx	lr

08100b48 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E15_M_init_functorIS5_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8100b48:	b590      	push	{r4, r7, lr}
 8100b4a:	b083      	sub	sp, #12
 8100b4c:	af00      	add	r7, sp, #0
 8100b4e:	6078      	str	r0, [r7, #4]
 8100b50:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8100b52:	6838      	ldr	r0, [r7, #0]
 8100b54:	f7ff ffed 	bl	8100b32 <_ZSt7forwardIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8100b58:	4603      	mov	r3, r0
 8100b5a:	4622      	mov	r2, r4
 8100b5c:	4619      	mov	r1, r3
 8100b5e:	6878      	ldr	r0, [r7, #4]
 8100b60:	f000 f843 	bl	8100bea <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E9_M_createIS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8100b64:	bf00      	nop
 8100b66:	370c      	adds	r7, #12
 8100b68:	46bd      	mov	sp, r7
 8100b6a:	bd90      	pop	{r4, r7, pc}

08100b6c <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientEZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_E9_M_invokeERKSt9_Any_dataOS0_OS1_OS2_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8100b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8100b6e:	b085      	sub	sp, #20
 8100b70:	af00      	add	r7, sp, #0
 8100b72:	60f8      	str	r0, [r7, #12]
 8100b74:	60b9      	str	r1, [r7, #8]
 8100b76:	607a      	str	r2, [r7, #4]
 8100b78:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8100b7a:	68f8      	ldr	r0, [r7, #12]
 8100b7c:	f000 f84e 	bl	8100c1c <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E14_M_get_pointerERKSt9_Any_data>
 8100b80:	4604      	mov	r4, r0
 8100b82:	68b8      	ldr	r0, [r7, #8]
 8100b84:	f000 f85b 	bl	8100c3e <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8100b88:	4605      	mov	r5, r0
 8100b8a:	6878      	ldr	r0, [r7, #4]
 8100b8c:	f000 f862 	bl	8100c54 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8100b90:	4606      	mov	r6, r0
 8100b92:	6838      	ldr	r0, [r7, #0]
 8100b94:	f000 f869 	bl	8100c6a <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8100b98:	4603      	mov	r3, r0
 8100b9a:	4632      	mov	r2, r6
 8100b9c:	4629      	mov	r1, r5
 8100b9e:	4620      	mov	r0, r4
 8100ba0:	f000 f86e 	bl	8100c80 <_ZSt10__invoke_rIvRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_JS1_S2_S3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>
				     std::forward<_ArgTypes>(__args)...);
 8100ba4:	bf00      	nop
      }
 8100ba6:	3714      	adds	r7, #20
 8100ba8:	46bd      	mov	sp, r7
 8100baa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08100bac <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientEZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8100bac:	b590      	push	{r4, r7, lr}
 8100bae:	b085      	sub	sp, #20
 8100bb0:	af00      	add	r7, sp, #0
 8100bb2:	60f8      	str	r0, [r7, #12]
 8100bb4:	60b9      	str	r1, [r7, #8]
 8100bb6:	4613      	mov	r3, r2
 8100bb8:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8100bba:	79fb      	ldrb	r3, [r7, #7]
 8100bbc:	2b01      	cmp	r3, #1
 8100bbe:	d109      	bne.n	8100bd4 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientEZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8100bc0:	68f8      	ldr	r0, [r7, #12]
 8100bc2:	f000 f881 	bl	8100cc8 <_ZNSt9_Any_data9_M_accessIPZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EERT_v>
 8100bc6:	4604      	mov	r4, r0
 8100bc8:	68b8      	ldr	r0, [r7, #8]
 8100bca:	f000 f827 	bl	8100c1c <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E14_M_get_pointerERKSt9_Any_data>
 8100bce:	4603      	mov	r3, r0
 8100bd0:	6023      	str	r3, [r4, #0]
	    break;
 8100bd2:	e005      	b.n	8100be0 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientEZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8100bd4:	79fb      	ldrb	r3, [r7, #7]
 8100bd6:	461a      	mov	r2, r3
 8100bd8:	68b9      	ldr	r1, [r7, #8]
 8100bda:	68f8      	ldr	r0, [r7, #12]
 8100bdc:	f000 f880 	bl	8100ce0 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>
	return false;
 8100be0:	2300      	movs	r3, #0
      }
 8100be2:	4618      	mov	r0, r3
 8100be4:	3714      	adds	r7, #20
 8100be6:	46bd      	mov	sp, r7
 8100be8:	bd90      	pop	{r4, r7, pc}

08100bea <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E9_M_createIS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8100bea:	b590      	push	{r4, r7, lr}
 8100bec:	b085      	sub	sp, #20
 8100bee:	af00      	add	r7, sp, #0
 8100bf0:	60f8      	str	r0, [r7, #12]
 8100bf2:	60b9      	str	r1, [r7, #8]
 8100bf4:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8100bf6:	68f8      	ldr	r0, [r7, #12]
 8100bf8:	f7ff fe84 	bl	8100904 <_ZNSt9_Any_data9_M_accessEv>
 8100bfc:	4603      	mov	r3, r0
 8100bfe:	4619      	mov	r1, r3
 8100c00:	2004      	movs	r0, #4
 8100c02:	f7ff fe73 	bl	81008ec <_ZnwjPv>
 8100c06:	4604      	mov	r4, r0
 8100c08:	68b8      	ldr	r0, [r7, #8]
 8100c0a:	f7ff ff92 	bl	8100b32 <_ZSt7forwardIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8100c0e:	4603      	mov	r3, r0
 8100c10:	681b      	ldr	r3, [r3, #0]
 8100c12:	6023      	str	r3, [r4, #0]
	  }
 8100c14:	bf00      	nop
 8100c16:	3714      	adds	r7, #20
 8100c18:	46bd      	mov	sp, r7
 8100c1a:	bd90      	pop	{r4, r7, pc}

08100c1c <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 8100c1c:	b580      	push	{r7, lr}
 8100c1e:	b084      	sub	sp, #16
 8100c20:	af00      	add	r7, sp, #0
 8100c22:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8100c24:	6878      	ldr	r0, [r7, #4]
 8100c26:	f000 f895 	bl	8100d54 <_ZNKSt9_Any_data9_M_accessIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EERKT_v>
 8100c2a:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8100c2c:	68f8      	ldr	r0, [r7, #12]
 8100c2e:	f000 f89d 	bl	8100d6c <_ZSt11__addressofIKZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EPT_RS6_>
 8100c32:	4603      	mov	r3, r0
 8100c34:	bf00      	nop
	}
 8100c36:	4618      	mov	r0, r3
 8100c38:	3710      	adds	r7, #16
 8100c3a:	46bd      	mov	sp, r7
 8100c3c:	bd80      	pop	{r7, pc}

08100c3e <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8100c3e:	b480      	push	{r7}
 8100c40:	b083      	sub	sp, #12
 8100c42:	af00      	add	r7, sp, #0
 8100c44:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8100c46:	687b      	ldr	r3, [r7, #4]
 8100c48:	4618      	mov	r0, r3
 8100c4a:	370c      	adds	r7, #12
 8100c4c:	46bd      	mov	sp, r7
 8100c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c52:	4770      	bx	lr

08100c54 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8100c54:	b480      	push	{r7}
 8100c56:	b083      	sub	sp, #12
 8100c58:	af00      	add	r7, sp, #0
 8100c5a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8100c5c:	687b      	ldr	r3, [r7, #4]
 8100c5e:	4618      	mov	r0, r3
 8100c60:	370c      	adds	r7, #12
 8100c62:	46bd      	mov	sp, r7
 8100c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c68:	4770      	bx	lr

08100c6a <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8100c6a:	b480      	push	{r7}
 8100c6c:	b083      	sub	sp, #12
 8100c6e:	af00      	add	r7, sp, #0
 8100c70:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8100c72:	687b      	ldr	r3, [r7, #4]
 8100c74:	4618      	mov	r0, r3
 8100c76:	370c      	adds	r7, #12
 8100c78:	46bd      	mov	sp, r7
 8100c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c7e:	4770      	bx	lr

08100c80 <_ZSt10__invoke_rIvRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_JS1_S2_S3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8100c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8100c84:	b086      	sub	sp, #24
 8100c86:	af02      	add	r7, sp, #8
 8100c88:	60f8      	str	r0, [r7, #12]
 8100c8a:	60b9      	str	r1, [r7, #8]
 8100c8c:	607a      	str	r2, [r7, #4]
 8100c8e:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8100c90:	68f8      	ldr	r0, [r7, #12]
 8100c92:	f000 f876 	bl	8100d82 <_ZSt7forwardIRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS6_E4typeE>
 8100c96:	4604      	mov	r4, r0
 8100c98:	68b8      	ldr	r0, [r7, #8]
 8100c9a:	f7ff ffd0 	bl	8100c3e <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8100c9e:	4605      	mov	r5, r0
 8100ca0:	6878      	ldr	r0, [r7, #4]
 8100ca2:	f7ff ffd7 	bl	8100c54 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8100ca6:	4606      	mov	r6, r0
 8100ca8:	6838      	ldr	r0, [r7, #0]
 8100caa:	f7ff ffde 	bl	8100c6a <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8100cae:	4603      	mov	r3, r0
 8100cb0:	9300      	str	r3, [sp, #0]
 8100cb2:	4633      	mov	r3, r6
 8100cb4:	462a      	mov	r2, r5
 8100cb6:	4621      	mov	r1, r4
 8100cb8:	4640      	mov	r0, r8
 8100cba:	f000 f86d 	bl	8100d98 <_ZSt13__invoke_implIvRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_JS1_S2_S3_EET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 8100cbe:	bf00      	nop
 8100cc0:	3710      	adds	r7, #16
 8100cc2:	46bd      	mov	sp, r7
 8100cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08100cc8 <_ZNSt9_Any_data9_M_accessIPZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EERT_v>:
      _M_access() noexcept
 8100cc8:	b580      	push	{r7, lr}
 8100cca:	b082      	sub	sp, #8
 8100ccc:	af00      	add	r7, sp, #0
 8100cce:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8100cd0:	6878      	ldr	r0, [r7, #4]
 8100cd2:	f7ff fe17 	bl	8100904 <_ZNSt9_Any_data9_M_accessEv>
 8100cd6:	4603      	mov	r3, r0
 8100cd8:	4618      	mov	r0, r3
 8100cda:	3708      	adds	r7, #8
 8100cdc:	46bd      	mov	sp, r7
 8100cde:	bd80      	pop	{r7, pc}

08100ce0 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8100ce0:	b590      	push	{r4, r7, lr}
 8100ce2:	b085      	sub	sp, #20
 8100ce4:	af00      	add	r7, sp, #0
 8100ce6:	60f8      	str	r0, [r7, #12]
 8100ce8:	60b9      	str	r1, [r7, #8]
 8100cea:	4613      	mov	r3, r2
 8100cec:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8100cee:	79fb      	ldrb	r3, [r7, #7]
 8100cf0:	2b03      	cmp	r3, #3
 8100cf2:	d82a      	bhi.n	8100d4a <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
 8100cf4:	a201      	add	r2, pc, #4	@ (adr r2, 8100cfc <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x1c>)
 8100cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100cfa:	bf00      	nop
 8100cfc:	08100d0d 	.word	0x08100d0d
 8100d00:	08100d1b 	.word	0x08100d1b
 8100d04:	08100d2f 	.word	0x08100d2f
 8100d08:	08100d41 	.word	0x08100d41
	      __dest._M_access<const type_info*>() = nullptr;
 8100d0c:	68f8      	ldr	r0, [r7, #12]
 8100d0e:	f000 f86e 	bl	8100dee <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8100d12:	4603      	mov	r3, r0
 8100d14:	2200      	movs	r2, #0
 8100d16:	601a      	str	r2, [r3, #0]
	      break;
 8100d18:	e017      	b.n	8100d4a <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8100d1a:	68f8      	ldr	r0, [r7, #12]
 8100d1c:	f7ff ffd4 	bl	8100cc8 <_ZNSt9_Any_data9_M_accessIPZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EERT_v>
 8100d20:	4604      	mov	r4, r0
 8100d22:	68b8      	ldr	r0, [r7, #8]
 8100d24:	f7ff ff7a 	bl	8100c1c <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E14_M_get_pointerERKSt9_Any_data>
 8100d28:	4603      	mov	r3, r0
 8100d2a:	6023      	str	r3, [r4, #0]
	      break;
 8100d2c:	e00d      	b.n	8100d4a <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8100d2e:	68b8      	ldr	r0, [r7, #8]
 8100d30:	f7ff ff74 	bl	8100c1c <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E14_M_get_pointerERKSt9_Any_data>
 8100d34:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8100d36:	4619      	mov	r1, r3
 8100d38:	68f8      	ldr	r0, [r7, #12]
 8100d3a:	f000 f864 	bl	8100e06 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E15_M_init_functorIRKS5_EEvRSt9_Any_dataOT_>
	      break;
 8100d3e:	e004      	b.n	8100d4a <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8100d40:	4621      	mov	r1, r4
 8100d42:	68f8      	ldr	r0, [r7, #12]
 8100d44:	f000 f871 	bl	8100e2a <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8100d48:	bf00      	nop
	  return false;
 8100d4a:	2300      	movs	r3, #0
	}
 8100d4c:	4618      	mov	r0, r3
 8100d4e:	3714      	adds	r7, #20
 8100d50:	46bd      	mov	sp, r7
 8100d52:	bd90      	pop	{r4, r7, pc}

08100d54 <_ZNKSt9_Any_data9_M_accessIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EERKT_v>:
      _M_access() const noexcept
 8100d54:	b580      	push	{r7, lr}
 8100d56:	b082      	sub	sp, #8
 8100d58:	af00      	add	r7, sp, #0
 8100d5a:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8100d5c:	6878      	ldr	r0, [r7, #4]
 8100d5e:	f7ff fddc 	bl	810091a <_ZNKSt9_Any_data9_M_accessEv>
 8100d62:	4603      	mov	r3, r0
 8100d64:	4618      	mov	r0, r3
 8100d66:	3708      	adds	r7, #8
 8100d68:	46bd      	mov	sp, r7
 8100d6a:	bd80      	pop	{r7, pc}

08100d6c <_ZSt11__addressofIKZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8100d6c:	b480      	push	{r7}
 8100d6e:	b083      	sub	sp, #12
 8100d70:	af00      	add	r7, sp, #0
 8100d72:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8100d74:	687b      	ldr	r3, [r7, #4]
 8100d76:	4618      	mov	r0, r3
 8100d78:	370c      	adds	r7, #12
 8100d7a:	46bd      	mov	sp, r7
 8100d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d80:	4770      	bx	lr

08100d82 <_ZSt7forwardIRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8100d82:	b480      	push	{r7}
 8100d84:	b083      	sub	sp, #12
 8100d86:	af00      	add	r7, sp, #0
 8100d88:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8100d8a:	687b      	ldr	r3, [r7, #4]
 8100d8c:	4618      	mov	r0, r3
 8100d8e:	370c      	adds	r7, #12
 8100d90:	46bd      	mov	sp, r7
 8100d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d96:	4770      	bx	lr

08100d98 <_ZSt13__invoke_implIvRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_JS1_S2_S3_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8100d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8100d9a:	b089      	sub	sp, #36	@ 0x24
 8100d9c:	af04      	add	r7, sp, #16
 8100d9e:	7338      	strb	r0, [r7, #12]
 8100da0:	60b9      	str	r1, [r7, #8]
 8100da2:	607a      	str	r2, [r7, #4]
 8100da4:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8100da6:	68b8      	ldr	r0, [r7, #8]
 8100da8:	f7ff ffeb 	bl	8100d82 <_ZSt7forwardIRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS6_E4typeE>
 8100dac:	4606      	mov	r6, r0
 8100dae:	6878      	ldr	r0, [r7, #4]
 8100db0:	f7ff ff45 	bl	8100c3e <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8100db4:	4603      	mov	r3, r0
 8100db6:	781d      	ldrb	r5, [r3, #0]
 8100db8:	6838      	ldr	r0, [r7, #0]
 8100dba:	f7ff ff4b 	bl	8100c54 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8100dbe:	4604      	mov	r4, r0
 8100dc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8100dc2:	f7ff ff52 	bl	8100c6a <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8100dc6:	4603      	mov	r3, r0
 8100dc8:	781b      	ldrb	r3, [r3, #0]
 8100dca:	9302      	str	r3, [sp, #8]
 8100dcc:	466a      	mov	r2, sp
 8100dce:	f104 0308 	add.w	r3, r4, #8
 8100dd2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8100dd6:	e882 0003 	stmia.w	r2, {r0, r1}
 8100dda:	e894 000c 	ldmia.w	r4, {r2, r3}
 8100dde:	4629      	mov	r1, r5
 8100de0:	4630      	mov	r0, r6
 8100de2:	f7ff fdf2 	bl	81009ca <_ZZN23EdiabasDaemonNativeTask7processEvENKUl10EEventType12UMessageData12EEventClientE_clES0_S1_S2_>
 8100de6:	bf00      	nop
 8100de8:	3714      	adds	r7, #20
 8100dea:	46bd      	mov	sp, r7
 8100dec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08100dee <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access() noexcept
 8100dee:	b580      	push	{r7, lr}
 8100df0:	b082      	sub	sp, #8
 8100df2:	af00      	add	r7, sp, #0
 8100df4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8100df6:	6878      	ldr	r0, [r7, #4]
 8100df8:	f7ff fd84 	bl	8100904 <_ZNSt9_Any_data9_M_accessEv>
 8100dfc:	4603      	mov	r3, r0
 8100dfe:	4618      	mov	r0, r3
 8100e00:	3708      	adds	r7, #8
 8100e02:	46bd      	mov	sp, r7
 8100e04:	bd80      	pop	{r7, pc}

08100e06 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E15_M_init_functorIRKS5_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8100e06:	b590      	push	{r4, r7, lr}
 8100e08:	b083      	sub	sp, #12
 8100e0a:	af00      	add	r7, sp, #0
 8100e0c:	6078      	str	r0, [r7, #4]
 8100e0e:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8100e10:	6838      	ldr	r0, [r7, #0]
 8100e12:	f000 f816 	bl	8100e42 <_ZSt7forwardIRKZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS7_E4typeE>
 8100e16:	4603      	mov	r3, r0
 8100e18:	4622      	mov	r2, r4
 8100e1a:	4619      	mov	r1, r3
 8100e1c:	6878      	ldr	r0, [r7, #4]
 8100e1e:	f000 f81b 	bl	8100e58 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E9_M_createIRKS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8100e22:	bf00      	nop
 8100e24:	370c      	adds	r7, #12
 8100e26:	46bd      	mov	sp, r7
 8100e28:	bd90      	pop	{r4, r7, pc}

08100e2a <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8100e2a:	b580      	push	{r7, lr}
 8100e2c:	b082      	sub	sp, #8
 8100e2e:	af00      	add	r7, sp, #0
 8100e30:	6078      	str	r0, [r7, #4]
 8100e32:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8100e34:	6878      	ldr	r0, [r7, #4]
 8100e36:	f000 f828 	bl	8100e8a <_ZNSt9_Any_data9_M_accessIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EERT_v>
	}
 8100e3a:	bf00      	nop
 8100e3c:	3708      	adds	r7, #8
 8100e3e:	46bd      	mov	sp, r7
 8100e40:	bd80      	pop	{r7, pc}

08100e42 <_ZSt7forwardIRKZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8100e42:	b480      	push	{r7}
 8100e44:	b083      	sub	sp, #12
 8100e46:	af00      	add	r7, sp, #0
 8100e48:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8100e4a:	687b      	ldr	r3, [r7, #4]
 8100e4c:	4618      	mov	r0, r3
 8100e4e:	370c      	adds	r7, #12
 8100e50:	46bd      	mov	sp, r7
 8100e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e56:	4770      	bx	lr

08100e58 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E9_M_createIRKS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8100e58:	b590      	push	{r4, r7, lr}
 8100e5a:	b085      	sub	sp, #20
 8100e5c:	af00      	add	r7, sp, #0
 8100e5e:	60f8      	str	r0, [r7, #12]
 8100e60:	60b9      	str	r1, [r7, #8]
 8100e62:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8100e64:	68f8      	ldr	r0, [r7, #12]
 8100e66:	f7ff fd4d 	bl	8100904 <_ZNSt9_Any_data9_M_accessEv>
 8100e6a:	4603      	mov	r3, r0
 8100e6c:	4619      	mov	r1, r3
 8100e6e:	2004      	movs	r0, #4
 8100e70:	f7ff fd3c 	bl	81008ec <_ZnwjPv>
 8100e74:	4604      	mov	r4, r0
 8100e76:	68b8      	ldr	r0, [r7, #8]
 8100e78:	f7ff ffe3 	bl	8100e42 <_ZSt7forwardIRKZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS7_E4typeE>
 8100e7c:	4603      	mov	r3, r0
 8100e7e:	681b      	ldr	r3, [r3, #0]
 8100e80:	6023      	str	r3, [r4, #0]
	  }
 8100e82:	bf00      	nop
 8100e84:	3714      	adds	r7, #20
 8100e86:	46bd      	mov	sp, r7
 8100e88:	bd90      	pop	{r4, r7, pc}

08100e8a <_ZNSt9_Any_data9_M_accessIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EERT_v>:
      _M_access() noexcept
 8100e8a:	b580      	push	{r7, lr}
 8100e8c:	b082      	sub	sp, #8
 8100e8e:	af00      	add	r7, sp, #0
 8100e90:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8100e92:	6878      	ldr	r0, [r7, #4]
 8100e94:	f7ff fd36 	bl	8100904 <_ZNSt9_Any_data9_M_accessEv>
 8100e98:	4603      	mov	r3, r0
 8100e9a:	4618      	mov	r0, r3
 8100e9c:	3708      	adds	r7, #8
 8100e9e:	46bd      	mov	sp, r7
 8100ea0:	bd80      	pop	{r7, pc}

08100ea2 <_ZNKSt14_Function_base8_M_emptyEv>:
    bool _M_empty() const { return !_M_manager; }
 8100ea2:	b480      	push	{r7}
 8100ea4:	b083      	sub	sp, #12
 8100ea6:	af00      	add	r7, sp, #0
 8100ea8:	6078      	str	r0, [r7, #4]
 8100eaa:	687b      	ldr	r3, [r7, #4]
 8100eac:	689b      	ldr	r3, [r3, #8]
 8100eae:	2b00      	cmp	r3, #0
 8100eb0:	bf0c      	ite	eq
 8100eb2:	2301      	moveq	r3, #1
 8100eb4:	2300      	movne	r3, #0
 8100eb6:	b2db      	uxtb	r3, r3
 8100eb8:	4618      	mov	r0, r3
 8100eba:	370c      	adds	r7, #12
 8100ebc:	46bd      	mov	sp, r7
 8100ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ec2:	4770      	bx	lr

08100ec4 <_ZN15EventBusManagerC1EP15QueueDefinition12EEventClient>:
#include "EventBusManager.h"

extern QueueHandle_t queueToEventManagerCM4;

EventBusManager::EventBusManager(QueueHandle_t queueSelf, EEventClient senderSelf)
 8100ec4:	b480      	push	{r7}
 8100ec6:	b085      	sub	sp, #20
 8100ec8:	af00      	add	r7, sp, #0
 8100eca:	60f8      	str	r0, [r7, #12]
 8100ecc:	60b9      	str	r1, [r7, #8]
 8100ece:	4613      	mov	r3, r2
 8100ed0:	71fb      	strb	r3, [r7, #7]
					 : queue_self(queueSelf),
 8100ed2:	68fb      	ldr	r3, [r7, #12]
 8100ed4:	68ba      	ldr	r2, [r7, #8]
 8100ed6:	601a      	str	r2, [r3, #0]
					   sender_self(senderSelf),
 8100ed8:	68fb      	ldr	r3, [r7, #12]
 8100eda:	79fa      	ldrb	r2, [r7, #7]
 8100edc:	711a      	strb	r2, [r3, #4]
					   queue_event_manager(queueToEventManagerCM4){}
 8100ede:	4b05      	ldr	r3, [pc, #20]	@ (8100ef4 <_ZN15EventBusManagerC1EP15QueueDefinition12EEventClient+0x30>)
 8100ee0:	681a      	ldr	r2, [r3, #0]
 8100ee2:	68fb      	ldr	r3, [r7, #12]
 8100ee4:	609a      	str	r2, [r3, #8]
 8100ee6:	68fb      	ldr	r3, [r7, #12]
 8100ee8:	4618      	mov	r0, r3
 8100eea:	3714      	adds	r7, #20
 8100eec:	46bd      	mov	sp, r7
 8100eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ef2:	4770      	bx	lr
 8100ef4:	10000088 	.word	0x10000088

08100ef8 <_ZN15EventBusManager7receiveESt8functionIFv10EEventType12UMessageData12EEventClientEE>:
	}
	return false;
}

void EventBusManager::receive(OnEventFunction on_event_function)
{
 8100ef8:	b590      	push	{r4, r7, lr}
 8100efa:	b08f      	sub	sp, #60	@ 0x3c
 8100efc:	af04      	add	r7, sp, #16
 8100efe:	6078      	str	r0, [r7, #4]
 8100f00:	6039      	str	r1, [r7, #0]
	if(queue_self)
 8100f02:	687b      	ldr	r3, [r7, #4]
 8100f04:	681b      	ldr	r3, [r3, #0]
 8100f06:	2b00      	cmp	r3, #0
 8100f08:	d024      	beq.n	8100f54 <_ZN15EventBusManager7receiveESt8functionIFv10EEventType12UMessageData12EEventClientEE+0x5c>
	{
		SMessage msg;
		BaseType_t ret = pdTRUE;
 8100f0a:	2301      	movs	r3, #1
 8100f0c:	627b      	str	r3, [r7, #36]	@ 0x24

		while(xQueueReceive(queue_self, &(msg), static_cast<TickType_t>(0)) == pdTRUE)
 8100f0e:	e011      	b.n	8100f34 <_ZN15EventBusManager7receiveESt8functionIFv10EEventType12UMessageData12EEventClientEE+0x3c>
		{
//			LOG_DEBUG("Bus Manager msg received, result[%d}, event[%d]", ret, msg.event_type);
			on_event_function(msg.event_type, msg.message_data, msg.event_sender);
 8100f10:	7b3c      	ldrb	r4, [r7, #12]
 8100f12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8100f16:	9302      	str	r3, [sp, #8]
 8100f18:	466a      	mov	r2, sp
 8100f1a:	f107 0318 	add.w	r3, r7, #24
 8100f1e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8100f22:	e882 0003 	stmia.w	r2, {r0, r1}
 8100f26:	f107 0310 	add.w	r3, r7, #16
 8100f2a:	cb0c      	ldmia	r3, {r2, r3}
 8100f2c:	4621      	mov	r1, r4
 8100f2e:	6838      	ldr	r0, [r7, #0]
 8100f30:	f000 f814 	bl	8100f5c <_ZNKSt8functionIFv10EEventType12UMessageData12EEventClientEEclES0_S1_S2_>
		while(xQueueReceive(queue_self, &(msg), static_cast<TickType_t>(0)) == pdTRUE)
 8100f34:	687b      	ldr	r3, [r7, #4]
 8100f36:	681b      	ldr	r3, [r3, #0]
 8100f38:	f107 010c 	add.w	r1, r7, #12
 8100f3c:	2200      	movs	r2, #0
 8100f3e:	4618      	mov	r0, r3
 8100f40:	f004 fa0a 	bl	8105358 <xQueueReceive>
 8100f44:	4603      	mov	r3, r0
 8100f46:	2b01      	cmp	r3, #1
 8100f48:	bf0c      	ite	eq
 8100f4a:	2301      	moveq	r3, #1
 8100f4c:	2300      	movne	r3, #0
 8100f4e:	b2db      	uxtb	r3, r3
 8100f50:	2b00      	cmp	r3, #0
 8100f52:	d1dd      	bne.n	8100f10 <_ZN15EventBusManager7receiveESt8functionIFv10EEventType12UMessageData12EEventClientEE+0x18>
		}
	}
}
 8100f54:	bf00      	nop
 8100f56:	372c      	adds	r7, #44	@ 0x2c
 8100f58:	46bd      	mov	sp, r7
 8100f5a:	bd90      	pop	{r4, r7, pc}

08100f5c <_ZNKSt8functionIFv10EEventType12UMessageData12EEventClientEEclES0_S1_S2_>:
       *
       *  The function call operator invokes the target function object
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8100f5c:	b082      	sub	sp, #8
 8100f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8100f62:	b082      	sub	sp, #8
 8100f64:	af00      	add	r7, sp, #0
 8100f66:	6078      	str	r0, [r7, #4]
 8100f68:	f107 0020 	add.w	r0, r7, #32
 8100f6c:	e880 000c 	stmia.w	r0, {r2, r3}
 8100f70:	460b      	mov	r3, r1
 8100f72:	70fb      	strb	r3, [r7, #3]
      {
	if (_M_empty())
 8100f74:	687b      	ldr	r3, [r7, #4]
 8100f76:	4618      	mov	r0, r3
 8100f78:	f7ff ff93 	bl	8100ea2 <_ZNKSt14_Function_base8_M_emptyEv>
 8100f7c:	4603      	mov	r3, r0
 8100f7e:	2b00      	cmp	r3, #0
 8100f80:	d001      	beq.n	8100f86 <_ZNKSt8functionIFv10EEventType12UMessageData12EEventClientEEclES0_S1_S2_+0x2a>
	  __throw_bad_function_call();
 8100f82:	f006 fd0c 	bl	810799e <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8100f86:	687b      	ldr	r3, [r7, #4]
 8100f88:	68dc      	ldr	r4, [r3, #12]
 8100f8a:	687d      	ldr	r5, [r7, #4]
 8100f8c:	1cfb      	adds	r3, r7, #3
 8100f8e:	4618      	mov	r0, r3
 8100f90:	f7ff fe55 	bl	8100c3e <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8100f94:	4606      	mov	r6, r0
 8100f96:	f107 0020 	add.w	r0, r7, #32
 8100f9a:	f7ff fe5b 	bl	8100c54 <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8100f9e:	4680      	mov	r8, r0
 8100fa0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8100fa4:	4618      	mov	r0, r3
 8100fa6:	f7ff fe60 	bl	8100c6a <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8100faa:	4603      	mov	r3, r0
 8100fac:	4642      	mov	r2, r8
 8100fae:	4631      	mov	r1, r6
 8100fb0:	4628      	mov	r0, r5
 8100fb2:	47a0      	blx	r4
 8100fb4:	bf00      	nop
      }
 8100fb6:	3708      	adds	r7, #8
 8100fb8:	46bd      	mov	sp, r7
 8100fba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8100fbe:	b002      	add	sp, #8
 8100fc0:	4770      	bx	lr

08100fc2 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8100fc2:	b580      	push	{r7, lr}
 8100fc4:	b082      	sub	sp, #8
 8100fc6:	af00      	add	r7, sp, #0
 8100fc8:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8100fca:	687b      	ldr	r3, [r7, #4]
 8100fcc:	2200      	movs	r2, #0
 8100fce:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8100fd0:	6878      	ldr	r0, [r7, #4]
 8100fd2:	f000 f805 	bl	8100fe0 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 8100fd6:	687b      	ldr	r3, [r7, #4]
 8100fd8:	4618      	mov	r0, r3
 8100fda:	3708      	adds	r7, #8
 8100fdc:	46bd      	mov	sp, r7
 8100fde:	bd80      	pop	{r7, pc}

08100fe0 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 8100fe0:	b480      	push	{r7}
 8100fe2:	b083      	sub	sp, #12
 8100fe4:	af00      	add	r7, sp, #0
 8100fe6:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 8100fe8:	687b      	ldr	r3, [r7, #4]
 8100fea:	2200      	movs	r2, #0
 8100fec:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 8100fee:	687a      	ldr	r2, [r7, #4]
 8100ff0:	687b      	ldr	r3, [r7, #4]
 8100ff2:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 8100ff4:	687a      	ldr	r2, [r7, #4]
 8100ff6:	687b      	ldr	r3, [r7, #4]
 8100ff8:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8100ffa:	687b      	ldr	r3, [r7, #4]
 8100ffc:	2200      	movs	r2, #0
 8100ffe:	611a      	str	r2, [r3, #16]
    }
 8101000:	bf00      	nop
 8101002:	370c      	adds	r7, #12
 8101004:	46bd      	mov	sp, r7
 8101006:	f85d 7b04 	ldr.w	r7, [sp], #4
 810100a:	4770      	bx	lr

0810100c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 810100c:	b580      	push	{r7, lr}
 810100e:	b082      	sub	sp, #8
 8101010:	af00      	add	r7, sp, #0
 8101012:	6078      	str	r0, [r7, #4]
 8101014:	687b      	ldr	r3, [r7, #4]
 8101016:	4618      	mov	r0, r3
 8101018:	f000 f957 	bl	81012ca <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 810101c:	687b      	ldr	r3, [r7, #4]
 810101e:	4618      	mov	r0, r3
 8101020:	3708      	adds	r7, #8
 8101022:	46bd      	mov	sp, r7
 8101024:	bd80      	pop	{r7, pc}

08101026 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 8101026:	b580      	push	{r7, lr}
 8101028:	b082      	sub	sp, #8
 810102a:	af00      	add	r7, sp, #0
 810102c:	6078      	str	r0, [r7, #4]
 810102e:	687b      	ldr	r3, [r7, #4]
 8101030:	4618      	mov	r0, r3
 8101032:	f7ff ffeb 	bl	810100c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 8101036:	687b      	ldr	r3, [r7, #4]
 8101038:	4618      	mov	r0, r3
 810103a:	3708      	adds	r7, #8
 810103c:	46bd      	mov	sp, r7
 810103e:	bd80      	pop	{r7, pc}

08101040 <_ZN19EventManagerCM4TaskC1Ev>:
	{
		/* event queues of clients */
		EVENT_QUEUE_DAEMON = EVENT_CLIENT_DAEMON,
	};

	EventManagerCM4Task() {};
 8101040:	b580      	push	{r7, lr}
 8101042:	b082      	sub	sp, #8
 8101044:	af00      	add	r7, sp, #0
 8101046:	6078      	str	r0, [r7, #4]
 8101048:	687b      	ldr	r3, [r7, #4]
 810104a:	4618      	mov	r0, r3
 810104c:	f7ff ffeb 	bl	8101026 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 8101050:	687b      	ldr	r3, [r7, #4]
 8101052:	4618      	mov	r0, r3
 8101054:	3708      	adds	r7, #8
 8101056:	46bd      	mov	sp, r7
 8101058:	bd80      	pop	{r7, pc}
	...

0810105c <StartTask_EventMgrM4>:

extern QueueHandle_t queueToEventManagerCM4;
extern QueueHandle_t queueToNativeDaemon;

void StartTask_EventMgrM4(void *argument)
{
 810105c:	b580      	push	{r7, lr}
 810105e:	b088      	sub	sp, #32
 8101060:	af00      	add	r7, sp, #0
 8101062:	6078      	str	r0, [r7, #4]
	EventManagerCM4Task eventManagerInstance;
 8101064:	f107 0308 	add.w	r3, r7, #8
 8101068:	4618      	mov	r0, r3
 810106a:	f7ff ffe9 	bl	8101040 <_ZN19EventManagerCM4TaskC1Ev>
	eventManagerInstance.addQueue(EventManagerCM4Task::EVENT_QUEUE_DAEMON, queueToNativeDaemon);
 810106e:	4b09      	ldr	r3, [pc, #36]	@ (8101094 <StartTask_EventMgrM4+0x38>)
 8101070:	681a      	ldr	r2, [r3, #0]
 8101072:	f107 0308 	add.w	r3, r7, #8
 8101076:	2102      	movs	r1, #2
 8101078:	4618      	mov	r0, r3
 810107a:	f000 f80d 	bl	8101098 <_ZN19EventManagerCM4Task8addQueueENS_11EEventQueueEP15QueueDefinition>

	for(;;)
	{
		eventManagerInstance.process();
 810107e:	f107 0308 	add.w	r3, r7, #8
 8101082:	4618      	mov	r0, r3
 8101084:	f000 f81b 	bl	81010be <_ZN19EventManagerCM4Task7processEv>
		osDelay(1);
 8101088:	2001      	movs	r0, #1
 810108a:	f003 f939 	bl	8104300 <osDelay>
		eventManagerInstance.process();
 810108e:	bf00      	nop
 8101090:	e7f5      	b.n	810107e <StartTask_EventMgrM4+0x22>
 8101092:	bf00      	nop
 8101094:	1000008c 	.word	0x1000008c

08101098 <_ZN19EventManagerCM4Task8addQueueENS_11EEventQueueEP15QueueDefinition>:
	}
}


void EventManagerCM4Task::addQueue(EEventQueue eventClient, QueueHandle_t queueHandle)
{
 8101098:	b580      	push	{r7, lr}
 810109a:	b086      	sub	sp, #24
 810109c:	af00      	add	r7, sp, #0
 810109e:	60f8      	str	r0, [r7, #12]
 81010a0:	460b      	mov	r3, r1
 81010a2:	607a      	str	r2, [r7, #4]
 81010a4:	72fb      	strb	r3, [r7, #11]
	queue_handles.emplace(eventClient, queueHandle);
 81010a6:	68f9      	ldr	r1, [r7, #12]
 81010a8:	f107 0010 	add.w	r0, r7, #16
 81010ac:	1d3b      	adds	r3, r7, #4
 81010ae:	f107 020b 	add.w	r2, r7, #11
 81010b2:	f000 f91f 	bl	81012f4 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_>
}
 81010b6:	bf00      	nop
 81010b8:	3718      	adds	r7, #24
 81010ba:	46bd      	mov	sp, r7
 81010bc:	bd80      	pop	{r7, pc}

081010be <_ZN19EventManagerCM4Task7processEv>:
	queue_handles.erase(eventClient);
}


void EventManagerCM4Task::process()
{
 81010be:	b580      	push	{r7, lr}
 81010c0:	b086      	sub	sp, #24
 81010c2:	af00      	add	r7, sp, #0
 81010c4:	6078      	str	r0, [r7, #4]
	send(receive());
 81010c6:	f107 030c 	add.w	r3, r7, #12
 81010ca:	6879      	ldr	r1, [r7, #4]
 81010cc:	4618      	mov	r0, r3
 81010ce:	f000 f835 	bl	810113c <_ZN19EventManagerCM4Task7receiveEv>
 81010d2:	f107 030c 	add.w	r3, r7, #12
 81010d6:	4619      	mov	r1, r3
 81010d8:	6878      	ldr	r0, [r7, #4]
 81010da:	f000 f88d 	bl	81011f8 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE>
 81010de:	f107 030c 	add.w	r3, r7, #12
 81010e2:	4618      	mov	r0, r3
 81010e4:	f000 f920 	bl	8101328 <_ZNSt6vectorI8SMessageSaIS0_EED1Ev>
}
 81010e8:	bf00      	nop
 81010ea:	3718      	adds	r7, #24
 81010ec:	46bd      	mov	sp, r7
 81010ee:	bd80      	pop	{r7, pc}

081010f0 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 81010f0:	b580      	push	{r7, lr}
 81010f2:	b082      	sub	sp, #8
 81010f4:	af00      	add	r7, sp, #0
 81010f6:	6078      	str	r0, [r7, #4]
 81010f8:	6878      	ldr	r0, [r7, #4]
 81010fa:	f000 f940 	bl	810137e <_ZNSaI8SMessageED1Ev>
 81010fe:	687b      	ldr	r3, [r7, #4]
 8101100:	4618      	mov	r0, r3
 8101102:	3708      	adds	r7, #8
 8101104:	46bd      	mov	sp, r7
 8101106:	bd80      	pop	{r7, pc}

08101108 <_ZNSt12_Vector_baseI8SMessageSaIS0_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8101108:	b580      	push	{r7, lr}
 810110a:	b082      	sub	sp, #8
 810110c:	af00      	add	r7, sp, #0
 810110e:	6078      	str	r0, [r7, #4]
 8101110:	687b      	ldr	r3, [r7, #4]
 8101112:	4618      	mov	r0, r3
 8101114:	f000 f923 	bl	810135e <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implC1Ev>
 8101118:	687b      	ldr	r3, [r7, #4]
 810111a:	4618      	mov	r0, r3
 810111c:	3708      	adds	r7, #8
 810111e:	46bd      	mov	sp, r7
 8101120:	bd80      	pop	{r7, pc}

08101122 <_ZNSt6vectorI8SMessageSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8101122:	b580      	push	{r7, lr}
 8101124:	b082      	sub	sp, #8
 8101126:	af00      	add	r7, sp, #0
 8101128:	6078      	str	r0, [r7, #4]
 810112a:	687b      	ldr	r3, [r7, #4]
 810112c:	4618      	mov	r0, r3
 810112e:	f7ff ffeb 	bl	8101108 <_ZNSt12_Vector_baseI8SMessageSaIS0_EEC1Ev>
 8101132:	687b      	ldr	r3, [r7, #4]
 8101134:	4618      	mov	r0, r3
 8101136:	3708      	adds	r7, #8
 8101138:	46bd      	mov	sp, r7
 810113a:	bd80      	pop	{r7, pc}

0810113c <_ZN19EventManagerCM4Task7receiveEv>:

std::vector<SMessage> EventManagerCM4Task::receive()
{
 810113c:	b5b0      	push	{r4, r5, r7, lr}
 810113e:	b092      	sub	sp, #72	@ 0x48
 8101140:	af00      	add	r7, sp, #0
 8101142:	6078      	str	r0, [r7, #4]
 8101144:	6039      	str	r1, [r7, #0]
	std::vector<SMessage> receivedMessages;
 8101146:	6878      	ldr	r0, [r7, #4]
 8101148:	f7ff ffeb 	bl	8101122 <_ZNSt6vectorI8SMessageSaIS0_EEC1Ev>
	SMessage msg;

	BaseType_t ret = pdTRUE;
 810114c:	2301      	movs	r3, #1
 810114e:	647b      	str	r3, [r7, #68]	@ 0x44
	do
	{
		ret = xQueueReceive(queueToEventManagerCM4, &(msg), static_cast<TickType_t>(0));
 8101150:	4b28      	ldr	r3, [pc, #160]	@ (81011f4 <_ZN19EventManagerCM4Task7receiveEv+0xb8>)
 8101152:	681b      	ldr	r3, [r3, #0]
 8101154:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8101158:	2200      	movs	r2, #0
 810115a:	4618      	mov	r0, r3
 810115c:	f004 f8fc 	bl	8105358 <xQueueReceive>
 8101160:	6478      	str	r0, [r7, #68]	@ 0x44
		if(ret == pdTRUE)
 8101162:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8101164:	2b01      	cmp	r3, #1
 8101166:	d105      	bne.n	8101174 <_ZN19EventManagerCM4Task7receiveEv+0x38>
		{
			receivedMessages.push_back(msg);
 8101168:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810116c:	4619      	mov	r1, r3
 810116e:	6878      	ldr	r0, [r7, #4]
 8101170:	f000 f930 	bl	81013d4 <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_>
		}
	}while(ret == pdTRUE);
 8101174:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8101176:	2b01      	cmp	r3, #1
 8101178:	d0ea      	beq.n	8101150 <_ZN19EventManagerCM4Task7receiveEv+0x14>

	if(receivedMessages.size() > 0)
 810117a:	6878      	ldr	r0, [r7, #4]
 810117c:	f000 f950 	bl	8101420 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 8101180:	4603      	mov	r3, r0
 8101182:	2b00      	cmp	r3, #0
 8101184:	bf14      	ite	ne
 8101186:	2301      	movne	r3, #1
 8101188:	2300      	moveq	r3, #0
 810118a:	b2db      	uxtb	r3, r3
 810118c:	2b00      	cmp	r3, #0
 810118e:	d02b      	beq.n	81011e8 <_ZN19EventManagerCM4Task7receiveEv+0xac>
	{
		for(auto msg : receivedMessages)
 8101190:	687b      	ldr	r3, [r7, #4]
 8101192:	643b      	str	r3, [r7, #64]	@ 0x40
 8101194:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8101196:	f000 f959 	bl	810144c <_ZNSt6vectorI8SMessageSaIS0_EE5beginEv>
 810119a:	4603      	mov	r3, r0
 810119c:	60fb      	str	r3, [r7, #12]
 810119e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 81011a0:	f000 f964 	bl	810146c <_ZNSt6vectorI8SMessageSaIS0_EE3endEv>
 81011a4:	4603      	mov	r3, r0
 81011a6:	60bb      	str	r3, [r7, #8]
 81011a8:	e013      	b.n	81011d2 <_ZN19EventManagerCM4Task7receiveEv+0x96>
 81011aa:	f107 030c 	add.w	r3, r7, #12
 81011ae:	4618      	mov	r0, r3
 81011b0:	f000 f996 	bl	81014e0 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEdeEv>
 81011b4:	4603      	mov	r3, r0
 81011b6:	f107 0410 	add.w	r4, r7, #16
 81011ba:	461d      	mov	r5, r3
 81011bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81011be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81011c0:	e895 0003 	ldmia.w	r5, {r0, r1}
 81011c4:	e884 0003 	stmia.w	r4, {r0, r1}
 81011c8:	f107 030c 	add.w	r3, r7, #12
 81011cc:	4618      	mov	r0, r3
 81011ce:	f000 f976 	bl	81014be <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEppEv>
 81011d2:	f107 0208 	add.w	r2, r7, #8
 81011d6:	f107 030c 	add.w	r3, r7, #12
 81011da:	4611      	mov	r1, r2
 81011dc:	4618      	mov	r0, r3
 81011de:	f000 f956 	bl	810148e <_ZN9__gnu_cxxneIP8SMessageSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 81011e2:	4603      	mov	r3, r0
 81011e4:	2b00      	cmp	r3, #0
 81011e6:	d1e0      	bne.n	81011aa <_ZN19EventManagerCM4Task7receiveEv+0x6e>
		{
//			LOG_DEBUG("EVENT_MANAGER: Received message. r[%d], s[%d], e[%d]", msg.event_receiver, msg.event_sender, msg.event_type);
		}
	}

	return receivedMessages;
 81011e8:	bf00      	nop
}
 81011ea:	6878      	ldr	r0, [r7, #4]
 81011ec:	3748      	adds	r7, #72	@ 0x48
 81011ee:	46bd      	mov	sp, r7
 81011f0:	bdb0      	pop	{r4, r5, r7, pc}
 81011f2:	bf00      	nop
 81011f4:	10000088 	.word	0x10000088

081011f8 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE>:

void EventManagerCM4Task::send(const std::vector<SMessage>& messages)
{
 81011f8:	b5b0      	push	{r4, r5, r7, lr}
 81011fa:	b090      	sub	sp, #64	@ 0x40
 81011fc:	af00      	add	r7, sp, #0
 81011fe:	6078      	str	r0, [r7, #4]
 8101200:	6039      	str	r1, [r7, #0]
	for(auto msg : messages)
 8101202:	683b      	ldr	r3, [r7, #0]
 8101204:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8101206:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8101208:	f000 f976 	bl	81014f8 <_ZNKSt6vectorI8SMessageSaIS0_EE5beginEv>
 810120c:	4603      	mov	r3, r0
 810120e:	61bb      	str	r3, [r7, #24]
 8101210:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8101212:	f000 f981 	bl	8101518 <_ZNKSt6vectorI8SMessageSaIS0_EE3endEv>
 8101216:	4603      	mov	r3, r0
 8101218:	617b      	str	r3, [r7, #20]
 810121a:	e046      	b.n	81012aa <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0xb2>
 810121c:	f107 0318 	add.w	r3, r7, #24
 8101220:	4618      	mov	r0, r3
 8101222:	f000 f9b3 	bl	810158c <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEdeEv>
 8101226:	4603      	mov	r3, r0
 8101228:	f107 041c 	add.w	r4, r7, #28
 810122c:	461d      	mov	r5, r3
 810122e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101230:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101232:	e895 0003 	ldmia.w	r5, {r0, r1}
 8101236:	e884 0003 	stmia.w	r4, {r0, r1}
	{
		auto eventReceiver = static_cast<EEventQueue>(msg.event_receiver);
 810123a:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 810123e:	74fb      	strb	r3, [r7, #19]
		auto it = queue_handles.find(eventReceiver);
 8101240:	687b      	ldr	r3, [r7, #4]
 8101242:	f107 0213 	add.w	r2, r7, #19
 8101246:	4611      	mov	r1, r2
 8101248:	4618      	mov	r0, r3
 810124a:	f000 f9ab 	bl	81015a4 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>
 810124e:	4603      	mov	r3, r0
 8101250:	60fb      	str	r3, [r7, #12]

		if(it != queue_handles.end())
 8101252:	687b      	ldr	r3, [r7, #4]
 8101254:	4618      	mov	r0, r3
 8101256:	f000 f9b4 	bl	81015c2 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 810125a:	4603      	mov	r3, r0
 810125c:	637b      	str	r3, [r7, #52]	@ 0x34
 810125e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8101262:	f107 030c 	add.w	r3, r7, #12
 8101266:	4611      	mov	r1, r2
 8101268:	4618      	mov	r0, r3
 810126a:	f000 f9b7 	bl	81015dc <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 810126e:	4603      	mov	r3, r0
 8101270:	2b00      	cmp	r3, #0
 8101272:	d015      	beq.n	81012a0 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0xa8>
		{
			QueueHandle_t targetQueue = queue_handles[eventReceiver];
 8101274:	687b      	ldr	r3, [r7, #4]
 8101276:	f107 0213 	add.w	r2, r7, #19
 810127a:	4611      	mov	r1, r2
 810127c:	4618      	mov	r0, r3
 810127e:	f000 f9c1 	bl	8101604 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 8101282:	4603      	mov	r3, r0
 8101284:	681b      	ldr	r3, [r3, #0]
 8101286:	63bb      	str	r3, [r7, #56]	@ 0x38
			if(targetQueue)
 8101288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810128a:	2b00      	cmp	r3, #0
 810128c:	d008      	beq.n	81012a0 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0xa8>
			{
				if(xQueueSend(targetQueue, static_cast<void*>(&msg), static_cast<TickType_t>(10)) != pdTRUE)
 810128e:	f107 011c 	add.w	r1, r7, #28
 8101292:	2300      	movs	r3, #0
 8101294:	220a      	movs	r2, #10
 8101296:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8101298:	f003 febe 	bl	8105018 <xQueueGenericSend>
 810129c:	4603      	mov	r3, r0
 810129e:	2b01      	cmp	r3, #1
	for(auto msg : messages)
 81012a0:	f107 0318 	add.w	r3, r7, #24
 81012a4:	4618      	mov	r0, r3
 81012a6:	f000 f960 	bl	810156a <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEppEv>
 81012aa:	f107 0214 	add.w	r2, r7, #20
 81012ae:	f107 0318 	add.w	r3, r7, #24
 81012b2:	4611      	mov	r1, r2
 81012b4:	4618      	mov	r0, r3
 81012b6:	f000 f940 	bl	810153a <_ZN9__gnu_cxxneIPK8SMessageSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 81012ba:	4603      	mov	r3, r0
 81012bc:	2b00      	cmp	r3, #0
 81012be:	d1ad      	bne.n	810121c <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0x24>
//					LOG_DEBUG("[FATAL] Could not send message. e[%d], r[%d]", msg.event_type, msg.event_receiver);
				}
			}
		}
	}
}
 81012c0:	bf00      	nop
 81012c2:	bf00      	nop
 81012c4:	3740      	adds	r7, #64	@ 0x40
 81012c6:	46bd      	mov	sp, r7
 81012c8:	bdb0      	pop	{r4, r5, r7, pc}

081012ca <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 81012ca:	b580      	push	{r7, lr}
 81012cc:	b082      	sub	sp, #8
 81012ce:	af00      	add	r7, sp, #0
 81012d0:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 81012d2:	6878      	ldr	r0, [r7, #4]
 81012d4:	f000 f9f2 	bl	81016bc <_ZNSaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>
 81012d8:	687b      	ldr	r3, [r7, #4]
 81012da:	4618      	mov	r0, r3
 81012dc:	f000 f9fa 	bl	81016d4 <_ZNSt20_Rb_tree_key_compareISt4lessIN19EventManagerCM4Task11EEventQueueEEEC1Ev>
 81012e0:	687b      	ldr	r3, [r7, #4]
 81012e2:	3304      	adds	r3, #4
 81012e4:	4618      	mov	r0, r3
 81012e6:	f7ff fe6c 	bl	8100fc2 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 81012ea:	687b      	ldr	r3, [r7, #4]
 81012ec:	4618      	mov	r0, r3
 81012ee:	3708      	adds	r7, #8
 81012f0:	46bd      	mov	sp, r7
 81012f2:	bd80      	pop	{r7, pc}

081012f4 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_>:
       *
       *  Insertion requires logarithmic time.
       */
      template<typename... _Args>
	std::pair<iterator, bool>
	emplace(_Args&&... __args)
 81012f4:	b5b0      	push	{r4, r5, r7, lr}
 81012f6:	b084      	sub	sp, #16
 81012f8:	af00      	add	r7, sp, #0
 81012fa:	60f8      	str	r0, [r7, #12]
 81012fc:	60b9      	str	r1, [r7, #8]
 81012fe:	607a      	str	r2, [r7, #4]
 8101300:	603b      	str	r3, [r7, #0]
		      }
		    return {__i, false};
		  }
	      }
#endif
	  return _M_t._M_emplace_unique(std::forward<_Args>(__args)...);
 8101302:	68bc      	ldr	r4, [r7, #8]
 8101304:	6878      	ldr	r0, [r7, #4]
 8101306:	f000 f9fc 	bl	8101702 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 810130a:	4605      	mov	r5, r0
 810130c:	6838      	ldr	r0, [r7, #0]
 810130e:	f000 fa03 	bl	8101718 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8101312:	4603      	mov	r3, r0
 8101314:	68f8      	ldr	r0, [r7, #12]
 8101316:	462a      	mov	r2, r5
 8101318:	4621      	mov	r1, r4
 810131a:	f000 fa08 	bl	810172e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJRS1_RS5_EEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_>
 810131e:	bf00      	nop
	}
 8101320:	68f8      	ldr	r0, [r7, #12]
 8101322:	3710      	adds	r7, #16
 8101324:	46bd      	mov	sp, r7
 8101326:	bdb0      	pop	{r4, r5, r7, pc}

08101328 <_ZNSt6vectorI8SMessageSaIS0_EED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 8101328:	b5b0      	push	{r4, r5, r7, lr}
 810132a:	b082      	sub	sp, #8
 810132c:	af00      	add	r7, sp, #0
 810132e:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8101330:	687b      	ldr	r3, [r7, #4]
 8101332:	681c      	ldr	r4, [r3, #0]
 8101334:	687b      	ldr	r3, [r7, #4]
 8101336:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8101338:	687b      	ldr	r3, [r7, #4]
 810133a:	4618      	mov	r0, r3
 810133c:	f000 fa4c 	bl	81017d8 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8101340:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8101342:	461a      	mov	r2, r3
 8101344:	4629      	mov	r1, r5
 8101346:	4620      	mov	r0, r4
 8101348:	f000 fa51 	bl	81017ee <_ZSt8_DestroyIP8SMessageS0_EvT_S2_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 810134c:	687b      	ldr	r3, [r7, #4]
 810134e:	4618      	mov	r0, r3
 8101350:	f000 f822 	bl	8101398 <_ZNSt12_Vector_baseI8SMessageSaIS0_EED1Ev>
 8101354:	687b      	ldr	r3, [r7, #4]
 8101356:	4618      	mov	r0, r3
 8101358:	3708      	adds	r7, #8
 810135a:	46bd      	mov	sp, r7
 810135c:	bdb0      	pop	{r4, r5, r7, pc}

0810135e <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 810135e:	b580      	push	{r7, lr}
 8101360:	b082      	sub	sp, #8
 8101362:	af00      	add	r7, sp, #0
 8101364:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8101366:	6878      	ldr	r0, [r7, #4]
 8101368:	f000 fa4f 	bl	810180a <_ZNSaI8SMessageEC1Ev>
 810136c:	687b      	ldr	r3, [r7, #4]
 810136e:	4618      	mov	r0, r3
 8101370:	f000 fa57 	bl	8101822 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 8101374:	687b      	ldr	r3, [r7, #4]
 8101376:	4618      	mov	r0, r3
 8101378:	3708      	adds	r7, #8
 810137a:	46bd      	mov	sp, r7
 810137c:	bd80      	pop	{r7, pc}

0810137e <_ZNSaI8SMessageED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 810137e:	b580      	push	{r7, lr}
 8101380:	b082      	sub	sp, #8
 8101382:	af00      	add	r7, sp, #0
 8101384:	6078      	str	r0, [r7, #4]
 8101386:	6878      	ldr	r0, [r7, #4]
 8101388:	f000 fa5f 	bl	810184a <_ZNSt15__new_allocatorI8SMessageED1Ev>
 810138c:	687b      	ldr	r3, [r7, #4]
 810138e:	4618      	mov	r0, r3
 8101390:	3708      	adds	r7, #8
 8101392:	46bd      	mov	sp, r7
 8101394:	bd80      	pop	{r7, pc}
	...

08101398 <_ZNSt12_Vector_baseI8SMessageSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8101398:	b580      	push	{r7, lr}
 810139a:	b082      	sub	sp, #8
 810139c:	af00      	add	r7, sp, #0
 810139e:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 81013a0:	687b      	ldr	r3, [r7, #4]
 81013a2:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 81013a4:	687b      	ldr	r3, [r7, #4]
 81013a6:	689a      	ldr	r2, [r3, #8]
 81013a8:	687b      	ldr	r3, [r7, #4]
 81013aa:	681b      	ldr	r3, [r3, #0]
 81013ac:	1ad3      	subs	r3, r2, r3
 81013ae:	10db      	asrs	r3, r3, #3
 81013b0:	4a07      	ldr	r2, [pc, #28]	@ (81013d0 <_ZNSt12_Vector_baseI8SMessageSaIS0_EED1Ev+0x38>)
 81013b2:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 81013b6:	461a      	mov	r2, r3
 81013b8:	6878      	ldr	r0, [r7, #4]
 81013ba:	f000 fa51 	bl	8101860 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j>
      }
 81013be:	687b      	ldr	r3, [r7, #4]
 81013c0:	4618      	mov	r0, r3
 81013c2:	f7ff fe95 	bl	81010f0 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implD1Ev>
 81013c6:	687b      	ldr	r3, [r7, #4]
 81013c8:	4618      	mov	r0, r3
 81013ca:	3708      	adds	r7, #8
 81013cc:	46bd      	mov	sp, r7
 81013ce:	bd80      	pop	{r7, pc}
 81013d0:	aaaaaaab 	.word	0xaaaaaaab

081013d4 <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_>:
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      _GLIBCXX20_CONSTEXPR
      void
      push_back(const value_type& __x)
 81013d4:	b580      	push	{r7, lr}
 81013d6:	b082      	sub	sp, #8
 81013d8:	af00      	add	r7, sp, #0
 81013da:	6078      	str	r0, [r7, #4]
 81013dc:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 81013de:	687b      	ldr	r3, [r7, #4]
 81013e0:	685a      	ldr	r2, [r3, #4]
 81013e2:	687b      	ldr	r3, [r7, #4]
 81013e4:	689b      	ldr	r3, [r3, #8]
 81013e6:	429a      	cmp	r2, r3
 81013e8:	d00d      	beq.n	8101406 <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 81013ea:	6878      	ldr	r0, [r7, #4]
 81013ec:	687b      	ldr	r3, [r7, #4]
 81013ee:	685b      	ldr	r3, [r3, #4]
 81013f0:	683a      	ldr	r2, [r7, #0]
 81013f2:	4619      	mov	r1, r3
 81013f4:	f000 fa47 	bl	8101886 <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 81013f8:	687b      	ldr	r3, [r7, #4]
 81013fa:	685b      	ldr	r3, [r3, #4]
 81013fc:	f103 0218 	add.w	r2, r3, #24
 8101400:	687b      	ldr	r3, [r7, #4]
 8101402:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8101404:	e008      	b.n	8101418 <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 8101406:	6878      	ldr	r0, [r7, #4]
 8101408:	f000 f830 	bl	810146c <_ZNSt6vectorI8SMessageSaIS0_EE3endEv>
 810140c:	4603      	mov	r3, r0
 810140e:	683a      	ldr	r2, [r7, #0]
 8101410:	4619      	mov	r1, r3
 8101412:	6878      	ldr	r0, [r7, #4]
 8101414:	f000 fa60 	bl	81018d8 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8101418:	bf00      	nop
 810141a:	3708      	adds	r7, #8
 810141c:	46bd      	mov	sp, r7
 810141e:	bd80      	pop	{r7, pc}

08101420 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8101420:	b480      	push	{r7}
 8101422:	b083      	sub	sp, #12
 8101424:	af00      	add	r7, sp, #0
 8101426:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8101428:	687b      	ldr	r3, [r7, #4]
 810142a:	685a      	ldr	r2, [r3, #4]
 810142c:	687b      	ldr	r3, [r7, #4]
 810142e:	681b      	ldr	r3, [r3, #0]
 8101430:	1ad3      	subs	r3, r2, r3
 8101432:	10db      	asrs	r3, r3, #3
 8101434:	4a04      	ldr	r2, [pc, #16]	@ (8101448 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv+0x28>)
 8101436:	fb02 f303 	mul.w	r3, r2, r3
 810143a:	4618      	mov	r0, r3
 810143c:	370c      	adds	r7, #12
 810143e:	46bd      	mov	sp, r7
 8101440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101444:	4770      	bx	lr
 8101446:	bf00      	nop
 8101448:	aaaaaaab 	.word	0xaaaaaaab

0810144c <_ZNSt6vectorI8SMessageSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 810144c:	b580      	push	{r7, lr}
 810144e:	b084      	sub	sp, #16
 8101450:	af00      	add	r7, sp, #0
 8101452:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8101454:	687a      	ldr	r2, [r7, #4]
 8101456:	f107 030c 	add.w	r3, r7, #12
 810145a:	4611      	mov	r1, r2
 810145c:	4618      	mov	r0, r3
 810145e:	f000 fb03 	bl	8101a68 <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8101462:	68fb      	ldr	r3, [r7, #12]
 8101464:	4618      	mov	r0, r3
 8101466:	3710      	adds	r7, #16
 8101468:	46bd      	mov	sp, r7
 810146a:	bd80      	pop	{r7, pc}

0810146c <_ZNSt6vectorI8SMessageSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 810146c:	b580      	push	{r7, lr}
 810146e:	b084      	sub	sp, #16
 8101470:	af00      	add	r7, sp, #0
 8101472:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8101474:	687b      	ldr	r3, [r7, #4]
 8101476:	1d1a      	adds	r2, r3, #4
 8101478:	f107 030c 	add.w	r3, r7, #12
 810147c:	4611      	mov	r1, r2
 810147e:	4618      	mov	r0, r3
 8101480:	f000 faf2 	bl	8101a68 <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8101484:	68fb      	ldr	r3, [r7, #12]
 8101486:	4618      	mov	r0, r3
 8101488:	3710      	adds	r7, #16
 810148a:	46bd      	mov	sp, r7
 810148c:	bd80      	pop	{r7, pc}

0810148e <_ZN9__gnu_cxxneIP8SMessageSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 810148e:	b590      	push	{r4, r7, lr}
 8101490:	b083      	sub	sp, #12
 8101492:	af00      	add	r7, sp, #0
 8101494:	6078      	str	r0, [r7, #4]
 8101496:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8101498:	6878      	ldr	r0, [r7, #4]
 810149a:	f000 faf5 	bl	8101a88 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 810149e:	4603      	mov	r3, r0
 81014a0:	681c      	ldr	r4, [r3, #0]
 81014a2:	6838      	ldr	r0, [r7, #0]
 81014a4:	f000 faf0 	bl	8101a88 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 81014a8:	4603      	mov	r3, r0
 81014aa:	681b      	ldr	r3, [r3, #0]
 81014ac:	429c      	cmp	r4, r3
 81014ae:	bf14      	ite	ne
 81014b0:	2301      	movne	r3, #1
 81014b2:	2300      	moveq	r3, #0
 81014b4:	b2db      	uxtb	r3, r3
 81014b6:	4618      	mov	r0, r3
 81014b8:	370c      	adds	r7, #12
 81014ba:	46bd      	mov	sp, r7
 81014bc:	bd90      	pop	{r4, r7, pc}

081014be <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 81014be:	b480      	push	{r7}
 81014c0:	b083      	sub	sp, #12
 81014c2:	af00      	add	r7, sp, #0
 81014c4:	6078      	str	r0, [r7, #4]
	++_M_current;
 81014c6:	687b      	ldr	r3, [r7, #4]
 81014c8:	681b      	ldr	r3, [r3, #0]
 81014ca:	f103 0218 	add.w	r2, r3, #24
 81014ce:	687b      	ldr	r3, [r7, #4]
 81014d0:	601a      	str	r2, [r3, #0]
	return *this;
 81014d2:	687b      	ldr	r3, [r7, #4]
      }
 81014d4:	4618      	mov	r0, r3
 81014d6:	370c      	adds	r7, #12
 81014d8:	46bd      	mov	sp, r7
 81014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014de:	4770      	bx	lr

081014e0 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 81014e0:	b480      	push	{r7}
 81014e2:	b083      	sub	sp, #12
 81014e4:	af00      	add	r7, sp, #0
 81014e6:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 81014e8:	687b      	ldr	r3, [r7, #4]
 81014ea:	681b      	ldr	r3, [r3, #0]
 81014ec:	4618      	mov	r0, r3
 81014ee:	370c      	adds	r7, #12
 81014f0:	46bd      	mov	sp, r7
 81014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014f6:	4770      	bx	lr

081014f8 <_ZNKSt6vectorI8SMessageSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 81014f8:	b580      	push	{r7, lr}
 81014fa:	b084      	sub	sp, #16
 81014fc:	af00      	add	r7, sp, #0
 81014fe:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8101500:	687a      	ldr	r2, [r7, #4]
 8101502:	f107 030c 	add.w	r3, r7, #12
 8101506:	4611      	mov	r1, r2
 8101508:	4618      	mov	r0, r3
 810150a:	f000 fac8 	bl	8101a9e <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 810150e:	68fb      	ldr	r3, [r7, #12]
 8101510:	4618      	mov	r0, r3
 8101512:	3710      	adds	r7, #16
 8101514:	46bd      	mov	sp, r7
 8101516:	bd80      	pop	{r7, pc}

08101518 <_ZNKSt6vectorI8SMessageSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8101518:	b580      	push	{r7, lr}
 810151a:	b084      	sub	sp, #16
 810151c:	af00      	add	r7, sp, #0
 810151e:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8101520:	687b      	ldr	r3, [r7, #4]
 8101522:	1d1a      	adds	r2, r3, #4
 8101524:	f107 030c 	add.w	r3, r7, #12
 8101528:	4611      	mov	r1, r2
 810152a:	4618      	mov	r0, r3
 810152c:	f000 fab7 	bl	8101a9e <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8101530:	68fb      	ldr	r3, [r7, #12]
 8101532:	4618      	mov	r0, r3
 8101534:	3710      	adds	r7, #16
 8101536:	46bd      	mov	sp, r7
 8101538:	bd80      	pop	{r7, pc}

0810153a <_ZN9__gnu_cxxneIPK8SMessageSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 810153a:	b590      	push	{r4, r7, lr}
 810153c:	b083      	sub	sp, #12
 810153e:	af00      	add	r7, sp, #0
 8101540:	6078      	str	r0, [r7, #4]
 8101542:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8101544:	6878      	ldr	r0, [r7, #4]
 8101546:	f000 faba 	bl	8101abe <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 810154a:	4603      	mov	r3, r0
 810154c:	681c      	ldr	r4, [r3, #0]
 810154e:	6838      	ldr	r0, [r7, #0]
 8101550:	f000 fab5 	bl	8101abe <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8101554:	4603      	mov	r3, r0
 8101556:	681b      	ldr	r3, [r3, #0]
 8101558:	429c      	cmp	r4, r3
 810155a:	bf14      	ite	ne
 810155c:	2301      	movne	r3, #1
 810155e:	2300      	moveq	r3, #0
 8101560:	b2db      	uxtb	r3, r3
 8101562:	4618      	mov	r0, r3
 8101564:	370c      	adds	r7, #12
 8101566:	46bd      	mov	sp, r7
 8101568:	bd90      	pop	{r4, r7, pc}

0810156a <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 810156a:	b480      	push	{r7}
 810156c:	b083      	sub	sp, #12
 810156e:	af00      	add	r7, sp, #0
 8101570:	6078      	str	r0, [r7, #4]
	++_M_current;
 8101572:	687b      	ldr	r3, [r7, #4]
 8101574:	681b      	ldr	r3, [r3, #0]
 8101576:	f103 0218 	add.w	r2, r3, #24
 810157a:	687b      	ldr	r3, [r7, #4]
 810157c:	601a      	str	r2, [r3, #0]
	return *this;
 810157e:	687b      	ldr	r3, [r7, #4]
      }
 8101580:	4618      	mov	r0, r3
 8101582:	370c      	adds	r7, #12
 8101584:	46bd      	mov	sp, r7
 8101586:	f85d 7b04 	ldr.w	r7, [sp], #4
 810158a:	4770      	bx	lr

0810158c <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 810158c:	b480      	push	{r7}
 810158e:	b083      	sub	sp, #12
 8101590:	af00      	add	r7, sp, #0
 8101592:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8101594:	687b      	ldr	r3, [r7, #4]
 8101596:	681b      	ldr	r3, [r3, #0]
 8101598:	4618      	mov	r0, r3
 810159a:	370c      	adds	r7, #12
 810159c:	46bd      	mov	sp, r7
 810159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015a2:	4770      	bx	lr

081015a4 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>:
       *  pointing to the sought after %pair.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */

      iterator
      find(const key_type& __x)
 81015a4:	b580      	push	{r7, lr}
 81015a6:	b082      	sub	sp, #8
 81015a8:	af00      	add	r7, sp, #0
 81015aa:	6078      	str	r0, [r7, #4]
 81015ac:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 81015ae:	687b      	ldr	r3, [r7, #4]
 81015b0:	6839      	ldr	r1, [r7, #0]
 81015b2:	4618      	mov	r0, r3
 81015b4:	f000 fa8e 	bl	8101ad4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 81015b8:	4603      	mov	r3, r0
 81015ba:	4618      	mov	r0, r3
 81015bc:	3708      	adds	r7, #8
 81015be:	46bd      	mov	sp, r7
 81015c0:	bd80      	pop	{r7, pc}

081015c2 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 81015c2:	b580      	push	{r7, lr}
 81015c4:	b082      	sub	sp, #8
 81015c6:	af00      	add	r7, sp, #0
 81015c8:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 81015ca:	687b      	ldr	r3, [r7, #4]
 81015cc:	4618      	mov	r0, r3
 81015ce:	f000 fabd 	bl	8101b4c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 81015d2:	4603      	mov	r3, r0
 81015d4:	4618      	mov	r0, r3
 81015d6:	3708      	adds	r7, #8
 81015d8:	46bd      	mov	sp, r7
 81015da:	bd80      	pop	{r7, pc}

081015dc <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 81015dc:	b480      	push	{r7}
 81015de:	b083      	sub	sp, #12
 81015e0:	af00      	add	r7, sp, #0
 81015e2:	6078      	str	r0, [r7, #4]
 81015e4:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 81015e6:	687b      	ldr	r3, [r7, #4]
 81015e8:	681a      	ldr	r2, [r3, #0]
 81015ea:	683b      	ldr	r3, [r7, #0]
 81015ec:	681b      	ldr	r3, [r3, #0]
 81015ee:	429a      	cmp	r2, r3
 81015f0:	bf14      	ite	ne
 81015f2:	2301      	movne	r3, #1
 81015f4:	2300      	moveq	r3, #0
 81015f6:	b2db      	uxtb	r3, r3
 81015f8:	4618      	mov	r0, r3
 81015fa:	370c      	adds	r7, #12
 81015fc:	46bd      	mov	sp, r7
 81015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101602:	4770      	bx	lr

08101604 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 8101604:	b590      	push	{r4, r7, lr}
 8101606:	b08b      	sub	sp, #44	@ 0x2c
 8101608:	af02      	add	r7, sp, #8
 810160a:	6078      	str	r0, [r7, #4]
 810160c:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 810160e:	6839      	ldr	r1, [r7, #0]
 8101610:	6878      	ldr	r0, [r7, #4]
 8101612:	f000 faac 	bl	8101b6e <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 8101616:	4603      	mov	r3, r0
 8101618:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 810161a:	6878      	ldr	r0, [r7, #4]
 810161c:	f7ff ffd1 	bl	81015c2 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8101620:	4603      	mov	r3, r0
 8101622:	60fb      	str	r3, [r7, #12]
 8101624:	f107 020c 	add.w	r2, r7, #12
 8101628:	f107 0308 	add.w	r3, r7, #8
 810162c:	4611      	mov	r1, r2
 810162e:	4618      	mov	r0, r3
 8101630:	f000 faac 	bl	8101b8c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 8101634:	4603      	mov	r3, r0
 8101636:	2b00      	cmp	r3, #0
 8101638:	d112      	bne.n	8101660 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x5c>
 810163a:	6878      	ldr	r0, [r7, #4]
 810163c:	f000 faba 	bl	8101bb4 <_ZNKSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8101640:	f107 0308 	add.w	r3, r7, #8
 8101644:	4618      	mov	r0, r3
 8101646:	f000 fac2 	bl	8101bce <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 810164a:	4603      	mov	r3, r0
 810164c:	461a      	mov	r2, r3
 810164e:	f107 0310 	add.w	r3, r7, #16
 8101652:	6839      	ldr	r1, [r7, #0]
 8101654:	4618      	mov	r0, r3
 8101656:	f000 fac8 	bl	8101bea <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 810165a:	4603      	mov	r3, r0
 810165c:	2b00      	cmp	r3, #0
 810165e:	d001      	beq.n	8101664 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 8101660:	2301      	movs	r3, #1
 8101662:	e000      	b.n	8101666 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x62>
 8101664:	2300      	movs	r3, #0
 8101666:	2b00      	cmp	r3, #0
 8101668:	d01b      	beq.n	81016a2 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 810166a:	687c      	ldr	r4, [r7, #4]
 810166c:	f107 0208 	add.w	r2, r7, #8
 8101670:	f107 0314 	add.w	r3, r7, #20
 8101674:	4611      	mov	r1, r2
 8101676:	4618      	mov	r0, r3
 8101678:	f000 fadb 	bl	8101c32 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 810167c:	f107 0318 	add.w	r3, r7, #24
 8101680:	6839      	ldr	r1, [r7, #0]
 8101682:	4618      	mov	r0, r3
 8101684:	f000 fac6 	bl	8101c14 <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8101688:	f107 0218 	add.w	r2, r7, #24
 810168c:	f107 031c 	add.w	r3, r7, #28
 8101690:	9300      	str	r3, [sp, #0]
 8101692:	4613      	mov	r3, r2
 8101694:	4a08      	ldr	r2, [pc, #32]	@ (81016b8 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb4>)
 8101696:	6979      	ldr	r1, [r7, #20]
 8101698:	4620      	mov	r0, r4
 810169a:	f000 fada 	bl	8101c52 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 810169e:	4603      	mov	r3, r0
 81016a0:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 81016a2:	f107 0308 	add.w	r3, r7, #8
 81016a6:	4618      	mov	r0, r3
 81016a8:	f000 fa91 	bl	8101bce <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 81016ac:	4603      	mov	r3, r0
 81016ae:	3304      	adds	r3, #4
      }
 81016b0:	4618      	mov	r0, r3
 81016b2:	3724      	adds	r7, #36	@ 0x24
 81016b4:	46bd      	mov	sp, r7
 81016b6:	bd90      	pop	{r4, r7, pc}
 81016b8:	08107e98 	.word	0x08107e98

081016bc <_ZNSaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 81016bc:	b580      	push	{r7, lr}
 81016be:	b082      	sub	sp, #8
 81016c0:	af00      	add	r7, sp, #0
 81016c2:	6078      	str	r0, [r7, #4]
 81016c4:	6878      	ldr	r0, [r7, #4]
 81016c6:	f000 fb0a 	bl	8101cde <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>
 81016ca:	687b      	ldr	r3, [r7, #4]
 81016cc:	4618      	mov	r0, r3
 81016ce:	3708      	adds	r7, #8
 81016d0:	46bd      	mov	sp, r7
 81016d2:	bd80      	pop	{r7, pc}

081016d4 <_ZNSt20_Rb_tree_key_compareISt4lessIN19EventManagerCM4Task11EEventQueueEEEC1Ev>:
      _Rb_tree_key_compare()
 81016d4:	b480      	push	{r7}
 81016d6:	b083      	sub	sp, #12
 81016d8:	af00      	add	r7, sp, #0
 81016da:	6078      	str	r0, [r7, #4]
      { }
 81016dc:	687b      	ldr	r3, [r7, #4]
 81016de:	4618      	mov	r0, r3
 81016e0:	370c      	adds	r7, #12
 81016e2:	46bd      	mov	sp, r7
 81016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016e8:	4770      	bx	lr

081016ea <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 81016ea:	b580      	push	{r7, lr}
 81016ec:	b082      	sub	sp, #8
 81016ee:	af00      	add	r7, sp, #0
 81016f0:	6078      	str	r0, [r7, #4]
      { return _M_mbegin(); }
 81016f2:	6878      	ldr	r0, [r7, #4]
 81016f4:	f000 fb27 	bl	8101d46 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE9_M_mbeginEv>
 81016f8:	4603      	mov	r3, r0
 81016fa:	4618      	mov	r0, r3
 81016fc:	3708      	adds	r7, #8
 81016fe:	46bd      	mov	sp, r7
 8101700:	bd80      	pop	{r7, pc}

08101702 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8101702:	b480      	push	{r7}
 8101704:	b083      	sub	sp, #12
 8101706:	af00      	add	r7, sp, #0
 8101708:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810170a:	687b      	ldr	r3, [r7, #4]
 810170c:	4618      	mov	r0, r3
 810170e:	370c      	adds	r7, #12
 8101710:	46bd      	mov	sp, r7
 8101712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101716:	4770      	bx	lr

08101718 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8101718:	b480      	push	{r7}
 810171a:	b083      	sub	sp, #12
 810171c:	af00      	add	r7, sp, #0
 810171e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8101720:	687b      	ldr	r3, [r7, #4]
 8101722:	4618      	mov	r0, r3
 8101724:	370c      	adds	r7, #12
 8101726:	46bd      	mov	sp, r7
 8101728:	f85d 7b04 	ldr.w	r7, [sp], #4
 810172c:	4770      	bx	lr

0810172e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJRS1_RS5_EEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    template<typename... _Args>
      auto
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 810172e:	b590      	push	{r4, r7, lr}
 8101730:	b08d      	sub	sp, #52	@ 0x34
 8101732:	af00      	add	r7, sp, #0
 8101734:	60f8      	str	r0, [r7, #12]
 8101736:	60b9      	str	r1, [r7, #8]
 8101738:	607a      	str	r2, [r7, #4]
 810173a:	603b      	str	r3, [r7, #0]
      _M_emplace_unique(_Args&&... __args)
      -> pair<iterator, bool>
      {
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
 810173c:	6878      	ldr	r0, [r7, #4]
 810173e:	f7ff ffe0 	bl	8101702 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8101742:	4604      	mov	r4, r0
 8101744:	6838      	ldr	r0, [r7, #0]
 8101746:	f7ff ffe7 	bl	8101718 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 810174a:	4603      	mov	r3, r0
 810174c:	f107 0018 	add.w	r0, r7, #24
 8101750:	4622      	mov	r2, r4
 8101752:	68b9      	ldr	r1, [r7, #8]
 8101754:	f000 fb03 	bl	8101d5e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRS1_RS5_EEERSC_DpOT_>
	auto __res = _M_get_insert_unique_pos(__z._M_key());
 8101758:	f107 0318 	add.w	r3, r7, #24
 810175c:	4618      	mov	r0, r3
 810175e:	f000 fbb7 	bl	8101ed0 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>
 8101762:	4602      	mov	r2, r0
 8101764:	f107 0310 	add.w	r3, r7, #16
 8101768:	68b9      	ldr	r1, [r7, #8]
 810176a:	4618      	mov	r0, r3
 810176c:	f000 fb2b 	bl	8101dc6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
	if (__res.second)
 8101770:	697b      	ldr	r3, [r7, #20]
 8101772:	2b00      	cmp	r3, #0
 8101774:	d015      	beq.n	81017a2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJRS1_RS5_EEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_+0x74>
	  return {__z._M_insert(__res), true};
 8101776:	f107 0018 	add.w	r0, r7, #24
 810177a:	f107 0310 	add.w	r3, r7, #16
 810177e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8101782:	f000 fbb3 	bl	8101eec <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>
 8101786:	4603      	mov	r3, r0
 8101788:	623b      	str	r3, [r7, #32]
 810178a:	2301      	movs	r3, #1
 810178c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8101790:	f107 0227 	add.w	r2, r7, #39	@ 0x27
 8101794:	f107 0320 	add.w	r3, r7, #32
 8101798:	4619      	mov	r1, r3
 810179a:	68f8      	ldr	r0, [r7, #12]
 810179c:	f000 fbbf 	bl	8101f1e <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEbEC1IS7_bLb1EEEOT_OT0_>
 81017a0:	e011      	b.n	81017c6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJRS1_RS5_EEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_+0x98>
	return {iterator(__res.first), false};
 81017a2:	693a      	ldr	r2, [r7, #16]
 81017a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81017a8:	4611      	mov	r1, r2
 81017aa:	4618      	mov	r0, r3
 81017ac:	f000 fbd0 	bl	8101f50 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 81017b0:	2300      	movs	r3, #0
 81017b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 81017b6:	f107 022f 	add.w	r2, r7, #47	@ 0x2f
 81017ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81017be:	4619      	mov	r1, r3
 81017c0:	68f8      	ldr	r0, [r7, #12]
 81017c2:	f000 fbac 	bl	8101f1e <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEbEC1IS7_bLb1EEEOT_OT0_>
      }
 81017c6:	f107 0318 	add.w	r3, r7, #24
 81017ca:	4618      	mov	r0, r3
 81017cc:	f000 fae6 	bl	8101d9c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>
 81017d0:	68f8      	ldr	r0, [r7, #12]
 81017d2:	3734      	adds	r7, #52	@ 0x34
 81017d4:	46bd      	mov	sp, r7
 81017d6:	bd90      	pop	{r4, r7, pc}

081017d8 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 81017d8:	b480      	push	{r7}
 81017da:	b083      	sub	sp, #12
 81017dc:	af00      	add	r7, sp, #0
 81017de:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 81017e0:	687b      	ldr	r3, [r7, #4]
 81017e2:	4618      	mov	r0, r3
 81017e4:	370c      	adds	r7, #12
 81017e6:	46bd      	mov	sp, r7
 81017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017ec:	4770      	bx	lr

081017ee <_ZSt8_DestroyIP8SMessageS0_EvT_S2_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 81017ee:	b580      	push	{r7, lr}
 81017f0:	b084      	sub	sp, #16
 81017f2:	af00      	add	r7, sp, #0
 81017f4:	60f8      	str	r0, [r7, #12]
 81017f6:	60b9      	str	r1, [r7, #8]
 81017f8:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 81017fa:	68b9      	ldr	r1, [r7, #8]
 81017fc:	68f8      	ldr	r0, [r7, #12]
 81017fe:	f000 fbc2 	bl	8101f86 <_ZSt8_DestroyIP8SMessageEvT_S2_>
    }
 8101802:	bf00      	nop
 8101804:	3710      	adds	r7, #16
 8101806:	46bd      	mov	sp, r7
 8101808:	bd80      	pop	{r7, pc}

0810180a <_ZNSaI8SMessageEC1Ev>:
 810180a:	b580      	push	{r7, lr}
 810180c:	b082      	sub	sp, #8
 810180e:	af00      	add	r7, sp, #0
 8101810:	6078      	str	r0, [r7, #4]
 8101812:	6878      	ldr	r0, [r7, #4]
 8101814:	f000 fbc4 	bl	8101fa0 <_ZNSt15__new_allocatorI8SMessageEC1Ev>
 8101818:	687b      	ldr	r3, [r7, #4]
 810181a:	4618      	mov	r0, r3
 810181c:	3708      	adds	r7, #8
 810181e:	46bd      	mov	sp, r7
 8101820:	bd80      	pop	{r7, pc}

08101822 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8101822:	b480      	push	{r7}
 8101824:	b083      	sub	sp, #12
 8101826:	af00      	add	r7, sp, #0
 8101828:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 810182a:	687b      	ldr	r3, [r7, #4]
 810182c:	2200      	movs	r2, #0
 810182e:	601a      	str	r2, [r3, #0]
 8101830:	687b      	ldr	r3, [r7, #4]
 8101832:	2200      	movs	r2, #0
 8101834:	605a      	str	r2, [r3, #4]
 8101836:	687b      	ldr	r3, [r7, #4]
 8101838:	2200      	movs	r2, #0
 810183a:	609a      	str	r2, [r3, #8]
	{ }
 810183c:	687b      	ldr	r3, [r7, #4]
 810183e:	4618      	mov	r0, r3
 8101840:	370c      	adds	r7, #12
 8101842:	46bd      	mov	sp, r7
 8101844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101848:	4770      	bx	lr

0810184a <_ZNSt15__new_allocatorI8SMessageED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 810184a:	b480      	push	{r7}
 810184c:	b083      	sub	sp, #12
 810184e:	af00      	add	r7, sp, #0
 8101850:	6078      	str	r0, [r7, #4]
 8101852:	687b      	ldr	r3, [r7, #4]
 8101854:	4618      	mov	r0, r3
 8101856:	370c      	adds	r7, #12
 8101858:	46bd      	mov	sp, r7
 810185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810185e:	4770      	bx	lr

08101860 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8101860:	b580      	push	{r7, lr}
 8101862:	b084      	sub	sp, #16
 8101864:	af00      	add	r7, sp, #0
 8101866:	60f8      	str	r0, [r7, #12]
 8101868:	60b9      	str	r1, [r7, #8]
 810186a:	607a      	str	r2, [r7, #4]
	if (__p)
 810186c:	68bb      	ldr	r3, [r7, #8]
 810186e:	2b00      	cmp	r3, #0
 8101870:	d005      	beq.n	810187e <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8101872:	68fb      	ldr	r3, [r7, #12]
 8101874:	687a      	ldr	r2, [r7, #4]
 8101876:	68b9      	ldr	r1, [r7, #8]
 8101878:	4618      	mov	r0, r3
 810187a:	f000 fb9c 	bl	8101fb6 <_ZNSt16allocator_traitsISaI8SMessageEE10deallocateERS1_PS0_j>
      }
 810187e:	bf00      	nop
 8101880:	3710      	adds	r7, #16
 8101882:	46bd      	mov	sp, r7
 8101884:	bd80      	pop	{r7, pc}

08101886 <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8101886:	b580      	push	{r7, lr}
 8101888:	b084      	sub	sp, #16
 810188a:	af00      	add	r7, sp, #0
 810188c:	60f8      	str	r0, [r7, #12]
 810188e:	60b9      	str	r1, [r7, #8]
 8101890:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8101892:	6878      	ldr	r0, [r7, #4]
 8101894:	f000 fb9e 	bl	8101fd4 <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>
 8101898:	4603      	mov	r3, r0
 810189a:	461a      	mov	r2, r3
 810189c:	68b9      	ldr	r1, [r7, #8]
 810189e:	68f8      	ldr	r0, [r7, #12]
 81018a0:	f000 fba3 	bl	8101fea <_ZNSt15__new_allocatorI8SMessageE9constructIS0_JRKS0_EEEvPT_DpOT0_>
	}
 81018a4:	bf00      	nop
 81018a6:	3710      	adds	r7, #16
 81018a8:	46bd      	mov	sp, r7
 81018aa:	bd80      	pop	{r7, pc}

081018ac <_ZNSt6vectorI8SMessageSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 81018ac:	b580      	push	{r7, lr}
 81018ae:	b082      	sub	sp, #8
 81018b0:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 81018b2:	4618      	mov	r0, r3
 81018b4:	f000 f805 	bl	81018c2 <_ZNSt6vectorI8SMessageSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 81018b8:	4603      	mov	r3, r0
      }
 81018ba:	4618      	mov	r0, r3
 81018bc:	3708      	adds	r7, #8
 81018be:	46bd      	mov	sp, r7
 81018c0:	bd80      	pop	{r7, pc}

081018c2 <_ZNSt6vectorI8SMessageSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 81018c2:	b480      	push	{r7}
 81018c4:	b083      	sub	sp, #12
 81018c6:	af00      	add	r7, sp, #0
 81018c8:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 81018ca:	2301      	movs	r3, #1
      }
 81018cc:	4618      	mov	r0, r3
 81018ce:	370c      	adds	r7, #12
 81018d0:	46bd      	mov	sp, r7
 81018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018d6:	4770      	bx	lr

081018d8 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 81018d8:	b5b0      	push	{r4, r5, r7, lr}
 81018da:	b08c      	sub	sp, #48	@ 0x30
 81018dc:	af00      	add	r7, sp, #0
 81018de:	60f8      	str	r0, [r7, #12]
 81018e0:	60b9      	str	r1, [r7, #8]
 81018e2:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 81018e4:	4a5e      	ldr	r2, [pc, #376]	@ (8101a60 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x188>)
 81018e6:	2101      	movs	r1, #1
 81018e8:	68f8      	ldr	r0, [r7, #12]
 81018ea:	f000 fb99 	bl	8102020 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc>
 81018ee:	62b8      	str	r0, [r7, #40]	@ 0x28
      pointer __old_start = this->_M_impl._M_start;
 81018f0:	68fb      	ldr	r3, [r7, #12]
 81018f2:	681b      	ldr	r3, [r3, #0]
 81018f4:	627b      	str	r3, [r7, #36]	@ 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 81018f6:	68fb      	ldr	r3, [r7, #12]
 81018f8:	685b      	ldr	r3, [r3, #4]
 81018fa:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 81018fc:	68f8      	ldr	r0, [r7, #12]
 81018fe:	f7ff fda5 	bl	810144c <_ZNSt6vectorI8SMessageSaIS0_EE5beginEv>
 8101902:	4603      	mov	r3, r0
 8101904:	617b      	str	r3, [r7, #20]
 8101906:	f107 0214 	add.w	r2, r7, #20
 810190a:	f107 0308 	add.w	r3, r7, #8
 810190e:	4611      	mov	r1, r2
 8101910:	4618      	mov	r0, r3
 8101912:	f000 fbcd 	bl	81020b0 <_ZN9__gnu_cxxmiIP8SMessageSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8101916:	4603      	mov	r3, r0
 8101918:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 810191a:	68fb      	ldr	r3, [r7, #12]
 810191c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810191e:	4618      	mov	r0, r3
 8101920:	f000 fbe0 	bl	81020e4 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj>
 8101924:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8101926:	69bb      	ldr	r3, [r7, #24]
 8101928:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 810192a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 810192c:	69fa      	ldr	r2, [r7, #28]
 810192e:	4613      	mov	r3, r2
 8101930:	005b      	lsls	r3, r3, #1
 8101932:	4413      	add	r3, r2
 8101934:	00db      	lsls	r3, r3, #3
 8101936:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8101938:	69bb      	ldr	r3, [r7, #24]
 810193a:	189d      	adds	r5, r3, r2
 810193c:	6878      	ldr	r0, [r7, #4]
 810193e:	f000 fb49 	bl	8101fd4 <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>
 8101942:	4603      	mov	r3, r0
 8101944:	461a      	mov	r2, r3
 8101946:	4629      	mov	r1, r5
 8101948:	4620      	mov	r0, r4
 810194a:	f7ff ff9c 	bl	8101886 <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 810194e:	2300      	movs	r3, #0
 8101950:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8101952:	f7ff ffab 	bl	81018ac <_ZNSt6vectorI8SMessageSaIS0_EE15_S_use_relocateEv>
 8101956:	4603      	mov	r3, r0
 8101958:	2b00      	cmp	r3, #0
 810195a:	d027      	beq.n	81019ac <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd4>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 810195c:	f107 0308 	add.w	r3, r7, #8
 8101960:	4618      	mov	r0, r3
 8101962:	f000 f891 	bl	8101a88 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8101966:	4603      	mov	r3, r0
 8101968:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 810196a:	68fb      	ldr	r3, [r7, #12]
 810196c:	4618      	mov	r0, r3
 810196e:	f7ff ff33 	bl	81017d8 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8101972:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8101974:	69ba      	ldr	r2, [r7, #24]
 8101976:	4621      	mov	r1, r4
 8101978:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810197a:	f000 fbc7 	bl	810210c <_ZNSt6vectorI8SMessageSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 810197e:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 8101980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101982:	3318      	adds	r3, #24
 8101984:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8101986:	f107 0308 	add.w	r3, r7, #8
 810198a:	4618      	mov	r0, r3
 810198c:	f000 f87c 	bl	8101a88 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8101990:	4603      	mov	r3, r0
 8101992:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8101994:	68fb      	ldr	r3, [r7, #12]
 8101996:	4618      	mov	r0, r3
 8101998:	f7ff ff1e 	bl	81017d8 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 810199c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 810199e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81019a0:	6a39      	ldr	r1, [r7, #32]
 81019a2:	4620      	mov	r0, r4
 81019a4:	f000 fbb2 	bl	810210c <_ZNSt6vectorI8SMessageSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 81019a8:	62f8      	str	r0, [r7, #44]	@ 0x2c
 81019aa:	e026      	b.n	81019fa <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x122>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 81019ac:	f107 0308 	add.w	r3, r7, #8
 81019b0:	4618      	mov	r0, r3
 81019b2:	f000 f869 	bl	8101a88 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 81019b6:	4603      	mov	r3, r0
 81019b8:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 81019ba:	68fb      	ldr	r3, [r7, #12]
 81019bc:	4618      	mov	r0, r3
 81019be:	f7ff ff0b 	bl	81017d8 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 81019c2:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 81019c4:	69ba      	ldr	r2, [r7, #24]
 81019c6:	4621      	mov	r1, r4
 81019c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 81019ca:	f000 fbb3 	bl	8102134 <_ZSt34__uninitialized_move_if_noexcept_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>
 81019ce:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 81019d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81019d2:	3318      	adds	r3, #24
 81019d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 81019d6:	f107 0308 	add.w	r3, r7, #8
 81019da:	4618      	mov	r0, r3
 81019dc:	f000 f854 	bl	8101a88 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 81019e0:	4603      	mov	r3, r0
 81019e2:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 81019e4:	68fb      	ldr	r3, [r7, #12]
 81019e6:	4618      	mov	r0, r3
 81019e8:	f7ff fef6 	bl	81017d8 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 81019ec:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 81019ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81019f0:	6a39      	ldr	r1, [r7, #32]
 81019f2:	4620      	mov	r0, r4
 81019f4:	f000 fb9e 	bl	8102134 <_ZSt34__uninitialized_move_if_noexcept_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>
 81019f8:	62f8      	str	r0, [r7, #44]	@ 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 81019fa:	f7ff ff57 	bl	81018ac <_ZNSt6vectorI8SMessageSaIS0_EE15_S_use_relocateEv>
 81019fe:	4603      	mov	r3, r0
 8101a00:	f083 0301 	eor.w	r3, r3, #1
 8101a04:	b2db      	uxtb	r3, r3
 8101a06:	2b00      	cmp	r3, #0
 8101a08:	d009      	beq.n	8101a1e <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x146>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8101a0a:	68fb      	ldr	r3, [r7, #12]
 8101a0c:	4618      	mov	r0, r3
 8101a0e:	f7ff fee3 	bl	81017d8 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8101a12:	4603      	mov	r3, r0
 8101a14:	461a      	mov	r2, r3
 8101a16:	6a39      	ldr	r1, [r7, #32]
 8101a18:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8101a1a:	f7ff fee8 	bl	81017ee <_ZSt8_DestroyIP8SMessageS0_EvT_S2_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8101a1e:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8101a20:	68fb      	ldr	r3, [r7, #12]
 8101a22:	689a      	ldr	r2, [r3, #8]
 8101a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101a26:	1ad3      	subs	r3, r2, r3
 8101a28:	10db      	asrs	r3, r3, #3
 8101a2a:	4a0e      	ldr	r2, [pc, #56]	@ (8101a64 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x18c>)
 8101a2c:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 8101a30:	461a      	mov	r2, r3
 8101a32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8101a34:	f7ff ff14 	bl	8101860 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 8101a38:	68fb      	ldr	r3, [r7, #12]
 8101a3a:	69ba      	ldr	r2, [r7, #24]
 8101a3c:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8101a3e:	68fb      	ldr	r3, [r7, #12]
 8101a40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8101a42:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8101a44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8101a46:	4613      	mov	r3, r2
 8101a48:	005b      	lsls	r3, r3, #1
 8101a4a:	4413      	add	r3, r2
 8101a4c:	00db      	lsls	r3, r3, #3
 8101a4e:	461a      	mov	r2, r3
 8101a50:	69bb      	ldr	r3, [r7, #24]
 8101a52:	441a      	add	r2, r3
 8101a54:	68fb      	ldr	r3, [r7, #12]
 8101a56:	609a      	str	r2, [r3, #8]
    }
 8101a58:	bf00      	nop
 8101a5a:	3730      	adds	r7, #48	@ 0x30
 8101a5c:	46bd      	mov	sp, r7
 8101a5e:	bdb0      	pop	{r4, r5, r7, pc}
 8101a60:	08107e1c 	.word	0x08107e1c
 8101a64:	aaaaaaab 	.word	0xaaaaaaab

08101a68 <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8101a68:	b480      	push	{r7}
 8101a6a:	b083      	sub	sp, #12
 8101a6c:	af00      	add	r7, sp, #0
 8101a6e:	6078      	str	r0, [r7, #4]
 8101a70:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8101a72:	683b      	ldr	r3, [r7, #0]
 8101a74:	681a      	ldr	r2, [r3, #0]
 8101a76:	687b      	ldr	r3, [r7, #4]
 8101a78:	601a      	str	r2, [r3, #0]
 8101a7a:	687b      	ldr	r3, [r7, #4]
 8101a7c:	4618      	mov	r0, r3
 8101a7e:	370c      	adds	r7, #12
 8101a80:	46bd      	mov	sp, r7
 8101a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a86:	4770      	bx	lr

08101a88 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8101a88:	b480      	push	{r7}
 8101a8a:	b083      	sub	sp, #12
 8101a8c:	af00      	add	r7, sp, #0
 8101a8e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8101a90:	687b      	ldr	r3, [r7, #4]
 8101a92:	4618      	mov	r0, r3
 8101a94:	370c      	adds	r7, #12
 8101a96:	46bd      	mov	sp, r7
 8101a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a9c:	4770      	bx	lr

08101a9e <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8101a9e:	b480      	push	{r7}
 8101aa0:	b083      	sub	sp, #12
 8101aa2:	af00      	add	r7, sp, #0
 8101aa4:	6078      	str	r0, [r7, #4]
 8101aa6:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8101aa8:	683b      	ldr	r3, [r7, #0]
 8101aaa:	681a      	ldr	r2, [r3, #0]
 8101aac:	687b      	ldr	r3, [r7, #4]
 8101aae:	601a      	str	r2, [r3, #0]
 8101ab0:	687b      	ldr	r3, [r7, #4]
 8101ab2:	4618      	mov	r0, r3
 8101ab4:	370c      	adds	r7, #12
 8101ab6:	46bd      	mov	sp, r7
 8101ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101abc:	4770      	bx	lr

08101abe <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8101abe:	b480      	push	{r7}
 8101ac0:	b083      	sub	sp, #12
 8101ac2:	af00      	add	r7, sp, #0
 8101ac4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8101ac6:	687b      	ldr	r3, [r7, #4]
 8101ac8:	4618      	mov	r0, r3
 8101aca:	370c      	adds	r7, #12
 8101acc:	46bd      	mov	sp, r7
 8101ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ad2:	4770      	bx	lr

08101ad4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8101ad4:	b590      	push	{r4, r7, lr}
 8101ad6:	b085      	sub	sp, #20
 8101ad8:	af00      	add	r7, sp, #0
 8101ada:	6078      	str	r0, [r7, #4]
 8101adc:	6039      	str	r1, [r7, #0]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8101ade:	6878      	ldr	r0, [r7, #4]
 8101ae0:	f7ff fe03 	bl	81016ea <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8101ae4:	4604      	mov	r4, r0
 8101ae6:	6878      	ldr	r0, [r7, #4]
 8101ae8:	f000 fb3d 	bl	8102166 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8101aec:	4602      	mov	r2, r0
 8101aee:	683b      	ldr	r3, [r7, #0]
 8101af0:	4621      	mov	r1, r4
 8101af2:	6878      	ldr	r0, [r7, #4]
 8101af4:	f000 fb43 	bl	810217e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8101af8:	4603      	mov	r3, r0
 8101afa:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8101afc:	6878      	ldr	r0, [r7, #4]
 8101afe:	f000 f825 	bl	8101b4c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8101b02:	4603      	mov	r3, r0
 8101b04:	60fb      	str	r3, [r7, #12]
 8101b06:	f107 020c 	add.w	r2, r7, #12
 8101b0a:	f107 0308 	add.w	r3, r7, #8
 8101b0e:	4611      	mov	r1, r2
 8101b10:	4618      	mov	r0, r3
 8101b12:	f000 f83b 	bl	8101b8c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 8101b16:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8101b18:	2b00      	cmp	r3, #0
 8101b1a:	d10d      	bne.n	8101b38 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x64>
	      || _M_impl._M_key_compare(__k,
 8101b1c:	687c      	ldr	r4, [r7, #4]
					_S_key(__j._M_node))) ? end() : __j;
 8101b1e:	68bb      	ldr	r3, [r7, #8]
	      || _M_impl._M_key_compare(__k,
 8101b20:	4618      	mov	r0, r3
 8101b22:	f000 fb5d 	bl	81021e0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8101b26:	4603      	mov	r3, r0
 8101b28:	461a      	mov	r2, r3
 8101b2a:	6839      	ldr	r1, [r7, #0]
 8101b2c:	4620      	mov	r0, r4
 8101b2e:	f000 f85c 	bl	8101bea <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8101b32:	4603      	mov	r3, r0
 8101b34:	2b00      	cmp	r3, #0
 8101b36:	d004      	beq.n	8101b42 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8101b38:	6878      	ldr	r0, [r7, #4]
 8101b3a:	f000 f807 	bl	8101b4c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8101b3e:	4603      	mov	r3, r0
 8101b40:	e000      	b.n	8101b44 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x70>
 8101b42:	68bb      	ldr	r3, [r7, #8]
    }
 8101b44:	4618      	mov	r0, r3
 8101b46:	3714      	adds	r7, #20
 8101b48:	46bd      	mov	sp, r7
 8101b4a:	bd90      	pop	{r4, r7, pc}

08101b4c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8101b4c:	b580      	push	{r7, lr}
 8101b4e:	b084      	sub	sp, #16
 8101b50:	af00      	add	r7, sp, #0
 8101b52:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8101b54:	687b      	ldr	r3, [r7, #4]
 8101b56:	1d1a      	adds	r2, r3, #4
 8101b58:	f107 030c 	add.w	r3, r7, #12
 8101b5c:	4611      	mov	r1, r2
 8101b5e:	4618      	mov	r0, r3
 8101b60:	f000 f9f6 	bl	8101f50 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8101b64:	68fb      	ldr	r3, [r7, #12]
 8101b66:	4618      	mov	r0, r3
 8101b68:	3710      	adds	r7, #16
 8101b6a:	46bd      	mov	sp, r7
 8101b6c:	bd80      	pop	{r7, pc}

08101b6e <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 8101b6e:	b580      	push	{r7, lr}
 8101b70:	b082      	sub	sp, #8
 8101b72:	af00      	add	r7, sp, #0
 8101b74:	6078      	str	r0, [r7, #4]
 8101b76:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8101b78:	687b      	ldr	r3, [r7, #4]
 8101b7a:	6839      	ldr	r1, [r7, #0]
 8101b7c:	4618      	mov	r0, r3
 8101b7e:	f000 fb3b 	bl	81021f8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 8101b82:	4603      	mov	r3, r0
 8101b84:	4618      	mov	r0, r3
 8101b86:	3708      	adds	r7, #8
 8101b88:	46bd      	mov	sp, r7
 8101b8a:	bd80      	pop	{r7, pc}

08101b8c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8101b8c:	b480      	push	{r7}
 8101b8e:	b083      	sub	sp, #12
 8101b90:	af00      	add	r7, sp, #0
 8101b92:	6078      	str	r0, [r7, #4]
 8101b94:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8101b96:	687b      	ldr	r3, [r7, #4]
 8101b98:	681a      	ldr	r2, [r3, #0]
 8101b9a:	683b      	ldr	r3, [r7, #0]
 8101b9c:	681b      	ldr	r3, [r3, #0]
 8101b9e:	429a      	cmp	r2, r3
 8101ba0:	bf0c      	ite	eq
 8101ba2:	2301      	moveq	r3, #1
 8101ba4:	2300      	movne	r3, #0
 8101ba6:	b2db      	uxtb	r3, r3
 8101ba8:	4618      	mov	r0, r3
 8101baa:	370c      	adds	r7, #12
 8101bac:	46bd      	mov	sp, r7
 8101bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bb2:	4770      	bx	lr

08101bb4 <_ZNKSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8101bb4:	b590      	push	{r4, r7, lr}
 8101bb6:	b083      	sub	sp, #12
 8101bb8:	af00      	add	r7, sp, #0
 8101bba:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8101bbc:	687b      	ldr	r3, [r7, #4]
 8101bbe:	4618      	mov	r0, r3
 8101bc0:	f000 fb31 	bl	8102226 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8101bc4:	bf00      	nop
 8101bc6:	4620      	mov	r0, r4
 8101bc8:	370c      	adds	r7, #12
 8101bca:	46bd      	mov	sp, r7
 8101bcc:	bd90      	pop	{r4, r7, pc}

08101bce <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8101bce:	b580      	push	{r7, lr}
 8101bd0:	b082      	sub	sp, #8
 8101bd2:	af00      	add	r7, sp, #0
 8101bd4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8101bd6:	687b      	ldr	r3, [r7, #4]
 8101bd8:	681b      	ldr	r3, [r3, #0]
 8101bda:	4618      	mov	r0, r3
 8101bdc:	f000 fb2e 	bl	810223c <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 8101be0:	4603      	mov	r3, r0
 8101be2:	4618      	mov	r0, r3
 8101be4:	3708      	adds	r7, #8
 8101be6:	46bd      	mov	sp, r7
 8101be8:	bd80      	pop	{r7, pc}

08101bea <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8101bea:	b480      	push	{r7}
 8101bec:	b085      	sub	sp, #20
 8101bee:	af00      	add	r7, sp, #0
 8101bf0:	60f8      	str	r0, [r7, #12]
 8101bf2:	60b9      	str	r1, [r7, #8]
 8101bf4:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8101bf6:	68bb      	ldr	r3, [r7, #8]
 8101bf8:	781a      	ldrb	r2, [r3, #0]
 8101bfa:	687b      	ldr	r3, [r7, #4]
 8101bfc:	781b      	ldrb	r3, [r3, #0]
 8101bfe:	429a      	cmp	r2, r3
 8101c00:	bf34      	ite	cc
 8101c02:	2301      	movcc	r3, #1
 8101c04:	2300      	movcs	r3, #0
 8101c06:	b2db      	uxtb	r3, r3
 8101c08:	4618      	mov	r0, r3
 8101c0a:	3714      	adds	r7, #20
 8101c0c:	46bd      	mov	sp, r7
 8101c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c12:	4770      	bx	lr

08101c14 <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1ILb1ELb1EEES3_>:
	: _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
	constexpr
	tuple(const _Elements&... __elements)
 8101c14:	b580      	push	{r7, lr}
 8101c16:	b082      	sub	sp, #8
 8101c18:	af00      	add	r7, sp, #0
 8101c1a:	6078      	str	r0, [r7, #4]
 8101c1c:	6039      	str	r1, [r7, #0]
	noexcept(__nothrow_constructible<const _Elements&...>())
	: _Inherited(__elements...) { }
 8101c1e:	687b      	ldr	r3, [r7, #4]
 8101c20:	6839      	ldr	r1, [r7, #0]
 8101c22:	4618      	mov	r0, r3
 8101c24:	f000 fb18 	bl	8102258 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1ES3_>
 8101c28:	687b      	ldr	r3, [r7, #4]
 8101c2a:	4618      	mov	r0, r3
 8101c2c:	3708      	adds	r7, #8
 8101c2e:	46bd      	mov	sp, r7
 8101c30:	bd80      	pop	{r7, pc}

08101c32 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8101c32:	b480      	push	{r7}
 8101c34:	b083      	sub	sp, #12
 8101c36:	af00      	add	r7, sp, #0
 8101c38:	6078      	str	r0, [r7, #4]
 8101c3a:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8101c3c:	683b      	ldr	r3, [r7, #0]
 8101c3e:	681a      	ldr	r2, [r3, #0]
 8101c40:	687b      	ldr	r3, [r7, #4]
 8101c42:	601a      	str	r2, [r3, #0]
 8101c44:	687b      	ldr	r3, [r7, #4]
 8101c46:	4618      	mov	r0, r3
 8101c48:	370c      	adds	r7, #12
 8101c4a:	46bd      	mov	sp, r7
 8101c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c50:	4770      	bx	lr

08101c52 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8101c52:	b5b0      	push	{r4, r5, r7, lr}
 8101c54:	b08c      	sub	sp, #48	@ 0x30
 8101c56:	af02      	add	r7, sp, #8
 8101c58:	60f8      	str	r0, [r7, #12]
 8101c5a:	60b9      	str	r1, [r7, #8]
 8101c5c:	607a      	str	r2, [r7, #4]
 8101c5e:	603b      	str	r3, [r7, #0]
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
 8101c60:	6878      	ldr	r0, [r7, #4]
 8101c62:	f000 fb08 	bl	8102276 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8101c66:	4604      	mov	r4, r0
 8101c68:	6838      	ldr	r0, [r7, #0]
 8101c6a:	f000 fb0f 	bl	810228c <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8101c6e:	4605      	mov	r5, r0
 8101c70:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8101c72:	f000 fb16 	bl	81022a2 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8101c76:	4603      	mov	r3, r0
 8101c78:	f107 001c 	add.w	r0, r7, #28
 8101c7c:	9300      	str	r3, [sp, #0]
 8101c7e:	462b      	mov	r3, r5
 8101c80:	4622      	mov	r2, r4
 8101c82:	68f9      	ldr	r1, [r7, #12]
 8101c84:	f000 fb18 	bl	81022b8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEERSC_DpOT_>
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
 8101c88:	f107 031c 	add.w	r3, r7, #28
 8101c8c:	4618      	mov	r0, r3
 8101c8e:	f000 f91f 	bl	8101ed0 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>
 8101c92:	4603      	mov	r3, r0
 8101c94:	f107 0014 	add.w	r0, r7, #20
 8101c98:	68ba      	ldr	r2, [r7, #8]
 8101c9a:	68f9      	ldr	r1, [r7, #12]
 8101c9c:	f000 fb2f 	bl	81022fe <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	if (__res.second)
 8101ca0:	69bb      	ldr	r3, [r7, #24]
 8101ca2:	2b00      	cmp	r3, #0
 8101ca4:	d009      	beq.n	8101cba <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x68>
	  return __z._M_insert(__res);
 8101ca6:	f107 001c 	add.w	r0, r7, #28
 8101caa:	f107 0314 	add.w	r3, r7, #20
 8101cae:	e893 0006 	ldmia.w	r3, {r1, r2}
 8101cb2:	f000 f91b 	bl	8101eec <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>
 8101cb6:	4604      	mov	r4, r0
 8101cb8:	e007      	b.n	8101cca <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x78>
	return iterator(__res.first);
 8101cba:	697a      	ldr	r2, [r7, #20]
 8101cbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8101cc0:	4611      	mov	r1, r2
 8101cc2:	4618      	mov	r0, r3
 8101cc4:	f000 f944 	bl	8101f50 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8101cc8:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
      }
 8101cca:	f107 031c 	add.w	r3, r7, #28
 8101cce:	4618      	mov	r0, r3
 8101cd0:	f000 f864 	bl	8101d9c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>
 8101cd4:	4623      	mov	r3, r4
 8101cd6:	4618      	mov	r0, r3
 8101cd8:	3728      	adds	r7, #40	@ 0x28
 8101cda:	46bd      	mov	sp, r7
 8101cdc:	bdb0      	pop	{r4, r5, r7, pc}

08101cde <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8101cde:	b480      	push	{r7}
 8101ce0:	b083      	sub	sp, #12
 8101ce2:	af00      	add	r7, sp, #0
 8101ce4:	6078      	str	r0, [r7, #4]
 8101ce6:	687b      	ldr	r3, [r7, #4]
 8101ce8:	4618      	mov	r0, r3
 8101cea:	370c      	adds	r7, #12
 8101cec:	46bd      	mov	sp, r7
 8101cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cf2:	4770      	bx	lr

08101cf4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8101cf4:	b480      	push	{r7}
 8101cf6:	b083      	sub	sp, #12
 8101cf8:	af00      	add	r7, sp, #0
 8101cfa:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8101cfc:	687b      	ldr	r3, [r7, #4]
 8101cfe:	68db      	ldr	r3, [r3, #12]
 8101d00:	4618      	mov	r0, r3
 8101d02:	370c      	adds	r7, #12
 8101d04:	46bd      	mov	sp, r7
 8101d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d0a:	4770      	bx	lr

08101d0c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8101d0c:	b480      	push	{r7}
 8101d0e:	b083      	sub	sp, #12
 8101d10:	af00      	add	r7, sp, #0
 8101d12:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8101d14:	687b      	ldr	r3, [r7, #4]
 8101d16:	689b      	ldr	r3, [r3, #8]
 8101d18:	4618      	mov	r0, r3
 8101d1a:	370c      	adds	r7, #12
 8101d1c:	46bd      	mov	sp, r7
 8101d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d22:	4770      	bx	lr

08101d24 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8101d24:	b580      	push	{r7, lr}
 8101d26:	b082      	sub	sp, #8
 8101d28:	af00      	add	r7, sp, #0
 8101d2a:	6078      	str	r0, [r7, #4]
 8101d2c:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8101d2e:	6839      	ldr	r1, [r7, #0]
 8101d30:	6878      	ldr	r0, [r7, #4]
 8101d32:	f000 fc07 	bl	8102544 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8101d36:	6839      	ldr	r1, [r7, #0]
 8101d38:	6878      	ldr	r0, [r7, #4]
 8101d3a:	f000 fc18 	bl	810256e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8101d3e:	bf00      	nop
 8101d40:	3708      	adds	r7, #8
 8101d42:	46bd      	mov	sp, r7
 8101d44:	bd80      	pop	{r7, pc}

08101d46 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE9_M_mbeginEv>:
      _M_mbegin() const _GLIBCXX_NOEXCEPT
 8101d46:	b480      	push	{r7}
 8101d48:	b083      	sub	sp, #12
 8101d4a:	af00      	add	r7, sp, #0
 8101d4c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8101d4e:	687b      	ldr	r3, [r7, #4]
 8101d50:	689b      	ldr	r3, [r3, #8]
 8101d52:	4618      	mov	r0, r3
 8101d54:	370c      	adds	r7, #12
 8101d56:	46bd      	mov	sp, r7
 8101d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d5c:	4770      	bx	lr

08101d5e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRS1_RS5_EEERSC_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
 8101d5e:	b590      	push	{r4, r7, lr}
 8101d60:	b085      	sub	sp, #20
 8101d62:	af00      	add	r7, sp, #0
 8101d64:	60f8      	str	r0, [r7, #12]
 8101d66:	60b9      	str	r1, [r7, #8]
 8101d68:	607a      	str	r2, [r7, #4]
 8101d6a:	603b      	str	r3, [r7, #0]
	  : _M_t(__t),
 8101d6c:	68fb      	ldr	r3, [r7, #12]
 8101d6e:	68ba      	ldr	r2, [r7, #8]
 8101d70:	601a      	str	r2, [r3, #0]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 8101d72:	6878      	ldr	r0, [r7, #4]
 8101d74:	f7ff fcc5 	bl	8101702 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8101d78:	4604      	mov	r4, r0
 8101d7a:	6838      	ldr	r0, [r7, #0]
 8101d7c:	f7ff fccc 	bl	8101718 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8101d80:	4603      	mov	r3, r0
 8101d82:	461a      	mov	r2, r3
 8101d84:	4621      	mov	r1, r4
 8101d86:	68b8      	ldr	r0, [r7, #8]
 8101d88:	f000 fc03 	bl	8102592 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRS1_RS5_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8101d8c:	4602      	mov	r2, r0
 8101d8e:	68fb      	ldr	r3, [r7, #12]
 8101d90:	605a      	str	r2, [r3, #4]
	  { }
 8101d92:	68fb      	ldr	r3, [r7, #12]
 8101d94:	4618      	mov	r0, r3
 8101d96:	3714      	adds	r7, #20
 8101d98:	46bd      	mov	sp, r7
 8101d9a:	bd90      	pop	{r4, r7, pc}

08101d9c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>:
	~_Auto_node()
 8101d9c:	b580      	push	{r7, lr}
 8101d9e:	b082      	sub	sp, #8
 8101da0:	af00      	add	r7, sp, #0
 8101da2:	6078      	str	r0, [r7, #4]
	  if (_M_node)
 8101da4:	687b      	ldr	r3, [r7, #4]
 8101da6:	685b      	ldr	r3, [r3, #4]
 8101da8:	2b00      	cmp	r3, #0
 8101daa:	d007      	beq.n	8101dbc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev+0x20>
	    _M_t._M_drop_node(_M_node);
 8101dac:	687b      	ldr	r3, [r7, #4]
 8101dae:	681a      	ldr	r2, [r3, #0]
 8101db0:	687b      	ldr	r3, [r7, #4]
 8101db2:	685b      	ldr	r3, [r3, #4]
 8101db4:	4619      	mov	r1, r3
 8101db6:	4610      	mov	r0, r2
 8101db8:	f7ff ffb4 	bl	8101d24 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	}
 8101dbc:	687b      	ldr	r3, [r7, #4]
 8101dbe:	4618      	mov	r0, r3
 8101dc0:	3708      	adds	r7, #8
 8101dc2:	46bd      	mov	sp, r7
 8101dc4:	bd80      	pop	{r7, pc}

08101dc6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8101dc6:	b590      	push	{r4, r7, lr}
 8101dc8:	b08b      	sub	sp, #44	@ 0x2c
 8101dca:	af00      	add	r7, sp, #0
 8101dcc:	60f8      	str	r0, [r7, #12]
 8101dce:	60b9      	str	r1, [r7, #8]
 8101dd0:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8101dd2:	68b8      	ldr	r0, [r7, #8]
 8101dd4:	f7ff fc89 	bl	81016ea <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8101dd8:	4603      	mov	r3, r0
 8101dda:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8101ddc:	68b8      	ldr	r0, [r7, #8]
 8101dde:	f000 f9c2 	bl	8102166 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8101de2:	4603      	mov	r3, r0
 8101de4:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8101de6:	2301      	movs	r3, #1
 8101de8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      while (__x != 0)
 8101dec:	e01f      	b.n	8101e2e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x68>
	  __y = __x;
 8101dee:	69bb      	ldr	r3, [r7, #24]
 8101df0:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8101df2:	68bc      	ldr	r4, [r7, #8]
 8101df4:	69bb      	ldr	r3, [r7, #24]
 8101df6:	4618      	mov	r0, r3
 8101df8:	f000 fbe7 	bl	81025ca <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8101dfc:	4603      	mov	r3, r0
 8101dfe:	461a      	mov	r2, r3
 8101e00:	6879      	ldr	r1, [r7, #4]
 8101e02:	4620      	mov	r0, r4
 8101e04:	f7ff fef1 	bl	8101bea <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8101e08:	4603      	mov	r3, r0
 8101e0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8101e0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101e12:	2b00      	cmp	r3, #0
 8101e14:	d005      	beq.n	8101e22 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x5c>
 8101e16:	69bb      	ldr	r3, [r7, #24]
 8101e18:	4618      	mov	r0, r3
 8101e1a:	f7ff ff77 	bl	8101d0c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8101e1e:	4603      	mov	r3, r0
 8101e20:	e004      	b.n	8101e2c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 8101e22:	69bb      	ldr	r3, [r7, #24]
 8101e24:	4618      	mov	r0, r3
 8101e26:	f7ff ff65 	bl	8101cf4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8101e2a:	4603      	mov	r3, r0
 8101e2c:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8101e2e:	69bb      	ldr	r3, [r7, #24]
 8101e30:	2b00      	cmp	r3, #0
 8101e32:	d1dc      	bne.n	8101dee <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x28>
      iterator __j = iterator(__y);
 8101e34:	697a      	ldr	r2, [r7, #20]
 8101e36:	f107 0310 	add.w	r3, r7, #16
 8101e3a:	4611      	mov	r1, r2
 8101e3c:	4618      	mov	r0, r3
 8101e3e:	f000 f887 	bl	8101f50 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8101e42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101e46:	2b00      	cmp	r3, #0
 8101e48:	d01d      	beq.n	8101e86 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc0>
	  if (__j == begin())
 8101e4a:	68b8      	ldr	r0, [r7, #8]
 8101e4c:	f000 fbd0 	bl	81025f0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 8101e50:	4603      	mov	r3, r0
 8101e52:	61fb      	str	r3, [r7, #28]
 8101e54:	f107 021c 	add.w	r2, r7, #28
 8101e58:	f107 0310 	add.w	r3, r7, #16
 8101e5c:	4611      	mov	r1, r2
 8101e5e:	4618      	mov	r0, r3
 8101e60:	f7ff fe94 	bl	8101b8c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 8101e64:	4603      	mov	r3, r0
 8101e66:	2b00      	cmp	r3, #0
 8101e68:	d008      	beq.n	8101e7c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xb6>
	    return _Res(__x, __y);
 8101e6a:	f107 0214 	add.w	r2, r7, #20
 8101e6e:	f107 0318 	add.w	r3, r7, #24
 8101e72:	4619      	mov	r1, r3
 8101e74:	68f8      	ldr	r0, [r7, #12]
 8101e76:	f000 fbcc 	bl	8102612 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEERS1_Lb1EEEOT_OT0_>
 8101e7a:	e025      	b.n	8101ec8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
	    --__j;
 8101e7c:	f107 0310 	add.w	r3, r7, #16
 8101e80:	4618      	mov	r0, r3
 8101e82:	f000 fbdf 	bl	8102644 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8101e86:	68bc      	ldr	r4, [r7, #8]
 8101e88:	693b      	ldr	r3, [r7, #16]
 8101e8a:	4618      	mov	r0, r3
 8101e8c:	f000 f9a8 	bl	81021e0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8101e90:	4603      	mov	r3, r0
 8101e92:	687a      	ldr	r2, [r7, #4]
 8101e94:	4619      	mov	r1, r3
 8101e96:	4620      	mov	r0, r4
 8101e98:	f7ff fea7 	bl	8101bea <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8101e9c:	4603      	mov	r3, r0
 8101e9e:	2b00      	cmp	r3, #0
 8101ea0:	d008      	beq.n	8101eb4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xee>
	return _Res(__x, __y);
 8101ea2:	f107 0214 	add.w	r2, r7, #20
 8101ea6:	f107 0318 	add.w	r3, r7, #24
 8101eaa:	4619      	mov	r1, r3
 8101eac:	68f8      	ldr	r0, [r7, #12]
 8101eae:	f000 fbb0 	bl	8102612 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEERS1_Lb1EEEOT_OT0_>
 8101eb2:	e009      	b.n	8101ec8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
      return _Res(__j._M_node, 0);
 8101eb4:	2300      	movs	r3, #0
 8101eb6:	623b      	str	r3, [r7, #32]
 8101eb8:	f107 0220 	add.w	r2, r7, #32
 8101ebc:	f107 0310 	add.w	r3, r7, #16
 8101ec0:	4619      	mov	r1, r3
 8101ec2:	68f8      	ldr	r0, [r7, #12]
 8101ec4:	f000 fbcf 	bl	8102666 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8101ec8:	68f8      	ldr	r0, [r7, #12]
 8101eca:	372c      	adds	r7, #44	@ 0x2c
 8101ecc:	46bd      	mov	sp, r7
 8101ece:	bd90      	pop	{r4, r7, pc}

08101ed0 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>:
	_M_key() const
 8101ed0:	b580      	push	{r7, lr}
 8101ed2:	b082      	sub	sp, #8
 8101ed4:	af00      	add	r7, sp, #0
 8101ed6:	6078      	str	r0, [r7, #4]
	{ return _S_key(_M_node); }
 8101ed8:	687b      	ldr	r3, [r7, #4]
 8101eda:	685b      	ldr	r3, [r3, #4]
 8101edc:	4618      	mov	r0, r3
 8101ede:	f000 fb74 	bl	81025ca <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8101ee2:	4603      	mov	r3, r0
 8101ee4:	4618      	mov	r0, r3
 8101ee6:	3708      	adds	r7, #8
 8101ee8:	46bd      	mov	sp, r7
 8101eea:	bd80      	pop	{r7, pc}

08101eec <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>:
	_M_insert(pair<_Base_ptr, _Base_ptr> __p)
 8101eec:	b580      	push	{r7, lr}
 8101eee:	b086      	sub	sp, #24
 8101ef0:	af00      	add	r7, sp, #0
 8101ef2:	60f8      	str	r0, [r7, #12]
 8101ef4:	1d3b      	adds	r3, r7, #4
 8101ef6:	e883 0006 	stmia.w	r3, {r1, r2}
	  auto __it = _M_t._M_insert_node(__p.first, __p.second, _M_node);
 8101efa:	68fb      	ldr	r3, [r7, #12]
 8101efc:	6818      	ldr	r0, [r3, #0]
 8101efe:	6879      	ldr	r1, [r7, #4]
 8101f00:	68ba      	ldr	r2, [r7, #8]
 8101f02:	68fb      	ldr	r3, [r7, #12]
 8101f04:	685b      	ldr	r3, [r3, #4]
 8101f06:	f000 fbc3 	bl	8102690 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8101f0a:	4603      	mov	r3, r0
 8101f0c:	617b      	str	r3, [r7, #20]
	  _M_node = nullptr;
 8101f0e:	68fb      	ldr	r3, [r7, #12]
 8101f10:	2200      	movs	r2, #0
 8101f12:	605a      	str	r2, [r3, #4]
	  return __it;
 8101f14:	697b      	ldr	r3, [r7, #20]
	}
 8101f16:	4618      	mov	r0, r3
 8101f18:	3718      	adds	r7, #24
 8101f1a:	46bd      	mov	sp, r7
 8101f1c:	bd80      	pop	{r7, pc}

08101f1e <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEbEC1IS7_bLb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 8101f1e:	b580      	push	{r7, lr}
 8101f20:	b084      	sub	sp, #16
 8101f22:	af00      	add	r7, sp, #0
 8101f24:	60f8      	str	r0, [r7, #12]
 8101f26:	60b9      	str	r1, [r7, #8]
 8101f28:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8101f2a:	68b8      	ldr	r0, [r7, #8]
 8101f2c:	f000 fbed 	bl	810270a <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8101f30:	4602      	mov	r2, r0
 8101f32:	68fb      	ldr	r3, [r7, #12]
 8101f34:	6812      	ldr	r2, [r2, #0]
 8101f36:	601a      	str	r2, [r3, #0]
 8101f38:	6878      	ldr	r0, [r7, #4]
 8101f3a:	f000 fbf1 	bl	8102720 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8101f3e:	4603      	mov	r3, r0
 8101f40:	781a      	ldrb	r2, [r3, #0]
 8101f42:	68fb      	ldr	r3, [r7, #12]
 8101f44:	711a      	strb	r2, [r3, #4]
 8101f46:	68fb      	ldr	r3, [r7, #12]
 8101f48:	4618      	mov	r0, r3
 8101f4a:	3710      	adds	r7, #16
 8101f4c:	46bd      	mov	sp, r7
 8101f4e:	bd80      	pop	{r7, pc}

08101f50 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8101f50:	b480      	push	{r7}
 8101f52:	b083      	sub	sp, #12
 8101f54:	af00      	add	r7, sp, #0
 8101f56:	6078      	str	r0, [r7, #4]
 8101f58:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8101f5a:	687b      	ldr	r3, [r7, #4]
 8101f5c:	683a      	ldr	r2, [r7, #0]
 8101f5e:	601a      	str	r2, [r3, #0]
 8101f60:	687b      	ldr	r3, [r7, #4]
 8101f62:	4618      	mov	r0, r3
 8101f64:	370c      	adds	r7, #12
 8101f66:	46bd      	mov	sp, r7
 8101f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f6c:	4770      	bx	lr

08101f6e <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8101f6e:	b480      	push	{r7}
 8101f70:	b083      	sub	sp, #12
 8101f72:	af00      	add	r7, sp, #0
 8101f74:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8101f76:	687b      	ldr	r3, [r7, #4]
 8101f78:	695b      	ldr	r3, [r3, #20]
 8101f7a:	4618      	mov	r0, r3
 8101f7c:	370c      	adds	r7, #12
 8101f7e:	46bd      	mov	sp, r7
 8101f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f84:	4770      	bx	lr

08101f86 <_ZSt8_DestroyIP8SMessageEvT_S2_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8101f86:	b580      	push	{r7, lr}
 8101f88:	b082      	sub	sp, #8
 8101f8a:	af00      	add	r7, sp, #0
 8101f8c:	6078      	str	r0, [r7, #4]
 8101f8e:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8101f90:	6839      	ldr	r1, [r7, #0]
 8101f92:	6878      	ldr	r0, [r7, #4]
 8101f94:	f000 fbcf 	bl	8102736 <_ZNSt12_Destroy_auxILb1EE9__destroyIP8SMessageEEvT_S4_>
    }
 8101f98:	bf00      	nop
 8101f9a:	3708      	adds	r7, #8
 8101f9c:	46bd      	mov	sp, r7
 8101f9e:	bd80      	pop	{r7, pc}

08101fa0 <_ZNSt15__new_allocatorI8SMessageEC1Ev>:
 8101fa0:	b480      	push	{r7}
 8101fa2:	b083      	sub	sp, #12
 8101fa4:	af00      	add	r7, sp, #0
 8101fa6:	6078      	str	r0, [r7, #4]
 8101fa8:	687b      	ldr	r3, [r7, #4]
 8101faa:	4618      	mov	r0, r3
 8101fac:	370c      	adds	r7, #12
 8101fae:	46bd      	mov	sp, r7
 8101fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fb4:	4770      	bx	lr

08101fb6 <_ZNSt16allocator_traitsISaI8SMessageEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8101fb6:	b580      	push	{r7, lr}
 8101fb8:	b084      	sub	sp, #16
 8101fba:	af00      	add	r7, sp, #0
 8101fbc:	60f8      	str	r0, [r7, #12]
 8101fbe:	60b9      	str	r1, [r7, #8]
 8101fc0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8101fc2:	687a      	ldr	r2, [r7, #4]
 8101fc4:	68b9      	ldr	r1, [r7, #8]
 8101fc6:	68f8      	ldr	r0, [r7, #12]
 8101fc8:	f000 fbc0 	bl	810274c <_ZNSt15__new_allocatorI8SMessageE10deallocateEPS0_j>
 8101fcc:	bf00      	nop
 8101fce:	3710      	adds	r7, #16
 8101fd0:	46bd      	mov	sp, r7
 8101fd2:	bd80      	pop	{r7, pc}

08101fd4 <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8101fd4:	b480      	push	{r7}
 8101fd6:	b083      	sub	sp, #12
 8101fd8:	af00      	add	r7, sp, #0
 8101fda:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8101fdc:	687b      	ldr	r3, [r7, #4]
 8101fde:	4618      	mov	r0, r3
 8101fe0:	370c      	adds	r7, #12
 8101fe2:	46bd      	mov	sp, r7
 8101fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fe8:	4770      	bx	lr

08101fea <_ZNSt15__new_allocatorI8SMessageE9constructIS0_JRKS0_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8101fea:	b5b0      	push	{r4, r5, r7, lr}
 8101fec:	b084      	sub	sp, #16
 8101fee:	af00      	add	r7, sp, #0
 8101ff0:	60f8      	str	r0, [r7, #12]
 8101ff2:	60b9      	str	r1, [r7, #8]
 8101ff4:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8101ff6:	68bb      	ldr	r3, [r7, #8]
 8101ff8:	4619      	mov	r1, r3
 8101ffa:	2018      	movs	r0, #24
 8101ffc:	f7fe fc76 	bl	81008ec <_ZnwjPv>
 8102000:	4604      	mov	r4, r0
 8102002:	6878      	ldr	r0, [r7, #4]
 8102004:	f7ff ffe6 	bl	8101fd4 <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>
 8102008:	4603      	mov	r3, r0
 810200a:	461d      	mov	r5, r3
 810200c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810200e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8102010:	e895 0003 	ldmia.w	r5, {r0, r1}
 8102014:	e884 0003 	stmia.w	r4, {r0, r1}
 8102018:	bf00      	nop
 810201a:	3710      	adds	r7, #16
 810201c:	46bd      	mov	sp, r7
 810201e:	bdb0      	pop	{r4, r5, r7, pc}

08102020 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8102020:	b590      	push	{r4, r7, lr}
 8102022:	b087      	sub	sp, #28
 8102024:	af00      	add	r7, sp, #0
 8102026:	60f8      	str	r0, [r7, #12]
 8102028:	60b9      	str	r1, [r7, #8]
 810202a:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 810202c:	68f8      	ldr	r0, [r7, #12]
 810202e:	f000 fba0 	bl	8102772 <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>
 8102032:	4604      	mov	r4, r0
 8102034:	68f8      	ldr	r0, [r7, #12]
 8102036:	f7ff f9f3 	bl	8101420 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 810203a:	4603      	mov	r3, r0
 810203c:	1ae2      	subs	r2, r4, r3
 810203e:	68bb      	ldr	r3, [r7, #8]
 8102040:	429a      	cmp	r2, r3
 8102042:	bf34      	ite	cc
 8102044:	2301      	movcc	r3, #1
 8102046:	2300      	movcs	r3, #0
 8102048:	b2db      	uxtb	r3, r3
 810204a:	2b00      	cmp	r3, #0
 810204c:	d002      	beq.n	8102054 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 810204e:	6878      	ldr	r0, [r7, #4]
 8102050:	f005 fca2 	bl	8107998 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8102054:	68f8      	ldr	r0, [r7, #12]
 8102056:	f7ff f9e3 	bl	8101420 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 810205a:	4604      	mov	r4, r0
 810205c:	68f8      	ldr	r0, [r7, #12]
 810205e:	f7ff f9df 	bl	8101420 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 8102062:	4603      	mov	r3, r0
 8102064:	613b      	str	r3, [r7, #16]
 8102066:	f107 0208 	add.w	r2, r7, #8
 810206a:	f107 0310 	add.w	r3, r7, #16
 810206e:	4611      	mov	r1, r2
 8102070:	4618      	mov	r0, r3
 8102072:	f000 fb8f 	bl	8102794 <_ZSt3maxIjERKT_S2_S2_>
 8102076:	4603      	mov	r3, r0
 8102078:	681b      	ldr	r3, [r3, #0]
 810207a:	4423      	add	r3, r4
 810207c:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 810207e:	68f8      	ldr	r0, [r7, #12]
 8102080:	f7ff f9ce 	bl	8101420 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 8102084:	4602      	mov	r2, r0
 8102086:	697b      	ldr	r3, [r7, #20]
 8102088:	4293      	cmp	r3, r2
 810208a:	d306      	bcc.n	810209a <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x7a>
 810208c:	68f8      	ldr	r0, [r7, #12]
 810208e:	f000 fb70 	bl	8102772 <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>
 8102092:	4602      	mov	r2, r0
 8102094:	697b      	ldr	r3, [r7, #20]
 8102096:	4293      	cmp	r3, r2
 8102098:	d904      	bls.n	81020a4 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x84>
 810209a:	68f8      	ldr	r0, [r7, #12]
 810209c:	f000 fb69 	bl	8102772 <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>
 81020a0:	4603      	mov	r3, r0
 81020a2:	e000      	b.n	81020a6 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x86>
 81020a4:	697b      	ldr	r3, [r7, #20]
      }
 81020a6:	4618      	mov	r0, r3
 81020a8:	371c      	adds	r7, #28
 81020aa:	46bd      	mov	sp, r7
 81020ac:	bd90      	pop	{r4, r7, pc}
	...

081020b0 <_ZN9__gnu_cxxmiIP8SMessageSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 81020b0:	b590      	push	{r4, r7, lr}
 81020b2:	b083      	sub	sp, #12
 81020b4:	af00      	add	r7, sp, #0
 81020b6:	6078      	str	r0, [r7, #4]
 81020b8:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 81020ba:	6878      	ldr	r0, [r7, #4]
 81020bc:	f7ff fce4 	bl	8101a88 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 81020c0:	4603      	mov	r3, r0
 81020c2:	681c      	ldr	r4, [r3, #0]
 81020c4:	6838      	ldr	r0, [r7, #0]
 81020c6:	f7ff fcdf 	bl	8101a88 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 81020ca:	4603      	mov	r3, r0
 81020cc:	681b      	ldr	r3, [r3, #0]
 81020ce:	1ae3      	subs	r3, r4, r3
 81020d0:	10db      	asrs	r3, r3, #3
 81020d2:	4a03      	ldr	r2, [pc, #12]	@ (81020e0 <_ZN9__gnu_cxxmiIP8SMessageSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_+0x30>)
 81020d4:	fb02 f303 	mul.w	r3, r2, r3
 81020d8:	4618      	mov	r0, r3
 81020da:	370c      	adds	r7, #12
 81020dc:	46bd      	mov	sp, r7
 81020de:	bd90      	pop	{r4, r7, pc}
 81020e0:	aaaaaaab 	.word	0xaaaaaaab

081020e4 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 81020e4:	b580      	push	{r7, lr}
 81020e6:	b082      	sub	sp, #8
 81020e8:	af00      	add	r7, sp, #0
 81020ea:	6078      	str	r0, [r7, #4]
 81020ec:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 81020ee:	683b      	ldr	r3, [r7, #0]
 81020f0:	2b00      	cmp	r3, #0
 81020f2:	d006      	beq.n	8102102 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj+0x1e>
 81020f4:	687b      	ldr	r3, [r7, #4]
 81020f6:	6839      	ldr	r1, [r7, #0]
 81020f8:	4618      	mov	r0, r3
 81020fa:	f000 fb5f 	bl	81027bc <_ZNSt16allocator_traitsISaI8SMessageEE8allocateERS1_j>
 81020fe:	4603      	mov	r3, r0
 8102100:	e000      	b.n	8102104 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj+0x20>
 8102102:	2300      	movs	r3, #0
      }
 8102104:	4618      	mov	r0, r3
 8102106:	3708      	adds	r7, #8
 8102108:	46bd      	mov	sp, r7
 810210a:	bd80      	pop	{r7, pc}

0810210c <_ZNSt6vectorI8SMessageSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 810210c:	b590      	push	{r4, r7, lr}
 810210e:	b087      	sub	sp, #28
 8102110:	af02      	add	r7, sp, #8
 8102112:	60f8      	str	r0, [r7, #12]
 8102114:	60b9      	str	r1, [r7, #8]
 8102116:	607a      	str	r2, [r7, #4]
 8102118:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 810211a:	f88d 4000 	strb.w	r4, [sp]
 810211e:	683b      	ldr	r3, [r7, #0]
 8102120:	687a      	ldr	r2, [r7, #4]
 8102122:	68b9      	ldr	r1, [r7, #8]
 8102124:	68f8      	ldr	r0, [r7, #12]
 8102126:	f000 fb58 	bl	81027da <_ZNSt6vectorI8SMessageSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 810212a:	4603      	mov	r3, r0
      }
 810212c:	4618      	mov	r0, r3
 810212e:	3714      	adds	r7, #20
 8102130:	46bd      	mov	sp, r7
 8102132:	bd90      	pop	{r4, r7, pc}

08102134 <_ZSt34__uninitialized_move_if_noexcept_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>:

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8102134:	b590      	push	{r4, r7, lr}
 8102136:	b085      	sub	sp, #20
 8102138:	af00      	add	r7, sp, #0
 810213a:	60f8      	str	r0, [r7, #12]
 810213c:	60b9      	str	r1, [r7, #8]
 810213e:	607a      	str	r2, [r7, #4]
 8102140:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8102142:	68f8      	ldr	r0, [r7, #12]
 8102144:	f000 fb5b 	bl	81027fe <_ZSt32__make_move_if_noexcept_iteratorI8SMessageSt13move_iteratorIPS0_EET0_PT_>
 8102148:	4604      	mov	r4, r0
 810214a:	68b8      	ldr	r0, [r7, #8]
 810214c:	f000 fb57 	bl	81027fe <_ZSt32__make_move_if_noexcept_iteratorI8SMessageSt13move_iteratorIPS0_EET0_PT_>
 8102150:	4601      	mov	r1, r0
 8102152:	683b      	ldr	r3, [r7, #0]
 8102154:	687a      	ldr	r2, [r7, #4]
 8102156:	4620      	mov	r0, r4
 8102158:	f000 fb60 	bl	810281c <_ZSt22__uninitialized_copy_aISt13move_iteratorIP8SMessageES2_S1_ET0_T_S5_S4_RSaIT1_E>
 810215c:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 810215e:	4618      	mov	r0, r3
 8102160:	3714      	adds	r7, #20
 8102162:	46bd      	mov	sp, r7
 8102164:	bd90      	pop	{r4, r7, pc}

08102166 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8102166:	b480      	push	{r7}
 8102168:	b083      	sub	sp, #12
 810216a:	af00      	add	r7, sp, #0
 810216c:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 810216e:	687b      	ldr	r3, [r7, #4]
 8102170:	3304      	adds	r3, #4
 8102172:	4618      	mov	r0, r3
 8102174:	370c      	adds	r7, #12
 8102176:	46bd      	mov	sp, r7
 8102178:	f85d 7b04 	ldr.w	r7, [sp], #4
 810217c:	4770      	bx	lr

0810217e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 810217e:	b590      	push	{r4, r7, lr}
 8102180:	b087      	sub	sp, #28
 8102182:	af00      	add	r7, sp, #0
 8102184:	60f8      	str	r0, [r7, #12]
 8102186:	60b9      	str	r1, [r7, #8]
 8102188:	607a      	str	r2, [r7, #4]
 810218a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 810218c:	e01a      	b.n	81021c4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 810218e:	68fc      	ldr	r4, [r7, #12]
 8102190:	68b8      	ldr	r0, [r7, #8]
 8102192:	f000 fa1a 	bl	81025ca <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8102196:	4603      	mov	r3, r0
 8102198:	683a      	ldr	r2, [r7, #0]
 810219a:	4619      	mov	r1, r3
 810219c:	4620      	mov	r0, r4
 810219e:	f7ff fd24 	bl	8101bea <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 81021a2:	4603      	mov	r3, r0
 81021a4:	f083 0301 	eor.w	r3, r3, #1
 81021a8:	b2db      	uxtb	r3, r3
 81021aa:	2b00      	cmp	r3, #0
 81021ac:	d006      	beq.n	81021bc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x3e>
	  __y = __x, __x = _S_left(__x);
 81021ae:	68bb      	ldr	r3, [r7, #8]
 81021b0:	607b      	str	r3, [r7, #4]
 81021b2:	68b8      	ldr	r0, [r7, #8]
 81021b4:	f7ff fdaa 	bl	8101d0c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 81021b8:	60b8      	str	r0, [r7, #8]
 81021ba:	e003      	b.n	81021c4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __x = _S_right(__x);
 81021bc:	68b8      	ldr	r0, [r7, #8]
 81021be:	f7ff fd99 	bl	8101cf4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 81021c2:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 81021c4:	68bb      	ldr	r3, [r7, #8]
 81021c6:	2b00      	cmp	r3, #0
 81021c8:	d1e1      	bne.n	810218e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x10>
      return iterator(__y);
 81021ca:	f107 0314 	add.w	r3, r7, #20
 81021ce:	6879      	ldr	r1, [r7, #4]
 81021d0:	4618      	mov	r0, r3
 81021d2:	f7ff febd 	bl	8101f50 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 81021d6:	697b      	ldr	r3, [r7, #20]
    }
 81021d8:	4618      	mov	r0, r3
 81021da:	371c      	adds	r7, #28
 81021dc:	46bd      	mov	sp, r7
 81021de:	bd90      	pop	{r4, r7, pc}

081021e0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 81021e0:	b580      	push	{r7, lr}
 81021e2:	b082      	sub	sp, #8
 81021e4:	af00      	add	r7, sp, #0
 81021e6:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 81021e8:	6878      	ldr	r0, [r7, #4]
 81021ea:	f000 f9ee 	bl	81025ca <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 81021ee:	4603      	mov	r3, r0
 81021f0:	4618      	mov	r0, r3
 81021f2:	3708      	adds	r7, #8
 81021f4:	46bd      	mov	sp, r7
 81021f6:	bd80      	pop	{r7, pc}

081021f8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 81021f8:	b590      	push	{r4, r7, lr}
 81021fa:	b083      	sub	sp, #12
 81021fc:	af00      	add	r7, sp, #0
 81021fe:	6078      	str	r0, [r7, #4]
 8102200:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8102202:	6878      	ldr	r0, [r7, #4]
 8102204:	f7ff fa71 	bl	81016ea <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8102208:	4604      	mov	r4, r0
 810220a:	6878      	ldr	r0, [r7, #4]
 810220c:	f7ff ffab 	bl	8102166 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8102210:	4602      	mov	r2, r0
 8102212:	683b      	ldr	r3, [r7, #0]
 8102214:	4621      	mov	r1, r4
 8102216:	6878      	ldr	r0, [r7, #4]
 8102218:	f7ff ffb1 	bl	810217e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 810221c:	4603      	mov	r3, r0
 810221e:	4618      	mov	r0, r3
 8102220:	370c      	adds	r7, #12
 8102222:	46bd      	mov	sp, r7
 8102224:	bd90      	pop	{r4, r7, pc}

08102226 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 8102226:	b480      	push	{r7}
 8102228:	b083      	sub	sp, #12
 810222a:	af00      	add	r7, sp, #0
 810222c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 810222e:	bf00      	nop
 8102230:	4618      	mov	r0, r3
 8102232:	370c      	adds	r7, #12
 8102234:	46bd      	mov	sp, r7
 8102236:	f85d 7b04 	ldr.w	r7, [sp], #4
 810223a:	4770      	bx	lr

0810223c <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>:
      _M_valptr()
 810223c:	b580      	push	{r7, lr}
 810223e:	b082      	sub	sp, #8
 8102240:	af00      	add	r7, sp, #0
 8102242:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8102244:	687b      	ldr	r3, [r7, #4]
 8102246:	3310      	adds	r3, #16
 8102248:	4618      	mov	r0, r3
 810224a:	f000 faf8 	bl	810283e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>
 810224e:	4603      	mov	r3, r0
 8102250:	4618      	mov	r0, r3
 8102252:	3708      	adds	r7, #8
 8102254:	46bd      	mov	sp, r7
 8102256:	bd80      	pop	{r7, pc}

08102258 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1ES3_>:
      _Tuple_impl(const _Head& __head)
 8102258:	b580      	push	{r7, lr}
 810225a:	b082      	sub	sp, #8
 810225c:	af00      	add	r7, sp, #0
 810225e:	6078      	str	r0, [r7, #4]
 8102260:	6039      	str	r1, [r7, #0]
      : _Base(__head)
 8102262:	687b      	ldr	r3, [r7, #4]
 8102264:	6839      	ldr	r1, [r7, #0]
 8102266:	4618      	mov	r0, r3
 8102268:	f000 faf5 	bl	8102856 <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EEC1ES3_>
      { }
 810226c:	687b      	ldr	r3, [r7, #4]
 810226e:	4618      	mov	r0, r3
 8102270:	3708      	adds	r7, #8
 8102272:	46bd      	mov	sp, r7
 8102274:	bd80      	pop	{r7, pc}

08102276 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102276:	b480      	push	{r7}
 8102278:	b083      	sub	sp, #12
 810227a:	af00      	add	r7, sp, #0
 810227c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810227e:	687b      	ldr	r3, [r7, #4]
 8102280:	4618      	mov	r0, r3
 8102282:	370c      	adds	r7, #12
 8102284:	46bd      	mov	sp, r7
 8102286:	f85d 7b04 	ldr.w	r7, [sp], #4
 810228a:	4770      	bx	lr

0810228c <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810228c:	b480      	push	{r7}
 810228e:	b083      	sub	sp, #12
 8102290:	af00      	add	r7, sp, #0
 8102292:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102294:	687b      	ldr	r3, [r7, #4]
 8102296:	4618      	mov	r0, r3
 8102298:	370c      	adds	r7, #12
 810229a:	46bd      	mov	sp, r7
 810229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022a0:	4770      	bx	lr

081022a2 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81022a2:	b480      	push	{r7}
 81022a4:	b083      	sub	sp, #12
 81022a6:	af00      	add	r7, sp, #0
 81022a8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81022aa:	687b      	ldr	r3, [r7, #4]
 81022ac:	4618      	mov	r0, r3
 81022ae:	370c      	adds	r7, #12
 81022b0:	46bd      	mov	sp, r7
 81022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022b6:	4770      	bx	lr

081022b8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEERSC_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
 81022b8:	b5b0      	push	{r4, r5, r7, lr}
 81022ba:	b084      	sub	sp, #16
 81022bc:	af00      	add	r7, sp, #0
 81022be:	60f8      	str	r0, [r7, #12]
 81022c0:	60b9      	str	r1, [r7, #8]
 81022c2:	607a      	str	r2, [r7, #4]
 81022c4:	603b      	str	r3, [r7, #0]
	  : _M_t(__t),
 81022c6:	68fb      	ldr	r3, [r7, #12]
 81022c8:	68ba      	ldr	r2, [r7, #8]
 81022ca:	601a      	str	r2, [r3, #0]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 81022cc:	6878      	ldr	r0, [r7, #4]
 81022ce:	f7ff ffd2 	bl	8102276 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 81022d2:	4604      	mov	r4, r0
 81022d4:	6838      	ldr	r0, [r7, #0]
 81022d6:	f7ff ffd9 	bl	810228c <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 81022da:	4605      	mov	r5, r0
 81022dc:	6a38      	ldr	r0, [r7, #32]
 81022de:	f7ff ffe0 	bl	81022a2 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 81022e2:	4603      	mov	r3, r0
 81022e4:	462a      	mov	r2, r5
 81022e6:	4621      	mov	r1, r4
 81022e8:	68b8      	ldr	r0, [r7, #8]
 81022ea:	f000 fac3 	bl	8102874 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 81022ee:	4602      	mov	r2, r0
 81022f0:	68fb      	ldr	r3, [r7, #12]
 81022f2:	605a      	str	r2, [r3, #4]
	  { }
 81022f4:	68fb      	ldr	r3, [r7, #12]
 81022f6:	4618      	mov	r0, r3
 81022f8:	3710      	adds	r7, #16
 81022fa:	46bd      	mov	sp, r7
 81022fc:	bdb0      	pop	{r4, r5, r7, pc}

081022fe <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 81022fe:	b590      	push	{r4, r7, lr}
 8102300:	b08d      	sub	sp, #52	@ 0x34
 8102302:	af00      	add	r7, sp, #0
 8102304:	60f8      	str	r0, [r7, #12]
 8102306:	60b9      	str	r1, [r7, #8]
 8102308:	607a      	str	r2, [r7, #4]
 810230a:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 810230c:	1d3b      	adds	r3, r7, #4
 810230e:	4618      	mov	r0, r3
 8102310:	f000 fad3 	bl	81028ba <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE13_M_const_castEv>
 8102314:	4603      	mov	r3, r0
 8102316:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8102318:	69bc      	ldr	r4, [r7, #24]
 810231a:	68b8      	ldr	r0, [r7, #8]
 810231c:	f7ff ff23 	bl	8102166 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8102320:	4603      	mov	r3, r0
 8102322:	429c      	cmp	r4, r3
 8102324:	bf0c      	ite	eq
 8102326:	2301      	moveq	r3, #1
 8102328:	2300      	movne	r3, #0
 810232a:	b2db      	uxtb	r3, r3
 810232c:	2b00      	cmp	r3, #0
 810232e:	d030      	beq.n	8102392 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x94>
	  if (size() > 0
 8102330:	68b8      	ldr	r0, [r7, #8]
 8102332:	f7ff fe1c 	bl	8101f6e <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 8102336:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8102338:	2b00      	cmp	r3, #0
 810233a:	d013      	beq.n	8102364 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 810233c:	68bc      	ldr	r4, [r7, #8]
 810233e:	68b8      	ldr	r0, [r7, #8]
 8102340:	f000 facc 	bl	81028dc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8102344:	4603      	mov	r3, r0
 8102346:	681b      	ldr	r3, [r3, #0]
 8102348:	4618      	mov	r0, r3
 810234a:	f7ff ff49 	bl	81021e0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 810234e:	4603      	mov	r3, r0
 8102350:	683a      	ldr	r2, [r7, #0]
 8102352:	4619      	mov	r1, r3
 8102354:	4620      	mov	r0, r4
 8102356:	f7ff fc48 	bl	8101bea <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 810235a:	4603      	mov	r3, r0
 810235c:	2b00      	cmp	r3, #0
 810235e:	d001      	beq.n	8102364 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 8102360:	2301      	movs	r3, #1
 8102362:	e000      	b.n	8102366 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x68>
 8102364:	2300      	movs	r3, #0
	  if (size() > 0
 8102366:	2b00      	cmp	r3, #0
 8102368:	d00c      	beq.n	8102384 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x86>
	    return _Res(0, _M_rightmost());
 810236a:	2300      	movs	r3, #0
 810236c:	61fb      	str	r3, [r7, #28]
 810236e:	68b8      	ldr	r0, [r7, #8]
 8102370:	f000 fab4 	bl	81028dc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8102374:	4602      	mov	r2, r0
 8102376:	f107 031c 	add.w	r3, r7, #28
 810237a:	4619      	mov	r1, r3
 810237c:	68f8      	ldr	r0, [r7, #12]
 810237e:	f000 f972 	bl	8102666 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8102382:	e0db      	b.n	810253c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8102384:	68fb      	ldr	r3, [r7, #12]
 8102386:	683a      	ldr	r2, [r7, #0]
 8102388:	68b9      	ldr	r1, [r7, #8]
 810238a:	4618      	mov	r0, r3
 810238c:	f7ff fd1b 	bl	8101dc6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8102390:	e0d4      	b.n	810253c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8102392:	68bc      	ldr	r4, [r7, #8]
 8102394:	69bb      	ldr	r3, [r7, #24]
 8102396:	4618      	mov	r0, r3
 8102398:	f7ff ff22 	bl	81021e0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 810239c:	4603      	mov	r3, r0
 810239e:	461a      	mov	r2, r3
 81023a0:	6839      	ldr	r1, [r7, #0]
 81023a2:	4620      	mov	r0, r4
 81023a4:	f7ff fc21 	bl	8101bea <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 81023a8:	4603      	mov	r3, r0
 81023aa:	2b00      	cmp	r3, #0
 81023ac:	d057      	beq.n	810245e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	  iterator __before = __pos;
 81023ae:	69bb      	ldr	r3, [r7, #24]
 81023b0:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 81023b2:	69bc      	ldr	r4, [r7, #24]
 81023b4:	68b8      	ldr	r0, [r7, #8]
 81023b6:	f000 fa9d 	bl	81028f4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 81023ba:	4603      	mov	r3, r0
 81023bc:	681b      	ldr	r3, [r3, #0]
 81023be:	429c      	cmp	r4, r3
 81023c0:	bf0c      	ite	eq
 81023c2:	2301      	moveq	r3, #1
 81023c4:	2300      	movne	r3, #0
 81023c6:	b2db      	uxtb	r3, r3
 81023c8:	2b00      	cmp	r3, #0
 81023ca:	d00d      	beq.n	81023e8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 81023cc:	68b8      	ldr	r0, [r7, #8]
 81023ce:	f000 fa91 	bl	81028f4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 81023d2:	4604      	mov	r4, r0
 81023d4:	68b8      	ldr	r0, [r7, #8]
 81023d6:	f000 fa8d 	bl	81028f4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 81023da:	4603      	mov	r3, r0
 81023dc:	461a      	mov	r2, r3
 81023de:	4621      	mov	r1, r4
 81023e0:	68f8      	ldr	r0, [r7, #12]
 81023e2:	f000 fa93 	bl	810290c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 81023e6:	e0a9      	b.n	810253c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 81023e8:	68bc      	ldr	r4, [r7, #8]
 81023ea:	f107 0314 	add.w	r3, r7, #20
 81023ee:	4618      	mov	r0, r3
 81023f0:	f000 f928 	bl	8102644 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEmmEv>
 81023f4:	4603      	mov	r3, r0
 81023f6:	681b      	ldr	r3, [r3, #0]
 81023f8:	4618      	mov	r0, r3
 81023fa:	f7ff fef1 	bl	81021e0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 81023fe:	4603      	mov	r3, r0
 8102400:	683a      	ldr	r2, [r7, #0]
 8102402:	4619      	mov	r1, r3
 8102404:	4620      	mov	r0, r4
 8102406:	f7ff fbf0 	bl	8101bea <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 810240a:	4603      	mov	r3, r0
 810240c:	2b00      	cmp	r3, #0
 810240e:	d01f      	beq.n	8102450 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8102410:	697b      	ldr	r3, [r7, #20]
 8102412:	4618      	mov	r0, r3
 8102414:	f7ff fc6e 	bl	8101cf4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8102418:	4603      	mov	r3, r0
 810241a:	2b00      	cmp	r3, #0
 810241c:	bf0c      	ite	eq
 810241e:	2301      	moveq	r3, #1
 8102420:	2300      	movne	r3, #0
 8102422:	b2db      	uxtb	r3, r3
 8102424:	2b00      	cmp	r3, #0
 8102426:	d00a      	beq.n	810243e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x140>
		return _Res(0, __before._M_node);
 8102428:	2300      	movs	r3, #0
 810242a:	623b      	str	r3, [r7, #32]
 810242c:	f107 0214 	add.w	r2, r7, #20
 8102430:	f107 0320 	add.w	r3, r7, #32
 8102434:	4619      	mov	r1, r3
 8102436:	68f8      	ldr	r0, [r7, #12]
 8102438:	f000 f915 	bl	8102666 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 810243c:	e07e      	b.n	810253c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 810243e:	f107 0218 	add.w	r2, r7, #24
 8102442:	f107 0318 	add.w	r3, r7, #24
 8102446:	4619      	mov	r1, r3
 8102448:	68f8      	ldr	r0, [r7, #12]
 810244a:	f000 fa5f 	bl	810290c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 810244e:	e075      	b.n	810253c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8102450:	68fb      	ldr	r3, [r7, #12]
 8102452:	683a      	ldr	r2, [r7, #0]
 8102454:	68b9      	ldr	r1, [r7, #8]
 8102456:	4618      	mov	r0, r3
 8102458:	f7ff fcb5 	bl	8101dc6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 810245c:	e06e      	b.n	810253c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 810245e:	68bc      	ldr	r4, [r7, #8]
 8102460:	69bb      	ldr	r3, [r7, #24]
 8102462:	4618      	mov	r0, r3
 8102464:	f7ff febc 	bl	81021e0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8102468:	4603      	mov	r3, r0
 810246a:	683a      	ldr	r2, [r7, #0]
 810246c:	4619      	mov	r1, r3
 810246e:	4620      	mov	r0, r4
 8102470:	f7ff fbbb 	bl	8101bea <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8102474:	4603      	mov	r3, r0
 8102476:	2b00      	cmp	r3, #0
 8102478:	d056      	beq.n	8102528 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x22a>
	  iterator __after = __pos;
 810247a:	69bb      	ldr	r3, [r7, #24]
 810247c:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 810247e:	69bc      	ldr	r4, [r7, #24]
 8102480:	68b8      	ldr	r0, [r7, #8]
 8102482:	f000 fa2b 	bl	81028dc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8102486:	4603      	mov	r3, r0
 8102488:	681b      	ldr	r3, [r3, #0]
 810248a:	429c      	cmp	r4, r3
 810248c:	bf0c      	ite	eq
 810248e:	2301      	moveq	r3, #1
 8102490:	2300      	movne	r3, #0
 8102492:	b2db      	uxtb	r3, r3
 8102494:	2b00      	cmp	r3, #0
 8102496:	d00c      	beq.n	81024b2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1b4>
	    return _Res(0, _M_rightmost());
 8102498:	2300      	movs	r3, #0
 810249a:	627b      	str	r3, [r7, #36]	@ 0x24
 810249c:	68b8      	ldr	r0, [r7, #8]
 810249e:	f000 fa1d 	bl	81028dc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 81024a2:	4602      	mov	r2, r0
 81024a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81024a8:	4619      	mov	r1, r3
 81024aa:	68f8      	ldr	r0, [r7, #12]
 81024ac:	f000 f8db 	bl	8102666 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 81024b0:	e044      	b.n	810253c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 81024b2:	68bc      	ldr	r4, [r7, #8]
 81024b4:	f107 0310 	add.w	r3, r7, #16
 81024b8:	4618      	mov	r0, r3
 81024ba:	f000 fa40 	bl	810293e <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEppEv>
 81024be:	4603      	mov	r3, r0
 81024c0:	681b      	ldr	r3, [r3, #0]
 81024c2:	4618      	mov	r0, r3
 81024c4:	f7ff fe8c 	bl	81021e0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 81024c8:	4603      	mov	r3, r0
 81024ca:	461a      	mov	r2, r3
 81024cc:	6839      	ldr	r1, [r7, #0]
 81024ce:	4620      	mov	r0, r4
 81024d0:	f7ff fb8b 	bl	8101bea <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 81024d4:	4603      	mov	r3, r0
 81024d6:	2b00      	cmp	r3, #0
 81024d8:	d01f      	beq.n	810251a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 81024da:	69bb      	ldr	r3, [r7, #24]
 81024dc:	4618      	mov	r0, r3
 81024de:	f7ff fc09 	bl	8101cf4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 81024e2:	4603      	mov	r3, r0
 81024e4:	2b00      	cmp	r3, #0
 81024e6:	bf0c      	ite	eq
 81024e8:	2301      	moveq	r3, #1
 81024ea:	2300      	movne	r3, #0
 81024ec:	b2db      	uxtb	r3, r3
 81024ee:	2b00      	cmp	r3, #0
 81024f0:	d00a      	beq.n	8102508 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x20a>
		return _Res(0, __pos._M_node);
 81024f2:	2300      	movs	r3, #0
 81024f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 81024f6:	f107 0218 	add.w	r2, r7, #24
 81024fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81024fe:	4619      	mov	r1, r3
 8102500:	68f8      	ldr	r0, [r7, #12]
 8102502:	f000 f8b0 	bl	8102666 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8102506:	e019      	b.n	810253c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8102508:	f107 0210 	add.w	r2, r7, #16
 810250c:	f107 0310 	add.w	r3, r7, #16
 8102510:	4619      	mov	r1, r3
 8102512:	68f8      	ldr	r0, [r7, #12]
 8102514:	f000 f9fa 	bl	810290c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8102518:	e010      	b.n	810253c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 810251a:	68fb      	ldr	r3, [r7, #12]
 810251c:	683a      	ldr	r2, [r7, #0]
 810251e:	68b9      	ldr	r1, [r7, #8]
 8102520:	4618      	mov	r0, r3
 8102522:	f7ff fc50 	bl	8101dc6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8102526:	e009      	b.n	810253c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	return _Res(__pos._M_node, 0);
 8102528:	2300      	movs	r3, #0
 810252a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810252c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8102530:	f107 0318 	add.w	r3, r7, #24
 8102534:	4619      	mov	r1, r3
 8102536:	68f8      	ldr	r0, [r7, #12]
 8102538:	f000 f895 	bl	8102666 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 810253c:	68f8      	ldr	r0, [r7, #12]
 810253e:	3734      	adds	r7, #52	@ 0x34
 8102540:	46bd      	mov	sp, r7
 8102542:	bd90      	pop	{r4, r7, pc}

08102544 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8102544:	b590      	push	{r4, r7, lr}
 8102546:	b083      	sub	sp, #12
 8102548:	af00      	add	r7, sp, #0
 810254a:	6078      	str	r0, [r7, #4]
 810254c:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 810254e:	6878      	ldr	r0, [r7, #4]
 8102550:	f000 fa06 	bl	8102960 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8102554:	4604      	mov	r4, r0
 8102556:	6838      	ldr	r0, [r7, #0]
 8102558:	f7ff fe70 	bl	810223c <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 810255c:	4603      	mov	r3, r0
 810255e:	4619      	mov	r1, r3
 8102560:	4620      	mov	r0, r4
 8102562:	f000 fa08 	bl	8102976 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE7destroyIS7_EEvRS9_PT_>
      }
 8102566:	bf00      	nop
 8102568:	370c      	adds	r7, #12
 810256a:	46bd      	mov	sp, r7
 810256c:	bd90      	pop	{r4, r7, pc}

0810256e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 810256e:	b580      	push	{r7, lr}
 8102570:	b082      	sub	sp, #8
 8102572:	af00      	add	r7, sp, #0
 8102574:	6078      	str	r0, [r7, #4]
 8102576:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8102578:	6878      	ldr	r0, [r7, #4]
 810257a:	f000 f9f1 	bl	8102960 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 810257e:	4603      	mov	r3, r0
 8102580:	2201      	movs	r2, #1
 8102582:	6839      	ldr	r1, [r7, #0]
 8102584:	4618      	mov	r0, r3
 8102586:	f000 fa03 	bl	8102990 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE10deallocateERS9_PS8_j>
 810258a:	bf00      	nop
 810258c:	3708      	adds	r7, #8
 810258e:	46bd      	mov	sp, r7
 8102590:	bd80      	pop	{r7, pc}

08102592 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRS1_RS5_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8102592:	b590      	push	{r4, r7, lr}
 8102594:	b087      	sub	sp, #28
 8102596:	af00      	add	r7, sp, #0
 8102598:	60f8      	str	r0, [r7, #12]
 810259a:	60b9      	str	r1, [r7, #8]
 810259c:	607a      	str	r2, [r7, #4]
	  _Link_type __tmp = _M_get_node();
 810259e:	68f8      	ldr	r0, [r7, #12]
 81025a0:	f000 fa05 	bl	81029ae <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 81025a4:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 81025a6:	68b8      	ldr	r0, [r7, #8]
 81025a8:	f7ff f8ab 	bl	8101702 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 81025ac:	4604      	mov	r4, r0
 81025ae:	6878      	ldr	r0, [r7, #4]
 81025b0:	f7ff f8b2 	bl	8101718 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 81025b4:	4603      	mov	r3, r0
 81025b6:	4622      	mov	r2, r4
 81025b8:	6979      	ldr	r1, [r7, #20]
 81025ba:	68f8      	ldr	r0, [r7, #12]
 81025bc:	f000 fa08 	bl	81029d0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRS1_RS5_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 81025c0:	697b      	ldr	r3, [r7, #20]
	}
 81025c2:	4618      	mov	r0, r3
 81025c4:	371c      	adds	r7, #28
 81025c6:	46bd      	mov	sp, r7
 81025c8:	bd90      	pop	{r4, r7, pc}

081025ca <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 81025ca:	b580      	push	{r7, lr}
 81025cc:	b084      	sub	sp, #16
 81025ce:	af00      	add	r7, sp, #0
 81025d0:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 81025d2:	6878      	ldr	r0, [r7, #4]
 81025d4:	f000 fa21 	bl	8102a1a <_ZNKSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 81025d8:	4602      	mov	r2, r0
 81025da:	f107 030c 	add.w	r3, r7, #12
 81025de:	4611      	mov	r1, r2
 81025e0:	4618      	mov	r0, r3
 81025e2:	f000 fa28 	bl	8102a36 <_ZNKSt10_Select1stISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEclERKS6_>
 81025e6:	4603      	mov	r3, r0
      }
 81025e8:	4618      	mov	r0, r3
 81025ea:	3710      	adds	r7, #16
 81025ec:	46bd      	mov	sp, r7
 81025ee:	bd80      	pop	{r7, pc}

081025f0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 81025f0:	b580      	push	{r7, lr}
 81025f2:	b084      	sub	sp, #16
 81025f4:	af00      	add	r7, sp, #0
 81025f6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 81025f8:	687b      	ldr	r3, [r7, #4]
 81025fa:	68da      	ldr	r2, [r3, #12]
 81025fc:	f107 030c 	add.w	r3, r7, #12
 8102600:	4611      	mov	r1, r2
 8102602:	4618      	mov	r0, r3
 8102604:	f7ff fca4 	bl	8101f50 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8102608:	68fb      	ldr	r3, [r7, #12]
 810260a:	4618      	mov	r0, r3
 810260c:	3710      	adds	r7, #16
 810260e:	46bd      	mov	sp, r7
 8102610:	bd80      	pop	{r7, pc}

08102612 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8102612:	b580      	push	{r7, lr}
 8102614:	b084      	sub	sp, #16
 8102616:	af00      	add	r7, sp, #0
 8102618:	60f8      	str	r0, [r7, #12]
 810261a:	60b9      	str	r1, [r7, #8]
 810261c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 810261e:	68b8      	ldr	r0, [r7, #8]
 8102620:	f000 fa15 	bl	8102a4e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceISB_E4typeE>
 8102624:	4603      	mov	r3, r0
 8102626:	681a      	ldr	r2, [r3, #0]
 8102628:	68fb      	ldr	r3, [r7, #12]
 810262a:	601a      	str	r2, [r3, #0]
 810262c:	6878      	ldr	r0, [r7, #4]
 810262e:	f000 fa19 	bl	8102a64 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8102632:	4603      	mov	r3, r0
 8102634:	681a      	ldr	r2, [r3, #0]
 8102636:	68fb      	ldr	r3, [r7, #12]
 8102638:	605a      	str	r2, [r3, #4]
 810263a:	68fb      	ldr	r3, [r7, #12]
 810263c:	4618      	mov	r0, r3
 810263e:	3710      	adds	r7, #16
 8102640:	46bd      	mov	sp, r7
 8102642:	bd80      	pop	{r7, pc}

08102644 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8102644:	b580      	push	{r7, lr}
 8102646:	b082      	sub	sp, #8
 8102648:	af00      	add	r7, sp, #0
 810264a:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 810264c:	687b      	ldr	r3, [r7, #4]
 810264e:	681b      	ldr	r3, [r3, #0]
 8102650:	4618      	mov	r0, r3
 8102652:	f005 f935 	bl	81078c0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8102656:	4602      	mov	r2, r0
 8102658:	687b      	ldr	r3, [r7, #4]
 810265a:	601a      	str	r2, [r3, #0]
	return *this;
 810265c:	687b      	ldr	r3, [r7, #4]
      }
 810265e:	4618      	mov	r0, r3
 8102660:	3708      	adds	r7, #8
 8102662:	46bd      	mov	sp, r7
 8102664:	bd80      	pop	{r7, pc}

08102666 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>:
      constexpr pair(const _T1& __a, const _T2& __b)
 8102666:	b480      	push	{r7}
 8102668:	b085      	sub	sp, #20
 810266a:	af00      	add	r7, sp, #0
 810266c:	60f8      	str	r0, [r7, #12]
 810266e:	60b9      	str	r1, [r7, #8]
 8102670:	607a      	str	r2, [r7, #4]
      : first(__a), second(__b) { }
 8102672:	68bb      	ldr	r3, [r7, #8]
 8102674:	681a      	ldr	r2, [r3, #0]
 8102676:	68fb      	ldr	r3, [r7, #12]
 8102678:	601a      	str	r2, [r3, #0]
 810267a:	687b      	ldr	r3, [r7, #4]
 810267c:	681a      	ldr	r2, [r3, #0]
 810267e:	68fb      	ldr	r3, [r7, #12]
 8102680:	605a      	str	r2, [r3, #4]
 8102682:	68fb      	ldr	r3, [r7, #12]
 8102684:	4618      	mov	r0, r3
 8102686:	3714      	adds	r7, #20
 8102688:	46bd      	mov	sp, r7
 810268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810268e:	4770      	bx	lr

08102690 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8102690:	b5b0      	push	{r4, r5, r7, lr}
 8102692:	b086      	sub	sp, #24
 8102694:	af00      	add	r7, sp, #0
 8102696:	60f8      	str	r0, [r7, #12]
 8102698:	60b9      	str	r1, [r7, #8]
 810269a:	607a      	str	r2, [r7, #4]
 810269c:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 810269e:	68bb      	ldr	r3, [r7, #8]
 81026a0:	2b00      	cmp	r3, #0
 81026a2:	d117      	bne.n	81026d4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 81026a4:	68f8      	ldr	r0, [r7, #12]
 81026a6:	f7ff fd5e 	bl	8102166 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 81026aa:	4602      	mov	r2, r0
 81026ac:	687b      	ldr	r3, [r7, #4]
 81026ae:	4293      	cmp	r3, r2
 81026b0:	d010      	beq.n	81026d4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 81026b2:	68fc      	ldr	r4, [r7, #12]
 81026b4:	6838      	ldr	r0, [r7, #0]
 81026b6:	f7ff ff88 	bl	81025ca <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 81026ba:	4605      	mov	r5, r0
 81026bc:	6878      	ldr	r0, [r7, #4]
 81026be:	f7ff fd8f 	bl	81021e0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 81026c2:	4603      	mov	r3, r0
 81026c4:	461a      	mov	r2, r3
 81026c6:	4629      	mov	r1, r5
 81026c8:	4620      	mov	r0, r4
 81026ca:	f7ff fa8e 	bl	8101bea <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 81026ce:	4603      	mov	r3, r0
 81026d0:	2b00      	cmp	r3, #0
 81026d2:	d001      	beq.n	81026d8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
 81026d4:	2301      	movs	r3, #1
 81026d6:	e000      	b.n	81026da <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4a>
 81026d8:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 81026da:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 81026dc:	68fb      	ldr	r3, [r7, #12]
 81026de:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 81026e0:	7df8      	ldrb	r0, [r7, #23]
 81026e2:	687a      	ldr	r2, [r7, #4]
 81026e4:	6839      	ldr	r1, [r7, #0]
 81026e6:	f005 f8ed 	bl	81078c4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 81026ea:	68fb      	ldr	r3, [r7, #12]
 81026ec:	695b      	ldr	r3, [r3, #20]
 81026ee:	1c5a      	adds	r2, r3, #1
 81026f0:	68fb      	ldr	r3, [r7, #12]
 81026f2:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 81026f4:	f107 0310 	add.w	r3, r7, #16
 81026f8:	6839      	ldr	r1, [r7, #0]
 81026fa:	4618      	mov	r0, r3
 81026fc:	f7ff fc28 	bl	8101f50 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8102700:	693b      	ldr	r3, [r7, #16]
    }
 8102702:	4618      	mov	r0, r3
 8102704:	3718      	adds	r7, #24
 8102706:	46bd      	mov	sp, r7
 8102708:	bdb0      	pop	{r4, r5, r7, pc}

0810270a <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810270a:	b480      	push	{r7}
 810270c:	b083      	sub	sp, #12
 810270e:	af00      	add	r7, sp, #0
 8102710:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102712:	687b      	ldr	r3, [r7, #4]
 8102714:	4618      	mov	r0, r3
 8102716:	370c      	adds	r7, #12
 8102718:	46bd      	mov	sp, r7
 810271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810271e:	4770      	bx	lr

08102720 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102720:	b480      	push	{r7}
 8102722:	b083      	sub	sp, #12
 8102724:	af00      	add	r7, sp, #0
 8102726:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102728:	687b      	ldr	r3, [r7, #4]
 810272a:	4618      	mov	r0, r3
 810272c:	370c      	adds	r7, #12
 810272e:	46bd      	mov	sp, r7
 8102730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102734:	4770      	bx	lr

08102736 <_ZNSt12_Destroy_auxILb1EE9__destroyIP8SMessageEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8102736:	b480      	push	{r7}
 8102738:	b083      	sub	sp, #12
 810273a:	af00      	add	r7, sp, #0
 810273c:	6078      	str	r0, [r7, #4]
 810273e:	6039      	str	r1, [r7, #0]
 8102740:	bf00      	nop
 8102742:	370c      	adds	r7, #12
 8102744:	46bd      	mov	sp, r7
 8102746:	f85d 7b04 	ldr.w	r7, [sp], #4
 810274a:	4770      	bx	lr

0810274c <_ZNSt15__new_allocatorI8SMessageE10deallocateEPS0_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 810274c:	b580      	push	{r7, lr}
 810274e:	b084      	sub	sp, #16
 8102750:	af00      	add	r7, sp, #0
 8102752:	60f8      	str	r0, [r7, #12]
 8102754:	60b9      	str	r1, [r7, #8]
 8102756:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8102758:	687a      	ldr	r2, [r7, #4]
 810275a:	4613      	mov	r3, r2
 810275c:	005b      	lsls	r3, r3, #1
 810275e:	4413      	add	r3, r2
 8102760:	00db      	lsls	r3, r3, #3
 8102762:	4619      	mov	r1, r3
 8102764:	68b8      	ldr	r0, [r7, #8]
 8102766:	f005 f841 	bl	81077ec <_ZdlPvj>
      }
 810276a:	bf00      	nop
 810276c:	3710      	adds	r7, #16
 810276e:	46bd      	mov	sp, r7
 8102770:	bd80      	pop	{r7, pc}

08102772 <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8102772:	b580      	push	{r7, lr}
 8102774:	b082      	sub	sp, #8
 8102776:	af00      	add	r7, sp, #0
 8102778:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 810277a:	687b      	ldr	r3, [r7, #4]
 810277c:	4618      	mov	r0, r3
 810277e:	f000 f999 	bl	8102ab4 <_ZNKSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8102782:	4603      	mov	r3, r0
 8102784:	4618      	mov	r0, r3
 8102786:	f000 f979 	bl	8102a7c <_ZNSt6vectorI8SMessageSaIS0_EE11_S_max_sizeERKS1_>
 810278a:	4603      	mov	r3, r0
 810278c:	4618      	mov	r0, r3
 810278e:	3708      	adds	r7, #8
 8102790:	46bd      	mov	sp, r7
 8102792:	bd80      	pop	{r7, pc}

08102794 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8102794:	b480      	push	{r7}
 8102796:	b083      	sub	sp, #12
 8102798:	af00      	add	r7, sp, #0
 810279a:	6078      	str	r0, [r7, #4]
 810279c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 810279e:	687b      	ldr	r3, [r7, #4]
 81027a0:	681a      	ldr	r2, [r3, #0]
 81027a2:	683b      	ldr	r3, [r7, #0]
 81027a4:	681b      	ldr	r3, [r3, #0]
 81027a6:	429a      	cmp	r2, r3
 81027a8:	d201      	bcs.n	81027ae <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 81027aa:	683b      	ldr	r3, [r7, #0]
 81027ac:	e000      	b.n	81027b0 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 81027ae:	687b      	ldr	r3, [r7, #4]
    }
 81027b0:	4618      	mov	r0, r3
 81027b2:	370c      	adds	r7, #12
 81027b4:	46bd      	mov	sp, r7
 81027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027ba:	4770      	bx	lr

081027bc <_ZNSt16allocator_traitsISaI8SMessageEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 81027bc:	b580      	push	{r7, lr}
 81027be:	b082      	sub	sp, #8
 81027c0:	af00      	add	r7, sp, #0
 81027c2:	6078      	str	r0, [r7, #4]
 81027c4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 81027c6:	2200      	movs	r2, #0
 81027c8:	6839      	ldr	r1, [r7, #0]
 81027ca:	6878      	ldr	r0, [r7, #4]
 81027cc:	f000 f97e 	bl	8102acc <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv>
 81027d0:	4603      	mov	r3, r0
 81027d2:	4618      	mov	r0, r3
 81027d4:	3708      	adds	r7, #8
 81027d6:	46bd      	mov	sp, r7
 81027d8:	bd80      	pop	{r7, pc}

081027da <_ZNSt6vectorI8SMessageSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 81027da:	b580      	push	{r7, lr}
 81027dc:	b084      	sub	sp, #16
 81027de:	af00      	add	r7, sp, #0
 81027e0:	60f8      	str	r0, [r7, #12]
 81027e2:	60b9      	str	r1, [r7, #8]
 81027e4:	607a      	str	r2, [r7, #4]
 81027e6:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 81027e8:	683b      	ldr	r3, [r7, #0]
 81027ea:	687a      	ldr	r2, [r7, #4]
 81027ec:	68b9      	ldr	r1, [r7, #8]
 81027ee:	68f8      	ldr	r0, [r7, #12]
 81027f0:	f000 f99a 	bl	8102b28 <_ZSt12__relocate_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>
 81027f4:	4603      	mov	r3, r0
      }
 81027f6:	4618      	mov	r0, r3
 81027f8:	3710      	adds	r7, #16
 81027fa:	46bd      	mov	sp, r7
 81027fc:	bd80      	pop	{r7, pc}

081027fe <_ZSt32__make_move_if_noexcept_iteratorI8SMessageSt13move_iteratorIPS0_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = __conditional_t<__move_if_noexcept_cond<_Tp>::value,
		      const _Tp*, move_iterator<_Tp*>>>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 81027fe:	b580      	push	{r7, lr}
 8102800:	b084      	sub	sp, #16
 8102802:	af00      	add	r7, sp, #0
 8102804:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8102806:	f107 030c 	add.w	r3, r7, #12
 810280a:	6879      	ldr	r1, [r7, #4]
 810280c:	4618      	mov	r0, r3
 810280e:	f000 f9a8 	bl	8102b62 <_ZNSt13move_iteratorIP8SMessageEC1ES1_>
 8102812:	68fb      	ldr	r3, [r7, #12]
 8102814:	4618      	mov	r0, r3
 8102816:	3710      	adds	r7, #16
 8102818:	46bd      	mov	sp, r7
 810281a:	bd80      	pop	{r7, pc}

0810281c <_ZSt22__uninitialized_copy_aISt13move_iteratorIP8SMessageES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 810281c:	b580      	push	{r7, lr}
 810281e:	b084      	sub	sp, #16
 8102820:	af00      	add	r7, sp, #0
 8102822:	60f8      	str	r0, [r7, #12]
 8102824:	60b9      	str	r1, [r7, #8]
 8102826:	607a      	str	r2, [r7, #4]
 8102828:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 810282a:	687a      	ldr	r2, [r7, #4]
 810282c:	68b9      	ldr	r1, [r7, #8]
 810282e:	68f8      	ldr	r0, [r7, #12]
 8102830:	f000 f9a9 	bl	8102b86 <_ZSt18uninitialized_copyISt13move_iteratorIP8SMessageES2_ET0_T_S5_S4_>
 8102834:	4603      	mov	r3, r0
    }
 8102836:	4618      	mov	r0, r3
 8102838:	3710      	adds	r7, #16
 810283a:	46bd      	mov	sp, r7
 810283c:	bd80      	pop	{r7, pc}

0810283e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 810283e:	b580      	push	{r7, lr}
 8102840:	b082      	sub	sp, #8
 8102842:	af00      	add	r7, sp, #0
 8102844:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8102846:	6878      	ldr	r0, [r7, #4]
 8102848:	f000 f9b1 	bl	8102bae <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>
 810284c:	4603      	mov	r3, r0
 810284e:	4618      	mov	r0, r3
 8102850:	3708      	adds	r7, #8
 8102852:	46bd      	mov	sp, r7
 8102854:	bd80      	pop	{r7, pc}

08102856 <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EEC1ES3_>:
      constexpr _Head_base(const _Head& __h)
 8102856:	b480      	push	{r7}
 8102858:	b083      	sub	sp, #12
 810285a:	af00      	add	r7, sp, #0
 810285c:	6078      	str	r0, [r7, #4]
 810285e:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 8102860:	687b      	ldr	r3, [r7, #4]
 8102862:	683a      	ldr	r2, [r7, #0]
 8102864:	601a      	str	r2, [r3, #0]
 8102866:	687b      	ldr	r3, [r7, #4]
 8102868:	4618      	mov	r0, r3
 810286a:	370c      	adds	r7, #12
 810286c:	46bd      	mov	sp, r7
 810286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102872:	4770      	bx	lr

08102874 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8102874:	b5b0      	push	{r4, r5, r7, lr}
 8102876:	b088      	sub	sp, #32
 8102878:	af02      	add	r7, sp, #8
 810287a:	60f8      	str	r0, [r7, #12]
 810287c:	60b9      	str	r1, [r7, #8]
 810287e:	607a      	str	r2, [r7, #4]
 8102880:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8102882:	68f8      	ldr	r0, [r7, #12]
 8102884:	f000 f893 	bl	81029ae <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 8102888:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 810288a:	68b8      	ldr	r0, [r7, #8]
 810288c:	f7ff fcf3 	bl	8102276 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8102890:	4604      	mov	r4, r0
 8102892:	6878      	ldr	r0, [r7, #4]
 8102894:	f7ff fcfa 	bl	810228c <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8102898:	4605      	mov	r5, r0
 810289a:	6838      	ldr	r0, [r7, #0]
 810289c:	f7ff fd01 	bl	81022a2 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 81028a0:	4603      	mov	r3, r0
 81028a2:	9300      	str	r3, [sp, #0]
 81028a4:	462b      	mov	r3, r5
 81028a6:	4622      	mov	r2, r4
 81028a8:	6979      	ldr	r1, [r7, #20]
 81028aa:	68f8      	ldr	r0, [r7, #12]
 81028ac:	f000 f98a 	bl	8102bc4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 81028b0:	697b      	ldr	r3, [r7, #20]
	}
 81028b2:	4618      	mov	r0, r3
 81028b4:	3718      	adds	r7, #24
 81028b6:	46bd      	mov	sp, r7
 81028b8:	bdb0      	pop	{r4, r5, r7, pc}

081028ba <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 81028ba:	b580      	push	{r7, lr}
 81028bc:	b084      	sub	sp, #16
 81028be:	af00      	add	r7, sp, #0
 81028c0:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 81028c2:	687b      	ldr	r3, [r7, #4]
 81028c4:	681a      	ldr	r2, [r3, #0]
 81028c6:	f107 030c 	add.w	r3, r7, #12
 81028ca:	4611      	mov	r1, r2
 81028cc:	4618      	mov	r0, r3
 81028ce:	f7ff fb3f 	bl	8101f50 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 81028d2:	68fb      	ldr	r3, [r7, #12]
 81028d4:	4618      	mov	r0, r3
 81028d6:	3710      	adds	r7, #16
 81028d8:	46bd      	mov	sp, r7
 81028da:	bd80      	pop	{r7, pc}

081028dc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 81028dc:	b480      	push	{r7}
 81028de:	b083      	sub	sp, #12
 81028e0:	af00      	add	r7, sp, #0
 81028e2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 81028e4:	687b      	ldr	r3, [r7, #4]
 81028e6:	3310      	adds	r3, #16
 81028e8:	4618      	mov	r0, r3
 81028ea:	370c      	adds	r7, #12
 81028ec:	46bd      	mov	sp, r7
 81028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028f2:	4770      	bx	lr

081028f4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 81028f4:	b480      	push	{r7}
 81028f6:	b083      	sub	sp, #12
 81028f8:	af00      	add	r7, sp, #0
 81028fa:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 81028fc:	687b      	ldr	r3, [r7, #4]
 81028fe:	330c      	adds	r3, #12
 8102900:	4618      	mov	r0, r3
 8102902:	370c      	adds	r7, #12
 8102904:	46bd      	mov	sp, r7
 8102906:	f85d 7b04 	ldr.w	r7, [sp], #4
 810290a:	4770      	bx	lr

0810290c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 810290c:	b580      	push	{r7, lr}
 810290e:	b084      	sub	sp, #16
 8102910:	af00      	add	r7, sp, #0
 8102912:	60f8      	str	r0, [r7, #12]
 8102914:	60b9      	str	r1, [r7, #8]
 8102916:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8102918:	68b8      	ldr	r0, [r7, #8]
 810291a:	f000 f8a3 	bl	8102a64 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 810291e:	4603      	mov	r3, r0
 8102920:	681a      	ldr	r2, [r3, #0]
 8102922:	68fb      	ldr	r3, [r7, #12]
 8102924:	601a      	str	r2, [r3, #0]
 8102926:	6878      	ldr	r0, [r7, #4]
 8102928:	f000 f89c 	bl	8102a64 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 810292c:	4603      	mov	r3, r0
 810292e:	681a      	ldr	r2, [r3, #0]
 8102930:	68fb      	ldr	r3, [r7, #12]
 8102932:	605a      	str	r2, [r3, #4]
 8102934:	68fb      	ldr	r3, [r7, #12]
 8102936:	4618      	mov	r0, r3
 8102938:	3710      	adds	r7, #16
 810293a:	46bd      	mov	sp, r7
 810293c:	bd80      	pop	{r7, pc}

0810293e <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 810293e:	b580      	push	{r7, lr}
 8102940:	b082      	sub	sp, #8
 8102942:	af00      	add	r7, sp, #0
 8102944:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8102946:	687b      	ldr	r3, [r7, #4]
 8102948:	681b      	ldr	r3, [r3, #0]
 810294a:	4618      	mov	r0, r3
 810294c:	f004 ffb6 	bl	81078bc <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8102950:	4602      	mov	r2, r0
 8102952:	687b      	ldr	r3, [r7, #4]
 8102954:	601a      	str	r2, [r3, #0]
	return *this;
 8102956:	687b      	ldr	r3, [r7, #4]
      }
 8102958:	4618      	mov	r0, r3
 810295a:	3708      	adds	r7, #8
 810295c:	46bd      	mov	sp, r7
 810295e:	bd80      	pop	{r7, pc}

08102960 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8102960:	b480      	push	{r7}
 8102962:	b083      	sub	sp, #12
 8102964:	af00      	add	r7, sp, #0
 8102966:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8102968:	687b      	ldr	r3, [r7, #4]
 810296a:	4618      	mov	r0, r3
 810296c:	370c      	adds	r7, #12
 810296e:	46bd      	mov	sp, r7
 8102970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102974:	4770      	bx	lr

08102976 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8102976:	b580      	push	{r7, lr}
 8102978:	b082      	sub	sp, #8
 810297a:	af00      	add	r7, sp, #0
 810297c:	6078      	str	r0, [r7, #4]
 810297e:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8102980:	6839      	ldr	r1, [r7, #0]
 8102982:	6878      	ldr	r0, [r7, #4]
 8102984:	f000 f94b 	bl	8102c1e <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE7destroyIS7_EEvPT_>
	}
 8102988:	bf00      	nop
 810298a:	3708      	adds	r7, #8
 810298c:	46bd      	mov	sp, r7
 810298e:	bd80      	pop	{r7, pc}

08102990 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8102990:	b580      	push	{r7, lr}
 8102992:	b084      	sub	sp, #16
 8102994:	af00      	add	r7, sp, #0
 8102996:	60f8      	str	r0, [r7, #12]
 8102998:	60b9      	str	r1, [r7, #8]
 810299a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 810299c:	687a      	ldr	r2, [r7, #4]
 810299e:	68b9      	ldr	r1, [r7, #8]
 81029a0:	68f8      	ldr	r0, [r7, #12]
 81029a2:	f000 f947 	bl	8102c34 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE10deallocateEPS8_j>
 81029a6:	bf00      	nop
 81029a8:	3710      	adds	r7, #16
 81029aa:	46bd      	mov	sp, r7
 81029ac:	bd80      	pop	{r7, pc}

081029ae <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 81029ae:	b580      	push	{r7, lr}
 81029b0:	b082      	sub	sp, #8
 81029b2:	af00      	add	r7, sp, #0
 81029b4:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 81029b6:	6878      	ldr	r0, [r7, #4]
 81029b8:	f7ff ffd2 	bl	8102960 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 81029bc:	4603      	mov	r3, r0
 81029be:	2101      	movs	r1, #1
 81029c0:	4618      	mov	r0, r3
 81029c2:	f000 f94a 	bl	8102c5a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE8allocateERS9_j>
 81029c6:	4603      	mov	r3, r0
 81029c8:	4618      	mov	r0, r3
 81029ca:	3708      	adds	r7, #8
 81029cc:	46bd      	mov	sp, r7
 81029ce:	bd80      	pop	{r7, pc}

081029d0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRS1_RS5_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 81029d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 81029d2:	b085      	sub	sp, #20
 81029d4:	af00      	add	r7, sp, #0
 81029d6:	60f8      	str	r0, [r7, #12]
 81029d8:	60b9      	str	r1, [r7, #8]
 81029da:	607a      	str	r2, [r7, #4]
 81029dc:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 81029de:	68bb      	ldr	r3, [r7, #8]
 81029e0:	4619      	mov	r1, r3
 81029e2:	2018      	movs	r0, #24
 81029e4:	f7fd ff82 	bl	81008ec <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 81029e8:	68f8      	ldr	r0, [r7, #12]
 81029ea:	f7ff ffb9 	bl	8102960 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 81029ee:	4604      	mov	r4, r0
 81029f0:	68b8      	ldr	r0, [r7, #8]
 81029f2:	f7ff fc23 	bl	810223c <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 81029f6:	4605      	mov	r5, r0
 81029f8:	6878      	ldr	r0, [r7, #4]
 81029fa:	f7fe fe82 	bl	8101702 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 81029fe:	4606      	mov	r6, r0
 8102a00:	6838      	ldr	r0, [r7, #0]
 8102a02:	f7fe fe89 	bl	8101718 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8102a06:	4603      	mov	r3, r0
 8102a08:	4632      	mov	r2, r6
 8102a0a:	4629      	mov	r1, r5
 8102a0c:	4620      	mov	r0, r4
 8102a0e:	f000 f933 	bl	8102c78 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRS3_RS6_EEEvRS9_PT_DpOT0_>
	}
 8102a12:	bf00      	nop
 8102a14:	3714      	adds	r7, #20
 8102a16:	46bd      	mov	sp, r7
 8102a18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08102a1a <_ZNKSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>:
      _M_valptr() const
 8102a1a:	b580      	push	{r7, lr}
 8102a1c:	b082      	sub	sp, #8
 8102a1e:	af00      	add	r7, sp, #0
 8102a20:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8102a22:	687b      	ldr	r3, [r7, #4]
 8102a24:	3310      	adds	r3, #16
 8102a26:	4618      	mov	r0, r3
 8102a28:	f000 f93e 	bl	8102ca8 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>
 8102a2c:	4603      	mov	r3, r0
 8102a2e:	4618      	mov	r0, r3
 8102a30:	3708      	adds	r7, #8
 8102a32:	46bd      	mov	sp, r7
 8102a34:	bd80      	pop	{r7, pc}

08102a36 <_ZNKSt10_Select1stISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEclERKS6_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 8102a36:	b480      	push	{r7}
 8102a38:	b083      	sub	sp, #12
 8102a3a:	af00      	add	r7, sp, #0
 8102a3c:	6078      	str	r0, [r7, #4]
 8102a3e:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8102a40:	683b      	ldr	r3, [r7, #0]
 8102a42:	4618      	mov	r0, r3
 8102a44:	370c      	adds	r7, #12
 8102a46:	46bd      	mov	sp, r7
 8102a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a4c:	4770      	bx	lr

08102a4e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102a4e:	b480      	push	{r7}
 8102a50:	b083      	sub	sp, #12
 8102a52:	af00      	add	r7, sp, #0
 8102a54:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102a56:	687b      	ldr	r3, [r7, #4]
 8102a58:	4618      	mov	r0, r3
 8102a5a:	370c      	adds	r7, #12
 8102a5c:	46bd      	mov	sp, r7
 8102a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a62:	4770      	bx	lr

08102a64 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102a64:	b480      	push	{r7}
 8102a66:	b083      	sub	sp, #12
 8102a68:	af00      	add	r7, sp, #0
 8102a6a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102a6c:	687b      	ldr	r3, [r7, #4]
 8102a6e:	4618      	mov	r0, r3
 8102a70:	370c      	adds	r7, #12
 8102a72:	46bd      	mov	sp, r7
 8102a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a78:	4770      	bx	lr
	...

08102a7c <_ZNSt6vectorI8SMessageSaIS0_EE11_S_max_sizeERKS1_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8102a7c:	b580      	push	{r7, lr}
 8102a7e:	b084      	sub	sp, #16
 8102a80:	af00      	add	r7, sp, #0
 8102a82:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8102a84:	4b0a      	ldr	r3, [pc, #40]	@ (8102ab0 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 8102a86:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8102a88:	6878      	ldr	r0, [r7, #4]
 8102a8a:	f000 f919 	bl	8102cc0 <_ZNSt16allocator_traitsISaI8SMessageEE8max_sizeERKS1_>
 8102a8e:	4603      	mov	r3, r0
 8102a90:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8102a92:	f107 0208 	add.w	r2, r7, #8
 8102a96:	f107 030c 	add.w	r3, r7, #12
 8102a9a:	4611      	mov	r1, r2
 8102a9c:	4618      	mov	r0, r3
 8102a9e:	f000 f91b 	bl	8102cd8 <_ZSt3minIjERKT_S2_S2_>
 8102aa2:	4603      	mov	r3, r0
 8102aa4:	681b      	ldr	r3, [r3, #0]
      }
 8102aa6:	4618      	mov	r0, r3
 8102aa8:	3710      	adds	r7, #16
 8102aaa:	46bd      	mov	sp, r7
 8102aac:	bd80      	pop	{r7, pc}
 8102aae:	bf00      	nop
 8102ab0:	05555555 	.word	0x05555555

08102ab4 <_ZNKSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8102ab4:	b480      	push	{r7}
 8102ab6:	b083      	sub	sp, #12
 8102ab8:	af00      	add	r7, sp, #0
 8102aba:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8102abc:	687b      	ldr	r3, [r7, #4]
 8102abe:	4618      	mov	r0, r3
 8102ac0:	370c      	adds	r7, #12
 8102ac2:	46bd      	mov	sp, r7
 8102ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ac8:	4770      	bx	lr
	...

08102acc <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8102acc:	b580      	push	{r7, lr}
 8102ace:	b084      	sub	sp, #16
 8102ad0:	af00      	add	r7, sp, #0
 8102ad2:	60f8      	str	r0, [r7, #12]
 8102ad4:	60b9      	str	r1, [r7, #8]
 8102ad6:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8102ad8:	68f8      	ldr	r0, [r7, #12]
 8102ada:	f000 f911 	bl	8102d00 <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv>
 8102ade:	4602      	mov	r2, r0
 8102ae0:	68bb      	ldr	r3, [r7, #8]
 8102ae2:	4293      	cmp	r3, r2
 8102ae4:	bf8c      	ite	hi
 8102ae6:	2301      	movhi	r3, #1
 8102ae8:	2300      	movls	r3, #0
 8102aea:	b2db      	uxtb	r3, r3
 8102aec:	2b00      	cmp	r3, #0
 8102aee:	bf14      	ite	ne
 8102af0:	2301      	movne	r3, #1
 8102af2:	2300      	moveq	r3, #0
 8102af4:	b2db      	uxtb	r3, r3
 8102af6:	2b00      	cmp	r3, #0
 8102af8:	d007      	beq.n	8102b0a <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8102afa:	68bb      	ldr	r3, [r7, #8]
 8102afc:	4a09      	ldr	r2, [pc, #36]	@ (8102b24 <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv+0x58>)
 8102afe:	4293      	cmp	r3, r2
 8102b00:	d901      	bls.n	8102b06 <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8102b02:	f004 ff46 	bl	8107992 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8102b06:	f004 ff41 	bl	810798c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8102b0a:	68ba      	ldr	r2, [r7, #8]
 8102b0c:	4613      	mov	r3, r2
 8102b0e:	005b      	lsls	r3, r3, #1
 8102b10:	4413      	add	r3, r2
 8102b12:	00db      	lsls	r3, r3, #3
 8102b14:	4618      	mov	r0, r3
 8102b16:	f004 fe6b 	bl	81077f0 <_Znwj>
 8102b1a:	4603      	mov	r3, r0
      }
 8102b1c:	4618      	mov	r0, r3
 8102b1e:	3710      	adds	r7, #16
 8102b20:	46bd      	mov	sp, r7
 8102b22:	bd80      	pop	{r7, pc}
 8102b24:	0aaaaaaa 	.word	0x0aaaaaaa

08102b28 <_ZSt12__relocate_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8102b28:	b5b0      	push	{r4, r5, r7, lr}
 8102b2a:	b084      	sub	sp, #16
 8102b2c:	af00      	add	r7, sp, #0
 8102b2e:	60f8      	str	r0, [r7, #12]
 8102b30:	60b9      	str	r1, [r7, #8]
 8102b32:	607a      	str	r2, [r7, #4]
 8102b34:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 8102b36:	68f8      	ldr	r0, [r7, #12]
 8102b38:	f000 f8f0 	bl	8102d1c <_ZSt12__niter_baseIP8SMessageET_S2_>
 8102b3c:	4604      	mov	r4, r0
 8102b3e:	68b8      	ldr	r0, [r7, #8]
 8102b40:	f000 f8ec 	bl	8102d1c <_ZSt12__niter_baseIP8SMessageET_S2_>
 8102b44:	4605      	mov	r5, r0
 8102b46:	6878      	ldr	r0, [r7, #4]
 8102b48:	f000 f8e8 	bl	8102d1c <_ZSt12__niter_baseIP8SMessageET_S2_>
 8102b4c:	4602      	mov	r2, r0
 8102b4e:	683b      	ldr	r3, [r7, #0]
 8102b50:	4629      	mov	r1, r5
 8102b52:	4620      	mov	r0, r4
 8102b54:	f000 f8ee 	bl	8102d34 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>
 8102b58:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 8102b5a:	4618      	mov	r0, r3
 8102b5c:	3710      	adds	r7, #16
 8102b5e:	46bd      	mov	sp, r7
 8102b60:	bdb0      	pop	{r4, r5, r7, pc}

08102b62 <_ZNSt13move_iteratorIP8SMessageEC1ES1_>:
      move_iterator(iterator_type __i)
 8102b62:	b580      	push	{r7, lr}
 8102b64:	b082      	sub	sp, #8
 8102b66:	af00      	add	r7, sp, #0
 8102b68:	6078      	str	r0, [r7, #4]
 8102b6a:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8102b6c:	463b      	mov	r3, r7
 8102b6e:	4618      	mov	r0, r3
 8102b70:	f000 f90a 	bl	8102d88 <_ZSt4moveIRP8SMessageEONSt16remove_referenceIT_E4typeEOS4_>
 8102b74:	4603      	mov	r3, r0
 8102b76:	681a      	ldr	r2, [r3, #0]
 8102b78:	687b      	ldr	r3, [r7, #4]
 8102b7a:	601a      	str	r2, [r3, #0]
 8102b7c:	687b      	ldr	r3, [r7, #4]
 8102b7e:	4618      	mov	r0, r3
 8102b80:	3708      	adds	r7, #8
 8102b82:	46bd      	mov	sp, r7
 8102b84:	bd80      	pop	{r7, pc}

08102b86 <_ZSt18uninitialized_copyISt13move_iteratorIP8SMessageES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8102b86:	b580      	push	{r7, lr}
 8102b88:	b086      	sub	sp, #24
 8102b8a:	af00      	add	r7, sp, #0
 8102b8c:	60f8      	str	r0, [r7, #12]
 8102b8e:	60b9      	str	r1, [r7, #8]
 8102b90:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 8102b92:	2301      	movs	r3, #1
 8102b94:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 8102b96:	2301      	movs	r3, #1
 8102b98:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8102b9a:	687a      	ldr	r2, [r7, #4]
 8102b9c:	68b9      	ldr	r1, [r7, #8]
 8102b9e:	68f8      	ldr	r0, [r7, #12]
 8102ba0:	f000 f8fd 	bl	8102d9e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIP8SMessageES4_EET0_T_S7_S6_>
 8102ba4:	4603      	mov	r3, r0
    }
 8102ba6:	4618      	mov	r0, r3
 8102ba8:	3718      	adds	r7, #24
 8102baa:	46bd      	mov	sp, r7
 8102bac:	bd80      	pop	{r7, pc}

08102bae <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>:
      _M_addr() noexcept
 8102bae:	b480      	push	{r7}
 8102bb0:	b083      	sub	sp, #12
 8102bb2:	af00      	add	r7, sp, #0
 8102bb4:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8102bb6:	687b      	ldr	r3, [r7, #4]
 8102bb8:	4618      	mov	r0, r3
 8102bba:	370c      	adds	r7, #12
 8102bbc:	46bd      	mov	sp, r7
 8102bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bc2:	4770      	bx	lr

08102bc4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8102bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8102bc8:	b086      	sub	sp, #24
 8102bca:	af02      	add	r7, sp, #8
 8102bcc:	60f8      	str	r0, [r7, #12]
 8102bce:	60b9      	str	r1, [r7, #8]
 8102bd0:	607a      	str	r2, [r7, #4]
 8102bd2:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8102bd4:	68bb      	ldr	r3, [r7, #8]
 8102bd6:	4619      	mov	r1, r3
 8102bd8:	2018      	movs	r0, #24
 8102bda:	f7fd fe87 	bl	81008ec <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8102bde:	68f8      	ldr	r0, [r7, #12]
 8102be0:	f7ff febe 	bl	8102960 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8102be4:	4604      	mov	r4, r0
 8102be6:	68b8      	ldr	r0, [r7, #8]
 8102be8:	f7ff fb28 	bl	810223c <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 8102bec:	4605      	mov	r5, r0
 8102bee:	6878      	ldr	r0, [r7, #4]
 8102bf0:	f7ff fb41 	bl	8102276 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8102bf4:	4606      	mov	r6, r0
 8102bf6:	6838      	ldr	r0, [r7, #0]
 8102bf8:	f7ff fb48 	bl	810228c <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8102bfc:	4680      	mov	r8, r0
 8102bfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8102c00:	f7ff fb4f 	bl	81022a2 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8102c04:	4603      	mov	r3, r0
 8102c06:	9300      	str	r3, [sp, #0]
 8102c08:	4643      	mov	r3, r8
 8102c0a:	4632      	mov	r2, r6
 8102c0c:	4629      	mov	r1, r5
 8102c0e:	4620      	mov	r0, r4
 8102c10:	f000 f8d5 	bl	8102dbe <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 8102c14:	bf00      	nop
 8102c16:	3710      	adds	r7, #16
 8102c18:	46bd      	mov	sp, r7
 8102c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08102c1e <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE7destroyIS7_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 8102c1e:	b480      	push	{r7}
 8102c20:	b083      	sub	sp, #12
 8102c22:	af00      	add	r7, sp, #0
 8102c24:	6078      	str	r0, [r7, #4]
 8102c26:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8102c28:	bf00      	nop
 8102c2a:	370c      	adds	r7, #12
 8102c2c:	46bd      	mov	sp, r7
 8102c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c32:	4770      	bx	lr

08102c34 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8102c34:	b580      	push	{r7, lr}
 8102c36:	b084      	sub	sp, #16
 8102c38:	af00      	add	r7, sp, #0
 8102c3a:	60f8      	str	r0, [r7, #12]
 8102c3c:	60b9      	str	r1, [r7, #8]
 8102c3e:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8102c40:	687a      	ldr	r2, [r7, #4]
 8102c42:	4613      	mov	r3, r2
 8102c44:	005b      	lsls	r3, r3, #1
 8102c46:	4413      	add	r3, r2
 8102c48:	00db      	lsls	r3, r3, #3
 8102c4a:	4619      	mov	r1, r3
 8102c4c:	68b8      	ldr	r0, [r7, #8]
 8102c4e:	f004 fdcd 	bl	81077ec <_ZdlPvj>
      }
 8102c52:	bf00      	nop
 8102c54:	3710      	adds	r7, #16
 8102c56:	46bd      	mov	sp, r7
 8102c58:	bd80      	pop	{r7, pc}

08102c5a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8102c5a:	b580      	push	{r7, lr}
 8102c5c:	b082      	sub	sp, #8
 8102c5e:	af00      	add	r7, sp, #0
 8102c60:	6078      	str	r0, [r7, #4]
 8102c62:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8102c64:	2200      	movs	r2, #0
 8102c66:	6839      	ldr	r1, [r7, #0]
 8102c68:	6878      	ldr	r0, [r7, #4]
 8102c6a:	f000 f8c7 	bl	8102dfc <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv>
 8102c6e:	4603      	mov	r3, r0
 8102c70:	4618      	mov	r0, r3
 8102c72:	3708      	adds	r7, #8
 8102c74:	46bd      	mov	sp, r7
 8102c76:	bd80      	pop	{r7, pc}

08102c78 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRS3_RS6_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8102c78:	b590      	push	{r4, r7, lr}
 8102c7a:	b085      	sub	sp, #20
 8102c7c:	af00      	add	r7, sp, #0
 8102c7e:	60f8      	str	r0, [r7, #12]
 8102c80:	60b9      	str	r1, [r7, #8]
 8102c82:	607a      	str	r2, [r7, #4]
 8102c84:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8102c86:	6878      	ldr	r0, [r7, #4]
 8102c88:	f7fe fd3b 	bl	8101702 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8102c8c:	4604      	mov	r4, r0
 8102c8e:	6838      	ldr	r0, [r7, #0]
 8102c90:	f7fe fd42 	bl	8101718 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8102c94:	4603      	mov	r3, r0
 8102c96:	4622      	mov	r2, r4
 8102c98:	68b9      	ldr	r1, [r7, #8]
 8102c9a:	68f8      	ldr	r0, [r7, #12]
 8102c9c:	f000 f8dc 	bl	8102e58 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRS3_RS6_EEEvPT_DpOT0_>
	}
 8102ca0:	bf00      	nop
 8102ca2:	3714      	adds	r7, #20
 8102ca4:	46bd      	mov	sp, r7
 8102ca6:	bd90      	pop	{r4, r7, pc}

08102ca8 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8102ca8:	b580      	push	{r7, lr}
 8102caa:	b082      	sub	sp, #8
 8102cac:	af00      	add	r7, sp, #0
 8102cae:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8102cb0:	6878      	ldr	r0, [r7, #4]
 8102cb2:	f000 f8ef 	bl	8102e94 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>
 8102cb6:	4603      	mov	r3, r0
 8102cb8:	4618      	mov	r0, r3
 8102cba:	3708      	adds	r7, #8
 8102cbc:	46bd      	mov	sp, r7
 8102cbe:	bd80      	pop	{r7, pc}

08102cc0 <_ZNSt16allocator_traitsISaI8SMessageEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8102cc0:	b580      	push	{r7, lr}
 8102cc2:	b082      	sub	sp, #8
 8102cc4:	af00      	add	r7, sp, #0
 8102cc6:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8102cc8:	6878      	ldr	r0, [r7, #4]
 8102cca:	f000 f8ee 	bl	8102eaa <_ZNKSt15__new_allocatorI8SMessageE8max_sizeEv>
 8102cce:	4603      	mov	r3, r0
      }
 8102cd0:	4618      	mov	r0, r3
 8102cd2:	3708      	adds	r7, #8
 8102cd4:	46bd      	mov	sp, r7
 8102cd6:	bd80      	pop	{r7, pc}

08102cd8 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8102cd8:	b480      	push	{r7}
 8102cda:	b083      	sub	sp, #12
 8102cdc:	af00      	add	r7, sp, #0
 8102cde:	6078      	str	r0, [r7, #4]
 8102ce0:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8102ce2:	683b      	ldr	r3, [r7, #0]
 8102ce4:	681a      	ldr	r2, [r3, #0]
 8102ce6:	687b      	ldr	r3, [r7, #4]
 8102ce8:	681b      	ldr	r3, [r3, #0]
 8102cea:	429a      	cmp	r2, r3
 8102cec:	d201      	bcs.n	8102cf2 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8102cee:	683b      	ldr	r3, [r7, #0]
 8102cf0:	e000      	b.n	8102cf4 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8102cf2:	687b      	ldr	r3, [r7, #4]
    }
 8102cf4:	4618      	mov	r0, r3
 8102cf6:	370c      	adds	r7, #12
 8102cf8:	46bd      	mov	sp, r7
 8102cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cfe:	4770      	bx	lr

08102d00 <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8102d00:	b480      	push	{r7}
 8102d02:	b083      	sub	sp, #12
 8102d04:	af00      	add	r7, sp, #0
 8102d06:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8102d08:	4b03      	ldr	r3, [pc, #12]	@ (8102d18 <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8102d0a:	4618      	mov	r0, r3
 8102d0c:	370c      	adds	r7, #12
 8102d0e:	46bd      	mov	sp, r7
 8102d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d14:	4770      	bx	lr
 8102d16:	bf00      	nop
 8102d18:	05555555 	.word	0x05555555

08102d1c <_ZSt12__niter_baseIP8SMessageET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8102d1c:	b480      	push	{r7}
 8102d1e:	b083      	sub	sp, #12
 8102d20:	af00      	add	r7, sp, #0
 8102d22:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8102d24:	687b      	ldr	r3, [r7, #4]
 8102d26:	4618      	mov	r0, r3
 8102d28:	370c      	adds	r7, #12
 8102d2a:	46bd      	mov	sp, r7
 8102d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d30:	4770      	bx	lr
	...

08102d34 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8102d34:	b580      	push	{r7, lr}
 8102d36:	b086      	sub	sp, #24
 8102d38:	af00      	add	r7, sp, #0
 8102d3a:	60f8      	str	r0, [r7, #12]
 8102d3c:	60b9      	str	r1, [r7, #8]
 8102d3e:	607a      	str	r2, [r7, #4]
 8102d40:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8102d42:	68ba      	ldr	r2, [r7, #8]
 8102d44:	68fb      	ldr	r3, [r7, #12]
 8102d46:	1ad3      	subs	r3, r2, r3
 8102d48:	10db      	asrs	r3, r3, #3
 8102d4a:	4a0e      	ldr	r2, [pc, #56]	@ (8102d84 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x50>)
 8102d4c:	fb02 f303 	mul.w	r3, r2, r3
 8102d50:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8102d52:	697b      	ldr	r3, [r7, #20]
 8102d54:	2b00      	cmp	r3, #0
 8102d56:	dd09      	ble.n	8102d6c <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x38>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8102d58:	697a      	ldr	r2, [r7, #20]
 8102d5a:	4613      	mov	r3, r2
 8102d5c:	005b      	lsls	r3, r3, #1
 8102d5e:	4413      	add	r3, r2
 8102d60:	00db      	lsls	r3, r3, #3
 8102d62:	461a      	mov	r2, r3
 8102d64:	68f9      	ldr	r1, [r7, #12]
 8102d66:	6878      	ldr	r0, [r7, #4]
 8102d68:	f004 feec 	bl	8107b44 <memmove>
      return __result + __count;
 8102d6c:	697a      	ldr	r2, [r7, #20]
 8102d6e:	4613      	mov	r3, r2
 8102d70:	005b      	lsls	r3, r3, #1
 8102d72:	4413      	add	r3, r2
 8102d74:	00db      	lsls	r3, r3, #3
 8102d76:	461a      	mov	r2, r3
 8102d78:	687b      	ldr	r3, [r7, #4]
 8102d7a:	4413      	add	r3, r2
    }
 8102d7c:	4618      	mov	r0, r3
 8102d7e:	3718      	adds	r7, #24
 8102d80:	46bd      	mov	sp, r7
 8102d82:	bd80      	pop	{r7, pc}
 8102d84:	aaaaaaab 	.word	0xaaaaaaab

08102d88 <_ZSt4moveIRP8SMessageEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8102d88:	b480      	push	{r7}
 8102d8a:	b083      	sub	sp, #12
 8102d8c:	af00      	add	r7, sp, #0
 8102d8e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8102d90:	687b      	ldr	r3, [r7, #4]
 8102d92:	4618      	mov	r0, r3
 8102d94:	370c      	adds	r7, #12
 8102d96:	46bd      	mov	sp, r7
 8102d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d9c:	4770      	bx	lr

08102d9e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIP8SMessageES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8102d9e:	b580      	push	{r7, lr}
 8102da0:	b084      	sub	sp, #16
 8102da2:	af00      	add	r7, sp, #0
 8102da4:	60f8      	str	r0, [r7, #12]
 8102da6:	60b9      	str	r1, [r7, #8]
 8102da8:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8102daa:	687a      	ldr	r2, [r7, #4]
 8102dac:	68b9      	ldr	r1, [r7, #8]
 8102dae:	68f8      	ldr	r0, [r7, #12]
 8102db0:	f000 f887 	bl	8102ec2 <_ZSt4copyISt13move_iteratorIP8SMessageES2_ET0_T_S5_S4_>
 8102db4:	4603      	mov	r3, r0
 8102db6:	4618      	mov	r0, r3
 8102db8:	3710      	adds	r7, #16
 8102dba:	46bd      	mov	sp, r7
 8102dbc:	bd80      	pop	{r7, pc}

08102dbe <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8102dbe:	b5b0      	push	{r4, r5, r7, lr}
 8102dc0:	b086      	sub	sp, #24
 8102dc2:	af02      	add	r7, sp, #8
 8102dc4:	60f8      	str	r0, [r7, #12]
 8102dc6:	60b9      	str	r1, [r7, #8]
 8102dc8:	607a      	str	r2, [r7, #4]
 8102dca:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8102dcc:	6878      	ldr	r0, [r7, #4]
 8102dce:	f7ff fa52 	bl	8102276 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8102dd2:	4604      	mov	r4, r0
 8102dd4:	6838      	ldr	r0, [r7, #0]
 8102dd6:	f7ff fa59 	bl	810228c <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8102dda:	4605      	mov	r5, r0
 8102ddc:	6a38      	ldr	r0, [r7, #32]
 8102dde:	f7ff fa60 	bl	81022a2 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8102de2:	4603      	mov	r3, r0
 8102de4:	9300      	str	r3, [sp, #0]
 8102de6:	462b      	mov	r3, r5
 8102de8:	4622      	mov	r2, r4
 8102dea:	68b9      	ldr	r1, [r7, #8]
 8102dec:	68f8      	ldr	r0, [r7, #12]
 8102dee:	f000 f890 	bl	8102f12 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvPT_DpOT0_>
	}
 8102df2:	bf00      	nop
 8102df4:	3710      	adds	r7, #16
 8102df6:	46bd      	mov	sp, r7
 8102df8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08102dfc <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8102dfc:	b580      	push	{r7, lr}
 8102dfe:	b084      	sub	sp, #16
 8102e00:	af00      	add	r7, sp, #0
 8102e02:	60f8      	str	r0, [r7, #12]
 8102e04:	60b9      	str	r1, [r7, #8]
 8102e06:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8102e08:	68f8      	ldr	r0, [r7, #12]
 8102e0a:	f000 f8ab 	bl	8102f64 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE11_M_max_sizeEv>
 8102e0e:	4602      	mov	r2, r0
 8102e10:	68bb      	ldr	r3, [r7, #8]
 8102e12:	4293      	cmp	r3, r2
 8102e14:	bf8c      	ite	hi
 8102e16:	2301      	movhi	r3, #1
 8102e18:	2300      	movls	r3, #0
 8102e1a:	b2db      	uxtb	r3, r3
 8102e1c:	2b00      	cmp	r3, #0
 8102e1e:	bf14      	ite	ne
 8102e20:	2301      	movne	r3, #1
 8102e22:	2300      	moveq	r3, #0
 8102e24:	b2db      	uxtb	r3, r3
 8102e26:	2b00      	cmp	r3, #0
 8102e28:	d007      	beq.n	8102e3a <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8102e2a:	68bb      	ldr	r3, [r7, #8]
 8102e2c:	4a09      	ldr	r2, [pc, #36]	@ (8102e54 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv+0x58>)
 8102e2e:	4293      	cmp	r3, r2
 8102e30:	d901      	bls.n	8102e36 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8102e32:	f004 fdae 	bl	8107992 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8102e36:	f004 fda9 	bl	810798c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8102e3a:	68ba      	ldr	r2, [r7, #8]
 8102e3c:	4613      	mov	r3, r2
 8102e3e:	005b      	lsls	r3, r3, #1
 8102e40:	4413      	add	r3, r2
 8102e42:	00db      	lsls	r3, r3, #3
 8102e44:	4618      	mov	r0, r3
 8102e46:	f004 fcd3 	bl	81077f0 <_Znwj>
 8102e4a:	4603      	mov	r3, r0
      }
 8102e4c:	4618      	mov	r0, r3
 8102e4e:	3710      	adds	r7, #16
 8102e50:	46bd      	mov	sp, r7
 8102e52:	bd80      	pop	{r7, pc}
 8102e54:	0aaaaaaa 	.word	0x0aaaaaaa

08102e58 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRS3_RS6_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8102e58:	b5b0      	push	{r4, r5, r7, lr}
 8102e5a:	b084      	sub	sp, #16
 8102e5c:	af00      	add	r7, sp, #0
 8102e5e:	60f8      	str	r0, [r7, #12]
 8102e60:	60b9      	str	r1, [r7, #8]
 8102e62:	607a      	str	r2, [r7, #4]
 8102e64:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8102e66:	68bb      	ldr	r3, [r7, #8]
 8102e68:	4619      	mov	r1, r3
 8102e6a:	2008      	movs	r0, #8
 8102e6c:	f7fd fd3e 	bl	81008ec <_ZnwjPv>
 8102e70:	4604      	mov	r4, r0
 8102e72:	6878      	ldr	r0, [r7, #4]
 8102e74:	f7fe fc45 	bl	8101702 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8102e78:	4605      	mov	r5, r0
 8102e7a:	6838      	ldr	r0, [r7, #0]
 8102e7c:	f7fe fc4c 	bl	8101718 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8102e80:	4603      	mov	r3, r0
 8102e82:	461a      	mov	r2, r3
 8102e84:	4629      	mov	r1, r5
 8102e86:	4620      	mov	r0, r4
 8102e88:	f000 f87a 	bl	8102f80 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IRS1_RS4_Lb1EEEOT_OT0_>
 8102e8c:	bf00      	nop
 8102e8e:	3710      	adds	r7, #16
 8102e90:	46bd      	mov	sp, r7
 8102e92:	bdb0      	pop	{r4, r5, r7, pc}

08102e94 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>:
      _M_addr() const noexcept
 8102e94:	b480      	push	{r7}
 8102e96:	b083      	sub	sp, #12
 8102e98:	af00      	add	r7, sp, #0
 8102e9a:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8102e9c:	687b      	ldr	r3, [r7, #4]
 8102e9e:	4618      	mov	r0, r3
 8102ea0:	370c      	adds	r7, #12
 8102ea2:	46bd      	mov	sp, r7
 8102ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ea8:	4770      	bx	lr

08102eaa <_ZNKSt15__new_allocatorI8SMessageE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8102eaa:	b580      	push	{r7, lr}
 8102eac:	b082      	sub	sp, #8
 8102eae:	af00      	add	r7, sp, #0
 8102eb0:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8102eb2:	6878      	ldr	r0, [r7, #4]
 8102eb4:	f7ff ff24 	bl	8102d00 <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv>
 8102eb8:	4603      	mov	r3, r0
 8102eba:	4618      	mov	r0, r3
 8102ebc:	3708      	adds	r7, #8
 8102ebe:	46bd      	mov	sp, r7
 8102ec0:	bd80      	pop	{r7, pc}

08102ec2 <_ZSt4copyISt13move_iteratorIP8SMessageES2_ET0_T_S5_S4_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8102ec2:	b590      	push	{r4, r7, lr}
 8102ec4:	b085      	sub	sp, #20
 8102ec6:	af00      	add	r7, sp, #0
 8102ec8:	60f8      	str	r0, [r7, #12]
 8102eca:	60b9      	str	r1, [r7, #8]
 8102ecc:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::reference>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8102ece:	68f8      	ldr	r0, [r7, #12]
 8102ed0:	f000 f86f 	bl	8102fb2 <_ZSt12__miter_baseIP8SMessageEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8102ed4:	4604      	mov	r4, r0
 8102ed6:	68b8      	ldr	r0, [r7, #8]
 8102ed8:	f000 f86b 	bl	8102fb2 <_ZSt12__miter_baseIP8SMessageEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8102edc:	4603      	mov	r3, r0
 8102ede:	687a      	ldr	r2, [r7, #4]
 8102ee0:	4619      	mov	r1, r3
 8102ee2:	4620      	mov	r0, r4
 8102ee4:	f000 f876 	bl	8102fd4 <_ZSt13__copy_move_aILb1EP8SMessageS1_ET1_T0_S3_S2_>
 8102ee8:	4603      	mov	r3, r0
    }
 8102eea:	4618      	mov	r0, r3
 8102eec:	3714      	adds	r7, #20
 8102eee:	46bd      	mov	sp, r7
 8102ef0:	bd90      	pop	{r4, r7, pc}

08102ef2 <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8102ef2:	b580      	push	{r7, lr}
 8102ef4:	b082      	sub	sp, #8
 8102ef6:	af00      	add	r7, sp, #0
 8102ef8:	6078      	str	r0, [r7, #4]
 8102efa:	6039      	str	r1, [r7, #0]
 8102efc:	687b      	ldr	r3, [r7, #4]
 8102efe:	683a      	ldr	r2, [r7, #0]
 8102f00:	4611      	mov	r1, r2
 8102f02:	4618      	mov	r0, r3
 8102f04:	f000 f889 	bl	810301a <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>
 8102f08:	687b      	ldr	r3, [r7, #4]
 8102f0a:	4618      	mov	r0, r3
 8102f0c:	3708      	adds	r7, #8
 8102f0e:	46bd      	mov	sp, r7
 8102f10:	bd80      	pop	{r7, pc}

08102f12 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8102f12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8102f14:	b087      	sub	sp, #28
 8102f16:	af00      	add	r7, sp, #0
 8102f18:	60f8      	str	r0, [r7, #12]
 8102f1a:	60b9      	str	r1, [r7, #8]
 8102f1c:	607a      	str	r2, [r7, #4]
 8102f1e:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8102f20:	68bb      	ldr	r3, [r7, #8]
 8102f22:	4619      	mov	r1, r3
 8102f24:	2008      	movs	r0, #8
 8102f26:	f7fd fce1 	bl	81008ec <_ZnwjPv>
 8102f2a:	4604      	mov	r4, r0
 8102f2c:	6878      	ldr	r0, [r7, #4]
 8102f2e:	f7ff f9a2 	bl	8102276 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8102f32:	6838      	ldr	r0, [r7, #0]
 8102f34:	f7ff f9aa 	bl	810228c <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8102f38:	4602      	mov	r2, r0
 8102f3a:	f107 0314 	add.w	r3, r7, #20
 8102f3e:	4611      	mov	r1, r2
 8102f40:	4618      	mov	r0, r3
 8102f42:	f7ff ffd6 	bl	8102ef2 <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>
 8102f46:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8102f48:	f7ff f9ab 	bl	81022a2 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8102f4c:	f107 0214 	add.w	r2, r7, #20
 8102f50:	4633      	mov	r3, r6
 8102f52:	4629      	mov	r1, r5
 8102f54:	4620      	mov	r0, r4
 8102f56:	f000 f870 	bl	810303a <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 8102f5a:	bf00      	nop
 8102f5c:	371c      	adds	r7, #28
 8102f5e:	46bd      	mov	sp, r7
 8102f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08102f64 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8102f64:	b480      	push	{r7}
 8102f66:	b083      	sub	sp, #12
 8102f68:	af00      	add	r7, sp, #0
 8102f6a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8102f6c:	4b03      	ldr	r3, [pc, #12]	@ (8102f7c <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE11_M_max_sizeEv+0x18>)
      }
 8102f6e:	4618      	mov	r0, r3
 8102f70:	370c      	adds	r7, #12
 8102f72:	46bd      	mov	sp, r7
 8102f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f78:	4770      	bx	lr
 8102f7a:	bf00      	nop
 8102f7c:	05555555 	.word	0x05555555

08102f80 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IRS1_RS4_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8102f80:	b580      	push	{r7, lr}
 8102f82:	b084      	sub	sp, #16
 8102f84:	af00      	add	r7, sp, #0
 8102f86:	60f8      	str	r0, [r7, #12]
 8102f88:	60b9      	str	r1, [r7, #8]
 8102f8a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8102f8c:	68b8      	ldr	r0, [r7, #8]
 8102f8e:	f7fe fbb8 	bl	8101702 <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8102f92:	4603      	mov	r3, r0
 8102f94:	781a      	ldrb	r2, [r3, #0]
 8102f96:	68fb      	ldr	r3, [r7, #12]
 8102f98:	701a      	strb	r2, [r3, #0]
 8102f9a:	6878      	ldr	r0, [r7, #4]
 8102f9c:	f7fe fbbc 	bl	8101718 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8102fa0:	4603      	mov	r3, r0
 8102fa2:	681a      	ldr	r2, [r3, #0]
 8102fa4:	68fb      	ldr	r3, [r7, #12]
 8102fa6:	605a      	str	r2, [r3, #4]
 8102fa8:	68fb      	ldr	r3, [r7, #12]
 8102faa:	4618      	mov	r0, r3
 8102fac:	3710      	adds	r7, #16
 8102fae:	46bd      	mov	sp, r7
 8102fb0:	bd80      	pop	{r7, pc}

08102fb2 <_ZSt12__miter_baseIP8SMessageEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    };

  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8102fb2:	b580      	push	{r7, lr}
 8102fb4:	b082      	sub	sp, #8
 8102fb6:	af00      	add	r7, sp, #0
 8102fb8:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8102fba:	1d3b      	adds	r3, r7, #4
 8102fbc:	4618      	mov	r0, r3
 8102fbe:	f000 f850 	bl	8103062 <_ZNKSt13move_iteratorIP8SMessageE4baseEv>
 8102fc2:	4603      	mov	r3, r0
 8102fc4:	4618      	mov	r0, r3
 8102fc6:	f000 f858 	bl	810307a <_ZSt12__miter_baseIP8SMessageET_S2_>
 8102fca:	4603      	mov	r3, r0
 8102fcc:	4618      	mov	r0, r3
 8102fce:	3708      	adds	r7, #8
 8102fd0:	46bd      	mov	sp, r7
 8102fd2:	bd80      	pop	{r7, pc}

08102fd4 <_ZSt13__copy_move_aILb1EP8SMessageS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8102fd4:	b5b0      	push	{r4, r5, r7, lr}
 8102fd6:	b084      	sub	sp, #16
 8102fd8:	af00      	add	r7, sp, #0
 8102fda:	60f8      	str	r0, [r7, #12]
 8102fdc:	60b9      	str	r1, [r7, #8]
 8102fde:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8102fe0:	68f8      	ldr	r0, [r7, #12]
 8102fe2:	f7ff fe9b 	bl	8102d1c <_ZSt12__niter_baseIP8SMessageET_S2_>
 8102fe6:	4604      	mov	r4, r0
 8102fe8:	68b8      	ldr	r0, [r7, #8]
 8102fea:	f7ff fe97 	bl	8102d1c <_ZSt12__niter_baseIP8SMessageET_S2_>
 8102fee:	4605      	mov	r5, r0
 8102ff0:	687b      	ldr	r3, [r7, #4]
 8102ff2:	4618      	mov	r0, r3
 8102ff4:	f7ff fe92 	bl	8102d1c <_ZSt12__niter_baseIP8SMessageET_S2_>
 8102ff8:	4603      	mov	r3, r0
 8102ffa:	461a      	mov	r2, r3
 8102ffc:	4629      	mov	r1, r5
 8102ffe:	4620      	mov	r0, r4
 8103000:	f000 f846 	bl	8103090 <_ZSt14__copy_move_a1ILb1EP8SMessageS1_ET1_T0_S3_S2_>
 8103004:	4602      	mov	r2, r0
 8103006:	1d3b      	adds	r3, r7, #4
 8103008:	4611      	mov	r1, r2
 810300a:	4618      	mov	r0, r3
 810300c:	f000 f850 	bl	81030b0 <_ZSt12__niter_wrapIP8SMessageET_RKS2_S2_>
 8103010:	4603      	mov	r3, r0
    }
 8103012:	4618      	mov	r0, r3
 8103014:	3710      	adds	r7, #16
 8103016:	46bd      	mov	sp, r7
 8103018:	bdb0      	pop	{r4, r5, r7, pc}

0810301a <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 810301a:	b480      	push	{r7}
 810301c:	b083      	sub	sp, #12
 810301e:	af00      	add	r7, sp, #0
 8103020:	6078      	str	r0, [r7, #4]
 8103022:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 8103024:	687b      	ldr	r3, [r7, #4]
 8103026:	683a      	ldr	r2, [r7, #0]
 8103028:	6812      	ldr	r2, [r2, #0]
 810302a:	601a      	str	r2, [r3, #0]
      { }
 810302c:	687b      	ldr	r3, [r7, #4]
 810302e:	4618      	mov	r0, r3
 8103030:	370c      	adds	r7, #12
 8103032:	46bd      	mov	sp, r7
 8103034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103038:	4770      	bx	lr

0810303a <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
  */
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      _GLIBCXX20_CONSTEXPR
      inline
      pair<_T1, _T2>::
 810303a:	b5b0      	push	{r4, r5, r7, lr}
 810303c:	b086      	sub	sp, #24
 810303e:	af02      	add	r7, sp, #8
 8103040:	60f8      	str	r0, [r7, #12]
 8103042:	7239      	strb	r1, [r7, #8]
 8103044:	607a      	str	r2, [r7, #4]
 8103046:	703b      	strb	r3, [r7, #0]
      pair(piecewise_construct_t,
	   tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8103048:	463a      	mov	r2, r7
 810304a:	f88d 4000 	strb.w	r4, [sp]
 810304e:	462b      	mov	r3, r5
 8103050:	6879      	ldr	r1, [r7, #4]
 8103052:	68f8      	ldr	r0, [r7, #12]
 8103054:	f000 f838 	bl	81030c8 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 8103058:	68fb      	ldr	r3, [r7, #12]
 810305a:	4618      	mov	r0, r3
 810305c:	3710      	adds	r7, #16
 810305e:	46bd      	mov	sp, r7
 8103060:	bdb0      	pop	{r4, r5, r7, pc}

08103062 <_ZNKSt13move_iteratorIP8SMessageE4baseEv>:
      base() const
 8103062:	b480      	push	{r7}
 8103064:	b083      	sub	sp, #12
 8103066:	af00      	add	r7, sp, #0
 8103068:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 810306a:	687b      	ldr	r3, [r7, #4]
 810306c:	681b      	ldr	r3, [r3, #0]
 810306e:	4618      	mov	r0, r3
 8103070:	370c      	adds	r7, #12
 8103072:	46bd      	mov	sp, r7
 8103074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103078:	4770      	bx	lr

0810307a <_ZSt12__miter_baseIP8SMessageET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 810307a:	b480      	push	{r7}
 810307c:	b083      	sub	sp, #12
 810307e:	af00      	add	r7, sp, #0
 8103080:	6078      	str	r0, [r7, #4]
    { return __it; }
 8103082:	687b      	ldr	r3, [r7, #4]
 8103084:	4618      	mov	r0, r3
 8103086:	370c      	adds	r7, #12
 8103088:	46bd      	mov	sp, r7
 810308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810308e:	4770      	bx	lr

08103090 <_ZSt14__copy_move_a1ILb1EP8SMessageS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8103090:	b580      	push	{r7, lr}
 8103092:	b084      	sub	sp, #16
 8103094:	af00      	add	r7, sp, #0
 8103096:	60f8      	str	r0, [r7, #12]
 8103098:	60b9      	str	r1, [r7, #8]
 810309a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 810309c:	687a      	ldr	r2, [r7, #4]
 810309e:	68b9      	ldr	r1, [r7, #8]
 81030a0:	68f8      	ldr	r0, [r7, #12]
 81030a2:	f000 f82b 	bl	81030fc <_ZSt14__copy_move_a2ILb1EP8SMessageS1_ET1_T0_S3_S2_>
 81030a6:	4603      	mov	r3, r0
 81030a8:	4618      	mov	r0, r3
 81030aa:	3710      	adds	r7, #16
 81030ac:	46bd      	mov	sp, r7
 81030ae:	bd80      	pop	{r7, pc}

081030b0 <_ZSt12__niter_wrapIP8SMessageET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 81030b0:	b480      	push	{r7}
 81030b2:	b083      	sub	sp, #12
 81030b4:	af00      	add	r7, sp, #0
 81030b6:	6078      	str	r0, [r7, #4]
 81030b8:	6039      	str	r1, [r7, #0]
    { return __res; }
 81030ba:	683b      	ldr	r3, [r7, #0]
 81030bc:	4618      	mov	r0, r3
 81030be:	370c      	adds	r7, #12
 81030c0:	46bd      	mov	sp, r7
 81030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030c6:	4770      	bx	lr

081030c8 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, size_t... _Indexes1,
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 81030c8:	b580      	push	{r7, lr}
 81030ca:	b084      	sub	sp, #16
 81030cc:	af00      	add	r7, sp, #0
 81030ce:	60f8      	str	r0, [r7, #12]
 81030d0:	60b9      	str	r1, [r7, #8]
 81030d2:	607a      	str	r2, [r7, #4]
 81030d4:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 81030d6:	68b8      	ldr	r0, [r7, #8]
 81030d8:	f000 f820 	bl	810311c <_ZSt3getILj0EJRKN19EventManagerCM4Task11EEventQueueEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 81030dc:	4603      	mov	r3, r0
 81030de:	4618      	mov	r0, r3
 81030e0:	f000 f829 	bl	8103136 <_ZSt7forwardIRKN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS4_E4typeE>
 81030e4:	4603      	mov	r3, r0
 81030e6:	781a      	ldrb	r2, [r3, #0]
 81030e8:	68fb      	ldr	r3, [r7, #12]
 81030ea:	701a      	strb	r2, [r3, #0]
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 81030ec:	68fb      	ldr	r3, [r7, #12]
 81030ee:	2200      	movs	r2, #0
 81030f0:	605a      	str	r2, [r3, #4]
      { }
 81030f2:	68fb      	ldr	r3, [r7, #12]
 81030f4:	4618      	mov	r0, r3
 81030f6:	3710      	adds	r7, #16
 81030f8:	46bd      	mov	sp, r7
 81030fa:	bd80      	pop	{r7, pc}

081030fc <_ZSt14__copy_move_a2ILb1EP8SMessageS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 81030fc:	b580      	push	{r7, lr}
 81030fe:	b084      	sub	sp, #16
 8103100:	af00      	add	r7, sp, #0
 8103102:	60f8      	str	r0, [r7, #12]
 8103104:	60b9      	str	r1, [r7, #8]
 8103106:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8103108:	687a      	ldr	r2, [r7, #4]
 810310a:	68b9      	ldr	r1, [r7, #8]
 810310c:	68f8      	ldr	r0, [r7, #12]
 810310e:	f000 f81d 	bl	810314c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8SMessageEEPT_PKS4_S7_S5_>
 8103112:	4603      	mov	r3, r0
    }
 8103114:	4618      	mov	r0, r3
 8103116:	3710      	adds	r7, #16
 8103118:	46bd      	mov	sp, r7
 810311a:	bd80      	pop	{r7, pc}

0810311c <_ZSt3getILj0EJRKN19EventManagerCM4Task11EEventQueueEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 810311c:	b580      	push	{r7, lr}
 810311e:	b082      	sub	sp, #8
 8103120:	af00      	add	r7, sp, #0
 8103122:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8103124:	687b      	ldr	r3, [r7, #4]
 8103126:	4618      	mov	r0, r3
 8103128:	f000 f83a 	bl	81031a0 <_ZSt12__get_helperILj0ERKN19EventManagerCM4Task11EEventQueueEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 810312c:	4603      	mov	r3, r0
 810312e:	4618      	mov	r0, r3
 8103130:	3708      	adds	r7, #8
 8103132:	46bd      	mov	sp, r7
 8103134:	bd80      	pop	{r7, pc}

08103136 <_ZSt7forwardIRKN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8103136:	b480      	push	{r7}
 8103138:	b083      	sub	sp, #12
 810313a:	af00      	add	r7, sp, #0
 810313c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810313e:	687b      	ldr	r3, [r7, #4]
 8103140:	4618      	mov	r0, r3
 8103142:	370c      	adds	r7, #12
 8103144:	46bd      	mov	sp, r7
 8103146:	f85d 7b04 	ldr.w	r7, [sp], #4
 810314a:	4770      	bx	lr

0810314c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8SMessageEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 810314c:	b580      	push	{r7, lr}
 810314e:	b086      	sub	sp, #24
 8103150:	af00      	add	r7, sp, #0
 8103152:	60f8      	str	r0, [r7, #12]
 8103154:	60b9      	str	r1, [r7, #8]
 8103156:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8103158:	68ba      	ldr	r2, [r7, #8]
 810315a:	68fb      	ldr	r3, [r7, #12]
 810315c:	1ad3      	subs	r3, r2, r3
 810315e:	10db      	asrs	r3, r3, #3
 8103160:	4a0e      	ldr	r2, [pc, #56]	@ (810319c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8SMessageEEPT_PKS4_S7_S5_+0x50>)
 8103162:	fb02 f303 	mul.w	r3, r2, r3
 8103166:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8103168:	697b      	ldr	r3, [r7, #20]
 810316a:	2b00      	cmp	r3, #0
 810316c:	d009      	beq.n	8103182 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8SMessageEEPT_PKS4_S7_S5_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 810316e:	697a      	ldr	r2, [r7, #20]
 8103170:	4613      	mov	r3, r2
 8103172:	005b      	lsls	r3, r3, #1
 8103174:	4413      	add	r3, r2
 8103176:	00db      	lsls	r3, r3, #3
 8103178:	461a      	mov	r2, r3
 810317a:	68f9      	ldr	r1, [r7, #12]
 810317c:	6878      	ldr	r0, [r7, #4]
 810317e:	f004 fce1 	bl	8107b44 <memmove>
	  return __result + _Num;
 8103182:	697a      	ldr	r2, [r7, #20]
 8103184:	4613      	mov	r3, r2
 8103186:	005b      	lsls	r3, r3, #1
 8103188:	4413      	add	r3, r2
 810318a:	00db      	lsls	r3, r3, #3
 810318c:	461a      	mov	r2, r3
 810318e:	687b      	ldr	r3, [r7, #4]
 8103190:	4413      	add	r3, r2
	}
 8103192:	4618      	mov	r0, r3
 8103194:	3718      	adds	r7, #24
 8103196:	46bd      	mov	sp, r7
 8103198:	bd80      	pop	{r7, pc}
 810319a:	bf00      	nop
 810319c:	aaaaaaab 	.word	0xaaaaaaab

081031a0 <_ZSt12__get_helperILj0ERKN19EventManagerCM4Task11EEventQueueEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 81031a0:	b580      	push	{r7, lr}
 81031a2:	b082      	sub	sp, #8
 81031a4:	af00      	add	r7, sp, #0
 81031a6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 81031a8:	6878      	ldr	r0, [r7, #4]
 81031aa:	f000 f805 	bl	81031b8 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEE7_M_headERS4_>
 81031ae:	4603      	mov	r3, r0
 81031b0:	4618      	mov	r0, r3
 81031b2:	3708      	adds	r7, #8
 81031b4:	46bd      	mov	sp, r7
 81031b6:	bd80      	pop	{r7, pc}

081031b8 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 81031b8:	b580      	push	{r7, lr}
 81031ba:	b082      	sub	sp, #8
 81031bc:	af00      	add	r7, sp, #0
 81031be:	6078      	str	r0, [r7, #4]
 81031c0:	687b      	ldr	r3, [r7, #4]
 81031c2:	4618      	mov	r0, r3
 81031c4:	f000 f805 	bl	81031d2 <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EE7_M_headERS4_>
 81031c8:	4603      	mov	r3, r0
 81031ca:	4618      	mov	r0, r3
 81031cc:	3708      	adds	r7, #8
 81031ce:	46bd      	mov	sp, r7
 81031d0:	bd80      	pop	{r7, pc}

081031d2 <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 81031d2:	b480      	push	{r7}
 81031d4:	b083      	sub	sp, #12
 81031d6:	af00      	add	r7, sp, #0
 81031d8:	6078      	str	r0, [r7, #4]
 81031da:	687b      	ldr	r3, [r7, #4]
 81031dc:	681b      	ldr	r3, [r3, #0]
 81031de:	4618      	mov	r0, r3
 81031e0:	370c      	adds	r7, #12
 81031e2:	46bd      	mov	sp, r7
 81031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031e8:	4770      	bx	lr
	...

081031ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81031ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8103224 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81031f0:	f000 f826 	bl	8103240 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81031f4:	480c      	ldr	r0, [pc, #48]	@ (8103228 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81031f6:	490d      	ldr	r1, [pc, #52]	@ (810322c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81031f8:	4a0d      	ldr	r2, [pc, #52]	@ (8103230 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81031fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81031fc:	e002      	b.n	8103204 <LoopCopyDataInit>

081031fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81031fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8103200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8103202:	3304      	adds	r3, #4

08103204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8103204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8103206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8103208:	d3f9      	bcc.n	81031fe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810320a:	4a0a      	ldr	r2, [pc, #40]	@ (8103234 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 810320c:	4c0a      	ldr	r4, [pc, #40]	@ (8103238 <LoopFillZerobss+0x22>)
  movs r3, #0
 810320e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8103210:	e001      	b.n	8103216 <LoopFillZerobss>

08103212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8103212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8103214:	3204      	adds	r2, #4

08103216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8103216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8103218:	d3fb      	bcc.n	8103212 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810321a:	f004 fd65 	bl	8107ce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810321e:	f7fd f98b 	bl	8100538 <main>
  bx  lr
 8103222:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8103224:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8103228:	10000000 	.word	0x10000000
  ldr r1, =_edata
 810322c:	10000064 	.word	0x10000064
  ldr r2, =_sidata
 8103230:	08107eb8 	.word	0x08107eb8
  ldr r2, =_sbss
 8103234:	10000064 	.word	0x10000064
  ldr r4, =_ebss
 8103238:	10004c18 	.word	0x10004c18

0810323c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 810323c:	e7fe      	b.n	810323c <ADC3_IRQHandler>
	...

08103240 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8103240:	b480      	push	{r7}
 8103242:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8103244:	4b0b      	ldr	r3, [pc, #44]	@ (8103274 <SystemInit+0x34>)
 8103246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810324a:	4a0a      	ldr	r2, [pc, #40]	@ (8103274 <SystemInit+0x34>)
 810324c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8103250:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8103254:	4b07      	ldr	r3, [pc, #28]	@ (8103274 <SystemInit+0x34>)
 8103256:	691b      	ldr	r3, [r3, #16]
 8103258:	4a06      	ldr	r2, [pc, #24]	@ (8103274 <SystemInit+0x34>)
 810325a:	f043 0310 	orr.w	r3, r3, #16
 810325e:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8103260:	4b04      	ldr	r3, [pc, #16]	@ (8103274 <SystemInit+0x34>)
 8103262:	f04f 6201 	mov.w	r2, #135266304	@ 0x8100000
 8103266:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8103268:	bf00      	nop
 810326a:	46bd      	mov	sp, r7
 810326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103270:	4770      	bx	lr
 8103272:	bf00      	nop
 8103274:	e000ed00 	.word	0xe000ed00

08103278 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8103278:	b580      	push	{r7, lr}
 810327a:	b082      	sub	sp, #8
 810327c:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810327e:	4b28      	ldr	r3, [pc, #160]	@ (8103320 <HAL_Init+0xa8>)
 8103280:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8103284:	4a26      	ldr	r2, [pc, #152]	@ (8103320 <HAL_Init+0xa8>)
 8103286:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 810328a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810328e:	4b24      	ldr	r3, [pc, #144]	@ (8103320 <HAL_Init+0xa8>)
 8103290:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8103294:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8103298:	603b      	str	r3, [r7, #0]
 810329a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 810329c:	4b21      	ldr	r3, [pc, #132]	@ (8103324 <HAL_Init+0xac>)
 810329e:	681b      	ldr	r3, [r3, #0]
 81032a0:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 81032a4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 81032a8:	4a1e      	ldr	r2, [pc, #120]	@ (8103324 <HAL_Init+0xac>)
 81032aa:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 81032ae:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81032b0:	4b1c      	ldr	r3, [pc, #112]	@ (8103324 <HAL_Init+0xac>)
 81032b2:	681b      	ldr	r3, [r3, #0]
 81032b4:	4a1b      	ldr	r2, [pc, #108]	@ (8103324 <HAL_Init+0xac>)
 81032b6:	f043 0301 	orr.w	r3, r3, #1
 81032ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81032bc:	2003      	movs	r0, #3
 81032be:	f000 f8fa 	bl	81034b6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81032c2:	f000 fa2b 	bl	810371c <HAL_RCC_GetSysClockFreq>
 81032c6:	4602      	mov	r2, r0
 81032c8:	4b15      	ldr	r3, [pc, #84]	@ (8103320 <HAL_Init+0xa8>)
 81032ca:	699b      	ldr	r3, [r3, #24]
 81032cc:	0a1b      	lsrs	r3, r3, #8
 81032ce:	f003 030f 	and.w	r3, r3, #15
 81032d2:	4915      	ldr	r1, [pc, #84]	@ (8103328 <HAL_Init+0xb0>)
 81032d4:	5ccb      	ldrb	r3, [r1, r3]
 81032d6:	f003 031f 	and.w	r3, r3, #31
 81032da:	fa22 f303 	lsr.w	r3, r2, r3
 81032de:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81032e0:	4b0f      	ldr	r3, [pc, #60]	@ (8103320 <HAL_Init+0xa8>)
 81032e2:	699b      	ldr	r3, [r3, #24]
 81032e4:	f003 030f 	and.w	r3, r3, #15
 81032e8:	4a0f      	ldr	r2, [pc, #60]	@ (8103328 <HAL_Init+0xb0>)
 81032ea:	5cd3      	ldrb	r3, [r2, r3]
 81032ec:	f003 031f 	and.w	r3, r3, #31
 81032f0:	687a      	ldr	r2, [r7, #4]
 81032f2:	fa22 f303 	lsr.w	r3, r2, r3
 81032f6:	4a0d      	ldr	r2, [pc, #52]	@ (810332c <HAL_Init+0xb4>)
 81032f8:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81032fa:	4b0c      	ldr	r3, [pc, #48]	@ (810332c <HAL_Init+0xb4>)
 81032fc:	681b      	ldr	r3, [r3, #0]
 81032fe:	4a0c      	ldr	r2, [pc, #48]	@ (8103330 <HAL_Init+0xb8>)
 8103300:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8103302:	2000      	movs	r0, #0
 8103304:	f7fd fa00 	bl	8100708 <HAL_InitTick>
 8103308:	4603      	mov	r3, r0
 810330a:	2b00      	cmp	r3, #0
 810330c:	d001      	beq.n	8103312 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810330e:	2301      	movs	r3, #1
 8103310:	e002      	b.n	8103318 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8103312:	f7fd f9d3 	bl	81006bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8103316:	2300      	movs	r3, #0
}
 8103318:	4618      	mov	r0, r3
 810331a:	3708      	adds	r7, #8
 810331c:	46bd      	mov	sp, r7
 810331e:	bd80      	pop	{r7, pc}
 8103320:	58024400 	.word	0x58024400
 8103324:	40024400 	.word	0x40024400
 8103328:	08107e9c 	.word	0x08107e9c
 810332c:	10000004 	.word	0x10000004
 8103330:	10000000 	.word	0x10000000

08103334 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8103334:	b480      	push	{r7}
 8103336:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8103338:	4b06      	ldr	r3, [pc, #24]	@ (8103354 <HAL_IncTick+0x20>)
 810333a:	781b      	ldrb	r3, [r3, #0]
 810333c:	461a      	mov	r2, r3
 810333e:	4b06      	ldr	r3, [pc, #24]	@ (8103358 <HAL_IncTick+0x24>)
 8103340:	681b      	ldr	r3, [r3, #0]
 8103342:	4413      	add	r3, r2
 8103344:	4a04      	ldr	r2, [pc, #16]	@ (8103358 <HAL_IncTick+0x24>)
 8103346:	6013      	str	r3, [r2, #0]
}
 8103348:	bf00      	nop
 810334a:	46bd      	mov	sp, r7
 810334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103350:	4770      	bx	lr
 8103352:	bf00      	nop
 8103354:	1000000c 	.word	0x1000000c
 8103358:	100000e0 	.word	0x100000e0

0810335c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810335c:	b480      	push	{r7}
 810335e:	b085      	sub	sp, #20
 8103360:	af00      	add	r7, sp, #0
 8103362:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8103364:	687b      	ldr	r3, [r7, #4]
 8103366:	f003 0307 	and.w	r3, r3, #7
 810336a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 810336c:	4b0c      	ldr	r3, [pc, #48]	@ (81033a0 <__NVIC_SetPriorityGrouping+0x44>)
 810336e:	68db      	ldr	r3, [r3, #12]
 8103370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8103372:	68ba      	ldr	r2, [r7, #8]
 8103374:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8103378:	4013      	ands	r3, r2
 810337a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 810337c:	68fb      	ldr	r3, [r7, #12]
 810337e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8103380:	68bb      	ldr	r3, [r7, #8]
 8103382:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8103384:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8103388:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810338c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810338e:	4a04      	ldr	r2, [pc, #16]	@ (81033a0 <__NVIC_SetPriorityGrouping+0x44>)
 8103390:	68bb      	ldr	r3, [r7, #8]
 8103392:	60d3      	str	r3, [r2, #12]
}
 8103394:	bf00      	nop
 8103396:	3714      	adds	r7, #20
 8103398:	46bd      	mov	sp, r7
 810339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810339e:	4770      	bx	lr
 81033a0:	e000ed00 	.word	0xe000ed00

081033a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81033a4:	b480      	push	{r7}
 81033a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81033a8:	4b04      	ldr	r3, [pc, #16]	@ (81033bc <__NVIC_GetPriorityGrouping+0x18>)
 81033aa:	68db      	ldr	r3, [r3, #12]
 81033ac:	0a1b      	lsrs	r3, r3, #8
 81033ae:	f003 0307 	and.w	r3, r3, #7
}
 81033b2:	4618      	mov	r0, r3
 81033b4:	46bd      	mov	sp, r7
 81033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033ba:	4770      	bx	lr
 81033bc:	e000ed00 	.word	0xe000ed00

081033c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81033c0:	b480      	push	{r7}
 81033c2:	b083      	sub	sp, #12
 81033c4:	af00      	add	r7, sp, #0
 81033c6:	4603      	mov	r3, r0
 81033c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81033ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81033ce:	2b00      	cmp	r3, #0
 81033d0:	db0b      	blt.n	81033ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81033d2:	88fb      	ldrh	r3, [r7, #6]
 81033d4:	f003 021f 	and.w	r2, r3, #31
 81033d8:	4907      	ldr	r1, [pc, #28]	@ (81033f8 <__NVIC_EnableIRQ+0x38>)
 81033da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81033de:	095b      	lsrs	r3, r3, #5
 81033e0:	2001      	movs	r0, #1
 81033e2:	fa00 f202 	lsl.w	r2, r0, r2
 81033e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81033ea:	bf00      	nop
 81033ec:	370c      	adds	r7, #12
 81033ee:	46bd      	mov	sp, r7
 81033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033f4:	4770      	bx	lr
 81033f6:	bf00      	nop
 81033f8:	e000e100 	.word	0xe000e100

081033fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81033fc:	b480      	push	{r7}
 81033fe:	b083      	sub	sp, #12
 8103400:	af00      	add	r7, sp, #0
 8103402:	4603      	mov	r3, r0
 8103404:	6039      	str	r1, [r7, #0]
 8103406:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103408:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810340c:	2b00      	cmp	r3, #0
 810340e:	db0a      	blt.n	8103426 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103410:	683b      	ldr	r3, [r7, #0]
 8103412:	b2da      	uxtb	r2, r3
 8103414:	490c      	ldr	r1, [pc, #48]	@ (8103448 <__NVIC_SetPriority+0x4c>)
 8103416:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810341a:	0112      	lsls	r2, r2, #4
 810341c:	b2d2      	uxtb	r2, r2
 810341e:	440b      	add	r3, r1
 8103420:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8103424:	e00a      	b.n	810343c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103426:	683b      	ldr	r3, [r7, #0]
 8103428:	b2da      	uxtb	r2, r3
 810342a:	4908      	ldr	r1, [pc, #32]	@ (810344c <__NVIC_SetPriority+0x50>)
 810342c:	88fb      	ldrh	r3, [r7, #6]
 810342e:	f003 030f 	and.w	r3, r3, #15
 8103432:	3b04      	subs	r3, #4
 8103434:	0112      	lsls	r2, r2, #4
 8103436:	b2d2      	uxtb	r2, r2
 8103438:	440b      	add	r3, r1
 810343a:	761a      	strb	r2, [r3, #24]
}
 810343c:	bf00      	nop
 810343e:	370c      	adds	r7, #12
 8103440:	46bd      	mov	sp, r7
 8103442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103446:	4770      	bx	lr
 8103448:	e000e100 	.word	0xe000e100
 810344c:	e000ed00 	.word	0xe000ed00

08103450 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103450:	b480      	push	{r7}
 8103452:	b089      	sub	sp, #36	@ 0x24
 8103454:	af00      	add	r7, sp, #0
 8103456:	60f8      	str	r0, [r7, #12]
 8103458:	60b9      	str	r1, [r7, #8]
 810345a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 810345c:	68fb      	ldr	r3, [r7, #12]
 810345e:	f003 0307 	and.w	r3, r3, #7
 8103462:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8103464:	69fb      	ldr	r3, [r7, #28]
 8103466:	f1c3 0307 	rsb	r3, r3, #7
 810346a:	2b04      	cmp	r3, #4
 810346c:	bf28      	it	cs
 810346e:	2304      	movcs	r3, #4
 8103470:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8103472:	69fb      	ldr	r3, [r7, #28]
 8103474:	3304      	adds	r3, #4
 8103476:	2b06      	cmp	r3, #6
 8103478:	d902      	bls.n	8103480 <NVIC_EncodePriority+0x30>
 810347a:	69fb      	ldr	r3, [r7, #28]
 810347c:	3b03      	subs	r3, #3
 810347e:	e000      	b.n	8103482 <NVIC_EncodePriority+0x32>
 8103480:	2300      	movs	r3, #0
 8103482:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103484:	f04f 32ff 	mov.w	r2, #4294967295
 8103488:	69bb      	ldr	r3, [r7, #24]
 810348a:	fa02 f303 	lsl.w	r3, r2, r3
 810348e:	43da      	mvns	r2, r3
 8103490:	68bb      	ldr	r3, [r7, #8]
 8103492:	401a      	ands	r2, r3
 8103494:	697b      	ldr	r3, [r7, #20]
 8103496:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8103498:	f04f 31ff 	mov.w	r1, #4294967295
 810349c:	697b      	ldr	r3, [r7, #20]
 810349e:	fa01 f303 	lsl.w	r3, r1, r3
 81034a2:	43d9      	mvns	r1, r3
 81034a4:	687b      	ldr	r3, [r7, #4]
 81034a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81034a8:	4313      	orrs	r3, r2
         );
}
 81034aa:	4618      	mov	r0, r3
 81034ac:	3724      	adds	r7, #36	@ 0x24
 81034ae:	46bd      	mov	sp, r7
 81034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034b4:	4770      	bx	lr

081034b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81034b6:	b580      	push	{r7, lr}
 81034b8:	b082      	sub	sp, #8
 81034ba:	af00      	add	r7, sp, #0
 81034bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81034be:	6878      	ldr	r0, [r7, #4]
 81034c0:	f7ff ff4c 	bl	810335c <__NVIC_SetPriorityGrouping>
}
 81034c4:	bf00      	nop
 81034c6:	3708      	adds	r7, #8
 81034c8:	46bd      	mov	sp, r7
 81034ca:	bd80      	pop	{r7, pc}

081034cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81034cc:	b580      	push	{r7, lr}
 81034ce:	b086      	sub	sp, #24
 81034d0:	af00      	add	r7, sp, #0
 81034d2:	4603      	mov	r3, r0
 81034d4:	60b9      	str	r1, [r7, #8]
 81034d6:	607a      	str	r2, [r7, #4]
 81034d8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81034da:	f7ff ff63 	bl	81033a4 <__NVIC_GetPriorityGrouping>
 81034de:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81034e0:	687a      	ldr	r2, [r7, #4]
 81034e2:	68b9      	ldr	r1, [r7, #8]
 81034e4:	6978      	ldr	r0, [r7, #20]
 81034e6:	f7ff ffb3 	bl	8103450 <NVIC_EncodePriority>
 81034ea:	4602      	mov	r2, r0
 81034ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81034f0:	4611      	mov	r1, r2
 81034f2:	4618      	mov	r0, r3
 81034f4:	f7ff ff82 	bl	81033fc <__NVIC_SetPriority>
}
 81034f8:	bf00      	nop
 81034fa:	3718      	adds	r7, #24
 81034fc:	46bd      	mov	sp, r7
 81034fe:	bd80      	pop	{r7, pc}

08103500 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8103500:	b580      	push	{r7, lr}
 8103502:	b082      	sub	sp, #8
 8103504:	af00      	add	r7, sp, #0
 8103506:	4603      	mov	r3, r0
 8103508:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 810350a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810350e:	4618      	mov	r0, r3
 8103510:	f7ff ff56 	bl	81033c0 <__NVIC_EnableIRQ>
}
 8103514:	bf00      	nop
 8103516:	3708      	adds	r7, #8
 8103518:	46bd      	mov	sp, r7
 810351a:	bd80      	pop	{r7, pc}

0810351c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 810351c:	b480      	push	{r7}
 810351e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8103520:	4b07      	ldr	r3, [pc, #28]	@ (8103540 <HAL_GetCurrentCPUID+0x24>)
 8103522:	681b      	ldr	r3, [r3, #0]
 8103524:	091b      	lsrs	r3, r3, #4
 8103526:	f003 030f 	and.w	r3, r3, #15
 810352a:	2b07      	cmp	r3, #7
 810352c:	d101      	bne.n	8103532 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810352e:	2303      	movs	r3, #3
 8103530:	e000      	b.n	8103534 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8103532:	2301      	movs	r3, #1
  }
}
 8103534:	4618      	mov	r0, r3
 8103536:	46bd      	mov	sp, r7
 8103538:	f85d 7b04 	ldr.w	r7, [sp], #4
 810353c:	4770      	bx	lr
 810353e:	bf00      	nop
 8103540:	e000ed00 	.word	0xe000ed00

08103544 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 8103544:	b480      	push	{r7}
 8103546:	b083      	sub	sp, #12
 8103548:	af00      	add	r7, sp, #0
 810354a:	6078      	str	r0, [r7, #4]
 810354c:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 810354e:	490e      	ldr	r1, [pc, #56]	@ (8103588 <HAL_HSEM_Take+0x44>)
 8103550:	683b      	ldr	r3, [r7, #0]
 8103552:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8103556:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810355a:	687a      	ldr	r2, [r7, #4]
 810355c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 8103560:	4a09      	ldr	r2, [pc, #36]	@ (8103588 <HAL_HSEM_Take+0x44>)
 8103562:	687b      	ldr	r3, [r7, #4]
 8103564:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8103568:	683b      	ldr	r3, [r7, #0]
 810356a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 810356e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8103572:	429a      	cmp	r2, r3
 8103574:	d101      	bne.n	810357a <HAL_HSEM_Take+0x36>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 8103576:	2300      	movs	r3, #0
 8103578:	e000      	b.n	810357c <HAL_HSEM_Take+0x38>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 810357a:	2301      	movs	r3, #1
}
 810357c:	4618      	mov	r0, r3
 810357e:	370c      	adds	r7, #12
 8103580:	46bd      	mov	sp, r7
 8103582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103586:	4770      	bx	lr
 8103588:	58026400 	.word	0x58026400

0810358c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 810358c:	b480      	push	{r7}
 810358e:	b083      	sub	sp, #12
 8103590:	af00      	add	r7, sp, #0
 8103592:	6078      	str	r0, [r7, #4]
 8103594:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8103596:	4906      	ldr	r1, [pc, #24]	@ (81035b0 <HAL_HSEM_Release+0x24>)
 8103598:	683b      	ldr	r3, [r7, #0]
 810359a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 810359e:	687b      	ldr	r3, [r7, #4]
 81035a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 81035a4:	bf00      	nop
 81035a6:	370c      	adds	r7, #12
 81035a8:	46bd      	mov	sp, r7
 81035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035ae:	4770      	bx	lr
 81035b0:	58026400 	.word	0x58026400

081035b4 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81035b4:	b480      	push	{r7}
 81035b6:	b083      	sub	sp, #12
 81035b8:	af00      	add	r7, sp, #0
 81035ba:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81035bc:	4b05      	ldr	r3, [pc, #20]	@ (81035d4 <HAL_HSEM_ActivateNotification+0x20>)
 81035be:	681a      	ldr	r2, [r3, #0]
 81035c0:	4904      	ldr	r1, [pc, #16]	@ (81035d4 <HAL_HSEM_ActivateNotification+0x20>)
 81035c2:	687b      	ldr	r3, [r7, #4]
 81035c4:	4313      	orrs	r3, r2
 81035c6:	600b      	str	r3, [r1, #0]
#endif
}
 81035c8:	bf00      	nop
 81035ca:	370c      	adds	r7, #12
 81035cc:	46bd      	mov	sp, r7
 81035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035d2:	4770      	bx	lr
 81035d4:	58026510 	.word	0x58026510

081035d8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 81035d8:	b580      	push	{r7, lr}
 81035da:	b082      	sub	sp, #8
 81035dc:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 81035de:	4b0a      	ldr	r3, [pc, #40]	@ (8103608 <HAL_HSEM_IRQHandler+0x30>)
 81035e0:	68db      	ldr	r3, [r3, #12]
 81035e2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 81035e4:	4b08      	ldr	r3, [pc, #32]	@ (8103608 <HAL_HSEM_IRQHandler+0x30>)
 81035e6:	681a      	ldr	r2, [r3, #0]
 81035e8:	687b      	ldr	r3, [r7, #4]
 81035ea:	43db      	mvns	r3, r3
 81035ec:	4906      	ldr	r1, [pc, #24]	@ (8103608 <HAL_HSEM_IRQHandler+0x30>)
 81035ee:	4013      	ands	r3, r2
 81035f0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 81035f2:	4a05      	ldr	r2, [pc, #20]	@ (8103608 <HAL_HSEM_IRQHandler+0x30>)
 81035f4:	687b      	ldr	r3, [r7, #4]
 81035f6:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 81035f8:	6878      	ldr	r0, [r7, #4]
 81035fa:	f7fc fe71 	bl	81002e0 <HAL_HSEM_FreeCallback>
}
 81035fe:	bf00      	nop
 8103600:	3708      	adds	r7, #8
 8103602:	46bd      	mov	sp, r7
 8103604:	bd80      	pop	{r7, pc}
 8103606:	bf00      	nop
 8103608:	58026510 	.word	0x58026510

0810360c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 810360c:	b580      	push	{r7, lr}
 810360e:	b084      	sub	sp, #16
 8103610:	af00      	add	r7, sp, #0
 8103612:	60f8      	str	r0, [r7, #12]
 8103614:	460b      	mov	r3, r1
 8103616:	607a      	str	r2, [r7, #4]
 8103618:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810361a:	4b37      	ldr	r3, [pc, #220]	@ (81036f8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810361c:	681b      	ldr	r3, [r3, #0]
 810361e:	f023 0201 	bic.w	r2, r3, #1
 8103622:	4935      	ldr	r1, [pc, #212]	@ (81036f8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103624:	68fb      	ldr	r3, [r7, #12]
 8103626:	4313      	orrs	r3, r2
 8103628:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810362a:	687b      	ldr	r3, [r7, #4]
 810362c:	2b00      	cmp	r3, #0
 810362e:	d123      	bne.n	8103678 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8103630:	f7ff ff74 	bl	810351c <HAL_GetCurrentCPUID>
 8103634:	4603      	mov	r3, r0
 8103636:	2b03      	cmp	r3, #3
 8103638:	d158      	bne.n	81036ec <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810363a:	4b2f      	ldr	r3, [pc, #188]	@ (81036f8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810363c:	691b      	ldr	r3, [r3, #16]
 810363e:	4a2e      	ldr	r2, [pc, #184]	@ (81036f8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103640:	f023 0301 	bic.w	r3, r3, #1
 8103644:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103646:	4b2d      	ldr	r3, [pc, #180]	@ (81036fc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103648:	691b      	ldr	r3, [r3, #16]
 810364a:	4a2c      	ldr	r2, [pc, #176]	@ (81036fc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810364c:	f043 0304 	orr.w	r3, r3, #4
 8103650:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8103652:	f3bf 8f4f 	dsb	sy
}
 8103656:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103658:	f3bf 8f6f 	isb	sy
}
 810365c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810365e:	7afb      	ldrb	r3, [r7, #11]
 8103660:	2b01      	cmp	r3, #1
 8103662:	d101      	bne.n	8103668 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103664:	bf30      	wfi
 8103666:	e000      	b.n	810366a <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103668:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810366a:	4b24      	ldr	r3, [pc, #144]	@ (81036fc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810366c:	691b      	ldr	r3, [r3, #16]
 810366e:	4a23      	ldr	r2, [pc, #140]	@ (81036fc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103670:	f023 0304 	bic.w	r3, r3, #4
 8103674:	6113      	str	r3, [r2, #16]
 8103676:	e03c      	b.n	81036f2 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8103678:	687b      	ldr	r3, [r7, #4]
 810367a:	2b01      	cmp	r3, #1
 810367c:	d123      	bne.n	81036c6 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810367e:	f7ff ff4d 	bl	810351c <HAL_GetCurrentCPUID>
 8103682:	4603      	mov	r3, r0
 8103684:	2b01      	cmp	r3, #1
 8103686:	d133      	bne.n	81036f0 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8103688:	4b1b      	ldr	r3, [pc, #108]	@ (81036f8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810368a:	695b      	ldr	r3, [r3, #20]
 810368c:	4a1a      	ldr	r2, [pc, #104]	@ (81036f8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810368e:	f023 0302 	bic.w	r3, r3, #2
 8103692:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103694:	4b19      	ldr	r3, [pc, #100]	@ (81036fc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103696:	691b      	ldr	r3, [r3, #16]
 8103698:	4a18      	ldr	r2, [pc, #96]	@ (81036fc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810369a:	f043 0304 	orr.w	r3, r3, #4
 810369e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81036a0:	f3bf 8f4f 	dsb	sy
}
 81036a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81036a6:	f3bf 8f6f 	isb	sy
}
 81036aa:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81036ac:	7afb      	ldrb	r3, [r7, #11]
 81036ae:	2b01      	cmp	r3, #1
 81036b0:	d101      	bne.n	81036b6 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81036b2:	bf30      	wfi
 81036b4:	e000      	b.n	81036b8 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81036b6:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81036b8:	4b10      	ldr	r3, [pc, #64]	@ (81036fc <HAL_PWREx_EnterSTOPMode+0xf0>)
 81036ba:	691b      	ldr	r3, [r3, #16]
 81036bc:	4a0f      	ldr	r2, [pc, #60]	@ (81036fc <HAL_PWREx_EnterSTOPMode+0xf0>)
 81036be:	f023 0304 	bic.w	r3, r3, #4
 81036c2:	6113      	str	r3, [r2, #16]
 81036c4:	e015      	b.n	81036f2 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81036c6:	f7ff ff29 	bl	810351c <HAL_GetCurrentCPUID>
 81036ca:	4603      	mov	r3, r0
 81036cc:	2b03      	cmp	r3, #3
 81036ce:	d106      	bne.n	81036de <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81036d0:	4b09      	ldr	r3, [pc, #36]	@ (81036f8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81036d2:	691b      	ldr	r3, [r3, #16]
 81036d4:	4a08      	ldr	r2, [pc, #32]	@ (81036f8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81036d6:	f023 0304 	bic.w	r3, r3, #4
 81036da:	6113      	str	r3, [r2, #16]
 81036dc:	e009      	b.n	81036f2 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81036de:	4b06      	ldr	r3, [pc, #24]	@ (81036f8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81036e0:	695b      	ldr	r3, [r3, #20]
 81036e2:	4a05      	ldr	r2, [pc, #20]	@ (81036f8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81036e4:	f023 0304 	bic.w	r3, r3, #4
 81036e8:	6153      	str	r3, [r2, #20]
 81036ea:	e002      	b.n	81036f2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81036ec:	bf00      	nop
 81036ee:	e000      	b.n	81036f2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81036f0:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81036f2:	3710      	adds	r7, #16
 81036f4:	46bd      	mov	sp, r7
 81036f6:	bd80      	pop	{r7, pc}
 81036f8:	58024800 	.word	0x58024800
 81036fc:	e000ed00 	.word	0xe000ed00

08103700 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8103700:	b580      	push	{r7, lr}
 8103702:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103704:	f7ff ff0a 	bl	810351c <HAL_GetCurrentCPUID>
 8103708:	4603      	mov	r3, r0
 810370a:	2b03      	cmp	r3, #3
 810370c:	d101      	bne.n	8103712 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810370e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8103710:	e001      	b.n	8103716 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8103712:	bf40      	sev
    __WFE ();
 8103714:	bf20      	wfe
}
 8103716:	bf00      	nop
 8103718:	bd80      	pop	{r7, pc}
	...

0810371c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 810371c:	b480      	push	{r7}
 810371e:	b089      	sub	sp, #36	@ 0x24
 8103720:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8103722:	4bb3      	ldr	r3, [pc, #716]	@ (81039f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103724:	691b      	ldr	r3, [r3, #16]
 8103726:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810372a:	2b18      	cmp	r3, #24
 810372c:	f200 8155 	bhi.w	81039da <HAL_RCC_GetSysClockFreq+0x2be>
 8103730:	a201      	add	r2, pc, #4	@ (adr r2, 8103738 <HAL_RCC_GetSysClockFreq+0x1c>)
 8103732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103736:	bf00      	nop
 8103738:	0810379d 	.word	0x0810379d
 810373c:	081039db 	.word	0x081039db
 8103740:	081039db 	.word	0x081039db
 8103744:	081039db 	.word	0x081039db
 8103748:	081039db 	.word	0x081039db
 810374c:	081039db 	.word	0x081039db
 8103750:	081039db 	.word	0x081039db
 8103754:	081039db 	.word	0x081039db
 8103758:	081037c3 	.word	0x081037c3
 810375c:	081039db 	.word	0x081039db
 8103760:	081039db 	.word	0x081039db
 8103764:	081039db 	.word	0x081039db
 8103768:	081039db 	.word	0x081039db
 810376c:	081039db 	.word	0x081039db
 8103770:	081039db 	.word	0x081039db
 8103774:	081039db 	.word	0x081039db
 8103778:	081037c9 	.word	0x081037c9
 810377c:	081039db 	.word	0x081039db
 8103780:	081039db 	.word	0x081039db
 8103784:	081039db 	.word	0x081039db
 8103788:	081039db 	.word	0x081039db
 810378c:	081039db 	.word	0x081039db
 8103790:	081039db 	.word	0x081039db
 8103794:	081039db 	.word	0x081039db
 8103798:	081037cf 	.word	0x081037cf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810379c:	4b94      	ldr	r3, [pc, #592]	@ (81039f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810379e:	681b      	ldr	r3, [r3, #0]
 81037a0:	f003 0320 	and.w	r3, r3, #32
 81037a4:	2b00      	cmp	r3, #0
 81037a6:	d009      	beq.n	81037bc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81037a8:	4b91      	ldr	r3, [pc, #580]	@ (81039f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81037aa:	681b      	ldr	r3, [r3, #0]
 81037ac:	08db      	lsrs	r3, r3, #3
 81037ae:	f003 0303 	and.w	r3, r3, #3
 81037b2:	4a90      	ldr	r2, [pc, #576]	@ (81039f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81037b4:	fa22 f303 	lsr.w	r3, r2, r3
 81037b8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 81037ba:	e111      	b.n	81039e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81037bc:	4b8d      	ldr	r3, [pc, #564]	@ (81039f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81037be:	61bb      	str	r3, [r7, #24]
      break;
 81037c0:	e10e      	b.n	81039e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 81037c2:	4b8d      	ldr	r3, [pc, #564]	@ (81039f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81037c4:	61bb      	str	r3, [r7, #24]
      break;
 81037c6:	e10b      	b.n	81039e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 81037c8:	4b8c      	ldr	r3, [pc, #560]	@ (81039fc <HAL_RCC_GetSysClockFreq+0x2e0>)
 81037ca:	61bb      	str	r3, [r7, #24]
      break;
 81037cc:	e108      	b.n	81039e0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81037ce:	4b88      	ldr	r3, [pc, #544]	@ (81039f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81037d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81037d2:	f003 0303 	and.w	r3, r3, #3
 81037d6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 81037d8:	4b85      	ldr	r3, [pc, #532]	@ (81039f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81037da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81037dc:	091b      	lsrs	r3, r3, #4
 81037de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81037e2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 81037e4:	4b82      	ldr	r3, [pc, #520]	@ (81039f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81037e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81037e8:	f003 0301 	and.w	r3, r3, #1
 81037ec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81037ee:	4b80      	ldr	r3, [pc, #512]	@ (81039f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81037f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81037f2:	08db      	lsrs	r3, r3, #3
 81037f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81037f8:	68fa      	ldr	r2, [r7, #12]
 81037fa:	fb02 f303 	mul.w	r3, r2, r3
 81037fe:	ee07 3a90 	vmov	s15, r3
 8103802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103806:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 810380a:	693b      	ldr	r3, [r7, #16]
 810380c:	2b00      	cmp	r3, #0
 810380e:	f000 80e1 	beq.w	81039d4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8103812:	697b      	ldr	r3, [r7, #20]
 8103814:	2b02      	cmp	r3, #2
 8103816:	f000 8083 	beq.w	8103920 <HAL_RCC_GetSysClockFreq+0x204>
 810381a:	697b      	ldr	r3, [r7, #20]
 810381c:	2b02      	cmp	r3, #2
 810381e:	f200 80a1 	bhi.w	8103964 <HAL_RCC_GetSysClockFreq+0x248>
 8103822:	697b      	ldr	r3, [r7, #20]
 8103824:	2b00      	cmp	r3, #0
 8103826:	d003      	beq.n	8103830 <HAL_RCC_GetSysClockFreq+0x114>
 8103828:	697b      	ldr	r3, [r7, #20]
 810382a:	2b01      	cmp	r3, #1
 810382c:	d056      	beq.n	81038dc <HAL_RCC_GetSysClockFreq+0x1c0>
 810382e:	e099      	b.n	8103964 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103830:	4b6f      	ldr	r3, [pc, #444]	@ (81039f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103832:	681b      	ldr	r3, [r3, #0]
 8103834:	f003 0320 	and.w	r3, r3, #32
 8103838:	2b00      	cmp	r3, #0
 810383a:	d02d      	beq.n	8103898 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810383c:	4b6c      	ldr	r3, [pc, #432]	@ (81039f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810383e:	681b      	ldr	r3, [r3, #0]
 8103840:	08db      	lsrs	r3, r3, #3
 8103842:	f003 0303 	and.w	r3, r3, #3
 8103846:	4a6b      	ldr	r2, [pc, #428]	@ (81039f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103848:	fa22 f303 	lsr.w	r3, r2, r3
 810384c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810384e:	687b      	ldr	r3, [r7, #4]
 8103850:	ee07 3a90 	vmov	s15, r3
 8103854:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103858:	693b      	ldr	r3, [r7, #16]
 810385a:	ee07 3a90 	vmov	s15, r3
 810385e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103866:	4b62      	ldr	r3, [pc, #392]	@ (81039f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810386a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810386e:	ee07 3a90 	vmov	s15, r3
 8103872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103876:	ed97 6a02 	vldr	s12, [r7, #8]
 810387a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8103a00 <HAL_RCC_GetSysClockFreq+0x2e4>
 810387e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103886:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810388a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810388e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103892:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8103896:	e087      	b.n	81039a8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103898:	693b      	ldr	r3, [r7, #16]
 810389a:	ee07 3a90 	vmov	s15, r3
 810389e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81038a2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8103a04 <HAL_RCC_GetSysClockFreq+0x2e8>
 81038a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81038aa:	4b51      	ldr	r3, [pc, #324]	@ (81039f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81038ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81038ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81038b2:	ee07 3a90 	vmov	s15, r3
 81038b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81038ba:	ed97 6a02 	vldr	s12, [r7, #8]
 81038be:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8103a00 <HAL_RCC_GetSysClockFreq+0x2e4>
 81038c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81038c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81038ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81038ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81038d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81038d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81038da:	e065      	b.n	81039a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81038dc:	693b      	ldr	r3, [r7, #16]
 81038de:	ee07 3a90 	vmov	s15, r3
 81038e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81038e6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8103a08 <HAL_RCC_GetSysClockFreq+0x2ec>
 81038ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81038ee:	4b40      	ldr	r3, [pc, #256]	@ (81039f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81038f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81038f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81038f6:	ee07 3a90 	vmov	s15, r3
 81038fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81038fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8103902:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8103a00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810390a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810390e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103916:	ee67 7a27 	vmul.f32	s15, s14, s15
 810391a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810391e:	e043      	b.n	81039a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103920:	693b      	ldr	r3, [r7, #16]
 8103922:	ee07 3a90 	vmov	s15, r3
 8103926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810392a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8103a0c <HAL_RCC_GetSysClockFreq+0x2f0>
 810392e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103932:	4b2f      	ldr	r3, [pc, #188]	@ (81039f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810393a:	ee07 3a90 	vmov	s15, r3
 810393e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103942:	ed97 6a02 	vldr	s12, [r7, #8]
 8103946:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8103a00 <HAL_RCC_GetSysClockFreq+0x2e4>
 810394a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810394e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103952:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810395a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810395e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8103962:	e021      	b.n	81039a8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103964:	693b      	ldr	r3, [r7, #16]
 8103966:	ee07 3a90 	vmov	s15, r3
 810396a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810396e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8103a08 <HAL_RCC_GetSysClockFreq+0x2ec>
 8103972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103976:	4b1e      	ldr	r3, [pc, #120]	@ (81039f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810397a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810397e:	ee07 3a90 	vmov	s15, r3
 8103982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103986:	ed97 6a02 	vldr	s12, [r7, #8]
 810398a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8103a00 <HAL_RCC_GetSysClockFreq+0x2e4>
 810398e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103996:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810399a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810399e:	ee67 7a27 	vmul.f32	s15, s14, s15
 81039a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81039a6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 81039a8:	4b11      	ldr	r3, [pc, #68]	@ (81039f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81039aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81039ac:	0a5b      	lsrs	r3, r3, #9
 81039ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81039b2:	3301      	adds	r3, #1
 81039b4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 81039b6:	683b      	ldr	r3, [r7, #0]
 81039b8:	ee07 3a90 	vmov	s15, r3
 81039bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81039c0:	edd7 6a07 	vldr	s13, [r7, #28]
 81039c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81039c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81039cc:	ee17 3a90 	vmov	r3, s15
 81039d0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 81039d2:	e005      	b.n	81039e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 81039d4:	2300      	movs	r3, #0
 81039d6:	61bb      	str	r3, [r7, #24]
      break;
 81039d8:	e002      	b.n	81039e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 81039da:	4b07      	ldr	r3, [pc, #28]	@ (81039f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81039dc:	61bb      	str	r3, [r7, #24]
      break;
 81039de:	bf00      	nop
  }

  return sysclockfreq;
 81039e0:	69bb      	ldr	r3, [r7, #24]
}
 81039e2:	4618      	mov	r0, r3
 81039e4:	3724      	adds	r7, #36	@ 0x24
 81039e6:	46bd      	mov	sp, r7
 81039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81039ec:	4770      	bx	lr
 81039ee:	bf00      	nop
 81039f0:	58024400 	.word	0x58024400
 81039f4:	03d09000 	.word	0x03d09000
 81039f8:	003d0900 	.word	0x003d0900
 81039fc:	017d7840 	.word	0x017d7840
 8103a00:	46000000 	.word	0x46000000
 8103a04:	4c742400 	.word	0x4c742400
 8103a08:	4a742400 	.word	0x4a742400
 8103a0c:	4bbebc20 	.word	0x4bbebc20

08103a10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8103a10:	b580      	push	{r7, lr}
 8103a12:	b082      	sub	sp, #8
 8103a14:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8103a16:	f7ff fe81 	bl	810371c <HAL_RCC_GetSysClockFreq>
 8103a1a:	4602      	mov	r2, r0
 8103a1c:	4b11      	ldr	r3, [pc, #68]	@ (8103a64 <HAL_RCC_GetHCLKFreq+0x54>)
 8103a1e:	699b      	ldr	r3, [r3, #24]
 8103a20:	0a1b      	lsrs	r3, r3, #8
 8103a22:	f003 030f 	and.w	r3, r3, #15
 8103a26:	4910      	ldr	r1, [pc, #64]	@ (8103a68 <HAL_RCC_GetHCLKFreq+0x58>)
 8103a28:	5ccb      	ldrb	r3, [r1, r3]
 8103a2a:	f003 031f 	and.w	r3, r3, #31
 8103a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8103a32:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103a34:	4b0b      	ldr	r3, [pc, #44]	@ (8103a64 <HAL_RCC_GetHCLKFreq+0x54>)
 8103a36:	699b      	ldr	r3, [r3, #24]
 8103a38:	f003 030f 	and.w	r3, r3, #15
 8103a3c:	4a0a      	ldr	r2, [pc, #40]	@ (8103a68 <HAL_RCC_GetHCLKFreq+0x58>)
 8103a3e:	5cd3      	ldrb	r3, [r2, r3]
 8103a40:	f003 031f 	and.w	r3, r3, #31
 8103a44:	687a      	ldr	r2, [r7, #4]
 8103a46:	fa22 f303 	lsr.w	r3, r2, r3
 8103a4a:	4a08      	ldr	r2, [pc, #32]	@ (8103a6c <HAL_RCC_GetHCLKFreq+0x5c>)
 8103a4c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8103a4e:	4b07      	ldr	r3, [pc, #28]	@ (8103a6c <HAL_RCC_GetHCLKFreq+0x5c>)
 8103a50:	681b      	ldr	r3, [r3, #0]
 8103a52:	4a07      	ldr	r2, [pc, #28]	@ (8103a70 <HAL_RCC_GetHCLKFreq+0x60>)
 8103a54:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8103a56:	4b05      	ldr	r3, [pc, #20]	@ (8103a6c <HAL_RCC_GetHCLKFreq+0x5c>)
 8103a58:	681b      	ldr	r3, [r3, #0]
}
 8103a5a:	4618      	mov	r0, r3
 8103a5c:	3708      	adds	r7, #8
 8103a5e:	46bd      	mov	sp, r7
 8103a60:	bd80      	pop	{r7, pc}
 8103a62:	bf00      	nop
 8103a64:	58024400 	.word	0x58024400
 8103a68:	08107e9c 	.word	0x08107e9c
 8103a6c:	10000004 	.word	0x10000004
 8103a70:	10000000 	.word	0x10000000

08103a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8103a74:	b580      	push	{r7, lr}
 8103a76:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8103a78:	f7ff ffca 	bl	8103a10 <HAL_RCC_GetHCLKFreq>
 8103a7c:	4602      	mov	r2, r0
 8103a7e:	4b06      	ldr	r3, [pc, #24]	@ (8103a98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8103a80:	69db      	ldr	r3, [r3, #28]
 8103a82:	091b      	lsrs	r3, r3, #4
 8103a84:	f003 0307 	and.w	r3, r3, #7
 8103a88:	4904      	ldr	r1, [pc, #16]	@ (8103a9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8103a8a:	5ccb      	ldrb	r3, [r1, r3]
 8103a8c:	f003 031f 	and.w	r3, r3, #31
 8103a90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8103a94:	4618      	mov	r0, r3
 8103a96:	bd80      	pop	{r7, pc}
 8103a98:	58024400 	.word	0x58024400
 8103a9c:	08107e9c 	.word	0x08107e9c

08103aa0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8103aa0:	b480      	push	{r7}
 8103aa2:	b083      	sub	sp, #12
 8103aa4:	af00      	add	r7, sp, #0
 8103aa6:	6078      	str	r0, [r7, #4]
 8103aa8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8103aaa:	687b      	ldr	r3, [r7, #4]
 8103aac:	223f      	movs	r2, #63	@ 0x3f
 8103aae:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8103ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8103b1c <HAL_RCC_GetClockConfig+0x7c>)
 8103ab2:	691b      	ldr	r3, [r3, #16]
 8103ab4:	f003 0207 	and.w	r2, r3, #7
 8103ab8:	687b      	ldr	r3, [r7, #4]
 8103aba:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8103abc:	4b17      	ldr	r3, [pc, #92]	@ (8103b1c <HAL_RCC_GetClockConfig+0x7c>)
 8103abe:	699b      	ldr	r3, [r3, #24]
 8103ac0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8103ac4:	687b      	ldr	r3, [r7, #4]
 8103ac6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8103ac8:	4b14      	ldr	r3, [pc, #80]	@ (8103b1c <HAL_RCC_GetClockConfig+0x7c>)
 8103aca:	699b      	ldr	r3, [r3, #24]
 8103acc:	f003 020f 	and.w	r2, r3, #15
 8103ad0:	687b      	ldr	r3, [r7, #4]
 8103ad2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8103ad4:	4b11      	ldr	r3, [pc, #68]	@ (8103b1c <HAL_RCC_GetClockConfig+0x7c>)
 8103ad6:	699b      	ldr	r3, [r3, #24]
 8103ad8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8103adc:	687b      	ldr	r3, [r7, #4]
 8103ade:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8103ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8103b1c <HAL_RCC_GetClockConfig+0x7c>)
 8103ae2:	69db      	ldr	r3, [r3, #28]
 8103ae4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8103ae8:	687b      	ldr	r3, [r7, #4]
 8103aea:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8103aec:	4b0b      	ldr	r3, [pc, #44]	@ (8103b1c <HAL_RCC_GetClockConfig+0x7c>)
 8103aee:	69db      	ldr	r3, [r3, #28]
 8103af0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8103af4:	687b      	ldr	r3, [r7, #4]
 8103af6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8103af8:	4b08      	ldr	r3, [pc, #32]	@ (8103b1c <HAL_RCC_GetClockConfig+0x7c>)
 8103afa:	6a1b      	ldr	r3, [r3, #32]
 8103afc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8103b00:	687b      	ldr	r3, [r7, #4]
 8103b02:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8103b04:	4b06      	ldr	r3, [pc, #24]	@ (8103b20 <HAL_RCC_GetClockConfig+0x80>)
 8103b06:	681b      	ldr	r3, [r3, #0]
 8103b08:	f003 020f 	and.w	r2, r3, #15
 8103b0c:	683b      	ldr	r3, [r7, #0]
 8103b0e:	601a      	str	r2, [r3, #0]
}
 8103b10:	bf00      	nop
 8103b12:	370c      	adds	r7, #12
 8103b14:	46bd      	mov	sp, r7
 8103b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b1a:	4770      	bx	lr
 8103b1c:	58024400 	.word	0x58024400
 8103b20:	52002000 	.word	0x52002000

08103b24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8103b24:	b580      	push	{r7, lr}
 8103b26:	b082      	sub	sp, #8
 8103b28:	af00      	add	r7, sp, #0
 8103b2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8103b2c:	687b      	ldr	r3, [r7, #4]
 8103b2e:	2b00      	cmp	r3, #0
 8103b30:	d101      	bne.n	8103b36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8103b32:	2301      	movs	r3, #1
 8103b34:	e049      	b.n	8103bca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8103b36:	687b      	ldr	r3, [r7, #4]
 8103b38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8103b3c:	b2db      	uxtb	r3, r3
 8103b3e:	2b00      	cmp	r3, #0
 8103b40:	d106      	bne.n	8103b50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8103b42:	687b      	ldr	r3, [r7, #4]
 8103b44:	2200      	movs	r2, #0
 8103b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8103b4a:	6878      	ldr	r0, [r7, #4]
 8103b4c:	f000 f841 	bl	8103bd2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8103b50:	687b      	ldr	r3, [r7, #4]
 8103b52:	2202      	movs	r2, #2
 8103b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8103b58:	687b      	ldr	r3, [r7, #4]
 8103b5a:	681a      	ldr	r2, [r3, #0]
 8103b5c:	687b      	ldr	r3, [r7, #4]
 8103b5e:	3304      	adds	r3, #4
 8103b60:	4619      	mov	r1, r3
 8103b62:	4610      	mov	r0, r2
 8103b64:	f000 f9e8 	bl	8103f38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8103b68:	687b      	ldr	r3, [r7, #4]
 8103b6a:	2201      	movs	r2, #1
 8103b6c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103b70:	687b      	ldr	r3, [r7, #4]
 8103b72:	2201      	movs	r2, #1
 8103b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8103b78:	687b      	ldr	r3, [r7, #4]
 8103b7a:	2201      	movs	r2, #1
 8103b7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8103b80:	687b      	ldr	r3, [r7, #4]
 8103b82:	2201      	movs	r2, #1
 8103b84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8103b88:	687b      	ldr	r3, [r7, #4]
 8103b8a:	2201      	movs	r2, #1
 8103b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8103b90:	687b      	ldr	r3, [r7, #4]
 8103b92:	2201      	movs	r2, #1
 8103b94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8103b98:	687b      	ldr	r3, [r7, #4]
 8103b9a:	2201      	movs	r2, #1
 8103b9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103ba0:	687b      	ldr	r3, [r7, #4]
 8103ba2:	2201      	movs	r2, #1
 8103ba4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8103ba8:	687b      	ldr	r3, [r7, #4]
 8103baa:	2201      	movs	r2, #1
 8103bac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8103bb0:	687b      	ldr	r3, [r7, #4]
 8103bb2:	2201      	movs	r2, #1
 8103bb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8103bb8:	687b      	ldr	r3, [r7, #4]
 8103bba:	2201      	movs	r2, #1
 8103bbc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8103bc0:	687b      	ldr	r3, [r7, #4]
 8103bc2:	2201      	movs	r2, #1
 8103bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8103bc8:	2300      	movs	r3, #0
}
 8103bca:	4618      	mov	r0, r3
 8103bcc:	3708      	adds	r7, #8
 8103bce:	46bd      	mov	sp, r7
 8103bd0:	bd80      	pop	{r7, pc}

08103bd2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8103bd2:	b480      	push	{r7}
 8103bd4:	b083      	sub	sp, #12
 8103bd6:	af00      	add	r7, sp, #0
 8103bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8103bda:	bf00      	nop
 8103bdc:	370c      	adds	r7, #12
 8103bde:	46bd      	mov	sp, r7
 8103be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103be4:	4770      	bx	lr
	...

08103be8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8103be8:	b480      	push	{r7}
 8103bea:	b085      	sub	sp, #20
 8103bec:	af00      	add	r7, sp, #0
 8103bee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8103bf0:	687b      	ldr	r3, [r7, #4]
 8103bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8103bf6:	b2db      	uxtb	r3, r3
 8103bf8:	2b01      	cmp	r3, #1
 8103bfa:	d001      	beq.n	8103c00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8103bfc:	2301      	movs	r3, #1
 8103bfe:	e054      	b.n	8103caa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8103c00:	687b      	ldr	r3, [r7, #4]
 8103c02:	2202      	movs	r2, #2
 8103c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8103c08:	687b      	ldr	r3, [r7, #4]
 8103c0a:	681b      	ldr	r3, [r3, #0]
 8103c0c:	68da      	ldr	r2, [r3, #12]
 8103c0e:	687b      	ldr	r3, [r7, #4]
 8103c10:	681b      	ldr	r3, [r3, #0]
 8103c12:	f042 0201 	orr.w	r2, r2, #1
 8103c16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8103c18:	687b      	ldr	r3, [r7, #4]
 8103c1a:	681b      	ldr	r3, [r3, #0]
 8103c1c:	4a26      	ldr	r2, [pc, #152]	@ (8103cb8 <HAL_TIM_Base_Start_IT+0xd0>)
 8103c1e:	4293      	cmp	r3, r2
 8103c20:	d022      	beq.n	8103c68 <HAL_TIM_Base_Start_IT+0x80>
 8103c22:	687b      	ldr	r3, [r7, #4]
 8103c24:	681b      	ldr	r3, [r3, #0]
 8103c26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103c2a:	d01d      	beq.n	8103c68 <HAL_TIM_Base_Start_IT+0x80>
 8103c2c:	687b      	ldr	r3, [r7, #4]
 8103c2e:	681b      	ldr	r3, [r3, #0]
 8103c30:	4a22      	ldr	r2, [pc, #136]	@ (8103cbc <HAL_TIM_Base_Start_IT+0xd4>)
 8103c32:	4293      	cmp	r3, r2
 8103c34:	d018      	beq.n	8103c68 <HAL_TIM_Base_Start_IT+0x80>
 8103c36:	687b      	ldr	r3, [r7, #4]
 8103c38:	681b      	ldr	r3, [r3, #0]
 8103c3a:	4a21      	ldr	r2, [pc, #132]	@ (8103cc0 <HAL_TIM_Base_Start_IT+0xd8>)
 8103c3c:	4293      	cmp	r3, r2
 8103c3e:	d013      	beq.n	8103c68 <HAL_TIM_Base_Start_IT+0x80>
 8103c40:	687b      	ldr	r3, [r7, #4]
 8103c42:	681b      	ldr	r3, [r3, #0]
 8103c44:	4a1f      	ldr	r2, [pc, #124]	@ (8103cc4 <HAL_TIM_Base_Start_IT+0xdc>)
 8103c46:	4293      	cmp	r3, r2
 8103c48:	d00e      	beq.n	8103c68 <HAL_TIM_Base_Start_IT+0x80>
 8103c4a:	687b      	ldr	r3, [r7, #4]
 8103c4c:	681b      	ldr	r3, [r3, #0]
 8103c4e:	4a1e      	ldr	r2, [pc, #120]	@ (8103cc8 <HAL_TIM_Base_Start_IT+0xe0>)
 8103c50:	4293      	cmp	r3, r2
 8103c52:	d009      	beq.n	8103c68 <HAL_TIM_Base_Start_IT+0x80>
 8103c54:	687b      	ldr	r3, [r7, #4]
 8103c56:	681b      	ldr	r3, [r3, #0]
 8103c58:	4a1c      	ldr	r2, [pc, #112]	@ (8103ccc <HAL_TIM_Base_Start_IT+0xe4>)
 8103c5a:	4293      	cmp	r3, r2
 8103c5c:	d004      	beq.n	8103c68 <HAL_TIM_Base_Start_IT+0x80>
 8103c5e:	687b      	ldr	r3, [r7, #4]
 8103c60:	681b      	ldr	r3, [r3, #0]
 8103c62:	4a1b      	ldr	r2, [pc, #108]	@ (8103cd0 <HAL_TIM_Base_Start_IT+0xe8>)
 8103c64:	4293      	cmp	r3, r2
 8103c66:	d115      	bne.n	8103c94 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8103c68:	687b      	ldr	r3, [r7, #4]
 8103c6a:	681b      	ldr	r3, [r3, #0]
 8103c6c:	689a      	ldr	r2, [r3, #8]
 8103c6e:	4b19      	ldr	r3, [pc, #100]	@ (8103cd4 <HAL_TIM_Base_Start_IT+0xec>)
 8103c70:	4013      	ands	r3, r2
 8103c72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8103c74:	68fb      	ldr	r3, [r7, #12]
 8103c76:	2b06      	cmp	r3, #6
 8103c78:	d015      	beq.n	8103ca6 <HAL_TIM_Base_Start_IT+0xbe>
 8103c7a:	68fb      	ldr	r3, [r7, #12]
 8103c7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103c80:	d011      	beq.n	8103ca6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8103c82:	687b      	ldr	r3, [r7, #4]
 8103c84:	681b      	ldr	r3, [r3, #0]
 8103c86:	681a      	ldr	r2, [r3, #0]
 8103c88:	687b      	ldr	r3, [r7, #4]
 8103c8a:	681b      	ldr	r3, [r3, #0]
 8103c8c:	f042 0201 	orr.w	r2, r2, #1
 8103c90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8103c92:	e008      	b.n	8103ca6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8103c94:	687b      	ldr	r3, [r7, #4]
 8103c96:	681b      	ldr	r3, [r3, #0]
 8103c98:	681a      	ldr	r2, [r3, #0]
 8103c9a:	687b      	ldr	r3, [r7, #4]
 8103c9c:	681b      	ldr	r3, [r3, #0]
 8103c9e:	f042 0201 	orr.w	r2, r2, #1
 8103ca2:	601a      	str	r2, [r3, #0]
 8103ca4:	e000      	b.n	8103ca8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8103ca6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8103ca8:	2300      	movs	r3, #0
}
 8103caa:	4618      	mov	r0, r3
 8103cac:	3714      	adds	r7, #20
 8103cae:	46bd      	mov	sp, r7
 8103cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cb4:	4770      	bx	lr
 8103cb6:	bf00      	nop
 8103cb8:	40010000 	.word	0x40010000
 8103cbc:	40000400 	.word	0x40000400
 8103cc0:	40000800 	.word	0x40000800
 8103cc4:	40000c00 	.word	0x40000c00
 8103cc8:	40010400 	.word	0x40010400
 8103ccc:	40001800 	.word	0x40001800
 8103cd0:	40014000 	.word	0x40014000
 8103cd4:	00010007 	.word	0x00010007

08103cd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8103cd8:	b580      	push	{r7, lr}
 8103cda:	b084      	sub	sp, #16
 8103cdc:	af00      	add	r7, sp, #0
 8103cde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8103ce0:	687b      	ldr	r3, [r7, #4]
 8103ce2:	681b      	ldr	r3, [r3, #0]
 8103ce4:	68db      	ldr	r3, [r3, #12]
 8103ce6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8103ce8:	687b      	ldr	r3, [r7, #4]
 8103cea:	681b      	ldr	r3, [r3, #0]
 8103cec:	691b      	ldr	r3, [r3, #16]
 8103cee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8103cf0:	68bb      	ldr	r3, [r7, #8]
 8103cf2:	f003 0302 	and.w	r3, r3, #2
 8103cf6:	2b00      	cmp	r3, #0
 8103cf8:	d020      	beq.n	8103d3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8103cfa:	68fb      	ldr	r3, [r7, #12]
 8103cfc:	f003 0302 	and.w	r3, r3, #2
 8103d00:	2b00      	cmp	r3, #0
 8103d02:	d01b      	beq.n	8103d3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8103d04:	687b      	ldr	r3, [r7, #4]
 8103d06:	681b      	ldr	r3, [r3, #0]
 8103d08:	f06f 0202 	mvn.w	r2, #2
 8103d0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8103d0e:	687b      	ldr	r3, [r7, #4]
 8103d10:	2201      	movs	r2, #1
 8103d12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8103d14:	687b      	ldr	r3, [r7, #4]
 8103d16:	681b      	ldr	r3, [r3, #0]
 8103d18:	699b      	ldr	r3, [r3, #24]
 8103d1a:	f003 0303 	and.w	r3, r3, #3
 8103d1e:	2b00      	cmp	r3, #0
 8103d20:	d003      	beq.n	8103d2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8103d22:	6878      	ldr	r0, [r7, #4]
 8103d24:	f000 f8e9 	bl	8103efa <HAL_TIM_IC_CaptureCallback>
 8103d28:	e005      	b.n	8103d36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8103d2a:	6878      	ldr	r0, [r7, #4]
 8103d2c:	f000 f8db 	bl	8103ee6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8103d30:	6878      	ldr	r0, [r7, #4]
 8103d32:	f000 f8ec 	bl	8103f0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8103d36:	687b      	ldr	r3, [r7, #4]
 8103d38:	2200      	movs	r2, #0
 8103d3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8103d3c:	68bb      	ldr	r3, [r7, #8]
 8103d3e:	f003 0304 	and.w	r3, r3, #4
 8103d42:	2b00      	cmp	r3, #0
 8103d44:	d020      	beq.n	8103d88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8103d46:	68fb      	ldr	r3, [r7, #12]
 8103d48:	f003 0304 	and.w	r3, r3, #4
 8103d4c:	2b00      	cmp	r3, #0
 8103d4e:	d01b      	beq.n	8103d88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8103d50:	687b      	ldr	r3, [r7, #4]
 8103d52:	681b      	ldr	r3, [r3, #0]
 8103d54:	f06f 0204 	mvn.w	r2, #4
 8103d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8103d5a:	687b      	ldr	r3, [r7, #4]
 8103d5c:	2202      	movs	r2, #2
 8103d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8103d60:	687b      	ldr	r3, [r7, #4]
 8103d62:	681b      	ldr	r3, [r3, #0]
 8103d64:	699b      	ldr	r3, [r3, #24]
 8103d66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8103d6a:	2b00      	cmp	r3, #0
 8103d6c:	d003      	beq.n	8103d76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8103d6e:	6878      	ldr	r0, [r7, #4]
 8103d70:	f000 f8c3 	bl	8103efa <HAL_TIM_IC_CaptureCallback>
 8103d74:	e005      	b.n	8103d82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8103d76:	6878      	ldr	r0, [r7, #4]
 8103d78:	f000 f8b5 	bl	8103ee6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8103d7c:	6878      	ldr	r0, [r7, #4]
 8103d7e:	f000 f8c6 	bl	8103f0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8103d82:	687b      	ldr	r3, [r7, #4]
 8103d84:	2200      	movs	r2, #0
 8103d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8103d88:	68bb      	ldr	r3, [r7, #8]
 8103d8a:	f003 0308 	and.w	r3, r3, #8
 8103d8e:	2b00      	cmp	r3, #0
 8103d90:	d020      	beq.n	8103dd4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8103d92:	68fb      	ldr	r3, [r7, #12]
 8103d94:	f003 0308 	and.w	r3, r3, #8
 8103d98:	2b00      	cmp	r3, #0
 8103d9a:	d01b      	beq.n	8103dd4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8103d9c:	687b      	ldr	r3, [r7, #4]
 8103d9e:	681b      	ldr	r3, [r3, #0]
 8103da0:	f06f 0208 	mvn.w	r2, #8
 8103da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8103da6:	687b      	ldr	r3, [r7, #4]
 8103da8:	2204      	movs	r2, #4
 8103daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8103dac:	687b      	ldr	r3, [r7, #4]
 8103dae:	681b      	ldr	r3, [r3, #0]
 8103db0:	69db      	ldr	r3, [r3, #28]
 8103db2:	f003 0303 	and.w	r3, r3, #3
 8103db6:	2b00      	cmp	r3, #0
 8103db8:	d003      	beq.n	8103dc2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8103dba:	6878      	ldr	r0, [r7, #4]
 8103dbc:	f000 f89d 	bl	8103efa <HAL_TIM_IC_CaptureCallback>
 8103dc0:	e005      	b.n	8103dce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8103dc2:	6878      	ldr	r0, [r7, #4]
 8103dc4:	f000 f88f 	bl	8103ee6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8103dc8:	6878      	ldr	r0, [r7, #4]
 8103dca:	f000 f8a0 	bl	8103f0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8103dce:	687b      	ldr	r3, [r7, #4]
 8103dd0:	2200      	movs	r2, #0
 8103dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8103dd4:	68bb      	ldr	r3, [r7, #8]
 8103dd6:	f003 0310 	and.w	r3, r3, #16
 8103dda:	2b00      	cmp	r3, #0
 8103ddc:	d020      	beq.n	8103e20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8103dde:	68fb      	ldr	r3, [r7, #12]
 8103de0:	f003 0310 	and.w	r3, r3, #16
 8103de4:	2b00      	cmp	r3, #0
 8103de6:	d01b      	beq.n	8103e20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8103de8:	687b      	ldr	r3, [r7, #4]
 8103dea:	681b      	ldr	r3, [r3, #0]
 8103dec:	f06f 0210 	mvn.w	r2, #16
 8103df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8103df2:	687b      	ldr	r3, [r7, #4]
 8103df4:	2208      	movs	r2, #8
 8103df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8103df8:	687b      	ldr	r3, [r7, #4]
 8103dfa:	681b      	ldr	r3, [r3, #0]
 8103dfc:	69db      	ldr	r3, [r3, #28]
 8103dfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8103e02:	2b00      	cmp	r3, #0
 8103e04:	d003      	beq.n	8103e0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8103e06:	6878      	ldr	r0, [r7, #4]
 8103e08:	f000 f877 	bl	8103efa <HAL_TIM_IC_CaptureCallback>
 8103e0c:	e005      	b.n	8103e1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8103e0e:	6878      	ldr	r0, [r7, #4]
 8103e10:	f000 f869 	bl	8103ee6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8103e14:	6878      	ldr	r0, [r7, #4]
 8103e16:	f000 f87a 	bl	8103f0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8103e1a:	687b      	ldr	r3, [r7, #4]
 8103e1c:	2200      	movs	r2, #0
 8103e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8103e20:	68bb      	ldr	r3, [r7, #8]
 8103e22:	f003 0301 	and.w	r3, r3, #1
 8103e26:	2b00      	cmp	r3, #0
 8103e28:	d00c      	beq.n	8103e44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8103e2a:	68fb      	ldr	r3, [r7, #12]
 8103e2c:	f003 0301 	and.w	r3, r3, #1
 8103e30:	2b00      	cmp	r3, #0
 8103e32:	d007      	beq.n	8103e44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8103e34:	687b      	ldr	r3, [r7, #4]
 8103e36:	681b      	ldr	r3, [r3, #0]
 8103e38:	f06f 0201 	mvn.w	r2, #1
 8103e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8103e3e:	6878      	ldr	r0, [r7, #4]
 8103e40:	f7fc fbf6 	bl	8100630 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8103e44:	68bb      	ldr	r3, [r7, #8]
 8103e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8103e4a:	2b00      	cmp	r3, #0
 8103e4c:	d104      	bne.n	8103e58 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8103e4e:	68bb      	ldr	r3, [r7, #8]
 8103e50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8103e54:	2b00      	cmp	r3, #0
 8103e56:	d00c      	beq.n	8103e72 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8103e58:	68fb      	ldr	r3, [r7, #12]
 8103e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8103e5e:	2b00      	cmp	r3, #0
 8103e60:	d007      	beq.n	8103e72 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8103e62:	687b      	ldr	r3, [r7, #4]
 8103e64:	681b      	ldr	r3, [r3, #0]
 8103e66:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8103e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8103e6c:	6878      	ldr	r0, [r7, #4]
 8103e6e:	f000 f913 	bl	8104098 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8103e72:	68bb      	ldr	r3, [r7, #8]
 8103e74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8103e78:	2b00      	cmp	r3, #0
 8103e7a:	d00c      	beq.n	8103e96 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8103e7c:	68fb      	ldr	r3, [r7, #12]
 8103e7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8103e82:	2b00      	cmp	r3, #0
 8103e84:	d007      	beq.n	8103e96 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8103e86:	687b      	ldr	r3, [r7, #4]
 8103e88:	681b      	ldr	r3, [r3, #0]
 8103e8a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8103e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8103e90:	6878      	ldr	r0, [r7, #4]
 8103e92:	f000 f90b 	bl	81040ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8103e96:	68bb      	ldr	r3, [r7, #8]
 8103e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8103e9c:	2b00      	cmp	r3, #0
 8103e9e:	d00c      	beq.n	8103eba <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8103ea0:	68fb      	ldr	r3, [r7, #12]
 8103ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8103ea6:	2b00      	cmp	r3, #0
 8103ea8:	d007      	beq.n	8103eba <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8103eaa:	687b      	ldr	r3, [r7, #4]
 8103eac:	681b      	ldr	r3, [r3, #0]
 8103eae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8103eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8103eb4:	6878      	ldr	r0, [r7, #4]
 8103eb6:	f000 f834 	bl	8103f22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8103eba:	68bb      	ldr	r3, [r7, #8]
 8103ebc:	f003 0320 	and.w	r3, r3, #32
 8103ec0:	2b00      	cmp	r3, #0
 8103ec2:	d00c      	beq.n	8103ede <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8103ec4:	68fb      	ldr	r3, [r7, #12]
 8103ec6:	f003 0320 	and.w	r3, r3, #32
 8103eca:	2b00      	cmp	r3, #0
 8103ecc:	d007      	beq.n	8103ede <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8103ece:	687b      	ldr	r3, [r7, #4]
 8103ed0:	681b      	ldr	r3, [r3, #0]
 8103ed2:	f06f 0220 	mvn.w	r2, #32
 8103ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8103ed8:	6878      	ldr	r0, [r7, #4]
 8103eda:	f000 f8d3 	bl	8104084 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8103ede:	bf00      	nop
 8103ee0:	3710      	adds	r7, #16
 8103ee2:	46bd      	mov	sp, r7
 8103ee4:	bd80      	pop	{r7, pc}

08103ee6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8103ee6:	b480      	push	{r7}
 8103ee8:	b083      	sub	sp, #12
 8103eea:	af00      	add	r7, sp, #0
 8103eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8103eee:	bf00      	nop
 8103ef0:	370c      	adds	r7, #12
 8103ef2:	46bd      	mov	sp, r7
 8103ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ef8:	4770      	bx	lr

08103efa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8103efa:	b480      	push	{r7}
 8103efc:	b083      	sub	sp, #12
 8103efe:	af00      	add	r7, sp, #0
 8103f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8103f02:	bf00      	nop
 8103f04:	370c      	adds	r7, #12
 8103f06:	46bd      	mov	sp, r7
 8103f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f0c:	4770      	bx	lr

08103f0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8103f0e:	b480      	push	{r7}
 8103f10:	b083      	sub	sp, #12
 8103f12:	af00      	add	r7, sp, #0
 8103f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8103f16:	bf00      	nop
 8103f18:	370c      	adds	r7, #12
 8103f1a:	46bd      	mov	sp, r7
 8103f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f20:	4770      	bx	lr

08103f22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8103f22:	b480      	push	{r7}
 8103f24:	b083      	sub	sp, #12
 8103f26:	af00      	add	r7, sp, #0
 8103f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8103f2a:	bf00      	nop
 8103f2c:	370c      	adds	r7, #12
 8103f2e:	46bd      	mov	sp, r7
 8103f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f34:	4770      	bx	lr
	...

08103f38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8103f38:	b480      	push	{r7}
 8103f3a:	b085      	sub	sp, #20
 8103f3c:	af00      	add	r7, sp, #0
 8103f3e:	6078      	str	r0, [r7, #4]
 8103f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8103f42:	687b      	ldr	r3, [r7, #4]
 8103f44:	681b      	ldr	r3, [r3, #0]
 8103f46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8103f48:	687b      	ldr	r3, [r7, #4]
 8103f4a:	4a46      	ldr	r2, [pc, #280]	@ (8104064 <TIM_Base_SetConfig+0x12c>)
 8103f4c:	4293      	cmp	r3, r2
 8103f4e:	d013      	beq.n	8103f78 <TIM_Base_SetConfig+0x40>
 8103f50:	687b      	ldr	r3, [r7, #4]
 8103f52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103f56:	d00f      	beq.n	8103f78 <TIM_Base_SetConfig+0x40>
 8103f58:	687b      	ldr	r3, [r7, #4]
 8103f5a:	4a43      	ldr	r2, [pc, #268]	@ (8104068 <TIM_Base_SetConfig+0x130>)
 8103f5c:	4293      	cmp	r3, r2
 8103f5e:	d00b      	beq.n	8103f78 <TIM_Base_SetConfig+0x40>
 8103f60:	687b      	ldr	r3, [r7, #4]
 8103f62:	4a42      	ldr	r2, [pc, #264]	@ (810406c <TIM_Base_SetConfig+0x134>)
 8103f64:	4293      	cmp	r3, r2
 8103f66:	d007      	beq.n	8103f78 <TIM_Base_SetConfig+0x40>
 8103f68:	687b      	ldr	r3, [r7, #4]
 8103f6a:	4a41      	ldr	r2, [pc, #260]	@ (8104070 <TIM_Base_SetConfig+0x138>)
 8103f6c:	4293      	cmp	r3, r2
 8103f6e:	d003      	beq.n	8103f78 <TIM_Base_SetConfig+0x40>
 8103f70:	687b      	ldr	r3, [r7, #4]
 8103f72:	4a40      	ldr	r2, [pc, #256]	@ (8104074 <TIM_Base_SetConfig+0x13c>)
 8103f74:	4293      	cmp	r3, r2
 8103f76:	d108      	bne.n	8103f8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8103f78:	68fb      	ldr	r3, [r7, #12]
 8103f7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8103f7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8103f80:	683b      	ldr	r3, [r7, #0]
 8103f82:	685b      	ldr	r3, [r3, #4]
 8103f84:	68fa      	ldr	r2, [r7, #12]
 8103f86:	4313      	orrs	r3, r2
 8103f88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8103f8a:	687b      	ldr	r3, [r7, #4]
 8103f8c:	4a35      	ldr	r2, [pc, #212]	@ (8104064 <TIM_Base_SetConfig+0x12c>)
 8103f8e:	4293      	cmp	r3, r2
 8103f90:	d01f      	beq.n	8103fd2 <TIM_Base_SetConfig+0x9a>
 8103f92:	687b      	ldr	r3, [r7, #4]
 8103f94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103f98:	d01b      	beq.n	8103fd2 <TIM_Base_SetConfig+0x9a>
 8103f9a:	687b      	ldr	r3, [r7, #4]
 8103f9c:	4a32      	ldr	r2, [pc, #200]	@ (8104068 <TIM_Base_SetConfig+0x130>)
 8103f9e:	4293      	cmp	r3, r2
 8103fa0:	d017      	beq.n	8103fd2 <TIM_Base_SetConfig+0x9a>
 8103fa2:	687b      	ldr	r3, [r7, #4]
 8103fa4:	4a31      	ldr	r2, [pc, #196]	@ (810406c <TIM_Base_SetConfig+0x134>)
 8103fa6:	4293      	cmp	r3, r2
 8103fa8:	d013      	beq.n	8103fd2 <TIM_Base_SetConfig+0x9a>
 8103faa:	687b      	ldr	r3, [r7, #4]
 8103fac:	4a30      	ldr	r2, [pc, #192]	@ (8104070 <TIM_Base_SetConfig+0x138>)
 8103fae:	4293      	cmp	r3, r2
 8103fb0:	d00f      	beq.n	8103fd2 <TIM_Base_SetConfig+0x9a>
 8103fb2:	687b      	ldr	r3, [r7, #4]
 8103fb4:	4a2f      	ldr	r2, [pc, #188]	@ (8104074 <TIM_Base_SetConfig+0x13c>)
 8103fb6:	4293      	cmp	r3, r2
 8103fb8:	d00b      	beq.n	8103fd2 <TIM_Base_SetConfig+0x9a>
 8103fba:	687b      	ldr	r3, [r7, #4]
 8103fbc:	4a2e      	ldr	r2, [pc, #184]	@ (8104078 <TIM_Base_SetConfig+0x140>)
 8103fbe:	4293      	cmp	r3, r2
 8103fc0:	d007      	beq.n	8103fd2 <TIM_Base_SetConfig+0x9a>
 8103fc2:	687b      	ldr	r3, [r7, #4]
 8103fc4:	4a2d      	ldr	r2, [pc, #180]	@ (810407c <TIM_Base_SetConfig+0x144>)
 8103fc6:	4293      	cmp	r3, r2
 8103fc8:	d003      	beq.n	8103fd2 <TIM_Base_SetConfig+0x9a>
 8103fca:	687b      	ldr	r3, [r7, #4]
 8103fcc:	4a2c      	ldr	r2, [pc, #176]	@ (8104080 <TIM_Base_SetConfig+0x148>)
 8103fce:	4293      	cmp	r3, r2
 8103fd0:	d108      	bne.n	8103fe4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8103fd2:	68fb      	ldr	r3, [r7, #12]
 8103fd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8103fd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8103fda:	683b      	ldr	r3, [r7, #0]
 8103fdc:	68db      	ldr	r3, [r3, #12]
 8103fde:	68fa      	ldr	r2, [r7, #12]
 8103fe0:	4313      	orrs	r3, r2
 8103fe2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8103fe4:	68fb      	ldr	r3, [r7, #12]
 8103fe6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8103fea:	683b      	ldr	r3, [r7, #0]
 8103fec:	695b      	ldr	r3, [r3, #20]
 8103fee:	4313      	orrs	r3, r2
 8103ff0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8103ff2:	687b      	ldr	r3, [r7, #4]
 8103ff4:	68fa      	ldr	r2, [r7, #12]
 8103ff6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8103ff8:	683b      	ldr	r3, [r7, #0]
 8103ffa:	689a      	ldr	r2, [r3, #8]
 8103ffc:	687b      	ldr	r3, [r7, #4]
 8103ffe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8104000:	683b      	ldr	r3, [r7, #0]
 8104002:	681a      	ldr	r2, [r3, #0]
 8104004:	687b      	ldr	r3, [r7, #4]
 8104006:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8104008:	687b      	ldr	r3, [r7, #4]
 810400a:	4a16      	ldr	r2, [pc, #88]	@ (8104064 <TIM_Base_SetConfig+0x12c>)
 810400c:	4293      	cmp	r3, r2
 810400e:	d00f      	beq.n	8104030 <TIM_Base_SetConfig+0xf8>
 8104010:	687b      	ldr	r3, [r7, #4]
 8104012:	4a18      	ldr	r2, [pc, #96]	@ (8104074 <TIM_Base_SetConfig+0x13c>)
 8104014:	4293      	cmp	r3, r2
 8104016:	d00b      	beq.n	8104030 <TIM_Base_SetConfig+0xf8>
 8104018:	687b      	ldr	r3, [r7, #4]
 810401a:	4a17      	ldr	r2, [pc, #92]	@ (8104078 <TIM_Base_SetConfig+0x140>)
 810401c:	4293      	cmp	r3, r2
 810401e:	d007      	beq.n	8104030 <TIM_Base_SetConfig+0xf8>
 8104020:	687b      	ldr	r3, [r7, #4]
 8104022:	4a16      	ldr	r2, [pc, #88]	@ (810407c <TIM_Base_SetConfig+0x144>)
 8104024:	4293      	cmp	r3, r2
 8104026:	d003      	beq.n	8104030 <TIM_Base_SetConfig+0xf8>
 8104028:	687b      	ldr	r3, [r7, #4]
 810402a:	4a15      	ldr	r2, [pc, #84]	@ (8104080 <TIM_Base_SetConfig+0x148>)
 810402c:	4293      	cmp	r3, r2
 810402e:	d103      	bne.n	8104038 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8104030:	683b      	ldr	r3, [r7, #0]
 8104032:	691a      	ldr	r2, [r3, #16]
 8104034:	687b      	ldr	r3, [r7, #4]
 8104036:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8104038:	687b      	ldr	r3, [r7, #4]
 810403a:	2201      	movs	r2, #1
 810403c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 810403e:	687b      	ldr	r3, [r7, #4]
 8104040:	691b      	ldr	r3, [r3, #16]
 8104042:	f003 0301 	and.w	r3, r3, #1
 8104046:	2b01      	cmp	r3, #1
 8104048:	d105      	bne.n	8104056 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 810404a:	687b      	ldr	r3, [r7, #4]
 810404c:	691b      	ldr	r3, [r3, #16]
 810404e:	f023 0201 	bic.w	r2, r3, #1
 8104052:	687b      	ldr	r3, [r7, #4]
 8104054:	611a      	str	r2, [r3, #16]
  }
}
 8104056:	bf00      	nop
 8104058:	3714      	adds	r7, #20
 810405a:	46bd      	mov	sp, r7
 810405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104060:	4770      	bx	lr
 8104062:	bf00      	nop
 8104064:	40010000 	.word	0x40010000
 8104068:	40000400 	.word	0x40000400
 810406c:	40000800 	.word	0x40000800
 8104070:	40000c00 	.word	0x40000c00
 8104074:	40010400 	.word	0x40010400
 8104078:	40014000 	.word	0x40014000
 810407c:	40014400 	.word	0x40014400
 8104080:	40014800 	.word	0x40014800

08104084 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8104084:	b480      	push	{r7}
 8104086:	b083      	sub	sp, #12
 8104088:	af00      	add	r7, sp, #0
 810408a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 810408c:	bf00      	nop
 810408e:	370c      	adds	r7, #12
 8104090:	46bd      	mov	sp, r7
 8104092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104096:	4770      	bx	lr

08104098 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8104098:	b480      	push	{r7}
 810409a:	b083      	sub	sp, #12
 810409c:	af00      	add	r7, sp, #0
 810409e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 81040a0:	bf00      	nop
 81040a2:	370c      	adds	r7, #12
 81040a4:	46bd      	mov	sp, r7
 81040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040aa:	4770      	bx	lr

081040ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 81040ac:	b480      	push	{r7}
 81040ae:	b083      	sub	sp, #12
 81040b0:	af00      	add	r7, sp, #0
 81040b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 81040b4:	bf00      	nop
 81040b6:	370c      	adds	r7, #12
 81040b8:	46bd      	mov	sp, r7
 81040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040be:	4770      	bx	lr

081040c0 <__NVIC_SetPriority>:
{
 81040c0:	b480      	push	{r7}
 81040c2:	b083      	sub	sp, #12
 81040c4:	af00      	add	r7, sp, #0
 81040c6:	4603      	mov	r3, r0
 81040c8:	6039      	str	r1, [r7, #0]
 81040ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81040cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81040d0:	2b00      	cmp	r3, #0
 81040d2:	db0a      	blt.n	81040ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81040d4:	683b      	ldr	r3, [r7, #0]
 81040d6:	b2da      	uxtb	r2, r3
 81040d8:	490c      	ldr	r1, [pc, #48]	@ (810410c <__NVIC_SetPriority+0x4c>)
 81040da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81040de:	0112      	lsls	r2, r2, #4
 81040e0:	b2d2      	uxtb	r2, r2
 81040e2:	440b      	add	r3, r1
 81040e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 81040e8:	e00a      	b.n	8104100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81040ea:	683b      	ldr	r3, [r7, #0]
 81040ec:	b2da      	uxtb	r2, r3
 81040ee:	4908      	ldr	r1, [pc, #32]	@ (8104110 <__NVIC_SetPriority+0x50>)
 81040f0:	88fb      	ldrh	r3, [r7, #6]
 81040f2:	f003 030f 	and.w	r3, r3, #15
 81040f6:	3b04      	subs	r3, #4
 81040f8:	0112      	lsls	r2, r2, #4
 81040fa:	b2d2      	uxtb	r2, r2
 81040fc:	440b      	add	r3, r1
 81040fe:	761a      	strb	r2, [r3, #24]
}
 8104100:	bf00      	nop
 8104102:	370c      	adds	r7, #12
 8104104:	46bd      	mov	sp, r7
 8104106:	f85d 7b04 	ldr.w	r7, [sp], #4
 810410a:	4770      	bx	lr
 810410c:	e000e100 	.word	0xe000e100
 8104110:	e000ed00 	.word	0xe000ed00

08104114 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8104114:	b580      	push	{r7, lr}
 8104116:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8104118:	4b05      	ldr	r3, [pc, #20]	@ (8104130 <SysTick_Handler+0x1c>)
 810411a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 810411c:	f002 fdbe 	bl	8106c9c <xTaskGetSchedulerState>
 8104120:	4603      	mov	r3, r0
 8104122:	2b01      	cmp	r3, #1
 8104124:	d001      	beq.n	810412a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8104126:	f000 fd9f 	bl	8104c68 <xPortSysTickHandler>
  }
}
 810412a:	bf00      	nop
 810412c:	bd80      	pop	{r7, pc}
 810412e:	bf00      	nop
 8104130:	e000e010 	.word	0xe000e010

08104134 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8104134:	b580      	push	{r7, lr}
 8104136:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8104138:	2100      	movs	r1, #0
 810413a:	f06f 0004 	mvn.w	r0, #4
 810413e:	f7ff ffbf 	bl	81040c0 <__NVIC_SetPriority>
#endif
}
 8104142:	bf00      	nop
 8104144:	bd80      	pop	{r7, pc}
	...

08104148 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8104148:	b480      	push	{r7}
 810414a:	b083      	sub	sp, #12
 810414c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810414e:	f3ef 8305 	mrs	r3, IPSR
 8104152:	603b      	str	r3, [r7, #0]
  return(result);
 8104154:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8104156:	2b00      	cmp	r3, #0
 8104158:	d003      	beq.n	8104162 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 810415a:	f06f 0305 	mvn.w	r3, #5
 810415e:	607b      	str	r3, [r7, #4]
 8104160:	e00c      	b.n	810417c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8104162:	4b0a      	ldr	r3, [pc, #40]	@ (810418c <osKernelInitialize+0x44>)
 8104164:	681b      	ldr	r3, [r3, #0]
 8104166:	2b00      	cmp	r3, #0
 8104168:	d105      	bne.n	8104176 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 810416a:	4b08      	ldr	r3, [pc, #32]	@ (810418c <osKernelInitialize+0x44>)
 810416c:	2201      	movs	r2, #1
 810416e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8104170:	2300      	movs	r3, #0
 8104172:	607b      	str	r3, [r7, #4]
 8104174:	e002      	b.n	810417c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8104176:	f04f 33ff 	mov.w	r3, #4294967295
 810417a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 810417c:	687b      	ldr	r3, [r7, #4]
}
 810417e:	4618      	mov	r0, r3
 8104180:	370c      	adds	r7, #12
 8104182:	46bd      	mov	sp, r7
 8104184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104188:	4770      	bx	lr
 810418a:	bf00      	nop
 810418c:	100000e4 	.word	0x100000e4

08104190 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8104190:	b580      	push	{r7, lr}
 8104192:	b082      	sub	sp, #8
 8104194:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8104196:	f3ef 8305 	mrs	r3, IPSR
 810419a:	603b      	str	r3, [r7, #0]
  return(result);
 810419c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810419e:	2b00      	cmp	r3, #0
 81041a0:	d003      	beq.n	81041aa <osKernelStart+0x1a>
    stat = osErrorISR;
 81041a2:	f06f 0305 	mvn.w	r3, #5
 81041a6:	607b      	str	r3, [r7, #4]
 81041a8:	e010      	b.n	81041cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 81041aa:	4b0b      	ldr	r3, [pc, #44]	@ (81041d8 <osKernelStart+0x48>)
 81041ac:	681b      	ldr	r3, [r3, #0]
 81041ae:	2b01      	cmp	r3, #1
 81041b0:	d109      	bne.n	81041c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 81041b2:	f7ff ffbf 	bl	8104134 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 81041b6:	4b08      	ldr	r3, [pc, #32]	@ (81041d8 <osKernelStart+0x48>)
 81041b8:	2202      	movs	r2, #2
 81041ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 81041bc:	f002 f8d2 	bl	8106364 <vTaskStartScheduler>
      stat = osOK;
 81041c0:	2300      	movs	r3, #0
 81041c2:	607b      	str	r3, [r7, #4]
 81041c4:	e002      	b.n	81041cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 81041c6:	f04f 33ff 	mov.w	r3, #4294967295
 81041ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 81041cc:	687b      	ldr	r3, [r7, #4]
}
 81041ce:	4618      	mov	r0, r3
 81041d0:	3708      	adds	r7, #8
 81041d2:	46bd      	mov	sp, r7
 81041d4:	bd80      	pop	{r7, pc}
 81041d6:	bf00      	nop
 81041d8:	100000e4 	.word	0x100000e4

081041dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 81041dc:	b580      	push	{r7, lr}
 81041de:	b08e      	sub	sp, #56	@ 0x38
 81041e0:	af04      	add	r7, sp, #16
 81041e2:	60f8      	str	r0, [r7, #12]
 81041e4:	60b9      	str	r1, [r7, #8]
 81041e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 81041e8:	2300      	movs	r3, #0
 81041ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81041ec:	f3ef 8305 	mrs	r3, IPSR
 81041f0:	617b      	str	r3, [r7, #20]
  return(result);
 81041f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 81041f4:	2b00      	cmp	r3, #0
 81041f6:	d17e      	bne.n	81042f6 <osThreadNew+0x11a>
 81041f8:	68fb      	ldr	r3, [r7, #12]
 81041fa:	2b00      	cmp	r3, #0
 81041fc:	d07b      	beq.n	81042f6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 81041fe:	2380      	movs	r3, #128	@ 0x80
 8104200:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8104202:	2318      	movs	r3, #24
 8104204:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8104206:	2300      	movs	r3, #0
 8104208:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 810420a:	f04f 33ff 	mov.w	r3, #4294967295
 810420e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8104210:	687b      	ldr	r3, [r7, #4]
 8104212:	2b00      	cmp	r3, #0
 8104214:	d045      	beq.n	81042a2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8104216:	687b      	ldr	r3, [r7, #4]
 8104218:	681b      	ldr	r3, [r3, #0]
 810421a:	2b00      	cmp	r3, #0
 810421c:	d002      	beq.n	8104224 <osThreadNew+0x48>
        name = attr->name;
 810421e:	687b      	ldr	r3, [r7, #4]
 8104220:	681b      	ldr	r3, [r3, #0]
 8104222:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8104224:	687b      	ldr	r3, [r7, #4]
 8104226:	699b      	ldr	r3, [r3, #24]
 8104228:	2b00      	cmp	r3, #0
 810422a:	d002      	beq.n	8104232 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 810422c:	687b      	ldr	r3, [r7, #4]
 810422e:	699b      	ldr	r3, [r3, #24]
 8104230:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8104232:	69fb      	ldr	r3, [r7, #28]
 8104234:	2b00      	cmp	r3, #0
 8104236:	d008      	beq.n	810424a <osThreadNew+0x6e>
 8104238:	69fb      	ldr	r3, [r7, #28]
 810423a:	2b38      	cmp	r3, #56	@ 0x38
 810423c:	d805      	bhi.n	810424a <osThreadNew+0x6e>
 810423e:	687b      	ldr	r3, [r7, #4]
 8104240:	685b      	ldr	r3, [r3, #4]
 8104242:	f003 0301 	and.w	r3, r3, #1
 8104246:	2b00      	cmp	r3, #0
 8104248:	d001      	beq.n	810424e <osThreadNew+0x72>
        return (NULL);
 810424a:	2300      	movs	r3, #0
 810424c:	e054      	b.n	81042f8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 810424e:	687b      	ldr	r3, [r7, #4]
 8104250:	695b      	ldr	r3, [r3, #20]
 8104252:	2b00      	cmp	r3, #0
 8104254:	d003      	beq.n	810425e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8104256:	687b      	ldr	r3, [r7, #4]
 8104258:	695b      	ldr	r3, [r3, #20]
 810425a:	089b      	lsrs	r3, r3, #2
 810425c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810425e:	687b      	ldr	r3, [r7, #4]
 8104260:	689b      	ldr	r3, [r3, #8]
 8104262:	2b00      	cmp	r3, #0
 8104264:	d00e      	beq.n	8104284 <osThreadNew+0xa8>
 8104266:	687b      	ldr	r3, [r7, #4]
 8104268:	68db      	ldr	r3, [r3, #12]
 810426a:	2ba7      	cmp	r3, #167	@ 0xa7
 810426c:	d90a      	bls.n	8104284 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810426e:	687b      	ldr	r3, [r7, #4]
 8104270:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8104272:	2b00      	cmp	r3, #0
 8104274:	d006      	beq.n	8104284 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8104276:	687b      	ldr	r3, [r7, #4]
 8104278:	695b      	ldr	r3, [r3, #20]
 810427a:	2b00      	cmp	r3, #0
 810427c:	d002      	beq.n	8104284 <osThreadNew+0xa8>
        mem = 1;
 810427e:	2301      	movs	r3, #1
 8104280:	61bb      	str	r3, [r7, #24]
 8104282:	e010      	b.n	81042a6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8104284:	687b      	ldr	r3, [r7, #4]
 8104286:	689b      	ldr	r3, [r3, #8]
 8104288:	2b00      	cmp	r3, #0
 810428a:	d10c      	bne.n	81042a6 <osThreadNew+0xca>
 810428c:	687b      	ldr	r3, [r7, #4]
 810428e:	68db      	ldr	r3, [r3, #12]
 8104290:	2b00      	cmp	r3, #0
 8104292:	d108      	bne.n	81042a6 <osThreadNew+0xca>
 8104294:	687b      	ldr	r3, [r7, #4]
 8104296:	691b      	ldr	r3, [r3, #16]
 8104298:	2b00      	cmp	r3, #0
 810429a:	d104      	bne.n	81042a6 <osThreadNew+0xca>
          mem = 0;
 810429c:	2300      	movs	r3, #0
 810429e:	61bb      	str	r3, [r7, #24]
 81042a0:	e001      	b.n	81042a6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 81042a2:	2300      	movs	r3, #0
 81042a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 81042a6:	69bb      	ldr	r3, [r7, #24]
 81042a8:	2b01      	cmp	r3, #1
 81042aa:	d110      	bne.n	81042ce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 81042ac:	687b      	ldr	r3, [r7, #4]
 81042ae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 81042b0:	687a      	ldr	r2, [r7, #4]
 81042b2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 81042b4:	9202      	str	r2, [sp, #8]
 81042b6:	9301      	str	r3, [sp, #4]
 81042b8:	69fb      	ldr	r3, [r7, #28]
 81042ba:	9300      	str	r3, [sp, #0]
 81042bc:	68bb      	ldr	r3, [r7, #8]
 81042be:	6a3a      	ldr	r2, [r7, #32]
 81042c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 81042c2:	68f8      	ldr	r0, [r7, #12]
 81042c4:	f001 fe5b 	bl	8105f7e <xTaskCreateStatic>
 81042c8:	4603      	mov	r3, r0
 81042ca:	613b      	str	r3, [r7, #16]
 81042cc:	e013      	b.n	81042f6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 81042ce:	69bb      	ldr	r3, [r7, #24]
 81042d0:	2b00      	cmp	r3, #0
 81042d2:	d110      	bne.n	81042f6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 81042d4:	6a3b      	ldr	r3, [r7, #32]
 81042d6:	b29a      	uxth	r2, r3
 81042d8:	f107 0310 	add.w	r3, r7, #16
 81042dc:	9301      	str	r3, [sp, #4]
 81042de:	69fb      	ldr	r3, [r7, #28]
 81042e0:	9300      	str	r3, [sp, #0]
 81042e2:	68bb      	ldr	r3, [r7, #8]
 81042e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 81042e6:	68f8      	ldr	r0, [r7, #12]
 81042e8:	f001 fea9 	bl	810603e <xTaskCreate>
 81042ec:	4603      	mov	r3, r0
 81042ee:	2b01      	cmp	r3, #1
 81042f0:	d001      	beq.n	81042f6 <osThreadNew+0x11a>
            hTask = NULL;
 81042f2:	2300      	movs	r3, #0
 81042f4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 81042f6:	693b      	ldr	r3, [r7, #16]
}
 81042f8:	4618      	mov	r0, r3
 81042fa:	3728      	adds	r7, #40	@ 0x28
 81042fc:	46bd      	mov	sp, r7
 81042fe:	bd80      	pop	{r7, pc}

08104300 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8104300:	b580      	push	{r7, lr}
 8104302:	b084      	sub	sp, #16
 8104304:	af00      	add	r7, sp, #0
 8104306:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8104308:	f3ef 8305 	mrs	r3, IPSR
 810430c:	60bb      	str	r3, [r7, #8]
  return(result);
 810430e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8104310:	2b00      	cmp	r3, #0
 8104312:	d003      	beq.n	810431c <osDelay+0x1c>
    stat = osErrorISR;
 8104314:	f06f 0305 	mvn.w	r3, #5
 8104318:	60fb      	str	r3, [r7, #12]
 810431a:	e007      	b.n	810432c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 810431c:	2300      	movs	r3, #0
 810431e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8104320:	687b      	ldr	r3, [r7, #4]
 8104322:	2b00      	cmp	r3, #0
 8104324:	d002      	beq.n	810432c <osDelay+0x2c>
      vTaskDelay(ticks);
 8104326:	6878      	ldr	r0, [r7, #4]
 8104328:	f001 ffe6 	bl	81062f8 <vTaskDelay>
    }
  }

  return (stat);
 810432c:	68fb      	ldr	r3, [r7, #12]
}
 810432e:	4618      	mov	r0, r3
 8104330:	3710      	adds	r7, #16
 8104332:	46bd      	mov	sp, r7
 8104334:	bd80      	pop	{r7, pc}
	...

08104338 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8104338:	b480      	push	{r7}
 810433a:	b085      	sub	sp, #20
 810433c:	af00      	add	r7, sp, #0
 810433e:	60f8      	str	r0, [r7, #12]
 8104340:	60b9      	str	r1, [r7, #8]
 8104342:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8104344:	68fb      	ldr	r3, [r7, #12]
 8104346:	4a07      	ldr	r2, [pc, #28]	@ (8104364 <vApplicationGetIdleTaskMemory+0x2c>)
 8104348:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 810434a:	68bb      	ldr	r3, [r7, #8]
 810434c:	4a06      	ldr	r2, [pc, #24]	@ (8104368 <vApplicationGetIdleTaskMemory+0x30>)
 810434e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8104350:	687b      	ldr	r3, [r7, #4]
 8104352:	2280      	movs	r2, #128	@ 0x80
 8104354:	601a      	str	r2, [r3, #0]
}
 8104356:	bf00      	nop
 8104358:	3714      	adds	r7, #20
 810435a:	46bd      	mov	sp, r7
 810435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104360:	4770      	bx	lr
 8104362:	bf00      	nop
 8104364:	100000e8 	.word	0x100000e8
 8104368:	10000190 	.word	0x10000190

0810436c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 810436c:	b480      	push	{r7}
 810436e:	b085      	sub	sp, #20
 8104370:	af00      	add	r7, sp, #0
 8104372:	60f8      	str	r0, [r7, #12]
 8104374:	60b9      	str	r1, [r7, #8]
 8104376:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8104378:	68fb      	ldr	r3, [r7, #12]
 810437a:	4a07      	ldr	r2, [pc, #28]	@ (8104398 <vApplicationGetTimerTaskMemory+0x2c>)
 810437c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 810437e:	68bb      	ldr	r3, [r7, #8]
 8104380:	4a06      	ldr	r2, [pc, #24]	@ (810439c <vApplicationGetTimerTaskMemory+0x30>)
 8104382:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8104384:	687b      	ldr	r3, [r7, #4]
 8104386:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810438a:	601a      	str	r2, [r3, #0]
}
 810438c:	bf00      	nop
 810438e:	3714      	adds	r7, #20
 8104390:	46bd      	mov	sp, r7
 8104392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104396:	4770      	bx	lr
 8104398:	10000390 	.word	0x10000390
 810439c:	10000438 	.word	0x10000438

081043a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 81043a0:	b580      	push	{r7, lr}
 81043a2:	b08a      	sub	sp, #40	@ 0x28
 81043a4:	af00      	add	r7, sp, #0
 81043a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 81043a8:	2300      	movs	r3, #0
 81043aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 81043ac:	f002 f84a 	bl	8106444 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 81043b0:	4b5c      	ldr	r3, [pc, #368]	@ (8104524 <pvPortMalloc+0x184>)
 81043b2:	681b      	ldr	r3, [r3, #0]
 81043b4:	2b00      	cmp	r3, #0
 81043b6:	d101      	bne.n	81043bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 81043b8:	f000 f924 	bl	8104604 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 81043bc:	4b5a      	ldr	r3, [pc, #360]	@ (8104528 <pvPortMalloc+0x188>)
 81043be:	681a      	ldr	r2, [r3, #0]
 81043c0:	687b      	ldr	r3, [r7, #4]
 81043c2:	4013      	ands	r3, r2
 81043c4:	2b00      	cmp	r3, #0
 81043c6:	f040 8095 	bne.w	81044f4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 81043ca:	687b      	ldr	r3, [r7, #4]
 81043cc:	2b00      	cmp	r3, #0
 81043ce:	d01e      	beq.n	810440e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 81043d0:	2208      	movs	r2, #8
 81043d2:	687b      	ldr	r3, [r7, #4]
 81043d4:	4413      	add	r3, r2
 81043d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 81043d8:	687b      	ldr	r3, [r7, #4]
 81043da:	f003 0307 	and.w	r3, r3, #7
 81043de:	2b00      	cmp	r3, #0
 81043e0:	d015      	beq.n	810440e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 81043e2:	687b      	ldr	r3, [r7, #4]
 81043e4:	f023 0307 	bic.w	r3, r3, #7
 81043e8:	3308      	adds	r3, #8
 81043ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 81043ec:	687b      	ldr	r3, [r7, #4]
 81043ee:	f003 0307 	and.w	r3, r3, #7
 81043f2:	2b00      	cmp	r3, #0
 81043f4:	d00b      	beq.n	810440e <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 81043f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81043fa:	f383 8811 	msr	BASEPRI, r3
 81043fe:	f3bf 8f6f 	isb	sy
 8104402:	f3bf 8f4f 	dsb	sy
 8104406:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8104408:	bf00      	nop
 810440a:	bf00      	nop
 810440c:	e7fd      	b.n	810440a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 810440e:	687b      	ldr	r3, [r7, #4]
 8104410:	2b00      	cmp	r3, #0
 8104412:	d06f      	beq.n	81044f4 <pvPortMalloc+0x154>
 8104414:	4b45      	ldr	r3, [pc, #276]	@ (810452c <pvPortMalloc+0x18c>)
 8104416:	681b      	ldr	r3, [r3, #0]
 8104418:	687a      	ldr	r2, [r7, #4]
 810441a:	429a      	cmp	r2, r3
 810441c:	d86a      	bhi.n	81044f4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 810441e:	4b44      	ldr	r3, [pc, #272]	@ (8104530 <pvPortMalloc+0x190>)
 8104420:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8104422:	4b43      	ldr	r3, [pc, #268]	@ (8104530 <pvPortMalloc+0x190>)
 8104424:	681b      	ldr	r3, [r3, #0]
 8104426:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8104428:	e004      	b.n	8104434 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 810442a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810442c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 810442e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104430:	681b      	ldr	r3, [r3, #0]
 8104432:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8104434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104436:	685b      	ldr	r3, [r3, #4]
 8104438:	687a      	ldr	r2, [r7, #4]
 810443a:	429a      	cmp	r2, r3
 810443c:	d903      	bls.n	8104446 <pvPortMalloc+0xa6>
 810443e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104440:	681b      	ldr	r3, [r3, #0]
 8104442:	2b00      	cmp	r3, #0
 8104444:	d1f1      	bne.n	810442a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8104446:	4b37      	ldr	r3, [pc, #220]	@ (8104524 <pvPortMalloc+0x184>)
 8104448:	681b      	ldr	r3, [r3, #0]
 810444a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810444c:	429a      	cmp	r2, r3
 810444e:	d051      	beq.n	81044f4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8104450:	6a3b      	ldr	r3, [r7, #32]
 8104452:	681b      	ldr	r3, [r3, #0]
 8104454:	2208      	movs	r2, #8
 8104456:	4413      	add	r3, r2
 8104458:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 810445a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810445c:	681a      	ldr	r2, [r3, #0]
 810445e:	6a3b      	ldr	r3, [r7, #32]
 8104460:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8104462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104464:	685a      	ldr	r2, [r3, #4]
 8104466:	687b      	ldr	r3, [r7, #4]
 8104468:	1ad2      	subs	r2, r2, r3
 810446a:	2308      	movs	r3, #8
 810446c:	005b      	lsls	r3, r3, #1
 810446e:	429a      	cmp	r2, r3
 8104470:	d920      	bls.n	81044b4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8104472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8104474:	687b      	ldr	r3, [r7, #4]
 8104476:	4413      	add	r3, r2
 8104478:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 810447a:	69bb      	ldr	r3, [r7, #24]
 810447c:	f003 0307 	and.w	r3, r3, #7
 8104480:	2b00      	cmp	r3, #0
 8104482:	d00b      	beq.n	810449c <pvPortMalloc+0xfc>
	__asm volatile
 8104484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104488:	f383 8811 	msr	BASEPRI, r3
 810448c:	f3bf 8f6f 	isb	sy
 8104490:	f3bf 8f4f 	dsb	sy
 8104494:	613b      	str	r3, [r7, #16]
}
 8104496:	bf00      	nop
 8104498:	bf00      	nop
 810449a:	e7fd      	b.n	8104498 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 810449c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810449e:	685a      	ldr	r2, [r3, #4]
 81044a0:	687b      	ldr	r3, [r7, #4]
 81044a2:	1ad2      	subs	r2, r2, r3
 81044a4:	69bb      	ldr	r3, [r7, #24]
 81044a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 81044a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81044aa:	687a      	ldr	r2, [r7, #4]
 81044ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 81044ae:	69b8      	ldr	r0, [r7, #24]
 81044b0:	f000 f90a 	bl	81046c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 81044b4:	4b1d      	ldr	r3, [pc, #116]	@ (810452c <pvPortMalloc+0x18c>)
 81044b6:	681a      	ldr	r2, [r3, #0]
 81044b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81044ba:	685b      	ldr	r3, [r3, #4]
 81044bc:	1ad3      	subs	r3, r2, r3
 81044be:	4a1b      	ldr	r2, [pc, #108]	@ (810452c <pvPortMalloc+0x18c>)
 81044c0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 81044c2:	4b1a      	ldr	r3, [pc, #104]	@ (810452c <pvPortMalloc+0x18c>)
 81044c4:	681a      	ldr	r2, [r3, #0]
 81044c6:	4b1b      	ldr	r3, [pc, #108]	@ (8104534 <pvPortMalloc+0x194>)
 81044c8:	681b      	ldr	r3, [r3, #0]
 81044ca:	429a      	cmp	r2, r3
 81044cc:	d203      	bcs.n	81044d6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 81044ce:	4b17      	ldr	r3, [pc, #92]	@ (810452c <pvPortMalloc+0x18c>)
 81044d0:	681b      	ldr	r3, [r3, #0]
 81044d2:	4a18      	ldr	r2, [pc, #96]	@ (8104534 <pvPortMalloc+0x194>)
 81044d4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 81044d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81044d8:	685a      	ldr	r2, [r3, #4]
 81044da:	4b13      	ldr	r3, [pc, #76]	@ (8104528 <pvPortMalloc+0x188>)
 81044dc:	681b      	ldr	r3, [r3, #0]
 81044de:	431a      	orrs	r2, r3
 81044e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81044e2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 81044e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81044e6:	2200      	movs	r2, #0
 81044e8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 81044ea:	4b13      	ldr	r3, [pc, #76]	@ (8104538 <pvPortMalloc+0x198>)
 81044ec:	681b      	ldr	r3, [r3, #0]
 81044ee:	3301      	adds	r3, #1
 81044f0:	4a11      	ldr	r2, [pc, #68]	@ (8104538 <pvPortMalloc+0x198>)
 81044f2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 81044f4:	f001 ffb4 	bl	8106460 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 81044f8:	69fb      	ldr	r3, [r7, #28]
 81044fa:	f003 0307 	and.w	r3, r3, #7
 81044fe:	2b00      	cmp	r3, #0
 8104500:	d00b      	beq.n	810451a <pvPortMalloc+0x17a>
	__asm volatile
 8104502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104506:	f383 8811 	msr	BASEPRI, r3
 810450a:	f3bf 8f6f 	isb	sy
 810450e:	f3bf 8f4f 	dsb	sy
 8104512:	60fb      	str	r3, [r7, #12]
}
 8104514:	bf00      	nop
 8104516:	bf00      	nop
 8104518:	e7fd      	b.n	8104516 <pvPortMalloc+0x176>
	return pvReturn;
 810451a:	69fb      	ldr	r3, [r7, #28]
}
 810451c:	4618      	mov	r0, r3
 810451e:	3728      	adds	r7, #40	@ 0x28
 8104520:	46bd      	mov	sp, r7
 8104522:	bd80      	pop	{r7, pc}
 8104524:	10004440 	.word	0x10004440
 8104528:	10004454 	.word	0x10004454
 810452c:	10004444 	.word	0x10004444
 8104530:	10004438 	.word	0x10004438
 8104534:	10004448 	.word	0x10004448
 8104538:	1000444c 	.word	0x1000444c

0810453c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 810453c:	b580      	push	{r7, lr}
 810453e:	b086      	sub	sp, #24
 8104540:	af00      	add	r7, sp, #0
 8104542:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8104544:	687b      	ldr	r3, [r7, #4]
 8104546:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8104548:	687b      	ldr	r3, [r7, #4]
 810454a:	2b00      	cmp	r3, #0
 810454c:	d04f      	beq.n	81045ee <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 810454e:	2308      	movs	r3, #8
 8104550:	425b      	negs	r3, r3
 8104552:	697a      	ldr	r2, [r7, #20]
 8104554:	4413      	add	r3, r2
 8104556:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8104558:	697b      	ldr	r3, [r7, #20]
 810455a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 810455c:	693b      	ldr	r3, [r7, #16]
 810455e:	685a      	ldr	r2, [r3, #4]
 8104560:	4b25      	ldr	r3, [pc, #148]	@ (81045f8 <vPortFree+0xbc>)
 8104562:	681b      	ldr	r3, [r3, #0]
 8104564:	4013      	ands	r3, r2
 8104566:	2b00      	cmp	r3, #0
 8104568:	d10b      	bne.n	8104582 <vPortFree+0x46>
	__asm volatile
 810456a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810456e:	f383 8811 	msr	BASEPRI, r3
 8104572:	f3bf 8f6f 	isb	sy
 8104576:	f3bf 8f4f 	dsb	sy
 810457a:	60fb      	str	r3, [r7, #12]
}
 810457c:	bf00      	nop
 810457e:	bf00      	nop
 8104580:	e7fd      	b.n	810457e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8104582:	693b      	ldr	r3, [r7, #16]
 8104584:	681b      	ldr	r3, [r3, #0]
 8104586:	2b00      	cmp	r3, #0
 8104588:	d00b      	beq.n	81045a2 <vPortFree+0x66>
	__asm volatile
 810458a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810458e:	f383 8811 	msr	BASEPRI, r3
 8104592:	f3bf 8f6f 	isb	sy
 8104596:	f3bf 8f4f 	dsb	sy
 810459a:	60bb      	str	r3, [r7, #8]
}
 810459c:	bf00      	nop
 810459e:	bf00      	nop
 81045a0:	e7fd      	b.n	810459e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 81045a2:	693b      	ldr	r3, [r7, #16]
 81045a4:	685a      	ldr	r2, [r3, #4]
 81045a6:	4b14      	ldr	r3, [pc, #80]	@ (81045f8 <vPortFree+0xbc>)
 81045a8:	681b      	ldr	r3, [r3, #0]
 81045aa:	4013      	ands	r3, r2
 81045ac:	2b00      	cmp	r3, #0
 81045ae:	d01e      	beq.n	81045ee <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 81045b0:	693b      	ldr	r3, [r7, #16]
 81045b2:	681b      	ldr	r3, [r3, #0]
 81045b4:	2b00      	cmp	r3, #0
 81045b6:	d11a      	bne.n	81045ee <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 81045b8:	693b      	ldr	r3, [r7, #16]
 81045ba:	685a      	ldr	r2, [r3, #4]
 81045bc:	4b0e      	ldr	r3, [pc, #56]	@ (81045f8 <vPortFree+0xbc>)
 81045be:	681b      	ldr	r3, [r3, #0]
 81045c0:	43db      	mvns	r3, r3
 81045c2:	401a      	ands	r2, r3
 81045c4:	693b      	ldr	r3, [r7, #16]
 81045c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 81045c8:	f001 ff3c 	bl	8106444 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 81045cc:	693b      	ldr	r3, [r7, #16]
 81045ce:	685a      	ldr	r2, [r3, #4]
 81045d0:	4b0a      	ldr	r3, [pc, #40]	@ (81045fc <vPortFree+0xc0>)
 81045d2:	681b      	ldr	r3, [r3, #0]
 81045d4:	4413      	add	r3, r2
 81045d6:	4a09      	ldr	r2, [pc, #36]	@ (81045fc <vPortFree+0xc0>)
 81045d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 81045da:	6938      	ldr	r0, [r7, #16]
 81045dc:	f000 f874 	bl	81046c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 81045e0:	4b07      	ldr	r3, [pc, #28]	@ (8104600 <vPortFree+0xc4>)
 81045e2:	681b      	ldr	r3, [r3, #0]
 81045e4:	3301      	adds	r3, #1
 81045e6:	4a06      	ldr	r2, [pc, #24]	@ (8104600 <vPortFree+0xc4>)
 81045e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 81045ea:	f001 ff39 	bl	8106460 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 81045ee:	bf00      	nop
 81045f0:	3718      	adds	r7, #24
 81045f2:	46bd      	mov	sp, r7
 81045f4:	bd80      	pop	{r7, pc}
 81045f6:	bf00      	nop
 81045f8:	10004454 	.word	0x10004454
 81045fc:	10004444 	.word	0x10004444
 8104600:	10004450 	.word	0x10004450

08104604 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8104604:	b480      	push	{r7}
 8104606:	b085      	sub	sp, #20
 8104608:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 810460a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 810460e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8104610:	4b27      	ldr	r3, [pc, #156]	@ (81046b0 <prvHeapInit+0xac>)
 8104612:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8104614:	68fb      	ldr	r3, [r7, #12]
 8104616:	f003 0307 	and.w	r3, r3, #7
 810461a:	2b00      	cmp	r3, #0
 810461c:	d00c      	beq.n	8104638 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 810461e:	68fb      	ldr	r3, [r7, #12]
 8104620:	3307      	adds	r3, #7
 8104622:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8104624:	68fb      	ldr	r3, [r7, #12]
 8104626:	f023 0307 	bic.w	r3, r3, #7
 810462a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 810462c:	68ba      	ldr	r2, [r7, #8]
 810462e:	68fb      	ldr	r3, [r7, #12]
 8104630:	1ad3      	subs	r3, r2, r3
 8104632:	4a1f      	ldr	r2, [pc, #124]	@ (81046b0 <prvHeapInit+0xac>)
 8104634:	4413      	add	r3, r2
 8104636:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8104638:	68fb      	ldr	r3, [r7, #12]
 810463a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 810463c:	4a1d      	ldr	r2, [pc, #116]	@ (81046b4 <prvHeapInit+0xb0>)
 810463e:	687b      	ldr	r3, [r7, #4]
 8104640:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8104642:	4b1c      	ldr	r3, [pc, #112]	@ (81046b4 <prvHeapInit+0xb0>)
 8104644:	2200      	movs	r2, #0
 8104646:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8104648:	687b      	ldr	r3, [r7, #4]
 810464a:	68ba      	ldr	r2, [r7, #8]
 810464c:	4413      	add	r3, r2
 810464e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8104650:	2208      	movs	r2, #8
 8104652:	68fb      	ldr	r3, [r7, #12]
 8104654:	1a9b      	subs	r3, r3, r2
 8104656:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8104658:	68fb      	ldr	r3, [r7, #12]
 810465a:	f023 0307 	bic.w	r3, r3, #7
 810465e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8104660:	68fb      	ldr	r3, [r7, #12]
 8104662:	4a15      	ldr	r2, [pc, #84]	@ (81046b8 <prvHeapInit+0xb4>)
 8104664:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8104666:	4b14      	ldr	r3, [pc, #80]	@ (81046b8 <prvHeapInit+0xb4>)
 8104668:	681b      	ldr	r3, [r3, #0]
 810466a:	2200      	movs	r2, #0
 810466c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 810466e:	4b12      	ldr	r3, [pc, #72]	@ (81046b8 <prvHeapInit+0xb4>)
 8104670:	681b      	ldr	r3, [r3, #0]
 8104672:	2200      	movs	r2, #0
 8104674:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8104676:	687b      	ldr	r3, [r7, #4]
 8104678:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 810467a:	683b      	ldr	r3, [r7, #0]
 810467c:	68fa      	ldr	r2, [r7, #12]
 810467e:	1ad2      	subs	r2, r2, r3
 8104680:	683b      	ldr	r3, [r7, #0]
 8104682:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8104684:	4b0c      	ldr	r3, [pc, #48]	@ (81046b8 <prvHeapInit+0xb4>)
 8104686:	681a      	ldr	r2, [r3, #0]
 8104688:	683b      	ldr	r3, [r7, #0]
 810468a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810468c:	683b      	ldr	r3, [r7, #0]
 810468e:	685b      	ldr	r3, [r3, #4]
 8104690:	4a0a      	ldr	r2, [pc, #40]	@ (81046bc <prvHeapInit+0xb8>)
 8104692:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8104694:	683b      	ldr	r3, [r7, #0]
 8104696:	685b      	ldr	r3, [r3, #4]
 8104698:	4a09      	ldr	r2, [pc, #36]	@ (81046c0 <prvHeapInit+0xbc>)
 810469a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 810469c:	4b09      	ldr	r3, [pc, #36]	@ (81046c4 <prvHeapInit+0xc0>)
 810469e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 81046a2:	601a      	str	r2, [r3, #0]
}
 81046a4:	bf00      	nop
 81046a6:	3714      	adds	r7, #20
 81046a8:	46bd      	mov	sp, r7
 81046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046ae:	4770      	bx	lr
 81046b0:	10000838 	.word	0x10000838
 81046b4:	10004438 	.word	0x10004438
 81046b8:	10004440 	.word	0x10004440
 81046bc:	10004448 	.word	0x10004448
 81046c0:	10004444 	.word	0x10004444
 81046c4:	10004454 	.word	0x10004454

081046c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 81046c8:	b480      	push	{r7}
 81046ca:	b085      	sub	sp, #20
 81046cc:	af00      	add	r7, sp, #0
 81046ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 81046d0:	4b28      	ldr	r3, [pc, #160]	@ (8104774 <prvInsertBlockIntoFreeList+0xac>)
 81046d2:	60fb      	str	r3, [r7, #12]
 81046d4:	e002      	b.n	81046dc <prvInsertBlockIntoFreeList+0x14>
 81046d6:	68fb      	ldr	r3, [r7, #12]
 81046d8:	681b      	ldr	r3, [r3, #0]
 81046da:	60fb      	str	r3, [r7, #12]
 81046dc:	68fb      	ldr	r3, [r7, #12]
 81046de:	681b      	ldr	r3, [r3, #0]
 81046e0:	687a      	ldr	r2, [r7, #4]
 81046e2:	429a      	cmp	r2, r3
 81046e4:	d8f7      	bhi.n	81046d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 81046e6:	68fb      	ldr	r3, [r7, #12]
 81046e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 81046ea:	68fb      	ldr	r3, [r7, #12]
 81046ec:	685b      	ldr	r3, [r3, #4]
 81046ee:	68ba      	ldr	r2, [r7, #8]
 81046f0:	4413      	add	r3, r2
 81046f2:	687a      	ldr	r2, [r7, #4]
 81046f4:	429a      	cmp	r2, r3
 81046f6:	d108      	bne.n	810470a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 81046f8:	68fb      	ldr	r3, [r7, #12]
 81046fa:	685a      	ldr	r2, [r3, #4]
 81046fc:	687b      	ldr	r3, [r7, #4]
 81046fe:	685b      	ldr	r3, [r3, #4]
 8104700:	441a      	add	r2, r3
 8104702:	68fb      	ldr	r3, [r7, #12]
 8104704:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8104706:	68fb      	ldr	r3, [r7, #12]
 8104708:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 810470a:	687b      	ldr	r3, [r7, #4]
 810470c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 810470e:	687b      	ldr	r3, [r7, #4]
 8104710:	685b      	ldr	r3, [r3, #4]
 8104712:	68ba      	ldr	r2, [r7, #8]
 8104714:	441a      	add	r2, r3
 8104716:	68fb      	ldr	r3, [r7, #12]
 8104718:	681b      	ldr	r3, [r3, #0]
 810471a:	429a      	cmp	r2, r3
 810471c:	d118      	bne.n	8104750 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 810471e:	68fb      	ldr	r3, [r7, #12]
 8104720:	681a      	ldr	r2, [r3, #0]
 8104722:	4b15      	ldr	r3, [pc, #84]	@ (8104778 <prvInsertBlockIntoFreeList+0xb0>)
 8104724:	681b      	ldr	r3, [r3, #0]
 8104726:	429a      	cmp	r2, r3
 8104728:	d00d      	beq.n	8104746 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 810472a:	687b      	ldr	r3, [r7, #4]
 810472c:	685a      	ldr	r2, [r3, #4]
 810472e:	68fb      	ldr	r3, [r7, #12]
 8104730:	681b      	ldr	r3, [r3, #0]
 8104732:	685b      	ldr	r3, [r3, #4]
 8104734:	441a      	add	r2, r3
 8104736:	687b      	ldr	r3, [r7, #4]
 8104738:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 810473a:	68fb      	ldr	r3, [r7, #12]
 810473c:	681b      	ldr	r3, [r3, #0]
 810473e:	681a      	ldr	r2, [r3, #0]
 8104740:	687b      	ldr	r3, [r7, #4]
 8104742:	601a      	str	r2, [r3, #0]
 8104744:	e008      	b.n	8104758 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8104746:	4b0c      	ldr	r3, [pc, #48]	@ (8104778 <prvInsertBlockIntoFreeList+0xb0>)
 8104748:	681a      	ldr	r2, [r3, #0]
 810474a:	687b      	ldr	r3, [r7, #4]
 810474c:	601a      	str	r2, [r3, #0]
 810474e:	e003      	b.n	8104758 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8104750:	68fb      	ldr	r3, [r7, #12]
 8104752:	681a      	ldr	r2, [r3, #0]
 8104754:	687b      	ldr	r3, [r7, #4]
 8104756:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8104758:	68fa      	ldr	r2, [r7, #12]
 810475a:	687b      	ldr	r3, [r7, #4]
 810475c:	429a      	cmp	r2, r3
 810475e:	d002      	beq.n	8104766 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8104760:	68fb      	ldr	r3, [r7, #12]
 8104762:	687a      	ldr	r2, [r7, #4]
 8104764:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8104766:	bf00      	nop
 8104768:	3714      	adds	r7, #20
 810476a:	46bd      	mov	sp, r7
 810476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104770:	4770      	bx	lr
 8104772:	bf00      	nop
 8104774:	10004438 	.word	0x10004438
 8104778:	10004440 	.word	0x10004440

0810477c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 810477c:	b480      	push	{r7}
 810477e:	b083      	sub	sp, #12
 8104780:	af00      	add	r7, sp, #0
 8104782:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8104784:	687b      	ldr	r3, [r7, #4]
 8104786:	f103 0208 	add.w	r2, r3, #8
 810478a:	687b      	ldr	r3, [r7, #4]
 810478c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 810478e:	687b      	ldr	r3, [r7, #4]
 8104790:	f04f 32ff 	mov.w	r2, #4294967295
 8104794:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8104796:	687b      	ldr	r3, [r7, #4]
 8104798:	f103 0208 	add.w	r2, r3, #8
 810479c:	687b      	ldr	r3, [r7, #4]
 810479e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 81047a0:	687b      	ldr	r3, [r7, #4]
 81047a2:	f103 0208 	add.w	r2, r3, #8
 81047a6:	687b      	ldr	r3, [r7, #4]
 81047a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 81047aa:	687b      	ldr	r3, [r7, #4]
 81047ac:	2200      	movs	r2, #0
 81047ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 81047b0:	bf00      	nop
 81047b2:	370c      	adds	r7, #12
 81047b4:	46bd      	mov	sp, r7
 81047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047ba:	4770      	bx	lr

081047bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 81047bc:	b480      	push	{r7}
 81047be:	b083      	sub	sp, #12
 81047c0:	af00      	add	r7, sp, #0
 81047c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 81047c4:	687b      	ldr	r3, [r7, #4]
 81047c6:	2200      	movs	r2, #0
 81047c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 81047ca:	bf00      	nop
 81047cc:	370c      	adds	r7, #12
 81047ce:	46bd      	mov	sp, r7
 81047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047d4:	4770      	bx	lr

081047d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81047d6:	b480      	push	{r7}
 81047d8:	b085      	sub	sp, #20
 81047da:	af00      	add	r7, sp, #0
 81047dc:	6078      	str	r0, [r7, #4]
 81047de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 81047e0:	687b      	ldr	r3, [r7, #4]
 81047e2:	685b      	ldr	r3, [r3, #4]
 81047e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 81047e6:	683b      	ldr	r3, [r7, #0]
 81047e8:	68fa      	ldr	r2, [r7, #12]
 81047ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 81047ec:	68fb      	ldr	r3, [r7, #12]
 81047ee:	689a      	ldr	r2, [r3, #8]
 81047f0:	683b      	ldr	r3, [r7, #0]
 81047f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 81047f4:	68fb      	ldr	r3, [r7, #12]
 81047f6:	689b      	ldr	r3, [r3, #8]
 81047f8:	683a      	ldr	r2, [r7, #0]
 81047fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 81047fc:	68fb      	ldr	r3, [r7, #12]
 81047fe:	683a      	ldr	r2, [r7, #0]
 8104800:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8104802:	683b      	ldr	r3, [r7, #0]
 8104804:	687a      	ldr	r2, [r7, #4]
 8104806:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8104808:	687b      	ldr	r3, [r7, #4]
 810480a:	681b      	ldr	r3, [r3, #0]
 810480c:	1c5a      	adds	r2, r3, #1
 810480e:	687b      	ldr	r3, [r7, #4]
 8104810:	601a      	str	r2, [r3, #0]
}
 8104812:	bf00      	nop
 8104814:	3714      	adds	r7, #20
 8104816:	46bd      	mov	sp, r7
 8104818:	f85d 7b04 	ldr.w	r7, [sp], #4
 810481c:	4770      	bx	lr

0810481e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810481e:	b480      	push	{r7}
 8104820:	b085      	sub	sp, #20
 8104822:	af00      	add	r7, sp, #0
 8104824:	6078      	str	r0, [r7, #4]
 8104826:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8104828:	683b      	ldr	r3, [r7, #0]
 810482a:	681b      	ldr	r3, [r3, #0]
 810482c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 810482e:	68bb      	ldr	r3, [r7, #8]
 8104830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104834:	d103      	bne.n	810483e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8104836:	687b      	ldr	r3, [r7, #4]
 8104838:	691b      	ldr	r3, [r3, #16]
 810483a:	60fb      	str	r3, [r7, #12]
 810483c:	e00c      	b.n	8104858 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 810483e:	687b      	ldr	r3, [r7, #4]
 8104840:	3308      	adds	r3, #8
 8104842:	60fb      	str	r3, [r7, #12]
 8104844:	e002      	b.n	810484c <vListInsert+0x2e>
 8104846:	68fb      	ldr	r3, [r7, #12]
 8104848:	685b      	ldr	r3, [r3, #4]
 810484a:	60fb      	str	r3, [r7, #12]
 810484c:	68fb      	ldr	r3, [r7, #12]
 810484e:	685b      	ldr	r3, [r3, #4]
 8104850:	681b      	ldr	r3, [r3, #0]
 8104852:	68ba      	ldr	r2, [r7, #8]
 8104854:	429a      	cmp	r2, r3
 8104856:	d2f6      	bcs.n	8104846 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8104858:	68fb      	ldr	r3, [r7, #12]
 810485a:	685a      	ldr	r2, [r3, #4]
 810485c:	683b      	ldr	r3, [r7, #0]
 810485e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8104860:	683b      	ldr	r3, [r7, #0]
 8104862:	685b      	ldr	r3, [r3, #4]
 8104864:	683a      	ldr	r2, [r7, #0]
 8104866:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8104868:	683b      	ldr	r3, [r7, #0]
 810486a:	68fa      	ldr	r2, [r7, #12]
 810486c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 810486e:	68fb      	ldr	r3, [r7, #12]
 8104870:	683a      	ldr	r2, [r7, #0]
 8104872:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8104874:	683b      	ldr	r3, [r7, #0]
 8104876:	687a      	ldr	r2, [r7, #4]
 8104878:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810487a:	687b      	ldr	r3, [r7, #4]
 810487c:	681b      	ldr	r3, [r3, #0]
 810487e:	1c5a      	adds	r2, r3, #1
 8104880:	687b      	ldr	r3, [r7, #4]
 8104882:	601a      	str	r2, [r3, #0]
}
 8104884:	bf00      	nop
 8104886:	3714      	adds	r7, #20
 8104888:	46bd      	mov	sp, r7
 810488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810488e:	4770      	bx	lr

08104890 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8104890:	b480      	push	{r7}
 8104892:	b085      	sub	sp, #20
 8104894:	af00      	add	r7, sp, #0
 8104896:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8104898:	687b      	ldr	r3, [r7, #4]
 810489a:	691b      	ldr	r3, [r3, #16]
 810489c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 810489e:	687b      	ldr	r3, [r7, #4]
 81048a0:	685b      	ldr	r3, [r3, #4]
 81048a2:	687a      	ldr	r2, [r7, #4]
 81048a4:	6892      	ldr	r2, [r2, #8]
 81048a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 81048a8:	687b      	ldr	r3, [r7, #4]
 81048aa:	689b      	ldr	r3, [r3, #8]
 81048ac:	687a      	ldr	r2, [r7, #4]
 81048ae:	6852      	ldr	r2, [r2, #4]
 81048b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 81048b2:	68fb      	ldr	r3, [r7, #12]
 81048b4:	685b      	ldr	r3, [r3, #4]
 81048b6:	687a      	ldr	r2, [r7, #4]
 81048b8:	429a      	cmp	r2, r3
 81048ba:	d103      	bne.n	81048c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 81048bc:	687b      	ldr	r3, [r7, #4]
 81048be:	689a      	ldr	r2, [r3, #8]
 81048c0:	68fb      	ldr	r3, [r7, #12]
 81048c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 81048c4:	687b      	ldr	r3, [r7, #4]
 81048c6:	2200      	movs	r2, #0
 81048c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 81048ca:	68fb      	ldr	r3, [r7, #12]
 81048cc:	681b      	ldr	r3, [r3, #0]
 81048ce:	1e5a      	subs	r2, r3, #1
 81048d0:	68fb      	ldr	r3, [r7, #12]
 81048d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 81048d4:	68fb      	ldr	r3, [r7, #12]
 81048d6:	681b      	ldr	r3, [r3, #0]
}
 81048d8:	4618      	mov	r0, r3
 81048da:	3714      	adds	r7, #20
 81048dc:	46bd      	mov	sp, r7
 81048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81048e2:	4770      	bx	lr

081048e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 81048e4:	b480      	push	{r7}
 81048e6:	b085      	sub	sp, #20
 81048e8:	af00      	add	r7, sp, #0
 81048ea:	60f8      	str	r0, [r7, #12]
 81048ec:	60b9      	str	r1, [r7, #8]
 81048ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 81048f0:	68fb      	ldr	r3, [r7, #12]
 81048f2:	3b04      	subs	r3, #4
 81048f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 81048f6:	68fb      	ldr	r3, [r7, #12]
 81048f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 81048fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 81048fe:	68fb      	ldr	r3, [r7, #12]
 8104900:	3b04      	subs	r3, #4
 8104902:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8104904:	68bb      	ldr	r3, [r7, #8]
 8104906:	f023 0201 	bic.w	r2, r3, #1
 810490a:	68fb      	ldr	r3, [r7, #12]
 810490c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810490e:	68fb      	ldr	r3, [r7, #12]
 8104910:	3b04      	subs	r3, #4
 8104912:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8104914:	4a0c      	ldr	r2, [pc, #48]	@ (8104948 <pxPortInitialiseStack+0x64>)
 8104916:	68fb      	ldr	r3, [r7, #12]
 8104918:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 810491a:	68fb      	ldr	r3, [r7, #12]
 810491c:	3b14      	subs	r3, #20
 810491e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8104920:	687a      	ldr	r2, [r7, #4]
 8104922:	68fb      	ldr	r3, [r7, #12]
 8104924:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8104926:	68fb      	ldr	r3, [r7, #12]
 8104928:	3b04      	subs	r3, #4
 810492a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 810492c:	68fb      	ldr	r3, [r7, #12]
 810492e:	f06f 0202 	mvn.w	r2, #2
 8104932:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8104934:	68fb      	ldr	r3, [r7, #12]
 8104936:	3b20      	subs	r3, #32
 8104938:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 810493a:	68fb      	ldr	r3, [r7, #12]
}
 810493c:	4618      	mov	r0, r3
 810493e:	3714      	adds	r7, #20
 8104940:	46bd      	mov	sp, r7
 8104942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104946:	4770      	bx	lr
 8104948:	0810494d 	.word	0x0810494d

0810494c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 810494c:	b480      	push	{r7}
 810494e:	b085      	sub	sp, #20
 8104950:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8104952:	2300      	movs	r3, #0
 8104954:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8104956:	4b13      	ldr	r3, [pc, #76]	@ (81049a4 <prvTaskExitError+0x58>)
 8104958:	681b      	ldr	r3, [r3, #0]
 810495a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810495e:	d00b      	beq.n	8104978 <prvTaskExitError+0x2c>
	__asm volatile
 8104960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104964:	f383 8811 	msr	BASEPRI, r3
 8104968:	f3bf 8f6f 	isb	sy
 810496c:	f3bf 8f4f 	dsb	sy
 8104970:	60fb      	str	r3, [r7, #12]
}
 8104972:	bf00      	nop
 8104974:	bf00      	nop
 8104976:	e7fd      	b.n	8104974 <prvTaskExitError+0x28>
	__asm volatile
 8104978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810497c:	f383 8811 	msr	BASEPRI, r3
 8104980:	f3bf 8f6f 	isb	sy
 8104984:	f3bf 8f4f 	dsb	sy
 8104988:	60bb      	str	r3, [r7, #8]
}
 810498a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 810498c:	bf00      	nop
 810498e:	687b      	ldr	r3, [r7, #4]
 8104990:	2b00      	cmp	r3, #0
 8104992:	d0fc      	beq.n	810498e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8104994:	bf00      	nop
 8104996:	bf00      	nop
 8104998:	3714      	adds	r7, #20
 810499a:	46bd      	mov	sp, r7
 810499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81049a0:	4770      	bx	lr
 81049a2:	bf00      	nop
 81049a4:	10000010 	.word	0x10000010
	...

081049b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 81049b0:	4b07      	ldr	r3, [pc, #28]	@ (81049d0 <pxCurrentTCBConst2>)
 81049b2:	6819      	ldr	r1, [r3, #0]
 81049b4:	6808      	ldr	r0, [r1, #0]
 81049b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81049ba:	f380 8809 	msr	PSP, r0
 81049be:	f3bf 8f6f 	isb	sy
 81049c2:	f04f 0000 	mov.w	r0, #0
 81049c6:	f380 8811 	msr	BASEPRI, r0
 81049ca:	4770      	bx	lr
 81049cc:	f3af 8000 	nop.w

081049d0 <pxCurrentTCBConst2>:
 81049d0:	100044a0 	.word	0x100044a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 81049d4:	bf00      	nop
 81049d6:	bf00      	nop

081049d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 81049d8:	4808      	ldr	r0, [pc, #32]	@ (81049fc <prvPortStartFirstTask+0x24>)
 81049da:	6800      	ldr	r0, [r0, #0]
 81049dc:	6800      	ldr	r0, [r0, #0]
 81049de:	f380 8808 	msr	MSP, r0
 81049e2:	f04f 0000 	mov.w	r0, #0
 81049e6:	f380 8814 	msr	CONTROL, r0
 81049ea:	b662      	cpsie	i
 81049ec:	b661      	cpsie	f
 81049ee:	f3bf 8f4f 	dsb	sy
 81049f2:	f3bf 8f6f 	isb	sy
 81049f6:	df00      	svc	0
 81049f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 81049fa:	bf00      	nop
 81049fc:	e000ed08 	.word	0xe000ed08

08104a00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8104a00:	b580      	push	{r7, lr}
 8104a02:	b086      	sub	sp, #24
 8104a04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8104a06:	4b47      	ldr	r3, [pc, #284]	@ (8104b24 <xPortStartScheduler+0x124>)
 8104a08:	681b      	ldr	r3, [r3, #0]
 8104a0a:	4a47      	ldr	r2, [pc, #284]	@ (8104b28 <xPortStartScheduler+0x128>)
 8104a0c:	4293      	cmp	r3, r2
 8104a0e:	d10b      	bne.n	8104a28 <xPortStartScheduler+0x28>
	__asm volatile
 8104a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104a14:	f383 8811 	msr	BASEPRI, r3
 8104a18:	f3bf 8f6f 	isb	sy
 8104a1c:	f3bf 8f4f 	dsb	sy
 8104a20:	613b      	str	r3, [r7, #16]
}
 8104a22:	bf00      	nop
 8104a24:	bf00      	nop
 8104a26:	e7fd      	b.n	8104a24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8104a28:	4b3e      	ldr	r3, [pc, #248]	@ (8104b24 <xPortStartScheduler+0x124>)
 8104a2a:	681b      	ldr	r3, [r3, #0]
 8104a2c:	4a3f      	ldr	r2, [pc, #252]	@ (8104b2c <xPortStartScheduler+0x12c>)
 8104a2e:	4293      	cmp	r3, r2
 8104a30:	d10b      	bne.n	8104a4a <xPortStartScheduler+0x4a>
	__asm volatile
 8104a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104a36:	f383 8811 	msr	BASEPRI, r3
 8104a3a:	f3bf 8f6f 	isb	sy
 8104a3e:	f3bf 8f4f 	dsb	sy
 8104a42:	60fb      	str	r3, [r7, #12]
}
 8104a44:	bf00      	nop
 8104a46:	bf00      	nop
 8104a48:	e7fd      	b.n	8104a46 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8104a4a:	4b39      	ldr	r3, [pc, #228]	@ (8104b30 <xPortStartScheduler+0x130>)
 8104a4c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8104a4e:	697b      	ldr	r3, [r7, #20]
 8104a50:	781b      	ldrb	r3, [r3, #0]
 8104a52:	b2db      	uxtb	r3, r3
 8104a54:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8104a56:	697b      	ldr	r3, [r7, #20]
 8104a58:	22ff      	movs	r2, #255	@ 0xff
 8104a5a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8104a5c:	697b      	ldr	r3, [r7, #20]
 8104a5e:	781b      	ldrb	r3, [r3, #0]
 8104a60:	b2db      	uxtb	r3, r3
 8104a62:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8104a64:	78fb      	ldrb	r3, [r7, #3]
 8104a66:	b2db      	uxtb	r3, r3
 8104a68:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8104a6c:	b2da      	uxtb	r2, r3
 8104a6e:	4b31      	ldr	r3, [pc, #196]	@ (8104b34 <xPortStartScheduler+0x134>)
 8104a70:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8104a72:	4b31      	ldr	r3, [pc, #196]	@ (8104b38 <xPortStartScheduler+0x138>)
 8104a74:	2207      	movs	r2, #7
 8104a76:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8104a78:	e009      	b.n	8104a8e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8104a7a:	4b2f      	ldr	r3, [pc, #188]	@ (8104b38 <xPortStartScheduler+0x138>)
 8104a7c:	681b      	ldr	r3, [r3, #0]
 8104a7e:	3b01      	subs	r3, #1
 8104a80:	4a2d      	ldr	r2, [pc, #180]	@ (8104b38 <xPortStartScheduler+0x138>)
 8104a82:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8104a84:	78fb      	ldrb	r3, [r7, #3]
 8104a86:	b2db      	uxtb	r3, r3
 8104a88:	005b      	lsls	r3, r3, #1
 8104a8a:	b2db      	uxtb	r3, r3
 8104a8c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8104a8e:	78fb      	ldrb	r3, [r7, #3]
 8104a90:	b2db      	uxtb	r3, r3
 8104a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8104a96:	2b80      	cmp	r3, #128	@ 0x80
 8104a98:	d0ef      	beq.n	8104a7a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8104a9a:	4b27      	ldr	r3, [pc, #156]	@ (8104b38 <xPortStartScheduler+0x138>)
 8104a9c:	681b      	ldr	r3, [r3, #0]
 8104a9e:	f1c3 0307 	rsb	r3, r3, #7
 8104aa2:	2b04      	cmp	r3, #4
 8104aa4:	d00b      	beq.n	8104abe <xPortStartScheduler+0xbe>
	__asm volatile
 8104aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104aaa:	f383 8811 	msr	BASEPRI, r3
 8104aae:	f3bf 8f6f 	isb	sy
 8104ab2:	f3bf 8f4f 	dsb	sy
 8104ab6:	60bb      	str	r3, [r7, #8]
}
 8104ab8:	bf00      	nop
 8104aba:	bf00      	nop
 8104abc:	e7fd      	b.n	8104aba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8104abe:	4b1e      	ldr	r3, [pc, #120]	@ (8104b38 <xPortStartScheduler+0x138>)
 8104ac0:	681b      	ldr	r3, [r3, #0]
 8104ac2:	021b      	lsls	r3, r3, #8
 8104ac4:	4a1c      	ldr	r2, [pc, #112]	@ (8104b38 <xPortStartScheduler+0x138>)
 8104ac6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8104ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8104b38 <xPortStartScheduler+0x138>)
 8104aca:	681b      	ldr	r3, [r3, #0]
 8104acc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8104ad0:	4a19      	ldr	r2, [pc, #100]	@ (8104b38 <xPortStartScheduler+0x138>)
 8104ad2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8104ad4:	687b      	ldr	r3, [r7, #4]
 8104ad6:	b2da      	uxtb	r2, r3
 8104ad8:	697b      	ldr	r3, [r7, #20]
 8104ada:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8104adc:	4b17      	ldr	r3, [pc, #92]	@ (8104b3c <xPortStartScheduler+0x13c>)
 8104ade:	681b      	ldr	r3, [r3, #0]
 8104ae0:	4a16      	ldr	r2, [pc, #88]	@ (8104b3c <xPortStartScheduler+0x13c>)
 8104ae2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8104ae6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8104ae8:	4b14      	ldr	r3, [pc, #80]	@ (8104b3c <xPortStartScheduler+0x13c>)
 8104aea:	681b      	ldr	r3, [r3, #0]
 8104aec:	4a13      	ldr	r2, [pc, #76]	@ (8104b3c <xPortStartScheduler+0x13c>)
 8104aee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8104af2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8104af4:	f000 f8da 	bl	8104cac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8104af8:	4b11      	ldr	r3, [pc, #68]	@ (8104b40 <xPortStartScheduler+0x140>)
 8104afa:	2200      	movs	r2, #0
 8104afc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8104afe:	f000 f8f9 	bl	8104cf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8104b02:	4b10      	ldr	r3, [pc, #64]	@ (8104b44 <xPortStartScheduler+0x144>)
 8104b04:	681b      	ldr	r3, [r3, #0]
 8104b06:	4a0f      	ldr	r2, [pc, #60]	@ (8104b44 <xPortStartScheduler+0x144>)
 8104b08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8104b0c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8104b0e:	f7ff ff63 	bl	81049d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8104b12:	f001 fe0d 	bl	8106730 <vTaskSwitchContext>
	prvTaskExitError();
 8104b16:	f7ff ff19 	bl	810494c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8104b1a:	2300      	movs	r3, #0
}
 8104b1c:	4618      	mov	r0, r3
 8104b1e:	3718      	adds	r7, #24
 8104b20:	46bd      	mov	sp, r7
 8104b22:	bd80      	pop	{r7, pc}
 8104b24:	e000ed00 	.word	0xe000ed00
 8104b28:	410fc271 	.word	0x410fc271
 8104b2c:	410fc270 	.word	0x410fc270
 8104b30:	e000e400 	.word	0xe000e400
 8104b34:	10004458 	.word	0x10004458
 8104b38:	1000445c 	.word	0x1000445c
 8104b3c:	e000ed20 	.word	0xe000ed20
 8104b40:	10000010 	.word	0x10000010
 8104b44:	e000ef34 	.word	0xe000ef34

08104b48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8104b48:	b480      	push	{r7}
 8104b4a:	b083      	sub	sp, #12
 8104b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8104b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104b52:	f383 8811 	msr	BASEPRI, r3
 8104b56:	f3bf 8f6f 	isb	sy
 8104b5a:	f3bf 8f4f 	dsb	sy
 8104b5e:	607b      	str	r3, [r7, #4]
}
 8104b60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8104b62:	4b10      	ldr	r3, [pc, #64]	@ (8104ba4 <vPortEnterCritical+0x5c>)
 8104b64:	681b      	ldr	r3, [r3, #0]
 8104b66:	3301      	adds	r3, #1
 8104b68:	4a0e      	ldr	r2, [pc, #56]	@ (8104ba4 <vPortEnterCritical+0x5c>)
 8104b6a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8104b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8104ba4 <vPortEnterCritical+0x5c>)
 8104b6e:	681b      	ldr	r3, [r3, #0]
 8104b70:	2b01      	cmp	r3, #1
 8104b72:	d110      	bne.n	8104b96 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8104b74:	4b0c      	ldr	r3, [pc, #48]	@ (8104ba8 <vPortEnterCritical+0x60>)
 8104b76:	681b      	ldr	r3, [r3, #0]
 8104b78:	b2db      	uxtb	r3, r3
 8104b7a:	2b00      	cmp	r3, #0
 8104b7c:	d00b      	beq.n	8104b96 <vPortEnterCritical+0x4e>
	__asm volatile
 8104b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104b82:	f383 8811 	msr	BASEPRI, r3
 8104b86:	f3bf 8f6f 	isb	sy
 8104b8a:	f3bf 8f4f 	dsb	sy
 8104b8e:	603b      	str	r3, [r7, #0]
}
 8104b90:	bf00      	nop
 8104b92:	bf00      	nop
 8104b94:	e7fd      	b.n	8104b92 <vPortEnterCritical+0x4a>
	}
}
 8104b96:	bf00      	nop
 8104b98:	370c      	adds	r7, #12
 8104b9a:	46bd      	mov	sp, r7
 8104b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ba0:	4770      	bx	lr
 8104ba2:	bf00      	nop
 8104ba4:	10000010 	.word	0x10000010
 8104ba8:	e000ed04 	.word	0xe000ed04

08104bac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8104bac:	b480      	push	{r7}
 8104bae:	b083      	sub	sp, #12
 8104bb0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8104bb2:	4b12      	ldr	r3, [pc, #72]	@ (8104bfc <vPortExitCritical+0x50>)
 8104bb4:	681b      	ldr	r3, [r3, #0]
 8104bb6:	2b00      	cmp	r3, #0
 8104bb8:	d10b      	bne.n	8104bd2 <vPortExitCritical+0x26>
	__asm volatile
 8104bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104bbe:	f383 8811 	msr	BASEPRI, r3
 8104bc2:	f3bf 8f6f 	isb	sy
 8104bc6:	f3bf 8f4f 	dsb	sy
 8104bca:	607b      	str	r3, [r7, #4]
}
 8104bcc:	bf00      	nop
 8104bce:	bf00      	nop
 8104bd0:	e7fd      	b.n	8104bce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8104bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8104bfc <vPortExitCritical+0x50>)
 8104bd4:	681b      	ldr	r3, [r3, #0]
 8104bd6:	3b01      	subs	r3, #1
 8104bd8:	4a08      	ldr	r2, [pc, #32]	@ (8104bfc <vPortExitCritical+0x50>)
 8104bda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8104bdc:	4b07      	ldr	r3, [pc, #28]	@ (8104bfc <vPortExitCritical+0x50>)
 8104bde:	681b      	ldr	r3, [r3, #0]
 8104be0:	2b00      	cmp	r3, #0
 8104be2:	d105      	bne.n	8104bf0 <vPortExitCritical+0x44>
 8104be4:	2300      	movs	r3, #0
 8104be6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8104be8:	683b      	ldr	r3, [r7, #0]
 8104bea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8104bee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8104bf0:	bf00      	nop
 8104bf2:	370c      	adds	r7, #12
 8104bf4:	46bd      	mov	sp, r7
 8104bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104bfa:	4770      	bx	lr
 8104bfc:	10000010 	.word	0x10000010

08104c00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8104c00:	f3ef 8009 	mrs	r0, PSP
 8104c04:	f3bf 8f6f 	isb	sy
 8104c08:	4b15      	ldr	r3, [pc, #84]	@ (8104c60 <pxCurrentTCBConst>)
 8104c0a:	681a      	ldr	r2, [r3, #0]
 8104c0c:	f01e 0f10 	tst.w	lr, #16
 8104c10:	bf08      	it	eq
 8104c12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8104c16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8104c1a:	6010      	str	r0, [r2, #0]
 8104c1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8104c20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8104c24:	f380 8811 	msr	BASEPRI, r0
 8104c28:	f3bf 8f4f 	dsb	sy
 8104c2c:	f3bf 8f6f 	isb	sy
 8104c30:	f001 fd7e 	bl	8106730 <vTaskSwitchContext>
 8104c34:	f04f 0000 	mov.w	r0, #0
 8104c38:	f380 8811 	msr	BASEPRI, r0
 8104c3c:	bc09      	pop	{r0, r3}
 8104c3e:	6819      	ldr	r1, [r3, #0]
 8104c40:	6808      	ldr	r0, [r1, #0]
 8104c42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8104c46:	f01e 0f10 	tst.w	lr, #16
 8104c4a:	bf08      	it	eq
 8104c4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8104c50:	f380 8809 	msr	PSP, r0
 8104c54:	f3bf 8f6f 	isb	sy
 8104c58:	4770      	bx	lr
 8104c5a:	bf00      	nop
 8104c5c:	f3af 8000 	nop.w

08104c60 <pxCurrentTCBConst>:
 8104c60:	100044a0 	.word	0x100044a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8104c64:	bf00      	nop
 8104c66:	bf00      	nop

08104c68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8104c68:	b580      	push	{r7, lr}
 8104c6a:	b082      	sub	sp, #8
 8104c6c:	af00      	add	r7, sp, #0
	__asm volatile
 8104c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104c72:	f383 8811 	msr	BASEPRI, r3
 8104c76:	f3bf 8f6f 	isb	sy
 8104c7a:	f3bf 8f4f 	dsb	sy
 8104c7e:	607b      	str	r3, [r7, #4]
}
 8104c80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8104c82:	f001 fc9b 	bl	81065bc <xTaskIncrementTick>
 8104c86:	4603      	mov	r3, r0
 8104c88:	2b00      	cmp	r3, #0
 8104c8a:	d003      	beq.n	8104c94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8104c8c:	4b06      	ldr	r3, [pc, #24]	@ (8104ca8 <xPortSysTickHandler+0x40>)
 8104c8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8104c92:	601a      	str	r2, [r3, #0]
 8104c94:	2300      	movs	r3, #0
 8104c96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8104c98:	683b      	ldr	r3, [r7, #0]
 8104c9a:	f383 8811 	msr	BASEPRI, r3
}
 8104c9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8104ca0:	bf00      	nop
 8104ca2:	3708      	adds	r7, #8
 8104ca4:	46bd      	mov	sp, r7
 8104ca6:	bd80      	pop	{r7, pc}
 8104ca8:	e000ed04 	.word	0xe000ed04

08104cac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8104cac:	b480      	push	{r7}
 8104cae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8104cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8104ce0 <vPortSetupTimerInterrupt+0x34>)
 8104cb2:	2200      	movs	r2, #0
 8104cb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8104cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8104ce4 <vPortSetupTimerInterrupt+0x38>)
 8104cb8:	2200      	movs	r2, #0
 8104cba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8104cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8104ce8 <vPortSetupTimerInterrupt+0x3c>)
 8104cbe:	681b      	ldr	r3, [r3, #0]
 8104cc0:	4a0a      	ldr	r2, [pc, #40]	@ (8104cec <vPortSetupTimerInterrupt+0x40>)
 8104cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8104cc6:	099b      	lsrs	r3, r3, #6
 8104cc8:	4a09      	ldr	r2, [pc, #36]	@ (8104cf0 <vPortSetupTimerInterrupt+0x44>)
 8104cca:	3b01      	subs	r3, #1
 8104ccc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8104cce:	4b04      	ldr	r3, [pc, #16]	@ (8104ce0 <vPortSetupTimerInterrupt+0x34>)
 8104cd0:	2207      	movs	r2, #7
 8104cd2:	601a      	str	r2, [r3, #0]
}
 8104cd4:	bf00      	nop
 8104cd6:	46bd      	mov	sp, r7
 8104cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104cdc:	4770      	bx	lr
 8104cde:	bf00      	nop
 8104ce0:	e000e010 	.word	0xe000e010
 8104ce4:	e000e018 	.word	0xe000e018
 8104ce8:	10000004 	.word	0x10000004
 8104cec:	10624dd3 	.word	0x10624dd3
 8104cf0:	e000e014 	.word	0xe000e014

08104cf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8104cf4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8104d04 <vPortEnableVFP+0x10>
 8104cf8:	6801      	ldr	r1, [r0, #0]
 8104cfa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8104cfe:	6001      	str	r1, [r0, #0]
 8104d00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8104d02:	bf00      	nop
 8104d04:	e000ed88 	.word	0xe000ed88

08104d08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8104d08:	b480      	push	{r7}
 8104d0a:	b085      	sub	sp, #20
 8104d0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8104d0e:	f3ef 8305 	mrs	r3, IPSR
 8104d12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8104d14:	68fb      	ldr	r3, [r7, #12]
 8104d16:	2b0f      	cmp	r3, #15
 8104d18:	d915      	bls.n	8104d46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8104d1a:	4a18      	ldr	r2, [pc, #96]	@ (8104d7c <vPortValidateInterruptPriority+0x74>)
 8104d1c:	68fb      	ldr	r3, [r7, #12]
 8104d1e:	4413      	add	r3, r2
 8104d20:	781b      	ldrb	r3, [r3, #0]
 8104d22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8104d24:	4b16      	ldr	r3, [pc, #88]	@ (8104d80 <vPortValidateInterruptPriority+0x78>)
 8104d26:	781b      	ldrb	r3, [r3, #0]
 8104d28:	7afa      	ldrb	r2, [r7, #11]
 8104d2a:	429a      	cmp	r2, r3
 8104d2c:	d20b      	bcs.n	8104d46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8104d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104d32:	f383 8811 	msr	BASEPRI, r3
 8104d36:	f3bf 8f6f 	isb	sy
 8104d3a:	f3bf 8f4f 	dsb	sy
 8104d3e:	607b      	str	r3, [r7, #4]
}
 8104d40:	bf00      	nop
 8104d42:	bf00      	nop
 8104d44:	e7fd      	b.n	8104d42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8104d46:	4b0f      	ldr	r3, [pc, #60]	@ (8104d84 <vPortValidateInterruptPriority+0x7c>)
 8104d48:	681b      	ldr	r3, [r3, #0]
 8104d4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8104d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8104d88 <vPortValidateInterruptPriority+0x80>)
 8104d50:	681b      	ldr	r3, [r3, #0]
 8104d52:	429a      	cmp	r2, r3
 8104d54:	d90b      	bls.n	8104d6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8104d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104d5a:	f383 8811 	msr	BASEPRI, r3
 8104d5e:	f3bf 8f6f 	isb	sy
 8104d62:	f3bf 8f4f 	dsb	sy
 8104d66:	603b      	str	r3, [r7, #0]
}
 8104d68:	bf00      	nop
 8104d6a:	bf00      	nop
 8104d6c:	e7fd      	b.n	8104d6a <vPortValidateInterruptPriority+0x62>
	}
 8104d6e:	bf00      	nop
 8104d70:	3714      	adds	r7, #20
 8104d72:	46bd      	mov	sp, r7
 8104d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d78:	4770      	bx	lr
 8104d7a:	bf00      	nop
 8104d7c:	e000e3f0 	.word	0xe000e3f0
 8104d80:	10004458 	.word	0x10004458
 8104d84:	e000ed0c 	.word	0xe000ed0c
 8104d88:	1000445c 	.word	0x1000445c

08104d8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8104d8c:	b580      	push	{r7, lr}
 8104d8e:	b084      	sub	sp, #16
 8104d90:	af00      	add	r7, sp, #0
 8104d92:	6078      	str	r0, [r7, #4]
 8104d94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8104d96:	687b      	ldr	r3, [r7, #4]
 8104d98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8104d9a:	68fb      	ldr	r3, [r7, #12]
 8104d9c:	2b00      	cmp	r3, #0
 8104d9e:	d10b      	bne.n	8104db8 <xQueueGenericReset+0x2c>
	__asm volatile
 8104da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104da4:	f383 8811 	msr	BASEPRI, r3
 8104da8:	f3bf 8f6f 	isb	sy
 8104dac:	f3bf 8f4f 	dsb	sy
 8104db0:	60bb      	str	r3, [r7, #8]
}
 8104db2:	bf00      	nop
 8104db4:	bf00      	nop
 8104db6:	e7fd      	b.n	8104db4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8104db8:	f7ff fec6 	bl	8104b48 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8104dbc:	68fb      	ldr	r3, [r7, #12]
 8104dbe:	681a      	ldr	r2, [r3, #0]
 8104dc0:	68fb      	ldr	r3, [r7, #12]
 8104dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8104dc4:	68f9      	ldr	r1, [r7, #12]
 8104dc6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8104dc8:	fb01 f303 	mul.w	r3, r1, r3
 8104dcc:	441a      	add	r2, r3
 8104dce:	68fb      	ldr	r3, [r7, #12]
 8104dd0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8104dd2:	68fb      	ldr	r3, [r7, #12]
 8104dd4:	2200      	movs	r2, #0
 8104dd6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8104dd8:	68fb      	ldr	r3, [r7, #12]
 8104dda:	681a      	ldr	r2, [r3, #0]
 8104ddc:	68fb      	ldr	r3, [r7, #12]
 8104dde:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8104de0:	68fb      	ldr	r3, [r7, #12]
 8104de2:	681a      	ldr	r2, [r3, #0]
 8104de4:	68fb      	ldr	r3, [r7, #12]
 8104de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8104de8:	3b01      	subs	r3, #1
 8104dea:	68f9      	ldr	r1, [r7, #12]
 8104dec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8104dee:	fb01 f303 	mul.w	r3, r1, r3
 8104df2:	441a      	add	r2, r3
 8104df4:	68fb      	ldr	r3, [r7, #12]
 8104df6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8104df8:	68fb      	ldr	r3, [r7, #12]
 8104dfa:	22ff      	movs	r2, #255	@ 0xff
 8104dfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8104e00:	68fb      	ldr	r3, [r7, #12]
 8104e02:	22ff      	movs	r2, #255	@ 0xff
 8104e04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8104e08:	683b      	ldr	r3, [r7, #0]
 8104e0a:	2b00      	cmp	r3, #0
 8104e0c:	d114      	bne.n	8104e38 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8104e0e:	68fb      	ldr	r3, [r7, #12]
 8104e10:	691b      	ldr	r3, [r3, #16]
 8104e12:	2b00      	cmp	r3, #0
 8104e14:	d01a      	beq.n	8104e4c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8104e16:	68fb      	ldr	r3, [r7, #12]
 8104e18:	3310      	adds	r3, #16
 8104e1a:	4618      	mov	r0, r3
 8104e1c:	f001 fd40 	bl	81068a0 <xTaskRemoveFromEventList>
 8104e20:	4603      	mov	r3, r0
 8104e22:	2b00      	cmp	r3, #0
 8104e24:	d012      	beq.n	8104e4c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8104e26:	4b0d      	ldr	r3, [pc, #52]	@ (8104e5c <xQueueGenericReset+0xd0>)
 8104e28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8104e2c:	601a      	str	r2, [r3, #0]
 8104e2e:	f3bf 8f4f 	dsb	sy
 8104e32:	f3bf 8f6f 	isb	sy
 8104e36:	e009      	b.n	8104e4c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8104e38:	68fb      	ldr	r3, [r7, #12]
 8104e3a:	3310      	adds	r3, #16
 8104e3c:	4618      	mov	r0, r3
 8104e3e:	f7ff fc9d 	bl	810477c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8104e42:	68fb      	ldr	r3, [r7, #12]
 8104e44:	3324      	adds	r3, #36	@ 0x24
 8104e46:	4618      	mov	r0, r3
 8104e48:	f7ff fc98 	bl	810477c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8104e4c:	f7ff feae 	bl	8104bac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8104e50:	2301      	movs	r3, #1
}
 8104e52:	4618      	mov	r0, r3
 8104e54:	3710      	adds	r7, #16
 8104e56:	46bd      	mov	sp, r7
 8104e58:	bd80      	pop	{r7, pc}
 8104e5a:	bf00      	nop
 8104e5c:	e000ed04 	.word	0xe000ed04

08104e60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8104e60:	b580      	push	{r7, lr}
 8104e62:	b08e      	sub	sp, #56	@ 0x38
 8104e64:	af02      	add	r7, sp, #8
 8104e66:	60f8      	str	r0, [r7, #12]
 8104e68:	60b9      	str	r1, [r7, #8]
 8104e6a:	607a      	str	r2, [r7, #4]
 8104e6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8104e6e:	68fb      	ldr	r3, [r7, #12]
 8104e70:	2b00      	cmp	r3, #0
 8104e72:	d10b      	bne.n	8104e8c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8104e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104e78:	f383 8811 	msr	BASEPRI, r3
 8104e7c:	f3bf 8f6f 	isb	sy
 8104e80:	f3bf 8f4f 	dsb	sy
 8104e84:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8104e86:	bf00      	nop
 8104e88:	bf00      	nop
 8104e8a:	e7fd      	b.n	8104e88 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8104e8c:	683b      	ldr	r3, [r7, #0]
 8104e8e:	2b00      	cmp	r3, #0
 8104e90:	d10b      	bne.n	8104eaa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8104e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104e96:	f383 8811 	msr	BASEPRI, r3
 8104e9a:	f3bf 8f6f 	isb	sy
 8104e9e:	f3bf 8f4f 	dsb	sy
 8104ea2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8104ea4:	bf00      	nop
 8104ea6:	bf00      	nop
 8104ea8:	e7fd      	b.n	8104ea6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8104eaa:	687b      	ldr	r3, [r7, #4]
 8104eac:	2b00      	cmp	r3, #0
 8104eae:	d002      	beq.n	8104eb6 <xQueueGenericCreateStatic+0x56>
 8104eb0:	68bb      	ldr	r3, [r7, #8]
 8104eb2:	2b00      	cmp	r3, #0
 8104eb4:	d001      	beq.n	8104eba <xQueueGenericCreateStatic+0x5a>
 8104eb6:	2301      	movs	r3, #1
 8104eb8:	e000      	b.n	8104ebc <xQueueGenericCreateStatic+0x5c>
 8104eba:	2300      	movs	r3, #0
 8104ebc:	2b00      	cmp	r3, #0
 8104ebe:	d10b      	bne.n	8104ed8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8104ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104ec4:	f383 8811 	msr	BASEPRI, r3
 8104ec8:	f3bf 8f6f 	isb	sy
 8104ecc:	f3bf 8f4f 	dsb	sy
 8104ed0:	623b      	str	r3, [r7, #32]
}
 8104ed2:	bf00      	nop
 8104ed4:	bf00      	nop
 8104ed6:	e7fd      	b.n	8104ed4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8104ed8:	687b      	ldr	r3, [r7, #4]
 8104eda:	2b00      	cmp	r3, #0
 8104edc:	d102      	bne.n	8104ee4 <xQueueGenericCreateStatic+0x84>
 8104ede:	68bb      	ldr	r3, [r7, #8]
 8104ee0:	2b00      	cmp	r3, #0
 8104ee2:	d101      	bne.n	8104ee8 <xQueueGenericCreateStatic+0x88>
 8104ee4:	2301      	movs	r3, #1
 8104ee6:	e000      	b.n	8104eea <xQueueGenericCreateStatic+0x8a>
 8104ee8:	2300      	movs	r3, #0
 8104eea:	2b00      	cmp	r3, #0
 8104eec:	d10b      	bne.n	8104f06 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8104eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104ef2:	f383 8811 	msr	BASEPRI, r3
 8104ef6:	f3bf 8f6f 	isb	sy
 8104efa:	f3bf 8f4f 	dsb	sy
 8104efe:	61fb      	str	r3, [r7, #28]
}
 8104f00:	bf00      	nop
 8104f02:	bf00      	nop
 8104f04:	e7fd      	b.n	8104f02 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8104f06:	2350      	movs	r3, #80	@ 0x50
 8104f08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8104f0a:	697b      	ldr	r3, [r7, #20]
 8104f0c:	2b50      	cmp	r3, #80	@ 0x50
 8104f0e:	d00b      	beq.n	8104f28 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8104f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104f14:	f383 8811 	msr	BASEPRI, r3
 8104f18:	f3bf 8f6f 	isb	sy
 8104f1c:	f3bf 8f4f 	dsb	sy
 8104f20:	61bb      	str	r3, [r7, #24]
}
 8104f22:	bf00      	nop
 8104f24:	bf00      	nop
 8104f26:	e7fd      	b.n	8104f24 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8104f28:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8104f2a:	683b      	ldr	r3, [r7, #0]
 8104f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8104f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8104f30:	2b00      	cmp	r3, #0
 8104f32:	d00d      	beq.n	8104f50 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8104f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8104f36:	2201      	movs	r2, #1
 8104f38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8104f3c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8104f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8104f42:	9300      	str	r3, [sp, #0]
 8104f44:	4613      	mov	r3, r2
 8104f46:	687a      	ldr	r2, [r7, #4]
 8104f48:	68b9      	ldr	r1, [r7, #8]
 8104f4a:	68f8      	ldr	r0, [r7, #12]
 8104f4c:	f000 f840 	bl	8104fd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8104f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8104f52:	4618      	mov	r0, r3
 8104f54:	3730      	adds	r7, #48	@ 0x30
 8104f56:	46bd      	mov	sp, r7
 8104f58:	bd80      	pop	{r7, pc}

08104f5a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8104f5a:	b580      	push	{r7, lr}
 8104f5c:	b08a      	sub	sp, #40	@ 0x28
 8104f5e:	af02      	add	r7, sp, #8
 8104f60:	60f8      	str	r0, [r7, #12]
 8104f62:	60b9      	str	r1, [r7, #8]
 8104f64:	4613      	mov	r3, r2
 8104f66:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8104f68:	68fb      	ldr	r3, [r7, #12]
 8104f6a:	2b00      	cmp	r3, #0
 8104f6c:	d10b      	bne.n	8104f86 <xQueueGenericCreate+0x2c>
	__asm volatile
 8104f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104f72:	f383 8811 	msr	BASEPRI, r3
 8104f76:	f3bf 8f6f 	isb	sy
 8104f7a:	f3bf 8f4f 	dsb	sy
 8104f7e:	613b      	str	r3, [r7, #16]
}
 8104f80:	bf00      	nop
 8104f82:	bf00      	nop
 8104f84:	e7fd      	b.n	8104f82 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8104f86:	68fb      	ldr	r3, [r7, #12]
 8104f88:	68ba      	ldr	r2, [r7, #8]
 8104f8a:	fb02 f303 	mul.w	r3, r2, r3
 8104f8e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8104f90:	69fb      	ldr	r3, [r7, #28]
 8104f92:	3350      	adds	r3, #80	@ 0x50
 8104f94:	4618      	mov	r0, r3
 8104f96:	f7ff fa03 	bl	81043a0 <pvPortMalloc>
 8104f9a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8104f9c:	69bb      	ldr	r3, [r7, #24]
 8104f9e:	2b00      	cmp	r3, #0
 8104fa0:	d011      	beq.n	8104fc6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8104fa2:	69bb      	ldr	r3, [r7, #24]
 8104fa4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8104fa6:	697b      	ldr	r3, [r7, #20]
 8104fa8:	3350      	adds	r3, #80	@ 0x50
 8104faa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8104fac:	69bb      	ldr	r3, [r7, #24]
 8104fae:	2200      	movs	r2, #0
 8104fb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8104fb4:	79fa      	ldrb	r2, [r7, #7]
 8104fb6:	69bb      	ldr	r3, [r7, #24]
 8104fb8:	9300      	str	r3, [sp, #0]
 8104fba:	4613      	mov	r3, r2
 8104fbc:	697a      	ldr	r2, [r7, #20]
 8104fbe:	68b9      	ldr	r1, [r7, #8]
 8104fc0:	68f8      	ldr	r0, [r7, #12]
 8104fc2:	f000 f805 	bl	8104fd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8104fc6:	69bb      	ldr	r3, [r7, #24]
	}
 8104fc8:	4618      	mov	r0, r3
 8104fca:	3720      	adds	r7, #32
 8104fcc:	46bd      	mov	sp, r7
 8104fce:	bd80      	pop	{r7, pc}

08104fd0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8104fd0:	b580      	push	{r7, lr}
 8104fd2:	b084      	sub	sp, #16
 8104fd4:	af00      	add	r7, sp, #0
 8104fd6:	60f8      	str	r0, [r7, #12]
 8104fd8:	60b9      	str	r1, [r7, #8]
 8104fda:	607a      	str	r2, [r7, #4]
 8104fdc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8104fde:	68bb      	ldr	r3, [r7, #8]
 8104fe0:	2b00      	cmp	r3, #0
 8104fe2:	d103      	bne.n	8104fec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8104fe4:	69bb      	ldr	r3, [r7, #24]
 8104fe6:	69ba      	ldr	r2, [r7, #24]
 8104fe8:	601a      	str	r2, [r3, #0]
 8104fea:	e002      	b.n	8104ff2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8104fec:	69bb      	ldr	r3, [r7, #24]
 8104fee:	687a      	ldr	r2, [r7, #4]
 8104ff0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8104ff2:	69bb      	ldr	r3, [r7, #24]
 8104ff4:	68fa      	ldr	r2, [r7, #12]
 8104ff6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8104ff8:	69bb      	ldr	r3, [r7, #24]
 8104ffa:	68ba      	ldr	r2, [r7, #8]
 8104ffc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8104ffe:	2101      	movs	r1, #1
 8105000:	69b8      	ldr	r0, [r7, #24]
 8105002:	f7ff fec3 	bl	8104d8c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8105006:	69bb      	ldr	r3, [r7, #24]
 8105008:	78fa      	ldrb	r2, [r7, #3]
 810500a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 810500e:	bf00      	nop
 8105010:	3710      	adds	r7, #16
 8105012:	46bd      	mov	sp, r7
 8105014:	bd80      	pop	{r7, pc}
	...

08105018 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8105018:	b580      	push	{r7, lr}
 810501a:	b08e      	sub	sp, #56	@ 0x38
 810501c:	af00      	add	r7, sp, #0
 810501e:	60f8      	str	r0, [r7, #12]
 8105020:	60b9      	str	r1, [r7, #8]
 8105022:	607a      	str	r2, [r7, #4]
 8105024:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8105026:	2300      	movs	r3, #0
 8105028:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810502a:	68fb      	ldr	r3, [r7, #12]
 810502c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 810502e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105030:	2b00      	cmp	r3, #0
 8105032:	d10b      	bne.n	810504c <xQueueGenericSend+0x34>
	__asm volatile
 8105034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105038:	f383 8811 	msr	BASEPRI, r3
 810503c:	f3bf 8f6f 	isb	sy
 8105040:	f3bf 8f4f 	dsb	sy
 8105044:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8105046:	bf00      	nop
 8105048:	bf00      	nop
 810504a:	e7fd      	b.n	8105048 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810504c:	68bb      	ldr	r3, [r7, #8]
 810504e:	2b00      	cmp	r3, #0
 8105050:	d103      	bne.n	810505a <xQueueGenericSend+0x42>
 8105052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105056:	2b00      	cmp	r3, #0
 8105058:	d101      	bne.n	810505e <xQueueGenericSend+0x46>
 810505a:	2301      	movs	r3, #1
 810505c:	e000      	b.n	8105060 <xQueueGenericSend+0x48>
 810505e:	2300      	movs	r3, #0
 8105060:	2b00      	cmp	r3, #0
 8105062:	d10b      	bne.n	810507c <xQueueGenericSend+0x64>
	__asm volatile
 8105064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105068:	f383 8811 	msr	BASEPRI, r3
 810506c:	f3bf 8f6f 	isb	sy
 8105070:	f3bf 8f4f 	dsb	sy
 8105074:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8105076:	bf00      	nop
 8105078:	bf00      	nop
 810507a:	e7fd      	b.n	8105078 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810507c:	683b      	ldr	r3, [r7, #0]
 810507e:	2b02      	cmp	r3, #2
 8105080:	d103      	bne.n	810508a <xQueueGenericSend+0x72>
 8105082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105086:	2b01      	cmp	r3, #1
 8105088:	d101      	bne.n	810508e <xQueueGenericSend+0x76>
 810508a:	2301      	movs	r3, #1
 810508c:	e000      	b.n	8105090 <xQueueGenericSend+0x78>
 810508e:	2300      	movs	r3, #0
 8105090:	2b00      	cmp	r3, #0
 8105092:	d10b      	bne.n	81050ac <xQueueGenericSend+0x94>
	__asm volatile
 8105094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105098:	f383 8811 	msr	BASEPRI, r3
 810509c:	f3bf 8f6f 	isb	sy
 81050a0:	f3bf 8f4f 	dsb	sy
 81050a4:	623b      	str	r3, [r7, #32]
}
 81050a6:	bf00      	nop
 81050a8:	bf00      	nop
 81050aa:	e7fd      	b.n	81050a8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 81050ac:	f001 fdf6 	bl	8106c9c <xTaskGetSchedulerState>
 81050b0:	4603      	mov	r3, r0
 81050b2:	2b00      	cmp	r3, #0
 81050b4:	d102      	bne.n	81050bc <xQueueGenericSend+0xa4>
 81050b6:	687b      	ldr	r3, [r7, #4]
 81050b8:	2b00      	cmp	r3, #0
 81050ba:	d101      	bne.n	81050c0 <xQueueGenericSend+0xa8>
 81050bc:	2301      	movs	r3, #1
 81050be:	e000      	b.n	81050c2 <xQueueGenericSend+0xaa>
 81050c0:	2300      	movs	r3, #0
 81050c2:	2b00      	cmp	r3, #0
 81050c4:	d10b      	bne.n	81050de <xQueueGenericSend+0xc6>
	__asm volatile
 81050c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81050ca:	f383 8811 	msr	BASEPRI, r3
 81050ce:	f3bf 8f6f 	isb	sy
 81050d2:	f3bf 8f4f 	dsb	sy
 81050d6:	61fb      	str	r3, [r7, #28]
}
 81050d8:	bf00      	nop
 81050da:	bf00      	nop
 81050dc:	e7fd      	b.n	81050da <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 81050de:	f7ff fd33 	bl	8104b48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 81050e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81050e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 81050e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81050e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81050ea:	429a      	cmp	r2, r3
 81050ec:	d302      	bcc.n	81050f4 <xQueueGenericSend+0xdc>
 81050ee:	683b      	ldr	r3, [r7, #0]
 81050f0:	2b02      	cmp	r3, #2
 81050f2:	d129      	bne.n	8105148 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 81050f4:	683a      	ldr	r2, [r7, #0]
 81050f6:	68b9      	ldr	r1, [r7, #8]
 81050f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81050fa:	f000 fa0f 	bl	810551c <prvCopyDataToQueue>
 81050fe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8105100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105104:	2b00      	cmp	r3, #0
 8105106:	d010      	beq.n	810512a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8105108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810510a:	3324      	adds	r3, #36	@ 0x24
 810510c:	4618      	mov	r0, r3
 810510e:	f001 fbc7 	bl	81068a0 <xTaskRemoveFromEventList>
 8105112:	4603      	mov	r3, r0
 8105114:	2b00      	cmp	r3, #0
 8105116:	d013      	beq.n	8105140 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8105118:	4b3f      	ldr	r3, [pc, #252]	@ (8105218 <xQueueGenericSend+0x200>)
 810511a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810511e:	601a      	str	r2, [r3, #0]
 8105120:	f3bf 8f4f 	dsb	sy
 8105124:	f3bf 8f6f 	isb	sy
 8105128:	e00a      	b.n	8105140 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 810512a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810512c:	2b00      	cmp	r3, #0
 810512e:	d007      	beq.n	8105140 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8105130:	4b39      	ldr	r3, [pc, #228]	@ (8105218 <xQueueGenericSend+0x200>)
 8105132:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8105136:	601a      	str	r2, [r3, #0]
 8105138:	f3bf 8f4f 	dsb	sy
 810513c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8105140:	f7ff fd34 	bl	8104bac <vPortExitCritical>
				return pdPASS;
 8105144:	2301      	movs	r3, #1
 8105146:	e063      	b.n	8105210 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8105148:	687b      	ldr	r3, [r7, #4]
 810514a:	2b00      	cmp	r3, #0
 810514c:	d103      	bne.n	8105156 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810514e:	f7ff fd2d 	bl	8104bac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8105152:	2300      	movs	r3, #0
 8105154:	e05c      	b.n	8105210 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8105156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105158:	2b00      	cmp	r3, #0
 810515a:	d106      	bne.n	810516a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810515c:	f107 0314 	add.w	r3, r7, #20
 8105160:	4618      	mov	r0, r3
 8105162:	f001 fc29 	bl	81069b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8105166:	2301      	movs	r3, #1
 8105168:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810516a:	f7ff fd1f 	bl	8104bac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810516e:	f001 f969 	bl	8106444 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8105172:	f7ff fce9 	bl	8104b48 <vPortEnterCritical>
 8105176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105178:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810517c:	b25b      	sxtb	r3, r3
 810517e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105182:	d103      	bne.n	810518c <xQueueGenericSend+0x174>
 8105184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105186:	2200      	movs	r2, #0
 8105188:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810518c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810518e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8105192:	b25b      	sxtb	r3, r3
 8105194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105198:	d103      	bne.n	81051a2 <xQueueGenericSend+0x18a>
 810519a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810519c:	2200      	movs	r2, #0
 810519e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81051a2:	f7ff fd03 	bl	8104bac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 81051a6:	1d3a      	adds	r2, r7, #4
 81051a8:	f107 0314 	add.w	r3, r7, #20
 81051ac:	4611      	mov	r1, r2
 81051ae:	4618      	mov	r0, r3
 81051b0:	f001 fc18 	bl	81069e4 <xTaskCheckForTimeOut>
 81051b4:	4603      	mov	r3, r0
 81051b6:	2b00      	cmp	r3, #0
 81051b8:	d124      	bne.n	8105204 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 81051ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81051bc:	f000 faa6 	bl	810570c <prvIsQueueFull>
 81051c0:	4603      	mov	r3, r0
 81051c2:	2b00      	cmp	r3, #0
 81051c4:	d018      	beq.n	81051f8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 81051c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81051c8:	3310      	adds	r3, #16
 81051ca:	687a      	ldr	r2, [r7, #4]
 81051cc:	4611      	mov	r1, r2
 81051ce:	4618      	mov	r0, r3
 81051d0:	f001 fb14 	bl	81067fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 81051d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81051d6:	f000 fa31 	bl	810563c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 81051da:	f001 f941 	bl	8106460 <xTaskResumeAll>
 81051de:	4603      	mov	r3, r0
 81051e0:	2b00      	cmp	r3, #0
 81051e2:	f47f af7c 	bne.w	81050de <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 81051e6:	4b0c      	ldr	r3, [pc, #48]	@ (8105218 <xQueueGenericSend+0x200>)
 81051e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81051ec:	601a      	str	r2, [r3, #0]
 81051ee:	f3bf 8f4f 	dsb	sy
 81051f2:	f3bf 8f6f 	isb	sy
 81051f6:	e772      	b.n	81050de <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 81051f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81051fa:	f000 fa1f 	bl	810563c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 81051fe:	f001 f92f 	bl	8106460 <xTaskResumeAll>
 8105202:	e76c      	b.n	81050de <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8105204:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8105206:	f000 fa19 	bl	810563c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810520a:	f001 f929 	bl	8106460 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 810520e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8105210:	4618      	mov	r0, r3
 8105212:	3738      	adds	r7, #56	@ 0x38
 8105214:	46bd      	mov	sp, r7
 8105216:	bd80      	pop	{r7, pc}
 8105218:	e000ed04 	.word	0xe000ed04

0810521c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 810521c:	b580      	push	{r7, lr}
 810521e:	b090      	sub	sp, #64	@ 0x40
 8105220:	af00      	add	r7, sp, #0
 8105222:	60f8      	str	r0, [r7, #12]
 8105224:	60b9      	str	r1, [r7, #8]
 8105226:	607a      	str	r2, [r7, #4]
 8105228:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810522a:	68fb      	ldr	r3, [r7, #12]
 810522c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 810522e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105230:	2b00      	cmp	r3, #0
 8105232:	d10b      	bne.n	810524c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8105234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105238:	f383 8811 	msr	BASEPRI, r3
 810523c:	f3bf 8f6f 	isb	sy
 8105240:	f3bf 8f4f 	dsb	sy
 8105244:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8105246:	bf00      	nop
 8105248:	bf00      	nop
 810524a:	e7fd      	b.n	8105248 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810524c:	68bb      	ldr	r3, [r7, #8]
 810524e:	2b00      	cmp	r3, #0
 8105250:	d103      	bne.n	810525a <xQueueGenericSendFromISR+0x3e>
 8105252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105256:	2b00      	cmp	r3, #0
 8105258:	d101      	bne.n	810525e <xQueueGenericSendFromISR+0x42>
 810525a:	2301      	movs	r3, #1
 810525c:	e000      	b.n	8105260 <xQueueGenericSendFromISR+0x44>
 810525e:	2300      	movs	r3, #0
 8105260:	2b00      	cmp	r3, #0
 8105262:	d10b      	bne.n	810527c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8105264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105268:	f383 8811 	msr	BASEPRI, r3
 810526c:	f3bf 8f6f 	isb	sy
 8105270:	f3bf 8f4f 	dsb	sy
 8105274:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8105276:	bf00      	nop
 8105278:	bf00      	nop
 810527a:	e7fd      	b.n	8105278 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810527c:	683b      	ldr	r3, [r7, #0]
 810527e:	2b02      	cmp	r3, #2
 8105280:	d103      	bne.n	810528a <xQueueGenericSendFromISR+0x6e>
 8105282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105286:	2b01      	cmp	r3, #1
 8105288:	d101      	bne.n	810528e <xQueueGenericSendFromISR+0x72>
 810528a:	2301      	movs	r3, #1
 810528c:	e000      	b.n	8105290 <xQueueGenericSendFromISR+0x74>
 810528e:	2300      	movs	r3, #0
 8105290:	2b00      	cmp	r3, #0
 8105292:	d10b      	bne.n	81052ac <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8105294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105298:	f383 8811 	msr	BASEPRI, r3
 810529c:	f3bf 8f6f 	isb	sy
 81052a0:	f3bf 8f4f 	dsb	sy
 81052a4:	623b      	str	r3, [r7, #32]
}
 81052a6:	bf00      	nop
 81052a8:	bf00      	nop
 81052aa:	e7fd      	b.n	81052a8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 81052ac:	f7ff fd2c 	bl	8104d08 <vPortValidateInterruptPriority>
	__asm volatile
 81052b0:	f3ef 8211 	mrs	r2, BASEPRI
 81052b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81052b8:	f383 8811 	msr	BASEPRI, r3
 81052bc:	f3bf 8f6f 	isb	sy
 81052c0:	f3bf 8f4f 	dsb	sy
 81052c4:	61fa      	str	r2, [r7, #28]
 81052c6:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 81052c8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 81052ca:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 81052cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81052ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 81052d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81052d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81052d4:	429a      	cmp	r2, r3
 81052d6:	d302      	bcc.n	81052de <xQueueGenericSendFromISR+0xc2>
 81052d8:	683b      	ldr	r3, [r7, #0]
 81052da:	2b02      	cmp	r3, #2
 81052dc:	d12f      	bne.n	810533e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 81052de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81052e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 81052e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 81052e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81052ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81052ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 81052ee:	683a      	ldr	r2, [r7, #0]
 81052f0:	68b9      	ldr	r1, [r7, #8]
 81052f2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 81052f4:	f000 f912 	bl	810551c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 81052f8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 81052fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105300:	d112      	bne.n	8105328 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8105302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105306:	2b00      	cmp	r3, #0
 8105308:	d016      	beq.n	8105338 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810530a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810530c:	3324      	adds	r3, #36	@ 0x24
 810530e:	4618      	mov	r0, r3
 8105310:	f001 fac6 	bl	81068a0 <xTaskRemoveFromEventList>
 8105314:	4603      	mov	r3, r0
 8105316:	2b00      	cmp	r3, #0
 8105318:	d00e      	beq.n	8105338 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 810531a:	687b      	ldr	r3, [r7, #4]
 810531c:	2b00      	cmp	r3, #0
 810531e:	d00b      	beq.n	8105338 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8105320:	687b      	ldr	r3, [r7, #4]
 8105322:	2201      	movs	r2, #1
 8105324:	601a      	str	r2, [r3, #0]
 8105326:	e007      	b.n	8105338 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8105328:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 810532c:	3301      	adds	r3, #1
 810532e:	b2db      	uxtb	r3, r3
 8105330:	b25a      	sxtb	r2, r3
 8105332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105334:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8105338:	2301      	movs	r3, #1
 810533a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 810533c:	e001      	b.n	8105342 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 810533e:	2300      	movs	r3, #0
 8105340:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105344:	617b      	str	r3, [r7, #20]
	__asm volatile
 8105346:	697b      	ldr	r3, [r7, #20]
 8105348:	f383 8811 	msr	BASEPRI, r3
}
 810534c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810534e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8105350:	4618      	mov	r0, r3
 8105352:	3740      	adds	r7, #64	@ 0x40
 8105354:	46bd      	mov	sp, r7
 8105356:	bd80      	pop	{r7, pc}

08105358 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8105358:	b580      	push	{r7, lr}
 810535a:	b08c      	sub	sp, #48	@ 0x30
 810535c:	af00      	add	r7, sp, #0
 810535e:	60f8      	str	r0, [r7, #12]
 8105360:	60b9      	str	r1, [r7, #8]
 8105362:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8105364:	2300      	movs	r3, #0
 8105366:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8105368:	68fb      	ldr	r3, [r7, #12]
 810536a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 810536c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810536e:	2b00      	cmp	r3, #0
 8105370:	d10b      	bne.n	810538a <xQueueReceive+0x32>
	__asm volatile
 8105372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105376:	f383 8811 	msr	BASEPRI, r3
 810537a:	f3bf 8f6f 	isb	sy
 810537e:	f3bf 8f4f 	dsb	sy
 8105382:	623b      	str	r3, [r7, #32]
}
 8105384:	bf00      	nop
 8105386:	bf00      	nop
 8105388:	e7fd      	b.n	8105386 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810538a:	68bb      	ldr	r3, [r7, #8]
 810538c:	2b00      	cmp	r3, #0
 810538e:	d103      	bne.n	8105398 <xQueueReceive+0x40>
 8105390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105394:	2b00      	cmp	r3, #0
 8105396:	d101      	bne.n	810539c <xQueueReceive+0x44>
 8105398:	2301      	movs	r3, #1
 810539a:	e000      	b.n	810539e <xQueueReceive+0x46>
 810539c:	2300      	movs	r3, #0
 810539e:	2b00      	cmp	r3, #0
 81053a0:	d10b      	bne.n	81053ba <xQueueReceive+0x62>
	__asm volatile
 81053a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81053a6:	f383 8811 	msr	BASEPRI, r3
 81053aa:	f3bf 8f6f 	isb	sy
 81053ae:	f3bf 8f4f 	dsb	sy
 81053b2:	61fb      	str	r3, [r7, #28]
}
 81053b4:	bf00      	nop
 81053b6:	bf00      	nop
 81053b8:	e7fd      	b.n	81053b6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 81053ba:	f001 fc6f 	bl	8106c9c <xTaskGetSchedulerState>
 81053be:	4603      	mov	r3, r0
 81053c0:	2b00      	cmp	r3, #0
 81053c2:	d102      	bne.n	81053ca <xQueueReceive+0x72>
 81053c4:	687b      	ldr	r3, [r7, #4]
 81053c6:	2b00      	cmp	r3, #0
 81053c8:	d101      	bne.n	81053ce <xQueueReceive+0x76>
 81053ca:	2301      	movs	r3, #1
 81053cc:	e000      	b.n	81053d0 <xQueueReceive+0x78>
 81053ce:	2300      	movs	r3, #0
 81053d0:	2b00      	cmp	r3, #0
 81053d2:	d10b      	bne.n	81053ec <xQueueReceive+0x94>
	__asm volatile
 81053d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81053d8:	f383 8811 	msr	BASEPRI, r3
 81053dc:	f3bf 8f6f 	isb	sy
 81053e0:	f3bf 8f4f 	dsb	sy
 81053e4:	61bb      	str	r3, [r7, #24]
}
 81053e6:	bf00      	nop
 81053e8:	bf00      	nop
 81053ea:	e7fd      	b.n	81053e8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 81053ec:	f7ff fbac 	bl	8104b48 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 81053f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81053f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81053f4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 81053f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81053f8:	2b00      	cmp	r3, #0
 81053fa:	d01f      	beq.n	810543c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 81053fc:	68b9      	ldr	r1, [r7, #8]
 81053fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8105400:	f000 f8f6 	bl	81055f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8105404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105406:	1e5a      	subs	r2, r3, #1
 8105408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810540a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810540c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810540e:	691b      	ldr	r3, [r3, #16]
 8105410:	2b00      	cmp	r3, #0
 8105412:	d00f      	beq.n	8105434 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8105414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105416:	3310      	adds	r3, #16
 8105418:	4618      	mov	r0, r3
 810541a:	f001 fa41 	bl	81068a0 <xTaskRemoveFromEventList>
 810541e:	4603      	mov	r3, r0
 8105420:	2b00      	cmp	r3, #0
 8105422:	d007      	beq.n	8105434 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8105424:	4b3c      	ldr	r3, [pc, #240]	@ (8105518 <xQueueReceive+0x1c0>)
 8105426:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810542a:	601a      	str	r2, [r3, #0]
 810542c:	f3bf 8f4f 	dsb	sy
 8105430:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8105434:	f7ff fbba 	bl	8104bac <vPortExitCritical>
				return pdPASS;
 8105438:	2301      	movs	r3, #1
 810543a:	e069      	b.n	8105510 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810543c:	687b      	ldr	r3, [r7, #4]
 810543e:	2b00      	cmp	r3, #0
 8105440:	d103      	bne.n	810544a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8105442:	f7ff fbb3 	bl	8104bac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8105446:	2300      	movs	r3, #0
 8105448:	e062      	b.n	8105510 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 810544a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810544c:	2b00      	cmp	r3, #0
 810544e:	d106      	bne.n	810545e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8105450:	f107 0310 	add.w	r3, r7, #16
 8105454:	4618      	mov	r0, r3
 8105456:	f001 faaf 	bl	81069b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810545a:	2301      	movs	r3, #1
 810545c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810545e:	f7ff fba5 	bl	8104bac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8105462:	f000 ffef 	bl	8106444 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8105466:	f7ff fb6f 	bl	8104b48 <vPortEnterCritical>
 810546a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810546c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8105470:	b25b      	sxtb	r3, r3
 8105472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105476:	d103      	bne.n	8105480 <xQueueReceive+0x128>
 8105478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810547a:	2200      	movs	r2, #0
 810547c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8105480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105482:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8105486:	b25b      	sxtb	r3, r3
 8105488:	f1b3 3fff 	cmp.w	r3, #4294967295
 810548c:	d103      	bne.n	8105496 <xQueueReceive+0x13e>
 810548e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105490:	2200      	movs	r2, #0
 8105492:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8105496:	f7ff fb89 	bl	8104bac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810549a:	1d3a      	adds	r2, r7, #4
 810549c:	f107 0310 	add.w	r3, r7, #16
 81054a0:	4611      	mov	r1, r2
 81054a2:	4618      	mov	r0, r3
 81054a4:	f001 fa9e 	bl	81069e4 <xTaskCheckForTimeOut>
 81054a8:	4603      	mov	r3, r0
 81054aa:	2b00      	cmp	r3, #0
 81054ac:	d123      	bne.n	81054f6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 81054ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81054b0:	f000 f916 	bl	81056e0 <prvIsQueueEmpty>
 81054b4:	4603      	mov	r3, r0
 81054b6:	2b00      	cmp	r3, #0
 81054b8:	d017      	beq.n	81054ea <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 81054ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81054bc:	3324      	adds	r3, #36	@ 0x24
 81054be:	687a      	ldr	r2, [r7, #4]
 81054c0:	4611      	mov	r1, r2
 81054c2:	4618      	mov	r0, r3
 81054c4:	f001 f99a 	bl	81067fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 81054c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81054ca:	f000 f8b7 	bl	810563c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 81054ce:	f000 ffc7 	bl	8106460 <xTaskResumeAll>
 81054d2:	4603      	mov	r3, r0
 81054d4:	2b00      	cmp	r3, #0
 81054d6:	d189      	bne.n	81053ec <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 81054d8:	4b0f      	ldr	r3, [pc, #60]	@ (8105518 <xQueueReceive+0x1c0>)
 81054da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81054de:	601a      	str	r2, [r3, #0]
 81054e0:	f3bf 8f4f 	dsb	sy
 81054e4:	f3bf 8f6f 	isb	sy
 81054e8:	e780      	b.n	81053ec <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 81054ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81054ec:	f000 f8a6 	bl	810563c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 81054f0:	f000 ffb6 	bl	8106460 <xTaskResumeAll>
 81054f4:	e77a      	b.n	81053ec <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 81054f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81054f8:	f000 f8a0 	bl	810563c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 81054fc:	f000 ffb0 	bl	8106460 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8105500:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8105502:	f000 f8ed 	bl	81056e0 <prvIsQueueEmpty>
 8105506:	4603      	mov	r3, r0
 8105508:	2b00      	cmp	r3, #0
 810550a:	f43f af6f 	beq.w	81053ec <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 810550e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8105510:	4618      	mov	r0, r3
 8105512:	3730      	adds	r7, #48	@ 0x30
 8105514:	46bd      	mov	sp, r7
 8105516:	bd80      	pop	{r7, pc}
 8105518:	e000ed04 	.word	0xe000ed04

0810551c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 810551c:	b580      	push	{r7, lr}
 810551e:	b086      	sub	sp, #24
 8105520:	af00      	add	r7, sp, #0
 8105522:	60f8      	str	r0, [r7, #12]
 8105524:	60b9      	str	r1, [r7, #8]
 8105526:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8105528:	2300      	movs	r3, #0
 810552a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810552c:	68fb      	ldr	r3, [r7, #12]
 810552e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105530:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8105532:	68fb      	ldr	r3, [r7, #12]
 8105534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105536:	2b00      	cmp	r3, #0
 8105538:	d10d      	bne.n	8105556 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810553a:	68fb      	ldr	r3, [r7, #12]
 810553c:	681b      	ldr	r3, [r3, #0]
 810553e:	2b00      	cmp	r3, #0
 8105540:	d14d      	bne.n	81055de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8105542:	68fb      	ldr	r3, [r7, #12]
 8105544:	689b      	ldr	r3, [r3, #8]
 8105546:	4618      	mov	r0, r3
 8105548:	f001 fbc6 	bl	8106cd8 <xTaskPriorityDisinherit>
 810554c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 810554e:	68fb      	ldr	r3, [r7, #12]
 8105550:	2200      	movs	r2, #0
 8105552:	609a      	str	r2, [r3, #8]
 8105554:	e043      	b.n	81055de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8105556:	687b      	ldr	r3, [r7, #4]
 8105558:	2b00      	cmp	r3, #0
 810555a:	d119      	bne.n	8105590 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810555c:	68fb      	ldr	r3, [r7, #12]
 810555e:	6858      	ldr	r0, [r3, #4]
 8105560:	68fb      	ldr	r3, [r7, #12]
 8105562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105564:	461a      	mov	r2, r3
 8105566:	68b9      	ldr	r1, [r7, #8]
 8105568:	f002 fbe4 	bl	8107d34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810556c:	68fb      	ldr	r3, [r7, #12]
 810556e:	685a      	ldr	r2, [r3, #4]
 8105570:	68fb      	ldr	r3, [r7, #12]
 8105572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105574:	441a      	add	r2, r3
 8105576:	68fb      	ldr	r3, [r7, #12]
 8105578:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810557a:	68fb      	ldr	r3, [r7, #12]
 810557c:	685a      	ldr	r2, [r3, #4]
 810557e:	68fb      	ldr	r3, [r7, #12]
 8105580:	689b      	ldr	r3, [r3, #8]
 8105582:	429a      	cmp	r2, r3
 8105584:	d32b      	bcc.n	81055de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8105586:	68fb      	ldr	r3, [r7, #12]
 8105588:	681a      	ldr	r2, [r3, #0]
 810558a:	68fb      	ldr	r3, [r7, #12]
 810558c:	605a      	str	r2, [r3, #4]
 810558e:	e026      	b.n	81055de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8105590:	68fb      	ldr	r3, [r7, #12]
 8105592:	68d8      	ldr	r0, [r3, #12]
 8105594:	68fb      	ldr	r3, [r7, #12]
 8105596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105598:	461a      	mov	r2, r3
 810559a:	68b9      	ldr	r1, [r7, #8]
 810559c:	f002 fbca 	bl	8107d34 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 81055a0:	68fb      	ldr	r3, [r7, #12]
 81055a2:	68da      	ldr	r2, [r3, #12]
 81055a4:	68fb      	ldr	r3, [r7, #12]
 81055a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81055a8:	425b      	negs	r3, r3
 81055aa:	441a      	add	r2, r3
 81055ac:	68fb      	ldr	r3, [r7, #12]
 81055ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 81055b0:	68fb      	ldr	r3, [r7, #12]
 81055b2:	68da      	ldr	r2, [r3, #12]
 81055b4:	68fb      	ldr	r3, [r7, #12]
 81055b6:	681b      	ldr	r3, [r3, #0]
 81055b8:	429a      	cmp	r2, r3
 81055ba:	d207      	bcs.n	81055cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 81055bc:	68fb      	ldr	r3, [r7, #12]
 81055be:	689a      	ldr	r2, [r3, #8]
 81055c0:	68fb      	ldr	r3, [r7, #12]
 81055c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81055c4:	425b      	negs	r3, r3
 81055c6:	441a      	add	r2, r3
 81055c8:	68fb      	ldr	r3, [r7, #12]
 81055ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 81055cc:	687b      	ldr	r3, [r7, #4]
 81055ce:	2b02      	cmp	r3, #2
 81055d0:	d105      	bne.n	81055de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 81055d2:	693b      	ldr	r3, [r7, #16]
 81055d4:	2b00      	cmp	r3, #0
 81055d6:	d002      	beq.n	81055de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 81055d8:	693b      	ldr	r3, [r7, #16]
 81055da:	3b01      	subs	r3, #1
 81055dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 81055de:	693b      	ldr	r3, [r7, #16]
 81055e0:	1c5a      	adds	r2, r3, #1
 81055e2:	68fb      	ldr	r3, [r7, #12]
 81055e4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 81055e6:	697b      	ldr	r3, [r7, #20]
}
 81055e8:	4618      	mov	r0, r3
 81055ea:	3718      	adds	r7, #24
 81055ec:	46bd      	mov	sp, r7
 81055ee:	bd80      	pop	{r7, pc}

081055f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 81055f0:	b580      	push	{r7, lr}
 81055f2:	b082      	sub	sp, #8
 81055f4:	af00      	add	r7, sp, #0
 81055f6:	6078      	str	r0, [r7, #4]
 81055f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 81055fa:	687b      	ldr	r3, [r7, #4]
 81055fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81055fe:	2b00      	cmp	r3, #0
 8105600:	d018      	beq.n	8105634 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8105602:	687b      	ldr	r3, [r7, #4]
 8105604:	68da      	ldr	r2, [r3, #12]
 8105606:	687b      	ldr	r3, [r7, #4]
 8105608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810560a:	441a      	add	r2, r3
 810560c:	687b      	ldr	r3, [r7, #4]
 810560e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8105610:	687b      	ldr	r3, [r7, #4]
 8105612:	68da      	ldr	r2, [r3, #12]
 8105614:	687b      	ldr	r3, [r7, #4]
 8105616:	689b      	ldr	r3, [r3, #8]
 8105618:	429a      	cmp	r2, r3
 810561a:	d303      	bcc.n	8105624 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 810561c:	687b      	ldr	r3, [r7, #4]
 810561e:	681a      	ldr	r2, [r3, #0]
 8105620:	687b      	ldr	r3, [r7, #4]
 8105622:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8105624:	687b      	ldr	r3, [r7, #4]
 8105626:	68d9      	ldr	r1, [r3, #12]
 8105628:	687b      	ldr	r3, [r7, #4]
 810562a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810562c:	461a      	mov	r2, r3
 810562e:	6838      	ldr	r0, [r7, #0]
 8105630:	f002 fb80 	bl	8107d34 <memcpy>
	}
}
 8105634:	bf00      	nop
 8105636:	3708      	adds	r7, #8
 8105638:	46bd      	mov	sp, r7
 810563a:	bd80      	pop	{r7, pc}

0810563c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 810563c:	b580      	push	{r7, lr}
 810563e:	b084      	sub	sp, #16
 8105640:	af00      	add	r7, sp, #0
 8105642:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8105644:	f7ff fa80 	bl	8104b48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8105648:	687b      	ldr	r3, [r7, #4]
 810564a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810564e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8105650:	e011      	b.n	8105676 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8105652:	687b      	ldr	r3, [r7, #4]
 8105654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105656:	2b00      	cmp	r3, #0
 8105658:	d012      	beq.n	8105680 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810565a:	687b      	ldr	r3, [r7, #4]
 810565c:	3324      	adds	r3, #36	@ 0x24
 810565e:	4618      	mov	r0, r3
 8105660:	f001 f91e 	bl	81068a0 <xTaskRemoveFromEventList>
 8105664:	4603      	mov	r3, r0
 8105666:	2b00      	cmp	r3, #0
 8105668:	d001      	beq.n	810566e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 810566a:	f001 fa1f 	bl	8106aac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 810566e:	7bfb      	ldrb	r3, [r7, #15]
 8105670:	3b01      	subs	r3, #1
 8105672:	b2db      	uxtb	r3, r3
 8105674:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8105676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810567a:	2b00      	cmp	r3, #0
 810567c:	dce9      	bgt.n	8105652 <prvUnlockQueue+0x16>
 810567e:	e000      	b.n	8105682 <prvUnlockQueue+0x46>
					break;
 8105680:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8105682:	687b      	ldr	r3, [r7, #4]
 8105684:	22ff      	movs	r2, #255	@ 0xff
 8105686:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 810568a:	f7ff fa8f 	bl	8104bac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 810568e:	f7ff fa5b 	bl	8104b48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8105692:	687b      	ldr	r3, [r7, #4]
 8105694:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8105698:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 810569a:	e011      	b.n	81056c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810569c:	687b      	ldr	r3, [r7, #4]
 810569e:	691b      	ldr	r3, [r3, #16]
 81056a0:	2b00      	cmp	r3, #0
 81056a2:	d012      	beq.n	81056ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 81056a4:	687b      	ldr	r3, [r7, #4]
 81056a6:	3310      	adds	r3, #16
 81056a8:	4618      	mov	r0, r3
 81056aa:	f001 f8f9 	bl	81068a0 <xTaskRemoveFromEventList>
 81056ae:	4603      	mov	r3, r0
 81056b0:	2b00      	cmp	r3, #0
 81056b2:	d001      	beq.n	81056b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 81056b4:	f001 f9fa 	bl	8106aac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 81056b8:	7bbb      	ldrb	r3, [r7, #14]
 81056ba:	3b01      	subs	r3, #1
 81056bc:	b2db      	uxtb	r3, r3
 81056be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 81056c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 81056c4:	2b00      	cmp	r3, #0
 81056c6:	dce9      	bgt.n	810569c <prvUnlockQueue+0x60>
 81056c8:	e000      	b.n	81056cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 81056ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 81056cc:	687b      	ldr	r3, [r7, #4]
 81056ce:	22ff      	movs	r2, #255	@ 0xff
 81056d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 81056d4:	f7ff fa6a 	bl	8104bac <vPortExitCritical>
}
 81056d8:	bf00      	nop
 81056da:	3710      	adds	r7, #16
 81056dc:	46bd      	mov	sp, r7
 81056de:	bd80      	pop	{r7, pc}

081056e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 81056e0:	b580      	push	{r7, lr}
 81056e2:	b084      	sub	sp, #16
 81056e4:	af00      	add	r7, sp, #0
 81056e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 81056e8:	f7ff fa2e 	bl	8104b48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 81056ec:	687b      	ldr	r3, [r7, #4]
 81056ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81056f0:	2b00      	cmp	r3, #0
 81056f2:	d102      	bne.n	81056fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 81056f4:	2301      	movs	r3, #1
 81056f6:	60fb      	str	r3, [r7, #12]
 81056f8:	e001      	b.n	81056fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 81056fa:	2300      	movs	r3, #0
 81056fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 81056fe:	f7ff fa55 	bl	8104bac <vPortExitCritical>

	return xReturn;
 8105702:	68fb      	ldr	r3, [r7, #12]
}
 8105704:	4618      	mov	r0, r3
 8105706:	3710      	adds	r7, #16
 8105708:	46bd      	mov	sp, r7
 810570a:	bd80      	pop	{r7, pc}

0810570c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 810570c:	b580      	push	{r7, lr}
 810570e:	b084      	sub	sp, #16
 8105710:	af00      	add	r7, sp, #0
 8105712:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8105714:	f7ff fa18 	bl	8104b48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8105718:	687b      	ldr	r3, [r7, #4]
 810571a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810571c:	687b      	ldr	r3, [r7, #4]
 810571e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105720:	429a      	cmp	r2, r3
 8105722:	d102      	bne.n	810572a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8105724:	2301      	movs	r3, #1
 8105726:	60fb      	str	r3, [r7, #12]
 8105728:	e001      	b.n	810572e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 810572a:	2300      	movs	r3, #0
 810572c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810572e:	f7ff fa3d 	bl	8104bac <vPortExitCritical>

	return xReturn;
 8105732:	68fb      	ldr	r3, [r7, #12]
}
 8105734:	4618      	mov	r0, r3
 8105736:	3710      	adds	r7, #16
 8105738:	46bd      	mov	sp, r7
 810573a:	bd80      	pop	{r7, pc}

0810573c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 810573c:	b480      	push	{r7}
 810573e:	b085      	sub	sp, #20
 8105740:	af00      	add	r7, sp, #0
 8105742:	6078      	str	r0, [r7, #4]
 8105744:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8105746:	2300      	movs	r3, #0
 8105748:	60fb      	str	r3, [r7, #12]
 810574a:	e014      	b.n	8105776 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 810574c:	4a0f      	ldr	r2, [pc, #60]	@ (810578c <vQueueAddToRegistry+0x50>)
 810574e:	68fb      	ldr	r3, [r7, #12]
 8105750:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8105754:	2b00      	cmp	r3, #0
 8105756:	d10b      	bne.n	8105770 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8105758:	490c      	ldr	r1, [pc, #48]	@ (810578c <vQueueAddToRegistry+0x50>)
 810575a:	68fb      	ldr	r3, [r7, #12]
 810575c:	683a      	ldr	r2, [r7, #0]
 810575e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8105762:	4a0a      	ldr	r2, [pc, #40]	@ (810578c <vQueueAddToRegistry+0x50>)
 8105764:	68fb      	ldr	r3, [r7, #12]
 8105766:	00db      	lsls	r3, r3, #3
 8105768:	4413      	add	r3, r2
 810576a:	687a      	ldr	r2, [r7, #4]
 810576c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 810576e:	e006      	b.n	810577e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8105770:	68fb      	ldr	r3, [r7, #12]
 8105772:	3301      	adds	r3, #1
 8105774:	60fb      	str	r3, [r7, #12]
 8105776:	68fb      	ldr	r3, [r7, #12]
 8105778:	2b07      	cmp	r3, #7
 810577a:	d9e7      	bls.n	810574c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 810577c:	bf00      	nop
 810577e:	bf00      	nop
 8105780:	3714      	adds	r7, #20
 8105782:	46bd      	mov	sp, r7
 8105784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105788:	4770      	bx	lr
 810578a:	bf00      	nop
 810578c:	10004460 	.word	0x10004460

08105790 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8105790:	b580      	push	{r7, lr}
 8105792:	b086      	sub	sp, #24
 8105794:	af00      	add	r7, sp, #0
 8105796:	60f8      	str	r0, [r7, #12]
 8105798:	60b9      	str	r1, [r7, #8]
 810579a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 810579c:	68fb      	ldr	r3, [r7, #12]
 810579e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 81057a0:	f7ff f9d2 	bl	8104b48 <vPortEnterCritical>
 81057a4:	697b      	ldr	r3, [r7, #20]
 81057a6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 81057aa:	b25b      	sxtb	r3, r3
 81057ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 81057b0:	d103      	bne.n	81057ba <vQueueWaitForMessageRestricted+0x2a>
 81057b2:	697b      	ldr	r3, [r7, #20]
 81057b4:	2200      	movs	r2, #0
 81057b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 81057ba:	697b      	ldr	r3, [r7, #20]
 81057bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 81057c0:	b25b      	sxtb	r3, r3
 81057c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81057c6:	d103      	bne.n	81057d0 <vQueueWaitForMessageRestricted+0x40>
 81057c8:	697b      	ldr	r3, [r7, #20]
 81057ca:	2200      	movs	r2, #0
 81057cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81057d0:	f7ff f9ec 	bl	8104bac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 81057d4:	697b      	ldr	r3, [r7, #20]
 81057d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81057d8:	2b00      	cmp	r3, #0
 81057da:	d106      	bne.n	81057ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 81057dc:	697b      	ldr	r3, [r7, #20]
 81057de:	3324      	adds	r3, #36	@ 0x24
 81057e0:	687a      	ldr	r2, [r7, #4]
 81057e2:	68b9      	ldr	r1, [r7, #8]
 81057e4:	4618      	mov	r0, r3
 81057e6:	f001 f82f 	bl	8106848 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 81057ea:	6978      	ldr	r0, [r7, #20]
 81057ec:	f7ff ff26 	bl	810563c <prvUnlockQueue>
	}
 81057f0:	bf00      	nop
 81057f2:	3718      	adds	r7, #24
 81057f4:	46bd      	mov	sp, r7
 81057f6:	bd80      	pop	{r7, pc}

081057f8 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 81057f8:	b480      	push	{r7}
 81057fa:	b087      	sub	sp, #28
 81057fc:	af00      	add	r7, sp, #0
 81057fe:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8105800:	687b      	ldr	r3, [r7, #4]
 8105802:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8105804:	693b      	ldr	r3, [r7, #16]
 8105806:	2b00      	cmp	r3, #0
 8105808:	d10b      	bne.n	8105822 <xStreamBufferSpacesAvailable+0x2a>
	__asm volatile
 810580a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810580e:	f383 8811 	msr	BASEPRI, r3
 8105812:	f3bf 8f6f 	isb	sy
 8105816:	f3bf 8f4f 	dsb	sy
 810581a:	60fb      	str	r3, [r7, #12]
}
 810581c:	bf00      	nop
 810581e:	bf00      	nop
 8105820:	e7fd      	b.n	810581e <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8105822:	693b      	ldr	r3, [r7, #16]
 8105824:	689a      	ldr	r2, [r3, #8]
 8105826:	693b      	ldr	r3, [r7, #16]
 8105828:	681b      	ldr	r3, [r3, #0]
 810582a:	4413      	add	r3, r2
 810582c:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 810582e:	693b      	ldr	r3, [r7, #16]
 8105830:	685b      	ldr	r3, [r3, #4]
 8105832:	697a      	ldr	r2, [r7, #20]
 8105834:	1ad3      	subs	r3, r2, r3
 8105836:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8105838:	697b      	ldr	r3, [r7, #20]
 810583a:	3b01      	subs	r3, #1
 810583c:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 810583e:	693b      	ldr	r3, [r7, #16]
 8105840:	689b      	ldr	r3, [r3, #8]
 8105842:	697a      	ldr	r2, [r7, #20]
 8105844:	429a      	cmp	r2, r3
 8105846:	d304      	bcc.n	8105852 <xStreamBufferSpacesAvailable+0x5a>
	{
		xSpace -= pxStreamBuffer->xLength;
 8105848:	693b      	ldr	r3, [r7, #16]
 810584a:	689b      	ldr	r3, [r3, #8]
 810584c:	697a      	ldr	r2, [r7, #20]
 810584e:	1ad3      	subs	r3, r2, r3
 8105850:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8105852:	697b      	ldr	r3, [r7, #20]
}
 8105854:	4618      	mov	r0, r3
 8105856:	371c      	adds	r7, #28
 8105858:	46bd      	mov	sp, r7
 810585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810585e:	4770      	bx	lr

08105860 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8105860:	b580      	push	{r7, lr}
 8105862:	b090      	sub	sp, #64	@ 0x40
 8105864:	af02      	add	r7, sp, #8
 8105866:	60f8      	str	r0, [r7, #12]
 8105868:	60b9      	str	r1, [r7, #8]
 810586a:	607a      	str	r2, [r7, #4]
 810586c:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 810586e:	68fb      	ldr	r3, [r7, #12]
 8105870:	62fb      	str	r3, [r7, #44]	@ 0x2c
size_t xReturn, xSpace = 0;
 8105872:	2300      	movs	r3, #0
 8105874:	637b      	str	r3, [r7, #52]	@ 0x34
size_t xRequiredSpace = xDataLengthBytes;
 8105876:	687b      	ldr	r3, [r7, #4]
 8105878:	633b      	str	r3, [r7, #48]	@ 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 810587a:	68bb      	ldr	r3, [r7, #8]
 810587c:	2b00      	cmp	r3, #0
 810587e:	d10b      	bne.n	8105898 <xStreamBufferSend+0x38>
	__asm volatile
 8105880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105884:	f383 8811 	msr	BASEPRI, r3
 8105888:	f3bf 8f6f 	isb	sy
 810588c:	f3bf 8f4f 	dsb	sy
 8105890:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8105892:	bf00      	nop
 8105894:	bf00      	nop
 8105896:	e7fd      	b.n	8105894 <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 8105898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810589a:	2b00      	cmp	r3, #0
 810589c:	d10b      	bne.n	81058b6 <xStreamBufferSend+0x56>
	__asm volatile
 810589e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81058a2:	f383 8811 	msr	BASEPRI, r3
 81058a6:	f3bf 8f6f 	isb	sy
 81058aa:	f3bf 8f4f 	dsb	sy
 81058ae:	623b      	str	r3, [r7, #32]
}
 81058b0:	bf00      	nop
 81058b2:	bf00      	nop
 81058b4:	e7fd      	b.n	81058b2 <xStreamBufferSend+0x52>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 81058b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81058b8:	7f1b      	ldrb	r3, [r3, #28]
 81058ba:	f003 0301 	and.w	r3, r3, #1
 81058be:	2b00      	cmp	r3, #0
 81058c0:	d012      	beq.n	81058e8 <xStreamBufferSend+0x88>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 81058c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81058c4:	3304      	adds	r3, #4
 81058c6:	633b      	str	r3, [r7, #48]	@ 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 81058c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81058ca:	687b      	ldr	r3, [r7, #4]
 81058cc:	429a      	cmp	r2, r3
 81058ce:	d80b      	bhi.n	81058e8 <xStreamBufferSend+0x88>
	__asm volatile
 81058d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81058d4:	f383 8811 	msr	BASEPRI, r3
 81058d8:	f3bf 8f6f 	isb	sy
 81058dc:	f3bf 8f4f 	dsb	sy
 81058e0:	61fb      	str	r3, [r7, #28]
}
 81058e2:	bf00      	nop
 81058e4:	bf00      	nop
 81058e6:	e7fd      	b.n	81058e4 <xStreamBufferSend+0x84>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 81058e8:	683b      	ldr	r3, [r7, #0]
 81058ea:	2b00      	cmp	r3, #0
 81058ec:	d03f      	beq.n	810596e <xStreamBufferSend+0x10e>
	{
		vTaskSetTimeOutState( &xTimeOut );
 81058ee:	f107 0310 	add.w	r3, r7, #16
 81058f2:	4618      	mov	r0, r3
 81058f4:	f001 f838 	bl	8106968 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 81058f8:	f7ff f926 	bl	8104b48 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 81058fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 81058fe:	f7ff ff7b 	bl	81057f8 <xStreamBufferSpacesAvailable>
 8105902:	6378      	str	r0, [r7, #52]	@ 0x34

				if( xSpace < xRequiredSpace )
 8105904:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8105906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105908:	429a      	cmp	r2, r3
 810590a:	d218      	bcs.n	810593e <xStreamBufferSend+0xde>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 810590c:	2000      	movs	r0, #0
 810590e:	f001 fb99 	bl	8107044 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8105912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105914:	695b      	ldr	r3, [r3, #20]
 8105916:	2b00      	cmp	r3, #0
 8105918:	d00b      	beq.n	8105932 <xStreamBufferSend+0xd2>
	__asm volatile
 810591a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810591e:	f383 8811 	msr	BASEPRI, r3
 8105922:	f3bf 8f6f 	isb	sy
 8105926:	f3bf 8f4f 	dsb	sy
 810592a:	61bb      	str	r3, [r7, #24]
}
 810592c:	bf00      	nop
 810592e:	bf00      	nop
 8105930:	e7fd      	b.n	810592e <xStreamBufferSend+0xce>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8105932:	f001 f9a3 	bl	8106c7c <xTaskGetCurrentTaskHandle>
 8105936:	4602      	mov	r2, r0
 8105938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810593a:	615a      	str	r2, [r3, #20]
 810593c:	e002      	b.n	8105944 <xStreamBufferSend+0xe4>
				}
				else
				{
					taskEXIT_CRITICAL();
 810593e:	f7ff f935 	bl	8104bac <vPortExitCritical>
					break;
 8105942:	e014      	b.n	810596e <xStreamBufferSend+0x10e>
				}
			}
			taskEXIT_CRITICAL();
 8105944:	f7ff f932 	bl	8104bac <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8105948:	683b      	ldr	r3, [r7, #0]
 810594a:	2200      	movs	r2, #0
 810594c:	2100      	movs	r1, #0
 810594e:	2000      	movs	r0, #0
 8105950:	f001 fa32 	bl	8106db8 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 8105954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105956:	2200      	movs	r2, #0
 8105958:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 810595a:	463a      	mov	r2, r7
 810595c:	f107 0310 	add.w	r3, r7, #16
 8105960:	4611      	mov	r1, r2
 8105962:	4618      	mov	r0, r3
 8105964:	f001 f83e 	bl	81069e4 <xTaskCheckForTimeOut>
 8105968:	4603      	mov	r3, r0
 810596a:	2b00      	cmp	r3, #0
 810596c:	d0c4      	beq.n	81058f8 <xStreamBufferSend+0x98>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 810596e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105970:	2b00      	cmp	r3, #0
 8105972:	d103      	bne.n	810597c <xStreamBufferSend+0x11c>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8105974:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8105976:	f7ff ff3f 	bl	81057f8 <xStreamBufferSpacesAvailable>
 810597a:	6378      	str	r0, [r7, #52]	@ 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 810597c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810597e:	9300      	str	r3, [sp, #0]
 8105980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105982:	687a      	ldr	r2, [r7, #4]
 8105984:	68b9      	ldr	r1, [r7, #8]
 8105986:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8105988:	f000 f815 	bl	81059b6 <prvWriteMessageToBuffer>
 810598c:	62b8      	str	r0, [r7, #40]	@ 0x28

	if( xReturn > ( size_t ) 0 )
 810598e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105990:	2b00      	cmp	r3, #0
 8105992:	d00b      	beq.n	81059ac <xStreamBufferSend+0x14c>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8105994:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8105996:	f000 fad2 	bl	8105f3e <prvBytesInBuffer>
 810599a:	4602      	mov	r2, r0
 810599c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810599e:	68db      	ldr	r3, [r3, #12]
 81059a0:	429a      	cmp	r2, r3
 81059a2:	d303      	bcc.n	81059ac <xStreamBufferSend+0x14c>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 81059a4:	2101      	movs	r1, #1
 81059a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 81059a8:	f7fa fd1a 	bl	81003e0 <vGenerateRemoteInterrupt>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 81059ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 81059ae:	4618      	mov	r0, r3
 81059b0:	3738      	adds	r7, #56	@ 0x38
 81059b2:	46bd      	mov	sp, r7
 81059b4:	bd80      	pop	{r7, pc}

081059b6 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 81059b6:	b580      	push	{r7, lr}
 81059b8:	b086      	sub	sp, #24
 81059ba:	af00      	add	r7, sp, #0
 81059bc:	60f8      	str	r0, [r7, #12]
 81059be:	60b9      	str	r1, [r7, #8]
 81059c0:	607a      	str	r2, [r7, #4]
 81059c2:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 81059c4:	683b      	ldr	r3, [r7, #0]
 81059c6:	2b00      	cmp	r3, #0
 81059c8:	d102      	bne.n	81059d0 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 81059ca:	2300      	movs	r3, #0
 81059cc:	617b      	str	r3, [r7, #20]
 81059ce:	e01d      	b.n	8105a0c <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 81059d0:	68fb      	ldr	r3, [r7, #12]
 81059d2:	7f1b      	ldrb	r3, [r3, #28]
 81059d4:	f003 0301 	and.w	r3, r3, #1
 81059d8:	2b00      	cmp	r3, #0
 81059da:	d108      	bne.n	81059ee <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 81059dc:	2301      	movs	r3, #1
 81059de:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 81059e0:	687a      	ldr	r2, [r7, #4]
 81059e2:	683b      	ldr	r3, [r7, #0]
 81059e4:	4293      	cmp	r3, r2
 81059e6:	bf28      	it	cs
 81059e8:	4613      	movcs	r3, r2
 81059ea:	607b      	str	r3, [r7, #4]
 81059ec:	e00e      	b.n	8105a0c <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 81059ee:	683a      	ldr	r2, [r7, #0]
 81059f0:	6a3b      	ldr	r3, [r7, #32]
 81059f2:	429a      	cmp	r2, r3
 81059f4:	d308      	bcc.n	8105a08 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 81059f6:	2301      	movs	r3, #1
 81059f8:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 81059fa:	1d3b      	adds	r3, r7, #4
 81059fc:	2204      	movs	r2, #4
 81059fe:	4619      	mov	r1, r3
 8105a00:	68f8      	ldr	r0, [r7, #12]
 8105a02:	f000 f9aa 	bl	8105d5a <prvWriteBytesToBuffer>
 8105a06:	e001      	b.n	8105a0c <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8105a08:	2300      	movs	r3, #0
 8105a0a:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8105a0c:	697b      	ldr	r3, [r7, #20]
 8105a0e:	2b00      	cmp	r3, #0
 8105a10:	d007      	beq.n	8105a22 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8105a12:	687b      	ldr	r3, [r7, #4]
 8105a14:	461a      	mov	r2, r3
 8105a16:	68b9      	ldr	r1, [r7, #8]
 8105a18:	68f8      	ldr	r0, [r7, #12]
 8105a1a:	f000 f99e 	bl	8105d5a <prvWriteBytesToBuffer>
 8105a1e:	6138      	str	r0, [r7, #16]
 8105a20:	e001      	b.n	8105a26 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8105a22:	2300      	movs	r3, #0
 8105a24:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8105a26:	693b      	ldr	r3, [r7, #16]
}
 8105a28:	4618      	mov	r0, r3
 8105a2a:	3718      	adds	r7, #24
 8105a2c:	46bd      	mov	sp, r7
 8105a2e:	bd80      	pop	{r7, pc}

08105a30 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8105a30:	b580      	push	{r7, lr}
 8105a32:	b08e      	sub	sp, #56	@ 0x38
 8105a34:	af02      	add	r7, sp, #8
 8105a36:	60f8      	str	r0, [r7, #12]
 8105a38:	60b9      	str	r1, [r7, #8]
 8105a3a:	607a      	str	r2, [r7, #4]
 8105a3c:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8105a3e:	68fb      	ldr	r3, [r7, #12]
 8105a40:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8105a42:	2300      	movs	r3, #0
 8105a44:	62fb      	str	r3, [r7, #44]	@ 0x2c

	configASSERT( pvRxData );
 8105a46:	68bb      	ldr	r3, [r7, #8]
 8105a48:	2b00      	cmp	r3, #0
 8105a4a:	d10b      	bne.n	8105a64 <xStreamBufferReceive+0x34>
	__asm volatile
 8105a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105a50:	f383 8811 	msr	BASEPRI, r3
 8105a54:	f3bf 8f6f 	isb	sy
 8105a58:	f3bf 8f4f 	dsb	sy
 8105a5c:	61fb      	str	r3, [r7, #28]
}
 8105a5e:	bf00      	nop
 8105a60:	bf00      	nop
 8105a62:	e7fd      	b.n	8105a60 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 8105a64:	6a3b      	ldr	r3, [r7, #32]
 8105a66:	2b00      	cmp	r3, #0
 8105a68:	d10b      	bne.n	8105a82 <xStreamBufferReceive+0x52>
	__asm volatile
 8105a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105a6e:	f383 8811 	msr	BASEPRI, r3
 8105a72:	f3bf 8f6f 	isb	sy
 8105a76:	f3bf 8f4f 	dsb	sy
 8105a7a:	61bb      	str	r3, [r7, #24]
}
 8105a7c:	bf00      	nop
 8105a7e:	bf00      	nop
 8105a80:	e7fd      	b.n	8105a7e <xStreamBufferReceive+0x4e>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8105a82:	6a3b      	ldr	r3, [r7, #32]
 8105a84:	7f1b      	ldrb	r3, [r3, #28]
 8105a86:	f003 0301 	and.w	r3, r3, #1
 8105a8a:	2b00      	cmp	r3, #0
 8105a8c:	d002      	beq.n	8105a94 <xStreamBufferReceive+0x64>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8105a8e:	2304      	movs	r3, #4
 8105a90:	627b      	str	r3, [r7, #36]	@ 0x24
 8105a92:	e001      	b.n	8105a98 <xStreamBufferReceive+0x68>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8105a94:	2300      	movs	r3, #0
 8105a96:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8105a98:	683b      	ldr	r3, [r7, #0]
 8105a9a:	2b00      	cmp	r3, #0
 8105a9c:	d035      	beq.n	8105b0a <xStreamBufferReceive+0xda>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8105a9e:	f7ff f853 	bl	8104b48 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8105aa2:	6a38      	ldr	r0, [r7, #32]
 8105aa4:	f000 fa4b 	bl	8105f3e <prvBytesInBuffer>
 8105aa8:	62b8      	str	r0, [r7, #40]	@ 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8105aaa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8105aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105aae:	429a      	cmp	r2, r3
 8105ab0:	d817      	bhi.n	8105ae2 <xStreamBufferReceive+0xb2>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8105ab2:	2000      	movs	r0, #0
 8105ab4:	f001 fac6 	bl	8107044 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8105ab8:	6a3b      	ldr	r3, [r7, #32]
 8105aba:	691b      	ldr	r3, [r3, #16]
 8105abc:	2b00      	cmp	r3, #0
 8105abe:	d00b      	beq.n	8105ad8 <xStreamBufferReceive+0xa8>
	__asm volatile
 8105ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105ac4:	f383 8811 	msr	BASEPRI, r3
 8105ac8:	f3bf 8f6f 	isb	sy
 8105acc:	f3bf 8f4f 	dsb	sy
 8105ad0:	617b      	str	r3, [r7, #20]
}
 8105ad2:	bf00      	nop
 8105ad4:	bf00      	nop
 8105ad6:	e7fd      	b.n	8105ad4 <xStreamBufferReceive+0xa4>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8105ad8:	f001 f8d0 	bl	8106c7c <xTaskGetCurrentTaskHandle>
 8105adc:	4602      	mov	r2, r0
 8105ade:	6a3b      	ldr	r3, [r7, #32]
 8105ae0:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8105ae2:	f7ff f863 	bl	8104bac <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8105ae6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8105ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105aea:	429a      	cmp	r2, r3
 8105aec:	d811      	bhi.n	8105b12 <xStreamBufferReceive+0xe2>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8105aee:	683b      	ldr	r3, [r7, #0]
 8105af0:	2200      	movs	r2, #0
 8105af2:	2100      	movs	r1, #0
 8105af4:	2000      	movs	r0, #0
 8105af6:	f001 f95f 	bl	8106db8 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8105afa:	6a3b      	ldr	r3, [r7, #32]
 8105afc:	2200      	movs	r2, #0
 8105afe:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8105b00:	6a38      	ldr	r0, [r7, #32]
 8105b02:	f000 fa1c 	bl	8105f3e <prvBytesInBuffer>
 8105b06:	62b8      	str	r0, [r7, #40]	@ 0x28
 8105b08:	e003      	b.n	8105b12 <xStreamBufferReceive+0xe2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8105b0a:	6a38      	ldr	r0, [r7, #32]
 8105b0c:	f000 fa17 	bl	8105f3e <prvBytesInBuffer>
 8105b10:	62b8      	str	r0, [r7, #40]	@ 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8105b12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8105b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105b16:	429a      	cmp	r2, r3
 8105b18:	d90f      	bls.n	8105b3a <xStreamBufferReceive+0x10a>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8105b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105b1c:	9300      	str	r3, [sp, #0]
 8105b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105b20:	687a      	ldr	r2, [r7, #4]
 8105b22:	68b9      	ldr	r1, [r7, #8]
 8105b24:	6a38      	ldr	r0, [r7, #32]
 8105b26:	f000 f85e 	bl	8105be6 <prvReadMessageFromBuffer>
 8105b2a:	62f8      	str	r0, [r7, #44]	@ 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8105b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105b2e:	2b00      	cmp	r3, #0
 8105b30:	d003      	beq.n	8105b3a <xStreamBufferReceive+0x10a>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8105b32:	2100      	movs	r1, #0
 8105b34:	6a38      	ldr	r0, [r7, #32]
 8105b36:	f7fa fc53 	bl	81003e0 <vGenerateRemoteInterrupt>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8105b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8105b3c:	4618      	mov	r0, r3
 8105b3e:	3730      	adds	r7, #48	@ 0x30
 8105b40:	46bd      	mov	sp, r7
 8105b42:	bd80      	pop	{r7, pc}

08105b44 <xStreamBufferReceiveFromISR>:

size_t xStreamBufferReceiveFromISR( StreamBufferHandle_t xStreamBuffer,
									void *pvRxData,
									size_t xBufferLengthBytes,
									BaseType_t * const pxHigherPriorityTaskWoken )
{
 8105b44:	b580      	push	{r7, lr}
 8105b46:	b08c      	sub	sp, #48	@ 0x30
 8105b48:	af02      	add	r7, sp, #8
 8105b4a:	60f8      	str	r0, [r7, #12]
 8105b4c:	60b9      	str	r1, [r7, #8]
 8105b4e:	607a      	str	r2, [r7, #4]
 8105b50:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8105b52:	68fb      	ldr	r3, [r7, #12]
 8105b54:	61fb      	str	r3, [r7, #28]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8105b56:	2300      	movs	r3, #0
 8105b58:	627b      	str	r3, [r7, #36]	@ 0x24

	configASSERT( pvRxData );
 8105b5a:	68bb      	ldr	r3, [r7, #8]
 8105b5c:	2b00      	cmp	r3, #0
 8105b5e:	d10b      	bne.n	8105b78 <xStreamBufferReceiveFromISR+0x34>
	__asm volatile
 8105b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105b64:	f383 8811 	msr	BASEPRI, r3
 8105b68:	f3bf 8f6f 	isb	sy
 8105b6c:	f3bf 8f4f 	dsb	sy
 8105b70:	617b      	str	r3, [r7, #20]
}
 8105b72:	bf00      	nop
 8105b74:	bf00      	nop
 8105b76:	e7fd      	b.n	8105b74 <xStreamBufferReceiveFromISR+0x30>
	configASSERT( pxStreamBuffer );
 8105b78:	69fb      	ldr	r3, [r7, #28]
 8105b7a:	2b00      	cmp	r3, #0
 8105b7c:	d10b      	bne.n	8105b96 <xStreamBufferReceiveFromISR+0x52>
	__asm volatile
 8105b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105b82:	f383 8811 	msr	BASEPRI, r3
 8105b86:	f3bf 8f6f 	isb	sy
 8105b8a:	f3bf 8f4f 	dsb	sy
 8105b8e:	613b      	str	r3, [r7, #16]
}
 8105b90:	bf00      	nop
 8105b92:	bf00      	nop
 8105b94:	e7fd      	b.n	8105b92 <xStreamBufferReceiveFromISR+0x4e>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8105b96:	69fb      	ldr	r3, [r7, #28]
 8105b98:	7f1b      	ldrb	r3, [r3, #28]
 8105b9a:	f003 0301 	and.w	r3, r3, #1
 8105b9e:	2b00      	cmp	r3, #0
 8105ba0:	d002      	beq.n	8105ba8 <xStreamBufferReceiveFromISR+0x64>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8105ba2:	2304      	movs	r3, #4
 8105ba4:	623b      	str	r3, [r7, #32]
 8105ba6:	e001      	b.n	8105bac <xStreamBufferReceiveFromISR+0x68>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8105ba8:	2300      	movs	r3, #0
 8105baa:	623b      	str	r3, [r7, #32]
	}

	xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8105bac:	69f8      	ldr	r0, [r7, #28]
 8105bae:	f000 f9c6 	bl	8105f3e <prvBytesInBuffer>
 8105bb2:	61b8      	str	r0, [r7, #24]
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8105bb4:	69ba      	ldr	r2, [r7, #24]
 8105bb6:	6a3b      	ldr	r3, [r7, #32]
 8105bb8:	429a      	cmp	r2, r3
 8105bba:	d90f      	bls.n	8105bdc <xStreamBufferReceiveFromISR+0x98>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8105bbc:	6a3b      	ldr	r3, [r7, #32]
 8105bbe:	9300      	str	r3, [sp, #0]
 8105bc0:	69bb      	ldr	r3, [r7, #24]
 8105bc2:	687a      	ldr	r2, [r7, #4]
 8105bc4:	68b9      	ldr	r1, [r7, #8]
 8105bc6:	69f8      	ldr	r0, [r7, #28]
 8105bc8:	f000 f80d 	bl	8105be6 <prvReadMessageFromBuffer>
 8105bcc:	6278      	str	r0, [r7, #36]	@ 0x24

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8105bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105bd0:	2b00      	cmp	r3, #0
 8105bd2:	d003      	beq.n	8105bdc <xStreamBufferReceiveFromISR+0x98>
		{
			sbRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 8105bd4:	2100      	movs	r1, #0
 8105bd6:	69f8      	ldr	r0, [r7, #28]
 8105bd8:	f7fa fc02 	bl	81003e0 <vGenerateRemoteInterrupt>
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_RECEIVE_FROM_ISR( xStreamBuffer, xReceivedLength );

	return xReceivedLength;
 8105bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8105bde:	4618      	mov	r0, r3
 8105be0:	3728      	adds	r7, #40	@ 0x28
 8105be2:	46bd      	mov	sp, r7
 8105be4:	bd80      	pop	{r7, pc}

08105be6 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8105be6:	b580      	push	{r7, lr}
 8105be8:	b088      	sub	sp, #32
 8105bea:	af00      	add	r7, sp, #0
 8105bec:	60f8      	str	r0, [r7, #12]
 8105bee:	60b9      	str	r1, [r7, #8]
 8105bf0:	607a      	str	r2, [r7, #4]
 8105bf2:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8105bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105bf6:	2b00      	cmp	r3, #0
 8105bf8:	d019      	beq.n	8105c2e <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8105bfa:	68fb      	ldr	r3, [r7, #12]
 8105bfc:	681b      	ldr	r3, [r3, #0]
 8105bfe:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8105c00:	f107 0110 	add.w	r1, r7, #16
 8105c04:	683b      	ldr	r3, [r7, #0]
 8105c06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8105c08:	68f8      	ldr	r0, [r7, #12]
 8105c0a:	f000 f91b 	bl	8105e44 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8105c0e:	693b      	ldr	r3, [r7, #16]
 8105c10:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8105c12:	683a      	ldr	r2, [r7, #0]
 8105c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105c16:	1ad3      	subs	r3, r2, r3
 8105c18:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8105c1a:	69fa      	ldr	r2, [r7, #28]
 8105c1c:	687b      	ldr	r3, [r7, #4]
 8105c1e:	429a      	cmp	r2, r3
 8105c20:	d907      	bls.n	8105c32 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8105c22:	68fb      	ldr	r3, [r7, #12]
 8105c24:	69ba      	ldr	r2, [r7, #24]
 8105c26:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8105c28:	2300      	movs	r3, #0
 8105c2a:	61fb      	str	r3, [r7, #28]
 8105c2c:	e001      	b.n	8105c32 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8105c2e:	687b      	ldr	r3, [r7, #4]
 8105c30:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8105c32:	683b      	ldr	r3, [r7, #0]
 8105c34:	69fa      	ldr	r2, [r7, #28]
 8105c36:	68b9      	ldr	r1, [r7, #8]
 8105c38:	68f8      	ldr	r0, [r7, #12]
 8105c3a:	f000 f903 	bl	8105e44 <prvReadBytesFromBuffer>
 8105c3e:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8105c40:	697b      	ldr	r3, [r7, #20]
}
 8105c42:	4618      	mov	r0, r3
 8105c44:	3720      	adds	r7, #32
 8105c46:	46bd      	mov	sp, r7
 8105c48:	bd80      	pop	{r7, pc}

08105c4a <xStreamBufferSendCompletedFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
 8105c4a:	b580      	push	{r7, lr}
 8105c4c:	b08c      	sub	sp, #48	@ 0x30
 8105c4e:	af02      	add	r7, sp, #8
 8105c50:	6078      	str	r0, [r7, #4]
 8105c52:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8105c54:	687b      	ldr	r3, [r7, #4]
 8105c56:	623b      	str	r3, [r7, #32]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );
 8105c58:	6a3b      	ldr	r3, [r7, #32]
 8105c5a:	2b00      	cmp	r3, #0
 8105c5c:	d10b      	bne.n	8105c76 <xStreamBufferSendCompletedFromISR+0x2c>
	__asm volatile
 8105c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105c62:	f383 8811 	msr	BASEPRI, r3
 8105c66:	f3bf 8f6f 	isb	sy
 8105c6a:	f3bf 8f4f 	dsb	sy
 8105c6e:	61bb      	str	r3, [r7, #24]
}
 8105c70:	bf00      	nop
 8105c72:	bf00      	nop
 8105c74:	e7fd      	b.n	8105c72 <xStreamBufferSendCompletedFromISR+0x28>
	__asm volatile
 8105c76:	f3ef 8211 	mrs	r2, BASEPRI
 8105c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105c7e:	f383 8811 	msr	BASEPRI, r3
 8105c82:	f3bf 8f6f 	isb	sy
 8105c86:	f3bf 8f4f 	dsb	sy
 8105c8a:	617a      	str	r2, [r7, #20]
 8105c8c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8105c8e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 8105c90:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
 8105c92:	6a3b      	ldr	r3, [r7, #32]
 8105c94:	691b      	ldr	r3, [r3, #16]
 8105c96:	2b00      	cmp	r3, #0
 8105c98:	d00e      	beq.n	8105cb8 <xStreamBufferSendCompletedFromISR+0x6e>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
 8105c9a:	6a3b      	ldr	r3, [r7, #32]
 8105c9c:	6918      	ldr	r0, [r3, #16]
 8105c9e:	683b      	ldr	r3, [r7, #0]
 8105ca0:	9300      	str	r3, [sp, #0]
 8105ca2:	2300      	movs	r3, #0
 8105ca4:	2200      	movs	r2, #0
 8105ca6:	2100      	movs	r1, #0
 8105ca8:	f001 f8e6 	bl	8106e78 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
 8105cac:	6a3b      	ldr	r3, [r7, #32]
 8105cae:	2200      	movs	r2, #0
 8105cb0:	611a      	str	r2, [r3, #16]
			xReturn = pdTRUE;
 8105cb2:	2301      	movs	r3, #1
 8105cb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8105cb6:	e001      	b.n	8105cbc <xStreamBufferSendCompletedFromISR+0x72>
		}
		else
		{
			xReturn = pdFALSE;
 8105cb8:	2300      	movs	r3, #0
 8105cba:	627b      	str	r3, [r7, #36]	@ 0x24
 8105cbc:	69fb      	ldr	r3, [r7, #28]
 8105cbe:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8105cc0:	68fb      	ldr	r3, [r7, #12]
 8105cc2:	f383 8811 	msr	BASEPRI, r3
}
 8105cc6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8105cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8105cca:	4618      	mov	r0, r3
 8105ccc:	3728      	adds	r7, #40	@ 0x28
 8105cce:	46bd      	mov	sp, r7
 8105cd0:	bd80      	pop	{r7, pc}

08105cd2 <xStreamBufferReceiveCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
 8105cd2:	b580      	push	{r7, lr}
 8105cd4:	b08c      	sub	sp, #48	@ 0x30
 8105cd6:	af02      	add	r7, sp, #8
 8105cd8:	6078      	str	r0, [r7, #4]
 8105cda:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8105cdc:	687b      	ldr	r3, [r7, #4]
 8105cde:	623b      	str	r3, [r7, #32]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );
 8105ce0:	6a3b      	ldr	r3, [r7, #32]
 8105ce2:	2b00      	cmp	r3, #0
 8105ce4:	d10b      	bne.n	8105cfe <xStreamBufferReceiveCompletedFromISR+0x2c>
	__asm volatile
 8105ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105cea:	f383 8811 	msr	BASEPRI, r3
 8105cee:	f3bf 8f6f 	isb	sy
 8105cf2:	f3bf 8f4f 	dsb	sy
 8105cf6:	61bb      	str	r3, [r7, #24]
}
 8105cf8:	bf00      	nop
 8105cfa:	bf00      	nop
 8105cfc:	e7fd      	b.n	8105cfa <xStreamBufferReceiveCompletedFromISR+0x28>
	__asm volatile
 8105cfe:	f3ef 8211 	mrs	r2, BASEPRI
 8105d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105d06:	f383 8811 	msr	BASEPRI, r3
 8105d0a:	f3bf 8f6f 	isb	sy
 8105d0e:	f3bf 8f4f 	dsb	sy
 8105d12:	617a      	str	r2, [r7, #20]
 8105d14:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8105d16:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 8105d18:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
 8105d1a:	6a3b      	ldr	r3, [r7, #32]
 8105d1c:	695b      	ldr	r3, [r3, #20]
 8105d1e:	2b00      	cmp	r3, #0
 8105d20:	d00e      	beq.n	8105d40 <xStreamBufferReceiveCompletedFromISR+0x6e>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
 8105d22:	6a3b      	ldr	r3, [r7, #32]
 8105d24:	6958      	ldr	r0, [r3, #20]
 8105d26:	683b      	ldr	r3, [r7, #0]
 8105d28:	9300      	str	r3, [sp, #0]
 8105d2a:	2300      	movs	r3, #0
 8105d2c:	2200      	movs	r2, #0
 8105d2e:	2100      	movs	r1, #0
 8105d30:	f001 f8a2 	bl	8106e78 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToSend = NULL;
 8105d34:	6a3b      	ldr	r3, [r7, #32]
 8105d36:	2200      	movs	r2, #0
 8105d38:	615a      	str	r2, [r3, #20]
			xReturn = pdTRUE;
 8105d3a:	2301      	movs	r3, #1
 8105d3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8105d3e:	e001      	b.n	8105d44 <xStreamBufferReceiveCompletedFromISR+0x72>
		}
		else
		{
			xReturn = pdFALSE;
 8105d40:	2300      	movs	r3, #0
 8105d42:	627b      	str	r3, [r7, #36]	@ 0x24
 8105d44:	69fb      	ldr	r3, [r7, #28]
 8105d46:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8105d48:	68fb      	ldr	r3, [r7, #12]
 8105d4a:	f383 8811 	msr	BASEPRI, r3
}
 8105d4e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8105d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8105d52:	4618      	mov	r0, r3
 8105d54:	3728      	adds	r7, #40	@ 0x28
 8105d56:	46bd      	mov	sp, r7
 8105d58:	bd80      	pop	{r7, pc}

08105d5a <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8105d5a:	b580      	push	{r7, lr}
 8105d5c:	b08a      	sub	sp, #40	@ 0x28
 8105d5e:	af00      	add	r7, sp, #0
 8105d60:	60f8      	str	r0, [r7, #12]
 8105d62:	60b9      	str	r1, [r7, #8]
 8105d64:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8105d66:	687b      	ldr	r3, [r7, #4]
 8105d68:	2b00      	cmp	r3, #0
 8105d6a:	d10b      	bne.n	8105d84 <prvWriteBytesToBuffer+0x2a>
	__asm volatile
 8105d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105d70:	f383 8811 	msr	BASEPRI, r3
 8105d74:	f3bf 8f6f 	isb	sy
 8105d78:	f3bf 8f4f 	dsb	sy
 8105d7c:	61fb      	str	r3, [r7, #28]
}
 8105d7e:	bf00      	nop
 8105d80:	bf00      	nop
 8105d82:	e7fd      	b.n	8105d80 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 8105d84:	68fb      	ldr	r3, [r7, #12]
 8105d86:	685b      	ldr	r3, [r3, #4]
 8105d88:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8105d8a:	68fb      	ldr	r3, [r7, #12]
 8105d8c:	689a      	ldr	r2, [r3, #8]
 8105d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105d90:	1ad3      	subs	r3, r2, r3
 8105d92:	687a      	ldr	r2, [r7, #4]
 8105d94:	4293      	cmp	r3, r2
 8105d96:	bf28      	it	cs
 8105d98:	4613      	movcs	r3, r2
 8105d9a:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8105d9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8105d9e:	6a3b      	ldr	r3, [r7, #32]
 8105da0:	441a      	add	r2, r3
 8105da2:	68fb      	ldr	r3, [r7, #12]
 8105da4:	689b      	ldr	r3, [r3, #8]
 8105da6:	429a      	cmp	r2, r3
 8105da8:	d90b      	bls.n	8105dc2 <prvWriteBytesToBuffer+0x68>
	__asm volatile
 8105daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105dae:	f383 8811 	msr	BASEPRI, r3
 8105db2:	f3bf 8f6f 	isb	sy
 8105db6:	f3bf 8f4f 	dsb	sy
 8105dba:	61bb      	str	r3, [r7, #24]
}
 8105dbc:	bf00      	nop
 8105dbe:	bf00      	nop
 8105dc0:	e7fd      	b.n	8105dbe <prvWriteBytesToBuffer+0x64>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8105dc2:	68fb      	ldr	r3, [r7, #12]
 8105dc4:	699a      	ldr	r2, [r3, #24]
 8105dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105dc8:	4413      	add	r3, r2
 8105dca:	6a3a      	ldr	r2, [r7, #32]
 8105dcc:	68b9      	ldr	r1, [r7, #8]
 8105dce:	4618      	mov	r0, r3
 8105dd0:	f001 ffb0 	bl	8107d34 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8105dd4:	687a      	ldr	r2, [r7, #4]
 8105dd6:	6a3b      	ldr	r3, [r7, #32]
 8105dd8:	429a      	cmp	r2, r3
 8105dda:	d91d      	bls.n	8105e18 <prvWriteBytesToBuffer+0xbe>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8105ddc:	687a      	ldr	r2, [r7, #4]
 8105dde:	6a3b      	ldr	r3, [r7, #32]
 8105de0:	1ad2      	subs	r2, r2, r3
 8105de2:	68fb      	ldr	r3, [r7, #12]
 8105de4:	689b      	ldr	r3, [r3, #8]
 8105de6:	429a      	cmp	r2, r3
 8105de8:	d90b      	bls.n	8105e02 <prvWriteBytesToBuffer+0xa8>
	__asm volatile
 8105dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105dee:	f383 8811 	msr	BASEPRI, r3
 8105df2:	f3bf 8f6f 	isb	sy
 8105df6:	f3bf 8f4f 	dsb	sy
 8105dfa:	617b      	str	r3, [r7, #20]
}
 8105dfc:	bf00      	nop
 8105dfe:	bf00      	nop
 8105e00:	e7fd      	b.n	8105dfe <prvWriteBytesToBuffer+0xa4>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8105e02:	68fb      	ldr	r3, [r7, #12]
 8105e04:	6998      	ldr	r0, [r3, #24]
 8105e06:	68ba      	ldr	r2, [r7, #8]
 8105e08:	6a3b      	ldr	r3, [r7, #32]
 8105e0a:	18d1      	adds	r1, r2, r3
 8105e0c:	687a      	ldr	r2, [r7, #4]
 8105e0e:	6a3b      	ldr	r3, [r7, #32]
 8105e10:	1ad3      	subs	r3, r2, r3
 8105e12:	461a      	mov	r2, r3
 8105e14:	f001 ff8e 	bl	8107d34 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8105e18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8105e1a:	687b      	ldr	r3, [r7, #4]
 8105e1c:	4413      	add	r3, r2
 8105e1e:	627b      	str	r3, [r7, #36]	@ 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8105e20:	68fb      	ldr	r3, [r7, #12]
 8105e22:	689b      	ldr	r3, [r3, #8]
 8105e24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8105e26:	429a      	cmp	r2, r3
 8105e28:	d304      	bcc.n	8105e34 <prvWriteBytesToBuffer+0xda>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8105e2a:	68fb      	ldr	r3, [r7, #12]
 8105e2c:	689b      	ldr	r3, [r3, #8]
 8105e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8105e30:	1ad3      	subs	r3, r2, r3
 8105e32:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8105e34:	68fb      	ldr	r3, [r7, #12]
 8105e36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8105e38:	605a      	str	r2, [r3, #4]

	return xCount;
 8105e3a:	687b      	ldr	r3, [r7, #4]
}
 8105e3c:	4618      	mov	r0, r3
 8105e3e:	3728      	adds	r7, #40	@ 0x28
 8105e40:	46bd      	mov	sp, r7
 8105e42:	bd80      	pop	{r7, pc}

08105e44 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8105e44:	b580      	push	{r7, lr}
 8105e46:	b08a      	sub	sp, #40	@ 0x28
 8105e48:	af00      	add	r7, sp, #0
 8105e4a:	60f8      	str	r0, [r7, #12]
 8105e4c:	60b9      	str	r1, [r7, #8]
 8105e4e:	607a      	str	r2, [r7, #4]
 8105e50:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8105e52:	687a      	ldr	r2, [r7, #4]
 8105e54:	683b      	ldr	r3, [r7, #0]
 8105e56:	4293      	cmp	r3, r2
 8105e58:	bf28      	it	cs
 8105e5a:	4613      	movcs	r3, r2
 8105e5c:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8105e5e:	6a3b      	ldr	r3, [r7, #32]
 8105e60:	2b00      	cmp	r3, #0
 8105e62:	d067      	beq.n	8105f34 <prvReadBytesFromBuffer+0xf0>
	{
		xNextTail = pxStreamBuffer->xTail;
 8105e64:	68fb      	ldr	r3, [r7, #12]
 8105e66:	681b      	ldr	r3, [r3, #0]
 8105e68:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8105e6a:	68fb      	ldr	r3, [r7, #12]
 8105e6c:	689a      	ldr	r2, [r3, #8]
 8105e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105e70:	1ad3      	subs	r3, r2, r3
 8105e72:	6a3a      	ldr	r2, [r7, #32]
 8105e74:	4293      	cmp	r3, r2
 8105e76:	bf28      	it	cs
 8105e78:	4613      	movcs	r3, r2
 8105e7a:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8105e7c:	69fa      	ldr	r2, [r7, #28]
 8105e7e:	687b      	ldr	r3, [r7, #4]
 8105e80:	429a      	cmp	r2, r3
 8105e82:	d90b      	bls.n	8105e9c <prvReadBytesFromBuffer+0x58>
	__asm volatile
 8105e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105e88:	f383 8811 	msr	BASEPRI, r3
 8105e8c:	f3bf 8f6f 	isb	sy
 8105e90:	f3bf 8f4f 	dsb	sy
 8105e94:	61bb      	str	r3, [r7, #24]
}
 8105e96:	bf00      	nop
 8105e98:	bf00      	nop
 8105e9a:	e7fd      	b.n	8105e98 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8105e9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8105e9e:	69fb      	ldr	r3, [r7, #28]
 8105ea0:	441a      	add	r2, r3
 8105ea2:	68fb      	ldr	r3, [r7, #12]
 8105ea4:	689b      	ldr	r3, [r3, #8]
 8105ea6:	429a      	cmp	r2, r3
 8105ea8:	d90b      	bls.n	8105ec2 <prvReadBytesFromBuffer+0x7e>
	__asm volatile
 8105eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105eae:	f383 8811 	msr	BASEPRI, r3
 8105eb2:	f3bf 8f6f 	isb	sy
 8105eb6:	f3bf 8f4f 	dsb	sy
 8105eba:	617b      	str	r3, [r7, #20]
}
 8105ebc:	bf00      	nop
 8105ebe:	bf00      	nop
 8105ec0:	e7fd      	b.n	8105ebe <prvReadBytesFromBuffer+0x7a>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8105ec2:	68fb      	ldr	r3, [r7, #12]
 8105ec4:	699a      	ldr	r2, [r3, #24]
 8105ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105ec8:	4413      	add	r3, r2
 8105eca:	69fa      	ldr	r2, [r7, #28]
 8105ecc:	4619      	mov	r1, r3
 8105ece:	68b8      	ldr	r0, [r7, #8]
 8105ed0:	f001 ff30 	bl	8107d34 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8105ed4:	6a3a      	ldr	r2, [r7, #32]
 8105ed6:	69fb      	ldr	r3, [r7, #28]
 8105ed8:	429a      	cmp	r2, r3
 8105eda:	d91a      	bls.n	8105f12 <prvReadBytesFromBuffer+0xce>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8105edc:	6a3a      	ldr	r2, [r7, #32]
 8105ede:	687b      	ldr	r3, [r7, #4]
 8105ee0:	429a      	cmp	r2, r3
 8105ee2:	d90b      	bls.n	8105efc <prvReadBytesFromBuffer+0xb8>
	__asm volatile
 8105ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105ee8:	f383 8811 	msr	BASEPRI, r3
 8105eec:	f3bf 8f6f 	isb	sy
 8105ef0:	f3bf 8f4f 	dsb	sy
 8105ef4:	613b      	str	r3, [r7, #16]
}
 8105ef6:	bf00      	nop
 8105ef8:	bf00      	nop
 8105efa:	e7fd      	b.n	8105ef8 <prvReadBytesFromBuffer+0xb4>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8105efc:	68ba      	ldr	r2, [r7, #8]
 8105efe:	69fb      	ldr	r3, [r7, #28]
 8105f00:	18d0      	adds	r0, r2, r3
 8105f02:	68fb      	ldr	r3, [r7, #12]
 8105f04:	6999      	ldr	r1, [r3, #24]
 8105f06:	6a3a      	ldr	r2, [r7, #32]
 8105f08:	69fb      	ldr	r3, [r7, #28]
 8105f0a:	1ad3      	subs	r3, r2, r3
 8105f0c:	461a      	mov	r2, r3
 8105f0e:	f001 ff11 	bl	8107d34 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 8105f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8105f14:	6a3b      	ldr	r3, [r7, #32]
 8105f16:	4413      	add	r3, r2
 8105f18:	627b      	str	r3, [r7, #36]	@ 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8105f1a:	68fb      	ldr	r3, [r7, #12]
 8105f1c:	689b      	ldr	r3, [r3, #8]
 8105f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8105f20:	429a      	cmp	r2, r3
 8105f22:	d304      	bcc.n	8105f2e <prvReadBytesFromBuffer+0xea>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8105f24:	68fb      	ldr	r3, [r7, #12]
 8105f26:	689b      	ldr	r3, [r3, #8]
 8105f28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8105f2a:	1ad3      	subs	r3, r2, r3
 8105f2c:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8105f2e:	68fb      	ldr	r3, [r7, #12]
 8105f30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8105f32:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8105f34:	6a3b      	ldr	r3, [r7, #32]
}
 8105f36:	4618      	mov	r0, r3
 8105f38:	3728      	adds	r7, #40	@ 0x28
 8105f3a:	46bd      	mov	sp, r7
 8105f3c:	bd80      	pop	{r7, pc}

08105f3e <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8105f3e:	b480      	push	{r7}
 8105f40:	b085      	sub	sp, #20
 8105f42:	af00      	add	r7, sp, #0
 8105f44:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8105f46:	687b      	ldr	r3, [r7, #4]
 8105f48:	689a      	ldr	r2, [r3, #8]
 8105f4a:	687b      	ldr	r3, [r7, #4]
 8105f4c:	685b      	ldr	r3, [r3, #4]
 8105f4e:	4413      	add	r3, r2
 8105f50:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8105f52:	687b      	ldr	r3, [r7, #4]
 8105f54:	681b      	ldr	r3, [r3, #0]
 8105f56:	68fa      	ldr	r2, [r7, #12]
 8105f58:	1ad3      	subs	r3, r2, r3
 8105f5a:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8105f5c:	687b      	ldr	r3, [r7, #4]
 8105f5e:	689b      	ldr	r3, [r3, #8]
 8105f60:	68fa      	ldr	r2, [r7, #12]
 8105f62:	429a      	cmp	r2, r3
 8105f64:	d304      	bcc.n	8105f70 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8105f66:	687b      	ldr	r3, [r7, #4]
 8105f68:	689b      	ldr	r3, [r3, #8]
 8105f6a:	68fa      	ldr	r2, [r7, #12]
 8105f6c:	1ad3      	subs	r3, r2, r3
 8105f6e:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8105f70:	68fb      	ldr	r3, [r7, #12]
}
 8105f72:	4618      	mov	r0, r3
 8105f74:	3714      	adds	r7, #20
 8105f76:	46bd      	mov	sp, r7
 8105f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f7c:	4770      	bx	lr

08105f7e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8105f7e:	b580      	push	{r7, lr}
 8105f80:	b08e      	sub	sp, #56	@ 0x38
 8105f82:	af04      	add	r7, sp, #16
 8105f84:	60f8      	str	r0, [r7, #12]
 8105f86:	60b9      	str	r1, [r7, #8]
 8105f88:	607a      	str	r2, [r7, #4]
 8105f8a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8105f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105f8e:	2b00      	cmp	r3, #0
 8105f90:	d10b      	bne.n	8105faa <xTaskCreateStatic+0x2c>
	__asm volatile
 8105f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105f96:	f383 8811 	msr	BASEPRI, r3
 8105f9a:	f3bf 8f6f 	isb	sy
 8105f9e:	f3bf 8f4f 	dsb	sy
 8105fa2:	623b      	str	r3, [r7, #32]
}
 8105fa4:	bf00      	nop
 8105fa6:	bf00      	nop
 8105fa8:	e7fd      	b.n	8105fa6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8105faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105fac:	2b00      	cmp	r3, #0
 8105fae:	d10b      	bne.n	8105fc8 <xTaskCreateStatic+0x4a>
	__asm volatile
 8105fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105fb4:	f383 8811 	msr	BASEPRI, r3
 8105fb8:	f3bf 8f6f 	isb	sy
 8105fbc:	f3bf 8f4f 	dsb	sy
 8105fc0:	61fb      	str	r3, [r7, #28]
}
 8105fc2:	bf00      	nop
 8105fc4:	bf00      	nop
 8105fc6:	e7fd      	b.n	8105fc4 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8105fc8:	23a8      	movs	r3, #168	@ 0xa8
 8105fca:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8105fcc:	693b      	ldr	r3, [r7, #16]
 8105fce:	2ba8      	cmp	r3, #168	@ 0xa8
 8105fd0:	d00b      	beq.n	8105fea <xTaskCreateStatic+0x6c>
	__asm volatile
 8105fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105fd6:	f383 8811 	msr	BASEPRI, r3
 8105fda:	f3bf 8f6f 	isb	sy
 8105fde:	f3bf 8f4f 	dsb	sy
 8105fe2:	61bb      	str	r3, [r7, #24]
}
 8105fe4:	bf00      	nop
 8105fe6:	bf00      	nop
 8105fe8:	e7fd      	b.n	8105fe6 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8105fea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8105fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105fee:	2b00      	cmp	r3, #0
 8105ff0:	d01e      	beq.n	8106030 <xTaskCreateStatic+0xb2>
 8105ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105ff4:	2b00      	cmp	r3, #0
 8105ff6:	d01b      	beq.n	8106030 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8105ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105ffa:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8105ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105ffe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8106000:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8106002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106004:	2202      	movs	r2, #2
 8106006:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 810600a:	2300      	movs	r3, #0
 810600c:	9303      	str	r3, [sp, #12]
 810600e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106010:	9302      	str	r3, [sp, #8]
 8106012:	f107 0314 	add.w	r3, r7, #20
 8106016:	9301      	str	r3, [sp, #4]
 8106018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810601a:	9300      	str	r3, [sp, #0]
 810601c:	683b      	ldr	r3, [r7, #0]
 810601e:	687a      	ldr	r2, [r7, #4]
 8106020:	68b9      	ldr	r1, [r7, #8]
 8106022:	68f8      	ldr	r0, [r7, #12]
 8106024:	f000 f850 	bl	81060c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8106028:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810602a:	f000 f8f5 	bl	8106218 <prvAddNewTaskToReadyList>
 810602e:	e001      	b.n	8106034 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8106030:	2300      	movs	r3, #0
 8106032:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8106034:	697b      	ldr	r3, [r7, #20]
	}
 8106036:	4618      	mov	r0, r3
 8106038:	3728      	adds	r7, #40	@ 0x28
 810603a:	46bd      	mov	sp, r7
 810603c:	bd80      	pop	{r7, pc}

0810603e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 810603e:	b580      	push	{r7, lr}
 8106040:	b08c      	sub	sp, #48	@ 0x30
 8106042:	af04      	add	r7, sp, #16
 8106044:	60f8      	str	r0, [r7, #12]
 8106046:	60b9      	str	r1, [r7, #8]
 8106048:	603b      	str	r3, [r7, #0]
 810604a:	4613      	mov	r3, r2
 810604c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 810604e:	88fb      	ldrh	r3, [r7, #6]
 8106050:	009b      	lsls	r3, r3, #2
 8106052:	4618      	mov	r0, r3
 8106054:	f7fe f9a4 	bl	81043a0 <pvPortMalloc>
 8106058:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 810605a:	697b      	ldr	r3, [r7, #20]
 810605c:	2b00      	cmp	r3, #0
 810605e:	d00e      	beq.n	810607e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8106060:	20a8      	movs	r0, #168	@ 0xa8
 8106062:	f7fe f99d 	bl	81043a0 <pvPortMalloc>
 8106066:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8106068:	69fb      	ldr	r3, [r7, #28]
 810606a:	2b00      	cmp	r3, #0
 810606c:	d003      	beq.n	8106076 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 810606e:	69fb      	ldr	r3, [r7, #28]
 8106070:	697a      	ldr	r2, [r7, #20]
 8106072:	631a      	str	r2, [r3, #48]	@ 0x30
 8106074:	e005      	b.n	8106082 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8106076:	6978      	ldr	r0, [r7, #20]
 8106078:	f7fe fa60 	bl	810453c <vPortFree>
 810607c:	e001      	b.n	8106082 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 810607e:	2300      	movs	r3, #0
 8106080:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8106082:	69fb      	ldr	r3, [r7, #28]
 8106084:	2b00      	cmp	r3, #0
 8106086:	d017      	beq.n	81060b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8106088:	69fb      	ldr	r3, [r7, #28]
 810608a:	2200      	movs	r2, #0
 810608c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8106090:	88fa      	ldrh	r2, [r7, #6]
 8106092:	2300      	movs	r3, #0
 8106094:	9303      	str	r3, [sp, #12]
 8106096:	69fb      	ldr	r3, [r7, #28]
 8106098:	9302      	str	r3, [sp, #8]
 810609a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810609c:	9301      	str	r3, [sp, #4]
 810609e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81060a0:	9300      	str	r3, [sp, #0]
 81060a2:	683b      	ldr	r3, [r7, #0]
 81060a4:	68b9      	ldr	r1, [r7, #8]
 81060a6:	68f8      	ldr	r0, [r7, #12]
 81060a8:	f000 f80e 	bl	81060c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 81060ac:	69f8      	ldr	r0, [r7, #28]
 81060ae:	f000 f8b3 	bl	8106218 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 81060b2:	2301      	movs	r3, #1
 81060b4:	61bb      	str	r3, [r7, #24]
 81060b6:	e002      	b.n	81060be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 81060b8:	f04f 33ff 	mov.w	r3, #4294967295
 81060bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 81060be:	69bb      	ldr	r3, [r7, #24]
	}
 81060c0:	4618      	mov	r0, r3
 81060c2:	3720      	adds	r7, #32
 81060c4:	46bd      	mov	sp, r7
 81060c6:	bd80      	pop	{r7, pc}

081060c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 81060c8:	b580      	push	{r7, lr}
 81060ca:	b088      	sub	sp, #32
 81060cc:	af00      	add	r7, sp, #0
 81060ce:	60f8      	str	r0, [r7, #12]
 81060d0:	60b9      	str	r1, [r7, #8]
 81060d2:	607a      	str	r2, [r7, #4]
 81060d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 81060d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81060d8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 81060da:	687b      	ldr	r3, [r7, #4]
 81060dc:	009b      	lsls	r3, r3, #2
 81060de:	461a      	mov	r2, r3
 81060e0:	21a5      	movs	r1, #165	@ 0xa5
 81060e2:	f001 fd49 	bl	8107b78 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 81060e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81060e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 81060ea:	687b      	ldr	r3, [r7, #4]
 81060ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 81060f0:	3b01      	subs	r3, #1
 81060f2:	009b      	lsls	r3, r3, #2
 81060f4:	4413      	add	r3, r2
 81060f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 81060f8:	69bb      	ldr	r3, [r7, #24]
 81060fa:	f023 0307 	bic.w	r3, r3, #7
 81060fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8106100:	69bb      	ldr	r3, [r7, #24]
 8106102:	f003 0307 	and.w	r3, r3, #7
 8106106:	2b00      	cmp	r3, #0
 8106108:	d00b      	beq.n	8106122 <prvInitialiseNewTask+0x5a>
	__asm volatile
 810610a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810610e:	f383 8811 	msr	BASEPRI, r3
 8106112:	f3bf 8f6f 	isb	sy
 8106116:	f3bf 8f4f 	dsb	sy
 810611a:	617b      	str	r3, [r7, #20]
}
 810611c:	bf00      	nop
 810611e:	bf00      	nop
 8106120:	e7fd      	b.n	810611e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8106122:	68bb      	ldr	r3, [r7, #8]
 8106124:	2b00      	cmp	r3, #0
 8106126:	d01f      	beq.n	8106168 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8106128:	2300      	movs	r3, #0
 810612a:	61fb      	str	r3, [r7, #28]
 810612c:	e012      	b.n	8106154 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 810612e:	68ba      	ldr	r2, [r7, #8]
 8106130:	69fb      	ldr	r3, [r7, #28]
 8106132:	4413      	add	r3, r2
 8106134:	7819      	ldrb	r1, [r3, #0]
 8106136:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8106138:	69fb      	ldr	r3, [r7, #28]
 810613a:	4413      	add	r3, r2
 810613c:	3334      	adds	r3, #52	@ 0x34
 810613e:	460a      	mov	r2, r1
 8106140:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8106142:	68ba      	ldr	r2, [r7, #8]
 8106144:	69fb      	ldr	r3, [r7, #28]
 8106146:	4413      	add	r3, r2
 8106148:	781b      	ldrb	r3, [r3, #0]
 810614a:	2b00      	cmp	r3, #0
 810614c:	d006      	beq.n	810615c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810614e:	69fb      	ldr	r3, [r7, #28]
 8106150:	3301      	adds	r3, #1
 8106152:	61fb      	str	r3, [r7, #28]
 8106154:	69fb      	ldr	r3, [r7, #28]
 8106156:	2b0f      	cmp	r3, #15
 8106158:	d9e9      	bls.n	810612e <prvInitialiseNewTask+0x66>
 810615a:	e000      	b.n	810615e <prvInitialiseNewTask+0x96>
			{
				break;
 810615c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 810615e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106160:	2200      	movs	r2, #0
 8106162:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8106166:	e003      	b.n	8106170 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8106168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810616a:	2200      	movs	r2, #0
 810616c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8106170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106172:	2b37      	cmp	r3, #55	@ 0x37
 8106174:	d901      	bls.n	810617a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8106176:	2337      	movs	r3, #55	@ 0x37
 8106178:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 810617a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810617c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810617e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8106180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106182:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8106184:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8106186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106188:	2200      	movs	r2, #0
 810618a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 810618c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810618e:	3304      	adds	r3, #4
 8106190:	4618      	mov	r0, r3
 8106192:	f7fe fb13 	bl	81047bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8106196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106198:	3318      	adds	r3, #24
 810619a:	4618      	mov	r0, r3
 810619c:	f7fe fb0e 	bl	81047bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 81061a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81061a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81061a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81061a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81061a8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 81061ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81061ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 81061b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81061b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81061b4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 81061b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81061b8:	2200      	movs	r2, #0
 81061ba:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 81061be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81061c0:	2200      	movs	r2, #0
 81061c2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 81061c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81061c8:	3354      	adds	r3, #84	@ 0x54
 81061ca:	224c      	movs	r2, #76	@ 0x4c
 81061cc:	2100      	movs	r1, #0
 81061ce:	4618      	mov	r0, r3
 81061d0:	f001 fcd2 	bl	8107b78 <memset>
 81061d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81061d6:	4a0d      	ldr	r2, [pc, #52]	@ (810620c <prvInitialiseNewTask+0x144>)
 81061d8:	659a      	str	r2, [r3, #88]	@ 0x58
 81061da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81061dc:	4a0c      	ldr	r2, [pc, #48]	@ (8106210 <prvInitialiseNewTask+0x148>)
 81061de:	65da      	str	r2, [r3, #92]	@ 0x5c
 81061e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81061e2:	4a0c      	ldr	r2, [pc, #48]	@ (8106214 <prvInitialiseNewTask+0x14c>)
 81061e4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 81061e6:	683a      	ldr	r2, [r7, #0]
 81061e8:	68f9      	ldr	r1, [r7, #12]
 81061ea:	69b8      	ldr	r0, [r7, #24]
 81061ec:	f7fe fb7a 	bl	81048e4 <pxPortInitialiseStack>
 81061f0:	4602      	mov	r2, r0
 81061f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81061f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 81061f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81061f8:	2b00      	cmp	r3, #0
 81061fa:	d002      	beq.n	8106202 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 81061fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81061fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8106200:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8106202:	bf00      	nop
 8106204:	3720      	adds	r7, #32
 8106206:	46bd      	mov	sp, r7
 8106208:	bd80      	pop	{r7, pc}
 810620a:	bf00      	nop
 810620c:	10004ad8 	.word	0x10004ad8
 8106210:	10004b40 	.word	0x10004b40
 8106214:	10004ba8 	.word	0x10004ba8

08106218 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8106218:	b580      	push	{r7, lr}
 810621a:	b082      	sub	sp, #8
 810621c:	af00      	add	r7, sp, #0
 810621e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8106220:	f7fe fc92 	bl	8104b48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8106224:	4b2d      	ldr	r3, [pc, #180]	@ (81062dc <prvAddNewTaskToReadyList+0xc4>)
 8106226:	681b      	ldr	r3, [r3, #0]
 8106228:	3301      	adds	r3, #1
 810622a:	4a2c      	ldr	r2, [pc, #176]	@ (81062dc <prvAddNewTaskToReadyList+0xc4>)
 810622c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 810622e:	4b2c      	ldr	r3, [pc, #176]	@ (81062e0 <prvAddNewTaskToReadyList+0xc8>)
 8106230:	681b      	ldr	r3, [r3, #0]
 8106232:	2b00      	cmp	r3, #0
 8106234:	d109      	bne.n	810624a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8106236:	4a2a      	ldr	r2, [pc, #168]	@ (81062e0 <prvAddNewTaskToReadyList+0xc8>)
 8106238:	687b      	ldr	r3, [r7, #4]
 810623a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 810623c:	4b27      	ldr	r3, [pc, #156]	@ (81062dc <prvAddNewTaskToReadyList+0xc4>)
 810623e:	681b      	ldr	r3, [r3, #0]
 8106240:	2b01      	cmp	r3, #1
 8106242:	d110      	bne.n	8106266 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8106244:	f000 fc56 	bl	8106af4 <prvInitialiseTaskLists>
 8106248:	e00d      	b.n	8106266 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 810624a:	4b26      	ldr	r3, [pc, #152]	@ (81062e4 <prvAddNewTaskToReadyList+0xcc>)
 810624c:	681b      	ldr	r3, [r3, #0]
 810624e:	2b00      	cmp	r3, #0
 8106250:	d109      	bne.n	8106266 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8106252:	4b23      	ldr	r3, [pc, #140]	@ (81062e0 <prvAddNewTaskToReadyList+0xc8>)
 8106254:	681b      	ldr	r3, [r3, #0]
 8106256:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8106258:	687b      	ldr	r3, [r7, #4]
 810625a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810625c:	429a      	cmp	r2, r3
 810625e:	d802      	bhi.n	8106266 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8106260:	4a1f      	ldr	r2, [pc, #124]	@ (81062e0 <prvAddNewTaskToReadyList+0xc8>)
 8106262:	687b      	ldr	r3, [r7, #4]
 8106264:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8106266:	4b20      	ldr	r3, [pc, #128]	@ (81062e8 <prvAddNewTaskToReadyList+0xd0>)
 8106268:	681b      	ldr	r3, [r3, #0]
 810626a:	3301      	adds	r3, #1
 810626c:	4a1e      	ldr	r2, [pc, #120]	@ (81062e8 <prvAddNewTaskToReadyList+0xd0>)
 810626e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8106270:	4b1d      	ldr	r3, [pc, #116]	@ (81062e8 <prvAddNewTaskToReadyList+0xd0>)
 8106272:	681a      	ldr	r2, [r3, #0]
 8106274:	687b      	ldr	r3, [r7, #4]
 8106276:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8106278:	687b      	ldr	r3, [r7, #4]
 810627a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810627c:	4b1b      	ldr	r3, [pc, #108]	@ (81062ec <prvAddNewTaskToReadyList+0xd4>)
 810627e:	681b      	ldr	r3, [r3, #0]
 8106280:	429a      	cmp	r2, r3
 8106282:	d903      	bls.n	810628c <prvAddNewTaskToReadyList+0x74>
 8106284:	687b      	ldr	r3, [r7, #4]
 8106286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106288:	4a18      	ldr	r2, [pc, #96]	@ (81062ec <prvAddNewTaskToReadyList+0xd4>)
 810628a:	6013      	str	r3, [r2, #0]
 810628c:	687b      	ldr	r3, [r7, #4]
 810628e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8106290:	4613      	mov	r3, r2
 8106292:	009b      	lsls	r3, r3, #2
 8106294:	4413      	add	r3, r2
 8106296:	009b      	lsls	r3, r3, #2
 8106298:	4a15      	ldr	r2, [pc, #84]	@ (81062f0 <prvAddNewTaskToReadyList+0xd8>)
 810629a:	441a      	add	r2, r3
 810629c:	687b      	ldr	r3, [r7, #4]
 810629e:	3304      	adds	r3, #4
 81062a0:	4619      	mov	r1, r3
 81062a2:	4610      	mov	r0, r2
 81062a4:	f7fe fa97 	bl	81047d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 81062a8:	f7fe fc80 	bl	8104bac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 81062ac:	4b0d      	ldr	r3, [pc, #52]	@ (81062e4 <prvAddNewTaskToReadyList+0xcc>)
 81062ae:	681b      	ldr	r3, [r3, #0]
 81062b0:	2b00      	cmp	r3, #0
 81062b2:	d00e      	beq.n	81062d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 81062b4:	4b0a      	ldr	r3, [pc, #40]	@ (81062e0 <prvAddNewTaskToReadyList+0xc8>)
 81062b6:	681b      	ldr	r3, [r3, #0]
 81062b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81062ba:	687b      	ldr	r3, [r7, #4]
 81062bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81062be:	429a      	cmp	r2, r3
 81062c0:	d207      	bcs.n	81062d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 81062c2:	4b0c      	ldr	r3, [pc, #48]	@ (81062f4 <prvAddNewTaskToReadyList+0xdc>)
 81062c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81062c8:	601a      	str	r2, [r3, #0]
 81062ca:	f3bf 8f4f 	dsb	sy
 81062ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 81062d2:	bf00      	nop
 81062d4:	3708      	adds	r7, #8
 81062d6:	46bd      	mov	sp, r7
 81062d8:	bd80      	pop	{r7, pc}
 81062da:	bf00      	nop
 81062dc:	10004974 	.word	0x10004974
 81062e0:	100044a0 	.word	0x100044a0
 81062e4:	10004980 	.word	0x10004980
 81062e8:	10004990 	.word	0x10004990
 81062ec:	1000497c 	.word	0x1000497c
 81062f0:	100044a4 	.word	0x100044a4
 81062f4:	e000ed04 	.word	0xe000ed04

081062f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 81062f8:	b580      	push	{r7, lr}
 81062fa:	b084      	sub	sp, #16
 81062fc:	af00      	add	r7, sp, #0
 81062fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8106300:	2300      	movs	r3, #0
 8106302:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8106304:	687b      	ldr	r3, [r7, #4]
 8106306:	2b00      	cmp	r3, #0
 8106308:	d018      	beq.n	810633c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 810630a:	4b14      	ldr	r3, [pc, #80]	@ (810635c <vTaskDelay+0x64>)
 810630c:	681b      	ldr	r3, [r3, #0]
 810630e:	2b00      	cmp	r3, #0
 8106310:	d00b      	beq.n	810632a <vTaskDelay+0x32>
	__asm volatile
 8106312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106316:	f383 8811 	msr	BASEPRI, r3
 810631a:	f3bf 8f6f 	isb	sy
 810631e:	f3bf 8f4f 	dsb	sy
 8106322:	60bb      	str	r3, [r7, #8]
}
 8106324:	bf00      	nop
 8106326:	bf00      	nop
 8106328:	e7fd      	b.n	8106326 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 810632a:	f000 f88b 	bl	8106444 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 810632e:	2100      	movs	r1, #0
 8106330:	6878      	ldr	r0, [r7, #4]
 8106332:	f000 fead 	bl	8107090 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8106336:	f000 f893 	bl	8106460 <xTaskResumeAll>
 810633a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 810633c:	68fb      	ldr	r3, [r7, #12]
 810633e:	2b00      	cmp	r3, #0
 8106340:	d107      	bne.n	8106352 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8106342:	4b07      	ldr	r3, [pc, #28]	@ (8106360 <vTaskDelay+0x68>)
 8106344:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8106348:	601a      	str	r2, [r3, #0]
 810634a:	f3bf 8f4f 	dsb	sy
 810634e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8106352:	bf00      	nop
 8106354:	3710      	adds	r7, #16
 8106356:	46bd      	mov	sp, r7
 8106358:	bd80      	pop	{r7, pc}
 810635a:	bf00      	nop
 810635c:	1000499c 	.word	0x1000499c
 8106360:	e000ed04 	.word	0xe000ed04

08106364 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8106364:	b580      	push	{r7, lr}
 8106366:	b08a      	sub	sp, #40	@ 0x28
 8106368:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 810636a:	2300      	movs	r3, #0
 810636c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 810636e:	2300      	movs	r3, #0
 8106370:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8106372:	463a      	mov	r2, r7
 8106374:	1d39      	adds	r1, r7, #4
 8106376:	f107 0308 	add.w	r3, r7, #8
 810637a:	4618      	mov	r0, r3
 810637c:	f7fd ffdc 	bl	8104338 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8106380:	6839      	ldr	r1, [r7, #0]
 8106382:	687b      	ldr	r3, [r7, #4]
 8106384:	68ba      	ldr	r2, [r7, #8]
 8106386:	9202      	str	r2, [sp, #8]
 8106388:	9301      	str	r3, [sp, #4]
 810638a:	2300      	movs	r3, #0
 810638c:	9300      	str	r3, [sp, #0]
 810638e:	2300      	movs	r3, #0
 8106390:	460a      	mov	r2, r1
 8106392:	4924      	ldr	r1, [pc, #144]	@ (8106424 <vTaskStartScheduler+0xc0>)
 8106394:	4824      	ldr	r0, [pc, #144]	@ (8106428 <vTaskStartScheduler+0xc4>)
 8106396:	f7ff fdf2 	bl	8105f7e <xTaskCreateStatic>
 810639a:	4603      	mov	r3, r0
 810639c:	4a23      	ldr	r2, [pc, #140]	@ (810642c <vTaskStartScheduler+0xc8>)
 810639e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 81063a0:	4b22      	ldr	r3, [pc, #136]	@ (810642c <vTaskStartScheduler+0xc8>)
 81063a2:	681b      	ldr	r3, [r3, #0]
 81063a4:	2b00      	cmp	r3, #0
 81063a6:	d002      	beq.n	81063ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 81063a8:	2301      	movs	r3, #1
 81063aa:	617b      	str	r3, [r7, #20]
 81063ac:	e001      	b.n	81063b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 81063ae:	2300      	movs	r3, #0
 81063b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 81063b2:	697b      	ldr	r3, [r7, #20]
 81063b4:	2b01      	cmp	r3, #1
 81063b6:	d102      	bne.n	81063be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 81063b8:	f000 febe 	bl	8107138 <xTimerCreateTimerTask>
 81063bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 81063be:	697b      	ldr	r3, [r7, #20]
 81063c0:	2b01      	cmp	r3, #1
 81063c2:	d11b      	bne.n	81063fc <vTaskStartScheduler+0x98>
	__asm volatile
 81063c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81063c8:	f383 8811 	msr	BASEPRI, r3
 81063cc:	f3bf 8f6f 	isb	sy
 81063d0:	f3bf 8f4f 	dsb	sy
 81063d4:	613b      	str	r3, [r7, #16]
}
 81063d6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 81063d8:	4b15      	ldr	r3, [pc, #84]	@ (8106430 <vTaskStartScheduler+0xcc>)
 81063da:	681b      	ldr	r3, [r3, #0]
 81063dc:	3354      	adds	r3, #84	@ 0x54
 81063de:	4a15      	ldr	r2, [pc, #84]	@ (8106434 <vTaskStartScheduler+0xd0>)
 81063e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 81063e2:	4b15      	ldr	r3, [pc, #84]	@ (8106438 <vTaskStartScheduler+0xd4>)
 81063e4:	f04f 32ff 	mov.w	r2, #4294967295
 81063e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 81063ea:	4b14      	ldr	r3, [pc, #80]	@ (810643c <vTaskStartScheduler+0xd8>)
 81063ec:	2201      	movs	r2, #1
 81063ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 81063f0:	4b13      	ldr	r3, [pc, #76]	@ (8106440 <vTaskStartScheduler+0xdc>)
 81063f2:	2200      	movs	r2, #0
 81063f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 81063f6:	f7fe fb03 	bl	8104a00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 81063fa:	e00f      	b.n	810641c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 81063fc:	697b      	ldr	r3, [r7, #20]
 81063fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106402:	d10b      	bne.n	810641c <vTaskStartScheduler+0xb8>
	__asm volatile
 8106404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106408:	f383 8811 	msr	BASEPRI, r3
 810640c:	f3bf 8f6f 	isb	sy
 8106410:	f3bf 8f4f 	dsb	sy
 8106414:	60fb      	str	r3, [r7, #12]
}
 8106416:	bf00      	nop
 8106418:	bf00      	nop
 810641a:	e7fd      	b.n	8106418 <vTaskStartScheduler+0xb4>
}
 810641c:	bf00      	nop
 810641e:	3718      	adds	r7, #24
 8106420:	46bd      	mov	sp, r7
 8106422:	bd80      	pop	{r7, pc}
 8106424:	08107e38 	.word	0x08107e38
 8106428:	08106ac5 	.word	0x08106ac5
 810642c:	10004998 	.word	0x10004998
 8106430:	100044a0 	.word	0x100044a0
 8106434:	10000014 	.word	0x10000014
 8106438:	10004994 	.word	0x10004994
 810643c:	10004980 	.word	0x10004980
 8106440:	10004978 	.word	0x10004978

08106444 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8106444:	b480      	push	{r7}
 8106446:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8106448:	4b04      	ldr	r3, [pc, #16]	@ (810645c <vTaskSuspendAll+0x18>)
 810644a:	681b      	ldr	r3, [r3, #0]
 810644c:	3301      	adds	r3, #1
 810644e:	4a03      	ldr	r2, [pc, #12]	@ (810645c <vTaskSuspendAll+0x18>)
 8106450:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8106452:	bf00      	nop
 8106454:	46bd      	mov	sp, r7
 8106456:	f85d 7b04 	ldr.w	r7, [sp], #4
 810645a:	4770      	bx	lr
 810645c:	1000499c 	.word	0x1000499c

08106460 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8106460:	b580      	push	{r7, lr}
 8106462:	b084      	sub	sp, #16
 8106464:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8106466:	2300      	movs	r3, #0
 8106468:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810646a:	2300      	movs	r3, #0
 810646c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 810646e:	4b42      	ldr	r3, [pc, #264]	@ (8106578 <xTaskResumeAll+0x118>)
 8106470:	681b      	ldr	r3, [r3, #0]
 8106472:	2b00      	cmp	r3, #0
 8106474:	d10b      	bne.n	810648e <xTaskResumeAll+0x2e>
	__asm volatile
 8106476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810647a:	f383 8811 	msr	BASEPRI, r3
 810647e:	f3bf 8f6f 	isb	sy
 8106482:	f3bf 8f4f 	dsb	sy
 8106486:	603b      	str	r3, [r7, #0]
}
 8106488:	bf00      	nop
 810648a:	bf00      	nop
 810648c:	e7fd      	b.n	810648a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 810648e:	f7fe fb5b 	bl	8104b48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8106492:	4b39      	ldr	r3, [pc, #228]	@ (8106578 <xTaskResumeAll+0x118>)
 8106494:	681b      	ldr	r3, [r3, #0]
 8106496:	3b01      	subs	r3, #1
 8106498:	4a37      	ldr	r2, [pc, #220]	@ (8106578 <xTaskResumeAll+0x118>)
 810649a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810649c:	4b36      	ldr	r3, [pc, #216]	@ (8106578 <xTaskResumeAll+0x118>)
 810649e:	681b      	ldr	r3, [r3, #0]
 81064a0:	2b00      	cmp	r3, #0
 81064a2:	d162      	bne.n	810656a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 81064a4:	4b35      	ldr	r3, [pc, #212]	@ (810657c <xTaskResumeAll+0x11c>)
 81064a6:	681b      	ldr	r3, [r3, #0]
 81064a8:	2b00      	cmp	r3, #0
 81064aa:	d05e      	beq.n	810656a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 81064ac:	e02f      	b.n	810650e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81064ae:	4b34      	ldr	r3, [pc, #208]	@ (8106580 <xTaskResumeAll+0x120>)
 81064b0:	68db      	ldr	r3, [r3, #12]
 81064b2:	68db      	ldr	r3, [r3, #12]
 81064b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 81064b6:	68fb      	ldr	r3, [r7, #12]
 81064b8:	3318      	adds	r3, #24
 81064ba:	4618      	mov	r0, r3
 81064bc:	f7fe f9e8 	bl	8104890 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 81064c0:	68fb      	ldr	r3, [r7, #12]
 81064c2:	3304      	adds	r3, #4
 81064c4:	4618      	mov	r0, r3
 81064c6:	f7fe f9e3 	bl	8104890 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 81064ca:	68fb      	ldr	r3, [r7, #12]
 81064cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81064ce:	4b2d      	ldr	r3, [pc, #180]	@ (8106584 <xTaskResumeAll+0x124>)
 81064d0:	681b      	ldr	r3, [r3, #0]
 81064d2:	429a      	cmp	r2, r3
 81064d4:	d903      	bls.n	81064de <xTaskResumeAll+0x7e>
 81064d6:	68fb      	ldr	r3, [r7, #12]
 81064d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81064da:	4a2a      	ldr	r2, [pc, #168]	@ (8106584 <xTaskResumeAll+0x124>)
 81064dc:	6013      	str	r3, [r2, #0]
 81064de:	68fb      	ldr	r3, [r7, #12]
 81064e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81064e2:	4613      	mov	r3, r2
 81064e4:	009b      	lsls	r3, r3, #2
 81064e6:	4413      	add	r3, r2
 81064e8:	009b      	lsls	r3, r3, #2
 81064ea:	4a27      	ldr	r2, [pc, #156]	@ (8106588 <xTaskResumeAll+0x128>)
 81064ec:	441a      	add	r2, r3
 81064ee:	68fb      	ldr	r3, [r7, #12]
 81064f0:	3304      	adds	r3, #4
 81064f2:	4619      	mov	r1, r3
 81064f4:	4610      	mov	r0, r2
 81064f6:	f7fe f96e 	bl	81047d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 81064fa:	68fb      	ldr	r3, [r7, #12]
 81064fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81064fe:	4b23      	ldr	r3, [pc, #140]	@ (810658c <xTaskResumeAll+0x12c>)
 8106500:	681b      	ldr	r3, [r3, #0]
 8106502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106504:	429a      	cmp	r2, r3
 8106506:	d302      	bcc.n	810650e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8106508:	4b21      	ldr	r3, [pc, #132]	@ (8106590 <xTaskResumeAll+0x130>)
 810650a:	2201      	movs	r2, #1
 810650c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810650e:	4b1c      	ldr	r3, [pc, #112]	@ (8106580 <xTaskResumeAll+0x120>)
 8106510:	681b      	ldr	r3, [r3, #0]
 8106512:	2b00      	cmp	r3, #0
 8106514:	d1cb      	bne.n	81064ae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8106516:	68fb      	ldr	r3, [r7, #12]
 8106518:	2b00      	cmp	r3, #0
 810651a:	d001      	beq.n	8106520 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 810651c:	f000 fb8e 	bl	8106c3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8106520:	4b1c      	ldr	r3, [pc, #112]	@ (8106594 <xTaskResumeAll+0x134>)
 8106522:	681b      	ldr	r3, [r3, #0]
 8106524:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8106526:	687b      	ldr	r3, [r7, #4]
 8106528:	2b00      	cmp	r3, #0
 810652a:	d010      	beq.n	810654e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 810652c:	f000 f846 	bl	81065bc <xTaskIncrementTick>
 8106530:	4603      	mov	r3, r0
 8106532:	2b00      	cmp	r3, #0
 8106534:	d002      	beq.n	810653c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8106536:	4b16      	ldr	r3, [pc, #88]	@ (8106590 <xTaskResumeAll+0x130>)
 8106538:	2201      	movs	r2, #1
 810653a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 810653c:	687b      	ldr	r3, [r7, #4]
 810653e:	3b01      	subs	r3, #1
 8106540:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8106542:	687b      	ldr	r3, [r7, #4]
 8106544:	2b00      	cmp	r3, #0
 8106546:	d1f1      	bne.n	810652c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8106548:	4b12      	ldr	r3, [pc, #72]	@ (8106594 <xTaskResumeAll+0x134>)
 810654a:	2200      	movs	r2, #0
 810654c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 810654e:	4b10      	ldr	r3, [pc, #64]	@ (8106590 <xTaskResumeAll+0x130>)
 8106550:	681b      	ldr	r3, [r3, #0]
 8106552:	2b00      	cmp	r3, #0
 8106554:	d009      	beq.n	810656a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8106556:	2301      	movs	r3, #1
 8106558:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 810655a:	4b0f      	ldr	r3, [pc, #60]	@ (8106598 <xTaskResumeAll+0x138>)
 810655c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8106560:	601a      	str	r2, [r3, #0]
 8106562:	f3bf 8f4f 	dsb	sy
 8106566:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810656a:	f7fe fb1f 	bl	8104bac <vPortExitCritical>

	return xAlreadyYielded;
 810656e:	68bb      	ldr	r3, [r7, #8]
}
 8106570:	4618      	mov	r0, r3
 8106572:	3710      	adds	r7, #16
 8106574:	46bd      	mov	sp, r7
 8106576:	bd80      	pop	{r7, pc}
 8106578:	1000499c 	.word	0x1000499c
 810657c:	10004974 	.word	0x10004974
 8106580:	10004934 	.word	0x10004934
 8106584:	1000497c 	.word	0x1000497c
 8106588:	100044a4 	.word	0x100044a4
 810658c:	100044a0 	.word	0x100044a0
 8106590:	10004988 	.word	0x10004988
 8106594:	10004984 	.word	0x10004984
 8106598:	e000ed04 	.word	0xe000ed04

0810659c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 810659c:	b480      	push	{r7}
 810659e:	b083      	sub	sp, #12
 81065a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 81065a2:	4b05      	ldr	r3, [pc, #20]	@ (81065b8 <xTaskGetTickCount+0x1c>)
 81065a4:	681b      	ldr	r3, [r3, #0]
 81065a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 81065a8:	687b      	ldr	r3, [r7, #4]
}
 81065aa:	4618      	mov	r0, r3
 81065ac:	370c      	adds	r7, #12
 81065ae:	46bd      	mov	sp, r7
 81065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81065b4:	4770      	bx	lr
 81065b6:	bf00      	nop
 81065b8:	10004978 	.word	0x10004978

081065bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 81065bc:	b580      	push	{r7, lr}
 81065be:	b086      	sub	sp, #24
 81065c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 81065c2:	2300      	movs	r3, #0
 81065c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81065c6:	4b4f      	ldr	r3, [pc, #316]	@ (8106704 <xTaskIncrementTick+0x148>)
 81065c8:	681b      	ldr	r3, [r3, #0]
 81065ca:	2b00      	cmp	r3, #0
 81065cc:	f040 8090 	bne.w	81066f0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 81065d0:	4b4d      	ldr	r3, [pc, #308]	@ (8106708 <xTaskIncrementTick+0x14c>)
 81065d2:	681b      	ldr	r3, [r3, #0]
 81065d4:	3301      	adds	r3, #1
 81065d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 81065d8:	4a4b      	ldr	r2, [pc, #300]	@ (8106708 <xTaskIncrementTick+0x14c>)
 81065da:	693b      	ldr	r3, [r7, #16]
 81065dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 81065de:	693b      	ldr	r3, [r7, #16]
 81065e0:	2b00      	cmp	r3, #0
 81065e2:	d121      	bne.n	8106628 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 81065e4:	4b49      	ldr	r3, [pc, #292]	@ (810670c <xTaskIncrementTick+0x150>)
 81065e6:	681b      	ldr	r3, [r3, #0]
 81065e8:	681b      	ldr	r3, [r3, #0]
 81065ea:	2b00      	cmp	r3, #0
 81065ec:	d00b      	beq.n	8106606 <xTaskIncrementTick+0x4a>
	__asm volatile
 81065ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81065f2:	f383 8811 	msr	BASEPRI, r3
 81065f6:	f3bf 8f6f 	isb	sy
 81065fa:	f3bf 8f4f 	dsb	sy
 81065fe:	603b      	str	r3, [r7, #0]
}
 8106600:	bf00      	nop
 8106602:	bf00      	nop
 8106604:	e7fd      	b.n	8106602 <xTaskIncrementTick+0x46>
 8106606:	4b41      	ldr	r3, [pc, #260]	@ (810670c <xTaskIncrementTick+0x150>)
 8106608:	681b      	ldr	r3, [r3, #0]
 810660a:	60fb      	str	r3, [r7, #12]
 810660c:	4b40      	ldr	r3, [pc, #256]	@ (8106710 <xTaskIncrementTick+0x154>)
 810660e:	681b      	ldr	r3, [r3, #0]
 8106610:	4a3e      	ldr	r2, [pc, #248]	@ (810670c <xTaskIncrementTick+0x150>)
 8106612:	6013      	str	r3, [r2, #0]
 8106614:	4a3e      	ldr	r2, [pc, #248]	@ (8106710 <xTaskIncrementTick+0x154>)
 8106616:	68fb      	ldr	r3, [r7, #12]
 8106618:	6013      	str	r3, [r2, #0]
 810661a:	4b3e      	ldr	r3, [pc, #248]	@ (8106714 <xTaskIncrementTick+0x158>)
 810661c:	681b      	ldr	r3, [r3, #0]
 810661e:	3301      	adds	r3, #1
 8106620:	4a3c      	ldr	r2, [pc, #240]	@ (8106714 <xTaskIncrementTick+0x158>)
 8106622:	6013      	str	r3, [r2, #0]
 8106624:	f000 fb0a 	bl	8106c3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8106628:	4b3b      	ldr	r3, [pc, #236]	@ (8106718 <xTaskIncrementTick+0x15c>)
 810662a:	681b      	ldr	r3, [r3, #0]
 810662c:	693a      	ldr	r2, [r7, #16]
 810662e:	429a      	cmp	r2, r3
 8106630:	d349      	bcc.n	81066c6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8106632:	4b36      	ldr	r3, [pc, #216]	@ (810670c <xTaskIncrementTick+0x150>)
 8106634:	681b      	ldr	r3, [r3, #0]
 8106636:	681b      	ldr	r3, [r3, #0]
 8106638:	2b00      	cmp	r3, #0
 810663a:	d104      	bne.n	8106646 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810663c:	4b36      	ldr	r3, [pc, #216]	@ (8106718 <xTaskIncrementTick+0x15c>)
 810663e:	f04f 32ff 	mov.w	r2, #4294967295
 8106642:	601a      	str	r2, [r3, #0]
					break;
 8106644:	e03f      	b.n	81066c6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8106646:	4b31      	ldr	r3, [pc, #196]	@ (810670c <xTaskIncrementTick+0x150>)
 8106648:	681b      	ldr	r3, [r3, #0]
 810664a:	68db      	ldr	r3, [r3, #12]
 810664c:	68db      	ldr	r3, [r3, #12]
 810664e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8106650:	68bb      	ldr	r3, [r7, #8]
 8106652:	685b      	ldr	r3, [r3, #4]
 8106654:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8106656:	693a      	ldr	r2, [r7, #16]
 8106658:	687b      	ldr	r3, [r7, #4]
 810665a:	429a      	cmp	r2, r3
 810665c:	d203      	bcs.n	8106666 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 810665e:	4a2e      	ldr	r2, [pc, #184]	@ (8106718 <xTaskIncrementTick+0x15c>)
 8106660:	687b      	ldr	r3, [r7, #4]
 8106662:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8106664:	e02f      	b.n	81066c6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8106666:	68bb      	ldr	r3, [r7, #8]
 8106668:	3304      	adds	r3, #4
 810666a:	4618      	mov	r0, r3
 810666c:	f7fe f910 	bl	8104890 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8106670:	68bb      	ldr	r3, [r7, #8]
 8106672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106674:	2b00      	cmp	r3, #0
 8106676:	d004      	beq.n	8106682 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8106678:	68bb      	ldr	r3, [r7, #8]
 810667a:	3318      	adds	r3, #24
 810667c:	4618      	mov	r0, r3
 810667e:	f7fe f907 	bl	8104890 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8106682:	68bb      	ldr	r3, [r7, #8]
 8106684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8106686:	4b25      	ldr	r3, [pc, #148]	@ (810671c <xTaskIncrementTick+0x160>)
 8106688:	681b      	ldr	r3, [r3, #0]
 810668a:	429a      	cmp	r2, r3
 810668c:	d903      	bls.n	8106696 <xTaskIncrementTick+0xda>
 810668e:	68bb      	ldr	r3, [r7, #8]
 8106690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106692:	4a22      	ldr	r2, [pc, #136]	@ (810671c <xTaskIncrementTick+0x160>)
 8106694:	6013      	str	r3, [r2, #0]
 8106696:	68bb      	ldr	r3, [r7, #8]
 8106698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810669a:	4613      	mov	r3, r2
 810669c:	009b      	lsls	r3, r3, #2
 810669e:	4413      	add	r3, r2
 81066a0:	009b      	lsls	r3, r3, #2
 81066a2:	4a1f      	ldr	r2, [pc, #124]	@ (8106720 <xTaskIncrementTick+0x164>)
 81066a4:	441a      	add	r2, r3
 81066a6:	68bb      	ldr	r3, [r7, #8]
 81066a8:	3304      	adds	r3, #4
 81066aa:	4619      	mov	r1, r3
 81066ac:	4610      	mov	r0, r2
 81066ae:	f7fe f892 	bl	81047d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 81066b2:	68bb      	ldr	r3, [r7, #8]
 81066b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81066b6:	4b1b      	ldr	r3, [pc, #108]	@ (8106724 <xTaskIncrementTick+0x168>)
 81066b8:	681b      	ldr	r3, [r3, #0]
 81066ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81066bc:	429a      	cmp	r2, r3
 81066be:	d3b8      	bcc.n	8106632 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 81066c0:	2301      	movs	r3, #1
 81066c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81066c4:	e7b5      	b.n	8106632 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 81066c6:	4b17      	ldr	r3, [pc, #92]	@ (8106724 <xTaskIncrementTick+0x168>)
 81066c8:	681b      	ldr	r3, [r3, #0]
 81066ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81066cc:	4914      	ldr	r1, [pc, #80]	@ (8106720 <xTaskIncrementTick+0x164>)
 81066ce:	4613      	mov	r3, r2
 81066d0:	009b      	lsls	r3, r3, #2
 81066d2:	4413      	add	r3, r2
 81066d4:	009b      	lsls	r3, r3, #2
 81066d6:	440b      	add	r3, r1
 81066d8:	681b      	ldr	r3, [r3, #0]
 81066da:	2b01      	cmp	r3, #1
 81066dc:	d901      	bls.n	81066e2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 81066de:	2301      	movs	r3, #1
 81066e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 81066e2:	4b11      	ldr	r3, [pc, #68]	@ (8106728 <xTaskIncrementTick+0x16c>)
 81066e4:	681b      	ldr	r3, [r3, #0]
 81066e6:	2b00      	cmp	r3, #0
 81066e8:	d007      	beq.n	81066fa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 81066ea:	2301      	movs	r3, #1
 81066ec:	617b      	str	r3, [r7, #20]
 81066ee:	e004      	b.n	81066fa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 81066f0:	4b0e      	ldr	r3, [pc, #56]	@ (810672c <xTaskIncrementTick+0x170>)
 81066f2:	681b      	ldr	r3, [r3, #0]
 81066f4:	3301      	adds	r3, #1
 81066f6:	4a0d      	ldr	r2, [pc, #52]	@ (810672c <xTaskIncrementTick+0x170>)
 81066f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 81066fa:	697b      	ldr	r3, [r7, #20]
}
 81066fc:	4618      	mov	r0, r3
 81066fe:	3718      	adds	r7, #24
 8106700:	46bd      	mov	sp, r7
 8106702:	bd80      	pop	{r7, pc}
 8106704:	1000499c 	.word	0x1000499c
 8106708:	10004978 	.word	0x10004978
 810670c:	1000492c 	.word	0x1000492c
 8106710:	10004930 	.word	0x10004930
 8106714:	1000498c 	.word	0x1000498c
 8106718:	10004994 	.word	0x10004994
 810671c:	1000497c 	.word	0x1000497c
 8106720:	100044a4 	.word	0x100044a4
 8106724:	100044a0 	.word	0x100044a0
 8106728:	10004988 	.word	0x10004988
 810672c:	10004984 	.word	0x10004984

08106730 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8106730:	b480      	push	{r7}
 8106732:	b085      	sub	sp, #20
 8106734:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8106736:	4b2b      	ldr	r3, [pc, #172]	@ (81067e4 <vTaskSwitchContext+0xb4>)
 8106738:	681b      	ldr	r3, [r3, #0]
 810673a:	2b00      	cmp	r3, #0
 810673c:	d003      	beq.n	8106746 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 810673e:	4b2a      	ldr	r3, [pc, #168]	@ (81067e8 <vTaskSwitchContext+0xb8>)
 8106740:	2201      	movs	r2, #1
 8106742:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8106744:	e047      	b.n	81067d6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8106746:	4b28      	ldr	r3, [pc, #160]	@ (81067e8 <vTaskSwitchContext+0xb8>)
 8106748:	2200      	movs	r2, #0
 810674a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810674c:	4b27      	ldr	r3, [pc, #156]	@ (81067ec <vTaskSwitchContext+0xbc>)
 810674e:	681b      	ldr	r3, [r3, #0]
 8106750:	60fb      	str	r3, [r7, #12]
 8106752:	e011      	b.n	8106778 <vTaskSwitchContext+0x48>
 8106754:	68fb      	ldr	r3, [r7, #12]
 8106756:	2b00      	cmp	r3, #0
 8106758:	d10b      	bne.n	8106772 <vTaskSwitchContext+0x42>
	__asm volatile
 810675a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810675e:	f383 8811 	msr	BASEPRI, r3
 8106762:	f3bf 8f6f 	isb	sy
 8106766:	f3bf 8f4f 	dsb	sy
 810676a:	607b      	str	r3, [r7, #4]
}
 810676c:	bf00      	nop
 810676e:	bf00      	nop
 8106770:	e7fd      	b.n	810676e <vTaskSwitchContext+0x3e>
 8106772:	68fb      	ldr	r3, [r7, #12]
 8106774:	3b01      	subs	r3, #1
 8106776:	60fb      	str	r3, [r7, #12]
 8106778:	491d      	ldr	r1, [pc, #116]	@ (81067f0 <vTaskSwitchContext+0xc0>)
 810677a:	68fa      	ldr	r2, [r7, #12]
 810677c:	4613      	mov	r3, r2
 810677e:	009b      	lsls	r3, r3, #2
 8106780:	4413      	add	r3, r2
 8106782:	009b      	lsls	r3, r3, #2
 8106784:	440b      	add	r3, r1
 8106786:	681b      	ldr	r3, [r3, #0]
 8106788:	2b00      	cmp	r3, #0
 810678a:	d0e3      	beq.n	8106754 <vTaskSwitchContext+0x24>
 810678c:	68fa      	ldr	r2, [r7, #12]
 810678e:	4613      	mov	r3, r2
 8106790:	009b      	lsls	r3, r3, #2
 8106792:	4413      	add	r3, r2
 8106794:	009b      	lsls	r3, r3, #2
 8106796:	4a16      	ldr	r2, [pc, #88]	@ (81067f0 <vTaskSwitchContext+0xc0>)
 8106798:	4413      	add	r3, r2
 810679a:	60bb      	str	r3, [r7, #8]
 810679c:	68bb      	ldr	r3, [r7, #8]
 810679e:	685b      	ldr	r3, [r3, #4]
 81067a0:	685a      	ldr	r2, [r3, #4]
 81067a2:	68bb      	ldr	r3, [r7, #8]
 81067a4:	605a      	str	r2, [r3, #4]
 81067a6:	68bb      	ldr	r3, [r7, #8]
 81067a8:	685a      	ldr	r2, [r3, #4]
 81067aa:	68bb      	ldr	r3, [r7, #8]
 81067ac:	3308      	adds	r3, #8
 81067ae:	429a      	cmp	r2, r3
 81067b0:	d104      	bne.n	81067bc <vTaskSwitchContext+0x8c>
 81067b2:	68bb      	ldr	r3, [r7, #8]
 81067b4:	685b      	ldr	r3, [r3, #4]
 81067b6:	685a      	ldr	r2, [r3, #4]
 81067b8:	68bb      	ldr	r3, [r7, #8]
 81067ba:	605a      	str	r2, [r3, #4]
 81067bc:	68bb      	ldr	r3, [r7, #8]
 81067be:	685b      	ldr	r3, [r3, #4]
 81067c0:	68db      	ldr	r3, [r3, #12]
 81067c2:	4a0c      	ldr	r2, [pc, #48]	@ (81067f4 <vTaskSwitchContext+0xc4>)
 81067c4:	6013      	str	r3, [r2, #0]
 81067c6:	4a09      	ldr	r2, [pc, #36]	@ (81067ec <vTaskSwitchContext+0xbc>)
 81067c8:	68fb      	ldr	r3, [r7, #12]
 81067ca:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 81067cc:	4b09      	ldr	r3, [pc, #36]	@ (81067f4 <vTaskSwitchContext+0xc4>)
 81067ce:	681b      	ldr	r3, [r3, #0]
 81067d0:	3354      	adds	r3, #84	@ 0x54
 81067d2:	4a09      	ldr	r2, [pc, #36]	@ (81067f8 <vTaskSwitchContext+0xc8>)
 81067d4:	6013      	str	r3, [r2, #0]
}
 81067d6:	bf00      	nop
 81067d8:	3714      	adds	r7, #20
 81067da:	46bd      	mov	sp, r7
 81067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067e0:	4770      	bx	lr
 81067e2:	bf00      	nop
 81067e4:	1000499c 	.word	0x1000499c
 81067e8:	10004988 	.word	0x10004988
 81067ec:	1000497c 	.word	0x1000497c
 81067f0:	100044a4 	.word	0x100044a4
 81067f4:	100044a0 	.word	0x100044a0
 81067f8:	10000014 	.word	0x10000014

081067fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 81067fc:	b580      	push	{r7, lr}
 81067fe:	b084      	sub	sp, #16
 8106800:	af00      	add	r7, sp, #0
 8106802:	6078      	str	r0, [r7, #4]
 8106804:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8106806:	687b      	ldr	r3, [r7, #4]
 8106808:	2b00      	cmp	r3, #0
 810680a:	d10b      	bne.n	8106824 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 810680c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106810:	f383 8811 	msr	BASEPRI, r3
 8106814:	f3bf 8f6f 	isb	sy
 8106818:	f3bf 8f4f 	dsb	sy
 810681c:	60fb      	str	r3, [r7, #12]
}
 810681e:	bf00      	nop
 8106820:	bf00      	nop
 8106822:	e7fd      	b.n	8106820 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8106824:	4b07      	ldr	r3, [pc, #28]	@ (8106844 <vTaskPlaceOnEventList+0x48>)
 8106826:	681b      	ldr	r3, [r3, #0]
 8106828:	3318      	adds	r3, #24
 810682a:	4619      	mov	r1, r3
 810682c:	6878      	ldr	r0, [r7, #4]
 810682e:	f7fd fff6 	bl	810481e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8106832:	2101      	movs	r1, #1
 8106834:	6838      	ldr	r0, [r7, #0]
 8106836:	f000 fc2b 	bl	8107090 <prvAddCurrentTaskToDelayedList>
}
 810683a:	bf00      	nop
 810683c:	3710      	adds	r7, #16
 810683e:	46bd      	mov	sp, r7
 8106840:	bd80      	pop	{r7, pc}
 8106842:	bf00      	nop
 8106844:	100044a0 	.word	0x100044a0

08106848 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8106848:	b580      	push	{r7, lr}
 810684a:	b086      	sub	sp, #24
 810684c:	af00      	add	r7, sp, #0
 810684e:	60f8      	str	r0, [r7, #12]
 8106850:	60b9      	str	r1, [r7, #8]
 8106852:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8106854:	68fb      	ldr	r3, [r7, #12]
 8106856:	2b00      	cmp	r3, #0
 8106858:	d10b      	bne.n	8106872 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 810685a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810685e:	f383 8811 	msr	BASEPRI, r3
 8106862:	f3bf 8f6f 	isb	sy
 8106866:	f3bf 8f4f 	dsb	sy
 810686a:	617b      	str	r3, [r7, #20]
}
 810686c:	bf00      	nop
 810686e:	bf00      	nop
 8106870:	e7fd      	b.n	810686e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8106872:	4b0a      	ldr	r3, [pc, #40]	@ (810689c <vTaskPlaceOnEventListRestricted+0x54>)
 8106874:	681b      	ldr	r3, [r3, #0]
 8106876:	3318      	adds	r3, #24
 8106878:	4619      	mov	r1, r3
 810687a:	68f8      	ldr	r0, [r7, #12]
 810687c:	f7fd ffab 	bl	81047d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8106880:	687b      	ldr	r3, [r7, #4]
 8106882:	2b00      	cmp	r3, #0
 8106884:	d002      	beq.n	810688c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8106886:	f04f 33ff 	mov.w	r3, #4294967295
 810688a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 810688c:	6879      	ldr	r1, [r7, #4]
 810688e:	68b8      	ldr	r0, [r7, #8]
 8106890:	f000 fbfe 	bl	8107090 <prvAddCurrentTaskToDelayedList>
	}
 8106894:	bf00      	nop
 8106896:	3718      	adds	r7, #24
 8106898:	46bd      	mov	sp, r7
 810689a:	bd80      	pop	{r7, pc}
 810689c:	100044a0 	.word	0x100044a0

081068a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 81068a0:	b580      	push	{r7, lr}
 81068a2:	b086      	sub	sp, #24
 81068a4:	af00      	add	r7, sp, #0
 81068a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81068a8:	687b      	ldr	r3, [r7, #4]
 81068aa:	68db      	ldr	r3, [r3, #12]
 81068ac:	68db      	ldr	r3, [r3, #12]
 81068ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 81068b0:	693b      	ldr	r3, [r7, #16]
 81068b2:	2b00      	cmp	r3, #0
 81068b4:	d10b      	bne.n	81068ce <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 81068b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81068ba:	f383 8811 	msr	BASEPRI, r3
 81068be:	f3bf 8f6f 	isb	sy
 81068c2:	f3bf 8f4f 	dsb	sy
 81068c6:	60fb      	str	r3, [r7, #12]
}
 81068c8:	bf00      	nop
 81068ca:	bf00      	nop
 81068cc:	e7fd      	b.n	81068ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 81068ce:	693b      	ldr	r3, [r7, #16]
 81068d0:	3318      	adds	r3, #24
 81068d2:	4618      	mov	r0, r3
 81068d4:	f7fd ffdc 	bl	8104890 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81068d8:	4b1d      	ldr	r3, [pc, #116]	@ (8106950 <xTaskRemoveFromEventList+0xb0>)
 81068da:	681b      	ldr	r3, [r3, #0]
 81068dc:	2b00      	cmp	r3, #0
 81068de:	d11d      	bne.n	810691c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 81068e0:	693b      	ldr	r3, [r7, #16]
 81068e2:	3304      	adds	r3, #4
 81068e4:	4618      	mov	r0, r3
 81068e6:	f7fd ffd3 	bl	8104890 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 81068ea:	693b      	ldr	r3, [r7, #16]
 81068ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81068ee:	4b19      	ldr	r3, [pc, #100]	@ (8106954 <xTaskRemoveFromEventList+0xb4>)
 81068f0:	681b      	ldr	r3, [r3, #0]
 81068f2:	429a      	cmp	r2, r3
 81068f4:	d903      	bls.n	81068fe <xTaskRemoveFromEventList+0x5e>
 81068f6:	693b      	ldr	r3, [r7, #16]
 81068f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81068fa:	4a16      	ldr	r2, [pc, #88]	@ (8106954 <xTaskRemoveFromEventList+0xb4>)
 81068fc:	6013      	str	r3, [r2, #0]
 81068fe:	693b      	ldr	r3, [r7, #16]
 8106900:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8106902:	4613      	mov	r3, r2
 8106904:	009b      	lsls	r3, r3, #2
 8106906:	4413      	add	r3, r2
 8106908:	009b      	lsls	r3, r3, #2
 810690a:	4a13      	ldr	r2, [pc, #76]	@ (8106958 <xTaskRemoveFromEventList+0xb8>)
 810690c:	441a      	add	r2, r3
 810690e:	693b      	ldr	r3, [r7, #16]
 8106910:	3304      	adds	r3, #4
 8106912:	4619      	mov	r1, r3
 8106914:	4610      	mov	r0, r2
 8106916:	f7fd ff5e 	bl	81047d6 <vListInsertEnd>
 810691a:	e005      	b.n	8106928 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 810691c:	693b      	ldr	r3, [r7, #16]
 810691e:	3318      	adds	r3, #24
 8106920:	4619      	mov	r1, r3
 8106922:	480e      	ldr	r0, [pc, #56]	@ (810695c <xTaskRemoveFromEventList+0xbc>)
 8106924:	f7fd ff57 	bl	81047d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8106928:	693b      	ldr	r3, [r7, #16]
 810692a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810692c:	4b0c      	ldr	r3, [pc, #48]	@ (8106960 <xTaskRemoveFromEventList+0xc0>)
 810692e:	681b      	ldr	r3, [r3, #0]
 8106930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106932:	429a      	cmp	r2, r3
 8106934:	d905      	bls.n	8106942 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8106936:	2301      	movs	r3, #1
 8106938:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 810693a:	4b0a      	ldr	r3, [pc, #40]	@ (8106964 <xTaskRemoveFromEventList+0xc4>)
 810693c:	2201      	movs	r2, #1
 810693e:	601a      	str	r2, [r3, #0]
 8106940:	e001      	b.n	8106946 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8106942:	2300      	movs	r3, #0
 8106944:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8106946:	697b      	ldr	r3, [r7, #20]
}
 8106948:	4618      	mov	r0, r3
 810694a:	3718      	adds	r7, #24
 810694c:	46bd      	mov	sp, r7
 810694e:	bd80      	pop	{r7, pc}
 8106950:	1000499c 	.word	0x1000499c
 8106954:	1000497c 	.word	0x1000497c
 8106958:	100044a4 	.word	0x100044a4
 810695c:	10004934 	.word	0x10004934
 8106960:	100044a0 	.word	0x100044a0
 8106964:	10004988 	.word	0x10004988

08106968 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8106968:	b580      	push	{r7, lr}
 810696a:	b084      	sub	sp, #16
 810696c:	af00      	add	r7, sp, #0
 810696e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8106970:	687b      	ldr	r3, [r7, #4]
 8106972:	2b00      	cmp	r3, #0
 8106974:	d10b      	bne.n	810698e <vTaskSetTimeOutState+0x26>
	__asm volatile
 8106976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810697a:	f383 8811 	msr	BASEPRI, r3
 810697e:	f3bf 8f6f 	isb	sy
 8106982:	f3bf 8f4f 	dsb	sy
 8106986:	60fb      	str	r3, [r7, #12]
}
 8106988:	bf00      	nop
 810698a:	bf00      	nop
 810698c:	e7fd      	b.n	810698a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 810698e:	f7fe f8db 	bl	8104b48 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8106992:	4b07      	ldr	r3, [pc, #28]	@ (81069b0 <vTaskSetTimeOutState+0x48>)
 8106994:	681a      	ldr	r2, [r3, #0]
 8106996:	687b      	ldr	r3, [r7, #4]
 8106998:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 810699a:	4b06      	ldr	r3, [pc, #24]	@ (81069b4 <vTaskSetTimeOutState+0x4c>)
 810699c:	681a      	ldr	r2, [r3, #0]
 810699e:	687b      	ldr	r3, [r7, #4]
 81069a0:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 81069a2:	f7fe f903 	bl	8104bac <vPortExitCritical>
}
 81069a6:	bf00      	nop
 81069a8:	3710      	adds	r7, #16
 81069aa:	46bd      	mov	sp, r7
 81069ac:	bd80      	pop	{r7, pc}
 81069ae:	bf00      	nop
 81069b0:	1000498c 	.word	0x1000498c
 81069b4:	10004978 	.word	0x10004978

081069b8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 81069b8:	b480      	push	{r7}
 81069ba:	b083      	sub	sp, #12
 81069bc:	af00      	add	r7, sp, #0
 81069be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 81069c0:	4b06      	ldr	r3, [pc, #24]	@ (81069dc <vTaskInternalSetTimeOutState+0x24>)
 81069c2:	681a      	ldr	r2, [r3, #0]
 81069c4:	687b      	ldr	r3, [r7, #4]
 81069c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 81069c8:	4b05      	ldr	r3, [pc, #20]	@ (81069e0 <vTaskInternalSetTimeOutState+0x28>)
 81069ca:	681a      	ldr	r2, [r3, #0]
 81069cc:	687b      	ldr	r3, [r7, #4]
 81069ce:	605a      	str	r2, [r3, #4]
}
 81069d0:	bf00      	nop
 81069d2:	370c      	adds	r7, #12
 81069d4:	46bd      	mov	sp, r7
 81069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81069da:	4770      	bx	lr
 81069dc:	1000498c 	.word	0x1000498c
 81069e0:	10004978 	.word	0x10004978

081069e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 81069e4:	b580      	push	{r7, lr}
 81069e6:	b088      	sub	sp, #32
 81069e8:	af00      	add	r7, sp, #0
 81069ea:	6078      	str	r0, [r7, #4]
 81069ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 81069ee:	687b      	ldr	r3, [r7, #4]
 81069f0:	2b00      	cmp	r3, #0
 81069f2:	d10b      	bne.n	8106a0c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 81069f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81069f8:	f383 8811 	msr	BASEPRI, r3
 81069fc:	f3bf 8f6f 	isb	sy
 8106a00:	f3bf 8f4f 	dsb	sy
 8106a04:	613b      	str	r3, [r7, #16]
}
 8106a06:	bf00      	nop
 8106a08:	bf00      	nop
 8106a0a:	e7fd      	b.n	8106a08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8106a0c:	683b      	ldr	r3, [r7, #0]
 8106a0e:	2b00      	cmp	r3, #0
 8106a10:	d10b      	bne.n	8106a2a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8106a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106a16:	f383 8811 	msr	BASEPRI, r3
 8106a1a:	f3bf 8f6f 	isb	sy
 8106a1e:	f3bf 8f4f 	dsb	sy
 8106a22:	60fb      	str	r3, [r7, #12]
}
 8106a24:	bf00      	nop
 8106a26:	bf00      	nop
 8106a28:	e7fd      	b.n	8106a26 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8106a2a:	f7fe f88d 	bl	8104b48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8106a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8106aa4 <xTaskCheckForTimeOut+0xc0>)
 8106a30:	681b      	ldr	r3, [r3, #0]
 8106a32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8106a34:	687b      	ldr	r3, [r7, #4]
 8106a36:	685b      	ldr	r3, [r3, #4]
 8106a38:	69ba      	ldr	r2, [r7, #24]
 8106a3a:	1ad3      	subs	r3, r2, r3
 8106a3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8106a3e:	683b      	ldr	r3, [r7, #0]
 8106a40:	681b      	ldr	r3, [r3, #0]
 8106a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106a46:	d102      	bne.n	8106a4e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8106a48:	2300      	movs	r3, #0
 8106a4a:	61fb      	str	r3, [r7, #28]
 8106a4c:	e023      	b.n	8106a96 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8106a4e:	687b      	ldr	r3, [r7, #4]
 8106a50:	681a      	ldr	r2, [r3, #0]
 8106a52:	4b15      	ldr	r3, [pc, #84]	@ (8106aa8 <xTaskCheckForTimeOut+0xc4>)
 8106a54:	681b      	ldr	r3, [r3, #0]
 8106a56:	429a      	cmp	r2, r3
 8106a58:	d007      	beq.n	8106a6a <xTaskCheckForTimeOut+0x86>
 8106a5a:	687b      	ldr	r3, [r7, #4]
 8106a5c:	685b      	ldr	r3, [r3, #4]
 8106a5e:	69ba      	ldr	r2, [r7, #24]
 8106a60:	429a      	cmp	r2, r3
 8106a62:	d302      	bcc.n	8106a6a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8106a64:	2301      	movs	r3, #1
 8106a66:	61fb      	str	r3, [r7, #28]
 8106a68:	e015      	b.n	8106a96 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8106a6a:	683b      	ldr	r3, [r7, #0]
 8106a6c:	681b      	ldr	r3, [r3, #0]
 8106a6e:	697a      	ldr	r2, [r7, #20]
 8106a70:	429a      	cmp	r2, r3
 8106a72:	d20b      	bcs.n	8106a8c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8106a74:	683b      	ldr	r3, [r7, #0]
 8106a76:	681a      	ldr	r2, [r3, #0]
 8106a78:	697b      	ldr	r3, [r7, #20]
 8106a7a:	1ad2      	subs	r2, r2, r3
 8106a7c:	683b      	ldr	r3, [r7, #0]
 8106a7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8106a80:	6878      	ldr	r0, [r7, #4]
 8106a82:	f7ff ff99 	bl	81069b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8106a86:	2300      	movs	r3, #0
 8106a88:	61fb      	str	r3, [r7, #28]
 8106a8a:	e004      	b.n	8106a96 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8106a8c:	683b      	ldr	r3, [r7, #0]
 8106a8e:	2200      	movs	r2, #0
 8106a90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8106a92:	2301      	movs	r3, #1
 8106a94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8106a96:	f7fe f889 	bl	8104bac <vPortExitCritical>

	return xReturn;
 8106a9a:	69fb      	ldr	r3, [r7, #28]
}
 8106a9c:	4618      	mov	r0, r3
 8106a9e:	3720      	adds	r7, #32
 8106aa0:	46bd      	mov	sp, r7
 8106aa2:	bd80      	pop	{r7, pc}
 8106aa4:	10004978 	.word	0x10004978
 8106aa8:	1000498c 	.word	0x1000498c

08106aac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8106aac:	b480      	push	{r7}
 8106aae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8106ab0:	4b03      	ldr	r3, [pc, #12]	@ (8106ac0 <vTaskMissedYield+0x14>)
 8106ab2:	2201      	movs	r2, #1
 8106ab4:	601a      	str	r2, [r3, #0]
}
 8106ab6:	bf00      	nop
 8106ab8:	46bd      	mov	sp, r7
 8106aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106abe:	4770      	bx	lr
 8106ac0:	10004988 	.word	0x10004988

08106ac4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8106ac4:	b580      	push	{r7, lr}
 8106ac6:	b082      	sub	sp, #8
 8106ac8:	af00      	add	r7, sp, #0
 8106aca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8106acc:	f000 f852 	bl	8106b74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8106ad0:	4b06      	ldr	r3, [pc, #24]	@ (8106aec <prvIdleTask+0x28>)
 8106ad2:	681b      	ldr	r3, [r3, #0]
 8106ad4:	2b01      	cmp	r3, #1
 8106ad6:	d9f9      	bls.n	8106acc <prvIdleTask+0x8>
			{
				taskYIELD();
 8106ad8:	4b05      	ldr	r3, [pc, #20]	@ (8106af0 <prvIdleTask+0x2c>)
 8106ada:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8106ade:	601a      	str	r2, [r3, #0]
 8106ae0:	f3bf 8f4f 	dsb	sy
 8106ae4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8106ae8:	e7f0      	b.n	8106acc <prvIdleTask+0x8>
 8106aea:	bf00      	nop
 8106aec:	100044a4 	.word	0x100044a4
 8106af0:	e000ed04 	.word	0xe000ed04

08106af4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8106af4:	b580      	push	{r7, lr}
 8106af6:	b082      	sub	sp, #8
 8106af8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8106afa:	2300      	movs	r3, #0
 8106afc:	607b      	str	r3, [r7, #4]
 8106afe:	e00c      	b.n	8106b1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8106b00:	687a      	ldr	r2, [r7, #4]
 8106b02:	4613      	mov	r3, r2
 8106b04:	009b      	lsls	r3, r3, #2
 8106b06:	4413      	add	r3, r2
 8106b08:	009b      	lsls	r3, r3, #2
 8106b0a:	4a12      	ldr	r2, [pc, #72]	@ (8106b54 <prvInitialiseTaskLists+0x60>)
 8106b0c:	4413      	add	r3, r2
 8106b0e:	4618      	mov	r0, r3
 8106b10:	f7fd fe34 	bl	810477c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8106b14:	687b      	ldr	r3, [r7, #4]
 8106b16:	3301      	adds	r3, #1
 8106b18:	607b      	str	r3, [r7, #4]
 8106b1a:	687b      	ldr	r3, [r7, #4]
 8106b1c:	2b37      	cmp	r3, #55	@ 0x37
 8106b1e:	d9ef      	bls.n	8106b00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8106b20:	480d      	ldr	r0, [pc, #52]	@ (8106b58 <prvInitialiseTaskLists+0x64>)
 8106b22:	f7fd fe2b 	bl	810477c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8106b26:	480d      	ldr	r0, [pc, #52]	@ (8106b5c <prvInitialiseTaskLists+0x68>)
 8106b28:	f7fd fe28 	bl	810477c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8106b2c:	480c      	ldr	r0, [pc, #48]	@ (8106b60 <prvInitialiseTaskLists+0x6c>)
 8106b2e:	f7fd fe25 	bl	810477c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8106b32:	480c      	ldr	r0, [pc, #48]	@ (8106b64 <prvInitialiseTaskLists+0x70>)
 8106b34:	f7fd fe22 	bl	810477c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8106b38:	480b      	ldr	r0, [pc, #44]	@ (8106b68 <prvInitialiseTaskLists+0x74>)
 8106b3a:	f7fd fe1f 	bl	810477c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8106b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8106b6c <prvInitialiseTaskLists+0x78>)
 8106b40:	4a05      	ldr	r2, [pc, #20]	@ (8106b58 <prvInitialiseTaskLists+0x64>)
 8106b42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8106b44:	4b0a      	ldr	r3, [pc, #40]	@ (8106b70 <prvInitialiseTaskLists+0x7c>)
 8106b46:	4a05      	ldr	r2, [pc, #20]	@ (8106b5c <prvInitialiseTaskLists+0x68>)
 8106b48:	601a      	str	r2, [r3, #0]
}
 8106b4a:	bf00      	nop
 8106b4c:	3708      	adds	r7, #8
 8106b4e:	46bd      	mov	sp, r7
 8106b50:	bd80      	pop	{r7, pc}
 8106b52:	bf00      	nop
 8106b54:	100044a4 	.word	0x100044a4
 8106b58:	10004904 	.word	0x10004904
 8106b5c:	10004918 	.word	0x10004918
 8106b60:	10004934 	.word	0x10004934
 8106b64:	10004948 	.word	0x10004948
 8106b68:	10004960 	.word	0x10004960
 8106b6c:	1000492c 	.word	0x1000492c
 8106b70:	10004930 	.word	0x10004930

08106b74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8106b74:	b580      	push	{r7, lr}
 8106b76:	b082      	sub	sp, #8
 8106b78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8106b7a:	e019      	b.n	8106bb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8106b7c:	f7fd ffe4 	bl	8104b48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8106b80:	4b10      	ldr	r3, [pc, #64]	@ (8106bc4 <prvCheckTasksWaitingTermination+0x50>)
 8106b82:	68db      	ldr	r3, [r3, #12]
 8106b84:	68db      	ldr	r3, [r3, #12]
 8106b86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8106b88:	687b      	ldr	r3, [r7, #4]
 8106b8a:	3304      	adds	r3, #4
 8106b8c:	4618      	mov	r0, r3
 8106b8e:	f7fd fe7f 	bl	8104890 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8106b92:	4b0d      	ldr	r3, [pc, #52]	@ (8106bc8 <prvCheckTasksWaitingTermination+0x54>)
 8106b94:	681b      	ldr	r3, [r3, #0]
 8106b96:	3b01      	subs	r3, #1
 8106b98:	4a0b      	ldr	r2, [pc, #44]	@ (8106bc8 <prvCheckTasksWaitingTermination+0x54>)
 8106b9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8106b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8106bcc <prvCheckTasksWaitingTermination+0x58>)
 8106b9e:	681b      	ldr	r3, [r3, #0]
 8106ba0:	3b01      	subs	r3, #1
 8106ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8106bcc <prvCheckTasksWaitingTermination+0x58>)
 8106ba4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8106ba6:	f7fe f801 	bl	8104bac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8106baa:	6878      	ldr	r0, [r7, #4]
 8106bac:	f000 f810 	bl	8106bd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8106bb0:	4b06      	ldr	r3, [pc, #24]	@ (8106bcc <prvCheckTasksWaitingTermination+0x58>)
 8106bb2:	681b      	ldr	r3, [r3, #0]
 8106bb4:	2b00      	cmp	r3, #0
 8106bb6:	d1e1      	bne.n	8106b7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8106bb8:	bf00      	nop
 8106bba:	bf00      	nop
 8106bbc:	3708      	adds	r7, #8
 8106bbe:	46bd      	mov	sp, r7
 8106bc0:	bd80      	pop	{r7, pc}
 8106bc2:	bf00      	nop
 8106bc4:	10004948 	.word	0x10004948
 8106bc8:	10004974 	.word	0x10004974
 8106bcc:	1000495c 	.word	0x1000495c

08106bd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8106bd0:	b580      	push	{r7, lr}
 8106bd2:	b084      	sub	sp, #16
 8106bd4:	af00      	add	r7, sp, #0
 8106bd6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8106bd8:	687b      	ldr	r3, [r7, #4]
 8106bda:	3354      	adds	r3, #84	@ 0x54
 8106bdc:	4618      	mov	r0, r3
 8106bde:	f001 f803 	bl	8107be8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8106be2:	687b      	ldr	r3, [r7, #4]
 8106be4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8106be8:	2b00      	cmp	r3, #0
 8106bea:	d108      	bne.n	8106bfe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8106bec:	687b      	ldr	r3, [r7, #4]
 8106bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106bf0:	4618      	mov	r0, r3
 8106bf2:	f7fd fca3 	bl	810453c <vPortFree>
				vPortFree( pxTCB );
 8106bf6:	6878      	ldr	r0, [r7, #4]
 8106bf8:	f7fd fca0 	bl	810453c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8106bfc:	e019      	b.n	8106c32 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8106bfe:	687b      	ldr	r3, [r7, #4]
 8106c00:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8106c04:	2b01      	cmp	r3, #1
 8106c06:	d103      	bne.n	8106c10 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8106c08:	6878      	ldr	r0, [r7, #4]
 8106c0a:	f7fd fc97 	bl	810453c <vPortFree>
	}
 8106c0e:	e010      	b.n	8106c32 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8106c10:	687b      	ldr	r3, [r7, #4]
 8106c12:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8106c16:	2b02      	cmp	r3, #2
 8106c18:	d00b      	beq.n	8106c32 <prvDeleteTCB+0x62>
	__asm volatile
 8106c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106c1e:	f383 8811 	msr	BASEPRI, r3
 8106c22:	f3bf 8f6f 	isb	sy
 8106c26:	f3bf 8f4f 	dsb	sy
 8106c2a:	60fb      	str	r3, [r7, #12]
}
 8106c2c:	bf00      	nop
 8106c2e:	bf00      	nop
 8106c30:	e7fd      	b.n	8106c2e <prvDeleteTCB+0x5e>
	}
 8106c32:	bf00      	nop
 8106c34:	3710      	adds	r7, #16
 8106c36:	46bd      	mov	sp, r7
 8106c38:	bd80      	pop	{r7, pc}
	...

08106c3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8106c3c:	b480      	push	{r7}
 8106c3e:	b083      	sub	sp, #12
 8106c40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8106c42:	4b0c      	ldr	r3, [pc, #48]	@ (8106c74 <prvResetNextTaskUnblockTime+0x38>)
 8106c44:	681b      	ldr	r3, [r3, #0]
 8106c46:	681b      	ldr	r3, [r3, #0]
 8106c48:	2b00      	cmp	r3, #0
 8106c4a:	d104      	bne.n	8106c56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8106c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8106c78 <prvResetNextTaskUnblockTime+0x3c>)
 8106c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8106c52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8106c54:	e008      	b.n	8106c68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8106c56:	4b07      	ldr	r3, [pc, #28]	@ (8106c74 <prvResetNextTaskUnblockTime+0x38>)
 8106c58:	681b      	ldr	r3, [r3, #0]
 8106c5a:	68db      	ldr	r3, [r3, #12]
 8106c5c:	68db      	ldr	r3, [r3, #12]
 8106c5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8106c60:	687b      	ldr	r3, [r7, #4]
 8106c62:	685b      	ldr	r3, [r3, #4]
 8106c64:	4a04      	ldr	r2, [pc, #16]	@ (8106c78 <prvResetNextTaskUnblockTime+0x3c>)
 8106c66:	6013      	str	r3, [r2, #0]
}
 8106c68:	bf00      	nop
 8106c6a:	370c      	adds	r7, #12
 8106c6c:	46bd      	mov	sp, r7
 8106c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c72:	4770      	bx	lr
 8106c74:	1000492c 	.word	0x1000492c
 8106c78:	10004994 	.word	0x10004994

08106c7c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8106c7c:	b480      	push	{r7}
 8106c7e:	b083      	sub	sp, #12
 8106c80:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8106c82:	4b05      	ldr	r3, [pc, #20]	@ (8106c98 <xTaskGetCurrentTaskHandle+0x1c>)
 8106c84:	681b      	ldr	r3, [r3, #0]
 8106c86:	607b      	str	r3, [r7, #4]

		return xReturn;
 8106c88:	687b      	ldr	r3, [r7, #4]
	}
 8106c8a:	4618      	mov	r0, r3
 8106c8c:	370c      	adds	r7, #12
 8106c8e:	46bd      	mov	sp, r7
 8106c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c94:	4770      	bx	lr
 8106c96:	bf00      	nop
 8106c98:	100044a0 	.word	0x100044a0

08106c9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8106c9c:	b480      	push	{r7}
 8106c9e:	b083      	sub	sp, #12
 8106ca0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8106ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8106cd0 <xTaskGetSchedulerState+0x34>)
 8106ca4:	681b      	ldr	r3, [r3, #0]
 8106ca6:	2b00      	cmp	r3, #0
 8106ca8:	d102      	bne.n	8106cb0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8106caa:	2301      	movs	r3, #1
 8106cac:	607b      	str	r3, [r7, #4]
 8106cae:	e008      	b.n	8106cc2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8106cb0:	4b08      	ldr	r3, [pc, #32]	@ (8106cd4 <xTaskGetSchedulerState+0x38>)
 8106cb2:	681b      	ldr	r3, [r3, #0]
 8106cb4:	2b00      	cmp	r3, #0
 8106cb6:	d102      	bne.n	8106cbe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8106cb8:	2302      	movs	r3, #2
 8106cba:	607b      	str	r3, [r7, #4]
 8106cbc:	e001      	b.n	8106cc2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8106cbe:	2300      	movs	r3, #0
 8106cc0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8106cc2:	687b      	ldr	r3, [r7, #4]
	}
 8106cc4:	4618      	mov	r0, r3
 8106cc6:	370c      	adds	r7, #12
 8106cc8:	46bd      	mov	sp, r7
 8106cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106cce:	4770      	bx	lr
 8106cd0:	10004980 	.word	0x10004980
 8106cd4:	1000499c 	.word	0x1000499c

08106cd8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8106cd8:	b580      	push	{r7, lr}
 8106cda:	b086      	sub	sp, #24
 8106cdc:	af00      	add	r7, sp, #0
 8106cde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8106ce0:	687b      	ldr	r3, [r7, #4]
 8106ce2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8106ce4:	2300      	movs	r3, #0
 8106ce6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8106ce8:	687b      	ldr	r3, [r7, #4]
 8106cea:	2b00      	cmp	r3, #0
 8106cec:	d058      	beq.n	8106da0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8106cee:	4b2f      	ldr	r3, [pc, #188]	@ (8106dac <xTaskPriorityDisinherit+0xd4>)
 8106cf0:	681b      	ldr	r3, [r3, #0]
 8106cf2:	693a      	ldr	r2, [r7, #16]
 8106cf4:	429a      	cmp	r2, r3
 8106cf6:	d00b      	beq.n	8106d10 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8106cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106cfc:	f383 8811 	msr	BASEPRI, r3
 8106d00:	f3bf 8f6f 	isb	sy
 8106d04:	f3bf 8f4f 	dsb	sy
 8106d08:	60fb      	str	r3, [r7, #12]
}
 8106d0a:	bf00      	nop
 8106d0c:	bf00      	nop
 8106d0e:	e7fd      	b.n	8106d0c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8106d10:	693b      	ldr	r3, [r7, #16]
 8106d12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106d14:	2b00      	cmp	r3, #0
 8106d16:	d10b      	bne.n	8106d30 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8106d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106d1c:	f383 8811 	msr	BASEPRI, r3
 8106d20:	f3bf 8f6f 	isb	sy
 8106d24:	f3bf 8f4f 	dsb	sy
 8106d28:	60bb      	str	r3, [r7, #8]
}
 8106d2a:	bf00      	nop
 8106d2c:	bf00      	nop
 8106d2e:	e7fd      	b.n	8106d2c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8106d30:	693b      	ldr	r3, [r7, #16]
 8106d32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106d34:	1e5a      	subs	r2, r3, #1
 8106d36:	693b      	ldr	r3, [r7, #16]
 8106d38:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8106d3a:	693b      	ldr	r3, [r7, #16]
 8106d3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8106d3e:	693b      	ldr	r3, [r7, #16]
 8106d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106d42:	429a      	cmp	r2, r3
 8106d44:	d02c      	beq.n	8106da0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8106d46:	693b      	ldr	r3, [r7, #16]
 8106d48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106d4a:	2b00      	cmp	r3, #0
 8106d4c:	d128      	bne.n	8106da0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8106d4e:	693b      	ldr	r3, [r7, #16]
 8106d50:	3304      	adds	r3, #4
 8106d52:	4618      	mov	r0, r3
 8106d54:	f7fd fd9c 	bl	8104890 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8106d58:	693b      	ldr	r3, [r7, #16]
 8106d5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8106d5c:	693b      	ldr	r3, [r7, #16]
 8106d5e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8106d60:	693b      	ldr	r3, [r7, #16]
 8106d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106d64:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8106d68:	693b      	ldr	r3, [r7, #16]
 8106d6a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8106d6c:	693b      	ldr	r3, [r7, #16]
 8106d6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8106d70:	4b0f      	ldr	r3, [pc, #60]	@ (8106db0 <xTaskPriorityDisinherit+0xd8>)
 8106d72:	681b      	ldr	r3, [r3, #0]
 8106d74:	429a      	cmp	r2, r3
 8106d76:	d903      	bls.n	8106d80 <xTaskPriorityDisinherit+0xa8>
 8106d78:	693b      	ldr	r3, [r7, #16]
 8106d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106d7c:	4a0c      	ldr	r2, [pc, #48]	@ (8106db0 <xTaskPriorityDisinherit+0xd8>)
 8106d7e:	6013      	str	r3, [r2, #0]
 8106d80:	693b      	ldr	r3, [r7, #16]
 8106d82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8106d84:	4613      	mov	r3, r2
 8106d86:	009b      	lsls	r3, r3, #2
 8106d88:	4413      	add	r3, r2
 8106d8a:	009b      	lsls	r3, r3, #2
 8106d8c:	4a09      	ldr	r2, [pc, #36]	@ (8106db4 <xTaskPriorityDisinherit+0xdc>)
 8106d8e:	441a      	add	r2, r3
 8106d90:	693b      	ldr	r3, [r7, #16]
 8106d92:	3304      	adds	r3, #4
 8106d94:	4619      	mov	r1, r3
 8106d96:	4610      	mov	r0, r2
 8106d98:	f7fd fd1d 	bl	81047d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8106d9c:	2301      	movs	r3, #1
 8106d9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8106da0:	697b      	ldr	r3, [r7, #20]
	}
 8106da2:	4618      	mov	r0, r3
 8106da4:	3718      	adds	r7, #24
 8106da6:	46bd      	mov	sp, r7
 8106da8:	bd80      	pop	{r7, pc}
 8106daa:	bf00      	nop
 8106dac:	100044a0 	.word	0x100044a0
 8106db0:	1000497c 	.word	0x1000497c
 8106db4:	100044a4 	.word	0x100044a4

08106db8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8106db8:	b580      	push	{r7, lr}
 8106dba:	b086      	sub	sp, #24
 8106dbc:	af00      	add	r7, sp, #0
 8106dbe:	60f8      	str	r0, [r7, #12]
 8106dc0:	60b9      	str	r1, [r7, #8]
 8106dc2:	607a      	str	r2, [r7, #4]
 8106dc4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8106dc6:	f7fd febf 	bl	8104b48 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8106dca:	4b29      	ldr	r3, [pc, #164]	@ (8106e70 <xTaskNotifyWait+0xb8>)
 8106dcc:	681b      	ldr	r3, [r3, #0]
 8106dce:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8106dd2:	b2db      	uxtb	r3, r3
 8106dd4:	2b02      	cmp	r3, #2
 8106dd6:	d01c      	beq.n	8106e12 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8106dd8:	4b25      	ldr	r3, [pc, #148]	@ (8106e70 <xTaskNotifyWait+0xb8>)
 8106dda:	681b      	ldr	r3, [r3, #0]
 8106ddc:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8106de0:	68fa      	ldr	r2, [r7, #12]
 8106de2:	43d2      	mvns	r2, r2
 8106de4:	400a      	ands	r2, r1
 8106de6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8106dea:	4b21      	ldr	r3, [pc, #132]	@ (8106e70 <xTaskNotifyWait+0xb8>)
 8106dec:	681b      	ldr	r3, [r3, #0]
 8106dee:	2201      	movs	r2, #1
 8106df0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8106df4:	683b      	ldr	r3, [r7, #0]
 8106df6:	2b00      	cmp	r3, #0
 8106df8:	d00b      	beq.n	8106e12 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8106dfa:	2101      	movs	r1, #1
 8106dfc:	6838      	ldr	r0, [r7, #0]
 8106dfe:	f000 f947 	bl	8107090 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8106e02:	4b1c      	ldr	r3, [pc, #112]	@ (8106e74 <xTaskNotifyWait+0xbc>)
 8106e04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8106e08:	601a      	str	r2, [r3, #0]
 8106e0a:	f3bf 8f4f 	dsb	sy
 8106e0e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8106e12:	f7fd fecb 	bl	8104bac <vPortExitCritical>

		taskENTER_CRITICAL();
 8106e16:	f7fd fe97 	bl	8104b48 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8106e1a:	687b      	ldr	r3, [r7, #4]
 8106e1c:	2b00      	cmp	r3, #0
 8106e1e:	d005      	beq.n	8106e2c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8106e20:	4b13      	ldr	r3, [pc, #76]	@ (8106e70 <xTaskNotifyWait+0xb8>)
 8106e22:	681b      	ldr	r3, [r3, #0]
 8106e24:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8106e28:	687b      	ldr	r3, [r7, #4]
 8106e2a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8106e2c:	4b10      	ldr	r3, [pc, #64]	@ (8106e70 <xTaskNotifyWait+0xb8>)
 8106e2e:	681b      	ldr	r3, [r3, #0]
 8106e30:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8106e34:	b2db      	uxtb	r3, r3
 8106e36:	2b02      	cmp	r3, #2
 8106e38:	d002      	beq.n	8106e40 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8106e3a:	2300      	movs	r3, #0
 8106e3c:	617b      	str	r3, [r7, #20]
 8106e3e:	e00a      	b.n	8106e56 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8106e40:	4b0b      	ldr	r3, [pc, #44]	@ (8106e70 <xTaskNotifyWait+0xb8>)
 8106e42:	681b      	ldr	r3, [r3, #0]
 8106e44:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8106e48:	68ba      	ldr	r2, [r7, #8]
 8106e4a:	43d2      	mvns	r2, r2
 8106e4c:	400a      	ands	r2, r1
 8106e4e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 8106e52:	2301      	movs	r3, #1
 8106e54:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8106e56:	4b06      	ldr	r3, [pc, #24]	@ (8106e70 <xTaskNotifyWait+0xb8>)
 8106e58:	681b      	ldr	r3, [r3, #0]
 8106e5a:	2200      	movs	r2, #0
 8106e5c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8106e60:	f7fd fea4 	bl	8104bac <vPortExitCritical>

		return xReturn;
 8106e64:	697b      	ldr	r3, [r7, #20]
	}
 8106e66:	4618      	mov	r0, r3
 8106e68:	3718      	adds	r7, #24
 8106e6a:	46bd      	mov	sp, r7
 8106e6c:	bd80      	pop	{r7, pc}
 8106e6e:	bf00      	nop
 8106e70:	100044a0 	.word	0x100044a0
 8106e74:	e000ed04 	.word	0xe000ed04

08106e78 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8106e78:	b580      	push	{r7, lr}
 8106e7a:	b08e      	sub	sp, #56	@ 0x38
 8106e7c:	af00      	add	r7, sp, #0
 8106e7e:	60f8      	str	r0, [r7, #12]
 8106e80:	60b9      	str	r1, [r7, #8]
 8106e82:	603b      	str	r3, [r7, #0]
 8106e84:	4613      	mov	r3, r2
 8106e86:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8106e88:	2301      	movs	r3, #1
 8106e8a:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8106e8c:	68fb      	ldr	r3, [r7, #12]
 8106e8e:	2b00      	cmp	r3, #0
 8106e90:	d10b      	bne.n	8106eaa <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8106e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106e96:	f383 8811 	msr	BASEPRI, r3
 8106e9a:	f3bf 8f6f 	isb	sy
 8106e9e:	f3bf 8f4f 	dsb	sy
 8106ea2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8106ea4:	bf00      	nop
 8106ea6:	bf00      	nop
 8106ea8:	e7fd      	b.n	8106ea6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8106eaa:	f7fd ff2d 	bl	8104d08 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8106eae:	68fb      	ldr	r3, [r7, #12]
 8106eb0:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8106eb2:	f3ef 8211 	mrs	r2, BASEPRI
 8106eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106eba:	f383 8811 	msr	BASEPRI, r3
 8106ebe:	f3bf 8f6f 	isb	sy
 8106ec2:	f3bf 8f4f 	dsb	sy
 8106ec6:	623a      	str	r2, [r7, #32]
 8106ec8:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8106eca:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8106ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8106ece:	683b      	ldr	r3, [r7, #0]
 8106ed0:	2b00      	cmp	r3, #0
 8106ed2:	d004      	beq.n	8106ede <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8106ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106ed6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8106eda:	683b      	ldr	r3, [r7, #0]
 8106edc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8106ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106ee0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8106ee4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8106ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106eea:	2202      	movs	r2, #2
 8106eec:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8106ef0:	79fb      	ldrb	r3, [r7, #7]
 8106ef2:	2b04      	cmp	r3, #4
 8106ef4:	d82e      	bhi.n	8106f54 <xTaskGenericNotifyFromISR+0xdc>
 8106ef6:	a201      	add	r2, pc, #4	@ (adr r2, 8106efc <xTaskGenericNotifyFromISR+0x84>)
 8106ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106efc:	08106f79 	.word	0x08106f79
 8106f00:	08106f11 	.word	0x08106f11
 8106f04:	08106f23 	.word	0x08106f23
 8106f08:	08106f33 	.word	0x08106f33
 8106f0c:	08106f3d 	.word	0x08106f3d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8106f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106f12:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8106f16:	68bb      	ldr	r3, [r7, #8]
 8106f18:	431a      	orrs	r2, r3
 8106f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106f1c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8106f20:	e02d      	b.n	8106f7e <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8106f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106f24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8106f28:	1c5a      	adds	r2, r3, #1
 8106f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106f2c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8106f30:	e025      	b.n	8106f7e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8106f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106f34:	68ba      	ldr	r2, [r7, #8]
 8106f36:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8106f3a:	e020      	b.n	8106f7e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8106f3c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8106f40:	2b02      	cmp	r3, #2
 8106f42:	d004      	beq.n	8106f4e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8106f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106f46:	68ba      	ldr	r2, [r7, #8]
 8106f48:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8106f4c:	e017      	b.n	8106f7e <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 8106f4e:	2300      	movs	r3, #0
 8106f50:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8106f52:	e014      	b.n	8106f7e <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8106f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106f56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8106f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106f5e:	d00d      	beq.n	8106f7c <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8106f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106f64:	f383 8811 	msr	BASEPRI, r3
 8106f68:	f3bf 8f6f 	isb	sy
 8106f6c:	f3bf 8f4f 	dsb	sy
 8106f70:	61bb      	str	r3, [r7, #24]
}
 8106f72:	bf00      	nop
 8106f74:	bf00      	nop
 8106f76:	e7fd      	b.n	8106f74 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8106f78:	bf00      	nop
 8106f7a:	e000      	b.n	8106f7e <xTaskGenericNotifyFromISR+0x106>
					break;
 8106f7c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8106f7e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8106f82:	2b01      	cmp	r3, #1
 8106f84:	d147      	bne.n	8107016 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8106f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106f8a:	2b00      	cmp	r3, #0
 8106f8c:	d00b      	beq.n	8106fa6 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 8106f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106f92:	f383 8811 	msr	BASEPRI, r3
 8106f96:	f3bf 8f6f 	isb	sy
 8106f9a:	f3bf 8f4f 	dsb	sy
 8106f9e:	617b      	str	r3, [r7, #20]
}
 8106fa0:	bf00      	nop
 8106fa2:	bf00      	nop
 8106fa4:	e7fd      	b.n	8106fa2 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8106fa6:	4b21      	ldr	r3, [pc, #132]	@ (810702c <xTaskGenericNotifyFromISR+0x1b4>)
 8106fa8:	681b      	ldr	r3, [r3, #0]
 8106faa:	2b00      	cmp	r3, #0
 8106fac:	d11d      	bne.n	8106fea <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8106fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106fb0:	3304      	adds	r3, #4
 8106fb2:	4618      	mov	r0, r3
 8106fb4:	f7fd fc6c 	bl	8104890 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8106fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106fba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8106fbc:	4b1c      	ldr	r3, [pc, #112]	@ (8107030 <xTaskGenericNotifyFromISR+0x1b8>)
 8106fbe:	681b      	ldr	r3, [r3, #0]
 8106fc0:	429a      	cmp	r2, r3
 8106fc2:	d903      	bls.n	8106fcc <xTaskGenericNotifyFromISR+0x154>
 8106fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106fc8:	4a19      	ldr	r2, [pc, #100]	@ (8107030 <xTaskGenericNotifyFromISR+0x1b8>)
 8106fca:	6013      	str	r3, [r2, #0]
 8106fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106fce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8106fd0:	4613      	mov	r3, r2
 8106fd2:	009b      	lsls	r3, r3, #2
 8106fd4:	4413      	add	r3, r2
 8106fd6:	009b      	lsls	r3, r3, #2
 8106fd8:	4a16      	ldr	r2, [pc, #88]	@ (8107034 <xTaskGenericNotifyFromISR+0x1bc>)
 8106fda:	441a      	add	r2, r3
 8106fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106fde:	3304      	adds	r3, #4
 8106fe0:	4619      	mov	r1, r3
 8106fe2:	4610      	mov	r0, r2
 8106fe4:	f7fd fbf7 	bl	81047d6 <vListInsertEnd>
 8106fe8:	e005      	b.n	8106ff6 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8106fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106fec:	3318      	adds	r3, #24
 8106fee:	4619      	mov	r1, r3
 8106ff0:	4811      	ldr	r0, [pc, #68]	@ (8107038 <xTaskGenericNotifyFromISR+0x1c0>)
 8106ff2:	f7fd fbf0 	bl	81047d6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8106ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106ff8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8106ffa:	4b10      	ldr	r3, [pc, #64]	@ (810703c <xTaskGenericNotifyFromISR+0x1c4>)
 8106ffc:	681b      	ldr	r3, [r3, #0]
 8106ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107000:	429a      	cmp	r2, r3
 8107002:	d908      	bls.n	8107016 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8107004:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8107006:	2b00      	cmp	r3, #0
 8107008:	d002      	beq.n	8107010 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 810700a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810700c:	2201      	movs	r2, #1
 810700e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8107010:	4b0b      	ldr	r3, [pc, #44]	@ (8107040 <xTaskGenericNotifyFromISR+0x1c8>)
 8107012:	2201      	movs	r2, #1
 8107014:	601a      	str	r2, [r3, #0]
 8107016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107018:	613b      	str	r3, [r7, #16]
	__asm volatile
 810701a:	693b      	ldr	r3, [r7, #16]
 810701c:	f383 8811 	msr	BASEPRI, r3
}
 8107020:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8107022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8107024:	4618      	mov	r0, r3
 8107026:	3738      	adds	r7, #56	@ 0x38
 8107028:	46bd      	mov	sp, r7
 810702a:	bd80      	pop	{r7, pc}
 810702c:	1000499c 	.word	0x1000499c
 8107030:	1000497c 	.word	0x1000497c
 8107034:	100044a4 	.word	0x100044a4
 8107038:	10004934 	.word	0x10004934
 810703c:	100044a0 	.word	0x100044a0
 8107040:	10004988 	.word	0x10004988

08107044 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8107044:	b580      	push	{r7, lr}
 8107046:	b084      	sub	sp, #16
 8107048:	af00      	add	r7, sp, #0
 810704a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 810704c:	687b      	ldr	r3, [r7, #4]
 810704e:	2b00      	cmp	r3, #0
 8107050:	d102      	bne.n	8107058 <xTaskNotifyStateClear+0x14>
 8107052:	4b0e      	ldr	r3, [pc, #56]	@ (810708c <xTaskNotifyStateClear+0x48>)
 8107054:	681b      	ldr	r3, [r3, #0]
 8107056:	e000      	b.n	810705a <xTaskNotifyStateClear+0x16>
 8107058:	687b      	ldr	r3, [r7, #4]
 810705a:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 810705c:	f7fd fd74 	bl	8104b48 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8107060:	68bb      	ldr	r3, [r7, #8]
 8107062:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8107066:	b2db      	uxtb	r3, r3
 8107068:	2b02      	cmp	r3, #2
 810706a:	d106      	bne.n	810707a <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810706c:	68bb      	ldr	r3, [r7, #8]
 810706e:	2200      	movs	r2, #0
 8107070:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				xReturn = pdPASS;
 8107074:	2301      	movs	r3, #1
 8107076:	60fb      	str	r3, [r7, #12]
 8107078:	e001      	b.n	810707e <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 810707a:	2300      	movs	r3, #0
 810707c:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 810707e:	f7fd fd95 	bl	8104bac <vPortExitCritical>

		return xReturn;
 8107082:	68fb      	ldr	r3, [r7, #12]
	}
 8107084:	4618      	mov	r0, r3
 8107086:	3710      	adds	r7, #16
 8107088:	46bd      	mov	sp, r7
 810708a:	bd80      	pop	{r7, pc}
 810708c:	100044a0 	.word	0x100044a0

08107090 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8107090:	b580      	push	{r7, lr}
 8107092:	b084      	sub	sp, #16
 8107094:	af00      	add	r7, sp, #0
 8107096:	6078      	str	r0, [r7, #4]
 8107098:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 810709a:	4b21      	ldr	r3, [pc, #132]	@ (8107120 <prvAddCurrentTaskToDelayedList+0x90>)
 810709c:	681b      	ldr	r3, [r3, #0]
 810709e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 81070a0:	4b20      	ldr	r3, [pc, #128]	@ (8107124 <prvAddCurrentTaskToDelayedList+0x94>)
 81070a2:	681b      	ldr	r3, [r3, #0]
 81070a4:	3304      	adds	r3, #4
 81070a6:	4618      	mov	r0, r3
 81070a8:	f7fd fbf2 	bl	8104890 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 81070ac:	687b      	ldr	r3, [r7, #4]
 81070ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 81070b2:	d10a      	bne.n	81070ca <prvAddCurrentTaskToDelayedList+0x3a>
 81070b4:	683b      	ldr	r3, [r7, #0]
 81070b6:	2b00      	cmp	r3, #0
 81070b8:	d007      	beq.n	81070ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81070ba:	4b1a      	ldr	r3, [pc, #104]	@ (8107124 <prvAddCurrentTaskToDelayedList+0x94>)
 81070bc:	681b      	ldr	r3, [r3, #0]
 81070be:	3304      	adds	r3, #4
 81070c0:	4619      	mov	r1, r3
 81070c2:	4819      	ldr	r0, [pc, #100]	@ (8107128 <prvAddCurrentTaskToDelayedList+0x98>)
 81070c4:	f7fd fb87 	bl	81047d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 81070c8:	e026      	b.n	8107118 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 81070ca:	68fa      	ldr	r2, [r7, #12]
 81070cc:	687b      	ldr	r3, [r7, #4]
 81070ce:	4413      	add	r3, r2
 81070d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 81070d2:	4b14      	ldr	r3, [pc, #80]	@ (8107124 <prvAddCurrentTaskToDelayedList+0x94>)
 81070d4:	681b      	ldr	r3, [r3, #0]
 81070d6:	68ba      	ldr	r2, [r7, #8]
 81070d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 81070da:	68ba      	ldr	r2, [r7, #8]
 81070dc:	68fb      	ldr	r3, [r7, #12]
 81070de:	429a      	cmp	r2, r3
 81070e0:	d209      	bcs.n	81070f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81070e2:	4b12      	ldr	r3, [pc, #72]	@ (810712c <prvAddCurrentTaskToDelayedList+0x9c>)
 81070e4:	681a      	ldr	r2, [r3, #0]
 81070e6:	4b0f      	ldr	r3, [pc, #60]	@ (8107124 <prvAddCurrentTaskToDelayedList+0x94>)
 81070e8:	681b      	ldr	r3, [r3, #0]
 81070ea:	3304      	adds	r3, #4
 81070ec:	4619      	mov	r1, r3
 81070ee:	4610      	mov	r0, r2
 81070f0:	f7fd fb95 	bl	810481e <vListInsert>
}
 81070f4:	e010      	b.n	8107118 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81070f6:	4b0e      	ldr	r3, [pc, #56]	@ (8107130 <prvAddCurrentTaskToDelayedList+0xa0>)
 81070f8:	681a      	ldr	r2, [r3, #0]
 81070fa:	4b0a      	ldr	r3, [pc, #40]	@ (8107124 <prvAddCurrentTaskToDelayedList+0x94>)
 81070fc:	681b      	ldr	r3, [r3, #0]
 81070fe:	3304      	adds	r3, #4
 8107100:	4619      	mov	r1, r3
 8107102:	4610      	mov	r0, r2
 8107104:	f7fd fb8b 	bl	810481e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8107108:	4b0a      	ldr	r3, [pc, #40]	@ (8107134 <prvAddCurrentTaskToDelayedList+0xa4>)
 810710a:	681b      	ldr	r3, [r3, #0]
 810710c:	68ba      	ldr	r2, [r7, #8]
 810710e:	429a      	cmp	r2, r3
 8107110:	d202      	bcs.n	8107118 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8107112:	4a08      	ldr	r2, [pc, #32]	@ (8107134 <prvAddCurrentTaskToDelayedList+0xa4>)
 8107114:	68bb      	ldr	r3, [r7, #8]
 8107116:	6013      	str	r3, [r2, #0]
}
 8107118:	bf00      	nop
 810711a:	3710      	adds	r7, #16
 810711c:	46bd      	mov	sp, r7
 810711e:	bd80      	pop	{r7, pc}
 8107120:	10004978 	.word	0x10004978
 8107124:	100044a0 	.word	0x100044a0
 8107128:	10004960 	.word	0x10004960
 810712c:	10004930 	.word	0x10004930
 8107130:	1000492c 	.word	0x1000492c
 8107134:	10004994 	.word	0x10004994

08107138 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8107138:	b580      	push	{r7, lr}
 810713a:	b08a      	sub	sp, #40	@ 0x28
 810713c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 810713e:	2300      	movs	r3, #0
 8107140:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8107142:	f000 fb13 	bl	810776c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8107146:	4b1d      	ldr	r3, [pc, #116]	@ (81071bc <xTimerCreateTimerTask+0x84>)
 8107148:	681b      	ldr	r3, [r3, #0]
 810714a:	2b00      	cmp	r3, #0
 810714c:	d021      	beq.n	8107192 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 810714e:	2300      	movs	r3, #0
 8107150:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8107152:	2300      	movs	r3, #0
 8107154:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8107156:	1d3a      	adds	r2, r7, #4
 8107158:	f107 0108 	add.w	r1, r7, #8
 810715c:	f107 030c 	add.w	r3, r7, #12
 8107160:	4618      	mov	r0, r3
 8107162:	f7fd f903 	bl	810436c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8107166:	6879      	ldr	r1, [r7, #4]
 8107168:	68bb      	ldr	r3, [r7, #8]
 810716a:	68fa      	ldr	r2, [r7, #12]
 810716c:	9202      	str	r2, [sp, #8]
 810716e:	9301      	str	r3, [sp, #4]
 8107170:	2302      	movs	r3, #2
 8107172:	9300      	str	r3, [sp, #0]
 8107174:	2300      	movs	r3, #0
 8107176:	460a      	mov	r2, r1
 8107178:	4911      	ldr	r1, [pc, #68]	@ (81071c0 <xTimerCreateTimerTask+0x88>)
 810717a:	4812      	ldr	r0, [pc, #72]	@ (81071c4 <xTimerCreateTimerTask+0x8c>)
 810717c:	f7fe feff 	bl	8105f7e <xTaskCreateStatic>
 8107180:	4603      	mov	r3, r0
 8107182:	4a11      	ldr	r2, [pc, #68]	@ (81071c8 <xTimerCreateTimerTask+0x90>)
 8107184:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8107186:	4b10      	ldr	r3, [pc, #64]	@ (81071c8 <xTimerCreateTimerTask+0x90>)
 8107188:	681b      	ldr	r3, [r3, #0]
 810718a:	2b00      	cmp	r3, #0
 810718c:	d001      	beq.n	8107192 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 810718e:	2301      	movs	r3, #1
 8107190:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8107192:	697b      	ldr	r3, [r7, #20]
 8107194:	2b00      	cmp	r3, #0
 8107196:	d10b      	bne.n	81071b0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8107198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810719c:	f383 8811 	msr	BASEPRI, r3
 81071a0:	f3bf 8f6f 	isb	sy
 81071a4:	f3bf 8f4f 	dsb	sy
 81071a8:	613b      	str	r3, [r7, #16]
}
 81071aa:	bf00      	nop
 81071ac:	bf00      	nop
 81071ae:	e7fd      	b.n	81071ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 81071b0:	697b      	ldr	r3, [r7, #20]
}
 81071b2:	4618      	mov	r0, r3
 81071b4:	3718      	adds	r7, #24
 81071b6:	46bd      	mov	sp, r7
 81071b8:	bd80      	pop	{r7, pc}
 81071ba:	bf00      	nop
 81071bc:	100049d0 	.word	0x100049d0
 81071c0:	08107e40 	.word	0x08107e40
 81071c4:	08107305 	.word	0x08107305
 81071c8:	100049d4 	.word	0x100049d4

081071cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 81071cc:	b580      	push	{r7, lr}
 81071ce:	b08a      	sub	sp, #40	@ 0x28
 81071d0:	af00      	add	r7, sp, #0
 81071d2:	60f8      	str	r0, [r7, #12]
 81071d4:	60b9      	str	r1, [r7, #8]
 81071d6:	607a      	str	r2, [r7, #4]
 81071d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 81071da:	2300      	movs	r3, #0
 81071dc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 81071de:	68fb      	ldr	r3, [r7, #12]
 81071e0:	2b00      	cmp	r3, #0
 81071e2:	d10b      	bne.n	81071fc <xTimerGenericCommand+0x30>
	__asm volatile
 81071e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81071e8:	f383 8811 	msr	BASEPRI, r3
 81071ec:	f3bf 8f6f 	isb	sy
 81071f0:	f3bf 8f4f 	dsb	sy
 81071f4:	623b      	str	r3, [r7, #32]
}
 81071f6:	bf00      	nop
 81071f8:	bf00      	nop
 81071fa:	e7fd      	b.n	81071f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 81071fc:	4b19      	ldr	r3, [pc, #100]	@ (8107264 <xTimerGenericCommand+0x98>)
 81071fe:	681b      	ldr	r3, [r3, #0]
 8107200:	2b00      	cmp	r3, #0
 8107202:	d02a      	beq.n	810725a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8107204:	68bb      	ldr	r3, [r7, #8]
 8107206:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8107208:	687b      	ldr	r3, [r7, #4]
 810720a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 810720c:	68fb      	ldr	r3, [r7, #12]
 810720e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8107210:	68bb      	ldr	r3, [r7, #8]
 8107212:	2b05      	cmp	r3, #5
 8107214:	dc18      	bgt.n	8107248 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8107216:	f7ff fd41 	bl	8106c9c <xTaskGetSchedulerState>
 810721a:	4603      	mov	r3, r0
 810721c:	2b02      	cmp	r3, #2
 810721e:	d109      	bne.n	8107234 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8107220:	4b10      	ldr	r3, [pc, #64]	@ (8107264 <xTimerGenericCommand+0x98>)
 8107222:	6818      	ldr	r0, [r3, #0]
 8107224:	f107 0110 	add.w	r1, r7, #16
 8107228:	2300      	movs	r3, #0
 810722a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810722c:	f7fd fef4 	bl	8105018 <xQueueGenericSend>
 8107230:	6278      	str	r0, [r7, #36]	@ 0x24
 8107232:	e012      	b.n	810725a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8107234:	4b0b      	ldr	r3, [pc, #44]	@ (8107264 <xTimerGenericCommand+0x98>)
 8107236:	6818      	ldr	r0, [r3, #0]
 8107238:	f107 0110 	add.w	r1, r7, #16
 810723c:	2300      	movs	r3, #0
 810723e:	2200      	movs	r2, #0
 8107240:	f7fd feea 	bl	8105018 <xQueueGenericSend>
 8107244:	6278      	str	r0, [r7, #36]	@ 0x24
 8107246:	e008      	b.n	810725a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8107248:	4b06      	ldr	r3, [pc, #24]	@ (8107264 <xTimerGenericCommand+0x98>)
 810724a:	6818      	ldr	r0, [r3, #0]
 810724c:	f107 0110 	add.w	r1, r7, #16
 8107250:	2300      	movs	r3, #0
 8107252:	683a      	ldr	r2, [r7, #0]
 8107254:	f7fd ffe2 	bl	810521c <xQueueGenericSendFromISR>
 8107258:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 810725a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 810725c:	4618      	mov	r0, r3
 810725e:	3728      	adds	r7, #40	@ 0x28
 8107260:	46bd      	mov	sp, r7
 8107262:	bd80      	pop	{r7, pc}
 8107264:	100049d0 	.word	0x100049d0

08107268 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8107268:	b580      	push	{r7, lr}
 810726a:	b088      	sub	sp, #32
 810726c:	af02      	add	r7, sp, #8
 810726e:	6078      	str	r0, [r7, #4]
 8107270:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107272:	4b23      	ldr	r3, [pc, #140]	@ (8107300 <prvProcessExpiredTimer+0x98>)
 8107274:	681b      	ldr	r3, [r3, #0]
 8107276:	68db      	ldr	r3, [r3, #12]
 8107278:	68db      	ldr	r3, [r3, #12]
 810727a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810727c:	697b      	ldr	r3, [r7, #20]
 810727e:	3304      	adds	r3, #4
 8107280:	4618      	mov	r0, r3
 8107282:	f7fd fb05 	bl	8104890 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8107286:	697b      	ldr	r3, [r7, #20]
 8107288:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810728c:	f003 0304 	and.w	r3, r3, #4
 8107290:	2b00      	cmp	r3, #0
 8107292:	d023      	beq.n	81072dc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8107294:	697b      	ldr	r3, [r7, #20]
 8107296:	699a      	ldr	r2, [r3, #24]
 8107298:	687b      	ldr	r3, [r7, #4]
 810729a:	18d1      	adds	r1, r2, r3
 810729c:	687b      	ldr	r3, [r7, #4]
 810729e:	683a      	ldr	r2, [r7, #0]
 81072a0:	6978      	ldr	r0, [r7, #20]
 81072a2:	f000 f8d5 	bl	8107450 <prvInsertTimerInActiveList>
 81072a6:	4603      	mov	r3, r0
 81072a8:	2b00      	cmp	r3, #0
 81072aa:	d020      	beq.n	81072ee <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 81072ac:	2300      	movs	r3, #0
 81072ae:	9300      	str	r3, [sp, #0]
 81072b0:	2300      	movs	r3, #0
 81072b2:	687a      	ldr	r2, [r7, #4]
 81072b4:	2100      	movs	r1, #0
 81072b6:	6978      	ldr	r0, [r7, #20]
 81072b8:	f7ff ff88 	bl	81071cc <xTimerGenericCommand>
 81072bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 81072be:	693b      	ldr	r3, [r7, #16]
 81072c0:	2b00      	cmp	r3, #0
 81072c2:	d114      	bne.n	81072ee <prvProcessExpiredTimer+0x86>
	__asm volatile
 81072c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81072c8:	f383 8811 	msr	BASEPRI, r3
 81072cc:	f3bf 8f6f 	isb	sy
 81072d0:	f3bf 8f4f 	dsb	sy
 81072d4:	60fb      	str	r3, [r7, #12]
}
 81072d6:	bf00      	nop
 81072d8:	bf00      	nop
 81072da:	e7fd      	b.n	81072d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 81072dc:	697b      	ldr	r3, [r7, #20]
 81072de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81072e2:	f023 0301 	bic.w	r3, r3, #1
 81072e6:	b2da      	uxtb	r2, r3
 81072e8:	697b      	ldr	r3, [r7, #20]
 81072ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81072ee:	697b      	ldr	r3, [r7, #20]
 81072f0:	6a1b      	ldr	r3, [r3, #32]
 81072f2:	6978      	ldr	r0, [r7, #20]
 81072f4:	4798      	blx	r3
}
 81072f6:	bf00      	nop
 81072f8:	3718      	adds	r7, #24
 81072fa:	46bd      	mov	sp, r7
 81072fc:	bd80      	pop	{r7, pc}
 81072fe:	bf00      	nop
 8107300:	100049c8 	.word	0x100049c8

08107304 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8107304:	b580      	push	{r7, lr}
 8107306:	b084      	sub	sp, #16
 8107308:	af00      	add	r7, sp, #0
 810730a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810730c:	f107 0308 	add.w	r3, r7, #8
 8107310:	4618      	mov	r0, r3
 8107312:	f000 f859 	bl	81073c8 <prvGetNextExpireTime>
 8107316:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8107318:	68bb      	ldr	r3, [r7, #8]
 810731a:	4619      	mov	r1, r3
 810731c:	68f8      	ldr	r0, [r7, #12]
 810731e:	f000 f805 	bl	810732c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8107322:	f000 f8d7 	bl	81074d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8107326:	bf00      	nop
 8107328:	e7f0      	b.n	810730c <prvTimerTask+0x8>
	...

0810732c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 810732c:	b580      	push	{r7, lr}
 810732e:	b084      	sub	sp, #16
 8107330:	af00      	add	r7, sp, #0
 8107332:	6078      	str	r0, [r7, #4]
 8107334:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8107336:	f7ff f885 	bl	8106444 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810733a:	f107 0308 	add.w	r3, r7, #8
 810733e:	4618      	mov	r0, r3
 8107340:	f000 f866 	bl	8107410 <prvSampleTimeNow>
 8107344:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8107346:	68bb      	ldr	r3, [r7, #8]
 8107348:	2b00      	cmp	r3, #0
 810734a:	d130      	bne.n	81073ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 810734c:	683b      	ldr	r3, [r7, #0]
 810734e:	2b00      	cmp	r3, #0
 8107350:	d10a      	bne.n	8107368 <prvProcessTimerOrBlockTask+0x3c>
 8107352:	687a      	ldr	r2, [r7, #4]
 8107354:	68fb      	ldr	r3, [r7, #12]
 8107356:	429a      	cmp	r2, r3
 8107358:	d806      	bhi.n	8107368 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 810735a:	f7ff f881 	bl	8106460 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 810735e:	68f9      	ldr	r1, [r7, #12]
 8107360:	6878      	ldr	r0, [r7, #4]
 8107362:	f7ff ff81 	bl	8107268 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8107366:	e024      	b.n	81073b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8107368:	683b      	ldr	r3, [r7, #0]
 810736a:	2b00      	cmp	r3, #0
 810736c:	d008      	beq.n	8107380 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 810736e:	4b13      	ldr	r3, [pc, #76]	@ (81073bc <prvProcessTimerOrBlockTask+0x90>)
 8107370:	681b      	ldr	r3, [r3, #0]
 8107372:	681b      	ldr	r3, [r3, #0]
 8107374:	2b00      	cmp	r3, #0
 8107376:	d101      	bne.n	810737c <prvProcessTimerOrBlockTask+0x50>
 8107378:	2301      	movs	r3, #1
 810737a:	e000      	b.n	810737e <prvProcessTimerOrBlockTask+0x52>
 810737c:	2300      	movs	r3, #0
 810737e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8107380:	4b0f      	ldr	r3, [pc, #60]	@ (81073c0 <prvProcessTimerOrBlockTask+0x94>)
 8107382:	6818      	ldr	r0, [r3, #0]
 8107384:	687a      	ldr	r2, [r7, #4]
 8107386:	68fb      	ldr	r3, [r7, #12]
 8107388:	1ad3      	subs	r3, r2, r3
 810738a:	683a      	ldr	r2, [r7, #0]
 810738c:	4619      	mov	r1, r3
 810738e:	f7fe f9ff 	bl	8105790 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8107392:	f7ff f865 	bl	8106460 <xTaskResumeAll>
 8107396:	4603      	mov	r3, r0
 8107398:	2b00      	cmp	r3, #0
 810739a:	d10a      	bne.n	81073b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 810739c:	4b09      	ldr	r3, [pc, #36]	@ (81073c4 <prvProcessTimerOrBlockTask+0x98>)
 810739e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81073a2:	601a      	str	r2, [r3, #0]
 81073a4:	f3bf 8f4f 	dsb	sy
 81073a8:	f3bf 8f6f 	isb	sy
}
 81073ac:	e001      	b.n	81073b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 81073ae:	f7ff f857 	bl	8106460 <xTaskResumeAll>
}
 81073b2:	bf00      	nop
 81073b4:	3710      	adds	r7, #16
 81073b6:	46bd      	mov	sp, r7
 81073b8:	bd80      	pop	{r7, pc}
 81073ba:	bf00      	nop
 81073bc:	100049cc 	.word	0x100049cc
 81073c0:	100049d0 	.word	0x100049d0
 81073c4:	e000ed04 	.word	0xe000ed04

081073c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 81073c8:	b480      	push	{r7}
 81073ca:	b085      	sub	sp, #20
 81073cc:	af00      	add	r7, sp, #0
 81073ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 81073d0:	4b0e      	ldr	r3, [pc, #56]	@ (810740c <prvGetNextExpireTime+0x44>)
 81073d2:	681b      	ldr	r3, [r3, #0]
 81073d4:	681b      	ldr	r3, [r3, #0]
 81073d6:	2b00      	cmp	r3, #0
 81073d8:	d101      	bne.n	81073de <prvGetNextExpireTime+0x16>
 81073da:	2201      	movs	r2, #1
 81073dc:	e000      	b.n	81073e0 <prvGetNextExpireTime+0x18>
 81073de:	2200      	movs	r2, #0
 81073e0:	687b      	ldr	r3, [r7, #4]
 81073e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 81073e4:	687b      	ldr	r3, [r7, #4]
 81073e6:	681b      	ldr	r3, [r3, #0]
 81073e8:	2b00      	cmp	r3, #0
 81073ea:	d105      	bne.n	81073f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 81073ec:	4b07      	ldr	r3, [pc, #28]	@ (810740c <prvGetNextExpireTime+0x44>)
 81073ee:	681b      	ldr	r3, [r3, #0]
 81073f0:	68db      	ldr	r3, [r3, #12]
 81073f2:	681b      	ldr	r3, [r3, #0]
 81073f4:	60fb      	str	r3, [r7, #12]
 81073f6:	e001      	b.n	81073fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 81073f8:	2300      	movs	r3, #0
 81073fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 81073fc:	68fb      	ldr	r3, [r7, #12]
}
 81073fe:	4618      	mov	r0, r3
 8107400:	3714      	adds	r7, #20
 8107402:	46bd      	mov	sp, r7
 8107404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107408:	4770      	bx	lr
 810740a:	bf00      	nop
 810740c:	100049c8 	.word	0x100049c8

08107410 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8107410:	b580      	push	{r7, lr}
 8107412:	b084      	sub	sp, #16
 8107414:	af00      	add	r7, sp, #0
 8107416:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8107418:	f7ff f8c0 	bl	810659c <xTaskGetTickCount>
 810741c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 810741e:	4b0b      	ldr	r3, [pc, #44]	@ (810744c <prvSampleTimeNow+0x3c>)
 8107420:	681b      	ldr	r3, [r3, #0]
 8107422:	68fa      	ldr	r2, [r7, #12]
 8107424:	429a      	cmp	r2, r3
 8107426:	d205      	bcs.n	8107434 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8107428:	f000 f93a 	bl	81076a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 810742c:	687b      	ldr	r3, [r7, #4]
 810742e:	2201      	movs	r2, #1
 8107430:	601a      	str	r2, [r3, #0]
 8107432:	e002      	b.n	810743a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8107434:	687b      	ldr	r3, [r7, #4]
 8107436:	2200      	movs	r2, #0
 8107438:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 810743a:	4a04      	ldr	r2, [pc, #16]	@ (810744c <prvSampleTimeNow+0x3c>)
 810743c:	68fb      	ldr	r3, [r7, #12]
 810743e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8107440:	68fb      	ldr	r3, [r7, #12]
}
 8107442:	4618      	mov	r0, r3
 8107444:	3710      	adds	r7, #16
 8107446:	46bd      	mov	sp, r7
 8107448:	bd80      	pop	{r7, pc}
 810744a:	bf00      	nop
 810744c:	100049d8 	.word	0x100049d8

08107450 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8107450:	b580      	push	{r7, lr}
 8107452:	b086      	sub	sp, #24
 8107454:	af00      	add	r7, sp, #0
 8107456:	60f8      	str	r0, [r7, #12]
 8107458:	60b9      	str	r1, [r7, #8]
 810745a:	607a      	str	r2, [r7, #4]
 810745c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 810745e:	2300      	movs	r3, #0
 8107460:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8107462:	68fb      	ldr	r3, [r7, #12]
 8107464:	68ba      	ldr	r2, [r7, #8]
 8107466:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8107468:	68fb      	ldr	r3, [r7, #12]
 810746a:	68fa      	ldr	r2, [r7, #12]
 810746c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 810746e:	68ba      	ldr	r2, [r7, #8]
 8107470:	687b      	ldr	r3, [r7, #4]
 8107472:	429a      	cmp	r2, r3
 8107474:	d812      	bhi.n	810749c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8107476:	687a      	ldr	r2, [r7, #4]
 8107478:	683b      	ldr	r3, [r7, #0]
 810747a:	1ad2      	subs	r2, r2, r3
 810747c:	68fb      	ldr	r3, [r7, #12]
 810747e:	699b      	ldr	r3, [r3, #24]
 8107480:	429a      	cmp	r2, r3
 8107482:	d302      	bcc.n	810748a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8107484:	2301      	movs	r3, #1
 8107486:	617b      	str	r3, [r7, #20]
 8107488:	e01b      	b.n	81074c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 810748a:	4b10      	ldr	r3, [pc, #64]	@ (81074cc <prvInsertTimerInActiveList+0x7c>)
 810748c:	681a      	ldr	r2, [r3, #0]
 810748e:	68fb      	ldr	r3, [r7, #12]
 8107490:	3304      	adds	r3, #4
 8107492:	4619      	mov	r1, r3
 8107494:	4610      	mov	r0, r2
 8107496:	f7fd f9c2 	bl	810481e <vListInsert>
 810749a:	e012      	b.n	81074c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 810749c:	687a      	ldr	r2, [r7, #4]
 810749e:	683b      	ldr	r3, [r7, #0]
 81074a0:	429a      	cmp	r2, r3
 81074a2:	d206      	bcs.n	81074b2 <prvInsertTimerInActiveList+0x62>
 81074a4:	68ba      	ldr	r2, [r7, #8]
 81074a6:	683b      	ldr	r3, [r7, #0]
 81074a8:	429a      	cmp	r2, r3
 81074aa:	d302      	bcc.n	81074b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 81074ac:	2301      	movs	r3, #1
 81074ae:	617b      	str	r3, [r7, #20]
 81074b0:	e007      	b.n	81074c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 81074b2:	4b07      	ldr	r3, [pc, #28]	@ (81074d0 <prvInsertTimerInActiveList+0x80>)
 81074b4:	681a      	ldr	r2, [r3, #0]
 81074b6:	68fb      	ldr	r3, [r7, #12]
 81074b8:	3304      	adds	r3, #4
 81074ba:	4619      	mov	r1, r3
 81074bc:	4610      	mov	r0, r2
 81074be:	f7fd f9ae 	bl	810481e <vListInsert>
		}
	}

	return xProcessTimerNow;
 81074c2:	697b      	ldr	r3, [r7, #20]
}
 81074c4:	4618      	mov	r0, r3
 81074c6:	3718      	adds	r7, #24
 81074c8:	46bd      	mov	sp, r7
 81074ca:	bd80      	pop	{r7, pc}
 81074cc:	100049cc 	.word	0x100049cc
 81074d0:	100049c8 	.word	0x100049c8

081074d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 81074d4:	b580      	push	{r7, lr}
 81074d6:	b08e      	sub	sp, #56	@ 0x38
 81074d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 81074da:	e0ce      	b.n	810767a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 81074dc:	687b      	ldr	r3, [r7, #4]
 81074de:	2b00      	cmp	r3, #0
 81074e0:	da19      	bge.n	8107516 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 81074e2:	1d3b      	adds	r3, r7, #4
 81074e4:	3304      	adds	r3, #4
 81074e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 81074e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81074ea:	2b00      	cmp	r3, #0
 81074ec:	d10b      	bne.n	8107506 <prvProcessReceivedCommands+0x32>
	__asm volatile
 81074ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81074f2:	f383 8811 	msr	BASEPRI, r3
 81074f6:	f3bf 8f6f 	isb	sy
 81074fa:	f3bf 8f4f 	dsb	sy
 81074fe:	61fb      	str	r3, [r7, #28]
}
 8107500:	bf00      	nop
 8107502:	bf00      	nop
 8107504:	e7fd      	b.n	8107502 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8107506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107508:	681b      	ldr	r3, [r3, #0]
 810750a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810750c:	6850      	ldr	r0, [r2, #4]
 810750e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8107510:	6892      	ldr	r2, [r2, #8]
 8107512:	4611      	mov	r1, r2
 8107514:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8107516:	687b      	ldr	r3, [r7, #4]
 8107518:	2b00      	cmp	r3, #0
 810751a:	f2c0 80ae 	blt.w	810767a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 810751e:	68fb      	ldr	r3, [r7, #12]
 8107520:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8107522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107524:	695b      	ldr	r3, [r3, #20]
 8107526:	2b00      	cmp	r3, #0
 8107528:	d004      	beq.n	8107534 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810752a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810752c:	3304      	adds	r3, #4
 810752e:	4618      	mov	r0, r3
 8107530:	f7fd f9ae 	bl	8104890 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8107534:	463b      	mov	r3, r7
 8107536:	4618      	mov	r0, r3
 8107538:	f7ff ff6a 	bl	8107410 <prvSampleTimeNow>
 810753c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 810753e:	687b      	ldr	r3, [r7, #4]
 8107540:	2b09      	cmp	r3, #9
 8107542:	f200 8097 	bhi.w	8107674 <prvProcessReceivedCommands+0x1a0>
 8107546:	a201      	add	r2, pc, #4	@ (adr r2, 810754c <prvProcessReceivedCommands+0x78>)
 8107548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810754c:	08107575 	.word	0x08107575
 8107550:	08107575 	.word	0x08107575
 8107554:	08107575 	.word	0x08107575
 8107558:	081075eb 	.word	0x081075eb
 810755c:	081075ff 	.word	0x081075ff
 8107560:	0810764b 	.word	0x0810764b
 8107564:	08107575 	.word	0x08107575
 8107568:	08107575 	.word	0x08107575
 810756c:	081075eb 	.word	0x081075eb
 8107570:	081075ff 	.word	0x081075ff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8107574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107576:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810757a:	f043 0301 	orr.w	r3, r3, #1
 810757e:	b2da      	uxtb	r2, r3
 8107580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107582:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8107586:	68ba      	ldr	r2, [r7, #8]
 8107588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810758a:	699b      	ldr	r3, [r3, #24]
 810758c:	18d1      	adds	r1, r2, r3
 810758e:	68bb      	ldr	r3, [r7, #8]
 8107590:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8107592:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8107594:	f7ff ff5c 	bl	8107450 <prvInsertTimerInActiveList>
 8107598:	4603      	mov	r3, r0
 810759a:	2b00      	cmp	r3, #0
 810759c:	d06c      	beq.n	8107678 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810759e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81075a0:	6a1b      	ldr	r3, [r3, #32]
 81075a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81075a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81075a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81075a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81075ac:	f003 0304 	and.w	r3, r3, #4
 81075b0:	2b00      	cmp	r3, #0
 81075b2:	d061      	beq.n	8107678 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 81075b4:	68ba      	ldr	r2, [r7, #8]
 81075b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81075b8:	699b      	ldr	r3, [r3, #24]
 81075ba:	441a      	add	r2, r3
 81075bc:	2300      	movs	r3, #0
 81075be:	9300      	str	r3, [sp, #0]
 81075c0:	2300      	movs	r3, #0
 81075c2:	2100      	movs	r1, #0
 81075c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81075c6:	f7ff fe01 	bl	81071cc <xTimerGenericCommand>
 81075ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 81075cc:	6a3b      	ldr	r3, [r7, #32]
 81075ce:	2b00      	cmp	r3, #0
 81075d0:	d152      	bne.n	8107678 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 81075d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81075d6:	f383 8811 	msr	BASEPRI, r3
 81075da:	f3bf 8f6f 	isb	sy
 81075de:	f3bf 8f4f 	dsb	sy
 81075e2:	61bb      	str	r3, [r7, #24]
}
 81075e4:	bf00      	nop
 81075e6:	bf00      	nop
 81075e8:	e7fd      	b.n	81075e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 81075ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81075ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81075f0:	f023 0301 	bic.w	r3, r3, #1
 81075f4:	b2da      	uxtb	r2, r3
 81075f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81075f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 81075fc:	e03d      	b.n	810767a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 81075fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107600:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8107604:	f043 0301 	orr.w	r3, r3, #1
 8107608:	b2da      	uxtb	r2, r3
 810760a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810760c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8107610:	68ba      	ldr	r2, [r7, #8]
 8107612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107614:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8107616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107618:	699b      	ldr	r3, [r3, #24]
 810761a:	2b00      	cmp	r3, #0
 810761c:	d10b      	bne.n	8107636 <prvProcessReceivedCommands+0x162>
	__asm volatile
 810761e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107622:	f383 8811 	msr	BASEPRI, r3
 8107626:	f3bf 8f6f 	isb	sy
 810762a:	f3bf 8f4f 	dsb	sy
 810762e:	617b      	str	r3, [r7, #20]
}
 8107630:	bf00      	nop
 8107632:	bf00      	nop
 8107634:	e7fd      	b.n	8107632 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8107636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107638:	699a      	ldr	r2, [r3, #24]
 810763a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810763c:	18d1      	adds	r1, r2, r3
 810763e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107640:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8107642:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8107644:	f7ff ff04 	bl	8107450 <prvInsertTimerInActiveList>
					break;
 8107648:	e017      	b.n	810767a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 810764a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810764c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8107650:	f003 0302 	and.w	r3, r3, #2
 8107654:	2b00      	cmp	r3, #0
 8107656:	d103      	bne.n	8107660 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8107658:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810765a:	f7fc ff6f 	bl	810453c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 810765e:	e00c      	b.n	810767a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8107660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107662:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8107666:	f023 0301 	bic.w	r3, r3, #1
 810766a:	b2da      	uxtb	r2, r3
 810766c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810766e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8107672:	e002      	b.n	810767a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8107674:	bf00      	nop
 8107676:	e000      	b.n	810767a <prvProcessReceivedCommands+0x1a6>
					break;
 8107678:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810767a:	4b08      	ldr	r3, [pc, #32]	@ (810769c <prvProcessReceivedCommands+0x1c8>)
 810767c:	681b      	ldr	r3, [r3, #0]
 810767e:	1d39      	adds	r1, r7, #4
 8107680:	2200      	movs	r2, #0
 8107682:	4618      	mov	r0, r3
 8107684:	f7fd fe68 	bl	8105358 <xQueueReceive>
 8107688:	4603      	mov	r3, r0
 810768a:	2b00      	cmp	r3, #0
 810768c:	f47f af26 	bne.w	81074dc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8107690:	bf00      	nop
 8107692:	bf00      	nop
 8107694:	3730      	adds	r7, #48	@ 0x30
 8107696:	46bd      	mov	sp, r7
 8107698:	bd80      	pop	{r7, pc}
 810769a:	bf00      	nop
 810769c:	100049d0 	.word	0x100049d0

081076a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 81076a0:	b580      	push	{r7, lr}
 81076a2:	b088      	sub	sp, #32
 81076a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 81076a6:	e049      	b.n	810773c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 81076a8:	4b2e      	ldr	r3, [pc, #184]	@ (8107764 <prvSwitchTimerLists+0xc4>)
 81076aa:	681b      	ldr	r3, [r3, #0]
 81076ac:	68db      	ldr	r3, [r3, #12]
 81076ae:	681b      	ldr	r3, [r3, #0]
 81076b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81076b2:	4b2c      	ldr	r3, [pc, #176]	@ (8107764 <prvSwitchTimerLists+0xc4>)
 81076b4:	681b      	ldr	r3, [r3, #0]
 81076b6:	68db      	ldr	r3, [r3, #12]
 81076b8:	68db      	ldr	r3, [r3, #12]
 81076ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 81076bc:	68fb      	ldr	r3, [r7, #12]
 81076be:	3304      	adds	r3, #4
 81076c0:	4618      	mov	r0, r3
 81076c2:	f7fd f8e5 	bl	8104890 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81076c6:	68fb      	ldr	r3, [r7, #12]
 81076c8:	6a1b      	ldr	r3, [r3, #32]
 81076ca:	68f8      	ldr	r0, [r7, #12]
 81076cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81076ce:	68fb      	ldr	r3, [r7, #12]
 81076d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81076d4:	f003 0304 	and.w	r3, r3, #4
 81076d8:	2b00      	cmp	r3, #0
 81076da:	d02f      	beq.n	810773c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 81076dc:	68fb      	ldr	r3, [r7, #12]
 81076de:	699b      	ldr	r3, [r3, #24]
 81076e0:	693a      	ldr	r2, [r7, #16]
 81076e2:	4413      	add	r3, r2
 81076e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 81076e6:	68ba      	ldr	r2, [r7, #8]
 81076e8:	693b      	ldr	r3, [r7, #16]
 81076ea:	429a      	cmp	r2, r3
 81076ec:	d90e      	bls.n	810770c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 81076ee:	68fb      	ldr	r3, [r7, #12]
 81076f0:	68ba      	ldr	r2, [r7, #8]
 81076f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 81076f4:	68fb      	ldr	r3, [r7, #12]
 81076f6:	68fa      	ldr	r2, [r7, #12]
 81076f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 81076fa:	4b1a      	ldr	r3, [pc, #104]	@ (8107764 <prvSwitchTimerLists+0xc4>)
 81076fc:	681a      	ldr	r2, [r3, #0]
 81076fe:	68fb      	ldr	r3, [r7, #12]
 8107700:	3304      	adds	r3, #4
 8107702:	4619      	mov	r1, r3
 8107704:	4610      	mov	r0, r2
 8107706:	f7fd f88a 	bl	810481e <vListInsert>
 810770a:	e017      	b.n	810773c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810770c:	2300      	movs	r3, #0
 810770e:	9300      	str	r3, [sp, #0]
 8107710:	2300      	movs	r3, #0
 8107712:	693a      	ldr	r2, [r7, #16]
 8107714:	2100      	movs	r1, #0
 8107716:	68f8      	ldr	r0, [r7, #12]
 8107718:	f7ff fd58 	bl	81071cc <xTimerGenericCommand>
 810771c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 810771e:	687b      	ldr	r3, [r7, #4]
 8107720:	2b00      	cmp	r3, #0
 8107722:	d10b      	bne.n	810773c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8107724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107728:	f383 8811 	msr	BASEPRI, r3
 810772c:	f3bf 8f6f 	isb	sy
 8107730:	f3bf 8f4f 	dsb	sy
 8107734:	603b      	str	r3, [r7, #0]
}
 8107736:	bf00      	nop
 8107738:	bf00      	nop
 810773a:	e7fd      	b.n	8107738 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810773c:	4b09      	ldr	r3, [pc, #36]	@ (8107764 <prvSwitchTimerLists+0xc4>)
 810773e:	681b      	ldr	r3, [r3, #0]
 8107740:	681b      	ldr	r3, [r3, #0]
 8107742:	2b00      	cmp	r3, #0
 8107744:	d1b0      	bne.n	81076a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8107746:	4b07      	ldr	r3, [pc, #28]	@ (8107764 <prvSwitchTimerLists+0xc4>)
 8107748:	681b      	ldr	r3, [r3, #0]
 810774a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 810774c:	4b06      	ldr	r3, [pc, #24]	@ (8107768 <prvSwitchTimerLists+0xc8>)
 810774e:	681b      	ldr	r3, [r3, #0]
 8107750:	4a04      	ldr	r2, [pc, #16]	@ (8107764 <prvSwitchTimerLists+0xc4>)
 8107752:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8107754:	4a04      	ldr	r2, [pc, #16]	@ (8107768 <prvSwitchTimerLists+0xc8>)
 8107756:	697b      	ldr	r3, [r7, #20]
 8107758:	6013      	str	r3, [r2, #0]
}
 810775a:	bf00      	nop
 810775c:	3718      	adds	r7, #24
 810775e:	46bd      	mov	sp, r7
 8107760:	bd80      	pop	{r7, pc}
 8107762:	bf00      	nop
 8107764:	100049c8 	.word	0x100049c8
 8107768:	100049cc 	.word	0x100049cc

0810776c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 810776c:	b580      	push	{r7, lr}
 810776e:	b082      	sub	sp, #8
 8107770:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8107772:	f7fd f9e9 	bl	8104b48 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8107776:	4b15      	ldr	r3, [pc, #84]	@ (81077cc <prvCheckForValidListAndQueue+0x60>)
 8107778:	681b      	ldr	r3, [r3, #0]
 810777a:	2b00      	cmp	r3, #0
 810777c:	d120      	bne.n	81077c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 810777e:	4814      	ldr	r0, [pc, #80]	@ (81077d0 <prvCheckForValidListAndQueue+0x64>)
 8107780:	f7fc fffc 	bl	810477c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8107784:	4813      	ldr	r0, [pc, #76]	@ (81077d4 <prvCheckForValidListAndQueue+0x68>)
 8107786:	f7fc fff9 	bl	810477c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 810778a:	4b13      	ldr	r3, [pc, #76]	@ (81077d8 <prvCheckForValidListAndQueue+0x6c>)
 810778c:	4a10      	ldr	r2, [pc, #64]	@ (81077d0 <prvCheckForValidListAndQueue+0x64>)
 810778e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8107790:	4b12      	ldr	r3, [pc, #72]	@ (81077dc <prvCheckForValidListAndQueue+0x70>)
 8107792:	4a10      	ldr	r2, [pc, #64]	@ (81077d4 <prvCheckForValidListAndQueue+0x68>)
 8107794:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8107796:	2300      	movs	r3, #0
 8107798:	9300      	str	r3, [sp, #0]
 810779a:	4b11      	ldr	r3, [pc, #68]	@ (81077e0 <prvCheckForValidListAndQueue+0x74>)
 810779c:	4a11      	ldr	r2, [pc, #68]	@ (81077e4 <prvCheckForValidListAndQueue+0x78>)
 810779e:	2110      	movs	r1, #16
 81077a0:	200a      	movs	r0, #10
 81077a2:	f7fd fb5d 	bl	8104e60 <xQueueGenericCreateStatic>
 81077a6:	4603      	mov	r3, r0
 81077a8:	4a08      	ldr	r2, [pc, #32]	@ (81077cc <prvCheckForValidListAndQueue+0x60>)
 81077aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 81077ac:	4b07      	ldr	r3, [pc, #28]	@ (81077cc <prvCheckForValidListAndQueue+0x60>)
 81077ae:	681b      	ldr	r3, [r3, #0]
 81077b0:	2b00      	cmp	r3, #0
 81077b2:	d005      	beq.n	81077c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 81077b4:	4b05      	ldr	r3, [pc, #20]	@ (81077cc <prvCheckForValidListAndQueue+0x60>)
 81077b6:	681b      	ldr	r3, [r3, #0]
 81077b8:	490b      	ldr	r1, [pc, #44]	@ (81077e8 <prvCheckForValidListAndQueue+0x7c>)
 81077ba:	4618      	mov	r0, r3
 81077bc:	f7fd ffbe 	bl	810573c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 81077c0:	f7fd f9f4 	bl	8104bac <vPortExitCritical>
}
 81077c4:	bf00      	nop
 81077c6:	46bd      	mov	sp, r7
 81077c8:	bd80      	pop	{r7, pc}
 81077ca:	bf00      	nop
 81077cc:	100049d0 	.word	0x100049d0
 81077d0:	100049a0 	.word	0x100049a0
 81077d4:	100049b4 	.word	0x100049b4
 81077d8:	100049c8 	.word	0x100049c8
 81077dc:	100049cc 	.word	0x100049cc
 81077e0:	10004a7c 	.word	0x10004a7c
 81077e4:	100049dc 	.word	0x100049dc
 81077e8:	08107e48 	.word	0x08107e48

081077ec <_ZdlPvj>:
 81077ec:	f000 b8da 	b.w	81079a4 <_ZdlPv>

081077f0 <_Znwj>:
 81077f0:	2801      	cmp	r0, #1
 81077f2:	bf38      	it	cc
 81077f4:	2001      	movcc	r0, #1
 81077f6:	b510      	push	{r4, lr}
 81077f8:	4604      	mov	r4, r0
 81077fa:	4620      	mov	r0, r4
 81077fc:	f000 f8e4 	bl	81079c8 <malloc>
 8107800:	b100      	cbz	r0, 8107804 <_Znwj+0x14>
 8107802:	bd10      	pop	{r4, pc}
 8107804:	f000 f8d0 	bl	81079a8 <_ZSt15get_new_handlerv>
 8107808:	b908      	cbnz	r0, 810780e <_Znwj+0x1e>
 810780a:	f000 f8d5 	bl	81079b8 <abort>
 810780e:	4780      	blx	r0
 8107810:	e7f3      	b.n	81077fa <_Znwj+0xa>

08107812 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8107812:	68c3      	ldr	r3, [r0, #12]
 8107814:	689a      	ldr	r2, [r3, #8]
 8107816:	60c2      	str	r2, [r0, #12]
 8107818:	b510      	push	{r4, lr}
 810781a:	b102      	cbz	r2, 810781e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 810781c:	6050      	str	r0, [r2, #4]
 810781e:	6842      	ldr	r2, [r0, #4]
 8107820:	605a      	str	r2, [r3, #4]
 8107822:	680c      	ldr	r4, [r1, #0]
 8107824:	4284      	cmp	r4, r0
 8107826:	d103      	bne.n	8107830 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 8107828:	600b      	str	r3, [r1, #0]
 810782a:	6098      	str	r0, [r3, #8]
 810782c:	6043      	str	r3, [r0, #4]
 810782e:	bd10      	pop	{r4, pc}
 8107830:	6891      	ldr	r1, [r2, #8]
 8107832:	4281      	cmp	r1, r0
 8107834:	bf0c      	ite	eq
 8107836:	6093      	streq	r3, [r2, #8]
 8107838:	60d3      	strne	r3, [r2, #12]
 810783a:	e7f6      	b.n	810782a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

0810783c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 810783c:	6883      	ldr	r3, [r0, #8]
 810783e:	68da      	ldr	r2, [r3, #12]
 8107840:	6082      	str	r2, [r0, #8]
 8107842:	b510      	push	{r4, lr}
 8107844:	b102      	cbz	r2, 8107848 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 8107846:	6050      	str	r0, [r2, #4]
 8107848:	6842      	ldr	r2, [r0, #4]
 810784a:	605a      	str	r2, [r3, #4]
 810784c:	680c      	ldr	r4, [r1, #0]
 810784e:	4284      	cmp	r4, r0
 8107850:	d103      	bne.n	810785a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 8107852:	600b      	str	r3, [r1, #0]
 8107854:	60d8      	str	r0, [r3, #12]
 8107856:	6043      	str	r3, [r0, #4]
 8107858:	bd10      	pop	{r4, pc}
 810785a:	68d1      	ldr	r1, [r2, #12]
 810785c:	4281      	cmp	r1, r0
 810785e:	bf0c      	ite	eq
 8107860:	60d3      	streq	r3, [r2, #12]
 8107862:	6093      	strne	r3, [r2, #8]
 8107864:	e7f6      	b.n	8107854 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

08107866 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8107866:	68c3      	ldr	r3, [r0, #12]
 8107868:	b123      	cbz	r3, 8107874 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 810786a:	4618      	mov	r0, r3
 810786c:	689b      	ldr	r3, [r3, #8]
 810786e:	2b00      	cmp	r3, #0
 8107870:	d1fb      	bne.n	810786a <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 8107872:	4770      	bx	lr
 8107874:	6843      	ldr	r3, [r0, #4]
 8107876:	68da      	ldr	r2, [r3, #12]
 8107878:	4282      	cmp	r2, r0
 810787a:	d004      	beq.n	8107886 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x20>
 810787c:	68c2      	ldr	r2, [r0, #12]
 810787e:	4293      	cmp	r3, r2
 8107880:	bf18      	it	ne
 8107882:	4618      	movne	r0, r3
 8107884:	4770      	bx	lr
 8107886:	4618      	mov	r0, r3
 8107888:	685b      	ldr	r3, [r3, #4]
 810788a:	e7f4      	b.n	8107876 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>

0810788c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 810788c:	7802      	ldrb	r2, [r0, #0]
 810788e:	4603      	mov	r3, r0
 8107890:	b92a      	cbnz	r2, 810789e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8107892:	6842      	ldr	r2, [r0, #4]
 8107894:	6852      	ldr	r2, [r2, #4]
 8107896:	4282      	cmp	r2, r0
 8107898:	d101      	bne.n	810789e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 810789a:	68d0      	ldr	r0, [r2, #12]
 810789c:	4770      	bx	lr
 810789e:	689a      	ldr	r2, [r3, #8]
 81078a0:	b122      	cbz	r2, 81078ac <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 81078a2:	4610      	mov	r0, r2
 81078a4:	68d2      	ldr	r2, [r2, #12]
 81078a6:	2a00      	cmp	r2, #0
 81078a8:	d1fb      	bne.n	81078a2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 81078aa:	4770      	bx	lr
 81078ac:	6858      	ldr	r0, [r3, #4]
 81078ae:	6882      	ldr	r2, [r0, #8]
 81078b0:	429a      	cmp	r2, r3
 81078b2:	d000      	beq.n	81078b6 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
 81078b4:	4770      	bx	lr
 81078b6:	4603      	mov	r3, r0
 81078b8:	6840      	ldr	r0, [r0, #4]
 81078ba:	e7f8      	b.n	81078ae <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

081078bc <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 81078bc:	f7ff bfd3 	b.w	8107866 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

081078c0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 81078c0:	f7ff bfe4 	b.w	810788c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

081078c4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 81078c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81078c8:	461d      	mov	r5, r3
 81078ca:	1d1f      	adds	r7, r3, #4
 81078cc:	2300      	movs	r3, #0
 81078ce:	e9c1 3302 	strd	r3, r3, [r1, #8]
 81078d2:	460c      	mov	r4, r1
 81078d4:	604a      	str	r2, [r1, #4]
 81078d6:	700b      	strb	r3, [r1, #0]
 81078d8:	b1a0      	cbz	r0, 8107904 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x40>
 81078da:	4295      	cmp	r5, r2
 81078dc:	6091      	str	r1, [r2, #8]
 81078de:	d102      	bne.n	81078e6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 81078e0:	6069      	str	r1, [r5, #4]
 81078e2:	60ec      	str	r4, [r5, #12]
 81078e4:	e003      	b.n	81078ee <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 81078e6:	68ab      	ldr	r3, [r5, #8]
 81078e8:	4293      	cmp	r3, r2
 81078ea:	bf08      	it	eq
 81078ec:	60a9      	streq	r1, [r5, #8]
 81078ee:	f04f 0900 	mov.w	r9, #0
 81078f2:	f04f 0801 	mov.w	r8, #1
 81078f6:	686b      	ldr	r3, [r5, #4]
 81078f8:	42a3      	cmp	r3, r4
 81078fa:	d132      	bne.n	8107962 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9e>
 81078fc:	2201      	movs	r2, #1
 81078fe:	701a      	strb	r2, [r3, #0]
 8107900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8107904:	60d1      	str	r1, [r2, #12]
 8107906:	68eb      	ldr	r3, [r5, #12]
 8107908:	4293      	cmp	r3, r2
 810790a:	d1f0      	bne.n	81078ee <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 810790c:	e7e9      	b.n	81078e2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x1e>
 810790e:	68c3      	ldr	r3, [r0, #12]
 8107910:	42a3      	cmp	r3, r4
 8107912:	d103      	bne.n	810791c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x58>
 8107914:	4639      	mov	r1, r7
 8107916:	f7ff ff7c 	bl	8107812 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 810791a:	4604      	mov	r4, r0
 810791c:	6863      	ldr	r3, [r4, #4]
 810791e:	4639      	mov	r1, r7
 8107920:	f883 8000 	strb.w	r8, [r3]
 8107924:	4630      	mov	r0, r6
 8107926:	f886 9000 	strb.w	r9, [r6]
 810792a:	f7ff ff87 	bl	810783c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 810792e:	e7e2      	b.n	81078f6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 8107930:	b133      	cbz	r3, 8107940 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 8107932:	781a      	ldrb	r2, [r3, #0]
 8107934:	b922      	cbnz	r2, 8107940 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 8107936:	f880 8000 	strb.w	r8, [r0]
 810793a:	f883 8000 	strb.w	r8, [r3]
 810793e:	e021      	b.n	8107984 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xc0>
 8107940:	6883      	ldr	r3, [r0, #8]
 8107942:	42a3      	cmp	r3, r4
 8107944:	d103      	bne.n	810794e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8a>
 8107946:	4639      	mov	r1, r7
 8107948:	f7ff ff78 	bl	810783c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 810794c:	4604      	mov	r4, r0
 810794e:	6863      	ldr	r3, [r4, #4]
 8107950:	4639      	mov	r1, r7
 8107952:	f883 8000 	strb.w	r8, [r3]
 8107956:	4630      	mov	r0, r6
 8107958:	f886 9000 	strb.w	r9, [r6]
 810795c:	f7ff ff59 	bl	8107812 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8107960:	e7c9      	b.n	81078f6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 8107962:	6860      	ldr	r0, [r4, #4]
 8107964:	7802      	ldrb	r2, [r0, #0]
 8107966:	2a00      	cmp	r2, #0
 8107968:	d1c8      	bne.n	81078fc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x38>
 810796a:	6846      	ldr	r6, [r0, #4]
 810796c:	68b3      	ldr	r3, [r6, #8]
 810796e:	4283      	cmp	r3, r0
 8107970:	d1de      	bne.n	8107930 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
 8107972:	68f2      	ldr	r2, [r6, #12]
 8107974:	2a00      	cmp	r2, #0
 8107976:	d0ca      	beq.n	810790e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 8107978:	7811      	ldrb	r1, [r2, #0]
 810797a:	2900      	cmp	r1, #0
 810797c:	d1c7      	bne.n	810790e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 810797e:	2101      	movs	r1, #1
 8107980:	7019      	strb	r1, [r3, #0]
 8107982:	7011      	strb	r1, [r2, #0]
 8107984:	f886 9000 	strb.w	r9, [r6]
 8107988:	4634      	mov	r4, r6
 810798a:	e7b4      	b.n	81078f6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>

0810798c <_ZSt17__throw_bad_allocv>:
 810798c:	b508      	push	{r3, lr}
 810798e:	f000 f813 	bl	81079b8 <abort>

08107992 <_ZSt28__throw_bad_array_new_lengthv>:
 8107992:	b508      	push	{r3, lr}
 8107994:	f000 f810 	bl	81079b8 <abort>

08107998 <_ZSt20__throw_length_errorPKc>:
 8107998:	b508      	push	{r3, lr}
 810799a:	f000 f80d 	bl	81079b8 <abort>

0810799e <_ZSt25__throw_bad_function_callv>:
 810799e:	b508      	push	{r3, lr}
 81079a0:	f000 f80a 	bl	81079b8 <abort>

081079a4 <_ZdlPv>:
 81079a4:	f000 b818 	b.w	81079d8 <free>

081079a8 <_ZSt15get_new_handlerv>:
 81079a8:	4b02      	ldr	r3, [pc, #8]	@ (81079b4 <_ZSt15get_new_handlerv+0xc>)
 81079aa:	6818      	ldr	r0, [r3, #0]
 81079ac:	f3bf 8f5b 	dmb	ish
 81079b0:	4770      	bx	lr
 81079b2:	bf00      	nop
 81079b4:	10004acc 	.word	0x10004acc

081079b8 <abort>:
 81079b8:	b508      	push	{r3, lr}
 81079ba:	2006      	movs	r0, #6
 81079bc:	f000 f90c 	bl	8107bd8 <raise>
 81079c0:	2001      	movs	r0, #1
 81079c2:	f7f8 ff51 	bl	8100868 <_exit>
	...

081079c8 <malloc>:
 81079c8:	4b02      	ldr	r3, [pc, #8]	@ (81079d4 <malloc+0xc>)
 81079ca:	4601      	mov	r1, r0
 81079cc:	6818      	ldr	r0, [r3, #0]
 81079ce:	f000 b82d 	b.w	8107a2c <_malloc_r>
 81079d2:	bf00      	nop
 81079d4:	10000014 	.word	0x10000014

081079d8 <free>:
 81079d8:	4b02      	ldr	r3, [pc, #8]	@ (81079e4 <free+0xc>)
 81079da:	4601      	mov	r1, r0
 81079dc:	6818      	ldr	r0, [r3, #0]
 81079de:	f000 b9b7 	b.w	8107d50 <_free_r>
 81079e2:	bf00      	nop
 81079e4:	10000014 	.word	0x10000014

081079e8 <sbrk_aligned>:
 81079e8:	b570      	push	{r4, r5, r6, lr}
 81079ea:	4e0f      	ldr	r6, [pc, #60]	@ (8107a28 <sbrk_aligned+0x40>)
 81079ec:	460c      	mov	r4, r1
 81079ee:	6831      	ldr	r1, [r6, #0]
 81079f0:	4605      	mov	r5, r0
 81079f2:	b911      	cbnz	r1, 81079fa <sbrk_aligned+0x12>
 81079f4:	f000 f962 	bl	8107cbc <_sbrk_r>
 81079f8:	6030      	str	r0, [r6, #0]
 81079fa:	4621      	mov	r1, r4
 81079fc:	4628      	mov	r0, r5
 81079fe:	f000 f95d 	bl	8107cbc <_sbrk_r>
 8107a02:	1c43      	adds	r3, r0, #1
 8107a04:	d103      	bne.n	8107a0e <sbrk_aligned+0x26>
 8107a06:	f04f 34ff 	mov.w	r4, #4294967295
 8107a0a:	4620      	mov	r0, r4
 8107a0c:	bd70      	pop	{r4, r5, r6, pc}
 8107a0e:	1cc4      	adds	r4, r0, #3
 8107a10:	f024 0403 	bic.w	r4, r4, #3
 8107a14:	42a0      	cmp	r0, r4
 8107a16:	d0f8      	beq.n	8107a0a <sbrk_aligned+0x22>
 8107a18:	1a21      	subs	r1, r4, r0
 8107a1a:	4628      	mov	r0, r5
 8107a1c:	f000 f94e 	bl	8107cbc <_sbrk_r>
 8107a20:	3001      	adds	r0, #1
 8107a22:	d1f2      	bne.n	8107a0a <sbrk_aligned+0x22>
 8107a24:	e7ef      	b.n	8107a06 <sbrk_aligned+0x1e>
 8107a26:	bf00      	nop
 8107a28:	10004ad0 	.word	0x10004ad0

08107a2c <_malloc_r>:
 8107a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8107a30:	1ccd      	adds	r5, r1, #3
 8107a32:	f025 0503 	bic.w	r5, r5, #3
 8107a36:	3508      	adds	r5, #8
 8107a38:	2d0c      	cmp	r5, #12
 8107a3a:	bf38      	it	cc
 8107a3c:	250c      	movcc	r5, #12
 8107a3e:	2d00      	cmp	r5, #0
 8107a40:	4606      	mov	r6, r0
 8107a42:	db01      	blt.n	8107a48 <_malloc_r+0x1c>
 8107a44:	42a9      	cmp	r1, r5
 8107a46:	d904      	bls.n	8107a52 <_malloc_r+0x26>
 8107a48:	230c      	movs	r3, #12
 8107a4a:	6033      	str	r3, [r6, #0]
 8107a4c:	2000      	movs	r0, #0
 8107a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8107a52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8107b28 <_malloc_r+0xfc>
 8107a56:	f000 f869 	bl	8107b2c <__malloc_lock>
 8107a5a:	f8d8 3000 	ldr.w	r3, [r8]
 8107a5e:	461c      	mov	r4, r3
 8107a60:	bb44      	cbnz	r4, 8107ab4 <_malloc_r+0x88>
 8107a62:	4629      	mov	r1, r5
 8107a64:	4630      	mov	r0, r6
 8107a66:	f7ff ffbf 	bl	81079e8 <sbrk_aligned>
 8107a6a:	1c43      	adds	r3, r0, #1
 8107a6c:	4604      	mov	r4, r0
 8107a6e:	d158      	bne.n	8107b22 <_malloc_r+0xf6>
 8107a70:	f8d8 4000 	ldr.w	r4, [r8]
 8107a74:	4627      	mov	r7, r4
 8107a76:	2f00      	cmp	r7, #0
 8107a78:	d143      	bne.n	8107b02 <_malloc_r+0xd6>
 8107a7a:	2c00      	cmp	r4, #0
 8107a7c:	d04b      	beq.n	8107b16 <_malloc_r+0xea>
 8107a7e:	6823      	ldr	r3, [r4, #0]
 8107a80:	4639      	mov	r1, r7
 8107a82:	4630      	mov	r0, r6
 8107a84:	eb04 0903 	add.w	r9, r4, r3
 8107a88:	f000 f918 	bl	8107cbc <_sbrk_r>
 8107a8c:	4581      	cmp	r9, r0
 8107a8e:	d142      	bne.n	8107b16 <_malloc_r+0xea>
 8107a90:	6821      	ldr	r1, [r4, #0]
 8107a92:	1a6d      	subs	r5, r5, r1
 8107a94:	4629      	mov	r1, r5
 8107a96:	4630      	mov	r0, r6
 8107a98:	f7ff ffa6 	bl	81079e8 <sbrk_aligned>
 8107a9c:	3001      	adds	r0, #1
 8107a9e:	d03a      	beq.n	8107b16 <_malloc_r+0xea>
 8107aa0:	6823      	ldr	r3, [r4, #0]
 8107aa2:	442b      	add	r3, r5
 8107aa4:	6023      	str	r3, [r4, #0]
 8107aa6:	f8d8 3000 	ldr.w	r3, [r8]
 8107aaa:	685a      	ldr	r2, [r3, #4]
 8107aac:	bb62      	cbnz	r2, 8107b08 <_malloc_r+0xdc>
 8107aae:	f8c8 7000 	str.w	r7, [r8]
 8107ab2:	e00f      	b.n	8107ad4 <_malloc_r+0xa8>
 8107ab4:	6822      	ldr	r2, [r4, #0]
 8107ab6:	1b52      	subs	r2, r2, r5
 8107ab8:	d420      	bmi.n	8107afc <_malloc_r+0xd0>
 8107aba:	2a0b      	cmp	r2, #11
 8107abc:	d917      	bls.n	8107aee <_malloc_r+0xc2>
 8107abe:	1961      	adds	r1, r4, r5
 8107ac0:	42a3      	cmp	r3, r4
 8107ac2:	6025      	str	r5, [r4, #0]
 8107ac4:	bf18      	it	ne
 8107ac6:	6059      	strne	r1, [r3, #4]
 8107ac8:	6863      	ldr	r3, [r4, #4]
 8107aca:	bf08      	it	eq
 8107acc:	f8c8 1000 	streq.w	r1, [r8]
 8107ad0:	5162      	str	r2, [r4, r5]
 8107ad2:	604b      	str	r3, [r1, #4]
 8107ad4:	4630      	mov	r0, r6
 8107ad6:	f000 f82f 	bl	8107b38 <__malloc_unlock>
 8107ada:	f104 000b 	add.w	r0, r4, #11
 8107ade:	1d23      	adds	r3, r4, #4
 8107ae0:	f020 0007 	bic.w	r0, r0, #7
 8107ae4:	1ac2      	subs	r2, r0, r3
 8107ae6:	bf1c      	itt	ne
 8107ae8:	1a1b      	subne	r3, r3, r0
 8107aea:	50a3      	strne	r3, [r4, r2]
 8107aec:	e7af      	b.n	8107a4e <_malloc_r+0x22>
 8107aee:	6862      	ldr	r2, [r4, #4]
 8107af0:	42a3      	cmp	r3, r4
 8107af2:	bf0c      	ite	eq
 8107af4:	f8c8 2000 	streq.w	r2, [r8]
 8107af8:	605a      	strne	r2, [r3, #4]
 8107afa:	e7eb      	b.n	8107ad4 <_malloc_r+0xa8>
 8107afc:	4623      	mov	r3, r4
 8107afe:	6864      	ldr	r4, [r4, #4]
 8107b00:	e7ae      	b.n	8107a60 <_malloc_r+0x34>
 8107b02:	463c      	mov	r4, r7
 8107b04:	687f      	ldr	r7, [r7, #4]
 8107b06:	e7b6      	b.n	8107a76 <_malloc_r+0x4a>
 8107b08:	461a      	mov	r2, r3
 8107b0a:	685b      	ldr	r3, [r3, #4]
 8107b0c:	42a3      	cmp	r3, r4
 8107b0e:	d1fb      	bne.n	8107b08 <_malloc_r+0xdc>
 8107b10:	2300      	movs	r3, #0
 8107b12:	6053      	str	r3, [r2, #4]
 8107b14:	e7de      	b.n	8107ad4 <_malloc_r+0xa8>
 8107b16:	230c      	movs	r3, #12
 8107b18:	6033      	str	r3, [r6, #0]
 8107b1a:	4630      	mov	r0, r6
 8107b1c:	f000 f80c 	bl	8107b38 <__malloc_unlock>
 8107b20:	e794      	b.n	8107a4c <_malloc_r+0x20>
 8107b22:	6005      	str	r5, [r0, #0]
 8107b24:	e7d6      	b.n	8107ad4 <_malloc_r+0xa8>
 8107b26:	bf00      	nop
 8107b28:	10004ad4 	.word	0x10004ad4

08107b2c <__malloc_lock>:
 8107b2c:	4801      	ldr	r0, [pc, #4]	@ (8107b34 <__malloc_lock+0x8>)
 8107b2e:	f000 b8ff 	b.w	8107d30 <__retarget_lock_acquire_recursive>
 8107b32:	bf00      	nop
 8107b34:	10004c14 	.word	0x10004c14

08107b38 <__malloc_unlock>:
 8107b38:	4801      	ldr	r0, [pc, #4]	@ (8107b40 <__malloc_unlock+0x8>)
 8107b3a:	f000 b8fa 	b.w	8107d32 <__retarget_lock_release_recursive>
 8107b3e:	bf00      	nop
 8107b40:	10004c14 	.word	0x10004c14

08107b44 <memmove>:
 8107b44:	4288      	cmp	r0, r1
 8107b46:	b510      	push	{r4, lr}
 8107b48:	eb01 0402 	add.w	r4, r1, r2
 8107b4c:	d902      	bls.n	8107b54 <memmove+0x10>
 8107b4e:	4284      	cmp	r4, r0
 8107b50:	4623      	mov	r3, r4
 8107b52:	d807      	bhi.n	8107b64 <memmove+0x20>
 8107b54:	1e43      	subs	r3, r0, #1
 8107b56:	42a1      	cmp	r1, r4
 8107b58:	d008      	beq.n	8107b6c <memmove+0x28>
 8107b5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8107b5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8107b62:	e7f8      	b.n	8107b56 <memmove+0x12>
 8107b64:	4402      	add	r2, r0
 8107b66:	4601      	mov	r1, r0
 8107b68:	428a      	cmp	r2, r1
 8107b6a:	d100      	bne.n	8107b6e <memmove+0x2a>
 8107b6c:	bd10      	pop	{r4, pc}
 8107b6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8107b72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8107b76:	e7f7      	b.n	8107b68 <memmove+0x24>

08107b78 <memset>:
 8107b78:	4402      	add	r2, r0
 8107b7a:	4603      	mov	r3, r0
 8107b7c:	4293      	cmp	r3, r2
 8107b7e:	d100      	bne.n	8107b82 <memset+0xa>
 8107b80:	4770      	bx	lr
 8107b82:	f803 1b01 	strb.w	r1, [r3], #1
 8107b86:	e7f9      	b.n	8107b7c <memset+0x4>

08107b88 <_raise_r>:
 8107b88:	291f      	cmp	r1, #31
 8107b8a:	b538      	push	{r3, r4, r5, lr}
 8107b8c:	4605      	mov	r5, r0
 8107b8e:	460c      	mov	r4, r1
 8107b90:	d904      	bls.n	8107b9c <_raise_r+0x14>
 8107b92:	2316      	movs	r3, #22
 8107b94:	6003      	str	r3, [r0, #0]
 8107b96:	f04f 30ff 	mov.w	r0, #4294967295
 8107b9a:	bd38      	pop	{r3, r4, r5, pc}
 8107b9c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8107b9e:	b112      	cbz	r2, 8107ba6 <_raise_r+0x1e>
 8107ba0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8107ba4:	b94b      	cbnz	r3, 8107bba <_raise_r+0x32>
 8107ba6:	4628      	mov	r0, r5
 8107ba8:	f000 f886 	bl	8107cb8 <_getpid_r>
 8107bac:	4622      	mov	r2, r4
 8107bae:	4601      	mov	r1, r0
 8107bb0:	4628      	mov	r0, r5
 8107bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8107bb6:	f000 b86d 	b.w	8107c94 <_kill_r>
 8107bba:	2b01      	cmp	r3, #1
 8107bbc:	d00a      	beq.n	8107bd4 <_raise_r+0x4c>
 8107bbe:	1c59      	adds	r1, r3, #1
 8107bc0:	d103      	bne.n	8107bca <_raise_r+0x42>
 8107bc2:	2316      	movs	r3, #22
 8107bc4:	6003      	str	r3, [r0, #0]
 8107bc6:	2001      	movs	r0, #1
 8107bc8:	e7e7      	b.n	8107b9a <_raise_r+0x12>
 8107bca:	2100      	movs	r1, #0
 8107bcc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8107bd0:	4620      	mov	r0, r4
 8107bd2:	4798      	blx	r3
 8107bd4:	2000      	movs	r0, #0
 8107bd6:	e7e0      	b.n	8107b9a <_raise_r+0x12>

08107bd8 <raise>:
 8107bd8:	4b02      	ldr	r3, [pc, #8]	@ (8107be4 <raise+0xc>)
 8107bda:	4601      	mov	r1, r0
 8107bdc:	6818      	ldr	r0, [r3, #0]
 8107bde:	f7ff bfd3 	b.w	8107b88 <_raise_r>
 8107be2:	bf00      	nop
 8107be4:	10000014 	.word	0x10000014

08107be8 <_reclaim_reent>:
 8107be8:	4b29      	ldr	r3, [pc, #164]	@ (8107c90 <_reclaim_reent+0xa8>)
 8107bea:	681b      	ldr	r3, [r3, #0]
 8107bec:	4283      	cmp	r3, r0
 8107bee:	b570      	push	{r4, r5, r6, lr}
 8107bf0:	4604      	mov	r4, r0
 8107bf2:	d04b      	beq.n	8107c8c <_reclaim_reent+0xa4>
 8107bf4:	69c3      	ldr	r3, [r0, #28]
 8107bf6:	b1ab      	cbz	r3, 8107c24 <_reclaim_reent+0x3c>
 8107bf8:	68db      	ldr	r3, [r3, #12]
 8107bfa:	b16b      	cbz	r3, 8107c18 <_reclaim_reent+0x30>
 8107bfc:	2500      	movs	r5, #0
 8107bfe:	69e3      	ldr	r3, [r4, #28]
 8107c00:	68db      	ldr	r3, [r3, #12]
 8107c02:	5959      	ldr	r1, [r3, r5]
 8107c04:	2900      	cmp	r1, #0
 8107c06:	d13b      	bne.n	8107c80 <_reclaim_reent+0x98>
 8107c08:	3504      	adds	r5, #4
 8107c0a:	2d80      	cmp	r5, #128	@ 0x80
 8107c0c:	d1f7      	bne.n	8107bfe <_reclaim_reent+0x16>
 8107c0e:	69e3      	ldr	r3, [r4, #28]
 8107c10:	4620      	mov	r0, r4
 8107c12:	68d9      	ldr	r1, [r3, #12]
 8107c14:	f000 f89c 	bl	8107d50 <_free_r>
 8107c18:	69e3      	ldr	r3, [r4, #28]
 8107c1a:	6819      	ldr	r1, [r3, #0]
 8107c1c:	b111      	cbz	r1, 8107c24 <_reclaim_reent+0x3c>
 8107c1e:	4620      	mov	r0, r4
 8107c20:	f000 f896 	bl	8107d50 <_free_r>
 8107c24:	6961      	ldr	r1, [r4, #20]
 8107c26:	b111      	cbz	r1, 8107c2e <_reclaim_reent+0x46>
 8107c28:	4620      	mov	r0, r4
 8107c2a:	f000 f891 	bl	8107d50 <_free_r>
 8107c2e:	69e1      	ldr	r1, [r4, #28]
 8107c30:	b111      	cbz	r1, 8107c38 <_reclaim_reent+0x50>
 8107c32:	4620      	mov	r0, r4
 8107c34:	f000 f88c 	bl	8107d50 <_free_r>
 8107c38:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8107c3a:	b111      	cbz	r1, 8107c42 <_reclaim_reent+0x5a>
 8107c3c:	4620      	mov	r0, r4
 8107c3e:	f000 f887 	bl	8107d50 <_free_r>
 8107c42:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8107c44:	b111      	cbz	r1, 8107c4c <_reclaim_reent+0x64>
 8107c46:	4620      	mov	r0, r4
 8107c48:	f000 f882 	bl	8107d50 <_free_r>
 8107c4c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8107c4e:	b111      	cbz	r1, 8107c56 <_reclaim_reent+0x6e>
 8107c50:	4620      	mov	r0, r4
 8107c52:	f000 f87d 	bl	8107d50 <_free_r>
 8107c56:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8107c58:	b111      	cbz	r1, 8107c60 <_reclaim_reent+0x78>
 8107c5a:	4620      	mov	r0, r4
 8107c5c:	f000 f878 	bl	8107d50 <_free_r>
 8107c60:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8107c62:	b111      	cbz	r1, 8107c6a <_reclaim_reent+0x82>
 8107c64:	4620      	mov	r0, r4
 8107c66:	f000 f873 	bl	8107d50 <_free_r>
 8107c6a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8107c6c:	b111      	cbz	r1, 8107c74 <_reclaim_reent+0x8c>
 8107c6e:	4620      	mov	r0, r4
 8107c70:	f000 f86e 	bl	8107d50 <_free_r>
 8107c74:	6a23      	ldr	r3, [r4, #32]
 8107c76:	b14b      	cbz	r3, 8107c8c <_reclaim_reent+0xa4>
 8107c78:	4620      	mov	r0, r4
 8107c7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8107c7e:	4718      	bx	r3
 8107c80:	680e      	ldr	r6, [r1, #0]
 8107c82:	4620      	mov	r0, r4
 8107c84:	f000 f864 	bl	8107d50 <_free_r>
 8107c88:	4631      	mov	r1, r6
 8107c8a:	e7bb      	b.n	8107c04 <_reclaim_reent+0x1c>
 8107c8c:	bd70      	pop	{r4, r5, r6, pc}
 8107c8e:	bf00      	nop
 8107c90:	10000014 	.word	0x10000014

08107c94 <_kill_r>:
 8107c94:	b538      	push	{r3, r4, r5, lr}
 8107c96:	4d07      	ldr	r5, [pc, #28]	@ (8107cb4 <_kill_r+0x20>)
 8107c98:	2300      	movs	r3, #0
 8107c9a:	4604      	mov	r4, r0
 8107c9c:	4608      	mov	r0, r1
 8107c9e:	4611      	mov	r1, r2
 8107ca0:	602b      	str	r3, [r5, #0]
 8107ca2:	f7f8 fdd1 	bl	8100848 <_kill>
 8107ca6:	1c43      	adds	r3, r0, #1
 8107ca8:	d102      	bne.n	8107cb0 <_kill_r+0x1c>
 8107caa:	682b      	ldr	r3, [r5, #0]
 8107cac:	b103      	cbz	r3, 8107cb0 <_kill_r+0x1c>
 8107cae:	6023      	str	r3, [r4, #0]
 8107cb0:	bd38      	pop	{r3, r4, r5, pc}
 8107cb2:	bf00      	nop
 8107cb4:	10004c10 	.word	0x10004c10

08107cb8 <_getpid_r>:
 8107cb8:	f7f8 bdbe 	b.w	8100838 <_getpid>

08107cbc <_sbrk_r>:
 8107cbc:	b538      	push	{r3, r4, r5, lr}
 8107cbe:	4d06      	ldr	r5, [pc, #24]	@ (8107cd8 <_sbrk_r+0x1c>)
 8107cc0:	2300      	movs	r3, #0
 8107cc2:	4604      	mov	r4, r0
 8107cc4:	4608      	mov	r0, r1
 8107cc6:	602b      	str	r3, [r5, #0]
 8107cc8:	f7f8 fdda 	bl	8100880 <_sbrk>
 8107ccc:	1c43      	adds	r3, r0, #1
 8107cce:	d102      	bne.n	8107cd6 <_sbrk_r+0x1a>
 8107cd0:	682b      	ldr	r3, [r5, #0]
 8107cd2:	b103      	cbz	r3, 8107cd6 <_sbrk_r+0x1a>
 8107cd4:	6023      	str	r3, [r4, #0]
 8107cd6:	bd38      	pop	{r3, r4, r5, pc}
 8107cd8:	10004c10 	.word	0x10004c10

08107cdc <__errno>:
 8107cdc:	4b01      	ldr	r3, [pc, #4]	@ (8107ce4 <__errno+0x8>)
 8107cde:	6818      	ldr	r0, [r3, #0]
 8107ce0:	4770      	bx	lr
 8107ce2:	bf00      	nop
 8107ce4:	10000014 	.word	0x10000014

08107ce8 <__libc_init_array>:
 8107ce8:	b570      	push	{r4, r5, r6, lr}
 8107cea:	4d0d      	ldr	r5, [pc, #52]	@ (8107d20 <__libc_init_array+0x38>)
 8107cec:	4c0d      	ldr	r4, [pc, #52]	@ (8107d24 <__libc_init_array+0x3c>)
 8107cee:	1b64      	subs	r4, r4, r5
 8107cf0:	10a4      	asrs	r4, r4, #2
 8107cf2:	2600      	movs	r6, #0
 8107cf4:	42a6      	cmp	r6, r4
 8107cf6:	d109      	bne.n	8107d0c <__libc_init_array+0x24>
 8107cf8:	4d0b      	ldr	r5, [pc, #44]	@ (8107d28 <__libc_init_array+0x40>)
 8107cfa:	4c0c      	ldr	r4, [pc, #48]	@ (8107d2c <__libc_init_array+0x44>)
 8107cfc:	f000 f872 	bl	8107de4 <_init>
 8107d00:	1b64      	subs	r4, r4, r5
 8107d02:	10a4      	asrs	r4, r4, #2
 8107d04:	2600      	movs	r6, #0
 8107d06:	42a6      	cmp	r6, r4
 8107d08:	d105      	bne.n	8107d16 <__libc_init_array+0x2e>
 8107d0a:	bd70      	pop	{r4, r5, r6, pc}
 8107d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8107d10:	4798      	blx	r3
 8107d12:	3601      	adds	r6, #1
 8107d14:	e7ee      	b.n	8107cf4 <__libc_init_array+0xc>
 8107d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8107d1a:	4798      	blx	r3
 8107d1c:	3601      	adds	r6, #1
 8107d1e:	e7f2      	b.n	8107d06 <__libc_init_array+0x1e>
 8107d20:	08107eac 	.word	0x08107eac
 8107d24:	08107eac 	.word	0x08107eac
 8107d28:	08107eac 	.word	0x08107eac
 8107d2c:	08107eb4 	.word	0x08107eb4

08107d30 <__retarget_lock_acquire_recursive>:
 8107d30:	4770      	bx	lr

08107d32 <__retarget_lock_release_recursive>:
 8107d32:	4770      	bx	lr

08107d34 <memcpy>:
 8107d34:	440a      	add	r2, r1
 8107d36:	4291      	cmp	r1, r2
 8107d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8107d3c:	d100      	bne.n	8107d40 <memcpy+0xc>
 8107d3e:	4770      	bx	lr
 8107d40:	b510      	push	{r4, lr}
 8107d42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8107d46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8107d4a:	4291      	cmp	r1, r2
 8107d4c:	d1f9      	bne.n	8107d42 <memcpy+0xe>
 8107d4e:	bd10      	pop	{r4, pc}

08107d50 <_free_r>:
 8107d50:	b538      	push	{r3, r4, r5, lr}
 8107d52:	4605      	mov	r5, r0
 8107d54:	2900      	cmp	r1, #0
 8107d56:	d041      	beq.n	8107ddc <_free_r+0x8c>
 8107d58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8107d5c:	1f0c      	subs	r4, r1, #4
 8107d5e:	2b00      	cmp	r3, #0
 8107d60:	bfb8      	it	lt
 8107d62:	18e4      	addlt	r4, r4, r3
 8107d64:	f7ff fee2 	bl	8107b2c <__malloc_lock>
 8107d68:	4a1d      	ldr	r2, [pc, #116]	@ (8107de0 <_free_r+0x90>)
 8107d6a:	6813      	ldr	r3, [r2, #0]
 8107d6c:	b933      	cbnz	r3, 8107d7c <_free_r+0x2c>
 8107d6e:	6063      	str	r3, [r4, #4]
 8107d70:	6014      	str	r4, [r2, #0]
 8107d72:	4628      	mov	r0, r5
 8107d74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8107d78:	f7ff bede 	b.w	8107b38 <__malloc_unlock>
 8107d7c:	42a3      	cmp	r3, r4
 8107d7e:	d908      	bls.n	8107d92 <_free_r+0x42>
 8107d80:	6820      	ldr	r0, [r4, #0]
 8107d82:	1821      	adds	r1, r4, r0
 8107d84:	428b      	cmp	r3, r1
 8107d86:	bf01      	itttt	eq
 8107d88:	6819      	ldreq	r1, [r3, #0]
 8107d8a:	685b      	ldreq	r3, [r3, #4]
 8107d8c:	1809      	addeq	r1, r1, r0
 8107d8e:	6021      	streq	r1, [r4, #0]
 8107d90:	e7ed      	b.n	8107d6e <_free_r+0x1e>
 8107d92:	461a      	mov	r2, r3
 8107d94:	685b      	ldr	r3, [r3, #4]
 8107d96:	b10b      	cbz	r3, 8107d9c <_free_r+0x4c>
 8107d98:	42a3      	cmp	r3, r4
 8107d9a:	d9fa      	bls.n	8107d92 <_free_r+0x42>
 8107d9c:	6811      	ldr	r1, [r2, #0]
 8107d9e:	1850      	adds	r0, r2, r1
 8107da0:	42a0      	cmp	r0, r4
 8107da2:	d10b      	bne.n	8107dbc <_free_r+0x6c>
 8107da4:	6820      	ldr	r0, [r4, #0]
 8107da6:	4401      	add	r1, r0
 8107da8:	1850      	adds	r0, r2, r1
 8107daa:	4283      	cmp	r3, r0
 8107dac:	6011      	str	r1, [r2, #0]
 8107dae:	d1e0      	bne.n	8107d72 <_free_r+0x22>
 8107db0:	6818      	ldr	r0, [r3, #0]
 8107db2:	685b      	ldr	r3, [r3, #4]
 8107db4:	6053      	str	r3, [r2, #4]
 8107db6:	4408      	add	r0, r1
 8107db8:	6010      	str	r0, [r2, #0]
 8107dba:	e7da      	b.n	8107d72 <_free_r+0x22>
 8107dbc:	d902      	bls.n	8107dc4 <_free_r+0x74>
 8107dbe:	230c      	movs	r3, #12
 8107dc0:	602b      	str	r3, [r5, #0]
 8107dc2:	e7d6      	b.n	8107d72 <_free_r+0x22>
 8107dc4:	6820      	ldr	r0, [r4, #0]
 8107dc6:	1821      	adds	r1, r4, r0
 8107dc8:	428b      	cmp	r3, r1
 8107dca:	bf04      	itt	eq
 8107dcc:	6819      	ldreq	r1, [r3, #0]
 8107dce:	685b      	ldreq	r3, [r3, #4]
 8107dd0:	6063      	str	r3, [r4, #4]
 8107dd2:	bf04      	itt	eq
 8107dd4:	1809      	addeq	r1, r1, r0
 8107dd6:	6021      	streq	r1, [r4, #0]
 8107dd8:	6054      	str	r4, [r2, #4]
 8107dda:	e7ca      	b.n	8107d72 <_free_r+0x22>
 8107ddc:	bd38      	pop	{r3, r4, r5, pc}
 8107dde:	bf00      	nop
 8107de0:	10004ad4 	.word	0x10004ad4

08107de4 <_init>:
 8107de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107de6:	bf00      	nop
 8107de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8107dea:	bc08      	pop	{r3}
 8107dec:	469e      	mov	lr, r3
 8107dee:	4770      	bx	lr

08107df0 <_fini>:
 8107df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107df2:	bf00      	nop
 8107df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8107df6:	bc08      	pop	{r3}
 8107df8:	469e      	mov	lr, r3
 8107dfa:	4770      	bx	lr
