
STM32H747I-DISCO_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .shared_ram   00000b40  38000000  38000000  0000b000  2**2
                  ALLOC
  2 .text         00007e30  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000e4  081080d0  081080d0  000090d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  081081b4  081081b4  000091b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  081081bc  081081bc  000091bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000064  10000000  081081c0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004c74  10000064  08108224  0000a064  2**2
                  ALLOC
  8 ._user_heap_stack 00002000  10004cd8  08108224  0000acd8  2**0
                  ALLOC
  9 .lwip_sec     00020200  10020000  10020000  0000b000  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0000a064  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003159f  00000000  00000000  0000a094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00005ead  00000000  00000000  0003b633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002120  00000000  00000000  000414e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001965  00000000  00000000  00043600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004b0dc  00000000  00000000  00044f65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000249a9  00000000  00000000  00090041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001d4166  00000000  00000000  000b49ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00288b50  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000096e0  00000000  00000000  00288b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000008d  00000000  00000000  00292274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000064 	.word	0x10000064
 81002bc:	00000000 	.word	0x00000000
 81002c0:	081080b8 	.word	0x081080b8

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000068 	.word	0x10000068
 81002dc:	081080b8 	.word	0x081080b8

081002e0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 81002e0:	b580      	push	{r7, lr}
 81002e2:	b082      	sub	sp, #8
 81002e4:	af00      	add	r7, sp, #0
 81002e6:	6078      	str	r0, [r7, #4]
  if((SemMask &  __HAL_HSEM_SEMID_TO_MASK(HSEM_RX_ID))!= 0)
 81002e8:	687b      	ldr	r3, [r7, #4]
 81002ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 81002ee:	2b00      	cmp	r3, #0
 81002f0:	d005      	beq.n	81002fe <HAL_HSEM_FreeCallback+0x1e>
  {
    /* Re-Activate HSEM notification */
    HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_RX_ID));
 81002f2:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 81002f6:	f003 fb47 	bl	8103988 <HAL_HSEM_ActivateNotification>
    /* New message received */
    prvCoreInterruptHandler();
 81002fa:	f000 f86b 	bl	81003d4 <prvCoreInterruptHandler>
  }

  if((SemMask & __HAL_HSEM_SEMID_TO_MASK(HSEM_TX_WAKEUP)) !=0){
 81002fe:	687b      	ldr	r3, [r7, #4]
 8100300:	2b00      	cmp	r3, #0
 8100302:	da05      	bge.n	8100310 <HAL_HSEM_FreeCallback+0x30>
	/* Re-Activate HSEM notification */
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_TX_WAKEUP));
 8100304:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8100308:	f003 fb3e 	bl	8103988 <HAL_HSEM_ActivateNotification>
	/* TX queue is empty => wake-up task trying to send a message */
	prvCoreWakeupInterruptHandler();
 810030c:	f000 f886 	bl	810041c <prvCoreWakeupInterruptHandler>
  }
}
 8100310:	bf00      	nop
 8100312:	3708      	adds	r7, #8
 8100314:	46bd      	mov	sp, r7
 8100316:	bd80      	pop	{r7, pc}

08100318 <ipc_init>:

int ipc_init(void)
{
 8100318:	b580      	push	{r7, lr}
 810031a:	b084      	sub	sp, #16
 810031c:	af02      	add	r7, sp, #8
    /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810031e:	4b20      	ldr	r3, [pc, #128]	@ (81003a0 <ipc_init+0x88>)
 8100320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100324:	4a1e      	ldr	r2, [pc, #120]	@ (81003a0 <ipc_init+0x88>)
 8100326:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810032a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810032e:	4b1c      	ldr	r3, [pc, #112]	@ (81003a0 <ipc_init+0x88>)
 8100330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100334:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100338:	607b      	str	r3, [r7, #4]
 810033a:	687b      	ldr	r3, [r7, #4]
#ifdef CORE_CM4
  	HAL_HSEM_Take(HSEM_INIT_CM4, 0);
 810033c:	2100      	movs	r1, #0
 810033e:	201b      	movs	r0, #27
 8100340:	f003 faea 	bl	8103918 <HAL_HSEM_Take>
#endif
	memset((void*)(&shared_ram.cm7_to_cm4_buffer), 0, CM7_TO_CM4_BUFFER_SIZE);
 8100344:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 8100348:	2100      	movs	r1, #0
 810034a:	4816      	ldr	r0, [pc, #88]	@ (81003a4 <ipc_init+0x8c>)
 810034c:	f007 fd84 	bl	8107e58 <memset>
	memset((void*)(&shared_ram.cm4_to_cm7_buffer), 0, CM4_TO_CM7_BUFFER_SIZE);
 8100350:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 8100354:	2100      	movs	r1, #0
 8100356:	4814      	ldr	r0, [pc, #80]	@ (81003a8 <ipc_init+0x90>)
 8100358:	f007 fd7e 	bl	8107e58 <memset>
    shared_ram.cm7_to_cm4_handle = xMessageBufferCreateStatic(CM7_TO_CM4_BUFFER_SIZE, (uint8_t*)shared_ram.cm7_to_cm4_buffer,(StaticMessageBuffer_t*) &shared_ram.cm7_to_cm4_xmsg);
 810035c:	4b13      	ldr	r3, [pc, #76]	@ (81003ac <ipc_init+0x94>)
 810035e:	9300      	str	r3, [sp, #0]
 8100360:	4b10      	ldr	r3, [pc, #64]	@ (81003a4 <ipc_init+0x8c>)
 8100362:	2201      	movs	r2, #1
 8100364:	2100      	movs	r1, #0
 8100366:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 810036a:	f005 fd05 	bl	8105d78 <xStreamBufferGenericCreateStatic>
 810036e:	4603      	mov	r3, r0
 8100370:	4a0f      	ldr	r2, [pc, #60]	@ (81003b0 <ipc_init+0x98>)
 8100372:	6013      	str	r3, [r2, #0]
    shared_ram.cm4_to_cm7_handle = xMessageBufferCreateStatic(CM4_TO_CM7_BUFFER_SIZE, (uint8_t*)shared_ram.cm4_to_cm7_buffer,(StaticMessageBuffer_t*) &shared_ram.cm4_to_cm7_xmsg);
 8100374:	4b0f      	ldr	r3, [pc, #60]	@ (81003b4 <ipc_init+0x9c>)
 8100376:	9300      	str	r3, [sp, #0]
 8100378:	4b0b      	ldr	r3, [pc, #44]	@ (81003a8 <ipc_init+0x90>)
 810037a:	2201      	movs	r2, #1
 810037c:	2100      	movs	r1, #0
 810037e:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 8100382:	f005 fcf9 	bl	8105d78 <xStreamBufferGenericCreateStatic>
 8100386:	4603      	mov	r3, r0
 8100388:	4a09      	ldr	r2, [pc, #36]	@ (81003b0 <ipc_init+0x98>)
 810038a:	6053      	str	r3, [r2, #4]
    HAL_HSEM_Release(HSEM_INIT_CM4, 0);
    // Wait for CM4 to complete initialization
    HAL_HSEM_Take(HSEM_INIT_CM7, 0);
#elif defined(CORE_CM4)
    // Signal CM7 that CM4 has completed initialization
    HAL_HSEM_Release(HSEM_INIT_CM7, 0);
 810038c:	2100      	movs	r1, #0
 810038e:	201a      	movs	r0, #26
 8100390:	f003 fae6 	bl	8103960 <HAL_HSEM_Release>
#endif



    return 0;
 8100394:	2300      	movs	r3, #0
}
 8100396:	4618      	mov	r0, r3
 8100398:	3708      	adds	r7, #8
 810039a:	46bd      	mov	sp, r7
 810039c:	bd80      	pop	{r7, pc}
 810039e:	bf00      	nop
 81003a0:	58024400 	.word	0x58024400
 81003a4:	38000050 	.word	0x38000050
 81003a8:	380005c8 	.word	0x380005c8
 81003ac:	38000008 	.word	0x38000008
 81003b0:	38000000 	.word	0x38000000
 81003b4:	3800002c 	.word	0x3800002c

081003b8 <ipc_start>:

int ipc_start(void){
 81003b8:	b580      	push	{r7, lr}
 81003ba:	af00      	add	r7, sp, #0
    HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_RX_ID));
 81003bc:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 81003c0:	f003 fae2 	bl	8103988 <HAL_HSEM_ActivateNotification>
    HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_TX_WAKEUP));
 81003c4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 81003c8:	f003 fade 	bl	8103988 <HAL_HSEM_ActivateNotification>
    return 0;
 81003cc:	2300      	movs	r3, #0
}
 81003ce:	4618      	mov	r0, r3
 81003d0:	bd80      	pop	{r7, pc}
	...

081003d4 <prvCoreInterruptHandler>:

static void prvCoreInterruptHandler(void)
{
 81003d4:	b580      	push	{r7, lr}
 81003d6:	b082      	sub	sp, #8
 81003d8:	af00      	add	r7, sp, #0
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 81003da:	2300      	movs	r3, #0
 81003dc:	607b      	str	r3, [r7, #4]

    if (!xrx_data_buf)
 81003de:	4b0d      	ldr	r3, [pc, #52]	@ (8100414 <prvCoreInterruptHandler+0x40>)
 81003e0:	681b      	ldr	r3, [r3, #0]
 81003e2:	2b00      	cmp	r3, #0
 81003e4:	d012      	beq.n	810040c <prvCoreInterruptHandler+0x38>
    {
    	return;
    }


	xMessageBufferSendCompletedFromISR(xrx_data_buf,
 81003e6:	4b0b      	ldr	r3, [pc, #44]	@ (8100414 <prvCoreInterruptHandler+0x40>)
 81003e8:	681b      	ldr	r3, [r3, #0]
 81003ea:	1d3a      	adds	r2, r7, #4
 81003ec:	4611      	mov	r1, r2
 81003ee:	4618      	mov	r0, r3
 81003f0:	f005 fe03 	bl	8105ffa <xStreamBufferSendCompletedFromISR>

    /* Normal FreeRTOS yield from interrupt semantics, where
       xHigherPriorityTaskWoken is initialzed to pdFALSE and will then get set
       to pdTRUE if the interrupt safe API unblocks a task that has a priority
       above that of the currently executing task. */
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 81003f4:	687b      	ldr	r3, [r7, #4]
 81003f6:	2b00      	cmp	r3, #0
 81003f8:	d009      	beq.n	810040e <prvCoreInterruptHandler+0x3a>
 81003fa:	4b07      	ldr	r3, [pc, #28]	@ (8100418 <prvCoreInterruptHandler+0x44>)
 81003fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8100400:	601a      	str	r2, [r3, #0]
 8100402:	f3bf 8f4f 	dsb	sy
 8100406:	f3bf 8f6f 	isb	sy
 810040a:	e000      	b.n	810040e <prvCoreInterruptHandler+0x3a>
    	return;
 810040c:	bf00      	nop
}
 810040e:	3708      	adds	r7, #8
 8100410:	46bd      	mov	sp, r7
 8100412:	bd80      	pop	{r7, pc}
 8100414:	38000000 	.word	0x38000000
 8100418:	e000ed04 	.word	0xe000ed04

0810041c <prvCoreWakeupInterruptHandler>:

static void prvCoreWakeupInterruptHandler(void)
{
 810041c:	b580      	push	{r7, lr}
 810041e:	b082      	sub	sp, #8
 8100420:	af00      	add	r7, sp, #0
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8100422:	2300      	movs	r3, #0
 8100424:	607b      	str	r3, [r7, #4]

    if (!xtx_data_buf)
 8100426:	4b0d      	ldr	r3, [pc, #52]	@ (810045c <prvCoreWakeupInterruptHandler+0x40>)
 8100428:	685b      	ldr	r3, [r3, #4]
 810042a:	2b00      	cmp	r3, #0
 810042c:	d012      	beq.n	8100454 <prvCoreWakeupInterruptHandler+0x38>
    {
    	return;
    }


	xMessageBufferReceiveCompletedFromISR(xtx_data_buf,
 810042e:	4b0b      	ldr	r3, [pc, #44]	@ (810045c <prvCoreWakeupInterruptHandler+0x40>)
 8100430:	685b      	ldr	r3, [r3, #4]
 8100432:	1d3a      	adds	r2, r7, #4
 8100434:	4611      	mov	r1, r2
 8100436:	4618      	mov	r0, r3
 8100438:	f005 fe23 	bl	8106082 <xStreamBufferReceiveCompletedFromISR>

    /* Normal FreeRTOS yield from interrupt semantics, where
       xHigherPriorityTaskWoken is initialzed to pdFALSE and will then get set
       to pdTRUE if the interrupt safe API unblocks a task that has a priority
       above that of the currently executing task. */
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 810043c:	687b      	ldr	r3, [r7, #4]
 810043e:	2b00      	cmp	r3, #0
 8100440:	d009      	beq.n	8100456 <prvCoreWakeupInterruptHandler+0x3a>
 8100442:	4b07      	ldr	r3, [pc, #28]	@ (8100460 <prvCoreWakeupInterruptHandler+0x44>)
 8100444:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8100448:	601a      	str	r2, [r3, #0]
 810044a:	f3bf 8f4f 	dsb	sy
 810044e:	f3bf 8f6f 	isb	sy
 8100452:	e000      	b.n	8100456 <prvCoreWakeupInterruptHandler+0x3a>
    	return;
 8100454:	bf00      	nop
}
 8100456:	3708      	adds	r7, #8
 8100458:	46bd      	mov	sp, r7
 810045a:	bd80      	pop	{r7, pc}
 810045c:	38000000 	.word	0x38000000
 8100460:	e000ed04 	.word	0xe000ed04

08100464 <vGenerateRemoteInterrupt>:

void vGenerateRemoteInterrupt(void * xUpdatedMessageBuffer)
{
 8100464:	b580      	push	{r7, lr}
 8100466:	b084      	sub	sp, #16
 8100468:	af00      	add	r7, sp, #0
 810046a:	6078      	str	r0, [r7, #4]
    MessageBufferHandle_t xUpdatedBuffer =
 810046c:	687b      	ldr	r3, [r7, #4]
 810046e:	60fb      	str	r3, [r7, #12]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8100470:	f3bf 8f4f 	dsb	sy
}
 8100474:	bf00      	nop
        (MessageBufferHandle_t)xUpdatedMessageBuffer;

	__DSB();
    if (xUpdatedBuffer == xtx_data_buf)
 8100476:	4b12      	ldr	r3, [pc, #72]	@ (81004c0 <vGenerateRemoteInterrupt+0x5c>)
 8100478:	685b      	ldr	r3, [r3, #4]
 810047a:	68fa      	ldr	r2, [r7, #12]
 810047c:	429a      	cmp	r2, r3
 810047e:	d10b      	bne.n	8100498 <vGenerateRemoteInterrupt+0x34>
    {

        /* Take the HW Semaphore with Process1 ID  */
        if(HAL_HSEM_Take(HSEM_TX_ID, HSEM_PROCESS) == HAL_OK)
 8100480:	211b      	movs	r1, #27
 8100482:	201d      	movs	r0, #29
 8100484:	f003 fa48 	bl	8103918 <HAL_HSEM_Take>
 8100488:	4603      	mov	r3, r0
 810048a:	2b00      	cmp	r3, #0
 810048c:	d114      	bne.n	81004b8 <vGenerateRemoteInterrupt+0x54>
        {
            /* Release the HW Semaphore */
            HAL_HSEM_Release(HSEM_TX_ID, HSEM_PROCESS);
 810048e:	211b      	movs	r1, #27
 8100490:	201d      	movs	r0, #29
 8100492:	f003 fa65 	bl	8103960 <HAL_HSEM_Release>
		{
			/* Release the HW Semaphore */
			HAL_HSEM_Release(HSEM_RX_WAKEUP, HSEM_PROCESS);
		}
    }
}
 8100496:	e00f      	b.n	81004b8 <vGenerateRemoteInterrupt+0x54>
    else if(xUpdatedBuffer == xrx_data_buf){
 8100498:	4b09      	ldr	r3, [pc, #36]	@ (81004c0 <vGenerateRemoteInterrupt+0x5c>)
 810049a:	681b      	ldr	r3, [r3, #0]
 810049c:	68fa      	ldr	r2, [r7, #12]
 810049e:	429a      	cmp	r2, r3
 81004a0:	d10a      	bne.n	81004b8 <vGenerateRemoteInterrupt+0x54>
		if(HAL_HSEM_Take(HSEM_RX_WAKEUP, HSEM_PROCESS) == HAL_OK)
 81004a2:	211b      	movs	r1, #27
 81004a4:	201e      	movs	r0, #30
 81004a6:	f003 fa37 	bl	8103918 <HAL_HSEM_Take>
 81004aa:	4603      	mov	r3, r0
 81004ac:	2b00      	cmp	r3, #0
 81004ae:	d103      	bne.n	81004b8 <vGenerateRemoteInterrupt+0x54>
			HAL_HSEM_Release(HSEM_RX_WAKEUP, HSEM_PROCESS);
 81004b0:	211b      	movs	r1, #27
 81004b2:	201e      	movs	r0, #30
 81004b4:	f003 fa54 	bl	8103960 <HAL_HSEM_Release>
}
 81004b8:	bf00      	nop
 81004ba:	3710      	adds	r7, #16
 81004bc:	46bd      	mov	sp, r7
 81004be:	bd80      	pop	{r7, pc}
 81004c0:	38000000 	.word	0x38000000

081004c4 <ipc_recvmsg>:

    return len;
}

size_t ipc_recvmsg(ipc_msg* msg, uint32_t size, int32_t timeout)
{
 81004c4:	b580      	push	{r7, lr}
 81004c6:	b086      	sub	sp, #24
 81004c8:	af00      	add	r7, sp, #0
 81004ca:	60f8      	str	r0, [r7, #12]
 81004cc:	60b9      	str	r1, [r7, #8]
 81004ce:	607a      	str	r2, [r7, #4]
    size_t len;

    if (timeout < 0)
 81004d0:	687b      	ldr	r3, [r7, #4]
 81004d2:	2b00      	cmp	r3, #0
 81004d4:	da09      	bge.n	81004ea <ipc_recvmsg+0x26>
        len = xMessageBufferReceive(xrx_data_buf, msg, size, portMAX_DELAY);
 81004d6:	4b0b      	ldr	r3, [pc, #44]	@ (8100504 <ipc_recvmsg+0x40>)
 81004d8:	6818      	ldr	r0, [r3, #0]
 81004da:	f04f 33ff 	mov.w	r3, #4294967295
 81004de:	68ba      	ldr	r2, [r7, #8]
 81004e0:	68f9      	ldr	r1, [r7, #12]
 81004e2:	f005 fccf 	bl	8105e84 <xStreamBufferReceive>
 81004e6:	6178      	str	r0, [r7, #20]
 81004e8:	e007      	b.n	81004fa <ipc_recvmsg+0x36>
    else
        len = xMessageBufferReceive(xrx_data_buf, msg, size, (TickType_t)timeout);
 81004ea:	4b06      	ldr	r3, [pc, #24]	@ (8100504 <ipc_recvmsg+0x40>)
 81004ec:	6818      	ldr	r0, [r3, #0]
 81004ee:	687b      	ldr	r3, [r7, #4]
 81004f0:	68ba      	ldr	r2, [r7, #8]
 81004f2:	68f9      	ldr	r1, [r7, #12]
 81004f4:	f005 fcc6 	bl	8105e84 <xStreamBufferReceive>
 81004f8:	6178      	str	r0, [r7, #20]

    return len;
 81004fa:	697b      	ldr	r3, [r7, #20]
}
 81004fc:	4618      	mov	r0, r3
 81004fe:	3718      	adds	r7, #24
 8100500:	46bd      	mov	sp, r7
 8100502:	bd80      	pop	{r7, pc}
 8100504:	38000000 	.word	0x38000000

08100508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100508:	b580      	push	{r7, lr}
 810050a:	b082      	sub	sp, #8
 810050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810050e:	4b2b      	ldr	r3, [pc, #172]	@ (81005bc <main+0xb4>)
 8100510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100514:	4a29      	ldr	r2, [pc, #164]	@ (81005bc <main+0xb4>)
 8100516:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810051a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810051e:	4b27      	ldr	r3, [pc, #156]	@ (81005bc <main+0xb4>)
 8100520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100524:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100528:	607b      	str	r3, [r7, #4]
 810052a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810052c:	2001      	movs	r0, #1
 810052e:	f003 fa2b 	bl	8103988 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100532:	f003 facf 	bl	8103ad4 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100536:	2201      	movs	r2, #1
 8100538:	2102      	movs	r1, #2
 810053a:	2000      	movs	r0, #0
 810053c:	f003 fa50 	bl	81039e0 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100540:	4b1f      	ldr	r3, [pc, #124]	@ (81005c0 <main+0xb8>)
 8100542:	681b      	ldr	r3, [r3, #0]
 8100544:	091b      	lsrs	r3, r3, #4
 8100546:	f003 030f 	and.w	r3, r3, #15
 810054a:	2b07      	cmp	r3, #7
 810054c:	d108      	bne.n	8100560 <main+0x58>
 810054e:	4b1d      	ldr	r3, [pc, #116]	@ (81005c4 <main+0xbc>)
 8100550:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8100554:	4a1b      	ldr	r2, [pc, #108]	@ (81005c4 <main+0xbc>)
 8100556:	f043 0301 	orr.w	r3, r3, #1
 810055a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 810055e:	e007      	b.n	8100570 <main+0x68>
 8100560:	4b18      	ldr	r3, [pc, #96]	@ (81005c4 <main+0xbc>)
 8100562:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8100566:	4a17      	ldr	r2, [pc, #92]	@ (81005c4 <main+0xbc>)
 8100568:	f043 0301 	orr.w	r3, r3, #1
 810056c:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100570:	f002 ff36 	bl	81033e0 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_MDMA_Init();
 8100574:	f000 f83a 	bl	81005ec <_ZL12MX_MDMA_Initv>
  MX_GPIO_Init();
 8100578:	f000 f852 	bl	8100620 <_ZL12MX_GPIO_Initv>
  /* USER CODE BEGIN 2 */
  ipc_init();
 810057c:	f7ff fecc 	bl	8100318 <ipc_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8100580:	f003 ffcc 	bl	810451c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_EDaemonN */
  Task_EDaemonNHandle = osThreadNew(StartTask_EDaemonN, NULL, &Task_EDaemonN_attributes);
 8100584:	4a10      	ldr	r2, [pc, #64]	@ (81005c8 <main+0xc0>)
 8100586:	2100      	movs	r1, #0
 8100588:	4810      	ldr	r0, [pc, #64]	@ (81005cc <main+0xc4>)
 810058a:	f004 f811 	bl	81045b0 <osThreadNew>
 810058e:	4603      	mov	r3, r0
 8100590:	4a0f      	ldr	r2, [pc, #60]	@ (81005d0 <main+0xc8>)
 8100592:	6013      	str	r3, [r2, #0]

  /* creation of Task_EventMgrM4 */
  Task_EventMgrM4Handle = osThreadNew(StartTask_EventMgrM4, NULL, &Task_EventMgrM4_attributes);
 8100594:	4a0f      	ldr	r2, [pc, #60]	@ (81005d4 <main+0xcc>)
 8100596:	2100      	movs	r1, #0
 8100598:	480f      	ldr	r0, [pc, #60]	@ (81005d8 <main+0xd0>)
 810059a:	f004 f809 	bl	81045b0 <osThreadNew>
 810059e:	4603      	mov	r3, r0
 81005a0:	4a0e      	ldr	r2, [pc, #56]	@ (81005dc <main+0xd4>)
 81005a2:	6013      	str	r3, [r2, #0]

  /* creation of Task_EConnMgr */
  Task_EConnMgrHandle = osThreadNew(StartTask_EdiabasConnMgr, NULL, &Task_EConnMgr_attributes);
 81005a4:	4a0e      	ldr	r2, [pc, #56]	@ (81005e0 <main+0xd8>)
 81005a6:	2100      	movs	r1, #0
 81005a8:	480e      	ldr	r0, [pc, #56]	@ (81005e4 <main+0xdc>)
 81005aa:	f004 f801 	bl	81045b0 <osThreadNew>
 81005ae:	4603      	mov	r3, r0
 81005b0:	4a0d      	ldr	r2, [pc, #52]	@ (81005e8 <main+0xe0>)
 81005b2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 81005b4:	f003 ffd6 	bl	8104564 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81005b8:	bf00      	nop
 81005ba:	e7fd      	b.n	81005b8 <main+0xb0>
 81005bc:	58024400 	.word	0x58024400
 81005c0:	e000ed00 	.word	0xe000ed00
 81005c4:	58026400 	.word	0x58026400
 81005c8:	08108134 	.word	0x08108134
 81005cc:	08100a5d 	.word	0x08100a5d
 81005d0:	10000080 	.word	0x10000080
 81005d4:	08108158 	.word	0x08108158
 81005d8:	08101155 	.word	0x08101155
 81005dc:	10000084 	.word	0x10000084
 81005e0:	0810817c 	.word	0x0810817c
 81005e4:	081009e1 	.word	0x081009e1
 81005e8:	10000088 	.word	0x10000088

081005ec <_ZL12MX_MDMA_Initv>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 81005ec:	b480      	push	{r7}
 81005ee:	b083      	sub	sp, #12
 81005f0:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 81005f2:	4b0a      	ldr	r3, [pc, #40]	@ (810061c <_ZL12MX_MDMA_Initv+0x30>)
 81005f4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 81005f8:	4a08      	ldr	r2, [pc, #32]	@ (810061c <_ZL12MX_MDMA_Initv+0x30>)
 81005fa:	f043 0301 	orr.w	r3, r3, #1
 81005fe:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8100602:	4b06      	ldr	r3, [pc, #24]	@ (810061c <_ZL12MX_MDMA_Initv+0x30>)
 8100604:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8100608:	f003 0301 	and.w	r3, r3, #1
 810060c:	607b      	str	r3, [r7, #4]
 810060e:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

}
 8100610:	bf00      	nop
 8100612:	370c      	adds	r7, #12
 8100614:	46bd      	mov	sp, r7
 8100616:	f85d 7b04 	ldr.w	r7, [sp], #4
 810061a:	4770      	bx	lr
 810061c:	58024400 	.word	0x58024400

08100620 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100620:	b480      	push	{r7}
 8100622:	b087      	sub	sp, #28
 8100624:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8100626:	4b30      	ldr	r3, [pc, #192]	@ (81006e8 <_ZL12MX_GPIO_Initv+0xc8>)
 8100628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810062c:	4a2e      	ldr	r2, [pc, #184]	@ (81006e8 <_ZL12MX_GPIO_Initv+0xc8>)
 810062e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8100632:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100636:	4b2c      	ldr	r3, [pc, #176]	@ (81006e8 <_ZL12MX_GPIO_Initv+0xc8>)
 8100638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810063c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8100640:	617b      	str	r3, [r7, #20]
 8100642:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100644:	4b28      	ldr	r3, [pc, #160]	@ (81006e8 <_ZL12MX_GPIO_Initv+0xc8>)
 8100646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810064a:	4a27      	ldr	r2, [pc, #156]	@ (81006e8 <_ZL12MX_GPIO_Initv+0xc8>)
 810064c:	f043 0310 	orr.w	r3, r3, #16
 8100650:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100654:	4b24      	ldr	r3, [pc, #144]	@ (81006e8 <_ZL12MX_GPIO_Initv+0xc8>)
 8100656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810065a:	f003 0310 	and.w	r3, r3, #16
 810065e:	613b      	str	r3, [r7, #16]
 8100660:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8100662:	4b21      	ldr	r3, [pc, #132]	@ (81006e8 <_ZL12MX_GPIO_Initv+0xc8>)
 8100664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100668:	4a1f      	ldr	r2, [pc, #124]	@ (81006e8 <_ZL12MX_GPIO_Initv+0xc8>)
 810066a:	f043 0304 	orr.w	r3, r3, #4
 810066e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100672:	4b1d      	ldr	r3, [pc, #116]	@ (81006e8 <_ZL12MX_GPIO_Initv+0xc8>)
 8100674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100678:	f003 0304 	and.w	r3, r3, #4
 810067c:	60fb      	str	r3, [r7, #12]
 810067e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100680:	4b19      	ldr	r3, [pc, #100]	@ (81006e8 <_ZL12MX_GPIO_Initv+0xc8>)
 8100682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100686:	4a18      	ldr	r2, [pc, #96]	@ (81006e8 <_ZL12MX_GPIO_Initv+0xc8>)
 8100688:	f043 0301 	orr.w	r3, r3, #1
 810068c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100690:	4b15      	ldr	r3, [pc, #84]	@ (81006e8 <_ZL12MX_GPIO_Initv+0xc8>)
 8100692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100696:	f003 0301 	and.w	r3, r3, #1
 810069a:	60bb      	str	r3, [r7, #8]
 810069c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 810069e:	4b12      	ldr	r3, [pc, #72]	@ (81006e8 <_ZL12MX_GPIO_Initv+0xc8>)
 81006a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81006a4:	4a10      	ldr	r2, [pc, #64]	@ (81006e8 <_ZL12MX_GPIO_Initv+0xc8>)
 81006a6:	f043 0302 	orr.w	r3, r3, #2
 81006aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81006ae:	4b0e      	ldr	r3, [pc, #56]	@ (81006e8 <_ZL12MX_GPIO_Initv+0xc8>)
 81006b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81006b4:	f003 0302 	and.w	r3, r3, #2
 81006b8:	607b      	str	r3, [r7, #4]
 81006ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 81006bc:	4b0a      	ldr	r3, [pc, #40]	@ (81006e8 <_ZL12MX_GPIO_Initv+0xc8>)
 81006be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81006c2:	4a09      	ldr	r2, [pc, #36]	@ (81006e8 <_ZL12MX_GPIO_Initv+0xc8>)
 81006c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81006c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81006cc:	4b06      	ldr	r3, [pc, #24]	@ (81006e8 <_ZL12MX_GPIO_Initv+0xc8>)
 81006ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81006d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81006d6:	603b      	str	r3, [r7, #0]
 81006d8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 81006da:	bf00      	nop
 81006dc:	371c      	adds	r7, #28
 81006de:	46bd      	mov	sp, r7
 81006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006e4:	4770      	bx	lr
 81006e6:	bf00      	nop
 81006e8:	58024400 	.word	0x58024400

081006ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 81006ec:	b580      	push	{r7, lr}
 81006ee:	b082      	sub	sp, #8
 81006f0:	af00      	add	r7, sp, #0
 81006f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 81006f4:	687b      	ldr	r3, [r7, #4]
 81006f6:	681b      	ldr	r3, [r3, #0]
 81006f8:	4a04      	ldr	r2, [pc, #16]	@ (810070c <HAL_TIM_PeriodElapsedCallback+0x20>)
 81006fa:	4293      	cmp	r3, r2
 81006fc:	d101      	bne.n	8100702 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 81006fe:	f002 fecd 	bl	810349c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8100702:	bf00      	nop
 8100704:	3708      	adds	r7, #8
 8100706:	46bd      	mov	sp, r7
 8100708:	bd80      	pop	{r7, pc}
 810070a:	bf00      	nop
 810070c:	40001000 	.word	0x40001000

08100710 <_Z41__static_initialization_and_destruction_0ii>:
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8100710:	b580      	push	{r7, lr}
 8100712:	b082      	sub	sp, #8
 8100714:	af00      	add	r7, sp, #0
 8100716:	6078      	str	r0, [r7, #4]
 8100718:	6039      	str	r1, [r7, #0]
 810071a:	687b      	ldr	r3, [r7, #4]
 810071c:	2b01      	cmp	r3, #1
 810071e:	d11c      	bne.n	810075a <_Z41__static_initialization_and_destruction_0ii+0x4a>
 8100720:	683b      	ldr	r3, [r7, #0]
 8100722:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8100726:	4293      	cmp	r3, r2
 8100728:	d117      	bne.n	810075a <_Z41__static_initialization_and_destruction_0ii+0x4a>
QueueHandle_t queueToEventManagerCM4 = xQueueCreate(8, sizeof(SMessage));
 810072a:	2200      	movs	r2, #0
 810072c:	2118      	movs	r1, #24
 810072e:	2008      	movs	r0, #8
 8100730:	f004 fe43 	bl	81053ba <xQueueGenericCreate>
 8100734:	4603      	mov	r3, r0
 8100736:	4a0b      	ldr	r2, [pc, #44]	@ (8100764 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8100738:	6013      	str	r3, [r2, #0]
QueueHandle_t queueToNativeDaemon = xQueueCreate(16, sizeof(SMessage));
 810073a:	2200      	movs	r2, #0
 810073c:	2118      	movs	r1, #24
 810073e:	2010      	movs	r0, #16
 8100740:	f004 fe3b 	bl	81053ba <xQueueGenericCreate>
 8100744:	4603      	mov	r3, r0
 8100746:	4a08      	ldr	r2, [pc, #32]	@ (8100768 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8100748:	6013      	str	r3, [r2, #0]
QueueHandle_t queueToEdiabasConnMgr = xQueueCreate(64, sizeof(SMessage));
 810074a:	2200      	movs	r2, #0
 810074c:	2118      	movs	r1, #24
 810074e:	2040      	movs	r0, #64	@ 0x40
 8100750:	f004 fe33 	bl	81053ba <xQueueGenericCreate>
 8100754:	4603      	mov	r3, r0
 8100756:	4a05      	ldr	r2, [pc, #20]	@ (810076c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8100758:	6013      	str	r3, [r2, #0]
}
 810075a:	bf00      	nop
 810075c:	3708      	adds	r7, #8
 810075e:	46bd      	mov	sp, r7
 8100760:	bd80      	pop	{r7, pc}
 8100762:	bf00      	nop
 8100764:	1000008c 	.word	0x1000008c
 8100768:	10000090 	.word	0x10000090
 810076c:	10000094 	.word	0x10000094

08100770 <_GLOBAL__sub_I_huart1>:
 8100770:	b580      	push	{r7, lr}
 8100772:	af00      	add	r7, sp, #0
 8100774:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8100778:	2001      	movs	r0, #1
 810077a:	f7ff ffc9 	bl	8100710 <_Z41__static_initialization_and_destruction_0ii>
 810077e:	bd80      	pop	{r7, pc}

08100780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100780:	b580      	push	{r7, lr}
 8100782:	b082      	sub	sp, #8
 8100784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100786:	4b10      	ldr	r3, [pc, #64]	@ (81007c8 <HAL_MspInit+0x48>)
 8100788:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810078c:	4a0e      	ldr	r2, [pc, #56]	@ (81007c8 <HAL_MspInit+0x48>)
 810078e:	f043 0302 	orr.w	r3, r3, #2
 8100792:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100796:	4b0c      	ldr	r3, [pc, #48]	@ (81007c8 <HAL_MspInit+0x48>)
 8100798:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810079c:	f003 0302 	and.w	r3, r3, #2
 81007a0:	607b      	str	r3, [r7, #4]
 81007a2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 81007a4:	2200      	movs	r2, #0
 81007a6:	210f      	movs	r1, #15
 81007a8:	f06f 0001 	mvn.w	r0, #1
 81007ac:	f002 ff42 	bl	8103634 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 5, 0);
 81007b0:	2200      	movs	r2, #0
 81007b2:	2105      	movs	r1, #5
 81007b4:	207e      	movs	r0, #126	@ 0x7e
 81007b6:	f002 ff3d 	bl	8103634 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 81007ba:	207e      	movs	r0, #126	@ 0x7e
 81007bc:	f002 ff54 	bl	8103668 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81007c0:	bf00      	nop
 81007c2:	3708      	adds	r7, #8
 81007c4:	46bd      	mov	sp, r7
 81007c6:	bd80      	pop	{r7, pc}
 81007c8:	58024400 	.word	0x58024400

081007cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81007cc:	b580      	push	{r7, lr}
 81007ce:	b090      	sub	sp, #64	@ 0x40
 81007d0:	af00      	add	r7, sp, #0
 81007d2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81007d4:	687b      	ldr	r3, [r7, #4]
 81007d6:	2b0f      	cmp	r3, #15
 81007d8:	d827      	bhi.n	810082a <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 81007da:	2200      	movs	r2, #0
 81007dc:	6879      	ldr	r1, [r7, #4]
 81007de:	2036      	movs	r0, #54	@ 0x36
 81007e0:	f002 ff28 	bl	8103634 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 81007e4:	2036      	movs	r0, #54	@ 0x36
 81007e6:	f002 ff3f 	bl	8103668 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 81007ea:	4a29      	ldr	r2, [pc, #164]	@ (8100890 <HAL_InitTick+0xc4>)
 81007ec:	687b      	ldr	r3, [r7, #4]
 81007ee:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 81007f0:	4b28      	ldr	r3, [pc, #160]	@ (8100894 <HAL_InitTick+0xc8>)
 81007f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81007f6:	4a27      	ldr	r2, [pc, #156]	@ (8100894 <HAL_InitTick+0xc8>)
 81007f8:	f043 0310 	orr.w	r3, r3, #16
 81007fc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8100800:	4b24      	ldr	r3, [pc, #144]	@ (8100894 <HAL_InitTick+0xc8>)
 8100802:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100806:	f003 0310 	and.w	r3, r3, #16
 810080a:	60fb      	str	r3, [r7, #12]
 810080c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 810080e:	f107 0210 	add.w	r2, r7, #16
 8100812:	f107 0314 	add.w	r3, r7, #20
 8100816:	4611      	mov	r1, r2
 8100818:	4618      	mov	r0, r3
 810081a:	f003 fb2b 	bl	8103e74 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 810081e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8100820:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8100822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8100824:	2b00      	cmp	r3, #0
 8100826:	d106      	bne.n	8100836 <HAL_InitTick+0x6a>
 8100828:	e001      	b.n	810082e <HAL_InitTick+0x62>
    return HAL_ERROR;
 810082a:	2301      	movs	r3, #1
 810082c:	e02b      	b.n	8100886 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 810082e:	f003 fb0b 	bl	8103e48 <HAL_RCC_GetPCLK1Freq>
 8100832:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8100834:	e004      	b.n	8100840 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8100836:	f003 fb07 	bl	8103e48 <HAL_RCC_GetPCLK1Freq>
 810083a:	4603      	mov	r3, r0
 810083c:	005b      	lsls	r3, r3, #1
 810083e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8100840:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8100842:	4a15      	ldr	r2, [pc, #84]	@ (8100898 <HAL_InitTick+0xcc>)
 8100844:	fba2 2303 	umull	r2, r3, r2, r3
 8100848:	0c9b      	lsrs	r3, r3, #18
 810084a:	3b01      	subs	r3, #1
 810084c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 810084e:	4b13      	ldr	r3, [pc, #76]	@ (810089c <HAL_InitTick+0xd0>)
 8100850:	4a13      	ldr	r2, [pc, #76]	@ (81008a0 <HAL_InitTick+0xd4>)
 8100852:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8100854:	4b11      	ldr	r3, [pc, #68]	@ (810089c <HAL_InitTick+0xd0>)
 8100856:	f240 32e7 	movw	r2, #999	@ 0x3e7
 810085a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 810085c:	4a0f      	ldr	r2, [pc, #60]	@ (810089c <HAL_InitTick+0xd0>)
 810085e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8100860:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8100862:	4b0e      	ldr	r3, [pc, #56]	@ (810089c <HAL_InitTick+0xd0>)
 8100864:	2200      	movs	r2, #0
 8100866:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100868:	4b0c      	ldr	r3, [pc, #48]	@ (810089c <HAL_InitTick+0xd0>)
 810086a:	2200      	movs	r2, #0
 810086c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 810086e:	480b      	ldr	r0, [pc, #44]	@ (810089c <HAL_InitTick+0xd0>)
 8100870:	f003 fb42 	bl	8103ef8 <HAL_TIM_Base_Init>
 8100874:	4603      	mov	r3, r0
 8100876:	2b00      	cmp	r3, #0
 8100878:	d104      	bne.n	8100884 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 810087a:	4808      	ldr	r0, [pc, #32]	@ (810089c <HAL_InitTick+0xd0>)
 810087c:	f003 fb9e 	bl	8103fbc <HAL_TIM_Base_Start_IT>
 8100880:	4603      	mov	r3, r0
 8100882:	e000      	b.n	8100886 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8100884:	2301      	movs	r3, #1
}
 8100886:	4618      	mov	r0, r3
 8100888:	3740      	adds	r7, #64	@ 0x40
 810088a:	46bd      	mov	sp, r7
 810088c:	bd80      	pop	{r7, pc}
 810088e:	bf00      	nop
 8100890:	10000008 	.word	0x10000008
 8100894:	58024400 	.word	0x58024400
 8100898:	431bde83 	.word	0x431bde83
 810089c:	10000098 	.word	0x10000098
 81008a0:	40001000 	.word	0x40001000

081008a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81008a4:	b480      	push	{r7}
 81008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81008a8:	bf00      	nop
 81008aa:	e7fd      	b.n	81008a8 <NMI_Handler+0x4>

081008ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81008ac:	b480      	push	{r7}
 81008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81008b0:	bf00      	nop
 81008b2:	e7fd      	b.n	81008b0 <HardFault_Handler+0x4>

081008b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81008b4:	b480      	push	{r7}
 81008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81008b8:	bf00      	nop
 81008ba:	e7fd      	b.n	81008b8 <MemManage_Handler+0x4>

081008bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81008bc:	b480      	push	{r7}
 81008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81008c0:	bf00      	nop
 81008c2:	e7fd      	b.n	81008c0 <BusFault_Handler+0x4>

081008c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81008c4:	b480      	push	{r7}
 81008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81008c8:	bf00      	nop
 81008ca:	e7fd      	b.n	81008c8 <UsageFault_Handler+0x4>

081008cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81008cc:	b480      	push	{r7}
 81008ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81008d0:	bf00      	nop
 81008d2:	46bd      	mov	sp, r7
 81008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008d8:	4770      	bx	lr
	...

081008dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 81008dc:	b580      	push	{r7, lr}
 81008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 81008e0:	4802      	ldr	r0, [pc, #8]	@ (81008ec <TIM6_DAC_IRQHandler+0x10>)
 81008e2:	f003 fbe3 	bl	81040ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 81008e6:	bf00      	nop
 81008e8:	bd80      	pop	{r7, pc}
 81008ea:	bf00      	nop
 81008ec:	10000098 	.word	0x10000098

081008f0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 81008f0:	b580      	push	{r7, lr}
 81008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 81008f4:	4802      	ldr	r0, [pc, #8]	@ (8100900 <ETH_IRQHandler+0x10>)
 81008f6:	f002 fed9 	bl	81036ac <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 81008fa:	bf00      	nop
 81008fc:	bd80      	pop	{r7, pc}
 81008fe:	bf00      	nop
 8100900:	100000f0 	.word	0x100000f0

08100904 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 86.
  */
void ETH_WKUP_IRQHandler(void)
{
 8100904:	b580      	push	{r7, lr}
 8100906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8100908:	4802      	ldr	r0, [pc, #8]	@ (8100914 <ETH_WKUP_IRQHandler+0x10>)
 810090a:	f002 fecf 	bl	81036ac <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 810090e:	bf00      	nop
 8100910:	bd80      	pop	{r7, pc}
 8100912:	bf00      	nop
 8100914:	100000f0 	.word	0x100000f0

08100918 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8100918:	b580      	push	{r7, lr}
 810091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 810091c:	f003 f846 	bl	81039ac <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 8100920:	bf00      	nop
 8100922:	bd80      	pop	{r7, pc}

08100924 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8100924:	b480      	push	{r7}
 8100926:	af00      	add	r7, sp, #0
	return 1;
 8100928:	2301      	movs	r3, #1
}
 810092a:	4618      	mov	r0, r3
 810092c:	46bd      	mov	sp, r7
 810092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100932:	4770      	bx	lr

08100934 <_kill>:

int _kill(int pid, int sig)
{
 8100934:	b480      	push	{r7}
 8100936:	b083      	sub	sp, #12
 8100938:	af00      	add	r7, sp, #0
 810093a:	6078      	str	r0, [r7, #4]
 810093c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 810093e:	4b05      	ldr	r3, [pc, #20]	@ (8100954 <_kill+0x20>)
 8100940:	2216      	movs	r2, #22
 8100942:	601a      	str	r2, [r3, #0]
	return -1;
 8100944:	f04f 33ff 	mov.w	r3, #4294967295
}
 8100948:	4618      	mov	r0, r3
 810094a:	370c      	adds	r7, #12
 810094c:	46bd      	mov	sp, r7
 810094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100952:	4770      	bx	lr
 8100954:	10004cd0 	.word	0x10004cd0

08100958 <_exit>:

void _exit (int status)
{
 8100958:	b580      	push	{r7, lr}
 810095a:	b082      	sub	sp, #8
 810095c:	af00      	add	r7, sp, #0
 810095e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8100960:	f04f 31ff 	mov.w	r1, #4294967295
 8100964:	6878      	ldr	r0, [r7, #4]
 8100966:	f7ff ffe5 	bl	8100934 <_kill>
	while (1) {}		/* Make sure we hang here */
 810096a:	bf00      	nop
 810096c:	e7fd      	b.n	810096a <_exit+0x12>
	...

08100970 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8100970:	b480      	push	{r7}
 8100972:	b087      	sub	sp, #28
 8100974:	af00      	add	r7, sp, #0
 8100976:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8100978:	4a14      	ldr	r2, [pc, #80]	@ (81009cc <_sbrk+0x5c>)
 810097a:	4b15      	ldr	r3, [pc, #84]	@ (81009d0 <_sbrk+0x60>)
 810097c:	1ad3      	subs	r3, r2, r3
 810097e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8100980:	697b      	ldr	r3, [r7, #20]
 8100982:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8100984:	4b13      	ldr	r3, [pc, #76]	@ (81009d4 <_sbrk+0x64>)
 8100986:	681b      	ldr	r3, [r3, #0]
 8100988:	2b00      	cmp	r3, #0
 810098a:	d102      	bne.n	8100992 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 810098c:	4b11      	ldr	r3, [pc, #68]	@ (81009d4 <_sbrk+0x64>)
 810098e:	4a12      	ldr	r2, [pc, #72]	@ (81009d8 <_sbrk+0x68>)
 8100990:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8100992:	4b10      	ldr	r3, [pc, #64]	@ (81009d4 <_sbrk+0x64>)
 8100994:	681a      	ldr	r2, [r3, #0]
 8100996:	687b      	ldr	r3, [r7, #4]
 8100998:	4413      	add	r3, r2
 810099a:	693a      	ldr	r2, [r7, #16]
 810099c:	429a      	cmp	r2, r3
 810099e:	d205      	bcs.n	81009ac <_sbrk+0x3c>
  {
    errno = ENOMEM;
 81009a0:	4b0e      	ldr	r3, [pc, #56]	@ (81009dc <_sbrk+0x6c>)
 81009a2:	220c      	movs	r2, #12
 81009a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 81009a6:	f04f 33ff 	mov.w	r3, #4294967295
 81009aa:	e009      	b.n	81009c0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 81009ac:	4b09      	ldr	r3, [pc, #36]	@ (81009d4 <_sbrk+0x64>)
 81009ae:	681b      	ldr	r3, [r3, #0]
 81009b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 81009b2:	4b08      	ldr	r3, [pc, #32]	@ (81009d4 <_sbrk+0x64>)
 81009b4:	681a      	ldr	r2, [r3, #0]
 81009b6:	687b      	ldr	r3, [r7, #4]
 81009b8:	4413      	add	r3, r2
 81009ba:	4a06      	ldr	r2, [pc, #24]	@ (81009d4 <_sbrk+0x64>)
 81009bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 81009be:	68fb      	ldr	r3, [r7, #12]
}
 81009c0:	4618      	mov	r0, r3
 81009c2:	371c      	adds	r7, #28
 81009c4:	46bd      	mov	sp, r7
 81009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009ca:	4770      	bx	lr
 81009cc:	10048000 	.word	0x10048000
 81009d0:	00001000 	.word	0x00001000
 81009d4:	100000e4 	.word	0x100000e4
 81009d8:	10004cd8 	.word	0x10004cd8
 81009dc:	10004cd0 	.word	0x10004cd0

081009e0 <_Z24StartTask_EdiabasConnMgrPv>:
extern struct netif gnetif;

extern QueueHandle_t queueToEdiabasConnMgr;

void StartTask_EdiabasConnMgr(void *argument)
{
 81009e0:	b580      	push	{r7, lr}
 81009e2:	b082      	sub	sp, #8
 81009e4:	af00      	add	r7, sp, #0
 81009e6:	6078      	str	r0, [r7, #4]
//	MX_LWIP_Init();

	/* Infinite loop */
	for (;;) {
		  osDelay(1000);
 81009e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 81009ec:	f003 fe72 	bl	81046d4 <osDelay>
 81009f0:	e7fa      	b.n	81009e8 <_Z24StartTask_EdiabasConnMgrPv+0x8>

081009f2 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 81009f2:	b480      	push	{r7}
 81009f4:	b083      	sub	sp, #12
 81009f6:	af00      	add	r7, sp, #0
 81009f8:	6078      	str	r0, [r7, #4]
 81009fa:	6039      	str	r1, [r7, #0]
 81009fc:	683b      	ldr	r3, [r7, #0]
 81009fe:	4618      	mov	r0, r3
 8100a00:	370c      	adds	r7, #12
 8100a02:	46bd      	mov	sp, r7
 8100a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a08:	4770      	bx	lr

08100a0a <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       noexcept { return &_M_pod_data[0]; }
 8100a0a:	b480      	push	{r7}
 8100a0c:	b083      	sub	sp, #12
 8100a0e:	af00      	add	r7, sp, #0
 8100a10:	6078      	str	r0, [r7, #4]
 8100a12:	687b      	ldr	r3, [r7, #4]
 8100a14:	4618      	mov	r0, r3
 8100a16:	370c      	adds	r7, #12
 8100a18:	46bd      	mov	sp, r7
 8100a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a1e:	4770      	bx	lr

08100a20 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const noexcept { return &_M_pod_data[0]; }
 8100a20:	b480      	push	{r7}
 8100a22:	b083      	sub	sp, #12
 8100a24:	af00      	add	r7, sp, #0
 8100a26:	6078      	str	r0, [r7, #4]
 8100a28:	687b      	ldr	r3, [r7, #4]
 8100a2a:	4618      	mov	r0, r3
 8100a2c:	370c      	adds	r7, #12
 8100a2e:	46bd      	mov	sp, r7
 8100a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a34:	4770      	bx	lr

08100a36 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8100a36:	b580      	push	{r7, lr}
 8100a38:	b082      	sub	sp, #8
 8100a3a:	af00      	add	r7, sp, #0
 8100a3c:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8100a3e:	687b      	ldr	r3, [r7, #4]
 8100a40:	689b      	ldr	r3, [r3, #8]
 8100a42:	2b00      	cmp	r3, #0
 8100a44:	d005      	beq.n	8100a52 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8100a46:	687b      	ldr	r3, [r7, #4]
 8100a48:	689b      	ldr	r3, [r3, #8]
 8100a4a:	6878      	ldr	r0, [r7, #4]
 8100a4c:	6879      	ldr	r1, [r7, #4]
 8100a4e:	2203      	movs	r2, #3
 8100a50:	4798      	blx	r3
    }
 8100a52:	687b      	ldr	r3, [r7, #4]
 8100a54:	4618      	mov	r0, r3
 8100a56:	3708      	adds	r7, #8
 8100a58:	46bd      	mov	sp, r7
 8100a5a:	bd80      	pop	{r7, pc}

08100a5c <_Z18StartTask_EDaemonNPv>:
#include "cm_ipc.h"

extern QueueHandle_t queueToNativeDaemon;

void StartTask_EDaemonN(void *argument)
{
 8100a5c:	b580      	push	{r7, lr}
 8100a5e:	b086      	sub	sp, #24
 8100a60:	af00      	add	r7, sp, #0
 8100a62:	6078      	str	r0, [r7, #4]
	ipc_start();
 8100a64:	f7ff fca8 	bl	81003b8 <ipc_start>
	EdiabasDaemonNativeTask EdiabasDaemonNativeTaskInstance;
 8100a68:	f107 030c 	add.w	r3, r7, #12
 8100a6c:	4618      	mov	r0, r3
 8100a6e:	f000 f80b 	bl	8100a88 <_ZN23EdiabasDaemonNativeTaskC1Ev>

	for(;;)
	{
		EdiabasDaemonNativeTaskInstance.process();
 8100a72:	f107 030c 	add.w	r3, r7, #12
 8100a76:	4618      	mov	r0, r3
 8100a78:	f000 f85e 	bl	8100b38 <_ZN23EdiabasDaemonNativeTask7processEv>
		osDelay(1);
 8100a7c:	2001      	movs	r0, #1
 8100a7e:	f003 fe29 	bl	81046d4 <osDelay>
		EdiabasDaemonNativeTaskInstance.process();
 8100a82:	bf00      	nop
 8100a84:	e7f5      	b.n	8100a72 <_Z18StartTask_EDaemonNPv+0x16>
	...

08100a88 <_ZN23EdiabasDaemonNativeTaskC1Ev>:
	}
}

EdiabasDaemonNativeTask::EdiabasDaemonNativeTask() : event_bus(EventBus(queueToNativeDaemon, EVENT_CLIENT_DAEMON_NATIVE)) {}
 8100a88:	b580      	push	{r7, lr}
 8100a8a:	b082      	sub	sp, #8
 8100a8c:	af00      	add	r7, sp, #0
 8100a8e:	6078      	str	r0, [r7, #4]
 8100a90:	687b      	ldr	r3, [r7, #4]
 8100a92:	4a05      	ldr	r2, [pc, #20]	@ (8100aa8 <_ZN23EdiabasDaemonNativeTaskC1Ev+0x20>)
 8100a94:	6811      	ldr	r1, [r2, #0]
 8100a96:	2204      	movs	r2, #4
 8100a98:	4618      	mov	r0, r3
 8100a9a:	f000 fa8f 	bl	8100fbc <_ZN8EventBusC1EP15QueueDefinition12EEventClient>
 8100a9e:	687b      	ldr	r3, [r7, #4]
 8100aa0:	4618      	mov	r0, r3
 8100aa2:	3708      	adds	r7, #8
 8100aa4:	46bd      	mov	sp, r7
 8100aa6:	bd80      	pop	{r7, pc}
 8100aa8:	10000090 	.word	0x10000090

08100aac <_ZN23EdiabasDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClient>:

void EdiabasDaemonNativeTask::OnEvent(EEventType event, UMessageData msg, EEventClient eventSender)
{
 8100aac:	b082      	sub	sp, #8
 8100aae:	b480      	push	{r7}
 8100ab0:	b083      	sub	sp, #12
 8100ab2:	af00      	add	r7, sp, #0
 8100ab4:	6078      	str	r0, [r7, #4]
 8100ab6:	f107 0010 	add.w	r0, r7, #16
 8100aba:	e880 000c 	stmia.w	r0, {r2, r3}
 8100abe:	460b      	mov	r3, r1
 8100ac0:	70fb      	strb	r3, [r7, #3]
////	case EVENT_CLIENT_DATA_MANAGER:
//		event_bus.send(event, msg, eventReceiver);
//	default:
//		break;;
//	}
}
 8100ac2:	bf00      	nop
 8100ac4:	370c      	adds	r7, #12
 8100ac6:	46bd      	mov	sp, r7
 8100ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100acc:	b002      	add	sp, #8
 8100ace:	4770      	bx	lr

08100ad0 <_ZZN23EdiabasDaemonNativeTask7processEvENKUl10EEventType12UMessageData12EEventClientE_clES0_S1_S2_>:
	size_t ret = ipc_recvmsg(&msg, len, 100000);
	if(ret == len)
	{
//		ipc_sendmsg(&msg, len, 0);
	}
	event_bus.receive([this](EEventType event, UMessageData msg, EEventClient eventSender){this->OnEvent(event, msg, eventSender);});
 8100ad0:	b082      	sub	sp, #8
 8100ad2:	b5b0      	push	{r4, r5, r7, lr}
 8100ad4:	b086      	sub	sp, #24
 8100ad6:	af04      	add	r7, sp, #16
 8100ad8:	6078      	str	r0, [r7, #4]
 8100ada:	f107 0018 	add.w	r0, r7, #24
 8100ade:	e880 000c 	stmia.w	r0, {r2, r3}
 8100ae2:	460b      	mov	r3, r1
 8100ae4:	70fb      	strb	r3, [r7, #3]
 8100ae6:	687b      	ldr	r3, [r7, #4]
 8100ae8:	681c      	ldr	r4, [r3, #0]
 8100aea:	78fd      	ldrb	r5, [r7, #3]
 8100aec:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8100af0:	9302      	str	r3, [sp, #8]
 8100af2:	466a      	mov	r2, sp
 8100af4:	f107 0320 	add.w	r3, r7, #32
 8100af8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8100afc:	e882 0003 	stmia.w	r2, {r0, r1}
 8100b00:	f107 0318 	add.w	r3, r7, #24
 8100b04:	cb0c      	ldmia	r3, {r2, r3}
 8100b06:	4629      	mov	r1, r5
 8100b08:	4620      	mov	r0, r4
 8100b0a:	f7ff ffcf 	bl	8100aac <_ZN23EdiabasDaemonNativeTask7OnEventE10EEventType12UMessageData12EEventClient>
 8100b0e:	bf00      	nop
 8100b10:	3708      	adds	r7, #8
 8100b12:	46bd      	mov	sp, r7
 8100b14:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8100b18:	b002      	add	sp, #8
 8100b1a:	4770      	bx	lr

08100b1c <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8100b1c:	b580      	push	{r7, lr}
 8100b1e:	b082      	sub	sp, #8
 8100b20:	af00      	add	r7, sp, #0
 8100b22:	6078      	str	r0, [r7, #4]
 8100b24:	687b      	ldr	r3, [r7, #4]
 8100b26:	4618      	mov	r0, r3
 8100b28:	f7ff ff85 	bl	8100a36 <_ZNSt14_Function_baseD1Ev>
 8100b2c:	687b      	ldr	r3, [r7, #4]
 8100b2e:	4618      	mov	r0, r3
 8100b30:	3708      	adds	r7, #8
 8100b32:	46bd      	mov	sp, r7
 8100b34:	bd80      	pop	{r7, pc}
	...

08100b38 <_ZN23EdiabasDaemonNativeTask7processEv>:
{
 8100b38:	b590      	push	{r4, r7, lr}
 8100b3a:	b091      	sub	sp, #68	@ 0x44
 8100b3c:	af00      	add	r7, sp, #0
 8100b3e:	6078      	str	r0, [r7, #4]
	size_t len = sizeof(msg);
 8100b40:	2318      	movs	r3, #24
 8100b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
	size_t ret = ipc_recvmsg(&msg, len, 100000);
 8100b44:	f107 030c 	add.w	r3, r7, #12
 8100b48:	4a0f      	ldr	r2, [pc, #60]	@ (8100b88 <_ZN23EdiabasDaemonNativeTask7processEv+0x50>)
 8100b4a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8100b4c:	4618      	mov	r0, r3
 8100b4e:	f7ff fcb9 	bl	81004c4 <ipc_recvmsg>
 8100b52:	63b8      	str	r0, [r7, #56]	@ 0x38
	event_bus.receive([this](EEventType event, UMessageData msg, EEventClient eventSender){this->OnEvent(event, msg, eventSender);});
 8100b54:	687c      	ldr	r4, [r7, #4]
 8100b56:	687b      	ldr	r3, [r7, #4]
 8100b58:	637b      	str	r3, [r7, #52]	@ 0x34
 8100b5a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8100b5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8100b62:	4611      	mov	r1, r2
 8100b64:	4618      	mov	r0, r3
 8100b66:	f000 f825 	bl	8100bb4 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientEEC1IZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_vEEOT_>
 8100b6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8100b6e:	4619      	mov	r1, r3
 8100b70:	4620      	mov	r0, r4
 8100b72:	f000 fa3d 	bl	8100ff0 <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientEE>
 8100b76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8100b7a:	4618      	mov	r0, r3
 8100b7c:	f7ff ffce 	bl	8100b1c <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientEED1Ev>
}
 8100b80:	bf00      	nop
 8100b82:	3744      	adds	r7, #68	@ 0x44
 8100b84:	46bd      	mov	sp, r7
 8100b86:	bd90      	pop	{r4, r7, pc}
 8100b88:	000186a0 	.word	0x000186a0

08100b8c <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8100b8c:	b480      	push	{r7}
 8100b8e:	b083      	sub	sp, #12
 8100b90:	af00      	add	r7, sp, #0
 8100b92:	6078      	str	r0, [r7, #4]
 8100b94:	687b      	ldr	r3, [r7, #4]
 8100b96:	461a      	mov	r2, r3
 8100b98:	2300      	movs	r3, #0
 8100b9a:	6013      	str	r3, [r2, #0]
 8100b9c:	6053      	str	r3, [r2, #4]
 8100b9e:	687b      	ldr	r3, [r7, #4]
 8100ba0:	2200      	movs	r2, #0
 8100ba2:	609a      	str	r2, [r3, #8]
 8100ba4:	687b      	ldr	r3, [r7, #4]
 8100ba6:	4618      	mov	r0, r3
 8100ba8:	370c      	adds	r7, #12
 8100baa:	46bd      	mov	sp, r7
 8100bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bb0:	4770      	bx	lr
	...

08100bb4 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientEEC1IZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_vEEOT_>:
       */
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2774. std::function construction vs assignment
      template<typename _Functor,
	       typename _Constraints = _Requires<_Callable<_Functor>>>
	function(_Functor&& __f)
 8100bb4:	b590      	push	{r4, r7, lr}
 8100bb6:	b083      	sub	sp, #12
 8100bb8:	af00      	add	r7, sp, #0
 8100bba:	6078      	str	r0, [r7, #4]
 8100bbc:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	: _Function_base()
 8100bbe:	687b      	ldr	r3, [r7, #4]
 8100bc0:	461a      	mov	r2, r3
 8100bc2:	2300      	movs	r3, #0
 8100bc4:	6013      	str	r3, [r2, #0]
 8100bc6:	6053      	str	r3, [r2, #4]
 8100bc8:	6093      	str	r3, [r2, #8]
 8100bca:	687b      	ldr	r3, [r7, #4]
 8100bcc:	4618      	mov	r0, r3
 8100bce:	f7ff ffdd 	bl	8100b8c <_ZNSt14_Function_baseC1Ev>
 8100bd2:	687b      	ldr	r3, [r7, #4]
 8100bd4:	2200      	movs	r2, #0
 8100bd6:	60da      	str	r2, [r3, #12]
	      "std::function target must be constructible from the "
	      "constructor argument");

	  using _My_handler = _Handler<_Functor>;

	  if (_My_handler::_M_not_empty_function(__f))
 8100bd8:	6838      	ldr	r0, [r7, #0]
 8100bda:	f000 f81b 	bl	8100c14 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E21_M_not_empty_functionIS5_EEbRKT_>
 8100bde:	4603      	mov	r3, r0
 8100be0:	2b00      	cmp	r3, #0
 8100be2:	d00e      	beq.n	8100c02 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientEEC1IZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_vEEOT_+0x4e>
	    {
	      _My_handler::_M_init_functor(_M_functor,
 8100be4:	687c      	ldr	r4, [r7, #4]
 8100be6:	6838      	ldr	r0, [r7, #0]
 8100be8:	f000 f81f 	bl	8100c2a <_ZSt7forwardIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8100bec:	4603      	mov	r3, r0
 8100bee:	4619      	mov	r1, r3
 8100bf0:	4620      	mov	r0, r4
 8100bf2:	f000 f825 	bl	8100c40 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E15_M_init_functorIS5_EEvRSt9_Any_dataOT_>
					   std::forward<_Functor>(__f));
	      _M_invoker = &_My_handler::_M_invoke;
 8100bf6:	687b      	ldr	r3, [r7, #4]
 8100bf8:	4a04      	ldr	r2, [pc, #16]	@ (8100c0c <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientEEC1IZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_vEEOT_+0x58>)
 8100bfa:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8100bfc:	687b      	ldr	r3, [r7, #4]
 8100bfe:	4a04      	ldr	r2, [pc, #16]	@ (8100c10 <_ZNSt8functionIFv10EEventType12UMessageData12EEventClientEEC1IZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_vEEOT_+0x5c>)
 8100c00:	609a      	str	r2, [r3, #8]
	    }
	}
 8100c02:	687b      	ldr	r3, [r7, #4]
 8100c04:	4618      	mov	r0, r3
 8100c06:	370c      	adds	r7, #12
 8100c08:	46bd      	mov	sp, r7
 8100c0a:	bd90      	pop	{r4, r7, pc}
 8100c0c:	08100c65 	.word	0x08100c65
 8100c10:	08100ca5 	.word	0x08100ca5

08100c14 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E21_M_not_empty_functionIS5_EEbRKT_>:
	  _M_not_empty_function(const _Tp&) noexcept
 8100c14:	b480      	push	{r7}
 8100c16:	b083      	sub	sp, #12
 8100c18:	af00      	add	r7, sp, #0
 8100c1a:	6078      	str	r0, [r7, #4]
	  { return true; }
 8100c1c:	2301      	movs	r3, #1
 8100c1e:	4618      	mov	r0, r3
 8100c20:	370c      	adds	r7, #12
 8100c22:	46bd      	mov	sp, r7
 8100c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c28:	4770      	bx	lr

08100c2a <_ZSt7forwardIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS5_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8100c2a:	b480      	push	{r7}
 8100c2c:	b083      	sub	sp, #12
 8100c2e:	af00      	add	r7, sp, #0
 8100c30:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8100c32:	687b      	ldr	r3, [r7, #4]
 8100c34:	4618      	mov	r0, r3
 8100c36:	370c      	adds	r7, #12
 8100c38:	46bd      	mov	sp, r7
 8100c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c3e:	4770      	bx	lr

08100c40 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E15_M_init_functorIS5_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8100c40:	b590      	push	{r4, r7, lr}
 8100c42:	b083      	sub	sp, #12
 8100c44:	af00      	add	r7, sp, #0
 8100c46:	6078      	str	r0, [r7, #4]
 8100c48:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8100c4a:	6838      	ldr	r0, [r7, #0]
 8100c4c:	f7ff ffed 	bl	8100c2a <_ZSt7forwardIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8100c50:	4603      	mov	r3, r0
 8100c52:	4622      	mov	r2, r4
 8100c54:	4619      	mov	r1, r3
 8100c56:	6878      	ldr	r0, [r7, #4]
 8100c58:	f000 f843 	bl	8100ce2 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E9_M_createIS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8100c5c:	bf00      	nop
 8100c5e:	370c      	adds	r7, #12
 8100c60:	46bd      	mov	sp, r7
 8100c62:	bd90      	pop	{r4, r7, pc}

08100c64 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientEZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_E9_M_invokeERKSt9_Any_dataOS0_OS1_OS2_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8100c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8100c66:	b085      	sub	sp, #20
 8100c68:	af00      	add	r7, sp, #0
 8100c6a:	60f8      	str	r0, [r7, #12]
 8100c6c:	60b9      	str	r1, [r7, #8]
 8100c6e:	607a      	str	r2, [r7, #4]
 8100c70:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8100c72:	68f8      	ldr	r0, [r7, #12]
 8100c74:	f000 f84e 	bl	8100d14 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E14_M_get_pointerERKSt9_Any_data>
 8100c78:	4604      	mov	r4, r0
 8100c7a:	68b8      	ldr	r0, [r7, #8]
 8100c7c:	f000 f85b 	bl	8100d36 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8100c80:	4605      	mov	r5, r0
 8100c82:	6878      	ldr	r0, [r7, #4]
 8100c84:	f000 f862 	bl	8100d4c <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8100c88:	4606      	mov	r6, r0
 8100c8a:	6838      	ldr	r0, [r7, #0]
 8100c8c:	f000 f869 	bl	8100d62 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8100c90:	4603      	mov	r3, r0
 8100c92:	4632      	mov	r2, r6
 8100c94:	4629      	mov	r1, r5
 8100c96:	4620      	mov	r0, r4
 8100c98:	f000 f86e 	bl	8100d78 <_ZSt10__invoke_rIvRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_JS1_S2_S3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>
				     std::forward<_ArgTypes>(__args)...);
 8100c9c:	bf00      	nop
      }
 8100c9e:	3714      	adds	r7, #20
 8100ca0:	46bd      	mov	sp, r7
 8100ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08100ca4 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientEZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8100ca4:	b590      	push	{r4, r7, lr}
 8100ca6:	b085      	sub	sp, #20
 8100ca8:	af00      	add	r7, sp, #0
 8100caa:	60f8      	str	r0, [r7, #12]
 8100cac:	60b9      	str	r1, [r7, #8]
 8100cae:	4613      	mov	r3, r2
 8100cb0:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8100cb2:	79fb      	ldrb	r3, [r7, #7]
 8100cb4:	2b01      	cmp	r3, #1
 8100cb6:	d109      	bne.n	8100ccc <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientEZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8100cb8:	68f8      	ldr	r0, [r7, #12]
 8100cba:	f000 f881 	bl	8100dc0 <_ZNSt9_Any_data9_M_accessIPZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EERT_v>
 8100cbe:	4604      	mov	r4, r0
 8100cc0:	68b8      	ldr	r0, [r7, #8]
 8100cc2:	f000 f827 	bl	8100d14 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E14_M_get_pointerERKSt9_Any_data>
 8100cc6:	4603      	mov	r3, r0
 8100cc8:	6023      	str	r3, [r4, #0]
	    break;
 8100cca:	e005      	b.n	8100cd8 <_ZNSt17_Function_handlerIFv10EEventType12UMessageData12EEventClientEZN23EdiabasDaemonNativeTask7processEvEUlS0_S1_S2_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8100ccc:	79fb      	ldrb	r3, [r7, #7]
 8100cce:	461a      	mov	r2, r3
 8100cd0:	68b9      	ldr	r1, [r7, #8]
 8100cd2:	68f8      	ldr	r0, [r7, #12]
 8100cd4:	f000 f880 	bl	8100dd8 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>
	return false;
 8100cd8:	2300      	movs	r3, #0
      }
 8100cda:	4618      	mov	r0, r3
 8100cdc:	3714      	adds	r7, #20
 8100cde:	46bd      	mov	sp, r7
 8100ce0:	bd90      	pop	{r4, r7, pc}

08100ce2 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E9_M_createIS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8100ce2:	b590      	push	{r4, r7, lr}
 8100ce4:	b085      	sub	sp, #20
 8100ce6:	af00      	add	r7, sp, #0
 8100ce8:	60f8      	str	r0, [r7, #12]
 8100cea:	60b9      	str	r1, [r7, #8]
 8100cec:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8100cee:	68f8      	ldr	r0, [r7, #12]
 8100cf0:	f7ff fe8b 	bl	8100a0a <_ZNSt9_Any_data9_M_accessEv>
 8100cf4:	4603      	mov	r3, r0
 8100cf6:	4619      	mov	r1, r3
 8100cf8:	2004      	movs	r0, #4
 8100cfa:	f7ff fe7a 	bl	81009f2 <_ZnwjPv>
 8100cfe:	4604      	mov	r4, r0
 8100d00:	68b8      	ldr	r0, [r7, #8]
 8100d02:	f7ff ff92 	bl	8100c2a <_ZSt7forwardIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8100d06:	4603      	mov	r3, r0
 8100d08:	681b      	ldr	r3, [r3, #0]
 8100d0a:	6023      	str	r3, [r4, #0]
	  }
 8100d0c:	bf00      	nop
 8100d0e:	3714      	adds	r7, #20
 8100d10:	46bd      	mov	sp, r7
 8100d12:	bd90      	pop	{r4, r7, pc}

08100d14 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 8100d14:	b580      	push	{r7, lr}
 8100d16:	b084      	sub	sp, #16
 8100d18:	af00      	add	r7, sp, #0
 8100d1a:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8100d1c:	6878      	ldr	r0, [r7, #4]
 8100d1e:	f000 f895 	bl	8100e4c <_ZNKSt9_Any_data9_M_accessIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EERKT_v>
 8100d22:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8100d24:	68f8      	ldr	r0, [r7, #12]
 8100d26:	f000 f89d 	bl	8100e64 <_ZSt11__addressofIKZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EPT_RS6_>
 8100d2a:	4603      	mov	r3, r0
 8100d2c:	bf00      	nop
	}
 8100d2e:	4618      	mov	r0, r3
 8100d30:	3710      	adds	r7, #16
 8100d32:	46bd      	mov	sp, r7
 8100d34:	bd80      	pop	{r7, pc}

08100d36 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8100d36:	b480      	push	{r7}
 8100d38:	b083      	sub	sp, #12
 8100d3a:	af00      	add	r7, sp, #0
 8100d3c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8100d3e:	687b      	ldr	r3, [r7, #4]
 8100d40:	4618      	mov	r0, r3
 8100d42:	370c      	adds	r7, #12
 8100d44:	46bd      	mov	sp, r7
 8100d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d4a:	4770      	bx	lr

08100d4c <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8100d4c:	b480      	push	{r7}
 8100d4e:	b083      	sub	sp, #12
 8100d50:	af00      	add	r7, sp, #0
 8100d52:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8100d54:	687b      	ldr	r3, [r7, #4]
 8100d56:	4618      	mov	r0, r3
 8100d58:	370c      	adds	r7, #12
 8100d5a:	46bd      	mov	sp, r7
 8100d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d60:	4770      	bx	lr

08100d62 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8100d62:	b480      	push	{r7}
 8100d64:	b083      	sub	sp, #12
 8100d66:	af00      	add	r7, sp, #0
 8100d68:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8100d6a:	687b      	ldr	r3, [r7, #4]
 8100d6c:	4618      	mov	r0, r3
 8100d6e:	370c      	adds	r7, #12
 8100d70:	46bd      	mov	sp, r7
 8100d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d76:	4770      	bx	lr

08100d78 <_ZSt10__invoke_rIvRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_JS1_S2_S3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8100d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8100d7c:	b086      	sub	sp, #24
 8100d7e:	af02      	add	r7, sp, #8
 8100d80:	60f8      	str	r0, [r7, #12]
 8100d82:	60b9      	str	r1, [r7, #8]
 8100d84:	607a      	str	r2, [r7, #4]
 8100d86:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8100d88:	68f8      	ldr	r0, [r7, #12]
 8100d8a:	f000 f876 	bl	8100e7a <_ZSt7forwardIRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS6_E4typeE>
 8100d8e:	4604      	mov	r4, r0
 8100d90:	68b8      	ldr	r0, [r7, #8]
 8100d92:	f7ff ffd0 	bl	8100d36 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8100d96:	4605      	mov	r5, r0
 8100d98:	6878      	ldr	r0, [r7, #4]
 8100d9a:	f7ff ffd7 	bl	8100d4c <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8100d9e:	4606      	mov	r6, r0
 8100da0:	6838      	ldr	r0, [r7, #0]
 8100da2:	f7ff ffde 	bl	8100d62 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8100da6:	4603      	mov	r3, r0
 8100da8:	9300      	str	r3, [sp, #0]
 8100daa:	4633      	mov	r3, r6
 8100dac:	462a      	mov	r2, r5
 8100dae:	4621      	mov	r1, r4
 8100db0:	4640      	mov	r0, r8
 8100db2:	f000 f86d 	bl	8100e90 <_ZSt13__invoke_implIvRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_JS1_S2_S3_EET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 8100db6:	bf00      	nop
 8100db8:	3710      	adds	r7, #16
 8100dba:	46bd      	mov	sp, r7
 8100dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08100dc0 <_ZNSt9_Any_data9_M_accessIPZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EERT_v>:
      _M_access() noexcept
 8100dc0:	b580      	push	{r7, lr}
 8100dc2:	b082      	sub	sp, #8
 8100dc4:	af00      	add	r7, sp, #0
 8100dc6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8100dc8:	6878      	ldr	r0, [r7, #4]
 8100dca:	f7ff fe1e 	bl	8100a0a <_ZNSt9_Any_data9_M_accessEv>
 8100dce:	4603      	mov	r3, r0
 8100dd0:	4618      	mov	r0, r3
 8100dd2:	3708      	adds	r7, #8
 8100dd4:	46bd      	mov	sp, r7
 8100dd6:	bd80      	pop	{r7, pc}

08100dd8 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8100dd8:	b590      	push	{r4, r7, lr}
 8100dda:	b085      	sub	sp, #20
 8100ddc:	af00      	add	r7, sp, #0
 8100dde:	60f8      	str	r0, [r7, #12]
 8100de0:	60b9      	str	r1, [r7, #8]
 8100de2:	4613      	mov	r3, r2
 8100de4:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8100de6:	79fb      	ldrb	r3, [r7, #7]
 8100de8:	2b03      	cmp	r3, #3
 8100dea:	d82a      	bhi.n	8100e42 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
 8100dec:	a201      	add	r2, pc, #4	@ (adr r2, 8100df4 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x1c>)
 8100dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100df2:	bf00      	nop
 8100df4:	08100e05 	.word	0x08100e05
 8100df8:	08100e13 	.word	0x08100e13
 8100dfc:	08100e27 	.word	0x08100e27
 8100e00:	08100e39 	.word	0x08100e39
	      __dest._M_access<const type_info*>() = nullptr;
 8100e04:	68f8      	ldr	r0, [r7, #12]
 8100e06:	f000 f86e 	bl	8100ee6 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 8100e0a:	4603      	mov	r3, r0
 8100e0c:	2200      	movs	r2, #0
 8100e0e:	601a      	str	r2, [r3, #0]
	      break;
 8100e10:	e017      	b.n	8100e42 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8100e12:	68f8      	ldr	r0, [r7, #12]
 8100e14:	f7ff ffd4 	bl	8100dc0 <_ZNSt9_Any_data9_M_accessIPZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EERT_v>
 8100e18:	4604      	mov	r4, r0
 8100e1a:	68b8      	ldr	r0, [r7, #8]
 8100e1c:	f7ff ff7a 	bl	8100d14 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E14_M_get_pointerERKSt9_Any_data>
 8100e20:	4603      	mov	r3, r0
 8100e22:	6023      	str	r3, [r4, #0]
	      break;
 8100e24:	e00d      	b.n	8100e42 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 8100e26:	68b8      	ldr	r0, [r7, #8]
 8100e28:	f7ff ff74 	bl	8100d14 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E14_M_get_pointerERKSt9_Any_data>
 8100e2c:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8100e2e:	4619      	mov	r1, r3
 8100e30:	68f8      	ldr	r0, [r7, #12]
 8100e32:	f000 f864 	bl	8100efe <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E15_M_init_functorIRKS5_EEvRSt9_Any_dataOT_>
	      break;
 8100e36:	e004      	b.n	8100e42 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 8100e38:	4621      	mov	r1, r4
 8100e3a:	68f8      	ldr	r0, [r7, #12]
 8100e3c:	f000 f871 	bl	8100f22 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8100e40:	bf00      	nop
	  return false;
 8100e42:	2300      	movs	r3, #0
	}
 8100e44:	4618      	mov	r0, r3
 8100e46:	3714      	adds	r7, #20
 8100e48:	46bd      	mov	sp, r7
 8100e4a:	bd90      	pop	{r4, r7, pc}

08100e4c <_ZNKSt9_Any_data9_M_accessIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EERKT_v>:
      _M_access() const noexcept
 8100e4c:	b580      	push	{r7, lr}
 8100e4e:	b082      	sub	sp, #8
 8100e50:	af00      	add	r7, sp, #0
 8100e52:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8100e54:	6878      	ldr	r0, [r7, #4]
 8100e56:	f7ff fde3 	bl	8100a20 <_ZNKSt9_Any_data9_M_accessEv>
 8100e5a:	4603      	mov	r3, r0
 8100e5c:	4618      	mov	r0, r3
 8100e5e:	3708      	adds	r7, #8
 8100e60:	46bd      	mov	sp, r7
 8100e62:	bd80      	pop	{r7, pc}

08100e64 <_ZSt11__addressofIKZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8100e64:	b480      	push	{r7}
 8100e66:	b083      	sub	sp, #12
 8100e68:	af00      	add	r7, sp, #0
 8100e6a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8100e6c:	687b      	ldr	r3, [r7, #4]
 8100e6e:	4618      	mov	r0, r3
 8100e70:	370c      	adds	r7, #12
 8100e72:	46bd      	mov	sp, r7
 8100e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e78:	4770      	bx	lr

08100e7a <_ZSt7forwardIRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8100e7a:	b480      	push	{r7}
 8100e7c:	b083      	sub	sp, #12
 8100e7e:	af00      	add	r7, sp, #0
 8100e80:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8100e82:	687b      	ldr	r3, [r7, #4]
 8100e84:	4618      	mov	r0, r3
 8100e86:	370c      	adds	r7, #12
 8100e88:	46bd      	mov	sp, r7
 8100e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e8e:	4770      	bx	lr

08100e90 <_ZSt13__invoke_implIvRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_JS1_S2_S3_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8100e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8100e92:	b089      	sub	sp, #36	@ 0x24
 8100e94:	af04      	add	r7, sp, #16
 8100e96:	7338      	strb	r0, [r7, #12]
 8100e98:	60b9      	str	r1, [r7, #8]
 8100e9a:	607a      	str	r2, [r7, #4]
 8100e9c:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8100e9e:	68b8      	ldr	r0, [r7, #8]
 8100ea0:	f7ff ffeb 	bl	8100e7a <_ZSt7forwardIRZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS6_E4typeE>
 8100ea4:	4606      	mov	r6, r0
 8100ea6:	6878      	ldr	r0, [r7, #4]
 8100ea8:	f7ff ff45 	bl	8100d36 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8100eac:	4603      	mov	r3, r0
 8100eae:	781d      	ldrb	r5, [r3, #0]
 8100eb0:	6838      	ldr	r0, [r7, #0]
 8100eb2:	f7ff ff4b 	bl	8100d4c <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8100eb6:	4604      	mov	r4, r0
 8100eb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8100eba:	f7ff ff52 	bl	8100d62 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 8100ebe:	4603      	mov	r3, r0
 8100ec0:	781b      	ldrb	r3, [r3, #0]
 8100ec2:	9302      	str	r3, [sp, #8]
 8100ec4:	466a      	mov	r2, sp
 8100ec6:	f104 0308 	add.w	r3, r4, #8
 8100eca:	e893 0003 	ldmia.w	r3, {r0, r1}
 8100ece:	e882 0003 	stmia.w	r2, {r0, r1}
 8100ed2:	e894 000c 	ldmia.w	r4, {r2, r3}
 8100ed6:	4629      	mov	r1, r5
 8100ed8:	4630      	mov	r0, r6
 8100eda:	f7ff fdf9 	bl	8100ad0 <_ZZN23EdiabasDaemonNativeTask7processEvENKUl10EEventType12UMessageData12EEventClientE_clES0_S1_S2_>
 8100ede:	bf00      	nop
 8100ee0:	3714      	adds	r7, #20
 8100ee2:	46bd      	mov	sp, r7
 8100ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08100ee6 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access() noexcept
 8100ee6:	b580      	push	{r7, lr}
 8100ee8:	b082      	sub	sp, #8
 8100eea:	af00      	add	r7, sp, #0
 8100eec:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8100eee:	6878      	ldr	r0, [r7, #4]
 8100ef0:	f7ff fd8b 	bl	8100a0a <_ZNSt9_Any_data9_M_accessEv>
 8100ef4:	4603      	mov	r3, r0
 8100ef6:	4618      	mov	r0, r3
 8100ef8:	3708      	adds	r7, #8
 8100efa:	46bd      	mov	sp, r7
 8100efc:	bd80      	pop	{r7, pc}

08100efe <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E15_M_init_functorIRKS5_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8100efe:	b590      	push	{r4, r7, lr}
 8100f00:	b083      	sub	sp, #12
 8100f02:	af00      	add	r7, sp, #0
 8100f04:	6078      	str	r0, [r7, #4]
 8100f06:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8100f08:	6838      	ldr	r0, [r7, #0]
 8100f0a:	f000 f816 	bl	8100f3a <_ZSt7forwardIRKZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS7_E4typeE>
 8100f0e:	4603      	mov	r3, r0
 8100f10:	4622      	mov	r2, r4
 8100f12:	4619      	mov	r1, r3
 8100f14:	6878      	ldr	r0, [r7, #4]
 8100f16:	f000 f81b 	bl	8100f50 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E9_M_createIRKS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8100f1a:	bf00      	nop
 8100f1c:	370c      	adds	r7, #12
 8100f1e:	46bd      	mov	sp, r7
 8100f20:	bd90      	pop	{r4, r7, pc}

08100f22 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8100f22:	b580      	push	{r7, lr}
 8100f24:	b082      	sub	sp, #8
 8100f26:	af00      	add	r7, sp, #0
 8100f28:	6078      	str	r0, [r7, #4]
 8100f2a:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8100f2c:	6878      	ldr	r0, [r7, #4]
 8100f2e:	f000 f828 	bl	8100f82 <_ZNSt9_Any_data9_M_accessIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EERT_v>
	}
 8100f32:	bf00      	nop
 8100f34:	3708      	adds	r7, #8
 8100f36:	46bd      	mov	sp, r7
 8100f38:	bd80      	pop	{r7, pc}

08100f3a <_ZSt7forwardIRKZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8100f3a:	b480      	push	{r7}
 8100f3c:	b083      	sub	sp, #12
 8100f3e:	af00      	add	r7, sp, #0
 8100f40:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8100f42:	687b      	ldr	r3, [r7, #4]
 8100f44:	4618      	mov	r0, r3
 8100f46:	370c      	adds	r7, #12
 8100f48:	46bd      	mov	sp, r7
 8100f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f4e:	4770      	bx	lr

08100f50 <_ZNSt14_Function_base13_Base_managerIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_E9_M_createIRKS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8100f50:	b590      	push	{r4, r7, lr}
 8100f52:	b085      	sub	sp, #20
 8100f54:	af00      	add	r7, sp, #0
 8100f56:	60f8      	str	r0, [r7, #12]
 8100f58:	60b9      	str	r1, [r7, #8]
 8100f5a:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8100f5c:	68f8      	ldr	r0, [r7, #12]
 8100f5e:	f7ff fd54 	bl	8100a0a <_ZNSt9_Any_data9_M_accessEv>
 8100f62:	4603      	mov	r3, r0
 8100f64:	4619      	mov	r1, r3
 8100f66:	2004      	movs	r0, #4
 8100f68:	f7ff fd43 	bl	81009f2 <_ZnwjPv>
 8100f6c:	4604      	mov	r4, r0
 8100f6e:	68b8      	ldr	r0, [r7, #8]
 8100f70:	f7ff ffe3 	bl	8100f3a <_ZSt7forwardIRKZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EOT_RNSt16remove_referenceIS7_E4typeE>
 8100f74:	4603      	mov	r3, r0
 8100f76:	681b      	ldr	r3, [r3, #0]
 8100f78:	6023      	str	r3, [r4, #0]
	  }
 8100f7a:	bf00      	nop
 8100f7c:	3714      	adds	r7, #20
 8100f7e:	46bd      	mov	sp, r7
 8100f80:	bd90      	pop	{r4, r7, pc}

08100f82 <_ZNSt9_Any_data9_M_accessIZN23EdiabasDaemonNativeTask7processEvEUl10EEventType12UMessageData12EEventClientE_EERT_v>:
      _M_access() noexcept
 8100f82:	b580      	push	{r7, lr}
 8100f84:	b082      	sub	sp, #8
 8100f86:	af00      	add	r7, sp, #0
 8100f88:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8100f8a:	6878      	ldr	r0, [r7, #4]
 8100f8c:	f7ff fd3d 	bl	8100a0a <_ZNSt9_Any_data9_M_accessEv>
 8100f90:	4603      	mov	r3, r0
 8100f92:	4618      	mov	r0, r3
 8100f94:	3708      	adds	r7, #8
 8100f96:	46bd      	mov	sp, r7
 8100f98:	bd80      	pop	{r7, pc}

08100f9a <_ZNKSt14_Function_base8_M_emptyEv>:
    bool _M_empty() const { return !_M_manager; }
 8100f9a:	b480      	push	{r7}
 8100f9c:	b083      	sub	sp, #12
 8100f9e:	af00      	add	r7, sp, #0
 8100fa0:	6078      	str	r0, [r7, #4]
 8100fa2:	687b      	ldr	r3, [r7, #4]
 8100fa4:	689b      	ldr	r3, [r3, #8]
 8100fa6:	2b00      	cmp	r3, #0
 8100fa8:	bf0c      	ite	eq
 8100faa:	2301      	moveq	r3, #1
 8100fac:	2300      	movne	r3, #0
 8100fae:	b2db      	uxtb	r3, r3
 8100fb0:	4618      	mov	r0, r3
 8100fb2:	370c      	adds	r7, #12
 8100fb4:	46bd      	mov	sp, r7
 8100fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fba:	4770      	bx	lr

08100fbc <_ZN8EventBusC1EP15QueueDefinition12EEventClient>:
#include "EventBus.h"

extern QueueHandle_t queueToEventManagerCM4;

EventBus::EventBus(QueueHandle_t queueSelf, EEventClient senderSelf)
 8100fbc:	b480      	push	{r7}
 8100fbe:	b085      	sub	sp, #20
 8100fc0:	af00      	add	r7, sp, #0
 8100fc2:	60f8      	str	r0, [r7, #12]
 8100fc4:	60b9      	str	r1, [r7, #8]
 8100fc6:	4613      	mov	r3, r2
 8100fc8:	71fb      	strb	r3, [r7, #7]
					 : queue_self(queueSelf),
 8100fca:	68fb      	ldr	r3, [r7, #12]
 8100fcc:	68ba      	ldr	r2, [r7, #8]
 8100fce:	601a      	str	r2, [r3, #0]
					   sender_self(senderSelf),
 8100fd0:	68fb      	ldr	r3, [r7, #12]
 8100fd2:	79fa      	ldrb	r2, [r7, #7]
 8100fd4:	711a      	strb	r2, [r3, #4]
					   queue_event_manager(queueToEventManagerCM4){}
 8100fd6:	4b05      	ldr	r3, [pc, #20]	@ (8100fec <_ZN8EventBusC1EP15QueueDefinition12EEventClient+0x30>)
 8100fd8:	681a      	ldr	r2, [r3, #0]
 8100fda:	68fb      	ldr	r3, [r7, #12]
 8100fdc:	609a      	str	r2, [r3, #8]
 8100fde:	68fb      	ldr	r3, [r7, #12]
 8100fe0:	4618      	mov	r0, r3
 8100fe2:	3714      	adds	r7, #20
 8100fe4:	46bd      	mov	sp, r7
 8100fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fea:	4770      	bx	lr
 8100fec:	1000008c 	.word	0x1000008c

08100ff0 <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientEE>:
	}
	return false;
}

void EventBus::receive(OnEventFunction on_event_function)
{
 8100ff0:	b590      	push	{r4, r7, lr}
 8100ff2:	b08f      	sub	sp, #60	@ 0x3c
 8100ff4:	af04      	add	r7, sp, #16
 8100ff6:	6078      	str	r0, [r7, #4]
 8100ff8:	6039      	str	r1, [r7, #0]
	if(queue_self)
 8100ffa:	687b      	ldr	r3, [r7, #4]
 8100ffc:	681b      	ldr	r3, [r3, #0]
 8100ffe:	2b00      	cmp	r3, #0
 8101000:	d024      	beq.n	810104c <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientEE+0x5c>
	{
		SMessage msg;
		BaseType_t ret = pdTRUE;
 8101002:	2301      	movs	r3, #1
 8101004:	627b      	str	r3, [r7, #36]	@ 0x24

		while(xQueueReceive(queue_self, &(msg), static_cast<TickType_t>(0)) == pdTRUE)
 8101006:	e011      	b.n	810102c <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientEE+0x3c>
		{
//			LOG_DEBUG("Bus Manager msg received, result[%d}, event[%d]", ret, msg.event_type);
			on_event_function(msg.event_type, msg.message_data, msg.event_sender);
 8101008:	7b3c      	ldrb	r4, [r7, #12]
 810100a:	f897 3020 	ldrb.w	r3, [r7, #32]
 810100e:	9302      	str	r3, [sp, #8]
 8101010:	466a      	mov	r2, sp
 8101012:	f107 0318 	add.w	r3, r7, #24
 8101016:	e893 0003 	ldmia.w	r3, {r0, r1}
 810101a:	e882 0003 	stmia.w	r2, {r0, r1}
 810101e:	f107 0310 	add.w	r3, r7, #16
 8101022:	cb0c      	ldmia	r3, {r2, r3}
 8101024:	4621      	mov	r1, r4
 8101026:	6838      	ldr	r0, [r7, #0]
 8101028:	f000 f814 	bl	8101054 <_ZNKSt8functionIFv10EEventType12UMessageData12EEventClientEEclES0_S1_S2_>
		while(xQueueReceive(queue_self, &(msg), static_cast<TickType_t>(0)) == pdTRUE)
 810102c:	687b      	ldr	r3, [r7, #4]
 810102e:	681b      	ldr	r3, [r3, #0]
 8101030:	f107 010c 	add.w	r1, r7, #12
 8101034:	2200      	movs	r2, #0
 8101036:	4618      	mov	r0, r3
 8101038:	f004 fc4e 	bl	81058d8 <xQueueReceive>
 810103c:	4603      	mov	r3, r0
 810103e:	2b01      	cmp	r3, #1
 8101040:	bf0c      	ite	eq
 8101042:	2301      	moveq	r3, #1
 8101044:	2300      	movne	r3, #0
 8101046:	b2db      	uxtb	r3, r3
 8101048:	2b00      	cmp	r3, #0
 810104a:	d1dd      	bne.n	8101008 <_ZN8EventBus7receiveESt8functionIFv10EEventType12UMessageData12EEventClientEE+0x18>
		}
	}
}
 810104c:	bf00      	nop
 810104e:	372c      	adds	r7, #44	@ 0x2c
 8101050:	46bd      	mov	sp, r7
 8101052:	bd90      	pop	{r4, r7, pc}

08101054 <_ZNKSt8functionIFv10EEventType12UMessageData12EEventClientEEclES0_S1_S2_>:
       *
       *  The function call operator invokes the target function object
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8101054:	b082      	sub	sp, #8
 8101056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810105a:	b082      	sub	sp, #8
 810105c:	af00      	add	r7, sp, #0
 810105e:	6078      	str	r0, [r7, #4]
 8101060:	f107 0020 	add.w	r0, r7, #32
 8101064:	e880 000c 	stmia.w	r0, {r2, r3}
 8101068:	460b      	mov	r3, r1
 810106a:	70fb      	strb	r3, [r7, #3]
      {
	if (_M_empty())
 810106c:	687b      	ldr	r3, [r7, #4]
 810106e:	4618      	mov	r0, r3
 8101070:	f7ff ff93 	bl	8100f9a <_ZNKSt14_Function_base8_M_emptyEv>
 8101074:	4603      	mov	r3, r0
 8101076:	2b00      	cmp	r3, #0
 8101078:	d001      	beq.n	810107e <_ZNKSt8functionIFv10EEventType12UMessageData12EEventClientEEclES0_S1_S2_+0x2a>
	  __throw_bad_function_call();
 810107a:	f006 fe00 	bl	8107c7e <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 810107e:	687b      	ldr	r3, [r7, #4]
 8101080:	68dc      	ldr	r4, [r3, #12]
 8101082:	687d      	ldr	r5, [r7, #4]
 8101084:	1cfb      	adds	r3, r7, #3
 8101086:	4618      	mov	r0, r3
 8101088:	f7ff fe55 	bl	8100d36 <_ZSt7forwardI10EEventTypeEOT_RNSt16remove_referenceIS1_E4typeE>
 810108c:	4606      	mov	r6, r0
 810108e:	f107 0020 	add.w	r0, r7, #32
 8101092:	f7ff fe5b 	bl	8100d4c <_ZSt7forwardI12UMessageDataEOT_RNSt16remove_referenceIS1_E4typeE>
 8101096:	4680      	mov	r8, r0
 8101098:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 810109c:	4618      	mov	r0, r3
 810109e:	f7ff fe60 	bl	8100d62 <_ZSt7forwardI12EEventClientEOT_RNSt16remove_referenceIS1_E4typeE>
 81010a2:	4603      	mov	r3, r0
 81010a4:	4642      	mov	r2, r8
 81010a6:	4631      	mov	r1, r6
 81010a8:	4628      	mov	r0, r5
 81010aa:	47a0      	blx	r4
 81010ac:	bf00      	nop
      }
 81010ae:	3708      	adds	r7, #8
 81010b0:	46bd      	mov	sp, r7
 81010b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 81010b6:	b002      	add	sp, #8
 81010b8:	4770      	bx	lr

081010ba <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 81010ba:	b580      	push	{r7, lr}
 81010bc:	b082      	sub	sp, #8
 81010be:	af00      	add	r7, sp, #0
 81010c0:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 81010c2:	687b      	ldr	r3, [r7, #4]
 81010c4:	2200      	movs	r2, #0
 81010c6:	701a      	strb	r2, [r3, #0]
      _M_reset();
 81010c8:	6878      	ldr	r0, [r7, #4]
 81010ca:	f000 f805 	bl	81010d8 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 81010ce:	687b      	ldr	r3, [r7, #4]
 81010d0:	4618      	mov	r0, r3
 81010d2:	3708      	adds	r7, #8
 81010d4:	46bd      	mov	sp, r7
 81010d6:	bd80      	pop	{r7, pc}

081010d8 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 81010d8:	b480      	push	{r7}
 81010da:	b083      	sub	sp, #12
 81010dc:	af00      	add	r7, sp, #0
 81010de:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 81010e0:	687b      	ldr	r3, [r7, #4]
 81010e2:	2200      	movs	r2, #0
 81010e4:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 81010e6:	687a      	ldr	r2, [r7, #4]
 81010e8:	687b      	ldr	r3, [r7, #4]
 81010ea:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 81010ec:	687a      	ldr	r2, [r7, #4]
 81010ee:	687b      	ldr	r3, [r7, #4]
 81010f0:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 81010f2:	687b      	ldr	r3, [r7, #4]
 81010f4:	2200      	movs	r2, #0
 81010f6:	611a      	str	r2, [r3, #16]
    }
 81010f8:	bf00      	nop
 81010fa:	370c      	adds	r7, #12
 81010fc:	46bd      	mov	sp, r7
 81010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101102:	4770      	bx	lr

08101104 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 8101104:	b580      	push	{r7, lr}
 8101106:	b082      	sub	sp, #8
 8101108:	af00      	add	r7, sp, #0
 810110a:	6078      	str	r0, [r7, #4]
 810110c:	687b      	ldr	r3, [r7, #4]
 810110e:	4618      	mov	r0, r3
 8101110:	f000 f957 	bl	81013c2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 8101114:	687b      	ldr	r3, [r7, #4]
 8101116:	4618      	mov	r0, r3
 8101118:	3708      	adds	r7, #8
 810111a:	46bd      	mov	sp, r7
 810111c:	bd80      	pop	{r7, pc}

0810111e <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 810111e:	b580      	push	{r7, lr}
 8101120:	b082      	sub	sp, #8
 8101122:	af00      	add	r7, sp, #0
 8101124:	6078      	str	r0, [r7, #4]
 8101126:	687b      	ldr	r3, [r7, #4]
 8101128:	4618      	mov	r0, r3
 810112a:	f7ff ffeb 	bl	8101104 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 810112e:	687b      	ldr	r3, [r7, #4]
 8101130:	4618      	mov	r0, r3
 8101132:	3708      	adds	r7, #8
 8101134:	46bd      	mov	sp, r7
 8101136:	bd80      	pop	{r7, pc}

08101138 <_ZN19EventManagerCM4TaskC1Ev>:
	{
		/* event queues of clients */
		EVENT_QUEUE_DAEMON_NATIVE = EVENT_CLIENT_DAEMON_NATIVE,
	};

	EventManagerCM4Task() {};
 8101138:	b580      	push	{r7, lr}
 810113a:	b082      	sub	sp, #8
 810113c:	af00      	add	r7, sp, #0
 810113e:	6078      	str	r0, [r7, #4]
 8101140:	687b      	ldr	r3, [r7, #4]
 8101142:	4618      	mov	r0, r3
 8101144:	f7ff ffeb 	bl	810111e <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 8101148:	687b      	ldr	r3, [r7, #4]
 810114a:	4618      	mov	r0, r3
 810114c:	3708      	adds	r7, #8
 810114e:	46bd      	mov	sp, r7
 8101150:	bd80      	pop	{r7, pc}
	...

08101154 <_Z20StartTask_EventMgrM4Pv>:

extern QueueHandle_t queueToEventManagerCM4;
extern QueueHandle_t queueToNativeDaemon;

void StartTask_EventMgrM4(void *argument)
{
 8101154:	b580      	push	{r7, lr}
 8101156:	b088      	sub	sp, #32
 8101158:	af00      	add	r7, sp, #0
 810115a:	6078      	str	r0, [r7, #4]
	EventManagerCM4Task eventManagerInstance;
 810115c:	f107 0308 	add.w	r3, r7, #8
 8101160:	4618      	mov	r0, r3
 8101162:	f7ff ffe9 	bl	8101138 <_ZN19EventManagerCM4TaskC1Ev>
	eventManagerInstance.addQueue(EventManagerCM4Task::EVENT_QUEUE_DAEMON_NATIVE, queueToNativeDaemon);
 8101166:	4b09      	ldr	r3, [pc, #36]	@ (810118c <_Z20StartTask_EventMgrM4Pv+0x38>)
 8101168:	681a      	ldr	r2, [r3, #0]
 810116a:	f107 0308 	add.w	r3, r7, #8
 810116e:	2104      	movs	r1, #4
 8101170:	4618      	mov	r0, r3
 8101172:	f000 f80d 	bl	8101190 <_ZN19EventManagerCM4Task8addQueueENS_11EEventQueueEP15QueueDefinition>

	for(;;)
	{
		eventManagerInstance.process();
 8101176:	f107 0308 	add.w	r3, r7, #8
 810117a:	4618      	mov	r0, r3
 810117c:	f000 f81b 	bl	81011b6 <_ZN19EventManagerCM4Task7processEv>
		osDelay(1);
 8101180:	2001      	movs	r0, #1
 8101182:	f003 faa7 	bl	81046d4 <osDelay>
		eventManagerInstance.process();
 8101186:	bf00      	nop
 8101188:	e7f5      	b.n	8101176 <_Z20StartTask_EventMgrM4Pv+0x22>
 810118a:	bf00      	nop
 810118c:	10000090 	.word	0x10000090

08101190 <_ZN19EventManagerCM4Task8addQueueENS_11EEventQueueEP15QueueDefinition>:
	}
}


void EventManagerCM4Task::addQueue(EEventQueue eventClient, QueueHandle_t queueHandle)
{
 8101190:	b580      	push	{r7, lr}
 8101192:	b086      	sub	sp, #24
 8101194:	af00      	add	r7, sp, #0
 8101196:	60f8      	str	r0, [r7, #12]
 8101198:	460b      	mov	r3, r1
 810119a:	607a      	str	r2, [r7, #4]
 810119c:	72fb      	strb	r3, [r7, #11]
	queue_handles.emplace(eventClient, queueHandle);
 810119e:	68f9      	ldr	r1, [r7, #12]
 81011a0:	f107 0010 	add.w	r0, r7, #16
 81011a4:	1d3b      	adds	r3, r7, #4
 81011a6:	f107 020b 	add.w	r2, r7, #11
 81011aa:	f000 f91f 	bl	81013ec <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_>
}
 81011ae:	bf00      	nop
 81011b0:	3718      	adds	r7, #24
 81011b2:	46bd      	mov	sp, r7
 81011b4:	bd80      	pop	{r7, pc}

081011b6 <_ZN19EventManagerCM4Task7processEv>:
	queue_handles.erase(eventClient);
}


void EventManagerCM4Task::process()
{
 81011b6:	b580      	push	{r7, lr}
 81011b8:	b086      	sub	sp, #24
 81011ba:	af00      	add	r7, sp, #0
 81011bc:	6078      	str	r0, [r7, #4]
	send(receive());
 81011be:	f107 030c 	add.w	r3, r7, #12
 81011c2:	6879      	ldr	r1, [r7, #4]
 81011c4:	4618      	mov	r0, r3
 81011c6:	f000 f835 	bl	8101234 <_ZN19EventManagerCM4Task7receiveEv>
 81011ca:	f107 030c 	add.w	r3, r7, #12
 81011ce:	4619      	mov	r1, r3
 81011d0:	6878      	ldr	r0, [r7, #4]
 81011d2:	f000 f88d 	bl	81012f0 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE>
 81011d6:	f107 030c 	add.w	r3, r7, #12
 81011da:	4618      	mov	r0, r3
 81011dc:	f000 f920 	bl	8101420 <_ZNSt6vectorI8SMessageSaIS0_EED1Ev>
}
 81011e0:	bf00      	nop
 81011e2:	3718      	adds	r7, #24
 81011e4:	46bd      	mov	sp, r7
 81011e6:	bd80      	pop	{r7, pc}

081011e8 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 81011e8:	b580      	push	{r7, lr}
 81011ea:	b082      	sub	sp, #8
 81011ec:	af00      	add	r7, sp, #0
 81011ee:	6078      	str	r0, [r7, #4]
 81011f0:	6878      	ldr	r0, [r7, #4]
 81011f2:	f000 f940 	bl	8101476 <_ZNSaI8SMessageED1Ev>
 81011f6:	687b      	ldr	r3, [r7, #4]
 81011f8:	4618      	mov	r0, r3
 81011fa:	3708      	adds	r7, #8
 81011fc:	46bd      	mov	sp, r7
 81011fe:	bd80      	pop	{r7, pc}

08101200 <_ZNSt12_Vector_baseI8SMessageSaIS0_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8101200:	b580      	push	{r7, lr}
 8101202:	b082      	sub	sp, #8
 8101204:	af00      	add	r7, sp, #0
 8101206:	6078      	str	r0, [r7, #4]
 8101208:	687b      	ldr	r3, [r7, #4]
 810120a:	4618      	mov	r0, r3
 810120c:	f000 f923 	bl	8101456 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implC1Ev>
 8101210:	687b      	ldr	r3, [r7, #4]
 8101212:	4618      	mov	r0, r3
 8101214:	3708      	adds	r7, #8
 8101216:	46bd      	mov	sp, r7
 8101218:	bd80      	pop	{r7, pc}

0810121a <_ZNSt6vectorI8SMessageSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 810121a:	b580      	push	{r7, lr}
 810121c:	b082      	sub	sp, #8
 810121e:	af00      	add	r7, sp, #0
 8101220:	6078      	str	r0, [r7, #4]
 8101222:	687b      	ldr	r3, [r7, #4]
 8101224:	4618      	mov	r0, r3
 8101226:	f7ff ffeb 	bl	8101200 <_ZNSt12_Vector_baseI8SMessageSaIS0_EEC1Ev>
 810122a:	687b      	ldr	r3, [r7, #4]
 810122c:	4618      	mov	r0, r3
 810122e:	3708      	adds	r7, #8
 8101230:	46bd      	mov	sp, r7
 8101232:	bd80      	pop	{r7, pc}

08101234 <_ZN19EventManagerCM4Task7receiveEv>:

std::vector<SMessage> EventManagerCM4Task::receive()
{
 8101234:	b5b0      	push	{r4, r5, r7, lr}
 8101236:	b092      	sub	sp, #72	@ 0x48
 8101238:	af00      	add	r7, sp, #0
 810123a:	6078      	str	r0, [r7, #4]
 810123c:	6039      	str	r1, [r7, #0]
	std::vector<SMessage> receivedMessages;
 810123e:	6878      	ldr	r0, [r7, #4]
 8101240:	f7ff ffeb 	bl	810121a <_ZNSt6vectorI8SMessageSaIS0_EEC1Ev>
	SMessage msg;

	BaseType_t ret = pdTRUE;
 8101244:	2301      	movs	r3, #1
 8101246:	647b      	str	r3, [r7, #68]	@ 0x44
	do
	{
		ret = xQueueReceive(queueToEventManagerCM4, &(msg), static_cast<TickType_t>(0));
 8101248:	4b28      	ldr	r3, [pc, #160]	@ (81012ec <_ZN19EventManagerCM4Task7receiveEv+0xb8>)
 810124a:	681b      	ldr	r3, [r3, #0]
 810124c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8101250:	2200      	movs	r2, #0
 8101252:	4618      	mov	r0, r3
 8101254:	f004 fb40 	bl	81058d8 <xQueueReceive>
 8101258:	6478      	str	r0, [r7, #68]	@ 0x44
		if(ret == pdTRUE)
 810125a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810125c:	2b01      	cmp	r3, #1
 810125e:	d105      	bne.n	810126c <_ZN19EventManagerCM4Task7receiveEv+0x38>
		{
			receivedMessages.push_back(msg);
 8101260:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8101264:	4619      	mov	r1, r3
 8101266:	6878      	ldr	r0, [r7, #4]
 8101268:	f000 f930 	bl	81014cc <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_>
		}
	}while(ret == pdTRUE);
 810126c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810126e:	2b01      	cmp	r3, #1
 8101270:	d0ea      	beq.n	8101248 <_ZN19EventManagerCM4Task7receiveEv+0x14>

	if(receivedMessages.size() > 0)
 8101272:	6878      	ldr	r0, [r7, #4]
 8101274:	f000 f950 	bl	8101518 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 8101278:	4603      	mov	r3, r0
 810127a:	2b00      	cmp	r3, #0
 810127c:	bf14      	ite	ne
 810127e:	2301      	movne	r3, #1
 8101280:	2300      	moveq	r3, #0
 8101282:	b2db      	uxtb	r3, r3
 8101284:	2b00      	cmp	r3, #0
 8101286:	d02b      	beq.n	81012e0 <_ZN19EventManagerCM4Task7receiveEv+0xac>
	{
		for(auto msg : receivedMessages)
 8101288:	687b      	ldr	r3, [r7, #4]
 810128a:	643b      	str	r3, [r7, #64]	@ 0x40
 810128c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 810128e:	f000 f959 	bl	8101544 <_ZNSt6vectorI8SMessageSaIS0_EE5beginEv>
 8101292:	4603      	mov	r3, r0
 8101294:	60fb      	str	r3, [r7, #12]
 8101296:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8101298:	f000 f964 	bl	8101564 <_ZNSt6vectorI8SMessageSaIS0_EE3endEv>
 810129c:	4603      	mov	r3, r0
 810129e:	60bb      	str	r3, [r7, #8]
 81012a0:	e013      	b.n	81012ca <_ZN19EventManagerCM4Task7receiveEv+0x96>
 81012a2:	f107 030c 	add.w	r3, r7, #12
 81012a6:	4618      	mov	r0, r3
 81012a8:	f000 f996 	bl	81015d8 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEdeEv>
 81012ac:	4603      	mov	r3, r0
 81012ae:	f107 0410 	add.w	r4, r7, #16
 81012b2:	461d      	mov	r5, r3
 81012b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81012b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81012b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 81012bc:	e884 0003 	stmia.w	r4, {r0, r1}
 81012c0:	f107 030c 	add.w	r3, r7, #12
 81012c4:	4618      	mov	r0, r3
 81012c6:	f000 f976 	bl	81015b6 <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEppEv>
 81012ca:	f107 0208 	add.w	r2, r7, #8
 81012ce:	f107 030c 	add.w	r3, r7, #12
 81012d2:	4611      	mov	r1, r2
 81012d4:	4618      	mov	r0, r3
 81012d6:	f000 f956 	bl	8101586 <_ZN9__gnu_cxxneIP8SMessageSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 81012da:	4603      	mov	r3, r0
 81012dc:	2b00      	cmp	r3, #0
 81012de:	d1e0      	bne.n	81012a2 <_ZN19EventManagerCM4Task7receiveEv+0x6e>
		{
//			LOG_DEBUG("EVENT_MANAGER: Received message. r[%d], s[%d], e[%d]", msg.event_receiver, msg.event_sender, msg.event_type);
		}
	}

	return receivedMessages;
 81012e0:	bf00      	nop
}
 81012e2:	6878      	ldr	r0, [r7, #4]
 81012e4:	3748      	adds	r7, #72	@ 0x48
 81012e6:	46bd      	mov	sp, r7
 81012e8:	bdb0      	pop	{r4, r5, r7, pc}
 81012ea:	bf00      	nop
 81012ec:	1000008c 	.word	0x1000008c

081012f0 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE>:

void EventManagerCM4Task::send(const std::vector<SMessage>& messages)
{
 81012f0:	b5b0      	push	{r4, r5, r7, lr}
 81012f2:	b090      	sub	sp, #64	@ 0x40
 81012f4:	af00      	add	r7, sp, #0
 81012f6:	6078      	str	r0, [r7, #4]
 81012f8:	6039      	str	r1, [r7, #0]
	for(auto msg : messages)
 81012fa:	683b      	ldr	r3, [r7, #0]
 81012fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81012fe:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8101300:	f000 f976 	bl	81015f0 <_ZNKSt6vectorI8SMessageSaIS0_EE5beginEv>
 8101304:	4603      	mov	r3, r0
 8101306:	61bb      	str	r3, [r7, #24]
 8101308:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 810130a:	f000 f981 	bl	8101610 <_ZNKSt6vectorI8SMessageSaIS0_EE3endEv>
 810130e:	4603      	mov	r3, r0
 8101310:	617b      	str	r3, [r7, #20]
 8101312:	e046      	b.n	81013a2 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0xb2>
 8101314:	f107 0318 	add.w	r3, r7, #24
 8101318:	4618      	mov	r0, r3
 810131a:	f000 f9b3 	bl	8101684 <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEdeEv>
 810131e:	4603      	mov	r3, r0
 8101320:	f107 041c 	add.w	r4, r7, #28
 8101324:	461d      	mov	r5, r3
 8101326:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101328:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810132a:	e895 0003 	ldmia.w	r5, {r0, r1}
 810132e:	e884 0003 	stmia.w	r4, {r0, r1}
	{
		auto eventReceiver = static_cast<EEventQueue>(msg.event_receiver);
 8101332:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8101336:	74fb      	strb	r3, [r7, #19]
		auto it = queue_handles.find(eventReceiver);
 8101338:	687b      	ldr	r3, [r7, #4]
 810133a:	f107 0213 	add.w	r2, r7, #19
 810133e:	4611      	mov	r1, r2
 8101340:	4618      	mov	r0, r3
 8101342:	f000 f9ab 	bl	810169c <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>
 8101346:	4603      	mov	r3, r0
 8101348:	60fb      	str	r3, [r7, #12]

		if(it != queue_handles.end())
 810134a:	687b      	ldr	r3, [r7, #4]
 810134c:	4618      	mov	r0, r3
 810134e:	f000 f9b4 	bl	81016ba <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8101352:	4603      	mov	r3, r0
 8101354:	637b      	str	r3, [r7, #52]	@ 0x34
 8101356:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 810135a:	f107 030c 	add.w	r3, r7, #12
 810135e:	4611      	mov	r1, r2
 8101360:	4618      	mov	r0, r3
 8101362:	f000 f9b7 	bl	81016d4 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 8101366:	4603      	mov	r3, r0
 8101368:	2b00      	cmp	r3, #0
 810136a:	d015      	beq.n	8101398 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0xa8>
		{
			QueueHandle_t targetQueue = queue_handles[eventReceiver];
 810136c:	687b      	ldr	r3, [r7, #4]
 810136e:	f107 0213 	add.w	r2, r7, #19
 8101372:	4611      	mov	r1, r2
 8101374:	4618      	mov	r0, r3
 8101376:	f000 f9c1 	bl	81016fc <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 810137a:	4603      	mov	r3, r0
 810137c:	681b      	ldr	r3, [r3, #0]
 810137e:	63bb      	str	r3, [r7, #56]	@ 0x38
			if(targetQueue)
 8101380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8101382:	2b00      	cmp	r3, #0
 8101384:	d008      	beq.n	8101398 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0xa8>
			{
				if(xQueueSend(targetQueue, static_cast<void*>(&msg), static_cast<TickType_t>(10)) != pdTRUE)
 8101386:	f107 011c 	add.w	r1, r7, #28
 810138a:	2300      	movs	r3, #0
 810138c:	220a      	movs	r2, #10
 810138e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8101390:	f004 f872 	bl	8105478 <xQueueGenericSend>
 8101394:	4603      	mov	r3, r0
 8101396:	2b01      	cmp	r3, #1
	for(auto msg : messages)
 8101398:	f107 0318 	add.w	r3, r7, #24
 810139c:	4618      	mov	r0, r3
 810139e:	f000 f960 	bl	8101662 <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEppEv>
 81013a2:	f107 0214 	add.w	r2, r7, #20
 81013a6:	f107 0318 	add.w	r3, r7, #24
 81013aa:	4611      	mov	r1, r2
 81013ac:	4618      	mov	r0, r3
 81013ae:	f000 f940 	bl	8101632 <_ZN9__gnu_cxxneIPK8SMessageSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 81013b2:	4603      	mov	r3, r0
 81013b4:	2b00      	cmp	r3, #0
 81013b6:	d1ad      	bne.n	8101314 <_ZN19EventManagerCM4Task4sendERKSt6vectorI8SMessageSaIS1_EE+0x24>
//					LOG_DEBUG("[FATAL] Could not send message. e[%d], r[%d]", msg.event_type, msg.event_receiver);
				}
			}
		}
	}
}
 81013b8:	bf00      	nop
 81013ba:	bf00      	nop
 81013bc:	3740      	adds	r7, #64	@ 0x40
 81013be:	46bd      	mov	sp, r7
 81013c0:	bdb0      	pop	{r4, r5, r7, pc}

081013c2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 81013c2:	b580      	push	{r7, lr}
 81013c4:	b082      	sub	sp, #8
 81013c6:	af00      	add	r7, sp, #0
 81013c8:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 81013ca:	6878      	ldr	r0, [r7, #4]
 81013cc:	f000 f9f2 	bl	81017b4 <_ZNSaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>
 81013d0:	687b      	ldr	r3, [r7, #4]
 81013d2:	4618      	mov	r0, r3
 81013d4:	f000 f9fa 	bl	81017cc <_ZNSt20_Rb_tree_key_compareISt4lessIN19EventManagerCM4Task11EEventQueueEEEC1Ev>
 81013d8:	687b      	ldr	r3, [r7, #4]
 81013da:	3304      	adds	r3, #4
 81013dc:	4618      	mov	r0, r3
 81013de:	f7ff fe6c 	bl	81010ba <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 81013e2:	687b      	ldr	r3, [r7, #4]
 81013e4:	4618      	mov	r0, r3
 81013e6:	3708      	adds	r7, #8
 81013e8:	46bd      	mov	sp, r7
 81013ea:	bd80      	pop	{r7, pc}

081013ec <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE7emplaceIJRS1_RS3_EEES6_ISt17_Rb_tree_iteratorIS8_EbEDpOT_>:
       *
       *  Insertion requires logarithmic time.
       */
      template<typename... _Args>
	std::pair<iterator, bool>
	emplace(_Args&&... __args)
 81013ec:	b5b0      	push	{r4, r5, r7, lr}
 81013ee:	b084      	sub	sp, #16
 81013f0:	af00      	add	r7, sp, #0
 81013f2:	60f8      	str	r0, [r7, #12]
 81013f4:	60b9      	str	r1, [r7, #8]
 81013f6:	607a      	str	r2, [r7, #4]
 81013f8:	603b      	str	r3, [r7, #0]
		      }
		    return {__i, false};
		  }
	      }
#endif
	  return _M_t._M_emplace_unique(std::forward<_Args>(__args)...);
 81013fa:	68bc      	ldr	r4, [r7, #8]
 81013fc:	6878      	ldr	r0, [r7, #4]
 81013fe:	f000 f9fc 	bl	81017fa <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8101402:	4605      	mov	r5, r0
 8101404:	6838      	ldr	r0, [r7, #0]
 8101406:	f000 fa03 	bl	8101810 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 810140a:	4603      	mov	r3, r0
 810140c:	68f8      	ldr	r0, [r7, #12]
 810140e:	462a      	mov	r2, r5
 8101410:	4621      	mov	r1, r4
 8101412:	f000 fa08 	bl	8101826 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJRS1_RS5_EEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_>
 8101416:	bf00      	nop
	}
 8101418:	68f8      	ldr	r0, [r7, #12]
 810141a:	3710      	adds	r7, #16
 810141c:	46bd      	mov	sp, r7
 810141e:	bdb0      	pop	{r4, r5, r7, pc}

08101420 <_ZNSt6vectorI8SMessageSaIS0_EED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 8101420:	b5b0      	push	{r4, r5, r7, lr}
 8101422:	b082      	sub	sp, #8
 8101424:	af00      	add	r7, sp, #0
 8101426:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8101428:	687b      	ldr	r3, [r7, #4]
 810142a:	681c      	ldr	r4, [r3, #0]
 810142c:	687b      	ldr	r3, [r7, #4]
 810142e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8101430:	687b      	ldr	r3, [r7, #4]
 8101432:	4618      	mov	r0, r3
 8101434:	f000 fa4c 	bl	81018d0 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8101438:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 810143a:	461a      	mov	r2, r3
 810143c:	4629      	mov	r1, r5
 810143e:	4620      	mov	r0, r4
 8101440:	f000 fa51 	bl	81018e6 <_ZSt8_DestroyIP8SMessageS0_EvT_S2_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8101444:	687b      	ldr	r3, [r7, #4]
 8101446:	4618      	mov	r0, r3
 8101448:	f000 f822 	bl	8101490 <_ZNSt12_Vector_baseI8SMessageSaIS0_EED1Ev>
 810144c:	687b      	ldr	r3, [r7, #4]
 810144e:	4618      	mov	r0, r3
 8101450:	3708      	adds	r7, #8
 8101452:	46bd      	mov	sp, r7
 8101454:	bdb0      	pop	{r4, r5, r7, pc}

08101456 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8101456:	b580      	push	{r7, lr}
 8101458:	b082      	sub	sp, #8
 810145a:	af00      	add	r7, sp, #0
 810145c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 810145e:	6878      	ldr	r0, [r7, #4]
 8101460:	f000 fa4f 	bl	8101902 <_ZNSaI8SMessageEC1Ev>
 8101464:	687b      	ldr	r3, [r7, #4]
 8101466:	4618      	mov	r0, r3
 8101468:	f000 fa57 	bl	810191a <_ZNSt12_Vector_baseI8SMessageSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 810146c:	687b      	ldr	r3, [r7, #4]
 810146e:	4618      	mov	r0, r3
 8101470:	3708      	adds	r7, #8
 8101472:	46bd      	mov	sp, r7
 8101474:	bd80      	pop	{r7, pc}

08101476 <_ZNSaI8SMessageED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8101476:	b580      	push	{r7, lr}
 8101478:	b082      	sub	sp, #8
 810147a:	af00      	add	r7, sp, #0
 810147c:	6078      	str	r0, [r7, #4]
 810147e:	6878      	ldr	r0, [r7, #4]
 8101480:	f000 fa5f 	bl	8101942 <_ZNSt15__new_allocatorI8SMessageED1Ev>
 8101484:	687b      	ldr	r3, [r7, #4]
 8101486:	4618      	mov	r0, r3
 8101488:	3708      	adds	r7, #8
 810148a:	46bd      	mov	sp, r7
 810148c:	bd80      	pop	{r7, pc}
	...

08101490 <_ZNSt12_Vector_baseI8SMessageSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8101490:	b580      	push	{r7, lr}
 8101492:	b082      	sub	sp, #8
 8101494:	af00      	add	r7, sp, #0
 8101496:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8101498:	687b      	ldr	r3, [r7, #4]
 810149a:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 810149c:	687b      	ldr	r3, [r7, #4]
 810149e:	689a      	ldr	r2, [r3, #8]
 81014a0:	687b      	ldr	r3, [r7, #4]
 81014a2:	681b      	ldr	r3, [r3, #0]
 81014a4:	1ad3      	subs	r3, r2, r3
 81014a6:	10db      	asrs	r3, r3, #3
 81014a8:	4a07      	ldr	r2, [pc, #28]	@ (81014c8 <_ZNSt12_Vector_baseI8SMessageSaIS0_EED1Ev+0x38>)
 81014aa:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 81014ae:	461a      	mov	r2, r3
 81014b0:	6878      	ldr	r0, [r7, #4]
 81014b2:	f000 fa51 	bl	8101958 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j>
      }
 81014b6:	687b      	ldr	r3, [r7, #4]
 81014b8:	4618      	mov	r0, r3
 81014ba:	f7ff fe95 	bl	81011e8 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE12_Vector_implD1Ev>
 81014be:	687b      	ldr	r3, [r7, #4]
 81014c0:	4618      	mov	r0, r3
 81014c2:	3708      	adds	r7, #8
 81014c4:	46bd      	mov	sp, r7
 81014c6:	bd80      	pop	{r7, pc}
 81014c8:	aaaaaaab 	.word	0xaaaaaaab

081014cc <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_>:
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      _GLIBCXX20_CONSTEXPR
      void
      push_back(const value_type& __x)
 81014cc:	b580      	push	{r7, lr}
 81014ce:	b082      	sub	sp, #8
 81014d0:	af00      	add	r7, sp, #0
 81014d2:	6078      	str	r0, [r7, #4]
 81014d4:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 81014d6:	687b      	ldr	r3, [r7, #4]
 81014d8:	685a      	ldr	r2, [r3, #4]
 81014da:	687b      	ldr	r3, [r7, #4]
 81014dc:	689b      	ldr	r3, [r3, #8]
 81014de:	429a      	cmp	r2, r3
 81014e0:	d00d      	beq.n	81014fe <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 81014e2:	6878      	ldr	r0, [r7, #4]
 81014e4:	687b      	ldr	r3, [r7, #4]
 81014e6:	685b      	ldr	r3, [r3, #4]
 81014e8:	683a      	ldr	r2, [r7, #0]
 81014ea:	4619      	mov	r1, r3
 81014ec:	f000 fa47 	bl	810197e <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 81014f0:	687b      	ldr	r3, [r7, #4]
 81014f2:	685b      	ldr	r3, [r3, #4]
 81014f4:	f103 0218 	add.w	r2, r3, #24
 81014f8:	687b      	ldr	r3, [r7, #4]
 81014fa:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 81014fc:	e008      	b.n	8101510 <_ZNSt6vectorI8SMessageSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 81014fe:	6878      	ldr	r0, [r7, #4]
 8101500:	f000 f830 	bl	8101564 <_ZNSt6vectorI8SMessageSaIS0_EE3endEv>
 8101504:	4603      	mov	r3, r0
 8101506:	683a      	ldr	r2, [r7, #0]
 8101508:	4619      	mov	r1, r3
 810150a:	6878      	ldr	r0, [r7, #4]
 810150c:	f000 fa60 	bl	81019d0 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8101510:	bf00      	nop
 8101512:	3708      	adds	r7, #8
 8101514:	46bd      	mov	sp, r7
 8101516:	bd80      	pop	{r7, pc}

08101518 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8101518:	b480      	push	{r7}
 810151a:	b083      	sub	sp, #12
 810151c:	af00      	add	r7, sp, #0
 810151e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8101520:	687b      	ldr	r3, [r7, #4]
 8101522:	685a      	ldr	r2, [r3, #4]
 8101524:	687b      	ldr	r3, [r7, #4]
 8101526:	681b      	ldr	r3, [r3, #0]
 8101528:	1ad3      	subs	r3, r2, r3
 810152a:	10db      	asrs	r3, r3, #3
 810152c:	4a04      	ldr	r2, [pc, #16]	@ (8101540 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv+0x28>)
 810152e:	fb02 f303 	mul.w	r3, r2, r3
 8101532:	4618      	mov	r0, r3
 8101534:	370c      	adds	r7, #12
 8101536:	46bd      	mov	sp, r7
 8101538:	f85d 7b04 	ldr.w	r7, [sp], #4
 810153c:	4770      	bx	lr
 810153e:	bf00      	nop
 8101540:	aaaaaaab 	.word	0xaaaaaaab

08101544 <_ZNSt6vectorI8SMessageSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8101544:	b580      	push	{r7, lr}
 8101546:	b084      	sub	sp, #16
 8101548:	af00      	add	r7, sp, #0
 810154a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 810154c:	687a      	ldr	r2, [r7, #4]
 810154e:	f107 030c 	add.w	r3, r7, #12
 8101552:	4611      	mov	r1, r2
 8101554:	4618      	mov	r0, r3
 8101556:	f000 fb03 	bl	8101b60 <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 810155a:	68fb      	ldr	r3, [r7, #12]
 810155c:	4618      	mov	r0, r3
 810155e:	3710      	adds	r7, #16
 8101560:	46bd      	mov	sp, r7
 8101562:	bd80      	pop	{r7, pc}

08101564 <_ZNSt6vectorI8SMessageSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8101564:	b580      	push	{r7, lr}
 8101566:	b084      	sub	sp, #16
 8101568:	af00      	add	r7, sp, #0
 810156a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 810156c:	687b      	ldr	r3, [r7, #4]
 810156e:	1d1a      	adds	r2, r3, #4
 8101570:	f107 030c 	add.w	r3, r7, #12
 8101574:	4611      	mov	r1, r2
 8101576:	4618      	mov	r0, r3
 8101578:	f000 faf2 	bl	8101b60 <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 810157c:	68fb      	ldr	r3, [r7, #12]
 810157e:	4618      	mov	r0, r3
 8101580:	3710      	adds	r7, #16
 8101582:	46bd      	mov	sp, r7
 8101584:	bd80      	pop	{r7, pc}

08101586 <_ZN9__gnu_cxxneIP8SMessageSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8101586:	b590      	push	{r4, r7, lr}
 8101588:	b083      	sub	sp, #12
 810158a:	af00      	add	r7, sp, #0
 810158c:	6078      	str	r0, [r7, #4]
 810158e:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8101590:	6878      	ldr	r0, [r7, #4]
 8101592:	f000 faf5 	bl	8101b80 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8101596:	4603      	mov	r3, r0
 8101598:	681c      	ldr	r4, [r3, #0]
 810159a:	6838      	ldr	r0, [r7, #0]
 810159c:	f000 faf0 	bl	8101b80 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 81015a0:	4603      	mov	r3, r0
 81015a2:	681b      	ldr	r3, [r3, #0]
 81015a4:	429c      	cmp	r4, r3
 81015a6:	bf14      	ite	ne
 81015a8:	2301      	movne	r3, #1
 81015aa:	2300      	moveq	r3, #0
 81015ac:	b2db      	uxtb	r3, r3
 81015ae:	4618      	mov	r0, r3
 81015b0:	370c      	adds	r7, #12
 81015b2:	46bd      	mov	sp, r7
 81015b4:	bd90      	pop	{r4, r7, pc}

081015b6 <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 81015b6:	b480      	push	{r7}
 81015b8:	b083      	sub	sp, #12
 81015ba:	af00      	add	r7, sp, #0
 81015bc:	6078      	str	r0, [r7, #4]
	++_M_current;
 81015be:	687b      	ldr	r3, [r7, #4]
 81015c0:	681b      	ldr	r3, [r3, #0]
 81015c2:	f103 0218 	add.w	r2, r3, #24
 81015c6:	687b      	ldr	r3, [r7, #4]
 81015c8:	601a      	str	r2, [r3, #0]
	return *this;
 81015ca:	687b      	ldr	r3, [r7, #4]
      }
 81015cc:	4618      	mov	r0, r3
 81015ce:	370c      	adds	r7, #12
 81015d0:	46bd      	mov	sp, r7
 81015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015d6:	4770      	bx	lr

081015d8 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 81015d8:	b480      	push	{r7}
 81015da:	b083      	sub	sp, #12
 81015dc:	af00      	add	r7, sp, #0
 81015de:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 81015e0:	687b      	ldr	r3, [r7, #4]
 81015e2:	681b      	ldr	r3, [r3, #0]
 81015e4:	4618      	mov	r0, r3
 81015e6:	370c      	adds	r7, #12
 81015e8:	46bd      	mov	sp, r7
 81015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015ee:	4770      	bx	lr

081015f0 <_ZNKSt6vectorI8SMessageSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 81015f0:	b580      	push	{r7, lr}
 81015f2:	b084      	sub	sp, #16
 81015f4:	af00      	add	r7, sp, #0
 81015f6:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 81015f8:	687a      	ldr	r2, [r7, #4]
 81015fa:	f107 030c 	add.w	r3, r7, #12
 81015fe:	4611      	mov	r1, r2
 8101600:	4618      	mov	r0, r3
 8101602:	f000 fac8 	bl	8101b96 <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8101606:	68fb      	ldr	r3, [r7, #12]
 8101608:	4618      	mov	r0, r3
 810160a:	3710      	adds	r7, #16
 810160c:	46bd      	mov	sp, r7
 810160e:	bd80      	pop	{r7, pc}

08101610 <_ZNKSt6vectorI8SMessageSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8101610:	b580      	push	{r7, lr}
 8101612:	b084      	sub	sp, #16
 8101614:	af00      	add	r7, sp, #0
 8101616:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8101618:	687b      	ldr	r3, [r7, #4]
 810161a:	1d1a      	adds	r2, r3, #4
 810161c:	f107 030c 	add.w	r3, r7, #12
 8101620:	4611      	mov	r1, r2
 8101622:	4618      	mov	r0, r3
 8101624:	f000 fab7 	bl	8101b96 <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8101628:	68fb      	ldr	r3, [r7, #12]
 810162a:	4618      	mov	r0, r3
 810162c:	3710      	adds	r7, #16
 810162e:	46bd      	mov	sp, r7
 8101630:	bd80      	pop	{r7, pc}

08101632 <_ZN9__gnu_cxxneIPK8SMessageSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8101632:	b590      	push	{r4, r7, lr}
 8101634:	b083      	sub	sp, #12
 8101636:	af00      	add	r7, sp, #0
 8101638:	6078      	str	r0, [r7, #4]
 810163a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 810163c:	6878      	ldr	r0, [r7, #4]
 810163e:	f000 faba 	bl	8101bb6 <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8101642:	4603      	mov	r3, r0
 8101644:	681c      	ldr	r4, [r3, #0]
 8101646:	6838      	ldr	r0, [r7, #0]
 8101648:	f000 fab5 	bl	8101bb6 <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 810164c:	4603      	mov	r3, r0
 810164e:	681b      	ldr	r3, [r3, #0]
 8101650:	429c      	cmp	r4, r3
 8101652:	bf14      	ite	ne
 8101654:	2301      	movne	r3, #1
 8101656:	2300      	moveq	r3, #0
 8101658:	b2db      	uxtb	r3, r3
 810165a:	4618      	mov	r0, r3
 810165c:	370c      	adds	r7, #12
 810165e:	46bd      	mov	sp, r7
 8101660:	bd90      	pop	{r4, r7, pc}

08101662 <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8101662:	b480      	push	{r7}
 8101664:	b083      	sub	sp, #12
 8101666:	af00      	add	r7, sp, #0
 8101668:	6078      	str	r0, [r7, #4]
	++_M_current;
 810166a:	687b      	ldr	r3, [r7, #4]
 810166c:	681b      	ldr	r3, [r3, #0]
 810166e:	f103 0218 	add.w	r2, r3, #24
 8101672:	687b      	ldr	r3, [r7, #4]
 8101674:	601a      	str	r2, [r3, #0]
	return *this;
 8101676:	687b      	ldr	r3, [r7, #4]
      }
 8101678:	4618      	mov	r0, r3
 810167a:	370c      	adds	r7, #12
 810167c:	46bd      	mov	sp, r7
 810167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101682:	4770      	bx	lr

08101684 <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8101684:	b480      	push	{r7}
 8101686:	b083      	sub	sp, #12
 8101688:	af00      	add	r7, sp, #0
 810168a:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 810168c:	687b      	ldr	r3, [r7, #4]
 810168e:	681b      	ldr	r3, [r3, #0]
 8101690:	4618      	mov	r0, r3
 8101692:	370c      	adds	r7, #12
 8101694:	46bd      	mov	sp, r7
 8101696:	f85d 7b04 	ldr.w	r7, [sp], #4
 810169a:	4770      	bx	lr

0810169c <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE4findERS7_>:
       *  pointing to the sought after %pair.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */

      iterator
      find(const key_type& __x)
 810169c:	b580      	push	{r7, lr}
 810169e:	b082      	sub	sp, #8
 81016a0:	af00      	add	r7, sp, #0
 81016a2:	6078      	str	r0, [r7, #4]
 81016a4:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x); }
 81016a6:	687b      	ldr	r3, [r7, #4]
 81016a8:	6839      	ldr	r1, [r7, #0]
 81016aa:	4618      	mov	r0, r3
 81016ac:	f000 fa8e 	bl	8101bcc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 81016b0:	4603      	mov	r3, r0
 81016b2:	4618      	mov	r0, r3
 81016b4:	3708      	adds	r7, #8
 81016b6:	46bd      	mov	sp, r7
 81016b8:	bd80      	pop	{r7, pc}

081016ba <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 81016ba:	b580      	push	{r7, lr}
 81016bc:	b082      	sub	sp, #8
 81016be:	af00      	add	r7, sp, #0
 81016c0:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 81016c2:	687b      	ldr	r3, [r7, #4]
 81016c4:	4618      	mov	r0, r3
 81016c6:	f000 fabd 	bl	8101c44 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 81016ca:	4603      	mov	r3, r0
 81016cc:	4618      	mov	r0, r3
 81016ce:	3708      	adds	r7, #8
 81016d0:	46bd      	mov	sp, r7
 81016d2:	bd80      	pop	{r7, pc}

081016d4 <_ZStneRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>:
      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 81016d4:	b480      	push	{r7}
 81016d6:	b083      	sub	sp, #12
 81016d8:	af00      	add	r7, sp, #0
 81016da:	6078      	str	r0, [r7, #4]
 81016dc:	6039      	str	r1, [r7, #0]
      { return __x._M_node != __y._M_node; }
 81016de:	687b      	ldr	r3, [r7, #4]
 81016e0:	681a      	ldr	r2, [r3, #0]
 81016e2:	683b      	ldr	r3, [r7, #0]
 81016e4:	681b      	ldr	r3, [r3, #0]
 81016e6:	429a      	cmp	r2, r3
 81016e8:	bf14      	ite	ne
 81016ea:	2301      	movne	r3, #1
 81016ec:	2300      	moveq	r3, #0
 81016ee:	b2db      	uxtb	r3, r3
 81016f0:	4618      	mov	r0, r3
 81016f2:	370c      	adds	r7, #12
 81016f4:	46bd      	mov	sp, r7
 81016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016fa:	4770      	bx	lr

081016fc <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 81016fc:	b590      	push	{r4, r7, lr}
 81016fe:	b08b      	sub	sp, #44	@ 0x2c
 8101700:	af02      	add	r7, sp, #8
 8101702:	6078      	str	r0, [r7, #4]
 8101704:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8101706:	6839      	ldr	r1, [r7, #0]
 8101708:	6878      	ldr	r0, [r7, #4]
 810170a:	f000 faac 	bl	8101c66 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 810170e:	4603      	mov	r3, r0
 8101710:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8101712:	6878      	ldr	r0, [r7, #4]
 8101714:	f7ff ffd1 	bl	81016ba <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8101718:	4603      	mov	r3, r0
 810171a:	60fb      	str	r3, [r7, #12]
 810171c:	f107 020c 	add.w	r2, r7, #12
 8101720:	f107 0308 	add.w	r3, r7, #8
 8101724:	4611      	mov	r1, r2
 8101726:	4618      	mov	r0, r3
 8101728:	f000 faac 	bl	8101c84 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 810172c:	4603      	mov	r3, r0
 810172e:	2b00      	cmp	r3, #0
 8101730:	d112      	bne.n	8101758 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x5c>
 8101732:	6878      	ldr	r0, [r7, #4]
 8101734:	f000 faba 	bl	8101cac <_ZNKSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8101738:	f107 0308 	add.w	r3, r7, #8
 810173c:	4618      	mov	r0, r3
 810173e:	f000 fac2 	bl	8101cc6 <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 8101742:	4603      	mov	r3, r0
 8101744:	461a      	mov	r2, r3
 8101746:	f107 0310 	add.w	r3, r7, #16
 810174a:	6839      	ldr	r1, [r7, #0]
 810174c:	4618      	mov	r0, r3
 810174e:	f000 fac8 	bl	8101ce2 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8101752:	4603      	mov	r3, r0
 8101754:	2b00      	cmp	r3, #0
 8101756:	d001      	beq.n	810175c <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 8101758:	2301      	movs	r3, #1
 810175a:	e000      	b.n	810175e <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x62>
 810175c:	2300      	movs	r3, #0
 810175e:	2b00      	cmp	r3, #0
 8101760:	d01b      	beq.n	810179a <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8101762:	687c      	ldr	r4, [r7, #4]
 8101764:	f107 0208 	add.w	r2, r7, #8
 8101768:	f107 0314 	add.w	r3, r7, #20
 810176c:	4611      	mov	r1, r2
 810176e:	4618      	mov	r0, r3
 8101770:	f000 fadb 	bl	8101d2a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 8101774:	f107 0318 	add.w	r3, r7, #24
 8101778:	6839      	ldr	r1, [r7, #0]
 810177a:	4618      	mov	r0, r3
 810177c:	f000 fac6 	bl	8101d0c <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8101780:	f107 0218 	add.w	r2, r7, #24
 8101784:	f107 031c 	add.w	r3, r7, #28
 8101788:	9300      	str	r3, [sp, #0]
 810178a:	4613      	mov	r3, r2
 810178c:	4a08      	ldr	r2, [pc, #32]	@ (81017b0 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb4>)
 810178e:	6979      	ldr	r1, [r7, #20]
 8101790:	4620      	mov	r0, r4
 8101792:	f000 fada 	bl	8101d4a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 8101796:	4603      	mov	r3, r0
 8101798:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 810179a:	f107 0308 	add.w	r3, r7, #8
 810179e:	4618      	mov	r0, r3
 81017a0:	f000 fa91 	bl	8101cc6 <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>
 81017a4:	4603      	mov	r3, r0
 81017a6:	3304      	adds	r3, #4
      }
 81017a8:	4618      	mov	r0, r3
 81017aa:	3724      	adds	r7, #36	@ 0x24
 81017ac:	46bd      	mov	sp, r7
 81017ae:	bd90      	pop	{r4, r7, pc}
 81017b0:	081081a0 	.word	0x081081a0

081017b4 <_ZNSaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 81017b4:	b580      	push	{r7, lr}
 81017b6:	b082      	sub	sp, #8
 81017b8:	af00      	add	r7, sp, #0
 81017ba:	6078      	str	r0, [r7, #4]
 81017bc:	6878      	ldr	r0, [r7, #4]
 81017be:	f000 fb0a 	bl	8101dd6 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>
 81017c2:	687b      	ldr	r3, [r7, #4]
 81017c4:	4618      	mov	r0, r3
 81017c6:	3708      	adds	r7, #8
 81017c8:	46bd      	mov	sp, r7
 81017ca:	bd80      	pop	{r7, pc}

081017cc <_ZNSt20_Rb_tree_key_compareISt4lessIN19EventManagerCM4Task11EEventQueueEEEC1Ev>:
      _Rb_tree_key_compare()
 81017cc:	b480      	push	{r7}
 81017ce:	b083      	sub	sp, #12
 81017d0:	af00      	add	r7, sp, #0
 81017d2:	6078      	str	r0, [r7, #4]
      { }
 81017d4:	687b      	ldr	r3, [r7, #4]
 81017d6:	4618      	mov	r0, r3
 81017d8:	370c      	adds	r7, #12
 81017da:	46bd      	mov	sp, r7
 81017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017e0:	4770      	bx	lr

081017e2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 81017e2:	b580      	push	{r7, lr}
 81017e4:	b082      	sub	sp, #8
 81017e6:	af00      	add	r7, sp, #0
 81017e8:	6078      	str	r0, [r7, #4]
      { return _M_mbegin(); }
 81017ea:	6878      	ldr	r0, [r7, #4]
 81017ec:	f000 fb27 	bl	8101e3e <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE9_M_mbeginEv>
 81017f0:	4603      	mov	r3, r0
 81017f2:	4618      	mov	r0, r3
 81017f4:	3708      	adds	r7, #8
 81017f6:	46bd      	mov	sp, r7
 81017f8:	bd80      	pop	{r7, pc}

081017fa <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81017fa:	b480      	push	{r7}
 81017fc:	b083      	sub	sp, #12
 81017fe:	af00      	add	r7, sp, #0
 8101800:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8101802:	687b      	ldr	r3, [r7, #4]
 8101804:	4618      	mov	r0, r3
 8101806:	370c      	adds	r7, #12
 8101808:	46bd      	mov	sp, r7
 810180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810180e:	4770      	bx	lr

08101810 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8101810:	b480      	push	{r7}
 8101812:	b083      	sub	sp, #12
 8101814:	af00      	add	r7, sp, #0
 8101816:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8101818:	687b      	ldr	r3, [r7, #4]
 810181a:	4618      	mov	r0, r3
 810181c:	370c      	adds	r7, #12
 810181e:	46bd      	mov	sp, r7
 8101820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101824:	4770      	bx	lr

08101826 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJRS1_RS5_EEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    template<typename... _Args>
      auto
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8101826:	b590      	push	{r4, r7, lr}
 8101828:	b08d      	sub	sp, #52	@ 0x34
 810182a:	af00      	add	r7, sp, #0
 810182c:	60f8      	str	r0, [r7, #12]
 810182e:	60b9      	str	r1, [r7, #8]
 8101830:	607a      	str	r2, [r7, #4]
 8101832:	603b      	str	r3, [r7, #0]
      _M_emplace_unique(_Args&&... __args)
      -> pair<iterator, bool>
      {
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
 8101834:	6878      	ldr	r0, [r7, #4]
 8101836:	f7ff ffe0 	bl	81017fa <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 810183a:	4604      	mov	r4, r0
 810183c:	6838      	ldr	r0, [r7, #0]
 810183e:	f7ff ffe7 	bl	8101810 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8101842:	4603      	mov	r3, r0
 8101844:	f107 0018 	add.w	r0, r7, #24
 8101848:	4622      	mov	r2, r4
 810184a:	68b9      	ldr	r1, [r7, #8]
 810184c:	f000 fb03 	bl	8101e56 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRS1_RS5_EEERSC_DpOT_>
	auto __res = _M_get_insert_unique_pos(__z._M_key());
 8101850:	f107 0318 	add.w	r3, r7, #24
 8101854:	4618      	mov	r0, r3
 8101856:	f000 fbb7 	bl	8101fc8 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>
 810185a:	4602      	mov	r2, r0
 810185c:	f107 0310 	add.w	r3, r7, #16
 8101860:	68b9      	ldr	r1, [r7, #8]
 8101862:	4618      	mov	r0, r3
 8101864:	f000 fb2b 	bl	8101ebe <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
	if (__res.second)
 8101868:	697b      	ldr	r3, [r7, #20]
 810186a:	2b00      	cmp	r3, #0
 810186c:	d015      	beq.n	810189a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJRS1_RS5_EEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_+0x74>
	  return {__z._M_insert(__res), true};
 810186e:	f107 0018 	add.w	r0, r7, #24
 8101872:	f107 0310 	add.w	r3, r7, #16
 8101876:	e893 0006 	ldmia.w	r3, {r1, r2}
 810187a:	f000 fbb3 	bl	8101fe4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>
 810187e:	4603      	mov	r3, r0
 8101880:	623b      	str	r3, [r7, #32]
 8101882:	2301      	movs	r3, #1
 8101884:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8101888:	f107 0227 	add.w	r2, r7, #39	@ 0x27
 810188c:	f107 0320 	add.w	r3, r7, #32
 8101890:	4619      	mov	r1, r3
 8101892:	68f8      	ldr	r0, [r7, #12]
 8101894:	f000 fbbf 	bl	8102016 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEbEC1IS7_bLb1EEEOT_OT0_>
 8101898:	e011      	b.n	81018be <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_emplace_uniqueIJRS1_RS5_EEES2_ISt17_Rb_tree_iteratorIS6_EbEDpOT_+0x98>
	return {iterator(__res.first), false};
 810189a:	693a      	ldr	r2, [r7, #16]
 810189c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81018a0:	4611      	mov	r1, r2
 81018a2:	4618      	mov	r0, r3
 81018a4:	f000 fbd0 	bl	8102048 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 81018a8:	2300      	movs	r3, #0
 81018aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 81018ae:	f107 022f 	add.w	r2, r7, #47	@ 0x2f
 81018b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81018b6:	4619      	mov	r1, r3
 81018b8:	68f8      	ldr	r0, [r7, #12]
 81018ba:	f000 fbac 	bl	8102016 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEbEC1IS7_bLb1EEEOT_OT0_>
      }
 81018be:	f107 0318 	add.w	r3, r7, #24
 81018c2:	4618      	mov	r0, r3
 81018c4:	f000 fae6 	bl	8101e94 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>
 81018c8:	68f8      	ldr	r0, [r7, #12]
 81018ca:	3734      	adds	r7, #52	@ 0x34
 81018cc:	46bd      	mov	sp, r7
 81018ce:	bd90      	pop	{r4, r7, pc}

081018d0 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 81018d0:	b480      	push	{r7}
 81018d2:	b083      	sub	sp, #12
 81018d4:	af00      	add	r7, sp, #0
 81018d6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 81018d8:	687b      	ldr	r3, [r7, #4]
 81018da:	4618      	mov	r0, r3
 81018dc:	370c      	adds	r7, #12
 81018de:	46bd      	mov	sp, r7
 81018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018e4:	4770      	bx	lr

081018e6 <_ZSt8_DestroyIP8SMessageS0_EvT_S2_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 81018e6:	b580      	push	{r7, lr}
 81018e8:	b084      	sub	sp, #16
 81018ea:	af00      	add	r7, sp, #0
 81018ec:	60f8      	str	r0, [r7, #12]
 81018ee:	60b9      	str	r1, [r7, #8]
 81018f0:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 81018f2:	68b9      	ldr	r1, [r7, #8]
 81018f4:	68f8      	ldr	r0, [r7, #12]
 81018f6:	f000 fbc2 	bl	810207e <_ZSt8_DestroyIP8SMessageEvT_S2_>
    }
 81018fa:	bf00      	nop
 81018fc:	3710      	adds	r7, #16
 81018fe:	46bd      	mov	sp, r7
 8101900:	bd80      	pop	{r7, pc}

08101902 <_ZNSaI8SMessageEC1Ev>:
 8101902:	b580      	push	{r7, lr}
 8101904:	b082      	sub	sp, #8
 8101906:	af00      	add	r7, sp, #0
 8101908:	6078      	str	r0, [r7, #4]
 810190a:	6878      	ldr	r0, [r7, #4]
 810190c:	f000 fbc4 	bl	8102098 <_ZNSt15__new_allocatorI8SMessageEC1Ev>
 8101910:	687b      	ldr	r3, [r7, #4]
 8101912:	4618      	mov	r0, r3
 8101914:	3708      	adds	r7, #8
 8101916:	46bd      	mov	sp, r7
 8101918:	bd80      	pop	{r7, pc}

0810191a <_ZNSt12_Vector_baseI8SMessageSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 810191a:	b480      	push	{r7}
 810191c:	b083      	sub	sp, #12
 810191e:	af00      	add	r7, sp, #0
 8101920:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8101922:	687b      	ldr	r3, [r7, #4]
 8101924:	2200      	movs	r2, #0
 8101926:	601a      	str	r2, [r3, #0]
 8101928:	687b      	ldr	r3, [r7, #4]
 810192a:	2200      	movs	r2, #0
 810192c:	605a      	str	r2, [r3, #4]
 810192e:	687b      	ldr	r3, [r7, #4]
 8101930:	2200      	movs	r2, #0
 8101932:	609a      	str	r2, [r3, #8]
	{ }
 8101934:	687b      	ldr	r3, [r7, #4]
 8101936:	4618      	mov	r0, r3
 8101938:	370c      	adds	r7, #12
 810193a:	46bd      	mov	sp, r7
 810193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101940:	4770      	bx	lr

08101942 <_ZNSt15__new_allocatorI8SMessageED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8101942:	b480      	push	{r7}
 8101944:	b083      	sub	sp, #12
 8101946:	af00      	add	r7, sp, #0
 8101948:	6078      	str	r0, [r7, #4]
 810194a:	687b      	ldr	r3, [r7, #4]
 810194c:	4618      	mov	r0, r3
 810194e:	370c      	adds	r7, #12
 8101950:	46bd      	mov	sp, r7
 8101952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101956:	4770      	bx	lr

08101958 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8101958:	b580      	push	{r7, lr}
 810195a:	b084      	sub	sp, #16
 810195c:	af00      	add	r7, sp, #0
 810195e:	60f8      	str	r0, [r7, #12]
 8101960:	60b9      	str	r1, [r7, #8]
 8101962:	607a      	str	r2, [r7, #4]
	if (__p)
 8101964:	68bb      	ldr	r3, [r7, #8]
 8101966:	2b00      	cmp	r3, #0
 8101968:	d005      	beq.n	8101976 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 810196a:	68fb      	ldr	r3, [r7, #12]
 810196c:	687a      	ldr	r2, [r7, #4]
 810196e:	68b9      	ldr	r1, [r7, #8]
 8101970:	4618      	mov	r0, r3
 8101972:	f000 fb9c 	bl	81020ae <_ZNSt16allocator_traitsISaI8SMessageEE10deallocateERS1_PS0_j>
      }
 8101976:	bf00      	nop
 8101978:	3710      	adds	r7, #16
 810197a:	46bd      	mov	sp, r7
 810197c:	bd80      	pop	{r7, pc}

0810197e <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 810197e:	b580      	push	{r7, lr}
 8101980:	b084      	sub	sp, #16
 8101982:	af00      	add	r7, sp, #0
 8101984:	60f8      	str	r0, [r7, #12]
 8101986:	60b9      	str	r1, [r7, #8]
 8101988:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 810198a:	6878      	ldr	r0, [r7, #4]
 810198c:	f000 fb9e 	bl	81020cc <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>
 8101990:	4603      	mov	r3, r0
 8101992:	461a      	mov	r2, r3
 8101994:	68b9      	ldr	r1, [r7, #8]
 8101996:	68f8      	ldr	r0, [r7, #12]
 8101998:	f000 fba3 	bl	81020e2 <_ZNSt15__new_allocatorI8SMessageE9constructIS0_JRKS0_EEEvPT_DpOT0_>
	}
 810199c:	bf00      	nop
 810199e:	3710      	adds	r7, #16
 81019a0:	46bd      	mov	sp, r7
 81019a2:	bd80      	pop	{r7, pc}

081019a4 <_ZNSt6vectorI8SMessageSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 81019a4:	b580      	push	{r7, lr}
 81019a6:	b082      	sub	sp, #8
 81019a8:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 81019aa:	4618      	mov	r0, r3
 81019ac:	f000 f805 	bl	81019ba <_ZNSt6vectorI8SMessageSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 81019b0:	4603      	mov	r3, r0
      }
 81019b2:	4618      	mov	r0, r3
 81019b4:	3708      	adds	r7, #8
 81019b6:	46bd      	mov	sp, r7
 81019b8:	bd80      	pop	{r7, pc}

081019ba <_ZNSt6vectorI8SMessageSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 81019ba:	b480      	push	{r7}
 81019bc:	b083      	sub	sp, #12
 81019be:	af00      	add	r7, sp, #0
 81019c0:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 81019c2:	2301      	movs	r3, #1
      }
 81019c4:	4618      	mov	r0, r3
 81019c6:	370c      	adds	r7, #12
 81019c8:	46bd      	mov	sp, r7
 81019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019ce:	4770      	bx	lr

081019d0 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 81019d0:	b5b0      	push	{r4, r5, r7, lr}
 81019d2:	b08c      	sub	sp, #48	@ 0x30
 81019d4:	af00      	add	r7, sp, #0
 81019d6:	60f8      	str	r0, [r7, #12]
 81019d8:	60b9      	str	r1, [r7, #8]
 81019da:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 81019dc:	4a5e      	ldr	r2, [pc, #376]	@ (8101b58 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x188>)
 81019de:	2101      	movs	r1, #1
 81019e0:	68f8      	ldr	r0, [r7, #12]
 81019e2:	f000 fb99 	bl	8102118 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc>
 81019e6:	62b8      	str	r0, [r7, #40]	@ 0x28
      pointer __old_start = this->_M_impl._M_start;
 81019e8:	68fb      	ldr	r3, [r7, #12]
 81019ea:	681b      	ldr	r3, [r3, #0]
 81019ec:	627b      	str	r3, [r7, #36]	@ 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 81019ee:	68fb      	ldr	r3, [r7, #12]
 81019f0:	685b      	ldr	r3, [r3, #4]
 81019f2:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 81019f4:	68f8      	ldr	r0, [r7, #12]
 81019f6:	f7ff fda5 	bl	8101544 <_ZNSt6vectorI8SMessageSaIS0_EE5beginEv>
 81019fa:	4603      	mov	r3, r0
 81019fc:	617b      	str	r3, [r7, #20]
 81019fe:	f107 0214 	add.w	r2, r7, #20
 8101a02:	f107 0308 	add.w	r3, r7, #8
 8101a06:	4611      	mov	r1, r2
 8101a08:	4618      	mov	r0, r3
 8101a0a:	f000 fbcd 	bl	81021a8 <_ZN9__gnu_cxxmiIP8SMessageSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8101a0e:	4603      	mov	r3, r0
 8101a10:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8101a12:	68fb      	ldr	r3, [r7, #12]
 8101a14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8101a16:	4618      	mov	r0, r3
 8101a18:	f000 fbe0 	bl	81021dc <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj>
 8101a1c:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8101a1e:	69bb      	ldr	r3, [r7, #24]
 8101a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8101a22:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8101a24:	69fa      	ldr	r2, [r7, #28]
 8101a26:	4613      	mov	r3, r2
 8101a28:	005b      	lsls	r3, r3, #1
 8101a2a:	4413      	add	r3, r2
 8101a2c:	00db      	lsls	r3, r3, #3
 8101a2e:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8101a30:	69bb      	ldr	r3, [r7, #24]
 8101a32:	189d      	adds	r5, r3, r2
 8101a34:	6878      	ldr	r0, [r7, #4]
 8101a36:	f000 fb49 	bl	81020cc <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>
 8101a3a:	4603      	mov	r3, r0
 8101a3c:	461a      	mov	r2, r3
 8101a3e:	4629      	mov	r1, r5
 8101a40:	4620      	mov	r0, r4
 8101a42:	f7ff ff9c 	bl	810197e <_ZNSt16allocator_traitsISaI8SMessageEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8101a46:	2300      	movs	r3, #0
 8101a48:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8101a4a:	f7ff ffab 	bl	81019a4 <_ZNSt6vectorI8SMessageSaIS0_EE15_S_use_relocateEv>
 8101a4e:	4603      	mov	r3, r0
 8101a50:	2b00      	cmp	r3, #0
 8101a52:	d027      	beq.n	8101aa4 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd4>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8101a54:	f107 0308 	add.w	r3, r7, #8
 8101a58:	4618      	mov	r0, r3
 8101a5a:	f000 f891 	bl	8101b80 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8101a5e:	4603      	mov	r3, r0
 8101a60:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8101a62:	68fb      	ldr	r3, [r7, #12]
 8101a64:	4618      	mov	r0, r3
 8101a66:	f7ff ff33 	bl	81018d0 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8101a6a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8101a6c:	69ba      	ldr	r2, [r7, #24]
 8101a6e:	4621      	mov	r1, r4
 8101a70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8101a72:	f000 fbc7 	bl	8102204 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8101a76:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 8101a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101a7a:	3318      	adds	r3, #24
 8101a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8101a7e:	f107 0308 	add.w	r3, r7, #8
 8101a82:	4618      	mov	r0, r3
 8101a84:	f000 f87c 	bl	8101b80 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8101a88:	4603      	mov	r3, r0
 8101a8a:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8101a8c:	68fb      	ldr	r3, [r7, #12]
 8101a8e:	4618      	mov	r0, r3
 8101a90:	f7ff ff1e 	bl	81018d0 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8101a94:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8101a96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8101a98:	6a39      	ldr	r1, [r7, #32]
 8101a9a:	4620      	mov	r0, r4
 8101a9c:	f000 fbb2 	bl	8102204 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8101aa0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8101aa2:	e026      	b.n	8101af2 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x122>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8101aa4:	f107 0308 	add.w	r3, r7, #8
 8101aa8:	4618      	mov	r0, r3
 8101aaa:	f000 f869 	bl	8101b80 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8101aae:	4603      	mov	r3, r0
 8101ab0:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8101ab2:	68fb      	ldr	r3, [r7, #12]
 8101ab4:	4618      	mov	r0, r3
 8101ab6:	f7ff ff0b 	bl	81018d0 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8101aba:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8101abc:	69ba      	ldr	r2, [r7, #24]
 8101abe:	4621      	mov	r1, r4
 8101ac0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8101ac2:	f000 fbb3 	bl	810222c <_ZSt34__uninitialized_move_if_noexcept_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>
 8101ac6:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 8101ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101aca:	3318      	adds	r3, #24
 8101acc:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8101ace:	f107 0308 	add.w	r3, r7, #8
 8101ad2:	4618      	mov	r0, r3
 8101ad4:	f000 f854 	bl	8101b80 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 8101ad8:	4603      	mov	r3, r0
 8101ada:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8101adc:	68fb      	ldr	r3, [r7, #12]
 8101ade:	4618      	mov	r0, r3
 8101ae0:	f7ff fef6 	bl	81018d0 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8101ae4:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8101ae6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8101ae8:	6a39      	ldr	r1, [r7, #32]
 8101aea:	4620      	mov	r0, r4
 8101aec:	f000 fb9e 	bl	810222c <_ZSt34__uninitialized_move_if_noexcept_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>
 8101af0:	62f8      	str	r0, [r7, #44]	@ 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8101af2:	f7ff ff57 	bl	81019a4 <_ZNSt6vectorI8SMessageSaIS0_EE15_S_use_relocateEv>
 8101af6:	4603      	mov	r3, r0
 8101af8:	f083 0301 	eor.w	r3, r3, #1
 8101afc:	b2db      	uxtb	r3, r3
 8101afe:	2b00      	cmp	r3, #0
 8101b00:	d009      	beq.n	8101b16 <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x146>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8101b02:	68fb      	ldr	r3, [r7, #12]
 8101b04:	4618      	mov	r0, r3
 8101b06:	f7ff fee3 	bl	81018d0 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 8101b0a:	4603      	mov	r3, r0
 8101b0c:	461a      	mov	r2, r3
 8101b0e:	6a39      	ldr	r1, [r7, #32]
 8101b10:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8101b12:	f7ff fee8 	bl	81018e6 <_ZSt8_DestroyIP8SMessageS0_EvT_S2_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8101b16:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8101b18:	68fb      	ldr	r3, [r7, #12]
 8101b1a:	689a      	ldr	r2, [r3, #8]
 8101b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101b1e:	1ad3      	subs	r3, r2, r3
 8101b20:	10db      	asrs	r3, r3, #3
 8101b22:	4a0e      	ldr	r2, [pc, #56]	@ (8101b5c <_ZNSt6vectorI8SMessageSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x18c>)
 8101b24:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 8101b28:	461a      	mov	r2, r3
 8101b2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8101b2c:	f7ff ff14 	bl	8101958 <_ZNSt12_Vector_baseI8SMessageSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 8101b30:	68fb      	ldr	r3, [r7, #12]
 8101b32:	69ba      	ldr	r2, [r7, #24]
 8101b34:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8101b36:	68fb      	ldr	r3, [r7, #12]
 8101b38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8101b3a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8101b3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8101b3e:	4613      	mov	r3, r2
 8101b40:	005b      	lsls	r3, r3, #1
 8101b42:	4413      	add	r3, r2
 8101b44:	00db      	lsls	r3, r3, #3
 8101b46:	461a      	mov	r2, r3
 8101b48:	69bb      	ldr	r3, [r7, #24]
 8101b4a:	441a      	add	r2, r3
 8101b4c:	68fb      	ldr	r3, [r7, #12]
 8101b4e:	609a      	str	r2, [r3, #8]
    }
 8101b50:	bf00      	nop
 8101b52:	3730      	adds	r7, #48	@ 0x30
 8101b54:	46bd      	mov	sp, r7
 8101b56:	bdb0      	pop	{r4, r5, r7, pc}
 8101b58:	08108100 	.word	0x08108100
 8101b5c:	aaaaaaab 	.word	0xaaaaaaab

08101b60 <_ZN9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8101b60:	b480      	push	{r7}
 8101b62:	b083      	sub	sp, #12
 8101b64:	af00      	add	r7, sp, #0
 8101b66:	6078      	str	r0, [r7, #4]
 8101b68:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8101b6a:	683b      	ldr	r3, [r7, #0]
 8101b6c:	681a      	ldr	r2, [r3, #0]
 8101b6e:	687b      	ldr	r3, [r7, #4]
 8101b70:	601a      	str	r2, [r3, #0]
 8101b72:	687b      	ldr	r3, [r7, #4]
 8101b74:	4618      	mov	r0, r3
 8101b76:	370c      	adds	r7, #12
 8101b78:	46bd      	mov	sp, r7
 8101b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b7e:	4770      	bx	lr

08101b80 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8101b80:	b480      	push	{r7}
 8101b82:	b083      	sub	sp, #12
 8101b84:	af00      	add	r7, sp, #0
 8101b86:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8101b88:	687b      	ldr	r3, [r7, #4]
 8101b8a:	4618      	mov	r0, r3
 8101b8c:	370c      	adds	r7, #12
 8101b8e:	46bd      	mov	sp, r7
 8101b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b94:	4770      	bx	lr

08101b96 <_ZN9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8101b96:	b480      	push	{r7}
 8101b98:	b083      	sub	sp, #12
 8101b9a:	af00      	add	r7, sp, #0
 8101b9c:	6078      	str	r0, [r7, #4]
 8101b9e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8101ba0:	683b      	ldr	r3, [r7, #0]
 8101ba2:	681a      	ldr	r2, [r3, #0]
 8101ba4:	687b      	ldr	r3, [r7, #4]
 8101ba6:	601a      	str	r2, [r3, #0]
 8101ba8:	687b      	ldr	r3, [r7, #4]
 8101baa:	4618      	mov	r0, r3
 8101bac:	370c      	adds	r7, #12
 8101bae:	46bd      	mov	sp, r7
 8101bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bb4:	4770      	bx	lr

08101bb6 <_ZNK9__gnu_cxx17__normal_iteratorIPK8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8101bb6:	b480      	push	{r7}
 8101bb8:	b083      	sub	sp, #12
 8101bba:	af00      	add	r7, sp, #0
 8101bbc:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8101bbe:	687b      	ldr	r3, [r7, #4]
 8101bc0:	4618      	mov	r0, r3
 8101bc2:	370c      	adds	r7, #12
 8101bc4:	46bd      	mov	sp, r7
 8101bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bca:	4770      	bx	lr

08101bcc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8101bcc:	b590      	push	{r4, r7, lr}
 8101bce:	b085      	sub	sp, #20
 8101bd0:	af00      	add	r7, sp, #0
 8101bd2:	6078      	str	r0, [r7, #4]
 8101bd4:	6039      	str	r1, [r7, #0]
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8101bd6:	6878      	ldr	r0, [r7, #4]
 8101bd8:	f7ff fe03 	bl	81017e2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8101bdc:	4604      	mov	r4, r0
 8101bde:	6878      	ldr	r0, [r7, #4]
 8101be0:	f000 fb3d 	bl	810225e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8101be4:	4602      	mov	r2, r0
 8101be6:	683b      	ldr	r3, [r7, #0]
 8101be8:	4621      	mov	r1, r4
 8101bea:	6878      	ldr	r0, [r7, #4]
 8101bec:	f000 fb43 	bl	8102276 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8101bf0:	4603      	mov	r3, r0
 8101bf2:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8101bf4:	6878      	ldr	r0, [r7, #4]
 8101bf6:	f000 f825 	bl	8101c44 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8101bfa:	4603      	mov	r3, r0
 8101bfc:	60fb      	str	r3, [r7, #12]
 8101bfe:	f107 020c 	add.w	r2, r7, #12
 8101c02:	f107 0308 	add.w	r3, r7, #8
 8101c06:	4611      	mov	r1, r2
 8101c08:	4618      	mov	r0, r3
 8101c0a:	f000 f83b 	bl	8101c84 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 8101c0e:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8101c10:	2b00      	cmp	r3, #0
 8101c12:	d10d      	bne.n	8101c30 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x64>
	      || _M_impl._M_key_compare(__k,
 8101c14:	687c      	ldr	r4, [r7, #4]
					_S_key(__j._M_node))) ? end() : __j;
 8101c16:	68bb      	ldr	r3, [r7, #8]
	      || _M_impl._M_key_compare(__k,
 8101c18:	4618      	mov	r0, r3
 8101c1a:	f000 fb5d 	bl	81022d8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8101c1e:	4603      	mov	r3, r0
 8101c20:	461a      	mov	r2, r3
 8101c22:	6839      	ldr	r1, [r7, #0]
 8101c24:	4620      	mov	r0, r4
 8101c26:	f000 f85c 	bl	8101ce2 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8101c2a:	4603      	mov	r3, r0
 8101c2c:	2b00      	cmp	r3, #0
 8101c2e:	d004      	beq.n	8101c3a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8101c30:	6878      	ldr	r0, [r7, #4]
 8101c32:	f000 f807 	bl	8101c44 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8101c36:	4603      	mov	r3, r0
 8101c38:	e000      	b.n	8101c3c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x70>
 8101c3a:	68bb      	ldr	r3, [r7, #8]
    }
 8101c3c:	4618      	mov	r0, r3
 8101c3e:	3714      	adds	r7, #20
 8101c40:	46bd      	mov	sp, r7
 8101c42:	bd90      	pop	{r4, r7, pc}

08101c44 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8101c44:	b580      	push	{r7, lr}
 8101c46:	b084      	sub	sp, #16
 8101c48:	af00      	add	r7, sp, #0
 8101c4a:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8101c4c:	687b      	ldr	r3, [r7, #4]
 8101c4e:	1d1a      	adds	r2, r3, #4
 8101c50:	f107 030c 	add.w	r3, r7, #12
 8101c54:	4611      	mov	r1, r2
 8101c56:	4618      	mov	r0, r3
 8101c58:	f000 f9f6 	bl	8102048 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8101c5c:	68fb      	ldr	r3, [r7, #12]
 8101c5e:	4618      	mov	r0, r3
 8101c60:	3710      	adds	r7, #16
 8101c62:	46bd      	mov	sp, r7
 8101c64:	bd80      	pop	{r7, pc}

08101c66 <_ZNSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 8101c66:	b580      	push	{r7, lr}
 8101c68:	b082      	sub	sp, #8
 8101c6a:	af00      	add	r7, sp, #0
 8101c6c:	6078      	str	r0, [r7, #4]
 8101c6e:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8101c70:	687b      	ldr	r3, [r7, #4]
 8101c72:	6839      	ldr	r1, [r7, #0]
 8101c74:	4618      	mov	r0, r3
 8101c76:	f000 fb3b 	bl	81022f0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 8101c7a:	4603      	mov	r3, r0
 8101c7c:	4618      	mov	r0, r3
 8101c7e:	3708      	adds	r7, #8
 8101c80:	46bd      	mov	sp, r7
 8101c82:	bd80      	pop	{r7, pc}

08101c84 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8101c84:	b480      	push	{r7}
 8101c86:	b083      	sub	sp, #12
 8101c88:	af00      	add	r7, sp, #0
 8101c8a:	6078      	str	r0, [r7, #4]
 8101c8c:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8101c8e:	687b      	ldr	r3, [r7, #4]
 8101c90:	681a      	ldr	r2, [r3, #0]
 8101c92:	683b      	ldr	r3, [r7, #0]
 8101c94:	681b      	ldr	r3, [r3, #0]
 8101c96:	429a      	cmp	r2, r3
 8101c98:	bf0c      	ite	eq
 8101c9a:	2301      	moveq	r3, #1
 8101c9c:	2300      	movne	r3, #0
 8101c9e:	b2db      	uxtb	r3, r3
 8101ca0:	4618      	mov	r0, r3
 8101ca2:	370c      	adds	r7, #12
 8101ca4:	46bd      	mov	sp, r7
 8101ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101caa:	4770      	bx	lr

08101cac <_ZNKSt3mapIN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8101cac:	b590      	push	{r4, r7, lr}
 8101cae:	b083      	sub	sp, #12
 8101cb0:	af00      	add	r7, sp, #0
 8101cb2:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8101cb4:	687b      	ldr	r3, [r7, #4]
 8101cb6:	4618      	mov	r0, r3
 8101cb8:	f000 fb31 	bl	810231e <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8101cbc:	bf00      	nop
 8101cbe:	4620      	mov	r0, r4
 8101cc0:	370c      	adds	r7, #12
 8101cc2:	46bd      	mov	sp, r7
 8101cc4:	bd90      	pop	{r4, r7, pc}

08101cc6 <_ZNKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8101cc6:	b580      	push	{r7, lr}
 8101cc8:	b082      	sub	sp, #8
 8101cca:	af00      	add	r7, sp, #0
 8101ccc:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8101cce:	687b      	ldr	r3, [r7, #4]
 8101cd0:	681b      	ldr	r3, [r3, #0]
 8101cd2:	4618      	mov	r0, r3
 8101cd4:	f000 fb2e 	bl	8102334 <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 8101cd8:	4603      	mov	r3, r0
 8101cda:	4618      	mov	r0, r3
 8101cdc:	3708      	adds	r7, #8
 8101cde:	46bd      	mov	sp, r7
 8101ce0:	bd80      	pop	{r7, pc}

08101ce2 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8101ce2:	b480      	push	{r7}
 8101ce4:	b085      	sub	sp, #20
 8101ce6:	af00      	add	r7, sp, #0
 8101ce8:	60f8      	str	r0, [r7, #12]
 8101cea:	60b9      	str	r1, [r7, #8]
 8101cec:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8101cee:	68bb      	ldr	r3, [r7, #8]
 8101cf0:	781a      	ldrb	r2, [r3, #0]
 8101cf2:	687b      	ldr	r3, [r7, #4]
 8101cf4:	781b      	ldrb	r3, [r3, #0]
 8101cf6:	429a      	cmp	r2, r3
 8101cf8:	bf34      	ite	cc
 8101cfa:	2301      	movcc	r3, #1
 8101cfc:	2300      	movcs	r3, #0
 8101cfe:	b2db      	uxtb	r3, r3
 8101d00:	4618      	mov	r0, r3
 8101d02:	3714      	adds	r7, #20
 8101d04:	46bd      	mov	sp, r7
 8101d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d0a:	4770      	bx	lr

08101d0c <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1ILb1ELb1EEES3_>:
	: _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
	constexpr
	tuple(const _Elements&... __elements)
 8101d0c:	b580      	push	{r7, lr}
 8101d0e:	b082      	sub	sp, #8
 8101d10:	af00      	add	r7, sp, #0
 8101d12:	6078      	str	r0, [r7, #4]
 8101d14:	6039      	str	r1, [r7, #0]
	noexcept(__nothrow_constructible<const _Elements&...>())
	: _Inherited(__elements...) { }
 8101d16:	687b      	ldr	r3, [r7, #4]
 8101d18:	6839      	ldr	r1, [r7, #0]
 8101d1a:	4618      	mov	r0, r3
 8101d1c:	f000 fb18 	bl	8102350 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1ES3_>
 8101d20:	687b      	ldr	r3, [r7, #4]
 8101d22:	4618      	mov	r0, r3
 8101d24:	3708      	adds	r7, #8
 8101d26:	46bd      	mov	sp, r7
 8101d28:	bd80      	pop	{r7, pc}

08101d2a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8101d2a:	b480      	push	{r7}
 8101d2c:	b083      	sub	sp, #12
 8101d2e:	af00      	add	r7, sp, #0
 8101d30:	6078      	str	r0, [r7, #4]
 8101d32:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8101d34:	683b      	ldr	r3, [r7, #0]
 8101d36:	681a      	ldr	r2, [r3, #0]
 8101d38:	687b      	ldr	r3, [r7, #4]
 8101d3a:	601a      	str	r2, [r3, #0]
 8101d3c:	687b      	ldr	r3, [r7, #4]
 8101d3e:	4618      	mov	r0, r3
 8101d40:	370c      	adds	r7, #12
 8101d42:	46bd      	mov	sp, r7
 8101d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d48:	4770      	bx	lr

08101d4a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8101d4a:	b5b0      	push	{r4, r5, r7, lr}
 8101d4c:	b08c      	sub	sp, #48	@ 0x30
 8101d4e:	af02      	add	r7, sp, #8
 8101d50:	60f8      	str	r0, [r7, #12]
 8101d52:	60b9      	str	r1, [r7, #8]
 8101d54:	607a      	str	r2, [r7, #4]
 8101d56:	603b      	str	r3, [r7, #0]
	_Auto_node __z(*this, std::forward<_Args>(__args)...);
 8101d58:	6878      	ldr	r0, [r7, #4]
 8101d5a:	f000 fb08 	bl	810236e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8101d5e:	4604      	mov	r4, r0
 8101d60:	6838      	ldr	r0, [r7, #0]
 8101d62:	f000 fb0f 	bl	8102384 <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8101d66:	4605      	mov	r5, r0
 8101d68:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8101d6a:	f000 fb16 	bl	810239a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8101d6e:	4603      	mov	r3, r0
 8101d70:	f107 001c 	add.w	r0, r7, #28
 8101d74:	9300      	str	r3, [sp, #0]
 8101d76:	462b      	mov	r3, r5
 8101d78:	4622      	mov	r2, r4
 8101d7a:	68f9      	ldr	r1, [r7, #12]
 8101d7c:	f000 fb18 	bl	81023b0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEERSC_DpOT_>
	auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
 8101d80:	f107 031c 	add.w	r3, r7, #28
 8101d84:	4618      	mov	r0, r3
 8101d86:	f000 f91f 	bl	8101fc8 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>
 8101d8a:	4603      	mov	r3, r0
 8101d8c:	f107 0014 	add.w	r0, r7, #20
 8101d90:	68ba      	ldr	r2, [r7, #8]
 8101d92:	68f9      	ldr	r1, [r7, #12]
 8101d94:	f000 fb2f 	bl	81023f6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	if (__res.second)
 8101d98:	69bb      	ldr	r3, [r7, #24]
 8101d9a:	2b00      	cmp	r3, #0
 8101d9c:	d009      	beq.n	8101db2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x68>
	  return __z._M_insert(__res);
 8101d9e:	f107 001c 	add.w	r0, r7, #28
 8101da2:	f107 0314 	add.w	r3, r7, #20
 8101da6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8101daa:	f000 f91b 	bl	8101fe4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>
 8101dae:	4604      	mov	r4, r0
 8101db0:	e007      	b.n	8101dc2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x78>
	return iterator(__res.first);
 8101db2:	697a      	ldr	r2, [r7, #20]
 8101db4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8101db8:	4611      	mov	r1, r2
 8101dba:	4618      	mov	r0, r3
 8101dbc:	f000 f944 	bl	8102048 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8101dc0:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
      }
 8101dc2:	f107 031c 	add.w	r3, r7, #28
 8101dc6:	4618      	mov	r0, r3
 8101dc8:	f000 f864 	bl	8101e94 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>
 8101dcc:	4623      	mov	r3, r4
 8101dce:	4618      	mov	r0, r3
 8101dd0:	3728      	adds	r7, #40	@ 0x28
 8101dd2:	46bd      	mov	sp, r7
 8101dd4:	bdb0      	pop	{r4, r5, r7, pc}

08101dd6 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8101dd6:	b480      	push	{r7}
 8101dd8:	b083      	sub	sp, #12
 8101dda:	af00      	add	r7, sp, #0
 8101ddc:	6078      	str	r0, [r7, #4]
 8101dde:	687b      	ldr	r3, [r7, #4]
 8101de0:	4618      	mov	r0, r3
 8101de2:	370c      	adds	r7, #12
 8101de4:	46bd      	mov	sp, r7
 8101de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101dea:	4770      	bx	lr

08101dec <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8101dec:	b480      	push	{r7}
 8101dee:	b083      	sub	sp, #12
 8101df0:	af00      	add	r7, sp, #0
 8101df2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8101df4:	687b      	ldr	r3, [r7, #4]
 8101df6:	68db      	ldr	r3, [r3, #12]
 8101df8:	4618      	mov	r0, r3
 8101dfa:	370c      	adds	r7, #12
 8101dfc:	46bd      	mov	sp, r7
 8101dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e02:	4770      	bx	lr

08101e04 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8101e04:	b480      	push	{r7}
 8101e06:	b083      	sub	sp, #12
 8101e08:	af00      	add	r7, sp, #0
 8101e0a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8101e0c:	687b      	ldr	r3, [r7, #4]
 8101e0e:	689b      	ldr	r3, [r3, #8]
 8101e10:	4618      	mov	r0, r3
 8101e12:	370c      	adds	r7, #12
 8101e14:	46bd      	mov	sp, r7
 8101e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e1a:	4770      	bx	lr

08101e1c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8101e1c:	b580      	push	{r7, lr}
 8101e1e:	b082      	sub	sp, #8
 8101e20:	af00      	add	r7, sp, #0
 8101e22:	6078      	str	r0, [r7, #4]
 8101e24:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8101e26:	6839      	ldr	r1, [r7, #0]
 8101e28:	6878      	ldr	r0, [r7, #4]
 8101e2a:	f000 fc07 	bl	810263c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8101e2e:	6839      	ldr	r1, [r7, #0]
 8101e30:	6878      	ldr	r0, [r7, #4]
 8101e32:	f000 fc18 	bl	8102666 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8101e36:	bf00      	nop
 8101e38:	3708      	adds	r7, #8
 8101e3a:	46bd      	mov	sp, r7
 8101e3c:	bd80      	pop	{r7, pc}

08101e3e <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE9_M_mbeginEv>:
      _M_mbegin() const _GLIBCXX_NOEXCEPT
 8101e3e:	b480      	push	{r7}
 8101e40:	b083      	sub	sp, #12
 8101e42:	af00      	add	r7, sp, #0
 8101e44:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8101e46:	687b      	ldr	r3, [r7, #4]
 8101e48:	689b      	ldr	r3, [r3, #8]
 8101e4a:	4618      	mov	r0, r3
 8101e4c:	370c      	adds	r7, #12
 8101e4e:	46bd      	mov	sp, r7
 8101e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e54:	4770      	bx	lr

08101e56 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRS1_RS5_EEERSC_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
 8101e56:	b590      	push	{r4, r7, lr}
 8101e58:	b085      	sub	sp, #20
 8101e5a:	af00      	add	r7, sp, #0
 8101e5c:	60f8      	str	r0, [r7, #12]
 8101e5e:	60b9      	str	r1, [r7, #8]
 8101e60:	607a      	str	r2, [r7, #4]
 8101e62:	603b      	str	r3, [r7, #0]
	  : _M_t(__t),
 8101e64:	68fb      	ldr	r3, [r7, #12]
 8101e66:	68ba      	ldr	r2, [r7, #8]
 8101e68:	601a      	str	r2, [r3, #0]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 8101e6a:	6878      	ldr	r0, [r7, #4]
 8101e6c:	f7ff fcc5 	bl	81017fa <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8101e70:	4604      	mov	r4, r0
 8101e72:	6838      	ldr	r0, [r7, #0]
 8101e74:	f7ff fccc 	bl	8101810 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8101e78:	4603      	mov	r3, r0
 8101e7a:	461a      	mov	r2, r3
 8101e7c:	4621      	mov	r1, r4
 8101e7e:	68b8      	ldr	r0, [r7, #8]
 8101e80:	f000 fc03 	bl	810268a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRS1_RS5_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8101e84:	4602      	mov	r2, r0
 8101e86:	68fb      	ldr	r3, [r7, #12]
 8101e88:	605a      	str	r2, [r3, #4]
	  { }
 8101e8a:	68fb      	ldr	r3, [r7, #12]
 8101e8c:	4618      	mov	r0, r3
 8101e8e:	3714      	adds	r7, #20
 8101e90:	46bd      	mov	sp, r7
 8101e92:	bd90      	pop	{r4, r7, pc}

08101e94 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev>:
	~_Auto_node()
 8101e94:	b580      	push	{r7, lr}
 8101e96:	b082      	sub	sp, #8
 8101e98:	af00      	add	r7, sp, #0
 8101e9a:	6078      	str	r0, [r7, #4]
	  if (_M_node)
 8101e9c:	687b      	ldr	r3, [r7, #4]
 8101e9e:	685b      	ldr	r3, [r3, #4]
 8101ea0:	2b00      	cmp	r3, #0
 8101ea2:	d007      	beq.n	8101eb4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeD1Ev+0x20>
	    _M_t._M_drop_node(_M_node);
 8101ea4:	687b      	ldr	r3, [r7, #4]
 8101ea6:	681a      	ldr	r2, [r3, #0]
 8101ea8:	687b      	ldr	r3, [r7, #4]
 8101eaa:	685b      	ldr	r3, [r3, #4]
 8101eac:	4619      	mov	r1, r3
 8101eae:	4610      	mov	r0, r2
 8101eb0:	f7ff ffb4 	bl	8101e1c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	}
 8101eb4:	687b      	ldr	r3, [r7, #4]
 8101eb6:	4618      	mov	r0, r3
 8101eb8:	3708      	adds	r7, #8
 8101eba:	46bd      	mov	sp, r7
 8101ebc:	bd80      	pop	{r7, pc}

08101ebe <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8101ebe:	b590      	push	{r4, r7, lr}
 8101ec0:	b08b      	sub	sp, #44	@ 0x2c
 8101ec2:	af00      	add	r7, sp, #0
 8101ec4:	60f8      	str	r0, [r7, #12]
 8101ec6:	60b9      	str	r1, [r7, #8]
 8101ec8:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8101eca:	68b8      	ldr	r0, [r7, #8]
 8101ecc:	f7ff fc89 	bl	81017e2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8101ed0:	4603      	mov	r3, r0
 8101ed2:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8101ed4:	68b8      	ldr	r0, [r7, #8]
 8101ed6:	f000 f9c2 	bl	810225e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8101eda:	4603      	mov	r3, r0
 8101edc:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8101ede:	2301      	movs	r3, #1
 8101ee0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      while (__x != 0)
 8101ee4:	e01f      	b.n	8101f26 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x68>
	  __y = __x;
 8101ee6:	69bb      	ldr	r3, [r7, #24]
 8101ee8:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8101eea:	68bc      	ldr	r4, [r7, #8]
 8101eec:	69bb      	ldr	r3, [r7, #24]
 8101eee:	4618      	mov	r0, r3
 8101ef0:	f000 fbe7 	bl	81026c2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8101ef4:	4603      	mov	r3, r0
 8101ef6:	461a      	mov	r2, r3
 8101ef8:	6879      	ldr	r1, [r7, #4]
 8101efa:	4620      	mov	r0, r4
 8101efc:	f7ff fef1 	bl	8101ce2 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8101f00:	4603      	mov	r3, r0
 8101f02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8101f06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101f0a:	2b00      	cmp	r3, #0
 8101f0c:	d005      	beq.n	8101f1a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x5c>
 8101f0e:	69bb      	ldr	r3, [r7, #24]
 8101f10:	4618      	mov	r0, r3
 8101f12:	f7ff ff77 	bl	8101e04 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8101f16:	4603      	mov	r3, r0
 8101f18:	e004      	b.n	8101f24 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 8101f1a:	69bb      	ldr	r3, [r7, #24]
 8101f1c:	4618      	mov	r0, r3
 8101f1e:	f7ff ff65 	bl	8101dec <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8101f22:	4603      	mov	r3, r0
 8101f24:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8101f26:	69bb      	ldr	r3, [r7, #24]
 8101f28:	2b00      	cmp	r3, #0
 8101f2a:	d1dc      	bne.n	8101ee6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x28>
      iterator __j = iterator(__y);
 8101f2c:	697a      	ldr	r2, [r7, #20]
 8101f2e:	f107 0310 	add.w	r3, r7, #16
 8101f32:	4611      	mov	r1, r2
 8101f34:	4618      	mov	r0, r3
 8101f36:	f000 f887 	bl	8102048 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8101f3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101f3e:	2b00      	cmp	r3, #0
 8101f40:	d01d      	beq.n	8101f7e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc0>
	  if (__j == begin())
 8101f42:	68b8      	ldr	r0, [r7, #8]
 8101f44:	f000 fbd0 	bl	81026e8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 8101f48:	4603      	mov	r3, r0
 8101f4a:	61fb      	str	r3, [r7, #28]
 8101f4c:	f107 021c 	add.w	r2, r7, #28
 8101f50:	f107 0310 	add.w	r3, r7, #16
 8101f54:	4611      	mov	r1, r2
 8101f56:	4618      	mov	r0, r3
 8101f58:	f7ff fe94 	bl	8101c84 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEES9_>
 8101f5c:	4603      	mov	r3, r0
 8101f5e:	2b00      	cmp	r3, #0
 8101f60:	d008      	beq.n	8101f74 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xb6>
	    return _Res(__x, __y);
 8101f62:	f107 0214 	add.w	r2, r7, #20
 8101f66:	f107 0318 	add.w	r3, r7, #24
 8101f6a:	4619      	mov	r1, r3
 8101f6c:	68f8      	ldr	r0, [r7, #12]
 8101f6e:	f000 fbcc 	bl	810270a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEERS1_Lb1EEEOT_OT0_>
 8101f72:	e025      	b.n	8101fc0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
	    --__j;
 8101f74:	f107 0310 	add.w	r3, r7, #16
 8101f78:	4618      	mov	r0, r3
 8101f7a:	f000 fbdf 	bl	810273c <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8101f7e:	68bc      	ldr	r4, [r7, #8]
 8101f80:	693b      	ldr	r3, [r7, #16]
 8101f82:	4618      	mov	r0, r3
 8101f84:	f000 f9a8 	bl	81022d8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8101f88:	4603      	mov	r3, r0
 8101f8a:	687a      	ldr	r2, [r7, #4]
 8101f8c:	4619      	mov	r1, r3
 8101f8e:	4620      	mov	r0, r4
 8101f90:	f7ff fea7 	bl	8101ce2 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8101f94:	4603      	mov	r3, r0
 8101f96:	2b00      	cmp	r3, #0
 8101f98:	d008      	beq.n	8101fac <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xee>
	return _Res(__x, __y);
 8101f9a:	f107 0214 	add.w	r2, r7, #20
 8101f9e:	f107 0318 	add.w	r3, r7, #24
 8101fa2:	4619      	mov	r1, r3
 8101fa4:	68f8      	ldr	r0, [r7, #12]
 8101fa6:	f000 fbb0 	bl	810270a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEERS1_Lb1EEEOT_OT0_>
 8101faa:	e009      	b.n	8101fc0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
      return _Res(__j._M_node, 0);
 8101fac:	2300      	movs	r3, #0
 8101fae:	623b      	str	r3, [r7, #32]
 8101fb0:	f107 0220 	add.w	r2, r7, #32
 8101fb4:	f107 0310 	add.w	r3, r7, #16
 8101fb8:	4619      	mov	r1, r3
 8101fba:	68f8      	ldr	r0, [r7, #12]
 8101fbc:	f000 fbcf 	bl	810275e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8101fc0:	68f8      	ldr	r0, [r7, #12]
 8101fc2:	372c      	adds	r7, #44	@ 0x2c
 8101fc4:	46bd      	mov	sp, r7
 8101fc6:	bd90      	pop	{r4, r7, pc}

08101fc8 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node6_M_keyEv>:
	_M_key() const
 8101fc8:	b580      	push	{r7, lr}
 8101fca:	b082      	sub	sp, #8
 8101fcc:	af00      	add	r7, sp, #0
 8101fce:	6078      	str	r0, [r7, #4]
	{ return _S_key(_M_node); }
 8101fd0:	687b      	ldr	r3, [r7, #4]
 8101fd2:	685b      	ldr	r3, [r3, #4]
 8101fd4:	4618      	mov	r0, r3
 8101fd6:	f000 fb74 	bl	81026c2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8101fda:	4603      	mov	r3, r0
 8101fdc:	4618      	mov	r0, r3
 8101fde:	3708      	adds	r7, #8
 8101fe0:	46bd      	mov	sp, r7
 8101fe2:	bd80      	pop	{r7, pc}

08101fe4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_node9_M_insertES2_IPSt18_Rb_tree_node_baseSF_E>:
	_M_insert(pair<_Base_ptr, _Base_ptr> __p)
 8101fe4:	b580      	push	{r7, lr}
 8101fe6:	b086      	sub	sp, #24
 8101fe8:	af00      	add	r7, sp, #0
 8101fea:	60f8      	str	r0, [r7, #12]
 8101fec:	1d3b      	adds	r3, r7, #4
 8101fee:	e883 0006 	stmia.w	r3, {r1, r2}
	  auto __it = _M_t._M_insert_node(__p.first, __p.second, _M_node);
 8101ff2:	68fb      	ldr	r3, [r7, #12]
 8101ff4:	6818      	ldr	r0, [r3, #0]
 8101ff6:	6879      	ldr	r1, [r7, #4]
 8101ff8:	68ba      	ldr	r2, [r7, #8]
 8101ffa:	68fb      	ldr	r3, [r7, #12]
 8101ffc:	685b      	ldr	r3, [r3, #4]
 8101ffe:	f000 fbc3 	bl	8102788 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8102002:	4603      	mov	r3, r0
 8102004:	617b      	str	r3, [r7, #20]
	  _M_node = nullptr;
 8102006:	68fb      	ldr	r3, [r7, #12]
 8102008:	2200      	movs	r2, #0
 810200a:	605a      	str	r2, [r3, #4]
	  return __it;
 810200c:	697b      	ldr	r3, [r7, #20]
	}
 810200e:	4618      	mov	r0, r3
 8102010:	3718      	adds	r7, #24
 8102012:	46bd      	mov	sp, r7
 8102014:	bd80      	pop	{r7, pc}

08102016 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEbEC1IS7_bLb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 8102016:	b580      	push	{r7, lr}
 8102018:	b084      	sub	sp, #16
 810201a:	af00      	add	r7, sp, #0
 810201c:	60f8      	str	r0, [r7, #12]
 810201e:	60b9      	str	r1, [r7, #8]
 8102020:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8102022:	68b8      	ldr	r0, [r7, #8]
 8102024:	f000 fbed 	bl	8102802 <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8102028:	4602      	mov	r2, r0
 810202a:	68fb      	ldr	r3, [r7, #12]
 810202c:	6812      	ldr	r2, [r2, #0]
 810202e:	601a      	str	r2, [r3, #0]
 8102030:	6878      	ldr	r0, [r7, #4]
 8102032:	f000 fbf1 	bl	8102818 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8102036:	4603      	mov	r3, r0
 8102038:	781a      	ldrb	r2, [r3, #0]
 810203a:	68fb      	ldr	r3, [r7, #12]
 810203c:	711a      	strb	r2, [r3, #4]
 810203e:	68fb      	ldr	r3, [r7, #12]
 8102040:	4618      	mov	r0, r3
 8102042:	3710      	adds	r7, #16
 8102044:	46bd      	mov	sp, r7
 8102046:	bd80      	pop	{r7, pc}

08102048 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8102048:	b480      	push	{r7}
 810204a:	b083      	sub	sp, #12
 810204c:	af00      	add	r7, sp, #0
 810204e:	6078      	str	r0, [r7, #4]
 8102050:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8102052:	687b      	ldr	r3, [r7, #4]
 8102054:	683a      	ldr	r2, [r7, #0]
 8102056:	601a      	str	r2, [r3, #0]
 8102058:	687b      	ldr	r3, [r7, #4]
 810205a:	4618      	mov	r0, r3
 810205c:	370c      	adds	r7, #12
 810205e:	46bd      	mov	sp, r7
 8102060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102064:	4770      	bx	lr

08102066 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8102066:	b480      	push	{r7}
 8102068:	b083      	sub	sp, #12
 810206a:	af00      	add	r7, sp, #0
 810206c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 810206e:	687b      	ldr	r3, [r7, #4]
 8102070:	695b      	ldr	r3, [r3, #20]
 8102072:	4618      	mov	r0, r3
 8102074:	370c      	adds	r7, #12
 8102076:	46bd      	mov	sp, r7
 8102078:	f85d 7b04 	ldr.w	r7, [sp], #4
 810207c:	4770      	bx	lr

0810207e <_ZSt8_DestroyIP8SMessageEvT_S2_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 810207e:	b580      	push	{r7, lr}
 8102080:	b082      	sub	sp, #8
 8102082:	af00      	add	r7, sp, #0
 8102084:	6078      	str	r0, [r7, #4]
 8102086:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8102088:	6839      	ldr	r1, [r7, #0]
 810208a:	6878      	ldr	r0, [r7, #4]
 810208c:	f000 fbcf 	bl	810282e <_ZNSt12_Destroy_auxILb1EE9__destroyIP8SMessageEEvT_S4_>
    }
 8102090:	bf00      	nop
 8102092:	3708      	adds	r7, #8
 8102094:	46bd      	mov	sp, r7
 8102096:	bd80      	pop	{r7, pc}

08102098 <_ZNSt15__new_allocatorI8SMessageEC1Ev>:
 8102098:	b480      	push	{r7}
 810209a:	b083      	sub	sp, #12
 810209c:	af00      	add	r7, sp, #0
 810209e:	6078      	str	r0, [r7, #4]
 81020a0:	687b      	ldr	r3, [r7, #4]
 81020a2:	4618      	mov	r0, r3
 81020a4:	370c      	adds	r7, #12
 81020a6:	46bd      	mov	sp, r7
 81020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020ac:	4770      	bx	lr

081020ae <_ZNSt16allocator_traitsISaI8SMessageEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 81020ae:	b580      	push	{r7, lr}
 81020b0:	b084      	sub	sp, #16
 81020b2:	af00      	add	r7, sp, #0
 81020b4:	60f8      	str	r0, [r7, #12]
 81020b6:	60b9      	str	r1, [r7, #8]
 81020b8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 81020ba:	687a      	ldr	r2, [r7, #4]
 81020bc:	68b9      	ldr	r1, [r7, #8]
 81020be:	68f8      	ldr	r0, [r7, #12]
 81020c0:	f000 fbc0 	bl	8102844 <_ZNSt15__new_allocatorI8SMessageE10deallocateEPS0_j>
 81020c4:	bf00      	nop
 81020c6:	3710      	adds	r7, #16
 81020c8:	46bd      	mov	sp, r7
 81020ca:	bd80      	pop	{r7, pc}

081020cc <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 81020cc:	b480      	push	{r7}
 81020ce:	b083      	sub	sp, #12
 81020d0:	af00      	add	r7, sp, #0
 81020d2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81020d4:	687b      	ldr	r3, [r7, #4]
 81020d6:	4618      	mov	r0, r3
 81020d8:	370c      	adds	r7, #12
 81020da:	46bd      	mov	sp, r7
 81020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020e0:	4770      	bx	lr

081020e2 <_ZNSt15__new_allocatorI8SMessageE9constructIS0_JRKS0_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 81020e2:	b5b0      	push	{r4, r5, r7, lr}
 81020e4:	b084      	sub	sp, #16
 81020e6:	af00      	add	r7, sp, #0
 81020e8:	60f8      	str	r0, [r7, #12]
 81020ea:	60b9      	str	r1, [r7, #8]
 81020ec:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 81020ee:	68bb      	ldr	r3, [r7, #8]
 81020f0:	4619      	mov	r1, r3
 81020f2:	2018      	movs	r0, #24
 81020f4:	f7fe fc7d 	bl	81009f2 <_ZnwjPv>
 81020f8:	4604      	mov	r4, r0
 81020fa:	6878      	ldr	r0, [r7, #4]
 81020fc:	f7ff ffe6 	bl	81020cc <_ZSt7forwardIRK8SMessageEOT_RNSt16remove_referenceIS3_E4typeE>
 8102100:	4603      	mov	r3, r0
 8102102:	461d      	mov	r5, r3
 8102104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8102106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8102108:	e895 0003 	ldmia.w	r5, {r0, r1}
 810210c:	e884 0003 	stmia.w	r4, {r0, r1}
 8102110:	bf00      	nop
 8102112:	3710      	adds	r7, #16
 8102114:	46bd      	mov	sp, r7
 8102116:	bdb0      	pop	{r4, r5, r7, pc}

08102118 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8102118:	b590      	push	{r4, r7, lr}
 810211a:	b087      	sub	sp, #28
 810211c:	af00      	add	r7, sp, #0
 810211e:	60f8      	str	r0, [r7, #12]
 8102120:	60b9      	str	r1, [r7, #8]
 8102122:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8102124:	68f8      	ldr	r0, [r7, #12]
 8102126:	f000 fba0 	bl	810286a <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>
 810212a:	4604      	mov	r4, r0
 810212c:	68f8      	ldr	r0, [r7, #12]
 810212e:	f7ff f9f3 	bl	8101518 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 8102132:	4603      	mov	r3, r0
 8102134:	1ae2      	subs	r2, r4, r3
 8102136:	68bb      	ldr	r3, [r7, #8]
 8102138:	429a      	cmp	r2, r3
 810213a:	bf34      	ite	cc
 810213c:	2301      	movcc	r3, #1
 810213e:	2300      	movcs	r3, #0
 8102140:	b2db      	uxtb	r3, r3
 8102142:	2b00      	cmp	r3, #0
 8102144:	d002      	beq.n	810214c <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8102146:	6878      	ldr	r0, [r7, #4]
 8102148:	f005 fd96 	bl	8107c78 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 810214c:	68f8      	ldr	r0, [r7, #12]
 810214e:	f7ff f9e3 	bl	8101518 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 8102152:	4604      	mov	r4, r0
 8102154:	68f8      	ldr	r0, [r7, #12]
 8102156:	f7ff f9df 	bl	8101518 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 810215a:	4603      	mov	r3, r0
 810215c:	613b      	str	r3, [r7, #16]
 810215e:	f107 0208 	add.w	r2, r7, #8
 8102162:	f107 0310 	add.w	r3, r7, #16
 8102166:	4611      	mov	r1, r2
 8102168:	4618      	mov	r0, r3
 810216a:	f000 fb8f 	bl	810288c <_ZSt3maxIjERKT_S2_S2_>
 810216e:	4603      	mov	r3, r0
 8102170:	681b      	ldr	r3, [r3, #0]
 8102172:	4423      	add	r3, r4
 8102174:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8102176:	68f8      	ldr	r0, [r7, #12]
 8102178:	f7ff f9ce 	bl	8101518 <_ZNKSt6vectorI8SMessageSaIS0_EE4sizeEv>
 810217c:	4602      	mov	r2, r0
 810217e:	697b      	ldr	r3, [r7, #20]
 8102180:	4293      	cmp	r3, r2
 8102182:	d306      	bcc.n	8102192 <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x7a>
 8102184:	68f8      	ldr	r0, [r7, #12]
 8102186:	f000 fb70 	bl	810286a <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>
 810218a:	4602      	mov	r2, r0
 810218c:	697b      	ldr	r3, [r7, #20]
 810218e:	4293      	cmp	r3, r2
 8102190:	d904      	bls.n	810219c <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x84>
 8102192:	68f8      	ldr	r0, [r7, #12]
 8102194:	f000 fb69 	bl	810286a <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>
 8102198:	4603      	mov	r3, r0
 810219a:	e000      	b.n	810219e <_ZNKSt6vectorI8SMessageSaIS0_EE12_M_check_lenEjPKc+0x86>
 810219c:	697b      	ldr	r3, [r7, #20]
      }
 810219e:	4618      	mov	r0, r3
 81021a0:	371c      	adds	r7, #28
 81021a2:	46bd      	mov	sp, r7
 81021a4:	bd90      	pop	{r4, r7, pc}
	...

081021a8 <_ZN9__gnu_cxxmiIP8SMessageSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 81021a8:	b590      	push	{r4, r7, lr}
 81021aa:	b083      	sub	sp, #12
 81021ac:	af00      	add	r7, sp, #0
 81021ae:	6078      	str	r0, [r7, #4]
 81021b0:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 81021b2:	6878      	ldr	r0, [r7, #4]
 81021b4:	f7ff fce4 	bl	8101b80 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 81021b8:	4603      	mov	r3, r0
 81021ba:	681c      	ldr	r4, [r3, #0]
 81021bc:	6838      	ldr	r0, [r7, #0]
 81021be:	f7ff fcdf 	bl	8101b80 <_ZNK9__gnu_cxx17__normal_iteratorIP8SMessageSt6vectorIS1_SaIS1_EEE4baseEv>
 81021c2:	4603      	mov	r3, r0
 81021c4:	681b      	ldr	r3, [r3, #0]
 81021c6:	1ae3      	subs	r3, r4, r3
 81021c8:	10db      	asrs	r3, r3, #3
 81021ca:	4a03      	ldr	r2, [pc, #12]	@ (81021d8 <_ZN9__gnu_cxxmiIP8SMessageSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_+0x30>)
 81021cc:	fb02 f303 	mul.w	r3, r2, r3
 81021d0:	4618      	mov	r0, r3
 81021d2:	370c      	adds	r7, #12
 81021d4:	46bd      	mov	sp, r7
 81021d6:	bd90      	pop	{r4, r7, pc}
 81021d8:	aaaaaaab 	.word	0xaaaaaaab

081021dc <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 81021dc:	b580      	push	{r7, lr}
 81021de:	b082      	sub	sp, #8
 81021e0:	af00      	add	r7, sp, #0
 81021e2:	6078      	str	r0, [r7, #4]
 81021e4:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 81021e6:	683b      	ldr	r3, [r7, #0]
 81021e8:	2b00      	cmp	r3, #0
 81021ea:	d006      	beq.n	81021fa <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj+0x1e>
 81021ec:	687b      	ldr	r3, [r7, #4]
 81021ee:	6839      	ldr	r1, [r7, #0]
 81021f0:	4618      	mov	r0, r3
 81021f2:	f000 fb5f 	bl	81028b4 <_ZNSt16allocator_traitsISaI8SMessageEE8allocateERS1_j>
 81021f6:	4603      	mov	r3, r0
 81021f8:	e000      	b.n	81021fc <_ZNSt12_Vector_baseI8SMessageSaIS0_EE11_M_allocateEj+0x20>
 81021fa:	2300      	movs	r3, #0
      }
 81021fc:	4618      	mov	r0, r3
 81021fe:	3708      	adds	r7, #8
 8102200:	46bd      	mov	sp, r7
 8102202:	bd80      	pop	{r7, pc}

08102204 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8102204:	b590      	push	{r4, r7, lr}
 8102206:	b087      	sub	sp, #28
 8102208:	af02      	add	r7, sp, #8
 810220a:	60f8      	str	r0, [r7, #12]
 810220c:	60b9      	str	r1, [r7, #8]
 810220e:	607a      	str	r2, [r7, #4]
 8102210:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8102212:	f88d 4000 	strb.w	r4, [sp]
 8102216:	683b      	ldr	r3, [r7, #0]
 8102218:	687a      	ldr	r2, [r7, #4]
 810221a:	68b9      	ldr	r1, [r7, #8]
 810221c:	68f8      	ldr	r0, [r7, #12]
 810221e:	f000 fb58 	bl	81028d2 <_ZNSt6vectorI8SMessageSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 8102222:	4603      	mov	r3, r0
      }
 8102224:	4618      	mov	r0, r3
 8102226:	3714      	adds	r7, #20
 8102228:	46bd      	mov	sp, r7
 810222a:	bd90      	pop	{r4, r7, pc}

0810222c <_ZSt34__uninitialized_move_if_noexcept_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>:

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 810222c:	b590      	push	{r4, r7, lr}
 810222e:	b085      	sub	sp, #20
 8102230:	af00      	add	r7, sp, #0
 8102232:	60f8      	str	r0, [r7, #12]
 8102234:	60b9      	str	r1, [r7, #8]
 8102236:	607a      	str	r2, [r7, #4]
 8102238:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 810223a:	68f8      	ldr	r0, [r7, #12]
 810223c:	f000 fb5b 	bl	81028f6 <_ZSt32__make_move_if_noexcept_iteratorI8SMessageSt13move_iteratorIPS0_EET0_PT_>
 8102240:	4604      	mov	r4, r0
 8102242:	68b8      	ldr	r0, [r7, #8]
 8102244:	f000 fb57 	bl	81028f6 <_ZSt32__make_move_if_noexcept_iteratorI8SMessageSt13move_iteratorIPS0_EET0_PT_>
 8102248:	4601      	mov	r1, r0
 810224a:	683b      	ldr	r3, [r7, #0]
 810224c:	687a      	ldr	r2, [r7, #4]
 810224e:	4620      	mov	r0, r4
 8102250:	f000 fb60 	bl	8102914 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP8SMessageES2_S1_ET0_T_S5_S4_RSaIT1_E>
 8102254:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8102256:	4618      	mov	r0, r3
 8102258:	3714      	adds	r7, #20
 810225a:	46bd      	mov	sp, r7
 810225c:	bd90      	pop	{r4, r7, pc}

0810225e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 810225e:	b480      	push	{r7}
 8102260:	b083      	sub	sp, #12
 8102262:	af00      	add	r7, sp, #0
 8102264:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8102266:	687b      	ldr	r3, [r7, #4]
 8102268:	3304      	adds	r3, #4
 810226a:	4618      	mov	r0, r3
 810226c:	370c      	adds	r7, #12
 810226e:	46bd      	mov	sp, r7
 8102270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102274:	4770      	bx	lr

08102276 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8102276:	b590      	push	{r4, r7, lr}
 8102278:	b087      	sub	sp, #28
 810227a:	af00      	add	r7, sp, #0
 810227c:	60f8      	str	r0, [r7, #12]
 810227e:	60b9      	str	r1, [r7, #8]
 8102280:	607a      	str	r2, [r7, #4]
 8102282:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8102284:	e01a      	b.n	81022bc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8102286:	68fc      	ldr	r4, [r7, #12]
 8102288:	68b8      	ldr	r0, [r7, #8]
 810228a:	f000 fa1a 	bl	81026c2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 810228e:	4603      	mov	r3, r0
 8102290:	683a      	ldr	r2, [r7, #0]
 8102292:	4619      	mov	r1, r3
 8102294:	4620      	mov	r0, r4
 8102296:	f7ff fd24 	bl	8101ce2 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 810229a:	4603      	mov	r3, r0
 810229c:	f083 0301 	eor.w	r3, r3, #1
 81022a0:	b2db      	uxtb	r3, r3
 81022a2:	2b00      	cmp	r3, #0
 81022a4:	d006      	beq.n	81022b4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x3e>
	  __y = __x, __x = _S_left(__x);
 81022a6:	68bb      	ldr	r3, [r7, #8]
 81022a8:	607b      	str	r3, [r7, #4]
 81022aa:	68b8      	ldr	r0, [r7, #8]
 81022ac:	f7ff fdaa 	bl	8101e04 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 81022b0:	60b8      	str	r0, [r7, #8]
 81022b2:	e003      	b.n	81022bc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __x = _S_right(__x);
 81022b4:	68b8      	ldr	r0, [r7, #8]
 81022b6:	f7ff fd99 	bl	8101dec <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 81022ba:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 81022bc:	68bb      	ldr	r3, [r7, #8]
 81022be:	2b00      	cmp	r3, #0
 81022c0:	d1e1      	bne.n	8102286 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x10>
      return iterator(__y);
 81022c2:	f107 0314 	add.w	r3, r7, #20
 81022c6:	6879      	ldr	r1, [r7, #4]
 81022c8:	4618      	mov	r0, r3
 81022ca:	f7ff febd 	bl	8102048 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 81022ce:	697b      	ldr	r3, [r7, #20]
    }
 81022d0:	4618      	mov	r0, r3
 81022d2:	371c      	adds	r7, #28
 81022d4:	46bd      	mov	sp, r7
 81022d6:	bd90      	pop	{r4, r7, pc}

081022d8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 81022d8:	b580      	push	{r7, lr}
 81022da:	b082      	sub	sp, #8
 81022dc:	af00      	add	r7, sp, #0
 81022de:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 81022e0:	6878      	ldr	r0, [r7, #4]
 81022e2:	f000 f9ee 	bl	81026c2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 81022e6:	4603      	mov	r3, r0
 81022e8:	4618      	mov	r0, r3
 81022ea:	3708      	adds	r7, #8
 81022ec:	46bd      	mov	sp, r7
 81022ee:	bd80      	pop	{r7, pc}

081022f0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 81022f0:	b590      	push	{r4, r7, lr}
 81022f2:	b083      	sub	sp, #12
 81022f4:	af00      	add	r7, sp, #0
 81022f6:	6078      	str	r0, [r7, #4]
 81022f8:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 81022fa:	6878      	ldr	r0, [r7, #4]
 81022fc:	f7ff fa71 	bl	81017e2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8102300:	4604      	mov	r4, r0
 8102302:	6878      	ldr	r0, [r7, #4]
 8102304:	f7ff ffab 	bl	810225e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8102308:	4602      	mov	r2, r0
 810230a:	683b      	ldr	r3, [r7, #0]
 810230c:	4621      	mov	r1, r4
 810230e:	6878      	ldr	r0, [r7, #4]
 8102310:	f7ff ffb1 	bl	8102276 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8102314:	4603      	mov	r3, r0
 8102316:	4618      	mov	r0, r3
 8102318:	370c      	adds	r7, #12
 810231a:	46bd      	mov	sp, r7
 810231c:	bd90      	pop	{r4, r7, pc}

0810231e <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 810231e:	b480      	push	{r7}
 8102320:	b083      	sub	sp, #12
 8102322:	af00      	add	r7, sp, #0
 8102324:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8102326:	bf00      	nop
 8102328:	4618      	mov	r0, r3
 810232a:	370c      	adds	r7, #12
 810232c:	46bd      	mov	sp, r7
 810232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102332:	4770      	bx	lr

08102334 <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>:
      _M_valptr()
 8102334:	b580      	push	{r7, lr}
 8102336:	b082      	sub	sp, #8
 8102338:	af00      	add	r7, sp, #0
 810233a:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 810233c:	687b      	ldr	r3, [r7, #4]
 810233e:	3310      	adds	r3, #16
 8102340:	4618      	mov	r0, r3
 8102342:	f000 faf8 	bl	8102936 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>
 8102346:	4603      	mov	r3, r0
 8102348:	4618      	mov	r0, r3
 810234a:	3708      	adds	r7, #8
 810234c:	46bd      	mov	sp, r7
 810234e:	bd80      	pop	{r7, pc}

08102350 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1ES3_>:
      _Tuple_impl(const _Head& __head)
 8102350:	b580      	push	{r7, lr}
 8102352:	b082      	sub	sp, #8
 8102354:	af00      	add	r7, sp, #0
 8102356:	6078      	str	r0, [r7, #4]
 8102358:	6039      	str	r1, [r7, #0]
      : _Base(__head)
 810235a:	687b      	ldr	r3, [r7, #4]
 810235c:	6839      	ldr	r1, [r7, #0]
 810235e:	4618      	mov	r0, r3
 8102360:	f000 faf5 	bl	810294e <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EEC1ES3_>
      { }
 8102364:	687b      	ldr	r3, [r7, #4]
 8102366:	4618      	mov	r0, r3
 8102368:	3708      	adds	r7, #8
 810236a:	46bd      	mov	sp, r7
 810236c:	bd80      	pop	{r7, pc}

0810236e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810236e:	b480      	push	{r7}
 8102370:	b083      	sub	sp, #12
 8102372:	af00      	add	r7, sp, #0
 8102374:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102376:	687b      	ldr	r3, [r7, #4]
 8102378:	4618      	mov	r0, r3
 810237a:	370c      	adds	r7, #12
 810237c:	46bd      	mov	sp, r7
 810237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102382:	4770      	bx	lr

08102384 <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102384:	b480      	push	{r7}
 8102386:	b083      	sub	sp, #12
 8102388:	af00      	add	r7, sp, #0
 810238a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810238c:	687b      	ldr	r3, [r7, #4]
 810238e:	4618      	mov	r0, r3
 8102390:	370c      	adds	r7, #12
 8102392:	46bd      	mov	sp, r7
 8102394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102398:	4770      	bx	lr

0810239a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810239a:	b480      	push	{r7}
 810239c:	b083      	sub	sp, #12
 810239e:	af00      	add	r7, sp, #0
 81023a0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 81023a2:	687b      	ldr	r3, [r7, #4]
 81023a4:	4618      	mov	r0, r3
 81023a6:	370c      	adds	r7, #12
 81023a8:	46bd      	mov	sp, r7
 81023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023ae:	4770      	bx	lr

081023b0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE10_Auto_nodeC1IJRKSt21piecewise_construct_tSt5tupleIJRS3_EESI_IJEEEEERSC_DpOT_>:
	  _Auto_node(_Rb_tree& __t, _Args&&... __args)
 81023b0:	b5b0      	push	{r4, r5, r7, lr}
 81023b2:	b084      	sub	sp, #16
 81023b4:	af00      	add	r7, sp, #0
 81023b6:	60f8      	str	r0, [r7, #12]
 81023b8:	60b9      	str	r1, [r7, #8]
 81023ba:	607a      	str	r2, [r7, #4]
 81023bc:	603b      	str	r3, [r7, #0]
	  : _M_t(__t),
 81023be:	68fb      	ldr	r3, [r7, #12]
 81023c0:	68ba      	ldr	r2, [r7, #8]
 81023c2:	601a      	str	r2, [r3, #0]
	    _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
 81023c4:	6878      	ldr	r0, [r7, #4]
 81023c6:	f7ff ffd2 	bl	810236e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 81023ca:	4604      	mov	r4, r0
 81023cc:	6838      	ldr	r0, [r7, #0]
 81023ce:	f7ff ffd9 	bl	8102384 <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 81023d2:	4605      	mov	r5, r0
 81023d4:	6a38      	ldr	r0, [r7, #32]
 81023d6:	f7ff ffe0 	bl	810239a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 81023da:	4603      	mov	r3, r0
 81023dc:	462a      	mov	r2, r5
 81023de:	4621      	mov	r1, r4
 81023e0:	68b8      	ldr	r0, [r7, #8]
 81023e2:	f000 fac3 	bl	810296c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 81023e6:	4602      	mov	r2, r0
 81023e8:	68fb      	ldr	r3, [r7, #12]
 81023ea:	605a      	str	r2, [r3, #4]
	  { }
 81023ec:	68fb      	ldr	r3, [r7, #12]
 81023ee:	4618      	mov	r0, r3
 81023f0:	3710      	adds	r7, #16
 81023f2:	46bd      	mov	sp, r7
 81023f4:	bdb0      	pop	{r4, r5, r7, pc}

081023f6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 81023f6:	b590      	push	{r4, r7, lr}
 81023f8:	b08d      	sub	sp, #52	@ 0x34
 81023fa:	af00      	add	r7, sp, #0
 81023fc:	60f8      	str	r0, [r7, #12]
 81023fe:	60b9      	str	r1, [r7, #8]
 8102400:	607a      	str	r2, [r7, #4]
 8102402:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8102404:	1d3b      	adds	r3, r7, #4
 8102406:	4618      	mov	r0, r3
 8102408:	f000 fad3 	bl	81029b2 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE13_M_const_castEv>
 810240c:	4603      	mov	r3, r0
 810240e:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8102410:	69bc      	ldr	r4, [r7, #24]
 8102412:	68b8      	ldr	r0, [r7, #8]
 8102414:	f7ff ff23 	bl	810225e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8102418:	4603      	mov	r3, r0
 810241a:	429c      	cmp	r4, r3
 810241c:	bf0c      	ite	eq
 810241e:	2301      	moveq	r3, #1
 8102420:	2300      	movne	r3, #0
 8102422:	b2db      	uxtb	r3, r3
 8102424:	2b00      	cmp	r3, #0
 8102426:	d030      	beq.n	810248a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x94>
	  if (size() > 0
 8102428:	68b8      	ldr	r0, [r7, #8]
 810242a:	f7ff fe1c 	bl	8102066 <_ZNKSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 810242e:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8102430:	2b00      	cmp	r3, #0
 8102432:	d013      	beq.n	810245c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 8102434:	68bc      	ldr	r4, [r7, #8]
 8102436:	68b8      	ldr	r0, [r7, #8]
 8102438:	f000 facc 	bl	81029d4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 810243c:	4603      	mov	r3, r0
 810243e:	681b      	ldr	r3, [r3, #0]
 8102440:	4618      	mov	r0, r3
 8102442:	f7ff ff49 	bl	81022d8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8102446:	4603      	mov	r3, r0
 8102448:	683a      	ldr	r2, [r7, #0]
 810244a:	4619      	mov	r1, r3
 810244c:	4620      	mov	r0, r4
 810244e:	f7ff fc48 	bl	8101ce2 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8102452:	4603      	mov	r3, r0
 8102454:	2b00      	cmp	r3, #0
 8102456:	d001      	beq.n	810245c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 8102458:	2301      	movs	r3, #1
 810245a:	e000      	b.n	810245e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x68>
 810245c:	2300      	movs	r3, #0
	  if (size() > 0
 810245e:	2b00      	cmp	r3, #0
 8102460:	d00c      	beq.n	810247c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x86>
	    return _Res(0, _M_rightmost());
 8102462:	2300      	movs	r3, #0
 8102464:	61fb      	str	r3, [r7, #28]
 8102466:	68b8      	ldr	r0, [r7, #8]
 8102468:	f000 fab4 	bl	81029d4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 810246c:	4602      	mov	r2, r0
 810246e:	f107 031c 	add.w	r3, r7, #28
 8102472:	4619      	mov	r1, r3
 8102474:	68f8      	ldr	r0, [r7, #12]
 8102476:	f000 f972 	bl	810275e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 810247a:	e0db      	b.n	8102634 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 810247c:	68fb      	ldr	r3, [r7, #12]
 810247e:	683a      	ldr	r2, [r7, #0]
 8102480:	68b9      	ldr	r1, [r7, #8]
 8102482:	4618      	mov	r0, r3
 8102484:	f7ff fd1b 	bl	8101ebe <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8102488:	e0d4      	b.n	8102634 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 810248a:	68bc      	ldr	r4, [r7, #8]
 810248c:	69bb      	ldr	r3, [r7, #24]
 810248e:	4618      	mov	r0, r3
 8102490:	f7ff ff22 	bl	81022d8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8102494:	4603      	mov	r3, r0
 8102496:	461a      	mov	r2, r3
 8102498:	6839      	ldr	r1, [r7, #0]
 810249a:	4620      	mov	r0, r4
 810249c:	f7ff fc21 	bl	8101ce2 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 81024a0:	4603      	mov	r3, r0
 81024a2:	2b00      	cmp	r3, #0
 81024a4:	d057      	beq.n	8102556 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	  iterator __before = __pos;
 81024a6:	69bb      	ldr	r3, [r7, #24]
 81024a8:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 81024aa:	69bc      	ldr	r4, [r7, #24]
 81024ac:	68b8      	ldr	r0, [r7, #8]
 81024ae:	f000 fa9d 	bl	81029ec <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 81024b2:	4603      	mov	r3, r0
 81024b4:	681b      	ldr	r3, [r3, #0]
 81024b6:	429c      	cmp	r4, r3
 81024b8:	bf0c      	ite	eq
 81024ba:	2301      	moveq	r3, #1
 81024bc:	2300      	movne	r3, #0
 81024be:	b2db      	uxtb	r3, r3
 81024c0:	2b00      	cmp	r3, #0
 81024c2:	d00d      	beq.n	81024e0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 81024c4:	68b8      	ldr	r0, [r7, #8]
 81024c6:	f000 fa91 	bl	81029ec <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 81024ca:	4604      	mov	r4, r0
 81024cc:	68b8      	ldr	r0, [r7, #8]
 81024ce:	f000 fa8d 	bl	81029ec <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 81024d2:	4603      	mov	r3, r0
 81024d4:	461a      	mov	r2, r3
 81024d6:	4621      	mov	r1, r4
 81024d8:	68f8      	ldr	r0, [r7, #12]
 81024da:	f000 fa93 	bl	8102a04 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 81024de:	e0a9      	b.n	8102634 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 81024e0:	68bc      	ldr	r4, [r7, #8]
 81024e2:	f107 0314 	add.w	r3, r7, #20
 81024e6:	4618      	mov	r0, r3
 81024e8:	f000 f928 	bl	810273c <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEmmEv>
 81024ec:	4603      	mov	r3, r0
 81024ee:	681b      	ldr	r3, [r3, #0]
 81024f0:	4618      	mov	r0, r3
 81024f2:	f7ff fef1 	bl	81022d8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 81024f6:	4603      	mov	r3, r0
 81024f8:	683a      	ldr	r2, [r7, #0]
 81024fa:	4619      	mov	r1, r3
 81024fc:	4620      	mov	r0, r4
 81024fe:	f7ff fbf0 	bl	8101ce2 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 8102502:	4603      	mov	r3, r0
 8102504:	2b00      	cmp	r3, #0
 8102506:	d01f      	beq.n	8102548 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8102508:	697b      	ldr	r3, [r7, #20]
 810250a:	4618      	mov	r0, r3
 810250c:	f7ff fc6e 	bl	8101dec <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8102510:	4603      	mov	r3, r0
 8102512:	2b00      	cmp	r3, #0
 8102514:	bf0c      	ite	eq
 8102516:	2301      	moveq	r3, #1
 8102518:	2300      	movne	r3, #0
 810251a:	b2db      	uxtb	r3, r3
 810251c:	2b00      	cmp	r3, #0
 810251e:	d00a      	beq.n	8102536 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x140>
		return _Res(0, __before._M_node);
 8102520:	2300      	movs	r3, #0
 8102522:	623b      	str	r3, [r7, #32]
 8102524:	f107 0214 	add.w	r2, r7, #20
 8102528:	f107 0320 	add.w	r3, r7, #32
 810252c:	4619      	mov	r1, r3
 810252e:	68f8      	ldr	r0, [r7, #12]
 8102530:	f000 f915 	bl	810275e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8102534:	e07e      	b.n	8102634 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8102536:	f107 0218 	add.w	r2, r7, #24
 810253a:	f107 0318 	add.w	r3, r7, #24
 810253e:	4619      	mov	r1, r3
 8102540:	68f8      	ldr	r0, [r7, #12]
 8102542:	f000 fa5f 	bl	8102a04 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8102546:	e075      	b.n	8102634 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8102548:	68fb      	ldr	r3, [r7, #12]
 810254a:	683a      	ldr	r2, [r7, #0]
 810254c:	68b9      	ldr	r1, [r7, #8]
 810254e:	4618      	mov	r0, r3
 8102550:	f7ff fcb5 	bl	8101ebe <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8102554:	e06e      	b.n	8102634 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8102556:	68bc      	ldr	r4, [r7, #8]
 8102558:	69bb      	ldr	r3, [r7, #24]
 810255a:	4618      	mov	r0, r3
 810255c:	f7ff febc 	bl	81022d8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8102560:	4603      	mov	r3, r0
 8102562:	683a      	ldr	r2, [r7, #0]
 8102564:	4619      	mov	r1, r3
 8102566:	4620      	mov	r0, r4
 8102568:	f7ff fbbb 	bl	8101ce2 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 810256c:	4603      	mov	r3, r0
 810256e:	2b00      	cmp	r3, #0
 8102570:	d056      	beq.n	8102620 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x22a>
	  iterator __after = __pos;
 8102572:	69bb      	ldr	r3, [r7, #24]
 8102574:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8102576:	69bc      	ldr	r4, [r7, #24]
 8102578:	68b8      	ldr	r0, [r7, #8]
 810257a:	f000 fa2b 	bl	81029d4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 810257e:	4603      	mov	r3, r0
 8102580:	681b      	ldr	r3, [r3, #0]
 8102582:	429c      	cmp	r4, r3
 8102584:	bf0c      	ite	eq
 8102586:	2301      	moveq	r3, #1
 8102588:	2300      	movne	r3, #0
 810258a:	b2db      	uxtb	r3, r3
 810258c:	2b00      	cmp	r3, #0
 810258e:	d00c      	beq.n	81025aa <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1b4>
	    return _Res(0, _M_rightmost());
 8102590:	2300      	movs	r3, #0
 8102592:	627b      	str	r3, [r7, #36]	@ 0x24
 8102594:	68b8      	ldr	r0, [r7, #8]
 8102596:	f000 fa1d 	bl	81029d4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 810259a:	4602      	mov	r2, r0
 810259c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81025a0:	4619      	mov	r1, r3
 81025a2:	68f8      	ldr	r0, [r7, #12]
 81025a4:	f000 f8db 	bl	810275e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 81025a8:	e044      	b.n	8102634 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 81025aa:	68bc      	ldr	r4, [r7, #8]
 81025ac:	f107 0310 	add.w	r3, r7, #16
 81025b0:	4618      	mov	r0, r3
 81025b2:	f000 fa40 	bl	8102a36 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEppEv>
 81025b6:	4603      	mov	r3, r0
 81025b8:	681b      	ldr	r3, [r3, #0]
 81025ba:	4618      	mov	r0, r3
 81025bc:	f7ff fe8c 	bl	81022d8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 81025c0:	4603      	mov	r3, r0
 81025c2:	461a      	mov	r2, r3
 81025c4:	6839      	ldr	r1, [r7, #0]
 81025c6:	4620      	mov	r0, r4
 81025c8:	f7ff fb8b 	bl	8101ce2 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 81025cc:	4603      	mov	r3, r0
 81025ce:	2b00      	cmp	r3, #0
 81025d0:	d01f      	beq.n	8102612 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 81025d2:	69bb      	ldr	r3, [r7, #24]
 81025d4:	4618      	mov	r0, r3
 81025d6:	f7ff fc09 	bl	8101dec <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 81025da:	4603      	mov	r3, r0
 81025dc:	2b00      	cmp	r3, #0
 81025de:	bf0c      	ite	eq
 81025e0:	2301      	moveq	r3, #1
 81025e2:	2300      	movne	r3, #0
 81025e4:	b2db      	uxtb	r3, r3
 81025e6:	2b00      	cmp	r3, #0
 81025e8:	d00a      	beq.n	8102600 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x20a>
		return _Res(0, __pos._M_node);
 81025ea:	2300      	movs	r3, #0
 81025ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 81025ee:	f107 0218 	add.w	r2, r7, #24
 81025f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81025f6:	4619      	mov	r1, r3
 81025f8:	68f8      	ldr	r0, [r7, #12]
 81025fa:	f000 f8b0 	bl	810275e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 81025fe:	e019      	b.n	8102634 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8102600:	f107 0210 	add.w	r2, r7, #16
 8102604:	f107 0310 	add.w	r3, r7, #16
 8102608:	4619      	mov	r1, r3
 810260a:	68f8      	ldr	r0, [r7, #12]
 810260c:	f000 f9fa 	bl	8102a04 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8102610:	e010      	b.n	8102634 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8102612:	68fb      	ldr	r3, [r7, #12]
 8102614:	683a      	ldr	r2, [r7, #0]
 8102616:	68b9      	ldr	r1, [r7, #8]
 8102618:	4618      	mov	r0, r3
 810261a:	f7ff fc50 	bl	8101ebe <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 810261e:	e009      	b.n	8102634 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	return _Res(__pos._M_node, 0);
 8102620:	2300      	movs	r3, #0
 8102622:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8102624:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8102628:	f107 0318 	add.w	r3, r7, #24
 810262c:	4619      	mov	r1, r3
 810262e:	68f8      	ldr	r0, [r7, #12]
 8102630:	f000 f895 	bl	810275e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>
    }
 8102634:	68f8      	ldr	r0, [r7, #12]
 8102636:	3734      	adds	r7, #52	@ 0x34
 8102638:	46bd      	mov	sp, r7
 810263a:	bd90      	pop	{r4, r7, pc}

0810263c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 810263c:	b590      	push	{r4, r7, lr}
 810263e:	b083      	sub	sp, #12
 8102640:	af00      	add	r7, sp, #0
 8102642:	6078      	str	r0, [r7, #4]
 8102644:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8102646:	6878      	ldr	r0, [r7, #4]
 8102648:	f000 fa06 	bl	8102a58 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 810264c:	4604      	mov	r4, r0
 810264e:	6838      	ldr	r0, [r7, #0]
 8102650:	f7ff fe70 	bl	8102334 <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 8102654:	4603      	mov	r3, r0
 8102656:	4619      	mov	r1, r3
 8102658:	4620      	mov	r0, r4
 810265a:	f000 fa08 	bl	8102a6e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE7destroyIS7_EEvRS9_PT_>
      }
 810265e:	bf00      	nop
 8102660:	370c      	adds	r7, #12
 8102662:	46bd      	mov	sp, r7
 8102664:	bd90      	pop	{r4, r7, pc}

08102666 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8102666:	b580      	push	{r7, lr}
 8102668:	b082      	sub	sp, #8
 810266a:	af00      	add	r7, sp, #0
 810266c:	6078      	str	r0, [r7, #4]
 810266e:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8102670:	6878      	ldr	r0, [r7, #4]
 8102672:	f000 f9f1 	bl	8102a58 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8102676:	4603      	mov	r3, r0
 8102678:	2201      	movs	r2, #1
 810267a:	6839      	ldr	r1, [r7, #0]
 810267c:	4618      	mov	r0, r3
 810267e:	f000 fa03 	bl	8102a88 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE10deallocateERS9_PS8_j>
 8102682:	bf00      	nop
 8102684:	3708      	adds	r7, #8
 8102686:	46bd      	mov	sp, r7
 8102688:	bd80      	pop	{r7, pc}

0810268a <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRS1_RS5_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 810268a:	b590      	push	{r4, r7, lr}
 810268c:	b087      	sub	sp, #28
 810268e:	af00      	add	r7, sp, #0
 8102690:	60f8      	str	r0, [r7, #12]
 8102692:	60b9      	str	r1, [r7, #8]
 8102694:	607a      	str	r2, [r7, #4]
	  _Link_type __tmp = _M_get_node();
 8102696:	68f8      	ldr	r0, [r7, #12]
 8102698:	f000 fa05 	bl	8102aa6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 810269c:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 810269e:	68b8      	ldr	r0, [r7, #8]
 81026a0:	f7ff f8ab 	bl	81017fa <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 81026a4:	4604      	mov	r4, r0
 81026a6:	6878      	ldr	r0, [r7, #4]
 81026a8:	f7ff f8b2 	bl	8101810 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 81026ac:	4603      	mov	r3, r0
 81026ae:	4622      	mov	r2, r4
 81026b0:	6979      	ldr	r1, [r7, #20]
 81026b2:	68f8      	ldr	r0, [r7, #12]
 81026b4:	f000 fa08 	bl	8102ac8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRS1_RS5_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 81026b8:	697b      	ldr	r3, [r7, #20]
	}
 81026ba:	4618      	mov	r0, r3
 81026bc:	371c      	adds	r7, #28
 81026be:	46bd      	mov	sp, r7
 81026c0:	bd90      	pop	{r4, r7, pc}

081026c2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 81026c2:	b580      	push	{r7, lr}
 81026c4:	b084      	sub	sp, #16
 81026c6:	af00      	add	r7, sp, #0
 81026c8:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 81026ca:	6878      	ldr	r0, [r7, #4]
 81026cc:	f000 fa21 	bl	8102b12 <_ZNKSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 81026d0:	4602      	mov	r2, r0
 81026d2:	f107 030c 	add.w	r3, r7, #12
 81026d6:	4611      	mov	r1, r2
 81026d8:	4618      	mov	r0, r3
 81026da:	f000 fa28 	bl	8102b2e <_ZNKSt10_Select1stISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEclERKS6_>
 81026de:	4603      	mov	r3, r0
      }
 81026e0:	4618      	mov	r0, r3
 81026e2:	3710      	adds	r7, #16
 81026e4:	46bd      	mov	sp, r7
 81026e6:	bd80      	pop	{r7, pc}

081026e8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 81026e8:	b580      	push	{r7, lr}
 81026ea:	b084      	sub	sp, #16
 81026ec:	af00      	add	r7, sp, #0
 81026ee:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 81026f0:	687b      	ldr	r3, [r7, #4]
 81026f2:	68da      	ldr	r2, [r3, #12]
 81026f4:	f107 030c 	add.w	r3, r7, #12
 81026f8:	4611      	mov	r1, r2
 81026fa:	4618      	mov	r0, r3
 81026fc:	f7ff fca4 	bl	8102048 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 8102700:	68fb      	ldr	r3, [r7, #12]
 8102702:	4618      	mov	r0, r3
 8102704:	3710      	adds	r7, #16
 8102706:	46bd      	mov	sp, r7
 8102708:	bd80      	pop	{r7, pc}

0810270a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 810270a:	b580      	push	{r7, lr}
 810270c:	b084      	sub	sp, #16
 810270e:	af00      	add	r7, sp, #0
 8102710:	60f8      	str	r0, [r7, #12]
 8102712:	60b9      	str	r1, [r7, #8]
 8102714:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8102716:	68b8      	ldr	r0, [r7, #8]
 8102718:	f000 fa15 	bl	8102b46 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceISB_E4typeE>
 810271c:	4603      	mov	r3, r0
 810271e:	681a      	ldr	r2, [r3, #0]
 8102720:	68fb      	ldr	r3, [r7, #12]
 8102722:	601a      	str	r2, [r3, #0]
 8102724:	6878      	ldr	r0, [r7, #4]
 8102726:	f000 fa19 	bl	8102b5c <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 810272a:	4603      	mov	r3, r0
 810272c:	681a      	ldr	r2, [r3, #0]
 810272e:	68fb      	ldr	r3, [r7, #12]
 8102730:	605a      	str	r2, [r3, #4]
 8102732:	68fb      	ldr	r3, [r7, #12]
 8102734:	4618      	mov	r0, r3
 8102736:	3710      	adds	r7, #16
 8102738:	46bd      	mov	sp, r7
 810273a:	bd80      	pop	{r7, pc}

0810273c <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 810273c:	b580      	push	{r7, lr}
 810273e:	b082      	sub	sp, #8
 8102740:	af00      	add	r7, sp, #0
 8102742:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8102744:	687b      	ldr	r3, [r7, #4]
 8102746:	681b      	ldr	r3, [r3, #0]
 8102748:	4618      	mov	r0, r3
 810274a:	f005 fa29 	bl	8107ba0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 810274e:	4602      	mov	r2, r0
 8102750:	687b      	ldr	r3, [r7, #4]
 8102752:	601a      	str	r2, [r3, #0]
	return *this;
 8102754:	687b      	ldr	r3, [r7, #4]
      }
 8102756:	4618      	mov	r0, r3
 8102758:	3708      	adds	r7, #8
 810275a:	46bd      	mov	sp, r7
 810275c:	bd80      	pop	{r7, pc}

0810275e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IS1_S1_Lb1EEERKS1_S5_>:
      constexpr pair(const _T1& __a, const _T2& __b)
 810275e:	b480      	push	{r7}
 8102760:	b085      	sub	sp, #20
 8102762:	af00      	add	r7, sp, #0
 8102764:	60f8      	str	r0, [r7, #12]
 8102766:	60b9      	str	r1, [r7, #8]
 8102768:	607a      	str	r2, [r7, #4]
      : first(__a), second(__b) { }
 810276a:	68bb      	ldr	r3, [r7, #8]
 810276c:	681a      	ldr	r2, [r3, #0]
 810276e:	68fb      	ldr	r3, [r7, #12]
 8102770:	601a      	str	r2, [r3, #0]
 8102772:	687b      	ldr	r3, [r7, #4]
 8102774:	681a      	ldr	r2, [r3, #0]
 8102776:	68fb      	ldr	r3, [r7, #12]
 8102778:	605a      	str	r2, [r3, #4]
 810277a:	68fb      	ldr	r3, [r7, #12]
 810277c:	4618      	mov	r0, r3
 810277e:	3714      	adds	r7, #20
 8102780:	46bd      	mov	sp, r7
 8102782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102786:	4770      	bx	lr

08102788 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8102788:	b5b0      	push	{r4, r5, r7, lr}
 810278a:	b086      	sub	sp, #24
 810278c:	af00      	add	r7, sp, #0
 810278e:	60f8      	str	r0, [r7, #12]
 8102790:	60b9      	str	r1, [r7, #8]
 8102792:	607a      	str	r2, [r7, #4]
 8102794:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8102796:	68bb      	ldr	r3, [r7, #8]
 8102798:	2b00      	cmp	r3, #0
 810279a:	d117      	bne.n	81027cc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 810279c:	68f8      	ldr	r0, [r7, #12]
 810279e:	f7ff fd5e 	bl	810225e <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 81027a2:	4602      	mov	r2, r0
 81027a4:	687b      	ldr	r3, [r7, #4]
 81027a6:	4293      	cmp	r3, r2
 81027a8:	d010      	beq.n	81027cc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 81027aa:	68fc      	ldr	r4, [r7, #12]
 81027ac:	6838      	ldr	r0, [r7, #0]
 81027ae:	f7ff ff88 	bl	81026c2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 81027b2:	4605      	mov	r5, r0
 81027b4:	6878      	ldr	r0, [r7, #4]
 81027b6:	f7ff fd8f 	bl	81022d8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 81027ba:	4603      	mov	r3, r0
 81027bc:	461a      	mov	r2, r3
 81027be:	4629      	mov	r1, r5
 81027c0:	4620      	mov	r0, r4
 81027c2:	f7ff fa8e 	bl	8101ce2 <_ZNKSt4lessIN19EventManagerCM4Task11EEventQueueEEclERKS1_S4_>
 81027c6:	4603      	mov	r3, r0
 81027c8:	2b00      	cmp	r3, #0
 81027ca:	d001      	beq.n	81027d0 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
 81027cc:	2301      	movs	r3, #1
 81027ce:	e000      	b.n	81027d2 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4a>
 81027d0:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 81027d2:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 81027d4:	68fb      	ldr	r3, [r7, #12]
 81027d6:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 81027d8:	7df8      	ldrb	r0, [r7, #23]
 81027da:	687a      	ldr	r2, [r7, #4]
 81027dc:	6839      	ldr	r1, [r7, #0]
 81027de:	f005 f9e1 	bl	8107ba4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 81027e2:	68fb      	ldr	r3, [r7, #12]
 81027e4:	695b      	ldr	r3, [r3, #20]
 81027e6:	1c5a      	adds	r2, r3, #1
 81027e8:	68fb      	ldr	r3, [r7, #12]
 81027ea:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 81027ec:	f107 0310 	add.w	r3, r7, #16
 81027f0:	6839      	ldr	r1, [r7, #0]
 81027f2:	4618      	mov	r0, r3
 81027f4:	f7ff fc28 	bl	8102048 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 81027f8:	693b      	ldr	r3, [r7, #16]
    }
 81027fa:	4618      	mov	r0, r3
 81027fc:	3718      	adds	r7, #24
 81027fe:	46bd      	mov	sp, r7
 8102800:	bdb0      	pop	{r4, r5, r7, pc}

08102802 <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102802:	b480      	push	{r7}
 8102804:	b083      	sub	sp, #12
 8102806:	af00      	add	r7, sp, #0
 8102808:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 810280a:	687b      	ldr	r3, [r7, #4]
 810280c:	4618      	mov	r0, r3
 810280e:	370c      	adds	r7, #12
 8102810:	46bd      	mov	sp, r7
 8102812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102816:	4770      	bx	lr

08102818 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102818:	b480      	push	{r7}
 810281a:	b083      	sub	sp, #12
 810281c:	af00      	add	r7, sp, #0
 810281e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102820:	687b      	ldr	r3, [r7, #4]
 8102822:	4618      	mov	r0, r3
 8102824:	370c      	adds	r7, #12
 8102826:	46bd      	mov	sp, r7
 8102828:	f85d 7b04 	ldr.w	r7, [sp], #4
 810282c:	4770      	bx	lr

0810282e <_ZNSt12_Destroy_auxILb1EE9__destroyIP8SMessageEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 810282e:	b480      	push	{r7}
 8102830:	b083      	sub	sp, #12
 8102832:	af00      	add	r7, sp, #0
 8102834:	6078      	str	r0, [r7, #4]
 8102836:	6039      	str	r1, [r7, #0]
 8102838:	bf00      	nop
 810283a:	370c      	adds	r7, #12
 810283c:	46bd      	mov	sp, r7
 810283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102842:	4770      	bx	lr

08102844 <_ZNSt15__new_allocatorI8SMessageE10deallocateEPS0_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8102844:	b580      	push	{r7, lr}
 8102846:	b084      	sub	sp, #16
 8102848:	af00      	add	r7, sp, #0
 810284a:	60f8      	str	r0, [r7, #12]
 810284c:	60b9      	str	r1, [r7, #8]
 810284e:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8102850:	687a      	ldr	r2, [r7, #4]
 8102852:	4613      	mov	r3, r2
 8102854:	005b      	lsls	r3, r3, #1
 8102856:	4413      	add	r3, r2
 8102858:	00db      	lsls	r3, r3, #3
 810285a:	4619      	mov	r1, r3
 810285c:	68b8      	ldr	r0, [r7, #8]
 810285e:	f005 f935 	bl	8107acc <_ZdlPvj>
      }
 8102862:	bf00      	nop
 8102864:	3710      	adds	r7, #16
 8102866:	46bd      	mov	sp, r7
 8102868:	bd80      	pop	{r7, pc}

0810286a <_ZNKSt6vectorI8SMessageSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 810286a:	b580      	push	{r7, lr}
 810286c:	b082      	sub	sp, #8
 810286e:	af00      	add	r7, sp, #0
 8102870:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8102872:	687b      	ldr	r3, [r7, #4]
 8102874:	4618      	mov	r0, r3
 8102876:	f000 f999 	bl	8102bac <_ZNKSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>
 810287a:	4603      	mov	r3, r0
 810287c:	4618      	mov	r0, r3
 810287e:	f000 f979 	bl	8102b74 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_max_sizeERKS1_>
 8102882:	4603      	mov	r3, r0
 8102884:	4618      	mov	r0, r3
 8102886:	3708      	adds	r7, #8
 8102888:	46bd      	mov	sp, r7
 810288a:	bd80      	pop	{r7, pc}

0810288c <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 810288c:	b480      	push	{r7}
 810288e:	b083      	sub	sp, #12
 8102890:	af00      	add	r7, sp, #0
 8102892:	6078      	str	r0, [r7, #4]
 8102894:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8102896:	687b      	ldr	r3, [r7, #4]
 8102898:	681a      	ldr	r2, [r3, #0]
 810289a:	683b      	ldr	r3, [r7, #0]
 810289c:	681b      	ldr	r3, [r3, #0]
 810289e:	429a      	cmp	r2, r3
 81028a0:	d201      	bcs.n	81028a6 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 81028a2:	683b      	ldr	r3, [r7, #0]
 81028a4:	e000      	b.n	81028a8 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 81028a6:	687b      	ldr	r3, [r7, #4]
    }
 81028a8:	4618      	mov	r0, r3
 81028aa:	370c      	adds	r7, #12
 81028ac:	46bd      	mov	sp, r7
 81028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028b2:	4770      	bx	lr

081028b4 <_ZNSt16allocator_traitsISaI8SMessageEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 81028b4:	b580      	push	{r7, lr}
 81028b6:	b082      	sub	sp, #8
 81028b8:	af00      	add	r7, sp, #0
 81028ba:	6078      	str	r0, [r7, #4]
 81028bc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 81028be:	2200      	movs	r2, #0
 81028c0:	6839      	ldr	r1, [r7, #0]
 81028c2:	6878      	ldr	r0, [r7, #4]
 81028c4:	f000 f97e 	bl	8102bc4 <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv>
 81028c8:	4603      	mov	r3, r0
 81028ca:	4618      	mov	r0, r3
 81028cc:	3708      	adds	r7, #8
 81028ce:	46bd      	mov	sp, r7
 81028d0:	bd80      	pop	{r7, pc}

081028d2 <_ZNSt6vectorI8SMessageSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 81028d2:	b580      	push	{r7, lr}
 81028d4:	b084      	sub	sp, #16
 81028d6:	af00      	add	r7, sp, #0
 81028d8:	60f8      	str	r0, [r7, #12]
 81028da:	60b9      	str	r1, [r7, #8]
 81028dc:	607a      	str	r2, [r7, #4]
 81028de:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 81028e0:	683b      	ldr	r3, [r7, #0]
 81028e2:	687a      	ldr	r2, [r7, #4]
 81028e4:	68b9      	ldr	r1, [r7, #8]
 81028e6:	68f8      	ldr	r0, [r7, #12]
 81028e8:	f000 f99a 	bl	8102c20 <_ZSt12__relocate_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>
 81028ec:	4603      	mov	r3, r0
      }
 81028ee:	4618      	mov	r0, r3
 81028f0:	3710      	adds	r7, #16
 81028f2:	46bd      	mov	sp, r7
 81028f4:	bd80      	pop	{r7, pc}

081028f6 <_ZSt32__make_move_if_noexcept_iteratorI8SMessageSt13move_iteratorIPS0_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = __conditional_t<__move_if_noexcept_cond<_Tp>::value,
		      const _Tp*, move_iterator<_Tp*>>>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 81028f6:	b580      	push	{r7, lr}
 81028f8:	b084      	sub	sp, #16
 81028fa:	af00      	add	r7, sp, #0
 81028fc:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 81028fe:	f107 030c 	add.w	r3, r7, #12
 8102902:	6879      	ldr	r1, [r7, #4]
 8102904:	4618      	mov	r0, r3
 8102906:	f000 f9a8 	bl	8102c5a <_ZNSt13move_iteratorIP8SMessageEC1ES1_>
 810290a:	68fb      	ldr	r3, [r7, #12]
 810290c:	4618      	mov	r0, r3
 810290e:	3710      	adds	r7, #16
 8102910:	46bd      	mov	sp, r7
 8102912:	bd80      	pop	{r7, pc}

08102914 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP8SMessageES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8102914:	b580      	push	{r7, lr}
 8102916:	b084      	sub	sp, #16
 8102918:	af00      	add	r7, sp, #0
 810291a:	60f8      	str	r0, [r7, #12]
 810291c:	60b9      	str	r1, [r7, #8]
 810291e:	607a      	str	r2, [r7, #4]
 8102920:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 8102922:	687a      	ldr	r2, [r7, #4]
 8102924:	68b9      	ldr	r1, [r7, #8]
 8102926:	68f8      	ldr	r0, [r7, #12]
 8102928:	f000 f9a9 	bl	8102c7e <_ZSt18uninitialized_copyISt13move_iteratorIP8SMessageES2_ET0_T_S5_S4_>
 810292c:	4603      	mov	r3, r0
    }
 810292e:	4618      	mov	r0, r3
 8102930:	3710      	adds	r7, #16
 8102932:	46bd      	mov	sp, r7
 8102934:	bd80      	pop	{r7, pc}

08102936 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8102936:	b580      	push	{r7, lr}
 8102938:	b082      	sub	sp, #8
 810293a:	af00      	add	r7, sp, #0
 810293c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 810293e:	6878      	ldr	r0, [r7, #4]
 8102940:	f000 f9b1 	bl	8102ca6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>
 8102944:	4603      	mov	r3, r0
 8102946:	4618      	mov	r0, r3
 8102948:	3708      	adds	r7, #8
 810294a:	46bd      	mov	sp, r7
 810294c:	bd80      	pop	{r7, pc}

0810294e <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EEC1ES3_>:
      constexpr _Head_base(const _Head& __h)
 810294e:	b480      	push	{r7}
 8102950:	b083      	sub	sp, #12
 8102952:	af00      	add	r7, sp, #0
 8102954:	6078      	str	r0, [r7, #4]
 8102956:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 8102958:	687b      	ldr	r3, [r7, #4]
 810295a:	683a      	ldr	r2, [r7, #0]
 810295c:	601a      	str	r2, [r3, #0]
 810295e:	687b      	ldr	r3, [r7, #4]
 8102960:	4618      	mov	r0, r3
 8102962:	370c      	adds	r7, #12
 8102964:	46bd      	mov	sp, r7
 8102966:	f85d 7b04 	ldr.w	r7, [sp], #4
 810296a:	4770      	bx	lr

0810296c <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 810296c:	b5b0      	push	{r4, r5, r7, lr}
 810296e:	b088      	sub	sp, #32
 8102970:	af02      	add	r7, sp, #8
 8102972:	60f8      	str	r0, [r7, #12]
 8102974:	60b9      	str	r1, [r7, #8]
 8102976:	607a      	str	r2, [r7, #4]
 8102978:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 810297a:	68f8      	ldr	r0, [r7, #12]
 810297c:	f000 f893 	bl	8102aa6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 8102980:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8102982:	68b8      	ldr	r0, [r7, #8]
 8102984:	f7ff fcf3 	bl	810236e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8102988:	4604      	mov	r4, r0
 810298a:	6878      	ldr	r0, [r7, #4]
 810298c:	f7ff fcfa 	bl	8102384 <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8102990:	4605      	mov	r5, r0
 8102992:	6838      	ldr	r0, [r7, #0]
 8102994:	f7ff fd01 	bl	810239a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8102998:	4603      	mov	r3, r0
 810299a:	9300      	str	r3, [sp, #0]
 810299c:	462b      	mov	r3, r5
 810299e:	4622      	mov	r2, r4
 81029a0:	6979      	ldr	r1, [r7, #20]
 81029a2:	68f8      	ldr	r0, [r7, #12]
 81029a4:	f000 f98a 	bl	8102cbc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 81029a8:	697b      	ldr	r3, [r7, #20]
	}
 81029aa:	4618      	mov	r0, r3
 81029ac:	3718      	adds	r7, #24
 81029ae:	46bd      	mov	sp, r7
 81029b0:	bdb0      	pop	{r4, r5, r7, pc}

081029b2 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 81029b2:	b580      	push	{r7, lr}
 81029b4:	b084      	sub	sp, #16
 81029b6:	af00      	add	r7, sp, #0
 81029b8:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 81029ba:	687b      	ldr	r3, [r7, #4]
 81029bc:	681a      	ldr	r2, [r3, #0]
 81029be:	f107 030c 	add.w	r3, r7, #12
 81029c2:	4611      	mov	r1, r2
 81029c4:	4618      	mov	r0, r3
 81029c6:	f7ff fb3f 	bl	8102048 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEC1EPSt18_Rb_tree_node_base>
 81029ca:	68fb      	ldr	r3, [r7, #12]
 81029cc:	4618      	mov	r0, r3
 81029ce:	3710      	adds	r7, #16
 81029d0:	46bd      	mov	sp, r7
 81029d2:	bd80      	pop	{r7, pc}

081029d4 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 81029d4:	b480      	push	{r7}
 81029d6:	b083      	sub	sp, #12
 81029d8:	af00      	add	r7, sp, #0
 81029da:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 81029dc:	687b      	ldr	r3, [r7, #4]
 81029de:	3310      	adds	r3, #16
 81029e0:	4618      	mov	r0, r3
 81029e2:	370c      	adds	r7, #12
 81029e4:	46bd      	mov	sp, r7
 81029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029ea:	4770      	bx	lr

081029ec <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 81029ec:	b480      	push	{r7}
 81029ee:	b083      	sub	sp, #12
 81029f0:	af00      	add	r7, sp, #0
 81029f2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 81029f4:	687b      	ldr	r3, [r7, #4]
 81029f6:	330c      	adds	r3, #12
 81029f8:	4618      	mov	r0, r3
 81029fa:	370c      	adds	r7, #12
 81029fc:	46bd      	mov	sp, r7
 81029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a02:	4770      	bx	lr

08102a04 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8102a04:	b580      	push	{r7, lr}
 8102a06:	b084      	sub	sp, #16
 8102a08:	af00      	add	r7, sp, #0
 8102a0a:	60f8      	str	r0, [r7, #12]
 8102a0c:	60b9      	str	r1, [r7, #8]
 8102a0e:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8102a10:	68b8      	ldr	r0, [r7, #8]
 8102a12:	f000 f8a3 	bl	8102b5c <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8102a16:	4603      	mov	r3, r0
 8102a18:	681a      	ldr	r2, [r3, #0]
 8102a1a:	68fb      	ldr	r3, [r7, #12]
 8102a1c:	601a      	str	r2, [r3, #0]
 8102a1e:	6878      	ldr	r0, [r7, #4]
 8102a20:	f000 f89c 	bl	8102b5c <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8102a24:	4603      	mov	r3, r0
 8102a26:	681a      	ldr	r2, [r3, #0]
 8102a28:	68fb      	ldr	r3, [r7, #12]
 8102a2a:	605a      	str	r2, [r3, #4]
 8102a2c:	68fb      	ldr	r3, [r7, #12]
 8102a2e:	4618      	mov	r0, r3
 8102a30:	3710      	adds	r7, #16
 8102a32:	46bd      	mov	sp, r7
 8102a34:	bd80      	pop	{r7, pc}

08102a36 <_ZNSt17_Rb_tree_iteratorISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8102a36:	b580      	push	{r7, lr}
 8102a38:	b082      	sub	sp, #8
 8102a3a:	af00      	add	r7, sp, #0
 8102a3c:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8102a3e:	687b      	ldr	r3, [r7, #4]
 8102a40:	681b      	ldr	r3, [r3, #0]
 8102a42:	4618      	mov	r0, r3
 8102a44:	f005 f8aa 	bl	8107b9c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8102a48:	4602      	mov	r2, r0
 8102a4a:	687b      	ldr	r3, [r7, #4]
 8102a4c:	601a      	str	r2, [r3, #0]
	return *this;
 8102a4e:	687b      	ldr	r3, [r7, #4]
      }
 8102a50:	4618      	mov	r0, r3
 8102a52:	3708      	adds	r7, #8
 8102a54:	46bd      	mov	sp, r7
 8102a56:	bd80      	pop	{r7, pc}

08102a58 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8102a58:	b480      	push	{r7}
 8102a5a:	b083      	sub	sp, #12
 8102a5c:	af00      	add	r7, sp, #0
 8102a5e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8102a60:	687b      	ldr	r3, [r7, #4]
 8102a62:	4618      	mov	r0, r3
 8102a64:	370c      	adds	r7, #12
 8102a66:	46bd      	mov	sp, r7
 8102a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a6c:	4770      	bx	lr

08102a6e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8102a6e:	b580      	push	{r7, lr}
 8102a70:	b082      	sub	sp, #8
 8102a72:	af00      	add	r7, sp, #0
 8102a74:	6078      	str	r0, [r7, #4]
 8102a76:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8102a78:	6839      	ldr	r1, [r7, #0]
 8102a7a:	6878      	ldr	r0, [r7, #4]
 8102a7c:	f000 f94b 	bl	8102d16 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE7destroyIS7_EEvPT_>
	}
 8102a80:	bf00      	nop
 8102a82:	3708      	adds	r7, #8
 8102a84:	46bd      	mov	sp, r7
 8102a86:	bd80      	pop	{r7, pc}

08102a88 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8102a88:	b580      	push	{r7, lr}
 8102a8a:	b084      	sub	sp, #16
 8102a8c:	af00      	add	r7, sp, #0
 8102a8e:	60f8      	str	r0, [r7, #12]
 8102a90:	60b9      	str	r1, [r7, #8]
 8102a92:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8102a94:	687a      	ldr	r2, [r7, #4]
 8102a96:	68b9      	ldr	r1, [r7, #8]
 8102a98:	68f8      	ldr	r0, [r7, #12]
 8102a9a:	f000 f947 	bl	8102d2c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE10deallocateEPS8_j>
 8102a9e:	bf00      	nop
 8102aa0:	3710      	adds	r7, #16
 8102aa2:	46bd      	mov	sp, r7
 8102aa4:	bd80      	pop	{r7, pc}

08102aa6 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 8102aa6:	b580      	push	{r7, lr}
 8102aa8:	b082      	sub	sp, #8
 8102aaa:	af00      	add	r7, sp, #0
 8102aac:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8102aae:	6878      	ldr	r0, [r7, #4]
 8102ab0:	f7ff ffd2 	bl	8102a58 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8102ab4:	4603      	mov	r3, r0
 8102ab6:	2101      	movs	r1, #1
 8102ab8:	4618      	mov	r0, r3
 8102aba:	f000 f94a 	bl	8102d52 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE8allocateERS9_j>
 8102abe:	4603      	mov	r3, r0
 8102ac0:	4618      	mov	r0, r3
 8102ac2:	3708      	adds	r7, #8
 8102ac4:	46bd      	mov	sp, r7
 8102ac6:	bd80      	pop	{r7, pc}

08102ac8 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRS1_RS5_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8102ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8102aca:	b085      	sub	sp, #20
 8102acc:	af00      	add	r7, sp, #0
 8102ace:	60f8      	str	r0, [r7, #12]
 8102ad0:	60b9      	str	r1, [r7, #8]
 8102ad2:	607a      	str	r2, [r7, #4]
 8102ad4:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8102ad6:	68bb      	ldr	r3, [r7, #8]
 8102ad8:	4619      	mov	r1, r3
 8102ada:	2018      	movs	r0, #24
 8102adc:	f7fd ff89 	bl	81009f2 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8102ae0:	68f8      	ldr	r0, [r7, #12]
 8102ae2:	f7ff ffb9 	bl	8102a58 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8102ae6:	4604      	mov	r4, r0
 8102ae8:	68b8      	ldr	r0, [r7, #8]
 8102aea:	f7ff fc23 	bl	8102334 <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 8102aee:	4605      	mov	r5, r0
 8102af0:	6878      	ldr	r0, [r7, #4]
 8102af2:	f7fe fe82 	bl	81017fa <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8102af6:	4606      	mov	r6, r0
 8102af8:	6838      	ldr	r0, [r7, #0]
 8102afa:	f7fe fe89 	bl	8101810 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8102afe:	4603      	mov	r3, r0
 8102b00:	4632      	mov	r2, r6
 8102b02:	4629      	mov	r1, r5
 8102b04:	4620      	mov	r0, r4
 8102b06:	f000 f933 	bl	8102d70 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRS3_RS6_EEEvRS9_PT_DpOT0_>
	}
 8102b0a:	bf00      	nop
 8102b0c:	3714      	adds	r7, #20
 8102b0e:	46bd      	mov	sp, r7
 8102b10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08102b12 <_ZNKSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>:
      _M_valptr() const
 8102b12:	b580      	push	{r7, lr}
 8102b14:	b082      	sub	sp, #8
 8102b16:	af00      	add	r7, sp, #0
 8102b18:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8102b1a:	687b      	ldr	r3, [r7, #4]
 8102b1c:	3310      	adds	r3, #16
 8102b1e:	4618      	mov	r0, r3
 8102b20:	f000 f93e 	bl	8102da0 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>
 8102b24:	4603      	mov	r3, r0
 8102b26:	4618      	mov	r0, r3
 8102b28:	3708      	adds	r7, #8
 8102b2a:	46bd      	mov	sp, r7
 8102b2c:	bd80      	pop	{r7, pc}

08102b2e <_ZNKSt10_Select1stISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEclERKS6_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 8102b2e:	b480      	push	{r7}
 8102b30:	b083      	sub	sp, #12
 8102b32:	af00      	add	r7, sp, #0
 8102b34:	6078      	str	r0, [r7, #4]
 8102b36:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8102b38:	683b      	ldr	r3, [r7, #0]
 8102b3a:	4618      	mov	r0, r3
 8102b3c:	370c      	adds	r7, #12
 8102b3e:	46bd      	mov	sp, r7
 8102b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b44:	4770      	bx	lr

08102b46 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102b46:	b480      	push	{r7}
 8102b48:	b083      	sub	sp, #12
 8102b4a:	af00      	add	r7, sp, #0
 8102b4c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102b4e:	687b      	ldr	r3, [r7, #4]
 8102b50:	4618      	mov	r0, r3
 8102b52:	370c      	adds	r7, #12
 8102b54:	46bd      	mov	sp, r7
 8102b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b5a:	4770      	bx	lr

08102b5c <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8102b5c:	b480      	push	{r7}
 8102b5e:	b083      	sub	sp, #12
 8102b60:	af00      	add	r7, sp, #0
 8102b62:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8102b64:	687b      	ldr	r3, [r7, #4]
 8102b66:	4618      	mov	r0, r3
 8102b68:	370c      	adds	r7, #12
 8102b6a:	46bd      	mov	sp, r7
 8102b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b70:	4770      	bx	lr
	...

08102b74 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_max_sizeERKS1_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8102b74:	b580      	push	{r7, lr}
 8102b76:	b084      	sub	sp, #16
 8102b78:	af00      	add	r7, sp, #0
 8102b7a:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8102b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8102ba8 <_ZNSt6vectorI8SMessageSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 8102b7e:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8102b80:	6878      	ldr	r0, [r7, #4]
 8102b82:	f000 f919 	bl	8102db8 <_ZNSt16allocator_traitsISaI8SMessageEE8max_sizeERKS1_>
 8102b86:	4603      	mov	r3, r0
 8102b88:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8102b8a:	f107 0208 	add.w	r2, r7, #8
 8102b8e:	f107 030c 	add.w	r3, r7, #12
 8102b92:	4611      	mov	r1, r2
 8102b94:	4618      	mov	r0, r3
 8102b96:	f000 f91b 	bl	8102dd0 <_ZSt3minIjERKT_S2_S2_>
 8102b9a:	4603      	mov	r3, r0
 8102b9c:	681b      	ldr	r3, [r3, #0]
      }
 8102b9e:	4618      	mov	r0, r3
 8102ba0:	3710      	adds	r7, #16
 8102ba2:	46bd      	mov	sp, r7
 8102ba4:	bd80      	pop	{r7, pc}
 8102ba6:	bf00      	nop
 8102ba8:	05555555 	.word	0x05555555

08102bac <_ZNKSt12_Vector_baseI8SMessageSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8102bac:	b480      	push	{r7}
 8102bae:	b083      	sub	sp, #12
 8102bb0:	af00      	add	r7, sp, #0
 8102bb2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8102bb4:	687b      	ldr	r3, [r7, #4]
 8102bb6:	4618      	mov	r0, r3
 8102bb8:	370c      	adds	r7, #12
 8102bba:	46bd      	mov	sp, r7
 8102bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bc0:	4770      	bx	lr
	...

08102bc4 <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8102bc4:	b580      	push	{r7, lr}
 8102bc6:	b084      	sub	sp, #16
 8102bc8:	af00      	add	r7, sp, #0
 8102bca:	60f8      	str	r0, [r7, #12]
 8102bcc:	60b9      	str	r1, [r7, #8]
 8102bce:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8102bd0:	68f8      	ldr	r0, [r7, #12]
 8102bd2:	f000 f911 	bl	8102df8 <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv>
 8102bd6:	4602      	mov	r2, r0
 8102bd8:	68bb      	ldr	r3, [r7, #8]
 8102bda:	4293      	cmp	r3, r2
 8102bdc:	bf8c      	ite	hi
 8102bde:	2301      	movhi	r3, #1
 8102be0:	2300      	movls	r3, #0
 8102be2:	b2db      	uxtb	r3, r3
 8102be4:	2b00      	cmp	r3, #0
 8102be6:	bf14      	ite	ne
 8102be8:	2301      	movne	r3, #1
 8102bea:	2300      	moveq	r3, #0
 8102bec:	b2db      	uxtb	r3, r3
 8102bee:	2b00      	cmp	r3, #0
 8102bf0:	d007      	beq.n	8102c02 <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8102bf2:	68bb      	ldr	r3, [r7, #8]
 8102bf4:	4a09      	ldr	r2, [pc, #36]	@ (8102c1c <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv+0x58>)
 8102bf6:	4293      	cmp	r3, r2
 8102bf8:	d901      	bls.n	8102bfe <_ZNSt15__new_allocatorI8SMessageE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8102bfa:	f005 f83a 	bl	8107c72 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8102bfe:	f005 f835 	bl	8107c6c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8102c02:	68ba      	ldr	r2, [r7, #8]
 8102c04:	4613      	mov	r3, r2
 8102c06:	005b      	lsls	r3, r3, #1
 8102c08:	4413      	add	r3, r2
 8102c0a:	00db      	lsls	r3, r3, #3
 8102c0c:	4618      	mov	r0, r3
 8102c0e:	f004 ff5f 	bl	8107ad0 <_Znwj>
 8102c12:	4603      	mov	r3, r0
      }
 8102c14:	4618      	mov	r0, r3
 8102c16:	3710      	adds	r7, #16
 8102c18:	46bd      	mov	sp, r7
 8102c1a:	bd80      	pop	{r7, pc}
 8102c1c:	0aaaaaaa 	.word	0x0aaaaaaa

08102c20 <_ZSt12__relocate_aIP8SMessageS1_SaIS0_EET0_T_S4_S3_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8102c20:	b5b0      	push	{r4, r5, r7, lr}
 8102c22:	b084      	sub	sp, #16
 8102c24:	af00      	add	r7, sp, #0
 8102c26:	60f8      	str	r0, [r7, #12]
 8102c28:	60b9      	str	r1, [r7, #8]
 8102c2a:	607a      	str	r2, [r7, #4]
 8102c2c:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 8102c2e:	68f8      	ldr	r0, [r7, #12]
 8102c30:	f000 f8f0 	bl	8102e14 <_ZSt12__niter_baseIP8SMessageET_S2_>
 8102c34:	4604      	mov	r4, r0
 8102c36:	68b8      	ldr	r0, [r7, #8]
 8102c38:	f000 f8ec 	bl	8102e14 <_ZSt12__niter_baseIP8SMessageET_S2_>
 8102c3c:	4605      	mov	r5, r0
 8102c3e:	6878      	ldr	r0, [r7, #4]
 8102c40:	f000 f8e8 	bl	8102e14 <_ZSt12__niter_baseIP8SMessageET_S2_>
 8102c44:	4602      	mov	r2, r0
 8102c46:	683b      	ldr	r3, [r7, #0]
 8102c48:	4629      	mov	r1, r5
 8102c4a:	4620      	mov	r0, r4
 8102c4c:	f000 f8ee 	bl	8102e2c <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>
 8102c50:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 8102c52:	4618      	mov	r0, r3
 8102c54:	3710      	adds	r7, #16
 8102c56:	46bd      	mov	sp, r7
 8102c58:	bdb0      	pop	{r4, r5, r7, pc}

08102c5a <_ZNSt13move_iteratorIP8SMessageEC1ES1_>:
      move_iterator(iterator_type __i)
 8102c5a:	b580      	push	{r7, lr}
 8102c5c:	b082      	sub	sp, #8
 8102c5e:	af00      	add	r7, sp, #0
 8102c60:	6078      	str	r0, [r7, #4]
 8102c62:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8102c64:	463b      	mov	r3, r7
 8102c66:	4618      	mov	r0, r3
 8102c68:	f000 f90a 	bl	8102e80 <_ZSt4moveIRP8SMessageEONSt16remove_referenceIT_E4typeEOS4_>
 8102c6c:	4603      	mov	r3, r0
 8102c6e:	681a      	ldr	r2, [r3, #0]
 8102c70:	687b      	ldr	r3, [r7, #4]
 8102c72:	601a      	str	r2, [r3, #0]
 8102c74:	687b      	ldr	r3, [r7, #4]
 8102c76:	4618      	mov	r0, r3
 8102c78:	3708      	adds	r7, #8
 8102c7a:	46bd      	mov	sp, r7
 8102c7c:	bd80      	pop	{r7, pc}

08102c7e <_ZSt18uninitialized_copyISt13move_iteratorIP8SMessageES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8102c7e:	b580      	push	{r7, lr}
 8102c80:	b086      	sub	sp, #24
 8102c82:	af00      	add	r7, sp, #0
 8102c84:	60f8      	str	r0, [r7, #12]
 8102c86:	60b9      	str	r1, [r7, #8]
 8102c88:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 8102c8a:	2301      	movs	r3, #1
 8102c8c:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 8102c8e:	2301      	movs	r3, #1
 8102c90:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8102c92:	687a      	ldr	r2, [r7, #4]
 8102c94:	68b9      	ldr	r1, [r7, #8]
 8102c96:	68f8      	ldr	r0, [r7, #12]
 8102c98:	f000 f8fd 	bl	8102e96 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIP8SMessageES4_EET0_T_S7_S6_>
 8102c9c:	4603      	mov	r3, r0
    }
 8102c9e:	4618      	mov	r0, r3
 8102ca0:	3718      	adds	r7, #24
 8102ca2:	46bd      	mov	sp, r7
 8102ca4:	bd80      	pop	{r7, pc}

08102ca6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>:
      _M_addr() noexcept
 8102ca6:	b480      	push	{r7}
 8102ca8:	b083      	sub	sp, #12
 8102caa:	af00      	add	r7, sp, #0
 8102cac:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8102cae:	687b      	ldr	r3, [r7, #4]
 8102cb0:	4618      	mov	r0, r3
 8102cb2:	370c      	adds	r7, #12
 8102cb4:	46bd      	mov	sp, r7
 8102cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cba:	4770      	bx	lr

08102cbc <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8102cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8102cc0:	b086      	sub	sp, #24
 8102cc2:	af02      	add	r7, sp, #8
 8102cc4:	60f8      	str	r0, [r7, #12]
 8102cc6:	60b9      	str	r1, [r7, #8]
 8102cc8:	607a      	str	r2, [r7, #4]
 8102cca:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8102ccc:	68bb      	ldr	r3, [r7, #8]
 8102cce:	4619      	mov	r1, r3
 8102cd0:	2018      	movs	r0, #24
 8102cd2:	f7fd fe8e 	bl	81009f2 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8102cd6:	68f8      	ldr	r0, [r7, #12]
 8102cd8:	f7ff febe 	bl	8102a58 <_ZNSt8_Rb_treeIN19EventManagerCM4Task11EEventQueueESt4pairIKS1_P15QueueDefinitionESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8102cdc:	4604      	mov	r4, r0
 8102cde:	68b8      	ldr	r0, [r7, #8]
 8102ce0:	f7ff fb28 	bl	8102334 <_ZNSt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE9_M_valptrEv>
 8102ce4:	4605      	mov	r5, r0
 8102ce6:	6878      	ldr	r0, [r7, #4]
 8102ce8:	f7ff fb41 	bl	810236e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8102cec:	4606      	mov	r6, r0
 8102cee:	6838      	ldr	r0, [r7, #0]
 8102cf0:	f7ff fb48 	bl	8102384 <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8102cf4:	4680      	mov	r8, r0
 8102cf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8102cf8:	f7ff fb4f 	bl	810239a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8102cfc:	4603      	mov	r3, r0
 8102cfe:	9300      	str	r3, [sp, #0]
 8102d00:	4643      	mov	r3, r8
 8102d02:	4632      	mov	r2, r6
 8102d04:	4629      	mov	r1, r5
 8102d06:	4620      	mov	r0, r4
 8102d08:	f000 f8d5 	bl	8102eb6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 8102d0c:	bf00      	nop
 8102d0e:	3710      	adds	r7, #16
 8102d10:	46bd      	mov	sp, r7
 8102d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08102d16 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE7destroyIS7_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 8102d16:	b480      	push	{r7}
 8102d18:	b083      	sub	sp, #12
 8102d1a:	af00      	add	r7, sp, #0
 8102d1c:	6078      	str	r0, [r7, #4]
 8102d1e:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8102d20:	bf00      	nop
 8102d22:	370c      	adds	r7, #12
 8102d24:	46bd      	mov	sp, r7
 8102d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d2a:	4770      	bx	lr

08102d2c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8102d2c:	b580      	push	{r7, lr}
 8102d2e:	b084      	sub	sp, #16
 8102d30:	af00      	add	r7, sp, #0
 8102d32:	60f8      	str	r0, [r7, #12]
 8102d34:	60b9      	str	r1, [r7, #8]
 8102d36:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8102d38:	687a      	ldr	r2, [r7, #4]
 8102d3a:	4613      	mov	r3, r2
 8102d3c:	005b      	lsls	r3, r3, #1
 8102d3e:	4413      	add	r3, r2
 8102d40:	00db      	lsls	r3, r3, #3
 8102d42:	4619      	mov	r1, r3
 8102d44:	68b8      	ldr	r0, [r7, #8]
 8102d46:	f004 fec1 	bl	8107acc <_ZdlPvj>
      }
 8102d4a:	bf00      	nop
 8102d4c:	3710      	adds	r7, #16
 8102d4e:	46bd      	mov	sp, r7
 8102d50:	bd80      	pop	{r7, pc}

08102d52 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8102d52:	b580      	push	{r7, lr}
 8102d54:	b082      	sub	sp, #8
 8102d56:	af00      	add	r7, sp, #0
 8102d58:	6078      	str	r0, [r7, #4]
 8102d5a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8102d5c:	2200      	movs	r2, #0
 8102d5e:	6839      	ldr	r1, [r7, #0]
 8102d60:	6878      	ldr	r0, [r7, #4]
 8102d62:	f000 f8c7 	bl	8102ef4 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv>
 8102d66:	4603      	mov	r3, r0
 8102d68:	4618      	mov	r0, r3
 8102d6a:	3708      	adds	r7, #8
 8102d6c:	46bd      	mov	sp, r7
 8102d6e:	bd80      	pop	{r7, pc}

08102d70 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRS3_RS6_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8102d70:	b590      	push	{r4, r7, lr}
 8102d72:	b085      	sub	sp, #20
 8102d74:	af00      	add	r7, sp, #0
 8102d76:	60f8      	str	r0, [r7, #12]
 8102d78:	60b9      	str	r1, [r7, #8]
 8102d7a:	607a      	str	r2, [r7, #4]
 8102d7c:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8102d7e:	6878      	ldr	r0, [r7, #4]
 8102d80:	f7fe fd3b 	bl	81017fa <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8102d84:	4604      	mov	r4, r0
 8102d86:	6838      	ldr	r0, [r7, #0]
 8102d88:	f7fe fd42 	bl	8101810 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8102d8c:	4603      	mov	r3, r0
 8102d8e:	4622      	mov	r2, r4
 8102d90:	68b9      	ldr	r1, [r7, #8]
 8102d92:	68f8      	ldr	r0, [r7, #12]
 8102d94:	f000 f8dc 	bl	8102f50 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRS3_RS6_EEEvPT_DpOT0_>
	}
 8102d98:	bf00      	nop
 8102d9a:	3714      	adds	r7, #20
 8102d9c:	46bd      	mov	sp, r7
 8102d9e:	bd90      	pop	{r4, r7, pc}

08102da0 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8102da0:	b580      	push	{r7, lr}
 8102da2:	b082      	sub	sp, #8
 8102da4:	af00      	add	r7, sp, #0
 8102da6:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8102da8:	6878      	ldr	r0, [r7, #4]
 8102daa:	f000 f8ef 	bl	8102f8c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>
 8102dae:	4603      	mov	r3, r0
 8102db0:	4618      	mov	r0, r3
 8102db2:	3708      	adds	r7, #8
 8102db4:	46bd      	mov	sp, r7
 8102db6:	bd80      	pop	{r7, pc}

08102db8 <_ZNSt16allocator_traitsISaI8SMessageEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8102db8:	b580      	push	{r7, lr}
 8102dba:	b082      	sub	sp, #8
 8102dbc:	af00      	add	r7, sp, #0
 8102dbe:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8102dc0:	6878      	ldr	r0, [r7, #4]
 8102dc2:	f000 f8ee 	bl	8102fa2 <_ZNKSt15__new_allocatorI8SMessageE8max_sizeEv>
 8102dc6:	4603      	mov	r3, r0
      }
 8102dc8:	4618      	mov	r0, r3
 8102dca:	3708      	adds	r7, #8
 8102dcc:	46bd      	mov	sp, r7
 8102dce:	bd80      	pop	{r7, pc}

08102dd0 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8102dd0:	b480      	push	{r7}
 8102dd2:	b083      	sub	sp, #12
 8102dd4:	af00      	add	r7, sp, #0
 8102dd6:	6078      	str	r0, [r7, #4]
 8102dd8:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8102dda:	683b      	ldr	r3, [r7, #0]
 8102ddc:	681a      	ldr	r2, [r3, #0]
 8102dde:	687b      	ldr	r3, [r7, #4]
 8102de0:	681b      	ldr	r3, [r3, #0]
 8102de2:	429a      	cmp	r2, r3
 8102de4:	d201      	bcs.n	8102dea <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8102de6:	683b      	ldr	r3, [r7, #0]
 8102de8:	e000      	b.n	8102dec <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8102dea:	687b      	ldr	r3, [r7, #4]
    }
 8102dec:	4618      	mov	r0, r3
 8102dee:	370c      	adds	r7, #12
 8102df0:	46bd      	mov	sp, r7
 8102df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102df6:	4770      	bx	lr

08102df8 <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8102df8:	b480      	push	{r7}
 8102dfa:	b083      	sub	sp, #12
 8102dfc:	af00      	add	r7, sp, #0
 8102dfe:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8102e00:	4b03      	ldr	r3, [pc, #12]	@ (8102e10 <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8102e02:	4618      	mov	r0, r3
 8102e04:	370c      	adds	r7, #12
 8102e06:	46bd      	mov	sp, r7
 8102e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e0c:	4770      	bx	lr
 8102e0e:	bf00      	nop
 8102e10:	05555555 	.word	0x05555555

08102e14 <_ZSt12__niter_baseIP8SMessageET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8102e14:	b480      	push	{r7}
 8102e16:	b083      	sub	sp, #12
 8102e18:	af00      	add	r7, sp, #0
 8102e1a:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8102e1c:	687b      	ldr	r3, [r7, #4]
 8102e1e:	4618      	mov	r0, r3
 8102e20:	370c      	adds	r7, #12
 8102e22:	46bd      	mov	sp, r7
 8102e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e28:	4770      	bx	lr
	...

08102e2c <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8102e2c:	b580      	push	{r7, lr}
 8102e2e:	b086      	sub	sp, #24
 8102e30:	af00      	add	r7, sp, #0
 8102e32:	60f8      	str	r0, [r7, #12]
 8102e34:	60b9      	str	r1, [r7, #8]
 8102e36:	607a      	str	r2, [r7, #4]
 8102e38:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8102e3a:	68ba      	ldr	r2, [r7, #8]
 8102e3c:	68fb      	ldr	r3, [r7, #12]
 8102e3e:	1ad3      	subs	r3, r2, r3
 8102e40:	10db      	asrs	r3, r3, #3
 8102e42:	4a0e      	ldr	r2, [pc, #56]	@ (8102e7c <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x50>)
 8102e44:	fb02 f303 	mul.w	r3, r2, r3
 8102e48:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8102e4a:	697b      	ldr	r3, [r7, #20]
 8102e4c:	2b00      	cmp	r3, #0
 8102e4e:	dd09      	ble.n	8102e64 <_ZSt14__relocate_a_1I8SMessageS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x38>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8102e50:	697a      	ldr	r2, [r7, #20]
 8102e52:	4613      	mov	r3, r2
 8102e54:	005b      	lsls	r3, r3, #1
 8102e56:	4413      	add	r3, r2
 8102e58:	00db      	lsls	r3, r3, #3
 8102e5a:	461a      	mov	r2, r3
 8102e5c:	68f9      	ldr	r1, [r7, #12]
 8102e5e:	6878      	ldr	r0, [r7, #4]
 8102e60:	f004 ffe0 	bl	8107e24 <memmove>
      return __result + __count;
 8102e64:	697a      	ldr	r2, [r7, #20]
 8102e66:	4613      	mov	r3, r2
 8102e68:	005b      	lsls	r3, r3, #1
 8102e6a:	4413      	add	r3, r2
 8102e6c:	00db      	lsls	r3, r3, #3
 8102e6e:	461a      	mov	r2, r3
 8102e70:	687b      	ldr	r3, [r7, #4]
 8102e72:	4413      	add	r3, r2
    }
 8102e74:	4618      	mov	r0, r3
 8102e76:	3718      	adds	r7, #24
 8102e78:	46bd      	mov	sp, r7
 8102e7a:	bd80      	pop	{r7, pc}
 8102e7c:	aaaaaaab 	.word	0xaaaaaaab

08102e80 <_ZSt4moveIRP8SMessageEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8102e80:	b480      	push	{r7}
 8102e82:	b083      	sub	sp, #12
 8102e84:	af00      	add	r7, sp, #0
 8102e86:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8102e88:	687b      	ldr	r3, [r7, #4]
 8102e8a:	4618      	mov	r0, r3
 8102e8c:	370c      	adds	r7, #12
 8102e8e:	46bd      	mov	sp, r7
 8102e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e94:	4770      	bx	lr

08102e96 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIP8SMessageES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8102e96:	b580      	push	{r7, lr}
 8102e98:	b084      	sub	sp, #16
 8102e9a:	af00      	add	r7, sp, #0
 8102e9c:	60f8      	str	r0, [r7, #12]
 8102e9e:	60b9      	str	r1, [r7, #8]
 8102ea0:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8102ea2:	687a      	ldr	r2, [r7, #4]
 8102ea4:	68b9      	ldr	r1, [r7, #8]
 8102ea6:	68f8      	ldr	r0, [r7, #12]
 8102ea8:	f000 f887 	bl	8102fba <_ZSt4copyISt13move_iteratorIP8SMessageES2_ET0_T_S5_S4_>
 8102eac:	4603      	mov	r3, r0
 8102eae:	4618      	mov	r0, r3
 8102eb0:	3710      	adds	r7, #16
 8102eb2:	46bd      	mov	sp, r7
 8102eb4:	bd80      	pop	{r7, pc}

08102eb6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8102eb6:	b5b0      	push	{r4, r5, r7, lr}
 8102eb8:	b086      	sub	sp, #24
 8102eba:	af02      	add	r7, sp, #8
 8102ebc:	60f8      	str	r0, [r7, #12]
 8102ebe:	60b9      	str	r1, [r7, #8]
 8102ec0:	607a      	str	r2, [r7, #4]
 8102ec2:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8102ec4:	6878      	ldr	r0, [r7, #4]
 8102ec6:	f7ff fa52 	bl	810236e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8102eca:	4604      	mov	r4, r0
 8102ecc:	6838      	ldr	r0, [r7, #0]
 8102ece:	f7ff fa59 	bl	8102384 <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8102ed2:	4605      	mov	r5, r0
 8102ed4:	6a38      	ldr	r0, [r7, #32]
 8102ed6:	f7ff fa60 	bl	810239a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8102eda:	4603      	mov	r3, r0
 8102edc:	9300      	str	r3, [sp, #0]
 8102ede:	462b      	mov	r3, r5
 8102ee0:	4622      	mov	r2, r4
 8102ee2:	68b9      	ldr	r1, [r7, #8]
 8102ee4:	68f8      	ldr	r0, [r7, #12]
 8102ee6:	f000 f890 	bl	810300a <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvPT_DpOT0_>
	}
 8102eea:	bf00      	nop
 8102eec:	3710      	adds	r7, #16
 8102eee:	46bd      	mov	sp, r7
 8102ef0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08102ef4 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8102ef4:	b580      	push	{r7, lr}
 8102ef6:	b084      	sub	sp, #16
 8102ef8:	af00      	add	r7, sp, #0
 8102efa:	60f8      	str	r0, [r7, #12]
 8102efc:	60b9      	str	r1, [r7, #8]
 8102efe:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8102f00:	68f8      	ldr	r0, [r7, #12]
 8102f02:	f000 f8ab 	bl	810305c <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE11_M_max_sizeEv>
 8102f06:	4602      	mov	r2, r0
 8102f08:	68bb      	ldr	r3, [r7, #8]
 8102f0a:	4293      	cmp	r3, r2
 8102f0c:	bf8c      	ite	hi
 8102f0e:	2301      	movhi	r3, #1
 8102f10:	2300      	movls	r3, #0
 8102f12:	b2db      	uxtb	r3, r3
 8102f14:	2b00      	cmp	r3, #0
 8102f16:	bf14      	ite	ne
 8102f18:	2301      	movne	r3, #1
 8102f1a:	2300      	moveq	r3, #0
 8102f1c:	b2db      	uxtb	r3, r3
 8102f1e:	2b00      	cmp	r3, #0
 8102f20:	d007      	beq.n	8102f32 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8102f22:	68bb      	ldr	r3, [r7, #8]
 8102f24:	4a09      	ldr	r2, [pc, #36]	@ (8102f4c <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv+0x58>)
 8102f26:	4293      	cmp	r3, r2
 8102f28:	d901      	bls.n	8102f2e <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8102f2a:	f004 fea2 	bl	8107c72 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8102f2e:	f004 fe9d 	bl	8107c6c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8102f32:	68ba      	ldr	r2, [r7, #8]
 8102f34:	4613      	mov	r3, r2
 8102f36:	005b      	lsls	r3, r3, #1
 8102f38:	4413      	add	r3, r2
 8102f3a:	00db      	lsls	r3, r3, #3
 8102f3c:	4618      	mov	r0, r3
 8102f3e:	f004 fdc7 	bl	8107ad0 <_Znwj>
 8102f42:	4603      	mov	r3, r0
      }
 8102f44:	4618      	mov	r0, r3
 8102f46:	3710      	adds	r7, #16
 8102f48:	46bd      	mov	sp, r7
 8102f4a:	bd80      	pop	{r7, pc}
 8102f4c:	0aaaaaaa 	.word	0x0aaaaaaa

08102f50 <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRS3_RS6_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8102f50:	b5b0      	push	{r4, r5, r7, lr}
 8102f52:	b084      	sub	sp, #16
 8102f54:	af00      	add	r7, sp, #0
 8102f56:	60f8      	str	r0, [r7, #12]
 8102f58:	60b9      	str	r1, [r7, #8]
 8102f5a:	607a      	str	r2, [r7, #4]
 8102f5c:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8102f5e:	68bb      	ldr	r3, [r7, #8]
 8102f60:	4619      	mov	r1, r3
 8102f62:	2008      	movs	r0, #8
 8102f64:	f7fd fd45 	bl	81009f2 <_ZnwjPv>
 8102f68:	4604      	mov	r4, r0
 8102f6a:	6878      	ldr	r0, [r7, #4]
 8102f6c:	f7fe fc45 	bl	81017fa <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 8102f70:	4605      	mov	r5, r0
 8102f72:	6838      	ldr	r0, [r7, #0]
 8102f74:	f7fe fc4c 	bl	8101810 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8102f78:	4603      	mov	r3, r0
 8102f7a:	461a      	mov	r2, r3
 8102f7c:	4629      	mov	r1, r5
 8102f7e:	4620      	mov	r0, r4
 8102f80:	f000 f87a 	bl	8103078 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IRS1_RS4_Lb1EEEOT_OT0_>
 8102f84:	bf00      	nop
 8102f86:	3710      	adds	r7, #16
 8102f88:	46bd      	mov	sp, r7
 8102f8a:	bdb0      	pop	{r4, r5, r7, pc}

08102f8c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEE7_M_addrEv>:
      _M_addr() const noexcept
 8102f8c:	b480      	push	{r7}
 8102f8e:	b083      	sub	sp, #12
 8102f90:	af00      	add	r7, sp, #0
 8102f92:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8102f94:	687b      	ldr	r3, [r7, #4]
 8102f96:	4618      	mov	r0, r3
 8102f98:	370c      	adds	r7, #12
 8102f9a:	46bd      	mov	sp, r7
 8102f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fa0:	4770      	bx	lr

08102fa2 <_ZNKSt15__new_allocatorI8SMessageE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8102fa2:	b580      	push	{r7, lr}
 8102fa4:	b082      	sub	sp, #8
 8102fa6:	af00      	add	r7, sp, #0
 8102fa8:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8102faa:	6878      	ldr	r0, [r7, #4]
 8102fac:	f7ff ff24 	bl	8102df8 <_ZNKSt15__new_allocatorI8SMessageE11_M_max_sizeEv>
 8102fb0:	4603      	mov	r3, r0
 8102fb2:	4618      	mov	r0, r3
 8102fb4:	3708      	adds	r7, #8
 8102fb6:	46bd      	mov	sp, r7
 8102fb8:	bd80      	pop	{r7, pc}

08102fba <_ZSt4copyISt13move_iteratorIP8SMessageES2_ET0_T_S5_S4_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8102fba:	b590      	push	{r4, r7, lr}
 8102fbc:	b085      	sub	sp, #20
 8102fbe:	af00      	add	r7, sp, #0
 8102fc0:	60f8      	str	r0, [r7, #12]
 8102fc2:	60b9      	str	r1, [r7, #8]
 8102fc4:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::reference>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8102fc6:	68f8      	ldr	r0, [r7, #12]
 8102fc8:	f000 f86f 	bl	81030aa <_ZSt12__miter_baseIP8SMessageEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8102fcc:	4604      	mov	r4, r0
 8102fce:	68b8      	ldr	r0, [r7, #8]
 8102fd0:	f000 f86b 	bl	81030aa <_ZSt12__miter_baseIP8SMessageEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8102fd4:	4603      	mov	r3, r0
 8102fd6:	687a      	ldr	r2, [r7, #4]
 8102fd8:	4619      	mov	r1, r3
 8102fda:	4620      	mov	r0, r4
 8102fdc:	f000 f876 	bl	81030cc <_ZSt13__copy_move_aILb1EP8SMessageS1_ET1_T0_S3_S2_>
 8102fe0:	4603      	mov	r3, r0
    }
 8102fe2:	4618      	mov	r0, r3
 8102fe4:	3714      	adds	r7, #20
 8102fe6:	46bd      	mov	sp, r7
 8102fe8:	bd90      	pop	{r4, r7, pc}

08102fea <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8102fea:	b580      	push	{r7, lr}
 8102fec:	b082      	sub	sp, #8
 8102fee:	af00      	add	r7, sp, #0
 8102ff0:	6078      	str	r0, [r7, #4]
 8102ff2:	6039      	str	r1, [r7, #0]
 8102ff4:	687b      	ldr	r3, [r7, #4]
 8102ff6:	683a      	ldr	r2, [r7, #0]
 8102ff8:	4611      	mov	r1, r2
 8102ffa:	4618      	mov	r0, r3
 8102ffc:	f000 f889 	bl	8103112 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>
 8103000:	687b      	ldr	r3, [r7, #4]
 8103002:	4618      	mov	r0, r3
 8103004:	3708      	adds	r7, #8
 8103006:	46bd      	mov	sp, r7
 8103008:	bd80      	pop	{r7, pc}

0810300a <_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 810300a:	b5f0      	push	{r4, r5, r6, r7, lr}
 810300c:	b087      	sub	sp, #28
 810300e:	af00      	add	r7, sp, #0
 8103010:	60f8      	str	r0, [r7, #12]
 8103012:	60b9      	str	r1, [r7, #8]
 8103014:	607a      	str	r2, [r7, #4]
 8103016:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8103018:	68bb      	ldr	r3, [r7, #8]
 810301a:	4619      	mov	r1, r3
 810301c:	2008      	movs	r0, #8
 810301e:	f7fd fce8 	bl	81009f2 <_ZnwjPv>
 8103022:	4604      	mov	r4, r0
 8103024:	6878      	ldr	r0, [r7, #4]
 8103026:	f7ff f9a2 	bl	810236e <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 810302a:	6838      	ldr	r0, [r7, #0]
 810302c:	f7ff f9aa 	bl	8102384 <_ZSt7forwardISt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8103030:	4602      	mov	r2, r0
 8103032:	f107 0314 	add.w	r3, r7, #20
 8103036:	4611      	mov	r1, r2
 8103038:	4618      	mov	r0, r3
 810303a:	f7ff ffd6 	bl	8102fea <_ZNSt5tupleIJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>
 810303e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8103040:	f7ff f9ab 	bl	810239a <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8103044:	f107 0214 	add.w	r2, r7, #20
 8103048:	4633      	mov	r3, r6
 810304a:	4629      	mov	r1, r5
 810304c:	4620      	mov	r0, r4
 810304e:	f000 f870 	bl	8103132 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 8103052:	bf00      	nop
 8103054:	371c      	adds	r7, #28
 8103056:	46bd      	mov	sp, r7
 8103058:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0810305c <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 810305c:	b480      	push	{r7}
 810305e:	b083      	sub	sp, #12
 8103060:	af00      	add	r7, sp, #0
 8103062:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8103064:	4b03      	ldr	r3, [pc, #12]	@ (8103074 <_ZNKSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEEE11_M_max_sizeEv+0x18>)
      }
 8103066:	4618      	mov	r0, r3
 8103068:	370c      	adds	r7, #12
 810306a:	46bd      	mov	sp, r7
 810306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103070:	4770      	bx	lr
 8103072:	bf00      	nop
 8103074:	05555555 	.word	0x05555555

08103078 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IRS1_RS4_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8103078:	b580      	push	{r7, lr}
 810307a:	b084      	sub	sp, #16
 810307c:	af00      	add	r7, sp, #0
 810307e:	60f8      	str	r0, [r7, #12]
 8103080:	60b9      	str	r1, [r7, #8]
 8103082:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8103084:	68b8      	ldr	r0, [r7, #8]
 8103086:	f7fe fbb8 	bl	81017fa <_ZSt7forwardIRN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS3_E4typeE>
 810308a:	4603      	mov	r3, r0
 810308c:	781a      	ldrb	r2, [r3, #0]
 810308e:	68fb      	ldr	r3, [r7, #12]
 8103090:	701a      	strb	r2, [r3, #0]
 8103092:	6878      	ldr	r0, [r7, #4]
 8103094:	f7fe fbbc 	bl	8101810 <_ZSt7forwardIRP15QueueDefinitionEOT_RNSt16remove_referenceIS3_E4typeE>
 8103098:	4603      	mov	r3, r0
 810309a:	681a      	ldr	r2, [r3, #0]
 810309c:	68fb      	ldr	r3, [r7, #12]
 810309e:	605a      	str	r2, [r3, #4]
 81030a0:	68fb      	ldr	r3, [r7, #12]
 81030a2:	4618      	mov	r0, r3
 81030a4:	3710      	adds	r7, #16
 81030a6:	46bd      	mov	sp, r7
 81030a8:	bd80      	pop	{r7, pc}

081030aa <_ZSt12__miter_baseIP8SMessageEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    };

  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    auto
    __miter_base(move_iterator<_Iterator> __it)
 81030aa:	b580      	push	{r7, lr}
 81030ac:	b082      	sub	sp, #8
 81030ae:	af00      	add	r7, sp, #0
 81030b0:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 81030b2:	1d3b      	adds	r3, r7, #4
 81030b4:	4618      	mov	r0, r3
 81030b6:	f000 f850 	bl	810315a <_ZNKSt13move_iteratorIP8SMessageE4baseEv>
 81030ba:	4603      	mov	r3, r0
 81030bc:	4618      	mov	r0, r3
 81030be:	f000 f858 	bl	8103172 <_ZSt12__miter_baseIP8SMessageET_S2_>
 81030c2:	4603      	mov	r3, r0
 81030c4:	4618      	mov	r0, r3
 81030c6:	3708      	adds	r7, #8
 81030c8:	46bd      	mov	sp, r7
 81030ca:	bd80      	pop	{r7, pc}

081030cc <_ZSt13__copy_move_aILb1EP8SMessageS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 81030cc:	b5b0      	push	{r4, r5, r7, lr}
 81030ce:	b084      	sub	sp, #16
 81030d0:	af00      	add	r7, sp, #0
 81030d2:	60f8      	str	r0, [r7, #12]
 81030d4:	60b9      	str	r1, [r7, #8]
 81030d6:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 81030d8:	68f8      	ldr	r0, [r7, #12]
 81030da:	f7ff fe9b 	bl	8102e14 <_ZSt12__niter_baseIP8SMessageET_S2_>
 81030de:	4604      	mov	r4, r0
 81030e0:	68b8      	ldr	r0, [r7, #8]
 81030e2:	f7ff fe97 	bl	8102e14 <_ZSt12__niter_baseIP8SMessageET_S2_>
 81030e6:	4605      	mov	r5, r0
 81030e8:	687b      	ldr	r3, [r7, #4]
 81030ea:	4618      	mov	r0, r3
 81030ec:	f7ff fe92 	bl	8102e14 <_ZSt12__niter_baseIP8SMessageET_S2_>
 81030f0:	4603      	mov	r3, r0
 81030f2:	461a      	mov	r2, r3
 81030f4:	4629      	mov	r1, r5
 81030f6:	4620      	mov	r0, r4
 81030f8:	f000 f846 	bl	8103188 <_ZSt14__copy_move_a1ILb1EP8SMessageS1_ET1_T0_S3_S2_>
 81030fc:	4602      	mov	r2, r0
 81030fe:	1d3b      	adds	r3, r7, #4
 8103100:	4611      	mov	r1, r2
 8103102:	4618      	mov	r0, r3
 8103104:	f000 f850 	bl	81031a8 <_ZSt12__niter_wrapIP8SMessageET_RKS2_S2_>
 8103108:	4603      	mov	r3, r0
    }
 810310a:	4618      	mov	r0, r3
 810310c:	3710      	adds	r7, #16
 810310e:	46bd      	mov	sp, r7
 8103110:	bdb0      	pop	{r4, r5, r7, pc}

08103112 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8103112:	b480      	push	{r7}
 8103114:	b083      	sub	sp, #12
 8103116:	af00      	add	r7, sp, #0
 8103118:	6078      	str	r0, [r7, #4]
 810311a:	6039      	str	r1, [r7, #0]
      : _Base(static_cast<_Base&&>(__in))
 810311c:	687b      	ldr	r3, [r7, #4]
 810311e:	683a      	ldr	r2, [r7, #0]
 8103120:	6812      	ldr	r2, [r2, #0]
 8103122:	601a      	str	r2, [r3, #0]
      { }
 8103124:	687b      	ldr	r3, [r7, #4]
 8103126:	4618      	mov	r0, r3
 8103128:	370c      	adds	r7, #12
 810312a:	46bd      	mov	sp, r7
 810312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103130:	4770      	bx	lr

08103132 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
  */
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      _GLIBCXX20_CONSTEXPR
      inline
      pair<_T1, _T2>::
 8103132:	b5b0      	push	{r4, r5, r7, lr}
 8103134:	b086      	sub	sp, #24
 8103136:	af02      	add	r7, sp, #8
 8103138:	60f8      	str	r0, [r7, #12]
 810313a:	7239      	strb	r1, [r7, #8]
 810313c:	607a      	str	r2, [r7, #4]
 810313e:	703b      	strb	r3, [r7, #0]
      pair(piecewise_construct_t,
	   tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8103140:	463a      	mov	r2, r7
 8103142:	f88d 4000 	strb.w	r4, [sp]
 8103146:	462b      	mov	r3, r5
 8103148:	6879      	ldr	r1, [r7, #4]
 810314a:	68f8      	ldr	r0, [r7, #12]
 810314c:	f000 f838 	bl	81031c0 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 8103150:	68fb      	ldr	r3, [r7, #12]
 8103152:	4618      	mov	r0, r3
 8103154:	3710      	adds	r7, #16
 8103156:	46bd      	mov	sp, r7
 8103158:	bdb0      	pop	{r4, r5, r7, pc}

0810315a <_ZNKSt13move_iteratorIP8SMessageE4baseEv>:
      base() const
 810315a:	b480      	push	{r7}
 810315c:	b083      	sub	sp, #12
 810315e:	af00      	add	r7, sp, #0
 8103160:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8103162:	687b      	ldr	r3, [r7, #4]
 8103164:	681b      	ldr	r3, [r3, #0]
 8103166:	4618      	mov	r0, r3
 8103168:	370c      	adds	r7, #12
 810316a:	46bd      	mov	sp, r7
 810316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103170:	4770      	bx	lr

08103172 <_ZSt12__miter_baseIP8SMessageET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8103172:	b480      	push	{r7}
 8103174:	b083      	sub	sp, #12
 8103176:	af00      	add	r7, sp, #0
 8103178:	6078      	str	r0, [r7, #4]
    { return __it; }
 810317a:	687b      	ldr	r3, [r7, #4]
 810317c:	4618      	mov	r0, r3
 810317e:	370c      	adds	r7, #12
 8103180:	46bd      	mov	sp, r7
 8103182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103186:	4770      	bx	lr

08103188 <_ZSt14__copy_move_a1ILb1EP8SMessageS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8103188:	b580      	push	{r7, lr}
 810318a:	b084      	sub	sp, #16
 810318c:	af00      	add	r7, sp, #0
 810318e:	60f8      	str	r0, [r7, #12]
 8103190:	60b9      	str	r1, [r7, #8]
 8103192:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8103194:	687a      	ldr	r2, [r7, #4]
 8103196:	68b9      	ldr	r1, [r7, #8]
 8103198:	68f8      	ldr	r0, [r7, #12]
 810319a:	f000 f82b 	bl	81031f4 <_ZSt14__copy_move_a2ILb1EP8SMessageS1_ET1_T0_S3_S2_>
 810319e:	4603      	mov	r3, r0
 81031a0:	4618      	mov	r0, r3
 81031a2:	3710      	adds	r7, #16
 81031a4:	46bd      	mov	sp, r7
 81031a6:	bd80      	pop	{r7, pc}

081031a8 <_ZSt12__niter_wrapIP8SMessageET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 81031a8:	b480      	push	{r7}
 81031aa:	b083      	sub	sp, #12
 81031ac:	af00      	add	r7, sp, #0
 81031ae:	6078      	str	r0, [r7, #4]
 81031b0:	6039      	str	r1, [r7, #0]
    { return __res; }
 81031b2:	683b      	ldr	r3, [r7, #0]
 81031b4:	4618      	mov	r0, r3
 81031b6:	370c      	adds	r7, #12
 81031b8:	46bd      	mov	sp, r7
 81031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031be:	4770      	bx	lr

081031c0 <_ZNSt4pairIKN19EventManagerCM4Task11EEventQueueEP15QueueDefinitionEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, size_t... _Indexes1,
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 81031c0:	b580      	push	{r7, lr}
 81031c2:	b084      	sub	sp, #16
 81031c4:	af00      	add	r7, sp, #0
 81031c6:	60f8      	str	r0, [r7, #12]
 81031c8:	60b9      	str	r1, [r7, #8]
 81031ca:	607a      	str	r2, [r7, #4]
 81031cc:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 81031ce:	68b8      	ldr	r0, [r7, #8]
 81031d0:	f000 f820 	bl	8103214 <_ZSt3getILj0EJRKN19EventManagerCM4Task11EEventQueueEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 81031d4:	4603      	mov	r3, r0
 81031d6:	4618      	mov	r0, r3
 81031d8:	f000 f829 	bl	810322e <_ZSt7forwardIRKN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS4_E4typeE>
 81031dc:	4603      	mov	r3, r0
 81031de:	781a      	ldrb	r2, [r3, #0]
 81031e0:	68fb      	ldr	r3, [r7, #12]
 81031e2:	701a      	strb	r2, [r3, #0]
	second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 81031e4:	68fb      	ldr	r3, [r7, #12]
 81031e6:	2200      	movs	r2, #0
 81031e8:	605a      	str	r2, [r3, #4]
      { }
 81031ea:	68fb      	ldr	r3, [r7, #12]
 81031ec:	4618      	mov	r0, r3
 81031ee:	3710      	adds	r7, #16
 81031f0:	46bd      	mov	sp, r7
 81031f2:	bd80      	pop	{r7, pc}

081031f4 <_ZSt14__copy_move_a2ILb1EP8SMessageS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 81031f4:	b580      	push	{r7, lr}
 81031f6:	b084      	sub	sp, #16
 81031f8:	af00      	add	r7, sp, #0
 81031fa:	60f8      	str	r0, [r7, #12]
 81031fc:	60b9      	str	r1, [r7, #8]
 81031fe:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8103200:	687a      	ldr	r2, [r7, #4]
 8103202:	68b9      	ldr	r1, [r7, #8]
 8103204:	68f8      	ldr	r0, [r7, #12]
 8103206:	f000 f81d 	bl	8103244 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8SMessageEEPT_PKS4_S7_S5_>
 810320a:	4603      	mov	r3, r0
    }
 810320c:	4618      	mov	r0, r3
 810320e:	3710      	adds	r7, #16
 8103210:	46bd      	mov	sp, r7
 8103212:	bd80      	pop	{r7, pc}

08103214 <_ZSt3getILj0EJRKN19EventManagerCM4Task11EEventQueueEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8103214:	b580      	push	{r7, lr}
 8103216:	b082      	sub	sp, #8
 8103218:	af00      	add	r7, sp, #0
 810321a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 810321c:	687b      	ldr	r3, [r7, #4]
 810321e:	4618      	mov	r0, r3
 8103220:	f000 f83a 	bl	8103298 <_ZSt12__get_helperILj0ERKN19EventManagerCM4Task11EEventQueueEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8103224:	4603      	mov	r3, r0
 8103226:	4618      	mov	r0, r3
 8103228:	3708      	adds	r7, #8
 810322a:	46bd      	mov	sp, r7
 810322c:	bd80      	pop	{r7, pc}

0810322e <_ZSt7forwardIRKN19EventManagerCM4Task11EEventQueueEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 810322e:	b480      	push	{r7}
 8103230:	b083      	sub	sp, #12
 8103232:	af00      	add	r7, sp, #0
 8103234:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8103236:	687b      	ldr	r3, [r7, #4]
 8103238:	4618      	mov	r0, r3
 810323a:	370c      	adds	r7, #12
 810323c:	46bd      	mov	sp, r7
 810323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103242:	4770      	bx	lr

08103244 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8SMessageEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8103244:	b580      	push	{r7, lr}
 8103246:	b086      	sub	sp, #24
 8103248:	af00      	add	r7, sp, #0
 810324a:	60f8      	str	r0, [r7, #12]
 810324c:	60b9      	str	r1, [r7, #8]
 810324e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8103250:	68ba      	ldr	r2, [r7, #8]
 8103252:	68fb      	ldr	r3, [r7, #12]
 8103254:	1ad3      	subs	r3, r2, r3
 8103256:	10db      	asrs	r3, r3, #3
 8103258:	4a0e      	ldr	r2, [pc, #56]	@ (8103294 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8SMessageEEPT_PKS4_S7_S5_+0x50>)
 810325a:	fb02 f303 	mul.w	r3, r2, r3
 810325e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8103260:	697b      	ldr	r3, [r7, #20]
 8103262:	2b00      	cmp	r3, #0
 8103264:	d009      	beq.n	810327a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI8SMessageEEPT_PKS4_S7_S5_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8103266:	697a      	ldr	r2, [r7, #20]
 8103268:	4613      	mov	r3, r2
 810326a:	005b      	lsls	r3, r3, #1
 810326c:	4413      	add	r3, r2
 810326e:	00db      	lsls	r3, r3, #3
 8103270:	461a      	mov	r2, r3
 8103272:	68f9      	ldr	r1, [r7, #12]
 8103274:	6878      	ldr	r0, [r7, #4]
 8103276:	f004 fdd5 	bl	8107e24 <memmove>
	  return __result + _Num;
 810327a:	697a      	ldr	r2, [r7, #20]
 810327c:	4613      	mov	r3, r2
 810327e:	005b      	lsls	r3, r3, #1
 8103280:	4413      	add	r3, r2
 8103282:	00db      	lsls	r3, r3, #3
 8103284:	461a      	mov	r2, r3
 8103286:	687b      	ldr	r3, [r7, #4]
 8103288:	4413      	add	r3, r2
	}
 810328a:	4618      	mov	r0, r3
 810328c:	3718      	adds	r7, #24
 810328e:	46bd      	mov	sp, r7
 8103290:	bd80      	pop	{r7, pc}
 8103292:	bf00      	nop
 8103294:	aaaaaaab 	.word	0xaaaaaaab

08103298 <_ZSt12__get_helperILj0ERKN19EventManagerCM4Task11EEventQueueEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8103298:	b580      	push	{r7, lr}
 810329a:	b082      	sub	sp, #8
 810329c:	af00      	add	r7, sp, #0
 810329e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 81032a0:	6878      	ldr	r0, [r7, #4]
 81032a2:	f000 f805 	bl	81032b0 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEE7_M_headERS4_>
 81032a6:	4603      	mov	r3, r0
 81032a8:	4618      	mov	r0, r3
 81032aa:	3708      	adds	r7, #8
 81032ac:	46bd      	mov	sp, r7
 81032ae:	bd80      	pop	{r7, pc}

081032b0 <_ZNSt11_Tuple_implILj0EJRKN19EventManagerCM4Task11EEventQueueEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 81032b0:	b580      	push	{r7, lr}
 81032b2:	b082      	sub	sp, #8
 81032b4:	af00      	add	r7, sp, #0
 81032b6:	6078      	str	r0, [r7, #4]
 81032b8:	687b      	ldr	r3, [r7, #4]
 81032ba:	4618      	mov	r0, r3
 81032bc:	f000 f805 	bl	81032ca <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EE7_M_headERS4_>
 81032c0:	4603      	mov	r3, r0
 81032c2:	4618      	mov	r0, r3
 81032c4:	3708      	adds	r7, #8
 81032c6:	46bd      	mov	sp, r7
 81032c8:	bd80      	pop	{r7, pc}

081032ca <_ZNSt10_Head_baseILj0ERKN19EventManagerCM4Task11EEventQueueELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 81032ca:	b480      	push	{r7}
 81032cc:	b083      	sub	sp, #12
 81032ce:	af00      	add	r7, sp, #0
 81032d0:	6078      	str	r0, [r7, #4]
 81032d2:	687b      	ldr	r3, [r7, #4]
 81032d4:	681b      	ldr	r3, [r3, #0]
 81032d6:	4618      	mov	r0, r3
 81032d8:	370c      	adds	r7, #12
 81032da:	46bd      	mov	sp, r7
 81032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032e0:	4770      	bx	lr
	...

081032e4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 81032e4:	b580      	push	{r7, lr}
 81032e6:	b082      	sub	sp, #8
 81032e8:	af00      	add	r7, sp, #0
 81032ea:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 81032ec:	4b04      	ldr	r3, [pc, #16]	@ (8103300 <HAL_ETH_RxCpltCallback+0x1c>)
 81032ee:	681b      	ldr	r3, [r3, #0]
 81032f0:	4618      	mov	r0, r3
 81032f2:	f001 fa0b 	bl	810470c <osSemaphoreRelease>
}
 81032f6:	bf00      	nop
 81032f8:	3708      	adds	r7, #8
 81032fa:	46bd      	mov	sp, r7
 81032fc:	bd80      	pop	{r7, pc}
 81032fe:	bf00      	nop
 8103300:	100000e8 	.word	0x100000e8

08103304 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8103304:	b580      	push	{r7, lr}
 8103306:	b082      	sub	sp, #8
 8103308:	af00      	add	r7, sp, #0
 810330a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 810330c:	4b04      	ldr	r3, [pc, #16]	@ (8103320 <HAL_ETH_TxCpltCallback+0x1c>)
 810330e:	681b      	ldr	r3, [r3, #0]
 8103310:	4618      	mov	r0, r3
 8103312:	f001 f9fb 	bl	810470c <osSemaphoreRelease>
}
 8103316:	bf00      	nop
 8103318:	3708      	adds	r7, #8
 810331a:	46bd      	mov	sp, r7
 810331c:	bd80      	pop	{r7, pc}
 810331e:	bf00      	nop
 8103320:	100000ec 	.word	0x100000ec

08103324 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8103324:	b580      	push	{r7, lr}
 8103326:	b082      	sub	sp, #8
 8103328:	af00      	add	r7, sp, #0
 810332a:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 810332c:	6878      	ldr	r0, [r7, #4]
 810332e:	f000 fae5 	bl	81038fc <HAL_ETH_GetDMAError>
 8103332:	4603      	mov	r3, r0
 8103334:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8103338:	2b80      	cmp	r3, #128	@ 0x80
 810333a:	d104      	bne.n	8103346 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 810333c:	4b04      	ldr	r3, [pc, #16]	@ (8103350 <HAL_ETH_ErrorCallback+0x2c>)
 810333e:	681b      	ldr	r3, [r3, #0]
 8103340:	4618      	mov	r0, r3
 8103342:	f001 f9e3 	bl	810470c <osSemaphoreRelease>
  }
}
 8103346:	bf00      	nop
 8103348:	3708      	adds	r7, #8
 810334a:	46bd      	mov	sp, r7
 810334c:	bd80      	pop	{r7, pc}
 810334e:	bf00      	nop
 8103350:	100000e8 	.word	0x100000e8

08103354 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8103354:	f8df d034 	ldr.w	sp, [pc, #52]	@ 810338c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8103358:	f000 f826 	bl	81033a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 810335c:	480c      	ldr	r0, [pc, #48]	@ (8103390 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810335e:	490d      	ldr	r1, [pc, #52]	@ (8103394 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8103360:	4a0d      	ldr	r2, [pc, #52]	@ (8103398 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8103362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8103364:	e002      	b.n	810336c <LoopCopyDataInit>

08103366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8103366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8103368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810336a:	3304      	adds	r3, #4

0810336c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 810336c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810336e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8103370:	d3f9      	bcc.n	8103366 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8103372:	4a0a      	ldr	r2, [pc, #40]	@ (810339c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8103374:	4c0a      	ldr	r4, [pc, #40]	@ (81033a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8103376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8103378:	e001      	b.n	810337e <LoopFillZerobss>

0810337a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810337a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 810337c:	3204      	adds	r2, #4

0810337e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810337e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8103380:	d3fb      	bcc.n	810337a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8103382:	f004 fe1b 	bl	8107fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8103386:	f7fd f8bf 	bl	8100508 <main>
  bx  lr
 810338a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 810338c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8103390:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8103394:	10000064 	.word	0x10000064
  ldr r2, =_sidata
 8103398:	081081c0 	.word	0x081081c0
  ldr r2, =_sbss
 810339c:	10000064 	.word	0x10000064
  ldr r4, =_ebss
 81033a0:	10004cd8 	.word	0x10004cd8

081033a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81033a4:	e7fe      	b.n	81033a4 <ADC3_IRQHandler>
	...

081033a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81033a8:	b480      	push	{r7}
 81033aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81033ac:	4b0b      	ldr	r3, [pc, #44]	@ (81033dc <SystemInit+0x34>)
 81033ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81033b2:	4a0a      	ldr	r2, [pc, #40]	@ (81033dc <SystemInit+0x34>)
 81033b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81033b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81033bc:	4b07      	ldr	r3, [pc, #28]	@ (81033dc <SystemInit+0x34>)
 81033be:	691b      	ldr	r3, [r3, #16]
 81033c0:	4a06      	ldr	r2, [pc, #24]	@ (81033dc <SystemInit+0x34>)
 81033c2:	f043 0310 	orr.w	r3, r3, #16
 81033c6:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 81033c8:	4b04      	ldr	r3, [pc, #16]	@ (81033dc <SystemInit+0x34>)
 81033ca:	f04f 6201 	mov.w	r2, #135266304	@ 0x8100000
 81033ce:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 81033d0:	bf00      	nop
 81033d2:	46bd      	mov	sp, r7
 81033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033d8:	4770      	bx	lr
 81033da:	bf00      	nop
 81033dc:	e000ed00 	.word	0xe000ed00

081033e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81033e0:	b580      	push	{r7, lr}
 81033e2:	b082      	sub	sp, #8
 81033e4:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81033e6:	4b28      	ldr	r3, [pc, #160]	@ (8103488 <HAL_Init+0xa8>)
 81033e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81033ec:	4a26      	ldr	r2, [pc, #152]	@ (8103488 <HAL_Init+0xa8>)
 81033ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 81033f2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81033f6:	4b24      	ldr	r3, [pc, #144]	@ (8103488 <HAL_Init+0xa8>)
 81033f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81033fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8103400:	603b      	str	r3, [r7, #0]
 8103402:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8103404:	4b21      	ldr	r3, [pc, #132]	@ (810348c <HAL_Init+0xac>)
 8103406:	681b      	ldr	r3, [r3, #0]
 8103408:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 810340c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8103410:	4a1e      	ldr	r2, [pc, #120]	@ (810348c <HAL_Init+0xac>)
 8103412:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8103416:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8103418:	4b1c      	ldr	r3, [pc, #112]	@ (810348c <HAL_Init+0xac>)
 810341a:	681b      	ldr	r3, [r3, #0]
 810341c:	4a1b      	ldr	r2, [pc, #108]	@ (810348c <HAL_Init+0xac>)
 810341e:	f043 0301 	orr.w	r3, r3, #1
 8103422:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8103424:	2003      	movs	r0, #3
 8103426:	f000 f8fa 	bl	810361e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810342a:	f000 fb61 	bl	8103af0 <HAL_RCC_GetSysClockFreq>
 810342e:	4602      	mov	r2, r0
 8103430:	4b15      	ldr	r3, [pc, #84]	@ (8103488 <HAL_Init+0xa8>)
 8103432:	699b      	ldr	r3, [r3, #24]
 8103434:	0a1b      	lsrs	r3, r3, #8
 8103436:	f003 030f 	and.w	r3, r3, #15
 810343a:	4915      	ldr	r1, [pc, #84]	@ (8103490 <HAL_Init+0xb0>)
 810343c:	5ccb      	ldrb	r3, [r1, r3]
 810343e:	f003 031f 	and.w	r3, r3, #31
 8103442:	fa22 f303 	lsr.w	r3, r2, r3
 8103446:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103448:	4b0f      	ldr	r3, [pc, #60]	@ (8103488 <HAL_Init+0xa8>)
 810344a:	699b      	ldr	r3, [r3, #24]
 810344c:	f003 030f 	and.w	r3, r3, #15
 8103450:	4a0f      	ldr	r2, [pc, #60]	@ (8103490 <HAL_Init+0xb0>)
 8103452:	5cd3      	ldrb	r3, [r2, r3]
 8103454:	f003 031f 	and.w	r3, r3, #31
 8103458:	687a      	ldr	r2, [r7, #4]
 810345a:	fa22 f303 	lsr.w	r3, r2, r3
 810345e:	4a0d      	ldr	r2, [pc, #52]	@ (8103494 <HAL_Init+0xb4>)
 8103460:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8103462:	4b0c      	ldr	r3, [pc, #48]	@ (8103494 <HAL_Init+0xb4>)
 8103464:	681b      	ldr	r3, [r3, #0]
 8103466:	4a0c      	ldr	r2, [pc, #48]	@ (8103498 <HAL_Init+0xb8>)
 8103468:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810346a:	200f      	movs	r0, #15
 810346c:	f7fd f9ae 	bl	81007cc <HAL_InitTick>
 8103470:	4603      	mov	r3, r0
 8103472:	2b00      	cmp	r3, #0
 8103474:	d001      	beq.n	810347a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8103476:	2301      	movs	r3, #1
 8103478:	e002      	b.n	8103480 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810347a:	f7fd f981 	bl	8100780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810347e:	2300      	movs	r3, #0
}
 8103480:	4618      	mov	r0, r3
 8103482:	3708      	adds	r7, #8
 8103484:	46bd      	mov	sp, r7
 8103486:	bd80      	pop	{r7, pc}
 8103488:	58024400 	.word	0x58024400
 810348c:	40024400 	.word	0x40024400
 8103490:	081081a4 	.word	0x081081a4
 8103494:	10000004 	.word	0x10000004
 8103498:	10000000 	.word	0x10000000

0810349c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 810349c:	b480      	push	{r7}
 810349e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81034a0:	4b06      	ldr	r3, [pc, #24]	@ (81034bc <HAL_IncTick+0x20>)
 81034a2:	781b      	ldrb	r3, [r3, #0]
 81034a4:	461a      	mov	r2, r3
 81034a6:	4b06      	ldr	r3, [pc, #24]	@ (81034c0 <HAL_IncTick+0x24>)
 81034a8:	681b      	ldr	r3, [r3, #0]
 81034aa:	4413      	add	r3, r2
 81034ac:	4a04      	ldr	r2, [pc, #16]	@ (81034c0 <HAL_IncTick+0x24>)
 81034ae:	6013      	str	r3, [r2, #0]
}
 81034b0:	bf00      	nop
 81034b2:	46bd      	mov	sp, r7
 81034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034b8:	4770      	bx	lr
 81034ba:	bf00      	nop
 81034bc:	1000000c 	.word	0x1000000c
 81034c0:	100001a0 	.word	0x100001a0

081034c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81034c4:	b480      	push	{r7}
 81034c6:	b085      	sub	sp, #20
 81034c8:	af00      	add	r7, sp, #0
 81034ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81034cc:	687b      	ldr	r3, [r7, #4]
 81034ce:	f003 0307 	and.w	r3, r3, #7
 81034d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81034d4:	4b0c      	ldr	r3, [pc, #48]	@ (8103508 <__NVIC_SetPriorityGrouping+0x44>)
 81034d6:	68db      	ldr	r3, [r3, #12]
 81034d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81034da:	68ba      	ldr	r2, [r7, #8]
 81034dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 81034e0:	4013      	ands	r3, r2
 81034e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81034e4:	68fb      	ldr	r3, [r7, #12]
 81034e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81034e8:	68bb      	ldr	r3, [r7, #8]
 81034ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81034ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 81034f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81034f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81034f6:	4a04      	ldr	r2, [pc, #16]	@ (8103508 <__NVIC_SetPriorityGrouping+0x44>)
 81034f8:	68bb      	ldr	r3, [r7, #8]
 81034fa:	60d3      	str	r3, [r2, #12]
}
 81034fc:	bf00      	nop
 81034fe:	3714      	adds	r7, #20
 8103500:	46bd      	mov	sp, r7
 8103502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103506:	4770      	bx	lr
 8103508:	e000ed00 	.word	0xe000ed00

0810350c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 810350c:	b480      	push	{r7}
 810350e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8103510:	4b04      	ldr	r3, [pc, #16]	@ (8103524 <__NVIC_GetPriorityGrouping+0x18>)
 8103512:	68db      	ldr	r3, [r3, #12]
 8103514:	0a1b      	lsrs	r3, r3, #8
 8103516:	f003 0307 	and.w	r3, r3, #7
}
 810351a:	4618      	mov	r0, r3
 810351c:	46bd      	mov	sp, r7
 810351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103522:	4770      	bx	lr
 8103524:	e000ed00 	.word	0xe000ed00

08103528 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8103528:	b480      	push	{r7}
 810352a:	b083      	sub	sp, #12
 810352c:	af00      	add	r7, sp, #0
 810352e:	4603      	mov	r3, r0
 8103530:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103532:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103536:	2b00      	cmp	r3, #0
 8103538:	db0b      	blt.n	8103552 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810353a:	88fb      	ldrh	r3, [r7, #6]
 810353c:	f003 021f 	and.w	r2, r3, #31
 8103540:	4907      	ldr	r1, [pc, #28]	@ (8103560 <__NVIC_EnableIRQ+0x38>)
 8103542:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103546:	095b      	lsrs	r3, r3, #5
 8103548:	2001      	movs	r0, #1
 810354a:	fa00 f202 	lsl.w	r2, r0, r2
 810354e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8103552:	bf00      	nop
 8103554:	370c      	adds	r7, #12
 8103556:	46bd      	mov	sp, r7
 8103558:	f85d 7b04 	ldr.w	r7, [sp], #4
 810355c:	4770      	bx	lr
 810355e:	bf00      	nop
 8103560:	e000e100 	.word	0xe000e100

08103564 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8103564:	b480      	push	{r7}
 8103566:	b083      	sub	sp, #12
 8103568:	af00      	add	r7, sp, #0
 810356a:	4603      	mov	r3, r0
 810356c:	6039      	str	r1, [r7, #0]
 810356e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103570:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103574:	2b00      	cmp	r3, #0
 8103576:	db0a      	blt.n	810358e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103578:	683b      	ldr	r3, [r7, #0]
 810357a:	b2da      	uxtb	r2, r3
 810357c:	490c      	ldr	r1, [pc, #48]	@ (81035b0 <__NVIC_SetPriority+0x4c>)
 810357e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103582:	0112      	lsls	r2, r2, #4
 8103584:	b2d2      	uxtb	r2, r2
 8103586:	440b      	add	r3, r1
 8103588:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 810358c:	e00a      	b.n	81035a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810358e:	683b      	ldr	r3, [r7, #0]
 8103590:	b2da      	uxtb	r2, r3
 8103592:	4908      	ldr	r1, [pc, #32]	@ (81035b4 <__NVIC_SetPriority+0x50>)
 8103594:	88fb      	ldrh	r3, [r7, #6]
 8103596:	f003 030f 	and.w	r3, r3, #15
 810359a:	3b04      	subs	r3, #4
 810359c:	0112      	lsls	r2, r2, #4
 810359e:	b2d2      	uxtb	r2, r2
 81035a0:	440b      	add	r3, r1
 81035a2:	761a      	strb	r2, [r3, #24]
}
 81035a4:	bf00      	nop
 81035a6:	370c      	adds	r7, #12
 81035a8:	46bd      	mov	sp, r7
 81035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035ae:	4770      	bx	lr
 81035b0:	e000e100 	.word	0xe000e100
 81035b4:	e000ed00 	.word	0xe000ed00

081035b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81035b8:	b480      	push	{r7}
 81035ba:	b089      	sub	sp, #36	@ 0x24
 81035bc:	af00      	add	r7, sp, #0
 81035be:	60f8      	str	r0, [r7, #12]
 81035c0:	60b9      	str	r1, [r7, #8]
 81035c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81035c4:	68fb      	ldr	r3, [r7, #12]
 81035c6:	f003 0307 	and.w	r3, r3, #7
 81035ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81035cc:	69fb      	ldr	r3, [r7, #28]
 81035ce:	f1c3 0307 	rsb	r3, r3, #7
 81035d2:	2b04      	cmp	r3, #4
 81035d4:	bf28      	it	cs
 81035d6:	2304      	movcs	r3, #4
 81035d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81035da:	69fb      	ldr	r3, [r7, #28]
 81035dc:	3304      	adds	r3, #4
 81035de:	2b06      	cmp	r3, #6
 81035e0:	d902      	bls.n	81035e8 <NVIC_EncodePriority+0x30>
 81035e2:	69fb      	ldr	r3, [r7, #28]
 81035e4:	3b03      	subs	r3, #3
 81035e6:	e000      	b.n	81035ea <NVIC_EncodePriority+0x32>
 81035e8:	2300      	movs	r3, #0
 81035ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81035ec:	f04f 32ff 	mov.w	r2, #4294967295
 81035f0:	69bb      	ldr	r3, [r7, #24]
 81035f2:	fa02 f303 	lsl.w	r3, r2, r3
 81035f6:	43da      	mvns	r2, r3
 81035f8:	68bb      	ldr	r3, [r7, #8]
 81035fa:	401a      	ands	r2, r3
 81035fc:	697b      	ldr	r3, [r7, #20]
 81035fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8103600:	f04f 31ff 	mov.w	r1, #4294967295
 8103604:	697b      	ldr	r3, [r7, #20]
 8103606:	fa01 f303 	lsl.w	r3, r1, r3
 810360a:	43d9      	mvns	r1, r3
 810360c:	687b      	ldr	r3, [r7, #4]
 810360e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103610:	4313      	orrs	r3, r2
         );
}
 8103612:	4618      	mov	r0, r3
 8103614:	3724      	adds	r7, #36	@ 0x24
 8103616:	46bd      	mov	sp, r7
 8103618:	f85d 7b04 	ldr.w	r7, [sp], #4
 810361c:	4770      	bx	lr

0810361e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810361e:	b580      	push	{r7, lr}
 8103620:	b082      	sub	sp, #8
 8103622:	af00      	add	r7, sp, #0
 8103624:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8103626:	6878      	ldr	r0, [r7, #4]
 8103628:	f7ff ff4c 	bl	81034c4 <__NVIC_SetPriorityGrouping>
}
 810362c:	bf00      	nop
 810362e:	3708      	adds	r7, #8
 8103630:	46bd      	mov	sp, r7
 8103632:	bd80      	pop	{r7, pc}

08103634 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103634:	b580      	push	{r7, lr}
 8103636:	b086      	sub	sp, #24
 8103638:	af00      	add	r7, sp, #0
 810363a:	4603      	mov	r3, r0
 810363c:	60b9      	str	r1, [r7, #8]
 810363e:	607a      	str	r2, [r7, #4]
 8103640:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8103642:	f7ff ff63 	bl	810350c <__NVIC_GetPriorityGrouping>
 8103646:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8103648:	687a      	ldr	r2, [r7, #4]
 810364a:	68b9      	ldr	r1, [r7, #8]
 810364c:	6978      	ldr	r0, [r7, #20]
 810364e:	f7ff ffb3 	bl	81035b8 <NVIC_EncodePriority>
 8103652:	4602      	mov	r2, r0
 8103654:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8103658:	4611      	mov	r1, r2
 810365a:	4618      	mov	r0, r3
 810365c:	f7ff ff82 	bl	8103564 <__NVIC_SetPriority>
}
 8103660:	bf00      	nop
 8103662:	3718      	adds	r7, #24
 8103664:	46bd      	mov	sp, r7
 8103666:	bd80      	pop	{r7, pc}

08103668 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8103668:	b580      	push	{r7, lr}
 810366a:	b082      	sub	sp, #8
 810366c:	af00      	add	r7, sp, #0
 810366e:	4603      	mov	r3, r0
 8103670:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8103672:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103676:	4618      	mov	r0, r3
 8103678:	f7ff ff56 	bl	8103528 <__NVIC_EnableIRQ>
}
 810367c:	bf00      	nop
 810367e:	3708      	adds	r7, #8
 8103680:	46bd      	mov	sp, r7
 8103682:	bd80      	pop	{r7, pc}

08103684 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8103684:	b480      	push	{r7}
 8103686:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8103688:	4b07      	ldr	r3, [pc, #28]	@ (81036a8 <HAL_GetCurrentCPUID+0x24>)
 810368a:	681b      	ldr	r3, [r3, #0]
 810368c:	091b      	lsrs	r3, r3, #4
 810368e:	f003 030f 	and.w	r3, r3, #15
 8103692:	2b07      	cmp	r3, #7
 8103694:	d101      	bne.n	810369a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8103696:	2303      	movs	r3, #3
 8103698:	e000      	b.n	810369c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810369a:	2301      	movs	r3, #1
  }
}
 810369c:	4618      	mov	r0, r3
 810369e:	46bd      	mov	sp, r7
 81036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036a4:	4770      	bx	lr
 81036a6:	bf00      	nop
 81036a8:	e000ed00 	.word	0xe000ed00

081036ac <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 81036ac:	b580      	push	{r7, lr}
 81036ae:	b088      	sub	sp, #32
 81036b0:	af00      	add	r7, sp, #0
 81036b2:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 81036b4:	687b      	ldr	r3, [r7, #4]
 81036b6:	681b      	ldr	r3, [r3, #0]
 81036b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81036bc:	61fb      	str	r3, [r7, #28]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 81036be:	687b      	ldr	r3, [r7, #4]
 81036c0:	681b      	ldr	r3, [r3, #0]
 81036c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81036c6:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 81036ca:	61bb      	str	r3, [r7, #24]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 81036cc:	687b      	ldr	r3, [r7, #4]
 81036ce:	681b      	ldr	r3, [r3, #0]
 81036d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81036d4:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 81036d8:	617b      	str	r3, [r7, #20]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 81036da:	4b77      	ldr	r3, [pc, #476]	@ (81038b8 <HAL_ETH_IRQHandler+0x20c>)
 81036dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81036de:	613b      	str	r3, [r7, #16]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
 81036e0:	4b76      	ldr	r3, [pc, #472]	@ (81038bc <HAL_ETH_IRQHandler+0x210>)
 81036e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81036e4:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 81036e6:	69bb      	ldr	r3, [r7, #24]
 81036e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81036ec:	2b00      	cmp	r3, #0
 81036ee:	d010      	beq.n	8103712 <HAL_ETH_IRQHandler+0x66>
 81036f0:	697b      	ldr	r3, [r7, #20]
 81036f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81036f6:	2b00      	cmp	r3, #0
 81036f8:	d00b      	beq.n	8103712 <HAL_ETH_IRQHandler+0x66>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 81036fa:	687b      	ldr	r3, [r7, #4]
 81036fc:	681b      	ldr	r3, [r3, #0]
 81036fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8103702:	461a      	mov	r2, r3
 8103704:	f248 0340 	movw	r3, #32832	@ 0x8040
 8103708:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 810370c:	6878      	ldr	r0, [r7, #4]
 810370e:	f7ff fde9 	bl	81032e4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 8103712:	69bb      	ldr	r3, [r7, #24]
 8103714:	f003 0301 	and.w	r3, r3, #1
 8103718:	2b00      	cmp	r3, #0
 810371a:	d010      	beq.n	810373e <HAL_ETH_IRQHandler+0x92>
 810371c:	697b      	ldr	r3, [r7, #20]
 810371e:	f003 0301 	and.w	r3, r3, #1
 8103722:	2b00      	cmp	r3, #0
 8103724:	d00b      	beq.n	810373e <HAL_ETH_IRQHandler+0x92>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8103726:	687b      	ldr	r3, [r7, #4]
 8103728:	681b      	ldr	r3, [r3, #0]
 810372a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810372e:	461a      	mov	r2, r3
 8103730:	f248 0301 	movw	r3, #32769	@ 0x8001
 8103734:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8103738:	6878      	ldr	r0, [r7, #4]
 810373a:	f7ff fde3 	bl	8103304 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 810373e:	69bb      	ldr	r3, [r7, #24]
 8103740:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8103744:	2b00      	cmp	r3, #0
 8103746:	d047      	beq.n	81037d8 <HAL_ETH_IRQHandler+0x12c>
 8103748:	697b      	ldr	r3, [r7, #20]
 810374a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810374e:	2b00      	cmp	r3, #0
 8103750:	d042      	beq.n	81037d8 <HAL_ETH_IRQHandler+0x12c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8103752:	687b      	ldr	r3, [r7, #4]
 8103754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8103758:	f043 0208 	orr.w	r2, r3, #8
 810375c:	687b      	ldr	r3, [r7, #4]
 810375e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 8103762:	69bb      	ldr	r3, [r7, #24]
 8103764:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8103768:	2b00      	cmp	r3, #0
 810376a:	d01e      	beq.n	81037aa <HAL_ETH_IRQHandler+0xfe>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 810376c:	687b      	ldr	r3, [r7, #4]
 810376e:	681b      	ldr	r3, [r3, #0]
 8103770:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8103774:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8103778:	f241 1302 	movw	r3, #4354	@ 0x1102
 810377c:	4013      	ands	r3, r2
 810377e:	687a      	ldr	r2, [r7, #4]
 8103780:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8103784:	687b      	ldr	r3, [r7, #4]
 8103786:	681b      	ldr	r3, [r3, #0]
 8103788:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810378c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8103790:	687a      	ldr	r2, [r7, #4]
 8103792:	6812      	ldr	r2, [r2, #0]
 8103794:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8103798:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810379c:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 81037a0:	687b      	ldr	r3, [r7, #4]
 81037a2:	22e0      	movs	r2, #224	@ 0xe0
 81037a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 81037a8:	e013      	b.n	81037d2 <HAL_ETH_IRQHandler+0x126>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 81037aa:	687b      	ldr	r3, [r7, #4]
 81037ac:	681b      	ldr	r3, [r3, #0]
 81037ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81037b2:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 81037b6:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 81037ba:	687b      	ldr	r3, [r7, #4]
 81037bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 81037c0:	687b      	ldr	r3, [r7, #4]
 81037c2:	681b      	ldr	r3, [r3, #0]
 81037c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81037c8:	461a      	mov	r2, r3
 81037ca:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 81037ce:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 81037d2:	6878      	ldr	r0, [r7, #4]
 81037d4:	f7ff fda6 	bl	8103324 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 81037d8:	69fb      	ldr	r3, [r7, #28]
 81037da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81037de:	2b00      	cmp	r3, #0
 81037e0:	d104      	bne.n	81037ec <HAL_ETH_IRQHandler+0x140>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 81037e2:	69fb      	ldr	r3, [r7, #28]
 81037e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 81037e8:	2b00      	cmp	r3, #0
 81037ea:	d019      	beq.n	8103820 <HAL_ETH_IRQHandler+0x174>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 81037ec:	687b      	ldr	r3, [r7, #4]
 81037ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81037f2:	f043 0210 	orr.w	r2, r3, #16
 81037f6:	687b      	ldr	r3, [r7, #4]
 81037f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 81037fc:	687b      	ldr	r3, [r7, #4]
 81037fe:	681b      	ldr	r3, [r3, #0]
 8103800:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8103804:	687b      	ldr	r3, [r7, #4]
 8103806:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 810380a:	687b      	ldr	r3, [r7, #4]
 810380c:	22e0      	movs	r2, #224	@ 0xe0
 810380e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8103812:	6878      	ldr	r0, [r7, #4]
 8103814:	f7ff fd86 	bl	8103324 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 8103818:	687b      	ldr	r3, [r7, #4]
 810381a:	2200      	movs	r2, #0
 810381c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8103820:	69fb      	ldr	r3, [r7, #28]
 8103822:	f003 0310 	and.w	r3, r3, #16
 8103826:	2b00      	cmp	r3, #0
 8103828:	d00f      	beq.n	810384a <HAL_ETH_IRQHandler+0x19e>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 810382a:	687b      	ldr	r3, [r7, #4]
 810382c:	681b      	ldr	r3, [r3, #0]
 810382e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8103832:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8103836:	687b      	ldr	r3, [r7, #4]
 8103838:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 810383c:	6878      	ldr	r0, [r7, #4]
 810383e:	f000 f83f 	bl	81038c0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8103842:	687b      	ldr	r3, [r7, #4]
 8103844:	2200      	movs	r2, #0
 8103846:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 810384a:	69fb      	ldr	r3, [r7, #28]
 810384c:	f003 0320 	and.w	r3, r3, #32
 8103850:	2b00      	cmp	r3, #0
 8103852:	d00f      	beq.n	8103874 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 8103854:	687b      	ldr	r3, [r7, #4]
 8103856:	681b      	ldr	r3, [r3, #0]
 8103858:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 810385c:	f003 020f 	and.w	r2, r3, #15
 8103860:	687b      	ldr	r3, [r7, #4]
 8103862:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8103866:	6878      	ldr	r0, [r7, #4]
 8103868:	f000 f834 	bl	81038d4 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 810386c:	687b      	ldr	r3, [r7, #4]
 810386e:	2200      	movs	r2, #0
 8103870:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8103874:	f7ff ff06 	bl	8103684 <HAL_GetCurrentCPUID>
 8103878:	4603      	mov	r3, r0
 810387a:	2b03      	cmp	r3, #3
 810387c:	d10c      	bne.n	8103898 <HAL_ETH_IRQHandler+0x1ec>
  {
    /* check ETH WAKEUP exti flag */
    if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 810387e:	693b      	ldr	r3, [r7, #16]
 8103880:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8103884:	2b00      	cmp	r3, #0
 8103886:	d013      	beq.n	81038b0 <HAL_ETH_IRQHandler+0x204>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8103888:	4b0b      	ldr	r3, [pc, #44]	@ (81038b8 <HAL_ETH_IRQHandler+0x20c>)
 810388a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 810388e:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8103890:	6878      	ldr	r0, [r7, #4]
 8103892:	f000 f829 	bl	81038e8 <HAL_ETH_WakeUpCallback>
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 8103896:	e00b      	b.n	81038b0 <HAL_ETH_IRQHandler+0x204>
    if ((exti_d2_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8103898:	68fb      	ldr	r3, [r7, #12]
 810389a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810389e:	2b00      	cmp	r3, #0
 81038a0:	d006      	beq.n	81038b0 <HAL_ETH_IRQHandler+0x204>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 81038a2:	4b06      	ldr	r3, [pc, #24]	@ (81038bc <HAL_ETH_IRQHandler+0x210>)
 81038a4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 81038a8:	629a      	str	r2, [r3, #40]	@ 0x28
      HAL_ETH_WakeUpCallback(heth);
 81038aa:	6878      	ldr	r0, [r7, #4]
 81038ac:	f000 f81c 	bl	81038e8 <HAL_ETH_WakeUpCallback>
}
 81038b0:	bf00      	nop
 81038b2:	3720      	adds	r7, #32
 81038b4:	46bd      	mov	sp, r7
 81038b6:	bd80      	pop	{r7, pc}
 81038b8:	58000080 	.word	0x58000080
 81038bc:	580000c0 	.word	0x580000c0

081038c0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 81038c0:	b480      	push	{r7}
 81038c2:	b083      	sub	sp, #12
 81038c4:	af00      	add	r7, sp, #0
 81038c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 81038c8:	bf00      	nop
 81038ca:	370c      	adds	r7, #12
 81038cc:	46bd      	mov	sp, r7
 81038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038d2:	4770      	bx	lr

081038d4 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 81038d4:	b480      	push	{r7}
 81038d6:	b083      	sub	sp, #12
 81038d8:	af00      	add	r7, sp, #0
 81038da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 81038dc:	bf00      	nop
 81038de:	370c      	adds	r7, #12
 81038e0:	46bd      	mov	sp, r7
 81038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038e6:	4770      	bx	lr

081038e8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 81038e8:	b480      	push	{r7}
 81038ea:	b083      	sub	sp, #12
 81038ec:	af00      	add	r7, sp, #0
 81038ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 81038f0:	bf00      	nop
 81038f2:	370c      	adds	r7, #12
 81038f4:	46bd      	mov	sp, r7
 81038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038fa:	4770      	bx	lr

081038fc <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 81038fc:	b480      	push	{r7}
 81038fe:	b083      	sub	sp, #12
 8103900:	af00      	add	r7, sp, #0
 8103902:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8103904:	687b      	ldr	r3, [r7, #4]
 8103906:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 810390a:	4618      	mov	r0, r3
 810390c:	370c      	adds	r7, #12
 810390e:	46bd      	mov	sp, r7
 8103910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103914:	4770      	bx	lr
	...

08103918 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 8103918:	b480      	push	{r7}
 810391a:	b083      	sub	sp, #12
 810391c:	af00      	add	r7, sp, #0
 810391e:	6078      	str	r0, [r7, #4]
 8103920:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 8103922:	490e      	ldr	r1, [pc, #56]	@ (810395c <HAL_HSEM_Take+0x44>)
 8103924:	683b      	ldr	r3, [r7, #0]
 8103926:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 810392a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810392e:	687a      	ldr	r2, [r7, #4]
 8103930:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 8103934:	4a09      	ldr	r2, [pc, #36]	@ (810395c <HAL_HSEM_Take+0x44>)
 8103936:	687b      	ldr	r3, [r7, #4]
 8103938:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 810393c:	683b      	ldr	r3, [r7, #0]
 810393e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8103942:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8103946:	429a      	cmp	r2, r3
 8103948:	d101      	bne.n	810394e <HAL_HSEM_Take+0x36>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 810394a:	2300      	movs	r3, #0
 810394c:	e000      	b.n	8103950 <HAL_HSEM_Take+0x38>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 810394e:	2301      	movs	r3, #1
}
 8103950:	4618      	mov	r0, r3
 8103952:	370c      	adds	r7, #12
 8103954:	46bd      	mov	sp, r7
 8103956:	f85d 7b04 	ldr.w	r7, [sp], #4
 810395a:	4770      	bx	lr
 810395c:	58026400 	.word	0x58026400

08103960 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8103960:	b480      	push	{r7}
 8103962:	b083      	sub	sp, #12
 8103964:	af00      	add	r7, sp, #0
 8103966:	6078      	str	r0, [r7, #4]
 8103968:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 810396a:	4906      	ldr	r1, [pc, #24]	@ (8103984 <HAL_HSEM_Release+0x24>)
 810396c:	683b      	ldr	r3, [r7, #0]
 810396e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8103972:	687b      	ldr	r3, [r7, #4]
 8103974:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8103978:	bf00      	nop
 810397a:	370c      	adds	r7, #12
 810397c:	46bd      	mov	sp, r7
 810397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103982:	4770      	bx	lr
 8103984:	58026400 	.word	0x58026400

08103988 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8103988:	b480      	push	{r7}
 810398a:	b083      	sub	sp, #12
 810398c:	af00      	add	r7, sp, #0
 810398e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8103990:	4b05      	ldr	r3, [pc, #20]	@ (81039a8 <HAL_HSEM_ActivateNotification+0x20>)
 8103992:	681a      	ldr	r2, [r3, #0]
 8103994:	4904      	ldr	r1, [pc, #16]	@ (81039a8 <HAL_HSEM_ActivateNotification+0x20>)
 8103996:	687b      	ldr	r3, [r7, #4]
 8103998:	4313      	orrs	r3, r2
 810399a:	600b      	str	r3, [r1, #0]
#endif
}
 810399c:	bf00      	nop
 810399e:	370c      	adds	r7, #12
 81039a0:	46bd      	mov	sp, r7
 81039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81039a6:	4770      	bx	lr
 81039a8:	58026510 	.word	0x58026510

081039ac <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 81039ac:	b580      	push	{r7, lr}
 81039ae:	b082      	sub	sp, #8
 81039b0:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 81039b2:	4b0a      	ldr	r3, [pc, #40]	@ (81039dc <HAL_HSEM_IRQHandler+0x30>)
 81039b4:	68db      	ldr	r3, [r3, #12]
 81039b6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 81039b8:	4b08      	ldr	r3, [pc, #32]	@ (81039dc <HAL_HSEM_IRQHandler+0x30>)
 81039ba:	681a      	ldr	r2, [r3, #0]
 81039bc:	687b      	ldr	r3, [r7, #4]
 81039be:	43db      	mvns	r3, r3
 81039c0:	4906      	ldr	r1, [pc, #24]	@ (81039dc <HAL_HSEM_IRQHandler+0x30>)
 81039c2:	4013      	ands	r3, r2
 81039c4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 81039c6:	4a05      	ldr	r2, [pc, #20]	@ (81039dc <HAL_HSEM_IRQHandler+0x30>)
 81039c8:	687b      	ldr	r3, [r7, #4]
 81039ca:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 81039cc:	6878      	ldr	r0, [r7, #4]
 81039ce:	f7fc fc87 	bl	81002e0 <HAL_HSEM_FreeCallback>
}
 81039d2:	bf00      	nop
 81039d4:	3708      	adds	r7, #8
 81039d6:	46bd      	mov	sp, r7
 81039d8:	bd80      	pop	{r7, pc}
 81039da:	bf00      	nop
 81039dc:	58026510 	.word	0x58026510

081039e0 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81039e0:	b580      	push	{r7, lr}
 81039e2:	b084      	sub	sp, #16
 81039e4:	af00      	add	r7, sp, #0
 81039e6:	60f8      	str	r0, [r7, #12]
 81039e8:	460b      	mov	r3, r1
 81039ea:	607a      	str	r2, [r7, #4]
 81039ec:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81039ee:	4b37      	ldr	r3, [pc, #220]	@ (8103acc <HAL_PWREx_EnterSTOPMode+0xec>)
 81039f0:	681b      	ldr	r3, [r3, #0]
 81039f2:	f023 0201 	bic.w	r2, r3, #1
 81039f6:	4935      	ldr	r1, [pc, #212]	@ (8103acc <HAL_PWREx_EnterSTOPMode+0xec>)
 81039f8:	68fb      	ldr	r3, [r7, #12]
 81039fa:	4313      	orrs	r3, r2
 81039fc:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81039fe:	687b      	ldr	r3, [r7, #4]
 8103a00:	2b00      	cmp	r3, #0
 8103a02:	d123      	bne.n	8103a4c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8103a04:	f7ff fe3e 	bl	8103684 <HAL_GetCurrentCPUID>
 8103a08:	4603      	mov	r3, r0
 8103a0a:	2b03      	cmp	r3, #3
 8103a0c:	d158      	bne.n	8103ac0 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8103a0e:	4b2f      	ldr	r3, [pc, #188]	@ (8103acc <HAL_PWREx_EnterSTOPMode+0xec>)
 8103a10:	691b      	ldr	r3, [r3, #16]
 8103a12:	4a2e      	ldr	r2, [pc, #184]	@ (8103acc <HAL_PWREx_EnterSTOPMode+0xec>)
 8103a14:	f023 0301 	bic.w	r3, r3, #1
 8103a18:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103a1a:	4b2d      	ldr	r3, [pc, #180]	@ (8103ad0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103a1c:	691b      	ldr	r3, [r3, #16]
 8103a1e:	4a2c      	ldr	r2, [pc, #176]	@ (8103ad0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103a20:	f043 0304 	orr.w	r3, r3, #4
 8103a24:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8103a26:	f3bf 8f4f 	dsb	sy
}
 8103a2a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103a2c:	f3bf 8f6f 	isb	sy
}
 8103a30:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103a32:	7afb      	ldrb	r3, [r7, #11]
 8103a34:	2b01      	cmp	r3, #1
 8103a36:	d101      	bne.n	8103a3c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103a38:	bf30      	wfi
 8103a3a:	e000      	b.n	8103a3e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103a3c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103a3e:	4b24      	ldr	r3, [pc, #144]	@ (8103ad0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103a40:	691b      	ldr	r3, [r3, #16]
 8103a42:	4a23      	ldr	r2, [pc, #140]	@ (8103ad0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103a44:	f023 0304 	bic.w	r3, r3, #4
 8103a48:	6113      	str	r3, [r2, #16]
 8103a4a:	e03c      	b.n	8103ac6 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8103a4c:	687b      	ldr	r3, [r7, #4]
 8103a4e:	2b01      	cmp	r3, #1
 8103a50:	d123      	bne.n	8103a9a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8103a52:	f7ff fe17 	bl	8103684 <HAL_GetCurrentCPUID>
 8103a56:	4603      	mov	r3, r0
 8103a58:	2b01      	cmp	r3, #1
 8103a5a:	d133      	bne.n	8103ac4 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8103a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8103acc <HAL_PWREx_EnterSTOPMode+0xec>)
 8103a5e:	695b      	ldr	r3, [r3, #20]
 8103a60:	4a1a      	ldr	r2, [pc, #104]	@ (8103acc <HAL_PWREx_EnterSTOPMode+0xec>)
 8103a62:	f023 0302 	bic.w	r3, r3, #2
 8103a66:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103a68:	4b19      	ldr	r3, [pc, #100]	@ (8103ad0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103a6a:	691b      	ldr	r3, [r3, #16]
 8103a6c:	4a18      	ldr	r2, [pc, #96]	@ (8103ad0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103a6e:	f043 0304 	orr.w	r3, r3, #4
 8103a72:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8103a74:	f3bf 8f4f 	dsb	sy
}
 8103a78:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103a7a:	f3bf 8f6f 	isb	sy
}
 8103a7e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103a80:	7afb      	ldrb	r3, [r7, #11]
 8103a82:	2b01      	cmp	r3, #1
 8103a84:	d101      	bne.n	8103a8a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103a86:	bf30      	wfi
 8103a88:	e000      	b.n	8103a8c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103a8a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103a8c:	4b10      	ldr	r3, [pc, #64]	@ (8103ad0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103a8e:	691b      	ldr	r3, [r3, #16]
 8103a90:	4a0f      	ldr	r2, [pc, #60]	@ (8103ad0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103a92:	f023 0304 	bic.w	r3, r3, #4
 8103a96:	6113      	str	r3, [r2, #16]
 8103a98:	e015      	b.n	8103ac6 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103a9a:	f7ff fdf3 	bl	8103684 <HAL_GetCurrentCPUID>
 8103a9e:	4603      	mov	r3, r0
 8103aa0:	2b03      	cmp	r3, #3
 8103aa2:	d106      	bne.n	8103ab2 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8103aa4:	4b09      	ldr	r3, [pc, #36]	@ (8103acc <HAL_PWREx_EnterSTOPMode+0xec>)
 8103aa6:	691b      	ldr	r3, [r3, #16]
 8103aa8:	4a08      	ldr	r2, [pc, #32]	@ (8103acc <HAL_PWREx_EnterSTOPMode+0xec>)
 8103aaa:	f023 0304 	bic.w	r3, r3, #4
 8103aae:	6113      	str	r3, [r2, #16]
 8103ab0:	e009      	b.n	8103ac6 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8103ab2:	4b06      	ldr	r3, [pc, #24]	@ (8103acc <HAL_PWREx_EnterSTOPMode+0xec>)
 8103ab4:	695b      	ldr	r3, [r3, #20]
 8103ab6:	4a05      	ldr	r2, [pc, #20]	@ (8103acc <HAL_PWREx_EnterSTOPMode+0xec>)
 8103ab8:	f023 0304 	bic.w	r3, r3, #4
 8103abc:	6153      	str	r3, [r2, #20]
 8103abe:	e002      	b.n	8103ac6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103ac0:	bf00      	nop
 8103ac2:	e000      	b.n	8103ac6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103ac4:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8103ac6:	3710      	adds	r7, #16
 8103ac8:	46bd      	mov	sp, r7
 8103aca:	bd80      	pop	{r7, pc}
 8103acc:	58024800 	.word	0x58024800
 8103ad0:	e000ed00 	.word	0xe000ed00

08103ad4 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8103ad4:	b580      	push	{r7, lr}
 8103ad6:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103ad8:	f7ff fdd4 	bl	8103684 <HAL_GetCurrentCPUID>
 8103adc:	4603      	mov	r3, r0
 8103ade:	2b03      	cmp	r3, #3
 8103ae0:	d101      	bne.n	8103ae6 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8103ae2:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8103ae4:	e001      	b.n	8103aea <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8103ae6:	bf40      	sev
    __WFE ();
 8103ae8:	bf20      	wfe
}
 8103aea:	bf00      	nop
 8103aec:	bd80      	pop	{r7, pc}
	...

08103af0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8103af0:	b480      	push	{r7}
 8103af2:	b089      	sub	sp, #36	@ 0x24
 8103af4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8103af6:	4bb3      	ldr	r3, [pc, #716]	@ (8103dc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103af8:	691b      	ldr	r3, [r3, #16]
 8103afa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8103afe:	2b18      	cmp	r3, #24
 8103b00:	f200 8155 	bhi.w	8103dae <HAL_RCC_GetSysClockFreq+0x2be>
 8103b04:	a201      	add	r2, pc, #4	@ (adr r2, 8103b0c <HAL_RCC_GetSysClockFreq+0x1c>)
 8103b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103b0a:	bf00      	nop
 8103b0c:	08103b71 	.word	0x08103b71
 8103b10:	08103daf 	.word	0x08103daf
 8103b14:	08103daf 	.word	0x08103daf
 8103b18:	08103daf 	.word	0x08103daf
 8103b1c:	08103daf 	.word	0x08103daf
 8103b20:	08103daf 	.word	0x08103daf
 8103b24:	08103daf 	.word	0x08103daf
 8103b28:	08103daf 	.word	0x08103daf
 8103b2c:	08103b97 	.word	0x08103b97
 8103b30:	08103daf 	.word	0x08103daf
 8103b34:	08103daf 	.word	0x08103daf
 8103b38:	08103daf 	.word	0x08103daf
 8103b3c:	08103daf 	.word	0x08103daf
 8103b40:	08103daf 	.word	0x08103daf
 8103b44:	08103daf 	.word	0x08103daf
 8103b48:	08103daf 	.word	0x08103daf
 8103b4c:	08103b9d 	.word	0x08103b9d
 8103b50:	08103daf 	.word	0x08103daf
 8103b54:	08103daf 	.word	0x08103daf
 8103b58:	08103daf 	.word	0x08103daf
 8103b5c:	08103daf 	.word	0x08103daf
 8103b60:	08103daf 	.word	0x08103daf
 8103b64:	08103daf 	.word	0x08103daf
 8103b68:	08103daf 	.word	0x08103daf
 8103b6c:	08103ba3 	.word	0x08103ba3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103b70:	4b94      	ldr	r3, [pc, #592]	@ (8103dc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103b72:	681b      	ldr	r3, [r3, #0]
 8103b74:	f003 0320 	and.w	r3, r3, #32
 8103b78:	2b00      	cmp	r3, #0
 8103b7a:	d009      	beq.n	8103b90 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8103b7c:	4b91      	ldr	r3, [pc, #580]	@ (8103dc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103b7e:	681b      	ldr	r3, [r3, #0]
 8103b80:	08db      	lsrs	r3, r3, #3
 8103b82:	f003 0303 	and.w	r3, r3, #3
 8103b86:	4a90      	ldr	r2, [pc, #576]	@ (8103dc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103b88:	fa22 f303 	lsr.w	r3, r2, r3
 8103b8c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8103b8e:	e111      	b.n	8103db4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8103b90:	4b8d      	ldr	r3, [pc, #564]	@ (8103dc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103b92:	61bb      	str	r3, [r7, #24]
      break;
 8103b94:	e10e      	b.n	8103db4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8103b96:	4b8d      	ldr	r3, [pc, #564]	@ (8103dcc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103b98:	61bb      	str	r3, [r7, #24]
      break;
 8103b9a:	e10b      	b.n	8103db4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8103b9c:	4b8c      	ldr	r3, [pc, #560]	@ (8103dd0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8103b9e:	61bb      	str	r3, [r7, #24]
      break;
 8103ba0:	e108      	b.n	8103db4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103ba2:	4b88      	ldr	r3, [pc, #544]	@ (8103dc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103ba6:	f003 0303 	and.w	r3, r3, #3
 8103baa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8103bac:	4b85      	ldr	r3, [pc, #532]	@ (8103dc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103bb0:	091b      	lsrs	r3, r3, #4
 8103bb2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8103bb6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8103bb8:	4b82      	ldr	r3, [pc, #520]	@ (8103dc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103bbc:	f003 0301 	and.w	r3, r3, #1
 8103bc0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8103bc2:	4b80      	ldr	r3, [pc, #512]	@ (8103dc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103bc6:	08db      	lsrs	r3, r3, #3
 8103bc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103bcc:	68fa      	ldr	r2, [r7, #12]
 8103bce:	fb02 f303 	mul.w	r3, r2, r3
 8103bd2:	ee07 3a90 	vmov	s15, r3
 8103bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103bda:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8103bde:	693b      	ldr	r3, [r7, #16]
 8103be0:	2b00      	cmp	r3, #0
 8103be2:	f000 80e1 	beq.w	8103da8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8103be6:	697b      	ldr	r3, [r7, #20]
 8103be8:	2b02      	cmp	r3, #2
 8103bea:	f000 8083 	beq.w	8103cf4 <HAL_RCC_GetSysClockFreq+0x204>
 8103bee:	697b      	ldr	r3, [r7, #20]
 8103bf0:	2b02      	cmp	r3, #2
 8103bf2:	f200 80a1 	bhi.w	8103d38 <HAL_RCC_GetSysClockFreq+0x248>
 8103bf6:	697b      	ldr	r3, [r7, #20]
 8103bf8:	2b00      	cmp	r3, #0
 8103bfa:	d003      	beq.n	8103c04 <HAL_RCC_GetSysClockFreq+0x114>
 8103bfc:	697b      	ldr	r3, [r7, #20]
 8103bfe:	2b01      	cmp	r3, #1
 8103c00:	d056      	beq.n	8103cb0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8103c02:	e099      	b.n	8103d38 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103c04:	4b6f      	ldr	r3, [pc, #444]	@ (8103dc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103c06:	681b      	ldr	r3, [r3, #0]
 8103c08:	f003 0320 	and.w	r3, r3, #32
 8103c0c:	2b00      	cmp	r3, #0
 8103c0e:	d02d      	beq.n	8103c6c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8103c10:	4b6c      	ldr	r3, [pc, #432]	@ (8103dc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103c12:	681b      	ldr	r3, [r3, #0]
 8103c14:	08db      	lsrs	r3, r3, #3
 8103c16:	f003 0303 	and.w	r3, r3, #3
 8103c1a:	4a6b      	ldr	r2, [pc, #428]	@ (8103dc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8103c20:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103c22:	687b      	ldr	r3, [r7, #4]
 8103c24:	ee07 3a90 	vmov	s15, r3
 8103c28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103c2c:	693b      	ldr	r3, [r7, #16]
 8103c2e:	ee07 3a90 	vmov	s15, r3
 8103c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103c3a:	4b62      	ldr	r3, [pc, #392]	@ (8103dc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103c42:	ee07 3a90 	vmov	s15, r3
 8103c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103c4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8103c4e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8103dd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103c5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103c66:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8103c6a:	e087      	b.n	8103d7c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103c6c:	693b      	ldr	r3, [r7, #16]
 8103c6e:	ee07 3a90 	vmov	s15, r3
 8103c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103c76:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8103dd8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8103c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103c7e:	4b51      	ldr	r3, [pc, #324]	@ (8103dc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103c86:	ee07 3a90 	vmov	s15, r3
 8103c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103c8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8103c92:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8103dd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103c9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103caa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8103cae:	e065      	b.n	8103d7c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103cb0:	693b      	ldr	r3, [r7, #16]
 8103cb2:	ee07 3a90 	vmov	s15, r3
 8103cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103cba:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8103ddc <HAL_RCC_GetSysClockFreq+0x2ec>
 8103cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103cc2:	4b40      	ldr	r3, [pc, #256]	@ (8103dc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103cca:	ee07 3a90 	vmov	s15, r3
 8103cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103cd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8103cd6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8103dd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103ce2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103cee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8103cf2:	e043      	b.n	8103d7c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103cf4:	693b      	ldr	r3, [r7, #16]
 8103cf6:	ee07 3a90 	vmov	s15, r3
 8103cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103cfe:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8103de0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8103d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103d06:	4b2f      	ldr	r3, [pc, #188]	@ (8103dc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103d0e:	ee07 3a90 	vmov	s15, r3
 8103d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103d16:	ed97 6a02 	vldr	s12, [r7, #8]
 8103d1a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8103dd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103d26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103d32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8103d36:	e021      	b.n	8103d7c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103d38:	693b      	ldr	r3, [r7, #16]
 8103d3a:	ee07 3a90 	vmov	s15, r3
 8103d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103d42:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8103ddc <HAL_RCC_GetSysClockFreq+0x2ec>
 8103d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103d4a:	4b1e      	ldr	r3, [pc, #120]	@ (8103dc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103d52:	ee07 3a90 	vmov	s15, r3
 8103d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103d5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8103d5e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8103dd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103d6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103d76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8103d7a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8103d7c:	4b11      	ldr	r3, [pc, #68]	@ (8103dc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103d80:	0a5b      	lsrs	r3, r3, #9
 8103d82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8103d86:	3301      	adds	r3, #1
 8103d88:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8103d8a:	683b      	ldr	r3, [r7, #0]
 8103d8c:	ee07 3a90 	vmov	s15, r3
 8103d90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8103d94:	edd7 6a07 	vldr	s13, [r7, #28]
 8103d98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103d9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103da0:	ee17 3a90 	vmov	r3, s15
 8103da4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8103da6:	e005      	b.n	8103db4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8103da8:	2300      	movs	r3, #0
 8103daa:	61bb      	str	r3, [r7, #24]
      break;
 8103dac:	e002      	b.n	8103db4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8103dae:	4b07      	ldr	r3, [pc, #28]	@ (8103dcc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103db0:	61bb      	str	r3, [r7, #24]
      break;
 8103db2:	bf00      	nop
  }

  return sysclockfreq;
 8103db4:	69bb      	ldr	r3, [r7, #24]
}
 8103db6:	4618      	mov	r0, r3
 8103db8:	3724      	adds	r7, #36	@ 0x24
 8103dba:	46bd      	mov	sp, r7
 8103dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103dc0:	4770      	bx	lr
 8103dc2:	bf00      	nop
 8103dc4:	58024400 	.word	0x58024400
 8103dc8:	03d09000 	.word	0x03d09000
 8103dcc:	003d0900 	.word	0x003d0900
 8103dd0:	017d7840 	.word	0x017d7840
 8103dd4:	46000000 	.word	0x46000000
 8103dd8:	4c742400 	.word	0x4c742400
 8103ddc:	4a742400 	.word	0x4a742400
 8103de0:	4bbebc20 	.word	0x4bbebc20

08103de4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8103de4:	b580      	push	{r7, lr}
 8103de6:	b082      	sub	sp, #8
 8103de8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8103dea:	f7ff fe81 	bl	8103af0 <HAL_RCC_GetSysClockFreq>
 8103dee:	4602      	mov	r2, r0
 8103df0:	4b11      	ldr	r3, [pc, #68]	@ (8103e38 <HAL_RCC_GetHCLKFreq+0x54>)
 8103df2:	699b      	ldr	r3, [r3, #24]
 8103df4:	0a1b      	lsrs	r3, r3, #8
 8103df6:	f003 030f 	and.w	r3, r3, #15
 8103dfa:	4910      	ldr	r1, [pc, #64]	@ (8103e3c <HAL_RCC_GetHCLKFreq+0x58>)
 8103dfc:	5ccb      	ldrb	r3, [r1, r3]
 8103dfe:	f003 031f 	and.w	r3, r3, #31
 8103e02:	fa22 f303 	lsr.w	r3, r2, r3
 8103e06:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103e08:	4b0b      	ldr	r3, [pc, #44]	@ (8103e38 <HAL_RCC_GetHCLKFreq+0x54>)
 8103e0a:	699b      	ldr	r3, [r3, #24]
 8103e0c:	f003 030f 	and.w	r3, r3, #15
 8103e10:	4a0a      	ldr	r2, [pc, #40]	@ (8103e3c <HAL_RCC_GetHCLKFreq+0x58>)
 8103e12:	5cd3      	ldrb	r3, [r2, r3]
 8103e14:	f003 031f 	and.w	r3, r3, #31
 8103e18:	687a      	ldr	r2, [r7, #4]
 8103e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8103e1e:	4a08      	ldr	r2, [pc, #32]	@ (8103e40 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103e20:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8103e22:	4b07      	ldr	r3, [pc, #28]	@ (8103e40 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103e24:	681b      	ldr	r3, [r3, #0]
 8103e26:	4a07      	ldr	r2, [pc, #28]	@ (8103e44 <HAL_RCC_GetHCLKFreq+0x60>)
 8103e28:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8103e2a:	4b05      	ldr	r3, [pc, #20]	@ (8103e40 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103e2c:	681b      	ldr	r3, [r3, #0]
}
 8103e2e:	4618      	mov	r0, r3
 8103e30:	3708      	adds	r7, #8
 8103e32:	46bd      	mov	sp, r7
 8103e34:	bd80      	pop	{r7, pc}
 8103e36:	bf00      	nop
 8103e38:	58024400 	.word	0x58024400
 8103e3c:	081081a4 	.word	0x081081a4
 8103e40:	10000004 	.word	0x10000004
 8103e44:	10000000 	.word	0x10000000

08103e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8103e48:	b580      	push	{r7, lr}
 8103e4a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8103e4c:	f7ff ffca 	bl	8103de4 <HAL_RCC_GetHCLKFreq>
 8103e50:	4602      	mov	r2, r0
 8103e52:	4b06      	ldr	r3, [pc, #24]	@ (8103e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8103e54:	69db      	ldr	r3, [r3, #28]
 8103e56:	091b      	lsrs	r3, r3, #4
 8103e58:	f003 0307 	and.w	r3, r3, #7
 8103e5c:	4904      	ldr	r1, [pc, #16]	@ (8103e70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8103e5e:	5ccb      	ldrb	r3, [r1, r3]
 8103e60:	f003 031f 	and.w	r3, r3, #31
 8103e64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8103e68:	4618      	mov	r0, r3
 8103e6a:	bd80      	pop	{r7, pc}
 8103e6c:	58024400 	.word	0x58024400
 8103e70:	081081a4 	.word	0x081081a4

08103e74 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8103e74:	b480      	push	{r7}
 8103e76:	b083      	sub	sp, #12
 8103e78:	af00      	add	r7, sp, #0
 8103e7a:	6078      	str	r0, [r7, #4]
 8103e7c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8103e7e:	687b      	ldr	r3, [r7, #4]
 8103e80:	223f      	movs	r2, #63	@ 0x3f
 8103e82:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8103e84:	4b1a      	ldr	r3, [pc, #104]	@ (8103ef0 <HAL_RCC_GetClockConfig+0x7c>)
 8103e86:	691b      	ldr	r3, [r3, #16]
 8103e88:	f003 0207 	and.w	r2, r3, #7
 8103e8c:	687b      	ldr	r3, [r7, #4]
 8103e8e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8103e90:	4b17      	ldr	r3, [pc, #92]	@ (8103ef0 <HAL_RCC_GetClockConfig+0x7c>)
 8103e92:	699b      	ldr	r3, [r3, #24]
 8103e94:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8103e98:	687b      	ldr	r3, [r7, #4]
 8103e9a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8103e9c:	4b14      	ldr	r3, [pc, #80]	@ (8103ef0 <HAL_RCC_GetClockConfig+0x7c>)
 8103e9e:	699b      	ldr	r3, [r3, #24]
 8103ea0:	f003 020f 	and.w	r2, r3, #15
 8103ea4:	687b      	ldr	r3, [r7, #4]
 8103ea6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8103ea8:	4b11      	ldr	r3, [pc, #68]	@ (8103ef0 <HAL_RCC_GetClockConfig+0x7c>)
 8103eaa:	699b      	ldr	r3, [r3, #24]
 8103eac:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8103eb0:	687b      	ldr	r3, [r7, #4]
 8103eb2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8103eb4:	4b0e      	ldr	r3, [pc, #56]	@ (8103ef0 <HAL_RCC_GetClockConfig+0x7c>)
 8103eb6:	69db      	ldr	r3, [r3, #28]
 8103eb8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8103ebc:	687b      	ldr	r3, [r7, #4]
 8103ebe:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8103ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8103ef0 <HAL_RCC_GetClockConfig+0x7c>)
 8103ec2:	69db      	ldr	r3, [r3, #28]
 8103ec4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8103ec8:	687b      	ldr	r3, [r7, #4]
 8103eca:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8103ecc:	4b08      	ldr	r3, [pc, #32]	@ (8103ef0 <HAL_RCC_GetClockConfig+0x7c>)
 8103ece:	6a1b      	ldr	r3, [r3, #32]
 8103ed0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8103ed4:	687b      	ldr	r3, [r7, #4]
 8103ed6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8103ed8:	4b06      	ldr	r3, [pc, #24]	@ (8103ef4 <HAL_RCC_GetClockConfig+0x80>)
 8103eda:	681b      	ldr	r3, [r3, #0]
 8103edc:	f003 020f 	and.w	r2, r3, #15
 8103ee0:	683b      	ldr	r3, [r7, #0]
 8103ee2:	601a      	str	r2, [r3, #0]
}
 8103ee4:	bf00      	nop
 8103ee6:	370c      	adds	r7, #12
 8103ee8:	46bd      	mov	sp, r7
 8103eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103eee:	4770      	bx	lr
 8103ef0:	58024400 	.word	0x58024400
 8103ef4:	52002000 	.word	0x52002000

08103ef8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8103ef8:	b580      	push	{r7, lr}
 8103efa:	b082      	sub	sp, #8
 8103efc:	af00      	add	r7, sp, #0
 8103efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8103f00:	687b      	ldr	r3, [r7, #4]
 8103f02:	2b00      	cmp	r3, #0
 8103f04:	d101      	bne.n	8103f0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8103f06:	2301      	movs	r3, #1
 8103f08:	e049      	b.n	8103f9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8103f0a:	687b      	ldr	r3, [r7, #4]
 8103f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8103f10:	b2db      	uxtb	r3, r3
 8103f12:	2b00      	cmp	r3, #0
 8103f14:	d106      	bne.n	8103f24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8103f16:	687b      	ldr	r3, [r7, #4]
 8103f18:	2200      	movs	r2, #0
 8103f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8103f1e:	6878      	ldr	r0, [r7, #4]
 8103f20:	f000 f841 	bl	8103fa6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8103f24:	687b      	ldr	r3, [r7, #4]
 8103f26:	2202      	movs	r2, #2
 8103f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8103f2c:	687b      	ldr	r3, [r7, #4]
 8103f2e:	681a      	ldr	r2, [r3, #0]
 8103f30:	687b      	ldr	r3, [r7, #4]
 8103f32:	3304      	adds	r3, #4
 8103f34:	4619      	mov	r1, r3
 8103f36:	4610      	mov	r0, r2
 8103f38:	f000 f9e8 	bl	810430c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8103f3c:	687b      	ldr	r3, [r7, #4]
 8103f3e:	2201      	movs	r2, #1
 8103f40:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103f44:	687b      	ldr	r3, [r7, #4]
 8103f46:	2201      	movs	r2, #1
 8103f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8103f4c:	687b      	ldr	r3, [r7, #4]
 8103f4e:	2201      	movs	r2, #1
 8103f50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8103f54:	687b      	ldr	r3, [r7, #4]
 8103f56:	2201      	movs	r2, #1
 8103f58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8103f5c:	687b      	ldr	r3, [r7, #4]
 8103f5e:	2201      	movs	r2, #1
 8103f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8103f64:	687b      	ldr	r3, [r7, #4]
 8103f66:	2201      	movs	r2, #1
 8103f68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8103f6c:	687b      	ldr	r3, [r7, #4]
 8103f6e:	2201      	movs	r2, #1
 8103f70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103f74:	687b      	ldr	r3, [r7, #4]
 8103f76:	2201      	movs	r2, #1
 8103f78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8103f7c:	687b      	ldr	r3, [r7, #4]
 8103f7e:	2201      	movs	r2, #1
 8103f80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8103f84:	687b      	ldr	r3, [r7, #4]
 8103f86:	2201      	movs	r2, #1
 8103f88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8103f8c:	687b      	ldr	r3, [r7, #4]
 8103f8e:	2201      	movs	r2, #1
 8103f90:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8103f94:	687b      	ldr	r3, [r7, #4]
 8103f96:	2201      	movs	r2, #1
 8103f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8103f9c:	2300      	movs	r3, #0
}
 8103f9e:	4618      	mov	r0, r3
 8103fa0:	3708      	adds	r7, #8
 8103fa2:	46bd      	mov	sp, r7
 8103fa4:	bd80      	pop	{r7, pc}

08103fa6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8103fa6:	b480      	push	{r7}
 8103fa8:	b083      	sub	sp, #12
 8103faa:	af00      	add	r7, sp, #0
 8103fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8103fae:	bf00      	nop
 8103fb0:	370c      	adds	r7, #12
 8103fb2:	46bd      	mov	sp, r7
 8103fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fb8:	4770      	bx	lr
	...

08103fbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8103fbc:	b480      	push	{r7}
 8103fbe:	b085      	sub	sp, #20
 8103fc0:	af00      	add	r7, sp, #0
 8103fc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8103fc4:	687b      	ldr	r3, [r7, #4]
 8103fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8103fca:	b2db      	uxtb	r3, r3
 8103fcc:	2b01      	cmp	r3, #1
 8103fce:	d001      	beq.n	8103fd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8103fd0:	2301      	movs	r3, #1
 8103fd2:	e054      	b.n	810407e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8103fd4:	687b      	ldr	r3, [r7, #4]
 8103fd6:	2202      	movs	r2, #2
 8103fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8103fdc:	687b      	ldr	r3, [r7, #4]
 8103fde:	681b      	ldr	r3, [r3, #0]
 8103fe0:	68da      	ldr	r2, [r3, #12]
 8103fe2:	687b      	ldr	r3, [r7, #4]
 8103fe4:	681b      	ldr	r3, [r3, #0]
 8103fe6:	f042 0201 	orr.w	r2, r2, #1
 8103fea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8103fec:	687b      	ldr	r3, [r7, #4]
 8103fee:	681b      	ldr	r3, [r3, #0]
 8103ff0:	4a26      	ldr	r2, [pc, #152]	@ (810408c <HAL_TIM_Base_Start_IT+0xd0>)
 8103ff2:	4293      	cmp	r3, r2
 8103ff4:	d022      	beq.n	810403c <HAL_TIM_Base_Start_IT+0x80>
 8103ff6:	687b      	ldr	r3, [r7, #4]
 8103ff8:	681b      	ldr	r3, [r3, #0]
 8103ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103ffe:	d01d      	beq.n	810403c <HAL_TIM_Base_Start_IT+0x80>
 8104000:	687b      	ldr	r3, [r7, #4]
 8104002:	681b      	ldr	r3, [r3, #0]
 8104004:	4a22      	ldr	r2, [pc, #136]	@ (8104090 <HAL_TIM_Base_Start_IT+0xd4>)
 8104006:	4293      	cmp	r3, r2
 8104008:	d018      	beq.n	810403c <HAL_TIM_Base_Start_IT+0x80>
 810400a:	687b      	ldr	r3, [r7, #4]
 810400c:	681b      	ldr	r3, [r3, #0]
 810400e:	4a21      	ldr	r2, [pc, #132]	@ (8104094 <HAL_TIM_Base_Start_IT+0xd8>)
 8104010:	4293      	cmp	r3, r2
 8104012:	d013      	beq.n	810403c <HAL_TIM_Base_Start_IT+0x80>
 8104014:	687b      	ldr	r3, [r7, #4]
 8104016:	681b      	ldr	r3, [r3, #0]
 8104018:	4a1f      	ldr	r2, [pc, #124]	@ (8104098 <HAL_TIM_Base_Start_IT+0xdc>)
 810401a:	4293      	cmp	r3, r2
 810401c:	d00e      	beq.n	810403c <HAL_TIM_Base_Start_IT+0x80>
 810401e:	687b      	ldr	r3, [r7, #4]
 8104020:	681b      	ldr	r3, [r3, #0]
 8104022:	4a1e      	ldr	r2, [pc, #120]	@ (810409c <HAL_TIM_Base_Start_IT+0xe0>)
 8104024:	4293      	cmp	r3, r2
 8104026:	d009      	beq.n	810403c <HAL_TIM_Base_Start_IT+0x80>
 8104028:	687b      	ldr	r3, [r7, #4]
 810402a:	681b      	ldr	r3, [r3, #0]
 810402c:	4a1c      	ldr	r2, [pc, #112]	@ (81040a0 <HAL_TIM_Base_Start_IT+0xe4>)
 810402e:	4293      	cmp	r3, r2
 8104030:	d004      	beq.n	810403c <HAL_TIM_Base_Start_IT+0x80>
 8104032:	687b      	ldr	r3, [r7, #4]
 8104034:	681b      	ldr	r3, [r3, #0]
 8104036:	4a1b      	ldr	r2, [pc, #108]	@ (81040a4 <HAL_TIM_Base_Start_IT+0xe8>)
 8104038:	4293      	cmp	r3, r2
 810403a:	d115      	bne.n	8104068 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810403c:	687b      	ldr	r3, [r7, #4]
 810403e:	681b      	ldr	r3, [r3, #0]
 8104040:	689a      	ldr	r2, [r3, #8]
 8104042:	4b19      	ldr	r3, [pc, #100]	@ (81040a8 <HAL_TIM_Base_Start_IT+0xec>)
 8104044:	4013      	ands	r3, r2
 8104046:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8104048:	68fb      	ldr	r3, [r7, #12]
 810404a:	2b06      	cmp	r3, #6
 810404c:	d015      	beq.n	810407a <HAL_TIM_Base_Start_IT+0xbe>
 810404e:	68fb      	ldr	r3, [r7, #12]
 8104050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104054:	d011      	beq.n	810407a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8104056:	687b      	ldr	r3, [r7, #4]
 8104058:	681b      	ldr	r3, [r3, #0]
 810405a:	681a      	ldr	r2, [r3, #0]
 810405c:	687b      	ldr	r3, [r7, #4]
 810405e:	681b      	ldr	r3, [r3, #0]
 8104060:	f042 0201 	orr.w	r2, r2, #1
 8104064:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8104066:	e008      	b.n	810407a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8104068:	687b      	ldr	r3, [r7, #4]
 810406a:	681b      	ldr	r3, [r3, #0]
 810406c:	681a      	ldr	r2, [r3, #0]
 810406e:	687b      	ldr	r3, [r7, #4]
 8104070:	681b      	ldr	r3, [r3, #0]
 8104072:	f042 0201 	orr.w	r2, r2, #1
 8104076:	601a      	str	r2, [r3, #0]
 8104078:	e000      	b.n	810407c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810407a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810407c:	2300      	movs	r3, #0
}
 810407e:	4618      	mov	r0, r3
 8104080:	3714      	adds	r7, #20
 8104082:	46bd      	mov	sp, r7
 8104084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104088:	4770      	bx	lr
 810408a:	bf00      	nop
 810408c:	40010000 	.word	0x40010000
 8104090:	40000400 	.word	0x40000400
 8104094:	40000800 	.word	0x40000800
 8104098:	40000c00 	.word	0x40000c00
 810409c:	40010400 	.word	0x40010400
 81040a0:	40001800 	.word	0x40001800
 81040a4:	40014000 	.word	0x40014000
 81040a8:	00010007 	.word	0x00010007

081040ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 81040ac:	b580      	push	{r7, lr}
 81040ae:	b084      	sub	sp, #16
 81040b0:	af00      	add	r7, sp, #0
 81040b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 81040b4:	687b      	ldr	r3, [r7, #4]
 81040b6:	681b      	ldr	r3, [r3, #0]
 81040b8:	68db      	ldr	r3, [r3, #12]
 81040ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 81040bc:	687b      	ldr	r3, [r7, #4]
 81040be:	681b      	ldr	r3, [r3, #0]
 81040c0:	691b      	ldr	r3, [r3, #16]
 81040c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 81040c4:	68bb      	ldr	r3, [r7, #8]
 81040c6:	f003 0302 	and.w	r3, r3, #2
 81040ca:	2b00      	cmp	r3, #0
 81040cc:	d020      	beq.n	8104110 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 81040ce:	68fb      	ldr	r3, [r7, #12]
 81040d0:	f003 0302 	and.w	r3, r3, #2
 81040d4:	2b00      	cmp	r3, #0
 81040d6:	d01b      	beq.n	8104110 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 81040d8:	687b      	ldr	r3, [r7, #4]
 81040da:	681b      	ldr	r3, [r3, #0]
 81040dc:	f06f 0202 	mvn.w	r2, #2
 81040e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 81040e2:	687b      	ldr	r3, [r7, #4]
 81040e4:	2201      	movs	r2, #1
 81040e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 81040e8:	687b      	ldr	r3, [r7, #4]
 81040ea:	681b      	ldr	r3, [r3, #0]
 81040ec:	699b      	ldr	r3, [r3, #24]
 81040ee:	f003 0303 	and.w	r3, r3, #3
 81040f2:	2b00      	cmp	r3, #0
 81040f4:	d003      	beq.n	81040fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 81040f6:	6878      	ldr	r0, [r7, #4]
 81040f8:	f000 f8e9 	bl	81042ce <HAL_TIM_IC_CaptureCallback>
 81040fc:	e005      	b.n	810410a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 81040fe:	6878      	ldr	r0, [r7, #4]
 8104100:	f000 f8db 	bl	81042ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8104104:	6878      	ldr	r0, [r7, #4]
 8104106:	f000 f8ec 	bl	81042e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810410a:	687b      	ldr	r3, [r7, #4]
 810410c:	2200      	movs	r2, #0
 810410e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8104110:	68bb      	ldr	r3, [r7, #8]
 8104112:	f003 0304 	and.w	r3, r3, #4
 8104116:	2b00      	cmp	r3, #0
 8104118:	d020      	beq.n	810415c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 810411a:	68fb      	ldr	r3, [r7, #12]
 810411c:	f003 0304 	and.w	r3, r3, #4
 8104120:	2b00      	cmp	r3, #0
 8104122:	d01b      	beq.n	810415c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8104124:	687b      	ldr	r3, [r7, #4]
 8104126:	681b      	ldr	r3, [r3, #0]
 8104128:	f06f 0204 	mvn.w	r2, #4
 810412c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 810412e:	687b      	ldr	r3, [r7, #4]
 8104130:	2202      	movs	r2, #2
 8104132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8104134:	687b      	ldr	r3, [r7, #4]
 8104136:	681b      	ldr	r3, [r3, #0]
 8104138:	699b      	ldr	r3, [r3, #24]
 810413a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810413e:	2b00      	cmp	r3, #0
 8104140:	d003      	beq.n	810414a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8104142:	6878      	ldr	r0, [r7, #4]
 8104144:	f000 f8c3 	bl	81042ce <HAL_TIM_IC_CaptureCallback>
 8104148:	e005      	b.n	8104156 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810414a:	6878      	ldr	r0, [r7, #4]
 810414c:	f000 f8b5 	bl	81042ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8104150:	6878      	ldr	r0, [r7, #4]
 8104152:	f000 f8c6 	bl	81042e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8104156:	687b      	ldr	r3, [r7, #4]
 8104158:	2200      	movs	r2, #0
 810415a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 810415c:	68bb      	ldr	r3, [r7, #8]
 810415e:	f003 0308 	and.w	r3, r3, #8
 8104162:	2b00      	cmp	r3, #0
 8104164:	d020      	beq.n	81041a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8104166:	68fb      	ldr	r3, [r7, #12]
 8104168:	f003 0308 	and.w	r3, r3, #8
 810416c:	2b00      	cmp	r3, #0
 810416e:	d01b      	beq.n	81041a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8104170:	687b      	ldr	r3, [r7, #4]
 8104172:	681b      	ldr	r3, [r3, #0]
 8104174:	f06f 0208 	mvn.w	r2, #8
 8104178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 810417a:	687b      	ldr	r3, [r7, #4]
 810417c:	2204      	movs	r2, #4
 810417e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8104180:	687b      	ldr	r3, [r7, #4]
 8104182:	681b      	ldr	r3, [r3, #0]
 8104184:	69db      	ldr	r3, [r3, #28]
 8104186:	f003 0303 	and.w	r3, r3, #3
 810418a:	2b00      	cmp	r3, #0
 810418c:	d003      	beq.n	8104196 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810418e:	6878      	ldr	r0, [r7, #4]
 8104190:	f000 f89d 	bl	81042ce <HAL_TIM_IC_CaptureCallback>
 8104194:	e005      	b.n	81041a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8104196:	6878      	ldr	r0, [r7, #4]
 8104198:	f000 f88f 	bl	81042ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810419c:	6878      	ldr	r0, [r7, #4]
 810419e:	f000 f8a0 	bl	81042e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81041a2:	687b      	ldr	r3, [r7, #4]
 81041a4:	2200      	movs	r2, #0
 81041a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 81041a8:	68bb      	ldr	r3, [r7, #8]
 81041aa:	f003 0310 	and.w	r3, r3, #16
 81041ae:	2b00      	cmp	r3, #0
 81041b0:	d020      	beq.n	81041f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 81041b2:	68fb      	ldr	r3, [r7, #12]
 81041b4:	f003 0310 	and.w	r3, r3, #16
 81041b8:	2b00      	cmp	r3, #0
 81041ba:	d01b      	beq.n	81041f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 81041bc:	687b      	ldr	r3, [r7, #4]
 81041be:	681b      	ldr	r3, [r3, #0]
 81041c0:	f06f 0210 	mvn.w	r2, #16
 81041c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 81041c6:	687b      	ldr	r3, [r7, #4]
 81041c8:	2208      	movs	r2, #8
 81041ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 81041cc:	687b      	ldr	r3, [r7, #4]
 81041ce:	681b      	ldr	r3, [r3, #0]
 81041d0:	69db      	ldr	r3, [r3, #28]
 81041d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81041d6:	2b00      	cmp	r3, #0
 81041d8:	d003      	beq.n	81041e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81041da:	6878      	ldr	r0, [r7, #4]
 81041dc:	f000 f877 	bl	81042ce <HAL_TIM_IC_CaptureCallback>
 81041e0:	e005      	b.n	81041ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81041e2:	6878      	ldr	r0, [r7, #4]
 81041e4:	f000 f869 	bl	81042ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81041e8:	6878      	ldr	r0, [r7, #4]
 81041ea:	f000 f87a 	bl	81042e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81041ee:	687b      	ldr	r3, [r7, #4]
 81041f0:	2200      	movs	r2, #0
 81041f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 81041f4:	68bb      	ldr	r3, [r7, #8]
 81041f6:	f003 0301 	and.w	r3, r3, #1
 81041fa:	2b00      	cmp	r3, #0
 81041fc:	d00c      	beq.n	8104218 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 81041fe:	68fb      	ldr	r3, [r7, #12]
 8104200:	f003 0301 	and.w	r3, r3, #1
 8104204:	2b00      	cmp	r3, #0
 8104206:	d007      	beq.n	8104218 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8104208:	687b      	ldr	r3, [r7, #4]
 810420a:	681b      	ldr	r3, [r3, #0]
 810420c:	f06f 0201 	mvn.w	r2, #1
 8104210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8104212:	6878      	ldr	r0, [r7, #4]
 8104214:	f7fc fa6a 	bl	81006ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8104218:	68bb      	ldr	r3, [r7, #8]
 810421a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810421e:	2b00      	cmp	r3, #0
 8104220:	d104      	bne.n	810422c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8104222:	68bb      	ldr	r3, [r7, #8]
 8104224:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8104228:	2b00      	cmp	r3, #0
 810422a:	d00c      	beq.n	8104246 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 810422c:	68fb      	ldr	r3, [r7, #12]
 810422e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8104232:	2b00      	cmp	r3, #0
 8104234:	d007      	beq.n	8104246 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8104236:	687b      	ldr	r3, [r7, #4]
 8104238:	681b      	ldr	r3, [r3, #0]
 810423a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 810423e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8104240:	6878      	ldr	r0, [r7, #4]
 8104242:	f000 f913 	bl	810446c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8104246:	68bb      	ldr	r3, [r7, #8]
 8104248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810424c:	2b00      	cmp	r3, #0
 810424e:	d00c      	beq.n	810426a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8104250:	68fb      	ldr	r3, [r7, #12]
 8104252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8104256:	2b00      	cmp	r3, #0
 8104258:	d007      	beq.n	810426a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 810425a:	687b      	ldr	r3, [r7, #4]
 810425c:	681b      	ldr	r3, [r3, #0]
 810425e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8104262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8104264:	6878      	ldr	r0, [r7, #4]
 8104266:	f000 f90b 	bl	8104480 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 810426a:	68bb      	ldr	r3, [r7, #8]
 810426c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8104270:	2b00      	cmp	r3, #0
 8104272:	d00c      	beq.n	810428e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8104274:	68fb      	ldr	r3, [r7, #12]
 8104276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810427a:	2b00      	cmp	r3, #0
 810427c:	d007      	beq.n	810428e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 810427e:	687b      	ldr	r3, [r7, #4]
 8104280:	681b      	ldr	r3, [r3, #0]
 8104282:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8104286:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8104288:	6878      	ldr	r0, [r7, #4]
 810428a:	f000 f834 	bl	81042f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 810428e:	68bb      	ldr	r3, [r7, #8]
 8104290:	f003 0320 	and.w	r3, r3, #32
 8104294:	2b00      	cmp	r3, #0
 8104296:	d00c      	beq.n	81042b2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8104298:	68fb      	ldr	r3, [r7, #12]
 810429a:	f003 0320 	and.w	r3, r3, #32
 810429e:	2b00      	cmp	r3, #0
 81042a0:	d007      	beq.n	81042b2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 81042a2:	687b      	ldr	r3, [r7, #4]
 81042a4:	681b      	ldr	r3, [r3, #0]
 81042a6:	f06f 0220 	mvn.w	r2, #32
 81042aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 81042ac:	6878      	ldr	r0, [r7, #4]
 81042ae:	f000 f8d3 	bl	8104458 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 81042b2:	bf00      	nop
 81042b4:	3710      	adds	r7, #16
 81042b6:	46bd      	mov	sp, r7
 81042b8:	bd80      	pop	{r7, pc}

081042ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 81042ba:	b480      	push	{r7}
 81042bc:	b083      	sub	sp, #12
 81042be:	af00      	add	r7, sp, #0
 81042c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 81042c2:	bf00      	nop
 81042c4:	370c      	adds	r7, #12
 81042c6:	46bd      	mov	sp, r7
 81042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042cc:	4770      	bx	lr

081042ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 81042ce:	b480      	push	{r7}
 81042d0:	b083      	sub	sp, #12
 81042d2:	af00      	add	r7, sp, #0
 81042d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 81042d6:	bf00      	nop
 81042d8:	370c      	adds	r7, #12
 81042da:	46bd      	mov	sp, r7
 81042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042e0:	4770      	bx	lr

081042e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 81042e2:	b480      	push	{r7}
 81042e4:	b083      	sub	sp, #12
 81042e6:	af00      	add	r7, sp, #0
 81042e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 81042ea:	bf00      	nop
 81042ec:	370c      	adds	r7, #12
 81042ee:	46bd      	mov	sp, r7
 81042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042f4:	4770      	bx	lr

081042f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 81042f6:	b480      	push	{r7}
 81042f8:	b083      	sub	sp, #12
 81042fa:	af00      	add	r7, sp, #0
 81042fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 81042fe:	bf00      	nop
 8104300:	370c      	adds	r7, #12
 8104302:	46bd      	mov	sp, r7
 8104304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104308:	4770      	bx	lr
	...

0810430c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 810430c:	b480      	push	{r7}
 810430e:	b085      	sub	sp, #20
 8104310:	af00      	add	r7, sp, #0
 8104312:	6078      	str	r0, [r7, #4]
 8104314:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8104316:	687b      	ldr	r3, [r7, #4]
 8104318:	681b      	ldr	r3, [r3, #0]
 810431a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810431c:	687b      	ldr	r3, [r7, #4]
 810431e:	4a46      	ldr	r2, [pc, #280]	@ (8104438 <TIM_Base_SetConfig+0x12c>)
 8104320:	4293      	cmp	r3, r2
 8104322:	d013      	beq.n	810434c <TIM_Base_SetConfig+0x40>
 8104324:	687b      	ldr	r3, [r7, #4]
 8104326:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810432a:	d00f      	beq.n	810434c <TIM_Base_SetConfig+0x40>
 810432c:	687b      	ldr	r3, [r7, #4]
 810432e:	4a43      	ldr	r2, [pc, #268]	@ (810443c <TIM_Base_SetConfig+0x130>)
 8104330:	4293      	cmp	r3, r2
 8104332:	d00b      	beq.n	810434c <TIM_Base_SetConfig+0x40>
 8104334:	687b      	ldr	r3, [r7, #4]
 8104336:	4a42      	ldr	r2, [pc, #264]	@ (8104440 <TIM_Base_SetConfig+0x134>)
 8104338:	4293      	cmp	r3, r2
 810433a:	d007      	beq.n	810434c <TIM_Base_SetConfig+0x40>
 810433c:	687b      	ldr	r3, [r7, #4]
 810433e:	4a41      	ldr	r2, [pc, #260]	@ (8104444 <TIM_Base_SetConfig+0x138>)
 8104340:	4293      	cmp	r3, r2
 8104342:	d003      	beq.n	810434c <TIM_Base_SetConfig+0x40>
 8104344:	687b      	ldr	r3, [r7, #4]
 8104346:	4a40      	ldr	r2, [pc, #256]	@ (8104448 <TIM_Base_SetConfig+0x13c>)
 8104348:	4293      	cmp	r3, r2
 810434a:	d108      	bne.n	810435e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810434c:	68fb      	ldr	r3, [r7, #12]
 810434e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8104352:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8104354:	683b      	ldr	r3, [r7, #0]
 8104356:	685b      	ldr	r3, [r3, #4]
 8104358:	68fa      	ldr	r2, [r7, #12]
 810435a:	4313      	orrs	r3, r2
 810435c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810435e:	687b      	ldr	r3, [r7, #4]
 8104360:	4a35      	ldr	r2, [pc, #212]	@ (8104438 <TIM_Base_SetConfig+0x12c>)
 8104362:	4293      	cmp	r3, r2
 8104364:	d01f      	beq.n	81043a6 <TIM_Base_SetConfig+0x9a>
 8104366:	687b      	ldr	r3, [r7, #4]
 8104368:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810436c:	d01b      	beq.n	81043a6 <TIM_Base_SetConfig+0x9a>
 810436e:	687b      	ldr	r3, [r7, #4]
 8104370:	4a32      	ldr	r2, [pc, #200]	@ (810443c <TIM_Base_SetConfig+0x130>)
 8104372:	4293      	cmp	r3, r2
 8104374:	d017      	beq.n	81043a6 <TIM_Base_SetConfig+0x9a>
 8104376:	687b      	ldr	r3, [r7, #4]
 8104378:	4a31      	ldr	r2, [pc, #196]	@ (8104440 <TIM_Base_SetConfig+0x134>)
 810437a:	4293      	cmp	r3, r2
 810437c:	d013      	beq.n	81043a6 <TIM_Base_SetConfig+0x9a>
 810437e:	687b      	ldr	r3, [r7, #4]
 8104380:	4a30      	ldr	r2, [pc, #192]	@ (8104444 <TIM_Base_SetConfig+0x138>)
 8104382:	4293      	cmp	r3, r2
 8104384:	d00f      	beq.n	81043a6 <TIM_Base_SetConfig+0x9a>
 8104386:	687b      	ldr	r3, [r7, #4]
 8104388:	4a2f      	ldr	r2, [pc, #188]	@ (8104448 <TIM_Base_SetConfig+0x13c>)
 810438a:	4293      	cmp	r3, r2
 810438c:	d00b      	beq.n	81043a6 <TIM_Base_SetConfig+0x9a>
 810438e:	687b      	ldr	r3, [r7, #4]
 8104390:	4a2e      	ldr	r2, [pc, #184]	@ (810444c <TIM_Base_SetConfig+0x140>)
 8104392:	4293      	cmp	r3, r2
 8104394:	d007      	beq.n	81043a6 <TIM_Base_SetConfig+0x9a>
 8104396:	687b      	ldr	r3, [r7, #4]
 8104398:	4a2d      	ldr	r2, [pc, #180]	@ (8104450 <TIM_Base_SetConfig+0x144>)
 810439a:	4293      	cmp	r3, r2
 810439c:	d003      	beq.n	81043a6 <TIM_Base_SetConfig+0x9a>
 810439e:	687b      	ldr	r3, [r7, #4]
 81043a0:	4a2c      	ldr	r2, [pc, #176]	@ (8104454 <TIM_Base_SetConfig+0x148>)
 81043a2:	4293      	cmp	r3, r2
 81043a4:	d108      	bne.n	81043b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 81043a6:	68fb      	ldr	r3, [r7, #12]
 81043a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 81043ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 81043ae:	683b      	ldr	r3, [r7, #0]
 81043b0:	68db      	ldr	r3, [r3, #12]
 81043b2:	68fa      	ldr	r2, [r7, #12]
 81043b4:	4313      	orrs	r3, r2
 81043b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 81043b8:	68fb      	ldr	r3, [r7, #12]
 81043ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 81043be:	683b      	ldr	r3, [r7, #0]
 81043c0:	695b      	ldr	r3, [r3, #20]
 81043c2:	4313      	orrs	r3, r2
 81043c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 81043c6:	687b      	ldr	r3, [r7, #4]
 81043c8:	68fa      	ldr	r2, [r7, #12]
 81043ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 81043cc:	683b      	ldr	r3, [r7, #0]
 81043ce:	689a      	ldr	r2, [r3, #8]
 81043d0:	687b      	ldr	r3, [r7, #4]
 81043d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 81043d4:	683b      	ldr	r3, [r7, #0]
 81043d6:	681a      	ldr	r2, [r3, #0]
 81043d8:	687b      	ldr	r3, [r7, #4]
 81043da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 81043dc:	687b      	ldr	r3, [r7, #4]
 81043de:	4a16      	ldr	r2, [pc, #88]	@ (8104438 <TIM_Base_SetConfig+0x12c>)
 81043e0:	4293      	cmp	r3, r2
 81043e2:	d00f      	beq.n	8104404 <TIM_Base_SetConfig+0xf8>
 81043e4:	687b      	ldr	r3, [r7, #4]
 81043e6:	4a18      	ldr	r2, [pc, #96]	@ (8104448 <TIM_Base_SetConfig+0x13c>)
 81043e8:	4293      	cmp	r3, r2
 81043ea:	d00b      	beq.n	8104404 <TIM_Base_SetConfig+0xf8>
 81043ec:	687b      	ldr	r3, [r7, #4]
 81043ee:	4a17      	ldr	r2, [pc, #92]	@ (810444c <TIM_Base_SetConfig+0x140>)
 81043f0:	4293      	cmp	r3, r2
 81043f2:	d007      	beq.n	8104404 <TIM_Base_SetConfig+0xf8>
 81043f4:	687b      	ldr	r3, [r7, #4]
 81043f6:	4a16      	ldr	r2, [pc, #88]	@ (8104450 <TIM_Base_SetConfig+0x144>)
 81043f8:	4293      	cmp	r3, r2
 81043fa:	d003      	beq.n	8104404 <TIM_Base_SetConfig+0xf8>
 81043fc:	687b      	ldr	r3, [r7, #4]
 81043fe:	4a15      	ldr	r2, [pc, #84]	@ (8104454 <TIM_Base_SetConfig+0x148>)
 8104400:	4293      	cmp	r3, r2
 8104402:	d103      	bne.n	810440c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8104404:	683b      	ldr	r3, [r7, #0]
 8104406:	691a      	ldr	r2, [r3, #16]
 8104408:	687b      	ldr	r3, [r7, #4]
 810440a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810440c:	687b      	ldr	r3, [r7, #4]
 810440e:	2201      	movs	r2, #1
 8104410:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8104412:	687b      	ldr	r3, [r7, #4]
 8104414:	691b      	ldr	r3, [r3, #16]
 8104416:	f003 0301 	and.w	r3, r3, #1
 810441a:	2b01      	cmp	r3, #1
 810441c:	d105      	bne.n	810442a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 810441e:	687b      	ldr	r3, [r7, #4]
 8104420:	691b      	ldr	r3, [r3, #16]
 8104422:	f023 0201 	bic.w	r2, r3, #1
 8104426:	687b      	ldr	r3, [r7, #4]
 8104428:	611a      	str	r2, [r3, #16]
  }
}
 810442a:	bf00      	nop
 810442c:	3714      	adds	r7, #20
 810442e:	46bd      	mov	sp, r7
 8104430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104434:	4770      	bx	lr
 8104436:	bf00      	nop
 8104438:	40010000 	.word	0x40010000
 810443c:	40000400 	.word	0x40000400
 8104440:	40000800 	.word	0x40000800
 8104444:	40000c00 	.word	0x40000c00
 8104448:	40010400 	.word	0x40010400
 810444c:	40014000 	.word	0x40014000
 8104450:	40014400 	.word	0x40014400
 8104454:	40014800 	.word	0x40014800

08104458 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8104458:	b480      	push	{r7}
 810445a:	b083      	sub	sp, #12
 810445c:	af00      	add	r7, sp, #0
 810445e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8104460:	bf00      	nop
 8104462:	370c      	adds	r7, #12
 8104464:	46bd      	mov	sp, r7
 8104466:	f85d 7b04 	ldr.w	r7, [sp], #4
 810446a:	4770      	bx	lr

0810446c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810446c:	b480      	push	{r7}
 810446e:	b083      	sub	sp, #12
 8104470:	af00      	add	r7, sp, #0
 8104472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8104474:	bf00      	nop
 8104476:	370c      	adds	r7, #12
 8104478:	46bd      	mov	sp, r7
 810447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810447e:	4770      	bx	lr

08104480 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8104480:	b480      	push	{r7}
 8104482:	b083      	sub	sp, #12
 8104484:	af00      	add	r7, sp, #0
 8104486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8104488:	bf00      	nop
 810448a:	370c      	adds	r7, #12
 810448c:	46bd      	mov	sp, r7
 810448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104492:	4770      	bx	lr

08104494 <__NVIC_SetPriority>:
{
 8104494:	b480      	push	{r7}
 8104496:	b083      	sub	sp, #12
 8104498:	af00      	add	r7, sp, #0
 810449a:	4603      	mov	r3, r0
 810449c:	6039      	str	r1, [r7, #0]
 810449e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81044a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81044a4:	2b00      	cmp	r3, #0
 81044a6:	db0a      	blt.n	81044be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81044a8:	683b      	ldr	r3, [r7, #0]
 81044aa:	b2da      	uxtb	r2, r3
 81044ac:	490c      	ldr	r1, [pc, #48]	@ (81044e0 <__NVIC_SetPriority+0x4c>)
 81044ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81044b2:	0112      	lsls	r2, r2, #4
 81044b4:	b2d2      	uxtb	r2, r2
 81044b6:	440b      	add	r3, r1
 81044b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 81044bc:	e00a      	b.n	81044d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81044be:	683b      	ldr	r3, [r7, #0]
 81044c0:	b2da      	uxtb	r2, r3
 81044c2:	4908      	ldr	r1, [pc, #32]	@ (81044e4 <__NVIC_SetPriority+0x50>)
 81044c4:	88fb      	ldrh	r3, [r7, #6]
 81044c6:	f003 030f 	and.w	r3, r3, #15
 81044ca:	3b04      	subs	r3, #4
 81044cc:	0112      	lsls	r2, r2, #4
 81044ce:	b2d2      	uxtb	r2, r2
 81044d0:	440b      	add	r3, r1
 81044d2:	761a      	strb	r2, [r3, #24]
}
 81044d4:	bf00      	nop
 81044d6:	370c      	adds	r7, #12
 81044d8:	46bd      	mov	sp, r7
 81044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044de:	4770      	bx	lr
 81044e0:	e000e100 	.word	0xe000e100
 81044e4:	e000ed00 	.word	0xe000ed00

081044e8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 81044e8:	b580      	push	{r7, lr}
 81044ea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 81044ec:	4b05      	ldr	r3, [pc, #20]	@ (8104504 <SysTick_Handler+0x1c>)
 81044ee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 81044f0:	f002 fd44 	bl	8106f7c <xTaskGetSchedulerState>
 81044f4:	4603      	mov	r3, r0
 81044f6:	2b01      	cmp	r3, #1
 81044f8:	d001      	beq.n	81044fe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 81044fa:	f000 fde5 	bl	81050c8 <xPortSysTickHandler>
  }
}
 81044fe:	bf00      	nop
 8104500:	bd80      	pop	{r7, pc}
 8104502:	bf00      	nop
 8104504:	e000e010 	.word	0xe000e010

08104508 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8104508:	b580      	push	{r7, lr}
 810450a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 810450c:	2100      	movs	r1, #0
 810450e:	f06f 0004 	mvn.w	r0, #4
 8104512:	f7ff ffbf 	bl	8104494 <__NVIC_SetPriority>
#endif
}
 8104516:	bf00      	nop
 8104518:	bd80      	pop	{r7, pc}
	...

0810451c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 810451c:	b480      	push	{r7}
 810451e:	b083      	sub	sp, #12
 8104520:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8104522:	f3ef 8305 	mrs	r3, IPSR
 8104526:	603b      	str	r3, [r7, #0]
  return(result);
 8104528:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810452a:	2b00      	cmp	r3, #0
 810452c:	d003      	beq.n	8104536 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 810452e:	f06f 0305 	mvn.w	r3, #5
 8104532:	607b      	str	r3, [r7, #4]
 8104534:	e00c      	b.n	8104550 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8104536:	4b0a      	ldr	r3, [pc, #40]	@ (8104560 <osKernelInitialize+0x44>)
 8104538:	681b      	ldr	r3, [r3, #0]
 810453a:	2b00      	cmp	r3, #0
 810453c:	d105      	bne.n	810454a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 810453e:	4b08      	ldr	r3, [pc, #32]	@ (8104560 <osKernelInitialize+0x44>)
 8104540:	2201      	movs	r2, #1
 8104542:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8104544:	2300      	movs	r3, #0
 8104546:	607b      	str	r3, [r7, #4]
 8104548:	e002      	b.n	8104550 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 810454a:	f04f 33ff 	mov.w	r3, #4294967295
 810454e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8104550:	687b      	ldr	r3, [r7, #4]
}
 8104552:	4618      	mov	r0, r3
 8104554:	370c      	adds	r7, #12
 8104556:	46bd      	mov	sp, r7
 8104558:	f85d 7b04 	ldr.w	r7, [sp], #4
 810455c:	4770      	bx	lr
 810455e:	bf00      	nop
 8104560:	100001a4 	.word	0x100001a4

08104564 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8104564:	b580      	push	{r7, lr}
 8104566:	b082      	sub	sp, #8
 8104568:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810456a:	f3ef 8305 	mrs	r3, IPSR
 810456e:	603b      	str	r3, [r7, #0]
  return(result);
 8104570:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8104572:	2b00      	cmp	r3, #0
 8104574:	d003      	beq.n	810457e <osKernelStart+0x1a>
    stat = osErrorISR;
 8104576:	f06f 0305 	mvn.w	r3, #5
 810457a:	607b      	str	r3, [r7, #4]
 810457c:	e010      	b.n	81045a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 810457e:	4b0b      	ldr	r3, [pc, #44]	@ (81045ac <osKernelStart+0x48>)
 8104580:	681b      	ldr	r3, [r3, #0]
 8104582:	2b01      	cmp	r3, #1
 8104584:	d109      	bne.n	810459a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8104586:	f7ff ffbf 	bl	8104508 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 810458a:	4b08      	ldr	r3, [pc, #32]	@ (81045ac <osKernelStart+0x48>)
 810458c:	2202      	movs	r2, #2
 810458e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8104590:	f002 f880 	bl	8106694 <vTaskStartScheduler>
      stat = osOK;
 8104594:	2300      	movs	r3, #0
 8104596:	607b      	str	r3, [r7, #4]
 8104598:	e002      	b.n	81045a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 810459a:	f04f 33ff 	mov.w	r3, #4294967295
 810459e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 81045a0:	687b      	ldr	r3, [r7, #4]
}
 81045a2:	4618      	mov	r0, r3
 81045a4:	3708      	adds	r7, #8
 81045a6:	46bd      	mov	sp, r7
 81045a8:	bd80      	pop	{r7, pc}
 81045aa:	bf00      	nop
 81045ac:	100001a4 	.word	0x100001a4

081045b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 81045b0:	b580      	push	{r7, lr}
 81045b2:	b08e      	sub	sp, #56	@ 0x38
 81045b4:	af04      	add	r7, sp, #16
 81045b6:	60f8      	str	r0, [r7, #12]
 81045b8:	60b9      	str	r1, [r7, #8]
 81045ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 81045bc:	2300      	movs	r3, #0
 81045be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81045c0:	f3ef 8305 	mrs	r3, IPSR
 81045c4:	617b      	str	r3, [r7, #20]
  return(result);
 81045c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 81045c8:	2b00      	cmp	r3, #0
 81045ca:	d17e      	bne.n	81046ca <osThreadNew+0x11a>
 81045cc:	68fb      	ldr	r3, [r7, #12]
 81045ce:	2b00      	cmp	r3, #0
 81045d0:	d07b      	beq.n	81046ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 81045d2:	2380      	movs	r3, #128	@ 0x80
 81045d4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 81045d6:	2318      	movs	r3, #24
 81045d8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 81045da:	2300      	movs	r3, #0
 81045dc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 81045de:	f04f 33ff 	mov.w	r3, #4294967295
 81045e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 81045e4:	687b      	ldr	r3, [r7, #4]
 81045e6:	2b00      	cmp	r3, #0
 81045e8:	d045      	beq.n	8104676 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 81045ea:	687b      	ldr	r3, [r7, #4]
 81045ec:	681b      	ldr	r3, [r3, #0]
 81045ee:	2b00      	cmp	r3, #0
 81045f0:	d002      	beq.n	81045f8 <osThreadNew+0x48>
        name = attr->name;
 81045f2:	687b      	ldr	r3, [r7, #4]
 81045f4:	681b      	ldr	r3, [r3, #0]
 81045f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 81045f8:	687b      	ldr	r3, [r7, #4]
 81045fa:	699b      	ldr	r3, [r3, #24]
 81045fc:	2b00      	cmp	r3, #0
 81045fe:	d002      	beq.n	8104606 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8104600:	687b      	ldr	r3, [r7, #4]
 8104602:	699b      	ldr	r3, [r3, #24]
 8104604:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8104606:	69fb      	ldr	r3, [r7, #28]
 8104608:	2b00      	cmp	r3, #0
 810460a:	d008      	beq.n	810461e <osThreadNew+0x6e>
 810460c:	69fb      	ldr	r3, [r7, #28]
 810460e:	2b38      	cmp	r3, #56	@ 0x38
 8104610:	d805      	bhi.n	810461e <osThreadNew+0x6e>
 8104612:	687b      	ldr	r3, [r7, #4]
 8104614:	685b      	ldr	r3, [r3, #4]
 8104616:	f003 0301 	and.w	r3, r3, #1
 810461a:	2b00      	cmp	r3, #0
 810461c:	d001      	beq.n	8104622 <osThreadNew+0x72>
        return (NULL);
 810461e:	2300      	movs	r3, #0
 8104620:	e054      	b.n	81046cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8104622:	687b      	ldr	r3, [r7, #4]
 8104624:	695b      	ldr	r3, [r3, #20]
 8104626:	2b00      	cmp	r3, #0
 8104628:	d003      	beq.n	8104632 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 810462a:	687b      	ldr	r3, [r7, #4]
 810462c:	695b      	ldr	r3, [r3, #20]
 810462e:	089b      	lsrs	r3, r3, #2
 8104630:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8104632:	687b      	ldr	r3, [r7, #4]
 8104634:	689b      	ldr	r3, [r3, #8]
 8104636:	2b00      	cmp	r3, #0
 8104638:	d00e      	beq.n	8104658 <osThreadNew+0xa8>
 810463a:	687b      	ldr	r3, [r7, #4]
 810463c:	68db      	ldr	r3, [r3, #12]
 810463e:	2ba7      	cmp	r3, #167	@ 0xa7
 8104640:	d90a      	bls.n	8104658 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8104642:	687b      	ldr	r3, [r7, #4]
 8104644:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8104646:	2b00      	cmp	r3, #0
 8104648:	d006      	beq.n	8104658 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810464a:	687b      	ldr	r3, [r7, #4]
 810464c:	695b      	ldr	r3, [r3, #20]
 810464e:	2b00      	cmp	r3, #0
 8104650:	d002      	beq.n	8104658 <osThreadNew+0xa8>
        mem = 1;
 8104652:	2301      	movs	r3, #1
 8104654:	61bb      	str	r3, [r7, #24]
 8104656:	e010      	b.n	810467a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8104658:	687b      	ldr	r3, [r7, #4]
 810465a:	689b      	ldr	r3, [r3, #8]
 810465c:	2b00      	cmp	r3, #0
 810465e:	d10c      	bne.n	810467a <osThreadNew+0xca>
 8104660:	687b      	ldr	r3, [r7, #4]
 8104662:	68db      	ldr	r3, [r3, #12]
 8104664:	2b00      	cmp	r3, #0
 8104666:	d108      	bne.n	810467a <osThreadNew+0xca>
 8104668:	687b      	ldr	r3, [r7, #4]
 810466a:	691b      	ldr	r3, [r3, #16]
 810466c:	2b00      	cmp	r3, #0
 810466e:	d104      	bne.n	810467a <osThreadNew+0xca>
          mem = 0;
 8104670:	2300      	movs	r3, #0
 8104672:	61bb      	str	r3, [r7, #24]
 8104674:	e001      	b.n	810467a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8104676:	2300      	movs	r3, #0
 8104678:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 810467a:	69bb      	ldr	r3, [r7, #24]
 810467c:	2b01      	cmp	r3, #1
 810467e:	d110      	bne.n	81046a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8104680:	687b      	ldr	r3, [r7, #4]
 8104682:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8104684:	687a      	ldr	r2, [r7, #4]
 8104686:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8104688:	9202      	str	r2, [sp, #8]
 810468a:	9301      	str	r3, [sp, #4]
 810468c:	69fb      	ldr	r3, [r7, #28]
 810468e:	9300      	str	r3, [sp, #0]
 8104690:	68bb      	ldr	r3, [r7, #8]
 8104692:	6a3a      	ldr	r2, [r7, #32]
 8104694:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8104696:	68f8      	ldr	r0, [r7, #12]
 8104698:	f001 fe08 	bl	81062ac <xTaskCreateStatic>
 810469c:	4603      	mov	r3, r0
 810469e:	613b      	str	r3, [r7, #16]
 81046a0:	e013      	b.n	81046ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 81046a2:	69bb      	ldr	r3, [r7, #24]
 81046a4:	2b00      	cmp	r3, #0
 81046a6:	d110      	bne.n	81046ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 81046a8:	6a3b      	ldr	r3, [r7, #32]
 81046aa:	b29a      	uxth	r2, r3
 81046ac:	f107 0310 	add.w	r3, r7, #16
 81046b0:	9301      	str	r3, [sp, #4]
 81046b2:	69fb      	ldr	r3, [r7, #28]
 81046b4:	9300      	str	r3, [sp, #0]
 81046b6:	68bb      	ldr	r3, [r7, #8]
 81046b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 81046ba:	68f8      	ldr	r0, [r7, #12]
 81046bc:	f001 fe56 	bl	810636c <xTaskCreate>
 81046c0:	4603      	mov	r3, r0
 81046c2:	2b01      	cmp	r3, #1
 81046c4:	d001      	beq.n	81046ca <osThreadNew+0x11a>
            hTask = NULL;
 81046c6:	2300      	movs	r3, #0
 81046c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 81046ca:	693b      	ldr	r3, [r7, #16]
}
 81046cc:	4618      	mov	r0, r3
 81046ce:	3728      	adds	r7, #40	@ 0x28
 81046d0:	46bd      	mov	sp, r7
 81046d2:	bd80      	pop	{r7, pc}

081046d4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 81046d4:	b580      	push	{r7, lr}
 81046d6:	b084      	sub	sp, #16
 81046d8:	af00      	add	r7, sp, #0
 81046da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81046dc:	f3ef 8305 	mrs	r3, IPSR
 81046e0:	60bb      	str	r3, [r7, #8]
  return(result);
 81046e2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 81046e4:	2b00      	cmp	r3, #0
 81046e6:	d003      	beq.n	81046f0 <osDelay+0x1c>
    stat = osErrorISR;
 81046e8:	f06f 0305 	mvn.w	r3, #5
 81046ec:	60fb      	str	r3, [r7, #12]
 81046ee:	e007      	b.n	8104700 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 81046f0:	2300      	movs	r3, #0
 81046f2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 81046f4:	687b      	ldr	r3, [r7, #4]
 81046f6:	2b00      	cmp	r3, #0
 81046f8:	d002      	beq.n	8104700 <osDelay+0x2c>
      vTaskDelay(ticks);
 81046fa:	6878      	ldr	r0, [r7, #4]
 81046fc:	f001 ff94 	bl	8106628 <vTaskDelay>
    }
  }

  return (stat);
 8104700:	68fb      	ldr	r3, [r7, #12]
}
 8104702:	4618      	mov	r0, r3
 8104704:	3710      	adds	r7, #16
 8104706:	46bd      	mov	sp, r7
 8104708:	bd80      	pop	{r7, pc}
	...

0810470c <osSemaphoreRelease>:
  }

  return (stat);
}

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 810470c:	b580      	push	{r7, lr}
 810470e:	b086      	sub	sp, #24
 8104710:	af00      	add	r7, sp, #0
 8104712:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8104714:	687b      	ldr	r3, [r7, #4]
 8104716:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8104718:	2300      	movs	r3, #0
 810471a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 810471c:	693b      	ldr	r3, [r7, #16]
 810471e:	2b00      	cmp	r3, #0
 8104720:	d103      	bne.n	810472a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8104722:	f06f 0303 	mvn.w	r3, #3
 8104726:	617b      	str	r3, [r7, #20]
 8104728:	e02c      	b.n	8104784 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810472a:	f3ef 8305 	mrs	r3, IPSR
 810472e:	60fb      	str	r3, [r7, #12]
  return(result);
 8104730:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8104732:	2b00      	cmp	r3, #0
 8104734:	d01a      	beq.n	810476c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8104736:	2300      	movs	r3, #0
 8104738:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 810473a:	f107 0308 	add.w	r3, r7, #8
 810473e:	4619      	mov	r1, r3
 8104740:	6938      	ldr	r0, [r7, #16]
 8104742:	f001 f839 	bl	81057b8 <xQueueGiveFromISR>
 8104746:	4603      	mov	r3, r0
 8104748:	2b01      	cmp	r3, #1
 810474a:	d003      	beq.n	8104754 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 810474c:	f06f 0302 	mvn.w	r3, #2
 8104750:	617b      	str	r3, [r7, #20]
 8104752:	e017      	b.n	8104784 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8104754:	68bb      	ldr	r3, [r7, #8]
 8104756:	2b00      	cmp	r3, #0
 8104758:	d014      	beq.n	8104784 <osSemaphoreRelease+0x78>
 810475a:	4b0d      	ldr	r3, [pc, #52]	@ (8104790 <osSemaphoreRelease+0x84>)
 810475c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8104760:	601a      	str	r2, [r3, #0]
 8104762:	f3bf 8f4f 	dsb	sy
 8104766:	f3bf 8f6f 	isb	sy
 810476a:	e00b      	b.n	8104784 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 810476c:	2300      	movs	r3, #0
 810476e:	2200      	movs	r2, #0
 8104770:	2100      	movs	r1, #0
 8104772:	6938      	ldr	r0, [r7, #16]
 8104774:	f000 fe80 	bl	8105478 <xQueueGenericSend>
 8104778:	4603      	mov	r3, r0
 810477a:	2b01      	cmp	r3, #1
 810477c:	d002      	beq.n	8104784 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 810477e:	f06f 0302 	mvn.w	r3, #2
 8104782:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8104784:	697b      	ldr	r3, [r7, #20]
}
 8104786:	4618      	mov	r0, r3
 8104788:	3718      	adds	r7, #24
 810478a:	46bd      	mov	sp, r7
 810478c:	bd80      	pop	{r7, pc}
 810478e:	bf00      	nop
 8104790:	e000ed04 	.word	0xe000ed04

08104794 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8104794:	b480      	push	{r7}
 8104796:	b085      	sub	sp, #20
 8104798:	af00      	add	r7, sp, #0
 810479a:	60f8      	str	r0, [r7, #12]
 810479c:	60b9      	str	r1, [r7, #8]
 810479e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 81047a0:	68fb      	ldr	r3, [r7, #12]
 81047a2:	4a07      	ldr	r2, [pc, #28]	@ (81047c0 <vApplicationGetIdleTaskMemory+0x2c>)
 81047a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 81047a6:	68bb      	ldr	r3, [r7, #8]
 81047a8:	4a06      	ldr	r2, [pc, #24]	@ (81047c4 <vApplicationGetIdleTaskMemory+0x30>)
 81047aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 81047ac:	687b      	ldr	r3, [r7, #4]
 81047ae:	2280      	movs	r2, #128	@ 0x80
 81047b0:	601a      	str	r2, [r3, #0]
}
 81047b2:	bf00      	nop
 81047b4:	3714      	adds	r7, #20
 81047b6:	46bd      	mov	sp, r7
 81047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047bc:	4770      	bx	lr
 81047be:	bf00      	nop
 81047c0:	100001a8 	.word	0x100001a8
 81047c4:	10000250 	.word	0x10000250

081047c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 81047c8:	b480      	push	{r7}
 81047ca:	b085      	sub	sp, #20
 81047cc:	af00      	add	r7, sp, #0
 81047ce:	60f8      	str	r0, [r7, #12]
 81047d0:	60b9      	str	r1, [r7, #8]
 81047d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 81047d4:	68fb      	ldr	r3, [r7, #12]
 81047d6:	4a07      	ldr	r2, [pc, #28]	@ (81047f4 <vApplicationGetTimerTaskMemory+0x2c>)
 81047d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 81047da:	68bb      	ldr	r3, [r7, #8]
 81047dc:	4a06      	ldr	r2, [pc, #24]	@ (81047f8 <vApplicationGetTimerTaskMemory+0x30>)
 81047de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 81047e0:	687b      	ldr	r3, [r7, #4]
 81047e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81047e6:	601a      	str	r2, [r3, #0]
}
 81047e8:	bf00      	nop
 81047ea:	3714      	adds	r7, #20
 81047ec:	46bd      	mov	sp, r7
 81047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047f2:	4770      	bx	lr
 81047f4:	10000450 	.word	0x10000450
 81047f8:	100004f8 	.word	0x100004f8

081047fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 81047fc:	b580      	push	{r7, lr}
 81047fe:	b08a      	sub	sp, #40	@ 0x28
 8104800:	af00      	add	r7, sp, #0
 8104802:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8104804:	2300      	movs	r3, #0
 8104806:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8104808:	f001 ffb4 	bl	8106774 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 810480c:	4b5c      	ldr	r3, [pc, #368]	@ (8104980 <pvPortMalloc+0x184>)
 810480e:	681b      	ldr	r3, [r3, #0]
 8104810:	2b00      	cmp	r3, #0
 8104812:	d101      	bne.n	8104818 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8104814:	f000 f924 	bl	8104a60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8104818:	4b5a      	ldr	r3, [pc, #360]	@ (8104984 <pvPortMalloc+0x188>)
 810481a:	681a      	ldr	r2, [r3, #0]
 810481c:	687b      	ldr	r3, [r7, #4]
 810481e:	4013      	ands	r3, r2
 8104820:	2b00      	cmp	r3, #0
 8104822:	f040 8095 	bne.w	8104950 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8104826:	687b      	ldr	r3, [r7, #4]
 8104828:	2b00      	cmp	r3, #0
 810482a:	d01e      	beq.n	810486a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 810482c:	2208      	movs	r2, #8
 810482e:	687b      	ldr	r3, [r7, #4]
 8104830:	4413      	add	r3, r2
 8104832:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8104834:	687b      	ldr	r3, [r7, #4]
 8104836:	f003 0307 	and.w	r3, r3, #7
 810483a:	2b00      	cmp	r3, #0
 810483c:	d015      	beq.n	810486a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 810483e:	687b      	ldr	r3, [r7, #4]
 8104840:	f023 0307 	bic.w	r3, r3, #7
 8104844:	3308      	adds	r3, #8
 8104846:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8104848:	687b      	ldr	r3, [r7, #4]
 810484a:	f003 0307 	and.w	r3, r3, #7
 810484e:	2b00      	cmp	r3, #0
 8104850:	d00b      	beq.n	810486a <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8104852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104856:	f383 8811 	msr	BASEPRI, r3
 810485a:	f3bf 8f6f 	isb	sy
 810485e:	f3bf 8f4f 	dsb	sy
 8104862:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8104864:	bf00      	nop
 8104866:	bf00      	nop
 8104868:	e7fd      	b.n	8104866 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 810486a:	687b      	ldr	r3, [r7, #4]
 810486c:	2b00      	cmp	r3, #0
 810486e:	d06f      	beq.n	8104950 <pvPortMalloc+0x154>
 8104870:	4b45      	ldr	r3, [pc, #276]	@ (8104988 <pvPortMalloc+0x18c>)
 8104872:	681b      	ldr	r3, [r3, #0]
 8104874:	687a      	ldr	r2, [r7, #4]
 8104876:	429a      	cmp	r2, r3
 8104878:	d86a      	bhi.n	8104950 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 810487a:	4b44      	ldr	r3, [pc, #272]	@ (810498c <pvPortMalloc+0x190>)
 810487c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 810487e:	4b43      	ldr	r3, [pc, #268]	@ (810498c <pvPortMalloc+0x190>)
 8104880:	681b      	ldr	r3, [r3, #0]
 8104882:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8104884:	e004      	b.n	8104890 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8104886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104888:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 810488a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810488c:	681b      	ldr	r3, [r3, #0]
 810488e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8104890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104892:	685b      	ldr	r3, [r3, #4]
 8104894:	687a      	ldr	r2, [r7, #4]
 8104896:	429a      	cmp	r2, r3
 8104898:	d903      	bls.n	81048a2 <pvPortMalloc+0xa6>
 810489a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810489c:	681b      	ldr	r3, [r3, #0]
 810489e:	2b00      	cmp	r3, #0
 81048a0:	d1f1      	bne.n	8104886 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 81048a2:	4b37      	ldr	r3, [pc, #220]	@ (8104980 <pvPortMalloc+0x184>)
 81048a4:	681b      	ldr	r3, [r3, #0]
 81048a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81048a8:	429a      	cmp	r2, r3
 81048aa:	d051      	beq.n	8104950 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 81048ac:	6a3b      	ldr	r3, [r7, #32]
 81048ae:	681b      	ldr	r3, [r3, #0]
 81048b0:	2208      	movs	r2, #8
 81048b2:	4413      	add	r3, r2
 81048b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 81048b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81048b8:	681a      	ldr	r2, [r3, #0]
 81048ba:	6a3b      	ldr	r3, [r7, #32]
 81048bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 81048be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81048c0:	685a      	ldr	r2, [r3, #4]
 81048c2:	687b      	ldr	r3, [r7, #4]
 81048c4:	1ad2      	subs	r2, r2, r3
 81048c6:	2308      	movs	r3, #8
 81048c8:	005b      	lsls	r3, r3, #1
 81048ca:	429a      	cmp	r2, r3
 81048cc:	d920      	bls.n	8104910 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 81048ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81048d0:	687b      	ldr	r3, [r7, #4]
 81048d2:	4413      	add	r3, r2
 81048d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 81048d6:	69bb      	ldr	r3, [r7, #24]
 81048d8:	f003 0307 	and.w	r3, r3, #7
 81048dc:	2b00      	cmp	r3, #0
 81048de:	d00b      	beq.n	81048f8 <pvPortMalloc+0xfc>
	__asm volatile
 81048e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81048e4:	f383 8811 	msr	BASEPRI, r3
 81048e8:	f3bf 8f6f 	isb	sy
 81048ec:	f3bf 8f4f 	dsb	sy
 81048f0:	613b      	str	r3, [r7, #16]
}
 81048f2:	bf00      	nop
 81048f4:	bf00      	nop
 81048f6:	e7fd      	b.n	81048f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 81048f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81048fa:	685a      	ldr	r2, [r3, #4]
 81048fc:	687b      	ldr	r3, [r7, #4]
 81048fe:	1ad2      	subs	r2, r2, r3
 8104900:	69bb      	ldr	r3, [r7, #24]
 8104902:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8104904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104906:	687a      	ldr	r2, [r7, #4]
 8104908:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 810490a:	69b8      	ldr	r0, [r7, #24]
 810490c:	f000 f90a 	bl	8104b24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8104910:	4b1d      	ldr	r3, [pc, #116]	@ (8104988 <pvPortMalloc+0x18c>)
 8104912:	681a      	ldr	r2, [r3, #0]
 8104914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104916:	685b      	ldr	r3, [r3, #4]
 8104918:	1ad3      	subs	r3, r2, r3
 810491a:	4a1b      	ldr	r2, [pc, #108]	@ (8104988 <pvPortMalloc+0x18c>)
 810491c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 810491e:	4b1a      	ldr	r3, [pc, #104]	@ (8104988 <pvPortMalloc+0x18c>)
 8104920:	681a      	ldr	r2, [r3, #0]
 8104922:	4b1b      	ldr	r3, [pc, #108]	@ (8104990 <pvPortMalloc+0x194>)
 8104924:	681b      	ldr	r3, [r3, #0]
 8104926:	429a      	cmp	r2, r3
 8104928:	d203      	bcs.n	8104932 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 810492a:	4b17      	ldr	r3, [pc, #92]	@ (8104988 <pvPortMalloc+0x18c>)
 810492c:	681b      	ldr	r3, [r3, #0]
 810492e:	4a18      	ldr	r2, [pc, #96]	@ (8104990 <pvPortMalloc+0x194>)
 8104930:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8104932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104934:	685a      	ldr	r2, [r3, #4]
 8104936:	4b13      	ldr	r3, [pc, #76]	@ (8104984 <pvPortMalloc+0x188>)
 8104938:	681b      	ldr	r3, [r3, #0]
 810493a:	431a      	orrs	r2, r3
 810493c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810493e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8104940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104942:	2200      	movs	r2, #0
 8104944:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8104946:	4b13      	ldr	r3, [pc, #76]	@ (8104994 <pvPortMalloc+0x198>)
 8104948:	681b      	ldr	r3, [r3, #0]
 810494a:	3301      	adds	r3, #1
 810494c:	4a11      	ldr	r2, [pc, #68]	@ (8104994 <pvPortMalloc+0x198>)
 810494e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8104950:	f001 ff1e 	bl	8106790 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8104954:	69fb      	ldr	r3, [r7, #28]
 8104956:	f003 0307 	and.w	r3, r3, #7
 810495a:	2b00      	cmp	r3, #0
 810495c:	d00b      	beq.n	8104976 <pvPortMalloc+0x17a>
	__asm volatile
 810495e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104962:	f383 8811 	msr	BASEPRI, r3
 8104966:	f3bf 8f6f 	isb	sy
 810496a:	f3bf 8f4f 	dsb	sy
 810496e:	60fb      	str	r3, [r7, #12]
}
 8104970:	bf00      	nop
 8104972:	bf00      	nop
 8104974:	e7fd      	b.n	8104972 <pvPortMalloc+0x176>
	return pvReturn;
 8104976:	69fb      	ldr	r3, [r7, #28]
}
 8104978:	4618      	mov	r0, r3
 810497a:	3728      	adds	r7, #40	@ 0x28
 810497c:	46bd      	mov	sp, r7
 810497e:	bd80      	pop	{r7, pc}
 8104980:	10004500 	.word	0x10004500
 8104984:	10004514 	.word	0x10004514
 8104988:	10004504 	.word	0x10004504
 810498c:	100044f8 	.word	0x100044f8
 8104990:	10004508 	.word	0x10004508
 8104994:	1000450c 	.word	0x1000450c

08104998 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8104998:	b580      	push	{r7, lr}
 810499a:	b086      	sub	sp, #24
 810499c:	af00      	add	r7, sp, #0
 810499e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 81049a0:	687b      	ldr	r3, [r7, #4]
 81049a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 81049a4:	687b      	ldr	r3, [r7, #4]
 81049a6:	2b00      	cmp	r3, #0
 81049a8:	d04f      	beq.n	8104a4a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 81049aa:	2308      	movs	r3, #8
 81049ac:	425b      	negs	r3, r3
 81049ae:	697a      	ldr	r2, [r7, #20]
 81049b0:	4413      	add	r3, r2
 81049b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 81049b4:	697b      	ldr	r3, [r7, #20]
 81049b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 81049b8:	693b      	ldr	r3, [r7, #16]
 81049ba:	685a      	ldr	r2, [r3, #4]
 81049bc:	4b25      	ldr	r3, [pc, #148]	@ (8104a54 <vPortFree+0xbc>)
 81049be:	681b      	ldr	r3, [r3, #0]
 81049c0:	4013      	ands	r3, r2
 81049c2:	2b00      	cmp	r3, #0
 81049c4:	d10b      	bne.n	81049de <vPortFree+0x46>
	__asm volatile
 81049c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81049ca:	f383 8811 	msr	BASEPRI, r3
 81049ce:	f3bf 8f6f 	isb	sy
 81049d2:	f3bf 8f4f 	dsb	sy
 81049d6:	60fb      	str	r3, [r7, #12]
}
 81049d8:	bf00      	nop
 81049da:	bf00      	nop
 81049dc:	e7fd      	b.n	81049da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 81049de:	693b      	ldr	r3, [r7, #16]
 81049e0:	681b      	ldr	r3, [r3, #0]
 81049e2:	2b00      	cmp	r3, #0
 81049e4:	d00b      	beq.n	81049fe <vPortFree+0x66>
	__asm volatile
 81049e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81049ea:	f383 8811 	msr	BASEPRI, r3
 81049ee:	f3bf 8f6f 	isb	sy
 81049f2:	f3bf 8f4f 	dsb	sy
 81049f6:	60bb      	str	r3, [r7, #8]
}
 81049f8:	bf00      	nop
 81049fa:	bf00      	nop
 81049fc:	e7fd      	b.n	81049fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 81049fe:	693b      	ldr	r3, [r7, #16]
 8104a00:	685a      	ldr	r2, [r3, #4]
 8104a02:	4b14      	ldr	r3, [pc, #80]	@ (8104a54 <vPortFree+0xbc>)
 8104a04:	681b      	ldr	r3, [r3, #0]
 8104a06:	4013      	ands	r3, r2
 8104a08:	2b00      	cmp	r3, #0
 8104a0a:	d01e      	beq.n	8104a4a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8104a0c:	693b      	ldr	r3, [r7, #16]
 8104a0e:	681b      	ldr	r3, [r3, #0]
 8104a10:	2b00      	cmp	r3, #0
 8104a12:	d11a      	bne.n	8104a4a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8104a14:	693b      	ldr	r3, [r7, #16]
 8104a16:	685a      	ldr	r2, [r3, #4]
 8104a18:	4b0e      	ldr	r3, [pc, #56]	@ (8104a54 <vPortFree+0xbc>)
 8104a1a:	681b      	ldr	r3, [r3, #0]
 8104a1c:	43db      	mvns	r3, r3
 8104a1e:	401a      	ands	r2, r3
 8104a20:	693b      	ldr	r3, [r7, #16]
 8104a22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8104a24:	f001 fea6 	bl	8106774 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8104a28:	693b      	ldr	r3, [r7, #16]
 8104a2a:	685a      	ldr	r2, [r3, #4]
 8104a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8104a58 <vPortFree+0xc0>)
 8104a2e:	681b      	ldr	r3, [r3, #0]
 8104a30:	4413      	add	r3, r2
 8104a32:	4a09      	ldr	r2, [pc, #36]	@ (8104a58 <vPortFree+0xc0>)
 8104a34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8104a36:	6938      	ldr	r0, [r7, #16]
 8104a38:	f000 f874 	bl	8104b24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8104a3c:	4b07      	ldr	r3, [pc, #28]	@ (8104a5c <vPortFree+0xc4>)
 8104a3e:	681b      	ldr	r3, [r3, #0]
 8104a40:	3301      	adds	r3, #1
 8104a42:	4a06      	ldr	r2, [pc, #24]	@ (8104a5c <vPortFree+0xc4>)
 8104a44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8104a46:	f001 fea3 	bl	8106790 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8104a4a:	bf00      	nop
 8104a4c:	3718      	adds	r7, #24
 8104a4e:	46bd      	mov	sp, r7
 8104a50:	bd80      	pop	{r7, pc}
 8104a52:	bf00      	nop
 8104a54:	10004514 	.word	0x10004514
 8104a58:	10004504 	.word	0x10004504
 8104a5c:	10004510 	.word	0x10004510

08104a60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8104a60:	b480      	push	{r7}
 8104a62:	b085      	sub	sp, #20
 8104a64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8104a66:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8104a6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8104a6c:	4b27      	ldr	r3, [pc, #156]	@ (8104b0c <prvHeapInit+0xac>)
 8104a6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8104a70:	68fb      	ldr	r3, [r7, #12]
 8104a72:	f003 0307 	and.w	r3, r3, #7
 8104a76:	2b00      	cmp	r3, #0
 8104a78:	d00c      	beq.n	8104a94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8104a7a:	68fb      	ldr	r3, [r7, #12]
 8104a7c:	3307      	adds	r3, #7
 8104a7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8104a80:	68fb      	ldr	r3, [r7, #12]
 8104a82:	f023 0307 	bic.w	r3, r3, #7
 8104a86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8104a88:	68ba      	ldr	r2, [r7, #8]
 8104a8a:	68fb      	ldr	r3, [r7, #12]
 8104a8c:	1ad3      	subs	r3, r2, r3
 8104a8e:	4a1f      	ldr	r2, [pc, #124]	@ (8104b0c <prvHeapInit+0xac>)
 8104a90:	4413      	add	r3, r2
 8104a92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8104a94:	68fb      	ldr	r3, [r7, #12]
 8104a96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8104a98:	4a1d      	ldr	r2, [pc, #116]	@ (8104b10 <prvHeapInit+0xb0>)
 8104a9a:	687b      	ldr	r3, [r7, #4]
 8104a9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8104a9e:	4b1c      	ldr	r3, [pc, #112]	@ (8104b10 <prvHeapInit+0xb0>)
 8104aa0:	2200      	movs	r2, #0
 8104aa2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8104aa4:	687b      	ldr	r3, [r7, #4]
 8104aa6:	68ba      	ldr	r2, [r7, #8]
 8104aa8:	4413      	add	r3, r2
 8104aaa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8104aac:	2208      	movs	r2, #8
 8104aae:	68fb      	ldr	r3, [r7, #12]
 8104ab0:	1a9b      	subs	r3, r3, r2
 8104ab2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8104ab4:	68fb      	ldr	r3, [r7, #12]
 8104ab6:	f023 0307 	bic.w	r3, r3, #7
 8104aba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8104abc:	68fb      	ldr	r3, [r7, #12]
 8104abe:	4a15      	ldr	r2, [pc, #84]	@ (8104b14 <prvHeapInit+0xb4>)
 8104ac0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8104ac2:	4b14      	ldr	r3, [pc, #80]	@ (8104b14 <prvHeapInit+0xb4>)
 8104ac4:	681b      	ldr	r3, [r3, #0]
 8104ac6:	2200      	movs	r2, #0
 8104ac8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8104aca:	4b12      	ldr	r3, [pc, #72]	@ (8104b14 <prvHeapInit+0xb4>)
 8104acc:	681b      	ldr	r3, [r3, #0]
 8104ace:	2200      	movs	r2, #0
 8104ad0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8104ad2:	687b      	ldr	r3, [r7, #4]
 8104ad4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8104ad6:	683b      	ldr	r3, [r7, #0]
 8104ad8:	68fa      	ldr	r2, [r7, #12]
 8104ada:	1ad2      	subs	r2, r2, r3
 8104adc:	683b      	ldr	r3, [r7, #0]
 8104ade:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8104ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8104b14 <prvHeapInit+0xb4>)
 8104ae2:	681a      	ldr	r2, [r3, #0]
 8104ae4:	683b      	ldr	r3, [r7, #0]
 8104ae6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8104ae8:	683b      	ldr	r3, [r7, #0]
 8104aea:	685b      	ldr	r3, [r3, #4]
 8104aec:	4a0a      	ldr	r2, [pc, #40]	@ (8104b18 <prvHeapInit+0xb8>)
 8104aee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8104af0:	683b      	ldr	r3, [r7, #0]
 8104af2:	685b      	ldr	r3, [r3, #4]
 8104af4:	4a09      	ldr	r2, [pc, #36]	@ (8104b1c <prvHeapInit+0xbc>)
 8104af6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8104af8:	4b09      	ldr	r3, [pc, #36]	@ (8104b20 <prvHeapInit+0xc0>)
 8104afa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8104afe:	601a      	str	r2, [r3, #0]
}
 8104b00:	bf00      	nop
 8104b02:	3714      	adds	r7, #20
 8104b04:	46bd      	mov	sp, r7
 8104b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b0a:	4770      	bx	lr
 8104b0c:	100008f8 	.word	0x100008f8
 8104b10:	100044f8 	.word	0x100044f8
 8104b14:	10004500 	.word	0x10004500
 8104b18:	10004508 	.word	0x10004508
 8104b1c:	10004504 	.word	0x10004504
 8104b20:	10004514 	.word	0x10004514

08104b24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8104b24:	b480      	push	{r7}
 8104b26:	b085      	sub	sp, #20
 8104b28:	af00      	add	r7, sp, #0
 8104b2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8104b2c:	4b28      	ldr	r3, [pc, #160]	@ (8104bd0 <prvInsertBlockIntoFreeList+0xac>)
 8104b2e:	60fb      	str	r3, [r7, #12]
 8104b30:	e002      	b.n	8104b38 <prvInsertBlockIntoFreeList+0x14>
 8104b32:	68fb      	ldr	r3, [r7, #12]
 8104b34:	681b      	ldr	r3, [r3, #0]
 8104b36:	60fb      	str	r3, [r7, #12]
 8104b38:	68fb      	ldr	r3, [r7, #12]
 8104b3a:	681b      	ldr	r3, [r3, #0]
 8104b3c:	687a      	ldr	r2, [r7, #4]
 8104b3e:	429a      	cmp	r2, r3
 8104b40:	d8f7      	bhi.n	8104b32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8104b42:	68fb      	ldr	r3, [r7, #12]
 8104b44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8104b46:	68fb      	ldr	r3, [r7, #12]
 8104b48:	685b      	ldr	r3, [r3, #4]
 8104b4a:	68ba      	ldr	r2, [r7, #8]
 8104b4c:	4413      	add	r3, r2
 8104b4e:	687a      	ldr	r2, [r7, #4]
 8104b50:	429a      	cmp	r2, r3
 8104b52:	d108      	bne.n	8104b66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8104b54:	68fb      	ldr	r3, [r7, #12]
 8104b56:	685a      	ldr	r2, [r3, #4]
 8104b58:	687b      	ldr	r3, [r7, #4]
 8104b5a:	685b      	ldr	r3, [r3, #4]
 8104b5c:	441a      	add	r2, r3
 8104b5e:	68fb      	ldr	r3, [r7, #12]
 8104b60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8104b62:	68fb      	ldr	r3, [r7, #12]
 8104b64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8104b66:	687b      	ldr	r3, [r7, #4]
 8104b68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8104b6a:	687b      	ldr	r3, [r7, #4]
 8104b6c:	685b      	ldr	r3, [r3, #4]
 8104b6e:	68ba      	ldr	r2, [r7, #8]
 8104b70:	441a      	add	r2, r3
 8104b72:	68fb      	ldr	r3, [r7, #12]
 8104b74:	681b      	ldr	r3, [r3, #0]
 8104b76:	429a      	cmp	r2, r3
 8104b78:	d118      	bne.n	8104bac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8104b7a:	68fb      	ldr	r3, [r7, #12]
 8104b7c:	681a      	ldr	r2, [r3, #0]
 8104b7e:	4b15      	ldr	r3, [pc, #84]	@ (8104bd4 <prvInsertBlockIntoFreeList+0xb0>)
 8104b80:	681b      	ldr	r3, [r3, #0]
 8104b82:	429a      	cmp	r2, r3
 8104b84:	d00d      	beq.n	8104ba2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8104b86:	687b      	ldr	r3, [r7, #4]
 8104b88:	685a      	ldr	r2, [r3, #4]
 8104b8a:	68fb      	ldr	r3, [r7, #12]
 8104b8c:	681b      	ldr	r3, [r3, #0]
 8104b8e:	685b      	ldr	r3, [r3, #4]
 8104b90:	441a      	add	r2, r3
 8104b92:	687b      	ldr	r3, [r7, #4]
 8104b94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8104b96:	68fb      	ldr	r3, [r7, #12]
 8104b98:	681b      	ldr	r3, [r3, #0]
 8104b9a:	681a      	ldr	r2, [r3, #0]
 8104b9c:	687b      	ldr	r3, [r7, #4]
 8104b9e:	601a      	str	r2, [r3, #0]
 8104ba0:	e008      	b.n	8104bb4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8104ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8104bd4 <prvInsertBlockIntoFreeList+0xb0>)
 8104ba4:	681a      	ldr	r2, [r3, #0]
 8104ba6:	687b      	ldr	r3, [r7, #4]
 8104ba8:	601a      	str	r2, [r3, #0]
 8104baa:	e003      	b.n	8104bb4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8104bac:	68fb      	ldr	r3, [r7, #12]
 8104bae:	681a      	ldr	r2, [r3, #0]
 8104bb0:	687b      	ldr	r3, [r7, #4]
 8104bb2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8104bb4:	68fa      	ldr	r2, [r7, #12]
 8104bb6:	687b      	ldr	r3, [r7, #4]
 8104bb8:	429a      	cmp	r2, r3
 8104bba:	d002      	beq.n	8104bc2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8104bbc:	68fb      	ldr	r3, [r7, #12]
 8104bbe:	687a      	ldr	r2, [r7, #4]
 8104bc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8104bc2:	bf00      	nop
 8104bc4:	3714      	adds	r7, #20
 8104bc6:	46bd      	mov	sp, r7
 8104bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104bcc:	4770      	bx	lr
 8104bce:	bf00      	nop
 8104bd0:	100044f8 	.word	0x100044f8
 8104bd4:	10004500 	.word	0x10004500

08104bd8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8104bd8:	b480      	push	{r7}
 8104bda:	b083      	sub	sp, #12
 8104bdc:	af00      	add	r7, sp, #0
 8104bde:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8104be0:	687b      	ldr	r3, [r7, #4]
 8104be2:	f103 0208 	add.w	r2, r3, #8
 8104be6:	687b      	ldr	r3, [r7, #4]
 8104be8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8104bea:	687b      	ldr	r3, [r7, #4]
 8104bec:	f04f 32ff 	mov.w	r2, #4294967295
 8104bf0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8104bf2:	687b      	ldr	r3, [r7, #4]
 8104bf4:	f103 0208 	add.w	r2, r3, #8
 8104bf8:	687b      	ldr	r3, [r7, #4]
 8104bfa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8104bfc:	687b      	ldr	r3, [r7, #4]
 8104bfe:	f103 0208 	add.w	r2, r3, #8
 8104c02:	687b      	ldr	r3, [r7, #4]
 8104c04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8104c06:	687b      	ldr	r3, [r7, #4]
 8104c08:	2200      	movs	r2, #0
 8104c0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8104c0c:	bf00      	nop
 8104c0e:	370c      	adds	r7, #12
 8104c10:	46bd      	mov	sp, r7
 8104c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c16:	4770      	bx	lr

08104c18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8104c18:	b480      	push	{r7}
 8104c1a:	b083      	sub	sp, #12
 8104c1c:	af00      	add	r7, sp, #0
 8104c1e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8104c20:	687b      	ldr	r3, [r7, #4]
 8104c22:	2200      	movs	r2, #0
 8104c24:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8104c26:	bf00      	nop
 8104c28:	370c      	adds	r7, #12
 8104c2a:	46bd      	mov	sp, r7
 8104c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c30:	4770      	bx	lr

08104c32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8104c32:	b480      	push	{r7}
 8104c34:	b085      	sub	sp, #20
 8104c36:	af00      	add	r7, sp, #0
 8104c38:	6078      	str	r0, [r7, #4]
 8104c3a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8104c3c:	687b      	ldr	r3, [r7, #4]
 8104c3e:	685b      	ldr	r3, [r3, #4]
 8104c40:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8104c42:	683b      	ldr	r3, [r7, #0]
 8104c44:	68fa      	ldr	r2, [r7, #12]
 8104c46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8104c48:	68fb      	ldr	r3, [r7, #12]
 8104c4a:	689a      	ldr	r2, [r3, #8]
 8104c4c:	683b      	ldr	r3, [r7, #0]
 8104c4e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8104c50:	68fb      	ldr	r3, [r7, #12]
 8104c52:	689b      	ldr	r3, [r3, #8]
 8104c54:	683a      	ldr	r2, [r7, #0]
 8104c56:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8104c58:	68fb      	ldr	r3, [r7, #12]
 8104c5a:	683a      	ldr	r2, [r7, #0]
 8104c5c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8104c5e:	683b      	ldr	r3, [r7, #0]
 8104c60:	687a      	ldr	r2, [r7, #4]
 8104c62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8104c64:	687b      	ldr	r3, [r7, #4]
 8104c66:	681b      	ldr	r3, [r3, #0]
 8104c68:	1c5a      	adds	r2, r3, #1
 8104c6a:	687b      	ldr	r3, [r7, #4]
 8104c6c:	601a      	str	r2, [r3, #0]
}
 8104c6e:	bf00      	nop
 8104c70:	3714      	adds	r7, #20
 8104c72:	46bd      	mov	sp, r7
 8104c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c78:	4770      	bx	lr

08104c7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8104c7a:	b480      	push	{r7}
 8104c7c:	b085      	sub	sp, #20
 8104c7e:	af00      	add	r7, sp, #0
 8104c80:	6078      	str	r0, [r7, #4]
 8104c82:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8104c84:	683b      	ldr	r3, [r7, #0]
 8104c86:	681b      	ldr	r3, [r3, #0]
 8104c88:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8104c8a:	68bb      	ldr	r3, [r7, #8]
 8104c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104c90:	d103      	bne.n	8104c9a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8104c92:	687b      	ldr	r3, [r7, #4]
 8104c94:	691b      	ldr	r3, [r3, #16]
 8104c96:	60fb      	str	r3, [r7, #12]
 8104c98:	e00c      	b.n	8104cb4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8104c9a:	687b      	ldr	r3, [r7, #4]
 8104c9c:	3308      	adds	r3, #8
 8104c9e:	60fb      	str	r3, [r7, #12]
 8104ca0:	e002      	b.n	8104ca8 <vListInsert+0x2e>
 8104ca2:	68fb      	ldr	r3, [r7, #12]
 8104ca4:	685b      	ldr	r3, [r3, #4]
 8104ca6:	60fb      	str	r3, [r7, #12]
 8104ca8:	68fb      	ldr	r3, [r7, #12]
 8104caa:	685b      	ldr	r3, [r3, #4]
 8104cac:	681b      	ldr	r3, [r3, #0]
 8104cae:	68ba      	ldr	r2, [r7, #8]
 8104cb0:	429a      	cmp	r2, r3
 8104cb2:	d2f6      	bcs.n	8104ca2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8104cb4:	68fb      	ldr	r3, [r7, #12]
 8104cb6:	685a      	ldr	r2, [r3, #4]
 8104cb8:	683b      	ldr	r3, [r7, #0]
 8104cba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8104cbc:	683b      	ldr	r3, [r7, #0]
 8104cbe:	685b      	ldr	r3, [r3, #4]
 8104cc0:	683a      	ldr	r2, [r7, #0]
 8104cc2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8104cc4:	683b      	ldr	r3, [r7, #0]
 8104cc6:	68fa      	ldr	r2, [r7, #12]
 8104cc8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8104cca:	68fb      	ldr	r3, [r7, #12]
 8104ccc:	683a      	ldr	r2, [r7, #0]
 8104cce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8104cd0:	683b      	ldr	r3, [r7, #0]
 8104cd2:	687a      	ldr	r2, [r7, #4]
 8104cd4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8104cd6:	687b      	ldr	r3, [r7, #4]
 8104cd8:	681b      	ldr	r3, [r3, #0]
 8104cda:	1c5a      	adds	r2, r3, #1
 8104cdc:	687b      	ldr	r3, [r7, #4]
 8104cde:	601a      	str	r2, [r3, #0]
}
 8104ce0:	bf00      	nop
 8104ce2:	3714      	adds	r7, #20
 8104ce4:	46bd      	mov	sp, r7
 8104ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104cea:	4770      	bx	lr

08104cec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8104cec:	b480      	push	{r7}
 8104cee:	b085      	sub	sp, #20
 8104cf0:	af00      	add	r7, sp, #0
 8104cf2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8104cf4:	687b      	ldr	r3, [r7, #4]
 8104cf6:	691b      	ldr	r3, [r3, #16]
 8104cf8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8104cfa:	687b      	ldr	r3, [r7, #4]
 8104cfc:	685b      	ldr	r3, [r3, #4]
 8104cfe:	687a      	ldr	r2, [r7, #4]
 8104d00:	6892      	ldr	r2, [r2, #8]
 8104d02:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8104d04:	687b      	ldr	r3, [r7, #4]
 8104d06:	689b      	ldr	r3, [r3, #8]
 8104d08:	687a      	ldr	r2, [r7, #4]
 8104d0a:	6852      	ldr	r2, [r2, #4]
 8104d0c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8104d0e:	68fb      	ldr	r3, [r7, #12]
 8104d10:	685b      	ldr	r3, [r3, #4]
 8104d12:	687a      	ldr	r2, [r7, #4]
 8104d14:	429a      	cmp	r2, r3
 8104d16:	d103      	bne.n	8104d20 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8104d18:	687b      	ldr	r3, [r7, #4]
 8104d1a:	689a      	ldr	r2, [r3, #8]
 8104d1c:	68fb      	ldr	r3, [r7, #12]
 8104d1e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8104d20:	687b      	ldr	r3, [r7, #4]
 8104d22:	2200      	movs	r2, #0
 8104d24:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8104d26:	68fb      	ldr	r3, [r7, #12]
 8104d28:	681b      	ldr	r3, [r3, #0]
 8104d2a:	1e5a      	subs	r2, r3, #1
 8104d2c:	68fb      	ldr	r3, [r7, #12]
 8104d2e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8104d30:	68fb      	ldr	r3, [r7, #12]
 8104d32:	681b      	ldr	r3, [r3, #0]
}
 8104d34:	4618      	mov	r0, r3
 8104d36:	3714      	adds	r7, #20
 8104d38:	46bd      	mov	sp, r7
 8104d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d3e:	4770      	bx	lr

08104d40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8104d40:	b480      	push	{r7}
 8104d42:	b085      	sub	sp, #20
 8104d44:	af00      	add	r7, sp, #0
 8104d46:	60f8      	str	r0, [r7, #12]
 8104d48:	60b9      	str	r1, [r7, #8]
 8104d4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8104d4c:	68fb      	ldr	r3, [r7, #12]
 8104d4e:	3b04      	subs	r3, #4
 8104d50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8104d52:	68fb      	ldr	r3, [r7, #12]
 8104d54:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8104d58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8104d5a:	68fb      	ldr	r3, [r7, #12]
 8104d5c:	3b04      	subs	r3, #4
 8104d5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8104d60:	68bb      	ldr	r3, [r7, #8]
 8104d62:	f023 0201 	bic.w	r2, r3, #1
 8104d66:	68fb      	ldr	r3, [r7, #12]
 8104d68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8104d6a:	68fb      	ldr	r3, [r7, #12]
 8104d6c:	3b04      	subs	r3, #4
 8104d6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8104d70:	4a0c      	ldr	r2, [pc, #48]	@ (8104da4 <pxPortInitialiseStack+0x64>)
 8104d72:	68fb      	ldr	r3, [r7, #12]
 8104d74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8104d76:	68fb      	ldr	r3, [r7, #12]
 8104d78:	3b14      	subs	r3, #20
 8104d7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8104d7c:	687a      	ldr	r2, [r7, #4]
 8104d7e:	68fb      	ldr	r3, [r7, #12]
 8104d80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8104d82:	68fb      	ldr	r3, [r7, #12]
 8104d84:	3b04      	subs	r3, #4
 8104d86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8104d88:	68fb      	ldr	r3, [r7, #12]
 8104d8a:	f06f 0202 	mvn.w	r2, #2
 8104d8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8104d90:	68fb      	ldr	r3, [r7, #12]
 8104d92:	3b20      	subs	r3, #32
 8104d94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8104d96:	68fb      	ldr	r3, [r7, #12]
}
 8104d98:	4618      	mov	r0, r3
 8104d9a:	3714      	adds	r7, #20
 8104d9c:	46bd      	mov	sp, r7
 8104d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104da2:	4770      	bx	lr
 8104da4:	08104da9 	.word	0x08104da9

08104da8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8104da8:	b480      	push	{r7}
 8104daa:	b085      	sub	sp, #20
 8104dac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8104dae:	2300      	movs	r3, #0
 8104db0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8104db2:	4b13      	ldr	r3, [pc, #76]	@ (8104e00 <prvTaskExitError+0x58>)
 8104db4:	681b      	ldr	r3, [r3, #0]
 8104db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104dba:	d00b      	beq.n	8104dd4 <prvTaskExitError+0x2c>
	__asm volatile
 8104dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104dc0:	f383 8811 	msr	BASEPRI, r3
 8104dc4:	f3bf 8f6f 	isb	sy
 8104dc8:	f3bf 8f4f 	dsb	sy
 8104dcc:	60fb      	str	r3, [r7, #12]
}
 8104dce:	bf00      	nop
 8104dd0:	bf00      	nop
 8104dd2:	e7fd      	b.n	8104dd0 <prvTaskExitError+0x28>
	__asm volatile
 8104dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104dd8:	f383 8811 	msr	BASEPRI, r3
 8104ddc:	f3bf 8f6f 	isb	sy
 8104de0:	f3bf 8f4f 	dsb	sy
 8104de4:	60bb      	str	r3, [r7, #8]
}
 8104de6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8104de8:	bf00      	nop
 8104dea:	687b      	ldr	r3, [r7, #4]
 8104dec:	2b00      	cmp	r3, #0
 8104dee:	d0fc      	beq.n	8104dea <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8104df0:	bf00      	nop
 8104df2:	bf00      	nop
 8104df4:	3714      	adds	r7, #20
 8104df6:	46bd      	mov	sp, r7
 8104df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104dfc:	4770      	bx	lr
 8104dfe:	bf00      	nop
 8104e00:	10000010 	.word	0x10000010
	...

08104e10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8104e10:	4b07      	ldr	r3, [pc, #28]	@ (8104e30 <pxCurrentTCBConst2>)
 8104e12:	6819      	ldr	r1, [r3, #0]
 8104e14:	6808      	ldr	r0, [r1, #0]
 8104e16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8104e1a:	f380 8809 	msr	PSP, r0
 8104e1e:	f3bf 8f6f 	isb	sy
 8104e22:	f04f 0000 	mov.w	r0, #0
 8104e26:	f380 8811 	msr	BASEPRI, r0
 8104e2a:	4770      	bx	lr
 8104e2c:	f3af 8000 	nop.w

08104e30 <pxCurrentTCBConst2>:
 8104e30:	10004560 	.word	0x10004560
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8104e34:	bf00      	nop
 8104e36:	bf00      	nop

08104e38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8104e38:	4808      	ldr	r0, [pc, #32]	@ (8104e5c <prvPortStartFirstTask+0x24>)
 8104e3a:	6800      	ldr	r0, [r0, #0]
 8104e3c:	6800      	ldr	r0, [r0, #0]
 8104e3e:	f380 8808 	msr	MSP, r0
 8104e42:	f04f 0000 	mov.w	r0, #0
 8104e46:	f380 8814 	msr	CONTROL, r0
 8104e4a:	b662      	cpsie	i
 8104e4c:	b661      	cpsie	f
 8104e4e:	f3bf 8f4f 	dsb	sy
 8104e52:	f3bf 8f6f 	isb	sy
 8104e56:	df00      	svc	0
 8104e58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8104e5a:	bf00      	nop
 8104e5c:	e000ed08 	.word	0xe000ed08

08104e60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8104e60:	b580      	push	{r7, lr}
 8104e62:	b086      	sub	sp, #24
 8104e64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8104e66:	4b47      	ldr	r3, [pc, #284]	@ (8104f84 <xPortStartScheduler+0x124>)
 8104e68:	681b      	ldr	r3, [r3, #0]
 8104e6a:	4a47      	ldr	r2, [pc, #284]	@ (8104f88 <xPortStartScheduler+0x128>)
 8104e6c:	4293      	cmp	r3, r2
 8104e6e:	d10b      	bne.n	8104e88 <xPortStartScheduler+0x28>
	__asm volatile
 8104e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104e74:	f383 8811 	msr	BASEPRI, r3
 8104e78:	f3bf 8f6f 	isb	sy
 8104e7c:	f3bf 8f4f 	dsb	sy
 8104e80:	613b      	str	r3, [r7, #16]
}
 8104e82:	bf00      	nop
 8104e84:	bf00      	nop
 8104e86:	e7fd      	b.n	8104e84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8104e88:	4b3e      	ldr	r3, [pc, #248]	@ (8104f84 <xPortStartScheduler+0x124>)
 8104e8a:	681b      	ldr	r3, [r3, #0]
 8104e8c:	4a3f      	ldr	r2, [pc, #252]	@ (8104f8c <xPortStartScheduler+0x12c>)
 8104e8e:	4293      	cmp	r3, r2
 8104e90:	d10b      	bne.n	8104eaa <xPortStartScheduler+0x4a>
	__asm volatile
 8104e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104e96:	f383 8811 	msr	BASEPRI, r3
 8104e9a:	f3bf 8f6f 	isb	sy
 8104e9e:	f3bf 8f4f 	dsb	sy
 8104ea2:	60fb      	str	r3, [r7, #12]
}
 8104ea4:	bf00      	nop
 8104ea6:	bf00      	nop
 8104ea8:	e7fd      	b.n	8104ea6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8104eaa:	4b39      	ldr	r3, [pc, #228]	@ (8104f90 <xPortStartScheduler+0x130>)
 8104eac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8104eae:	697b      	ldr	r3, [r7, #20]
 8104eb0:	781b      	ldrb	r3, [r3, #0]
 8104eb2:	b2db      	uxtb	r3, r3
 8104eb4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8104eb6:	697b      	ldr	r3, [r7, #20]
 8104eb8:	22ff      	movs	r2, #255	@ 0xff
 8104eba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8104ebc:	697b      	ldr	r3, [r7, #20]
 8104ebe:	781b      	ldrb	r3, [r3, #0]
 8104ec0:	b2db      	uxtb	r3, r3
 8104ec2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8104ec4:	78fb      	ldrb	r3, [r7, #3]
 8104ec6:	b2db      	uxtb	r3, r3
 8104ec8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8104ecc:	b2da      	uxtb	r2, r3
 8104ece:	4b31      	ldr	r3, [pc, #196]	@ (8104f94 <xPortStartScheduler+0x134>)
 8104ed0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8104ed2:	4b31      	ldr	r3, [pc, #196]	@ (8104f98 <xPortStartScheduler+0x138>)
 8104ed4:	2207      	movs	r2, #7
 8104ed6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8104ed8:	e009      	b.n	8104eee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8104eda:	4b2f      	ldr	r3, [pc, #188]	@ (8104f98 <xPortStartScheduler+0x138>)
 8104edc:	681b      	ldr	r3, [r3, #0]
 8104ede:	3b01      	subs	r3, #1
 8104ee0:	4a2d      	ldr	r2, [pc, #180]	@ (8104f98 <xPortStartScheduler+0x138>)
 8104ee2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8104ee4:	78fb      	ldrb	r3, [r7, #3]
 8104ee6:	b2db      	uxtb	r3, r3
 8104ee8:	005b      	lsls	r3, r3, #1
 8104eea:	b2db      	uxtb	r3, r3
 8104eec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8104eee:	78fb      	ldrb	r3, [r7, #3]
 8104ef0:	b2db      	uxtb	r3, r3
 8104ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8104ef6:	2b80      	cmp	r3, #128	@ 0x80
 8104ef8:	d0ef      	beq.n	8104eda <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8104efa:	4b27      	ldr	r3, [pc, #156]	@ (8104f98 <xPortStartScheduler+0x138>)
 8104efc:	681b      	ldr	r3, [r3, #0]
 8104efe:	f1c3 0307 	rsb	r3, r3, #7
 8104f02:	2b04      	cmp	r3, #4
 8104f04:	d00b      	beq.n	8104f1e <xPortStartScheduler+0xbe>
	__asm volatile
 8104f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104f0a:	f383 8811 	msr	BASEPRI, r3
 8104f0e:	f3bf 8f6f 	isb	sy
 8104f12:	f3bf 8f4f 	dsb	sy
 8104f16:	60bb      	str	r3, [r7, #8]
}
 8104f18:	bf00      	nop
 8104f1a:	bf00      	nop
 8104f1c:	e7fd      	b.n	8104f1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8104f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8104f98 <xPortStartScheduler+0x138>)
 8104f20:	681b      	ldr	r3, [r3, #0]
 8104f22:	021b      	lsls	r3, r3, #8
 8104f24:	4a1c      	ldr	r2, [pc, #112]	@ (8104f98 <xPortStartScheduler+0x138>)
 8104f26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8104f28:	4b1b      	ldr	r3, [pc, #108]	@ (8104f98 <xPortStartScheduler+0x138>)
 8104f2a:	681b      	ldr	r3, [r3, #0]
 8104f2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8104f30:	4a19      	ldr	r2, [pc, #100]	@ (8104f98 <xPortStartScheduler+0x138>)
 8104f32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8104f34:	687b      	ldr	r3, [r7, #4]
 8104f36:	b2da      	uxtb	r2, r3
 8104f38:	697b      	ldr	r3, [r7, #20]
 8104f3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8104f3c:	4b17      	ldr	r3, [pc, #92]	@ (8104f9c <xPortStartScheduler+0x13c>)
 8104f3e:	681b      	ldr	r3, [r3, #0]
 8104f40:	4a16      	ldr	r2, [pc, #88]	@ (8104f9c <xPortStartScheduler+0x13c>)
 8104f42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8104f46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8104f48:	4b14      	ldr	r3, [pc, #80]	@ (8104f9c <xPortStartScheduler+0x13c>)
 8104f4a:	681b      	ldr	r3, [r3, #0]
 8104f4c:	4a13      	ldr	r2, [pc, #76]	@ (8104f9c <xPortStartScheduler+0x13c>)
 8104f4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8104f52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8104f54:	f000 f8da 	bl	810510c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8104f58:	4b11      	ldr	r3, [pc, #68]	@ (8104fa0 <xPortStartScheduler+0x140>)
 8104f5a:	2200      	movs	r2, #0
 8104f5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8104f5e:	f000 f8f9 	bl	8105154 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8104f62:	4b10      	ldr	r3, [pc, #64]	@ (8104fa4 <xPortStartScheduler+0x144>)
 8104f64:	681b      	ldr	r3, [r3, #0]
 8104f66:	4a0f      	ldr	r2, [pc, #60]	@ (8104fa4 <xPortStartScheduler+0x144>)
 8104f68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8104f6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8104f6e:	f7ff ff63 	bl	8104e38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8104f72:	f001 fd75 	bl	8106a60 <vTaskSwitchContext>
	prvTaskExitError();
 8104f76:	f7ff ff17 	bl	8104da8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8104f7a:	2300      	movs	r3, #0
}
 8104f7c:	4618      	mov	r0, r3
 8104f7e:	3718      	adds	r7, #24
 8104f80:	46bd      	mov	sp, r7
 8104f82:	bd80      	pop	{r7, pc}
 8104f84:	e000ed00 	.word	0xe000ed00
 8104f88:	410fc271 	.word	0x410fc271
 8104f8c:	410fc270 	.word	0x410fc270
 8104f90:	e000e400 	.word	0xe000e400
 8104f94:	10004518 	.word	0x10004518
 8104f98:	1000451c 	.word	0x1000451c
 8104f9c:	e000ed20 	.word	0xe000ed20
 8104fa0:	10000010 	.word	0x10000010
 8104fa4:	e000ef34 	.word	0xe000ef34

08104fa8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8104fa8:	b480      	push	{r7}
 8104faa:	b083      	sub	sp, #12
 8104fac:	af00      	add	r7, sp, #0
	__asm volatile
 8104fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104fb2:	f383 8811 	msr	BASEPRI, r3
 8104fb6:	f3bf 8f6f 	isb	sy
 8104fba:	f3bf 8f4f 	dsb	sy
 8104fbe:	607b      	str	r3, [r7, #4]
}
 8104fc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8104fc2:	4b10      	ldr	r3, [pc, #64]	@ (8105004 <vPortEnterCritical+0x5c>)
 8104fc4:	681b      	ldr	r3, [r3, #0]
 8104fc6:	3301      	adds	r3, #1
 8104fc8:	4a0e      	ldr	r2, [pc, #56]	@ (8105004 <vPortEnterCritical+0x5c>)
 8104fca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8104fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8105004 <vPortEnterCritical+0x5c>)
 8104fce:	681b      	ldr	r3, [r3, #0]
 8104fd0:	2b01      	cmp	r3, #1
 8104fd2:	d110      	bne.n	8104ff6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8104fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8105008 <vPortEnterCritical+0x60>)
 8104fd6:	681b      	ldr	r3, [r3, #0]
 8104fd8:	b2db      	uxtb	r3, r3
 8104fda:	2b00      	cmp	r3, #0
 8104fdc:	d00b      	beq.n	8104ff6 <vPortEnterCritical+0x4e>
	__asm volatile
 8104fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8104fe2:	f383 8811 	msr	BASEPRI, r3
 8104fe6:	f3bf 8f6f 	isb	sy
 8104fea:	f3bf 8f4f 	dsb	sy
 8104fee:	603b      	str	r3, [r7, #0]
}
 8104ff0:	bf00      	nop
 8104ff2:	bf00      	nop
 8104ff4:	e7fd      	b.n	8104ff2 <vPortEnterCritical+0x4a>
	}
}
 8104ff6:	bf00      	nop
 8104ff8:	370c      	adds	r7, #12
 8104ffa:	46bd      	mov	sp, r7
 8104ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105000:	4770      	bx	lr
 8105002:	bf00      	nop
 8105004:	10000010 	.word	0x10000010
 8105008:	e000ed04 	.word	0xe000ed04

0810500c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 810500c:	b480      	push	{r7}
 810500e:	b083      	sub	sp, #12
 8105010:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8105012:	4b12      	ldr	r3, [pc, #72]	@ (810505c <vPortExitCritical+0x50>)
 8105014:	681b      	ldr	r3, [r3, #0]
 8105016:	2b00      	cmp	r3, #0
 8105018:	d10b      	bne.n	8105032 <vPortExitCritical+0x26>
	__asm volatile
 810501a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810501e:	f383 8811 	msr	BASEPRI, r3
 8105022:	f3bf 8f6f 	isb	sy
 8105026:	f3bf 8f4f 	dsb	sy
 810502a:	607b      	str	r3, [r7, #4]
}
 810502c:	bf00      	nop
 810502e:	bf00      	nop
 8105030:	e7fd      	b.n	810502e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8105032:	4b0a      	ldr	r3, [pc, #40]	@ (810505c <vPortExitCritical+0x50>)
 8105034:	681b      	ldr	r3, [r3, #0]
 8105036:	3b01      	subs	r3, #1
 8105038:	4a08      	ldr	r2, [pc, #32]	@ (810505c <vPortExitCritical+0x50>)
 810503a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 810503c:	4b07      	ldr	r3, [pc, #28]	@ (810505c <vPortExitCritical+0x50>)
 810503e:	681b      	ldr	r3, [r3, #0]
 8105040:	2b00      	cmp	r3, #0
 8105042:	d105      	bne.n	8105050 <vPortExitCritical+0x44>
 8105044:	2300      	movs	r3, #0
 8105046:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8105048:	683b      	ldr	r3, [r7, #0]
 810504a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 810504e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8105050:	bf00      	nop
 8105052:	370c      	adds	r7, #12
 8105054:	46bd      	mov	sp, r7
 8105056:	f85d 7b04 	ldr.w	r7, [sp], #4
 810505a:	4770      	bx	lr
 810505c:	10000010 	.word	0x10000010

08105060 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8105060:	f3ef 8009 	mrs	r0, PSP
 8105064:	f3bf 8f6f 	isb	sy
 8105068:	4b15      	ldr	r3, [pc, #84]	@ (81050c0 <pxCurrentTCBConst>)
 810506a:	681a      	ldr	r2, [r3, #0]
 810506c:	f01e 0f10 	tst.w	lr, #16
 8105070:	bf08      	it	eq
 8105072:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8105076:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810507a:	6010      	str	r0, [r2, #0]
 810507c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8105080:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8105084:	f380 8811 	msr	BASEPRI, r0
 8105088:	f3bf 8f4f 	dsb	sy
 810508c:	f3bf 8f6f 	isb	sy
 8105090:	f001 fce6 	bl	8106a60 <vTaskSwitchContext>
 8105094:	f04f 0000 	mov.w	r0, #0
 8105098:	f380 8811 	msr	BASEPRI, r0
 810509c:	bc09      	pop	{r0, r3}
 810509e:	6819      	ldr	r1, [r3, #0]
 81050a0:	6808      	ldr	r0, [r1, #0]
 81050a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81050a6:	f01e 0f10 	tst.w	lr, #16
 81050aa:	bf08      	it	eq
 81050ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 81050b0:	f380 8809 	msr	PSP, r0
 81050b4:	f3bf 8f6f 	isb	sy
 81050b8:	4770      	bx	lr
 81050ba:	bf00      	nop
 81050bc:	f3af 8000 	nop.w

081050c0 <pxCurrentTCBConst>:
 81050c0:	10004560 	.word	0x10004560
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 81050c4:	bf00      	nop
 81050c6:	bf00      	nop

081050c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 81050c8:	b580      	push	{r7, lr}
 81050ca:	b082      	sub	sp, #8
 81050cc:	af00      	add	r7, sp, #0
	__asm volatile
 81050ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81050d2:	f383 8811 	msr	BASEPRI, r3
 81050d6:	f3bf 8f6f 	isb	sy
 81050da:	f3bf 8f4f 	dsb	sy
 81050de:	607b      	str	r3, [r7, #4]
}
 81050e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 81050e2:	f001 fc03 	bl	81068ec <xTaskIncrementTick>
 81050e6:	4603      	mov	r3, r0
 81050e8:	2b00      	cmp	r3, #0
 81050ea:	d003      	beq.n	81050f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 81050ec:	4b06      	ldr	r3, [pc, #24]	@ (8105108 <xPortSysTickHandler+0x40>)
 81050ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81050f2:	601a      	str	r2, [r3, #0]
 81050f4:	2300      	movs	r3, #0
 81050f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 81050f8:	683b      	ldr	r3, [r7, #0]
 81050fa:	f383 8811 	msr	BASEPRI, r3
}
 81050fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8105100:	bf00      	nop
 8105102:	3708      	adds	r7, #8
 8105104:	46bd      	mov	sp, r7
 8105106:	bd80      	pop	{r7, pc}
 8105108:	e000ed04 	.word	0xe000ed04

0810510c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 810510c:	b480      	push	{r7}
 810510e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8105110:	4b0b      	ldr	r3, [pc, #44]	@ (8105140 <vPortSetupTimerInterrupt+0x34>)
 8105112:	2200      	movs	r2, #0
 8105114:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8105116:	4b0b      	ldr	r3, [pc, #44]	@ (8105144 <vPortSetupTimerInterrupt+0x38>)
 8105118:	2200      	movs	r2, #0
 810511a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 810511c:	4b0a      	ldr	r3, [pc, #40]	@ (8105148 <vPortSetupTimerInterrupt+0x3c>)
 810511e:	681b      	ldr	r3, [r3, #0]
 8105120:	4a0a      	ldr	r2, [pc, #40]	@ (810514c <vPortSetupTimerInterrupt+0x40>)
 8105122:	fba2 2303 	umull	r2, r3, r2, r3
 8105126:	099b      	lsrs	r3, r3, #6
 8105128:	4a09      	ldr	r2, [pc, #36]	@ (8105150 <vPortSetupTimerInterrupt+0x44>)
 810512a:	3b01      	subs	r3, #1
 810512c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 810512e:	4b04      	ldr	r3, [pc, #16]	@ (8105140 <vPortSetupTimerInterrupt+0x34>)
 8105130:	2207      	movs	r2, #7
 8105132:	601a      	str	r2, [r3, #0]
}
 8105134:	bf00      	nop
 8105136:	46bd      	mov	sp, r7
 8105138:	f85d 7b04 	ldr.w	r7, [sp], #4
 810513c:	4770      	bx	lr
 810513e:	bf00      	nop
 8105140:	e000e010 	.word	0xe000e010
 8105144:	e000e018 	.word	0xe000e018
 8105148:	10000004 	.word	0x10000004
 810514c:	10624dd3 	.word	0x10624dd3
 8105150:	e000e014 	.word	0xe000e014

08105154 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8105154:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8105164 <vPortEnableVFP+0x10>
 8105158:	6801      	ldr	r1, [r0, #0]
 810515a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810515e:	6001      	str	r1, [r0, #0]
 8105160:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8105162:	bf00      	nop
 8105164:	e000ed88 	.word	0xe000ed88

08105168 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8105168:	b480      	push	{r7}
 810516a:	b085      	sub	sp, #20
 810516c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 810516e:	f3ef 8305 	mrs	r3, IPSR
 8105172:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8105174:	68fb      	ldr	r3, [r7, #12]
 8105176:	2b0f      	cmp	r3, #15
 8105178:	d915      	bls.n	81051a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 810517a:	4a18      	ldr	r2, [pc, #96]	@ (81051dc <vPortValidateInterruptPriority+0x74>)
 810517c:	68fb      	ldr	r3, [r7, #12]
 810517e:	4413      	add	r3, r2
 8105180:	781b      	ldrb	r3, [r3, #0]
 8105182:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8105184:	4b16      	ldr	r3, [pc, #88]	@ (81051e0 <vPortValidateInterruptPriority+0x78>)
 8105186:	781b      	ldrb	r3, [r3, #0]
 8105188:	7afa      	ldrb	r2, [r7, #11]
 810518a:	429a      	cmp	r2, r3
 810518c:	d20b      	bcs.n	81051a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 810518e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105192:	f383 8811 	msr	BASEPRI, r3
 8105196:	f3bf 8f6f 	isb	sy
 810519a:	f3bf 8f4f 	dsb	sy
 810519e:	607b      	str	r3, [r7, #4]
}
 81051a0:	bf00      	nop
 81051a2:	bf00      	nop
 81051a4:	e7fd      	b.n	81051a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 81051a6:	4b0f      	ldr	r3, [pc, #60]	@ (81051e4 <vPortValidateInterruptPriority+0x7c>)
 81051a8:	681b      	ldr	r3, [r3, #0]
 81051aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 81051ae:	4b0e      	ldr	r3, [pc, #56]	@ (81051e8 <vPortValidateInterruptPriority+0x80>)
 81051b0:	681b      	ldr	r3, [r3, #0]
 81051b2:	429a      	cmp	r2, r3
 81051b4:	d90b      	bls.n	81051ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 81051b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81051ba:	f383 8811 	msr	BASEPRI, r3
 81051be:	f3bf 8f6f 	isb	sy
 81051c2:	f3bf 8f4f 	dsb	sy
 81051c6:	603b      	str	r3, [r7, #0]
}
 81051c8:	bf00      	nop
 81051ca:	bf00      	nop
 81051cc:	e7fd      	b.n	81051ca <vPortValidateInterruptPriority+0x62>
	}
 81051ce:	bf00      	nop
 81051d0:	3714      	adds	r7, #20
 81051d2:	46bd      	mov	sp, r7
 81051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051d8:	4770      	bx	lr
 81051da:	bf00      	nop
 81051dc:	e000e3f0 	.word	0xe000e3f0
 81051e0:	10004518 	.word	0x10004518
 81051e4:	e000ed0c 	.word	0xe000ed0c
 81051e8:	1000451c 	.word	0x1000451c

081051ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 81051ec:	b580      	push	{r7, lr}
 81051ee:	b084      	sub	sp, #16
 81051f0:	af00      	add	r7, sp, #0
 81051f2:	6078      	str	r0, [r7, #4]
 81051f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 81051f6:	687b      	ldr	r3, [r7, #4]
 81051f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 81051fa:	68fb      	ldr	r3, [r7, #12]
 81051fc:	2b00      	cmp	r3, #0
 81051fe:	d10b      	bne.n	8105218 <xQueueGenericReset+0x2c>
	__asm volatile
 8105200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105204:	f383 8811 	msr	BASEPRI, r3
 8105208:	f3bf 8f6f 	isb	sy
 810520c:	f3bf 8f4f 	dsb	sy
 8105210:	60bb      	str	r3, [r7, #8]
}
 8105212:	bf00      	nop
 8105214:	bf00      	nop
 8105216:	e7fd      	b.n	8105214 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8105218:	f7ff fec6 	bl	8104fa8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810521c:	68fb      	ldr	r3, [r7, #12]
 810521e:	681a      	ldr	r2, [r3, #0]
 8105220:	68fb      	ldr	r3, [r7, #12]
 8105222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105224:	68f9      	ldr	r1, [r7, #12]
 8105226:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8105228:	fb01 f303 	mul.w	r3, r1, r3
 810522c:	441a      	add	r2, r3
 810522e:	68fb      	ldr	r3, [r7, #12]
 8105230:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8105232:	68fb      	ldr	r3, [r7, #12]
 8105234:	2200      	movs	r2, #0
 8105236:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8105238:	68fb      	ldr	r3, [r7, #12]
 810523a:	681a      	ldr	r2, [r3, #0]
 810523c:	68fb      	ldr	r3, [r7, #12]
 810523e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8105240:	68fb      	ldr	r3, [r7, #12]
 8105242:	681a      	ldr	r2, [r3, #0]
 8105244:	68fb      	ldr	r3, [r7, #12]
 8105246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105248:	3b01      	subs	r3, #1
 810524a:	68f9      	ldr	r1, [r7, #12]
 810524c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 810524e:	fb01 f303 	mul.w	r3, r1, r3
 8105252:	441a      	add	r2, r3
 8105254:	68fb      	ldr	r3, [r7, #12]
 8105256:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8105258:	68fb      	ldr	r3, [r7, #12]
 810525a:	22ff      	movs	r2, #255	@ 0xff
 810525c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8105260:	68fb      	ldr	r3, [r7, #12]
 8105262:	22ff      	movs	r2, #255	@ 0xff
 8105264:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8105268:	683b      	ldr	r3, [r7, #0]
 810526a:	2b00      	cmp	r3, #0
 810526c:	d114      	bne.n	8105298 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810526e:	68fb      	ldr	r3, [r7, #12]
 8105270:	691b      	ldr	r3, [r3, #16]
 8105272:	2b00      	cmp	r3, #0
 8105274:	d01a      	beq.n	81052ac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8105276:	68fb      	ldr	r3, [r7, #12]
 8105278:	3310      	adds	r3, #16
 810527a:	4618      	mov	r0, r3
 810527c:	f001 fca8 	bl	8106bd0 <xTaskRemoveFromEventList>
 8105280:	4603      	mov	r3, r0
 8105282:	2b00      	cmp	r3, #0
 8105284:	d012      	beq.n	81052ac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8105286:	4b0d      	ldr	r3, [pc, #52]	@ (81052bc <xQueueGenericReset+0xd0>)
 8105288:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810528c:	601a      	str	r2, [r3, #0]
 810528e:	f3bf 8f4f 	dsb	sy
 8105292:	f3bf 8f6f 	isb	sy
 8105296:	e009      	b.n	81052ac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8105298:	68fb      	ldr	r3, [r7, #12]
 810529a:	3310      	adds	r3, #16
 810529c:	4618      	mov	r0, r3
 810529e:	f7ff fc9b 	bl	8104bd8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 81052a2:	68fb      	ldr	r3, [r7, #12]
 81052a4:	3324      	adds	r3, #36	@ 0x24
 81052a6:	4618      	mov	r0, r3
 81052a8:	f7ff fc96 	bl	8104bd8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 81052ac:	f7ff feae 	bl	810500c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 81052b0:	2301      	movs	r3, #1
}
 81052b2:	4618      	mov	r0, r3
 81052b4:	3710      	adds	r7, #16
 81052b6:	46bd      	mov	sp, r7
 81052b8:	bd80      	pop	{r7, pc}
 81052ba:	bf00      	nop
 81052bc:	e000ed04 	.word	0xe000ed04

081052c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 81052c0:	b580      	push	{r7, lr}
 81052c2:	b08e      	sub	sp, #56	@ 0x38
 81052c4:	af02      	add	r7, sp, #8
 81052c6:	60f8      	str	r0, [r7, #12]
 81052c8:	60b9      	str	r1, [r7, #8]
 81052ca:	607a      	str	r2, [r7, #4]
 81052cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 81052ce:	68fb      	ldr	r3, [r7, #12]
 81052d0:	2b00      	cmp	r3, #0
 81052d2:	d10b      	bne.n	81052ec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 81052d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81052d8:	f383 8811 	msr	BASEPRI, r3
 81052dc:	f3bf 8f6f 	isb	sy
 81052e0:	f3bf 8f4f 	dsb	sy
 81052e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 81052e6:	bf00      	nop
 81052e8:	bf00      	nop
 81052ea:	e7fd      	b.n	81052e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 81052ec:	683b      	ldr	r3, [r7, #0]
 81052ee:	2b00      	cmp	r3, #0
 81052f0:	d10b      	bne.n	810530a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 81052f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81052f6:	f383 8811 	msr	BASEPRI, r3
 81052fa:	f3bf 8f6f 	isb	sy
 81052fe:	f3bf 8f4f 	dsb	sy
 8105302:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8105304:	bf00      	nop
 8105306:	bf00      	nop
 8105308:	e7fd      	b.n	8105306 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 810530a:	687b      	ldr	r3, [r7, #4]
 810530c:	2b00      	cmp	r3, #0
 810530e:	d002      	beq.n	8105316 <xQueueGenericCreateStatic+0x56>
 8105310:	68bb      	ldr	r3, [r7, #8]
 8105312:	2b00      	cmp	r3, #0
 8105314:	d001      	beq.n	810531a <xQueueGenericCreateStatic+0x5a>
 8105316:	2301      	movs	r3, #1
 8105318:	e000      	b.n	810531c <xQueueGenericCreateStatic+0x5c>
 810531a:	2300      	movs	r3, #0
 810531c:	2b00      	cmp	r3, #0
 810531e:	d10b      	bne.n	8105338 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8105320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105324:	f383 8811 	msr	BASEPRI, r3
 8105328:	f3bf 8f6f 	isb	sy
 810532c:	f3bf 8f4f 	dsb	sy
 8105330:	623b      	str	r3, [r7, #32]
}
 8105332:	bf00      	nop
 8105334:	bf00      	nop
 8105336:	e7fd      	b.n	8105334 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8105338:	687b      	ldr	r3, [r7, #4]
 810533a:	2b00      	cmp	r3, #0
 810533c:	d102      	bne.n	8105344 <xQueueGenericCreateStatic+0x84>
 810533e:	68bb      	ldr	r3, [r7, #8]
 8105340:	2b00      	cmp	r3, #0
 8105342:	d101      	bne.n	8105348 <xQueueGenericCreateStatic+0x88>
 8105344:	2301      	movs	r3, #1
 8105346:	e000      	b.n	810534a <xQueueGenericCreateStatic+0x8a>
 8105348:	2300      	movs	r3, #0
 810534a:	2b00      	cmp	r3, #0
 810534c:	d10b      	bne.n	8105366 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 810534e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105352:	f383 8811 	msr	BASEPRI, r3
 8105356:	f3bf 8f6f 	isb	sy
 810535a:	f3bf 8f4f 	dsb	sy
 810535e:	61fb      	str	r3, [r7, #28]
}
 8105360:	bf00      	nop
 8105362:	bf00      	nop
 8105364:	e7fd      	b.n	8105362 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8105366:	2350      	movs	r3, #80	@ 0x50
 8105368:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 810536a:	697b      	ldr	r3, [r7, #20]
 810536c:	2b50      	cmp	r3, #80	@ 0x50
 810536e:	d00b      	beq.n	8105388 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8105370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105374:	f383 8811 	msr	BASEPRI, r3
 8105378:	f3bf 8f6f 	isb	sy
 810537c:	f3bf 8f4f 	dsb	sy
 8105380:	61bb      	str	r3, [r7, #24]
}
 8105382:	bf00      	nop
 8105384:	bf00      	nop
 8105386:	e7fd      	b.n	8105384 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8105388:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810538a:	683b      	ldr	r3, [r7, #0]
 810538c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 810538e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105390:	2b00      	cmp	r3, #0
 8105392:	d00d      	beq.n	81053b0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8105394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105396:	2201      	movs	r2, #1
 8105398:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810539c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 81053a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81053a2:	9300      	str	r3, [sp, #0]
 81053a4:	4613      	mov	r3, r2
 81053a6:	687a      	ldr	r2, [r7, #4]
 81053a8:	68b9      	ldr	r1, [r7, #8]
 81053aa:	68f8      	ldr	r0, [r7, #12]
 81053ac:	f000 f840 	bl	8105430 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 81053b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 81053b2:	4618      	mov	r0, r3
 81053b4:	3730      	adds	r7, #48	@ 0x30
 81053b6:	46bd      	mov	sp, r7
 81053b8:	bd80      	pop	{r7, pc}

081053ba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 81053ba:	b580      	push	{r7, lr}
 81053bc:	b08a      	sub	sp, #40	@ 0x28
 81053be:	af02      	add	r7, sp, #8
 81053c0:	60f8      	str	r0, [r7, #12]
 81053c2:	60b9      	str	r1, [r7, #8]
 81053c4:	4613      	mov	r3, r2
 81053c6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 81053c8:	68fb      	ldr	r3, [r7, #12]
 81053ca:	2b00      	cmp	r3, #0
 81053cc:	d10b      	bne.n	81053e6 <xQueueGenericCreate+0x2c>
	__asm volatile
 81053ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81053d2:	f383 8811 	msr	BASEPRI, r3
 81053d6:	f3bf 8f6f 	isb	sy
 81053da:	f3bf 8f4f 	dsb	sy
 81053de:	613b      	str	r3, [r7, #16]
}
 81053e0:	bf00      	nop
 81053e2:	bf00      	nop
 81053e4:	e7fd      	b.n	81053e2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81053e6:	68fb      	ldr	r3, [r7, #12]
 81053e8:	68ba      	ldr	r2, [r7, #8]
 81053ea:	fb02 f303 	mul.w	r3, r2, r3
 81053ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 81053f0:	69fb      	ldr	r3, [r7, #28]
 81053f2:	3350      	adds	r3, #80	@ 0x50
 81053f4:	4618      	mov	r0, r3
 81053f6:	f7ff fa01 	bl	81047fc <pvPortMalloc>
 81053fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 81053fc:	69bb      	ldr	r3, [r7, #24]
 81053fe:	2b00      	cmp	r3, #0
 8105400:	d011      	beq.n	8105426 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8105402:	69bb      	ldr	r3, [r7, #24]
 8105404:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8105406:	697b      	ldr	r3, [r7, #20]
 8105408:	3350      	adds	r3, #80	@ 0x50
 810540a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 810540c:	69bb      	ldr	r3, [r7, #24]
 810540e:	2200      	movs	r2, #0
 8105410:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8105414:	79fa      	ldrb	r2, [r7, #7]
 8105416:	69bb      	ldr	r3, [r7, #24]
 8105418:	9300      	str	r3, [sp, #0]
 810541a:	4613      	mov	r3, r2
 810541c:	697a      	ldr	r2, [r7, #20]
 810541e:	68b9      	ldr	r1, [r7, #8]
 8105420:	68f8      	ldr	r0, [r7, #12]
 8105422:	f000 f805 	bl	8105430 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8105426:	69bb      	ldr	r3, [r7, #24]
	}
 8105428:	4618      	mov	r0, r3
 810542a:	3720      	adds	r7, #32
 810542c:	46bd      	mov	sp, r7
 810542e:	bd80      	pop	{r7, pc}

08105430 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8105430:	b580      	push	{r7, lr}
 8105432:	b084      	sub	sp, #16
 8105434:	af00      	add	r7, sp, #0
 8105436:	60f8      	str	r0, [r7, #12]
 8105438:	60b9      	str	r1, [r7, #8]
 810543a:	607a      	str	r2, [r7, #4]
 810543c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 810543e:	68bb      	ldr	r3, [r7, #8]
 8105440:	2b00      	cmp	r3, #0
 8105442:	d103      	bne.n	810544c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8105444:	69bb      	ldr	r3, [r7, #24]
 8105446:	69ba      	ldr	r2, [r7, #24]
 8105448:	601a      	str	r2, [r3, #0]
 810544a:	e002      	b.n	8105452 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 810544c:	69bb      	ldr	r3, [r7, #24]
 810544e:	687a      	ldr	r2, [r7, #4]
 8105450:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8105452:	69bb      	ldr	r3, [r7, #24]
 8105454:	68fa      	ldr	r2, [r7, #12]
 8105456:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8105458:	69bb      	ldr	r3, [r7, #24]
 810545a:	68ba      	ldr	r2, [r7, #8]
 810545c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 810545e:	2101      	movs	r1, #1
 8105460:	69b8      	ldr	r0, [r7, #24]
 8105462:	f7ff fec3 	bl	81051ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8105466:	69bb      	ldr	r3, [r7, #24]
 8105468:	78fa      	ldrb	r2, [r7, #3]
 810546a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 810546e:	bf00      	nop
 8105470:	3710      	adds	r7, #16
 8105472:	46bd      	mov	sp, r7
 8105474:	bd80      	pop	{r7, pc}
	...

08105478 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8105478:	b580      	push	{r7, lr}
 810547a:	b08e      	sub	sp, #56	@ 0x38
 810547c:	af00      	add	r7, sp, #0
 810547e:	60f8      	str	r0, [r7, #12]
 8105480:	60b9      	str	r1, [r7, #8]
 8105482:	607a      	str	r2, [r7, #4]
 8105484:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8105486:	2300      	movs	r3, #0
 8105488:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810548a:	68fb      	ldr	r3, [r7, #12]
 810548c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 810548e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105490:	2b00      	cmp	r3, #0
 8105492:	d10b      	bne.n	81054ac <xQueueGenericSend+0x34>
	__asm volatile
 8105494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105498:	f383 8811 	msr	BASEPRI, r3
 810549c:	f3bf 8f6f 	isb	sy
 81054a0:	f3bf 8f4f 	dsb	sy
 81054a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 81054a6:	bf00      	nop
 81054a8:	bf00      	nop
 81054aa:	e7fd      	b.n	81054a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 81054ac:	68bb      	ldr	r3, [r7, #8]
 81054ae:	2b00      	cmp	r3, #0
 81054b0:	d103      	bne.n	81054ba <xQueueGenericSend+0x42>
 81054b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81054b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81054b6:	2b00      	cmp	r3, #0
 81054b8:	d101      	bne.n	81054be <xQueueGenericSend+0x46>
 81054ba:	2301      	movs	r3, #1
 81054bc:	e000      	b.n	81054c0 <xQueueGenericSend+0x48>
 81054be:	2300      	movs	r3, #0
 81054c0:	2b00      	cmp	r3, #0
 81054c2:	d10b      	bne.n	81054dc <xQueueGenericSend+0x64>
	__asm volatile
 81054c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81054c8:	f383 8811 	msr	BASEPRI, r3
 81054cc:	f3bf 8f6f 	isb	sy
 81054d0:	f3bf 8f4f 	dsb	sy
 81054d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 81054d6:	bf00      	nop
 81054d8:	bf00      	nop
 81054da:	e7fd      	b.n	81054d8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 81054dc:	683b      	ldr	r3, [r7, #0]
 81054de:	2b02      	cmp	r3, #2
 81054e0:	d103      	bne.n	81054ea <xQueueGenericSend+0x72>
 81054e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81054e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81054e6:	2b01      	cmp	r3, #1
 81054e8:	d101      	bne.n	81054ee <xQueueGenericSend+0x76>
 81054ea:	2301      	movs	r3, #1
 81054ec:	e000      	b.n	81054f0 <xQueueGenericSend+0x78>
 81054ee:	2300      	movs	r3, #0
 81054f0:	2b00      	cmp	r3, #0
 81054f2:	d10b      	bne.n	810550c <xQueueGenericSend+0x94>
	__asm volatile
 81054f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81054f8:	f383 8811 	msr	BASEPRI, r3
 81054fc:	f3bf 8f6f 	isb	sy
 8105500:	f3bf 8f4f 	dsb	sy
 8105504:	623b      	str	r3, [r7, #32]
}
 8105506:	bf00      	nop
 8105508:	bf00      	nop
 810550a:	e7fd      	b.n	8105508 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810550c:	f001 fd36 	bl	8106f7c <xTaskGetSchedulerState>
 8105510:	4603      	mov	r3, r0
 8105512:	2b00      	cmp	r3, #0
 8105514:	d102      	bne.n	810551c <xQueueGenericSend+0xa4>
 8105516:	687b      	ldr	r3, [r7, #4]
 8105518:	2b00      	cmp	r3, #0
 810551a:	d101      	bne.n	8105520 <xQueueGenericSend+0xa8>
 810551c:	2301      	movs	r3, #1
 810551e:	e000      	b.n	8105522 <xQueueGenericSend+0xaa>
 8105520:	2300      	movs	r3, #0
 8105522:	2b00      	cmp	r3, #0
 8105524:	d10b      	bne.n	810553e <xQueueGenericSend+0xc6>
	__asm volatile
 8105526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810552a:	f383 8811 	msr	BASEPRI, r3
 810552e:	f3bf 8f6f 	isb	sy
 8105532:	f3bf 8f4f 	dsb	sy
 8105536:	61fb      	str	r3, [r7, #28]
}
 8105538:	bf00      	nop
 810553a:	bf00      	nop
 810553c:	e7fd      	b.n	810553a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810553e:	f7ff fd33 	bl	8104fa8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8105542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105544:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8105546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810554a:	429a      	cmp	r2, r3
 810554c:	d302      	bcc.n	8105554 <xQueueGenericSend+0xdc>
 810554e:	683b      	ldr	r3, [r7, #0]
 8105550:	2b02      	cmp	r3, #2
 8105552:	d129      	bne.n	81055a8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8105554:	683a      	ldr	r2, [r7, #0]
 8105556:	68b9      	ldr	r1, [r7, #8]
 8105558:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810555a:	f000 fa9f 	bl	8105a9c <prvCopyDataToQueue>
 810555e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8105560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105564:	2b00      	cmp	r3, #0
 8105566:	d010      	beq.n	810558a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8105568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810556a:	3324      	adds	r3, #36	@ 0x24
 810556c:	4618      	mov	r0, r3
 810556e:	f001 fb2f 	bl	8106bd0 <xTaskRemoveFromEventList>
 8105572:	4603      	mov	r3, r0
 8105574:	2b00      	cmp	r3, #0
 8105576:	d013      	beq.n	81055a0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8105578:	4b3f      	ldr	r3, [pc, #252]	@ (8105678 <xQueueGenericSend+0x200>)
 810557a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810557e:	601a      	str	r2, [r3, #0]
 8105580:	f3bf 8f4f 	dsb	sy
 8105584:	f3bf 8f6f 	isb	sy
 8105588:	e00a      	b.n	81055a0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 810558a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810558c:	2b00      	cmp	r3, #0
 810558e:	d007      	beq.n	81055a0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8105590:	4b39      	ldr	r3, [pc, #228]	@ (8105678 <xQueueGenericSend+0x200>)
 8105592:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8105596:	601a      	str	r2, [r3, #0]
 8105598:	f3bf 8f4f 	dsb	sy
 810559c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 81055a0:	f7ff fd34 	bl	810500c <vPortExitCritical>
				return pdPASS;
 81055a4:	2301      	movs	r3, #1
 81055a6:	e063      	b.n	8105670 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 81055a8:	687b      	ldr	r3, [r7, #4]
 81055aa:	2b00      	cmp	r3, #0
 81055ac:	d103      	bne.n	81055b6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 81055ae:	f7ff fd2d 	bl	810500c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 81055b2:	2300      	movs	r3, #0
 81055b4:	e05c      	b.n	8105670 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 81055b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81055b8:	2b00      	cmp	r3, #0
 81055ba:	d106      	bne.n	81055ca <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 81055bc:	f107 0314 	add.w	r3, r7, #20
 81055c0:	4618      	mov	r0, r3
 81055c2:	f001 fb69 	bl	8106c98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 81055c6:	2301      	movs	r3, #1
 81055c8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 81055ca:	f7ff fd1f 	bl	810500c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 81055ce:	f001 f8d1 	bl	8106774 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 81055d2:	f7ff fce9 	bl	8104fa8 <vPortEnterCritical>
 81055d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81055d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 81055dc:	b25b      	sxtb	r3, r3
 81055de:	f1b3 3fff 	cmp.w	r3, #4294967295
 81055e2:	d103      	bne.n	81055ec <xQueueGenericSend+0x174>
 81055e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81055e6:	2200      	movs	r2, #0
 81055e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 81055ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81055ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 81055f2:	b25b      	sxtb	r3, r3
 81055f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81055f8:	d103      	bne.n	8105602 <xQueueGenericSend+0x18a>
 81055fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81055fc:	2200      	movs	r2, #0
 81055fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8105602:	f7ff fd03 	bl	810500c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8105606:	1d3a      	adds	r2, r7, #4
 8105608:	f107 0314 	add.w	r3, r7, #20
 810560c:	4611      	mov	r1, r2
 810560e:	4618      	mov	r0, r3
 8105610:	f001 fb58 	bl	8106cc4 <xTaskCheckForTimeOut>
 8105614:	4603      	mov	r3, r0
 8105616:	2b00      	cmp	r3, #0
 8105618:	d124      	bne.n	8105664 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 810561a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810561c:	f000 fb36 	bl	8105c8c <prvIsQueueFull>
 8105620:	4603      	mov	r3, r0
 8105622:	2b00      	cmp	r3, #0
 8105624:	d018      	beq.n	8105658 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8105626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105628:	3310      	adds	r3, #16
 810562a:	687a      	ldr	r2, [r7, #4]
 810562c:	4611      	mov	r1, r2
 810562e:	4618      	mov	r0, r3
 8105630:	f001 fa7c 	bl	8106b2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8105634:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8105636:	f000 fac1 	bl	8105bbc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 810563a:	f001 f8a9 	bl	8106790 <xTaskResumeAll>
 810563e:	4603      	mov	r3, r0
 8105640:	2b00      	cmp	r3, #0
 8105642:	f47f af7c 	bne.w	810553e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8105646:	4b0c      	ldr	r3, [pc, #48]	@ (8105678 <xQueueGenericSend+0x200>)
 8105648:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810564c:	601a      	str	r2, [r3, #0]
 810564e:	f3bf 8f4f 	dsb	sy
 8105652:	f3bf 8f6f 	isb	sy
 8105656:	e772      	b.n	810553e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8105658:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810565a:	f000 faaf 	bl	8105bbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810565e:	f001 f897 	bl	8106790 <xTaskResumeAll>
 8105662:	e76c      	b.n	810553e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8105664:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8105666:	f000 faa9 	bl	8105bbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810566a:	f001 f891 	bl	8106790 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 810566e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8105670:	4618      	mov	r0, r3
 8105672:	3738      	adds	r7, #56	@ 0x38
 8105674:	46bd      	mov	sp, r7
 8105676:	bd80      	pop	{r7, pc}
 8105678:	e000ed04 	.word	0xe000ed04

0810567c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 810567c:	b580      	push	{r7, lr}
 810567e:	b090      	sub	sp, #64	@ 0x40
 8105680:	af00      	add	r7, sp, #0
 8105682:	60f8      	str	r0, [r7, #12]
 8105684:	60b9      	str	r1, [r7, #8]
 8105686:	607a      	str	r2, [r7, #4]
 8105688:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810568a:	68fb      	ldr	r3, [r7, #12]
 810568c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 810568e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105690:	2b00      	cmp	r3, #0
 8105692:	d10b      	bne.n	81056ac <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8105694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105698:	f383 8811 	msr	BASEPRI, r3
 810569c:	f3bf 8f6f 	isb	sy
 81056a0:	f3bf 8f4f 	dsb	sy
 81056a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 81056a6:	bf00      	nop
 81056a8:	bf00      	nop
 81056aa:	e7fd      	b.n	81056a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 81056ac:	68bb      	ldr	r3, [r7, #8]
 81056ae:	2b00      	cmp	r3, #0
 81056b0:	d103      	bne.n	81056ba <xQueueGenericSendFromISR+0x3e>
 81056b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81056b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81056b6:	2b00      	cmp	r3, #0
 81056b8:	d101      	bne.n	81056be <xQueueGenericSendFromISR+0x42>
 81056ba:	2301      	movs	r3, #1
 81056bc:	e000      	b.n	81056c0 <xQueueGenericSendFromISR+0x44>
 81056be:	2300      	movs	r3, #0
 81056c0:	2b00      	cmp	r3, #0
 81056c2:	d10b      	bne.n	81056dc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 81056c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81056c8:	f383 8811 	msr	BASEPRI, r3
 81056cc:	f3bf 8f6f 	isb	sy
 81056d0:	f3bf 8f4f 	dsb	sy
 81056d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 81056d6:	bf00      	nop
 81056d8:	bf00      	nop
 81056da:	e7fd      	b.n	81056d8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 81056dc:	683b      	ldr	r3, [r7, #0]
 81056de:	2b02      	cmp	r3, #2
 81056e0:	d103      	bne.n	81056ea <xQueueGenericSendFromISR+0x6e>
 81056e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81056e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81056e6:	2b01      	cmp	r3, #1
 81056e8:	d101      	bne.n	81056ee <xQueueGenericSendFromISR+0x72>
 81056ea:	2301      	movs	r3, #1
 81056ec:	e000      	b.n	81056f0 <xQueueGenericSendFromISR+0x74>
 81056ee:	2300      	movs	r3, #0
 81056f0:	2b00      	cmp	r3, #0
 81056f2:	d10b      	bne.n	810570c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 81056f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81056f8:	f383 8811 	msr	BASEPRI, r3
 81056fc:	f3bf 8f6f 	isb	sy
 8105700:	f3bf 8f4f 	dsb	sy
 8105704:	623b      	str	r3, [r7, #32]
}
 8105706:	bf00      	nop
 8105708:	bf00      	nop
 810570a:	e7fd      	b.n	8105708 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810570c:	f7ff fd2c 	bl	8105168 <vPortValidateInterruptPriority>
	__asm volatile
 8105710:	f3ef 8211 	mrs	r2, BASEPRI
 8105714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105718:	f383 8811 	msr	BASEPRI, r3
 810571c:	f3bf 8f6f 	isb	sy
 8105720:	f3bf 8f4f 	dsb	sy
 8105724:	61fa      	str	r2, [r7, #28]
 8105726:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8105728:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810572a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810572c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810572e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8105730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105734:	429a      	cmp	r2, r3
 8105736:	d302      	bcc.n	810573e <xQueueGenericSendFromISR+0xc2>
 8105738:	683b      	ldr	r3, [r7, #0]
 810573a:	2b02      	cmp	r3, #2
 810573c:	d12f      	bne.n	810579e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 810573e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105740:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8105744:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8105748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810574a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810574c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810574e:	683a      	ldr	r2, [r7, #0]
 8105750:	68b9      	ldr	r1, [r7, #8]
 8105752:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8105754:	f000 f9a2 	bl	8105a9c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8105758:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 810575c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105760:	d112      	bne.n	8105788 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8105762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105766:	2b00      	cmp	r3, #0
 8105768:	d016      	beq.n	8105798 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810576a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810576c:	3324      	adds	r3, #36	@ 0x24
 810576e:	4618      	mov	r0, r3
 8105770:	f001 fa2e 	bl	8106bd0 <xTaskRemoveFromEventList>
 8105774:	4603      	mov	r3, r0
 8105776:	2b00      	cmp	r3, #0
 8105778:	d00e      	beq.n	8105798 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 810577a:	687b      	ldr	r3, [r7, #4]
 810577c:	2b00      	cmp	r3, #0
 810577e:	d00b      	beq.n	8105798 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8105780:	687b      	ldr	r3, [r7, #4]
 8105782:	2201      	movs	r2, #1
 8105784:	601a      	str	r2, [r3, #0]
 8105786:	e007      	b.n	8105798 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8105788:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 810578c:	3301      	adds	r3, #1
 810578e:	b2db      	uxtb	r3, r3
 8105790:	b25a      	sxtb	r2, r3
 8105792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105794:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8105798:	2301      	movs	r3, #1
 810579a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 810579c:	e001      	b.n	81057a2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 810579e:	2300      	movs	r3, #0
 81057a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81057a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81057a4:	617b      	str	r3, [r7, #20]
	__asm volatile
 81057a6:	697b      	ldr	r3, [r7, #20]
 81057a8:	f383 8811 	msr	BASEPRI, r3
}
 81057ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 81057ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 81057b0:	4618      	mov	r0, r3
 81057b2:	3740      	adds	r7, #64	@ 0x40
 81057b4:	46bd      	mov	sp, r7
 81057b6:	bd80      	pop	{r7, pc}

081057b8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 81057b8:	b580      	push	{r7, lr}
 81057ba:	b08e      	sub	sp, #56	@ 0x38
 81057bc:	af00      	add	r7, sp, #0
 81057be:	6078      	str	r0, [r7, #4]
 81057c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 81057c2:	687b      	ldr	r3, [r7, #4]
 81057c4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 81057c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81057c8:	2b00      	cmp	r3, #0
 81057ca:	d10b      	bne.n	81057e4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 81057cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81057d0:	f383 8811 	msr	BASEPRI, r3
 81057d4:	f3bf 8f6f 	isb	sy
 81057d8:	f3bf 8f4f 	dsb	sy
 81057dc:	623b      	str	r3, [r7, #32]
}
 81057de:	bf00      	nop
 81057e0:	bf00      	nop
 81057e2:	e7fd      	b.n	81057e0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 81057e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81057e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81057e8:	2b00      	cmp	r3, #0
 81057ea:	d00b      	beq.n	8105804 <xQueueGiveFromISR+0x4c>
	__asm volatile
 81057ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81057f0:	f383 8811 	msr	BASEPRI, r3
 81057f4:	f3bf 8f6f 	isb	sy
 81057f8:	f3bf 8f4f 	dsb	sy
 81057fc:	61fb      	str	r3, [r7, #28]
}
 81057fe:	bf00      	nop
 8105800:	bf00      	nop
 8105802:	e7fd      	b.n	8105800 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8105804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105806:	681b      	ldr	r3, [r3, #0]
 8105808:	2b00      	cmp	r3, #0
 810580a:	d103      	bne.n	8105814 <xQueueGiveFromISR+0x5c>
 810580c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810580e:	689b      	ldr	r3, [r3, #8]
 8105810:	2b00      	cmp	r3, #0
 8105812:	d101      	bne.n	8105818 <xQueueGiveFromISR+0x60>
 8105814:	2301      	movs	r3, #1
 8105816:	e000      	b.n	810581a <xQueueGiveFromISR+0x62>
 8105818:	2300      	movs	r3, #0
 810581a:	2b00      	cmp	r3, #0
 810581c:	d10b      	bne.n	8105836 <xQueueGiveFromISR+0x7e>
	__asm volatile
 810581e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105822:	f383 8811 	msr	BASEPRI, r3
 8105826:	f3bf 8f6f 	isb	sy
 810582a:	f3bf 8f4f 	dsb	sy
 810582e:	61bb      	str	r3, [r7, #24]
}
 8105830:	bf00      	nop
 8105832:	bf00      	nop
 8105834:	e7fd      	b.n	8105832 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8105836:	f7ff fc97 	bl	8105168 <vPortValidateInterruptPriority>
	__asm volatile
 810583a:	f3ef 8211 	mrs	r2, BASEPRI
 810583e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105842:	f383 8811 	msr	BASEPRI, r3
 8105846:	f3bf 8f6f 	isb	sy
 810584a:	f3bf 8f4f 	dsb	sy
 810584e:	617a      	str	r2, [r7, #20]
 8105850:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8105852:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8105854:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8105856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810585a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 810585c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810585e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105860:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8105862:	429a      	cmp	r2, r3
 8105864:	d22b      	bcs.n	81058be <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8105866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105868:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810586c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8105870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105872:	1c5a      	adds	r2, r3, #1
 8105874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105876:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8105878:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 810587c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105880:	d112      	bne.n	81058a8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8105882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105886:	2b00      	cmp	r3, #0
 8105888:	d016      	beq.n	81058b8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810588a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810588c:	3324      	adds	r3, #36	@ 0x24
 810588e:	4618      	mov	r0, r3
 8105890:	f001 f99e 	bl	8106bd0 <xTaskRemoveFromEventList>
 8105894:	4603      	mov	r3, r0
 8105896:	2b00      	cmp	r3, #0
 8105898:	d00e      	beq.n	81058b8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 810589a:	683b      	ldr	r3, [r7, #0]
 810589c:	2b00      	cmp	r3, #0
 810589e:	d00b      	beq.n	81058b8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 81058a0:	683b      	ldr	r3, [r7, #0]
 81058a2:	2201      	movs	r2, #1
 81058a4:	601a      	str	r2, [r3, #0]
 81058a6:	e007      	b.n	81058b8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 81058a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81058ac:	3301      	adds	r3, #1
 81058ae:	b2db      	uxtb	r3, r3
 81058b0:	b25a      	sxtb	r2, r3
 81058b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81058b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 81058b8:	2301      	movs	r3, #1
 81058ba:	637b      	str	r3, [r7, #52]	@ 0x34
 81058bc:	e001      	b.n	81058c2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 81058be:	2300      	movs	r3, #0
 81058c0:	637b      	str	r3, [r7, #52]	@ 0x34
 81058c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81058c4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 81058c6:	68fb      	ldr	r3, [r7, #12]
 81058c8:	f383 8811 	msr	BASEPRI, r3
}
 81058cc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 81058ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 81058d0:	4618      	mov	r0, r3
 81058d2:	3738      	adds	r7, #56	@ 0x38
 81058d4:	46bd      	mov	sp, r7
 81058d6:	bd80      	pop	{r7, pc}

081058d8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 81058d8:	b580      	push	{r7, lr}
 81058da:	b08c      	sub	sp, #48	@ 0x30
 81058dc:	af00      	add	r7, sp, #0
 81058de:	60f8      	str	r0, [r7, #12]
 81058e0:	60b9      	str	r1, [r7, #8]
 81058e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 81058e4:	2300      	movs	r3, #0
 81058e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 81058e8:	68fb      	ldr	r3, [r7, #12]
 81058ea:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 81058ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81058ee:	2b00      	cmp	r3, #0
 81058f0:	d10b      	bne.n	810590a <xQueueReceive+0x32>
	__asm volatile
 81058f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81058f6:	f383 8811 	msr	BASEPRI, r3
 81058fa:	f3bf 8f6f 	isb	sy
 81058fe:	f3bf 8f4f 	dsb	sy
 8105902:	623b      	str	r3, [r7, #32]
}
 8105904:	bf00      	nop
 8105906:	bf00      	nop
 8105908:	e7fd      	b.n	8105906 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810590a:	68bb      	ldr	r3, [r7, #8]
 810590c:	2b00      	cmp	r3, #0
 810590e:	d103      	bne.n	8105918 <xQueueReceive+0x40>
 8105910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105914:	2b00      	cmp	r3, #0
 8105916:	d101      	bne.n	810591c <xQueueReceive+0x44>
 8105918:	2301      	movs	r3, #1
 810591a:	e000      	b.n	810591e <xQueueReceive+0x46>
 810591c:	2300      	movs	r3, #0
 810591e:	2b00      	cmp	r3, #0
 8105920:	d10b      	bne.n	810593a <xQueueReceive+0x62>
	__asm volatile
 8105922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105926:	f383 8811 	msr	BASEPRI, r3
 810592a:	f3bf 8f6f 	isb	sy
 810592e:	f3bf 8f4f 	dsb	sy
 8105932:	61fb      	str	r3, [r7, #28]
}
 8105934:	bf00      	nop
 8105936:	bf00      	nop
 8105938:	e7fd      	b.n	8105936 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810593a:	f001 fb1f 	bl	8106f7c <xTaskGetSchedulerState>
 810593e:	4603      	mov	r3, r0
 8105940:	2b00      	cmp	r3, #0
 8105942:	d102      	bne.n	810594a <xQueueReceive+0x72>
 8105944:	687b      	ldr	r3, [r7, #4]
 8105946:	2b00      	cmp	r3, #0
 8105948:	d101      	bne.n	810594e <xQueueReceive+0x76>
 810594a:	2301      	movs	r3, #1
 810594c:	e000      	b.n	8105950 <xQueueReceive+0x78>
 810594e:	2300      	movs	r3, #0
 8105950:	2b00      	cmp	r3, #0
 8105952:	d10b      	bne.n	810596c <xQueueReceive+0x94>
	__asm volatile
 8105954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105958:	f383 8811 	msr	BASEPRI, r3
 810595c:	f3bf 8f6f 	isb	sy
 8105960:	f3bf 8f4f 	dsb	sy
 8105964:	61bb      	str	r3, [r7, #24]
}
 8105966:	bf00      	nop
 8105968:	bf00      	nop
 810596a:	e7fd      	b.n	8105968 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810596c:	f7ff fb1c 	bl	8104fa8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8105970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105974:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8105976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105978:	2b00      	cmp	r3, #0
 810597a:	d01f      	beq.n	81059bc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 810597c:	68b9      	ldr	r1, [r7, #8]
 810597e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8105980:	f000 f8f6 	bl	8105b70 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8105984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105986:	1e5a      	subs	r2, r3, #1
 8105988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810598a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810598c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810598e:	691b      	ldr	r3, [r3, #16]
 8105990:	2b00      	cmp	r3, #0
 8105992:	d00f      	beq.n	81059b4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8105994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105996:	3310      	adds	r3, #16
 8105998:	4618      	mov	r0, r3
 810599a:	f001 f919 	bl	8106bd0 <xTaskRemoveFromEventList>
 810599e:	4603      	mov	r3, r0
 81059a0:	2b00      	cmp	r3, #0
 81059a2:	d007      	beq.n	81059b4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 81059a4:	4b3c      	ldr	r3, [pc, #240]	@ (8105a98 <xQueueReceive+0x1c0>)
 81059a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81059aa:	601a      	str	r2, [r3, #0]
 81059ac:	f3bf 8f4f 	dsb	sy
 81059b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 81059b4:	f7ff fb2a 	bl	810500c <vPortExitCritical>
				return pdPASS;
 81059b8:	2301      	movs	r3, #1
 81059ba:	e069      	b.n	8105a90 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 81059bc:	687b      	ldr	r3, [r7, #4]
 81059be:	2b00      	cmp	r3, #0
 81059c0:	d103      	bne.n	81059ca <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 81059c2:	f7ff fb23 	bl	810500c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 81059c6:	2300      	movs	r3, #0
 81059c8:	e062      	b.n	8105a90 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 81059ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81059cc:	2b00      	cmp	r3, #0
 81059ce:	d106      	bne.n	81059de <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 81059d0:	f107 0310 	add.w	r3, r7, #16
 81059d4:	4618      	mov	r0, r3
 81059d6:	f001 f95f 	bl	8106c98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 81059da:	2301      	movs	r3, #1
 81059dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 81059de:	f7ff fb15 	bl	810500c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 81059e2:	f000 fec7 	bl	8106774 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 81059e6:	f7ff fadf 	bl	8104fa8 <vPortEnterCritical>
 81059ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81059ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 81059f0:	b25b      	sxtb	r3, r3
 81059f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81059f6:	d103      	bne.n	8105a00 <xQueueReceive+0x128>
 81059f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81059fa:	2200      	movs	r2, #0
 81059fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8105a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105a02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8105a06:	b25b      	sxtb	r3, r3
 8105a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105a0c:	d103      	bne.n	8105a16 <xQueueReceive+0x13e>
 8105a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105a10:	2200      	movs	r2, #0
 8105a12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8105a16:	f7ff faf9 	bl	810500c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8105a1a:	1d3a      	adds	r2, r7, #4
 8105a1c:	f107 0310 	add.w	r3, r7, #16
 8105a20:	4611      	mov	r1, r2
 8105a22:	4618      	mov	r0, r3
 8105a24:	f001 f94e 	bl	8106cc4 <xTaskCheckForTimeOut>
 8105a28:	4603      	mov	r3, r0
 8105a2a:	2b00      	cmp	r3, #0
 8105a2c:	d123      	bne.n	8105a76 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8105a2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8105a30:	f000 f916 	bl	8105c60 <prvIsQueueEmpty>
 8105a34:	4603      	mov	r3, r0
 8105a36:	2b00      	cmp	r3, #0
 8105a38:	d017      	beq.n	8105a6a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8105a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105a3c:	3324      	adds	r3, #36	@ 0x24
 8105a3e:	687a      	ldr	r2, [r7, #4]
 8105a40:	4611      	mov	r1, r2
 8105a42:	4618      	mov	r0, r3
 8105a44:	f001 f872 	bl	8106b2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8105a48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8105a4a:	f000 f8b7 	bl	8105bbc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8105a4e:	f000 fe9f 	bl	8106790 <xTaskResumeAll>
 8105a52:	4603      	mov	r3, r0
 8105a54:	2b00      	cmp	r3, #0
 8105a56:	d189      	bne.n	810596c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8105a58:	4b0f      	ldr	r3, [pc, #60]	@ (8105a98 <xQueueReceive+0x1c0>)
 8105a5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8105a5e:	601a      	str	r2, [r3, #0]
 8105a60:	f3bf 8f4f 	dsb	sy
 8105a64:	f3bf 8f6f 	isb	sy
 8105a68:	e780      	b.n	810596c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8105a6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8105a6c:	f000 f8a6 	bl	8105bbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8105a70:	f000 fe8e 	bl	8106790 <xTaskResumeAll>
 8105a74:	e77a      	b.n	810596c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8105a76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8105a78:	f000 f8a0 	bl	8105bbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8105a7c:	f000 fe88 	bl	8106790 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8105a80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8105a82:	f000 f8ed 	bl	8105c60 <prvIsQueueEmpty>
 8105a86:	4603      	mov	r3, r0
 8105a88:	2b00      	cmp	r3, #0
 8105a8a:	f43f af6f 	beq.w	810596c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8105a8e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8105a90:	4618      	mov	r0, r3
 8105a92:	3730      	adds	r7, #48	@ 0x30
 8105a94:	46bd      	mov	sp, r7
 8105a96:	bd80      	pop	{r7, pc}
 8105a98:	e000ed04 	.word	0xe000ed04

08105a9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8105a9c:	b580      	push	{r7, lr}
 8105a9e:	b086      	sub	sp, #24
 8105aa0:	af00      	add	r7, sp, #0
 8105aa2:	60f8      	str	r0, [r7, #12]
 8105aa4:	60b9      	str	r1, [r7, #8]
 8105aa6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8105aa8:	2300      	movs	r3, #0
 8105aaa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8105aac:	68fb      	ldr	r3, [r7, #12]
 8105aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105ab0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8105ab2:	68fb      	ldr	r3, [r7, #12]
 8105ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105ab6:	2b00      	cmp	r3, #0
 8105ab8:	d10d      	bne.n	8105ad6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8105aba:	68fb      	ldr	r3, [r7, #12]
 8105abc:	681b      	ldr	r3, [r3, #0]
 8105abe:	2b00      	cmp	r3, #0
 8105ac0:	d14d      	bne.n	8105b5e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8105ac2:	68fb      	ldr	r3, [r7, #12]
 8105ac4:	689b      	ldr	r3, [r3, #8]
 8105ac6:	4618      	mov	r0, r3
 8105ac8:	f001 fa76 	bl	8106fb8 <xTaskPriorityDisinherit>
 8105acc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8105ace:	68fb      	ldr	r3, [r7, #12]
 8105ad0:	2200      	movs	r2, #0
 8105ad2:	609a      	str	r2, [r3, #8]
 8105ad4:	e043      	b.n	8105b5e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8105ad6:	687b      	ldr	r3, [r7, #4]
 8105ad8:	2b00      	cmp	r3, #0
 8105ada:	d119      	bne.n	8105b10 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8105adc:	68fb      	ldr	r3, [r7, #12]
 8105ade:	6858      	ldr	r0, [r3, #4]
 8105ae0:	68fb      	ldr	r3, [r7, #12]
 8105ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105ae4:	461a      	mov	r2, r3
 8105ae6:	68b9      	ldr	r1, [r7, #8]
 8105ae8:	f002 fa8e 	bl	8108008 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8105aec:	68fb      	ldr	r3, [r7, #12]
 8105aee:	685a      	ldr	r2, [r3, #4]
 8105af0:	68fb      	ldr	r3, [r7, #12]
 8105af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105af4:	441a      	add	r2, r3
 8105af6:	68fb      	ldr	r3, [r7, #12]
 8105af8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8105afa:	68fb      	ldr	r3, [r7, #12]
 8105afc:	685a      	ldr	r2, [r3, #4]
 8105afe:	68fb      	ldr	r3, [r7, #12]
 8105b00:	689b      	ldr	r3, [r3, #8]
 8105b02:	429a      	cmp	r2, r3
 8105b04:	d32b      	bcc.n	8105b5e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8105b06:	68fb      	ldr	r3, [r7, #12]
 8105b08:	681a      	ldr	r2, [r3, #0]
 8105b0a:	68fb      	ldr	r3, [r7, #12]
 8105b0c:	605a      	str	r2, [r3, #4]
 8105b0e:	e026      	b.n	8105b5e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8105b10:	68fb      	ldr	r3, [r7, #12]
 8105b12:	68d8      	ldr	r0, [r3, #12]
 8105b14:	68fb      	ldr	r3, [r7, #12]
 8105b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105b18:	461a      	mov	r2, r3
 8105b1a:	68b9      	ldr	r1, [r7, #8]
 8105b1c:	f002 fa74 	bl	8108008 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8105b20:	68fb      	ldr	r3, [r7, #12]
 8105b22:	68da      	ldr	r2, [r3, #12]
 8105b24:	68fb      	ldr	r3, [r7, #12]
 8105b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105b28:	425b      	negs	r3, r3
 8105b2a:	441a      	add	r2, r3
 8105b2c:	68fb      	ldr	r3, [r7, #12]
 8105b2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8105b30:	68fb      	ldr	r3, [r7, #12]
 8105b32:	68da      	ldr	r2, [r3, #12]
 8105b34:	68fb      	ldr	r3, [r7, #12]
 8105b36:	681b      	ldr	r3, [r3, #0]
 8105b38:	429a      	cmp	r2, r3
 8105b3a:	d207      	bcs.n	8105b4c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8105b3c:	68fb      	ldr	r3, [r7, #12]
 8105b3e:	689a      	ldr	r2, [r3, #8]
 8105b40:	68fb      	ldr	r3, [r7, #12]
 8105b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105b44:	425b      	negs	r3, r3
 8105b46:	441a      	add	r2, r3
 8105b48:	68fb      	ldr	r3, [r7, #12]
 8105b4a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8105b4c:	687b      	ldr	r3, [r7, #4]
 8105b4e:	2b02      	cmp	r3, #2
 8105b50:	d105      	bne.n	8105b5e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8105b52:	693b      	ldr	r3, [r7, #16]
 8105b54:	2b00      	cmp	r3, #0
 8105b56:	d002      	beq.n	8105b5e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8105b58:	693b      	ldr	r3, [r7, #16]
 8105b5a:	3b01      	subs	r3, #1
 8105b5c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8105b5e:	693b      	ldr	r3, [r7, #16]
 8105b60:	1c5a      	adds	r2, r3, #1
 8105b62:	68fb      	ldr	r3, [r7, #12]
 8105b64:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8105b66:	697b      	ldr	r3, [r7, #20]
}
 8105b68:	4618      	mov	r0, r3
 8105b6a:	3718      	adds	r7, #24
 8105b6c:	46bd      	mov	sp, r7
 8105b6e:	bd80      	pop	{r7, pc}

08105b70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8105b70:	b580      	push	{r7, lr}
 8105b72:	b082      	sub	sp, #8
 8105b74:	af00      	add	r7, sp, #0
 8105b76:	6078      	str	r0, [r7, #4]
 8105b78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8105b7a:	687b      	ldr	r3, [r7, #4]
 8105b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105b7e:	2b00      	cmp	r3, #0
 8105b80:	d018      	beq.n	8105bb4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8105b82:	687b      	ldr	r3, [r7, #4]
 8105b84:	68da      	ldr	r2, [r3, #12]
 8105b86:	687b      	ldr	r3, [r7, #4]
 8105b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105b8a:	441a      	add	r2, r3
 8105b8c:	687b      	ldr	r3, [r7, #4]
 8105b8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8105b90:	687b      	ldr	r3, [r7, #4]
 8105b92:	68da      	ldr	r2, [r3, #12]
 8105b94:	687b      	ldr	r3, [r7, #4]
 8105b96:	689b      	ldr	r3, [r3, #8]
 8105b98:	429a      	cmp	r2, r3
 8105b9a:	d303      	bcc.n	8105ba4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8105b9c:	687b      	ldr	r3, [r7, #4]
 8105b9e:	681a      	ldr	r2, [r3, #0]
 8105ba0:	687b      	ldr	r3, [r7, #4]
 8105ba2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8105ba4:	687b      	ldr	r3, [r7, #4]
 8105ba6:	68d9      	ldr	r1, [r3, #12]
 8105ba8:	687b      	ldr	r3, [r7, #4]
 8105baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105bac:	461a      	mov	r2, r3
 8105bae:	6838      	ldr	r0, [r7, #0]
 8105bb0:	f002 fa2a 	bl	8108008 <memcpy>
	}
}
 8105bb4:	bf00      	nop
 8105bb6:	3708      	adds	r7, #8
 8105bb8:	46bd      	mov	sp, r7
 8105bba:	bd80      	pop	{r7, pc}

08105bbc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8105bbc:	b580      	push	{r7, lr}
 8105bbe:	b084      	sub	sp, #16
 8105bc0:	af00      	add	r7, sp, #0
 8105bc2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8105bc4:	f7ff f9f0 	bl	8104fa8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8105bc8:	687b      	ldr	r3, [r7, #4]
 8105bca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8105bce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8105bd0:	e011      	b.n	8105bf6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8105bd2:	687b      	ldr	r3, [r7, #4]
 8105bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105bd6:	2b00      	cmp	r3, #0
 8105bd8:	d012      	beq.n	8105c00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8105bda:	687b      	ldr	r3, [r7, #4]
 8105bdc:	3324      	adds	r3, #36	@ 0x24
 8105bde:	4618      	mov	r0, r3
 8105be0:	f000 fff6 	bl	8106bd0 <xTaskRemoveFromEventList>
 8105be4:	4603      	mov	r3, r0
 8105be6:	2b00      	cmp	r3, #0
 8105be8:	d001      	beq.n	8105bee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8105bea:	f001 f8cf 	bl	8106d8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8105bee:	7bfb      	ldrb	r3, [r7, #15]
 8105bf0:	3b01      	subs	r3, #1
 8105bf2:	b2db      	uxtb	r3, r3
 8105bf4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8105bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8105bfa:	2b00      	cmp	r3, #0
 8105bfc:	dce9      	bgt.n	8105bd2 <prvUnlockQueue+0x16>
 8105bfe:	e000      	b.n	8105c02 <prvUnlockQueue+0x46>
					break;
 8105c00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8105c02:	687b      	ldr	r3, [r7, #4]
 8105c04:	22ff      	movs	r2, #255	@ 0xff
 8105c06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8105c0a:	f7ff f9ff 	bl	810500c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8105c0e:	f7ff f9cb 	bl	8104fa8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8105c12:	687b      	ldr	r3, [r7, #4]
 8105c14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8105c18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8105c1a:	e011      	b.n	8105c40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8105c1c:	687b      	ldr	r3, [r7, #4]
 8105c1e:	691b      	ldr	r3, [r3, #16]
 8105c20:	2b00      	cmp	r3, #0
 8105c22:	d012      	beq.n	8105c4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8105c24:	687b      	ldr	r3, [r7, #4]
 8105c26:	3310      	adds	r3, #16
 8105c28:	4618      	mov	r0, r3
 8105c2a:	f000 ffd1 	bl	8106bd0 <xTaskRemoveFromEventList>
 8105c2e:	4603      	mov	r3, r0
 8105c30:	2b00      	cmp	r3, #0
 8105c32:	d001      	beq.n	8105c38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8105c34:	f001 f8aa 	bl	8106d8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8105c38:	7bbb      	ldrb	r3, [r7, #14]
 8105c3a:	3b01      	subs	r3, #1
 8105c3c:	b2db      	uxtb	r3, r3
 8105c3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8105c40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8105c44:	2b00      	cmp	r3, #0
 8105c46:	dce9      	bgt.n	8105c1c <prvUnlockQueue+0x60>
 8105c48:	e000      	b.n	8105c4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8105c4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8105c4c:	687b      	ldr	r3, [r7, #4]
 8105c4e:	22ff      	movs	r2, #255	@ 0xff
 8105c50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8105c54:	f7ff f9da 	bl	810500c <vPortExitCritical>
}
 8105c58:	bf00      	nop
 8105c5a:	3710      	adds	r7, #16
 8105c5c:	46bd      	mov	sp, r7
 8105c5e:	bd80      	pop	{r7, pc}

08105c60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8105c60:	b580      	push	{r7, lr}
 8105c62:	b084      	sub	sp, #16
 8105c64:	af00      	add	r7, sp, #0
 8105c66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8105c68:	f7ff f99e 	bl	8104fa8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8105c6c:	687b      	ldr	r3, [r7, #4]
 8105c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105c70:	2b00      	cmp	r3, #0
 8105c72:	d102      	bne.n	8105c7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8105c74:	2301      	movs	r3, #1
 8105c76:	60fb      	str	r3, [r7, #12]
 8105c78:	e001      	b.n	8105c7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8105c7a:	2300      	movs	r3, #0
 8105c7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8105c7e:	f7ff f9c5 	bl	810500c <vPortExitCritical>

	return xReturn;
 8105c82:	68fb      	ldr	r3, [r7, #12]
}
 8105c84:	4618      	mov	r0, r3
 8105c86:	3710      	adds	r7, #16
 8105c88:	46bd      	mov	sp, r7
 8105c8a:	bd80      	pop	{r7, pc}

08105c8c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8105c8c:	b580      	push	{r7, lr}
 8105c8e:	b084      	sub	sp, #16
 8105c90:	af00      	add	r7, sp, #0
 8105c92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8105c94:	f7ff f988 	bl	8104fa8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8105c98:	687b      	ldr	r3, [r7, #4]
 8105c9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8105c9c:	687b      	ldr	r3, [r7, #4]
 8105c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105ca0:	429a      	cmp	r2, r3
 8105ca2:	d102      	bne.n	8105caa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8105ca4:	2301      	movs	r3, #1
 8105ca6:	60fb      	str	r3, [r7, #12]
 8105ca8:	e001      	b.n	8105cae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8105caa:	2300      	movs	r3, #0
 8105cac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8105cae:	f7ff f9ad 	bl	810500c <vPortExitCritical>

	return xReturn;
 8105cb2:	68fb      	ldr	r3, [r7, #12]
}
 8105cb4:	4618      	mov	r0, r3
 8105cb6:	3710      	adds	r7, #16
 8105cb8:	46bd      	mov	sp, r7
 8105cba:	bd80      	pop	{r7, pc}

08105cbc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8105cbc:	b480      	push	{r7}
 8105cbe:	b085      	sub	sp, #20
 8105cc0:	af00      	add	r7, sp, #0
 8105cc2:	6078      	str	r0, [r7, #4]
 8105cc4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8105cc6:	2300      	movs	r3, #0
 8105cc8:	60fb      	str	r3, [r7, #12]
 8105cca:	e014      	b.n	8105cf6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8105ccc:	4a0f      	ldr	r2, [pc, #60]	@ (8105d0c <vQueueAddToRegistry+0x50>)
 8105cce:	68fb      	ldr	r3, [r7, #12]
 8105cd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8105cd4:	2b00      	cmp	r3, #0
 8105cd6:	d10b      	bne.n	8105cf0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8105cd8:	490c      	ldr	r1, [pc, #48]	@ (8105d0c <vQueueAddToRegistry+0x50>)
 8105cda:	68fb      	ldr	r3, [r7, #12]
 8105cdc:	683a      	ldr	r2, [r7, #0]
 8105cde:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8105ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8105d0c <vQueueAddToRegistry+0x50>)
 8105ce4:	68fb      	ldr	r3, [r7, #12]
 8105ce6:	00db      	lsls	r3, r3, #3
 8105ce8:	4413      	add	r3, r2
 8105cea:	687a      	ldr	r2, [r7, #4]
 8105cec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8105cee:	e006      	b.n	8105cfe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8105cf0:	68fb      	ldr	r3, [r7, #12]
 8105cf2:	3301      	adds	r3, #1
 8105cf4:	60fb      	str	r3, [r7, #12]
 8105cf6:	68fb      	ldr	r3, [r7, #12]
 8105cf8:	2b07      	cmp	r3, #7
 8105cfa:	d9e7      	bls.n	8105ccc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8105cfc:	bf00      	nop
 8105cfe:	bf00      	nop
 8105d00:	3714      	adds	r7, #20
 8105d02:	46bd      	mov	sp, r7
 8105d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d08:	4770      	bx	lr
 8105d0a:	bf00      	nop
 8105d0c:	10004520 	.word	0x10004520

08105d10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8105d10:	b580      	push	{r7, lr}
 8105d12:	b086      	sub	sp, #24
 8105d14:	af00      	add	r7, sp, #0
 8105d16:	60f8      	str	r0, [r7, #12]
 8105d18:	60b9      	str	r1, [r7, #8]
 8105d1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8105d1c:	68fb      	ldr	r3, [r7, #12]
 8105d1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8105d20:	f7ff f942 	bl	8104fa8 <vPortEnterCritical>
 8105d24:	697b      	ldr	r3, [r7, #20]
 8105d26:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8105d2a:	b25b      	sxtb	r3, r3
 8105d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105d30:	d103      	bne.n	8105d3a <vQueueWaitForMessageRestricted+0x2a>
 8105d32:	697b      	ldr	r3, [r7, #20]
 8105d34:	2200      	movs	r2, #0
 8105d36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8105d3a:	697b      	ldr	r3, [r7, #20]
 8105d3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8105d40:	b25b      	sxtb	r3, r3
 8105d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105d46:	d103      	bne.n	8105d50 <vQueueWaitForMessageRestricted+0x40>
 8105d48:	697b      	ldr	r3, [r7, #20]
 8105d4a:	2200      	movs	r2, #0
 8105d4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8105d50:	f7ff f95c 	bl	810500c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8105d54:	697b      	ldr	r3, [r7, #20]
 8105d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105d58:	2b00      	cmp	r3, #0
 8105d5a:	d106      	bne.n	8105d6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8105d5c:	697b      	ldr	r3, [r7, #20]
 8105d5e:	3324      	adds	r3, #36	@ 0x24
 8105d60:	687a      	ldr	r2, [r7, #4]
 8105d62:	68b9      	ldr	r1, [r7, #8]
 8105d64:	4618      	mov	r0, r3
 8105d66:	f000 ff07 	bl	8106b78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8105d6a:	6978      	ldr	r0, [r7, #20]
 8105d6c:	f7ff ff26 	bl	8105bbc <prvUnlockQueue>
	}
 8105d70:	bf00      	nop
 8105d72:	3718      	adds	r7, #24
 8105d74:	46bd      	mov	sp, r7
 8105d76:	bd80      	pop	{r7, pc}

08105d78 <xStreamBufferGenericCreateStatic>:
	StreamBufferHandle_t xStreamBufferGenericCreateStatic( size_t xBufferSizeBytes,
														   size_t xTriggerLevelBytes,
														   BaseType_t xIsMessageBuffer,
														   uint8_t * const pucStreamBufferStorageArea,
														   StaticStreamBuffer_t * const pxStaticStreamBuffer )
	{
 8105d78:	b580      	push	{r7, lr}
 8105d7a:	b090      	sub	sp, #64	@ 0x40
 8105d7c:	af02      	add	r7, sp, #8
 8105d7e:	60f8      	str	r0, [r7, #12]
 8105d80:	60b9      	str	r1, [r7, #8]
 8105d82:	607a      	str	r2, [r7, #4]
 8105d84:	603b      	str	r3, [r7, #0]
	StreamBuffer_t * const pxStreamBuffer = ( StreamBuffer_t * ) pxStaticStreamBuffer; /*lint !e740 !e9087 Safe cast as StaticStreamBuffer_t is opaque Streambuffer_t. */
 8105d86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8105d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
	StreamBufferHandle_t xReturn;
	uint8_t ucFlags;

		configASSERT( pucStreamBufferStorageArea );
 8105d8a:	683b      	ldr	r3, [r7, #0]
 8105d8c:	2b00      	cmp	r3, #0
 8105d8e:	d10b      	bne.n	8105da8 <xStreamBufferGenericCreateStatic+0x30>
	__asm volatile
 8105d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105d94:	f383 8811 	msr	BASEPRI, r3
 8105d98:	f3bf 8f6f 	isb	sy
 8105d9c:	f3bf 8f4f 	dsb	sy
 8105da0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8105da2:	bf00      	nop
 8105da4:	bf00      	nop
 8105da6:	e7fd      	b.n	8105da4 <xStreamBufferGenericCreateStatic+0x2c>
		configASSERT( pxStaticStreamBuffer );
 8105da8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8105daa:	2b00      	cmp	r3, #0
 8105dac:	d10b      	bne.n	8105dc6 <xStreamBufferGenericCreateStatic+0x4e>
	__asm volatile
 8105dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105db2:	f383 8811 	msr	BASEPRI, r3
 8105db6:	f3bf 8f6f 	isb	sy
 8105dba:	f3bf 8f4f 	dsb	sy
 8105dbe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8105dc0:	bf00      	nop
 8105dc2:	bf00      	nop
 8105dc4:	e7fd      	b.n	8105dc2 <xStreamBufferGenericCreateStatic+0x4a>
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8105dc6:	68ba      	ldr	r2, [r7, #8]
 8105dc8:	68fb      	ldr	r3, [r7, #12]
 8105dca:	429a      	cmp	r2, r3
 8105dcc:	d90b      	bls.n	8105de6 <xStreamBufferGenericCreateStatic+0x6e>
	__asm volatile
 8105dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105dd2:	f383 8811 	msr	BASEPRI, r3
 8105dd6:	f3bf 8f6f 	isb	sy
 8105dda:	f3bf 8f4f 	dsb	sy
 8105dde:	623b      	str	r3, [r7, #32]
}
 8105de0:	bf00      	nop
 8105de2:	bf00      	nop
 8105de4:	e7fd      	b.n	8105de2 <xStreamBufferGenericCreateStatic+0x6a>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8105de6:	68bb      	ldr	r3, [r7, #8]
 8105de8:	2b00      	cmp	r3, #0
 8105dea:	d101      	bne.n	8105df0 <xStreamBufferGenericCreateStatic+0x78>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8105dec:	2301      	movs	r3, #1
 8105dee:	60bb      	str	r3, [r7, #8]
		}

		if( xIsMessageBuffer != pdFALSE )
 8105df0:	687b      	ldr	r3, [r7, #4]
 8105df2:	2b00      	cmp	r3, #0
 8105df4:	d003      	beq.n	8105dfe <xStreamBufferGenericCreateStatic+0x86>
		{
			/* Statically allocated message buffer. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER | sbFLAGS_IS_STATICALLY_ALLOCATED;
 8105df6:	2303      	movs	r3, #3
 8105df8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8105dfc:	e002      	b.n	8105e04 <xStreamBufferGenericCreateStatic+0x8c>
		}
		else
		{
			/* Statically allocated stream buffer. */
			ucFlags = sbFLAGS_IS_STATICALLY_ALLOCATED;
 8105dfe:	2302      	movs	r3, #2
 8105e00:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8105e04:	68fb      	ldr	r3, [r7, #12]
 8105e06:	2b04      	cmp	r3, #4
 8105e08:	d80b      	bhi.n	8105e22 <xStreamBufferGenericCreateStatic+0xaa>
	__asm volatile
 8105e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105e0e:	f383 8811 	msr	BASEPRI, r3
 8105e12:	f3bf 8f6f 	isb	sy
 8105e16:	f3bf 8f4f 	dsb	sy
 8105e1a:	61fb      	str	r3, [r7, #28]
}
 8105e1c:	bf00      	nop
 8105e1e:	bf00      	nop
 8105e20:	e7fd      	b.n	8105e1e <xStreamBufferGenericCreateStatic+0xa6>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticStreamBuffer_t equals the size of the real
			message buffer structure. */
			volatile size_t xSize = sizeof( StaticStreamBuffer_t );
 8105e22:	2324      	movs	r3, #36	@ 0x24
 8105e24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( StreamBuffer_t ) );
 8105e26:	697b      	ldr	r3, [r7, #20]
 8105e28:	2b24      	cmp	r3, #36	@ 0x24
 8105e2a:	d00b      	beq.n	8105e44 <xStreamBufferGenericCreateStatic+0xcc>
	__asm volatile
 8105e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105e30:	f383 8811 	msr	BASEPRI, r3
 8105e34:	f3bf 8f6f 	isb	sy
 8105e38:	f3bf 8f4f 	dsb	sy
 8105e3c:	61bb      	str	r3, [r7, #24]
}
 8105e3e:	bf00      	nop
 8105e40:	bf00      	nop
 8105e42:	e7fd      	b.n	8105e40 <xStreamBufferGenericCreateStatic+0xc8>
		} /*lint !e529 xSize is referenced is configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		if( ( pucStreamBufferStorageArea != NULL ) && ( pxStaticStreamBuffer != NULL ) )
 8105e44:	683b      	ldr	r3, [r7, #0]
 8105e46:	2b00      	cmp	r3, #0
 8105e48:	d015      	beq.n	8105e76 <xStreamBufferGenericCreateStatic+0xfe>
 8105e4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8105e4c:	2b00      	cmp	r3, #0
 8105e4e:	d012      	beq.n	8105e76 <xStreamBufferGenericCreateStatic+0xfe>
		{
			prvInitialiseNewStreamBuffer( pxStreamBuffer,
 8105e50:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8105e54:	9300      	str	r3, [sp, #0]
 8105e56:	68bb      	ldr	r3, [r7, #8]
 8105e58:	68fa      	ldr	r2, [r7, #12]
 8105e5a:	6839      	ldr	r1, [r7, #0]
 8105e5c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8105e5e:	f000 f9f1 	bl	8106244 <prvInitialiseNewStreamBuffer>
										  xTriggerLevelBytes,
										  ucFlags );

			/* Remember this was statically allocated in case it is ever deleted
			again. */
			pxStreamBuffer->ucFlags |= sbFLAGS_IS_STATICALLY_ALLOCATED;
 8105e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105e64:	7f1b      	ldrb	r3, [r3, #28]
 8105e66:	f043 0302 	orr.w	r3, r3, #2
 8105e6a:	b2da      	uxtb	r2, r3
 8105e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105e6e:	771a      	strb	r2, [r3, #28]

			traceSTREAM_BUFFER_CREATE( pxStreamBuffer, xIsMessageBuffer );

			xReturn = ( StreamBufferHandle_t ) pxStaticStreamBuffer; /*lint !e9087 Data hiding requires cast to opaque type. */
 8105e70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8105e72:	637b      	str	r3, [r7, #52]	@ 0x34
 8105e74:	e001      	b.n	8105e7a <xStreamBufferGenericCreateStatic+0x102>
		}
		else
		{
			xReturn = NULL;
 8105e76:	2300      	movs	r3, #0
 8105e78:	637b      	str	r3, [r7, #52]	@ 0x34
			traceSTREAM_BUFFER_CREATE_STATIC_FAILED( xReturn, xIsMessageBuffer );
		}

		return xReturn;
 8105e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8105e7c:	4618      	mov	r0, r3
 8105e7e:	3738      	adds	r7, #56	@ 0x38
 8105e80:	46bd      	mov	sp, r7
 8105e82:	bd80      	pop	{r7, pc}

08105e84 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8105e84:	b580      	push	{r7, lr}
 8105e86:	b08e      	sub	sp, #56	@ 0x38
 8105e88:	af02      	add	r7, sp, #8
 8105e8a:	60f8      	str	r0, [r7, #12]
 8105e8c:	60b9      	str	r1, [r7, #8]
 8105e8e:	607a      	str	r2, [r7, #4]
 8105e90:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8105e92:	68fb      	ldr	r3, [r7, #12]
 8105e94:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8105e96:	2300      	movs	r3, #0
 8105e98:	62fb      	str	r3, [r7, #44]	@ 0x2c

	configASSERT( pvRxData );
 8105e9a:	68bb      	ldr	r3, [r7, #8]
 8105e9c:	2b00      	cmp	r3, #0
 8105e9e:	d10b      	bne.n	8105eb8 <xStreamBufferReceive+0x34>
	__asm volatile
 8105ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105ea4:	f383 8811 	msr	BASEPRI, r3
 8105ea8:	f3bf 8f6f 	isb	sy
 8105eac:	f3bf 8f4f 	dsb	sy
 8105eb0:	61fb      	str	r3, [r7, #28]
}
 8105eb2:	bf00      	nop
 8105eb4:	bf00      	nop
 8105eb6:	e7fd      	b.n	8105eb4 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 8105eb8:	6a3b      	ldr	r3, [r7, #32]
 8105eba:	2b00      	cmp	r3, #0
 8105ebc:	d10b      	bne.n	8105ed6 <xStreamBufferReceive+0x52>
	__asm volatile
 8105ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105ec2:	f383 8811 	msr	BASEPRI, r3
 8105ec6:	f3bf 8f6f 	isb	sy
 8105eca:	f3bf 8f4f 	dsb	sy
 8105ece:	61bb      	str	r3, [r7, #24]
}
 8105ed0:	bf00      	nop
 8105ed2:	bf00      	nop
 8105ed4:	e7fd      	b.n	8105ed2 <xStreamBufferReceive+0x4e>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8105ed6:	6a3b      	ldr	r3, [r7, #32]
 8105ed8:	7f1b      	ldrb	r3, [r3, #28]
 8105eda:	f003 0301 	and.w	r3, r3, #1
 8105ede:	2b00      	cmp	r3, #0
 8105ee0:	d002      	beq.n	8105ee8 <xStreamBufferReceive+0x64>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8105ee2:	2304      	movs	r3, #4
 8105ee4:	627b      	str	r3, [r7, #36]	@ 0x24
 8105ee6:	e001      	b.n	8105eec <xStreamBufferReceive+0x68>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8105ee8:	2300      	movs	r3, #0
 8105eea:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8105eec:	683b      	ldr	r3, [r7, #0]
 8105eee:	2b00      	cmp	r3, #0
 8105ef0:	d035      	beq.n	8105f5e <xStreamBufferReceive+0xda>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8105ef2:	f7ff f859 	bl	8104fa8 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8105ef6:	6a38      	ldr	r0, [r7, #32]
 8105ef8:	f000 f984 	bl	8106204 <prvBytesInBuffer>
 8105efc:	62b8      	str	r0, [r7, #40]	@ 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8105efe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8105f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105f02:	429a      	cmp	r2, r3
 8105f04:	d817      	bhi.n	8105f36 <xStreamBufferReceive+0xb2>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8105f06:	2000      	movs	r0, #0
 8105f08:	f001 fa0c 	bl	8107324 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8105f0c:	6a3b      	ldr	r3, [r7, #32]
 8105f0e:	691b      	ldr	r3, [r3, #16]
 8105f10:	2b00      	cmp	r3, #0
 8105f12:	d00b      	beq.n	8105f2c <xStreamBufferReceive+0xa8>
	__asm volatile
 8105f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105f18:	f383 8811 	msr	BASEPRI, r3
 8105f1c:	f3bf 8f6f 	isb	sy
 8105f20:	f3bf 8f4f 	dsb	sy
 8105f24:	617b      	str	r3, [r7, #20]
}
 8105f26:	bf00      	nop
 8105f28:	bf00      	nop
 8105f2a:	e7fd      	b.n	8105f28 <xStreamBufferReceive+0xa4>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8105f2c:	f001 f816 	bl	8106f5c <xTaskGetCurrentTaskHandle>
 8105f30:	4602      	mov	r2, r0
 8105f32:	6a3b      	ldr	r3, [r7, #32]
 8105f34:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8105f36:	f7ff f869 	bl	810500c <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8105f3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8105f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105f3e:	429a      	cmp	r2, r3
 8105f40:	d811      	bhi.n	8105f66 <xStreamBufferReceive+0xe2>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8105f42:	683b      	ldr	r3, [r7, #0]
 8105f44:	2200      	movs	r2, #0
 8105f46:	2100      	movs	r1, #0
 8105f48:	2000      	movs	r0, #0
 8105f4a:	f001 f8a5 	bl	8107098 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8105f4e:	6a3b      	ldr	r3, [r7, #32]
 8105f50:	2200      	movs	r2, #0
 8105f52:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8105f54:	6a38      	ldr	r0, [r7, #32]
 8105f56:	f000 f955 	bl	8106204 <prvBytesInBuffer>
 8105f5a:	62b8      	str	r0, [r7, #40]	@ 0x28
 8105f5c:	e003      	b.n	8105f66 <xStreamBufferReceive+0xe2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8105f5e:	6a38      	ldr	r0, [r7, #32]
 8105f60:	f000 f950 	bl	8106204 <prvBytesInBuffer>
 8105f64:	62b8      	str	r0, [r7, #40]	@ 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8105f66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8105f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105f6a:	429a      	cmp	r2, r3
 8105f6c:	d90e      	bls.n	8105f8c <xStreamBufferReceive+0x108>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8105f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105f70:	9300      	str	r3, [sp, #0]
 8105f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105f74:	687a      	ldr	r2, [r7, #4]
 8105f76:	68b9      	ldr	r1, [r7, #8]
 8105f78:	6a38      	ldr	r0, [r7, #32]
 8105f7a:	f000 f80c 	bl	8105f96 <prvReadMessageFromBuffer>
 8105f7e:	62f8      	str	r0, [r7, #44]	@ 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8105f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8105f82:	2b00      	cmp	r3, #0
 8105f84:	d002      	beq.n	8105f8c <xStreamBufferReceive+0x108>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8105f86:	6a38      	ldr	r0, [r7, #32]
 8105f88:	f7fa fa6c 	bl	8100464 <vGenerateRemoteInterrupt>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8105f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8105f8e:	4618      	mov	r0, r3
 8105f90:	3730      	adds	r7, #48	@ 0x30
 8105f92:	46bd      	mov	sp, r7
 8105f94:	bd80      	pop	{r7, pc}

08105f96 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8105f96:	b580      	push	{r7, lr}
 8105f98:	b088      	sub	sp, #32
 8105f9a:	af00      	add	r7, sp, #0
 8105f9c:	60f8      	str	r0, [r7, #12]
 8105f9e:	60b9      	str	r1, [r7, #8]
 8105fa0:	607a      	str	r2, [r7, #4]
 8105fa2:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8105fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105fa6:	2b00      	cmp	r3, #0
 8105fa8:	d019      	beq.n	8105fde <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8105faa:	68fb      	ldr	r3, [r7, #12]
 8105fac:	681b      	ldr	r3, [r3, #0]
 8105fae:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8105fb0:	f107 0110 	add.w	r1, r7, #16
 8105fb4:	683b      	ldr	r3, [r7, #0]
 8105fb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8105fb8:	68f8      	ldr	r0, [r7, #12]
 8105fba:	f000 f8a6 	bl	810610a <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8105fbe:	693b      	ldr	r3, [r7, #16]
 8105fc0:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8105fc2:	683a      	ldr	r2, [r7, #0]
 8105fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105fc6:	1ad3      	subs	r3, r2, r3
 8105fc8:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8105fca:	69fa      	ldr	r2, [r7, #28]
 8105fcc:	687b      	ldr	r3, [r7, #4]
 8105fce:	429a      	cmp	r2, r3
 8105fd0:	d907      	bls.n	8105fe2 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8105fd2:	68fb      	ldr	r3, [r7, #12]
 8105fd4:	69ba      	ldr	r2, [r7, #24]
 8105fd6:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8105fd8:	2300      	movs	r3, #0
 8105fda:	61fb      	str	r3, [r7, #28]
 8105fdc:	e001      	b.n	8105fe2 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8105fde:	687b      	ldr	r3, [r7, #4]
 8105fe0:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8105fe2:	683b      	ldr	r3, [r7, #0]
 8105fe4:	69fa      	ldr	r2, [r7, #28]
 8105fe6:	68b9      	ldr	r1, [r7, #8]
 8105fe8:	68f8      	ldr	r0, [r7, #12]
 8105fea:	f000 f88e 	bl	810610a <prvReadBytesFromBuffer>
 8105fee:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8105ff0:	697b      	ldr	r3, [r7, #20]
}
 8105ff2:	4618      	mov	r0, r3
 8105ff4:	3720      	adds	r7, #32
 8105ff6:	46bd      	mov	sp, r7
 8105ff8:	bd80      	pop	{r7, pc}

08105ffa <xStreamBufferSendCompletedFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
 8105ffa:	b580      	push	{r7, lr}
 8105ffc:	b08c      	sub	sp, #48	@ 0x30
 8105ffe:	af02      	add	r7, sp, #8
 8106000:	6078      	str	r0, [r7, #4]
 8106002:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8106004:	687b      	ldr	r3, [r7, #4]
 8106006:	623b      	str	r3, [r7, #32]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );
 8106008:	6a3b      	ldr	r3, [r7, #32]
 810600a:	2b00      	cmp	r3, #0
 810600c:	d10b      	bne.n	8106026 <xStreamBufferSendCompletedFromISR+0x2c>
	__asm volatile
 810600e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106012:	f383 8811 	msr	BASEPRI, r3
 8106016:	f3bf 8f6f 	isb	sy
 810601a:	f3bf 8f4f 	dsb	sy
 810601e:	61bb      	str	r3, [r7, #24]
}
 8106020:	bf00      	nop
 8106022:	bf00      	nop
 8106024:	e7fd      	b.n	8106022 <xStreamBufferSendCompletedFromISR+0x28>
	__asm volatile
 8106026:	f3ef 8211 	mrs	r2, BASEPRI
 810602a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810602e:	f383 8811 	msr	BASEPRI, r3
 8106032:	f3bf 8f6f 	isb	sy
 8106036:	f3bf 8f4f 	dsb	sy
 810603a:	617a      	str	r2, [r7, #20]
 810603c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 810603e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 8106040:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
 8106042:	6a3b      	ldr	r3, [r7, #32]
 8106044:	691b      	ldr	r3, [r3, #16]
 8106046:	2b00      	cmp	r3, #0
 8106048:	d00e      	beq.n	8106068 <xStreamBufferSendCompletedFromISR+0x6e>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
 810604a:	6a3b      	ldr	r3, [r7, #32]
 810604c:	6918      	ldr	r0, [r3, #16]
 810604e:	683b      	ldr	r3, [r7, #0]
 8106050:	9300      	str	r3, [sp, #0]
 8106052:	2300      	movs	r3, #0
 8106054:	2200      	movs	r2, #0
 8106056:	2100      	movs	r1, #0
 8106058:	f001 f87e 	bl	8107158 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
 810605c:	6a3b      	ldr	r3, [r7, #32]
 810605e:	2200      	movs	r2, #0
 8106060:	611a      	str	r2, [r3, #16]
			xReturn = pdTRUE;
 8106062:	2301      	movs	r3, #1
 8106064:	627b      	str	r3, [r7, #36]	@ 0x24
 8106066:	e001      	b.n	810606c <xStreamBufferSendCompletedFromISR+0x72>
		}
		else
		{
			xReturn = pdFALSE;
 8106068:	2300      	movs	r3, #0
 810606a:	627b      	str	r3, [r7, #36]	@ 0x24
 810606c:	69fb      	ldr	r3, [r7, #28]
 810606e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8106070:	68fb      	ldr	r3, [r7, #12]
 8106072:	f383 8811 	msr	BASEPRI, r3
}
 8106076:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8106078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 810607a:	4618      	mov	r0, r3
 810607c:	3728      	adds	r7, #40	@ 0x28
 810607e:	46bd      	mov	sp, r7
 8106080:	bd80      	pop	{r7, pc}

08106082 <xStreamBufferReceiveCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
 8106082:	b580      	push	{r7, lr}
 8106084:	b08c      	sub	sp, #48	@ 0x30
 8106086:	af02      	add	r7, sp, #8
 8106088:	6078      	str	r0, [r7, #4]
 810608a:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 810608c:	687b      	ldr	r3, [r7, #4]
 810608e:	623b      	str	r3, [r7, #32]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );
 8106090:	6a3b      	ldr	r3, [r7, #32]
 8106092:	2b00      	cmp	r3, #0
 8106094:	d10b      	bne.n	81060ae <xStreamBufferReceiveCompletedFromISR+0x2c>
	__asm volatile
 8106096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810609a:	f383 8811 	msr	BASEPRI, r3
 810609e:	f3bf 8f6f 	isb	sy
 81060a2:	f3bf 8f4f 	dsb	sy
 81060a6:	61bb      	str	r3, [r7, #24]
}
 81060a8:	bf00      	nop
 81060aa:	bf00      	nop
 81060ac:	e7fd      	b.n	81060aa <xStreamBufferReceiveCompletedFromISR+0x28>
	__asm volatile
 81060ae:	f3ef 8211 	mrs	r2, BASEPRI
 81060b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81060b6:	f383 8811 	msr	BASEPRI, r3
 81060ba:	f3bf 8f6f 	isb	sy
 81060be:	f3bf 8f4f 	dsb	sy
 81060c2:	617a      	str	r2, [r7, #20]
 81060c4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 81060c6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 81060c8:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
 81060ca:	6a3b      	ldr	r3, [r7, #32]
 81060cc:	695b      	ldr	r3, [r3, #20]
 81060ce:	2b00      	cmp	r3, #0
 81060d0:	d00e      	beq.n	81060f0 <xStreamBufferReceiveCompletedFromISR+0x6e>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
 81060d2:	6a3b      	ldr	r3, [r7, #32]
 81060d4:	6958      	ldr	r0, [r3, #20]
 81060d6:	683b      	ldr	r3, [r7, #0]
 81060d8:	9300      	str	r3, [sp, #0]
 81060da:	2300      	movs	r3, #0
 81060dc:	2200      	movs	r2, #0
 81060de:	2100      	movs	r1, #0
 81060e0:	f001 f83a 	bl	8107158 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToSend = NULL;
 81060e4:	6a3b      	ldr	r3, [r7, #32]
 81060e6:	2200      	movs	r2, #0
 81060e8:	615a      	str	r2, [r3, #20]
			xReturn = pdTRUE;
 81060ea:	2301      	movs	r3, #1
 81060ec:	627b      	str	r3, [r7, #36]	@ 0x24
 81060ee:	e001      	b.n	81060f4 <xStreamBufferReceiveCompletedFromISR+0x72>
		}
		else
		{
			xReturn = pdFALSE;
 81060f0:	2300      	movs	r3, #0
 81060f2:	627b      	str	r3, [r7, #36]	@ 0x24
 81060f4:	69fb      	ldr	r3, [r7, #28]
 81060f6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 81060f8:	68fb      	ldr	r3, [r7, #12]
 81060fa:	f383 8811 	msr	BASEPRI, r3
}
 81060fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8106100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8106102:	4618      	mov	r0, r3
 8106104:	3728      	adds	r7, #40	@ 0x28
 8106106:	46bd      	mov	sp, r7
 8106108:	bd80      	pop	{r7, pc}

0810610a <prvReadBytesFromBuffer>:
	return xCount;
}
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 810610a:	b580      	push	{r7, lr}
 810610c:	b08a      	sub	sp, #40	@ 0x28
 810610e:	af00      	add	r7, sp, #0
 8106110:	60f8      	str	r0, [r7, #12]
 8106112:	60b9      	str	r1, [r7, #8]
 8106114:	607a      	str	r2, [r7, #4]
 8106116:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8106118:	687a      	ldr	r2, [r7, #4]
 810611a:	683b      	ldr	r3, [r7, #0]
 810611c:	4293      	cmp	r3, r2
 810611e:	bf28      	it	cs
 8106120:	4613      	movcs	r3, r2
 8106122:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8106124:	6a3b      	ldr	r3, [r7, #32]
 8106126:	2b00      	cmp	r3, #0
 8106128:	d067      	beq.n	81061fa <prvReadBytesFromBuffer+0xf0>
	{
		xNextTail = pxStreamBuffer->xTail;
 810612a:	68fb      	ldr	r3, [r7, #12]
 810612c:	681b      	ldr	r3, [r3, #0]
 810612e:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8106130:	68fb      	ldr	r3, [r7, #12]
 8106132:	689a      	ldr	r2, [r3, #8]
 8106134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106136:	1ad3      	subs	r3, r2, r3
 8106138:	6a3a      	ldr	r2, [r7, #32]
 810613a:	4293      	cmp	r3, r2
 810613c:	bf28      	it	cs
 810613e:	4613      	movcs	r3, r2
 8106140:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8106142:	69fa      	ldr	r2, [r7, #28]
 8106144:	687b      	ldr	r3, [r7, #4]
 8106146:	429a      	cmp	r2, r3
 8106148:	d90b      	bls.n	8106162 <prvReadBytesFromBuffer+0x58>
	__asm volatile
 810614a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810614e:	f383 8811 	msr	BASEPRI, r3
 8106152:	f3bf 8f6f 	isb	sy
 8106156:	f3bf 8f4f 	dsb	sy
 810615a:	61bb      	str	r3, [r7, #24]
}
 810615c:	bf00      	nop
 810615e:	bf00      	nop
 8106160:	e7fd      	b.n	810615e <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8106162:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8106164:	69fb      	ldr	r3, [r7, #28]
 8106166:	441a      	add	r2, r3
 8106168:	68fb      	ldr	r3, [r7, #12]
 810616a:	689b      	ldr	r3, [r3, #8]
 810616c:	429a      	cmp	r2, r3
 810616e:	d90b      	bls.n	8106188 <prvReadBytesFromBuffer+0x7e>
	__asm volatile
 8106170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106174:	f383 8811 	msr	BASEPRI, r3
 8106178:	f3bf 8f6f 	isb	sy
 810617c:	f3bf 8f4f 	dsb	sy
 8106180:	617b      	str	r3, [r7, #20]
}
 8106182:	bf00      	nop
 8106184:	bf00      	nop
 8106186:	e7fd      	b.n	8106184 <prvReadBytesFromBuffer+0x7a>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8106188:	68fb      	ldr	r3, [r7, #12]
 810618a:	699a      	ldr	r2, [r3, #24]
 810618c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810618e:	4413      	add	r3, r2
 8106190:	69fa      	ldr	r2, [r7, #28]
 8106192:	4619      	mov	r1, r3
 8106194:	68b8      	ldr	r0, [r7, #8]
 8106196:	f001 ff37 	bl	8108008 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 810619a:	6a3a      	ldr	r2, [r7, #32]
 810619c:	69fb      	ldr	r3, [r7, #28]
 810619e:	429a      	cmp	r2, r3
 81061a0:	d91a      	bls.n	81061d8 <prvReadBytesFromBuffer+0xce>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 81061a2:	6a3a      	ldr	r2, [r7, #32]
 81061a4:	687b      	ldr	r3, [r7, #4]
 81061a6:	429a      	cmp	r2, r3
 81061a8:	d90b      	bls.n	81061c2 <prvReadBytesFromBuffer+0xb8>
	__asm volatile
 81061aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81061ae:	f383 8811 	msr	BASEPRI, r3
 81061b2:	f3bf 8f6f 	isb	sy
 81061b6:	f3bf 8f4f 	dsb	sy
 81061ba:	613b      	str	r3, [r7, #16]
}
 81061bc:	bf00      	nop
 81061be:	bf00      	nop
 81061c0:	e7fd      	b.n	81061be <prvReadBytesFromBuffer+0xb4>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 81061c2:	68ba      	ldr	r2, [r7, #8]
 81061c4:	69fb      	ldr	r3, [r7, #28]
 81061c6:	18d0      	adds	r0, r2, r3
 81061c8:	68fb      	ldr	r3, [r7, #12]
 81061ca:	6999      	ldr	r1, [r3, #24]
 81061cc:	6a3a      	ldr	r2, [r7, #32]
 81061ce:	69fb      	ldr	r3, [r7, #28]
 81061d0:	1ad3      	subs	r3, r2, r3
 81061d2:	461a      	mov	r2, r3
 81061d4:	f001 ff18 	bl	8108008 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 81061d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81061da:	6a3b      	ldr	r3, [r7, #32]
 81061dc:	4413      	add	r3, r2
 81061de:	627b      	str	r3, [r7, #36]	@ 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 81061e0:	68fb      	ldr	r3, [r7, #12]
 81061e2:	689b      	ldr	r3, [r3, #8]
 81061e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81061e6:	429a      	cmp	r2, r3
 81061e8:	d304      	bcc.n	81061f4 <prvReadBytesFromBuffer+0xea>
		{
			xNextTail -= pxStreamBuffer->xLength;
 81061ea:	68fb      	ldr	r3, [r7, #12]
 81061ec:	689b      	ldr	r3, [r3, #8]
 81061ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81061f0:	1ad3      	subs	r3, r2, r3
 81061f2:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 81061f4:	68fb      	ldr	r3, [r7, #12]
 81061f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81061f8:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 81061fa:	6a3b      	ldr	r3, [r7, #32]
}
 81061fc:	4618      	mov	r0, r3
 81061fe:	3728      	adds	r7, #40	@ 0x28
 8106200:	46bd      	mov	sp, r7
 8106202:	bd80      	pop	{r7, pc}

08106204 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8106204:	b480      	push	{r7}
 8106206:	b085      	sub	sp, #20
 8106208:	af00      	add	r7, sp, #0
 810620a:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 810620c:	687b      	ldr	r3, [r7, #4]
 810620e:	689a      	ldr	r2, [r3, #8]
 8106210:	687b      	ldr	r3, [r7, #4]
 8106212:	685b      	ldr	r3, [r3, #4]
 8106214:	4413      	add	r3, r2
 8106216:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8106218:	687b      	ldr	r3, [r7, #4]
 810621a:	681b      	ldr	r3, [r3, #0]
 810621c:	68fa      	ldr	r2, [r7, #12]
 810621e:	1ad3      	subs	r3, r2, r3
 8106220:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8106222:	687b      	ldr	r3, [r7, #4]
 8106224:	689b      	ldr	r3, [r3, #8]
 8106226:	68fa      	ldr	r2, [r7, #12]
 8106228:	429a      	cmp	r2, r3
 810622a:	d304      	bcc.n	8106236 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 810622c:	687b      	ldr	r3, [r7, #4]
 810622e:	689b      	ldr	r3, [r3, #8]
 8106230:	68fa      	ldr	r2, [r7, #12]
 8106232:	1ad3      	subs	r3, r2, r3
 8106234:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8106236:	68fb      	ldr	r3, [r7, #12]
}
 8106238:	4618      	mov	r0, r3
 810623a:	3714      	adds	r7, #20
 810623c:	46bd      	mov	sp, r7
 810623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106242:	4770      	bx	lr

08106244 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8106244:	b580      	push	{r7, lr}
 8106246:	b086      	sub	sp, #24
 8106248:	af00      	add	r7, sp, #0
 810624a:	60f8      	str	r0, [r7, #12]
 810624c:	60b9      	str	r1, [r7, #8]
 810624e:	607a      	str	r2, [r7, #4]
 8106250:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8106252:	2355      	movs	r3, #85	@ 0x55
 8106254:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8106256:	687a      	ldr	r2, [r7, #4]
 8106258:	6979      	ldr	r1, [r7, #20]
 810625a:	68b8      	ldr	r0, [r7, #8]
 810625c:	f001 fdfc 	bl	8107e58 <memset>
 8106260:	4602      	mov	r2, r0
 8106262:	68bb      	ldr	r3, [r7, #8]
 8106264:	4293      	cmp	r3, r2
 8106266:	d00b      	beq.n	8106280 <prvInitialiseNewStreamBuffer+0x3c>
	__asm volatile
 8106268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810626c:	f383 8811 	msr	BASEPRI, r3
 8106270:	f3bf 8f6f 	isb	sy
 8106274:	f3bf 8f4f 	dsb	sy
 8106278:	613b      	str	r3, [r7, #16]
}
 810627a:	bf00      	nop
 810627c:	bf00      	nop
 810627e:	e7fd      	b.n	810627c <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8106280:	2224      	movs	r2, #36	@ 0x24
 8106282:	2100      	movs	r1, #0
 8106284:	68f8      	ldr	r0, [r7, #12]
 8106286:	f001 fde7 	bl	8107e58 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 810628a:	68fb      	ldr	r3, [r7, #12]
 810628c:	68ba      	ldr	r2, [r7, #8]
 810628e:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 8106290:	68fb      	ldr	r3, [r7, #12]
 8106292:	687a      	ldr	r2, [r7, #4]
 8106294:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8106296:	68fb      	ldr	r3, [r7, #12]
 8106298:	683a      	ldr	r2, [r7, #0]
 810629a:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 810629c:	68fb      	ldr	r3, [r7, #12]
 810629e:	f897 2020 	ldrb.w	r2, [r7, #32]
 81062a2:	771a      	strb	r2, [r3, #28]
}
 81062a4:	bf00      	nop
 81062a6:	3718      	adds	r7, #24
 81062a8:	46bd      	mov	sp, r7
 81062aa:	bd80      	pop	{r7, pc}

081062ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 81062ac:	b580      	push	{r7, lr}
 81062ae:	b08e      	sub	sp, #56	@ 0x38
 81062b0:	af04      	add	r7, sp, #16
 81062b2:	60f8      	str	r0, [r7, #12]
 81062b4:	60b9      	str	r1, [r7, #8]
 81062b6:	607a      	str	r2, [r7, #4]
 81062b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 81062ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81062bc:	2b00      	cmp	r3, #0
 81062be:	d10b      	bne.n	81062d8 <xTaskCreateStatic+0x2c>
	__asm volatile
 81062c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81062c4:	f383 8811 	msr	BASEPRI, r3
 81062c8:	f3bf 8f6f 	isb	sy
 81062cc:	f3bf 8f4f 	dsb	sy
 81062d0:	623b      	str	r3, [r7, #32]
}
 81062d2:	bf00      	nop
 81062d4:	bf00      	nop
 81062d6:	e7fd      	b.n	81062d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 81062d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81062da:	2b00      	cmp	r3, #0
 81062dc:	d10b      	bne.n	81062f6 <xTaskCreateStatic+0x4a>
	__asm volatile
 81062de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81062e2:	f383 8811 	msr	BASEPRI, r3
 81062e6:	f3bf 8f6f 	isb	sy
 81062ea:	f3bf 8f4f 	dsb	sy
 81062ee:	61fb      	str	r3, [r7, #28]
}
 81062f0:	bf00      	nop
 81062f2:	bf00      	nop
 81062f4:	e7fd      	b.n	81062f2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 81062f6:	23a8      	movs	r3, #168	@ 0xa8
 81062f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 81062fa:	693b      	ldr	r3, [r7, #16]
 81062fc:	2ba8      	cmp	r3, #168	@ 0xa8
 81062fe:	d00b      	beq.n	8106318 <xTaskCreateStatic+0x6c>
	__asm volatile
 8106300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106304:	f383 8811 	msr	BASEPRI, r3
 8106308:	f3bf 8f6f 	isb	sy
 810630c:	f3bf 8f4f 	dsb	sy
 8106310:	61bb      	str	r3, [r7, #24]
}
 8106312:	bf00      	nop
 8106314:	bf00      	nop
 8106316:	e7fd      	b.n	8106314 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8106318:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 810631a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810631c:	2b00      	cmp	r3, #0
 810631e:	d01e      	beq.n	810635e <xTaskCreateStatic+0xb2>
 8106320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106322:	2b00      	cmp	r3, #0
 8106324:	d01b      	beq.n	810635e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8106326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106328:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 810632a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810632c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810632e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8106330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106332:	2202      	movs	r2, #2
 8106334:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8106338:	2300      	movs	r3, #0
 810633a:	9303      	str	r3, [sp, #12]
 810633c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810633e:	9302      	str	r3, [sp, #8]
 8106340:	f107 0314 	add.w	r3, r7, #20
 8106344:	9301      	str	r3, [sp, #4]
 8106346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106348:	9300      	str	r3, [sp, #0]
 810634a:	683b      	ldr	r3, [r7, #0]
 810634c:	687a      	ldr	r2, [r7, #4]
 810634e:	68b9      	ldr	r1, [r7, #8]
 8106350:	68f8      	ldr	r0, [r7, #12]
 8106352:	f000 f851 	bl	81063f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8106356:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8106358:	f000 f8f6 	bl	8106548 <prvAddNewTaskToReadyList>
 810635c:	e001      	b.n	8106362 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 810635e:	2300      	movs	r3, #0
 8106360:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8106362:	697b      	ldr	r3, [r7, #20]
	}
 8106364:	4618      	mov	r0, r3
 8106366:	3728      	adds	r7, #40	@ 0x28
 8106368:	46bd      	mov	sp, r7
 810636a:	bd80      	pop	{r7, pc}

0810636c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 810636c:	b580      	push	{r7, lr}
 810636e:	b08c      	sub	sp, #48	@ 0x30
 8106370:	af04      	add	r7, sp, #16
 8106372:	60f8      	str	r0, [r7, #12]
 8106374:	60b9      	str	r1, [r7, #8]
 8106376:	603b      	str	r3, [r7, #0]
 8106378:	4613      	mov	r3, r2
 810637a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 810637c:	88fb      	ldrh	r3, [r7, #6]
 810637e:	009b      	lsls	r3, r3, #2
 8106380:	4618      	mov	r0, r3
 8106382:	f7fe fa3b 	bl	81047fc <pvPortMalloc>
 8106386:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8106388:	697b      	ldr	r3, [r7, #20]
 810638a:	2b00      	cmp	r3, #0
 810638c:	d00e      	beq.n	81063ac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 810638e:	20a8      	movs	r0, #168	@ 0xa8
 8106390:	f7fe fa34 	bl	81047fc <pvPortMalloc>
 8106394:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8106396:	69fb      	ldr	r3, [r7, #28]
 8106398:	2b00      	cmp	r3, #0
 810639a:	d003      	beq.n	81063a4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 810639c:	69fb      	ldr	r3, [r7, #28]
 810639e:	697a      	ldr	r2, [r7, #20]
 81063a0:	631a      	str	r2, [r3, #48]	@ 0x30
 81063a2:	e005      	b.n	81063b0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 81063a4:	6978      	ldr	r0, [r7, #20]
 81063a6:	f7fe faf7 	bl	8104998 <vPortFree>
 81063aa:	e001      	b.n	81063b0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 81063ac:	2300      	movs	r3, #0
 81063ae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 81063b0:	69fb      	ldr	r3, [r7, #28]
 81063b2:	2b00      	cmp	r3, #0
 81063b4:	d017      	beq.n	81063e6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 81063b6:	69fb      	ldr	r3, [r7, #28]
 81063b8:	2200      	movs	r2, #0
 81063ba:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 81063be:	88fa      	ldrh	r2, [r7, #6]
 81063c0:	2300      	movs	r3, #0
 81063c2:	9303      	str	r3, [sp, #12]
 81063c4:	69fb      	ldr	r3, [r7, #28]
 81063c6:	9302      	str	r3, [sp, #8]
 81063c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81063ca:	9301      	str	r3, [sp, #4]
 81063cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81063ce:	9300      	str	r3, [sp, #0]
 81063d0:	683b      	ldr	r3, [r7, #0]
 81063d2:	68b9      	ldr	r1, [r7, #8]
 81063d4:	68f8      	ldr	r0, [r7, #12]
 81063d6:	f000 f80f 	bl	81063f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 81063da:	69f8      	ldr	r0, [r7, #28]
 81063dc:	f000 f8b4 	bl	8106548 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 81063e0:	2301      	movs	r3, #1
 81063e2:	61bb      	str	r3, [r7, #24]
 81063e4:	e002      	b.n	81063ec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 81063e6:	f04f 33ff 	mov.w	r3, #4294967295
 81063ea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 81063ec:	69bb      	ldr	r3, [r7, #24]
	}
 81063ee:	4618      	mov	r0, r3
 81063f0:	3720      	adds	r7, #32
 81063f2:	46bd      	mov	sp, r7
 81063f4:	bd80      	pop	{r7, pc}
	...

081063f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 81063f8:	b580      	push	{r7, lr}
 81063fa:	b088      	sub	sp, #32
 81063fc:	af00      	add	r7, sp, #0
 81063fe:	60f8      	str	r0, [r7, #12]
 8106400:	60b9      	str	r1, [r7, #8]
 8106402:	607a      	str	r2, [r7, #4]
 8106404:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8106406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106408:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 810640a:	687b      	ldr	r3, [r7, #4]
 810640c:	009b      	lsls	r3, r3, #2
 810640e:	461a      	mov	r2, r3
 8106410:	21a5      	movs	r1, #165	@ 0xa5
 8106412:	f001 fd21 	bl	8107e58 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8106416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106418:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810641a:	687b      	ldr	r3, [r7, #4]
 810641c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8106420:	3b01      	subs	r3, #1
 8106422:	009b      	lsls	r3, r3, #2
 8106424:	4413      	add	r3, r2
 8106426:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8106428:	69bb      	ldr	r3, [r7, #24]
 810642a:	f023 0307 	bic.w	r3, r3, #7
 810642e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8106430:	69bb      	ldr	r3, [r7, #24]
 8106432:	f003 0307 	and.w	r3, r3, #7
 8106436:	2b00      	cmp	r3, #0
 8106438:	d00b      	beq.n	8106452 <prvInitialiseNewTask+0x5a>
	__asm volatile
 810643a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810643e:	f383 8811 	msr	BASEPRI, r3
 8106442:	f3bf 8f6f 	isb	sy
 8106446:	f3bf 8f4f 	dsb	sy
 810644a:	617b      	str	r3, [r7, #20]
}
 810644c:	bf00      	nop
 810644e:	bf00      	nop
 8106450:	e7fd      	b.n	810644e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8106452:	68bb      	ldr	r3, [r7, #8]
 8106454:	2b00      	cmp	r3, #0
 8106456:	d01f      	beq.n	8106498 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8106458:	2300      	movs	r3, #0
 810645a:	61fb      	str	r3, [r7, #28]
 810645c:	e012      	b.n	8106484 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 810645e:	68ba      	ldr	r2, [r7, #8]
 8106460:	69fb      	ldr	r3, [r7, #28]
 8106462:	4413      	add	r3, r2
 8106464:	7819      	ldrb	r1, [r3, #0]
 8106466:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8106468:	69fb      	ldr	r3, [r7, #28]
 810646a:	4413      	add	r3, r2
 810646c:	3334      	adds	r3, #52	@ 0x34
 810646e:	460a      	mov	r2, r1
 8106470:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8106472:	68ba      	ldr	r2, [r7, #8]
 8106474:	69fb      	ldr	r3, [r7, #28]
 8106476:	4413      	add	r3, r2
 8106478:	781b      	ldrb	r3, [r3, #0]
 810647a:	2b00      	cmp	r3, #0
 810647c:	d006      	beq.n	810648c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810647e:	69fb      	ldr	r3, [r7, #28]
 8106480:	3301      	adds	r3, #1
 8106482:	61fb      	str	r3, [r7, #28]
 8106484:	69fb      	ldr	r3, [r7, #28]
 8106486:	2b0f      	cmp	r3, #15
 8106488:	d9e9      	bls.n	810645e <prvInitialiseNewTask+0x66>
 810648a:	e000      	b.n	810648e <prvInitialiseNewTask+0x96>
			{
				break;
 810648c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 810648e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106490:	2200      	movs	r2, #0
 8106492:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8106496:	e003      	b.n	81064a0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8106498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810649a:	2200      	movs	r2, #0
 810649c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 81064a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81064a2:	2b37      	cmp	r3, #55	@ 0x37
 81064a4:	d901      	bls.n	81064aa <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 81064a6:	2337      	movs	r3, #55	@ 0x37
 81064a8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 81064aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81064ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 81064ae:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 81064b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81064b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 81064b4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 81064b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81064b8:	2200      	movs	r2, #0
 81064ba:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 81064bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81064be:	3304      	adds	r3, #4
 81064c0:	4618      	mov	r0, r3
 81064c2:	f7fe fba9 	bl	8104c18 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 81064c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81064c8:	3318      	adds	r3, #24
 81064ca:	4618      	mov	r0, r3
 81064cc:	f7fe fba4 	bl	8104c18 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 81064d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81064d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81064d4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81064d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81064d8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 81064dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81064de:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 81064e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81064e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81064e4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 81064e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81064e8:	2200      	movs	r2, #0
 81064ea:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 81064ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81064f0:	2200      	movs	r2, #0
 81064f2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 81064f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81064f8:	3354      	adds	r3, #84	@ 0x54
 81064fa:	224c      	movs	r2, #76	@ 0x4c
 81064fc:	2100      	movs	r1, #0
 81064fe:	4618      	mov	r0, r3
 8106500:	f001 fcaa 	bl	8107e58 <memset>
 8106504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106506:	4a0d      	ldr	r2, [pc, #52]	@ (810653c <prvInitialiseNewTask+0x144>)
 8106508:	659a      	str	r2, [r3, #88]	@ 0x58
 810650a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810650c:	4a0c      	ldr	r2, [pc, #48]	@ (8106540 <prvInitialiseNewTask+0x148>)
 810650e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8106510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106512:	4a0c      	ldr	r2, [pc, #48]	@ (8106544 <prvInitialiseNewTask+0x14c>)
 8106514:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8106516:	683a      	ldr	r2, [r7, #0]
 8106518:	68f9      	ldr	r1, [r7, #12]
 810651a:	69b8      	ldr	r0, [r7, #24]
 810651c:	f7fe fc10 	bl	8104d40 <pxPortInitialiseStack>
 8106520:	4602      	mov	r2, r0
 8106522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106524:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8106526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106528:	2b00      	cmp	r3, #0
 810652a:	d002      	beq.n	8106532 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 810652c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810652e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8106530:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8106532:	bf00      	nop
 8106534:	3720      	adds	r7, #32
 8106536:	46bd      	mov	sp, r7
 8106538:	bd80      	pop	{r7, pc}
 810653a:	bf00      	nop
 810653c:	10004b98 	.word	0x10004b98
 8106540:	10004c00 	.word	0x10004c00
 8106544:	10004c68 	.word	0x10004c68

08106548 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8106548:	b580      	push	{r7, lr}
 810654a:	b082      	sub	sp, #8
 810654c:	af00      	add	r7, sp, #0
 810654e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8106550:	f7fe fd2a 	bl	8104fa8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8106554:	4b2d      	ldr	r3, [pc, #180]	@ (810660c <prvAddNewTaskToReadyList+0xc4>)
 8106556:	681b      	ldr	r3, [r3, #0]
 8106558:	3301      	adds	r3, #1
 810655a:	4a2c      	ldr	r2, [pc, #176]	@ (810660c <prvAddNewTaskToReadyList+0xc4>)
 810655c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 810655e:	4b2c      	ldr	r3, [pc, #176]	@ (8106610 <prvAddNewTaskToReadyList+0xc8>)
 8106560:	681b      	ldr	r3, [r3, #0]
 8106562:	2b00      	cmp	r3, #0
 8106564:	d109      	bne.n	810657a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8106566:	4a2a      	ldr	r2, [pc, #168]	@ (8106610 <prvAddNewTaskToReadyList+0xc8>)
 8106568:	687b      	ldr	r3, [r7, #4]
 810656a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 810656c:	4b27      	ldr	r3, [pc, #156]	@ (810660c <prvAddNewTaskToReadyList+0xc4>)
 810656e:	681b      	ldr	r3, [r3, #0]
 8106570:	2b01      	cmp	r3, #1
 8106572:	d110      	bne.n	8106596 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8106574:	f000 fc2e 	bl	8106dd4 <prvInitialiseTaskLists>
 8106578:	e00d      	b.n	8106596 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 810657a:	4b26      	ldr	r3, [pc, #152]	@ (8106614 <prvAddNewTaskToReadyList+0xcc>)
 810657c:	681b      	ldr	r3, [r3, #0]
 810657e:	2b00      	cmp	r3, #0
 8106580:	d109      	bne.n	8106596 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8106582:	4b23      	ldr	r3, [pc, #140]	@ (8106610 <prvAddNewTaskToReadyList+0xc8>)
 8106584:	681b      	ldr	r3, [r3, #0]
 8106586:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8106588:	687b      	ldr	r3, [r7, #4]
 810658a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810658c:	429a      	cmp	r2, r3
 810658e:	d802      	bhi.n	8106596 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8106590:	4a1f      	ldr	r2, [pc, #124]	@ (8106610 <prvAddNewTaskToReadyList+0xc8>)
 8106592:	687b      	ldr	r3, [r7, #4]
 8106594:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8106596:	4b20      	ldr	r3, [pc, #128]	@ (8106618 <prvAddNewTaskToReadyList+0xd0>)
 8106598:	681b      	ldr	r3, [r3, #0]
 810659a:	3301      	adds	r3, #1
 810659c:	4a1e      	ldr	r2, [pc, #120]	@ (8106618 <prvAddNewTaskToReadyList+0xd0>)
 810659e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 81065a0:	4b1d      	ldr	r3, [pc, #116]	@ (8106618 <prvAddNewTaskToReadyList+0xd0>)
 81065a2:	681a      	ldr	r2, [r3, #0]
 81065a4:	687b      	ldr	r3, [r7, #4]
 81065a6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 81065a8:	687b      	ldr	r3, [r7, #4]
 81065aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81065ac:	4b1b      	ldr	r3, [pc, #108]	@ (810661c <prvAddNewTaskToReadyList+0xd4>)
 81065ae:	681b      	ldr	r3, [r3, #0]
 81065b0:	429a      	cmp	r2, r3
 81065b2:	d903      	bls.n	81065bc <prvAddNewTaskToReadyList+0x74>
 81065b4:	687b      	ldr	r3, [r7, #4]
 81065b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81065b8:	4a18      	ldr	r2, [pc, #96]	@ (810661c <prvAddNewTaskToReadyList+0xd4>)
 81065ba:	6013      	str	r3, [r2, #0]
 81065bc:	687b      	ldr	r3, [r7, #4]
 81065be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81065c0:	4613      	mov	r3, r2
 81065c2:	009b      	lsls	r3, r3, #2
 81065c4:	4413      	add	r3, r2
 81065c6:	009b      	lsls	r3, r3, #2
 81065c8:	4a15      	ldr	r2, [pc, #84]	@ (8106620 <prvAddNewTaskToReadyList+0xd8>)
 81065ca:	441a      	add	r2, r3
 81065cc:	687b      	ldr	r3, [r7, #4]
 81065ce:	3304      	adds	r3, #4
 81065d0:	4619      	mov	r1, r3
 81065d2:	4610      	mov	r0, r2
 81065d4:	f7fe fb2d 	bl	8104c32 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 81065d8:	f7fe fd18 	bl	810500c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 81065dc:	4b0d      	ldr	r3, [pc, #52]	@ (8106614 <prvAddNewTaskToReadyList+0xcc>)
 81065de:	681b      	ldr	r3, [r3, #0]
 81065e0:	2b00      	cmp	r3, #0
 81065e2:	d00e      	beq.n	8106602 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 81065e4:	4b0a      	ldr	r3, [pc, #40]	@ (8106610 <prvAddNewTaskToReadyList+0xc8>)
 81065e6:	681b      	ldr	r3, [r3, #0]
 81065e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81065ea:	687b      	ldr	r3, [r7, #4]
 81065ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81065ee:	429a      	cmp	r2, r3
 81065f0:	d207      	bcs.n	8106602 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 81065f2:	4b0c      	ldr	r3, [pc, #48]	@ (8106624 <prvAddNewTaskToReadyList+0xdc>)
 81065f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81065f8:	601a      	str	r2, [r3, #0]
 81065fa:	f3bf 8f4f 	dsb	sy
 81065fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8106602:	bf00      	nop
 8106604:	3708      	adds	r7, #8
 8106606:	46bd      	mov	sp, r7
 8106608:	bd80      	pop	{r7, pc}
 810660a:	bf00      	nop
 810660c:	10004a34 	.word	0x10004a34
 8106610:	10004560 	.word	0x10004560
 8106614:	10004a40 	.word	0x10004a40
 8106618:	10004a50 	.word	0x10004a50
 810661c:	10004a3c 	.word	0x10004a3c
 8106620:	10004564 	.word	0x10004564
 8106624:	e000ed04 	.word	0xe000ed04

08106628 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8106628:	b580      	push	{r7, lr}
 810662a:	b084      	sub	sp, #16
 810662c:	af00      	add	r7, sp, #0
 810662e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8106630:	2300      	movs	r3, #0
 8106632:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8106634:	687b      	ldr	r3, [r7, #4]
 8106636:	2b00      	cmp	r3, #0
 8106638:	d018      	beq.n	810666c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 810663a:	4b14      	ldr	r3, [pc, #80]	@ (810668c <vTaskDelay+0x64>)
 810663c:	681b      	ldr	r3, [r3, #0]
 810663e:	2b00      	cmp	r3, #0
 8106640:	d00b      	beq.n	810665a <vTaskDelay+0x32>
	__asm volatile
 8106642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106646:	f383 8811 	msr	BASEPRI, r3
 810664a:	f3bf 8f6f 	isb	sy
 810664e:	f3bf 8f4f 	dsb	sy
 8106652:	60bb      	str	r3, [r7, #8]
}
 8106654:	bf00      	nop
 8106656:	bf00      	nop
 8106658:	e7fd      	b.n	8106656 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 810665a:	f000 f88b 	bl	8106774 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 810665e:	2100      	movs	r1, #0
 8106660:	6878      	ldr	r0, [r7, #4]
 8106662:	f000 fe85 	bl	8107370 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8106666:	f000 f893 	bl	8106790 <xTaskResumeAll>
 810666a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 810666c:	68fb      	ldr	r3, [r7, #12]
 810666e:	2b00      	cmp	r3, #0
 8106670:	d107      	bne.n	8106682 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8106672:	4b07      	ldr	r3, [pc, #28]	@ (8106690 <vTaskDelay+0x68>)
 8106674:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8106678:	601a      	str	r2, [r3, #0]
 810667a:	f3bf 8f4f 	dsb	sy
 810667e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8106682:	bf00      	nop
 8106684:	3710      	adds	r7, #16
 8106686:	46bd      	mov	sp, r7
 8106688:	bd80      	pop	{r7, pc}
 810668a:	bf00      	nop
 810668c:	10004a5c 	.word	0x10004a5c
 8106690:	e000ed04 	.word	0xe000ed04

08106694 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8106694:	b580      	push	{r7, lr}
 8106696:	b08a      	sub	sp, #40	@ 0x28
 8106698:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 810669a:	2300      	movs	r3, #0
 810669c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 810669e:	2300      	movs	r3, #0
 81066a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 81066a2:	463a      	mov	r2, r7
 81066a4:	1d39      	adds	r1, r7, #4
 81066a6:	f107 0308 	add.w	r3, r7, #8
 81066aa:	4618      	mov	r0, r3
 81066ac:	f7fe f872 	bl	8104794 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 81066b0:	6839      	ldr	r1, [r7, #0]
 81066b2:	687b      	ldr	r3, [r7, #4]
 81066b4:	68ba      	ldr	r2, [r7, #8]
 81066b6:	9202      	str	r2, [sp, #8]
 81066b8:	9301      	str	r3, [sp, #4]
 81066ba:	2300      	movs	r3, #0
 81066bc:	9300      	str	r3, [sp, #0]
 81066be:	2300      	movs	r3, #0
 81066c0:	460a      	mov	r2, r1
 81066c2:	4924      	ldr	r1, [pc, #144]	@ (8106754 <vTaskStartScheduler+0xc0>)
 81066c4:	4824      	ldr	r0, [pc, #144]	@ (8106758 <vTaskStartScheduler+0xc4>)
 81066c6:	f7ff fdf1 	bl	81062ac <xTaskCreateStatic>
 81066ca:	4603      	mov	r3, r0
 81066cc:	4a23      	ldr	r2, [pc, #140]	@ (810675c <vTaskStartScheduler+0xc8>)
 81066ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 81066d0:	4b22      	ldr	r3, [pc, #136]	@ (810675c <vTaskStartScheduler+0xc8>)
 81066d2:	681b      	ldr	r3, [r3, #0]
 81066d4:	2b00      	cmp	r3, #0
 81066d6:	d002      	beq.n	81066de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 81066d8:	2301      	movs	r3, #1
 81066da:	617b      	str	r3, [r7, #20]
 81066dc:	e001      	b.n	81066e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 81066de:	2300      	movs	r3, #0
 81066e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 81066e2:	697b      	ldr	r3, [r7, #20]
 81066e4:	2b01      	cmp	r3, #1
 81066e6:	d102      	bne.n	81066ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 81066e8:	f000 fe96 	bl	8107418 <xTimerCreateTimerTask>
 81066ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 81066ee:	697b      	ldr	r3, [r7, #20]
 81066f0:	2b01      	cmp	r3, #1
 81066f2:	d11b      	bne.n	810672c <vTaskStartScheduler+0x98>
	__asm volatile
 81066f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81066f8:	f383 8811 	msr	BASEPRI, r3
 81066fc:	f3bf 8f6f 	isb	sy
 8106700:	f3bf 8f4f 	dsb	sy
 8106704:	613b      	str	r3, [r7, #16]
}
 8106706:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8106708:	4b15      	ldr	r3, [pc, #84]	@ (8106760 <vTaskStartScheduler+0xcc>)
 810670a:	681b      	ldr	r3, [r3, #0]
 810670c:	3354      	adds	r3, #84	@ 0x54
 810670e:	4a15      	ldr	r2, [pc, #84]	@ (8106764 <vTaskStartScheduler+0xd0>)
 8106710:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8106712:	4b15      	ldr	r3, [pc, #84]	@ (8106768 <vTaskStartScheduler+0xd4>)
 8106714:	f04f 32ff 	mov.w	r2, #4294967295
 8106718:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 810671a:	4b14      	ldr	r3, [pc, #80]	@ (810676c <vTaskStartScheduler+0xd8>)
 810671c:	2201      	movs	r2, #1
 810671e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8106720:	4b13      	ldr	r3, [pc, #76]	@ (8106770 <vTaskStartScheduler+0xdc>)
 8106722:	2200      	movs	r2, #0
 8106724:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8106726:	f7fe fb9b 	bl	8104e60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 810672a:	e00f      	b.n	810674c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 810672c:	697b      	ldr	r3, [r7, #20]
 810672e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106732:	d10b      	bne.n	810674c <vTaskStartScheduler+0xb8>
	__asm volatile
 8106734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106738:	f383 8811 	msr	BASEPRI, r3
 810673c:	f3bf 8f6f 	isb	sy
 8106740:	f3bf 8f4f 	dsb	sy
 8106744:	60fb      	str	r3, [r7, #12]
}
 8106746:	bf00      	nop
 8106748:	bf00      	nop
 810674a:	e7fd      	b.n	8106748 <vTaskStartScheduler+0xb4>
}
 810674c:	bf00      	nop
 810674e:	3718      	adds	r7, #24
 8106750:	46bd      	mov	sp, r7
 8106752:	bd80      	pop	{r7, pc}
 8106754:	0810811c 	.word	0x0810811c
 8106758:	08106da5 	.word	0x08106da5
 810675c:	10004a58 	.word	0x10004a58
 8106760:	10004560 	.word	0x10004560
 8106764:	10000014 	.word	0x10000014
 8106768:	10004a54 	.word	0x10004a54
 810676c:	10004a40 	.word	0x10004a40
 8106770:	10004a38 	.word	0x10004a38

08106774 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8106774:	b480      	push	{r7}
 8106776:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8106778:	4b04      	ldr	r3, [pc, #16]	@ (810678c <vTaskSuspendAll+0x18>)
 810677a:	681b      	ldr	r3, [r3, #0]
 810677c:	3301      	adds	r3, #1
 810677e:	4a03      	ldr	r2, [pc, #12]	@ (810678c <vTaskSuspendAll+0x18>)
 8106780:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8106782:	bf00      	nop
 8106784:	46bd      	mov	sp, r7
 8106786:	f85d 7b04 	ldr.w	r7, [sp], #4
 810678a:	4770      	bx	lr
 810678c:	10004a5c 	.word	0x10004a5c

08106790 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8106790:	b580      	push	{r7, lr}
 8106792:	b084      	sub	sp, #16
 8106794:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8106796:	2300      	movs	r3, #0
 8106798:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810679a:	2300      	movs	r3, #0
 810679c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 810679e:	4b42      	ldr	r3, [pc, #264]	@ (81068a8 <xTaskResumeAll+0x118>)
 81067a0:	681b      	ldr	r3, [r3, #0]
 81067a2:	2b00      	cmp	r3, #0
 81067a4:	d10b      	bne.n	81067be <xTaskResumeAll+0x2e>
	__asm volatile
 81067a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81067aa:	f383 8811 	msr	BASEPRI, r3
 81067ae:	f3bf 8f6f 	isb	sy
 81067b2:	f3bf 8f4f 	dsb	sy
 81067b6:	603b      	str	r3, [r7, #0]
}
 81067b8:	bf00      	nop
 81067ba:	bf00      	nop
 81067bc:	e7fd      	b.n	81067ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 81067be:	f7fe fbf3 	bl	8104fa8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 81067c2:	4b39      	ldr	r3, [pc, #228]	@ (81068a8 <xTaskResumeAll+0x118>)
 81067c4:	681b      	ldr	r3, [r3, #0]
 81067c6:	3b01      	subs	r3, #1
 81067c8:	4a37      	ldr	r2, [pc, #220]	@ (81068a8 <xTaskResumeAll+0x118>)
 81067ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81067cc:	4b36      	ldr	r3, [pc, #216]	@ (81068a8 <xTaskResumeAll+0x118>)
 81067ce:	681b      	ldr	r3, [r3, #0]
 81067d0:	2b00      	cmp	r3, #0
 81067d2:	d162      	bne.n	810689a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 81067d4:	4b35      	ldr	r3, [pc, #212]	@ (81068ac <xTaskResumeAll+0x11c>)
 81067d6:	681b      	ldr	r3, [r3, #0]
 81067d8:	2b00      	cmp	r3, #0
 81067da:	d05e      	beq.n	810689a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 81067dc:	e02f      	b.n	810683e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81067de:	4b34      	ldr	r3, [pc, #208]	@ (81068b0 <xTaskResumeAll+0x120>)
 81067e0:	68db      	ldr	r3, [r3, #12]
 81067e2:	68db      	ldr	r3, [r3, #12]
 81067e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 81067e6:	68fb      	ldr	r3, [r7, #12]
 81067e8:	3318      	adds	r3, #24
 81067ea:	4618      	mov	r0, r3
 81067ec:	f7fe fa7e 	bl	8104cec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 81067f0:	68fb      	ldr	r3, [r7, #12]
 81067f2:	3304      	adds	r3, #4
 81067f4:	4618      	mov	r0, r3
 81067f6:	f7fe fa79 	bl	8104cec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 81067fa:	68fb      	ldr	r3, [r7, #12]
 81067fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81067fe:	4b2d      	ldr	r3, [pc, #180]	@ (81068b4 <xTaskResumeAll+0x124>)
 8106800:	681b      	ldr	r3, [r3, #0]
 8106802:	429a      	cmp	r2, r3
 8106804:	d903      	bls.n	810680e <xTaskResumeAll+0x7e>
 8106806:	68fb      	ldr	r3, [r7, #12]
 8106808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810680a:	4a2a      	ldr	r2, [pc, #168]	@ (81068b4 <xTaskResumeAll+0x124>)
 810680c:	6013      	str	r3, [r2, #0]
 810680e:	68fb      	ldr	r3, [r7, #12]
 8106810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8106812:	4613      	mov	r3, r2
 8106814:	009b      	lsls	r3, r3, #2
 8106816:	4413      	add	r3, r2
 8106818:	009b      	lsls	r3, r3, #2
 810681a:	4a27      	ldr	r2, [pc, #156]	@ (81068b8 <xTaskResumeAll+0x128>)
 810681c:	441a      	add	r2, r3
 810681e:	68fb      	ldr	r3, [r7, #12]
 8106820:	3304      	adds	r3, #4
 8106822:	4619      	mov	r1, r3
 8106824:	4610      	mov	r0, r2
 8106826:	f7fe fa04 	bl	8104c32 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810682a:	68fb      	ldr	r3, [r7, #12]
 810682c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810682e:	4b23      	ldr	r3, [pc, #140]	@ (81068bc <xTaskResumeAll+0x12c>)
 8106830:	681b      	ldr	r3, [r3, #0]
 8106832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106834:	429a      	cmp	r2, r3
 8106836:	d302      	bcc.n	810683e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8106838:	4b21      	ldr	r3, [pc, #132]	@ (81068c0 <xTaskResumeAll+0x130>)
 810683a:	2201      	movs	r2, #1
 810683c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810683e:	4b1c      	ldr	r3, [pc, #112]	@ (81068b0 <xTaskResumeAll+0x120>)
 8106840:	681b      	ldr	r3, [r3, #0]
 8106842:	2b00      	cmp	r3, #0
 8106844:	d1cb      	bne.n	81067de <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8106846:	68fb      	ldr	r3, [r7, #12]
 8106848:	2b00      	cmp	r3, #0
 810684a:	d001      	beq.n	8106850 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 810684c:	f000 fb66 	bl	8106f1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8106850:	4b1c      	ldr	r3, [pc, #112]	@ (81068c4 <xTaskResumeAll+0x134>)
 8106852:	681b      	ldr	r3, [r3, #0]
 8106854:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8106856:	687b      	ldr	r3, [r7, #4]
 8106858:	2b00      	cmp	r3, #0
 810685a:	d010      	beq.n	810687e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 810685c:	f000 f846 	bl	81068ec <xTaskIncrementTick>
 8106860:	4603      	mov	r3, r0
 8106862:	2b00      	cmp	r3, #0
 8106864:	d002      	beq.n	810686c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8106866:	4b16      	ldr	r3, [pc, #88]	@ (81068c0 <xTaskResumeAll+0x130>)
 8106868:	2201      	movs	r2, #1
 810686a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 810686c:	687b      	ldr	r3, [r7, #4]
 810686e:	3b01      	subs	r3, #1
 8106870:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8106872:	687b      	ldr	r3, [r7, #4]
 8106874:	2b00      	cmp	r3, #0
 8106876:	d1f1      	bne.n	810685c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8106878:	4b12      	ldr	r3, [pc, #72]	@ (81068c4 <xTaskResumeAll+0x134>)
 810687a:	2200      	movs	r2, #0
 810687c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 810687e:	4b10      	ldr	r3, [pc, #64]	@ (81068c0 <xTaskResumeAll+0x130>)
 8106880:	681b      	ldr	r3, [r3, #0]
 8106882:	2b00      	cmp	r3, #0
 8106884:	d009      	beq.n	810689a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8106886:	2301      	movs	r3, #1
 8106888:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 810688a:	4b0f      	ldr	r3, [pc, #60]	@ (81068c8 <xTaskResumeAll+0x138>)
 810688c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8106890:	601a      	str	r2, [r3, #0]
 8106892:	f3bf 8f4f 	dsb	sy
 8106896:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810689a:	f7fe fbb7 	bl	810500c <vPortExitCritical>

	return xAlreadyYielded;
 810689e:	68bb      	ldr	r3, [r7, #8]
}
 81068a0:	4618      	mov	r0, r3
 81068a2:	3710      	adds	r7, #16
 81068a4:	46bd      	mov	sp, r7
 81068a6:	bd80      	pop	{r7, pc}
 81068a8:	10004a5c 	.word	0x10004a5c
 81068ac:	10004a34 	.word	0x10004a34
 81068b0:	100049f4 	.word	0x100049f4
 81068b4:	10004a3c 	.word	0x10004a3c
 81068b8:	10004564 	.word	0x10004564
 81068bc:	10004560 	.word	0x10004560
 81068c0:	10004a48 	.word	0x10004a48
 81068c4:	10004a44 	.word	0x10004a44
 81068c8:	e000ed04 	.word	0xe000ed04

081068cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 81068cc:	b480      	push	{r7}
 81068ce:	b083      	sub	sp, #12
 81068d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 81068d2:	4b05      	ldr	r3, [pc, #20]	@ (81068e8 <xTaskGetTickCount+0x1c>)
 81068d4:	681b      	ldr	r3, [r3, #0]
 81068d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 81068d8:	687b      	ldr	r3, [r7, #4]
}
 81068da:	4618      	mov	r0, r3
 81068dc:	370c      	adds	r7, #12
 81068de:	46bd      	mov	sp, r7
 81068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81068e4:	4770      	bx	lr
 81068e6:	bf00      	nop
 81068e8:	10004a38 	.word	0x10004a38

081068ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 81068ec:	b580      	push	{r7, lr}
 81068ee:	b086      	sub	sp, #24
 81068f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 81068f2:	2300      	movs	r3, #0
 81068f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81068f6:	4b4f      	ldr	r3, [pc, #316]	@ (8106a34 <xTaskIncrementTick+0x148>)
 81068f8:	681b      	ldr	r3, [r3, #0]
 81068fa:	2b00      	cmp	r3, #0
 81068fc:	f040 8090 	bne.w	8106a20 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8106900:	4b4d      	ldr	r3, [pc, #308]	@ (8106a38 <xTaskIncrementTick+0x14c>)
 8106902:	681b      	ldr	r3, [r3, #0]
 8106904:	3301      	adds	r3, #1
 8106906:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8106908:	4a4b      	ldr	r2, [pc, #300]	@ (8106a38 <xTaskIncrementTick+0x14c>)
 810690a:	693b      	ldr	r3, [r7, #16]
 810690c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 810690e:	693b      	ldr	r3, [r7, #16]
 8106910:	2b00      	cmp	r3, #0
 8106912:	d121      	bne.n	8106958 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8106914:	4b49      	ldr	r3, [pc, #292]	@ (8106a3c <xTaskIncrementTick+0x150>)
 8106916:	681b      	ldr	r3, [r3, #0]
 8106918:	681b      	ldr	r3, [r3, #0]
 810691a:	2b00      	cmp	r3, #0
 810691c:	d00b      	beq.n	8106936 <xTaskIncrementTick+0x4a>
	__asm volatile
 810691e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106922:	f383 8811 	msr	BASEPRI, r3
 8106926:	f3bf 8f6f 	isb	sy
 810692a:	f3bf 8f4f 	dsb	sy
 810692e:	603b      	str	r3, [r7, #0]
}
 8106930:	bf00      	nop
 8106932:	bf00      	nop
 8106934:	e7fd      	b.n	8106932 <xTaskIncrementTick+0x46>
 8106936:	4b41      	ldr	r3, [pc, #260]	@ (8106a3c <xTaskIncrementTick+0x150>)
 8106938:	681b      	ldr	r3, [r3, #0]
 810693a:	60fb      	str	r3, [r7, #12]
 810693c:	4b40      	ldr	r3, [pc, #256]	@ (8106a40 <xTaskIncrementTick+0x154>)
 810693e:	681b      	ldr	r3, [r3, #0]
 8106940:	4a3e      	ldr	r2, [pc, #248]	@ (8106a3c <xTaskIncrementTick+0x150>)
 8106942:	6013      	str	r3, [r2, #0]
 8106944:	4a3e      	ldr	r2, [pc, #248]	@ (8106a40 <xTaskIncrementTick+0x154>)
 8106946:	68fb      	ldr	r3, [r7, #12]
 8106948:	6013      	str	r3, [r2, #0]
 810694a:	4b3e      	ldr	r3, [pc, #248]	@ (8106a44 <xTaskIncrementTick+0x158>)
 810694c:	681b      	ldr	r3, [r3, #0]
 810694e:	3301      	adds	r3, #1
 8106950:	4a3c      	ldr	r2, [pc, #240]	@ (8106a44 <xTaskIncrementTick+0x158>)
 8106952:	6013      	str	r3, [r2, #0]
 8106954:	f000 fae2 	bl	8106f1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8106958:	4b3b      	ldr	r3, [pc, #236]	@ (8106a48 <xTaskIncrementTick+0x15c>)
 810695a:	681b      	ldr	r3, [r3, #0]
 810695c:	693a      	ldr	r2, [r7, #16]
 810695e:	429a      	cmp	r2, r3
 8106960:	d349      	bcc.n	81069f6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8106962:	4b36      	ldr	r3, [pc, #216]	@ (8106a3c <xTaskIncrementTick+0x150>)
 8106964:	681b      	ldr	r3, [r3, #0]
 8106966:	681b      	ldr	r3, [r3, #0]
 8106968:	2b00      	cmp	r3, #0
 810696a:	d104      	bne.n	8106976 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810696c:	4b36      	ldr	r3, [pc, #216]	@ (8106a48 <xTaskIncrementTick+0x15c>)
 810696e:	f04f 32ff 	mov.w	r2, #4294967295
 8106972:	601a      	str	r2, [r3, #0]
					break;
 8106974:	e03f      	b.n	81069f6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8106976:	4b31      	ldr	r3, [pc, #196]	@ (8106a3c <xTaskIncrementTick+0x150>)
 8106978:	681b      	ldr	r3, [r3, #0]
 810697a:	68db      	ldr	r3, [r3, #12]
 810697c:	68db      	ldr	r3, [r3, #12]
 810697e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8106980:	68bb      	ldr	r3, [r7, #8]
 8106982:	685b      	ldr	r3, [r3, #4]
 8106984:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8106986:	693a      	ldr	r2, [r7, #16]
 8106988:	687b      	ldr	r3, [r7, #4]
 810698a:	429a      	cmp	r2, r3
 810698c:	d203      	bcs.n	8106996 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 810698e:	4a2e      	ldr	r2, [pc, #184]	@ (8106a48 <xTaskIncrementTick+0x15c>)
 8106990:	687b      	ldr	r3, [r7, #4]
 8106992:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8106994:	e02f      	b.n	81069f6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8106996:	68bb      	ldr	r3, [r7, #8]
 8106998:	3304      	adds	r3, #4
 810699a:	4618      	mov	r0, r3
 810699c:	f7fe f9a6 	bl	8104cec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 81069a0:	68bb      	ldr	r3, [r7, #8]
 81069a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81069a4:	2b00      	cmp	r3, #0
 81069a6:	d004      	beq.n	81069b2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 81069a8:	68bb      	ldr	r3, [r7, #8]
 81069aa:	3318      	adds	r3, #24
 81069ac:	4618      	mov	r0, r3
 81069ae:	f7fe f99d 	bl	8104cec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 81069b2:	68bb      	ldr	r3, [r7, #8]
 81069b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81069b6:	4b25      	ldr	r3, [pc, #148]	@ (8106a4c <xTaskIncrementTick+0x160>)
 81069b8:	681b      	ldr	r3, [r3, #0]
 81069ba:	429a      	cmp	r2, r3
 81069bc:	d903      	bls.n	81069c6 <xTaskIncrementTick+0xda>
 81069be:	68bb      	ldr	r3, [r7, #8]
 81069c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81069c2:	4a22      	ldr	r2, [pc, #136]	@ (8106a4c <xTaskIncrementTick+0x160>)
 81069c4:	6013      	str	r3, [r2, #0]
 81069c6:	68bb      	ldr	r3, [r7, #8]
 81069c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81069ca:	4613      	mov	r3, r2
 81069cc:	009b      	lsls	r3, r3, #2
 81069ce:	4413      	add	r3, r2
 81069d0:	009b      	lsls	r3, r3, #2
 81069d2:	4a1f      	ldr	r2, [pc, #124]	@ (8106a50 <xTaskIncrementTick+0x164>)
 81069d4:	441a      	add	r2, r3
 81069d6:	68bb      	ldr	r3, [r7, #8]
 81069d8:	3304      	adds	r3, #4
 81069da:	4619      	mov	r1, r3
 81069dc:	4610      	mov	r0, r2
 81069de:	f7fe f928 	bl	8104c32 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 81069e2:	68bb      	ldr	r3, [r7, #8]
 81069e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81069e6:	4b1b      	ldr	r3, [pc, #108]	@ (8106a54 <xTaskIncrementTick+0x168>)
 81069e8:	681b      	ldr	r3, [r3, #0]
 81069ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81069ec:	429a      	cmp	r2, r3
 81069ee:	d3b8      	bcc.n	8106962 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 81069f0:	2301      	movs	r3, #1
 81069f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81069f4:	e7b5      	b.n	8106962 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 81069f6:	4b17      	ldr	r3, [pc, #92]	@ (8106a54 <xTaskIncrementTick+0x168>)
 81069f8:	681b      	ldr	r3, [r3, #0]
 81069fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81069fc:	4914      	ldr	r1, [pc, #80]	@ (8106a50 <xTaskIncrementTick+0x164>)
 81069fe:	4613      	mov	r3, r2
 8106a00:	009b      	lsls	r3, r3, #2
 8106a02:	4413      	add	r3, r2
 8106a04:	009b      	lsls	r3, r3, #2
 8106a06:	440b      	add	r3, r1
 8106a08:	681b      	ldr	r3, [r3, #0]
 8106a0a:	2b01      	cmp	r3, #1
 8106a0c:	d901      	bls.n	8106a12 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8106a0e:	2301      	movs	r3, #1
 8106a10:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8106a12:	4b11      	ldr	r3, [pc, #68]	@ (8106a58 <xTaskIncrementTick+0x16c>)
 8106a14:	681b      	ldr	r3, [r3, #0]
 8106a16:	2b00      	cmp	r3, #0
 8106a18:	d007      	beq.n	8106a2a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8106a1a:	2301      	movs	r3, #1
 8106a1c:	617b      	str	r3, [r7, #20]
 8106a1e:	e004      	b.n	8106a2a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8106a20:	4b0e      	ldr	r3, [pc, #56]	@ (8106a5c <xTaskIncrementTick+0x170>)
 8106a22:	681b      	ldr	r3, [r3, #0]
 8106a24:	3301      	adds	r3, #1
 8106a26:	4a0d      	ldr	r2, [pc, #52]	@ (8106a5c <xTaskIncrementTick+0x170>)
 8106a28:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8106a2a:	697b      	ldr	r3, [r7, #20]
}
 8106a2c:	4618      	mov	r0, r3
 8106a2e:	3718      	adds	r7, #24
 8106a30:	46bd      	mov	sp, r7
 8106a32:	bd80      	pop	{r7, pc}
 8106a34:	10004a5c 	.word	0x10004a5c
 8106a38:	10004a38 	.word	0x10004a38
 8106a3c:	100049ec 	.word	0x100049ec
 8106a40:	100049f0 	.word	0x100049f0
 8106a44:	10004a4c 	.word	0x10004a4c
 8106a48:	10004a54 	.word	0x10004a54
 8106a4c:	10004a3c 	.word	0x10004a3c
 8106a50:	10004564 	.word	0x10004564
 8106a54:	10004560 	.word	0x10004560
 8106a58:	10004a48 	.word	0x10004a48
 8106a5c:	10004a44 	.word	0x10004a44

08106a60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8106a60:	b480      	push	{r7}
 8106a62:	b085      	sub	sp, #20
 8106a64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8106a66:	4b2b      	ldr	r3, [pc, #172]	@ (8106b14 <vTaskSwitchContext+0xb4>)
 8106a68:	681b      	ldr	r3, [r3, #0]
 8106a6a:	2b00      	cmp	r3, #0
 8106a6c:	d003      	beq.n	8106a76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8106a6e:	4b2a      	ldr	r3, [pc, #168]	@ (8106b18 <vTaskSwitchContext+0xb8>)
 8106a70:	2201      	movs	r2, #1
 8106a72:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8106a74:	e047      	b.n	8106b06 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8106a76:	4b28      	ldr	r3, [pc, #160]	@ (8106b18 <vTaskSwitchContext+0xb8>)
 8106a78:	2200      	movs	r2, #0
 8106a7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8106a7c:	4b27      	ldr	r3, [pc, #156]	@ (8106b1c <vTaskSwitchContext+0xbc>)
 8106a7e:	681b      	ldr	r3, [r3, #0]
 8106a80:	60fb      	str	r3, [r7, #12]
 8106a82:	e011      	b.n	8106aa8 <vTaskSwitchContext+0x48>
 8106a84:	68fb      	ldr	r3, [r7, #12]
 8106a86:	2b00      	cmp	r3, #0
 8106a88:	d10b      	bne.n	8106aa2 <vTaskSwitchContext+0x42>
	__asm volatile
 8106a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106a8e:	f383 8811 	msr	BASEPRI, r3
 8106a92:	f3bf 8f6f 	isb	sy
 8106a96:	f3bf 8f4f 	dsb	sy
 8106a9a:	607b      	str	r3, [r7, #4]
}
 8106a9c:	bf00      	nop
 8106a9e:	bf00      	nop
 8106aa0:	e7fd      	b.n	8106a9e <vTaskSwitchContext+0x3e>
 8106aa2:	68fb      	ldr	r3, [r7, #12]
 8106aa4:	3b01      	subs	r3, #1
 8106aa6:	60fb      	str	r3, [r7, #12]
 8106aa8:	491d      	ldr	r1, [pc, #116]	@ (8106b20 <vTaskSwitchContext+0xc0>)
 8106aaa:	68fa      	ldr	r2, [r7, #12]
 8106aac:	4613      	mov	r3, r2
 8106aae:	009b      	lsls	r3, r3, #2
 8106ab0:	4413      	add	r3, r2
 8106ab2:	009b      	lsls	r3, r3, #2
 8106ab4:	440b      	add	r3, r1
 8106ab6:	681b      	ldr	r3, [r3, #0]
 8106ab8:	2b00      	cmp	r3, #0
 8106aba:	d0e3      	beq.n	8106a84 <vTaskSwitchContext+0x24>
 8106abc:	68fa      	ldr	r2, [r7, #12]
 8106abe:	4613      	mov	r3, r2
 8106ac0:	009b      	lsls	r3, r3, #2
 8106ac2:	4413      	add	r3, r2
 8106ac4:	009b      	lsls	r3, r3, #2
 8106ac6:	4a16      	ldr	r2, [pc, #88]	@ (8106b20 <vTaskSwitchContext+0xc0>)
 8106ac8:	4413      	add	r3, r2
 8106aca:	60bb      	str	r3, [r7, #8]
 8106acc:	68bb      	ldr	r3, [r7, #8]
 8106ace:	685b      	ldr	r3, [r3, #4]
 8106ad0:	685a      	ldr	r2, [r3, #4]
 8106ad2:	68bb      	ldr	r3, [r7, #8]
 8106ad4:	605a      	str	r2, [r3, #4]
 8106ad6:	68bb      	ldr	r3, [r7, #8]
 8106ad8:	685a      	ldr	r2, [r3, #4]
 8106ada:	68bb      	ldr	r3, [r7, #8]
 8106adc:	3308      	adds	r3, #8
 8106ade:	429a      	cmp	r2, r3
 8106ae0:	d104      	bne.n	8106aec <vTaskSwitchContext+0x8c>
 8106ae2:	68bb      	ldr	r3, [r7, #8]
 8106ae4:	685b      	ldr	r3, [r3, #4]
 8106ae6:	685a      	ldr	r2, [r3, #4]
 8106ae8:	68bb      	ldr	r3, [r7, #8]
 8106aea:	605a      	str	r2, [r3, #4]
 8106aec:	68bb      	ldr	r3, [r7, #8]
 8106aee:	685b      	ldr	r3, [r3, #4]
 8106af0:	68db      	ldr	r3, [r3, #12]
 8106af2:	4a0c      	ldr	r2, [pc, #48]	@ (8106b24 <vTaskSwitchContext+0xc4>)
 8106af4:	6013      	str	r3, [r2, #0]
 8106af6:	4a09      	ldr	r2, [pc, #36]	@ (8106b1c <vTaskSwitchContext+0xbc>)
 8106af8:	68fb      	ldr	r3, [r7, #12]
 8106afa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8106afc:	4b09      	ldr	r3, [pc, #36]	@ (8106b24 <vTaskSwitchContext+0xc4>)
 8106afe:	681b      	ldr	r3, [r3, #0]
 8106b00:	3354      	adds	r3, #84	@ 0x54
 8106b02:	4a09      	ldr	r2, [pc, #36]	@ (8106b28 <vTaskSwitchContext+0xc8>)
 8106b04:	6013      	str	r3, [r2, #0]
}
 8106b06:	bf00      	nop
 8106b08:	3714      	adds	r7, #20
 8106b0a:	46bd      	mov	sp, r7
 8106b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b10:	4770      	bx	lr
 8106b12:	bf00      	nop
 8106b14:	10004a5c 	.word	0x10004a5c
 8106b18:	10004a48 	.word	0x10004a48
 8106b1c:	10004a3c 	.word	0x10004a3c
 8106b20:	10004564 	.word	0x10004564
 8106b24:	10004560 	.word	0x10004560
 8106b28:	10000014 	.word	0x10000014

08106b2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8106b2c:	b580      	push	{r7, lr}
 8106b2e:	b084      	sub	sp, #16
 8106b30:	af00      	add	r7, sp, #0
 8106b32:	6078      	str	r0, [r7, #4]
 8106b34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8106b36:	687b      	ldr	r3, [r7, #4]
 8106b38:	2b00      	cmp	r3, #0
 8106b3a:	d10b      	bne.n	8106b54 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8106b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106b40:	f383 8811 	msr	BASEPRI, r3
 8106b44:	f3bf 8f6f 	isb	sy
 8106b48:	f3bf 8f4f 	dsb	sy
 8106b4c:	60fb      	str	r3, [r7, #12]
}
 8106b4e:	bf00      	nop
 8106b50:	bf00      	nop
 8106b52:	e7fd      	b.n	8106b50 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8106b54:	4b07      	ldr	r3, [pc, #28]	@ (8106b74 <vTaskPlaceOnEventList+0x48>)
 8106b56:	681b      	ldr	r3, [r3, #0]
 8106b58:	3318      	adds	r3, #24
 8106b5a:	4619      	mov	r1, r3
 8106b5c:	6878      	ldr	r0, [r7, #4]
 8106b5e:	f7fe f88c 	bl	8104c7a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8106b62:	2101      	movs	r1, #1
 8106b64:	6838      	ldr	r0, [r7, #0]
 8106b66:	f000 fc03 	bl	8107370 <prvAddCurrentTaskToDelayedList>
}
 8106b6a:	bf00      	nop
 8106b6c:	3710      	adds	r7, #16
 8106b6e:	46bd      	mov	sp, r7
 8106b70:	bd80      	pop	{r7, pc}
 8106b72:	bf00      	nop
 8106b74:	10004560 	.word	0x10004560

08106b78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8106b78:	b580      	push	{r7, lr}
 8106b7a:	b086      	sub	sp, #24
 8106b7c:	af00      	add	r7, sp, #0
 8106b7e:	60f8      	str	r0, [r7, #12]
 8106b80:	60b9      	str	r1, [r7, #8]
 8106b82:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8106b84:	68fb      	ldr	r3, [r7, #12]
 8106b86:	2b00      	cmp	r3, #0
 8106b88:	d10b      	bne.n	8106ba2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8106b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106b8e:	f383 8811 	msr	BASEPRI, r3
 8106b92:	f3bf 8f6f 	isb	sy
 8106b96:	f3bf 8f4f 	dsb	sy
 8106b9a:	617b      	str	r3, [r7, #20]
}
 8106b9c:	bf00      	nop
 8106b9e:	bf00      	nop
 8106ba0:	e7fd      	b.n	8106b9e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8106ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8106bcc <vTaskPlaceOnEventListRestricted+0x54>)
 8106ba4:	681b      	ldr	r3, [r3, #0]
 8106ba6:	3318      	adds	r3, #24
 8106ba8:	4619      	mov	r1, r3
 8106baa:	68f8      	ldr	r0, [r7, #12]
 8106bac:	f7fe f841 	bl	8104c32 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8106bb0:	687b      	ldr	r3, [r7, #4]
 8106bb2:	2b00      	cmp	r3, #0
 8106bb4:	d002      	beq.n	8106bbc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8106bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8106bba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8106bbc:	6879      	ldr	r1, [r7, #4]
 8106bbe:	68b8      	ldr	r0, [r7, #8]
 8106bc0:	f000 fbd6 	bl	8107370 <prvAddCurrentTaskToDelayedList>
	}
 8106bc4:	bf00      	nop
 8106bc6:	3718      	adds	r7, #24
 8106bc8:	46bd      	mov	sp, r7
 8106bca:	bd80      	pop	{r7, pc}
 8106bcc:	10004560 	.word	0x10004560

08106bd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8106bd0:	b580      	push	{r7, lr}
 8106bd2:	b086      	sub	sp, #24
 8106bd4:	af00      	add	r7, sp, #0
 8106bd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8106bd8:	687b      	ldr	r3, [r7, #4]
 8106bda:	68db      	ldr	r3, [r3, #12]
 8106bdc:	68db      	ldr	r3, [r3, #12]
 8106bde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8106be0:	693b      	ldr	r3, [r7, #16]
 8106be2:	2b00      	cmp	r3, #0
 8106be4:	d10b      	bne.n	8106bfe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8106be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106bea:	f383 8811 	msr	BASEPRI, r3
 8106bee:	f3bf 8f6f 	isb	sy
 8106bf2:	f3bf 8f4f 	dsb	sy
 8106bf6:	60fb      	str	r3, [r7, #12]
}
 8106bf8:	bf00      	nop
 8106bfa:	bf00      	nop
 8106bfc:	e7fd      	b.n	8106bfa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8106bfe:	693b      	ldr	r3, [r7, #16]
 8106c00:	3318      	adds	r3, #24
 8106c02:	4618      	mov	r0, r3
 8106c04:	f7fe f872 	bl	8104cec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8106c08:	4b1d      	ldr	r3, [pc, #116]	@ (8106c80 <xTaskRemoveFromEventList+0xb0>)
 8106c0a:	681b      	ldr	r3, [r3, #0]
 8106c0c:	2b00      	cmp	r3, #0
 8106c0e:	d11d      	bne.n	8106c4c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8106c10:	693b      	ldr	r3, [r7, #16]
 8106c12:	3304      	adds	r3, #4
 8106c14:	4618      	mov	r0, r3
 8106c16:	f7fe f869 	bl	8104cec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8106c1a:	693b      	ldr	r3, [r7, #16]
 8106c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8106c1e:	4b19      	ldr	r3, [pc, #100]	@ (8106c84 <xTaskRemoveFromEventList+0xb4>)
 8106c20:	681b      	ldr	r3, [r3, #0]
 8106c22:	429a      	cmp	r2, r3
 8106c24:	d903      	bls.n	8106c2e <xTaskRemoveFromEventList+0x5e>
 8106c26:	693b      	ldr	r3, [r7, #16]
 8106c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106c2a:	4a16      	ldr	r2, [pc, #88]	@ (8106c84 <xTaskRemoveFromEventList+0xb4>)
 8106c2c:	6013      	str	r3, [r2, #0]
 8106c2e:	693b      	ldr	r3, [r7, #16]
 8106c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8106c32:	4613      	mov	r3, r2
 8106c34:	009b      	lsls	r3, r3, #2
 8106c36:	4413      	add	r3, r2
 8106c38:	009b      	lsls	r3, r3, #2
 8106c3a:	4a13      	ldr	r2, [pc, #76]	@ (8106c88 <xTaskRemoveFromEventList+0xb8>)
 8106c3c:	441a      	add	r2, r3
 8106c3e:	693b      	ldr	r3, [r7, #16]
 8106c40:	3304      	adds	r3, #4
 8106c42:	4619      	mov	r1, r3
 8106c44:	4610      	mov	r0, r2
 8106c46:	f7fd fff4 	bl	8104c32 <vListInsertEnd>
 8106c4a:	e005      	b.n	8106c58 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8106c4c:	693b      	ldr	r3, [r7, #16]
 8106c4e:	3318      	adds	r3, #24
 8106c50:	4619      	mov	r1, r3
 8106c52:	480e      	ldr	r0, [pc, #56]	@ (8106c8c <xTaskRemoveFromEventList+0xbc>)
 8106c54:	f7fd ffed 	bl	8104c32 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8106c58:	693b      	ldr	r3, [r7, #16]
 8106c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8106c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8106c90 <xTaskRemoveFromEventList+0xc0>)
 8106c5e:	681b      	ldr	r3, [r3, #0]
 8106c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106c62:	429a      	cmp	r2, r3
 8106c64:	d905      	bls.n	8106c72 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8106c66:	2301      	movs	r3, #1
 8106c68:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8106c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8106c94 <xTaskRemoveFromEventList+0xc4>)
 8106c6c:	2201      	movs	r2, #1
 8106c6e:	601a      	str	r2, [r3, #0]
 8106c70:	e001      	b.n	8106c76 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8106c72:	2300      	movs	r3, #0
 8106c74:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8106c76:	697b      	ldr	r3, [r7, #20]
}
 8106c78:	4618      	mov	r0, r3
 8106c7a:	3718      	adds	r7, #24
 8106c7c:	46bd      	mov	sp, r7
 8106c7e:	bd80      	pop	{r7, pc}
 8106c80:	10004a5c 	.word	0x10004a5c
 8106c84:	10004a3c 	.word	0x10004a3c
 8106c88:	10004564 	.word	0x10004564
 8106c8c:	100049f4 	.word	0x100049f4
 8106c90:	10004560 	.word	0x10004560
 8106c94:	10004a48 	.word	0x10004a48

08106c98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8106c98:	b480      	push	{r7}
 8106c9a:	b083      	sub	sp, #12
 8106c9c:	af00      	add	r7, sp, #0
 8106c9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8106ca0:	4b06      	ldr	r3, [pc, #24]	@ (8106cbc <vTaskInternalSetTimeOutState+0x24>)
 8106ca2:	681a      	ldr	r2, [r3, #0]
 8106ca4:	687b      	ldr	r3, [r7, #4]
 8106ca6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8106ca8:	4b05      	ldr	r3, [pc, #20]	@ (8106cc0 <vTaskInternalSetTimeOutState+0x28>)
 8106caa:	681a      	ldr	r2, [r3, #0]
 8106cac:	687b      	ldr	r3, [r7, #4]
 8106cae:	605a      	str	r2, [r3, #4]
}
 8106cb0:	bf00      	nop
 8106cb2:	370c      	adds	r7, #12
 8106cb4:	46bd      	mov	sp, r7
 8106cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106cba:	4770      	bx	lr
 8106cbc:	10004a4c 	.word	0x10004a4c
 8106cc0:	10004a38 	.word	0x10004a38

08106cc4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8106cc4:	b580      	push	{r7, lr}
 8106cc6:	b088      	sub	sp, #32
 8106cc8:	af00      	add	r7, sp, #0
 8106cca:	6078      	str	r0, [r7, #4]
 8106ccc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8106cce:	687b      	ldr	r3, [r7, #4]
 8106cd0:	2b00      	cmp	r3, #0
 8106cd2:	d10b      	bne.n	8106cec <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8106cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106cd8:	f383 8811 	msr	BASEPRI, r3
 8106cdc:	f3bf 8f6f 	isb	sy
 8106ce0:	f3bf 8f4f 	dsb	sy
 8106ce4:	613b      	str	r3, [r7, #16]
}
 8106ce6:	bf00      	nop
 8106ce8:	bf00      	nop
 8106cea:	e7fd      	b.n	8106ce8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8106cec:	683b      	ldr	r3, [r7, #0]
 8106cee:	2b00      	cmp	r3, #0
 8106cf0:	d10b      	bne.n	8106d0a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8106cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106cf6:	f383 8811 	msr	BASEPRI, r3
 8106cfa:	f3bf 8f6f 	isb	sy
 8106cfe:	f3bf 8f4f 	dsb	sy
 8106d02:	60fb      	str	r3, [r7, #12]
}
 8106d04:	bf00      	nop
 8106d06:	bf00      	nop
 8106d08:	e7fd      	b.n	8106d06 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8106d0a:	f7fe f94d 	bl	8104fa8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8106d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8106d84 <xTaskCheckForTimeOut+0xc0>)
 8106d10:	681b      	ldr	r3, [r3, #0]
 8106d12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8106d14:	687b      	ldr	r3, [r7, #4]
 8106d16:	685b      	ldr	r3, [r3, #4]
 8106d18:	69ba      	ldr	r2, [r7, #24]
 8106d1a:	1ad3      	subs	r3, r2, r3
 8106d1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8106d1e:	683b      	ldr	r3, [r7, #0]
 8106d20:	681b      	ldr	r3, [r3, #0]
 8106d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106d26:	d102      	bne.n	8106d2e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8106d28:	2300      	movs	r3, #0
 8106d2a:	61fb      	str	r3, [r7, #28]
 8106d2c:	e023      	b.n	8106d76 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8106d2e:	687b      	ldr	r3, [r7, #4]
 8106d30:	681a      	ldr	r2, [r3, #0]
 8106d32:	4b15      	ldr	r3, [pc, #84]	@ (8106d88 <xTaskCheckForTimeOut+0xc4>)
 8106d34:	681b      	ldr	r3, [r3, #0]
 8106d36:	429a      	cmp	r2, r3
 8106d38:	d007      	beq.n	8106d4a <xTaskCheckForTimeOut+0x86>
 8106d3a:	687b      	ldr	r3, [r7, #4]
 8106d3c:	685b      	ldr	r3, [r3, #4]
 8106d3e:	69ba      	ldr	r2, [r7, #24]
 8106d40:	429a      	cmp	r2, r3
 8106d42:	d302      	bcc.n	8106d4a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8106d44:	2301      	movs	r3, #1
 8106d46:	61fb      	str	r3, [r7, #28]
 8106d48:	e015      	b.n	8106d76 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8106d4a:	683b      	ldr	r3, [r7, #0]
 8106d4c:	681b      	ldr	r3, [r3, #0]
 8106d4e:	697a      	ldr	r2, [r7, #20]
 8106d50:	429a      	cmp	r2, r3
 8106d52:	d20b      	bcs.n	8106d6c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8106d54:	683b      	ldr	r3, [r7, #0]
 8106d56:	681a      	ldr	r2, [r3, #0]
 8106d58:	697b      	ldr	r3, [r7, #20]
 8106d5a:	1ad2      	subs	r2, r2, r3
 8106d5c:	683b      	ldr	r3, [r7, #0]
 8106d5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8106d60:	6878      	ldr	r0, [r7, #4]
 8106d62:	f7ff ff99 	bl	8106c98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8106d66:	2300      	movs	r3, #0
 8106d68:	61fb      	str	r3, [r7, #28]
 8106d6a:	e004      	b.n	8106d76 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8106d6c:	683b      	ldr	r3, [r7, #0]
 8106d6e:	2200      	movs	r2, #0
 8106d70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8106d72:	2301      	movs	r3, #1
 8106d74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8106d76:	f7fe f949 	bl	810500c <vPortExitCritical>

	return xReturn;
 8106d7a:	69fb      	ldr	r3, [r7, #28]
}
 8106d7c:	4618      	mov	r0, r3
 8106d7e:	3720      	adds	r7, #32
 8106d80:	46bd      	mov	sp, r7
 8106d82:	bd80      	pop	{r7, pc}
 8106d84:	10004a38 	.word	0x10004a38
 8106d88:	10004a4c 	.word	0x10004a4c

08106d8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8106d8c:	b480      	push	{r7}
 8106d8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8106d90:	4b03      	ldr	r3, [pc, #12]	@ (8106da0 <vTaskMissedYield+0x14>)
 8106d92:	2201      	movs	r2, #1
 8106d94:	601a      	str	r2, [r3, #0]
}
 8106d96:	bf00      	nop
 8106d98:	46bd      	mov	sp, r7
 8106d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d9e:	4770      	bx	lr
 8106da0:	10004a48 	.word	0x10004a48

08106da4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8106da4:	b580      	push	{r7, lr}
 8106da6:	b082      	sub	sp, #8
 8106da8:	af00      	add	r7, sp, #0
 8106daa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8106dac:	f000 f852 	bl	8106e54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8106db0:	4b06      	ldr	r3, [pc, #24]	@ (8106dcc <prvIdleTask+0x28>)
 8106db2:	681b      	ldr	r3, [r3, #0]
 8106db4:	2b01      	cmp	r3, #1
 8106db6:	d9f9      	bls.n	8106dac <prvIdleTask+0x8>
			{
				taskYIELD();
 8106db8:	4b05      	ldr	r3, [pc, #20]	@ (8106dd0 <prvIdleTask+0x2c>)
 8106dba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8106dbe:	601a      	str	r2, [r3, #0]
 8106dc0:	f3bf 8f4f 	dsb	sy
 8106dc4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8106dc8:	e7f0      	b.n	8106dac <prvIdleTask+0x8>
 8106dca:	bf00      	nop
 8106dcc:	10004564 	.word	0x10004564
 8106dd0:	e000ed04 	.word	0xe000ed04

08106dd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8106dd4:	b580      	push	{r7, lr}
 8106dd6:	b082      	sub	sp, #8
 8106dd8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8106dda:	2300      	movs	r3, #0
 8106ddc:	607b      	str	r3, [r7, #4]
 8106dde:	e00c      	b.n	8106dfa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8106de0:	687a      	ldr	r2, [r7, #4]
 8106de2:	4613      	mov	r3, r2
 8106de4:	009b      	lsls	r3, r3, #2
 8106de6:	4413      	add	r3, r2
 8106de8:	009b      	lsls	r3, r3, #2
 8106dea:	4a12      	ldr	r2, [pc, #72]	@ (8106e34 <prvInitialiseTaskLists+0x60>)
 8106dec:	4413      	add	r3, r2
 8106dee:	4618      	mov	r0, r3
 8106df0:	f7fd fef2 	bl	8104bd8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8106df4:	687b      	ldr	r3, [r7, #4]
 8106df6:	3301      	adds	r3, #1
 8106df8:	607b      	str	r3, [r7, #4]
 8106dfa:	687b      	ldr	r3, [r7, #4]
 8106dfc:	2b37      	cmp	r3, #55	@ 0x37
 8106dfe:	d9ef      	bls.n	8106de0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8106e00:	480d      	ldr	r0, [pc, #52]	@ (8106e38 <prvInitialiseTaskLists+0x64>)
 8106e02:	f7fd fee9 	bl	8104bd8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8106e06:	480d      	ldr	r0, [pc, #52]	@ (8106e3c <prvInitialiseTaskLists+0x68>)
 8106e08:	f7fd fee6 	bl	8104bd8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8106e0c:	480c      	ldr	r0, [pc, #48]	@ (8106e40 <prvInitialiseTaskLists+0x6c>)
 8106e0e:	f7fd fee3 	bl	8104bd8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8106e12:	480c      	ldr	r0, [pc, #48]	@ (8106e44 <prvInitialiseTaskLists+0x70>)
 8106e14:	f7fd fee0 	bl	8104bd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8106e18:	480b      	ldr	r0, [pc, #44]	@ (8106e48 <prvInitialiseTaskLists+0x74>)
 8106e1a:	f7fd fedd 	bl	8104bd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8106e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8106e4c <prvInitialiseTaskLists+0x78>)
 8106e20:	4a05      	ldr	r2, [pc, #20]	@ (8106e38 <prvInitialiseTaskLists+0x64>)
 8106e22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8106e24:	4b0a      	ldr	r3, [pc, #40]	@ (8106e50 <prvInitialiseTaskLists+0x7c>)
 8106e26:	4a05      	ldr	r2, [pc, #20]	@ (8106e3c <prvInitialiseTaskLists+0x68>)
 8106e28:	601a      	str	r2, [r3, #0]
}
 8106e2a:	bf00      	nop
 8106e2c:	3708      	adds	r7, #8
 8106e2e:	46bd      	mov	sp, r7
 8106e30:	bd80      	pop	{r7, pc}
 8106e32:	bf00      	nop
 8106e34:	10004564 	.word	0x10004564
 8106e38:	100049c4 	.word	0x100049c4
 8106e3c:	100049d8 	.word	0x100049d8
 8106e40:	100049f4 	.word	0x100049f4
 8106e44:	10004a08 	.word	0x10004a08
 8106e48:	10004a20 	.word	0x10004a20
 8106e4c:	100049ec 	.word	0x100049ec
 8106e50:	100049f0 	.word	0x100049f0

08106e54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8106e54:	b580      	push	{r7, lr}
 8106e56:	b082      	sub	sp, #8
 8106e58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8106e5a:	e019      	b.n	8106e90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8106e5c:	f7fe f8a4 	bl	8104fa8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8106e60:	4b10      	ldr	r3, [pc, #64]	@ (8106ea4 <prvCheckTasksWaitingTermination+0x50>)
 8106e62:	68db      	ldr	r3, [r3, #12]
 8106e64:	68db      	ldr	r3, [r3, #12]
 8106e66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8106e68:	687b      	ldr	r3, [r7, #4]
 8106e6a:	3304      	adds	r3, #4
 8106e6c:	4618      	mov	r0, r3
 8106e6e:	f7fd ff3d 	bl	8104cec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8106e72:	4b0d      	ldr	r3, [pc, #52]	@ (8106ea8 <prvCheckTasksWaitingTermination+0x54>)
 8106e74:	681b      	ldr	r3, [r3, #0]
 8106e76:	3b01      	subs	r3, #1
 8106e78:	4a0b      	ldr	r2, [pc, #44]	@ (8106ea8 <prvCheckTasksWaitingTermination+0x54>)
 8106e7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8106e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8106eac <prvCheckTasksWaitingTermination+0x58>)
 8106e7e:	681b      	ldr	r3, [r3, #0]
 8106e80:	3b01      	subs	r3, #1
 8106e82:	4a0a      	ldr	r2, [pc, #40]	@ (8106eac <prvCheckTasksWaitingTermination+0x58>)
 8106e84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8106e86:	f7fe f8c1 	bl	810500c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8106e8a:	6878      	ldr	r0, [r7, #4]
 8106e8c:	f000 f810 	bl	8106eb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8106e90:	4b06      	ldr	r3, [pc, #24]	@ (8106eac <prvCheckTasksWaitingTermination+0x58>)
 8106e92:	681b      	ldr	r3, [r3, #0]
 8106e94:	2b00      	cmp	r3, #0
 8106e96:	d1e1      	bne.n	8106e5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8106e98:	bf00      	nop
 8106e9a:	bf00      	nop
 8106e9c:	3708      	adds	r7, #8
 8106e9e:	46bd      	mov	sp, r7
 8106ea0:	bd80      	pop	{r7, pc}
 8106ea2:	bf00      	nop
 8106ea4:	10004a08 	.word	0x10004a08
 8106ea8:	10004a34 	.word	0x10004a34
 8106eac:	10004a1c 	.word	0x10004a1c

08106eb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8106eb0:	b580      	push	{r7, lr}
 8106eb2:	b084      	sub	sp, #16
 8106eb4:	af00      	add	r7, sp, #0
 8106eb6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8106eb8:	687b      	ldr	r3, [r7, #4]
 8106eba:	3354      	adds	r3, #84	@ 0x54
 8106ebc:	4618      	mov	r0, r3
 8106ebe:	f001 f803 	bl	8107ec8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8106ec2:	687b      	ldr	r3, [r7, #4]
 8106ec4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8106ec8:	2b00      	cmp	r3, #0
 8106eca:	d108      	bne.n	8106ede <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8106ecc:	687b      	ldr	r3, [r7, #4]
 8106ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106ed0:	4618      	mov	r0, r3
 8106ed2:	f7fd fd61 	bl	8104998 <vPortFree>
				vPortFree( pxTCB );
 8106ed6:	6878      	ldr	r0, [r7, #4]
 8106ed8:	f7fd fd5e 	bl	8104998 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8106edc:	e019      	b.n	8106f12 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8106ede:	687b      	ldr	r3, [r7, #4]
 8106ee0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8106ee4:	2b01      	cmp	r3, #1
 8106ee6:	d103      	bne.n	8106ef0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8106ee8:	6878      	ldr	r0, [r7, #4]
 8106eea:	f7fd fd55 	bl	8104998 <vPortFree>
	}
 8106eee:	e010      	b.n	8106f12 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8106ef0:	687b      	ldr	r3, [r7, #4]
 8106ef2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8106ef6:	2b02      	cmp	r3, #2
 8106ef8:	d00b      	beq.n	8106f12 <prvDeleteTCB+0x62>
	__asm volatile
 8106efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106efe:	f383 8811 	msr	BASEPRI, r3
 8106f02:	f3bf 8f6f 	isb	sy
 8106f06:	f3bf 8f4f 	dsb	sy
 8106f0a:	60fb      	str	r3, [r7, #12]
}
 8106f0c:	bf00      	nop
 8106f0e:	bf00      	nop
 8106f10:	e7fd      	b.n	8106f0e <prvDeleteTCB+0x5e>
	}
 8106f12:	bf00      	nop
 8106f14:	3710      	adds	r7, #16
 8106f16:	46bd      	mov	sp, r7
 8106f18:	bd80      	pop	{r7, pc}
	...

08106f1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8106f1c:	b480      	push	{r7}
 8106f1e:	b083      	sub	sp, #12
 8106f20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8106f22:	4b0c      	ldr	r3, [pc, #48]	@ (8106f54 <prvResetNextTaskUnblockTime+0x38>)
 8106f24:	681b      	ldr	r3, [r3, #0]
 8106f26:	681b      	ldr	r3, [r3, #0]
 8106f28:	2b00      	cmp	r3, #0
 8106f2a:	d104      	bne.n	8106f36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8106f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8106f58 <prvResetNextTaskUnblockTime+0x3c>)
 8106f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8106f32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8106f34:	e008      	b.n	8106f48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8106f36:	4b07      	ldr	r3, [pc, #28]	@ (8106f54 <prvResetNextTaskUnblockTime+0x38>)
 8106f38:	681b      	ldr	r3, [r3, #0]
 8106f3a:	68db      	ldr	r3, [r3, #12]
 8106f3c:	68db      	ldr	r3, [r3, #12]
 8106f3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8106f40:	687b      	ldr	r3, [r7, #4]
 8106f42:	685b      	ldr	r3, [r3, #4]
 8106f44:	4a04      	ldr	r2, [pc, #16]	@ (8106f58 <prvResetNextTaskUnblockTime+0x3c>)
 8106f46:	6013      	str	r3, [r2, #0]
}
 8106f48:	bf00      	nop
 8106f4a:	370c      	adds	r7, #12
 8106f4c:	46bd      	mov	sp, r7
 8106f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f52:	4770      	bx	lr
 8106f54:	100049ec 	.word	0x100049ec
 8106f58:	10004a54 	.word	0x10004a54

08106f5c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8106f5c:	b480      	push	{r7}
 8106f5e:	b083      	sub	sp, #12
 8106f60:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8106f62:	4b05      	ldr	r3, [pc, #20]	@ (8106f78 <xTaskGetCurrentTaskHandle+0x1c>)
 8106f64:	681b      	ldr	r3, [r3, #0]
 8106f66:	607b      	str	r3, [r7, #4]

		return xReturn;
 8106f68:	687b      	ldr	r3, [r7, #4]
	}
 8106f6a:	4618      	mov	r0, r3
 8106f6c:	370c      	adds	r7, #12
 8106f6e:	46bd      	mov	sp, r7
 8106f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f74:	4770      	bx	lr
 8106f76:	bf00      	nop
 8106f78:	10004560 	.word	0x10004560

08106f7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8106f7c:	b480      	push	{r7}
 8106f7e:	b083      	sub	sp, #12
 8106f80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8106f82:	4b0b      	ldr	r3, [pc, #44]	@ (8106fb0 <xTaskGetSchedulerState+0x34>)
 8106f84:	681b      	ldr	r3, [r3, #0]
 8106f86:	2b00      	cmp	r3, #0
 8106f88:	d102      	bne.n	8106f90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8106f8a:	2301      	movs	r3, #1
 8106f8c:	607b      	str	r3, [r7, #4]
 8106f8e:	e008      	b.n	8106fa2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8106f90:	4b08      	ldr	r3, [pc, #32]	@ (8106fb4 <xTaskGetSchedulerState+0x38>)
 8106f92:	681b      	ldr	r3, [r3, #0]
 8106f94:	2b00      	cmp	r3, #0
 8106f96:	d102      	bne.n	8106f9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8106f98:	2302      	movs	r3, #2
 8106f9a:	607b      	str	r3, [r7, #4]
 8106f9c:	e001      	b.n	8106fa2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8106f9e:	2300      	movs	r3, #0
 8106fa0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8106fa2:	687b      	ldr	r3, [r7, #4]
	}
 8106fa4:	4618      	mov	r0, r3
 8106fa6:	370c      	adds	r7, #12
 8106fa8:	46bd      	mov	sp, r7
 8106faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106fae:	4770      	bx	lr
 8106fb0:	10004a40 	.word	0x10004a40
 8106fb4:	10004a5c 	.word	0x10004a5c

08106fb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8106fb8:	b580      	push	{r7, lr}
 8106fba:	b086      	sub	sp, #24
 8106fbc:	af00      	add	r7, sp, #0
 8106fbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8106fc0:	687b      	ldr	r3, [r7, #4]
 8106fc2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8106fc4:	2300      	movs	r3, #0
 8106fc6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8106fc8:	687b      	ldr	r3, [r7, #4]
 8106fca:	2b00      	cmp	r3, #0
 8106fcc:	d058      	beq.n	8107080 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8106fce:	4b2f      	ldr	r3, [pc, #188]	@ (810708c <xTaskPriorityDisinherit+0xd4>)
 8106fd0:	681b      	ldr	r3, [r3, #0]
 8106fd2:	693a      	ldr	r2, [r7, #16]
 8106fd4:	429a      	cmp	r2, r3
 8106fd6:	d00b      	beq.n	8106ff0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8106fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106fdc:	f383 8811 	msr	BASEPRI, r3
 8106fe0:	f3bf 8f6f 	isb	sy
 8106fe4:	f3bf 8f4f 	dsb	sy
 8106fe8:	60fb      	str	r3, [r7, #12]
}
 8106fea:	bf00      	nop
 8106fec:	bf00      	nop
 8106fee:	e7fd      	b.n	8106fec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8106ff0:	693b      	ldr	r3, [r7, #16]
 8106ff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106ff4:	2b00      	cmp	r3, #0
 8106ff6:	d10b      	bne.n	8107010 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8106ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106ffc:	f383 8811 	msr	BASEPRI, r3
 8107000:	f3bf 8f6f 	isb	sy
 8107004:	f3bf 8f4f 	dsb	sy
 8107008:	60bb      	str	r3, [r7, #8]
}
 810700a:	bf00      	nop
 810700c:	bf00      	nop
 810700e:	e7fd      	b.n	810700c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8107010:	693b      	ldr	r3, [r7, #16]
 8107012:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107014:	1e5a      	subs	r2, r3, #1
 8107016:	693b      	ldr	r3, [r7, #16]
 8107018:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 810701a:	693b      	ldr	r3, [r7, #16]
 810701c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810701e:	693b      	ldr	r3, [r7, #16]
 8107020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107022:	429a      	cmp	r2, r3
 8107024:	d02c      	beq.n	8107080 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8107026:	693b      	ldr	r3, [r7, #16]
 8107028:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810702a:	2b00      	cmp	r3, #0
 810702c:	d128      	bne.n	8107080 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810702e:	693b      	ldr	r3, [r7, #16]
 8107030:	3304      	adds	r3, #4
 8107032:	4618      	mov	r0, r3
 8107034:	f7fd fe5a 	bl	8104cec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8107038:	693b      	ldr	r3, [r7, #16]
 810703a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810703c:	693b      	ldr	r3, [r7, #16]
 810703e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8107040:	693b      	ldr	r3, [r7, #16]
 8107042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107044:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8107048:	693b      	ldr	r3, [r7, #16]
 810704a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 810704c:	693b      	ldr	r3, [r7, #16]
 810704e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107050:	4b0f      	ldr	r3, [pc, #60]	@ (8107090 <xTaskPriorityDisinherit+0xd8>)
 8107052:	681b      	ldr	r3, [r3, #0]
 8107054:	429a      	cmp	r2, r3
 8107056:	d903      	bls.n	8107060 <xTaskPriorityDisinherit+0xa8>
 8107058:	693b      	ldr	r3, [r7, #16]
 810705a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810705c:	4a0c      	ldr	r2, [pc, #48]	@ (8107090 <xTaskPriorityDisinherit+0xd8>)
 810705e:	6013      	str	r3, [r2, #0]
 8107060:	693b      	ldr	r3, [r7, #16]
 8107062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107064:	4613      	mov	r3, r2
 8107066:	009b      	lsls	r3, r3, #2
 8107068:	4413      	add	r3, r2
 810706a:	009b      	lsls	r3, r3, #2
 810706c:	4a09      	ldr	r2, [pc, #36]	@ (8107094 <xTaskPriorityDisinherit+0xdc>)
 810706e:	441a      	add	r2, r3
 8107070:	693b      	ldr	r3, [r7, #16]
 8107072:	3304      	adds	r3, #4
 8107074:	4619      	mov	r1, r3
 8107076:	4610      	mov	r0, r2
 8107078:	f7fd fddb 	bl	8104c32 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 810707c:	2301      	movs	r3, #1
 810707e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8107080:	697b      	ldr	r3, [r7, #20]
	}
 8107082:	4618      	mov	r0, r3
 8107084:	3718      	adds	r7, #24
 8107086:	46bd      	mov	sp, r7
 8107088:	bd80      	pop	{r7, pc}
 810708a:	bf00      	nop
 810708c:	10004560 	.word	0x10004560
 8107090:	10004a3c 	.word	0x10004a3c
 8107094:	10004564 	.word	0x10004564

08107098 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8107098:	b580      	push	{r7, lr}
 810709a:	b086      	sub	sp, #24
 810709c:	af00      	add	r7, sp, #0
 810709e:	60f8      	str	r0, [r7, #12]
 81070a0:	60b9      	str	r1, [r7, #8]
 81070a2:	607a      	str	r2, [r7, #4]
 81070a4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 81070a6:	f7fd ff7f 	bl	8104fa8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 81070aa:	4b29      	ldr	r3, [pc, #164]	@ (8107150 <xTaskNotifyWait+0xb8>)
 81070ac:	681b      	ldr	r3, [r3, #0]
 81070ae:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 81070b2:	b2db      	uxtb	r3, r3
 81070b4:	2b02      	cmp	r3, #2
 81070b6:	d01c      	beq.n	81070f2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 81070b8:	4b25      	ldr	r3, [pc, #148]	@ (8107150 <xTaskNotifyWait+0xb8>)
 81070ba:	681b      	ldr	r3, [r3, #0]
 81070bc:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 81070c0:	68fa      	ldr	r2, [r7, #12]
 81070c2:	43d2      	mvns	r2, r2
 81070c4:	400a      	ands	r2, r1
 81070c6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 81070ca:	4b21      	ldr	r3, [pc, #132]	@ (8107150 <xTaskNotifyWait+0xb8>)
 81070cc:	681b      	ldr	r3, [r3, #0]
 81070ce:	2201      	movs	r2, #1
 81070d0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 81070d4:	683b      	ldr	r3, [r7, #0]
 81070d6:	2b00      	cmp	r3, #0
 81070d8:	d00b      	beq.n	81070f2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 81070da:	2101      	movs	r1, #1
 81070dc:	6838      	ldr	r0, [r7, #0]
 81070de:	f000 f947 	bl	8107370 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 81070e2:	4b1c      	ldr	r3, [pc, #112]	@ (8107154 <xTaskNotifyWait+0xbc>)
 81070e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81070e8:	601a      	str	r2, [r3, #0]
 81070ea:	f3bf 8f4f 	dsb	sy
 81070ee:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 81070f2:	f7fd ff8b 	bl	810500c <vPortExitCritical>

		taskENTER_CRITICAL();
 81070f6:	f7fd ff57 	bl	8104fa8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 81070fa:	687b      	ldr	r3, [r7, #4]
 81070fc:	2b00      	cmp	r3, #0
 81070fe:	d005      	beq.n	810710c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8107100:	4b13      	ldr	r3, [pc, #76]	@ (8107150 <xTaskNotifyWait+0xb8>)
 8107102:	681b      	ldr	r3, [r3, #0]
 8107104:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8107108:	687b      	ldr	r3, [r7, #4]
 810710a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 810710c:	4b10      	ldr	r3, [pc, #64]	@ (8107150 <xTaskNotifyWait+0xb8>)
 810710e:	681b      	ldr	r3, [r3, #0]
 8107110:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8107114:	b2db      	uxtb	r3, r3
 8107116:	2b02      	cmp	r3, #2
 8107118:	d002      	beq.n	8107120 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 810711a:	2300      	movs	r3, #0
 810711c:	617b      	str	r3, [r7, #20]
 810711e:	e00a      	b.n	8107136 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8107120:	4b0b      	ldr	r3, [pc, #44]	@ (8107150 <xTaskNotifyWait+0xb8>)
 8107122:	681b      	ldr	r3, [r3, #0]
 8107124:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8107128:	68ba      	ldr	r2, [r7, #8]
 810712a:	43d2      	mvns	r2, r2
 810712c:	400a      	ands	r2, r1
 810712e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 8107132:	2301      	movs	r3, #1
 8107134:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8107136:	4b06      	ldr	r3, [pc, #24]	@ (8107150 <xTaskNotifyWait+0xb8>)
 8107138:	681b      	ldr	r3, [r3, #0]
 810713a:	2200      	movs	r2, #0
 810713c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8107140:	f7fd ff64 	bl	810500c <vPortExitCritical>

		return xReturn;
 8107144:	697b      	ldr	r3, [r7, #20]
	}
 8107146:	4618      	mov	r0, r3
 8107148:	3718      	adds	r7, #24
 810714a:	46bd      	mov	sp, r7
 810714c:	bd80      	pop	{r7, pc}
 810714e:	bf00      	nop
 8107150:	10004560 	.word	0x10004560
 8107154:	e000ed04 	.word	0xe000ed04

08107158 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8107158:	b580      	push	{r7, lr}
 810715a:	b08e      	sub	sp, #56	@ 0x38
 810715c:	af00      	add	r7, sp, #0
 810715e:	60f8      	str	r0, [r7, #12]
 8107160:	60b9      	str	r1, [r7, #8]
 8107162:	603b      	str	r3, [r7, #0]
 8107164:	4613      	mov	r3, r2
 8107166:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8107168:	2301      	movs	r3, #1
 810716a:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 810716c:	68fb      	ldr	r3, [r7, #12]
 810716e:	2b00      	cmp	r3, #0
 8107170:	d10b      	bne.n	810718a <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8107172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107176:	f383 8811 	msr	BASEPRI, r3
 810717a:	f3bf 8f6f 	isb	sy
 810717e:	f3bf 8f4f 	dsb	sy
 8107182:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8107184:	bf00      	nop
 8107186:	bf00      	nop
 8107188:	e7fd      	b.n	8107186 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810718a:	f7fd ffed 	bl	8105168 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 810718e:	68fb      	ldr	r3, [r7, #12]
 8107190:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8107192:	f3ef 8211 	mrs	r2, BASEPRI
 8107196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810719a:	f383 8811 	msr	BASEPRI, r3
 810719e:	f3bf 8f6f 	isb	sy
 81071a2:	f3bf 8f4f 	dsb	sy
 81071a6:	623a      	str	r2, [r7, #32]
 81071a8:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 81071aa:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 81071ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 81071ae:	683b      	ldr	r3, [r7, #0]
 81071b0:	2b00      	cmp	r3, #0
 81071b2:	d004      	beq.n	81071be <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 81071b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81071b6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 81071ba:	683b      	ldr	r3, [r7, #0]
 81071bc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 81071be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81071c0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 81071c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 81071c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81071ca:	2202      	movs	r2, #2
 81071cc:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 81071d0:	79fb      	ldrb	r3, [r7, #7]
 81071d2:	2b04      	cmp	r3, #4
 81071d4:	d82e      	bhi.n	8107234 <xTaskGenericNotifyFromISR+0xdc>
 81071d6:	a201      	add	r2, pc, #4	@ (adr r2, 81071dc <xTaskGenericNotifyFromISR+0x84>)
 81071d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81071dc:	08107259 	.word	0x08107259
 81071e0:	081071f1 	.word	0x081071f1
 81071e4:	08107203 	.word	0x08107203
 81071e8:	08107213 	.word	0x08107213
 81071ec:	0810721d 	.word	0x0810721d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 81071f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81071f2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 81071f6:	68bb      	ldr	r3, [r7, #8]
 81071f8:	431a      	orrs	r2, r3
 81071fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81071fc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8107200:	e02d      	b.n	810725e <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8107202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107204:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8107208:	1c5a      	adds	r2, r3, #1
 810720a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810720c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8107210:	e025      	b.n	810725e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8107212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107214:	68ba      	ldr	r2, [r7, #8]
 8107216:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 810721a:	e020      	b.n	810725e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 810721c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8107220:	2b02      	cmp	r3, #2
 8107222:	d004      	beq.n	810722e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8107224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107226:	68ba      	ldr	r2, [r7, #8]
 8107228:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 810722c:	e017      	b.n	810725e <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 810722e:	2300      	movs	r3, #0
 8107230:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8107232:	e014      	b.n	810725e <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8107234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107236:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810723a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810723e:	d00d      	beq.n	810725c <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8107240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107244:	f383 8811 	msr	BASEPRI, r3
 8107248:	f3bf 8f6f 	isb	sy
 810724c:	f3bf 8f4f 	dsb	sy
 8107250:	61bb      	str	r3, [r7, #24]
}
 8107252:	bf00      	nop
 8107254:	bf00      	nop
 8107256:	e7fd      	b.n	8107254 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8107258:	bf00      	nop
 810725a:	e000      	b.n	810725e <xTaskGenericNotifyFromISR+0x106>
					break;
 810725c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 810725e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8107262:	2b01      	cmp	r3, #1
 8107264:	d147      	bne.n	81072f6 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8107266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810726a:	2b00      	cmp	r3, #0
 810726c:	d00b      	beq.n	8107286 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 810726e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107272:	f383 8811 	msr	BASEPRI, r3
 8107276:	f3bf 8f6f 	isb	sy
 810727a:	f3bf 8f4f 	dsb	sy
 810727e:	617b      	str	r3, [r7, #20]
}
 8107280:	bf00      	nop
 8107282:	bf00      	nop
 8107284:	e7fd      	b.n	8107282 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8107286:	4b21      	ldr	r3, [pc, #132]	@ (810730c <xTaskGenericNotifyFromISR+0x1b4>)
 8107288:	681b      	ldr	r3, [r3, #0]
 810728a:	2b00      	cmp	r3, #0
 810728c:	d11d      	bne.n	81072ca <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810728e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107290:	3304      	adds	r3, #4
 8107292:	4618      	mov	r0, r3
 8107294:	f7fd fd2a 	bl	8104cec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8107298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810729a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810729c:	4b1c      	ldr	r3, [pc, #112]	@ (8107310 <xTaskGenericNotifyFromISR+0x1b8>)
 810729e:	681b      	ldr	r3, [r3, #0]
 81072a0:	429a      	cmp	r2, r3
 81072a2:	d903      	bls.n	81072ac <xTaskGenericNotifyFromISR+0x154>
 81072a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81072a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81072a8:	4a19      	ldr	r2, [pc, #100]	@ (8107310 <xTaskGenericNotifyFromISR+0x1b8>)
 81072aa:	6013      	str	r3, [r2, #0]
 81072ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81072ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81072b0:	4613      	mov	r3, r2
 81072b2:	009b      	lsls	r3, r3, #2
 81072b4:	4413      	add	r3, r2
 81072b6:	009b      	lsls	r3, r3, #2
 81072b8:	4a16      	ldr	r2, [pc, #88]	@ (8107314 <xTaskGenericNotifyFromISR+0x1bc>)
 81072ba:	441a      	add	r2, r3
 81072bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81072be:	3304      	adds	r3, #4
 81072c0:	4619      	mov	r1, r3
 81072c2:	4610      	mov	r0, r2
 81072c4:	f7fd fcb5 	bl	8104c32 <vListInsertEnd>
 81072c8:	e005      	b.n	81072d6 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 81072ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81072cc:	3318      	adds	r3, #24
 81072ce:	4619      	mov	r1, r3
 81072d0:	4811      	ldr	r0, [pc, #68]	@ (8107318 <xTaskGenericNotifyFromISR+0x1c0>)
 81072d2:	f7fd fcae 	bl	8104c32 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 81072d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81072d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81072da:	4b10      	ldr	r3, [pc, #64]	@ (810731c <xTaskGenericNotifyFromISR+0x1c4>)
 81072dc:	681b      	ldr	r3, [r3, #0]
 81072de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81072e0:	429a      	cmp	r2, r3
 81072e2:	d908      	bls.n	81072f6 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 81072e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81072e6:	2b00      	cmp	r3, #0
 81072e8:	d002      	beq.n	81072f0 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 81072ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81072ec:	2201      	movs	r2, #1
 81072ee:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 81072f0:	4b0b      	ldr	r3, [pc, #44]	@ (8107320 <xTaskGenericNotifyFromISR+0x1c8>)
 81072f2:	2201      	movs	r2, #1
 81072f4:	601a      	str	r2, [r3, #0]
 81072f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81072f8:	613b      	str	r3, [r7, #16]
	__asm volatile
 81072fa:	693b      	ldr	r3, [r7, #16]
 81072fc:	f383 8811 	msr	BASEPRI, r3
}
 8107300:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8107302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8107304:	4618      	mov	r0, r3
 8107306:	3738      	adds	r7, #56	@ 0x38
 8107308:	46bd      	mov	sp, r7
 810730a:	bd80      	pop	{r7, pc}
 810730c:	10004a5c 	.word	0x10004a5c
 8107310:	10004a3c 	.word	0x10004a3c
 8107314:	10004564 	.word	0x10004564
 8107318:	100049f4 	.word	0x100049f4
 810731c:	10004560 	.word	0x10004560
 8107320:	10004a48 	.word	0x10004a48

08107324 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8107324:	b580      	push	{r7, lr}
 8107326:	b084      	sub	sp, #16
 8107328:	af00      	add	r7, sp, #0
 810732a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 810732c:	687b      	ldr	r3, [r7, #4]
 810732e:	2b00      	cmp	r3, #0
 8107330:	d102      	bne.n	8107338 <xTaskNotifyStateClear+0x14>
 8107332:	4b0e      	ldr	r3, [pc, #56]	@ (810736c <xTaskNotifyStateClear+0x48>)
 8107334:	681b      	ldr	r3, [r3, #0]
 8107336:	e000      	b.n	810733a <xTaskNotifyStateClear+0x16>
 8107338:	687b      	ldr	r3, [r7, #4]
 810733a:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 810733c:	f7fd fe34 	bl	8104fa8 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8107340:	68bb      	ldr	r3, [r7, #8]
 8107342:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8107346:	b2db      	uxtb	r3, r3
 8107348:	2b02      	cmp	r3, #2
 810734a:	d106      	bne.n	810735a <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810734c:	68bb      	ldr	r3, [r7, #8]
 810734e:	2200      	movs	r2, #0
 8107350:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				xReturn = pdPASS;
 8107354:	2301      	movs	r3, #1
 8107356:	60fb      	str	r3, [r7, #12]
 8107358:	e001      	b.n	810735e <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 810735a:	2300      	movs	r3, #0
 810735c:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 810735e:	f7fd fe55 	bl	810500c <vPortExitCritical>

		return xReturn;
 8107362:	68fb      	ldr	r3, [r7, #12]
	}
 8107364:	4618      	mov	r0, r3
 8107366:	3710      	adds	r7, #16
 8107368:	46bd      	mov	sp, r7
 810736a:	bd80      	pop	{r7, pc}
 810736c:	10004560 	.word	0x10004560

08107370 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8107370:	b580      	push	{r7, lr}
 8107372:	b084      	sub	sp, #16
 8107374:	af00      	add	r7, sp, #0
 8107376:	6078      	str	r0, [r7, #4]
 8107378:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 810737a:	4b21      	ldr	r3, [pc, #132]	@ (8107400 <prvAddCurrentTaskToDelayedList+0x90>)
 810737c:	681b      	ldr	r3, [r3, #0]
 810737e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8107380:	4b20      	ldr	r3, [pc, #128]	@ (8107404 <prvAddCurrentTaskToDelayedList+0x94>)
 8107382:	681b      	ldr	r3, [r3, #0]
 8107384:	3304      	adds	r3, #4
 8107386:	4618      	mov	r0, r3
 8107388:	f7fd fcb0 	bl	8104cec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 810738c:	687b      	ldr	r3, [r7, #4]
 810738e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107392:	d10a      	bne.n	81073aa <prvAddCurrentTaskToDelayedList+0x3a>
 8107394:	683b      	ldr	r3, [r7, #0]
 8107396:	2b00      	cmp	r3, #0
 8107398:	d007      	beq.n	81073aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810739a:	4b1a      	ldr	r3, [pc, #104]	@ (8107404 <prvAddCurrentTaskToDelayedList+0x94>)
 810739c:	681b      	ldr	r3, [r3, #0]
 810739e:	3304      	adds	r3, #4
 81073a0:	4619      	mov	r1, r3
 81073a2:	4819      	ldr	r0, [pc, #100]	@ (8107408 <prvAddCurrentTaskToDelayedList+0x98>)
 81073a4:	f7fd fc45 	bl	8104c32 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 81073a8:	e026      	b.n	81073f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 81073aa:	68fa      	ldr	r2, [r7, #12]
 81073ac:	687b      	ldr	r3, [r7, #4]
 81073ae:	4413      	add	r3, r2
 81073b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 81073b2:	4b14      	ldr	r3, [pc, #80]	@ (8107404 <prvAddCurrentTaskToDelayedList+0x94>)
 81073b4:	681b      	ldr	r3, [r3, #0]
 81073b6:	68ba      	ldr	r2, [r7, #8]
 81073b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 81073ba:	68ba      	ldr	r2, [r7, #8]
 81073bc:	68fb      	ldr	r3, [r7, #12]
 81073be:	429a      	cmp	r2, r3
 81073c0:	d209      	bcs.n	81073d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81073c2:	4b12      	ldr	r3, [pc, #72]	@ (810740c <prvAddCurrentTaskToDelayedList+0x9c>)
 81073c4:	681a      	ldr	r2, [r3, #0]
 81073c6:	4b0f      	ldr	r3, [pc, #60]	@ (8107404 <prvAddCurrentTaskToDelayedList+0x94>)
 81073c8:	681b      	ldr	r3, [r3, #0]
 81073ca:	3304      	adds	r3, #4
 81073cc:	4619      	mov	r1, r3
 81073ce:	4610      	mov	r0, r2
 81073d0:	f7fd fc53 	bl	8104c7a <vListInsert>
}
 81073d4:	e010      	b.n	81073f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81073d6:	4b0e      	ldr	r3, [pc, #56]	@ (8107410 <prvAddCurrentTaskToDelayedList+0xa0>)
 81073d8:	681a      	ldr	r2, [r3, #0]
 81073da:	4b0a      	ldr	r3, [pc, #40]	@ (8107404 <prvAddCurrentTaskToDelayedList+0x94>)
 81073dc:	681b      	ldr	r3, [r3, #0]
 81073de:	3304      	adds	r3, #4
 81073e0:	4619      	mov	r1, r3
 81073e2:	4610      	mov	r0, r2
 81073e4:	f7fd fc49 	bl	8104c7a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 81073e8:	4b0a      	ldr	r3, [pc, #40]	@ (8107414 <prvAddCurrentTaskToDelayedList+0xa4>)
 81073ea:	681b      	ldr	r3, [r3, #0]
 81073ec:	68ba      	ldr	r2, [r7, #8]
 81073ee:	429a      	cmp	r2, r3
 81073f0:	d202      	bcs.n	81073f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 81073f2:	4a08      	ldr	r2, [pc, #32]	@ (8107414 <prvAddCurrentTaskToDelayedList+0xa4>)
 81073f4:	68bb      	ldr	r3, [r7, #8]
 81073f6:	6013      	str	r3, [r2, #0]
}
 81073f8:	bf00      	nop
 81073fa:	3710      	adds	r7, #16
 81073fc:	46bd      	mov	sp, r7
 81073fe:	bd80      	pop	{r7, pc}
 8107400:	10004a38 	.word	0x10004a38
 8107404:	10004560 	.word	0x10004560
 8107408:	10004a20 	.word	0x10004a20
 810740c:	100049f0 	.word	0x100049f0
 8107410:	100049ec 	.word	0x100049ec
 8107414:	10004a54 	.word	0x10004a54

08107418 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8107418:	b580      	push	{r7, lr}
 810741a:	b08a      	sub	sp, #40	@ 0x28
 810741c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 810741e:	2300      	movs	r3, #0
 8107420:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8107422:	f000 fb13 	bl	8107a4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8107426:	4b1d      	ldr	r3, [pc, #116]	@ (810749c <xTimerCreateTimerTask+0x84>)
 8107428:	681b      	ldr	r3, [r3, #0]
 810742a:	2b00      	cmp	r3, #0
 810742c:	d021      	beq.n	8107472 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 810742e:	2300      	movs	r3, #0
 8107430:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8107432:	2300      	movs	r3, #0
 8107434:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8107436:	1d3a      	adds	r2, r7, #4
 8107438:	f107 0108 	add.w	r1, r7, #8
 810743c:	f107 030c 	add.w	r3, r7, #12
 8107440:	4618      	mov	r0, r3
 8107442:	f7fd f9c1 	bl	81047c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8107446:	6879      	ldr	r1, [r7, #4]
 8107448:	68bb      	ldr	r3, [r7, #8]
 810744a:	68fa      	ldr	r2, [r7, #12]
 810744c:	9202      	str	r2, [sp, #8]
 810744e:	9301      	str	r3, [sp, #4]
 8107450:	2302      	movs	r3, #2
 8107452:	9300      	str	r3, [sp, #0]
 8107454:	2300      	movs	r3, #0
 8107456:	460a      	mov	r2, r1
 8107458:	4911      	ldr	r1, [pc, #68]	@ (81074a0 <xTimerCreateTimerTask+0x88>)
 810745a:	4812      	ldr	r0, [pc, #72]	@ (81074a4 <xTimerCreateTimerTask+0x8c>)
 810745c:	f7fe ff26 	bl	81062ac <xTaskCreateStatic>
 8107460:	4603      	mov	r3, r0
 8107462:	4a11      	ldr	r2, [pc, #68]	@ (81074a8 <xTimerCreateTimerTask+0x90>)
 8107464:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8107466:	4b10      	ldr	r3, [pc, #64]	@ (81074a8 <xTimerCreateTimerTask+0x90>)
 8107468:	681b      	ldr	r3, [r3, #0]
 810746a:	2b00      	cmp	r3, #0
 810746c:	d001      	beq.n	8107472 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 810746e:	2301      	movs	r3, #1
 8107470:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8107472:	697b      	ldr	r3, [r7, #20]
 8107474:	2b00      	cmp	r3, #0
 8107476:	d10b      	bne.n	8107490 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8107478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810747c:	f383 8811 	msr	BASEPRI, r3
 8107480:	f3bf 8f6f 	isb	sy
 8107484:	f3bf 8f4f 	dsb	sy
 8107488:	613b      	str	r3, [r7, #16]
}
 810748a:	bf00      	nop
 810748c:	bf00      	nop
 810748e:	e7fd      	b.n	810748c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8107490:	697b      	ldr	r3, [r7, #20]
}
 8107492:	4618      	mov	r0, r3
 8107494:	3718      	adds	r7, #24
 8107496:	46bd      	mov	sp, r7
 8107498:	bd80      	pop	{r7, pc}
 810749a:	bf00      	nop
 810749c:	10004a90 	.word	0x10004a90
 81074a0:	08108124 	.word	0x08108124
 81074a4:	081075e5 	.word	0x081075e5
 81074a8:	10004a94 	.word	0x10004a94

081074ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 81074ac:	b580      	push	{r7, lr}
 81074ae:	b08a      	sub	sp, #40	@ 0x28
 81074b0:	af00      	add	r7, sp, #0
 81074b2:	60f8      	str	r0, [r7, #12]
 81074b4:	60b9      	str	r1, [r7, #8]
 81074b6:	607a      	str	r2, [r7, #4]
 81074b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 81074ba:	2300      	movs	r3, #0
 81074bc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 81074be:	68fb      	ldr	r3, [r7, #12]
 81074c0:	2b00      	cmp	r3, #0
 81074c2:	d10b      	bne.n	81074dc <xTimerGenericCommand+0x30>
	__asm volatile
 81074c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81074c8:	f383 8811 	msr	BASEPRI, r3
 81074cc:	f3bf 8f6f 	isb	sy
 81074d0:	f3bf 8f4f 	dsb	sy
 81074d4:	623b      	str	r3, [r7, #32]
}
 81074d6:	bf00      	nop
 81074d8:	bf00      	nop
 81074da:	e7fd      	b.n	81074d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 81074dc:	4b19      	ldr	r3, [pc, #100]	@ (8107544 <xTimerGenericCommand+0x98>)
 81074de:	681b      	ldr	r3, [r3, #0]
 81074e0:	2b00      	cmp	r3, #0
 81074e2:	d02a      	beq.n	810753a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 81074e4:	68bb      	ldr	r3, [r7, #8]
 81074e6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 81074e8:	687b      	ldr	r3, [r7, #4]
 81074ea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 81074ec:	68fb      	ldr	r3, [r7, #12]
 81074ee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 81074f0:	68bb      	ldr	r3, [r7, #8]
 81074f2:	2b05      	cmp	r3, #5
 81074f4:	dc18      	bgt.n	8107528 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 81074f6:	f7ff fd41 	bl	8106f7c <xTaskGetSchedulerState>
 81074fa:	4603      	mov	r3, r0
 81074fc:	2b02      	cmp	r3, #2
 81074fe:	d109      	bne.n	8107514 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8107500:	4b10      	ldr	r3, [pc, #64]	@ (8107544 <xTimerGenericCommand+0x98>)
 8107502:	6818      	ldr	r0, [r3, #0]
 8107504:	f107 0110 	add.w	r1, r7, #16
 8107508:	2300      	movs	r3, #0
 810750a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810750c:	f7fd ffb4 	bl	8105478 <xQueueGenericSend>
 8107510:	6278      	str	r0, [r7, #36]	@ 0x24
 8107512:	e012      	b.n	810753a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8107514:	4b0b      	ldr	r3, [pc, #44]	@ (8107544 <xTimerGenericCommand+0x98>)
 8107516:	6818      	ldr	r0, [r3, #0]
 8107518:	f107 0110 	add.w	r1, r7, #16
 810751c:	2300      	movs	r3, #0
 810751e:	2200      	movs	r2, #0
 8107520:	f7fd ffaa 	bl	8105478 <xQueueGenericSend>
 8107524:	6278      	str	r0, [r7, #36]	@ 0x24
 8107526:	e008      	b.n	810753a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8107528:	4b06      	ldr	r3, [pc, #24]	@ (8107544 <xTimerGenericCommand+0x98>)
 810752a:	6818      	ldr	r0, [r3, #0]
 810752c:	f107 0110 	add.w	r1, r7, #16
 8107530:	2300      	movs	r3, #0
 8107532:	683a      	ldr	r2, [r7, #0]
 8107534:	f7fe f8a2 	bl	810567c <xQueueGenericSendFromISR>
 8107538:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 810753a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 810753c:	4618      	mov	r0, r3
 810753e:	3728      	adds	r7, #40	@ 0x28
 8107540:	46bd      	mov	sp, r7
 8107542:	bd80      	pop	{r7, pc}
 8107544:	10004a90 	.word	0x10004a90

08107548 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8107548:	b580      	push	{r7, lr}
 810754a:	b088      	sub	sp, #32
 810754c:	af02      	add	r7, sp, #8
 810754e:	6078      	str	r0, [r7, #4]
 8107550:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107552:	4b23      	ldr	r3, [pc, #140]	@ (81075e0 <prvProcessExpiredTimer+0x98>)
 8107554:	681b      	ldr	r3, [r3, #0]
 8107556:	68db      	ldr	r3, [r3, #12]
 8107558:	68db      	ldr	r3, [r3, #12]
 810755a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810755c:	697b      	ldr	r3, [r7, #20]
 810755e:	3304      	adds	r3, #4
 8107560:	4618      	mov	r0, r3
 8107562:	f7fd fbc3 	bl	8104cec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8107566:	697b      	ldr	r3, [r7, #20]
 8107568:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810756c:	f003 0304 	and.w	r3, r3, #4
 8107570:	2b00      	cmp	r3, #0
 8107572:	d023      	beq.n	81075bc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8107574:	697b      	ldr	r3, [r7, #20]
 8107576:	699a      	ldr	r2, [r3, #24]
 8107578:	687b      	ldr	r3, [r7, #4]
 810757a:	18d1      	adds	r1, r2, r3
 810757c:	687b      	ldr	r3, [r7, #4]
 810757e:	683a      	ldr	r2, [r7, #0]
 8107580:	6978      	ldr	r0, [r7, #20]
 8107582:	f000 f8d5 	bl	8107730 <prvInsertTimerInActiveList>
 8107586:	4603      	mov	r3, r0
 8107588:	2b00      	cmp	r3, #0
 810758a:	d020      	beq.n	81075ce <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810758c:	2300      	movs	r3, #0
 810758e:	9300      	str	r3, [sp, #0]
 8107590:	2300      	movs	r3, #0
 8107592:	687a      	ldr	r2, [r7, #4]
 8107594:	2100      	movs	r1, #0
 8107596:	6978      	ldr	r0, [r7, #20]
 8107598:	f7ff ff88 	bl	81074ac <xTimerGenericCommand>
 810759c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 810759e:	693b      	ldr	r3, [r7, #16]
 81075a0:	2b00      	cmp	r3, #0
 81075a2:	d114      	bne.n	81075ce <prvProcessExpiredTimer+0x86>
	__asm volatile
 81075a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81075a8:	f383 8811 	msr	BASEPRI, r3
 81075ac:	f3bf 8f6f 	isb	sy
 81075b0:	f3bf 8f4f 	dsb	sy
 81075b4:	60fb      	str	r3, [r7, #12]
}
 81075b6:	bf00      	nop
 81075b8:	bf00      	nop
 81075ba:	e7fd      	b.n	81075b8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 81075bc:	697b      	ldr	r3, [r7, #20]
 81075be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81075c2:	f023 0301 	bic.w	r3, r3, #1
 81075c6:	b2da      	uxtb	r2, r3
 81075c8:	697b      	ldr	r3, [r7, #20]
 81075ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81075ce:	697b      	ldr	r3, [r7, #20]
 81075d0:	6a1b      	ldr	r3, [r3, #32]
 81075d2:	6978      	ldr	r0, [r7, #20]
 81075d4:	4798      	blx	r3
}
 81075d6:	bf00      	nop
 81075d8:	3718      	adds	r7, #24
 81075da:	46bd      	mov	sp, r7
 81075dc:	bd80      	pop	{r7, pc}
 81075de:	bf00      	nop
 81075e0:	10004a88 	.word	0x10004a88

081075e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 81075e4:	b580      	push	{r7, lr}
 81075e6:	b084      	sub	sp, #16
 81075e8:	af00      	add	r7, sp, #0
 81075ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 81075ec:	f107 0308 	add.w	r3, r7, #8
 81075f0:	4618      	mov	r0, r3
 81075f2:	f000 f859 	bl	81076a8 <prvGetNextExpireTime>
 81075f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 81075f8:	68bb      	ldr	r3, [r7, #8]
 81075fa:	4619      	mov	r1, r3
 81075fc:	68f8      	ldr	r0, [r7, #12]
 81075fe:	f000 f805 	bl	810760c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8107602:	f000 f8d7 	bl	81077b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8107606:	bf00      	nop
 8107608:	e7f0      	b.n	81075ec <prvTimerTask+0x8>
	...

0810760c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 810760c:	b580      	push	{r7, lr}
 810760e:	b084      	sub	sp, #16
 8107610:	af00      	add	r7, sp, #0
 8107612:	6078      	str	r0, [r7, #4]
 8107614:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8107616:	f7ff f8ad 	bl	8106774 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810761a:	f107 0308 	add.w	r3, r7, #8
 810761e:	4618      	mov	r0, r3
 8107620:	f000 f866 	bl	81076f0 <prvSampleTimeNow>
 8107624:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8107626:	68bb      	ldr	r3, [r7, #8]
 8107628:	2b00      	cmp	r3, #0
 810762a:	d130      	bne.n	810768e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 810762c:	683b      	ldr	r3, [r7, #0]
 810762e:	2b00      	cmp	r3, #0
 8107630:	d10a      	bne.n	8107648 <prvProcessTimerOrBlockTask+0x3c>
 8107632:	687a      	ldr	r2, [r7, #4]
 8107634:	68fb      	ldr	r3, [r7, #12]
 8107636:	429a      	cmp	r2, r3
 8107638:	d806      	bhi.n	8107648 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 810763a:	f7ff f8a9 	bl	8106790 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 810763e:	68f9      	ldr	r1, [r7, #12]
 8107640:	6878      	ldr	r0, [r7, #4]
 8107642:	f7ff ff81 	bl	8107548 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8107646:	e024      	b.n	8107692 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8107648:	683b      	ldr	r3, [r7, #0]
 810764a:	2b00      	cmp	r3, #0
 810764c:	d008      	beq.n	8107660 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 810764e:	4b13      	ldr	r3, [pc, #76]	@ (810769c <prvProcessTimerOrBlockTask+0x90>)
 8107650:	681b      	ldr	r3, [r3, #0]
 8107652:	681b      	ldr	r3, [r3, #0]
 8107654:	2b00      	cmp	r3, #0
 8107656:	d101      	bne.n	810765c <prvProcessTimerOrBlockTask+0x50>
 8107658:	2301      	movs	r3, #1
 810765a:	e000      	b.n	810765e <prvProcessTimerOrBlockTask+0x52>
 810765c:	2300      	movs	r3, #0
 810765e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8107660:	4b0f      	ldr	r3, [pc, #60]	@ (81076a0 <prvProcessTimerOrBlockTask+0x94>)
 8107662:	6818      	ldr	r0, [r3, #0]
 8107664:	687a      	ldr	r2, [r7, #4]
 8107666:	68fb      	ldr	r3, [r7, #12]
 8107668:	1ad3      	subs	r3, r2, r3
 810766a:	683a      	ldr	r2, [r7, #0]
 810766c:	4619      	mov	r1, r3
 810766e:	f7fe fb4f 	bl	8105d10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8107672:	f7ff f88d 	bl	8106790 <xTaskResumeAll>
 8107676:	4603      	mov	r3, r0
 8107678:	2b00      	cmp	r3, #0
 810767a:	d10a      	bne.n	8107692 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 810767c:	4b09      	ldr	r3, [pc, #36]	@ (81076a4 <prvProcessTimerOrBlockTask+0x98>)
 810767e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8107682:	601a      	str	r2, [r3, #0]
 8107684:	f3bf 8f4f 	dsb	sy
 8107688:	f3bf 8f6f 	isb	sy
}
 810768c:	e001      	b.n	8107692 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 810768e:	f7ff f87f 	bl	8106790 <xTaskResumeAll>
}
 8107692:	bf00      	nop
 8107694:	3710      	adds	r7, #16
 8107696:	46bd      	mov	sp, r7
 8107698:	bd80      	pop	{r7, pc}
 810769a:	bf00      	nop
 810769c:	10004a8c 	.word	0x10004a8c
 81076a0:	10004a90 	.word	0x10004a90
 81076a4:	e000ed04 	.word	0xe000ed04

081076a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 81076a8:	b480      	push	{r7}
 81076aa:	b085      	sub	sp, #20
 81076ac:	af00      	add	r7, sp, #0
 81076ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 81076b0:	4b0e      	ldr	r3, [pc, #56]	@ (81076ec <prvGetNextExpireTime+0x44>)
 81076b2:	681b      	ldr	r3, [r3, #0]
 81076b4:	681b      	ldr	r3, [r3, #0]
 81076b6:	2b00      	cmp	r3, #0
 81076b8:	d101      	bne.n	81076be <prvGetNextExpireTime+0x16>
 81076ba:	2201      	movs	r2, #1
 81076bc:	e000      	b.n	81076c0 <prvGetNextExpireTime+0x18>
 81076be:	2200      	movs	r2, #0
 81076c0:	687b      	ldr	r3, [r7, #4]
 81076c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 81076c4:	687b      	ldr	r3, [r7, #4]
 81076c6:	681b      	ldr	r3, [r3, #0]
 81076c8:	2b00      	cmp	r3, #0
 81076ca:	d105      	bne.n	81076d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 81076cc:	4b07      	ldr	r3, [pc, #28]	@ (81076ec <prvGetNextExpireTime+0x44>)
 81076ce:	681b      	ldr	r3, [r3, #0]
 81076d0:	68db      	ldr	r3, [r3, #12]
 81076d2:	681b      	ldr	r3, [r3, #0]
 81076d4:	60fb      	str	r3, [r7, #12]
 81076d6:	e001      	b.n	81076dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 81076d8:	2300      	movs	r3, #0
 81076da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 81076dc:	68fb      	ldr	r3, [r7, #12]
}
 81076de:	4618      	mov	r0, r3
 81076e0:	3714      	adds	r7, #20
 81076e2:	46bd      	mov	sp, r7
 81076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81076e8:	4770      	bx	lr
 81076ea:	bf00      	nop
 81076ec:	10004a88 	.word	0x10004a88

081076f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 81076f0:	b580      	push	{r7, lr}
 81076f2:	b084      	sub	sp, #16
 81076f4:	af00      	add	r7, sp, #0
 81076f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 81076f8:	f7ff f8e8 	bl	81068cc <xTaskGetTickCount>
 81076fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 81076fe:	4b0b      	ldr	r3, [pc, #44]	@ (810772c <prvSampleTimeNow+0x3c>)
 8107700:	681b      	ldr	r3, [r3, #0]
 8107702:	68fa      	ldr	r2, [r7, #12]
 8107704:	429a      	cmp	r2, r3
 8107706:	d205      	bcs.n	8107714 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8107708:	f000 f93a 	bl	8107980 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 810770c:	687b      	ldr	r3, [r7, #4]
 810770e:	2201      	movs	r2, #1
 8107710:	601a      	str	r2, [r3, #0]
 8107712:	e002      	b.n	810771a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8107714:	687b      	ldr	r3, [r7, #4]
 8107716:	2200      	movs	r2, #0
 8107718:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 810771a:	4a04      	ldr	r2, [pc, #16]	@ (810772c <prvSampleTimeNow+0x3c>)
 810771c:	68fb      	ldr	r3, [r7, #12]
 810771e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8107720:	68fb      	ldr	r3, [r7, #12]
}
 8107722:	4618      	mov	r0, r3
 8107724:	3710      	adds	r7, #16
 8107726:	46bd      	mov	sp, r7
 8107728:	bd80      	pop	{r7, pc}
 810772a:	bf00      	nop
 810772c:	10004a98 	.word	0x10004a98

08107730 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8107730:	b580      	push	{r7, lr}
 8107732:	b086      	sub	sp, #24
 8107734:	af00      	add	r7, sp, #0
 8107736:	60f8      	str	r0, [r7, #12]
 8107738:	60b9      	str	r1, [r7, #8]
 810773a:	607a      	str	r2, [r7, #4]
 810773c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 810773e:	2300      	movs	r3, #0
 8107740:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8107742:	68fb      	ldr	r3, [r7, #12]
 8107744:	68ba      	ldr	r2, [r7, #8]
 8107746:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8107748:	68fb      	ldr	r3, [r7, #12]
 810774a:	68fa      	ldr	r2, [r7, #12]
 810774c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 810774e:	68ba      	ldr	r2, [r7, #8]
 8107750:	687b      	ldr	r3, [r7, #4]
 8107752:	429a      	cmp	r2, r3
 8107754:	d812      	bhi.n	810777c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8107756:	687a      	ldr	r2, [r7, #4]
 8107758:	683b      	ldr	r3, [r7, #0]
 810775a:	1ad2      	subs	r2, r2, r3
 810775c:	68fb      	ldr	r3, [r7, #12]
 810775e:	699b      	ldr	r3, [r3, #24]
 8107760:	429a      	cmp	r2, r3
 8107762:	d302      	bcc.n	810776a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8107764:	2301      	movs	r3, #1
 8107766:	617b      	str	r3, [r7, #20]
 8107768:	e01b      	b.n	81077a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 810776a:	4b10      	ldr	r3, [pc, #64]	@ (81077ac <prvInsertTimerInActiveList+0x7c>)
 810776c:	681a      	ldr	r2, [r3, #0]
 810776e:	68fb      	ldr	r3, [r7, #12]
 8107770:	3304      	adds	r3, #4
 8107772:	4619      	mov	r1, r3
 8107774:	4610      	mov	r0, r2
 8107776:	f7fd fa80 	bl	8104c7a <vListInsert>
 810777a:	e012      	b.n	81077a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 810777c:	687a      	ldr	r2, [r7, #4]
 810777e:	683b      	ldr	r3, [r7, #0]
 8107780:	429a      	cmp	r2, r3
 8107782:	d206      	bcs.n	8107792 <prvInsertTimerInActiveList+0x62>
 8107784:	68ba      	ldr	r2, [r7, #8]
 8107786:	683b      	ldr	r3, [r7, #0]
 8107788:	429a      	cmp	r2, r3
 810778a:	d302      	bcc.n	8107792 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 810778c:	2301      	movs	r3, #1
 810778e:	617b      	str	r3, [r7, #20]
 8107790:	e007      	b.n	81077a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8107792:	4b07      	ldr	r3, [pc, #28]	@ (81077b0 <prvInsertTimerInActiveList+0x80>)
 8107794:	681a      	ldr	r2, [r3, #0]
 8107796:	68fb      	ldr	r3, [r7, #12]
 8107798:	3304      	adds	r3, #4
 810779a:	4619      	mov	r1, r3
 810779c:	4610      	mov	r0, r2
 810779e:	f7fd fa6c 	bl	8104c7a <vListInsert>
		}
	}

	return xProcessTimerNow;
 81077a2:	697b      	ldr	r3, [r7, #20]
}
 81077a4:	4618      	mov	r0, r3
 81077a6:	3718      	adds	r7, #24
 81077a8:	46bd      	mov	sp, r7
 81077aa:	bd80      	pop	{r7, pc}
 81077ac:	10004a8c 	.word	0x10004a8c
 81077b0:	10004a88 	.word	0x10004a88

081077b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 81077b4:	b580      	push	{r7, lr}
 81077b6:	b08e      	sub	sp, #56	@ 0x38
 81077b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 81077ba:	e0ce      	b.n	810795a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 81077bc:	687b      	ldr	r3, [r7, #4]
 81077be:	2b00      	cmp	r3, #0
 81077c0:	da19      	bge.n	81077f6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 81077c2:	1d3b      	adds	r3, r7, #4
 81077c4:	3304      	adds	r3, #4
 81077c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 81077c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81077ca:	2b00      	cmp	r3, #0
 81077cc:	d10b      	bne.n	81077e6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 81077ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81077d2:	f383 8811 	msr	BASEPRI, r3
 81077d6:	f3bf 8f6f 	isb	sy
 81077da:	f3bf 8f4f 	dsb	sy
 81077de:	61fb      	str	r3, [r7, #28]
}
 81077e0:	bf00      	nop
 81077e2:	bf00      	nop
 81077e4:	e7fd      	b.n	81077e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 81077e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81077e8:	681b      	ldr	r3, [r3, #0]
 81077ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81077ec:	6850      	ldr	r0, [r2, #4]
 81077ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81077f0:	6892      	ldr	r2, [r2, #8]
 81077f2:	4611      	mov	r1, r2
 81077f4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 81077f6:	687b      	ldr	r3, [r7, #4]
 81077f8:	2b00      	cmp	r3, #0
 81077fa:	f2c0 80ae 	blt.w	810795a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 81077fe:	68fb      	ldr	r3, [r7, #12]
 8107800:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8107802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107804:	695b      	ldr	r3, [r3, #20]
 8107806:	2b00      	cmp	r3, #0
 8107808:	d004      	beq.n	8107814 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810780a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810780c:	3304      	adds	r3, #4
 810780e:	4618      	mov	r0, r3
 8107810:	f7fd fa6c 	bl	8104cec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8107814:	463b      	mov	r3, r7
 8107816:	4618      	mov	r0, r3
 8107818:	f7ff ff6a 	bl	81076f0 <prvSampleTimeNow>
 810781c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 810781e:	687b      	ldr	r3, [r7, #4]
 8107820:	2b09      	cmp	r3, #9
 8107822:	f200 8097 	bhi.w	8107954 <prvProcessReceivedCommands+0x1a0>
 8107826:	a201      	add	r2, pc, #4	@ (adr r2, 810782c <prvProcessReceivedCommands+0x78>)
 8107828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810782c:	08107855 	.word	0x08107855
 8107830:	08107855 	.word	0x08107855
 8107834:	08107855 	.word	0x08107855
 8107838:	081078cb 	.word	0x081078cb
 810783c:	081078df 	.word	0x081078df
 8107840:	0810792b 	.word	0x0810792b
 8107844:	08107855 	.word	0x08107855
 8107848:	08107855 	.word	0x08107855
 810784c:	081078cb 	.word	0x081078cb
 8107850:	081078df 	.word	0x081078df
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8107854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107856:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810785a:	f043 0301 	orr.w	r3, r3, #1
 810785e:	b2da      	uxtb	r2, r3
 8107860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107862:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8107866:	68ba      	ldr	r2, [r7, #8]
 8107868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810786a:	699b      	ldr	r3, [r3, #24]
 810786c:	18d1      	adds	r1, r2, r3
 810786e:	68bb      	ldr	r3, [r7, #8]
 8107870:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8107872:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8107874:	f7ff ff5c 	bl	8107730 <prvInsertTimerInActiveList>
 8107878:	4603      	mov	r3, r0
 810787a:	2b00      	cmp	r3, #0
 810787c:	d06c      	beq.n	8107958 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810787e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107880:	6a1b      	ldr	r3, [r3, #32]
 8107882:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8107884:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8107886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107888:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810788c:	f003 0304 	and.w	r3, r3, #4
 8107890:	2b00      	cmp	r3, #0
 8107892:	d061      	beq.n	8107958 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8107894:	68ba      	ldr	r2, [r7, #8]
 8107896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107898:	699b      	ldr	r3, [r3, #24]
 810789a:	441a      	add	r2, r3
 810789c:	2300      	movs	r3, #0
 810789e:	9300      	str	r3, [sp, #0]
 81078a0:	2300      	movs	r3, #0
 81078a2:	2100      	movs	r1, #0
 81078a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81078a6:	f7ff fe01 	bl	81074ac <xTimerGenericCommand>
 81078aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 81078ac:	6a3b      	ldr	r3, [r7, #32]
 81078ae:	2b00      	cmp	r3, #0
 81078b0:	d152      	bne.n	8107958 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 81078b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81078b6:	f383 8811 	msr	BASEPRI, r3
 81078ba:	f3bf 8f6f 	isb	sy
 81078be:	f3bf 8f4f 	dsb	sy
 81078c2:	61bb      	str	r3, [r7, #24]
}
 81078c4:	bf00      	nop
 81078c6:	bf00      	nop
 81078c8:	e7fd      	b.n	81078c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 81078ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81078cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81078d0:	f023 0301 	bic.w	r3, r3, #1
 81078d4:	b2da      	uxtb	r2, r3
 81078d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81078d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 81078dc:	e03d      	b.n	810795a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 81078de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81078e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81078e4:	f043 0301 	orr.w	r3, r3, #1
 81078e8:	b2da      	uxtb	r2, r3
 81078ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81078ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 81078f0:	68ba      	ldr	r2, [r7, #8]
 81078f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81078f4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 81078f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81078f8:	699b      	ldr	r3, [r3, #24]
 81078fa:	2b00      	cmp	r3, #0
 81078fc:	d10b      	bne.n	8107916 <prvProcessReceivedCommands+0x162>
	__asm volatile
 81078fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107902:	f383 8811 	msr	BASEPRI, r3
 8107906:	f3bf 8f6f 	isb	sy
 810790a:	f3bf 8f4f 	dsb	sy
 810790e:	617b      	str	r3, [r7, #20]
}
 8107910:	bf00      	nop
 8107912:	bf00      	nop
 8107914:	e7fd      	b.n	8107912 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8107916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107918:	699a      	ldr	r2, [r3, #24]
 810791a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810791c:	18d1      	adds	r1, r2, r3
 810791e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107920:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8107922:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8107924:	f7ff ff04 	bl	8107730 <prvInsertTimerInActiveList>
					break;
 8107928:	e017      	b.n	810795a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 810792a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810792c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8107930:	f003 0302 	and.w	r3, r3, #2
 8107934:	2b00      	cmp	r3, #0
 8107936:	d103      	bne.n	8107940 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8107938:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810793a:	f7fd f82d 	bl	8104998 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 810793e:	e00c      	b.n	810795a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8107940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107942:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8107946:	f023 0301 	bic.w	r3, r3, #1
 810794a:	b2da      	uxtb	r2, r3
 810794c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810794e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8107952:	e002      	b.n	810795a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8107954:	bf00      	nop
 8107956:	e000      	b.n	810795a <prvProcessReceivedCommands+0x1a6>
					break;
 8107958:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810795a:	4b08      	ldr	r3, [pc, #32]	@ (810797c <prvProcessReceivedCommands+0x1c8>)
 810795c:	681b      	ldr	r3, [r3, #0]
 810795e:	1d39      	adds	r1, r7, #4
 8107960:	2200      	movs	r2, #0
 8107962:	4618      	mov	r0, r3
 8107964:	f7fd ffb8 	bl	81058d8 <xQueueReceive>
 8107968:	4603      	mov	r3, r0
 810796a:	2b00      	cmp	r3, #0
 810796c:	f47f af26 	bne.w	81077bc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8107970:	bf00      	nop
 8107972:	bf00      	nop
 8107974:	3730      	adds	r7, #48	@ 0x30
 8107976:	46bd      	mov	sp, r7
 8107978:	bd80      	pop	{r7, pc}
 810797a:	bf00      	nop
 810797c:	10004a90 	.word	0x10004a90

08107980 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8107980:	b580      	push	{r7, lr}
 8107982:	b088      	sub	sp, #32
 8107984:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8107986:	e049      	b.n	8107a1c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8107988:	4b2e      	ldr	r3, [pc, #184]	@ (8107a44 <prvSwitchTimerLists+0xc4>)
 810798a:	681b      	ldr	r3, [r3, #0]
 810798c:	68db      	ldr	r3, [r3, #12]
 810798e:	681b      	ldr	r3, [r3, #0]
 8107990:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107992:	4b2c      	ldr	r3, [pc, #176]	@ (8107a44 <prvSwitchTimerLists+0xc4>)
 8107994:	681b      	ldr	r3, [r3, #0]
 8107996:	68db      	ldr	r3, [r3, #12]
 8107998:	68db      	ldr	r3, [r3, #12]
 810799a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810799c:	68fb      	ldr	r3, [r7, #12]
 810799e:	3304      	adds	r3, #4
 81079a0:	4618      	mov	r0, r3
 81079a2:	f7fd f9a3 	bl	8104cec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81079a6:	68fb      	ldr	r3, [r7, #12]
 81079a8:	6a1b      	ldr	r3, [r3, #32]
 81079aa:	68f8      	ldr	r0, [r7, #12]
 81079ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81079ae:	68fb      	ldr	r3, [r7, #12]
 81079b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81079b4:	f003 0304 	and.w	r3, r3, #4
 81079b8:	2b00      	cmp	r3, #0
 81079ba:	d02f      	beq.n	8107a1c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 81079bc:	68fb      	ldr	r3, [r7, #12]
 81079be:	699b      	ldr	r3, [r3, #24]
 81079c0:	693a      	ldr	r2, [r7, #16]
 81079c2:	4413      	add	r3, r2
 81079c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 81079c6:	68ba      	ldr	r2, [r7, #8]
 81079c8:	693b      	ldr	r3, [r7, #16]
 81079ca:	429a      	cmp	r2, r3
 81079cc:	d90e      	bls.n	81079ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 81079ce:	68fb      	ldr	r3, [r7, #12]
 81079d0:	68ba      	ldr	r2, [r7, #8]
 81079d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 81079d4:	68fb      	ldr	r3, [r7, #12]
 81079d6:	68fa      	ldr	r2, [r7, #12]
 81079d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 81079da:	4b1a      	ldr	r3, [pc, #104]	@ (8107a44 <prvSwitchTimerLists+0xc4>)
 81079dc:	681a      	ldr	r2, [r3, #0]
 81079de:	68fb      	ldr	r3, [r7, #12]
 81079e0:	3304      	adds	r3, #4
 81079e2:	4619      	mov	r1, r3
 81079e4:	4610      	mov	r0, r2
 81079e6:	f7fd f948 	bl	8104c7a <vListInsert>
 81079ea:	e017      	b.n	8107a1c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 81079ec:	2300      	movs	r3, #0
 81079ee:	9300      	str	r3, [sp, #0]
 81079f0:	2300      	movs	r3, #0
 81079f2:	693a      	ldr	r2, [r7, #16]
 81079f4:	2100      	movs	r1, #0
 81079f6:	68f8      	ldr	r0, [r7, #12]
 81079f8:	f7ff fd58 	bl	81074ac <xTimerGenericCommand>
 81079fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 81079fe:	687b      	ldr	r3, [r7, #4]
 8107a00:	2b00      	cmp	r3, #0
 8107a02:	d10b      	bne.n	8107a1c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8107a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107a08:	f383 8811 	msr	BASEPRI, r3
 8107a0c:	f3bf 8f6f 	isb	sy
 8107a10:	f3bf 8f4f 	dsb	sy
 8107a14:	603b      	str	r3, [r7, #0]
}
 8107a16:	bf00      	nop
 8107a18:	bf00      	nop
 8107a1a:	e7fd      	b.n	8107a18 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8107a1c:	4b09      	ldr	r3, [pc, #36]	@ (8107a44 <prvSwitchTimerLists+0xc4>)
 8107a1e:	681b      	ldr	r3, [r3, #0]
 8107a20:	681b      	ldr	r3, [r3, #0]
 8107a22:	2b00      	cmp	r3, #0
 8107a24:	d1b0      	bne.n	8107988 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8107a26:	4b07      	ldr	r3, [pc, #28]	@ (8107a44 <prvSwitchTimerLists+0xc4>)
 8107a28:	681b      	ldr	r3, [r3, #0]
 8107a2a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8107a2c:	4b06      	ldr	r3, [pc, #24]	@ (8107a48 <prvSwitchTimerLists+0xc8>)
 8107a2e:	681b      	ldr	r3, [r3, #0]
 8107a30:	4a04      	ldr	r2, [pc, #16]	@ (8107a44 <prvSwitchTimerLists+0xc4>)
 8107a32:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8107a34:	4a04      	ldr	r2, [pc, #16]	@ (8107a48 <prvSwitchTimerLists+0xc8>)
 8107a36:	697b      	ldr	r3, [r7, #20]
 8107a38:	6013      	str	r3, [r2, #0]
}
 8107a3a:	bf00      	nop
 8107a3c:	3718      	adds	r7, #24
 8107a3e:	46bd      	mov	sp, r7
 8107a40:	bd80      	pop	{r7, pc}
 8107a42:	bf00      	nop
 8107a44:	10004a88 	.word	0x10004a88
 8107a48:	10004a8c 	.word	0x10004a8c

08107a4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8107a4c:	b580      	push	{r7, lr}
 8107a4e:	b082      	sub	sp, #8
 8107a50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8107a52:	f7fd faa9 	bl	8104fa8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8107a56:	4b15      	ldr	r3, [pc, #84]	@ (8107aac <prvCheckForValidListAndQueue+0x60>)
 8107a58:	681b      	ldr	r3, [r3, #0]
 8107a5a:	2b00      	cmp	r3, #0
 8107a5c:	d120      	bne.n	8107aa0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8107a5e:	4814      	ldr	r0, [pc, #80]	@ (8107ab0 <prvCheckForValidListAndQueue+0x64>)
 8107a60:	f7fd f8ba 	bl	8104bd8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8107a64:	4813      	ldr	r0, [pc, #76]	@ (8107ab4 <prvCheckForValidListAndQueue+0x68>)
 8107a66:	f7fd f8b7 	bl	8104bd8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8107a6a:	4b13      	ldr	r3, [pc, #76]	@ (8107ab8 <prvCheckForValidListAndQueue+0x6c>)
 8107a6c:	4a10      	ldr	r2, [pc, #64]	@ (8107ab0 <prvCheckForValidListAndQueue+0x64>)
 8107a6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8107a70:	4b12      	ldr	r3, [pc, #72]	@ (8107abc <prvCheckForValidListAndQueue+0x70>)
 8107a72:	4a10      	ldr	r2, [pc, #64]	@ (8107ab4 <prvCheckForValidListAndQueue+0x68>)
 8107a74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8107a76:	2300      	movs	r3, #0
 8107a78:	9300      	str	r3, [sp, #0]
 8107a7a:	4b11      	ldr	r3, [pc, #68]	@ (8107ac0 <prvCheckForValidListAndQueue+0x74>)
 8107a7c:	4a11      	ldr	r2, [pc, #68]	@ (8107ac4 <prvCheckForValidListAndQueue+0x78>)
 8107a7e:	2110      	movs	r1, #16
 8107a80:	200a      	movs	r0, #10
 8107a82:	f7fd fc1d 	bl	81052c0 <xQueueGenericCreateStatic>
 8107a86:	4603      	mov	r3, r0
 8107a88:	4a08      	ldr	r2, [pc, #32]	@ (8107aac <prvCheckForValidListAndQueue+0x60>)
 8107a8a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8107a8c:	4b07      	ldr	r3, [pc, #28]	@ (8107aac <prvCheckForValidListAndQueue+0x60>)
 8107a8e:	681b      	ldr	r3, [r3, #0]
 8107a90:	2b00      	cmp	r3, #0
 8107a92:	d005      	beq.n	8107aa0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8107a94:	4b05      	ldr	r3, [pc, #20]	@ (8107aac <prvCheckForValidListAndQueue+0x60>)
 8107a96:	681b      	ldr	r3, [r3, #0]
 8107a98:	490b      	ldr	r1, [pc, #44]	@ (8107ac8 <prvCheckForValidListAndQueue+0x7c>)
 8107a9a:	4618      	mov	r0, r3
 8107a9c:	f7fe f90e 	bl	8105cbc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8107aa0:	f7fd fab4 	bl	810500c <vPortExitCritical>
}
 8107aa4:	bf00      	nop
 8107aa6:	46bd      	mov	sp, r7
 8107aa8:	bd80      	pop	{r7, pc}
 8107aaa:	bf00      	nop
 8107aac:	10004a90 	.word	0x10004a90
 8107ab0:	10004a60 	.word	0x10004a60
 8107ab4:	10004a74 	.word	0x10004a74
 8107ab8:	10004a88 	.word	0x10004a88
 8107abc:	10004a8c 	.word	0x10004a8c
 8107ac0:	10004b3c 	.word	0x10004b3c
 8107ac4:	10004a9c 	.word	0x10004a9c
 8107ac8:	0810812c 	.word	0x0810812c

08107acc <_ZdlPvj>:
 8107acc:	f000 b8da 	b.w	8107c84 <_ZdlPv>

08107ad0 <_Znwj>:
 8107ad0:	2801      	cmp	r0, #1
 8107ad2:	bf38      	it	cc
 8107ad4:	2001      	movcc	r0, #1
 8107ad6:	b510      	push	{r4, lr}
 8107ad8:	4604      	mov	r4, r0
 8107ada:	4620      	mov	r0, r4
 8107adc:	f000 f8e4 	bl	8107ca8 <malloc>
 8107ae0:	b100      	cbz	r0, 8107ae4 <_Znwj+0x14>
 8107ae2:	bd10      	pop	{r4, pc}
 8107ae4:	f000 f8d0 	bl	8107c88 <_ZSt15get_new_handlerv>
 8107ae8:	b908      	cbnz	r0, 8107aee <_Znwj+0x1e>
 8107aea:	f000 f8d5 	bl	8107c98 <abort>
 8107aee:	4780      	blx	r0
 8107af0:	e7f3      	b.n	8107ada <_Znwj+0xa>

08107af2 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8107af2:	68c3      	ldr	r3, [r0, #12]
 8107af4:	689a      	ldr	r2, [r3, #8]
 8107af6:	60c2      	str	r2, [r0, #12]
 8107af8:	b510      	push	{r4, lr}
 8107afa:	b102      	cbz	r2, 8107afe <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 8107afc:	6050      	str	r0, [r2, #4]
 8107afe:	6842      	ldr	r2, [r0, #4]
 8107b00:	605a      	str	r2, [r3, #4]
 8107b02:	680c      	ldr	r4, [r1, #0]
 8107b04:	4284      	cmp	r4, r0
 8107b06:	d103      	bne.n	8107b10 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 8107b08:	600b      	str	r3, [r1, #0]
 8107b0a:	6098      	str	r0, [r3, #8]
 8107b0c:	6043      	str	r3, [r0, #4]
 8107b0e:	bd10      	pop	{r4, pc}
 8107b10:	6891      	ldr	r1, [r2, #8]
 8107b12:	4281      	cmp	r1, r0
 8107b14:	bf0c      	ite	eq
 8107b16:	6093      	streq	r3, [r2, #8]
 8107b18:	60d3      	strne	r3, [r2, #12]
 8107b1a:	e7f6      	b.n	8107b0a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

08107b1c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 8107b1c:	6883      	ldr	r3, [r0, #8]
 8107b1e:	68da      	ldr	r2, [r3, #12]
 8107b20:	6082      	str	r2, [r0, #8]
 8107b22:	b510      	push	{r4, lr}
 8107b24:	b102      	cbz	r2, 8107b28 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 8107b26:	6050      	str	r0, [r2, #4]
 8107b28:	6842      	ldr	r2, [r0, #4]
 8107b2a:	605a      	str	r2, [r3, #4]
 8107b2c:	680c      	ldr	r4, [r1, #0]
 8107b2e:	4284      	cmp	r4, r0
 8107b30:	d103      	bne.n	8107b3a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 8107b32:	600b      	str	r3, [r1, #0]
 8107b34:	60d8      	str	r0, [r3, #12]
 8107b36:	6043      	str	r3, [r0, #4]
 8107b38:	bd10      	pop	{r4, pc}
 8107b3a:	68d1      	ldr	r1, [r2, #12]
 8107b3c:	4281      	cmp	r1, r0
 8107b3e:	bf0c      	ite	eq
 8107b40:	60d3      	streq	r3, [r2, #12]
 8107b42:	6093      	strne	r3, [r2, #8]
 8107b44:	e7f6      	b.n	8107b34 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

08107b46 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8107b46:	68c3      	ldr	r3, [r0, #12]
 8107b48:	b123      	cbz	r3, 8107b54 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 8107b4a:	4618      	mov	r0, r3
 8107b4c:	689b      	ldr	r3, [r3, #8]
 8107b4e:	2b00      	cmp	r3, #0
 8107b50:	d1fb      	bne.n	8107b4a <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 8107b52:	4770      	bx	lr
 8107b54:	6843      	ldr	r3, [r0, #4]
 8107b56:	68da      	ldr	r2, [r3, #12]
 8107b58:	4282      	cmp	r2, r0
 8107b5a:	d004      	beq.n	8107b66 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x20>
 8107b5c:	68c2      	ldr	r2, [r0, #12]
 8107b5e:	4293      	cmp	r3, r2
 8107b60:	bf18      	it	ne
 8107b62:	4618      	movne	r0, r3
 8107b64:	4770      	bx	lr
 8107b66:	4618      	mov	r0, r3
 8107b68:	685b      	ldr	r3, [r3, #4]
 8107b6a:	e7f4      	b.n	8107b56 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>

08107b6c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8107b6c:	7802      	ldrb	r2, [r0, #0]
 8107b6e:	4603      	mov	r3, r0
 8107b70:	b92a      	cbnz	r2, 8107b7e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8107b72:	6842      	ldr	r2, [r0, #4]
 8107b74:	6852      	ldr	r2, [r2, #4]
 8107b76:	4282      	cmp	r2, r0
 8107b78:	d101      	bne.n	8107b7e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8107b7a:	68d0      	ldr	r0, [r2, #12]
 8107b7c:	4770      	bx	lr
 8107b7e:	689a      	ldr	r2, [r3, #8]
 8107b80:	b122      	cbz	r2, 8107b8c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 8107b82:	4610      	mov	r0, r2
 8107b84:	68d2      	ldr	r2, [r2, #12]
 8107b86:	2a00      	cmp	r2, #0
 8107b88:	d1fb      	bne.n	8107b82 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 8107b8a:	4770      	bx	lr
 8107b8c:	6858      	ldr	r0, [r3, #4]
 8107b8e:	6882      	ldr	r2, [r0, #8]
 8107b90:	429a      	cmp	r2, r3
 8107b92:	d000      	beq.n	8107b96 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x2a>
 8107b94:	4770      	bx	lr
 8107b96:	4603      	mov	r3, r0
 8107b98:	6840      	ldr	r0, [r0, #4]
 8107b9a:	e7f8      	b.n	8107b8e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

08107b9c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8107b9c:	f7ff bfd3 	b.w	8107b46 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

08107ba0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8107ba0:	f7ff bfe4 	b.w	8107b6c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

08107ba4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 8107ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8107ba8:	461d      	mov	r5, r3
 8107baa:	1d1f      	adds	r7, r3, #4
 8107bac:	2300      	movs	r3, #0
 8107bae:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8107bb2:	460c      	mov	r4, r1
 8107bb4:	604a      	str	r2, [r1, #4]
 8107bb6:	700b      	strb	r3, [r1, #0]
 8107bb8:	b1a0      	cbz	r0, 8107be4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x40>
 8107bba:	4295      	cmp	r5, r2
 8107bbc:	6091      	str	r1, [r2, #8]
 8107bbe:	d102      	bne.n	8107bc6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8107bc0:	6069      	str	r1, [r5, #4]
 8107bc2:	60ec      	str	r4, [r5, #12]
 8107bc4:	e003      	b.n	8107bce <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 8107bc6:	68ab      	ldr	r3, [r5, #8]
 8107bc8:	4293      	cmp	r3, r2
 8107bca:	bf08      	it	eq
 8107bcc:	60a9      	streq	r1, [r5, #8]
 8107bce:	f04f 0900 	mov.w	r9, #0
 8107bd2:	f04f 0801 	mov.w	r8, #1
 8107bd6:	686b      	ldr	r3, [r5, #4]
 8107bd8:	42a3      	cmp	r3, r4
 8107bda:	d132      	bne.n	8107c42 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9e>
 8107bdc:	2201      	movs	r2, #1
 8107bde:	701a      	strb	r2, [r3, #0]
 8107be0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8107be4:	60d1      	str	r1, [r2, #12]
 8107be6:	68eb      	ldr	r3, [r5, #12]
 8107be8:	4293      	cmp	r3, r2
 8107bea:	d1f0      	bne.n	8107bce <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2a>
 8107bec:	e7e9      	b.n	8107bc2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x1e>
 8107bee:	68c3      	ldr	r3, [r0, #12]
 8107bf0:	42a3      	cmp	r3, r4
 8107bf2:	d103      	bne.n	8107bfc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x58>
 8107bf4:	4639      	mov	r1, r7
 8107bf6:	f7ff ff7c 	bl	8107af2 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8107bfa:	4604      	mov	r4, r0
 8107bfc:	6863      	ldr	r3, [r4, #4]
 8107bfe:	4639      	mov	r1, r7
 8107c00:	f883 8000 	strb.w	r8, [r3]
 8107c04:	4630      	mov	r0, r6
 8107c06:	f886 9000 	strb.w	r9, [r6]
 8107c0a:	f7ff ff87 	bl	8107b1c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8107c0e:	e7e2      	b.n	8107bd6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 8107c10:	b133      	cbz	r3, 8107c20 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 8107c12:	781a      	ldrb	r2, [r3, #0]
 8107c14:	b922      	cbnz	r2, 8107c20 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7c>
 8107c16:	f880 8000 	strb.w	r8, [r0]
 8107c1a:	f883 8000 	strb.w	r8, [r3]
 8107c1e:	e021      	b.n	8107c64 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xc0>
 8107c20:	6883      	ldr	r3, [r0, #8]
 8107c22:	42a3      	cmp	r3, r4
 8107c24:	d103      	bne.n	8107c2e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8a>
 8107c26:	4639      	mov	r1, r7
 8107c28:	f7ff ff78 	bl	8107b1c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8107c2c:	4604      	mov	r4, r0
 8107c2e:	6863      	ldr	r3, [r4, #4]
 8107c30:	4639      	mov	r1, r7
 8107c32:	f883 8000 	strb.w	r8, [r3]
 8107c36:	4630      	mov	r0, r6
 8107c38:	f886 9000 	strb.w	r9, [r6]
 8107c3c:	f7ff ff59 	bl	8107af2 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8107c40:	e7c9      	b.n	8107bd6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 8107c42:	6860      	ldr	r0, [r4, #4]
 8107c44:	7802      	ldrb	r2, [r0, #0]
 8107c46:	2a00      	cmp	r2, #0
 8107c48:	d1c8      	bne.n	8107bdc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x38>
 8107c4a:	6846      	ldr	r6, [r0, #4]
 8107c4c:	68b3      	ldr	r3, [r6, #8]
 8107c4e:	4283      	cmp	r3, r0
 8107c50:	d1de      	bne.n	8107c10 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6c>
 8107c52:	68f2      	ldr	r2, [r6, #12]
 8107c54:	2a00      	cmp	r2, #0
 8107c56:	d0ca      	beq.n	8107bee <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 8107c58:	7811      	ldrb	r1, [r2, #0]
 8107c5a:	2900      	cmp	r1, #0
 8107c5c:	d1c7      	bne.n	8107bee <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4a>
 8107c5e:	2101      	movs	r1, #1
 8107c60:	7019      	strb	r1, [r3, #0]
 8107c62:	7011      	strb	r1, [r2, #0]
 8107c64:	f886 9000 	strb.w	r9, [r6]
 8107c68:	4634      	mov	r4, r6
 8107c6a:	e7b4      	b.n	8107bd6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>

08107c6c <_ZSt17__throw_bad_allocv>:
 8107c6c:	b508      	push	{r3, lr}
 8107c6e:	f000 f813 	bl	8107c98 <abort>

08107c72 <_ZSt28__throw_bad_array_new_lengthv>:
 8107c72:	b508      	push	{r3, lr}
 8107c74:	f000 f810 	bl	8107c98 <abort>

08107c78 <_ZSt20__throw_length_errorPKc>:
 8107c78:	b508      	push	{r3, lr}
 8107c7a:	f000 f80d 	bl	8107c98 <abort>

08107c7e <_ZSt25__throw_bad_function_callv>:
 8107c7e:	b508      	push	{r3, lr}
 8107c80:	f000 f80a 	bl	8107c98 <abort>

08107c84 <_ZdlPv>:
 8107c84:	f000 b818 	b.w	8107cb8 <free>

08107c88 <_ZSt15get_new_handlerv>:
 8107c88:	4b02      	ldr	r3, [pc, #8]	@ (8107c94 <_ZSt15get_new_handlerv+0xc>)
 8107c8a:	6818      	ldr	r0, [r3, #0]
 8107c8c:	f3bf 8f5b 	dmb	ish
 8107c90:	4770      	bx	lr
 8107c92:	bf00      	nop
 8107c94:	10004b8c 	.word	0x10004b8c

08107c98 <abort>:
 8107c98:	b508      	push	{r3, lr}
 8107c9a:	2006      	movs	r0, #6
 8107c9c:	f000 f90c 	bl	8107eb8 <raise>
 8107ca0:	2001      	movs	r0, #1
 8107ca2:	f7f8 fe59 	bl	8100958 <_exit>
	...

08107ca8 <malloc>:
 8107ca8:	4b02      	ldr	r3, [pc, #8]	@ (8107cb4 <malloc+0xc>)
 8107caa:	4601      	mov	r1, r0
 8107cac:	6818      	ldr	r0, [r3, #0]
 8107cae:	f000 b82d 	b.w	8107d0c <_malloc_r>
 8107cb2:	bf00      	nop
 8107cb4:	10000014 	.word	0x10000014

08107cb8 <free>:
 8107cb8:	4b02      	ldr	r3, [pc, #8]	@ (8107cc4 <free+0xc>)
 8107cba:	4601      	mov	r1, r0
 8107cbc:	6818      	ldr	r0, [r3, #0]
 8107cbe:	f000 b9b1 	b.w	8108024 <_free_r>
 8107cc2:	bf00      	nop
 8107cc4:	10000014 	.word	0x10000014

08107cc8 <sbrk_aligned>:
 8107cc8:	b570      	push	{r4, r5, r6, lr}
 8107cca:	4e0f      	ldr	r6, [pc, #60]	@ (8107d08 <sbrk_aligned+0x40>)
 8107ccc:	460c      	mov	r4, r1
 8107cce:	6831      	ldr	r1, [r6, #0]
 8107cd0:	4605      	mov	r5, r0
 8107cd2:	b911      	cbnz	r1, 8107cda <sbrk_aligned+0x12>
 8107cd4:	f000 f962 	bl	8107f9c <_sbrk_r>
 8107cd8:	6030      	str	r0, [r6, #0]
 8107cda:	4621      	mov	r1, r4
 8107cdc:	4628      	mov	r0, r5
 8107cde:	f000 f95d 	bl	8107f9c <_sbrk_r>
 8107ce2:	1c43      	adds	r3, r0, #1
 8107ce4:	d103      	bne.n	8107cee <sbrk_aligned+0x26>
 8107ce6:	f04f 34ff 	mov.w	r4, #4294967295
 8107cea:	4620      	mov	r0, r4
 8107cec:	bd70      	pop	{r4, r5, r6, pc}
 8107cee:	1cc4      	adds	r4, r0, #3
 8107cf0:	f024 0403 	bic.w	r4, r4, #3
 8107cf4:	42a0      	cmp	r0, r4
 8107cf6:	d0f8      	beq.n	8107cea <sbrk_aligned+0x22>
 8107cf8:	1a21      	subs	r1, r4, r0
 8107cfa:	4628      	mov	r0, r5
 8107cfc:	f000 f94e 	bl	8107f9c <_sbrk_r>
 8107d00:	3001      	adds	r0, #1
 8107d02:	d1f2      	bne.n	8107cea <sbrk_aligned+0x22>
 8107d04:	e7ef      	b.n	8107ce6 <sbrk_aligned+0x1e>
 8107d06:	bf00      	nop
 8107d08:	10004b90 	.word	0x10004b90

08107d0c <_malloc_r>:
 8107d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8107d10:	1ccd      	adds	r5, r1, #3
 8107d12:	f025 0503 	bic.w	r5, r5, #3
 8107d16:	3508      	adds	r5, #8
 8107d18:	2d0c      	cmp	r5, #12
 8107d1a:	bf38      	it	cc
 8107d1c:	250c      	movcc	r5, #12
 8107d1e:	2d00      	cmp	r5, #0
 8107d20:	4606      	mov	r6, r0
 8107d22:	db01      	blt.n	8107d28 <_malloc_r+0x1c>
 8107d24:	42a9      	cmp	r1, r5
 8107d26:	d904      	bls.n	8107d32 <_malloc_r+0x26>
 8107d28:	230c      	movs	r3, #12
 8107d2a:	6033      	str	r3, [r6, #0]
 8107d2c:	2000      	movs	r0, #0
 8107d2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8107d32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8107e08 <_malloc_r+0xfc>
 8107d36:	f000 f869 	bl	8107e0c <__malloc_lock>
 8107d3a:	f8d8 3000 	ldr.w	r3, [r8]
 8107d3e:	461c      	mov	r4, r3
 8107d40:	bb44      	cbnz	r4, 8107d94 <_malloc_r+0x88>
 8107d42:	4629      	mov	r1, r5
 8107d44:	4630      	mov	r0, r6
 8107d46:	f7ff ffbf 	bl	8107cc8 <sbrk_aligned>
 8107d4a:	1c43      	adds	r3, r0, #1
 8107d4c:	4604      	mov	r4, r0
 8107d4e:	d158      	bne.n	8107e02 <_malloc_r+0xf6>
 8107d50:	f8d8 4000 	ldr.w	r4, [r8]
 8107d54:	4627      	mov	r7, r4
 8107d56:	2f00      	cmp	r7, #0
 8107d58:	d143      	bne.n	8107de2 <_malloc_r+0xd6>
 8107d5a:	2c00      	cmp	r4, #0
 8107d5c:	d04b      	beq.n	8107df6 <_malloc_r+0xea>
 8107d5e:	6823      	ldr	r3, [r4, #0]
 8107d60:	4639      	mov	r1, r7
 8107d62:	4630      	mov	r0, r6
 8107d64:	eb04 0903 	add.w	r9, r4, r3
 8107d68:	f000 f918 	bl	8107f9c <_sbrk_r>
 8107d6c:	4581      	cmp	r9, r0
 8107d6e:	d142      	bne.n	8107df6 <_malloc_r+0xea>
 8107d70:	6821      	ldr	r1, [r4, #0]
 8107d72:	1a6d      	subs	r5, r5, r1
 8107d74:	4629      	mov	r1, r5
 8107d76:	4630      	mov	r0, r6
 8107d78:	f7ff ffa6 	bl	8107cc8 <sbrk_aligned>
 8107d7c:	3001      	adds	r0, #1
 8107d7e:	d03a      	beq.n	8107df6 <_malloc_r+0xea>
 8107d80:	6823      	ldr	r3, [r4, #0]
 8107d82:	442b      	add	r3, r5
 8107d84:	6023      	str	r3, [r4, #0]
 8107d86:	f8d8 3000 	ldr.w	r3, [r8]
 8107d8a:	685a      	ldr	r2, [r3, #4]
 8107d8c:	bb62      	cbnz	r2, 8107de8 <_malloc_r+0xdc>
 8107d8e:	f8c8 7000 	str.w	r7, [r8]
 8107d92:	e00f      	b.n	8107db4 <_malloc_r+0xa8>
 8107d94:	6822      	ldr	r2, [r4, #0]
 8107d96:	1b52      	subs	r2, r2, r5
 8107d98:	d420      	bmi.n	8107ddc <_malloc_r+0xd0>
 8107d9a:	2a0b      	cmp	r2, #11
 8107d9c:	d917      	bls.n	8107dce <_malloc_r+0xc2>
 8107d9e:	1961      	adds	r1, r4, r5
 8107da0:	42a3      	cmp	r3, r4
 8107da2:	6025      	str	r5, [r4, #0]
 8107da4:	bf18      	it	ne
 8107da6:	6059      	strne	r1, [r3, #4]
 8107da8:	6863      	ldr	r3, [r4, #4]
 8107daa:	bf08      	it	eq
 8107dac:	f8c8 1000 	streq.w	r1, [r8]
 8107db0:	5162      	str	r2, [r4, r5]
 8107db2:	604b      	str	r3, [r1, #4]
 8107db4:	4630      	mov	r0, r6
 8107db6:	f000 f82f 	bl	8107e18 <__malloc_unlock>
 8107dba:	f104 000b 	add.w	r0, r4, #11
 8107dbe:	1d23      	adds	r3, r4, #4
 8107dc0:	f020 0007 	bic.w	r0, r0, #7
 8107dc4:	1ac2      	subs	r2, r0, r3
 8107dc6:	bf1c      	itt	ne
 8107dc8:	1a1b      	subne	r3, r3, r0
 8107dca:	50a3      	strne	r3, [r4, r2]
 8107dcc:	e7af      	b.n	8107d2e <_malloc_r+0x22>
 8107dce:	6862      	ldr	r2, [r4, #4]
 8107dd0:	42a3      	cmp	r3, r4
 8107dd2:	bf0c      	ite	eq
 8107dd4:	f8c8 2000 	streq.w	r2, [r8]
 8107dd8:	605a      	strne	r2, [r3, #4]
 8107dda:	e7eb      	b.n	8107db4 <_malloc_r+0xa8>
 8107ddc:	4623      	mov	r3, r4
 8107dde:	6864      	ldr	r4, [r4, #4]
 8107de0:	e7ae      	b.n	8107d40 <_malloc_r+0x34>
 8107de2:	463c      	mov	r4, r7
 8107de4:	687f      	ldr	r7, [r7, #4]
 8107de6:	e7b6      	b.n	8107d56 <_malloc_r+0x4a>
 8107de8:	461a      	mov	r2, r3
 8107dea:	685b      	ldr	r3, [r3, #4]
 8107dec:	42a3      	cmp	r3, r4
 8107dee:	d1fb      	bne.n	8107de8 <_malloc_r+0xdc>
 8107df0:	2300      	movs	r3, #0
 8107df2:	6053      	str	r3, [r2, #4]
 8107df4:	e7de      	b.n	8107db4 <_malloc_r+0xa8>
 8107df6:	230c      	movs	r3, #12
 8107df8:	6033      	str	r3, [r6, #0]
 8107dfa:	4630      	mov	r0, r6
 8107dfc:	f000 f80c 	bl	8107e18 <__malloc_unlock>
 8107e00:	e794      	b.n	8107d2c <_malloc_r+0x20>
 8107e02:	6005      	str	r5, [r0, #0]
 8107e04:	e7d6      	b.n	8107db4 <_malloc_r+0xa8>
 8107e06:	bf00      	nop
 8107e08:	10004b94 	.word	0x10004b94

08107e0c <__malloc_lock>:
 8107e0c:	4801      	ldr	r0, [pc, #4]	@ (8107e14 <__malloc_lock+0x8>)
 8107e0e:	f000 b8f9 	b.w	8108004 <__retarget_lock_acquire_recursive>
 8107e12:	bf00      	nop
 8107e14:	10004cd4 	.word	0x10004cd4

08107e18 <__malloc_unlock>:
 8107e18:	4801      	ldr	r0, [pc, #4]	@ (8107e20 <__malloc_unlock+0x8>)
 8107e1a:	f000 b8f4 	b.w	8108006 <__retarget_lock_release_recursive>
 8107e1e:	bf00      	nop
 8107e20:	10004cd4 	.word	0x10004cd4

08107e24 <memmove>:
 8107e24:	4288      	cmp	r0, r1
 8107e26:	b510      	push	{r4, lr}
 8107e28:	eb01 0402 	add.w	r4, r1, r2
 8107e2c:	d902      	bls.n	8107e34 <memmove+0x10>
 8107e2e:	4284      	cmp	r4, r0
 8107e30:	4623      	mov	r3, r4
 8107e32:	d807      	bhi.n	8107e44 <memmove+0x20>
 8107e34:	1e43      	subs	r3, r0, #1
 8107e36:	42a1      	cmp	r1, r4
 8107e38:	d008      	beq.n	8107e4c <memmove+0x28>
 8107e3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8107e3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8107e42:	e7f8      	b.n	8107e36 <memmove+0x12>
 8107e44:	4402      	add	r2, r0
 8107e46:	4601      	mov	r1, r0
 8107e48:	428a      	cmp	r2, r1
 8107e4a:	d100      	bne.n	8107e4e <memmove+0x2a>
 8107e4c:	bd10      	pop	{r4, pc}
 8107e4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8107e52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8107e56:	e7f7      	b.n	8107e48 <memmove+0x24>

08107e58 <memset>:
 8107e58:	4402      	add	r2, r0
 8107e5a:	4603      	mov	r3, r0
 8107e5c:	4293      	cmp	r3, r2
 8107e5e:	d100      	bne.n	8107e62 <memset+0xa>
 8107e60:	4770      	bx	lr
 8107e62:	f803 1b01 	strb.w	r1, [r3], #1
 8107e66:	e7f9      	b.n	8107e5c <memset+0x4>

08107e68 <_raise_r>:
 8107e68:	291f      	cmp	r1, #31
 8107e6a:	b538      	push	{r3, r4, r5, lr}
 8107e6c:	4605      	mov	r5, r0
 8107e6e:	460c      	mov	r4, r1
 8107e70:	d904      	bls.n	8107e7c <_raise_r+0x14>
 8107e72:	2316      	movs	r3, #22
 8107e74:	6003      	str	r3, [r0, #0]
 8107e76:	f04f 30ff 	mov.w	r0, #4294967295
 8107e7a:	bd38      	pop	{r3, r4, r5, pc}
 8107e7c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8107e7e:	b112      	cbz	r2, 8107e86 <_raise_r+0x1e>
 8107e80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8107e84:	b94b      	cbnz	r3, 8107e9a <_raise_r+0x32>
 8107e86:	4628      	mov	r0, r5
 8107e88:	f000 f886 	bl	8107f98 <_getpid_r>
 8107e8c:	4622      	mov	r2, r4
 8107e8e:	4601      	mov	r1, r0
 8107e90:	4628      	mov	r0, r5
 8107e92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8107e96:	f000 b86d 	b.w	8107f74 <_kill_r>
 8107e9a:	2b01      	cmp	r3, #1
 8107e9c:	d00a      	beq.n	8107eb4 <_raise_r+0x4c>
 8107e9e:	1c59      	adds	r1, r3, #1
 8107ea0:	d103      	bne.n	8107eaa <_raise_r+0x42>
 8107ea2:	2316      	movs	r3, #22
 8107ea4:	6003      	str	r3, [r0, #0]
 8107ea6:	2001      	movs	r0, #1
 8107ea8:	e7e7      	b.n	8107e7a <_raise_r+0x12>
 8107eaa:	2100      	movs	r1, #0
 8107eac:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8107eb0:	4620      	mov	r0, r4
 8107eb2:	4798      	blx	r3
 8107eb4:	2000      	movs	r0, #0
 8107eb6:	e7e0      	b.n	8107e7a <_raise_r+0x12>

08107eb8 <raise>:
 8107eb8:	4b02      	ldr	r3, [pc, #8]	@ (8107ec4 <raise+0xc>)
 8107eba:	4601      	mov	r1, r0
 8107ebc:	6818      	ldr	r0, [r3, #0]
 8107ebe:	f7ff bfd3 	b.w	8107e68 <_raise_r>
 8107ec2:	bf00      	nop
 8107ec4:	10000014 	.word	0x10000014

08107ec8 <_reclaim_reent>:
 8107ec8:	4b29      	ldr	r3, [pc, #164]	@ (8107f70 <_reclaim_reent+0xa8>)
 8107eca:	681b      	ldr	r3, [r3, #0]
 8107ecc:	4283      	cmp	r3, r0
 8107ece:	b570      	push	{r4, r5, r6, lr}
 8107ed0:	4604      	mov	r4, r0
 8107ed2:	d04b      	beq.n	8107f6c <_reclaim_reent+0xa4>
 8107ed4:	69c3      	ldr	r3, [r0, #28]
 8107ed6:	b1ab      	cbz	r3, 8107f04 <_reclaim_reent+0x3c>
 8107ed8:	68db      	ldr	r3, [r3, #12]
 8107eda:	b16b      	cbz	r3, 8107ef8 <_reclaim_reent+0x30>
 8107edc:	2500      	movs	r5, #0
 8107ede:	69e3      	ldr	r3, [r4, #28]
 8107ee0:	68db      	ldr	r3, [r3, #12]
 8107ee2:	5959      	ldr	r1, [r3, r5]
 8107ee4:	2900      	cmp	r1, #0
 8107ee6:	d13b      	bne.n	8107f60 <_reclaim_reent+0x98>
 8107ee8:	3504      	adds	r5, #4
 8107eea:	2d80      	cmp	r5, #128	@ 0x80
 8107eec:	d1f7      	bne.n	8107ede <_reclaim_reent+0x16>
 8107eee:	69e3      	ldr	r3, [r4, #28]
 8107ef0:	4620      	mov	r0, r4
 8107ef2:	68d9      	ldr	r1, [r3, #12]
 8107ef4:	f000 f896 	bl	8108024 <_free_r>
 8107ef8:	69e3      	ldr	r3, [r4, #28]
 8107efa:	6819      	ldr	r1, [r3, #0]
 8107efc:	b111      	cbz	r1, 8107f04 <_reclaim_reent+0x3c>
 8107efe:	4620      	mov	r0, r4
 8107f00:	f000 f890 	bl	8108024 <_free_r>
 8107f04:	6961      	ldr	r1, [r4, #20]
 8107f06:	b111      	cbz	r1, 8107f0e <_reclaim_reent+0x46>
 8107f08:	4620      	mov	r0, r4
 8107f0a:	f000 f88b 	bl	8108024 <_free_r>
 8107f0e:	69e1      	ldr	r1, [r4, #28]
 8107f10:	b111      	cbz	r1, 8107f18 <_reclaim_reent+0x50>
 8107f12:	4620      	mov	r0, r4
 8107f14:	f000 f886 	bl	8108024 <_free_r>
 8107f18:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8107f1a:	b111      	cbz	r1, 8107f22 <_reclaim_reent+0x5a>
 8107f1c:	4620      	mov	r0, r4
 8107f1e:	f000 f881 	bl	8108024 <_free_r>
 8107f22:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8107f24:	b111      	cbz	r1, 8107f2c <_reclaim_reent+0x64>
 8107f26:	4620      	mov	r0, r4
 8107f28:	f000 f87c 	bl	8108024 <_free_r>
 8107f2c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8107f2e:	b111      	cbz	r1, 8107f36 <_reclaim_reent+0x6e>
 8107f30:	4620      	mov	r0, r4
 8107f32:	f000 f877 	bl	8108024 <_free_r>
 8107f36:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8107f38:	b111      	cbz	r1, 8107f40 <_reclaim_reent+0x78>
 8107f3a:	4620      	mov	r0, r4
 8107f3c:	f000 f872 	bl	8108024 <_free_r>
 8107f40:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8107f42:	b111      	cbz	r1, 8107f4a <_reclaim_reent+0x82>
 8107f44:	4620      	mov	r0, r4
 8107f46:	f000 f86d 	bl	8108024 <_free_r>
 8107f4a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8107f4c:	b111      	cbz	r1, 8107f54 <_reclaim_reent+0x8c>
 8107f4e:	4620      	mov	r0, r4
 8107f50:	f000 f868 	bl	8108024 <_free_r>
 8107f54:	6a23      	ldr	r3, [r4, #32]
 8107f56:	b14b      	cbz	r3, 8107f6c <_reclaim_reent+0xa4>
 8107f58:	4620      	mov	r0, r4
 8107f5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8107f5e:	4718      	bx	r3
 8107f60:	680e      	ldr	r6, [r1, #0]
 8107f62:	4620      	mov	r0, r4
 8107f64:	f000 f85e 	bl	8108024 <_free_r>
 8107f68:	4631      	mov	r1, r6
 8107f6a:	e7bb      	b.n	8107ee4 <_reclaim_reent+0x1c>
 8107f6c:	bd70      	pop	{r4, r5, r6, pc}
 8107f6e:	bf00      	nop
 8107f70:	10000014 	.word	0x10000014

08107f74 <_kill_r>:
 8107f74:	b538      	push	{r3, r4, r5, lr}
 8107f76:	4d07      	ldr	r5, [pc, #28]	@ (8107f94 <_kill_r+0x20>)
 8107f78:	2300      	movs	r3, #0
 8107f7a:	4604      	mov	r4, r0
 8107f7c:	4608      	mov	r0, r1
 8107f7e:	4611      	mov	r1, r2
 8107f80:	602b      	str	r3, [r5, #0]
 8107f82:	f7f8 fcd7 	bl	8100934 <_kill>
 8107f86:	1c43      	adds	r3, r0, #1
 8107f88:	d102      	bne.n	8107f90 <_kill_r+0x1c>
 8107f8a:	682b      	ldr	r3, [r5, #0]
 8107f8c:	b103      	cbz	r3, 8107f90 <_kill_r+0x1c>
 8107f8e:	6023      	str	r3, [r4, #0]
 8107f90:	bd38      	pop	{r3, r4, r5, pc}
 8107f92:	bf00      	nop
 8107f94:	10004cd0 	.word	0x10004cd0

08107f98 <_getpid_r>:
 8107f98:	f7f8 bcc4 	b.w	8100924 <_getpid>

08107f9c <_sbrk_r>:
 8107f9c:	b538      	push	{r3, r4, r5, lr}
 8107f9e:	4d06      	ldr	r5, [pc, #24]	@ (8107fb8 <_sbrk_r+0x1c>)
 8107fa0:	2300      	movs	r3, #0
 8107fa2:	4604      	mov	r4, r0
 8107fa4:	4608      	mov	r0, r1
 8107fa6:	602b      	str	r3, [r5, #0]
 8107fa8:	f7f8 fce2 	bl	8100970 <_sbrk>
 8107fac:	1c43      	adds	r3, r0, #1
 8107fae:	d102      	bne.n	8107fb6 <_sbrk_r+0x1a>
 8107fb0:	682b      	ldr	r3, [r5, #0]
 8107fb2:	b103      	cbz	r3, 8107fb6 <_sbrk_r+0x1a>
 8107fb4:	6023      	str	r3, [r4, #0]
 8107fb6:	bd38      	pop	{r3, r4, r5, pc}
 8107fb8:	10004cd0 	.word	0x10004cd0

08107fbc <__libc_init_array>:
 8107fbc:	b570      	push	{r4, r5, r6, lr}
 8107fbe:	4d0d      	ldr	r5, [pc, #52]	@ (8107ff4 <__libc_init_array+0x38>)
 8107fc0:	4c0d      	ldr	r4, [pc, #52]	@ (8107ff8 <__libc_init_array+0x3c>)
 8107fc2:	1b64      	subs	r4, r4, r5
 8107fc4:	10a4      	asrs	r4, r4, #2
 8107fc6:	2600      	movs	r6, #0
 8107fc8:	42a6      	cmp	r6, r4
 8107fca:	d109      	bne.n	8107fe0 <__libc_init_array+0x24>
 8107fcc:	4d0b      	ldr	r5, [pc, #44]	@ (8107ffc <__libc_init_array+0x40>)
 8107fce:	4c0c      	ldr	r4, [pc, #48]	@ (8108000 <__libc_init_array+0x44>)
 8107fd0:	f000 f872 	bl	81080b8 <_init>
 8107fd4:	1b64      	subs	r4, r4, r5
 8107fd6:	10a4      	asrs	r4, r4, #2
 8107fd8:	2600      	movs	r6, #0
 8107fda:	42a6      	cmp	r6, r4
 8107fdc:	d105      	bne.n	8107fea <__libc_init_array+0x2e>
 8107fde:	bd70      	pop	{r4, r5, r6, pc}
 8107fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8107fe4:	4798      	blx	r3
 8107fe6:	3601      	adds	r6, #1
 8107fe8:	e7ee      	b.n	8107fc8 <__libc_init_array+0xc>
 8107fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8107fee:	4798      	blx	r3
 8107ff0:	3601      	adds	r6, #1
 8107ff2:	e7f2      	b.n	8107fda <__libc_init_array+0x1e>
 8107ff4:	081081b4 	.word	0x081081b4
 8107ff8:	081081b4 	.word	0x081081b4
 8107ffc:	081081b4 	.word	0x081081b4
 8108000:	081081bc 	.word	0x081081bc

08108004 <__retarget_lock_acquire_recursive>:
 8108004:	4770      	bx	lr

08108006 <__retarget_lock_release_recursive>:
 8108006:	4770      	bx	lr

08108008 <memcpy>:
 8108008:	440a      	add	r2, r1
 810800a:	4291      	cmp	r1, r2
 810800c:	f100 33ff 	add.w	r3, r0, #4294967295
 8108010:	d100      	bne.n	8108014 <memcpy+0xc>
 8108012:	4770      	bx	lr
 8108014:	b510      	push	{r4, lr}
 8108016:	f811 4b01 	ldrb.w	r4, [r1], #1
 810801a:	f803 4f01 	strb.w	r4, [r3, #1]!
 810801e:	4291      	cmp	r1, r2
 8108020:	d1f9      	bne.n	8108016 <memcpy+0xe>
 8108022:	bd10      	pop	{r4, pc}

08108024 <_free_r>:
 8108024:	b538      	push	{r3, r4, r5, lr}
 8108026:	4605      	mov	r5, r0
 8108028:	2900      	cmp	r1, #0
 810802a:	d041      	beq.n	81080b0 <_free_r+0x8c>
 810802c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8108030:	1f0c      	subs	r4, r1, #4
 8108032:	2b00      	cmp	r3, #0
 8108034:	bfb8      	it	lt
 8108036:	18e4      	addlt	r4, r4, r3
 8108038:	f7ff fee8 	bl	8107e0c <__malloc_lock>
 810803c:	4a1d      	ldr	r2, [pc, #116]	@ (81080b4 <_free_r+0x90>)
 810803e:	6813      	ldr	r3, [r2, #0]
 8108040:	b933      	cbnz	r3, 8108050 <_free_r+0x2c>
 8108042:	6063      	str	r3, [r4, #4]
 8108044:	6014      	str	r4, [r2, #0]
 8108046:	4628      	mov	r0, r5
 8108048:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810804c:	f7ff bee4 	b.w	8107e18 <__malloc_unlock>
 8108050:	42a3      	cmp	r3, r4
 8108052:	d908      	bls.n	8108066 <_free_r+0x42>
 8108054:	6820      	ldr	r0, [r4, #0]
 8108056:	1821      	adds	r1, r4, r0
 8108058:	428b      	cmp	r3, r1
 810805a:	bf01      	itttt	eq
 810805c:	6819      	ldreq	r1, [r3, #0]
 810805e:	685b      	ldreq	r3, [r3, #4]
 8108060:	1809      	addeq	r1, r1, r0
 8108062:	6021      	streq	r1, [r4, #0]
 8108064:	e7ed      	b.n	8108042 <_free_r+0x1e>
 8108066:	461a      	mov	r2, r3
 8108068:	685b      	ldr	r3, [r3, #4]
 810806a:	b10b      	cbz	r3, 8108070 <_free_r+0x4c>
 810806c:	42a3      	cmp	r3, r4
 810806e:	d9fa      	bls.n	8108066 <_free_r+0x42>
 8108070:	6811      	ldr	r1, [r2, #0]
 8108072:	1850      	adds	r0, r2, r1
 8108074:	42a0      	cmp	r0, r4
 8108076:	d10b      	bne.n	8108090 <_free_r+0x6c>
 8108078:	6820      	ldr	r0, [r4, #0]
 810807a:	4401      	add	r1, r0
 810807c:	1850      	adds	r0, r2, r1
 810807e:	4283      	cmp	r3, r0
 8108080:	6011      	str	r1, [r2, #0]
 8108082:	d1e0      	bne.n	8108046 <_free_r+0x22>
 8108084:	6818      	ldr	r0, [r3, #0]
 8108086:	685b      	ldr	r3, [r3, #4]
 8108088:	6053      	str	r3, [r2, #4]
 810808a:	4408      	add	r0, r1
 810808c:	6010      	str	r0, [r2, #0]
 810808e:	e7da      	b.n	8108046 <_free_r+0x22>
 8108090:	d902      	bls.n	8108098 <_free_r+0x74>
 8108092:	230c      	movs	r3, #12
 8108094:	602b      	str	r3, [r5, #0]
 8108096:	e7d6      	b.n	8108046 <_free_r+0x22>
 8108098:	6820      	ldr	r0, [r4, #0]
 810809a:	1821      	adds	r1, r4, r0
 810809c:	428b      	cmp	r3, r1
 810809e:	bf04      	itt	eq
 81080a0:	6819      	ldreq	r1, [r3, #0]
 81080a2:	685b      	ldreq	r3, [r3, #4]
 81080a4:	6063      	str	r3, [r4, #4]
 81080a6:	bf04      	itt	eq
 81080a8:	1809      	addeq	r1, r1, r0
 81080aa:	6021      	streq	r1, [r4, #0]
 81080ac:	6054      	str	r4, [r2, #4]
 81080ae:	e7ca      	b.n	8108046 <_free_r+0x22>
 81080b0:	bd38      	pop	{r3, r4, r5, pc}
 81080b2:	bf00      	nop
 81080b4:	10004b94 	.word	0x10004b94

081080b8 <_init>:
 81080b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81080ba:	bf00      	nop
 81080bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81080be:	bc08      	pop	{r3}
 81080c0:	469e      	mov	lr, r3
 81080c2:	4770      	bx	lr

081080c4 <_fini>:
 81080c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81080c6:	bf00      	nop
 81080c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81080ca:	bc08      	pop	{r3}
 81080cc:	469e      	mov	lr, r3
 81080ce:	4770      	bx	lr
